{"sha": "756b69492b9cd4c3a3ee16514ed32764e0a059d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1NmI2OTQ5MmI5Y2Q0YzNhM2VlMTY1MTRlZDMyNzY0ZTBhMDU5ZDM=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-06-26T09:35:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-06-26T09:35:34Z"}, "message": "Rollup merge of #51153 - ogham:panic-and-compile_error-docs, r=GuillaumeGomez\n\nLink panic and compile_error docs\n\nThis adds documentation links between `panic!()` and `compile_error!()` as per #47275, which points out that they\u2019re similar. It also adds a sentence to the `compile_error()` docs I thought could be added.", "tree": {"sha": "2181194209148f6fdd461d66f2ea06d1ff0fa5ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2181194209148f6fdd461d66f2ea06d1ff0fa5ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/756b69492b9cd4c3a3ee16514ed32764e0a059d3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbMgjmCRBK7hj4Ov3rIwAAdHIIAD3J9r4SPF9XLwUDHhTd9RYO\ns0J5rGN1dJIfflvDltkYn/U7IVtAc/tkLchStDH0eobK5t3qDyw6D2ZNJSBVm00r\nm9lEwy6edLRzVS/YkvJuASv1JFLUERmkPb5mveB/Y/rCWErf9jfuPSRGdHIcPgSL\n+dNSaUccOQTWA4NcjZ4J55X2fzuYNSGsxYHKqP/H8dmaOrJxbZE5rs7EpJBIagVh\nr93lXgcY3OGYyWTVpogPKrhH3rF27gxA5Cl/tfTyUG8ZSD6u8rEYPYyHMbmR0J++\nuYe3Rrg9NVVo9c+bDcH2ypStnQbtPtzjEGT+8K5UGAMrvyL3DPq6nGysFg+/AVU=\n=aHl5\n-----END PGP SIGNATURE-----\n", "payload": "tree 2181194209148f6fdd461d66f2ea06d1ff0fa5ee\nparent d72a67f3bbf48cec735de85ec9c4200b842a80f6\nparent f85ddfbc3f25b73d41aa9db332dcd72bf70cd985\nauthor Pietro Albini <pietro@pietroalbini.org> 1530005734 +0200\ncommitter GitHub <noreply@github.com> 1530005734 +0200\n\nRollup merge of #51153 - ogham:panic-and-compile_error-docs, r=GuillaumeGomez\n\nLink panic and compile_error docs\n\nThis adds documentation links between `panic!()` and `compile_error!()` as per #47275, which points out that they\u2019re similar. It also adds a sentence to the `compile_error()` docs I thought could be added.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/756b69492b9cd4c3a3ee16514ed32764e0a059d3", "html_url": "https://github.com/rust-lang/rust/commit/756b69492b9cd4c3a3ee16514ed32764e0a059d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/756b69492b9cd4c3a3ee16514ed32764e0a059d3/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d72a67f3bbf48cec735de85ec9c4200b842a80f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/d72a67f3bbf48cec735de85ec9c4200b842a80f6", "html_url": "https://github.com/rust-lang/rust/commit/d72a67f3bbf48cec735de85ec9c4200b842a80f6"}, {"sha": "f85ddfbc3f25b73d41aa9db332dcd72bf70cd985", "url": "https://api.github.com/repos/rust-lang/rust/commits/f85ddfbc3f25b73d41aa9db332dcd72bf70cd985", "html_url": "https://github.com/rust-lang/rust/commit/f85ddfbc3f25b73d41aa9db332dcd72bf70cd985"}], "stats": {"total": 12, "additions": 10, "deletions": 2}, "files": [{"sha": "75f038407c12714d52729f1d29e77014282e04ba", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/756b69492b9cd4c3a3ee16514ed32764e0a059d3/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/756b69492b9cd4c3a3ee16514ed32764e0a059d3/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=756b69492b9cd4c3a3ee16514ed32764e0a059d3", "patch": "@@ -38,10 +38,13 @@\n /// The multi-argument form of this macro panics with a string and has the\n /// [`format!`] syntax for building a string.\n ///\n+/// See also the macro [`compile_error!`], for raising errors during compilation.\n+///\n /// [runwrap]: ../std/result/enum.Result.html#method.unwrap\n /// [`Option`]: ../std/option/enum.Option.html#method.unwrap\n /// [`Result`]: ../std/result/enum.Result.html\n /// [`format!`]: ../std/macro.format.html\n+/// [`compile_error!`]: ../std/macro.compile_error.html\n /// [book]: ../book/second-edition/ch09-01-unrecoverable-errors-with-panic.html\n ///\n /// # Current implementation\n@@ -305,13 +308,16 @@ pub mod builtin {\n     /// Unconditionally causes compilation to fail with the given error message when encountered.\n     ///\n     /// This macro should be used when a crate uses a conditional compilation strategy to provide\n-    /// better error messages for erroneous conditions.\n+    /// better error messages for erroneous conditions. It's the compiler-level form of [`panic!`],\n+    /// which emits an error at *runtime*, rather than during compilation.\n     ///\n     /// # Examples\n     ///\n     /// Two such examples are macros and `#[cfg]` environments.\n     ///\n-    /// Emit better compiler error if a macro is passed invalid values.\n+    /// Emit better compiler error if a macro is passed invalid values. Without the final branch,\n+    /// the compiler would still emit an error, but the error's message would not mention the two\n+    /// valid values.\n     ///\n     /// ```compile_fail\n     /// macro_rules! give_me_foo_or_bar {\n@@ -332,6 +338,8 @@ pub mod builtin {\n     /// #[cfg(not(any(feature = \"foo\", feature = \"bar\")))]\n     /// compile_error!(\"Either feature \\\"foo\\\" or \\\"bar\\\" must be enabled for this crate.\")\n     /// ```\n+    ///\n+    /// [`panic!`]: ../std/macro.panic.html\n     #[stable(feature = \"compile_error_macro\", since = \"1.20.0\")]\n     #[macro_export]\n     macro_rules! compile_error {"}]}