{"sha": "3338593afd6a010a2ce6799d3bf4bf4c2a252950", "node_id": "C_kwDOAAsO6NoAKDMzMzg1OTNhZmQ2YTAxMGEyY2U2Nzk5ZDNiZjRiZjRjMmEyNTI5NTA", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-07-11T15:41:38Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-07-11T15:41:38Z"}, "message": "Only check relative sizes on platform specific types", "tree": {"sha": "187573b101024b2b256c4f6b70bc3296f8a6417f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/187573b101024b2b256c4f6b70bc3296f8a6417f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3338593afd6a010a2ce6799d3bf4bf4c2a252950", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3338593afd6a010a2ce6799d3bf4bf4c2a252950", "html_url": "https://github.com/rust-lang/rust/commit/3338593afd6a010a2ce6799d3bf4bf4c2a252950", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3338593afd6a010a2ce6799d3bf4bf4c2a252950/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0318b70514e13d09fd0e9043da4b7c49e0285f75", "url": "https://api.github.com/repos/rust-lang/rust/commits/0318b70514e13d09fd0e9043da4b7c49e0285f75", "html_url": "https://github.com/rust-lang/rust/commit/0318b70514e13d09fd0e9043da4b7c49e0285f75"}], "stats": {"total": 69, "additions": 32, "deletions": 37}, "files": [{"sha": "9eed2ad361ce35a153880db35363667ef4f3534a", "filename": "src/test/ui/layout/unsafe-cell-hides-niche.rs", "status": "modified", "additions": 32, "deletions": 37, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/3338593afd6a010a2ce6799d3bf4bf4c2a252950/src%2Ftest%2Fui%2Flayout%2Funsafe-cell-hides-niche.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3338593afd6a010a2ce6799d3bf4bf4c2a252950/src%2Ftest%2Fui%2Flayout%2Funsafe-cell-hides-niche.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Funsafe-cell-hides-niche.rs?ref=3338593afd6a010a2ce6799d3bf4bf4c2a252950", "patch": "@@ -22,54 +22,49 @@ struct NoNiche<T>(UnsafeCell<T>);\n \n struct Size<const S: usize>;\n \n-// Overwriting the runtime assertion and making it a compile-time assertion\n-macro_rules! assert_size_eq {\n-    ($ty:ty, $size:expr) => {\n+macro_rules! check_sizes {\n+    (check_one_specific_size: $ty:ty, $size:expr) => {\n         const _: Size::<{$size}> = Size::<{size_of::<$ty>()}>;\n     };\n     ($ty:ty, $size:expr, $optioned_size:expr) => {\n-        assert_size_eq!($ty, $size);\n-        assert_size_eq!(Option<$ty>, $optioned_size);\n-        const _: () = assert!(\n-            $size == $optioned_size ||\n-            size_of::<$ty>() < size_of::<Option<$ty>>()\n-        );\n+        check_sizes!(check_one_specific_size: $ty, $size);\n+        check_sizes!(check_one_specific_size: Option<$ty>, $optioned_size);\n+        check_sizes!(check_no_niche_opt: $size != $optioned_size, $ty);\n+    };\n+    ($ty:ty) => {\n+        check_sizes!(check_no_niche_opt: true, $ty);\n+    };\n+    (check_no_niche_opt: $no_niche_opt:expr, $ty:ty) => {\n+        const _: () = if $no_niche_opt { assert!(size_of::<$ty>() < size_of::<Option<$ty>>()); };\n     };\n }\n \n const PTR_SIZE: usize = std::mem::size_of::<*const ()>();\n \n-assert_size_eq!(Wrapper<u32>,     4, 8);\n-assert_size_eq!(Wrapper<N32>,     4, 4); // (\u2713 niche opt)\n-assert_size_eq!(Transparent<u32>, 4, 8);\n-assert_size_eq!(Transparent<N32>, 4, 4); // (\u2713 niche opt)\n-assert_size_eq!(NoNiche<u32>,     4, 8);\n-assert_size_eq!(NoNiche<N32>,     4, 8);\n-\n-assert_size_eq!(UnsafeCell<u32>,  4, 8);\n-assert_size_eq!(UnsafeCell<N32>,  4, 8);\n-\n-assert_size_eq!(UnsafeCell<&()> , PTR_SIZE, PTR_SIZE * 2);\n-assert_size_eq!(      Cell<&()> , PTR_SIZE, PTR_SIZE * 2);\n-assert_size_eq!(   RefCell<&()> , PTR_SIZE * 2, PTR_SIZE * 3);\n-assert_size_eq!(\n-    RwLock<&()>,\n-    if cfg!(target_pointer_width = \"32\") { 16 } else { 24 },\n-    if cfg!(target_pointer_width = \"32\") { 20 } else { 32 }\n-);\n-assert_size_eq!(\n-    Mutex<&()> ,\n-    if cfg!(target_pointer_width = \"32\") { 12 } else { 16 },\n-    if cfg!(target_pointer_width = \"32\") { 16 } else { 24 }\n-);\n-\n-assert_size_eq!(UnsafeCell<&[i32]> , PTR_SIZE * 2, PTR_SIZE * 3);\n-assert_size_eq!(UnsafeCell<(&(), &())> , PTR_SIZE * 2, PTR_SIZE * 3);\n+check_sizes!(Wrapper<u32>,     4, 8);\n+check_sizes!(Wrapper<N32>,     4, 4); // (\u2713 niche opt)\n+check_sizes!(Transparent<u32>, 4, 8);\n+check_sizes!(Transparent<N32>, 4, 4); // (\u2713 niche opt)\n+check_sizes!(NoNiche<u32>,     4, 8);\n+check_sizes!(NoNiche<N32>,     4, 8);\n+\n+check_sizes!(UnsafeCell<u32>,  4, 8);\n+check_sizes!(UnsafeCell<N32>,  4, 8);\n+\n+check_sizes!(UnsafeCell<&()> , PTR_SIZE, PTR_SIZE * 2);\n+check_sizes!(      Cell<&()> , PTR_SIZE, PTR_SIZE * 2);\n+check_sizes!(   RefCell<&()> , PTR_SIZE * 2, PTR_SIZE * 3);\n+\n+check_sizes!(RwLock<&()>);\n+check_sizes!(Mutex<&()>);\n+\n+check_sizes!(UnsafeCell<&[i32]> , PTR_SIZE * 2, PTR_SIZE * 3);\n+check_sizes!(UnsafeCell<(&(), &())> , PTR_SIZE * 2, PTR_SIZE * 3);\n \n trait Trait {}\n-assert_size_eq!(UnsafeCell<&dyn Trait> , PTR_SIZE * 2, PTR_SIZE * 3);\n+check_sizes!(UnsafeCell<&dyn Trait> , PTR_SIZE * 2, PTR_SIZE * 3);\n \n #[repr(simd)]\n pub struct Vec4<T>([T; 4]);\n \n-assert_size_eq!(UnsafeCell<Vec4<N32>> , 16, 32);\n+check_sizes!(UnsafeCell<Vec4<N32>> , 16, 32);"}]}