{"sha": "46d145b54ea1cb3545ec8ad707931e01ffdb016b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2ZDE0NWI1NGVhMWNiMzU0NWVjOGFkNzA3OTMxZTAxZmZkYjAxNmI=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-06-11T02:33:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-06-11T02:33:44Z"}, "message": "Merge pull request #2780 from thibaultdelor/StopTrackingWhitespacePos\n\nClean Up code where last whitspace tracking isn't used", "tree": {"sha": "6e510e2914d2009c925ac1bf0bde549ad57a2a25", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e510e2914d2009c925ac1bf0bde549ad57a2a25"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46d145b54ea1cb3545ec8ad707931e01ffdb016b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbHd+ICRBK7hj4Ov3rIwAAdHIIAAIGvfac3gmpgYkFqssen6zT\nE1I8W5WOugAatPjizTgfc+ylfsvuIoRFJyfYLsykLNw1nT//F+Kvs2J1MJyk2LoX\nSlxSDeOPVOGpaKMdfi5o1FXRrJVLoZH2O+/McXIlV3E1l3DaMn+PLUXxQIdoZ1Gb\n+htjNIFI/9Zcjfa3Al2qoW+DmGjVm19bxVYE+Sf+n2wUxBDR/QUmjJwCEZgcuzaz\nlBu1CU1c5zUFEUP2R5y+mbzPuOhMLJm23zDG/cPiKB4at/0POcyhTpHFzNWzeYrp\nXxZTd8qrIUkSREpR7GEsGBkOTu92NiLzdhelX9rJ4OKwXEvDBwYQFImX/0pWBJ0=\n=Xq5Q\n-----END PGP SIGNATURE-----\n", "payload": "tree 6e510e2914d2009c925ac1bf0bde549ad57a2a25\nparent 34067a1c4c7dd2751270bba13712bdef36295643\nparent 2e90c4314c97b84b8a134fc628cb8d9b1f28d3ad\nauthor Seiichi Uchida <seuchida@gmail.com> 1528684424 +0900\ncommitter GitHub <noreply@github.com> 1528684424 +0900\n\nMerge pull request #2780 from thibaultdelor/StopTrackingWhitespacePos\n\nClean Up code where last whitspace tracking isn't used"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46d145b54ea1cb3545ec8ad707931e01ffdb016b", "html_url": "https://github.com/rust-lang/rust/commit/46d145b54ea1cb3545ec8ad707931e01ffdb016b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46d145b54ea1cb3545ec8ad707931e01ffdb016b/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34067a1c4c7dd2751270bba13712bdef36295643", "url": "https://api.github.com/repos/rust-lang/rust/commits/34067a1c4c7dd2751270bba13712bdef36295643", "html_url": "https://github.com/rust-lang/rust/commit/34067a1c4c7dd2751270bba13712bdef36295643"}, {"sha": "2e90c4314c97b84b8a134fc628cb8d9b1f28d3ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e90c4314c97b84b8a134fc628cb8d9b1f28d3ad", "html_url": "https://github.com/rust-lang/rust/commit/2e90c4314c97b84b8a134fc628cb8d9b1f28d3ad"}], "stats": {"total": 38, "additions": 13, "deletions": 25}, "files": [{"sha": "c3bf8efb64e7315cb8dd64fa6b90b71316a200e0", "filename": "src/lib.rs", "status": "modified", "additions": 13, "deletions": 25, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/46d145b54ea1cb3545ec8ad707931e01ffdb016b/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46d145b54ea1cb3545ec8ad707931e01ffdb016b/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=46d145b54ea1cb3545ec8ad707931e01ffdb016b", "patch": "@@ -516,8 +516,7 @@ fn format_lines(\n     config: &Config,\n     report: &FormatReport,\n ) {\n-    let mut trims = vec![];\n-    let mut last_wspace: Option<usize> = None;\n+    let mut last_was_space = false;\n     let mut line_len = 0;\n     let mut cur_line = 1;\n     let mut newline_count = 0;\n@@ -542,7 +541,7 @@ fn format_lines(\n     }\n \n     // Iterate over the chars in the file map.\n-    for (kind, (b, c)) in CharClasses::new(text.chars().enumerate()) {\n+    for (kind, c) in CharClasses::new(text.chars()) {\n         if c == '\\r' {\n             continue;\n         }\n@@ -563,10 +562,17 @@ fn format_lines(\n         if c == '\\n' {\n             if format_line {\n                 // Check for (and record) trailing whitespace.\n-                if let Some(..) = last_wspace {\n+                if last_was_space {\n                     if should_report_error(config, kind, is_string, &ErrorKind::TrailingWhitespace)\n+                        && !is_skipped_line(cur_line, skipped_range)\n                     {\n-                        trims.push((cur_line, kind, line_buffer.clone()));\n+                        errors.push(FormattingError {\n+                            line: cur_line,\n+                            kind: ErrorKind::TrailingWhitespace,\n+                            is_comment: kind.is_comment(),\n+                            is_string: kind.is_string(),\n+                            line_buffer: line_buffer.clone(),\n+                        });\n                     }\n                     line_len -= 1;\n                 }\n@@ -591,19 +597,13 @@ fn format_lines(\n             cur_line += 1;\n             format_line = config.file_lines().contains_line(name, cur_line);\n             newline_count += 1;\n-            last_wspace = None;\n+            last_was_space = false;\n             line_buffer.clear();\n             is_string = false;\n         } else {\n             newline_count = 0;\n             line_len += if c == '\\t' { config.tab_spaces() } else { 1 };\n-            if c.is_whitespace() {\n-                if last_wspace.is_none() {\n-                    last_wspace = Some(b);\n-                }\n-            } else {\n-                last_wspace = None;\n-            }\n+            last_was_space = c.is_whitespace();\n             line_buffer.push(c);\n             if kind.is_string() {\n                 is_string = true;\n@@ -617,18 +617,6 @@ fn format_lines(\n         text.truncate(line);\n     }\n \n-    for &(l, kind, ref b) in &trims {\n-        if !is_skipped_line(l, skipped_range) {\n-            errors.push(FormattingError {\n-                line: l,\n-                kind: ErrorKind::TrailingWhitespace,\n-                is_comment: kind.is_comment(),\n-                is_string: kind.is_string(),\n-                line_buffer: b.clone(),\n-            });\n-        }\n-    }\n-\n     report.append(name.clone(), errors);\n }\n "}]}