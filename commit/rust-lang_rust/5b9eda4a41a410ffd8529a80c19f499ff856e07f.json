{"sha": "5b9eda4a41a410ffd8529a80c19f499ff856e07f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViOWVkYTRhNDFhNDEwZmZkODUyOWE4MGMxOWY0OTlmZjg1NmUwN2Y=", "commit": {"author": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-01-14T22:20:14Z"}, "committer": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-01-14T22:34:00Z"}, "message": "Fix the import handling in \"complex\" cases. When looking a.b.c and 'a' is a\nmodule, we should look for 'b' *just* in the module 'a' and then continue\nresolving b.c in the environment created by updating *with* a.\n\nStill not 100% correct, but getting there.", "tree": {"sha": "8643c5269b17344e41e66f1ee7658c39ebc2aa7d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8643c5269b17344e41e66f1ee7658c39ebc2aa7d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b9eda4a41a410ffd8529a80c19f499ff856e07f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b9eda4a41a410ffd8529a80c19f499ff856e07f", "html_url": "https://github.com/rust-lang/rust/commit/5b9eda4a41a410ffd8529a80c19f499ff856e07f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b9eda4a41a410ffd8529a80c19f499ff856e07f/comments", "author": null, "committer": null, "parents": [{"sha": "c8a2c44a8e67d05204bac2850852f7fec0d23332", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8a2c44a8e67d05204bac2850852f7fec0d23332", "html_url": "https://github.com/rust-lang/rust/commit/c8a2c44a8e67d05204bac2850852f7fec0d23332"}], "stats": {"total": 51, "additions": 46, "deletions": 5}, "files": [{"sha": "bf7570675f69dba6e42247339b0610a198e36868", "filename": "src/Makefile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b9eda4a41a410ffd8529a80c19f499ff856e07f/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/5b9eda4a41a410ffd8529a80c19f499ff856e07f/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=5b9eda4a41a410ffd8529a80c19f499ff856e07f", "patch": "@@ -447,6 +447,7 @@ TEST_XFAILS_RUSTC := $(filter-out \\\n                         import3.rs \\\n                         import4.rs \\\n                         import5.rs \\\n+                        import6.rs \\\n                         item-name-overload.rs \\\n                         large-records.rs \\\n                         lazy-init.rs \\"}, {"sha": "a8cbc46823710ef3f5396ba134c3580380bff83c", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5b9eda4a41a410ffd8529a80c19f499ff856e07f/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b9eda4a41a410ffd8529a80c19f499ff856e07f/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=5b9eda4a41a410ffd8529a80c19f499ff856e07f", "patch": "@@ -77,6 +77,10 @@ fn lookup_name(&env e, import_map index,\n // Follow the path of an import and return what it ultimately points to.\n \n fn find_final_def(&env e, &span sp, vec[ident] idents) -> def_wrap {\n+\n+    // We are given a series of identifiers (a.b.c.d) and we know that\n+    // in the environment 'e' the identifier 'a' was resolved to 'd'. We\n+    // should return what a.b.c.d points to in the end.\n     fn found_something(&env e, std.map.hashmap[ast.def_id, bool] pending,\n                        &span sp, vec[ident] idents, def_wrap d) -> def_wrap {\n         alt (d) {\n@@ -90,6 +94,7 @@ fn find_final_def(&env e, &span sp, vec[ident] idents) -> def_wrap {\n                         }\n                         pending.insert(d, true);\n                         auto x = inner(e, pending, sp, new_idents);\n+                        pending.remove(d);\n                         ret found_something(e, pending, sp, idents, x);\n                     }\n                 }\n@@ -103,11 +108,23 @@ fn find_final_def(&env e, &span sp, vec[ident] idents) -> def_wrap {\n         }\n         alt (d) {\n             case (def_wrap_mod(?i)) {\n-                auto new_idents = _vec.slice[ident](idents, 1u, len);\n-                auto tmp_e = rec(scopes = nil[scope],\n-                                 sess = e.sess);\n-                auto new_e = update_env_for_item(tmp_e, i);\n-                ret inner(new_e, pending, sp, new_idents);\n+                auto rest_idents = _vec.slice[ident](idents, 1u, len);\n+                auto empty_e = rec(scopes = nil[scope],\n+                                   sess = e.sess);\n+                auto tmp_e = update_env_for_item(empty_e, i);\n+                auto next_i = rest_idents.(0);\n+                auto next_ = lookup_name_wrapped(tmp_e, next_i);\n+                alt (next_) {\n+                    case (none[def_wrap]) {\n+                        e.sess.span_err(sp, \"unresolved name: \" + next_i);\n+                        fail;\n+                    }\n+                    case (some[def_wrap](?next)) {\n+                        auto combined_e = update_env_for_item(e, i);\n+                        ret found_something(combined_e, pending, sp,\n+                                            rest_idents, next);\n+                    }\n+                }\n             }\n             case (def_wrap_use(?c)) {\n                 e.sess.span_err(sp, \"Crate access is not implemented\");"}, {"sha": "f769d6d3966f468e169466713022d58950b47f2d", "filename": "src/test/compile-fail/import4.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5b9eda4a41a410ffd8529a80c19f499ff856e07f/src%2Ftest%2Fcompile-fail%2Fimport4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b9eda4a41a410ffd8529a80c19f499ff856e07f/src%2Ftest%2Fcompile-fail%2Fimport4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport4.rs?ref=5b9eda4a41a410ffd8529a80c19f499ff856e07f", "patch": "@@ -0,0 +1,8 @@\n+// error-pattern: recursive import\n+\n+import zed.bar;\n+import bar.zed;\n+\n+fn main(vec[str] args) {\n+  log \"loop\";\n+}"}, {"sha": "5e3a9d7429a20db0e9c63fe2ccc87b50155ec27c", "filename": "src/test/run-pass/import6.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5b9eda4a41a410ffd8529a80c19f499ff856e07f/src%2Ftest%2Frun-pass%2Fimport6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b9eda4a41a410ffd8529a80c19f499ff856e07f/src%2Ftest%2Frun-pass%2Fimport6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport6.rs?ref=5b9eda4a41a410ffd8529a80c19f499ff856e07f", "patch": "@@ -0,0 +1,15 @@\n+import bar.baz;\n+import foo.zed;\n+mod foo {\n+  mod zed {\n+    fn baz() {\n+      log \"baz\";\n+    }\n+  }\n+}\n+mod bar {\n+  import zed.baz;\n+}\n+fn main(vec[str] args) {\n+  baz();\n+}"}]}