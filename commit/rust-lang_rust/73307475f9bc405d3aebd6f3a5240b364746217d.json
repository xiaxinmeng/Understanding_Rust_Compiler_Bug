{"sha": "73307475f9bc405d3aebd6f3a5240b364746217d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczMzA3NDc1ZjliYzQwNWQzYWViZDZmM2E1MjQwYjM2NDc0NjIxN2Q=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-11-24T00:36:12Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-12-18T01:12:31Z"}, "message": "Prohibit private variant reexports", "tree": {"sha": "35a29f08182c60a347b1f3774688ecb262b5aa31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35a29f08182c60a347b1f3774688ecb262b5aa31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73307475f9bc405d3aebd6f3a5240b364746217d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73307475f9bc405d3aebd6f3a5240b364746217d", "html_url": "https://github.com/rust-lang/rust/commit/73307475f9bc405d3aebd6f3a5240b364746217d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73307475f9bc405d3aebd6f3a5240b364746217d/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a09246ad34ee83b5c8be9af836d7b0aa06d4aabe", "url": "https://api.github.com/repos/rust-lang/rust/commits/a09246ad34ee83b5c8be9af836d7b0aa06d4aabe", "html_url": "https://github.com/rust-lang/rust/commit/a09246ad34ee83b5c8be9af836d7b0aa06d4aabe"}], "stats": {"total": 44, "additions": 37, "deletions": 7}, "files": [{"sha": "11d09fa3e9a6b841d4ba85c6fc650c6651f721e8", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/73307475f9bc405d3aebd6f3a5240b364746217d/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73307475f9bc405d3aebd6f3a5240b364746217d/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=73307475f9bc405d3aebd6f3a5240b364746217d", "patch": "@@ -390,9 +390,15 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                 let module = Module::new(parent_link, Some(def), false, is_public);\n                 name_bindings.define_module(module.clone(), sp);\n \n+                let variant_modifiers = if is_public {\n+                    DefModifiers::empty()\n+                } else {\n+                    DefModifiers::PRIVATE_VARIANT\n+                };\n                 for variant in &(*enum_definition).variants {\n                     let item_def_id = self.ast_map.local_def_id(item.id);\n-                    self.build_reduced_graph_for_variant(variant, item_def_id, &module);\n+                    self.build_reduced_graph_for_variant(variant, item_def_id,\n+                                                         &module, variant_modifiers);\n                 }\n                 parent.clone()\n             }\n@@ -494,7 +500,8 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n     fn build_reduced_graph_for_variant(&mut self,\n                                        variant: &Variant,\n                                        item_id: DefId,\n-                                       parent: &Rc<Module>) {\n+                                       parent: &Rc<Module>,\n+                                       variant_modifiers: DefModifiers) {\n         let name = variant.node.name;\n         let is_exported = if variant.node.data.is_struct() {\n             // Not adding fields for variants as they are not accessed with a self receiver\n@@ -512,12 +519,12 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                                       self.ast_map.local_def_id(variant.node.data.id()),\n                                       is_exported),\n                            variant.span,\n-                           DefModifiers::PUBLIC | DefModifiers::IMPORTABLE);\n+                           DefModifiers::PUBLIC | DefModifiers::IMPORTABLE | variant_modifiers);\n         child.define_type(DefVariant(item_id,\n                                      self.ast_map.local_def_id(variant.node.data.id()),\n                                      is_exported),\n                           variant.span,\n-                          DefModifiers::PUBLIC | DefModifiers::IMPORTABLE);\n+                          DefModifiers::PUBLIC | DefModifiers::IMPORTABLE | variant_modifiers);\n     }\n \n     /// Constructs the reduced graph for one foreign item."}, {"sha": "41858d0f01b8deefbcecb1b8c01fe119bd4cb813", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/73307475f9bc405d3aebd6f3a5240b364746217d/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73307475f9bc405d3aebd6f3a5240b364746217d/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=73307475f9bc405d3aebd6f3a5240b364746217d", "patch": "@@ -907,6 +907,9 @@ bitflags! {\n     flags DefModifiers: u8 {\n         const PUBLIC     = 1 << 0,\n         const IMPORTABLE = 1 << 1,\n+        // All variants are considered `PUBLIC`, but some of them live in private enums.\n+        // We need to track them to prohibit reexports like `pub use PrivEnum::Variant`.\n+        const PRIVATE_VARIANT = 1 << 2,\n     }\n }\n \n@@ -1007,6 +1010,11 @@ impl NameBinding {\n         self.defined_with(DefModifiers::PUBLIC)\n     }\n \n+    fn is_reexportable(&self) -> bool {\n+        self.defined_with(DefModifiers::PUBLIC) &&\n+        !self.defined_with(DefModifiers::PRIVATE_VARIANT)\n+    }\n+\n     fn def_and_lp(&self) -> (Def, LastPrivate) {\n         let def = self.def().unwrap();\n         (def, LastMod(if self.is_public() { AllPublic } else { DependsOn(def.def_id()) }))"}, {"sha": "c4296241633f1a6aa3f709e9335e5a24319481dd", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73307475f9bc405d3aebd6f3a5240b364746217d/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73307475f9bc405d3aebd6f3a5240b364746217d/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=73307475f9bc405d3aebd6f3a5240b364746217d", "patch": "@@ -443,7 +443,7 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n                     debug!(\"(resolving single import) found value binding\");\n                     value_result = BoundResult(target_module.clone(),\n                                                child_name_bindings.value_ns.clone());\n-                    if directive.is_public && !child_name_bindings.value_ns.is_public() {\n+                    if directive.is_public && !child_name_bindings.value_ns.is_reexportable() {\n                         let msg = format!(\"`{}` is private, and cannot be reexported\", source);\n                         let note_msg = format!(\"Consider marking `{}` as `pub` in the imported \\\n                                                 module\",\n@@ -458,7 +458,7 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n                     type_result = BoundResult(target_module.clone(),\n                                               child_name_bindings.type_ns.clone());\n                     if !pub_err && directive.is_public &&\n-                       !child_name_bindings.type_ns.is_public() {\n+                       !child_name_bindings.type_ns.is_reexportable() {\n                         let msg = format!(\"`{}` is private, and cannot be reexported\", source);\n                         let note_msg = format!(\"Consider declaring module `{}` as a `pub mod`\",\n                                                source);"}, {"sha": "e640ba3f00fb6d7d2faf69b529d1ab62d439c0fd", "filename": "src/test/compile-fail/issue-17546.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73307475f9bc405d3aebd6f3a5240b364746217d/src%2Ftest%2Fcompile-fail%2Fissue-17546.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73307475f9bc405d3aebd6f3a5240b364746217d/src%2Ftest%2Fcompile-fail%2Fissue-17546.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17546.rs?ref=73307475f9bc405d3aebd6f3a5240b364746217d", "patch": "@@ -14,7 +14,7 @@ use foo::NoResult; // Through a re-export\n mod foo {\n     pub use self::MyEnum::NoResult;\n \n-    enum MyEnum {\n+    pub enum MyEnum {\n         Result,\n         NoResult\n     }"}, {"sha": "f38546167998fe77dfb2b450d0b15f2713fed705", "filename": "src/test/compile-fail/private-variant-reexport.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/73307475f9bc405d3aebd6f3a5240b364746217d/src%2Ftest%2Fcompile-fail%2Fprivate-variant-reexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73307475f9bc405d3aebd6f3a5240b364746217d/src%2Ftest%2Fcompile-fail%2Fprivate-variant-reexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-variant-reexport.rs?ref=73307475f9bc405d3aebd6f3a5240b364746217d", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub use E::V; //~ERROR `V` is private, and cannot be reexported\n+\n+enum E { V }\n+\n+fn main() {}"}]}