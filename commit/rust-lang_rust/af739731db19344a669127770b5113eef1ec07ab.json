{"sha": "af739731db19344a669127770b5113eef1ec07ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmNzM5NzMxZGIxOTM0NGE2NjkxMjc3NzBiNTExM2VlZjFlYzA3YWI=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-29T23:34:51Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-29T23:34:54Z"}, "message": "Implement TypeRef::ForLifetime", "tree": {"sha": "5fb1adedad7a71aba2e8381b2c0a593dd6b4bc02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5fb1adedad7a71aba2e8381b2c0a593dd6b4bc02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af739731db19344a669127770b5113eef1ec07ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af739731db19344a669127770b5113eef1ec07ab", "html_url": "https://github.com/rust-lang/rust/commit/af739731db19344a669127770b5113eef1ec07ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af739731db19344a669127770b5113eef1ec07ab/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b9b2d1f40bc694a277947f8f0cb77a3fe7b5c1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b9b2d1f40bc694a277947f8f0cb77a3fe7b5c1a", "html_url": "https://github.com/rust-lang/rust/commit/1b9b2d1f40bc694a277947f8f0cb77a3fe7b5c1a"}], "stats": {"total": 81, "additions": 63, "deletions": 18}, "files": [{"sha": "603c594f2aa4ffaabf8a3a80861a60fb5fcc7eeb", "filename": "crates/hir_def/src/item_tree/pretty.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/af739731db19344a669127770b5113eef1ec07ab/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af739731db19344a669127770b5113eef1ec07ab/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Fpretty.rs?ref=af739731db19344a669127770b5113eef1ec07ab", "patch": "@@ -2,6 +2,8 @@\n \n use std::fmt::{self, Write};\n \n+use itertools::Itertools;\n+\n use crate::{\n     attr::RawAttrs,\n     generics::{WherePredicate, WherePredicateTypeTarget},\n@@ -542,6 +544,10 @@ impl<'a> Printer<'a> {\n \n             match bound.as_ref() {\n                 TypeBound::Path(path) => self.print_path(path),\n+                TypeBound::ForLifetime(lifetimes, path) => {\n+                    w!(self, \"for<{}> \", lifetimes.iter().format(\", \"));\n+                    self.print_path(path);\n+                }\n                 TypeBound::Lifetime(lt) => w!(self, \"{}\", lt.name),\n                 TypeBound::Error => w!(self, \"{{unknown}}\"),\n             }"}, {"sha": "cbaa6d086dbbe682f37db59bcfe6dfdc62944180", "filename": "crates/hir_def/src/item_tree/tests.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/af739731db19344a669127770b5113eef1ec07ab/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af739731db19344a669127770b5113eef1ec07ab/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Ftests.rs?ref=af739731db19344a669127770b5113eef1ec07ab", "patch": "@@ -282,13 +282,15 @@ struct S {\n     a: Mixed<'a, T, Item=(), OtherItem=u8>,\n     b: <Fully as Qualified>::Syntax,\n     c: <TypeAnchored>::Path::<'a>,\n+    d: dyn for<'a> Trait<'a>,\n }\n         \"#,\n         expect![[r#\"\n             pub(self) struct S {\n                 pub(self) a: Mixed<'a, T, Item = (), OtherItem = u8>,\n                 pub(self) b: Qualified<Self=Fully>::Syntax,\n                 pub(self) c: <TypeAnchored>::Path<'a>,\n+                pub(self) d: dyn for<'a> Trait<'a>,\n             }\n         \"#]],\n     )\n@@ -311,7 +313,7 @@ impl<'a, 'b: 'a, T: Copy + 'a + 'b, const K: u8 = 0> S<'a, 'b, T, K> {\n enum Enum<'a, T, const U: u8> {}\n union Union<'a, T, const U: u8> {}\n \n-trait Tr<'a, T: 'a>: Super {}\n+trait Tr<'a, T: 'a>: Super where Self: for<'a> Tr<'a, T> {}\n         \"#,\n         expect![[r#\"\n             pub(self) struct S<'a, 'b, T, const K: u8>\n@@ -353,7 +355,8 @@ trait Tr<'a, T: 'a>: Super {}\n             pub(self) trait Tr<'a, Self, T>\n             where\n                 Self: Super,\n-                T: 'a\n+                T: 'a,\n+                Self: for<'a> Tr<'a, T>\n             {\n             }\n         \"#]],"}, {"sha": "1d35f02ca1d38c59ee1e00cc1fa13529aefe6ed9", "filename": "crates/hir_def/src/type_ref.rs", "status": "modified", "additions": 28, "deletions": 15, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/af739731db19344a669127770b5113eef1ec07ab/crates%2Fhir_def%2Fsrc%2Ftype_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af739731db19344a669127770b5113eef1ec07ab/crates%2Fhir_def%2Fsrc%2Ftype_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Ftype_ref.rs?ref=af739731db19344a669127770b5113eef1ec07ab", "patch": "@@ -119,7 +119,7 @@ impl LifetimeRef {\n #[derive(Clone, PartialEq, Eq, Hash, Debug)]\n pub enum TypeBound {\n     Path(Path),\n-    // ForLifetime(Vec<LifetimeRef>, Path), FIXME ForLifetime\n+    ForLifetime(Box<[Name]>, Path),\n     Lifetime(LifetimeRef),\n     Error,\n }\n@@ -233,7 +233,9 @@ impl TypeRef {\n                 TypeRef::ImplTrait(bounds) | TypeRef::DynTrait(bounds) => {\n                     for bound in bounds {\n                         match bound.as_ref() {\n-                            TypeBound::Path(path) => go_path(path, f),\n+                            TypeBound::Path(path) | TypeBound::ForLifetime(_, path) => {\n+                                go_path(path, f)\n+                            }\n                             TypeBound::Lifetime(_) | TypeBound::Error => (),\n                         }\n                     }\n@@ -263,7 +265,9 @@ impl TypeRef {\n                         }\n                         for bound in &binding.bounds {\n                             match bound.as_ref() {\n-                                TypeBound::Path(path) => go_path(path, f),\n+                                TypeBound::Path(path) | TypeBound::ForLifetime(_, path) => {\n+                                    go_path(path, f)\n+                                }\n                                 TypeBound::Lifetime(_) | TypeBound::Error => (),\n                             }\n                         }\n@@ -287,20 +291,29 @@ pub(crate) fn type_bounds_from_ast(\n \n impl TypeBound {\n     pub(crate) fn from_ast(ctx: &LowerCtx, node: ast::TypeBound) -> Self {\n+        let lower_path_type = |path_type: ast::PathType| ctx.lower_path(path_type.path()?);\n+\n         match node.kind() {\n             ast::TypeBoundKind::PathType(path_type) => {\n-                let path = match path_type.path() {\n-                    Some(p) => p,\n-                    None => return TypeBound::Error,\n-                };\n-\n-                let path = match ctx.lower_path(path) {\n-                    Some(p) => p,\n-                    None => return TypeBound::Error,\n+                lower_path_type(path_type).map(TypeBound::Path).unwrap_or(TypeBound::Error)\n+            }\n+            ast::TypeBoundKind::ForType(for_type) => {\n+                let lt_refs = match for_type.generic_param_list() {\n+                    Some(gpl) => gpl\n+                        .lifetime_params()\n+                        .flat_map(|lp| lp.lifetime().map(|lt| Name::new_lifetime(&lt)))\n+                        .collect(),\n+                    None => Box::default(),\n                 };\n-                TypeBound::Path(path)\n+                let path = for_type.ty().and_then(|ty| match ty {\n+                    ast::Type::PathType(path_type) => lower_path_type(path_type),\n+                    _ => None,\n+                });\n+                match path {\n+                    Some(p) => TypeBound::ForLifetime(lt_refs, p),\n+                    None => TypeBound::Error,\n+                }\n             }\n-            ast::TypeBoundKind::ForType(_) => TypeBound::Error, // FIXME ForType\n             ast::TypeBoundKind::Lifetime(lifetime) => {\n                 TypeBound::Lifetime(LifetimeRef::new(&lifetime))\n             }\n@@ -309,8 +322,8 @@ impl TypeBound {\n \n     pub fn as_path(&self) -> Option<&Path> {\n         match self {\n-            TypeBound::Path(p) => Some(p),\n-            _ => None,\n+            TypeBound::Path(p) | TypeBound::ForLifetime(_, p) => Some(p),\n+            TypeBound::Lifetime(_) | TypeBound::Error => None,\n         }\n     }\n }"}, {"sha": "946ff1073e41c9d6dcf4a2b31643ddfd56d43232", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/af739731db19344a669127770b5113eef1ec07ab/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af739731db19344a669127770b5113eef1ec07ab/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=af739731db19344a669127770b5113eef1ec07ab", "patch": "@@ -21,6 +21,7 @@ use hir_def::{\n     AssocContainerId, Lookup, ModuleId, TraitId,\n };\n use hir_expand::{hygiene::Hygiene, name::Name};\n+use itertools::Itertools;\n \n use crate::{\n     const_from_placeholder_idx, db::HirDatabase, from_assoc_type_id, from_foreign_def_id,\n@@ -1029,6 +1030,10 @@ impl HirDisplay for TypeBound {\n         match self {\n             TypeBound::Path(path) => path.hir_fmt(f),\n             TypeBound::Lifetime(lifetime) => write!(f, \"{}\", lifetime.name),\n+            TypeBound::ForLifetime(lifetimes, path) => {\n+                write!(f, \"for<{}> \", lifetimes.iter().format(\", \"))?;\n+                path.hir_fmt(f)\n+            }\n             TypeBound::Error => write!(f, \"{{error}}\"),\n         }\n     }"}, {"sha": "239ac3786e7932749dac5733cd4af9e3cc2e7af7", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/af739731db19344a669127770b5113eef1ec07ab/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af739731db19344a669127770b5113eef1ec07ab/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=af739731db19344a669127770b5113eef1ec07ab", "patch": "@@ -786,6 +786,11 @@ impl<'a> TyLoweringContext<'a> {\n                 bindings = self.lower_trait_ref_from_path(path, Some(self_ty));\n                 bindings.clone().map(WhereClause::Implemented).map(crate::wrap_empty_binders)\n             }\n+            TypeBound::ForLifetime(_, path) => {\n+                // FIXME Don't silently drop the hrtb lifetimes here\n+                bindings = self.lower_trait_ref_from_path(path, Some(self_ty));\n+                bindings.clone().map(WhereClause::Implemented).map(crate::wrap_empty_binders)\n+            }\n             TypeBound::Lifetime(_) => None,\n             TypeBound::Error => None,\n         };\n@@ -803,7 +808,7 @@ impl<'a> TyLoweringContext<'a> {\n         trait_ref: TraitRef,\n     ) -> impl Iterator<Item = QuantifiedWhereClause> + 'a {\n         let last_segment = match bound {\n-            TypeBound::Path(path) => path.segments().last(),\n+            TypeBound::Path(path) | TypeBound::ForLifetime(_, path) => path.segments().last(),\n             TypeBound::Error | TypeBound::Lifetime(_) => None,\n         };\n         last_segment"}, {"sha": "a484dc3a03b8f9ec18f52fd3a153a55ccd07afc5", "filename": "crates/hir_ty/src/tests/display_source_code.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/af739731db19344a669127770b5113eef1ec07ab/crates%2Fhir_ty%2Fsrc%2Ftests%2Fdisplay_source_code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af739731db19344a669127770b5113eef1ec07ab/crates%2Fhir_ty%2Fsrc%2Ftests%2Fdisplay_source_code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fdisplay_source_code.rs?ref=af739731db19344a669127770b5113eef1ec07ab", "patch": "@@ -54,3 +54,16 @@ fn main() {\n \"#,\n     );\n }\n+\n+#[test]\n+fn render_dyn_for_ty() {\n+    // FIXME\n+    check_types_source_code(\n+        r#\"\n+trait Foo<'a> {}\n+\n+fn foo(foo: &dyn for<'a> Foo<'a>) {}\n+    // ^^^ &dyn Foo\n+\"#,\n+    );\n+}"}]}