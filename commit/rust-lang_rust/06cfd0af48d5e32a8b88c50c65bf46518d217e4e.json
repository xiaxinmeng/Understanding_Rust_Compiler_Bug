{"sha": "06cfd0af48d5e32a8b88c50c65bf46518d217e4e", "node_id": "C_kwDOAAsO6NoAKDA2Y2ZkMGFmNDhkNWUzMmE4Yjg4YzUwYzY1YmY0NjUxOGQyMTdlNGU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-10-10T16:22:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-10T16:22:20Z"}, "message": "Rollup merge of #89438 - pierwill:prefix-free-hash, r=Amanieu\n\ndocs: `std::hash::Hash` should ensure prefix-free data\n\nAttempt to synthesize the discussion in #89429 into a suggestion regarding `Hash` implementations (not a hard requirement).\n\nCloses #89429.", "tree": {"sha": "73c6b0576282350e92822969a33686e5a2d5a0b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73c6b0576282350e92822969a33686e5a2d5a0b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06cfd0af48d5e32a8b88c50c65bf46518d217e4e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhYxM8CRBK7hj4Ov3rIwAAjV8IAJSPtMTKOEtlTWAOs8TNqcDn\nvJ7zI1hv/WyGjVRdzfEEKks33TOQCAyFEt1NqGrjPJLcioDQRm1tnE+1NNpsBjSL\n2Jfpj8VKmjvvXlfDvC62tdJi8DCx5hAk2sW4+/iA0jFtbva8oZruzsNKu0uQ+NGd\nwWIzlP/rUykOR+sjHH669EScK5tAj9JL0ToMB8fYicX00qmCymkpfiw9wU0DTWL3\nNcTlQd7mHikrAgOYwt6g+iuTUPLT9CZF3k6LKqBg7HRzyhJY7z1xYQ9KWsH8v7EK\nXbLcKYsR1j/VflbC8m8IdNIvG9BgxFyKAp2TuINr38IeHJ9y/16F6DVeUx72ggE=\n=qTbP\n-----END PGP SIGNATURE-----\n", "payload": "tree 73c6b0576282350e92822969a33686e5a2d5a0b5\nparent cfa5391f0bb99571295cd378b7305410dab6f215\nparent 749194d847bd81d16baf836c8e954f43408ddfa8\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1633882940 +0200\ncommitter GitHub <noreply@github.com> 1633882940 +0200\n\nRollup merge of #89438 - pierwill:prefix-free-hash, r=Amanieu\n\ndocs: `std::hash::Hash` should ensure prefix-free data\n\nAttempt to synthesize the discussion in #89429 into a suggestion regarding `Hash` implementations (not a hard requirement).\n\nCloses #89429.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06cfd0af48d5e32a8b88c50c65bf46518d217e4e", "html_url": "https://github.com/rust-lang/rust/commit/06cfd0af48d5e32a8b88c50c65bf46518d217e4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06cfd0af48d5e32a8b88c50c65bf46518d217e4e/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfa5391f0bb99571295cd378b7305410dab6f215", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfa5391f0bb99571295cd378b7305410dab6f215", "html_url": "https://github.com/rust-lang/rust/commit/cfa5391f0bb99571295cd378b7305410dab6f215"}, {"sha": "749194d847bd81d16baf836c8e954f43408ddfa8", "url": "https://api.github.com/repos/rust-lang/rust/commits/749194d847bd81d16baf836c8e954f43408ddfa8", "html_url": "https://github.com/rust-lang/rust/commit/749194d847bd81d16baf836c8e954f43408ddfa8"}], "stats": {"total": 12, "additions": 12, "deletions": 0}, "files": [{"sha": "540160bc4c2a4daadc4d040c58dc529b3d758fe4", "filename": "library/core/src/hash/mod.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/06cfd0af48d5e32a8b88c50c65bf46518d217e4e/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06cfd0af48d5e32a8b88c50c65bf46518d217e4e/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs?ref=06cfd0af48d5e32a8b88c50c65bf46518d217e4e", "patch": "@@ -153,9 +153,21 @@ mod sip;\n /// Thankfully, you won't need to worry about upholding this property when\n /// deriving both [`Eq`] and `Hash` with `#[derive(PartialEq, Eq, Hash)]`.\n ///\n+/// ## Prefix collisions\n+///\n+/// Implementations of `hash` should ensure that the data they\n+/// pass to the `Hasher` are prefix-free. That is,\n+/// unequal values should cause two different sequences of values to be written,\n+/// and neither of the two sequences should be a prefix of the other.\n+///\n+/// For example, the standard implementation of [`Hash` for `&str`][impl] passes an extra\n+/// `0xFF` byte to the `Hasher` so that the values `(\"ab\", \"c\")` and `(\"a\",\n+/// \"bc\")` hash differently.\n+///\n /// [`HashMap`]: ../../std/collections/struct.HashMap.html\n /// [`HashSet`]: ../../std/collections/struct.HashSet.html\n /// [`hash`]: Hash::hash\n+/// [impl]: ../../std/primitive.str.html#impl-Hash\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_diagnostic_item = \"Hash\"]\n pub trait Hash {"}]}