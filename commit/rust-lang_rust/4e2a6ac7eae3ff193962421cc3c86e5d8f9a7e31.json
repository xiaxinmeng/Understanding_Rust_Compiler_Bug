{"sha": "4e2a6ac7eae3ff193962421cc3c86e5d8f9a7e31", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlMmE2YWM3ZWFlM2ZmMTkzOTYyNDIxY2MzYzg2ZTVkOGY5YTdlMzE=", "commit": {"author": {"name": "Alexandru Macovei", "email": "alexnmaco@gmail.com", "date": "2021-04-01T11:01:59Z"}, "committer": {"name": "Alexandru Macovei", "email": "alexnmaco@gmail.com", "date": "2021-04-06T13:03:57Z"}, "message": "Avoid duplicating VfsPath in vfs::path_interner::PathInterner by using an IndexSet", "tree": {"sha": "eb0b8b0979b80553c3b9e285228f770e2a023244", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb0b8b0979b80553c3b9e285228f770e2a023244"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e2a6ac7eae3ff193962421cc3c86e5d8f9a7e31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e2a6ac7eae3ff193962421cc3c86e5d8f9a7e31", "html_url": "https://github.com/rust-lang/rust/commit/4e2a6ac7eae3ff193962421cc3c86e5d8f9a7e31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e2a6ac7eae3ff193962421cc3c86e5d8f9a7e31/comments", "author": {"login": "alexmaco", "id": 24556329, "node_id": "MDQ6VXNlcjI0NTU2MzI5", "avatar_url": "https://avatars.githubusercontent.com/u/24556329?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexmaco", "html_url": "https://github.com/alexmaco", "followers_url": "https://api.github.com/users/alexmaco/followers", "following_url": "https://api.github.com/users/alexmaco/following{/other_user}", "gists_url": "https://api.github.com/users/alexmaco/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexmaco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexmaco/subscriptions", "organizations_url": "https://api.github.com/users/alexmaco/orgs", "repos_url": "https://api.github.com/users/alexmaco/repos", "events_url": "https://api.github.com/users/alexmaco/events{/privacy}", "received_events_url": "https://api.github.com/users/alexmaco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexmaco", "id": 24556329, "node_id": "MDQ6VXNlcjI0NTU2MzI5", "avatar_url": "https://avatars.githubusercontent.com/u/24556329?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexmaco", "html_url": "https://github.com/alexmaco", "followers_url": "https://api.github.com/users/alexmaco/followers", "following_url": "https://api.github.com/users/alexmaco/following{/other_user}", "gists_url": "https://api.github.com/users/alexmaco/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexmaco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexmaco/subscriptions", "organizations_url": "https://api.github.com/users/alexmaco/orgs", "repos_url": "https://api.github.com/users/alexmaco/repos", "events_url": "https://api.github.com/users/alexmaco/events{/privacy}", "received_events_url": "https://api.github.com/users/alexmaco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32304d14a1a5e316615028ffd7bcfcff682fbe56", "url": "https://api.github.com/repos/rust-lang/rust/commits/32304d14a1a5e316615028ffd7bcfcff682fbe56", "html_url": "https://github.com/rust-lang/rust/commit/32304d14a1a5e316615028ffd7bcfcff682fbe56"}], "stats": {"total": 31, "additions": 18, "deletions": 13}, "files": [{"sha": "ca0311595102cb9fdde3a36974648c73fad2f9b7", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4e2a6ac7eae3ff193962421cc3c86e5d8f9a7e31/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/4e2a6ac7eae3ff193962421cc3c86e5d8f9a7e31/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=4e2a6ac7eae3ff193962421cc3c86e5d8f9a7e31", "patch": "@@ -1867,6 +1867,7 @@ name = \"vfs\"\n version = \"0.0.0\"\n dependencies = [\n  \"fst\",\n+ \"indexmap\",\n  \"paths\",\n  \"rustc-hash\",\n ]"}, {"sha": "894944b18dd6a135dcad7adcc0ccb88ceb9826cb", "filename": "crates/vfs/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4e2a6ac7eae3ff193962421cc3c86e5d8f9a7e31/crates%2Fvfs%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4e2a6ac7eae3ff193962421cc3c86e5d8f9a7e31/crates%2Fvfs%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs%2FCargo.toml?ref=4e2a6ac7eae3ff193962421cc3c86e5d8f9a7e31", "patch": "@@ -14,3 +14,4 @@ rustc-hash = \"1.0\"\n fst = \"0.4\"\n \n paths = { path = \"../paths\", version = \"0.0.0\" }\n+indexmap = \"1.6.2\""}, {"sha": "6e049f0d40f73bf266c7b0de53d622e268a43288", "filename": "crates/vfs/src/path_interner.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4e2a6ac7eae3ff193962421cc3c86e5d8f9a7e31/crates%2Fvfs%2Fsrc%2Fpath_interner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e2a6ac7eae3ff193962421cc3c86e5d8f9a7e31/crates%2Fvfs%2Fsrc%2Fpath_interner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs%2Fsrc%2Fpath_interner.rs?ref=4e2a6ac7eae3ff193962421cc3c86e5d8f9a7e31", "patch": "@@ -1,37 +1,40 @@\n //! Maps paths to compact integer ids. We don't care about clearings paths which\n //! no longer exist -- the assumption is total size of paths we ever look at is\n //! not too big.\n-use rustc_hash::FxHashMap;\n+use std::hash::BuildHasherDefault;\n+\n+use indexmap::IndexSet;\n+use rustc_hash::FxHasher;\n \n use crate::{FileId, VfsPath};\n \n /// Structure to map between [`VfsPath`] and [`FileId`].\n-#[derive(Default)]\n pub(crate) struct PathInterner {\n-    map: FxHashMap<VfsPath, FileId>,\n-    vec: Vec<VfsPath>,\n+    map: IndexSet<VfsPath, BuildHasherDefault<FxHasher>>,\n+}\n+\n+impl Default for PathInterner {\n+    fn default() -> Self {\n+        Self { map: IndexSet::default() }\n+    }\n }\n \n impl PathInterner {\n     /// Get the id corresponding to `path`.\n     ///\n     /// If `path` does not exists in `self`, returns [`None`].\n     pub(crate) fn get(&self, path: &VfsPath) -> Option<FileId> {\n-        self.map.get(path).copied()\n+        self.map.get_index_of(path).map(|i| FileId(i as u32))\n     }\n \n     /// Insert `path` in `self`.\n     ///\n     /// - If `path` already exists in `self`, returns its associated id;\n     /// - Else, returns a newly allocated id.\n     pub(crate) fn intern(&mut self, path: VfsPath) -> FileId {\n-        if let Some(id) = self.get(&path) {\n-            return id;\n-        }\n-        let id = FileId(self.vec.len() as u32);\n-        self.map.insert(path.clone(), id);\n-        self.vec.push(path);\n-        id\n+        let (id, _added) = self.map.insert_full(path);\n+        assert!(id < u32::MAX as usize);\n+        FileId(id as u32)\n     }\n \n     /// Returns the path corresponding to `id`.\n@@ -40,6 +43,6 @@ impl PathInterner {\n     ///\n     /// Panics if `id` does not exists in `self`.\n     pub(crate) fn lookup(&self, id: FileId) -> &VfsPath {\n-        &self.vec[id.0 as usize]\n+        self.map.get_index(id.0 as usize).unwrap()\n     }\n }"}]}