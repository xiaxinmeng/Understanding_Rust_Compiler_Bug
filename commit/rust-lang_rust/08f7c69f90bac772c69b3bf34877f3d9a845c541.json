{"sha": "08f7c69f90bac772c69b3bf34877f3d9a845c541", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4ZjdjNjlmOTBiYWM3NzJjNjliM2JmMzQ4NzdmM2Q5YTg0NWM1NDE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-01-13T19:00:26Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-01-13T19:00:26Z"}, "message": "G: struct flavors", "tree": {"sha": "4866ac1ab988d1735ded745aacf1630f27a3220e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4866ac1ab988d1735ded745aacf1630f27a3220e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08f7c69f90bac772c69b3bf34877f3d9a845c541", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08f7c69f90bac772c69b3bf34877f3d9a845c541", "html_url": "https://github.com/rust-lang/rust/commit/08f7c69f90bac772c69b3bf34877f3d9a845c541", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08f7c69f90bac772c69b3bf34877f3d9a845c541/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55891be06a1f0a051638cb59f1d15167faf5ab82", "url": "https://api.github.com/repos/rust-lang/rust/commits/55891be06a1f0a051638cb59f1d15167faf5ab82", "html_url": "https://github.com/rust-lang/rust/commit/55891be06a1f0a051638cb59f1d15167faf5ab82"}], "stats": {"total": 342, "additions": 257, "deletions": 85}, "files": [{"sha": "70e269e207d2eede9ef94f95cef2a240fe6d5b80", "filename": "grammar.ron", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/08f7c69f90bac772c69b3bf34877f3d9a845c541/grammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/08f7c69f90bac772c69b3bf34877f3d9a845c541/grammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/grammar.ron?ref=08f7c69f90bac772c69b3bf34877f3d9a845c541", "patch": "@@ -16,6 +16,7 @@ Grammar(\n         \"self\",\n         \"super\",\n         \"in\",\n+        \"where\",\n     ],\n     tokens: [\n         \"ERROR\",\n@@ -73,7 +74,8 @@ Grammar(\n     nodes: [\n         \"FILE\",\n         \"STRUCT_ITEM\",\n-        \"STRUCT_FIELD\",\n+        \"NAMED_FIELD\",\n+        \"POS_FIELD\",\n         \"FN_ITEM\",\n         \"EXTERN_CRATE_ITEM\",\n         \"ATTR\","}, {"sha": "a14f6de779da2f5d9a704e70b5c73c1cfdf1c6b0", "filename": "src/parser/event_parser/grammar/items.rs", "status": "modified", "additions": 79, "deletions": 7, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/08f7c69f90bac772c69b3bf34877f3d9a845c541/src%2Fparser%2Fevent_parser%2Fgrammar%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08f7c69f90bac772c69b3bf34877f3d9a845c541/src%2Fparser%2Fevent_parser%2Fgrammar%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fevent_parser%2Fgrammar%2Fitems.rs?ref=08f7c69f90bac772c69b3bf34877f3d9a845c541", "patch": "@@ -56,8 +56,84 @@ fn item(p: &mut Parser) -> bool {\n }\n \n fn struct_item(p: &mut Parser) {\n-    p.expect(IDENT)\n-        && p.curly_block(|p| comma_list(p, EOF, struct_field));\n+    if !p.expect(IDENT) {\n+        return\n+    }\n+    generic_parameters(p);\n+    match p.current() {\n+        WHERE_KW => {\n+            where_clause(p);\n+            match p.current() {\n+                SEMI => {\n+                    p.bump();\n+                    return\n+                }\n+                L_CURLY => named_fields(p),\n+                _ => { //TODO: special case `(` error message\n+                    p.error()\n+                        .message(\"expected `;` or `{`\")\n+                        .emit();\n+                    return\n+                }\n+            }\n+        }\n+        SEMI => {\n+            p.bump();\n+            return\n+        }\n+        L_CURLY => named_fields(p),\n+        L_PAREN => {\n+            tuple_fields(p);\n+            p.expect(SEMI);\n+        },\n+        _ => {\n+            p.error()\n+                .message(\"expected `;`, `{`, or `(`\")\n+                .emit();\n+            return\n+        }\n+    }\n+}\n+\n+fn named_fields(p: &mut Parser) {\n+    p.curly_block(|p| comma_list(p, EOF, |p| {\n+        named_field(p);\n+        true\n+    }));\n+\n+    fn named_field(p: &mut Parser) {\n+        node(p, NAMED_FIELD, |p| {\n+            visibility(p);\n+            p.expect(IDENT) && p.expect(COLON) && {\n+                types::type_ref(p);\n+                true\n+            };\n+        })\n+    }\n+}\n+\n+fn tuple_fields(p: &mut Parser) {\n+    if !p.expect(L_PAREN) {\n+        return\n+    }\n+    comma_list(p, R_PAREN, |p| {\n+        tuple_field(p);\n+        true\n+    });\n+    p.expect(R_PAREN);\n+\n+    fn tuple_field(p: &mut Parser) {\n+        node(p, POS_FIELD, |p| {\n+            visibility(p);\n+            types::type_ref(p);\n+        })\n+    }\n+}\n+\n+fn generic_parameters(_: &mut Parser) {\n+}\n+\n+fn where_clause(_: &mut Parser) {\n }\n \n fn extern_crate_item(p: &mut Parser) {\n@@ -133,11 +209,7 @@ fn use_item(p: &mut Parser) {\n     }\n }\n \n-fn struct_field(p: &mut Parser) -> bool {\n-    node_if(p, IDENT, STRUCT_FIELD, |p| {\n-        p.expect(COLON) && p.expect(IDENT);\n-    })\n-}\n+\n \n fn fn_item(p: &mut Parser) {\n     p.expect(IDENT) && p.expect(L_PAREN) && p.expect(R_PAREN)"}, {"sha": "881bb3ef3afbc6ec7b1475dbfec2d6c4012df677", "filename": "src/parser/event_parser/grammar/mod.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/08f7c69f90bac772c69b3bf34877f3d9a845c541/src%2Fparser%2Fevent_parser%2Fgrammar%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08f7c69f90bac772c69b3bf34877f3d9a845c541/src%2Fparser%2Fevent_parser%2Fgrammar%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fevent_parser%2Fgrammar%2Fmod.rs?ref=08f7c69f90bac772c69b3bf34877f3d9a845c541", "patch": "@@ -6,6 +6,7 @@ use syntax_kinds::*;\n mod items;\n mod attributes;\n mod expressions;\n+mod types;\n mod paths;\n \n pub(crate) fn file(p: &mut Parser) {\n@@ -72,12 +73,21 @@ fn many<F: FnMut(&mut Parser) -> bool>(p: &mut Parser, mut f: F) {\n \n fn comma_list<F: Fn(&mut Parser) -> bool>(p: &mut Parser, end: SyntaxKind, f: F) {\n     many(p, |p| {\n-        if !f(p) || p.current() == end {\n-            false\n+        if p.current() == end {\n+            return false\n+        }\n+        let pos = p.pos();\n+        f(p);\n+        if p.pos() == pos {\n+            return false\n+        }\n+\n+        if p.current() == end {\n+            p.eat(COMMA);\n         } else {\n             p.expect(COMMA);\n-            true\n         }\n+         true\n     })\n }\n "}, {"sha": "c431643d7f49cd3c04944ec1d01d49de1280c96d", "filename": "src/parser/event_parser/grammar/types.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/08f7c69f90bac772c69b3bf34877f3d9a845c541/src%2Fparser%2Fevent_parser%2Fgrammar%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08f7c69f90bac772c69b3bf34877f3d9a845c541/src%2Fparser%2Fevent_parser%2Fgrammar%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fevent_parser%2Fgrammar%2Ftypes.rs?ref=08f7c69f90bac772c69b3bf34877f3d9a845c541", "patch": "@@ -0,0 +1,5 @@\n+use super::*;\n+\n+pub(super) fn type_ref(p: &mut Parser) {\n+    p.expect(IDENT);\n+}\n\\ No newline at end of file"}, {"sha": "5ab8b934b82a6c83776e20be79ee8050e9dce2c4", "filename": "src/syntax_kinds.rs", "status": "modified", "additions": 73, "deletions": 68, "changes": 141, "blob_url": "https://github.com/rust-lang/rust/blob/08f7c69f90bac772c69b3bf34877f3d9a845c541/src%2Fsyntax_kinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08f7c69f90bac772c69b3bf34877f3d9a845c541/src%2Fsyntax_kinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsyntax_kinds.rs?ref=08f7c69f90bac772c69b3bf34877f3d9a845c541", "patch": "@@ -17,74 +17,76 @@ pub const PUB_KW: SyntaxKind = SyntaxKind(12);\n pub const SELF_KW: SyntaxKind = SyntaxKind(13);\n pub const SUPER_KW: SyntaxKind = SyntaxKind(14);\n pub const IN_KW: SyntaxKind = SyntaxKind(15);\n-pub const ERROR: SyntaxKind = SyntaxKind(16);\n-pub const IDENT: SyntaxKind = SyntaxKind(17);\n-pub const UNDERSCORE: SyntaxKind = SyntaxKind(18);\n-pub const WHITESPACE: SyntaxKind = SyntaxKind(19);\n-pub const INT_NUMBER: SyntaxKind = SyntaxKind(20);\n-pub const FLOAT_NUMBER: SyntaxKind = SyntaxKind(21);\n-pub const SEMI: SyntaxKind = SyntaxKind(22);\n-pub const COMMA: SyntaxKind = SyntaxKind(23);\n-pub const DOT: SyntaxKind = SyntaxKind(24);\n-pub const DOTDOT: SyntaxKind = SyntaxKind(25);\n-pub const DOTDOTDOT: SyntaxKind = SyntaxKind(26);\n-pub const DOTDOTEQ: SyntaxKind = SyntaxKind(27);\n-pub const L_PAREN: SyntaxKind = SyntaxKind(28);\n-pub const R_PAREN: SyntaxKind = SyntaxKind(29);\n-pub const L_CURLY: SyntaxKind = SyntaxKind(30);\n-pub const R_CURLY: SyntaxKind = SyntaxKind(31);\n-pub const L_BRACK: SyntaxKind = SyntaxKind(32);\n-pub const R_BRACK: SyntaxKind = SyntaxKind(33);\n-pub const L_ANGLE: SyntaxKind = SyntaxKind(34);\n-pub const R_ANGLE: SyntaxKind = SyntaxKind(35);\n-pub const AT: SyntaxKind = SyntaxKind(36);\n-pub const POUND: SyntaxKind = SyntaxKind(37);\n-pub const TILDE: SyntaxKind = SyntaxKind(38);\n-pub const QUESTION: SyntaxKind = SyntaxKind(39);\n-pub const COLON: SyntaxKind = SyntaxKind(40);\n-pub const COLONCOLON: SyntaxKind = SyntaxKind(41);\n-pub const DOLLAR: SyntaxKind = SyntaxKind(42);\n-pub const EQ: SyntaxKind = SyntaxKind(43);\n-pub const EQEQ: SyntaxKind = SyntaxKind(44);\n-pub const FAT_ARROW: SyntaxKind = SyntaxKind(45);\n-pub const NEQ: SyntaxKind = SyntaxKind(46);\n-pub const EXCL: SyntaxKind = SyntaxKind(47);\n-pub const LIFETIME: SyntaxKind = SyntaxKind(48);\n-pub const CHAR: SyntaxKind = SyntaxKind(49);\n-pub const BYTE: SyntaxKind = SyntaxKind(50);\n-pub const STRING: SyntaxKind = SyntaxKind(51);\n-pub const RAW_STRING: SyntaxKind = SyntaxKind(52);\n-pub const BYTE_STRING: SyntaxKind = SyntaxKind(53);\n-pub const RAW_BYTE_STRING: SyntaxKind = SyntaxKind(54);\n-pub const PLUS: SyntaxKind = SyntaxKind(55);\n-pub const MINUS: SyntaxKind = SyntaxKind(56);\n-pub const STAR: SyntaxKind = SyntaxKind(57);\n-pub const SLASH: SyntaxKind = SyntaxKind(58);\n-pub const CARET: SyntaxKind = SyntaxKind(59);\n-pub const PERCENT: SyntaxKind = SyntaxKind(60);\n-pub const AMPERSAND: SyntaxKind = SyntaxKind(61);\n-pub const PIPE: SyntaxKind = SyntaxKind(62);\n-pub const THIN_ARROW: SyntaxKind = SyntaxKind(63);\n-pub const COMMENT: SyntaxKind = SyntaxKind(64);\n-pub const DOC_COMMENT: SyntaxKind = SyntaxKind(65);\n-pub const SHEBANG: SyntaxKind = SyntaxKind(66);\n-pub const FILE: SyntaxKind = SyntaxKind(67);\n-pub const STRUCT_ITEM: SyntaxKind = SyntaxKind(68);\n-pub const STRUCT_FIELD: SyntaxKind = SyntaxKind(69);\n-pub const FN_ITEM: SyntaxKind = SyntaxKind(70);\n-pub const EXTERN_CRATE_ITEM: SyntaxKind = SyntaxKind(71);\n-pub const ATTR: SyntaxKind = SyntaxKind(72);\n-pub const META_ITEM: SyntaxKind = SyntaxKind(73);\n-pub const MOD_ITEM: SyntaxKind = SyntaxKind(74);\n-pub const USE_ITEM: SyntaxKind = SyntaxKind(75);\n-pub const USE_TREE: SyntaxKind = SyntaxKind(76);\n-pub const PATH: SyntaxKind = SyntaxKind(77);\n-pub const PATH_SEGMENT: SyntaxKind = SyntaxKind(78);\n-pub const LITERAL: SyntaxKind = SyntaxKind(79);\n-pub const ALIAS: SyntaxKind = SyntaxKind(80);\n-pub const VISIBILITY: SyntaxKind = SyntaxKind(81);\n+pub const WHERE_KW: SyntaxKind = SyntaxKind(16);\n+pub const ERROR: SyntaxKind = SyntaxKind(17);\n+pub const IDENT: SyntaxKind = SyntaxKind(18);\n+pub const UNDERSCORE: SyntaxKind = SyntaxKind(19);\n+pub const WHITESPACE: SyntaxKind = SyntaxKind(20);\n+pub const INT_NUMBER: SyntaxKind = SyntaxKind(21);\n+pub const FLOAT_NUMBER: SyntaxKind = SyntaxKind(22);\n+pub const SEMI: SyntaxKind = SyntaxKind(23);\n+pub const COMMA: SyntaxKind = SyntaxKind(24);\n+pub const DOT: SyntaxKind = SyntaxKind(25);\n+pub const DOTDOT: SyntaxKind = SyntaxKind(26);\n+pub const DOTDOTDOT: SyntaxKind = SyntaxKind(27);\n+pub const DOTDOTEQ: SyntaxKind = SyntaxKind(28);\n+pub const L_PAREN: SyntaxKind = SyntaxKind(29);\n+pub const R_PAREN: SyntaxKind = SyntaxKind(30);\n+pub const L_CURLY: SyntaxKind = SyntaxKind(31);\n+pub const R_CURLY: SyntaxKind = SyntaxKind(32);\n+pub const L_BRACK: SyntaxKind = SyntaxKind(33);\n+pub const R_BRACK: SyntaxKind = SyntaxKind(34);\n+pub const L_ANGLE: SyntaxKind = SyntaxKind(35);\n+pub const R_ANGLE: SyntaxKind = SyntaxKind(36);\n+pub const AT: SyntaxKind = SyntaxKind(37);\n+pub const POUND: SyntaxKind = SyntaxKind(38);\n+pub const TILDE: SyntaxKind = SyntaxKind(39);\n+pub const QUESTION: SyntaxKind = SyntaxKind(40);\n+pub const COLON: SyntaxKind = SyntaxKind(41);\n+pub const COLONCOLON: SyntaxKind = SyntaxKind(42);\n+pub const DOLLAR: SyntaxKind = SyntaxKind(43);\n+pub const EQ: SyntaxKind = SyntaxKind(44);\n+pub const EQEQ: SyntaxKind = SyntaxKind(45);\n+pub const FAT_ARROW: SyntaxKind = SyntaxKind(46);\n+pub const NEQ: SyntaxKind = SyntaxKind(47);\n+pub const EXCL: SyntaxKind = SyntaxKind(48);\n+pub const LIFETIME: SyntaxKind = SyntaxKind(49);\n+pub const CHAR: SyntaxKind = SyntaxKind(50);\n+pub const BYTE: SyntaxKind = SyntaxKind(51);\n+pub const STRING: SyntaxKind = SyntaxKind(52);\n+pub const RAW_STRING: SyntaxKind = SyntaxKind(53);\n+pub const BYTE_STRING: SyntaxKind = SyntaxKind(54);\n+pub const RAW_BYTE_STRING: SyntaxKind = SyntaxKind(55);\n+pub const PLUS: SyntaxKind = SyntaxKind(56);\n+pub const MINUS: SyntaxKind = SyntaxKind(57);\n+pub const STAR: SyntaxKind = SyntaxKind(58);\n+pub const SLASH: SyntaxKind = SyntaxKind(59);\n+pub const CARET: SyntaxKind = SyntaxKind(60);\n+pub const PERCENT: SyntaxKind = SyntaxKind(61);\n+pub const AMPERSAND: SyntaxKind = SyntaxKind(62);\n+pub const PIPE: SyntaxKind = SyntaxKind(63);\n+pub const THIN_ARROW: SyntaxKind = SyntaxKind(64);\n+pub const COMMENT: SyntaxKind = SyntaxKind(65);\n+pub const DOC_COMMENT: SyntaxKind = SyntaxKind(66);\n+pub const SHEBANG: SyntaxKind = SyntaxKind(67);\n+pub const FILE: SyntaxKind = SyntaxKind(68);\n+pub const STRUCT_ITEM: SyntaxKind = SyntaxKind(69);\n+pub const NAMED_FIELD: SyntaxKind = SyntaxKind(70);\n+pub const POS_FIELD: SyntaxKind = SyntaxKind(71);\n+pub const FN_ITEM: SyntaxKind = SyntaxKind(72);\n+pub const EXTERN_CRATE_ITEM: SyntaxKind = SyntaxKind(73);\n+pub const ATTR: SyntaxKind = SyntaxKind(74);\n+pub const META_ITEM: SyntaxKind = SyntaxKind(75);\n+pub const MOD_ITEM: SyntaxKind = SyntaxKind(76);\n+pub const USE_ITEM: SyntaxKind = SyntaxKind(77);\n+pub const USE_TREE: SyntaxKind = SyntaxKind(78);\n+pub const PATH: SyntaxKind = SyntaxKind(79);\n+pub const PATH_SEGMENT: SyntaxKind = SyntaxKind(80);\n+pub const LITERAL: SyntaxKind = SyntaxKind(81);\n+pub const ALIAS: SyntaxKind = SyntaxKind(82);\n+pub const VISIBILITY: SyntaxKind = SyntaxKind(83);\n \n-static INFOS: [SyntaxInfo; 82] = [\n+static INFOS: [SyntaxInfo; 84] = [\n     SyntaxInfo { name: \"USE_KW\" },\n     SyntaxInfo { name: \"FN_KW\" },\n     SyntaxInfo { name: \"STRUCT_KW\" },\n@@ -101,6 +103,7 @@ static INFOS: [SyntaxInfo; 82] = [\n     SyntaxInfo { name: \"SELF_KW\" },\n     SyntaxInfo { name: \"SUPER_KW\" },\n     SyntaxInfo { name: \"IN_KW\" },\n+    SyntaxInfo { name: \"WHERE_KW\" },\n     SyntaxInfo { name: \"ERROR\" },\n     SyntaxInfo { name: \"IDENT\" },\n     SyntaxInfo { name: \"UNDERSCORE\" },\n@@ -154,7 +157,8 @@ static INFOS: [SyntaxInfo; 82] = [\n     SyntaxInfo { name: \"SHEBANG\" },\n     SyntaxInfo { name: \"FILE\" },\n     SyntaxInfo { name: \"STRUCT_ITEM\" },\n-    SyntaxInfo { name: \"STRUCT_FIELD\" },\n+    SyntaxInfo { name: \"NAMED_FIELD\" },\n+    SyntaxInfo { name: \"POS_FIELD\" },\n     SyntaxInfo { name: \"FN_ITEM\" },\n     SyntaxInfo { name: \"EXTERN_CRATE_ITEM\" },\n     SyntaxInfo { name: \"ATTR\" },\n@@ -191,6 +195,7 @@ pub(crate) fn ident_to_keyword(ident: &str) -> Option<SyntaxKind> {\n        \"self\" => Some(SELF_KW),\n        \"super\" => Some(SUPER_KW),\n        \"in\" => Some(IN_KW),\n+       \"where\" => Some(WHERE_KW),\n        _ => None,\n    }\n }"}, {"sha": "c2c9e566741736c7b494dddca4bb2e5eaa51c28f", "filename": "tests/data/lexer/0011_keywords.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08f7c69f90bac772c69b3bf34877f3d9a845c541/tests%2Fdata%2Flexer%2F0011_keywords.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08f7c69f90bac772c69b3bf34877f3d9a845c541/tests%2Fdata%2Flexer%2F0011_keywords.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Flexer%2F0011_keywords.rs?ref=08f7c69f90bac772c69b3bf34877f3d9a845c541", "patch": "@@ -1 +1 @@\n-fn use struct trait enum impl true false as extern crate mod pub self super in\n+fn use struct trait enum impl true false as extern crate mod pub self super in where"}, {"sha": "301ee21e2596784c2e99149f5e3f20adce05661c", "filename": "tests/data/lexer/0011_keywords.txt", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08f7c69f90bac772c69b3bf34877f3d9a845c541/tests%2Fdata%2Flexer%2F0011_keywords.txt", "raw_url": "https://github.com/rust-lang/rust/raw/08f7c69f90bac772c69b3bf34877f3d9a845c541/tests%2Fdata%2Flexer%2F0011_keywords.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Flexer%2F0011_keywords.txt?ref=08f7c69f90bac772c69b3bf34877f3d9a845c541", "patch": "@@ -29,4 +29,6 @@ WHITESPACE 1 \" \"\n SUPER_KW 5 \"super\"\n WHITESPACE 1 \" \"\n IN_KW 2 \"in\"\n+WHITESPACE 1 \" \"\n+WHERE_KW 5 \"where\"\n WHITESPACE 1 \"\\n\""}, {"sha": "f59205f55c7a29b35738fae9153a159de42607bc", "filename": "tests/data/parser/err/0000_struct_field_missing_comma.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/08f7c69f90bac772c69b3bf34877f3d9a845c541/tests%2Fdata%2Fparser%2Ferr%2F0000_struct_field_missing_comma.txt", "raw_url": "https://github.com/rust-lang/rust/raw/08f7c69f90bac772c69b3bf34877f3d9a845c541/tests%2Fdata%2Fparser%2Ferr%2F0000_struct_field_missing_comma.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Ferr%2F0000_struct_field_missing_comma.txt?ref=08f7c69f90bac772c69b3bf34877f3d9a845c541", "patch": "@@ -5,15 +5,15 @@ FILE@[0; 34)\n     IDENT@[7; 8)\n     WHITESPACE@[8; 9)\n     L_CURLY@[9; 10)\n-    STRUCT_FIELD@[10; 26)\n+    NAMED_FIELD@[10; 26)\n       WHITESPACE@[10; 15)\n       IDENT@[15; 16)\n       COLON@[16; 17)\n       WHITESPACE@[17; 18)\n       IDENT@[18; 21)\n       WHITESPACE@[21; 26)\n     err: `expected COMMA`\n-    STRUCT_FIELD@[26; 33)\n+    NAMED_FIELD@[26; 33)\n       IDENT@[26; 27)\n       COLON@[27; 28)\n       WHITESPACE@[28; 29)"}, {"sha": "8dd45d2e5cac77e0094047c02fcf20954afbf649", "filename": "tests/data/parser/err/0003_C++_semicolon.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/08f7c69f90bac772c69b3bf34877f3d9a845c541/tests%2Fdata%2Fparser%2Ferr%2F0003_C%2B%2B_semicolon.txt", "raw_url": "https://github.com/rust-lang/rust/raw/08f7c69f90bac772c69b3bf34877f3d9a845c541/tests%2Fdata%2Fparser%2Ferr%2F0003_C%2B%2B_semicolon.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Ferr%2F0003_C%2B%2B_semicolon.txt?ref=08f7c69f90bac772c69b3bf34877f3d9a845c541", "patch": "@@ -5,14 +5,14 @@ FILE@[0; 40)\n     IDENT@[7; 8)\n     WHITESPACE@[8; 9)\n     L_CURLY@[9; 10)\n-    STRUCT_FIELD@[10; 21)\n+    NAMED_FIELD@[10; 21)\n       WHITESPACE@[10; 15)\n       IDENT@[15; 16)\n       COLON@[16; 17)\n       WHITESPACE@[17; 18)\n       IDENT@[18; 21)\n     COMMA@[21; 22)\n-    STRUCT_FIELD@[22; 36)\n+    NAMED_FIELD@[22; 36)\n       WHITESPACE@[22; 27)\n       IDENT@[27; 28)\n       COLON@[28; 29)"}, {"sha": "58042f6a7de88340805e5d9d5e922cb9c62b3b65", "filename": "tests/data/parser/ok/0002_struct_item_field.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08f7c69f90bac772c69b3bf34877f3d9a845c541/tests%2Fdata%2Fparser%2Fok%2F0002_struct_item_field.txt", "raw_url": "https://github.com/rust-lang/rust/raw/08f7c69f90bac772c69b3bf34877f3d9a845c541/tests%2Fdata%2Fparser%2Fok%2F0002_struct_item_field.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Fok%2F0002_struct_item_field.txt?ref=08f7c69f90bac772c69b3bf34877f3d9a845c541", "patch": "@@ -5,7 +5,7 @@ FILE@[0; 25)\n     IDENT@[7; 8)\n     WHITESPACE@[8; 9)\n     L_CURLY@[9; 10)\n-    STRUCT_FIELD@[10; 24)\n+    NAMED_FIELD@[10; 24)\n       WHITESPACE@[10; 15)\n       IDENT@[15; 18)\n       COLON@[18; 19)"}, {"sha": "69638350c46fcbe0644a4e1a98e07cb9b10ced96", "filename": "tests/data/parser/ok/0016_struct_flavors.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/08f7c69f90bac772c69b3bf34877f3d9a845c541/tests%2Fdata%2Fparser%2Fok%2F0016_struct_flavors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08f7c69f90bac772c69b3bf34877f3d9a845c541/tests%2Fdata%2Fparser%2Fok%2F0016_struct_flavors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Fok%2F0016_struct_flavors.rs?ref=08f7c69f90bac772c69b3bf34877f3d9a845c541", "patch": "@@ -0,0 +1,10 @@\n+struct A;\n+struct B {}\n+struct C();\n+\n+struct D {\n+    a: u32,\n+    pub b: u32\n+}\n+\n+struct E(pub x, y,);"}, {"sha": "93b16e1b9c28519141122343b8be02f6bd2af485", "filename": "tests/data/parser/ok/0016_struct_flavors.txt", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/08f7c69f90bac772c69b3bf34877f3d9a845c541/tests%2Fdata%2Fparser%2Fok%2F0016_struct_flavors.txt", "raw_url": "https://github.com/rust-lang/rust/raw/08f7c69f90bac772c69b3bf34877f3d9a845c541/tests%2Fdata%2Fparser%2Fok%2F0016_struct_flavors.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Fok%2F0016_struct_flavors.txt?ref=08f7c69f90bac772c69b3bf34877f3d9a845c541", "patch": "@@ -0,0 +1,66 @@\n+FILE@[0; 97)\n+  STRUCT_ITEM@[0; 10)\n+    STRUCT_KW@[0; 6)\n+    WHITESPACE@[6; 7)\n+    IDENT@[7; 8)\n+    SEMI@[8; 9)\n+    WHITESPACE@[9; 10)\n+  STRUCT_ITEM@[10; 22)\n+    STRUCT_KW@[10; 16)\n+    WHITESPACE@[16; 17)\n+    IDENT@[17; 18)\n+    WHITESPACE@[18; 19)\n+    L_CURLY@[19; 20)\n+    R_CURLY@[20; 21)\n+    WHITESPACE@[21; 22)\n+  STRUCT_ITEM@[22; 35)\n+    STRUCT_KW@[22; 28)\n+    WHITESPACE@[28; 29)\n+    IDENT@[29; 30)\n+    L_PAREN@[30; 31)\n+    R_PAREN@[31; 32)\n+    SEMI@[32; 33)\n+    WHITESPACE@[33; 35)\n+  STRUCT_ITEM@[35; 76)\n+    STRUCT_KW@[35; 41)\n+    WHITESPACE@[41; 42)\n+    IDENT@[42; 43)\n+    WHITESPACE@[43; 44)\n+    L_CURLY@[44; 45)\n+    NAMED_FIELD@[45; 56)\n+      WHITESPACE@[45; 50)\n+      IDENT@[50; 51)\n+      COLON@[51; 52)\n+      WHITESPACE@[52; 53)\n+      IDENT@[53; 56)\n+    COMMA@[56; 57)\n+    NAMED_FIELD@[57; 73)\n+      VISIBILITY@[57; 66)\n+        WHITESPACE@[57; 62)\n+        PUB_KW@[62; 65)\n+        WHITESPACE@[65; 66)\n+      IDENT@[66; 67)\n+      COLON@[67; 68)\n+      WHITESPACE@[68; 69)\n+      IDENT@[69; 72)\n+      WHITESPACE@[72; 73)\n+    R_CURLY@[73; 74)\n+    WHITESPACE@[74; 76)\n+  STRUCT_ITEM@[76; 97)\n+    STRUCT_KW@[76; 82)\n+    WHITESPACE@[82; 83)\n+    IDENT@[83; 84)\n+    L_PAREN@[84; 85)\n+    POS_FIELD@[85; 90)\n+      VISIBILITY@[85; 89)\n+        PUB_KW@[85; 88)\n+        WHITESPACE@[88; 89)\n+      IDENT@[89; 90)\n+    COMMA@[90; 91)\n+    POS_FIELD@[91; 93)\n+      WHITESPACE@[91; 92)\n+      IDENT@[92; 93)\n+    COMMA@[93; 94)\n+    R_PAREN@[94; 95)\n+    SEMI@[95; 96)\n+    WHITESPACE@[96; 97)"}]}