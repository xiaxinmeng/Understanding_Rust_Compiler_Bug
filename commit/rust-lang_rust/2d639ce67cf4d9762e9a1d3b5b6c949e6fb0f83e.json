{"sha": "2d639ce67cf4d9762e9a1d3b5b6c949e6fb0f83e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkNjM5Y2U2N2NmNGQ5NzYyZTlhMWQzYjViNmM5NDllNmZiMGY4M2U=", "commit": {"author": {"name": "Richard Schneeman", "email": "richard.schneeman+no-recruiters@gmail.com", "date": "2021-08-09T02:07:09Z"}, "committer": {"name": "Richard Schneeman", "email": "richard.schneeman+no-recruiters@gmail.com", "date": "2021-08-09T02:23:18Z"}, "message": "## Context\n\nWhile going through the \"The Rust Programming Language\" book (Klabnik & Nichols), the TCP server example directs us to use TcpListener::incoming. I was curious how I could pass this value to a function (before reading ahead in the book), so I looked up the docs to determine the signature. \n\nWhen I opened the docs, I found https://doc.rust-lang.org/std/net/struct.TcpListener.html#method.incoming, which didn't mention TcpStream anywhere in the example.\n\nEventually, I clicked on https://doc.rust-lang.org/std/net/struct.TcpListener.html#method.accept in the docs (after clicking a few other locations first), and was able to surmise that the value contained TcpStream.\n\n## Opportunity\n\nWhile this type is mentioned several times in this doc, I feel that someone should be able to fully use the results of the TcpListner::incoming iterator based solely on the docs of just this method.\n\n## Implementation\n\nI took the code from the top-level TcpListener https://doc.rust-lang.org/std/net/struct.TcpListener.html#method.incoming and blended it with the existing docs for TcpListener::incoming https://doc.rust-lang.org/std/net/struct.TcpListener.html#method.incoming.\n\nIt does make the example a little longer, and it also introduces a little duplication. It also gives the reader the type signatures they need to move on to the next step.\n\n## Additional considerations\n\nI noticed that in this doc, `handle_connection` and `handle_client` are both used to accept a TcpStream in the docs on this page. I want to standardize on one function name convention, so readers don't accidentally think two different concepts are being referenced. I didn't want to cram do too much in one PR, I can update this PR to make that change, or I could send another PR (if you would like).\n\nFirst attempted contribution to Rust (and I'm also still very new, hence reading through the rust book for the first time)! Would you please let me know what you think?", "tree": {"sha": "eca425e9b8f1a0474f7b2189bd673144ad630b31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eca425e9b8f1a0474f7b2189bd673144ad630b31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d639ce67cf4d9762e9a1d3b5b6c949e6fb0f83e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d639ce67cf4d9762e9a1d3b5b6c949e6fb0f83e", "html_url": "https://github.com/rust-lang/rust/commit/2d639ce67cf4d9762e9a1d3b5b6c949e6fb0f83e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d639ce67cf4d9762e9a1d3b5b6c949e6fb0f83e/comments", "author": {"login": "schneems", "id": 59744, "node_id": "MDQ6VXNlcjU5NzQ0", "avatar_url": "https://avatars.githubusercontent.com/u/59744?v=4", "gravatar_id": "", "url": "https://api.github.com/users/schneems", "html_url": "https://github.com/schneems", "followers_url": "https://api.github.com/users/schneems/followers", "following_url": "https://api.github.com/users/schneems/following{/other_user}", "gists_url": "https://api.github.com/users/schneems/gists{/gist_id}", "starred_url": "https://api.github.com/users/schneems/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/schneems/subscriptions", "organizations_url": "https://api.github.com/users/schneems/orgs", "repos_url": "https://api.github.com/users/schneems/repos", "events_url": "https://api.github.com/users/schneems/events{/privacy}", "received_events_url": "https://api.github.com/users/schneems/received_events", "type": "User", "site_admin": false}, "committer": {"login": "schneems", "id": 59744, "node_id": "MDQ6VXNlcjU5NzQ0", "avatar_url": "https://avatars.githubusercontent.com/u/59744?v=4", "gravatar_id": "", "url": "https://api.github.com/users/schneems", "html_url": "https://github.com/schneems", "followers_url": "https://api.github.com/users/schneems/followers", "following_url": "https://api.github.com/users/schneems/following{/other_user}", "gists_url": "https://api.github.com/users/schneems/gists{/gist_id}", "starred_url": "https://api.github.com/users/schneems/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/schneems/subscriptions", "organizations_url": "https://api.github.com/users/schneems/orgs", "repos_url": "https://api.github.com/users/schneems/repos", "events_url": "https://api.github.com/users/schneems/events{/privacy}", "received_events_url": "https://api.github.com/users/schneems/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74a11c63f85c2b1796852f317358188f9cde236e", "url": "https://api.github.com/repos/rust-lang/rust/commits/74a11c63f85c2b1796852f317358188f9cde236e", "html_url": "https://github.com/rust-lang/rust/commit/74a11c63f85c2b1796852f317358188f9cde236e"}], "stats": {"total": 21, "additions": 14, "deletions": 7}, "files": [{"sha": "c8eb4811f7e9856a06ea3796b04f8b6c55ca381b", "filename": "library/std/src/net/tcp.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2d639ce67cf4d9762e9a1d3b5b6c949e6fb0f83e/library%2Fstd%2Fsrc%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d639ce67cf4d9762e9a1d3b5b6c949e6fb0f83e/library%2Fstd%2Fsrc%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Ftcp.rs?ref=2d639ce67cf4d9762e9a1d3b5b6c949e6fb0f83e", "patch": "@@ -767,17 +767,24 @@ impl TcpListener {\n     /// # Examples\n     ///\n     /// ```no_run\n-    /// use std::net::TcpListener;\n+    /// use std::net::{TcpListener, TcpStream};\n     ///\n-    /// let listener = TcpListener::bind(\"127.0.0.1:80\").unwrap();\n+    /// fn handle_connection(stream: TcpStream) {\n+    ///    //...\n+    /// }\n     ///\n-    /// for stream in listener.incoming() {\n-    ///     match stream {\n-    ///         Ok(stream) => {\n-    ///             println!(\"new client!\");\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let listener = TcpListener::bind(\"127.0.0.1:80\").unwrap();\n+    ///\n+    ///     for stream in listener.incoming() {\n+    ///         match stream {\n+    ///             Ok(stream) => {\n+    ///                 handle_connection(stream);\n+    ///             }\n+    ///             Err(e) => { /* connection failed */ }\n     ///         }\n-    ///         Err(e) => { /* connection failed */ }\n     ///     }\n+    ///     Ok(())\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}]}