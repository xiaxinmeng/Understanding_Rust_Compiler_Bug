{"sha": "817fbebbb5f9187994b1a09a603ba9c7b2755a06", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxN2ZiZWJiYjVmOTE4Nzk5NGIxYTA5YTYwM2JhOWM3YjI3NTVhMDY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-12-14T15:15:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-14T15:15:52Z"}, "message": "Merge #6862\n\n6862: Add LifetimeParam resolving to Semantics r=matklad a=Veykril\n\nThis is stuff required for the lifetime references/definitions PR. I pulled this out to make it easier to review as well as because there is one thing that still has to be addressed which can be found in the review comments.\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "7f5d35fc2aad9880c6c7573d76ef0947c7b613fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f5d35fc2aad9880c6c7573d76ef0947c7b613fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/817fbebbb5f9187994b1a09a603ba9c7b2755a06", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf14GoCRBK7hj4Ov3rIwAAdHIIADhd9E1iasnFBtdtfj15cKPe\nWlQG6xmlGmw5XjnJRgkepmWts+zDZJx4kk2fhO8rSBBjZ+tAE5PcKjPlqu7FLMbG\nd9z67+qa2OdS4tRKGRCuwXPFNjtUvhHS4skytVjBtzYcyWWP8F0hvPNrD/cqSZz9\nq/tev6Qv/ruykAptNx4Ix20St1FtFhElHg5AR//QINKevPFcyRIptwJmK+8j61k2\n2vPbvqquAyP52OyM4+uEi732zhWYPc3aAUGD93BzaqXuhY4tEG40+yF8Xxv/ZDLa\nRiZc0LICoe5G+Jr4p0Osb2CFQDoH0efu5opkLjVEgHC6SShQT0H6qQYef/zTCHA=\n=vGNm\n-----END PGP SIGNATURE-----\n", "payload": "tree 7f5d35fc2aad9880c6c7573d76ef0947c7b613fc\nparent 134c7563be05d120ffb45d9b971ba95735a0fcb5\nparent c6172f3f6d3fb0982ae17f48507608609d46d179\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1607958952 +0000\ncommitter GitHub <noreply@github.com> 1607958952 +0000\n\nMerge #6862\n\n6862: Add LifetimeParam resolving to Semantics r=matklad a=Veykril\n\nThis is stuff required for the lifetime references/definitions PR. I pulled this out to make it easier to review as well as because there is one thing that still has to be addressed which can be found in the review comments.\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/817fbebbb5f9187994b1a09a603ba9c7b2755a06", "html_url": "https://github.com/rust-lang/rust/commit/817fbebbb5f9187994b1a09a603ba9c7b2755a06", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/817fbebbb5f9187994b1a09a603ba9c7b2755a06/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "134c7563be05d120ffb45d9b971ba95735a0fcb5", "url": "https://api.github.com/repos/rust-lang/rust/commits/134c7563be05d120ffb45d9b971ba95735a0fcb5", "html_url": "https://github.com/rust-lang/rust/commit/134c7563be05d120ffb45d9b971ba95735a0fcb5"}, {"sha": "c6172f3f6d3fb0982ae17f48507608609d46d179", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6172f3f6d3fb0982ae17f48507608609d46d179", "html_url": "https://github.com/rust-lang/rust/commit/c6172f3f6d3fb0982ae17f48507608609d46d179"}], "stats": {"total": 170, "additions": 131, "deletions": 39}, "files": [{"sha": "42dc35b762c0b311d7a72e0ac66259ec07f0c0eb", "filename": "crates/hir/src/code_model.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/817fbebbb5f9187994b1a09a603ba9c7b2755a06/crates%2Fhir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/817fbebbb5f9187994b1a09a603ba9c7b2755a06/crates%2Fhir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fcode_model.rs?ref=817fbebbb5f9187994b1a09a603ba9c7b2755a06", "patch": "@@ -1250,6 +1250,14 @@ impl LifetimeParam {\n         let params = db.generic_params(self.id.parent);\n         params.lifetimes[self.id.local_id].name.clone()\n     }\n+\n+    pub fn module(self, db: &dyn HirDatabase) -> Module {\n+        self.id.parent.module(db.upcast()).into()\n+    }\n+\n+    pub fn parent(self, _db: &dyn HirDatabase) -> GenericDef {\n+        self.id.parent.into()\n+    }\n }\n \n // FIXME: rename from `ImplDef` to `Impl`"}, {"sha": "dd3fcfe4ab88533997842f9bc3280b0b2ce9780a", "filename": "crates/hir/src/from_id.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/817fbebbb5f9187994b1a09a603ba9c7b2755a06/crates%2Fhir%2Fsrc%2Ffrom_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/817fbebbb5f9187994b1a09a603ba9c7b2755a06/crates%2Fhir%2Fsrc%2Ffrom_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Ffrom_id.rs?ref=817fbebbb5f9187994b1a09a603ba9c7b2755a06", "patch": "@@ -41,6 +41,7 @@ from_id![\n     (hir_def::FunctionId, crate::Function),\n     (hir_def::ImplId, crate::ImplDef),\n     (hir_def::TypeParamId, crate::TypeParam),\n+    (hir_def::LifetimeParamId, crate::LifetimeParam),\n     (hir_expand::MacroDefId, crate::MacroDef)\n ];\n \n@@ -154,6 +155,22 @@ impl From<GenericDef> for GenericDefId {\n     }\n }\n \n+impl From<GenericDefId> for GenericDef {\n+    fn from(def: GenericDefId) -> Self {\n+        match def {\n+            GenericDefId::FunctionId(it) => GenericDef::Function(it.into()),\n+            GenericDefId::AdtId(it) => GenericDef::Adt(it.into()),\n+            GenericDefId::TraitId(it) => GenericDef::Trait(it.into()),\n+            GenericDefId::TypeAliasId(it) => GenericDef::TypeAlias(it.into()),\n+            GenericDefId::ImplId(it) => GenericDef::ImplDef(it.into()),\n+            GenericDefId::EnumVariantId(it) => {\n+                GenericDef::EnumVariant(EnumVariant { parent: it.parent.into(), id: it.local_id })\n+            }\n+            GenericDefId::ConstId(it) => GenericDef::Const(it.into()),\n+        }\n+    }\n+}\n+\n impl From<Adt> for GenericDefId {\n     fn from(id: Adt) -> Self {\n         match id {"}, {"sha": "1e64a1614b3dc96228e1cfa7b45826a68a33dfe8", "filename": "crates/hir/src/has_source.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/817fbebbb5f9187994b1a09a603ba9c7b2755a06/crates%2Fhir%2Fsrc%2Fhas_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/817fbebbb5f9187994b1a09a603ba9c7b2755a06/crates%2Fhir%2Fsrc%2Fhas_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fhas_source.rs?ref=817fbebbb5f9187994b1a09a603ba9c7b2755a06", "patch": "@@ -10,8 +10,8 @@ use hir_expand::InFile;\n use syntax::ast;\n \n use crate::{\n-    db::HirDatabase, Const, Enum, EnumVariant, Field, FieldSource, Function, ImplDef, MacroDef,\n-    Module, Static, Struct, Trait, TypeAlias, TypeParam, Union,\n+    db::HirDatabase, Const, Enum, EnumVariant, Field, FieldSource, Function, ImplDef,\n+    LifetimeParam, MacroDef, Module, Static, Struct, Trait, TypeAlias, TypeParam, Union,\n };\n \n pub trait HasSource {\n@@ -129,6 +129,14 @@ impl HasSource for TypeParam {\n     type Ast = Either<ast::Trait, ast::TypeParam>;\n     fn source(self, db: &dyn HirDatabase) -> InFile<Self::Ast> {\n         let child_source = self.id.parent.child_source(db.upcast());\n-        child_source.map(|it| it[self.id.local_id].clone())\n+        child_source.map(|it| it.type_params[self.id.local_id].clone())\n+    }\n+}\n+\n+impl HasSource for LifetimeParam {\n+    type Ast = ast::LifetimeParam;\n+    fn source(self, db: &dyn HirDatabase) -> InFile<Self::Ast> {\n+        let child_source = self.id.parent.child_source(db.upcast());\n+        child_source.map(|it| it.lifetime_params[self.id.local_id].clone())\n     }\n }"}, {"sha": "e4fc21cedf97dc5425b1640d72a292637cc66b80", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 45, "deletions": 6, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/817fbebbb5f9187994b1a09a603ba9c7b2755a06/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/817fbebbb5f9187994b1a09a603ba9c7b2755a06/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=817fbebbb5f9187994b1a09a603ba9c7b2755a06", "patch": "@@ -13,16 +13,21 @@ use hir_expand::{hygiene::Hygiene, name::AsName, ExpansionInfo};\n use hir_ty::associated_type_shorthand_candidates;\n use itertools::Itertools;\n use rustc_hash::{FxHashMap, FxHashSet};\n-use syntax::{algo::find_node_at_offset, ast, AstNode, SyntaxNode, SyntaxToken, TextSize};\n+use syntax::{\n+    algo::find_node_at_offset,\n+    ast::{self, GenericParamsOwner},\n+    match_ast, AstNode, SyntaxNode, SyntaxToken, TextSize,\n+};\n \n use crate::{\n     code_model::Access,\n     db::HirDatabase,\n     diagnostics::Diagnostic,\n     semantics::source_to_def::{ChildContainer, SourceToDefCache, SourceToDefCtx},\n     source_analyzer::{resolve_hir_path, SourceAnalyzer},\n-    AssocItem, Callable, Crate, Field, Function, HirFileId, ImplDef, InFile, Local, MacroDef,\n-    Module, ModuleDef, Name, Path, ScopeDef, Trait, Type, TypeAlias, TypeParam, VariantDef,\n+    AssocItem, Callable, Crate, Field, Function, HirFileId, ImplDef, InFile, LifetimeParam, Local,\n+    MacroDef, Module, ModuleDef, Name, Path, ScopeDef, Trait, Type, TypeAlias, TypeParam,\n+    VariantDef,\n };\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n@@ -173,6 +178,11 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n         self.imp.descend_node_at_offset(node, offset).find_map(N::cast)\n     }\n \n+    // FIXME: Replace the SyntaxToken with a typed ast Node/Token\n+    pub fn resolve_lifetime_param(&self, lifetime_token: &SyntaxToken) -> Option<LifetimeParam> {\n+        self.imp.resolve_lifetime_param(lifetime_token)\n+    }\n+\n     pub fn type_of_expr(&self, expr: &ast::Expr) -> Option<Type> {\n         self.imp.type_of_expr(expr)\n     }\n@@ -392,16 +402,44 @@ impl<'db> SemanticsImpl<'db> {\n             .kmerge_by(|node1, node2| node1.text_range().len() < node2.text_range().len())\n     }\n \n+    // FIXME: Replace the SyntaxToken with a typed ast Node/Token\n+    fn resolve_lifetime_param(&self, lifetime_token: &SyntaxToken) -> Option<LifetimeParam> {\n+        if lifetime_token.kind() != syntax::SyntaxKind::LIFETIME {\n+            return None;\n+        }\n+        let lifetime_text = lifetime_token.text();\n+        let lifetime_param = lifetime_token.parent().ancestors().find_map(|syn| {\n+            let gpl = match_ast! {\n+                match syn {\n+                    ast::Fn(it) => it.generic_param_list()?,\n+                    ast::TypeAlias(it) => it.generic_param_list()?,\n+                    ast::Struct(it) => it.generic_param_list()?,\n+                    ast::Enum(it) => it.generic_param_list()?,\n+                    ast::Union(it) => it.generic_param_list()?,\n+                    ast::Trait(it) => it.generic_param_list()?,\n+                    ast::Impl(it) => it.generic_param_list()?,\n+                    ast::WherePred(it) => it.generic_param_list()?,\n+                    ast::ForType(it) => it.generic_param_list()?,\n+                    _ => return None,\n+                }\n+            };\n+            gpl.lifetime_params()\n+                .find(|tp| tp.lifetime_token().as_ref().map(|lt| lt.text()) == Some(lifetime_text))\n+        })?;\n+        let src = self.find_file(lifetime_param.syntax().clone()).with_value(lifetime_param);\n+        ToDef::to_def(self, src)\n+    }\n+\n     fn type_of_expr(&self, expr: &ast::Expr) -> Option<Type> {\n-        self.analyze(expr.syntax()).type_of_expr(self.db, &expr)\n+        self.analyze(expr.syntax()).type_of_expr(self.db, expr)\n     }\n \n     fn type_of_pat(&self, pat: &ast::Pat) -> Option<Type> {\n-        self.analyze(pat.syntax()).type_of_pat(self.db, &pat)\n+        self.analyze(pat.syntax()).type_of_pat(self.db, pat)\n     }\n \n     fn type_of_self(&self, param: &ast::SelfParam) -> Option<Type> {\n-        self.analyze(param.syntax()).type_of_self(self.db, &param)\n+        self.analyze(param.syntax()).type_of_self(self.db, param)\n     }\n \n     fn resolve_method_call(&self, call: &ast::MethodCallExpr) -> Option<FunctionId> {\n@@ -684,6 +722,7 @@ to_def_impls![\n     (crate::Field, ast::TupleField, tuple_field_to_def),\n     (crate::EnumVariant, ast::Variant, enum_variant_to_def),\n     (crate::TypeParam, ast::TypeParam, type_param_to_def),\n+    (crate::LifetimeParam, ast::LifetimeParam, lifetime_param_to_def),\n     (crate::MacroDef, ast::MacroCall, macro_call_to_def), // this one is dubious, not all calls are macros\n     (crate::Local, ast::IdentPat, bind_pat_to_def),\n ];"}, {"sha": "badcf0ae807c116e602637520bb5248b300dcd95", "filename": "crates/hir/src/semantics/source_to_def.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/817fbebbb5f9187994b1a09a603ba9c7b2755a06/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/817fbebbb5f9187994b1a09a603ba9c7b2755a06/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs?ref=817fbebbb5f9187994b1a09a603ba9c7b2755a06", "patch": "@@ -7,7 +7,8 @@ use hir_def::{\n     expr::PatId,\n     keys::{self, Key},\n     ConstId, DefWithBodyId, EnumId, EnumVariantId, FieldId, FunctionId, GenericDefId, ImplId,\n-    ModuleId, StaticId, StructId, TraitId, TypeAliasId, TypeParamId, UnionId, VariantId,\n+    LifetimeParamId, ModuleId, StaticId, StructId, TraitId, TypeAliasId, TypeParamId, UnionId,\n+    VariantId,\n };\n use hir_expand::{name::AsName, AstId, MacroDefKind};\n use rustc_hash::FxHashMap;\n@@ -128,13 +129,25 @@ impl SourceToDefCtx<'_, '_> {\n \n     pub(super) fn type_param_to_def(&mut self, src: InFile<ast::TypeParam>) -> Option<TypeParamId> {\n         let container: ChildContainer =\n-            self.find_type_param_container(src.as_ref().map(|it| it.syntax()))?.into();\n+            self.find_generic_param_container(src.as_ref().map(|it| it.syntax()))?.into();\n         let db = self.db;\n         let dyn_map =\n             &*self.cache.entry(container).or_insert_with(|| container.child_by_source(db));\n         dyn_map[keys::TYPE_PARAM].get(&src).copied()\n     }\n \n+    pub(super) fn lifetime_param_to_def(\n+        &mut self,\n+        src: InFile<ast::LifetimeParam>,\n+    ) -> Option<LifetimeParamId> {\n+        let container: ChildContainer =\n+            self.find_generic_param_container(src.as_ref().map(|it| it.syntax()))?.into();\n+        let db = self.db;\n+        let dyn_map =\n+            &*self.cache.entry(container).or_insert_with(|| container.child_by_source(db));\n+        dyn_map[keys::LIFETIME_PARAM].get(&src).copied()\n+    }\n+\n     // FIXME: use DynMap as well?\n     pub(super) fn macro_call_to_def(&mut self, src: InFile<ast::MacroCall>) -> Option<MacroDefId> {\n         let kind = MacroDefKind::Declarative;\n@@ -203,7 +216,7 @@ impl SourceToDefCtx<'_, '_> {\n         Some(def.into())\n     }\n \n-    fn find_type_param_container(&mut self, src: InFile<&SyntaxNode>) -> Option<GenericDefId> {\n+    fn find_generic_param_container(&mut self, src: InFile<&SyntaxNode>) -> Option<GenericDefId> {\n         for container in src.cloned().ancestors_with_macros(self.db.upcast()).skip(1) {\n             let res: GenericDefId = match_ast! {\n                 match (container.value) {\n@@ -247,7 +260,7 @@ pub(crate) enum ChildContainer {\n     VariantId(VariantId),\n     TypeAliasId(TypeAliasId),\n     /// XXX: this might be the same def as, for example an `EnumId`. However,\n-    /// here the children generic parameters, and not, eg enum variants.\n+    /// here the children are generic parameters, and not, eg enum variants.\n     GenericDefId(GenericDefId),\n }\n impl_from! {"}, {"sha": "81912a4546f82f648d479b2610f563c049c82405", "filename": "crates/hir_def/src/generics.rs", "status": "modified", "additions": 28, "deletions": 21, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/817fbebbb5f9187994b1a09a603ba9c7b2755a06/crates%2Fhir_def%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/817fbebbb5f9187994b1a09a603ba9c7b2755a06/crates%2Fhir_def%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fgenerics.rs?ref=817fbebbb5f9187994b1a09a603ba9c7b2755a06", "patch": "@@ -19,10 +19,10 @@ use crate::{\n     db::DefDatabase,\n     dyn_map::DynMap,\n     keys,\n-    src::HasChildSource,\n     src::HasSource,\n     type_ref::{LifetimeRef, TypeBound, TypeRef},\n-    AdtId, GenericDefId, LocalTypeParamId, Lookup, TypeParamId,\n+    AdtId, GenericDefId, LifetimeParamId, LocalLifetimeParamId, LocalTypeParamId, Lookup,\n+    TypeParamId,\n };\n \n /// Data about a generic parameter (to a function, struct, impl, ...).\n@@ -72,7 +72,11 @@ pub enum WherePredicateTypeTarget {\n     // FIXME: ForLifetime(Vec<LifetimeParamId>, TypeRef)\n }\n \n-type SourceMap = ArenaMap<LocalTypeParamId, Either<ast::Trait, ast::TypeParam>>;\n+#[derive(Default)]\n+pub struct SourceMaps {\n+    pub type_params: ArenaMap<LocalTypeParamId, Either<ast::Trait, ast::TypeParam>>,\n+    pub lifetime_params: ArenaMap<LocalLifetimeParamId, ast::LifetimeParam>,\n+}\n \n impl GenericParams {\n     pub(crate) fn generic_params_query(\n@@ -129,9 +133,9 @@ impl GenericParams {\n         Arc::new(generics)\n     }\n \n-    fn new(db: &dyn DefDatabase, def: GenericDefId) -> (GenericParams, InFile<SourceMap>) {\n+    fn new(db: &dyn DefDatabase, def: GenericDefId) -> (GenericParams, InFile<SourceMaps>) {\n         let mut generics = GenericParams::default();\n-        let mut sm = ArenaMap::default();\n+        let mut sm = SourceMaps::default();\n \n         // FIXME: add `: Sized` bound for everything except for `Self` in traits\n         let file_id = match def {\n@@ -174,7 +178,7 @@ impl GenericParams {\n                     default: None,\n                     provenance: TypeParamProvenance::TraitSelf,\n                 });\n-                sm.insert(self_param_id, Either::Left(src.value.clone()));\n+                sm.type_params.insert(self_param_id, Either::Left(src.value.clone()));\n                 // add super traits as bounds on Self\n                 // i.e., trait Foo: Bar is equivalent to trait Foo where Self: Bar\n                 let self_param = TypeRef::Path(name![Self].into());\n@@ -210,7 +214,7 @@ impl GenericParams {\n     pub(crate) fn fill(\n         &mut self,\n         lower_ctx: &LowerCtx,\n-        sm: &mut SourceMap,\n+        sm: &mut SourceMaps,\n         node: &dyn GenericParamsOwner,\n     ) {\n         if let Some(params) = node.generic_param_list() {\n@@ -237,7 +241,7 @@ impl GenericParams {\n     fn fill_params(\n         &mut self,\n         lower_ctx: &LowerCtx,\n-        sm: &mut SourceMap,\n+        sm: &mut SourceMaps,\n         params: ast::GenericParamList,\n     ) {\n         for type_param in params.type_params() {\n@@ -250,7 +254,7 @@ impl GenericParams {\n                 provenance: TypeParamProvenance::TypeParamList,\n             };\n             let param_id = self.types.alloc(param);\n-            sm.insert(param_id, Either::Right(type_param.clone()));\n+            sm.type_params.insert(param_id, Either::Right(type_param.clone()));\n \n             let type_ref = TypeRef::Path(name.into());\n             self.fill_bounds(&lower_ctx, &type_param, Either::Left(type_ref));\n@@ -260,7 +264,8 @@ impl GenericParams {\n                 .lifetime_token()\n                 .map_or_else(Name::missing, |tok| Name::new_lifetime(&tok));\n             let param = LifetimeParamData { name: name.clone() };\n-            let _param_id = self.lifetimes.alloc(param);\n+            let param_id = self.lifetimes.alloc(param);\n+            sm.lifetime_params.insert(param_id, lifetime_param.clone());\n             let lifetime_ref = LifetimeRef::new_name(name);\n             self.fill_bounds(&lower_ctx, &lifetime_param, Either::Right(lifetime_ref));\n         }\n@@ -340,27 +345,29 @@ impl GenericParams {\n         })\n     }\n }\n-\n-impl HasChildSource for GenericDefId {\n-    type ChildId = LocalTypeParamId;\n-    type Value = Either<ast::Trait, ast::TypeParam>;\n-    fn child_source(&self, db: &dyn DefDatabase) -> InFile<SourceMap> {\n-        let (_, sm) = GenericParams::new(db, *self);\n-        sm\n+impl GenericDefId {\n+    // FIXME: Change HasChildSource's ChildId AssocItem to be a generic parameter instead\n+    pub fn child_source(&self, db: &dyn DefDatabase) -> InFile<SourceMaps> {\n+        GenericParams::new(db, *self).1\n     }\n }\n \n impl ChildBySource for GenericDefId {\n     fn child_by_source(&self, db: &dyn DefDatabase) -> DynMap {\n         let mut res = DynMap::default();\n-        let arena_map = self.child_source(db);\n-        let arena_map = arena_map.as_ref();\n-        for (local_id, src) in arena_map.value.iter() {\n+        let (_, sm) = GenericParams::new(db, *self);\n+\n+        let sm = sm.as_ref();\n+        for (local_id, src) in sm.value.type_params.iter() {\n             let id = TypeParamId { parent: *self, local_id };\n             if let Either::Right(type_param) = src {\n-                res[keys::TYPE_PARAM].insert(arena_map.with_value(type_param.clone()), id)\n+                res[keys::TYPE_PARAM].insert(sm.with_value(type_param.clone()), id)\n             }\n         }\n+        for (local_id, src) in sm.value.lifetime_params.iter() {\n+            let id = LifetimeParamId { parent: *self, local_id };\n+            res[keys::LIFETIME_PARAM].insert(sm.with_value(src.clone()), id);\n+        }\n         res\n     }\n }"}, {"sha": "2939c6b1e309d0844a6d6515e653752c6e33c2c9", "filename": "crates/hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/817fbebbb5f9187994b1a09a603ba9c7b2755a06/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/817fbebbb5f9187994b1a09a603ba9c7b2755a06/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=817fbebbb5f9187994b1a09a603ba9c7b2755a06", "patch": "@@ -2,7 +2,6 @@\n \n use std::{collections::hash_map::Entry, mem, sync::Arc};\n \n-use arena::map::ArenaMap;\n use hir_expand::{ast_id_map::AstIdMap, hygiene::Hygiene, name::known, HirFileId};\n use smallvec::SmallVec;\n use syntax::{\n@@ -607,7 +606,7 @@ impl Ctx {\n         owner: GenericsOwner<'_>,\n         node: &impl ast::GenericParamsOwner,\n     ) -> GenericParamsId {\n-        let mut sm = &mut ArenaMap::default();\n+        let mut sm = &mut Default::default();\n         let mut generics = GenericParams::default();\n         match owner {\n             GenericsOwner::Function(func) => {\n@@ -630,7 +629,7 @@ impl Ctx {\n                     default: None,\n                     provenance: TypeParamProvenance::TraitSelf,\n                 });\n-                sm.insert(self_param_id, Either::Left(trait_def.clone()));\n+                sm.type_params.insert(self_param_id, Either::Left(trait_def.clone()));\n                 // add super traits as bounds on Self\n                 // i.e., trait Foo: Bar is equivalent to trait Foo where Self: Bar\n                 let self_param = TypeRef::Path(name![Self].into());"}, {"sha": "9c585de2ce1cbe7cf15f46ece6a6b2edfc73289b", "filename": "crates/hir_def/src/keys.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/817fbebbb5f9187994b1a09a603ba9c7b2755a06/crates%2Fhir_def%2Fsrc%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/817fbebbb5f9187994b1a09a603ba9c7b2755a06/crates%2Fhir_def%2Fsrc%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fkeys.rs?ref=817fbebbb5f9187994b1a09a603ba9c7b2755a06", "patch": "@@ -8,8 +8,8 @@ use syntax::{ast, AstNode, AstPtr};\n \n use crate::{\n     dyn_map::{DynMap, Policy},\n-    ConstId, EnumId, EnumVariantId, FieldId, FunctionId, ImplId, StaticId, StructId, TraitId,\n-    TypeAliasId, TypeParamId, UnionId,\n+    ConstId, EnumId, EnumVariantId, FieldId, FunctionId, ImplId, LifetimeParamId, StaticId,\n+    StructId, TraitId, TypeAliasId, TypeParamId, UnionId,\n };\n \n pub type Key<K, V> = crate::dyn_map::Key<InFile<K>, V, AstPtrPolicy<K, V>>;\n@@ -28,6 +28,7 @@ pub const VARIANT: Key<ast::Variant, EnumVariantId> = Key::new();\n pub const TUPLE_FIELD: Key<ast::TupleField, FieldId> = Key::new();\n pub const RECORD_FIELD: Key<ast::RecordField, FieldId> = Key::new();\n pub const TYPE_PARAM: Key<ast::TypeParam, TypeParamId> = Key::new();\n+pub const LIFETIME_PARAM: Key<ast::LifetimeParam, LifetimeParamId> = Key::new();\n \n pub const MACRO: Key<ast::MacroCall, MacroDefId> = Key::new();\n "}]}