{"sha": "d82f9123b25ac9cf1b4b634f5b60358517d8998d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4MmY5MTIzYjI1YWM5Y2YxYjRiNjM0ZjViNjAzNTg1MTdkODk5OGQ=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-04-14T12:23:02Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-04-14T12:23:02Z"}, "message": "Fallout from this change.", "tree": {"sha": "8bfd232cfc3b17f614f3aef92d6f822fe9815e9f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8bfd232cfc3b17f614f3aef92d6f822fe9815e9f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d82f9123b25ac9cf1b4b634f5b60358517d8998d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d82f9123b25ac9cf1b4b634f5b60358517d8998d", "html_url": "https://github.com/rust-lang/rust/commit/d82f9123b25ac9cf1b4b634f5b60358517d8998d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d82f9123b25ac9cf1b4b634f5b60358517d8998d/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58dc3bb57534800ae2842cd249e2aa390e00bdd0", "url": "https://api.github.com/repos/rust-lang/rust/commits/58dc3bb57534800ae2842cd249e2aa390e00bdd0", "html_url": "https://github.com/rust-lang/rust/commit/58dc3bb57534800ae2842cd249e2aa390e00bdd0"}], "stats": {"total": 274, "additions": 220, "deletions": 54}, "files": [{"sha": "5f1cd2444d3c4870ad7295fc0df47162a576e307", "filename": "src/test/compile-fail/associated-types-no-suitable-supertrait-2.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d82f9123b25ac9cf1b4b634f5b60358517d8998d/src%2Ftest%2Fcompile-fail%2Fassociated-types-no-suitable-supertrait-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d82f9123b25ac9cf1b4b634f5b60358517d8998d/src%2Ftest%2Fcompile-fail%2Fassociated-types-no-suitable-supertrait-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-no-suitable-supertrait-2.rs?ref=d82f9123b25ac9cf1b4b634f5b60358517d8998d", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that we get an error when you use `<Self as Get>::Value` in\n+// the trait definition but `Self` does not, in fact, implement `Get`.\n+//\n+// See also associated-types-no-suitable-supertrait.rs, which checks\n+// that we see the same error when making this mistake on an impl\n+// rather than the default method impl.\n+//\n+// See also run-pass/associated-types-projection-to-unrelated-trait.rs,\n+// which checks that the trait interface itself is not considered an\n+// error as long as all impls satisfy the constraint.\n+\n+trait Get : ::std::marker::MarkerTrait {\n+    type Value;\n+}\n+\n+trait Other {\n+    fn uhoh<U:Get>(&self, foo: U, bar: <Self as Get>::Value) {}\n+    //~^ ERROR the trait `Get` is not implemented for the type `Self`\n+}\n+\n+fn main() { }"}, {"sha": "24429a482057c7e71067a70137f1457f58dbf570", "filename": "src/test/compile-fail/associated-types-no-suitable-supertrait.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d82f9123b25ac9cf1b4b634f5b60358517d8998d/src%2Ftest%2Fcompile-fail%2Fassociated-types-no-suitable-supertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d82f9123b25ac9cf1b4b634f5b60358517d8998d/src%2Ftest%2Fcompile-fail%2Fassociated-types-no-suitable-supertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-no-suitable-supertrait.rs?ref=d82f9123b25ac9cf1b4b634f5b60358517d8998d", "patch": "@@ -10,20 +10,30 @@\n \n // Check that we get an error when you use `<Self as Get>::Value` in\n // the trait definition but `Self` does not, in fact, implement `Get`.\n+//\n+// See also associated-types-no-suitable-supertrait-2.rs, which checks\n+// that we see the same error if we get around to checking the default\n+// method body.\n+//\n+// See also run-pass/associated-types-projection-to-unrelated-trait.rs,\n+// which checks that the trait interface itself is not considered an\n+// error as long as all impls satisfy the constraint.\n \n trait Get : ::std::marker::MarkerTrait {\n     type Value;\n }\n \n trait Other {\n     fn uhoh<U:Get>(&self, foo: U, bar: <Self as Get>::Value) {}\n-    //~^ ERROR the trait `Get` is not implemented for the type `Self`\n+    // (note that we no longer catch the error here, since the\n+    //  error below aborts compilation.\n+    //  See also associated-types-no-suitable-supertrait-2.rs\n+    //  which checks that this error would be caught eventually.)\n }\n \n impl<T:Get> Other for T {\n     fn uhoh<U:Get>(&self, foo: U, bar: <(T, U) as Get>::Value) {}\n     //~^ ERROR the trait `Get` is not implemented for the type `(T, U)`\n-    //~| ERROR the trait `Get` is not implemented for the type `(T, U)`\n }\n \n fn main() { }"}, {"sha": "7ee671317559b5230be724bf4d50ae7e0a1df25f", "filename": "src/test/compile-fail/enum-to-float-cast-2.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d82f9123b25ac9cf1b4b634f5b60358517d8998d/src%2Ftest%2Fcompile-fail%2Fenum-to-float-cast-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d82f9123b25ac9cf1b4b634f5b60358517d8998d/src%2Ftest%2Fcompile-fail%2Fenum-to-float-cast-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fenum-to-float-cast-2.rs?ref=d82f9123b25ac9cf1b4b634f5b60358517d8998d", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Tests that enum-to-float casts are disallowed.\n+\n+enum E {\n+    L0 = -1,\n+    H0 = 1\n+}\n+\n+enum F {\n+    L1 = 1,\n+    H1 = 0xFFFFFFFFFFFFFFFF\n+}\n+\n+pub fn main() {\n+    let a = E::L0 as f32;  //~ ERROR illegal cast\n+    let c = F::H1 as f32;  //~ ERROR illegal cast\n+    assert_eq!(a, -1.0f32);\n+    assert_eq!(c, -1.0f32);\n+}"}, {"sha": "225b8702302a8a583f0da61be02adaa2cec10b71", "filename": "src/test/compile-fail/enum-to-float-cast.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d82f9123b25ac9cf1b4b634f5b60358517d8998d/src%2Ftest%2Fcompile-fail%2Fenum-to-float-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d82f9123b25ac9cf1b4b634f5b60358517d8998d/src%2Ftest%2Fcompile-fail%2Fenum-to-float-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fenum-to-float-cast.rs?ref=d82f9123b25ac9cf1b4b634f5b60358517d8998d", "patch": "@@ -24,12 +24,8 @@ static C0: f32 = E::L0 as f32; //~ ERROR illegal cast\n static C1: f32 = F::H1 as f32; //~ ERROR illegal cast\n \n pub fn main() {\n-    let a = E::L0 as f32;  //~ ERROR illegal cast\n     let b = C0;\n-    let c = F::H1 as f32;  //~ ERROR illegal cast\n     let d = C1;\n-    assert_eq!(a, -1.0f32);\n     assert_eq!(b, -1.0f32);\n-    assert_eq!(c, -1.0f32);\n     assert_eq!(d, -1.0f32);\n }"}, {"sha": "46b7b933d8796fd38ababd396a2a3a833f30827f", "filename": "src/test/compile-fail/issue-16048.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d82f9123b25ac9cf1b4b634f5b60358517d8998d/src%2Ftest%2Fcompile-fail%2Fissue-16048.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d82f9123b25ac9cf1b4b634f5b60358517d8998d/src%2Ftest%2Fcompile-fail%2Fissue-16048.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-16048.rs?ref=d82f9123b25ac9cf1b4b634f5b60358517d8998d", "patch": "@@ -29,7 +29,7 @@ impl<'a> Test<'a> for Foo<'a> {\n impl<'a> NoLifetime for Foo<'a> {\n     fn get<'p, T : Test<'a>>(&self) -> T {\n //~^ ERROR lifetime parameters or bounds on method `get` do not match the trait declaration\n-        return *self as T; //~ ERROR non-scalar cast: `Foo<'a>` as `T`\n+        return *self as T;\n     }\n }\n "}, {"sha": "0fa1a1547720927b3e91d2529cd81ec4b5e5c287", "filename": "src/test/compile-fail/issue-19244-1.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d82f9123b25ac9cf1b4b634f5b60358517d8998d/src%2Ftest%2Fcompile-fail%2Fissue-19244-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d82f9123b25ac9cf1b4b634f5b60358517d8998d/src%2Ftest%2Fcompile-fail%2Fissue-19244-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-19244-1.rs?ref=d82f9123b25ac9cf1b4b634f5b60358517d8998d", "patch": "@@ -12,7 +12,5 @@ const TUP: (usize,) = (42,);\n \n fn main() {\n     let a: [isize; TUP.1];\n-    //~^ ERROR array length constant evaluation error: tuple index out of bounds\n-    //~| ERROR attempted out-of-bounds tuple index\n-    //~| ERROR attempted out-of-bounds tuple index\n+    //~^ ERROR attempted out-of-bounds tuple index\n }"}, {"sha": "7d7d7d7c8ce4d0985e406ec8a307e0939e8a617f", "filename": "src/test/compile-fail/issue-19244-2.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d82f9123b25ac9cf1b4b634f5b60358517d8998d/src%2Ftest%2Fcompile-fail%2Fissue-19244-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d82f9123b25ac9cf1b4b634f5b60358517d8998d/src%2Ftest%2Fcompile-fail%2Fissue-19244-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-19244-2.rs?ref=d82f9123b25ac9cf1b4b634f5b60358517d8998d", "patch": "@@ -13,7 +13,5 @@ const STRUCT: MyStruct = MyStruct { field: 42 };\n \n fn main() {\n     let a: [isize; STRUCT.nonexistent_field];\n-    //~^ ERROR array length constant evaluation error: nonexistent struct field\n-    //~| ERROR attempted access of field `nonexistent_field`\n-    //~| ERROR attempted access of field `nonexistent_field`\n+    //~^ ERROR attempted access of field `nonexistent_field`\n }"}, {"sha": "9e63cc203f4d5951a024d3cfe350d1f7f26bb9de", "filename": "src/test/compile-fail/issue-2063.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d82f9123b25ac9cf1b4b634f5b60358517d8998d/src%2Ftest%2Fcompile-fail%2Fissue-2063.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d82f9123b25ac9cf1b4b634f5b60358517d8998d/src%2Ftest%2Fcompile-fail%2Fissue-2063.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2063.rs?ref=d82f9123b25ac9cf1b4b634f5b60358517d8998d", "patch": "@@ -28,7 +28,10 @@ impl to_str_2 for t {\n }\n \n fn new_t(x: t) {\n-    x.my_to_string(); //~ ERROR does not implement\n+    x.my_to_string();\n+    // (there used to be an error emitted right here as well. It was\n+    // spurious, at best; if `t` did exist as a type, it clearly would\n+    // have an impl of the `to_str_2` trait.)\n }\n \n fn main() {"}, {"sha": "b5401f7d124e24e1d2c29aea4a44fdeef9dd386d", "filename": "src/test/compile-fail/non-constant-expr-for-fixed-len-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d82f9123b25ac9cf1b4b634f5b60358517d8998d/src%2Ftest%2Fcompile-fail%2Fnon-constant-expr-for-fixed-len-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d82f9123b25ac9cf1b4b634f5b60358517d8998d/src%2Ftest%2Fcompile-fail%2Fnon-constant-expr-for-fixed-len-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-constant-expr-for-fixed-len-vec.rs?ref=d82f9123b25ac9cf1b4b634f5b60358517d8998d", "patch": "@@ -12,8 +12,8 @@\n \n fn main() {\n     fn bar(n: isize) {\n+        // FIXME (#24414): This error message needs improvement.\n         let _x: [isize; n];\n         //~^ ERROR no type for local variable\n-        //~| ERROR array length constant evaluation error: non-constant path in constant expr\n     }\n }"}, {"sha": "83e73b6bc3ef47d08f894c654dc4207c0e95af9b", "filename": "src/test/compile-fail/struct-base-wrong-type-2.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d82f9123b25ac9cf1b4b634f5b60358517d8998d/src%2Ftest%2Fcompile-fail%2Fstruct-base-wrong-type-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d82f9123b25ac9cf1b4b634f5b60358517d8998d/src%2Ftest%2Fcompile-fail%2Fstruct-base-wrong-type-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-base-wrong-type-2.rs?ref=d82f9123b25ac9cf1b4b634f5b60358517d8998d", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that `base` in `Fru { field: expr, ..base }` must have right type.\n+//\n+// See also struct-base-wrong-type.rs, which tests same condition\n+// within a const expression.\n+\n+struct Foo { a: isize, b: isize }\n+struct Bar { x: isize }\n+\n+fn main() {\n+    let b = Bar { x: 5 };\n+    let f = Foo { a: 2, ..b }; //~  ERROR mismatched types\n+                               //~| expected `Foo`\n+                               //~| found `Bar`\n+                               //~| expected struct `Foo`\n+                               //~| found struct `Bar`\n+    let f__isize = Foo { a: 2, ..4 }; //~  ERROR mismatched types\n+                                 //~| expected `Foo`\n+                                 //~| found `_`\n+                                 //~| expected struct `Foo`\n+                                 //~| found integral variable\n+}"}, {"sha": "c98131560d486f3124b60084ce5c15717e78c6dc", "filename": "src/test/compile-fail/struct-base-wrong-type.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d82f9123b25ac9cf1b4b634f5b60358517d8998d/src%2Ftest%2Fcompile-fail%2Fstruct-base-wrong-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d82f9123b25ac9cf1b4b634f5b60358517d8998d/src%2Ftest%2Fcompile-fail%2Fstruct-base-wrong-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-base-wrong-type.rs?ref=d82f9123b25ac9cf1b4b634f5b60358517d8998d", "patch": "@@ -8,6 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// Check that `base` in `Fru { field: expr, ..base }` must have right type.\n+//\n+// See also struct-base-wrong-type-2.rs, which tests same condition\n+// within a function body.\n+\n struct Foo { a: isize, b: isize }\n struct Bar { x: isize }\n \n@@ -25,14 +30,10 @@ static foo_i: Foo = Foo { a: 2, ..4 }; //~  ERROR mismatched types\n \n fn main() {\n     let b = Bar { x: 5 };\n-    let f = Foo { a: 2, ..b }; //~  ERROR mismatched types\n-                               //~| expected `Foo`\n-                               //~| found `Bar`\n-                               //~| expected struct `Foo`\n-                               //~| found struct `Bar`\n-    let f__isize = Foo { a: 2, ..4 }; //~  ERROR mismatched types\n-                                 //~| expected `Foo`\n-                                 //~| found `_`\n-                                 //~| expected struct `Foo`\n-                                 //~| found integral variable\n+    // errors below are no longer caught since error above causes\n+    // compilation to abort before we bother checking function bodies.\n+    // See also struct-base-wrong-type-2.rs, which checks that we\n+    // would catch these errors eventually.\n+    let f = Foo { a: 2, ..b };\n+    let f__isize = Foo { a: 2, ..4 };\n }"}, {"sha": "94055450bc6bb7854f743eb77e0387a49cb1b136", "filename": "src/test/compile-fail/variadic-ffi-3.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/d82f9123b25ac9cf1b4b634f5b60358517d8998d/src%2Ftest%2Fcompile-fail%2Fvariadic-ffi-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d82f9123b25ac9cf1b4b634f5b60358517d8998d/src%2Ftest%2Fcompile-fail%2Fvariadic-ffi-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvariadic-ffi-3.rs?ref=d82f9123b25ac9cf1b4b634f5b60358517d8998d", "patch": "@@ -0,0 +1,43 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern {\n+    fn foo(f: isize, x: u8, ...);\n+}\n+\n+extern \"C\" fn bar(f: isize, x: u8) {}\n+\n+fn main() {\n+    unsafe {\n+        foo(); //~ ERROR: this function takes at least 2 parameters but 0 parameters were supplied\n+        foo(1); //~ ERROR: this function takes at least 2 parameters but 1 parameter was supplied\n+\n+        let x: unsafe extern \"C\" fn(f: isize, x: u8) = foo;\n+        //~^ ERROR: mismatched types\n+        //~| expected `unsafe extern \"C\" fn(isize, u8)`\n+        //~| found `unsafe extern \"C\" fn(isize, u8, ...)`\n+        //~| expected non-variadic fn\n+        //~| found variadic function\n+\n+        let y: extern \"C\" fn(f: isize, x: u8, ...) = bar;\n+        //~^ ERROR: mismatched types\n+        //~| expected `extern \"C\" fn(isize, u8, ...)`\n+        //~| found `extern \"C\" fn(isize, u8) {bar}`\n+        //~| expected variadic fn\n+        //~| found non-variadic function\n+\n+        foo(1, 2, 3f32); //~ ERROR: can't pass an f32 to variadic function, cast to c_double\n+        foo(1, 2, true); //~ ERROR: can't pass bool to variadic function, cast to c_int\n+        foo(1, 2, 1i8); //~ ERROR: can't pass i8 to variadic function, cast to c_int\n+        foo(1, 2, 1u8); //~ ERROR: can't pass u8 to variadic function, cast to c_uint\n+        foo(1, 2, 1i16); //~ ERROR: can't pass i16 to variadic function, cast to c_int\n+        foo(1, 2, 1u16); //~ ERROR: can't pass u16 to variadic function, cast to c_uint\n+    }\n+}"}, {"sha": "129421784930b47feabb627757903dd83123bb3b", "filename": "src/test/compile-fail/variadic-ffi.rs", "status": "modified", "additions": 10, "deletions": 19, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d82f9123b25ac9cf1b4b634f5b60358517d8998d/src%2Ftest%2Fcompile-fail%2Fvariadic-ffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d82f9123b25ac9cf1b4b634f5b60358517d8998d/src%2Ftest%2Fcompile-fail%2Fvariadic-ffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvariadic-ffi.rs?ref=d82f9123b25ac9cf1b4b634f5b60358517d8998d", "patch": "@@ -19,29 +19,20 @@ extern {\n extern \"C\" fn bar(f: isize, x: u8) {}\n \n fn main() {\n+    // errors below are no longer checked because error above aborts\n+    // compilation; see variadic-ffi-3.rs for corresponding test.\n     unsafe {\n-        foo(); //~ ERROR: this function takes at least 2 parameters but 0 parameters were supplied\n-        foo(1); //~ ERROR: this function takes at least 2 parameters but 1 parameter was supplied\n+        foo();\n+        foo(1);\n \n         let x: unsafe extern \"C\" fn(f: isize, x: u8) = foo;\n-        //~^ ERROR: mismatched types\n-        //~| expected `unsafe extern \"C\" fn(isize, u8)`\n-        //~| found `unsafe extern \"C\" fn(isize, u8, ...)`\n-        //~| expected non-variadic fn\n-        //~| found variadic function\n-\n         let y: extern \"C\" fn(f: isize, x: u8, ...) = bar;\n-        //~^ ERROR: mismatched types\n-        //~| expected `extern \"C\" fn(isize, u8, ...)`\n-        //~| found `extern \"C\" fn(isize, u8) {bar}`\n-        //~| expected variadic fn\n-        //~| found non-variadic function\n \n-        foo(1, 2, 3f32); //~ ERROR: can't pass an f32 to variadic function, cast to c_double\n-        foo(1, 2, true); //~ ERROR: can't pass bool to variadic function, cast to c_int\n-        foo(1, 2, 1i8); //~ ERROR: can't pass i8 to variadic function, cast to c_int\n-        foo(1, 2, 1u8); //~ ERROR: can't pass u8 to variadic function, cast to c_uint\n-        foo(1, 2, 1i16); //~ ERROR: can't pass i16 to variadic function, cast to c_int\n-        foo(1, 2, 1u16); //~ ERROR: can't pass u16 to variadic function, cast to c_uint\n+        foo(1, 2, 3f32);\n+        foo(1, 2, true);\n+        foo(1, 2, 1i8);\n+        foo(1, 2, 1u8);\n+        foo(1, 2, 1i16);\n+        foo(1, 2, 1u16);\n     }\n }"}, {"sha": "069fd2dec990ffdd0025fe5383644af0a64a49bf", "filename": "src/test/compile-fail/wrong-mul-method-signature.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d82f9123b25ac9cf1b4b634f5b60358517d8998d/src%2Ftest%2Fcompile-fail%2Fwrong-mul-method-signature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d82f9123b25ac9cf1b4b634f5b60358517d8998d/src%2Ftest%2Fcompile-fail%2Fwrong-mul-method-signature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwrong-mul-method-signature.rs?ref=d82f9123b25ac9cf1b4b634f5b60358517d8998d", "patch": "@@ -71,16 +71,9 @@ pub fn main() {\n     let x: Vec1 = Vec1 { x: 1.0 } * 2.0; // this is OK\n \n     let x: Vec2 = Vec2 { x: 1.0, y: 2.0 } * 2.0; // trait had reversed order\n-    //~^ ERROR mismatched types\n-    //~| expected `Vec2`\n-    //~| found `_`\n-    //~| expected struct `Vec2`\n-    //~| found floating-point variable\n-    //~| ERROR mismatched types\n-    //~| expected `Vec2`\n-    //~| found `f64`\n-    //~| expected struct `Vec2`\n-    //~| found f64\n+    // (we no longer signal a compile error here, since the\n+    //  error in the trait signature will cause compilation to\n+    //  abort before we bother looking at function bodies.)\n \n     let x: i32 = Vec3 { x: 1.0, y: 2.0, z: 3.0 } * 2.0;\n }"}, {"sha": "6070cff9a29524eb2ca3db8cc276a4e0e86dcbfa", "filename": "src/test/run-pass/associated-types-projection-to-unrelated-trait.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/d82f9123b25ac9cf1b4b634f5b60358517d8998d/src%2Ftest%2Frun-pass%2Fassociated-types-projection-to-unrelated-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d82f9123b25ac9cf1b4b634f5b60358517d8998d/src%2Ftest%2Frun-pass%2Fassociated-types-projection-to-unrelated-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-projection-to-unrelated-trait.rs?ref=d82f9123b25ac9cf1b4b634f5b60358517d8998d", "patch": "@@ -0,0 +1,43 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that we do not get an error when you use `<Self as Get>::Value` in\n+// the trait definition if there is no default method and for every impl,\n+// `Self` does implement `Get`.\n+//\n+// See also compile-fail tests associated-types-no-suitable-supertrait\n+// and associated-types-no-suitable-supertrait-2, which show how small\n+// variants of the code below can fail.\n+\n+trait Get {\n+    type Value;\n+}\n+\n+trait Other {\n+    fn okay<U:Get>(&self, foo: U, bar: <Self as Get>::Value);\n+}\n+\n+impl Get for () {\n+    type Value = f32;\n+}\n+\n+impl Get for f64 {\n+    type Value = u32;\n+}\n+\n+impl Other for () {\n+    fn okay<U:Get>(&self, _foo: U, _bar: <Self as Get>::Value) { }\n+}\n+\n+impl Other for f64 {\n+    fn okay<U:Get>(&self, _foo: U, _bar: <Self as Get>::Value) { }\n+}\n+\n+fn main() { }"}]}