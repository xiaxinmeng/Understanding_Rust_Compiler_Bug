{"sha": "b166ad0b1ebd65db9241da72e08308f87ce6e50f", "node_id": "C_kwDOAAsO6NoAKGIxNjZhZDBiMWViZDY1ZGI5MjQxZGE3MmUwODMwOGY4N2NlNmU1MGY", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2022-10-14T01:24:58Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2022-10-31T16:32:57Z"}, "message": "Rewrite implementation of `#[alloc_error_handler]`\n\nThe new implementation doesn't use weak lang items and instead changes\n`#[alloc_error_handler]` to an attribute macro just like\n`#[global_allocator]`.\n\nThe attribute will generate the `__rg_oom` function which is called by\nthe compiler-generated `__rust_alloc_error_handler`. If no `__rg_oom`\nfunction is defined in any crate then the compiler shim will call\n`__rdl_oom` in the alloc crate which will simply panic.\n\nThis also fixes link errors with `-C link-dead-code` with\n`default_alloc_error_handler`: `__rg_oom` was previously defined in the\nalloc crate and would attempt to reference the `oom` lang item, even if\nit didn't exist. This worked as long as `__rg_oom` was excluded from\nlinking since it was not called.\n\nThis is a prerequisite for the stabilization of\n`default_alloc_error_handler` (#102318).", "tree": {"sha": "6e7ba5c04cb90873e599d30825f1e7702b99ba42", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e7ba5c04cb90873e599d30825f1e7702b99ba42"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b166ad0b1ebd65db9241da72e08308f87ce6e50f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b166ad0b1ebd65db9241da72e08308f87ce6e50f", "html_url": "https://github.com/rust-lang/rust/commit/b166ad0b1ebd65db9241da72e08308f87ce6e50f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b166ad0b1ebd65db9241da72e08308f87ce6e50f/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33a92bc8b0d4b1d7a424e53d12244370959a2293", "url": "https://api.github.com/repos/rust-lang/rust/commits/33a92bc8b0d4b1d7a424e53d12244370959a2293", "html_url": "https://github.com/rust-lang/rust/commit/33a92bc8b0d4b1d7a424e53d12244370959a2293"}], "stats": {"total": 9, "additions": 5, "deletions": 4}, "files": [{"sha": "12bb00d346db42c42c88adfad2d5939df371c1f6", "filename": "src/allocator.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b166ad0b1ebd65db9241da72e08308f87ce6e50f/src%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b166ad0b1ebd65db9241da72e08308f87ce6e50f/src%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fallocator.rs?ref=b166ad0b1ebd65db9241da72e08308f87ce6e50f", "patch": "@@ -5,6 +5,7 @@ use crate::prelude::*;\n \n use rustc_ast::expand::allocator::{AllocatorKind, AllocatorTy, ALLOCATOR_METHODS};\n use rustc_session::config::OomStrategy;\n+use rustc_span::symbol::sym;\n \n /// Returns whether an allocator shim was created\n pub(crate) fn codegen(\n@@ -23,7 +24,7 @@ pub(crate) fn codegen(\n             module,\n             unwind_context,\n             kind,\n-            tcx.lang_items().oom().is_some(),\n+            tcx.alloc_error_handler_kind(()).unwrap(),\n             tcx.sess.opts.unstable_opts.oom,\n         );\n         true\n@@ -36,7 +37,7 @@ fn codegen_inner(\n     module: &mut impl Module,\n     unwind_context: &mut UnwindContext,\n     kind: AllocatorKind,\n-    has_alloc_error_handler: bool,\n+    alloc_error_handler_kind: AllocatorKind,\n     oom_strategy: OomStrategy,\n ) {\n     let usize_ty = module.target_config().pointer_type();\n@@ -108,12 +109,12 @@ fn codegen_inner(\n         returns: vec![],\n     };\n \n-    let callee_name = if has_alloc_error_handler { \"__rg_oom\" } else { \"__rdl_oom\" };\n+    let callee_name = alloc_error_handler_kind.fn_name(sym::oom);\n \n     let func_id =\n         module.declare_function(\"__rust_alloc_error_handler\", Linkage::Export, &sig).unwrap();\n \n-    let callee_func_id = module.declare_function(callee_name, Linkage::Import, &sig).unwrap();\n+    let callee_func_id = module.declare_function(&callee_name, Linkage::Import, &sig).unwrap();\n \n     let mut ctx = Context::new();\n     ctx.func.signature = sig;"}]}