{"sha": "3e2006a57088a0b6e1b40fe22df88955d1ef9ec7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlMjAwNmE1NzA4OGEwYjZlMWI0MGZlMjJkZjg4OTU1ZDFlZjllYzc=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-06-16T22:34:15Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-06-16T22:34:15Z"}, "message": "Revert \"Adding a lock/condition variable to libcore.\"\n\nThis reverts commit e394ebda37bf6bbe4c516e2b9381aac8bd964dcc.", "tree": {"sha": "d3617239416d3b8350833e1a56cdb48498968563", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3617239416d3b8350833e1a56cdb48498968563"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e2006a57088a0b6e1b40fe22df88955d1ef9ec7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e2006a57088a0b6e1b40fe22df88955d1ef9ec7", "html_url": "https://github.com/rust-lang/rust/commit/3e2006a57088a0b6e1b40fe22df88955d1ef9ec7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e2006a57088a0b6e1b40fe22df88955d1ef9ec7/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3c6e5e5b67283db4e3170c569a56b2a12c7d945", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3c6e5e5b67283db4e3170c569a56b2a12c7d945", "html_url": "https://github.com/rust-lang/rust/commit/e3c6e5e5b67283db4e3170c569a56b2a12c7d945"}], "stats": {"total": 155, "additions": 0, "deletions": 155}, "files": [{"sha": "02fcdc0def60992e03aaa470c84de611d08a4422", "filename": "mk/rt.mk", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3e2006a57088a0b6e1b40fe22df88955d1ef9ec7/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3e2006a57088a0b6e1b40fe22df88955d1ef9ec7/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=3e2006a57088a0b6e1b40fe22df88955d1ef9ec7", "patch": "@@ -70,7 +70,6 @@ RUNTIME_CS_$(1) := \\\n               rt/rust_cc.cpp \\\n               rt/rust_debug.cpp \\\n               rt/rust_box_annihilator.cpp \\\n-              rt/rust_cond_lock.cpp \\\n               rt/memory_region.cpp \\\n               rt/boxed_region.cpp \\\n               rt/arch/$$(HOST_$(1))/context.cpp \\"}, {"sha": "e0fd21f6c4a1d9a40ea2f6bec51c4ba1728d3246", "filename": "src/libcore/sys.rs", "status": "modified", "additions": 0, "deletions": 72, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/3e2006a57088a0b6e1b40fe22df88955d1ef9ec7/src%2Flibcore%2Fsys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e2006a57088a0b6e1b40fe22df88955d1ef9ec7/src%2Flibcore%2Fsys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsys.rs?ref=3e2006a57088a0b6e1b40fe22df88955d1ef9ec7", "patch": "@@ -7,7 +7,6 @@ export min_align_of;\n export pref_align_of;\n export refcount;\n export log_str;\n-export lock_and_signal, condition, methods;\n \n enum type_desc = {\n     first_param: **libc::c_int,\n@@ -16,20 +15,11 @@ enum type_desc = {\n     // Remaining fields not listed\n };\n \n-type rust_cond_lock = *libc::c_void;\n-\n #[abi = \"cdecl\"]\n native mod rustrt {\n     pure fn refcount(t: *()) -> libc::intptr_t;\n     fn unsupervise();\n     pure fn shape_log_str(t: *sys::type_desc, data: *()) -> str;\n-\n-    fn rust_create_cond_lock() -> rust_cond_lock;\n-    fn rust_destroy_cond_lock(lock: rust_cond_lock);\n-    fn rust_lock_cond_lock(lock: rust_cond_lock);\n-    fn rust_unlock_cond_lock(lock: rust_cond_lock);\n-    fn rust_wait_cond_lock(lock: rust_cond_lock);\n-    fn rust_signal_cond_lock(lock: rust_cond_lock) -> bool;\n }\n \n #[abi = \"rust-intrinsic\"]\n@@ -84,50 +74,8 @@ pure fn log_str<T>(t: T) -> str {\n     }\n }\n \n-resource lock_and_signal(lock: rust_cond_lock) {\n-    rustrt::rust_destroy_cond_lock(lock);\n-}\n-\n-enum condition {\n-    condition_(rust_cond_lock)\n-}\n-\n-resource unlock(lock: rust_cond_lock) {\n-    rustrt::rust_unlock_cond_lock(lock);\n-}\n-\n-fn create_lock() -> lock_and_signal {\n-    lock_and_signal(rustrt::rust_create_cond_lock())\n-}\n-\n-impl methods for lock_and_signal {\n-    fn lock<T>(f: fn() -> T) -> T {\n-        rustrt::rust_lock_cond_lock(*self);\n-        let _r = unlock(*self);\n-        f()\n-    }\n-\n-    fn lock_cond<T>(f: fn(condition) -> T) -> T {\n-        rustrt::rust_lock_cond_lock(*self);\n-        let _r = unlock(*self);\n-        f(condition_(*self))\n-    }\n-}\n-\n-impl methods for condition {\n-    fn wait() {\n-        rustrt::rust_wait_cond_lock(*self);\n-    }\n-\n-    fn signal() -> bool {\n-        rustrt::rust_signal_cond_lock(*self)\n-    }\n-}\n-\n #[cfg(test)]\n mod tests {\n-    use std;\n-    import std::arc;\n \n     #[test]\n     fn size_of_basic() {\n@@ -173,26 +121,6 @@ mod tests {\n         assert pref_align_of::<uint>() == 8u;\n         assert pref_align_of::<*uint>() == 8u;\n     }\n-\n-    #[test]\n-    fn condition_variable() {\n-        let lock = arc::arc(create_lock());\n-        let lock2 = arc::clone(&lock);\n-\n-        task::spawn {|move lock2|\n-            let lock = arc::get(&lock2);\n-            (*lock).lock_cond {|c|\n-                c.wait();\n-            }\n-        }\n-\n-        let mut signaled = false;\n-        while !signaled {\n-            (*arc::get(&lock)).lock_cond {|c|\n-                signaled = c.signal()\n-            }\n-        }\n-    }\n }\n \n // Local Variables:"}, {"sha": "2a65012b52a682f8c4c7ec7bcde181e5b6c0b23b", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/3e2006a57088a0b6e1b40fe22df88955d1ef9ec7/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/3e2006a57088a0b6e1b40fe22df88955d1ef9ec7/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=3e2006a57088a0b6e1b40fe22df88955d1ef9ec7", "patch": "@@ -7,7 +7,6 @@\n #include \"sync/timer.h\"\n #include \"rust_abi.h\"\n #include \"rust_port.h\"\n-#include \"rust_cond_lock.h\"\n \n #include <time.h>\n \n@@ -863,60 +862,6 @@ rust_task_allow_kill() {\n     task->allow_kill();\n }\n \n-extern \"C\" rust_cond_lock*\n-rust_create_cond_lock() {\n-    return new rust_cond_lock();\n-}\n-\n-extern \"C\" void\n-rust_destroy_cond_lock(rust_cond_lock *lock) {\n-    delete lock;\n-}\n-\n-extern \"C\" void\n-rust_lock_cond_lock(rust_cond_lock *lock) {\n-    lock->lock.lock();\n-}\n-\n-extern \"C\" void\n-rust_unlock_cond_lock(rust_cond_lock *lock) {\n-    lock->lock.unlock();\n-}\n-\n-// The next two functions do not use the built in condition variable features\n-// because the Rust schedule is not aware of them, and they can block the\n-// scheduler thread.\n-\n-extern \"C\" void\n-rust_wait_cond_lock(rust_cond_lock *lock) {\n-    rust_task *task = rust_get_current_task();\n-#ifdef DEBUG_LOCKS\n-    assert(lock->lock.lock_held_by_current_thread());\n-#endif\n-    assert(NULL == lock->waiting);\n-    lock->waiting = task;\n-    lock->lock.unlock();\n-    task->block(lock, \"waiting for signal\");\n-    lock->lock.lock();\n-    lock->waiting = NULL;\n-}\n-\n-extern \"C\" bool\n-rust_signal_cond_lock(rust_cond_lock *lock) {\n-#ifdef DEBUG_LOCKS\n-    assert(lock->lock.lock_held_by_current_thread());\n-#endif\n-    if(NULL == lock->waiting) {\n-        return false;\n-    }\n-    else {\n-        lock->waiting->wakeup(lock);\n-        return true;\n-    }\n-}\n-\n-\n-\n //\n // Local Variables:\n // mode: C++"}, {"sha": "cdeccfdc26ca59e1a316a6f2f4e7e046a4c625c2", "filename": "src/rt/rust_cond_lock.cpp", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e3c6e5e5b67283db4e3170c569a56b2a12c7d945/src%2Frt%2Frust_cond_lock.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/e3c6e5e5b67283db4e3170c569a56b2a12c7d945/src%2Frt%2Frust_cond_lock.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_cond_lock.cpp?ref=e3c6e5e5b67283db4e3170c569a56b2a12c7d945", "patch": "@@ -1,6 +0,0 @@\n-#include \"rust_cond_lock.h\"\n-\n-rust_cond_lock::rust_cond_lock()\n-    : waiting(NULL)\n-{\n-}"}, {"sha": "0adafd59678ec349cb4c3c851097d5c22822f4be", "filename": "src/rt/rust_cond_lock.h", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e3c6e5e5b67283db4e3170c569a56b2a12c7d945/src%2Frt%2Frust_cond_lock.h", "raw_url": "https://github.com/rust-lang/rust/raw/e3c6e5e5b67283db4e3170c569a56b2a12c7d945/src%2Frt%2Frust_cond_lock.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_cond_lock.h?ref=e3c6e5e5b67283db4e3170c569a56b2a12c7d945", "patch": "@@ -1,15 +0,0 @@\n-// -*- c++ -*-\n-// A lock and condition variable pair that is useable from Rust.\n-\n-#pragma once\n-\n-#include \"sync/lock_and_signal.h\"\n-#include \"rust_globals.h\"\n-#include \"rust_task.h\"\n-\n-struct rust_cond_lock : public rust_cond {\n-    rust_cond_lock();\n-\n-    lock_and_signal lock;\n-    rust_task *waiting;\n-};"}, {"sha": "7977c42cfa4805d2236d91ade511fdd66a503dd6", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3e2006a57088a0b6e1b40fe22df88955d1ef9ec7/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/3e2006a57088a0b6e1b40fe22df88955d1ef9ec7/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=3e2006a57088a0b6e1b40fe22df88955d1ef9ec7", "patch": "@@ -163,9 +163,3 @@ rust_port_drop\n rust_port_task\n rust_task_inhibit_kill\n rust_task_allow_kill\n-rust_create_cond_lock\n-rust_destroy_cond_lock\n-rust_lock_cond_lock\n-rust_unlock_cond_lock\n-rust_wait_cond_lock\n-rust_signal_cond_lock"}]}