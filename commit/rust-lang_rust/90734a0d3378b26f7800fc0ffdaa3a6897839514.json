{"sha": "90734a0d3378b26f7800fc0ffdaa3a6897839514", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwNzM0YTBkMzM3OGIyNmY3ODAwZmMwZmZkYWEzYTY4OTc4Mzk1MTQ=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-01-24T18:33:20Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-01-25T00:24:31Z"}, "message": "Convert extfmt::rt::Conv into a struct", "tree": {"sha": "c2d7f19686e25503cccae8438b1f70b0be2c972f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2d7f19686e25503cccae8438b1f70b0be2c972f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90734a0d3378b26f7800fc0ffdaa3a6897839514", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90734a0d3378b26f7800fc0ffdaa3a6897839514", "html_url": "https://github.com/rust-lang/rust/commit/90734a0d3378b26f7800fc0ffdaa3a6897839514", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90734a0d3378b26f7800fc0ffdaa3a6897839514/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79a9b23f4a6397398c915e092d70989041dfef28", "url": "https://api.github.com/repos/rust-lang/rust/commits/79a9b23f4a6397398c915e092d70989041dfef28", "html_url": "https://github.com/rust-lang/rust/commit/79a9b23f4a6397398c915e092d70989041dfef28"}], "stats": {"total": 65, "additions": 50, "deletions": 15}, "files": [{"sha": "854f99be1e2d1b0d568ee7fef5aef083dcae8e19", "filename": "src/libcore/extfmt.rs", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/90734a0d3378b26f7800fc0ffdaa3a6897839514/src%2Flibcore%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90734a0d3378b26f7800fc0ffdaa3a6897839514/src%2Flibcore%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fextfmt.rs?ref=90734a0d3378b26f7800fc0ffdaa3a6897839514", "patch": "@@ -376,13 +376,23 @@ pub mod ct {\n     fn test_parse_fmt_string() {\n         assert parse_fmt_string(\"foo %s bar\", die) == ~[\n             PieceString(~\"foo \"),\n-            PieceConv(Conv {param: None, flags: ~[], width: CountImplied,\n-                            precision: CountImplied, ty: TyStr}),\n+            PieceConv(Conv {\n+                param: None,\n+                flags: ~[],\n+                width: CountImplied,\n+                precision: CountImplied,\n+                ty: TyStr,\n+            }),\n             PieceString(~\" bar\")];\n \n         assert parse_fmt_string(\"%s\", die) == ~[\n-            PieceConv(Conv {param: None, flags: ~[], width: CountImplied,\n-                            precision: CountImplied, ty: TyStr })];\n+            PieceConv(Conv {\n+                param: None,\n+                flags: ~[],\n+                width: CountImplied,\n+                precision: CountImplied,\n+                ty: TyStr,\n+            })];\n \n         assert parse_fmt_string(\"%%%%\", die) == ~[\n             PieceString(~\"%\"), PieceString(~\"%\")];\n@@ -486,8 +496,19 @@ pub mod rt {\n \n     pub enum Ty { TyDefault, TyBits, TyHexUpper, TyHexLower, TyOctal, }\n \n+    #[cfg(stage0)]\n     pub type Conv = {flags: u32, width: Count, precision: Count, ty: Ty};\n \n+    #[cfg(stage1)]\n+    #[cfg(stage2)]\n+    #[cfg(stage3)]\n+    pub struct Conv {\n+        flags: u32,\n+        width: Count,\n+        precision: Count,\n+        ty: Ty,\n+    }\n+\n     pub pure fn conv_int(cv: Conv, i: int) -> ~str {\n         let radix = 10;\n         let prec = get_int_precision(cv);"}, {"sha": "5a8a1d8753dee8d2e16e5193943d25864b805dfc", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/90734a0d3378b26f7800fc0ffdaa3a6897839514/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90734a0d3378b26f7800fc0ffdaa3a6897839514/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=90734a0d3378b26f7800fc0ffdaa3a6897839514", "patch": "@@ -172,6 +172,15 @@ fn mk_struct_e(cx: ext_ctxt, sp: span,\n                              mk_fields(sp, fields),\n                                     option::None::<@ast::expr>))\n }\n+fn mk_global_struct_e(cx: ext_ctxt, sp: span,\n+               ctor_path: ~[ast::ident],\n+               fields: ~[{ident: ast::ident, ex: @ast::expr}]) ->\n+    @ast::expr {\n+    mk_expr(cx, sp,\n+            ast::expr_struct(mk_raw_path_global(sp, ctor_path),\n+                             mk_fields(sp, fields),\n+                                    option::None::<@ast::expr>))\n+}\n fn mk_glob_use(cx: ext_ctxt, sp: span,\n                path: ~[ast::ident]) -> @ast::view_item {\n     let glob = @ast::spanned {"}, {"sha": "65890351e39fbbd3c442c965ead62a18131c57f5", "filename": "src/libsyntax/ext/fmt.rs", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/90734a0d3378b26f7800fc0ffdaa3a6897839514/src%2Flibsyntax%2Fext%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90734a0d3378b26f7800fc0ffdaa3a6897839514/src%2Flibsyntax%2Fext%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ffmt.rs?ref=90734a0d3378b26f7800fc0ffdaa3a6897839514", "patch": "@@ -56,8 +56,8 @@ fn expand_syntax_ext(cx: ext_ctxt, sp: span, tts: ~[ast::token_tree])\n fn pieces_to_expr(cx: ext_ctxt, sp: span,\n                   pieces: ~[Piece], args: ~[@ast::expr])\n    -> @ast::expr {\n-    fn make_path_vec(_cx: ext_ctxt, ident: @~str) -> ~[ast::ident] {\n-        let intr = _cx.parse_sess().interner;\n+    fn make_path_vec(cx: ext_ctxt, ident: @~str) -> ~[ast::ident] {\n+        let intr = cx.parse_sess().interner;\n         return ~[intr.intern(@~\"extfmt\"), intr.intern(@~\"rt\"),\n                  intr.intern(ident)];\n     }\n@@ -111,23 +111,28 @@ fn pieces_to_expr(cx: ext_ctxt, sp: span,\n             }\n             return make_rt_path_expr(cx, sp, @rt_type);\n         }\n-        fn make_conv_rec(cx: ext_ctxt, sp: span, flags_expr: @ast::expr,\n+        fn make_conv_struct(cx: ext_ctxt, sp: span, flags_expr: @ast::expr,\n                          width_expr: @ast::expr, precision_expr: @ast::expr,\n                          ty_expr: @ast::expr) -> @ast::expr {\n             let intr = cx.parse_sess().interner;\n-            return mk_rec_e(cx, sp,\n-                         ~[{ident: intr.intern(@~\"flags\"), ex: flags_expr},\n-                           {ident: intr.intern(@~\"width\"), ex: width_expr},\n-                           {ident: intr.intern(@~\"precision\"),\n-                            ex: precision_expr},\n-                           {ident: intr.intern(@~\"ty\"), ex: ty_expr}]);\n+            mk_global_struct_e(\n+                cx,\n+                sp,\n+                make_path_vec(cx, @~\"Conv\"),\n+                ~[\n+                    {ident: intr.intern(@~\"flags\"), ex: flags_expr},\n+                    {ident: intr.intern(@~\"width\"), ex: width_expr},\n+                    {ident: intr.intern(@~\"precision\"), ex: precision_expr},\n+                    {ident: intr.intern(@~\"ty\"), ex: ty_expr},\n+                ]\n+            )\n         }\n         let rt_conv_flags = make_flags(cx, sp, cnv.flags);\n         let rt_conv_width = make_count(cx, sp, cnv.width);\n         let rt_conv_precision = make_count(cx, sp, cnv.precision);\n         let rt_conv_ty = make_ty(cx, sp, cnv.ty);\n-        return make_conv_rec(cx, sp, rt_conv_flags, rt_conv_width,\n-                          rt_conv_precision, rt_conv_ty);\n+        make_conv_struct(cx, sp, rt_conv_flags, rt_conv_width,\n+                         rt_conv_precision, rt_conv_ty)\n     }\n     fn make_conv_call(cx: ext_ctxt, sp: span, conv_type: ~str, cnv: Conv,\n                       arg: @ast::expr) -> @ast::expr {"}]}