{"sha": "72252646a8f781509e6756180182887653f657ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyMjUyNjQ2YThmNzgxNTA5ZTY3NTYxODAxODI4ODc2NTNmNjU3ZWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-20T07:53:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-20T07:53:23Z"}, "message": "Auto merge of #64498 - estebank:point-at-arg, r=Centril\n\nWhen possible point at argument causing item obligation failure\n\nFix https://github.com/rust-lang/rust/issues/41781, fix https://github.com/rust-lang/rust/issues/42855, fix https://github.com/rust-lang/rust/issues/46658, fix https://github.com/rust-lang/rust/issues/48099, fix https://github.com/rust-lang/rust/issues/63143.", "tree": {"sha": "1c86688adb29a70dc9c52c5b427bc7a1c06cd812", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c86688adb29a70dc9c52c5b427bc7a1c06cd812"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72252646a8f781509e6756180182887653f657ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72252646a8f781509e6756180182887653f657ee", "html_url": "https://github.com/rust-lang/rust/commit/72252646a8f781509e6756180182887653f657ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72252646a8f781509e6756180182887653f657ee/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea3ba36f3f4b7f0168a27d23c499efeb2304e2d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea3ba36f3f4b7f0168a27d23c499efeb2304e2d5", "html_url": "https://github.com/rust-lang/rust/commit/ea3ba36f3f4b7f0168a27d23c499efeb2304e2d5"}, {"sha": "c34d9e6a92fae416821f45d2b86c261f62aaf4f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/c34d9e6a92fae416821f45d2b86c261f62aaf4f9", "html_url": "https://github.com/rust-lang/rust/commit/c34d9e6a92fae416821f45d2b86c261f62aaf4f9"}], "stats": {"total": 870, "additions": 499, "deletions": 371}, "files": [{"sha": "a7e1f2a6a73a75047a758834aedb040c22c56f0b", "filename": "src/librustc/traits/chalk_fulfill.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/72252646a8f781509e6756180182887653f657ee/src%2Flibrustc%2Ftraits%2Fchalk_fulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72252646a8f781509e6756180182887653f657ee/src%2Flibrustc%2Ftraits%2Fchalk_fulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fchalk_fulfill.rs?ref=72252646a8f781509e6756180182887653f657ee", "patch": "@@ -81,6 +81,7 @@ impl TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n                 .map(|obligation| FulfillmentError {\n                     obligation: obligation.goal.clone(),\n                     code: FulfillmentErrorCode::CodeAmbiguity,\n+                    points_at_arg_span: false,\n                 })\n                 .collect();\n             Err(errors)\n@@ -129,6 +130,7 @@ impl TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n                                     code: FulfillmentErrorCode::CodeSelectionError(\n                                         SelectionError::Unimplemented\n                                     ),\n+                                    points_at_arg_span: false,\n                                 }),\n                             }\n                         } else {\n@@ -142,6 +144,7 @@ impl TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n                         code: FulfillmentErrorCode::CodeSelectionError(\n                             SelectionError::Unimplemented\n                         ),\n+                        points_at_arg_span: false,\n                     })\n                 }\n             }"}, {"sha": "1d87484ef09bebd27f0a4066770eef5cc3bbbc27", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 51, "deletions": 23, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/72252646a8f781509e6756180182887653f657ee/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72252646a8f781509e6756180182887653f657ee/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=72252646a8f781509e6756180182887653f657ee", "patch": "@@ -119,11 +119,11 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n \n     // returns if `cond` not occurring implies that `error` does not occur - i.e., that\n     // `error` occurring implies that `cond` occurs.\n-    fn error_implies(&self,\n-                     cond: &ty::Predicate<'tcx>,\n-                     error: &ty::Predicate<'tcx>)\n-                     -> bool\n-    {\n+    fn error_implies(\n+        &self,\n+        cond: &ty::Predicate<'tcx>,\n+        error: &ty::Predicate<'tcx>,\n+    ) -> bool {\n         if cond == error {\n             return true\n         }\n@@ -155,13 +155,21 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         false\n     }\n \n-    fn report_fulfillment_error(&self, error: &FulfillmentError<'tcx>,\n-                                body_id: Option<hir::BodyId>,\n-                                fallback_has_occurred: bool) {\n+    fn report_fulfillment_error(\n+        &self,\n+        error: &FulfillmentError<'tcx>,\n+        body_id: Option<hir::BodyId>,\n+        fallback_has_occurred: bool,\n+    ) {\n         debug!(\"report_fulfillment_errors({:?})\", error);\n         match error.code {\n-            FulfillmentErrorCode::CodeSelectionError(ref e) => {\n-                self.report_selection_error(&error.obligation, e, fallback_has_occurred);\n+            FulfillmentErrorCode::CodeSelectionError(ref selection_error) => {\n+                self.report_selection_error(\n+                    &error.obligation,\n+                    selection_error,\n+                    fallback_has_occurred,\n+                    error.points_at_arg_span,\n+                );\n             }\n             FulfillmentErrorCode::CodeProjectionError(ref e) => {\n                 self.report_projection_error(&error.obligation, e);\n@@ -170,19 +178,21 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 self.maybe_report_ambiguity(&error.obligation, body_id);\n             }\n             FulfillmentErrorCode::CodeSubtypeError(ref expected_found, ref err) => {\n-                self.report_mismatched_types(&error.obligation.cause,\n-                                             expected_found.expected,\n-                                             expected_found.found,\n-                                             err.clone())\n-                    .emit();\n+                self.report_mismatched_types(\n+                    &error.obligation.cause,\n+                    expected_found.expected,\n+                    expected_found.found,\n+                    err.clone(),\n+                ).emit();\n             }\n         }\n     }\n \n-    fn report_projection_error(&self,\n-                               obligation: &PredicateObligation<'tcx>,\n-                               error: &MismatchedProjectionTypes<'tcx>)\n-    {\n+    fn report_projection_error(\n+        &self,\n+        obligation: &PredicateObligation<'tcx>,\n+        error: &MismatchedProjectionTypes<'tcx>,\n+    ) {\n         let predicate =\n             self.resolve_vars_if_possible(&obligation.predicate);\n \n@@ -603,6 +613,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         obligation: &PredicateObligation<'tcx>,\n         error: &SelectionError<'tcx>,\n         fallback_has_occurred: bool,\n+        points_at_arg: bool,\n     ) {\n         let span = obligation.cause.span;\n \n@@ -690,7 +701,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                         }\n \n                         self.suggest_borrow_on_unsized_slice(&obligation.cause.code, &mut err);\n-                        self.suggest_fn_call(&obligation, &mut err, &trait_ref);\n+                        self.suggest_fn_call(&obligation, &mut err, &trait_ref, points_at_arg);\n                         self.suggest_remove_reference(&obligation, &mut err, &trait_ref);\n                         self.suggest_semicolon_removal(&obligation, &mut err, span, &trait_ref);\n \n@@ -963,6 +974,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         obligation: &PredicateObligation<'tcx>,\n         err: &mut DiagnosticBuilder<'tcx>,\n         trait_ref: &ty::Binder<ty::TraitRef<'tcx>>,\n+        points_at_arg: bool,\n     ) {\n         let self_ty = trait_ref.self_ty();\n         match self_ty.sty {\n@@ -991,15 +1003,31 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                             ..\n                         })) = self.tcx.hir().get_if_local(def_id) {\n                             let body = self.tcx.hir().body(*body_id);\n-                            err.help(&format!(\n-                                \"use parentheses to call the function: `{}({})`\",\n+                            let msg = \"use parentheses to call the function\";\n+                            let snippet = format!(\n+                                \"{}({})\",\n                                 ident,\n                                 body.params.iter()\n                                     .map(|arg| match &arg.pat.node {\n                                         hir::PatKind::Binding(_, _, ident, None)\n                                         if ident.name != kw::SelfLower => ident.to_string(),\n                                         _ => \"_\".to_string(),\n-                                    }).collect::<Vec<_>>().join(\", \")));\n+                                    }).collect::<Vec<_>>().join(\", \"),\n+                            );\n+                            // When the obligation error has been ensured to have been caused by\n+                            // an argument, the `obligation.cause.span` points at the expression\n+                            // of the argument, so we can provide a suggestion. This is signaled\n+                            // by `points_at_arg`. Otherwise, we give a more general note.\n+                            if points_at_arg {\n+                                err.span_suggestion(\n+                                    obligation.cause.span,\n+                                    msg,\n+                                    snippet,\n+                                    Applicability::HasPlaceholders,\n+                                );\n+                            } else {\n+                                err.help(&format!(\"{}: `{}`\", msg, snippet));\n+                            }\n                         }\n                     }\n                     _ => {}"}, {"sha": "c53f4e49971bf161c8c3df7ec73fdb48ccb1550a", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/72252646a8f781509e6756180182887653f657ee/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72252646a8f781509e6756180182887653f657ee/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=72252646a8f781509e6756180182887653f657ee", "patch": "@@ -484,7 +484,11 @@ EnumTypeFoldableImpl! {\n \n pub struct FulfillmentError<'tcx> {\n     pub obligation: PredicateObligation<'tcx>,\n-    pub code: FulfillmentErrorCode<'tcx>\n+    pub code: FulfillmentErrorCode<'tcx>,\n+    /// Diagnostics only: we opportunistically change the `code.span` when we encounter an\n+    /// obligation error caused by a call argument. When this is the case, we also signal that in\n+    /// this field to ensure accuracy of suggestions.\n+    pub points_at_arg_span: bool,\n }\n \n #[derive(Clone)]\n@@ -1183,7 +1187,7 @@ impl<'tcx> FulfillmentError<'tcx> {\n            code: FulfillmentErrorCode<'tcx>)\n            -> FulfillmentError<'tcx>\n     {\n-        FulfillmentError { obligation: obligation, code: code }\n+        FulfillmentError { obligation: obligation, code: code, points_at_arg_span: false }\n     }\n }\n "}, {"sha": "6a764b19c4ddf7dfdb07f10a8446ad0d971323e7", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72252646a8f781509e6756180182887653f657ee/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72252646a8f781509e6756180182887653f657ee/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=72252646a8f781509e6756180182887653f657ee", "patch": "@@ -1999,6 +1999,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                             ),\n                             &traits::SelectionError::Unimplemented,\n                             false,\n+                            false,\n                         );\n                     }\n                 }"}, {"sha": "ee4f0a868c10a4b60764badd8bc11886c49e83c1", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72252646a8f781509e6756180182887653f657ee/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72252646a8f781509e6756180182887653f657ee/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=72252646a8f781509e6756180182887653f657ee", "patch": "@@ -617,7 +617,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n \n                 // Object safety violations or miscellaneous.\n                 Err(err) => {\n-                    self.report_selection_error(&obligation, &err, false);\n+                    self.report_selection_error(&obligation, &err, false, false);\n                     // Treat this like an obligation and follow through\n                     // with the unsizing - the lack of a coercion should\n                     // be silent, as it causes a type mismatch later."}, {"sha": "0eeeee01c82f1f912b0d88c2b7fe40650c3c804d", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 67, "deletions": 10, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/72252646a8f781509e6756180182887653f657ee/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72252646a8f781509e6756180182887653f657ee/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=72252646a8f781509e6756180182887653f657ee", "patch": "@@ -912,12 +912,12 @@ fn typeck_tables_of(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::TypeckTables<'_> {\n         };\n \n         // All type checking constraints were added, try to fallback unsolved variables.\n-        fcx.select_obligations_where_possible(false);\n+        fcx.select_obligations_where_possible(false, |_| {});\n         let mut fallback_has_occurred = false;\n         for ty in &fcx.unsolved_variables() {\n             fallback_has_occurred |= fcx.fallback_if_possible(ty);\n         }\n-        fcx.select_obligations_where_possible(fallback_has_occurred);\n+        fcx.select_obligations_where_possible(fallback_has_occurred, |_| {});\n \n         // Even though coercion casts provide type hints, we check casts after fallback for\n         // backwards compatibility. This makes fallback a stronger type hint than a cast coercion.\n@@ -2391,7 +2391,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // possible. This can help substantially when there are\n         // indirect dependencies that don't seem worth tracking\n         // precisely.\n-        self.select_obligations_where_possible(false);\n+        self.select_obligations_where_possible(false, |_| {});\n         ty = self.resolve_vars_if_possible(&ty);\n \n         debug!(\"resolve_type_vars_with_obligations: ty={:?}\", ty);\n@@ -2842,7 +2842,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     fn resolve_generator_interiors(&self, def_id: DefId) {\n         let mut generators = self.deferred_generator_interiors.borrow_mut();\n         for (body_id, interior, kind) in generators.drain(..) {\n-            self.select_obligations_where_possible(false);\n+            self.select_obligations_where_possible(false, |_| {});\n             generator_interior::resolve_interior(self, def_id, body_id, interior, kind);\n         }\n     }\n@@ -2879,8 +2879,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     }\n \n     /// Select as many obligations as we can at present.\n-    fn select_obligations_where_possible(&self, fallback_has_occurred: bool) {\n-        if let Err(errors) = self.fulfillment_cx.borrow_mut().select_where_possible(self) {\n+    fn select_obligations_where_possible(\n+        &self,\n+        fallback_has_occurred: bool,\n+        mutate_fullfillment_errors: impl Fn(&mut Vec<traits::FulfillmentError<'tcx>>),\n+    ) {\n+        if let Err(mut errors) = self.fulfillment_cx.borrow_mut().select_where_possible(self) {\n+            mutate_fullfillment_errors(&mut errors);\n             self.report_fulfillment_errors(&errors, self.inh.body_id, fallback_has_occurred);\n         }\n     }\n@@ -3288,6 +3293,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             formal_tys.clone()\n         };\n \n+        let mut final_arg_types: Vec<(usize, Ty<'_>)> = vec![];\n+\n         // Check the arguments.\n         // We do this in a pretty awful way: first we type-check any arguments\n         // that are not closures, then we type-check the closures. This is so\n@@ -3300,7 +3307,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // an \"opportunistic\" vtable resolution of any trait bounds on\n             // the call. This helps coercions.\n             if check_closures {\n-                self.select_obligations_where_possible(false);\n+                self.select_obligations_where_possible(false, |errors| {\n+                    self.point_at_arg_instead_of_call_if_possible(\n+                        errors,\n+                        &final_arg_types[..],\n+                        sp,\n+                        &args,\n+                    );\n+                })\n             }\n \n             // For C-variadic functions, we don't have a declared type for all of\n@@ -3346,6 +3360,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // We're processing function arguments so we definitely want to use\n                 // two-phase borrows.\n                 self.demand_coerce(&arg, checked_ty, coerce_ty, AllowTwoPhase::Yes);\n+                final_arg_types.push((i, coerce_ty));\n \n                 // 3. Relate the expected type and the formal one,\n                 //    if the expected type was used for the coercion.\n@@ -3392,6 +3407,44 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         vec![self.tcx.types.err; len]\n     }\n \n+    /// Given a vec of evaluated `FullfillmentError`s and an `fn` call argument expressions, we\n+    /// walk the resolved types for each argument to see if any of the `FullfillmentError`s\n+    /// reference a type argument. If they do, and there's only *one* argument that does, we point\n+    /// at the corresponding argument's expression span instead of the `fn` call path span.\n+    fn point_at_arg_instead_of_call_if_possible(\n+        &self,\n+        errors: &mut Vec<traits::FulfillmentError<'_>>,\n+        final_arg_types: &[(usize, Ty<'tcx>)],\n+        call_sp: Span,\n+        args: &'tcx [hir::Expr],\n+    ) {\n+        if !call_sp.desugaring_kind().is_some() {\n+            // We *do not* do this for desugared call spans to keep good diagnostics when involving\n+            // the `?` operator.\n+            for error in errors {\n+                if let ty::Predicate::Trait(predicate) = error.obligation.predicate {\n+                    // Collect the argument position for all arguments that could have caused this\n+                    // `FullfillmentError`.\n+                    let mut referenced_in = final_arg_types.iter()\n+                        .flat_map(|(i, ty)| {\n+                            let ty = self.resolve_vars_if_possible(ty);\n+                            // We walk the argument type because the argument's type could have\n+                            // been `Option<T>`, but the `FullfillmentError` references `T`.\n+                            ty.walk()\n+                                .filter(|&ty| ty == predicate.skip_binder().self_ty())\n+                                .map(move |_| *i)\n+                        });\n+                    if let (Some(ref_in), None) = (referenced_in.next(), referenced_in.next()) {\n+                        // We make sure that only *one* argument matches the obligation failure\n+                        // and thet the obligation's span to its expression's.\n+                        error.obligation.cause.span = args[ref_in].span;\n+                        error.points_at_arg_span = true;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n     // AST fragment checking\n     fn check_lit(&self,\n                  lit: &hir::Lit,\n@@ -3549,8 +3602,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n             // Check bounds on type arguments used in the path.\n             let bounds = self.instantiate_bounds(path_span, did, substs);\n-            let cause = traits::ObligationCause::new(path_span, self.body_id,\n-                                                     traits::ItemObligation(did));\n+            let cause = traits::ObligationCause::new(\n+                path_span,\n+                self.body_id,\n+                traits::ItemObligation(did),\n+            );\n             self.add_obligations_for_parameters(cause, &bounds);\n \n             Some((variant, ty))\n@@ -4674,7 +4730,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let bounds = self.instantiate_bounds(span, def_id, &substs);\n         self.add_obligations_for_parameters(\n             traits::ObligationCause::new(span, self.body_id, traits::ItemObligation(def_id)),\n-            &bounds);\n+            &bounds,\n+        );\n \n         // Substitute the values for the type parameters into the type of\n         // the referenced item."}, {"sha": "956d04ff6229b388525c25fe52fe32d469ab9dc7", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72252646a8f781509e6756180182887653f657ee/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72252646a8f781509e6756180182887653f657ee/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=72252646a8f781509e6756180182887653f657ee", "patch": "@@ -724,7 +724,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         match method {\n             Some(ok) => {\n                 let method = self.register_infer_ok_obligations(ok);\n-                self.select_obligations_where_possible(false);\n+                self.select_obligations_where_possible(false, |_| {});\n \n                 Ok(method)\n             }"}, {"sha": "b0e886a2aa2ebab2343785d0cc99b40b23c9a514", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/72252646a8f781509e6756180182887653f657ee/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72252646a8f781509e6756180182887653f657ee/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=72252646a8f781509e6756180182887653f657ee", "patch": "@@ -506,7 +506,7 @@ fn check_where_clauses<'tcx, 'fcx>(\n     });\n \n     // Now we build the substituted predicates.\n-    let default_obligations = predicates.predicates.iter().flat_map(|&(pred, _)| {\n+    let default_obligations = predicates.predicates.iter().flat_map(|&(pred, sp)| {\n         #[derive(Default)]\n         struct CountParams { params: FxHashSet<u32> }\n         impl<'tcx> ty::fold::TypeVisitor<'tcx> for CountParams {\n@@ -539,9 +539,9 @@ fn check_where_clauses<'tcx, 'fcx>(\n             // Avoid duplication of predicates that contain no parameters, for example.\n             None\n         } else {\n-            Some(substituted_pred)\n+            Some((substituted_pred, sp))\n         }\n-    }).map(|pred| {\n+    }).map(|(pred, sp)| {\n         // Convert each of those into an obligation. So if you have\n         // something like `struct Foo<T: Copy = String>`, we would\n         // take that predicate `T: Copy`, substitute to `String: Copy`\n@@ -551,8 +551,8 @@ fn check_where_clauses<'tcx, 'fcx>(\n         // Note the subtle difference from how we handle `predicates`\n         // below: there, we are not trying to prove those predicates\n         // to be *true* but merely *well-formed*.\n-        let pred = fcx.normalize_associated_types_in(span, &pred);\n-        let cause = traits::ObligationCause::new(span, fcx.body_id, traits::ItemObligation(def_id));\n+        let pred = fcx.normalize_associated_types_in(sp, &pred);\n+        let cause = traits::ObligationCause::new(sp, fcx.body_id, traits::ItemObligation(def_id));\n         traits::Obligation::new(cause, fcx.param_env, pred)\n     });\n "}, {"sha": "85acf134d51d53ba60f9929214685b131836893b", "filename": "src/test/ui/associated-types/associated-types-bound-failure.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-bound-failure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-bound-failure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-bound-failure.stderr?ref=72252646a8f781509e6756180182887653f657ee", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `<G as GetToInt>::R: ToInt` is not satisfied\n-  --> $DIR/associated-types-bound-failure.rs:17:5\n+  --> $DIR/associated-types-bound-failure.rs:17:19\n    |\n LL |     fn to_int(&self) -> isize;\n    |     -------------------------- required by `ToInt::to_int`\n ...\n LL |     ToInt::to_int(&g.get())\n-   |     ^^^^^^^^^^^^^ the trait `ToInt` is not implemented for `<G as GetToInt>::R`\n+   |                   ^^^^^^^^ the trait `ToInt` is not implemented for `<G as GetToInt>::R`\n    |\n    = help: consider adding a `where <G as GetToInt>::R: ToInt` bound\n "}, {"sha": "ae4f4d69b5ef500c3214be894915bb1a7b7baf96", "filename": "src/test/ui/closure-expected.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fclosure-expected.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fclosure-expected.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected.stderr?ref=72252646a8f781509e6756180182887653f657ee", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: expected a `std::ops::FnOnce<()>` closure, found `{integer}`\n-  --> $DIR/closure-expected.rs:3:15\n+  --> $DIR/closure-expected.rs:3:23\n    |\n LL |     let y = x.or_else(4);\n-   |               ^^^^^^^ expected an `FnOnce<()>` closure, found `{integer}`\n+   |                       ^ expected an `FnOnce<()>` closure, found `{integer}`\n    |\n    = help: the trait `std::ops::FnOnce<()>` is not implemented for `{integer}`\n    = note: wrap the `{integer}` in a closure with no arguments: `|| { /* code */ }"}, {"sha": "e9b34e05ac2e2c878c591e682f361d29cc6ca556", "filename": "src/test/ui/closures/closure-bounds-subtype.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-subtype.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-subtype.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-subtype.stderr?ref=72252646a8f781509e6756180182887653f657ee", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: `F` cannot be shared between threads safely\n-  --> $DIR/closure-bounds-subtype.rs:13:5\n+  --> $DIR/closure-bounds-subtype.rs:13:22\n    |\n LL | fn take_const_owned<F>(_: F) where F: FnOnce() + Sync + Send {\n    | ------------------------------------------------------------ required by `take_const_owned`\n ...\n LL |     take_const_owned(f);\n-   |     ^^^^^^^^^^^^^^^^ `F` cannot be shared between threads safely\n+   |                      ^ `F` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `F`\n    = help: consider adding a `where F: std::marker::Sync` bound"}, {"sha": "594a0d4b5d8443ff316a3bb828850ffc33bd528c", "filename": "src/test/ui/const-generics/array-impls/core-traits-no-impls-length-33.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Fcore-traits-no-impls-length-33.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Fcore-traits-no-impls-length-33.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Fcore-traits-no-impls-length-33.stderr?ref=72252646a8f781509e6756180182887653f657ee", "patch": "@@ -8,10 +8,10 @@ LL |     println!(\"{:?}\", [0_usize; 33]);\n    = note: required by `std::fmt::Debug::fmt`\n \n error[E0277]: arrays only have std trait implementations for lengths 0..=32\n-  --> $DIR/core-traits-no-impls-length-33.rs:9:9\n+  --> $DIR/core-traits-no-impls-length-33.rs:9:16\n    |\n LL |     set.insert([0_usize; 33]);\n-   |         ^^^^^^ the trait `std::array::LengthAtMost32` is not implemented for `[usize; 33]`\n+   |                ^^^^^^^^^^^^^ the trait `std::array::LengthAtMost32` is not implemented for `[usize; 33]`\n    |\n    = note: required because of the requirements on the impl of `std::cmp::Eq` for `[usize; 33]`\n "}, {"sha": "f142257604cc84b67a444a6fcb843019b6f949ab", "filename": "src/test/ui/derives/deriving-copyclone.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fderives%2Fderiving-copyclone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fderives%2Fderiving-copyclone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderiving-copyclone.stderr?ref=72252646a8f781509e6756180182887653f657ee", "patch": "@@ -1,33 +1,33 @@\n error[E0277]: the trait bound `C: std::marker::Copy` is not satisfied\n-  --> $DIR/deriving-copyclone.rs:31:5\n+  --> $DIR/deriving-copyclone.rs:31:13\n    |\n LL | fn is_copy<T: Copy>(_: T) {}\n    | ------------------------- required by `is_copy`\n ...\n LL |     is_copy(B { a: 1, b: C });\n-   |     ^^^^^^^ the trait `std::marker::Copy` is not implemented for `C`\n+   |             ^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `C`\n    |\n    = note: required because of the requirements on the impl of `std::marker::Copy` for `B<C>`\n \n error[E0277]: the trait bound `C: std::clone::Clone` is not satisfied\n-  --> $DIR/deriving-copyclone.rs:32:5\n+  --> $DIR/deriving-copyclone.rs:32:14\n    |\n LL | fn is_clone<T: Clone>(_: T) {}\n    | --------------------------- required by `is_clone`\n ...\n LL |     is_clone(B { a: 1, b: C });\n-   |     ^^^^^^^^ the trait `std::clone::Clone` is not implemented for `C`\n+   |              ^^^^^^^^^^^^^^^^ the trait `std::clone::Clone` is not implemented for `C`\n    |\n    = note: required because of the requirements on the impl of `std::clone::Clone` for `B<C>`\n \n error[E0277]: the trait bound `D: std::marker::Copy` is not satisfied\n-  --> $DIR/deriving-copyclone.rs:35:5\n+  --> $DIR/deriving-copyclone.rs:35:13\n    |\n LL | fn is_copy<T: Copy>(_: T) {}\n    | ------------------------- required by `is_copy`\n ...\n LL |     is_copy(B { a: 1, b: D });\n-   |     ^^^^^^^ the trait `std::marker::Copy` is not implemented for `D`\n+   |             ^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `D`\n    |\n    = note: required because of the requirements on the impl of `std::marker::Copy` for `B<D>`\n "}, {"sha": "1bd4543f2316c5bfab5d4a9ff7d4847931dc7d40", "filename": "src/test/ui/did_you_mean/issue-39802-show-5-trait-impls.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39802-show-5-trait-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39802-show-5-trait-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39802-show-5-trait-impls.stderr?ref=72252646a8f781509e6756180182887653f657ee", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `i8: Foo<i32>` is not satisfied\n-  --> $DIR/issue-39802-show-5-trait-impls.rs:24:5\n+  --> $DIR/issue-39802-show-5-trait-impls.rs:24:21\n    |\n LL |     fn bar(&self){}\n    |     ------------- required by `Foo::bar`\n ...\n LL |     Foo::<i32>::bar(&1i8);\n-   |     ^^^^^^^^^^^^^^^ the trait `Foo<i32>` is not implemented for `i8`\n+   |                     ^^^^ the trait `Foo<i32>` is not implemented for `i8`\n    |\n    = help: the following implementations were found:\n              <i8 as Foo<bool>>\n@@ -15,13 +15,13 @@ LL |     Foo::<i32>::bar(&1i8);\n              <i8 as Foo<u8>>\n \n error[E0277]: the trait bound `u8: Foo<i32>` is not satisfied\n-  --> $DIR/issue-39802-show-5-trait-impls.rs:25:5\n+  --> $DIR/issue-39802-show-5-trait-impls.rs:25:21\n    |\n LL |     fn bar(&self){}\n    |     ------------- required by `Foo::bar`\n ...\n LL |     Foo::<i32>::bar(&1u8);\n-   |     ^^^^^^^^^^^^^^^ the trait `Foo<i32>` is not implemented for `u8`\n+   |                     ^^^^ the trait `Foo<i32>` is not implemented for `u8`\n    |\n    = help: the following implementations were found:\n              <u8 as Foo<bool>>\n@@ -30,13 +30,13 @@ LL |     Foo::<i32>::bar(&1u8);\n              <u8 as Foo<u64>>\n \n error[E0277]: the trait bound `bool: Foo<i32>` is not satisfied\n-  --> $DIR/issue-39802-show-5-trait-impls.rs:26:5\n+  --> $DIR/issue-39802-show-5-trait-impls.rs:26:21\n    |\n LL |     fn bar(&self){}\n    |     ------------- required by `Foo::bar`\n ...\n LL |     Foo::<i32>::bar(&true);\n-   |     ^^^^^^^^^^^^^^^ the trait `Foo<i32>` is not implemented for `bool`\n+   |                     ^^^^^ the trait `Foo<i32>` is not implemented for `bool`\n    |\n    = help: the following implementations were found:\n              <bool as Foo<bool>>"}, {"sha": "9cd0dc7a68e7c8203b845e00394024181b0add3d", "filename": "src/test/ui/error-codes/E0277.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Ferror-codes%2FE0277.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Ferror-codes%2FE0277.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0277.stderr?ref=72252646a8f781509e6756180182887653f657ee", "patch": "@@ -11,13 +11,13 @@ LL | fn f(p: Path) { }\n    = help: unsized locals are gated as an unstable feature\n \n error[E0277]: the trait bound `i32: Foo` is not satisfied\n-  --> $DIR/E0277.rs:17:5\n+  --> $DIR/E0277.rs:17:15\n    |\n LL | fn some_func<T: Foo>(foo: T) {\n    | ---------------------------- required by `some_func`\n ...\n LL |     some_func(5i32);\n-   |     ^^^^^^^^^ the trait `Foo` is not implemented for `i32`\n+   |               ^^^^ the trait `Foo` is not implemented for `i32`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "df79aeea054ca5ee473b3b6b3b322c6a41ab4c59", "filename": "src/test/ui/error-should-say-copy-not-pod.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Ferror-should-say-copy-not-pod.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Ferror-should-say-copy-not-pod.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-should-say-copy-not-pod.stderr?ref=72252646a8f781509e6756180182887653f657ee", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `std::string::String: std::marker::Copy` is not satisfied\n-  --> $DIR/error-should-say-copy-not-pod.rs:6:5\n+  --> $DIR/error-should-say-copy-not-pod.rs:6:17\n    |\n LL | fn check_bound<T:Copy>(_: T) {}\n    | ---------------------------- required by `check_bound`\n ...\n LL |     check_bound(\"nocopy\".to_string());\n-   |     ^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `std::string::String`\n+   |                 ^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `std::string::String`\n \n error: aborting due to previous error\n "}, {"sha": "f2468895d21d1318263049e435e82e1107329526", "filename": "src/test/ui/extern/extern-wrong-value-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fextern%2Fextern-wrong-value-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fextern%2Fextern-wrong-value-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-wrong-value-type.stderr?ref=72252646a8f781509e6756180182887653f657ee", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: expected a `std::ops::Fn<()>` closure, found `extern \"C\" fn() {f}`\n-  --> $DIR/extern-wrong-value-type.rs:9:5\n+  --> $DIR/extern-wrong-value-type.rs:9:11\n    |\n LL | fn is_fn<F>(_: F) where F: Fn() {}\n    | ------------------------------- required by `is_fn`\n ...\n LL |     is_fn(f);\n-   |     ^^^^^ expected an `Fn<()>` closure, found `extern \"C\" fn() {f}`\n+   |           ^ expected an `Fn<()>` closure, found `extern \"C\" fn() {f}`\n    |\n    = help: the trait `std::ops::Fn<()>` is not implemented for `extern \"C\" fn() {f}`\n    = note: wrap the `extern \"C\" fn() {f}` in a closure with no arguments: `|| { /* code */ }"}, {"sha": "4d610b49dff8eb4ac38e03b13ea7ac1612c2a283", "filename": "src/test/ui/fn/fn-trait-formatting.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Ffn%2Ffn-trait-formatting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Ffn%2Ffn-trait-formatting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Ffn-trait-formatting.stderr?ref=72252646a8f781509e6756180182887653f657ee", "patch": "@@ -26,13 +26,13 @@ LL |     let _: () = (box || -> isize { unimplemented!() }) as Box<dyn FnMut() -\n               found type `std::boxed::Box<dyn std::ops::FnMut() -> isize>`\n \n error[E0277]: expected a `std::ops::Fn<(isize,)>` closure, found `{integer}`\n-  --> $DIR/fn-trait-formatting.rs:19:5\n+  --> $DIR/fn-trait-formatting.rs:19:14\n    |\n LL | fn needs_fn<F>(x: F) where F: Fn(isize) -> isize {}\n    | ------------------------------------------------ required by `needs_fn`\n ...\n LL |     needs_fn(1);\n-   |     ^^^^^^^^ expected an `Fn<(isize,)>` closure, found `{integer}`\n+   |              ^ expected an `Fn<(isize,)>` closure, found `{integer}`\n    |\n    = help: the trait `std::ops::Fn<(isize,)>` is not implemented for `{integer}`\n "}, {"sha": "1871cf9d2386e1bd4c405179c522b4e1fed22c1a", "filename": "src/test/ui/for/for-c-in-str.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Ffor%2Ffor-c-in-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Ffor%2Ffor-c-in-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffor%2Ffor-c-in-str.rs?ref=72252646a8f781509e6756180182887653f657ee", "patch": "@@ -6,6 +6,9 @@ fn main() {\n     //~| NOTE `&str` is not an iterator\n     //~| HELP the trait `std::iter::Iterator` is not implemented for `&str`\n     //~| NOTE required by `std::iter::IntoIterator::into_iter`\n+    //~| NOTE in this expansion of desugaring of `for` loop\n+    //~| NOTE in this expansion of desugaring of `for` loop\n+    //~| NOTE in this expansion of desugaring of `for` loop\n         println!();\n     }\n }"}, {"sha": "b7871ee3478a416edd054fc0da92a29cd38c2b4a", "filename": "src/test/ui/generator/static-not-unpin.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fgenerator%2Fstatic-not-unpin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fgenerator%2Fstatic-not-unpin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fstatic-not-unpin.stderr?ref=72252646a8f781509e6756180182887653f657ee", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `[static generator@$DIR/static-not-unpin.rs:11:25: 13:6 _]: std::marker::Unpin` is not satisfied\n-  --> $DIR/static-not-unpin.rs:14:5\n+  --> $DIR/static-not-unpin.rs:14:18\n    |\n LL | fn assert_unpin<T: Unpin>(_: T) {\n    | ------------------------------- required by `assert_unpin`\n ...\n LL |     assert_unpin(generator);\n-   |     ^^^^^^^^^^^^ the trait `std::marker::Unpin` is not implemented for `[static generator@$DIR/static-not-unpin.rs:11:25: 13:6 _]`\n+   |                  ^^^^^^^^^ the trait `std::marker::Unpin` is not implemented for `[static generator@$DIR/static-not-unpin.rs:11:25: 13:6 _]`\n \n error: aborting due to previous error\n "}, {"sha": "18f49089302e5ddaba8d6adf916e374ed92ce857", "filename": "src/test/ui/hrtb/hrtb-higher-ranker-supertraits-transitive.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits-transitive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits-transitive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits-transitive.stderr?ref=72252646a8f781509e6756180182887653f657ee", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `for<'ccx> B: Bar<'ccx>` is not satisfied\n-  --> $DIR/hrtb-higher-ranker-supertraits-transitive.rs:47:5\n+  --> $DIR/hrtb-higher-ranker-supertraits-transitive.rs:47:26\n    |\n LL | / fn want_bar_for_any_ccx<B>(b: &B)\n LL | |     where B : for<'ccx> Bar<'ccx>\n@@ -8,7 +8,7 @@ LL | | }\n    | |_- required by `want_bar_for_any_ccx`\n ...\n LL |       want_bar_for_any_ccx(b);\n-   |       ^^^^^^^^^^^^^^^^^^^^ the trait `for<'ccx> Bar<'ccx>` is not implemented for `B`\n+   |                            ^ the trait `for<'ccx> Bar<'ccx>` is not implemented for `B`\n    |\n    = help: consider adding a `where for<'ccx> B: Bar<'ccx>` bound\n "}, {"sha": "7857ab6e86a20d03cbb24dd5987c9c4fd3d38953", "filename": "src/test/ui/hrtb/hrtb-higher-ranker-supertraits.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits.stderr?ref=72252646a8f781509e6756180182887653f657ee", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `for<'tcx> F: Foo<'tcx>` is not satisfied\n-  --> $DIR/hrtb-higher-ranker-supertraits.rs:18:5\n+  --> $DIR/hrtb-higher-ranker-supertraits.rs:18:26\n    |\n LL |       want_foo_for_any_tcx(f);\n-   |       ^^^^^^^^^^^^^^^^^^^^ the trait `for<'tcx> Foo<'tcx>` is not implemented for `F`\n+   |                            ^ the trait `for<'tcx> Foo<'tcx>` is not implemented for `F`\n ...\n LL | / fn want_foo_for_any_tcx<F>(f: &F)\n LL | |     where F : for<'tcx> Foo<'tcx>\n@@ -15,10 +15,10 @@ LL | | }\n    = help: consider adding a `where for<'tcx> F: Foo<'tcx>` bound\n \n error[E0277]: the trait bound `for<'ccx> B: Bar<'ccx>` is not satisfied\n-  --> $DIR/hrtb-higher-ranker-supertraits.rs:35:5\n+  --> $DIR/hrtb-higher-ranker-supertraits.rs:35:26\n    |\n LL |       want_bar_for_any_ccx(b);\n-   |       ^^^^^^^^^^^^^^^^^^^^ the trait `for<'ccx> Bar<'ccx>` is not implemented for `B`\n+   |                            ^ the trait `for<'ccx> Bar<'ccx>` is not implemented for `B`\n ...\n LL | / fn want_bar_for_any_ccx<B>(b: &B)\n LL | |     where B : for<'ccx> Bar<'ccx>"}, {"sha": "08f352c11fa12cce2dc6069f9d59749b8e89a87b", "filename": "src/test/ui/issues/issue-17651.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fissues%2Fissue-17651.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fissues%2Fissue-17651.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17651.rs?ref=72252646a8f781509e6756180182887653f657ee", "patch": "@@ -4,4 +4,5 @@\n fn main() {\n     (|| Box::new(*(&[0][..])))();\n     //~^ ERROR the size for values of type\n+    //~| ERROR the size for values of type\n }"}, {"sha": "c3445024c37529af1863ebaabeafe5884f91ccd9", "filename": "src/test/ui/issues/issue-17651.stderr", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fissues%2Fissue-17651.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fissues%2Fissue-17651.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17651.stderr?ref=72252646a8f781509e6756180182887653f657ee", "patch": "@@ -1,3 +1,13 @@\n+error[E0277]: the size for values of type `[{integer}]` cannot be known at compilation time\n+  --> $DIR/issue-17651.rs:5:18\n+   |\n+LL |     (|| Box::new(*(&[0][..])))();\n+   |                  ^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `std::marker::Sized` is not implemented for `[{integer}]`\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: required by `std::boxed::Box::<T>::new`\n+\n error[E0277]: the size for values of type `[{integer}]` cannot be known at compilation time\n   --> $DIR/issue-17651.rs:5:9\n    |\n@@ -6,8 +16,9 @@ LL |     (|| Box::new(*(&[0][..])))();\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[{integer}]`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = note: required by `std::boxed::Box::<T>::new`\n+   = note: all function arguments must have a statically known size\n+   = help: unsized locals are gated as an unstable feature\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "c2fe6d92b910a7be725b416349f82b9259aff6ee", "filename": "src/test/ui/issues/issue-23966.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fissues%2Fissue-23966.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fissues%2Fissue-23966.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23966.stderr?ref=72252646a8f781509e6756180182887653f657ee", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: expected a `std::ops::FnMut<(_, char)>` closure, found `()`\n-  --> $DIR/issue-23966.rs:2:16\n+  --> $DIR/issue-23966.rs:2:32\n    |\n LL |     \"\".chars().fold(|_, _| (), ());\n-   |                ^^^^ expected an `FnMut<(_, char)>` closure, found `()`\n+   |                                ^^ expected an `FnMut<(_, char)>` closure, found `()`\n    |\n    = help: the trait `std::ops::FnMut<(_, char)>` is not implemented for `()`\n "}, {"sha": "a7b6626b16a1cee2feee95b48c47c0613848885d", "filename": "src/test/ui/issues/issue-25076.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fissues%2Fissue-25076.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fissues%2Fissue-25076.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-25076.stderr?ref=72252646a8f781509e6756180182887653f657ee", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `(): InOut<_>` is not satisfied\n-  --> $DIR/issue-25076.rs:10:5\n+  --> $DIR/issue-25076.rs:10:20\n    |\n LL | fn do_fold<B, F: InOut<B, Out=B>>(init: B, f: F) {}\n    | ------------------------------------------------ required by `do_fold`\n ...\n LL |     do_fold(bot(), ());\n-   |     ^^^^^^^ the trait `InOut<_>` is not implemented for `()`\n+   |                    ^^ the trait `InOut<_>` is not implemented for `()`\n \n error: aborting due to previous error\n "}, {"sha": "62a90d90d12defde59aa800c5c601defe8482b48", "filename": "src/test/ui/issues/issue-28098.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fissues%2Fissue-28098.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fissues%2Fissue-28098.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28098.rs?ref=72252646a8f781509e6756180182887653f657ee", "patch": "@@ -1,6 +1,7 @@\n fn main() {\n     let _ = Iterator::next(&mut ());\n     //~^ ERROR `()` is not an iterator\n+    //~| ERROR `()` is not an iterator\n \n     for _ in false {}\n     //~^ ERROR `bool` is not an iterator\n@@ -16,6 +17,7 @@ pub fn other() {\n \n     let _ = Iterator::next(&mut ());\n     //~^ ERROR `()` is not an iterator\n+    //~| ERROR `()` is not an iterator\n \n     let _ = Iterator::next(&mut ());\n     //~^ ERROR `()` is not an iterator"}, {"sha": "8b724b9331dd6bd93e498c156274812c3c989690", "filename": "src/test/ui/issues/issue-28098.stderr", "status": "modified", "additions": 26, "deletions": 10, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fissues%2Fissue-28098.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fissues%2Fissue-28098.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28098.stderr?ref=72252646a8f781509e6756180182887653f657ee", "patch": "@@ -1,14 +1,14 @@\n error[E0277]: `()` is not an iterator\n-  --> $DIR/issue-28098.rs:2:13\n+  --> $DIR/issue-28098.rs:2:28\n    |\n LL |     let _ = Iterator::next(&mut ());\n-   |             ^^^^^^^^^^^^^^ `()` is not an iterator\n+   |                            ^^^^^^^ `()` is not an iterator\n    |\n    = help: the trait `std::iter::Iterator` is not implemented for `()`\n    = note: required by `std::iter::Iterator::next`\n \n error[E0277]: `bool` is not an iterator\n-  --> $DIR/issue-28098.rs:5:14\n+  --> $DIR/issue-28098.rs:6:14\n    |\n LL |     for _ in false {}\n    |              ^^^^^ `bool` is not an iterator\n@@ -17,41 +17,57 @@ LL |     for _ in false {}\n    = note: required by `std::iter::IntoIterator::into_iter`\n \n error[E0277]: `()` is not an iterator\n-  --> $DIR/issue-28098.rs:8:13\n+  --> $DIR/issue-28098.rs:9:28\n    |\n LL |     let _ = Iterator::next(&mut ());\n-   |             ^^^^^^^^^^^^^^ `()` is not an iterator\n+   |                            ^^^^^^^ `()` is not an iterator\n    |\n    = help: the trait `std::iter::Iterator` is not implemented for `()`\n    = note: required by `std::iter::Iterator::next`\n \n error[E0277]: `()` is not an iterator\n-  --> $DIR/issue-28098.rs:17:13\n+  --> $DIR/issue-28098.rs:2:13\n    |\n LL |     let _ = Iterator::next(&mut ());\n    |             ^^^^^^^^^^^^^^ `()` is not an iterator\n    |\n    = help: the trait `std::iter::Iterator` is not implemented for `()`\n+\n+error[E0277]: `()` is not an iterator\n+  --> $DIR/issue-28098.rs:18:28\n+   |\n+LL |     let _ = Iterator::next(&mut ());\n+   |                            ^^^^^^^ `()` is not an iterator\n+   |\n+   = help: the trait `std::iter::Iterator` is not implemented for `()`\n    = note: required by `std::iter::Iterator::next`\n \n error[E0277]: `()` is not an iterator\n-  --> $DIR/issue-28098.rs:20:13\n+  --> $DIR/issue-28098.rs:22:28\n    |\n LL |     let _ = Iterator::next(&mut ());\n-   |             ^^^^^^^^^^^^^^ `()` is not an iterator\n+   |                            ^^^^^^^ `()` is not an iterator\n    |\n    = help: the trait `std::iter::Iterator` is not implemented for `()`\n    = note: required by `std::iter::Iterator::next`\n \n error[E0277]: `bool` is not an iterator\n-  --> $DIR/issue-28098.rs:23:14\n+  --> $DIR/issue-28098.rs:25:14\n    |\n LL |     for _ in false {}\n    |              ^^^^^ `bool` is not an iterator\n    |\n    = help: the trait `std::iter::Iterator` is not implemented for `bool`\n    = note: required by `std::iter::IntoIterator::into_iter`\n \n-error: aborting due to 6 previous errors\n+error[E0277]: `()` is not an iterator\n+  --> $DIR/issue-28098.rs:18:13\n+   |\n+LL |     let _ = Iterator::next(&mut ());\n+   |             ^^^^^^^^^^^^^^ `()` is not an iterator\n+   |\n+   = help: the trait `std::iter::Iterator` is not implemented for `()`\n+\n+error: aborting due to 8 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "8a6a199148c39c0848c491e93f86df20bdd94bb6", "filename": "src/test/ui/issues/issue-47706-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fissues%2Fissue-47706-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fissues%2Fissue-47706-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47706-trait.stderr?ref=72252646a8f781509e6756180182887653f657ee", "patch": "@@ -1,10 +1,10 @@\n error[E0593]: function is expected to take a single 0-tuple as argument, but it takes 2 distinct arguments\n-  --> $DIR/issue-47706-trait.rs:3:20\n+  --> $DIR/issue-47706-trait.rs:3:24\n    |\n LL |     fn f(&self, _: ()) {\n    |     ------------------ takes 2 distinct arguments\n LL |         None::<()>.map(Self::f);\n-   |                    ^^^ expected function that takes a single 0-tuple as argument\n+   |                        ^^^^^^^ expected function that takes a single 0-tuple as argument\n \n error: aborting due to previous error\n "}, {"sha": "4f64a643fe57d3ae36b2e8ab80e18fab51ab1e71", "filename": "src/test/ui/issues/issue-47706.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fissues%2Fissue-47706.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fissues%2Fissue-47706.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47706.stderr?ref=72252646a8f781509e6756180182887653f657ee", "patch": "@@ -1,14 +1,14 @@\n error[E0593]: function is expected to take 1 argument, but it takes 2 arguments\n-  --> $DIR/issue-47706.rs:11:18\n+  --> $DIR/issue-47706.rs:11:22\n    |\n LL |     pub fn new(foo: Option<i32>, _: ()) -> Foo {\n    |     ------------------------------------------ takes 2 arguments\n ...\n LL |         self.foo.map(Foo::new)\n-   |                  ^^^ expected function that takes 1 argument\n+   |                      ^^^^^^^^ expected function that takes 1 argument\n \n error[E0593]: function is expected to take 0 arguments, but it takes 1 argument\n-  --> $DIR/issue-47706.rs:27:5\n+  --> $DIR/issue-47706.rs:27:9\n    |\n LL |       Bar(i32),\n    |       -------- takes 1 argument\n@@ -21,7 +21,7 @@ LL | | }\n    | |_- required by `foo`\n ...\n LL |       foo(Qux::Bar);\n-   |       ^^^ expected function that takes 0 arguments\n+   |           ^^^^^^^^ expected function that takes 0 arguments\n \n error: aborting due to 2 previous errors\n "}, {"sha": "2b01a64d39a9ba00248b2f651060b3aef49caeb2", "filename": "src/test/ui/issues/issue-60283.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fissues%2Fissue-60283.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fissues%2Fissue-60283.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60283.stderr?ref=72252646a8f781509e6756180182887653f657ee", "patch": "@@ -1,16 +1,16 @@\n error[E0631]: type mismatch in function arguments\n-  --> $DIR/issue-60283.rs:14:5\n+  --> $DIR/issue-60283.rs:14:13\n    |\n LL | / pub fn foo<T, F>(_: T, _: F)\n LL | | where T: for<'a> Trait<'a>,\n LL | |       F: for<'a> FnMut(<T as Trait<'a>>::Item) {}\n    | |_________________________________________________- required by `foo`\n ...\n LL |       foo((), drop)\n-   |       ^^^\n-   |       |\n-   |       expected signature of `for<'a> fn(<() as Trait<'a>>::Item) -> _`\n-   |       found signature of `fn(_) -> _`\n+   |               ^^^^\n+   |               |\n+   |               expected signature of `for<'a> fn(<() as Trait<'a>>::Item) -> _`\n+   |               found signature of `fn(_) -> _`\n \n error[E0271]: type mismatch resolving `for<'a> <fn(_) {std::mem::drop::<_>} as std::ops::FnOnce<(<() as Trait<'a>>::Item,)>>::Output == ()`\n   --> $DIR/issue-60283.rs:14:5"}, {"sha": "5e6eca6f0571bdb1948da2dc8b6b28c2637cb0aa", "filename": "src/test/ui/kindck/kindck-impl-type-params-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params-2.stderr?ref=72252646a8f781509e6756180182887653f657ee", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `std::boxed::Box<{integer}>: std::marker::Copy` is not satisfied\n-  --> $DIR/kindck-impl-type-params-2.rs:13:5\n+  --> $DIR/kindck-impl-type-params-2.rs:13:16\n    |\n LL | fn take_param<T:Foo>(foo: &T) { }\n    | ----------------------------- required by `take_param`\n ...\n LL |     take_param(&x);\n-   |     ^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `std::boxed::Box<{integer}>`\n+   |                ^^ the trait `std::marker::Copy` is not implemented for `std::boxed::Box<{integer}>`\n    |\n    = note: required because of the requirements on the impl of `Foo` for `std::boxed::Box<{integer}>`\n "}, {"sha": "9f548083e73d17c34dde32ec2eb3b74d1f5cafb8", "filename": "src/test/ui/kindck/kindck-inherited-copy-bound.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.stderr?ref=72252646a8f781509e6756180182887653f657ee", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `std::boxed::Box<{integer}>: std::marker::Copy` is not satisfied\n-  --> $DIR/kindck-inherited-copy-bound.rs:18:5\n+  --> $DIR/kindck-inherited-copy-bound.rs:18:16\n    |\n LL | fn take_param<T:Foo>(foo: &T) { }\n    | ----------------------------- required by `take_param`\n ...\n LL |     take_param(&x);\n-   |     ^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `std::boxed::Box<{integer}>`\n+   |                ^^ the trait `std::marker::Copy` is not implemented for `std::boxed::Box<{integer}>`\n    |\n    = note: required because of the requirements on the impl of `Foo` for `std::boxed::Box<{integer}>`\n "}, {"sha": "64ddf1deb0639b5b5d6d615750db617412d408b2", "filename": "src/test/ui/mismatched_types/E0631.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fmismatched_types%2FE0631.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fmismatched_types%2FE0631.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2FE0631.stderr?ref=72252646a8f781509e6756180182887653f657ee", "patch": "@@ -21,7 +21,7 @@ LL |     bar(|_: isize| {});\n    |     expected signature of `fn(usize) -> _`\n \n error[E0631]: type mismatch in function arguments\n-  --> $DIR/E0631.rs:9:5\n+  --> $DIR/E0631.rs:9:9\n    |\n LL | fn foo<F: Fn(usize)>(_: F) {}\n    | -------------------------- required by `foo`\n@@ -30,10 +30,10 @@ LL |     fn f(_: u64) {}\n    |     ------------ found signature of `fn(u64) -> _`\n ...\n LL |     foo(f);\n-   |     ^^^ expected signature of `fn(usize) -> _`\n+   |         ^ expected signature of `fn(usize) -> _`\n \n error[E0631]: type mismatch in function arguments\n-  --> $DIR/E0631.rs:10:5\n+  --> $DIR/E0631.rs:10:9\n    |\n LL | fn bar<F: Fn<usize>>(_: F) {}\n    | -------------------------- required by `bar`\n@@ -42,7 +42,7 @@ LL |     fn f(_: u64) {}\n    |     ------------ found signature of `fn(u64) -> _`\n ...\n LL |     bar(f);\n-   |     ^^^ expected signature of `fn(usize) -> _`\n+   |         ^ expected signature of `fn(usize) -> _`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "12ae8acaee5cf2cb5ee0e16c164b74fd06844d92", "filename": "src/test/ui/mismatched_types/closure-arg-count.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr?ref=72252646a8f781509e6756180182887653f657ee", "patch": "@@ -105,42 +105,42 @@ LL |     let _it = vec![1, 2, 3].into_iter().enumerate().map(|i, x, y| i);\n    |                                                     expected closure that takes a single 2-tuple as argument\n \n error[E0593]: function is expected to take a single 2-tuple as argument, but it takes 0 arguments\n-  --> $DIR/closure-arg-count.rs:24:53\n+  --> $DIR/closure-arg-count.rs:24:57\n    |\n LL |     let _it = vec![1, 2, 3].into_iter().enumerate().map(foo);\n-   |                                                     ^^^ expected function that takes a single 2-tuple as argument\n+   |                                                         ^^^ expected function that takes a single 2-tuple as argument\n ...\n LL | fn foo() {}\n    | -------- takes 0 arguments\n \n error[E0593]: closure is expected to take a single 2-tuple as argument, but it takes 3 distinct arguments\n-  --> $DIR/closure-arg-count.rs:27:53\n+  --> $DIR/closure-arg-count.rs:27:57\n    |\n LL |     let bar = |i, x, y| i;\n    |               --------- takes 3 distinct arguments\n LL |     let _it = vec![1, 2, 3].into_iter().enumerate().map(bar);\n-   |                                                     ^^^ expected closure that takes a single 2-tuple as argument\n+   |                                                         ^^^ expected closure that takes a single 2-tuple as argument\n \n error[E0593]: function is expected to take a single 2-tuple as argument, but it takes 2 distinct arguments\n-  --> $DIR/closure-arg-count.rs:29:53\n+  --> $DIR/closure-arg-count.rs:29:57\n    |\n LL |     let _it = vec![1, 2, 3].into_iter().enumerate().map(qux);\n-   |                                                     ^^^ expected function that takes a single 2-tuple as argument\n+   |                                                         ^^^ expected function that takes a single 2-tuple as argument\n ...\n LL | fn qux(x: usize, y: usize) {}\n    | -------------------------- takes 2 distinct arguments\n \n error[E0593]: function is expected to take 1 argument, but it takes 2 arguments\n-  --> $DIR/closure-arg-count.rs:32:41\n+  --> $DIR/closure-arg-count.rs:32:45\n    |\n LL |     let _it = vec![1, 2, 3].into_iter().map(usize::checked_add);\n-   |                                         ^^^ expected function that takes 1 argument\n+   |                                             ^^^^^^^^^^^^^^^^^^ expected function that takes 1 argument\n \n error[E0593]: function is expected to take 0 arguments, but it takes 1 argument\n-  --> $DIR/closure-arg-count.rs:35:5\n+  --> $DIR/closure-arg-count.rs:35:10\n    |\n LL |     call(Foo);\n-   |     ^^^^ expected function that takes 0 arguments\n+   |          ^^^ expected function that takes 0 arguments\n ...\n LL | fn call<F, R>(_: F) where F: FnOnce() -> R {}\n    | ------------------------------------------ required by `call`"}, {"sha": "68bc17b4966f10e4bc330ea5a67ee1ea16210fce", "filename": "src/test/ui/mismatched_types/closure-arg-type-mismatch.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr?ref=72252646a8f781509e6756180182887653f657ee", "patch": "@@ -23,16 +23,16 @@ LL |     a.iter().map(|_: (u16, u16)| 45);\n    |              expected signature of `fn(&(u32, u32)) -> _`\n \n error[E0631]: type mismatch in function arguments\n-  --> $DIR/closure-arg-type-mismatch.rs:10:5\n+  --> $DIR/closure-arg-type-mismatch.rs:10:9\n    |\n LL | fn baz<F: Fn(*mut &u32)>(_: F) {}\n    | ------------------------------ required by `baz`\n LL | fn _test<'a>(f: fn(*mut &'a u32)) {\n LL |     baz(f);\n-   |     ^^^\n-   |     |\n-   |     expected signature of `for<'r> fn(*mut &'r u32) -> _`\n-   |     found signature of `fn(*mut &'a u32) -> _`\n+   |         ^\n+   |         |\n+   |         expected signature of `for<'r> fn(*mut &'r u32) -> _`\n+   |         found signature of `fn(*mut &'a u32) -> _`\n \n error[E0271]: type mismatch resolving `for<'r> <fn(*mut &'a u32) as std::ops::FnOnce<(*mut &'r u32,)>>::Output == ()`\n   --> $DIR/closure-arg-type-mismatch.rs:10:5"}, {"sha": "6342ee770ddafd96acb7ae64043c42817e00a8e8", "filename": "src/test/ui/mismatched_types/fn-variance-1.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fmismatched_types%2Ffn-variance-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fmismatched_types%2Ffn-variance-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Ffn-variance-1.stderr?ref=72252646a8f781509e6756180182887653f657ee", "patch": "@@ -1,5 +1,5 @@\n error[E0631]: type mismatch in function arguments\n-  --> $DIR/fn-variance-1.rs:11:5\n+  --> $DIR/fn-variance-1.rs:11:15\n    |\n LL | fn takes_mut(x: &mut isize) { }\n    | --------------------------- found signature of `for<'r> fn(&'r mut isize) -> _`\n@@ -8,10 +8,10 @@ LL | fn apply<T, F>(t: T, f: F) where F: FnOnce(T) {\n    | --------------------------------------------- required by `apply`\n ...\n LL |     apply(&3, takes_mut);\n-   |     ^^^^^ expected signature of `fn(&{integer}) -> _`\n+   |               ^^^^^^^^^ expected signature of `fn(&{integer}) -> _`\n \n error[E0631]: type mismatch in function arguments\n-  --> $DIR/fn-variance-1.rs:15:5\n+  --> $DIR/fn-variance-1.rs:15:19\n    |\n LL | fn takes_imm(x: &isize) { }\n    | ----------------------- found signature of `for<'r> fn(&'r isize) -> _`\n@@ -20,7 +20,7 @@ LL | fn apply<T, F>(t: T, f: F) where F: FnOnce(T) {\n    | --------------------------------------------- required by `apply`\n ...\n LL |     apply(&mut 3, takes_imm);\n-   |     ^^^^^ expected signature of `fn(&mut {integer}) -> _`\n+   |                   ^^^^^^^^^ expected signature of `fn(&mut {integer}) -> _`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "139d87d58b6409425aa9340683047f333145893a", "filename": "src/test/ui/mismatched_types/unboxed-closures-vtable-mismatch.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.stderr?ref=72252646a8f781509e6756180182887653f657ee", "patch": "@@ -1,5 +1,5 @@\n error[E0631]: type mismatch in closure arguments\n-  --> $DIR/unboxed-closures-vtable-mismatch.rs:15:13\n+  --> $DIR/unboxed-closures-vtable-mismatch.rs:15:24\n    |\n LL | fn call_it<F:FnMut(isize,isize)->isize>(y: isize, mut f: F) -> isize {\n    | -------------------------------------------------------------------- required by `call_it`\n@@ -8,7 +8,7 @@ LL |     let f = to_fn_mut(|x: usize, y: isize| -> isize { (x as isize) + y });\n    |                       ----------------------------- found signature of `fn(usize, isize) -> _`\n LL |\n LL |     let z = call_it(3, f);\n-   |             ^^^^^^^ expected signature of `fn(isize, isize) -> _`\n+   |                        ^ expected signature of `fn(isize, isize) -> _`\n \n error: aborting due to previous error\n "}, {"sha": "1cda2da5061a525643a66ef84507a5b328cd85fd", "filename": "src/test/ui/mutexguard-sync.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fmutexguard-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fmutexguard-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmutexguard-sync.stderr?ref=72252646a8f781509e6756180182887653f657ee", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: `std::cell::Cell<i32>` cannot be shared between threads safely\n-  --> $DIR/mutexguard-sync.rs:11:5\n+  --> $DIR/mutexguard-sync.rs:11:15\n    |\n LL | fn test_sync<T: Sync>(_t: T) {}\n    | ---------------------------- required by `test_sync`\n ...\n LL |     test_sync(guard);\n-   |     ^^^^^^^^^ `std::cell::Cell<i32>` cannot be shared between threads safely\n+   |               ^^^^^ `std::cell::Cell<i32>` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `std::cell::Cell<i32>`\n    = note: required because of the requirements on the impl of `std::marker::Sync` for `std::sync::MutexGuard<'_, std::cell::Cell<i32>>`"}, {"sha": "249ad1c58442163990d1f03d22192e85ff1c8812", "filename": "src/test/ui/namespace/namespace-mix.stderr", "status": "modified", "additions": 88, "deletions": 88, "changes": 176, "blob_url": "https://github.com/rust-lang/rust/blob/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr?ref=72252646a8f781509e6756180182887653f657ee", "patch": "@@ -67,400 +67,400 @@ LL | use namespace_mix::xm8::V;\n    |\n \n error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n-  --> $DIR/namespace-mix.rs:33:5\n+  --> $DIR/namespace-mix.rs:33:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n    | ----------------------------- required by `check`\n ...\n LL |     check(m1::S{});\n-   |     ^^^^^ the trait `Impossible` is not implemented for `c::Item`\n+   |           ^^^^^^^ the trait `Impossible` is not implemented for `c::Item`\n \n error[E0277]: the trait bound `c::S: Impossible` is not satisfied\n-  --> $DIR/namespace-mix.rs:35:5\n+  --> $DIR/namespace-mix.rs:35:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n    | ----------------------------- required by `check`\n ...\n LL |     check(m2::S{});\n-   |     ^^^^^ the trait `Impossible` is not implemented for `c::S`\n+   |           ^^^^^^^ the trait `Impossible` is not implemented for `c::S`\n \n error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n-  --> $DIR/namespace-mix.rs:36:5\n+  --> $DIR/namespace-mix.rs:36:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n    | ----------------------------- required by `check`\n ...\n LL |     check(m2::S);\n-   |     ^^^^^ the trait `Impossible` is not implemented for `c::Item`\n+   |           ^^^^^ the trait `Impossible` is not implemented for `c::Item`\n \n error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisfied\n-  --> $DIR/namespace-mix.rs:39:5\n+  --> $DIR/namespace-mix.rs:39:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n    | ----------------------------- required by `check`\n ...\n LL |     check(xm1::S{});\n-   |     ^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n+   |           ^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n \n error[E0277]: the trait bound `namespace_mix::c::S: Impossible` is not satisfied\n-  --> $DIR/namespace-mix.rs:41:5\n+  --> $DIR/namespace-mix.rs:41:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n    | ----------------------------- required by `check`\n ...\n LL |     check(xm2::S{});\n-   |     ^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::S`\n+   |           ^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::S`\n \n error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisfied\n-  --> $DIR/namespace-mix.rs:42:5\n+  --> $DIR/namespace-mix.rs:42:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n    | ----------------------------- required by `check`\n ...\n LL |     check(xm2::S);\n-   |     ^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n+   |           ^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n \n error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n-  --> $DIR/namespace-mix.rs:55:5\n+  --> $DIR/namespace-mix.rs:55:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n    | ----------------------------- required by `check`\n ...\n LL |     check(m3::TS{});\n-   |     ^^^^^ the trait `Impossible` is not implemented for `c::Item`\n+   |           ^^^^^^^^ the trait `Impossible` is not implemented for `c::Item`\n \n error[E0277]: the trait bound `fn() -> c::TS {c::TS}: Impossible` is not satisfied\n-  --> $DIR/namespace-mix.rs:56:5\n+  --> $DIR/namespace-mix.rs:56:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n    | ----------------------------- required by `check`\n ...\n LL |     check(m3::TS);\n-   |     ^^^^^ the trait `Impossible` is not implemented for `fn() -> c::TS {c::TS}`\n+   |           ^^^^^^ the trait `Impossible` is not implemented for `fn() -> c::TS {c::TS}`\n \n error[E0277]: the trait bound `c::TS: Impossible` is not satisfied\n-  --> $DIR/namespace-mix.rs:57:5\n+  --> $DIR/namespace-mix.rs:57:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n    | ----------------------------- required by `check`\n ...\n LL |     check(m4::TS{});\n-   |     ^^^^^ the trait `Impossible` is not implemented for `c::TS`\n+   |           ^^^^^^^^ the trait `Impossible` is not implemented for `c::TS`\n \n error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n-  --> $DIR/namespace-mix.rs:58:5\n+  --> $DIR/namespace-mix.rs:58:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n    | ----------------------------- required by `check`\n ...\n LL |     check(m4::TS);\n-   |     ^^^^^ the trait `Impossible` is not implemented for `c::Item`\n+   |           ^^^^^^ the trait `Impossible` is not implemented for `c::Item`\n \n error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisfied\n-  --> $DIR/namespace-mix.rs:61:5\n+  --> $DIR/namespace-mix.rs:61:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n    | ----------------------------- required by `check`\n ...\n LL |     check(xm3::TS{});\n-   |     ^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n+   |           ^^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n \n error[E0277]: the trait bound `fn() -> namespace_mix::c::TS {namespace_mix::c::TS}: Impossible` is not satisfied\n-  --> $DIR/namespace-mix.rs:62:5\n+  --> $DIR/namespace-mix.rs:62:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n    | ----------------------------- required by `check`\n ...\n LL |     check(xm3::TS);\n-   |     ^^^^^ the trait `Impossible` is not implemented for `fn() -> namespace_mix::c::TS {namespace_mix::c::TS}`\n+   |           ^^^^^^^ the trait `Impossible` is not implemented for `fn() -> namespace_mix::c::TS {namespace_mix::c::TS}`\n \n error[E0277]: the trait bound `namespace_mix::c::TS: Impossible` is not satisfied\n-  --> $DIR/namespace-mix.rs:63:5\n+  --> $DIR/namespace-mix.rs:63:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n    | ----------------------------- required by `check`\n ...\n LL |     check(xm4::TS{});\n-   |     ^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::TS`\n+   |           ^^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::TS`\n \n error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisfied\n-  --> $DIR/namespace-mix.rs:64:5\n+  --> $DIR/namespace-mix.rs:64:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n    | ----------------------------- required by `check`\n ...\n LL |     check(xm4::TS);\n-   |     ^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n+   |           ^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n \n error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n-  --> $DIR/namespace-mix.rs:77:5\n+  --> $DIR/namespace-mix.rs:77:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n    | ----------------------------- required by `check`\n ...\n LL |     check(m5::US{});\n-   |     ^^^^^ the trait `Impossible` is not implemented for `c::Item`\n+   |           ^^^^^^^^ the trait `Impossible` is not implemented for `c::Item`\n \n error[E0277]: the trait bound `c::US: Impossible` is not satisfied\n-  --> $DIR/namespace-mix.rs:78:5\n+  --> $DIR/namespace-mix.rs:78:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n    | ----------------------------- required by `check`\n ...\n LL |     check(m5::US);\n-   |     ^^^^^ the trait `Impossible` is not implemented for `c::US`\n+   |           ^^^^^^ the trait `Impossible` is not implemented for `c::US`\n \n error[E0277]: the trait bound `c::US: Impossible` is not satisfied\n-  --> $DIR/namespace-mix.rs:79:5\n+  --> $DIR/namespace-mix.rs:79:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n    | ----------------------------- required by `check`\n ...\n LL |     check(m6::US{});\n-   |     ^^^^^ the trait `Impossible` is not implemented for `c::US`\n+   |           ^^^^^^^^ the trait `Impossible` is not implemented for `c::US`\n \n error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n-  --> $DIR/namespace-mix.rs:80:5\n+  --> $DIR/namespace-mix.rs:80:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n    | ----------------------------- required by `check`\n ...\n LL |     check(m6::US);\n-   |     ^^^^^ the trait `Impossible` is not implemented for `c::Item`\n+   |           ^^^^^^ the trait `Impossible` is not implemented for `c::Item`\n \n error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisfied\n-  --> $DIR/namespace-mix.rs:83:5\n+  --> $DIR/namespace-mix.rs:83:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n    | ----------------------------- required by `check`\n ...\n LL |     check(xm5::US{});\n-   |     ^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n+   |           ^^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n \n error[E0277]: the trait bound `namespace_mix::c::US: Impossible` is not satisfied\n-  --> $DIR/namespace-mix.rs:84:5\n+  --> $DIR/namespace-mix.rs:84:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n    | ----------------------------- required by `check`\n ...\n LL |     check(xm5::US);\n-   |     ^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::US`\n+   |           ^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::US`\n \n error[E0277]: the trait bound `namespace_mix::c::US: Impossible` is not satisfied\n-  --> $DIR/namespace-mix.rs:85:5\n+  --> $DIR/namespace-mix.rs:85:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n    | ----------------------------- required by `check`\n ...\n LL |     check(xm6::US{});\n-   |     ^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::US`\n+   |           ^^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::US`\n \n error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisfied\n-  --> $DIR/namespace-mix.rs:86:5\n+  --> $DIR/namespace-mix.rs:86:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n    | ----------------------------- required by `check`\n ...\n LL |     check(xm6::US);\n-   |     ^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n+   |           ^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n \n error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n-  --> $DIR/namespace-mix.rs:99:5\n+  --> $DIR/namespace-mix.rs:99:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n    | ----------------------------- required by `check`\n ...\n LL |     check(m7::V{});\n-   |     ^^^^^ the trait `Impossible` is not implemented for `c::Item`\n+   |           ^^^^^^^ the trait `Impossible` is not implemented for `c::Item`\n \n error[E0277]: the trait bound `c::E: Impossible` is not satisfied\n-  --> $DIR/namespace-mix.rs:101:5\n+  --> $DIR/namespace-mix.rs:101:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n    | ----------------------------- required by `check`\n ...\n LL |     check(m8::V{});\n-   |     ^^^^^ the trait `Impossible` is not implemented for `c::E`\n+   |           ^^^^^^^ the trait `Impossible` is not implemented for `c::E`\n \n error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n-  --> $DIR/namespace-mix.rs:102:5\n+  --> $DIR/namespace-mix.rs:102:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n    | ----------------------------- required by `check`\n ...\n LL |     check(m8::V);\n-   |     ^^^^^ the trait `Impossible` is not implemented for `c::Item`\n+   |           ^^^^^ the trait `Impossible` is not implemented for `c::Item`\n \n error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisfied\n-  --> $DIR/namespace-mix.rs:105:5\n+  --> $DIR/namespace-mix.rs:105:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n    | ----------------------------- required by `check`\n ...\n LL |     check(xm7::V{});\n-   |     ^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n+   |           ^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n \n error[E0277]: the trait bound `namespace_mix::c::E: Impossible` is not satisfied\n-  --> $DIR/namespace-mix.rs:107:5\n+  --> $DIR/namespace-mix.rs:107:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n    | ----------------------------- required by `check`\n ...\n LL |     check(xm8::V{});\n-   |     ^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::E`\n+   |           ^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::E`\n \n error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisfied\n-  --> $DIR/namespace-mix.rs:108:5\n+  --> $DIR/namespace-mix.rs:108:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n    | ----------------------------- required by `check`\n ...\n LL |     check(xm8::V);\n-   |     ^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n+   |           ^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n \n error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n-  --> $DIR/namespace-mix.rs:121:5\n+  --> $DIR/namespace-mix.rs:121:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n    | ----------------------------- required by `check`\n ...\n LL |     check(m9::TV{});\n-   |     ^^^^^ the trait `Impossible` is not implemented for `c::Item`\n+   |           ^^^^^^^^ the trait `Impossible` is not implemented for `c::Item`\n \n error[E0277]: the trait bound `fn() -> c::E {c::E::TV}: Impossible` is not satisfied\n-  --> $DIR/namespace-mix.rs:122:5\n+  --> $DIR/namespace-mix.rs:122:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n    | ----------------------------- required by `check`\n ...\n LL |     check(m9::TV);\n-   |     ^^^^^ the trait `Impossible` is not implemented for `fn() -> c::E {c::E::TV}`\n+   |           ^^^^^^ the trait `Impossible` is not implemented for `fn() -> c::E {c::E::TV}`\n \n error[E0277]: the trait bound `c::E: Impossible` is not satisfied\n-  --> $DIR/namespace-mix.rs:123:5\n+  --> $DIR/namespace-mix.rs:123:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n    | ----------------------------- required by `check`\n ...\n LL |     check(mA::TV{});\n-   |     ^^^^^ the trait `Impossible` is not implemented for `c::E`\n+   |           ^^^^^^^^ the trait `Impossible` is not implemented for `c::E`\n \n error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n-  --> $DIR/namespace-mix.rs:124:5\n+  --> $DIR/namespace-mix.rs:124:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n    | ----------------------------- required by `check`\n ...\n LL |     check(mA::TV);\n-   |     ^^^^^ the trait `Impossible` is not implemented for `c::Item`\n+   |           ^^^^^^ the trait `Impossible` is not implemented for `c::Item`\n \n error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisfied\n-  --> $DIR/namespace-mix.rs:127:5\n+  --> $DIR/namespace-mix.rs:127:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n    | ----------------------------- required by `check`\n ...\n LL |     check(xm9::TV{});\n-   |     ^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n+   |           ^^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n \n error[E0277]: the trait bound `fn() -> namespace_mix::c::E {namespace_mix::xm7::TV}: Impossible` is not satisfied\n-  --> $DIR/namespace-mix.rs:128:5\n+  --> $DIR/namespace-mix.rs:128:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n    | ----------------------------- required by `check`\n ...\n LL |     check(xm9::TV);\n-   |     ^^^^^ the trait `Impossible` is not implemented for `fn() -> namespace_mix::c::E {namespace_mix::xm7::TV}`\n+   |           ^^^^^^^ the trait `Impossible` is not implemented for `fn() -> namespace_mix::c::E {namespace_mix::xm7::TV}`\n \n error[E0277]: the trait bound `namespace_mix::c::E: Impossible` is not satisfied\n-  --> $DIR/namespace-mix.rs:129:5\n+  --> $DIR/namespace-mix.rs:129:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n    | ----------------------------- required by `check`\n ...\n LL |     check(xmA::TV{});\n-   |     ^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::E`\n+   |           ^^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::E`\n \n error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisfied\n-  --> $DIR/namespace-mix.rs:130:5\n+  --> $DIR/namespace-mix.rs:130:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n    | ----------------------------- required by `check`\n ...\n LL |     check(xmA::TV);\n-   |     ^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n+   |           ^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n \n error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n-  --> $DIR/namespace-mix.rs:143:5\n+  --> $DIR/namespace-mix.rs:143:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n    | ----------------------------- required by `check`\n ...\n LL |     check(mB::UV{});\n-   |     ^^^^^ the trait `Impossible` is not implemented for `c::Item`\n+   |           ^^^^^^^^ the trait `Impossible` is not implemented for `c::Item`\n \n error[E0277]: the trait bound `c::E: Impossible` is not satisfied\n-  --> $DIR/namespace-mix.rs:144:5\n+  --> $DIR/namespace-mix.rs:144:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n    | ----------------------------- required by `check`\n ...\n LL |     check(mB::UV);\n-   |     ^^^^^ the trait `Impossible` is not implemented for `c::E`\n+   |           ^^^^^^ the trait `Impossible` is not implemented for `c::E`\n \n error[E0277]: the trait bound `c::E: Impossible` is not satisfied\n-  --> $DIR/namespace-mix.rs:145:5\n+  --> $DIR/namespace-mix.rs:145:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n    | ----------------------------- required by `check`\n ...\n LL |     check(mC::UV{});\n-   |     ^^^^^ the trait `Impossible` is not implemented for `c::E`\n+   |           ^^^^^^^^ the trait `Impossible` is not implemented for `c::E`\n \n error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n-  --> $DIR/namespace-mix.rs:146:5\n+  --> $DIR/namespace-mix.rs:146:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n    | ----------------------------- required by `check`\n ...\n LL |     check(mC::UV);\n-   |     ^^^^^ the trait `Impossible` is not implemented for `c::Item`\n+   |           ^^^^^^ the trait `Impossible` is not implemented for `c::Item`\n \n error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisfied\n-  --> $DIR/namespace-mix.rs:149:5\n+  --> $DIR/namespace-mix.rs:149:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n    | ----------------------------- required by `check`\n ...\n LL |     check(xmB::UV{});\n-   |     ^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n+   |           ^^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n \n error[E0277]: the trait bound `namespace_mix::c::E: Impossible` is not satisfied\n-  --> $DIR/namespace-mix.rs:150:5\n+  --> $DIR/namespace-mix.rs:150:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n    | ----------------------------- required by `check`\n ...\n LL |     check(xmB::UV);\n-   |     ^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::E`\n+   |           ^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::E`\n \n error[E0277]: the trait bound `namespace_mix::c::E: Impossible` is not satisfied\n-  --> $DIR/namespace-mix.rs:151:5\n+  --> $DIR/namespace-mix.rs:151:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n    | ----------------------------- required by `check`\n ...\n LL |     check(xmC::UV{});\n-   |     ^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::E`\n+   |           ^^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::E`\n \n error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisfied\n-  --> $DIR/namespace-mix.rs:152:5\n+  --> $DIR/namespace-mix.rs:152:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n    | ----------------------------- required by `check`\n ...\n LL |     check(xmC::UV);\n-   |     ^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n+   |           ^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n \n error: aborting due to 48 previous errors\n "}, {"sha": "de08634e16ac4a8c101b38bdfc4fd4dcfe3a527d", "filename": "src/test/ui/no_send-rc.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fno_send-rc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fno_send-rc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno_send-rc.stderr?ref=72252646a8f781509e6756180182887653f657ee", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: `std::rc::Rc<{integer}>` cannot be sent between threads safely\n-  --> $DIR/no_send-rc.rs:7:5\n+  --> $DIR/no_send-rc.rs:7:9\n    |\n LL | fn bar<T: Send>(_: T) {}\n    | --------------------- required by `bar`\n ...\n LL |     bar(x);\n-   |     ^^^ `std::rc::Rc<{integer}>` cannot be sent between threads safely\n+   |         ^ `std::rc::Rc<{integer}>` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `std::rc::Rc<{integer}>`\n "}, {"sha": "3865971fcfdd16517397da4e75158d27a5a3c790", "filename": "src/test/ui/no_send-struct.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fno_send-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fno_send-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno_send-struct.stderr?ref=72252646a8f781509e6756180182887653f657ee", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: `Foo` cannot be sent between threads safely\n-  --> $DIR/no_send-struct.rs:15:5\n+  --> $DIR/no_send-struct.rs:15:9\n    |\n LL | fn bar<T: Send>(_: T) {}\n    | --------------------- required by `bar`\n ...\n LL |     bar(x);\n-   |     ^^^ `Foo` cannot be sent between threads safely\n+   |         ^ `Foo` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `Foo`\n "}, {"sha": "13de5bd6fe84ba9e8de6ea0a31041d179909703c", "filename": "src/test/ui/no_share-struct.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fno_share-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fno_share-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno_share-struct.stderr?ref=72252646a8f781509e6756180182887653f657ee", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: `Foo` cannot be shared between threads safely\n-  --> $DIR/no_share-struct.rs:12:5\n+  --> $DIR/no_share-struct.rs:12:9\n    |\n LL | fn bar<T: Sync>(_: T) {}\n    | --------------------- required by `bar`\n ...\n LL |     bar(x);\n-   |     ^^^ `Foo` cannot be shared between threads safely\n+   |         ^ `Foo` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `Foo`\n "}, {"sha": "83ca9a7212b2275397815198d14b3154f391fa8b", "filename": "src/test/ui/object-does-not-impl-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fobject-does-not-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fobject-does-not-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-does-not-impl-trait.stderr?ref=72252646a8f781509e6756180182887653f657ee", "patch": "@@ -1,10 +1,10 @@\n error[E0277]: the trait bound `std::boxed::Box<dyn Foo>: Foo` is not satisfied\n-  --> $DIR/object-does-not-impl-trait.rs:6:35\n+  --> $DIR/object-does-not-impl-trait.rs:6:44\n    |\n LL | fn take_foo<F:Foo>(f: F) {}\n    | ------------------------ required by `take_foo`\n LL | fn take_object(f: Box<dyn Foo>) { take_foo(f); }\n-   |                                   ^^^^^^^^ the trait `Foo` is not implemented for `std::boxed::Box<dyn Foo>`\n+   |                                            ^ the trait `Foo` is not implemented for `std::boxed::Box<dyn Foo>`\n \n error: aborting due to previous error\n "}, {"sha": "f0651c4cdef0e33d10d316d2372c9b4d6ea30627", "filename": "src/test/ui/on-unimplemented/multiple-impls.stderr", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.stderr?ref=72252646a8f781509e6756180182887653f657ee", "patch": "@@ -1,57 +1,57 @@\n error[E0277]: the trait bound `[i32]: Index<u32>` is not satisfied\n-  --> $DIR/multiple-impls.rs:33:5\n+  --> $DIR/multiple-impls.rs:33:18\n    |\n LL |     fn index(&self, index: Idx) -> &Self::Output;\n    |     --------------------------------------------- required by `Index::index`\n ...\n LL |     Index::index(&[] as &[i32], 2u32);\n-   |     ^^^^^^^^^^^^ trait message\n-   |\n-   = help: the trait `Index<u32>` is not implemented for `[i32]`\n-\n-error[E0277]: the trait bound `[i32]: Index<u32>` is not satisfied\n-  --> $DIR/multiple-impls.rs:33:5\n-   |\n-LL |     Index::index(&[] as &[i32], 2u32);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ trait message\n+   |                  ^^^^^^^^^^^^^ trait message\n    |\n    = help: the trait `Index<u32>` is not implemented for `[i32]`\n \n error[E0277]: the trait bound `[i32]: Index<Foo<u32>>` is not satisfied\n-  --> $DIR/multiple-impls.rs:36:5\n+  --> $DIR/multiple-impls.rs:36:18\n    |\n LL |     fn index(&self, index: Idx) -> &Self::Output;\n    |     --------------------------------------------- required by `Index::index`\n ...\n LL |     Index::index(&[] as &[i32], Foo(2u32));\n-   |     ^^^^^^^^^^^^ on impl for Foo\n-   |\n-   = help: the trait `Index<Foo<u32>>` is not implemented for `[i32]`\n-\n-error[E0277]: the trait bound `[i32]: Index<Foo<u32>>` is not satisfied\n-  --> $DIR/multiple-impls.rs:36:5\n-   |\n-LL |     Index::index(&[] as &[i32], Foo(2u32));\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ on impl for Foo\n+   |                  ^^^^^^^^^^^^^ on impl for Foo\n    |\n    = help: the trait `Index<Foo<u32>>` is not implemented for `[i32]`\n \n error[E0277]: the trait bound `[i32]: Index<Bar<u32>>` is not satisfied\n-  --> $DIR/multiple-impls.rs:39:5\n+  --> $DIR/multiple-impls.rs:39:18\n    |\n LL |     fn index(&self, index: Idx) -> &Self::Output;\n    |     --------------------------------------------- required by `Index::index`\n ...\n LL |     Index::index(&[] as &[i32], Bar(2u32));\n-   |     ^^^^^^^^^^^^ on impl for Bar\n+   |                  ^^^^^^^^^^^^^ on impl for Bar\n    |\n    = help: the trait `Index<Bar<u32>>` is not implemented for `[i32]`\n \n+error[E0277]: the trait bound `[i32]: Index<u32>` is not satisfied\n+  --> $DIR/multiple-impls.rs:33:5\n+   |\n+LL |     Index::index(&[] as &[i32], 2u32);\n+   |     ^^^^^^^^^^^^ trait message\n+   |\n+   = help: the trait `Index<u32>` is not implemented for `[i32]`\n+\n+error[E0277]: the trait bound `[i32]: Index<Foo<u32>>` is not satisfied\n+  --> $DIR/multiple-impls.rs:36:5\n+   |\n+LL |     Index::index(&[] as &[i32], Foo(2u32));\n+   |     ^^^^^^^^^^^^ on impl for Foo\n+   |\n+   = help: the trait `Index<Foo<u32>>` is not implemented for `[i32]`\n+\n error[E0277]: the trait bound `[i32]: Index<Bar<u32>>` is not satisfied\n   --> $DIR/multiple-impls.rs:39:5\n    |\n LL |     Index::index(&[] as &[i32], Bar(2u32));\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ on impl for Bar\n+   |     ^^^^^^^^^^^^ on impl for Bar\n    |\n    = help: the trait `Index<Bar<u32>>` is not implemented for `[i32]`\n "}, {"sha": "f19fa8a07fe64822caf26969934b8da5f303caaf", "filename": "src/test/ui/on-unimplemented/on-impl.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.stderr?ref=72252646a8f781509e6756180182887653f657ee", "patch": "@@ -1,19 +1,19 @@\n error[E0277]: the trait bound `[i32]: Index<u32>` is not satisfied\n-  --> $DIR/on-impl.rs:22:5\n+  --> $DIR/on-impl.rs:22:25\n    |\n LL |     fn index(&self, index: Idx) -> &Self::Output;\n    |     --------------------------------------------- required by `Index::index`\n ...\n LL |     Index::<u32>::index(&[1, 2, 3] as &[i32], 2u32);\n-   |     ^^^^^^^^^^^^^^^^^^^ a usize is required to index into a slice\n+   |                         ^^^^^^^^^^^^^^^^^^^^ a usize is required to index into a slice\n    |\n    = help: the trait `Index<u32>` is not implemented for `[i32]`\n \n error[E0277]: the trait bound `[i32]: Index<u32>` is not satisfied\n   --> $DIR/on-impl.rs:22:5\n    |\n LL |     Index::<u32>::index(&[1, 2, 3] as &[i32], 2u32);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ a usize is required to index into a slice\n+   |     ^^^^^^^^^^^^^^^^^^^ a usize is required to index into a slice\n    |\n    = help: the trait `Index<u32>` is not implemented for `[i32]`\n "}, {"sha": "c1b60e0823fd478442cc41458ed7352467510e31", "filename": "src/test/ui/phantom-oibit.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fphantom-oibit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fphantom-oibit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fphantom-oibit.stderr?ref=72252646a8f781509e6756180182887653f657ee", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: `T` cannot be shared between threads safely\n-  --> $DIR/phantom-oibit.rs:21:5\n+  --> $DIR/phantom-oibit.rs:21:12\n    |\n LL | fn is_zen<T: Zen>(_: T) {}\n    | ----------------------- required by `is_zen`\n ...\n LL |     is_zen(x)\n-   |     ^^^^^^ `T` cannot be shared between threads safely\n+   |            ^ `T` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `T`\n    = help: consider adding a `where T: std::marker::Sync` bound\n@@ -14,13 +14,13 @@ LL |     is_zen(x)\n    = note: required because it appears within the type `Guard<'_, T>`\n \n error[E0277]: `T` cannot be shared between threads safely\n-  --> $DIR/phantom-oibit.rs:26:5\n+  --> $DIR/phantom-oibit.rs:26:12\n    |\n LL | fn is_zen<T: Zen>(_: T) {}\n    | ----------------------- required by `is_zen`\n ...\n LL |     is_zen(x)\n-   |     ^^^^^^ `T` cannot be shared between threads safely\n+   |            ^ `T` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `T`\n    = help: consider adding a `where T: std::marker::Sync` bound"}, {"sha": "9f21aaaebad58ea2e9b1e1fe318cb4fd02946d5d", "filename": "src/test/ui/str/str-idx.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fstr%2Fstr-idx.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fstr%2Fstr-idx.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-idx.stderr?ref=72252646a8f781509e6756180182887653f657ee", "patch": "@@ -10,20 +10,20 @@ LL |     let _: u8 = s[4];\n    = note: required because of the requirements on the impl of `std::ops::Index<{integer}>` for `str`\n \n error[E0277]: the type `str` cannot be indexed by `{integer}`\n-  --> $DIR/str-idx.rs:4:15\n+  --> $DIR/str-idx.rs:4:19\n    |\n LL |     let _ = s.get(4);\n-   |               ^^^ string indices are ranges of `usize`\n+   |                   ^ string indices are ranges of `usize`\n    |\n    = help: the trait `std::slice::SliceIndex<str>` is not implemented for `{integer}`\n    = note: you can use `.chars().nth()` or `.bytes().nth()`\n            see chapter in The Book <https://doc.rust-lang.org/book/ch08-02-strings.html#indexing-into-strings>\n \n error[E0277]: the type `str` cannot be indexed by `{integer}`\n-  --> $DIR/str-idx.rs:5:15\n+  --> $DIR/str-idx.rs:5:29\n    |\n LL |     let _ = s.get_unchecked(4);\n-   |               ^^^^^^^^^^^^^ string indices are ranges of `usize`\n+   |                             ^ string indices are ranges of `usize`\n    |\n    = help: the trait `std::slice::SliceIndex<str>` is not implemented for `{integer}`\n    = note: you can use `.chars().nth()` or `.bytes().nth()`"}, {"sha": "372077a465e4a6c0284ce81ddadc96b19106c154", "filename": "src/test/ui/str/str-mut-idx.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr?ref=72252646a8f781509e6756180182887653f657ee", "patch": "@@ -30,20 +30,20 @@ LL |     s[1usize] = bot();\n    = note: required because of the requirements on the impl of `std::ops::Index<usize>` for `str`\n \n error[E0277]: the type `str` cannot be indexed by `{integer}`\n-  --> $DIR/str-mut-idx.rs:9:7\n+  --> $DIR/str-mut-idx.rs:9:15\n    |\n LL |     s.get_mut(1);\n-   |       ^^^^^^^ string indices are ranges of `usize`\n+   |               ^ string indices are ranges of `usize`\n    |\n    = help: the trait `std::slice::SliceIndex<str>` is not implemented for `{integer}`\n    = note: you can use `.chars().nth()` or `.bytes().nth()`\n            see chapter in The Book <https://doc.rust-lang.org/book/ch08-02-strings.html#indexing-into-strings>\n \n error[E0277]: the type `str` cannot be indexed by `{integer}`\n-  --> $DIR/str-mut-idx.rs:11:7\n+  --> $DIR/str-mut-idx.rs:11:25\n    |\n LL |     s.get_unchecked_mut(1);\n-   |       ^^^^^^^^^^^^^^^^^ string indices are ranges of `usize`\n+   |                         ^ string indices are ranges of `usize`\n    |\n    = help: the trait `std::slice::SliceIndex<str>` is not implemented for `{integer}`\n    = note: you can use `.chars().nth()` or `.bytes().nth()`"}, {"sha": "6bb653389966960e4bd35a6df55b7cd671801331", "filename": "src/test/ui/suggestions/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fsuggestions%2Fasync-fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fsuggestions%2Fasync-fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fasync-fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr?ref=72252646a8f781509e6756180182887653f657ee", "patch": "@@ -1,13 +1,14 @@\n error[E0277]: the trait bound `fn() -> impl std::future::Future {foo}: std::future::Future` is not satisfied\n-  --> $DIR/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:9:5\n+  --> $DIR/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:9:9\n    |\n LL | fn bar(f: impl Future<Output=()>) {}\n    | --------------------------------- required by `bar`\n ...\n LL |     bar(foo);\n-   |     ^^^ the trait `std::future::Future` is not implemented for `fn() -> impl std::future::Future {foo}`\n-   |\n-   = help: use parentheses to call the function: `foo()`\n+   |         ^^^\n+   |         |\n+   |         the trait `std::future::Future` is not implemented for `fn() -> impl std::future::Future {foo}`\n+   |         help: use parentheses to call the function: `foo()`\n \n error: aborting due to previous error\n "}, {"sha": "59726c82c2377b12fc676ab39fbebaaa1175d649", "filename": "src/test/ui/suggestions/fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fsuggestions%2Ffn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fsuggestions%2Ffn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffn-ctor-passed-as-arg-where-it-should-have-been-called.stderr?ref=72252646a8f781509e6756180182887653f657ee", "patch": "@@ -1,13 +1,14 @@\n error[E0277]: the trait bound `fn() -> impl T {foo}: T` is not satisfied\n-  --> $DIR/fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:17:5\n+  --> $DIR/fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:17:9\n    |\n LL | fn bar(f: impl T<O=()>) {}\n    | ----------------------- required by `bar`\n ...\n LL |     bar(foo);\n-   |     ^^^ the trait `T` is not implemented for `fn() -> impl T {foo}`\n-   |\n-   = help: use parentheses to call the function: `foo()`\n+   |         ^^^\n+   |         |\n+   |         the trait `T` is not implemented for `fn() -> impl T {foo}`\n+   |         help: use parentheses to call the function: `foo()`\n \n error: aborting due to previous error\n "}, {"sha": "b5801e9162fb3d991f877b580fbb067fa46e215f", "filename": "src/test/ui/suggestions/issue-62843.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fsuggestions%2Fissue-62843.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fsuggestions%2Fissue-62843.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-62843.stderr?ref=72252646a8f781509e6756180182887653f657ee", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: expected a `std::ops::FnMut<(char,)>` closure, found `std::string::String`\n-  --> $DIR/issue-62843.rs:4:27\n+  --> $DIR/issue-62843.rs:4:32\n    |\n LL |     println!(\"{:?}\", line.find(pattern));\n-   |                           ^^^^ expected an `FnMut<(char,)>` closure, found `std::string::String`\n+   |                                ^^^^^^^ expected an `FnMut<(char,)>` closure, found `std::string::String`\n    |\n    = help: the trait `std::ops::FnMut<(char,)>` is not implemented for `std::string::String`\n    = note: borrowing the `std::string::String` might fix the problem"}, {"sha": "76d486a51e5cc7009443e81c903676310a8f56a8", "filename": "src/test/ui/traits/traits-inductive-overflow-supertrait-oibit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-supertrait-oibit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-supertrait-oibit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-supertrait-oibit.stderr?ref=72252646a8f781509e6756180182887653f657ee", "patch": "@@ -5,13 +5,13 @@ LL | auto trait Magic: Copy {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `NoClone: std::marker::Copy` is not satisfied\n-  --> $DIR/traits-inductive-overflow-supertrait-oibit.rs:15:18\n+  --> $DIR/traits-inductive-overflow-supertrait-oibit.rs:15:23\n    |\n LL | fn copy<T: Magic>(x: T) -> (T, T) { (x, x) }\n    | --------------------------------- required by `copy`\n ...\n LL |     let (a, b) = copy(NoClone);\n-   |                  ^^^^ the trait `std::marker::Copy` is not implemented for `NoClone`\n+   |                       ^^^^^^^ the trait `std::marker::Copy` is not implemented for `NoClone`\n    |\n    = note: required because of the requirements on the impl of `Magic` for `NoClone`\n "}, {"sha": "022b12d256cc3a28931bd10dfb5876a492a477b8", "filename": "src/test/ui/traits/traits-negative-impls.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Ftraits%2Ftraits-negative-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Ftraits%2Ftraits-negative-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftraits-negative-impls.stderr?ref=72252646a8f781509e6756180182887653f657ee", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: `dummy::TestType` cannot be sent between threads safely\n-  --> $DIR/traits-negative-impls.rs:23:5\n+  --> $DIR/traits-negative-impls.rs:23:11\n    |\n LL | struct Outer<T: Send>(T);\n    | ------------------------- required by `Outer`\n ...\n LL |     Outer(TestType);\n-   |     ^^^^^ `dummy::TestType` cannot be sent between threads safely\n+   |           ^^^^^^^^ `dummy::TestType` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `dummy::TestType`\n \n@@ -21,63 +21,63 @@ LL |     Outer(TestType);\n    = help: the trait `std::marker::Send` is not implemented for `dummy::TestType`\n \n error[E0277]: `dummy1b::TestType` cannot be sent between threads safely\n-  --> $DIR/traits-negative-impls.rs:32:5\n+  --> $DIR/traits-negative-impls.rs:32:13\n    |\n LL | fn is_send<T: Send>(_: T) {}\n    | ------------------------- required by `is_send`\n ...\n LL |     is_send(TestType);\n-   |     ^^^^^^^ `dummy1b::TestType` cannot be sent between threads safely\n+   |             ^^^^^^^^ `dummy1b::TestType` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `dummy1b::TestType`\n \n error[E0277]: `dummy1c::TestType` cannot be sent between threads safely\n-  --> $DIR/traits-negative-impls.rs:40:5\n+  --> $DIR/traits-negative-impls.rs:40:13\n    |\n LL | fn is_send<T: Send>(_: T) {}\n    | ------------------------- required by `is_send`\n ...\n LL |     is_send((8, TestType));\n-   |     ^^^^^^^ `dummy1c::TestType` cannot be sent between threads safely\n+   |             ^^^^^^^^^^^^^ `dummy1c::TestType` cannot be sent between threads safely\n    |\n    = help: within `({integer}, dummy1c::TestType)`, the trait `std::marker::Send` is not implemented for `dummy1c::TestType`\n    = note: required because it appears within the type `({integer}, dummy1c::TestType)`\n \n error[E0277]: `dummy2::TestType` cannot be sent between threads safely\n-  --> $DIR/traits-negative-impls.rs:48:5\n+  --> $DIR/traits-negative-impls.rs:48:13\n    |\n LL | fn is_send<T: Send>(_: T) {}\n    | ------------------------- required by `is_send`\n ...\n LL |     is_send(Box::new(TestType));\n-   |     ^^^^^^^ `dummy2::TestType` cannot be sent between threads safely\n+   |             ^^^^^^^^^^^^^^^^^^ `dummy2::TestType` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `dummy2::TestType`\n    = note: required because of the requirements on the impl of `std::marker::Send` for `std::ptr::Unique<dummy2::TestType>`\n    = note: required because it appears within the type `std::boxed::Box<dummy2::TestType>`\n \n error[E0277]: `dummy3::TestType` cannot be sent between threads safely\n-  --> $DIR/traits-negative-impls.rs:56:5\n+  --> $DIR/traits-negative-impls.rs:56:13\n    |\n LL | fn is_send<T: Send>(_: T) {}\n    | ------------------------- required by `is_send`\n ...\n LL |     is_send(Box::new(Outer2(TestType)));\n-   |     ^^^^^^^ `dummy3::TestType` cannot be sent between threads safely\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ `dummy3::TestType` cannot be sent between threads safely\n    |\n    = help: within `Outer2<dummy3::TestType>`, the trait `std::marker::Send` is not implemented for `dummy3::TestType`\n    = note: required because it appears within the type `Outer2<dummy3::TestType>`\n    = note: required because of the requirements on the impl of `std::marker::Send` for `std::ptr::Unique<Outer2<dummy3::TestType>>`\n    = note: required because it appears within the type `std::boxed::Box<Outer2<dummy3::TestType>>`\n \n error[E0277]: `main::TestType` cannot be sent between threads safely\n-  --> $DIR/traits-negative-impls.rs:66:5\n+  --> $DIR/traits-negative-impls.rs:66:13\n    |\n LL | fn is_sync<T: Sync>(_: T) {}\n    | ------------------------- required by `is_sync`\n ...\n LL |     is_sync(Outer2(TestType));\n-   |     ^^^^^^^ `main::TestType` cannot be sent between threads safely\n+   |             ^^^^^^^^^^^^^^^^ `main::TestType` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `main::TestType`\n    = note: required because of the requirements on the impl of `std::marker::Sync` for `Outer2<main::TestType>`"}, {"sha": "49393a8678ef8962f77c7b15fe6bc9854ea24f80", "filename": "src/test/ui/trivial-bounds/trivial-bounds-leak.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-leak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-leak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-leak.stderr?ref=72252646a8f781509e6756180182887653f657ee", "patch": "@@ -19,19 +19,19 @@ LL |     3i32.test();\n            candidate #1: `Foo`\n \n error[E0277]: the trait bound `i32: Foo` is not satisfied\n-  --> $DIR/trivial-bounds-leak.rs:25:5\n+  --> $DIR/trivial-bounds-leak.rs:25:15\n    |\n LL |     fn test(&self);\n    |     --------------- required by `Foo::test`\n ...\n LL |     Foo::test(&4i32);\n-   |     ^^^^^^^^^ the trait `Foo` is not implemented for `i32`\n+   |               ^^^^^ the trait `Foo` is not implemented for `i32`\n \n error[E0277]: the trait bound `i32: Foo` is not satisfied\n-  --> $DIR/trivial-bounds-leak.rs:26:5\n+  --> $DIR/trivial-bounds-leak.rs:26:22\n    |\n LL |     generic_function(5i32);\n-   |     ^^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `i32`\n+   |                      ^^^^ the trait `Foo` is not implemented for `i32`\n ...\n LL | fn generic_function<T: Foo>(t: T) {}\n    | --------------------------------- required by `generic_function`"}, {"sha": "602c3c5c3593b216c57ca3b2107f572d4a06bf03", "filename": "src/test/ui/try-operator-on-main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Ftry-operator-on-main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Ftry-operator-on-main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-operator-on-main.rs?ref=72252646a8f781509e6756180182887653f657ee", "patch": "@@ -19,7 +19,7 @@ fn main() {\n \n fn try_trait_generic<T: Try>() -> T {\n     // and a non-`Try` object on a `Try` fn.\n-    ()?; //~ ERROR the `?` operator can only\n+    ()?; //~ ERROR the `?` operator can only be applied to values that implement `std::ops::Try`\n \n     loop {}\n }"}, {"sha": "742a709958fa09ae72c764a95e90c72cf4870bba", "filename": "src/test/ui/type/type-check-defaults.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr?ref=72252646a8f781509e6756180182887653f657ee", "patch": "@@ -20,30 +20,30 @@ LL | struct WellFormedNoBounds<Z:?Sized = Foo<i32, i32>>(Z);\n    = help: the trait `std::iter::FromIterator<i32>` is not implemented for `i32`\n \n error[E0277]: the trait bound `std::string::String: std::marker::Copy` is not satisfied\n-  --> $DIR/type-check-defaults.rs:11:1\n+  --> $DIR/type-check-defaults.rs:11:17\n    |\n LL | struct Bounds<T:Copy=String>(T);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   | |\n-   | the trait `std::marker::Copy` is not implemented for `std::string::String`\n+   | ----------------^^^^------------\n+   | |               |\n+   | |               the trait `std::marker::Copy` is not implemented for `std::string::String`\n    | required by `Bounds`\n \n error[E0277]: the trait bound `std::string::String: std::marker::Copy` is not satisfied\n-  --> $DIR/type-check-defaults.rs:14:1\n+  --> $DIR/type-check-defaults.rs:14:42\n    |\n LL | struct WhereClause<T=String>(T) where T: Copy;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   | |\n-   | the trait `std::marker::Copy` is not implemented for `std::string::String`\n+   | -----------------------------------------^^^^-\n+   | |                                        |\n+   | |                                        the trait `std::marker::Copy` is not implemented for `std::string::String`\n    | required by `WhereClause`\n \n error[E0277]: the trait bound `std::string::String: std::marker::Copy` is not satisfied\n-  --> $DIR/type-check-defaults.rs:17:1\n+  --> $DIR/type-check-defaults.rs:17:20\n    |\n LL | trait TraitBound<T:Copy=String> {}\n-   | -------------------------------^^^\n-   | |\n-   | the trait `std::marker::Copy` is not implemented for `std::string::String`\n+   | -------------------^^^^--------\n+   | |                  |\n+   | |                  the trait `std::marker::Copy` is not implemented for `std::string::String`\n    | required by `TraitBound`\n \n error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n@@ -57,12 +57,12 @@ LL | trait Base<T = String>: Super<T> { }\n    = help: consider adding a `where T: std::marker::Copy` bound\n \n error[E0277]: cannot add `u8` to `i32`\n-  --> $DIR/type-check-defaults.rs:24:1\n+  --> $DIR/type-check-defaults.rs:24:66\n    |\n LL | trait ProjectionPred<T:Iterator = IntoIter<i32>> where T::Item : Add<u8> {}\n-   | ------------------------------------------------------------------------^^^\n-   | |\n-   | no implementation for `i32 + u8`\n+   | -----------------------------------------------------------------^^^^^^^\n+   | |                                                                |\n+   | |                                                                no implementation for `i32 + u8`\n    | required by `ProjectionPred`\n    |\n    = help: the trait `std::ops::Add<u8>` is not implemented for `i32`"}, {"sha": "8b3032b088d0ec062112ce22729f5cc50082e64f", "filename": "src/test/ui/typeck/typeck-unsafe-always-share.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-unsafe-always-share.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-unsafe-always-share.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-unsafe-always-share.stderr?ref=72252646a8f781509e6756180182887653f657ee", "patch": "@@ -1,22 +1,22 @@\n error[E0277]: `std::cell::UnsafeCell<MySync<{integer}>>` cannot be shared between threads safely\n-  --> $DIR/typeck-unsafe-always-share.rs:19:5\n+  --> $DIR/typeck-unsafe-always-share.rs:19:10\n    |\n LL | fn test<T: Sync>(s: T) {}\n    | ---------------------- required by `test`\n ...\n LL |     test(us);\n-   |     ^^^^ `std::cell::UnsafeCell<MySync<{integer}>>` cannot be shared between threads safely\n+   |          ^^ `std::cell::UnsafeCell<MySync<{integer}>>` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `std::cell::UnsafeCell<MySync<{integer}>>`\n \n error[E0277]: `std::cell::UnsafeCell<NoSync>` cannot be shared between threads safely\n-  --> $DIR/typeck-unsafe-always-share.rs:23:5\n+  --> $DIR/typeck-unsafe-always-share.rs:23:10\n    |\n LL | fn test<T: Sync>(s: T) {}\n    | ---------------------- required by `test`\n ...\n LL |     test(uns);\n-   |     ^^^^ `std::cell::UnsafeCell<NoSync>` cannot be shared between threads safely\n+   |          ^^^ `std::cell::UnsafeCell<NoSync>` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `std::cell::UnsafeCell<NoSync>`\n \n@@ -33,13 +33,13 @@ LL |     test(ms);\n    = note: required because it appears within the type `MySync<NoSync>`\n \n error[E0277]: `NoSync` cannot be shared between threads safely\n-  --> $DIR/typeck-unsafe-always-share.rs:30:5\n+  --> $DIR/typeck-unsafe-always-share.rs:30:10\n    |\n LL | fn test<T: Sync>(s: T) {}\n    | ---------------------- required by `test`\n ...\n LL |     test(NoSync);\n-   |     ^^^^ `NoSync` cannot be shared between threads safely\n+   |          ^^^^^^ `NoSync` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `NoSync`\n "}, {"sha": "d03397e42445c6423af14bc176bac40bb182a432", "filename": "src/test/ui/unboxed-closures/unboxed-closures-fnmut-as-fn.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-fnmut-as-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-fnmut-as-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-fnmut-as-fn.stderr?ref=72252646a8f781509e6756180182887653f657ee", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: expected a `std::ops::Fn<(isize,)>` closure, found `S`\n-  --> $DIR/unboxed-closures-fnmut-as-fn.rs:28:13\n+  --> $DIR/unboxed-closures-fnmut-as-fn.rs:28:21\n    |\n LL | fn call_it<F:Fn(isize)->isize>(f: &F, x: isize) -> isize {\n    | -------------------------------------------------------- required by `call_it`\n ...\n LL |     let x = call_it(&S, 22);\n-   |             ^^^^^^^ expected an `Fn<(isize,)>` closure, found `S`\n+   |                     ^^ expected an `Fn<(isize,)>` closure, found `S`\n    |\n    = help: the trait `std::ops::Fn<(isize,)>` is not implemented for `S`\n "}, {"sha": "bde30729a3ca38ad28a235e11a1fe57794702606", "filename": "src/test/ui/unboxed-closures/unboxed-closures-unsafe-extern-fn.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-unsafe-extern-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-unsafe-extern-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-unsafe-extern-fn.stderr?ref=72252646a8f781509e6756180182887653f657ee", "patch": "@@ -1,55 +1,55 @@\n error[E0277]: expected a `std::ops::Fn<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n-  --> $DIR/unboxed-closures-unsafe-extern-fn.rs:12:13\n+  --> $DIR/unboxed-closures-unsafe-extern-fn.rs:12:21\n    |\n LL | fn call_it<F:Fn(&isize)->isize>(_: &F, _: isize) -> isize { 0 }\n    | --------------------------------------------------------- required by `call_it`\n ...\n LL |     let x = call_it(&square, 22);\n-   |             ^^^^^^^ expected an `Fn<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n+   |                     ^^^^^^^ expected an `Fn<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n    |\n    = help: the trait `for<'r> std::ops::Fn<(&'r isize,)>` is not implemented for `for<'r> unsafe fn(&'r isize) -> isize {square}`\n \n error[E0277]: expected a `std::ops::FnOnce<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n-  --> $DIR/unboxed-closures-unsafe-extern-fn.rs:12:13\n+  --> $DIR/unboxed-closures-unsafe-extern-fn.rs:12:21\n    |\n LL | fn call_it<F:Fn(&isize)->isize>(_: &F, _: isize) -> isize { 0 }\n    | --------------------------------------------------------- required by `call_it`\n ...\n LL |     let x = call_it(&square, 22);\n-   |             ^^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n+   |                     ^^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n    |\n    = help: the trait `std::ops::FnOnce<(&isize,)>` is not implemented for `for<'r> unsafe fn(&'r isize) -> isize {square}`\n \n error[E0277]: expected a `std::ops::FnMut<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n-  --> $DIR/unboxed-closures-unsafe-extern-fn.rs:18:13\n+  --> $DIR/unboxed-closures-unsafe-extern-fn.rs:18:25\n    |\n LL | fn call_it_mut<F:FnMut(&isize)->isize>(_: &mut F, _: isize) -> isize { 0 }\n    | -------------------------------------------------------------------- required by `call_it_mut`\n ...\n LL |     let y = call_it_mut(&mut square, 22);\n-   |             ^^^^^^^^^^^ expected an `FnMut<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n+   |                         ^^^^^^^^^^^ expected an `FnMut<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n    |\n    = help: the trait `for<'r> std::ops::FnMut<(&'r isize,)>` is not implemented for `for<'r> unsafe fn(&'r isize) -> isize {square}`\n \n error[E0277]: expected a `std::ops::FnOnce<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n-  --> $DIR/unboxed-closures-unsafe-extern-fn.rs:18:13\n+  --> $DIR/unboxed-closures-unsafe-extern-fn.rs:18:25\n    |\n LL | fn call_it_mut<F:FnMut(&isize)->isize>(_: &mut F, _: isize) -> isize { 0 }\n    | -------------------------------------------------------------------- required by `call_it_mut`\n ...\n LL |     let y = call_it_mut(&mut square, 22);\n-   |             ^^^^^^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n+   |                         ^^^^^^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n    |\n    = help: the trait `std::ops::FnOnce<(&isize,)>` is not implemented for `for<'r> unsafe fn(&'r isize) -> isize {square}`\n \n error[E0277]: expected a `std::ops::FnOnce<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n-  --> $DIR/unboxed-closures-unsafe-extern-fn.rs:24:13\n+  --> $DIR/unboxed-closures-unsafe-extern-fn.rs:24:26\n    |\n LL | fn call_it_once<F:FnOnce(&isize)->isize>(_: F, _: isize) -> isize { 0 }\n    | ----------------------------------------------------------------- required by `call_it_once`\n ...\n LL |     let z = call_it_once(square, 22);\n-   |             ^^^^^^^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n+   |                          ^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n    |\n    = help: the trait `std::ops::FnOnce<(&isize,)>` is not implemented for `for<'r> unsafe fn(&'r isize) -> isize {square}`\n "}, {"sha": "7b393b35f298d27b5c85bbd0563c11c22e133129", "filename": "src/test/ui/unboxed-closures/unboxed-closures-wrong-abi.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-abi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-abi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-abi.stderr?ref=72252646a8f781509e6756180182887653f657ee", "patch": "@@ -1,55 +1,55 @@\n error[E0277]: expected a `std::ops::Fn<(&isize,)>` closure, found `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n-  --> $DIR/unboxed-closures-wrong-abi.rs:12:13\n+  --> $DIR/unboxed-closures-wrong-abi.rs:12:21\n    |\n LL | fn call_it<F:Fn(&isize)->isize>(_: &F, _: isize) -> isize { 0 }\n    | --------------------------------------------------------- required by `call_it`\n ...\n LL |     let x = call_it(&square, 22);\n-   |             ^^^^^^^ expected an `Fn<(&isize,)>` closure, found `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n+   |                     ^^^^^^^ expected an `Fn<(&isize,)>` closure, found `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n    |\n    = help: the trait `for<'r> std::ops::Fn<(&'r isize,)>` is not implemented for `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n \n error[E0277]: expected a `std::ops::FnOnce<(&isize,)>` closure, found `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n-  --> $DIR/unboxed-closures-wrong-abi.rs:12:13\n+  --> $DIR/unboxed-closures-wrong-abi.rs:12:21\n    |\n LL | fn call_it<F:Fn(&isize)->isize>(_: &F, _: isize) -> isize { 0 }\n    | --------------------------------------------------------- required by `call_it`\n ...\n LL |     let x = call_it(&square, 22);\n-   |             ^^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n+   |                     ^^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n    |\n    = help: the trait `std::ops::FnOnce<(&isize,)>` is not implemented for `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n \n error[E0277]: expected a `std::ops::FnMut<(&isize,)>` closure, found `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n-  --> $DIR/unboxed-closures-wrong-abi.rs:18:13\n+  --> $DIR/unboxed-closures-wrong-abi.rs:18:25\n    |\n LL | fn call_it_mut<F:FnMut(&isize)->isize>(_: &mut F, _: isize) -> isize { 0 }\n    | -------------------------------------------------------------------- required by `call_it_mut`\n ...\n LL |     let y = call_it_mut(&mut square, 22);\n-   |             ^^^^^^^^^^^ expected an `FnMut<(&isize,)>` closure, found `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n+   |                         ^^^^^^^^^^^ expected an `FnMut<(&isize,)>` closure, found `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n    |\n    = help: the trait `for<'r> std::ops::FnMut<(&'r isize,)>` is not implemented for `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n \n error[E0277]: expected a `std::ops::FnOnce<(&isize,)>` closure, found `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n-  --> $DIR/unboxed-closures-wrong-abi.rs:18:13\n+  --> $DIR/unboxed-closures-wrong-abi.rs:18:25\n    |\n LL | fn call_it_mut<F:FnMut(&isize)->isize>(_: &mut F, _: isize) -> isize { 0 }\n    | -------------------------------------------------------------------- required by `call_it_mut`\n ...\n LL |     let y = call_it_mut(&mut square, 22);\n-   |             ^^^^^^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n+   |                         ^^^^^^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n    |\n    = help: the trait `std::ops::FnOnce<(&isize,)>` is not implemented for `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n \n error[E0277]: expected a `std::ops::FnOnce<(&isize,)>` closure, found `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n-  --> $DIR/unboxed-closures-wrong-abi.rs:24:13\n+  --> $DIR/unboxed-closures-wrong-abi.rs:24:26\n    |\n LL | fn call_it_once<F:FnOnce(&isize)->isize>(_: F, _: isize) -> isize { 0 }\n    | ----------------------------------------------------------------- required by `call_it_once`\n ...\n LL |     let z = call_it_once(square, 22);\n-   |             ^^^^^^^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n+   |                          ^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n    |\n    = help: the trait `std::ops::FnOnce<(&isize,)>` is not implemented for `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n "}, {"sha": "68fc0d45b9a8c22b57096930d67dedf766cf7620", "filename": "src/test/ui/unboxed-closures/unboxed-closures-wrong-arg-type-extern-fn.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-arg-type-extern-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-arg-type-extern-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-arg-type-extern-fn.stderr?ref=72252646a8f781509e6756180182887653f657ee", "patch": "@@ -1,55 +1,55 @@\n error[E0277]: expected a `std::ops::Fn<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n-  --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:13:13\n+  --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:13:21\n    |\n LL | fn call_it<F:Fn(&isize)->isize>(_: &F, _: isize) -> isize { 0 }\n    | --------------------------------------------------------- required by `call_it`\n ...\n LL |     let x = call_it(&square, 22);\n-   |             ^^^^^^^ expected an `Fn<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n+   |                     ^^^^^^^ expected an `Fn<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n    |\n    = help: the trait `for<'r> std::ops::Fn<(&'r isize,)>` is not implemented for `unsafe fn(isize) -> isize {square}`\n \n error[E0277]: expected a `std::ops::FnOnce<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n-  --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:13:13\n+  --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:13:21\n    |\n LL | fn call_it<F:Fn(&isize)->isize>(_: &F, _: isize) -> isize { 0 }\n    | --------------------------------------------------------- required by `call_it`\n ...\n LL |     let x = call_it(&square, 22);\n-   |             ^^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n+   |                     ^^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n    |\n    = help: the trait `std::ops::FnOnce<(&isize,)>` is not implemented for `unsafe fn(isize) -> isize {square}`\n \n error[E0277]: expected a `std::ops::FnMut<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n-  --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:19:13\n+  --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:19:25\n    |\n LL | fn call_it_mut<F:FnMut(&isize)->isize>(_: &mut F, _: isize) -> isize { 0 }\n    | -------------------------------------------------------------------- required by `call_it_mut`\n ...\n LL |     let y = call_it_mut(&mut square, 22);\n-   |             ^^^^^^^^^^^ expected an `FnMut<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n+   |                         ^^^^^^^^^^^ expected an `FnMut<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n    |\n    = help: the trait `for<'r> std::ops::FnMut<(&'r isize,)>` is not implemented for `unsafe fn(isize) -> isize {square}`\n \n error[E0277]: expected a `std::ops::FnOnce<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n-  --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:19:13\n+  --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:19:25\n    |\n LL | fn call_it_mut<F:FnMut(&isize)->isize>(_: &mut F, _: isize) -> isize { 0 }\n    | -------------------------------------------------------------------- required by `call_it_mut`\n ...\n LL |     let y = call_it_mut(&mut square, 22);\n-   |             ^^^^^^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n+   |                         ^^^^^^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n    |\n    = help: the trait `std::ops::FnOnce<(&isize,)>` is not implemented for `unsafe fn(isize) -> isize {square}`\n \n error[E0277]: expected a `std::ops::FnOnce<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n-  --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:25:13\n+  --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:25:26\n    |\n LL | fn call_it_once<F:FnOnce(&isize)->isize>(_: F, _: isize) -> isize { 0 }\n    | ----------------------------------------------------------------- required by `call_it_once`\n ...\n LL |     let z = call_it_once(square, 22);\n-   |             ^^^^^^^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n+   |                          ^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n    |\n    = help: the trait `std::ops::FnOnce<(&isize,)>` is not implemented for `unsafe fn(isize) -> isize {square}`\n "}, {"sha": "f381cacadf9c09376955955b8804cd2249666af1", "filename": "src/test/ui/unsized3.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Funsized3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Funsized3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized3.stderr?ref=72252646a8f781509e6756180182887653f657ee", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the size for values of type `X` cannot be known at compilation time\n-  --> $DIR/unsized3.rs:7:5\n+  --> $DIR/unsized3.rs:7:13\n    |\n LL |     f2::<X>(x);\n-   |     ^^^^^^^ doesn't have a size known at compile-time\n+   |             ^ doesn't have a size known at compile-time\n ...\n LL | fn f2<X>(x: &X) {\n    | --------------- required by `f2`\n@@ -12,10 +12,10 @@ LL | fn f2<X>(x: &X) {\n    = help: consider adding a `where X: std::marker::Sized` bound\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n-  --> $DIR/unsized3.rs:18:5\n+  --> $DIR/unsized3.rs:18:13\n    |\n LL |     f4::<X>(x);\n-   |     ^^^^^^^ doesn't have a size known at compile-time\n+   |             ^ doesn't have a size known at compile-time\n ...\n LL | fn f4<X: T>(x: &X) {\n    | ------------------ required by `f4`\n@@ -25,24 +25,24 @@ LL | fn f4<X: T>(x: &X) {\n    = help: consider adding a `where X: std::marker::Sized` bound\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n-  --> $DIR/unsized3.rs:33:5\n+  --> $DIR/unsized3.rs:33:8\n    |\n LL | fn f5<Y>(x: &Y) {}\n    | --------------- required by `f5`\n ...\n LL |     f5(x1);\n-   |     ^^ doesn't have a size known at compile-time\n+   |        ^^ doesn't have a size known at compile-time\n    |\n    = help: within `S<X>`, the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where X: std::marker::Sized` bound\n    = note: required because it appears within the type `S<X>`\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n-  --> $DIR/unsized3.rs:40:5\n+  --> $DIR/unsized3.rs:40:8\n    |\n LL |     f5(&(*x1, 34));\n-   |     ^^ doesn't have a size known at compile-time\n+   |        ^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `S<X>`, the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n@@ -64,13 +64,13 @@ LL |     f5(&(32, *x1));\n    = note: tuples must have a statically known size to be initialized\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n-  --> $DIR/unsized3.rs:45:5\n+  --> $DIR/unsized3.rs:45:8\n    |\n LL | fn f5<Y>(x: &Y) {}\n    | --------------- required by `f5`\n ...\n LL |     f5(&(32, *x1));\n-   |     ^^ doesn't have a size known at compile-time\n+   |        ^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `({integer}, S<X>)`, the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>"}, {"sha": "bff64813268ce687c4011d776077aed30a0e1878", "filename": "src/test/ui/vtable-res-trait-param.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fvtable-res-trait-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fvtable-res-trait-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvtable-res-trait-param.stderr?ref=72252646a8f781509e6756180182887653f657ee", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `{integer}: TraitA` is not satisfied\n-  --> $DIR/vtable-res-trait-param.rs:17:7\n+  --> $DIR/vtable-res-trait-param.rs:17:18\n    |\n LL |     b.gimme_an_a(y)\n-   |       ^^^^^^^^^^ the trait `TraitA` is not implemented for `{integer}`\n+   |                  ^ the trait `TraitA` is not implemented for `{integer}`\n \n error: aborting due to previous error\n "}, {"sha": "118caf8cccec72b4ec48b76fcfedec2849f90b5c", "filename": "src/test/ui/where-clauses/where-clause-constraints-are-local-for-inherent-impl.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clause-constraints-are-local-for-inherent-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clause-constraints-are-local-for-inherent-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clause-constraints-are-local-for-inherent-impl.stderr?ref=72252646a8f781509e6756180182887653f657ee", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n-  --> $DIR/where-clause-constraints-are-local-for-inherent-impl.rs:13:9\n+  --> $DIR/where-clause-constraints-are-local-for-inherent-impl.rs:13:22\n    |\n LL | fn require_copy<T: Copy>(x: T) {}\n    | ------------------------------ required by `require_copy`\n ...\n LL |         require_copy(self.x);\n-   |         ^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n+   |                      ^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n    |\n    = help: consider adding a `where T: std::marker::Copy` bound\n "}, {"sha": "d1cb4e1cc7d1d25f05eae3845c0856a431fd4fc2", "filename": "src/test/ui/where-clauses/where-clause-constraints-are-local-for-trait-impl.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clause-constraints-are-local-for-trait-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clause-constraints-are-local-for-trait-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clause-constraints-are-local-for-trait-impl.stderr?ref=72252646a8f781509e6756180182887653f657ee", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n-  --> $DIR/where-clause-constraints-are-local-for-trait-impl.rs:18:9\n+  --> $DIR/where-clause-constraints-are-local-for-trait-impl.rs:18:22\n    |\n LL | fn require_copy<T: Copy>(x: T) {}\n    | ------------------------------ required by `require_copy`\n ...\n LL |         require_copy(self.x);\n-   |         ^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n+   |                      ^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n    |\n    = help: consider adding a `where T: std::marker::Copy` bound\n "}, {"sha": "6fd38728777e4120228ebd72f586f75d8a462fbf", "filename": "src/test/ui/where-clauses/where-clauses-method-unsatisfied.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clauses-method-unsatisfied.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72252646a8f781509e6756180182887653f657ee/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clauses-method-unsatisfied.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clauses-method-unsatisfied.stderr?ref=72252646a8f781509e6756180182887653f657ee", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `Bar: std::cmp::Eq` is not satisfied\n-  --> $DIR/where-clauses-method-unsatisfied.rs:18:7\n+  --> $DIR/where-clauses-method-unsatisfied.rs:18:14\n    |\n LL |     x.equals(&x);\n-   |       ^^^^^^ the trait `std::cmp::Eq` is not implemented for `Bar`\n+   |              ^^ the trait `std::cmp::Eq` is not implemented for `Bar`\n \n error: aborting due to previous error\n "}]}