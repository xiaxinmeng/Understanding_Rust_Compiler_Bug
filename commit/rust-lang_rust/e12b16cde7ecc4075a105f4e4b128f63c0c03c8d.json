{"sha": "e12b16cde7ecc4075a105f4e4b128f63c0c03c8d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxMmIxNmNkZTdlY2M0MDc1YTEwNWY0ZTRiMTI4ZjYzYzBjMDNjOGQ=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-05-15T00:57:39Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-05-15T00:57:48Z"}, "message": "Instantiate per-type iface-based visit_glue when intrinsic ifaces present.", "tree": {"sha": "cb0ff9e62fef8270e618ceff32e249b723e3a26b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb0ff9e62fef8270e618ceff32e249b723e3a26b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e12b16cde7ecc4075a105f4e4b128f63c0c03c8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e12b16cde7ecc4075a105f4e4b128f63c0c03c8d", "html_url": "https://github.com/rust-lang/rust/commit/e12b16cde7ecc4075a105f4e4b128f63c0c03c8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e12b16cde7ecc4075a105f4e4b128f63c0c03c8d/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97aba0b14f965059a18f8e5ef8138dcfd5fe6293", "url": "https://api.github.com/repos/rust-lang/rust/commits/97aba0b14f965059a18f8e5ef8138dcfd5fe6293", "html_url": "https://github.com/rust-lang/rust/commit/97aba0b14f965059a18f8e5ef8138dcfd5fe6293"}], "stats": {"total": 221, "additions": 161, "deletions": 60}, "files": [{"sha": "3808621096fb29ccbeb4137f38b5e2f757f064b9", "filename": "src/rustc/back/abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e12b16cde7ecc4075a105f4e4b128f63c0c03c8d/src%2Frustc%2Fback%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e12b16cde7ecc4075a105f4e4b128f63c0c03c8d/src%2Frustc%2Fback%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fback%2Fabi.rs?ref=e12b16cde7ecc4075a105f4e4b128f63c0c03c8d", "patch": "@@ -39,7 +39,7 @@ const tydesc_field_align: uint = 2u;\n const tydesc_field_take_glue: uint = 3u;\n const tydesc_field_drop_glue: uint = 4u;\n const tydesc_field_free_glue: uint = 5u;\n-const tydesc_field_unused: uint = 6u;\n+const tydesc_field_visit_glue: uint = 6u;\n const tydesc_field_sever_glue: uint = 7u;\n const tydesc_field_mark_glue: uint = 8u;\n const tydesc_field_unused2: uint = 9u;"}, {"sha": "769fee50d4f9704c7835b950b50354e6da762c4d", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 39, "deletions": 2, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/e12b16cde7ecc4075a105f4e4b128f63c0c03c8d/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e12b16cde7ecc4075a105f4e4b128f63c0c03c8d/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=e12b16cde7ecc4075a105f4e4b128f63c0c03c8d", "patch": "@@ -470,7 +470,8 @@ fn declare_tydesc(ccx: @crate_ctxt, t: ty::t) -> @tydesc_info {\n           align: llalign,\n           mut take_glue: none,\n           mut drop_glue: none,\n-          mut free_glue: none};\n+          mut free_glue: none,\n+          mut visit_glue: none};\n     log(debug, \"--- declare_tydesc \" + ty_to_str(ccx.tcx, t));\n     ret inf;\n }\n@@ -552,6 +553,11 @@ fn emit_tydescs(ccx: @crate_ctxt) {\n               none { ccx.stats.n_null_glues += 1u; C_null(glue_fn_ty) }\n               some(v) { ccx.stats.n_real_glues += 1u; v }\n             };\n+        let visit_glue =\n+            alt ti.visit_glue {\n+              none { ccx.stats.n_null_glues += 1u; C_null(glue_fn_ty) }\n+              some(v) { ccx.stats.n_real_glues += 1u; v }\n+            };\n \n         let shape = shape_of(ccx, key, []);\n         let shape_tables =\n@@ -566,7 +572,7 @@ fn emit_tydescs(ccx: @crate_ctxt) {\n                             take_glue, // take_glue\n                             drop_glue, // drop_glue\n                             free_glue, // free_glue\n-                            C_null(T_ptr(T_i8())), // unused\n+                            visit_glue, // visit_glue\n                             C_null(glue_fn_ty), // sever_glue\n                             C_null(glue_fn_ty), // mark_glue\n                             C_null(glue_fn_ty), // unused\n@@ -632,6 +638,20 @@ fn incr_refcnt_of_boxed(cx: block, box_ptr: ValueRef) {\n     Store(cx, rc, rc_ptr);\n }\n \n+fn make_visit_glue(bcx: block, v: ValueRef, t: ty::t) {\n+    let _icx = bcx.insn_ctxt(\"make_visit_glue\");\n+    let mut bcx = bcx;\n+    alt bcx.ccx().intrinsic_ifaces.find(\"visit_ty\") {\n+      some(iid) {\n+        bcx = reflect::emit_calls_to_iface_visit_ty(bcx, t, v, iid);\n+      }\n+      none {\n+      }\n+    }\n+    build_return(bcx);\n+}\n+\n+\n fn make_free_glue(bcx: block, v: ValueRef, t: ty::t) {\n     // v is a pointer to the actual box component of the type here. The\n     // ValueRef will have the wrong type here (make_generic_glue is casting\n@@ -1065,7 +1085,23 @@ fn lazily_emit_tydesc_glue(ccx: @crate_ctxt, field: uint,\n                        ty_to_str(ccx.tcx, ti.ty));\n               }\n             }\n+        } else if field == abi::tydesc_field_visit_glue {\n+            alt ti.free_glue {\n+              some(_) { }\n+              none {\n+                #debug(\"+++ lazily_emit_tydesc_glue VISIT %s\",\n+                       ty_to_str(ccx.tcx, ti.ty));\n+                let glue_fn =\n+                    declare_generic_glue(ccx, ti.ty, T_glue_fn(ccx), \"visit\");\n+                ti.visit_glue = some(glue_fn);\n+                make_generic_glue(ccx, ti.ty, glue_fn,\n+                                  make_visit_glue, \"visit\");\n+                #debug(\"--- lazily_emit_tydesc_glue VISIT %s\",\n+                       ty_to_str(ccx.tcx, ti.ty));\n+              }\n+            }\n         }\n+\n       }\n     }\n }\n@@ -5056,6 +5092,7 @@ fn trans_crate(sess: session::session, crate: @ast::crate, tcx: ty::ctxt,\n           tn: tn,\n           externs: str_hash::<ValueRef>(),\n           intrinsics: intrinsics,\n+          intrinsic_ifaces: reflect::find_intrinsic_ifaces(crate),\n           item_vals: int_hash::<ValueRef>(),\n           exp_map: emap,\n           reachable: reachable,"}, {"sha": "ad2b86f395b4750e007beff011dc47add004f9ff", "filename": "src/rustc/middle/trans/common.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e12b16cde7ecc4075a105f4e4b128f63c0c03c8d/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e12b16cde7ecc4075a105f4e4b128f63c0c03c8d/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=e12b16cde7ecc4075a105f4e4b128f63c0c03c8d", "patch": "@@ -33,7 +33,8 @@ type tydesc_info =\n      align: ValueRef,\n      mut take_glue: option<ValueRef>,\n      mut drop_glue: option<ValueRef>,\n-     mut free_glue: option<ValueRef>};\n+     mut free_glue: option<ValueRef>,\n+     mut visit_glue: option<ValueRef>};\n \n /*\n  * A note on nomenclature of linking: \"upcall\", \"extern\" and \"native\".\n@@ -70,6 +71,7 @@ type crate_ctxt = {\n      tn: type_names,\n      externs: hashmap<str, ValueRef>,\n      intrinsics: hashmap<str, ValueRef>,\n+     intrinsic_ifaces: hashmap<str, ast::def_id>,\n      item_vals: hashmap<ast::node_id, ValueRef>,\n      exp_map: resolve::exp_map,\n      reachable: reachable::map,\n@@ -572,8 +574,8 @@ fn T_tydesc(targ_cfg: @session::config) -> TypeRef {\n     let int_type = T_int(targ_cfg);\n     let elems =\n         [tydescpp, int_type, int_type,\n-         glue_fn_ty, glue_fn_ty, glue_fn_ty,\n-         T_ptr(T_i8()), glue_fn_ty, glue_fn_ty, glue_fn_ty, T_ptr(T_i8()),\n+         glue_fn_ty, glue_fn_ty, glue_fn_ty, glue_fn_ty,\n+         glue_fn_ty, glue_fn_ty, glue_fn_ty, T_ptr(T_i8()),\n          T_ptr(T_i8()), T_ptr(T_i8()), int_type, int_type];\n     set_struct_body(tydesc, elems);\n     ret tydesc;"}, {"sha": "ed5b769ce50d8e5965fbaf6d262b5e7d0498f6ea", "filename": "src/rustc/middle/trans/native.rs", "status": "modified", "additions": 22, "deletions": 54, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/e12b16cde7ecc4075a105f4e4b128f63c0c03c8d/src%2Frustc%2Fmiddle%2Ftrans%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e12b16cde7ecc4075a105f4e4b128f63c0c03c8d/src%2Frustc%2Fmiddle%2Ftrans%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fnative.rs?ref=e12b16cde7ecc4075a105f4e4b128f63c0c03c8d", "patch": "@@ -835,70 +835,38 @@ fn trans_intrinsic(ccx: @crate_ctxt, decl: ValueRef, item: @ast::native_item,\n               fcx.llretptr);\n       }\n       \"visit_ty\" {\n-\n-        // signature: fn visit_ty<T,V:ty_visitor>(tv: V);\n-\n         let tp_ty = substs.tys[0];\n         let vp_ty = substs.tys[1];\n         let visitor = get_param(decl, first_real_arg);\n \n-        let (tyname, args) = alt ty::get(tp_ty).struct {\n-          ty::ty_bot { (\"bot\", []) }\n-          ty::ty_nil { (\"nil\", []) }\n-          ty::ty_bool { (\"bool\", []) }\n-          ty::ty_int(ast::ty_i) { (\"int\", []) }\n-          ty::ty_int(ast::ty_char) { (\"char\", []) }\n-          ty::ty_int(ast::ty_i8) { (\"i8\", []) }\n-          ty::ty_int(ast::ty_i16) { (\"i16\", []) }\n-          ty::ty_int(ast::ty_i32) { (\"i32\", []) }\n-          ty::ty_int(ast::ty_i64) { (\"i64\", []) }\n-          ty::ty_uint(ast::ty_u) { (\"uint\", []) }\n-          ty::ty_uint(ast::ty_u8) { (\"u8\", []) }\n-          ty::ty_uint(ast::ty_u16) { (\"u16\", []) }\n-          ty::ty_uint(ast::ty_u32) { (\"u32\", []) }\n-          ty::ty_uint(ast::ty_u64) { (\"u64\", []) }\n-          ty::ty_float(ast::ty_f) { (\"float\", []) }\n-          ty::ty_float(ast::ty_f32) { (\"f32\", []) }\n-          ty::ty_float(ast::ty_f64) { (\"f64\", []) }\n-          ty::ty_str { (\"str\", []) }\n-          _ {\n-            bcx.sess().unimpl(\"trans::native::visit_ty on \"\n-                              + ty_to_str(ccx.tcx, tp_ty));\n-          }\n-        };\n-\n-        let mth_name = \"visit_\" + tyname;\n-        let dest = ignore;\n-\n         alt impl::find_vtable_in_fn_ctxt(substs,\n                                          1u, /* n_param */\n                                          0u  /* n_bound */ ) {\n \n-          typeck::vtable_static(impl_did, impl_substs, sub_origins) {\n-            let mth_id = impl::method_with_name(ccx, impl_did, mth_name);\n-            let mth_ty = ty::lookup_item_type(ccx.tcx, mth_id).ty;\n-            // FIXME: is this safe? There is no callee AST node,\n-            // we're synthesizing it.\n-            let callee_id = (-1) as ast::node_id;\n-            let get_lval = {|bcx|\n-                let lval = lval_static_fn_inner(bcx, mth_id, callee_id,\n-                                                impl_substs,\n-                                                some(sub_origins));\n-                {env: self_env(visitor, vp_ty, none) with lval}\n-            };\n-            bcx = trans_call_inner(bcx, mth_ty, ty::mk_bool(ccx.tcx),\n-                                   get_lval, arg_vals(args), dest);\n+          typeck::vtable_iface(iid, _) {\n+            bcx = reflect::emit_calls_to_iface_visit_ty(bcx, tp_ty,\n+                                                        visitor, iid);\n           }\n \n-          typeck::vtable_iface(iid, _tps) {\n-            let methods = ty::iface_methods(ccx.tcx, iid);\n-            let mth_idx = option::get(ty::method_idx(mth_name, *methods));\n-            let mth_ty = ty::mk_fn(ccx.tcx, methods[mth_idx].fty);\n-            let get_lval = {|bcx|\n-                impl::trans_iface_callee(bcx, visitor, mth_ty, mth_idx)\n-            };\n-            bcx = trans_call_inner(bcx, mth_ty, ty::mk_bool(ccx.tcx),\n-                                   get_lval, arg_vals(args), dest);\n+          // This case is a slightly weird and possibly redundant path in\n+          // which we monomorphize the reflection interface.  FIXME:\n+          // possibly remove this, it might be overkill.\n+          typeck::vtable_static(impl_did, impl_substs, sub_origins) {\n+            reflect::visit_ty_steps(bcx, tp_ty) {|mth_name, args|\n+                let mth_id = impl::method_with_name(ccx, impl_did, mth_name);\n+                let mth_ty = ty::lookup_item_type(ccx.tcx, mth_id).ty;\n+                // FIXME: is this safe? There is no callee AST node,\n+                // we're synthesizing it.\n+                let callee_id = (-1) as ast::node_id;\n+                let get_lval = {|bcx|\n+                    let lval = lval_static_fn_inner(bcx, mth_id, callee_id,\n+                                                    impl_substs,\n+                                                    some(sub_origins));\n+                    {env: self_env(visitor, vp_ty, none) with lval}\n+                };\n+                bcx = trans_call_inner(bcx, mth_ty, ty::mk_bool(ccx.tcx),\n+                                       get_lval, arg_vals(args), ignore);\n+            }\n           }\n \n           _ {"}, {"sha": "b1650ef465bf1873d7db5bf04ce80d0984b9e99c", "filename": "src/rustc/middle/trans/reflect.rs", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/e12b16cde7ecc4075a105f4e4b128f63c0c03c8d/src%2Frustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e12b16cde7ecc4075a105f4e4b128f63c0c03c8d/src%2Frustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=e12b16cde7ecc4075a105f4e4b128f63c0c03c8d", "patch": "@@ -0,0 +1,93 @@\n+import std::map::{hashmap,str_hash};\n+import driver::session::session;\n+import lib::llvm::{TypeRef, ValueRef};\n+import syntax::ast;\n+import back::abi;\n+import common::*;\n+import build::*;\n+import base::*;\n+import type_of::*;\n+import ast::def_id;\n+import util::ppaux::ty_to_str;\n+\n+fn visit_ty_steps<T>(bcx: block, t: ty::t,\n+                     step: fn(tyname: str, args: [ValueRef]) -> T) -> T {\n+    alt ty::get(t).struct {\n+      ty::ty_bot { step(\"visit_bot\", []) }\n+      ty::ty_nil { step(\"visit_nil\", []) }\n+      ty::ty_bool { step(\"visit_bool\", []) }\n+      ty::ty_int(ast::ty_i) { step(\"visit_int\", []) }\n+      ty::ty_int(ast::ty_char) { step(\"visit_char\", []) }\n+          ty::ty_int(ast::ty_i8) { step(\"visit_i8\", []) }\n+          ty::ty_int(ast::ty_i16) { step(\"visit_i16\", []) }\n+          ty::ty_int(ast::ty_i32) { step(\"visit_i32\", []) }\n+          ty::ty_int(ast::ty_i64) { step(\"visit_i64\", []) }\n+          ty::ty_uint(ast::ty_u) { step(\"visit_uint\", []) }\n+          ty::ty_uint(ast::ty_u8) { step(\"visit_u8\", []) }\n+          ty::ty_uint(ast::ty_u16) { step(\"visit_u16\", []) }\n+          ty::ty_uint(ast::ty_u32) { step(\"visit_u32\", []) }\n+          ty::ty_uint(ast::ty_u64) { step(\"visit_u64\", []) }\n+          ty::ty_float(ast::ty_f) { step(\"visit_float\", []) }\n+          ty::ty_float(ast::ty_f32) { step(\"visit_f32\", []) }\n+          ty::ty_float(ast::ty_f64) { step(\"visit_f64\", []) }\n+          ty::ty_str { step(\"visit_str\", []) }\n+      _ {\n+        bcx.sess().unimpl(\"trans::reflect::visit_ty_args on \"\n+                          + ty_to_str(bcx.ccx().tcx, t));\n+      }\n+    }\n+}\n+\n+// Emit a sequence of calls to visit_ty::visit_foo\n+fn emit_calls_to_iface_visit_ty(bcx: block, t: ty::t,\n+                                visitor_val: ValueRef,\n+                                visitor_iid: def_id) -> block {\n+    let tcx = bcx.tcx();\n+    visit_ty_steps(bcx, t) {|mth_name, args|\n+        let methods = ty::iface_methods(tcx, visitor_iid);\n+        let mth_idx = option::get(ty::method_idx(mth_name, *methods));\n+        let mth_ty = ty::mk_fn(tcx, methods[mth_idx].fty);\n+        let get_lval = {|bcx|\n+            impl::trans_iface_callee(bcx, visitor_val, mth_ty, mth_idx)\n+        };\n+        trans_call_inner(bcx, mth_ty, ty::mk_bool(tcx),\n+                         get_lval, arg_vals(args), ignore)\n+    }\n+}\n+\n+\n+fn find_intrinsic_ifaces(crate: @ast::crate)\n+    -> hashmap<str, ast::def_id> {\n+\n+    let ifaces : hashmap<str, ast::def_id> = str_hash();\n+\n+    // FIXME: hooking into the \"intrinsic\" root module is crude.\n+    // there ought to be a better approach. Attributes?\n+\n+    for crate.node.module.items.each {|crate_item|\n+        if crate_item.ident == \"intrinsic\" {\n+            alt crate_item.node {\n+              ast::item_mod(m) {\n+                for m.items.each {|intrinsic_item|\n+                    alt intrinsic_item.node {\n+                      ast::item_iface(_, _, _) {\n+                        let def_id = { crate: ast::local_crate,\n+                                       node: intrinsic_item.id };\n+                        ifaces.insert(intrinsic_item.ident,\n+                                      def_id);\n+                      }\n+                      _ { }\n+                    }\n+                }\n+              }\n+              _ { }\n+            }\n+            break;\n+        }\n+    }\n+\n+    // Assert whatever ifaces we are expecting to get from mod intrinsic.\n+    // assert ifaces.contains_key(\"visit_ty\");\n+\n+    ret ifaces;\n+}\n\\ No newline at end of file"}, {"sha": "21623f45f5c67ed05a886c3274c9974ed2868fb0", "filename": "src/rustc/rustc.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e12b16cde7ecc4075a105f4e4b128f63c0c03c8d/src%2Frustc%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/e12b16cde7ecc4075a105f4e4b128f63c0c03c8d/src%2Frustc%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Frustc.rc?ref=e12b16cde7ecc4075a105f4e4b128f63c0c03c8d", "patch": "@@ -42,6 +42,7 @@ mod middle {\n         mod tvec;\n         mod impl;\n         mod native;\n+        mod reflect;\n         mod shape;\n         mod debuginfo;\n         mod type_use;"}]}