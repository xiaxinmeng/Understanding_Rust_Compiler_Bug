{"sha": "d97226c132e820b4636df6e7f8287d45377c64b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5NzIyNmMxMzJlODIwYjQ2MzZkZjZlN2Y4Mjg3ZDQ1Mzc3YzY0Yjc=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-01-19T15:47:17Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-02-03T10:08:20Z"}, "message": "Add new rustdoc ui tests", "tree": {"sha": "9349f736de23b2895d8cd65d6976fdabd1404e1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9349f736de23b2895d8cd65d6976fdabd1404e1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d97226c132e820b4636df6e7f8287d45377c64b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d97226c132e820b4636df6e7f8287d45377c64b7", "html_url": "https://github.com/rust-lang/rust/commit/d97226c132e820b4636df6e7f8287d45377c64b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d97226c132e820b4636df6e7f8287d45377c64b7/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62fb7fc54a6b7cca2c690ca84ee54e4a86ab5ba4", "url": "https://api.github.com/repos/rust-lang/rust/commits/62fb7fc54a6b7cca2c690ca84ee54e4a86ab5ba4", "html_url": "https://github.com/rust-lang/rust/commit/62fb7fc54a6b7cca2c690ca84ee54e4a86ab5ba4"}], "stats": {"total": 90, "additions": 90, "deletions": 0}, "files": [{"sha": "1801d5bdd80e1f1ee359955dd8a051d72606c2c6", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/d97226c132e820b4636df6e7f8287d45377c64b7/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d97226c132e820b4636df6e7f8287d45377c64b7/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=d97226c132e820b4636df6e7f8287d45377c64b7", "patch": "@@ -19,6 +19,7 @@ use std::collections::HashSet;\n use std::env;\n use std::fmt;\n use std::fs;\n+use std::io::Read;\n use std::path::{PathBuf, Path};\n use std::process::Command;\n \n@@ -316,6 +317,76 @@ fn markdown_test(build: &Build, compiler: &Compiler, markdown: &Path) {\n     build.run(&mut cmd);\n }\n \n+pub fn markdown_test_output_check(build: &Build, compiler: &Compiler) {\n+    let _time = util::timeit();\n+    for entry in fs::read_dir(\"src/test/rustdoc-test\")\n+                    .expect(\"markdown_test_output_check: read_dir failed\") {\n+        if let Ok(entry) = entry {\n+            if entry.path().extension().and_then(|s| s.to_str()) != Some(\"rs\") {\n+                continue\n+            }\n+            markdown_test_output_check_entry(build, compiler, entry.path().as_path());\n+        }\n+    }\n+}\n+\n+fn markdown_test_output_check_entry(build: &Build, compiler: &Compiler, path: &Path) {\n+    let mut file = fs::File::open(path)\n+                            .expect(\"markdown_test_output_check_entry File::open failed\");\n+    let mut content = String::new();\n+    file.read_to_string(&mut content)\n+        .expect(\"markdown_test_output_check_entry read_to_string failed\");\n+    let mut ignore = false;\n+    let mut v: Vec<usize> =\n+        content.split(\"\\n\")\n+               .enumerate()\n+               .filter_map(|(line_nb, line)| {\n+                   let sline = line.split(\"///\").last().unwrap_or(\"\");\n+                   let line = sline.trim_left();\n+                   if line.starts_with(\"```\") &&\n+                      !line.contains(\"ignore\") {\n+                       if ignore {\n+                           ignore = false;\n+                           None\n+                       } else {\n+                           ignore = true;\n+                           Some(line_nb + 1)\n+                       }\n+                   } else {\n+                       None\n+                   }\n+               })\n+               .collect();\n+    let mut cmd = Command::new(build.rustdoc(compiler));\n+    build.add_rustc_lib_path(compiler, &mut cmd);\n+    build.add_rust_test_threads(&mut cmd);\n+    cmd.arg(\"--test\");\n+    cmd.arg(path);\n+    cmd.env(\"RUSTC_BOOTSTRAP\", \"1\");\n+\n+    cmd.arg(\"--test-args\").arg(build.flags.cmd.test_args().join(\" \"));\n+\n+    output(&mut cmd).split(\"\\n\")\n+                    .filter(|s| s.starts_with(\"test \"))\n+                    .inspect(|s| {\n+                        let tmp: Vec<&str> = s.split(\" - line \").collect();\n+                        if tmp.len() == 2 {\n+                            let line = usize::from_str_radix(tmp[1].split(\" ...\")\n+                                                                   .next()\n+                                                                   .unwrap_or(\"0\"), 10)\n+                                           .unwrap_or(0);\n+                            if let Ok(pos) = v.binary_search(&line) {\n+                                v.remove(pos);\n+                            } else {\n+                                panic!(\"Not found doc test: \\\"{}\\\" in {:?}\", s, v);\n+                            }\n+                        }\n+                    }).all(|_| true);\n+    if v.len() != 0 {\n+        panic!(\"Not found test at line{} {:?}\", if v.len() > 1 { \"s\" } else { \"\" }, v);\n+    }\n+}\n+\n /// Run all unit tests plus documentation tests for an entire crate DAG defined\n /// by a `Cargo.toml`\n ///"}, {"sha": "c3e0e08223065af55b006d03beb049ec8bccab1a", "filename": "src/bootstrap/step.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d97226c132e820b4636df6e7f8287d45377c64b7/src%2Fbootstrap%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d97226c132e820b4636df6e7f8287d45377c64b7/src%2Fbootstrap%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fstep.rs?ref=d97226c132e820b4636df6e7f8287d45377c64b7", "patch": "@@ -474,6 +474,11 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n          .default(true)\n          .host(true)\n          .run(move |s| check::docs(build, &s.compiler()));\n+    rules.test(\"check-rustdoc-output\", \"src/test/rustdoc-test\")\n+         .dep(|s| s.name(\"libtest\"))\n+         .default(true)\n+         .host(true)\n+         .run(move |s| check::markdown_test_output_check(build, &s.compiler()));\n     rules.test(\"check-distcheck\", \"distcheck\")\n          .dep(|s| s.name(\"dist-src\"))\n          .run(move |_| check::distcheck(build));"}, {"sha": "96a4a35282beb4e580b9f75f76e67bb023758679", "filename": "src/test/rustdoc-test/test.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d97226c132e820b4636df6e7f8287d45377c64b7/src%2Ftest%2Frustdoc-test%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d97226c132e820b4636df6e7f8287d45377c64b7/src%2Ftest%2Frustdoc-test%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-test%2Ftest.rs?ref=d97226c132e820b4636df6e7f8287d45377c64b7", "patch": "@@ -0,0 +1,14 @@\n+/// This is a Foo;\n+///\n+/// ```\n+/// println!(\"baaaaaar\");\n+/// ```\n+#[unstable]\n+pub struct Foo;\n+\n+/// This is a Bar;\n+///\n+/// ```\n+/// println!(\"fooooo\");\n+/// ```\n+pub struct Bar;"}]}