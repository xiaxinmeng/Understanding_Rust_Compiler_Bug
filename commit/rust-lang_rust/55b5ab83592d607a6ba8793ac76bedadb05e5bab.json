{"sha": "55b5ab83592d607a6ba8793ac76bedadb05e5bab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1YjVhYjgzNTkyZDYwN2E2YmE4NzkzYWM3NmJlZGFkYjA1ZTViYWI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-02-24T04:55:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-02-24T04:55:57Z"}, "message": "Rollup merge of #58183 - jethrogb:jb/alloc-box-guarantees, r=SimonSapin\n\nClarify guarantees for `Box` allocation\n\nThis basically says `Box` does the obvious things for its allocations.\n\nSee also: https://users.rust-lang.org/t/alloc-crate-guarantees/24981\n\nThis may require a T-libs FCP? Not sure.\n\nr? @sfackler", "tree": {"sha": "9130191c9fc3dd78b2e88633c54ad2d207737ea8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9130191c9fc3dd78b2e88633c54ad2d207737ea8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55b5ab83592d607a6ba8793ac76bedadb05e5bab", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcciPdCRBK7hj4Ov3rIwAAdHIIAHl07iaAd4HbwTGYmRw7AeNU\npwGO3Ba1oWZI8aaQN75wCcBQMTKVF4Ky682SNYjrHAf1F6PEDNdYR5xxXFygG9Ut\n4tqjG8H9xay+PZzT776wleg2ZtfYyV1/GzqHU3LqrA6ilFeFD8QYinWoX7T7FR57\nLjj4IVSs3zFbTKF6kZZV5IMVWxdnJxJ9ZE3rPZH/k72+oabOi6XNb6rFnhaFQaj4\nYD54ZkvuAWsc/32EeXjTswxnGascocNOKMptDENN4Pq/Vf26rKJMao3xmjCGj+o3\niVzh/m7Kh5+B1PVMeyZla1VgUEUbRn8EB+Ps1EdAAMTTkDnm8IfS1OKbjory/tA=\n=knGg\n-----END PGP SIGNATURE-----\n", "payload": "tree 9130191c9fc3dd78b2e88633c54ad2d207737ea8\nparent ae646687e0032564469f2c839063bee2485e88e4\nparent e41e694d9e5a6bcb2109c936df9757879a65eb59\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1550984157 +0100\ncommitter GitHub <noreply@github.com> 1550984157 +0100\n\nRollup merge of #58183 - jethrogb:jb/alloc-box-guarantees, r=SimonSapin\n\nClarify guarantees for `Box` allocation\n\nThis basically says `Box` does the obvious things for its allocations.\n\nSee also: https://users.rust-lang.org/t/alloc-crate-guarantees/24981\n\nThis may require a T-libs FCP? Not sure.\n\nr? @sfackler\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55b5ab83592d607a6ba8793ac76bedadb05e5bab", "html_url": "https://github.com/rust-lang/rust/commit/55b5ab83592d607a6ba8793ac76bedadb05e5bab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55b5ab83592d607a6ba8793ac76bedadb05e5bab/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae646687e0032564469f2c839063bee2485e88e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae646687e0032564469f2c839063bee2485e88e4", "html_url": "https://github.com/rust-lang/rust/commit/ae646687e0032564469f2c839063bee2485e88e4"}, {"sha": "e41e694d9e5a6bcb2109c936df9757879a65eb59", "url": "https://api.github.com/repos/rust-lang/rust/commits/e41e694d9e5a6bcb2109c936df9757879a65eb59", "html_url": "https://github.com/rust-lang/rust/commit/e41e694d9e5a6bcb2109c936df9757879a65eb59"}], "stats": {"total": 13, "additions": 13, "deletions": 0}, "files": [{"sha": "f3877e51a6633f2589885ce08015fa5d0da46b85", "filename": "src/liballoc/alloc.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/55b5ab83592d607a6ba8793ac76bedadb05e5bab/src%2Fliballoc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55b5ab83592d607a6ba8793ac76bedadb05e5bab/src%2Fliballoc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Falloc.rs?ref=55b5ab83592d607a6ba8793ac76bedadb05e5bab", "patch": "@@ -34,6 +34,9 @@ extern \"Rust\" {\n /// This type implements the [`Alloc`] trait by forwarding calls\n /// to the allocator registered with the `#[global_allocator]` attribute\n /// if there is one, or the `std` crate\u2019s default.\n+///\n+/// Note: while this type is unstable, the functionality it provides can be\n+/// accessed through the [free functions in `alloc`](index.html#functions).\n #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n #[derive(Copy, Clone, Default, Debug)]\n pub struct Global;"}, {"sha": "e99ae6315f830c605c0f76d6f6809bc80f865e27", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/55b5ab83592d607a6ba8793ac76bedadb05e5bab/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55b5ab83592d607a6ba8793ac76bedadb05e5bab/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=55b5ab83592d607a6ba8793ac76bedadb05e5bab", "patch": "@@ -4,6 +4,16 @@\n //! heap allocation in Rust. Boxes provide ownership for this allocation, and\n //! drop their contents when they go out of scope.\n //!\n+//! For non-zero-sized values, a [`Box`] will use the [`Global`] allocator for\n+//! its allocation. It is valid to convert both ways between a [`Box`] and a\n+//! raw pointer allocated with the [`Global`] allocator, given that the\n+//! [`Layout`] used with the allocator is correct for the type. More precisely,\n+//! a `value: *mut T` that has been allocated with the [`Global`] allocator\n+//! with `Layout::for_value(&*value)` may be converted into a box using\n+//! `Box::<T>::from_raw(value)`. Conversely, the memory backing a `value: *mut\n+//! T` obtained from `Box::<T>::into_raw` may be deallocated using the\n+//! [`Global`] allocator with `Layout::for_value(&*value)`.\n+//!\n //! # Examples\n //!\n //! Move a value from the stack to the heap by creating a [`Box`]:"}]}