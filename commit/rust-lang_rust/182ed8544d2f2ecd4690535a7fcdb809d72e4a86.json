{"sha": "182ed8544d2f2ecd4690535a7fcdb809d72e4a86", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4MmVkODU0NGQyZjJlY2Q0NjkwNTM1YTdmY2RiODA5ZDcyZTRhODY=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-09-07T15:30:38Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-09-19T08:36:36Z"}, "message": "Address review comments", "tree": {"sha": "2c46fc81d25448f7b8cad8e429f96029b2541bf0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c46fc81d25448f7b8cad8e429f96029b2541bf0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/182ed8544d2f2ecd4690535a7fcdb809d72e4a86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/182ed8544d2f2ecd4690535a7fcdb809d72e4a86", "html_url": "https://github.com/rust-lang/rust/commit/182ed8544d2f2ecd4690535a7fcdb809d72e4a86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/182ed8544d2f2ecd4690535a7fcdb809d72e4a86/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90708c15c45572842f2abd60ce32c672d80bdbf8", "url": "https://api.github.com/repos/rust-lang/rust/commits/90708c15c45572842f2abd60ce32c672d80bdbf8", "html_url": "https://github.com/rust-lang/rust/commit/90708c15c45572842f2abd60ce32c672d80bdbf8"}], "stats": {"total": 261, "additions": 133, "deletions": 128}, "files": [{"sha": "13333dc45de0c4bbac2b16ce930c590095ee5644", "filename": "compiler/rustc_middle/src/mir/interpret/error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/182ed8544d2f2ecd4690535a7fcdb809d72e4a86/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/182ed8544d2f2ecd4690535a7fcdb809d72e4a86/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs?ref=182ed8544d2f2ecd4690535a7fcdb809d72e4a86", "patch": "@@ -1,4 +1,4 @@\n-use super::{AllocId, Pointer, RawConst, Scalar};\n+use super::{AllocId, ConstAlloc, Pointer, Scalar};\n \n use crate::mir::interpret::ConstValue;\n use crate::ty::{layout, query::TyCtxtAt, tls, FnSig, Ty};\n@@ -27,7 +27,7 @@ CloneTypeFoldableAndLiftImpls! {\n     ErrorHandled,\n }\n \n-pub type EvalToAllocationRawResult<'tcx> = Result<RawConst<'tcx>, ErrorHandled>;\n+pub type EvalToAllocationRawResult<'tcx> = Result<ConstAlloc<'tcx>, ErrorHandled>;\n pub type EvalToConstValueResult<'tcx> = Result<ConstValue<'tcx>, ErrorHandled>;\n \n pub fn struct_error<'tcx>(tcx: TyCtxtAt<'tcx>, msg: &str) -> DiagnosticBuilder<'tcx> {"}, {"sha": "adf551ee43306f7f39ac856238c9b349b1dc0980", "filename": "compiler/rustc_middle/src/mir/interpret/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/182ed8544d2f2ecd4690535a7fcdb809d72e4a86/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/182ed8544d2f2ecd4690535a7fcdb809d72e4a86/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs?ref=182ed8544d2f2ecd4690535a7fcdb809d72e4a86", "patch": "@@ -123,7 +123,7 @@ pub use self::error::{\n     ResourceExhaustionInfo, UndefinedBehaviorInfo, UninitBytesAccess, UnsupportedOpInfo,\n };\n \n-pub use self::value::{get_slice_bytes, ConstValue, RawConst, Scalar, ScalarMaybeUninit};\n+pub use self::value::{get_slice_bytes, ConstAlloc, ConstValue, Scalar, ScalarMaybeUninit};\n \n pub use self::allocation::{Allocation, AllocationExtra, InitMask, Relocations};\n "}, {"sha": "ded1a9c62762b12782fc4449a728fee6c494b2ad", "filename": "compiler/rustc_middle/src/mir/interpret/value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/182ed8544d2f2ecd4690535a7fcdb809d72e4a86/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/182ed8544d2f2ecd4690535a7fcdb809d72e4a86/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs?ref=182ed8544d2f2ecd4690535a7fcdb809d72e4a86", "patch": "@@ -14,7 +14,7 @@ use super::{sign_extend, truncate, AllocId, Allocation, InterpResult, Pointer, P\n \n /// Represents the result of const evaluation via the `eval_to_allocation` query.\n #[derive(Clone, HashStable)]\n-pub struct RawConst<'tcx> {\n+pub struct ConstAlloc<'tcx> {\n     // the value lives here, at offset 0, and that allocation definitely is a `AllocKind::Memory`\n     // (so you can use `AllocMap::unwrap_memory`).\n     pub alloc_id: AllocId,"}, {"sha": "dbc0e73968bc18f9088e7b51b9662bf74eeb786a", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/182ed8544d2f2ecd4690535a7fcdb809d72e4a86/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/182ed8544d2f2ecd4690535a7fcdb809d72e4a86/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=182ed8544d2f2ecd4690535a7fcdb809d72e4a86", "patch": "@@ -713,7 +713,7 @@ rustc_queries! {\n         query eval_to_allocation_raw(key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>)\n             -> EvalToAllocationRawResult<'tcx> {\n             desc { |tcx|\n-                \"const-evaluating `{}`\",\n+                \"const-evaluating + checking `{}`\",\n                 key.value.display(tcx)\n             }\n         }\n@@ -727,7 +727,7 @@ rustc_queries! {\n         query eval_to_const_value(key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>)\n             -> EvalToConstValueResult<'tcx> {\n             desc { |tcx|\n-                \"const-evaluating + checking `{}`\",\n+                \"simplifying constant for the type system `{}`\",\n                 key.value.display(tcx)\n             }\n             cache_on_disk_if(_, opt_result) {"}, {"sha": "00b675dbc4adf521e5f74ca38924a56946a5a511", "filename": "compiler/rustc_mir/src/const_eval/eval_queries.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/182ed8544d2f2ecd4690535a7fcdb809d72e4a86/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/182ed8544d2f2ecd4690535a7fcdb809d72e4a86/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=182ed8544d2f2ecd4690535a7fcdb809d72e4a86", "patch": "@@ -2,7 +2,7 @@ use super::{CompileTimeEvalContext, CompileTimeInterpreter, ConstEvalErr, Memory\n use crate::interpret::eval_nullary_intrinsic;\n use crate::interpret::{\n     intern_const_alloc_recursive, Allocation, ConstValue, GlobalId, Immediate, InternKind,\n-    InterpCx, InterpResult, MPlaceTy, MemoryKind, OpTy, RawConst, RefTracking, Scalar,\n+    InterpCx, InterpResult, MPlaceTy, MemoryKind, OpTy, ConstAlloc, RefTracking, Scalar,\n     ScalarMaybeUninit, StackPopCleanup,\n };\n \n@@ -184,9 +184,9 @@ pub(super) fn op_to_const<'tcx>(\n     }\n }\n \n-fn turn_into_const<'tcx>(\n+fn turn_into_const_value<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    constant: RawConst<'tcx>,\n+    constant: ConstAlloc<'tcx>,\n     key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>,\n ) -> ConstValue<'tcx> {\n     let cid = key.value;\n@@ -237,7 +237,7 @@ pub fn eval_to_const_value_provider<'tcx>(\n         });\n     }\n \n-    tcx.eval_to_allocation_raw(key).map(|val| turn_into_const(tcx, val, key))\n+    tcx.eval_to_allocation_raw(key).map(|val| turn_into_const_value(tcx, val, key))\n }\n \n pub fn eval_to_allocation_raw_provider<'tcx>(\n@@ -402,7 +402,7 @@ pub fn eval_to_allocation_raw_provider<'tcx>(\n                 ))\n             } else {\n                 // Convert to raw constant\n-                Ok(RawConst { alloc_id: mplace.ptr.assert_ptr().alloc_id, ty: mplace.layout.ty })\n+                Ok(ConstAlloc { alloc_id: mplace.ptr.assert_ptr().alloc_id, ty: mplace.layout.ty })\n             }\n         }\n     }"}, {"sha": "86e242c67d520439172fba2032f913b4ef920fe5", "filename": "compiler/rustc_mir/src/interpret/memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/182ed8544d2f2ecd4690535a7fcdb809d72e4a86/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/182ed8544d2f2ecd4690535a7fcdb809d72e4a86/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs?ref=182ed8544d2f2ecd4690535a7fcdb809d72e4a86", "patch": "@@ -469,7 +469,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n                 // Notice that every static has two `AllocId` that will resolve to the same\n                 // thing here: one maps to `GlobalAlloc::Static`, this is the \"lazy\" ID,\n                 // and the other one is maps to `GlobalAlloc::Memory`, this is returned by\n-                // `const_eval` and it is the \"resolved\" ID.\n+                // `eval_static_initializer` and it is the \"resolved\" ID.\n                 // The resolved ID is never used by the interpreted program, it is hidden.\n                 // This is relied upon for soundness of const-patterns; a pointer to the resolved\n                 // ID would \"sidestep\" the checks that make sure consts do not point to statics!"}, {"sha": "055141a3de63d50bbe751c9834727ce751767b5f", "filename": "compiler/rustc_mir/src/interpret/place.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/182ed8544d2f2ecd4690535a7fcdb809d72e4a86/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/182ed8544d2f2ecd4690535a7fcdb809d72e4a86/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fplace.rs?ref=182ed8544d2f2ecd4690535a7fcdb809d72e4a86", "patch": "@@ -13,9 +13,9 @@ use rustc_target::abi::{Abi, Align, FieldsShape, TagEncoding};\n use rustc_target::abi::{HasDataLayout, LayoutOf, Size, VariantIdx, Variants};\n \n use super::{\n-    mir_assign_valid_types, truncate, AllocId, AllocMap, Allocation, AllocationExtra, ImmTy,\n-    Immediate, InterpCx, InterpResult, LocalValue, Machine, MemoryKind, OpTy, Operand, Pointer,\n-    PointerArithmetic, RawConst, Scalar, ScalarMaybeUninit,\n+    mir_assign_valid_types, truncate, AllocId, AllocMap, Allocation, AllocationExtra, ConstAlloc,\n+    ImmTy, Immediate, InterpCx, InterpResult, LocalValue, Machine, MemoryKind, OpTy, Operand,\n+    Pointer, PointerArithmetic, Scalar, ScalarMaybeUninit,\n };\n \n #[derive(Copy, Clone, Debug, Hash, PartialEq, Eq, HashStable)]\n@@ -1122,7 +1122,7 @@ where\n \n     pub fn raw_const_to_mplace(\n         &self,\n-        raw: RawConst<'tcx>,\n+        raw: ConstAlloc<'tcx>,\n     ) -> InterpResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {\n         // This must be an allocation in `tcx`\n         let _ = self.tcx.global_alloc(raw.alloc_id);"}, {"sha": "2b83e1c8134efe75508140c3e04fa7f4e4002c13", "filename": "compiler/rustc_mir/src/interpret/validity.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/182ed8544d2f2ecd4690535a7fcdb809d72e4a86/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/182ed8544d2f2ecd4690535a7fcdb809d72e4a86/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvalidity.rs?ref=182ed8544d2f2ecd4690535a7fcdb809d72e4a86", "patch": "@@ -426,27 +426,27 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n                 if let Some(GlobalAlloc::Static(did)) = alloc_kind {\n                     assert!(!self.ecx.tcx.is_thread_local_static(did));\n                     assert!(self.ecx.tcx.is_static(did));\n-                    // See const_eval::machine::MemoryExtra::can_access_statics for why\n-                    // this check is so important.\n-                    // This check is reachable when the const just referenced the static,\n-                    // but never read it (so we never entered `before_access_global`).\n-                    // We also need to do it here instead of going on to avoid running\n-                    // into the `before_access_global` check during validation.\n-                    if !self.may_ref_to_static {\n+                    if self.may_ref_to_static {\n+                        // We skip checking other statics. These statics must be sound by\n+                        // themselves, and the only way to get broken statics here is by using\n+                        // unsafe code.\n+                        // The reasons we don't check other statics is twofold. For one, in all\n+                        // sound cases, the static was already validated on its own, and second, we\n+                        // trigger cycle errors if we try to compute the value of the other static\n+                        // and that static refers back to us.\n+                        // We might miss const-invalid data,\n+                        // but things are still sound otherwise (in particular re: consts\n+                        // referring to statics).\n+                        return Ok(());\n+                    } else {\n+                        // See const_eval::machine::MemoryExtra::can_access_statics for why\n+                        // this check is so important.\n+                        // This check is reachable when the const just referenced the static,\n+                        // but never read it (so we never entered `before_access_global`).\n                         throw_validation_failure!(self.path,\n                             { \"a {} pointing to a static variable\", kind }\n                         );\n                     }\n-                    // We skip checking other statics. These statics must be sound by themselves,\n-                    // and the only way to get broken statics here is by using unsafe code.\n-                    // The reasons we don't check other statics is twofold. For one, in all sound\n-                    // cases, the static was already validated on its own, and second, we trigger\n-                    // cycle errors if we try to compute the value of the other static and that\n-                    // static refers back to us.\n-                    // We might miss const-invalid data,\n-                    // but things are still sound otherwise (in particular re: consts\n-                    // referring to statics).\n-                    return Ok(());\n                 }\n             }\n             // Proceed recursively even for ZST, no reason to skip them!"}, {"sha": "616ac9053fd539af2e3bdde5b3be319843a37a74", "filename": "src/test/ui/associated-const/defaults-cyclic-fail.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/182ed8544d2f2ecd4690535a7fcdb809d72e4a86/src%2Ftest%2Fui%2Fassociated-const%2Fdefaults-cyclic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/182ed8544d2f2ecd4690535a7fcdb809d72e4a86/src%2Ftest%2Fui%2Fassociated-const%2Fdefaults-cyclic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fdefaults-cyclic-fail.stderr?ref=182ed8544d2f2ecd4690535a7fcdb809d72e4a86", "patch": "@@ -1,38 +1,38 @@\n error[E0391]: cycle detected when normalizing `<() as Tr>::A`\n    |\n-note: ...which requires const-evaluating + checking `Tr::A`...\n+note: ...which requires simplifying constant for the type system `Tr::A`...\n   --> $DIR/defaults-cyclic-fail.rs:6:5\n    |\n LL |     const A: u8 = Self::B;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires const-evaluating + checking `Tr::A`...\n+note: ...which requires simplifying constant for the type system `Tr::A`...\n   --> $DIR/defaults-cyclic-fail.rs:6:5\n    |\n LL |     const A: u8 = Self::B;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires const-evaluating `Tr::A`...\n+note: ...which requires const-evaluating + checking `Tr::A`...\n   --> $DIR/defaults-cyclic-fail.rs:6:5\n    |\n LL |     const A: u8 = Self::B;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which requires normalizing `<() as Tr>::B`...\n-note: ...which requires const-evaluating + checking `Tr::B`...\n+note: ...which requires simplifying constant for the type system `Tr::B`...\n   --> $DIR/defaults-cyclic-fail.rs:8:5\n    |\n LL |     const B: u8 = Self::A;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires const-evaluating + checking `Tr::B`...\n+note: ...which requires simplifying constant for the type system `Tr::B`...\n   --> $DIR/defaults-cyclic-fail.rs:8:5\n    |\n LL |     const B: u8 = Self::A;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires const-evaluating `Tr::B`...\n+note: ...which requires const-evaluating + checking `Tr::B`...\n   --> $DIR/defaults-cyclic-fail.rs:8:5\n    |\n LL |     const B: u8 = Self::A;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which again requires normalizing `<() as Tr>::A`, completing the cycle\n-note: cycle used when const-evaluating `main::promoted[2]`\n+note: cycle used when const-evaluating + checking `main::promoted[2]`\n   --> $DIR/defaults-cyclic-fail.rs:14:1\n    |\n LL | fn main() {"}, {"sha": "d9bb7386565fa83612499055fd0da8b1da85f88f", "filename": "src/test/ui/associated-consts/issue-24949-assoc-const-static-recursion-impl.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/182ed8544d2f2ecd4690535a7fcdb809d72e4a86/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/182ed8544d2f2ecd4690535a7fcdb809d72e4a86/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-impl.stderr?ref=182ed8544d2f2ecd4690535a7fcdb809d72e4a86", "patch": "@@ -1,31 +1,31 @@\n-error[E0391]: cycle detected when const-evaluating + checking `IMPL_REF_BAR`\n+error[E0391]: cycle detected when simplifying constant for the type system `IMPL_REF_BAR`\n   --> $DIR/issue-24949-assoc-const-static-recursion-impl.rs:7:1\n    |\n LL | const IMPL_REF_BAR: u32 = GlobalImplRef::BAR;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: ...which requires const-evaluating + checking `IMPL_REF_BAR`...\n+note: ...which requires simplifying constant for the type system `IMPL_REF_BAR`...\n   --> $DIR/issue-24949-assoc-const-static-recursion-impl.rs:7:1\n    |\n LL | const IMPL_REF_BAR: u32 = GlobalImplRef::BAR;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires const-evaluating `IMPL_REF_BAR`...\n+note: ...which requires const-evaluating + checking `IMPL_REF_BAR`...\n   --> $DIR/issue-24949-assoc-const-static-recursion-impl.rs:7:1\n    |\n LL | const IMPL_REF_BAR: u32 = GlobalImplRef::BAR;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which requires normalizing `<impl at $DIR/issue-24949-assoc-const-static-recursion-impl.rs:11:1: 13:2>::BAR`...\n-note: ...which requires const-evaluating + checking `<impl at $DIR/issue-24949-assoc-const-static-recursion-impl.rs:11:1: 13:2>::BAR`...\n+note: ...which requires simplifying constant for the type system `<impl at $DIR/issue-24949-assoc-const-static-recursion-impl.rs:11:1: 13:2>::BAR`...\n   --> $DIR/issue-24949-assoc-const-static-recursion-impl.rs:12:5\n    |\n LL |     const BAR: u32 = IMPL_REF_BAR;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires const-evaluating + checking `<impl at $DIR/issue-24949-assoc-const-static-recursion-impl.rs:11:1: 13:2>::BAR`...\n+note: ...which requires simplifying constant for the type system `<impl at $DIR/issue-24949-assoc-const-static-recursion-impl.rs:11:1: 13:2>::BAR`...\n   --> $DIR/issue-24949-assoc-const-static-recursion-impl.rs:12:5\n    |\n LL |     const BAR: u32 = IMPL_REF_BAR;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires const-evaluating `<impl at $DIR/issue-24949-assoc-const-static-recursion-impl.rs:11:1: 13:2>::BAR`...\n+note: ...which requires const-evaluating + checking `<impl at $DIR/issue-24949-assoc-const-static-recursion-impl.rs:11:1: 13:2>::BAR`...\n   --> $DIR/issue-24949-assoc-const-static-recursion-impl.rs:12:5\n    |\n LL |     const BAR: u32 = IMPL_REF_BAR;\n@@ -36,7 +36,7 @@ note: ...which requires optimizing MIR for `<impl at $DIR/issue-24949-assoc-cons\n LL |     const BAR: u32 = IMPL_REF_BAR;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which requires normalizing `IMPL_REF_BAR`...\n-   = note: ...which again requires const-evaluating + checking `IMPL_REF_BAR`, completing the cycle\n+   = note: ...which again requires simplifying constant for the type system `IMPL_REF_BAR`, completing the cycle\n    = note: cycle used when running analysis passes on this crate\n \n error: aborting due to previous error"}, {"sha": "d000d8ac097a486f99b580bfaff03ab7e7eeb0b2", "filename": "src/test/ui/associated-consts/issue-24949-assoc-const-static-recursion-trait-default.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/182ed8544d2f2ecd4690535a7fcdb809d72e4a86/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-trait-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/182ed8544d2f2ecd4690535a7fcdb809d72e4a86/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-trait-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-trait-default.stderr?ref=182ed8544d2f2ecd4690535a7fcdb809d72e4a86", "patch": "@@ -1,31 +1,31 @@\n-error[E0391]: cycle detected when const-evaluating + checking `DEFAULT_REF_BAR`\n+error[E0391]: cycle detected when simplifying constant for the type system `DEFAULT_REF_BAR`\n   --> $DIR/issue-24949-assoc-const-static-recursion-trait-default.rs:11:1\n    |\n LL | const DEFAULT_REF_BAR: u32 = <GlobalDefaultRef>::BAR;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: ...which requires const-evaluating + checking `DEFAULT_REF_BAR`...\n+note: ...which requires simplifying constant for the type system `DEFAULT_REF_BAR`...\n   --> $DIR/issue-24949-assoc-const-static-recursion-trait-default.rs:11:1\n    |\n LL | const DEFAULT_REF_BAR: u32 = <GlobalDefaultRef>::BAR;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires const-evaluating `DEFAULT_REF_BAR`...\n+note: ...which requires const-evaluating + checking `DEFAULT_REF_BAR`...\n   --> $DIR/issue-24949-assoc-const-static-recursion-trait-default.rs:11:1\n    |\n LL | const DEFAULT_REF_BAR: u32 = <GlobalDefaultRef>::BAR;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which requires normalizing `<GlobalDefaultRef as FooDefault>::BAR`...\n-note: ...which requires const-evaluating + checking `FooDefault::BAR`...\n+note: ...which requires simplifying constant for the type system `FooDefault::BAR`...\n   --> $DIR/issue-24949-assoc-const-static-recursion-trait-default.rs:8:5\n    |\n LL |     const BAR: u32 = DEFAULT_REF_BAR;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires const-evaluating + checking `FooDefault::BAR`...\n+note: ...which requires simplifying constant for the type system `FooDefault::BAR`...\n   --> $DIR/issue-24949-assoc-const-static-recursion-trait-default.rs:8:5\n    |\n LL |     const BAR: u32 = DEFAULT_REF_BAR;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires const-evaluating `FooDefault::BAR`...\n+note: ...which requires const-evaluating + checking `FooDefault::BAR`...\n   --> $DIR/issue-24949-assoc-const-static-recursion-trait-default.rs:8:5\n    |\n LL |     const BAR: u32 = DEFAULT_REF_BAR;\n@@ -36,7 +36,7 @@ note: ...which requires optimizing MIR for `FooDefault::BAR`...\n LL |     const BAR: u32 = DEFAULT_REF_BAR;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which requires normalizing `DEFAULT_REF_BAR`...\n-   = note: ...which again requires const-evaluating + checking `DEFAULT_REF_BAR`, completing the cycle\n+   = note: ...which again requires simplifying constant for the type system `DEFAULT_REF_BAR`, completing the cycle\n    = note: cycle used when running analysis passes on this crate\n \n error: aborting due to previous error"}, {"sha": "62d2051b6c23aab13a3bb8bc697f136ebf86768f", "filename": "src/test/ui/associated-consts/issue-24949-assoc-const-static-recursion-trait.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/182ed8544d2f2ecd4690535a7fcdb809d72e4a86/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/182ed8544d2f2ecd4690535a7fcdb809d72e4a86/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-trait.stderr?ref=182ed8544d2f2ecd4690535a7fcdb809d72e4a86", "patch": "@@ -1,31 +1,31 @@\n-error[E0391]: cycle detected when const-evaluating + checking `TRAIT_REF_BAR`\n+error[E0391]: cycle detected when simplifying constant for the type system `TRAIT_REF_BAR`\n   --> $DIR/issue-24949-assoc-const-static-recursion-trait.rs:7:1\n    |\n LL | const TRAIT_REF_BAR: u32 = <GlobalTraitRef>::BAR;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: ...which requires const-evaluating + checking `TRAIT_REF_BAR`...\n+note: ...which requires simplifying constant for the type system `TRAIT_REF_BAR`...\n   --> $DIR/issue-24949-assoc-const-static-recursion-trait.rs:7:1\n    |\n LL | const TRAIT_REF_BAR: u32 = <GlobalTraitRef>::BAR;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires const-evaluating `TRAIT_REF_BAR`...\n+note: ...which requires const-evaluating + checking `TRAIT_REF_BAR`...\n   --> $DIR/issue-24949-assoc-const-static-recursion-trait.rs:7:1\n    |\n LL | const TRAIT_REF_BAR: u32 = <GlobalTraitRef>::BAR;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which requires normalizing `<GlobalTraitRef as Foo>::BAR`...\n-note: ...which requires const-evaluating + checking `<impl at $DIR/issue-24949-assoc-const-static-recursion-trait.rs:11:1: 13:2>::BAR`...\n+note: ...which requires simplifying constant for the type system `<impl at $DIR/issue-24949-assoc-const-static-recursion-trait.rs:11:1: 13:2>::BAR`...\n   --> $DIR/issue-24949-assoc-const-static-recursion-trait.rs:12:5\n    |\n LL |     const BAR: u32 = TRAIT_REF_BAR;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires const-evaluating + checking `<impl at $DIR/issue-24949-assoc-const-static-recursion-trait.rs:11:1: 13:2>::BAR`...\n+note: ...which requires simplifying constant for the type system `<impl at $DIR/issue-24949-assoc-const-static-recursion-trait.rs:11:1: 13:2>::BAR`...\n   --> $DIR/issue-24949-assoc-const-static-recursion-trait.rs:12:5\n    |\n LL |     const BAR: u32 = TRAIT_REF_BAR;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires const-evaluating `<impl at $DIR/issue-24949-assoc-const-static-recursion-trait.rs:11:1: 13:2>::BAR`...\n+note: ...which requires const-evaluating + checking `<impl at $DIR/issue-24949-assoc-const-static-recursion-trait.rs:11:1: 13:2>::BAR`...\n   --> $DIR/issue-24949-assoc-const-static-recursion-trait.rs:12:5\n    |\n LL |     const BAR: u32 = TRAIT_REF_BAR;\n@@ -36,7 +36,7 @@ note: ...which requires optimizing MIR for `<impl at $DIR/issue-24949-assoc-cons\n LL |     const BAR: u32 = TRAIT_REF_BAR;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which requires normalizing `TRAIT_REF_BAR`...\n-   = note: ...which again requires const-evaluating + checking `TRAIT_REF_BAR`, completing the cycle\n+   = note: ...which again requires simplifying constant for the type system `TRAIT_REF_BAR`, completing the cycle\n    = note: cycle used when running analysis passes on this crate\n \n error: aborting due to previous error"}, {"sha": "26d396a181983508f3de2769edd73f593f9f67a6", "filename": "src/test/ui/consts/const-eval/const-eval-query-stack.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/182ed8544d2f2ecd4690535a7fcdb809d72e4a86/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/182ed8544d2f2ecd4690535a7fcdb809d72e4a86/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.stderr?ref=182ed8544d2f2ecd4690535a7fcdb809d72e4a86", "patch": "@@ -9,9 +9,9 @@ LL |     let x: &'static i32 = &(1 / 0);\n    = note: `#[deny(const_err)]` on by default\n \n query stack during panic:\n-#0 [eval_to_allocation_raw] const-evaluating `main::promoted[1]`\n-#1 [eval_to_const_value] const-evaluating + checking `main::promoted[1]`\n-#2 [eval_to_const_value] const-evaluating + checking `main::promoted[1]`\n+#0 [eval_to_allocation_raw] const-evaluating + checking `main::promoted[1]`\n+#1 [eval_to_const_value] simplifying constant for the type system `main::promoted[1]`\n+#2 [eval_to_const_value] simplifying constant for the type system `main::promoted[1]`\n #3 [normalize_generic_arg_after_erasing_regions] normalizing `main::promoted[1]`\n #4 [optimized_mir] optimizing MIR for `main`\n #5 [collect_and_partition_mono_items] collect_and_partition_mono_items"}, {"sha": "58d5e9ac58c2eab811a6bbd90df93994890a3ee1", "filename": "src/test/ui/consts/const-size_of-cycle.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/182ed8544d2f2ecd4690535a7fcdb809d72e4a86/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of-cycle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/182ed8544d2f2ecd4690535a7fcdb809d72e4a86/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of-cycle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of-cycle.stderr?ref=182ed8544d2f2ecd4690535a7fcdb809d72e4a86", "patch": "@@ -1,32 +1,32 @@\n-error[E0391]: cycle detected when const-evaluating + checking `Foo::bytes::{{constant}}#0`\n+error[E0391]: cycle detected when simplifying constant for the type system `Foo::bytes::{{constant}}#0`\n   --> $DIR/const-size_of-cycle.rs:4:17\n    |\n LL |     bytes: [u8; std::mem::size_of::<Foo>()]\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: ...which requires const-evaluating + checking `Foo::bytes::{{constant}}#0`...\n+note: ...which requires simplifying constant for the type system `Foo::bytes::{{constant}}#0`...\n   --> $DIR/const-size_of-cycle.rs:4:17\n    |\n LL |     bytes: [u8; std::mem::size_of::<Foo>()]\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires const-evaluating `Foo::bytes::{{constant}}#0`...\n+note: ...which requires const-evaluating + checking `Foo::bytes::{{constant}}#0`...\n   --> $DIR/const-size_of-cycle.rs:4:17\n    |\n LL |     bytes: [u8; std::mem::size_of::<Foo>()]\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires const-evaluating `std::mem::size_of`...\n+note: ...which requires const-evaluating + checking `std::mem::size_of`...\n   --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n    |\n LL | pub const fn size_of<T>() -> usize {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires const-evaluating + checking `std::intrinsics::size_of`...\n+note: ...which requires simplifying constant for the type system `std::intrinsics::size_of`...\n   --> $SRC_DIR/core/src/intrinsics.rs:LL:COL\n    |\n LL |     pub fn size_of<T>() -> usize;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which requires computing layout of `Foo`...\n    = note: ...which requires normalizing `[u8; _]`...\n-   = note: ...which again requires const-evaluating + checking `Foo::bytes::{{constant}}#0`, completing the cycle\n+   = note: ...which again requires simplifying constant for the type system `Foo::bytes::{{constant}}#0`, completing the cycle\n note: cycle used when checking that `Foo` is well-formed\n   --> $DIR/const-size_of-cycle.rs:3:1\n    |"}, {"sha": "03f8f5c5a0e5da7e5c6e37538fbf02d3b707e045", "filename": "src/test/ui/consts/recursive-zst-static.default.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/182ed8544d2f2ecd4690535a7fcdb809d72e4a86/src%2Ftest%2Fui%2Fconsts%2Frecursive-zst-static.default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/182ed8544d2f2ecd4690535a7fcdb809d72e4a86/src%2Ftest%2Fui%2Fconsts%2Frecursive-zst-static.default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Frecursive-zst-static.default.stderr?ref=182ed8544d2f2ecd4690535a7fcdb809d72e4a86", "patch": "@@ -1,15 +1,15 @@\n-error[E0391]: cycle detected when const-evaluating `FOO`\n+error[E0391]: cycle detected when const-evaluating + checking `FOO`\n   --> $DIR/recursive-zst-static.rs:10:1\n    |\n LL | static FOO: () = FOO;\n    | ^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: ...which requires const-evaluating `FOO`...\n+note: ...which requires const-evaluating + checking `FOO`...\n   --> $DIR/recursive-zst-static.rs:10:1\n    |\n LL | static FOO: () = FOO;\n    | ^^^^^^^^^^^^^^^^^^^^^\n-   = note: ...which again requires const-evaluating `FOO`, completing the cycle\n+   = note: ...which again requires const-evaluating + checking `FOO`, completing the cycle\n    = note: cycle used when running analysis passes on this crate\n \n error: aborting due to previous error"}, {"sha": "4e61634b349e0596baee98a5dc41e3f412d060b7", "filename": "src/test/ui/consts/recursive-zst-static.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/182ed8544d2f2ecd4690535a7fcdb809d72e4a86/src%2Ftest%2Fui%2Fconsts%2Frecursive-zst-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/182ed8544d2f2ecd4690535a7fcdb809d72e4a86/src%2Ftest%2Fui%2Fconsts%2Frecursive-zst-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Frecursive-zst-static.rs?ref=182ed8544d2f2ecd4690535a7fcdb809d72e4a86", "patch": "@@ -7,7 +7,7 @@\n // can depend on this fact and will thus do unsound things when it is violated.\n // See https://github.com/rust-lang/rust/issues/71078 for more details.\n \n-static FOO: () = FOO; //~ cycle detected when const-evaluating `FOO`\n+static FOO: () = FOO; //~ cycle detected when const-evaluating + checking `FOO`\n \n fn main() {\n     FOO"}, {"sha": "03f8f5c5a0e5da7e5c6e37538fbf02d3b707e045", "filename": "src/test/ui/consts/recursive-zst-static.unleash.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/182ed8544d2f2ecd4690535a7fcdb809d72e4a86/src%2Ftest%2Fui%2Fconsts%2Frecursive-zst-static.unleash.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/182ed8544d2f2ecd4690535a7fcdb809d72e4a86/src%2Ftest%2Fui%2Fconsts%2Frecursive-zst-static.unleash.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Frecursive-zst-static.unleash.stderr?ref=182ed8544d2f2ecd4690535a7fcdb809d72e4a86", "patch": "@@ -1,15 +1,15 @@\n-error[E0391]: cycle detected when const-evaluating `FOO`\n+error[E0391]: cycle detected when const-evaluating + checking `FOO`\n   --> $DIR/recursive-zst-static.rs:10:1\n    |\n LL | static FOO: () = FOO;\n    | ^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: ...which requires const-evaluating `FOO`...\n+note: ...which requires const-evaluating + checking `FOO`...\n   --> $DIR/recursive-zst-static.rs:10:1\n    |\n LL | static FOO: () = FOO;\n    | ^^^^^^^^^^^^^^^^^^^^^\n-   = note: ...which again requires const-evaluating `FOO`, completing the cycle\n+   = note: ...which again requires const-evaluating + checking `FOO`, completing the cycle\n    = note: cycle used when running analysis passes on this crate\n \n error: aborting due to previous error"}, {"sha": "34580407926f18cf12d650e378efd406b903b2d1", "filename": "src/test/ui/infinite/infinite-recursion-const-fn.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/182ed8544d2f2ecd4690535a7fcdb809d72e4a86/src%2Ftest%2Fui%2Finfinite%2Finfinite-recursion-const-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/182ed8544d2f2ecd4690535a7fcdb809d72e4a86/src%2Ftest%2Fui%2Finfinite%2Finfinite-recursion-const-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-recursion-const-fn.rs?ref=182ed8544d2f2ecd4690535a7fcdb809d72e4a86", "patch": "@@ -1,7 +1,12 @@\n //https://github.com/rust-lang/rust/issues/31364\n \n-const fn a() -> usize { b() } //~ ERROR cycle detected when const-evaluating `a` [E0391]\n-const fn b() -> usize { a() }\n+const fn a() -> usize {\n+    //~^ ERROR cycle detected when const-evaluating + checking `a` [E0391]\n+    b()\n+}\n+const fn b() -> usize {\n+    a()\n+}\n const ARR: [i32; a()] = [5; 6];\n \n-fn main(){}\n+fn main() {}"}, {"sha": "3c106895305dcc41f0ad28962979eed1fa33e4da", "filename": "src/test/ui/infinite/infinite-recursion-const-fn.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/182ed8544d2f2ecd4690535a7fcdb809d72e4a86/src%2Ftest%2Fui%2Finfinite%2Finfinite-recursion-const-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/182ed8544d2f2ecd4690535a7fcdb809d72e4a86/src%2Ftest%2Fui%2Finfinite%2Finfinite-recursion-const-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-recursion-const-fn.stderr?ref=182ed8544d2f2ecd4690535a7fcdb809d72e4a86", "patch": "@@ -1,17 +1,17 @@\n-error[E0391]: cycle detected when const-evaluating `a`\n+error[E0391]: cycle detected when const-evaluating + checking `a`\n   --> $DIR/infinite-recursion-const-fn.rs:3:1\n    |\n-LL | const fn a() -> usize { b() }\n+LL | const fn a() -> usize {\n    | ^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: ...which requires const-evaluating `b`...\n-  --> $DIR/infinite-recursion-const-fn.rs:4:1\n+note: ...which requires const-evaluating + checking `b`...\n+  --> $DIR/infinite-recursion-const-fn.rs:7:1\n    |\n-LL | const fn b() -> usize { a() }\n+LL | const fn b() -> usize {\n    | ^^^^^^^^^^^^^^^^^^^^^\n-   = note: ...which again requires const-evaluating `a`, completing the cycle\n-note: cycle used when const-evaluating `ARR::{{constant}}#0`\n-  --> $DIR/infinite-recursion-const-fn.rs:5:18\n+   = note: ...which again requires const-evaluating + checking `a`, completing the cycle\n+note: cycle used when const-evaluating + checking `ARR::{{constant}}#0`\n+  --> $DIR/infinite-recursion-const-fn.rs:10:18\n    |\n LL | const ARR: [i32; a()] = [5; 6];\n    |                  ^^^"}, {"sha": "0a27848b801c9539bf859faf79b9751a5d3e7911", "filename": "src/test/ui/issues/issue-17252.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/182ed8544d2f2ecd4690535a7fcdb809d72e4a86/src%2Ftest%2Fui%2Fissues%2Fissue-17252.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/182ed8544d2f2ecd4690535a7fcdb809d72e4a86/src%2Ftest%2Fui%2Fissues%2Fissue-17252.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17252.stderr?ref=182ed8544d2f2ecd4690535a7fcdb809d72e4a86", "patch": "@@ -1,22 +1,22 @@\n error[E0391]: cycle detected when normalizing `FOO`\n    |\n-note: ...which requires const-evaluating + checking `FOO`...\n+note: ...which requires simplifying constant for the type system `FOO`...\n   --> $DIR/issue-17252.rs:1:1\n    |\n LL | const FOO: usize = FOO;\n    | ^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires const-evaluating + checking `FOO`...\n+note: ...which requires simplifying constant for the type system `FOO`...\n   --> $DIR/issue-17252.rs:1:1\n    |\n LL | const FOO: usize = FOO;\n    | ^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires const-evaluating `FOO`...\n+note: ...which requires const-evaluating + checking `FOO`...\n   --> $DIR/issue-17252.rs:1:1\n    |\n LL | const FOO: usize = FOO;\n    | ^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which again requires normalizing `FOO`, completing the cycle\n-note: cycle used when const-evaluating `main::{{constant}}#0`\n+note: cycle used when const-evaluating + checking `main::{{constant}}#0`\n   --> $DIR/issue-17252.rs:4:18\n    |\n LL |     let _x: [u8; FOO]; // caused stack overflow prior to fix"}, {"sha": "45372c7f53bd4811dca45cc4fe2bb96b0e9d050d", "filename": "src/test/ui/issues/issue-23302-1.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/182ed8544d2f2ecd4690535a7fcdb809d72e4a86/src%2Ftest%2Fui%2Fissues%2Fissue-23302-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/182ed8544d2f2ecd4690535a7fcdb809d72e4a86/src%2Ftest%2Fui%2Fissues%2Fissue-23302-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23302-1.stderr?ref=182ed8544d2f2ecd4690535a7fcdb809d72e4a86", "patch": "@@ -1,21 +1,21 @@\n-error[E0391]: cycle detected when const-evaluating + checking `X::A::{{constant}}#0`\n+error[E0391]: cycle detected when simplifying constant for the type system `X::A::{{constant}}#0`\n   --> $DIR/issue-23302-1.rs:4:9\n    |\n LL |     A = X::A as isize,\n    |         ^^^^^^^^^^^^^\n    |\n-note: ...which requires const-evaluating + checking `X::A::{{constant}}#0`...\n+note: ...which requires simplifying constant for the type system `X::A::{{constant}}#0`...\n   --> $DIR/issue-23302-1.rs:4:9\n    |\n LL |     A = X::A as isize,\n    |         ^^^^^^^^^^^^^\n-note: ...which requires const-evaluating `X::A::{{constant}}#0`...\n+note: ...which requires const-evaluating + checking `X::A::{{constant}}#0`...\n   --> $DIR/issue-23302-1.rs:4:9\n    |\n LL |     A = X::A as isize,\n    |         ^^^^^^^^^^^^^\n    = note: ...which requires normalizing `X::A as isize`...\n-   = note: ...which again requires const-evaluating + checking `X::A::{{constant}}#0`, completing the cycle\n+   = note: ...which again requires simplifying constant for the type system `X::A::{{constant}}#0`, completing the cycle\n note: cycle used when collecting item types in top-level module\n   --> $DIR/issue-23302-1.rs:3:1\n    |"}, {"sha": "33bc1f6c48d5e5096549e4bb9ed857432ce2ac55", "filename": "src/test/ui/issues/issue-23302-2.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/182ed8544d2f2ecd4690535a7fcdb809d72e4a86/src%2Ftest%2Fui%2Fissues%2Fissue-23302-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/182ed8544d2f2ecd4690535a7fcdb809d72e4a86/src%2Ftest%2Fui%2Fissues%2Fissue-23302-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23302-2.stderr?ref=182ed8544d2f2ecd4690535a7fcdb809d72e4a86", "patch": "@@ -1,21 +1,21 @@\n-error[E0391]: cycle detected when const-evaluating + checking `Y::A::{{constant}}#0`\n+error[E0391]: cycle detected when simplifying constant for the type system `Y::A::{{constant}}#0`\n   --> $DIR/issue-23302-2.rs:4:9\n    |\n LL |     A = Y::B as isize,\n    |         ^^^^^^^^^^^^^\n    |\n-note: ...which requires const-evaluating + checking `Y::A::{{constant}}#0`...\n+note: ...which requires simplifying constant for the type system `Y::A::{{constant}}#0`...\n   --> $DIR/issue-23302-2.rs:4:9\n    |\n LL |     A = Y::B as isize,\n    |         ^^^^^^^^^^^^^\n-note: ...which requires const-evaluating `Y::A::{{constant}}#0`...\n+note: ...which requires const-evaluating + checking `Y::A::{{constant}}#0`...\n   --> $DIR/issue-23302-2.rs:4:9\n    |\n LL |     A = Y::B as isize,\n    |         ^^^^^^^^^^^^^\n    = note: ...which requires normalizing `Y::B as isize`...\n-   = note: ...which again requires const-evaluating + checking `Y::A::{{constant}}#0`, completing the cycle\n+   = note: ...which again requires simplifying constant for the type system `Y::A::{{constant}}#0`, completing the cycle\n note: cycle used when collecting item types in top-level module\n   --> $DIR/issue-23302-2.rs:3:1\n    |"}, {"sha": "5233b832ecc796f1bf351011b9e376e400d521f0", "filename": "src/test/ui/issues/issue-23302-3.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/182ed8544d2f2ecd4690535a7fcdb809d72e4a86/src%2Ftest%2Fui%2Fissues%2Fissue-23302-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/182ed8544d2f2ecd4690535a7fcdb809d72e4a86/src%2Ftest%2Fui%2Fissues%2Fissue-23302-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23302-3.stderr?ref=182ed8544d2f2ecd4690535a7fcdb809d72e4a86", "patch": "@@ -1,37 +1,37 @@\n-error[E0391]: cycle detected when const-evaluating + checking `A`\n+error[E0391]: cycle detected when simplifying constant for the type system `A`\n   --> $DIR/issue-23302-3.rs:1:1\n    |\n LL | const A: i32 = B;\n    | ^^^^^^^^^^^^^^^^^\n    |\n-note: ...which requires const-evaluating + checking `A`...\n+note: ...which requires simplifying constant for the type system `A`...\n   --> $DIR/issue-23302-3.rs:1:1\n    |\n LL | const A: i32 = B;\n    | ^^^^^^^^^^^^^^^^^\n-note: ...which requires const-evaluating `A`...\n+note: ...which requires const-evaluating + checking `A`...\n   --> $DIR/issue-23302-3.rs:1:1\n    |\n LL | const A: i32 = B;\n    | ^^^^^^^^^^^^^^^^^\n    = note: ...which requires normalizing `B`...\n-note: ...which requires const-evaluating + checking `B`...\n+note: ...which requires simplifying constant for the type system `B`...\n   --> $DIR/issue-23302-3.rs:3:1\n    |\n LL | const B: i32 = A;\n    | ^^^^^^^^^^^^^^^^^\n-note: ...which requires const-evaluating + checking `B`...\n+note: ...which requires simplifying constant for the type system `B`...\n   --> $DIR/issue-23302-3.rs:3:1\n    |\n LL | const B: i32 = A;\n    | ^^^^^^^^^^^^^^^^^\n-note: ...which requires const-evaluating `B`...\n+note: ...which requires const-evaluating + checking `B`...\n   --> $DIR/issue-23302-3.rs:3:1\n    |\n LL | const B: i32 = A;\n    | ^^^^^^^^^^^^^^^^^\n    = note: ...which requires normalizing `A`...\n-   = note: ...which again requires const-evaluating + checking `A`, completing the cycle\n+   = note: ...which again requires simplifying constant for the type system `A`, completing the cycle\n    = note: cycle used when running analysis passes on this crate\n \n error: aborting due to previous error"}, {"sha": "3fd1f4b59beca79db78673b9c9ee1ecda4e0ad0b", "filename": "src/test/ui/issues/issue-36163.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/182ed8544d2f2ecd4690535a7fcdb809d72e4a86/src%2Ftest%2Fui%2Fissues%2Fissue-36163.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/182ed8544d2f2ecd4690535a7fcdb809d72e4a86/src%2Ftest%2Fui%2Fissues%2Fissue-36163.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-36163.stderr?ref=182ed8544d2f2ecd4690535a7fcdb809d72e4a86", "patch": "@@ -1,37 +1,37 @@\n-error[E0391]: cycle detected when const-evaluating + checking `Foo::B::{{constant}}#0`\n+error[E0391]: cycle detected when simplifying constant for the type system `Foo::B::{{constant}}#0`\n   --> $DIR/issue-36163.rs:4:9\n    |\n LL |     B = A,\n    |         ^\n    |\n-note: ...which requires const-evaluating + checking `Foo::B::{{constant}}#0`...\n+note: ...which requires simplifying constant for the type system `Foo::B::{{constant}}#0`...\n   --> $DIR/issue-36163.rs:4:9\n    |\n LL |     B = A,\n    |         ^\n-note: ...which requires const-evaluating `Foo::B::{{constant}}#0`...\n+note: ...which requires const-evaluating + checking `Foo::B::{{constant}}#0`...\n   --> $DIR/issue-36163.rs:4:9\n    |\n LL |     B = A,\n    |         ^\n    = note: ...which requires normalizing `A`...\n-note: ...which requires const-evaluating + checking `A`...\n+note: ...which requires simplifying constant for the type system `A`...\n   --> $DIR/issue-36163.rs:1:1\n    |\n LL | const A: isize = Foo::B as isize;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires const-evaluating + checking `A`...\n+note: ...which requires simplifying constant for the type system `A`...\n   --> $DIR/issue-36163.rs:1:1\n    |\n LL | const A: isize = Foo::B as isize;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires const-evaluating `A`...\n+note: ...which requires const-evaluating + checking `A`...\n   --> $DIR/issue-36163.rs:1:1\n    |\n LL | const A: isize = Foo::B as isize;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which requires normalizing `A`...\n-   = note: ...which again requires const-evaluating + checking `Foo::B::{{constant}}#0`, completing the cycle\n+   = note: ...which again requires simplifying constant for the type system `Foo::B::{{constant}}#0`, completing the cycle\n note: cycle used when collecting item types in top-level module\n   --> $DIR/issue-36163.rs:1:1\n    |"}, {"sha": "f59ef7316d8905d4aaf1bc0287a45dd47929d12b", "filename": "src/test/ui/recursion/recursive-static-definition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/182ed8544d2f2ecd4690535a7fcdb809d72e4a86/src%2Ftest%2Fui%2Frecursion%2Frecursive-static-definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/182ed8544d2f2ecd4690535a7fcdb809d72e4a86/src%2Ftest%2Fui%2Frecursion%2Frecursive-static-definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Frecursive-static-definition.rs?ref=182ed8544d2f2ecd4690535a7fcdb809d72e4a86", "patch": "@@ -1,4 +1,4 @@\n pub static FOO: u32 = FOO;\n-//~^ ERROR cycle detected when const-evaluating `FOO`\n+//~^ ERROR cycle detected when const-evaluating + checking `FOO`\n \n fn main() {}"}, {"sha": "ee73b026a0b75b14d9a2356b2df2e3ac34cf7d30", "filename": "src/test/ui/recursion/recursive-static-definition.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/182ed8544d2f2ecd4690535a7fcdb809d72e4a86/src%2Ftest%2Fui%2Frecursion%2Frecursive-static-definition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/182ed8544d2f2ecd4690535a7fcdb809d72e4a86/src%2Ftest%2Fui%2Frecursion%2Frecursive-static-definition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Frecursive-static-definition.stderr?ref=182ed8544d2f2ecd4690535a7fcdb809d72e4a86", "patch": "@@ -1,15 +1,15 @@\n-error[E0391]: cycle detected when const-evaluating `FOO`\n+error[E0391]: cycle detected when const-evaluating + checking `FOO`\n   --> $DIR/recursive-static-definition.rs:1:1\n    |\n LL | pub static FOO: u32 = FOO;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: ...which requires const-evaluating `FOO`...\n+note: ...which requires const-evaluating + checking `FOO`...\n   --> $DIR/recursive-static-definition.rs:1:1\n    |\n LL | pub static FOO: u32 = FOO;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: ...which again requires const-evaluating `FOO`, completing the cycle\n+   = note: ...which again requires const-evaluating + checking `FOO`, completing the cycle\n    = note: cycle used when running analysis passes on this crate\n \n error: aborting due to previous error"}, {"sha": "8dadd77fc16d5d4bbd1bf7dcbd91306749132d62", "filename": "src/test/ui/type-alias-enum-variants/self-in-enum-definition.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/182ed8544d2f2ecd4690535a7fcdb809d72e4a86/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fself-in-enum-definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/182ed8544d2f2ecd4690535a7fcdb809d72e4a86/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fself-in-enum-definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fself-in-enum-definition.rs?ref=182ed8544d2f2ecd4690535a7fcdb809d72e4a86", "patch": "@@ -1,8 +1,8 @@\n #[repr(u8)]\n enum Alpha {\n     V1 = 41,\n-    V2 = Self::V1 as u8 + 1, // OK; See #50072.\n-    V3 = Self::V1 {} as u8 + 2, //~ ERROR cycle detected when const-evaluating\n+    V2 = Self::V1 as u8 + 1,    // OK; See #50072.\n+    V3 = Self::V1 {} as u8 + 2, //~ ERROR cycle detected when simplifying constant\n }\n \n fn main() {}"}, {"sha": "fbe6279ca92267a076c6bc2b82284957d99b2a35", "filename": "src/test/ui/type-alias-enum-variants/self-in-enum-definition.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/182ed8544d2f2ecd4690535a7fcdb809d72e4a86/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fself-in-enum-definition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/182ed8544d2f2ecd4690535a7fcdb809d72e4a86/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fself-in-enum-definition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fself-in-enum-definition.stderr?ref=182ed8544d2f2ecd4690535a7fcdb809d72e4a86", "patch": "@@ -1,28 +1,28 @@\n-error[E0391]: cycle detected when const-evaluating + checking `Alpha::V3::{{constant}}#0`\n+error[E0391]: cycle detected when simplifying constant for the type system `Alpha::V3::{{constant}}#0`\n   --> $DIR/self-in-enum-definition.rs:5:10\n    |\n LL |     V3 = Self::V1 {} as u8 + 2,\n    |          ^^^^^^^^\n    |\n-note: ...which requires const-evaluating + checking `Alpha::V3::{{constant}}#0`...\n+note: ...which requires simplifying constant for the type system `Alpha::V3::{{constant}}#0`...\n   --> $DIR/self-in-enum-definition.rs:5:10\n    |\n LL |     V3 = Self::V1 {} as u8 + 2,\n    |          ^^^^^^^^\n-note: ...which requires const-evaluating `Alpha::V3::{{constant}}#0`...\n+note: ...which requires const-evaluating + checking `Alpha::V3::{{constant}}#0`...\n   --> $DIR/self-in-enum-definition.rs:5:10\n    |\n LL |     V3 = Self::V1 {} as u8 + 2,\n    |          ^^^^^^^^\n    = note: ...which requires computing layout of `Alpha`...\n-   = note: ...which again requires const-evaluating + checking `Alpha::V3::{{constant}}#0`, completing the cycle\n+   = note: ...which again requires simplifying constant for the type system `Alpha::V3::{{constant}}#0`, completing the cycle\n note: cycle used when collecting item types in top-level module\n   --> $DIR/self-in-enum-definition.rs:1:1\n    |\n LL | / #[repr(u8)]\n LL | | enum Alpha {\n LL | |     V1 = 41,\n-LL | |     V2 = Self::V1 as u8 + 1, // OK; See #50072.\n+LL | |     V2 = Self::V1 as u8 + 1,    // OK; See #50072.\n ...  |\n LL | |\n LL | | fn main() {}"}, {"sha": "789919bd1668d2949ddf245708434ceebc20ecaa", "filename": "src/test/ui/write-to-static-mut-in-static.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/182ed8544d2f2ecd4690535a7fcdb809d72e4a86/src%2Ftest%2Fui%2Fwrite-to-static-mut-in-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/182ed8544d2f2ecd4690535a7fcdb809d72e4a86/src%2Ftest%2Fui%2Fwrite-to-static-mut-in-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwrite-to-static-mut-in-static.stderr?ref=182ed8544d2f2ecd4690535a7fcdb809d72e4a86", "patch": "@@ -4,18 +4,18 @@ error[E0080]: could not evaluate static initializer\n LL | pub static mut B: () = unsafe { A = 1; };\n    |                                 ^^^^^ modifying a static's initial value from another static's initializer\n \n-error[E0391]: cycle detected when const-evaluating `C`\n+error[E0391]: cycle detected when const-evaluating + checking `C`\n   --> $DIR/write-to-static-mut-in-static.rs:5:1\n    |\n LL | pub static mut C: u32 = unsafe { C = 1; 0 };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: ...which requires const-evaluating `C`...\n+note: ...which requires const-evaluating + checking `C`...\n   --> $DIR/write-to-static-mut-in-static.rs:5:1\n    |\n LL | pub static mut C: u32 = unsafe { C = 1; 0 };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: ...which again requires const-evaluating `C`, completing the cycle\n+   = note: ...which again requires const-evaluating + checking `C`, completing the cycle\n    = note: cycle used when running analysis passes on this crate\n \n error: aborting due to 2 previous errors"}]}