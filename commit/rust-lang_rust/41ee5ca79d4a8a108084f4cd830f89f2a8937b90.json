{"sha": "41ee5ca79d4a8a108084f4cd830f89f2a8937b90", "node_id": "C_kwDOAAsO6NoAKDQxZWU1Y2E3OWQ0YThhMTA4MDg0ZjRjZDgzMGY4OWYyYTg5MzdiOTA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-13T08:55:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-13T08:55:40Z"}, "message": "Auto merge of #14559 - Veykril:version-code-lens, r=Veykril\n\ninternal: Skip code lens resolution for mismatched document versions\n\nCloses https://github.com/rust-lang/rust-analyzer/issues/12718", "tree": {"sha": "7c50ee642d52317046f57721434f06719890572c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c50ee642d52317046f57721434f06719890572c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41ee5ca79d4a8a108084f4cd830f89f2a8937b90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41ee5ca79d4a8a108084f4cd830f89f2a8937b90", "html_url": "https://github.com/rust-lang/rust/commit/41ee5ca79d4a8a108084f4cd830f89f2a8937b90", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41ee5ca79d4a8a108084f4cd830f89f2a8937b90/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b620164489a9b9f7849ae24f78b8a46f2f486ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b620164489a9b9f7849ae24f78b8a46f2f486ab", "html_url": "https://github.com/rust-lang/rust/commit/2b620164489a9b9f7849ae24f78b8a46f2f486ab"}, {"sha": "0286e46e5f4365e1f83793919e1e960ad4960996", "url": "https://api.github.com/repos/rust-lang/rust/commits/0286e46e5f4365e1f83793919e1e960ad4960996", "html_url": "https://github.com/rust-lang/rust/commit/0286e46e5f4365e1f83793919e1e960ad4960996"}], "stats": {"total": 53, "additions": 43, "deletions": 10}, "files": [{"sha": "1482183926d6309b28419a72f48a3e6dd24466f2", "filename": "crates/rust-analyzer/src/from_proto.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/41ee5ca79d4a8a108084f4cd830f89f2a8937b90/crates%2Frust-analyzer%2Fsrc%2Ffrom_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41ee5ca79d4a8a108084f4cd830f89f2a8937b90/crates%2Frust-analyzer%2Fsrc%2Ffrom_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Ffrom_proto.rs?ref=41ee5ca79d4a8a108084f4cd830f89f2a8937b90", "patch": "@@ -98,13 +98,17 @@ pub(crate) fn assist_kind(kind: lsp_types::CodeActionKind) -> Option<AssistKind>\n pub(crate) fn annotation(\n     snap: &GlobalStateSnapshot,\n     code_lens: lsp_types::CodeLens,\n-) -> Result<Annotation> {\n+) -> Result<Option<Annotation>> {\n     let data =\n         code_lens.data.ok_or_else(|| invalid_params_error(\"code lens without data\".to_string()))?;\n     let resolve = from_json::<lsp_ext::CodeLensResolveData>(\"CodeLensResolveData\", &data)?;\n \n-    match resolve {\n-        lsp_ext::CodeLensResolveData::Impls(params) => {\n+    match resolve.kind {\n+        lsp_ext::CodeLensResolveDataKind::Impls(params) => {\n+            if matches!(snap.url_file_version(&params.text_document_position_params.text_document.uri), Some(version) if version == resolve.version)\n+            {\n+                return Ok(None);\n+            }\n             let pos @ FilePosition { file_id, .. } =\n                 file_position(snap, params.text_document_position_params)?;\n             let line_index = snap.file_line_index(file_id)?;\n@@ -114,7 +118,11 @@ pub(crate) fn annotation(\n                 kind: AnnotationKind::HasImpls { pos, data: None },\n             })\n         }\n-        lsp_ext::CodeLensResolveData::References(params) => {\n+        lsp_ext::CodeLensResolveDataKind::References(params) => {\n+            if matches!(snap.url_file_version(&params.text_document.uri), Some(version) if version == resolve.version)\n+            {\n+                return Ok(None);\n+            }\n             let pos @ FilePosition { file_id, .. } = file_position(snap, params)?;\n             let line_index = snap.file_line_index(file_id)?;\n \n@@ -123,5 +131,5 @@ pub(crate) fn annotation(\n                 kind: AnnotationKind::HasReferences { pos, data: None },\n             })\n         }\n-    }\n+    }.map(Some)\n }"}, {"sha": "54df01580a6ed0a69f3a117d92889747b3dfb1f9", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ee5ca79d4a8a108084f4cd830f89f2a8937b90/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41ee5ca79d4a8a108084f4cd830f89f2a8937b90/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=41ee5ca79d4a8a108084f4cd830f89f2a8937b90", "patch": "@@ -1270,7 +1270,7 @@ pub(crate) fn handle_code_lens_resolve(\n     snap: GlobalStateSnapshot,\n     code_lens: CodeLens,\n ) -> Result<CodeLens> {\n-    let annotation = from_proto::annotation(&snap, code_lens.clone())?;\n+    let Some(annotation) = from_proto::annotation(&snap, code_lens.clone())? else { return Ok(code_lens) };\n     let annotation = snap.analysis.resolve_annotation(annotation)?;\n \n     let mut acc = Vec::new();"}, {"sha": "753094667629fcc400b33f38cf3a1a4d93142c22", "filename": "crates/rust-analyzer/src/lsp_ext.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/41ee5ca79d4a8a108084f4cd830f89f2a8937b90/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41ee5ca79d4a8a108084f4cd830f89f2a8937b90/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs?ref=41ee5ca79d4a8a108084f4cd830f89f2a8937b90", "patch": "@@ -495,7 +495,14 @@ pub struct OpenCargoTomlParams {\n /// Information about CodeLens, that is to be resolved.\n #[derive(Debug, Serialize, Deserialize)]\n #[serde(rename_all = \"camelCase\")]\n-pub(crate) enum CodeLensResolveData {\n+pub struct CodeLensResolveData {\n+    pub version: i32,\n+    pub kind: CodeLensResolveDataKind,\n+}\n+\n+#[derive(Debug, Serialize, Deserialize)]\n+#[serde(rename_all = \"camelCase\")]\n+pub enum CodeLensResolveDataKind {\n     Impls(lsp_types::request::GotoImplementationParams),\n     References(lsp_types::TextDocumentPositionParams),\n }"}, {"sha": "b0b8d38cdc381c4838644581c46d692940be7e96", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/41ee5ca79d4a8a108084f4cd830f89f2a8937b90/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41ee5ca79d4a8a108084f4cd830f89f2a8937b90/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=41ee5ca79d4a8a108084f4cd830f89f2a8937b90", "patch": "@@ -1257,7 +1257,16 @@ pub(crate) fn code_lens(\n             acc.push(lsp_types::CodeLens {\n                 range: annotation_range,\n                 command,\n-                data: Some(to_value(lsp_ext::CodeLensResolveData::Impls(goto_params)).unwrap()),\n+                data: (|| {\n+                    let version = snap.url_file_version(&url)?;\n+                    Some(\n+                        to_value(lsp_ext::CodeLensResolveData {\n+                            version,\n+                            kind: lsp_ext::CodeLensResolveDataKind::Impls(goto_params),\n+                        })\n+                        .unwrap(),\n+                    )\n+                })(),\n             })\n         }\n         AnnotationKind::HasReferences { pos: file_range, data } => {\n@@ -1287,7 +1296,16 @@ pub(crate) fn code_lens(\n             acc.push(lsp_types::CodeLens {\n                 range: annotation_range,\n                 command,\n-                data: Some(to_value(lsp_ext::CodeLensResolveData::References(doc_pos)).unwrap()),\n+                data: (|| {\n+                    let version = snap.url_file_version(&url)?;\n+                    Some(\n+                        to_value(lsp_ext::CodeLensResolveData {\n+                            version,\n+                            kind: lsp_ext::CodeLensResolveDataKind::References(doc_pos),\n+                        })\n+                        .unwrap(),\n+                    )\n+                })(),\n             })\n         }\n     }"}, {"sha": "9df6b0ff28f53ea6c8d52ce6fc0cc053cc7960ca", "filename": "docs/dev/lsp-extensions.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ee5ca79d4a8a108084f4cd830f89f2a8937b90/docs%2Fdev%2Flsp-extensions.md", "raw_url": "https://github.com/rust-lang/rust/raw/41ee5ca79d4a8a108084f4cd830f89f2a8937b90/docs%2Fdev%2Flsp-extensions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Flsp-extensions.md?ref=41ee5ca79d4a8a108084f4cd830f89f2a8937b90", "patch": "@@ -1,5 +1,5 @@\n <!---\n-lsp_ext.rs hash: 7269e4cfab906e10\n+lsp_ext.rs hash: be2f663a78beb7bd\n \n If you need to change the above hash to make the test pass, please check if you\n need to adjust this doc as well and ping this issue:"}]}