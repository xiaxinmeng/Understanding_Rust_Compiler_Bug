{"sha": "48e83268930e2d21ff8894dc2eb65767d5b858fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4ZTgzMjY4OTMwZTJkMjFmZjg4OTRkYzJlYjY1NzY3ZDViODU4ZmU=", "commit": {"author": {"name": "Vincent Esche", "email": "regexident@gmail.com", "date": "2016-01-19T11:13:40Z"}, "committer": {"name": "Vincent Esche", "email": "regexident@gmail.com", "date": "2016-01-19T14:02:42Z"}, "message": "Refined error message.\n\nMore human-readable error message showing ellipsis for excessively long witness lists.", "tree": {"sha": "375d3cc25ad955c6b7421efc34b83a5cfa8c9c49", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/375d3cc25ad955c6b7421efc34b83a5cfa8c9c49"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48e83268930e2d21ff8894dc2eb65767d5b858fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48e83268930e2d21ff8894dc2eb65767d5b858fe", "html_url": "https://github.com/rust-lang/rust/commit/48e83268930e2d21ff8894dc2eb65767d5b858fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48e83268930e2d21ff8894dc2eb65767d5b858fe/comments", "author": {"login": "regexident", "id": 138017, "node_id": "MDQ6VXNlcjEzODAxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/138017?v=4", "gravatar_id": "", "url": "https://api.github.com/users/regexident", "html_url": "https://github.com/regexident", "followers_url": "https://api.github.com/users/regexident/followers", "following_url": "https://api.github.com/users/regexident/following{/other_user}", "gists_url": "https://api.github.com/users/regexident/gists{/gist_id}", "starred_url": "https://api.github.com/users/regexident/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/regexident/subscriptions", "organizations_url": "https://api.github.com/users/regexident/orgs", "repos_url": "https://api.github.com/users/regexident/repos", "events_url": "https://api.github.com/users/regexident/events{/privacy}", "received_events_url": "https://api.github.com/users/regexident/received_events", "type": "User", "site_admin": false}, "committer": {"login": "regexident", "id": 138017, "node_id": "MDQ6VXNlcjEzODAxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/138017?v=4", "gravatar_id": "", "url": "https://api.github.com/users/regexident", "html_url": "https://github.com/regexident", "followers_url": "https://api.github.com/users/regexident/followers", "following_url": "https://api.github.com/users/regexident/following{/other_user}", "gists_url": "https://api.github.com/users/regexident/gists{/gist_id}", "starred_url": "https://api.github.com/users/regexident/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/regexident/subscriptions", "organizations_url": "https://api.github.com/users/regexident/orgs", "repos_url": "https://api.github.com/users/regexident/repos", "events_url": "https://api.github.com/users/regexident/events{/privacy}", "received_events_url": "https://api.github.com/users/regexident/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6100743842ace6db859edfeed9959ac941210c2b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6100743842ace6db859edfeed9959ac941210c2b", "html_url": "https://github.com/rust-lang/rust/commit/6100743842ace6db859edfeed9959ac941210c2b"}], "stats": {"total": 63, "additions": 48, "deletions": 15}, "files": [{"sha": "100e78d2f4564e299d4f28999f36adc3a7673571", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/48e83268930e2d21ff8894dc2eb65767d5b858fe/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48e83268930e2d21ff8894dc2eb65767d5b858fe/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=48e83268930e2d21ff8894dc2eb65767d5b858fe", "patch": "@@ -368,11 +368,10 @@ fn raw_pat<'a>(p: &'a Pat) -> &'a Pat {\n fn check_exhaustive(cx: &MatchCheckCtxt, sp: Span, matrix: &Matrix, source: hir::MatchSource) {\n     match is_useful(cx, matrix, &[DUMMY_WILD_PAT], ConstructWitness) {\n         UsefulWithWitness(pats) => {\n-            let witnesses = match &pats[..] {\n-                [] => vec![DUMMY_WILD_PAT],\n-                [p..] => {\n-                    p.iter().map(|w| &**w ).collect()\n-                }\n+            let witnesses = if pats.is_empty() {\n+                vec![DUMMY_WILD_PAT]\n+            } else {\n+                pats.iter().map(|w| &**w ).collect()\n             };\n             match source {\n                 hir::MatchSource::ForLoopDesugar => {\n@@ -392,10 +391,21 @@ fn check_exhaustive(cx: &MatchCheckCtxt, sp: Span, matrix: &Matrix, source: hir:\n                 _ => {\n                     let pattern_strings: Vec<_> = witnesses.iter().map(|w| {\n                         pat_to_string(w)\n-                    }).take(10).collect();\n+                    }).collect();\n+                    let (tail, head) = pattern_strings.split_last().unwrap();\n+                    const HEAD_LIMIT: usize = 9;\n+                    let joined_patterns = match head.len() {\n+                        0 => tail.clone(),\n+                        1...HEAD_LIMIT => head.join(\"`, `\") + \"` and `\" + tail,\n+                        _ => {\n+                            let head_iter = head.to_owned().into_iter();\n+                            let truncated_head: Vec<_> = head_iter.take(HEAD_LIMIT).collect();\n+                            truncated_head.join(\"`, `\") + \"`, \u2026 and `\" + tail\n+                        }\n+                    };\n                     span_err!(cx.tcx.sess, sp, E0004,\n                         \"non-exhaustive patterns: `{}` not covered\",\n-                        pattern_strings.join(\"`, `\")\n+                        joined_patterns\n                     );\n                 },\n             }"}, {"sha": "a84d42f1a7028c9192e98e6abdb74826aca5c4d7", "filename": "src/test/compile-fail/non-exhaustive-pattern-witness.rs", "status": "modified", "additions": 31, "deletions": 8, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/48e83268930e2d21ff8894dc2eb65767d5b858fe/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-pattern-witness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48e83268930e2d21ff8894dc2eb65767d5b858fe/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-pattern-witness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-pattern-witness.rs?ref=48e83268930e2d21ff8894dc2eb65767d5b858fe", "patch": "@@ -16,12 +16,6 @@ struct Foo {\n     second: Option<[usize; 4]>\n }\n \n-enum Color {\n-    Red,\n-    Green,\n-    CustomRGBA { a: bool, r: u8, g: u8, b: u8 }\n-}\n-\n fn struct_with_a_nested_enum_and_vector() {\n     match (Foo { first: true, second: None }) {\n //~^ ERROR non-exhaustive patterns: `Foo { first: false, second: Some([_, _, _, _]) }` not covered\n@@ -32,13 +26,42 @@ fn struct_with_a_nested_enum_and_vector() {\n     }\n }\n \n-fn enum_with_multiple_missing_variants() {\n+enum Color {\n+    Red,\n+    Green,\n+    CustomRGBA { a: bool, r: u8, g: u8, b: u8 }\n+}\n+\n+fn enum_with_two_missing_variants() {\n     match Color::Red {\n-    //~^ ERROR non-exhaustive patterns: `Red`, `Green` not covered\n+    //~^ ERROR non-exhaustive patterns: `Red` and `Green` not covered\n         Color::CustomRGBA { .. } => ()\n     }\n }\n \n+enum Direction {\n+    North, East, South, West\n+}\n+\n+fn enum_with_three_or_more_missing_variants() {\n+    match Direction::North {\n+    //~^ ERROR non-exhaustive patterns: `East`, `South` and `West` not covered\n+        Direction::North => ()\n+    }\n+}\n+\n+enum ExcessiveEnum {\n+    First, Second, Third, Fourth, Fifth, Sixth, Seventh, Eighth, Ninth, Tenth, Eleventh, Twelfth\n+}\n+\n+fn enum_with_excessive_missing_variants() {\n+    match ExcessiveEnum::First {\n+    //~^ ERROR `Sixth`, `Seventh`, `Eighth`, `Ninth`, `Tenth`, \u2026 and `Twelfth` not covered\n+\n+        ExcessiveEnum::First => ()\n+    }\n+}\n+\n fn enum_struct_variant() {\n     match Color::Red {\n     //~^ ERROR non-exhaustive patterns: `CustomRGBA { a: true, .. }` not covered"}]}