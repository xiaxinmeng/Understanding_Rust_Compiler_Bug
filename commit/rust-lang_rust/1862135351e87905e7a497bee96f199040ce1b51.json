{"sha": "1862135351e87905e7a497bee96f199040ce1b51", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4NjIxMzUzNTFlODc5MDVlN2E0OTdiZWU5NmYxOTkwNDBjZTFiNTE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-12-22T12:05:31Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-12-30T17:39:05Z"}, "message": "implement ptr::write without dedicated intrinsic", "tree": {"sha": "2659bb878af8ce4e063025a93c256bf22f282594", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2659bb878af8ce4e063025a93c256bf22f282594"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1862135351e87905e7a497bee96f199040ce1b51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1862135351e87905e7a497bee96f199040ce1b51", "html_url": "https://github.com/rust-lang/rust/commit/1862135351e87905e7a497bee96f199040ce1b51", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1862135351e87905e7a497bee96f199040ce1b51/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bbcaed03bf5505f3fed351887769ed1531599502", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbcaed03bf5505f3fed351887769ed1531599502", "html_url": "https://github.com/rust-lang/rust/commit/bbcaed03bf5505f3fed351887769ed1531599502"}], "stats": {"total": 23, "additions": 11, "deletions": 12}, "files": [{"sha": "0a537adba5ace448b21662ea6583ce41a1028dcc", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1862135351e87905e7a497bee96f199040ce1b51/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1862135351e87905e7a497bee96f199040ce1b51/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=1862135351e87905e7a497bee96f199040ce1b51", "patch": "@@ -768,13 +768,6 @@ extern \"rust-intrinsic\" {\n     #[rustc_const_stable(feature = \"const_size_of\", since = \"1.40.0\")]\n     pub fn size_of<T>() -> usize;\n \n-    /// Moves a value to an uninitialized memory location.\n-    ///\n-    /// Drop glue is not run on the destination.\n-    ///\n-    /// The stabilized version of this intrinsic is [`core::ptr::write`](crate::ptr::write).\n-    pub fn move_val_init<T>(dst: *mut T, src: T);\n-\n     /// The minimum alignment of a type.\n     ///\n     /// The stabilized version of this intrinsic is [`core::mem::align_of`](crate::mem::align_of)."}, {"sha": "8fe10099bb9884dd52ae8ffe72d07c5115d0188f", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1862135351e87905e7a497bee96f199040ce1b51/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1862135351e87905e7a497bee96f199040ce1b51/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=1862135351e87905e7a497bee96f199040ce1b51", "patch": "@@ -883,12 +883,18 @@ pub const unsafe fn read_unaligned<T>(src: *const T) -> T {\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub unsafe fn write<T>(dst: *mut T, src: T) {\n-    if cfg!(debug_assertions) && !is_aligned_and_not_null(dst) {\n-        // Not panicking to keep codegen impact smaller.\n-        abort();\n+    // We are calling the intrinsics directly to avoid function calls in the generated code.\n+    extern \"rust-intrinsic\" {\n+        fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);\n+    }\n+\n+    // SAFETY: the caller must guarantee that `dst` is valid for writes.\n+    // `dst` cannot overlap `src` because the caller has mutable access\n+    // to `dst` while `src` is owned by this function.\n+    unsafe {\n+        copy_nonoverlapping(&src as *const T, dst, 1);\n+        intrinsics::forget(src);\n     }\n-    // SAFETY: the caller must uphold the safety contract for `move_val_init`.\n-    unsafe { intrinsics::move_val_init(&mut *dst, src) }\n }\n \n /// Overwrites a memory location with the given value without reading or"}]}