{"sha": "e227433dc39ab13aa2368814169c049b8f876825", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyMjc0MzNkYzM5YWIxM2FhMjM2ODgxNDE2OWMwNDliOGY4NzY4MjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-01T07:54:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-01T07:54:04Z"}, "message": "Auto merge of #38711 - programble:doc/slice-iter-method-links, r=brson\n\nAdd links to methods on all slice iterator struct docs\n\nIn the same style as `std::slice::Iter` to help people find how to create iterators.\n\nr? @steveklabnik", "tree": {"sha": "cde6aaaa906c7043897a6d26130f9b563c7e1c19", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cde6aaaa906c7043897a6d26130f9b563c7e1c19"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e227433dc39ab13aa2368814169c049b8f876825", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e227433dc39ab13aa2368814169c049b8f876825", "html_url": "https://github.com/rust-lang/rust/commit/e227433dc39ab13aa2368814169c049b8f876825", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e227433dc39ab13aa2368814169c049b8f876825/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "453172bdf93c11f3d0940a083cfcfd1ab0ccfa52", "url": "https://api.github.com/repos/rust-lang/rust/commits/453172bdf93c11f3d0940a083cfcfd1ab0ccfa52", "html_url": "https://github.com/rust-lang/rust/commit/453172bdf93c11f3d0940a083cfcfd1ab0ccfa52"}, {"sha": "8d88bbc4e8aa533096fb890349fa43a381206cc7", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d88bbc4e8aa533096fb890349fa43a381206cc7", "html_url": "https://github.com/rust-lang/rust/commit/8d88bbc4e8aa533096fb890349fa43a381206cc7"}], "stats": {"total": 45, "additions": 45, "deletions": 0}, "files": [{"sha": "4d4c5129e602d54c42048705c3b44017dda7d687", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/e227433dc39ab13aa2368814169c049b8f876825/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e227433dc39ab13aa2368814169c049b8f876825/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=e227433dc39ab13aa2368814169c049b8f876825", "patch": "@@ -1301,6 +1301,11 @@ trait SplitIter: DoubleEndedIterator {\n \n /// An iterator over subslices separated by elements that match a predicate\n /// function.\n+///\n+/// This struct is created by the [`split`] method on [slices].\n+///\n+/// [`split`]: ../../std/primitive.slice.html#method.split\n+/// [slices]: ../../std/primitive.slice.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Split<'a, T:'a, P> where P: FnMut(&T) -> bool {\n     v: &'a [T],\n@@ -1387,6 +1392,11 @@ impl<'a, T, P> FusedIterator for Split<'a, T, P> where P: FnMut(&T) -> bool {}\n \n /// An iterator over the subslices of the vector which are separated\n /// by elements that match `pred`.\n+///\n+/// This struct is created by the [`split_mut`] method on [slices].\n+///\n+/// [`split_mut`]: ../../std/primitive.slice.html#method.split_mut\n+/// [slices]: ../../std/primitive.slice.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct SplitMut<'a, T:'a, P> where P: FnMut(&T) -> bool {\n     v: &'a mut [T],\n@@ -1512,6 +1522,11 @@ impl<T, I: SplitIter<Item=T>> Iterator for GenericSplitN<I> {\n \n /// An iterator over subslices separated by elements that match a predicate\n /// function, limited to a given number of splits.\n+///\n+/// This struct is created by the [`splitn`] method on [slices].\n+///\n+/// [`splitn`]: ../../std/primitive.slice.html#method.splitn\n+/// [slices]: ../../std/primitive.slice.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct SplitN<'a, T: 'a, P> where P: FnMut(&T) -> bool {\n     inner: GenericSplitN<Split<'a, T, P>>\n@@ -1529,6 +1544,11 @@ impl<'a, T: 'a + fmt::Debug, P> fmt::Debug for SplitN<'a, T, P> where P: FnMut(&\n /// An iterator over subslices separated by elements that match a\n /// predicate function, limited to a given number of splits, starting\n /// from the end of the slice.\n+///\n+/// This struct is created by the [`rsplitn`] method on [slices].\n+///\n+/// [`rsplitn`]: ../../std/primitive.slice.html#method.rsplitn\n+/// [slices]: ../../std/primitive.slice.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct RSplitN<'a, T: 'a, P> where P: FnMut(&T) -> bool {\n     inner: GenericSplitN<Split<'a, T, P>>\n@@ -1545,6 +1565,11 @@ impl<'a, T: 'a + fmt::Debug, P> fmt::Debug for RSplitN<'a, T, P> where P: FnMut(\n \n /// An iterator over subslices separated by elements that match a predicate\n /// function, limited to a given number of splits.\n+///\n+/// This struct is created by the [`splitn_mut`] method on [slices].\n+///\n+/// [`splitn_mut`]: ../../std/primitive.slice.html#method.splitn_mut\n+/// [slices]: ../../std/primitive.slice.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct SplitNMut<'a, T: 'a, P> where P: FnMut(&T) -> bool {\n     inner: GenericSplitN<SplitMut<'a, T, P>>\n@@ -1562,6 +1587,11 @@ impl<'a, T: 'a + fmt::Debug, P> fmt::Debug for SplitNMut<'a, T, P> where P: FnMu\n /// An iterator over subslices separated by elements that match a\n /// predicate function, limited to a given number of splits, starting\n /// from the end of the slice.\n+///\n+/// This struct is created by the [`rsplitn_mut`] method on [slices].\n+///\n+/// [`rsplitn_mut`]: ../../std/primitive.slice.html#method.rsplitn_mut\n+/// [slices]: ../../std/primitive.slice.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct RSplitNMut<'a, T: 'a, P> where P: FnMut(&T) -> bool {\n     inner: GenericSplitN<SplitMut<'a, T, P>>\n@@ -1607,6 +1637,11 @@ forward_iterator! { SplitNMut: T, &'a mut [T] }\n forward_iterator! { RSplitNMut: T, &'a mut [T] }\n \n /// An iterator over overlapping subslices of length `size`.\n+///\n+/// This struct is created by the [`windows`] method on [slices].\n+///\n+/// [`windows`]: ../../std/primitive.slice.html#method.windows\n+/// [slices]: ../../std/primitive.slice.html\n #[derive(Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Windows<'a, T:'a> {\n@@ -1704,6 +1739,11 @@ impl<'a, T> FusedIterator for Windows<'a, T> {}\n ///\n /// When the slice len is not evenly divided by the chunk size, the last slice\n /// of the iteration will be the remainder.\n+///\n+/// This struct is created by the [`chunks`] method on [slices].\n+///\n+/// [`chunks`]: ../../std/primitive.slice.html#method.chunks\n+/// [slices]: ../../std/primitive.slice.html\n #[derive(Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Chunks<'a, T:'a> {\n@@ -1808,6 +1848,11 @@ impl<'a, T> FusedIterator for Chunks<'a, T> {}\n /// An iterator over a slice in (non-overlapping) mutable chunks (`size`\n /// elements at a time). When the slice len is not evenly divided by the chunk\n /// size, the last slice of the iteration will be the remainder.\n+///\n+/// This struct is created by the [`chunks_mut`] method on [slices].\n+///\n+/// [`chunks_mut`]: ../../std/primitive.slice.html#method.chunks_mut\n+/// [slices]: ../../std/primitive.slice.html\n #[derive(Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct ChunksMut<'a, T:'a> {"}]}