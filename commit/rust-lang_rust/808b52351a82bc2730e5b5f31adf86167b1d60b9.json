{"sha": "808b52351a82bc2730e5b5f31adf86167b1d60b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwOGI1MjM1MWE4MmJjMjczMGU1YjVmMzFhZGY4NjE2N2IxZDYwYjk=", "commit": {"author": {"name": "Ramkumar Ramachandra", "email": "artagnon@gmail.com", "date": "2013-06-26T11:49:06Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2013-06-26T22:28:16Z"}, "message": "treemap: remove .each in favor of .iter().advance\n\nBoth extra::treemap::TreeMap and extra::treemap::TreeSet have\ncorresponding iterators TreeMapIterator and TreeSetIterator.\nUnfortunately, the tests and extra::serialize use the older .each.\nUpdate all the dependent code, and remove .each.\n\nSigned-off-by: Ramkumar Ramachandra <artagnon@gmail.com>", "tree": {"sha": "b6aa25e5ab2fcc3e00518b3f18c6ed8762bede56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6aa25e5ab2fcc3e00518b3f18c6ed8762bede56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/808b52351a82bc2730e5b5f31adf86167b1d60b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/808b52351a82bc2730e5b5f31adf86167b1d60b9", "html_url": "https://github.com/rust-lang/rust/commit/808b52351a82bc2730e5b5f31adf86167b1d60b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/808b52351a82bc2730e5b5f31adf86167b1d60b9/comments", "author": {"login": "artagnon", "id": 37226, "node_id": "MDQ6VXNlcjM3MjI2", "avatar_url": "https://avatars.githubusercontent.com/u/37226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/artagnon", "html_url": "https://github.com/artagnon", "followers_url": "https://api.github.com/users/artagnon/followers", "following_url": "https://api.github.com/users/artagnon/following{/other_user}", "gists_url": "https://api.github.com/users/artagnon/gists{/gist_id}", "starred_url": "https://api.github.com/users/artagnon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/artagnon/subscriptions", "organizations_url": "https://api.github.com/users/artagnon/orgs", "repos_url": "https://api.github.com/users/artagnon/repos", "events_url": "https://api.github.com/users/artagnon/events{/privacy}", "received_events_url": "https://api.github.com/users/artagnon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82fa5b615ec65501abccb470fe71c1aff1f29fc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/82fa5b615ec65501abccb470fe71c1aff1f29fc8", "html_url": "https://github.com/rust-lang/rust/commit/82fa5b615ec65501abccb470fe71c1aff1f29fc8"}], "stats": {"total": 27, "additions": 9, "deletions": 18}, "files": [{"sha": "3d35d1332b2f0dac6905aafbb1b2fa0e141057f8", "filename": "src/libextra/serialize.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/808b52351a82bc2730e5b5f31adf86167b1d60b9/src%2Flibextra%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/808b52351a82bc2730e5b5f31adf86167b1d60b9/src%2Flibextra%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fserialize.rs?ref=808b52351a82bc2730e5b5f31adf86167b1d60b9", "patch": "@@ -832,7 +832,7 @@ impl<\n     fn encode(&self, e: &mut E) {\n         do e.emit_map(self.len()) |e| {\n             let mut i = 0;\n-            for self.each |key, val| {\n+            for self.iter().advance |(key, val)| {\n                 e.emit_map_elt_key(i, |e| key.encode(e));\n                 e.emit_map_elt_val(i, |e| val.encode(e));\n                 i += 1;\n@@ -866,7 +866,7 @@ impl<\n     fn encode(&self, s: &mut S) {\n         do s.emit_seq(self.len()) |s| {\n             let mut i = 0;\n-            for self.each |e| {\n+            for self.iter().advance |e| {\n                 s.emit_seq_elt(i, |s| e.encode(s));\n                 i += 1;\n             }"}, {"sha": "33ec4ae94ba52ddc3c902dbb4d34ca1c3f3bf9d3", "filename": "src/libextra/treemap.rs", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/808b52351a82bc2730e5b5f31adf86167b1d60b9/src%2Flibextra%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/808b52351a82bc2730e5b5f31adf86167b1d60b9/src%2Flibextra%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftreemap.rs?ref=808b52351a82bc2730e5b5f31adf86167b1d60b9", "patch": "@@ -164,19 +164,14 @@ impl<K: TotalOrd, V> TreeMap<K, V> {\n     /// Create an empty TreeMap\n     pub fn new() -> TreeMap<K, V> { TreeMap{root: None, length: 0} }\n \n-    /// Visit all key-value pairs in order\n-    pub fn each<'a>(&'a self, f: &fn(&'a K, &'a V) -> bool) -> bool {\n-        each(&self.root, f)\n-    }\n-\n     /// Visit all keys in order\n     pub fn each_key(&self, f: &fn(&K) -> bool) -> bool {\n-        self.each(|k, _| f(k))\n+        self.iter().advance(|(k, _)| f(k))\n     }\n \n     /// Visit all values in order\n     pub fn each_value<'a>(&'a self, f: &fn(&'a V) -> bool) -> bool {\n-        self.each(|_, v| f(v))\n+        self.iter().advance(|(_, v)| f(v))\n     }\n \n     /// Iterate over the map and mutate the contained values\n@@ -484,10 +479,6 @@ impl<T: TotalOrd> TreeSet<T> {\n         TreeSetIterator{iter: self.map.iter()}\n     }\n \n-    /// Visit all values in order\n-    #[inline]\n-    pub fn each(&self, f: &fn(&T) -> bool) -> bool { self.map.each_key(f) }\n-\n     /// Visit all values in reverse order\n     #[inline]\n     pub fn each_reverse(&self, f: &fn(&T) -> bool) -> bool {\n@@ -779,7 +770,7 @@ mod test_treemap {\n             let &(k, v) = x;\n             assert!(map.find(&k).unwrap() == &v)\n         }\n-        for map.each |map_k, map_v| {\n+        for map.iter().advance |(map_k, map_v)| {\n             let mut found = false;\n             for ctrl.iter().advance |x| {\n                 let &(ctrl_k, ctrl_v) = x;\n@@ -885,7 +876,7 @@ mod test_treemap {\n     }\n \n     #[test]\n-    fn test_each() {\n+    fn test_iterator() {\n         let mut m = TreeMap::new();\n \n         assert!(m.insert(3, 6));\n@@ -895,7 +886,7 @@ mod test_treemap {\n         assert!(m.insert(1, 2));\n \n         let mut n = 0;\n-        for m.each |k, v| {\n+        for m.iter().advance |(k, v)| {\n             assert_eq!(*k, n);\n             assert_eq!(*v, n * 2);\n             n += 1;\n@@ -1090,7 +1081,7 @@ mod test_set {\n     }\n \n     #[test]\n-    fn test_each() {\n+    fn test_iterator() {\n         let mut m = TreeSet::new();\n \n         assert!(m.insert(3));\n@@ -1100,7 +1091,7 @@ mod test_set {\n         assert!(m.insert(1));\n \n         let mut n = 0;\n-        for m.each |x| {\n+        for m.iter().advance |x| {\n             println(fmt!(\"%?\", x));\n             assert_eq!(*x, n);\n             n += 1"}]}