{"sha": "9062988610dc28201c552854a2363157fc297fa5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwNjI5ODg2MTBkYzI4MjAxYzU1Mjg1NGEyMzYzMTU3ZmMyOTdmYTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-11-18T23:26:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-11-18T23:26:29Z"}, "message": "auto merge of #10552 : michaelwoerister/rust/ifstepping, r=brson\n\nThis PR improves the single-stepping experience for if-expression (no more jumping into the *else* branch before entering the *then* branch, no more jumping to the end of the *else* branch after finishing the *then* branch). Unfortunately I don't know of a straight-forward way of writing automated tests for this. Suggestions welcome!", "tree": {"sha": "67b6f34da10df06c6eb3c9800db39a00630b4248", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67b6f34da10df06c6eb3c9800db39a00630b4248"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9062988610dc28201c552854a2363157fc297fa5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9062988610dc28201c552854a2363157fc297fa5", "html_url": "https://github.com/rust-lang/rust/commit/9062988610dc28201c552854a2363157fc297fa5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9062988610dc28201c552854a2363157fc297fa5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d569df41de221ce5b0ffd385caaa9fd6d5fb2ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d569df41de221ce5b0ffd385caaa9fd6d5fb2ff", "html_url": "https://github.com/rust-lang/rust/commit/3d569df41de221ce5b0ffd385caaa9fd6d5fb2ff"}, {"sha": "d0872eb69272b5e74678b3bc095cc3082f46a5c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0872eb69272b5e74678b3bc095cc3082f46a5c9", "html_url": "https://github.com/rust-lang/rust/commit/d0872eb69272b5e74678b3bc095cc3082f46a5c9"}], "stats": {"total": 20, "additions": 20, "deletions": 0}, "files": [{"sha": "a43b1f41a377f94bf55734a808a217c505122fa1", "filename": "src/librustc/middle/trans/controlflow.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9062988610dc28201c552854a2363157fc297fa5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9062988610dc28201c552854a2363157fc297fa5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs?ref=9062988610dc28201c552854a2363157fc297fa5", "patch": "@@ -14,6 +14,7 @@ use middle::trans::base::*;\n use middle::trans::build::*;\n use middle::trans::callee;\n use middle::trans::common::*;\n+use middle::trans::debuginfo;\n use middle::trans::expr;\n use middle::ty;\n use util::common::indenter;\n@@ -75,6 +76,7 @@ pub fn trans_if(bcx: @mut Block,\n             // if true { .. } [else { .. }]\n             return do with_scope(bcx, thn.info(), \"if_true_then\") |bcx| {\n                 let bcx_out = trans_block(bcx, thn, dest);\n+                debuginfo::clear_source_location(bcx.fcx);\n                 trans_block_cleanups(bcx_out, block_cleanups(bcx))\n             }\n         } else {\n@@ -86,6 +88,7 @@ pub fn trans_if(bcx: @mut Block,\n                 Some(elexpr) => {\n                     return do with_scope(bcx, elexpr.info(), \"if_false_then\") |bcx| {\n                         let bcx_out = trans_if_else(bcx, elexpr, dest);\n+                        debuginfo::clear_source_location(bcx.fcx);\n                         trans_block_cleanups(bcx_out, block_cleanups(bcx))\n                     }\n                 }\n@@ -98,6 +101,8 @@ pub fn trans_if(bcx: @mut Block,\n     let then_bcx_in = scope_block(bcx, thn.info(), \"then\");\n \n     let then_bcx_out = trans_block(then_bcx_in, thn, dest);\n+\n+    debuginfo::clear_source_location(bcx.fcx);\n     let then_bcx_out = trans_block_cleanups(then_bcx_out,\n                                             block_cleanups(then_bcx_in));\n \n@@ -122,6 +127,9 @@ pub fn trans_if(bcx: @mut Block,\n     debug!(\"then_bcx_in={}, else_bcx_in={}\",\n            then_bcx_in.to_str(), else_bcx_in.to_str());\n \n+    // Clear the source location because it is still set to whatever has been translated\n+    // right before.\n+    debuginfo::clear_source_location(else_bcx_in.fcx);\n     CondBr(bcx, cond_val, then_bcx_in.llbb, else_bcx_in.llbb);\n     return next_bcx;\n \n@@ -139,6 +147,7 @@ pub fn trans_if(bcx: @mut Block,\n             // would be nice to have a constraint on ifs\n             _ => else_bcx_in.tcx().sess.bug(\"strange alternative in if\")\n         };\n+        debuginfo::clear_source_location(else_bcx_in.fcx);\n         trans_block_cleanups(else_bcx_out, block_cleanups(else_bcx_in))\n     }\n }"}, {"sha": "e52b0c2058af4c4ba85047dd7ca055bed643c52d", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9062988610dc28201c552854a2363157fc297fa5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9062988610dc28201c552854a2363157fc297fa5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=9062988610dc28201c552854a2363157fc297fa5", "patch": "@@ -509,6 +509,17 @@ pub fn set_source_location(fcx: &FunctionContext,\n     }\n }\n \n+/// Clears the current debug location.\n+///\n+/// Instructions generated hereafter won't be assigned a source location.\n+pub fn clear_source_location(fcx: &FunctionContext) {\n+    if fn_should_be_ignored(fcx) {\n+        return;\n+    }\n+\n+    set_debug_location(fcx.ccx, UnknownLocation);\n+}\n+\n /// Enables emitting source locations for the given functions.\n ///\n /// Since we don't want source locations to be emitted for the function prelude, they are disabled"}]}