{"sha": "b334f7c3cc3fcab8170ccb46a1f9a12702a2582c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzMzRmN2MzY2MzZmNhYjgxNzBjY2I0NmExZjlhMTI3MDJhMjU4MmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-29T02:01:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-29T02:01:48Z"}, "message": "auto merge of #13157 : pnkfelix/rust/fsk-iss13140, r=nikomatsakis\n\nr? @nikomatsakis\r\n\r\nFix #13140\r\n\r\nIncludes two fixes, and a semi-thorough regression test.\r\n\r\n(There is another set of tests that I linked from #5121, but those are sort of all over the place, while the ones I've included here are more directly focused on the issues at hand.)", "tree": {"sha": "3d686865aea7b11bc476e9e04ce70e852fd5b125", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d686865aea7b11bc476e9e04ce70e852fd5b125"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b334f7c3cc3fcab8170ccb46a1f9a12702a2582c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b334f7c3cc3fcab8170ccb46a1f9a12702a2582c", "html_url": "https://github.com/rust-lang/rust/commit/b334f7c3cc3fcab8170ccb46a1f9a12702a2582c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b334f7c3cc3fcab8170ccb46a1f9a12702a2582c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "html_url": "https://github.com/rust-lang/rust/commit/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c"}, {"sha": "0cbb1ceaa99dd7065b1237357e828c57ef4135c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/0cbb1ceaa99dd7065b1237357e828c57ef4135c9", "html_url": "https://github.com/rust-lang/rust/commit/0cbb1ceaa99dd7065b1237357e828c57ef4135c9"}], "stats": {"total": 145, "additions": 142, "deletions": 3}, "files": [{"sha": "9f1a5506b02f2559b42f8a2f8a04be4ece7a0786", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b334f7c3cc3fcab8170ccb46a1f9a12702a2582c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b334f7c3cc3fcab8170ccb46a1f9a12702a2582c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=b334f7c3cc3fcab8170ccb46a1f9a12702a2582c", "patch": "@@ -263,6 +263,7 @@ fn construct_transformed_self_ty_for_object(\n             let transformed_self_ty = *method_ty.fty.sig.inputs.get(0);\n             match ty::get(transformed_self_ty).sty {\n                 ty::ty_rptr(r, mt) => { // must be SelfRegion\n+                    let r = r.subst(tcx, &substs); // handle Early-Bound lifetime\n                     ty::mk_trait(tcx, trait_def_id, substs,\n                                  RegionTraitStore(r), mt.mutbl,\n                                  ty::EmptyBuiltinBounds())\n@@ -1435,9 +1436,10 @@ impl<'a> LookupContext<'a> {\n \n impl Repr for Candidate {\n     fn repr(&self, tcx: &ty::ctxt) -> ~str {\n-        format!(\"Candidate(rcvr_ty={}, rcvr_substs={}, origin={:?})\",\n+        format!(\"Candidate(rcvr_ty={}, rcvr_substs={}, method_ty={}, origin={:?})\",\n                 self.rcvr_match_condition.repr(tcx),\n                 self.rcvr_substs.repr(tcx),\n+                self.method_ty.repr(tcx),\n                 self.origin)\n     }\n }"}, {"sha": "3f1d3e29c54f95a1d5830eaa2c69a3f8da6a2f74", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b334f7c3cc3fcab8170ccb46a1f9a12702a2582c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b334f7c3cc3fcab8170ccb46a1f9a12702a2582c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=b334f7c3cc3fcab8170ccb46a1f9a12702a2582c", "patch": "@@ -329,6 +329,10 @@ fn check_bare_fn(ccx: &CrateCtxt,\n                  id: ast::NodeId,\n                  fty: ty::t,\n                  param_env: ty::ParameterEnvironment) {\n+    // Compute the fty from point of view of inside fn\n+    // (replace any type-scheme with a type)\n+    let fty = fty.subst(ccx.tcx, &param_env.free_substs);\n+\n     match ty::get(fty).sty {\n         ty::ty_bare_fn(ref fn_ty) => {\n             let inh = Inherited::new(ccx.tcx, param_env);\n@@ -678,9 +682,7 @@ fn check_method_body(ccx: &CrateCtxt,\n             method_generics.region_param_defs(),\n             method.body.id);\n \n-    // Compute the fty from point of view of inside fn\n     let fty = ty::node_id_to_type(ccx.tcx, method.id);\n-    let fty = fty.subst(ccx.tcx, &param_env.free_substs);\n \n     check_bare_fn(ccx, method.decl, method.body, method.id, fty, param_env);\n }"}, {"sha": "f3cfa0b9d335232684d1a6bb1e07879b485c8b10", "filename": "src/test/run-pass/regions-early-bound-trait-param.rs", "status": "added", "additions": 135, "deletions": 0, "changes": 135, "blob_url": "https://github.com/rust-lang/rust/blob/b334f7c3cc3fcab8170ccb46a1f9a12702a2582c/src%2Ftest%2Frun-pass%2Fregions-early-bound-trait-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b334f7c3cc3fcab8170ccb46a1f9a12702a2582c/src%2Ftest%2Frun-pass%2Fregions-early-bound-trait-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-early-bound-trait-param.rs?ref=b334f7c3cc3fcab8170ccb46a1f9a12702a2582c", "patch": "@@ -0,0 +1,135 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Tests that you can use an early-bound lifetime parameter as\n+// on of the generic parameters in a trait.\n+\n+trait Trait<'a> {\n+    fn long(&'a self) -> int;\n+    fn short<'b>(&'b self) -> int;\n+}\n+\n+fn poly_invoke<'c, T: Trait<'c>>(x: &'c T) -> (int, int) {\n+    let l = x.long();\n+    let s = x.short();\n+    (l,s)\n+}\n+\n+fn object_invoke1<'d>(x: &'d Trait<'d>) -> (int, int) {\n+    let l = x.long();\n+    let s = x.short();\n+    (l,s)\n+}\n+\n+struct Struct1<'e> {\n+    f: &'e Trait<'e>\n+}\n+\n+fn field_invoke1<'f, 'g>(x: &'g Struct1<'f>) -> (int,int) {\n+    let l = x.f.long();\n+    let s = x.f.short();\n+    (l,s)\n+}\n+\n+struct Struct2<'h, 'i> {\n+    f: &'h Trait<'i>\n+}\n+\n+fn object_invoke2<'j, 'k>(x: &'k Trait<'j>) -> int {\n+    x.short()\n+}\n+\n+fn field_invoke2<'l, 'm, 'n>(x: &'n Struct2<'l,'m>) -> int {\n+    x.f.short()\n+}\n+\n+trait MakerTrait<'o> {\n+    fn mk() -> Self;\n+}\n+\n+fn make_val<'p, T:MakerTrait<'p>>() -> T {\n+    MakerTrait::mk()\n+}\n+\n+trait RefMakerTrait<'q> {\n+    fn mk(Self) -> &'q Self;\n+}\n+\n+fn make_ref<'r, T:RefMakerTrait<'r>>(t:T) -> &'r T {\n+    RefMakerTrait::mk(t)\n+}\n+\n+impl<'s> Trait<'s> for (int,int) {\n+    fn long(&'s self) -> int {\n+        let &(x,_) = self;\n+        x\n+    }\n+    fn short<'b>(&'b self) -> int {\n+        let &(_,y) = self;\n+        y\n+    }\n+}\n+\n+impl<'t> MakerTrait<'t> for ~Trait<'t> {\n+    fn mk() -> ~Trait<'t> { ~(4,5) as ~Trait }\n+}\n+\n+enum List<'l> {\n+    Cons(int, &'l List<'l>),\n+    Null\n+}\n+\n+impl<'l> List<'l> {\n+    fn car<'m>(&'m self) -> int {\n+        match self {\n+            &Cons(car, _) => car,\n+            &Null => fail!(),\n+        }\n+    }\n+    fn cdr<'n>(&'n self) -> &'l List<'l> {\n+        match self {\n+            &Cons(_, cdr) => cdr,\n+            &Null => fail!(),\n+        }\n+    }\n+}\n+\n+impl<'t> RefMakerTrait<'t> for List<'t> {\n+    fn mk(l:List<'t>) -> &'t List<'t> {\n+        l.cdr()\n+    }\n+}\n+\n+pub fn main() {\n+    let t = (2,3);\n+    let o = &t as &Trait;\n+    let s1 = Struct1 { f: o };\n+    let s2 = Struct2 { f: o };\n+    assert_eq!(poly_invoke(&t), (2,3));\n+    assert_eq!(object_invoke1(&t), (2,3));\n+    assert_eq!(field_invoke1(&s1), (2,3));\n+    assert_eq!(object_invoke2(&t), 3);\n+    assert_eq!(field_invoke2(&s2), 3);\n+\n+    let m : ~Trait = make_val();\n+    assert_eq!(object_invoke1(m), (4,5));\n+    assert_eq!(object_invoke2(m), 5);\n+\n+    // The RefMakerTrait above is pretty strange (i.e. it is strange\n+    // to consume a value of type T and return a &T).  Easiest thing\n+    // that came to my mind: consume a cell of a linked list and\n+    // return a reference to the list it points to.\n+    let l0 = Null;\n+    let l1 = Cons(1, &l0);\n+    let l2 = Cons(2, &l1);\n+    let rl1 = &l1;\n+    let r  = make_ref(l2);\n+    assert_eq!(rl1.car(), r.car());\n+}"}]}