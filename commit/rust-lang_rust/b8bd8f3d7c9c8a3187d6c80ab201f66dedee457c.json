{"sha": "b8bd8f3d7c9c8a3187d6c80ab201f66dedee457c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4YmQ4ZjNkN2M5YzhhMzE4N2Q2YzgwYWIyMDFmNjZkZWRlZTQ1N2M=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-02-04T17:53:01Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-02-10T17:28:48Z"}, "message": "std: Rename Stdio::None to Stdio::Null\n\nThis better reflects what it's actually doing as we don't actually have an\noption for \"leave this I/O slot as an empty hole\".", "tree": {"sha": "2bda921922e188b907e6b4eaa710446ad80fefab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2bda921922e188b907e6b4eaa710446ad80fefab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8bd8f3d7c9c8a3187d6c80ab201f66dedee457c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8bd8f3d7c9c8a3187d6c80ab201f66dedee457c", "html_url": "https://github.com/rust-lang/rust/commit/b8bd8f3d7c9c8a3187d6c80ab201f66dedee457c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8bd8f3d7c9c8a3187d6c80ab201f66dedee457c/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "627515a7ff4fe12084d7e95969bda307849b4d0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/627515a7ff4fe12084d7e95969bda307849b4d0e", "html_url": "https://github.com/rust-lang/rust/commit/627515a7ff4fe12084d7e95969bda307849b4d0e"}], "stats": {"total": 33, "additions": 15, "deletions": 18}, "files": [{"sha": "fb217f9da04001322d694b85707b00979ac0eaa1", "filename": "src/libstd/process.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8bd8f3d7c9c8a3187d6c80ab201f66dedee457c/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8bd8f3d7c9c8a3187d6c80ab201f66dedee457c/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=b8bd8f3d7c9c8a3187d6c80ab201f66dedee457c", "patch": "@@ -385,7 +385,7 @@ fn setup_io(io: &Stdio, readable: bool)\n         }\n         StdioImp::Raw(ref owned) => (imp::Stdio::Raw(owned.raw()), None, None),\n         StdioImp::Inherit => (imp::Stdio::Inherit, None, None),\n-        StdioImp::None => (imp::Stdio::None, None, None),\n+        StdioImp::Null => (imp::Stdio::Null, None, None),\n     })\n }\n \n@@ -439,7 +439,7 @@ enum StdioImp {\n     MakePipe,\n     Raw(imp::RawStdio),\n     Inherit,\n-    None,\n+    Null,\n }\n \n impl Stdio {\n@@ -454,7 +454,7 @@ impl Stdio {\n     /// This stream will be ignored. This is the equivalent of attaching the\n     /// stream to `/dev/null`\n     #[stable(feature = \"process\", since = \"1.0.0\")]\n-    pub fn null() -> Stdio { Stdio(StdioImp::None) }\n+    pub fn null() -> Stdio { Stdio(StdioImp::Null) }\n }\n \n impl FromInner<imp::RawStdio> for Stdio {"}, {"sha": "f776af296163d7f6188484749457cd9edd663cca", "filename": "src/libstd/sys/unix/process.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b8bd8f3d7c9c8a3187d6c80ab201f66dedee457c/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8bd8f3d7c9c8a3187d6c80ab201f66dedee457c/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs?ref=b8bd8f3d7c9c8a3187d6c80ab201f66dedee457c", "patch": "@@ -275,7 +275,7 @@ pub struct Process {\n \n pub enum Stdio {\n     Inherit,\n-    None,\n+    Null,\n     Raw(c_int),\n }\n \n@@ -416,7 +416,7 @@ impl Process {\n                         Stdio::Raw(fd.into_raw())\n                     })\n                 }\n-                s @ Stdio::None |\n+                s @ Stdio::Null |\n                 s @ Stdio::Inherit |\n                 s @ Stdio::Raw(_) => Ok(s),\n             }\n@@ -430,12 +430,10 @@ impl Process {\n                 Stdio::Inherit => Ok(()),\n                 Stdio::Raw(fd) => cvt_r(|| libc::dup2(fd, dst)).map(|_| ()),\n \n-                // If a stdio file descriptor is set to be ignored, we open up\n-                // /dev/null into that file descriptor. Otherwise, the first\n-                // file descriptor opened up in the child would be numbered as\n-                // one of the stdio file descriptors, which is likely to wreak\n-                // havoc.\n-                Stdio::None => {\n+                // Open up a reference to /dev/null with appropriate read/write\n+                // permissions and then move it into the correct location via\n+                // `dup2`.\n+                Stdio::Null => {\n                     let mut opts = OpenOptions::new();\n                     opts.read(dst == libc::STDIN_FILENO);\n                     opts.write(dst != libc::STDIN_FILENO);\n@@ -590,7 +588,7 @@ mod tests {\n \n             let cat = t!(Process::spawn(&cmd, Stdio::Raw(stdin_read.raw()),\n                                               Stdio::Raw(stdout_write.raw()),\n-                                              Stdio::None));\n+                                              Stdio::Null));\n             drop(stdin_read);\n             drop(stdout_write);\n "}, {"sha": "8a522a0a7952afd8f1bebb5da7e2244fa973d382", "filename": "src/libstd/sys/windows/process.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b8bd8f3d7c9c8a3187d6c80ab201f66dedee457c/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8bd8f3d7c9c8a3187d6c80ab201f66dedee457c/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs?ref=b8bd8f3d7c9c8a3187d6c80ab201f66dedee457c", "patch": "@@ -122,7 +122,7 @@ pub struct Process {\n \n pub enum Stdio {\n     Inherit,\n-    None,\n+    Null,\n     Raw(c::HANDLE),\n }\n \n@@ -386,11 +386,10 @@ impl Stdio {\n                 RawHandle::new(handle).duplicate(0, true, c::DUPLICATE_SAME_ACCESS)\n             }\n \n-            // Similarly to unix, we don't actually leave holes for the\n-            // stdio file descriptors, but rather open up /dev/null\n-            // equivalents. These equivalents are drawn from libuv's\n-            // windows process spawning.\n-            Stdio::None => {\n+            // Open up a reference to NUL with appropriate read/write\n+            // permissions as well as the ability to be inherited to child\n+            // processes (as this is about to be inherited).\n+            Stdio::Null => {\n                 let size = mem::size_of::<c::SECURITY_ATTRIBUTES>();\n                 let mut sa = c::SECURITY_ATTRIBUTES {\n                     nLength: size as c::DWORD,"}]}