{"sha": "b2e48edded0955ed95c1824e8ec7ab48694c7f16", "node_id": "C_kwDOAAsO6NoAKGIyZTQ4ZWRkZWQwOTU1ZWQ5NWMxODI0ZThlYzdhYjQ4Njk0YzdmMTY", "commit": {"author": {"name": "nils", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2023-03-21T12:00:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-21T12:00:25Z"}, "message": "Rollup merge of #109390 - cbeuw:aggregate-lit, r=oli-obk\n\nCustom MIR: Support aggregate expressions\n\nAdd support for tuple, array and ADT expressions in custom mir\n\nr? `````@oli-obk````` or `````@tmiasko````` or `````@JakobDegen`````", "tree": {"sha": "0d5afa66916cfdbd3da1e8a6a563a799c327527f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d5afa66916cfdbd3da1e8a6a563a799c327527f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2e48edded0955ed95c1824e8ec7ab48694c7f16", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkGZxZCRBK7hj4Ov3rIwAAzp0IAG7nGy3n6tJ8QQgJOIFu+o6K\nKje6AM1SaDQ7i6iElbuE2CStM7K5k0KsVU4Zpy50pxzxo7KV4kBg3+FrEtbgYW/S\nHdXlFVFkL8rpPC0951+0b8lQS+Eet/sR99FPA4/2IkBe6lykB0VKNOGE8z6idmlA\n4gOx5r3EvrBic9rIqsQkfG2qKRUGiKMz7YKduDTxHITh4PR+5GFB3mTDp70jlFHg\nD1AAr3MzHD2lBmS2qHlXDxIsGoogm9XtrnrIEgdLZgIKFiTeyNsRlRPbzRwppekM\nHn7prK9LoyCncSaXVy0klBphIpXR04VR4IWPMXQmthacbpepP+zJiolMoIn7jDg=\n=zhV2\n-----END PGP SIGNATURE-----\n", "payload": "tree 0d5afa66916cfdbd3da1e8a6a563a799c327527f\nparent 15000ec607134ee6df9fd0b29b7317d64266d021\nparent f404f33c2197c534cf2468ea7b929e73c9b5d4b7\nauthor nils <48135649+Nilstrieb@users.noreply.github.com> 1679400025 +0100\ncommitter GitHub <noreply@github.com> 1679400025 +0100\n\nRollup merge of #109390 - cbeuw:aggregate-lit, r=oli-obk\n\nCustom MIR: Support aggregate expressions\n\nAdd support for tuple, array and ADT expressions in custom mir\n\nr? `````@oli-obk````` or `````@tmiasko````` or `````@JakobDegen`````\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2e48edded0955ed95c1824e8ec7ab48694c7f16", "html_url": "https://github.com/rust-lang/rust/commit/b2e48edded0955ed95c1824e8ec7ab48694c7f16", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2e48edded0955ed95c1824e8ec7ab48694c7f16/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15000ec607134ee6df9fd0b29b7317d64266d021", "url": "https://api.github.com/repos/rust-lang/rust/commits/15000ec607134ee6df9fd0b29b7317d64266d021", "html_url": "https://github.com/rust-lang/rust/commit/15000ec607134ee6df9fd0b29b7317d64266d021"}, {"sha": "f404f33c2197c534cf2468ea7b929e73c9b5d4b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/f404f33c2197c534cf2468ea7b929e73c9b5d4b7", "html_url": "https://github.com/rust-lang/rust/commit/f404f33c2197c534cf2468ea7b929e73c9b5d4b7"}], "stats": {"total": 136, "additions": 135, "deletions": 1}, "files": [{"sha": "a702a6b9ee1b6c4b137e7baabbd3c2562dc34406", "filename": "compiler/rustc_middle/src/mir/syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2e48edded0955ed95c1824e8ec7ab48694c7f16/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2e48edded0955ed95c1824e8ec7ab48694c7f16/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs?ref=b2e48edded0955ed95c1824e8ec7ab48694c7f16", "patch": "@@ -1165,7 +1165,7 @@ pub enum AggregateKind<'tcx> {\n     Tuple,\n \n     /// The second field is the variant index. It's equal to 0 for struct\n-    /// and union expressions. The fourth field is\n+    /// and union expressions. The last field is the\n     /// active field number and is present only for union expressions\n     /// -- e.g., for a union expression `SomeUnion { c: .. }`, the\n     /// active field index would identity the field `c`"}, {"sha": "adbd37a7cd9502e0a3877cae4d0abc0aa9d401a2", "filename": "compiler/rustc_mir_build/src/build/custom/parse/instruction.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b2e48edded0955ed95c1824e8ec7ab48694c7f16/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse%2Finstruction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2e48edded0955ed95c1824e8ec7ab48694c7f16/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse%2Finstruction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse%2Finstruction.rs?ref=b2e48edded0955ed95c1824e8ec7ab48694c7f16", "patch": "@@ -166,6 +166,28 @@ impl<'tcx, 'body> ParseCtxt<'tcx, 'body> {\n                 let cast_kind = mir_cast_kind(source_ty, expr.ty);\n                 Ok(Rvalue::Cast(cast_kind, source, expr.ty))\n             },\n+            ExprKind::Tuple { fields } => Ok(\n+                Rvalue::Aggregate(\n+                    Box::new(AggregateKind::Tuple),\n+                    fields.iter().map(|e| self.parse_operand(*e)).collect::<Result<_, _>>()?\n+                )\n+            ),\n+            ExprKind::Array { fields } => {\n+                let elem_ty = expr.ty.builtin_index().expect(\"ty must be an array\");\n+                Ok(Rvalue::Aggregate(\n+                    Box::new(AggregateKind::Array(elem_ty)),\n+                    fields.iter().map(|e| self.parse_operand(*e)).collect::<Result<_, _>>()?\n+                ))\n+            },\n+            ExprKind::Adt(box AdtExpr{ adt_def, variant_index, substs, fields, .. }) => {\n+                let is_union = adt_def.is_union();\n+                let active_field_index = is_union.then(|| fields[0].name.index());\n+\n+                Ok(Rvalue::Aggregate(\n+                    Box::new(AggregateKind::Adt(adt_def.did(), *variant_index, substs, None, active_field_index)),\n+                    fields.iter().map(|f| self.parse_operand(f.expr)).collect::<Result<_, _>>()?\n+                ))\n+            },\n             _ => self.parse_operand(expr_id).map(Rvalue::Use),\n         )\n     }"}, {"sha": "49e8c812c197a7e3a1d4296272ac50ea472a2d3b", "filename": "tests/mir-opt/building/custom/aggregate_exprs.adt.built.after.mir", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b2e48edded0955ed95c1824e8ec7ab48694c7f16/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Faggregate_exprs.adt.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/b2e48edded0955ed95c1824e8ec7ab48694c7f16/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Faggregate_exprs.adt.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Faggregate_exprs.adt.built.after.mir?ref=b2e48edded0955ed95c1824e8ec7ab48694c7f16", "patch": "@@ -0,0 +1,16 @@\n+// MIR for `adt` after built\n+\n+fn adt() -> Onion {\n+    let mut _0: Onion;                   // return place in scope 0 at $DIR/aggregate_exprs.rs:+0:13: +0:18\n+    let mut _1: i32;                     // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+    let mut _2: Foo;                     // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+    let mut _3: Bar;                     // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+\n+    bb0: {\n+        _1 = const 1_i32;                // scope 0 at $DIR/aggregate_exprs.rs:+6:13: +6:20\n+        _2 = Foo { a: const 1_i32, b: const 2_i32 }; // scope 0 at $DIR/aggregate_exprs.rs:+7:13: +10:14\n+        _3 = Bar::Foo(move _2, _1);      // scope 0 at $DIR/aggregate_exprs.rs:+11:13: +11:39\n+        _0 = Onion { neon: ((_3 as variant#0).1: i32) }; // scope 0 at $DIR/aggregate_exprs.rs:+12:13: +12:58\n+        return;                          // scope 0 at $DIR/aggregate_exprs.rs:+13:13: +13:21\n+    }\n+}"}, {"sha": "30d12897331ce87c378a08d0ff791e6b2cd0921d", "filename": "tests/mir-opt/building/custom/aggregate_exprs.array.built.after.mir", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b2e48edded0955ed95c1824e8ec7ab48694c7f16/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Faggregate_exprs.array.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/b2e48edded0955ed95c1824e8ec7ab48694c7f16/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Faggregate_exprs.array.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Faggregate_exprs.array.built.after.mir?ref=b2e48edded0955ed95c1824e8ec7ab48694c7f16", "patch": "@@ -0,0 +1,15 @@\n+// MIR for `array` after built\n+\n+fn array() -> [i32; 2] {\n+    let mut _0: [i32; 2];                // return place in scope 0 at $DIR/aggregate_exprs.rs:+0:15: +0:23\n+    let mut _1: [i32; 2];                // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+    let mut _2: i32;                     // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+\n+    bb0: {\n+        _1 = [const 42_i32, const 43_i32]; // scope 0 at $DIR/aggregate_exprs.rs:+5:13: +5:25\n+        _2 = const 1_i32;                // scope 0 at $DIR/aggregate_exprs.rs:+6:13: +6:20\n+        _1 = [_2, const 2_i32];          // scope 0 at $DIR/aggregate_exprs.rs:+7:13: +7:25\n+        _0 = move _1;                    // scope 0 at $DIR/aggregate_exprs.rs:+8:13: +8:26\n+        return;                          // scope 0 at $DIR/aggregate_exprs.rs:+9:13: +9:21\n+    }\n+}"}, {"sha": "554c9c03ba4a007fe643068408c9d5de4104e406", "filename": "tests/mir-opt/building/custom/aggregate_exprs.rs", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/b2e48edded0955ed95c1824e8ec7ab48694c7f16/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Faggregate_exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2e48edded0955ed95c1824e8ec7ab48694c7f16/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Faggregate_exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Faggregate_exprs.rs?ref=b2e48edded0955ed95c1824e8ec7ab48694c7f16", "patch": "@@ -0,0 +1,71 @@\n+#![feature(custom_mir, core_intrinsics)]\n+\n+extern crate core;\n+use core::intrinsics::mir::*;\n+\n+// EMIT_MIR aggregate_exprs.tuple.built.after.mir\n+#[custom_mir(dialect = \"built\")]\n+fn tuple() -> (i32, bool) {\n+    mir!(\n+        {\n+            RET = (1, true);\n+            Return()\n+        }\n+    )\n+}\n+\n+// EMIT_MIR aggregate_exprs.array.built.after.mir\n+#[custom_mir(dialect = \"built\")]\n+fn array() -> [i32; 2] {\n+    mir!(\n+        let x: [i32; 2];\n+        let one: i32;\n+        {\n+            x = [42, 43];\n+            one = 1;\n+            x = [one, 2];\n+            RET = Move(x);\n+            Return()\n+        }\n+    )\n+}\n+\n+struct Foo {\n+    a: i32,\n+    b: i32,\n+}\n+\n+enum Bar {\n+    Foo(Foo, i32),\n+}\n+\n+union Onion {\n+    neon: i32,\n+    noun: f32,\n+}\n+\n+// EMIT_MIR aggregate_exprs.adt.built.after.mir\n+#[custom_mir(dialect = \"built\")]\n+fn adt() -> Onion {\n+    mir!(\n+        let one: i32;\n+        let x: Foo;\n+        let y: Bar;\n+        {\n+            one = 1;\n+            x = Foo {\n+                a: 1,\n+                b: 2,\n+            };\n+            y = Bar::Foo(Move(x), one);\n+            RET = Onion { neon: Field(Variant(y, 0), 1) };\n+            Return()\n+        }\n+    )\n+}\n+\n+fn main() {\n+    assert_eq!(tuple(), (1, true));\n+    assert_eq!(array(), [1, 2]);\n+    assert_eq!(unsafe { adt().neon }, 1);\n+}"}, {"sha": "5fe45ccc90ca641663b165ba7b6d9efba34ee484", "filename": "tests/mir-opt/building/custom/aggregate_exprs.tuple.built.after.mir", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b2e48edded0955ed95c1824e8ec7ab48694c7f16/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Faggregate_exprs.tuple.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/b2e48edded0955ed95c1824e8ec7ab48694c7f16/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Faggregate_exprs.tuple.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Faggregate_exprs.tuple.built.after.mir?ref=b2e48edded0955ed95c1824e8ec7ab48694c7f16", "patch": "@@ -0,0 +1,10 @@\n+// MIR for `tuple` after built\n+\n+fn tuple() -> (i32, bool) {\n+    let mut _0: (i32, bool);             // return place in scope 0 at $DIR/aggregate_exprs.rs:+0:15: +0:26\n+\n+    bb0: {\n+        _0 = (const 1_i32, const true);  // scope 0 at $DIR/aggregate_exprs.rs:+3:13: +3:28\n+        return;                          // scope 0 at $DIR/aggregate_exprs.rs:+4:13: +4:21\n+    }\n+}"}]}