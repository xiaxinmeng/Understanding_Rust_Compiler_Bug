{"sha": "8743472386095d8d6f2e2757958f71879d9dfe84", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3NDM0NzIzODYwOTVkOGQ2ZjJlMjc1Nzk1OGY3MTg3OWQ5ZGZlODQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-11T23:35:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-11T23:35:28Z"}, "message": "Auto merge of #84373 - cjgillot:resolve-span, r=michaelwoerister,petrochenkov\n\nEncode spans relative to the enclosing item\n\nThe aim of this PR is to avoid recomputing queries when code is moved without modification.\n\nMCP at https://github.com/rust-lang/compiler-team/issues/443\n\nThis is achieved by :\n1. storing the HIR owner LocalDefId information inside the span;\n2. encoding and decoding spans relative to the enclosing item in the incremental on-disk cache;\n3. marking a dependency to the `source_span(LocalDefId)` query when we translate a span from the short (`Span`) representation to its explicit (`SpanData`) representation.\n\nSince all client code uses `Span`, step 3 ensures that all manipulations\nof span byte positions actually create the dependency edge between\nthe caller and the `source_span(LocalDefId)`.\nThis query return the actual absolute span of the parent item.\nAs a consequence, any source code motion that changes the absolute byte position of a node will either:\n- modify the distance to the parent's beginning, so change the relative span's hash;\n- dirty `source_span`, and trigger the incremental recomputation of all code that\n  depends on the span's absolute byte position.\n\nWith this scheme, I believe the dependency tracking to be accurate.\n\nFor the moment, the spans are marked during lowering.\nI'd rather do this during def-collection,\nbut the AST MutVisitor is not practical enough just yet.\nThe only difference is that we attach macro-expanded spans\nto their expansion point instead of the macro itself.", "tree": {"sha": "ec0e0843f2cf9df79b9bd59fbaaa32360dc7deea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec0e0843f2cf9df79b9bd59fbaaa32360dc7deea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8743472386095d8d6f2e2757958f71879d9dfe84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8743472386095d8d6f2e2757958f71879d9dfe84", "html_url": "https://github.com/rust-lang/rust/commit/8743472386095d8d6f2e2757958f71879d9dfe84", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8743472386095d8d6f2e2757958f71879d9dfe84/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e014277b07049f0638662f4040c2af7b119cc8a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/e014277b07049f0638662f4040c2af7b119cc8a4", "html_url": "https://github.com/rust-lang/rust/commit/e014277b07049f0638662f4040c2af7b119cc8a4"}, {"sha": "127ec9a8c94419669b22079c988e38638b58395f", "url": "https://api.github.com/repos/rust-lang/rust/commits/127ec9a8c94419669b22079c988e38638b58395f", "html_url": "https://github.com/rust-lang/rust/commit/127ec9a8c94419669b22079c988e38638b58395f"}], "stats": {"total": 11, "additions": 8, "deletions": 3}, "files": [{"sha": "927187dfd8a2336b20220dd9e794bc04171f0eff", "filename": "src/macros.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8743472386095d8d6f2e2757958f71879d9dfe84/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8743472386095d8d6f2e2757958f71879d9dfe84/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=8743472386095d8d6f2e2757958f71879d9dfe84", "patch": "@@ -1247,7 +1247,12 @@ impl MacroParser {\n                 let data = delimited_span.entire().data();\n                 (\n                     data.hi,\n-                    Span::new(data.lo + BytePos(1), data.hi - BytePos(1), data.ctxt),\n+                    Span::new(\n+                        data.lo + BytePos(1),\n+                        data.hi - BytePos(1),\n+                        data.ctxt,\n+                        data.parent,\n+                    ),\n                     delimited_span.entire(),\n                 )\n             }"}, {"sha": "29e1e070d41114079921683fea87f7cd62ec941f", "filename": "src/utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8743472386095d8d6f2e2757958f71879d9dfe84/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8743472386095d8d6f2e2757958f71879d9dfe84/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=8743472386095d8d6f2e2757958f71879d9dfe84", "patch": "@@ -356,11 +356,11 @@ macro_rules! source {\n }\n \n pub(crate) fn mk_sp(lo: BytePos, hi: BytePos) -> Span {\n-    Span::new(lo, hi, SyntaxContext::root())\n+    Span::new(lo, hi, SyntaxContext::root(), None)\n }\n \n pub(crate) fn mk_sp_lo_plus_one(lo: BytePos) -> Span {\n-    Span::new(lo, lo + BytePos(1), SyntaxContext::root())\n+    Span::new(lo, lo + BytePos(1), SyntaxContext::root(), None)\n }\n \n // Returns `true` if the given span does not intersect with file lines."}]}