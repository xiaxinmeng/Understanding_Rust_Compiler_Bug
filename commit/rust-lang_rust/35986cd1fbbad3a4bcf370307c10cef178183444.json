{"sha": "35986cd1fbbad3a4bcf370307c10cef178183444", "node_id": "C_kwDOAAsO6NoAKDM1OTg2Y2QxZmJiYWQzYTRiY2YzNzAzMDdjMTBjZWYxNzgxODM0NDQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-05-20T17:54:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-20T17:54:41Z"}, "message": "Rollup merge of #97201 - ydah:fix_spelling, r=GuillaumeGomez\n\nFix typo\n\nThis PR is fixes typo \"avaiable\" to \"available\".", "tree": {"sha": "cbe1a3eb201f957efa0e379c64a1fe0f77855de5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cbe1a3eb201f957efa0e379c64a1fe0f77855de5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35986cd1fbbad3a4bcf370307c10cef178183444", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJih9XiCRBK7hj4Ov3rIwAAFoIIAFSmmo+EW7h0PiIxrbc3tDmk\nAKJSFCDsdCEay7lu/+NOq7Qv7BUu5u/0gQEZC4LYdgBTak26Nzd8rLnhMMu8miXy\nkzCaOg9yeYyIqwRo96C7k9cGeiuhpU5wDWwvfVLq3Y4AEgP2OWekVYTcFqLtbst2\nL8aE++oIzA4TeRSjnnGjvSAzZT+a09zUyV0U/mOUHwsnOIsPcdto/H9P8RMBoUly\ndY1sYwape4qAtXjljf8jMwZWARGAg6POIxWVSqc1BMxy2FE1WaQQkqETnSs//FFq\nt5rq7lQ9zG38+A5/kGukVfWz8YDh9GtHwwenX5qyRgDILY7u51NaIKSGJy9Hbxw=\n=7V3a\n-----END PGP SIGNATURE-----\n", "payload": "tree cbe1a3eb201f957efa0e379c64a1fe0f77855de5\nparent daf4f34fe34a3d7f4d6427b9b6926b39f83e2e50\nparent 36ad596ef3006f67f2533cd4ac540c20c5e1f1d3\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1653069281 +0200\ncommitter GitHub <noreply@github.com> 1653069281 +0200\n\nRollup merge of #97201 - ydah:fix_spelling, r=GuillaumeGomez\n\nFix typo\n\nThis PR is fixes typo \"avaiable\" to \"available\".\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35986cd1fbbad3a4bcf370307c10cef178183444", "html_url": "https://github.com/rust-lang/rust/commit/35986cd1fbbad3a4bcf370307c10cef178183444", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35986cd1fbbad3a4bcf370307c10cef178183444/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "daf4f34fe34a3d7f4d6427b9b6926b39f83e2e50", "url": "https://api.github.com/repos/rust-lang/rust/commits/daf4f34fe34a3d7f4d6427b9b6926b39f83e2e50", "html_url": "https://github.com/rust-lang/rust/commit/daf4f34fe34a3d7f4d6427b9b6926b39f83e2e50"}, {"sha": "36ad596ef3006f67f2533cd4ac540c20c5e1f1d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/36ad596ef3006f67f2533cd4ac540c20c5e1f1d3", "html_url": "https://github.com/rust-lang/rust/commit/36ad596ef3006f67f2533cd4ac540c20c5e1f1d3"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "721c234c6e60ad01e38df9087f970d20bac3b021", "filename": "src/doc/rustc/src/platform-support/pc-windows-gnullvm.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35986cd1fbbad3a4bcf370307c10cef178183444/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fpc-windows-gnullvm.md", "raw_url": "https://github.com/rust-lang/rust/raw/35986cd1fbbad3a4bcf370307c10cef178183444/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fpc-windows-gnullvm.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fpc-windows-gnullvm.md?ref=35986cd1fbbad3a4bcf370307c10cef178183444", "patch": "@@ -4,7 +4,7 @@\n \n Windows targets similar to `*-pc-windows-gnu` but using UCRT as the runtime and various LLVM tools/libraries instead of GCC/Binutils.\n \n-Target triples avaiable so far:\n+Target triples available so far:\n - `aarch64-pc-windows-gnullvm`\n - `x86_64-pc-windows-gnullvm`\n \n@@ -26,7 +26,7 @@ Like with any other Windows target created binaries are in PE format.\n ## Building the target\n \n For cross-compilation I recommend using [llvm-mingw](https://github.com/mstorsjo/llvm-mingw) toolchain, one change that seems necessary beside configuring corss compilers is disabling experimental `m86k` target. Otherwise LLVM build fails with `multiple definition ...` errors.\n-Native bootstrapping builds require rather fragile hacks until host artifacts are avaiable so I won't describe them here.\n+Native bootstrapping builds require rather fragile hacks until host artifacts are available so I won't describe them here.\n \n ## Building Rust programs\n "}, {"sha": "d26f4ee894fad47e06775b84580d806c16109734", "filename": "src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35986cd1fbbad3a4bcf370307c10cef178183444/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fcfg_if%2Fdetect%2Farch%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35986cd1fbbad3a4bcf370307c10cef178183444/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fcfg_if%2Fdetect%2Farch%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fcfg_if%2Fdetect%2Farch%2Fx86.rs?ref=35986cd1fbbad3a4bcf370307c10cef178183444", "patch": "@@ -3,7 +3,7 @@\n //! The features are detected using the `detect_features` function below.\n //! This function uses the CPUID instruction to read the feature flags from the\n //! CPU and encodes them in a `usize` where each bit position represents\n-//! whether a feature is available (bit is set) or unavaiable (bit is cleared).\n+//! whether a feature is available (bit is set) or unavailable (bit is cleared).\n //!\n //! The enum `Feature` is used to map bit positions to feature names, and the\n //! the `__crate::detect::check_for!` macro is used to map string literals (e.g.,"}, {"sha": "02d5eed1c2923ce759f98ebc7e9869f99f4dca0a", "filename": "src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35986cd1fbbad3a4bcf370307c10cef178183444/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fcfg_if%2Fdetect%2Farch%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35986cd1fbbad3a4bcf370307c10cef178183444/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fcfg_if%2Fdetect%2Farch%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fcfg_if%2Fdetect%2Farch%2Fx86.rs?ref=35986cd1fbbad3a4bcf370307c10cef178183444", "patch": "@@ -3,7 +3,7 @@\n //! The features are detected using the `detect_features` function below.\n //! This function uses the CPUID instruction to read the feature flags from the\n //! CPU and encodes them in a `usize` where each bit position represents\n-//! whether a feature is available (bit is set) or unavaiable (bit is cleared).\n+//! whether a feature is available (bit is set) or unavailable (bit is cleared).\n //!\n //! The enum `Feature` is used to map bit positions to feature names, and the\n //! the `__crate::detect::check_for!` macro is used to map string literals (e.g.,"}]}