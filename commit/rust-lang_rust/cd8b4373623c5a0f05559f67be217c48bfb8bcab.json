{"sha": "cd8b4373623c5a0f05559f67be217c48bfb8bcab", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkOGI0MzczNjIzYzVhMGYwNTU1OWY2N2JlMjE3YzQ4YmZiOGJjYWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-11T23:36:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-11T23:36:13Z"}, "message": "Auto merge of #59227 - Zoxc:fix-get, r=eddyb\n\nFix lifetime on LocalInternedString::get function\n\ncc @eddyb @nnethercote", "tree": {"sha": "397b0ddc692ed7f02e71b76193e5d24781c30cb0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/397b0ddc692ed7f02e71b76193e5d24781c30cb0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd8b4373623c5a0f05559f67be217c48bfb8bcab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd8b4373623c5a0f05559f67be217c48bfb8bcab", "html_url": "https://github.com/rust-lang/rust/commit/cd8b4373623c5a0f05559f67be217c48bfb8bcab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd8b4373623c5a0f05559f67be217c48bfb8bcab/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3de0106789468b211bcc3a25c09c0cf07119186d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3de0106789468b211bcc3a25c09c0cf07119186d", "html_url": "https://github.com/rust-lang/rust/commit/3de0106789468b211bcc3a25c09c0cf07119186d"}, {"sha": "5ea959dc8bfdf0dd62fd8ac611ba4e9e8d75c69d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ea959dc8bfdf0dd62fd8ac611ba4e9e8d75c69d", "html_url": "https://github.com/rust-lang/rust/commit/5ea959dc8bfdf0dd62fd8ac611ba4e9e8d75c69d"}], "stats": {"total": 40, "additions": 23, "deletions": 17}, "files": [{"sha": "d1020a2d151d4922a09d21ddc2affa027b70ca42", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd8b4373623c5a0f05559f67be217c48bfb8bcab/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8b4373623c5a0f05559f67be217c48bfb8bcab/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=cd8b4373623c5a0f05559f67be217c48bfb8bcab", "patch": "@@ -622,7 +622,7 @@ impl<'a> State<'a> {\n             }\n             hir::ItemKind::GlobalAsm(ref ga) => {\n                 self.head(visibility_qualified(&item.vis, \"global asm\"))?;\n-                self.s.word(ga.asm.as_str().get())?;\n+                self.s.word(ga.asm.as_str().to_string())?;\n                 self.end()?\n             }\n             hir::ItemKind::Ty(ref ty, ref generics) => {\n@@ -1591,7 +1591,7 @@ impl<'a> State<'a> {\n         if ident.is_raw_guess() {\n             self.s.word(format!(\"r#{}\", ident.name))?;\n         } else {\n-            self.s.word(ident.as_str().get())?;\n+            self.s.word(ident.as_str().to_string())?;\n         }\n         self.ann.post(self, AnnNode::Name(&ident.name))\n     }\n@@ -1998,7 +1998,7 @@ impl<'a> State<'a> {\n         self.commasep(Inconsistent, &decl.inputs, |s, ty| {\n             s.ibox(indent_unit)?;\n             if let Some(arg_name) = arg_names.get(i) {\n-                s.s.word(arg_name.as_str().get())?;\n+                s.s.word(arg_name.as_str().to_string())?;\n                 s.s.word(\":\")?;\n                 s.s.space()?;\n             } else if let Some(body_id) = body_id {"}, {"sha": "b51b7fd1ef5894d83991a47ec0a7377c923e39b6", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cd8b4373623c5a0f05559f67be217c48bfb8bcab/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8b4373623c5a0f05559f67be217c48bfb8bcab/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=cd8b4373623c5a0f05559f67be217c48bfb8bcab", "patch": "@@ -2165,9 +2165,11 @@ impl<'a> Parser<'a> {\n                     suffix,\n                 ) = self.token {\n                     let suffix = suffix.and_then(|s| {\n-                        let s = s.as_str().get();\n-                        if [\"f32\", \"f64\"].contains(&s) {\n-                            Some(s)\n+                        let s = s.as_str();\n+                        if s == \"f32\" {\n+                            Some(\"f32\")\n+                        } else if s == \"f64\" {\n+                            Some(\"f64\")\n                         } else {\n                             None\n                         }"}, {"sha": "ca05ff71c9433a8f737b4544ef04ad7967f4ec68", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cd8b4373623c5a0f05559f67be217c48bfb8bcab/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8b4373623c5a0f05559f67be217c48bfb8bcab/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=cd8b4373623c5a0f05559f67be217c48bfb8bcab", "patch": "@@ -645,7 +645,7 @@ pub trait PrintState<'a> {\n             ast::LitKind::Float(ref f, t) => {\n                 self.writer().word(format!(\"{}{}\", &f, t.ty_to_string()))\n             }\n-            ast::LitKind::FloatUnsuffixed(ref f) => self.writer().word(f.as_str().get()),\n+            ast::LitKind::FloatUnsuffixed(ref f) => self.writer().word(f.as_str().to_string()),\n             ast::LitKind::Bool(val) => {\n                 if val { self.writer().word(\"true\") } else { self.writer().word(\"false\") }\n             }\n@@ -731,7 +731,7 @@ pub trait PrintState<'a> {\n                 if segment.ident.name == keywords::DollarCrate.name() {\n                     self.print_dollar_crate(segment.ident)?;\n                 } else {\n-                    self.writer().word(segment.ident.as_str().get())?;\n+                    self.writer().word(segment.ident.as_str().to_string())?;\n                 }\n             }\n         }\n@@ -749,7 +749,7 @@ pub trait PrintState<'a> {\n         }\n         self.maybe_print_comment(attr.span.lo())?;\n         if attr.is_sugared_doc {\n-            self.writer().word(attr.value_str().unwrap().as_str().get())?;\n+            self.writer().word(attr.value_str().unwrap().as_str().to_string())?;\n             self.writer().hardbreak()\n         } else {\n             match attr.style {\n@@ -858,7 +858,7 @@ pub trait PrintState<'a> {\n         if !ast::Ident::with_empty_ctxt(name).is_path_segment_keyword() {\n             self.writer().word(\"::\")?;\n         }\n-        self.writer().word(name.as_str().get())\n+        self.writer().word(name.as_str().to_string())\n     }\n }\n \n@@ -1300,7 +1300,7 @@ impl<'a> State<'a> {\n             }\n             ast::ItemKind::GlobalAsm(ref ga) => {\n                 self.head(visibility_qualified(&item.vis, \"global_asm!\"))?;\n-                self.s.word(ga.asm.as_str().get())?;\n+                self.s.word(ga.asm.as_str().to_string())?;\n                 self.end()?;\n             }\n             ast::ItemKind::Ty(ref ty, ref generics) => {\n@@ -2437,7 +2437,7 @@ impl<'a> State<'a> {\n         if ident.is_raw_guess() {\n             self.s.word(format!(\"r#{}\", ident))?;\n         } else {\n-            self.s.word(ident.as_str().get())?;\n+            self.s.word(ident.as_str().to_string())?;\n         }\n         self.ann.post(self, AnnNode::Ident(&ident))\n     }\n@@ -2447,7 +2447,7 @@ impl<'a> State<'a> {\n     }\n \n     pub fn print_name(&mut self, name: ast::Name) -> io::Result<()> {\n-        self.s.word(name.as_str().get())?;\n+        self.s.word(name.as_str().to_string())?;\n         self.ann.post(self, AnnNode::Name(&name))\n     }\n "}, {"sha": "09dce77579001f5cbb2be5c7cec00dd481e4cc06", "filename": "src/libsyntax_ext/proc_macro_server.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd8b4373623c5a0f05559f67be217c48bfb8bcab/src%2Flibsyntax_ext%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8b4373623c5a0f05559f67be217c48bfb8bcab/src%2Flibsyntax_ext%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_server.rs?ref=cd8b4373623c5a0f05559f67be217c48bfb8bcab", "patch": "@@ -336,11 +336,11 @@ impl Ident {\n         }\n     }\n     fn new(sym: Symbol, is_raw: bool, span: Span) -> Ident {\n-        let string = sym.as_str().get();\n-        if !Self::is_valid(string) {\n+        let string = sym.as_str();\n+        if !Self::is_valid(&string) {\n             panic!(\"`{:?}` is not a valid identifier\", string)\n         }\n-        if is_raw && !ast::Ident::from_str(string).can_be_raw() {\n+        if is_raw && !ast::Ident::from_interned_str(sym.as_interned_str()).can_be_raw() {\n             panic!(\"`{}` cannot be a raw identifier\", string);\n         }\n         Ident { sym, is_raw, span }"}, {"sha": "393f52e7de517b5d42cb64ae66c1193fc6b242a8", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd8b4373623c5a0f05559f67be217c48bfb8bcab/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8b4373623c5a0f05559f67be217c48bfb8bcab/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=cd8b4373623c5a0f05559f67be217c48bfb8bcab", "patch": "@@ -524,7 +524,11 @@ impl LocalInternedString {\n         }\n     }\n \n-    pub fn get(&self) -> &'static str {\n+    pub fn get(&self) -> &str {\n+        // This returns a valid string since we ensure that `self` outlives the interner\n+        // by creating the interner on a thread which outlives threads which can access it.\n+        // This type cannot move to a thread which outlives the interner since it does\n+        // not implement Send.\n         self.string\n     }\n }"}]}