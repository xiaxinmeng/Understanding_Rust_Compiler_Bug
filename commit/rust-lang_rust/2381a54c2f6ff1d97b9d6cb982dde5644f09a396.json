{"sha": "2381a54c2f6ff1d97b9d6cb982dde5644f09a396", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzODFhNTRjMmY2ZmYxZDk3YjlkNmNiOTgyZGRlNTY0NGYwOWEzOTY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-03-29T17:54:15Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-03-29T17:54:15Z"}, "message": "internal: cleanup hprof", "tree": {"sha": "0fcd4d70d6928cf3a53b83e13ee47f5fbd2c447a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0fcd4d70d6928cf3a53b83e13ee47f5fbd2c447a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2381a54c2f6ff1d97b9d6cb982dde5644f09a396", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2381a54c2f6ff1d97b9d6cb982dde5644f09a396", "html_url": "https://github.com/rust-lang/rust/commit/2381a54c2f6ff1d97b9d6cb982dde5644f09a396", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2381a54c2f6ff1d97b9d6cb982dde5644f09a396/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5dd6b931388dac00d272a41a139c4f0cc3c449dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/5dd6b931388dac00d272a41a139c4f0cc3c449dc", "html_url": "https://github.com/rust-lang/rust/commit/5dd6b931388dac00d272a41a139c4f0cc3c449dc"}], "stats": {"total": 20, "additions": 13, "deletions": 7}, "files": [{"sha": "014e906e62eee9039032a85993b95ff8f638618e", "filename": "crates/profile/src/hprof.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2381a54c2f6ff1d97b9d6cb982dde5644f09a396/crates%2Fprofile%2Fsrc%2Fhprof.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2381a54c2f6ff1d97b9d6cb982dde5644f09a396/crates%2Fprofile%2Fsrc%2Fhprof.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fprofile%2Fsrc%2Fhprof.rs?ref=2381a54c2f6ff1d97b9d6cb982dde5644f09a396", "patch": "@@ -1,5 +1,4 @@\n //! Simple hierarchical profiler\n-use once_cell::sync::Lazy;\n use std::{\n     cell::RefCell,\n     collections::{BTreeMap, HashSet},\n@@ -12,6 +11,8 @@ use std::{\n     time::{Duration, Instant},\n };\n \n+use once_cell::sync::Lazy;\n+\n use crate::tree::{Idx, Tree};\n \n /// Filtering syntax\n@@ -56,12 +57,12 @@ type Label = &'static str;\n ///  0ms - profile\n ///      0ms - profile2\n /// ```\n+#[inline]\n pub fn span(label: Label) -> ProfileSpan {\n-    assert!(!label.is_empty());\n+    debug_assert!(!label.is_empty());\n \n-    if PROFILING_ENABLED.load(Ordering::Relaxed)\n-        && PROFILE_STACK.with(|stack| stack.borrow_mut().push(label))\n-    {\n+    let enabled = PROFILING_ENABLED.load(Ordering::Relaxed);\n+    if enabled && with_profile_stack(|stack| stack.push(label)) {\n         ProfileSpan(Some(ProfilerImpl { label, detail: None }))\n     } else {\n         ProfileSpan(None)\n@@ -85,14 +86,19 @@ impl ProfileSpan {\n }\n \n impl Drop for ProfilerImpl {\n+    #[inline]\n     fn drop(&mut self) {\n-        PROFILE_STACK.with(|it| it.borrow_mut().pop(self.label, self.detail.take()));\n+        with_profile_stack(|it| it.pop(self.label, self.detail.take()));\n     }\n }\n \n static PROFILING_ENABLED: AtomicBool = AtomicBool::new(false);\n static FILTER: Lazy<RwLock<Filter>> = Lazy::new(Default::default);\n-thread_local!(static PROFILE_STACK: RefCell<ProfileStack> = RefCell::new(ProfileStack::new()));\n+\n+fn with_profile_stack<T>(f: impl FnOnce(&mut ProfileStack) -> T) -> T {\n+    thread_local!(static STACK: RefCell<ProfileStack> = RefCell::new(ProfileStack::new()));\n+    STACK.with(|it| f(&mut *it.borrow_mut()))\n+}\n \n #[derive(Default, Clone, Debug)]\n struct Filter {"}]}