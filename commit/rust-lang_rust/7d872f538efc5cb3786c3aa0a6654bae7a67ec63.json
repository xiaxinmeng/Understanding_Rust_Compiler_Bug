{"sha": "7d872f538efc5cb3786c3aa0a6654bae7a67ec63", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkODcyZjUzOGVmYzVjYjM3ODZjM2FhMGE2NjU0YmFlN2E2N2VjNjM=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2021-03-22T18:33:43Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2021-03-22T18:33:43Z"}, "message": "Update the minimum external LLVM to 10", "tree": {"sha": "b7e9f5a8d13b2bf78dfb8d219615de1c53798240", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7e9f5a8d13b2bf78dfb8d219615de1c53798240"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d872f538efc5cb3786c3aa0a6654bae7a67ec63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d872f538efc5cb3786c3aa0a6654bae7a67ec63", "html_url": "https://github.com/rust-lang/rust/commit/7d872f538efc5cb3786c3aa0a6654bae7a67ec63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d872f538efc5cb3786c3aa0a6654bae7a67ec63/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d04c3aa8656f6588c87bafafb34d51239dab98bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/d04c3aa8656f6588c87bafafb34d51239dab98bb", "html_url": "https://github.com/rust-lang/rust/commit/d04c3aa8656f6588c87bafafb34d51239dab98bb"}], "stats": {"total": 131, "additions": 15, "deletions": 116}, "files": [{"sha": "ffaa2b03df9e7b24dc19912f8e4017255deaed73", "filename": ".github/workflows/ci.yml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d872f538efc5cb3786c3aa0a6654bae7a67ec63/.github%2Fworkflows%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/7d872f538efc5cb3786c3aa0a6654bae7a67ec63/.github%2Fworkflows%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fci.yml?ref=7d872f538efc5cb3786c3aa0a6654bae7a67ec63", "patch": "@@ -43,7 +43,7 @@ jobs:\n           - name: mingw-check\n             os: ubuntu-latest-xl\n             env: {}\n-          - name: x86_64-gnu-llvm-9\n+          - name: x86_64-gnu-llvm-10\n             os: ubuntu-latest-xl\n             env: {}\n           - name: x86_64-gnu-tools\n@@ -265,7 +265,7 @@ jobs:\n           - name: x86_64-gnu-distcheck\n             os: ubuntu-latest-xl\n             env: {}\n-          - name: x86_64-gnu-llvm-9\n+          - name: x86_64-gnu-llvm-10\n             env:\n               RUST_BACKTRACE: 1\n             os: ubuntu-latest-xl"}, {"sha": "c580456805ad1b677d70e3dbda9efbf77b664af3", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7d872f538efc5cb3786c3aa0a6654bae7a67ec63/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d872f538efc5cb3786c3aa0a6654bae7a67ec63/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=7d872f538efc5cb3786c3aa0a6654bae7a67ec63", "patch": "@@ -101,10 +101,6 @@ fn to_llvm_tls_model(tls_model: TlsModel) -> llvm::ThreadLocalMode {\n     }\n }\n \n-fn strip_x86_address_spaces(data_layout: String) -> String {\n-    data_layout.replace(\"-p270:32:32-p271:32:32-p272:64:64-\", \"-\")\n-}\n-\n fn strip_powerpc64_vectors(data_layout: String) -> String {\n     data_layout.replace(\"-v256:256:256-v512:512:512\", \"\")\n }\n@@ -119,11 +115,6 @@ pub unsafe fn create_module(\n     let llmod = llvm::LLVMModuleCreateWithNameInContext(mod_name.as_ptr(), llcx);\n \n     let mut target_data_layout = sess.target.data_layout.clone();\n-    if llvm_util::get_version() < (10, 0, 0)\n-        && (sess.target.arch == \"x86\" || sess.target.arch == \"x86_64\")\n-    {\n-        target_data_layout = strip_x86_address_spaces(target_data_layout);\n-    }\n     if llvm_util::get_version() < (12, 0, 0) && sess.target.arch == \"powerpc64\" {\n         target_data_layout = strip_powerpc64_vectors(target_data_layout);\n     }"}, {"sha": "97541e615da83a0a3129248e1c4d69186ca05e11", "filename": "compiler/rustc_llvm/llvm-wrapper/ArchiveWrapper.cpp", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d872f538efc5cb3786c3aa0a6654bae7a67ec63/compiler%2Frustc_llvm%2Fllvm-wrapper%2FArchiveWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/7d872f538efc5cb3786c3aa0a6654bae7a67ec63/compiler%2Frustc_llvm%2Fllvm-wrapper%2FArchiveWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FArchiveWrapper.cpp?ref=7d872f538efc5cb3786c3aa0a6654bae7a67ec63", "patch": "@@ -91,11 +91,7 @@ extern \"C\" void LLVMRustDestroyArchive(LLVMRustArchiveRef RustArchive) {\n extern \"C\" LLVMRustArchiveIteratorRef\n LLVMRustArchiveIteratorNew(LLVMRustArchiveRef RustArchive) {\n   Archive *Archive = RustArchive->getBinary();\n-#if LLVM_VERSION_GE(10, 0)\n   std::unique_ptr<Error> Err = std::make_unique<Error>(Error::success());\n-#else\n-  std::unique_ptr<Error> Err = llvm::make_unique<Error>(Error::success());\n-#endif\n   auto Cur = Archive->child_begin(*Err);\n   if (*Err) {\n     LLVMRustSetLastError(toString(std::move(*Err)).c_str());"}, {"sha": "195e0cfe76b91c0396b0ead87359c41a8da26599", "filename": "compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp", "status": "modified", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/7d872f538efc5cb3786c3aa0a6654bae7a67ec63/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/7d872f538efc5cb3786c3aa0a6654bae7a67ec63/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp?ref=7d872f538efc5cb3786c3aa0a6654bae7a67ec63", "patch": "@@ -65,13 +65,9 @@ extern \"C\" void LLVMInitializePasses() {\n }\n \n extern \"C\" void LLVMTimeTraceProfilerInitialize() {\n-#if LLVM_VERSION_GE(10, 0)\n   timeTraceProfilerInitialize(\n       /* TimeTraceGranularity */ 0,\n       /* ProcName */ \"rustc\");\n-#else\n-  timeTraceProfilerInitialize();\n-#endif\n }\n \n extern \"C\" void LLVMTimeTraceProfilerFinish(const char* FileName) {\n@@ -596,7 +592,6 @@ enum class LLVMRustFileType {\n   ObjectFile,\n };\n \n-#if LLVM_VERSION_GE(10, 0)\n static CodeGenFileType fromRust(LLVMRustFileType Type) {\n   switch (Type) {\n   case LLVMRustFileType::AssemblyFile:\n@@ -607,18 +602,6 @@ static CodeGenFileType fromRust(LLVMRustFileType Type) {\n     report_fatal_error(\"Bad FileType.\");\n   }\n }\n-#else\n-static TargetMachine::CodeGenFileType fromRust(LLVMRustFileType Type) {\n-  switch (Type) {\n-  case LLVMRustFileType::AssemblyFile:\n-    return TargetMachine::CGFT_AssemblyFile;\n-  case LLVMRustFileType::ObjectFile:\n-    return TargetMachine::CGFT_ObjectFile;\n-  default:\n-    report_fatal_error(\"Bad FileType.\");\n-  }\n-}\n-#endif\n \n extern \"C\" LLVMRustResult\n LLVMRustWriteOutputFile(LLVMTargetMachineRef Target, LLVMPassManagerRef PMR,\n@@ -868,13 +851,11 @@ LLVMRustOptimizeWithNewPassManager(\n         }\n       );\n #else\n-#if LLVM_VERSION_GE(10, 0)\n       PipelineStartEPCallbacks.push_back(\n         [Options](ModulePassManager &MPM, PassBuilder::OptimizationLevel Level) {\n           MPM.addPass(MemorySanitizerPass(Options));\n         }\n       );\n-#endif\n       OptimizerLastEPCallbacks.push_back(\n         [Options](FunctionPassManager &FPM, PassBuilder::OptimizationLevel Level) {\n           FPM.addPass(MemorySanitizerPass(Options));\n@@ -892,13 +873,11 @@ LLVMRustOptimizeWithNewPassManager(\n         }\n       );\n #else\n-#if LLVM_VERSION_GE(10, 0)\n       PipelineStartEPCallbacks.push_back(\n         [](ModulePassManager &MPM, PassBuilder::OptimizationLevel Level) {\n           MPM.addPass(ThreadSanitizerPass());\n         }\n       );\n-#endif\n       OptimizerLastEPCallbacks.push_back(\n         [](FunctionPassManager &FPM, PassBuilder::OptimizationLevel Level) {\n           FPM.addPass(ThreadSanitizerPass());\n@@ -989,13 +968,11 @@ LLVMRustOptimizeWithNewPassManager(\n \n       MPM.addPass(AlwaysInlinerPass(EmitLifetimeMarkers));\n \n-# if LLVM_VERSION_GE(10, 0)\n       if (PGOOpt) {\n         PB.addPGOInstrPassesForO0(\n             MPM, DebugPassManager, PGOOpt->Action == PGOOptions::IRInstr,\n             /*IsCS=*/false, PGOOpt->ProfileFile, PGOOpt->ProfileRemappingFile);\n       }\n-# endif\n #endif\n     } else {\n #if LLVM_VERSION_GE(12, 0)\n@@ -1366,11 +1343,7 @@ LLVMRustCreateThinLTOData(LLVMRustThinLTOModule *modules,\n                           int num_modules,\n                           const char **preserved_symbols,\n                           int num_symbols) {\n-#if LLVM_VERSION_GE(10, 0)\n   auto Ret = std::make_unique<LLVMRustThinLTOData>();\n-#else\n-  auto Ret = llvm::make_unique<LLVMRustThinLTOData>();\n-#endif\n \n   // Load each module's summary and merge it into one combined index\n   for (int i = 0; i < num_modules; i++) {\n@@ -1455,23 +1428,13 @@ LLVMRustCreateThinLTOData(LLVMRustThinLTOModule *modules,\n         ExportedGUIDs.insert(GUID);\n     }\n   }\n-#if LLVM_VERSION_GE(10, 0)\n   auto isExported = [&](StringRef ModuleIdentifier, ValueInfo VI) {\n     const auto &ExportList = Ret->ExportLists.find(ModuleIdentifier);\n     return (ExportList != Ret->ExportLists.end() &&\n       ExportList->second.count(VI)) ||\n       ExportedGUIDs.count(VI.getGUID());\n   };\n   thinLTOInternalizeAndPromoteInIndex(Ret->Index, isExported, isPrevailing);\n-#else\n-  auto isExported = [&](StringRef ModuleIdentifier, GlobalValue::GUID GUID) {\n-    const auto &ExportList = Ret->ExportLists.find(ModuleIdentifier);\n-    return (ExportList != Ret->ExportLists.end() &&\n-      ExportList->second.count(GUID)) ||\n-      ExportedGUIDs.count(GUID);\n-  };\n-  thinLTOInternalizeAndPromoteInIndex(Ret->Index, isExported);\n-#endif\n \n   return Ret.release();\n }\n@@ -1628,11 +1591,7 @@ struct LLVMRustThinLTOBuffer {\n \n extern \"C\" LLVMRustThinLTOBuffer*\n LLVMRustThinLTOBufferCreate(LLVMModuleRef M) {\n-#if LLVM_VERSION_GE(10, 0)\n   auto Ret = std::make_unique<LLVMRustThinLTOBuffer>();\n-#else\n-  auto Ret = llvm::make_unique<LLVMRustThinLTOBuffer>();\n-#endif\n   {\n     raw_string_ostream OS(Ret->data);\n     {"}, {"sha": "52c0f07367c89a3cf2800336149d95632a4c5a7f", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/7d872f538efc5cb3786c3aa0a6654bae7a67ec63/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/7d872f538efc5cb3786c3aa0a6654bae7a67ec63/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=7d872f538efc5cb3786c3aa0a6654bae7a67ec63", "patch": "@@ -532,11 +532,6 @@ static DINode::DIFlags fromRust(LLVMRustDIFlags Flags) {\n   if (isSet(Flags & LLVMRustDIFlags::FlagAppleBlock)) {\n     Result |= DINode::DIFlags::FlagAppleBlock;\n   }\n-#if LLVM_VERSION_LT(10, 0)\n-  if (isSet(Flags & LLVMRustDIFlags::FlagBlockByrefStruct)) {\n-    Result |= DINode::DIFlags::FlagBlockByrefStruct;\n-  }\n-#endif\n   if (isSet(Flags & LLVMRustDIFlags::FlagVirtual)) {\n     Result |= DINode::DIFlags::FlagVirtual;\n   }\n@@ -901,9 +896,7 @@ extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateStaticVariable(\n       unwrapDI<DIDescriptor>(Context), StringRef(Name, NameLen),\n       StringRef(LinkageName, LinkageNameLen),\n       unwrapDI<DIFile>(File), LineNo, unwrapDI<DIType>(Ty), IsLocalToUnit,\n-#if LLVM_VERSION_GE(10, 0)\n       /* isDefined */ true,\n-#endif\n       InitExpr, unwrapDIPtr<MDNode>(Decl),\n       /* templateParams */ nullptr,\n       AlignInBits);\n@@ -1090,19 +1083,11 @@ inline section_iterator *unwrap(LLVMSectionIteratorRef SI) {\n \n extern \"C\" size_t LLVMRustGetSectionName(LLVMSectionIteratorRef SI,\n                                          const char **Ptr) {\n-#if LLVM_VERSION_GE(10, 0)\n   auto NameOrErr = (*unwrap(SI))->getName();\n   if (!NameOrErr)\n     report_fatal_error(NameOrErr.takeError());\n   *Ptr = NameOrErr->data();\n   return NameOrErr->size();\n-#else\n-  StringRef Ret;\n-  if (std::error_code EC = (*unwrap(SI))->getName(Ret))\n-    report_fatal_error(EC.message());\n-  *Ptr = Ret.data();\n-  return Ret.size();\n-#endif\n }\n \n // LLVMArrayType function does not support 64-bit ElementCount\n@@ -1441,47 +1426,28 @@ extern \"C\" LLVMValueRef LLVMRustBuildMemCpy(LLVMBuilderRef B,\n                                             LLVMValueRef Dst, unsigned DstAlign,\n                                             LLVMValueRef Src, unsigned SrcAlign,\n                                             LLVMValueRef Size, bool IsVolatile) {\n-#if LLVM_VERSION_GE(10, 0)\n   return wrap(unwrap(B)->CreateMemCpy(\n       unwrap(Dst), MaybeAlign(DstAlign),\n       unwrap(Src), MaybeAlign(SrcAlign),\n       unwrap(Size), IsVolatile));\n-#else\n-  return wrap(unwrap(B)->CreateMemCpy(\n-      unwrap(Dst), DstAlign,\n-      unwrap(Src), SrcAlign,\n-      unwrap(Size), IsVolatile));\n-#endif\n }\n \n extern \"C\" LLVMValueRef LLVMRustBuildMemMove(LLVMBuilderRef B,\n                                              LLVMValueRef Dst, unsigned DstAlign,\n                                              LLVMValueRef Src, unsigned SrcAlign,\n                                              LLVMValueRef Size, bool IsVolatile) {\n-#if LLVM_VERSION_GE(10, 0)\n   return wrap(unwrap(B)->CreateMemMove(\n       unwrap(Dst), MaybeAlign(DstAlign),\n       unwrap(Src), MaybeAlign(SrcAlign),\n       unwrap(Size), IsVolatile));\n-#else\n-  return wrap(unwrap(B)->CreateMemMove(\n-      unwrap(Dst), DstAlign,\n-      unwrap(Src), SrcAlign,\n-      unwrap(Size), IsVolatile));\n-#endif\n }\n \n extern \"C\" LLVMValueRef LLVMRustBuildMemSet(LLVMBuilderRef B,\n                                             LLVMValueRef Dst, unsigned DstAlign,\n                                             LLVMValueRef Val,\n                                             LLVMValueRef Size, bool IsVolatile) {\n-#if LLVM_VERSION_GE(10, 0)\n   return wrap(unwrap(B)->CreateMemSet(\n       unwrap(Dst), unwrap(Val), unwrap(Size), MaybeAlign(DstAlign), IsVolatile));\n-#else\n-  return wrap(unwrap(B)->CreateMemSet(\n-      unwrap(Dst), unwrap(Val), unwrap(Size), DstAlign, IsVolatile));\n-#endif\n }\n \n extern \"C\" LLVMValueRef\n@@ -1667,11 +1633,7 @@ struct LLVMRustModuleBuffer {\n \n extern \"C\" LLVMRustModuleBuffer*\n LLVMRustModuleBufferCreate(LLVMModuleRef M) {\n-#if LLVM_VERSION_GE(10, 0)\n   auto Ret = std::make_unique<LLVMRustModuleBuffer>();\n-#else\n-  auto Ret = llvm::make_unique<LLVMRustModuleBuffer>();\n-#endif\n   {\n     raw_string_ostream OS(Ret->data);\n     {"}, {"sha": "a88bcdbaed0a2608de66c1d8aa95cd1febc67384", "filename": "library/core/src/num/dec2flt/algorithm.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d872f538efc5cb3786c3aa0a6654bae7a67ec63/library%2Fcore%2Fsrc%2Fnum%2Fdec2flt%2Falgorithm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d872f538efc5cb3786c3aa0a6654bae7a67ec63/library%2Fcore%2Fsrc%2Fnum%2Fdec2flt%2Falgorithm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fdec2flt%2Falgorithm.rs?ref=7d872f538efc5cb3786c3aa0a6654bae7a67ec63", "patch": "@@ -64,8 +64,7 @@ mod fpu_precision {\n             asm!(\n                 \"fldcw ({})\",\n                 in(reg) &cw,\n-                // FIXME: We are using ATT syntax to support LLVM 8 and LLVM 9.\n-                options(att_syntax, nostack),\n+                options(nostack),\n             )\n         }\n     }\n@@ -89,8 +88,7 @@ mod fpu_precision {\n             asm!(\n                 \"fnstcw ({})\",\n                 in(reg) &mut cw,\n-                // FIXME: We are using ATT syntax to support LLVM 8 and LLVM 9.\n-                options(att_syntax, nostack),\n+                options(nostack),\n             )\n         }\n "}, {"sha": "1b1f11798d74d4648a7539bc1201bb0f746daab3", "filename": "library/profiler_builtins/build.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d872f538efc5cb3786c3aa0a6654bae7a67ec63/library%2Fprofiler_builtins%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d872f538efc5cb3786c3aa0a6654bae7a67ec63/library%2Fprofiler_builtins%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fprofiler_builtins%2Fbuild.rs?ref=7d872f538efc5cb3786c3aa0a6654bae7a67ec63", "patch": "@@ -24,13 +24,11 @@ fn main() {\n         \"InstrProfilingPlatformLinux.c\",\n         \"InstrProfilingPlatformOther.c\",\n         \"InstrProfilingPlatformWindows.c\",\n+        \"InstrProfilingRuntime.cpp\",\n         \"InstrProfilingUtil.c\",\n         \"InstrProfilingValue.c\",\n         \"InstrProfilingVersionVar.c\",\n         \"InstrProfilingWriter.c\",\n-        // This file was renamed in LLVM 10.\n-        \"InstrProfilingRuntime.cc\",\n-        \"InstrProfilingRuntime.cpp\",\n         // These files were added in LLVM 11.\n         \"InstrProfilingInternal.c\",\n         \"InstrProfilingBiasVar.c\","}, {"sha": "9c593a0051114c24d205eacc7be44714b28f6819", "filename": "library/std/src/sys/sgx/abi/mem.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7d872f538efc5cb3786c3aa0a6654bae7a67ec63/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d872f538efc5cb3786c3aa0a6654bae7a67ec63/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fmem.rs?ref=7d872f538efc5cb3786c3aa0a6654bae7a67ec63", "patch": "@@ -38,8 +38,7 @@ pub fn image_base() -> u64 {\n         asm!(\n             \"lea IMAGE_BASE(%rip), {}\",\n             lateout(reg) base,\n-            // NOTE(#76738): ATT syntax is used to support LLVM 8 and 9.\n-            options(att_syntax, nostack, preserves_flags, nomem, pure),\n+            options(nostack, preserves_flags, nomem, pure),\n         )\n     };\n     base"}, {"sha": "730db34e733283c88679a507c60f1fb8c5b1a5e7", "filename": "library/std/src/sys/sgx/ext/arch.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d872f538efc5cb3786c3aa0a6654bae7a67ec63/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fext%2Farch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d872f538efc5cb3786c3aa0a6654bae7a67ec63/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fext%2Farch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fext%2Farch.rs?ref=7d872f538efc5cb3786c3aa0a6654bae7a67ec63", "patch": "@@ -36,8 +36,7 @@ pub fn egetkey(request: &Align512<[u8; 512]>) -> Result<Align16<[u8; 16]>, u32>\n             inlateout(\"eax\") ENCLU_EGETKEY => error,\n             in(\"rbx\") request,\n             in(\"rcx\") out.as_mut_ptr(),\n-            // NOTE(#76738): ATT syntax is used to support LLVM 8 and 9.\n-            options(att_syntax, nostack),\n+            options(nostack),\n         );\n \n         match error {\n@@ -66,8 +65,7 @@ pub fn ereport(\n             in(\"rbx\") targetinfo,\n             in(\"rcx\") reportdata,\n             in(\"rdx\") report.as_mut_ptr(),\n-            // NOTE(#76738): ATT syntax is used to support LLVM 8 and 9.\n-            options(att_syntax, preserves_flags, nostack),\n+            options(preserves_flags, nostack),\n         );\n \n         report.assume_init()"}, {"sha": "305ff071dbba36fadebed7ee448e9f45ea0d4082", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d872f538efc5cb3786c3aa0a6654bae7a67ec63/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d872f538efc5cb3786c3aa0a6654bae7a67ec63/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=7d872f538efc5cb3786c3aa0a6654bae7a67ec63", "patch": "@@ -347,11 +347,11 @@ fn check_llvm_version(builder: &Builder<'_>, llvm_config: &Path) {\n     let version = output(cmd.arg(\"--version\"));\n     let mut parts = version.split('.').take(2).filter_map(|s| s.parse::<u32>().ok());\n     if let (Some(major), Some(_minor)) = (parts.next(), parts.next()) {\n-        if major >= 9 {\n+        if major >= 10 {\n             return;\n         }\n     }\n-    panic!(\"\\n\\nbad LLVM version: {}, need >=9.0\\n\\n\", version)\n+    panic!(\"\\n\\nbad LLVM version: {}, need >=10.0\\n\\n\", version)\n }\n \n fn configure_cmake("}, {"sha": "0d32a9ec5eb8439d2b8b6e6cee6b8b190bc9c1a1", "filename": "src/ci/docker/host-x86_64/x86_64-gnu-llvm-10/Dockerfile", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d872f538efc5cb3786c3aa0a6654bae7a67ec63/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-llvm-10%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/7d872f538efc5cb3786c3aa0a6654bae7a67ec63/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-llvm-10%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-llvm-10%2FDockerfile?ref=7d872f538efc5cb3786c3aa0a6654bae7a67ec63", "patch": "@@ -13,8 +13,8 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   cmake \\\n   sudo \\\n   gdb \\\n-  llvm-9-tools \\\n-  llvm-9-dev \\\n+  llvm-10-tools \\\n+  llvm-10-dev \\\n   libedit-dev \\\n   libssl-dev \\\n   pkg-config \\\n@@ -28,7 +28,7 @@ RUN sh /scripts/sccache.sh\n # using llvm-link-shared due to libffi issues -- see #34486\n ENV RUST_CONFIGURE_ARGS \\\n       --build=x86_64-unknown-linux-gnu \\\n-      --llvm-root=/usr/lib/llvm-9 \\\n+      --llvm-root=/usr/lib/llvm-10 \\\n       --enable-llvm-link-shared \\\n       --set rust.thin-lto-import-instr-limit=10\n ", "previous_filename": "src/ci/docker/host-x86_64/x86_64-gnu-llvm-9/Dockerfile"}, {"sha": "a59a90b86bcafbea7bcd52a3ec8400469dfba495", "filename": "src/ci/github-actions/ci.yml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d872f538efc5cb3786c3aa0a6654bae7a67ec63/src%2Fci%2Fgithub-actions%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/7d872f538efc5cb3786c3aa0a6654bae7a67ec63/src%2Fci%2Fgithub-actions%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fgithub-actions%2Fci.yml?ref=7d872f538efc5cb3786c3aa0a6654bae7a67ec63", "patch": "@@ -280,7 +280,7 @@ jobs:\n           - name: mingw-check\n             <<: *job-linux-xl\n \n-          - name: x86_64-gnu-llvm-9\n+          - name: x86_64-gnu-llvm-10\n             <<: *job-linux-xl\n \n           - name: x86_64-gnu-tools\n@@ -412,7 +412,7 @@ jobs:\n           - name: x86_64-gnu-distcheck\n             <<: *job-linux-xl\n \n-          - name: x86_64-gnu-llvm-9\n+          - name: x86_64-gnu-llvm-10\n             env:\n               RUST_BACKTRACE: 1\n             <<: *job-linux-xl"}, {"sha": "ae13d91ddeba45dc713b6b678d1aa33a548bffaa", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-transmute-array.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7d872f538efc5cb3786c3aa0a6654bae7a67ec63/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-transmute-array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d872f538efc5cb3786c3aa0a6654bae7a67ec63/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-transmute-array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-transmute-array.rs?ref=7d872f538efc5cb3786c3aa0a6654bae7a67ec63", "patch": "@@ -1,6 +1,5 @@\n // ignore-tidy-linelength\n // compile-flags: -C no-prepopulate-passes\n-// min-llvm-version 8.0\n \n #![crate_type = \"lib\"]\n "}, {"sha": "7193fb3527fa25a2ffbe7b5d2248dbc8547682f5", "filename": "src/test/ui/simd/simd-intrinsic-generic-reduction.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7d872f538efc5cb3786c3aa0a6654bae7a67ec63/src%2Ftest%2Fui%2Fsimd%2Fsimd-intrinsic-generic-reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d872f538efc5cb3786c3aa0a6654bae7a67ec63/src%2Ftest%2Fui%2Fsimd%2Fsimd-intrinsic-generic-reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fsimd-intrinsic-generic-reduction.rs?ref=7d872f538efc5cb3786c3aa0a6654bae7a67ec63", "patch": "@@ -2,7 +2,6 @@\n #![allow(non_camel_case_types)]\n \n // ignore-emscripten\n-// min-system-llvm-version: 9.0\n \n // Test that the simd_reduce_{op} intrinsics produce the correct results.\n "}]}