{"sha": "86f6c0e0861f4d223d00280107cd0b31b6ebb85b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2ZjZjMGUwODYxZjRkMjIzZDAwMjgwMTA3Y2QwYjMxYjZlYmI4NWI=", "commit": {"author": {"name": "Ayaz Hafiz", "email": "ayaz.hafiz.1@gmail.com", "date": "2020-06-21T22:49:56Z"}, "committer": {"name": "Ayaz Hafiz", "email": "ayaz.hafiz.1@gmail.com", "date": "2020-06-23T16:25:46Z"}, "message": "Record span of `const` kw in GenericParamKind\n\nContext: this is needed to fix https://github.com/rust-lang/rustfmt/issues/4263,\nwhich currently records the span of a const generic param incorrectly\nbecause the location of the `const` kw is not known.\n\nI am not sure how to add tests for this; any guidance in how to do so\nwould be appreciated :slightly_smiling_face:", "tree": {"sha": "3d46b2eff25f77be06040427cef588e1b4732a1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d46b2eff25f77be06040427cef588e1b4732a1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86f6c0e0861f4d223d00280107cd0b31b6ebb85b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEP1kDyr3I3sjT29nTtEP3owMMmu0FAl7yLQoACgkQtEP3owMM\nmu1c2g/8DYXJAazqkyTrixO3bjBTZyLFxkK/Nn4qqKZiTNoire2HMq4iCM7Sva9j\nqb8oNDKcFQZBzTfogYSJn8T9+Z4TC1ph8wBcs48P/uK7GElUerEUP58phz2tujAM\nN4zFLJICWBW0nbMvriW+s8F1HoB9i89nnpBxPSGjE1+MXcuVCDPrZB+jf/LUXzWR\njX+/CaHhA0qkVg/QDg+Lm6nEkeXXhrmnKKAmWTJZZjSveullrLqq4teApblZ99rd\n3AamI9+6I3bJh7miY3Uji8afUVPYCRrPUa9hTie670dbnqdemLP0jGL2V3s1AGIj\nw/TiQ2OmtYGagCcMX1NDHHfDsL/tSvEER5/qCuOrrP/GdGH9POn2MjLgdBdu+1CV\nQ0mITEKqGhhTv20KIsW96dB7KuSzd7xBYlf98Ck4VA1x/TGkXNorsL0CQPWkrdCv\n+4MXaEqPkw+R2Qq5S3cu5qM+734Xc4kjoA2R1N/4cOKssgGmNFzeBWK5/Bw2RHWl\nCSDyghxsPkf0Fk9v04IjtFrMVrLH1aL8fKl6w1Y1bo62ydpcZwXEdC/k6DyObHay\n4Y92ZWdC+5y62Cq4TEzeK/XtXr+5dbQLvLQsyv/QFAsBHmSNKbfLhlC8N8JYHZNf\niSDla4JDsPVx/6qML35eunIc/5jgV4xb6JsUaoLlnRiWbIZSw2s=\n=UDbL\n-----END PGP SIGNATURE-----", "payload": "tree 3d46b2eff25f77be06040427cef588e1b4732a1e\nparent 06e47688bf15d0215edbe05b21603062f6d2eb5d\nauthor Ayaz Hafiz <ayaz.hafiz.1@gmail.com> 1592779796 -0700\ncommitter Ayaz Hafiz <ayaz.hafiz.1@gmail.com> 1592929546 -0700\n\nRecord span of `const` kw in GenericParamKind\n\nContext: this is needed to fix https://github.com/rust-lang/rustfmt/issues/4263,\nwhich currently records the span of a const generic param incorrectly\nbecause the location of the `const` kw is not known.\n\nI am not sure how to add tests for this; any guidance in how to do so\nwould be appreciated :slightly_smiling_face:\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86f6c0e0861f4d223d00280107cd0b31b6ebb85b", "html_url": "https://github.com/rust-lang/rust/commit/86f6c0e0861f4d223d00280107cd0b31b6ebb85b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86f6c0e0861f4d223d00280107cd0b31b6ebb85b/comments", "author": {"login": "ayazhafiz", "id": 20735482, "node_id": "MDQ6VXNlcjIwNzM1NDgy", "avatar_url": "https://avatars.githubusercontent.com/u/20735482?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ayazhafiz", "html_url": "https://github.com/ayazhafiz", "followers_url": "https://api.github.com/users/ayazhafiz/followers", "following_url": "https://api.github.com/users/ayazhafiz/following{/other_user}", "gists_url": "https://api.github.com/users/ayazhafiz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ayazhafiz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ayazhafiz/subscriptions", "organizations_url": "https://api.github.com/users/ayazhafiz/orgs", "repos_url": "https://api.github.com/users/ayazhafiz/repos", "events_url": "https://api.github.com/users/ayazhafiz/events{/privacy}", "received_events_url": "https://api.github.com/users/ayazhafiz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ayazhafiz", "id": 20735482, "node_id": "MDQ6VXNlcjIwNzM1NDgy", "avatar_url": "https://avatars.githubusercontent.com/u/20735482?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ayazhafiz", "html_url": "https://github.com/ayazhafiz", "followers_url": "https://api.github.com/users/ayazhafiz/followers", "following_url": "https://api.github.com/users/ayazhafiz/following{/other_user}", "gists_url": "https://api.github.com/users/ayazhafiz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ayazhafiz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ayazhafiz/subscriptions", "organizations_url": "https://api.github.com/users/ayazhafiz/orgs", "repos_url": "https://api.github.com/users/ayazhafiz/repos", "events_url": "https://api.github.com/users/ayazhafiz/events{/privacy}", "received_events_url": "https://api.github.com/users/ayazhafiz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06e47688bf15d0215edbe05b21603062f6d2eb5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/06e47688bf15d0215edbe05b21603062f6d2eb5d", "html_url": "https://github.com/rust-lang/rust/commit/06e47688bf15d0215edbe05b21603062f6d2eb5d"}], "stats": {"total": 30, "additions": 16, "deletions": 14}, "files": [{"sha": "bec7706bce79916f6df24515342f09daa173251e", "filename": "src/librustc_ast/ast.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86f6c0e0861f4d223d00280107cd0b31b6ebb85b/src%2Flibrustc_ast%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86f6c0e0861f4d223d00280107cd0b31b6ebb85b/src%2Flibrustc_ast%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fast.rs?ref=86f6c0e0861f4d223d00280107cd0b31b6ebb85b", "patch": "@@ -335,6 +335,8 @@ pub enum GenericParamKind {\n     },\n     Const {\n         ty: P<Ty>,\n+        /// Span of the `const` keyword.\n+        kw_span: Span,\n     },\n }\n "}, {"sha": "54f81ef106fe14e39424e5f26fcb4c74212aa43b", "filename": "src/librustc_ast/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86f6c0e0861f4d223d00280107cd0b31b6ebb85b/src%2Flibrustc_ast%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86f6c0e0861f4d223d00280107cd0b31b6ebb85b/src%2Flibrustc_ast%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fmut_visit.rs?ref=86f6c0e0861f4d223d00280107cd0b31b6ebb85b", "patch": "@@ -762,7 +762,7 @@ pub fn noop_flat_map_generic_param<T: MutVisitor>(\n         GenericParamKind::Type { default } => {\n             visit_opt(default, |default| vis.visit_ty(default));\n         }\n-        GenericParamKind::Const { ty } => {\n+        GenericParamKind::Const { ty, kw_span: _ } => {\n             vis.visit_ty(ty);\n         }\n     }"}, {"sha": "3d1091d2fc46fe6b3d0b94af4509a8c7aed2403d", "filename": "src/librustc_ast_lowering/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86f6c0e0861f4d223d00280107cd0b31b6ebb85b/src%2Flibrustc_ast_lowering%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86f6c0e0861f4d223d00280107cd0b31b6ebb85b/src%2Flibrustc_ast_lowering%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Flib.rs?ref=86f6c0e0861f4d223d00280107cd0b31b6ebb85b", "patch": "@@ -2126,7 +2126,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n                 (hir::ParamName::Plain(param.ident), kind)\n             }\n-            GenericParamKind::Const { ref ty } => {\n+            GenericParamKind::Const { ref ty, kw_span: _ } => {\n                 let ty = self\n                     .with_anonymous_lifetime_mode(AnonymousLifetimeMode::ReportError, |this| {\n                         this.lower_ty(&ty, ImplTraitContext::disallowed())"}, {"sha": "975881d9a0ac0c898895c5318320f3dd6f9660a0", "filename": "src/librustc_ast_passes/ast_validation.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/86f6c0e0861f4d223d00280107cd0b31b6ebb85b/src%2Flibrustc_ast_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86f6c0e0861f4d223d00280107cd0b31b6ebb85b/src%2Flibrustc_ast_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Fast_validation.rs?ref=86f6c0e0861f4d223d00280107cd0b31b6ebb85b", "patch": "@@ -1135,9 +1135,9 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             generics.params.iter().map(|param| {\n                 let ident = Some(param.ident.to_string());\n                 let (kind, ident) = match &param.kind {\n-                    GenericParamKind::Lifetime { .. } => (ParamKindOrd::Lifetime, ident),\n-                    GenericParamKind::Type { .. } => (ParamKindOrd::Type, ident),\n-                    GenericParamKind::Const { ref ty } => {\n+                    GenericParamKind::Lifetime => (ParamKindOrd::Lifetime, ident),\n+                    GenericParamKind::Type { default: _ } => (ParamKindOrd::Type, ident),\n+                    GenericParamKind::Const { ref ty, kw_span: _ } => {\n                         let ty = pprust::ty_to_string(ty);\n                         (ParamKindOrd::Const, Some(format!(\"const {}: {}\", param.ident, ty)))\n                     }"}, {"sha": "ecbb3af5fb9067b5212324d9e6cc81d0cc7f3dbe", "filename": "src/librustc_ast_pretty/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86f6c0e0861f4d223d00280107cd0b31b6ebb85b/src%2Flibrustc_ast_pretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86f6c0e0861f4d223d00280107cd0b31b6ebb85b/src%2Flibrustc_ast_pretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_pretty%2Fpprust.rs?ref=86f6c0e0861f4d223d00280107cd0b31b6ebb85b", "patch": "@@ -2578,7 +2578,7 @@ impl<'a> State<'a> {\n                         s.print_type(default)\n                     }\n                 }\n-                ast::GenericParamKind::Const { ref ty } => {\n+                ast::GenericParamKind::Const { ref ty, kw_span: _ } => {\n                     s.word_space(\"const\");\n                     s.print_ident(param.ident);\n                     s.s.space();"}, {"sha": "dc21be3b296aa16db1a128158501efbda5637dd4", "filename": "src/librustc_builtin_macros/deriving/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86f6c0e0861f4d223d00280107cd0b31b6ebb85b/src%2Flibrustc_builtin_macros%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86f6c0e0861f4d223d00280107cd0b31b6ebb85b/src%2Flibrustc_builtin_macros%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fmod.rs?ref=86f6c0e0861f4d223d00280107cd0b31b6ebb85b", "patch": "@@ -123,7 +123,7 @@ fn inject_impl_of_structural_trait(\n                 *default = None;\n                 ast::GenericArg::Type(cx.ty_ident(span, param.ident))\n             }\n-            ast::GenericParamKind::Const { ty: _ } => {\n+            ast::GenericParamKind::Const { ty: _, kw_span: _ } => {\n                 ast::GenericArg::Const(cx.const_ident(span, param.ident))\n             }\n         })"}, {"sha": "47794746126daa02579ccc7fc822c80d03d3110b", "filename": "src/librustc_parse/parser/generics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/86f6c0e0861f4d223d00280107cd0b31b6ebb85b/src%2Flibrustc_parse%2Fparser%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86f6c0e0861f4d223d00280107cd0b31b6ebb85b/src%2Flibrustc_parse%2Fparser%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fgenerics.rs?ref=86f6c0e0861f4d223d00280107cd0b31b6ebb85b", "patch": "@@ -47,21 +47,21 @@ impl<'a> Parser<'a> {\n     }\n \n     fn parse_const_param(&mut self, preceding_attrs: Vec<Attribute>) -> PResult<'a, GenericParam> {\n-        let lo = self.token.span;\n+        let const_span = self.token.span;\n \n         self.expect_keyword(kw::Const)?;\n         let ident = self.parse_ident()?;\n         self.expect(&token::Colon)?;\n         let ty = self.parse_ty()?;\n \n-        self.sess.gated_spans.gate(sym::const_generics, lo.to(self.prev_token.span));\n+        self.sess.gated_spans.gate(sym::const_generics, const_span.to(self.prev_token.span));\n \n         Ok(GenericParam {\n             ident,\n             id: ast::DUMMY_NODE_ID,\n             attrs: preceding_attrs.into(),\n             bounds: Vec::new(),\n-            kind: GenericParamKind::Const { ty },\n+            kind: GenericParamKind::Const { ty, kw_span: const_span },\n             is_placeholder: false,\n         })\n     }"}, {"sha": "3092614e83b5f55eef27103cd0e0feb282672c47", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/86f6c0e0861f4d223d00280107cd0b31b6ebb85b/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86f6c0e0861f4d223d00280107cd0b31b6ebb85b/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=86f6c0e0861f4d223d00280107cd0b31b6ebb85b", "patch": "@@ -534,8 +534,8 @@ impl<'a, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n \n         for param in &generics.params {\n             match param.kind {\n-                GenericParamKind::Lifetime { .. } => self.visit_generic_param(param),\n-                GenericParamKind::Type { ref default, .. } => {\n+                GenericParamKind::Lifetime => self.visit_generic_param(param),\n+                GenericParamKind::Type { ref default } => {\n                     for bound in &param.bounds {\n                         self.visit_param_bound(bound);\n                     }\n@@ -549,7 +549,7 @@ impl<'a, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n                     // Allow all following defaults to refer to this type parameter.\n                     default_ban_rib.bindings.remove(&Ident::with_dummy_span(param.ident.name));\n                 }\n-                GenericParamKind::Const { ref ty } => {\n+                GenericParamKind::Const { ref ty, kw_span: _ } => {\n                     for bound in &param.bounds {\n                         self.visit_param_bound(bound);\n                     }"}, {"sha": "e19a79dd8dad164dd40cc84a1a37f52740bb5bca", "filename": "src/tools/clippy/clippy_lints/src/utils/ast_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86f6c0e0861f4d223d00280107cd0b31b6ebb85b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86f6c0e0861f4d223d00280107cd0b31b6ebb85b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fast_utils.rs?ref=86f6c0e0861f4d223d00280107cd0b31b6ebb85b", "patch": "@@ -476,7 +476,7 @@ pub fn eq_generic_param(l: &GenericParam, r: &GenericParam) -> bool {\n         && match (&l.kind, &r.kind) {\n             (Lifetime, Lifetime) => true,\n             (Type { default: l }, Type { default: r }) => both(l, r, |l, r| eq_ty(l, r)),\n-            (Const { ty: l }, Const { ty: r }) => eq_ty(l, r),\n+            (Const { ty: l, kw_span: _ }, Const { ty: r, kw_span: _ }) => eq_ty(l, r),\n             _ => false,\n         }\n         && over(&l.attrs, &r.attrs, |l, r| eq_attr(l, r))"}]}