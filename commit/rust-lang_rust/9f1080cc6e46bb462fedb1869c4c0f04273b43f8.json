{"sha": "9f1080cc6e46bb462fedb1869c4c0f04273b43f8", "node_id": "C_kwDOAAsO6NoAKDlmMTA4MGNjNmU0NmJiNDYyZmVkYjE4NjljNGMwZjA0MjczYjQzZjg", "commit": {"author": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2021-12-26T09:00:29Z"}, "committer": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2022-03-02T18:31:06Z"}, "message": "new lint: `missing-spin-loop`", "tree": {"sha": "e24cc115578eb5c5d2ea58b8bcff479ea665bcd3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e24cc115578eb5c5d2ea58b8bcff479ea665bcd3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f1080cc6e46bb462fedb1869c4c0f04273b43f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f1080cc6e46bb462fedb1869c4c0f04273b43f8", "html_url": "https://github.com/rust-lang/rust/commit/9f1080cc6e46bb462fedb1869c4c0f04273b43f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f1080cc6e46bb462fedb1869c4c0f04273b43f8/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28b1fe51293096e763da8442465ea42bd341a0b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/28b1fe51293096e763da8442465ea42bd341a0b6", "html_url": "https://github.com/rust-lang/rust/commit/28b1fe51293096e763da8442465ea42bd341a0b6"}], "stats": {"total": 251, "additions": 251, "deletions": 0}, "files": [{"sha": "c936e35dc1b04d8d5f912e5a9e95a8ee1de53052", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9f1080cc6e46bb462fedb1869c4c0f04273b43f8/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/9f1080cc6e46bb462fedb1869c4c0f04273b43f8/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=9f1080cc6e46bb462fedb1869c4c0f04273b43f8", "patch": "@@ -3297,6 +3297,7 @@ Released 2018-09-13\n [`missing_inline_in_public_items`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items\n [`missing_panics_doc`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc\n [`missing_safety_doc`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n+[`missing_spin_loop`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_spin_loop\n [`mistyped_literal_suffixes`]: https://rust-lang.github.io/rust-clippy/master/index.html#mistyped_literal_suffixes\n [`mixed_case_hex_literals`]: https://rust-lang.github.io/rust-clippy/master/index.html#mixed_case_hex_literals\n [`mod_module_files`]: https://rust-lang.github.io/rust-clippy/master/index.html#mod_module_files"}, {"sha": "a6d9f9d0c22f0c14c43059ed68bf42e25ff46e4e", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9f1080cc6e46bb462fedb1869c4c0f04273b43f8/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1080cc6e46bb462fedb1869c4c0f04273b43f8/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=9f1080cc6e46bb462fedb1869c4c0f04273b43f8", "patch": "@@ -109,6 +109,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(loops::ITER_NEXT_LOOP),\n     LintId::of(loops::MANUAL_FLATTEN),\n     LintId::of(loops::MANUAL_MEMCPY),\n+    LintId::of(loops::MISSING_SPIN_LOOP),\n     LintId::of(loops::MUT_RANGE_BOUND),\n     LintId::of(loops::NEEDLESS_COLLECT),\n     LintId::of(loops::NEEDLESS_RANGE_LOOP),"}, {"sha": "59e94029eedd63b871aabc9560c7973f0f35ef75", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9f1080cc6e46bb462fedb1869c4c0f04273b43f8/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1080cc6e46bb462fedb1869c4c0f04273b43f8/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=9f1080cc6e46bb462fedb1869c4c0f04273b43f8", "patch": "@@ -221,6 +221,7 @@ store.register_lints(&[\n     loops::ITER_NEXT_LOOP,\n     loops::MANUAL_FLATTEN,\n     loops::MANUAL_MEMCPY,\n+    loops::MISSING_SPIN_LOOP,\n     loops::MUT_RANGE_BOUND,\n     loops::NEEDLESS_COLLECT,\n     loops::NEEDLESS_RANGE_LOOP,"}, {"sha": "f2f5c988d8f9056b557e05ac61e43287b01ef2d6", "filename": "clippy_lints/src/lib.register_perf.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9f1080cc6e46bb462fedb1869c4c0f04273b43f8/clippy_lints%2Fsrc%2Flib.register_perf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1080cc6e46bb462fedb1869c4c0f04273b43f8/clippy_lints%2Fsrc%2Flib.register_perf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_perf.rs?ref=9f1080cc6e46bb462fedb1869c4c0f04273b43f8", "patch": "@@ -10,6 +10,7 @@ store.register_group(true, \"clippy::perf\", Some(\"clippy_perf\"), vec![\n     LintId::of(large_const_arrays::LARGE_CONST_ARRAYS),\n     LintId::of(large_enum_variant::LARGE_ENUM_VARIANT),\n     LintId::of(loops::MANUAL_MEMCPY),\n+    LintId::of(loops::MISSING_SPIN_LOOP),\n     LintId::of(loops::NEEDLESS_COLLECT),\n     LintId::of(methods::EXPECT_FUN_CALL),\n     LintId::of(methods::EXTEND_WITH_DRAIN),"}, {"sha": "15cafa0b53055d39f29c09f8441b66f1e9626ac3", "filename": "clippy_lints/src/loops/missing_spin_loop.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/9f1080cc6e46bb462fedb1869c4c0f04273b43f8/clippy_lints%2Fsrc%2Floops%2Fmissing_spin_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1080cc6e46bb462fedb1869c4c0f04273b43f8/clippy_lints%2Fsrc%2Floops%2Fmissing_spin_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fmissing_spin_loop.rs?ref=9f1080cc6e46bb462fedb1869c4c0f04273b43f8", "patch": "@@ -0,0 +1,56 @@\n+use super::MISSING_SPIN_LOOP;\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::is_no_std_crate;\n+use rustc_errors::Applicability;\n+use rustc_hir::{Block, Expr, ExprKind};\n+use rustc_lint::LateContext;\n+use rustc_middle::ty;\n+use rustc_span::sym;\n+\n+fn unpack_cond<'tcx>(cond: &'tcx Expr<'tcx>) -> &'tcx Expr<'tcx> {\n+    match &cond.kind {\n+        ExprKind::Block(\n+            Block {\n+                stmts: [],\n+                expr: Some(e),\n+                ..\n+            },\n+            _,\n+        )\n+        | ExprKind::Unary(_, e) => unpack_cond(e),\n+        ExprKind::Binary(_, l, r) => {\n+            let l = unpack_cond(l);\n+            if let ExprKind::MethodCall(..) = l.kind {\n+                l\n+            } else {\n+                unpack_cond(r)\n+            }\n+        },\n+        _ => cond,\n+    }\n+}\n+\n+pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, cond: &'tcx Expr<'_>, body: &'tcx Expr<'_>) {\n+    if_chain! {\n+        if let ExprKind::Block(Block { stmts: [], expr: None, ..}, _) = body.kind;\n+        if let ExprKind::MethodCall(method, [callee, ..], _) = unpack_cond(cond).kind;\n+        if [sym::load, sym::compare_exchange, sym::compare_exchange_weak].contains(&method.ident.name);\n+        if let ty::Adt(def, _substs) = cx.typeck_results().expr_ty(callee).kind();\n+        if cx.tcx.is_diagnostic_item(sym::AtomicBool, def.did);\n+        then {\n+            span_lint_and_sugg(\n+                cx,\n+                MISSING_SPIN_LOOP,\n+                body.span,\n+                \"busy-waiting loop should at least have a spin loop hint\",\n+                \"try this\",\n+                (if is_no_std_crate(cx) {\n+                    \"{ core::hint::spin_loop() }\"\n+                } else {\n+                    \"{ std::hint::spin_loop() }\"\n+                }).into(),\n+                Applicability::MachineApplicable\n+            );\n+        }\n+    }\n+}"}, {"sha": "f029067d36715f91cc7a33097e8b799dec51be7c", "filename": "clippy_lints/src/loops/mod.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/9f1080cc6e46bb462fedb1869c4c0f04273b43f8/clippy_lints%2Fsrc%2Floops%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1080cc6e46bb462fedb1869c4c0f04273b43f8/clippy_lints%2Fsrc%2Floops%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fmod.rs?ref=9f1080cc6e46bb462fedb1869c4c0f04273b43f8", "patch": "@@ -7,6 +7,7 @@ mod for_loops_over_fallibles;\n mod iter_next_loop;\n mod manual_flatten;\n mod manual_memcpy;\n+mod missing_spin_loop;\n mod mut_range_bound;\n mod needless_collect;\n mod needless_range_loop;\n@@ -560,6 +561,42 @@ declare_clippy_lint! {\n     \"for loops over `Option`s or `Result`s with a single expression can be simplified\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Check for empty spin loops\n+    ///\n+    /// ### Why is this bad?\n+    /// The loop body should have something like `thread::park()` or at least\n+    /// `std::hint::spin_loop()` to avoid needlessly burning cycles and conserve\n+    /// energy. Perhaps even better use an actual lock, if possible.\n+    ///\n+    /// ### Known problems\n+    /// This lint doesn't currently trigger on `while let` or\n+    /// `loop { match .. { .. } }` loops, which would be considered idiomatic in\n+    /// combination with e.g. `AtomicBool::compare_exchange_weak`.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```ignore\n+    /// use core::sync::atomic::{AtomicBool, Ordering};\n+    /// let b = AtomicBool::new(true);\n+    /// // give a ref to `b` to another thread,wait for it to become false\n+    /// while b.load(Ordering::Acquire) {};\n+    /// ```\n+    /// Use instead:\n+    /// ```rust,no_run\n+    ///# use core::sync::atomic::{AtomicBool, Ordering};\n+    ///# let b = AtomicBool::new(true);\n+    /// while b.load(Ordering::Acquire) {\n+    ///     std::hint::spin_loop()\n+    /// }\n+    /// ```\n+    #[clippy::version = \"1.59.0\"]\n+    pub MISSING_SPIN_LOOP,\n+    perf,\n+    \"An empty busy waiting loop\"\n+}\n+\n declare_lint_pass!(Loops => [\n     MANUAL_MEMCPY,\n     MANUAL_FLATTEN,\n@@ -579,6 +616,7 @@ declare_lint_pass!(Loops => [\n     WHILE_IMMUTABLE_CONDITION,\n     SAME_ITEM_PUSH,\n     SINGLE_ELEMENT_LOOP,\n+    MISSING_SPIN_LOOP,\n ]);\n \n impl<'tcx> LateLintPass<'tcx> for Loops {\n@@ -628,6 +666,7 @@ impl<'tcx> LateLintPass<'tcx> for Loops {\n \n         if let Some(higher::While { condition, body }) = higher::While::hir(expr) {\n             while_immutable_condition::check(cx, condition, body);\n+            missing_spin_loop::check(cx, condition, body);\n         }\n \n         needless_collect::check(expr, cx);"}, {"sha": "aa89e04d26eb26291feae2a2b108cff221508889", "filename": "tests/ui/missing_spin_loop.fixed", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9f1080cc6e46bb462fedb1869c4c0f04273b43f8/tests%2Fui%2Fmissing_spin_loop.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/9f1080cc6e46bb462fedb1869c4c0f04273b43f8/tests%2Fui%2Fmissing_spin_loop.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_spin_loop.fixed?ref=9f1080cc6e46bb462fedb1869c4c0f04273b43f8", "patch": "@@ -0,0 +1,28 @@\n+// run-rustfix\n+#![warn(clippy::missing_spin_loop)]\n+#![allow(clippy::bool_comparison)]\n+#![allow(unused_braces)]\n+\n+use core::sync::atomic::{AtomicBool, Ordering};\n+\n+fn main() {\n+    let b = AtomicBool::new(true);\n+    // Those should lint\n+    while b.load(Ordering::Acquire) { std::hint::spin_loop() }\n+\n+    while !b.load(Ordering::SeqCst) { std::hint::spin_loop() }\n+\n+    while b.load(Ordering::Acquire) == false { std::hint::spin_loop() }\n+\n+    while { true == b.load(Ordering::Acquire) } { std::hint::spin_loop() }\n+\n+    while b.compare_exchange(true, false, Ordering::Acquire, Ordering::Relaxed) != Ok(true) { std::hint::spin_loop() }\n+\n+    while Ok(false) != b.compare_exchange(false, true, Ordering::Acquire, Ordering::Relaxed) { std::hint::spin_loop() }\n+\n+    // This is OK, as the body is not empty\n+    while b.load(Ordering::Acquire) {\n+        std::hint::spin_loop()\n+    }\n+    // TODO: also match on loop+match or while let\n+}"}, {"sha": "88745e4773248af2db57048fd567812143c0228c", "filename": "tests/ui/missing_spin_loop.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9f1080cc6e46bb462fedb1869c4c0f04273b43f8/tests%2Fui%2Fmissing_spin_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1080cc6e46bb462fedb1869c4c0f04273b43f8/tests%2Fui%2Fmissing_spin_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_spin_loop.rs?ref=9f1080cc6e46bb462fedb1869c4c0f04273b43f8", "patch": "@@ -0,0 +1,28 @@\n+// run-rustfix\n+#![warn(clippy::missing_spin_loop)]\n+#![allow(clippy::bool_comparison)]\n+#![allow(unused_braces)]\n+\n+use core::sync::atomic::{AtomicBool, Ordering};\n+\n+fn main() {\n+    let b = AtomicBool::new(true);\n+    // Those should lint\n+    while b.load(Ordering::Acquire) {}\n+\n+    while !b.load(Ordering::SeqCst) {}\n+\n+    while b.load(Ordering::Acquire) == false {}\n+\n+    while { true == b.load(Ordering::Acquire) } {}\n+\n+    while b.compare_exchange(true, false, Ordering::Acquire, Ordering::Relaxed) != Ok(true) {}\n+\n+    while Ok(false) != b.compare_exchange(false, true, Ordering::Acquire, Ordering::Relaxed) {}\n+\n+    // This is OK, as the body is not empty\n+    while b.load(Ordering::Acquire) {\n+        std::hint::spin_loop()\n+    }\n+    // TODO: also match on loop+match or while let\n+}"}, {"sha": "485da00dc6407a442d2eb6eb580515e6626876ed", "filename": "tests/ui/missing_spin_loop.stderr", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/9f1080cc6e46bb462fedb1869c4c0f04273b43f8/tests%2Fui%2Fmissing_spin_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f1080cc6e46bb462fedb1869c4c0f04273b43f8/tests%2Fui%2Fmissing_spin_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_spin_loop.stderr?ref=9f1080cc6e46bb462fedb1869c4c0f04273b43f8", "patch": "@@ -0,0 +1,40 @@\n+error: busy-waiting loop should at least have a spin loop hint\n+  --> $DIR/missing_spin_loop.rs:11:37\n+   |\n+LL |     while b.load(Ordering::Acquire) {}\n+   |                                     ^^ help: try this: `{ std::hint::spin_loop() }`\n+   |\n+   = note: `-D clippy::missing-spin-loop` implied by `-D warnings`\n+\n+error: busy-waiting loop should at least have a spin loop hint\n+  --> $DIR/missing_spin_loop.rs:13:37\n+   |\n+LL |     while !b.load(Ordering::SeqCst) {}\n+   |                                     ^^ help: try this: `{ std::hint::spin_loop() }`\n+\n+error: busy-waiting loop should at least have a spin loop hint\n+  --> $DIR/missing_spin_loop.rs:15:46\n+   |\n+LL |     while b.load(Ordering::Acquire) == false {}\n+   |                                              ^^ help: try this: `{ std::hint::spin_loop() }`\n+\n+error: busy-waiting loop should at least have a spin loop hint\n+  --> $DIR/missing_spin_loop.rs:17:49\n+   |\n+LL |     while { true == b.load(Ordering::Acquire) } {}\n+   |                                                 ^^ help: try this: `{ std::hint::spin_loop() }`\n+\n+error: busy-waiting loop should at least have a spin loop hint\n+  --> $DIR/missing_spin_loop.rs:19:93\n+   |\n+LL |     while b.compare_exchange(true, false, Ordering::Acquire, Ordering::Relaxed) != Ok(true) {}\n+   |                                                                                             ^^ help: try this: `{ std::hint::spin_loop() }`\n+\n+error: busy-waiting loop should at least have a spin loop hint\n+  --> $DIR/missing_spin_loop.rs:21:94\n+   |\n+LL |     while Ok(false) != b.compare_exchange(false, true, Ordering::Acquire, Ordering::Relaxed) {}\n+   |                                                                                              ^^ help: try this: `{ std::hint::spin_loop() }`\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "bb4b4795516ec6e8b3872be87e6245c79e1ec800", "filename": "tests/ui/missing_spin_loop_no_std.fixed", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9f1080cc6e46bb462fedb1869c4c0f04273b43f8/tests%2Fui%2Fmissing_spin_loop_no_std.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/9f1080cc6e46bb462fedb1869c4c0f04273b43f8/tests%2Fui%2Fmissing_spin_loop_no_std.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_spin_loop_no_std.fixed?ref=9f1080cc6e46bb462fedb1869c4c0f04273b43f8", "patch": "@@ -0,0 +1,23 @@\n+// run-rustfix\n+#![warn(clippy::missing_spin_loop)]\n+#![feature(lang_items, start, libc)]\n+#![no_std]\n+\n+use core::sync::atomic::{AtomicBool, Ordering};\n+\n+#[start]\n+fn main(_argc: isize, _argv: *const *const u8) -> isize {\n+    // This should trigger the lint\n+    let b = AtomicBool::new(true);\n+    // This should lint with `core::hint::spin_loop()`\n+    while b.load(Ordering::Acquire) { core::hint::spin_loop() }\n+    0\n+}\n+\n+#[panic_handler]\n+fn panic(_info: &core::panic::PanicInfo) -> ! {\n+    loop {}\n+}\n+\n+#[lang = \"eh_personality\"]\n+extern \"C\" fn eh_personality() {}"}, {"sha": "a19bc72baf8d1739191a21b32ca7945a478965b4", "filename": "tests/ui/missing_spin_loop_no_std.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9f1080cc6e46bb462fedb1869c4c0f04273b43f8/tests%2Fui%2Fmissing_spin_loop_no_std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1080cc6e46bb462fedb1869c4c0f04273b43f8/tests%2Fui%2Fmissing_spin_loop_no_std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_spin_loop_no_std.rs?ref=9f1080cc6e46bb462fedb1869c4c0f04273b43f8", "patch": "@@ -0,0 +1,23 @@\n+// run-rustfix\n+#![warn(clippy::missing_spin_loop)]\n+#![feature(lang_items, start, libc)]\n+#![no_std]\n+\n+use core::sync::atomic::{AtomicBool, Ordering};\n+\n+#[start]\n+fn main(_argc: isize, _argv: *const *const u8) -> isize {\n+    // This should trigger the lint\n+    let b = AtomicBool::new(true);\n+    // This should lint with `core::hint::spin_loop()`\n+    while b.load(Ordering::Acquire) {}\n+    0\n+}\n+\n+#[panic_handler]\n+fn panic(_info: &core::panic::PanicInfo) -> ! {\n+    loop {}\n+}\n+\n+#[lang = \"eh_personality\"]\n+extern \"C\" fn eh_personality() {}"}, {"sha": "2b3b6873c3c41ad31eb4b099535e0606de93a5df", "filename": "tests/ui/missing_spin_loop_no_std.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9f1080cc6e46bb462fedb1869c4c0f04273b43f8/tests%2Fui%2Fmissing_spin_loop_no_std.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f1080cc6e46bb462fedb1869c4c0f04273b43f8/tests%2Fui%2Fmissing_spin_loop_no_std.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_spin_loop_no_std.stderr?ref=9f1080cc6e46bb462fedb1869c4c0f04273b43f8", "patch": "@@ -0,0 +1,10 @@\n+error: busy-waiting loop should at least have a spin loop hint\n+  --> $DIR/missing_spin_loop_no_std.rs:13:37\n+   |\n+LL |     while b.load(Ordering::Acquire) {}\n+   |                                     ^^ help: try this: `{ core::hint::spin_loop() }`\n+   |\n+   = note: `-D clippy::missing-spin-loop` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}]}