{"sha": "9d7295f0be2c90a98b6a7ce5f24ddef96dea10b7", "node_id": "C_kwDOAAsO6NoAKDlkNzI5NWYwYmUyYzkwYTk4YjZhN2NlNWYyNGRkZWY5NmRlYTEwYjc", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-06-14T23:37:36Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-06-15T00:02:13Z"}, "message": "Move dead CGU marking code out of `partition`.\n\nThe other major steps in `partition` have their own function, so it's\nnice for this one to be likewise.", "tree": {"sha": "22828e2a57e2b4dab7ea0d60ed0a657c9382f6d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22828e2a57e2b4dab7ea0d60ed0a657c9382f6d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d7295f0be2c90a98b6a7ce5f24ddef96dea10b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d7295f0be2c90a98b6a7ce5f24ddef96dea10b7", "html_url": "https://github.com/rust-lang/rust/commit/9d7295f0be2c90a98b6a7ce5f24ddef96dea10b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d7295f0be2c90a98b6a7ce5f24ddef96dea10b7/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b475c705f36fb3b0a63994b92f2bbd2f5865b07", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b475c705f36fb3b0a63994b92f2bbd2f5865b07", "html_url": "https://github.com/rust-lang/rust/commit/0b475c705f36fb3b0a63994b92f2bbd2f5865b07"}], "stats": {"total": 55, "additions": 28, "deletions": 27}, "files": [{"sha": "2a314727744f8f76c9cd71361eea5a6ba31fff06", "filename": "compiler/rustc_monomorphize/src/partitioning.rs", "status": "modified", "additions": 28, "deletions": 27, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/9d7295f0be2c90a98b6a7ce5f24ddef96dea10b7/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7295f0be2c90a98b6a7ce5f24ddef96dea10b7/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning.rs?ref=9d7295f0be2c90a98b6a7ce5f24ddef96dea10b7", "patch": "@@ -197,34 +197,8 @@ where\n \n     let instrument_dead_code =\n         tcx.sess.instrument_coverage() && !tcx.sess.instrument_coverage_except_unused_functions();\n-\n     if instrument_dead_code {\n-        assert!(\n-            codegen_units.len() > 0,\n-            \"There must be at least one CGU that code coverage data can be generated in.\"\n-        );\n-\n-        // Find the smallest CGU that has exported symbols and put the dead\n-        // function stubs in that CGU. We look for exported symbols to increase\n-        // the likelihood the linker won't throw away the dead functions.\n-        // FIXME(#92165): In order to truly resolve this, we need to make sure\n-        // the object file (CGU) containing the dead function stubs is included\n-        // in the final binary. This will probably require forcing these\n-        // function symbols to be included via `-u` or `/include` linker args.\n-        let mut cgus: Vec<_> = codegen_units.iter_mut().collect();\n-        cgus.sort_by_key(|cgu| cgu.size_estimate());\n-\n-        let dead_code_cgu =\n-            if let Some(cgu) = cgus.into_iter().rev().find(|cgu| {\n-                cgu.items().iter().any(|(_, (linkage, _))| *linkage == Linkage::External)\n-            }) {\n-                cgu\n-            } else {\n-                // If there are no CGUs that have externally linked items,\n-                // then we just pick the first CGU as a fallback.\n-                &mut codegen_units[0]\n-            };\n-        dead_code_cgu.make_code_coverage_dead_code_cgu();\n+        mark_code_coverage_dead_code_cgu(&mut codegen_units);\n     }\n \n     // Ensure CGUs are sorted by name, so that we get deterministic results.\n@@ -545,6 +519,33 @@ fn internalize_symbols<'tcx>(\n     }\n }\n \n+fn mark_code_coverage_dead_code_cgu<'tcx>(codegen_units: &mut [CodegenUnit<'tcx>]) {\n+    assert!(!codegen_units.is_empty());\n+\n+    // Find the smallest CGU that has exported symbols and put the dead\n+    // function stubs in that CGU. We look for exported symbols to increase\n+    // the likelihood the linker won't throw away the dead functions.\n+    // FIXME(#92165): In order to truly resolve this, we need to make sure\n+    // the object file (CGU) containing the dead function stubs is included\n+    // in the final binary. This will probably require forcing these\n+    // function symbols to be included via `-u` or `/include` linker args.\n+    let mut cgus: Vec<&mut CodegenUnit<'tcx>> = codegen_units.iter_mut().collect();\n+    cgus.sort_by_key(|cgu| cgu.size_estimate());\n+\n+    let dead_code_cgu = if let Some(cgu) = cgus\n+        .into_iter()\n+        .rev()\n+        .find(|cgu| cgu.items().iter().any(|(_, (linkage, _))| *linkage == Linkage::External))\n+    {\n+        cgu\n+    } else {\n+        // If there are no CGUs that have externally linked items,\n+        // then we just pick the first CGU as a fallback.\n+        &mut codegen_units[0]\n+    };\n+    dead_code_cgu.make_code_coverage_dead_code_cgu();\n+}\n+\n fn characteristic_def_id_of_mono_item<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     mono_item: MonoItem<'tcx>,"}]}