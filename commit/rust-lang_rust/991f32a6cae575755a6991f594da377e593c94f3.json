{"sha": "991f32a6cae575755a6991f594da377e593c94f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5MWYzMmE2Y2FlNTc1NzU1YTY5OTFmNTk0ZGEzNzdlNTkzYzk0ZjM=", "commit": {"author": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2015-12-29T00:14:28Z"}, "committer": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2016-03-14T22:04:34Z"}, "message": "Hook `default` keyword into metadata and carry data through to typeck", "tree": {"sha": "1cf1f924b977732793d8aca1805d86a0b2a00162", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1cf1f924b977732793d8aca1805d86a0b2a00162"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/991f32a6cae575755a6991f594da377e593c94f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/991f32a6cae575755a6991f594da377e593c94f3", "html_url": "https://github.com/rust-lang/rust/commit/991f32a6cae575755a6991f594da377e593c94f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/991f32a6cae575755a6991f594da377e593c94f3/comments", "author": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8fe63e23421f66b730afdbd14c3ec90e39950288", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fe63e23421f66b730afdbd14c3ec90e39950288", "html_url": "https://github.com/rust-lang/rust/commit/8fe63e23421f66b730afdbd14c3ec90e39950288"}], "stats": {"total": 51, "additions": 48, "deletions": 3}, "files": [{"sha": "d6399befb517ad65321f8b988deb6c01f26306d1", "filename": "src/librustc/middle/ty/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/991f32a6cae575755a6991f594da377e593c94f3/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/991f32a6cae575755a6991f594da377e593c94f3/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs?ref=991f32a6cae575755a6991f594da377e593c94f3", "patch": "@@ -281,6 +281,7 @@ pub struct Method<'tcx> {\n     pub fty: BareFnTy<'tcx>,\n     pub explicit_self: ExplicitSelfCategory,\n     pub vis: hir::Visibility,\n+    pub defaultness: hir::Defaultness,\n     pub def_id: DefId,\n     pub container: ImplOrTraitItemContainer,\n }\n@@ -292,16 +293,18 @@ impl<'tcx> Method<'tcx> {\n                fty: BareFnTy<'tcx>,\n                explicit_self: ExplicitSelfCategory,\n                vis: hir::Visibility,\n+               defaultness: hir::Defaultness,\n                def_id: DefId,\n                container: ImplOrTraitItemContainer)\n                -> Method<'tcx> {\n-       Method {\n+        Method {\n             name: name,\n             generics: generics,\n             predicates: predicates,\n             fty: fty,\n             explicit_self: explicit_self,\n             vis: vis,\n+            defaultness: defaultness,\n             def_id: def_id,\n             container: container,\n         }\n@@ -334,6 +337,7 @@ pub struct AssociatedConst<'tcx> {\n     pub name: Name,\n     pub ty: Ty<'tcx>,\n     pub vis: hir::Visibility,\n+    pub defaultness: hir::Defaultness,\n     pub def_id: DefId,\n     pub container: ImplOrTraitItemContainer,\n     pub has_value: bool\n@@ -344,6 +348,7 @@ pub struct AssociatedType<'tcx> {\n     pub name: Name,\n     pub ty: Option<Ty<'tcx>>,\n     pub vis: hir::Visibility,\n+    pub defaultness: hir::Defaultness,\n     pub def_id: DefId,\n     pub container: ImplOrTraitItemContainer,\n }"}, {"sha": "5d65c7a5784f90c7170c0f1284f5ac5ebe66a1ff", "filename": "src/librustc_metadata/common.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/991f32a6cae575755a6991f594da377e593c94f3/src%2Flibrustc_metadata%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/991f32a6cae575755a6991f594da377e593c94f3/src%2Flibrustc_metadata%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcommon.rs?ref=991f32a6cae575755a6991f594da377e593c94f3", "patch": "@@ -241,6 +241,8 @@ pub const tag_items_data_item_constness: usize = 0xa6;\n \n pub const tag_items_data_item_deprecation: usize = 0xa7;\n \n+pub const tag_items_data_item_defaultness: usize = 0xa8;\n+\n pub const tag_rustc_version: usize = 0x10f;\n pub fn rustc_version() -> String {\n     format!("}, {"sha": "e1a0edada61687526e433d9dafe49491ecfcfad0", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/991f32a6cae575755a6991f594da377e593c94f3/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/991f32a6cae575755a6991f594da377e593c94f3/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=991f32a6cae575755a6991f594da377e593c94f3", "patch": "@@ -165,6 +165,19 @@ fn fn_constness(item: rbml::Doc) -> hir::Constness {\n     }\n }\n \n+fn item_defaultness(item: rbml::Doc) -> hir::Defaultness {\n+    match reader::maybe_get_doc(item, tag_items_data_item_defaultness) {\n+        None => hir::Defaultness::Default, // should occur only for default impls on traits\n+        Some(defaultness_doc) => {\n+            match reader::doc_as_u8(defaultness_doc) as char {\n+                'd' => hir::Defaultness::Default,\n+                'f' => hir::Defaultness::Final,\n+                _ => panic!(\"unknown defaultness character\")\n+            }\n+        }\n+    }\n+}\n+\n fn item_sort(item: rbml::Doc) -> Option<char> {\n     reader::tagged_docs(item, tag_item_trait_item_sort).nth(0).map(|doc| {\n         doc.as_str_slice().as_bytes()[0] as char\n@@ -976,6 +989,7 @@ pub fn get_impl_or_trait_item<'tcx>(intr: Rc<IdentInterner>,\n \n     let name = item_name(&intr, item_doc);\n     let vis = item_visibility(item_doc);\n+    let defaultness = item_defaultness(item_doc);\n \n     match item_sort(item_doc) {\n         sort @ Some('C') | sort @ Some('c') => {\n@@ -984,6 +998,7 @@ pub fn get_impl_or_trait_item<'tcx>(intr: Rc<IdentInterner>,\n                 name: name,\n                 ty: ty,\n                 vis: vis,\n+                defaultness: defaultness,\n                 def_id: def_id,\n                 container: container,\n                 has_value: sort == Some('C')\n@@ -1007,6 +1022,7 @@ pub fn get_impl_or_trait_item<'tcx>(intr: Rc<IdentInterner>,\n                                                         fty,\n                                                         explicit_self,\n                                                         vis,\n+                                                        defaultness,\n                                                         def_id,\n                                                         container)))\n         }\n@@ -1016,6 +1032,7 @@ pub fn get_impl_or_trait_item<'tcx>(intr: Rc<IdentInterner>,\n                 name: name,\n                 ty: ty,\n                 vis: vis,\n+                defaultness: defaultness,\n                 def_id: def_id,\n                 container: container,\n             }))"}, {"sha": "d08cde2df1c0454b91eb09ac70c0c41cb86668e2", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/991f32a6cae575755a6991f594da377e593c94f3/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/991f32a6cae575755a6991f594da377e593c94f3/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=991f32a6cae575755a6991f594da377e593c94f3", "patch": "@@ -451,6 +451,14 @@ fn encode_constness(rbml_w: &mut Encoder, constness: hir::Constness) {\n     rbml_w.end_tag();\n }\n \n+fn encode_defaultness(rbml_w: &mut Encoder, defaultness: hir::Defaultness) {\n+    let ch = match defaultness {\n+        hir::Defaultness::Default => 'd',\n+        hir::Defaultness::Final => 'f',\n+    };\n+    rbml_w.wr_tagged_u8(tag_items_data_item_defaultness, ch as u8);\n+}\n+\n fn encode_explicit_self(rbml_w: &mut Encoder,\n                         explicit_self: &ty::ExplicitSelfCategory) {\n     let tag = tag_item_trait_method_explicit_self;\n@@ -674,6 +682,7 @@ fn encode_info_for_associated_const<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n \n     if let Some(ii) = impl_item_opt {\n         encode_attributes(rbml_w, &ii.attrs);\n+        encode_defaultness(rbml_w, ii.defaultness);\n         encode_inlined_item(ecx,\n                             rbml_w,\n                             InlinedItemRef::ImplItem(ecx.tcx.map.local_def_id(parent_id),\n@@ -725,6 +734,7 @@ fn encode_info_for_method<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n                                                              impl_item));\n             }\n             encode_constness(rbml_w, sig.constness);\n+            encode_defaultness(rbml_w, impl_item.defaultness);\n             if !any_types {\n                 let m_id = ecx.local_id(m.def_id);\n                 encode_symbol(ecx, rbml_w, m_id);\n@@ -767,6 +777,7 @@ fn encode_info_for_associated_type<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n \n     if let Some(ii) = impl_item_opt {\n         encode_attributes(rbml_w, &ii.attrs);\n+        encode_defaultness(rbml_w, ii.defaultness);\n     } else {\n         encode_predicates(rbml_w, ecx, index,\n                           &ecx.tcx.lookup_predicates(associated_type.def_id),"}, {"sha": "69b84784eb61489a2b7f56f043af83777781fca6", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/991f32a6cae575755a6991f594da377e593c94f3/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/991f32a6cae575755a6991f594da377e593c94f3/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=991f32a6cae575755a6991f594da377e593c94f3", "patch": "@@ -533,6 +533,7 @@ fn convert_method<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                             id: ast::NodeId,\n                             vis: hir::Visibility,\n                             sig: &hir::MethodSig,\n+                            defaultness: hir::Defaultness,\n                             untransformed_rcvr_ty: Ty<'tcx>,\n                             rcvr_ty_generics: &ty::Generics<'tcx>,\n                             rcvr_ty_predicates: &ty::GenericPredicates<'tcx>) {\n@@ -554,6 +555,7 @@ fn convert_method<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                                     fty,\n                                     explicit_self_category,\n                                     vis,\n+                                    defaultness,\n                                     def_id,\n                                     container);\n \n@@ -600,6 +602,7 @@ fn convert_associated_const<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                                       name: ast::Name,\n                                       id: ast::NodeId,\n                                       vis: hir::Visibility,\n+                                      defaultness: hir::Defaultness,\n                                       ty: ty::Ty<'tcx>,\n                                       has_value: bool)\n {\n@@ -611,6 +614,7 @@ fn convert_associated_const<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n     let associated_const = Rc::new(ty::AssociatedConst {\n         name: name,\n         vis: vis,\n+        defaultness: defaultness,\n         def_id: ccx.tcx.map.local_def_id(id),\n         container: container,\n         ty: ty,\n@@ -625,11 +629,13 @@ fn convert_associated_type<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                                      name: ast::Name,\n                                      id: ast::NodeId,\n                                      vis: hir::Visibility,\n+                                     defaultness: hir::Defaultness,\n                                      ty: Option<Ty<'tcx>>)\n {\n     let associated_type = Rc::new(ty::AssociatedType {\n         name: name,\n         vis: vis,\n+        defaultness: defaultness,\n         ty: ty,\n         def_id: ccx.tcx.map.local_def_id(id),\n         container: container\n@@ -767,6 +773,7 @@ fn convert_item(ccx: &CrateCtxt, it: &hir::Item) {\n                     convert_associated_const(ccx, ImplContainer(def_id),\n                                              impl_item.name, impl_item.id,\n                                              impl_item.vis.inherit_from(parent_visibility),\n+                                             impl_item.defaultness,\n                                              ty, true /* has_value */);\n                 }\n             }\n@@ -783,7 +790,7 @@ fn convert_item(ccx: &CrateCtxt, it: &hir::Item) {\n \n                     convert_associated_type(ccx, ImplContainer(def_id),\n                                             impl_item.name, impl_item.id, impl_item.vis,\n-                                            Some(typ));\n+                                            impl_item.defaultness, Some(typ));\n                 }\n             }\n \n@@ -797,7 +804,7 @@ fn convert_item(ccx: &CrateCtxt, it: &hir::Item) {\n \n                     convert_method(ccx, ImplContainer(def_id),\n                                    impl_item.name, impl_item.id, method_vis,\n-                                   sig, selfty, &ty_generics, &ty_predicates);\n+                                   sig, impl_item.defaultness, selfty, &ty_generics, &ty_predicates);\n                 }\n             }\n \n@@ -831,6 +838,7 @@ fn convert_item(ccx: &CrateCtxt, it: &hir::Item) {\n                                              trait_item.name,\n                                              trait_item.id,\n                                              hir::Public,\n+                                             hir::Defaultness::Default,\n                                              ty,\n                                              default.is_some())\n                 }\n@@ -848,6 +856,7 @@ fn convert_item(ccx: &CrateCtxt, it: &hir::Item) {\n                                             trait_item.name,\n                                             trait_item.id,\n                                             hir::Public,\n+                                            hir::Defaultness::Default,\n                                             typ);\n                 }\n             }\n@@ -861,6 +870,7 @@ fn convert_item(ccx: &CrateCtxt, it: &hir::Item) {\n                                    trait_item.id,\n                                    hir::Inherited,\n                                    sig,\n+                                   hir::Defaultness::Default\n                                    tcx.mk_self_type(),\n                                    &trait_def.generics,\n                                    &trait_predicates);"}]}