{"sha": "4187560bdf513e959e3dc3d720128c0a87ab9c61", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxODc1NjBiZGY1MTNlOTU5ZTNkYzNkNzIwMTI4YzBhODdhYjljNjE=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-03-22T16:20:25Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-03-27T16:27:21Z"}, "message": "Add comments for new `AdtDef` functions.", "tree": {"sha": "f3cb9d97d5a6b9bc083f34a7f90eafee6f6cf6fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3cb9d97d5a6b9bc083f34a7f90eafee6f6cf6fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4187560bdf513e959e3dc3d720128c0a87ab9c61", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAlybpGkACgkQAXYLT59T\n8VSTYA//UAD8zx+4vCtx4OwENGqhMozqZlapjgNQ/bDn0H3fZn/yzro2cikaO2H3\n0g7EY8BbN3QUwkWtTpu8qUvdv6AaqYCFliz4cCKsbRIEkIAvpwnyLgdTOCvi+BQb\n6aI8N4MM/NFJbcRrb6s42sgZqyb8yffN9fSPuqaUzu+7yCodmVmJ4QhPTYeiaplr\n5+XHIl4hA0pcAaLZqwOGCJ8oQCd2gVjiNkV1w3l3g0TCjUVEFxPur1SZGU349hdj\nGmG0pSIwVQXM2crXtkgS35luzNHbm6aNTS+/QA6gpowAomhGH+OEds0lT0VSMF9b\nq+OsEbDWlsiNSqiEigybtO5k4MoqafXJd+j5hLrq0Ora0J/fM56vD/dEbTWSvbD4\nCzVp5es3spox1pp3gcad4NuQqu8NtEC+TTUxh/5R9lIUjipxretvS5Kh7sC3osaV\nBIBmipcdaCQD2CF7PMk+y1db+hcJ0WyLykHMHjLdMjisjR1kBImbgjhGyqKU9VdM\nNU33nUFl4yUXYZX6kiAVCDw+TnSadSyyV5tfvcdZKAHJgjWAtyMzlXGSTyfzWq6i\nuZ4lg0dSAZtbw1brRG6mchTqHw9qf9iURVrUuM0UAdGESOB9EPpk+yzvxcRprPQA\nSmz6e5rJiYN+rzcRmAbwFE/Ach9F+scZ5H75fOvkWU2uIfj/YUI=\n=r52q\n-----END PGP SIGNATURE-----", "payload": "tree f3cb9d97d5a6b9bc083f34a7f90eafee6f6cf6fc\nparent 46914715e2427e376ee9593b62ff8661caadee93\nauthor David Wood <david@davidtw.co> 1553271625 +0100\ncommitter David Wood <david@davidtw.co> 1553704041 +0100\n\nAdd comments for new `AdtDef` functions.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4187560bdf513e959e3dc3d720128c0a87ab9c61", "html_url": "https://github.com/rust-lang/rust/commit/4187560bdf513e959e3dc3d720128c0a87ab9c61", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4187560bdf513e959e3dc3d720128c0a87ab9c61/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46914715e2427e376ee9593b62ff8661caadee93", "url": "https://api.github.com/repos/rust-lang/rust/commits/46914715e2427e376ee9593b62ff8661caadee93", "html_url": "https://github.com/rust-lang/rust/commit/46914715e2427e376ee9593b62ff8661caadee93"}], "stats": {"total": 5, "additions": 5, "deletions": 0}, "files": [{"sha": "fe3b13d7076900977edcf57be72c8add246c04d1", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4187560bdf513e959e3dc3d720128c0a87ab9c61/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4187560bdf513e959e3dc3d720128c0a87ab9c61/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=4187560bdf513e959e3dc3d720128c0a87ab9c61", "patch": "@@ -2146,6 +2146,7 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n             debug!(\"found non-exhaustive variant list for {:?}\", did);\n             flags = flags | AdtFlags::IS_VARIANT_LIST_NON_EXHAUSTIVE;\n         }\n+\n         flags |= match kind {\n             AdtKind::Enum => AdtFlags::IS_ENUM,\n             AdtKind::Union => AdtFlags::IS_UNION,\n@@ -2299,21 +2300,25 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n             self.variants.iter().all(|v| v.fields.is_empty())\n     }\n \n+    /// Return a `VariantDef` given a variant id.\n     pub fn variant_with_id(&self, vid: DefId) -> &VariantDef {\n         self.variants.iter().find(|v| v.def_id == vid)\n             .expect(\"variant_with_id: unknown variant\")\n     }\n \n+    /// Return a `VariantDef` given a constructor id.\n     pub fn variant_with_ctor_id(&self, cid: DefId) -> &VariantDef {\n         self.variants.iter().find(|v| v.ctor_def_id == Some(cid))\n             .expect(\"variant_with_ctor_id: unknown variant\")\n     }\n \n+    /// Return the index of `VariantDef` given a variant id.\n     pub fn variant_index_with_id(&self, vid: DefId) -> VariantIdx {\n         self.variants.iter_enumerated().find(|(_, v)| v.def_id == vid)\n             .expect(\"variant_index_with_id: unknown variant\").0\n     }\n \n+    /// Return the index of `VariantDef` given a constructor id.\n     pub fn variant_index_with_ctor_id(&self, cid: DefId) -> VariantIdx {\n         self.variants.iter_enumerated().find(|(_, v)| v.ctor_def_id == Some(cid))\n             .expect(\"variant_index_with_ctor_id: unknown variant\").0"}]}