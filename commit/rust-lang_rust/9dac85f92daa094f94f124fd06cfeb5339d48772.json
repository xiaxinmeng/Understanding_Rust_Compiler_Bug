{"sha": "9dac85f92daa094f94f124fd06cfeb5339d48772", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkYWM4NWY5MmRhYTA5NGY5NGYxMjRmZDA2Y2ZlYjUzMzlkNDg3NzI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-08-04T18:48:26Z"}, "committer": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2014-08-12T02:20:10Z"}, "message": "librustc: Add an intrinsic to retrieve the return pointer of a function.\n\nThis is needed for some GC stuff in Servo.", "tree": {"sha": "45465497869bcf25378b43be0b40469c5a526155", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45465497869bcf25378b43be0b40469c5a526155"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9dac85f92daa094f94f124fd06cfeb5339d48772", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9dac85f92daa094f94f124fd06cfeb5339d48772", "html_url": "https://github.com/rust-lang/rust/commit/9dac85f92daa094f94f124fd06cfeb5339d48772", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9dac85f92daa094f94f124fd06cfeb5339d48772/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3028138889d8eb2aaa3dce899d556f8bbf04d13", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3028138889d8eb2aaa3dce899d556f8bbf04d13", "html_url": "https://github.com/rust-lang/rust/commit/d3028138889d8eb2aaa3dce899d556f8bbf04d13"}], "stats": {"total": 51, "additions": 51, "deletions": 0}, "files": [{"sha": "154f2b122ab560239506ff2f727daf475c5fafec", "filename": "src/librustc/middle/trans/intrinsic.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9dac85f92daa094f94f124fd06cfeb5339d48772/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dac85f92daa094f94f124fd06cfeb5339d48772/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs?ref=9dac85f92daa094f94f124fd06cfeb5339d48772", "patch": "@@ -425,6 +425,12 @@ pub fn trans_intrinsic_call<'a>(mut bcx: &'a Block<'a>, node: ast::NodeId,\n             with_overflow_intrinsic(bcx, \"llvm.umul.with.overflow.i64\", ret_ty,\n                                     *llargs.get(0), *llargs.get(1)),\n \n+        (_, \"return_address\") => {\n+            PointerCast(bcx,\n+                        bcx.fcx.llretptr.get().unwrap(),\n+                        Type::i8p(bcx.ccx()))\n+        }\n+\n         // This requires that atomic intrinsics follow a specific naming pattern:\n         // \"atomic_<operation>[_<ordering>]\", and no ordering means SeqCst\n         (_, name) if name.starts_with(\"atomic_\") => {"}, {"sha": "aa38ff68f24e6c901ed3510b14dbf1a7a7fe824f", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9dac85f92daa094f94f124fd06cfeb5339d48772/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dac85f92daa094f94f124fd06cfeb5339d48772/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=9dac85f92daa094f94f124fd06cfeb5339d48772", "patch": "@@ -4986,6 +4986,8 @@ pub fn check_intrinsic_type(ccx: &CrateCtxt, it: &ast::ForeignItem) {\n                 (0, vec!(ty::mk_u64(), ty::mk_u64()),\n                 ty::mk_tup(tcx, vec!(ty::mk_u64(), ty::mk_bool()))),\n \n+            \"return_address\" => (0, vec![], ty::mk_imm_ptr(tcx, ty::mk_u8())),\n+\n             ref other => {\n                 span_err!(tcx.sess, it.span, E0093,\n                     \"unrecognized intrinsic function: `{}`\", *other);"}, {"sha": "a28a79d306bbf2c7725d97b988902f11b44d7737", "filename": "src/test/run-pass/intrinsic-return-address.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/9dac85f92daa094f94f124fd06cfeb5339d48772/src%2Ftest%2Frun-pass%2Fintrinsic-return-address.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dac85f92daa094f94f124fd06cfeb5339d48772/src%2Ftest%2Frun-pass%2Fintrinsic-return-address.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-return-address.rs?ref=9dac85f92daa094f94f124fd06cfeb5339d48772", "patch": "@@ -0,0 +1,43 @@\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(intrinsics)];\n+\n+use std::ptr;\n+\n+struct Point {\n+    x: f32,\n+    y: f32,\n+    z: f32,\n+}\n+\n+extern \"rust-intrinsic\" {\n+    fn return_address() -> *const u8;\n+}\n+\n+fn f(result: &mut uint) -> Point {\n+    unsafe {\n+        *result = return_address() as uint;\n+        Point {\n+            x: 1.0,\n+            y: 2.0,\n+            z: 3.0,\n+        }\n+    }\n+\n+}\n+\n+fn main() {\n+    let mut intrinsic_reported_address = 0;\n+    let pt = f(&mut intrinsic_reported_address);\n+    let actual_address = &pt as *const Point as uint;\n+    assert_eq!(intrinsic_reported_address, actual_address);\n+}\n+"}]}