{"sha": "d4187e6aae855f16651aca4973839aec8c58eb29", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0MTg3ZTZhYWU4NTVmMTY2NTFhY2E0OTczODM5YWVjOGM1OGViMjk=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-06-16T09:50:58Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-06-16T09:50:58Z"}, "message": "Make mini_core_hello_world work on Windows once TLS is supported", "tree": {"sha": "7dcf423981fadf200b3b719366b9189a36647a38", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7dcf423981fadf200b3b719366b9189a36647a38"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4187e6aae855f16651aca4973839aec8c58eb29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4187e6aae855f16651aca4973839aec8c58eb29", "html_url": "https://github.com/rust-lang/rust/commit/d4187e6aae855f16651aca4973839aec8c58eb29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4187e6aae855f16651aca4973839aec8c58eb29/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "282e3055e1f00b53e8653fb037b7f2b31d57545e", "url": "https://api.github.com/repos/rust-lang/rust/commits/282e3055e1f00b53e8653fb037b7f2b31d57545e", "html_url": "https://github.com/rust-lang/rust/commit/282e3055e1f00b53e8653fb037b7f2b31d57545e"}], "stats": {"total": 31, "additions": 16, "deletions": 15}, "files": [{"sha": "ccca19ccf8cca5e4552dff4760217d547650a6b8", "filename": "example/mini_core.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d4187e6aae855f16651aca4973839aec8c58eb29/example%2Fmini_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4187e6aae855f16651aca4973839aec8c58eb29/example%2Fmini_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core.rs?ref=d4187e6aae855f16651aca4973839aec8c58eb29", "patch": "@@ -403,7 +403,7 @@ pub trait FnMut<Args>: FnOnce<Args> {\n #[track_caller]\n pub fn panic(_msg: &str) -> ! {\n     unsafe {\n-        libc::puts(\"Panicking\\n\\0\" as *const str as *const u8);\n+        libc::puts(\"Panicking\\n\\0\" as *const str as *const i8);\n         intrinsics::abort();\n     }\n }\n@@ -502,9 +502,10 @@ pub mod intrinsics {\n }\n \n pub mod libc {\n-    #[link(name = \"c\")]\n+    #[cfg_attr(not(windows), link(name = \"c\"))]\n+    #[cfg_attr(windows, link(name = \"msvcrt\"))]\n     extern \"C\" {\n-        pub fn puts(s: *const u8) -> i32;\n+        pub fn puts(s: *const i8) -> i32;\n         pub fn printf(format: *const i8, ...) -> i32;\n         pub fn malloc(size: usize) -> *mut u8;\n         pub fn free(ptr: *mut u8);"}, {"sha": "12c6638dd92db6ae5e04adff994e0debef90e105", "filename": "example/mini_core_hello_world.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d4187e6aae855f16651aca4973839aec8c58eb29/example%2Fmini_core_hello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4187e6aae855f16651aca4973839aec8c58eb29/example%2Fmini_core_hello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core_hello_world.rs?ref=d4187e6aae855f16651aca4973839aec8c58eb29", "patch": "@@ -12,7 +12,7 @@ extern crate mini_core;\n use mini_core::*;\n use mini_core::libc::*;\n \n-unsafe extern \"C\" fn my_puts(s: *const u8) {\n+unsafe extern \"C\" fn my_puts(s: *const i8) {\n     puts(s);\n }\n \n@@ -37,7 +37,7 @@ trait SomeTrait {\n impl SomeTrait for &'static str {\n     fn object_safe(&self) {\n         unsafe {\n-            puts(*self as *const str as *const u8);\n+            puts(*self as *const str as *const i8);\n         }\n     }\n }\n@@ -52,15 +52,15 @@ struct NoisyDropInner;\n impl Drop for NoisyDrop {\n     fn drop(&mut self) {\n         unsafe {\n-            puts(self.text as *const str as *const u8);\n+            puts(self.text as *const str as *const i8);\n         }\n     }\n }\n \n impl Drop for NoisyDropInner {\n     fn drop(&mut self) {\n         unsafe {\n-            puts(\"Inner got dropped!\\0\" as *const str as *const u8);\n+            puts(\"Inner got dropped!\\0\" as *const str as *const i8);\n         }\n     }\n }\n@@ -82,9 +82,9 @@ fn start<T: Termination + 'static>(\n     argv: *const *const u8,\n ) -> isize {\n     if argc == 3 {\n-        unsafe { puts(*argv); }\n-        unsafe { puts(*((argv as usize + intrinsics::size_of::<*const u8>()) as *const *const u8)); }\n-        unsafe { puts(*((argv as usize + 2 * intrinsics::size_of::<*const u8>()) as *const *const u8)); }\n+        unsafe { puts(*argv as *const i8); }\n+        unsafe { puts(*((argv as usize + intrinsics::size_of::<*const u8>()) as *const *const i8)); }\n+        unsafe { puts(*((argv as usize + 2 * intrinsics::size_of::<*const u8>()) as *const *const i8)); }\n     }\n \n     main().report();\n@@ -154,11 +154,11 @@ fn main() {\n         printf(\"Hello %s\\n\\0\" as *const str as *const i8, \"printf\\0\" as *const str as *const i8);\n \n         let hello: &[u8] = b\"Hello\\0\" as &[u8; 6];\n-        let ptr: *const u8 = hello as *const [u8] as *const u8;\n+        let ptr: *const i8 = hello as *const [u8] as *const i8;\n         puts(ptr);\n \n         let world: Box<&str> = box \"World!\\0\";\n-        puts(*world as *const str as *const u8);\n+        puts(*world as *const str as *const i8);\n         world as Box<dyn SomeTrait>;\n \n         assert_eq!(intrinsics::bitreverse(0b10101000u8), 0b00010101u8);\n@@ -242,13 +242,13 @@ fn main() {\n     assert_eq!(((|()| 42u8) as fn(()) -> u8)(()), 42);\n \n     extern {\n-        #[linkage = \"weak\"]\n+        #[linkage = \"extern_weak\"]\n         static ABC: *const u8;\n     }\n \n     {\n         extern {\n-            #[linkage = \"weak\"]\n+            #[linkage = \"extern_weak\"]\n             static ABC: *const u8;\n         }\n     }\n@@ -351,7 +351,7 @@ fn test_tls() {\n         // TLS of main thread must not have been changed by the other thread.\n         assert_eq!(TLS, 42);\n \n-        puts(\"TLS works!\\n\\0\" as *const str as *const u8);\n+        puts(\"TLS works!\\n\\0\" as *const str as *const i8);\n     }\n }\n "}]}