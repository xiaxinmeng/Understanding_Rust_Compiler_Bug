{"sha": "972c3be6c35c0fa1121c4b497d98e51b4878c7c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3MmMzYmU2YzM1YzBmYTExMjFjNGI0OTdkOThlNTFiNDg3OGM3Yzg=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-10-25T21:19:08Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-10-25T21:25:50Z"}, "message": "Don't cast directly from `&[T; N]` to `*const T`\n\nInstead coerce to `*const [T; N]` and then cast.", "tree": {"sha": "8c7a73ff4c1e8d19fffbcac5eaf200e4182a0d48", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c7a73ff4c1e8d19fffbcac5eaf200e4182a0d48"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/972c3be6c35c0fa1121c4b497d98e51b4878c7c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/972c3be6c35c0fa1121c4b497d98e51b4878c7c8", "html_url": "https://github.com/rust-lang/rust/commit/972c3be6c35c0fa1121c4b497d98e51b4878c7c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/972c3be6c35c0fa1121c4b497d98e51b4878c7c8/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23f890f10202a71168c6424da0cdf94135d3c40c", "url": "https://api.github.com/repos/rust-lang/rust/commits/23f890f10202a71168c6424da0cdf94135d3c40c", "html_url": "https://github.com/rust-lang/rust/commit/23f890f10202a71168c6424da0cdf94135d3c40c"}], "stats": {"total": 187, "additions": 131, "deletions": 56}, "files": [{"sha": "1d5ed4273abf68393c912d42141aa9253a87d01a", "filename": "src/librustc/ty/adjustment.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/972c3be6c35c0fa1121c4b497d98e51b4878c7c8/src%2Flibrustc%2Fty%2Fadjustment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/972c3be6c35c0fa1121c4b497d98e51b4878c7c8/src%2Flibrustc%2Fty%2Fadjustment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fadjustment.rs?ref=972c3be6c35c0fa1121c4b497d98e51b4878c7c8", "patch": "@@ -20,6 +20,9 @@ pub enum PointerCast {\n     /// Go from a mut raw pointer to a const raw pointer.\n     MutToConstPointer,\n \n+    /// Go from `*const [T; N]` to `*const T`\n+    ArrayToPointer,\n+\n     /// Unsize a pointer/reference value, e.g., `&[T; n]` to\n     /// `&[T]`. Note that the source could be a thin or fat pointer.\n     /// This will do things like convert thin pointers to fat"}, {"sha": "981fdf2298419822e543cf51e3fb48deb61a30aa", "filename": "src/librustc_codegen_ssa/mir/rvalue.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/972c3be6c35c0fa1121c4b497d98e51b4878c7c8/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/972c3be6c35c0fa1121c4b497d98e51b4878c7c8/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs?ref=972c3be6c35c0fa1121c4b497d98e51b4878c7c8", "patch": "@@ -269,6 +269,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                         }\n                     }\n                     mir::CastKind::Pointer(PointerCast::MutToConstPointer)\n+                    | mir::CastKind::Pointer(PointerCast::ArrayToPointer)\n                     | mir::CastKind::Misc => {\n                         assert!(bx.cx().is_backend_immediate(cast));\n                         let ll_t_out = bx.cx().immediate_backend_type(cast);"}, {"sha": "2a6ee880e0d95ca041d370a843c4253f99692ed6", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 108, "deletions": 54, "changes": 162, "blob_url": "https://github.com/rust-lang/rust/blob/972c3be6c35c0fa1121c4b497d98e51b4878c7c8/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/972c3be6c35c0fa1121c4b497d98e51b4878c7c8/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=972c3be6c35c0fa1121c4b497d98e51b4878c7c8", "patch": "@@ -35,6 +35,7 @@ use rustc::traits::query::type_op::custom::CustomTypeOp;\n use rustc::traits::query::{Fallible, NoSolution};\n use rustc::traits::{self, ObligationCause, PredicateObligations};\n use rustc::ty::adjustment::{PointerCast};\n+use rustc::ty::cast::CastTy;\n use rustc::ty::fold::TypeFoldable;\n use rustc::ty::subst::{Subst, SubstsRef, GenericArgKind, UserSubsts};\n use rustc::ty::{\n@@ -2169,72 +2170,125 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                                 ty_from,\n                                 ty_to,\n                                 terr\n-                            )\n+                            );\n                         }\n                     }\n \n-                    CastKind::Misc => {\n-                        if let ty::Ref(_, mut ty_from, _) = op.ty(body, tcx).kind {\n-                            let (mut ty_to, mutability) = if let ty::RawPtr(ty::TypeAndMut {\n-                                ty: ty_to,\n-                                mutbl,\n-                            }) = ty.kind {\n-                                (ty_to, mutbl)\n-                            } else {\n+                    CastKind::Pointer(PointerCast::ArrayToPointer)  => {\n+                        let ty_from = op.ty(body, tcx);\n+\n+                        let opt_ty_elem = match ty_from.kind {\n+                            ty::RawPtr(\n+                                ty::TypeAndMut { mutbl: hir::MutImmutable, ty: array_ty }\n+                            ) => {\n+                                match array_ty.kind {\n+                                    ty::Array(ty_elem, _) => Some(ty_elem),\n+                                    _ => None,\n+                                }\n+                            }\n+                            _ => None,\n+                        };\n+\n+                        let ty_elem = match opt_ty_elem {\n+                            Some(ty_elem) => ty_elem,\n+                            None => {\n                                 span_mirbug!(\n                                     self,\n                                     rvalue,\n-                                    \"invalid cast types {:?} -> {:?}\",\n-                                    op.ty(body, tcx),\n+                                    \"ArrayToPointer cast from unexpected type {:?}\",\n+                                    ty_from,\n+                                );\n+                                return;\n+                            }\n+                        };\n+\n+                        let ty_to = match ty.kind {\n+                            ty::RawPtr(\n+                                ty::TypeAndMut { mutbl: hir::MutImmutable, ty: ty_to }\n+                            ) => {\n+                                ty_to\n+                            }\n+                            _ => {\n+                                span_mirbug!(\n+                                    self,\n+                                    rvalue,\n+                                    \"ArrayToPointer cast to unexpected type {:?}\",\n                                     ty,\n                                 );\n                                 return;\n-                            };\n-\n-                            // Handle the direct cast from `&[T; N]` to `*const T` by unwrapping\n-                            // any array we find.\n-                            while let ty::Array(ty_elem_from, _) = ty_from.kind {\n-                                ty_from = ty_elem_from;\n-                                if let ty::Array(ty_elem_to, _) = ty_to.kind {\n-                                    ty_to = ty_elem_to;\n-                                } else {\n-                                    break;\n-                                }\n                             }\n+                        };\n \n-                            if let hir::MutMutable = mutability {\n-                                if let Err(terr) = self.eq_types(\n-                                    ty_from,\n-                                    ty_to,\n-                                    location.to_locations(),\n-                                    ConstraintCategory::Cast,\n-                                ) {\n-                                    span_mirbug!(\n-                                        self,\n-                                        rvalue,\n-                                        \"equating {:?} with {:?} yields {:?}\",\n-                                        ty_from,\n-                                        ty_to,\n-                                        terr\n-                                    )\n-                                }\n-                            } else {\n-                                if let Err(terr) = self.sub_types(\n-                                    ty_from,\n-                                    ty_to,\n-                                    location.to_locations(),\n-                                    ConstraintCategory::Cast,\n-                                ) {\n-                                    span_mirbug!(\n-                                        self,\n-                                        rvalue,\n-                                        \"relating {:?} with {:?} yields {:?}\",\n-                                        ty_from,\n-                                        ty_to,\n-                                        terr\n-                                    )\n+                        if let Err(terr) = self.sub_types(\n+                            ty_elem,\n+                            ty_to,\n+                            location.to_locations(),\n+                            ConstraintCategory::Cast,\n+                        ) {\n+                            span_mirbug!(\n+                                self,\n+                                rvalue,\n+                                \"relating {:?} with {:?} yields {:?}\",\n+                                ty_elem,\n+                                ty_to,\n+                                terr\n+                            )\n+                        }\n+                    }\n+\n+                    CastKind::Misc => {\n+                        let ty_from = op.ty(body, tcx);\n+                        let cast_ty_from = CastTy::from_ty(ty_from);\n+                        let cast_ty_to = CastTy::from_ty(ty);\n+                        match (cast_ty_from, cast_ty_to) {\n+                            (Some(CastTy::RPtr(ref_tm)), Some(CastTy::Ptr(ptr_tm))) => {\n+                                if let hir::MutMutable = ptr_tm.mutbl {\n+                                    if let Err(terr) = self.eq_types(\n+                                        ref_tm.ty,\n+                                        ptr_tm.ty,\n+                                        location.to_locations(),\n+                                        ConstraintCategory::Cast,\n+                                    ) {\n+                                        span_mirbug!(\n+                                            self,\n+                                            rvalue,\n+                                            \"equating {:?} with {:?} yields {:?}\",\n+                                            ref_tm.ty,\n+                                            ptr_tm.ty,\n+                                            terr\n+                                        )\n+                                    }\n+                                } else {\n+                                    if let Err(terr) = self.sub_types(\n+                                        ref_tm.ty,\n+                                        ptr_tm.ty,\n+                                        location.to_locations(),\n+                                        ConstraintCategory::Cast,\n+                                    ) {\n+                                        span_mirbug!(\n+                                            self,\n+                                            rvalue,\n+                                            \"relating {:?} with {:?} yields {:?}\",\n+                                            ref_tm.ty,\n+                                            ptr_tm.ty,\n+                                            terr\n+                                        )\n+                                    }\n                                 }\n-                            }\n+                            },\n+                            (None, _)\n+                            | (_, None)\n+                            | (_, Some(CastTy::FnPtr))\n+                            | (Some(CastTy::Float), Some(CastTy::Ptr(_)))\n+                            | (Some(CastTy::Ptr(_)), Some(CastTy::Float))\n+                            | (Some(CastTy::FnPtr), Some(CastTy::Float)) => span_mirbug!(\n+                                self,\n+                                rvalue,\n+                                \"Invalid cast {:?} -> {:?}\",\n+                                ty_from,\n+                                ty,\n+                            ),\n+                            _ => (),\n                         }\n                     }\n                 }"}, {"sha": "fbdc4ceeeede853a3a1cf4de0ef889529d04ce14", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/972c3be6c35c0fa1121c4b497d98e51b4878c7c8/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/972c3be6c35c0fa1121c4b497d98e51b4878c7c8/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=972c3be6c35c0fa1121c4b497d98e51b4878c7c8", "patch": "@@ -628,6 +628,11 @@ fn make_mirror_unadjusted<'a, 'tcx>(\n             let cast = if cx.tables().is_coercion_cast(source.hir_id) {\n                 // Convert the lexpr to a vexpr.\n                 ExprKind::Use { source: source.to_ref() }\n+            } else if cx.tables().expr_ty(source).is_region_ptr() {\n+                // Special cased so that we can type check that the element\n+                // type of the source matches the pointed to type of the\n+                // destination.\n+                ExprKind::Pointer { source: source.to_ref(), cast: PointerCast::ArrayToPointer }\n             } else {\n                 // check whether this is casting an enum variant discriminant\n                 // to prevent cycles, we refer to the discriminant initializer"}, {"sha": "086f092941208ee58acbc4935446c4547edd726f", "filename": "src/librustc_mir/interpret/cast.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/972c3be6c35c0fa1121c4b497d98e51b4878c7c8/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/972c3be6c35c0fa1121c4b497d98e51b4878c7c8/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fcast.rs?ref=972c3be6c35c0fa1121c4b497d98e51b4878c7c8", "patch": "@@ -26,7 +26,9 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 self.unsize_into(src, dest)?;\n             }\n \n-            Misc | Pointer(PointerCast::MutToConstPointer) => {\n+            Misc\n+            | Pointer(PointerCast::MutToConstPointer)\n+            | Pointer(PointerCast::ArrayToPointer) => {\n                 let src = self.read_immediate(src)?;\n                 let res = self.cast_immediate(src, dest.layout)?;\n                 self.write_immediate(res, dest)?;"}, {"sha": "2c968d2a38e9e86b1c0e711fee332de7147f824d", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/972c3be6c35c0fa1121c4b497d98e51b4878c7c8/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/972c3be6c35c0fa1121c4b497d98e51b4878c7c8/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=972c3be6c35c0fa1121c4b497d98e51b4878c7c8", "patch": "@@ -150,7 +150,8 @@ fn check_rvalue(\n                 _ => check_operand(tcx, operand, span, def_id, body),\n             }\n         }\n-        Rvalue::Cast(CastKind::Pointer(PointerCast::MutToConstPointer), operand, _) => {\n+        Rvalue::Cast(CastKind::Pointer(PointerCast::MutToConstPointer), operand, _)\n+        | Rvalue::Cast(CastKind::Pointer(PointerCast::ArrayToPointer), operand, _) => {\n             check_operand(tcx, operand, span, def_id, body)\n         }\n         Rvalue::Cast(CastKind::Pointer(PointerCast::UnsafeFnPointer), _, _) |"}, {"sha": "dc088586198a4a98791e198dd6e565e57f069d88", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/972c3be6c35c0fa1121c4b497d98e51b4878c7c8/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/972c3be6c35c0fa1121c4b497d98e51b4878c7c8/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=972c3be6c35c0fa1121c4b497d98e51b4878c7c8", "patch": "@@ -639,6 +639,15 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                 // need to special-case obtaining a raw pointer\n                 // from a region pointer to a vector.\n \n+                // Coerce to a raw pointer so that we generate AddressOf in MIR.\n+                let array_ptr_type = fcx.tcx.mk_ptr(m_expr);\n+                fcx.try_coerce(self.expr, self.expr_ty, array_ptr_type, AllowTwoPhase::No)\n+                    .unwrap_or_else(|_| bug!(\n+                        \"could not cast from reference to array to pointer to array ({:?} to {:?})\",\n+                        self.expr_ty,\n+                        array_ptr_type,\n+                    ));\n+\n                 // this will report a type mismatch if needed\n                 fcx.demand_eqtype(self.span, ety, m_cast.ty);\n                 return Ok(CastKind::ArrayPtrCast);"}]}