{"sha": "00a52a2be36fd80e8430a524e8c0dad7b249af41", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwYTUyYTJiZTM2ZmQ4MGU4NDMwYTUyNGU4YzBkYWQ3YjI0OWFmNDE=", "commit": {"author": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2018-03-14T04:03:33Z"}, "committer": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2018-03-14T04:44:52Z"}, "message": "Fix fallback note", "tree": {"sha": "187342c4be9058d92e05e83535b69f6c818574bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/187342c4be9058d92e05e83535b69f6c818574bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00a52a2be36fd80e8430a524e8c0dad7b249af41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00a52a2be36fd80e8430a524e8c0dad7b249af41", "html_url": "https://github.com/rust-lang/rust/commit/00a52a2be36fd80e8430a524e8c0dad7b249af41", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00a52a2be36fd80e8430a524e8c0dad7b249af41/comments", "author": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "committer": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b32211e620a47b2c14dd313f0c3aa91e78f7361", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b32211e620a47b2c14dd313f0c3aa91e78f7361", "html_url": "https://github.com/rust-lang/rust/commit/5b32211e620a47b2c14dd313f0c3aa91e78f7361"}], "stats": {"total": 19, "additions": 10, "deletions": 9}, "files": [{"sha": "206a4bf668928f36857b335da18931ef570972d6", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/00a52a2be36fd80e8430a524e8c0dad7b249af41/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00a52a2be36fd80e8430a524e8c0dad7b249af41/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=00a52a2be36fd80e8430a524e8c0dad7b249af41", "patch": "@@ -539,7 +539,6 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                                   fallback_has_occurred: bool)\n     {\n         let span = obligation.cause.span;\n-        let _ = fallback_has_occurred;\n \n         let mut err = match *error {\n             SelectionError::Unimplemented => {\n@@ -623,9 +622,13 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                             self.report_similar_impl_candidates(impl_candidates, &mut err);\n                         }\n \n-                        // If this error is due to `!: !Trait` but `(): Trait` then add a note\n-                        // about the fallback behaviour change.\n-                        if trait_predicate.skip_binder().self_ty().is_never() {\n+                        // If this error is due to `!: Trait` not implemented but `(): Trait` is\n+                        // implemented, and fallback has occured, then it could be due to a\n+                        // variable that used to fallback to `()` now falling back to `!`. Issue a\n+                        // note informing about the change in behaviour.\n+                        if trait_predicate.skip_binder().self_ty().is_never()\n+                            && fallback_has_occurred\n+                        {\n                             let predicate = trait_predicate.map_bound(|mut trait_pred| {\n                                 {\n                                     let trait_ref = &mut trait_pred.trait_ref;\n@@ -638,13 +641,11 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                                 trait_pred\n                             });\n                             let unit_obligation = Obligation {\n-                                cause: obligation.cause.clone(),\n-                                param_env: obligation.param_env,\n-                                recursion_depth: obligation.recursion_depth,\n-                                predicate,\n+                                predicate: ty::Predicate::Trait(predicate),\n+                                .. obligation.clone()\n                             };\n                             let mut selcx = SelectionContext::new(self);\n-                            if let Ok(Some(..)) = selcx.select(&unit_obligation) {\n+                            if selcx.evaluate_obligation(&unit_obligation) {\n                                 err.note(\"the trait is implemented for `()`. \\\n                                          Possibly this error has been caused by changes to \\\n                                          Rust's type-inference algorithm \\"}]}