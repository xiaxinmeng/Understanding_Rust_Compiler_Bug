{"sha": "8ec47261e193b1f983b898a0d985b85e7fcb0668", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlYzQ3MjYxZTE5M2IxZjk4M2I4OThhMGQ5ODViODVlN2ZjYjA2Njg=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2016-07-26T13:18:44Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2016-07-31T10:47:52Z"}, "message": "Use monotonic time with condition variables.\n\nConfigure condition variables to use monotonic time using\npthread_condattr_setclock on systems where this is possible.\nThis fixes the issue when thread waiting on condition variable is\nwoken up too late when system time is moved backwards.", "tree": {"sha": "5c4050b222e50ec613dd7a840dc3aa7db32ea5aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c4050b222e50ec613dd7a840dc3aa7db32ea5aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ec47261e193b1f983b898a0d985b85e7fcb0668", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ec47261e193b1f983b898a0d985b85e7fcb0668", "html_url": "https://github.com/rust-lang/rust/commit/8ec47261e193b1f983b898a0d985b85e7fcb0668", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ec47261e193b1f983b898a0d985b85e7fcb0668/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "724f811794bf30141922eb9ff26cd9ce7febe64e", "url": "https://api.github.com/repos/rust-lang/rust/commits/724f811794bf30141922eb9ff26cd9ce7febe64e", "html_url": "https://github.com/rust-lang/rust/commit/724f811794bf30141922eb9ff26cd9ce7febe64e"}], "stats": {"total": 83, "additions": 74, "deletions": 9}, "files": [{"sha": "ca1a9905ebe67c014a8da722fbe458299c26018a", "filename": "src/libstd/sync/condvar.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8ec47261e193b1f983b898a0d985b85e7fcb0668/src%2Flibstd%2Fsync%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec47261e193b1f983b898a0d985b85e7fcb0668/src%2Flibstd%2Fsync%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fcondvar.rs?ref=8ec47261e193b1f983b898a0d985b85e7fcb0668", "patch": "@@ -82,10 +82,14 @@ impl Condvar {\n     /// notified.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn new() -> Condvar {\n-        Condvar {\n+        let mut c = Condvar {\n             inner: box sys::Condvar::new(),\n             mutex: AtomicUsize::new(0),\n+        };\n+        unsafe {\n+            c.inner.init();\n         }\n+        c\n     }\n \n     /// Blocks the current thread until this condition variable receives a"}, {"sha": "b6f29dd5fc3d3184f6a528fcb36f70b64b3f1051", "filename": "src/libstd/sys/common/condvar.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8ec47261e193b1f983b898a0d985b85e7fcb0668/src%2Flibstd%2Fsys%2Fcommon%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec47261e193b1f983b898a0d985b85e7fcb0668/src%2Flibstd%2Fsys%2Fcommon%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fcondvar.rs?ref=8ec47261e193b1f983b898a0d985b85e7fcb0668", "patch": "@@ -27,6 +27,13 @@ impl Condvar {\n     /// first used with any of the functions below.\n     pub const fn new() -> Condvar { Condvar(imp::Condvar::new()) }\n \n+    /// Prepares the condition variable for use.\n+    ///\n+    /// This should be called once the condition variable is at a stable memory\n+    /// address.\n+    #[inline]\n+    pub unsafe fn init(&mut self) { self.0.init() }\n+\n     /// Signals one waiter on this condition variable to wake up.\n     #[inline]\n     pub unsafe fn notify_one(&self) { self.0.notify_one() }"}, {"sha": "725a071a4f9fe76410601fdfd2f3a487af9042ee", "filename": "src/libstd/sys/unix/condvar.rs", "status": "modified", "additions": 59, "deletions": 8, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/8ec47261e193b1f983b898a0d985b85e7fcb0668/src%2Flibstd%2Fsys%2Funix%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec47261e193b1f983b898a0d985b85e7fcb0668/src%2Flibstd%2Fsys%2Funix%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fcondvar.rs?ref=8ec47261e193b1f983b898a0d985b85e7fcb0668", "patch": "@@ -10,22 +10,43 @@\n \n use cell::UnsafeCell;\n use libc;\n-use ptr;\n use sys::mutex::{self, Mutex};\n-use time::{Instant, Duration};\n+use time::Duration;\n \n pub struct Condvar { inner: UnsafeCell<libc::pthread_cond_t> }\n \n unsafe impl Send for Condvar {}\n unsafe impl Sync for Condvar {}\n \n+const TIMESPEC_MAX: libc::timespec = libc::timespec {\n+    tv_sec: <libc::time_t>::max_value(),\n+    tv_nsec: 1_000_000_000 - 1,\n+};\n+\n impl Condvar {\n     pub const fn new() -> Condvar {\n         // Might be moved and address is changing it is better to avoid\n         // initialization of potentially opaque OS data before it landed\n         Condvar { inner: UnsafeCell::new(libc::PTHREAD_COND_INITIALIZER) }\n     }\n \n+    #[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n+    pub unsafe fn init(&mut self) {}\n+\n+    #[cfg(not(any(target_os = \"macos\", target_os = \"ios\")))]\n+    pub unsafe fn init(&mut self) {\n+        use mem;\n+        let mut attr: libc::pthread_condattr_t = mem::uninitialized();\n+        let r = libc::pthread_condattr_init(&mut attr);\n+        assert_eq!(r, 0);\n+        let r = libc::pthread_condattr_setclock(&mut attr, libc::CLOCK_MONOTONIC);\n+        assert_eq!(r, 0);\n+        let r = libc::pthread_cond_init(self.inner.get(), &attr);\n+        assert_eq!(r, 0);\n+        let r = libc::pthread_condattr_destroy(&mut attr);\n+        assert_eq!(r, 0);\n+    }\n+\n     #[inline]\n     pub unsafe fn notify_one(&self) {\n         let r = libc::pthread_cond_signal(self.inner.get());\n@@ -44,10 +65,45 @@ impl Condvar {\n         debug_assert_eq!(r, 0);\n     }\n \n+    // This implementation is used on systems that support pthread_condattr_setclock\n+    // where we configure condition variable to use monotonic clock (instead of\n+    // default system clock). This approach avoids all problems that result\n+    // from changes made to the system time.\n+    #[cfg(not(any(target_os = \"macos\", target_os = \"ios\")))]\n+    pub unsafe fn wait_timeout(&self, mutex: &Mutex, dur: Duration) -> bool {\n+        use mem;\n+\n+        let mut now: libc::timespec = mem::zeroed();\n+        let r = libc::clock_gettime(libc::CLOCK_MONOTONIC, &mut now);\n+        assert_eq!(r, 0);\n+\n+        // Nanosecond calculations can't overflow because both values are below 1e9.\n+        let nsec = dur.subsec_nanos() as libc::c_long + now.tv_nsec as libc::c_long;\n+        // FIXME: Casting u64 into time_t could truncate the value.\n+        let sec = (dur.as_secs() as libc::time_t)\n+            .checked_add((nsec / 1_000_000_000) as libc::time_t)\n+            .and_then(|s| s.checked_add(now.tv_sec));\n+        let nsec = nsec % 1_000_000_000;\n+\n+        let timeout = sec.map(|s| {\n+            libc::timespec { tv_sec: s, tv_nsec: nsec }\n+        }).unwrap_or(TIMESPEC_MAX);\n+\n+        let r = libc::pthread_cond_timedwait(self.inner.get(), mutex::raw(mutex),\n+                                            &timeout);\n+        assert!(r == libc::ETIMEDOUT || r == 0);\n+        r == 0\n+    }\n+\n+\n     // This implementation is modeled after libcxx's condition_variable\n     // https://github.com/llvm-mirror/libcxx/blob/release_35/src/condition_variable.cpp#L46\n     // https://github.com/llvm-mirror/libcxx/blob/release_35/include/__mutex_base#L367\n+    #[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n     pub unsafe fn wait_timeout(&self, mutex: &Mutex, dur: Duration) -> bool {\n+        use ptr;\n+        use time::Instant;\n+\n         // First, figure out what time it currently is, in both system and\n         // stable time.  pthread_cond_timedwait uses system time, but we want to\n         // report timeout based on stable time.\n@@ -66,12 +122,7 @@ impl Condvar {\n             s.checked_add(seconds)\n         }).map(|s| {\n             libc::timespec { tv_sec: s, tv_nsec: nsec }\n-        }).unwrap_or_else(|| {\n-            libc::timespec {\n-                tv_sec: <libc::time_t>::max_value(),\n-                tv_nsec: 1_000_000_000 - 1,\n-            }\n-        });\n+        }).unwrap_or(TIMESPEC_MAX);\n \n         // And wait!\n         let r = libc::pthread_cond_timedwait(self.inner.get(), mutex::raw(mutex),"}, {"sha": "d708b327c55cb3e687a689e75d89235f93da004e", "filename": "src/libstd/sys/windows/condvar.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ec47261e193b1f983b898a0d985b85e7fcb0668/src%2Flibstd%2Fsys%2Fwindows%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec47261e193b1f983b898a0d985b85e7fcb0668/src%2Flibstd%2Fsys%2Fwindows%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fcondvar.rs?ref=8ec47261e193b1f983b898a0d985b85e7fcb0668", "patch": "@@ -24,6 +24,9 @@ impl Condvar {\n         Condvar { inner: UnsafeCell::new(c::CONDITION_VARIABLE_INIT) }\n     }\n \n+    #[inline]\n+    pub unsafe fn init(&mut self) {}\n+\n     #[inline]\n     pub unsafe fn wait(&self, mutex: &Mutex) {\n         let r = c::SleepConditionVariableSRW(self.inner.get(),"}]}