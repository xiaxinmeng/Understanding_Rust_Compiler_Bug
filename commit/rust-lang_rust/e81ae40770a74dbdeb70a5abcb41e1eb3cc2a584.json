{"sha": "e81ae40770a74dbdeb70a5abcb41e1eb3cc2a584", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4MWFlNDA3NzBhNzRkYmRlYjcwYTVhYmNiNDFlMWViM2NjMmE1ODQ=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-01-27T00:29:30Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-02-03T11:33:54Z"}, "message": "Try to only suggest implementable traits for method calls.\n\nThat is, when offering suggestions for unresolved method calls, avoid\nsuggesting traits for which implementing the trait for the receiver type\neither makes little sense (e.g. type errors, or sugared unboxed\nclosures), or violates coherence.\n\nThe latter is approximated by ensuring that at least one of `{receiver\ntype, trait}` is local. This isn't precisely correct due to\nmultidispatch, but the error messages one encounters in such situation\nare useless more often than not; it is better to be conservative and\nmiss some cases, than have overly many false positives (e.g. writing\n`some_slice.map(|x| ...)` uselessly suggested that one should implement\n`IteratorExt` for `&[T]`, while the correct fix is to call `.iter()`).\n\nCloses #21420.", "tree": {"sha": "307ec6b51c91c58f47d846654a0fb5e94c8d7766", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/307ec6b51c91c58f47d846654a0fb5e94c8d7766"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e81ae40770a74dbdeb70a5abcb41e1eb3cc2a584", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e81ae40770a74dbdeb70a5abcb41e1eb3cc2a584", "html_url": "https://github.com/rust-lang/rust/commit/e81ae40770a74dbdeb70a5abcb41e1eb3cc2a584", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e81ae40770a74dbdeb70a5abcb41e1eb3cc2a584/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d00c545ede609b9d43fdf9f252c15da5a66dac7", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d00c545ede609b9d43fdf9f252c15da5a66dac7", "html_url": "https://github.com/rust-lang/rust/commit/1d00c545ede609b9d43fdf9f252c15da5a66dac7"}], "stats": {"total": 145, "additions": 138, "deletions": 7}, "files": [{"sha": "6f64374ea4ac04650629c2232b4569c4a67f28c3", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 57, "deletions": 3, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/e81ae40770a74dbdeb70a5abcb41e1eb3cc2a584/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e81ae40770a74dbdeb70a5abcb41e1eb3cc2a584/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=e81ae40770a74dbdeb70a5abcb41e1eb3cc2a584", "patch": "@@ -34,6 +34,11 @@ pub fn report_error<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                               method_name: ast::Name,\n                               error: MethodError)\n {\n+    // avoid suggestions when we don't know what's going on.\n+    if ty::type_is_error(rcvr_ty) {\n+        return\n+    }\n+\n     match error {\n         MethodError::NoMatch(static_sources, out_of_scope_traits) => {\n             let cx = fcx.tcx();\n@@ -135,7 +140,7 @@ pub type AllTraitsVec = Vec<TraitInfo>;\n \n fn suggest_traits_to_import<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                                       span: Span,\n-                                      _rcvr_ty: Ty<'tcx>,\n+                                      rcvr_ty: Ty<'tcx>,\n                                       method_name: ast::Name,\n                                       valid_out_of_scope_traits: Vec<ast::DefId>)\n {\n@@ -165,16 +170,32 @@ fn suggest_traits_to_import<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n         return\n     }\n \n-    // there's no implemented traits, so lets suggest some traits to implement\n+    let type_is_local = type_derefs_to_local(fcx, span, rcvr_ty);\n+\n+    // there's no implemented traits, so lets suggest some traits to\n+    // implement, by finding ones that have the method name, and are\n+    // legal to implement.\n     let mut candidates = all_traits(fcx.ccx)\n-        .filter(|info| trait_method(tcx, info.def_id, method_name).is_some())\n+        .filter(|info| {\n+            // we approximate the coherence rules to only suggest\n+            // traits that are legal to implement by requiring that\n+            // either the type or trait is local. Multidispatch means\n+            // this isn't perfect (that is, there are cases when\n+            // implementing a trait would be legal but is rejected\n+            // here).\n+            (type_is_local || ast_util::is_local(info.def_id))\n+                && trait_method(tcx, info.def_id, method_name).is_some()\n+        })\n         .collect::<Vec<_>>();\n \n     if candidates.len() > 0 {\n         // sort from most relevant to least relevant\n         candidates.sort_by(|a, b| a.cmp(b).reverse());\n         candidates.dedup();\n \n+        // FIXME #21673 this help message could be tuned to the case\n+        // of a type parameter: suggest adding a trait bound rather\n+        // than implementing.\n         let msg = format!(\n             \"methods from traits can only be called if the trait is implemented and in scope; \\\n              the following {traits_define} a method `{name}`, \\\n@@ -194,6 +215,39 @@ fn suggest_traits_to_import<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n     }\n }\n \n+/// Checks whether there is a local type somewhere in the chain of\n+/// autoderefs of `rcvr_ty`.\n+fn type_derefs_to_local<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n+                                  span: Span,\n+                                  rcvr_ty: Ty<'tcx>) -> bool {\n+    check::autoderef(fcx, span, rcvr_ty, None,\n+                     check::UnresolvedTypeAction::Ignore, check::NoPreference,\n+                     |&: ty, _| {\n+        let is_local = match ty.sty {\n+            ty::ty_enum(did, _) | ty::ty_struct(did, _) => ast_util::is_local(did),\n+\n+            ty::ty_trait(ref tr) => ast_util::is_local(tr.principal_def_id()),\n+\n+            ty::ty_param(_) => true,\n+\n+            // the user cannot implement traits for unboxed closures, so\n+            // there's no point suggesting anything at all, local or not.\n+            ty::ty_closure(..) => return Some(false),\n+\n+            // everything else (primitive types etc.) is effectively\n+            // non-local (there are \"edge\" cases, e.g. (LocalType,), but\n+            // the noise from these sort of types is usually just really\n+            // annoying, rather than any sort of help).\n+            _ => false\n+        };\n+        if is_local {\n+            Some(true)\n+        } else {\n+            None\n+        }\n+    }).2.unwrap_or(false)\n+}\n+\n #[derive(Copy)]\n pub struct TraitInfo {\n     pub def_id: ast::DefId,"}, {"sha": "20cebb9be1746e027ac155dcd6da3b5cf4898960", "filename": "src/test/auxiliary/no_method_suggested_traits.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e81ae40770a74dbdeb70a5abcb41e1eb3cc2a584/src%2Ftest%2Fauxiliary%2Fno_method_suggested_traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e81ae40770a74dbdeb70a5abcb41e1eb3cc2a584/src%2Ftest%2Fauxiliary%2Fno_method_suggested_traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fno_method_suggested_traits.rs?ref=e81ae40770a74dbdeb70a5abcb41e1eb3cc2a584", "patch": "@@ -10,6 +10,9 @@\n \n pub use reexport::Reexported;\n \n+pub struct Foo;\n+pub enum Bar { X }\n+\n pub mod foo {\n     pub trait PubPub {\n         fn method(&self) {}"}, {"sha": "e807d2b9448d32438624feb1695713add482d12a", "filename": "src/test/compile-fail/method-suggestion-no-duplication.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e81ae40770a74dbdeb70a5abcb41e1eb3cc2a584/src%2Ftest%2Fcompile-fail%2Fmethod-suggestion-no-duplication.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e81ae40770a74dbdeb70a5abcb41e1eb3cc2a584/src%2Ftest%2Fcompile-fail%2Fmethod-suggestion-no-duplication.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmethod-suggestion-no-duplication.rs?ref=e81ae40770a74dbdeb70a5abcb41e1eb3cc2a584", "patch": "@@ -10,7 +10,9 @@\n \n // issue #21405\n \n-fn foo<F>(f: F) where F: FnMut(usize) {}\n+struct Foo;\n+\n+fn foo<F>(f: F) where F: FnMut(Foo) {}\n \n fn main() {\n     foo(|s| s.is_empty());"}, {"sha": "2c14dfad3b858ae352cef9cf901b0ffdb7f9d37e", "filename": "src/test/compile-fail/no-method-suggested-traits.rs", "status": "modified", "additions": 75, "deletions": 3, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/e81ae40770a74dbdeb70a5abcb41e1eb3cc2a584/src%2Ftest%2Fcompile-fail%2Fno-method-suggested-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e81ae40770a74dbdeb70a5abcb41e1eb3cc2a584/src%2Ftest%2Fcompile-fail%2Fno-method-suggested-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-method-suggested-traits.rs?ref=e81ae40770a74dbdeb70a5abcb41e1eb3cc2a584", "patch": "@@ -12,6 +12,9 @@\n \n extern crate no_method_suggested_traits;\n \n+struct Foo;\n+enum Bar { X }\n+\n mod foo {\n     trait Bar {\n         fn method(&self) {}\n@@ -25,23 +28,48 @@ mod foo {\n }\n \n fn main() {\n+    // test the values themselves, and autoderef.\n+\n+\n     1u32.method();\n     //~^ HELP following traits are implemented but not in scope, perhaps add a `use` for one of them\n     //~^^ ERROR does not implement\n     //~^^^ HELP `foo::Bar`\n     //~^^^^ HELP `no_method_suggested_traits::foo::PubPub`\n+    std::rc::Rc::new(&mut Box::new(&1u32)).method();\n+    //~^ HELP following traits are implemented but not in scope, perhaps add a `use` for one of them\n+    //~^^ ERROR does not implement\n+    //~^^^ HELP `foo::Bar`\n+    //~^^^^ HELP `no_method_suggested_traits::foo::PubPub`\n \n     'a'.method();\n     //~^ ERROR does not implement\n     //~^^ HELP the following trait is implemented but not in scope, perhaps add a `use` for it:\n     //~^^^ HELP `foo::Bar`\n+    std::rc::Rc::new(&mut Box::new(&'a')).method();\n+    //~^ ERROR does not implement\n+    //~^^ HELP the following trait is implemented but not in scope, perhaps add a `use` for it:\n+    //~^^^ HELP `foo::Bar`\n \n     1i32.method();\n     //~^ ERROR does not implement\n     //~^^ HELP the following trait is implemented but not in scope, perhaps add a `use` for it:\n     //~^^^ HELP `no_method_suggested_traits::foo::PubPub`\n+    std::rc::Rc::new(&mut Box::new(&1i32)).method();\n+    //~^ ERROR does not implement\n+    //~^^ HELP the following trait is implemented but not in scope, perhaps add a `use` for it:\n+    //~^^^ HELP `no_method_suggested_traits::foo::PubPub`\n \n-    1u64.method();\n+    Foo.method();\n+    //~^ ERROR does not implement\n+    //~^^ HELP following traits define a method `method`, perhaps you need to implement one of them\n+    //~^^^ HELP `foo::Bar`\n+    //~^^^^ HELP `no_method_suggested_traits::foo::PubPub`\n+    //~^^^^^ HELP `no_method_suggested_traits::reexport::Reexported`\n+    //~^^^^^^ HELP `no_method_suggested_traits::bar::PubPriv`\n+    //~^^^^^^^ HELP `no_method_suggested_traits::qux::PrivPub`\n+    //~^^^^^^^^ HELP `no_method_suggested_traits::quz::PrivPriv`\n+    std::rc::Rc::new(&mut Box::new(&Foo)).method();\n     //~^ ERROR does not implement\n     //~^^ HELP following traits define a method `method`, perhaps you need to implement one of them\n     //~^^^ HELP `foo::Bar`\n@@ -55,8 +83,52 @@ fn main() {\n     //~^ ERROR does not implement\n     //~^^ HELP the following trait defines a method `method2`, perhaps you need to implement it\n     //~^^^ HELP `foo::Bar`\n-    1u64.method3();\n+    std::rc::Rc::new(&mut Box::new(&1u64)).method2();\n     //~^ ERROR does not implement\n-    //~^^ HELP the following trait defines a method `method3`, perhaps you need to implement it\n+    //~^^ HELP the following trait defines a method `method2`, perhaps you need to implement it\n+    //~^^^ HELP `foo::Bar`\n+\n+    no_method_suggested_traits::Foo.method2();\n+    //~^ ERROR does not implement\n+    //~^^ HELP following trait defines a method `method2`, perhaps you need to implement it\n+    //~^^^ HELP `foo::Bar`\n+    std::rc::Rc::new(&mut Box::new(&no_method_suggested_traits::Foo)).method2();\n+    //~^ ERROR does not implement\n+    //~^^ HELP following trait defines a method `method2`, perhaps you need to implement it\n+    //~^^^ HELP `foo::Bar`\n+    no_method_suggested_traits::Bar::X.method2();\n+    //~^ ERROR does not implement\n+    //~^^ HELP following trait defines a method `method2`, perhaps you need to implement it\n+    //~^^^ HELP `foo::Bar`\n+    std::rc::Rc::new(&mut Box::new(&no_method_suggested_traits::Bar::X)).method2();\n+    //~^ ERROR does not implement\n+    //~^^ HELP following trait defines a method `method2`, perhaps you need to implement it\n+    //~^^^ HELP `foo::Bar`\n+\n+    Foo.method3();\n+    //~^ ERROR does not implement\n+    //~^^ HELP following trait defines a method `method3`, perhaps you need to implement it\n+    //~^^^ HELP `no_method_suggested_traits::foo::PubPub`\n+    std::rc::Rc::new(&mut Box::new(&Foo)).method3();\n+    //~^ ERROR does not implement\n+    //~^^ HELP following trait defines a method `method3`, perhaps you need to implement it\n+    //~^^^ HELP `no_method_suggested_traits::foo::PubPub`\n+    Bar::X.method3();\n+    //~^ ERROR does not implement\n+    //~^^ HELP following trait defines a method `method3`, perhaps you need to implement it\n     //~^^^ HELP `no_method_suggested_traits::foo::PubPub`\n+    std::rc::Rc::new(&mut Box::new(&Bar::X)).method3();\n+    //~^ ERROR does not implement\n+    //~^^ HELP following trait defines a method `method3`, perhaps you need to implement it\n+    //~^^^ HELP `no_method_suggested_traits::foo::PubPub`\n+\n+    // should have no help:\n+    1us.method3(); //~ ERROR does not implement\n+    std::rc::Rc::new(&mut Box::new(&1us)).method3(); //~ ERROR does not implement\n+    no_method_suggested_traits::Foo.method3();  //~ ERROR does not implement\n+    std::rc::Rc::new(&mut Box::new(&no_method_suggested_traits::Foo)).method3();\n+    //~^ ERROR does not implement\n+    no_method_suggested_traits::Bar::X.method3();  //~ ERROR does not implement\n+    std::rc::Rc::new(&mut Box::new(&no_method_suggested_traits::Bar::X)).method3();\n+    //~^ ERROR does not implement\n }"}]}