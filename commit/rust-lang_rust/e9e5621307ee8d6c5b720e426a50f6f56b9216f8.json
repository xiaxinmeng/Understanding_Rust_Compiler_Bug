{"sha": "e9e5621307ee8d6c5b720e426a50f6f56b9216f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5ZTU2MjEzMDdlZThkNmM1YjcyMGU0MjZhNTBmNmY1NmI5MjE2Zjg=", "commit": {"author": {"name": "Mark Story", "email": "mark@mark-story.com", "date": "2016-01-22T03:09:01Z"}, "committer": {"name": "Mark Story", "email": "mark@mark-story.com", "date": "2016-01-22T03:28:17Z"}, "message": "Extract helper functions for testing.\n\nThese functions help reduce duplication in the test harness and make it\neasier to add tests for other write-modes in the future.", "tree": {"sha": "0613c69f4598c97e830b5f4bd4a7ef22def9fe80", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0613c69f4598c97e830b5f4bd4a7ef22def9fe80"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9e5621307ee8d6c5b720e426a50f6f56b9216f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9e5621307ee8d6c5b720e426a50f6f56b9216f8", "html_url": "https://github.com/rust-lang/rust/commit/e9e5621307ee8d6c5b720e426a50f6f56b9216f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9e5621307ee8d6c5b720e426a50f6f56b9216f8/comments", "author": {"login": "markstory", "id": 24086, "node_id": "MDQ6VXNlcjI0MDg2", "avatar_url": "https://avatars.githubusercontent.com/u/24086?v=4", "gravatar_id": "", "url": "https://api.github.com/users/markstory", "html_url": "https://github.com/markstory", "followers_url": "https://api.github.com/users/markstory/followers", "following_url": "https://api.github.com/users/markstory/following{/other_user}", "gists_url": "https://api.github.com/users/markstory/gists{/gist_id}", "starred_url": "https://api.github.com/users/markstory/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/markstory/subscriptions", "organizations_url": "https://api.github.com/users/markstory/orgs", "repos_url": "https://api.github.com/users/markstory/repos", "events_url": "https://api.github.com/users/markstory/events{/privacy}", "received_events_url": "https://api.github.com/users/markstory/received_events", "type": "User", "site_admin": false}, "committer": {"login": "markstory", "id": 24086, "node_id": "MDQ6VXNlcjI0MDg2", "avatar_url": "https://avatars.githubusercontent.com/u/24086?v=4", "gravatar_id": "", "url": "https://api.github.com/users/markstory", "html_url": "https://github.com/markstory", "followers_url": "https://api.github.com/users/markstory/followers", "following_url": "https://api.github.com/users/markstory/following{/other_user}", "gists_url": "https://api.github.com/users/markstory/gists{/gist_id}", "starred_url": "https://api.github.com/users/markstory/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/markstory/subscriptions", "organizations_url": "https://api.github.com/users/markstory/orgs", "repos_url": "https://api.github.com/users/markstory/repos", "events_url": "https://api.github.com/users/markstory/events{/privacy}", "received_events_url": "https://api.github.com/users/markstory/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c275833fcfa488775f6a137282003956d1a807b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c275833fcfa488775f6a137282003956d1a807b", "html_url": "https://github.com/rust-lang/rust/commit/9c275833fcfa488775f6a137282003956d1a807b"}], "stats": {"total": 51, "additions": 27, "deletions": 24}, "files": [{"sha": "84dbf2e1abc1a867842f001ad4715ff070f5c704", "filename": "tests/system.rs", "status": "modified", "additions": 27, "deletions": 24, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/e9e5621307ee8d6c5b720e426a50f6f56b9216f8/tests%2Fsystem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9e5621307ee8d6c5b720e426a50f6f56b9216f8/tests%2Fsystem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsystem.rs?ref=e9e5621307ee8d6c5b720e426a50f6f56b9216f8", "patch": "@@ -19,7 +19,7 @@ use std::io::{self, Read, BufRead, BufReader};\n use std::path::Path;\n \n use rustfmt::*;\n-use rustfmt::filemap::write_system_newlines;\n+use rustfmt::filemap::{write_system_newlines, FileMap};\n use rustfmt::config::{Config, ReportTactic, WriteMode};\n use rustfmt::rustfmt_diff::*;\n \n@@ -65,12 +65,24 @@ fn coverage_tests() {\n \n #[test]\n fn checkstyle_test() {\n-    let filename = \"tests/source/fn-single-line.rs\".to_string();\n-    let expected = \"tests/writemode/checkstyle.xml\";\n+    let filename = \"tests/source/fn-single-line.rs\";\n+    let expected_filename = \"tests/writemode/checkstyle.xml\";\n+    assert_output(filename, expected_filename, WriteMode::Checkstyle);\n+}\n+\n \n-    let output = run_rustfmt(filename.clone(), WriteMode::Checkstyle);\n+// Helper function for comparing the results of rustfmt\n+// to a known output file generated by one of the write modes.\n+fn assert_output(source: &str, expected_filename: &str, write_mode: WriteMode) {\n+    let config = read_config(&source);\n+    let file_map = run_rustfmt(source.to_string(), write_mode);\n \n-    let mut expected_file = fs::File::open(&expected)\n+    // Populate output by writing to a vec.\n+    let mut out = vec![];\n+    let _ = filemap::write_all_files(&file_map, &mut out, write_mode, &config);\n+    let output = String::from_utf8(out).unwrap();\n+\n+    let mut expected_file = fs::File::open(&expected_filename)\n                                 .ok()\n                                 .expect(\"Couldn't open target.\");\n     let mut expected_text = String::new();\n@@ -81,7 +93,7 @@ fn checkstyle_test() {\n     let compare = make_diff(&expected_text, &output, DIFF_CONTEXT_SIZE);\n     if compare.len() > 0 {\n         let mut failures = HashMap::new();\n-        failures.insert(filename, compare);\n+        failures.insert(source.to_string(), compare);\n         print_mismatches(failures);\n         assert!(false, \"Text does not match expected output\");\n     }\n@@ -169,7 +181,7 @@ fn print_mismatches(result: HashMap<String, Vec<Mismatch>>) {\n     assert!(t.reset().unwrap());\n }\n \n-pub fn run_rustfmt(filename: String, write_mode: WriteMode) -> String {\n+fn read_config(filename: &str) -> Config {\n     let sig_comments = read_significant_comments(&filename);\n     let mut config = get_config(sig_comments.get(\"config\").map(|x| &(*x)[..]));\n \n@@ -181,30 +193,21 @@ pub fn run_rustfmt(filename: String, write_mode: WriteMode) -> String {\n \n     // Don't generate warnings for to-do items.\n     config.report_todo = ReportTactic::Never;\n+    config\n+}\n \n-    // Simulate run()\n-    let mut out = Vec::new();\n-    let file_map = format(Path::new(&filename), &config, write_mode);\n-    let _ = filemap::write_all_files(&file_map, &mut out, write_mode, &config);\n-    String::from_utf8(out).unwrap()\n+// Simulate run()\n+fn run_rustfmt(filename: String, write_mode: WriteMode) -> FileMap {\n+    let config = read_config(&filename);\n+    format(Path::new(&filename), &config, write_mode)\n }\n \n pub fn idempotent_check(filename: String,\n                         write_mode: WriteMode)\n                         -> Result<FormatReport, HashMap<String, Vec<Mismatch>>> {\n     let sig_comments = read_significant_comments(&filename);\n-    let mut config = get_config(sig_comments.get(\"config\").map(|x| &(*x)[..]));\n-\n-    for (key, val) in &sig_comments {\n-        if key != \"target\" && key != \"config\" {\n-            config.override_value(key, val);\n-        }\n-    }\n-\n-    // Don't generate warnings for to-do items.\n-    config.report_todo = ReportTactic::Never;\n-\n-    let mut file_map = format(Path::new(&filename), &config, write_mode);\n+    let config = read_config(&filename);\n+    let mut file_map = run_rustfmt(filename, write_mode);\n     let format_report = fmt_lines(&mut file_map, &config);\n \n     let mut write_result = HashMap::new();"}]}