{"sha": "e7f27947cf03501865827b9066d3522e5dc613a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3ZjI3OTQ3Y2YwMzUwMTg2NTgyN2I5MDY2ZDM1MjJlNWRjNjEzYTY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2019-05-16T19:31:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-05-16T19:31:46Z"}, "message": "Rollup merge of #60597 - wesleywiser:const_prop, r=oli-obk\n\nDo some simple constant propagation in the ConstProp pass\n\nr? @oli-obk\n\nI added a few test cases. Let me know if you think there should be more.", "tree": {"sha": "2259b26bf3a8aca61047e29ccdffb1768a609e00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2259b26bf3a8aca61047e29ccdffb1768a609e00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7f27947cf03501865827b9066d3522e5dc613a6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc3bqiCRBK7hj4Ov3rIwAAdHIIAIfg5GeBFqWTzF1bxHdQjc/f\nUmMjlbL4onz6ebkBGPjEyvOAYCfRezJs241ENRGmbbYhIaDkDSJF+a47ghtqnemm\nPjdUpOa5PEpUCy2tUDuZhO9vPUdQNDjPXXQDJt7lVR6Q5d7gUPaA/zX8+JeuwI9l\nzH1WvIe9KH3PQLVCNwAb46wjulTWPMTsqhOi0IcuuMJTBIto1g+v7cPBeBDN34ip\nwZ6WyBhiZsvPMF1viUiAFIPRtEOEDNlCs687H7uSIdS2zrGgT9g8sAWLOPFsGm4v\nxMAdP2SBM8CbSw2idAVsRWq+Z4WLjSrb/FGxrMP+A3yelYeYOT9CkZYXBoYBGzk=\n=ooQJ\n-----END PGP SIGNATURE-----\n", "payload": "tree 2259b26bf3a8aca61047e29ccdffb1768a609e00\nparent 2ae06976e47f06bcf0b9d50fe2603add1204bf26\nparent b17066dd5eaf3dabd403bd4caccfca193c7184db\nauthor Manish Goregaokar <manishsmail@gmail.com> 1558035106 -0700\ncommitter GitHub <noreply@github.com> 1558035106 -0700\n\nRollup merge of #60597 - wesleywiser:const_prop, r=oli-obk\n\nDo some simple constant propagation in the ConstProp pass\n\nr? @oli-obk\n\nI added a few test cases. Let me know if you think there should be more.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7f27947cf03501865827b9066d3522e5dc613a6", "html_url": "https://github.com/rust-lang/rust/commit/e7f27947cf03501865827b9066d3522e5dc613a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7f27947cf03501865827b9066d3522e5dc613a6/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ae06976e47f06bcf0b9d50fe2603add1204bf26", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ae06976e47f06bcf0b9d50fe2603add1204bf26", "html_url": "https://github.com/rust-lang/rust/commit/2ae06976e47f06bcf0b9d50fe2603add1204bf26"}, {"sha": "b17066dd5eaf3dabd403bd4caccfca193c7184db", "url": "https://api.github.com/repos/rust-lang/rust/commits/b17066dd5eaf3dabd403bd4caccfca193c7184db", "html_url": "https://github.com/rust-lang/rust/commit/b17066dd5eaf3dabd403bd4caccfca193c7184db"}], "stats": {"total": 196, "additions": 187, "deletions": 9}, "files": [{"sha": "4e214c3c7253ee71d8455d5e0cf5d6367a895041", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 62, "deletions": 9, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/e7f27947cf03501865827b9066d3522e5dc613a6/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7f27947cf03501865827b9066d3522e5dc613a6/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=e7f27947cf03501865827b9066d3522e5dc613a6", "patch": "@@ -3,23 +3,25 @@\n \n use rustc::hir::def::DefKind;\n use rustc::mir::{\n-    Constant, Location, Place, PlaceBase, Mir, Operand, Rvalue, Local,\n+    AggregateKind, Constant, Location, Place, PlaceBase, Mir, Operand, Rvalue, Local,\n     NullOp, UnOp, StatementKind, Statement, LocalKind, Static, StaticKind,\n     TerminatorKind, Terminator,  ClearCrossCrate, SourceInfo, BinOp, ProjectionElem,\n     SourceScope, SourceScopeLocalData, LocalDecl, Promoted,\n };\n-use rustc::mir::visit::{Visitor, PlaceContext, MutatingUseContext, NonMutatingUseContext};\n+use rustc::mir::visit::{\n+    Visitor, PlaceContext, MutatingUseContext, MutVisitor, NonMutatingUseContext,\n+};\n use rustc::mir::interpret::{InterpError, Scalar, GlobalId, EvalResult};\n use rustc::ty::{self, Instance, ParamEnv, Ty, TyCtxt};\n-use syntax::source_map::DUMMY_SP;\n+use syntax_pos::{Span, DUMMY_SP};\n use rustc::ty::subst::InternalSubsts;\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc::ty::layout::{\n     LayoutOf, TyLayout, LayoutError,\n     HasTyCtxt, TargetDataLayout, HasDataLayout,\n };\n \n-use crate::interpret::{InterpretCx, ScalarMaybeUndef, Immediate, OpTy, ImmTy, MemoryKind};\n+use crate::interpret::{self, InterpretCx, ScalarMaybeUndef, Immediate, OpTy, ImmTy, MemoryKind};\n use crate::const_eval::{\n     CompileTimeInterpreter, error_to_const_error, eval_promoted, mk_eval_cx,\n };\n@@ -497,6 +499,53 @@ impl<'a, 'mir, 'tcx> ConstPropagator<'a, 'mir, 'tcx> {\n             },\n         }\n     }\n+\n+    fn operand_from_scalar(&self, scalar: Scalar, ty: Ty<'tcx>, span: Span) -> Operand<'tcx> {\n+        Operand::Constant(Box::new(\n+            Constant {\n+                span,\n+                ty,\n+                user_ty: None,\n+                literal: self.tcx.mk_const(ty::Const::from_scalar(\n+                    scalar,\n+                    ty,\n+                ))\n+            }\n+        ))\n+    }\n+\n+    fn replace_with_const(&self, rval: &mut Rvalue<'tcx>, value: Const<'tcx>, span: Span) {\n+        self.ecx.validate_operand(\n+            value,\n+            vec![],\n+            None,\n+            true,\n+        ).expect(\"value should already be a valid const\");\n+\n+        if let interpret::Operand::Immediate(im) = *value {\n+            match im {\n+                interpret::Immediate::Scalar(ScalarMaybeUndef::Scalar(scalar)) => {\n+                    *rval = Rvalue::Use(self.operand_from_scalar(scalar, value.layout.ty, span));\n+                },\n+                Immediate::ScalarPair(\n+                    ScalarMaybeUndef::Scalar(one),\n+                    ScalarMaybeUndef::Scalar(two)\n+                ) => {\n+                    let ty = &value.layout.ty.sty;\n+                    if let ty::Tuple(substs) = ty {\n+                        *rval = Rvalue::Aggregate(\n+                            Box::new(AggregateKind::Tuple),\n+                            vec![\n+                                self.operand_from_scalar(one, substs[0].expect_ty(), span),\n+                                self.operand_from_scalar(two, substs[1].expect_ty(), span),\n+                            ],\n+                        );\n+                    }\n+                },\n+                _ => { }\n+            }\n+        }\n+    }\n }\n \n fn type_size_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n@@ -560,10 +609,10 @@ impl<'tcx> Visitor<'tcx> for CanConstProp {\n     }\n }\n \n-impl<'b, 'a, 'tcx> Visitor<'tcx> for ConstPropagator<'b, 'a, 'tcx> {\n+impl<'b, 'a, 'tcx> MutVisitor<'tcx> for ConstPropagator<'b, 'a, 'tcx> {\n     fn visit_constant(\n         &mut self,\n-        constant: &Constant<'tcx>,\n+        constant: &mut Constant<'tcx>,\n         location: Location,\n     ) {\n         trace!(\"visit_constant: {:?}\", constant);\n@@ -573,11 +622,11 @@ impl<'b, 'a, 'tcx> Visitor<'tcx> for ConstPropagator<'b, 'a, 'tcx> {\n \n     fn visit_statement(\n         &mut self,\n-        statement: &Statement<'tcx>,\n+        statement: &mut Statement<'tcx>,\n         location: Location,\n     ) {\n         trace!(\"visit_statement: {:?}\", statement);\n-        if let StatementKind::Assign(ref place, ref rval) = statement.kind {\n+        if let StatementKind::Assign(ref place, ref mut rval) = statement.kind {\n             let place_ty: Ty<'tcx> = place\n                 .ty(&self.local_decls, self.tcx)\n                 .ty;\n@@ -589,6 +638,10 @@ impl<'b, 'a, 'tcx> Visitor<'tcx> for ConstPropagator<'b, 'a, 'tcx> {\n                             trace!(\"storing {:?} to {:?}\", value, local);\n                             assert!(self.places[local].is_none());\n                             self.places[local] = Some(value);\n+\n+                            if self.tcx.sess.opts.debugging_opts.mir_opt_level >= 2 {\n+                                self.replace_with_const(rval, value, statement.source_info.span);\n+                            }\n                         }\n                     }\n                 }\n@@ -599,7 +652,7 @@ impl<'b, 'a, 'tcx> Visitor<'tcx> for ConstPropagator<'b, 'a, 'tcx> {\n \n     fn visit_terminator(\n         &mut self,\n-        terminator: &Terminator<'tcx>,\n+        terminator: &mut Terminator<'tcx>,\n         location: Location,\n     ) {\n         self.super_terminator(terminator, location);"}, {"sha": "4b97af68ff08af727a4f923e58c95e9ed4e4bedf", "filename": "src/test/mir-opt/const_prop/array_index.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e7f27947cf03501865827b9066d3522e5dc613a6/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7f27947cf03501865827b9066d3522e5dc613a6/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index.rs?ref=e7f27947cf03501865827b9066d3522e5dc613a6", "patch": "@@ -0,0 +1,33 @@\n+fn main() {\n+    let x: u32 = [0, 1, 2, 3][2];\n+}\n+\n+// END RUST SOURCE\n+// START rustc.main.ConstProp.before.mir\n+//  bb0: {\n+//      ...\n+//      _2 = [const 0u32, const 1u32, const 2u32, const 3u32];\n+//      ...\n+//      _3 = const 2usize;\n+//      _4 = const 4usize;\n+//      _5 = Lt(_3, _4);\n+//      assert(move _5, \"index out of bounds: the len is move _4 but the index is _3\") -> bb1;\n+//  }\n+//  bb1: {\n+//      _1 = _2[_3];\n+//      ...\n+//      return;\n+//  }\n+// END rustc.main.ConstProp.before.mir\n+// START rustc.main.ConstProp.after.mir\n+//  bb0: {\n+//      ...\n+//      _5 = const true;\n+//      assert(move _5, \"index out of bounds: the len is move _4 but the index is _3\") -> bb1;\n+//  }\n+//  bb1: {\n+//      _1 = _2[_3];\n+//      ...\n+//      return;\n+//  }\n+// END rustc.main.ConstProp.after.mir"}, {"sha": "0718316307c5edbb5dda0f88983a9c33196079d8", "filename": "src/test/mir-opt/const_prop/checked_add.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e7f27947cf03501865827b9066d3522e5dc613a6/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fchecked_add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7f27947cf03501865827b9066d3522e5dc613a6/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fchecked_add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fchecked_add.rs?ref=e7f27947cf03501865827b9066d3522e5dc613a6", "patch": "@@ -0,0 +1,21 @@\n+// compile-flags: -C overflow-checks=on\n+\n+fn main() {\n+    let x: u32 = 1 + 1;\n+}\n+\n+// END RUST SOURCE\n+// START rustc.main.ConstProp.before.mir\n+//  bb0: {\n+//      ...\n+//      _2 = CheckedAdd(const 1u32, const 1u32);\n+//      assert(!move (_2.1: bool), \"attempt to add with overflow\") -> bb1;\n+//  }\n+// END rustc.main.ConstProp.before.mir\n+// START rustc.main.ConstProp.after.mir\n+//  bb0: {\n+//      ...\n+//      _2 = (const 2u32, const false);\n+//      assert(!move (_2.1: bool), \"attempt to add with overflow\") -> bb1;\n+//  }\n+// END rustc.main.ConstProp.after.mir"}, {"sha": "97d3abdcc6cbf758ad88867eecad57a2e79b7000", "filename": "src/test/mir-opt/const_prop/const_prop_fails_gracefully.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e7f27947cf03501865827b9066d3522e5dc613a6/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7f27947cf03501865827b9066d3522e5dc613a6/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.rs?ref=e7f27947cf03501865827b9066d3522e5dc613a6", "patch": "@@ -0,0 +1,34 @@\n+#[inline(never)]\n+fn read(_: usize) { }\n+\n+fn main() {\n+    const FOO: &i32 = &1;\n+    let x = FOO as *const i32 as usize;\n+    read(x);\n+}\n+\n+// END RUST SOURCE\n+// START rustc.main.ConstProp.before.mir\n+//  bb0: {\n+//      ...\n+//      _3 = _4;\n+//      _2 = move _3 as *const i32 (Misc);\n+//      ...\n+//      _1 = move _2 as usize (Misc);\n+//      ...\n+//      _6 = _1;\n+//      _5 = const read(move _6) -> bb1;\n+//  }\n+// END rustc.main.ConstProp.before.mir\n+// START rustc.main.ConstProp.after.mir\n+//  bb0: {\n+//      ...\n+//      _3 = _4;\n+//      _2 = move _3 as *const i32 (Misc);\n+//      ...\n+//      _1 = move _2 as usize (Misc);\n+//      ...\n+//      _6 = _1;\n+//      _5 = const read(move _6) -> bb1;\n+//  }\n+// END rustc.main.ConstProp.after.mir"}, {"sha": "3435ca07f4cd8414c8c6894be6619bd9e1a5a3fb", "filename": "src/test/mir-opt/const_prop/slice_len.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e7f27947cf03501865827b9066d3522e5dc613a6/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7f27947cf03501865827b9066d3522e5dc613a6/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.rs?ref=e7f27947cf03501865827b9066d3522e5dc613a6", "patch": "@@ -0,0 +1,37 @@\n+fn test() -> &'static [u32] {\n+    &[1, 2]\n+}\n+\n+fn main() {\n+    let x = test()[0];\n+}\n+\n+// END RUST SOURCE\n+// START rustc.main.ConstProp.before.mir\n+//  bb1: {\n+//      ...\n+//      _3 = const 0usize;\n+//      _4 = Len((*_2));\n+//      _5 = Lt(_3, _4);\n+//      assert(move _5, \"index out of bounds: the len is move _4 but the index is _3\") -> bb2;\n+//  }\n+//  bb2: {\n+//      _1 = (*_2)[_3];\n+//      ...\n+//      return;\n+//  }\n+// END rustc.main.ConstProp.before.mir\n+// START rustc.main.ConstProp.after.mir\n+//  bb0: {\n+//      ...\n+//      _3 = const 0usize;\n+//      _4 = Len((*_2));\n+//      _5 = Lt(_3, _4);\n+//      assert(move _5, \"index out of bounds: the len is move _4 but the index is _3\") -> bb2;\n+//  }\n+//  bb2: {\n+//      _1 = (*_2)[_3];\n+//      ...\n+//      return;\n+//  }\n+// END rustc.main.ConstProp.after.mir"}]}