{"sha": "c7392be96865c9e0717a73a4d4d4242d87232a5b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3MzkyYmU5Njg2NWM5ZTA3MTdhNzNhNGQ0ZDQyNDJkODcyMzJhNWI=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-03-19T00:38:43Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-03-19T02:54:36Z"}, "message": "Rollup merge of #23468 - sfackler:stdio-panic, r=alexcrichton\n\n Nothing inside of the read/write interface itself can panic, so any\npoison must have been the result of user code which the lock isn't\nprotecting.\n\nThis seems safe to me, but if we don't want to go this route we should update the docs to indicate that these methods can panic.\n\nr? @alexcrichton", "tree": {"sha": "ae5a43850d33303c0904863474a7940a02cae69f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae5a43850d33303c0904863474a7940a02cae69f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7392be96865c9e0717a73a4d4d4242d87232a5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7392be96865c9e0717a73a4d4d4242d87232a5b", "html_url": "https://github.com/rust-lang/rust/commit/c7392be96865c9e0717a73a4d4d4242d87232a5b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7392be96865c9e0717a73a4d4d4242d87232a5b/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05354e852235c97d5231d71aeed75114fc55b59f", "url": "https://api.github.com/repos/rust-lang/rust/commits/05354e852235c97d5231d71aeed75114fc55b59f", "html_url": "https://github.com/rust-lang/rust/commit/05354e852235c97d5231d71aeed75114fc55b59f"}, {"sha": "a51cd6116446d74a336abcb00f5ced3582ec307f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a51cd6116446d74a336abcb00f5ced3582ec307f", "html_url": "https://github.com/rust-lang/rust/commit/a51cd6116446d74a336abcb00f5ced3582ec307f"}], "stats": {"total": 32, "additions": 29, "deletions": 3}, "files": [{"sha": "9b36408aa5116f3ebe97deb02a71204cdf392e68", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 29, "deletions": 3, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c7392be96865c9e0717a73a4d4d4242d87232a5b/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7392be96865c9e0717a73a4d4d4242d87232a5b/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=c7392be96865c9e0717a73a4d4d4242d87232a5b", "patch": "@@ -146,7 +146,7 @@ impl Stdin {\n     /// accessing the underlying data.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn lock(&self) -> StdinLock {\n-        StdinLock { inner: self.inner.lock().unwrap() }\n+        StdinLock { inner: self.inner.lock().unwrap_or_else(|e| e.into_inner()) }\n     }\n \n     /// Locks this handle and reads a line of input into the specified buffer.\n@@ -249,7 +249,7 @@ impl Stdout {\n     /// returned guard also implements the `Write` trait for writing data.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn lock(&self) -> StdoutLock {\n-        StdoutLock { inner: self.inner.lock().unwrap() }\n+        StdoutLock { inner: self.inner.lock().unwrap_or_else(|e| e.into_inner()) }\n     }\n }\n \n@@ -319,7 +319,7 @@ impl Stderr {\n     /// returned guard also implements the `Write` trait for writing data.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn lock(&self) -> StderrLock {\n-        StderrLock { inner: self.inner.lock().unwrap() }\n+        StderrLock { inner: self.inner.lock().unwrap_or_else(|e| e.into_inner()) }\n     }\n }\n \n@@ -402,3 +402,29 @@ pub fn _print(args: fmt::Arguments) {\n         panic!(\"failed printing to stdout: {}\", e);\n     }\n }\n+\n+#[cfg(test)]\n+mod test {\n+    use thread;\n+    use super::*;\n+\n+    #[test]\n+    fn panic_doesnt_poison() {\n+        thread::spawn(|| {\n+            let _a = stdin();\n+            let _a = _a.lock();\n+            let _a = stdout();\n+            let _a = _a.lock();\n+            let _a = stderr();\n+            let _a = _a.lock();\n+            panic!();\n+        }).join().unwrap_err();\n+\n+        let _a = stdin();\n+        let _a = _a.lock();\n+        let _a = stdout();\n+        let _a = _a.lock();\n+        let _a = stderr();\n+        let _a = _a.lock();\n+    }\n+}"}]}