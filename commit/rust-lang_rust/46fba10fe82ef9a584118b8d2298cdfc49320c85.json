{"sha": "46fba10fe82ef9a584118b8d2298cdfc49320c85", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2ZmJhMTBmZTgyZWY5YTU4NDExOGI4ZDIyOThjZGZjNDkzMjBjODU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-07-12T01:38:12Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-07-12T22:09:33Z"}, "message": "rustc: Make all impls even more reachable\n\nWith this we write metadata for all impls so that we can properly find\nreexported impls.", "tree": {"sha": "8fd5be5a9c80af5a5158add43c6574bff8fbbd6c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8fd5be5a9c80af5a5158add43c6574bff8fbbd6c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46fba10fe82ef9a584118b8d2298cdfc49320c85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46fba10fe82ef9a584118b8d2298cdfc49320c85", "html_url": "https://github.com/rust-lang/rust/commit/46fba10fe82ef9a584118b8d2298cdfc49320c85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46fba10fe82ef9a584118b8d2298cdfc49320c85/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "200a2ded3245eb0a1ca7b265ce83adba16d75b97", "url": "https://api.github.com/repos/rust-lang/rust/commits/200a2ded3245eb0a1ca7b265ce83adba16d75b97", "html_url": "https://github.com/rust-lang/rust/commit/200a2ded3245eb0a1ca7b265ce83adba16d75b97"}], "stats": {"total": 63, "additions": 49, "deletions": 14}, "files": [{"sha": "39e0461dee6b5b2288d4cd1c93b0d92a85461bd9", "filename": "src/rustc/middle/trans/reachable.rs", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/46fba10fe82ef9a584118b8d2298cdfc49320c85/src%2Frustc%2Fmiddle%2Ftrans%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46fba10fe82ef9a584118b8d2298cdfc49320c85/src%2Frustc%2Fmiddle%2Ftrans%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Freachable.rs?ref=46fba10fe82ef9a584118b8d2298cdfc49320c85", "patch": "@@ -27,7 +27,7 @@ fn find_reachable(crate_mod: _mod, exp_map: resolve::exp_map,\n     let rmap = std::map::int_hash();\n     let cx = {exp_map: exp_map, tcx: tcx, method_map: method_map, rmap: rmap};\n     traverse_public_mod(cx, crate_mod);\n-    traverse_all_resources(cx, crate_mod);\n+    traverse_all_resources_and_impls(cx, crate_mod);\n     rmap\n }\n \n@@ -81,18 +81,6 @@ fn traverse_public_mod(cx: ctx, m: _mod) {\n     if !traverse_exports(cx, m.view_items) {\n         // No exports, so every local item is exported\n         for vec::each(m.items) |item| { traverse_public_item(cx, item); }\n-    } else {\n-        // Make impls always reachable.\n-        for vec::each(m.items) |item| {\n-            alt item.node {\n-                item_impl(*) {\n-                    traverse_public_item(cx, item);\n-                }\n-                _ {\n-                    // Nothing to do.\n-                }\n-            }\n-        }\n     }\n }\n \n@@ -212,7 +200,7 @@ fn traverse_inline_body(cx: ctx, body: blk) {\n     }));\n }\n \n-fn traverse_all_resources(cx: ctx, crate_mod: _mod) {\n+fn traverse_all_resources_and_impls(cx: ctx, crate_mod: _mod) {\n     visit::visit_mod(crate_mod, ast_util::dummy_sp(), 0, cx, visit::mk_vt(@{\n         visit_expr: |_e, _cx, _v| { },\n         visit_item: |i, cx, v| {\n@@ -221,9 +209,13 @@ fn traverse_all_resources(cx: ctx, crate_mod: _mod) {\n               item_class(_, _, _, _, some(_)) {\n                 traverse_public_item(cx, i);\n               }\n+              item_impl(*) {\n+                traverse_public_item(cx, i);\n+              }\n               _ {}\n             }\n         }\n         with *visit::default_visitor()\n     }));\n }\n+"}, {"sha": "eae7bf8e7cbddcec5e1304b763dfba810d841cac", "filename": "src/test/auxiliary/crate-method-reexport-grrrrrrr2.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/46fba10fe82ef9a584118b8d2298cdfc49320c85/src%2Ftest%2Fauxiliary%2Fcrate-method-reexport-grrrrrrr2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46fba10fe82ef9a584118b8d2298cdfc49320c85/src%2Ftest%2Fauxiliary%2Fcrate-method-reexport-grrrrrrr2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrate-method-reexport-grrrrrrr2.rs?ref=46fba10fe82ef9a584118b8d2298cdfc49320c85", "patch": "@@ -0,0 +1,28 @@\n+#[link(name = \"crate_method_reexport_grrrrrrr2\")];\n+\n+export rust;\n+\n+import name_pool::methods;\n+\n+mod name_pool {\n+\n+    type name_pool = ();\n+\n+    impl methods for name_pool {\n+        fn add(s: str) {\n+        }\n+    }\n+}\n+\n+mod rust {\n+\n+    export rt;\n+    export methods;\n+\n+    type rt = @();\n+\n+    impl methods for rt {\n+        fn cx() {\n+        }\n+    }\n+}"}, {"sha": "0482516d38f41a0ab523c616e15f7cc3a4c94525", "filename": "src/test/run-pass/crate-method-reexport-grrrrrrr.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/46fba10fe82ef9a584118b8d2298cdfc49320c85/src%2Ftest%2Frun-pass%2Fcrate-method-reexport-grrrrrrr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46fba10fe82ef9a584118b8d2298cdfc49320c85/src%2Ftest%2Frun-pass%2Fcrate-method-reexport-grrrrrrr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcrate-method-reexport-grrrrrrr.rs?ref=46fba10fe82ef9a584118b8d2298cdfc49320c85", "patch": "@@ -0,0 +1,15 @@\n+// This is a regression test that the metadata for the\n+// name_pool::methods impl in the other crate is reachable from this\n+// crate.\n+\n+// aux-build:crate-method-reexport-grrrrrrr2.rs\n+\n+use crate_method_reexport_grrrrrrr2;\n+\n+fn main() {\n+    import crate_method_reexport_grrrrrrr2::rust::methods;\n+    let x = @();\n+    x.cx();\n+    let y = ();\n+    y.add(\"hi\");\n+}\n\\ No newline at end of file"}]}