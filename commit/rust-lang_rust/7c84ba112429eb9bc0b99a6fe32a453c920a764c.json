{"sha": "7c84ba112429eb9bc0b99a6fe32a453c920a764c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjODRiYTExMjQyOWViOWJjMGI5OWE2ZmUzMmE0NTNjOTIwYTc2NGM=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-02-26T12:03:46Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-02-27T13:57:22Z"}, "message": "use char instead of &str for single char patterns", "tree": {"sha": "98a44856b3d3b0792b8c9726b34cbbb5a7f34c67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98a44856b3d3b0792b8c9726b34cbbb5a7f34c67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c84ba112429eb9bc0b99a6fe32a453c920a764c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c84ba112429eb9bc0b99a6fe32a453c920a764c", "html_url": "https://github.com/rust-lang/rust/commit/7c84ba112429eb9bc0b99a6fe32a453c920a764c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c84ba112429eb9bc0b99a6fe32a453c920a764c/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8437cf213ac1e950b6f5c691c4d2a29bf949bcd", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8437cf213ac1e950b6f5c691c4d2a29bf949bcd", "html_url": "https://github.com/rust-lang/rust/commit/a8437cf213ac1e950b6f5c691c4d2a29bf949bcd"}], "stats": {"total": 88, "additions": 44, "deletions": 44}, "files": [{"sha": "9f98cf253c9771f7dfb26e0a64fd04393663df30", "filename": "src/librustc_builtin_macros/asm.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7c84ba112429eb9bc0b99a6fe32a453c920a764c/src%2Flibrustc_builtin_macros%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c84ba112429eb9bc0b99a6fe32a453c920a764c/src%2Flibrustc_builtin_macros%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fasm.rs?ref=7c84ba112429eb9bc0b99a6fe32a453c920a764c", "patch": "@@ -182,7 +182,7 @@ fn parse_inline_asm<'a>(\n                     };\n \n                     let is_rw = output.is_some();\n-                    let is_indirect = constraint_str.contains(\"*\");\n+                    let is_indirect = constraint_str.contains('*');\n                     outputs.push(ast::InlineAsmOutput {\n                         constraint: output.unwrap_or(constraint),\n                         expr,\n@@ -199,15 +199,15 @@ fn parse_inline_asm<'a>(\n \n                     let constraint = parse_asm_str(&mut p)?;\n \n-                    if constraint.as_str().starts_with(\"=\") {\n+                    if constraint.as_str().starts_with('=') {\n                         struct_span_err!(\n                             cx.parse_sess.span_diagnostic,\n                             p.prev_span,\n                             E0662,\n                             \"input operand constraint contains '='\"\n                         )\n                         .emit();\n-                    } else if constraint.as_str().starts_with(\"+\") {\n+                    } else if constraint.as_str().starts_with('+') {\n                         struct_span_err!(\n                             cx.parse_sess.span_diagnostic,\n                             p.prev_span,\n@@ -234,7 +234,7 @@ fn parse_inline_asm<'a>(\n \n                     if OPTIONS.iter().any(|&opt| s == opt) {\n                         cx.span_warn(p.prev_span, \"expected a clobber, found an option\");\n-                    } else if s.as_str().starts_with(\"{\") || s.as_str().ends_with(\"}\") {\n+                    } else if s.as_str().starts_with('{') || s.as_str().ends_with('}') {\n                         struct_span_err!(\n                             cx.parse_sess.span_diagnostic,\n                             p.prev_span,"}, {"sha": "e1d3067418671ba533658ab26219b6f2c510e8d5", "filename": "src/librustc_builtin_macros/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c84ba112429eb9bc0b99a6fe32a453c920a764c/src%2Flibrustc_builtin_macros%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c84ba112429eb9bc0b99a6fe32a453c920a764c/src%2Flibrustc_builtin_macros%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fformat.rs?ref=7c84ba112429eb9bc0b99a6fe32a453c920a764c", "patch": "@@ -894,7 +894,7 @@ pub fn expand_preparsed_format_args(\n     };\n \n     let (is_literal, fmt_snippet) = match ecx.source_map().span_to_snippet(fmt_sp) {\n-        Ok(s) => (s.starts_with(\"\\\"\") || s.starts_with(\"r#\"), Some(s)),\n+        Ok(s) => (s.starts_with('\"') || s.starts_with(\"r#\"), Some(s)),\n         _ => (false, None),\n     };\n "}, {"sha": "6b136aeb8d9fb6201bfabac53b952593eb0a0b72", "filename": "src/librustc_codegen_llvm/back/lto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c84ba112429eb9bc0b99a6fe32a453c920a764c/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c84ba112429eb9bc0b99a6fe32a453c920a764c/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs?ref=7c84ba112429eb9bc0b99a6fe32a453c920a764c", "patch": "@@ -917,7 +917,7 @@ impl ThinLTOImports {\n             if line.is_empty() {\n                 let importing_module = current_module.take().expect(\"Importing module not set\");\n                 imports.insert(importing_module, mem::replace(&mut current_imports, vec![]));\n-            } else if line.starts_with(\" \") {\n+            } else if line.starts_with(' ') {\n                 // Space marks an imported module\n                 assert_ne!(current_module, None);\n                 current_imports.push(line.trim().to_string());"}, {"sha": "92cbc42388d61087a1f82911a8f42f16f5815e0c", "filename": "src/librustc_codegen_utils/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c84ba112429eb9bc0b99a6fe32a453c920a764c/src%2Flibrustc_codegen_utils%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c84ba112429eb9bc0b99a6fe32a453c920a764c/src%2Flibrustc_codegen_utils%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Flink.rs?ref=7c84ba112429eb9bc0b99a6fe32a453c920a764c", "patch": "@@ -78,7 +78,7 @@ pub fn find_crate_name(sess: Option<&Session>, attrs: &[ast::Attribute], input:\n     }\n     if let Input::File(ref path) = *input {\n         if let Some(s) = path.file_stem().and_then(|s| s.to_str()) {\n-            if s.starts_with(\"-\") {\n+            if s.starts_with('-') {\n                 let msg = format!(\n                     \"crate names cannot start with a `-`, but \\\n                                    `{}` has a leading hyphen\","}, {"sha": "5686819c61b402441490e510ce66f40b5333f9a7", "filename": "src/librustc_driver/args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c84ba112429eb9bc0b99a6fe32a453c920a764c/src%2Flibrustc_driver%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c84ba112429eb9bc0b99a6fe32a453c920a764c/src%2Flibrustc_driver%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fargs.rs?ref=7c84ba112429eb9bc0b99a6fe32a453c920a764c", "patch": "@@ -4,7 +4,7 @@ use std::fs;\n use std::io;\n \n pub fn arg_expand(arg: String) -> Result<Vec<String>, Error> {\n-    if arg.starts_with(\"@\") {\n+    if arg.starts_with('@') {\n         let path = &arg[1..];\n         let file = match fs::read_to_string(path) {\n             Ok(file) => file,"}, {"sha": "410439360d7c7eb5b957ca832ba68a750ca07fcf", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c84ba112429eb9bc0b99a6fe32a453c920a764c/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c84ba112429eb9bc0b99a6fe32a453c920a764c/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=7c84ba112429eb9bc0b99a6fe32a453c920a764c", "patch": "@@ -521,7 +521,7 @@ fn stdout_isatty() -> bool {\n \n fn handle_explain(registry: Registry, code: &str, output: ErrorOutputType) {\n     let normalised =\n-        if code.starts_with(\"E\") { code.to_string() } else { format!(\"E{0:0>4}\", code) };\n+        if code.starts_with('E') { code.to_string() } else { format!(\"E{0:0>4}\", code) };\n     match registry.find_description(&normalised) {\n         Some(ref description) => {\n             let mut is_in_code_block = false;"}, {"sha": "21fd444930752b0ce58f26cdf6a7b3e12ccbfe6b", "filename": "src/librustc_expand/proc_macro_server.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7c84ba112429eb9bc0b99a6fe32a453c920a764c/src%2Flibrustc_expand%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c84ba112429eb9bc0b99a6fe32a453c920a764c/src%2Flibrustc_expand%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fproc_macro_server.rs?ref=7c84ba112429eb9bc0b99a6fe32a453c920a764c", "patch": "@@ -209,7 +209,7 @@ impl ToInternal<TokenStream> for TokenTree<Group, Punct, Ident, Literal> {\n             TokenTree::Literal(self::Literal {\n                 lit: token::Lit { kind: token::Integer, symbol, suffix },\n                 span,\n-            }) if symbol.as_str().starts_with(\"-\") => {\n+            }) if symbol.as_str().starts_with('-') => {\n                 let minus = BinOp(BinOpToken::Minus);\n                 let symbol = Symbol::intern(&symbol.as_str()[1..]);\n                 let integer = TokenKind::lit(token::Integer, symbol, suffix);\n@@ -220,7 +220,7 @@ impl ToInternal<TokenStream> for TokenTree<Group, Punct, Ident, Literal> {\n             TokenTree::Literal(self::Literal {\n                 lit: token::Lit { kind: token::Float, symbol, suffix },\n                 span,\n-            }) if symbol.as_str().starts_with(\"-\") => {\n+            }) if symbol.as_str().starts_with('-') => {\n                 let minus = BinOp(BinOpToken::Minus);\n                 let symbol = Symbol::intern(&symbol.as_str()[1..]);\n                 let float = TokenKind::lit(token::Float, symbol, suffix);"}, {"sha": "ab3368d0a492e784b79c408552192ef691ebd8ca", "filename": "src/librustc_hir/hir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c84ba112429eb9bc0b99a6fe32a453c920a764c/src%2Flibrustc_hir%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c84ba112429eb9bc0b99a6fe32a453c920a764c/src%2Flibrustc_hir%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir.rs?ref=7c84ba112429eb9bc0b99a6fe32a453c920a764c", "patch": "@@ -1496,7 +1496,7 @@ pub fn is_range_literal(sm: &SourceMap, expr: &Expr<'_>) -> bool {\n         let end_point = sm.end_point(*span);\n \n         if let Ok(end_string) = sm.span_to_snippet(end_point) {\n-            !(end_string.ends_with(\"}\") || end_string.ends_with(\")\"))\n+            !(end_string.ends_with('}') || end_string.ends_with(')'))\n         } else {\n             false\n         }"}, {"sha": "293815cb52d29bb998f4dba6fd3ab20e882a2c55", "filename": "src/librustc_incremental/assert_module_sources.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c84ba112429eb9bc0b99a6fe32a453c920a764c/src%2Flibrustc_incremental%2Fassert_module_sources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c84ba112429eb9bc0b99a6fe32a453c920a764c/src%2Flibrustc_incremental%2Fassert_module_sources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fassert_module_sources.rs?ref=7c84ba112429eb9bc0b99a6fe32a453c920a764c", "patch": "@@ -107,7 +107,7 @@ impl AssertModuleSource<'tcx> {\n         }\n \n         // Split of the \"special suffix\" if there is one.\n-        let (user_path, cgu_special_suffix) = if let Some(index) = user_path.rfind(\".\") {\n+        let (user_path, cgu_special_suffix) = if let Some(index) = user_path.rfind('.') {\n             (&user_path[..index], Some(&user_path[index + 1..]))\n         } else {\n             (&user_path[..], None)"}, {"sha": "8548ad392d2dd3b84ac1cb058fb3b95e473c9e6d", "filename": "src/librustc_incremental/persist/fs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7c84ba112429eb9bc0b99a6fe32a453c920a764c/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c84ba112429eb9bc0b99a6fe32a453c920a764c/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs?ref=7c84ba112429eb9bc0b99a6fe32a453c920a764c", "patch": "@@ -152,7 +152,7 @@ pub fn lock_file_path(session_dir: &Path) -> PathBuf {\n     let directory_name = session_dir.file_name().unwrap().to_string_lossy();\n     assert_no_characters_lost(&directory_name);\n \n-    let dash_indices: Vec<_> = directory_name.match_indices(\"-\").map(|(idx, _)| idx).collect();\n+    let dash_indices: Vec<_> = directory_name.match_indices('-').map(|(idx, _)| idx).collect();\n     if dash_indices.len() != 3 {\n         bug!(\n             \"Encountered incremental compilation session directory with \\\n@@ -342,7 +342,7 @@ pub fn finalize_session_directory(sess: &Session, svh: Svh) {\n \n     // Keep the 's-{timestamp}-{random-number}' prefix, but replace the\n     // '-working' part with the SVH of the crate\n-    let dash_indices: Vec<_> = old_sub_dir_name.match_indices(\"-\").map(|(idx, _)| idx).collect();\n+    let dash_indices: Vec<_> = old_sub_dir_name.match_indices('-').map(|(idx, _)| idx).collect();\n     if dash_indices.len() != 3 {\n         bug!(\n             \"Encountered incremental compilation session directory with \\\n@@ -594,7 +594,7 @@ fn extract_timestamp_from_session_dir(directory_name: &str) -> Result<SystemTime\n         return Err(());\n     }\n \n-    let dash_indices: Vec<_> = directory_name.match_indices(\"-\").map(|(idx, _)| idx).collect();\n+    let dash_indices: Vec<_> = directory_name.match_indices('-').map(|(idx, _)| idx).collect();\n     if dash_indices.len() != 3 {\n         return Err(());\n     }"}, {"sha": "f29a2609af45a15f135050ec8bb1dec26dc3024d", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c84ba112429eb9bc0b99a6fe32a453c920a764c/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c84ba112429eb9bc0b99a6fe32a453c920a764c/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=7c84ba112429eb9bc0b99a6fe32a453c920a764c", "patch": "@@ -244,7 +244,7 @@ pub fn get_codegen_backend(sess: &Session) -> Box<dyn CodegenBackend> {\n             .as_ref()\n             .unwrap_or(&sess.target.target.options.codegen_backend);\n         let backend = match &codegen_name[..] {\n-            filename if filename.contains(\".\") => load_backend_from_dylib(filename.as_ref()),\n+            filename if filename.contains('.') => load_backend_from_dylib(filename.as_ref()),\n             codegen_name => get_builtin_codegen_backend(codegen_name),\n         };\n "}, {"sha": "9b4f03b3fb64b975e4513b2816e2ef0375103113", "filename": "src/librustc_llvm/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c84ba112429eb9bc0b99a6fe32a453c920a764c/src%2Flibrustc_llvm%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c84ba112429eb9bc0b99a6fe32a453c920a764c/src%2Flibrustc_llvm%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fbuild.rs?ref=7c84ba112429eb9bc0b99a6fe32a453c920a764c", "patch": "@@ -178,7 +178,7 @@ fn main() {\n     for lib in output(&mut cmd).split_whitespace() {\n         let name = if lib.starts_with(\"-l\") {\n             &lib[2..]\n-        } else if lib.starts_with(\"-\") {\n+        } else if lib.starts_with('-') {\n             &lib[1..]\n         } else if Path::new(lib).exists() {\n             // On MSVC llvm-config will print the full name to libraries, but"}, {"sha": "8cd75d4a2fd27a085c7328882590c410ea407c16", "filename": "src/librustc_mir/borrow_check/diagnostics/region_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c84ba112429eb9bc0b99a6fe32a453c920a764c/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c84ba112429eb9bc0b99a6fe32a453c920a764c/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs?ref=7c84ba112429eb9bc0b99a6fe32a453c920a764c", "patch": "@@ -612,7 +612,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                         } else {\n                             \"'_\".to_string()\n                         };\n-                        let suggestion = if snippet.ends_with(\";\") {\n+                        let suggestion = if snippet.ends_with(';') {\n                             // `type X = impl Trait;`\n                             format!(\"{} + {};\", &snippet[..snippet.len() - 1], suggestable_fr_name)\n                         } else {"}, {"sha": "f5640f250043e3e67dbaee6c2d1cc59f1a342225", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c84ba112429eb9bc0b99a6fe32a453c920a764c/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c84ba112429eb9bc0b99a6fe32a453c920a764c/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=7c84ba112429eb9bc0b99a6fe32a453c920a764c", "patch": "@@ -365,7 +365,7 @@ fn do_mir_borrowck<'a, 'tcx>(\n         // Skip over locals that begin with an underscore or have no name\n         match mbcx.local_names[local] {\n             Some(name) => {\n-                if name.as_str().starts_with(\"_\") {\n+                if name.as_str().starts_with('_') {\n                     continue;\n                 }\n             }"}, {"sha": "c4588d5fb03732bf617ba9454962ca726be2699a", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c84ba112429eb9bc0b99a6fe32a453c920a764c/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c84ba112429eb9bc0b99a6fe32a453c920a764c/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=7c84ba112429eb9bc0b99a6fe32a453c920a764c", "patch": "@@ -122,7 +122,7 @@ impl<'tcx> MirSource<'tcx> {\n /// type `T`.\n pub fn default_name<T: ?Sized>() -> Cow<'static, str> {\n     let name = ::std::any::type_name::<T>();\n-    if let Some(tail) = name.rfind(\":\") { Cow::from(&name[tail + 1..]) } else { Cow::from(name) }\n+    if let Some(tail) = name.rfind(':') { Cow::from(&name[tail + 1..]) } else { Cow::from(name) }\n }\n \n /// A streamlined trait that you can implement to create a pass; the"}, {"sha": "a46d4cceeb2ed151e1812f6ff79b46dbadc02c4a", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c84ba112429eb9bc0b99a6fe32a453c920a764c/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c84ba112429eb9bc0b99a6fe32a453c920a764c/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=7c84ba112429eb9bc0b99a6fe32a453c920a764c", "patch": "@@ -758,7 +758,7 @@ impl<'a> Parser<'a> {\n                 s.print_usize(float.trunc() as usize);\n                 s.pclose();\n                 s.s.word(\".\");\n-                s.s.word(fstr.splitn(2, \".\").last().unwrap().to_string())\n+                s.s.word(fstr.splitn(2, '.').last().unwrap().to_string())\n             });\n             err.span_suggestion(\n                 lo.to(self.prev_span),"}, {"sha": "e2749c7bd7c880b0d3f0e6844e64a98e0b6ffa9a", "filename": "src/librustc_passes/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c84ba112429eb9bc0b99a6fe32a453c920a764c/src%2Flibrustc_passes%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c84ba112429eb9bc0b99a6fe32a453c920a764c/src%2Flibrustc_passes%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdead.rs?ref=7c84ba112429eb9bc0b99a6fe32a453c920a764c", "patch": "@@ -553,7 +553,7 @@ impl DeadVisitor<'tcx> {\n         node_type: &str,\n         participle: &str,\n     ) {\n-        if !name.as_str().starts_with(\"_\") {\n+        if !name.as_str().starts_with('_') {\n             self.tcx.struct_span_lint_hir(lint::builtin::DEAD_CODE, id, span, |lint| {\n                 lint.build(&format!(\"{} is never {}: `{}`\", node_type, participle, name)).emit()\n             });"}, {"sha": "2a9e335e924a2ac9ed350f2f45174e7d6d16a236", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c84ba112429eb9bc0b99a6fe32a453c920a764c/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c84ba112429eb9bc0b99a6fe32a453c920a764c/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=7c84ba112429eb9bc0b99a6fe32a453c920a764c", "patch": "@@ -1103,7 +1103,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n     // Macro uses will remove items from this set, and the remaining\n     // items will be reported as `unused_macros`.\n     fn insert_unused_macro(&mut self, ident: Ident, node_id: NodeId, span: Span) {\n-        if !ident.as_str().starts_with(\"_\") {\n+        if !ident.as_str().starts_with('_') {\n             self.r.unused_macros.insert(node_id, span);\n         }\n     }"}, {"sha": "540877d22c2d4df5b44a7b37e2c42a41d77c1005", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c84ba112429eb9bc0b99a6fe32a453c920a764c/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c84ba112429eb9bc0b99a6fe32a453c920a764c/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=7c84ba112429eb9bc0b99a6fe32a453c920a764c", "patch": "@@ -2663,7 +2663,7 @@ impl<'a> Resolver<'a> {\n                                 \"{} as {}{}\",\n                                 &snippet[..pos],\n                                 suggested_name,\n-                                if snippet.ends_with(\";\") { \";\" } else { \"\" }\n+                                if snippet.ends_with(';') { \";\" } else { \"\" }\n                             ))\n                         }\n                     }"}, {"sha": "edd0ba46f7565e6f5d846b24f4d8cbead701fe8e", "filename": "src/librustc_target/abi/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7c84ba112429eb9bc0b99a6fe32a453c920a764c/src%2Flibrustc_target%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c84ba112429eb9bc0b99a6fe32a453c920a764c/src%2Flibrustc_target%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fmod.rs?ref=7c84ba112429eb9bc0b99a6fe32a453c920a764c", "patch": "@@ -101,7 +101,7 @@ impl TargetDataLayout {\n             match &*spec_parts {\n                 [\"e\"] => dl.endian = Endian::Little,\n                 [\"E\"] => dl.endian = Endian::Big,\n-                [p] if p.starts_with(\"P\") => {\n+                [p] if p.starts_with('P') => {\n                     dl.instruction_address_space = parse_address_space(&p[1..], \"P\")?\n                 }\n                 [\"a\", ref a @ ..] => dl.aggregate_align = align(a, \"a\")?,\n@@ -111,7 +111,7 @@ impl TargetDataLayout {\n                     dl.pointer_size = size(s, p)?;\n                     dl.pointer_align = align(a, p)?;\n                 }\n-                [s, ref a @ ..] if s.starts_with(\"i\") => {\n+                [s, ref a @ ..] if s.starts_with('i') => {\n                     let bits = match s[1..].parse::<u64>() {\n                         Ok(bits) => bits,\n                         Err(_) => {\n@@ -135,7 +135,7 @@ impl TargetDataLayout {\n                         dl.i128_align = a;\n                     }\n                 }\n-                [s, ref a @ ..] if s.starts_with(\"v\") => {\n+                [s, ref a @ ..] if s.starts_with('v') => {\n                     let v_size = size(&s[1..], \"v\")?;\n                     let a = align(a, s)?;\n                     if let Some(v) = dl.vector_align.iter_mut().find(|v| v.0 == v_size) {"}, {"sha": "22480019d68ab5815bf1baf26da572ab6ca4863a", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c84ba112429eb9bc0b99a6fe32a453c920a764c/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c84ba112429eb9bc0b99a6fe32a453c920a764c/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=7c84ba112429eb9bc0b99a6fe32a453c920a764c", "patch": "@@ -1777,7 +1777,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             {\n                 let types: Vec<_> =\n                     assoc_items.iter().map(|item| format!(\"{} = Type\", item.ident)).collect();\n-                let code = if snippet.ends_with(\">\") {\n+                let code = if snippet.ends_with('>') {\n                     // The user wrote `Trait<'a>` or similar and we don't have a type we can\n                     // suggest, but at least we can clue them to the correct syntax\n                     // `Trait<'a, Item = Type>` while accounting for the `<'a>` in the"}, {"sha": "3ebd6fde8b364cb6dd98484e9b92d1e97485c09c", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7c84ba112429eb9bc0b99a6fe32a453c920a764c/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c84ba112429eb9bc0b99a6fe32a453c920a764c/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=7c84ba112429eb9bc0b99a6fe32a453c920a764c", "patch": "@@ -404,7 +404,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 {\n                     if let hir::ExprKind::Lit(_) = expr.kind {\n                         if let Ok(src) = sm.span_to_snippet(sp) {\n-                            if src.starts_with(\"\\\"\") {\n+                            if src.starts_with('\"') {\n                                 return Some((\n                                     sp,\n                                     \"consider adding a leading `b`\",\n@@ -701,7 +701,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 {\n                     // Remove fractional part from literal, for example `42.0f32` into `42`\n                     let src = src.trim_end_matches(&checked_ty.to_string());\n-                    src.split(\".\").next().unwrap()\n+                    src.split('.').next().unwrap()\n                 } else {\n                     src.trim_end_matches(&checked_ty.to_string())\n                 },"}, {"sha": "409403f19734de2afbf7a74bcf0ed21ac63298ac", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c84ba112429eb9bc0b99a6fe32a453c920a764c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c84ba112429eb9bc0b99a6fe32a453c920a764c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=7c84ba112429eb9bc0b99a6fe32a453c920a764c", "patch": "@@ -4996,7 +4996,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             let sugg = if receiver.ends_with(\".clone()\")\n                                 && method_call_list.contains(&method_call.as_str())\n                             {\n-                                let max_len = receiver.rfind(\".\").unwrap();\n+                                let max_len = receiver.rfind('.').unwrap();\n                                 format!(\"{}{}\", &receiver[..max_len], method_call)\n                             } else {\n                                 if expr.precedence().order() < ExprPrecedence::MethodCall.order() {"}, {"sha": "2c5dcdde5e8a3657d85ba9c9b5b51b44edddbc42", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7c84ba112429eb9bc0b99a6fe32a453c920a764c/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c84ba112429eb9bc0b99a6fe32a453c920a764c/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=7c84ba112429eb9bc0b99a6fe32a453c920a764c", "patch": "@@ -597,12 +597,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         Ok(lstring) => {\n                             err.span_suggestion(\n                                 lhs_expr.span,\n-                                if lstring.starts_with(\"&\") {\n+                                if lstring.starts_with('&') {\n                                     remove_borrow_msg\n                                 } else {\n                                     msg\n                                 },\n-                                if lstring.starts_with(\"&\") {\n+                                if lstring.starts_with('&') {\n                                     // let a = String::new();\n                                     // let _ = &a + \"bar\";\n                                     format!(\"{}\", &lstring[1..])\n@@ -630,7 +630,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     is_assign,\n                 ) {\n                     (Ok(l), Ok(r), false) => {\n-                        let to_string = if l.starts_with(\"&\") {\n+                        let to_string = if l.starts_with('&') {\n                             // let a = String::new(); let b = String::new();\n                             // let _ = &a + b;\n                             format!(\"{}\", &l[1..])"}, {"sha": "ff70767235cb60c8ca4f08d8852d00432a3d7a18", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7c84ba112429eb9bc0b99a6fe32a453c920a764c/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c84ba112429eb9bc0b99a6fe32a453c920a764c/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=7c84ba112429eb9bc0b99a6fe32a453c920a764c", "patch": "@@ -2206,7 +2206,7 @@ fn from_target_feature(\n                         item.span(),\n                         format!(\"`{}` is not valid for this target\", feature),\n                     );\n-                    if feature.starts_with(\"+\") {\n+                    if feature.starts_with('+') {\n                         let valid = whitelist.contains_key(&feature[1..]);\n                         if valid {\n                             err.help(\"consider removing the leading `+` in the feature name\");\n@@ -2337,7 +2337,7 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n             codegen_fn_attrs.flags |= CodegenFnAttrFlags::TRACK_CALLER;\n         } else if attr.check_name(sym::export_name) {\n             if let Some(s) = attr.value_str() {\n-                if s.as_str().contains(\"\\0\") {\n+                if s.as_str().contains('\\0') {\n                     // `#[export_name = ...]` will be converted to a null-terminated string,\n                     // so it may not contain any null characters.\n                     struct_span_err!("}, {"sha": "ff6431640d33e0f8e9acd6a779ea82d87d03dd83", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c84ba112429eb9bc0b99a6fe32a453c920a764c/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c84ba112429eb9bc0b99a6fe32a453c920a764c/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=7c84ba112429eb9bc0b99a6fe32a453c920a764c", "patch": "@@ -707,7 +707,7 @@ impl LangString {\n                 x if x.starts_with(\"edition\") => {\n                     data.edition = x[7..].parse::<Edition>().ok();\n                 }\n-                x if allow_error_code_check && x.starts_with(\"E\") && x.len() == 5 => {\n+                x if allow_error_code_check && x.starts_with('E') && x.len() == 5 => {\n                     if x[1..].parse::<u32>().is_ok() {\n                         data.error_codes.push(x.to_owned());\n                         seen_rust_tags = !seen_other_tags || seen_rust_tags;"}, {"sha": "59677b28245c2be750667f2bbdfa4db51007eb58", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c84ba112429eb9bc0b99a6fe32a453c920a764c/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c84ba112429eb9bc0b99a6fe32a453c920a764c/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=7c84ba112429eb9bc0b99a6fe32a453c920a764c", "patch": "@@ -86,7 +86,7 @@ pub type NameDoc = (String, Option<String>);\n \n crate fn ensure_trailing_slash(v: &str) -> impl fmt::Display + '_ {\n     crate::html::format::display_fn(move |f| {\n-        if !v.ends_with(\"/\") && !v.is_empty() { write!(f, \"{}/\", v) } else { write!(f, \"{}\", v) }\n+        if !v.ends_with('/') && !v.is_empty() { write!(f, \"{}/\", v) } else { write!(f, \"{}\", v) }\n     })\n }\n "}, {"sha": "e9ebccb7ec09e0849d5d730b90fe739aa5710669", "filename": "src/librustdoc/html/render/cache.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7c84ba112429eb9bc0b99a6fe32a453c920a764c/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c84ba112429eb9bc0b99a6fe32a453c920a764c/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs?ref=7c84ba112429eb9bc0b99a6fe32a453c920a764c", "patch": "@@ -534,7 +534,7 @@ fn extern_location(\n \n     if let Some(url) = extern_url {\n         let mut url = url.to_string();\n-        if !url.ends_with(\"/\") {\n+        if !url.ends_with('/') {\n             url.push('/');\n         }\n         return Remote(url);\n@@ -548,7 +548,7 @@ fn extern_location(\n         .filter_map(|a| a.value_str())\n         .map(|url| {\n             let mut url = url.to_string();\n-            if !url.ends_with(\"/\") {\n+            if !url.ends_with('/') {\n                 url.push('/')\n             }\n             Remote(url)"}, {"sha": "a41fdd2ff17af6cee98ee19915fee4073e38bfcb", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c84ba112429eb9bc0b99a6fe32a453c920a764c/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c84ba112429eb9bc0b99a6fe32a453c920a764c/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=7c84ba112429eb9bc0b99a6fe32a453c920a764c", "patch": "@@ -19,7 +19,7 @@ fn extract_leading_metadata(s: &str) -> (Vec<&str>, &str) {\n     let mut count = 0;\n \n     for line in s.lines() {\n-        if line.starts_with(\"# \") || line.starts_with(\"%\") {\n+        if line.starts_with(\"# \") || line.starts_with('%') {\n             // trim the whitespace after the symbol\n             metadata.push(line[1..].trim_start());\n             count += line.len() + 1;"}, {"sha": "a50dd9575de32f1fdf17bcbd14c7cdecad3221d3", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7c84ba112429eb9bc0b99a6fe32a453c920a764c/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c84ba112429eb9bc0b99a6fe32a453c920a764c/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=7c84ba112429eb9bc0b99a6fe32a453c920a764c", "patch": "@@ -2396,9 +2396,9 @@ impl<B: BufRead> Iterator for Lines<B> {\n         match self.buf.read_line(&mut buf) {\n             Ok(0) => None,\n             Ok(_n) => {\n-                if buf.ends_with(\"\\n\") {\n+                if buf.ends_with('\\n') {\n                     buf.pop();\n-                    if buf.ends_with(\"\\r\") {\n+                    if buf.ends_with('\\r') {\n                         buf.pop();\n                     }\n                 }"}]}