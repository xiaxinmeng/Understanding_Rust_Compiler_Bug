{"sha": "4f2ee0ef3a080ba5cc922dcd96c1fe9a0136e979", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmMmVlMGVmM2EwODBiYTVjYzkyMmRjZDk2YzFmZTlhMDEzNmU5Nzk=", "commit": {"author": {"name": "Gavin Baker", "email": "gavinb@antonym.org", "date": "2013-07-07T04:06:54Z"}, "committer": {"name": "Gavin Baker", "email": "gavinb@antonym.org", "date": "2013-07-07T04:45:39Z"}, "message": "Create man pages for rust tools", "tree": {"sha": "5324e3e90e515db95e6081026f47179ed0b3cc3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5324e3e90e515db95e6081026f47179ed0b3cc3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f2ee0ef3a080ba5cc922dcd96c1fe9a0136e979", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f2ee0ef3a080ba5cc922dcd96c1fe9a0136e979", "html_url": "https://github.com/rust-lang/rust/commit/4f2ee0ef3a080ba5cc922dcd96c1fe9a0136e979", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f2ee0ef3a080ba5cc922dcd96c1fe9a0136e979/comments", "author": {"login": "gavinb", "id": 158326, "node_id": "MDQ6VXNlcjE1ODMyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/158326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gavinb", "html_url": "https://github.com/gavinb", "followers_url": "https://api.github.com/users/gavinb/followers", "following_url": "https://api.github.com/users/gavinb/following{/other_user}", "gists_url": "https://api.github.com/users/gavinb/gists{/gist_id}", "starred_url": "https://api.github.com/users/gavinb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gavinb/subscriptions", "organizations_url": "https://api.github.com/users/gavinb/orgs", "repos_url": "https://api.github.com/users/gavinb/repos", "events_url": "https://api.github.com/users/gavinb/events{/privacy}", "received_events_url": "https://api.github.com/users/gavinb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gavinb", "id": 158326, "node_id": "MDQ6VXNlcjE1ODMyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/158326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gavinb", "html_url": "https://github.com/gavinb", "followers_url": "https://api.github.com/users/gavinb/followers", "following_url": "https://api.github.com/users/gavinb/following{/other_user}", "gists_url": "https://api.github.com/users/gavinb/gists{/gist_id}", "starred_url": "https://api.github.com/users/gavinb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gavinb/subscriptions", "organizations_url": "https://api.github.com/users/gavinb/orgs", "repos_url": "https://api.github.com/users/gavinb/repos", "events_url": "https://api.github.com/users/gavinb/events{/privacy}", "received_events_url": "https://api.github.com/users/gavinb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9f178c148858b3b121aaf849907905262a41a6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9f178c148858b3b121aaf849907905262a41a6c", "html_url": "https://github.com/rust-lang/rust/commit/a9f178c148858b3b121aaf849907905262a41a6c"}], "stats": {"total": 435, "additions": 433, "deletions": 2}, "files": [{"sha": "66bebb7ebe38488e4c9a4deddc932cdfcb7bd573", "filename": "man/rust.1", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/4f2ee0ef3a080ba5cc922dcd96c1fe9a0136e979/man%2Frust.1", "raw_url": "https://github.com/rust-lang/rust/raw/4f2ee0ef3a080ba5cc922dcd96c1fe9a0136e979/man%2Frust.1", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/man%2Frust.1?ref=4f2ee0ef3a080ba5cc922dcd96c1fe9a0136e979", "patch": "@@ -0,0 +1,111 @@\n+.TH RUST \"1\" \"July 2013\" \"rust 0.7\" \"User Commands\"\n+.SH NAME\n+rust \\- a front-end to the Rust toolchain\n+.SH SYNOPSIS\n+.B rust\n+[\\fICOMMAND\\fR] [\\fIOPTIONS\\fR] \\fIINPUT\\fR\n+\n+.SH DESCRIPTION\n+This tool is a front-end for the Rust language, available at\n+<\\fBhttps://www.rust-lang.org\\fR>. It provides commands to\n+run, test and package Rust programs.\n+\n+.SH COMMANDS\n+\n+.TP\n+\\fBbuild\\fR\n+compile rust source files\n+.TP\n+\\fBrun\\fR\n+build an executable, and run it\n+.TP\n+\\fBtest\\fR\n+build a test executable, and run it\n+.TP\n+\\fBdoc\\fR\n+generate documentation from doc comments\n+.TP\n+\\fBpkg\\fR\n+download, build, install rust packages\n+.TP\n+\\fBsketch\\fR\n+run a rust interpreter\n+.TP\n+\\fBhelp\\fR\n+show detailed usage of a command\n+\n+The build, run and test commands take the same parameters\n+as the rustc command.\n+\n+.SS \"BUILD COMMAND\"\n+\n+The \\fBbuild\\fR command is a shortcut for the \\fBrustc\\fR command line.\n+All options will be passed to the compiler verbatim. For example, to build\n+an optimised version:\n+\n+    $ rust build -O <filename>\n+\n+.SS \"RUN COMMAND\"\n+\n+The \\fBrun\\fR command is a shortcut for the \\fBrustc\\fR command line.\n+All options will be passed to the compiler verbatim, and if the compilation\n+is successful, the resultant executable will be invoked. For example, to\n+build and run an optimised version:\n+\n+    $ rust run -O <filename>\n+\n+.SS \"TEST COMMAND\"\n+\n+The \\fBtest\\fR command is a shortcut for the command line:\n+\n+    $ rustc --test <filename> -o <filestem>test~ && ./<filestem>test~\n+\n+.SS \"DOC COMMAND\"\n+\n+The \\fBdoc\\fR command is an alias for the rustdoc program. It is equivalent to:\n+\n+    $ rustdoc [options] <cratefile>\n+\n+.SS \"PKG COMMAND\"\n+\n+The \\fBpkg\\fR command is an alias for the rustpkg program. It is equivalent to:\n+\n+    $ rustpkg [options] <cratefile>\n+\n+.SS \"SKETCH COMMAND\"\n+\n+The \\fBsketch\\fR command launches the \\fBrusti\\fR interactive shell.\n+\n+.SS \"HELP COMMAND\"\n+\n+The \\fBhelp\\fR command displays a summary of available commands (ie. this text).\n+\n+.SH \"EXAMPLES\"\n+\n+To build an executable (with a main function):\n+    $ rust build hello.rs\n+\n+To build a library from a source file:\n+    $ rust build --lib hello-lib.rs\n+\n+To build and run an executable:\n+    $ rust run hello.rs\n+\n+To build an executable with unit tests and execute the tests:\n+    $ rust test hello.rs\n+\n+To create a package \n+\n+.SH \"SEE ALSO\"\n+rustc, rustdoc, rustpkg, rusti\n+\n+.SH \"BUGS\"\n+See <\\fBhttps://github.com/mozilla/rust/issues\\fR> for issues.\n+\n+.SH \"AUTHOR\"\n+See \\fBAUTHORS.txt\\fR in the rust source distribution. Graydon Hoare\n+<\\fIgraydon@mozilla.com\\fR> is the project leader.\n+\n+.SH \"COPYRIGHT\"\n+This work is dual-licensed under Apache 2.0 and MIT terms.  See \\fBCOPYRIGHT\\fR\n+file in the rust source distribution."}, {"sha": "2298d5e54554e1708a2fca0e16ae16e7b29cea9c", "filename": "man/rustc.1", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4f2ee0ef3a080ba5cc922dcd96c1fe9a0136e979/man%2Frustc.1", "raw_url": "https://github.com/rust-lang/rust/raw/4f2ee0ef3a080ba5cc922dcd96c1fe9a0136e979/man%2Frustc.1", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/man%2Frustc.1?ref=4f2ee0ef3a080ba5cc922dcd96c1fe9a0136e979", "patch": "@@ -86,10 +86,10 @@ Build a test harness\n \\fB\\-\\-target\\fR TRIPLE\n Target triple cpu-manufacturer-kernel[-os] to compile for (see\n http://sources.redhat.com/autobook/autobook/autobook_17.html\n-for detail)\n+for details)\n .TP\n \\fB\\-\\-target-feature\\fR TRIPLE\n-Target-specific attributes (see llc -mattr=help for detail)\n+Target-specific attributes (see llc -mattr=help for details)\n .TP\n \\fB\\-\\-android-cross-path\\fR PATH\n The path to the Android NDK\n@@ -128,6 +128,9 @@ To build either with a crate (.rc) file:\n To build an executable with debug info (experimental):\n     $ rustc -Z debug-info -o hello hello.rs\n \n+.SH \"SEE ALSO\"\n+\n+rust, rustdoc, rustpkg, rusti\n \n .SH \"BUGS\"\n See <\\fBhttps://github.com/mozilla/rust/issues\\fR> for issues."}, {"sha": "93a8f49898cd1164c7cc335cebb56ede28986f75", "filename": "man/rustdoc.1", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/4f2ee0ef3a080ba5cc922dcd96c1fe9a0136e979/man%2Frustdoc.1", "raw_url": "https://github.com/rust-lang/rust/raw/4f2ee0ef3a080ba5cc922dcd96c1fe9a0136e979/man%2Frustdoc.1", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/man%2Frustdoc.1?ref=4f2ee0ef3a080ba5cc922dcd96c1fe9a0136e979", "patch": "@@ -0,0 +1,63 @@\n+.TH RUSTDOC \"1\" \"July 2013\" \"rustdoc 0.7\" \"User Commands\"\n+.SH NAME\n+rustdoc \\- generate documentation from Rust source code\n+.SH SYNOPSIS\n+.B rustdoc\n+[\\fIOPTIONS\\fR] \\fICRATEFILE\\fR\n+\n+.SH DESCRIPTION\n+This tool generates API reference documentation by extracting comments from\n+source code written in the Rust language, available at <\\fBhttps://www.rust-\n+lang.org\\fR>. It provides several output formats for the generated\n+documentation.\n+\n+.SH COMMANDS\n+\n+.TP\n+--output-dir <val>\n+Put documents here (default: .)\n+.TP\n+--output-format <val>\n+markdown or html (default: html)\n+.TP\n+--output-style <val>\n+doc-per-crate or doc-per-mod (default: doc-per-mod)\n+.TP\n+--pandoc-cmd <val>\n+Command for running pandoc\n+.TP\n+-h, --help\n+Print help\n+\n+.SH \"OUTPUT FORMATS\"\n+\n+The rustdoc tool can generate documentation in either the Markdown\n+or HTML formats. It requires the pandoc tool\n+<\\fBhttp://johnmacfarlane.net/pandoc/\\fR> for conversion features.\n+\n+.SH \"EXAMPLES\"\n+\n+To generate documentation for the source in the current directory:\n+    $ rustdoc hello.rs\n+\n+To build documentation into a subdirectory named 'doc' in the Markdown\n+format:\n+    $ rustdoc --output-dir doc --output-format markdown hello.rs\n+\n+The generated HTML can be viewed with any standard web browser, while\n+the Markdown version is well-suited for conversion into other formats.\n+\n+.SH \"SEE ALSO\"\n+\n+rust, rustc, rustpkg, rusti\n+\n+.SH \"BUGS\"\n+See <\\fBhttps://github.com/mozilla/rust/issues\\fR> for issues.\n+\n+.SH \"AUTHOR\"\n+See \\fBAUTHORS.txt\\fR in the rust source distribution. Graydon Hoare\n+<\\fIgraydon@mozilla.com\\fR> is the project leader.\n+\n+.SH \"COPYRIGHT\"\n+This work is dual-licensed under Apache 2.0 and MIT terms.  See \\fBCOPYRIGHT\\fR\n+file in the rust source distribution."}, {"sha": "9f7d1733c6514a070d129a4a7a2e23400da35736", "filename": "man/rusti.1", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/4f2ee0ef3a080ba5cc922dcd96c1fe9a0136e979/man%2Frusti.1", "raw_url": "https://github.com/rust-lang/rust/raw/4f2ee0ef3a080ba5cc922dcd96c1fe9a0136e979/man%2Frusti.1", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/man%2Frusti.1?ref=4f2ee0ef3a080ba5cc922dcd96c1fe9a0136e979", "patch": "@@ -0,0 +1,82 @@\n+.TH RUSTI \"1\" \"July 2013\" \"rusti 0.7\" \"User Commands\"\n+\\\" Macros\n+..\n+.de Vb \\\" Begin verbatim text                                                   \n+.ft CW\n+.nf\n+.ne \\\\$1\n+..\n+.de Ve \\\" End verbatim text                                                     \n+.ft R\n+.fi\n+..\n+.SH NAME\n+rusti \\- Rust interactive shell\n+\n+.SH SYNOPSIS\n+.B rusti\n+\n+.SH DESCRIPTION\n+\n+This program is a REPL (Read-Eval-Print Loop) for the Rust language, available\n+at <\\fBhttps://www.rust-lang.org\\fR>. It provides an interactive shell to\n+evaluate Rust expressions, functions and code snippets, and to experiment with\n+Rust code.\n+\n+.B WARNING:\n+The Rust REPL is experimental and may be unstable. If you encounter problems,\n+please use the compiler instead.\n+\n+.SH OPTIONS\n+\n+Currently none.\n+\n+.SH SPECIAL COMMANDS\n+\n+The interactive shell evaluates all input as a sequence of Rust expressions,\n+except for a set of special commands prefixed by a colon ':'. These special\n+commands are described below:\n+\n+.TP\n+\\fB:help\\fR\n+Display a summary of available commands.\n+.TP\n+\\fB:{\\\\n ..lines.. \\\\n:}\\\\n\\fR\n+execute multiline command\n+.TP\n+\\fB:load <crate> ...\\fR\n+loads given crates as dynamic libraries\n+.TP\n+\\fB:clear\\fR\n+clear the bindings\n+.TP\n+\\fB:exit\\fR\n+exit from the repl\n+\n+.SH \"EXAMPLES\"\n+\n+A simple example session, declaring a variable, defining a function,\n+evaluating an expression and printing the result:\n+\n+.PP\n+.Vb\n+\\&\t\\fBrusti>\\fR let x = 42;\n+\\&\t\\fBrusti>\\fR fn square(n: int) -> int { n*n }\n+\\&\t\\fBrusti>\\fR println(fmt!(\"%d squared is %d\", x, square(x)));\n+\\&\t42 squared is 1764\n+.Ve\n+\n+.SH \"SEE ALSO\"\n+\n+rust, rustc, rustdoc, rustpkg\n+\n+.SH \"BUGS\"\n+See <\\fBhttps://github.com/mozilla/rust/issues\\fR> for issues.\n+\n+.SH \"AUTHOR\"\n+See \\fBAUTHORS.txt\\fR in the rust source distribution. Graydon Hoare\n+<\\fIgraydon@mozilla.com\\fR> is the project leader.\n+\n+.SH \"COPYRIGHT\"\n+This work is dual-licensed under Apache 2.0 and MIT terms.  See \\fBCOPYRIGHT\\fR\n+file in the rust source distribution."}, {"sha": "1ecc8c98183c1cbc8a0cb24300d80b8c55036b26", "filename": "man/rustpkg.1", "status": "added", "additions": 172, "deletions": 0, "changes": 172, "blob_url": "https://github.com/rust-lang/rust/blob/4f2ee0ef3a080ba5cc922dcd96c1fe9a0136e979/man%2Frustpkg.1", "raw_url": "https://github.com/rust-lang/rust/raw/4f2ee0ef3a080ba5cc922dcd96c1fe9a0136e979/man%2Frustpkg.1", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/man%2Frustpkg.1?ref=4f2ee0ef3a080ba5cc922dcd96c1fe9a0136e979", "patch": "@@ -0,0 +1,172 @@\n+.TH RUSTPKG \"1\" \"July 2013\" \"rustpkg 0.7\" \"User Commands\"\n+.SH NAME\n+rustpkg \\- package manager for Rust applications\n+.SH SYNOPSIS\n+.B rustpkg\n+[\\fICOMMAND\\fR] [\\fIOPTIONS\\fR] \\fIINPUT\\fR\n+\n+.SH DESCRIPTION\n+\n+This tool is a package manager for applications written in the Rust language,\n+available at <\\fBhttps://www.rust-lang.org\\fR>. It provides commands to build,\n+install and test Rust programs.\n+\n+.SH COMMANDS\n+\n+.TP\n+\\fBbuild\\fR\n+Build all targets described in the package script in the current\n+directory.\n+.TP\n+\\fBclean\\fR\n+Remove all build files in the work cache for the package in the current\n+directory.\n+.TP\n+\\fBdo\\fR\n+Runs a command in the package script.\n+.TP\n+\\fBinfo\\fR\n+Probe the package script in the current directory for information.\n+.TP\n+\\fBinstall\\fR\n+Install a package given a local archive or a remote URI or VCS.\n+.TP\n+\\fBprefer\\fR\n+Specify which version of a binary to use.\n+.TP\n+\\fBtest\\fR\n+Build all targets described in the package script in the current directory\n+with the test flag.\n+.TP\n+\\fBuninstall\\fR\n+Remove a package by id or name and optionally version.\n+.TP\n+\\fBunprefer\\fR\n+Remove links to the versioned binary.\n+.TP\n+\\fBhelp\\fR\n+show detailed usage of a command\n+\n+.SH \"BUILD COMMAND\"\n+\n+The \\fBbuild\\fR command builds all targets described in the package script in\n+the current directory.\n+\n+.TP\n+-c, --cfg\n+Pass a cfg flag to the package script\n+\n+.SH \"DO COMMAND\"\n+\n+The \\fBdo\\fR command runs a command in the package script. You can listen to a\n+command by tagging a function with the attribute `#[pkg_do(cmd)]`.\n+\n+.SH \"TEST COMMAND\"\n+\n+The test command is an shortcut for the command line:\n+\n+    $ rustc --test <filename> -o <filestem>test~ && ./<filestem>test~\n+\n+Note the trailing tilde on the output filename, which should ensure the\n+file does not clash with a user-generated files.\n+\n+.SH \"INFO COMMAND\"\n+\n+Probe the package script in the current directory for information.\n+\n+Options:\n+\n+.TP\n+-j, --json\n+Output the result as JSON\n+\n+.SH \"INSTALL COMMAND\"\n+\n+    rustpkg [options..] install [url] [target]\n+\n+Install a package from a URL by Git or cURL (FTP, HTTP, etc.).  If target is\n+provided, Git will checkout the branch or tag before continuing. If the URL\n+is a TAR file (with or without compression), extract it before\n+installing. If a URL isn't provided, the package will be built and installed\n+from the current directory (which is functionally the same as `rustpkg\n+build` and installing the result).\n+\n+Examples:\n+\n+    rustpkg install\n+    rustpkg install git://github.com/mozilla/servo.git\n+    rustpkg install git://github.com/mozilla/servo.git v0.1.2\n+    rustpkg install http://rust-lang.org/servo-0.1.2.tar.gz\n+\n+Options:\n+\n+.TP\n+-c, --cfg\n+Pass a cfg flag to the package script\n+\n+.SH \"PREFER COMMAND\"\n+\n+By default all binaries are given a unique name so that multiple versions\n+can coexist. The prefer command will symlink the uniquely named binary to\n+the binary directory under its bare name. If version is not supplied, the\n+latest version of the package will be preferred.\n+\n+Example:\n+\n+    export PATH=$PATH:/home/user/.rustpkg/bin\n+    rustpkg prefer machine@1.2.4\n+    machine -v\n+    ==> v1.2.4\n+    rustpkg prefer machine@0.4.6\n+    machine -v\n+    ==> v0.4.6\n+\n+.SH \"TEST COMMAND\"\n+\n+Build all targets described in the package script in the current directory\n+with the test flag. The test bootstraps will be run afterwards and the output\n+and exit code will be redirected.\n+\n+Options:\n+\n+.TP\n+-c, --cfg\n+Pass a cfg flag to the package script\n+\n+.SH \"UNINSTALL COMMAND\"\n+\n+Remove a package by id or name and optionally version. If the package(s)\n+is/are depended on by another package then they cannot be removed.\n+\n+.SH \"UNPREFER COMMAND\"\n+\n+    $ rustpkg [options..] unprefer <id|name>[@version]\n+\n+Remove all symlinks from the store to the binary directory for a package\n+name and optionally version. If version is not supplied, the latest version\n+of the package will be unpreferred. See `rustpkg prefer -h` for more\n+information.\n+\n+.SH \"EXAMPLES\"\n+\n+To clone, build and install a specific version of the Servo engine from\n+its git repository on Github:\n+    $ rustpkg install git://github.com/mozilla/servo.git v0.1.2\n+\n+To download the archive and install Servo from a tarball:\n+    $ rustpkg install http://rust-lang.org/servo-0.1.2.tar.gz\n+\n+.SH \"SEE ALSO\"\n+\n+rust, rustc, rustdoc, rusti\n+\n+.SH \"BUGS\"\n+See <\\fBhttps://github.com/mozilla/rust/issues\\fR> for issues.\n+\n+.SH \"AUTHOR\"\n+See \\fBAUTHORS.txt\\fR in the rust source distribution. Graydon Hoare\n+<\\fIgraydon@mozilla.com\\fR> is the project leader.\n+\n+.SH \"COPYRIGHT\"\n+This work is dual-licensed under Apache 2.0 and MIT terms.  See \\fBCOPYRIGHT\\fR\n+file in the rust source distribution."}]}