{"sha": "5cfad6fbae7ab6b0a64234f53f0f22ce4169da07", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjZmFkNmZiYWU3YWI2YjBhNjQyMzRmNTNmMGYyMmNlNDE2OWRhMDc=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-08-09T17:55:15Z"}, "committer": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-08-11T04:56:07Z"}, "message": "syntax: Shrink enum Token and enum nonterminal\n\n`enum Token` was 192 bytes (64-bit), as pointed out by pnkfelix; the only\nbloating variant being `INTERPOLATED(nonterminal)`.\n\nUpdating `enum nonterminal` to use ~ where variants included big types,\nshrunk size_of(Token) to 32 bytes (64-bit).\n\nI am unsure if the `nt_ident` variant should have an indirection, with\nast::ident being only 16 bytes (64-bit), but without this, enum Token\nwould be 40 bytes.\n\nA dumb benchmark says that compilation time is unchanged, while peak\nmemory usage for compiling std.rs is down 3%\n\nBefore::\n\n    $ time ./x86_64-unknown-linux-gnu/stage1/bin/rustc --cfg stage1 src/libstd/std.rs\n    19.00user 0.39system 0:19.41elapsed 99%CPU (0avgtext+0avgdata 627820maxresident)k\n    0inputs+28896outputs (0major+228665minor)pagefaults 0swaps\n    $ time ./x86_64-unknown-linux-gnu/stage1/bin/rustc -O --cfg stage1 src/libstd/std.rs\n    31.64user 0.34system 0:32.02elapsed 99%CPU (0avgtext+0avgdata 629876maxresident)k\n    0inputs+22432outputs (0major+229411minor)pagefaults 0swaps\n\nAfter::\n\n    $ time ./x86_64-unknown-linux-gnu/stage1/bin/rustc --cfg stage1 src/libstd/std.rs\n    19.07user 0.45system 0:19.55elapsed 99%CPU (0avgtext+0avgdata 609384maxresident)k\n    0inputs+28896outputs (0major+221997minor)pagefaults 0swaps\n\n    $ time ./x86_64-unknown-linux-gnu/stage1/bin/rustc -O --cfg stage1 src/libstd/std.rs\n    31.90user 0.34system 0:32.28elapsed 99%CPU (0avgtext+0avgdata 612080maxresident)k\n    0inputs+22432outputs (0major+223726minor)pagefaults 0swaps", "tree": {"sha": "f8340212eb8581b6699f52360fb2f3f21b7a99d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8340212eb8581b6699f52360fb2f3f21b7a99d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5cfad6fbae7ab6b0a64234f53f0f22ce4169da07", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5cfad6fbae7ab6b0a64234f53f0f22ce4169da07", "html_url": "https://github.com/rust-lang/rust/commit/5cfad6fbae7ab6b0a64234f53f0f22ce4169da07", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5cfad6fbae7ab6b0a64234f53f0f22ce4169da07/comments", "author": null, "committer": null, "parents": [{"sha": "bf809768ee8ff3ea4ef434721ff82b09a4df261a", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf809768ee8ff3ea4ef434721ff82b09a4df261a", "html_url": "https://github.com/rust-lang/rust/commit/bf809768ee8ff3ea4ef434721ff82b09a4df261a"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "29963a7b461229f4ad541e917e1f195a24526258", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5cfad6fbae7ab6b0a64234f53f0f22ce4169da07/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cfad6fbae7ab6b0a64234f53f0f22ce4169da07/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=5cfad6fbae7ab6b0a64234f53f0f22ce4169da07", "patch": "@@ -419,18 +419,18 @@ pub fn parse_nt(p: &Parser, name: &str) -> nonterminal {\n         Some(i) => token::nt_item(i),\n         None => p.fatal(\"expected an item keyword\")\n       },\n-      \"block\" => token::nt_block(p.parse_block()),\n+      \"block\" => token::nt_block(~p.parse_block()),\n       \"stmt\" => token::nt_stmt(p.parse_stmt(~[])),\n       \"pat\" => token::nt_pat(p.parse_pat()),\n       \"expr\" => token::nt_expr(p.parse_expr()),\n-      \"ty\" => token::nt_ty(p.parse_ty(false /* no need to disambiguate*/)),\n+      \"ty\" => token::nt_ty(~p.parse_ty(false /* no need to disambiguate*/)),\n       // this could be handled like a token, since it is one\n       \"ident\" => match *p.token {\n-        token::IDENT(sn,b) => { p.bump(); token::nt_ident(sn,b) }\n+        token::IDENT(sn,b) => { p.bump(); token::nt_ident(~sn,b) }\n         _ => p.fatal(~\"expected ident, found \"\n                      + token::to_str(get_ident_interner(), p.token))\n       },\n-      \"path\" => token::nt_path(p.parse_path_with_tps(false)),\n+      \"path\" => token::nt_path(~p.parse_path_with_tps(false)),\n       \"attr\" => token::nt_attr(@p.parse_attribute(false)),\n       \"tt\" => {\n         *p.quote_depth += 1u; //but in theory, non-quoted tts might be useful"}, {"sha": "9d3e916b500a7c589a620ab8dd10a2135ea2ee49", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5cfad6fbae7ab6b0a64234f53f0f22ce4169da07/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cfad6fbae7ab6b0a64234f53f0f22ce4169da07/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=5cfad6fbae7ab6b0a64234f53f0f22ce4169da07", "patch": "@@ -279,7 +279,7 @@ pub fn tt_next_token(r: &mut TtReader) -> TokenAndSpan {\n               /* sidestep the interpolation tricks for ident because\n               (a) idents can be in lots of places, so it'd be a pain\n               (b) we actually can, since it's a token. */\n-              matched_nonterminal(nt_ident(sn,b)) => {\n+              matched_nonterminal(nt_ident(~sn,b)) => {\n                 r.cur_span = sp; r.cur_tok = IDENT(sn,b);\n                 r.stack.idx += 1u;\n                 return ret_val;"}, {"sha": "59db1a3cfa25f23388b989f63d48861079b53493", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5cfad6fbae7ab6b0a64234f53f0f22ce4169da07/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cfad6fbae7ab6b0a64234f53f0f22ce4169da07/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=5cfad6fbae7ab6b0a64234f53f0f22ce4169da07", "patch": "@@ -146,7 +146,7 @@ macro_rules! maybe_whole_expr (\n                     Some($p.mk_expr(\n                         ($p).span.lo,\n                         ($p).span.hi,\n-                        expr_path(/* bad */ (*pt).clone())))\n+                        expr_path(/* bad */ (**pt).clone())))\n                 }\n                 _ => None\n             };\n@@ -235,8 +235,8 @@ macro_rules! maybe_whole (\n                 _ => None\n             };\n             match __found__ {\n-                Some(INTERPOLATED(token::$constructor(x))) => {\n-                    return (~[], x.clone())\n+                Some(INTERPOLATED(token::$constructor(ref x))) => {\n+                    return (~[], (**x).clone())\n                 }\n                 _ => {}\n             }\n@@ -939,7 +939,7 @@ impl Parser {\n     // Useless second parameter for compatibility with quasiquote macros.\n     // Bleh!\n     pub fn parse_ty(&self, _: bool) -> Ty {\n-        maybe_whole!(self, nt_ty);\n+        maybe_whole!(deref self, nt_ty);\n \n         let lo = self.span.lo;\n \n@@ -1293,7 +1293,7 @@ impl Parser {\n \n     // parse a path that doesn't have type parameters attached\n     pub fn parse_path_without_tps(&self) -> ast::Path {\n-        maybe_whole!(self, nt_path);\n+        maybe_whole!(deref self, nt_path);\n         let (ids,is_global,sp) = self.parse_path();\n         ast::Path { span: sp,\n                      global: is_global,\n@@ -1306,7 +1306,7 @@ impl Parser {\n                                         before_tps: Option<&fn()>) -> ast::Path {\n         debug!(\"parse_path_with_tps(colons=%b)\", colons);\n \n-        maybe_whole!(self, nt_path);\n+        maybe_whole!(deref self, nt_path);\n         let lo = self.span.lo;\n         let path = self.parse_path_without_tps();\n         if colons && !self.eat(&token::MOD_SEP) {\n@@ -3100,7 +3100,7 @@ impl Parser {\n \n     // parse a block. No inner attrs are allowed.\n     pub fn parse_block(&self) -> Block {\n-        maybe_whole!(self, nt_block);\n+        maybe_whole!(deref self, nt_block);\n \n         let lo = self.span.lo;\n         if self.eat_keyword(keywords::Unsafe) {"}, {"sha": "bdfd25ae644da2a85af997adc3b9bb922cebcd09", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5cfad6fbae7ab6b0a64234f53f0f22ce4169da07/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cfad6fbae7ab6b0a64234f53f0f22ce4169da07/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=5cfad6fbae7ab6b0a64234f53f0f22ce4169da07", "patch": "@@ -99,14 +99,14 @@ pub enum Token {\n /// For interpolation during macro expansion.\n pub enum nonterminal {\n     nt_item(@ast::item),\n-    nt_block(ast::Block),\n+    nt_block(~ast::Block),\n     nt_stmt(@ast::stmt),\n     nt_pat( @ast::pat),\n     nt_expr(@ast::expr),\n-    nt_ty(   ast::Ty),\n-    nt_ident(ast::ident, bool),\n+    nt_ty(  ~ast::Ty),\n+    nt_ident(~ast::ident, bool),\n     nt_attr(@ast::Attribute),   // #[foo]\n-    nt_path( ast::Path),\n+    nt_path(~ast::Path),\n     nt_tt(  @ast::token_tree), //needs @ed to break a circularity\n     nt_matchers(~[ast::matcher])\n }"}]}