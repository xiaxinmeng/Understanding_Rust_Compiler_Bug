{"sha": "472ae16bfbdb8983f7bf94dfe1429a028998a8ef", "node_id": "C_kwDOAAsO6NoAKDQ3MmFlMTZiZmJkYjg5ODNmN2JmOTRkZmUxNDI5YTAyODk5OGE4ZWY", "commit": {"author": {"name": "yue4u", "email": "github@yue.coffee", "date": "2022-06-23T15:00:51Z"}, "committer": {"name": "yue4u", "email": "github@yue.coffee", "date": "2022-06-23T15:00:51Z"}, "message": "fix: completes non exhaustive variant within the defining crate", "tree": {"sha": "52ac77ae925022f6d56a37fbc501184d0b831516", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52ac77ae925022f6d56a37fbc501184d0b831516"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/472ae16bfbdb8983f7bf94dfe1429a028998a8ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/472ae16bfbdb8983f7bf94dfe1429a028998a8ef", "html_url": "https://github.com/rust-lang/rust/commit/472ae16bfbdb8983f7bf94dfe1429a028998a8ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/472ae16bfbdb8983f7bf94dfe1429a028998a8ef/comments", "author": {"login": "yue4u", "id": 26110087, "node_id": "MDQ6VXNlcjI2MTEwMDg3", "avatar_url": "https://avatars.githubusercontent.com/u/26110087?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yue4u", "html_url": "https://github.com/yue4u", "followers_url": "https://api.github.com/users/yue4u/followers", "following_url": "https://api.github.com/users/yue4u/following{/other_user}", "gists_url": "https://api.github.com/users/yue4u/gists{/gist_id}", "starred_url": "https://api.github.com/users/yue4u/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yue4u/subscriptions", "organizations_url": "https://api.github.com/users/yue4u/orgs", "repos_url": "https://api.github.com/users/yue4u/repos", "events_url": "https://api.github.com/users/yue4u/events{/privacy}", "received_events_url": "https://api.github.com/users/yue4u/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yue4u", "id": 26110087, "node_id": "MDQ6VXNlcjI2MTEwMDg3", "avatar_url": "https://avatars.githubusercontent.com/u/26110087?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yue4u", "html_url": "https://github.com/yue4u", "followers_url": "https://api.github.com/users/yue4u/followers", "following_url": "https://api.github.com/users/yue4u/following{/other_user}", "gists_url": "https://api.github.com/users/yue4u/gists{/gist_id}", "starred_url": "https://api.github.com/users/yue4u/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yue4u/subscriptions", "organizations_url": "https://api.github.com/users/yue4u/orgs", "repos_url": "https://api.github.com/users/yue4u/repos", "events_url": "https://api.github.com/users/yue4u/events{/privacy}", "received_events_url": "https://api.github.com/users/yue4u/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6fc5c3cd2117a29981ba9b7cef8a51c1d6804089", "url": "https://api.github.com/repos/rust-lang/rust/commits/6fc5c3cd2117a29981ba9b7cef8a51c1d6804089", "html_url": "https://github.com/rust-lang/rust/commit/6fc5c3cd2117a29981ba9b7cef8a51c1d6804089"}], "stats": {"total": 69, "additions": 64, "deletions": 5}, "files": [{"sha": "cc4d14c12da40749d56d4270d9b144b04bb32ffb", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/472ae16bfbdb8983f7bf94dfe1429a028998a8ef/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/472ae16bfbdb8983f7bf94dfe1429a028998a8ef/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=472ae16bfbdb8983f7bf94dfe1429a028998a8ef", "patch": "@@ -3497,12 +3497,30 @@ impl HasCrate for AssocItem {\n     }\n }\n \n+impl HasCrate for Struct {\n+    fn krate(&self, db: &dyn HirDatabase) -> Crate {\n+        self.module(db).krate()\n+    }\n+}\n+\n+impl HasCrate for Union {\n+    fn krate(&self, db: &dyn HirDatabase) -> Crate {\n+        self.module(db).krate()\n+    }\n+}\n+\n impl HasCrate for Field {\n     fn krate(&self, db: &dyn HirDatabase) -> Crate {\n         self.parent_def(db).module(db).krate()\n     }\n }\n \n+impl HasCrate for Variant {\n+    fn krate(&self, db: &dyn HirDatabase) -> Crate {\n+        self.module(db).krate()\n+    }\n+}\n+\n impl HasCrate for Function {\n     fn krate(&self, db: &dyn HirDatabase) -> Crate {\n         self.module(db).krate()"}, {"sha": "2c9fb9b35ad2695bb61404eac4bff3c1bb25e1d5", "filename": "crates/ide-completion/src/render/variant.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/472ae16bfbdb8983f7bf94dfe1429a028998a8ef/crates%2Fide-completion%2Fsrc%2Frender%2Fvariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/472ae16bfbdb8983f7bf94dfe1429a028998a8ef/crates%2Fide-completion%2Fsrc%2Frender%2Fvariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender%2Fvariant.rs?ref=472ae16bfbdb8983f7bf94dfe1429a028998a8ef", "patch": "@@ -1,7 +1,7 @@\n //! Code common to structs, unions, and enum variants.\n \n use crate::context::CompletionContext;\n-use hir::{db::HirDatabase, HasAttrs, HasVisibility, HirDisplay, StructKind};\n+use hir::{db::HirDatabase, HasAttrs, HasCrate, HasVisibility, HirDisplay, StructKind};\n use ide_db::SnippetCap;\n use itertools::Itertools;\n use syntax::SmolStr;\n@@ -70,7 +70,7 @@ pub(crate) fn render_tuple_lit(\n pub(crate) fn visible_fields(\n     ctx: &CompletionContext,\n     fields: &[hir::Field],\n-    item: impl HasAttrs,\n+    item: impl HasAttrs + HasCrate + Copy,\n ) -> Option<(Vec<hir::Field>, bool)> {\n     let module = ctx.module;\n     let n_fields = fields.len();\n@@ -79,9 +79,10 @@ pub(crate) fn visible_fields(\n         .filter(|field| field.is_visible_from(ctx.db, module))\n         .copied()\n         .collect::<Vec<_>>();\n-\n-    let fields_omitted =\n-        n_fields - fields.len() > 0 || item.attrs(ctx.db).by_key(\"non_exhaustive\").exists();\n+    let has_invisible_field = n_fields - fields.len() > 0;\n+    let is_foreign_non_exhaustive = item.attrs(ctx.db).by_key(\"non_exhaustive\").exists()\n+        && item.krate(ctx.db) != module.krate();\n+    let fields_omitted = has_invisible_field || is_foreign_non_exhaustive;\n     Some((fields, fields_omitted))\n }\n "}, {"sha": "f1557107e0d740aa459a7f83c26985e1a8ce064d", "filename": "crates/ide-completion/src/tests/special.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/472ae16bfbdb8983f7bf94dfe1429a028998a8ef/crates%2Fide-completion%2Fsrc%2Ftests%2Fspecial.rs", "raw_url": "https://github.com/rust-lang/rust/raw/472ae16bfbdb8983f7bf94dfe1429a028998a8ef/crates%2Fide-completion%2Fsrc%2Ftests%2Fspecial.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Fspecial.rs?ref=472ae16bfbdb8983f7bf94dfe1429a028998a8ef", "patch": "@@ -540,6 +540,46 @@ impl Foo {\n     );\n }\n \n+#[test]\n+fn completes_non_exhaustive_variant_within_the_defining_crate() {\n+    check(\n+        r#\"\n+enum Foo {\n+    #[non_exhaustive]\n+    Bar,\n+    Baz,\n+}\n+\n+fn foo(self) {\n+    Foo::$0\n+}\n+\"#,\n+        expect![[r#\"\n+                ev Bar Bar\n+                ev Baz Baz\n+            \"#]],\n+    );\n+\n+    check(\n+        r#\"\n+//- /main.rs crate:main deps:e\n+fn foo(self) {\n+    e::Foo::$0\n+}\n+\n+//- /e.rs crate:e\n+enum Foo {\n+    #[non_exhaustive]\n+    Bar,\n+    Baz,\n+}\n+\"#,\n+        expect![[r#\"\n+                ev Baz Baz\n+            \"#]],\n+    );\n+}\n+\n #[test]\n fn completes_primitive_assoc_const() {\n     cov_mark::check!(completes_primitive_assoc_const);"}]}