{"sha": "64a42db51a8d866031fe69cd68a9ca108a8435fa", "node_id": "C_kwDOAAsO6NoAKDY0YTQyZGI1MWE4ZDg2NjAzMWZlNjljZDY4YTljYTEwOGE4NDM1ZmE", "commit": {"author": {"name": "Markus Reiter", "email": "me@reitermark.us", "date": "2022-09-12T17:03:24Z"}, "committer": {"name": "Markus Reiter", "email": "me@reitermark.us", "date": "2022-09-12T17:46:51Z"}, "message": "Simplify `clippy` fix.", "tree": {"sha": "90316d4e928c60e5b34e5c041ec70a5ab48f6cd4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90316d4e928c60e5b34e5c041ec70a5ab48f6cd4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64a42db51a8d866031fe69cd68a9ca108a8435fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64a42db51a8d866031fe69cd68a9ca108a8435fa", "html_url": "https://github.com/rust-lang/rust/commit/64a42db51a8d866031fe69cd68a9ca108a8435fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64a42db51a8d866031fe69cd68a9ca108a8435fa/comments", "author": {"login": "reitermarkus", "id": 1309829, "node_id": "MDQ6VXNlcjEzMDk4Mjk=", "avatar_url": "https://avatars.githubusercontent.com/u/1309829?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reitermarkus", "html_url": "https://github.com/reitermarkus", "followers_url": "https://api.github.com/users/reitermarkus/followers", "following_url": "https://api.github.com/users/reitermarkus/following{/other_user}", "gists_url": "https://api.github.com/users/reitermarkus/gists{/gist_id}", "starred_url": "https://api.github.com/users/reitermarkus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reitermarkus/subscriptions", "organizations_url": "https://api.github.com/users/reitermarkus/orgs", "repos_url": "https://api.github.com/users/reitermarkus/repos", "events_url": "https://api.github.com/users/reitermarkus/events{/privacy}", "received_events_url": "https://api.github.com/users/reitermarkus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "reitermarkus", "id": 1309829, "node_id": "MDQ6VXNlcjEzMDk4Mjk=", "avatar_url": "https://avatars.githubusercontent.com/u/1309829?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reitermarkus", "html_url": "https://github.com/reitermarkus", "followers_url": "https://api.github.com/users/reitermarkus/followers", "following_url": "https://api.github.com/users/reitermarkus/following{/other_user}", "gists_url": "https://api.github.com/users/reitermarkus/gists{/gist_id}", "starred_url": "https://api.github.com/users/reitermarkus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reitermarkus/subscriptions", "organizations_url": "https://api.github.com/users/reitermarkus/orgs", "repos_url": "https://api.github.com/users/reitermarkus/repos", "events_url": "https://api.github.com/users/reitermarkus/events{/privacy}", "received_events_url": "https://api.github.com/users/reitermarkus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0e249ce675924f760e94b0426fbb450f1d1c2cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0e249ce675924f760e94b0426fbb450f1d1c2cb", "html_url": "https://github.com/rust-lang/rust/commit/c0e249ce675924f760e94b0426fbb450f1d1c2cb"}], "stats": {"total": 61, "additions": 22, "deletions": 39}, "files": [{"sha": "c89784065b8be775d4ba7fc6fd967dc0b77d9f2d", "filename": "clippy_lints/src/matches/redundant_pattern_match.rs", "status": "modified", "additions": 22, "deletions": 37, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/64a42db51a8d866031fe69cd68a9ca108a8435fa/clippy_lints%2Fsrc%2Fmatches%2Fredundant_pattern_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a42db51a8d866031fe69cd68a9ca108a8435fa/clippy_lints%2Fsrc%2Fmatches%2Fredundant_pattern_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fredundant_pattern_match.rs?ref=64a42db51a8d866031fe69cd68a9ca108a8435fa", "patch": "@@ -4,15 +4,15 @@ use clippy_utils::source::snippet;\n use clippy_utils::sugg::Sugg;\n use clippy_utils::ty::{is_type_diagnostic_item, needs_ordered_drop};\n use clippy_utils::visitors::any_temporaries_need_ordered_drop;\n-use clippy_utils::{higher, is_lang_ctor, is_trait_method, match_def_path, paths};\n+use clippy_utils::{higher, is_lang_ctor, is_trait_method};\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n-use rustc_hir::LangItem::{OptionNone, PollPending};\n+use rustc_hir::LangItem::{self, OptionSome, OptionNone, PollPending, PollReady, ResultOk, ResultErr};\n use rustc_hir::{Arm, Expr, ExprKind, Node, Pat, PatKind, QPath, UnOp};\n use rustc_lint::LateContext;\n use rustc_middle::ty::{self, subst::GenericArgKind, DefIdTree, Ty};\n-use rustc_span::{sym, Symbol, def_id::DefId};\n+use rustc_span::{sym, Symbol};\n \n pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n     if let Some(higher::WhileLet { let_pat, let_expr, .. }) = higher::WhileLet::hir(expr) {\n@@ -75,9 +75,9 @@ fn find_sugg_for_if_let<'tcx>(\n                     (\"is_some()\", op_ty)\n                 } else if Some(id) == lang_items.poll_ready_variant() {\n                     (\"is_ready()\", op_ty)\n-                } else if is_pat_variant(cx, check_pat, qpath, &paths::IPADDR_V4, Item::Diag(sym!(IpAddr), sym!(V4))) {\n+                } else if is_pat_variant(cx, check_pat, qpath, Item::Diag(sym::IpAddr, sym!(V4))) {\n                     (\"is_ipv4()\", op_ty)\n-                } else if is_pat_variant(cx, check_pat, qpath, &paths::IPADDR_V6, Item::Diag(sym!(IpAddr), sym!(V6))) {\n+                } else if is_pat_variant(cx, check_pat, qpath, Item::Diag(sym::IpAddr, sym!(V6))) {\n                     (\"is_ipv6()\", op_ty)\n                 } else {\n                     return;\n@@ -174,7 +174,6 @@ fn find_sugg_for_if_let<'tcx>(\n \n pub(super) fn check_match<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, op: &Expr<'_>, arms: &[Arm<'_>]) {\n     if arms.len() == 2 {\n-        let lang_items = cx.tcx.lang_items();\n         let node_pair = (&arms[0].pat.kind, &arms[1].pat.kind);\n \n         let found_good_method = match node_pair {\n@@ -188,10 +187,8 @@ pub(super) fn check_match<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, op\n                         arms,\n                         path_left,\n                         path_right,\n-                        &paths::RESULT_OK,\n-                        Item::Lang(lang_items.result_ok_variant()),\n-                        &paths::RESULT_ERR,\n-                        Item::Lang(lang_items.result_err_variant()),\n+                        Item::Lang(ResultOk),\n+                        Item::Lang(ResultErr),\n                         \"is_ok()\",\n                         \"is_err()\",\n                     )\n@@ -201,10 +198,8 @@ pub(super) fn check_match<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, op\n                             arms,\n                             path_left,\n                             path_right,\n-                            &paths::IPADDR_V4,\n-                            Item::Diag(sym!(IpAddr), sym!(V4)),\n-                            &paths::IPADDR_V6,\n-                            Item::Diag(sym!(IpAddr), sym!(V6)),\n+                            Item::Diag(sym::IpAddr, sym!(V4)),\n+                            Item::Diag(sym::IpAddr, sym!(V6)),\n                             \"is_ipv4()\",\n                             \"is_ipv6()\",\n                         )\n@@ -224,10 +219,8 @@ pub(super) fn check_match<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, op\n                         arms,\n                         path_left,\n                         path_right,\n-                        &paths::OPTION_SOME,\n-                        Item::Lang(lang_items.option_some_variant()),\n-                        &paths::OPTION_NONE,\n-                        Item::Lang(lang_items.option_none_variant()),\n+                        Item::Lang(OptionSome),\n+                        Item::Lang(OptionNone),\n                         \"is_some()\",\n                         \"is_none()\",\n                     )\n@@ -237,10 +230,8 @@ pub(super) fn check_match<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, op\n                             arms,\n                             path_left,\n                             path_right,\n-                            &paths::POLL_READY,\n-                            Item::Lang(lang_items.poll_ready_variant()),\n-                            &paths::POLL_PENDING,\n-                            Item::Lang(lang_items.poll_pending_variant()),\n+                            Item::Lang(PollReady),\n+                            Item::Lang(PollPending),\n                             \"is_ready()\",\n                             \"is_pending()\",\n                         )\n@@ -278,21 +269,17 @@ pub(super) fn check_match<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, op\n \n #[derive(Clone, Copy)]\n enum Item {\n-  Lang(Option<DefId>),\n+  Lang(LangItem),\n   Diag(Symbol, Symbol),\n }\n \n-fn is_pat_variant(cx: &LateContext<'_>, pat: &Pat<'_>, path: &QPath<'_>, expected_path: &[&str], expected_item: Item) -> bool {\n+fn is_pat_variant(cx: &LateContext<'_>, pat: &Pat<'_>, path: &QPath<'_>, expected_item: Item) -> bool {\n     let Some(id) = cx.typeck_results().qpath_res(path, pat.hir_id).opt_def_id() else { return false };\n \n-    // TODO: Path matching can be removed when `IpAddr` is a diagnostic item.\n-    if match_def_path(cx, id, expected_path) {\n-        return true\n-    }\n-\n     match expected_item {\n-        Item::Lang(expected_id) => {\n-            Some(cx.tcx.parent(id)) == expected_id\n+        Item::Lang(expected_lang_item) => {\n+            let expected_id = cx.tcx.lang_items().require(expected_lang_item).unwrap();\n+            cx.tcx.parent(id) == expected_id\n         },\n         Item::Diag(expected_ty, expected_variant) => {\n             let ty = cx.typeck_results().pat_ty(pat);\n@@ -316,9 +303,7 @@ fn find_good_method_for_match<'a>(\n     arms: &[Arm<'_>],\n     path_left: &QPath<'_>,\n     path_right: &QPath<'_>,\n-    expected_path_left: &[&str],\n     expected_item_left: Item,\n-    expected_path_right: &[&str],\n     expected_item_right: Item,\n     should_be_left: &'a str,\n     should_be_right: &'a str,\n@@ -327,15 +312,15 @@ fn find_good_method_for_match<'a>(\n     let pat_right = arms[1].pat;\n \n     let body_node_pair = if (\n-        is_pat_variant(cx, pat_left, path_left, expected_path_left, expected_item_left)\n+        is_pat_variant(cx, pat_left, path_left, expected_item_left)\n     ) && (\n-        is_pat_variant(cx, pat_right, path_right, expected_path_right, expected_item_right)\n+        is_pat_variant(cx, pat_right, path_right, expected_item_right)\n     ) {\n         (&arms[0].body.kind, &arms[1].body.kind)\n     } else if (\n-        is_pat_variant(cx, pat_left, path_left, expected_path_right, expected_item_right)\n+        is_pat_variant(cx, pat_left, path_left, expected_item_right)\n     ) && (\n-        is_pat_variant(cx, pat_right, path_right, expected_path_left, expected_item_left)\n+        is_pat_variant(cx, pat_right, path_right, expected_item_left)\n     ) {\n         (&arms[1].body.kind, &arms[0].body.kind)\n     } else {"}, {"sha": "07170e2df12ab2be340c0d5affdc5d4a88641a66", "filename": "clippy_utils/src/paths.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64a42db51a8d866031fe69cd68a9ca108a8435fa/clippy_utils%2Fsrc%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a42db51a8d866031fe69cd68a9ca108a8435fa/clippy_utils%2Fsrc%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fpaths.rs?ref=64a42db51a8d866031fe69cd68a9ca108a8435fa", "patch": "@@ -66,8 +66,6 @@ pub const INDEX_MUT: [&str; 3] = [\"core\", \"ops\", \"IndexMut\"];\n pub const INSERT_STR: [&str; 4] = [\"alloc\", \"string\", \"String\", \"insert_str\"];\n pub const IO_READ: [&str; 3] = [\"std\", \"io\", \"Read\"];\n pub const IO_WRITE: [&str; 3] = [\"std\", \"io\", \"Write\"];\n-pub const IPADDR_V4: [&str; 5] = [\"std\", \"net\", \"ip\", \"IpAddr\", \"V4\"];\n-pub const IPADDR_V6: [&str; 5] = [\"std\", \"net\", \"ip\", \"IpAddr\", \"V6\"];\n pub const ITER_COUNT: [&str; 6] = [\"core\", \"iter\", \"traits\", \"iterator\", \"Iterator\", \"count\"];\n pub const ITER_EMPTY: [&str; 5] = [\"core\", \"iter\", \"sources\", \"empty\", \"Empty\"];\n pub const ITER_REPEAT: [&str; 5] = [\"core\", \"iter\", \"sources\", \"repeat\", \"repeat\"];"}]}