{"sha": "2000f91f68d2218b01401b9b92177090d784e724", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwMDBmOTFmNjhkMjIxOGIwMTQwMWI5YjkyMTc3MDkwZDc4NGU3MjQ=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-04-18T01:31:25Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-04-20T17:42:25Z"}, "message": "Remove some `Vec` allocations in an effort to improve perf", "tree": {"sha": "d3582bbcd3938236c527494d2c9e7f6fc69930a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3582bbcd3938236c527494d2c9e7f6fc69930a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2000f91f68d2218b01401b9b92177090d784e724", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2000f91f68d2218b01401b9b92177090d784e724", "html_url": "https://github.com/rust-lang/rust/commit/2000f91f68d2218b01401b9b92177090d784e724", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2000f91f68d2218b01401b9b92177090d784e724/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ce3f840ae9b735a66531996c32330f24b877cb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ce3f840ae9b735a66531996c32330f24b877cb0", "html_url": "https://github.com/rust-lang/rust/commit/8ce3f840ae9b735a66531996c32330f24b877cb0"}], "stats": {"total": 92, "additions": 38, "deletions": 54}, "files": [{"sha": "5020dc4132cc34a3d017767339feaf2e66f7cefa", "filename": "src/librustc_infer/infer/outlives/verify.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2000f91f68d2218b01401b9b92177090d784e724/src%2Flibrustc_infer%2Finfer%2Foutlives%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2000f91f68d2218b01401b9b92177090d784e724/src%2Flibrustc_infer%2Finfer%2Foutlives%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Foutlives%2Fverify.rs?ref=2000f91f68d2218b01401b9b92177090d784e724", "patch": "@@ -223,7 +223,7 @@ impl<'cx, 'tcx> VerifyBoundCx<'cx, 'tcx> {\n         // like `T` and `T::Item`. It may not work as well for things\n         // like `<T as Foo<'a>>::Item`.\n         let c_b = self.param_env.caller_bounds;\n-        let param_bounds = self.collect_outlives_from_predicate_list(&compare_ty, c_b);\n+        let param_bounds = self.collect_outlives_from_predicate_list(&compare_ty, c_b.into_iter());\n \n         // Next, collect regions we scraped from the well-formedness\n         // constraints in the fn signature. To do that, we walk the list\n@@ -315,15 +315,12 @@ impl<'cx, 'tcx> VerifyBoundCx<'cx, 'tcx> {\n         let tcx = self.tcx;\n         let assoc_item = tcx.associated_item(assoc_item_def_id);\n         let trait_def_id = assoc_item.container.assert_trait();\n-        let trait_predicates =\n-            tcx.predicates_of(trait_def_id).predicates.iter().map(|(p, _)| *p).collect();\n+        let trait_predicates = tcx.predicates_of(trait_def_id).predicates.iter().map(|(p, _)| *p);\n         let identity_substs = InternalSubsts::identity_for_item(tcx, assoc_item_def_id);\n         let identity_proj = tcx.mk_projection(assoc_item_def_id, identity_substs);\n         self.collect_outlives_from_predicate_list(\n             move |ty| ty == identity_proj,\n-            traits::elaborate_predicates(tcx, trait_predicates)\n-                .map(|o| o.predicate)\n-                .collect::<Vec<_>>(),\n+            traits::elaborate_predicates(tcx, trait_predicates).map(|o| o.predicate),\n         )\n         .map(|b| b.1)\n     }\n@@ -337,10 +334,9 @@ impl<'cx, 'tcx> VerifyBoundCx<'cx, 'tcx> {\n     fn collect_outlives_from_predicate_list(\n         &self,\n         compare_ty: impl Fn(Ty<'tcx>) -> bool,\n-        predicates: impl IntoIterator<Item = impl AsRef<ty::Predicate<'tcx>>>,\n+        predicates: impl Iterator<Item = impl AsRef<ty::Predicate<'tcx>>>,\n     ) -> impl Iterator<Item = ty::OutlivesPredicate<Ty<'tcx>, ty::Region<'tcx>>> {\n         predicates\n-            .into_iter()\n             .filter_map(|p| p.as_ref().to_opt_type_outlives())\n             .filter_map(|p| p.no_bound_vars())\n             .filter(move |p| compare_ty(p.0))"}, {"sha": "8aacea735f476edf01348f0a2d69e934036f5f39", "filename": "src/librustc_infer/traits/util.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2000f91f68d2218b01401b9b92177090d784e724/src%2Flibrustc_infer%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2000f91f68d2218b01401b9b92177090d784e724/src%2Flibrustc_infer%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Futil.rs?ref=2000f91f68d2218b01401b9b92177090d784e724", "patch": "@@ -97,24 +97,22 @@ pub fn elaborate_trait_ref<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     trait_ref: ty::PolyTraitRef<'tcx>,\n ) -> Elaborator<'tcx> {\n-    elaborate_predicates(tcx, vec![trait_ref.without_const().to_predicate()])\n+    elaborate_predicates(tcx, std::iter::once(trait_ref.without_const().to_predicate()))\n }\n \n pub fn elaborate_trait_refs<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     trait_refs: impl Iterator<Item = ty::PolyTraitRef<'tcx>>,\n ) -> Elaborator<'tcx> {\n-    let predicates = trait_refs.map(|trait_ref| trait_ref.without_const().to_predicate()).collect();\n+    let predicates = trait_refs.map(|trait_ref| trait_ref.without_const().to_predicate());\n     elaborate_predicates(tcx, predicates)\n }\n \n pub fn elaborate_predicates<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    mut predicates: Vec<ty::Predicate<'tcx>>,\n+    predicates: impl Iterator<Item = ty::Predicate<'tcx>>,\n ) -> Elaborator<'tcx> {\n-    let mut visited = PredicateSet::new(tcx);\n-    predicates.retain(|pred| visited.insert(pred));\n-    let obligations: Vec<_> =\n+    let obligations =\n         predicates.into_iter().map(|predicate| predicate_obligation(predicate, None)).collect();\n     elaborate_obligations(tcx, obligations)\n }"}, {"sha": "8e983a00ada536c5b70cfd6f10ff567c1f06bde6", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2000f91f68d2218b01401b9b92177090d784e724/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2000f91f68d2218b01401b9b92177090d784e724/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=2000f91f68d2218b01401b9b92177090d784e724", "patch": "@@ -122,8 +122,7 @@ impl<'tcx> MirPass<'tcx> for ConstProp {\n             .predicates_of(source.def_id())\n             .predicates\n             .iter()\n-            .filter_map(|(p, _)| if p.is_global() { Some(*p) } else { None })\n-            .collect();\n+            .filter_map(|(p, _)| if p.is_global() { Some(*p) } else { None });\n         if !traits::normalize_and_test_predicates(\n             tcx,\n             traits::elaborate_predicates(tcx, predicates).map(|o| o.predicate).collect(),"}, {"sha": "7647775eff42ac3ed4a87c9216f391f1231ea6ae", "filename": "src/librustc_trait_selection/opaque_types.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2000f91f68d2218b01401b9b92177090d784e724/src%2Flibrustc_trait_selection%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2000f91f68d2218b01401b9b92177090d784e724/src%2Flibrustc_trait_selection%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Fopaque_types.rs?ref=2000f91f68d2218b01401b9b92177090d784e724", "patch": "@@ -418,7 +418,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             let opaque_type = tcx.mk_opaque(def_id, opaque_defn.substs);\n \n             let required_region_bounds =\n-                required_region_bounds(tcx, opaque_type, bounds.predicates);\n+                required_region_bounds(tcx, opaque_type, bounds.predicates.into_iter());\n             debug_assert!(!required_region_bounds.is_empty());\n \n             for required_region in required_region_bounds {\n@@ -1127,7 +1127,8 @@ impl<'a, 'tcx> Instantiator<'a, 'tcx> {\n \n         debug!(\"instantiate_opaque_types: bounds={:?}\", bounds);\n \n-        let required_region_bounds = required_region_bounds(tcx, ty, bounds.predicates.clone());\n+        let required_region_bounds =\n+            required_region_bounds(tcx, ty, bounds.predicates.iter().cloned());\n         debug!(\"instantiate_opaque_types: required_region_bounds={:?}\", required_region_bounds);\n \n         // Make sure that we are in fact defining the *entire* type\n@@ -1245,17 +1246,15 @@ pub fn may_define_opaque_type(tcx: TyCtxt<'_>, def_id: DefId, opaque_hir_id: hir\n crate fn required_region_bounds(\n     tcx: TyCtxt<'tcx>,\n     erased_self_ty: Ty<'tcx>,\n-    predicates: Vec<ty::Predicate<'tcx>>,\n+    predicates: impl Iterator<Item = ty::Predicate<'tcx>>,\n ) -> Vec<ty::Region<'tcx>> {\n-    debug!(\n-        \"required_region_bounds(erased_self_ty={:?}, predicates={:?})\",\n-        erased_self_ty, predicates\n-    );\n+    debug!(\"required_region_bounds(erased_self_ty={:?})\", erased_self_ty);\n \n     assert!(!erased_self_ty.has_escaping_bound_vars());\n \n     traits::elaborate_predicates(tcx, predicates)\n         .filter_map(|obligation| {\n+            debug!(\"required_region_bounds(obligation={:?})\", obligation);\n             match obligation.predicate {\n                 ty::Predicate::Projection(..)\n                 | ty::Predicate::Trait(..)"}, {"sha": "b28658e0f1e585ebb46f5ad03963595a99bd9366", "filename": "src/librustc_trait_selection/traits/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2000f91f68d2218b01401b9b92177090d784e724/src%2Flibrustc_trait_selection%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2000f91f68d2218b01401b9b92177090d784e724/src%2Flibrustc_trait_selection%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fauto_trait.rs?ref=2000f91f68d2218b01401b9b92177090d784e724", "patch": "@@ -360,8 +360,7 @@ impl AutoTraitFinder<'tcx> {\n \n             computed_preds.extend(user_computed_preds.iter().cloned());\n             let normalized_preds =\n-                elaborate_predicates(tcx, computed_preds.iter().cloned().collect())\n-                    .map(|o| o.predicate);\n+                elaborate_predicates(tcx, computed_preds.iter().cloned()).map(|o| o.predicate);\n             new_env =\n                 ty::ParamEnv::new(tcx.mk_predicates(normalized_preds), param_env.reveal, None);\n         }"}, {"sha": "927f7c294f0681d1b8d283e2ae01d2a99eb1de2a", "filename": "src/librustc_trait_selection/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2000f91f68d2218b01401b9b92177090d784e724/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2000f91f68d2218b01401b9b92177090d784e724/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=2000f91f68d2218b01401b9b92177090d784e724", "patch": "@@ -1007,7 +1007,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n             }\n         };\n \n-        for obligation in super::elaborate_predicates(self.tcx, vec![*cond]) {\n+        for obligation in super::elaborate_predicates(self.tcx, std::iter::once(*cond)) {\n             if let ty::Predicate::Trait(implication, _) = obligation.predicate {\n                 let error = error.to_poly_trait_ref();\n                 let implication = implication.to_poly_trait_ref();"}, {"sha": "2227477a4635bbc86db3c2134de7262c1f4116be", "filename": "src/librustc_trait_selection/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2000f91f68d2218b01401b9b92177090d784e724/src%2Flibrustc_trait_selection%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2000f91f68d2218b01401b9b92177090d784e724/src%2Flibrustc_trait_selection%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fmod.rs?ref=2000f91f68d2218b01401b9b92177090d784e724", "patch": "@@ -297,7 +297,7 @@ pub fn normalize_param_env_or_error<'tcx>(\n     );\n \n     let mut predicates: Vec<_> =\n-        util::elaborate_predicates(tcx, unnormalized_env.caller_bounds.to_vec())\n+        util::elaborate_predicates(tcx, unnormalized_env.caller_bounds.into_iter().cloned())\n             .map(|obligation| obligation.predicate)\n             .collect();\n "}, {"sha": "96b2b904e65436fe26709ffc06e8c388da38b5ef", "filename": "src/librustc_trait_selection/traits/object_safety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2000f91f68d2218b01401b9b92177090d784e724/src%2Flibrustc_trait_selection%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2000f91f68d2218b01401b9b92177090d784e724/src%2Flibrustc_trait_selection%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fobject_safety.rs?ref=2000f91f68d2218b01401b9b92177090d784e724", "patch": "@@ -302,7 +302,7 @@ fn generics_require_sized_self(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n     // Search for a predicate like `Self : Sized` amongst the trait bounds.\n     let predicates = tcx.predicates_of(def_id);\n     let predicates = predicates.instantiate_identity(tcx).predicates;\n-    elaborate_predicates(tcx, predicates).any(|obligation| match obligation.predicate {\n+    elaborate_predicates(tcx, predicates.into_iter()).any(|obligation| match obligation.predicate {\n         ty::Predicate::Trait(ref trait_pred, _) => {\n             trait_pred.def_id() == sized_def_id && trait_pred.skip_binder().self_ty().is_param(0)\n         }"}, {"sha": "2b4a0409fd1e23a2e90f95d3e34f6ad318259e8e", "filename": "src/librustc_trait_selection/traits/project.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2000f91f68d2218b01401b9b92177090d784e724/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2000f91f68d2218b01401b9b92177090d784e724/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs?ref=2000f91f68d2218b01401b9b92177090d784e724", "patch": "@@ -900,7 +900,7 @@ fn assemble_candidates_from_trait_def<'cx, 'tcx>(\n     // If so, extract what we know from the trait and try to come up with a good answer.\n     let trait_predicates = tcx.predicates_of(def_id);\n     let bounds = trait_predicates.instantiate(tcx, substs);\n-    let bounds = elaborate_predicates(tcx, bounds.predicates).map(|o| o.predicate);\n+    let bounds = elaborate_predicates(tcx, bounds.predicates.into_iter()).map(|o| o.predicate);\n     assemble_candidates_from_predicates(\n         selcx,\n         obligation,\n@@ -911,16 +911,14 @@ fn assemble_candidates_from_trait_def<'cx, 'tcx>(\n     )\n }\n \n-fn assemble_candidates_from_predicates<'cx, 'tcx, I>(\n+fn assemble_candidates_from_predicates<'cx, 'tcx>(\n     selcx: &mut SelectionContext<'cx, 'tcx>,\n     obligation: &ProjectionTyObligation<'tcx>,\n     obligation_trait_ref: &ty::TraitRef<'tcx>,\n     candidate_set: &mut ProjectionTyCandidateSet<'tcx>,\n     ctor: fn(ty::PolyProjectionPredicate<'tcx>) -> ProjectionTyCandidate<'tcx>,\n-    env_predicates: I,\n-) where\n-    I: IntoIterator<Item = ty::Predicate<'tcx>>,\n-{\n+    env_predicates: impl Iterator<Item = ty::Predicate<'tcx>>,\n+) {\n     debug!(\"assemble_candidates_from_predicates(obligation={:?})\", obligation);\n     let infcx = selcx.infcx();\n     for predicate in env_predicates {\n@@ -1153,10 +1151,8 @@ fn confirm_object_candidate<'cx, 'tcx>(\n             object_ty\n         ),\n     };\n-    let env_predicates = data\n-        .projection_bounds()\n-        .map(|p| p.with_self_ty(selcx.tcx(), object_ty).to_predicate())\n-        .collect();\n+    let env_predicates =\n+        data.projection_bounds().map(|p| p.with_self_ty(selcx.tcx(), object_ty).to_predicate());\n     let env_predicate = {\n         let env_predicates = elaborate_predicates(selcx.tcx(), env_predicates);\n "}, {"sha": "dfbb07424487d43a786ec1c62a117a8fb71cb62f", "filename": "src/librustc_trait_selection/traits/select.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2000f91f68d2218b01401b9b92177090d784e724/src%2Flibrustc_trait_selection%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2000f91f68d2218b01401b9b92177090d784e724/src%2Flibrustc_trait_selection%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fselect.rs?ref=2000f91f68d2218b01401b9b92177090d784e724", "patch": "@@ -1443,7 +1443,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             bounds\n         );\n \n-        let elaborated_predicates = util::elaborate_predicates(self.tcx(), bounds.predicates);\n+        let elaborated_predicates =\n+            util::elaborate_predicates(self.tcx(), bounds.predicates.into_iter());\n         let matching_bound = elaborated_predicates.filter_to_traits().find(|bound| {\n             self.infcx.probe(|_| {\n                 self.match_projection("}, {"sha": "cf8c12eae0a3976dafa564d8f62ce442fd6cf598", "filename": "src/librustc_trait_selection/traits/wf.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2000f91f68d2218b01401b9b92177090d784e724/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2000f91f68d2218b01401b9b92177090d784e724/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs?ref=2000f91f68d2218b01401b9b92177090d784e724", "patch": "@@ -627,16 +627,13 @@ pub fn object_region_bounds<'tcx>(\n     // a placeholder type.\n     let open_ty = tcx.mk_ty_infer(ty::FreshTy(0));\n \n-    let predicates = existential_predicates\n-        .iter()\n-        .filter_map(|predicate| {\n-            if let ty::ExistentialPredicate::Projection(_) = *predicate.skip_binder() {\n-                None\n-            } else {\n-                Some(predicate.with_self_ty(tcx, open_ty))\n-            }\n-        })\n-        .collect();\n+    let predicates = existential_predicates.iter().filter_map(|predicate| {\n+        if let ty::ExistentialPredicate::Projection(_) = *predicate.skip_binder() {\n+            None\n+        } else {\n+            Some(predicate.with_self_ty(tcx, open_ty))\n+        }\n+    });\n \n     required_region_bounds(tcx, open_ty, predicates)\n }"}, {"sha": "5c5f3f89aba4271c5244b3107b21b04d893e7b8d", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2000f91f68d2218b01401b9b92177090d784e724/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2000f91f68d2218b01401b9b92177090d784e724/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=2000f91f68d2218b01401b9b92177090d784e724", "patch": "@@ -572,7 +572,7 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n             None => return None,\n         };\n \n-        traits::elaborate_predicates(self.tcx, predicates.predicates.clone())\n+        traits::elaborate_predicates(self.tcx, predicates.predicates.iter().copied())\n             .filter_map(|obligation| match obligation.predicate {\n                 ty::Predicate::Trait(trait_pred, _) if trait_pred.def_id() == sized_def_id => {\n                     let span = predicates"}, {"sha": "d537891c0d7392b139cdfb794339851fedb67330", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2000f91f68d2218b01401b9b92177090d784e724/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2000f91f68d2218b01401b9b92177090d784e724/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=2000f91f68d2218b01401b9b92177090d784e724", "patch": "@@ -1225,7 +1225,7 @@ fn check_false_global_bounds(fcx: &FnCtxt<'_, '_>, span: Span, id: hir::HirId) {\n     let empty_env = ty::ParamEnv::empty();\n \n     let def_id = fcx.tcx.hir().local_def_id(id);\n-    let predicates = fcx.tcx.predicates_of(def_id).predicates.iter().map(|(p, _)| *p).collect();\n+    let predicates = fcx.tcx.predicates_of(def_id).predicates.iter().map(|(p, _)| *p);\n     // Check elaborated bounds.\n     let implied_obligations = traits::elaborate_predicates(fcx.tcx, predicates);\n "}, {"sha": "076c13d1065765e197e5126c57956d0ca3ef0ed0", "filename": "src/librustc_typeck/impl_wf_check/min_specialization.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2000f91f68d2218b01401b9b92177090d784e724/src%2Flibrustc_typeck%2Fimpl_wf_check%2Fmin_specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2000f91f68d2218b01401b9b92177090d784e724/src%2Flibrustc_typeck%2Fimpl_wf_check%2Fmin_specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fimpl_wf_check%2Fmin_specialization.rs?ref=2000f91f68d2218b01401b9b92177090d784e724", "patch": "@@ -322,7 +322,7 @@ fn check_predicates<'tcx>(\n     // which is sound because we forbid impls like the following\n     //\n     // impl<D: Debug> AlwaysApplicable for D { }\n-    let always_applicable_traits: Vec<_> = impl1_predicates\n+    let always_applicable_traits = impl1_predicates\n         .predicates\n         .iter()\n         .filter(|predicate| {\n@@ -331,8 +331,7 @@ fn check_predicates<'tcx>(\n                 Some(TraitSpecializationKind::AlwaysApplicable)\n             )\n         })\n-        .copied()\n-        .collect();\n+        .copied();\n \n     // Include the well-formed predicates of the type parameters of the impl.\n     for ty in tcx.impl_trait_ref(impl1_def_id).unwrap().substs.types() {"}]}