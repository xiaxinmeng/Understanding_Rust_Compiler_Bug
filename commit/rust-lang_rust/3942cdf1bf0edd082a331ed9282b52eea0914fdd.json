{"sha": "3942cdf1bf0edd082a331ed9282b52eea0914fdd", "node_id": "C_kwDOAAsO6NoAKDM5NDJjZGYxYmYwZWRkMDgyYTMzMWVkOTI4MmI1MmVlYTA5MTRmZGQ", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2023-05-02T06:37:36Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2023-05-02T06:37:36Z"}, "message": "Merge from rustc", "tree": {"sha": "aa6401d53d93348854718b151f645ef9bef93b52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa6401d53d93348854718b151f645ef9bef93b52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3942cdf1bf0edd082a331ed9282b52eea0914fdd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3942cdf1bf0edd082a331ed9282b52eea0914fdd", "html_url": "https://github.com/rust-lang/rust/commit/3942cdf1bf0edd082a331ed9282b52eea0914fdd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3942cdf1bf0edd082a331ed9282b52eea0914fdd/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d20fa00ee640d3df38e2e431d732ac9ff4efb0a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/d20fa00ee640d3df38e2e431d732ac9ff4efb0a9", "html_url": "https://github.com/rust-lang/rust/commit/d20fa00ee640d3df38e2e431d732ac9ff4efb0a9"}, {"sha": "7411468ff817884cdb1239e85b5ab785cc65e36d", "url": "https://api.github.com/repos/rust-lang/rust/commits/7411468ff817884cdb1239e85b5ab785cc65e36d", "html_url": "https://github.com/rust-lang/rust/commit/7411468ff817884cdb1239e85b5ab785cc65e36d"}], "stats": {"total": 5319, "additions": 2705, "deletions": 2614}, "files": [{"sha": "d7806b5daa63a5f21b4579ea895661e6cbe6f7fc", "filename": "Cargo.lock", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -3250,6 +3250,7 @@ dependencies = [\n  \"tempfile\",\n  \"thorin-dwp\",\n  \"tracing\",\n+ \"windows 0.46.0\",\n ]\n \n [[package]]\n@@ -3641,6 +3642,7 @@ dependencies = [\n  \"rustc_plugin_impl\",\n  \"rustc_privacy\",\n  \"rustc_query_impl\",\n+ \"rustc_query_system\",\n  \"rustc_resolve\",\n  \"rustc_session\",\n  \"rustc_span\",\n@@ -3770,6 +3772,7 @@ dependencies = [\n  \"derive_more\",\n  \"either\",\n  \"gsgdt\",\n+ \"measureme\",\n  \"polonius-engine\",\n  \"rustc-rayon\",\n  \"rustc-rayon-core\","}, {"sha": "ea04ba4f66e46c182f309e1c78dbb05d4254ea18", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -1430,8 +1430,8 @@ pub enum ExprKind {\n     /// The async block used to have a `NodeId`, which was removed in favor of\n     /// using the parent `NodeId` of the parent `Expr`.\n     Async(CaptureBy, P<Block>),\n-    /// An await expression (`my_future.await`).\n-    Await(P<Expr>),\n+    /// An await expression (`my_future.await`). Span is of await keyword.\n+    Await(P<Expr>, Span),\n \n     /// A try block (`try { ... }`).\n     TryBlock(P<Block>),"}, {"sha": "68a4d522993c1620799d76c52f6be2ddc671a6aa", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -1415,7 +1415,10 @@ pub fn noop_visit_expr<T: MutVisitor>(\n         ExprKind::Async(_capture_by, body) => {\n             vis.visit_block(body);\n         }\n-        ExprKind::Await(expr) => vis.visit_expr(expr),\n+        ExprKind::Await(expr, await_kw_span) => {\n+            vis.visit_expr(expr);\n+            vis.visit_span(await_kw_span);\n+        }\n         ExprKind::Assign(el, er, _) => {\n             vis.visit_expr(el);\n             vis.visit_expr(er);"}, {"sha": "64ae904513cb30b6cafd797d454bc7db5bef114a", "filename": "compiler/rustc_ast/src/util/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_ast%2Fsrc%2Futil%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_ast%2Fsrc%2Futil%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Futil%2Fparser.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -388,7 +388,7 @@ pub fn contains_exterior_struct_lit(value: &ast::Expr) -> bool {\n             // X { y: 1 } + X { y: 2 }\n             contains_exterior_struct_lit(lhs) || contains_exterior_struct_lit(rhs)\n         }\n-        ast::ExprKind::Await(x)\n+        ast::ExprKind::Await(x, _)\n         | ast::ExprKind::Unary(_, x)\n         | ast::ExprKind::Cast(x, _)\n         | ast::ExprKind::Type(x, _)"}, {"sha": "1526ffa0b0306f656bbddd9656336885b76a5473", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -864,7 +864,7 @@ pub fn walk_expr<'a, V: Visitor<'a>>(visitor: &mut V, expression: &'a Expr) {\n         ExprKind::Async(_, body) => {\n             visitor.visit_block(body);\n         }\n-        ExprKind::Await(expr) => visitor.visit_expr(expr),\n+        ExprKind::Await(expr, _) => visitor.visit_expr(expr),\n         ExprKind::Assign(lhs, rhs, _) => {\n             visitor.visit_expr(lhs);\n             visitor.visit_expr(rhs);"}, {"sha": "72dc52a632992dff29d57cbb7cb9c6ad1af0d090", "filename": "compiler/rustc_ast_lowering/src/errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -108,7 +108,7 @@ pub struct BaseExpressionDoubleDot {\n pub struct AwaitOnlyInAsyncFnAndBlocks {\n     #[primary_span]\n     #[label]\n-    pub dot_await_span: Span,\n+    pub await_kw_span: Span,\n     #[label(ast_lowering_this_not_async)]\n     pub item_span: Option<Span>,\n }"}, {"sha": "5e0ab80c6ac9fcde3050cdfce7214850f6134f1f", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 5, "deletions": 19, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -185,21 +185,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     hir::AsyncGeneratorKind::Block,\n                     |this| this.with_new_scopes(|this| this.lower_block_expr(block)),\n                 ),\n-                ExprKind::Await(expr) => {\n-                    let dot_await_span = if expr.span.hi() < e.span.hi() {\n-                        let span_with_whitespace = self\n-                            .tcx\n-                            .sess\n-                            .source_map()\n-                            .span_extend_while(expr.span, char::is_whitespace)\n-                            .unwrap_or(expr.span);\n-                        span_with_whitespace.shrink_to_hi().with_hi(e.span.hi())\n-                    } else {\n-                        // this is a recovered `await expr`\n-                        e.span\n-                    };\n-                    self.lower_expr_await(dot_await_span, expr)\n-                }\n+                ExprKind::Await(expr, await_kw_span) => self.lower_expr_await(*await_kw_span, expr),\n                 ExprKind::Closure(box Closure {\n                     binder,\n                     capture_clause,\n@@ -710,18 +696,18 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     ///     }\n     /// }\n     /// ```\n-    fn lower_expr_await(&mut self, dot_await_span: Span, expr: &Expr) -> hir::ExprKind<'hir> {\n-        let full_span = expr.span.to(dot_await_span);\n+    fn lower_expr_await(&mut self, await_kw_span: Span, expr: &Expr) -> hir::ExprKind<'hir> {\n+        let full_span = expr.span.to(await_kw_span);\n         match self.generator_kind {\n             Some(hir::GeneratorKind::Async(_)) => {}\n             Some(hir::GeneratorKind::Gen) | None => {\n                 self.tcx.sess.emit_err(AwaitOnlyInAsyncFnAndBlocks {\n-                    dot_await_span,\n+                    await_kw_span,\n                     item_span: self.current_item,\n                 });\n             }\n         }\n-        let span = self.mark_span_with_reason(DesugaringKind::Await, dot_await_span, None);\n+        let span = self.mark_span_with_reason(DesugaringKind::Await, await_kw_span, None);\n         let gen_future_span = self.mark_span_with_reason(\n             DesugaringKind::Await,\n             full_span,"}, {"sha": "9b295339d94504f3084d9625ad1c2046b667deda", "filename": "compiler/rustc_ast_lowering/src/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_ast_lowering%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_ast_lowering%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fformat.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -583,7 +583,7 @@ fn may_contain_yield_point(e: &ast::Expr) -> bool {\n \n     impl Visitor<'_> for MayContainYieldPoint {\n         fn visit_expr(&mut self, e: &ast::Expr) {\n-            if let ast::ExprKind::Await(_) | ast::ExprKind::Yield(_) = e.kind {\n+            if let ast::ExprKind::Await(_, _) | ast::ExprKind::Yield(_) = e.kind {\n                 self.0 = true;\n             } else {\n                 visit::walk_expr(self, e);"}, {"sha": "5511cf851b185b3b4fa5ca1a1570354df81db5cd", "filename": "compiler/rustc_ast_pretty/src/pprust/state/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -447,7 +447,7 @@ impl<'a> State<'a> {\n                 self.ibox(0);\n                 self.print_block_with_attrs(blk, attrs);\n             }\n-            ast::ExprKind::Await(expr) => {\n+            ast::ExprKind::Await(expr, _) => {\n                 self.print_expr_maybe_paren(expr, parser::PREC_POSTFIX);\n                 self.word(\".await\");\n             }\n@@ -566,7 +566,7 @@ impl<'a> State<'a> {\n                         self.print_ident(field);\n                     }\n                 }\n-\n+                self.pclose();\n                 self.end();\n             }\n             ast::ExprKind::MacCall(m) => self.print_mac(m),"}, {"sha": "4a616dc24641aae88d2fdf063f5b04ba70e6ebae", "filename": "compiler/rustc_borrowck/messages.ftl", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_borrowck%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_borrowck%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fmessages.ftl?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -203,6 +203,15 @@ borrowck_moved_due_to_method_call =\n         *[false] call\n     }\n \n+borrowck_moved_due_to_await =\n+    {$place_name} {$is_partial ->\n+        [true] partially moved\n+        *[false] moved\n+    } due to this {$is_loop_message ->\n+        [true] await, in previous iteration of loop\n+        *[false] await\n+    }\n+\n borrowck_value_moved_here =\n     value {$is_partial ->\n         [true] partially moved"}, {"sha": "a780255725e71c534fea07b9e27409042194b5df", "filename": "compiler/rustc_borrowck/src/diagnostics/mod.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -1085,12 +1085,21 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                             }\n                         }\n                     } else {\n-                        err.subdiagnostic(CaptureReasonLabel::MethodCall {\n-                            fn_call_span,\n-                            place_name: &place_name,\n-                            is_partial,\n-                            is_loop_message,\n-                        });\n+                        if let Some((CallDesugaringKind::Await, _)) = desugaring {\n+                            err.subdiagnostic(CaptureReasonLabel::Await {\n+                                fn_call_span,\n+                                place_name: &place_name,\n+                                is_partial,\n+                                is_loop_message,\n+                            });\n+                        } else {\n+                            err.subdiagnostic(CaptureReasonLabel::MethodCall {\n+                                fn_call_span,\n+                                place_name: &place_name,\n+                                is_partial,\n+                                is_loop_message,\n+                            });\n+                        }\n                         // Erase and shadow everything that could be passed to the new infcx.\n                         let ty = moved_place.ty(self.body, tcx).ty;\n "}, {"sha": "fceae5bb3ffe030eccd9806c4b0b2909a767da4e", "filename": "compiler/rustc_borrowck/src/session_diagnostics.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_borrowck%2Fsrc%2Fsession_diagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_borrowck%2Fsrc%2Fsession_diagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fsession_diagnostics.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -338,6 +338,14 @@ pub(crate) enum CaptureReasonLabel<'a> {\n         is_partial: bool,\n         is_loop_message: bool,\n     },\n+    #[label(borrowck_moved_due_to_await)]\n+    Await {\n+        #[primary_span]\n+        fn_call_span: Span,\n+        place_name: &'a str,\n+        is_partial: bool,\n+        is_loop_message: bool,\n+    },\n     #[label(borrowck_value_moved_here)]\n     MovedHere {\n         #[primary_span]"}, {"sha": "0d7cf7cdb267c6bb6ff52704c2b93de8044517a0", "filename": "compiler/rustc_builtin_macros/messages.ftl", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_builtin_macros%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_builtin_macros%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fmessages.ftl?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -169,5 +169,40 @@ builtin_macros_asm_pure_no_output = asm with the `pure` option must have at leas\n \n builtin_macros_asm_modifier_invalid = asm template modifier must be a single character\n \n+builtin_macros_asm_requires_template = requires at least a template string argument\n+\n+builtin_macros_asm_expected_comma = expected token: `,`\n+    .label = expected `,`\n+\n+builtin_macros_asm_underscore_input = _ cannot be used for input operands\n+\n+builtin_macros_asm_sym_no_path = expected a path for argument to `sym`\n+\n+builtin_macros_asm_expected_other = expected operand, {$is_global_asm ->\n+    [true] options\n+    *[false] clobber_abi, options\n+    }, or additional template string\n+\n+builtin_macros_asm_duplicate_arg = duplicate argument named `{$name}`\n+    .label = previously here\n+    .arg = duplicate argument\n+\n+builtin_macros_asm_pos_after = positional arguments cannot follow named arguments or explicit register arguments\n+    .pos = positional argument\n+    .named = named argument\n+    .explicit = explicit register argument\n+\n+builtin_macros_asm_noreturn = asm outputs are not allowed with the `noreturn` option\n+\n+builtin_macros_global_asm_clobber_abi = `clobber_abi` cannot be used with `global_asm!`\n+\n+builtin_macros_asm_clobber_no_reg = asm with `clobber_abi` must specify explicit registers for outputs\n+builtin_macros_asm_clobber_abi = clobber_abi\n+builtin_macros_asm_clobber_outputs = generic outputs\n+\n+builtin_macros_asm_opt_already_provided = the `{$symbol}` option was already provided\n+    .label = this option was already provided\n+    .suggestion = remove this option\n+\n builtin_macros_test_runner_invalid = `test_runner` argument must be a path\n builtin_macros_test_runner_nargs = `#![test_runner(..)]` accepts exactly 1 argument"}, {"sha": "c066512b09ee366e8c7ede79e061371df5c1ff83", "filename": "compiler/rustc_builtin_macros/src/asm.rs", "status": "modified", "additions": 26, "deletions": 67, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -3,7 +3,7 @@ use rustc_ast::ptr::P;\n use rustc_ast::token::{self, Delimiter};\n use rustc_ast::tokenstream::TokenStream;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_errors::{Applicability, PResult};\n+use rustc_errors::PResult;\n use rustc_expand::base::{self, *};\n use rustc_parse::parser::Parser;\n use rustc_parse_format as parse;\n@@ -49,7 +49,7 @@ pub fn parse_asm_args<'a>(\n     let diag = &sess.span_diagnostic;\n \n     if p.token == token::Eof {\n-        return Err(diag.struct_span_err(sp, \"requires at least a template string argument\"));\n+        return Err(diag.create_err(errors::AsmRequiresTemplate { span: sp }));\n     }\n \n     let first_template = p.parse_expr()?;\n@@ -68,8 +68,7 @@ pub fn parse_asm_args<'a>(\n         if !p.eat(&token::Comma) {\n             if allow_templates {\n                 // After a template string, we always expect *only* a comma...\n-                let mut err = diag.struct_span_err(p.token.span, \"expected token: `,`\");\n-                err.span_label(p.token.span, \"expected `,`\");\n+                let mut err = diag.create_err(errors::AsmExpectedComma { span: p.token.span });\n                 p.maybe_annotate_with_ascription(&mut err, false);\n                 return Err(err);\n             } else {\n@@ -112,7 +111,7 @@ pub fn parse_asm_args<'a>(\n         let op = if !is_global_asm && p.eat_keyword(kw::In) {\n             let reg = parse_reg(p, &mut explicit_reg)?;\n             if p.eat_keyword(kw::Underscore) {\n-                let err = diag.struct_span_err(p.token.span, \"_ cannot be used for input operands\");\n+                let err = diag.create_err(errors::AsmUnderscoreInput { span: p.token.span });\n                 return Err(err);\n             }\n             let expr = p.parse_expr()?;\n@@ -128,7 +127,7 @@ pub fn parse_asm_args<'a>(\n         } else if !is_global_asm && p.eat_keyword(sym::inout) {\n             let reg = parse_reg(p, &mut explicit_reg)?;\n             if p.eat_keyword(kw::Underscore) {\n-                let err = diag.struct_span_err(p.token.span, \"_ cannot be used for input operands\");\n+                let err = diag.create_err(errors::AsmUnderscoreInput { span: p.token.span });\n                 return Err(err);\n             }\n             let expr = p.parse_expr()?;\n@@ -142,7 +141,7 @@ pub fn parse_asm_args<'a>(\n         } else if !is_global_asm && p.eat_keyword(sym::inlateout) {\n             let reg = parse_reg(p, &mut explicit_reg)?;\n             if p.eat_keyword(kw::Underscore) {\n-                let err = diag.struct_span_err(p.token.span, \"_ cannot be used for input operands\");\n+                let err = diag.create_err(errors::AsmUnderscoreInput { span: p.token.span });\n                 return Err(err);\n             }\n             let expr = p.parse_expr()?;\n@@ -160,7 +159,7 @@ pub fn parse_asm_args<'a>(\n             let expr = p.parse_expr()?;\n             let ast::ExprKind::Path(qself, path) = &expr.kind else {\n                 let err = diag\n-                    .struct_span_err(expr.span, \"expected a path for argument to `sym`\");\n+                    .create_err(errors::AsmSymNoPath { span: expr.span });\n                 return Err(err);\n             };\n             let sym = ast::InlineAsmSym {\n@@ -181,13 +180,10 @@ pub fn parse_asm_args<'a>(\n                     ) => {}\n                 ast::ExprKind::MacCall(..) => {}\n                 _ => {\n-                    let errstr = if is_global_asm {\n-                        \"expected operand, options, or additional template string\"\n-                    } else {\n-                        \"expected operand, clobber_abi, options, or additional template string\"\n-                    };\n-                    let mut err = diag.struct_span_err(template.span, errstr);\n-                    err.span_label(template.span, errstr);\n+                    let err = diag.create_err(errors::AsmExpectedOther {\n+                        span: template.span,\n+                        is_global_asm,\n+                    });\n                     return Err(err);\n                 }\n             }\n@@ -212,28 +208,16 @@ pub fn parse_asm_args<'a>(\n             args.reg_args.insert(slot);\n         } else if let Some(name) = name {\n             if let Some(&prev) = args.named_args.get(&name) {\n-                diag.struct_span_err(span, &format!(\"duplicate argument named `{}`\", name))\n-                    .span_label(args.operands[prev].1, \"previously here\")\n-                    .span_label(span, \"duplicate argument\")\n-                    .emit();\n+                diag.emit_err(errors::AsmDuplicateArg { span, name, prev: args.operands[prev].1 });\n                 continue;\n             }\n             args.named_args.insert(name, slot);\n         } else {\n             if !args.named_args.is_empty() || !args.reg_args.is_empty() {\n-                let mut err = diag.struct_span_err(\n-                    span,\n-                    \"positional arguments cannot follow named arguments \\\n-                     or explicit register arguments\",\n-                );\n-                err.span_label(span, \"positional argument\");\n-                for pos in args.named_args.values() {\n-                    err.span_label(args.operands[*pos].1, \"named argument\");\n-                }\n-                for pos in &args.reg_args {\n-                    err.span_label(args.operands[*pos].1, \"explicit register argument\");\n-                }\n-                err.emit();\n+                let named = args.named_args.values().map(|p| args.operands[*p].1).collect();\n+                let explicit = args.reg_args.iter().map(|p| args.operands[*p].1).collect();\n+\n+                diag.emit_err(errors::AsmPositionalAfter { span, named, explicit });\n             }\n         }\n     }\n@@ -284,34 +268,25 @@ pub fn parse_asm_args<'a>(\n         diag.emit_err(errors::AsmPureNoOutput { spans: args.options_spans.clone() });\n     }\n     if args.options.contains(ast::InlineAsmOptions::NORETURN) && !outputs_sp.is_empty() {\n-        let err = diag\n-            .struct_span_err(outputs_sp, \"asm outputs are not allowed with the `noreturn` option\");\n-\n+        let err = diag.create_err(errors::AsmNoReturn { outputs_sp });\n         // Bail out now since this is likely to confuse MIR\n         return Err(err);\n     }\n \n     if args.clobber_abis.len() > 0 {\n         if is_global_asm {\n-            let err = diag.struct_span_err(\n-                args.clobber_abis.iter().map(|(_, span)| *span).collect::<Vec<Span>>(),\n-                \"`clobber_abi` cannot be used with `global_asm!`\",\n-            );\n+            let err = diag.create_err(errors::GlobalAsmClobberAbi {\n+                spans: args.clobber_abis.iter().map(|(_, span)| *span).collect(),\n+            });\n \n             // Bail out now since this is likely to confuse later stages\n             return Err(err);\n         }\n         if !regclass_outputs.is_empty() {\n-            diag.struct_span_err(\n-                regclass_outputs.clone(),\n-                \"asm with `clobber_abi` must specify explicit registers for outputs\",\n-            )\n-            .span_labels(\n-                args.clobber_abis.iter().map(|(_, span)| *span).collect::<Vec<Span>>(),\n-                \"clobber_abi\",\n-            )\n-            .span_labels(regclass_outputs, \"generic outputs\")\n-            .emit();\n+            diag.emit_err(errors::AsmClobberNoReg {\n+                spans: regclass_outputs,\n+                clobbers: args.clobber_abis.iter().map(|(_, span)| *span).collect(),\n+            });\n         }\n     }\n \n@@ -323,25 +298,9 @@ pub fn parse_asm_args<'a>(\n /// This function must be called immediately after the option token is parsed.\n /// Otherwise, the suggestion will be incorrect.\n fn err_duplicate_option(p: &mut Parser<'_>, symbol: Symbol, span: Span) {\n-    let mut err = p\n-        .sess\n-        .span_diagnostic\n-        .struct_span_err(span, &format!(\"the `{}` option was already provided\", symbol));\n-    err.span_label(span, \"this option was already provided\");\n-\n     // Tool-only output\n-    let mut full_span = span;\n-    if p.token.kind == token::Comma {\n-        full_span = full_span.to(p.token.span);\n-    }\n-    err.tool_only_span_suggestion(\n-        full_span,\n-        \"remove this option\",\n-        \"\",\n-        Applicability::MachineApplicable,\n-    );\n-\n-    err.emit();\n+    let full_span = if p.token.kind == token::Comma { span.to(p.token.span) } else { span };\n+    p.sess.span_diagnostic.emit_err(errors::AsmOptAlreadyprovided { span, symbol, full_span });\n }\n \n /// Try to set the provided option in the provided `AsmArgs`."}, {"sha": "bd3f148c9a79c87d527c2f4e523c8f0ada0f8467", "filename": "compiler/rustc_builtin_macros/src/assert/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert%2Fcontext.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -288,7 +288,7 @@ impl<'cx, 'a> Context<'cx, 'a> {\n             ExprKind::Assign(_, _, _)\n             | ExprKind::AssignOp(_, _, _)\n             | ExprKind::Async(_, _)\n-            | ExprKind::Await(_)\n+            | ExprKind::Await(_, _)\n             | ExprKind::Block(_, _)\n             | ExprKind::Break(_, _)\n             | ExprKind::Closure(_)"}, {"sha": "d0d78646009e1db2bf50111164ba07246bb3eb3e", "filename": "compiler/rustc_builtin_macros/src/errors.rs", "status": "modified", "additions": 118, "deletions": 5, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_builtin_macros%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_builtin_macros%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Ferrors.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -1,5 +1,6 @@\n use rustc_errors::{\n-    AddToDiagnostic, EmissionGuarantee, IntoDiagnostic, MultiSpan, SingleLabelManySpans,\n+    AddToDiagnostic, DiagnosticBuilder, EmissionGuarantee, Handler, IntoDiagnostic, MultiSpan,\n+    SingleLabelManySpans,\n };\n use rustc_macros::{Diagnostic, Subdiagnostic};\n use rustc_span::{symbol::Ident, Span, Symbol};\n@@ -370,11 +371,12 @@ pub(crate) struct EnvNotDefined {\n // Hand-written implementation to support custom user messages\n impl<'a, G: EmissionGuarantee> IntoDiagnostic<'a, G> for EnvNotDefined {\n     #[track_caller]\n-    fn into_diagnostic(\n-        self,\n-        handler: &'a rustc_errors::Handler,\n-    ) -> rustc_errors::DiagnosticBuilder<'a, G> {\n+    fn into_diagnostic(self, handler: &'a Handler) -> DiagnosticBuilder<'a, G> {\n         let mut diag = if let Some(msg) = self.msg {\n+            #[expect(\n+                rustc::untranslatable_diagnostic,\n+                reason = \"cannot translate user-provided messages\"\n+            )]\n             handler.struct_diagnostic(msg.as_str())\n         } else {\n             handler.struct_diagnostic(crate::fluent_generated::builtin_macros_env_not_defined)\n@@ -606,6 +608,117 @@ pub(crate) struct AsmModifierInvalid {\n     pub(crate) span: Span,\n }\n \n+#[derive(Diagnostic)]\n+#[diag(builtin_macros_asm_requires_template)]\n+pub(crate) struct AsmRequiresTemplate {\n+    #[primary_span]\n+    pub(crate) span: Span,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(builtin_macros_asm_expected_comma)]\n+pub(crate) struct AsmExpectedComma {\n+    #[primary_span]\n+    #[label]\n+    pub(crate) span: Span,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(builtin_macros_asm_underscore_input)]\n+pub(crate) struct AsmUnderscoreInput {\n+    #[primary_span]\n+    pub(crate) span: Span,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(builtin_macros_asm_sym_no_path)]\n+pub(crate) struct AsmSymNoPath {\n+    #[primary_span]\n+    pub(crate) span: Span,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(builtin_macros_asm_expected_other)]\n+pub(crate) struct AsmExpectedOther {\n+    #[primary_span]\n+    #[label(builtin_macros_asm_expected_other)]\n+    pub(crate) span: Span,\n+    pub(crate) is_global_asm: bool,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(builtin_macros_asm_duplicate_arg)]\n+pub(crate) struct AsmDuplicateArg {\n+    #[primary_span]\n+    #[label(builtin_macros_arg)]\n+    pub(crate) span: Span,\n+    #[label]\n+    pub(crate) prev: Span,\n+    pub(crate) name: Symbol,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(builtin_macros_asm_pos_after)]\n+pub(crate) struct AsmPositionalAfter {\n+    #[primary_span]\n+    #[label(builtin_macros_pos)]\n+    pub(crate) span: Span,\n+    #[label(builtin_macros_named)]\n+    pub(crate) named: Vec<Span>,\n+    #[label(builtin_macros_explicit)]\n+    pub(crate) explicit: Vec<Span>,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(builtin_macros_asm_noreturn)]\n+pub(crate) struct AsmNoReturn {\n+    #[primary_span]\n+    pub(crate) outputs_sp: Vec<Span>,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(builtin_macros_global_asm_clobber_abi)]\n+pub(crate) struct GlobalAsmClobberAbi {\n+    #[primary_span]\n+    pub(crate) spans: Vec<Span>,\n+}\n+\n+pub(crate) struct AsmClobberNoReg {\n+    pub(crate) spans: Vec<Span>,\n+    pub(crate) clobbers: Vec<Span>,\n+}\n+\n+impl<'a, G: EmissionGuarantee> IntoDiagnostic<'a, G> for AsmClobberNoReg {\n+    fn into_diagnostic(self, handler: &'a Handler) -> DiagnosticBuilder<'a, G> {\n+        let mut diag =\n+            handler.struct_diagnostic(crate::fluent_generated::builtin_macros_asm_clobber_no_reg);\n+        diag.set_span(self.spans.clone());\n+        // eager translation as `span_labels` takes `AsRef<str>`\n+        let lbl1 = handler.eagerly_translate_to_string(\n+            crate::fluent_generated::builtin_macros_asm_clobber_abi,\n+            [].into_iter(),\n+        );\n+        diag.span_labels(self.clobbers, &lbl1);\n+        let lbl2 = handler.eagerly_translate_to_string(\n+            crate::fluent_generated::builtin_macros_asm_clobber_outputs,\n+            [].into_iter(),\n+        );\n+        diag.span_labels(self.spans, &lbl2);\n+        diag\n+    }\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(builtin_macros_asm_opt_already_provided)]\n+pub(crate) struct AsmOptAlreadyprovided {\n+    #[primary_span]\n+    #[label]\n+    pub(crate) span: Span,\n+    pub(crate) symbol: Symbol,\n+    #[suggestion(code = \"\", applicability = \"machine-applicable\", style = \"tool-only\")]\n+    pub(crate) full_span: Span,\n+}\n+\n #[derive(Diagnostic)]\n #[diag(builtin_macros_test_runner_invalid)]\n pub(crate) struct TestRunnerInvalid {"}, {"sha": "9bc1e27b4ec74032c514114f09b375f6eb571f14", "filename": "compiler/rustc_builtin_macros/src/test_harness.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -232,7 +232,7 @@ fn generate_test_harness(\n     let expn_id = ext_cx.resolver.expansion_for_ast_pass(\n         DUMMY_SP,\n         AstPass::TestHarness,\n-        &[sym::test, sym::rustc_attrs],\n+        &[sym::test, sym::rustc_attrs, sym::no_coverage],\n         None,\n     );\n     let def_site = DUMMY_SP.with_def_site_ctxt(expn_id.to_expn_id());\n@@ -313,6 +313,8 @@ fn mk_main(cx: &mut TestCtxt<'_>) -> P<ast::Item> {\n \n     // #[rustc_main]\n     let main_attr = ecx.attr_word(sym::rustc_main, sp);\n+    // #[no_coverage]\n+    let no_coverage_attr = ecx.attr_word(sym::no_coverage, sp);\n \n     // pub fn main() { ... }\n     let main_ret_ty = ecx.ty(sp, ast::TyKind::Tup(ThinVec::new()));\n@@ -342,7 +344,7 @@ fn mk_main(cx: &mut TestCtxt<'_>) -> P<ast::Item> {\n \n     let main = P(ast::Item {\n         ident: main_id,\n-        attrs: thin_vec![main_attr],\n+        attrs: thin_vec![main_attr, no_coverage_attr],\n         id: ast::DUMMY_NODE_ID,\n         kind: main,\n         vis: ast::Visibility { span: sp, kind: ast::VisibilityKind::Public, tokens: None },"}, {"sha": "4f73b731f5a2a96d0248105ffeaafbfbd8c95021", "filename": "compiler/rustc_codegen_ssa/Cargo.toml", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_codegen_ssa%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_codegen_ssa%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2FCargo.toml?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -49,3 +49,7 @@ libc = \"0.2.50\"\n version = \"0.30.1\"\n default-features = false\n features = [\"read_core\", \"elf\", \"macho\", \"pe\", \"unaligned\", \"archive\", \"write\"]\n+\n+[target.'cfg(windows)'.dependencies.windows]\n+version = \"0.46.0\"\n+features = [\"Win32_Globalization\"]"}, {"sha": "c63e156beae7b7f57a3c2f20e37494f794285f1c", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 78, "deletions": 1, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -860,7 +860,7 @@ fn link_natively<'a>(\n             if !prog.status.success() {\n                 let mut output = prog.stderr.clone();\n                 output.extend_from_slice(&prog.stdout);\n-                let escaped_output = escape_string(&output);\n+                let escaped_output = escape_linker_output(&output, flavor);\n                 // FIXME: Add UI tests for this error.\n                 let err = errors::LinkingFailed {\n                     linker_path: &linker_path,\n@@ -1052,6 +1052,83 @@ fn escape_string(s: &[u8]) -> String {\n     }\n }\n \n+#[cfg(not(windows))]\n+fn escape_linker_output(s: &[u8], _flavour: LinkerFlavor) -> String {\n+    escape_string(s)\n+}\n+\n+/// If the output of the msvc linker is not UTF-8 and the host is Windows,\n+/// then try to convert the string from the OEM encoding.\n+#[cfg(windows)]\n+fn escape_linker_output(s: &[u8], flavour: LinkerFlavor) -> String {\n+    // This only applies to the actual MSVC linker.\n+    if flavour != LinkerFlavor::Msvc(Lld::No) {\n+        return escape_string(s);\n+    }\n+    match str::from_utf8(s) {\n+        Ok(s) => return s.to_owned(),\n+        Err(_) => match win::locale_byte_str_to_string(s, win::oem_code_page()) {\n+            Some(s) => s,\n+            // The string is not UTF-8 and isn't valid for the OEM code page\n+            None => format!(\"Non-UTF-8 output: {}\", s.escape_ascii()),\n+        },\n+    }\n+}\n+\n+/// Wrappers around the Windows API.\n+#[cfg(windows)]\n+mod win {\n+    use windows::Win32::Globalization::{\n+        GetLocaleInfoEx, MultiByteToWideChar, CP_OEMCP, LOCALE_IUSEUTF8LEGACYOEMCP,\n+        LOCALE_NAME_SYSTEM_DEFAULT, LOCALE_RETURN_NUMBER, MB_ERR_INVALID_CHARS,\n+    };\n+\n+    /// Get the Windows system OEM code page. This is most notably the code page\n+    /// used for link.exe's output.\n+    pub fn oem_code_page() -> u32 {\n+        unsafe {\n+            let mut cp: u32 = 0;\n+            // We're using the `LOCALE_RETURN_NUMBER` flag to return a u32.\n+            // But the API requires us to pass the data as though it's a [u16] string.\n+            let len = std::mem::size_of::<u32>() / std::mem::size_of::<u16>();\n+            let data = std::slice::from_raw_parts_mut(&mut cp as *mut u32 as *mut u16, len);\n+            let len_written = GetLocaleInfoEx(\n+                LOCALE_NAME_SYSTEM_DEFAULT,\n+                LOCALE_IUSEUTF8LEGACYOEMCP | LOCALE_RETURN_NUMBER,\n+                Some(data),\n+            );\n+            if len_written as usize == len { cp } else { CP_OEMCP }\n+        }\n+    }\n+    /// Try to convert a multi-byte string to a UTF-8 string using the given code page\n+    /// The string does not need to be null terminated.\n+    ///\n+    /// This is implemented as a wrapper around `MultiByteToWideChar`.\n+    /// See <https://learn.microsoft.com/en-us/windows/win32/api/stringapiset/nf-stringapiset-multibytetowidechar>\n+    ///\n+    /// It will fail if the multi-byte string is longer than `i32::MAX` or if it contains\n+    /// any invalid bytes for the expected encoding.\n+    pub fn locale_byte_str_to_string(s: &[u8], code_page: u32) -> Option<String> {\n+        // `MultiByteToWideChar` requires a length to be a \"positive integer\".\n+        if s.len() > isize::MAX as usize {\n+            return None;\n+        }\n+        // Error if the string is not valid for the expected code page.\n+        let flags = MB_ERR_INVALID_CHARS;\n+        // Call MultiByteToWideChar twice.\n+        // First to calculate the length then to convert the string.\n+        let mut len = unsafe { MultiByteToWideChar(code_page, flags, s, None) };\n+        if len > 0 {\n+            let mut utf16 = vec![0; len as usize];\n+            len = unsafe { MultiByteToWideChar(code_page, flags, s, Some(&mut utf16)) };\n+            if len > 0 {\n+                return utf16.get(..len as usize).map(String::from_utf16_lossy);\n+            }\n+        }\n+        None\n+    }\n+}\n+\n fn add_sanitizer_libraries(sess: &Session, crate_type: CrateType, linker: &mut dyn Linker) {\n     // On macOS the runtimes are distributed as dylibs which should be linked to\n     // both executables and dynamic shared objects. Everywhere else the runtimes"}, {"sha": "e3d39091a745dbf26e7d640333eb46650eee1ca0", "filename": "compiler/rustc_const_eval/src/transform/check_consts/ops.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -184,6 +184,9 @@ impl<'tcx> NonConstOp<'tcx> for FnCallNonConst<'tcx> {\n                     CallDesugaringKind::TryBlockFromOutput => {\n                         error!(\"`try` block cannot convert `{}` to the result in {}s\")\n                     }\n+                    CallDesugaringKind::Await => {\n+                        error!(\"cannot convert `{}` into a future in {}s\")\n+                    }\n                 };\n \n                 diag_trait(&mut err, self_ty, kind.trait_def_id(tcx));"}, {"sha": "bafb83740ca853f749a2ec50ba1c4c9fe57cefa8", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -310,8 +310,8 @@ declare_features! (\n     /// Allows `async || body` closures.\n     (active, async_closure, \"1.37.0\", Some(62290), None),\n     /// Allows async functions to be declared, implemented, and used in traits.\n-    (incomplete, async_fn_in_trait, \"1.66.0\", Some(91611), None),\n-    /// Allows `extern \"C-unwind\" fn` to enable unwinding across ABI boundaries.\n+    (active, async_fn_in_trait, \"1.66.0\", Some(91611), None),\n+    /// Treat `extern \"C\"` function as nounwind.\n     (active, c_unwind, \"1.52.0\", Some(74990), None),\n     /// Allows using C-variadics.\n     (active, c_variadic, \"1.34.0\", Some(44930), None),\n@@ -496,7 +496,7 @@ declare_features! (\n     /// Allows `repr(simd)` and importing the various simd intrinsics.\n     (active, repr_simd, \"1.4.0\", Some(27731), None),\n     /// Allows return-position `impl Trait` in traits.\n-    (incomplete, return_position_impl_trait_in_trait, \"1.65.0\", Some(91611), None),\n+    (active, return_position_impl_trait_in_trait, \"1.65.0\", Some(91611), None),\n     /// Allows bounding the return type of AFIT/RPITIT.\n     (incomplete, return_type_notation, \"1.70.0\", Some(109417), None),\n     /// Allows `extern \"rust-cold\"`."}, {"sha": "c77292fdd1647d630407cafafe14482f17760764", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -344,7 +344,7 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     ),\n     ungated!(link_name, Normal, template!(NameValueStr: \"name\"), FutureWarnPreceding),\n     ungated!(no_link, Normal, template!(Word), WarnFollowing),\n-    ungated!(repr, Normal, template!(List: \"C\"), DuplicatesOk),\n+    ungated!(repr, Normal, template!(List: \"C\"), DuplicatesOk, @only_local: true),\n     ungated!(export_name, Normal, template!(NameValueStr: \"name\"), FutureWarnPreceding),\n     ungated!(link_section, Normal, template!(NameValueStr: \"name\"), FutureWarnPreceding),\n     ungated!(no_mangle, Normal, template!(Word), WarnFollowing, @only_local: true),"}, {"sha": "6a10b50aa16eaa8a46f7128d9970d13001381cda", "filename": "compiler/rustc_hir_analysis/src/check/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsic.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -381,6 +381,7 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n             sym::unlikely => (0, vec![tcx.types.bool], tcx.types.bool),\n \n             sym::read_via_copy => (1, vec![tcx.mk_imm_ptr(param(0))], param(0)),\n+            sym::write_via_move => (1, vec![tcx.mk_mut_ptr(param(0)), param(0)], tcx.mk_unit()),\n \n             sym::discriminant_value => {\n                 let assoc_items = tcx.associated_item_def_ids("}, {"sha": "ec7fcbdf8848ca31400586e78da94bb209a5633d", "filename": "compiler/rustc_incremental/src/persist/load.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fload.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -4,7 +4,7 @@ use crate::errors;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::memmap::Mmap;\n use rustc_middle::dep_graph::{SerializedDepGraph, WorkProduct, WorkProductId};\n-use rustc_middle::ty::OnDiskCache;\n+use rustc_middle::query::on_disk_cache::OnDiskCache;\n use rustc_serialize::opaque::MemDecoder;\n use rustc_serialize::Decodable;\n use rustc_session::config::IncrementalStateAssertion;\n@@ -211,7 +211,7 @@ pub fn load_dep_graph(sess: &Session) -> DepGraphFuture {\n /// If we are not in incremental compilation mode, returns `None`.\n /// Otherwise, tries to load the query result cache from disk,\n /// creating an empty cache if it could not be loaded.\n-pub fn load_query_result_cache<'a, C: OnDiskCache<'a>>(sess: &'a Session) -> Option<C> {\n+pub fn load_query_result_cache(sess: &Session) -> Option<OnDiskCache<'_>> {\n     if sess.opts.incremental.is_none() {\n         return None;\n     }\n@@ -223,7 +223,9 @@ pub fn load_query_result_cache<'a, C: OnDiskCache<'a>>(sess: &'a Session) -> Opt\n         &query_cache_path(sess),\n         sess.is_nightly_build(),\n     ) {\n-        LoadResult::Ok { data: (bytes, start_pos) } => Some(C::new(sess, bytes, start_pos)),\n-        _ => Some(C::new_empty(sess.source_map())),\n+        LoadResult::Ok { data: (bytes, start_pos) } => {\n+            Some(OnDiskCache::new(sess, bytes, start_pos))\n+        }\n+        _ => Some(OnDiskCache::new_empty(sess.source_map())),\n     }\n }"}, {"sha": "1441e64e41f326db2b8000f529913f98a5679f0c", "filename": "compiler/rustc_incremental/src/persist/save.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fsave.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fsave.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fsave.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -48,7 +48,7 @@ pub fn save_dep_graph(tcx: TyCtxt<'_>) {\n             move || {\n                 sess.time(\"incr_comp_persist_result_cache\", || {\n                     // Drop the memory map so that we can remove the file and write to it.\n-                    if let Some(odc) = &tcx.on_disk_cache {\n+                    if let Some(odc) = &tcx.query_system.on_disk_cache {\n                         odc.drop_serialized_data(tcx);\n                     }\n "}, {"sha": "2c7438ed9db43a366d8676a27d4f0c112a2a48cf", "filename": "compiler/rustc_interface/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_interface%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_interface%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2FCargo.toml?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -44,6 +44,7 @@ rustc_lint = { path = \"../rustc_lint\" }\n rustc_errors = { path = \"../rustc_errors\" }\n rustc_plugin_impl = { path = \"../rustc_plugin_impl\" }\n rustc_privacy = { path = \"../rustc_privacy\" }\n+rustc_query_system = { path = \"../rustc_query_system\" }\n rustc_query_impl = { path = \"../rustc_query_impl\" }\n rustc_resolve = { path = \"../rustc_resolve\" }\n rustc_target = { path = \"../rustc_target\" }"}, {"sha": "8e9150ba8ad3dc85d49e1135d21404bda89b3304", "filename": "compiler/rustc_interface/src/interface.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Finterface.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -12,6 +12,7 @@ use rustc_lint::LintStore;\n use rustc_middle::ty;\n use rustc_parse::maybe_new_parser_from_source_str;\n use rustc_query_impl::QueryCtxt;\n+use rustc_query_system::query::print_query_stack;\n use rustc_session::config::{self, CheckCfg, ErrorOutputType, Input, OutputFilenames};\n use rustc_session::lint;\n use rustc_session::parse::{CrateConfig, ParseSess};\n@@ -317,7 +318,7 @@ pub fn try_print_query_stack(handler: &Handler, num_frames: Option<usize>) {\n     // state if it was responsible for triggering the panic.\n     let i = ty::tls::with_context_opt(|icx| {\n         if let Some(icx) = icx {\n-            QueryCtxt::from_tcx(icx.tcx).try_print_query_stack(icx.query, handler, num_frames)\n+            print_query_stack(QueryCtxt { tcx: icx.tcx }, icx.query, handler, num_frames)\n         } else {\n             0\n         }"}, {"sha": "48401eabd1ed1e46981ea3770d4c2579eca27cbd", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -23,7 +23,6 @@ use rustc_mir_build as mir_build;\n use rustc_parse::{parse_crate_from_file, parse_crate_from_source_str, validate_attr};\n use rustc_passes::{self, hir_stats, layout_test};\n use rustc_plugin_impl as plugin;\n-use rustc_query_impl::{OnDiskCache, Queries as TcxQueries};\n use rustc_resolve::Resolver;\n use rustc_session::config::{CrateType, Input, OutputFilenames, OutputType};\n use rustc_session::cstore::{MetadataLoader, Untracked};\n@@ -669,7 +668,6 @@ pub fn create_global_ctxt<'tcx>(\n     lint_store: Lrc<LintStore>,\n     dep_graph: DepGraph,\n     untracked: Untracked,\n-    queries: &'tcx OnceCell<TcxQueries<'tcx>>,\n     gcx_cell: &'tcx OnceCell<GlobalCtxt<'tcx>>,\n     arena: &'tcx WorkerLocal<Arena<'tcx>>,\n     hir_arena: &'tcx WorkerLocal<rustc_hir::Arena<'tcx>>,\n@@ -693,10 +691,6 @@ pub fn create_global_ctxt<'tcx>(\n         callback(sess, &mut local_providers, &mut extern_providers);\n     }\n \n-    let queries = queries.get_or_init(|| {\n-        TcxQueries::new(local_providers, extern_providers, query_result_on_disk_cache)\n-    });\n-\n     sess.time(\"setup_global_ctxt\", || {\n         gcx_cell.get_or_init(move || {\n             TyCtxt::create_global_ctxt(\n@@ -706,9 +700,9 @@ pub fn create_global_ctxt<'tcx>(\n                 hir_arena,\n                 untracked,\n                 dep_graph,\n-                queries.on_disk_cache.as_ref().map(OnDiskCache::as_dyn),\n-                queries.as_dyn(),\n+                query_result_on_disk_cache,\n                 rustc_query_impl::query_callbacks(arena),\n+                rustc_query_impl::query_system_fns(local_providers, extern_providers),\n             )\n         })\n     })"}, {"sha": "77fbbf64a0ad25003c39aac89a9ca528b5cc4e18", "filename": "compiler/rustc_interface/src/queries.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -16,7 +16,6 @@ use rustc_metadata::creader::CStore;\n use rustc_middle::arena::Arena;\n use rustc_middle::dep_graph::DepGraph;\n use rustc_middle::ty::{GlobalCtxt, TyCtxt};\n-use rustc_query_impl::Queries as TcxQueries;\n use rustc_session::config::{self, OutputFilenames, OutputType};\n use rustc_session::cstore::Untracked;\n use rustc_session::{output::find_crate_name, Session};\n@@ -81,7 +80,6 @@ impl<T> Default for Query<T> {\n pub struct Queries<'tcx> {\n     compiler: &'tcx Compiler,\n     gcx_cell: OnceCell<GlobalCtxt<'tcx>>,\n-    queries: OnceCell<TcxQueries<'tcx>>,\n \n     arena: WorkerLocal<Arena<'tcx>>,\n     hir_arena: WorkerLocal<rustc_hir::Arena<'tcx>>,\n@@ -102,7 +100,6 @@ impl<'tcx> Queries<'tcx> {\n         Queries {\n             compiler,\n             gcx_cell: OnceCell::new(),\n-            queries: OnceCell::new(),\n             arena: WorkerLocal::new(|_| Arena::default()),\n             hir_arena: WorkerLocal::new(|_| rustc_hir::Arena::default()),\n             dep_graph_future: Default::default(),\n@@ -225,7 +222,6 @@ impl<'tcx> Queries<'tcx> {\n                 lint_store,\n                 self.dep_graph()?.steal(),\n                 untracked,\n-                &self.queries,\n                 &self.gcx_cell,\n                 &self.arena,\n                 &self.hir_arena,"}, {"sha": "8d37b1053d800b6aa5061671a99072bb34de5bb4", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -170,7 +170,8 @@ pub(crate) fn run_in_thread_pool_with_globals<F: FnOnce() -> R + Send, R: Send>(\n ) -> R {\n     use rustc_data_structures::jobserver;\n     use rustc_middle::ty::tls;\n-    use rustc_query_impl::{deadlock, QueryContext, QueryCtxt};\n+    use rustc_query_impl::QueryCtxt;\n+    use rustc_query_system::query::{deadlock, QueryContext};\n \n     let registry = sync::Registry::new(threads);\n     let mut builder = rayon::ThreadPoolBuilder::new()\n@@ -182,7 +183,7 @@ pub(crate) fn run_in_thread_pool_with_globals<F: FnOnce() -> R + Send, R: Send>(\n             // On deadlock, creates a new thread and forwards information in thread\n             // locals to it. The new thread runs the deadlock handler.\n             let query_map = tls::with(|tcx| {\n-                QueryCtxt::from_tcx(tcx)\n+                QueryCtxt::new(tcx)\n                     .try_collect_active_jobs()\n                     .expect(\"active jobs shouldn't be locked in deadlock handler\")\n             });"}, {"sha": "6fe15e21d948dc3a9db0618624c4d2eb15c6c0a7", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -4014,7 +4014,6 @@ declare_lint! {\n     /// ### Example\n     ///\n     /// ```rust\n-    /// #![feature(c_unwind)]\n     /// #![warn(ffi_unwind_calls)]\n     ///\n     /// extern \"C-unwind\" {\n@@ -4037,8 +4036,7 @@ declare_lint! {\n     /// that desire this ability it is therefore necessary to avoid such calls.\n     pub FFI_UNWIND_CALLS,\n     Allow,\n-    \"call to foreign functions or function pointers with FFI-unwind ABI\",\n-    @feature_gate = sym::c_unwind;\n+    \"call to foreign functions or function pointers with FFI-unwind ABI\"\n }\n \n declare_lint! {"}, {"sha": "a7d97bd3cf5ee6b0a9ba6fae9cf9cd58fd988ba2", "filename": "compiler/rustc_middle/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_middle%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_middle%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2FCargo.toml?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -11,6 +11,7 @@ chalk-ir = \"0.87.0\"\n derive_more = \"0.99.17\"\n either = \"1.5.0\"\n gsgdt = \"0.1.2\"\n+measureme = \"10.0.0\"\n polonius-engine = \"0.13.0\"\n rustc_apfloat = { path = \"../rustc_apfloat\" }\n rustc_arena = { path = \"../rustc_arena\" }"}, {"sha": "e5a9766c84dc83aa9bdc09b3b48b52d8e0065ff9", "filename": "compiler/rustc_middle/src/mir/interpret/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -227,7 +227,9 @@ pub fn specialized_encode_alloc_id<'tcx, E: TyEncoder<I = TyCtxt<'tcx>>>(\n             // References to statics doesn't need to know about their allocations,\n             // just about its `DefId`.\n             AllocDiscriminant::Static.encode(encoder);\n-            did.encode(encoder);\n+            // Cannot use `did.encode(encoder)` because of a bug around\n+            // specializations and method calls.\n+            Encodable::<E>::encode(&did, encoder);\n         }\n     }\n }"}, {"sha": "111993ec7a8800f4469ee22881a4eceffea6e459", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -9,6 +9,7 @@ use rustc_span::def_id::LOCAL_CRATE;\n \n pub mod erase;\n mod keys;\n+pub mod on_disk_cache;\n pub use keys::{AsLocalKey, Key, LocalCrate};\n \n // Each of these queries corresponds to a function pointer field in the\n@@ -874,7 +875,7 @@ rustc_queries! {\n \n     query typeck(key: LocalDefId) -> &'tcx ty::TypeckResults<'tcx> {\n         desc { |tcx| \"type-checking `{}`\", tcx.def_path_str(key) }\n-        cache_on_disk_if { true }\n+        cache_on_disk_if(tcx) { !tcx.is_typeck_child(key.to_def_id()) }\n     }\n     query diagnostic_only_typeck(key: LocalDefId) -> &'tcx ty::TypeckResults<'tcx> {\n         desc { |tcx| \"type-checking `{}`\", tcx.def_path_str(key) }"}, {"sha": "e56faff5ed47cda1e62d7fc125201629e2dd89cf", "filename": "compiler/rustc_middle/src/query/on_disk_cache.rs", "status": "renamed", "additions": 33, "deletions": 51, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fon_disk_cache.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -1,4 +1,3 @@\n-use crate::QueryCtxt;\n use rustc_data_structures::fx::{FxHashMap, FxIndexSet};\n use rustc_data_structures::memmap::Mmap;\n use rustc_data_structures::stable_hasher::Hash64;\n@@ -13,8 +12,7 @@ use rustc_middle::mir::interpret::{AllocDecodingSession, AllocDecodingState};\n use rustc_middle::mir::{self, interpret};\n use rustc_middle::ty::codec::{RefDecodable, TyDecoder, TyEncoder};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n-use rustc_query_system::dep_graph::DepContext;\n-use rustc_query_system::query::{QueryCache, QuerySideEffects};\n+use rustc_query_system::query::QuerySideEffects;\n use rustc_serialize::{\n     opaque::{FileEncodeResult, FileEncoder, IntEncodedWithFixedSize, MemDecoder},\n     Decodable, Decoder, Encodable, Encoder,\n@@ -123,10 +121,12 @@ struct SourceFileIndex(u32);\n pub struct AbsoluteBytePos(u64);\n \n impl AbsoluteBytePos {\n-    fn new(pos: usize) -> AbsoluteBytePos {\n+    #[inline]\n+    pub fn new(pos: usize) -> AbsoluteBytePos {\n         AbsoluteBytePos(pos.try_into().expect(\"Incremental cache file size overflowed u64.\"))\n     }\n \n+    #[inline]\n     fn to_usize(self) -> usize {\n         self.0 as usize\n     }\n@@ -144,11 +144,13 @@ struct EncodedSourceFileId {\n }\n \n impl EncodedSourceFileId {\n+    #[inline]\n     fn translate(&self, tcx: TyCtxt<'_>) -> StableSourceFileId {\n         let cnum = tcx.stable_crate_id_to_crate_num(self.stable_crate_id);\n         StableSourceFileId { file_name_hash: self.file_name_hash, cnum }\n     }\n \n+    #[inline]\n     fn new(tcx: TyCtxt<'_>, file: &SourceFile) -> EncodedSourceFileId {\n         let source_file_id = StableSourceFileId::new(file);\n         EncodedSourceFileId {\n@@ -158,9 +160,9 @@ impl EncodedSourceFileId {\n     }\n }\n \n-impl<'sess> rustc_middle::ty::OnDiskCache<'sess> for OnDiskCache<'sess> {\n+impl<'sess> OnDiskCache<'sess> {\n     /// Creates a new `OnDiskCache` instance from the serialized data in `data`.\n-    fn new(sess: &'sess Session, data: Mmap, start_pos: usize) -> Self {\n+    pub fn new(sess: &'sess Session, data: Mmap, start_pos: usize) -> Self {\n         debug_assert!(sess.opts.incremental.is_some());\n \n         // Wrap in a scope so we can borrow `data`.\n@@ -193,7 +195,7 @@ impl<'sess> rustc_middle::ty::OnDiskCache<'sess> for OnDiskCache<'sess> {\n         }\n     }\n \n-    fn new_empty(source_map: &'sess SourceMap) -> Self {\n+    pub fn new_empty(source_map: &'sess SourceMap) -> Self {\n         Self {\n             serialized_data: RwLock::new(None),\n             file_index_to_stable_id: Default::default(),\n@@ -215,7 +217,7 @@ impl<'sess> rustc_middle::ty::OnDiskCache<'sess> for OnDiskCache<'sess> {\n     /// Cache promotions require invoking queries, which needs to read the serialized data.\n     /// In order to serialize the new on-disk cache, the former on-disk cache file needs to be\n     /// deleted, hence we won't be able to refer to its memmapped data.\n-    fn drop_serialized_data(&self, tcx: TyCtxt<'_>) {\n+    pub fn drop_serialized_data(&self, tcx: TyCtxt<'_>) {\n         // Load everything into memory so we can write it out to the on-disk\n         // cache. The vast majority of cacheable query results should already\n         // be in memory, so this should be a cheap operation.\n@@ -227,7 +229,7 @@ impl<'sess> rustc_middle::ty::OnDiskCache<'sess> for OnDiskCache<'sess> {\n         *self.serialized_data.write() = None;\n     }\n \n-    fn serialize(&self, tcx: TyCtxt<'_>, encoder: FileEncoder) -> FileEncodeResult {\n+    pub fn serialize(&self, tcx: TyCtxt<'_>, encoder: FileEncoder) -> FileEncodeResult {\n         // Serializing the `DepGraph` should not modify it.\n         tcx.dep_graph.with_ignore(|| {\n             // Allocate `SourceFileIndex`es.\n@@ -269,7 +271,7 @@ impl<'sess> rustc_middle::ty::OnDiskCache<'sess> for OnDiskCache<'sess> {\n             tcx.sess.time(\"encode_query_results\", || {\n                 let enc = &mut encoder;\n                 let qri = &mut query_result_index;\n-                QueryCtxt::from_tcx(tcx).encode_query_results(enc, qri);\n+                (tcx.query_system.fns.encode_query_results)(tcx, enc, qri);\n             });\n \n             // Encode side effects.\n@@ -358,12 +360,6 @@ impl<'sess> rustc_middle::ty::OnDiskCache<'sess> for OnDiskCache<'sess> {\n             encoder.finish()\n         })\n     }\n-}\n-\n-impl<'sess> OnDiskCache<'sess> {\n-    pub fn as_dyn(&self) -> &dyn rustc_middle::ty::OnDiskCache<'sess> {\n-        self as _\n-    }\n \n     /// Loads a `QuerySideEffects` created during the previous compilation session.\n     pub fn load_side_effects(\n@@ -380,15 +376,14 @@ impl<'sess> OnDiskCache<'sess> {\n     /// Stores a `QuerySideEffects` emitted during the current compilation session.\n     /// Anything stored like this will be available via `load_side_effects` in\n     /// the next compilation session.\n-    #[inline(never)]\n-    #[cold]\n     pub fn store_side_effects(&self, dep_node_index: DepNodeIndex, side_effects: QuerySideEffects) {\n         let mut current_side_effects = self.current_side_effects.borrow_mut();\n         let prev = current_side_effects.insert(dep_node_index, side_effects);\n         debug_assert!(prev.is_none());\n     }\n \n     /// Return whether the cached query result can be decoded.\n+    #[inline]\n     pub fn loadable_from_disk(&self, dep_node_index: SerializedDepNodeIndex) -> bool {\n         self.query_result_index.contains_key(&dep_node_index)\n         // with_decoder is infallible, so we can stop here\n@@ -413,8 +408,6 @@ impl<'sess> OnDiskCache<'sess> {\n     /// Since many anonymous queries can share the same `DepNode`, we aggregate\n     /// them -- as opposed to regular queries where we assume that there is a\n     /// 1:1 relationship between query-key and `DepNode`.\n-    #[inline(never)]\n-    #[cold]\n     pub fn store_side_effects_for_anon_node(\n         &self,\n         dep_node_index: DepNodeIndex,\n@@ -485,6 +478,7 @@ pub struct CacheDecoder<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> CacheDecoder<'a, 'tcx> {\n+    #[inline]\n     fn file_index_to_file(&self, index: SourceFileIndex) -> Lrc<SourceFile> {\n         let CacheDecoder {\n             tcx,\n@@ -705,6 +699,7 @@ impl<'a, 'tcx> Decodable<CacheDecoder<'a, 'tcx>> for Span {\n \n // copy&paste impl from rustc_metadata\n impl<'a, 'tcx> Decodable<CacheDecoder<'a, 'tcx>> for Symbol {\n+    #[inline]\n     fn decode(d: &mut CacheDecoder<'a, 'tcx>) -> Self {\n         let tag = d.read_u8();\n \n@@ -733,6 +728,7 @@ impl<'a, 'tcx> Decodable<CacheDecoder<'a, 'tcx>> for Symbol {\n }\n \n impl<'a, 'tcx> Decodable<CacheDecoder<'a, 'tcx>> for CrateNum {\n+    #[inline]\n     fn decode(d: &mut CacheDecoder<'a, 'tcx>) -> Self {\n         let stable_id = StableCrateId::decode(d);\n         let cnum = d.tcx.stable_crate_id_to_crate_num(stable_id);\n@@ -754,6 +750,7 @@ impl<'a, 'tcx> Decodable<CacheDecoder<'a, 'tcx>> for DefIndex {\n // compilation sessions. We use the `DefPathHash`, which is stable across\n // sessions, to map the old `DefId` to the new one.\n impl<'a, 'tcx> Decodable<CacheDecoder<'a, 'tcx>> for DefId {\n+    #[inline]\n     fn decode(d: &mut CacheDecoder<'a, 'tcx>) -> Self {\n         // Load the `DefPathHash` which is was we encoded the `DefId` as.\n         let def_path_hash = DefPathHash::decode(d);\n@@ -770,6 +767,7 @@ impl<'a, 'tcx> Decodable<CacheDecoder<'a, 'tcx>> for DefId {\n }\n \n impl<'a, 'tcx> Decodable<CacheDecoder<'a, 'tcx>> for &'tcx UnordSet<LocalDefId> {\n+    #[inline]\n     fn decode(d: &mut CacheDecoder<'a, 'tcx>) -> Self {\n         RefDecodable::decode(d)\n     }\n@@ -778,6 +776,7 @@ impl<'a, 'tcx> Decodable<CacheDecoder<'a, 'tcx>> for &'tcx UnordSet<LocalDefId>\n impl<'a, 'tcx> Decodable<CacheDecoder<'a, 'tcx>>\n     for &'tcx FxHashMap<DefId, ty::EarlyBinder<Ty<'tcx>>>\n {\n+    #[inline]\n     fn decode(d: &mut CacheDecoder<'a, 'tcx>) -> Self {\n         RefDecodable::decode(d)\n     }\n@@ -786,24 +785,28 @@ impl<'a, 'tcx> Decodable<CacheDecoder<'a, 'tcx>>\n impl<'a, 'tcx> Decodable<CacheDecoder<'a, 'tcx>>\n     for &'tcx IndexVec<mir::Promoted, mir::Body<'tcx>>\n {\n+    #[inline]\n     fn decode(d: &mut CacheDecoder<'a, 'tcx>) -> Self {\n         RefDecodable::decode(d)\n     }\n }\n \n impl<'a, 'tcx> Decodable<CacheDecoder<'a, 'tcx>> for &'tcx [(ty::Predicate<'tcx>, Span)] {\n+    #[inline]\n     fn decode(d: &mut CacheDecoder<'a, 'tcx>) -> Self {\n         RefDecodable::decode(d)\n     }\n }\n \n impl<'a, 'tcx> Decodable<CacheDecoder<'a, 'tcx>> for &'tcx [(ty::Clause<'tcx>, Span)] {\n+    #[inline]\n     fn decode(d: &mut CacheDecoder<'a, 'tcx>) -> Self {\n         RefDecodable::decode(d)\n     }\n }\n \n impl<'a, 'tcx> Decodable<CacheDecoder<'a, 'tcx>> for &'tcx [rustc_ast::InlineAsmTemplatePiece] {\n+    #[inline]\n     fn decode(d: &mut CacheDecoder<'a, 'tcx>) -> Self {\n         RefDecodable::decode(d)\n     }\n@@ -812,6 +815,7 @@ impl<'a, 'tcx> Decodable<CacheDecoder<'a, 'tcx>> for &'tcx [rustc_ast::InlineAsm\n macro_rules! impl_ref_decoder {\n     (<$tcx:tt> $($ty:ty,)*) => {\n         $(impl<'a, $tcx> Decodable<CacheDecoder<'a, $tcx>> for &$tcx [$ty] {\n+            #[inline]\n             fn decode(d: &mut CacheDecoder<'a, $tcx>) -> Self {\n                 RefDecodable::decode(d)\n             }\n@@ -846,6 +850,7 @@ pub struct CacheEncoder<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> CacheEncoder<'a, 'tcx> {\n+    #[inline]\n     fn source_file_index(&mut self, source_file: Lrc<SourceFile>) -> SourceFileIndex {\n         self.file_to_file_index[&(&*source_file as *const SourceFile)]\n     }\n@@ -855,7 +860,7 @@ impl<'a, 'tcx> CacheEncoder<'a, 'tcx> {\n     /// encode the specified tag, then the given value, then the number of\n     /// bytes taken up by tag and value. On decoding, we can then verify that\n     /// we get the expected tag and read the expected number of bytes.\n-    fn encode_tagged<T: Encodable<Self>, V: Encodable<Self>>(&mut self, tag: T, value: &V) {\n+    pub fn encode_tagged<T: Encodable<Self>, V: Encodable<Self>>(&mut self, tag: T, value: &V) {\n         let start_pos = self.position();\n \n         tag.encode(self);\n@@ -865,6 +870,7 @@ impl<'a, 'tcx> CacheEncoder<'a, 'tcx> {\n         ((end_pos - start_pos) as u64).encode(self);\n     }\n \n+    #[inline]\n     fn finish(self) -> Result<usize, io::Error> {\n         self.encoder.finish()\n     }\n@@ -957,15 +963,19 @@ impl<'a, 'tcx> TyEncoder for CacheEncoder<'a, 'tcx> {\n     type I = TyCtxt<'tcx>;\n     const CLEAR_CROSS_CRATE: bool = false;\n \n+    #[inline]\n     fn position(&self) -> usize {\n         self.encoder.position()\n     }\n+    #[inline]\n     fn type_shorthands(&mut self) -> &mut FxHashMap<Ty<'tcx>, usize> {\n         &mut self.type_shorthands\n     }\n+    #[inline]\n     fn predicate_shorthands(&mut self) -> &mut FxHashMap<ty::PredicateKind<'tcx>, usize> {\n         &mut self.predicate_shorthands\n     }\n+    #[inline]\n     fn encode_alloc_id(&mut self, alloc_id: &interpret::AllocId) {\n         let (index, _) = self.interpret_allocs.insert_full(*alloc_id);\n \n@@ -974,12 +984,14 @@ impl<'a, 'tcx> TyEncoder for CacheEncoder<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Encodable<CacheEncoder<'a, 'tcx>> for CrateNum {\n+    #[inline]\n     fn encode(&self, s: &mut CacheEncoder<'a, 'tcx>) {\n         s.tcx.stable_crate_id(*self).encode(s);\n     }\n }\n \n impl<'a, 'tcx> Encodable<CacheEncoder<'a, 'tcx>> for DefId {\n+    #[inline]\n     fn encode(&self, s: &mut CacheEncoder<'a, 'tcx>) {\n         s.tcx.def_path_hash(*self).encode(s);\n     }\n@@ -1032,33 +1044,3 @@ impl<'a, 'tcx> Encodable<CacheEncoder<'a, 'tcx>> for [u8] {\n         self.encode(&mut e.encoder);\n     }\n }\n-\n-pub(crate) fn encode_query_results<'a, 'tcx, Q>(\n-    query: Q,\n-    qcx: QueryCtxt<'tcx>,\n-    encoder: &mut CacheEncoder<'a, 'tcx>,\n-    query_result_index: &mut EncodedDepNodeIndex,\n-) where\n-    Q: super::QueryConfigRestored<'tcx>,\n-    Q::RestoredValue: Encodable<CacheEncoder<'a, 'tcx>>,\n-{\n-    let _timer = qcx\n-        .tcx\n-        .profiler()\n-        .verbose_generic_activity_with_arg(\"encode_query_results_for\", query.name());\n-\n-    assert!(query.query_state(qcx).all_inactive());\n-    let cache = query.query_cache(qcx);\n-    cache.iter(&mut |key, value, dep_node| {\n-        if query.cache_on_disk(qcx.tcx, &key) {\n-            let dep_node = SerializedDepNodeIndex::new(dep_node.index());\n-\n-            // Record position of the cache entry.\n-            query_result_index.push((dep_node, AbsoluteBytePos::new(encoder.encoder.position())));\n-\n-            // Encode the type check tables with the `SerializedDepNodeIndex`\n-            // as tag.\n-            encoder.encode_tagged(dep_node, &Q::restore(*value));\n-        }\n-    });\n-}", "previous_filename": "compiler/rustc_query_impl/src/on_disk_cache.rs"}, {"sha": "7536903ef96fcf41dcab9535f8ec8e4a012c1f09", "filename": "compiler/rustc_middle/src/ty/codec.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -500,7 +500,6 @@ impl_arena_copy_decoder! {<'tcx>\n macro_rules! implement_ty_decoder {\n     ($DecoderName:ident <$($typaram:tt),*>) => {\n         mod __ty_decoder_impl {\n-            use std::borrow::Cow;\n             use rustc_serialize::Decoder;\n \n             use super::$DecoderName;"}, {"sha": "a309eaf048d2a8162cd7123dcfc9d62a4fd00ab8", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 7, "deletions": 30, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -14,11 +14,14 @@ use crate::middle::resolve_bound_vars;\n use crate::middle::stability;\n use crate::mir::interpret::{self, Allocation, ConstAllocation};\n use crate::mir::{Body, Local, Place, PlaceElem, ProjectionKind, Promoted};\n+use crate::query::on_disk_cache::OnDiskCache;\n use crate::query::LocalCrate;\n use crate::thir::Thir;\n use crate::traits;\n use crate::traits::solve;\n use crate::traits::solve::{ExternalConstraints, ExternalConstraintsData};\n+use crate::ty::query::QuerySystem;\n+use crate::ty::query::QuerySystemFns;\n use crate::ty::query::{self, TyCtxtAt};\n use crate::ty::{\n     self, AdtDef, AdtDefData, AdtKind, Binder, Const, ConstData, FloatTy, FloatVar, FloatVid,\n@@ -31,7 +34,6 @@ use rustc_ast::{self as ast, attr};\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::intern::Interned;\n-use rustc_data_structures::memmap::Mmap;\n use rustc_data_structures::profiling::SelfProfilerRef;\n use rustc_data_structures::sharded::{IntoPointer, ShardedHashMap};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n@@ -61,7 +63,6 @@ use rustc_session::lint::Lint;\n use rustc_session::Limit;\n use rustc_session::Session;\n use rustc_span::def_id::{DefPathHash, StableCrateId};\n-use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n use rustc_target::abi::{FieldIdx, Layout, LayoutS, TargetDataLayout, VariantIdx};\n@@ -84,21 +85,6 @@ use super::query::IntoQueryParam;\n \n const TINY_CONST_EVAL_LIMIT: Limit = Limit(20);\n \n-pub trait OnDiskCache<'tcx>: rustc_data_structures::sync::Sync {\n-    /// Creates a new `OnDiskCache` instance from the serialized data in `data`.\n-    fn new(sess: &'tcx Session, data: Mmap, start_pos: usize) -> Self\n-    where\n-        Self: Sized;\n-\n-    fn new_empty(source_map: &'tcx SourceMap) -> Self\n-    where\n-        Self: Sized;\n-\n-    fn drop_serialized_data(&self, tcx: TyCtxt<'tcx>);\n-\n-    fn serialize(&self, tcx: TyCtxt<'tcx>, encoder: FileEncoder) -> FileEncodeResult;\n-}\n-\n #[allow(rustc::usage_of_ty_tykind)]\n impl<'tcx> Interner for TyCtxt<'tcx> {\n     type AdtDef = ty::AdtDef<'tcx>;\n@@ -527,13 +513,6 @@ pub struct GlobalCtxt<'tcx> {\n \n     untracked: Untracked,\n \n-    /// This provides access to the incremental compilation on-disk cache for query results.\n-    /// Do not access this directly. It is only meant to be used by\n-    /// `DepGraph::try_mark_green()` and the query infrastructure.\n-    /// This is `None` if we are not incremental compilation mode\n-    pub on_disk_cache: Option<&'tcx dyn OnDiskCache<'tcx>>,\n-\n-    pub queries: &'tcx dyn query::QueryEngine<'tcx>,\n     pub query_system: query::QuerySystem<'tcx>,\n     pub(crate) query_kinds: &'tcx [DepKindStruct<'tcx>],\n \n@@ -674,9 +653,9 @@ impl<'tcx> TyCtxt<'tcx> {\n         hir_arena: &'tcx WorkerLocal<hir::Arena<'tcx>>,\n         untracked: Untracked,\n         dep_graph: DepGraph,\n-        on_disk_cache: Option<&'tcx dyn OnDiskCache<'tcx>>,\n-        queries: &'tcx dyn query::QueryEngine<'tcx>,\n+        on_disk_cache: Option<OnDiskCache<'tcx>>,\n         query_kinds: &'tcx [DepKindStruct<'tcx>],\n+        query_system_fns: QuerySystemFns<'tcx>,\n     ) -> GlobalCtxt<'tcx> {\n         let data_layout = s.target.parse_data_layout().unwrap_or_else(|err| {\n             s.emit_fatal(err);\n@@ -698,9 +677,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             lifetimes: common_lifetimes,\n             consts: common_consts,\n             untracked,\n-            on_disk_cache,\n-            queries,\n-            query_system: Default::default(),\n+            query_system: QuerySystem::new(query_system_fns, on_disk_cache),\n             query_kinds,\n             ty_rcache: Default::default(),\n             pred_rcache: Default::default(),\n@@ -1039,7 +1016,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     pub fn serialize_query_result_cache(self, encoder: FileEncoder) -> FileEncodeResult {\n-        self.on_disk_cache.as_ref().map_or(Ok(0), |c| c.serialize(self, encoder))\n+        self.query_system.on_disk_cache.as_ref().map_or(Ok(0), |c| c.serialize(self, encoder))\n     }\n \n     /// If `true`, we should use lazy normalization for constants, otherwise"}, {"sha": "db6b35026a8e7852971678552c4b99f17c7aec55", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -84,8 +84,7 @@ pub use self::consts::{\n     Const, ConstData, ConstInt, ConstKind, Expr, InferConst, ScalarInt, UnevaluatedConst, ValTree,\n };\n pub use self::context::{\n-    tls, CtxtInterners, DeducedParamAttrs, FreeRegionInfo, GlobalCtxt, Lift, OnDiskCache, TyCtxt,\n-    TyCtxtFeed,\n+    tls, CtxtInterners, DeducedParamAttrs, FreeRegionInfo, GlobalCtxt, Lift, TyCtxt, TyCtxtFeed,\n };\n pub use self::instance::{Instance, InstanceDef, ShortInstance, UnusedGenericParams};\n pub use self::list::List;"}, {"sha": "07d47cae5ee933a574f6777dac613611b479ecce", "filename": "compiler/rustc_middle/src/ty/query.rs", "status": "modified", "additions": 135, "deletions": 45, "changes": 180, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -1,6 +1,7 @@\n #![allow(unused_parens)]\n \n use crate::dep_graph;\n+use crate::dep_graph::DepKind;\n use crate::infer::canonical::{self, Canonical};\n use crate::lint::LintExpectation;\n use crate::metadata::ModChild;\n@@ -17,7 +18,11 @@ use crate::mir::interpret::{\n };\n use crate::mir::interpret::{LitToConstError, LitToConstInput};\n use crate::mir::mono::CodegenUnit;\n+\n use crate::query::erase::{erase, restore, Erase};\n+use crate::query::on_disk_cache::CacheEncoder;\n+use crate::query::on_disk_cache::EncodedDepNodeIndex;\n+use crate::query::on_disk_cache::OnDiskCache;\n use crate::query::{AsLocalKey, Key};\n use crate::thir;\n use crate::traits::query::{\n@@ -38,13 +43,16 @@ use crate::ty::subst::{GenericArg, SubstsRef};\n use crate::ty::util::AlwaysRequiresDrop;\n use crate::ty::GeneratorDiagnosticData;\n use crate::ty::{self, CrateInherentImpls, ParamEnvAnd, Ty, TyCtxt, UnusedGenericParams};\n+use measureme::StringId;\n use rustc_arena::TypedArena;\n use rustc_ast as ast;\n use rustc_ast::expand::allocator::AllocatorKind;\n use rustc_attr as attr;\n+use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::{FxHashMap, FxIndexMap, FxIndexSet};\n use rustc_data_structures::steal::Steal;\n use rustc_data_structures::svh::Svh;\n+use rustc_data_structures::sync::AtomicU64;\n use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::sync::WorkerLocal;\n use rustc_data_structures::unord::UnordSet;\n@@ -58,6 +66,7 @@ use rustc_hir::hir_id::OwnerId;\n use rustc_hir::lang_items::{LangItem, LanguageItems};\n use rustc_hir::{Crate, ItemLocalId, TraitCandidate};\n use rustc_index::IndexVec;\n+use rustc_query_system::ich::StableHashingContext;\n pub(crate) use rustc_query_system::query::QueryJobId;\n use rustc_query_system::query::*;\n use rustc_session::config::{EntryFnType, OptLevel, OutputFilenames, SymbolManglingVersion};\n@@ -76,17 +85,70 @@ use std::ops::Deref;\n use std::path::PathBuf;\n use std::sync::Arc;\n \n-use rustc_data_structures::fingerprint::Fingerprint;\n-use rustc_query_system::ich::StableHashingContext;\n+pub struct QueryKeyStringCache {\n+    pub def_id_cache: FxHashMap<DefId, StringId>,\n+}\n+\n+impl QueryKeyStringCache {\n+    pub fn new() -> QueryKeyStringCache {\n+        QueryKeyStringCache { def_id_cache: Default::default() }\n+    }\n+}\n+\n+#[derive(Clone, Copy)]\n+pub struct QueryStruct<'tcx> {\n+    pub try_collect_active_jobs: fn(TyCtxt<'tcx>, &mut QueryMap<DepKind>) -> Option<()>,\n+    pub alloc_self_profile_query_strings: fn(TyCtxt<'tcx>, &mut QueryKeyStringCache),\n+    pub encode_query_results:\n+        Option<fn(TyCtxt<'tcx>, &mut CacheEncoder<'_, 'tcx>, &mut EncodedDepNodeIndex)>,\n+}\n+\n+pub struct QuerySystemFns<'tcx> {\n+    pub engine: QueryEngine,\n+    pub local_providers: Providers,\n+    pub extern_providers: ExternProviders,\n+    pub query_structs: Vec<QueryStruct<'tcx>>,\n+    pub encode_query_results: fn(\n+        tcx: TyCtxt<'tcx>,\n+        encoder: &mut CacheEncoder<'_, 'tcx>,\n+        query_result_index: &mut EncodedDepNodeIndex,\n+    ),\n+    pub try_mark_green: fn(tcx: TyCtxt<'tcx>, dep_node: &dep_graph::DepNode) -> bool,\n+}\n \n-#[derive(Default)]\n pub struct QuerySystem<'tcx> {\n+    pub states: QueryStates<'tcx>,\n     pub arenas: QueryArenas<'tcx>,\n     pub caches: QueryCaches<'tcx>,\n+\n+    /// This provides access to the incremental compilation on-disk cache for query results.\n+    /// Do not access this directly. It is only meant to be used by\n+    /// `DepGraph::try_mark_green()` and the query infrastructure.\n+    /// This is `None` if we are not incremental compilation mode\n+    pub on_disk_cache: Option<OnDiskCache<'tcx>>,\n+\n+    pub fns: QuerySystemFns<'tcx>,\n+\n+    pub jobs: AtomicU64,\n+\n     // Since we erase query value types we tell the typesystem about them with `PhantomData`.\n     _phantom_values: QueryPhantomValues<'tcx>,\n }\n \n+impl<'tcx> QuerySystem<'tcx> {\n+    pub fn new(fns: QuerySystemFns<'tcx>, on_disk_cache: Option<OnDiskCache<'tcx>>) -> Self {\n+        QuerySystem {\n+            states: Default::default(),\n+            arenas: Default::default(),\n+            caches: Default::default(),\n+            on_disk_cache,\n+            fns,\n+            jobs: AtomicU64::new(1),\n+            _phantom_values: Default::default(),\n+        }\n+    }\n+}\n+\n #[derive(Copy, Clone)]\n pub struct TyCtxtAt<'tcx> {\n     pub tcx: TyCtxt<'tcx>,\n@@ -136,7 +198,41 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     pub fn try_mark_green(self, dep_node: &dep_graph::DepNode) -> bool {\n-        self.queries.try_mark_green(self, dep_node)\n+        (self.query_system.fns.try_mark_green)(self, dep_node)\n+    }\n+}\n+\n+#[inline]\n+fn query_get_at<'tcx, Cache>(\n+    tcx: TyCtxt<'tcx>,\n+    execute_query: fn(TyCtxt<'tcx>, Span, Cache::Key, QueryMode) -> Option<Cache::Value>,\n+    query_cache: &Cache,\n+    span: Span,\n+    key: Cache::Key,\n+) -> Cache::Value\n+where\n+    Cache: QueryCache,\n+{\n+    let key = key.into_query_param();\n+    match try_get_cached(tcx, query_cache, &key) {\n+        Some(value) => value,\n+        None => execute_query(tcx, span, key, QueryMode::Get).unwrap(),\n+    }\n+}\n+\n+#[inline]\n+fn query_ensure<'tcx, Cache>(\n+    tcx: TyCtxt<'tcx>,\n+    execute_query: fn(TyCtxt<'tcx>, Span, Cache::Key, QueryMode) -> Option<Cache::Value>,\n+    query_cache: &Cache,\n+    key: Cache::Key,\n+    check_cache: bool,\n+) where\n+    Cache: QueryCache,\n+{\n+    let key = key.into_query_param();\n+    if try_get_cached(tcx, query_cache, &key).is_none() {\n+        execute_query(tcx, DUMMY_SP, key, QueryMode::Ensure { check_cache });\n     }\n }\n \n@@ -345,35 +441,27 @@ macro_rules! define_callbacks {\n             $($(#[$attr])*\n             #[inline(always)]\n             pub fn $name(self, key: query_helper_param_ty!($($K)*)) {\n-                let key = key.into_query_param();\n-\n-                match try_get_cached(self.tcx, &self.tcx.query_system.caches.$name, &key) {\n-                    Some(_) => return,\n-                    None => self.tcx.queries.$name(\n-                        self.tcx,\n-                        DUMMY_SP,\n-                        key,\n-                        QueryMode::Ensure { check_cache: false },\n-                    ),\n-                };\n+                query_ensure(\n+                    self.tcx,\n+                    self.tcx.query_system.fns.engine.$name,\n+                    &self.tcx.query_system.caches.$name,\n+                    key.into_query_param(),\n+                    false,\n+                );\n             })*\n         }\n \n         impl<'tcx> TyCtxtEnsureWithValue<'tcx> {\n             $($(#[$attr])*\n             #[inline(always)]\n             pub fn $name(self, key: query_helper_param_ty!($($K)*)) {\n-                let key = key.into_query_param();\n-\n-                match try_get_cached(self.tcx, &self.tcx.query_system.caches.$name, &key) {\n-                    Some(_) => return,\n-                    None => self.tcx.queries.$name(\n-                        self.tcx,\n-                        DUMMY_SP,\n-                        key,\n-                        QueryMode::Ensure { check_cache: true },\n-                    ),\n-                };\n+                query_ensure(\n+                    self.tcx,\n+                    self.tcx.query_system.fns.engine.$name,\n+                    &self.tcx.query_system.caches.$name,\n+                    key.into_query_param(),\n+                    true,\n+                );\n             })*\n         }\n \n@@ -392,15 +480,23 @@ macro_rules! define_callbacks {\n             #[inline(always)]\n             pub fn $name(self, key: query_helper_param_ty!($($K)*)) -> $V\n             {\n-                let key = key.into_query_param();\n-\n-                restore::<$V>(match try_get_cached(self.tcx, &self.tcx.query_system.caches.$name, &key) {\n-                    Some(value) => value,\n-                    None => self.tcx.queries.$name(self.tcx, self.span, key, QueryMode::Get).unwrap(),\n-                })\n+                restore::<$V>(query_get_at(\n+                    self.tcx,\n+                    self.tcx.query_system.fns.engine.$name,\n+                    &self.tcx.query_system.caches.$name,\n+                    self.span,\n+                    key.into_query_param(),\n+                ))\n             })*\n         }\n \n+        #[derive(Default)]\n+        pub struct QueryStates<'tcx> {\n+            $(\n+                pub $name: QueryState<$($K)*, DepKind>,\n+            )*\n+        }\n+\n         pub struct Providers {\n             $(pub $name: for<'tcx> fn(\n                 TyCtxt<'tcx>,\n@@ -446,19 +542,13 @@ macro_rules! define_callbacks {\n             fn clone(&self) -> Self { *self }\n         }\n \n-        pub trait QueryEngine<'tcx>: rustc_data_structures::sync::Sync {\n-            fn as_any(&'tcx self) -> &'tcx dyn std::any::Any;\n-\n-            fn try_mark_green(&'tcx self, tcx: TyCtxt<'tcx>, dep_node: &dep_graph::DepNode) -> bool;\n-\n-            $($(#[$attr])*\n-            fn $name(\n-                &'tcx self,\n-                tcx: TyCtxt<'tcx>,\n-                span: Span,\n-                key: query_keys::$name<'tcx>,\n-                mode: QueryMode,\n-            ) -> Option<Erase<$V>>;)*\n+        pub struct QueryEngine {\n+            $(pub $name: for<'tcx> fn(\n+                TyCtxt<'tcx>,\n+                Span,\n+                query_keys::$name<'tcx>,\n+                QueryMode,\n+            ) -> Option<Erase<$V>>,)*\n         }\n     };\n }"}, {"sha": "98d55ea6d40253d0e31d236fa004651cbc96f0db", "filename": "compiler/rustc_middle/src/util/call_kind.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_middle%2Fsrc%2Futil%2Fcall_kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_middle%2Fsrc%2Futil%2Fcall_kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Futil%2Fcall_kind.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -19,6 +19,8 @@ pub enum CallDesugaringKind {\n     QuestionFromResidual,\n     /// try { ..; x } calls type_of(x)::from_output(x)\n     TryBlockFromOutput,\n+    /// `.await` calls `IntoFuture::into_future`\n+    Await,\n }\n \n impl CallDesugaringKind {\n@@ -29,6 +31,7 @@ impl CallDesugaringKind {\n                 tcx.require_lang_item(LangItem::Try, None)\n             }\n             Self::QuestionFromResidual => tcx.get_diagnostic_item(sym::FromResidual).unwrap(),\n+            Self::Await => tcx.get_diagnostic_item(sym::IntoFuture).unwrap(),\n         }\n     }\n }\n@@ -129,6 +132,8 @@ pub fn call_kind<'tcx>(\n             && fn_call_span.desugaring_kind() == Some(DesugaringKind::TryBlock)\n         {\n             Some((CallDesugaringKind::TryBlockFromOutput, method_substs.type_at(0)))\n+        } else if fn_call_span.is_desugaring(DesugaringKind::Await) {\n+            Some((CallDesugaringKind::Await, method_substs.type_at(0)))\n         } else {\n             None\n         };"}, {"sha": "66d29931400f1aec26531290fb2f26f439e10b3d", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -334,9 +334,6 @@ impl<'p, 'tcx> MatchVisitor<'_, 'p, 'tcx> {\n                     let refutable = !is_let_irrefutable(&mut ncx, local_lint_level, tpat);\n                     Some((expr.span, refutable))\n                 }\n-                ExprKind::LogicalOp { op: LogicalOp::And, .. } => {\n-                    bug!()\n-                }\n                 _ => None,\n             }\n         };"}, {"sha": "b9bc89fcf8fa464a4650d33733f71d63876fb0a5", "filename": "compiler/rustc_mir_transform/src/check_packed_ref.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_packed_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_packed_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_packed_ref.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -56,8 +56,11 @@ impl<'tcx> Visitor<'tcx> for PackedRefChecker<'_, 'tcx> {\n                         \"reference to packed field is unaligned\"\n                     )\n                     .note(\n-                        \"fields of packed structs are not properly aligned, and creating \\\n-                        a misaligned reference is undefined behavior (even if that \\\n+                        \"packed structs are only aligned by one byte, and many modern architectures \\\n+                        penalize unaligned field accesses\"\n+                    )\n+                    .note(\n+                        \"creating a misaligned reference is undefined behavior (even if that \\\n                         reference is never dereferenced)\",\n                     ).help(\n                         \"copy the field contents to a local variable, or replace the \\"}, {"sha": "8d9a22ea30ddfdcfe7f72a96f542fc2ad139f27c", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -616,13 +616,10 @@ fn promoted_mir(tcx: TyCtxt<'_>, def: LocalDefId) -> &IndexVec<Promoted, Body<'_\n         return tcx.arena.alloc(IndexVec::new());\n     }\n \n-    let tainted_by_errors = tcx.mir_borrowck(def).tainted_by_errors;\n+    tcx.ensure_with_value().mir_borrowck(def);\n     let mut promoted = tcx.mir_promoted(def).1.steal();\n \n     for body in &mut promoted {\n-        if let Some(error_reported) = tainted_by_errors {\n-            body.tainted_by_errors = Some(error_reported);\n-        }\n         run_analysis_to_runtime_passes(tcx, body);\n     }\n "}, {"sha": "69ba4840146ea795e56b53c2a38f09b5f15e52c3", "filename": "compiler/rustc_mir_transform/src/lower_intrinsics.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_mir_transform%2Fsrc%2Flower_intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_mir_transform%2Fsrc%2Flower_intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flower_intrinsics.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -179,6 +179,29 @@ impl<'tcx> MirPass<'tcx> for LowerIntrinsics {\n                             }\n                         }\n                     }\n+                    sym::write_via_move => {\n+                        let target = target.unwrap();\n+                        let Ok([ptr, val]) = <[_; 2]>::try_from(std::mem::take(args)) else {\n+                            span_bug!(\n+                                terminator.source_info.span,\n+                                \"Wrong number of arguments for write_via_move intrinsic\",\n+                            );\n+                        };\n+                        let derefed_place =\n+                            if let Some(place) = ptr.place() && let Some(local) = place.as_local() {\n+                                tcx.mk_place_deref(local.into())\n+                            } else {\n+                                span_bug!(terminator.source_info.span, \"Only passing a local is supported\");\n+                            };\n+                        block.statements.push(Statement {\n+                            source_info: terminator.source_info,\n+                            kind: StatementKind::Assign(Box::new((\n+                                derefed_place,\n+                                Rvalue::Use(val),\n+                            ))),\n+                        });\n+                        terminator.kind = TerminatorKind::Goto { target };\n+                    }\n                     sym::discriminant_value => {\n                         if let (Some(target), Some(arg)) = (*target, args[0].place()) {\n                             let arg = tcx.mk_place_deref(arg);"}, {"sha": "0e041df898cac3550b94125dcd8c98e0a8afdb5d", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -1646,7 +1646,7 @@ impl<'a> Parser<'a> {\n             // Avoid knock-down errors as we don't know whether to interpret this as `foo().await?`\n             // or `foo()?.await` (the very reason we went with postfix syntax \ud83d\ude05).\n             ExprKind::Try(_) => ExprKind::Err,\n-            _ => ExprKind::Await(expr),\n+            _ => ExprKind::Await(expr, await_sp),\n         };\n         let expr = self.mk_expr(lo.to(sp), kind);\n         self.maybe_recover_from_bad_qpath(expr)"}, {"sha": "bff9de5c652f95e827a5073d398189e614f59f3d", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -859,7 +859,7 @@ impl<'a> Parser<'a> {\n                     ExprKind::Field(_, _) => \"a field access\",\n                     ExprKind::MethodCall(_) => \"a method call\",\n                     ExprKind::Call(_, _) => \"a function call\",\n-                    ExprKind::Await(_) => \"`.await`\",\n+                    ExprKind::Await(_, _) => \"`.await`\",\n                     ExprKind::Err => return Ok(with_postfix),\n                     _ => unreachable!(\"parse_dot_or_call_expr_with_ shouldn't produce this\"),\n                 }\n@@ -3252,7 +3252,7 @@ impl<'a> Parser<'a> {\n \n     fn mk_await_expr(&mut self, self_arg: P<Expr>, lo: Span) -> P<Expr> {\n         let span = lo.to(self.prev_token.span);\n-        let await_expr = self.mk_expr(span, ExprKind::Await(self_arg));\n+        let await_expr = self.mk_expr(span, ExprKind::Await(self_arg, self.prev_token.span));\n         self.recover_from_await_method_call();\n         await_expr\n     }"}, {"sha": "82b335f4b4b5714d28c1f02c31add888bb525fee", "filename": "compiler/rustc_query_impl/src/lib.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -11,36 +11,29 @@\n #![deny(rustc::untranslatable_diagnostic)]\n #![deny(rustc::diagnostic_outside_of_impl)]\n \n-#[macro_use]\n-extern crate rustc_macros;\n #[macro_use]\n extern crate rustc_middle;\n \n-use rustc_data_structures::sync::AtomicU64;\n+use crate::plumbing::{encode_all_query_results, try_mark_green};\n use rustc_middle::arena::Arena;\n use rustc_middle::dep_graph::{self, DepKind, DepKindStruct};\n use rustc_middle::query::erase::{erase, restore, Erase};\n use rustc_middle::query::AsLocalKey;\n use rustc_middle::ty::query::{\n     query_keys, query_provided, query_provided_to_value, query_storage, query_values,\n };\n-use rustc_middle::ty::query::{ExternProviders, Providers, QueryEngine};\n+use rustc_middle::ty::query::{ExternProviders, Providers, QueryEngine, QuerySystemFns};\n use rustc_middle::ty::TyCtxt;\n use rustc_query_system::dep_graph::SerializedDepNodeIndex;\n use rustc_query_system::Value;\n use rustc_span::Span;\n \n #[macro_use]\n mod plumbing;\n-pub use plumbing::QueryCtxt;\n-use rustc_query_system::query::*;\n-#[cfg(parallel_compiler)]\n-pub use rustc_query_system::query::{deadlock, QueryContext};\n+pub use crate::plumbing::QueryCtxt;\n \n pub use rustc_query_system::query::QueryConfig;\n-\n-mod on_disk_cache;\n-pub use on_disk_cache::OnDiskCache;\n+use rustc_query_system::query::*;\n \n mod profiling_support;\n pub use self::profiling_support::alloc_self_profile_query_strings;\n@@ -54,9 +47,16 @@ trait QueryConfigRestored<'tcx>: QueryConfig<QueryCtxt<'tcx>> + Default {\n \n rustc_query_append! { define_queries! }\n \n-impl<'tcx> Queries<'tcx> {\n-    // Force codegen in the dyn-trait transformation in this crate.\n-    pub fn as_dyn(&'tcx self) -> &'tcx dyn QueryEngine<'tcx> {\n-        self\n+pub fn query_system_fns<'tcx>(\n+    local_providers: Providers,\n+    extern_providers: ExternProviders,\n+) -> QuerySystemFns<'tcx> {\n+    QuerySystemFns {\n+        engine: engine(),\n+        local_providers,\n+        extern_providers,\n+        query_structs: make_dep_kind_array!(query_structs).to_vec(),\n+        encode_query_results: encode_all_query_results,\n+        try_mark_green: try_mark_green,\n     }\n }"}, {"sha": "9f8ac7ccd0b8e9032d3d464c32727047766e4787", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 127, "deletions": 176, "changes": 303, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -2,35 +2,44 @@\n //! generate the actual methods on tcx which find and execute the provider,\n //! manage the caches, and so forth.\n \n-use crate::on_disk_cache::{CacheDecoder, CacheEncoder, EncodedDepNodeIndex};\n-use crate::profiling_support::QueryKeyStringCache;\n-use crate::{on_disk_cache, Queries};\n+use crate::rustc_middle::dep_graph::DepContext;\n+use crate::rustc_middle::ty::TyEncoder;\n use rustc_data_structures::stable_hasher::{Hash64, HashStable, StableHasher};\n-use rustc_data_structures::sync::{AtomicU64, Lock};\n-use rustc_errors::{Diagnostic, Handler};\n+use rustc_data_structures::sync::Lock;\n+use rustc_errors::Diagnostic;\n+use rustc_index::Idx;\n use rustc_middle::dep_graph::{\n     self, DepKind, DepKindStruct, DepNode, DepNodeIndex, SerializedDepNodeIndex,\n };\n+use rustc_middle::query::on_disk_cache::AbsoluteBytePos;\n+use rustc_middle::query::on_disk_cache::{CacheDecoder, CacheEncoder, EncodedDepNodeIndex};\n use rustc_middle::query::Key;\n use rustc_middle::ty::tls::{self, ImplicitCtxt};\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_query_system::dep_graph::{DepNodeParams, HasDepContext};\n use rustc_query_system::ich::StableHashingContext;\n use rustc_query_system::query::{\n-    force_query, QueryConfig, QueryContext, QueryJobId, QueryMap, QuerySideEffects, QueryStackFrame,\n+    force_query, QueryCache, QueryConfig, QueryContext, QueryJobId, QueryMap, QuerySideEffects,\n+    QueryStackFrame,\n };\n use rustc_query_system::{LayoutOfDepth, QueryOverflow};\n use rustc_serialize::Decodable;\n+use rustc_serialize::Encodable;\n use rustc_session::Limit;\n use rustc_span::def_id::LOCAL_CRATE;\n-use std::any::Any;\n use std::num::NonZeroU64;\n use thin_vec::ThinVec;\n \n #[derive(Copy, Clone)]\n pub struct QueryCtxt<'tcx> {\n     pub tcx: TyCtxt<'tcx>,\n-    pub queries: &'tcx Queries<'tcx>,\n+}\n+\n+impl<'tcx> QueryCtxt<'tcx> {\n+    #[inline]\n+    pub fn new(tcx: TyCtxt<'tcx>) -> Self {\n+        QueryCtxt { tcx }\n+    }\n }\n \n impl<'tcx> std::ops::Deref for QueryCtxt<'tcx> {\n@@ -53,44 +62,56 @@ impl<'tcx> HasDepContext for QueryCtxt<'tcx> {\n }\n \n impl QueryContext for QueryCtxt<'_> {\n+    #[inline]\n     fn next_job_id(self) -> QueryJobId {\n         QueryJobId(\n             NonZeroU64::new(\n-                self.queries.jobs.fetch_add(1, rustc_data_structures::sync::Ordering::Relaxed),\n+                self.query_system.jobs.fetch_add(1, rustc_data_structures::sync::Ordering::Relaxed),\n             )\n             .unwrap(),\n         )\n     }\n \n+    #[inline]\n     fn current_query_job(self) -> Option<QueryJobId> {\n-        tls::with_related_context(*self, |icx| icx.query)\n+        tls::with_related_context(self.tcx, |icx| icx.query)\n     }\n \n     fn try_collect_active_jobs(self) -> Option<QueryMap<DepKind>> {\n-        self.queries.try_collect_active_jobs(*self)\n+        let mut jobs = QueryMap::default();\n+\n+        for query in &self.query_system.fns.query_structs {\n+            (query.try_collect_active_jobs)(self.tcx, &mut jobs);\n+        }\n+\n+        Some(jobs)\n     }\n \n     // Interactions with on_disk_cache\n     fn load_side_effects(self, prev_dep_node_index: SerializedDepNodeIndex) -> QuerySideEffects {\n-        self.queries\n+        self.query_system\n             .on_disk_cache\n             .as_ref()\n-            .map(|c| c.load_side_effects(*self, prev_dep_node_index))\n+            .map(|c| c.load_side_effects(self.tcx, prev_dep_node_index))\n             .unwrap_or_default()\n     }\n \n+    #[inline(never)]\n+    #[cold]\n     fn store_side_effects(self, dep_node_index: DepNodeIndex, side_effects: QuerySideEffects) {\n-        if let Some(c) = self.queries.on_disk_cache.as_ref() {\n+        if let Some(c) = self.query_system.on_disk_cache.as_ref() {\n             c.store_side_effects(dep_node_index, side_effects)\n         }\n     }\n \n+    #[inline(never)]\n+    #[cold]\n     fn store_side_effects_for_anon_node(\n         self,\n         dep_node_index: DepNodeIndex,\n         side_effects: QuerySideEffects,\n     ) {\n-        if let Some(c) = self.queries.on_disk_cache.as_ref() {\n+        if let Some(c) = self.query_system.on_disk_cache.as_ref() {\n             c.store_side_effects_for_anon_node(dep_node_index, side_effects)\n         }\n     }\n@@ -109,14 +130,14 @@ impl QueryContext for QueryCtxt<'_> {\n         // The `TyCtxt` stored in TLS has the same global interner lifetime\n         // as `self`, so we use `with_related_context` to relate the 'tcx lifetimes\n         // when accessing the `ImplicitCtxt`.\n-        tls::with_related_context(*self, move |current_icx| {\n+        tls::with_related_context(self.tcx, move |current_icx| {\n             if depth_limit && !self.recursion_limit().value_within_limit(current_icx.query_depth) {\n                 self.depth_limit_error(token);\n             }\n \n             // Update the `ImplicitCtxt` to point to our new query job.\n             let new_icx = ImplicitCtxt {\n-                tcx: *self,\n+                tcx: self.tcx,\n                 query: Some(token),\n                 diagnostics,\n                 query_depth: current_icx.query_depth + depth_limit as usize,\n@@ -152,51 +173,20 @@ impl QueryContext for QueryCtxt<'_> {\n     }\n }\n \n-impl<'tcx> QueryCtxt<'tcx> {\n-    #[inline]\n-    pub fn from_tcx(tcx: TyCtxt<'tcx>) -> Self {\n-        let queries = tcx.queries.as_any();\n-        let queries = unsafe {\n-            let queries = std::mem::transmute::<&dyn Any, &dyn Any>(queries);\n-            let queries = queries.downcast_ref().unwrap();\n-            let queries = std::mem::transmute::<&Queries<'_>, &Queries<'_>>(queries);\n-            queries\n-        };\n-        QueryCtxt { tcx, queries }\n-    }\n-\n-    pub(crate) fn on_disk_cache(self) -> Option<&'tcx on_disk_cache::OnDiskCache<'tcx>> {\n-        self.queries.on_disk_cache.as_ref()\n-    }\n+pub(super) fn try_mark_green<'tcx>(tcx: TyCtxt<'tcx>, dep_node: &dep_graph::DepNode) -> bool {\n+    tcx.dep_graph.try_mark_green(QueryCtxt::new(tcx), dep_node).is_some()\n+}\n \n-    pub(super) fn encode_query_results(\n-        self,\n-        encoder: &mut CacheEncoder<'_, 'tcx>,\n-        query_result_index: &mut EncodedDepNodeIndex,\n-    ) {\n-        for query in &self.queries.query_structs {\n-            if let Some(encode) = query.encode_query_results {\n-                encode(self, encoder, query_result_index);\n-            }\n+pub(super) fn encode_all_query_results<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    encoder: &mut CacheEncoder<'_, 'tcx>,\n+    query_result_index: &mut EncodedDepNodeIndex,\n+) {\n+    for query in &tcx.query_system.fns.query_structs {\n+        if let Some(encode) = query.encode_query_results {\n+            encode(tcx, encoder, query_result_index);\n         }\n     }\n-\n-    pub fn try_print_query_stack(\n-        self,\n-        query: Option<QueryJobId>,\n-        handler: &Handler,\n-        num_frames: Option<usize>,\n-    ) -> usize {\n-        rustc_query_system::query::print_query_stack(self, query, handler, num_frames)\n-    }\n-}\n-\n-#[derive(Clone, Copy)]\n-pub(crate) struct QueryStruct<'tcx> {\n-    pub try_collect_active_jobs: fn(QueryCtxt<'tcx>, &mut QueryMap<DepKind>) -> Option<()>,\n-    pub alloc_self_profile_query_strings: fn(TyCtxt<'tcx>, &mut QueryKeyStringCache),\n-    pub encode_query_results:\n-        Option<fn(QueryCtxt<'tcx>, &mut CacheEncoder<'_, 'tcx>, &mut EncodedDepNodeIndex)>,\n }\n \n macro_rules! handle_cycle_error {\n@@ -276,13 +266,13 @@ macro_rules! hash_result {\n \n macro_rules! call_provider {\n     ([][$qcx:expr, $name:ident, $key:expr]) => {{\n-        ($qcx.queries.local_providers.$name)($qcx.tcx, $key)\n+        ($qcx.query_system.fns.local_providers.$name)($qcx, $key)\n     }};\n     ([(separate_provide_extern) $($rest:tt)*][$qcx:expr, $name:ident, $key:expr]) => {{\n         if let Some(key) = $key.as_local_key() {\n-            ($qcx.queries.local_providers.$name)($qcx.tcx, key)\n+            ($qcx.query_system.fns.local_providers.$name)($qcx, key)\n         } else {\n-            ($qcx.queries.extern_providers.$name)($qcx.tcx, $key)\n+            ($qcx.query_system.fns.extern_providers.$name)($qcx, $key)\n         }\n     }};\n     ([$other:tt $($modifiers:tt)*][$($args:tt)*]) => {\n@@ -306,7 +296,7 @@ pub(crate) fn create_query_frame<\n     'tcx,\n     K: Copy + Key + for<'a> HashStable<StableHashingContext<'a>>,\n >(\n-    tcx: QueryCtxt<'tcx>,\n+    tcx: TyCtxt<'tcx>,\n     do_describe: fn(TyCtxt<'tcx>, K) -> String,\n     key: K,\n     kind: DepKind,\n@@ -318,7 +308,7 @@ pub(crate) fn create_query_frame<\n         // Showing visible path instead of any path is not that important in production.\n         ty::print::with_no_visible_paths!(\n             // Force filename-line mode to avoid invoking `type_of` query.\n-            ty::print::with_forced_impl_filename_line!(do_describe(tcx.tcx, key))\n+            ty::print::with_forced_impl_filename_line!(do_describe(tcx, key))\n         )\n     );\n     let description =\n@@ -328,7 +318,7 @@ pub(crate) fn create_query_frame<\n         // so exit to avoid infinite recursion.\n         None\n     } else {\n-        Some(key.default_span(*tcx))\n+        Some(key.default_span(tcx))\n     };\n     let def_id = key.key_as_def_id();\n     let def_kind = if kind == dep_graph::DepKind::opt_def_kind {\n@@ -350,6 +340,34 @@ pub(crate) fn create_query_frame<\n     QueryStackFrame::new(description, span, def_id, def_kind, kind, ty_adt_id, hash)\n }\n \n+pub(crate) fn encode_query_results<'a, 'tcx, Q>(\n+    query: Q,\n+    qcx: QueryCtxt<'tcx>,\n+    encoder: &mut CacheEncoder<'a, 'tcx>,\n+    query_result_index: &mut EncodedDepNodeIndex,\n+) where\n+    Q: super::QueryConfigRestored<'tcx>,\n+    Q::RestoredValue: Encodable<CacheEncoder<'a, 'tcx>>,\n+{\n+    let _timer =\n+        qcx.profiler().verbose_generic_activity_with_arg(\"encode_query_results_for\", query.name());\n+\n+    assert!(query.query_state(qcx).all_inactive());\n+    let cache = query.query_cache(qcx);\n+    cache.iter(&mut |key, value, dep_node| {\n+        if query.cache_on_disk(qcx.tcx, &key) {\n+            let dep_node = SerializedDepNodeIndex::new(dep_node.index());\n+\n+            // Record position of the cache entry.\n+            query_result_index.push((dep_node, AbsoluteBytePos::new(encoder.position())));\n+\n+            // Encode the type check tables with the `SerializedDepNodeIndex`\n+            // as tag.\n+            encoder.encode_tagged(dep_node, &Q::restore(*value));\n+        }\n+    });\n+}\n+\n fn try_load_from_on_disk_cache<'tcx, Q>(query: Q, tcx: TyCtxt<'tcx>, dep_node: DepNode)\n where\n     Q: QueryConfig<QueryCtxt<'tcx>>,\n@@ -364,22 +382,22 @@ where\n     }\n }\n \n-pub(crate) fn loadable_from_disk<'tcx>(tcx: QueryCtxt<'tcx>, id: SerializedDepNodeIndex) -> bool {\n-    if let Some(cache) = tcx.on_disk_cache().as_ref() {\n+pub(crate) fn loadable_from_disk<'tcx>(tcx: TyCtxt<'tcx>, id: SerializedDepNodeIndex) -> bool {\n+    if let Some(cache) = tcx.query_system.on_disk_cache.as_ref() {\n         cache.loadable_from_disk(id)\n     } else {\n         false\n     }\n }\n \n pub(crate) fn try_load_from_disk<'tcx, V>(\n-    tcx: QueryCtxt<'tcx>,\n+    tcx: TyCtxt<'tcx>,\n     id: SerializedDepNodeIndex,\n ) -> Option<V>\n where\n     V: for<'a> Decodable<CacheDecoder<'a, 'tcx>>,\n {\n-    tcx.on_disk_cache().as_ref()?.try_load_query_result(*tcx, id)\n+    tcx.query_system.on_disk_cache.as_ref()?.try_load_query_result(tcx, id)\n }\n \n fn force_from_dep_node<'tcx, Q>(query: Q, tcx: TyCtxt<'tcx>, dep_node: DepNode) -> bool\n@@ -407,8 +425,7 @@ where\n     if let Some(key) = Q::Key::recover(tcx, &dep_node) {\n         #[cfg(debug_assertions)]\n         let _guard = tracing::span!(tracing::Level::TRACE, stringify!($name), ?key).entered();\n-        let tcx = QueryCtxt::from_tcx(tcx);\n-        force_query(query, tcx, key, dep_node);\n+        force_query(query, QueryCtxt::new(tcx), key, dep_node);\n         true\n     } else {\n         false\n@@ -461,8 +478,33 @@ macro_rules! define_queries {\n     (\n      $($(#[$attr:meta])*\n         [$($modifiers:tt)*] fn $name:ident($($K:tt)*) -> $V:ty,)*) => {\n-        define_queries_struct! {\n-            input: ($(([$($modifiers)*] [$($attr)*] [$name]))*)\n+        mod get_query {\n+            use super::*;\n+\n+            $(\n+                #[inline(always)]\n+                #[tracing::instrument(level = \"trace\", skip(tcx))]\n+                pub(super) fn $name<'tcx>(\n+                    tcx: TyCtxt<'tcx>,\n+                    span: Span,\n+                    key: query_keys::$name<'tcx>,\n+                    mode: QueryMode,\n+                ) -> Option<Erase<query_values::$name<'tcx>>> {\n+                    get_query(\n+                        queries::$name::default(),\n+                        QueryCtxt::new(tcx),\n+                        span,\n+                        key,\n+                        mode\n+                    )\n+                }\n+            )*\n+        }\n+\n+        pub(crate) fn engine() -> QueryEngine {\n+            QueryEngine {\n+                $($name: get_query::$name,)*\n+            }\n         }\n \n         #[allow(nonstandard_style)]\n@@ -502,7 +544,7 @@ macro_rules! define_queries {\n             fn query_state<'a>(self, tcx: QueryCtxt<'tcx>) -> &'a QueryState<Self::Key, crate::dep_graph::DepKind>\n                 where QueryCtxt<'tcx>: 'a\n             {\n-                &tcx.queries.$name\n+                &tcx.query_system.states.$name\n             }\n \n             #[inline(always)]\n@@ -521,7 +563,7 @@ macro_rules! define_queries {\n             fn compute(self, qcx: QueryCtxt<'tcx>, key: Self::Key) -> Self::Value {\n                 query_provided_to_value::$name(\n                     qcx.tcx,\n-                    call_provider!([$($modifiers)*][qcx, $name, key])\n+                    call_provider!([$($modifiers)*][qcx.tcx, $name, key])\n                 )\n             }\n \n@@ -535,7 +577,7 @@ macro_rules! define_queries {\n                     if ::rustc_middle::query::cached::$name(_qcx.tcx, _key) {\n                         Some(|qcx: QueryCtxt<'tcx>, dep_node| {\n                             let value = $crate::plumbing::try_load_from_disk::<query_provided::$name<'tcx>>(\n-                                qcx,\n+                                qcx.tcx,\n                                 dep_node\n                             );\n                             value.map(|value| query_provided_to_value::$name(qcx.tcx, value))\n@@ -557,7 +599,7 @@ macro_rules! define_queries {\n             ) -> bool {\n                 should_ever_cache_on_disk!([$($modifiers)*] {\n                     self.cache_on_disk(_qcx.tcx, _key) &&\n-                        $crate::plumbing::loadable_from_disk(_qcx, _index)\n+                        $crate::plumbing::loadable_from_disk(_qcx.tcx, _index)\n                 } {\n                     false\n                 })\n@@ -684,14 +726,13 @@ macro_rules! define_queries {\n         }\n \n         mod query_structs {\n-            use rustc_middle::ty::TyCtxt;\n-            use $crate::plumbing::{QueryStruct, QueryCtxt};\n-            use $crate::profiling_support::QueryKeyStringCache;\n-            use rustc_query_system::query::QueryMap;\n+            use super::*;\n+            use rustc_middle::ty::query::QueryStruct;\n+            use rustc_middle::ty::query::QueryKeyStringCache;\n             use rustc_middle::dep_graph::DepKind;\n \n             pub(super) const fn dummy_query_struct<'tcx>() -> QueryStruct<'tcx> {\n-                fn noop_try_collect_active_jobs(_: QueryCtxt<'_>, _: &mut QueryMap<DepKind>) -> Option<()> {\n+                fn noop_try_collect_active_jobs(_: TyCtxt<'_>, _: &mut QueryMap<DepKind>) -> Option<()> {\n                     None\n                 }\n                 fn noop_alloc_self_profile_query_strings(_: TyCtxt<'_>, _: &mut QueryKeyStringCache) {}\n@@ -717,7 +758,7 @@ macro_rules! define_queries {\n                         let name = stringify!($name);\n                         $crate::plumbing::create_query_frame(tcx, rustc_middle::query::descs::$name, key, kind, name)\n                     };\n-                    tcx.queries.$name.try_collect_active_jobs(\n+                    tcx.query_system.states.$name.try_collect_active_jobs(\n                         tcx,\n                         make_query,\n                         qmap,\n@@ -731,10 +772,10 @@ macro_rules! define_queries {\n                         string_cache,\n                     )\n                 },\n-                encode_query_results: expand_if_cached!([$($modifiers)*], |qcx, encoder, query_result_index|\n-                    $crate::on_disk_cache::encode_query_results::<super::queries::$name<'tcx>>(\n+                encode_query_results: expand_if_cached!([$($modifiers)*], |tcx, encoder, query_result_index|\n+                    $crate::plumbing::encode_query_results::<super::queries::$name<'tcx>>(\n                         super::queries::$name::default(),\n-                        qcx,\n+                        QueryCtxt::new(tcx),\n                         encoder,\n                         query_result_index,\n                     )\n@@ -747,93 +788,3 @@ macro_rules! define_queries {\n         }\n     }\n }\n-\n-use crate::{ExternProviders, OnDiskCache, Providers};\n-\n-impl<'tcx> Queries<'tcx> {\n-    pub fn new(\n-        local_providers: Providers,\n-        extern_providers: ExternProviders,\n-        on_disk_cache: Option<OnDiskCache<'tcx>>,\n-    ) -> Self {\n-        use crate::query_structs;\n-        Queries {\n-            local_providers: Box::new(local_providers),\n-            extern_providers: Box::new(extern_providers),\n-            query_structs: make_dep_kind_array!(query_structs).to_vec(),\n-            on_disk_cache,\n-            jobs: AtomicU64::new(1),\n-            ..Queries::default()\n-        }\n-    }\n-}\n-\n-macro_rules! define_queries_struct {\n-    (\n-     input: ($(([$($modifiers:tt)*] [$($attr:tt)*] [$name:ident]))*)) => {\n-        #[derive(Default)]\n-        pub struct Queries<'tcx> {\n-            local_providers: Box<Providers>,\n-            extern_providers: Box<ExternProviders>,\n-            query_structs: Vec<$crate::plumbing::QueryStruct<'tcx>>,\n-            pub on_disk_cache: Option<OnDiskCache<'tcx>>,\n-            jobs: AtomicU64,\n-\n-            $(\n-                $(#[$attr])*\n-                $name: QueryState<\n-                    <queries::$name<'tcx> as QueryConfig<QueryCtxt<'tcx>>>::Key,\n-                    rustc_middle::dep_graph::DepKind,\n-                >,\n-            )*\n-        }\n-\n-        impl<'tcx> Queries<'tcx> {\n-            pub(crate) fn try_collect_active_jobs(\n-                &'tcx self,\n-                tcx: TyCtxt<'tcx>,\n-            ) -> Option<QueryMap<rustc_middle::dep_graph::DepKind>> {\n-                let tcx = QueryCtxt { tcx, queries: self };\n-                let mut jobs = QueryMap::default();\n-\n-                for query in &self.query_structs {\n-                    (query.try_collect_active_jobs)(tcx, &mut jobs);\n-                }\n-\n-                Some(jobs)\n-            }\n-        }\n-\n-        impl<'tcx> QueryEngine<'tcx> for Queries<'tcx> {\n-            fn as_any(&'tcx self) -> &'tcx dyn std::any::Any {\n-                let this = unsafe { std::mem::transmute::<&Queries<'_>, &Queries<'_>>(self) };\n-                this as _\n-            }\n-\n-            fn try_mark_green(&'tcx self, tcx: TyCtxt<'tcx>, dep_node: &dep_graph::DepNode) -> bool {\n-                let qcx = QueryCtxt { tcx, queries: self };\n-                tcx.dep_graph.try_mark_green(qcx, dep_node).is_some()\n-            }\n-\n-            $($(#[$attr])*\n-            #[inline(always)]\n-            #[tracing::instrument(level = \"trace\", skip(self, tcx))]\n-            fn $name(\n-                &'tcx self,\n-                tcx: TyCtxt<'tcx>,\n-                span: Span,\n-                key: query_keys::$name<'tcx>,\n-                mode: QueryMode,\n-            ) -> Option<Erase<query_values::$name<'tcx>>> {\n-                let qcx = QueryCtxt { tcx, queries: self };\n-                get_query(\n-                    queries::$name::default(),\n-                    qcx,\n-                    span,\n-                    key,\n-                    mode\n-                )\n-            })*\n-        }\n-    };\n-}"}, {"sha": "7d9306f8087eddc62f553c69d65d4a341ae2b5d5", "filename": "compiler/rustc_query_impl/src/profiling_support.rs", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_query_impl%2Fsrc%2Fprofiling_support.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_query_impl%2Fsrc%2Fprofiling_support.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fprofiling_support.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -1,24 +1,13 @@\n-use crate::QueryCtxt;\n use measureme::{StringComponent, StringId};\n-use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::profiling::SelfProfiler;\n use rustc_hir::def_id::{CrateNum, DefId, DefIndex, LocalDefId, LOCAL_CRATE};\n use rustc_hir::definitions::DefPathData;\n+use rustc_middle::ty::query::QueryKeyStringCache;\n use rustc_middle::ty::TyCtxt;\n use rustc_query_system::query::QueryCache;\n use std::fmt::Debug;\n use std::io::Write;\n \n-pub(crate) struct QueryKeyStringCache {\n-    def_id_cache: FxHashMap<DefId, StringId>,\n-}\n-\n-impl QueryKeyStringCache {\n-    fn new() -> QueryKeyStringCache {\n-        QueryKeyStringCache { def_id_cache: Default::default() }\n-    }\n-}\n-\n struct QueryKeyStringBuilder<'p, 'tcx> {\n     profiler: &'p SelfProfiler,\n     tcx: TyCtxt<'tcx>,\n@@ -253,9 +242,8 @@ pub fn alloc_self_profile_query_strings(tcx: TyCtxt<'_>) {\n     }\n \n     let mut string_cache = QueryKeyStringCache::new();\n-    let queries = QueryCtxt::from_tcx(tcx);\n \n-    for query in &queries.queries.query_structs {\n+    for query in &tcx.query_system.fns.query_structs {\n         (query.alloc_self_profile_query_strings)(tcx, &mut string_cache);\n     }\n }"}, {"sha": "3b17c665fb7e954259018801379c22948c9f2e7d", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -236,7 +236,7 @@ pub(crate) struct CycleError<D: DepKind> {\n /// It returns the shard index and a lock guard to the shard,\n /// which will be used if the query is not in the cache and we need\n /// to compute it.\n-#[inline]\n+#[inline(always)]\n pub fn try_get_cached<Tcx, C>(tcx: Tcx, cache: &C, key: &C::Key) -> Option<C::Value>\n where\n     C: QueryCache,"}, {"sha": "511ae8516a866dbc33d5fa06d7204be47f55e7e6", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -656,7 +656,7 @@ impl<'a: 'ast, 'ast, 'tcx> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast,\n     fn visit_anon_const(&mut self, constant: &'ast AnonConst) {\n         // We deal with repeat expressions explicitly in `resolve_expr`.\n         self.with_lifetime_rib(LifetimeRibKind::AnonConst, |this| {\n-            this.with_lifetime_rib(LifetimeRibKind::Elided(LifetimeRes::Static), |this| {\n+            this.with_lifetime_rib(LifetimeRibKind::Elided(LifetimeRes::Infer), |this| {\n                 this.resolve_anon_const(constant, IsRepeatExpr::No);\n             })\n         })\n@@ -4126,7 +4126,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n             ExprKind::Repeat(ref elem, ref ct) => {\n                 self.visit_expr(elem);\n                 self.with_lifetime_rib(LifetimeRibKind::AnonConst, |this| {\n-                    this.with_lifetime_rib(LifetimeRibKind::Elided(LifetimeRes::Static), |this| {\n+                    this.with_lifetime_rib(LifetimeRibKind::Elided(LifetimeRes::Infer), |this| {\n                         this.resolve_anon_const(ct, IsRepeatExpr::Yes)\n                     })\n                 });"}, {"sha": "aa22140c99d525a3196e3bbe34b8924e9b26e575", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -1190,6 +1190,7 @@ impl Session {\n \n     /// Returns the number of query threads that should be used for this\n     /// compilation\n+    #[inline]\n     pub fn threads(&self) -> usize {\n         self.opts.unstable_opts.threads\n     }"}, {"sha": "31bbdb2a3bc657e85bfe0425612a4acb07f67765", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -207,6 +207,7 @@ symbols! {\n         Input,\n         Into,\n         IntoDiagnostic,\n+        IntoFuture,\n         IntoIterator,\n         IoRead,\n         IoWrite,\n@@ -1635,6 +1636,7 @@ symbols! {\n         write_bytes,\n         write_macro,\n         write_str,\n+        write_via_move,\n         writeln_macro,\n         x87_reg,\n         xer,"}, {"sha": "eb3f66ac308dd0080a00a980634059cff7207c47", "filename": "compiler/rustc_target/src/spec/abi.rs", "status": "modified", "additions": 11, "deletions": 42, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_target%2Fsrc%2Fspec%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_target%2Fsrc%2Fspec%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fabi.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -148,8 +148,9 @@ pub fn is_enabled(\n pub fn is_stable(name: &str) -> Result<(), AbiDisabled> {\n     match name {\n         // Stable\n-        \"Rust\" | \"C\" | \"cdecl\" | \"stdcall\" | \"fastcall\" | \"aapcs\" | \"win64\" | \"sysv64\"\n-        | \"system\" | \"efiapi\" => Ok(()),\n+        \"Rust\" | \"C\" | \"C-unwind\" | \"cdecl\" | \"cdecl-unwind\" | \"stdcall\" | \"stdcall-unwind\"\n+        | \"fastcall\" | \"fastcall-unwind\" | \"aapcs\" | \"aapcs-unwind\" | \"win64\" | \"win64-unwind\"\n+        | \"sysv64\" | \"sysv64-unwind\" | \"system\" | \"system-unwind\" | \"efiapi\" => Ok(()),\n         \"rust-intrinsic\" => Err(AbiDisabled::Unstable {\n             feature: sym::intrinsics,\n             explain: \"intrinsics are subject to change\",\n@@ -162,10 +163,18 @@ pub fn is_stable(name: &str) -> Result<(), AbiDisabled> {\n             feature: sym::abi_vectorcall,\n             explain: \"vectorcall is experimental and subject to change\",\n         }),\n+        \"vectorcall-unwind\" => Err(AbiDisabled::Unstable {\n+            feature: sym::abi_vectorcall,\n+            explain: \"vectorcall-unwind ABI is experimental and subject to change\",\n+        }),\n         \"thiscall\" => Err(AbiDisabled::Unstable {\n             feature: sym::abi_thiscall,\n             explain: \"thiscall is experimental and subject to change\",\n         }),\n+        \"thiscall-unwind\" => Err(AbiDisabled::Unstable {\n+            feature: sym::abi_thiscall,\n+            explain: \"thiscall-unwind ABI is experimental and subject to change\",\n+        }),\n         \"rust-call\" => Err(AbiDisabled::Unstable {\n             feature: sym::unboxed_closures,\n             explain: \"rust-call ABI is subject to change\",\n@@ -202,46 +211,6 @@ pub fn is_stable(name: &str) -> Result<(), AbiDisabled> {\n             feature: sym::abi_c_cmse_nonsecure_call,\n             explain: \"C-cmse-nonsecure-call ABI is experimental and subject to change\",\n         }),\n-        \"C-unwind\" => Err(AbiDisabled::Unstable {\n-            feature: sym::c_unwind,\n-            explain: \"C-unwind ABI is experimental and subject to change\",\n-        }),\n-        \"stdcall-unwind\" => Err(AbiDisabled::Unstable {\n-            feature: sym::c_unwind,\n-            explain: \"stdcall-unwind ABI is experimental and subject to change\",\n-        }),\n-        \"system-unwind\" => Err(AbiDisabled::Unstable {\n-            feature: sym::c_unwind,\n-            explain: \"system-unwind ABI is experimental and subject to change\",\n-        }),\n-        \"thiscall-unwind\" => Err(AbiDisabled::Unstable {\n-            feature: sym::c_unwind,\n-            explain: \"thiscall-unwind ABI is experimental and subject to change\",\n-        }),\n-        \"cdecl-unwind\" => Err(AbiDisabled::Unstable {\n-            feature: sym::c_unwind,\n-            explain: \"cdecl-unwind ABI is experimental and subject to change\",\n-        }),\n-        \"fastcall-unwind\" => Err(AbiDisabled::Unstable {\n-            feature: sym::c_unwind,\n-            explain: \"fastcall-unwind ABI is experimental and subject to change\",\n-        }),\n-        \"vectorcall-unwind\" => Err(AbiDisabled::Unstable {\n-            feature: sym::c_unwind,\n-            explain: \"vectorcall-unwind ABI is experimental and subject to change\",\n-        }),\n-        \"aapcs-unwind\" => Err(AbiDisabled::Unstable {\n-            feature: sym::c_unwind,\n-            explain: \"aapcs-unwind ABI is experimental and subject to change\",\n-        }),\n-        \"win64-unwind\" => Err(AbiDisabled::Unstable {\n-            feature: sym::c_unwind,\n-            explain: \"win64-unwind ABI is experimental and subject to change\",\n-        }),\n-        \"sysv64-unwind\" => Err(AbiDisabled::Unstable {\n-            feature: sym::c_unwind,\n-            explain: \"sysv64-unwind ABI is experimental and subject to change\",\n-        }),\n         \"wasm\" => Err(AbiDisabled::Unstable {\n             feature: sym::wasm_abi,\n             explain: \"wasm ABI is experimental and subject to change\","}, {"sha": "595f6e0b9271bfd5755a8af57721f35b0ad96743", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 54, "deletions": 41, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -1583,55 +1583,68 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n     }\n \n     fn suggest_remove_await(&self, obligation: &PredicateObligation<'tcx>, err: &mut Diagnostic) {\n-        let span = obligation.cause.span;\n-\n-        if let ObligationCauseCode::AwaitableExpr(hir_id) = obligation.cause.code().peel_derives() {\n-            let hir = self.tcx.hir();\n-            if let Some(hir::Node::Expr(expr)) = hir_id.and_then(|hir_id| hir.find(hir_id)) {\n-                // FIXME: use `obligation.predicate.kind()...trait_ref.self_ty()` to see if we have `()`\n-                // and if not maybe suggest doing something else? If we kept the expression around we\n-                // could also check if it is an fn call (very likely) and suggest changing *that*, if\n-                // it is from the local crate.\n+        let hir = self.tcx.hir();\n+        if let ObligationCauseCode::AwaitableExpr(Some(hir_id)) = obligation.cause.code().peel_derives()\n+            && let hir::Node::Expr(expr) = hir.get(*hir_id)\n+        {\n+            // FIXME: use `obligation.predicate.kind()...trait_ref.self_ty()` to see if we have `()`\n+            // and if not maybe suggest doing something else? If we kept the expression around we\n+            // could also check if it is an fn call (very likely) and suggest changing *that*, if\n+            // it is from the local crate.\n+\n+            // use nth(1) to skip one layer of desugaring from `IntoIter::into_iter`\n+            if let Some((_, hir::Node::Expr(await_expr))) = hir.parent_iter(*hir_id).nth(1)\n+                && let Some(expr_span) = expr.span.find_ancestor_inside(await_expr.span)\n+            {\n+                let removal_span = self.tcx\n+                    .sess\n+                    .source_map()\n+                    .span_extend_while(expr_span, char::is_whitespace)\n+                    .unwrap_or(expr_span)\n+                    .shrink_to_hi()\n+                    .to(await_expr.span.shrink_to_hi());\n                 err.span_suggestion(\n-                    span,\n+                    removal_span,\n                     \"remove the `.await`\",\n                     \"\",\n                     Applicability::MachineApplicable,\n                 );\n-                // FIXME: account for associated `async fn`s.\n-                if let hir::Expr { span, kind: hir::ExprKind::Call(base, _), .. } = expr {\n-                    if let ty::PredicateKind::Clause(ty::Clause::Trait(pred)) =\n-                        obligation.predicate.kind().skip_binder()\n+            } else {\n+                err.span_label(obligation.cause.span, \"remove the `.await`\");\n+            }\n+            // FIXME: account for associated `async fn`s.\n+            if let hir::Expr { span, kind: hir::ExprKind::Call(base, _), .. } = expr {\n+                if let ty::PredicateKind::Clause(ty::Clause::Trait(pred)) =\n+                    obligation.predicate.kind().skip_binder()\n+                {\n+                    err.span_label(*span, &format!(\"this call returns `{}`\", pred.self_ty()));\n+                }\n+                if let Some(typeck_results) = &self.typeck_results\n+                        && let ty = typeck_results.expr_ty_adjusted(base)\n+                        && let ty::FnDef(def_id, _substs) = ty.kind()\n+                        && let Some(hir::Node::Item(hir::Item { ident, span, vis_span, .. })) =\n+                            hir.get_if_local(*def_id)\n                     {\n-                        err.span_label(*span, &format!(\"this call returns `{}`\", pred.self_ty()));\n-                    }\n-                    if let Some(typeck_results) = &self.typeck_results\n-                            && let ty = typeck_results.expr_ty_adjusted(base)\n-                            && let ty::FnDef(def_id, _substs) = ty.kind()\n-                            && let Some(hir::Node::Item(hir::Item { ident, span, vis_span, .. })) =\n-                                hir.get_if_local(*def_id)\n-                        {\n-                            let msg = format!(\n-                                \"alternatively, consider making `fn {}` asynchronous\",\n-                                ident\n+                        let msg = format!(\n+                            \"alternatively, consider making `fn {}` asynchronous\",\n+                            ident\n+                        );\n+                        if vis_span.is_empty() {\n+                            err.span_suggestion_verbose(\n+                                span.shrink_to_lo(),\n+                                &msg,\n+                                \"async \",\n+                                Applicability::MaybeIncorrect,\n+                            );\n+                        } else {\n+                            err.span_suggestion_verbose(\n+                                vis_span.shrink_to_hi(),\n+                                &msg,\n+                                \" async\",\n+                                Applicability::MaybeIncorrect,\n                             );\n-                            if vis_span.is_empty() {\n-                                err.span_suggestion_verbose(\n-                                    span.shrink_to_lo(),\n-                                    &msg,\n-                                    \"async \",\n-                                    Applicability::MaybeIncorrect,\n-                                );\n-                            } else {\n-                                err.span_suggestion_verbose(\n-                                    vis_span.shrink_to_hi(),\n-                                    &msg,\n-                                    \" async\",\n-                                    Applicability::MaybeIncorrect,\n-                                );\n-                            }\n                         }\n-                }\n+                    }\n             }\n         }\n     }"}, {"sha": "1768687e8cd0263b0da8fd8cd401e4df0964d88c", "filename": "library/alloc/src/boxed.rs", "status": "modified", "additions": 31, "deletions": 8, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Falloc%2Fsrc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Falloc%2Fsrc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -1455,9 +1455,36 @@ where\n     }\n }\n \n+/// Specialization trait used for `From<&[T]>`.\n+#[cfg(not(no_global_oom_handling))]\n+trait BoxFromSlice<T> {\n+    fn from_slice(slice: &[T]) -> Self;\n+}\n+\n+#[cfg(not(no_global_oom_handling))]\n+impl<T: Clone> BoxFromSlice<T> for Box<[T]> {\n+    #[inline]\n+    default fn from_slice(slice: &[T]) -> Self {\n+        slice.to_vec().into_boxed_slice()\n+    }\n+}\n+\n+#[cfg(not(no_global_oom_handling))]\n+impl<T: Copy> BoxFromSlice<T> for Box<[T]> {\n+    #[inline]\n+    fn from_slice(slice: &[T]) -> Self {\n+        let len = slice.len();\n+        let buf = RawVec::with_capacity(len);\n+        unsafe {\n+            ptr::copy_nonoverlapping(slice.as_ptr(), buf.ptr(), len);\n+            buf.into_box(slice.len()).assume_init()\n+        }\n+    }\n+}\n+\n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"box_from_slice\", since = \"1.17.0\")]\n-impl<T: Copy> From<&[T]> for Box<[T]> {\n+impl<T: Clone> From<&[T]> for Box<[T]> {\n     /// Converts a `&[T]` into a `Box<[T]>`\n     ///\n     /// This conversion allocates on the heap\n@@ -1471,19 +1498,15 @@ impl<T: Copy> From<&[T]> for Box<[T]> {\n     ///\n     /// println!(\"{boxed_slice:?}\");\n     /// ```\n+    #[inline]\n     fn from(slice: &[T]) -> Box<[T]> {\n-        let len = slice.len();\n-        let buf = RawVec::with_capacity(len);\n-        unsafe {\n-            ptr::copy_nonoverlapping(slice.as_ptr(), buf.ptr(), len);\n-            buf.into_box(slice.len()).assume_init()\n-        }\n+        <Self as BoxFromSlice<T>>::from_slice(slice)\n     }\n }\n \n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"box_from_cow\", since = \"1.45.0\")]\n-impl<T: Copy> From<Cow<'_, [T]>> for Box<[T]> {\n+impl<T: Clone> From<Cow<'_, [T]>> for Box<[T]> {\n     /// Converts a `Cow<'_, [T]>` into a `Box<[T]>`\n     ///\n     /// When `cow` is the `Cow::Borrowed` variant, this"}, {"sha": "48b127716f50df112c455c97de7cdd068a2613de", "filename": "library/core/src/cmp.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Fcore%2Fsrc%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Fcore%2Fsrc%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcmp.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -1321,13 +1321,13 @@ mod impls {\n                         (true, true) => Some(Equal),\n                     }\n                 }\n-                #[inline]\n+                #[inline(always)]\n                 fn lt(&self, other: &$t) -> bool { (*self) < (*other) }\n-                #[inline]\n+                #[inline(always)]\n                 fn le(&self, other: &$t) -> bool { (*self) <= (*other) }\n-                #[inline]\n+                #[inline(always)]\n                 fn ge(&self, other: &$t) -> bool { (*self) >= (*other) }\n-                #[inline]\n+                #[inline(always)]\n                 fn gt(&self, other: &$t) -> bool { (*self) > (*other) }\n             }\n         )*)\n@@ -1359,13 +1359,13 @@ mod impls {\n                 fn partial_cmp(&self, other: &$t) -> Option<Ordering> {\n                     Some(self.cmp(other))\n                 }\n-                #[inline]\n+                #[inline(always)]\n                 fn lt(&self, other: &$t) -> bool { (*self) < (*other) }\n-                #[inline]\n+                #[inline(always)]\n                 fn le(&self, other: &$t) -> bool { (*self) <= (*other) }\n-                #[inline]\n+                #[inline(always)]\n                 fn ge(&self, other: &$t) -> bool { (*self) >= (*other) }\n-                #[inline]\n+                #[inline(always)]\n                 fn gt(&self, other: &$t) -> bool { (*self) > (*other) }\n             }\n "}, {"sha": "38c654e76b46c66212ae5ef26d3bfe67057fa29b", "filename": "library/core/src/future/into_future.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Fcore%2Fsrc%2Ffuture%2Finto_future.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Fcore%2Fsrc%2Ffuture%2Finto_future.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffuture%2Finto_future.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -99,6 +99,7 @@ use crate::future::Future;\n /// }\n /// ```\n #[stable(feature = \"into_future\", since = \"1.64.0\")]\n+#[rustc_diagnostic_item = \"IntoFuture\"]\n pub trait IntoFuture {\n     /// The output that the future will produce on completion.\n     #[stable(feature = \"into_future\", since = \"1.64.0\")]"}, {"sha": "077c0fdc380bc14fee87b93d2102568d03a7ddd4", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -2257,12 +2257,23 @@ extern \"rust-intrinsic\" {\n     /// This is an implementation detail of [`crate::ptr::read`] and should\n     /// not be used anywhere else.  See its comments for why this exists.\n     ///\n-    /// This intrinsic can *only* be called where the argument is a local without\n-    /// projections (`read_via_copy(p)`, not `read_via_copy(*p)`) so that it\n+    /// This intrinsic can *only* be called where the pointer is a local without\n+    /// projections (`read_via_copy(ptr)`, not `read_via_copy(*ptr)`) so that it\n     /// trivially obeys runtime-MIR rules about derefs in operands.\n     #[rustc_const_unstable(feature = \"const_ptr_read\", issue = \"80377\")]\n     #[rustc_nounwind]\n-    pub fn read_via_copy<T>(p: *const T) -> T;\n+    pub fn read_via_copy<T>(ptr: *const T) -> T;\n+\n+    /// This is an implementation detail of [`crate::ptr::write`] and should\n+    /// not be used anywhere else.  See its comments for why this exists.\n+    ///\n+    /// This intrinsic can *only* be called where the pointer is a local without\n+    /// projections (`write_via_move(ptr, x)`, not `write_via_move(*ptr, x)`) so\n+    /// that it trivially obeys runtime-MIR rules about derefs in operands.\n+    #[cfg(not(bootstrap))]\n+    #[rustc_const_unstable(feature = \"const_ptr_write\", issue = \"86302\")]\n+    #[rustc_nounwind]\n+    pub fn write_via_move<T>(ptr: *mut T, value: T);\n \n     /// Returns the value of the discriminant for the variant in 'v';\n     /// if `T` has no discriminant, returns `0`.\n@@ -2828,3 +2839,16 @@ pub const unsafe fn transmute_unchecked<Src, Dst>(src: Src) -> Dst {\n     // SAFETY: It's a transmute -- the caller promised it's fine.\n     unsafe { transmute_copy(&ManuallyDrop::new(src)) }\n }\n+\n+/// Polyfill for bootstrap\n+#[cfg(bootstrap)]\n+pub const unsafe fn write_via_move<T>(ptr: *mut T, value: T) {\n+    use crate::mem::*;\n+    // SAFETY: the caller must guarantee that `dst` is valid for writes.\n+    // `dst` cannot overlap `src` because the caller has mutable access\n+    // to `dst` while `src` is owned by this function.\n+    unsafe {\n+        copy_nonoverlapping::<T>(&value, ptr, 1);\n+        forget(value);\n+    }\n+}"}, {"sha": "82e4c6489745d803ae6217666b28693e55014ce8", "filename": "library/core/src/marker.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Fcore%2Fsrc%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Fcore%2Fsrc%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmarker.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -24,7 +24,7 @@ use crate::hash::Hasher;\n /// operations. Its cousin [`sync::Arc`][arc] does use atomic operations (incurring\n /// some overhead) and thus is `Send`.\n ///\n-/// See [the Nomicon](../../nomicon/send-and-sync.html) for more details.\n+/// See [the Nomicon](../../nomicon/send-and-sync.html) and the [`Sync`] trait for more details.\n ///\n /// [`Rc`]: ../../std/rc/struct.Rc.html\n /// [arc]: ../../std/sync/struct.Arc.html\n@@ -426,6 +426,11 @@ pub macro Copy($item:item) {\n /// becomes read-only, as if it were a `& &T`. Hence there is no risk\n /// of a data race.\n ///\n+/// A shorter overview of how [`Sync`] and [`Send`] relate to referencing:\n+/// * `&T` is [`Send`] if and only if `T` is [`Sync`]\n+/// * `&mut T` is [`Send`] if and only if `T` is [`Send`]\n+/// * `&T` and `&mut T` are [`Sync`] if and only if `T` is [`Sync`]\n+///\n /// Types that are not `Sync` are those that have \"interior\n /// mutability\" in a non-thread-safe form, such as [`Cell`][cell]\n /// and [`RefCell`][refcell]. These types allow for mutation of"}, {"sha": "c38c68e1d586735406c1bef97ed00cf8863bd555", "filename": "library/core/src/option.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -1007,7 +1007,7 @@ impl<T> Option<T> {\n     {\n         match self {\n             Some(x) => x,\n-            None => Default::default(),\n+            None => T::default(),\n         }\n     }\n \n@@ -1615,11 +1615,7 @@ impl<T> Option<T> {\n     where\n         T: Default,\n     {\n-        fn default<T: Default>() -> T {\n-            T::default()\n-        }\n-\n-        self.get_or_insert_with(default)\n+        self.get_or_insert_with(T::default)\n     }\n \n     /// Inserts a value computed from `f` into the option if it is [`None`],"}, {"sha": "5f55f762ad555c7df6bd04afd216496113103d7a", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -1349,13 +1349,13 @@ pub const unsafe fn read_unaligned<T>(src: *const T) -> T {\n #[rustc_const_unstable(feature = \"const_ptr_write\", issue = \"86302\")]\n #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n pub const unsafe fn write<T>(dst: *mut T, src: T) {\n-    // We are calling the intrinsics directly to avoid function calls in the generated code\n-    // as `intrinsics::copy_nonoverlapping` is a wrapper function.\n-    extern \"rust-intrinsic\" {\n-        #[rustc_const_stable(feature = \"const_intrinsic_copy\", since = \"1.63.0\")]\n-        #[rustc_nounwind]\n-        fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);\n-    }\n+    // Semantically, it would be fine for this to be implemented as a\n+    // `copy_nonoverlapping` and appropriate drop suppression of `src`.\n+\n+    // However, implementing via that currently produces more MIR than is ideal.\n+    // Using an intrinsic keeps it down to just the simple `*dst = move src` in\n+    // MIR (11 statements shorter, at the time of writing), and also allows\n+    // `src` to stay an SSA value in codegen_ssa, rather than a memory one.\n \n     // SAFETY: the caller must guarantee that `dst` is valid for writes.\n     // `dst` cannot overlap `src` because the caller has mutable access\n@@ -1365,8 +1365,7 @@ pub const unsafe fn write<T>(dst: *mut T, src: T) {\n             \"ptr::write requires that the pointer argument is aligned and non-null\",\n             [T](dst: *mut T) => is_aligned_and_not_null(dst)\n         );\n-        copy_nonoverlapping(&src as *const T, dst, 1);\n-        intrinsics::forget(src);\n+        intrinsics::write_via_move(dst, src)\n     }\n }\n "}, {"sha": "8629aab00704645b6c75db73b8e3978096f378c9", "filename": "library/core/src/slice/iter.rs", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -60,10 +60,17 @@ impl<'a, T> IntoIterator for &'a mut [T] {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[must_use = \"iterators are lazy and do nothing unless consumed\"]\n pub struct Iter<'a, T: 'a> {\n+    /// The pointer to the next element to return, or the past-the-end location\n+    /// if the iterator is empty.\n+    ///\n+    /// This address will be used for all ZST elements, never changed.\n     ptr: NonNull<T>,\n-    end: *const T, // If T is a ZST, this is actually ptr+len. This encoding is picked so that\n-    // ptr == end is a quick test for the Iterator being empty, that works\n-    // for both ZST and non-ZST.\n+    /// For non-ZSTs, the non-null pointer to the past-the-end element.\n+    ///\n+    /// For ZSTs, this is `ptr.wrapping_byte_add(len)`.\n+    ///\n+    /// For all types, `ptr == end` tests whether the iterator is empty.\n+    end: *const T,\n     _marker: PhantomData<&'a T>,\n }\n \n@@ -179,10 +186,17 @@ impl<T> AsRef<[T]> for Iter<'_, T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[must_use = \"iterators are lazy and do nothing unless consumed\"]\n pub struct IterMut<'a, T: 'a> {\n+    /// The pointer to the next element to return, or the past-the-end location\n+    /// if the iterator is empty.\n+    ///\n+    /// This address will be used for all ZST elements, never changed.\n     ptr: NonNull<T>,\n-    end: *mut T, // If T is a ZST, this is actually ptr+len. This encoding is picked so that\n-    // ptr == end is a quick test for the Iterator being empty, that works\n-    // for both ZST and non-ZST.\n+    /// For non-ZSTs, the non-null pointer to the past-the-end element.\n+    ///\n+    /// For ZSTs, this is `ptr.wrapping_byte_add(len)`.\n+    ///\n+    /// For all types, `ptr == end` tests whether the iterator is empty.\n+    end: *mut T,\n     _marker: PhantomData<&'a mut T>,\n }\n "}, {"sha": "af18e19337c7a7cf4ce1459af4559e0086840d0d", "filename": "library/panic_unwind/src/emcc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Fpanic_unwind%2Fsrc%2Femcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Fpanic_unwind%2Fsrc%2Femcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fpanic_unwind%2Fsrc%2Femcc.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -47,7 +47,7 @@ static EXCEPTION_TYPE_INFO: TypeInfo = TypeInfo {\n     name: b\"rust_panic\\0\".as_ptr(),\n };\n \n-// NOTE(nbdd0121): The `canary` field will be part of stable ABI after `c_unwind` stabilization.\n+// NOTE(nbdd0121): The `canary` field is part of stable ABI.\n #[repr(C)]\n struct Exception {\n     // See `gcc.rs` on why this is present. We already have a static here so just use it."}, {"sha": "08858dd92be09e6274a99cfda662d4d7f3c9a610", "filename": "library/panic_unwind/src/gcc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Fpanic_unwind%2Fsrc%2Fgcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Fpanic_unwind%2Fsrc%2Fgcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fpanic_unwind%2Fsrc%2Fgcc.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -48,8 +48,8 @@ use unwind as uw;\n static CANARY: u8 = 0;\n \n // NOTE(nbdd0121)\n-// Once `c_unwind` feature is stabilized, there will be ABI stability requirement\n-// on this struct. The first two field must be `_Unwind_Exception` and `canary`,\n+// There is an ABI stability requirement on this struct.\n+// The first two field must be `_Unwind_Exception` and `canary`,\n // as it may be accessed by a different version of the std with a different compiler.\n #[repr(C)]\n struct Exception {"}, {"sha": "99db00e549066c0e4bed959e744ba6461921c7f2", "filename": "library/panic_unwind/src/seh.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Fpanic_unwind%2Fsrc%2Fseh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Fpanic_unwind%2Fsrc%2Fseh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fpanic_unwind%2Fsrc%2Fseh.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -52,7 +52,7 @@ use core::mem::{self, ManuallyDrop};\n use core::ptr;\n use libc::{c_int, c_uint, c_void};\n \n-// NOTE(nbdd0121): The `canary` field will be part of stable ABI after `c_unwind` stabilization.\n+// NOTE(nbdd0121): The `canary` field is part of stable ABI.\n #[repr(C)]\n struct Exception {\n     // See `gcc.rs` on why this is present. We already have a static here so just use it."}, {"sha": "6640c7fb1621420de49fad602957c66f5cc9cdad", "filename": "library/std/src/fs.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Fstd%2Fsrc%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Fstd%2Fsrc%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -709,6 +709,7 @@ impl File {\n // `AsRawHandle`/`IntoRawHandle`/`FromRawHandle` on Windows.\n \n impl AsInner<fs_imp::File> for File {\n+    #[inline]\n     fn as_inner(&self) -> &fs_imp::File {\n         &self.inner\n     }\n@@ -1087,12 +1088,14 @@ impl OpenOptions {\n }\n \n impl AsInner<fs_imp::OpenOptions> for OpenOptions {\n+    #[inline]\n     fn as_inner(&self) -> &fs_imp::OpenOptions {\n         &self.0\n     }\n }\n \n impl AsInnerMut<fs_imp::OpenOptions> for OpenOptions {\n+    #[inline]\n     fn as_inner_mut(&mut self) -> &mut fs_imp::OpenOptions {\n         &mut self.0\n     }\n@@ -1352,6 +1355,7 @@ impl fmt::Debug for Metadata {\n }\n \n impl AsInner<fs_imp::FileAttr> for Metadata {\n+    #[inline]\n     fn as_inner(&self) -> &fs_imp::FileAttr {\n         &self.0\n     }\n@@ -1604,6 +1608,7 @@ impl FileType {\n }\n \n impl AsInner<fs_imp::FileType> for FileType {\n+    #[inline]\n     fn as_inner(&self) -> &fs_imp::FileType {\n         &self.0\n     }\n@@ -1616,6 +1621,7 @@ impl FromInner<fs_imp::FilePermissions> for Permissions {\n }\n \n impl AsInner<fs_imp::FilePermissions> for Permissions {\n+    #[inline]\n     fn as_inner(&self) -> &fs_imp::FilePermissions {\n         &self.0\n     }\n@@ -1770,6 +1776,7 @@ impl fmt::Debug for DirEntry {\n }\n \n impl AsInner<fs_imp::DirEntry> for DirEntry {\n+    #[inline]\n     fn as_inner(&self) -> &fs_imp::DirEntry {\n         &self.0\n     }\n@@ -2510,6 +2517,7 @@ impl DirBuilder {\n }\n \n impl AsInnerMut<fs_imp::DirBuilder> for DirBuilder {\n+    #[inline]\n     fn as_inner_mut(&mut self) -> &mut fs_imp::DirBuilder {\n         &mut self.inner\n     }"}, {"sha": "541e95d229b62528d9db7650aa7b991c027d1c60", "filename": "library/std/src/net/tcp.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Fstd%2Fsrc%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Fstd%2Fsrc%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Ftcp.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -691,6 +691,7 @@ impl Write for &TcpStream {\n }\n \n impl AsInner<net_imp::TcpStream> for TcpStream {\n+    #[inline]\n     fn as_inner(&self) -> &net_imp::TcpStream {\n         &self.0\n     }\n@@ -1033,6 +1034,7 @@ impl Iterator for IntoIncoming {\n impl FusedIterator for IntoIncoming {}\n \n impl AsInner<net_imp::TcpListener> for TcpListener {\n+    #[inline]\n     fn as_inner(&self) -> &net_imp::TcpListener {\n         &self.0\n     }"}, {"sha": "9628bcc51083d16aa4a709ebfaceac1cfcf649ec", "filename": "library/std/src/net/udp.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Fstd%2Fsrc%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Fstd%2Fsrc%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fudp.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -788,6 +788,7 @@ impl UdpSocket {\n // `AsRawSocket`/`IntoRawSocket`/`FromRawSocket` on Windows.\n \n impl AsInner<net_imp::UdpSocket> for UdpSocket {\n+    #[inline]\n     fn as_inner(&self) -> &net_imp::UdpSocket {\n         &self.0\n     }"}, {"sha": "2b3ff76d7a4a795523b126a8b9cb6d745e937ba3", "filename": "library/std/src/os/linux/process.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Fstd%2Fsrc%2Fos%2Flinux%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Fstd%2Fsrc%2Fos%2Flinux%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Flinux%2Fprocess.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -52,6 +52,7 @@ pub struct PidFd {\n }\n \n impl AsInner<FileDesc> for PidFd {\n+    #[inline]\n     fn as_inner(&self) -> &FileDesc {\n         &self.inner\n     }\n@@ -70,6 +71,7 @@ impl IntoInner<FileDesc> for PidFd {\n }\n \n impl AsRawFd for PidFd {\n+    #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n         self.as_inner().as_raw_fd()\n     }"}, {"sha": "198996c5f707f26f4cc360069d32ff713d217e86", "filename": "library/std/src/path.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Fstd%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Fstd%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -1395,11 +1395,16 @@ impl PathBuf {\n     ///\n     /// let mut buf = PathBuf::from(\"/\");\n     /// assert!(buf.file_name() == None);\n-    /// buf.set_file_name(\"bar\");\n-    /// assert!(buf == PathBuf::from(\"/bar\"));\n+    ///\n+    /// buf.set_file_name(\"foo.txt\");\n+    /// assert!(buf == PathBuf::from(\"/foo.txt\"));\n     /// assert!(buf.file_name().is_some());\n-    /// buf.set_file_name(\"baz.txt\");\n-    /// assert!(buf == PathBuf::from(\"/baz.txt\"));\n+    ///\n+    /// buf.set_file_name(\"bar.txt\");\n+    /// assert!(buf == PathBuf::from(\"/bar.txt\"));\n+    ///\n+    /// buf.set_file_name(\"baz\");\n+    /// assert!(buf == PathBuf::from(\"/baz\"));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn set_file_name<S: AsRef<OsStr>>(&mut self, file_name: S) {\n@@ -2562,7 +2567,8 @@ impl Path {\n     /// ```\n     /// use std::path::{Path, PathBuf};\n     ///\n-    /// let path = Path::new(\"/tmp/foo.txt\");\n+    /// let path = Path::new(\"/tmp/foo.png\");\n+    /// assert_eq!(path.with_file_name(\"bar\"), PathBuf::from(\"/tmp/bar\"));\n     /// assert_eq!(path.with_file_name(\"bar.txt\"), PathBuf::from(\"/tmp/bar.txt\"));\n     ///\n     /// let path = Path::new(\"/tmp\");"}, {"sha": "bf22c2d46c9e03c3db408fe043d27ce1f44131de", "filename": "library/std/src/process.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Fstd%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Fstd%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprocess.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -211,6 +211,7 @@ pub struct Child {\n impl crate::sealed::Sealed for Child {}\n \n impl AsInner<imp::Process> for Child {\n+    #[inline]\n     fn as_inner(&self) -> &imp::Process {\n         &self.handle\n     }\n@@ -304,6 +305,7 @@ impl Write for &ChildStdin {\n }\n \n impl AsInner<AnonPipe> for ChildStdin {\n+    #[inline]\n     fn as_inner(&self) -> &AnonPipe {\n         &self.inner\n     }\n@@ -373,6 +375,7 @@ impl Read for ChildStdout {\n }\n \n impl AsInner<AnonPipe> for ChildStdout {\n+    #[inline]\n     fn as_inner(&self) -> &AnonPipe {\n         &self.inner\n     }\n@@ -438,6 +441,7 @@ impl Read for ChildStderr {\n }\n \n impl AsInner<AnonPipe> for ChildStderr {\n+    #[inline]\n     fn as_inner(&self) -> &AnonPipe {\n         &self.inner\n     }\n@@ -1107,12 +1111,14 @@ impl fmt::Debug for Command {\n }\n \n impl AsInner<imp::Command> for Command {\n+    #[inline]\n     fn as_inner(&self) -> &imp::Command {\n         &self.inner\n     }\n }\n \n impl AsInnerMut<imp::Command> for Command {\n+    #[inline]\n     fn as_inner_mut(&mut self) -> &mut imp::Command {\n         &mut self.inner\n     }\n@@ -1605,6 +1611,7 @@ impl ExitStatus {\n }\n \n impl AsInner<imp::ExitStatus> for ExitStatus {\n+    #[inline]\n     fn as_inner(&self) -> &imp::ExitStatus {\n         &self.0\n     }\n@@ -1884,6 +1891,7 @@ impl From<u8> for ExitCode {\n }\n \n impl AsInner<imp::ExitCode> for ExitCode {\n+    #[inline]\n     fn as_inner(&self) -> &imp::ExitCode {\n         &self.0\n     }"}, {"sha": "ccde05aa1d7db6026376ca8b4a0d281b38583283", "filename": "library/std/src/sys/hermit/fd.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ffd.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -75,6 +75,7 @@ impl FromRawFd for FileDesc {\n }\n \n impl AsInner<OwnedFd> for FileDesc {\n+    #[inline]\n     fn as_inner(&self) -> &OwnedFd {\n         &self.fd\n     }"}, {"sha": "4bb735668d24c0dfa4a24a69fd4afa3de6001503", "filename": "library/std/src/sys/hermit/fs.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ffs.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -367,12 +367,14 @@ impl DirBuilder {\n }\n \n impl AsInner<FileDesc> for File {\n+    #[inline]\n     fn as_inner(&self) -> &FileDesc {\n         &self.0\n     }\n }\n \n impl AsInnerMut<FileDesc> for File {\n+    #[inline]\n     fn as_inner_mut(&mut self) -> &mut FileDesc {\n         &mut self.0\n     }\n@@ -397,6 +399,7 @@ impl AsFd for File {\n }\n \n impl AsRawFd for File {\n+    #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n         self.0.as_raw_fd()\n     }"}, {"sha": "8c2d489d6a36258387693c281ce5bcb6ec763895", "filename": "library/std/src/sys/hermit/net.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fnet.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -340,6 +340,7 @@ impl Socket {\n }\n \n impl AsInner<FileDesc> for Socket {\n+    #[inline]\n     fn as_inner(&self) -> &FileDesc {\n         &self.0\n     }\n@@ -364,6 +365,7 @@ impl AsFd for Socket {\n }\n \n impl AsRawFd for Socket {\n+    #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n         self.0.as_raw_fd()\n     }"}, {"sha": "b3686d0e28328d8fc41c3e50011db5ae26724ebe", "filename": "library/std/src/sys/sgx/fd.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Ffd.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -62,6 +62,7 @@ impl FileDesc {\n }\n \n impl AsInner<Fd> for FileDesc {\n+    #[inline]\n     fn as_inner(&self) -> &Fd {\n         &self.fd\n     }"}, {"sha": "03620a08f2c03ee56a8cde86624cf626ff80ccf6", "filename": "library/std/src/sys/sgx/net.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fnet.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -24,6 +24,7 @@ impl Socket {\n }\n \n impl AsInner<FileDesc> for Socket {\n+    #[inline]\n     fn as_inner(&self) -> &FileDesc {\n         &self.inner\n     }\n@@ -220,6 +221,7 @@ impl TcpStream {\n }\n \n impl AsInner<Socket> for TcpStream {\n+    #[inline]\n     fn as_inner(&self) -> &Socket {\n         &self.inner\n     }\n@@ -304,6 +306,7 @@ impl TcpListener {\n }\n \n impl AsInner<Socket> for TcpListener {\n+    #[inline]\n     fn as_inner(&self) -> &Socket {\n         &self.inner\n     }"}, {"sha": "0bd2bc3b961998557a422937c816e922471e1fb3", "filename": "library/std/src/sys/solid/net.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Fnet.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -112,6 +112,7 @@ impl FileDesc {\n }\n \n impl AsInner<c_int> for FileDesc {\n+    #[inline]\n     fn as_inner(&self) -> &c_int {\n         &self.fd\n     }\n@@ -462,6 +463,7 @@ impl Socket {\n }\n \n impl AsInner<c_int> for Socket {\n+    #[inline]\n     fn as_inner(&self) -> &c_int {\n         self.0.as_inner()\n     }"}, {"sha": "45f96478fc373ef64de365f7f0115a30ec04e27a", "filename": "library/std/src/sys/unix/fd.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffd.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -481,6 +481,7 @@ impl<'a> Read for &'a FileDesc {\n }\n \n impl AsInner<OwnedFd> for FileDesc {\n+    #[inline]\n     fn as_inner(&self) -> &OwnedFd {\n         &self.0\n     }\n@@ -505,6 +506,7 @@ impl AsFd for FileDesc {\n }\n \n impl AsRawFd for FileDesc {\n+    #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n         self.0.as_raw_fd()\n     }"}, {"sha": "b398fd5eb24bf649b837ee4c6177ab105e7439e5", "filename": "library/std/src/sys/unix/fs.rs", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -547,6 +547,7 @@ impl FileAttr {\n }\n \n impl AsInner<stat64> for FileAttr {\n+    #[inline]\n     fn as_inner(&self) -> &stat64 {\n         &self.stat\n     }\n@@ -1193,8 +1194,6 @@ impl File {\n                 None => Ok(libc::timespec { tv_sec: 0, tv_nsec: libc::UTIME_OMIT as _ }),\n             }\n         };\n-        #[cfg(not(any(target_os = \"redox\", target_os = \"espidf\", target_os = \"horizon\")))]\n-        let times = [to_timespec(times.accessed)?, to_timespec(times.modified)?];\n         cfg_if::cfg_if! {\n             if #[cfg(any(target_os = \"redox\", target_os = \"espidf\", target_os = \"horizon\"))] {\n                 // Redox doesn't appear to support `UTIME_OMIT`.\n@@ -1206,6 +1205,7 @@ impl File {\n                     \"setting file times not supported\",\n                 ))\n             } else if #[cfg(any(target_os = \"android\", target_os = \"macos\"))] {\n+                let times = [to_timespec(times.accessed)?, to_timespec(times.modified)?];\n                 // futimens requires macOS 10.13, and Android API level 19\n                 cvt(unsafe {\n                     weak!(fn futimens(c_int, *const libc::timespec) -> c_int);\n@@ -1232,6 +1232,22 @@ impl File {\n                 })?;\n                 Ok(())\n             } else {\n+                #[cfg(all(target_os = \"linux\", target_env = \"gnu\", target_pointer_width = \"32\", not(target_arch = \"riscv32\")))]\n+                {\n+                    use crate::sys::{time::__timespec64, weak::weak};\n+\n+                    // Added in glibc 2.34\n+                    weak!(fn __futimens64(libc::c_int, *const __timespec64) -> libc::c_int);\n+\n+                    if let Some(futimens64) = __futimens64.get() {\n+                        let to_timespec = |time: Option<SystemTime>| time.map(|time| time.t.to_timespec64())\n+                            .unwrap_or(__timespec64::new(0, libc::UTIME_OMIT as _));\n+                        let times = [to_timespec(times.accessed), to_timespec(times.modified)];\n+                        cvt(unsafe { futimens64(self.as_raw_fd(), times.as_ptr()) })?;\n+                        return Ok(());\n+                    }\n+                }\n+                let times = [to_timespec(times.accessed)?, to_timespec(times.modified)?];\n                 cvt(unsafe { libc::futimens(self.as_raw_fd(), times.as_ptr()) })?;\n                 Ok(())\n             }\n@@ -1254,12 +1270,14 @@ impl DirBuilder {\n }\n \n impl AsInner<FileDesc> for File {\n+    #[inline]\n     fn as_inner(&self) -> &FileDesc {\n         &self.0\n     }\n }\n \n impl AsInnerMut<FileDesc> for File {\n+    #[inline]\n     fn as_inner_mut(&mut self) -> &mut FileDesc {\n         &mut self.0\n     }\n@@ -1284,6 +1302,7 @@ impl AsFd for File {\n }\n \n impl AsRawFd for File {\n+    #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n         self.0.as_raw_fd()\n     }"}, {"sha": "ee016887e70215b12806102e79be0cdc3c948d58", "filename": "library/std/src/sys/unix/l4re.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fl4re.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fl4re.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fl4re.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -129,6 +129,7 @@ pub mod net {\n     }\n \n     impl AsInner<FileDesc> for Socket {\n+        #[inline]\n         fn as_inner(&self) -> &FileDesc {\n             &self.0\n         }\n@@ -153,6 +154,7 @@ pub mod net {\n     }\n \n     impl AsRawFd for Socket {\n+        #[inline]\n         fn as_raw_fd(&self) -> RawFd {\n             self.0.as_raw_fd()\n         }\n@@ -183,6 +185,7 @@ pub mod net {\n             unimpl!();\n         }\n \n+        #[inline]\n         pub fn socket(&self) -> &Socket {\n             &self.inner\n         }\n@@ -305,6 +308,7 @@ pub mod net {\n             unimpl!();\n         }\n \n+        #[inline]\n         pub fn socket(&self) -> &Socket {\n             &self.inner\n         }\n@@ -371,6 +375,7 @@ pub mod net {\n             unimpl!();\n         }\n \n+        #[inline]\n         pub fn socket(&self) -> &Socket {\n             &self.inner\n         }"}, {"sha": "39edb136c24fdfdc4291ef483ce6c45d3dd352ef", "filename": "library/std/src/sys/unix/net.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fnet.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -490,6 +490,7 @@ impl Socket {\n }\n \n impl AsInner<FileDesc> for Socket {\n+    #[inline]\n     fn as_inner(&self) -> &FileDesc {\n         &self.0\n     }\n@@ -514,6 +515,7 @@ impl AsFd for Socket {\n }\n \n impl AsRawFd for Socket {\n+    #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n         self.0.as_raw_fd()\n     }"}, {"sha": "488217f39413f052244d77b4cd946e0cadee61ab", "filename": "library/std/src/sys/unix/os_str.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos_str.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -89,6 +89,7 @@ impl IntoInner<Vec<u8>> for Buf {\n }\n \n impl AsInner<[u8]> for Buf {\n+    #[inline]\n     fn as_inner(&self) -> &[u8] {\n         &self.inner\n     }"}, {"sha": "938a46bfdd833d21160be6bd2b183e0ded3d322e", "filename": "library/std/src/sys/unix/pipe.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fpipe.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -135,6 +135,7 @@ pub fn read2(p1: AnonPipe, v1: &mut Vec<u8>, p2: AnonPipe, v2: &mut Vec<u8>) ->\n }\n \n impl AsRawFd for AnonPipe {\n+    #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n         self.0.as_raw_fd()\n     }"}, {"sha": "a61d926ca8b3a4167eaeb54351ab0b874ce69e9e", "filename": "library/std/src/sys/unix/time.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -166,6 +166,16 @@ impl Timespec {\n         }\n         self.to_timespec()\n     }\n+\n+    #[cfg(all(\n+        target_os = \"linux\",\n+        target_env = \"gnu\",\n+        target_pointer_width = \"32\",\n+        not(target_arch = \"riscv32\")\n+    ))]\n+    pub fn to_timespec64(&self) -> __timespec64 {\n+        __timespec64::new(self.tv_sec, self.tv_nsec.0 as _)\n+    }\n }\n \n impl From<libc::timespec> for Timespec {\n@@ -190,6 +200,18 @@ pub(in crate::sys::unix) struct __timespec64 {\n     _padding: i32,\n }\n \n+#[cfg(all(\n+    target_os = \"linux\",\n+    target_env = \"gnu\",\n+    target_pointer_width = \"32\",\n+    not(target_arch = \"riscv32\")\n+))]\n+impl __timespec64 {\n+    pub(in crate::sys::unix) fn new(tv_sec: i64, tv_nsec: i32) -> Self {\n+        Self { tv_sec, tv_nsec, _padding: 0 }\n+    }\n+}\n+\n #[cfg(all(\n     target_os = \"linux\",\n     target_env = \"gnu\","}, {"sha": "9a8b2a0be5b000bb9253e93eaabddbfeb60f9912", "filename": "library/std/src/sys/wasi/fd.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffd.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -275,12 +275,14 @@ impl WasiFd {\n }\n \n impl AsInner<OwnedFd> for WasiFd {\n+    #[inline]\n     fn as_inner(&self) -> &OwnedFd {\n         &self.fd\n     }\n }\n \n impl AsInnerMut<OwnedFd> for WasiFd {\n+    #[inline]\n     fn as_inner_mut(&mut self) -> &mut OwnedFd {\n         &mut self.fd\n     }\n@@ -305,6 +307,7 @@ impl AsFd for WasiFd {\n }\n \n impl AsRawFd for WasiFd {\n+    #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n         self.fd.as_raw_fd()\n     }"}, {"sha": "8d1dbf59155a4e7619a1c03b44591a1f19fcf49e", "filename": "library/std/src/sys/wasi/fs.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffs.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -498,6 +498,7 @@ impl File {\n }\n \n impl AsInner<WasiFd> for File {\n+    #[inline]\n     fn as_inner(&self) -> &WasiFd {\n         &self.fd\n     }\n@@ -522,6 +523,7 @@ impl AsFd for File {\n }\n \n impl AsRawFd for File {\n+    #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n         self.fd.as_raw_fd()\n     }"}, {"sha": "2239880ffbef45079d504387ac2368469a50850d", "filename": "library/std/src/sys/wasi/net.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fnet.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -17,6 +17,7 @@ pub struct TcpStream {\n }\n \n impl AsInner<WasiFd> for Socket {\n+    #[inline]\n     fn as_inner(&self) -> &WasiFd {\n         &self.0\n     }\n@@ -41,6 +42,7 @@ impl AsFd for Socket {\n }\n \n impl AsRawFd for Socket {\n+    #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n         self.0.as_raw_fd()\n     }\n@@ -184,6 +186,7 @@ impl TcpStream {\n         }\n     }\n \n+    #[inline]\n     pub fn socket(&self) -> &Socket {\n         &self.inner\n     }\n@@ -274,6 +277,7 @@ impl TcpListener {\n         }\n     }\n \n+    #[inline]\n     pub fn socket(&self) -> &Socket {\n         &self.inner\n     }\n@@ -284,6 +288,7 @@ impl TcpListener {\n }\n \n impl AsInner<Socket> for TcpListener {\n+    #[inline]\n     fn as_inner(&self) -> &Socket {\n         &self.inner\n     }\n@@ -436,6 +441,7 @@ impl UdpSocket {\n         unsupported()\n     }\n \n+    #[inline]\n     pub fn socket(&self) -> &Socket {\n         &self.inner\n     }\n@@ -446,6 +452,7 @@ impl UdpSocket {\n }\n \n impl AsInner<Socket> for UdpSocket {\n+    #[inline]\n     fn as_inner(&self) -> &Socket {\n         &self.inner\n     }"}, {"sha": "f99cdfbecfb696d98ab82980037e1accda2555f7", "filename": "library/std/src/sys/windows/fs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -832,6 +832,7 @@ fn open_link_no_reparse(parent: &File, name: &[u16], access: u32) -> io::Result<\n }\n \n impl AsInner<Handle> for File {\n+    #[inline]\n     fn as_inner(&self) -> &Handle {\n         &self.handle\n     }"}, {"sha": "c7677d1c13abb8b38c08e74ef43ae55a35127645", "filename": "library/std/src/sys/windows/handle.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fhandle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fhandle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fhandle.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -34,6 +34,7 @@ impl Handle {\n }\n \n impl AsInner<OwnedHandle> for Handle {\n+    #[inline]\n     fn as_inner(&self) -> &OwnedHandle {\n         &self.0\n     }"}, {"sha": "8158713fa84a828b725a89230c570a76d8b964cd", "filename": "library/std/src/sys/windows/net.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fnet.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -446,6 +446,7 @@ impl<'a> Read for &'a Socket {\n }\n \n impl AsInner<OwnedSocket> for Socket {\n+    #[inline]\n     fn as_inner(&self) -> &OwnedSocket {\n         &self.0\n     }"}, {"sha": "2f2b0e56e0889e3ac3e4b75aafa652d5aa4b794c", "filename": "library/std/src/sys/windows/os_str.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fos_str.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -27,6 +27,7 @@ impl FromInner<Wtf8Buf> for Buf {\n }\n \n impl AsInner<Wtf8> for Buf {\n+    #[inline]\n     fn as_inner(&self) -> &Wtf8 {\n         &self.inner\n     }"}, {"sha": "652c695fc57b00d6c93e6b46fbf3fe703c083b66", "filename": "library/std/src/sys_common/net.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Fstd%2Fsrc%2Fsys_common%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Fstd%2Fsrc%2Fsys_common%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fnet.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -239,6 +239,7 @@ impl TcpStream {\n         Ok(TcpStream { inner: sock })\n     }\n \n+    #[inline]\n     pub fn socket(&self) -> &Socket {\n         &self.inner\n     }\n@@ -352,6 +353,7 @@ impl TcpStream {\n }\n \n impl AsInner<Socket> for TcpStream {\n+    #[inline]\n     fn as_inner(&self) -> &Socket {\n         &self.inner\n     }\n@@ -427,6 +429,7 @@ impl TcpListener {\n         Ok(TcpListener { inner: sock })\n     }\n \n+    #[inline]\n     pub fn socket(&self) -> &Socket {\n         &self.inner\n     }\n@@ -517,6 +520,7 @@ impl UdpSocket {\n         Ok(UdpSocket { inner: sock })\n     }\n \n+    #[inline]\n     pub fn socket(&self) -> &Socket {\n         &self.inner\n     }"}, {"sha": "ff96c35fb0ba6386085ec32be39efc20acc6868d", "filename": "library/std/src/sys_common/wtf8.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Fstd%2Fsrc%2Fsys_common%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Fstd%2Fsrc%2Fsys_common%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fwtf8.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -501,6 +501,7 @@ pub struct Wtf8 {\n }\n \n impl AsInner<[u8]> for Wtf8 {\n+    #[inline]\n     fn as_inner(&self) -> &[u8] {\n         &self.bytes\n     }"}, {"sha": "00e2857a13759172685df08085860cebcae29470", "filename": "library/std/src/time.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Fstd%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/library%2Fstd%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ftime.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -119,7 +119,7 @@ pub use core::time::TryFromFloatSecsError;\n /// [QueryPerformanceCounter]: https://docs.microsoft.com/en-us/windows/win32/api/profileapi/nf-profileapi-queryperformancecounter\n /// [`insecure_time` usercall]: https://edp.fortanix.com/docs/api/fortanix_sgx_abi/struct.Usercalls.html#method.insecure_time\n /// [timekeeping in SGX]: https://edp.fortanix.com/docs/concepts/rust-std/#codestdtimecode\n-/// [__wasi_clock_time_get (Monotonic Clock)]: https://github.com/WebAssembly/WASI/blob/master/phases/snapshot/docs.md#clock_time_get\n+/// [__wasi_clock_time_get (Monotonic Clock)]: https://github.com/WebAssembly/WASI/blob/main/legacy/preview1/docs.md#clock_time_get\n /// [clock_gettime (Monotonic Clock)]: https://linux.die.net/man/3/clock_gettime\n /// [mach_absolute_time]: https://developer.apple.com/library/archive/documentation/Darwin/Conceptual/KernelProgramming/services/services.html\n ///\n@@ -224,7 +224,7 @@ pub struct Instant(time::Instant);\n /// [timekeeping in SGX]: https://edp.fortanix.com/docs/concepts/rust-std/#codestdtimecode\n /// [gettimeofday]: https://man7.org/linux/man-pages/man2/gettimeofday.2.html\n /// [clock_gettime (Realtime Clock)]: https://linux.die.net/man/3/clock_gettime\n-/// [__wasi_clock_time_get (Realtime Clock)]: https://github.com/WebAssembly/WASI/blob/master/phases/snapshot/docs.md#clock_time_get\n+/// [__wasi_clock_time_get (Realtime Clock)]: https://github.com/WebAssembly/WASI/blob/main/legacy/preview1/docs.md#clock_time_get\n /// [GetSystemTimePreciseAsFileTime]: https://docs.microsoft.com/en-us/windows/win32/api/sysinfoapi/nf-sysinfoapi-getsystemtimepreciseasfiletime\n /// [GetSystemTimeAsFileTime]: https://docs.microsoft.com/en-us/windows/win32/api/sysinfoapi/nf-sysinfoapi-getsystemtimeasfiletime\n ///"}, {"sha": "f22cdad7df411adba3e5a5686658334d46513f7b", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 147, "deletions": 48, "changes": 195, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -13,6 +13,7 @@\n import tempfile\n \n from time import time\n+from multiprocessing import Pool, cpu_count\n \n try:\n     import lzma\n@@ -27,6 +28,20 @@ def platform_is_win32():\n else:\n     EXE_SUFFIX = \"\"\n \n+def get_cpus():\n+    if hasattr(os, \"sched_getaffinity\"):\n+        return len(os.sched_getaffinity(0))\n+    if hasattr(os, \"cpu_count\"):\n+        cpus = os.cpu_count()\n+        if cpus is not None:\n+            return cpus\n+    try:\n+        return cpu_count()\n+    except NotImplementedError:\n+        return 1\n+\n+\n+\n def get(base, url, path, checksums, verbose=False):\n     with tempfile.NamedTemporaryFile(delete=False) as temp_file:\n         temp_path = temp_file.name\n@@ -42,23 +57,23 @@ def get(base, url, path, checksums, verbose=False):\n         if os.path.exists(path):\n             if verify(path, sha256, False):\n                 if verbose:\n-                    print(\"using already-download file\", path)\n+                    print(\"using already-download file\", path, file=sys.stderr)\n                 return\n             else:\n                 if verbose:\n                     print(\"ignoring already-download file\",\n-                        path, \"due to failed verification\")\n+                        path, \"due to failed verification\", file=sys.stderr)\n                 os.unlink(path)\n         download(temp_path, \"{}/{}\".format(base, url), True, verbose)\n         if not verify(temp_path, sha256, verbose):\n             raise RuntimeError(\"failed verification\")\n         if verbose:\n-            print(\"moving {} to {}\".format(temp_path, path))\n+            print(\"moving {} to {}\".format(temp_path, path), file=sys.stderr)\n         shutil.move(temp_path, path)\n     finally:\n         if os.path.isfile(temp_path):\n             if verbose:\n-                print(\"removing\", temp_path)\n+                print(\"removing\", temp_path, file=sys.stderr)\n             os.unlink(temp_path)\n \n \n@@ -68,7 +83,7 @@ def download(path, url, probably_big, verbose):\n             _download(path, url, probably_big, verbose, True)\n             return\n         except RuntimeError:\n-            print(\"\\nspurious failure, trying again\")\n+            print(\"\\nspurious failure, trying again\", file=sys.stderr)\n     _download(path, url, probably_big, verbose, False)\n \n \n@@ -79,7 +94,7 @@ def _download(path, url, probably_big, verbose, exception):\n     #  - If we are on win32 fallback to powershell\n     #  - Otherwise raise the error if appropriate\n     if probably_big or verbose:\n-        print(\"downloading {}\".format(url))\n+        print(\"downloading {}\".format(url), file=sys.stderr)\n \n     try:\n         if probably_big or verbose:\n@@ -115,20 +130,20 @@ def _download(path, url, probably_big, verbose, exception):\n def verify(path, expected, verbose):\n     \"\"\"Check if the sha256 sum of the given path is valid\"\"\"\n     if verbose:\n-        print(\"verifying\", path)\n+        print(\"verifying\", path, file=sys.stderr)\n     with open(path, \"rb\") as source:\n         found = hashlib.sha256(source.read()).hexdigest()\n     verified = found == expected\n     if not verified:\n         print(\"invalid checksum:\\n\"\n               \"    found:    {}\\n\"\n-              \"    expected: {}\".format(found, expected))\n+              \"    expected: {}\".format(found, expected), file=sys.stderr)\n     return verified\n \n \n def unpack(tarball, tarball_suffix, dst, verbose=False, match=None):\n     \"\"\"Unpack the given tarball file\"\"\"\n-    print(\"extracting\", tarball)\n+    print(\"extracting\", tarball, file=sys.stderr)\n     fname = os.path.basename(tarball).replace(tarball_suffix, \"\")\n     with contextlib.closing(tarfile.open(tarball)) as tar:\n         for member in tar.getnames():\n@@ -141,7 +156,7 @@ def unpack(tarball, tarball_suffix, dst, verbose=False, match=None):\n \n             dst_path = os.path.join(dst, name)\n             if verbose:\n-                print(\"  extracting\", member)\n+                print(\"  extracting\", member, file=sys.stderr)\n             tar.extract(member, dst)\n             src_path = os.path.join(dst, member)\n             if os.path.isdir(src_path) and os.path.exists(dst_path):\n@@ -153,7 +168,7 @@ def unpack(tarball, tarball_suffix, dst, verbose=False, match=None):\n def run(args, verbose=False, exception=False, is_bootstrap=False, **kwargs):\n     \"\"\"Run a child program in a new process\"\"\"\n     if verbose:\n-        print(\"running: \" + ' '.join(args))\n+        print(\"running: \" + ' '.join(args), file=sys.stderr)\n     sys.stdout.flush()\n     # Ensure that the .exe is used on Windows just in case a Linux ELF has been\n     # compiled in the same directory.\n@@ -193,8 +208,8 @@ def require(cmd, exit=True, exception=False):\n         if exception:\n             raise\n         elif exit:\n-            print(\"error: unable to run `{}`: {}\".format(' '.join(cmd), exc))\n-            print(\"Please make sure it's installed and in the path.\")\n+            print(\"error: unable to run `{}`: {}\".format(' '.join(cmd), exc), file=sys.stderr)\n+            print(\"Please make sure it's installed and in the path.\", file=sys.stderr)\n             sys.exit(1)\n         return None\n \n@@ -218,8 +233,8 @@ def default_build_triple(verbose):\n \n     if sys.platform == 'darwin':\n         if verbose:\n-            print(\"not using rustc detection as it is unreliable on macOS\")\n-            print(\"falling back to auto-detect\")\n+            print(\"not using rustc detection as it is unreliable on macOS\", file=sys.stderr)\n+            print(\"falling back to auto-detect\", file=sys.stderr)\n     else:\n         try:\n             version = subprocess.check_output([\"rustc\", \"--version\", \"--verbose\"],\n@@ -228,12 +243,14 @@ def default_build_triple(verbose):\n             host = next(x for x in version.split('\\n') if x.startswith(\"host: \"))\n             triple = host.split(\"host: \")[1]\n             if verbose:\n-                print(\"detected default triple {} from pre-installed rustc\".format(triple))\n+                print(\"detected default triple {} from pre-installed rustc\".format(triple),\n+                    file=sys.stderr)\n             return triple\n         except Exception as e:\n             if verbose:\n-                print(\"pre-installed rustc not detected: {}\".format(e))\n-                print(\"falling back to auto-detect\")\n+                print(\"pre-installed rustc not detected: {}\".format(e),\n+                    file=sys.stderr)\n+                print(\"falling back to auto-detect\", file=sys.stderr)\n \n     required = not platform_is_win32()\n     ostype = require([\"uname\", \"-s\"], exit=required)\n@@ -404,6 +421,48 @@ def channel(self):\n         return self.version + \"-\" + self.date\n \n \n+class DownloadInfo:\n+    \"\"\"A helper class that can be pickled into a parallel subprocess\"\"\"\n+\n+    def __init__(\n+        self,\n+        base_download_url,\n+        download_path,\n+        bin_root,\n+        tarball_path,\n+        tarball_suffix,\n+        checksums_sha256,\n+        pattern,\n+        verbose,\n+    ):\n+        self.base_download_url = base_download_url\n+        self.download_path = download_path\n+        self.bin_root = bin_root\n+        self.tarball_path = tarball_path\n+        self.tarball_suffix = tarball_suffix\n+        self.checksums_sha256 = checksums_sha256\n+        self.pattern = pattern\n+        self.verbose = verbose\n+\n+def download_component(download_info):\n+    if not os.path.exists(download_info.tarball_path):\n+        get(\n+            download_info.base_download_url,\n+            download_info.download_path,\n+            download_info.tarball_path,\n+            download_info.checksums_sha256,\n+            verbose=download_info.verbose,\n+        )\n+\n+def unpack_component(download_info):\n+    unpack(\n+        download_info.tarball_path,\n+        download_info.tarball_suffix,\n+        download_info.bin_root,\n+        match=download_info.pattern,\n+        verbose=download_info.verbose,\n+    )\n+\n class RustBuild(object):\n     \"\"\"Provide all the methods required to build Rust\"\"\"\n     def __init__(self):\n@@ -458,17 +517,53 @@ def download_toolchain(self):\n                     )\n                     run_powershell([script])\n                 shutil.rmtree(bin_root)\n+\n+            key = self.stage0_compiler.date\n+            cache_dst = os.path.join(self.build_dir, \"cache\")\n+            rustc_cache = os.path.join(cache_dst, key)\n+            if not os.path.exists(rustc_cache):\n+                os.makedirs(rustc_cache)\n+\n             tarball_suffix = '.tar.gz' if lzma is None else '.tar.xz'\n-            filename = \"rust-std-{}-{}{}\".format(\n-                rustc_channel, self.build, tarball_suffix)\n-            pattern = \"rust-std-{}\".format(self.build)\n-            self._download_component_helper(filename, pattern, tarball_suffix)\n-            filename = \"rustc-{}-{}{}\".format(rustc_channel, self.build,\n-                                              tarball_suffix)\n-            self._download_component_helper(filename, \"rustc\", tarball_suffix)\n-            filename = \"cargo-{}-{}{}\".format(rustc_channel, self.build,\n-                                            tarball_suffix)\n-            self._download_component_helper(filename, \"cargo\", tarball_suffix)\n+\n+            toolchain_suffix = \"{}-{}{}\".format(rustc_channel, self.build, tarball_suffix)\n+\n+            tarballs_to_download = [\n+                (\"rust-std-{}\".format(toolchain_suffix), \"rust-std-{}\".format(self.build)),\n+                (\"rustc-{}\".format(toolchain_suffix), \"rustc\"),\n+                (\"cargo-{}\".format(toolchain_suffix), \"cargo\"),\n+            ]\n+\n+            tarballs_download_info = [\n+                DownloadInfo(\n+                    base_download_url=self.download_url,\n+                    download_path=\"dist/{}/{}\".format(self.stage0_compiler.date, filename),\n+                    bin_root=self.bin_root(),\n+                    tarball_path=os.path.join(rustc_cache, filename),\n+                    tarball_suffix=tarball_suffix,\n+                    checksums_sha256=self.checksums_sha256,\n+                    pattern=pattern,\n+                    verbose=self.verbose,\n+                )\n+                for filename, pattern in tarballs_to_download\n+            ]\n+\n+            # Download the components serially to show the progress bars properly.\n+            for download_info in tarballs_download_info:\n+                download_component(download_info)\n+\n+            # Unpack the tarballs in parallle.\n+            # In Python 2.7, Pool cannot be used as a context manager.\n+            pool_size = min(len(tarballs_download_info), get_cpus())\n+            if self.verbose:\n+                print('Choosing a pool size of', pool_size, 'for the unpacking of the tarballs')\n+            p = Pool(pool_size)\n+            try:\n+                p.map(unpack_component, tarballs_download_info)\n+            finally:\n+                p.close()\n+            p.join()\n+\n             if self.should_fix_bins_and_dylibs():\n                 self.fix_bin_or_dylib(\"{}/bin/cargo\".format(bin_root))\n \n@@ -484,13 +579,9 @@ def download_toolchain(self):\n                 rust_stamp.write(key)\n \n     def _download_component_helper(\n-        self, filename, pattern, tarball_suffix,\n+        self, filename, pattern, tarball_suffix, rustc_cache,\n     ):\n         key = self.stage0_compiler.date\n-        cache_dst = os.path.join(self.build_dir, \"cache\")\n-        rustc_cache = os.path.join(cache_dst, key)\n-        if not os.path.exists(rustc_cache):\n-            os.makedirs(rustc_cache)\n \n         tarball = os.path.join(rustc_cache, filename)\n         if not os.path.exists(tarball):\n@@ -545,7 +636,7 @@ def get_answer():\n \n         answer = self._should_fix_bins_and_dylibs = get_answer()\n         if answer:\n-            print(\"info: You seem to be using Nix.\")\n+            print(\"info: You seem to be using Nix.\", file=sys.stderr)\n         return answer\n \n     def fix_bin_or_dylib(self, fname):\n@@ -558,7 +649,7 @@ def fix_bin_or_dylib(self, fname):\n         Please see https://nixos.org/patchelf.html for more information\n         \"\"\"\n         assert self._should_fix_bins_and_dylibs is True\n-        print(\"attempting to patch\", fname)\n+        print(\"attempting to patch\", fname, file=sys.stderr)\n \n         # Only build `.nix-deps` once.\n         nix_deps_dir = self.nix_deps_dir\n@@ -591,7 +682,7 @@ def fix_bin_or_dylib(self, fname):\n                     \"nix-build\", \"-E\", nix_expr, \"-o\", nix_deps_dir,\n                 ])\n             except subprocess.CalledProcessError as reason:\n-                print(\"warning: failed to call nix-build:\", reason)\n+                print(\"warning: failed to call nix-build:\", reason, file=sys.stderr)\n                 return\n             self.nix_deps_dir = nix_deps_dir\n \n@@ -611,7 +702,7 @@ def fix_bin_or_dylib(self, fname):\n         try:\n             subprocess.check_output([patchelf] + patchelf_args + [fname])\n         except subprocess.CalledProcessError as reason:\n-            print(\"warning: failed to call patchelf:\", reason)\n+            print(\"warning: failed to call patchelf:\", reason, file=sys.stderr)\n             return\n \n     def rustc_stamp(self):\n@@ -755,7 +846,7 @@ def build_bootstrap(self, color, verbose_count):\n         if \"GITHUB_ACTIONS\" in env:\n             print(\"::group::Building bootstrap\")\n         else:\n-            print(\"Building bootstrap\")\n+            print(\"Building bootstrap\", file=sys.stderr)\n         build_dir = os.path.join(self.build_dir, \"bootstrap\")\n         if self.clean and os.path.exists(build_dir):\n             shutil.rmtree(build_dir)\n@@ -849,9 +940,12 @@ def check_vendored_status(self):\n         if 'SUDO_USER' in os.environ and not self.use_vendored_sources:\n             if os.getuid() == 0:\n                 self.use_vendored_sources = True\n-                print('info: looks like you\\'re trying to run this command as root')\n-                print('      and so in order to preserve your $HOME this will now')\n-                print('      use vendored sources by default.')\n+                print('info: looks like you\\'re trying to run this command as root',\n+                    file=sys.stderr)\n+                print('      and so in order to preserve your $HOME this will now',\n+                    file=sys.stderr)\n+                print('      use vendored sources by default.',\n+                    file=sys.stderr)\n \n         cargo_dir = os.path.join(self.rust_root, '.cargo')\n         if self.use_vendored_sources:\n@@ -861,14 +955,18 @@ def check_vendored_status(self):\n                             \"--sync ./src/tools/rust-analyzer/Cargo.toml \" \\\n                             \"--sync ./compiler/rustc_codegen_cranelift/Cargo.toml \" \\\n                             \"--sync ./src/bootstrap/Cargo.toml \"\n-                print('error: vendoring required, but vendor directory does not exist.')\n+                print('error: vendoring required, but vendor directory does not exist.',\n+                    file=sys.stderr)\n                 print('       Run `cargo vendor {}` to initialize the '\n-                      'vendor directory.'.format(sync_dirs))\n-                print('Alternatively, use the pre-vendored `rustc-src` dist component.')\n+                      'vendor directory.'.format(sync_dirs),\n+                      file=sys.stderr)\n+                print('Alternatively, use the pre-vendored `rustc-src` dist component.',\n+                    file=sys.stderr)\n                 raise Exception(\"{} not found\".format(vendor_dir))\n \n             if not os.path.exists(cargo_dir):\n-                print('error: vendoring required, but .cargo/config does not exist.')\n+                print('error: vendoring required, but .cargo/config does not exist.',\n+                    file=sys.stderr)\n                 raise Exception(\"{} not found\".format(cargo_dir))\n         else:\n             if os.path.exists(cargo_dir):\n@@ -978,7 +1076,7 @@ def main():\n         print(\n             \"info: Downloading and building bootstrap before processing --help command.\\n\"\n             \"      See src/bootstrap/README.md for help with common commands.\"\n-        )\n+        , file=sys.stderr)\n \n     exit_code = 0\n     success_word = \"successfully\"\n@@ -989,11 +1087,12 @@ def main():\n             exit_code = error.code\n         else:\n             exit_code = 1\n-            print(error)\n+            print(error, file=sys.stderr)\n         success_word = \"unsuccessfully\"\n \n     if not help_triggered:\n-        print(\"Build completed\", success_word, \"in\", format_build_time(time() - start_time))\n+        print(\"Build completed\", success_word, \"in\", format_build_time(time() - start_time),\n+            file=sys.stderr)\n     sys.exit(exit_code)\n \n "}, {"sha": "d9d4685dfc790e718677664bd7b66fb48b2a2c6f", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -634,6 +634,14 @@ impl Kind {\n             Kind::Suggest => \"suggest\",\n         }\n     }\n+\n+    pub fn test_description(&self) -> &'static str {\n+        match self {\n+            Kind::Test => \"Testing\",\n+            Kind::Bench => \"Benchmarking\",\n+            _ => panic!(\"not a test command: {}!\", self.as_str()),\n+        }\n+    }\n }\n \n impl<'a> Builder<'a> {\n@@ -695,7 +703,6 @@ impl<'a> Builder<'a> {\n                 crate::toolstate::ToolStateCheck,\n                 test::ExpandYamlAnchors,\n                 test::Tidy,\n-                test::TidySelfTest,\n                 test::Ui,\n                 test::RunPassValgrind,\n                 test::MirOpt,\n@@ -711,11 +718,9 @@ impl<'a> Builder<'a> {\n                 test::CrateLibrustc,\n                 test::CrateRustdoc,\n                 test::CrateRustdocJsonTypes,\n-                test::CrateJsonDocLint,\n-                test::SuggestTestsCrate,\n+                test::CrateBootstrap,\n                 test::Linkcheck,\n                 test::TierCheck,\n-                test::ReplacePlaceholderTest,\n                 test::Cargotest,\n                 test::Cargo,\n                 test::RustAnalyzer,"}, {"sha": "72ac46b6bfdddd314b752ab9a680e34f995528a9", "filename": "src/bootstrap/builder/tests.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder%2Ftests.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -578,7 +578,6 @@ mod dist {\n                 compiler: Compiler { host, stage: 0 },\n                 target: host,\n                 mode: Mode::Std,\n-                test_kind: test::TestKind::Test,\n                 crates: vec![INTERNER.intern_str(\"std\")],\n             },]\n         );"}, {"sha": "4ef95b3370ff80aff68c26376ae26701a417dfcd", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -1309,7 +1309,7 @@ impl Config {\n         if config.llvm_from_ci {\n             let triple = &config.build.triple;\n             let ci_llvm_bin = config.ci_llvm_root().join(\"bin\");\n-            let mut build_target = config\n+            let build_target = config\n                 .target_config\n                 .entry(config.build)\n                 .or_insert_with(|| Target::from_triple(&triple));"}, {"sha": "c1cf9b93fb3563c2877fff547d7c06811d483c2f", "filename": "src/bootstrap/download.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/src%2Fbootstrap%2Fdownload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/src%2Fbootstrap%2Fdownload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdownload.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -112,7 +112,7 @@ impl Config {\n             is_nixos && !Path::new(\"/lib\").exists()\n         });\n         if val {\n-            println!(\"info: You seem to be using Nix.\");\n+            eprintln!(\"info: You seem to be using Nix.\");\n         }\n         val\n     }\n@@ -226,7 +226,7 @@ impl Config {\n         curl.stdout(Stdio::from(f));\n         if !self.check_run(&mut curl) {\n             if self.build.contains(\"windows-msvc\") {\n-                println!(\"Fallback to PowerShell\");\n+                eprintln!(\"Fallback to PowerShell\");\n                 for _ in 0..3 {\n                     if self.try_run(Command::new(\"PowerShell.exe\").args(&[\n                         \"/nologo\",\n@@ -239,7 +239,7 @@ impl Config {\n                     ])) {\n                         return;\n                     }\n-                    println!(\"\\nspurious failure, trying again\");\n+                    eprintln!(\"\\nspurious failure, trying again\");\n                 }\n             }\n             if !help_on_error.is_empty() {\n@@ -250,7 +250,7 @@ impl Config {\n     }\n \n     fn unpack(&self, tarball: &Path, dst: &Path, pattern: &str) {\n-        println!(\"extracting {} to {}\", tarball.display(), dst.display());\n+        eprintln!(\"extracting {} to {}\", tarball.display(), dst.display());\n         if !dst.exists() {\n             t!(fs::create_dir_all(dst));\n         }\n@@ -541,7 +541,18 @@ impl Config {\n             None\n         };\n \n-        self.download_file(&format!(\"{base_url}/{url}\"), &tarball, \"\");\n+        let mut help_on_error = \"\";\n+        if destination == \"ci-rustc\" {\n+            help_on_error = \"error: failed to download pre-built rustc from CI\n+\n+note: old builds get deleted after a certain time\n+help: if trying to compile an old commit of rustc, disable `download-rustc` in config.toml:\n+\n+[rust]\n+download-rustc = false\n+\";\n+        }\n+        self.download_file(&format!(\"{base_url}/{url}\"), &tarball, help_on_error);\n         if let Some(sha256) = checksum {\n             if !self.verify(&tarball, sha256) {\n                 panic!(\"failed to verify {}\", tarball.display());"}, {"sha": "59d2e9cc69e796794389d35d62f2aec00d91bcda", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -246,6 +246,7 @@ struct Crate {\n     name: Interned<String>,\n     deps: HashSet<Interned<String>>,\n     path: PathBuf,\n+    has_lib: bool,\n }\n \n impl Crate {"}, {"sha": "8f2c3faca3a483e99f0a2697858965a6f5d87ed0", "filename": "src/bootstrap/metadata.rs", "status": "modified", "additions": 26, "deletions": 16, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/src%2Fbootstrap%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/src%2Fbootstrap%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fmetadata.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -5,7 +5,7 @@ use serde_derive::Deserialize;\n \n use crate::cache::INTERNER;\n use crate::util::output;\n-use crate::{Build, Crate};\n+use crate::{t, Build, Crate};\n \n /// For more information, see the output of\n /// <https://doc.rust-lang.org/nightly/cargo/commands/cargo-metadata.html>\n@@ -22,6 +22,7 @@ struct Package {\n     source: Option<String>,\n     manifest_path: String,\n     dependencies: Vec<Dependency>,\n+    targets: Vec<Target>,\n }\n \n /// For more information, see the output of\n@@ -32,6 +33,11 @@ struct Dependency {\n     source: Option<String>,\n }\n \n+#[derive(Debug, Deserialize)]\n+struct Target {\n+    kind: Vec<String>,\n+}\n+\n /// Collects and stores package metadata of each workspace members into `build`,\n /// by executing `cargo metadata` commands.\n pub fn build(build: &mut Build) {\n@@ -46,11 +52,16 @@ pub fn build(build: &mut Build) {\n                 .filter(|dep| dep.source.is_none())\n                 .map(|dep| INTERNER.intern_string(dep.name))\n                 .collect();\n-            let krate = Crate { name, deps, path };\n+            let has_lib = package.targets.iter().any(|t| t.kind.iter().any(|k| k == \"lib\"));\n+            let krate = Crate { name, deps, path, has_lib };\n             let relative_path = krate.local_path(build);\n             build.crates.insert(name, krate);\n             let existing_path = build.crate_paths.insert(relative_path, name);\n-            assert!(existing_path.is_none(), \"multiple crates with the same path\");\n+            assert!(\n+                existing_path.is_none(),\n+                \"multiple crates with the same path: {}\",\n+                existing_path.unwrap()\n+            );\n         }\n     }\n }\n@@ -60,29 +71,28 @@ pub fn build(build: &mut Build) {\n /// Note that `src/tools/cargo` is no longer a workspace member but we still\n /// treat it as one here, by invoking an additional `cargo metadata` command.\n fn workspace_members(build: &Build) -> impl Iterator<Item = Package> {\n-    let cmd_metadata = |manifest_path| {\n+    let collect_metadata = |manifest_path| {\n         let mut cargo = Command::new(&build.initial_cargo);\n         cargo\n             .arg(\"metadata\")\n             .arg(\"--format-version\")\n             .arg(\"1\")\n             .arg(\"--no-deps\")\n             .arg(\"--manifest-path\")\n-            .arg(manifest_path);\n-        cargo\n+            .arg(build.src.join(manifest_path));\n+        let metadata_output = output(&mut cargo);\n+        let Output { packages, .. } = t!(serde_json::from_str(&metadata_output));\n+        packages\n     };\n \n-    // Collects `metadata.packages` from the root workspace.\n-    let root_manifest_path = build.src.join(\"Cargo.toml\");\n-    let root_output = output(&mut cmd_metadata(&root_manifest_path));\n-    let Output { packages, .. } = serde_json::from_str(&root_output).unwrap();\n-\n-    // Collects `metadata.packages` from src/tools/cargo separately.\n-    let cargo_manifest_path = build.src.join(\"src/tools/cargo/Cargo.toml\");\n-    let cargo_output = output(&mut cmd_metadata(&cargo_manifest_path));\n-    let Output { packages: cargo_packages, .. } = serde_json::from_str(&cargo_output).unwrap();\n+    // Collects `metadata.packages` from all workspaces.\n+    let packages = collect_metadata(\"Cargo.toml\");\n+    let cargo_packages = collect_metadata(\"src/tools/cargo/Cargo.toml\");\n+    let ra_packages = collect_metadata(\"src/tools/rust-analyzer/Cargo.toml\");\n+    let bootstrap_packages = collect_metadata(\"src/bootstrap/Cargo.toml\");\n \n     // We only care about the root package from `src/tool/cargo` workspace.\n     let cargo_package = cargo_packages.into_iter().find(|pkg| pkg.name == \"cargo\").into_iter();\n-    packages.into_iter().chain(cargo_package)\n+\n+    packages.into_iter().chain(cargo_package).chain(ra_packages).chain(bootstrap_packages)\n }"}, {"sha": "aee84e9c9beb96d8728dc9cc3ff9e5d8a3a5711b", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 178, "deletions": 327, "changes": 505, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -13,6 +13,7 @@ use std::process::{Command, Stdio};\n use crate::builder::crate_description;\n use crate::builder::{Builder, Compiler, Kind, RunConfig, ShouldRun, Step};\n use crate::cache::Interned;\n+use crate::cache::INTERNER;\n use crate::compile;\n use crate::config::TargetSelection;\n use crate::dist;\n@@ -27,44 +28,6 @@ use crate::{envify, CLang, DocTests, GitRepo, Mode};\n \n const ADB_TEST_DIR: &str = \"/data/local/tmp/work\";\n \n-/// The two modes of the test runner; tests or benchmarks.\n-#[derive(Debug, PartialEq, Eq, Hash, Copy, Clone, PartialOrd, Ord)]\n-pub enum TestKind {\n-    /// Run `cargo test`.\n-    Test,\n-    /// Run `cargo bench`.\n-    Bench,\n-}\n-\n-impl From<Kind> for TestKind {\n-    fn from(kind: Kind) -> Self {\n-        match kind {\n-            Kind::Test => TestKind::Test,\n-            Kind::Bench => TestKind::Bench,\n-            _ => panic!(\"unexpected kind in crate: {:?}\", kind),\n-        }\n-    }\n-}\n-\n-impl TestKind {\n-    // Return the cargo subcommand for this test kind\n-    fn subcommand(self) -> &'static str {\n-        match self {\n-            TestKind::Test => \"test\",\n-            TestKind::Bench => \"bench\",\n-        }\n-    }\n-}\n-\n-impl Into<Kind> for TestKind {\n-    fn into(self) -> Kind {\n-        match self {\n-            TestKind::Test => Kind::Test,\n-            TestKind::Bench => Kind::Bench,\n-        }\n-    }\n-}\n-\n fn try_run(builder: &Builder<'_>, cmd: &mut Command) -> bool {\n     if !builder.fail_fast {\n         if !builder.try_run(cmd) {\n@@ -92,74 +55,56 @@ fn try_run_quiet(builder: &Builder<'_>, cmd: &mut Command) -> bool {\n }\n \n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n-pub struct CrateJsonDocLint {\n+pub struct CrateBootstrap {\n+    path: Interned<PathBuf>,\n     host: TargetSelection,\n }\n \n-impl Step for CrateJsonDocLint {\n+impl Step for CrateBootstrap {\n     type Output = ();\n     const ONLY_HOSTS: bool = true;\n     const DEFAULT: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n         run.path(\"src/tools/jsondoclint\")\n+            .path(\"src/tools/suggest-tests\")\n+            .path(\"src/tools/replace-version-placeholder\")\n+            .alias(\"tidyselftest\")\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n-        run.builder.ensure(CrateJsonDocLint { host: run.target });\n+        for path in run.paths {\n+            let path = INTERNER.intern_path(path.assert_single_path().path.clone());\n+            run.builder.ensure(CrateBootstrap { host: run.target, path });\n+        }\n     }\n \n     fn run(self, builder: &Builder<'_>) {\n         let bootstrap_host = builder.config.build;\n         let compiler = builder.compiler(0, bootstrap_host);\n+        let mut path = self.path.to_str().unwrap();\n+        if path == \"tidyselftest\" {\n+            path = \"src/tools/tidy\";\n+        }\n \n         let cargo = tool::prepare_tool_cargo(\n             builder,\n             compiler,\n             Mode::ToolBootstrap,\n             bootstrap_host,\n             \"test\",\n-            \"src/tools/jsondoclint\",\n+            path,\n             SourceType::InTree,\n             &[],\n         );\n-        add_flags_and_try_run_tests(builder, &mut cargo.into());\n-    }\n-}\n-\n-#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n-pub struct SuggestTestsCrate {\n-    host: TargetSelection,\n-}\n-\n-impl Step for SuggestTestsCrate {\n-    type Output = ();\n-    const ONLY_HOSTS: bool = true;\n-    const DEFAULT: bool = true;\n-\n-    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.path(\"src/tools/suggest-tests\")\n-    }\n-\n-    fn make_run(run: RunConfig<'_>) {\n-        run.builder.ensure(SuggestTestsCrate { host: run.target });\n-    }\n-\n-    fn run(self, builder: &Builder<'_>) {\n-        let bootstrap_host = builder.config.build;\n-        let compiler = builder.compiler(0, bootstrap_host);\n-\n-        let suggest_tests = tool::prepare_tool_cargo(\n-            builder,\n-            compiler,\n-            Mode::ToolBootstrap,\n+        builder.info(&format!(\n+            \"{} {} stage0 ({})\",\n+            builder.kind.test_description(),\n+            path,\n             bootstrap_host,\n-            \"test\",\n-            \"src/tools/suggest-tests\",\n-            SourceType::InTree,\n-            &[],\n-        );\n-        add_flags_and_try_run_tests(builder, &mut suggest_tests.into());\n+        ));\n+        let crate_name = path.rsplit_once('/').unwrap().1;\n+        run_cargo_test(cargo, &[], &[], crate_name, compiler, bootstrap_host, builder);\n     }\n }\n \n@@ -208,7 +153,11 @@ You can skip linkcheck with --exclude src/tools/linkchecker\"\n             SourceType::InTree,\n             &[],\n         );\n-        add_flags_and_try_run_tests(builder, &mut cargo.into());\n+        run_cargo_test(cargo, &[], &[], \"linkchecker\", compiler, bootstrap_host, builder);\n+\n+        if builder.doc_tests == DocTests::No {\n+            return;\n+        }\n \n         // Build all the default documentation.\n         builder.default_doc(&[]);\n@@ -344,7 +293,7 @@ impl Step for Cargo {\n         let compiler = builder.compiler(self.stage, self.host);\n \n         builder.ensure(tool::Cargo { compiler, target: self.host });\n-        let mut cargo = tool::prepare_tool_cargo(\n+        let cargo = tool::prepare_tool_cargo(\n             builder,\n             compiler,\n             Mode::ToolRustc,\n@@ -355,21 +304,19 @@ impl Step for Cargo {\n             &[],\n         );\n \n-        if !builder.fail_fast {\n-            cargo.arg(\"--no-fail-fast\");\n-        }\n-        cargo.arg(\"--\").args(builder.config.cmd.test_args());\n+        // NOTE: can't use `run_cargo_test` because we need to overwrite `PATH`\n+        let mut cargo = prepare_cargo_test(cargo, &[], &[], \"cargo\", compiler, self.host, builder);\n \n         // Don't run cross-compile tests, we may not have cross-compiled libstd libs\n         // available.\n         cargo.env(\"CFG_DISABLE_CROSS_TESTS\", \"1\");\n         // Forcibly disable tests using nightly features since any changes to\n         // those features won't be able to land.\n         cargo.env(\"CARGO_TEST_DISABLE_NIGHTLY\", \"1\");\n-\n         cargo.env(\"PATH\", &path_for_cargo(builder, compiler));\n \n-        add_flags_and_try_run_tests(builder, &mut cargo.into());\n+        let _time = util::timeit(&builder);\n+        add_flags_and_try_run_tests(builder, &mut cargo);\n     }\n }\n \n@@ -426,9 +373,7 @@ impl Step for RustAnalyzer {\n         cargo.env(\"SKIP_SLOW_TESTS\", \"1\");\n \n         cargo.add_rustc_lib_path(builder, compiler);\n-        cargo.arg(\"--\").args(builder.config.cmd.test_args());\n-\n-        add_flags_and_try_run_tests(builder, &mut cargo.into());\n+        run_cargo_test(cargo, &[], &[], \"rust-analyzer\", compiler, host, builder);\n     }\n }\n \n@@ -471,17 +416,13 @@ impl Step for Rustfmt {\n             &[],\n         );\n \n-        if !builder.fail_fast {\n-            cargo.arg(\"--no-fail-fast\");\n-        }\n-\n         let dir = testdir(builder, compiler.host);\n         t!(fs::create_dir_all(&dir));\n         cargo.env(\"RUSTFMT_TEST_DIR\", dir);\n \n         cargo.add_rustc_lib_path(builder, compiler);\n \n-        add_flags_and_try_run_tests(builder, &mut cargo.into());\n+        run_cargo_test(cargo, &[], &[], \"rustfmt\", compiler, host, builder);\n     }\n }\n \n@@ -527,12 +468,9 @@ impl Step for RustDemangler {\n         t!(fs::create_dir_all(&dir));\n \n         cargo.env(\"RUST_DEMANGLER_DRIVER_PATH\", rust_demangler);\n-\n-        cargo.arg(\"--\").args(builder.config.cmd.test_args());\n-\n         cargo.add_rustc_lib_path(builder, compiler);\n \n-        add_flags_and_try_run_tests(builder, &mut cargo.into());\n+        run_cargo_test(cargo, &[], &[], \"rust-demangler\", compiler, host, builder);\n     }\n }\n \n@@ -655,10 +593,6 @@ impl Step for Miri {\n         );\n         cargo.add_rustc_lib_path(builder, compiler);\n \n-        if !builder.fail_fast {\n-            cargo.arg(\"--no-fail-fast\");\n-        }\n-\n         // miri tests need to know about the stage sysroot\n         cargo.env(\"MIRI_SYSROOT\", &miri_sysroot);\n         cargo.env(\"MIRI_HOST_SYSROOT\", sysroot);\n@@ -670,13 +604,14 @@ impl Step for Miri {\n \n         // Set the target.\n         cargo.env(\"MIRI_TEST_TARGET\", target.rustc_target_arg());\n-        // Forward test filters.\n-        cargo.arg(\"--\").args(builder.config.cmd.test_args());\n \n-        // This can NOT be `add_flags_and_try_run_tests` since the Miri test runner\n-        // does not understand those flags!\n-        let mut cargo = Command::from(cargo);\n-        builder.run(&mut cargo);\n+        // This can NOT be `run_cargo_test` since the Miri test runner\n+        // does not understand the flags added by `add_flags_and_try_run_test`.\n+        let mut cargo = prepare_cargo_test(cargo, &[], &[], \"miri\", compiler, target, builder);\n+        {\n+            let _time = util::timeit(&builder);\n+            builder.run(&mut cargo);\n+        }\n \n         // # Run `cargo miri test`.\n         // This is just a smoke test (Miri's own CI invokes this in a bunch of different ways and ensures\n@@ -709,6 +644,7 @@ impl Step for Miri {\n         cargo.env(\"RUST_BACKTRACE\", \"1\");\n \n         let mut cargo = Command::from(cargo);\n+        let _time = util::timeit(&builder);\n         builder.run(&mut cargo);\n     }\n }\n@@ -748,8 +684,7 @@ impl Step for CompiletestTest {\n             &[],\n         );\n         cargo.allow_features(\"test\");\n-\n-        add_flags_and_try_run_tests(builder, &mut cargo.into());\n+        run_cargo_test(cargo, &[], &[], \"compiletest\", compiler, host, builder);\n     }\n }\n \n@@ -792,20 +727,15 @@ impl Step for Clippy {\n             &[],\n         );\n \n-        if !builder.fail_fast {\n-            cargo.arg(\"--no-fail-fast\");\n-        }\n-\n         cargo.env(\"RUSTC_TEST_SUITE\", builder.rustc(compiler));\n         cargo.env(\"RUSTC_LIB_PATH\", builder.rustc_libdir(compiler));\n         let host_libs = builder.stage_out(compiler, Mode::ToolRustc).join(builder.cargo_dir());\n         cargo.env(\"HOST_LIBS\", host_libs);\n \n-        cargo.arg(\"--\").args(builder.config.cmd.test_args());\n-\n         cargo.add_rustc_lib_path(builder, compiler);\n+        let mut cargo = prepare_cargo_test(cargo, &[], &[], \"clippy\", compiler, host, builder);\n \n-        if builder.try_run(&mut cargo.into()) {\n+        if builder.try_run(&mut cargo) {\n             // The tests succeeded; nothing to do.\n             return;\n         }\n@@ -1203,40 +1133,6 @@ help: to skip test's attempt to check tidiness, pass `--exclude src/tools/tidy`\n     }\n }\n \n-/// Runs tidy's own tests.\n-#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n-pub struct TidySelfTest;\n-\n-impl Step for TidySelfTest {\n-    type Output = ();\n-    const DEFAULT: bool = true;\n-    const ONLY_HOSTS: bool = true;\n-\n-    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.alias(\"tidyselftest\")\n-    }\n-\n-    fn make_run(run: RunConfig<'_>) {\n-        run.builder.ensure(TidySelfTest);\n-    }\n-\n-    fn run(self, builder: &Builder<'_>) {\n-        let bootstrap_host = builder.config.build;\n-        let compiler = builder.compiler(0, bootstrap_host);\n-        let cargo = tool::prepare_tool_cargo(\n-            builder,\n-            compiler,\n-            Mode::ToolBootstrap,\n-            bootstrap_host,\n-            \"test\",\n-            \"src/tools/tidy\",\n-            SourceType::InTree,\n-            &[],\n-        );\n-        add_flags_and_try_run_tests(builder, &mut cargo.into());\n-    }\n-}\n-\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub struct ExpandYamlAnchors;\n \n@@ -2111,7 +2007,6 @@ impl Step for RustcGuide {\n pub struct CrateLibrustc {\n     compiler: Compiler,\n     target: TargetSelection,\n-    test_kind: TestKind,\n     crates: Vec<Interned<String>>,\n }\n \n@@ -2133,28 +2028,115 @@ impl Step for CrateLibrustc {\n             .iter()\n             .map(|p| builder.crate_paths[&p.assert_single_path().path].clone())\n             .collect();\n-        let test_kind = builder.kind.into();\n \n-        builder.ensure(CrateLibrustc { compiler, target: run.target, test_kind, crates });\n+        builder.ensure(CrateLibrustc { compiler, target: run.target, crates });\n     }\n \n     fn run(self, builder: &Builder<'_>) {\n         builder.ensure(Crate {\n             compiler: self.compiler,\n             target: self.target,\n             mode: Mode::Rustc,\n-            test_kind: self.test_kind,\n             crates: self.crates,\n         });\n     }\n }\n \n+/// Given a `cargo test` subcommand, add the appropriate flags and run it.\n+///\n+/// Returns whether the test succeeded.\n+fn run_cargo_test(\n+    cargo: impl Into<Command>,\n+    libtest_args: &[&str],\n+    crates: &[Interned<String>],\n+    primary_crate: &str,\n+    compiler: Compiler,\n+    target: TargetSelection,\n+    builder: &Builder<'_>,\n+) -> bool {\n+    let mut cargo =\n+        prepare_cargo_test(cargo, libtest_args, crates, primary_crate, compiler, target, builder);\n+    let _time = util::timeit(&builder);\n+    add_flags_and_try_run_tests(builder, &mut cargo)\n+}\n+\n+/// Given a `cargo test` subcommand, pass it the appropriate test flags given a `builder`.\n+fn prepare_cargo_test(\n+    cargo: impl Into<Command>,\n+    libtest_args: &[&str],\n+    crates: &[Interned<String>],\n+    primary_crate: &str,\n+    compiler: Compiler,\n+    target: TargetSelection,\n+    builder: &Builder<'_>,\n+) -> Command {\n+    let mut cargo = cargo.into();\n+\n+    // Pass in some standard flags then iterate over the graph we've discovered\n+    // in `cargo metadata` with the maps above and figure out what `-p`\n+    // arguments need to get passed.\n+    if builder.kind == Kind::Test && !builder.fail_fast {\n+        cargo.arg(\"--no-fail-fast\");\n+    }\n+    match builder.doc_tests {\n+        DocTests::Only => {\n+            cargo.arg(\"--doc\");\n+        }\n+        DocTests::No => {\n+            let krate = &builder\n+                .crates\n+                .get(&INTERNER.intern_str(primary_crate))\n+                .unwrap_or_else(|| panic!(\"missing crate {primary_crate}\"));\n+            if krate.has_lib {\n+                cargo.arg(\"--lib\");\n+            }\n+            cargo.args(&[\"--bins\", \"--examples\", \"--tests\", \"--benches\"]);\n+        }\n+        DocTests::Yes => {}\n+    }\n+\n+    for &krate in crates {\n+        cargo.arg(\"-p\").arg(krate);\n+    }\n+\n+    cargo.arg(\"--\").args(&builder.config.cmd.test_args()).args(libtest_args);\n+    if !builder.config.verbose_tests {\n+        cargo.arg(\"--quiet\");\n+    }\n+\n+    // The tests are going to run with the *target* libraries, so we need to\n+    // ensure that those libraries show up in the LD_LIBRARY_PATH equivalent.\n+    //\n+    // Note that to run the compiler we need to run with the *host* libraries,\n+    // but our wrapper scripts arrange for that to be the case anyway.\n+    let mut dylib_path = dylib_path();\n+    dylib_path.insert(0, PathBuf::from(&*builder.sysroot_libdir(compiler, target)));\n+    cargo.env(dylib_path_var(), env::join_paths(&dylib_path).unwrap());\n+\n+    if target.contains(\"emscripten\") {\n+        cargo.env(\n+            format!(\"CARGO_TARGET_{}_RUNNER\", envify(&target.triple)),\n+            builder.config.nodejs.as_ref().expect(\"nodejs not configured\"),\n+        );\n+    } else if target.starts_with(\"wasm32\") {\n+        let node = builder.config.nodejs.as_ref().expect(\"nodejs not configured\");\n+        let runner = format!(\"{} {}/src/etc/wasm32-shim.js\", node.display(), builder.src.display());\n+        cargo.env(format!(\"CARGO_TARGET_{}_RUNNER\", envify(&target.triple)), &runner);\n+    } else if builder.remote_tested(target) {\n+        cargo.env(\n+            format!(\"CARGO_TARGET_{}_RUNNER\", envify(&target.triple)),\n+            format!(\"{} run 0\", builder.tool_exe(Tool::RemoteTestClient).display()),\n+        );\n+    }\n+\n+    cargo\n+}\n+\n #[derive(Debug, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]\n pub struct Crate {\n     pub compiler: Compiler,\n     pub target: TargetSelection,\n     pub mode: Mode,\n-    pub test_kind: TestKind,\n     pub crates: Vec<Interned<String>>,\n }\n \n@@ -2170,14 +2152,13 @@ impl Step for Crate {\n         let builder = run.builder;\n         let host = run.build_triple();\n         let compiler = builder.compiler_for(builder.top_stage, host, host);\n-        let test_kind = builder.kind.into();\n         let crates = run\n             .paths\n             .iter()\n             .map(|p| builder.crate_paths[&p.assert_single_path().path].clone())\n             .collect();\n \n-        builder.ensure(Crate { compiler, target: run.target, mode: Mode::Std, test_kind, crates });\n+        builder.ensure(Crate { compiler, target: run.target, mode: Mode::Std, crates });\n     }\n \n     /// Runs all unit tests plus documentation tests for a given crate defined\n@@ -2192,7 +2173,6 @@ impl Step for Crate {\n         let compiler = self.compiler;\n         let target = self.target;\n         let mode = self.mode;\n-        let test_kind = self.test_kind;\n \n         builder.ensure(compile::Std::new(compiler, target));\n         builder.ensure(RemoteCopyLibs { compiler, target });\n@@ -2204,7 +2184,7 @@ impl Step for Crate {\n         let compiler = builder.compiler_for(compiler.stage, compiler.host, target);\n \n         let mut cargo =\n-            builder.cargo(compiler, mode, SourceType::InTree, target, test_kind.subcommand());\n+            builder.cargo(compiler, mode, SourceType::InTree, target, builder.kind.as_str());\n         match mode {\n             Mode::Std => {\n                 compile::std_cargo(builder, target, compiler.stage, &mut cargo);\n@@ -2215,77 +2195,21 @@ impl Step for Crate {\n             _ => panic!(\"can only test libraries\"),\n         };\n \n-        // Build up the base `cargo test` command.\n-        //\n-        // Pass in some standard flags then iterate over the graph we've discovered\n-        // in `cargo metadata` with the maps above and figure out what `-p`\n-        // arguments need to get passed.\n-        if test_kind.subcommand() == \"test\" && !builder.fail_fast {\n-            cargo.arg(\"--no-fail-fast\");\n-        }\n-        match builder.doc_tests {\n-            DocTests::Only => {\n-                cargo.arg(\"--doc\");\n-            }\n-            DocTests::No => {\n-                cargo.args(&[\"--lib\", \"--bins\", \"--examples\", \"--tests\", \"--benches\"]);\n-            }\n-            DocTests::Yes => {}\n-        }\n-\n-        for krate in &self.crates {\n-            cargo.arg(\"-p\").arg(krate);\n-        }\n-\n-        // The tests are going to run with the *target* libraries, so we need to\n-        // ensure that those libraries show up in the LD_LIBRARY_PATH equivalent.\n-        //\n-        // Note that to run the compiler we need to run with the *host* libraries,\n-        // but our wrapper scripts arrange for that to be the case anyway.\n-        let mut dylib_path = dylib_path();\n-        dylib_path.insert(0, PathBuf::from(&*builder.sysroot_libdir(compiler, target)));\n-        cargo.env(dylib_path_var(), env::join_paths(&dylib_path).unwrap());\n-\n-        cargo.arg(\"--\");\n-        cargo.args(&builder.config.cmd.test_args());\n-\n-        cargo.arg(\"-Z\").arg(\"unstable-options\");\n-        cargo.arg(\"--format\").arg(\"json\");\n-\n-        if target.contains(\"emscripten\") {\n-            cargo.env(\n-                format!(\"CARGO_TARGET_{}_RUNNER\", envify(&target.triple)),\n-                builder.config.nodejs.as_ref().expect(\"nodejs not configured\"),\n-            );\n-        } else if target.starts_with(\"wasm32\") {\n-            let node = builder.config.nodejs.as_ref().expect(\"nodejs not configured\");\n-            let runner =\n-                format!(\"{} {}/src/etc/wasm32-shim.js\", node.display(), builder.src.display());\n-            cargo.env(format!(\"CARGO_TARGET_{}_RUNNER\", envify(&target.triple)), &runner);\n-        } else if builder.remote_tested(target) {\n-            cargo.env(\n-                format!(\"CARGO_TARGET_{}_RUNNER\", envify(&target.triple)),\n-                format!(\"{} run 0\", builder.tool_exe(Tool::RemoteTestClient).display()),\n-            );\n-        }\n-\n         let _guard = builder.msg(\n-            test_kind,\n+            builder.kind,\n             compiler.stage,\n             crate_description(&self.crates),\n             compiler.host,\n             target,\n         );\n-        let _time = util::timeit(&builder);\n-        crate::render_tests::try_run_tests(builder, &mut cargo.into());\n+        run_cargo_test(cargo, &[], &self.crates, &self.crates[0], compiler, target, builder);\n     }\n }\n \n /// Rustdoc is special in various ways, which is why this step is different from `Crate`.\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub struct CrateRustdoc {\n     host: TargetSelection,\n-    test_kind: TestKind,\n }\n \n impl Step for CrateRustdoc {\n@@ -2300,13 +2224,10 @@ impl Step for CrateRustdoc {\n     fn make_run(run: RunConfig<'_>) {\n         let builder = run.builder;\n \n-        let test_kind = builder.kind.into();\n-\n-        builder.ensure(CrateRustdoc { host: run.target, test_kind });\n+        builder.ensure(CrateRustdoc { host: run.target });\n     }\n \n     fn run(self, builder: &Builder<'_>) {\n-        let test_kind = self.test_kind;\n         let target = self.host;\n \n         let compiler = if builder.download_rustc() {\n@@ -2325,29 +2246,11 @@ impl Step for CrateRustdoc {\n             compiler,\n             Mode::ToolRustc,\n             target,\n-            test_kind.subcommand(),\n+            builder.kind.as_str(),\n             \"src/tools/rustdoc\",\n             SourceType::InTree,\n             &[],\n         );\n-        if test_kind.subcommand() == \"test\" && !builder.fail_fast {\n-            cargo.arg(\"--no-fail-fast\");\n-        }\n-        match builder.doc_tests {\n-            DocTests::Only => {\n-                cargo.arg(\"--doc\");\n-            }\n-            DocTests::No => {\n-                cargo.args(&[\"--lib\", \"--bins\", \"--examples\", \"--tests\", \"--benches\"]);\n-            }\n-            DocTests::Yes => {}\n-        }\n-\n-        cargo.arg(\"-p\").arg(\"rustdoc:0.0.0\");\n-\n-        cargo.arg(\"--\");\n-        cargo.args(&builder.config.cmd.test_args());\n-\n         if self.host.contains(\"musl\") {\n             cargo.arg(\"'-Ctarget-feature=-crt-static'\");\n         }\n@@ -2387,22 +2290,22 @@ impl Step for CrateRustdoc {\n         dylib_path.insert(0, PathBuf::from(&*libdir));\n         cargo.env(dylib_path_var(), env::join_paths(&dylib_path).unwrap());\n \n-        if !builder.config.verbose_tests {\n-            cargo.arg(\"--quiet\");\n-        }\n-\n-        let _guard = builder.msg(test_kind, compiler.stage, \"rustdoc\", compiler.host, target);\n-\n-        let _time = util::timeit(&builder);\n-\n-        add_flags_and_try_run_tests(builder, &mut cargo.into());\n+        let _guard = builder.msg(builder.kind, compiler.stage, \"rustdoc\", compiler.host, target);\n+        run_cargo_test(\n+            cargo,\n+            &[],\n+            &[INTERNER.intern_str(\"rustdoc:0.0.0\")],\n+            \"rustdoc\",\n+            compiler,\n+            target,\n+            builder,\n+        );\n     }\n }\n \n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub struct CrateRustdocJsonTypes {\n     host: TargetSelection,\n-    test_kind: TestKind,\n }\n \n impl Step for CrateRustdocJsonTypes {\n@@ -2417,13 +2320,10 @@ impl Step for CrateRustdocJsonTypes {\n     fn make_run(run: RunConfig<'_>) {\n         let builder = run.builder;\n \n-        let test_kind = builder.kind.into();\n-\n-        builder.ensure(CrateRustdocJsonTypes { host: run.target, test_kind });\n+        builder.ensure(CrateRustdocJsonTypes { host: run.target });\n     }\n \n     fn run(self, builder: &Builder<'_>) {\n-        let test_kind = self.test_kind;\n         let target = self.host;\n \n         // Use the previous stage compiler to reuse the artifacts that are\n@@ -2433,34 +2333,35 @@ impl Step for CrateRustdocJsonTypes {\n         let compiler = builder.compiler_for(builder.top_stage, target, target);\n         builder.ensure(compile::Rustc::new(compiler, target));\n \n-        let mut cargo = tool::prepare_tool_cargo(\n+        let cargo = tool::prepare_tool_cargo(\n             builder,\n             compiler,\n             Mode::ToolRustc,\n             target,\n-            test_kind.subcommand(),\n+            builder.kind.as_str(),\n             \"src/rustdoc-json-types\",\n             SourceType::InTree,\n             &[],\n         );\n-        if test_kind.subcommand() == \"test\" && !builder.fail_fast {\n-            cargo.arg(\"--no-fail-fast\");\n-        }\n-\n-        cargo.arg(\"-p\").arg(\"rustdoc-json-types\");\n-\n-        cargo.arg(\"--\");\n-        cargo.args(&builder.config.cmd.test_args());\n \n-        if self.host.contains(\"musl\") {\n-            cargo.arg(\"'-Ctarget-feature=-crt-static'\");\n-        }\n+        // FIXME: this looks very wrong, libtest doesn't accept `-C` arguments and the quotes are fishy.\n+        let libtest_args = if self.host.contains(\"musl\") {\n+            [\"'-Ctarget-feature=-crt-static'\"].as_slice()\n+        } else {\n+            &[]\n+        };\n \n         let _guard =\n-            builder.msg(test_kind, compiler.stage, \"rustdoc-json-types\", compiler.host, target);\n-        let _time = util::timeit(&builder);\n-\n-        add_flags_and_try_run_tests(builder, &mut cargo.into());\n+            builder.msg(builder.kind, compiler.stage, \"rustdoc-json-types\", compiler.host, target);\n+        run_cargo_test(\n+            cargo,\n+            libtest_args,\n+            &[INTERNER.intern_str(\"rustdoc-json-types\")],\n+            \"rustdoc-json-types\",\n+            compiler,\n+            target,\n+            builder,\n+        );\n     }\n }\n \n@@ -2598,38 +2499,25 @@ impl Step for Bootstrap {\n         check_bootstrap.arg(\"bootstrap_test.py\").current_dir(builder.src.join(\"src/bootstrap/\"));\n         try_run(builder, &mut check_bootstrap);\n \n+        let host = builder.config.build;\n+        let compiler = builder.compiler(0, host);\n         let mut cmd = Command::new(&builder.initial_cargo);\n         cmd.arg(\"test\")\n             .current_dir(builder.src.join(\"src/bootstrap\"))\n             .env(\"RUSTFLAGS\", \"-Cdebuginfo=2\")\n             .env(\"CARGO_TARGET_DIR\", builder.out.join(\"bootstrap\"))\n             .env(\"RUSTC_BOOTSTRAP\", \"1\")\n-            .env(\"RUSTDOC\", builder.rustdoc(builder.compiler(0, builder.build.build)))\n+            .env(\"RUSTDOC\", builder.rustdoc(compiler))\n             .env(\"RUSTC\", &builder.initial_rustc);\n         if let Some(flags) = option_env!(\"RUSTFLAGS\") {\n             // Use the same rustc flags for testing as for \"normal\" compilation,\n             // so that Cargo doesn\u2019t recompile the entire dependency graph every time:\n             // https://github.com/rust-lang/rust/issues/49215\n             cmd.env(\"RUSTFLAGS\", flags);\n         }\n-        if !builder.fail_fast {\n-            cmd.arg(\"--no-fail-fast\");\n-        }\n-        match builder.doc_tests {\n-            DocTests::Only => {\n-                cmd.arg(\"--doc\");\n-            }\n-            DocTests::No => {\n-                cmd.args(&[\"--lib\", \"--bins\", \"--examples\", \"--tests\", \"--benches\"]);\n-            }\n-            DocTests::Yes => {}\n-        }\n-\n-        cmd.arg(\"--\").args(&builder.config.cmd.test_args());\n         // rustbuild tests are racy on directory creation so just run them one at a time.\n         // Since there's not many this shouldn't be a problem.\n-        cmd.arg(\"--test-threads=1\");\n-        add_flags_and_try_run_tests(builder, &mut cmd);\n+        run_cargo_test(cmd, &[\"--test-threads=1\"], &[], \"bootstrap\", compiler, host, builder);\n     }\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n@@ -2685,43 +2573,6 @@ impl Step for TierCheck {\n     }\n }\n \n-#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n-pub struct ReplacePlaceholderTest;\n-\n-impl Step for ReplacePlaceholderTest {\n-    type Output = ();\n-    const ONLY_HOSTS: bool = true;\n-    const DEFAULT: bool = true;\n-\n-    /// Ensure the version placeholder replacement tool builds\n-    fn run(self, builder: &Builder<'_>) {\n-        builder.info(\"build check for version replacement placeholder\");\n-\n-        // Test the version placeholder replacement tool itself.\n-        let bootstrap_host = builder.config.build;\n-        let compiler = builder.compiler(0, bootstrap_host);\n-        let cargo = tool::prepare_tool_cargo(\n-            builder,\n-            compiler,\n-            Mode::ToolBootstrap,\n-            bootstrap_host,\n-            \"test\",\n-            \"src/tools/replace-version-placeholder\",\n-            SourceType::InTree,\n-            &[],\n-        );\n-        add_flags_and_try_run_tests(builder, &mut cargo.into());\n-    }\n-\n-    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.path(\"src/tools/replace-version-placeholder\")\n-    }\n-\n-    fn make_run(run: RunConfig<'_>) {\n-        run.builder.ensure(Self);\n-    }\n-}\n-\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub struct LintDocs {\n     pub compiler: Compiler,\n@@ -2779,7 +2630,7 @@ impl Step for RustInstaller {\n             SourceType::InTree,\n             &[],\n         );\n-        try_run(builder, &mut cargo.into());\n+        run_cargo_test(cargo, &[], &[], \"installer\", compiler, bootstrap_host, builder);\n \n         // We currently don't support running the test.sh script outside linux(?) environments.\n         // Eventually this should likely migrate to #[test]s in rust-installer proper rather than a"}, {"sha": "39f6369b4d3f5fe747aa85adc313730f1958f2de", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -141,7 +141,7 @@ pub fn prepare_tool_cargo(\n     mode: Mode,\n     target: TargetSelection,\n     command: &'static str,\n-    path: &'static str,\n+    path: &str,\n     source_type: SourceType,\n     extra_features: &[String],\n ) -> CargoCommand {"}, {"sha": "1531e7fc7b91df3ff5db420f1edd3215a051e452", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 41, "deletions": 18, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -1529,7 +1529,9 @@ fn maybe_expand_private_type_alias<'tcx>(\n     let Res::Def(DefKind::TyAlias, def_id) = path.res else { return None };\n     // Substitute private type aliases\n     let def_id = def_id.as_local()?;\n-    let alias = if !cx.cache.effective_visibilities.is_exported(cx.tcx, def_id.to_def_id()) {\n+    let alias = if !cx.cache.effective_visibilities.is_exported(cx.tcx, def_id.to_def_id())\n+        && !cx.current_type_aliases.contains_key(&def_id.to_def_id())\n+    {\n         &cx.tcx.hir().expect_item(def_id).kind\n     } else {\n         return None;\n@@ -1609,7 +1611,7 @@ fn maybe_expand_private_type_alias<'tcx>(\n         }\n     }\n \n-    Some(cx.enter_alias(substs, |cx| clean_ty(ty, cx)))\n+    Some(cx.enter_alias(substs, def_id.to_def_id(), |cx| clean_ty(ty, cx)))\n }\n \n pub(crate) fn clean_ty<'tcx>(ty: &hir::Ty<'tcx>, cx: &mut DocContext<'tcx>) -> Type {\n@@ -1700,7 +1702,7 @@ fn normalize<'tcx>(\n pub(crate) fn clean_middle_ty<'tcx>(\n     bound_ty: ty::Binder<'tcx, Ty<'tcx>>,\n     cx: &mut DocContext<'tcx>,\n-    def_id: Option<DefId>,\n+    parent_def_id: Option<DefId>,\n ) -> Type {\n     let bound_ty = normalize(cx, bound_ty).unwrap_or(bound_ty);\n     match *bound_ty.skip_binder().kind() {\n@@ -1830,7 +1832,9 @@ pub(crate) fn clean_middle_ty<'tcx>(\n             Tuple(t.iter().map(|t| clean_middle_ty(bound_ty.rebind(t), cx, None)).collect())\n         }\n \n-        ty::Alias(ty::Projection, ref data) => clean_projection(bound_ty.rebind(*data), cx, def_id),\n+        ty::Alias(ty::Projection, ref data) => {\n+            clean_projection(bound_ty.rebind(*data), cx, parent_def_id)\n+        }\n \n         ty::Param(ref p) => {\n             if let Some(bounds) = cx.impl_trait_bounds.remove(&p.index.into()) {\n@@ -1841,15 +1845,30 @@ pub(crate) fn clean_middle_ty<'tcx>(\n         }\n \n         ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs, .. }) => {\n-            // Grab the \"TraitA + TraitB\" from `impl TraitA + TraitB`,\n-            // by looking up the bounds associated with the def_id.\n-            let bounds = cx\n-                .tcx\n-                .explicit_item_bounds(def_id)\n-                .subst_iter_copied(cx.tcx, substs)\n-                .map(|(bound, _)| bound)\n-                .collect::<Vec<_>>();\n-            clean_middle_opaque_bounds(cx, bounds)\n+            // If it's already in the same alias, don't get an infinite loop.\n+            if cx.current_type_aliases.contains_key(&def_id) {\n+                let path =\n+                    external_path(cx, def_id, false, ThinVec::new(), bound_ty.rebind(substs));\n+                Type::Path { path }\n+            } else {\n+                *cx.current_type_aliases.entry(def_id).or_insert(0) += 1;\n+                // Grab the \"TraitA + TraitB\" from `impl TraitA + TraitB`,\n+                // by looking up the bounds associated with the def_id.\n+                let bounds = cx\n+                    .tcx\n+                    .explicit_item_bounds(def_id)\n+                    .subst_iter_copied(cx.tcx, substs)\n+                    .map(|(bound, _)| bound)\n+                    .collect::<Vec<_>>();\n+                let ty = clean_middle_opaque_bounds(cx, bounds);\n+                if let Some(count) = cx.current_type_aliases.get_mut(&def_id) {\n+                    *count -= 1;\n+                    if *count == 0 {\n+                        cx.current_type_aliases.remove(&def_id);\n+                    }\n+                }\n+                ty\n+            }\n         }\n \n         ty::Closure(..) => panic!(\"Closure\"),\n@@ -2229,13 +2248,17 @@ fn clean_maybe_renamed_item<'tcx>(\n                 generics: clean_generics(ty.generics, cx),\n             }),\n             ItemKind::TyAlias(hir_ty, generics) => {\n+                *cx.current_type_aliases.entry(def_id).or_insert(0) += 1;\n                 let rustdoc_ty = clean_ty(hir_ty, cx);\n                 let ty = clean_middle_ty(ty::Binder::dummy(hir_ty_to_ty(cx.tcx, hir_ty)), cx, None);\n-                TypedefItem(Box::new(Typedef {\n-                    type_: rustdoc_ty,\n-                    generics: clean_generics(generics, cx),\n-                    item_type: Some(ty),\n-                }))\n+                let generics = clean_generics(generics, cx);\n+                if let Some(count) = cx.current_type_aliases.get_mut(&def_id) {\n+                    *count -= 1;\n+                    if *count == 0 {\n+                        cx.current_type_aliases.remove(&def_id);\n+                    }\n+                }\n+                TypedefItem(Box::new(Typedef { type_: rustdoc_ty, generics, item_type: Some(ty) }))\n             }\n             ItemKind::Enum(ref def, generics) => EnumItem(Enum {\n                 variants: def.variants.iter().map(|v| clean_variant(v, cx)).collect(),"}, {"sha": "7371b44465bab00b63fe49fc034c20859afaa258", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -11,6 +11,7 @@ use arrayvec::ArrayVec;\n use thin_vec::ThinVec;\n \n use rustc_ast as ast;\n+use rustc_ast_pretty::pprust;\n use rustc_attr::{ConstStability, Deprecation, Stability, StabilityLevel};\n use rustc_const_eval::const_eval::is_unstable_const_fn;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n@@ -711,6 +712,78 @@ impl Item {\n         };\n         Some(tcx.visibility(def_id))\n     }\n+\n+    pub(crate) fn attributes(&self, tcx: TyCtxt<'_>, keep_as_is: bool) -> Vec<String> {\n+        const ALLOWED_ATTRIBUTES: &[Symbol] =\n+            &[sym::export_name, sym::link_section, sym::no_mangle, sym::repr, sym::non_exhaustive];\n+\n+        use rustc_abi::IntegerType;\n+        use rustc_middle::ty::ReprFlags;\n+\n+        let mut attrs: Vec<String> = self\n+            .attrs\n+            .other_attrs\n+            .iter()\n+            .filter_map(|attr| {\n+                if keep_as_is {\n+                    Some(pprust::attribute_to_string(attr))\n+                } else if ALLOWED_ATTRIBUTES.contains(&attr.name_or_empty()) {\n+                    Some(\n+                        pprust::attribute_to_string(attr)\n+                            .replace(\"\\\\\\n\", \"\")\n+                            .replace('\\n', \"\")\n+                            .replace(\"  \", \" \"),\n+                    )\n+                } else {\n+                    None\n+                }\n+            })\n+            .collect();\n+        if let Some(def_id) = self.item_id.as_def_id() &&\n+            !def_id.is_local() &&\n+            // This check is needed because `adt_def` will panic if not a compatible type otherwise...\n+            matches!(self.type_(), ItemType::Struct | ItemType::Enum | ItemType::Union)\n+        {\n+            let repr = tcx.adt_def(def_id).repr();\n+            let mut out = Vec::new();\n+            if repr.flags.contains(ReprFlags::IS_C) {\n+                out.push(\"C\");\n+            }\n+            if repr.flags.contains(ReprFlags::IS_TRANSPARENT) {\n+                out.push(\"transparent\");\n+            }\n+            if repr.flags.contains(ReprFlags::IS_SIMD) {\n+                out.push(\"simd\");\n+            }\n+            let pack_s;\n+            if let Some(pack) = repr.pack {\n+                pack_s = format!(\"packed({})\", pack.bytes());\n+                out.push(&pack_s);\n+            }\n+            let align_s;\n+            if let Some(align) = repr.align {\n+                align_s = format!(\"align({})\", align.bytes());\n+                out.push(&align_s);\n+            }\n+            let int_s;\n+            if let Some(int) = repr.int {\n+                int_s = match int {\n+                    IntegerType::Pointer(is_signed) => {\n+                        format!(\"{}size\", if is_signed { 'i' } else { 'u' })\n+                    }\n+                    IntegerType::Fixed(size, is_signed) => {\n+                        format!(\"{}{}\", if is_signed { 'i' } else { 'u' }, size.size().bytes() * 8)\n+                    }\n+                };\n+                out.push(&int_s);\n+            }\n+            if out.is_empty() {\n+                return Vec::new();\n+            }\n+            attrs.push(format!(\"#[repr({})]\", out.join(\", \")));\n+        }\n+        attrs\n+    }\n }\n \n #[derive(Clone, Debug)]"}, {"sha": "3a0c2ab02975ac018c252f976ea01f7da4ea677f", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -46,6 +46,7 @@ pub(crate) struct DocContext<'tcx> {\n     // for expanding type aliases at the HIR level:\n     /// Table `DefId` of type, lifetime, or const parameter -> substituted type, lifetime, or const\n     pub(crate) substs: DefIdMap<clean::SubstParam>,\n+    pub(crate) current_type_aliases: DefIdMap<usize>,\n     /// Table synthetic type parameter for `impl Trait` in argument position -> bounds\n     pub(crate) impl_trait_bounds: FxHashMap<ImplTraitParam, Vec<clean::GenericBound>>,\n     /// Auto-trait or blanket impls processed so far, as `(self_ty, trait_def_id)`.\n@@ -82,13 +83,25 @@ impl<'tcx> DocContext<'tcx> {\n \n     /// Call the closure with the given parameters set as\n     /// the substitutions for a type alias' RHS.\n-    pub(crate) fn enter_alias<F, R>(&mut self, substs: DefIdMap<clean::SubstParam>, f: F) -> R\n+    pub(crate) fn enter_alias<F, R>(\n+        &mut self,\n+        substs: DefIdMap<clean::SubstParam>,\n+        def_id: DefId,\n+        f: F,\n+    ) -> R\n     where\n         F: FnOnce(&mut Self) -> R,\n     {\n         let old_substs = mem::replace(&mut self.substs, substs);\n+        *self.current_type_aliases.entry(def_id).or_insert(0) += 1;\n         let r = f(self);\n         self.substs = old_substs;\n+        if let Some(count) = self.current_type_aliases.get_mut(&def_id) {\n+            *count -= 1;\n+            if *count == 0 {\n+                self.current_type_aliases.remove(&def_id);\n+            }\n+        }\n         r\n     }\n \n@@ -327,6 +340,7 @@ pub(crate) fn run_global_ctxt(\n         external_traits: Default::default(),\n         active_extern_traits: Default::default(),\n         substs: Default::default(),\n+        current_type_aliases: Default::default(),\n         impl_trait_bounds: Default::default(),\n         generated_synthetics: Default::default(),\n         auto_traits,"}, {"sha": "73bf27c9d344921673ccadef5a88e79a110c96b1", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 8, "deletions": 30, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -48,7 +48,6 @@ use std::str;\n use std::string::ToString;\n \n use askama::Template;\n-use rustc_ast_pretty::pprust;\n use rustc_attr::{ConstStability, Deprecation, StabilityLevel};\n use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n@@ -849,10 +848,10 @@ fn assoc_method(\n     let (indent, indent_str, end_newline) = if parent == ItemType::Trait {\n         header_len += 4;\n         let indent_str = \"    \";\n-        write!(w, \"{}\", render_attributes_in_pre(meth, indent_str));\n+        write!(w, \"{}\", render_attributes_in_pre(meth, indent_str, tcx));\n         (4, indent_str, Ending::NoNewline)\n     } else {\n-        render_attributes_in_code(w, meth);\n+        render_attributes_in_code(w, meth, tcx);\n         (0, \"\", Ending::Newline)\n     };\n     w.reserve(header_len + \"<a href=\\\"\\\" class=\\\"fn\\\">{\".len() + \"</a>\".len());\n@@ -1021,36 +1020,15 @@ fn render_assoc_item(\n     }\n }\n \n-const ALLOWED_ATTRIBUTES: &[Symbol] =\n-    &[sym::export_name, sym::link_section, sym::no_mangle, sym::repr, sym::non_exhaustive];\n-\n-fn attributes(it: &clean::Item) -> Vec<String> {\n-    it.attrs\n-        .other_attrs\n-        .iter()\n-        .filter_map(|attr| {\n-            if ALLOWED_ATTRIBUTES.contains(&attr.name_or_empty()) {\n-                Some(\n-                    pprust::attribute_to_string(attr)\n-                        .replace(\"\\\\\\n\", \"\")\n-                        .replace('\\n', \"\")\n-                        .replace(\"  \", \" \"),\n-                )\n-            } else {\n-                None\n-            }\n-        })\n-        .collect()\n-}\n-\n // When an attribute is rendered inside a `<pre>` tag, it is formatted using\n // a whitespace prefix and newline.\n-fn render_attributes_in_pre<'a>(\n+fn render_attributes_in_pre<'a, 'b: 'a>(\n     it: &'a clean::Item,\n     prefix: &'a str,\n-) -> impl fmt::Display + Captures<'a> {\n+    tcx: TyCtxt<'b>,\n+) -> impl fmt::Display + Captures<'a> + Captures<'b> {\n     crate::html::format::display_fn(move |f| {\n-        for a in attributes(it) {\n+        for a in it.attributes(tcx, false) {\n             writeln!(f, \"{}{}\", prefix, a)?;\n         }\n         Ok(())\n@@ -1059,8 +1037,8 @@ fn render_attributes_in_pre<'a>(\n \n // When an attribute is rendered inside a <code> tag, it is formatted using\n // a div to produce a newline after it.\n-fn render_attributes_in_code(w: &mut Buffer, it: &clean::Item) {\n-    for a in attributes(it) {\n+fn render_attributes_in_code(w: &mut Buffer, it: &clean::Item, tcx: TyCtxt<'_>) {\n+    for a in it.attributes(tcx, false) {\n         write!(w, \"<div class=\\\"code-attribute\\\">{}</div>\", a);\n     }\n }"}, {"sha": "4cc81e860f09a76605f707b3a6c60b0e04d44320", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -548,7 +548,7 @@ fn item_function(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, f: &cle\n             w,\n             \"{attrs}{vis}{constness}{asyncness}{unsafety}{abi}fn \\\n                 {name}{generics}{decl}{notable_traits}{where_clause}\",\n-            attrs = render_attributes_in_pre(it, \"\"),\n+            attrs = render_attributes_in_pre(it, \"\", tcx),\n             vis = visibility,\n             constness = constness,\n             asyncness = asyncness,\n@@ -589,7 +589,7 @@ fn item_trait(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &clean:\n             it.name.unwrap(),\n             t.generics.print(cx),\n             bounds,\n-            attrs = render_attributes_in_pre(it, \"\"),\n+            attrs = render_attributes_in_pre(it, \"\", tcx),\n         );\n \n         if !t.generics.where_predicates.is_empty() {\n@@ -1063,7 +1063,7 @@ fn item_trait_alias(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &\n             t.generics.print(cx),\n             print_where_clause(&t.generics, cx, 0, Ending::Newline),\n             bounds(&t.bounds, true, cx),\n-            attrs = render_attributes_in_pre(it, \"\"),\n+            attrs = render_attributes_in_pre(it, \"\", cx.tcx()),\n         );\n     });\n \n@@ -1085,7 +1085,7 @@ fn item_opaque_ty(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &cl\n             t.generics.print(cx),\n             where_clause = print_where_clause(&t.generics, cx, 0, Ending::Newline),\n             bounds = bounds(&t.bounds, false, cx),\n-            attrs = render_attributes_in_pre(it, \"\"),\n+            attrs = render_attributes_in_pre(it, \"\", cx.tcx()),\n         );\n     });\n \n@@ -1109,7 +1109,7 @@ fn item_typedef(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &clea\n                 t.generics.print(cx),\n                 where_clause = print_where_clause(&t.generics, cx, 0, Ending::Newline),\n                 type_ = t.type_.print(cx),\n-                attrs = render_attributes_in_pre(it, \"\"),\n+                attrs = render_attributes_in_pre(it, \"\", cx.tcx()),\n             );\n         });\n     }\n@@ -1168,7 +1168,8 @@ fn item_union(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, s: &clean:\n             &'b self,\n         ) -> impl fmt::Display + Captures<'a> + 'b + Captures<'cx> {\n             display_fn(move |f| {\n-                let v = render_attributes_in_pre(self.it, \"\");\n+                let tcx = self.cx.borrow().tcx();\n+                let v = render_attributes_in_pre(self.it, \"\", tcx);\n                 write!(f, \"{v}\")\n             })\n         }\n@@ -1244,13 +1245,13 @@ fn item_enum(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, e: &clean::\n     let tcx = cx.tcx();\n     let count_variants = e.variants().count();\n     wrap_item(w, |mut w| {\n+        render_attributes_in_code(w, it, tcx);\n         write!(\n             w,\n-            \"{attrs}{}enum {}{}\",\n+            \"{}enum {}{}\",\n             visibility_print_with_space(it.visibility(tcx), it.item_id, cx),\n             it.name.unwrap(),\n             e.generics.print(cx),\n-            attrs = render_attributes_in_pre(it, \"\"),\n         );\n         if !print_where_clause_and_check(w, &e.generics, cx) {\n             // If there wasn't a `where` clause, we add a whitespace.\n@@ -1445,7 +1446,7 @@ fn item_primitive(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item) {\n fn item_constant(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, c: &clean::Constant) {\n     wrap_item(w, |w| {\n         let tcx = cx.tcx();\n-        render_attributes_in_code(w, it);\n+        render_attributes_in_code(w, it, tcx);\n \n         write!(\n             w,\n@@ -1492,7 +1493,7 @@ fn item_constant(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, c: &cle\n \n fn item_struct(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, s: &clean::Struct) {\n     wrap_item(w, |w| {\n-        render_attributes_in_code(w, it);\n+        render_attributes_in_code(w, it, cx.tcx());\n         render_struct(w, it, Some(&s.generics), s.ctor_kind, &s.fields, \"\", true, cx);\n     });\n \n@@ -1542,7 +1543,7 @@ fn item_struct(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, s: &clean\n \n fn item_static(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, s: &clean::Static) {\n     wrap_item(w, |w| {\n-        render_attributes_in_code(w, it);\n+        render_attributes_in_code(w, it, cx.tcx());\n         write!(\n             w,\n             \"{vis}static {mutability}{name}: {typ}\",\n@@ -1558,7 +1559,7 @@ fn item_static(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, s: &clean\n fn item_foreign_type(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item) {\n     wrap_item(w, |w| {\n         w.write_str(\"extern {\\n\");\n-        render_attributes_in_code(w, it);\n+        render_attributes_in_code(w, it, cx.tcx());\n         write!(\n             w,\n             \"    {}type {};\\n}}\","}, {"sha": "62aab46fa7e8b1a97d05fd3c8225affefc936073", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -41,12 +41,7 @@ impl JsonRenderer<'_> {\n             })\n             .collect();\n         let docs = item.attrs.collapsed_doc_value();\n-        let attrs = item\n-            .attrs\n-            .other_attrs\n-            .iter()\n-            .map(rustc_ast_pretty::pprust::attribute_to_string)\n-            .collect();\n+        let attrs = item.attributes(self.tcx, true);\n         let span = item.span(self.tcx);\n         let visibility = item.visibility(self.tcx);\n         let clean::Item { name, item_id, .. } = item;"}, {"sha": "66080f64b9c21b86387665f4f20346b2ab31d618", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -34,6 +34,7 @@ extern crate tracing;\n // Dependencies listed in Cargo.toml do not need `extern crate`.\n \n extern crate pulldown_cmark;\n+extern crate rustc_abi;\n extern crate rustc_ast;\n extern crate rustc_ast_pretty;\n extern crate rustc_attr;"}, {"sha": "e2cdc48b583c8abcf35c65ab170091f85a9e47ef", "filename": "src/tools/clippy/clippy_lints/src/suspicious_operation_groupings.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -577,7 +577,7 @@ fn ident_difference_expr_with_base_location(\n         | (AssignOp(_, _, _), AssignOp(_, _, _))\n         | (Assign(_, _, _), Assign(_, _, _))\n         | (TryBlock(_), TryBlock(_))\n-        | (Await(_), Await(_))\n+        | (Await(_, _), Await(_, _))\n         | (Async(_, _), Async(_, _))\n         | (Block(_, _), Block(_, _))\n         | (Closure(_), Closure(_))"}, {"sha": "8cc01f1ef9740c68eb93140ab660773cfd47d43f", "filename": "src/tools/clippy/clippy_utils/src/ast_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -143,7 +143,7 @@ pub fn eq_expr(l: &Expr, r: &Expr) -> bool {\n         (Paren(l), _) => eq_expr(l, r),\n         (_, Paren(r)) => eq_expr(l, r),\n         (Err, Err) => true,\n-        (Try(l), Try(r)) | (Await(l), Await(r)) => eq_expr(l, r),\n+        (Try(l), Try(r)) | (Await(l, _), Await(r, _)) => eq_expr(l, r),\n         (Array(l), Array(r)) => over(l, r, |l, r| eq_expr(l, r)),\n         (Tup(l), Tup(r)) => over(l, r, |l, r| eq_expr(l, r)),\n         (Repeat(le, ls), Repeat(re, rs)) => eq_expr(le, re) && eq_expr(&ls.value, &rs.value),"}, {"sha": "5c6348962a5ebc6ba56034d415a0fda063f7d97a", "filename": "src/tools/clippy/tests/ui/future_not_send.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffuture_not_send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffuture_not_send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffuture_not_send.stderr?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -5,22 +5,22 @@ LL | async fn private_future(rc: Rc<[u8]>, cell: &Cell<usize>) -> bool {\n    |                                                              ^^^^ future returned by `private_future` is not `Send`\n    |\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/future_not_send.rs:8:19\n+  --> $DIR/future_not_send.rs:8:20\n    |\n LL | async fn private_future(rc: Rc<[u8]>, cell: &Cell<usize>) -> bool {\n    |                         -- has type `std::rc::Rc<[u8]>` which is not `Send`\n LL |     async { true }.await\n-   |                   ^^^^^^ await occurs here, with `rc` maybe used later\n+   |                    ^^^^^ await occurs here, with `rc` maybe used later\n LL | }\n    | - `rc` is later dropped here\n    = note: `std::rc::Rc<[u8]>` doesn't implement `std::marker::Send`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/future_not_send.rs:8:19\n+  --> $DIR/future_not_send.rs:8:20\n    |\n LL | async fn private_future(rc: Rc<[u8]>, cell: &Cell<usize>) -> bool {\n    |                                       ---- has type `&std::cell::Cell<usize>` which is not `Send`\n LL |     async { true }.await\n-   |                   ^^^^^^ await occurs here, with `cell` maybe used later\n+   |                    ^^^^^ await occurs here, with `cell` maybe used later\n LL | }\n    | - `cell` is later dropped here\n    = note: `std::cell::Cell<usize>` doesn't implement `std::marker::Sync`\n@@ -33,12 +33,12 @@ LL | pub async fn public_future(rc: Rc<[u8]>) {\n    |                                          ^ future returned by `public_future` is not `Send`\n    |\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/future_not_send.rs:12:19\n+  --> $DIR/future_not_send.rs:12:20\n    |\n LL | pub async fn public_future(rc: Rc<[u8]>) {\n    |                            -- has type `std::rc::Rc<[u8]>` which is not `Send`\n LL |     async { true }.await;\n-   |                   ^^^^^^ await occurs here, with `rc` maybe used later\n+   |                    ^^^^^ await occurs here, with `rc` maybe used later\n LL | }\n    | - `rc` is later dropped here\n    = note: `std::rc::Rc<[u8]>` doesn't implement `std::marker::Send`\n@@ -82,12 +82,12 @@ LL |     async fn private_future(&self) -> usize {\n    |                                       ^^^^^ future returned by `private_future` is not `Send`\n    |\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/future_not_send.rs:35:23\n+  --> $DIR/future_not_send.rs:35:24\n    |\n LL |     async fn private_future(&self) -> usize {\n    |                             ----- has type `&Dummy` which is not `Send`\n LL |         async { true }.await;\n-   |                       ^^^^^^ await occurs here, with `&self` maybe used later\n+   |                        ^^^^^ await occurs here, with `&self` maybe used later\n LL |         self.rc.len()\n LL |     }\n    |     - `&self` is later dropped here\n@@ -100,12 +100,12 @@ LL |     pub async fn public_future(&self) {\n    |                                       ^ future returned by `public_future` is not `Send`\n    |\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/future_not_send.rs:40:30\n+  --> $DIR/future_not_send.rs:40:31\n    |\n LL |     pub async fn public_future(&self) {\n    |                                ----- has type `&Dummy` which is not `Send`\n LL |         self.private_future().await;\n-   |                              ^^^^^^ await occurs here, with `&self` maybe used later\n+   |                               ^^^^^ await occurs here, with `&self` maybe used later\n LL |     }\n    |     - `&self` is later dropped here\n    = note: `std::rc::Rc<[u8]>` doesn't implement `std::marker::Sync`\n@@ -117,12 +117,12 @@ LL | async fn generic_future<T>(t: T) -> T\n    |                                     ^ future returned by `generic_future` is not `Send`\n    |\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/future_not_send.rs:54:19\n+  --> $DIR/future_not_send.rs:54:20\n    |\n LL |     let rt = &t;\n    |         -- has type `&T` which is not `Send`\n LL |     async { true }.await;\n-   |                   ^^^^^^ await occurs here, with `rt` maybe used later\n+   |                    ^^^^^ await occurs here, with `rt` maybe used later\n LL |     t\n LL | }\n    | - `rt` is later dropped here"}, {"sha": "21344208130ea0723e0a4a207ce1366879f4e0f0", "filename": "src/tools/miri/tests/fail/dangling_pointers/null_pointer_write_zst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fnull_pointer_write_zst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fnull_pointer_write_zst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fnull_pointer_write_zst.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -7,5 +7,5 @@ fn main() {\n     // Also not assigning directly as that's array initialization, not assignment.\n     let zst_val = [1u8; 0];\n     unsafe { std::ptr::null_mut::<[u8; 0]>().write(zst_val) };\n-    //~^ERROR: memory access failed: null pointer is a dangling pointer\n+    //~^ERROR: dereferencing pointer failed: null pointer is a dangling pointer\n }"}, {"sha": "a4e0ebe38f6a978b3d11a33366487e38c22951a8", "filename": "src/tools/miri/tests/fail/dangling_pointers/null_pointer_write_zst.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fnull_pointer_write_zst.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fnull_pointer_write_zst.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fnull_pointer_write_zst.stderr?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -1,8 +1,8 @@\n-error: Undefined Behavior: memory access failed: null pointer is a dangling pointer (it has no provenance)\n+error: Undefined Behavior: dereferencing pointer failed: null pointer is a dangling pointer (it has no provenance)\n   --> $DIR/null_pointer_write_zst.rs:LL:CC\n    |\n LL |     unsafe { std::ptr::null_mut::<[u8; 0]>().write(zst_val) };\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ memory access failed: null pointer is a dangling pointer (it has no provenance)\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereferencing pointer failed: null pointer is a dangling pointer (it has no provenance)\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "0afce7cf65962d01917319b6bc88e3a3aca7f9e5", "filename": "src/tools/rustfmt/src/chains.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/src%2Ftools%2Frustfmt%2Fsrc%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/src%2Ftools%2Frustfmt%2Fsrc%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fchains.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -232,7 +232,7 @@ impl ChainItemKind {\n                 let span = mk_sp(nested.span.hi(), field.span.hi());\n                 (kind, span)\n             }\n-            ast::ExprKind::Await(ref nested) => {\n+            ast::ExprKind::Await(ref nested, _) => {\n                 let span = mk_sp(nested.span.hi(), expr.span.hi());\n                 (ChainItemKind::Await, span)\n             }\n@@ -459,7 +459,7 @@ impl Chain {\n             ast::ExprKind::MethodCall(ref call) => Some(Self::convert_try(&call.receiver, context)),\n             ast::ExprKind::Field(ref subexpr, _)\n             | ast::ExprKind::Try(ref subexpr)\n-            | ast::ExprKind::Await(ref subexpr) => Some(Self::convert_try(subexpr, context)),\n+            | ast::ExprKind::Await(ref subexpr, _) => Some(Self::convert_try(subexpr, context)),\n             _ => None,\n         }\n     }"}, {"sha": "5dc628adb0c6f8e644f5116f431f44e636802c24", "filename": "src/tools/rustfmt/src/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/src%2Ftools%2Frustfmt%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/src%2Ftools%2Frustfmt%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fexpr.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -218,7 +218,7 @@ pub(crate) fn format_expr(\n         ast::ExprKind::Try(..)\n         | ast::ExprKind::Field(..)\n         | ast::ExprKind::MethodCall(..)\n-        | ast::ExprKind::Await(_) => rewrite_chain(expr, context, shape),\n+        | ast::ExprKind::Await(_, _) => rewrite_chain(expr, context, shape),\n         ast::ExprKind::MacCall(ref mac) => {\n             rewrite_macro(mac, None, context, shape, MacroPosition::Expression).or_else(|| {\n                 wrap_str(\n@@ -1889,7 +1889,7 @@ impl<'ast> RhsAssignKind<'ast> {\n                     ast::ExprKind::Try(..)\n                         | ast::ExprKind::Field(..)\n                         | ast::ExprKind::MethodCall(..)\n-                        | ast::ExprKind::Await(_)\n+                        | ast::ExprKind::Await(_, _)\n                 )\n             }\n             _ => false,"}, {"sha": "81e56b5490d642183e21dda39eae1252b84f44d8", "filename": "tests/codegen/mem-replace-big-type.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Fcodegen%2Fmem-replace-big-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Fcodegen%2Fmem-replace-big-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fmem-replace-big-type.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -11,7 +11,9 @@\n #[repr(C, align(8))]\n pub struct Big([u64; 7]);\n pub fn replace_big(dst: &mut Big, src: Big) -> Big {\n-    // Before the `read_via_copy` intrinsic, this emitted six `memcpy`s.\n+    // Back in 1.68, this emitted six `memcpy`s.\n+    // `read_via_copy` in 1.69 got that down to three.\n+    // `write_via_move` has it down to just the two essential ones.\n     std::mem::replace(dst, src)\n }\n \n@@ -20,17 +22,13 @@ pub fn replace_big(dst: &mut Big, src: Big) -> Big {\n \n // CHECK-NOT: call void @llvm.memcpy\n \n-// For a large type, we expect exactly three `memcpy`s\n+// For a large type, we expect exactly two `memcpy`s\n // CHECK-LABEL: define internal void @{{.+}}mem{{.+}}replace{{.+}}sret(%Big)\n     // CHECK-NOT: alloca\n-    // CHECK: alloca %Big\n-    // CHECK-NOT: alloca\n-    // CHECK-NOT: call void @llvm.memcpy\n-    // CHECK: call void @llvm.memcpy.{{.+}}({{i8\\*|ptr}} align 8 %{{.*}}, {{i8\\*|ptr}} align 8 %{{.*}}, i{{.*}} 56, i1 false)\n     // CHECK-NOT: call void @llvm.memcpy\n-    // CHECK: call void @llvm.memcpy.{{.+}}({{i8\\*|ptr}} align 8 %{{.*}}, {{i8\\*|ptr}} align 8 %{{.*}}, i{{.*}} 56, i1 false)\n+    // CHECK: call void @llvm.memcpy.{{.+}}({{i8\\*|ptr}} align 8 %0, {{i8\\*|ptr}} align 8 %dest, i{{.*}} 56, i1 false)\n     // CHECK-NOT: call void @llvm.memcpy\n-    // CHECK: call void @llvm.memcpy.{{.+}}({{i8\\*|ptr}} align 8 %{{.*}}, {{i8\\*|ptr}} align 8 %{{.*}}, i{{.*}} 56, i1 false)\n+    // CHECK: call void @llvm.memcpy.{{.+}}({{i8\\*|ptr}} align 8 %dest, {{i8\\*|ptr}} align 8 %src, i{{.*}} 56, i1 false)\n     // CHECK-NOT: call void @llvm.memcpy\n \n // CHECK-NOT: call void @llvm.memcpy"}, {"sha": "83babab4f847b150dc4d0e8301b13c7298e49e3a", "filename": "tests/codegen/mem-replace-direct-memcpy.rs", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/d20fa00ee640d3df38e2e431d732ac9ff4efb0a9/tests%2Fcodegen%2Fmem-replace-direct-memcpy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d20fa00ee640d3df38e2e431d732ac9ff4efb0a9/tests%2Fcodegen%2Fmem-replace-direct-memcpy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fmem-replace-direct-memcpy.rs?ref=d20fa00ee640d3df38e2e431d732ac9ff4efb0a9", "patch": "@@ -1,33 +0,0 @@\n-// This test ensures that `mem::replace::<T>` only ever calls `@llvm.memcpy`\n-// with `size_of::<T>()` as the size, and never goes through any wrapper that\n-// may e.g. multiply `size_of::<T>()` with a variable \"count\" (which is only\n-// known to be `1` after inlining).\n-\n-// compile-flags: -C no-prepopulate-passes -Zinline-mir=no\n-// ignore-debug: the debug assertions get in the way\n-\n-#![crate_type = \"lib\"]\n-\n-pub fn replace_byte(dst: &mut u8, src: u8) -> u8 {\n-    std::mem::replace(dst, src)\n-}\n-\n-// NOTE(eddyb) the `CHECK-NOT`s ensure that the only calls of `@llvm.memcpy` in\n-// the entire output, are the direct calls we want, from `ptr::replace`.\n-\n-// CHECK-NOT: call void @llvm.memcpy\n-\n-// For a small type, we expect one each of `load`/`store`/`memcpy` instead\n-// CHECK-LABEL: define internal noundef i8 @{{.+}}mem{{.+}}replace\n-    // CHECK-NOT: alloca\n-    // CHECK: alloca i8\n-    // CHECK-NOT: alloca\n-    // CHECK-NOT: call void @llvm.memcpy\n-    // CHECK: load i8\n-    // CHECK-NOT: call void @llvm.memcpy\n-    // CHECK: store i8\n-    // CHECK-NOT: call void @llvm.memcpy\n-    // CHECK: call void @llvm.memcpy.{{.+}}({{i8\\*|ptr}} align 1 %{{.*}}, {{i8\\*|ptr}} align 1 %{{.*}}, i{{.*}} 1, i1 false)\n-    // CHECK-NOT: call void @llvm.memcpy\n-\n-// CHECK-NOT: call void @llvm.memcpy"}, {"sha": "4253ef1366604a48c72cf2b6ca9d09d2f6b8f6c2", "filename": "tests/codegen/mem-replace-simple-type.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Fcodegen%2Fmem-replace-simple-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Fcodegen%2Fmem-replace-simple-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fmem-replace-simple-type.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -0,0 +1,34 @@\n+// compile-flags: -O -C no-prepopulate-passes\n+// min-llvm-version: 15.0 (for opaque pointers)\n+// only-x86_64 (to not worry about usize differing)\n+// ignore-debug (the debug assertions get in the way)\n+\n+#![crate_type = \"lib\"]\n+\n+#[no_mangle]\n+// CHECK-LABEL: @replace_usize(\n+pub fn replace_usize(r: &mut usize, v: usize) -> usize {\n+    // CHECK-NOT: alloca\n+    // CHECK: %[[R:.+]] = load i64, ptr %r\n+    // CHECK: store i64 %v, ptr %r\n+    // CHECK: ret i64 %[[R]]\n+    std::mem::replace(r, v)\n+}\n+\n+#[no_mangle]\n+// CHECK-LABEL: @replace_ref_str(\n+pub fn replace_ref_str<'a>(r: &mut &'a str, v: &'a str) -> &'a str {\n+    // CHECK-NOT: alloca\n+    // CHECK: %[[A:.+]] = load ptr\n+    // CHECK: %[[B:.+]] = load i64\n+    // CHECK-NOT: store\n+    // CHECK-NOT: load\n+    // CHECK: store ptr\n+    // CHECK: store i64\n+    // CHECK-NOT: load\n+    // CHECK-NOT: store\n+    // CHECK: %[[P1:.+]] = insertvalue { ptr, i64 } poison, ptr %[[A]], 0\n+    // CHECK: %[[P2:.+]] = insertvalue { ptr, i64 } %[[P1]], i64 %[[B]], 1\n+    // CHECK: ret { ptr, i64 } %[[P2]]\n+    std::mem::replace(r, v)\n+}"}, {"sha": "a9d1477b9fe5d851f5cb066c50f329062dd5d129", "filename": "tests/mir-opt/building/async_await.b-{closure#0}.generator_resume.0.mir", "status": "modified", "additions": 89, "deletions": 89, "changes": 178, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Fmir-opt%2Fbuilding%2Fasync_await.b-%7Bclosure%230%7D.generator_resume.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Fmir-opt%2Fbuilding%2Fasync_await.b-%7Bclosure%230%7D.generator_resume.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fasync_await.b-%7Bclosure%230%7D.generator_resume.0.mir?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -4,15 +4,15 @@\n         _0: GeneratorSavedTy {\n             ty: impl std::future::Future<Output = ()>,\n             source_info: SourceInfo {\n-                span: $DIR/async_await.rs:15:8: 15:14 (#8),\n+                span: $DIR/async_await.rs:15:9: 15:14 (#8),\n                 scope: scope[0],\n             },\n             ignore_for_traits: false,\n         },\n         _1: GeneratorSavedTy {\n             ty: impl std::future::Future<Output = ()>,\n             source_info: SourceInfo {\n-                span: $DIR/async_await.rs:16:8: 16:14 (#10),\n+                span: $DIR/async_await.rs:16:9: 16:14 (#10),\n                 scope: scope[0],\n             },\n             ignore_for_traits: false,\n@@ -35,42 +35,42 @@ fn b::{closure#0}(_1: Pin<&mut [async fn body@$DIR/async_await.rs:14:18: 17:2]>,\n     debug _task_context => _38;          // in scope 0 at $DIR/async_await.rs:+0:18: +3:2\n     let mut _0: std::task::Poll<()>;     // return place in scope 0 at $DIR/async_await.rs:+0:18: +3:2\n     let _3: ();                          // in scope 0 at $DIR/async_await.rs:+1:5: +1:14\n-    let mut _4: impl std::future::Future<Output = ()>; // in scope 0 at $DIR/async_await.rs:+1:8: +1:14\n+    let mut _4: impl std::future::Future<Output = ()>; // in scope 0 at $DIR/async_await.rs:+1:9: +1:14\n     let mut _5: impl std::future::Future<Output = ()>; // in scope 0 at $DIR/async_await.rs:+1:5: +1:8\n-    let mut _6: impl std::future::Future<Output = ()>; // in scope 0 at $DIR/async_await.rs:+1:8: +1:14\n+    let mut _6: impl std::future::Future<Output = ()>; // in scope 0 at $DIR/async_await.rs:+1:9: +1:14\n     let mut _7: ();                      // in scope 0 at $DIR/async_await.rs:+0:18: +3:2\n-    let _8: ();                          // in scope 0 at $DIR/async_await.rs:+1:8: +1:14\n-    let mut _9: std::task::Poll<()>;     // in scope 0 at $DIR/async_await.rs:+1:8: +1:14\n-    let mut _10: std::pin::Pin<&mut impl std::future::Future<Output = ()>>; // in scope 0 at $DIR/async_await.rs:+1:8: +1:14\n-    let mut _11: &mut impl std::future::Future<Output = ()>; // in scope 0 at $DIR/async_await.rs:+1:8: +1:14\n-    let mut _12: &mut impl std::future::Future<Output = ()>; // in scope 0 at $DIR/async_await.rs:+1:8: +1:14\n+    let _8: ();                          // in scope 0 at $DIR/async_await.rs:+1:9: +1:14\n+    let mut _9: std::task::Poll<()>;     // in scope 0 at $DIR/async_await.rs:+1:9: +1:14\n+    let mut _10: std::pin::Pin<&mut impl std::future::Future<Output = ()>>; // in scope 0 at $DIR/async_await.rs:+1:9: +1:14\n+    let mut _11: &mut impl std::future::Future<Output = ()>; // in scope 0 at $DIR/async_await.rs:+1:9: +1:14\n+    let mut _12: &mut impl std::future::Future<Output = ()>; // in scope 0 at $DIR/async_await.rs:+1:9: +1:14\n     let mut _13: &mut std::task::Context<'_>; // in scope 0 at $DIR/async_await.rs:+1:5: +1:14\n     let mut _14: &mut std::task::Context<'_>; // in scope 0 at $DIR/async_await.rs:+1:5: +1:14\n-    let mut _15: &mut std::task::Context<'_>; // in scope 0 at $DIR/async_await.rs:+1:8: +1:14\n-    let mut _16: isize;                  // in scope 0 at $DIR/async_await.rs:+1:8: +1:14\n+    let mut _15: &mut std::task::Context<'_>; // in scope 0 at $DIR/async_await.rs:+1:9: +1:14\n+    let mut _16: isize;                  // in scope 0 at $DIR/async_await.rs:+1:9: +1:14\n     let mut _18: !;                      // in scope 0 at $DIR/async_await.rs:+1:5: +1:14\n-    let mut _19: &mut std::task::Context<'_>; // in scope 0 at $DIR/async_await.rs:+1:8: +1:14\n-    let mut _20: ();                     // in scope 0 at $DIR/async_await.rs:+1:8: +1:14\n-    let mut _21: impl std::future::Future<Output = ()>; // in scope 0 at $DIR/async_await.rs:+2:8: +2:14\n+    let mut _19: &mut std::task::Context<'_>; // in scope 0 at $DIR/async_await.rs:+1:9: +1:14\n+    let mut _20: ();                     // in scope 0 at $DIR/async_await.rs:+1:9: +1:14\n+    let mut _21: impl std::future::Future<Output = ()>; // in scope 0 at $DIR/async_await.rs:+2:9: +2:14\n     let mut _22: impl std::future::Future<Output = ()>; // in scope 0 at $DIR/async_await.rs:+2:5: +2:8\n-    let mut _23: impl std::future::Future<Output = ()>; // in scope 0 at $DIR/async_await.rs:+2:8: +2:14\n-    let _24: ();                         // in scope 0 at $DIR/async_await.rs:+2:8: +2:14\n-    let mut _25: std::task::Poll<()>;    // in scope 0 at $DIR/async_await.rs:+2:8: +2:14\n-    let mut _26: std::pin::Pin<&mut impl std::future::Future<Output = ()>>; // in scope 0 at $DIR/async_await.rs:+2:8: +2:14\n-    let mut _27: &mut impl std::future::Future<Output = ()>; // in scope 0 at $DIR/async_await.rs:+2:8: +2:14\n-    let mut _28: &mut impl std::future::Future<Output = ()>; // in scope 0 at $DIR/async_await.rs:+2:8: +2:14\n+    let mut _23: impl std::future::Future<Output = ()>; // in scope 0 at $DIR/async_await.rs:+2:9: +2:14\n+    let _24: ();                         // in scope 0 at $DIR/async_await.rs:+2:9: +2:14\n+    let mut _25: std::task::Poll<()>;    // in scope 0 at $DIR/async_await.rs:+2:9: +2:14\n+    let mut _26: std::pin::Pin<&mut impl std::future::Future<Output = ()>>; // in scope 0 at $DIR/async_await.rs:+2:9: +2:14\n+    let mut _27: &mut impl std::future::Future<Output = ()>; // in scope 0 at $DIR/async_await.rs:+2:9: +2:14\n+    let mut _28: &mut impl std::future::Future<Output = ()>; // in scope 0 at $DIR/async_await.rs:+2:9: +2:14\n     let mut _29: &mut std::task::Context<'_>; // in scope 0 at $DIR/async_await.rs:+2:5: +2:14\n     let mut _30: &mut std::task::Context<'_>; // in scope 0 at $DIR/async_await.rs:+2:5: +2:14\n-    let mut _31: &mut std::task::Context<'_>; // in scope 0 at $DIR/async_await.rs:+2:8: +2:14\n-    let mut _32: isize;                  // in scope 0 at $DIR/async_await.rs:+2:8: +2:14\n+    let mut _31: &mut std::task::Context<'_>; // in scope 0 at $DIR/async_await.rs:+2:9: +2:14\n+    let mut _32: isize;                  // in scope 0 at $DIR/async_await.rs:+2:9: +2:14\n     let mut _34: !;                      // in scope 0 at $DIR/async_await.rs:+2:5: +2:14\n-    let mut _35: &mut std::task::Context<'_>; // in scope 0 at $DIR/async_await.rs:+2:8: +2:14\n-    let mut _36: ();                     // in scope 0 at $DIR/async_await.rs:+2:8: +2:14\n+    let mut _35: &mut std::task::Context<'_>; // in scope 0 at $DIR/async_await.rs:+2:9: +2:14\n+    let mut _36: ();                     // in scope 0 at $DIR/async_await.rs:+2:9: +2:14\n     let mut _37: ();                     // in scope 0 at $DIR/async_await.rs:+0:18: +3:2\n     let mut _38: &mut std::task::Context<'_>; // in scope 0 at $DIR/async_await.rs:+0:18: +3:2\n     let mut _39: u32;                    // in scope 0 at $DIR/async_await.rs:+0:18: +3:2\n     scope 1 {\n-        debug __awaitee => (((*(_1.0: &mut [async fn body@$DIR/async_await.rs:14:18: 17:2])) as variant#3).0: impl std::future::Future<Output = ()>); // in scope 1 at $DIR/async_await.rs:+1:8: +1:14\n+        debug __awaitee => (((*(_1.0: &mut [async fn body@$DIR/async_await.rs:14:18: 17:2])) as variant#3).0: impl std::future::Future<Output = ()>); // in scope 1 at $DIR/async_await.rs:+1:9: +1:14\n         let _17: ();                     // in scope 1 at $DIR/async_await.rs:+1:5: +1:14\n         scope 2 {\n         }\n@@ -79,7 +79,7 @@ fn b::{closure#0}(_1: Pin<&mut [async fn body@$DIR/async_await.rs:14:18: 17:2]>,\n         }\n     }\n     scope 4 {\n-        debug __awaitee => (((*(_1.0: &mut [async fn body@$DIR/async_await.rs:14:18: 17:2])) as variant#4).0: impl std::future::Future<Output = ()>); // in scope 4 at $DIR/async_await.rs:+2:8: +2:14\n+        debug __awaitee => (((*(_1.0: &mut [async fn body@$DIR/async_await.rs:14:18: 17:2])) as variant#4).0: impl std::future::Future<Output = ()>); // in scope 4 at $DIR/async_await.rs:+2:9: +2:14\n         let _33: ();                     // in scope 4 at $DIR/async_await.rs:+2:5: +2:14\n         scope 5 {\n         }\n@@ -96,7 +96,7 @@ fn b::{closure#0}(_1: Pin<&mut [async fn body@$DIR/async_await.rs:14:18: 17:2]>,\n     bb1: {\n         _38 = move _2;                   // scope 0 at $DIR/async_await.rs:+0:18: +3:2\n         StorageLive(_3);                 // scope 0 at $DIR/async_await.rs:+1:5: +1:14\n-        StorageLive(_4);                 // scope 0 at $DIR/async_await.rs:+1:8: +1:14\n+        StorageLive(_4);                 // scope 0 at $DIR/async_await.rs:+1:9: +1:14\n         StorageLive(_5);                 // scope 0 at $DIR/async_await.rs:+1:5: +1:8\n         _5 = a() -> [return: bb2, unwind unreachable]; // scope 0 at $DIR/async_await.rs:+1:5: +1:8\n                                          // mir::Constant\n@@ -105,75 +105,75 @@ fn b::{closure#0}(_1: Pin<&mut [async fn body@$DIR/async_await.rs:14:18: 17:2]>,\n     }\n \n     bb2: {\n-        _4 = <impl Future<Output = ()> as IntoFuture>::into_future(move _5) -> [return: bb3, unwind unreachable]; // scope 0 at $DIR/async_await.rs:+1:8: +1:14\n+        _4 = <impl Future<Output = ()> as IntoFuture>::into_future(move _5) -> [return: bb3, unwind unreachable]; // scope 0 at $DIR/async_await.rs:+1:9: +1:14\n                                          // mir::Constant\n-                                         // + span: $DIR/async_await.rs:15:8: 15:14\n+                                         // + span: $DIR/async_await.rs:15:9: 15:14\n                                          // + literal: Const { ty: fn(impl Future<Output = ()>) -> <impl Future<Output = ()> as IntoFuture>::IntoFuture {<impl Future<Output = ()> as IntoFuture>::into_future}, val: Value(<ZST>) }\n     }\n \n     bb3: {\n         StorageDead(_5);                 // scope 0 at $DIR/async_await.rs:+1:13: +1:14\n-        nop;                             // scope 0 at $DIR/async_await.rs:+1:8: +1:14\n-        (((*(_1.0: &mut [async fn body@$DIR/async_await.rs:14:18: 17:2])) as variant#3).0: impl std::future::Future<Output = ()>) = move _4; // scope 0 at $DIR/async_await.rs:+1:8: +1:14\n-        goto -> bb4;                     // scope 1 at $DIR/async_await.rs:+1:8: +1:14\n+        nop;                             // scope 0 at $DIR/async_await.rs:+1:9: +1:14\n+        (((*(_1.0: &mut [async fn body@$DIR/async_await.rs:14:18: 17:2])) as variant#3).0: impl std::future::Future<Output = ()>) = move _4; // scope 0 at $DIR/async_await.rs:+1:9: +1:14\n+        goto -> bb4;                     // scope 1 at $DIR/async_await.rs:+1:9: +1:14\n     }\n \n     bb4: {\n-        StorageLive(_8);                 // scope 1 at $DIR/async_await.rs:+1:8: +1:14\n-        StorageLive(_9);                 // scope 1 at $DIR/async_await.rs:+1:8: +1:14\n-        StorageLive(_10);                // scope 2 at $DIR/async_await.rs:+1:8: +1:14\n-        StorageLive(_11);                // scope 2 at $DIR/async_await.rs:+1:8: +1:14\n-        StorageLive(_12);                // scope 2 at $DIR/async_await.rs:+1:8: +1:14\n-        _12 = &mut (((*(_1.0: &mut [async fn body@$DIR/async_await.rs:14:18: 17:2])) as variant#3).0: impl std::future::Future<Output = ()>); // scope 2 at $DIR/async_await.rs:+1:8: +1:14\n-        _11 = &mut (*_12);               // scope 2 at $DIR/async_await.rs:+1:8: +1:14\n-        _10 = Pin::<&mut impl Future<Output = ()>>::new_unchecked(move _11) -> [return: bb5, unwind unreachable]; // scope 2 at $DIR/async_await.rs:+1:8: +1:14\n+        StorageLive(_8);                 // scope 1 at $DIR/async_await.rs:+1:9: +1:14\n+        StorageLive(_9);                 // scope 1 at $DIR/async_await.rs:+1:9: +1:14\n+        StorageLive(_10);                // scope 2 at $DIR/async_await.rs:+1:9: +1:14\n+        StorageLive(_11);                // scope 2 at $DIR/async_await.rs:+1:9: +1:14\n+        StorageLive(_12);                // scope 2 at $DIR/async_await.rs:+1:9: +1:14\n+        _12 = &mut (((*(_1.0: &mut [async fn body@$DIR/async_await.rs:14:18: 17:2])) as variant#3).0: impl std::future::Future<Output = ()>); // scope 2 at $DIR/async_await.rs:+1:9: +1:14\n+        _11 = &mut (*_12);               // scope 2 at $DIR/async_await.rs:+1:9: +1:14\n+        _10 = Pin::<&mut impl Future<Output = ()>>::new_unchecked(move _11) -> [return: bb5, unwind unreachable]; // scope 2 at $DIR/async_await.rs:+1:9: +1:14\n                                          // mir::Constant\n-                                         // + span: $DIR/async_await.rs:15:8: 15:14\n+                                         // + span: $DIR/async_await.rs:15:9: 15:14\n                                          // + literal: Const { ty: unsafe fn(&mut impl Future<Output = ()>) -> Pin<&mut impl Future<Output = ()>> {Pin::<&mut impl Future<Output = ()>>::new_unchecked}, val: Value(<ZST>) }\n     }\n \n     bb5: {\n         StorageDead(_11);                // scope 2 at $DIR/async_await.rs:+1:13: +1:14\n         StorageLive(_13);                // scope 2 at $DIR/async_await.rs:+1:5: +1:14\n         StorageLive(_14);                // scope 2 at $DIR/async_await.rs:+1:5: +1:14\n-        StorageLive(_15);                // scope 2 at $DIR/async_await.rs:+1:8: +1:14\n-        _15 = _38;                       // scope 2 at $DIR/async_await.rs:+1:8: +1:14\n+        StorageLive(_15);                // scope 2 at $DIR/async_await.rs:+1:9: +1:14\n+        _15 = _38;                       // scope 2 at $DIR/async_await.rs:+1:9: +1:14\n         _14 = move _15;                  // scope 2 at $DIR/async_await.rs:+1:5: +1:14\n         goto -> bb6;                     // scope 2 at $DIR/async_await.rs:+1:5: +1:14\n     }\n \n     bb6: {\n         _13 = &mut (*_14);               // scope 2 at $DIR/async_await.rs:+1:5: +1:14\n         StorageDead(_15);                // scope 2 at $DIR/async_await.rs:+1:13: +1:14\n-        _9 = <impl Future<Output = ()> as Future>::poll(move _10, move _13) -> [return: bb7, unwind unreachable]; // scope 2 at $DIR/async_await.rs:+1:8: +1:14\n+        _9 = <impl Future<Output = ()> as Future>::poll(move _10, move _13) -> [return: bb7, unwind unreachable]; // scope 2 at $DIR/async_await.rs:+1:9: +1:14\n                                          // mir::Constant\n-                                         // + span: $DIR/async_await.rs:15:8: 15:14\n+                                         // + span: $DIR/async_await.rs:15:9: 15:14\n                                          // + literal: Const { ty: for<'a, 'b, 'c> fn(Pin<&'a mut impl Future<Output = ()>>, &'b mut Context<'c>) -> Poll<<impl Future<Output = ()> as Future>::Output> {<impl Future<Output = ()> as Future>::poll}, val: Value(<ZST>) }\n     }\n \n     bb7: {\n         StorageDead(_13);                // scope 2 at $DIR/async_await.rs:+1:13: +1:14\n         StorageDead(_10);                // scope 2 at $DIR/async_await.rs:+1:13: +1:14\n-        _16 = discriminant(_9);          // scope 1 at $DIR/async_await.rs:+1:8: +1:14\n-        switchInt(move _16) -> [0: bb10, 1: bb8, otherwise: bb9]; // scope 1 at $DIR/async_await.rs:+1:8: +1:14\n+        _16 = discriminant(_9);          // scope 1 at $DIR/async_await.rs:+1:9: +1:14\n+        switchInt(move _16) -> [0: bb10, 1: bb8, otherwise: bb9]; // scope 1 at $DIR/async_await.rs:+1:9: +1:14\n     }\n \n     bb8: {\n-        _8 = const ();                   // scope 1 at $DIR/async_await.rs:+1:8: +1:14\n+        _8 = const ();                   // scope 1 at $DIR/async_await.rs:+1:9: +1:14\n         StorageDead(_14);                // scope 1 at $DIR/async_await.rs:+1:13: +1:14\n         StorageDead(_12);                // scope 1 at $DIR/async_await.rs:+1:13: +1:14\n         StorageDead(_9);                 // scope 1 at $DIR/async_await.rs:+1:13: +1:14\n         StorageDead(_8);                 // scope 1 at $DIR/async_await.rs:+1:13: +1:14\n-        StorageLive(_19);                // scope 1 at $DIR/async_await.rs:+1:8: +1:14\n-        StorageLive(_20);                // scope 1 at $DIR/async_await.rs:+1:8: +1:14\n-        _20 = ();                        // scope 1 at $DIR/async_await.rs:+1:8: +1:14\n-        _0 = Poll::<()>::Pending;        // scope 1 at $DIR/async_await.rs:+1:8: +1:14\n-        discriminant((*(_1.0: &mut [async fn body@$DIR/async_await.rs:14:18: 17:2]))) = 3; // scope 1 at $DIR/async_await.rs:+1:8: +1:14\n-        return;                          // scope 1 at $DIR/async_await.rs:+1:8: +1:14\n+        StorageLive(_19);                // scope 1 at $DIR/async_await.rs:+1:9: +1:14\n+        StorageLive(_20);                // scope 1 at $DIR/async_await.rs:+1:9: +1:14\n+        _20 = ();                        // scope 1 at $DIR/async_await.rs:+1:9: +1:14\n+        _0 = Poll::<()>::Pending;        // scope 1 at $DIR/async_await.rs:+1:9: +1:14\n+        discriminant((*(_1.0: &mut [async fn body@$DIR/async_await.rs:14:18: 17:2]))) = 3; // scope 1 at $DIR/async_await.rs:+1:9: +1:14\n+        return;                          // scope 1 at $DIR/async_await.rs:+1:9: +1:14\n     }\n \n     bb9: {\n-        unreachable;                     // scope 1 at $DIR/async_await.rs:+1:8: +1:14\n+        unreachable;                     // scope 1 at $DIR/async_await.rs:+1:9: +1:14\n     }\n \n     bb10: {\n@@ -190,10 +190,10 @@ fn b::{closure#0}(_1: Pin<&mut [async fn body@$DIR/async_await.rs:14:18: 17:2]>,\n \n     bb11: {\n         StorageDead(_20);                // scope 1 at $DIR/async_await.rs:+1:13: +1:14\n-        _38 = move _19;                  // scope 1 at $DIR/async_await.rs:+1:8: +1:14\n+        _38 = move _19;                  // scope 1 at $DIR/async_await.rs:+1:9: +1:14\n         StorageDead(_19);                // scope 1 at $DIR/async_await.rs:+1:13: +1:14\n-        _7 = const ();                   // scope 1 at $DIR/async_await.rs:+1:8: +1:14\n-        goto -> bb4;                     // scope 1 at $DIR/async_await.rs:+1:8: +1:14\n+        _7 = const ();                   // scope 1 at $DIR/async_await.rs:+1:9: +1:14\n+        goto -> bb4;                     // scope 1 at $DIR/async_await.rs:+1:9: +1:14\n     }\n \n     bb12: {\n@@ -204,7 +204,7 @@ fn b::{closure#0}(_1: Pin<&mut [async fn body@$DIR/async_await.rs:14:18: 17:2]>,\n     bb13: {\n         StorageDead(_4);                 // scope 0 at $DIR/async_await.rs:+1:14: +1:15\n         StorageDead(_3);                 // scope 0 at $DIR/async_await.rs:+1:14: +1:15\n-        StorageLive(_21);                // scope 0 at $DIR/async_await.rs:+2:8: +2:14\n+        StorageLive(_21);                // scope 0 at $DIR/async_await.rs:+2:9: +2:14\n         StorageLive(_22);                // scope 0 at $DIR/async_await.rs:+2:5: +2:8\n         _22 = a() -> [return: bb14, unwind unreachable]; // scope 0 at $DIR/async_await.rs:+2:5: +2:8\n                                          // mir::Constant\n@@ -213,71 +213,71 @@ fn b::{closure#0}(_1: Pin<&mut [async fn body@$DIR/async_await.rs:14:18: 17:2]>,\n     }\n \n     bb14: {\n-        _21 = <impl Future<Output = ()> as IntoFuture>::into_future(move _22) -> [return: bb15, unwind unreachable]; // scope 0 at $DIR/async_await.rs:+2:8: +2:14\n+        _21 = <impl Future<Output = ()> as IntoFuture>::into_future(move _22) -> [return: bb15, unwind unreachable]; // scope 0 at $DIR/async_await.rs:+2:9: +2:14\n                                          // mir::Constant\n-                                         // + span: $DIR/async_await.rs:16:8: 16:14\n+                                         // + span: $DIR/async_await.rs:16:9: 16:14\n                                          // + literal: Const { ty: fn(impl Future<Output = ()>) -> <impl Future<Output = ()> as IntoFuture>::IntoFuture {<impl Future<Output = ()> as IntoFuture>::into_future}, val: Value(<ZST>) }\n     }\n \n     bb15: {\n         StorageDead(_22);                // scope 0 at $DIR/async_await.rs:+2:13: +2:14\n-        nop;                             // scope 0 at $DIR/async_await.rs:+2:8: +2:14\n-        (((*(_1.0: &mut [async fn body@$DIR/async_await.rs:14:18: 17:2])) as variant#4).0: impl std::future::Future<Output = ()>) = move _21; // scope 0 at $DIR/async_await.rs:+2:8: +2:14\n-        goto -> bb16;                    // scope 4 at $DIR/async_await.rs:+2:8: +2:14\n+        nop;                             // scope 0 at $DIR/async_await.rs:+2:9: +2:14\n+        (((*(_1.0: &mut [async fn body@$DIR/async_await.rs:14:18: 17:2])) as variant#4).0: impl std::future::Future<Output = ()>) = move _21; // scope 0 at $DIR/async_await.rs:+2:9: +2:14\n+        goto -> bb16;                    // scope 4 at $DIR/async_await.rs:+2:9: +2:14\n     }\n \n     bb16: {\n-        StorageLive(_24);                // scope 4 at $DIR/async_await.rs:+2:8: +2:14\n-        StorageLive(_25);                // scope 4 at $DIR/async_await.rs:+2:8: +2:14\n-        StorageLive(_26);                // scope 5 at $DIR/async_await.rs:+2:8: +2:14\n-        StorageLive(_27);                // scope 5 at $DIR/async_await.rs:+2:8: +2:14\n-        StorageLive(_28);                // scope 5 at $DIR/async_await.rs:+2:8: +2:14\n-        _28 = &mut (((*(_1.0: &mut [async fn body@$DIR/async_await.rs:14:18: 17:2])) as variant#4).0: impl std::future::Future<Output = ()>); // scope 5 at $DIR/async_await.rs:+2:8: +2:14\n-        _27 = &mut (*_28);               // scope 5 at $DIR/async_await.rs:+2:8: +2:14\n-        _26 = Pin::<&mut impl Future<Output = ()>>::new_unchecked(move _27) -> [return: bb17, unwind unreachable]; // scope 5 at $DIR/async_await.rs:+2:8: +2:14\n+        StorageLive(_24);                // scope 4 at $DIR/async_await.rs:+2:9: +2:14\n+        StorageLive(_25);                // scope 4 at $DIR/async_await.rs:+2:9: +2:14\n+        StorageLive(_26);                // scope 5 at $DIR/async_await.rs:+2:9: +2:14\n+        StorageLive(_27);                // scope 5 at $DIR/async_await.rs:+2:9: +2:14\n+        StorageLive(_28);                // scope 5 at $DIR/async_await.rs:+2:9: +2:14\n+        _28 = &mut (((*(_1.0: &mut [async fn body@$DIR/async_await.rs:14:18: 17:2])) as variant#4).0: impl std::future::Future<Output = ()>); // scope 5 at $DIR/async_await.rs:+2:9: +2:14\n+        _27 = &mut (*_28);               // scope 5 at $DIR/async_await.rs:+2:9: +2:14\n+        _26 = Pin::<&mut impl Future<Output = ()>>::new_unchecked(move _27) -> [return: bb17, unwind unreachable]; // scope 5 at $DIR/async_await.rs:+2:9: +2:14\n                                          // mir::Constant\n-                                         // + span: $DIR/async_await.rs:16:8: 16:14\n+                                         // + span: $DIR/async_await.rs:16:9: 16:14\n                                          // + literal: Const { ty: unsafe fn(&mut impl Future<Output = ()>) -> Pin<&mut impl Future<Output = ()>> {Pin::<&mut impl Future<Output = ()>>::new_unchecked}, val: Value(<ZST>) }\n     }\n \n     bb17: {\n         StorageDead(_27);                // scope 5 at $DIR/async_await.rs:+2:13: +2:14\n         StorageLive(_29);                // scope 5 at $DIR/async_await.rs:+2:5: +2:14\n         StorageLive(_30);                // scope 5 at $DIR/async_await.rs:+2:5: +2:14\n-        StorageLive(_31);                // scope 5 at $DIR/async_await.rs:+2:8: +2:14\n-        _31 = _38;                       // scope 5 at $DIR/async_await.rs:+2:8: +2:14\n+        StorageLive(_31);                // scope 5 at $DIR/async_await.rs:+2:9: +2:14\n+        _31 = _38;                       // scope 5 at $DIR/async_await.rs:+2:9: +2:14\n         _30 = move _31;                  // scope 5 at $DIR/async_await.rs:+2:5: +2:14\n         goto -> bb18;                    // scope 5 at $DIR/async_await.rs:+2:5: +2:14\n     }\n \n     bb18: {\n         _29 = &mut (*_30);               // scope 5 at $DIR/async_await.rs:+2:5: +2:14\n         StorageDead(_31);                // scope 5 at $DIR/async_await.rs:+2:13: +2:14\n-        _25 = <impl Future<Output = ()> as Future>::poll(move _26, move _29) -> [return: bb19, unwind unreachable]; // scope 5 at $DIR/async_await.rs:+2:8: +2:14\n+        _25 = <impl Future<Output = ()> as Future>::poll(move _26, move _29) -> [return: bb19, unwind unreachable]; // scope 5 at $DIR/async_await.rs:+2:9: +2:14\n                                          // mir::Constant\n-                                         // + span: $DIR/async_await.rs:16:8: 16:14\n+                                         // + span: $DIR/async_await.rs:16:9: 16:14\n                                          // + literal: Const { ty: for<'a, 'b, 'c> fn(Pin<&'a mut impl Future<Output = ()>>, &'b mut Context<'c>) -> Poll<<impl Future<Output = ()> as Future>::Output> {<impl Future<Output = ()> as Future>::poll}, val: Value(<ZST>) }\n     }\n \n     bb19: {\n         StorageDead(_29);                // scope 5 at $DIR/async_await.rs:+2:13: +2:14\n         StorageDead(_26);                // scope 5 at $DIR/async_await.rs:+2:13: +2:14\n-        _32 = discriminant(_25);         // scope 4 at $DIR/async_await.rs:+2:8: +2:14\n-        switchInt(move _32) -> [0: bb21, 1: bb20, otherwise: bb9]; // scope 4 at $DIR/async_await.rs:+2:8: +2:14\n+        _32 = discriminant(_25);         // scope 4 at $DIR/async_await.rs:+2:9: +2:14\n+        switchInt(move _32) -> [0: bb21, 1: bb20, otherwise: bb9]; // scope 4 at $DIR/async_await.rs:+2:9: +2:14\n     }\n \n     bb20: {\n-        _24 = const ();                  // scope 4 at $DIR/async_await.rs:+2:8: +2:14\n+        _24 = const ();                  // scope 4 at $DIR/async_await.rs:+2:9: +2:14\n         StorageDead(_30);                // scope 4 at $DIR/async_await.rs:+2:13: +2:14\n         StorageDead(_28);                // scope 4 at $DIR/async_await.rs:+2:13: +2:14\n         StorageDead(_25);                // scope 4 at $DIR/async_await.rs:+2:13: +2:14\n         StorageDead(_24);                // scope 4 at $DIR/async_await.rs:+2:13: +2:14\n-        StorageLive(_35);                // scope 4 at $DIR/async_await.rs:+2:8: +2:14\n-        StorageLive(_36);                // scope 4 at $DIR/async_await.rs:+2:8: +2:14\n-        _36 = ();                        // scope 4 at $DIR/async_await.rs:+2:8: +2:14\n-        _0 = Poll::<()>::Pending;        // scope 4 at $DIR/async_await.rs:+2:8: +2:14\n-        discriminant((*(_1.0: &mut [async fn body@$DIR/async_await.rs:14:18: 17:2]))) = 4; // scope 4 at $DIR/async_await.rs:+2:8: +2:14\n-        return;                          // scope 4 at $DIR/async_await.rs:+2:8: +2:14\n+        StorageLive(_35);                // scope 4 at $DIR/async_await.rs:+2:9: +2:14\n+        StorageLive(_36);                // scope 4 at $DIR/async_await.rs:+2:9: +2:14\n+        _36 = ();                        // scope 4 at $DIR/async_await.rs:+2:9: +2:14\n+        _0 = Poll::<()>::Pending;        // scope 4 at $DIR/async_await.rs:+2:9: +2:14\n+        discriminant((*(_1.0: &mut [async fn body@$DIR/async_await.rs:14:18: 17:2]))) = 4; // scope 4 at $DIR/async_await.rs:+2:9: +2:14\n+        return;                          // scope 4 at $DIR/async_await.rs:+2:9: +2:14\n     }\n \n     bb21: {\n@@ -294,10 +294,10 @@ fn b::{closure#0}(_1: Pin<&mut [async fn body@$DIR/async_await.rs:14:18: 17:2]>,\n \n     bb22: {\n         StorageDead(_36);                // scope 4 at $DIR/async_await.rs:+2:13: +2:14\n-        _38 = move _35;                  // scope 4 at $DIR/async_await.rs:+2:8: +2:14\n+        _38 = move _35;                  // scope 4 at $DIR/async_await.rs:+2:9: +2:14\n         StorageDead(_35);                // scope 4 at $DIR/async_await.rs:+2:13: +2:14\n-        _7 = const ();                   // scope 4 at $DIR/async_await.rs:+2:8: +2:14\n-        goto -> bb16;                    // scope 4 at $DIR/async_await.rs:+2:8: +2:14\n+        _7 = const ();                   // scope 4 at $DIR/async_await.rs:+2:9: +2:14\n+        goto -> bb16;                    // scope 4 at $DIR/async_await.rs:+2:9: +2:14\n     }\n \n     bb23: {"}, {"sha": "7bd30975a738c0e05cf5087b19f6c0f509a5c06e", "filename": "tests/mir-opt/const_prop/mult_by_zero.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Fmir-opt%2Fconst_prop%2Fmult_by_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Fmir-opt%2Fconst_prop%2Fmult_by_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fmult_by_zero.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -1,5 +1,4 @@\n-// unit-test\n-// compile-flags: -O -Zmir-opt-level=4\n+// unit-test: ConstProp\n \n // EMIT_MIR mult_by_zero.test.ConstProp.diff\n fn test(x : i32) -> i32 {"}, {"sha": "629c8e60148fdbd8fdf465cedaa593b51e1643b3", "filename": "tests/mir-opt/const_prop/mult_by_zero.test.ConstProp.diff", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Fmir-opt%2Fconst_prop%2Fmult_by_zero.test.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Fmir-opt%2Fconst_prop%2Fmult_by_zero.test.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fmult_by_zero.test.ConstProp.diff?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -7,8 +7,11 @@\n       let mut _2: i32;                     // in scope 0 at $DIR/mult_by_zero.rs:+1:3: +1:4\n   \n       bb0: {\n--         _0 = Mul(_1, const 0_i32);       // scope 0 at $DIR/mult_by_zero.rs:+1:3: +1:8\n+          StorageLive(_2);                 // scope 0 at $DIR/mult_by_zero.rs:+1:3: +1:4\n+          _2 = _1;                         // scope 0 at $DIR/mult_by_zero.rs:+1:3: +1:4\n+-         _0 = Mul(move _2, const 0_i32);  // scope 0 at $DIR/mult_by_zero.rs:+1:3: +1:8\n +         _0 = const 0_i32;                // scope 0 at $DIR/mult_by_zero.rs:+1:3: +1:8\n+          StorageDead(_2);                 // scope 0 at $DIR/mult_by_zero.rs:+1:7: +1:8\n           return;                          // scope 0 at $DIR/mult_by_zero.rs:+2:2: +2:2\n       }\n   }"}, {"sha": "bd010e7b16080be502478b7be1c308ff6fa3f14d", "filename": "tests/mir-opt/const_prop/mutable_variable.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable.main.ConstProp.diff?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -19,6 +19,7 @@\n           StorageLive(_2);                 // scope 1 at $DIR/mutable_variable.rs:+3:9: +3:10\n -         _2 = _1;                         // scope 1 at $DIR/mutable_variable.rs:+3:13: +3:14\n +         _2 = const 99_i32;               // scope 1 at $DIR/mutable_variable.rs:+3:13: +3:14\n+          _0 = const ();                   // scope 0 at $DIR/mutable_variable.rs:+0:11: +4:2\n           StorageDead(_2);                 // scope 1 at $DIR/mutable_variable.rs:+4:1: +4:2\n           StorageDead(_1);                 // scope 0 at $DIR/mutable_variable.rs:+4:1: +4:2\n           return;                          // scope 0 at $DIR/mutable_variable.rs:+4:2: +4:2"}, {"sha": "95987ef7fa9fa848809d84b86d1b42cafce8f785", "filename": "tests/mir-opt/const_prop/mutable_variable.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -1,5 +1,4 @@\n-// unit-test\n-// compile-flags: -O\n+// unit-test: ConstProp\n \n // EMIT_MIR mutable_variable.main.ConstProp.diff\n fn main() {"}, {"sha": "539f6dd94b926e917d1b0b1bdc8a25c421b40ea4", "filename": "tests/mir-opt/const_prop/mutable_variable_aggregate.main.ConstProp.diff", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate.main.ConstProp.diff?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -3,27 +3,26 @@\n   \n   fn main() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/mutable_variable_aggregate.rs:+0:11: +0:11\n-      let mut _3: i32;                     // in scope 0 at $DIR/mutable_variable_aggregate.rs:+1:9: +1:14\n-      let mut _4: i32;                     // in scope 0 at $DIR/mutable_variable_aggregate.rs:+1:9: +1:14\n+      let mut _1: (i32, i32);              // in scope 0 at $DIR/mutable_variable_aggregate.rs:+1:9: +1:14\n       scope 1 {\n-          debug x => (i32, i32){ .0 => _3, .1 => _4, }; // in scope 1 at $DIR/mutable_variable_aggregate.rs:+1:9: +1:14\n-          let _1: i32;                     // in scope 1 at $DIR/mutable_variable_aggregate.rs:+3:9: +3:10\n-          let _2: i32;                     // in scope 1 at $DIR/mutable_variable_aggregate.rs:+3:9: +3:10\n+          debug x => _1;                   // in scope 1 at $DIR/mutable_variable_aggregate.rs:+1:9: +1:14\n+          let _2: (i32, i32);              // in scope 1 at $DIR/mutable_variable_aggregate.rs:+3:9: +3:10\n           scope 2 {\n-              debug y => (i32, i32){ .0 => _3, .1 => _2, }; // in scope 2 at $DIR/mutable_variable_aggregate.rs:+3:9: +3:10\n+              debug y => _2;               // in scope 2 at $DIR/mutable_variable_aggregate.rs:+3:9: +3:10\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_4);                 // scope 0 at $DIR/mutable_variable_aggregate.rs:+1:9: +1:14\n-          _3 = const 42_i32;               // scope 0 at $DIR/mutable_variable_aggregate.rs:+1:17: +1:25\n-          _4 = const 43_i32;               // scope 0 at $DIR/mutable_variable_aggregate.rs:+1:17: +1:25\n-          _4 = const 99_i32;               // scope 1 at $DIR/mutable_variable_aggregate.rs:+2:5: +2:13\n+          StorageLive(_1);                 // scope 0 at $DIR/mutable_variable_aggregate.rs:+1:9: +1:14\n+-         _1 = (const 42_i32, const 43_i32); // scope 0 at $DIR/mutable_variable_aggregate.rs:+1:17: +1:25\n++         _1 = const (42_i32, 43_i32);     // scope 0 at $DIR/mutable_variable_aggregate.rs:+1:17: +1:25\n+          (_1.1: i32) = const 99_i32;      // scope 1 at $DIR/mutable_variable_aggregate.rs:+2:5: +2:13\n           StorageLive(_2);                 // scope 1 at $DIR/mutable_variable_aggregate.rs:+3:9: +3:10\n--         _2 = _4;                         // scope 1 at $DIR/mutable_variable_aggregate.rs:+3:13: +3:14\n-+         _2 = const 99_i32;               // scope 1 at $DIR/mutable_variable_aggregate.rs:+3:13: +3:14\n+-         _2 = _1;                         // scope 1 at $DIR/mutable_variable_aggregate.rs:+3:13: +3:14\n++         _2 = const (42_i32, 99_i32);     // scope 1 at $DIR/mutable_variable_aggregate.rs:+3:13: +3:14\n+          _0 = const ();                   // scope 0 at $DIR/mutable_variable_aggregate.rs:+0:11: +4:2\n           StorageDead(_2);                 // scope 1 at $DIR/mutable_variable_aggregate.rs:+4:1: +4:2\n-          StorageDead(_4);                 // scope 0 at $DIR/mutable_variable_aggregate.rs:+4:1: +4:2\n+          StorageDead(_1);                 // scope 0 at $DIR/mutable_variable_aggregate.rs:+4:1: +4:2\n           return;                          // scope 0 at $DIR/mutable_variable_aggregate.rs:+4:2: +4:2\n       }\n   }"}, {"sha": "a145c0354380c773032a03caf62737afed2818d2", "filename": "tests/mir-opt/const_prop/mutable_variable_aggregate.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -1,5 +1,4 @@\n-// unit-test\n-// compile-flags: -O\n+// unit-test: ConstProp\n \n // EMIT_MIR mutable_variable_aggregate.main.ConstProp.diff\n fn main() {"}, {"sha": "bec641ecfae896caed442a7b7f178a7d6bd77f96", "filename": "tests/mir-opt/const_prop/mutable_variable_aggregate_mut_ref.main.ConstProp.diff", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_mut_ref.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_mut_ref.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_mut_ref.main.ConstProp.diff?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -9,10 +9,9 @@\n           let _2: &mut (i32, i32);         // in scope 1 at $DIR/mutable_variable_aggregate_mut_ref.rs:+2:9: +2:10\n           scope 2 {\n               debug z => _2;               // in scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:+2:9: +2:10\n-              let _3: i32;                 // in scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:+4:9: +4:10\n-              let _4: i32;                 // in scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:+4:9: +4:10\n+              let _3: (i32, i32);          // in scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:+4:9: +4:10\n               scope 3 {\n-                  debug y => (i32, i32){ .0 => _3, .1 => _4, }; // in scope 3 at $DIR/mutable_variable_aggregate_mut_ref.rs:+4:9: +4:10\n+                  debug y => _3;           // in scope 3 at $DIR/mutable_variable_aggregate_mut_ref.rs:+4:9: +4:10\n               }\n           }\n       }\n@@ -24,11 +23,9 @@\n           _2 = &mut _1;                    // scope 1 at $DIR/mutable_variable_aggregate_mut_ref.rs:+2:13: +2:19\n           ((*_2).1: i32) = const 99_i32;   // scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:+3:5: +3:13\n           StorageLive(_3);                 // scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:+4:9: +4:10\n-          StorageLive(_4);                 // scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:+4:9: +4:10\n-          _3 = (_1.0: i32);                // scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:+4:13: +4:14\n-          _4 = (_1.1: i32);                // scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:+4:13: +4:14\n+          _3 = _1;                         // scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:+4:13: +4:14\n+          _0 = const ();                   // scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:+0:11: +5:2\n           StorageDead(_3);                 // scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:+5:1: +5:2\n-          StorageDead(_4);                 // scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:+5:1: +5:2\n           StorageDead(_2);                 // scope 1 at $DIR/mutable_variable_aggregate_mut_ref.rs:+5:1: +5:2\n           StorageDead(_1);                 // scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:+5:1: +5:2\n           return;                          // scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:+5:2: +5:2"}, {"sha": "3099e659f3fbb11d7d682c43c749ef6b7f145ae6", "filename": "tests/mir-opt/const_prop/mutable_variable_aggregate_mut_ref.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_mut_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_mut_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_mut_ref.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -1,5 +1,4 @@\n-// unit-test\n-// compile-flags: -O\n+// unit-test: ConstProp\n \n // EMIT_MIR mutable_variable_aggregate_mut_ref.main.ConstProp.diff\n fn main() {"}, {"sha": "374151057acdab36c74c43feeffb0269aedd0952", "filename": "tests/mir-opt/const_prop/mutable_variable_aggregate_partial_read.main.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_partial_read.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_partial_read.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_partial_read.main.ConstProp.diff?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -16,7 +16,7 @@\n           StorageLive(_1);                 // scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:+1:9: +1:14\n           _1 = foo() -> bb1;               // scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:+1:29: +1:34\n                                            // mir::Constant\n-                                           // + span: $DIR/mutable_variable_aggregate_partial_read.rs:7:29: 7:32\n+                                           // + span: $DIR/mutable_variable_aggregate_partial_read.rs:6:29: 6:32\n                                            // + literal: Const { ty: fn() -> (i32, i32) {foo}, val: Value(<ZST>) }\n       }\n   \n@@ -26,6 +26,7 @@\n           StorageLive(_2);                 // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:+4:9: +4:10\n -         _2 = (_1.1: i32);                // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:+4:13: +4:16\n +         _2 = const 99_i32;               // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:+4:13: +4:16\n+          _0 = const ();                   // scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:+0:11: +5:2\n           StorageDead(_2);                 // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:+5:1: +5:2\n           StorageDead(_1);                 // scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:+5:1: +5:2\n           return;                          // scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:+5:2: +5:2"}, {"sha": "0e823e9dc0845a754faede0f86ae93d161abc689", "filename": "tests/mir-opt/const_prop/mutable_variable_aggregate_partial_read.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_partial_read.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_partial_read.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_partial_read.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -1,6 +1,5 @@\n // ignore-wasm32 compiled with panic=abort by default\n-// unit-test\n-// compile-flags: -O\n+// unit-test: ConstProp\n \n // EMIT_MIR mutable_variable_aggregate_partial_read.main.ConstProp.diff\n fn main() {"}, {"sha": "fab81063028aa028a5130d84277ad01921cf0f3a", "filename": "tests/mir-opt/const_prop/mutable_variable_no_prop.main.ConstProp.diff", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_no_prop.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_no_prop.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_no_prop.main.ConstProp.diff?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -4,34 +4,39 @@\n   fn main() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/mutable_variable_no_prop.rs:+0:11: +0:11\n       let mut _1: u32;                     // in scope 0 at $DIR/mutable_variable_no_prop.rs:+1:9: +1:14\n-      let mut _2: u32;                     // in scope 0 at $DIR/mutable_variable_no_prop.rs:+3:13: +3:19\n-      let mut _3: *mut u32;                // in scope 0 at $DIR/mutable_variable_no_prop.rs:+3:13: +3:19\n+      let _2: ();                          // in scope 0 at $DIR/mutable_variable_no_prop.rs:+2:5: +4:6\n+      let mut _3: u32;                     // in scope 0 at $DIR/mutable_variable_no_prop.rs:+3:13: +3:19\n+      let mut _4: *mut u32;                // in scope 0 at $DIR/mutable_variable_no_prop.rs:+3:13: +3:19\n       scope 1 {\n           debug x => _1;                   // in scope 1 at $DIR/mutable_variable_no_prop.rs:+1:9: +1:14\n-          let _4: u32;                     // in scope 1 at $DIR/mutable_variable_no_prop.rs:+5:9: +5:10\n+          let _5: u32;                     // in scope 1 at $DIR/mutable_variable_no_prop.rs:+5:9: +5:10\n           scope 2 {\n           }\n           scope 3 {\n-              debug y => _4;               // in scope 3 at $DIR/mutable_variable_no_prop.rs:+5:9: +5:10\n+              debug y => _5;               // in scope 3 at $DIR/mutable_variable_no_prop.rs:+5:9: +5:10\n           }\n       }\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/mutable_variable_no_prop.rs:+1:9: +1:14\n           _1 = const 42_u32;               // scope 0 at $DIR/mutable_variable_no_prop.rs:+1:17: +1:19\n-          StorageLive(_2);                 // scope 2 at $DIR/mutable_variable_no_prop.rs:+3:13: +3:19\n+          StorageLive(_2);                 // scope 1 at $DIR/mutable_variable_no_prop.rs:+2:5: +4:6\n           StorageLive(_3);                 // scope 2 at $DIR/mutable_variable_no_prop.rs:+3:13: +3:19\n-          _3 = const {alloc1: *mut u32};   // scope 2 at $DIR/mutable_variable_no_prop.rs:+3:13: +3:19\n+          StorageLive(_4);                 // scope 2 at $DIR/mutable_variable_no_prop.rs:+3:13: +3:19\n+          _4 = const {alloc1: *mut u32};   // scope 2 at $DIR/mutable_variable_no_prop.rs:+3:13: +3:19\n                                            // mir::Constant\n-                                           // + span: $DIR/mutable_variable_no_prop.rs:10:13: 10:19\n+                                           // + span: $DIR/mutable_variable_no_prop.rs:9:13: 9:19\n                                            // + literal: Const { ty: *mut u32, val: Value(Scalar(alloc1)) }\n-          _2 = (*_3);                      // scope 2 at $DIR/mutable_variable_no_prop.rs:+3:13: +3:19\n-          _1 = move _2;                    // scope 2 at $DIR/mutable_variable_no_prop.rs:+3:9: +3:19\n-          StorageDead(_2);                 // scope 2 at $DIR/mutable_variable_no_prop.rs:+3:18: +3:19\n-          StorageDead(_3);                 // scope 2 at $DIR/mutable_variable_no_prop.rs:+3:19: +3:20\n-          StorageLive(_4);                 // scope 1 at $DIR/mutable_variable_no_prop.rs:+5:9: +5:10\n-          _4 = _1;                         // scope 1 at $DIR/mutable_variable_no_prop.rs:+5:13: +5:14\n-          StorageDead(_4);                 // scope 1 at $DIR/mutable_variable_no_prop.rs:+6:1: +6:2\n+          _3 = (*_4);                      // scope 2 at $DIR/mutable_variable_no_prop.rs:+3:13: +3:19\n+          _1 = move _3;                    // scope 2 at $DIR/mutable_variable_no_prop.rs:+3:9: +3:19\n+          StorageDead(_3);                 // scope 2 at $DIR/mutable_variable_no_prop.rs:+3:18: +3:19\n+          StorageDead(_4);                 // scope 2 at $DIR/mutable_variable_no_prop.rs:+3:19: +3:20\n+          _2 = const ();                   // scope 2 at $DIR/mutable_variable_no_prop.rs:+2:5: +4:6\n+          StorageDead(_2);                 // scope 1 at $DIR/mutable_variable_no_prop.rs:+4:5: +4:6\n+          StorageLive(_5);                 // scope 1 at $DIR/mutable_variable_no_prop.rs:+5:9: +5:10\n+          _5 = _1;                         // scope 1 at $DIR/mutable_variable_no_prop.rs:+5:13: +5:14\n+          _0 = const ();                   // scope 0 at $DIR/mutable_variable_no_prop.rs:+0:11: +6:2\n+          StorageDead(_5);                 // scope 1 at $DIR/mutable_variable_no_prop.rs:+6:1: +6:2\n           StorageDead(_1);                 // scope 0 at $DIR/mutable_variable_no_prop.rs:+6:1: +6:2\n           return;                          // scope 0 at $DIR/mutable_variable_no_prop.rs:+6:2: +6:2\n       }"}, {"sha": "e51c6223555d5344863f8eb68d170b15b0f990d1", "filename": "tests/mir-opt/const_prop/mutable_variable_no_prop.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_no_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_no_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_no_prop.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -1,5 +1,4 @@\n-// unit-test\n-// compile-flags: -O\n+// unit-test: ConstProp\n \n static mut STATIC: u32 = 0x42424242;\n "}, {"sha": "3048122d8fff752dad09c88fef9dc0cd6ae3e880", "filename": "tests/mir-opt/const_prop/mutable_variable_unprop_assign.main.ConstProp.diff", "status": "modified", "additions": 23, "deletions": 19, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.main.ConstProp.diff?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -4,17 +4,16 @@\n   fn main() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/mutable_variable_unprop_assign.rs:+0:11: +0:11\n       let _1: i32;                         // in scope 0 at $DIR/mutable_variable_unprop_assign.rs:+1:9: +1:10\n-      let mut _2: i32;                     // in scope 0 at $DIR/mutable_variable_unprop_assign.rs:+3:11: +3:12\n+      let mut _3: i32;                     // in scope 0 at $DIR/mutable_variable_unprop_assign.rs:+3:11: +3:12\n       scope 1 {\n           debug a => _1;                   // in scope 1 at $DIR/mutable_variable_unprop_assign.rs:+1:9: +1:10\n-          let mut _5: i32;                 // in scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:9: +2:14\n-          let mut _6: i32;                 // in scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:9: +2:14\n+          let mut _2: (i32, i32);          // in scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:9: +2:14\n           scope 2 {\n-              debug x => (i32, i32){ .0 => _5, .1 => _6, }; // in scope 2 at $DIR/mutable_variable_unprop_assign.rs:+2:9: +2:14\n-              let _3: i32;                 // in scope 2 at $DIR/mutable_variable_unprop_assign.rs:+4:9: +4:10\n+              debug x => _2;               // in scope 2 at $DIR/mutable_variable_unprop_assign.rs:+2:9: +2:14\n+              let _4: i32;                 // in scope 2 at $DIR/mutable_variable_unprop_assign.rs:+4:9: +4:10\n               scope 3 {\n-                  debug y => _3;           // in scope 3 at $DIR/mutable_variable_unprop_assign.rs:+4:9: +4:10\n-                  let _4: i32;             // in scope 3 at $DIR/mutable_variable_unprop_assign.rs:+5:9: +5:10\n+                  debug y => _4;           // in scope 3 at $DIR/mutable_variable_unprop_assign.rs:+4:9: +4:10\n+                  let _5: i32;             // in scope 3 at $DIR/mutable_variable_unprop_assign.rs:+5:9: +5:10\n                   scope 4 {\n                       debug z => _5;       // in scope 4 at $DIR/mutable_variable_unprop_assign.rs:+5:9: +5:10\n                   }\n@@ -26,22 +25,27 @@\n           StorageLive(_1);                 // scope 0 at $DIR/mutable_variable_unprop_assign.rs:+1:9: +1:10\n           _1 = foo() -> bb1;               // scope 0 at $DIR/mutable_variable_unprop_assign.rs:+1:13: +1:18\n                                            // mir::Constant\n-                                           // + span: $DIR/mutable_variable_unprop_assign.rs:7:13: 7:16\n+                                           // + span: $DIR/mutable_variable_unprop_assign.rs:6:13: 6:16\n                                            // + literal: Const { ty: fn() -> i32 {foo}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n-          StorageLive(_6);                 // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:9: +2:14\n-          _5 = const 1_i32;                // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:29: +2:35\n-          _6 = const 2_i32;                // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:29: +2:35\n-          StorageLive(_2);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:11: +3:12\n-          _2 = _1;                         // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:11: +3:12\n-          _6 = move _2;                    // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:5: +3:12\n-          StorageDead(_2);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:11: +3:12\n-          StorageLive(_3);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+4:9: +4:10\n-          _3 = _6;                         // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+4:13: +4:16\n-          StorageDead(_3);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+6:1: +6:2\n-          StorageDead(_6);                 // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+6:1: +6:2\n+          StorageLive(_2);                 // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:9: +2:14\n+-         _2 = (const 1_i32, const 2_i32); // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:29: +2:35\n++         _2 = const (1_i32, 2_i32);       // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:29: +2:35\n+          StorageLive(_3);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:11: +3:12\n+          _3 = _1;                         // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:11: +3:12\n+          (_2.1: i32) = move _3;           // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:5: +3:12\n+          StorageDead(_3);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:11: +3:12\n+          StorageLive(_4);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+4:9: +4:10\n+          _4 = (_2.1: i32);                // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+4:13: +4:16\n+          StorageLive(_5);                 // scope 3 at $DIR/mutable_variable_unprop_assign.rs:+5:9: +5:10\n+-         _5 = (_2.0: i32);                // scope 3 at $DIR/mutable_variable_unprop_assign.rs:+5:13: +5:16\n++         _5 = const 1_i32;                // scope 3 at $DIR/mutable_variable_unprop_assign.rs:+5:13: +5:16\n+          _0 = const ();                   // scope 0 at $DIR/mutable_variable_unprop_assign.rs:+0:11: +6:2\n+          StorageDead(_5);                 // scope 3 at $DIR/mutable_variable_unprop_assign.rs:+6:1: +6:2\n+          StorageDead(_4);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+6:1: +6:2\n+          StorageDead(_2);                 // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+6:1: +6:2\n           StorageDead(_1);                 // scope 0 at $DIR/mutable_variable_unprop_assign.rs:+6:1: +6:2\n           return;                          // scope 0 at $DIR/mutable_variable_unprop_assign.rs:+6:2: +6:2\n       }"}, {"sha": "5577f78a963632f14d170ee58ebf47182eab6a70", "filename": "tests/mir-opt/const_prop/mutable_variable_unprop_assign.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -1,6 +1,5 @@\n // ignore-wasm32 compiled with panic=abort by default\n-// unit-test\n-// compile-flags: -O\n+// unit-test: ConstProp\n \n // EMIT_MIR mutable_variable_unprop_assign.main.ConstProp.diff\n fn main() {"}, {"sha": "e768a47a96d14ffbcdb6fe66abdb3729b72c1dc3", "filename": "tests/mir-opt/const_prop/offset_of.concrete.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Fmir-opt%2Fconst_prop%2Foffset_of.concrete.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Fmir-opt%2Fconst_prop%2Foffset_of.concrete.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Foffset_of.concrete.ConstProp.diff?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -33,6 +33,7 @@\n           StorageLive(_4);                 // scope 3 at $DIR/offset_of.rs:+4:9: +4:11\n -         _4 = OffsetOf(Alpha, [2, 1]);    // scope 3 at $DIR/offset_of.rs:+4:14: +4:36\n +         _4 = const 3_usize;              // scope 3 at $DIR/offset_of.rs:+4:14: +4:36\n+          _0 = const ();                   // scope 0 at $DIR/offset_of.rs:+0:15: +5:2\n           StorageDead(_4);                 // scope 3 at $DIR/offset_of.rs:+5:1: +5:2\n           StorageDead(_3);                 // scope 2 at $DIR/offset_of.rs:+5:1: +5:2\n           StorageDead(_2);                 // scope 1 at $DIR/offset_of.rs:+5:1: +5:2"}, {"sha": "e40fdbd79d84ed5e5acaa35a62d5be4e1c52659d", "filename": "tests/mir-opt/const_prop/offset_of.generic.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Fmir-opt%2Fconst_prop%2Foffset_of.generic.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Fmir-opt%2Fconst_prop%2Foffset_of.generic.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Foffset_of.generic.ConstProp.diff?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -29,6 +29,7 @@\n           _3 = OffsetOf(Delta<T>, [1]);    // scope 2 at $DIR/offset_of.rs:+3:14: +3:37\n           StorageLive(_4);                 // scope 3 at $DIR/offset_of.rs:+4:9: +4:11\n           _4 = OffsetOf(Delta<T>, [2]);    // scope 3 at $DIR/offset_of.rs:+4:14: +4:37\n+          _0 = const ();                   // scope 0 at $DIR/offset_of.rs:+0:17: +5:2\n           StorageDead(_4);                 // scope 3 at $DIR/offset_of.rs:+5:1: +5:2\n           StorageDead(_3);                 // scope 2 at $DIR/offset_of.rs:+5:1: +5:2\n           StorageDead(_2);                 // scope 1 at $DIR/offset_of.rs:+5:1: +5:2"}, {"sha": "4cdcd28eeb2928728d8d045f883ddd03c973f05d", "filename": "tests/mir-opt/const_prop/offset_of.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Fmir-opt%2Fconst_prop%2Foffset_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Fmir-opt%2Fconst_prop%2Foffset_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Foffset_of.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -1,5 +1,4 @@\n-// unit-test\n-// compile-flags: -O\n+// unit-test: ConstProp\n \n #![feature(offset_of)]\n "}, {"sha": "c290fba563a22bd210a8a6bf33be78744a508365", "filename": "tests/mir-opt/const_prop/read_immutable_static.main.ConstProp.diff", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Fmir-opt%2Fconst_prop%2Fread_immutable_static.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Fmir-opt%2Fconst_prop%2Fread_immutable_static.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fread_immutable_static.main.ConstProp.diff?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -18,15 +18,15 @@\n           StorageLive(_3);                 // scope 0 at $DIR/read_immutable_static.rs:+1:13: +1:16\n           _3 = const {alloc1: &u8};        // scope 0 at $DIR/read_immutable_static.rs:+1:13: +1:16\n                                            // mir::Constant\n-                                           // + span: $DIR/read_immutable_static.rs:8:13: 8:16\n+                                           // + span: $DIR/read_immutable_static.rs:7:13: 7:16\n                                            // + literal: Const { ty: &u8, val: Value(Scalar(alloc1)) }\n -         _2 = (*_3);                      // scope 0 at $DIR/read_immutable_static.rs:+1:13: +1:16\n +         _2 = const 2_u8;                 // scope 0 at $DIR/read_immutable_static.rs:+1:13: +1:16\n           StorageLive(_4);                 // scope 0 at $DIR/read_immutable_static.rs:+1:19: +1:22\n           StorageLive(_5);                 // scope 0 at $DIR/read_immutable_static.rs:+1:19: +1:22\n           _5 = const {alloc1: &u8};        // scope 0 at $DIR/read_immutable_static.rs:+1:19: +1:22\n                                            // mir::Constant\n-                                           // + span: $DIR/read_immutable_static.rs:8:19: 8:22\n+                                           // + span: $DIR/read_immutable_static.rs:7:19: 7:22\n                                            // + literal: Const { ty: &u8, val: Value(Scalar(alloc1)) }\n -         _4 = (*_5);                      // scope 0 at $DIR/read_immutable_static.rs:+1:19: +1:22\n -         _1 = Add(move _2, move _4);      // scope 0 at $DIR/read_immutable_static.rs:+1:13: +1:22\n@@ -36,6 +36,7 @@\n           StorageDead(_2);                 // scope 0 at $DIR/read_immutable_static.rs:+1:21: +1:22\n           StorageDead(_5);                 // scope 0 at $DIR/read_immutable_static.rs:+1:22: +1:23\n           StorageDead(_3);                 // scope 0 at $DIR/read_immutable_static.rs:+1:22: +1:23\n+          _0 = const ();                   // scope 0 at $DIR/read_immutable_static.rs:+0:11: +2:2\n           StorageDead(_1);                 // scope 0 at $DIR/read_immutable_static.rs:+2:1: +2:2\n           return;                          // scope 0 at $DIR/read_immutable_static.rs:+2:2: +2:2\n       }"}, {"sha": "fb8f9fe996a6df79304220c9beff5f3232e8450c", "filename": "tests/mir-opt/const_prop/read_immutable_static.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Fmir-opt%2Fconst_prop%2Fread_immutable_static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Fmir-opt%2Fconst_prop%2Fread_immutable_static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fread_immutable_static.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -1,5 +1,4 @@\n-// unit-test\n-// compile-flags: -O\n+// unit-test: ConstProp\n \n static FOO: u8 = 2;\n "}, {"sha": "b022e2ba42bb8fb22ff2405be11f71e161c16dbd", "filename": "tests/mir-opt/lower_intrinsics.option_payload.LowerIntrinsics.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Fmir-opt%2Flower_intrinsics.option_payload.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Fmir-opt%2Flower_intrinsics.option_payload.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.option_payload.LowerIntrinsics.diff?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -24,7 +24,7 @@\n           _4 = &raw const (*_1);           // scope 1 at $DIR/lower_intrinsics.rs:+2:55: +2:56\n -         _3 = option_payload_ptr::<usize>(move _4) -> [return: bb1, unwind unreachable]; // scope 1 at $DIR/lower_intrinsics.rs:+2:18: +2:57\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:132:18: 132:54\n+-                                          // + span: $DIR/lower_intrinsics.rs:137:18: 137:54\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(*const Option<usize>) -> *const usize {option_payload_ptr::<usize>}, val: Value(<ZST>) }\n +         _3 = &raw const (((*_4) as Some).0: usize); // scope 1 at $DIR/lower_intrinsics.rs:+2:18: +2:57\n +         goto -> bb1;                     // scope 1 at $DIR/lower_intrinsics.rs:+2:18: +2:57\n@@ -37,7 +37,7 @@\n           _6 = &raw const (*_2);           // scope 2 at $DIR/lower_intrinsics.rs:+3:55: +3:56\n -         _5 = option_payload_ptr::<String>(move _6) -> [return: bb2, unwind unreachable]; // scope 2 at $DIR/lower_intrinsics.rs:+3:18: +3:57\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:133:18: 133:54\n+-                                          // + span: $DIR/lower_intrinsics.rs:138:18: 138:54\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(*const Option<String>) -> *const String {option_payload_ptr::<String>}, val: Value(<ZST>) }\n +         _5 = &raw const (((*_6) as Some).0: std::string::String); // scope 2 at $DIR/lower_intrinsics.rs:+3:18: +3:57\n +         goto -> bb2;                     // scope 2 at $DIR/lower_intrinsics.rs:+3:18: +3:57"}, {"sha": "60a1dd0ba7d09e4757e1861fdadbec56c0d02262", "filename": "tests/mir-opt/lower_intrinsics.ptr_offset.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Fmir-opt%2Flower_intrinsics.ptr_offset.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Fmir-opt%2Flower_intrinsics.ptr_offset.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.ptr_offset.LowerIntrinsics.diff?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -15,7 +15,7 @@\n           _4 = _2;                         // scope 0 at $DIR/lower_intrinsics.rs:+1:33: +1:34\n -         _0 = offset::<*const i32, isize>(move _3, move _4) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:35\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:139:5: 139:29\n+-                                          // + span: $DIR/lower_intrinsics.rs:144:5: 144:29\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(*const i32, isize) -> *const i32 {offset::<*const i32, isize>}, val: Value(<ZST>) }\n +         _0 = Offset(move _3, move _4);   // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:35\n +         goto -> bb1;                     // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:35"}, {"sha": "0ca88a42e3fd05fef10c281bd6d618dd9cdf8ed1", "filename": "tests/mir-opt/lower_intrinsics.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Fmir-opt%2Flower_intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Fmir-opt%2Flower_intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -124,6 +124,11 @@ pub fn read_via_copy_uninhabited(r: &Never) -> Never {\n     unsafe { core::intrinsics::read_via_copy(r) }\n }\n \n+// EMIT_MIR lower_intrinsics.write_via_move_string.LowerIntrinsics.diff\n+pub fn write_via_move_string(r: &mut String, v: String) {\n+    unsafe { core::intrinsics::write_via_move(r, v) }\n+}\n+\n pub enum Never {}\n \n // EMIT_MIR lower_intrinsics.option_payload.LowerIntrinsics.diff"}, {"sha": "38d99f661dc648337c8d94bee234dbb5f21451fc", "filename": "tests/mir-opt/lower_intrinsics.write_via_move_string.LowerIntrinsics.diff", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Fmir-opt%2Flower_intrinsics.write_via_move_string.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Fmir-opt%2Flower_intrinsics.write_via_move_string.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.write_via_move_string.LowerIntrinsics.diff?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -0,0 +1,36 @@\n+- // MIR for `write_via_move_string` before LowerIntrinsics\n++ // MIR for `write_via_move_string` after LowerIntrinsics\n+  \n+  fn write_via_move_string(_1: &mut String, _2: String) -> () {\n+      debug r => _1;                       // in scope 0 at $DIR/lower_intrinsics.rs:+0:30: +0:31\n+      debug v => _2;                       // in scope 0 at $DIR/lower_intrinsics.rs:+0:46: +0:47\n+      let mut _0: ();                      // return place in scope 0 at $DIR/lower_intrinsics.rs:+0:57: +0:57\n+      let mut _3: *mut std::string::String; // in scope 0 at $DIR/lower_intrinsics.rs:+1:47: +1:48\n+      let mut _4: std::string::String;     // in scope 0 at $DIR/lower_intrinsics.rs:+1:50: +1:51\n+      scope 1 {\n+      }\n+  \n+      bb0: {\n+          StorageLive(_3);                 // scope 1 at $DIR/lower_intrinsics.rs:+1:47: +1:48\n+          _3 = &raw mut (*_1);             // scope 1 at $DIR/lower_intrinsics.rs:+1:47: +1:48\n+          StorageLive(_4);                 // scope 1 at $DIR/lower_intrinsics.rs:+1:50: +1:51\n+          _4 = move _2;                    // scope 1 at $DIR/lower_intrinsics.rs:+1:50: +1:51\n+-         _0 = write_via_move::<String>(move _3, move _4) -> [return: bb1, unwind unreachable]; // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:52\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/lower_intrinsics.rs:129:14: 129:46\n+-                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(*mut String, String) {write_via_move::<String>}, val: Value(<ZST>) }\n++         (*_3) = move _4;                 // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:52\n++         goto -> bb1;                     // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:52\n+      }\n+  \n+      bb1: {\n+          StorageDead(_4);                 // scope 1 at $DIR/lower_intrinsics.rs:+1:51: +1:52\n+          StorageDead(_3);                 // scope 1 at $DIR/lower_intrinsics.rs:+1:51: +1:52\n+          goto -> bb2;                     // scope 0 at $DIR/lower_intrinsics.rs:+2:1: +2:2\n+      }\n+  \n+      bb2: {\n+          return;                          // scope 0 at $DIR/lower_intrinsics.rs:+2:2: +2:2\n+      }\n+  }\n+  "}, {"sha": "2b4971e2ef9191dd7b9e32cbd9ffd1aff3c5365e", "filename": "tests/mir-opt/pre-codegen/mem_replace.manual_replace.PreCodegen.after.mir", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Fmir-opt%2Fpre-codegen%2Fmem_replace.manual_replace.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Fmir-opt%2Fpre-codegen%2Fmem_replace.manual_replace.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Fmem_replace.manual_replace.PreCodegen.after.mir?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -0,0 +1,16 @@\n+// MIR for `manual_replace` after PreCodegen\n+\n+fn manual_replace(_1: &mut u32, _2: u32) -> u32 {\n+    debug r => _1;                       // in scope 0 at $DIR/mem_replace.rs:+0:23: +0:24\n+    debug v => _2;                       // in scope 0 at $DIR/mem_replace.rs:+0:36: +0:37\n+    let mut _0: u32;                     // return place in scope 0 at $DIR/mem_replace.rs:+1:9: +1:13\n+    scope 1 {\n+        debug temp => _0;                // in scope 1 at $DIR/mem_replace.rs:+1:9: +1:13\n+    }\n+\n+    bb0: {\n+        _0 = (*_1);                      // scope 0 at $DIR/mem_replace.rs:+1:16: +1:18\n+        (*_1) = _2;                      // scope 1 at $DIR/mem_replace.rs:+2:5: +2:11\n+        return;                          // scope 0 at $DIR/mem_replace.rs:+4:2: +4:2\n+    }\n+}"}, {"sha": "50e0538c133684a4dddf1f59d0fe9d1f873f1afd", "filename": "tests/mir-opt/pre-codegen/mem_replace.mem_replace.PreCodegen.after.mir", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Fmir-opt%2Fpre-codegen%2Fmem_replace.mem_replace.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Fmir-opt%2Fpre-codegen%2Fmem_replace.mem_replace.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Fmem_replace.mem_replace.PreCodegen.after.mir?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -0,0 +1,53 @@\n+// MIR for `mem_replace` after PreCodegen\n+\n+fn mem_replace(_1: &mut u32, _2: u32) -> u32 {\n+    debug r => _1;                       // in scope 0 at $DIR/mem_replace.rs:+0:20: +0:21\n+    debug v => _2;                       // in scope 0 at $DIR/mem_replace.rs:+0:33: +0:34\n+    let mut _0: u32;                     // return place in scope 0 at $DIR/mem_replace.rs:+0:44: +0:47\n+    scope 1 (inlined std::mem::replace::<u32>) { // at $DIR/mem_replace.rs:16:5: 16:28\n+        debug dest => _1;                // in scope 1 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+        debug src => _2;                 // in scope 1 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+        let mut _3: *const u32;          // in scope 1 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+        let mut _4: *mut u32;            // in scope 1 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+        scope 2 {\n+            scope 3 {\n+                debug result => _0;      // in scope 3 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+                scope 7 (inlined std::ptr::write::<u32>) { // at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+                    debug dst => _4;     // in scope 7 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+                    debug src => _2;     // in scope 7 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+                    let mut _6: *mut u32; // in scope 7 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                    scope 8 {\n+                        scope 9 (inlined std::ptr::write::runtime::<u32>) { // at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                            debug dst => _6; // in scope 9 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                        }\n+                    }\n+                }\n+            }\n+            scope 4 (inlined std::ptr::read::<u32>) { // at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+                debug src => _3;         // in scope 4 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+                let mut _5: *const u32;  // in scope 4 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                scope 5 {\n+                    scope 6 (inlined std::ptr::read::runtime::<u32>) { // at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                        debug src => _5; // in scope 6 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    bb0: {\n+        StorageLive(_3);                 // scope 2 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+        _3 = &raw const (*_1);           // scope 2 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+        StorageLive(_5);                 // scope 2 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+        _0 = (*_3);                      // scope 5 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+        StorageDead(_5);                 // scope 2 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+        StorageDead(_3);                 // scope 2 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+        StorageLive(_4);                 // scope 3 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+        _4 = &raw mut (*_1);             // scope 3 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+        StorageLive(_6);                 // scope 3 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+        (*_4) = _2;                      // scope 8 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+        StorageDead(_6);                 // scope 3 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+        StorageDead(_4);                 // scope 3 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+        return;                          // scope 0 at $DIR/mem_replace.rs:+2:2: +2:2\n+    }\n+}"}, {"sha": "e5066c38b9679f48adc4c10bd2d3c907d104ae97", "filename": "tests/mir-opt/pre-codegen/mem_replace.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Fmir-opt%2Fpre-codegen%2Fmem_replace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Fmir-opt%2Fpre-codegen%2Fmem_replace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Fmem_replace.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -0,0 +1,17 @@\n+// compile-flags: -O -C debuginfo=0 -Zmir-opt-level=2\n+// only-64bit\n+// ignore-debug\n+\n+#![crate_type = \"lib\"]\n+\n+// EMIT_MIR mem_replace.manual_replace.PreCodegen.after.mir\n+pub fn manual_replace(r: &mut u32, v: u32) -> u32 {\n+    let temp = *r;\n+    *r = v;\n+    temp\n+}\n+\n+// EMIT_MIR mem_replace.mem_replace.PreCodegen.after.mir\n+pub fn mem_replace(r: &mut u32, v: u32) -> u32 {\n+    std::mem::replace(r, v)\n+}"}, {"sha": "e1783432857e25a06edf6e7255867cade1e1c8b9", "filename": "tests/pretty/offset_of.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Fpretty%2Foffset_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Fpretty%2Foffset_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpretty%2Foffset_of.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -0,0 +1,4 @@\n+// pp-exact\n+#![feature(offset_of)]\n+\n+fn main() { std::mem::offset_of!(std :: ops :: Range < usize >, end); }"}, {"sha": "7d7f682130df86b6d780c3e51697e7c6f0a4dfee", "filename": "tests/pretty/tests-are-sorted.pp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Fpretty%2Ftests-are-sorted.pp", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Fpretty%2Ftests-are-sorted.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpretty%2Ftests-are-sorted.pp?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -79,6 +79,7 @@\n     };\n fn a_test() {}\n #[rustc_main]\n+#[no_coverage]\n pub fn main() -> () {\n     extern crate test;\n     test::test_main_static(&[&a_test, &m_test, &z_test])"}, {"sha": "42d3efa82d618c426b8d5c1fd0baac341f6c7242", "filename": "tests/run-make/c-unwind-abi-catch-lib-panic/main.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frun-make%2Fc-unwind-abi-catch-lib-panic%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frun-make%2Fc-unwind-abi-catch-lib-panic%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fc-unwind-abi-catch-lib-panic%2Fmain.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -2,7 +2,6 @@\n //!\n //! This test triggers a panic in a Rust library that our foreign function invokes. This shows\n //! that we can unwind through the C code in that library, and catch the underlying panic.\n-#![feature(c_unwind)]\n \n use std::panic::{catch_unwind, AssertUnwindSafe};\n "}, {"sha": "9e7bc3e53a1accfe3eeb00388d692e0837f3e2c1", "filename": "tests/run-make/c-unwind-abi-catch-lib-panic/panic.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frun-make%2Fc-unwind-abi-catch-lib-panic%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frun-make%2Fc-unwind-abi-catch-lib-panic%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fc-unwind-abi-catch-lib-panic%2Fpanic.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -1,5 +1,4 @@\n #![crate_type = \"staticlib\"]\n-#![feature(c_unwind)]\n \n /// This function will panic if `x` is greater than 10.\n ///"}, {"sha": "1903be9561c573e35cf49b4729cad30ec0d0962d", "filename": "tests/run-make/c-unwind-abi-catch-panic/main.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frun-make%2Fc-unwind-abi-catch-panic%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frun-make%2Fc-unwind-abi-catch-panic%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fc-unwind-abi-catch-panic%2Fmain.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -1,7 +1,6 @@\n //! A test for calling `C-unwind` functions across foreign function boundaries.\n //!\n //! This test triggers a panic when calling a foreign function that calls *back* into Rust.\n-#![feature(c_unwind)]\n \n use std::panic::{catch_unwind, AssertUnwindSafe};\n "}, {"sha": "28c5261ff854d85e517b2a9b8ff0780433199ac4", "filename": "tests/run-make/core-no-oom-handling/Makefile", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frun-make%2Fcore-no-oom-handling%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frun-make%2Fcore-no-oom-handling%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fcore-no-oom-handling%2FMakefile?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -0,0 +1,6 @@\n+include ../tools.mk\n+\n+FAKEROOT=$(TMPDIR)/fakeroot\n+\n+all:\n+\t$(RUSTC) --edition=2021 -Dwarnings --crate-type=rlib ../../../library/core/src/lib.rs --sysroot=$(FAKEROOT) --cfg no_global_oom_handling"}, {"sha": "d4ae03e590a3089fbe954fd19c6614c61f93f972", "filename": "tests/run-make/coverage-reports/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frun-make%2Fcoverage-reports%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frun-make%2Fcoverage-reports%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fcoverage-reports%2FMakefile?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -174,7 +174,7 @@ else\n \t# files are redundant, so there is no need to generate `expected_*.json` files or\n \t# compare actual JSON results.)\n \n-\t$(DIFF) --ignore-matching-lines='^  | .*::<.*>.*:$$' --ignore-matching-lines='^  | <.*>::.*:$$' \\\n+\t$(DIFF) --ignore-matching-lines='^  \\| .*::<.*>.*:$$' --ignore-matching-lines='^  \\| <.*>::.*:$$' \\\n \t\texpected_show_coverage.$@.txt \"$(TMPDIR)\"/actual_show_coverage.$@.txt || \\\n \t\t( grep -q '^\\/\\/ ignore-llvm-cov-show-diffs' $(SOURCEDIR)/$@.rs && \\\n \t\t\t>&2 echo 'diff failed, but suppressed with `// ignore-llvm-cov-show-diffs` in $(SOURCEDIR)/$@.rs' \\"}, {"sha": "93bd1cfcb48971c55c1e21bb91f3c2cedeb2b5a8", "filename": "tests/run-make/coverage-reports/expected_show_coverage.test_harness.txt", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frun-make%2Fcoverage-reports%2Fexpected_show_coverage.test_harness.txt", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frun-make%2Fcoverage-reports%2Fexpected_show_coverage.test_harness.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fcoverage-reports%2Fexpected_show_coverage.test_harness.txt?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -0,0 +1,11 @@\n+    1|       |// Verify that the entry point injected by the test harness doesn't cause\n+    2|       |// weird artifacts in the coverage report (e.g. issue #10749).\n+    3|       |\n+    4|       |// compile-flags: --test\n+    5|       |\n+    6|       |#[allow(dead_code)]\n+    7|      0|fn unused() {}\n+    8|       |\n+    9|      1|#[test]\n+   10|      1|fn my_test() {}\n+"}, {"sha": "12a755734c198bd6d1b7a969c3def47c3b339ffc", "filename": "tests/run-make/coverage/test_harness.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frun-make%2Fcoverage%2Ftest_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frun-make%2Fcoverage%2Ftest_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fcoverage%2Ftest_harness.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -0,0 +1,10 @@\n+// Verify that the entry point injected by the test harness doesn't cause\n+// weird artifacts in the coverage report (e.g. issue #10749).\n+\n+// compile-flags: --test\n+\n+#[allow(dead_code)]\n+fn unused() {}\n+\n+#[test]\n+fn my_test() {}"}, {"sha": "c085480b4f88d0b3632ee823b795f59ed617ef88", "filename": "tests/run-make/foreign-double-unwind/foo.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frun-make%2Fforeign-double-unwind%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frun-make%2Fforeign-double-unwind%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fforeign-double-unwind%2Ffoo.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -1,8 +1,6 @@\n // Tests that C++ double unwinding through Rust code will be properly guarded\n // against instead of exhibiting undefined behaviour.\n \n-#![feature(c_unwind)]\n-\n extern \"C-unwind\" {\n     fn throw_cxx_exception();\n     fn cxx_catch_callback(cb: extern \"C-unwind\" fn());"}, {"sha": "ccf858d858794ced832e7a86570fa71c752b7bab", "filename": "tests/run-make/foreign-exceptions/foo.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frun-make%2Fforeign-exceptions%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frun-make%2Fforeign-exceptions%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fforeign-exceptions%2Ffoo.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -2,8 +2,6 @@\n // are caught by catch_unwind. Also tests that Rust panics can unwind through\n // C++ code.\n \n-#![feature(c_unwind)]\n-\n use std::panic::{catch_unwind, AssertUnwindSafe};\n \n struct DropCheck<'a>(&'a mut bool);"}, {"sha": "1d865b429fa95b4a0deedbef5c4f44f80eca6339", "filename": "tests/run-make/foreign-rust-exceptions/bar.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frun-make%2Fforeign-rust-exceptions%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frun-make%2Fforeign-rust-exceptions%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fforeign-rust-exceptions%2Fbar.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -1,5 +1,4 @@\n #![crate_type = \"cdylib\"]\n-#![feature(c_unwind)]\n \n #[no_mangle]\n extern \"C-unwind\" fn panic() {"}, {"sha": "38942c55b19b0cbc873fca0c2f2c5a75e08b276d", "filename": "tests/run-make/foreign-rust-exceptions/foo.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frun-make%2Fforeign-rust-exceptions%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frun-make%2Fforeign-rust-exceptions%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fforeign-rust-exceptions%2Ffoo.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -1,5 +1,3 @@\n-#![feature(c_unwind)]\n-\n #[cfg_attr(not(windows), link(name = \"bar\"))]\n #[cfg_attr(windows, link(name = \"bar.dll\"))]\n extern \"C-unwind\" {"}, {"sha": "6a30acc2cc32cf891b03bfd8b66f5a818ca369e1", "filename": "tests/rustdoc-json/fn_pointer/abi.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-json%2Ffn_pointer%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-json%2Ffn_pointer%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Ffn_pointer%2Fabi.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -1,7 +1,6 @@\n // ignore-tidy-linelength\n \n #![feature(abi_vectorcall)]\n-#![feature(c_unwind)]\n \n // @is \"$.index[*][?(@.name=='AbiRust')].inner.type.inner.header.abi\" \\\"Rust\\\"\n pub type AbiRust = fn();"}, {"sha": "7a5dbee730c7dfe5ea9e85eb50d346f3e67ac5e0", "filename": "tests/rustdoc-json/fns/abi.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-json%2Ffns%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-json%2Ffns%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Ffns%2Fabi.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -1,7 +1,6 @@\n // ignore-tidy-linelength\n \n #![feature(abi_vectorcall)]\n-#![feature(c_unwind)]\n \n // @is \"$.index[*][?(@.name=='abi_rust')].inner.header.abi\" \\\"Rust\\\"\n pub fn abi_rust() {}"}, {"sha": "fd03d92d65b978eb6d899e90b46fa29df4eaf257", "filename": "tests/rustdoc-json/methods/abi.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-json%2Fmethods%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-json%2Fmethods%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Fmethods%2Fabi.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -1,7 +1,6 @@\n // ignore-tidy-linelength\n \n #![feature(abi_vectorcall)]\n-#![feature(c_unwind)]\n #![feature(no_core)]\n #![no_core]\n "}, {"sha": "9770be2f191f0b777bce8d1e74b752ed47d708a7", "filename": "tests/rustdoc-ui/check-cfg/check-cfg-test.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fcheck-cfg%2Fcheck-cfg-test.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fcheck-cfg%2Fcheck-cfg-test.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fcheck-cfg%2Fcheck-cfg-test.stderr?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/check-cfg-test.stderr"}, {"sha": "5c500ce6ce08219f169606e045c5d34cffe12301", "filename": "tests/rustdoc-ui/check-cfg/check-cfg-unstable.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fcheck-cfg%2Fcheck-cfg-unstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fcheck-cfg%2Fcheck-cfg-unstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fcheck-cfg%2Fcheck-cfg-unstable.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/check-cfg-unstable.rs"}, {"sha": "9b27c2bc058a73760e18439b943d0d8bd1b74577", "filename": "tests/rustdoc-ui/check-cfg/check-cfg-unstable.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fcheck-cfg%2Fcheck-cfg-unstable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fcheck-cfg%2Fcheck-cfg-unstable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fcheck-cfg%2Fcheck-cfg-unstable.stderr?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/check-cfg-unstable.stderr"}, {"sha": "fa8789ad3ede4c9a72a2f73fe140a6a2a37e249d", "filename": "tests/rustdoc-ui/check-cfg/check-cfg.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fcheck-cfg%2Fcheck-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fcheck-cfg%2Fcheck-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fcheck-cfg%2Fcheck-cfg.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/check-cfg.rs"}, {"sha": "1db8e1d91c249cf84290b21531d0993182b23f47", "filename": "tests/rustdoc-ui/check-cfg/check-cfg.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fcheck-cfg%2Fcheck-cfg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fcheck-cfg%2Fcheck-cfg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fcheck-cfg%2Fcheck-cfg.stderr?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/check-cfg.stderr"}, {"sha": "ee1fec4c5c2191e7fdcefe9290176fb03454e737", "filename": "tests/rustdoc-ui/doctest/auxiliary/extern_macros.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fauxiliary%2Fextern_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fauxiliary%2Fextern_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fdoctest%2Fauxiliary%2Fextern_macros.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/auxiliary/extern_macros.rs"}, {"sha": "ce529916e5edebbd7e2846ebe4a157158bd4e1c0", "filename": "tests/rustdoc-ui/doctest/block-doc-comment.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fblock-doc-comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fblock-doc-comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fdoctest%2Fblock-doc-comment.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/block-doc-comment.rs"}, {"sha": "7326c0a25a069340ea659b1382b6271d853bcc72", "filename": "tests/rustdoc-ui/doctest/block-doc-comment.stdout", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fblock-doc-comment.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fblock-doc-comment.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fdoctest%2Fblock-doc-comment.stdout?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/block-doc-comment.stdout"}, {"sha": "a263baa9738c53e188fec95a51a4665cac3d41c8", "filename": "tests/rustdoc-ui/doctest/cfg-test.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fcfg-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fcfg-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fdoctest%2Fcfg-test.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -1,6 +1,6 @@\n // check-pass\n // compile-flags:--test --test-args --test-threads=1\n-// normalize-stdout-test: \"tests/rustdoc-ui\" -> \"$$DIR\"\n+// normalize-stdout-test: \"tests/rustdoc-ui/doctest\" -> \"$$DIR\"\n // normalize-stdout-test \"finished in \\d+\\.\\d+s\" -> \"finished in $$TIME\"\n \n // Crates like core have doctests gated on `cfg(not(test))` so we need to make", "previous_filename": "tests/rustdoc-ui/cfg-test.rs"}, {"sha": "2960ff8d3b473882f8876b0da805ca5ec82d8ee8", "filename": "tests/rustdoc-ui/doctest/cfg-test.stdout", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fcfg-test.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fcfg-test.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fdoctest%2Fcfg-test.stdout?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/cfg-test.stdout"}, {"sha": "e955470148a16cba9c857c43d0877f5d9f99f539", "filename": "tests/rustdoc-ui/doctest/check-attr-test.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fcheck-attr-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fcheck-attr-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fdoctest%2Fcheck-attr-test.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/check-attr-test.rs"}, {"sha": "01beba1ffc4a451f1427885e13095f99030763ca", "filename": "tests/rustdoc-ui/doctest/check-attr-test.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fcheck-attr-test.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fcheck-attr-test.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fdoctest%2Fcheck-attr-test.stderr?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/check-attr-test.stderr"}, {"sha": "49a801c3fb35206dd12444f30ba78479dc9a044d", "filename": "tests/rustdoc-ui/doctest/check-cfg-test.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fcheck-cfg-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fcheck-cfg-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fdoctest%2Fcheck-cfg-test.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -1,7 +1,7 @@\n // check-pass\n // compile-flags: --test --nocapture --check-cfg=values(feature,\"test\") -Z unstable-options\n-// normalize-stderr-test: \"tests/rustdoc-ui\" -> \"$$DIR\"\n-// normalize-stdout-test: \"tests/rustdoc-ui\" -> \"$$DIR\"\n+// normalize-stderr-test: \"tests/rustdoc-ui/doctest\" -> \"$$DIR\"\n+// normalize-stdout-test: \"tests/rustdoc-ui/doctest\" -> \"$$DIR\"\n // normalize-stdout-test \"finished in \\d+\\.\\d+s\" -> \"finished in $$TIME\"\n \n /// The doctest will produce a warning because feature invalid is unexpected", "previous_filename": "tests/rustdoc-ui/check-cfg-test.rs"}, {"sha": "9770be2f191f0b777bce8d1e74b752ed47d708a7", "filename": "tests/rustdoc-ui/doctest/check-cfg-test.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fcheck-cfg-test.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fcheck-cfg-test.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fdoctest%2Fcheck-cfg-test.stderr?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -0,0 +1,11 @@\n+warning: unexpected `cfg` condition value\n+  --> $DIR/check-cfg-test.rs:9:7\n+   |\n+LL | #[cfg(feature = \"invalid\")]\n+   |       ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: expected values for `feature` are: test\n+   = note: `#[warn(unexpected_cfgs)]` on by default\n+\n+warning: 1 warning emitted\n+"}, {"sha": "b7db49bcfa87a425f0a4ac9105f6cfa2783b4ad4", "filename": "tests/rustdoc-ui/doctest/check-cfg-test.stdout", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fcheck-cfg-test.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fcheck-cfg-test.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fdoctest%2Fcheck-cfg-test.stdout?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/check-cfg-test.stdout"}, {"sha": "7a26dbff98613561ef541b3d59c16702378e73be", "filename": "tests/rustdoc-ui/doctest/display-output.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fdisplay-output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fdisplay-output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fdoctest%2Fdisplay-output.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -3,7 +3,7 @@\n // check-pass\n // edition:2018\n // compile-flags:--test --test-args=--show-output\n-// normalize-stdout-test: \"tests/rustdoc-ui\" -> \"$$DIR\"\n+// normalize-stdout-test: \"tests/rustdoc-ui/doctest\" -> \"$$DIR\"\n // normalize-stdout-test \"finished in \\d+\\.\\d+s\" -> \"finished in $$TIME\"\n \n /// ```", "previous_filename": "tests/rustdoc-ui/display-output.rs"}, {"sha": "ad25d1ce54140a0305d9902a26b347a44e8822b9", "filename": "tests/rustdoc-ui/doctest/display-output.stdout", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fdisplay-output.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fdisplay-output.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fdoctest%2Fdisplay-output.stdout?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/display-output.stdout"}, {"sha": "75508f435b3caf2366735a65f3e5ef6853c43323", "filename": "tests/rustdoc-ui/doctest/doc-comment-multi-line-attr.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fdoc-comment-multi-line-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fdoc-comment-multi-line-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fdoctest%2Fdoc-comment-multi-line-attr.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -1,6 +1,6 @@\n // Regression test for #97440: Multiline inner attribute triggers ICE during doctest\n // compile-flags:--test\n-// normalize-stdout-test: \"tests/rustdoc-ui\" -> \"$$DIR\"\n+// normalize-stdout-test: \"tests/rustdoc-ui/doctest\" -> \"$$DIR\"\n // normalize-stdout-test \"finished in \\d+\\.\\d+s\" -> \"finished in $$TIME\"\n // check-pass\n ", "previous_filename": "tests/rustdoc-ui/doc-comment-multi-line-attr.rs"}, {"sha": "e47edbd2a81a013183637ae09a1ad1a9eca1ea1a", "filename": "tests/rustdoc-ui/doctest/doc-comment-multi-line-attr.stdout", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fdoc-comment-multi-line-attr.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fdoc-comment-multi-line-attr.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fdoctest%2Fdoc-comment-multi-line-attr.stdout?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/doc-comment-multi-line-attr.stdout"}, {"sha": "3b0b27edb7d086d011243a273752b142e56924c9", "filename": "tests/rustdoc-ui/doctest/doc-comment-multi-line-cfg-attr.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fdoc-comment-multi-line-cfg-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fdoc-comment-multi-line-cfg-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fdoctest%2Fdoc-comment-multi-line-cfg-attr.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -1,5 +1,5 @@\n // compile-flags:--test\n-// normalize-stdout-test: \"tests/rustdoc-ui\" -> \"$$DIR\"\n+// normalize-stdout-test: \"tests/rustdoc-ui/doctest\" -> \"$$DIR\"\n // normalize-stdout-test \"finished in \\d+\\.\\d+s\" -> \"finished in $$TIME\"\n // check-pass\n ", "previous_filename": "tests/rustdoc-ui/doc-comment-multi-line-cfg-attr.rs"}, {"sha": "bf3521e4f9177b2e0e45a25f307f3bf59521591c", "filename": "tests/rustdoc-ui/doctest/doc-comment-multi-line-cfg-attr.stdout", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fdoc-comment-multi-line-cfg-attr.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fdoc-comment-multi-line-cfg-attr.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fdoctest%2Fdoc-comment-multi-line-cfg-attr.stdout?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/doc-comment-multi-line-cfg-attr.stdout"}, {"sha": "12608f244507563109dc98373e1cbff31f4f5f7c", "filename": "tests/rustdoc-ui/doctest/doc-test-attr-pass.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fdoc-test-attr-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fdoc-test-attr-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fdoctest%2Fdoc-test-attr-pass.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/doc-test-attr-pass.rs"}, {"sha": "46178ad865a4c7b1bfb94ee73ec5f268264578b4", "filename": "tests/rustdoc-ui/doctest/doc-test-attr.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fdoc-test-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fdoc-test-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fdoctest%2Fdoc-test-attr.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/doc-test-attr.rs"}, {"sha": "5e6014954a49bb438b58cb5a6ddd93ac6be25ae2", "filename": "tests/rustdoc-ui/doctest/doc-test-attr.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fdoc-test-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fdoc-test-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fdoctest%2Fdoc-test-attr.stderr?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/doc-test-attr.stderr"}, {"sha": "9c1f4936eab31ee2eb1616a2efc290825acf3012", "filename": "tests/rustdoc-ui/doctest/doc-test-doctest-feature.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fdoc-test-doctest-feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fdoc-test-doctest-feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fdoctest%2Fdoc-test-doctest-feature.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -1,6 +1,6 @@\n // check-pass\n // compile-flags:--test\n-// normalize-stdout-test: \"tests/rustdoc-ui\" -> \"$$DIR\"\n+// normalize-stdout-test: \"tests/rustdoc-ui/doctest\" -> \"$$DIR\"\n // normalize-stdout-test \"finished in \\d+\\.\\d+s\" -> \"finished in $$TIME\"\n \n // Make sure `cfg(doctest)` is set when finding doctests but not inside", "previous_filename": "tests/rustdoc-ui/doc-test-doctest-feature.rs"}, {"sha": "d7de1f105228f47d73619062c223893d264ee35e", "filename": "tests/rustdoc-ui/doctest/doc-test-doctest-feature.stdout", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fdoc-test-doctest-feature.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fdoc-test-doctest-feature.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fdoctest%2Fdoc-test-doctest-feature.stdout?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/doc-test-doctest-feature.stdout"}, {"sha": "1f90d13af84fcc392504832caead83dde38628b2", "filename": "tests/rustdoc-ui/doctest/doc-test-rustdoc-feature.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fdoc-test-rustdoc-feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fdoc-test-rustdoc-feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fdoctest%2Fdoc-test-rustdoc-feature.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -1,6 +1,6 @@\n // check-pass\n // compile-flags:--test\n-// normalize-stdout-test: \"tests/rustdoc-ui\" -> \"$$DIR\"\n+// normalize-stdout-test: \"tests/rustdoc-ui/doctest\" -> \"$$DIR\"\n // normalize-stdout-test \"finished in \\d+\\.\\d+s\" -> \"finished in $$TIME\"\n \n #![feature(doc_cfg)]", "previous_filename": "tests/rustdoc-ui/doc-test-rustdoc-feature.rs"}, {"sha": "5b07fc4c87af518a13275ccde27acce0643a82e6", "filename": "tests/rustdoc-ui/doctest/doc-test-rustdoc-feature.stdout", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fdoc-test-rustdoc-feature.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fdoc-test-rustdoc-feature.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fdoctest%2Fdoc-test-rustdoc-feature.stdout?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/doc-test-rustdoc-feature.stdout"}, {"sha": "b0787be972f2f558b99b56c05fdebbdaeff5aa3f", "filename": "tests/rustdoc-ui/doctest/doctest-edition.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fdoctest-edition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fdoctest-edition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fdoctest%2Fdoctest-edition.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/doctest-edition.rs"}, {"sha": "8a3329aa3ed9a4bd2832327904abb3c2152fd44d", "filename": "tests/rustdoc-ui/doctest/doctest-edition.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fdoctest-edition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fdoctest-edition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fdoctest%2Fdoctest-edition.stderr?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/doctest-edition.stderr"}, {"sha": "a3bde6cb941038fb3e414d08c63e0b681a44af68", "filename": "tests/rustdoc-ui/doctest/doctest-multiline-crate-attribute.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fdoctest-multiline-crate-attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fdoctest-multiline-crate-attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fdoctest%2Fdoctest-multiline-crate-attribute.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -1,5 +1,5 @@\n // compile-flags:--test --test-args=--test-threads=1\n-// normalize-stdout-test: \"tests/rustdoc-ui\" -> \"$$DIR\"\n+// normalize-stdout-test: \"tests/rustdoc-ui/doctest\" -> \"$$DIR\"\n // normalize-stdout-test \"finished in \\d+\\.\\d+s\" -> \"finished in $$TIME\"\n // check-pass\n ", "previous_filename": "tests/rustdoc-ui/doctest-multiline-crate-attribute.rs"}, {"sha": "07a4f657dea6a15405d7ad22a0b570f1d20814f9", "filename": "tests/rustdoc-ui/doctest/doctest-multiline-crate-attribute.stdout", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fdoctest-multiline-crate-attribute.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fdoctest-multiline-crate-attribute.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fdoctest%2Fdoctest-multiline-crate-attribute.stdout?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/doctest-multiline-crate-attribute.stdout"}, {"sha": "26754b73f0bc0a23064e9eb1dcc84f5d773cf900", "filename": "tests/rustdoc-ui/doctest/doctest-output.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fdoctest-output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fdoctest-output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fdoctest%2Fdoctest-output.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -1,7 +1,7 @@\n // edition:2018\n // aux-build:extern_macros.rs\n // compile-flags:--test --test-args=--test-threads=1\n-// normalize-stdout-test: \"tests/rustdoc-ui\" -> \"$$DIR\"\n+// normalize-stdout-test: \"tests/rustdoc-ui/doctest\" -> \"$$DIR\"\n // normalize-stdout-test \"finished in \\d+\\.\\d+s\" -> \"finished in $$TIME\"\n // check-pass\n ", "previous_filename": "tests/rustdoc-ui/doctest-output.rs"}, {"sha": "35b0e366fb5cc3ce598c88415b85615bd8d84c40", "filename": "tests/rustdoc-ui/doctest/doctest-output.stdout", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fdoctest-output.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fdoctest-output.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fdoctest%2Fdoctest-output.stdout?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/doctest-output.stdout"}, {"sha": "53b3857dfde691d01f17aa9d185751267968b418", "filename": "tests/rustdoc-ui/doctest/failed-doctest-compile-fail.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Ffailed-doctest-compile-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Ffailed-doctest-compile-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fdoctest%2Ffailed-doctest-compile-fail.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -2,7 +2,7 @@\n // adapted to use that, and that normalize line can go away\n \n // compile-flags:--test\n-// normalize-stdout-test: \"tests/rustdoc-ui\" -> \"$$DIR\"\n+// normalize-stdout-test: \"tests/rustdoc-ui/doctest\" -> \"$$DIR\"\n // normalize-stdout-test \"finished in \\d+\\.\\d+s\" -> \"finished in $$TIME\"\n // failure-status: 101\n ", "previous_filename": "tests/rustdoc-ui/failed-doctest-compile-fail.rs"}, {"sha": "af3a90a74100f9bde4126829ae5524403552c864", "filename": "tests/rustdoc-ui/doctest/failed-doctest-compile-fail.stdout", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Ffailed-doctest-compile-fail.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Ffailed-doctest-compile-fail.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fdoctest%2Ffailed-doctest-compile-fail.stdout?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/failed-doctest-compile-fail.stdout"}, {"sha": "84e4d61603aefb05a4a4097a66d5985c22d788e1", "filename": "tests/rustdoc-ui/doctest/failed-doctest-extra-semicolon-on-item.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Ffailed-doctest-extra-semicolon-on-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Ffailed-doctest-extra-semicolon-on-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fdoctest%2Ffailed-doctest-extra-semicolon-on-item.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -2,7 +2,7 @@\n // adapted to use that, and that normalize line can go away\n \n // compile-flags:--test\n-// normalize-stdout-test: \"tests/rustdoc-ui\" -> \"$$DIR\"\n+// normalize-stdout-test: \"tests/rustdoc-ui/doctest\" -> \"$$DIR\"\n // normalize-stdout-test \"finished in \\d+\\.\\d+s\" -> \"finished in $$TIME\"\n // failure-status: 101\n ", "previous_filename": "tests/rustdoc-ui/failed-doctest-extra-semicolon-on-item.rs"}, {"sha": "61468b6c7457b3cdf3922f0fbc6eacdd64286898", "filename": "tests/rustdoc-ui/doctest/failed-doctest-extra-semicolon-on-item.stdout", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Ffailed-doctest-extra-semicolon-on-item.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Ffailed-doctest-extra-semicolon-on-item.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fdoctest%2Ffailed-doctest-extra-semicolon-on-item.stdout?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/failed-doctest-extra-semicolon-on-item.stdout"}, {"sha": "4e3b848fc02bc50f09d264775e589110184afb01", "filename": "tests/rustdoc-ui/doctest/failed-doctest-missing-codes.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Ffailed-doctest-missing-codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Ffailed-doctest-missing-codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fdoctest%2Ffailed-doctest-missing-codes.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -2,7 +2,7 @@\n // adapted to use that, and that normalize line can go away\n \n // compile-flags:--test\n-// normalize-stdout-test: \"tests/rustdoc-ui\" -> \"$$DIR\"\n+// normalize-stdout-test: \"tests/rustdoc-ui/doctest\" -> \"$$DIR\"\n // normalize-stdout-test \"finished in \\d+\\.\\d+s\" -> \"finished in $$TIME\"\n // failure-status: 101\n ", "previous_filename": "tests/rustdoc-ui/failed-doctest-missing-codes.rs"}, {"sha": "bacbb47b5f9ff4ad28b94258e85b953376413889", "filename": "tests/rustdoc-ui/doctest/failed-doctest-missing-codes.stdout", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Ffailed-doctest-missing-codes.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Ffailed-doctest-missing-codes.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fdoctest%2Ffailed-doctest-missing-codes.stdout?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/failed-doctest-missing-codes.stdout"}, {"sha": "6bc6c33c76ecc71682e93f45c76dd947f19cd12d", "filename": "tests/rustdoc-ui/doctest/failed-doctest-output-windows.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Ffailed-doctest-output-windows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Ffailed-doctest-output-windows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fdoctest%2Ffailed-doctest-output-windows.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -7,7 +7,7 @@\n \n // compile-flags:--test --test-args --test-threads=1\n // rustc-env:RUST_BACKTRACE=0\n-// normalize-stdout-test: \"tests/rustdoc-ui\" -> \"$$DIR\"\n+// normalize-stdout-test: \"tests/rustdoc-ui/doctest\" -> \"$$DIR\"\n // normalize-stdout-test \"finished in \\d+\\.\\d+s\" -> \"finished in $$TIME\"\n // failure-status: 101\n ", "previous_filename": "tests/rustdoc-ui/failed-doctest-output-windows.rs"}, {"sha": "6c147054da3225cfa13f521f78fe3922d1024ef7", "filename": "tests/rustdoc-ui/doctest/failed-doctest-output-windows.stdout", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Ffailed-doctest-output-windows.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Ffailed-doctest-output-windows.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fdoctest%2Ffailed-doctest-output-windows.stdout?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/failed-doctest-output-windows.stdout"}, {"sha": "3e1312382ee8706a11f23ebfa284c109c801d713", "filename": "tests/rustdoc-ui/doctest/failed-doctest-output.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Ffailed-doctest-output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Ffailed-doctest-output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fdoctest%2Ffailed-doctest-output.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -7,7 +7,7 @@\n \n // compile-flags:--test --test-args --test-threads=1\n // rustc-env:RUST_BACKTRACE=0\n-// normalize-stdout-test: \"tests/rustdoc-ui\" -> \"$$DIR\"\n+// normalize-stdout-test: \"tests/rustdoc-ui/doctest\" -> \"$$DIR\"\n // normalize-stdout-test \"finished in \\d+\\.\\d+s\" -> \"finished in $$TIME\"\n // failure-status: 101\n ", "previous_filename": "tests/rustdoc-ui/failed-doctest-output.rs"}, {"sha": "630198a561af00db927e045cd397d35a6673f173", "filename": "tests/rustdoc-ui/doctest/failed-doctest-output.stdout", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Ffailed-doctest-output.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Ffailed-doctest-output.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fdoctest%2Ffailed-doctest-output.stdout?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/failed-doctest-output.stdout"}, {"sha": "36284e814f3c406a770d114d8169be273dfed397", "filename": "tests/rustdoc-ui/doctest/failed-doctest-should-panic.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Ffailed-doctest-should-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Ffailed-doctest-should-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fdoctest%2Ffailed-doctest-should-panic.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -2,7 +2,7 @@\n // adapted to use that, and that normalize line can go away\n \n // compile-flags:--test\n-// normalize-stdout-test: \"tests/rustdoc-ui\" -> \"$$DIR\"\n+// normalize-stdout-test: \"tests/rustdoc-ui/doctest\" -> \"$$DIR\"\n // normalize-stdout-test \"finished in \\d+\\.\\d+s\" -> \"finished in $$TIME\"\n // failure-status: 101\n ", "previous_filename": "tests/rustdoc-ui/failed-doctest-should-panic.rs"}, {"sha": "57a20092a5d6c588825aa978cf2325ebe1740603", "filename": "tests/rustdoc-ui/doctest/failed-doctest-should-panic.stdout", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Ffailed-doctest-should-panic.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Ffailed-doctest-should-panic.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fdoctest%2Ffailed-doctest-should-panic.stdout?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/failed-doctest-should-panic.stdout"}, {"sha": "4ead621482bfdd72c117961aa5d2d8ff552d0ecc", "filename": "tests/rustdoc-ui/doctest/no-run-flag-error.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fno-run-flag-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fno-run-flag-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fdoctest%2Fno-run-flag-error.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/no-run-flag-error.rs"}, {"sha": "d032646c365c74c3dcf254a5ead4d1749bf48fa1", "filename": "tests/rustdoc-ui/doctest/no-run-flag-error.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fno-run-flag-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fno-run-flag-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fdoctest%2Fno-run-flag-error.stderr?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/no-run-flag-error.stderr"}, {"sha": "1cf3b7c4bb3d0dba1b40bef4ee18f13598c48681", "filename": "tests/rustdoc-ui/doctest/no-run-flag.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fno-run-flag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fno-run-flag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fdoctest%2Fno-run-flag.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -2,7 +2,7 @@\n \n // check-pass\n // compile-flags:-Z unstable-options --test --no-run --test-args=--test-threads=1\n-// normalize-stdout-test: \"tests/rustdoc-ui\" -> \"$$DIR\"\n+// normalize-stdout-test: \"tests/rustdoc-ui/doctest\" -> \"$$DIR\"\n // normalize-stdout-test \"finished in \\d+\\.\\d+s\" -> \"finished in $$TIME\"\n \n /// ```", "previous_filename": "tests/rustdoc-ui/no-run-flag.rs"}, {"sha": "02f28aaf60da054a6040cb29927dd9b3ea3af28f", "filename": "tests/rustdoc-ui/doctest/no-run-flag.stdout", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fno-run-flag.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fno-run-flag.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fdoctest%2Fno-run-flag.stdout?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/no-run-flag.stdout"}, {"sha": "ce487a43db418cb3f00927a3d7bd31b39da8a871", "filename": "tests/rustdoc-ui/doctest/nocapture-fail.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fnocapture-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fnocapture-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fdoctest%2Fnocapture-fail.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -1,7 +1,7 @@\n // check-pass\n // compile-flags:--test -Zunstable-options --nocapture\n-// normalize-stderr-test: \"tests/rustdoc-ui\" -> \"$$DIR\"\n-// normalize-stdout-test: \"tests/rustdoc-ui\" -> \"$$DIR\"\n+// normalize-stderr-test: \"tests/rustdoc-ui/doctest\" -> \"$$DIR\"\n+// normalize-stdout-test: \"tests/rustdoc-ui/doctest\" -> \"$$DIR\"\n // normalize-stdout-test \"finished in \\d+\\.\\d+s\" -> \"finished in $$TIME\"\n \n /// ```compile_fail", "previous_filename": "tests/rustdoc-ui/nocapture-fail.rs"}, {"sha": "b65b622c1ed4b5965539325ed02f8b51e936c5ac", "filename": "tests/rustdoc-ui/doctest/nocapture-fail.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fnocapture-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fnocapture-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fdoctest%2Fnocapture-fail.stderr?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/nocapture-fail.stderr"}, {"sha": "754f77db53ca3a535ad4a25565a389499eb89d53", "filename": "tests/rustdoc-ui/doctest/nocapture-fail.stdout", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fnocapture-fail.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fnocapture-fail.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fdoctest%2Fnocapture-fail.stdout?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/nocapture-fail.stdout"}, {"sha": "25fbcf857e256c1d9d14a6f60ccb41d85d327d0b", "filename": "tests/rustdoc-ui/doctest/nocapture.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fnocapture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fnocapture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fdoctest%2Fnocapture.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -1,6 +1,6 @@\n // check-pass\n // compile-flags:--test -Zunstable-options --nocapture\n-// normalize-stdout-test: \"tests/rustdoc-ui\" -> \"$$DIR\"\n+// normalize-stdout-test: \"tests/rustdoc-ui/doctest\" -> \"$$DIR\"\n // normalize-stdout-test \"finished in \\d+\\.\\d+s\" -> \"finished in $$TIME\"\n \n /// ```", "previous_filename": "tests/rustdoc-ui/nocapture.rs"}, {"sha": "af6415db3c72404d1adfed96a44dde1c9af0f416", "filename": "tests/rustdoc-ui/doctest/nocapture.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fnocapture.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fnocapture.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fdoctest%2Fnocapture.stderr?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/nocapture.stderr"}, {"sha": "4880e75da706227b5b992429e9361f1d871f3066", "filename": "tests/rustdoc-ui/doctest/nocapture.stdout", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fnocapture.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fnocapture.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fdoctest%2Fnocapture.stdout?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/nocapture.stdout"}, {"sha": "a1f9f8dca083ecf7c7eda6a5f3e129133a99d1f0", "filename": "tests/rustdoc-ui/doctest/private-doc-test.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fprivate-doc-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fprivate-doc-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fdoctest%2Fprivate-doc-test.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/private-doc-test.rs"}, {"sha": "1a3d6cc636d31e37c78ba94af760fe90c3557614", "filename": "tests/rustdoc-ui/doctest/private-item-doc-test.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fprivate-item-doc-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fprivate-item-doc-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fdoctest%2Fprivate-item-doc-test.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/private-item-doc-test.rs"}, {"sha": "5df6132987c9fe4f6eda4291cbf97f538ebc7e72", "filename": "tests/rustdoc-ui/doctest/private-item-doc-test.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fprivate-item-doc-test.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fprivate-item-doc-test.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fdoctest%2Fprivate-item-doc-test.stderr?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/private-item-doc-test.stderr"}, {"sha": "7cc62b38cc26080174a39ef01c3ff1b64176dfce", "filename": "tests/rustdoc-ui/doctest/private-public-item-doc-test.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fprivate-public-item-doc-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fprivate-public-item-doc-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fdoctest%2Fprivate-public-item-doc-test.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/private-public-item-doc-test.rs"}, {"sha": "f50dbd1844e7afc0972a8a764c2921e241504d5f", "filename": "tests/rustdoc-ui/doctest/private-public-item-doc-test.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fprivate-public-item-doc-test.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fprivate-public-item-doc-test.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fdoctest%2Fprivate-public-item-doc-test.stderr?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/private-public-item-doc-test.stderr"}, {"sha": "b86a53305a175fb66c83a60288dc50396e35abd7", "filename": "tests/rustdoc-ui/doctest/public-reexported-item-doc-test.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fpublic-reexported-item-doc-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Fpublic-reexported-item-doc-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fdoctest%2Fpublic-reexported-item-doc-test.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/public-reexported-item-doc-test.rs"}, {"sha": "e9b2754794a78c10ebb0536c2bc8db28c0f42858", "filename": "tests/rustdoc-ui/doctest/run-directory.correct.stdout", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Frun-directory.correct.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Frun-directory.correct.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fdoctest%2Frun-directory.correct.stdout?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/run-directory.correct.stdout"}, {"sha": "97a5dbc5c0cd19112a8b6c02652880f568ca197f", "filename": "tests/rustdoc-ui/doctest/run-directory.incorrect.stdout", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Frun-directory.incorrect.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Frun-directory.incorrect.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fdoctest%2Frun-directory.incorrect.stdout?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/run-directory.incorrect.stdout"}, {"sha": "1ff0af2d17cb3dcc7cf32924babda1416a61c7d7", "filename": "tests/rustdoc-ui/doctest/run-directory.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Frun-directory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Frun-directory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fdoctest%2Frun-directory.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -4,20 +4,20 @@\n // check-pass\n // [correct]compile-flags:--test --test-run-directory={{src-base}}\n // [incorrect]compile-flags:--test --test-run-directory={{src-base}}/coverage\n-// normalize-stdout-test: \"tests/rustdoc-ui\" -> \"$$DIR\"\n+// normalize-stdout-test: \"tests/rustdoc-ui/doctest\" -> \"$$DIR\"\n // normalize-stdout-test \"finished in \\d+\\.\\d+s\" -> \"finished in $$TIME\"\n \n /// ```\n /// assert_eq!(\n-///     std::fs::read_to_string(\"run-directory.rs\").unwrap(),\n+///     std::fs::read_to_string(\"doctest/run-directory.rs\").unwrap(),\n ///     include_str!(\"run-directory.rs\"),\n /// );\n /// ```\n #[cfg(correct)]\n pub fn foo() {}\n \n /// ```\n-/// assert!(std::fs::read_to_string(\"run-directory.rs\").is_err());\n+/// assert!(std::fs::read_to_string(\"doctest/run-directory.rs\").is_err());\n /// ```\n #[cfg(incorrect)]\n pub fn foo() {}", "previous_filename": "tests/rustdoc-ui/run-directory.rs"}, {"sha": "a05390238784d28b1ab6443670bb872a075f5179", "filename": "tests/rustdoc-ui/doctest/test-compile-fail1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Ftest-compile-fail1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Ftest-compile-fail1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fdoctest%2Ftest-compile-fail1.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/test-compile-fail1.rs"}, {"sha": "72915e46becd34896f75647ea492afd871300163", "filename": "tests/rustdoc-ui/doctest/test-compile-fail1.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Ftest-compile-fail1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Ftest-compile-fail1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fdoctest%2Ftest-compile-fail1.stderr?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/test-compile-fail1.stderr"}, {"sha": "651ded0a0479380e5b302c64a106d1abf36471bc", "filename": "tests/rustdoc-ui/doctest/test-compile-fail2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Ftest-compile-fail2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Ftest-compile-fail2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fdoctest%2Ftest-compile-fail2.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/test-compile-fail2.rs"}, {"sha": "cee5b63cf509720c4d62be3bc131f13452edfaf2", "filename": "tests/rustdoc-ui/doctest/test-compile-fail2.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Ftest-compile-fail2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Ftest-compile-fail2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fdoctest%2Ftest-compile-fail2.stderr?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/test-compile-fail2.stderr"}, {"sha": "faa30ad836712d275f527acda79634a9f71240fc", "filename": "tests/rustdoc-ui/doctest/test-compile-fail3.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Ftest-compile-fail3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Ftest-compile-fail3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fdoctest%2Ftest-compile-fail3.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/test-compile-fail3.rs"}, {"sha": "fab801b3beaeaec049388d3856dbc741c39014f0", "filename": "tests/rustdoc-ui/doctest/test-compile-fail3.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Ftest-compile-fail3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Ftest-compile-fail3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fdoctest%2Ftest-compile-fail3.stderr?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/test-compile-fail3.stderr"}, {"sha": "fd651d1a3442151e3e8bc2b9267e8ba32cd81612", "filename": "tests/rustdoc-ui/doctest/test-no_std.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Ftest-no_std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Ftest-no_std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fdoctest%2Ftest-no_std.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -1,5 +1,5 @@\n // compile-flags:--test\n-// normalize-stdout-test: \"tests/rustdoc-ui\" -> \"$$DIR\"\n+// normalize-stdout-test: \"tests/rustdoc-ui/doctest\" -> \"$$DIR\"\n // normalize-stdout-test \"finished in \\d+\\.\\d+s\" -> \"finished in $$TIME\"\n // check-pass\n ", "previous_filename": "tests/rustdoc-ui/test-no_std.rs"}, {"sha": "8d5a30804c1e22e097e8a045f293f595e390b619", "filename": "tests/rustdoc-ui/doctest/test-no_std.stdout", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Ftest-no_std.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Ftest-no_std.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fdoctest%2Ftest-no_std.stdout?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/test-no_std.stdout"}, {"sha": "036d37f9db2b263c16830790eb118694633659f0", "filename": "tests/rustdoc-ui/doctest/test-type.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Ftest-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Ftest-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fdoctest%2Ftest-type.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -1,6 +1,6 @@\n // compile-flags: --test --test-args=--test-threads=1\n // check-pass\n-// normalize-stdout-test: \"tests/rustdoc-ui\" -> \"$$DIR\"\n+// normalize-stdout-test: \"tests/rustdoc-ui/doctest\" -> \"$$DIR\"\n // normalize-stdout-test \"finished in \\d+\\.\\d+s\" -> \"finished in $$TIME\"\n \n /// ```", "previous_filename": "tests/rustdoc-ui/test-type.rs"}, {"sha": "a66fd240d34c49c3af71529ca2c218c2d5fd91c2", "filename": "tests/rustdoc-ui/doctest/test-type.stdout", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Ftest-type.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Ftest-type.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fdoctest%2Ftest-type.stdout?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/test-type.stdout"}, {"sha": "fd8b2094d020196fa29798247848c69ba32eb592", "filename": "tests/rustdoc-ui/doctest/unparseable-doc-test.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Funparseable-doc-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Funparseable-doc-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fdoctest%2Funparseable-doc-test.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -1,5 +1,5 @@\n // compile-flags: --test\n-// normalize-stdout-test: \"tests/rustdoc-ui\" -> \"$$DIR\"\n+// normalize-stdout-test: \"tests/rustdoc-ui/doctest\" -> \"$$DIR\"\n // normalize-stdout-test \"finished in \\d+\\.\\d+s\" -> \"finished in $$TIME\"\n // failure-status: 101\n // rustc-env: RUST_BACKTRACE=0", "previous_filename": "tests/rustdoc-ui/unparseable-doc-test.rs"}, {"sha": "2641c66f25e7703433bc668058a770aad458c7d9", "filename": "tests/rustdoc-ui/doctest/unparseable-doc-test.stdout", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Funparseable-doc-test.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fdoctest%2Funparseable-doc-test.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fdoctest%2Funparseable-doc-test.stdout?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/unparseable-doc-test.stdout"}, {"sha": "87620d74ee6455d5d37118b089a252a29d6c8cdf", "filename": "tests/rustdoc-ui/generate-link-to-definition/generate-link-to-definition-opt-unstable.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fgenerate-link-to-definition%2Fgenerate-link-to-definition-opt-unstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fgenerate-link-to-definition%2Fgenerate-link-to-definition-opt-unstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fgenerate-link-to-definition%2Fgenerate-link-to-definition-opt-unstable.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/generate-link-to-definition-opt-unstable.rs"}, {"sha": "a8ddf91bcbf15acad8d1e2e0bca0fa8f7a4592a4", "filename": "tests/rustdoc-ui/generate-link-to-definition/generate-link-to-definition-opt-unstable.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fgenerate-link-to-definition%2Fgenerate-link-to-definition-opt-unstable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fgenerate-link-to-definition%2Fgenerate-link-to-definition-opt-unstable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fgenerate-link-to-definition%2Fgenerate-link-to-definition-opt-unstable.stderr?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/generate-link-to-definition-opt-unstable.stderr"}, {"sha": "8f4f561b44dcc5c5c4a172a9f6ca006e1e9eeab7", "filename": "tests/rustdoc-ui/generate-link-to-definition/generate-link-to-definition-opt.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fgenerate-link-to-definition%2Fgenerate-link-to-definition-opt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fgenerate-link-to-definition%2Fgenerate-link-to-definition-opt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fgenerate-link-to-definition%2Fgenerate-link-to-definition-opt.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/generate-link-to-definition-opt.rs"}, {"sha": "4c8c607e7da231243f3b67bd84da85c73c3996b2", "filename": "tests/rustdoc-ui/generate-link-to-definition/generate-link-to-definition-opt.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fgenerate-link-to-definition%2Fgenerate-link-to-definition-opt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fgenerate-link-to-definition%2Fgenerate-link-to-definition-opt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fgenerate-link-to-definition%2Fgenerate-link-to-definition-opt.stderr?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/generate-link-to-definition-opt.stderr"}, {"sha": "da5142087ddee8a59322bc0602e9d307566f2c3d", "filename": "tests/rustdoc-ui/generate-link-to-definition/generate-link-to-definition-opt2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fgenerate-link-to-definition%2Fgenerate-link-to-definition-opt2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fgenerate-link-to-definition%2Fgenerate-link-to-definition-opt2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fgenerate-link-to-definition%2Fgenerate-link-to-definition-opt2.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/generate-link-to-definition-opt2.rs"}, {"sha": "4c8c607e7da231243f3b67bd84da85c73c3996b2", "filename": "tests/rustdoc-ui/generate-link-to-definition/generate-link-to-definition-opt2.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fgenerate-link-to-definition%2Fgenerate-link-to-definition-opt2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fgenerate-link-to-definition%2Fgenerate-link-to-definition-opt2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fgenerate-link-to-definition%2Fgenerate-link-to-definition-opt2.stderr?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/generate-link-to-definition-opt2.stderr"}, {"sha": "0976515f4a42610f9f3eb8417c1edbacbdd3274b", "filename": "tests/rustdoc-ui/intra-doc/assoc-item-not-in-scope.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fintra-doc%2Fassoc-item-not-in-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fintra-doc%2Fassoc-item-not-in-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fintra-doc%2Fassoc-item-not-in-scope.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/assoc-item-not-in-scope.rs"}, {"sha": "04594ad414250cc1d88072e6d7e764992b86f43b", "filename": "tests/rustdoc-ui/intra-doc/assoc-item-not-in-scope.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fintra-doc%2Fassoc-item-not-in-scope.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fintra-doc%2Fassoc-item-not-in-scope.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fintra-doc%2Fassoc-item-not-in-scope.stderr?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/assoc-item-not-in-scope.stderr"}, {"sha": "09da124b16206c2210e08156388dac3770905185", "filename": "tests/rustdoc-ui/intra-doc/deny-intra-link-resolution-failure.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fintra-doc%2Fdeny-intra-link-resolution-failure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fintra-doc%2Fdeny-intra-link-resolution-failure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fintra-doc%2Fdeny-intra-link-resolution-failure.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/deny-intra-link-resolution-failure.rs"}, {"sha": "3e08354a61dea7169c4f2bd8dbf37e5aaaa99d52", "filename": "tests/rustdoc-ui/intra-doc/deny-intra-link-resolution-failure.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fintra-doc%2Fdeny-intra-link-resolution-failure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fintra-doc%2Fdeny-intra-link-resolution-failure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fintra-doc%2Fdeny-intra-link-resolution-failure.stderr?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/deny-intra-link-resolution-failure.stderr"}, {"sha": "f2e66b77bf3eaf54e1b5b98e5ed1bb78974d0d7f", "filename": "tests/rustdoc-ui/intra-doc/pub-export-lint.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fintra-doc%2Fpub-export-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fintra-doc%2Fpub-export-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fintra-doc%2Fpub-export-lint.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/pub-export-lint.rs"}, {"sha": "81ef799617ccdde9d7088b113c3cdafc97bec3bc", "filename": "tests/rustdoc-ui/intra-doc/pub-export-lint.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fintra-doc%2Fpub-export-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fintra-doc%2Fpub-export-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fintra-doc%2Fpub-export-lint.stderr?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/pub-export-lint.stderr"}, {"sha": "71bd2c522ff86e295ffddf8f05a5f32cf59bb855", "filename": "tests/rustdoc-ui/intra-doc/reference-link-reports-error-once.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fintra-doc%2Freference-link-reports-error-once.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fintra-doc%2Freference-link-reports-error-once.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fintra-doc%2Freference-link-reports-error-once.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/reference-link-reports-error-once.rs"}, {"sha": "2ab67090f66e69c36c1c61ea36400ddde83ae08d", "filename": "tests/rustdoc-ui/intra-doc/reference-link-reports-error-once.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fintra-doc%2Freference-link-reports-error-once.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fintra-doc%2Freference-link-reports-error-once.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fintra-doc%2Freference-link-reports-error-once.stderr?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/reference-link-reports-error-once.stderr"}, {"sha": "e81e034465d7f9589c04cbde87378ac4d7aa772a", "filename": "tests/rustdoc-ui/intra-doc/reference-links.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fintra-doc%2Freference-links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fintra-doc%2Freference-links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fintra-doc%2Freference-links.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/reference-links.rs"}, {"sha": "c98a2fd7ce69020e8034dabbea1c36fed4c782e2", "filename": "tests/rustdoc-ui/intra-doc/reference-links.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fintra-doc%2Freference-links.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fintra-doc%2Freference-links.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fintra-doc%2Freference-links.stderr?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/reference-links.stderr"}, {"sha": "c920a815fda756d80955d3e111b95cc4e99b9d9a", "filename": "tests/rustdoc-ui/issue-110629-private-type-cycle-dyn.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissue-110629-private-type-cycle-dyn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissue-110629-private-type-cycle-dyn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fissue-110629-private-type-cycle-dyn.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -0,0 +1,12 @@\n+type Bar<'a, 'b> = Box<dyn PartialEq<Bar<'a, 'b>>>;\n+//~^ ERROR cycle detected when expanding type alias\n+\n+fn bar<'a, 'b>(i: &'a i32) -> Bar<'a, 'b> {\n+    Box::new(i)\n+}\n+\n+fn main() {\n+    let meh = 42;\n+    let muh = 42;\n+    assert!(bar(&meh) == bar(&muh));\n+}"}, {"sha": "79e1b753112b843b71cfae486e35541eae35ec42", "filename": "tests/rustdoc-ui/issue-110629-private-type-cycle-dyn.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissue-110629-private-type-cycle-dyn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissue-110629-private-type-cycle-dyn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fissue-110629-private-type-cycle-dyn.stderr?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -0,0 +1,25 @@\n+error[E0391]: cycle detected when expanding type alias `Bar`\n+  --> $DIR/issue-110629-private-type-cycle-dyn.rs:1:38\n+   |\n+LL | type Bar<'a, 'b> = Box<dyn PartialEq<Bar<'a, 'b>>>;\n+   |                                      ^^^^^^^^^^^\n+   |\n+   = note: ...which immediately requires expanding type alias `Bar` again\n+   = note: type aliases cannot be recursive\n+   = help: consider using a struct, enum, or union instead to break the cycle\n+   = help: see <https://doc.rust-lang.org/reference/types.html#recursive-types> for more information\n+note: cycle used when collecting item types in top-level module\n+  --> $DIR/issue-110629-private-type-cycle-dyn.rs:1:1\n+   |\n+LL | / type Bar<'a, 'b> = Box<dyn PartialEq<Bar<'a, 'b>>>;\n+LL | |\n+LL | |\n+LL | | fn bar<'a, 'b>(i: &'a i32) -> Bar<'a, 'b> {\n+...  |\n+LL | |     assert!(bar(&meh) == bar(&muh));\n+LL | | }\n+   | |_^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0391`."}, {"sha": "2d46ddbfa6e5296799353981ad48c3b78135089d", "filename": "tests/rustdoc-ui/issue-110629-private-type-cycle.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissue-110629-private-type-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissue-110629-private-type-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fissue-110629-private-type-cycle.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -0,0 +1,15 @@\n+// check-pass\n+\n+#![feature(type_alias_impl_trait)]\n+\n+type Bar<'a, 'b> = impl PartialEq<Bar<'a, 'b>> + std::fmt::Debug;\n+\n+fn bar<'a, 'b>(i: &'a i32) -> Bar<'a, 'b> {\n+    i\n+}\n+\n+fn main() {\n+    let meh = 42;\n+    let muh = 42;\n+    assert_eq!(bar(&meh), bar(&muh));\n+}"}, {"sha": "877810f15d7fe7f69c5f70c659393d9c4f932151", "filename": "tests/rustdoc-ui/issues/auxiliary/empty-fn.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fauxiliary%2Fempty-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fauxiliary%2Fempty-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fissues%2Fauxiliary%2Fempty-fn.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/auxiliary/empty-fn.rs"}, {"sha": "57a365b3f386a4163044023f49b26d05c1019af3", "filename": "tests/rustdoc-ui/issues/auxiliary/issue-61592.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fauxiliary%2Fissue-61592.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fauxiliary%2Fissue-61592.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fissues%2Fauxiliary%2Fissue-61592.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/auxiliary/issue-61592.rs"}, {"sha": "0aaaeee105147a47890ac15a5032fef0b4ea5325", "filename": "tests/rustdoc-ui/issues/auxiliary/panic-handler.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fauxiliary%2Fpanic-handler.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fauxiliary%2Fpanic-handler.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fissues%2Fauxiliary%2Fpanic-handler.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/auxiliary/panic-handler.rs"}, {"sha": "648f9902908af8607dbca9bbee167b6114f4b5fe", "filename": "tests/rustdoc-ui/issues/issue-101076.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fissue-101076.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fissue-101076.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fissues%2Fissue-101076.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/issue-101076.rs"}, {"sha": "001784ac28561000f390c9b08d1f6a353896acdd", "filename": "tests/rustdoc-ui/issues/issue-102986.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fissue-102986.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fissue-102986.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fissues%2Fissue-102986.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/issue-102986.rs"}, {"sha": "3a573726c9727a4ce2edde9a190ed8a4b85d257c", "filename": "tests/rustdoc-ui/issues/issue-102986.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fissue-102986.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fissue-102986.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fissues%2Fissue-102986.stderr?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/issue-102986.stderr"}, {"sha": "36f42fb15f7e426958718afb548ee4bc46528a91", "filename": "tests/rustdoc-ui/issues/issue-103997.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fissue-103997.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fissue-103997.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fissues%2Fissue-103997.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/issue-103997.rs"}, {"sha": "c06db91496f86c4348487e55b8cc442a4d47fd10", "filename": "tests/rustdoc-ui/issues/issue-103997.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fissue-103997.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fissue-103997.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fissues%2Fissue-103997.stderr?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/issue-103997.stderr"}, {"sha": "ee1adc6a02914e0767f5f1a0ee9a09b8d9fdca60", "filename": "tests/rustdoc-ui/issues/issue-105334.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fissue-105334.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fissue-105334.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fissues%2Fissue-105334.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/issue-105334.rs"}, {"sha": "e163bb4db9ee609a3941feadec49b01cb213e8ce", "filename": "tests/rustdoc-ui/issues/issue-105334.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fissue-105334.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fissue-105334.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fissues%2Fissue-105334.stderr?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/issue-105334.stderr"}, {"sha": "154f069d8ffac43fbdfc70ac4e8bbd94db90d758", "filename": "tests/rustdoc-ui/issues/issue-105737.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fissue-105737.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fissue-105737.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fissues%2Fissue-105737.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/issue-105737.rs"}, {"sha": "2dd9beb17da9b4853b983ffda6c9ddab1c9aad1e", "filename": "tests/rustdoc-ui/issues/issue-105737.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fissue-105737.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fissue-105737.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fissues%2Fissue-105737.stderr?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/issue-105737.stderr"}, {"sha": "8f4172c0cbbbf8d30be44eb696917fa67af8df24", "filename": "tests/rustdoc-ui/issues/issue-105742.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fissue-105742.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fissue-105742.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fissues%2Fissue-105742.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/issue-105742.rs"}, {"sha": "cd53762ef9b2de78e1c70b9a60683f7c44e45116", "filename": "tests/rustdoc-ui/issues/issue-105742.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fissue-105742.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fissue-105742.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fissues%2Fissue-105742.stderr?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/issue-105742.stderr"}, {"sha": "6d51846b7d0c0d22cd648dd2f2d6d66f82f2dd20", "filename": "tests/rustdoc-ui/issues/issue-106213.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fissue-106213.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fissue-106213.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fissues%2Fissue-106213.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/issue-106213.rs"}, {"sha": "0a4ff69bafb347c744f5562ac1cdcd4c25beb8f5", "filename": "tests/rustdoc-ui/issues/issue-106213.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fissue-106213.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fissue-106213.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fissues%2Fissue-106213.stderr?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/issue-106213.stderr"}, {"sha": "71b497a9adc7312f5a0871523d6ce21cd6b6e1f0", "filename": "tests/rustdoc-ui/issues/issue-106226.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fissue-106226.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fissue-106226.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fissues%2Fissue-106226.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/issue-106226.rs"}, {"sha": "1c973dab61d89e143e87dbd50399cfd6de465985", "filename": "tests/rustdoc-ui/issues/issue-106226.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fissue-106226.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fissue-106226.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fissues%2Fissue-106226.stderr?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/issue-106226.stderr"}, {"sha": "13788df0fc99697e5796e3474fb734b8be34a709", "filename": "tests/rustdoc-ui/issues/issue-107918.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fissue-107918.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fissue-107918.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fissues%2Fissue-107918.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/issue-107918.rs"}, {"sha": "0ec8523222fbef9277446022a482d886d7ffd7d4", "filename": "tests/rustdoc-ui/issues/issue-109282-import-inline-merge.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fissue-109282-import-inline-merge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fissue-109282-import-inline-merge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fissues%2Fissue-109282-import-inline-merge.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/issue-109282-import-inline-merge.rs"}, {"sha": "e3154baf860a32ed360b09c49c286771a17db35e", "filename": "tests/rustdoc-ui/issues/issue-110900.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fissue-110900.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fissue-110900.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fissues%2Fissue-110900.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/issue-110900.rs"}, {"sha": "000b6a329c1a7ea869a8f11789fdf5c9f2bd4901", "filename": "tests/rustdoc-ui/issues/issue-58473-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fissue-58473-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fissue-58473-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fissues%2Fissue-58473-2.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/issue-58473-2.rs"}, {"sha": "44e1f58d0a0fbc64db81086ea998bb62f53cf1f5", "filename": "tests/rustdoc-ui/issues/issue-58473.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fissue-58473.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fissue-58473.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fissues%2Fissue-58473.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/issue-58473.rs"}, {"sha": "5b4fc5ee7006307ed2231ac43db97f5a7c34d6a4", "filename": "tests/rustdoc-ui/issues/issue-61592-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fissue-61592-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fissue-61592-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fissues%2Fissue-61592-2.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/issue-61592-2.rs"}, {"sha": "1b7f8bb552c0ce1201a6a6c908ba84ab2d7015e6", "filename": "tests/rustdoc-ui/issues/issue-61592-2.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fissue-61592-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fissue-61592-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fissues%2Fissue-61592-2.stderr?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/issue-61592-2.stderr"}, {"sha": "66772557f2c2fb165654ba8140aa28e6a02475ad", "filename": "tests/rustdoc-ui/issues/issue-61592.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fissue-61592.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fissue-61592.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fissues%2Fissue-61592.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/issue-61592.rs"}, {"sha": "9c9c9106f8ac3ea66677e9b06e035dd19fd3fd39", "filename": "tests/rustdoc-ui/issues/issue-61592.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fissue-61592.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fissue-61592.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fissues%2Fissue-61592.stderr?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/issue-61592.stderr"}, {"sha": "4bd8efeaa3b97514c6573170bbb7540b6c09c4f5", "filename": "tests/rustdoc-ui/issues/issue-61732.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fissue-61732.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fissue-61732.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fissues%2Fissue-61732.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/issue-61732.rs"}, {"sha": "d16ec6a853a5ca68da33ca341c170f9f3868c6b2", "filename": "tests/rustdoc-ui/issues/issue-61732.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fissue-61732.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fissue-61732.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fissues%2Fissue-61732.stderr?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/issue-61732.stderr"}, {"sha": "44c88b6183a8ef924e56acbe1bb2a04dc70833dd", "filename": "tests/rustdoc-ui/issues/issue-74134.private.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fissue-74134.private.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fissue-74134.private.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fissues%2Fissue-74134.private.stderr?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/issue-74134.private.stderr"}, {"sha": "5b1887b8310847b8a6bab7db446fa23bfe540abf", "filename": "tests/rustdoc-ui/issues/issue-74134.public.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fissue-74134.public.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fissue-74134.public.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fissues%2Fissue-74134.public.stderr?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/issue-74134.public.stderr"}, {"sha": "b1be9123aaf838cf4750c84dc06fb23d1f01b5cd", "filename": "tests/rustdoc-ui/issues/issue-74134.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fissue-74134.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fissue-74134.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fissues%2Fissue-74134.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/issue-74134.rs"}, {"sha": "e50f3995b83dda8fbd59cb5443143fd46d98b0d2", "filename": "tests/rustdoc-ui/issues/issue-79465.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fissue-79465.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fissue-79465.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fissues%2Fissue-79465.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/issue-79465.rs"}, {"sha": "d187a2e664a25fa1baafe0a134af0cf24db0f30d", "filename": "tests/rustdoc-ui/issues/issue-79465.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fissue-79465.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fissue-79465.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fissues%2Fissue-79465.stderr?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/issue-79465.stderr"}, {"sha": "eb0b9b380714e26d1e6750bb668f509e4138469f", "filename": "tests/rustdoc-ui/issues/issue-79467.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fissue-79467.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fissue-79467.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fissues%2Fissue-79467.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/issue-79467.rs"}, {"sha": "561513a432bb567722df9e6111036b41c57732d1", "filename": "tests/rustdoc-ui/issues/issue-79467.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fissue-79467.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fissue-79467.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fissues%2Fissue-79467.stderr?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/issue-79467.stderr"}, {"sha": "fc39424b793f640c2d4174028e7731958033adf1", "filename": "tests/rustdoc-ui/issues/issue-79494.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fissue-79494.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fissue-79494.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fissues%2Fissue-79494.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/issue-79494.rs"}, {"sha": "7ed5ed38247160d88ee0245662a485a8130fd8b1", "filename": "tests/rustdoc-ui/issues/issue-79494.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fissue-79494.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fissue-79494.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fissues%2Fissue-79494.stderr?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/issue-79494.stderr"}, {"sha": "f5ae16981ca116cc9ccd17c82ada5e1d6bfb9178", "filename": "tests/rustdoc-ui/issues/issue-80992.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fissue-80992.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fissue-80992.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fissues%2Fissue-80992.rs?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "patch": "@@ -1,6 +1,6 @@\n // check-pass\n // compile-flags:--test\n-// normalize-stdout-test: \"tests/rustdoc-ui\" -> \"$$DIR\"\n+// normalize-stdout-test: \"tests/rustdoc-ui/issues\" -> \"$$DIR\"\n // normalize-stdout-test \"finished in \\d+\\.\\d+s\" -> \"finished in $$TIME\"\n \n pub fn test() -> Result<(), ()> {", "previous_filename": "tests/rustdoc-ui/issue-80992.rs"}, {"sha": "d2b1cd1d550cf2a4201be07e5c7aea366073a1ee", "filename": "tests/rustdoc-ui/issues/issue-80992.stdout", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fissue-80992.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/3942cdf1bf0edd082a331ed9282b52eea0914fdd/tests%2Frustdoc-ui%2Fissues%2Fissue-80992.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fissues%2Fissue-80992.stdout?ref=3942cdf1bf0edd082a331ed9282b52eea0914fdd", "previous_filename": "tests/rustdoc-ui/issue-80992.stdout"}]}