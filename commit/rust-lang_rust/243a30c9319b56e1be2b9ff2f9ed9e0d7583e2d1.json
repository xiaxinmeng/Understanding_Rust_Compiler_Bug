{"sha": "243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0M2EzMGM5MzE5YjU2ZTFiZTJiOWZmMmY5ZWQ5ZTBkNzU4M2UyZDE=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-02-05T12:13:36Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-02-11T11:34:48Z"}, "message": "[breaking-change] don't glob import/export syntax::abi enum variants", "tree": {"sha": "2f4ff12804e185b63c8d8bfdeafe754a8a2c399a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f4ff12804e185b63c8d8bfdeafe754a8a2c399a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1", "html_url": "https://github.com/rust-lang/rust/commit/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47b0784ba8e62a2e1b877750baeae10d16555fff", "url": "https://api.github.com/repos/rust-lang/rust/commits/47b0784ba8e62a2e1b877750baeae10d16555fff", "html_url": "https://github.com/rust-lang/rust/commit/47b0784ba8e62a2e1b877750baeae10d16555fff"}], "stats": {"total": 378, "additions": 189, "deletions": 189}, "files": [{"sha": "f398c465ffe6e72b587eb6def6ebb34af52933be", "filename": "src/librustc/front/map/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1/src%2Flibrustc%2Ffront%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1/src%2Flibrustc%2Ffront%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fmap%2Fmod.rs?ref=243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1", "patch": "@@ -20,7 +20,7 @@ use middle::cstore::InlinedItem;\n use middle::cstore::InlinedItem as II;\n use middle::def_id::DefId;\n \n-use syntax::abi;\n+use syntax::abi::Abi;\n use syntax::ast::{self, Name, NodeId, DUMMY_NODE_ID};\n use syntax::codemap::{Span, Spanned};\n use syntax::parse::token;\n@@ -512,7 +512,7 @@ impl<'ast> Map<'ast> {\n         }\n     }\n \n-    pub fn get_foreign_abi(&self, id: NodeId) -> abi::Abi {\n+    pub fn get_foreign_abi(&self, id: NodeId) -> Abi {\n         let parent = self.get_parent(id);\n         let abi = match self.find_entry(parent) {\n             Some(EntryItem(_, i)) => {\n@@ -522,7 +522,7 @@ impl<'ast> Map<'ast> {\n                 }\n             }\n             /// Wrong but OK, because the only inlined foreign items are intrinsics.\n-            Some(RootInlinedParent(_)) => Some(abi::RustIntrinsic),\n+            Some(RootInlinedParent(_)) => Some(Abi::RustIntrinsic),\n             _ => None\n         };\n         match abi {"}, {"sha": "a763677db066109b203bc4a0b7a4224d1d564139", "filename": "src/librustc/middle/intrinsicck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs?ref=243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1", "patch": "@@ -17,7 +17,7 @@ use middle::ty::{self, Ty, TypeFoldable};\n \n use std::fmt;\n \n-use syntax::abi::RustIntrinsic;\n+use syntax::abi::Abi::RustIntrinsic;\n use syntax::ast;\n use syntax::codemap::Span;\n use rustc_front::intravisit::{self, Visitor, FnKind};"}, {"sha": "d34c3b742179c9555eccbefe37a50af89b5cb410", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1", "patch": "@@ -25,7 +25,7 @@ use session::config;\n use util::nodemap::NodeSet;\n \n use std::collections::HashSet;\n-use syntax::abi;\n+use syntax::abi::Abi;\n use syntax::ast;\n use syntax::attr;\n use rustc_front::hir;\n@@ -236,7 +236,7 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n             // participate in linkage after this product is produced)\n             if let ast_map::NodeItem(item) = *node {\n                 if let hir::ItemFn(_, _, _, abi, _, _) = item.node {\n-                    if abi != abi::Rust {\n+                    if abi != Abi::Rust {\n                         self.reachable_symbols.insert(search_item);\n                     }\n                 }"}, {"sha": "29355e0684d96cafc59f95f185b85f84e80bbfbb", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1", "patch": "@@ -46,7 +46,7 @@ use middle::ty::relate::TypeRelation;\n use std::cell::RefCell;\n use std::fmt;\n use std::rc::Rc;\n-use syntax::abi;\n+use syntax::abi::Abi;\n use rustc_front::hir;\n use util::common::ErrorReported;\n use util::nodemap::FnvHashMap;\n@@ -1288,7 +1288,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             // provide an impl, but only for suitable `fn` pointers\n             ty::TyBareFn(_, &ty::BareFnTy {\n                 unsafety: hir::Unsafety::Normal,\n-                abi: abi::Rust,\n+                abi: Abi::Rust,\n                 sig: ty::Binder(ty::FnSig {\n                     inputs: _,\n                     output: ty::FnConverging(_),"}, {"sha": "6307ec8bbd04f6e125ee690b400d8d9e3438e201", "filename": "src/librustc/middle/ty/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1/src%2Flibrustc%2Fmiddle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1/src%2Flibrustc%2Fmiddle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fcontext.rs?ref=243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1", "patch": "@@ -44,7 +44,7 @@ use std::borrow::Borrow;\n use std::cell::{Cell, RefCell, Ref};\n use std::hash::{Hash, Hasher};\n use std::rc::Rc;\n-use syntax::abi;\n+use syntax::abi::Abi;\n use syntax::ast::{self, Name, NodeId};\n use syntax::attr;\n use syntax::parse::token::special_idents;\n@@ -943,7 +943,7 @@ impl<'tcx> ctxt<'tcx> {\n         let input_args = input_tys.iter().cloned().collect();\n         self.mk_fn(Some(def_id), self.mk_bare_fn(BareFnTy {\n             unsafety: hir::Unsafety::Normal,\n-            abi: abi::Rust,\n+            abi: Abi::Rust,\n             sig: ty::Binder(ty::FnSig {\n                 inputs: input_args,\n                 output: ty::FnConverging(output),"}, {"sha": "a0939dc53dfcf23c3aaf301a56fc8cf59ce0084e", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1", "patch": "@@ -20,7 +20,7 @@ use middle::ty::{TyBox, TyTrait, TyInt, TyUint, TyInfer};\n use middle::ty::{self, Ty, TypeFoldable};\n \n use std::fmt;\n-use syntax::{abi};\n+use syntax::abi::Abi;\n use syntax::parse::token;\n use syntax::ast::CRATE_NODE_ID;\n use rustc_front::hir;\n@@ -814,7 +814,7 @@ impl<'tcx> fmt::Display for ty::TypeVariants<'tcx> {\n                     try!(write!(f, \"unsafe \"));\n                 }\n \n-                if bare_fn.abi != abi::Rust {\n+                if bare_fn.abi != Abi::Rust {\n                     try!(write!(f, \"extern {} \", bare_fn.abi));\n                 }\n "}, {"sha": "a6aef52caf6ed1b96cadc488c0a194b343086228", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1", "patch": "@@ -48,7 +48,7 @@\n use serialize::json::Json;\n use std::default::Default;\n use std::io::prelude::*;\n-use syntax::abi;\n+use syntax::abi::Abi;\n \n mod android_base;\n mod apple_base;\n@@ -262,13 +262,13 @@ impl Default for TargetOptions {\n \n impl Target {\n     /// Given a function ABI, turn \"System\" into the correct ABI for this target.\n-    pub fn adjust_abi(&self, abi: abi::Abi) -> abi::Abi {\n+    pub fn adjust_abi(&self, abi: Abi) -> Abi {\n         match abi {\n-            abi::System => {\n+            Abi::System => {\n                 if self.options.is_like_windows && self.arch == \"x86\" {\n-                    abi::Stdcall\n+                    Abi::Stdcall\n                 } else {\n-                    abi::C\n+                    Abi::C\n                 }\n             },\n             abi => abi"}, {"sha": "3220295d9b88aca9f1d06eb3158b70b6ce6d6231", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1", "patch": "@@ -32,7 +32,8 @@ use rustc_metadata::cstore::CStore;\n use rustc::front::map as hir_map;\n use rustc::session::{self, config};\n use std::rc::Rc;\n-use syntax::{abi, ast};\n+use syntax::ast;\n+use syntax::abi::Abi;\n use syntax::codemap::{MultiSpan, CodeMap, DUMMY_SP};\n use syntax::errors;\n use syntax::errors::emitter::Emitter;\n@@ -263,7 +264,7 @@ impl<'a, 'tcx> Env<'a, 'tcx> {\n         self.infcx.tcx.mk_fn(None,\n                              self.infcx.tcx.mk_bare_fn(ty::BareFnTy {\n                                  unsafety: hir::Unsafety::Normal,\n-                                 abi: abi::Rust,\n+                                 abi: Abi::Rust,\n                                  sig: ty::Binder(ty::FnSig {\n                                      inputs: input_args,\n                                      output: ty::FnConverging(output_ty),"}, {"sha": "091352bb8f8b7f79740e1642c613add9da490677", "filename": "src/librustc_front/print/pprust.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1/src%2Flibrustc_front%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1/src%2Flibrustc_front%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fprint%2Fpprust.rs?ref=243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1", "patch": "@@ -10,7 +10,7 @@\n \n pub use self::AnnNode::*;\n \n-use syntax::abi;\n+use syntax::abi::Abi;\n use syntax::ast;\n use syntax::codemap::{self, CodeMap, BytePos, Spanned};\n use syntax::errors;\n@@ -290,7 +290,7 @@ pub fn fun_to_string(decl: &hir::FnDecl,\n         try!(s.print_fn(decl,\n                         unsafety,\n                         constness,\n-                        abi::Rust,\n+                        Abi::Rust,\n                         Some(name),\n                         generics,\n                         opt_explicit_self,\n@@ -569,7 +569,7 @@ impl<'a> State<'a> {\n                 try!(self.print_fn(decl,\n                                    hir::Unsafety::Normal,\n                                    hir::Constness::NotConst,\n-                                   abi::Rust,\n+                                   Abi::Rust,\n                                    Some(item.name),\n                                    generics,\n                                    None,\n@@ -1916,7 +1916,7 @@ impl<'a> State<'a> {\n                     decl: &hir::FnDecl,\n                     unsafety: hir::Unsafety,\n                     constness: hir::Constness,\n-                    abi: abi::Abi,\n+                    abi: Abi,\n                     name: Option<ast::Name>,\n                     generics: &hir::Generics,\n                     opt_explicit_self: Option<&hir::ExplicitSelf_>,\n@@ -2250,7 +2250,7 @@ impl<'a> State<'a> {\n     }\n \n     pub fn print_ty_fn(&mut self,\n-                       abi: abi::Abi,\n+                       abi: Abi,\n                        unsafety: hir::Unsafety,\n                        decl: &hir::FnDecl,\n                        name: Option<ast::Name>,\n@@ -2331,10 +2331,10 @@ impl<'a> State<'a> {\n     }\n \n     pub fn print_opt_abi_and_extern_if_nondefault(&mut self,\n-                                                  opt_abi: Option<abi::Abi>)\n+                                                  opt_abi: Option<Abi>)\n                                                   -> io::Result<()> {\n         match opt_abi {\n-            Some(abi::Rust) => Ok(()),\n+            Some(Abi::Rust) => Ok(()),\n             Some(abi) => {\n                 try!(self.word_nbsp(\"extern\"));\n                 self.word_nbsp(&abi.to_string())\n@@ -2343,7 +2343,7 @@ impl<'a> State<'a> {\n         }\n     }\n \n-    pub fn print_extern_opt_abi(&mut self, opt_abi: Option<abi::Abi>) -> io::Result<()> {\n+    pub fn print_extern_opt_abi(&mut self, opt_abi: Option<Abi>) -> io::Result<()> {\n         match opt_abi {\n             Some(abi) => {\n                 try!(self.word_nbsp(\"extern\"));\n@@ -2356,7 +2356,7 @@ impl<'a> State<'a> {\n     pub fn print_fn_header_info(&mut self,\n                                 unsafety: hir::Unsafety,\n                                 constness: hir::Constness,\n-                                abi: abi::Abi,\n+                                abi: Abi,\n                                 vis: hir::Visibility)\n                                 -> io::Result<()> {\n         try!(word(&mut self.s, &visibility_qualified(vis, \"\")));\n@@ -2367,7 +2367,7 @@ impl<'a> State<'a> {\n             hir::Constness::Const => try!(self.word_nbsp(\"const\")),\n         }\n \n-        if abi != abi::Rust {\n+        if abi != Abi::Rust {\n             try!(self.word_nbsp(\"extern\"));\n             try!(self.word_nbsp(&abi.to_string()));\n         }"}, {"sha": "09cdab33c84452337eae234ef3455495f486565f", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1", "patch": "@@ -1039,7 +1039,7 @@ impl LintPass for MutableTransmutes {\n \n impl LateLintPass for MutableTransmutes {\n     fn check_expr(&mut self, cx: &LateContext, expr: &hir::Expr) {\n-        use syntax::abi::RustIntrinsic;\n+        use syntax::abi::Abi::RustIntrinsic;\n \n         let msg = \"mutating transmuted &mut T from &T may cause undefined behavior,\\\n                    consider instead using an UnsafeCell\";"}, {"sha": "fae40d7224b4897b1c086fcb9ded5637a47faa47", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1", "patch": "@@ -23,7 +23,8 @@ use lint::{LintPass, LateLintPass};\n use std::cmp;\n use std::{i8, i16, i32, i64, u8, u16, u32, u64, f32, f64};\n \n-use syntax::{abi, ast};\n+use syntax::ast;\n+use syntax::abi::Abi;\n use syntax::attr::{self, AttrMetaMethods};\n use syntax::codemap::{self, Span};\n \n@@ -558,10 +559,10 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n \n             ty::TyBareFn(None, bare_fn) => {\n                 match bare_fn.abi {\n-                    abi::Rust |\n-                    abi::RustIntrinsic |\n-                    abi::PlatformIntrinsic |\n-                    abi::RustCall => {\n+                    Abi::Rust |\n+                    Abi::RustIntrinsic |\n+                    Abi::PlatformIntrinsic |\n+                    Abi::RustCall => {\n                         return FfiUnsafe(\n                             \"found function pointer with Rust calling \\\n                              convention in foreign module; consider using an \\\n@@ -677,7 +678,7 @@ impl LateLintPass for ImproperCTypes {\n         }\n \n         if let hir::ItemForeignMod(ref nmod) = it.node {\n-            if nmod.abi != abi::RustIntrinsic && nmod.abi != abi::PlatformIntrinsic {\n+            if nmod.abi != Abi::RustIntrinsic && nmod.abi != Abi::PlatformIntrinsic {\n                 for ni in &nmod.items {\n                     match ni.node {\n                         hir::ForeignItemFn(ref decl, _) => check_foreign_fn(cx, &**decl),"}, {"sha": "d5aa091886eb1632c3e20b93f5e5ee037c88e251", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1", "patch": "@@ -31,7 +31,7 @@ use std::rc::Rc;\n use std::fs;\n \n use syntax::ast;\n-use syntax::abi;\n+use syntax::abi::Abi;\n use syntax::codemap::{self, Span, mk_sp, Pos};\n use syntax::parse;\n use syntax::attr;\n@@ -784,7 +784,7 @@ impl<'a, 'b> LocalCrateReader<'a, 'b> {\n     }\n \n     fn process_foreign_mod(&mut self, i: &hir::Item, fm: &hir::ForeignMod) {\n-        if fm.abi == abi::Rust || fm.abi == abi::RustIntrinsic || fm.abi == abi::PlatformIntrinsic {\n+        if fm.abi == Abi::Rust || fm.abi == Abi::RustIntrinsic || fm.abi == Abi::PlatformIntrinsic {\n             return;\n         }\n "}, {"sha": "f73d6f0de2c8d8b37c3bf1665ab6bb761a502999", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1", "patch": "@@ -51,7 +51,7 @@ use syntax::attr;\n use syntax::parse::token::{IdentInterner, special_idents};\n use syntax::parse::token;\n use syntax::ast;\n-use syntax::abi;\n+use syntax::abi::Abi;\n use syntax::codemap::{self, Span, BytePos, NO_EXPANSION};\n use syntax::print::pprust;\n use syntax::ptr::P;\n@@ -1701,7 +1701,7 @@ pub fn is_extern_fn(cdata: Cmd, id: DefIndex, tcx: &ty::ctxt) -> bool {\n     if let Fn = item_family(item_doc) {\n         let ty::TypeScheme { generics, ty } = get_type(cdata, id, tcx);\n         generics.types.is_empty() && match ty.sty {\n-            ty::TyBareFn(_, fn_ty) => fn_ty.abi != abi::Rust,\n+            ty::TyBareFn(_, fn_ty) => fn_ty.abi != Abi::Rust,\n             _ => false,\n         }\n     } else {"}, {"sha": "bcc506e96bbe1da17964826cbf163ba3049a4078", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1", "patch": "@@ -40,7 +40,7 @@ use std::io::prelude::*;\n use std::io::{Cursor, SeekFrom};\n use std::rc::Rc;\n use std::u32;\n-use syntax::abi;\n+use syntax::abi::Abi;\n use syntax::ast::{self, NodeId, Name, CRATE_NODE_ID, CrateNum};\n use syntax::codemap::BytePos;\n use syntax::attr;\n@@ -1381,7 +1381,7 @@ fn encode_info_for_foreign_item<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n                                           nitem: &hir::ForeignItem,\n                                           index: &mut CrateIndex<'tcx>,\n                                           path: PathElems,\n-                                          abi: abi::Abi) {\n+                                          abi: Abi) {\n     let def_id = ecx.tcx.map.local_def_id(nitem.id);\n \n     index.record(def_id, rbml_w);\n@@ -1393,7 +1393,7 @@ fn encode_info_for_foreign_item<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n         encode_family(rbml_w, FN_FAMILY);\n         encode_bounds_and_type_for_item(rbml_w, ecx, index, nitem.id);\n         encode_name(rbml_w, nitem.name);\n-        if abi == abi::RustIntrinsic || abi == abi::PlatformIntrinsic {\n+        if abi == Abi::RustIntrinsic || abi == Abi::PlatformIntrinsic {\n             encode_inlined_item(ecx, rbml_w, InlinedItemRef::Foreign(nitem));\n         }\n         encode_attributes(rbml_w, &*nitem.attrs);"}, {"sha": "be0c62f511fb86451c97743c84745ee73ce3a3d8", "filename": "src/librustc_trans/trans/attributes.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1/src%2Flibrustc_trans%2Ftrans%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1/src%2Flibrustc_trans%2Ftrans%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fattributes.rs?ref=243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1", "patch": "@@ -14,7 +14,7 @@ use llvm::{self, ValueRef, AttrHelper};\n use middle::ty;\n use middle::infer;\n use session::config::NoDebugInfo;\n-use syntax::abi;\n+use syntax::abi::Abi;\n pub use syntax::attr::InlineAttr;\n use syntax::ast;\n use rustc_front::hir;\n@@ -136,7 +136,7 @@ pub fn from_fn_type<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, fn_type: ty::Ty<'tcx\n             let infcx = infer::normalizing_infer_ctxt(ccx.tcx(), &ccx.tcx().tables);\n             function_type = infcx.closure_type(closure_did, substs);\n             let self_type = base::self_type_for_closure(ccx, closure_did, fn_type);\n-            (&function_type.sig, abi::RustCall, Some(self_type))\n+            (&function_type.sig, Abi::RustCall, Some(self_type))\n         }\n         _ => ccx.sess().bug(\"expected closure or function.\")\n     };\n@@ -151,7 +151,7 @@ pub fn from_fn_type<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, fn_type: ty::Ty<'tcx\n     // unpack the input ty's\n     let input_tys = match fn_type.sty {\n         ty::TyClosure(..) => {\n-            assert!(abi == abi::RustCall);\n+            assert!(abi == Abi::RustCall);\n \n             match fn_sig.inputs[0].sty {\n                 ty::TyTuple(ref inputs) => {\n@@ -162,7 +162,7 @@ pub fn from_fn_type<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, fn_type: ty::Ty<'tcx\n                 _ => ccx.sess().bug(\"expected tuple'd inputs\")\n             }\n         },\n-        ty::TyBareFn(..) if abi == abi::RustCall => {\n+        ty::TyBareFn(..) if abi == Abi::RustCall => {\n             let mut inputs = vec![fn_sig.inputs[0]];\n \n             match fn_sig.inputs[1].sty {"}, {"sha": "911229ded3daebf55d47d30b5213dfaa971caef4", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1", "patch": "@@ -100,7 +100,7 @@ use std::cell::{Cell, RefCell};\n use std::collections::{HashMap, HashSet};\n use std::str;\n use std::{i8, i16, i32, i64};\n-use syntax::abi::{Rust, RustCall, RustIntrinsic, PlatformIntrinsic, Abi};\n+use syntax::abi::Abi;\n use syntax::codemap::{Span, DUMMY_SP};\n use syntax::parse::token::InternedString;\n use syntax::attr::AttrMetaMethods;\n@@ -911,10 +911,10 @@ pub fn trans_external_path<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     match t.sty {\n         ty::TyBareFn(_, ref fn_ty) => {\n             match ccx.sess().target.target.adjust_abi(fn_ty.abi) {\n-                Rust | RustCall => {\n+                Abi::Rust | Abi::RustCall => {\n                     get_extern_rust_fn(ccx, t, &name[..], did)\n                 }\n-                RustIntrinsic | PlatformIntrinsic => {\n+                Abi::RustIntrinsic | Abi::PlatformIntrinsic => {\n                     ccx.sess().bug(\"unexpected intrinsic in trans_external_path\")\n                 }\n                 _ => {\n@@ -2031,7 +2031,7 @@ pub fn trans_closure<'a, 'b, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n            bcx.fcx.ccx.tn().val_to_string(bcx.fcx.llfn));\n \n     let has_tupled_arg = match closure_env {\n-        closure::ClosureEnv::NotClosure => abi == RustCall,\n+        closure::ClosureEnv::NotClosure => abi == Abi::RustCall,\n         _ => false,\n     };\n \n@@ -2503,7 +2503,7 @@ pub fn trans_item(ccx: &CrateContext, item: &hir::Item) {\n                 for (ref ccx, is_origin) in ccx.maybe_iter(!from_external && trans_everywhere) {\n                     let llfn = get_item_val(ccx, item.id);\n                     let empty_substs = ccx.tcx().mk_substs(Substs::trans_empty());\n-                    if abi != Rust {\n+                    if abi != Abi::Rust {\n                         foreign::trans_rust_fn_with_foreign_abi(ccx,\n                                                                 &**decl,\n                                                                 &**body,\n@@ -2607,12 +2607,12 @@ fn register_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                          node_type: Ty<'tcx>)\n                          -> ValueRef {\n     if let ty::TyBareFn(_, ref f) = node_type.sty {\n-        if f.abi != Rust && f.abi != RustCall {\n+        if f.abi != Abi::Rust && f.abi != Abi::RustCall {\n             ccx.sess().span_bug(sp,\n                                 &format!(\"only the `{}` or `{}` calling conventions are valid \\\n                                           for this function; `{}` was specified\",\n-                                         Rust.name(),\n-                                         RustCall.name(),\n+                                         Abi::Rust.name(),\n+                                         Abi::RustCall.name(),\n                                          f.abi.name()));\n         }\n     } else {\n@@ -2790,7 +2790,7 @@ pub fn get_item_val(ccx: &CrateContext, id: ast::NodeId) -> ValueRef {\n \n                 hir::ItemFn(_, _, _, abi, _, _) => {\n                     let sym = sym();\n-                    let llfn = if abi == Rust {\n+                    let llfn = if abi == Abi::Rust {\n                         register_fn(ccx, i.span, sym, i.id, ty)\n                     } else {\n                         foreign::register_rust_fn_with_foreign_abi(ccx, i.span, sym, i.id)\n@@ -2913,7 +2913,7 @@ fn register_method(ccx: &CrateContext,\n     let sym = exported_name(ccx, id, mty, &attrs);\n \n     if let ty::TyBareFn(_, ref f) = mty.sty {\n-        let llfn = if f.abi == Rust || f.abi == RustCall {\n+        let llfn = if f.abi == Abi::Rust || f.abi == Abi::RustCall {\n             register_fn(ccx, span, sym, id, mty)\n         } else {\n             foreign::register_rust_fn_with_foreign_abi(ccx, span, sym, id)"}, {"sha": "29821384ae936fc26da71112e218f882d3c12791", "filename": "src/librustc_trans/trans/callee.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs?ref=243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1", "patch": "@@ -55,7 +55,7 @@ use middle::ty::{self, Ty, TypeFoldable};\n use middle::ty::MethodCall;\n use rustc_front::hir;\n \n-use syntax::abi as synabi;\n+use syntax::abi::Abi;\n use syntax::ast;\n use syntax::errors;\n use syntax::ptr::P;\n@@ -157,8 +157,8 @@ fn trans<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, expr: &hir::Expr)\n                 }\n             }\n             Def::Fn(did) if match expr_ty.sty {\n-                ty::TyBareFn(_, ref f) => f.abi == synabi::RustIntrinsic ||\n-                                          f.abi == synabi::PlatformIntrinsic,\n+                ty::TyBareFn(_, ref f) => f.abi == Abi::RustIntrinsic ||\n+                                          f.abi == Abi::PlatformIntrinsic,\n                 _ => false\n             } => {\n                 let substs = common::node_id_substs(bcx.ccx(),\n@@ -294,7 +294,7 @@ pub fn trans_fn_pointer_shim<'a, 'tcx>(\n         match bare_fn_ty.sty {\n             ty::TyBareFn(opt_def_id,\n                            &ty::BareFnTy { unsafety: hir::Unsafety::Normal,\n-                                           abi: synabi::Rust,\n+                                           abi: Abi::Rust,\n                                            ref sig }) => {\n                 (opt_def_id, sig)\n             }\n@@ -310,7 +310,7 @@ pub fn trans_fn_pointer_shim<'a, 'tcx>(\n     let tuple_fn_ty = tcx.mk_fn(opt_def_id,\n         tcx.mk_bare_fn(ty::BareFnTy {\n             unsafety: hir::Unsafety::Normal,\n-            abi: synabi::RustCall,\n+            abi: Abi::RustCall,\n             sig: ty::Binder(ty::FnSig {\n                 inputs: vec![bare_fn_ty_maybe_ref,\n                              tuple_input_ty],\n@@ -622,7 +622,7 @@ pub fn trans_call_inner<'a, 'blk, 'tcx, F>(bcx: Block<'blk, 'tcx>,\n             (d.llfn, Some(d.llself))\n         }\n         Intrinsic(node, substs) => {\n-            assert!(abi == synabi::RustIntrinsic || abi == synabi::PlatformIntrinsic);\n+            assert!(abi == Abi::RustIntrinsic || abi == Abi::PlatformIntrinsic);\n             assert!(dest.is_some());\n \n             let call_info = match debug_loc {\n@@ -652,9 +652,9 @@ pub fn trans_call_inner<'a, 'blk, 'tcx, F>(bcx: Block<'blk, 'tcx>,\n \n     // Intrinsics should not become actual functions.\n     // We trans them in place in `trans_intrinsic_call`\n-    assert!(abi != synabi::RustIntrinsic && abi != synabi::PlatformIntrinsic);\n+    assert!(abi != Abi::RustIntrinsic && abi != Abi::PlatformIntrinsic);\n \n-    let is_rust_fn = abi == synabi::Rust || abi == synabi::RustCall;\n+    let is_rust_fn = abi == Abi::Rust || abi == Abi::RustCall;\n \n     // Generate a location to store the result. If the user does\n     // not care about the result, just make a stack slot.\n@@ -936,7 +936,7 @@ pub fn trans_args<'a, 'blk, 'tcx>(cx: Block<'blk, 'tcx>,\n                                   llargs: &mut Vec<ValueRef>,\n                                   arg_cleanup_scope: cleanup::ScopeId,\n                                   ignore_self: bool,\n-                                  abi: synabi::Abi)\n+                                  abi: Abi)\n                                   -> Block<'blk, 'tcx> {\n     debug!(\"trans_args(abi={})\", abi);\n \n@@ -953,7 +953,7 @@ pub fn trans_args<'a, 'blk, 'tcx>(cx: Block<'blk, 'tcx>,\n     // to cast her view of the arguments to the caller's view.\n     match args {\n         ArgExprs(arg_exprs) => {\n-            if abi == synabi::RustCall {\n+            if abi == Abi::RustCall {\n                 // This is only used for direct calls to the `call`,\n                 // `call_mut` or `call_once` functions.\n                 return trans_args_under_call_abi(cx,"}, {"sha": "7c978cb275e259e6290731f8c6d5b9030c30fc7a", "filename": "src/librustc_trans/trans/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs?ref=243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1", "patch": "@@ -30,7 +30,7 @@ use trans::Disr;\n use middle::ty;\n use session::config::FullDebugInfo;\n \n-use syntax::abi::RustCall;\n+use syntax::abi::Abi::RustCall;\n use syntax::ast;\n use syntax::attr::{ThinAttributes, ThinAttributesExt};\n "}, {"sha": "ae4f7461a26d92dae701abd879c2cf0cecfb3252", "filename": "src/librustc_trans/trans/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1/src%2Flibrustc_trans%2Ftrans%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1/src%2Flibrustc_trans%2Ftrans%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcollector.rs?ref=243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1", "patch": "@@ -1294,7 +1294,7 @@ pub fn push_unique_type_name<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                 output.push_str(\"unsafe \");\n             }\n \n-            if abi != ::syntax::abi::Rust {\n+            if abi != ::syntax::abi::Abi::Rust {\n                 output.push_str(\"extern \\\"\");\n                 output.push_str(abi.name());\n                 output.push_str(\"\\\" \");"}, {"sha": "702721157be51c21b3d9e7e162936020b3699211", "filename": "src/librustc_trans/trans/debuginfo/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmod.rs?ref=243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1", "patch": "@@ -48,7 +48,8 @@ use std::ptr;\n use std::rc::Rc;\n \n use syntax::codemap::{Span, Pos};\n-use syntax::{abi, ast, codemap};\n+use syntax::{ast, codemap};\n+use syntax::abi::Abi;\n use syntax::attr::IntType;\n use syntax::parse::token::{self, special_idents};\n \n@@ -455,7 +456,7 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n             ty::FnDiverging => diverging_type_metadata(cx)\n         });\n \n-        let inputs = &if abi == abi::RustCall {\n+        let inputs = &if abi == Abi::RustCall {\n             type_of::untuple_arguments(cx, &sig.inputs)\n         } else {\n             sig.inputs"}, {"sha": "f243b1e3bfaa426293e942b18a917319dbaafff0", "filename": "src/librustc_trans/trans/debuginfo/type_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Ftype_names.rs?ref=243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1", "patch": "@@ -106,7 +106,7 @@ pub fn push_debuginfo_type_name<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                 output.push_str(\"unsafe \");\n             }\n \n-            if abi != ::syntax::abi::Rust {\n+            if abi != ::syntax::abi::Abi::Rust {\n                 output.push_str(\"extern \\\"\");\n                 output.push_str(abi.name());\n                 output.push_str(\"\\\" \");"}, {"sha": "75b60be02f77814913b8293ccdff093de88b7346", "filename": "src/librustc_trans/trans/declare.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1/src%2Flibrustc_trans%2Ftrans%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1/src%2Flibrustc_trans%2Ftrans%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdeclare.rs?ref=243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1", "patch": "@@ -22,7 +22,7 @@\n use llvm::{self, ValueRef};\n use middle::ty;\n use middle::infer;\n-use syntax::abi;\n+use syntax::abi::Abi;\n use trans::attributes;\n use trans::base;\n use trans::context::CrateContext;\n@@ -116,7 +116,7 @@ pub fn declare_rust_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, name: &str,\n             let llenvironment_type = type_of::type_of_explicit_arg(ccx, self_type);\n             debug!(\"declare_rust_fn function_type={:?} self_type={:?}\",\n                    function_type, self_type);\n-            (&function_type.sig, abi::RustCall, Some(llenvironment_type))\n+            (&function_type.sig, Abi::RustCall, Some(llenvironment_type))\n         }\n         _ => ccx.sess().bug(\"expected closure or fn\")\n     };"}, {"sha": "5a909888bd86d874a3bbcbe2d4d34607ac097cf3", "filename": "src/librustc_trans/trans/foreign.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs?ref=243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1", "patch": "@@ -34,9 +34,7 @@ use middle::subst::Substs;\n use std::cmp;\n use std::iter::once;\n use libc::c_uint;\n-use syntax::abi::{Cdecl, Aapcs, C, Win64, Abi};\n-use syntax::abi::{PlatformIntrinsic, RustIntrinsic, Rust, RustCall, Stdcall};\n-use syntax::abi::{Fastcall, Vectorcall, System};\n+use syntax::abi::Abi;\n use syntax::attr;\n use syntax::codemap::Span;\n use syntax::parse::token::{InternedString, special_idents};\n@@ -80,6 +78,7 @@ struct LlvmSignature {\n \n pub fn llvm_calling_convention(ccx: &CrateContext,\n                                abi: Abi) -> CallConv {\n+    use syntax::abi::Abi::*;\n     match ccx.sess().target.target.adjust_abi(abi) {\n         RustIntrinsic => {\n             // Intrinsics are emitted at the call site\n@@ -488,7 +487,7 @@ pub fn trans_foreign_mod(ccx: &CrateContext, foreign_mod: &hir::ForeignMod) {\n \n         if let hir::ForeignItemFn(ref decl, _) = foreign_item.node {\n             match foreign_mod.abi {\n-                Rust | RustIntrinsic | PlatformIntrinsic => {}\n+                Abi::Rust | Abi::RustIntrinsic | Abi::PlatformIntrinsic => {}\n                 abi => {\n                     let ty = ccx.tcx().node_id_to_type(foreign_item.id);\n                     match ty.sty {\n@@ -626,7 +625,9 @@ pub fn trans_rust_fn_with_foreign_abi<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n         // normal Rust function. This will be the type of the wrappee fn.\n         match t.sty {\n             ty::TyBareFn(_, ref f) => {\n-                assert!(f.abi != Rust && f.abi != RustIntrinsic && f.abi != PlatformIntrinsic);\n+                assert!(f.abi != Abi::Rust);\n+                assert!(f.abi != Abi::RustIntrinsic);\n+                assert!(f.abi != Abi::PlatformIntrinsic);\n             }\n             _ => {\n                 ccx.sess().bug(&format!(\"build_rust_fn: extern fn {} has ty {:?}, \\"}, {"sha": "3e5cd7389c4fa47a035c0253fa5ea1a3039be37b", "filename": "src/librustc_trans/trans/intrinsic.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs?ref=243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1", "patch": "@@ -40,7 +40,7 @@ use trans::Disr;\n use middle::subst::Substs;\n use rustc::dep_graph::DepNode;\n use rustc_front::hir;\n-use syntax::abi::{self, RustIntrinsic};\n+use syntax::abi::Abi;\n use syntax::ast;\n use syntax::ptr::P;\n use syntax::parse::token;\n@@ -365,7 +365,7 @@ pub fn trans_intrinsic_call<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n                              &mut llargs,\n                              cleanup::CustomScope(cleanup_scope),\n                              false,\n-                             RustIntrinsic);\n+                             Abi::RustIntrinsic);\n \n     fcx.scopes.borrow_mut().last_mut().unwrap().drop_non_lifetime_clean();\n \n@@ -1261,7 +1261,7 @@ fn get_rust_try_fn<'a, 'tcx>(fcx: &FunctionContext<'a, 'tcx>,\n     let i8p = tcx.mk_mut_ptr(tcx.types.i8);\n     let fn_ty = tcx.mk_bare_fn(ty::BareFnTy {\n         unsafety: hir::Unsafety::Unsafe,\n-        abi: abi::Rust,\n+        abi: Abi::Rust,\n         sig: ty::Binder(ty::FnSig {\n             inputs: vec![i8p],\n             output: ty::FnOutput::FnConverging(tcx.mk_nil()),\n@@ -1272,7 +1272,7 @@ fn get_rust_try_fn<'a, 'tcx>(fcx: &FunctionContext<'a, 'tcx>,\n     let output = ty::FnOutput::FnConverging(tcx.types.i32);\n     let try_fn_ty  = tcx.mk_bare_fn(ty::BareFnTy {\n         unsafety: hir::Unsafety::Unsafe,\n-        abi: abi::Rust,\n+        abi: Abi::Rust,\n         sig: ty::Binder(ty::FnSig {\n             inputs: vec![fn_ty, i8p, i8p],\n             output: output,\n@@ -1350,7 +1350,7 @@ fn generate_filter_fn<'a, 'tcx>(fcx: &FunctionContext<'a, 'tcx>,\n         // just do the same.\n         let filter_fn_ty = tcx.mk_bare_fn(ty::BareFnTy {\n             unsafety: hir::Unsafety::Unsafe,\n-            abi: abi::Rust,\n+            abi: Abi::Rust,\n             sig: ty::Binder(ty::FnSig {\n                 inputs: vec![],\n                 output: output,\n@@ -1370,7 +1370,7 @@ fn generate_filter_fn<'a, 'tcx>(fcx: &FunctionContext<'a, 'tcx>,\n         // those along.\n         let filter_fn_ty = tcx.mk_bare_fn(ty::BareFnTy {\n             unsafety: hir::Unsafety::Unsafe,\n-            abi: abi::Rust,\n+            abi: Abi::Rust,\n             sig: ty::Binder(ty::FnSig {\n                 inputs: vec![i8p, i8p],\n                 output: output,"}, {"sha": "cda62c238476e08f0c67fb565fea0078aafb30ee", "filename": "src/librustc_trans/trans/monomorphize.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs?ref=243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1", "patch": "@@ -29,7 +29,7 @@ use rustc::front::map as hir_map;\n \n use rustc_front::hir;\n \n-use syntax::abi;\n+use syntax::abi::Abi;\n use syntax::ast;\n use syntax::attr;\n use syntax::errors;\n@@ -96,7 +96,7 @@ pub fn monomorphic_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n \n     if let hir_map::NodeForeignItem(_) = map_node {\n         let abi = ccx.tcx().map.get_foreign_abi(fn_node_id);\n-        if abi != abi::RustIntrinsic && abi != abi::PlatformIntrinsic {\n+        if abi != Abi::RustIntrinsic && abi != Abi::PlatformIntrinsic {\n             // Foreign externs don't have to be monomorphized.\n             return (get_item_val(ccx, fn_node_id), mono_ty, true);\n         }\n@@ -139,8 +139,8 @@ pub fn monomorphic_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n \n     // This shouldn't need to option dance.\n     let mut hash_id = Some(hash_id);\n-    let mut mk_lldecl = |abi: abi::Abi| {\n-        let lldecl = if abi != abi::Rust {\n+    let mut mk_lldecl = |abi: Abi| {\n+        let lldecl = if abi != Abi::Rust {\n             foreign::decl_rust_fn_with_foreign_abi(ccx, mono_ty, &s)\n         } else {\n             // FIXME(nagisa): perhaps needs a more fine grained selection? See\n@@ -181,7 +181,7 @@ pub fn monomorphic_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                   let d = mk_lldecl(abi);\n                   let needs_body = setup_lldecl(d, &i.attrs);\n                   if needs_body {\n-                      if abi != abi::Rust {\n+                      if abi != Abi::Rust {\n                           foreign::trans_rust_fn_with_foreign_abi(\n                               ccx, &**decl, &**body, &[], d, psubsts, fn_node_id,\n                               Some(&hash[..]));\n@@ -206,15 +206,15 @@ pub fn monomorphic_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n         hir_map::NodeVariant(v) => {\n             let variant = inlined_variant_def(ccx, fn_node_id);\n             assert_eq!(v.node.name, variant.name);\n-            let d = mk_lldecl(abi::Rust);\n+            let d = mk_lldecl(Abi::Rust);\n             attributes::inline(d, attributes::InlineAttr::Hint);\n             trans_enum_variant(ccx, fn_node_id, Disr::from(variant.disr_val), psubsts, d);\n             d\n         }\n         hir_map::NodeImplItem(impl_item) => {\n             match impl_item.node {\n                 hir::ImplItemKind::Method(ref sig, ref body) => {\n-                    let d = mk_lldecl(abi::Rust);\n+                    let d = mk_lldecl(Abi::Rust);\n                     let needs_body = setup_lldecl(d, &impl_item.attrs);\n                     if needs_body {\n                         trans_fn(ccx,\n@@ -236,7 +236,7 @@ pub fn monomorphic_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n         hir_map::NodeTraitItem(trait_item) => {\n             match trait_item.node {\n                 hir::MethodTraitItem(ref sig, Some(ref body)) => {\n-                    let d = mk_lldecl(abi::Rust);\n+                    let d = mk_lldecl(Abi::Rust);\n                     let needs_body = setup_lldecl(d, &trait_item.attrs);\n                     if needs_body {\n                         trans_fn(ccx,\n@@ -256,7 +256,7 @@ pub fn monomorphic_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n             }\n         }\n         hir_map::NodeStructCtor(struct_def) => {\n-            let d = mk_lldecl(abi::Rust);\n+            let d = mk_lldecl(Abi::Rust);\n             attributes::inline(d, attributes::InlineAttr::Hint);\n             if struct_def.is_struct() {\n                 panic!(\"ast-mapped struct didn't have a ctor id\")"}, {"sha": "d94000736855c323da65961b83e49537df1eae3d", "filename": "src/librustc_trans/trans/type_of.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs?ref=243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1", "patch": "@@ -21,7 +21,7 @@ use middle::ty::{self, Ty, TypeFoldable};\n \n use trans::type_::Type;\n \n-use syntax::abi;\n+use syntax::abi::Abi;\n use syntax::ast;\n \n // LLVM doesn't like objects that are too big. Issue #17913\n@@ -91,7 +91,7 @@ pub fn untuple_arguments<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n pub fn type_of_rust_fn<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                                  llenvironment_type: Option<Type>,\n                                  sig: &ty::FnSig<'tcx>,\n-                                 abi: abi::Abi)\n+                                 abi: Abi)\n                                  -> Type\n {\n     debug!(\"type_of_rust_fn(sig={:?},abi={:?})\",\n@@ -104,7 +104,7 @@ pub fn type_of_rust_fn<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n \n     // First, munge the inputs, if this has the `rust-call` ABI.\n     let inputs_temp;\n-    let inputs = if abi == abi::RustCall {\n+    let inputs = if abi == Abi::RustCall {\n         inputs_temp = untuple_arguments(cx, &sig.inputs);\n         &inputs_temp\n     } else {\n@@ -156,7 +156,7 @@ pub fn type_of_fn_from_ty<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, fty: Ty<'tcx>)\n         ty::TyBareFn(_, ref f) => {\n             // FIXME(#19925) once fn item types are\n             // zero-sized, we'll need to do something here\n-            if f.abi == abi::Rust || f.abi == abi::RustCall {\n+            if f.abi == Abi::Rust || f.abi == Abi::RustCall {\n                 let sig = cx.tcx().erase_late_bound_regions(&f.sig);\n                 let sig = infer::normalize_associated_type(cx.tcx(), &sig);\n                 type_of_rust_fn(cx, None, &sig, f.abi)"}, {"sha": "7fd35cf159ff91c91dd267751bca8d8edf799cdd", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1", "patch": "@@ -16,7 +16,7 @@ use astconv;\n use middle::subst;\n use middle::ty::{self, ToPolyTraitRef, Ty};\n use std::cmp;\n-use syntax::abi;\n+use syntax::abi::Abi;\n use rustc_front::hir;\n \n pub fn check_expr_closure<'a,'tcx>(fcx: &FnCtxt<'a,'tcx>,\n@@ -54,7 +54,7 @@ fn check_closure<'a,'tcx>(fcx: &FnCtxt<'a,'tcx>,\n     let mut fn_ty = astconv::ty_of_closure(fcx,\n                                            hir::Unsafety::Normal,\n                                            decl,\n-                                           abi::RustCall,\n+                                           Abi::RustCall,\n                                            expected_sig);\n \n     // Create type variables (for now) to represent the transformed"}, {"sha": "248a2341c2bda005c36e0d61b8bc67c42d4770ef", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1", "patch": "@@ -20,7 +20,7 @@ use middle::ty::fold::TypeFolder;\n use {CrateCtxt, require_same_types};\n \n use std::collections::{HashMap};\n-use syntax::abi;\n+use syntax::abi::Abi;\n use syntax::ast;\n use syntax::attr::AttrMetaMethods;\n use syntax::codemap::Span;\n@@ -30,7 +30,7 @@ use rustc_front::hir;\n \n fn equate_intrinsic_type<'a, 'tcx>(tcx: &ty::ctxt<'tcx>, it: &hir::ForeignItem,\n                                    n_tps: usize,\n-                                   abi: abi::Abi,\n+                                   abi: Abi,\n                                    inputs: Vec<ty::Ty<'tcx>>,\n                                    output: ty::FnOutput<'tcx>) {\n     let fty = tcx.mk_fn(None, tcx.mk_bare_fn(ty::BareFnTy {\n@@ -285,7 +285,7 @@ pub fn check_intrinsic_type(ccx: &CrateCtxt, it: &hir::ForeignItem) {\n                 let mut_u8 = tcx.mk_mut_ptr(tcx.types.u8);\n                 let fn_ty = ty::BareFnTy {\n                     unsafety: hir::Unsafety::Normal,\n-                    abi: abi::Rust,\n+                    abi: Abi::Rust,\n                     sig: ty::Binder(FnSig {\n                         inputs: vec![mut_u8],\n                         output: ty::FnOutput::FnConverging(tcx.mk_nil()),\n@@ -308,7 +308,7 @@ pub fn check_intrinsic_type(ccx: &CrateCtxt, it: &hir::ForeignItem) {\n         tcx,\n         it,\n         n_tps,\n-        abi::RustIntrinsic,\n+        Abi::RustIntrinsic,\n         inputs,\n         output\n         )\n@@ -398,7 +398,7 @@ pub fn check_platform_intrinsic_type(ccx: &CrateCtxt,\n         tcx,\n         it,\n         n_tps,\n-        abi::PlatformIntrinsic,\n+        Abi::PlatformIntrinsic,\n         inputs,\n         ty::FnConverging(output)\n         )"}, {"sha": "a1280d0f7e42d4833db652bea3c6a7ad501dc57f", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1", "patch": "@@ -115,7 +115,7 @@ use util::nodemap::{DefIdMap, FnvHashMap, NodeMap};\n use std::cell::{Cell, Ref, RefCell};\n use std::collections::{HashSet};\n use std::mem::replace;\n-use syntax::abi;\n+use syntax::abi::Abi;\n use syntax::ast;\n use syntax::attr;\n use syntax::attr::AttrMetaMethods;\n@@ -691,11 +691,11 @@ pub fn check_item_type<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>, it: &'tcx hir::Item) {\n         check_bounds_are_used(ccx, &generics.ty_params, pty_ty);\n       }\n       hir::ItemForeignMod(ref m) => {\n-        if m.abi == abi::RustIntrinsic {\n+        if m.abi == Abi::RustIntrinsic {\n             for item in &m.items {\n                 intrinsic::check_intrinsic_type(ccx, item);\n             }\n-        } else if m.abi == abi::PlatformIntrinsic {\n+        } else if m.abi == Abi::PlatformIntrinsic {\n             for item in &m.items {\n                 intrinsic::check_platform_intrinsic_type(ccx, item);\n             }"}, {"sha": "0c8ad5abe6f8ed71fbd2618313f26713c7bf15a2", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1", "patch": "@@ -111,7 +111,8 @@ use util::common::time;\n use rustc_front::hir;\n \n use syntax::codemap::Span;\n-use syntax::{ast, abi};\n+use syntax::ast;\n+use syntax::abi::Abi;\n \n use std::cell::RefCell;\n \n@@ -175,9 +176,9 @@ fn lookup_full_def(tcx: &ty::ctxt, sp: Span, id: ast::NodeId) -> Def {\n \n fn require_c_abi_if_variadic(tcx: &ty::ctxt,\n                              decl: &hir::FnDecl,\n-                             abi: abi::Abi,\n+                             abi: Abi,\n                              span: Span) {\n-    if decl.variadic && abi != abi::C {\n+    if decl.variadic && abi != Abi::C {\n         span_err!(tcx.sess, span, E0045,\n                   \"variadic function must have C calling convention\");\n     }\n@@ -238,7 +239,7 @@ fn check_main_fn_ty(ccx: &CrateCtxt,\n             let main_def_id = tcx.map.local_def_id(main_id);\n             let se_ty = tcx.mk_fn(Some(main_def_id), tcx.mk_bare_fn(ty::BareFnTy {\n                 unsafety: hir::Unsafety::Normal,\n-                abi: abi::Rust,\n+                abi: Abi::Rust,\n                 sig: ty::Binder(ty::FnSig {\n                     inputs: Vec::new(),\n                     output: ty::FnConverging(tcx.mk_nil()),\n@@ -285,7 +286,7 @@ fn check_start_fn_ty(ccx: &CrateCtxt,\n             let se_ty = tcx.mk_fn(Some(ccx.tcx.map.local_def_id(start_id)),\n                                   tcx.mk_bare_fn(ty::BareFnTy {\n                 unsafety: hir::Unsafety::Normal,\n-                abi: abi::Rust,\n+                abi: Abi::Rust,\n                 sig: ty::Binder(ty::FnSig {\n                     inputs: vec!(\n                         tcx.types.isize,"}, {"sha": "d7fb789ada1f3faed061a8c12dbbf8b7929992e4", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1", "patch": "@@ -25,7 +25,7 @@ pub use self::SelfTy::*;\n pub use self::FunctionRetTy::*;\n \n use syntax;\n-use syntax::abi;\n+use syntax::abi::Abi;\n use syntax::ast;\n use syntax::attr;\n use syntax::attr::{AttributeMethods, AttrMetaMethods};\n@@ -993,7 +993,7 @@ pub struct Method {\n     pub unsafety: hir::Unsafety,\n     pub constness: hir::Constness,\n     pub decl: FnDecl,\n-    pub abi: abi::Abi\n+    pub abi: Abi,\n }\n \n impl Clean<Method> for hir::MethodSig {\n@@ -1028,7 +1028,7 @@ pub struct TyMethod {\n     pub decl: FnDecl,\n     pub generics: Generics,\n     pub self_: SelfTy,\n-    pub abi: abi::Abi\n+    pub abi: Abi,\n }\n \n impl Clean<TyMethod> for hir::MethodSig {\n@@ -1082,7 +1082,7 @@ pub struct Function {\n     pub generics: Generics,\n     pub unsafety: hir::Unsafety,\n     pub constness: hir::Constness,\n-    pub abi: abi::Abi,\n+    pub abi: Abi,\n }\n \n impl Clean<Item> for doctree::Function {\n@@ -2486,7 +2486,7 @@ impl Clean<Item> for hir::ForeignItem {\n                     decl: decl.clean(cx),\n                     generics: generics.clean(cx),\n                     unsafety: hir::Unsafety::Unsafe,\n-                    abi: abi::Rust,\n+                    abi: Abi::Rust,\n                     constness: hir::Constness::NotConst,\n                 })\n             }"}, {"sha": "c959e2108f5a7ce09869c2b1b6adc6bb7ce9f35e", "filename": "src/libsyntax/abi.rs", "status": "modified", "additions": 39, "deletions": 43, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1/src%2Flibsyntax%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1/src%2Flibsyntax%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fabi.rs?ref=243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1", "patch": "@@ -8,27 +8,23 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub use self::Os::*;\n-pub use self::Abi::*;\n-pub use self::Architecture::*;\n-pub use self::AbiArchitecture::*;\n-\n use std::fmt;\n \n #[derive(Copy, Clone, PartialEq, Eq, Debug)]\n+#[allow(non_camel_case_types)]\n pub enum Os {\n-    OsWindows,\n-    OsMacos,\n-    OsLinux,\n-    OsAndroid,\n-    OsFreebsd,\n-    OsiOS,\n-    OsDragonfly,\n-    OsBitrig,\n-    OsNetbsd,\n-    OsOpenbsd,\n-    OsNaCl,\n-    OsSolaris,\n+    Windows,\n+    Macos,\n+    Linux,\n+    Android,\n+    Freebsd,\n+    iOS,\n+    Dragonfly,\n+    Bitrig,\n+    Netbsd,\n+    Openbsd,\n+    NaCl,\n+    Solaris,\n }\n \n #[derive(PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, Clone, Copy, Debug)]\n@@ -74,33 +70,33 @@ pub struct AbiData {\n #[derive(Copy, Clone)]\n pub enum AbiArchitecture {\n     /// Not a real ABI (e.g., intrinsic)\n-    RustArch,\n+    Rust,\n     /// An ABI that specifies cross-platform defaults (e.g., \"C\")\n-    AllArch,\n+    All,\n     /// Multiple architectures (bitset)\n     Archs(u32)\n }\n \n #[allow(non_upper_case_globals)]\n const AbiDatas: &'static [AbiData] = &[\n     // Platform-specific ABIs\n-    AbiData {abi: Cdecl, name: \"cdecl\" },\n-    AbiData {abi: Stdcall, name: \"stdcall\" },\n-    AbiData {abi: Fastcall, name: \"fastcall\" },\n-    AbiData {abi: Vectorcall, name: \"vectorcall\"},\n-    AbiData {abi: Aapcs, name: \"aapcs\" },\n-    AbiData {abi: Win64, name: \"win64\" },\n+    AbiData {abi: Abi::Cdecl, name: \"cdecl\" },\n+    AbiData {abi: Abi::Stdcall, name: \"stdcall\" },\n+    AbiData {abi: Abi::Fastcall, name: \"fastcall\" },\n+    AbiData {abi: Abi::Vectorcall, name: \"vectorcall\"},\n+    AbiData {abi: Abi::Aapcs, name: \"aapcs\" },\n+    AbiData {abi: Abi::Win64, name: \"win64\" },\n \n     // Cross-platform ABIs\n     //\n     // NB: Do not adjust this ordering without\n     // adjusting the indices below.\n-    AbiData {abi: Rust, name: \"Rust\" },\n-    AbiData {abi: C, name: \"C\" },\n-    AbiData {abi: System, name: \"system\" },\n-    AbiData {abi: RustIntrinsic, name: \"rust-intrinsic\" },\n-    AbiData {abi: RustCall, name: \"rust-call\" },\n-    AbiData {abi: PlatformIntrinsic, name: \"platform-intrinsic\" }\n+    AbiData {abi: Abi::Rust, name: \"Rust\" },\n+    AbiData {abi: Abi::C, name: \"C\" },\n+    AbiData {abi: Abi::System, name: \"system\" },\n+    AbiData {abi: Abi::RustIntrinsic, name: \"rust-intrinsic\" },\n+    AbiData {abi: Abi::RustCall, name: \"rust-call\" },\n+    AbiData {abi: Abi::PlatformIntrinsic, name: \"platform-intrinsic\" }\n ];\n \n /// Returns the ABI with the given name (if any).\n@@ -137,18 +133,18 @@ impl fmt::Display for Abi {\n impl fmt::Display for Os {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n-            OsLinux => \"linux\".fmt(f),\n-            OsWindows => \"windows\".fmt(f),\n-            OsMacos => \"macos\".fmt(f),\n-            OsiOS => \"ios\".fmt(f),\n-            OsAndroid => \"android\".fmt(f),\n-            OsFreebsd => \"freebsd\".fmt(f),\n-            OsDragonfly => \"dragonfly\".fmt(f),\n-            OsBitrig => \"bitrig\".fmt(f),\n-            OsNetbsd => \"netbsd\".fmt(f),\n-            OsOpenbsd => \"openbsd\".fmt(f),\n-            OsNaCl => \"nacl\".fmt(f),\n-            OsSolaris => \"solaris\".fmt(f),\n+            Os::Linux => \"linux\".fmt(f),\n+            Os::Windows => \"windows\".fmt(f),\n+            Os::Macos => \"macos\".fmt(f),\n+            Os::iOS => \"ios\".fmt(f),\n+            Os::Android => \"android\".fmt(f),\n+            Os::Freebsd => \"freebsd\".fmt(f),\n+            Os::Dragonfly => \"dragonfly\".fmt(f),\n+            Os::Bitrig => \"bitrig\".fmt(f),\n+            Os::Netbsd => \"netbsd\".fmt(f),\n+            Os::Openbsd => \"openbsd\".fmt(f),\n+            Os::NaCl => \"nacl\".fmt(f),\n+            Os::Solaris => \"solaris\".fmt(f),\n         }\n     }\n }"}, {"sha": "6da9a208f379187f150eda5fc7bf38da26ca3186", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use abi;\n+use abi::Abi;\n use ast::{self, Ident, Generics, Expr, BlockCheckMode, UnOp};\n use attr;\n use codemap::{Span, respan, Spanned, DUMMY_SP, Pos};\n@@ -971,7 +971,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n                   ast::ItemFn(self.fn_decl(inputs, output),\n                               ast::Unsafety::Normal,\n                               ast::Constness::NotConst,\n-                              abi::Rust,\n+                              Abi::Rust,\n                               generics,\n                               body))\n     }"}, {"sha": "a47ca51a98ae106528f5a64554aa0f27b6388383", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1", "patch": "@@ -684,7 +684,7 @@ mod tests {\n     use std::rc::Rc;\n     use codemap::{Span, BytePos, Pos, Spanned, NO_EXPANSION};\n     use ast::{self, TokenTree};\n-    use abi;\n+    use abi::Abi;\n     use attr::{first_attr_value_str_by_name, AttrMetaMethods};\n     use parse;\n     use parse::parser::Parser;\n@@ -955,7 +955,7 @@ mod tests {\n                             }),\n                                     ast::Unsafety::Normal,\n                                     ast::Constness::NotConst,\n-                                    abi::Rust,\n+                                    Abi::Rust,\n                                     ast::Generics{ // no idea on either of these:\n                                         lifetimes: Vec::new(),\n                                         ty_params: P::empty(),"}, {"sha": "b10c42c4b0e4412952f913b45f529ec46f495885", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1", "patch": "@@ -10,7 +10,7 @@\n \n pub use self::PathParsingMode::*;\n \n-use abi;\n+use abi::{self, Abi};\n use ast::BareFnTy;\n use ast::{RegionTyParamBound, TraitTyParamBound, TraitBoundModifier};\n use ast::{Public, Unsafety};\n@@ -1127,9 +1127,9 @@ impl<'a> Parser<'a> {\n \n         let unsafety = try!(self.parse_unsafety());\n         let abi = if self.eat_keyword(keywords::Extern) {\n-            try!(self.parse_opt_abi()).unwrap_or(abi::C)\n+            try!(self.parse_opt_abi()).unwrap_or(Abi::C)\n         } else {\n-            abi::Rust\n+            Abi::Rust\n         };\n \n         try!(self.expect_keyword(keywords::Fn));\n@@ -4647,12 +4647,12 @@ impl<'a> Parser<'a> {\n         let is_const_fn = self.eat_keyword(keywords::Const);\n         let unsafety = try!(self.parse_unsafety());\n         let (constness, unsafety, abi) = if is_const_fn {\n-            (Constness::Const, unsafety, abi::Rust)\n+            (Constness::Const, unsafety, Abi::Rust)\n         } else {\n             let abi = if self.eat_keyword(keywords::Extern) {\n-                try!(self.parse_opt_abi()).unwrap_or(abi::C)\n+                try!(self.parse_opt_abi()).unwrap_or(Abi::C)\n             } else {\n-                abi::Rust\n+                Abi::Rust\n             };\n             (Constness::NotConst, unsafety, abi)\n         };\n@@ -5350,7 +5350,7 @@ impl<'a> Parser<'a> {\n                               -> PResult<'a, P<Item>> {\n         try!(self.expect(&token::OpenDelim(token::Brace)));\n \n-        let abi = opt_abi.unwrap_or(abi::C);\n+        let abi = opt_abi.unwrap_or(Abi::C);\n \n         attrs.extend(try!(self.parse_inner_attributes()));\n \n@@ -5522,7 +5522,7 @@ impl<'a> Parser<'a> {\n \n             if self.eat_keyword(keywords::Fn) {\n                 // EXTERN FUNCTION ITEM\n-                let abi = opt_abi.unwrap_or(abi::C);\n+                let abi = opt_abi.unwrap_or(Abi::C);\n                 let (ident, item_, extra_attrs) =\n                     try!(self.parse_item_fn(Unsafety::Normal, Constness::NotConst, abi));\n                 let last_span = self.last_span;\n@@ -5565,7 +5565,7 @@ impl<'a> Parser<'a> {\n                 };\n                 self.bump();\n                 let (ident, item_, extra_attrs) =\n-                    try!(self.parse_item_fn(unsafety, Constness::Const, abi::Rust));\n+                    try!(self.parse_item_fn(unsafety, Constness::Const, Abi::Rust));\n                 let last_span = self.last_span;\n                 let item = self.mk_item(lo,\n                                         last_span.hi,\n@@ -5630,7 +5630,7 @@ impl<'a> Parser<'a> {\n             // FUNCTION ITEM\n             self.bump();\n             let (ident, item_, extra_attrs) =\n-                try!(self.parse_item_fn(Unsafety::Normal, Constness::NotConst, abi::Rust));\n+                try!(self.parse_item_fn(Unsafety::Normal, Constness::NotConst, Abi::Rust));\n             let last_span = self.last_span;\n             let item = self.mk_item(lo,\n                                     last_span.hi,\n@@ -5645,9 +5645,9 @@ impl<'a> Parser<'a> {\n             // UNSAFE FUNCTION ITEM\n             self.bump();\n             let abi = if self.eat_keyword(keywords::Extern) {\n-                try!(self.parse_opt_abi()).unwrap_or(abi::C)\n+                try!(self.parse_opt_abi()).unwrap_or(Abi::C)\n             } else {\n-                abi::Rust\n+                Abi::Rust\n             };\n             try!(self.expect_keyword(keywords::Fn));\n             let (ident, item_, extra_attrs) ="}, {"sha": "9d5bd798ec7d9d3a40f3c7e8365850c90914a6f8", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1", "patch": "@@ -10,7 +10,7 @@\n \n pub use self::AnnNode::*;\n \n-use abi;\n+use abi::{self, Abi};\n use ast::{self, TokenTree, BlockCheckMode};\n use ast::{RegionTyParamBound, TraitTyParamBound, TraitBoundModifier};\n use ast::Attribute;\n@@ -387,7 +387,7 @@ pub fn fun_to_string(decl: &ast::FnDecl,\n                      -> String {\n     to_string(|s| {\n         try!(s.head(\"\"));\n-        try!(s.print_fn(decl, unsafety, constness, abi::Rust, Some(name),\n+        try!(s.print_fn(decl, unsafety, constness, Abi::Rust, Some(name),\n                         generics, opt_explicit_self, ast::Inherited));\n         try!(s.end()); // Close the head box\n         s.end() // Close the outer box\n@@ -1058,7 +1058,7 @@ impl<'a> State<'a> {\n                 try!(self.head(\"\"));\n                 try!(self.print_fn(decl, ast::Unsafety::Normal,\n                                    ast::Constness::NotConst,\n-                                   abi::Rust, Some(item.ident),\n+                                   Abi::Rust, Some(item.ident),\n                                    generics, None, item.vis));\n                 try!(self.end()); // end head-ibox\n                 try!(word(&mut self.s, \";\"));\n@@ -3086,10 +3086,10 @@ impl<'a> State<'a> {\n     }\n \n     pub fn print_opt_abi_and_extern_if_nondefault(&mut self,\n-                                                  opt_abi: Option<abi::Abi>)\n+                                                  opt_abi: Option<Abi>)\n         -> io::Result<()> {\n         match opt_abi {\n-            Some(abi::Rust) => Ok(()),\n+            Some(Abi::Rust) => Ok(()),\n             Some(abi) => {\n                 try!(self.word_nbsp(\"extern\"));\n                 self.word_nbsp(&abi.to_string())\n@@ -3099,7 +3099,7 @@ impl<'a> State<'a> {\n     }\n \n     pub fn print_extern_opt_abi(&mut self,\n-                                opt_abi: Option<abi::Abi>) -> io::Result<()> {\n+                                opt_abi: Option<Abi>) -> io::Result<()> {\n         match opt_abi {\n             Some(abi) => {\n                 try!(self.word_nbsp(\"extern\"));\n@@ -3112,7 +3112,7 @@ impl<'a> State<'a> {\n     pub fn print_fn_header_info(&mut self,\n                                 unsafety: ast::Unsafety,\n                                 constness: ast::Constness,\n-                                abi: abi::Abi,\n+                                abi: Abi,\n                                 vis: ast::Visibility) -> io::Result<()> {\n         try!(word(&mut self.s, &visibility_qualified(vis, \"\")));\n \n@@ -3123,7 +3123,7 @@ impl<'a> State<'a> {\n \n         try!(self.print_unsafety(unsafety));\n \n-        if abi != abi::Rust {\n+        if abi != Abi::Rust {\n             try!(self.word_nbsp(\"extern\"));\n             try!(self.word_nbsp(&abi.to_string()));\n         }"}, {"sha": "8b2d9bd9aafd99181abd39f67d3a425a8a2ac2d1", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1", "patch": "@@ -499,7 +499,7 @@ fn mk_main(cx: &mut TestCtxt) -> P<ast::Item> {\n     let main = ast::ItemFn(ecx.fn_decl(vec![], main_ret_ty),\n                            ast::Unsafety::Normal,\n                            ast::Constness::NotConst,\n-                           ::abi::Rust, ast::Generics::default(), main_body);\n+                           ::abi::Abi::Rust, ast::Generics::default(), main_body);\n     let main = P(ast::Item {\n         ident: token::str_to_ident(\"main\"),\n         attrs: vec![main_attr],"}, {"sha": "1faada13e2f349dea8423aefce5adb6298cd821d", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=243a30c9319b56e1be2b9ff2f9ed9e0d7583e2d1", "patch": "@@ -193,7 +193,6 @@ use std::collections::HashSet;\n use std::vec;\n \n use syntax::abi::Abi;\n-use syntax::abi;\n use syntax::ast::{EnumDef, Expr, Ident, Generics, VariantData, BinOpKind, self};\n use syntax::ast_util;\n use syntax::attr;\n@@ -681,7 +680,7 @@ impl<'a> TraitDef<'a> {\n                                      self,\n                                      type_ident,\n                                      generics,\n-                                     abi::Rust,\n+                                     Abi::Rust,\n                                      explicit_self,\n                                      tys,\n                                      body)\n@@ -730,7 +729,7 @@ impl<'a> TraitDef<'a> {\n                                      self,\n                                      type_ident,\n                                      generics,\n-                                     abi::Rust,\n+                                     Abi::Rust,\n                                      explicit_self,\n                                      tys,\n                                      body)"}]}