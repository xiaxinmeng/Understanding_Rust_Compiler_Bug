{"sha": "c796b1f46aba25880942a461c3d1079250b9c8ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3OTZiMWY0NmFiYTI1ODgwOTQyYTQ2MWMzZDEwNzkyNTBiOWM4YWM=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2018-12-06T12:49:26Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-04-03T16:22:18Z"}, "message": "Add tests for internal lints", "tree": {"sha": "5a0e8263c6119d7b46f2c9916e3140abe8bbcd4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a0e8263c6119d7b46f2c9916e3140abe8bbcd4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c796b1f46aba25880942a461c3d1079250b9c8ac", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZxoS6lESXlRGMHWcaTCGhp1QZjcFAlyk3boACgkQaTCGhp1Q\nZjf7Hw//Vyun4NzdebcqWIEVTp2JpfEqGUfrbuanSF+IjmZ7V7XNs77GfRZLeh8v\n4m9+NQqrIGj85OJK3ts0xPHy9jJojpkq9+YZV75VnxaT/mPXfpSoWbse0Dfq/Lm7\ndJAmALEX5eoVHLqDAyDPXMHqpWsprxd21A8saBcvfwGICRbh56sRZaq4EQO1Ehcz\nfVh42bJyDgOqf3MpqIgg0o500gdqex/BmjF3N2TxVLF3J89MbUe2Bsn2/BrPbXXD\n8eLXjCKMp7VsEqP856cpdQDD3ZB3ko07O11eHOmwmoQ/b//ZZtKn7SoRJghiD7pz\nu11zVpEzitKFOl3wikgipmVkK4ERZSmOyWYhAOFbHY/A1bLSlGzr51q49rG8L7gX\nzghs5j9UveCeKawQf6cmTlSRvm3y/h14roiLMfHcjobRw5Jzk5LY11Q5vZ+Vw3SB\n5Rns4PzvO8R/n2REJ9r7RCDyMe/lTv85H9hQtY/wL+nc1nZ4vSPOmykcRf6Bnue9\nP8ISY6E9bI3117w0Iqt3Vly73lDBwudBVevdBpulqno/3OZShnytJFgw/L4rw4x2\nfq13bzSlD4rEkBqN6ClmdqseHHTU7QPQjozOLt9dqMmBpROSqM5GYXF5NkEP3lPW\nnPQDCCbX7OBlHc/uMNRaVztJeBW4aA4ikmHoSBIbMpFL3f66VZc=\n=tPID\n-----END PGP SIGNATURE-----", "payload": "tree 5a0e8263c6119d7b46f2c9916e3140abe8bbcd4f\nparent 0ba7d41b83132ae681dc8746bf23628f86f8a468\nauthor flip1995 <hello@philkrones.com> 1544100566 +0100\ncommitter flip1995 <hello@philkrones.com> 1554308538 +0200\n\nAdd tests for internal lints\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c796b1f46aba25880942a461c3d1079250b9c8ac", "html_url": "https://github.com/rust-lang/rust/commit/c796b1f46aba25880942a461c3d1079250b9c8ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c796b1f46aba25880942a461c3d1079250b9c8ac/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ba7d41b83132ae681dc8746bf23628f86f8a468", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ba7d41b83132ae681dc8746bf23628f86f8a468", "html_url": "https://github.com/rust-lang/rust/commit/0ba7d41b83132ae681dc8746bf23628f86f8a468"}], "stats": {"total": 345, "additions": 345, "deletions": 0}, "files": [{"sha": "6d32744145a8ae70280d65c2aa1454b2b2cc4f3d", "filename": "src/test/ui-fulldeps/internal-lints/default_hash_types.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c796b1f46aba25880942a461c3d1079250b9c8ac/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdefault_hash_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c796b1f46aba25880942a461c3d1079250b9c8ac/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdefault_hash_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdefault_hash_types.rs?ref=c796b1f46aba25880942a461c3d1079250b9c8ac", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z internal-lints\n+\n+#![feature(rustc_private)]\n+\n+extern crate rustc_data_structures;\n+\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use std::collections::{HashMap, HashSet};\n+//~^ WARNING Prefer FxHashMap over HashMap, it has better performance\n+//~^^ WARNING Prefer FxHashSet over HashSet, it has better performance\n+\n+#[deny(default_hash_types)]\n+fn main() {\n+    let _map: HashMap<String, String> = HashMap::default();\n+    //~^ ERROR Prefer FxHashMap over HashMap, it has better performance\n+    //~^^ ERROR Prefer FxHashMap over HashMap, it has better performance\n+    let _set: HashSet<String> = HashSet::default();\n+    //~^ ERROR Prefer FxHashSet over HashSet, it has better performance\n+    //~^^ ERROR Prefer FxHashSet over HashSet, it has better performance\n+\n+    // test that the lint doesn't also match the Fx variants themselves\n+    let _fx_map: FxHashMap<String, String> = FxHashMap::default();\n+    let _fx_set: FxHashSet<String> = FxHashSet::default();\n+}"}, {"sha": "4f40c712aec4d6e86d30e20f0260bd04db545af4", "filename": "src/test/ui-fulldeps/internal-lints/default_hash_types.stderr", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/c796b1f46aba25880942a461c3d1079250b9c8ac/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdefault_hash_types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c796b1f46aba25880942a461c3d1079250b9c8ac/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdefault_hash_types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdefault_hash_types.stderr?ref=c796b1f46aba25880942a461c3d1079250b9c8ac", "patch": "@@ -0,0 +1,56 @@\n+warning: Prefer FxHashMap over HashMap, it has better performance\n+  --> $DIR/default_hash_types.rs:18:24\n+   |\n+LL | use std::collections::{HashMap, HashSet};\n+   |                        ^^^^^^^ help: use: `FxHashMap`\n+   |\n+   = note: #[warn(default_hash_types)] on by default\n+   = note: a `use rustc_data_structures::fx::FxHashMap` may be necessary\n+\n+warning: Prefer FxHashSet over HashSet, it has better performance\n+  --> $DIR/default_hash_types.rs:18:33\n+   |\n+LL | use std::collections::{HashMap, HashSet};\n+   |                                 ^^^^^^^ help: use: `FxHashSet`\n+   |\n+   = note: a `use rustc_data_structures::fx::FxHashSet` may be necessary\n+\n+error: Prefer FxHashMap over HashMap, it has better performance\n+  --> $DIR/default_hash_types.rs:24:15\n+   |\n+LL |     let _map: HashMap<String, String> = HashMap::default();\n+   |               ^^^^^^^ help: use: `FxHashMap`\n+   |\n+note: lint level defined here\n+  --> $DIR/default_hash_types.rs:22:8\n+   |\n+LL | #[deny(default_hash_types)]\n+   |        ^^^^^^^^^^^^^^^^^^\n+   = note: a `use rustc_data_structures::fx::FxHashMap` may be necessary\n+\n+error: Prefer FxHashMap over HashMap, it has better performance\n+  --> $DIR/default_hash_types.rs:24:41\n+   |\n+LL |     let _map: HashMap<String, String> = HashMap::default();\n+   |                                         ^^^^^^^ help: use: `FxHashMap`\n+   |\n+   = note: a `use rustc_data_structures::fx::FxHashMap` may be necessary\n+\n+error: Prefer FxHashSet over HashSet, it has better performance\n+  --> $DIR/default_hash_types.rs:27:15\n+   |\n+LL |     let _set: HashSet<String> = HashSet::default();\n+   |               ^^^^^^^ help: use: `FxHashSet`\n+   |\n+   = note: a `use rustc_data_structures::fx::FxHashSet` may be necessary\n+\n+error: Prefer FxHashSet over HashSet, it has better performance\n+  --> $DIR/default_hash_types.rs:27:33\n+   |\n+LL |     let _set: HashSet<String> = HashSet::default();\n+   |                                 ^^^^^^^ help: use: `FxHashSet`\n+   |\n+   = note: a `use rustc_data_structures::fx::FxHashSet` may be necessary\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "9962d9c6bcbbba1f0b40d9bd892228d926b7c91b", "filename": "src/test/ui-fulldeps/internal-lints/ty_tykind_usage.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/c796b1f46aba25880942a461c3d1079250b9c8ac/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fty_tykind_usage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c796b1f46aba25880942a461c3d1079250b9c8ac/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fty_tykind_usage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fty_tykind_usage.rs?ref=c796b1f46aba25880942a461c3d1079250b9c8ac", "patch": "@@ -0,0 +1,59 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z internal-lints\n+\n+#![feature(rustc_private)]\n+\n+extern crate rustc;\n+\n+use rustc::ty::{self, Ty, TyKind};\n+\n+#[deny(usage_of_ty_tykind)]\n+fn main() {\n+    let sty = TyKind::Bool; //~ ERROR usage of `ty::TyKind::<kind>`\n+\n+    match sty {\n+        TyKind::Bool => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+        TyKind::Char => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+        TyKind::Int(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+        TyKind::Uint(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+        TyKind::Float(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+        TyKind::Adt(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+        TyKind::Foreign(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+        TyKind::Str => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+        TyKind::Array(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+        TyKind::Slice(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+        TyKind::RawPtr(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+        TyKind::Ref(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+        TyKind::FnDef(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+        TyKind::FnPtr(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+        TyKind::Dynamic(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+        TyKind::Closure(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+        TyKind::Generator(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+        TyKind::GeneratorWitness(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+        TyKind::Never => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+        TyKind::Tuple(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+        TyKind::Projection(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+        TyKind::UnnormalizedProjection(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+        TyKind::Opaque(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+        TyKind::Param(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+        TyKind::Bound(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+        TyKind::Placeholder(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+        TyKind::Infer(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+        TyKind::Error => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+    }\n+\n+    if let ty::Int(int_ty) = sty {}\n+\n+    if let TyKind::Int(int_ty) = sty {} //~ ERROR usage of `ty::TyKind::<kind>`\n+\n+    fn ty_kind(ty_bad: TyKind<'_>, ty_good: Ty<'_>) {} //~ ERROR usage of `ty::TyKind`\n+}"}, {"sha": "82a8c715560e813f0f209c075dd5f55dec8464cc", "filename": "src/test/ui-fulldeps/internal-lints/ty_tykind_usage.stderr", "status": "added", "additions": 196, "deletions": 0, "changes": 196, "blob_url": "https://github.com/rust-lang/rust/blob/c796b1f46aba25880942a461c3d1079250b9c8ac/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fty_tykind_usage.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c796b1f46aba25880942a461c3d1079250b9c8ac/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fty_tykind_usage.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fty_tykind_usage.stderr?ref=c796b1f46aba25880942a461c3d1079250b9c8ac", "patch": "@@ -0,0 +1,196 @@\n+error: usage of `ty::TyKind::<kind>`\n+  --> $DIR/ty_tykind_usage.rs:21:15\n+   |\n+LL |     let sty = TyKind::Bool; //~ ERROR usage of `ty::TyKind::<kind>`\n+   |               ^^^^^^ help: try using ty::<kind> directly: `ty`\n+   |\n+note: lint level defined here\n+  --> $DIR/ty_tykind_usage.rs:19:8\n+   |\n+LL | #[deny(usage_of_ty_tykind)]\n+   |        ^^^^^^^^^^^^^^^^^^\n+\n+error: usage of `ty::TyKind::<kind>`\n+  --> $DIR/ty_tykind_usage.rs:24:9\n+   |\n+LL |         TyKind::Bool => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+   |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n+\n+error: usage of `ty::TyKind::<kind>`\n+  --> $DIR/ty_tykind_usage.rs:25:9\n+   |\n+LL |         TyKind::Char => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+   |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n+\n+error: usage of `ty::TyKind::<kind>`\n+  --> $DIR/ty_tykind_usage.rs:26:9\n+   |\n+LL |         TyKind::Int(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+   |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n+\n+error: usage of `ty::TyKind::<kind>`\n+  --> $DIR/ty_tykind_usage.rs:27:9\n+   |\n+LL |         TyKind::Uint(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+   |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n+\n+error: usage of `ty::TyKind::<kind>`\n+  --> $DIR/ty_tykind_usage.rs:28:9\n+   |\n+LL |         TyKind::Float(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+   |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n+\n+error: usage of `ty::TyKind::<kind>`\n+  --> $DIR/ty_tykind_usage.rs:29:9\n+   |\n+LL |         TyKind::Adt(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+   |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n+\n+error: usage of `ty::TyKind::<kind>`\n+  --> $DIR/ty_tykind_usage.rs:30:9\n+   |\n+LL |         TyKind::Foreign(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+   |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n+\n+error: usage of `ty::TyKind::<kind>`\n+  --> $DIR/ty_tykind_usage.rs:31:9\n+   |\n+LL |         TyKind::Str => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+   |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n+\n+error: usage of `ty::TyKind::<kind>`\n+  --> $DIR/ty_tykind_usage.rs:32:9\n+   |\n+LL |         TyKind::Array(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+   |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n+\n+error: usage of `ty::TyKind::<kind>`\n+  --> $DIR/ty_tykind_usage.rs:33:9\n+   |\n+LL |         TyKind::Slice(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+   |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n+\n+error: usage of `ty::TyKind::<kind>`\n+  --> $DIR/ty_tykind_usage.rs:34:9\n+   |\n+LL |         TyKind::RawPtr(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+   |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n+\n+error: usage of `ty::TyKind::<kind>`\n+  --> $DIR/ty_tykind_usage.rs:35:9\n+   |\n+LL |         TyKind::Ref(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+   |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n+\n+error: usage of `ty::TyKind::<kind>`\n+  --> $DIR/ty_tykind_usage.rs:36:9\n+   |\n+LL |         TyKind::FnDef(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+   |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n+\n+error: usage of `ty::TyKind::<kind>`\n+  --> $DIR/ty_tykind_usage.rs:37:9\n+   |\n+LL |         TyKind::FnPtr(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+   |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n+\n+error: usage of `ty::TyKind::<kind>`\n+  --> $DIR/ty_tykind_usage.rs:38:9\n+   |\n+LL |         TyKind::Dynamic(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+   |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n+\n+error: usage of `ty::TyKind::<kind>`\n+  --> $DIR/ty_tykind_usage.rs:39:9\n+   |\n+LL |         TyKind::Closure(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+   |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n+\n+error: usage of `ty::TyKind::<kind>`\n+  --> $DIR/ty_tykind_usage.rs:40:9\n+   |\n+LL |         TyKind::Generator(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+   |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n+\n+error: usage of `ty::TyKind::<kind>`\n+  --> $DIR/ty_tykind_usage.rs:41:9\n+   |\n+LL |         TyKind::GeneratorWitness(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+   |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n+\n+error: usage of `ty::TyKind::<kind>`\n+  --> $DIR/ty_tykind_usage.rs:42:9\n+   |\n+LL |         TyKind::Never => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+   |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n+\n+error: usage of `ty::TyKind::<kind>`\n+  --> $DIR/ty_tykind_usage.rs:43:9\n+   |\n+LL |         TyKind::Tuple(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+   |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n+\n+error: usage of `ty::TyKind::<kind>`\n+  --> $DIR/ty_tykind_usage.rs:44:9\n+   |\n+LL |         TyKind::Projection(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+   |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n+\n+error: usage of `ty::TyKind::<kind>`\n+  --> $DIR/ty_tykind_usage.rs:45:9\n+   |\n+LL |         TyKind::UnnormalizedProjection(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+   |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n+\n+error: usage of `ty::TyKind::<kind>`\n+  --> $DIR/ty_tykind_usage.rs:46:9\n+   |\n+LL |         TyKind::Opaque(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+   |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n+\n+error: usage of `ty::TyKind::<kind>`\n+  --> $DIR/ty_tykind_usage.rs:47:9\n+   |\n+LL |         TyKind::Param(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+   |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n+\n+error: usage of `ty::TyKind::<kind>`\n+  --> $DIR/ty_tykind_usage.rs:48:9\n+   |\n+LL |         TyKind::Bound(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+   |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n+\n+error: usage of `ty::TyKind::<kind>`\n+  --> $DIR/ty_tykind_usage.rs:49:9\n+   |\n+LL |         TyKind::Placeholder(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+   |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n+\n+error: usage of `ty::TyKind::<kind>`\n+  --> $DIR/ty_tykind_usage.rs:50:9\n+   |\n+LL |         TyKind::Infer(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+   |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n+\n+error: usage of `ty::TyKind::<kind>`\n+  --> $DIR/ty_tykind_usage.rs:51:9\n+   |\n+LL |         TyKind::Error => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+   |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n+\n+error: usage of `ty::TyKind::<kind>`\n+  --> $DIR/ty_tykind_usage.rs:56:12\n+   |\n+LL |     if let TyKind::Int(int_ty) = sty {} //~ ERROR usage of `ty::TyKind::<kind>`\n+   |            ^^^^^^ help: try using ty::<kind> directly: `ty`\n+\n+error: usage of `ty::TyKind`\n+  --> $DIR/ty_tykind_usage.rs:58:24\n+   |\n+LL |     fn ty_kind(ty_bad: TyKind<'_>, ty_good: Ty<'_>) {} //~ ERROR usage of `ty::TyKind`\n+   |                        ^^^^^^^^^^\n+   |\n+   = help: try using `ty::Ty` instead\n+\n+error: aborting due to 31 previous errors\n+"}]}