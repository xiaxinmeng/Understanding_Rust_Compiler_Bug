{"sha": "c97c216efd542fbec5a7ccf9555f3cebb3198cec", "node_id": "C_kwDOAAsO6NoAKGM5N2MyMTZlZmQ1NDJmYmVjNWE3Y2NmOTU1NWYzY2ViYjMxOThjZWM", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2021-07-23T13:19:22Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2022-02-28T23:57:10Z"}, "message": "Direct users towards using Rust feature names in CLI\n\nIf they are trying to use features rustc doesn't yet know about,\nrequest a feature request.\n\nAdditionally, also warn against using feature names without leading `+`\nor `-` signs.", "tree": {"sha": "779e6d34d1bc9adef8be9ffe6c0a7fc8acca80af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/779e6d34d1bc9adef8be9ffe6c0a7fc8acca80af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c97c216efd542fbec5a7ccf9555f3cebb3198cec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c97c216efd542fbec5a7ccf9555f3cebb3198cec", "html_url": "https://github.com/rust-lang/rust/commit/c97c216efd542fbec5a7ccf9555f3cebb3198cec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c97c216efd542fbec5a7ccf9555f3cebb3198cec/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfcfaa4ec1dd8a5bda33874dc180509b74bb625f", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfcfaa4ec1dd8a5bda33874dc180509b74bb625f", "html_url": "https://github.com/rust-lang/rust/commit/dfcfaa4ec1dd8a5bda33874dc180509b74bb625f"}], "stats": {"total": 304, "additions": 214, "deletions": 90}, "files": [{"sha": "4ab6f1bd0f569d9a76273e01dd542ad44bdc2fa8", "filename": "compiler/rustc_codegen_llvm/src/attributes.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c97c216efd542fbec5a7ccf9555f3cebb3198cec/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c97c216efd542fbec5a7ccf9555f3cebb3198cec/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs?ref=c97c216efd542fbec5a7ccf9555f3cebb3198cec", "patch": "@@ -382,10 +382,7 @@ pub fn from_fn_attrs<'ll, 'tcx>(\n     let mut function_features = function_features\n         .iter()\n         .flat_map(|feat| {\n-            llvm_util::to_llvm_feature(cx.tcx.sess, feat)\n-                .into_iter()\n-                .map(|f| format!(\"+{}\", f))\n-                .collect::<Vec<String>>()\n+            llvm_util::to_llvm_features(cx.tcx.sess, feat).into_iter().map(|f| format!(\"+{}\", f))\n         })\n         .chain(codegen_fn_attrs.instruction_set.iter().map(|x| match x {\n             InstructionSetAttr::ArmA32 => \"-thumb-mode\".to_string(),"}, {"sha": "ceba4f297eef3084375e8932bec829573ac97a3e", "filename": "compiler/rustc_codegen_llvm/src/llvm_util.rs", "status": "modified", "additions": 130, "deletions": 71, "changes": 201, "blob_url": "https://github.com/rust-lang/rust/blob/c97c216efd542fbec5a7ccf9555f3cebb3198cec/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c97c216efd542fbec5a7ccf9555f3cebb3198cec/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs?ref=c97c216efd542fbec5a7ccf9555f3cebb3198cec", "patch": "@@ -2,14 +2,18 @@ use crate::back::write::create_informational_target_machine;\n use crate::{llvm, llvm_util};\n use libc::c_int;\n use libloading::Library;\n-use rustc_codegen_ssa::target_features::{supported_target_features, tied_target_features};\n+use rustc_codegen_ssa::target_features::{\n+    supported_target_features, tied_target_features, RUSTC_SPECIFIC_FEATURES,\n+};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::small_c_str::SmallCStr;\n use rustc_fs_util::path_to_c_string;\n use rustc_middle::bug;\n use rustc_session::config::PrintRequest;\n use rustc_session::Session;\n use rustc_span::symbol::Symbol;\n use rustc_target::spec::{MergeFunctions, PanicStrategy};\n+use smallvec::{smallvec, SmallVec};\n use std::ffi::{CStr, CString};\n use tracing::debug;\n \n@@ -155,45 +159,46 @@ pub fn time_trace_profiler_finish(file_name: &Path) {\n     }\n }\n \n-// WARNING: the features after applying `to_llvm_feature` must be known\n+// WARNING: the features after applying `to_llvm_features` must be known\n // to LLVM or the feature detection code will walk past the end of the feature\n // array, leading to crashes.\n+//\n // To find a list of LLVM's names, check llvm-project/llvm/include/llvm/Support/*TargetParser.def\n // where the * matches the architecture's name\n // Beware to not use the llvm github project for this, but check the git submodule\n // found in src/llvm-project\n // Though note that Rust can also be build with an external precompiled version of LLVM\n // which might lead to failures if the oldest tested / supported LLVM version\n // doesn't yet support the relevant intrinsics\n-pub fn to_llvm_feature<'a>(sess: &Session, s: &'a str) -> Vec<&'a str> {\n+pub fn to_llvm_features<'a>(sess: &Session, s: &'a str) -> SmallVec<[&'a str; 2]> {\n     let arch = if sess.target.arch == \"x86_64\" { \"x86\" } else { &*sess.target.arch };\n     match (arch, s) {\n         (\"x86\", \"sse4.2\") => {\n             if get_version() >= (14, 0, 0) {\n-                vec![\"sse4.2\", \"crc32\"]\n+                smallvec![\"sse4.2\", \"crc32\"]\n             } else {\n-                vec![\"sse4.2\"]\n+                smallvec![\"sse4.2\"]\n             }\n         }\n-        (\"x86\", \"pclmulqdq\") => vec![\"pclmul\"],\n-        (\"x86\", \"rdrand\") => vec![\"rdrnd\"],\n-        (\"x86\", \"bmi1\") => vec![\"bmi\"],\n-        (\"x86\", \"cmpxchg16b\") => vec![\"cx16\"],\n-        (\"x86\", \"avx512vaes\") => vec![\"vaes\"],\n-        (\"x86\", \"avx512gfni\") => vec![\"gfni\"],\n-        (\"x86\", \"avx512vpclmulqdq\") => vec![\"vpclmulqdq\"],\n-        (\"aarch64\", \"fp\") => vec![\"fp-armv8\"],\n-        (\"aarch64\", \"fp16\") => vec![\"fullfp16\"],\n-        (\"aarch64\", \"fhm\") => vec![\"fp16fml\"],\n-        (\"aarch64\", \"rcpc2\") => vec![\"rcpc-immo\"],\n-        (\"aarch64\", \"dpb\") => vec![\"ccpp\"],\n-        (\"aarch64\", \"dpb2\") => vec![\"ccdp\"],\n-        (\"aarch64\", \"frintts\") => vec![\"fptoint\"],\n-        (\"aarch64\", \"fcma\") => vec![\"complxnum\"],\n-        (\"aarch64\", \"pmuv3\") => vec![\"perfmon\"],\n-        (\"aarch64\", \"paca\") => vec![\"pauth\"],\n-        (\"aarch64\", \"pacg\") => vec![\"pauth\"],\n-        (_, s) => vec![s],\n+        (\"x86\", \"pclmulqdq\") => smallvec![\"pclmul\"],\n+        (\"x86\", \"rdrand\") => smallvec![\"rdrnd\"],\n+        (\"x86\", \"bmi1\") => smallvec![\"bmi\"],\n+        (\"x86\", \"cmpxchg16b\") => smallvec![\"cx16\"],\n+        (\"x86\", \"avx512vaes\") => smallvec![\"vaes\"],\n+        (\"x86\", \"avx512gfni\") => smallvec![\"gfni\"],\n+        (\"x86\", \"avx512vpclmulqdq\") => smallvec![\"vpclmulqdq\"],\n+        (\"aarch64\", \"fp\") => smallvec![\"fp-armv8\"],\n+        (\"aarch64\", \"fp16\") => smallvec![\"fullfp16\"],\n+        (\"aarch64\", \"fhm\") => smallvec![\"fp16fml\"],\n+        (\"aarch64\", \"rcpc2\") => smallvec![\"rcpc-immo\"],\n+        (\"aarch64\", \"dpb\") => smallvec![\"ccpp\"],\n+        (\"aarch64\", \"dpb2\") => smallvec![\"ccdp\"],\n+        (\"aarch64\", \"frintts\") => smallvec![\"fptoint\"],\n+        (\"aarch64\", \"fcma\") => smallvec![\"complxnum\"],\n+        (\"aarch64\", \"pmuv3\") => smallvec![\"perfmon\"],\n+        (\"aarch64\", \"paca\") => smallvec![\"pauth\"],\n+        (\"aarch64\", \"pacg\") => smallvec![\"pauth\"],\n+        (_, s) => smallvec![s],\n     }\n }\n \n@@ -207,7 +212,6 @@ pub fn check_tied_features(\n         // Tied features must be set to the same value, or not set at all\n         let mut tied_iter = tied.iter();\n         let enabled = features.get(tied_iter.next().unwrap());\n-\n         if tied_iter.any(|f| enabled != features.get(f)) {\n             return Some(tied);\n         }\n@@ -221,15 +225,11 @@ pub fn target_features(sess: &Session) -> Vec<Symbol> {\n         supported_target_features(sess)\n             .iter()\n             .filter_map(|&(feature, gate)| {\n-                if sess.is_nightly_build() || gate.is_none() {\n-                    Some(feature)\n-                } else {\n-                    None\n-                }\n+                if sess.is_nightly_build() || gate.is_none() { Some(feature) } else { None }\n             })\n             .filter(|feature| {\n-                for llvm_feature in to_llvm_feature(sess, feature) {\n-                    let cstr = CString::new(llvm_feature).unwrap();\n+                for llvm_feature in to_llvm_features(sess, feature) {\n+                    let cstr = SmallCStr::new(llvm_feature);\n                     if unsafe { llvm::LLVMRustHasFeature(target_machine, cstr.as_ptr()) } {\n                         return true;\n                     }\n@@ -302,9 +302,9 @@ fn print_target_features(sess: &Session, tm: &llvm::TargetMachine) {\n     let mut rustc_target_features = supported_target_features(sess)\n         .iter()\n         .filter_map(|(feature, _gate)| {\n-            for llvm_feature in to_llvm_feature(sess, *feature) {\n+            for llvm_feature in to_llvm_features(sess, *feature) {\n                 // LLVM asserts that these are sorted. LLVM and Rust both use byte comparison for these strings.\n-                match target_features.binary_search_by_key(&llvm_feature, |(f, _d)| (*f)).ok().map(\n+                match target_features.binary_search_by_key(&llvm_feature, |(f, _d)| f).ok().map(\n                     |index| {\n                         let (_f, desc) = target_features.remove(index);\n                         (*feature, desc)\n@@ -374,14 +374,7 @@ pub fn target_cpu(sess: &Session) -> &str {\n \n /// The list of LLVM features computed from CLI flags (`-Ctarget-cpu`, `-Ctarget-feature`,\n /// `--target` and similar).\n-// FIXME(nagisa): Cache the output of this somehow? Maybe make this a query? We're calling this\n-// for every function that has `#[target_feature]` on it. The global features won't change between\n-// the functions; only crates, maybe\u2026\n-pub fn llvm_global_features(sess: &Session) -> Vec<String> {\n-    // FIXME(nagisa): this should definitely be available more centrally and to other codegen backends.\n-    /// These features control behaviour of rustc rather than llvm.\n-    const RUSTC_SPECIFIC_FEATURES: &[&str] = &[\"crt-static\"];\n-\n+pub(crate) fn global_llvm_features(sess: &Session, diagnostics: bool) -> Vec<String> {\n     // Features that come earlier are overriden by conflicting features later in the string.\n     // Typically we'll want more explicit settings to override the implicit ones, so:\n     //\n@@ -427,42 +420,108 @@ pub fn llvm_global_features(sess: &Session) -> Vec<String> {\n         Some(_) | None => {}\n     };\n \n-    fn strip(s: &str) -> &str {\n-        s.strip_prefix(&['+', '-']).unwrap_or(s)\n+    // Features implied by an implicit or explicit `--target`.\n+    features.extend(\n+        sess.target\n+            .features\n+            .split(',')\n+            .filter(|v| !v.is_empty() && backend_feature_name(v).is_some())\n+            .map(String::from),\n+    );\n+\n+    // -Ctarget-features\n+    let supported_features = supported_target_features(sess);\n+    let feats = sess\n+        .opts\n+        .cg\n+        .target_feature\n+        .split(',')\n+        .filter_map(|s| {\n+            let enable_disable = match s.chars().next() {\n+                None => return None,\n+                Some(c @ '+' | c @ '-') => c,\n+                Some(_) => {\n+                    if diagnostics {\n+                        let mut diag = sess.struct_warn(&format!(\n+                            \"unknown feature specified for `-Ctarget-feature`: `{}`\",\n+                            s\n+                        ));\n+                        diag.note(\"features must begin with a `+` to enable or `-` to disable it\");\n+                        diag.emit();\n+                    }\n+                    return None;\n+                }\n+            };\n+\n+            let feature = backend_feature_name(s)?;\n+            // Warn against use of LLVM specific feature names on the CLI.\n+            if diagnostics && !supported_features.iter().any(|&(v, _)| v == feature) {\n+                let rust_feature = supported_features.iter().find_map(|&(rust_feature, _)| {\n+                    let llvm_features = to_llvm_features(sess, rust_feature);\n+                    if llvm_features.contains(&feature) && !llvm_features.contains(&rust_feature) {\n+                        Some(rust_feature)\n+                    } else {\n+                        None\n+                    }\n+                });\n+                let mut diag = sess.struct_warn(&format!(\n+                    \"unknown feature specified for `-Ctarget-feature`: `{}`\",\n+                    feature\n+                ));\n+                diag.note(\"it is still passed through to the codegen backend\");\n+                if let Some(rust_feature) = rust_feature {\n+                    diag.help(&format!(\"you might have meant: `{}`\", rust_feature));\n+                } else {\n+                    diag.note(\"consider filing a feature request\");\n+                }\n+                diag.emit();\n+            }\n+            Some((enable_disable, feature))\n+        })\n+        .collect::<SmallVec<[(char, &str); 8]>>();\n+\n+    if diagnostics {\n+        // FIXME(nagisa): figure out how to not allocate a full hashset here.\n+        let featmap = feats.iter().map(|&(flag, feat)| (feat, flag == '+')).collect();\n+        if let Some(f) = check_tied_features(sess, &featmap) {\n+            sess.err(&format!(\n+                \"target features {} must all be enabled or disabled together\",\n+                f.join(\", \")\n+            ));\n+        }\n     }\n \n-    let filter = |s: &str| {\n-        // features must start with a `+` or `-`.\n-        let feature = match s.strip_prefix(&['+', '-'][..]) {\n-            None => return vec![],\n-            // Rustc-specific feature requests like `+crt-static` or `-crt-static`\n-            // are not passed down to LLVM.\n-            Some(feature) if RUSTC_SPECIFIC_FEATURES.contains(&feature) => return vec![],\n-            Some(feature) => feature,\n-        };\n-        // ... otherwise though we run through `to_llvm_feature` when\n+    features.extend(feats.into_iter().flat_map(|(enable_disable, feature)| {\n+        // rustc-specific features do not get passed down to LLVM\u2026\n+        if RUSTC_SPECIFIC_FEATURES.contains(&feature) {\n+            return SmallVec::<[_; 2]>::new();\n+        }\n+        // ... otherwise though we run through `to_llvm_feature when\n         // passing requests down to LLVM. This means that all in-language\n         // features also work on the command line instead of having two\n         // different names when the LLVM name and the Rust name differ.\n-        to_llvm_feature(sess, feature).iter().map(|f| format!(\"{}{}\", &s[..1], f)).collect()\n-    };\n-\n-    // Features implied by an implicit or explicit `--target`.\n-    features.extend(sess.target.features.split(',').flat_map(&filter));\n+        to_llvm_features(sess, feature)\n+            .into_iter()\n+            .map(|f| format!(\"{}{}\", enable_disable, f))\n+            .collect()\n+    }));\n+    features\n+}\n \n-    // -Ctarget-features\n-    let feats: Vec<&str> = sess.opts.cg.target_feature.split(',').collect();\n-    // LLVM enables based on the last occurence of a feature\n-    if let Some(f) =\n-        check_tied_features(sess, &feats.iter().map(|f| (strip(f), !f.starts_with(\"-\"))).collect())\n-    {\n-        sess.err(&format!(\n-            \"target features {} must all be enabled or disabled together\",\n-            f.join(\", \")\n-        ));\n+/// Returns a feature name for the given `+feature` or `-feature` string.\n+///\n+/// Only allows features that are backend specific (i.e. not [`RUSTC_SPECIFIC_FEATURES`].)\n+fn backend_feature_name(s: &str) -> Option<&str> {\n+    // features must start with a `+` or `-`.\n+    let feature = s.strip_prefix(&['+', '-'][..]).unwrap_or_else(|| {\n+        bug!(\"target feature `{}` must begin with a `+` or `-`\", s);\n+    });\n+    // Rustc-specific feature requests like `+crt-static` or `-crt-static`\n+    // are not passed down to LLVM.\n+    if RUSTC_SPECIFIC_FEATURES.contains(&feature) {\n+        return None;\n     }\n-    features.extend(feats.iter().flat_map(&filter));\n-    features\n+    Some(feature)\n }\n \n pub fn tune_cpu(sess: &Session) -> Option<&str> {"}, {"sha": "fd4adfea8082c745eeead9a6c47108dd215f841a", "filename": "compiler/rustc_codegen_ssa/src/target_features.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c97c216efd542fbec5a7ccf9555f3cebb3198cec/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c97c216efd542fbec5a7ccf9555f3cebb3198cec/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs?ref=c97c216efd542fbec5a7ccf9555f3cebb3198cec", "patch": "@@ -4,6 +4,9 @@ use rustc_session::Session;\n use rustc_span::symbol::sym;\n use rustc_span::symbol::Symbol;\n \n+/// Features that control behaviour of rustc, rather than the codegen.\n+pub const RUSTC_SPECIFIC_FEATURES: &[&str] = &[\"crt-static\"];\n+\n // When adding features to the below lists\n // check whether they're named already elsewhere in rust\n // e.g. in stdarch and whether the given name matches LLVM's"}, {"sha": "efee6592923422f94ebb076137accd4112c4b19f", "filename": "src/test/ui/target-feature/missing-plusminus.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c97c216efd542fbec5a7ccf9555f3cebb3198cec/src%2Ftest%2Fui%2Ftarget-feature%2Fmissing-plusminus.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c97c216efd542fbec5a7ccf9555f3cebb3198cec/src%2Ftest%2Fui%2Ftarget-feature%2Fmissing-plusminus.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Fmissing-plusminus.rs?ref=c97c216efd542fbec5a7ccf9555f3cebb3198cec", "patch": "@@ -0,0 +1,2 @@\n+// compile-flags: -Ctarget-feature=banana --crate-type=rlib\n+// build-pass"}, {"sha": "1d446107f7086a70c3218a001b1c704b8c9bb36d", "filename": "src/test/ui/target-feature/missing-plusminus.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c97c216efd542fbec5a7ccf9555f3cebb3198cec/src%2Ftest%2Fui%2Ftarget-feature%2Fmissing-plusminus.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c97c216efd542fbec5a7ccf9555f3cebb3198cec/src%2Ftest%2Fui%2Ftarget-feature%2Fmissing-plusminus.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Fmissing-plusminus.stderr?ref=c97c216efd542fbec5a7ccf9555f3cebb3198cec", "patch": "@@ -0,0 +1,18 @@\n+warning: unknown feature specified for `-Ctarget-feature`: `banana`\n+   |\n+   = note: features must begin with a `+` to enable or `-` to disable it\n+\n+warning: unknown feature specified for `-Ctarget-feature`: `banana`\n+   |\n+   = note: features must begin with a `+` to enable or `-` to disable it\n+\n+warning: unknown feature specified for `-Ctarget-feature`: `banana`\n+   |\n+   = note: features must begin with a `+` to enable or `-` to disable it\n+\n+warning: unknown feature specified for `-Ctarget-feature`: `banana`\n+   |\n+   = note: features must begin with a `+` to enable or `-` to disable it\n+\n+warning: 4 warnings emitted\n+"}, {"sha": "4e4e2160cac57270595cbeb63d38585c63465f16", "filename": "src/test/ui/target-feature/similar-feature-suggestion.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c97c216efd542fbec5a7ccf9555f3cebb3198cec/src%2Ftest%2Fui%2Ftarget-feature%2Fsimilar-feature-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c97c216efd542fbec5a7ccf9555f3cebb3198cec/src%2Ftest%2Fui%2Ftarget-feature%2Fsimilar-feature-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Fsimilar-feature-suggestion.rs?ref=c97c216efd542fbec5a7ccf9555f3cebb3198cec", "patch": "@@ -0,0 +1,6 @@\n+// compile-flags: -Ctarget-feature=+rdrnd --crate-type=rlib --target=x86_64-unknown-linux-gnu\n+// build-pass\n+// needs-llvm-components: x86\n+\n+#![feature(no_core)]\n+#![no_core]"}, {"sha": "de4d0064fbcd0c957935262f0b53808b1b6b607a", "filename": "src/test/ui/target-feature/similar-feature-suggestion.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c97c216efd542fbec5a7ccf9555f3cebb3198cec/src%2Ftest%2Fui%2Ftarget-feature%2Fsimilar-feature-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c97c216efd542fbec5a7ccf9555f3cebb3198cec/src%2Ftest%2Fui%2Ftarget-feature%2Fsimilar-feature-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Fsimilar-feature-suggestion.stderr?ref=c97c216efd542fbec5a7ccf9555f3cebb3198cec", "patch": "@@ -0,0 +1,22 @@\n+warning: unknown feature specified for `-Ctarget-feature`: `rdrnd`\n+   |\n+   = note: it is still passed through to the codegen backend\n+   = help: you might have meant: `rdrand`\n+\n+warning: unknown feature specified for `-Ctarget-feature`: `rdrnd`\n+   |\n+   = note: it is still passed through to the codegen backend\n+   = help: did you mean: `rdrand`\n+\n+warning: unknown feature specified for `-Ctarget-feature`: `rdrnd`\n+   |\n+   = note: it is still passed through to the codegen backend\n+   = help: did you mean: `rdrand`\n+\n+warning: unknown feature specified for `-Ctarget-feature`: `rdrnd`\n+   |\n+   = note: it is still passed through to the codegen backend\n+   = help: did you mean: `rdrand`\n+\n+warning: 4 warnings emitted\n+"}, {"sha": "0cc901eecaa2cc072b15a997518b536dea8519d7", "filename": "src/test/ui/target-feature/tied-features-cli.one.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c97c216efd542fbec5a7ccf9555f3cebb3198cec/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features-cli.one.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c97c216efd542fbec5a7ccf9555f3cebb3198cec/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features-cli.one.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features-cli.one.stderr?ref=c97c216efd542fbec5a7ccf9555f3cebb3198cec", "patch": "@@ -1,4 +1,4 @@\n-error: Target features paca, pacg must all be enabled or disabled together\n+error: target features paca, pacg must all be enabled or disabled together\n \n error: aborting due to previous error\n "}, {"sha": "72b7e3da5309d94f67023dac6b2de257d5b0f0a6", "filename": "src/test/ui/target-feature/tied-features-cli.rs", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c97c216efd542fbec5a7ccf9555f3cebb3198cec/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features-cli.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c97c216efd542fbec5a7ccf9555f3cebb3198cec/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features-cli.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features-cli.rs?ref=c97c216efd542fbec5a7ccf9555f3cebb3198cec", "patch": "@@ -1,9 +1,20 @@\n-// only-aarch64\n-// revisions: one two three four\n-//[one] compile-flags: -C target-feature=+paca\n-//[two] compile-flags: -C target-feature=-pacg,+pacg\n-//[three] compile-flags: -C target-feature=+paca,+pacg,-paca\n-//[four] check-pass\n-//[four] compile-flags: -C target-feature=-paca,+pacg -C target-feature=+paca\n+// revisions: one two three\n+// compile-flags: --crate-type=rlib --target=aarch64-unknown-linux-gnu\n+// needs-llvm-components: aarch64\n+//\n+//\n+// [one] check-fail\n+// [one] compile-flags: -C target-feature=+paca\n+// [two] check-fail\n+// [two] compile-flags: -C target-feature=-pacg,+pacg\n+// [three] check-fail\n+// [three] compile-flags: -C target-feature=+paca,+pacg,-paca\n+// [four] build-pass\n+// [four] compile-flags: -C target-feature=-paca,+pacg -C target-feature=+paca\n+#![feature(no_core, lang_items)]\n+#![no_core]\n+\n+#[lang=\"sized\"]\n+trait Sized {}\n \n fn main() {}"}, {"sha": "0cc901eecaa2cc072b15a997518b536dea8519d7", "filename": "src/test/ui/target-feature/tied-features-cli.three.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c97c216efd542fbec5a7ccf9555f3cebb3198cec/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features-cli.three.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c97c216efd542fbec5a7ccf9555f3cebb3198cec/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features-cli.three.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features-cli.three.stderr?ref=c97c216efd542fbec5a7ccf9555f3cebb3198cec", "patch": "@@ -1,4 +1,4 @@\n-error: Target features paca, pacg must all be enabled or disabled together\n+error: target features paca, pacg must all be enabled or disabled together\n \n error: aborting due to previous error\n "}, {"sha": "0cc901eecaa2cc072b15a997518b536dea8519d7", "filename": "src/test/ui/target-feature/tied-features-cli.two.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c97c216efd542fbec5a7ccf9555f3cebb3198cec/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features-cli.two.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c97c216efd542fbec5a7ccf9555f3cebb3198cec/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features-cli.two.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features-cli.two.stderr?ref=c97c216efd542fbec5a7ccf9555f3cebb3198cec", "patch": "@@ -1,4 +1,4 @@\n-error: Target features paca, pacg must all be enabled or disabled together\n+error: target features paca, pacg must all be enabled or disabled together\n \n error: aborting due to previous error\n "}, {"sha": "01353e9f70c59879ced0702020377441caeb9673", "filename": "src/test/ui/target-feature/tied-features.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c97c216efd542fbec5a7ccf9555f3cebb3198cec/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c97c216efd542fbec5a7ccf9555f3cebb3198cec/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features.rs?ref=c97c216efd542fbec5a7ccf9555f3cebb3198cec", "patch": "@@ -1,9 +1,15 @@\n-// only-aarch64\n // build-fail\n-\n+// compile-flags: --crate-type=rlib --target=aarch64-unknown-linux-gnu\n+// needs-llvm-components: aarch64\n #![feature(aarch64_target_feature, target_feature_11)]\n+#![feature(no_core, lang_items)]\n+#![no_core]\n+\n+#[lang=\"sized\"]\n+trait Sized {}\n \n-fn main() {\n+// FIXME: this should not need to be public.\n+pub fn main() {\n     #[target_feature(enable = \"pacg\")]\n     //~^ ERROR must all be either enabled or disabled together\n     unsafe fn inner() {}"}, {"sha": "6362c7ae60b6e42557bcdefc6868cb46a2c6ea82", "filename": "src/test/ui/target-feature/tied-features.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c97c216efd542fbec5a7ccf9555f3cebb3198cec/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c97c216efd542fbec5a7ccf9555f3cebb3198cec/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features.stderr?ref=c97c216efd542fbec5a7ccf9555f3cebb3198cec", "patch": "@@ -1,13 +1,13 @@\n error: the target features paca, pacg must all be either enabled or disabled together\n-  --> $DIR/tied-features.rs:7:5\n+  --> $DIR/tied-features.rs:13:5\n    |\n LL |     #[target_feature(enable = \"pacg\")]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add the missing features in a `target_feature` attribute\n \n error: the target features paca, pacg must all be either enabled or disabled together\n-  --> $DIR/tied-features.rs:19:1\n+  --> $DIR/tied-features.rs:25:1\n    |\n LL | #[target_feature(enable = \"paca\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}]}