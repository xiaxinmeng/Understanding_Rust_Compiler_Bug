{"sha": "52e1372e038d0372c7435b50e7d6e98a15b9a02f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyZTEzNzJlMDM4ZDAzNzJjNzQzNWI1MGU3ZDZlOThhMTViOWEwMmY=", "commit": {"author": {"name": "Elichai Turkel", "email": "elichai.turkel@gmail.com", "date": "2020-03-18T11:17:18Z"}, "committer": {"name": "Elichai Turkel", "email": "elichai.turkel@gmail.com", "date": "2020-03-18T12:14:23Z"}, "message": "Abort instead of panic in asserting intrinsics, because they might not be panic safe", "tree": {"sha": "d86dbba353107c3b8be8db081607040788574506", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d86dbba353107c3b8be8db081607040788574506"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/52e1372e038d0372c7435b50e7d6e98a15b9a02f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJNBAABCAA3FiEEC5PUstyhDoo+NyfXk4PN6ejman8FAl5yEJ8ZHGVsaWNoYWku\ndHVya2VsQGdtYWlsLmNvbQAKCRCTg83p6OZqf++OD/97HgBLcjoXJpWiTyOVPumg\nc8H8sFOMJIS8h3L0nLVWitFZTmOKwr1y5Wuaz3DY+f5v4kC59J/lKIBFLSkM5TK8\nBupX4MkETy6Ys9UrQhmCdiPowrtVNKTSyTW3TD+aNl8GQ9VuOPLXPWjDSfioOALN\npFmdqT4HnLYMTFhkSvGw5+vmhNjZ4dxL+xoNrBHHDX4p2iNdOFtrl33AMZYsxfnd\n3FyRZ+4QvrhcumflOAAchO4Wrx+aEJC49cuzYCIMc90BZiXrtJUGMnlb8cBqTI4n\nUCR0TSiub6asimN0TtM8PX5j3jZXAllcZyy2IclBsowW12lQbkNc32SnmTPqqHfS\nQ30pW/4FsjsHYFDjDv0WcH/xrBlpKTJy5cVmhvOOz0fKr2qLexHQjBjLsp02bxrd\nAwJPyJGBGbMJlUc84CXxnF+ga/xwQO4KhOj8kzCKln42tYwRI2RIhylUzKQ5cu9s\nXeooKrPd4dHp0dlLWr1zDAW9YAQtAYHG9lbG0KG1pfXwGr3vIv0iXneZNt2RDLar\n0ICkPtTxEl+JV6WS6fgkk3WXWb9xrLO19FDVsDM9dC30ZDXSTJ1lMFAe4ae7cceI\nn/A9KluvgCoHxugGKzT0srHL3GW1SgNfjon/IjIWdQdXszEiFht0sGcKCiY03cEj\nsnbsSj3WWzMw8LC4iMr3wg==\n=jhTd\n-----END PGP SIGNATURE-----", "payload": "tree d86dbba353107c3b8be8db081607040788574506\nparent 1b8979c8c7fc03bd5b9a686d87b6970232099fd6\nauthor Elichai Turkel <elichai.turkel@gmail.com> 1584530238 +0200\ncommitter Elichai Turkel <elichai.turkel@gmail.com> 1584533663 +0200\n\nAbort instead of panic in asserting intrinsics, because they might not be panic safe\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/52e1372e038d0372c7435b50e7d6e98a15b9a02f", "html_url": "https://github.com/rust-lang/rust/commit/52e1372e038d0372c7435b50e7d6e98a15b9a02f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/52e1372e038d0372c7435b50e7d6e98a15b9a02f/comments", "author": {"login": "elichai", "id": 2167860, "node_id": "MDQ6VXNlcjIxNjc4NjA=", "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4", "gravatar_id": "", "url": "https://api.github.com/users/elichai", "html_url": "https://github.com/elichai", "followers_url": "https://api.github.com/users/elichai/followers", "following_url": "https://api.github.com/users/elichai/following{/other_user}", "gists_url": "https://api.github.com/users/elichai/gists{/gist_id}", "starred_url": "https://api.github.com/users/elichai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/elichai/subscriptions", "organizations_url": "https://api.github.com/users/elichai/orgs", "repos_url": "https://api.github.com/users/elichai/repos", "events_url": "https://api.github.com/users/elichai/events{/privacy}", "received_events_url": "https://api.github.com/users/elichai/received_events", "type": "User", "site_admin": false}, "committer": {"login": "elichai", "id": 2167860, "node_id": "MDQ6VXNlcjIxNjc4NjA=", "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4", "gravatar_id": "", "url": "https://api.github.com/users/elichai", "html_url": "https://github.com/elichai", "followers_url": "https://api.github.com/users/elichai/followers", "following_url": "https://api.github.com/users/elichai/following{/other_user}", "gists_url": "https://api.github.com/users/elichai/gists{/gist_id}", "starred_url": "https://api.github.com/users/elichai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/elichai/subscriptions", "organizations_url": "https://api.github.com/users/elichai/orgs", "repos_url": "https://api.github.com/users/elichai/repos", "events_url": "https://api.github.com/users/elichai/events{/privacy}", "received_events_url": "https://api.github.com/users/elichai/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b8979c8c7fc03bd5b9a686d87b6970232099fd6", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b8979c8c7fc03bd5b9a686d87b6970232099fd6", "html_url": "https://github.com/rust-lang/rust/commit/1b8979c8c7fc03bd5b9a686d87b6970232099fd6"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "112b4f3c0040ff4f0f7fa8be5ecae459532555ef", "filename": "src/shims/intrinsics.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/52e1372e038d0372c7435b50e7d6e98a15b9a02f/src%2Fshims%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52e1372e038d0372c7435b50e7d6e98a15b9a02f/src%2Fshims%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics.rs?ref=52e1372e038d0372c7435b50e7d6e98a15b9a02f", "patch": "@@ -440,15 +440,15 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             \"assert_uninit_valid\" => {\n                 let ty = substs.type_at(0);\n                 let layout = this.layout_of(ty)?;\n-                // Return here because we panicked instead of returning normally from the intrinsic.\n+                // Abort here because the caller might not be panic safe.\n                 if layout.abi.is_uninhabited() {\n-                    return this.start_panic(&format!(\"attempted to instantiate uninhabited type `{}`\", ty), unwind);\n+                    throw_machine_stop!(TerminationInfo::Abort(Some(format!(\"attempted to instantiate uninhabited type `{}`\", ty))))\n                 }\n                 if intrinsic_name == \"assert_zero_valid\" && !layout.might_permit_raw_init(this, /*zero:*/ true).unwrap() {\n-                    return this.start_panic(&format!(\"attempted to zero-initialize type `{}`, which is invalid\", ty), unwind);\n+                    throw_machine_stop!(TerminationInfo::Abort(Some(format!(\"attempted to zero-initialize type `{}`, which is invalid\", ty))))\n                 }\n                 if intrinsic_name == \"assert_uninit_valid\" && !layout.might_permit_raw_init(this, /*zero:*/ false).unwrap() {\n-                    return this.start_panic(&format!(\"attempted to leave type `{}` uninitialized, which is invalid\", ty), unwind);\n+                    throw_machine_stop!(TerminationInfo::Abort(Some(format!(\"attempted to leave type `{}` uninitialized, which is invalid\", ty))))\n                 }\n             }\n "}]}