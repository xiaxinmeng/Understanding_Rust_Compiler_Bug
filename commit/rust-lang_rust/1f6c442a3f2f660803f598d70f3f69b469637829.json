{"sha": "1f6c442a3f2f660803f598d70f3f69b469637829", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmNmM0NDJhM2YyZjY2MDgwM2Y1OThkNzBmM2Y2OWI0Njk2Mzc4Mjk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-08T20:09:40Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-08T20:09:40Z"}, "message": "Fix panic with EOF token", "tree": {"sha": "6fa236aa3a1cdfaef96603c9f3c6a76ec78246c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6fa236aa3a1cdfaef96603c9f3c6a76ec78246c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f6c442a3f2f660803f598d70f3f69b469637829", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f6c442a3f2f660803f598d70f3f69b469637829", "html_url": "https://github.com/rust-lang/rust/commit/1f6c442a3f2f660803f598d70f3f69b469637829", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f6c442a3f2f660803f598d70f3f69b469637829/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c598d3d8a9d6fe0b8303250c88c252ff98883fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c598d3d8a9d6fe0b8303250c88c252ff98883fd", "html_url": "https://github.com/rust-lang/rust/commit/8c598d3d8a9d6fe0b8303250c88c252ff98883fd"}], "stats": {"total": 433, "additions": 421, "deletions": 12}, "files": [{"sha": "c78c6e43a2db157347a3e5b93d374563de92f774", "filename": "src/parser_api.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1f6c442a3f2f660803f598d70f3f69b469637829/src%2Fparser_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f6c442a3f2f660803f598d70f3f69b469637829/src%2Fparser_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser_api.rs?ref=1f6c442a3f2f660803f598d70f3f69b469637829", "patch": "@@ -29,6 +29,15 @@ macro_rules! token_set_union {\n     ($($ts:expr),* ,) => { token_set_union!($($ts),*) };\n }\n \n+#[test]\n+fn token_set_works_for_tokens() {\n+    use SyntaxKind::*;\n+    let ts = token_set! { EOF, SHEBANG };\n+    assert!(ts.contains(EOF));\n+    assert!(ts.contains(SHEBANG));\n+    assert!(!ts.contains(PLUS));\n+}\n+\n /// `Parser` struct provides the low-level API for\n /// navigating through the stream of tokens and\n /// constructing the parse tree. The actual parsing"}, {"sha": "655ec4ea57d66070e1937b1f0111210820f767bc", "filename": "src/syntax_kinds/generated.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1f6c442a3f2f660803f598d70f3f69b469637829/src%2Fsyntax_kinds%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f6c442a3f2f660803f598d70f3f69b469637829/src%2Fsyntax_kinds%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsyntax_kinds%2Fgenerated.rs?ref=1f6c442a3f2f660803f598d70f3f69b469637829", "patch": "@@ -5,6 +5,12 @@ use super::SyntaxInfo;\n /// The kind of syntax node, e.g. `IDENT`, `USE_KW`, or `STRUCT_DEF`.\n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n pub enum SyntaxKind {\n+    // Technical SyntaxKinds: they appear temporally during parsing,\n+    // but never end up in the final tree\n+    #[doc(hidden)]\n+    TOMBSTONE,\n+    #[doc(hidden)]\n+    EOF,\n     SEMI,\n     COMMA,\n     L_PAREN,\n@@ -192,12 +198,6 @@ pub enum SyntaxKind {\n     PARAM,\n     SELF_PARAM,\n     ARG_LIST,\n-    // Technical SyntaxKinds: they appear temporally during parsing,\n-    // but never end up in the final tree\n-    #[doc(hidden)]\n-    TOMBSTONE,\n-    #[doc(hidden)]\n-    EOF,\n }\n use self::SyntaxKind::*;\n "}, {"sha": "197f720e195553a2c901373bb1099e74d68000c7", "filename": "src/syntax_kinds/generated.rs.tera", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1f6c442a3f2f660803f598d70f3f69b469637829/src%2Fsyntax_kinds%2Fgenerated.rs.tera", "raw_url": "https://github.com/rust-lang/rust/raw/1f6c442a3f2f660803f598d70f3f69b469637829/src%2Fsyntax_kinds%2Fgenerated.rs.tera", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsyntax_kinds%2Fgenerated.rs.tera?ref=1f6c442a3f2f660803f598d70f3f69b469637829", "patch": "@@ -5,6 +5,13 @@ use super::SyntaxInfo;\n /// The kind of syntax node, e.g. `IDENT`, `USE_KW`, or `STRUCT_DEF`.\n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n pub enum SyntaxKind {\n+    // Technical SyntaxKinds: they appear temporally during parsing,\n+    // but never end up in the final tree\n+    #[doc(hidden)]\n+    TOMBSTONE,\n+    #[doc(hidden)]\n+    EOF,\n+\n {%- for t in concat(a=single_byte_tokens, b=multi_byte_tokens) %}\n     {{t.1}},\n {%- endfor -%}\n@@ -14,12 +21,6 @@ pub enum SyntaxKind {\n {% for t in concat(a=tokens, b=nodes) %}\n     {{t}},\n {%- endfor %}\n-    // Technical SyntaxKinds: they appear temporally during parsing,\n-    // but never end up in the final tree\n-    #[doc(hidden)]\n-    TOMBSTONE,\n-    #[doc(hidden)]\n-    EOF,\n }\n use self::SyntaxKind::*;\n "}, {"sha": "ad0d8eb4c4004f102c0bd57f1c24ee2b278f1f5b", "filename": "tests/data/parser/err/0012_broken_lambda.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1f6c442a3f2f660803f598d70f3f69b469637829/tests%2Fdata%2Fparser%2Ferr%2F0012_broken_lambda.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f6c442a3f2f660803f598d70f3f69b469637829/tests%2Fdata%2Fparser%2Ferr%2F0012_broken_lambda.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Ferr%2F0012_broken_lambda.rs?ref=1f6c442a3f2f660803f598d70f3f69b469637829", "patch": "@@ -0,0 +1,12 @@\n+pub(super) fn process<'a, S: Sink<'a>>(builder: &mut S, tokens: &[Token], events: Vec<Event>) {\n+    let mut next_tok_idx = 0;\n+    let eat_ws = |idx: &mut usize, &mut | {\n+        while let Some(token) = tokens.get(*idx) {\n+            if !token.kind.is_trivia() {\n+                break;\n+            }\n+            builder.leaf(token.kind, token.len);\n+            *idx += 1\n+        }\n+    };\n+}"}, {"sha": "f484419a20281877819382237395c1b86327e3a0", "filename": "tests/data/parser/err/0012_broken_lambda.txt", "status": "added", "additions": 387, "deletions": 0, "changes": 387, "blob_url": "https://github.com/rust-lang/rust/blob/1f6c442a3f2f660803f598d70f3f69b469637829/tests%2Fdata%2Fparser%2Ferr%2F0012_broken_lambda.txt", "raw_url": "https://github.com/rust-lang/rust/raw/1f6c442a3f2f660803f598d70f3f69b469637829/tests%2Fdata%2Fparser%2Ferr%2F0012_broken_lambda.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Ferr%2F0012_broken_lambda.txt?ref=1f6c442a3f2f660803f598d70f3f69b469637829", "patch": "@@ -0,0 +1,387 @@\n+FILE@[0; 389)\n+  FN_ITEM@[0; 389)\n+    VISIBILITY@[0; 10)\n+      PUB_KW@[0; 3)\n+      L_PAREN@[3; 4)\n+      SUPER_KW@[4; 9)\n+      R_PAREN@[9; 10)\n+    WHITESPACE@[10; 11)\n+    FN_KW@[11; 13)\n+    WHITESPACE@[13; 14)\n+    NAME@[14; 21)\n+      IDENT@[14; 21) \"process\"\n+    TYPE_PARAM_LIST@[21; 38)\n+      L_ANGLE@[21; 22)\n+      LIFETIME_PARAM@[22; 24)\n+        LIFETIME@[22; 24) \"'a\"\n+      COMMA@[24; 25)\n+      WHITESPACE@[25; 26)\n+      TYPE_PARAM@[26; 37)\n+        NAME@[26; 27)\n+          IDENT@[26; 27) \"S\"\n+        COLON@[27; 28)\n+        WHITESPACE@[28; 29)\n+        PATH@[29; 37)\n+          PATH_SEGMENT@[29; 37)\n+            NAME_REF@[29; 33)\n+              IDENT@[29; 33) \"Sink\"\n+            TYPE_ARG_LIST@[33; 37)\n+              L_ANGLE@[33; 34)\n+              LIFETIME_ARG@[34; 36)\n+                LIFETIME@[34; 36) \"'a\"\n+              R_ANGLE@[36; 37)\n+      R_ANGLE@[37; 38)\n+    PARAM_LIST@[38; 93)\n+      L_PAREN@[38; 39)\n+      PARAM@[39; 54)\n+        BIND_PAT@[39; 46)\n+          NAME@[39; 46)\n+            IDENT@[39; 46) \"builder\"\n+        COLON@[46; 47)\n+        WHITESPACE@[47; 48)\n+        REFERENCE_TYPE@[48; 54)\n+          AMP@[48; 49)\n+          MUT_KW@[49; 52)\n+          WHITESPACE@[52; 53)\n+          PATH_TYPE@[53; 54)\n+            PATH@[53; 54)\n+              PATH_SEGMENT@[53; 54)\n+                NAME_REF@[53; 54)\n+                  IDENT@[53; 54) \"S\"\n+      COMMA@[54; 55)\n+      WHITESPACE@[55; 56)\n+      PARAM@[56; 72)\n+        BIND_PAT@[56; 62)\n+          NAME@[56; 62)\n+            IDENT@[56; 62) \"tokens\"\n+        COLON@[62; 63)\n+        WHITESPACE@[63; 64)\n+        REFERENCE_TYPE@[64; 72)\n+          AMP@[64; 65)\n+          SLICE_TYPE@[65; 72)\n+            L_BRACK@[65; 66)\n+            PATH_TYPE@[66; 71)\n+              PATH@[66; 71)\n+                PATH_SEGMENT@[66; 71)\n+                  NAME_REF@[66; 71)\n+                    IDENT@[66; 71) \"Token\"\n+            R_BRACK@[71; 72)\n+      COMMA@[72; 73)\n+      WHITESPACE@[73; 74)\n+      PARAM@[74; 92)\n+        BIND_PAT@[74; 80)\n+          NAME@[74; 80)\n+            IDENT@[74; 80) \"events\"\n+        COLON@[80; 81)\n+        WHITESPACE@[81; 82)\n+        PATH_TYPE@[82; 92)\n+          PATH@[82; 92)\n+            PATH_SEGMENT@[82; 92)\n+              NAME_REF@[82; 85)\n+                IDENT@[82; 85) \"Vec\"\n+              TYPE_ARG_LIST@[85; 92)\n+                L_ANGLE@[85; 86)\n+                TYPE_ARG@[86; 91)\n+                  PATH_TYPE@[86; 91)\n+                    PATH@[86; 91)\n+                      PATH_SEGMENT@[86; 91)\n+                        NAME_REF@[86; 91)\n+                          IDENT@[86; 91) \"Event\"\n+                R_ANGLE@[91; 92)\n+      R_PAREN@[92; 93)\n+    WHITESPACE@[93; 94)\n+    BLOCK_EXPR@[94; 389)\n+      L_CURLY@[94; 95)\n+      WHITESPACE@[95; 100)\n+      LET_STMT@[100; 125)\n+        LET_KW@[100; 103)\n+        WHITESPACE@[103; 104)\n+        BIND_PAT@[104; 120)\n+          MUT_KW@[104; 107)\n+          WHITESPACE@[107; 108)\n+          NAME@[108; 120)\n+            IDENT@[108; 120) \"next_tok_idx\"\n+        WHITESPACE@[120; 121)\n+        EQ@[121; 122)\n+        WHITESPACE@[122; 123)\n+        LITERAL@[123; 124)\n+          INT_NUMBER@[123; 124) \"0\"\n+        SEMI@[124; 125)\n+      WHITESPACE@[125; 130)\n+      LET_STMT@[130; 389)\n+        LET_KW@[130; 133)\n+        WHITESPACE@[133; 134)\n+        BIND_PAT@[134; 140)\n+          NAME@[134; 140)\n+            IDENT@[134; 140) \"eat_ws\"\n+        WHITESPACE@[140; 141)\n+        EQ@[141; 142)\n+        WHITESPACE@[142; 143)\n+        LAMBDA_EXPR@[143; 389)\n+          PARAM_LIST@[143; 388)\n+            PIPE@[143; 144)\n+            PARAM@[144; 159)\n+              BIND_PAT@[144; 147)\n+                NAME@[144; 147)\n+                  IDENT@[144; 147) \"idx\"\n+              COLON@[147; 148)\n+              WHITESPACE@[148; 149)\n+              REFERENCE_TYPE@[149; 159)\n+                AMP@[149; 150)\n+                MUT_KW@[150; 153)\n+                WHITESPACE@[153; 154)\n+                PATH_TYPE@[154; 159)\n+                  PATH@[154; 159)\n+                    PATH_SEGMENT@[154; 159)\n+                      NAME_REF@[154; 159)\n+                        IDENT@[154; 159) \"usize\"\n+            COMMA@[159; 160)\n+            WHITESPACE@[160; 161)\n+            PARAM@[161; 167)\n+              REF_PAT@[161; 167)\n+                AMP@[161; 162)\n+                MUT_KW@[162; 165)\n+                WHITESPACE@[165; 166)\n+                err: `expected pattern`\n+                ERROR@[166; 167)\n+                  PIPE@[166; 167)\n+                  err: `expected COMMA`\n+            WHITESPACE@[167; 168)\n+            err: `expected pattern`\n+            PARAM@[168; 169)\n+              ERROR@[168; 169)\n+                L_CURLY@[168; 169)\n+                err: `expected COMMA`\n+            WHITESPACE@[169; 178)\n+            err: `expected pattern`\n+            PARAM@[178; 183)\n+              ERROR@[178; 183)\n+                WHILE_KW@[178; 183)\n+                err: `expected COMMA`\n+            WHITESPACE@[183; 184)\n+            err: `expected pattern`\n+            PARAM@[184; 187)\n+              ERROR@[184; 187)\n+                LET_KW@[184; 187)\n+                err: `expected COMMA`\n+            WHITESPACE@[187; 188)\n+            PARAM@[188; 199)\n+              TUPLE_STRUCT_PAT@[188; 199)\n+                PATH@[188; 192)\n+                  PATH_SEGMENT@[188; 192)\n+                    NAME_REF@[188; 192)\n+                      IDENT@[188; 192) \"Some\"\n+                L_PAREN@[192; 193)\n+                BIND_PAT@[193; 198)\n+                  NAME@[193; 198)\n+                    IDENT@[193; 198) \"token\"\n+                R_PAREN@[198; 199)\n+                err: `expected COMMA`\n+            WHITESPACE@[199; 200)\n+            err: `expected pattern`\n+            PARAM@[200; 201)\n+              ERROR@[200; 201)\n+                EQ@[200; 201)\n+                err: `expected COMMA`\n+            WHITESPACE@[201; 202)\n+            PARAM@[202; 208)\n+              BIND_PAT@[202; 208)\n+                NAME@[202; 208)\n+                  IDENT@[202; 208) \"tokens\"\n+                  err: `expected COMMA`\n+                  err: `expected pattern`\n+            PARAM@[208; 209)\n+              ERROR@[208; 209)\n+                DOT@[208; 209)\n+                err: `expected COMMA`\n+            PARAM@[209; 218)\n+              TUPLE_STRUCT_PAT@[209; 218)\n+                PATH@[209; 212)\n+                  PATH_SEGMENT@[209; 212)\n+                    NAME_REF@[209; 212)\n+                      IDENT@[209; 212) \"get\"\n+                L_PAREN@[212; 213)\n+                err: `expected pattern`\n+                ERROR@[213; 214)\n+                  STAR@[213; 214)\n+                  err: `expected COMMA`\n+                BIND_PAT@[214; 217)\n+                  NAME@[214; 217)\n+                    IDENT@[214; 217) \"idx\"\n+                R_PAREN@[217; 218)\n+                err: `expected COMMA`\n+            WHITESPACE@[218; 219)\n+            err: `expected pattern`\n+            PARAM@[219; 220)\n+              ERROR@[219; 220)\n+                L_CURLY@[219; 220)\n+                err: `expected COMMA`\n+            WHITESPACE@[220; 233)\n+            err: `expected pattern`\n+            PARAM@[233; 235)\n+              ERROR@[233; 235)\n+                IF_KW@[233; 235)\n+                err: `expected COMMA`\n+            WHITESPACE@[235; 236)\n+            err: `expected pattern`\n+            PARAM@[236; 237)\n+              ERROR@[236; 237)\n+                EXCL@[236; 237)\n+                err: `expected COMMA`\n+            PARAM@[237; 242)\n+              BIND_PAT@[237; 242)\n+                NAME@[237; 242)\n+                  IDENT@[237; 242) \"token\"\n+                  err: `expected COMMA`\n+                  err: `expected pattern`\n+            PARAM@[242; 243)\n+              ERROR@[242; 243)\n+                DOT@[242; 243)\n+                err: `expected COMMA`\n+            PARAM@[243; 247)\n+              BIND_PAT@[243; 247)\n+                NAME@[243; 247)\n+                  IDENT@[243; 247) \"kind\"\n+                  err: `expected COMMA`\n+                  err: `expected pattern`\n+            PARAM@[247; 248)\n+              ERROR@[247; 248)\n+                DOT@[247; 248)\n+                err: `expected COMMA`\n+            PARAM@[248; 259)\n+              TUPLE_STRUCT_PAT@[248; 259)\n+                PATH@[248; 257)\n+                  PATH_SEGMENT@[248; 257)\n+                    NAME_REF@[248; 257)\n+                      IDENT@[248; 257) \"is_trivia\"\n+                L_PAREN@[257; 258)\n+                R_PAREN@[258; 259)\n+                err: `expected COMMA`\n+            WHITESPACE@[259; 260)\n+            err: `expected pattern`\n+            PARAM@[260; 261)\n+              ERROR@[260; 261)\n+                L_CURLY@[260; 261)\n+                err: `expected COMMA`\n+            WHITESPACE@[261; 278)\n+            PARAM@[278; 283)\n+              BIND_PAT@[278; 283)\n+                NAME@[278; 283)\n+                  IDENT@[278; 283) \"break\"\n+                  err: `expected COMMA`\n+                  err: `expected pattern`\n+            PARAM@[283; 284)\n+              ERROR@[283; 284)\n+                SEMI@[283; 284)\n+                err: `expected COMMA`\n+            WHITESPACE@[284; 297)\n+            err: `expected pattern`\n+            PARAM@[297; 298)\n+              ERROR@[297; 298)\n+                R_CURLY@[297; 298)\n+                err: `expected COMMA`\n+            WHITESPACE@[298; 311)\n+            PARAM@[311; 318)\n+              BIND_PAT@[311; 318)\n+                NAME@[311; 318)\n+                  IDENT@[311; 318) \"builder\"\n+                  err: `expected COMMA`\n+                  err: `expected pattern`\n+            PARAM@[318; 319)\n+              ERROR@[318; 319)\n+                DOT@[318; 319)\n+                err: `expected COMMA`\n+            PARAM@[319; 346)\n+              TUPLE_STRUCT_PAT@[319; 346)\n+                PATH@[319; 323)\n+                  PATH_SEGMENT@[319; 323)\n+                    NAME_REF@[319; 323)\n+                      IDENT@[319; 323) \"leaf\"\n+                L_PAREN@[323; 324)\n+                BIND_PAT@[324; 329)\n+                  NAME@[324; 329)\n+                    IDENT@[324; 329) \"token\"\n+                    err: `expected COMMA`\n+                    err: `expected pattern`\n+                ERROR@[329; 330)\n+                  DOT@[329; 330)\n+                  err: `expected COMMA`\n+                BIND_PAT@[330; 334)\n+                  NAME@[330; 334)\n+                    IDENT@[330; 334) \"kind\"\n+                COMMA@[334; 335)\n+                WHITESPACE@[335; 336)\n+                BIND_PAT@[336; 341)\n+                  NAME@[336; 341)\n+                    IDENT@[336; 341) \"token\"\n+                    err: `expected COMMA`\n+                    err: `expected pattern`\n+                ERROR@[341; 342)\n+                  DOT@[341; 342)\n+                  err: `expected COMMA`\n+                BIND_PAT@[342; 345)\n+                  NAME@[342; 345)\n+                    IDENT@[342; 345) \"len\"\n+                R_PAREN@[345; 346)\n+                err: `expected COMMA`\n+                err: `expected pattern`\n+            PARAM@[346; 347)\n+              ERROR@[346; 347)\n+                SEMI@[346; 347)\n+                err: `expected COMMA`\n+            WHITESPACE@[347; 360)\n+            err: `expected pattern`\n+            PARAM@[360; 361)\n+              ERROR@[360; 361)\n+                STAR@[360; 361)\n+                err: `expected COMMA`\n+            PARAM@[361; 364)\n+              BIND_PAT@[361; 364)\n+                NAME@[361; 364)\n+                  IDENT@[361; 364) \"idx\"\n+                  err: `expected COMMA`\n+            WHITESPACE@[364; 365)\n+            err: `expected pattern`\n+            PARAM@[365; 366)\n+              ERROR@[365; 366)\n+                PLUS@[365; 366)\n+                err: `expected COMMA`\n+                err: `expected pattern`\n+            PARAM@[366; 367)\n+              ERROR@[366; 367)\n+                EQ@[366; 367)\n+                err: `expected COMMA`\n+            WHITESPACE@[367; 368)\n+            PARAM@[368; 369)\n+              LITERAL@[368; 369)\n+                INT_NUMBER@[368; 369) \"1\"\n+                err: `expected COMMA`\n+            WHITESPACE@[369; 378)\n+            err: `expected pattern`\n+            PARAM@[378; 379)\n+              ERROR@[378; 379)\n+                R_CURLY@[378; 379)\n+                err: `expected COMMA`\n+            WHITESPACE@[379; 384)\n+            err: `expected pattern`\n+            PARAM@[384; 385)\n+              ERROR@[384; 385)\n+                R_CURLY@[384; 385)\n+                err: `expected COMMA`\n+                err: `expected pattern`\n+            PARAM@[385; 386)\n+              ERROR@[385; 386)\n+                SEMI@[385; 386)\n+                err: `expected COMMA`\n+            WHITESPACE@[386; 387)\n+            err: `expected pattern`\n+            PARAM@[387; 388)\n+              ERROR@[387; 388)\n+                R_CURLY@[387; 388)\n+                err: `expected COMMA`\n+                err: `expected PIPE`\n+          WHITESPACE@[388; 389)\n+          err: `expected expression`\n+          err: `expected SEMI`\n+          err: `expected R_CURLY`\n+          ERROR@[389; 389)"}]}