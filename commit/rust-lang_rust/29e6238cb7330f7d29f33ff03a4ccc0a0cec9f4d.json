{"sha": "29e6238cb7330f7d29f33ff03a4ccc0a0cec9f4d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5ZTYyMzhjYjczMzBmN2QyOWYzM2ZmMDNhNGNjYzBhMGNlYzlmNGQ=", "commit": {"author": {"name": "David Lattimore", "email": "dml@google.com", "date": "2020-08-18T10:39:55Z"}, "committer": {"name": "David Lattimore", "email": "dml@google.com", "date": "2020-08-18T10:39:55Z"}, "message": "SSR: A few small refactorings", "tree": {"sha": "a3d0a6811d85697b3d12b9975df318f742531f45", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3d0a6811d85697b3d12b9975df318f742531f45"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29e6238cb7330f7d29f33ff03a4ccc0a0cec9f4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29e6238cb7330f7d29f33ff03a4ccc0a0cec9f4d", "html_url": "https://github.com/rust-lang/rust/commit/29e6238cb7330f7d29f33ff03a4ccc0a0cec9f4d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29e6238cb7330f7d29f33ff03a4ccc0a0cec9f4d/comments", "author": {"login": "davidlattimore", "id": 8983542, "node_id": "MDQ6VXNlcjg5ODM1NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/8983542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidlattimore", "html_url": "https://github.com/davidlattimore", "followers_url": "https://api.github.com/users/davidlattimore/followers", "following_url": "https://api.github.com/users/davidlattimore/following{/other_user}", "gists_url": "https://api.github.com/users/davidlattimore/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidlattimore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidlattimore/subscriptions", "organizations_url": "https://api.github.com/users/davidlattimore/orgs", "repos_url": "https://api.github.com/users/davidlattimore/repos", "events_url": "https://api.github.com/users/davidlattimore/events{/privacy}", "received_events_url": "https://api.github.com/users/davidlattimore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidlattimore", "id": 8983542, "node_id": "MDQ6VXNlcjg5ODM1NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/8983542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidlattimore", "html_url": "https://github.com/davidlattimore", "followers_url": "https://api.github.com/users/davidlattimore/followers", "following_url": "https://api.github.com/users/davidlattimore/following{/other_user}", "gists_url": "https://api.github.com/users/davidlattimore/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidlattimore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidlattimore/subscriptions", "organizations_url": "https://api.github.com/users/davidlattimore/orgs", "repos_url": "https://api.github.com/users/davidlattimore/repos", "events_url": "https://api.github.com/users/davidlattimore/events{/privacy}", "received_events_url": "https://api.github.com/users/davidlattimore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4a504e1328111c184603ddc0b2c113ad5a5c555", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4a504e1328111c184603ddc0b2c113ad5a5c555", "html_url": "https://github.com/rust-lang/rust/commit/a4a504e1328111c184603ddc0b2c113ad5a5c555"}], "stats": {"total": 16, "additions": 10, "deletions": 6}, "files": [{"sha": "c1f1c07a2e085226b9cec082c8f58c393f3c8a06", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/29e6238cb7330f7d29f33ff03a4ccc0a0cec9f4d/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/29e6238cb7330f7d29f33ff03a4ccc0a0cec9f4d/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=29e6238cb7330f7d29f33ff03a4ccc0a0cec9f4d", "patch": "@@ -1450,6 +1450,7 @@ dependencies = [\n  \"expect\",\n  \"hir\",\n  \"ide_db\",\n+ \"itertools\",\n  \"rustc-hash\",\n  \"syntax\",\n  \"test_utils\","}, {"sha": "7c2090de3cc59d9640e7376c46966489aa4ff5ea", "filename": "crates/ssr/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/29e6238cb7330f7d29f33ff03a4ccc0a0cec9f4d/crates%2Fssr%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/29e6238cb7330f7d29f33ff03a4ccc0a0cec9f4d/crates%2Fssr%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fssr%2FCargo.toml?ref=29e6238cb7330f7d29f33ff03a4ccc0a0cec9f4d", "patch": "@@ -12,6 +12,7 @@ doctest = false\n \n [dependencies]\n rustc-hash = \"1.1.0\"\n+itertools = \"0.9.0\"\n \n text_edit = { path = \"../text_edit\" }\n syntax = { path = \"../syntax\" }"}, {"sha": "29284e3f1c2dad5e5294de577735ffbb66ff973d", "filename": "crates/ssr/src/replacing.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/29e6238cb7330f7d29f33ff03a4ccc0a0cec9f4d/crates%2Fssr%2Fsrc%2Freplacing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29e6238cb7330f7d29f33ff03a4ccc0a0cec9f4d/crates%2Fssr%2Fsrc%2Freplacing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fssr%2Fsrc%2Freplacing.rs?ref=29e6238cb7330f7d29f33ff03a4ccc0a0cec9f4d", "patch": "@@ -1,9 +1,11 @@\n //! Code for applying replacement templates for matches that have previously been found.\n \n use crate::{resolving::ResolvedRule, Match, SsrMatches};\n+use itertools::Itertools;\n use rustc_hash::{FxHashMap, FxHashSet};\n use syntax::ast::{self, AstToken};\n use syntax::{SyntaxElement, SyntaxKind, SyntaxNode, SyntaxToken, TextRange, TextSize};\n+use test_utils::mark;\n use text_edit::TextEdit;\n \n /// Returns a text edit that will replace each match in `matches` with its corresponding replacement\n@@ -127,6 +129,7 @@ impl ReplacementRenderer<'_> {\n                     && (placeholder_value.autoderef_count > 0\n                         || placeholder_value.autoref_kind != ast::SelfParamKind::Owned)\n                 {\n+                    mark::hit!(replace_autoref_autoderef_capture);\n                     let ref_kind = match placeholder_value.autoref_kind {\n                         ast::SelfParamKind::Owned => \"\",\n                         ast::SelfParamKind::Ref => \"&\",\n@@ -206,18 +209,16 @@ fn token_is_method_call_receiver(token: &SyntaxToken) -> bool {\n     use syntax::ast::AstNode;\n     // Find the first method call among the ancestors of `token`, then check if the only token\n     // within the receiver is `token`.\n-    if let Some(receiver) = token\n-        .ancestors()\n-        .find(|node| node.kind() == SyntaxKind::METHOD_CALL_EXPR)\n-        .and_then(|node| ast::MethodCallExpr::cast(node).unwrap().expr())\n+    if let Some(receiver) =\n+        token.ancestors().find_map(ast::MethodCallExpr::cast).and_then(|call| call.expr())\n     {\n-        let mut tokens = receiver.syntax().descendants_with_tokens().filter_map(|node_or_token| {\n+        let tokens = receiver.syntax().descendants_with_tokens().filter_map(|node_or_token| {\n             match node_or_token {\n                 SyntaxElement::Token(t) => Some(t),\n                 _ => None,\n             }\n         });\n-        if let (Some(only_token), None) = (tokens.next(), tokens.next()) {\n+        if let Some((only_token,)) = tokens.collect_tuple() {\n             return only_token == *token;\n         }\n     }"}, {"sha": "e45c88864d7aabc0d106d1f240575b2cd15e0fc6", "filename": "crates/ssr/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/29e6238cb7330f7d29f33ff03a4ccc0a0cec9f4d/crates%2Fssr%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29e6238cb7330f7d29f33ff03a4ccc0a0cec9f4d/crates%2Fssr%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fssr%2Fsrc%2Ftests.rs?ref=29e6238cb7330f7d29f33ff03a4ccc0a0cec9f4d", "patch": "@@ -1179,6 +1179,7 @@ fn replace_autoref_autoderef_capture() {\n     // second, we already have a reference, so it isn't. When $a is used in a context where autoref\n     // doesn't apply, we need to prefix it with `&`. Finally, we have some cases where autoderef\n     // needs to be applied.\n+    mark::check!(replace_autoref_autoderef_capture);\n     let code = r#\"\n         struct Foo {}\n         impl Foo {"}]}