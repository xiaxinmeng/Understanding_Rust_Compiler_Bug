{"sha": "efaa1ea979c60dcb6884be12dcb12ceb09dbc5bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmYWExZWE5NzljNjBkY2I2ODg0YmUxMmRjYjEyY2ViMDlkYmM1YmQ=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-02-19T22:12:09Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-02-19T22:12:09Z"}, "message": "Resolve the vtables for method calls to generic Drop impls with trait bounds.", "tree": {"sha": "68f7720d6deeab63d5ca7e6dd5b676d44c74052d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68f7720d6deeab63d5ca7e6dd5b676d44c74052d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/efaa1ea979c60dcb6884be12dcb12ceb09dbc5bd", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/efaa1ea979c60dcb6884be12dcb12ceb09dbc5bd", "html_url": "https://github.com/rust-lang/rust/commit/efaa1ea979c60dcb6884be12dcb12ceb09dbc5bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/efaa1ea979c60dcb6884be12dcb12ceb09dbc5bd/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efef078cfa378378201ab097579992b40751cfb4", "url": "https://api.github.com/repos/rust-lang/rust/commits/efef078cfa378378201ab097579992b40751cfb4", "html_url": "https://github.com/rust-lang/rust/commit/efef078cfa378378201ab097579992b40751cfb4"}], "stats": {"total": 67, "additions": 43, "deletions": 24}, "files": [{"sha": "e76b2a81490e031f09e5aa9f8431bb6bc60015e3", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/efaa1ea979c60dcb6884be12dcb12ceb09dbc5bd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efaa1ea979c60dcb6884be12dcb12ceb09dbc5bd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=efaa1ea979c60dcb6884be12dcb12ceb09dbc5bd", "patch": "@@ -65,6 +65,7 @@ use middle::trans::type_of;\n use middle::trans::type_of::*;\n use middle::trans::value::Value;\n use middle::ty;\n+use middle::typeck;\n use util::common::indenter;\n use util::ppaux::{Repr, ty_to_str};\n use util::sha2::Sha256;\n@@ -535,22 +536,14 @@ pub fn get_res_dtor(ccx: @CrateContext,\n     };\n     if !substs.is_empty() {\n         assert_eq!(did.krate, ast::LOCAL_CRATE);\n-        let tsubsts = ty::substs {regions: ty::ErasedRegions,\n-                                  self_ty: None,\n-                                  tps: /*bad*/ substs.to_owned() };\n-\n-        // FIXME: #4252: Generic destructors with type bounds are broken.\n-        //\n-        // Since the vtables aren't passed to `monomorphic_fn` here, generic destructors with type\n-        // bounds are broken. Sadly, the `typeck` pass isn't outputting the necessary metadata\n-        // because it does so based on method calls present in the AST. Destructor calls are not yet\n-        // known about at that stage of compilation, since `trans` handles cleanups.\n-        let (val, _) = monomorphize::monomorphic_fn(ccx,\n-                                                    did,\n-                                                    &tsubsts,\n-                                                    None,\n-                                                    None,\n-                                                    None);\n+        let tsubsts = ty::substs {\n+            regions: ty::ErasedRegions,\n+            self_ty: None,\n+            tps: substs.to_owned()\n+        };\n+\n+        let vtables = typeck::check::vtable::trans_resolve_method(ccx.tcx, did.node, &tsubsts);\n+        let (val, _) = monomorphize::monomorphic_fn(ccx, did, &tsubsts, vtables, None, None);\n \n         val\n     } else if did.krate == ast::LOCAL_CRATE {"}, {"sha": "ba4300b58a11a27af1abc6d79da640abef52d7b1", "filename": "src/librustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/efaa1ea979c60dcb6884be12dcb12ceb09dbc5bd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efaa1ea979c60dcb6884be12dcb12ceb09dbc5bd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=efaa1ea979c60dcb6884be12dcb12ceb09dbc5bd", "patch": "@@ -812,6 +812,28 @@ pub fn resolve_impl(tcx: ty::ctxt,\n     impl_vtables.get().insert(impl_def_id, res);\n }\n \n+/// Resolve vtables for a method call after typeck has finished.\n+/// Used by trans to monomorphize artificial method callees (e.g. drop).\n+pub fn trans_resolve_method(tcx: ty::ctxt, id: ast::NodeId,\n+                            substs: &ty::substs) -> Option<vtable_res> {\n+    let generics = ty::lookup_item_type(tcx, ast_util::local_def(id)).generics;\n+    let type_param_defs = generics.type_param_defs.borrow();\n+    if has_trait_bounds(*type_param_defs) {\n+        let vcx = VtableContext {\n+            infcx: &infer::new_infer_ctxt(tcx),\n+            param_env: &ty::construct_parameter_environment(tcx, None, [], [], [], id)\n+        };\n+        let loc_info = LocationInfo {\n+            id: id,\n+            span: tcx.map.span(id)\n+        };\n+\n+        Some(lookup_vtables(&vcx, &loc_info, *type_param_defs, substs, false))\n+    } else {\n+        None\n+    }\n+}\n+\n impl<'a> visit::Visitor<()> for &'a FnCtxt {\n     fn visit_expr(&mut self, ex: &ast::Expr, _: ()) {\n         early_resolve_expr(ex, *self, false);"}, {"sha": "ba080e9818302f7d9c8af3249de5a87ce82d7492", "filename": "src/test/run-pass/issue-4252.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/efaa1ea979c60dcb6884be12dcb12ceb09dbc5bd/src%2Ftest%2Frun-pass%2Fissue-4252.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efaa1ea979c60dcb6884be12dcb12ceb09dbc5bd/src%2Ftest%2Frun-pass%2Fissue-4252.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4252.rs?ref=efaa1ea979c60dcb6884be12dcb12ceb09dbc5bd", "patch": "@@ -8,30 +8,34 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-test\n-\n trait X {\n-    fn call(&self);\n+    fn call<T>(&self, x: &T);\n+    fn default_method<T>(&self, x: &T) {\n+        println!(\"X::default_method {:?} {:?}\", self, x);\n+    }\n }\n \n-struct Y;\n+struct Y(int);\n \n struct Z<T> {\n     x: T\n }\n \n impl X for Y {\n-    fn call(&self) {\n+    fn call<T>(&self, x: &T) {\n+        println!(\"X::call {:?} {:?}\", self, x);\n     }\n }\n \n+#[unsafe_destructor]\n impl<T: X> Drop for Z<T> {\n     fn drop(&mut self) {\n-        self.x.call(); // Adding this statement causes an ICE.\n+        // These statements used to cause an ICE.\n+        self.x.call(self);\n+        self.x.default_method(self);\n     }\n }\n \n pub fn main() {\n-    let y = Y;\n-    let _z = Z{x: y};\n+    let _z = Z {x: Y(42)};\n }"}]}