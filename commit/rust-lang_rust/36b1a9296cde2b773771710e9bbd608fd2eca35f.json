{"sha": "36b1a9296cde2b773771710e9bbd608fd2eca35f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2YjFhOTI5NmNkZTJiNzczNzcxNzEwZTliYmQ2MDhmZDJlY2EzNWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-19T10:01:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-19T10:01:16Z"}, "message": "Auto merge of #70015 - jonas-schievink:gen-needs-drop, r=matthewjasper\n\nMake `needs_drop` less pessimistic on generators\n\nGenerators only have non-trivial drop logic when they may store (in upvars or across yields) a type that does.\n\nThis prevents generation of some unnecessary MIR in simple generators. There might be some impact on compile times, but this is probably limited in real-world applications.\n\n~~This builds off of https://github.com/rust-lang/rust/pull/69814 since that contains some fixes that are made relevant by *this* PR (see https://github.com/rust-lang/rust/pull/69814#issuecomment-599147269).~~ (this has been merged)", "tree": {"sha": "947177af14398a42dc1727bd075488b53cd65f63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/947177af14398a42dc1727bd075488b53cd65f63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36b1a9296cde2b773771710e9bbd608fd2eca35f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36b1a9296cde2b773771710e9bbd608fd2eca35f", "html_url": "https://github.com/rust-lang/rust/commit/36b1a9296cde2b773771710e9bbd608fd2eca35f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36b1a9296cde2b773771710e9bbd608fd2eca35f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7497a8ccb8885823e413f4e3a54412812b60528", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7497a8ccb8885823e413f4e3a54412812b60528", "html_url": "https://github.com/rust-lang/rust/commit/e7497a8ccb8885823e413f4e3a54412812b60528"}, {"sha": "ae533151c3a29be2edb71398b7d9ed6e51e77f25", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae533151c3a29be2edb71398b7d9ed6e51e77f25", "html_url": "https://github.com/rust-lang/rust/commit/ae533151c3a29be2edb71398b7d9ed6e51e77f25"}], "stats": {"total": 129, "additions": 85, "deletions": 44}, "files": [{"sha": "239507e19e00136b0243d683d2c8e385076f827b", "filename": "src/librustc_middle/ty/util.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/36b1a9296cde2b773771710e9bbd608fd2eca35f/src%2Flibrustc_middle%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b1a9296cde2b773771710e9bbd608fd2eca35f/src%2Flibrustc_middle%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Futil.rs?ref=36b1a9296cde2b773771710e9bbd608fd2eca35f", "patch": "@@ -1047,10 +1047,7 @@ pub fn needs_drop_components(\n         // Foreign types can never have destructors.\n         ty::Foreign(..) => Ok(SmallVec::new()),\n \n-        // Pessimistically assume that all generators will require destructors\n-        // as we don't know if a destructor is a noop or not until after the MIR\n-        // state transformation pass.\n-        ty::Generator(..) | ty::Dynamic(..) | ty::Error => Err(AlwaysRequiresDrop),\n+        ty::Dynamic(..) | ty::Error => Err(AlwaysRequiresDrop),\n \n         ty::Slice(ty) => needs_drop_components(ty, target_layout),\n         ty::Array(elem_ty, size) => {\n@@ -1083,7 +1080,8 @@ pub fn needs_drop_components(\n         | ty::Placeholder(..)\n         | ty::Opaque(..)\n         | ty::Infer(_)\n-        | ty::Closure(..) => Ok(smallvec![ty]),\n+        | ty::Closure(..)\n+        | ty::Generator(..) => Ok(smallvec![ty]),\n     }\n }\n "}, {"sha": "97994b465b54ca618aed20c0cec6af8143959ffc", "filename": "src/librustc_ty/needs_drop.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/36b1a9296cde2b773771710e9bbd608fd2eca35f/src%2Flibrustc_ty%2Fneeds_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b1a9296cde2b773771710e9bbd608fd2eca35f/src%2Flibrustc_ty%2Fneeds_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2Fneeds_drop.rs?ref=36b1a9296cde2b773771710e9bbd608fd2eca35f", "patch": "@@ -99,6 +99,23 @@ where\n                         }\n                     }\n \n+                    ty::Generator(_, substs, _) => {\n+                        let substs = substs.as_generator();\n+                        for upvar_ty in substs.upvar_tys() {\n+                            queue_type(self, upvar_ty);\n+                        }\n+\n+                        let witness = substs.witness();\n+                        let interior_tys = match &witness.kind {\n+                            ty::GeneratorWitness(tys) => tcx.erase_late_bound_regions(tys),\n+                            _ => bug!(),\n+                        };\n+\n+                        for interior_ty in interior_tys {\n+                            queue_type(self, interior_ty);\n+                        }\n+                    }\n+\n                     // Check for a `Drop` impl and whether this is a union or\n                     // `ManuallyDrop`. If it's a struct or enum without a `Drop`\n                     // impl then check whether the field types need `Drop`."}, {"sha": "3e9707c6491f61b480c84cf2c9d0317e40c0cf91", "filename": "src/test/mir-opt/generator-drop-cleanup.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/36b1a9296cde2b773771710e9bbd608fd2eca35f/src%2Ftest%2Fmir-opt%2Fgenerator-drop-cleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b1a9296cde2b773771710e9bbd608fd2eca35f/src%2Ftest%2Fmir-opt%2Fgenerator-drop-cleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator-drop-cleanup.rs?ref=36b1a9296cde2b773771710e9bbd608fd2eca35f", "patch": "@@ -1,11 +1,14 @@\n #![feature(generators, generator_trait)]\n \n+// ignore-wasm32-bare compiled with panic=abort by default\n+\n // Regression test for #58892, generator drop shims should not have blocks\n // spuriously marked as cleanup\n \n // EMIT_MIR rustc.main-{{closure}}.generator_drop.0.mir\n fn main() {\n     let gen = || {\n+        let _s = String::new();\n         yield;\n     };\n }"}, {"sha": "887a4dd2cd38383869ad9828bba618c441280ef8", "filename": "src/test/mir-opt/generator-drop-cleanup/rustc.main-{{closure}}.generator_drop.0.mir", "status": "modified", "additions": 53, "deletions": 26, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/36b1a9296cde2b773771710e9bbd608fd2eca35f/src%2Ftest%2Fmir-opt%2Fgenerator-drop-cleanup%2Frustc.main-%7B%7Bclosure%7D%7D.generator_drop.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/36b1a9296cde2b773771710e9bbd608fd2eca35f/src%2Ftest%2Fmir-opt%2Fgenerator-drop-cleanup%2Frustc.main-%7B%7Bclosure%7D%7D.generator_drop.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator-drop-cleanup%2Frustc.main-%7B%7Bclosure%7D%7D.generator_drop.0.mir?ref=36b1a9296cde2b773771710e9bbd608fd2eca35f", "patch": "@@ -1,53 +1,80 @@\n // MIR for `main::{{closure}}#0` 0 generator_drop\n-// generator_layout = GeneratorLayout { field_tys: [], variant_fields: [[], [], [], []], storage_conflicts: BitMatrix { num_rows: 0, num_columns: 0, words: [], marker: PhantomData } }\n+// generator_layout = GeneratorLayout { field_tys: [std::string::String], variant_fields: [[], [], [], [_0]], storage_conflicts: BitMatrix { num_rows: 1, num_columns: 1, words: [1], marker: PhantomData } }\n \n-fn main::{{closure}}#0(_1: *mut [generator@$DIR/generator-drop-cleanup.rs:8:15: 10:6 {()}]) -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/generator-drop-cleanup.rs:8:15: 10:6\n-    let mut _2: ();                      // in scope 0 at $DIR/generator-drop-cleanup.rs:8:15: 10:6\n-    let _3: ();                          // in scope 0 at $DIR/generator-drop-cleanup.rs:9:9: 9:14\n-    let mut _4: ();                      // in scope 0 at $DIR/generator-drop-cleanup.rs:9:9: 9:14\n-    let mut _5: ();                      // in scope 0 at $DIR/generator-drop-cleanup.rs:8:18: 8:18\n-    let mut _6: ();                      // in scope 0 at $DIR/generator-drop-cleanup.rs:8:15: 10:6\n-    let mut _7: isize;                   // in scope 0 at $DIR/generator-drop-cleanup.rs:8:15: 10:6\n+fn main::{{closure}}#0(_1: *mut [generator@$DIR/generator-drop-cleanup.rs:10:15: 13:6 {std::string::String, ()}]) -> () {\n+    let mut _0: ();                      // return place in scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n+    let mut _2: ();                      // in scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n+    let _3: std::string::String;         // in scope 0 at $DIR/generator-drop-cleanup.rs:11:13: 11:15\n+    let _4: ();                          // in scope 0 at $DIR/generator-drop-cleanup.rs:12:9: 12:14\n+    let mut _5: ();                      // in scope 0 at $DIR/generator-drop-cleanup.rs:12:9: 12:14\n+    let mut _7: ();                      // in scope 0 at $DIR/generator-drop-cleanup.rs:10:18: 10:18\n+    let mut _8: ();                      // in scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n+    let mut _9: isize;                   // in scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n+    scope 1 {\n+        debug _s => (((*_1) as variant#3).0: std::string::String); // in scope 1 at $DIR/generator-drop-cleanup.rs:11:13: 11:15\n+    }\n+    scope 2 {\n+        let mut _6: std::vec::Vec<u8>;   // in scope 2 at $DIR/generator-drop-cleanup.rs:11:18: 11:31\n+        scope 3 {\n+        }\n+    }\n \n     bb0: {\n-        _7 = discriminant((*_1));        // bb0[0]: scope 0 at $DIR/generator-drop-cleanup.rs:8:15: 10:6\n-        switchInt(move _7) -> [0u32: bb4, 3u32: bb7, otherwise: bb8]; // bb0[1]: scope 0 at $DIR/generator-drop-cleanup.rs:8:15: 10:6\n+        _9 = discriminant((*_1));        // bb0[0]: scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n+        switchInt(move _9) -> [0u32: bb7, 3u32: bb11, otherwise: bb12]; // bb0[1]: scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n     }\n \n-    bb1: {\n-        StorageDead(_4);                 // bb1[0]: scope 0 at $DIR/generator-drop-cleanup.rs:9:13: 9:14\n-        StorageDead(_3);                 // bb1[1]: scope 0 at $DIR/generator-drop-cleanup.rs:9:14: 9:15\n-        goto -> bb5;                     // bb1[2]: scope 0 at $DIR/generator-drop-cleanup.rs:10:5: 10:6\n+    bb1 (cleanup): {\n+        resume;                          // bb1[0]: scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n     }\n \n-    bb2: {\n-        return;                          // bb2[0]: scope 0 at $DIR/generator-drop-cleanup.rs:8:15: 10:6\n+    bb2 (cleanup): {\n+        nop;                             // bb2[0]: scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n+        goto -> bb8;                     // bb2[1]: scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n     }\n \n     bb3: {\n-        return;                          // bb3[0]: scope 0 at $DIR/generator-drop-cleanup.rs:8:15: 10:6\n+        StorageDead(_5);                 // bb3[0]: scope 1 at $DIR/generator-drop-cleanup.rs:12:13: 12:14\n+        StorageDead(_4);                 // bb3[1]: scope 1 at $DIR/generator-drop-cleanup.rs:12:14: 12:15\n+        drop((((*_1) as variant#3).0: std::string::String)) -> [return: bb4, unwind: bb2]; // bb3[2]: scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n     }\n \n     bb4: {\n-        goto -> bb6;                     // bb4[0]: scope 0 at $DIR/generator-drop-cleanup.rs:8:15: 10:6\n+        nop;                             // bb4[0]: scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n+        goto -> bb9;                     // bb4[1]: scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n     }\n \n     bb5: {\n-        goto -> bb2;                     // bb5[0]: scope 0 at $DIR/generator-drop-cleanup.rs:10:5: 10:6\n+        return;                          // bb5[0]: scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n     }\n \n     bb6: {\n-        goto -> bb3;                     // bb6[0]: scope 0 at $DIR/generator-drop-cleanup.rs:8:15: 10:6\n+        return;                          // bb6[0]: scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n     }\n \n     bb7: {\n-        StorageLive(_3);                 // bb7[0]: scope 0 at $DIR/generator-drop-cleanup.rs:8:15: 10:6\n-        StorageLive(_4);                 // bb7[1]: scope 0 at $DIR/generator-drop-cleanup.rs:8:15: 10:6\n-        goto -> bb1;                     // bb7[2]: scope 0 at $DIR/generator-drop-cleanup.rs:8:15: 10:6\n+        goto -> bb10;                    // bb7[0]: scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n+    }\n+\n+    bb8 (cleanup): {\n+        goto -> bb1;                     // bb8[0]: scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n+    }\n+\n+    bb9: {\n+        goto -> bb5;                     // bb9[0]: scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n+    }\n+\n+    bb10: {\n+        goto -> bb6;                     // bb10[0]: scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n+    }\n+\n+    bb11: {\n+        StorageLive(_4);                 // bb11[0]: scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n+        StorageLive(_5);                 // bb11[1]: scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n+        goto -> bb3;                     // bb11[2]: scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n     }\n \n-    bb8: {\n-        return;                          // bb8[0]: scope 0 at $DIR/generator-drop-cleanup.rs:8:15: 10:6\n+    bb12: {\n+        return;                          // bb12[0]: scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n     }\n }"}, {"sha": "38e1ace8c4efbc358033fce0f69245851ee47dd6", "filename": "src/test/ui/generator/borrowing.stderr", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/36b1a9296cde2b773771710e9bbd608fd2eca35f/src%2Ftest%2Fui%2Fgenerator%2Fborrowing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/36b1a9296cde2b773771710e9bbd608fd2eca35f/src%2Ftest%2Fui%2Fgenerator%2Fborrowing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fborrowing.stderr?ref=36b1a9296cde2b773771710e9bbd608fd2eca35f", "patch": "@@ -1,19 +1,16 @@\n error[E0597]: `a` does not live long enough\n   --> $DIR/borrowing.rs:9:33\n    |\n+LL |     let _b = {\n+   |         -- borrow later stored here\n+LL |         let a = 3;\n LL |         Pin::new(&mut || yield &a).resume(())\n-   |                       ----------^\n-   |                       |         |\n-   |                       |         borrowed value does not live long enough\n+   |                       --        ^ borrowed value does not live long enough\n+   |                       |\n    |                       value captured here by generator\n-   |                       a temporary with access to the borrow is created here ...\n LL |\n LL |     };\n-   |     -- ... and the borrow might be used here, when that temporary is dropped and runs the destructor for generator\n-   |     |\n-   |     `a` dropped here while still borrowed\n-   |\n-   = note: The temporary is part of an expression at the end of a block. Consider forcing this temporary to be dropped sooner, before the block's local variables are dropped. For example, you could save the expression's value in a new local variable `x` and then make `x` be the expression at the end of the block.\n+   |     - `a` dropped here while still borrowed\n \n error[E0597]: `a` does not live long enough\n   --> $DIR/borrowing.rs:16:20"}, {"sha": "e33310d12d9ef762c7bf9ba2f02fe3fa5d371fe0", "filename": "src/test/ui/generator/retain-resume-ref.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/36b1a9296cde2b773771710e9bbd608fd2eca35f/src%2Ftest%2Fui%2Fgenerator%2Fretain-resume-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/36b1a9296cde2b773771710e9bbd608fd2eca35f/src%2Ftest%2Fui%2Fgenerator%2Fretain-resume-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fretain-resume-ref.stderr?ref=36b1a9296cde2b773771710e9bbd608fd2eca35f", "patch": "@@ -4,10 +4,9 @@ error[E0499]: cannot borrow `thing` as mutable more than once at a time\n LL |     gen.as_mut().resume(&mut thing);\n    |                         ---------- first mutable borrow occurs here\n LL |     gen.as_mut().resume(&mut thing);\n-   |                         ^^^^^^^^^^ second mutable borrow occurs here\n-LL |\n-LL | }\n-   | - first borrow might be used here, when `gen` is dropped and runs the destructor for generator\n+   |                  ------ ^^^^^^^^^^ second mutable borrow occurs here\n+   |                  |\n+   |                  first borrow later used by call\n \n error: aborting due to previous error\n "}]}