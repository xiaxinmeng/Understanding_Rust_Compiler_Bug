{"sha": "ddde70c1217740101ab09b32ab3d545555d8d820", "node_id": "C_kwDOAAsO6NoAKGRkZGU3MGMxMjE3NzQwMTAxYWIwOWIzMmFiM2Q1NDU1NTVkOGQ4MjA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-20T01:39:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-20T01:39:40Z"}, "message": "Auto merge of #2394 - saethlin:unique-range-ice, r=RalfJung\n\nFix bugs where unique_range became invalid\n\nAnd also expand the cache integrity checks to cover this case.\n\nI'm going to run this over all the ICEs I've gotten out of Miri recently, could be a bit.\n\nFixes https://github.com/rust-lang/miri/issues/2389", "tree": {"sha": "4920824bcfabcce7fc34789fc8fd86df6e3755cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4920824bcfabcce7fc34789fc8fd86df6e3755cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ddde70c1217740101ab09b32ab3d545555d8d820", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ddde70c1217740101ab09b32ab3d545555d8d820", "html_url": "https://github.com/rust-lang/rust/commit/ddde70c1217740101ab09b32ab3d545555d8d820", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ddde70c1217740101ab09b32ab3d545555d8d820/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e37c488f33ccf2acae6093647a5e739ccae402f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e37c488f33ccf2acae6093647a5e739ccae402f", "html_url": "https://github.com/rust-lang/rust/commit/9e37c488f33ccf2acae6093647a5e739ccae402f"}, {"sha": "4268918a502f899c4bc9041e7610c3bbc4d76517", "url": "https://api.github.com/repos/rust-lang/rust/commits/4268918a502f899c4bc9041e7610c3bbc4d76517", "html_url": "https://github.com/rust-lang/rust/commit/4268918a502f899c4bc9041e7610c3bbc4d76517"}], "stats": {"total": 75, "additions": 65, "deletions": 10}, "files": [{"sha": "32c1be5fb1e2bdd11bdffe0ab3023ea16f84ea7d", "filename": "src/stacked_borrows/stack.rs", "status": "modified", "additions": 33, "deletions": 10, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/ddde70c1217740101ab09b32ab3d545555d8d820/src%2Fstacked_borrows%2Fstack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddde70c1217740101ab09b32ab3d545555d8d820/src%2Fstacked_borrows%2Fstack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows%2Fstack.rs?ref=ddde70c1217740101ab09b32ab3d545555d8d820", "patch": "@@ -92,6 +92,7 @@ impl<'tcx> Stack {\n             }\n         }\n \n+        // Check that all Unique items fall within unique_range.\n         for (idx, item) in self.borrows.iter().enumerate() {\n             if item.perm() == Permission::Unique {\n                 assert!(\n@@ -102,6 +103,19 @@ impl<'tcx> Stack {\n                 );\n             }\n         }\n+\n+        // Check that the unique_range is a valid index into the borrow stack.\n+        // This asserts that the unique_range's start <= end.\n+        let uniques = &self.borrows[self.unique_range.clone()];\n+\n+        // Check that the start of the unique_range is precise.\n+        if let Some(first_unique) = uniques.first() {\n+            assert_eq!(first_unique.perm(), Permission::Unique);\n+        }\n+        // We cannot assert that the unique range is exact on the upper end.\n+        // When we pop items within the unique range, setting the end of the range precisely\n+        // requires doing a linear search of the borrow stack, which is exactly the kind of\n+        // operation that all this caching exists to avoid.\n     }\n \n     /// Find the item granting the given kind of access to the given tag, and return where\n@@ -227,9 +241,14 @@ impl<'tcx> Stack {\n             self.unique_range.end += 1;\n         }\n         if new.perm() == Permission::Unique {\n-            // Make sure the possibly-unique range contains the new borrow\n-            self.unique_range.start = self.unique_range.start.min(new_idx);\n-            self.unique_range.end = self.unique_range.end.max(new_idx + 1);\n+            // If this is the only Unique, set the range to contain just the new item.\n+            if self.unique_range.is_empty() {\n+                self.unique_range = new_idx..new_idx + 1;\n+            } else {\n+                // We already have other Unique items, expand the range to include the new item\n+                self.unique_range.start = self.unique_range.start.min(new_idx);\n+                self.unique_range.end = self.unique_range.end.max(new_idx + 1);\n+            }\n         }\n \n         // The above insert changes the meaning of every index in the cache >= new_idx, so now\n@@ -282,6 +301,10 @@ impl<'tcx> Stack {\n         // cache when it has been cleared and not yet refilled.\n         self.borrows.clear();\n         self.unknown_bottom = Some(tag);\n+        #[cfg(feature = \"stack-cache\")]\n+        {\n+            self.unique_range = 0..0;\n+        }\n     }\n \n     /// Find all `Unique` elements in this borrow stack above `granting_idx`, pass a copy of them\n@@ -298,7 +321,7 @@ impl<'tcx> Stack {\n \n         if disable_start <= unique_range.end {\n             let lower = unique_range.start.max(disable_start);\n-            let upper = (unique_range.end + 1).min(self.borrows.len());\n+            let upper = self.unique_range.end;\n             for item in &mut self.borrows[lower..upper] {\n                 if item.perm() == Permission::Unique {\n                     log::trace!(\"access: disabling item {:?}\", item);\n@@ -315,14 +338,14 @@ impl<'tcx> Stack {\n         }\n \n         #[cfg(feature = \"stack-cache\")]\n-        if disable_start < self.unique_range.start {\n+        if disable_start <= self.unique_range.start {\n             // We disabled all Unique items\n             self.unique_range.start = 0;\n             self.unique_range.end = 0;\n         } else {\n-            // Truncate the range to disable_start. This is + 2 because we are only removing\n-            // elements after disable_start, and this range does not include the end.\n-            self.unique_range.end = self.unique_range.end.min(disable_start + 1);\n+            // Truncate the range to only include items up to the index that we started disabling\n+            // at.\n+            self.unique_range.end = self.unique_range.end.min(disable_start);\n         }\n \n         #[cfg(debug_assertions)]\n@@ -369,12 +392,12 @@ impl<'tcx> Stack {\n                 self.cache.items[i] = base_tag;\n             }\n \n-            if start < self.unique_range.start.saturating_sub(1) {\n+            if start <= self.unique_range.start {\n                 // We removed all the Unique items\n                 self.unique_range = 0..0;\n             } else {\n                 // Ensure the range doesn't extend past the new top of the stack\n-                self.unique_range.end = self.unique_range.end.min(start + 1);\n+                self.unique_range.end = self.unique_range.end.min(start);\n             }\n         } else {\n             self.unique_range = 0..0;"}, {"sha": "469122095e512da997d8bdf15c4c5efb592244d8", "filename": "tests/pass/stacked-borrows/issue-miri-2389.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ddde70c1217740101ab09b32ab3d545555d8d820/tests%2Fpass%2Fstacked-borrows%2Fissue-miri-2389.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddde70c1217740101ab09b32ab3d545555d8d820/tests%2Fpass%2Fstacked-borrows%2Fissue-miri-2389.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fstacked-borrows%2Fissue-miri-2389.rs?ref=ddde70c1217740101ab09b32ab3d545555d8d820", "patch": "@@ -0,0 +1,17 @@\n+use std::cell::Cell;\n+\n+fn main() {\n+    unsafe {\n+        let root0 = Cell::new(42);\n+        let wildcard = &root0 as *const Cell<i32> as usize as *const Cell<i32>;\n+        // empty the stack to unknown (via SRW reborrow from wildcard)\n+        let _ref0 = &*wildcard;\n+        // Do a non-SRW reborrow from wildcard to start building up a stack again.\n+        // Now new refs start being inserted at idx 0, pushing the unique_range up.\n+        let _refn = &*&*&*&*&*(wildcard.cast::<i32>());\n+        // empty the stack again, but this time with unique_range.start sitting at some high index.\n+        let _ref0 = &*wildcard;\n+        // and do a read which tries to clear the uniques\n+        wildcard.cast::<i32>().read();\n+    }\n+}"}, {"sha": "2ff931f231573251f9cbd5901ae166766efd15c2", "filename": "tests/pass/stacked-borrows/issue-miri-2389.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ddde70c1217740101ab09b32ab3d545555d8d820/tests%2Fpass%2Fstacked-borrows%2Fissue-miri-2389.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ddde70c1217740101ab09b32ab3d545555d8d820/tests%2Fpass%2Fstacked-borrows%2Fissue-miri-2389.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fstacked-borrows%2Fissue-miri-2389.stderr?ref=ddde70c1217740101ab09b32ab3d545555d8d820", "patch": "@@ -0,0 +1,15 @@\n+warning: integer-to-pointer cast\n+  --> $DIR/issue-miri-2389.rs:LL:CC\n+   |\n+LL |         let wildcard = &root0 as *const Cell<i32> as usize as *const Cell<i32>;\n+   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ integer-to-pointer cast\n+   |\n+   = help: This program is using integer-to-pointer casts or (equivalently) `ptr::from_exposed_addr`,\n+   = help: which means that Miri might miss pointer bugs in this program.\n+   = help: See https://doc.rust-lang.org/nightly/std/ptr/fn.from_exposed_addr.html for more details on that operation.\n+   = help: To ensure that Miri does not miss bugs in your program, use Strict Provenance APIs (https://doc.rust-lang.org/nightly/std/ptr/index.html#strict-provenance, https://crates.io/crates/sptr) instead.\n+   = help: You can then pass the `-Zmiri-strict-provenance` flag to Miri, to ensure you are not relying on `from_exposed_addr` semantics.\n+   = help: Alternatively, the `-Zmiri-permissive-provenance` flag disables this warning.\n+   = note: backtrace:\n+   = note: inside `main` at $DIR/issue-miri-2389.rs:LL:CC\n+"}]}