{"sha": "654d9ff618ed95720cf9a3c49cc33e0a6c6ff158", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1NGQ5ZmY2MThlZDk1NzIwY2Y5YTNjNDljYzMzZTBhNmM2ZmYxNTg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-02T20:13:33Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-09T11:08:00Z"}, "message": "do not look at refs to external statics at all", "tree": {"sha": "c14c49761803e4f2da625ffc80cf8ec5bac5e664", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c14c49761803e4f2da625ffc80cf8ec5bac5e664"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/654d9ff618ed95720cf9a3c49cc33e0a6c6ff158", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/654d9ff618ed95720cf9a3c49cc33e0a6c6ff158", "html_url": "https://github.com/rust-lang/rust/commit/654d9ff618ed95720cf9a3c49cc33e0a6c6ff158", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/654d9ff618ed95720cf9a3c49cc33e0a6c6ff158/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "616cb6356fbb7553058940732c5030f537fdf394", "url": "https://api.github.com/repos/rust-lang/rust/commits/616cb6356fbb7553058940732c5030f537fdf394", "html_url": "https://github.com/rust-lang/rust/commit/616cb6356fbb7553058940732c5030f537fdf394"}], "stats": {"total": 37, "additions": 22, "deletions": 15}, "files": [{"sha": "9aa7ec3bb07515fc32e6c4b45509768b4952a940", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 22, "deletions": 15, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/654d9ff618ed95720cf9a3c49cc33e0a6c6ff158/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/654d9ff618ed95720cf9a3c49cc33e0a6c6ff158/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=654d9ff618ed95720cf9a3c49cc33e0a6c6ff158", "patch": "@@ -254,8 +254,25 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n         place: MPlaceTy<'tcx>,\n         path: &mut Vec<PathElem>,\n         ref_tracking: Option<&mut RefTracking<'tcx>>,\n+        const_mode: bool,\n     ) -> EvalResult<'tcx> {\n-        // Before we do anything else, make sure this is entirely in-bounds.\n+        if const_mode {\n+            // Skip validation entirely for some external statics\n+            if let Scalar::Ptr(ptr) = place.ptr {\n+                let alloc_kind = self.tcx.alloc_map.lock().get(ptr.alloc_id);\n+                if let Some(AllocType::Static(did)) = alloc_kind {\n+                    // `extern static` cannot be validated as they have no body.\n+                    // They are not even properly aligned.\n+                    // Statics from other crates are already checked.\n+                    // They might be checked at a different type, but for now we want\n+                    // to avoid recursing too deeply.  This is not sound!\n+                    if !did.is_local() || self.tcx.is_foreign_item(did) {\n+                        return Ok(());\n+                    }\n+                }\n+            }\n+        }\n+        // Make sure this is non-NULL, aligned and entirely in-bounds.\n         let (size, align) = self.size_and_align_of(place.extra, place.layout)?;\n         try_validation!(self.memory.check_align(place.ptr, align),\n             \"unaligned reference\", path);\n@@ -264,24 +281,13 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n                 \"integer pointer in non-ZST reference\", path);\n             try_validation!(self.memory.check_bounds(ptr, size, false),\n                 \"dangling reference (not entirely in bounds)\", path);\n-            // Skip recursion for some external statics\n-            let alloc_kind = self.tcx.alloc_map.lock().get(ptr.alloc_id);\n-            if let Some(AllocType::Static(did)) = alloc_kind {\n-                // statics from other crates are already checked.\n-                // they might be checked at a different type, but for now we want\n-                // to avoid recursing too deeply.\n-                // extern statics cannot be validated as they have no body.\n-                if !did.is_local() || self.tcx.is_foreign_item(did) {\n-                    return Ok(());\n-                }\n-            }\n         }\n         // Check if we have encountered this pointer+layout combination\n         // before.  Proceed recursively even for integer pointers, no\n         // reason to skip them! They are valid for some ZST, but not for others\n         // (e.g. `!` is a ZST).\n-        let op = place.into();\n         if let Some(ref_tracking) = ref_tracking {\n+            let op = place.into();\n             if ref_tracking.seen.insert(op) {\n                 trace!(\"Recursing below ptr {:#?}\", *op);\n                 ref_tracking.todo.push((op, path_clone_and_deref(path)));\n@@ -399,7 +405,8 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n                             self.validate_ref(\n                                 self.ref_to_mplace(value)?,\n                                 path,\n-                                ref_tracking\n+                                ref_tracking,\n+                                const_mode,\n                             )?;\n                         }\n                     },\n@@ -437,7 +444,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n                 }\n                 // for safe ptrs, recursively check it\n                 if !dest.layout.ty.is_unsafe_ptr() {\n-                    self.validate_ref(ptr, path, ref_tracking)?;\n+                    self.validate_ref(ptr, path, ref_tracking, const_mode)?;\n                 }\n             }\n             // Compound data structures"}]}