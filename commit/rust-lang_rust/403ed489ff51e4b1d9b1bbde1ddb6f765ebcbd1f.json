{"sha": "403ed489ff51e4b1d9b1bbde1ddb6f765ebcbd1f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwM2VkNDg5ZmY1MWU0YjFkOWIxYmJkZTFkZGI2Zjc2NWViY2JkMWY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-12-07T10:49:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-07T10:49:37Z"}, "message": "Merge #6597\n\n6597: Upgrade Chalk r=flodiebold a=flodiebold\n\nAlso make overflow depth and max type size configurable through env variables. This can be helpful at least for debugging.\r\n\r\nTests currently fail because of rust-lang/chalk#656, so we'll need to wait for the next update to merge this.\n\nCo-authored-by: Florian Diebold <florian.diebold@freiheit.com>", "tree": {"sha": "29c3c7ffa25d23582972d58afea77da75e6a2b50", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29c3c7ffa25d23582972d58afea77da75e6a2b50"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/403ed489ff51e4b1d9b1bbde1ddb6f765ebcbd1f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfzgjBCRBK7hj4Ov3rIwAAdHIIAKXjI7RXNmPy0RGTg10ABoE3\nsERNdNfV7/p3sPYQczz0Xd7kqNrAGGIyDRANhXv/FSvuO1sm3QuaTgwf+6c7/bjx\nmLSp6abVwc31SMBfNjo6FXYrD5lD1p96ta2Eo3d6OP+bGOmqc72GcddBsECYTwDK\n4TOF5OWuoY0vkUsqRTF8XK4X0eYQerWJA+cEuFuwfO+CZ4xWy9aJGGWcC8LGeVqv\nfbSSbWYl5CCG/69BM9B9HbaHIX61ughK4pfafsWqs/CwOzUPBL6TlGpHFAZ0l2u4\netzXjk0mcoH5nJLMizBRGWuAktGLO1NwnEqBW2qELoTNl8v0y9jujPS4H1avbjM=\n=cnfK\n-----END PGP SIGNATURE-----\n", "payload": "tree 29c3c7ffa25d23582972d58afea77da75e6a2b50\nparent a0fa522fdaf25daff6a2a9794214f0e0bedc5c24\nparent 78dd5482438b1ba13b4aa2eaa9a7c443a3342ce4\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1607338177 +0000\ncommitter GitHub <noreply@github.com> 1607338177 +0000\n\nMerge #6597\n\n6597: Upgrade Chalk r=flodiebold a=flodiebold\n\nAlso make overflow depth and max type size configurable through env variables. This can be helpful at least for debugging.\r\n\r\nTests currently fail because of rust-lang/chalk#656, so we'll need to wait for the next update to merge this.\n\nCo-authored-by: Florian Diebold <florian.diebold@freiheit.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/403ed489ff51e4b1d9b1bbde1ddb6f765ebcbd1f", "html_url": "https://github.com/rust-lang/rust/commit/403ed489ff51e4b1d9b1bbde1ddb6f765ebcbd1f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/403ed489ff51e4b1d9b1bbde1ddb6f765ebcbd1f/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0fa522fdaf25daff6a2a9794214f0e0bedc5c24", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0fa522fdaf25daff6a2a9794214f0e0bedc5c24", "html_url": "https://github.com/rust-lang/rust/commit/a0fa522fdaf25daff6a2a9794214f0e0bedc5c24"}, {"sha": "78dd5482438b1ba13b4aa2eaa9a7c443a3342ce4", "url": "https://api.github.com/repos/rust-lang/rust/commits/78dd5482438b1ba13b4aa2eaa9a7c443a3342ce4", "html_url": "https://github.com/rust-lang/rust/commit/78dd5482438b1ba13b4aa2eaa9a7c443a3342ce4"}], "stats": {"total": 162, "additions": 137, "deletions": 25}, "files": [{"sha": "f1847e7699bb54da1419edc3f568fdcc9e5f2e44", "filename": "Cargo.lock", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/403ed489ff51e4b1d9b1bbde1ddb6f765ebcbd1f/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/403ed489ff51e4b1d9b1bbde1ddb6f765ebcbd1f/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=403ed489ff51e4b1d9b1bbde1ddb6f765ebcbd1f", "patch": "@@ -168,9 +168,9 @@ checksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n \n [[package]]\n name = \"chalk-derive\"\n-version = \"0.37.0\"\n+version = \"0.43.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"564b529b0d620da43dc7ea46fa95b5c602e783e1870aeb07e8cbb6d7ff71bee6\"\n+checksum = \"e2d9e0c8adcced1ab0fea5cb8a38647922893d5b495e363e1814299fd380469b\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n@@ -180,19 +180,19 @@ dependencies = [\n \n [[package]]\n name = \"chalk-ir\"\n-version = \"0.37.0\"\n+version = \"0.43.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"e67d29482387f4cbed6d8f1b1f7d24f00ff10612c700c65fe4af220df11e4d24\"\n+checksum = \"c5218266a5709bc4943de997e64d3fab41c9e9f68efd54a898de53135e987bd3\"\n dependencies = [\n  \"chalk-derive\",\n  \"lazy_static\",\n ]\n \n [[package]]\n name = \"chalk-recursive\"\n-version = \"0.37.0\"\n+version = \"0.43.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"5c52032be6fbdf91b6a7df3cafba3a6683fdabeff88e7ab73eea96e28657d973\"\n+checksum = \"ed8f34f13fd4f30251f9f6f1dc56f80363201390ecbcac2fdfc8e33036cd9c4a\"\n dependencies = [\n  \"chalk-derive\",\n  \"chalk-ir\",\n@@ -203,9 +203,9 @@ dependencies = [\n \n [[package]]\n name = \"chalk-solve\"\n-version = \"0.37.0\"\n+version = \"0.43.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"e0378bdfe1547b6fd545f518373b08c1e0c14920f7555a62d049021250a2b89b\"\n+checksum = \"379c9f584488346044709d4c638c38d61a06fe593d4de2ac5f15fd2b0ba4cd9d\"\n dependencies = [\n  \"chalk-derive\",\n  \"chalk-ir\","}, {"sha": "289e812fe57b6f21ca3c2b54fe7de0f931df1414", "filename": "crates/hir_ty/Cargo.toml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/403ed489ff51e4b1d9b1bbde1ddb6f765ebcbd1f/crates%2Fhir_ty%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/403ed489ff51e4b1d9b1bbde1ddb6f765ebcbd1f/crates%2Fhir_ty%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2FCargo.toml?ref=403ed489ff51e4b1d9b1bbde1ddb6f765ebcbd1f", "patch": "@@ -17,9 +17,9 @@ ena = \"0.14.0\"\n log = \"0.4.8\"\n rustc-hash = \"1.1.0\"\n scoped-tls = \"1\"\n-chalk-solve = { version = \"0.37\", default-features = false }\n-chalk-ir = \"0.37\"\n-chalk-recursive = \"0.37\"\n+chalk-solve = { version = \"0.43\", default-features = false }\n+chalk-ir = \"0.43\"\n+chalk-recursive = \"0.43\"\n \n stdx = { path = \"../stdx\", version = \"0.0.0\" }\n hir_def = { path = \"../hir_def\", version = \"0.0.0\" }"}, {"sha": "66bdb8e88e8df0ea1c0ccd5f6c8807066f8b2e76", "filename": "crates/hir_ty/src/db.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/403ed489ff51e4b1d9b1bbde1ddb6f765ebcbd1f/crates%2Fhir_ty%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/403ed489ff51e4b1d9b1bbde1ddb6f765ebcbd1f/crates%2Fhir_ty%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdb.rs?ref=403ed489ff51e4b1d9b1bbde1ddb6f765ebcbd1f", "patch": "@@ -99,6 +99,12 @@ pub trait HirDatabase: DefDatabase + Upcast<dyn DefDatabase> {\n     #[salsa::invoke(crate::traits::chalk::fn_def_datum_query)]\n     fn fn_def_datum(&self, krate: CrateId, fn_def_id: chalk::FnDefId) -> Arc<chalk::FnDefDatum>;\n \n+    #[salsa::invoke(crate::traits::chalk::fn_def_variance_query)]\n+    fn fn_def_variance(&self, krate: CrateId, fn_def_id: chalk::FnDefId) -> chalk::Variances;\n+\n+    #[salsa::invoke(crate::traits::chalk::adt_variance_query)]\n+    fn adt_variance(&self, krate: CrateId, adt_id: chalk::AdtId) -> chalk::Variances;\n+\n     #[salsa::invoke(crate::traits::chalk::associated_ty_value_query)]\n     fn associated_ty_value(\n         &self,"}, {"sha": "8cf4e701240aea3d0b35e5f834d4bdad5359f1e1", "filename": "crates/hir_ty/src/tests/regression.rs", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/403ed489ff51e4b1d9b1bbde1ddb6f765ebcbd1f/crates%2Fhir_ty%2Fsrc%2Ftests%2Fregression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/403ed489ff51e4b1d9b1bbde1ddb6f765ebcbd1f/crates%2Fhir_ty%2Fsrc%2Ftests%2Fregression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fregression.rs?ref=403ed489ff51e4b1d9b1bbde1ddb6f765ebcbd1f", "patch": "@@ -840,3 +840,46 @@ fn issue_4966() {\n         \"#]],\n     );\n }\n+\n+#[test]\n+fn issue_6628() {\n+    check_infer(\n+        r#\"\n+        #[lang = \"fn_once\"]\n+        pub trait FnOnce<Args> {\n+            type Output;\n+        }\n+\n+        struct S<T>();\n+        impl<T> S<T> {\n+            fn f(&self, _t: T) {}\n+            fn g<F: FnOnce(&T)>(&self, _f: F) {}\n+        }\n+        fn main() {\n+            let s = S();\n+            s.g(|_x| {});\n+            s.f(10);\n+        }\n+        \"#,\n+        expect![[r#\"\n+            105..109 'self': &S<T>\n+            111..113 '_t': T\n+            118..120 '{}': ()\n+            146..150 'self': &S<T>\n+            152..154 '_f': F\n+            159..161 '{}': ()\n+            174..225 '{     ...10); }': ()\n+            184..185 's': S<i32>\n+            188..189 'S': S<i32>() -> S<i32>\n+            188..191 'S()': S<i32>\n+            197..198 's': S<i32>\n+            197..209 's.g(|_x| {})': ()\n+            201..208 '|_x| {}': |&i32| -> ()\n+            202..204 '_x': &i32\n+            206..208 '{}': ()\n+            215..216 's': S<i32>\n+            215..222 's.f(10)': ()\n+            219..221 '10': i32\n+        \"#]],\n+    );\n+}"}, {"sha": "dfa51896b6ad9ee11be10fc22cee5fdcaa85a43f", "filename": "crates/hir_ty/src/traits.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/403ed489ff51e4b1d9b1bbde1ddb6f765ebcbd1f/crates%2Fhir_ty%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/403ed489ff51e4b1d9b1bbde1ddb6f765ebcbd1f/crates%2Fhir_ty%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits.rs?ref=403ed489ff51e4b1d9b1bbde1ddb6f765ebcbd1f", "patch": "@@ -1,4 +1,5 @@\n //! Trait solving using Chalk.\n+use std::env::var;\n use std::sync::Arc;\n \n use base_db::CrateId;\n@@ -15,12 +16,6 @@ use self::chalk::{from_chalk, Interner, ToChalk};\n \n pub(crate) mod chalk;\n \n-// This controls the maximum size of types Chalk considers. If we set this too\n-// high, we can run into slow edge cases; if we set it too low, Chalk won't\n-// find some solutions.\n-// FIXME this is currently hardcoded in the recursive solver\n-// const CHALK_SOLVER_MAX_SIZE: usize = 10;\n-\n /// This controls how much 'time' we give the Chalk solver before giving up.\n const CHALK_SOLVER_FUEL: i32 = 100;\n \n@@ -31,9 +26,11 @@ struct ChalkContext<'a> {\n }\n \n fn create_chalk_solver() -> chalk_recursive::RecursiveSolver<Interner> {\n-    let overflow_depth = 100;\n+    let overflow_depth =\n+        var(\"CHALK_OVERFLOW_DEPTH\").ok().and_then(|s| s.parse().ok()).unwrap_or(100);\n     let caching_enabled = true;\n-    chalk_recursive::RecursiveSolver::new(overflow_depth, caching_enabled)\n+    let max_size = var(\"CHALK_SOLVER_MAX_SIZE\").ok().and_then(|s| s.parse().ok()).unwrap_or(30);\n+    chalk_recursive::RecursiveSolver::new(overflow_depth, max_size, caching_enabled)\n }\n \n /// A set of clauses that we assume to be true. E.g. if we are inside this function:"}, {"sha": "69eae6f79c9ec85eacab0f189aa3acf6d6603ef9", "filename": "crates/hir_ty/src/traits/chalk.rs", "status": "modified", "additions": 46, "deletions": 3, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/403ed489ff51e4b1d9b1bbde1ddb6f765ebcbd1f/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/403ed489ff51e4b1d9b1bbde1ddb6f765ebcbd1f/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs?ref=403ed489ff51e4b1d9b1bbde1ddb6f765ebcbd1f", "patch": "@@ -104,7 +104,7 @@ impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n         };\n \n         // Note: Since we're using impls_for_trait, only impls where the trait\n-        // can be resolved should ever reach Chalk. `impl_datum` relies on that\n+        // can be resolved should ever reach Chalk. Symbol\u2019s value as variable is void: impl_datum relies on that\n         // and will panic if the trait can't be resolved.\n         let in_deps = self.db.trait_impls_in_deps(self.krate);\n         let in_self = self.db.trait_impls_in_crate(self.krate);\n@@ -206,7 +206,7 @@ impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n                         Some((trait_, alias))\n                     })\n                 {\n-                    // Making up `AsyncBlock<T>: Future<Output = T>`\n+                    // Making up Symbol\u2019s value as variable is void: AsyncBlock<T>:\n                     //\n                     // |--------------------OpaqueTyDatum-------------------|\n                     //        |-------------OpaqueTyDatumBound--------------|\n@@ -242,7 +242,7 @@ impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n                     // The opaque type has 1 parameter.\n                     make_binders(bound, 1)\n                 } else {\n-                    // If failed to find `Future::Output`, return empty bounds as fallback.\n+                    // If failed to find Symbol\u2019s value as variable is void: Future::Output, return empty bounds as fallback.\n                     let bound = OpaqueTyDatumBound {\n                         bounds: make_binders(vec![], 0),\n                         where_clauses: make_binders(vec![], 0),\n@@ -343,6 +343,23 @@ impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n         // FIXME\n         unimplemented!()\n     }\n+\n+    fn unification_database(&self) -> &dyn chalk_ir::UnificationDatabase<Interner> {\n+        self\n+    }\n+}\n+\n+impl<'a> chalk_ir::UnificationDatabase<Interner> for ChalkContext<'a> {\n+    fn fn_def_variance(\n+        &self,\n+        fn_def_id: chalk_ir::FnDefId<Interner>,\n+    ) -> chalk_ir::Variances<Interner> {\n+        self.db.fn_def_variance(self.krate, fn_def_id)\n+    }\n+\n+    fn adt_variance(&self, adt_id: chalk_ir::AdtId<Interner>) -> chalk_ir::Variances<Interner> {\n+        self.db.adt_variance(self.krate, adt_id)\n+    }\n }\n \n pub(crate) fn program_clauses_for_chalk_env_query(\n@@ -644,6 +661,32 @@ pub(crate) fn fn_def_datum_query(\n     Arc::new(datum)\n }\n \n+pub(crate) fn fn_def_variance_query(\n+    db: &dyn HirDatabase,\n+    _krate: CrateId,\n+    fn_def_id: FnDefId,\n+) -> Variances {\n+    let callable_def: CallableDefId = from_chalk(db, fn_def_id);\n+    let generic_params = generics(db.upcast(), callable_def.into());\n+    Variances::from(\n+        &Interner,\n+        std::iter::repeat(chalk_ir::Variance::Invariant).take(generic_params.len()),\n+    )\n+}\n+\n+pub(crate) fn adt_variance_query(\n+    db: &dyn HirDatabase,\n+    _krate: CrateId,\n+    adt_id: AdtId,\n+) -> Variances {\n+    let adt: crate::AdtId = from_chalk(db, adt_id);\n+    let generic_params = generics(db.upcast(), adt.into());\n+    Variances::from(\n+        &Interner,\n+        std::iter::repeat(chalk_ir::Variance::Invariant).take(generic_params.len()),\n+    )\n+}\n+\n impl From<FnDefId> for crate::db::InternedCallableDefId {\n     fn from(fn_def_id: FnDefId) -> Self {\n         InternKey::from_intern_id(fn_def_id.0)"}, {"sha": "6a4aa8333ec74cb3b656cc05e5034f003523437e", "filename": "crates/hir_ty/src/traits/chalk/interner.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/403ed489ff51e4b1d9b1bbde1ddb6f765ebcbd1f/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/403ed489ff51e4b1d9b1bbde1ddb6f765ebcbd1f/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Finterner.rs?ref=403ed489ff51e4b1d9b1bbde1ddb6f765ebcbd1f", "patch": "@@ -25,6 +25,7 @@ pub(crate) type FnDefId = chalk_ir::FnDefId<Interner>;\n pub(crate) type FnDefDatum = chalk_solve::rust_ir::FnDefDatum<Interner>;\n pub(crate) type OpaqueTyId = chalk_ir::OpaqueTyId<Interner>;\n pub(crate) type OpaqueTyDatum = chalk_solve::rust_ir::OpaqueTyDatum<Interner>;\n+pub(crate) type Variances = chalk_ir::Variances<Interner>;\n \n impl chalk_ir::interner::Interner for Interner {\n     type InternedType = Arc<chalk_ir::TyData<Self>>;\n@@ -41,6 +42,7 @@ impl chalk_ir::interner::Interner for Interner {\n     type InternedVariableKinds = Vec<chalk_ir::VariableKind<Self>>;\n     type InternedCanonicalVarKinds = Vec<chalk_ir::CanonicalVarKind<Self>>;\n     type InternedConstraints = Vec<chalk_ir::InEnvironment<chalk_ir::Constraint<Self>>>;\n+    type InternedVariances = Arc<[chalk_ir::Variance]>;\n     type DefId = InternId;\n     type InternedAdtId = hir_def::AdtId;\n     type Identifier = TypeAliasId;\n@@ -370,6 +372,20 @@ impl chalk_ir::interner::Interner for Interner {\n     ) -> Option<fmt::Result> {\n         None\n     }\n+\n+    fn intern_variances<E>(\n+        &self,\n+        data: impl IntoIterator<Item = Result<chalk_ir::Variance, E>>,\n+    ) -> Result<Self::InternedVariances, E> {\n+        data.into_iter().collect()\n+    }\n+\n+    fn variances_data<'a>(\n+        &self,\n+        variances: &'a Self::InternedVariances,\n+    ) -> &'a [chalk_ir::Variance] {\n+        &variances\n+    }\n }\n \n impl chalk_ir::interner::HasInterner for Interner {"}, {"sha": "8700d664ee718dc326fb549d55b682eda5ca489d", "filename": "crates/hir_ty/src/traits/chalk/mapping.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/403ed489ff51e4b1d9b1bbde1ddb6f765ebcbd1f/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/403ed489ff51e4b1d9b1bbde1ddb6f765ebcbd1f/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs?ref=403ed489ff51e4b1d9b1bbde1ddb6f765ebcbd1f", "patch": "@@ -31,7 +31,8 @@ impl ToChalk for Ty {\n                 TypeCtor::Ref(m) => ref_to_chalk(db, m, apply_ty.parameters),\n                 TypeCtor::Array => array_to_chalk(db, apply_ty.parameters),\n                 TypeCtor::FnPtr { num_args: _, is_varargs } => {\n-                    let substitution = apply_ty.parameters.to_chalk(db).shifted_in(&Interner);\n+                    let substitution =\n+                        chalk_ir::FnSubst(apply_ty.parameters.to_chalk(db).shifted_in(&Interner));\n                     chalk_ir::TyKind::Function(chalk_ir::FnPointer {\n                         num_binders: 0,\n                         sig: chalk_ir::FnSig {\n@@ -183,7 +184,7 @@ impl ToChalk for Ty {\n                 assert_eq!(num_binders, 0);\n                 let parameters: Substs = from_chalk(\n                     db,\n-                    substitution.shifted_out(&Interner).expect(\"fn ptr should have no binders\"),\n+                    substitution.0.shifted_out(&Interner).expect(\"fn ptr should have no binders\"),\n                 );\n                 Ty::Apply(ApplicationTy {\n                     ctor: TypeCtor::FnPtr {\n@@ -536,6 +537,7 @@ impl ToChalk for GenericPredicate {\n         // we don't produce any where clauses with binders and can't currently deal with them\n         match where_clause\n             .skip_binders()\n+            .clone()\n             .shifted_out(&Interner)\n             .expect(\"unexpected bound vars in where clause\")\n         {\n@@ -661,7 +663,12 @@ where\n                     chalk_ir::TyVariableKind::Integer => TyKind::Integer,\n                     chalk_ir::TyVariableKind::Float => TyKind::Float,\n                 },\n-                chalk_ir::VariableKind::Lifetime => panic!(\"unexpected lifetime from Chalk\"),\n+                // HACK: Chalk can sometimes return new lifetime variables. We\n+                // want to just skip them, but to not mess up the indices of\n+                // other variables, we'll just create a new type variable in\n+                // their place instead. This should not matter (we never see the\n+                // actual *uses* of the lifetime variable).\n+                chalk_ir::VariableKind::Lifetime => TyKind::General,\n                 chalk_ir::VariableKind::Const(_) => panic!(\"unexpected const from Chalk\"),\n             })\n             .collect();"}]}