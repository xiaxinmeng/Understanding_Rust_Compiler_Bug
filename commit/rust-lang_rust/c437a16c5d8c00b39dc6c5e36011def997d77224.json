{"sha": "c437a16c5d8c00b39dc6c5e36011def997d77224", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0MzdhMTZjNWQ4YzAwYjM5ZGM2YzVlMzYwMTFkZWY5OTdkNzcyMjQ=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-07-01T03:51:13Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-07-01T07:52:57Z"}, "message": "rustc: add a lint to enforce uppercase statics.", "tree": {"sha": "ba408e4897a59f96ba64a82c07f1307a2af8658a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba408e4897a59f96ba64a82c07f1307a2af8658a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c437a16c5d8c00b39dc6c5e36011def997d77224", "comment_count": 8, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c437a16c5d8c00b39dc6c5e36011def997d77224", "html_url": "https://github.com/rust-lang/rust/commit/c437a16c5d8c00b39dc6c5e36011def997d77224", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c437a16c5d8c00b39dc6c5e36011def997d77224/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da4384583b84c262dec82be4b041f0332ca16e57", "url": "https://api.github.com/repos/rust-lang/rust/commits/da4384583b84c262dec82be4b041f0332ca16e57", "html_url": "https://github.com/rust-lang/rust/commit/da4384583b84c262dec82be4b041f0332ca16e57"}], "stats": {"total": 444, "additions": 273, "deletions": 171}, "files": [{"sha": "1db9dac9b5827c17ad9e975cc56df99136e68854", "filename": "doc/rust.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c437a16c5d8c00b39dc6c5e36011def997d77224/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/c437a16c5d8c00b39dc6c5e36011def997d77224/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=c437a16c5d8c00b39dc6c5e36011def997d77224", "patch": "@@ -1107,20 +1107,20 @@ The derived types are borrowed pointers with the `'static` lifetime,\n fixed-size arrays, tuples, and structs.\n \n ~~~~\n-static bit1: uint = 1 << 0;\n-static bit2: uint = 1 << 1;\n+static BIT1: uint = 1 << 0;\n+static BIT2: uint = 1 << 1;\n \n-static bits: [uint, ..2] = [bit1, bit2];\n-static string: &'static str = \"bitstring\";\n+static BITS: [uint, ..2] = [BIT1, BIT2];\n+static STRING: &'static str = \"bitstring\";\n \n struct BitsNStrings<'self> {\n     mybits: [uint, ..2],\n     mystring: &'self str\n }\n \n static bits_n_strings: BitsNStrings<'static> = BitsNStrings {\n-    mybits: bits,\n-    mystring: string\n+    mybits: BITS,\n+    mystring: STRING\n };\n ~~~~\n "}, {"sha": "1f552ab9458dc04112aa7d0a9dfc2d645ff43b46", "filename": "doc/tutorial.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c437a16c5d8c00b39dc6c5e36011def997d77224/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/c437a16c5d8c00b39dc6c5e36011def997d77224/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=c437a16c5d8c00b39dc6c5e36011def997d77224", "patch": "@@ -237,8 +237,8 @@ can specify a variable's type by following it with a colon, then the type\n name. Static items, on the other hand, always require a type annotation.\n \n ~~~~\n-static monster_factor: float = 57.8;\n-let monster_size = monster_factor * 10.0;\n+static MONSTER_FACTOR: float = 57.8;\n+let monster_size = MONSTER_FACTOR * 10.0;\n let monster_size: int = 50;\n ~~~~\n "}, {"sha": "06422a49b65f0b207d935e590237504928ad6245", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=c437a16c5d8c00b39dc6c5e36011def997d77224", "patch": "@@ -79,8 +79,8 @@ fn run_rfail_test(config: &config, props: &TestProps, testfile: &Path) {\n     };\n \n     // The value our Makefile configures valgrind to return on failure\n-    static valgrind_err: int = 100;\n-    if ProcRes.status == valgrind_err {\n+    static VALGRIND_ERR: int = 100;\n+    if ProcRes.status == VALGRIND_ERR {\n         fatal_ProcRes(~\"run-fail test isn't valgrind-clean!\", &ProcRes);\n     }\n \n@@ -102,8 +102,8 @@ fn run_rfail_test(config: &config, props: &TestProps, testfile: &Path) {\n \n fn check_correct_failure_status(ProcRes: &ProcRes) {\n     // The value the rust runtime returns on failure\n-    static rust_err: int = 101;\n-    if ProcRes.status != rust_err {\n+    static RUST_ERR: int = 101;\n+    if ProcRes.status != RUST_ERR {\n         fatal_ProcRes(\n             fmt!(\"failure produced the wrong error code: %d\",\n                  ProcRes.status),"}, {"sha": "afcbc0a9859d7aa1e2f9b2c29792cfc9fbf1f978", "filename": "src/etc/unicode.py", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Fetc%2Funicode.py", "raw_url": "https://github.com/rust-lang/rust/raw/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Fetc%2Funicode.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Funicode.py?ref=c437a16c5d8c00b39dc6c5e36011def997d77224", "patch": "@@ -250,6 +250,7 @@ def emit_decomp_module(f, canon, compat):\n // The following code was generated by \"src/etc/unicode.py\"\n \n #[allow(missing_doc)];\n+#[allow(non_uppercase_statics)];\n \n ''')\n "}, {"sha": "72b6e6dc6500a02038c4b2b0b23a4cd05c0988cf", "filename": "src/libextra/bitv.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibextra%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibextra%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fbitv.rs?ref=c437a16c5d8c00b39dc6c5e36011def997d77224", "patch": "@@ -872,7 +872,7 @@ mod tests {\n     use std::rand;\n     use std::rand::Rng;\n \n-    static bench_bits : uint = 1 << 14;\n+    static BENCH_BITS : uint = 1 << 14;\n \n     #[test]\n     fn test_to_str() {\n@@ -1452,19 +1452,19 @@ mod tests {\n     fn bench_big_bitv_big(b: &mut BenchHarness) {\n         let mut r = rng();\n         let mut storage = ~[];\n-        storage.grow(bench_bits / uint::bits, &0);\n+        storage.grow(BENCH_BITS / uint::bits, &0);\n         let mut bitv = BigBitv::new(storage);\n         do b.iter {\n-            bitv.set((r.next() as uint) % bench_bits, true);\n+            bitv.set((r.next() as uint) % BENCH_BITS, true);\n         }\n     }\n \n     #[bench]\n     fn bench_bitv_big(b: &mut BenchHarness) {\n         let mut r = rng();\n-        let mut bitv = Bitv::new(bench_bits, false);\n+        let mut bitv = Bitv::new(BENCH_BITS, false);\n         do b.iter {\n-            bitv.set((r.next() as uint) % bench_bits, true);\n+            bitv.set((r.next() as uint) % BENCH_BITS, true);\n         }\n     }\n \n@@ -1491,14 +1491,14 @@ mod tests {\n         let mut r = rng();\n         let mut bitv = BitvSet::new();\n         do b.iter {\n-            bitv.insert((r.next() as uint) % bench_bits);\n+            bitv.insert((r.next() as uint) % BENCH_BITS);\n         }\n     }\n \n     #[bench]\n     fn bench_bitv_big_union(b: &mut BenchHarness) {\n-        let mut b1 = Bitv::new(bench_bits, false);\n-        let b2 = Bitv::new(bench_bits, false);\n+        let mut b1 = Bitv::new(BENCH_BITS, false);\n+        let b2 = Bitv::new(BENCH_BITS, false);\n         do b.iter {\n             b1.union(&b2);\n         }"}, {"sha": "e89c12e5848de1312ad3e831bcb9e0b6930979d3", "filename": "src/libextra/deque.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibextra%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibextra%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fdeque.rs?ref=c437a16c5d8c00b39dc6c5e36011def997d77224", "patch": "@@ -15,7 +15,7 @@ use std::util::replace;\n use std::vec;\n use std::cast::transmute;\n \n-static initial_capacity: uint = 32u; // 2^5\n+static INITIAL_CAPACITY: uint = 32u; // 2^5\n \n #[allow(missing_doc)]\n pub struct Deque<T> {\n@@ -47,7 +47,7 @@ impl<T> Deque<T> {\n     /// Create an empty Deque\n     pub fn new() -> Deque<T> {\n         Deque{nelts: 0, lo: 0, hi: 0,\n-              elts: vec::from_fn(initial_capacity, |_| None)}\n+              elts: vec::from_fn(INITIAL_CAPACITY, |_| None)}\n     }\n \n     /// Return a reference to the first element in the deque"}, {"sha": "502e45e1d4748c946a955215c1c4ffd27f06d38b", "filename": "src/libextra/ebml.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibextra%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibextra%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Febml.rs?ref=c437a16c5d8c00b39dc6c5e36011def997d77224", "patch": "@@ -748,7 +748,7 @@ pub mod writer {\n \n     // Set to true to generate more debugging in EBML code.\n     // Totally lame approach.\n-    static debug: bool = true;\n+    static DEBUG: bool = true;\n \n     impl Encoder {\n         // used internally to emit things like the vector length and so on\n@@ -764,7 +764,7 @@ pub mod writer {\n             // efficiency.  When debugging, though, we can emit such\n             // labels and then they will be checked by decoder to\n             // try and check failures more quickly.\n-            if debug { self.wr_tagged_str(EsLabel as uint, label) }\n+            if DEBUG { self.wr_tagged_str(EsLabel as uint, label) }\n         }\n     }\n "}, {"sha": "f249feeb4403d460e691a2d4287db490eff4dd51", "filename": "src/libextra/flate.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibextra%2Fflate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibextra%2Fflate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fflate.rs?ref=c437a16c5d8c00b39dc6c5e36011def997d77224", "patch": "@@ -39,10 +39,10 @@ pub mod rustrt {\n     }\n }\n \n-static lz_none : c_int = 0x0;   // Huffman-coding only.\n-static lz_fast : c_int = 0x1;   // LZ with only one probe\n-static lz_norm : c_int = 0x80;  // LZ with 128 probes, \"normal\"\n-static lz_best : c_int = 0xfff; // LZ with 4095 probes, \"best\"\n+static LZ_NONE : c_int = 0x0;   // Huffman-coding only.\n+static LZ_FAST : c_int = 0x1;   // LZ with only one probe\n+static LZ_NORM : c_int = 0x80;  // LZ with 128 probes, \"normal\"\n+static LZ_BEST : c_int = 0xfff; // LZ with 4095 probes, \"best\"\n \n pub fn deflate_bytes(bytes: &[u8]) -> ~[u8] {\n     do vec::as_imm_buf(bytes) |b, len| {\n@@ -52,7 +52,7 @@ pub fn deflate_bytes(bytes: &[u8]) -> ~[u8] {\n                 rustrt::tdefl_compress_mem_to_heap(b as *c_void,\n                                                    len as size_t,\n                                                    &mut outsz,\n-                                                   lz_norm);\n+                                                   LZ_NORM);\n             assert!(res as int != 0);\n             let out = vec::raw::from_buf_raw(res as *u8,\n                                              outsz as uint);"}, {"sha": "25aeccdcbed03e4de051bda1b8d7d1f11f41330d", "filename": "src/libextra/num/bigint.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibextra%2Fnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibextra%2Fnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnum%2Fbigint.rs?ref=c437a16c5d8c00b39dc6c5e36011def997d77224", "patch": "@@ -17,6 +17,7 @@ A BigInt is a combination of BigUint and Sign.\n */\n \n #[allow(missing_doc)];\n+#[allow(non_uppercase_statics)];\n \n use std::cmp::{Eq, Ord, TotalEq, TotalOrd, Ordering, Less, Equal, Greater};\n use std::int;"}, {"sha": "00224f8b06d985cca8b000684352166b0e972dc2", "filename": "src/libextra/num/complex.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibextra%2Fnum%2Fcomplex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibextra%2Fnum%2Fcomplex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnum%2Fcomplex.rs?ref=c437a16c5d8c00b39dc6c5e36011def997d77224", "patch": "@@ -191,6 +191,8 @@ impl<T: ToStrRadix + Num + Ord> ToStrRadix for Cmplx<T> {\n \n #[cfg(test)]\n mod test {\n+    #[allow(non_uppercase_statics)];\n+\n     use super::*;\n     use std::num::{Zero,One,Real};\n "}, {"sha": "2d827365681591d0a40eafc233125005d584f6fd", "filename": "src/libextra/par.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibextra%2Fpar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibextra%2Fpar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fpar.rs?ref=c437a16c5d8c00b39dc6c5e36011def997d77224", "patch": "@@ -20,10 +20,10 @@ use future_spawn = future::spawn;\n  * The maximum number of tasks this module will spawn for a single\n  * operation.\n  */\n-static max_tasks : uint = 32u;\n+static MAX_TASKS : uint = 32u;\n \n /// The minimum number of elements each task will process.\n-static min_granularity : uint = 1024u;\n+static MIN_GRANULARITY : uint = 1024u;\n \n /**\n  * An internal helper to map a function over a large vector and\n@@ -38,13 +38,13 @@ fn map_slices<A:Copy + Send,B:Copy + Send>(\n     -> ~[B] {\n \n     let len = xs.len();\n-    if len < min_granularity {\n+    if len < MIN_GRANULARITY {\n         info!(\"small slice\");\n         // This is a small vector, fall back on the normal map.\n         ~[f()(0u, xs)]\n     }\n     else {\n-        let num_tasks = uint::min(max_tasks, len / min_granularity);\n+        let num_tasks = uint::min(MAX_TASKS, len / MIN_GRANULARITY);\n \n         let items_per_task = len / num_tasks;\n "}, {"sha": "dd3f08917fd4854658b2931b604c537b9c29b895", "filename": "src/libextra/rope.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibextra%2Frope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibextra%2Frope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Frope.rs?ref=c437a16c5d8c00b39dc6c5e36011def997d77224", "patch": "@@ -632,14 +632,14 @@ pub mod node {\n      *\n      * This is not a strict value\n      */\n-    pub static hint_max_leaf_char_len: uint = 256u;\n+    pub static HINT_MAX_LEAF_CHAR_LEN: uint = 256u;\n \n     /**\n      * The maximal height that _should_ be permitted in a tree.\n      *\n      * This is not a strict value\n      */\n-    pub static hint_max_node_height:   uint = 16u;\n+    pub static HINT_MAX_NODE_HEIGHT:   uint = 16u;\n \n     /**\n      * Adopt a string as a node.\n@@ -707,26 +707,26 @@ pub mod node {\n             char_len: char_len,\n             content: str,\n         });\n-        if char_len <= hint_max_leaf_char_len {\n+        if char_len <= HINT_MAX_LEAF_CHAR_LEN {\n             return candidate;\n         } else {\n-            //Firstly, split `str` in slices of hint_max_leaf_char_len\n-            let mut leaves = uint::div_ceil(char_len, hint_max_leaf_char_len);\n+            //Firstly, split `str` in slices of HINT_MAX_LEAF_CHAR_LEN\n+            let mut leaves = uint::div_ceil(char_len, HINT_MAX_LEAF_CHAR_LEN);\n             //Number of leaves\n             let mut nodes  = vec::from_elem(leaves, candidate);\n \n             let mut i = 0u;\n             let mut offset = byte_start;\n             let first_leaf_char_len =\n-                if char_len%hint_max_leaf_char_len == 0u {\n-                  hint_max_leaf_char_len\n+                if char_len%HINT_MAX_LEAF_CHAR_LEN == 0u {\n+                  HINT_MAX_LEAF_CHAR_LEN\n                 } else {\n-                char_len%hint_max_leaf_char_len\n+                char_len%HINT_MAX_LEAF_CHAR_LEN\n                };\n             while i < leaves {\n                 let chunk_char_len: uint =\n                     if i == 0u  { first_leaf_char_len }\n-                    else { hint_max_leaf_char_len };\n+                    else { HINT_MAX_LEAF_CHAR_LEN };\n                 let chunk_byte_len =\n                     str.slice_from(offset).slice_chars(0, chunk_char_len).len();\n                 nodes[i] = @Leaf(Leaf {\n@@ -792,22 +792,22 @@ pub mod node {\n                 let right_len= char_len(right);\n                 let mut left_height= height(left);\n                 let mut right_height=height(right);\n-                if left_len + right_len > hint_max_leaf_char_len {\n-                    if left_len <= hint_max_leaf_char_len {\n+                if left_len + right_len > HINT_MAX_LEAF_CHAR_LEN {\n+                    if left_len <= HINT_MAX_LEAF_CHAR_LEN {\n                         left = flatten(left);\n                         left_height = height(left);\n                     }\n-                    if right_len <= hint_max_leaf_char_len {\n+                    if right_len <= HINT_MAX_LEAF_CHAR_LEN {\n                         right = flatten(right);\n                         right_height = height(right);\n                     }\n                 }\n-                if left_height >= hint_max_node_height {\n+                if left_height >= HINT_MAX_NODE_HEIGHT {\n                     left = of_substr_unsafer(@serialize_node(left),\n                                              0u,byte_len(left),\n                                              left_len);\n                 }\n-                if right_height >= hint_max_node_height {\n+                if right_height >= HINT_MAX_NODE_HEIGHT {\n                     right = of_substr_unsafer(@serialize_node(right),\n                                              0u,byte_len(right),\n                                              right_len);\n@@ -875,7 +875,7 @@ pub mod node {\n      *\n      * # Algorithm\n      *\n-     * * if the node height is smaller than `hint_max_node_height`, do nothing\n+     * * if the node height is smaller than `HINT_MAX_NODE_HEIGHT`, do nothing\n      * * otherwise, gather all leaves as a forest, rebuild a balanced node,\n      *   concatenating small leaves along the way\n      *\n@@ -886,7 +886,7 @@ pub mod node {\n      *    as `node` bot lower height and/or fragmentation.\n      */\n     pub fn bal(node: @Node) -> Option<@Node> {\n-        if height(node) < hint_max_node_height { return None; }\n+        if height(node) < HINT_MAX_NODE_HEIGHT { return None; }\n         //1. Gather all leaves as a forest\n         let mut forest = ~[];\n         let mut it = leaf_iterator::start(node);"}, {"sha": "55626622775763b2126ff0d852b97ae348e339ab", "filename": "src/libextra/term.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibextra%2Fterm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibextra%2Fterm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fterm.rs?ref=c437a16c5d8c00b39dc6c5e36011def997d77224", "patch": "@@ -26,23 +26,23 @@ use std::io;\n pub mod color {\n     pub type Color = u16;\n \n-    pub static black:   Color = 0u16;\n-    pub static red:     Color = 1u16;\n-    pub static green:   Color = 2u16;\n-    pub static yellow:  Color = 3u16;\n-    pub static blue:    Color = 4u16;\n-    pub static magenta: Color = 5u16;\n-    pub static cyan:    Color = 6u16;\n-    pub static white:   Color = 7u16;\n-\n-    pub static bright_black:   Color = 8u16;\n-    pub static bright_red:     Color = 9u16;\n-    pub static bright_green:   Color = 10u16;\n-    pub static bright_yellow:  Color = 11u16;\n-    pub static bright_blue:    Color = 12u16;\n-    pub static bright_magenta: Color = 13u16;\n-    pub static bright_cyan:    Color = 14u16;\n-    pub static bright_white:   Color = 15u16;\n+    pub static BLACK:   Color = 0u16;\n+    pub static RED:     Color = 1u16;\n+    pub static GREEN:   Color = 2u16;\n+    pub static YELLOW:  Color = 3u16;\n+    pub static BLUE:    Color = 4u16;\n+    pub static MAGENTA: Color = 5u16;\n+    pub static CYAN:    Color = 6u16;\n+    pub static WHITE:   Color = 7u16;\n+\n+    pub static BRIGHT_BLACK:   Color = 8u16;\n+    pub static BRIGHT_RED:     Color = 9u16;\n+    pub static BRIGHT_GREEN:   Color = 10u16;\n+    pub static BRIGHT_YELLOW:  Color = 11u16;\n+    pub static BRIGHT_BLUE:    Color = 12u16;\n+    pub static BRIGHT_MAGENTA: Color = 13u16;\n+    pub static BRIGHT_CYAN:    Color = 14u16;\n+    pub static BRIGHT_WHITE:   Color = 15u16;\n }\n \n #[cfg(not(target_os = \"win32\"))]"}, {"sha": "e16297e387178f124c771c01535f80bd9d5152a2", "filename": "src/libextra/terminfo/parser/compiled.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibextra%2Fterminfo%2Fparser%2Fcompiled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibextra%2Fterminfo%2Fparser%2Fcompiled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fterminfo%2Fparser%2Fcompiled.rs?ref=c437a16c5d8c00b39dc6c5e36011def997d77224", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[allow(non_uppercase_statics)];\n+\n /// ncurses-compatible compiled terminfo format parsing (term(5))\n \n "}, {"sha": "59aed0055d87e9b70ccf8eb6b172af10df2642a2", "filename": "src/libextra/test.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibextra%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibextra%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftest.rs?ref=c437a16c5d8c00b39dc6c5e36011def997d77224", "patch": "@@ -331,19 +331,19 @@ pub fn run_tests_console(opts: &TestOpts,\n     }\n \n     fn write_ok(out: @io::Writer, use_color: bool) {\n-        write_pretty(out, \"ok\", term::color::green, use_color);\n+        write_pretty(out, \"ok\", term::color::GREEN, use_color);\n     }\n \n     fn write_failed(out: @io::Writer, use_color: bool) {\n-        write_pretty(out, \"FAILED\", term::color::red, use_color);\n+        write_pretty(out, \"FAILED\", term::color::RED, use_color);\n     }\n \n     fn write_ignored(out: @io::Writer, use_color: bool) {\n-        write_pretty(out, \"ignored\", term::color::yellow, use_color);\n+        write_pretty(out, \"ignored\", term::color::YELLOW, use_color);\n     }\n \n     fn write_bench(out: @io::Writer, use_color: bool) {\n-        write_pretty(out, \"bench\", term::color::cyan, use_color);\n+        write_pretty(out, \"bench\", term::color::CYAN, use_color);\n     }\n \n     fn write_pretty(out: @io::Writer,\n@@ -487,16 +487,16 @@ fn run_tests(opts: &TestOpts,\n \n // Windows tends to dislike being overloaded with threads.\n #[cfg(windows)]\n-static sched_overcommit : uint = 1;\n+static SCHED_OVERCOMMIT : uint = 1;\n \n #[cfg(unix)]\n-static sched_overcommit : uint = 4u;\n+static SCHED_OVERCOMMIT : uint = 4u;\n \n fn get_concurrency() -> uint {\n     unsafe {\n         let threads = rustrt::rust_sched_threads() as uint;\n         if threads == 1 { 1 }\n-        else { threads * sched_overcommit }\n+        else { threads * SCHED_OVERCOMMIT }\n     }\n }\n "}, {"sha": "a64b23743287e6829570d1977f68050d0c88040b", "filename": "src/libextra/time.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibextra%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibextra%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftime.rs?ref=c437a16c5d8c00b39dc6c5e36011def997d77224", "patch": "@@ -868,20 +868,20 @@ mod tests {\n     use std::str;\n \n     fn test_get_time() {\n-        static some_recent_date: i64 = 1325376000i64; // 2012-01-01T00:00:00Z\n-        static some_future_date: i64 = 1577836800i64; // 2020-01-01T00:00:00Z\n+        static SOME_RECENT_DATE: i64 = 1325376000i64; // 2012-01-01T00:00:00Z\n+        static SOME_FUTURE_DATE: i64 = 1577836800i64; // 2020-01-01T00:00:00Z\n \n         let tv1 = get_time();\n         debug!(\"tv1=%? sec + %? nsec\", tv1.sec as uint, tv1.nsec as uint);\n \n-        assert!(tv1.sec > some_recent_date);\n+        assert!(tv1.sec > SOME_RECENT_DATE);\n         assert!(tv1.nsec < 1000000000i32);\n \n         let tv2 = get_time();\n         debug!(\"tv2=%? sec + %? nsec\", tv2.sec as uint, tv2.nsec as uint);\n \n         assert!(tv2.sec >= tv1.sec);\n-        assert!(tv2.sec < some_future_date);\n+        assert!(tv2.sec < SOME_FUTURE_DATE);\n         assert!(tv2.nsec < 1000000000i32);\n         if tv2.sec == tv1.sec {\n             assert!(tv2.nsec >= tv1.nsec);"}, {"sha": "63a0ef0842e0e9a5070f1386223fc4a1c130df9b", "filename": "src/librust/rust.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibrust%2Frust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibrust%2Frust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrust%2Frust.rs?ref=c437a16c5d8c00b39dc6c5e36011def997d77224", "patch": "@@ -60,7 +60,7 @@ struct Command<'self> {\n     usage_full: UsageSource<'self>,\n }\n \n-static commands: &'static [Command<'static>] = &[\n+static COMMANDS: &'static [Command<'static>] = &[\n     Command{\n         cmd: \"build\",\n         action: CallMain(\"rustc\", rustc::main),\n@@ -122,7 +122,7 @@ fn rustc_help() {\n }\n \n fn find_cmd(command_string: &str) -> Option<Command> {\n-    do commands.iter().find_ |command| {\n+    do COMMANDS.iter().find_ |command| {\n         command.cmd == command_string\n     }.map_consume(|x| copy *x)\n }\n@@ -197,7 +197,7 @@ fn do_command(command: &Command, args: &[~str]) -> ValidUsage {\n }\n \n fn usage() {\n-    static indent: uint = 8;\n+    static INDENT: uint = 8;\n \n     io::print(\n         \"The rust tool is a convenience for managing rust source code.\\n\\\n@@ -209,8 +209,8 @@ fn usage() {\n         \\n\"\n     );\n \n-    for commands.iter().advance |command| {\n-        let padding = \" \".repeat(indent - command.cmd.len());\n+    for COMMANDS.iter().advance |command| {\n+        let padding = \" \".repeat(INDENT - command.cmd.len());\n         io::println(fmt!(\"    %s%s%s\",\n                          command.cmd, padding, command.usage_line));\n     }"}, {"sha": "e345a9d703c9c9d65aee209a2f9ce5df97e2da17", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=c437a16c5d8c00b39dc6c5e36011def997d77224", "patch": "@@ -14,7 +14,6 @@ use middle::ty;\n use middle::pat_util;\n use util::ppaux::{ty_to_str};\n \n-use std::char;\n use std::cmp;\n use std::hashmap::HashMap;\n use std::i16;\n@@ -80,6 +79,7 @@ pub enum lint {\n     non_implicitly_copyable_typarams,\n     deprecated_pattern,\n     non_camel_case_types,\n+    non_uppercase_statics,\n     type_limits,\n     default_methods,\n     unused_unsafe,\n@@ -198,6 +198,13 @@ static lint_table: &'static [(&'static str, LintSpec)] = &[\n         default: allow\n      }),\n \n+    (\"non_uppercase_statics\",\n+     LintSpec {\n+         lint: non_uppercase_statics,\n+         desc: \"static constants should have uppercase identifiers\",\n+         default: warn\n+     }),\n+\n     (\"managed_heap_memory\",\n      LintSpec {\n         lint: managed_heap_memory,\n@@ -884,6 +891,23 @@ fn check_item_non_camel_case_types(cx: &Context, it: &ast::item) {\n     }\n }\n \n+fn check_item_non_uppercase_statics(cx: &Context, it: &ast::item) {\n+    match it.node {\n+        // only check static constants\n+        ast::item_static(_, ast::m_imm, _) => {\n+            let s = cx.tcx.sess.str_of(it.ident);\n+            // check for lowercase letters rather than non-uppercase\n+            // ones (some scripts don't have a concept of\n+            // upper/lowercase)\n+            if s.iter().any_(|c| c.is_lowercase()) {\n+                cx.span_lint(non_uppercase_statics, it.span,\n+                             \"static constant should have an uppercase identifier\");\n+            }\n+        }\n+        _ => {}\n+    }\n+}\n+\n fn lint_unused_unsafe() -> visit::vt<@mut Context> {\n     visit::mk_vt(@visit::Visitor {\n         visit_expr: |e, (cx, vt): (@mut Context, visit::vt<@mut Context>)| {\n@@ -1146,6 +1170,7 @@ pub fn check_crate(tcx: ty::ctxt, crate: @ast::crate) {\n                     }\n                     check_item_ctypes(cx, it);\n                     check_item_non_camel_case_types(cx, it);\n+                    check_item_non_uppercase_statics(cx, it);\n                     check_item_default_methods(cx, it);\n                     check_item_heap(cx, it);\n "}, {"sha": "243ddb2a14b06ccdd1722bc06b1d6c4193245bd7", "filename": "src/librustc/rustc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibrustc%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibrustc%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Frustc.rs?ref=c437a16c5d8c00b39dc6c5e36011def997d77224", "patch": "@@ -19,6 +19,7 @@\n \n #[allow(non_implicitly_copyable_typarams)];\n #[allow(non_camel_case_types)];\n+#[allow(non_uppercase_statics)];\n #[deny(deprecated_pattern)];\n \n extern mod extra;"}, {"sha": "3393133bc186603acdc5042935abc62521cb62ba", "filename": "src/librustdoc/demo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibrustdoc%2Fdemo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibrustdoc%2Fdemo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdemo.rs?ref=c437a16c5d8c00b39dc6c5e36011def997d77224", "patch": "@@ -23,7 +23,7 @@\n \n \n /// The base price of a muffin on a non-holiday\n-static price_of_a_muffin: float = 70f;\n+static PRICE_OF_A_MUFFIN: float = 70f;\n \n struct WaitPerson {\n     hair_color: ~str"}, {"sha": "2077516a9b56be8bc4d0b6457e770cc353f1c358", "filename": "src/librustdoc/desc_to_brief_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs?ref=c437a16c5d8c00b39dc6c5e36011def997d77224", "patch": "@@ -87,11 +87,11 @@ pub fn extract(desc: Option<~str>) -> Option<~str> {\n }\n \n fn parse_desc(desc: ~str) -> Option<~str> {\n-    static max_brief_len: uint = 120u;\n+    static MAX_BRIEF_LEN: uint = 120u;\n \n     match first_sentence(copy desc) {\n       Some(first_sentence) => {\n-        if first_sentence.len() <= max_brief_len {\n+        if first_sentence.len() <= MAX_BRIEF_LEN {\n             Some(first_sentence)\n         } else {\n             None"}, {"sha": "eec33a375355ec585cbde3c71b92f6817d5279ad", "filename": "src/librustpkg/messages.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibrustpkg%2Fmessages.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibrustpkg%2Fmessages.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fmessages.rs?ref=c437a16c5d8c00b39dc6c5e36011def997d77224", "patch": "@@ -13,15 +13,15 @@ use std::io;\n use std::result::*;\n \n pub fn note(msg: &str) {\n-    pretty_message(msg, \"note: \", term::color::green, io::stdout())\n+    pretty_message(msg, \"note: \", term::color::GREEN, io::stdout())\n }\n \n pub fn warn(msg: &str) {\n-    pretty_message(msg, \"warning: \", term::color::yellow, io::stdout())\n+    pretty_message(msg, \"warning: \", term::color::YELLOW, io::stdout())\n }\n \n pub fn error(msg: &str) {\n-    pretty_message(msg, \"error: \", term::color::red, io::stdout())\n+    pretty_message(msg, \"error: \", term::color::RED, io::stdout())\n }\n \n fn pretty_message<'a>(msg: &'a str, prefix: &'a str, color: term::color::Color, out: @io::Writer) {"}, {"sha": "b8f77ceececd756a08f68966b55ca36b66e14188", "filename": "src/librustpkg/path_util.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibrustpkg%2Fpath_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibrustpkg%2Fpath_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fpath_util.rs?ref=c437a16c5d8c00b39dc6c5e36011def997d77224", "patch": "@@ -29,9 +29,9 @@ fn push_if_exists(vec: &mut ~[Path], p: &Path) {\n }\n \n #[cfg(windows)]\n-static path_entry_separator: &'static str = \";\";\n+static PATH_ENTRY_SEPARATOR: &'static str = \";\";\n #[cfg(not(windows))]\n-static path_entry_separator: &'static str = \":\";\n+static PATH_ENTRY_SEPARATOR: &'static str = \":\";\n \n /// Returns the value of RUST_PATH, as a list\n /// of Paths. Includes default entries for, if they exist:\n@@ -42,7 +42,7 @@ pub fn rust_path() -> ~[Path] {\n     let mut env_rust_path: ~[Path] = match os::getenv(\"RUST_PATH\") {\n         Some(env_path) => {\n             let env_path_components: ~[&str] =\n-                env_path.split_str_iter(path_entry_separator).collect();\n+                env_path.split_str_iter(PATH_ENTRY_SEPARATOR).collect();\n             env_path_components.map(|&s| Path(s))\n         }\n         None => ~[]\n@@ -56,12 +56,12 @@ pub fn rust_path() -> ~[Path] {\n     env_rust_path\n }\n \n-pub static u_rwx: i32 = (S_IRUSR | S_IWUSR | S_IXUSR) as i32;\n+pub static U_RWX: i32 = (S_IRUSR | S_IWUSR | S_IXUSR) as i32;\n \n /// Creates a directory that is readable, writeable,\n /// and executable by the user. Returns true iff creation\n /// succeeded.\n-pub fn make_dir_rwx(p: &Path) -> bool { os::make_dir(p, u_rwx) }\n+pub fn make_dir_rwx(p: &Path) -> bool { os::make_dir(p, U_RWX) }\n \n // n.b. The next three functions ignore the package version right\n // now. Should fix that.\n@@ -318,7 +318,7 @@ fn target_file_in_workspace(pkgid: &PkgId, workspace: &Path,\n         Lib => \"lib\", Main | Test | Bench => \"bin\"\n     };\n     let result = workspace.push(subdir);\n-    if !os::path_exists(&result) && !mkdir_recursive(&result, u_rwx) {\n+    if !os::path_exists(&result) && !mkdir_recursive(&result, U_RWX) {\n         cond.raise((copy result, fmt!(\"target_file_in_workspace couldn't \\\n             create the %s dir (pkgid=%s, workspace=%s, what=%?, where=%?\",\n             subdir, pkgid.to_str(), workspace.to_str(), what, where)));\n@@ -335,7 +335,7 @@ pub fn build_pkg_id_in_workspace(pkgid: &PkgId, workspace: &Path) -> Path {\n     // n.b. Should actually use a target-specific\n     // subdirectory of build/\n     result = result.push_rel(&*pkgid.local_path);\n-    if os::path_exists(&result) || os::mkdir_recursive(&result, u_rwx) {\n+    if os::path_exists(&result) || os::mkdir_recursive(&result, U_RWX) {\n         result\n     }\n     else {"}, {"sha": "7c46ba2a8e75ee077665106320b8cc096051fa11", "filename": "src/librustpkg/rustpkg.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibrustpkg%2Frustpkg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibrustpkg%2Frustpkg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Frustpkg.rs?ref=c437a16c5d8c00b39dc6c5e36011def997d77224", "patch": "@@ -38,7 +38,7 @@ use syntax::{ast, diagnostic};\n use util::*;\n use messages::*;\n use path_util::{build_pkg_id_in_workspace, first_pkgid_src_in_workspace};\n-use path_util::{u_rwx, rust_path};\n+use path_util::{U_RWX, rust_path};\n use path_util::{built_executable_in_workspace, built_library_in_workspace};\n use path_util::{target_executable_in_workspace, target_library_in_workspace};\n use workspace::{each_pkg_parent_workspace, pkg_parent_workspaces};\n@@ -374,7 +374,7 @@ impl CtxMethods for Ctx {\n \n         for maybe_executable.iter().advance |exec| {\n             debug!(\"Copying: %s -> %s\", exec.to_str(), target_exec.to_str());\n-            if !(os::mkdir_recursive(&target_exec.dir_path(), u_rwx) &&\n+            if !(os::mkdir_recursive(&target_exec.dir_path(), U_RWX) &&\n                  os::copy_file(exec, &target_exec)) {\n                 cond.raise((copy *exec, copy target_exec));\n             }\n@@ -383,7 +383,7 @@ impl CtxMethods for Ctx {\n             let target_lib = (copy target_lib).expect(fmt!(\"I built %s but apparently \\\n                                                 didn't install it!\", lib.to_str()));\n             debug!(\"Copying: %s -> %s\", lib.to_str(), target_lib.to_str());\n-            if !(os::mkdir_recursive(&target_lib.dir_path(), u_rwx) &&\n+            if !(os::mkdir_recursive(&target_lib.dir_path(), U_RWX) &&\n                  os::copy_file(lib, &target_lib)) {\n                 cond.raise((copy *lib, copy target_lib));\n             }"}, {"sha": "2800ad52b1ebcbe0a310c72c92b531f9f6414d78", "filename": "src/librustpkg/tests.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibrustpkg%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibrustpkg%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Ftests.rs?ref=c437a16c5d8c00b39dc6c5e36011def997d77224", "patch": "@@ -21,7 +21,7 @@ use package_source::*;\n use version::{ExactRevision, NoVersion, Version};\n use path_util::{target_executable_in_workspace, target_library_in_workspace,\n                target_test_in_workspace, target_bench_in_workspace,\n-               make_dir_rwx, u_rwx, library_in_workspace,\n+               make_dir_rwx, U_RWX, library_in_workspace,\n                built_bench_in_workspace, built_test_in_workspace,\n                built_library_in_workspace, built_executable_in_workspace,\n                 installed_library_in_workspace, rust_path};\n@@ -78,7 +78,7 @@ fn mk_workspace(workspace: &Path, short_name: &LocalPath, version: &Version) ->\n     // include version number in directory name\n     let package_dir = workspace.push(\"src\").push(fmt!(\"%s-%s\",\n                                                       short_name.to_str(), version.to_str()));\n-    assert!(os::mkdir_recursive(&package_dir, u_rwx));\n+    assert!(os::mkdir_recursive(&package_dir, U_RWX));\n     package_dir\n }\n \n@@ -92,7 +92,7 @@ fn mk_temp_workspace(short_name: &LocalPath, version: &Version) -> Path {\n           os::path_is_dir(&package_dir));\n     // Create main, lib, test, and bench files\n     debug!(\"mk_workspace: creating %s\", package_dir.to_str());\n-    assert!(os::mkdir_recursive(&package_dir, u_rwx));\n+    assert!(os::mkdir_recursive(&package_dir, U_RWX));\n     debug!(\"Created %s and does it exist? %?\", package_dir.to_str(),\n           os::path_is_dir(&package_dir));\n     // Create main, lib, test, and bench files\n@@ -181,7 +181,7 @@ fn create_local_package_in(pkgid: &PkgId, pkgdir: &Path) -> Path {\n     let package_dir = pkgdir.push(\"src\").push(pkgid.to_str());\n \n     // Create main, lib, test, and bench files\n-    assert!(os::mkdir_recursive(&package_dir, u_rwx));\n+    assert!(os::mkdir_recursive(&package_dir, U_RWX));\n     debug!(\"Created %s and does it exist? %?\", package_dir.to_str(),\n           os::path_is_dir(&package_dir));\n     // Create main, lib, test, and bench files\n@@ -589,9 +589,9 @@ fn rust_path_test() {\n fn rust_path_contents() {\n     let dir = mkdtemp(&os::tmpdir(), \"rust_path\").expect(\"rust_path_contents failed\");\n     let abc = &dir.push(\"A\").push(\"B\").push(\"C\");\n-    assert!(os::mkdir_recursive(&abc.push(\".rust\"), u_rwx));\n-    assert!(os::mkdir_recursive(&abc.pop().push(\".rust\"), u_rwx));\n-    assert!(os::mkdir_recursive(&abc.pop().pop().push(\".rust\"), u_rwx));\n+    assert!(os::mkdir_recursive(&abc.push(\".rust\"), U_RWX));\n+    assert!(os::mkdir_recursive(&abc.pop().push(\".rust\"), U_RWX));\n+    assert!(os::mkdir_recursive(&abc.pop().pop().push(\".rust\"), U_RWX));\n     assert!(do os::change_dir_locked(&dir.push(\"A\").push(\"B\").push(\"C\")) {\n         let p = rust_path();\n         let cwd = os::getcwd().push(\".rust\");"}, {"sha": "669e5042d3bf5ae71cb985fa4bd73cf5cf7e8be8", "filename": "src/librustpkg/util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibrustpkg%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibrustpkg%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Futil.rs?ref=c437a16c5d8c00b39dc6c5e36011def997d77224", "patch": "@@ -28,7 +28,7 @@ use search::find_library_in_search_path;\n use path_util::target_library_in_workspace;\n pub use target::{OutputType, Main, Lib, Bench, Test};\n \n-static Commands: &'static [&'static str] =\n+static COMMANDS: &'static [&'static str] =\n     &[\"build\", \"clean\", \"do\", \"info\", \"install\", \"prefer\", \"test\", \"uninstall\",\n       \"unprefer\"];\n \n@@ -55,7 +55,7 @@ pub fn root() -> Path {\n }\n \n pub fn is_cmd(cmd: &str) -> bool {\n-    Commands.iter().any_(|&c| c == cmd)\n+    COMMANDS.iter().any_(|&c| c == cmd)\n }\n \n struct ListenerFn {\n@@ -417,4 +417,4 @@ mod test {\n \n // tjc: cheesy\n fn debug_flags() -> ~[~str] { ~[] }\n-// static debug_flags: ~[~str] = ~[~\"-Z\", ~\"time-passes\"];\n+// static DEBUG_FLAGS: ~[~str] = ~[~\"-Z\", ~\"time-passes\"];"}, {"sha": "f92561edcb0863f66c3587b02abb9e8d3254775d", "filename": "src/libstd/gc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibstd%2Fgc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibstd%2Fgc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgc.rs?ref=c437a16c5d8c00b39dc6c5e36011def997d77224", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #[doc(hidden)];\n+#[allow(non_uppercase_statics)];\n \n /*! Precise garbage collector\n "}, {"sha": "e51119859fb39720edf180e3f5ea9f9aab4be819", "filename": "src/libstd/libc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibstd%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibstd%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flibc.rs?ref=c437a16c5d8c00b39dc6c5e36011def997d77224", "patch": "@@ -64,6 +64,7 @@\n */\n \n #[allow(non_camel_case_types)];\n+#[allow(non_uppercase_statics)];\n #[allow(missing_doc)];\n \n // Initial glob-exports mean that all the contents of all the modules"}, {"sha": "c89fc73693cae777be1d28313d5c7958554101d0", "filename": "src/libstd/num/cmath.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibstd%2Fnum%2Fcmath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibstd%2Fnum%2Fcmath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fcmath.rs?ref=c437a16c5d8c00b39dc6c5e36011def997d77224", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #[allow(missing_doc)];\n+#[allow(non_uppercase_statics)];\n \n // function names are almost identical to C's libmath, a few have been\n // renamed, grep for \"rename:\""}, {"sha": "a84c27cd91882f67e13bd9d970221af5b8569841", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=c437a16c5d8c00b39dc6c5e36011def997d77224", "patch": "@@ -10,6 +10,7 @@\n \n //! Operations and constants for `f32`\n #[allow(missing_doc)];\n+#[allow(non_uppercase_statics)];\n \n use libc::c_int;\n use num::{Zero, One, strconv};"}, {"sha": "216963e04143dfde496efac941d679686735acd0", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=c437a16c5d8c00b39dc6c5e36011def997d77224", "patch": "@@ -11,6 +11,7 @@\n //! Operations and constants for `f64`\n \n #[allow(missing_doc)];\n+#[allow(non_uppercase_statics)];\n \n use libc::c_int;\n use num::{Zero, One, strconv};"}, {"sha": "d73ff16c6f7bca0ef7431f9881648c702e93075f", "filename": "src/libstd/num/float.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibstd%2Fnum%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibstd%2Fnum%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ffloat.rs?ref=c437a16c5d8c00b39dc6c5e36011def997d77224", "patch": "@@ -21,6 +21,7 @@\n // PORT this must match in width according to architecture\n \n #[allow(missing_doc)];\n+#[allow(non_uppercase_statics)];\n \n use f64;\n use libc::c_int;"}, {"sha": "d39b4b2b911ff6d02c02ed7e5714c08b96810da1", "filename": "src/libstd/num/int.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibstd%2Fnum%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibstd%2Fnum%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fint.rs?ref=c437a16c5d8c00b39dc6c5e36011def997d77224", "patch": "@@ -10,6 +10,8 @@\n \n //! Operations and constants for `int`\n \n+#[allow(non_uppercase_statics)];\n+\n use num::BitCount;\n \n pub use self::generated::*;"}, {"sha": "c2eebf9a3e41a17410d4cc670a60cdc437cb1f37", "filename": "src/libstd/num/int_macros.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibstd%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibstd%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fint_macros.rs?ref=c437a16c5d8c00b39dc6c5e36011def997d77224", "patch": "@@ -14,6 +14,8 @@\n \n macro_rules! int_module (($T:ty, $bits:expr) => (mod generated {\n \n+#[allow(non_uppercase_statics)];\n+\n use num::{ToStrRadix, FromStrRadix};\n use num::{Zero, One, strconv};\n use prelude::*;"}, {"sha": "337d804ce732d603a7540e925547fc674eb80e5a", "filename": "src/libstd/num/strconv.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibstd%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibstd%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fstrconv.rs?ref=c437a16c5d8c00b39dc6c5e36011def997d77224", "patch": "@@ -101,12 +101,12 @@ impl_NumStrConv_Integer!(u64)\n \n \n // Special value strings as [u8] consts.\n-static inf_buf:          [u8, ..3] = ['i' as u8, 'n' as u8, 'f' as u8];\n-static positive_inf_buf: [u8, ..4] = ['+' as u8, 'i' as u8, 'n' as u8,\n+static INF_BUF:          [u8, ..3] = ['i' as u8, 'n' as u8, 'f' as u8];\n+static POS_INF_BUF: [u8, ..4] = ['+' as u8, 'i' as u8, 'n' as u8,\n                                       'f' as u8];\n-static negative_inf_buf: [u8, ..4] = ['-' as u8, 'i' as u8, 'n' as u8,\n+static NEG_INF_BUF: [u8, ..4] = ['-' as u8, 'i' as u8, 'n' as u8,\n                                       'f' as u8];\n-static nan_buf:          [u8, ..3] = ['N' as u8, 'a' as u8, 'N' as u8];\n+static NAN_BUF:          [u8, ..3] = ['N' as u8, 'a' as u8, 'N' as u8];\n \n /**\n  * Converts an integral number to its string representation as a byte vector.\n@@ -506,15 +506,15 @@ pub fn from_str_bytes_common<T:NumCast+Zero+One+Eq+Ord+Copy+Div<T,T>+\n     }\n \n     if special {\n-        if buf == inf_buf || buf == positive_inf_buf {\n+        if buf == INF_BUF || buf == POS_INF_BUF {\n             return NumStrConv::inf();\n-        } else if buf == negative_inf_buf {\n+        } else if buf == NEG_INF_BUF {\n             if negative {\n                 return NumStrConv::neg_inf();\n             } else {\n                 return None;\n             }\n-        } else if buf == nan_buf {\n+        } else if buf == NAN_BUF {\n             return NumStrConv::NaN();\n         }\n     }"}, {"sha": "d185b2a05a8c4e051ada4b337d22bc20941aa7d0", "filename": "src/libstd/num/uint_macros.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibstd%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibstd%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint_macros.rs?ref=c437a16c5d8c00b39dc6c5e36011def997d77224", "patch": "@@ -14,6 +14,8 @@\n \n macro_rules! uint_module (($T:ty, $T_SIGNED:ty, $bits:expr) => (mod generated {\n \n+#[allow(non_uppercase_statics)];\n+\n use num::BitCount;\n use num::{ToStrRadix, FromStrRadix};\n use num::{Zero, One, strconv};"}, {"sha": "5782822bc2b770aca56ae537476681a621e42890", "filename": "src/libstd/rand.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibstd%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibstd%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand.rs?ref=c437a16c5d8c00b39dc6c5e36011def997d77224", "patch": "@@ -157,15 +157,15 @@ impl Rand for f32 {\n     }\n }\n \n-static scale : f64 = (u32::max_value as f64) + 1.0f64;\n+static SCALE : f64 = (u32::max_value as f64) + 1.0f64;\n impl Rand for f64 {\n     #[inline]\n     fn rand<R: Rng>(rng: &mut R) -> f64 {\n         let u1 = rng.next() as f64;\n         let u2 = rng.next() as f64;\n         let u3 = rng.next() as f64;\n \n-        ((u1 / scale + u2) / scale + u3) / scale\n+        ((u1 / SCALE + u2) / SCALE + u3) / SCALE\n     }\n }\n \n@@ -724,7 +724,7 @@ impl IsaacRng {\n         let mut a = self.a;\n         let mut b = self.b + self.c;\n \n-        static midpoint: uint = RAND_SIZE as uint / 2;\n+        static MIDPOINT: uint = RAND_SIZE as uint / 2;\n \n         macro_rules! ind (($x:expr) => {\n             self.mem[($x >> 2) & (RAND_SIZE - 1)]\n@@ -748,9 +748,9 @@ impl IsaacRng {\n             }}\n         );\n \n-        let r = [(0, midpoint), (midpoint, 0)];\n+        let r = [(0, MIDPOINT), (MIDPOINT, 0)];\n         for r.iter().advance |&(mr_offset, m2_offset)| {\n-            for uint::range_step(0, midpoint, 4) |base| {\n+            for uint::range_step(0, MIDPOINT, 4) |base| {\n                 rngstep!(0, 13);\n                 rngstep!(1, -6);\n                 rngstep!(2, 2);"}, {"sha": "28162cf5117ca7f2a2d241ee69d13ff5b42eacfc", "filename": "src/libstd/str.rs", "status": "modified", "additions": 40, "deletions": 40, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=c437a16c5d8c00b39dc6c5e36011def997d77224", "patch": "@@ -602,7 +602,7 @@ pub fn is_utf8(v: &[u8]) -> bool {\n         if i + chsize > total { return false; }\n         i += 1u;\n         while chsize > 1u {\n-            if v[i] & 192u8 != tag_cont_u8 { return false; }\n+            if v[i] & 192u8 != TAG_CONT_U8 { return false; }\n             i += 1u;\n             chsize -= 1u;\n         }\n@@ -743,18 +743,18 @@ pub struct CharRange {\n }\n \n // UTF-8 tags and ranges\n-static tag_cont_u8: u8 = 128u8;\n-static tag_cont: uint = 128u;\n-static max_one_b: uint = 128u;\n-static tag_two_b: uint = 192u;\n-static max_two_b: uint = 2048u;\n-static tag_three_b: uint = 224u;\n-static max_three_b: uint = 65536u;\n-static tag_four_b: uint = 240u;\n-static max_four_b: uint = 2097152u;\n-static tag_five_b: uint = 248u;\n-static max_five_b: uint = 67108864u;\n-static tag_six_b: uint = 252u;\n+static TAG_CONT_U8: u8 = 128u8;\n+static TAG_CONT: uint = 128u;\n+static MAX_ONE_B: uint = 128u;\n+static TAG_TWO_B: uint = 192u;\n+static MAX_TWO_B: uint = 2048u;\n+static TAG_THREE_B: uint = 224u;\n+static MAX_THREE_B: uint = 65536u;\n+static TAG_FOUR_B: uint = 240u;\n+static MAX_FOUR_B: uint = 2097152u;\n+static TAG_FIVE_B: uint = 248u;\n+static MAX_FIVE_B: uint = 67108864u;\n+static TAG_SIX_B: uint = 252u;\n \n /**\n  * A dummy trait to hold all the utility methods that we implement on strings.\n@@ -1728,7 +1728,7 @@ impl<'self> StrSlice<'self> for &'self str {\n         let mut i = i + 1u;\n         while i < end {\n             let byte = self[i];\n-            assert_eq!(byte & 192u8, tag_cont_u8);\n+            assert_eq!(byte & 192u8, TAG_CONT_U8);\n             val <<= 6u;\n             val += (byte & 63u8) as uint;\n             i += 1u;\n@@ -1755,7 +1755,7 @@ impl<'self> StrSlice<'self> for &'self str {\n         let mut prev = start;\n \n         // while there is a previous byte == 10......\n-        while prev > 0u && self[prev - 1u] & 192u8 == tag_cont_u8 {\n+        while prev > 0u && self[prev - 1u] & 192u8 == TAG_CONT_U8 {\n             prev -= 1u;\n         }\n \n@@ -2071,11 +2071,11 @@ impl OwnedStr for ~str {\n     fn push_char(&mut self, c: char) {\n         unsafe {\n             let code = c as uint;\n-            let nb = if code < max_one_b { 1u }\n-            else if code < max_two_b { 2u }\n-            else if code < max_three_b { 3u }\n-            else if code < max_four_b { 4u }\n-            else if code < max_five_b { 5u }\n+            let nb = if code < MAX_ONE_B { 1u }\n+            else if code < MAX_TWO_B { 2u }\n+            else if code < MAX_THREE_B { 3u }\n+            else if code < MAX_FOUR_B { 4u }\n+            else if code < MAX_FIVE_B { 5u }\n             else { 6u };\n             let len = self.len();\n             let new_len = len + nb;\n@@ -2088,34 +2088,34 @@ impl OwnedStr for ~str {\n                         *ptr::mut_offset(buf, off) = code as u8;\n                     }\n                     2u => {\n-                        *ptr::mut_offset(buf, off) = (code >> 6u & 31u | tag_two_b) as u8;\n-                        *ptr::mut_offset(buf, off + 1u) = (code & 63u | tag_cont) as u8;\n+                        *ptr::mut_offset(buf, off) = (code >> 6u & 31u | TAG_TWO_B) as u8;\n+                        *ptr::mut_offset(buf, off + 1u) = (code & 63u | TAG_CONT) as u8;\n                     }\n                     3u => {\n-                        *ptr::mut_offset(buf, off) = (code >> 12u & 15u | tag_three_b) as u8;\n-                        *ptr::mut_offset(buf, off + 1u) = (code >> 6u & 63u | tag_cont) as u8;\n-                        *ptr::mut_offset(buf, off + 2u) = (code & 63u | tag_cont) as u8;\n+                        *ptr::mut_offset(buf, off) = (code >> 12u & 15u | TAG_THREE_B) as u8;\n+                        *ptr::mut_offset(buf, off + 1u) = (code >> 6u & 63u | TAG_CONT) as u8;\n+                        *ptr::mut_offset(buf, off + 2u) = (code & 63u | TAG_CONT) as u8;\n                     }\n                     4u => {\n-                        *ptr::mut_offset(buf, off) = (code >> 18u & 7u | tag_four_b) as u8;\n-                        *ptr::mut_offset(buf, off + 1u) = (code >> 12u & 63u | tag_cont) as u8;\n-                        *ptr::mut_offset(buf, off + 2u) = (code >> 6u & 63u | tag_cont) as u8;\n-                        *ptr::mut_offset(buf, off + 3u) = (code & 63u | tag_cont) as u8;\n+                        *ptr::mut_offset(buf, off) = (code >> 18u & 7u | TAG_FOUR_B) as u8;\n+                        *ptr::mut_offset(buf, off + 1u) = (code >> 12u & 63u | TAG_CONT) as u8;\n+                        *ptr::mut_offset(buf, off + 2u) = (code >> 6u & 63u | TAG_CONT) as u8;\n+                        *ptr::mut_offset(buf, off + 3u) = (code & 63u | TAG_CONT) as u8;\n                     }\n                     5u => {\n-                        *ptr::mut_offset(buf, off) = (code >> 24u & 3u | tag_five_b) as u8;\n-                        *ptr::mut_offset(buf, off + 1u) = (code >> 18u & 63u | tag_cont) as u8;\n-                        *ptr::mut_offset(buf, off + 2u) = (code >> 12u & 63u | tag_cont) as u8;\n-                        *ptr::mut_offset(buf, off + 3u) = (code >> 6u & 63u | tag_cont) as u8;\n-                        *ptr::mut_offset(buf, off + 4u) = (code & 63u | tag_cont) as u8;\n+                        *ptr::mut_offset(buf, off) = (code >> 24u & 3u | TAG_FIVE_B) as u8;\n+                        *ptr::mut_offset(buf, off + 1u) = (code >> 18u & 63u | TAG_CONT) as u8;\n+                        *ptr::mut_offset(buf, off + 2u) = (code >> 12u & 63u | TAG_CONT) as u8;\n+                        *ptr::mut_offset(buf, off + 3u) = (code >> 6u & 63u | TAG_CONT) as u8;\n+                        *ptr::mut_offset(buf, off + 4u) = (code & 63u | TAG_CONT) as u8;\n                     }\n                     6u => {\n-                        *ptr::mut_offset(buf, off) = (code >> 30u & 1u | tag_six_b) as u8;\n-                        *ptr::mut_offset(buf, off + 1u) = (code >> 24u & 63u | tag_cont) as u8;\n-                        *ptr::mut_offset(buf, off + 2u) = (code >> 18u & 63u | tag_cont) as u8;\n-                        *ptr::mut_offset(buf, off + 3u) = (code >> 12u & 63u | tag_cont) as u8;\n-                        *ptr::mut_offset(buf, off + 4u) = (code >> 6u & 63u | tag_cont) as u8;\n-                        *ptr::mut_offset(buf, off + 5u) = (code & 63u | tag_cont) as u8;\n+                        *ptr::mut_offset(buf, off) = (code >> 30u & 1u | TAG_SIX_B) as u8;\n+                        *ptr::mut_offset(buf, off + 1u) = (code >> 24u & 63u | TAG_CONT) as u8;\n+                        *ptr::mut_offset(buf, off + 2u) = (code >> 18u & 63u | TAG_CONT) as u8;\n+                        *ptr::mut_offset(buf, off + 3u) = (code >> 12u & 63u | TAG_CONT) as u8;\n+                        *ptr::mut_offset(buf, off + 4u) = (code >> 6u & 63u | TAG_CONT) as u8;\n+                        *ptr::mut_offset(buf, off + 5u) = (code & 63u | TAG_CONT) as u8;\n                     }\n                     _ => {}\n                 }"}, {"sha": "460c0a847c8bdb300b09f44cc5d2f580842f8fb5", "filename": "src/libstd/unicode.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibstd%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibstd%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funicode.rs?ref=c437a16c5d8c00b39dc6c5e36011def997d77224", "patch": "@@ -11,6 +11,7 @@\n // The following code was generated by \"src/etc/unicode.py\"\n \n #[allow(missing_doc)];\n+#[allow(non_uppercase_statics)];\n \n pub mod general_category {\n "}, {"sha": "b1df5175c920629ca1e83b11ac8cc22dd1632a80", "filename": "src/libstd/unstable/extfmt.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibstd%2Funstable%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibstd%2Funstable%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fextfmt.rs?ref=c437a16c5d8c00b39dc6c5e36011def997d77224", "patch": "@@ -472,6 +472,7 @@ pub mod ct {\n // conditions can be evaluated at compile-time. For now though it's cleaner to\n // implement it this way, I think.\n #[doc(hidden)]\n+#[allow(non_uppercase_statics)]\n pub mod rt {\n     use float;\n     use str;"}, {"sha": "94617b4e49f0487a50471f2742b20f519511dcf2", "filename": "src/libstd/unstable/lang.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibstd%2Funstable%2Flang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibstd%2Funstable%2Flang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Flang.rs?ref=c437a16c5d8c00b39dc6c5e36011def997d77224", "patch": "@@ -197,15 +197,15 @@ impl DebugPrints for io::fd_t {\n     fn write_hex(&self, mut i: uint) {\n         let letters = ['0', '1', '2', '3', '4', '5', '6', '7', '8',\n                        '9', 'a', 'b', 'c', 'd', 'e', 'f'];\n-        static uint_nibbles: uint = ::uint::bytes << 1;\n-        let mut buffer = [0_u8, ..uint_nibbles+1];\n-        let mut c = uint_nibbles;\n+        static UINT_NIBBLES: uint = ::uint::bytes << 1;\n+        let mut buffer = [0_u8, ..UINT_NIBBLES+1];\n+        let mut c = UINT_NIBBLES;\n         while c > 0 {\n             c -= 1;\n             buffer[c] = letters[i & 0xF] as u8;\n             i >>= 4;\n         }\n-        self.write(buffer.slice(0, uint_nibbles));\n+        self.write(buffer.slice(0, UINT_NIBBLES));\n     }\n \n     unsafe fn write_cstr(&self, p: *c_char) {"}, {"sha": "204028212d62177e0da20ef2eed2c4c356fa0071", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=c437a16c5d8c00b39dc6c5e36011def997d77224", "patch": "@@ -179,10 +179,10 @@ fn diagnosticstr(lvl: level) -> ~str {\n \n fn diagnosticcolor(lvl: level) -> term::color::Color {\n     match lvl {\n-        fatal => term::color::bright_red,\n-        error => term::color::bright_red,\n-        warning => term::color::bright_yellow,\n-        note => term::color::bright_green\n+        fatal => term::color::BRIGHT_RED,\n+        error => term::color::BRIGHT_RED,\n+        warning => term::color::BRIGHT_YELLOW,\n+        note => term::color::BRIGHT_GREEN\n     }\n }\n "}, {"sha": "a78a18810a8d5317dbb2b3a791d967605d787058", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=c437a16c5d8c00b39dc6c5e36011def997d77224", "patch": "@@ -580,6 +580,7 @@ pub fn core_macros() -> @str {\n             pub mod $c {\n                 fn key(_x: @::std::condition::Handler<$in,$out>) { }\n \n+                #[allow(non_uppercase_statics)]\n                 pub static cond :\n                     ::std::condition::Condition<'static,$in,$out> =\n                     ::std::condition::Condition {\n@@ -595,6 +596,7 @@ pub fn core_macros() -> @str {\n             pub mod $c {\n                 fn key(_x: @::std::condition::Handler<$in,$out>) { }\n \n+                #[allow(non_uppercase_statics)]\n                 pub static cond :\n                     ::std::condition::Condition<'static,$in,$out> =\n                     ::std::condition::Condition {"}, {"sha": "52ed49ea1ea403aab12e84af22f1abe06914fdc5", "filename": "src/libsyntax/syntax.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibsyntax%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Flibsyntax%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fsyntax.rs?ref=c437a16c5d8c00b39dc6c5e36011def997d77224", "patch": "@@ -21,6 +21,7 @@\n #[crate_type = \"lib\"];\n \n #[allow(non_camel_case_types)];\n+#[allow(non_uppercase_statics)];\n #[deny(deprecated_pattern)];\n \n extern mod extra;"}, {"sha": "4da4d3ada384eb20b2dfb1927a88eb451513d831", "filename": "src/test/compile-fail/lint-non-uppercase-statics.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Ftest%2Fcompile-fail%2Flint-non-uppercase-statics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Ftest%2Fcompile-fail%2Flint-non-uppercase-statics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-non-uppercase-statics.rs?ref=c437a16c5d8c00b39dc6c5e36011def997d77224", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[forbid(non_uppercase_statics)];\n+\n+static foo: int = 1; //~ ERROR static constant should have an uppercase identifier\n+\n+fn main() { }"}, {"sha": "019a4b88aedfd0b2983aa6a3643afd49cab610e0", "filename": "src/test/compile-fail/static-assert.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Ftest%2Fcompile-fail%2Fstatic-assert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Ftest%2Fcompile-fail%2Fstatic-assert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstatic-assert.rs?ref=c437a16c5d8c00b39dc6c5e36011def997d77224", "patch": "@@ -1,5 +1,5 @@\n #[static_assert]\n-static a: bool = false; //~ ERROR static assertion failed\n+static A: bool = false; //~ ERROR static assertion failed\n \n fn main() {\n }"}, {"sha": "42e475dac8b6718e35a650ad1a35432517ed2ee1", "filename": "src/test/compile-fail/static-assert2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Ftest%2Fcompile-fail%2Fstatic-assert2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Ftest%2Fcompile-fail%2Fstatic-assert2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstatic-assert2.rs?ref=c437a16c5d8c00b39dc6c5e36011def997d77224", "patch": "@@ -1,4 +1,4 @@\n #[static_assert]\n-static e: bool = 1 == 2; //~ ERROR static assertion failed\n+static E: bool = 1 == 2; //~ ERROR static assertion failed\n \n fn main() {}"}, {"sha": "8c1dc366f23284db89b46f7b742a5a1f562310b6", "filename": "src/test/run-pass/lint-non-camel-case-types-non-uppercase-statics-unicode.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Ftest%2Frun-pass%2Flint-non-camel-case-types-non-uppercase-statics-unicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Ftest%2Frun-pass%2Flint-non-camel-case-types-non-uppercase-statics-unicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flint-non-camel-case-types-non-uppercase-statics-unicode.rs?ref=c437a16c5d8c00b39dc6c5e36011def997d77224", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[forbid(non_camel_case_types)];\n+#[forbid(non_uppercase_statics)];\n+\n+// Some scripts (e.g. hiragana) don't have a concept of\n+// upper/lowercase\n+\n+struct \u30d2;\n+\n+static \u30e9: uint = 0;\n+\n+fn main() {}"}, {"sha": "3a3648fbf6d8342809122865b04803058e7d667b", "filename": "src/test/run-pass/lint-non-uppercase-statics-lowercase-mut-statics.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Ftest%2Frun-pass%2Flint-non-uppercase-statics-lowercase-mut-statics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c437a16c5d8c00b39dc6c5e36011def997d77224/src%2Ftest%2Frun-pass%2Flint-non-uppercase-statics-lowercase-mut-statics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flint-non-uppercase-statics-lowercase-mut-statics.rs?ref=c437a16c5d8c00b39dc6c5e36011def997d77224", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+#[forbid(non_camel_case_types)];\n+#[forbid(non_uppercase_statics)];\n+\n+static mut bar: int = 2;\n+\n+fn main() {}"}]}