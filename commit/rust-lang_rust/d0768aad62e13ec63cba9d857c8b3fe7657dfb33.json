{"sha": "d0768aad62e13ec63cba9d857c8b3fe7657dfb33", "node_id": "C_kwDOAAsO6NoAKGQwNzY4YWFkNjJlMTNlYzYzY2JhOWQ4NTdjOGIzZmU3NjU3ZGZiMzM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-18T01:53:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-18T01:53:30Z"}, "message": "Auto merge of #14812 - Veykril:highlight-trait-assoc, r=HKalbasi\n\nfeat: Highlight used trait assoc items when cursor is on trait import or trait bound", "tree": {"sha": "c24c65338b9ea0bb33f9e10bbf9318c80acbb274", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c24c65338b9ea0bb33f9e10bbf9318c80acbb274"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0768aad62e13ec63cba9d857c8b3fe7657dfb33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0768aad62e13ec63cba9d857c8b3fe7657dfb33", "html_url": "https://github.com/rust-lang/rust/commit/d0768aad62e13ec63cba9d857c8b3fe7657dfb33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0768aad62e13ec63cba9d857c8b3fe7657dfb33/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88d2125d2f084b605f7df7a4824784e70acfebcf", "url": "https://api.github.com/repos/rust-lang/rust/commits/88d2125d2f084b605f7df7a4824784e70acfebcf", "html_url": "https://github.com/rust-lang/rust/commit/88d2125d2f084b605f7df7a4824784e70acfebcf"}, {"sha": "b87ee914fa3f74e762fa3dd24bd1c903b9330abe", "url": "https://api.github.com/repos/rust-lang/rust/commits/b87ee914fa3f74e762fa3dd24bd1c903b9330abe", "html_url": "https://github.com/rust-lang/rust/commit/b87ee914fa3f74e762fa3dd24bd1c903b9330abe"}], "stats": {"total": 104, "additions": 101, "deletions": 3}, "files": [{"sha": "ff73d5ec9fcf4958ec7673948a3d427017d73ce8", "filename": "crates/ide/src/highlight_related.rs", "status": "modified", "additions": 101, "deletions": 3, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/d0768aad62e13ec63cba9d857c8b3fe7657dfb33/crates%2Fide%2Fsrc%2Fhighlight_related.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0768aad62e13ec63cba9d857c8b3fe7657dfb33/crates%2Fide%2Fsrc%2Fhighlight_related.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhighlight_related.rs?ref=d0768aad62e13ec63cba9d857c8b3fe7657dfb33", "patch": "@@ -4,7 +4,9 @@ use ide_db::{\n     defs::{Definition, IdentClass},\n     helpers::pick_best_token,\n     search::{FileReference, ReferenceCategory, SearchScope},\n-    syntax_helpers::node_ext::{for_each_break_and_continue_expr, for_each_tail_expr, walk_expr},\n+    syntax_helpers::node_ext::{\n+        for_each_break_and_continue_expr, for_each_tail_expr, full_path_of_name_ref, walk_expr,\n+    },\n     FxHashSet, RootDatabase,\n };\n use syntax::{\n@@ -39,11 +41,13 @@ pub struct HighlightRelatedConfig {\n // Highlights constructs related to the thing under the cursor:\n //\n // . if on an identifier, highlights all references to that identifier in the current file\n+// .. additionally, if the identifier is a trait in a where clause, type parameter trait bound or use item, highlights all references to that trait's assoc items in the corresponding scope\n // . if on an `async` or `await token, highlights all yield points for that async context\n // . if on a `return` or `fn` keyword, `?` character or `->` return type arrow, highlights all exit points for that context\n // . if on a `break`, `loop`, `while` or `for` token, highlights all break points for that loop or block context\n+// . if on a `move` or `|` token that belongs to a closure, highlights all captures of the closure.\n //\n-// Note: `?` and `->` do not currently trigger this behavior in the VSCode editor.\n+// Note: `?`, `|` and `->` do not currently trigger this behavior in the VSCode editor.\n pub(crate) fn highlight_related(\n     sema: &Semantics<'_, RootDatabase>,\n     config: HighlightRelatedConfig,\n@@ -130,7 +134,7 @@ fn highlight_references(\n     token: SyntaxToken,\n     file_id: FileId,\n ) -> Option<Vec<HighlightedRange>> {\n-    let defs = find_defs(sema, token);\n+    let defs = find_defs(sema, token.clone());\n     let usages = defs\n         .iter()\n         .filter_map(|&d| {\n@@ -145,6 +149,59 @@ fn highlight_references(\n         .map(|FileReference { category, range, .. }| HighlightedRange { range, category });\n     let mut res = FxHashSet::default();\n     for &def in &defs {\n+        // highlight trait usages\n+        if let Definition::Trait(t) = def {\n+            let trait_item_use_scope = (|| {\n+                let name_ref = token.parent().and_then(ast::NameRef::cast)?;\n+                let path = full_path_of_name_ref(&name_ref)?;\n+                let parent = path.syntax().parent()?;\n+                match_ast! {\n+                    match parent {\n+                        ast::UseTree(it) => it.syntax().ancestors().find(|it| {\n+                            ast::SourceFile::can_cast(it.kind()) || ast::Module::can_cast(it.kind())\n+                        }),\n+                        ast::PathType(it) => it\n+                            .syntax()\n+                            .ancestors()\n+                            .nth(2)\n+                            .and_then(ast::TypeBoundList::cast)?\n+                            .syntax()\n+                            .parent()\n+                            .filter(|it| ast::WhereClause::can_cast(it.kind()) || ast::TypeParam::can_cast(it.kind()))?\n+                            .ancestors()\n+                            .find(|it| {\n+                                ast::Item::can_cast(it.kind())\n+                            }),\n+                        _ => None,\n+                    }\n+                }\n+            })();\n+            if let Some(trait_item_use_scope) = trait_item_use_scope {\n+                res.extend(\n+                    t.items_with_supertraits(sema.db)\n+                        .into_iter()\n+                        .filter_map(|item| {\n+                            Definition::from(item)\n+                                .usages(sema)\n+                                .set_scope(Some(SearchScope::file_range(FileRange {\n+                                    file_id,\n+                                    range: trait_item_use_scope.text_range(),\n+                                })))\n+                                .include_self_refs()\n+                                .all()\n+                                .references\n+                                .remove(&file_id)\n+                        })\n+                        .flatten()\n+                        .map(|FileReference { category, range, .. }| HighlightedRange {\n+                            range,\n+                            category,\n+                        }),\n+                );\n+            }\n+        }\n+\n+        // highlight the defs themselves\n         match def {\n             Definition::Local(local) => {\n                 let category = local.is_mut(sema.db).then_some(ReferenceCategory::Write);\n@@ -1477,6 +1534,47 @@ fn f() {\n     let c = move$0 |y| x + y;\n     //               ^ read\n }\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_trait_highlights_assoc_item_uses() {\n+        check(\n+            r#\"\n+trait Foo {\n+    //^^^\n+    type T;\n+    const C: usize;\n+    fn f() {}\n+    fn m(&self) {}\n+}\n+impl Foo for i32 {\n+   //^^^\n+    type T = i32;\n+    const C: usize = 0;\n+    fn f() {}\n+    fn m(&self) {}\n+}\n+fn f<T: Foo$0>(t: T) {\n+      //^^^\n+    let _: T::T;\n+            //^\n+    t.m();\n+    //^\n+    T::C;\n+     //^\n+    T::f();\n+     //^\n+}\n+\n+fn f2<T: Foo>(t: T) {\n+       //^^^\n+    let _: T::T;\n+    t.m();\n+    T::C;\n+    T::f();\n+}\n \"#,\n         );\n     }"}]}