{"sha": "46f2f023b0d02502a5a9b64b23247207b2279bfe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2ZjJmMDIzYjBkMDI1MDJhNWE5YjY0YjIzMjQ3MjA3YjIyNzliZmU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-10-09T17:35:17Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-10-09T17:35:17Z"}, "message": "Move supported_target_features query provider to cg_ssa", "tree": {"sha": "c9a2455d94d738dbd5cf09571346421bedd00f6c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9a2455d94d738dbd5cf09571346421bedd00f6c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46f2f023b0d02502a5a9b64b23247207b2279bfe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46f2f023b0d02502a5a9b64b23247207b2279bfe", "html_url": "https://github.com/rust-lang/rust/commit/46f2f023b0d02502a5a9b64b23247207b2279bfe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46f2f023b0d02502a5a9b64b23247207b2279bfe/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53a4c3b0baed8fb224e19380c576c86c12c38d8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/53a4c3b0baed8fb224e19380c576c86c12c38d8c", "html_url": "https://github.com/rust-lang/rust/commit/53a4c3b0baed8fb224e19380c576c86c12c38d8c"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "b146d76d6662bebbf5475395151326876a04c170", "filename": "compiler/rustc_codegen_llvm/src/attributes.rs", "status": "modified", "additions": 2, "deletions": 18, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/46f2f023b0d02502a5a9b64b23247207b2279bfe/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46f2f023b0d02502a5a9b64b23247207b2279bfe/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs?ref=46f2f023b0d02502a5a9b64b23247207b2279bfe", "patch": "@@ -6,7 +6,7 @@ use rustc_codegen_ssa::traits::*;\n use rustc_data_structures::const_cstr;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::small_c_str::SmallCStr;\n-use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc_hir::def_id::DefId;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::ty::layout::HasTyCtxt;\n use rustc_middle::ty::query::Providers;\n@@ -352,23 +352,7 @@ pub fn from_fn_attrs(cx: &CodegenCx<'ll, 'tcx>, llfn: &'ll Value, instance: ty::\n     }\n }\n \n-pub fn provide(providers: &mut Providers) {\n-    use rustc_codegen_ssa::target_features::{all_known_features, supported_target_features};\n-    providers.supported_target_features = |tcx, cnum| {\n-        assert_eq!(cnum, LOCAL_CRATE);\n-        if tcx.sess.opts.actually_rustdoc {\n-            // rustdoc needs to be able to document functions that use all the features, so\n-            // provide them all.\n-            all_known_features().map(|(a, b)| (a.to_string(), b)).collect()\n-        } else {\n-            supported_target_features(tcx.sess).iter().map(|&(a, b)| (a.to_string(), b)).collect()\n-        }\n-    };\n-\n-    provide_extern(providers);\n-}\n-\n-pub fn provide_extern(providers: &mut Providers) {\n+pub fn provide_both(providers: &mut Providers) {\n     providers.wasm_import_module_map = |tcx, cnum| {\n         // Build up a map from DefId to a `NativeLib` structure, where\n         // `NativeLib` internally contains information about"}, {"sha": "e15248d8432850014869560276c911444addbccb", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46f2f023b0d02502a5a9b64b23247207b2279bfe/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46f2f023b0d02502a5a9b64b23247207b2279bfe/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=46f2f023b0d02502a5a9b64b23247207b2279bfe", "patch": "@@ -249,11 +249,11 @@ impl CodegenBackend for LlvmCodegenBackend {\n     }\n \n     fn provide(&self, providers: &mut ty::query::Providers) {\n-        attributes::provide(providers);\n+        attributes::provide_both(providers);\n     }\n \n     fn provide_extern(&self, providers: &mut ty::query::Providers) {\n-        attributes::provide_extern(providers);\n+        attributes::provide_both(providers);\n     }\n \n     fn codegen_crate<'tcx>("}, {"sha": "851b6628758a621888aae0f96f0a881dc61aa8b3", "filename": "compiler/rustc_codegen_ssa/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/46f2f023b0d02502a5a9b64b23247207b2279bfe/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46f2f023b0d02502a5a9b64b23247207b2279bfe/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs?ref=46f2f023b0d02502a5a9b64b23247207b2279bfe", "patch": "@@ -144,6 +144,7 @@ pub struct CodegenResults {\n pub fn provide(providers: &mut Providers) {\n     crate::back::symbol_export::provide(providers);\n     crate::base::provide_both(providers);\n+    crate::target_features::provide(providers);\n }\n \n pub fn provide_extern(providers: &mut Providers) {"}, {"sha": "24cd27cf3cf89198a6f8bbd95312c6ae85392772", "filename": "compiler/rustc_codegen_ssa/src/target_features.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/46f2f023b0d02502a5a9b64b23247207b2279bfe/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46f2f023b0d02502a5a9b64b23247207b2279bfe/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs?ref=46f2f023b0d02502a5a9b64b23247207b2279bfe", "patch": "@@ -1,3 +1,5 @@\n+use rustc_hir::def_id::LOCAL_CRATE;\n+use rustc_middle::ty::query::Providers;\n use rustc_session::Session;\n use rustc_span::symbol::sym;\n use rustc_span::symbol::Symbol;\n@@ -148,3 +150,16 @@ pub fn supported_target_features(sess: &Session) -> &'static [(&'static str, Opt\n         _ => &[],\n     }\n }\n+\n+pub(crate) fn provide(providers: &mut Providers) {\n+    providers.supported_target_features = |tcx, cnum| {\n+        assert_eq!(cnum, LOCAL_CRATE);\n+        if tcx.sess.opts.actually_rustdoc {\n+            // rustdoc needs to be able to document functions that use all the features, so\n+            // whitelist them all\n+            all_known_features().map(|(a, b)| (a.to_string(), b)).collect()\n+        } else {\n+            supported_target_features(tcx.sess).iter().map(|&(a, b)| (a.to_string(), b)).collect()\n+        }\n+    };\n+}"}]}