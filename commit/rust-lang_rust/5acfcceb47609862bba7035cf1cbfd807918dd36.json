{"sha": "5acfcceb47609862bba7035cf1cbfd807918dd36", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhY2ZjY2ViNDc2MDk4NjJiYmE3MDM1Y2YxY2JmZDgwNzkxOGRkMzY=", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2020-09-17T14:40:02Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2020-09-18T02:49:02Z"}, "message": "Dogfood new_uninit and maybe_uninit_slice in rustc_arena", "tree": {"sha": "0ca3d389a077594bece3250cf63f59f26d412194", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ca3d389a077594bece3250cf63f59f26d412194"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5acfcceb47609862bba7035cf1cbfd807918dd36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5acfcceb47609862bba7035cf1cbfd807918dd36", "html_url": "https://github.com/rust-lang/rust/commit/5acfcceb47609862bba7035cf1cbfd807918dd36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5acfcceb47609862bba7035cf1cbfd807918dd36/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "285fc7d704fcdd7b2a37d475d04d5d955490e000", "url": "https://api.github.com/repos/rust-lang/rust/commits/285fc7d704fcdd7b2a37d475d04d5d955490e000", "html_url": "https://github.com/rust-lang/rust/commit/285fc7d704fcdd7b2a37d475d04d5d955490e000"}], "stats": {"total": 35, "additions": 16, "deletions": 19}, "files": [{"sha": "2edf822cdb198d4272a9f23dccdfc1ca591d66f1", "filename": "compiler/rustc_arena/src/lib.rs", "status": "modified", "additions": 16, "deletions": 19, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/5acfcceb47609862bba7035cf1cbfd807918dd36/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5acfcceb47609862bba7035cf1cbfd807918dd36/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_arena%2Fsrc%2Flib.rs?ref=5acfcceb47609862bba7035cf1cbfd807918dd36", "patch": "@@ -13,12 +13,11 @@\n )]\n #![feature(core_intrinsics)]\n #![feature(dropck_eyepatch)]\n-#![feature(raw_vec_internals)]\n+#![feature(new_uninit)]\n+#![feature(maybe_uninit_slice)]\n #![cfg_attr(test, feature(test))]\n #![allow(deprecated)]\n \n-extern crate alloc;\n-\n use rustc_data_structures::cold_path;\n use smallvec::SmallVec;\n \n@@ -27,12 +26,10 @@ use std::cell::{Cell, RefCell};\n use std::cmp;\n use std::intrinsics;\n use std::marker::{PhantomData, Send};\n-use std::mem;\n+use std::mem::{self, MaybeUninit};\n use std::ptr;\n use std::slice;\n \n-use alloc::raw_vec::RawVec;\n-\n /// An arena that can hold objects of only one type.\n pub struct TypedArena<T> {\n     /// A pointer to the next object to be allocated.\n@@ -52,15 +49,15 @@ pub struct TypedArena<T> {\n \n struct TypedArenaChunk<T> {\n     /// The raw storage for the arena chunk.\n-    storage: RawVec<T>,\n+    storage: Box<[MaybeUninit<T>]>,\n     /// The number of valid entries in the chunk.\n     entries: usize,\n }\n \n impl<T> TypedArenaChunk<T> {\n     #[inline]\n     unsafe fn new(capacity: usize) -> TypedArenaChunk<T> {\n-        TypedArenaChunk { storage: RawVec::with_capacity(capacity), entries: 0 }\n+        TypedArenaChunk { storage: Box::new_uninit_slice(capacity), entries: 0 }\n     }\n \n     /// Destroys this arena chunk.\n@@ -80,19 +77,19 @@ impl<T> TypedArenaChunk<T> {\n \n     // Returns a pointer to the first allocated object.\n     #[inline]\n-    fn start(&self) -> *mut T {\n-        self.storage.ptr()\n+    fn start(&mut self) -> *mut T {\n+        MaybeUninit::slice_as_mut_ptr(&mut self.storage)\n     }\n \n     // Returns a pointer to the end of the allocated space.\n     #[inline]\n-    fn end(&self) -> *mut T {\n+    fn end(&mut self) -> *mut T {\n         unsafe {\n             if mem::size_of::<T>() == 0 {\n                 // A pointer as large as possible for zero-sized elements.\n                 !0 as *mut T\n             } else {\n-                self.start().add(self.storage.capacity())\n+                self.start().add(self.storage.len())\n             }\n         }\n     }\n@@ -226,10 +223,10 @@ impl<T> TypedArena<T> {\n                 let used_bytes = self.ptr.get() as usize - last_chunk.start() as usize;\n                 last_chunk.entries = used_bytes / mem::size_of::<T>();\n \n-                // If the previous chunk's capacity is less than HUGE_PAGE\n+                // If the previous chunk's len is less than HUGE_PAGE\n                 // bytes, then this chunk will be least double the previous\n                 // chunk's size.\n-                new_cap = last_chunk.storage.capacity();\n+                new_cap = last_chunk.storage.len();\n                 if new_cap < HUGE_PAGE / elem_size {\n                     new_cap = new_cap.checked_mul(2).unwrap();\n                 }\n@@ -239,7 +236,7 @@ impl<T> TypedArena<T> {\n             // Also ensure that this chunk can fit `additional`.\n             new_cap = cmp::max(additional, new_cap);\n \n-            let chunk = TypedArenaChunk::<T>::new(new_cap);\n+            let mut chunk = TypedArenaChunk::<T>::new(new_cap);\n             self.ptr.set(chunk.start());\n             self.end.set(chunk.end());\n             chunks.push(chunk);\n@@ -301,7 +298,7 @@ unsafe impl<#[may_dangle] T> Drop for TypedArena<T> {\n                     chunk.destroy(chunk.entries);\n                 }\n             }\n-            // RawVec handles deallocation of `last_chunk` and `self.chunks`.\n+            // Box handles deallocation of `last_chunk` and `self.chunks`.\n         }\n     }\n }\n@@ -344,10 +341,10 @@ impl DroplessArena {\n                 // There is no need to update `last_chunk.entries` because that\n                 // field isn't used by `DroplessArena`.\n \n-                // If the previous chunk's capacity is less than HUGE_PAGE\n+                // If the previous chunk's len is less than HUGE_PAGE\n                 // bytes, then this chunk will be least double the previous\n                 // chunk's size.\n-                new_cap = last_chunk.storage.capacity();\n+                new_cap = last_chunk.storage.len();\n                 if new_cap < HUGE_PAGE {\n                     new_cap = new_cap.checked_mul(2).unwrap();\n                 }\n@@ -357,7 +354,7 @@ impl DroplessArena {\n             // Also ensure that this chunk can fit `additional`.\n             new_cap = cmp::max(additional, new_cap);\n \n-            let chunk = TypedArenaChunk::<u8>::new(new_cap);\n+            let mut chunk = TypedArenaChunk::<u8>::new(new_cap);\n             self.ptr.set(chunk.start());\n             self.end.set(chunk.end());\n             chunks.push(chunk);"}]}