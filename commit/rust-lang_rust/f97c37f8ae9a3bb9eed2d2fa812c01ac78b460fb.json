{"sha": "f97c37f8ae9a3bb9eed2d2fa812c01ac78b460fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5N2MzN2Y4YWU5YTNiYjllZWQyZDJmYTgxMmMwMWFjNzhiNDYwZmI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-13T14:52:51Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-13T14:52:51Z"}, "message": "coerce_inner: use initial expected_ty", "tree": {"sha": "4117acb43a727ac307b9b2b59df2257deeacc01e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4117acb43a727ac307b9b2b59df2257deeacc01e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f97c37f8ae9a3bb9eed2d2fa812c01ac78b460fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f97c37f8ae9a3bb9eed2d2fa812c01ac78b460fb", "html_url": "https://github.com/rust-lang/rust/commit/f97c37f8ae9a3bb9eed2d2fa812c01ac78b460fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f97c37f8ae9a3bb9eed2d2fa812c01ac78b460fb/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3964a55ba59bb6c3d4badcbddc49f6929ef76862", "url": "https://api.github.com/repos/rust-lang/rust/commits/3964a55ba59bb6c3d4badcbddc49f6929ef76862", "html_url": "https://github.com/rust-lang/rust/commit/3964a55ba59bb6c3d4badcbddc49f6929ef76862"}], "stats": {"total": 65, "additions": 63, "deletions": 2}, "files": [{"sha": "726b3ba985778c2b2b08917c0a7ad3e09d20458a", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f97c37f8ae9a3bb9eed2d2fa812c01ac78b460fb/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f97c37f8ae9a3bb9eed2d2fa812c01ac78b460fb/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=f97c37f8ae9a3bb9eed2d2fa812c01ac78b460fb", "patch": "@@ -1289,8 +1289,20 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                 }\n \n                 // Error possibly reported in `check_assign` so avoid emitting error again.\n-                err.emit_unless(expression.filter(|e| fcx.is_assign_to_bool(e, expected))\n-                    .is_some());\n+                let assign_to_bool = expression\n+                    // #67273: Use initial expected type as opposed to `expected`.\n+                    // Otherwise we end up using prior coercions in e.g. a `match` expression:\n+                    // ```\n+                    // match i {\n+                    //     0 => true, // Because of this...\n+                    //     1 => i = 1, // ...`expected == bool` now, but not when checking `i = 1`.\n+                    //     _ => (),\n+                    // };\n+                    // ```\n+                    .filter(|e| fcx.is_assign_to_bool(e, self.expected_ty()))\n+                    .is_some();\n+\n+                err.emit_unless(assign_to_bool);\n \n                 self.final_ty = Some(fcx.tcx.types.err);\n             }"}, {"sha": "e23c0d0a40a7e66916fdfdccc3436ac776a0a7a8", "filename": "src/test/ui/type/type-check/issue-67273-assignment-match-prior-arm-bool-expected-unit.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f97c37f8ae9a3bb9eed2d2fa812c01ac78b460fb/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-67273-assignment-match-prior-arm-bool-expected-unit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f97c37f8ae9a3bb9eed2d2fa812c01ac78b460fb/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-67273-assignment-match-prior-arm-bool-expected-unit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-67273-assignment-match-prior-arm-bool-expected-unit.rs?ref=f97c37f8ae9a3bb9eed2d2fa812c01ac78b460fb", "patch": "@@ -0,0 +1,27 @@\n+fn main() {\n+    let mut i: i64;\n+    // Expected type is an inference variable `?T`\n+    // because the `match` is used as a statement.\n+    // This is the \"initial\" type of the `coercion`.\n+    match i {\n+        // Add `bool` to the overall `coercion`.\n+        0 => true,\n+\n+        // Necessary to cause the ICE:\n+        1 => true,\n+\n+        // Suppose that we had `let _: bool = match i { ... }`.\n+        // In that case, as the expected type would be `bool`,\n+        // we would suggest `i == 1` as a fix.\n+        //\n+        // However, no type error happens when checking `i = 1` because `expected == ?T`,\n+        // which will unify with `typeof(i = 1) == ()`.\n+        //\n+        // However, in #67273, we would delay the unification of this arm with the above\n+        // because we used the hitherto accumulated coercion as opposed to the \"initial\" type.\n+        2 => i = 1,\n+        //~^ ERROR match arms have incompatible types\n+\n+        _ => (),\n+    }\n+}"}, {"sha": "3547285542a9f8eeb91a84ac274e8725d8edaba3", "filename": "src/test/ui/type/type-check/issue-67273-assignment-match-prior-arm-bool-expected-unit.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f97c37f8ae9a3bb9eed2d2fa812c01ac78b460fb/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-67273-assignment-match-prior-arm-bool-expected-unit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f97c37f8ae9a3bb9eed2d2fa812c01ac78b460fb/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-67273-assignment-match-prior-arm-bool-expected-unit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-67273-assignment-match-prior-arm-bool-expected-unit.stderr?ref=f97c37f8ae9a3bb9eed2d2fa812c01ac78b460fb", "patch": "@@ -0,0 +1,22 @@\n+error[E0308]: match arms have incompatible types\n+  --> $DIR/issue-67273-assignment-match-prior-arm-bool-expected-unit.rs:22:14\n+   |\n+LL | /     match i {\n+LL | |         // Add `bool` to the overall `coercion`.\n+LL | |         0 => true,\n+   | |              ---- this is found to be of type `bool`\n+LL | |\n+LL | |         // Necessary to cause the ICE:\n+LL | |         1 => true,\n+   | |              ---- this is found to be of type `bool`\n+...  |\n+LL | |         2 => i = 1,\n+   | |              ^^^^^ expected `bool`, found `()`\n+...  |\n+LL | |         _ => (),\n+LL | |     }\n+   | |_____- `match` arms have incompatible types\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}