{"sha": "85b82c763bfbfd5de59f4c6b026dca58f3ba4687", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1YjgyYzc2M2JmYmZkNWRlNTlmNGM2YjAyNmRjYTU4ZjNiYTQ2ODc=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-03-30T14:34:37Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-04-12T07:10:26Z"}, "message": "libcore: combine cmp::Ordering instances in lexical order.", "tree": {"sha": "db7757ea51bc09e0dcefa9e1af77b97cf26c306a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db7757ea51bc09e0dcefa9e1af77b97cf26c306a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85b82c763bfbfd5de59f4c6b026dca58f3ba4687", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85b82c763bfbfd5de59f4c6b026dca58f3ba4687", "html_url": "https://github.com/rust-lang/rust/commit/85b82c763bfbfd5de59f4c6b026dca58f3ba4687", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85b82c763bfbfd5de59f4c6b026dca58f3ba4687/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3698ea7e54c46cfde377f95782710ee5e19876d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/3698ea7e54c46cfde377f95782710ee5e19876d3", "html_url": "https://github.com/rust-lang/rust/commit/3698ea7e54c46cfde377f95782710ee5e19876d3"}], "stats": {"total": 27, "additions": 27, "deletions": 0}, "files": [{"sha": "2c2b7f40f318f3913fb114804422238b0d6fef4d", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/85b82c763bfbfd5de59f4c6b026dca58f3ba4687/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85b82c763bfbfd5de59f4c6b026dca58f3ba4687/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=85b82c763bfbfd5de59f4c6b026dca58f3ba4687", "patch": "@@ -116,6 +116,19 @@ totalord_impl!(i64)\n totalord_impl!(int)\n totalord_impl!(uint)\n \n+/**\n+Return `o1` if it is not `Equal`, otherwise `o2`. Simulates the\n+lexical ordering on a type `(int, int)`.\n+*/\n+// used in deriving code in libsyntax\n+#[inline(always)]\n+pub fn lexical_ordering(o1: Ordering, o2: Ordering) -> Ordering {\n+    match o1 {\n+        Equal => o2,\n+        _ => o1\n+    }\n+}\n+\n /**\n * Trait for values that can be compared for a sort-order.\n *\n@@ -184,6 +197,8 @@ pub fn max<T:Ord>(v1: T, v2: T) -> T {\n \n #[cfg(test)]\n mod test {\n+    use super::lexical_ordering;\n+\n     #[test]\n     fn test_int_totalord() {\n         assert_eq!(5.cmp(&10), Less);\n@@ -204,4 +219,16 @@ mod test {\n         assert!(Less < Equal);\n         assert_eq!(Greater.cmp(&Less), Greater);\n     }\n+\n+    #[test]\n+    fn test_lexical_ordering() {\n+        fn t(o1: Ordering, o2: Ordering, e: Ordering) {\n+            assert_eq!(lexical_ordering(o1, o2), e);\n+        }\n+        for [Less, Equal, Greater].each |&o| {\n+            t(Less, o, Less);\n+            t(Equal, o, o);\n+            t(Greater, o, Greater);\n+         }\n+    }\n }"}]}