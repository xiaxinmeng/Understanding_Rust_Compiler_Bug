{"sha": "edd9bad4eeb1367464e190d63113600fca0ef25a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkZDliYWQ0ZWViMTM2NzQ2NGUxOTBkNjMxMTM2MDBmY2EwZWYyNWE=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-05-04T13:35:48Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-05-05T08:20:41Z"}, "message": "std::comm: use Unsafe to avoid U.B. & -> &mut transmutes.", "tree": {"sha": "0fc6da62c79eeb46c4e322206a547a6a49c5dd6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0fc6da62c79eeb46c4e322206a547a6a49c5dd6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/edd9bad4eeb1367464e190d63113600fca0ef25a", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/edd9bad4eeb1367464e190d63113600fca0ef25a", "html_url": "https://github.com/rust-lang/rust/commit/edd9bad4eeb1367464e190d63113600fca0ef25a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/edd9bad4eeb1367464e190d63113600fca0ef25a/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "781ac3e777a5f47bdfaba05ee17f8b79845670b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/781ac3e777a5f47bdfaba05ee17f8b79845670b1", "html_url": "https://github.com/rust-lang/rust/commit/781ac3e777a5f47bdfaba05ee17f8b79845670b1"}], "stats": {"total": 83, "additions": 49, "deletions": 34}, "files": [{"sha": "c78498924656c5fa5b0b1910464cdc347ccd37ee", "filename": "src/libstd/comm/mod.rs", "status": "modified", "additions": 49, "deletions": 34, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/edd9bad4eeb1367464e190d63113600fca0ef25a/src%2Flibstd%2Fcomm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edd9bad4eeb1367464e190d63113600fca0ef25a/src%2Flibstd%2Fcomm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm%2Fmod.rs?ref=edd9bad4eeb1367464e190d63113600fca0ef25a", "patch": "@@ -271,7 +271,6 @@\n // And now that you've seen all the races that I found and attempted to fix,\n // here's the code for you to find some more!\n \n-use cast;\n use cell::Cell;\n use clone::Clone;\n use iter::Iterator;\n@@ -284,6 +283,7 @@ use result::{Ok, Err, Result};\n use rt::local::Local;\n use rt::task::{Task, BlockedTask};\n use sync::arc::UnsafeArc;\n+use ty::Unsafe;\n \n pub use comm::select::{Select, Handle};\n \n@@ -318,19 +318,14 @@ mod stream;\n mod shared;\n mod sync;\n \n-// FIXME #13933: Remove/justify all `&T` to `&mut T` transmutes\n-unsafe fn transmute_mut<'a,T>(x: &'a T) -> &'a mut T {\n-    cast::transmute::<&_, &mut _>(x)\n-}\n-\n // Use a power of 2 to allow LLVM to optimize to something that's not a\n // division, this is hit pretty regularly.\n static RESCHED_FREQ: int = 256;\n \n /// The receiving-half of Rust's channel type. This half can only be owned by\n /// one task\n pub struct Receiver<T> {\n-    inner: Flavor<T>,\n+    inner: Unsafe<Flavor<T>>,\n     receives: Cell<uint>,\n     // can't share in an arc\n     marker: marker::NoShare,\n@@ -346,7 +341,7 @@ pub struct Messages<'a, T> {\n /// The sending-half of Rust's asynchronous channel type. This half can only be\n /// owned by one task, but it can be cloned to send to other tasks.\n pub struct Sender<T> {\n-    inner: Flavor<T>,\n+    inner: Unsafe<Flavor<T>>,\n     sends: Cell<uint>,\n     // can't share in an arc\n     marker: marker::NoShare,\n@@ -395,6 +390,27 @@ enum Flavor<T> {\n     Sync(UnsafeArc<sync::Packet<T>>),\n }\n \n+#[doc(hidden)]\n+trait UnsafeFlavor<T> {\n+    fn inner_unsafe<'a>(&'a self) -> &'a Unsafe<Flavor<T>>;\n+    unsafe fn mut_inner<'a>(&'a self) -> &'a mut Flavor<T> {\n+        &mut *self.inner_unsafe().get()\n+    }\n+    unsafe fn inner<'a>(&'a self) -> &'a Flavor<T> {\n+        &*self.inner_unsafe().get()\n+    }\n+}\n+impl<T> UnsafeFlavor<T> for Sender<T> {\n+    fn inner_unsafe<'a>(&'a self) -> &'a Unsafe<Flavor<T>> {\n+        &self.inner\n+    }\n+}\n+impl<T> UnsafeFlavor<T> for Receiver<T> {\n+    fn inner_unsafe<'a>(&'a self) -> &'a Unsafe<Flavor<T>> {\n+        &self.inner\n+    }\n+}\n+\n /// Creates a new asynchronous channel, returning the sender/receiver halves.\n ///\n /// All data sent on the sender will become available on the receiver, and no\n@@ -463,7 +479,7 @@ pub fn sync_channel<T: Send>(bound: uint) -> (SyncSender<T>, Receiver<T>) {\n \n impl<T: Send> Sender<T> {\n     fn new(inner: Flavor<T>) -> Sender<T> {\n-        Sender { inner: inner, sends: Cell::new(0), marker: marker::NoShare }\n+        Sender { inner: Unsafe::new(inner), sends: Cell::new(0), marker: marker::NoShare }\n     }\n \n     /// Sends a value along this channel to be received by the corresponding\n@@ -537,7 +553,7 @@ impl<T: Send> Sender<T> {\n             task.map(|t| t.maybe_yield());\n         }\n \n-        let (new_inner, ret) = match self.inner {\n+        let (new_inner, ret) = match *unsafe { self.inner() } {\n             Oneshot(ref p) => {\n                 let p = p.get();\n                 unsafe {\n@@ -569,16 +585,16 @@ impl<T: Send> Sender<T> {\n         };\n \n         unsafe {\n-            let mut tmp = Sender::new(Stream(new_inner));\n-            mem::swap(&mut transmute_mut(self).inner, &mut tmp.inner);\n+            let tmp = Sender::new(Stream(new_inner));\n+            mem::swap(self.mut_inner(), tmp.mut_inner());\n         }\n         return ret;\n     }\n }\n \n impl<T: Send> Clone for Sender<T> {\n     fn clone(&self) -> Sender<T> {\n-        let (packet, sleeper) = match self.inner {\n+        let (packet, sleeper) = match *unsafe { self.inner() } {\n             Oneshot(ref p) => {\n                 let (a, b) = UnsafeArc::new2(shared::Packet::new());\n                 match unsafe { (*p.get()).upgrade(Receiver::new(Shared(a))) } {\n@@ -603,8 +619,8 @@ impl<T: Send> Clone for Sender<T> {\n         unsafe {\n             (*packet.get()).inherit_blocker(sleeper);\n \n-            let mut tmp = Sender::new(Shared(packet.clone()));\n-            mem::swap(&mut transmute_mut(self).inner, &mut tmp.inner);\n+            let tmp = Sender::new(Shared(packet.clone()));\n+            mem::swap(self.mut_inner(), tmp.mut_inner());\n         }\n         Sender::new(Shared(packet))\n     }\n@@ -613,7 +629,7 @@ impl<T: Send> Clone for Sender<T> {\n #[unsafe_destructor]\n impl<T: Send> Drop for Sender<T> {\n     fn drop(&mut self) {\n-        match self.inner {\n+        match *unsafe { self.mut_inner() } {\n             Oneshot(ref mut p) => unsafe { (*p.get()).drop_chan(); },\n             Stream(ref mut p) => unsafe { (*p.get()).drop_chan(); },\n             Shared(ref mut p) => unsafe { (*p.get()).drop_chan(); },\n@@ -710,7 +726,7 @@ impl<T: Send> Drop for SyncSender<T> {\n \n impl<T: Send> Receiver<T> {\n     fn new(inner: Flavor<T>) -> Receiver<T> {\n-        Receiver { inner: inner, receives: Cell::new(0), marker: marker::NoShare }\n+        Receiver { inner: Unsafe::new(inner), receives: Cell::new(0), marker: marker::NoShare }\n     }\n \n     /// Blocks waiting for a value on this receiver\n@@ -762,7 +778,7 @@ impl<T: Send> Receiver<T> {\n         }\n \n         loop {\n-            let mut new_port = match self.inner {\n+            let new_port = match *unsafe { self.inner() } {\n                 Oneshot(ref p) => {\n                     match unsafe { (*p.get()).try_recv() } {\n                         Ok(t) => return Ok(t),\n@@ -795,8 +811,8 @@ impl<T: Send> Receiver<T> {\n                 }\n             };\n             unsafe {\n-                mem::swap(&mut transmute_mut(self).inner,\n-                          &mut new_port.inner);\n+                mem::swap(self.mut_inner(),\n+                          new_port.mut_inner());\n             }\n         }\n     }\n@@ -815,7 +831,7 @@ impl<T: Send> Receiver<T> {\n     /// the value found on the receiver is returned.\n     pub fn recv_opt(&self) -> Result<T, ()> {\n         loop {\n-            let mut new_port = match self.inner {\n+            let new_port = match *unsafe { self.inner() } {\n                 Oneshot(ref p) => {\n                     match unsafe { (*p.get()).recv() } {\n                         Ok(t) => return Ok(t),\n@@ -842,8 +858,7 @@ impl<T: Send> Receiver<T> {\n                 Sync(ref p) => return unsafe { (*p.get()).recv() }\n             };\n             unsafe {\n-                mem::swap(&mut transmute_mut(self).inner,\n-                          &mut new_port.inner);\n+                mem::swap(self.mut_inner(), new_port.mut_inner());\n             }\n         }\n     }\n@@ -858,7 +873,7 @@ impl<T: Send> Receiver<T> {\n impl<T: Send> select::Packet for Receiver<T> {\n     fn can_recv(&self) -> bool {\n         loop {\n-            let mut new_port = match self.inner {\n+            let new_port = match *unsafe { self.inner() } {\n                 Oneshot(ref p) => {\n                     match unsafe { (*p.get()).can_recv() } {\n                         Ok(ret) => return ret,\n@@ -879,15 +894,15 @@ impl<T: Send> select::Packet for Receiver<T> {\n                 }\n             };\n             unsafe {\n-                mem::swap(&mut transmute_mut(self).inner,\n-                          &mut new_port.inner);\n+                mem::swap(self.mut_inner(),\n+                          new_port.mut_inner());\n             }\n         }\n     }\n \n     fn start_selection(&self, mut task: BlockedTask) -> Result<(), BlockedTask>{\n         loop {\n-            let (t, mut new_port) = match self.inner {\n+            let (t, new_port) = match *unsafe { self.inner() } {\n                 Oneshot(ref p) => {\n                     match unsafe { (*p.get()).start_selection(task) } {\n                         oneshot::SelSuccess => return Ok(()),\n@@ -911,16 +926,16 @@ impl<T: Send> select::Packet for Receiver<T> {\n             };\n             task = t;\n             unsafe {\n-                mem::swap(&mut transmute_mut(self).inner,\n-                          &mut new_port.inner);\n+                mem::swap(self.mut_inner(),\n+                          new_port.mut_inner());\n             }\n         }\n     }\n \n     fn abort_selection(&self) -> bool {\n         let mut was_upgrade = false;\n         loop {\n-            let result = match self.inner {\n+            let result = match *unsafe { self.inner() } {\n                 Oneshot(ref p) => unsafe { (*p.get()).abort_selection() },\n                 Stream(ref p) => unsafe {\n                     (*p.get()).abort_selection(was_upgrade)\n@@ -932,11 +947,11 @@ impl<T: Send> select::Packet for Receiver<T> {\n                     (*p.get()).abort_selection()\n                 },\n             };\n-            let mut new_port = match result { Ok(b) => return b, Err(p) => p };\n+            let new_port = match result { Ok(b) => return b, Err(p) => p };\n             was_upgrade = true;\n             unsafe {\n-                mem::swap(&mut transmute_mut(self).inner,\n-                          &mut new_port.inner);\n+                mem::swap(self.mut_inner(),\n+                          new_port.mut_inner());\n             }\n         }\n     }\n@@ -949,7 +964,7 @@ impl<'a, T: Send> Iterator<T> for Messages<'a, T> {\n #[unsafe_destructor]\n impl<T: Send> Drop for Receiver<T> {\n     fn drop(&mut self) {\n-        match self.inner {\n+        match *unsafe { self.mut_inner() } {\n             Oneshot(ref mut p) => unsafe { (*p.get()).drop_port(); },\n             Stream(ref mut p) => unsafe { (*p.get()).drop_port(); },\n             Shared(ref mut p) => unsafe { (*p.get()).drop_port(); },"}]}