{"sha": "b4734f01fee9fd34f80e0516798e70e8e5666533", "node_id": "C_kwDOAAsO6NoAKGI0NzM0ZjAxZmVlOWZkMzRmODBlMDUxNjc5OGU3MGU4ZTU2NjY1MzM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-04-12T18:56:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-12T18:56:22Z"}, "message": "Rollup merge of #110175 - nnethercote:symbol-cleanups, r=jackh726\n\nSymbol cleanups\n\nr? ```@jackh726```\n\ncc ```@b-naber```", "tree": {"sha": "4c4d2154e2f386d77aca5ec52eb6e3ebc3ebb2e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c4d2154e2f386d77aca5ec52eb6e3ebc3ebb2e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4734f01fee9fd34f80e0516798e70e8e5666533", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkNv7WCRBK7hj4Ov3rIwAA4LwIACI6n3yf+aLJdOgriBAh4Mp3\nvLtWuUwCTWxIESdaipqfg0so28FXengFSOzHmp4O5xtoMwj4VvDZDjyAY3DDWD5K\n0AJteDVLQVFkn5Dk/VHIcjwyEIsdm7vULThoCwZWlHftrW3vJfmXymtBuOU9VHIp\n5CzwOpBg1yZNgkXpkBtSpneLdlcN4xk7IZKl1hrMqZr+ka1zQ/vR5tzhFLvS8Mfb\nyqhwcE7lj6/5MuGGuTedh0j0tW/5b34ttckatUlfY+z2L5Ikh0jNtCgkHkmEEv/b\nNYYyrPMwZn56WCcror3LtFjPY5UVxfDUgcd9AyXNAjWcP5bdqzk8d+hsUplDkhM=\n=0qK6\n-----END PGP SIGNATURE-----\n", "payload": "tree 4c4d2154e2f386d77aca5ec52eb6e3ebc3ebb2e1\nparent 05e67b510f2229095353522255b6f766a0e06dbb\nparent 79757799185515835306e11bec35b3fd3887ee70\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1681325782 +0200\ncommitter GitHub <noreply@github.com> 1681325782 +0200\n\nRollup merge of #110175 - nnethercote:symbol-cleanups, r=jackh726\n\nSymbol cleanups\n\nr? ```@jackh726```\n\ncc ```@b-naber```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4734f01fee9fd34f80e0516798e70e8e5666533", "html_url": "https://github.com/rust-lang/rust/commit/b4734f01fee9fd34f80e0516798e70e8e5666533", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4734f01fee9fd34f80e0516798e70e8e5666533/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05e67b510f2229095353522255b6f766a0e06dbb", "url": "https://api.github.com/repos/rust-lang/rust/commits/05e67b510f2229095353522255b6f766a0e06dbb", "html_url": "https://github.com/rust-lang/rust/commit/05e67b510f2229095353522255b6f766a0e06dbb"}, {"sha": "79757799185515835306e11bec35b3fd3887ee70", "url": "https://api.github.com/repos/rust-lang/rust/commits/79757799185515835306e11bec35b3fd3887ee70", "html_url": "https://github.com/rust-lang/rust/commit/79757799185515835306e11bec35b3fd3887ee70"}], "stats": {"total": 77, "additions": 28, "deletions": 49}, "files": [{"sha": "f37a7cce3b3ec60699c7bdf55b3556f95e82c528", "filename": "compiler/rustc_borrowck/src/renumber.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4734f01fee9fd34f80e0516798e70e8e5666533/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4734f01fee9fd34f80e0516798e70e8e5666533/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs?ref=b4734f01fee9fd34f80e0516798e70e8e5666533", "patch": "@@ -69,12 +69,10 @@ impl RegionCtxt {\n     /// Used to determine the representative of a component in the strongly connected\n     /// constraint graph\n     pub(crate) fn preference_value(self) -> usize {\n-        let _anon = Symbol::intern(\"anon\");\n-\n         match self {\n             RegionCtxt::Unknown => 1,\n             RegionCtxt::Existential(None) => 2,\n-            RegionCtxt::Existential(Some(_anon)) | RegionCtxt::Free(_anon) => 2,\n+            RegionCtxt::Existential(Some(_)) | RegionCtxt::Free(_) => 2,\n             RegionCtxt::Location(_) => 3,\n             RegionCtxt::TyContext(_) => 4,\n             _ => 5,"}, {"sha": "6d8305b7d471b002bdc298c7c9ecd7dd0ded2da6", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b4734f01fee9fd34f80e0516798e70e8e5666533/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4734f01fee9fd34f80e0516798e70e8e5666533/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=b4734f01fee9fd34f80e0516798e70e8e5666533", "patch": "@@ -35,6 +35,7 @@ use rustc_middle::ty::{\n     OpaqueHiddenType, OpaqueTypeKey, RegionVid, Ty, TyCtxt, UserType, UserTypeAnnotationIndex,\n };\n use rustc_span::def_id::CRATE_DEF_ID;\n+use rustc_span::symbol::sym;\n use rustc_span::{Span, DUMMY_SP};\n use rustc_target::abi::{FieldIdx, FIRST_VARIANT};\n use rustc_trait_selection::traits::query::type_op::custom::scrape_region_constraints;\n@@ -1338,18 +1339,13 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 };\n                 let (sig, map) = tcx.replace_late_bound_regions(sig, |br| {\n                     use crate::renumber::{BoundRegionInfo, RegionCtxt};\n-                    use rustc_span::Symbol;\n \n                     let region_ctxt_fn = || {\n                         let reg_info = match br.kind {\n                             ty::BoundRegionKind::BrAnon(Some(span)) => BoundRegionInfo::Span(span),\n-                            ty::BoundRegionKind::BrAnon(..) => {\n-                                BoundRegionInfo::Name(Symbol::intern(\"anon\"))\n-                            }\n+                            ty::BoundRegionKind::BrAnon(..) => BoundRegionInfo::Name(sym::anon),\n                             ty::BoundRegionKind::BrNamed(_, name) => BoundRegionInfo::Name(name),\n-                            ty::BoundRegionKind::BrEnv => {\n-                                BoundRegionInfo::Name(Symbol::intern(\"env\"))\n-                            }\n+                            ty::BoundRegionKind::BrEnv => BoundRegionInfo::Name(sym::env),\n                         };\n \n                         RegionCtxt::LateBound(reg_info)"}, {"sha": "6b64e65518f5bf605637dc66b4bbc535e3406586", "filename": "compiler/rustc_borrowck/src/type_check/relate_tys.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b4734f01fee9fd34f80e0516798e70e8e5666533/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4734f01fee9fd34f80e0516798e70e8e5666533/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs?ref=b4734f01fee9fd34f80e0516798e70e8e5666533", "patch": "@@ -4,6 +4,7 @@ use rustc_infer::traits::PredicateObligations;\n use rustc_middle::mir::ConstraintCategory;\n use rustc_middle::ty::relate::TypeRelation;\n use rustc_middle::ty::{self, Ty};\n+use rustc_span::symbol::sym;\n use rustc_span::{Span, Symbol};\n use rustc_trait_selection::traits::query::Fallible;\n \n@@ -125,9 +126,9 @@ impl<'tcx> TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, 'tcx>\n \n         let reg_info = match placeholder.bound.kind {\n             ty::BoundRegionKind::BrAnon(Some(span)) => BoundRegionInfo::Span(span),\n-            ty::BoundRegionKind::BrAnon(..) => BoundRegionInfo::Name(Symbol::intern(\"anon\")),\n+            ty::BoundRegionKind::BrAnon(..) => BoundRegionInfo::Name(sym::anon),\n             ty::BoundRegionKind::BrNamed(_, name) => BoundRegionInfo::Name(name),\n-            ty::BoundRegionKind::BrEnv => BoundRegionInfo::Name(Symbol::intern(\"env\")),\n+            ty::BoundRegionKind::BrEnv => BoundRegionInfo::Name(sym::env),\n         };\n \n         let reg_var ="}, {"sha": "35dfc1f7d129a710383c9db23fed7d76b74f51ed", "filename": "compiler/rustc_borrowck/src/universal_regions.rs", "status": "modified", "additions": 10, "deletions": 32, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/b4734f01fee9fd34f80e0516798e70e8e5666533/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4734f01fee9fd34f80e0516798e70e8e5666533/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs?ref=b4734f01fee9fd34f80e0516798e70e8e5666533", "patch": "@@ -24,6 +24,7 @@ use rustc_infer::infer::NllRegionVariableOrigin;\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::{self, InlineConstSubsts, InlineConstSubstsParts, RegionVid, Ty, TyCtxt};\n use rustc_middle::ty::{InternalSubsts, SubstsRef};\n+use rustc_span::symbol::{kw, sym};\n use rustc_span::Symbol;\n use std::iter;\n \n@@ -404,10 +405,8 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n         assert_eq!(FIRST_GLOBAL_INDEX, self.infcx.num_region_vars());\n \n         // Create the \"global\" region that is always free in all contexts: 'static.\n-        let fr_static = self\n-            .infcx\n-            .next_nll_region_var(FR, || RegionCtxt::Free(Symbol::intern(\"static\")))\n-            .to_region_vid();\n+        let fr_static =\n+            self.infcx.next_nll_region_var(FR, || RegionCtxt::Free(kw::Static)).to_region_vid();\n \n         // We've now added all the global regions. The next ones we\n         // add will be external.\n@@ -440,11 +439,7 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n                     debug!(?r);\n                     if !indices.indices.contains_key(&r) {\n                         let region_vid = {\n-                            let name = match r.get_name() {\n-                                Some(name) => name,\n-                                _ => Symbol::intern(\"anon\"),\n-                            };\n-\n+                            let name = r.get_name_or_anon();\n                             self.infcx.next_nll_region_var(FR, || {\n                                 RegionCtxt::LateBound(BoundRegionInfo::Name(name))\n                             })\n@@ -478,11 +473,7 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n             debug!(?r);\n             if !indices.indices.contains_key(&r) {\n                 let region_vid = {\n-                    let name = match r.get_name() {\n-                        Some(name) => name,\n-                        _ => Symbol::intern(\"anon\"),\n-                    };\n-\n+                    let name = r.get_name_or_anon();\n                     self.infcx.next_nll_region_var(FR, || {\n                         RegionCtxt::LateBound(BoundRegionInfo::Name(name))\n                     })\n@@ -768,15 +759,10 @@ impl<'cx, 'tcx> InferCtxtExt<'tcx> for BorrowckInferCtxt<'cx, 'tcx> {\n         T: TypeFoldable<TyCtxt<'tcx>>,\n     {\n         self.infcx.tcx.fold_regions(value, |region, _depth| {\n-            let name = match region.get_name() {\n-                Some(name) => name,\n-                _ => Symbol::intern(\"anon\"),\n-            };\n+            let name = region.get_name_or_anon();\n             debug!(?region, ?name);\n \n-            let reg_var = self.next_nll_region_var(origin, || RegionCtxt::Free(name));\n-\n-            reg_var\n+            self.next_nll_region_var(origin, || RegionCtxt::Free(name))\n         })\n     }\n \n@@ -797,7 +783,7 @@ impl<'cx, 'tcx> InferCtxtExt<'tcx> for BorrowckInferCtxt<'cx, 'tcx> {\n             let region_vid = {\n                 let name = match br.kind.get_name() {\n                     Some(name) => name,\n-                    _ => Symbol::intern(\"anon\"),\n+                    _ => sym::anon,\n                 };\n \n                 self.next_nll_region_var(origin, || RegionCtxt::Bound(BoundRegionInfo::Name(name)))\n@@ -829,11 +815,7 @@ impl<'cx, 'tcx> InferCtxtExt<'tcx> for BorrowckInferCtxt<'cx, 'tcx> {\n             debug!(?r);\n             if !indices.indices.contains_key(&r) {\n                 let region_vid = {\n-                    let name = match r.get_name() {\n-                        Some(name) => name,\n-                        _ => Symbol::intern(\"anon\"),\n-                    };\n-\n+                    let name = r.get_name_or_anon();\n                     self.next_nll_region_var(FR, || {\n                         RegionCtxt::LateBound(BoundRegionInfo::Name(name))\n                     })\n@@ -855,11 +837,7 @@ impl<'cx, 'tcx> InferCtxtExt<'tcx> for BorrowckInferCtxt<'cx, 'tcx> {\n             debug!(?r);\n             if !indices.indices.contains_key(&r) {\n                 let region_vid = {\n-                    let name = match r.get_name() {\n-                        Some(name) => name,\n-                        _ => Symbol::intern(\"anon\"),\n-                    };\n-\n+                    let name = r.get_name_or_anon();\n                     self.next_nll_region_var(FR, || {\n                         RegionCtxt::LateBound(BoundRegionInfo::Name(name))\n                     })"}, {"sha": "086ceebd24d6021f5bce78f80b93bc6f20dba97c", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b4734f01fee9fd34f80e0516798e70e8e5666533/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4734f01fee9fd34f80e0516798e70e8e5666533/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=b4734f01fee9fd34f80e0516798e70e8e5666533", "patch": "@@ -1621,19 +1621,24 @@ impl<'tcx> Region<'tcx> {\n \n     pub fn get_name(self) -> Option<Symbol> {\n         if self.has_name() {\n-            let name = match *self {\n+            match *self {\n                 ty::ReEarlyBound(ebr) => Some(ebr.name),\n                 ty::ReLateBound(_, br) => br.kind.get_name(),\n                 ty::ReFree(fr) => fr.bound_region.get_name(),\n                 ty::ReStatic => Some(kw::StaticLifetime),\n                 ty::RePlaceholder(placeholder) => placeholder.bound.kind.get_name(),\n                 _ => None,\n-            };\n-\n-            return name;\n+            }\n+        } else {\n+            None\n         }\n+    }\n \n-        None\n+    pub fn get_name_or_anon(self) -> Symbol {\n+        match self.get_name() {\n+            Some(name) => name,\n+            None => sym::anon,\n+        }\n     }\n \n     /// Is this region named by the user?"}, {"sha": "84a4f10b8ab13b8875fb8d0edc3c0ce369ec2550", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b4734f01fee9fd34f80e0516798e70e8e5666533/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4734f01fee9fd34f80e0516798e70e8e5666533/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=b4734f01fee9fd34f80e0516798e70e8e5666533", "patch": "@@ -357,6 +357,7 @@ symbols! {\n         always,\n         and,\n         and_then,\n+        anon,\n         anonymous_lifetime_in_impl_trait,\n         any,\n         append_const_msg,"}]}