{"sha": "f92bfb580780cda02f9ba8a935538f984d8a4c0d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5MmJmYjU4MDc4MGNkYTAyZjliYThhOTM1NTM4Zjk4NGQ4YTRjMGQ=", "commit": {"author": {"name": "Veetaha", "email": "veetaha2@gmail.com", "date": "2020-06-21T12:58:34Z"}, "committer": {"name": "Veetaha", "email": "veetaha2@gmail.com", "date": "2020-07-07T20:30:11Z"}, "message": "Gzip artifacts\n\nCo-authored-by: bjorn3 <bjorn3@users.noreply.github.com>\n\nOverride miniz_oxide to build it with optimizations\n\nBuilding this crate with optimizations decreases the gzipping\npart of `cargo xtask dist` from `30-40s` down to `3s`,\nthe overhead for `rustc` to apply optimizations is miserable on this background", "tree": {"sha": "fbf0e24250cc36eaa122904e78cd7cb50fe1c665", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fbf0e24250cc36eaa122904e78cd7cb50fe1c665"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f92bfb580780cda02f9ba8a935538f984d8a4c0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f92bfb580780cda02f9ba8a935538f984d8a4c0d", "html_url": "https://github.com/rust-lang/rust/commit/f92bfb580780cda02f9ba8a935538f984d8a4c0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f92bfb580780cda02f9ba8a935538f984d8a4c0d/comments", "author": {"login": "Veetaha", "id": 36276403, "node_id": "MDQ6VXNlcjM2Mjc2NDAz", "avatar_url": "https://avatars.githubusercontent.com/u/36276403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veetaha", "html_url": "https://github.com/Veetaha", "followers_url": "https://api.github.com/users/Veetaha/followers", "following_url": "https://api.github.com/users/Veetaha/following{/other_user}", "gists_url": "https://api.github.com/users/Veetaha/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veetaha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veetaha/subscriptions", "organizations_url": "https://api.github.com/users/Veetaha/orgs", "repos_url": "https://api.github.com/users/Veetaha/repos", "events_url": "https://api.github.com/users/Veetaha/events{/privacy}", "received_events_url": "https://api.github.com/users/Veetaha/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veetaha", "id": 36276403, "node_id": "MDQ6VXNlcjM2Mjc2NDAz", "avatar_url": "https://avatars.githubusercontent.com/u/36276403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veetaha", "html_url": "https://github.com/Veetaha", "followers_url": "https://api.github.com/users/Veetaha/followers", "following_url": "https://api.github.com/users/Veetaha/following{/other_user}", "gists_url": "https://api.github.com/users/Veetaha/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veetaha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veetaha/subscriptions", "organizations_url": "https://api.github.com/users/Veetaha/orgs", "repos_url": "https://api.github.com/users/Veetaha/repos", "events_url": "https://api.github.com/users/Veetaha/events{/privacy}", "received_events_url": "https://api.github.com/users/Veetaha/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "980a67f44629ed67a54b603aaf9d015a81d61f7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/980a67f44629ed67a54b603aaf9d015a81d61f7a", "html_url": "https://github.com/rust-lang/rust/commit/980a67f44629ed67a54b603aaf9d015a81d61f7a"}], "stats": {"total": 92, "additions": 68, "deletions": 24}, "files": [{"sha": "108403ce638e527ba4652d017db6d007380ae7ca", "filename": "Cargo.lock", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f92bfb580780cda02f9ba8a935538f984d8a4c0d/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/f92bfb580780cda02f9ba8a935538f984d8a4c0d/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=f92bfb580780cda02f9ba8a935538f984d8a4c0d", "patch": "@@ -207,6 +207,15 @@ dependencies = [\n  \"winapi 0.3.9\",\n ]\n \n+[[package]]\n+name = \"crc32fast\"\n+version = \"1.2.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ba125de2af0df55319f41944744ad91c71113bf74a4646efff39afe1f6842db1\"\n+dependencies = [\n+ \"cfg-if\",\n+]\n+\n [[package]]\n name = \"crossbeam-channel\"\n version = \"0.4.2\"\n@@ -340,6 +349,18 @@ version = \"0.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"37ab347416e802de484e4d03c7316c48f1ecb56574dfd4a46a80f173ce1de04d\"\n \n+[[package]]\n+name = \"flate2\"\n+version = \"1.0.16\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"68c90b0fc46cf89d227cc78b40e494ff81287a92dd07631e5af0d06fe3cf885e\"\n+dependencies = [\n+ \"cfg-if\",\n+ \"crc32fast\",\n+ \"libc\",\n+ \"miniz_oxide\",\n+]\n+\n [[package]]\n name = \"flycheck\"\n version = \"0.1.0\"\n@@ -1993,6 +2014,7 @@ name = \"xtask\"\n version = \"0.1.0\"\n dependencies = [\n  \"anyhow\",\n+ \"flate2\",\n  \"pico-args\",\n  \"proc-macro2\",\n  \"quote\","}, {"sha": "612e6809f62a3c0949fcf4d00125905b5d895444", "filename": "Cargo.toml", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f92bfb580780cda02f9ba8a935538f984d8a4c0d/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f92bfb580780cda02f9ba8a935538f984d8a4c0d/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=f92bfb580780cda02f9ba8a935538f984d8a4c0d", "patch": "@@ -29,6 +29,11 @@ opt-level = 0\n [profile.release.package.xtask]\n opt-level = 0\n \n+# Gzipping the artifacts is up to 10 times faster with optimizations (`cargo xtask dist`).\n+# `miniz_oxide` is the direct dependency of `flate2` which does all the heavy lifting\n+[profile.dev.package.miniz_oxide]\n+opt-level = 3\n+\n [patch.'crates-io']\n # rowan = { path = \"../rowan\" }\n "}, {"sha": "bd99d696ad863cccce8a7e8b00dbd53fb9cb9b4f", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f92bfb580780cda02f9ba8a935538f984d8a4c0d/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/f92bfb580780cda02f9ba8a935538f984d8a4c0d/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=f92bfb580780cda02f9ba8a935538f984d8a4c0d", "patch": "@@ -274,13 +274,13 @@ async function getServer(config: Config, state: PersistentState): Promise<string\n     };\n     if (config.package.releaseTag === null) return \"rust-analyzer\";\n \n-    let binaryName: string | undefined = undefined;\n+    let platform: string | undefined;\n     if (process.arch === \"x64\" || process.arch === \"ia32\") {\n-        if (process.platform === \"linux\") binaryName = \"rust-analyzer-linux\";\n-        if (process.platform === \"darwin\") binaryName = \"rust-analyzer-mac\";\n-        if (process.platform === \"win32\") binaryName = \"rust-analyzer-windows.exe\";\n+        if (process.platform === \"linux\") platform = \"linux\";\n+        if (process.platform === \"darwin\") platform = \"mac\";\n+        if (process.platform === \"win32\") platform = \"windows\";\n     }\n-    if (binaryName === undefined) {\n+    if (platform === undefined) {\n         vscode.window.showErrorMessage(\n             \"Unfortunately we don't ship binaries for your platform yet. \" +\n             \"You need to manually clone rust-analyzer repository and \" +\n@@ -291,8 +291,8 @@ async function getServer(config: Config, state: PersistentState): Promise<string\n         );\n         return undefined;\n     }\n-\n-    const dest = path.join(config.globalStoragePath, binaryName);\n+    const ext = platform === \"windows\" ? \".exe\" : \"\";\n+    const dest = path.join(config.globalStoragePath, `rust-analyzer-${platform}${ext}`);\n     const exists = await fs.stat(dest).then(() => true, () => false);\n     if (!exists) {\n         await state.updateServerVersion(undefined);\n@@ -309,7 +309,7 @@ async function getServer(config: Config, state: PersistentState): Promise<string\n     }\n \n     const release = await fetchRelease(config.package.releaseTag);\n-    const artifact = release.assets.find(artifact => artifact.name === binaryName);\n+    const artifact = release.assets.find(artifact => artifact.name === `rust-analyzer-${platform}.gz`);\n     assert(!!artifact, `Bad release: ${JSON.stringify(release)}`);\n \n     // Unlinking the exe file before moving new one on its place should prevent ETXTBSY error.\n@@ -321,6 +321,7 @@ async function getServer(config: Config, state: PersistentState): Promise<string\n         url: artifact.browser_download_url,\n         dest,\n         progressTitle: \"Downloading rust-analyzer server\",\n+        gunzip: true,\n         mode: 0o755\n     });\n "}, {"sha": "53c9e91cd17010593c09a279dd9b0a6f3ef56a7d", "filename": "editors/code/src/net.ts", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f92bfb580780cda02f9ba8a935538f984d8a4c0d/editors%2Fcode%2Fsrc%2Fnet.ts", "raw_url": "https://github.com/rust-lang/rust/raw/f92bfb580780cda02f9ba8a935538f984d8a4c0d/editors%2Fcode%2Fsrc%2Fnet.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fnet.ts?ref=f92bfb580780cda02f9ba8a935538f984d8a4c0d", "patch": "@@ -3,6 +3,7 @@ import * as vscode from \"vscode\";\n import * as stream from \"stream\";\n import * as crypto from \"crypto\";\n import * as fs from \"fs\";\n+import * as zlib from \"zlib\";\n import * as util from \"util\";\n import * as path from \"path\";\n import { log, assert } from \"./util\";\n@@ -65,6 +66,7 @@ interface DownloadOpts {\n     url: string;\n     dest: string;\n     mode?: number;\n+    gunzip?: boolean;\n }\n \n export async function download(opts: DownloadOpts) {\n@@ -82,7 +84,7 @@ export async function download(opts: DownloadOpts) {\n         },\n         async (progress, _cancellationToken) => {\n             let lastPercentage = 0;\n-            await downloadFile(opts.url, tempFile, opts.mode, (readBytes, totalBytes) => {\n+            await downloadFile(opts.url, tempFile, opts.mode, !!opts.gunzip, (readBytes, totalBytes) => {\n                 const newPercentage = (readBytes / totalBytes) * 100;\n                 progress.report({\n                     message: newPercentage.toFixed(0) + \"%\",\n@@ -97,16 +99,11 @@ export async function download(opts: DownloadOpts) {\n     await fs.promises.rename(tempFile, opts.dest);\n }\n \n-/**\n- * Downloads file from `url` and stores it at `destFilePath` with `mode` (unix permissions).\n- * `onProgress` callback is called on recieveing each chunk of bytes\n- * to track the progress of downloading, it gets the already read and total\n- * amount of bytes to read as its parameters.\n- */\n async function downloadFile(\n     url: string,\n     destFilePath: fs.PathLike,\n     mode: number | undefined,\n+    gunzip: boolean,\n     onProgress: (readBytes: number, totalBytes: number) => void\n ): Promise<void> {\n     const res = await fetch(url);\n@@ -130,7 +127,10 @@ async function downloadFile(\n     });\n \n     const destFileStream = fs.createWriteStream(destFilePath, { mode });\n-    await pipeline(res.body, destFileStream);\n+    const srcStream = gunzip ? res.body.pipe(zlib.createGunzip()) : res.body;\n+\n+    await pipeline(srcStream, destFileStream);\n+\n     await new Promise<void>(resolve => {\n         destFileStream.on(\"close\", resolve);\n         destFileStream.destroy();"}, {"sha": "8045a98eaff54b76352f95425369ab23af0d0452", "filename": "xtask/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f92bfb580780cda02f9ba8a935538f984d8a4c0d/xtask%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f92bfb580780cda02f9ba8a935538f984d8a4c0d/xtask%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2FCargo.toml?ref=f92bfb580780cda02f9ba8a935538f984d8a4c0d", "patch": "@@ -14,3 +14,4 @@ pico-args = \"0.3.1\"\n quote = \"1.0.2\"\n proc-macro2 = \"1.0.8\"\n anyhow = \"1.0.26\"\n+flate2 = \"1.0\""}, {"sha": "b8f68027c04311f987712cca31d4f5856abeafe7", "filename": "xtask/src/dist.rs", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f92bfb580780cda02f9ba8a935538f984d8a4c0d/xtask%2Fsrc%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92bfb580780cda02f9ba8a935538f984d8a4c0d/xtask%2Fsrc%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fdist.rs?ref=f92bfb580780cda02f9ba8a935538f984d8a4c0d", "patch": "@@ -1,4 +1,10 @@\n-use std::path::PathBuf;\n+use flate2::{write::GzEncoder, Compression};\n+use std::{\n+    env,\n+    fs::File,\n+    io,\n+    path::{Path, PathBuf},\n+};\n \n use anyhow::Result;\n \n@@ -16,7 +22,7 @@ pub fn run_dist(nightly: bool, client_version: Option<String>) -> Result<()> {\n         let release_tag = if nightly { \"nightly\".to_string() } else { date_iso()? };\n         dist_client(&version, &release_tag)?;\n     }\n-    dist_server(nightly)?;\n+    dist_server()?;\n     Ok(())\n }\n \n@@ -46,17 +52,14 @@ fn dist_client(version: &str, release_tag: &str) -> Result<()> {\n     Ok(())\n }\n \n-fn dist_server(nightly: bool) -> Result<()> {\n+fn dist_server() -> Result<()> {\n     if cfg!(target_os = \"linux\") {\n-        std::env::set_var(\"CC\", \"clang\");\n+        env::set_var(\"CC\", \"clang\");\n         run!(\n             \"cargo build --manifest-path ./crates/rust-analyzer/Cargo.toml --bin rust-analyzer --release\"\n             // We'd want to add, but that requires setting the right linker somehow\n             // --features=jemalloc\n         )?;\n-        if !nightly {\n-            run!(\"strip ./target/release/rust-analyzer\")?;\n-        }\n     } else {\n         run!(\"cargo build --manifest-path ./crates/rust-analyzer/Cargo.toml --bin rust-analyzer --release\")?;\n     }\n@@ -71,8 +74,20 @@ fn dist_server(nightly: bool) -> Result<()> {\n         panic!(\"Unsupported OS\")\n     };\n \n-    fs2::copy(src, dst)?;\n+    let src = Path::new(src);\n+    let dst = Path::new(dst);\n+\n+    fs2::copy(&src, &dst)?;\n+    gzip(&src, &dst.with_extension(\"gz\"))?;\n+\n+    Ok(())\n+}\n \n+fn gzip(src_path: &Path, dest_path: &Path) -> Result<()> {\n+    let mut encoder = GzEncoder::new(File::create(dest_path)?, Compression::best());\n+    let mut input = io::BufReader::new(File::open(src_path)?);\n+    io::copy(&mut input, &mut encoder)?;\n+    encoder.finish()?;\n     Ok(())\n }\n "}]}