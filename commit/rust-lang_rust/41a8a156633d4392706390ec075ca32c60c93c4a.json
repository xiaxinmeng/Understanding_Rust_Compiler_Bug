{"sha": "41a8a156633d4392706390ec075ca32c60c93c4a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxYThhMTU2NjMzZDQzOTI3MDYzOTBlYzA3NWNhMzJjNjBjOTNjNGE=", "commit": {"author": {"name": "Robin Stocker", "email": "robin@nibor.org", "date": "2014-11-02T06:24:57Z"}, "committer": {"name": "Robin Stocker", "email": "robin@nibor.org", "date": "2014-11-02T06:38:44Z"}, "message": "Extend documentation of getopts for arguments", "tree": {"sha": "754eac6f1a4f4e759c363a785405e7a1284d7524", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/754eac6f1a4f4e759c363a785405e7a1284d7524"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41a8a156633d4392706390ec075ca32c60c93c4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41a8a156633d4392706390ec075ca32c60c93c4a", "html_url": "https://github.com/rust-lang/rust/commit/41a8a156633d4392706390ec075ca32c60c93c4a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41a8a156633d4392706390ec075ca32c60c93c4a/comments", "author": {"login": "robinst", "id": 16778, "node_id": "MDQ6VXNlcjE2Nzc4", "avatar_url": "https://avatars.githubusercontent.com/u/16778?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robinst", "html_url": "https://github.com/robinst", "followers_url": "https://api.github.com/users/robinst/followers", "following_url": "https://api.github.com/users/robinst/following{/other_user}", "gists_url": "https://api.github.com/users/robinst/gists{/gist_id}", "starred_url": "https://api.github.com/users/robinst/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robinst/subscriptions", "organizations_url": "https://api.github.com/users/robinst/orgs", "repos_url": "https://api.github.com/users/robinst/repos", "events_url": "https://api.github.com/users/robinst/events{/privacy}", "received_events_url": "https://api.github.com/users/robinst/received_events", "type": "User", "site_admin": false}, "committer": {"login": "robinst", "id": 16778, "node_id": "MDQ6VXNlcjE2Nzc4", "avatar_url": "https://avatars.githubusercontent.com/u/16778?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robinst", "html_url": "https://github.com/robinst", "followers_url": "https://api.github.com/users/robinst/followers", "following_url": "https://api.github.com/users/robinst/following{/other_user}", "gists_url": "https://api.github.com/users/robinst/gists{/gist_id}", "starred_url": "https://api.github.com/users/robinst/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robinst/subscriptions", "organizations_url": "https://api.github.com/users/robinst/orgs", "repos_url": "https://api.github.com/users/robinst/repos", "events_url": "https://api.github.com/users/robinst/events{/privacy}", "received_events_url": "https://api.github.com/users/robinst/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3327ecca422046699315122345c6c050ab73804b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3327ecca422046699315122345c6c050ab73804b", "html_url": "https://github.com/rust-lang/rust/commit/3327ecca422046699315122345c6c050ab73804b"}], "stats": {"total": 44, "additions": 38, "deletions": 6}, "files": [{"sha": "a8a91283a112800dd5f6c7d0804a6885a790ae0e", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 38, "deletions": 6, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/41a8a156633d4392706390ec075ca32c60c93c4a/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41a8a156633d4392706390ec075ca32c60c93c4a/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=41a8a156633d4392706390ec075ca32c60c93c4a", "patch": "@@ -145,19 +145,19 @@ pub struct Opt {\n     pub aliases: Vec<Opt>,\n }\n \n-/// One group of options, e.g., both -h and --help, along with\n+/// One group of options, e.g., both `-h` and `--help`, along with\n /// their shared description and properties.\n #[deriving(Clone, PartialEq, Eq)]\n pub struct OptGroup {\n-    /// Short Name of the `OptGroup`\n+    /// Short name of the option, e.g. `h` for a `-h` option\n     pub short_name: String,\n-    /// Long Name of the `OptGroup`\n+    /// Long name of the option, e.g. `help` for a `--help` option\n     pub long_name: String,\n-    /// Hint\n+    /// Hint for argument, e.g. `FILE` for a `-o FILE` option\n     pub hint: String,\n-    /// Description\n+    /// Description for usage help text\n     pub desc: String,\n-    /// Whether it has an argument\n+    /// Whether option has an argument\n     pub hasarg: HasArg,\n     /// How often it can occur\n     pub occur: Occur\n@@ -393,6 +393,12 @@ fn find_opt(opts: &[Opt], nm: Name) -> Option<uint> {\n }\n \n /// Create a long option that is required and takes an argument.\n+///\n+/// * `short_name` - e.g. `\"h\"` for a `-h` option, or `\"\"` for none\n+/// * `long_name` - e.g. `\"help\"` for a `--help` option, or `\"\"` for none\n+/// * `desc` - Description for usage help\n+/// * `hint` - Hint that is used in place of the argument in the usage help,\n+///   e.g. `\"FILE\"` for a `-o FILE` option\n pub fn reqopt(short_name: &str, long_name: &str, desc: &str, hint: &str) -> OptGroup {\n     let len = short_name.len();\n     assert!(len == 1 || len == 0);\n@@ -407,6 +413,12 @@ pub fn reqopt(short_name: &str, long_name: &str, desc: &str, hint: &str) -> OptG\n }\n \n /// Create a long option that is optional and takes an argument.\n+///\n+/// * `short_name` - e.g. `\"h\"` for a `-h` option, or `\"\"` for none\n+/// * `long_name` - e.g. `\"help\"` for a `--help` option, or `\"\"` for none\n+/// * `desc` - Description for usage help\n+/// * `hint` - Hint that is used in place of the argument in the usage help,\n+///   e.g. `\"FILE\"` for a `-o FILE` option\n pub fn optopt(short_name: &str, long_name: &str, desc: &str, hint: &str) -> OptGroup {\n     let len = short_name.len();\n     assert!(len == 1 || len == 0);\n@@ -421,6 +433,10 @@ pub fn optopt(short_name: &str, long_name: &str, desc: &str, hint: &str) -> OptG\n }\n \n /// Create a long option that is optional and does not take an argument.\n+///\n+/// * `short_name` - e.g. `\"h\"` for a `-h` option, or `\"\"` for none\n+/// * `long_name` - e.g. `\"help\"` for a `--help` option, or `\"\"` for none\n+/// * `desc` - Description for usage help\n pub fn optflag(short_name: &str, long_name: &str, desc: &str) -> OptGroup {\n     let len = short_name.len();\n     assert!(len == 1 || len == 0);\n@@ -436,6 +452,10 @@ pub fn optflag(short_name: &str, long_name: &str, desc: &str) -> OptGroup {\n \n /// Create a long option that can occur more than once and does not\n /// take an argument.\n+///\n+/// * `short_name` - e.g. `\"h\"` for a `-h` option, or `\"\"` for none\n+/// * `long_name` - e.g. `\"help\"` for a `--help` option, or `\"\"` for none\n+/// * `desc` - Description for usage help\n pub fn optflagmulti(short_name: &str, long_name: &str, desc: &str) -> OptGroup {\n     let len = short_name.len();\n     assert!(len == 1 || len == 0);\n@@ -450,6 +470,12 @@ pub fn optflagmulti(short_name: &str, long_name: &str, desc: &str) -> OptGroup {\n }\n \n /// Create a long option that is optional and takes an optional argument.\n+///\n+/// * `short_name` - e.g. `\"h\"` for a `-h` option, or `\"\"` for none\n+/// * `long_name` - e.g. `\"help\"` for a `--help` option, or `\"\"` for none\n+/// * `desc` - Description for usage help\n+/// * `hint` - Hint that is used in place of the argument in the usage help,\n+///   e.g. `\"FILE\"` for a `-o FILE` option\n pub fn optflagopt(short_name: &str, long_name: &str, desc: &str, hint: &str) -> OptGroup {\n     let len = short_name.len();\n     assert!(len == 1 || len == 0);\n@@ -465,6 +491,12 @@ pub fn optflagopt(short_name: &str, long_name: &str, desc: &str, hint: &str) ->\n \n /// Create a long option that is optional, takes an argument, and may occur\n /// multiple times.\n+///\n+/// * `short_name` - e.g. `\"h\"` for a `-h` option, or `\"\"` for none\n+/// * `long_name` - e.g. `\"help\"` for a `--help` option, or `\"\"` for none\n+/// * `desc` - Description for usage help\n+/// * `hint` - Hint that is used in place of the argument in the usage help,\n+///   e.g. `\"FILE\"` for a `-o FILE` option\n pub fn optmulti(short_name: &str, long_name: &str, desc: &str, hint: &str) -> OptGroup {\n     let len = short_name.len();\n     assert!(len == 1 || len == 0);"}]}