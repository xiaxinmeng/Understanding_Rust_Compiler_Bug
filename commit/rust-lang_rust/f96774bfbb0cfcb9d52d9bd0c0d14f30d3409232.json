{"sha": "f96774bfbb0cfcb9d52d9bd0c0d14f30d3409232", "node_id": "C_kwDOAAsO6NoAKGY5Njc3NGJmYmIwY2ZjYjlkNTJkOWJkMGMwZDE0ZjMwZDM0MDkyMzI", "commit": {"author": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2023-03-02T10:30:14Z"}, "committer": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2023-03-02T15:20:35Z"}, "message": "add support for terse output", "tree": {"sha": "c5ad558b9847dcf510d73c4353c465adb31b3fc5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5ad558b9847dcf510d73c4353c465adb31b3fc5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f96774bfbb0cfcb9d52d9bd0c0d14f30d3409232", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEMycKYjxLY0eb13b7zXazX3c0dp4FAmQAvsMACgkQzXazX3c0\ndp5boA/+JhWDATxHxd96sQvmQK1MzkgaRRDMRMjSJ6+EXLoSHKh4px+ai0c6UynE\n4mVX4/6pkKihHJyYMZouf23O/M9WnXc6yH9ErGGxL73IP40Y4BpGy2hfaS+sv4yB\nwJg7+GhGCffWb0beeu6Ca1lIhDEXxenF7jANYp6Qu5Np9oziG7GtPmpRs8F2jdvY\nmzk7uZNvsrzeBXy3IwhNr2XgdK6gEFed6dysI7FC8Zj/+TVL/vIZ/YGdT3Z1+S59\nCSGp2sGQXVh8mpljRhZQujwGHfaWyCAfu04rRbL+Y24xFkPXVolfJGaBjil/tida\nbiP5XBAZ4adzqqrRcbh14+gtVF2Dnyys8cH+V39igSUniMLhSzllpmPEtllyWCYo\nSiCHTV63e06CYYD7FUgPwOhhEXBOD5PosJv7do/Rf1HUjXwxVGtPv6VUKhs8PRq9\n3veSVYW8sFHDCjf6uU+wRk/l3SwWS1p5SOkbEehcHeuVvw2WVP02fiqMAfsOkcDG\n0hXOqulom3QoJOGbjKzkVkVFje74iSZYTjMAc6pW2Vu6u6ihcYzNaDEXMUE9uUcq\ntmopd01uPCmlK57aaH/vJo5mVQD4w72MJJcsjXdUGbPCUp5bnEnQIUtHffT05Czf\nUpIOBKOEIgKsCIts+aeqgOoWzniLAyMbbYquKm9Trt9ggLhflo4=\n=7pJc\n-----END PGP SIGNATURE-----", "payload": "tree c5ad558b9847dcf510d73c4353c465adb31b3fc5\nparent d2f38065f3fb89fb0361c7f1a1a34c070e10297a\nauthor Pietro Albini <pietro.albini@ferrous-systems.com> 1677753014 +0100\ncommitter Pietro Albini <pietro.albini@ferrous-systems.com> 1677770435 +0100\n\nadd support for terse output\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f96774bfbb0cfcb9d52d9bd0c0d14f30d3409232", "html_url": "https://github.com/rust-lang/rust/commit/f96774bfbb0cfcb9d52d9bd0c0d14f30d3409232", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f96774bfbb0cfcb9d52d9bd0c0d14f30d3409232/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2f38065f3fb89fb0361c7f1a1a34c070e10297a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2f38065f3fb89fb0361c7f1a1a34c070e10297a", "html_url": "https://github.com/rust-lang/rust/commit/d2f38065f3fb89fb0361c7f1a1a34c070e10297a"}], "stats": {"total": 63, "additions": 56, "deletions": 7}, "files": [{"sha": "ae2147f7550f37e52accbd0ab507d296cfd51d56", "filename": "src/bootstrap/render_tests.rs", "status": "modified", "additions": 56, "deletions": 7, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/f96774bfbb0cfcb9d52d9bd0c0d14f30d3409232/src%2Fbootstrap%2Frender_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f96774bfbb0cfcb9d52d9bd0c0d14f30d3409232/src%2Fbootstrap%2Frender_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Frender_tests.rs?ref=f96774bfbb0cfcb9d52d9bd0c0d14f30d3409232", "patch": "@@ -7,10 +7,12 @@\n //! to reimplement all the rendering logic in this module because of that.\n \n use crate::builder::Builder;\n-use std::io::{BufRead, BufReader};\n+use std::io::{BufRead, BufReader, Write};\n use std::process::{ChildStdout, Command, Stdio};\n use std::time::Duration;\n \n+const TERSE_TESTS_PER_LINE: usize = 88;\n+\n pub(crate) fn try_run_tests(builder: &Builder<'_>, cmd: &mut Command) -> bool {\n     if builder.config.dry_run() {\n         return true;\n@@ -36,7 +38,8 @@ fn run_tests(builder: &Builder<'_>, cmd: &mut Command) -> bool {\n \n     let mut process = cmd.spawn().unwrap();\n     let stdout = process.stdout.take().unwrap();\n-    let handle = std::thread::spawn(move || Renderer::new(stdout).render_all());\n+    let verbose = builder.config.verbose_tests;\n+    let handle = std::thread::spawn(move || Renderer::new(stdout, verbose).render_all());\n \n     let result = process.wait().unwrap();\n     handle.join().expect(\"test formatter thread failed\");\n@@ -54,11 +57,22 @@ fn run_tests(builder: &Builder<'_>, cmd: &mut Command) -> bool {\n struct Renderer {\n     stdout: BufReader<ChildStdout>,\n     failures: Vec<TestOutcome>,\n+    verbose: bool,\n+    tests_count: Option<usize>,\n+    executed_tests: usize,\n+    terse_tests_in_line: usize,\n }\n \n impl Renderer {\n-    fn new(stdout: ChildStdout) -> Self {\n-        Self { stdout: BufReader::new(stdout), failures: Vec::new() }\n+    fn new(stdout: ChildStdout, verbose: bool) -> Self {\n+        Self {\n+            stdout: BufReader::new(stdout),\n+            failures: Vec::new(),\n+            verbose,\n+            tests_count: None,\n+            executed_tests: 0,\n+            terse_tests_in_line: 0,\n+        }\n     }\n \n     fn render_all(mut self) {\n@@ -83,9 +97,13 @@ impl Renderer {\n         }\n     }\n \n-    fn render_test_outcome(&self, outcome: Outcome<'_>, test: &TestOutcome) {\n-        // TODO: add support for terse output\n-        self.render_test_outcome_verbose(outcome, test);\n+    fn render_test_outcome(&mut self, outcome: Outcome<'_>, test: &TestOutcome) {\n+        self.executed_tests += 1;\n+        if self.verbose {\n+            self.render_test_outcome_verbose(outcome, test);\n+        } else {\n+            self.render_test_outcome_terse(outcome, test);\n+        }\n     }\n \n     fn render_test_outcome_verbose(&self, outcome: Outcome<'_>, test: &TestOutcome) {\n@@ -100,7 +118,35 @@ impl Renderer {\n         }\n     }\n \n+    fn render_test_outcome_terse(&mut self, outcome: Outcome<'_>, _: &TestOutcome) {\n+        if self.terse_tests_in_line != 0 && self.terse_tests_in_line % TERSE_TESTS_PER_LINE == 0 {\n+            if let Some(total) = self.tests_count {\n+                let total = total.to_string();\n+                let executed = format!(\"{:>width$}\", self.executed_tests - 1, width = total.len());\n+                print!(\" {executed}/{total}\");\n+            }\n+            println!();\n+            self.terse_tests_in_line = 0;\n+        }\n+\n+        self.terse_tests_in_line += 1;\n+        print!(\n+            \"{}\",\n+            match outcome {\n+                Outcome::Ok => \".\",\n+                Outcome::Failed => \"F\",\n+                Outcome::Ignored { .. } => \"i\",\n+            }\n+        );\n+        let _ = std::io::stdout().flush();\n+    }\n+\n     fn render_suite_outcome(&self, outcome: Outcome<'_>, suite: &SuiteOutcome) {\n+        // The terse output doesn't end with a newline, so we need to add it ourselves.\n+        if !self.verbose {\n+            println!();\n+        }\n+\n         if !self.failures.is_empty() {\n             println!(\"\\nfailures:\\n\");\n             for failure in &self.failures {\n@@ -132,6 +178,9 @@ impl Renderer {\n         match message {\n             Message::Suite(SuiteMessage::Started { test_count }) => {\n                 println!(\"\\nrunning {test_count} tests\");\n+                self.executed_tests = 0;\n+                self.terse_tests_in_line = 0;\n+                self.tests_count = Some(test_count);\n             }\n             Message::Suite(SuiteMessage::Ok(outcome)) => {\n                 self.render_suite_outcome(Outcome::Ok, &outcome);"}]}