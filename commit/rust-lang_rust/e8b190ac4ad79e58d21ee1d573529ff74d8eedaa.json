{"sha": "e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4YjE5MGFjNGFkNzllNThkMjFlZTFkNTczNTI5ZmY3NGQ4ZWVkYWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-06T06:14:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-06T06:14:03Z"}, "message": "Auto merge of #66143 - Centril:rollup-qmzuex0, r=Centril\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #65776 (Rename `LocalInternedString` and more)\n - #65973 (caller_location: point to macro invocation sites, like file!/line!, and use in core::panic!.)\n - #66015 (librustc_lexer: Refactor the module)\n - #66062 (Configure LLVM module PIC level)\n - #66086 (bump smallvec to 1.0)\n - #66092 (Use KERN_ARND syscall for random numbers on NetBSD, same as FreeBSD.)\n - #66103 (Add target thumbv7neon-unknown-linux-musleabihf)\n - #66133 (Update the bundled `wasi-libc` repository)\n - #66139 (use American spelling for `pluralize!`)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "4d022868d407cf1bed36883037e4e97d1fa5094a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d022868d407cf1bed36883037e4e97d1fa5094a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "html_url": "https://github.com/rust-lang/rust/commit/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "html_url": "https://github.com/rust-lang/rust/commit/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0"}, {"sha": "4f9651b85409a1e6ad5199211947d124ebbab935", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f9651b85409a1e6ad5199211947d124ebbab935", "html_url": "https://github.com/rust-lang/rust/commit/4f9651b85409a1e6ad5199211947d124ebbab935"}], "stats": {"total": 860, "additions": 479, "deletions": 381}, "files": [{"sha": "a6dca2048d4e8d978113f6fc0d363414fe008b73", "filename": "Cargo.lock", "status": "modified", "additions": 31, "deletions": 25, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -68,7 +68,7 @@ name = \"arena\"\n version = \"0.0.0\"\n dependencies = [\n  \"rustc_data_structures\",\n- \"smallvec\",\n+ \"smallvec 1.0.0\",\n ]\n \n [[package]]\n@@ -487,7 +487,7 @@ dependencies = [\n  \"regex-syntax\",\n  \"semver\",\n  \"serde\",\n- \"smallvec\",\n+ \"smallvec 0.6.10\",\n  \"toml\",\n  \"unicode-normalization\",\n  \"url 2.1.0\",\n@@ -655,7 +655,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"0f0ed1a4de2235cabda8558ff5840bffb97fcb64c97827f354a451307df5f72b\"\n dependencies = [\n  \"crossbeam-utils 0.6.5\",\n- \"smallvec\",\n+ \"smallvec 0.6.10\",\n ]\n \n [[package]]\n@@ -2392,7 +2392,7 @@ dependencies = [\n  \"libc\",\n  \"rand 0.6.1\",\n  \"rustc_version\",\n- \"smallvec\",\n+ \"smallvec 0.6.10\",\n  \"winapi 0.3.6\",\n ]\n \n@@ -2407,7 +2407,7 @@ dependencies = [\n  \"libc\",\n  \"redox_syscall\",\n  \"rustc_version\",\n- \"smallvec\",\n+ \"smallvec 0.6.10\",\n  \"winapi 0.3.6\",\n ]\n \n@@ -3135,7 +3135,7 @@ dependencies = [\n  \"rustc_target\",\n  \"scoped-tls\",\n  \"serialize\",\n- \"smallvec\",\n+ \"smallvec 1.0.0\",\n  \"syntax\",\n  \"syntax_pos\",\n ]\n@@ -3147,7 +3147,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"a623fd4805842e9bd0bb6e6dace63efede0ee22de4522a0b03b7c3d15a22f009\"\n dependencies = [\n  \"rustc-ap-rustc_data_structures\",\n- \"smallvec\",\n+ \"smallvec 0.6.10\",\n ]\n \n [[package]]\n@@ -3176,7 +3176,7 @@ dependencies = [\n  \"rustc-hash\",\n  \"rustc-rayon 0.2.0\",\n  \"rustc-rayon-core 0.2.0\",\n- \"smallvec\",\n+ \"smallvec 0.6.10\",\n  \"stable_deref_trait\",\n ]\n \n@@ -3204,7 +3204,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"457a5c204ae2fdaa5bdb5b196e58ca59896870d80445fe423063c9453496e3ea\"\n dependencies = [\n  \"rustc-ap-serialize\",\n- \"smallvec\",\n+ \"smallvec 0.6.10\",\n ]\n \n [[package]]\n@@ -3250,7 +3250,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"92679240e86f4583cc05f8dcf6439bdab87bac9e6555718469176de9bd52ba20\"\n dependencies = [\n  \"indexmap\",\n- \"smallvec\",\n+ \"smallvec 0.6.10\",\n ]\n \n [[package]]\n@@ -3270,7 +3270,7 @@ dependencies = [\n  \"rustc-ap-serialize\",\n  \"rustc-ap-syntax_pos\",\n  \"scoped-tls\",\n- \"smallvec\",\n+ \"smallvec 0.6.10\",\n ]\n \n [[package]]\n@@ -3393,7 +3393,7 @@ dependencies = [\n  \"crossbeam-utils 0.6.5\",\n  \"serde\",\n  \"serde_json\",\n- \"smallvec\",\n+ \"smallvec 0.6.10\",\n  \"syn 0.15.35\",\n  \"url 2.1.0\",\n  \"winapi 0.3.6\",\n@@ -3404,7 +3404,7 @@ name = \"rustc_apfloat\"\n version = \"0.0.0\"\n dependencies = [\n  \"bitflags\",\n- \"smallvec\",\n+ \"smallvec 1.0.0\",\n ]\n \n [[package]]\n@@ -3484,7 +3484,7 @@ dependencies = [\n  \"rustc-rayon-core 0.3.0\",\n  \"rustc_index\",\n  \"serialize\",\n- \"smallvec\",\n+ \"smallvec 1.0.0\",\n  \"stable_deref_trait\",\n ]\n \n@@ -3552,7 +3552,7 @@ name = \"rustc_index\"\n version = \"0.0.0\"\n dependencies = [\n  \"serialize\",\n- \"smallvec\",\n+ \"smallvec 1.0.0\",\n ]\n \n [[package]]\n@@ -3579,7 +3579,7 @@ dependencies = [\n  \"rustc_traits\",\n  \"rustc_typeck\",\n  \"serialize\",\n- \"smallvec\",\n+ \"smallvec 1.0.0\",\n  \"syntax\",\n  \"syntax_expand\",\n  \"syntax_ext\",\n@@ -3650,7 +3650,7 @@ dependencies = [\n  \"rustc_index\",\n  \"rustc_target\",\n  \"serialize\",\n- \"smallvec\",\n+ \"smallvec 1.0.0\",\n  \"stable_deref_trait\",\n  \"syntax\",\n  \"syntax_expand\",\n@@ -3675,7 +3675,7 @@ dependencies = [\n  \"rustc_lexer\",\n  \"rustc_target\",\n  \"serialize\",\n- \"smallvec\",\n+ \"smallvec 1.0.0\",\n  \"syntax\",\n  \"syntax_pos\",\n ]\n@@ -3746,7 +3746,7 @@ dependencies = [\n  \"rustc_data_structures\",\n  \"rustc_errors\",\n  \"rustc_metadata\",\n- \"smallvec\",\n+ \"smallvec 1.0.0\",\n  \"syntax\",\n  \"syntax_expand\",\n  \"syntax_pos\",\n@@ -3799,7 +3799,7 @@ dependencies = [\n  \"rustc\",\n  \"rustc_data_structures\",\n  \"rustc_target\",\n- \"smallvec\",\n+ \"smallvec 1.0.0\",\n  \"syntax\",\n  \"syntax_pos\",\n ]\n@@ -3826,7 +3826,7 @@ dependencies = [\n  \"rustc_errors\",\n  \"rustc_index\",\n  \"rustc_target\",\n- \"smallvec\",\n+ \"smallvec 1.0.0\",\n  \"syntax\",\n  \"syntax_pos\",\n ]\n@@ -4070,7 +4070,7 @@ name = \"serialize\"\n version = \"0.0.0\"\n dependencies = [\n  \"indexmap\",\n- \"smallvec\",\n+ \"smallvec 1.0.0\",\n ]\n \n [[package]]\n@@ -4134,6 +4134,12 @@ version = \"0.6.10\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"ab606a9c5e214920bb66c458cd7be8ef094f813f20fe77a54cc7dbfff220d4b7\"\n \n+[[package]]\n+name = \"smallvec\"\n+version = \"1.0.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"4ecf3b85f68e8abaa7555aa5abdb1153079387e60b718283d732f03897fcfc86\"\n+\n [[package]]\n name = \"socket2\"\n version = \"0.3.8\"\n@@ -4359,7 +4365,7 @@ dependencies = [\n  \"rustc_target\",\n  \"scoped-tls\",\n  \"serialize\",\n- \"smallvec\",\n+ \"smallvec 1.0.0\",\n  \"syntax_pos\",\n ]\n \n@@ -4377,7 +4383,7 @@ dependencies = [\n  \"rustc_target\",\n  \"scoped-tls\",\n  \"serialize\",\n- \"smallvec\",\n+ \"smallvec 1.0.0\",\n  \"syntax\",\n  \"syntax_pos\",\n ]\n@@ -4391,7 +4397,7 @@ dependencies = [\n  \"rustc_data_structures\",\n  \"rustc_errors\",\n  \"rustc_target\",\n- \"smallvec\",\n+ \"smallvec 1.0.0\",\n  \"syntax\",\n  \"syntax_expand\",\n  \"syntax_pos\","}, {"sha": "c63ea6facca648e3f7a71027145e9a6414bb3058", "filename": "src/ci/docker/dist-various-2/build-wasi-toolchain.sh", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Fci%2Fdocker%2Fdist-various-2%2Fbuild-wasi-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Fci%2Fdocker%2Fdist-various-2%2Fbuild-wasi-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-various-2%2Fbuild-wasi-toolchain.sh?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -4,17 +4,17 @@\n \n set -ex\n \n-# Originally from https://releases.llvm.org/8.0.0/clang+llvm-8.0.0-x86_64-linux-gnu-ubuntu-14.04.tar.xz\n-curl https://rust-lang-ci-mirrors.s3-us-west-1.amazonaws.com/rustc/clang%2Bllvm-8.0.0-x86_64-linux-gnu-ubuntu-14.04.tar.xz | \\\n+# Originally from https://releases.llvm.org/9.0.0/clang+llvm-9.0.0-x86_64-linux-gnu-ubuntu-14.04.tar.xz\n+curl https://rust-lang-ci-mirrors.s3-us-west-1.amazonaws.com/rustc/clang%2Bllvm-9.0.0-x86_64-linux-gnu-ubuntu-14.04.tar.xz | \\\n   tar xJf -\n-export PATH=`pwd`/clang+llvm-8.0.0-x86_64-linux-gnu-ubuntu-14.04/bin:$PATH\n+export PATH=`pwd`/clang+llvm-9.0.0-x86_64-linux-gnu-ubuntu-14.04/bin:$PATH\n \n-git clone https://github.com/CraneStation/wasi-sysroot\n+git clone https://github.com/CraneStation/wasi-libc\n \n-cd wasi-sysroot\n-git reset --hard e5f14be38362f1ab83302895a6e74b2ffd0e2302\n+cd wasi-libc\n+git reset --hard a94d2d04e7722b323573da2bd04e909a5763d35b\n make -j$(nproc) INSTALL_DIR=/wasm32-wasi install\n \n cd ..\n-rm -rf reference-sysroot-wasi\n+rm -rf wasi-libc\n rm -rf clang+llvm*"}, {"sha": "5158aab8b7dc5c21cca20080e6ffd0f3e374ba17", "filename": "src/libarena/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibarena%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibarena%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2FCargo.toml?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -10,4 +10,4 @@ path = \"lib.rs\"\n \n [dependencies]\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n-smallvec = { version = \"0.6.7\", features = [\"union\", \"may_dangle\"] }\n+smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }"}, {"sha": "131fb52e2d22b535873cc49bdcc55ea38baf63be", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -26,31 +26,29 @@ macro_rules! panic {\n /// For details, see `std::macros`.\n #[cfg(not(bootstrap))]\n #[macro_export]\n-#[allow_internal_unstable(core_panic, panic_internals)]\n+#[allow_internal_unstable(core_panic,\n+    // FIXME(anp, eddyb) `core_intrinsics` is used here to allow calling\n+    // the `caller_location` intrinsic, but once  `#[track_caller]` is implemented,\n+    // `panicking::{panic, panic_fmt}` can use that instead of a `Location` argument.\n+    core_intrinsics,\n+)]\n #[stable(feature = \"core\", since = \"1.6.0\")]\n macro_rules! panic {\n     () => (\n         $crate::panic!(\"explicit panic\")\n     );\n-    ($msg:expr) => ({\n-        const LOC: &$crate::panic::Location<'_> = &$crate::panic::Location::internal_constructor(\n-            $crate::file!(),\n-            $crate::line!(),\n-            $crate::column!(),\n-        );\n-        $crate::panicking::panic($msg, LOC)\n-    });\n+    ($msg:expr) => (\n+        $crate::panicking::panic($msg, $crate::intrinsics::caller_location())\n+    );\n     ($msg:expr,) => (\n         $crate::panic!($msg)\n     );\n-    ($fmt:expr, $($arg:tt)+) => ({\n-        const LOC: &$crate::panic::Location<'_> = &$crate::panic::Location::internal_constructor(\n-            $crate::file!(),\n-            $crate::line!(),\n-            $crate::column!(),\n-        );\n-        $crate::panicking::panic_fmt($crate::format_args!($fmt, $($arg)+), LOC)\n-    });\n+    ($fmt:expr, $($arg:tt)+) => (\n+        $crate::panicking::panic_fmt(\n+            $crate::format_args!($fmt, $($arg)+),\n+            $crate::intrinsics::caller_location(),\n+        )\n+    );\n }\n \n /// Asserts that two expressions are equal to each other (using [`PartialEq`])."}, {"sha": "92b94af75d75019502843ba9fbeeac0d591fb979", "filename": "src/librustc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2FCargo.toml?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -39,5 +39,5 @@ parking_lot = \"0.9\"\n byteorder = { version = \"1.3\" }\n chalk-engine = { version = \"0.9.0\", default-features=false }\n rustc_fs_util = { path = \"../librustc_fs_util\" }\n-smallvec = { version = \"0.6.8\", features = [\"union\", \"may_dangle\"] }\n+smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n measureme = \"0.4\""}, {"sha": "9b13a910c617453f08437b2284b47dbe4ad3ecc9", "filename": "src/librustc/arena.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Farena.rs?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -304,7 +304,7 @@ impl DropArena {\n         // Move the content to the arena by copying it and then forgetting\n         // the content of the SmallVec\n         vec.as_ptr().copy_to_nonoverlapping(start_ptr, len);\n-        mem::forget(vec.drain());\n+        mem::forget(vec.drain(..));\n \n         // Record the destructors after doing the allocation as that may panic\n         // and would cause `object`'s destuctor to run twice if it was recorded before"}, {"sha": "cea790375fc3d89671c1cd91ced8ff0a1cc5e112", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -525,7 +525,7 @@ impl<'tcx> DepNodeParams<'tcx> for CrateNum {\n     }\n \n     fn to_debug_str(&self, tcx: TyCtxt<'tcx>) -> String {\n-        tcx.crate_name(*self).as_str().to_string()\n+        tcx.crate_name(*self).to_string()\n     }\n }\n "}, {"sha": "c8bb35202f518806301c64f6115955b721d9c53a", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -3382,7 +3382,7 @@ pub fn is_range_literal(sess: &Session, expr: &hir::Expr) -> bool {\n     // either in std or core, i.e. has either a `::std::ops::Range` or\n     // `::core::ops::Range` prefix.\n     fn is_range_path(path: &Path) -> bool {\n-        let segs: Vec<_> = path.segments.iter().map(|seg| seg.ident.as_str().to_string()).collect();\n+        let segs: Vec<_> = path.segments.iter().map(|seg| seg.ident.to_string()).collect();\n         let segs: Vec<_> = segs.iter().map(|seg| &**seg).collect();\n \n         // \"{{root}}\" is the equivalent of `::` prefix in `Path`.\n@@ -3423,7 +3423,7 @@ pub fn is_range_literal(sess: &Session, expr: &hir::Expr) -> bool {\n         ExprKind::Call(ref func, _) => {\n             if let ExprKind::Path(QPath::TypeRelative(ref ty, ref segment)) = func.kind {\n                 if let TyKind::Path(QPath::Resolved(None, ref path)) = ty.kind {\n-                    let new_call = segment.ident.as_str() == \"new\";\n+                    let new_call = segment.ident.name == sym::new;\n                     return is_range_path(&path) && is_lit(sess, &expr.span) && new_call;\n                 }\n             }"}, {"sha": "328d475be06066e700c7bb09648a88e735e68510", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -564,7 +564,7 @@ impl<'a> State<'a> {\n             }\n             hir::ItemKind::GlobalAsm(ref ga) => {\n                 self.head(visibility_qualified(&item.vis, \"global asm\"));\n-                self.s.word(ga.asm.as_str().to_string());\n+                self.s.word(ga.asm.to_string());\n                 self.end()\n             }\n             hir::ItemKind::TyAlias(ref ty, ref generics) => {\n@@ -1855,7 +1855,7 @@ impl<'a> State<'a> {\n         self.commasep(Inconsistent, &decl.inputs, |s, ty| {\n             s.ibox(INDENT_UNIT);\n             if let Some(arg_name) = arg_names.get(i) {\n-                s.s.word(arg_name.as_str().to_string());\n+                s.s.word(arg_name.to_string());\n                 s.s.word(\":\");\n                 s.s.space();\n             } else if let Some(body_id) = body_id {"}, {"sha": "304735fb1c7ed9b9bc5c7e1e765c3cef21989161", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -9,7 +9,7 @@ use std::mem;\n use syntax::ast;\n use syntax::feature_gate;\n use syntax::parse::token;\n-use syntax::symbol::LocalInternedString;\n+use syntax::symbol::SymbolStr;\n use syntax::tokenstream;\n use syntax_pos::SourceFile;\n \n@@ -18,21 +18,21 @@ use crate::hir::def_id::{DefId, CrateNum, CRATE_DEF_INDEX};\n use smallvec::SmallVec;\n use rustc_data_structures::stable_hasher::{HashStable, ToStableHashKey, StableHasher};\n \n-impl<'a> HashStable<StableHashingContext<'a>> for LocalInternedString {\n+impl<'a> HashStable<StableHashingContext<'a>> for SymbolStr {\n     #[inline]\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n         let str = self as &str;\n         str.hash_stable(hcx, hasher)\n     }\n }\n \n-impl<'a> ToStableHashKey<StableHashingContext<'a>> for LocalInternedString {\n-    type KeyType = LocalInternedString;\n+impl<'a> ToStableHashKey<StableHashingContext<'a>> for SymbolStr {\n+    type KeyType = SymbolStr;\n \n     #[inline]\n     fn to_stable_hash_key(&self,\n                           _: &StableHashingContext<'a>)\n-                          -> LocalInternedString {\n+                          -> SymbolStr {\n         self.clone()\n     }\n }\n@@ -45,12 +45,12 @@ impl<'a> HashStable<StableHashingContext<'a>> for ast::Name {\n }\n \n impl<'a> ToStableHashKey<StableHashingContext<'a>> for ast::Name {\n-    type KeyType = LocalInternedString;\n+    type KeyType = SymbolStr;\n \n     #[inline]\n     fn to_stable_hash_key(&self,\n                           _: &StableHashingContext<'a>)\n-                          -> LocalInternedString {\n+                          -> SymbolStr {\n         self.as_str()\n     }\n }"}, {"sha": "65777fe78db3903232c0e13898dcab39b88f200a", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -7,7 +7,7 @@\n use crate::lint::{LintPass, LateLintPass, LintArray, FutureIncompatibleInfo};\n use crate::middle::stability;\n use crate::session::Session;\n-use errors::{Applicability, DiagnosticBuilder, pluralise};\n+use errors::{Applicability, DiagnosticBuilder, pluralize};\n use syntax::ast;\n use syntax::edition::Edition;\n use syntax::source_map::Span;\n@@ -651,7 +651,7 @@ pub(crate) fn add_elided_lifetime_in_path_suggestion(\n     };\n     db.span_suggestion(\n         replace_span,\n-        &format!(\"indicate the anonymous lifetime{}\", pluralise!(n)),\n+        &format!(\"indicate the anonymous lifetime{}\", pluralize!(n)),\n         suggestion,\n         Applicability::MachineApplicable\n     );"}, {"sha": "488d6332f7e39fdb6c5a6b8f8863ca4e316848d9", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -17,7 +17,7 @@ use crate::ty::{self, DefIdTree, GenericParamDefKind, TyCtxt};\n use crate::rustc::lint;\n use crate::session::Session;\n use crate::util::nodemap::{DefIdMap, FxHashMap, FxHashSet, HirIdMap, HirIdSet};\n-use errors::{Applicability, DiagnosticBuilder, pluralise};\n+use errors::{Applicability, DiagnosticBuilder, pluralize};\n use rustc_macros::HashStable;\n use std::borrow::Cow;\n use std::cell::Cell;\n@@ -3044,7 +3044,7 @@ pub fn report_missing_lifetime_specifiers(\n         span,\n         E0106,\n         \"missing lifetime specifier{}\",\n-        pluralise!(count)\n+        pluralize!(count)\n     )\n }\n "}, {"sha": "a54635c3d51a3189a63e0706cbc1d7f541093ceb", "filename": "src/librustc/mir/mono.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmono.rs?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -486,7 +486,7 @@ impl CodegenUnitNameBuilder<'tcx> {\n         if self.tcx.sess.opts.debugging_opts.human_readable_cgu_names {\n             cgu_name\n         } else {\n-            let cgu_name = &cgu_name.as_str()[..];\n+            let cgu_name = &cgu_name.as_str();\n             Symbol::intern(&CodegenUnit::mangle_name(cgu_name))\n         }\n     }"}, {"sha": "fe18a14d890586c17595a823ef4da7b7db195f7a", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -33,7 +33,7 @@ use crate::ty::subst::Subst;\n use crate::ty::SubtypePredicate;\n use crate::util::nodemap::{FxHashMap, FxHashSet};\n \n-use errors::{Applicability, DiagnosticBuilder, pluralise};\n+use errors::{Applicability, DiagnosticBuilder, pluralize};\n use std::fmt;\n use syntax::ast;\n use syntax::symbol::{sym, kw};\n@@ -1130,7 +1130,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     let restrict_msg = \"consider further restricting this bound\";\n                     let param_name = self_ty.to_string();\n                     for param in generics.params.iter().filter(|p| {\n-                        &param_name == std::convert::AsRef::<str>::as_ref(&p.name.ident().as_str())\n+                        p.name.ident().as_str() == param_name\n                     }) {\n                         if param_name.starts_with(\"impl \") {\n                             // `impl Trait` in argument:\n@@ -1553,7 +1553,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 _ => format!(\"{} {}argument{}\",\n                              arg_length,\n                              if distinct && arg_length > 1 { \"distinct \" } else { \"\" },\n-                             pluralise!(arg_length))\n+                             pluralize!(arg_length))\n             }\n         };\n "}, {"sha": "b64e44b6a5afba877ebf6c671db1b93a5b0311cb", "filename": "src/librustc/traits/on_unimplemented.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -180,7 +180,7 @@ impl<'tcx> OnUnimplementedDirective {\n                     c.ident().map_or(false, |ident| {\n                         options.contains(&(\n                             ident.name,\n-                            c.value_str().map(|s| s.as_str().to_string())\n+                            c.value_str().map(|s| s.to_string())\n                         ))\n                     })\n                 }) {"}, {"sha": "723ed6b03dadc1294a84f8c6a2c08342009fd542", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -4,7 +4,7 @@ use std::borrow::Cow;\n use std::fmt;\n use rustc_target::spec::abi;\n use syntax::ast;\n-use syntax::errors::pluralise;\n+use syntax::errors::pluralize;\n use errors::{Applicability, DiagnosticBuilder};\n use syntax_pos::Span;\n \n@@ -100,17 +100,17 @@ impl<'tcx> fmt::Display for TypeError<'tcx> {\n                 write!(f, \"expected a tuple with {} element{}, \\\n                            found one with {} element{}\",\n                        values.expected,\n-                       pluralise!(values.expected),\n+                       pluralize!(values.expected),\n                        values.found,\n-                       pluralise!(values.found))\n+                       pluralize!(values.found))\n             }\n             FixedArraySize(values) => {\n                 write!(f, \"expected an array with a fixed size of {} element{}, \\\n                            found one with {} element{}\",\n                        values.expected,\n-                       pluralise!(values.expected),\n+                       pluralize!(values.expected),\n                        values.found,\n-                       pluralise!(values.found))\n+                       pluralize!(values.found))\n             }\n             ArgCount => {\n                 write!(f, \"incorrect number of function parameters\")\n@@ -165,7 +165,7 @@ impl<'tcx> fmt::Display for TypeError<'tcx> {\n             ProjectionBoundsLength(ref values) => {\n                 write!(f, \"expected {} associated type binding{}, found {}\",\n                        values.expected,\n-                       pluralise!(values.expected),\n+                       pluralize!(values.expected),\n                        values.found)\n             },\n             ExistentialMismatch(ref values) => {\n@@ -196,7 +196,7 @@ impl<'tcx> ty::TyS<'tcx> {\n                 let n = tcx.lift(&n).unwrap();\n                 match n.try_eval_usize(tcx, ty::ParamEnv::empty()) {\n                     Some(n) => {\n-                        format!(\"array of {} element{}\", n, pluralise!(n)).into()\n+                        format!(\"array of {} element{}\", n, pluralize!(n)).into()\n                     }\n                     None => \"array\".into(),\n                 }"}, {"sha": "227fbf967c0d7e85545afe132f08c55dfac32464", "filename": "src/librustc/ty/inhabitedness/def_id_forest.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc%2Fty%2Finhabitedness%2Fdef_id_forest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc%2Fty%2Finhabitedness%2Fdef_id_forest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finhabitedness%2Fdef_id_forest.rs?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -76,19 +76,19 @@ impl<'tcx> DefIdForest {\n                 break;\n             }\n \n-            for id in ret.root_ids.drain() {\n+            for id in ret.root_ids.drain(..) {\n                 if next_forest.contains(tcx, id) {\n                     next_ret.push(id);\n                 } else {\n                     old_ret.push(id);\n                 }\n             }\n-            ret.root_ids.extend(old_ret.drain());\n+            ret.root_ids.extend(old_ret.drain(..));\n \n             next_ret.extend(next_forest.root_ids.into_iter().filter(|&id| ret.contains(tcx, id)));\n \n             mem::swap(&mut next_ret, &mut ret.root_ids);\n-            next_ret.drain();\n+            next_ret.drain(..);\n         }\n         ret\n     }\n@@ -101,7 +101,7 @@ impl<'tcx> DefIdForest {\n         let mut ret = DefIdForest::empty();\n         let mut next_ret = SmallVec::new();\n         for next_forest in iter {\n-            next_ret.extend(ret.root_ids.drain().filter(|&id| !next_forest.contains(tcx, id)));\n+            next_ret.extend(ret.root_ids.drain(..).filter(|&id| !next_forest.contains(tcx, id)));\n \n             for id in next_forest.root_ids {\n                 if !next_ret.contains(&id) {\n@@ -110,7 +110,7 @@ impl<'tcx> DefIdForest {\n             }\n \n             mem::swap(&mut next_ret, &mut ret.root_ids);\n-            next_ret.drain();\n+            next_ret.drain(..);\n         }\n         ret\n     }"}, {"sha": "4031eb6219432d523c424c3baadb2f9e3bcebb17", "filename": "src/librustc/ty/query/on_disk_cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -264,7 +264,7 @@ impl<'sess> OnDiskCache<'sess> {\n             let sorted_cnums = sorted_cnums_including_local_crate(tcx);\n             let prev_cnums: Vec<_> = sorted_cnums.iter()\n                 .map(|&cnum| {\n-                    let crate_name = tcx.original_crate_name(cnum).as_str().to_string();\n+                    let crate_name = tcx.original_crate_name(cnum).to_string();\n                     let crate_disambiguator = tcx.crate_disambiguator(cnum);\n                     (cnum.as_u32(), crate_name, crate_disambiguator)\n                 })"}, {"sha": "726965e1e7180411fe153998e248c9926e62475e", "filename": "src/librustc_apfloat/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_apfloat%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_apfloat%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_apfloat%2FCargo.toml?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -10,4 +10,4 @@ path = \"lib.rs\"\n \n [dependencies]\n bitflags = \"1.2.1\"\n-smallvec = { version = \"0.6.7\", features = [\"union\", \"may_dangle\"] }\n+smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }"}, {"sha": "6f4e7d0f0caf5a00572dc174d9843fa47964781c", "filename": "src/librustc_codegen_llvm/attributes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fattributes.rs?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -314,7 +314,7 @@ pub fn from_fn_attrs(\n             codegen_fn_attrs.target_features\n                 .iter()\n                 .map(|f| {\n-                    let feature = &*f.as_str();\n+                    let feature = &f.as_str();\n                     format!(\"+{}\", llvm_util::to_llvm_feature(cx.tcx.sess, feature))\n                 })\n         )"}, {"sha": "4a40349cb73e819fc20c155675e19ee87ba0b7c2", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -203,6 +203,10 @@ pub unsafe fn create_module(\n     let llvm_target = SmallCStr::new(&sess.target.target.llvm_target);\n     llvm::LLVMRustSetNormalizedTarget(llmod, llvm_target.as_ptr());\n \n+    if get_reloc_model(sess) == llvm::RelocMode::PIC {\n+        llvm::LLVMRustSetModulePICLevel(llmod);\n+    }\n+\n     if is_pie_binary(sess) {\n         llvm::LLVMRustSetModulePIELevel(llmod);\n     }"}, {"sha": "482bcf2aa5835ca1d47ee7c535c81a5e1847ae6a", "filename": "src/librustc_codegen_llvm/debuginfo/namespace.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fnamespace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fnamespace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fnamespace.rs?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -34,11 +34,11 @@ pub fn item_namespace(cx: &CodegenCx<'ll, '_>, def_id: DefId) -> &'ll DIScope {\n     });\n \n     let namespace_name = match def_key.disambiguated_data.data {\n-        DefPathData::CrateRoot => cx.tcx.crate_name(def_id.krate).as_str(),\n-        data => data.as_symbol().as_str()\n+        DefPathData::CrateRoot => cx.tcx.crate_name(def_id.krate),\n+        data => data.as_symbol()\n     };\n \n-    let namespace_name = SmallCStr::new(&namespace_name);\n+    let namespace_name = SmallCStr::new(&namespace_name.as_str());\n \n     let scope = unsafe {\n         llvm::LLVMRustDIBuilderCreateNameSpace("}, {"sha": "548e8c732a737cd256be0c04ab88e316f51656fb", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -1807,6 +1807,7 @@ extern \"C\" {\n \n     pub fn LLVMRustSetComdat(M: &'a Module, V: &'a Value, Name: *const c_char);\n     pub fn LLVMRustUnsetComdat(V: &Value);\n+    pub fn LLVMRustSetModulePICLevel(M: &Module);\n     pub fn LLVMRustSetModulePIELevel(M: &Module);\n     pub fn LLVMRustModuleBufferCreate(M: &Module) -> &'static mut ModuleBuffer;\n     pub fn LLVMRustModuleBufferPtr(p: &ModuleBuffer) -> *const u8;"}, {"sha": "b8501f0e12a70ed4abf854297612c29a37903716", "filename": "src/librustc_codegen_ssa/back/command.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_codegen_ssa%2Fback%2Fcommand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_codegen_ssa%2Fback%2Fcommand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fcommand.rs?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -53,7 +53,7 @@ impl Command {\n     }\n \n     pub fn sym_arg(&mut self, arg: Symbol) -> &mut Command {\n-        self.arg(&arg.as_str());\n+        self.arg(&*arg.as_str());\n         self\n     }\n "}, {"sha": "35b62603b076afb3e88059184115250200086d67", "filename": "src/librustc_codegen_ssa/back/symbol_export.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -129,9 +129,9 @@ fn reachable_non_generics_provider(\n                 //\n                 // In general though we won't link right if these\n                 // symbols are stripped, and LTO currently strips them.\n-                if &*name == \"rust_eh_personality\" ||\n-                   &*name == \"rust_eh_register_frames\" ||\n-                   &*name == \"rust_eh_unregister_frames\" {\n+                if name == \"rust_eh_personality\" ||\n+                   name == \"rust_eh_register_frames\" ||\n+                   name == \"rust_eh_unregister_frames\" {\n                     SymbolExportLevel::C\n                 } else {\n                     SymbolExportLevel::Rust"}, {"sha": "c3f2a5161ae1c4c93470268d21fbebf72871fb42", "filename": "src/librustc_codegen_ssa/base.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_codegen_ssa%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_codegen_ssa%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fbase.rs?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -552,8 +552,7 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n     } else if let Some(kind) = *tcx.sess.allocator_kind.get() {\n         let llmod_id = cgu_name_builder.build_cgu_name(LOCAL_CRATE,\n                                                        &[\"crate\"],\n-                                                       Some(\"allocator\")).as_str()\n-                                                                         .to_string();\n+                                                       Some(\"allocator\")).to_string();\n         let mut modules = backend.new_metadata(tcx, &llmod_id);\n         time(tcx.sess, \"write allocator module\", || {\n             backend.codegen_allocator(tcx, &mut modules, kind)\n@@ -576,8 +575,7 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n         // Codegen the encoded metadata.\n         let metadata_cgu_name = cgu_name_builder.build_cgu_name(LOCAL_CRATE,\n                                                                 &[\"crate\"],\n-                                                                Some(\"metadata\")).as_str()\n-                                                                                 .to_string();\n+                                                                Some(\"metadata\")).to_string();\n         let mut metadata_llvm_module = backend.new_metadata(tcx, &metadata_cgu_name);\n         time(tcx.sess, \"write compressed metadata\", || {\n             backend.write_compressed_metadata(tcx, &ongoing_codegen.metadata,"}, {"sha": "13cd202158b771ab389469805ca45d694b35229b", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -995,7 +995,8 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         bx: &mut Bx,\n         span: Span,\n     ) -> OperandRef<'tcx, Bx::Value> {\n-        let caller = bx.tcx().sess.source_map().lookup_char_pos(span.lo());\n+        let topmost = span.ctxt().outer_expn().expansion_cause().unwrap_or(span);\n+        let caller = bx.tcx().sess.source_map().lookup_char_pos(topmost.lo());\n         let const_loc = bx.tcx().const_caller_location((\n             Symbol::intern(&caller.file.name.to_string()),\n             caller.line as u32,"}, {"sha": "66e1b6d949ef7254a7f87615a350b926b0df9ca8", "filename": "src/librustc_codegen_utils/symbol_names/legacy.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Flegacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Flegacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Flegacy.rs?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -121,9 +121,10 @@ fn get_symbol_hash<'tcx>(\n         substs.hash_stable(&mut hcx, &mut hasher);\n \n         if let Some(instantiating_crate) = instantiating_crate {\n-            (&tcx.original_crate_name(instantiating_crate).as_str()[..])\n+            tcx.original_crate_name(instantiating_crate).as_str()\n+                .hash_stable(&mut hcx, &mut hasher);\n+            tcx.crate_disambiguator(instantiating_crate)\n                 .hash_stable(&mut hcx, &mut hasher);\n-            (&tcx.crate_disambiguator(instantiating_crate)).hash_stable(&mut hcx, &mut hasher);\n         }\n \n         // We want to avoid accidental collision between different types of instances."}, {"sha": "e79b3a81b9654331cf589b780c69dc8a8dd9c301", "filename": "src/librustc_data_structures/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_data_structures%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_data_structures%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2FCargo.toml?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -23,7 +23,7 @@ stable_deref_trait = \"1.0.0\"\n rayon = { version = \"0.3.0\", package = \"rustc-rayon\" }\n rayon-core = { version = \"0.3.0\", package = \"rustc-rayon-core\" }\n rustc-hash = \"1.0.1\"\n-smallvec = { version = \"0.6.7\", features = [\"union\", \"may_dangle\"] }\n+smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n rustc_index = { path = \"../librustc_index\", package = \"rustc_index\" }\n \n [dependencies.parking_lot]"}, {"sha": "291920f17f66d7fa1d94ab3c5c9a5fec0e934e15", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -12,7 +12,7 @@ use Destination::*;\n use syntax_pos::{SourceFile, Span, MultiSpan};\n \n use crate::{\n-    Level, CodeSuggestion, Diagnostic, SubDiagnostic, pluralise,\n+    Level, CodeSuggestion, Diagnostic, SubDiagnostic, pluralize,\n     SuggestionStyle, SourceMapper, SourceMapperDyn, DiagnosticId,\n };\n use crate::Level::Error;\n@@ -1581,7 +1581,7 @@ impl EmitterWriter {\n         }\n         if suggestions.len() > MAX_SUGGESTIONS {\n             let others = suggestions.len() - MAX_SUGGESTIONS;\n-            let msg = format!(\"and {} other candidate{}\", others, pluralise!(others));\n+            let msg = format!(\"and {} other candidate{}\", others, pluralize!(others));\n             buffer.puts(row_num, max_line_num_len + 3, &msg, Style::NoStyle);\n         } else if notice_capitalization {\n             let msg = \"notice the capitalization difference\";"}, {"sha": "67c180a05e9211bb7ed231f13393a5e90fb86a15", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -1027,7 +1027,7 @@ impl Level {\n }\n \n #[macro_export]\n-macro_rules! pluralise {\n+macro_rules! pluralize {\n     ($x:expr) => {\n         if $x != 1 { \"s\" } else { \"\" }\n     };"}, {"sha": "483b515f2ba4ddfa1bdb2f250795e2ba3b69c44b", "filename": "src/librustc_incremental/assert_module_sources.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_incremental%2Fassert_module_sources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_incremental%2Fassert_module_sources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fassert_module_sources.rs?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -31,10 +31,6 @@ use syntax::symbol::{Symbol, sym};\n use rustc::ich::{ATTR_PARTITION_REUSED, ATTR_PARTITION_CODEGENED,\n                  ATTR_EXPECTED_CGU_REUSE};\n \n-const MODULE: Symbol = sym::module;\n-const CFG: Symbol = sym::cfg;\n-const KIND: Symbol = sym::kind;\n-\n pub fn assert_module_sources(tcx: TyCtxt<'_>) {\n     tcx.dep_graph.with_ignore(|| {\n         if tcx.sess.opts.incremental.is_none() {\n@@ -71,7 +67,7 @@ impl AssertModuleSource<'tcx> {\n         } else if attr.check_name(ATTR_PARTITION_CODEGENED) {\n             (CguReuse::No, ComparisonKind::Exact)\n         } else if attr.check_name(ATTR_EXPECTED_CGU_REUSE) {\n-            match &self.field(attr, KIND).as_str()[..] {\n+            match &*self.field(attr, sym::kind).as_str() {\n                 \"no\" => (CguReuse::No, ComparisonKind::Exact),\n                 \"pre-lto\" => (CguReuse::PreLto, ComparisonKind::Exact),\n                 \"post-lto\" => (CguReuse::PostLto, ComparisonKind::Exact),\n@@ -98,8 +94,8 @@ impl AssertModuleSource<'tcx> {\n             return;\n         }\n \n-        let user_path = self.field(attr, MODULE).as_str().to_string();\n-        let crate_name = self.tcx.crate_name(LOCAL_CRATE).as_str().to_string();\n+        let user_path = self.field(attr, sym::module).to_string();\n+        let crate_name = self.tcx.crate_name(LOCAL_CRATE).to_string();\n \n         if !user_path.starts_with(&crate_name) {\n             let msg = format!(\"Found malformed codegen unit name `{}`. \\\n@@ -125,7 +121,7 @@ impl AssertModuleSource<'tcx> {\n                                                        cgu_path_components,\n                                                        cgu_special_suffix);\n \n-        debug!(\"mapping '{}' to cgu name '{}'\", self.field(attr, MODULE), cgu_name);\n+        debug!(\"mapping '{}' to cgu name '{}'\", self.field(attr, sym::module), cgu_name);\n \n         if !self.available_cgus.contains(&cgu_name) {\n             self.tcx.sess.span_err(attr.span,\n@@ -135,7 +131,7 @@ impl AssertModuleSource<'tcx> {\n                     cgu_name,\n                     self.available_cgus\n                         .iter()\n-                        .map(|cgu| cgu.as_str().to_string())\n+                        .map(|cgu| cgu.to_string())\n                         .collect::<Vec<_>>()\n                         .join(\", \")));\n         }\n@@ -169,7 +165,7 @@ impl AssertModuleSource<'tcx> {\n     /// cfg flag called `foo`.\n     fn check_config(&self, attr: &ast::Attribute) -> bool {\n         let config = &self.tcx.sess.parse_sess.config;\n-        let value = self.field(attr, CFG);\n+        let value = self.field(attr, sym::cfg);\n         debug!(\"check_config(config={:?}, value={:?})\", config, value);\n         if config.iter().any(|&(name, _)| name == value) {\n             debug!(\"check_config: matched\");"}, {"sha": "ea156a94ea17be34cf88a0249688d2d1057f0220", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -303,7 +303,7 @@ impl DirtyCleanVisitor<'tcx> {\n         for item in attr.meta_item_list().unwrap_or_else(Vec::new) {\n             if item.check_name(LABEL) {\n                 let value = expect_associated_value(self.tcx, &item);\n-                return Some(self.resolve_labels(&item, value.as_str().as_ref()));\n+                return Some(self.resolve_labels(&item, &value.as_str()));\n             }\n         }\n         None\n@@ -314,7 +314,7 @@ impl DirtyCleanVisitor<'tcx> {\n         for item in attr.meta_item_list().unwrap_or_else(Vec::new) {\n             if item.check_name(EXCEPT) {\n                 let value = expect_associated_value(self.tcx, &item);\n-                return self.resolve_labels(&item, value.as_str().as_ref());\n+                return self.resolve_labels(&item, &value.as_str());\n             }\n         }\n         // if no `label` or `except` is given, only the node's group are asserted"}, {"sha": "1435297f27adaccd103848b414f6866f035113bb", "filename": "src/librustc_index/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_index%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_index%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_index%2FCargo.toml?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -11,4 +11,4 @@ doctest = false\n \n [dependencies]\n rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n-smallvec = { version = \"0.6.7\", features = [\"union\", \"may_dangle\"] }\n+smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }"}, {"sha": "98e4f974a9f2372683a932566b00083118325269", "filename": "src/librustc_interface/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_interface%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_interface%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2FCargo.toml?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -12,7 +12,7 @@ doctest = false\n [dependencies]\n log = \"0.4\"\n rayon = { version = \"0.3.0\", package = \"rustc-rayon\" }\n-smallvec = { version = \"0.6.7\", features = [\"union\", \"may_dangle\"] }\n+smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n syntax = { path = \"../libsyntax\" }\n syntax_ext = { path = \"../libsyntax_ext\" }\n syntax_expand = { path = \"../libsyntax_expand\" }"}, {"sha": "ed0911379c4b3ccf79204a7c97706ba531186ace", "filename": "src/librustc_lexer/src/cursor.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_lexer%2Fsrc%2Fcursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_lexer%2Fsrc%2Fcursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lexer%2Fsrc%2Fcursor.rs?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -41,10 +41,20 @@ impl<'a> Cursor<'a> {\n     /// If requested position doesn't exist, `EOF_CHAR` is returned.\n     /// However, getting `EOF_CHAR` doesn't always mean actual end of file,\n     /// it should be checked with `is_eof` method.\n-    pub(crate) fn nth_char(&self, n: usize) -> char {\n+    fn nth_char(&self, n: usize) -> char {\n         self.chars().nth(n).unwrap_or(EOF_CHAR)\n     }\n \n+    /// Peeks the next symbol from the input stream without consuming it.\n+    pub(crate) fn first(&self) -> char {\n+        self.nth_char(0)\n+    }\n+\n+    /// Peeks the second symbol from the input stream without consuming it.\n+    pub(crate) fn second(&self) -> char {\n+        self.nth_char(1)\n+    }\n+\n     /// Checks if there is nothing more to consume.\n     pub(crate) fn is_eof(&self) -> bool {\n         self.chars.as_str().is_empty()"}, {"sha": "c50808adec1dd58c50cd21c6b37aac4e73b3b262", "filename": "src/librustc_lexer/src/lib.rs", "status": "modified", "additions": 148, "deletions": 121, "changes": 269, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_lexer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_lexer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lexer%2Fsrc%2Flib.rs?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -18,6 +18,8 @@ mod cursor;\n pub mod unescape;\n \n use crate::cursor::{Cursor, EOF_CHAR};\n+use self::TokenKind::*;\n+use self::LiteralKind::*;\n \n /// Parsed token.\n /// It doesn't contain information about data that has been parsed,\n@@ -116,7 +118,6 @@ pub enum TokenKind {\n     /// Unknown token, not expected by the lexer, e.g. \"\u2116\"\n     Unknown,\n }\n-use self::TokenKind::*;\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]\n pub enum LiteralKind {\n@@ -137,7 +138,6 @@ pub enum LiteralKind {\n     /// \"br\"abc\"\", \"br#\"abc\"#\", \"br####\"ab\"###\"c\"####\", \"br#\"a\"\n     RawByteStr { n_hashes: usize, started: bool, terminated: bool },\n }\n-use self::LiteralKind::*;\n \n /// Base of numeric literal encoding according to its prefix.\n #[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]\n@@ -241,14 +241,13 @@ pub fn is_id_continue(c: char) -> bool {\n         || (c > '\\x7f' && unicode_xid::UnicodeXID::is_xid_continue(c))\n }\n \n-\n impl Cursor<'_> {\n     /// Parses a token from the input string.\n     fn advance_token(&mut self) -> Token {\n         let first_char = self.bump().unwrap();\n         let token_kind = match first_char {\n             // Slash, comment or block comment.\n-            '/' => match self.nth_char(0) {\n+            '/' => match self.first() {\n                 '/' => self.line_comment(),\n                 '*' => self.block_comment(),\n                 _ => Slash,\n@@ -257,8 +256,8 @@ impl Cursor<'_> {\n             // Whitespace sequence.\n             c if is_whitespace(c) => self.whitespace(),\n \n-            // Raw string literal or identifier.\n-            'r' => match (self.nth_char(0), self.nth_char(1)) {\n+            // Raw identifier, raw string literal or identifier.\n+            'r' => match (self.first(), self.second()) {\n                 ('#', c1) if is_id_start(c1) => self.raw_ident(),\n                 ('#', _) | ('\"', _) => {\n                     let (n_hashes, started, terminated) = self.raw_double_quoted_string();\n@@ -273,7 +272,7 @@ impl Cursor<'_> {\n             },\n \n             // Byte literal, byte string literal, raw byte string literal or identifier.\n-            'b' => match (self.nth_char(0), self.nth_char(1)) {\n+            'b' => match (self.first(), self.second()) {\n                 ('\\'', _) => {\n                     self.bump();\n                     let terminated = self.single_quoted_string();\n@@ -366,31 +365,23 @@ impl Cursor<'_> {\n     }\n \n     fn line_comment(&mut self) -> TokenKind {\n-        debug_assert!(self.prev() == '/' && self.nth_char(0) == '/');\n+        debug_assert!(self.prev() == '/' && self.first() == '/');\n         self.bump();\n-        loop {\n-            match self.nth_char(0) {\n-                '\\n' => break,\n-                EOF_CHAR if self.is_eof() => break,\n-                _ => {\n-                    self.bump();\n-                }\n-            }\n-        }\n+        self.eat_while(|c| c != '\\n');\n         LineComment\n     }\n \n     fn block_comment(&mut self) -> TokenKind {\n-        debug_assert!(self.prev() == '/' && self.nth_char(0) == '*');\n+        debug_assert!(self.prev() == '/' && self.first() == '*');\n         self.bump();\n         let mut depth = 1usize;\n         while let Some(c) = self.bump() {\n             match c {\n-                '/' if self.nth_char(0) == '*' => {\n+                '/' if self.first() == '*' => {\n                     self.bump();\n                     depth += 1;\n                 }\n-                '*' if self.nth_char(0) == '/' => {\n+                '*' if self.first() == '/' => {\n                     self.bump();\n                     depth -= 1;\n                     if depth == 0 {\n@@ -409,31 +400,27 @@ impl Cursor<'_> {\n \n     fn whitespace(&mut self) -> TokenKind {\n         debug_assert!(is_whitespace(self.prev()));\n-        while is_whitespace(self.nth_char(0)) {\n-            self.bump();\n-        }\n+        self.eat_while(is_whitespace);\n         Whitespace\n     }\n \n     fn raw_ident(&mut self) -> TokenKind {\n         debug_assert!(\n             self.prev() == 'r'\n-                && self.nth_char(0) == '#'\n-                && is_id_start(self.nth_char(1))\n+                && self.first() == '#'\n+                && is_id_start(self.second())\n         );\n+        // Eat \"#\" symbol.\n         self.bump();\n-        self.bump();\n-        while is_id_continue(self.nth_char(0)) {\n-            self.bump();\n-        }\n+        // Eat the identifier part of RawIdent.\n+        self.eat_identifier();\n         RawIdent\n     }\n \n     fn ident(&mut self) -> TokenKind {\n         debug_assert!(is_id_start(self.prev()));\n-        while is_id_continue(self.nth_char(0)) {\n-            self.bump();\n-        }\n+        // Start is already eaten, eat the rest of identifier.\n+        self.eat_while(is_id_continue);\n         Ident\n     }\n \n@@ -442,7 +429,7 @@ impl Cursor<'_> {\n         let mut base = Base::Decimal;\n         if first_digit == '0' {\n             // Attempt to parse encoding base.\n-            let has_digits = match self.nth_char(0) {\n+            let has_digits = match self.first() {\n                 'b' => {\n                     base = Base::Binary;\n                     self.bump();\n@@ -476,23 +463,23 @@ impl Cursor<'_> {\n             self.eat_decimal_digits();\n         };\n \n-        match self.nth_char(0) {\n+        match self.first() {\n             // Don't be greedy if this is actually an\n             // integer literal followed by field/method access or a range pattern\n             // (`0..2` and `12.foo()`)\n-            '.' if self.nth_char(1) != '.'\n-                && !is_id_start(self.nth_char(1)) =>\n+            '.' if self.second() != '.'\n+                && !is_id_start(self.second()) =>\n             {\n                 // might have stuff after the ., and if it does, it needs to start\n                 // with a number\n                 self.bump();\n                 let mut empty_exponent = false;\n-                if self.nth_char(0).is_digit(10) {\n+                if self.first().is_digit(10) {\n                     self.eat_decimal_digits();\n-                    match self.nth_char(0) {\n+                    match self.first() {\n                         'e' | 'E' => {\n                             self.bump();\n-                            empty_exponent = self.float_exponent().is_err()\n+                            empty_exponent = !self.eat_float_exponent();\n                         }\n                         _ => (),\n                     }\n@@ -501,7 +488,7 @@ impl Cursor<'_> {\n             }\n             'e' | 'E' => {\n                 self.bump();\n-                let empty_exponent = self.float_exponent().is_err();\n+                let empty_exponent = !self.eat_float_exponent();\n                 Float { base, empty_exponent }\n             }\n             _ => Int { base, empty_int: false },\n@@ -510,65 +497,76 @@ impl Cursor<'_> {\n \n     fn lifetime_or_char(&mut self) -> TokenKind {\n         debug_assert!(self.prev() == '\\'');\n-        let mut starts_with_number = false;\n-\n-        // Check if the first symbol after '\\'' is a valid identifier\n-        // character or a number (not a digit followed by '\\'').\n-        if (is_id_start(self.nth_char(0))\n-            || self.nth_char(0).is_digit(10) && {\n-                starts_with_number = true;\n-                true\n-            })\n-            && self.nth_char(1) != '\\''\n-        {\n-            self.bump();\n \n-            // Skip the identifier.\n-            while is_id_continue(self.nth_char(0)) {\n-                self.bump();\n-            }\n+        let can_be_a_lifetime = if self.second() == '\\'' {\n+            // It's surely not a lifetime.\n+            false\n+        } else {\n+            // If the first symbol is valid for identifier, it can be a lifetime.\n+            // Also check if it's a number for a better error reporting (so '0 will\n+            // be reported as invalid lifetime and not as unterminated char literal).\n+            is_id_start(self.first()) || self.first().is_digit(10)\n+        };\n \n-            return if self.nth_char(0) == '\\'' {\n-                self.bump();\n-                let kind = Char { terminated: true };\n-                Literal { kind, suffix_start: self.len_consumed() }\n-            } else {\n-                Lifetime { starts_with_number }\n-            };\n+        if !can_be_a_lifetime {\n+            let terminated = self.single_quoted_string();\n+            let suffix_start = self.len_consumed();\n+            if terminated {\n+                self.eat_literal_suffix();\n+            }\n+            let kind = Char { terminated };\n+            return Literal { kind, suffix_start };\n         }\n \n-        // This is not a lifetime (checked above), parse a char literal.\n-        let terminated = self.single_quoted_string();\n-        let suffix_start = self.len_consumed();\n-        if terminated {\n-            self.eat_literal_suffix();\n+        // Either a lifetime or a character literal with\n+        // length greater than 1.\n+\n+        let starts_with_number = self.first().is_digit(10);\n+\n+        // Skip the literal contents.\n+        // First symbol can be a number (which isn't a valid identifier start),\n+        // so skip it without any checks.\n+        self.bump();\n+        self.eat_while(is_id_continue);\n+\n+        // Check if after skipping literal contents we've met a closing\n+        // single quote (which means that user attempted to create a\n+        // string with single quotes).\n+        if self.first() == '\\'' {\n+            self.bump();\n+            let kind = Char { terminated: true };\n+            return Literal { kind, suffix_start: self.len_consumed() };\n         }\n-        let kind = Char { terminated };\n-        return Literal { kind, suffix_start };\n+\n+        return Lifetime { starts_with_number };\n     }\n \n     fn single_quoted_string(&mut self) -> bool {\n         debug_assert!(self.prev() == '\\'');\n-        // Parse `'''` as a single char literal.\n-        if self.nth_char(0) == '\\'' && self.nth_char(1) == '\\'' {\n+        // Check if it's a one-symbol literal.\n+        if self.second() == '\\'' && self.first() != '\\\\' {\n+            self.bump();\n             self.bump();\n+            return true;\n         }\n+\n+        // Literal has more than one symbol.\n+\n         // Parse until either quotes are terminated or error is detected.\n-        let mut first = true;\n         loop {\n-            match self.nth_char(0) {\n-                // Probably beginning of the comment, which we don't want to include\n-                // to the error report.\n-                '/' if !first => break,\n-                // Newline without following '\\'' means unclosed quote, stop parsing.\n-                '\\n' if self.nth_char(1) != '\\'' => break,\n-                // End of file, stop parsing.\n-                EOF_CHAR if self.is_eof() => break,\n+            match self.first() {\n                 // Quotes are terminated, finish parsing.\n                 '\\'' => {\n                     self.bump();\n                     return true;\n                 }\n+                // Probably beginning of the comment, which we don't want to include\n+                // to the error report.\n+                '/' => break,\n+                // Newline without following '\\'' means unclosed quote, stop parsing.\n+                '\\n' if self.second() != '\\'' => break,\n+                // End of file, stop parsing.\n+                EOF_CHAR if self.is_eof() => break,\n                 // Escaped slash is considered one character, so bump twice.\n                 '\\\\' => {\n                     self.bump();\n@@ -579,71 +577,80 @@ impl Cursor<'_> {\n                     self.bump();\n                 }\n             }\n-            first = false;\n         }\n+        // String was not terminated.\n         false\n     }\n \n     /// Eats double-quoted string and returns true\n     /// if string is terminated.\n     fn double_quoted_string(&mut self) -> bool {\n         debug_assert!(self.prev() == '\"');\n-        loop {\n-            match self.nth_char(0) {\n+        while let Some(c) = self.bump() {\n+            match c {\n                 '\"' => {\n-                    self.bump();\n                     return true;\n                 }\n-                EOF_CHAR if self.is_eof() => return false,\n-                '\\\\' if self.nth_char(1) == '\\\\' || self.nth_char(1) == '\"' => {\n+                '\\\\' if self.first() == '\\\\' || self.first() == '\"' => {\n+                    // Bump again to skip escaped character.\n                     self.bump();\n                 }\n                 _ => (),\n             }\n-            self.bump();\n         }\n+        // End of file reached.\n+        false\n     }\n \n     /// Eats the double-quoted string and returns a tuple of\n     /// (amount of the '#' symbols, raw string started, raw string terminated)\n     fn raw_double_quoted_string(&mut self) -> (usize, bool, bool) {\n         debug_assert!(self.prev() == 'r');\n+        let mut started: bool = false;\n+        let mut finished: bool = false;\n+\n         // Count opening '#' symbols.\n-        let n_hashes = {\n-            let mut acc: usize = 0;\n-            loop {\n-                match self.bump() {\n-                    Some('#') => acc += 1,\n-                    Some('\"') => break acc,\n-                    None | Some(_) => return (acc, false, false),\n-                }\n+        let n_hashes = self.eat_while(|c| c == '#');\n+\n+        // Check that string is started.\n+        match self.bump() {\n+            Some('\"') => started = true,\n+            _ => return (n_hashes, started, finished),\n+        }\n+\n+        // Skip the string contents and on each '#' character met, check if this is\n+        // a raw string termination.\n+        while !finished {\n+            self.eat_while(|c| c != '\"');\n+\n+            if self.is_eof() {\n+                return (n_hashes, started, finished);\n             }\n-        };\n \n-        // Skip the string itself and check that amount of closing '#'\n-        // symbols is equal to the amount of opening ones.\n-        loop {\n-            match self.bump() {\n-                Some('\"') => {\n-                    let mut acc = n_hashes;\n-                    while self.nth_char(0) == '#' && acc > 0 {\n-                        self.bump();\n-                        acc -= 1;\n-                    }\n-                    if acc == 0 {\n-                        return (n_hashes, true, true);\n-                    }\n+            // Eat closing double quote.\n+            self.bump();\n+\n+            // Check that amount of closing '#' symbols\n+            // is equal to the amount of opening ones.\n+            let mut hashes_left = n_hashes;\n+            let is_closing_hash = |c| {\n+                if c == '#' && hashes_left != 0 {\n+                    hashes_left -= 1;\n+                    true\n+                } else {\n+                    false\n                 }\n-                Some(_) => (),\n-                None => return (n_hashes, true, false),\n-            }\n+            };\n+            finished = self.eat_while(is_closing_hash) == n_hashes;\n         }\n+\n+        (n_hashes, started, finished)\n     }\n \n     fn eat_decimal_digits(&mut self) -> bool {\n         let mut has_digits = false;\n         loop {\n-            match self.nth_char(0) {\n+            match self.first() {\n                 '_' => {\n                     self.bump();\n                 }\n@@ -660,7 +667,7 @@ impl Cursor<'_> {\n     fn eat_hexadecimal_digits(&mut self) -> bool {\n         let mut has_digits = false;\n         loop {\n-            match self.nth_char(0) {\n+            match self.first() {\n                 '_' => {\n                     self.bump();\n                 }\n@@ -674,23 +681,43 @@ impl Cursor<'_> {\n         has_digits\n     }\n \n-    fn float_exponent(&mut self) -> Result<(), ()> {\n+    /// Eats the float exponent. Returns true if at least one digit was met,\n+    /// and returns false otherwise.\n+    fn eat_float_exponent(&mut self) -> bool {\n         debug_assert!(self.prev() == 'e' || self.prev() == 'E');\n-        if self.nth_char(0) == '-' || self.nth_char(0) == '+' {\n+        if self.first() == '-' || self.first() == '+' {\n             self.bump();\n         }\n-        if self.eat_decimal_digits() { Ok(()) } else { Err(()) }\n+        self.eat_decimal_digits()\n     }\n \n-    // Eats the suffix if it's an identifier.\n+    // Eats the suffix of the literal, e.g. \"_u8\".\n     fn eat_literal_suffix(&mut self) {\n-        if !is_id_start(self.nth_char(0)) {\n+        self.eat_identifier();\n+    }\n+\n+    // Eats the identifier.\n+    fn eat_identifier(&mut self) {\n+        if !is_id_start(self.first()) {\n             return;\n         }\n         self.bump();\n \n-        while is_id_continue(self.nth_char(0)) {\n+        self.eat_while(is_id_continue);\n+    }\n+\n+    /// Eats symbols while predicate returns true or until the end of file is reached.\n+    /// Returns amount of eaten symbols.\n+    fn eat_while<F>(&mut self, mut predicate: F) -> usize\n+    where\n+        F: FnMut(char) -> bool\n+    {\n+        let mut eaten: usize = 0;\n+        while predicate(self.first()) && !self.is_eof() {\n+            eaten += 1;\n             self.bump();\n         }\n+\n+        eaten\n     }\n }"}, {"sha": "30d68fd0bfcb14cc416f1a6a6f0995a719595eb5", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -1476,14 +1476,12 @@ impl KeywordIdents {\n         let mut lint = cx.struct_span_lint(\n             KEYWORD_IDENTS,\n             ident.span,\n-            &format!(\"`{}` is a keyword in the {} edition\",\n-                     ident.as_str(),\n-                     next_edition),\n+            &format!(\"`{}` is a keyword in the {} edition\", ident, next_edition),\n         );\n         lint.span_suggestion(\n             ident.span,\n             \"you can use a raw identifier to stay compatible\",\n-            format!(\"r#{}\", ident.as_str()),\n+            format!(\"r#{}\", ident),\n             Applicability::MachineApplicable,\n         );\n         lint.emit()"}, {"sha": "642b8e3279d6655b9707475d7e50cd58a510d82d", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -10,7 +10,7 @@ use lint::{LintPass, EarlyLintPass, LateLintPass};\n \n use syntax::ast;\n use syntax::attr;\n-use syntax::errors::{Applicability, pluralise};\n+use syntax::errors::{Applicability, pluralize};\n use syntax::feature_gate::{AttributeType, BuiltinAttribute, BUILTIN_ATTRIBUTE_MAP};\n use syntax::print::pprust;\n use syntax::symbol::{kw, sym};\n@@ -144,7 +144,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n                 return true;\n             }\n \n-            let plural_suffix = pluralise!(plural_len);\n+            let plural_suffix = pluralize!(plural_len);\n \n             match ty.kind {\n                 ty::Adt(..) if ty.is_box() => {"}, {"sha": "5bc047e001b67c37e141d42861eaba202eb56f14", "filename": "src/librustc_metadata/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_metadata%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_metadata%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2FCargo.toml?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -13,7 +13,7 @@ doctest = false\n flate2 = \"1.0\"\n log = \"0.4\"\n memmap = \"0.6\"\n-smallvec = { version = \"0.6.7\", features = [\"union\", \"may_dangle\"] }\n+smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n rustc = { path = \"../librustc\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }"}, {"sha": "483b1a40e44d60152bbc677ef84fd9801ee4d243", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -121,7 +121,7 @@ impl<'a> CrateLoader<'a> {\n             // `source` stores paths which are normalized which may be different\n             // from the strings on the command line.\n             let source = &self.cstore.get_crate_data(cnum).source;\n-            if let Some(entry) = self.sess.opts.externs.get(&*name.as_str()) {\n+            if let Some(entry) = self.sess.opts.externs.get(&name.as_str()) {\n                 // Only use `--extern crate_name=path` here, not `--extern crate_name`.\n                 let found = entry.locations.iter().filter_map(|l| l.as_ref()).any(|l| {\n                     let l = fs::canonicalize(l).ok();"}, {"sha": "c9de66a5c87262422bb8593cab060406f755508d", "filename": "src/librustc_metadata/native_libs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_metadata%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_metadata%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fnative_libs.rs?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -68,7 +68,7 @@ impl ItemLikeVisitor<'tcx> for Collector<'tcx> {\n                         Some(name) => name,\n                         None => continue, // skip like historical compilers\n                     };\n-                    lib.kind = match &kind.as_str()[..] {\n+                    lib.kind = match &*kind.as_str() {\n                         \"static\" => cstore::NativeStatic,\n                         \"static-nobundle\" => cstore::NativeStaticNobundle,\n                         \"dylib\" => cstore::NativeUnknown,"}, {"sha": "8c62640353a9e83c2c0db36ac324b539c11a0013", "filename": "src/librustc_mir/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_mir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_mir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2FCargo.toml?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -26,4 +26,4 @@ rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n rustc_apfloat = { path = \"../librustc_apfloat\" }\n-smallvec = { version = \"0.6.7\", features = [\"union\", \"may_dangle\"] }\n+smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }"}, {"sha": "0913d743328a7934dbc299bea52198c14ab61699", "filename": "src/librustc_mir/borrow_check/conflict_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -974,7 +974,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         let mut err = self.cannot_borrow_across_destructor(borrow_span);\n \n         let what_was_dropped = match self.describe_place(place.as_ref()) {\n-            Some(name) => format!(\"`{}`\", name.as_str()),\n+            Some(name) => format!(\"`{}`\", name),\n             None => String::from(\"temporary value\"),\n         };\n "}, {"sha": "29423536e653ad2d3cb7050ae01f95b7c92eb7c5", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -548,7 +548,7 @@ fn joined_uncovered_patterns(witnesses: &[super::Pat<'_>]) -> String {\n }\n \n fn pattern_not_covered_label(witnesses: &[super::Pat<'_>], joined_patterns: &str) -> String {\n-    format!(\"pattern{} {} not covered\", rustc_errors::pluralise!(witnesses.len()), joined_patterns)\n+    format!(\"pattern{} {} not covered\", rustc_errors::pluralize!(witnesses.len()), joined_patterns)\n }\n \n /// Point at the definition of non-covered `enum` variants."}, {"sha": "1b5cc2f0948ab5854490e2715ee3cb985e61ddd7", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -95,10 +95,11 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     ) -> InterpResult<'tcx, bool> {\n         let substs = instance.substs;\n \n-        let intrinsic_name = &self.tcx.item_name(instance.def_id()).as_str()[..];\n+        let intrinsic_name = &*self.tcx.item_name(instance.def_id()).as_str();\n         match intrinsic_name {\n             \"caller_location\" => {\n-                let caller = self.tcx.sess.source_map().lookup_char_pos(span.lo());\n+                let topmost = span.ctxt().outer_expn().expansion_cause().unwrap_or(span);\n+                let caller = self.tcx.sess.source_map().lookup_char_pos(topmost.lo());\n                 let location = self.alloc_caller_location(\n                     Symbol::intern(&caller.file.name.to_string()),\n                     caller.line as u32,"}, {"sha": "7d5507168587b400dfa21731709ba75932d6d85c", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -642,17 +642,17 @@ pub fn check_unsafety(tcx: TyCtxt<'_>, def_id: DefId) {\n                 struct_span_err!(\n                     tcx.sess, source_info.span, E0133,\n                     \"{} is unsafe and requires unsafe function or block\", description)\n-                    .span_label(source_info.span, &description.as_str()[..])\n-                    .note(&details.as_str()[..])\n+                    .span_label(source_info.span, &*description.as_str())\n+                    .note(&details.as_str())\n                     .emit();\n             }\n             UnsafetyViolationKind::ExternStatic(lint_hir_id) => {\n                 tcx.lint_node_note(SAFE_EXTERN_STATICS,\n                               lint_hir_id,\n                               source_info.span,\n                               &format!(\"{} is unsafe and requires unsafe function or block \\\n-                                        (error E0133)\", &description.as_str()[..]),\n-                              &details.as_str()[..]);\n+                                        (error E0133)\", description),\n+                              &details.as_str());\n             }\n             UnsafetyViolationKind::BorrowPacked(lint_hir_id) => {\n                 if let Some(impl_def_id) = builtin_derive_def_id(tcx, def_id) {\n@@ -662,8 +662,8 @@ pub fn check_unsafety(tcx: TyCtxt<'_>, def_id: DefId) {\n                                   lint_hir_id,\n                                   source_info.span,\n                                   &format!(\"{} is unsafe and requires unsafe function or block \\\n-                                            (error E0133)\", &description.as_str()[..]),\n-                                  &details.as_str()[..]);\n+                                            (error E0133)\", description),\n+                                  &details.as_str());\n                 }\n             }\n         }"}, {"sha": "76899dad41a749c5df310a4ce882a0b546550b5e", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -537,7 +537,7 @@ impl Qualif for IsNotPromotable {\n                     Abi::RustIntrinsic |\n                     Abi::PlatformIntrinsic => {\n                         assert!(!cx.tcx.is_const_fn(def_id));\n-                        match &cx.tcx.item_name(def_id).as_str()[..] {\n+                        match &*cx.tcx.item_name(def_id).as_str() {\n                             | \"size_of\"\n                             | \"min_align_of\"\n                             | \"needs_drop\"\n@@ -1477,7 +1477,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Checker<'a, 'tcx> {\n                         Abi::RustIntrinsic |\n                         Abi::PlatformIntrinsic => {\n                             assert!(!self.tcx.is_const_fn(def_id));\n-                            match &self.tcx.item_name(def_id).as_str()[..] {\n+                            match &*self.tcx.item_name(def_id).as_str() {\n                                 // special intrinsic that can be called diretly without an intrinsic\n                                 // feature gate needs a language feature gate\n                                 \"transmute\" => {"}, {"sha": "da1fba2518ac77dc80bd8e303d7109dd0719738f", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -402,7 +402,7 @@ fn check_terminator(\n ///\n /// Adding more intrinsics requires sign-off from @rust-lang/lang.\n fn is_intrinsic_whitelisted(tcx: TyCtxt<'tcx>, def_id: DefId) -> bool {\n-    match &tcx.item_name(def_id).as_str()[..] {\n+    match &*tcx.item_name(def_id).as_str() {\n         | \"size_of\"\n         | \"min_align_of\"\n         | \"needs_drop\""}, {"sha": "33b2bd36b7ded07761cf266cecdd01150180714c", "filename": "src/librustc_resolve/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_resolve%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_resolve%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2FCargo.toml?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -21,4 +21,4 @@ errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_metadata = { path = \"../librustc_metadata\" }\n-smallvec = { version = \"0.6.7\", features = [\"union\", \"may_dangle\"] }\n+smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }"}, {"sha": "0624b5eedfb8aaa0660868d5dcd2d815c6cd3b10", "filename": "src/librustc_resolve/check_unused.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_resolve%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_resolve%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fcheck_unused.rs?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -26,7 +26,7 @@\n use crate::Resolver;\n use crate::resolve_imports::ImportDirectiveSubclass;\n \n-use errors::pluralise;\n+use errors::pluralize;\n \n use rustc::util::nodemap::NodeMap;\n use rustc::{lint, ty};\n@@ -297,7 +297,7 @@ impl Resolver<'_> {\n                 }).collect::<Vec<String>>();\n             span_snippets.sort();\n             let msg = format!(\"unused import{}{}\",\n-                            pluralise!(len),\n+                            pluralize!(len),\n                             if !span_snippets.is_empty() {\n                                 format!(\": {}\", span_snippets.join(\", \"))\n                             } else {"}, {"sha": "58af4b817d267a36c91368c50fa4076f1e04da57", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -1876,7 +1876,7 @@ impl<'a, 'b> LateResolutionVisitor<'a, '_> {\n                                     None\n                                 }\n                             });\n-                            find_best_match_for_name(names, &*ident.as_str(), None)\n+                            find_best_match_for_name(names, &ident.as_str(), None)\n                         });\n                         self.r.record_partial_res(expr.id, PartialRes::new(Res::Err));\n                         self.r.report_error("}, {"sha": "c06be18dc2c180c2bb3a4fd26843c9fbd96c9395", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -11,7 +11,7 @@ use crate::{Resolver, ResolutionError, BindingKey, Segment, ModuleKind};\n use crate::{names_to_string, module_to_string};\n use crate::diagnostics::Suggestion;\n \n-use errors::{Applicability, pluralise};\n+use errors::{Applicability, pluralize};\n \n use rustc_data_structures::ptr_key::PtrKey;\n use rustc::ty;\n@@ -730,7 +730,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n \n             let msg = format!(\n                 \"unresolved import{} {}\",\n-                pluralise!(paths.len()),\n+                pluralize!(paths.len()),\n                 paths.join(\", \"),\n             );\n "}, {"sha": "4cd2f13d09cbd3d0d6eff7c7865ce33bfc228a03", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -362,6 +362,7 @@ supported_targets! {\n     (\"armv7-unknown-linux-gnueabi\", armv7_unknown_linux_gnueabi),\n     (\"armv7-unknown-linux-gnueabihf\", armv7_unknown_linux_gnueabihf),\n     (\"thumbv7neon-unknown-linux-gnueabihf\", thumbv7neon_unknown_linux_gnueabihf),\n+    (\"thumbv7neon-unknown-linux-musleabihf\", thumbv7neon_unknown_linux_musleabihf),\n     (\"armv7-unknown-linux-musleabi\", armv7_unknown_linux_musleabi),\n     (\"armv7-unknown-linux-musleabihf\", armv7_unknown_linux_musleabihf),\n     (\"aarch64-unknown-linux-gnu\", aarch64_unknown_linux_gnu),"}, {"sha": "1270f391731b2db1fd1f7426870f3d2f5b37c822", "filename": "src/librustc_target/spec/thumbv7neon_unknown_linux_musleabihf.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_target%2Fspec%2Fthumbv7neon_unknown_linux_musleabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_target%2Fspec%2Fthumbv7neon_unknown_linux_musleabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fthumbv7neon_unknown_linux_musleabihf.rs?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -0,0 +1,37 @@\n+use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+\n+// This target is for musl Linux on ARMv7 with thumb mode enabled\n+// (for consistency with Android and Debian-based distributions)\n+// and with NEON unconditionally enabled and, therefore, with 32 FPU\n+// registers enabled as well. See section A2.6.2 on page A2-56 in\n+// https://static.docs.arm.com/ddi0406/cd/DDI0406C_d_armv7ar_arm.pdf\n+\n+pub fn target() -> TargetResult {\n+    let base = super::linux_musl_base::opts();\n+    Ok(Target {\n+        // It's important we use \"gnueabihf\" and not \"musleabihf\" here. LLVM\n+        // uses it to determine the calling convention and float ABI, and LLVM\n+        // doesn't support the \"musleabihf\" value.\n+        llvm_target: \"armv7-unknown-linux-gnueabihf\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"32\".to_string(),\n+        target_c_int_width: \"32\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        arch: \"arm\".to_string(),\n+        target_os: \"linux\".to_string(),\n+        target_env: \"musl\".to_string(),\n+        target_vendor: \"unknown\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n+\n+        // Most of these settings are copied from the thumbv7neon_unknown_linux_gnueabihf\n+        // target.\n+        options: TargetOptions {\n+            features: \"+v7,+thumb-mode,+thumb2,+vfp3,+neon\".to_string(),\n+            cpu: \"generic\".to_string(),\n+            max_atomic_width: Some(64),\n+            abi_blacklist: super::arm_base::abi_blacklist(),\n+            target_mcount: \"\\u{1}mcount\".to_string(),\n+            .. base\n+        }\n+    })\n+}"}, {"sha": "a9b184a7b306869a57337590273d5992091d3147", "filename": "src/librustc_traits/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_traits%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_traits%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2FCargo.toml?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -16,4 +16,4 @@ rustc_target = { path = \"../librustc_target\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n chalk-engine = { version = \"0.9.0\", default-features=false }\n-smallvec = { version = \"0.6.7\", features = [\"union\", \"may_dangle\"] }\n+smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }"}, {"sha": "60a7a2f45989c728627411528e555bdaa504530c", "filename": "src/librustc_typeck/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_typeck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_typeck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2FCargo.toml?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -17,7 +17,7 @@ rustc = { path = \"../librustc\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n rustc_target = { path = \"../librustc_target\" }\n-smallvec = { version = \"0.6.7\", features = [\"union\", \"may_dangle\"] }\n+smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n rustc_index = { path = \"../librustc_index\" }"}, {"sha": "5c66151338272f9a7b0402a686ba088cfba5c07a", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -23,7 +23,7 @@ use rustc_target::spec::abi;\n use crate::require_c_abi_if_c_variadic;\n use smallvec::SmallVec;\n use syntax::ast;\n-use syntax::errors::pluralise;\n+use syntax::errors::pluralize;\n use syntax::feature_gate::{GateIssue, emit_feature_err};\n use syntax::util::lev_distance::find_best_match_for_name;\n use syntax::symbol::sym;\n@@ -392,7 +392,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     quantifier,\n                     bound,\n                     kind,\n-                    pluralise!(bound),\n+                    pluralize!(bound),\n                 ))\n             };\n \n@@ -1360,7 +1360,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 span,\n                 E0191,\n                 \"the value of the associated type{} {} must be specified\",\n-                pluralise!(associated_types.len()),\n+                pluralize!(associated_types.len()),\n                 names,\n             );\n             let (suggest, potential_assoc_types_spans) ="}, {"sha": "af0943db4cc9e2293733c744b596c873d93cb91c", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -10,7 +10,7 @@ use rustc::util::common::ErrorReported;\n use errors::{Applicability, DiagnosticId};\n \n use syntax_pos::Span;\n-use syntax::errors::pluralise;\n+use syntax::errors::pluralize;\n \n use super::{Inherited, FnCtxt, potentially_plural_count};\n \n@@ -649,9 +649,9 @@ fn compare_number_of_generics<'tcx>(\n                      declaration has {} {kind} parameter{}\",\n                     trait_.ident,\n                     impl_count,\n-                    pluralise!(impl_count),\n+                    pluralize!(impl_count),\n                     trait_count,\n-                    pluralise!(trait_count),\n+                    pluralize!(trait_count),\n                     kind = kind,\n                 ),\n                 DiagnosticId::Error(\"E0049\".into()),\n@@ -666,7 +666,7 @@ fn compare_number_of_generics<'tcx>(\n                         \"expected {} {} parameter{}\",\n                         trait_count,\n                         kind,\n-                        pluralise!(trait_count),\n+                        pluralize!(trait_count),\n                     ));\n                 }\n                 for span in spans {\n@@ -681,7 +681,7 @@ fn compare_number_of_generics<'tcx>(\n                     \"found {} {} parameter{}{}\",\n                     impl_count,\n                     kind,\n-                    pluralise!(impl_count),\n+                    pluralize!(impl_count),\n                     suffix.unwrap_or_else(|| String::new()),\n                 ));\n             }"}, {"sha": "309e73f57c9641fc7368085a60284fca201c82e5", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -308,7 +308,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }) = parent {\n                 if let Ok(src) = cm.span_to_snippet(sp) {\n                     for field in fields {\n-                        if field.ident.as_str() == src.as_str() && field.is_shorthand {\n+                        if field.ident.as_str() == src && field.is_shorthand {\n                             return true;\n                         }\n                     }\n@@ -409,13 +409,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     let mut sugg_sp = sp;\n                     if let hir::ExprKind::MethodCall(segment, _sp, args) = &expr.kind {\n                         let clone_trait = self.tcx.lang_items().clone_trait().unwrap();\n-                        if let ([arg], Some(true), \"clone\") = (\n+                        if let ([arg], Some(true), sym::clone) = (\n                             &args[..],\n                             self.tables.borrow().type_dependent_def_id(expr.hir_id).map(|did| {\n                                 let ai = self.tcx.associated_item(did);\n                                 ai.container == ty::TraitContainer(clone_trait)\n                             }),\n-                            &segment.ident.as_str()[..],\n+                            segment.ident.name,\n                         ) {\n                             // If this expression had a clone call when suggesting borrowing\n                             // we want to suggest removing it because it'd now be unecessary."}, {"sha": "35870abbaefbd7acaf4cbe8440569dc67d2e7171", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -17,7 +17,7 @@ use crate::util::common::ErrorReported;\n use crate::util::nodemap::FxHashMap;\n use crate::astconv::AstConv as _;\n \n-use errors::{Applicability, DiagnosticBuilder, pluralise};\n+use errors::{Applicability, DiagnosticBuilder, pluralize};\n use syntax_pos::hygiene::DesugaringKind;\n use syntax::ast;\n use syntax::symbol::{Symbol, kw, sym};\n@@ -1218,7 +1218,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n             struct_span_err!(tcx.sess, span, E0063,\n                              \"missing field{} {}{} in initializer of `{}`\",\n-                             pluralise!(remaining_fields.len()),\n+                             pluralize!(remaining_fields.len()),\n                              remaining_fields_names,\n                              truncated_fields_error,\n                              adt_ty)"}, {"sha": "0b1657c4494f5ff14e1b0116438e0fb07b348c3c", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -5,7 +5,7 @@ use crate::check::FnCtxt;\n use crate::middle::lang_items::FnOnceTraitLangItem;\n use crate::namespace::Namespace;\n use crate::util::nodemap::FxHashSet;\n-use errors::{Applicability, DiagnosticBuilder, pluralise};\n+use errors::{Applicability, DiagnosticBuilder, pluralize};\n use rustc::hir::{self, ExprKind, Node, QPath};\n use rustc::hir::def::{Res, DefKind};\n use rustc::hir::def_id::{CRATE_DEF_INDEX, LOCAL_CRATE, DefId};\n@@ -601,7 +601,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         \"{an}other candidate{s} {were} found in the following trait{s}, perhaps \\\n                          add a `use` for {one_of_them}:\",\n                         an = if candidates.len() == 1 {\"an\" } else { \"\" },\n-                        s = pluralise!(candidates.len()),\n+                        s = pluralize!(candidates.len()),\n                         were = if candidates.len() == 1 { \"was\" } else { \"were\" },\n                         one_of_them = if candidates.len() == 1 {\n                             \"it\"\n@@ -835,11 +835,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                     sp,\n                                     &message(format!(\n                                         \"restrict type parameter `{}` with\",\n-                                        param.name.ident().as_str(),\n+                                        param.name.ident(),\n                                     )),\n                                     candidates.iter().map(|t| format!(\n                                         \"{}{} {}{}\",\n-                                        param.name.ident().as_str(),\n+                                        param.name.ident(),\n                                         if impl_trait { \" +\" } else { \":\" },\n                                         self.tcx.def_path_str(t.def_id),\n                                         if has_bounds.is_some() { \" + \"} else { \"\" },"}, {"sha": "26f040810462f91405910bc1ae27065ce74563c7", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -88,7 +88,7 @@ pub mod intrinsic;\n mod op;\n \n use crate::astconv::{AstConv, PathSeg};\n-use errors::{Applicability, DiagnosticBuilder, DiagnosticId, pluralise};\n+use errors::{Applicability, DiagnosticBuilder, DiagnosticId, pluralize};\n use rustc::hir::{self, ExprKind, GenericArg, ItemKind, Node, PatKind, QPath};\n use rustc::hir::def::{CtorOf, Res, DefKind};\n use rustc::hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n@@ -5162,5 +5162,5 @@ fn fatally_break_rust(sess: &Session) {\n }\n \n fn potentially_plural_count(count: usize, word: &str) -> String {\n-    format!(\"{} {}{}\", count, word, pluralise!(count))\n+    format!(\"{} {}{}\", count, word, pluralize!(count))\n }"}, {"sha": "a520ae13c58fbfd2a39d3b6c7cab1ed0bf0046e9", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -1,6 +1,6 @@\n use crate::check::FnCtxt;\n use crate::util::nodemap::FxHashMap;\n-use errors::{Applicability, DiagnosticBuilder, pluralise};\n+use errors::{Applicability, DiagnosticBuilder, pluralize};\n use rustc::hir::{self, PatKind, Pat, HirId};\n use rustc::hir::def::{Res, DefKind, CtorKind};\n use rustc::hir::pat_util::EnumerateAndAdjustIterator;\n@@ -703,8 +703,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         fields: &[ty::FieldDef],\n         expected: Ty<'tcx>\n     ) {\n-        let subpats_ending = pluralise!(subpats.len());\n-        let fields_ending = pluralise!(fields.len());\n+        let subpats_ending = pluralize!(subpats.len());\n+        let fields_ending = pluralize!(fields.len());\n         let res_span = self.tcx.def_span(res.def_id());\n         let mut err = struct_span_err!(\n             self.tcx.sess,\n@@ -978,7 +978,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     );\n \n                     // we don't want to throw `E0027` in case we have thrown `E0026` for them\n-                    unmentioned_fields.retain(|&x| x.as_str() != suggested_name.as_str());\n+                    unmentioned_fields.retain(|&x| x.name != suggested_name);\n                 }\n             }\n         }\n@@ -1174,10 +1174,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             E0527,\n             \"pattern requires {} element{} but array has {}\",\n             min_len,\n-            pluralise!(min_len),\n+            pluralize!(min_len),\n             size,\n         )\n-        .span_label(span, format!(\"expected {} element{}\", size, pluralise!(size)))\n+        .span_label(span, format!(\"expected {} element{}\", size, pluralize!(size)))\n         .emit();\n     }\n \n@@ -1188,14 +1188,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             E0528,\n             \"pattern requires at least {} element{} but array has {}\",\n             min_len,\n-            pluralise!(min_len),\n+            pluralize!(min_len),\n             size,\n         ).span_label(\n             span,\n             format!(\n                 \"pattern cannot match array of {} element{}\",\n                 size,\n-                pluralise!(size),\n+                pluralize!(size),\n             ),\n         ).emit();\n     }"}, {"sha": "ffe034759a80c25c970c43611c77454afd7cec90", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -2408,7 +2408,7 @@ fn compute_sig_of_foreign_fn_decl<'tcx>(\n     abi: abi::Abi,\n ) -> ty::PolyFnSig<'tcx> {\n     let unsafety = if abi == abi::Abi::RustIntrinsic {\n-        intrinsic_operation_unsafety(&*tcx.item_name(def_id).as_str())\n+        intrinsic_operation_unsafety(&tcx.item_name(def_id).as_str())\n     } else {\n         hir::Unsafety::Unsafe\n     };"}, {"sha": "09f4873967ed52df4ad4b954fa9606a3f9b31b49", "filename": "src/librustdoc/clean/cfg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fcfg.rs?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -404,7 +404,7 @@ impl<'a> fmt::Display for Html<'a> {\n                 if !human_readable.is_empty() {\n                     fmt.write_str(human_readable)\n                 } else if let Some(v) = value {\n-                    write!(fmt, \"<code>{}=\\\"{}\\\"</code>\", Escape(n), Escape(&*v.as_str()))\n+                    write!(fmt, \"<code>{}=\\\"{}\\\"</code>\", Escape(n), Escape(&v.as_str()))\n                 } else {\n                     write!(fmt, \"<code>{}</code>\", Escape(n))\n                 }"}, {"sha": "e7f7615525292c7cc2d97c00a4230953aa79cb3a", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -1167,7 +1167,7 @@ fn external_path(cx: &DocContext<'_>, name: Symbol, trait_did: Option<DefId>, ha\n         global: false,\n         res: Res::Err,\n         segments: vec![PathSegment {\n-            name: name.as_str().to_string(),\n+            name: name.to_string(),\n             args: external_generic_args(cx, trait_did, has_self, bindings, substs)\n         }],\n     }\n@@ -3704,7 +3704,7 @@ fn qpath_to_string(p: &hir::QPath) -> String {\n             s.push_str(\"::\");\n         }\n         if seg.ident.name != kw::PathRoot {\n-            s.push_str(&*seg.ident.as_str());\n+            s.push_str(&seg.ident.as_str());\n         }\n     }\n     s"}, {"sha": "29f0b99d8ee69608b2a78d4f2ce339ba35257ad9", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -2964,7 +2964,7 @@ fn render_attribute(attr: &ast::MetaItem) -> Option<String> {\n     if attr.is_word() {\n         Some(path)\n     } else if let Some(v) = attr.value_str() {\n-        Some(format!(\"{} = {:?}\", path, v.as_str()))\n+        Some(format!(\"{} = {:?}\", path, v))\n     } else if let Some(values) = attr.meta_item_list() {\n         let display: Vec<_> = values.iter().filter_map(|attr| {\n             attr.meta_item().and_then(|mi| render_attribute(mi))"}, {"sha": "96a0d51bc716d62ac25511c740c5c64ca373e8a4", "filename": "src/libserialize/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibserialize%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibserialize%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2FCargo.toml?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -10,4 +10,4 @@ path = \"lib.rs\"\n \n [dependencies]\n indexmap = \"1\"\n-smallvec = { version = \"0.6.7\", features = [\"union\", \"may_dangle\"] }\n+smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }"}, {"sha": "bc387544c4cb4d9353aa96109eba3e827ef9c984", "filename": "src/libstd/sys/unix/rand.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibstd%2Fsys%2Funix%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibstd%2Fsys%2Funix%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Frand.rs?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -15,6 +15,7 @@ pub fn hashmap_random_keys() -> (u64, u64) {\n           not(target_os = \"ios\"),\n           not(target_os = \"openbsd\"),\n           not(target_os = \"freebsd\"),\n+          not(target_os = \"netbsd\"),\n           not(target_os = \"fuchsia\"),\n           not(target_os = \"redox\")))]\n mod imp {\n@@ -142,7 +143,7 @@ mod imp {\n     }\n }\n \n-#[cfg(target_os = \"freebsd\")]\n+#[cfg(any(target_os = \"freebsd\", target_os = \"netbsd\"))]\n mod imp {\n     use crate::ptr;\n "}, {"sha": "b1839cc05cd1fcefa941089335c764795ca8e83b", "filename": "src/libsyntax/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibsyntax%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibsyntax%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2FCargo.toml?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -21,4 +21,4 @@ rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_index = { path = \"../librustc_index\" }\n rustc_lexer = { path = \"../librustc_lexer\" }\n rustc_target = { path = \"../librustc_target\" }\n-smallvec = { version = \"0.6.7\", features = [\"union\", \"may_dangle\"] }\n+smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }"}, {"sha": "8af38507b48d141e6df3c626e90306873013af3b", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -90,7 +90,7 @@ impl fmt::Debug for Lifetime {\n \n impl fmt::Display for Lifetime {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"{}\", self.ident.name.as_str())\n+        write!(f, \"{}\", self.ident.name)\n     }\n }\n "}, {"sha": "d9cc5f6c169b606e3d5df6ef2dfe405d7a49836e", "filename": "src/libsyntax/feature_gate/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -823,7 +823,7 @@ pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute],\n             }\n \n             if let Some(allowed) = allow_features.as_ref() {\n-                if allowed.iter().find(|&f| f == &name.as_str() as &str).is_none() {\n+                if allowed.iter().find(|&f| name.as_str() == *f).is_none() {\n                     span_err!(span_handler, mi.span(), E0725,\n                               \"the feature `{}` is not in the list of allowed features\",\n                               name);"}, {"sha": "c42f4aa25cc96c9441fe0b4bdc21e620c7731a6b", "filename": "src/libsyntax/parse/literal.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibsyntax%2Fparse%2Fliteral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibsyntax%2Fparse%2Fliteral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fliteral.rs?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -134,9 +134,9 @@ impl LitKind {\n         let (kind, symbol, suffix) = match *self {\n             LitKind::Str(symbol, ast::StrStyle::Cooked) => {\n                 // Don't re-intern unless the escaped string is different.\n-                let s: &str = &symbol.as_str();\n+                let s = symbol.as_str();\n                 let escaped = s.escape_default().to_string();\n-                let symbol = if escaped == *s { symbol } else { Symbol::intern(&escaped) };\n+                let symbol = if s == escaped { symbol } else { Symbol::intern(&escaped) };\n                 (token::Str, symbol, None)\n             }\n             LitKind::Str(symbol, ast::StrStyle::Raw(n)) => {"}, {"sha": "49a517a5c44daf4199ec57bdc0ff005eb6973ea6", "filename": "src/libsyntax/parse/parser/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibsyntax%2Fparse%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibsyntax%2Fparse%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fdiagnostics.rs?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -12,7 +12,7 @@ use crate::ptr::P;\n use crate::symbol::{kw, sym};\n use crate::ThinVec;\n use crate::util::parser::AssocOp;\n-use errors::{Applicability, DiagnosticBuilder, DiagnosticId, pluralise};\n+use errors::{Applicability, DiagnosticBuilder, DiagnosticId, pluralize};\n use rustc_data_structures::fx::FxHashSet;\n use syntax_pos::{Span, DUMMY_SP, MultiSpan, SpanSnippetError};\n use log::{debug, trace};\n@@ -515,11 +515,11 @@ impl<'a> Parser<'a> {\n             self.diagnostic()\n                 .struct_span_err(\n                     span,\n-                    &format!(\"unmatched angle bracket{}\", pluralise!(total_num_of_gt)),\n+                    &format!(\"unmatched angle bracket{}\", pluralize!(total_num_of_gt)),\n                 )\n                 .span_suggestion(\n                     span,\n-                    &format!(\"remove extra angle bracket{}\", pluralise!(total_num_of_gt)),\n+                    &format!(\"remove extra angle bracket{}\", pluralize!(total_num_of_gt)),\n                     String::new(),\n                     Applicability::MachineApplicable,\n                 )"}, {"sha": "242a17659a06b461e94b24a8416f21059f62a18f", "filename": "src/libsyntax/parse/parser/module.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibsyntax%2Fparse%2Fparser%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibsyntax%2Fparse%2Fparser%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fmodule.rs?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -210,7 +210,7 @@ impl<'a> Parser<'a> {\n             // `/` to `\\`.\n             #[cfg(windows)]\n             let s = s.replace(\"/\", \"\\\\\");\n-            Some(dir_path.join(s))\n+            Some(dir_path.join(&*s))\n         } else {\n             None\n         }\n@@ -229,7 +229,7 @@ impl<'a> Parser<'a> {\n         // `./<id>.rs` and `./<id>/mod.rs`.\n         let relative_prefix_string;\n         let relative_prefix = if let Some(ident) = relative {\n-            relative_prefix_string = format!(\"{}{}\", ident.as_str(), path::MAIN_SEPARATOR);\n+            relative_prefix_string = format!(\"{}{}\", ident, path::MAIN_SEPARATOR);\n             &relative_prefix_string\n         } else {\n             \"\"\n@@ -314,7 +314,7 @@ impl<'a> Parser<'a> {\n \n     fn push_directory(&mut self, id: Ident, attrs: &[Attribute]) {\n         if let Some(path) = attr::first_attr_value_str_by_name(attrs, sym::path) {\n-            self.directory.path.to_mut().push(&path.as_str());\n+            self.directory.path.to_mut().push(&*path.as_str());\n             self.directory.ownership = DirectoryOwnership::Owned { relative: None };\n         } else {\n             // We have to push on the current module name in the case of relative\n@@ -325,10 +325,10 @@ impl<'a> Parser<'a> {\n             // directory path to `/x/y/z`, not `/x/z` with a relative offset of `y`.\n             if let DirectoryOwnership::Owned { relative } = &mut self.directory.ownership {\n                 if let Some(ident) = relative.take() { // remove the relative offset\n-                    self.directory.path.to_mut().push(ident.as_str());\n+                    self.directory.path.to_mut().push(&*ident.as_str());\n                 }\n             }\n-            self.directory.path.to_mut().push(&id.as_str());\n+            self.directory.path.to_mut().push(&*id.as_str());\n         }\n     }\n }"}, {"sha": "f9944e36e2f6051f51354a8862b3c5f5a02e11d1", "filename": "src/libsyntax/parse/parser/path.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibsyntax%2Fparse%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibsyntax%2Fparse%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fpath.rs?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -9,7 +9,7 @@ use crate::symbol::kw;\n \n use std::mem;\n use log::debug;\n-use errors::{Applicability, pluralise};\n+use errors::{Applicability, pluralize};\n \n /// Specifies how to parse a path.\n #[derive(Copy, Clone, PartialEq)]\n@@ -368,14 +368,14 @@ impl<'a> Parser<'a> {\n                         span,\n                         &format!(\n                             \"unmatched angle bracket{}\",\n-                            pluralise!(snapshot.unmatched_angle_bracket_count)\n+                            pluralize!(snapshot.unmatched_angle_bracket_count)\n                         ),\n                     )\n                     .span_suggestion(\n                         span,\n                         &format!(\n                             \"remove extra angle bracket{}\",\n-                            pluralise!(snapshot.unmatched_angle_bracket_count)\n+                            pluralize!(snapshot.unmatched_angle_bracket_count)\n                         ),\n                         String::new(),\n                         Applicability::MachineApplicable,"}, {"sha": "b770b90705cbe614559bbbd96af774d960320438", "filename": "src/libsyntax/parse/parser/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibsyntax%2Fparse%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibsyntax%2Fparse%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fty.rs?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -10,7 +10,7 @@ use crate::parse::token::{self, Token};\n use crate::source_map::Span;\n use crate::symbol::{kw};\n \n-use errors::{Applicability, pluralise};\n+use errors::{Applicability, pluralize};\n \n /// Returns `true` if `IDENT t` can start a type -- `IDENT::a::b`, `IDENT<u8, u8>`,\n /// `IDENT<<u8 as Trait>::AssocTy>`.\n@@ -412,7 +412,7 @@ impl<'a> Parser<'a> {\n                 }\n                 err.span_suggestion_hidden(\n                     bound_list,\n-                    &format!(\"remove the trait bound{}\", pluralise!(negative_bounds_len)),\n+                    &format!(\"remove the trait bound{}\", pluralize!(negative_bounds_len)),\n                     new_bound_list,\n                     Applicability::MachineApplicable,\n                 );"}, {"sha": "74ab5c790193dce74893608b9fc3f0ea1f066f55", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -623,7 +623,7 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n         }\n         self.maybe_print_comment(attr.span.lo());\n         if attr.is_sugared_doc {\n-            self.word(attr.value_str().unwrap().as_str().to_string());\n+            self.word(attr.value_str().unwrap().to_string());\n             self.hardbreak()\n         } else {\n             match attr.style {\n@@ -1234,7 +1234,7 @@ impl<'a> State<'a> {\n             }\n             ast::ItemKind::GlobalAsm(ref ga) => {\n                 self.head(visibility_qualified(&item.vis, \"global_asm!\"));\n-                self.s.word(ga.asm.as_str().to_string());\n+                self.s.word(ga.asm.to_string());\n                 self.end();\n             }\n             ast::ItemKind::TyAlias(ref ty, ref generics) => {\n@@ -2335,7 +2335,7 @@ impl<'a> State<'a> {\n     }\n \n     crate fn print_name(&mut self, name: ast::Name) {\n-        self.s.word(name.as_str().to_string());\n+        self.s.word(name.to_string());\n         self.ann.post(self, AnnNode::Name(&name))\n     }\n "}, {"sha": "a51d208704ade04f4075caadbb97f378c21f96d6", "filename": "src/libsyntax/tokenstream.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibsyntax%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibsyntax%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftokenstream.rs?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -243,7 +243,7 @@ impl TokenStream {\n \n                 // Get the first stream. If it's `None`, create an empty\n                 // stream.\n-                let mut iter = streams.drain();\n+                let mut iter = streams.drain(..);\n                 let mut first_stream_lrc = iter.next().unwrap().0;\n \n                 // Append the elements to the first stream, after reserving"}, {"sha": "d98b9457a625fccbe2f54c2f159e6c7b781379d3", "filename": "src/libsyntax_expand/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibsyntax_expand%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibsyntax_expand%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2FCargo.toml?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -22,5 +22,5 @@ rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_index = { path = \"../librustc_index\" }\n rustc_lexer = { path = \"../librustc_lexer\" }\n rustc_target = { path = \"../librustc_target\" }\n-smallvec = { version = \"0.6.7\", features = [\"union\", \"may_dangle\"] }\n+smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n syntax = { path = \"../libsyntax\" }"}, {"sha": "d02251eb746d0209c6dc613d31869cb2a9e5d025", "filename": "src/libsyntax_expand/base.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibsyntax_expand%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibsyntax_expand%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fbase.rs?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -953,18 +953,7 @@ impl<'a> ExtCtxt<'a> {\n     ///\n     /// Stops backtracing at include! boundary.\n     pub fn expansion_cause(&self) -> Option<Span> {\n-        let mut expn_id = self.current_expansion.id;\n-        let mut last_macro = None;\n-        loop {\n-            let expn_data = expn_id.expn_data();\n-            // Stop going up the backtrace once include! is encountered\n-            if expn_data.is_root() || expn_data.kind.descr() == sym::include {\n-                break;\n-            }\n-            expn_id = expn_data.call_site.ctxt().outer_expn();\n-            last_macro = Some(expn_data.call_site);\n-        }\n-        last_macro\n+        self.current_expansion.id.expansion_cause()\n     }\n \n     pub fn struct_span_warn<S: Into<MultiSpan>>(&self,"}, {"sha": "7a772b0d31dab5edbcaadf081f27355b2ddcd40c", "filename": "src/libsyntax_expand/mbe/macro_rules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibsyntax_expand%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibsyntax_expand%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fmbe%2Fmacro_rules.rs?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -225,7 +225,7 @@ fn generic_extension<'cx>(\n                 };\n                 let mut p = Parser::new(cx.parse_sess(), tts, Some(directory), true, false, None);\n                 p.root_module_name =\n-                    cx.current_expansion.module.mod_path.last().map(|id| id.as_str().to_string());\n+                    cx.current_expansion.module.mod_path.last().map(|id| id.to_string());\n                 p.last_type_ascription = cx.current_expansion.prior_type_ascription;\n \n                 p.process_potential_macro_variable();"}, {"sha": "6f060103ef48ecacb6c01a9078aa04662057f48c", "filename": "src/libsyntax_expand/mbe/transcribe.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibsyntax_expand%2Fmbe%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibsyntax_expand%2Fmbe%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fmbe%2Ftranscribe.rs?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -9,7 +9,7 @@ use syntax::tokenstream::{DelimSpan, TokenStream, TokenTree, TreeAndJoint};\n \n use smallvec::{smallvec, SmallVec};\n \n-use errors::pluralise;\n+use errors::pluralize;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::Lrc;\n use syntax_pos::hygiene::{ExpnId, Transparency};\n@@ -350,10 +350,10 @@ impl LockstepIterSize {\n                         \"meta-variable `{}` repeats {} time{}, but `{}` repeats {} time{}\",\n                         l_id,\n                         l_len,\n-                        pluralise!(l_len),\n+                        pluralize!(l_len),\n                         r_id,\n                         r_len,\n-                        pluralise!(r_len),\n+                        pluralize!(r_len),\n                     );\n                     LockstepIterSize::Contradiction(msg)\n                 }"}, {"sha": "703d51e1c4c3bf832b73eb4c4e13138724366707", "filename": "src/libsyntax_ext/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibsyntax_ext%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibsyntax_ext%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2FCargo.toml?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -15,7 +15,7 @@ fmt_macros = { path = \"../libfmt_macros\" }\n log = \"0.4\"\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_target = { path = \"../librustc_target\" }\n-smallvec = { version = \"0.6.7\", features = [\"union\", \"may_dangle\"] }\n+smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n syntax = { path = \"../libsyntax\" }\n syntax_expand = { path = \"../libsyntax_expand\" }\n syntax_pos = { path = \"../libsyntax_pos\" }"}, {"sha": "6fb48bf81735b398010dbe5fbd8a89c5827190b4", "filename": "src/libsyntax_ext/env.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibsyntax_ext%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibsyntax_ext%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fenv.rs?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -21,7 +21,7 @@ pub fn expand_option_env<'cx>(cx: &'cx mut ExtCtxt<'_>,\n     };\n \n     let sp = cx.with_def_site_ctxt(sp);\n-    let e = match env::var(&*var.as_str()) {\n+    let e = match env::var(&var.as_str()) {\n         Err(..) => {\n             let lt = cx.lifetime(sp, Ident::new(kw::StaticLifetime, sp));\n             cx.expr_path(cx.path_all(sp,"}, {"sha": "314c2eefd4c74cf31579a31efb8ebf75ccf3c1cc", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -5,7 +5,7 @@ use fmt_macros as parse;\n \n use errors::DiagnosticBuilder;\n use errors::Applicability;\n-use errors::pluralise;\n+use errors::pluralize;\n \n use syntax::ast;\n use syntax_expand::base::{self, *};\n@@ -300,7 +300,7 @@ impl<'a, 'b> Context<'a, 'b> {\n                 &format!(\n                     \"{} positional argument{} in format string, but {}\",\n                     count,\n-                    pluralise!(count),\n+                    pluralize!(count),\n                     self.describe_num_args(),\n                 ),\n             );\n@@ -994,7 +994,7 @@ pub fn expand_preparsed_format_args(\n         vec![]\n     };\n \n-    let fmt_str = &*fmt_str.as_str();  // for the suggestions below\n+    let fmt_str = &fmt_str.as_str();  // for the suggestions below\n     let mut parser = parse::Parser::new(fmt_str, str_style, skips, append_newline);\n \n     let mut unverified_pieces = Vec::new();"}, {"sha": "2a48f8e44aa1259a2e7d6add29b70c9cc8589e16", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -28,7 +28,7 @@\n use crate::GLOBALS;\n use crate::{Span, DUMMY_SP};\n use crate::edition::Edition;\n-use crate::symbol::{kw, Symbol};\n+use crate::symbol::{kw, sym, Symbol};\n \n use rustc_serialize::{Encodable, Decodable, Encoder, Decoder};\n use rustc_data_structures::fx::FxHashMap;\n@@ -119,6 +119,23 @@ impl ExpnId {\n     pub fn outer_expn_is_descendant_of(self, ctxt: SyntaxContext) -> bool {\n         HygieneData::with(|data| data.is_descendant_of(self, data.outer_expn(ctxt)))\n     }\n+\n+    /// Returns span for the macro which originally caused this expansion to happen.\n+    ///\n+    /// Stops backtracing at include! boundary.\n+    pub fn expansion_cause(mut self) -> Option<Span> {\n+        let mut last_macro = None;\n+        loop {\n+            let expn_data = self.expn_data();\n+            // Stop going up the backtrace once include! is encountered\n+            if expn_data.is_root() || expn_data.kind.descr() == sym::include {\n+                break;\n+            }\n+            self = expn_data.call_site.ctxt().outer_expn();\n+            last_macro = Some(expn_data.call_site);\n+        }\n+        last_macro\n+    }\n }\n \n #[derive(Debug)]"}, {"sha": "3f7b3e5b3d82aa43c3d55845fc3b7161b293da70", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 24, "deletions": 28, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -806,9 +806,9 @@ impl Ident {\n         Ident::new(self.name, self.span.modern_and_legacy())\n     }\n \n-    /// Convert the name to a `LocalInternedString`. This is a slowish\n-    /// operation because it requires locking the symbol interner.\n-    pub fn as_str(self) -> LocalInternedString {\n+    /// Convert the name to a `SymbolStr`. This is a slowish operation because\n+    /// it requires locking the symbol interner.\n+    pub fn as_str(self) -> SymbolStr {\n         self.name.as_str()\n     }\n }\n@@ -896,11 +896,11 @@ impl Symbol {\n         })\n     }\n \n-    /// Convert to a `LocalInternedString`. This is a slowish operation because\n-    /// it requires locking the symbol interner.\n-    pub fn as_str(self) -> LocalInternedString {\n+    /// Convert to a `SymbolStr`. This is a slowish operation because it\n+    /// requires locking the symbol interner.\n+    pub fn as_str(self) -> SymbolStr {\n         with_interner(|interner| unsafe {\n-            LocalInternedString {\n+            SymbolStr {\n                 string: std::mem::transmute::<&str, &str>(interner.get(self))\n             }\n         })\n@@ -973,6 +973,7 @@ impl Interner {\n         self.names.insert(string, name);\n         name\n     }\n+\n     // Get the symbol as a string. `Symbol::as_str()` should be used in\n     // preference to this function.\n     pub fn get(&self, symbol: Symbol) -> &str {\n@@ -1078,7 +1079,6 @@ impl Ident {\n     }\n }\n \n-// If an interner exists, return it. Otherwise, prepare a fresh one.\n #[inline]\n fn with_interner<T, F: FnOnce(&mut Interner) -> T>(f: F) -> T {\n     GLOBALS.with(|globals| f(&mut *globals.symbol_interner.lock()))\n@@ -1092,46 +1092,42 @@ fn with_interner<T, F: FnOnce(&mut Interner) -> T>(f: F) -> T {\n /// safely treat `string` which points to interner data, as an immortal string,\n /// as long as this type never crosses between threads.\n //\n-// FIXME: ensure that the interner outlives any thread which uses\n-// `LocalInternedString`, by creating a new thread right after constructing the\n-// interner.\n+// FIXME: ensure that the interner outlives any thread which uses `SymbolStr`,\n+// by creating a new thread right after constructing the interner.\n #[derive(Clone, Eq, PartialOrd, Ord)]\n-pub struct LocalInternedString {\n+pub struct SymbolStr {\n     string: &'static str,\n }\n \n-impl<U: ?Sized> std::convert::AsRef<U> for LocalInternedString\n-where\n-    str: std::convert::AsRef<U>\n-{\n-    #[inline]\n-    fn as_ref(&self) -> &U {\n-        self.string.as_ref()\n-    }\n-}\n-\n-impl<T: std::ops::Deref<Target = str>> std::cmp::PartialEq<T> for LocalInternedString {\n+// This impl allows a `SymbolStr` to be directly equated with a `String` or\n+// `&str`.\n+impl<T: std::ops::Deref<Target = str>> std::cmp::PartialEq<T> for SymbolStr {\n     fn eq(&self, other: &T) -> bool {\n         self.string == other.deref()\n     }\n }\n \n-impl !Send for LocalInternedString {}\n-impl !Sync for LocalInternedString {}\n+impl !Send for SymbolStr {}\n+impl !Sync for SymbolStr {}\n \n-impl std::ops::Deref for LocalInternedString {\n+/// This impl means that if `ss` is a `SymbolStr`:\n+/// - `*ss` is a `str`;\n+/// - `&*ss` is a `&str`;\n+/// - `&ss as &str` is a `&str`, which means that `&ss` can be passed to a\n+///   function expecting a `&str`.\n+impl std::ops::Deref for SymbolStr {\n     type Target = str;\n     #[inline]\n     fn deref(&self) -> &str { self.string }\n }\n \n-impl fmt::Debug for LocalInternedString {\n+impl fmt::Debug for SymbolStr {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Debug::fmt(self.string, f)\n     }\n }\n \n-impl fmt::Display for LocalInternedString {\n+impl fmt::Display for SymbolStr {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Display::fmt(self.string, f)\n     }"}, {"sha": "3451346869df9fb8f2b7b590c4f7324368c52035", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -755,6 +755,10 @@ LLVMRustSetDataLayoutFromTargetMachine(LLVMModuleRef Module,\n   unwrap(Module)->setDataLayout(Target->createDataLayout());\n }\n \n+extern \"C\" void LLVMRustSetModulePICLevel(LLVMModuleRef M) {\n+  unwrap(M)->setPICLevel(PICLevel::Level::BigPIC);\n+}\n+\n extern \"C\" void LLVMRustSetModulePIELevel(LLVMModuleRef M) {\n   unwrap(M)->setPIELevel(PIELevel::Level::Large);\n }"}, {"sha": "1c4d4666fa1800c2a57bc06849facfe660a20dca", "filename": "src/test/ui/rfc-2091-track-caller/caller-location-intrinsic.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fcaller-location-intrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fcaller-location-intrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fcaller-location-intrinsic.rs?ref=e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "patch": "@@ -1,9 +1,21 @@\n // run-pass\n \n #![feature(core_intrinsics)]\n+\n+macro_rules! caller_location_from_macro {\n+    () => (core::intrinsics::caller_location());\n+}\n+\n fn main() {\n     let loc = core::intrinsics::caller_location();\n     assert_eq!(loc.file(), file!());\n-    assert_eq!(loc.line(), 5);\n+    assert_eq!(loc.line(), 10);\n     assert_eq!(loc.column(), 15);\n+\n+    // `caller_location()` in a macro should behave similarly to `file!` and `line!`,\n+    // i.e. point to where the macro was invoked, instead of the macro itself.\n+    let loc2 = caller_location_from_macro!();\n+    assert_eq!(loc2.file(), file!());\n+    assert_eq!(loc2.line(), 17);\n+    assert_eq!(loc2.column(), 16);\n }"}]}