{"sha": "1b0f0ad28070c072f68ea0ab10bbae61b52706a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiMGYwYWQyODA3MGMwNzJmNjhlYTBhYjEwYmJhZTYxYjUyNzA2YTg=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-03-17T14:23:13Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-03-17T19:57:30Z"}, "message": "Extract out `mts` into `combine` using `tys_with_variance`", "tree": {"sha": "83f8a36db00c74c007bdba677eb46acfa3906bf4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83f8a36db00c74c007bdba677eb46acfa3906bf4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b0f0ad28070c072f68ea0ab10bbae61b52706a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b0f0ad28070c072f68ea0ab10bbae61b52706a8", "html_url": "https://github.com/rust-lang/rust/commit/1b0f0ad28070c072f68ea0ab10bbae61b52706a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b0f0ad28070c072f68ea0ab10bbae61b52706a8/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfac337daab9b86971bcb3db61382ac44f94621c", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfac337daab9b86971bcb3db61382ac44f94621c", "html_url": "https://github.com/rust-lang/rust/commit/bfac337daab9b86971bcb3db61382ac44f94621c"}], "stats": {"total": 118, "additions": 18, "deletions": 100}, "files": [{"sha": "1916d39b498287d8295cba56fea2a9e100ca2b19", "filename": "src/librustc/middle/infer/bivariate.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1b0f0ad28070c072f68ea0ab10bbae61b52706a8/src%2Flibrustc%2Fmiddle%2Finfer%2Fbivariate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b0f0ad28070c072f68ea0ab10bbae61b52706a8/src%2Flibrustc%2Fmiddle%2Finfer%2Fbivariate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fbivariate.rs?ref=1b0f0ad28070c072f68ea0ab10bbae61b52706a8", "patch": "@@ -74,16 +74,6 @@ impl<'f, 'tcx> Combine<'tcx> for Bivariate<'f, 'tcx> {\n         Ok(a)\n     }\n \n-    fn mts(&self, a: &ty::mt<'tcx>, b: &ty::mt<'tcx>) -> cres<'tcx, ty::mt<'tcx>> {\n-        debug!(\"mts({} <: {})\",\n-               a.repr(self.fields.infcx.tcx),\n-               b.repr(self.fields.infcx.tcx));\n-\n-        if a.mutbl != b.mutbl { return Err(ty::terr_mutability); }\n-        let t = try!(self.tys(a.ty, b.ty));\n-        Ok(ty::mt { mutbl: a.mutbl, ty: t })\n-    }\n-\n     fn unsafeties(&self, a: Unsafety, b: Unsafety) -> cres<'tcx, Unsafety> {\n         if a != b {\n             Err(ty::terr_unsafety_mismatch(expected_found(self, a, b)))"}, {"sha": "9fdfdaccf4eafddc82d440c01c9bded8ce6f3e76", "filename": "src/librustc/middle/infer/combine.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1b0f0ad28070c072f68ea0ab10bbae61b52706a8/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b0f0ad28070c072f68ea0ab10bbae61b52706a8/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs?ref=1b0f0ad28070c072f68ea0ab10bbae61b52706a8", "patch": "@@ -74,7 +74,24 @@ pub trait Combine<'tcx> : Sized {\n     fn lub<'a>(&'a self) -> Lub<'a, 'tcx> { Lub(self.fields().clone()) }\n     fn glb<'a>(&'a self) -> Glb<'a, 'tcx> { Glb(self.fields().clone()) }\n \n-    fn mts(&self, a: &ty::mt<'tcx>, b: &ty::mt<'tcx>) -> cres<'tcx, ty::mt<'tcx>>;\n+    fn mts(&self, a: &ty::mt<'tcx>, b: &ty::mt<'tcx>) -> cres<'tcx, ty::mt<'tcx>> {\n+        debug!(\"{}.mts({}, {})\",\n+               self.tag(),\n+               a.repr(self.tcx()),\n+               b.repr(self.tcx()));\n+\n+        if a.mutbl != b.mutbl {\n+            Err(ty::terr_mutability)\n+        } else {\n+            let mutbl = a.mutbl;\n+            let variance = match mutbl {\n+                ast::MutImmutable => ty::Covariant,\n+                ast::MutMutable => ty::Invariant,\n+            };\n+            let ty = try!(self.tys_with_variance(variance, a.ty, b.ty));\n+            Ok(ty::mt {ty: ty, mutbl: mutbl})\n+        }\n+    }\n \n     fn tys_with_variance(&self, variance: ty::Variance, a: Ty<'tcx>, b: Ty<'tcx>)\n                          -> cres<'tcx, Ty<'tcx>>;"}, {"sha": "e9ffe368f4220181f5e62b1e890569f6dd6df0c4", "filename": "src/librustc/middle/infer/equate.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1b0f0ad28070c072f68ea0ab10bbae61b52706a8/src%2Flibrustc%2Fmiddle%2Finfer%2Fequate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b0f0ad28070c072f68ea0ab10bbae61b52706a8/src%2Flibrustc%2Fmiddle%2Finfer%2Fequate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fequate.rs?ref=1b0f0ad28070c072f68ea0ab10bbae61b52706a8", "patch": "@@ -54,15 +54,6 @@ impl<'f, 'tcx> Combine<'tcx> for Equate<'f, 'tcx> {\n         Ok(a)\n     }\n \n-    fn mts(&self, a: &ty::mt<'tcx>, b: &ty::mt<'tcx>) -> cres<'tcx, ty::mt<'tcx>> {\n-        debug!(\"mts({} <: {})\",\n-               a.repr(self.fields.infcx.tcx),\n-               b.repr(self.fields.infcx.tcx));\n-\n-        if a.mutbl != b.mutbl { return Err(ty::terr_mutability); }\n-        let t = try!(self.tys(a.ty, b.ty));\n-        Ok(ty::mt { mutbl: a.mutbl, ty: t })\n-    }\n \n     fn unsafeties(&self, a: Unsafety, b: Unsafety) -> cres<'tcx, Unsafety> {\n         if a != b {"}, {"sha": "43d64643fe2eec9048aab960f81c19985758755e", "filename": "src/librustc/middle/infer/glb.rs", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1b0f0ad28070c072f68ea0ab10bbae61b52706a8/src%2Flibrustc%2Fmiddle%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b0f0ad28070c072f68ea0ab10bbae61b52706a8/src%2Flibrustc%2Fmiddle%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fglb.rs?ref=1b0f0ad28070c072f68ea0ab10bbae61b52706a8", "patch": "@@ -55,36 +55,6 @@ impl<'f, 'tcx> Combine<'tcx> for Glb<'f, 'tcx> {\n         }\n     }\n \n-    fn mts(&self, a: &ty::mt<'tcx>, b: &ty::mt<'tcx>) -> cres<'tcx, ty::mt<'tcx>> {\n-        let tcx = self.fields.infcx.tcx;\n-\n-        debug!(\"{}.mts({}, {})\",\n-               self.tag(),\n-               mt_to_string(tcx, a),\n-               mt_to_string(tcx, b));\n-\n-        match (a.mutbl, b.mutbl) {\n-            // If one side or both is mut, then the GLB must use\n-            // the precise type from the mut side.\n-            (MutMutable, MutMutable) => {\n-                let t = try!(self.equate().tys(a.ty, b.ty));\n-                Ok(ty::mt {ty: t, mutbl: MutMutable})\n-            }\n-\n-            // If one side or both is immutable, we can use the GLB of\n-            // both sides but mutbl must be `MutImmutable`.\n-            (MutImmutable, MutImmutable) => {\n-                let t = try!(self.tys(a.ty, b.ty));\n-                Ok(ty::mt {ty: t, mutbl: MutImmutable})\n-            }\n-\n-            // There is no mutual subtype of these combinations.\n-            (MutMutable, MutImmutable) |\n-            (MutImmutable, MutMutable) => {\n-                Err(ty::terr_mutability)\n-            }\n-        }\n-    }\n \n     fn unsafeties(&self, a: Unsafety, b: Unsafety) -> cres<'tcx, Unsafety> {\n         match (a, b) {"}, {"sha": "95d661b1add8ce3989a6f9bd0917dfa37f94b061", "filename": "src/librustc/middle/infer/lub.rs", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1b0f0ad28070c072f68ea0ab10bbae61b52706a8/src%2Flibrustc%2Fmiddle%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b0f0ad28070c072f68ea0ab10bbae61b52706a8/src%2Flibrustc%2Fmiddle%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Flub.rs?ref=1b0f0ad28070c072f68ea0ab10bbae61b52706a8", "patch": "@@ -55,32 +55,6 @@ impl<'f, 'tcx> Combine<'tcx> for Lub<'f, 'tcx> {\n         }\n     }\n \n-    fn mts(&self, a: &ty::mt<'tcx>, b: &ty::mt<'tcx>) -> cres<'tcx, ty::mt<'tcx>> {\n-        let tcx = self.tcx();\n-\n-        debug!(\"{}.mts({}, {})\",\n-               self.tag(),\n-               mt_to_string(tcx, a),\n-               mt_to_string(tcx, b));\n-\n-        if a.mutbl != b.mutbl {\n-            return Err(ty::terr_mutability)\n-        }\n-\n-        let m = a.mutbl;\n-        match m {\n-            MutImmutable => {\n-                let t = try!(self.tys(a.ty, b.ty));\n-                Ok(ty::mt {ty: t, mutbl: m})\n-            }\n-\n-            MutMutable => {\n-                let t = try!(self.equate().tys(a.ty, b.ty));\n-                Ok(ty::mt {ty: t, mutbl: m})\n-            }\n-        }\n-    }\n-\n     fn unsafeties(&self, a: Unsafety, b: Unsafety) -> cres<'tcx, Unsafety> {\n         match (a, b) {\n           (Unsafety::Unsafe, _) | (_, Unsafety::Unsafe) => Ok(Unsafety::Unsafe),"}, {"sha": "067973fb80f6826a18c7fa23fbcb12f2945657cb", "filename": "src/librustc/middle/infer/sub.rs", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1b0f0ad28070c072f68ea0ab10bbae61b52706a8/src%2Flibrustc%2Fmiddle%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b0f0ad28070c072f68ea0ab10bbae61b52706a8/src%2Flibrustc%2Fmiddle%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fsub.rs?ref=1b0f0ad28070c072f68ea0ab10bbae61b52706a8", "patch": "@@ -66,30 +66,6 @@ impl<'f, 'tcx> Combine<'tcx> for Sub<'f, 'tcx> {\n         Ok(a)\n     }\n \n-    fn mts(&self, a: &ty::mt<'tcx>, b: &ty::mt<'tcx>) -> cres<'tcx, ty::mt<'tcx>> {\n-        debug!(\"mts({} <: {})\",\n-               a.repr(self.tcx()),\n-               b.repr(self.tcx()));\n-\n-        if a.mutbl != b.mutbl {\n-            return Err(ty::terr_mutability);\n-        }\n-\n-        match b.mutbl {\n-            MutMutable => {\n-                // If supertype is mut, subtype must match exactly\n-                // (i.e., invariant if mut):\n-                try!(self.equate().tys(a.ty, b.ty));\n-            }\n-            MutImmutable => {\n-                // Otherwise we can be covariant:\n-                try!(self.tys(a.ty, b.ty));\n-            }\n-        }\n-\n-        Ok(*a) // return is meaningless in sub, just return *a\n-    }\n-\n     fn unsafeties(&self, a: Unsafety, b: Unsafety) -> cres<'tcx, Unsafety> {\n         self.lub().unsafeties(a, b).compare(b, || {\n             ty::terr_unsafety_mismatch(expected_found(self, a, b))"}]}