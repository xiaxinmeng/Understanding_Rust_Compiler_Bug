{"sha": "741a0ec8429424e10689a1da24820bc4c84f1bcc", "node_id": "C_kwDOAAsO6NoAKDc0MWEwZWM4NDI5NDI0ZTEwNjg5YTFkYTI0ODIwYmM0Yzg0ZjFiY2M", "commit": {"author": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2023-04-14T10:07:36Z"}, "committer": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2023-04-14T10:07:36Z"}, "message": "show all invalid directives errors rather than just the first one", "tree": {"sha": "074fc0fca7b9df6e1b56be45f641da4b18c63128", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/074fc0fca7b9df6e1b56be45f641da4b18c63128"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/741a0ec8429424e10689a1da24820bc4c84f1bcc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEMycKYjxLY0eb13b7zXazX3c0dp4FAmQ5JfwACgkQzXazX3c0\ndp4RSA//a3/hSGAIJmfiBLhjGmzjQ2pwSV++MNcB1gtC468UKWIzHnU28qBIVpqh\nQgOlf/a2+WhJod5jfBJ3VyeySvhzeEjGcoUkdCz4/uVNzQbo6azegjbtkDdW5p6s\nQnJ9ePkts+PLDkNeG2TvJNoXAZrfoEqw8nNfv5n4xxdo1h80xmleHWjXRJCNnYY/\nraiE6F736AXc8DvTPHyvdvPhr8/wzKF6aQZfKpAxkByv0sUqQ61Uw53wr1jDvArC\nGjxSmJitA+HhQjwEmPB5kdLtx5K0NcmpI5Z11L4R7NSqPzPQ/3oFoLSDrl7jbT/O\nLSUe1v7mCSv9GhzMi1ZtdDI6FdOmMQg97Ocf0bCHfbcJO0RueUzkS7xyuHVxCGxN\nQtc1o0I+S+FV/5ljFasyRR0V1ol74LWJE53GpR8SbNg32v6izkyRGv9d0oVX79nq\nw62ZzL53xN/m238gboY3G5K+XQTIeE2auSGnUSVc8YKW+Xmk6+835+/uKoGi+40p\nUwPJOp8DLOrdAhozkynb/aRINh9GAFvjfpwFsTUsaIuUOfkrSVwR9hn4qIKtql76\nD1cDwMsvwnA/abmncbKHHjFsE8lY39dncbIMVINW9p/C11hXFizoaCvp3u1kwyP5\nz663SYqwPz85BcWnqElt6nscBWlMqkOOsmFdSsnSc4RO1+1jTIE=\n=/DtQ\n-----END PGP SIGNATURE-----", "payload": "tree 074fc0fca7b9df6e1b56be45f641da4b18c63128\nparent 55c07678cd80772be719416427f2986dd3524022\nauthor Pietro Albini <pietro.albini@ferrous-systems.com> 1681466856 +0200\ncommitter Pietro Albini <pietro.albini@ferrous-systems.com> 1681466856 +0200\n\nshow all invalid directives errors rather than just the first one\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/741a0ec8429424e10689a1da24820bc4c84f1bcc", "html_url": "https://github.com/rust-lang/rust/commit/741a0ec8429424e10689a1da24820bc4c84f1bcc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/741a0ec8429424e10689a1da24820bc4c84f1bcc/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55c07678cd80772be719416427f2986dd3524022", "url": "https://api.github.com/repos/rust-lang/rust/commits/55c07678cd80772be719416427f2986dd3524022", "html_url": "https://github.com/rust-lang/rust/commit/55c07678cd80772be719416427f2986dd3524022"}], "stats": {"total": 41, "additions": 36, "deletions": 5}, "files": [{"sha": "a83cf33589f4f67b8c1154d5cefcb9eef8b6aa2f", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/741a0ec8429424e10689a1da24820bc4c84f1bcc/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/741a0ec8429424e10689a1da24820bc4c84f1bcc/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=741a0ec8429424e10689a1da24820bc4c84f1bcc", "patch": "@@ -851,6 +851,7 @@ pub fn make_test_description<R: Read>(\n     path: &Path,\n     src: R,\n     cfg: Option<&str>,\n+    poisoned: &mut bool,\n ) -> test::TestDesc {\n     let mut ignore = false;\n     let mut ignore_message = None;\n@@ -875,7 +876,8 @@ pub fn make_test_description<R: Read>(\n                     }\n                     IgnoreDecision::Error { message } => {\n                         eprintln!(\"error: {}: {message}\", path.display());\n-                        panic!();\n+                        *poisoned = true;\n+                        return;\n                     }\n                     IgnoreDecision::Continue => {}\n                 }"}, {"sha": "8ee8aa144019f6b253a39f8ba9984223cf105a4e", "filename": "src/tools/compiletest/src/header/tests.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/741a0ec8429424e10689a1da24820bc4c84f1bcc/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/741a0ec8429424e10689a1da24820bc4c84f1bcc/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs?ref=741a0ec8429424e10689a1da24820bc4c84f1bcc", "patch": "@@ -1,7 +1,23 @@\n+use std::io::Read;\n use std::path::Path;\n \n use crate::common::{Config, Debugger};\n-use crate::header::{make_test_description, parse_normalization_string, EarlyProps};\n+use crate::header::{parse_normalization_string, EarlyProps};\n+\n+fn make_test_description<R: Read>(\n+    config: &Config,\n+    name: test::TestName,\n+    path: &Path,\n+    src: R,\n+    cfg: Option<&str>,\n+) -> test::TestDesc {\n+    let mut poisoned = false;\n+    let test = crate::header::make_test_description(config, name, path, src, cfg, &mut poisoned);\n+    if poisoned {\n+        panic!(\"poisoned!\");\n+    }\n+    test\n+}\n \n #[test]\n fn test_parse_normalization_string() {"}, {"sha": "5bffd05dbd5f81f63479ed432cf8837f5c7fc621", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/741a0ec8429424e10689a1da24820bc4c84f1bcc/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/741a0ec8429424e10689a1da24820bc4c84f1bcc/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=741a0ec8429424e10689a1da24820bc4c84f1bcc", "patch": "@@ -555,6 +555,8 @@ pub fn make_tests(\n     let modified_tests = modified_tests(&config, &config.src_base).unwrap_or_else(|err| {\n         panic!(\"modified_tests got error from dir: {}, error: {}\", config.src_base.display(), err)\n     });\n+\n+    let mut poisoned = false;\n     collect_tests_from_dir(\n         config.clone(),\n         &config.src_base,\n@@ -563,8 +565,14 @@ pub fn make_tests(\n         tests,\n         found_paths,\n         &modified_tests,\n+        &mut poisoned,\n     )\n     .unwrap_or_else(|_| panic!(\"Could not read tests from {}\", config.src_base.display()));\n+\n+    if poisoned {\n+        eprintln!();\n+        panic!(\"there are errors in tests\");\n+    }\n }\n \n /// Returns a stamp constructed from input files common to all test cases.\n@@ -634,6 +642,7 @@ fn collect_tests_from_dir(\n     tests: &mut Vec<test::TestDescAndFn>,\n     found_paths: &mut BTreeSet<PathBuf>,\n     modified_tests: &Vec<PathBuf>,\n+    poisoned: &mut bool,\n ) -> io::Result<()> {\n     // Ignore directories that contain a file named `compiletest-ignore-dir`.\n     if dir.join(\"compiletest-ignore-dir\").exists() {\n@@ -645,7 +654,7 @@ fn collect_tests_from_dir(\n             file: dir.to_path_buf(),\n             relative_dir: relative_dir_path.parent().unwrap().to_path_buf(),\n         };\n-        tests.extend(make_test(config, &paths, inputs));\n+        tests.extend(make_test(config, &paths, inputs, poisoned));\n         return Ok(());\n     }\n \n@@ -671,7 +680,7 @@ fn collect_tests_from_dir(\n             let paths =\n                 TestPaths { file: file_path, relative_dir: relative_dir_path.to_path_buf() };\n \n-            tests.extend(make_test(config.clone(), &paths, inputs))\n+            tests.extend(make_test(config.clone(), &paths, inputs, poisoned))\n         } else if file_path.is_dir() {\n             let relative_file_path = relative_dir_path.join(file.file_name());\n             if &file_name != \"auxiliary\" {\n@@ -684,6 +693,7 @@ fn collect_tests_from_dir(\n                     tests,\n                     found_paths,\n                     modified_tests,\n+                    poisoned,\n                 )?;\n             }\n         } else {\n@@ -710,6 +720,7 @@ fn make_test(\n     config: Arc<Config>,\n     testpaths: &TestPaths,\n     inputs: &Stamp,\n+    poisoned: &mut bool,\n ) -> Vec<test::TestDescAndFn> {\n     let test_path = if config.mode == Mode::RunMake {\n         // Parse directives in the Makefile\n@@ -726,14 +737,16 @@ fn make_test(\n     } else {\n         early_props.revisions.iter().map(Some).collect()\n     };\n+\n     revisions\n         .into_iter()\n         .map(|revision| {\n             let src_file =\n                 std::fs::File::open(&test_path).expect(\"open test file to parse ignores\");\n             let cfg = revision.map(|v| &**v);\n             let test_name = crate::make_test_name(&config, testpaths, revision);\n-            let mut desc = make_test_description(&config, test_name, &test_path, src_file, cfg);\n+            let mut desc =\n+                make_test_description(&config, test_name, &test_path, src_file, cfg, poisoned);\n             // Ignore tests that already run and are up to date with respect to inputs.\n             if !config.force_rerun {\n                 desc.ignore |= is_up_to_date("}]}