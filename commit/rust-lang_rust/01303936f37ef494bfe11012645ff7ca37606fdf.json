{"sha": "01303936f37ef494bfe11012645ff7ca37606fdf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxMzAzOTM2ZjM3ZWY0OTRiZmUxMTAxMjY0NWZmN2NhMzc2MDZmZGY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-26T15:55:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-26T15:55:13Z"}, "message": "Rollup merge of #64772 - Mark-Simulacrum:no-tyctxt-tx, r=eddyb\n\nRemove tx_to_llvm_workers from TyCtxt\n\nThis can be kept within the codegen backend crates entirely -- there's no reason for us to create it outside and attempt to hold it in the (global) context.\n\nChanges here aren't really too easily reviewable I suspect -- not sure if they can be cleaned up by splitting into more commits though, it's just hard to reason about `Box<Any>` in general. If there are thoughts though I'd be happy to hear them.\n\nThe primary goal of this PR is to get rid of the field on `rustc_interface::Queries`.", "tree": {"sha": "a12dba5010e0fb65b0406d176e5caa44ed06a4cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a12dba5010e0fb65b0406d176e5caa44ed06a4cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01303936f37ef494bfe11012645ff7ca37606fdf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdjN9hCRBK7hj4Ov3rIwAAdHIIAJJLy4utTwHMWqlm8neR9VKh\n1vUBd3mlJtNAZG0ibcyoTduOHdvATkgh0T9EsHVrtLbwTqsDfZeKw5DdVfLoHHjN\nTrKBu2Tc5Yoo9nmbez0DWyIpEY7EzkKdzUd/9d4KShVDRm3NUI0pVK/1Msk7sJeL\nD2QJaai3dckNOrP0zZadmX18KYndGlRZFSTF0EBEMUAfR4oGC4DCQie0iiZq7x1r\nPPk3aLz5Bk5Uj6JXZEFTj+FiQeXKu00BkD3HYLw8xAdfXRBWtMseJdgM6HugaOsn\na90xFrWRpNGi6LfTsQM2Dg5UvVXtPUFibrVe/HsWnuGtCG2Ay4KJZaWhW+MfC8Y=\n=ZAqT\n-----END PGP SIGNATURE-----\n", "payload": "tree a12dba5010e0fb65b0406d176e5caa44ed06a4cb\nparent 3b5fbb6a3616cc530edba496bbca3ddb02e19762\nparent b8a040fc5f5edc41af0ccb070239898c0c5d5484\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1569513313 +0200\ncommitter GitHub <noreply@github.com> 1569513313 +0200\n\nRollup merge of #64772 - Mark-Simulacrum:no-tyctxt-tx, r=eddyb\n\nRemove tx_to_llvm_workers from TyCtxt\n\nThis can be kept within the codegen backend crates entirely -- there's no reason for us to create it outside and attempt to hold it in the (global) context.\n\nChanges here aren't really too easily reviewable I suspect -- not sure if they can be cleaned up by splitting into more commits though, it's just hard to reason about `Box<Any>` in general. If there are thoughts though I'd be happy to hear them.\n\nThe primary goal of this PR is to get rid of the field on `rustc_interface::Queries`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01303936f37ef494bfe11012645ff7ca37606fdf", "html_url": "https://github.com/rust-lang/rust/commit/01303936f37ef494bfe11012645ff7ca37606fdf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01303936f37ef494bfe11012645ff7ca37606fdf/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b5fbb6a3616cc530edba496bbca3ddb02e19762", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b5fbb6a3616cc530edba496bbca3ddb02e19762", "html_url": "https://github.com/rust-lang/rust/commit/3b5fbb6a3616cc530edba496bbca3ddb02e19762"}, {"sha": "b8a040fc5f5edc41af0ccb070239898c0c5d5484", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8a040fc5f5edc41af0ccb070239898c0c5d5484", "html_url": "https://github.com/rust-lang/rust/commit/b8a040fc5f5edc41af0ccb070239898c0c5d5484"}], "stats": {"total": 112, "additions": 42, "deletions": 70}, "files": [{"sha": "1cfbd1734a8ed29659b2c95900abf477db54dd2c", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/01303936f37ef494bfe11012645ff7ca37606fdf/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01303936f37ef494bfe11012645ff7ca37606fdf/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=01303936f37ef494bfe11012645ff7ca37606fdf", "patch": "@@ -64,7 +64,6 @@ use std::fmt;\n use std::mem;\n use std::ops::{Deref, Bound};\n use std::iter;\n-use std::sync::mpsc;\n use std::sync::Arc;\n use rustc_target::spec::abi;\n use rustc_macros::HashStable;\n@@ -1064,14 +1063,6 @@ pub struct GlobalCtxt<'tcx> {\n \n     layout_interner: ShardedHashMap<&'tcx LayoutDetails, ()>,\n \n-    /// A general purpose channel to throw data out the back towards LLVM worker\n-    /// threads.\n-    ///\n-    /// This is intended to only get used during the codegen phase of the compiler\n-    /// when satisfying the query for a particular codegen unit. Internally in\n-    /// the query it'll send data along this channel to get processed later.\n-    pub tx_to_llvm_workers: Lock<mpsc::Sender<Box<dyn Any + Send>>>,\n-\n     output_filenames: Arc<OutputFilenames>,\n }\n \n@@ -1184,7 +1175,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         hir: hir_map::Map<'tcx>,\n         on_disk_query_result_cache: query::OnDiskCache<'tcx>,\n         crate_name: &str,\n-        tx: mpsc::Sender<Box<dyn Any + Send>>,\n         output_filenames: &OutputFilenames,\n     ) -> GlobalCtxt<'tcx> {\n         let data_layout = TargetDataLayout::parse(&s.target.target).unwrap_or_else(|err| {\n@@ -1291,7 +1281,6 @@ impl<'tcx> TyCtxt<'tcx> {\n             stability_interner: Default::default(),\n             allocation_interner: Default::default(),\n             alloc_map: Lock::new(interpret::AllocMap::new()),\n-            tx_to_llvm_workers: Lock::new(tx),\n             output_filenames: Arc::new(output_filenames.clone()),\n         }\n     }"}, {"sha": "5758cdbebf7d71e4574dc689554b05bca7a6eec6", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/01303936f37ef494bfe11012645ff7ca37606fdf/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01303936f37ef494bfe11012645ff7ca37606fdf/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=01303936f37ef494bfe11012645ff7ca37606fdf", "patch": "@@ -103,7 +103,11 @@ pub fn iter_globals(llmod: &'ll llvm::Module) -> ValueIter<'ll> {\n     }\n }\n \n-pub fn compile_codegen_unit(tcx: TyCtxt<'tcx>, cgu_name: InternedString) {\n+pub fn compile_codegen_unit(\n+    tcx: TyCtxt<'tcx>,\n+    cgu_name: InternedString,\n+    tx_to_llvm_workers: &std::sync::mpsc::Sender<Box<dyn std::any::Any + Send>>,\n+) {\n     let start_time = Instant::now();\n \n     let dep_node = tcx.codegen_unit(cgu_name).codegen_dep_node(tcx);\n@@ -121,7 +125,7 @@ pub fn compile_codegen_unit(tcx: TyCtxt<'tcx>, cgu_name: InternedString) {\n     let cost = time_to_codegen.as_secs() * 1_000_000_000 +\n                time_to_codegen.subsec_nanos() as u64;\n \n-    submit_codegened_module_to_llvm(&LlvmCodegenBackend(()), tcx, module, cost);\n+    submit_codegened_module_to_llvm(&LlvmCodegenBackend(()), tx_to_llvm_workers, module, cost);\n \n     fn module_codegen(\n         tcx: TyCtxt<'_>,"}, {"sha": "2a63011c2f54525ff433f10c36648347a088a82d", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/01303936f37ef494bfe11012645ff7ca37606fdf/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01303936f37ef494bfe11012645ff7ca37606fdf/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=01303936f37ef494bfe11012645ff7ca37606fdf", "patch": "@@ -52,7 +52,7 @@ use syntax::ext::allocator::AllocatorKind;\n use syntax_pos::symbol::InternedString;\n pub use llvm_util::target_features;\n use std::any::Any;\n-use std::sync::{mpsc, Arc};\n+use std::sync::Arc;\n use std::ffi::CStr;\n \n use rustc::dep_graph::DepGraph;\n@@ -122,8 +122,12 @@ impl ExtraBackendMethods for LlvmCodegenBackend {\n     ) {\n         unsafe { allocator::codegen(tcx, mods, kind) }\n     }\n-    fn compile_codegen_unit(&self, tcx: TyCtxt<'_>, cgu_name: InternedString) {\n-        base::compile_codegen_unit(tcx, cgu_name);\n+    fn compile_codegen_unit(\n+        &self, tcx: TyCtxt<'_>,\n+        cgu_name: InternedString,\n+        tx: &std::sync::mpsc::Sender<Box<dyn Any + Send>>,\n+    ) {\n+        base::compile_codegen_unit(tcx, cgu_name, tx);\n     }\n     fn target_machine_factory(\n         &self,\n@@ -284,10 +288,9 @@ impl CodegenBackend for LlvmCodegenBackend {\n         tcx: TyCtxt<'tcx>,\n         metadata: EncodedMetadata,\n         need_metadata_module: bool,\n-        rx: mpsc::Receiver<Box<dyn Any + Send>>,\n     ) -> Box<dyn Any> {\n         box rustc_codegen_ssa::base::codegen_crate(\n-            LlvmCodegenBackend(()), tcx, metadata, need_metadata_module, rx)\n+            LlvmCodegenBackend(()), tcx, metadata, need_metadata_module)\n     }\n \n     fn join_codegen_and_link("}, {"sha": "3c5fbfd0f866f63d018d1b4130c057ccd6eb6d4d", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/01303936f37ef494bfe11012645ff7ca37606fdf/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01303936f37ef494bfe11012645ff7ca37606fdf/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=01303936f37ef494bfe11012645ff7ca37606fdf", "patch": "@@ -376,9 +376,9 @@ pub fn start_async_codegen<B: ExtraBackendMethods>(\n     backend: B,\n     tcx: TyCtxt<'_>,\n     metadata: EncodedMetadata,\n-    coordinator_receive: Receiver<Box<dyn Any + Send>>,\n     total_cgus: usize,\n ) -> OngoingCodegen<B> {\n+    let (coordinator_send, coordinator_receive) = channel();\n     let sess = tcx.sess;\n     let crate_name = tcx.crate_name(LOCAL_CRATE);\n     let crate_hash = tcx.crate_hash(LOCAL_CRATE);\n@@ -500,7 +500,8 @@ pub fn start_async_codegen<B: ExtraBackendMethods>(\n                                                   sess.jobserver.clone(),\n                                                   Arc::new(modules_config),\n                                                   Arc::new(metadata_config),\n-                                                  Arc::new(allocator_config));\n+                                                  Arc::new(allocator_config),\n+                                                  coordinator_send.clone());\n \n     OngoingCodegen {\n         backend,\n@@ -511,7 +512,7 @@ pub fn start_async_codegen<B: ExtraBackendMethods>(\n         linker_info,\n         crate_info,\n \n-        coordinator_send: tcx.tx_to_llvm_workers.lock().clone(),\n+        coordinator_send,\n         codegen_worker_receive,\n         shared_emitter_main,\n         future: coordinator_thread,\n@@ -1005,8 +1006,9 @@ fn start_executing_work<B: ExtraBackendMethods>(\n     modules_config: Arc<ModuleConfig>,\n     metadata_config: Arc<ModuleConfig>,\n     allocator_config: Arc<ModuleConfig>,\n+    tx_to_llvm_workers: Sender<Box<dyn Any + Send>>,\n ) -> thread::JoinHandle<Result<CompiledModules, ()>> {\n-    let coordinator_send = tcx.tx_to_llvm_workers.lock().clone();\n+    let coordinator_send = tx_to_llvm_workers;\n     let sess = tcx.sess;\n \n     // Compute the set of symbols we need to retain when doing LTO (if we need to)\n@@ -1857,7 +1859,7 @@ impl<B: ExtraBackendMethods> OngoingCodegen<B> {\n \n         // These are generally cheap and won't throw off scheduling.\n         let cost = 0;\n-        submit_codegened_module_to_llvm(&self.backend, tcx, module, cost);\n+        submit_codegened_module_to_llvm(&self.backend, &self.coordinator_send, module, cost);\n     }\n \n     pub fn codegen_finished(&self, tcx: TyCtxt<'_>) {\n@@ -1899,24 +1901,24 @@ impl<B: ExtraBackendMethods> OngoingCodegen<B> {\n \n pub fn submit_codegened_module_to_llvm<B: ExtraBackendMethods>(\n     _backend: &B,\n-    tcx: TyCtxt<'_>,\n+    tx_to_llvm_workers: &Sender<Box<dyn Any + Send>>,\n     module: ModuleCodegen<B::Module>,\n     cost: u64,\n ) {\n     let llvm_work_item = WorkItem::Optimize(module);\n-    drop(tcx.tx_to_llvm_workers.lock().send(Box::new(Message::CodegenDone::<B> {\n+    drop(tx_to_llvm_workers.send(Box::new(Message::CodegenDone::<B> {\n         llvm_work_item,\n         cost,\n     })));\n }\n \n pub fn submit_post_lto_module_to_llvm<B: ExtraBackendMethods>(\n     _backend: &B,\n-    tcx: TyCtxt<'_>,\n+    tx_to_llvm_workers: &Sender<Box<dyn Any + Send>>,\n     module: CachedModuleCodegen,\n ) {\n     let llvm_work_item = WorkItem::CopyPostLtoArtifacts(module);\n-    drop(tcx.tx_to_llvm_workers.lock().send(Box::new(Message::CodegenDone::<B> {\n+    drop(tx_to_llvm_workers.send(Box::new(Message::CodegenDone::<B> {\n         llvm_work_item,\n         cost: 0,\n     })));\n@@ -1925,6 +1927,7 @@ pub fn submit_post_lto_module_to_llvm<B: ExtraBackendMethods>(\n pub fn submit_pre_lto_module_to_llvm<B: ExtraBackendMethods>(\n     _backend: &B,\n     tcx: TyCtxt<'_>,\n+    tx_to_llvm_workers: &Sender<Box<dyn Any + Send>>,\n     module: CachedModuleCodegen,\n ) {\n     let filename = pre_lto_bitcode_filename(&module.name);\n@@ -1939,7 +1942,7 @@ pub fn submit_pre_lto_module_to_llvm<B: ExtraBackendMethods>(\n         })\n     };\n     // Schedule the module to be loaded\n-    drop(tcx.tx_to_llvm_workers.lock().send(Box::new(Message::AddImportOnlyModule::<B> {\n+    drop(tx_to_llvm_workers.send(Box::new(Message::AddImportOnlyModule::<B> {\n         module_data: SerializedModule::FromUncompressedFile(mmap),\n         work_product: module.source,\n     })));"}, {"sha": "90ed629bbc61e5fffb31d18e95d129fda036f782", "filename": "src/librustc_codegen_ssa/base.rs", "status": "modified", "additions": 7, "deletions": 18, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/01303936f37ef494bfe11012645ff7ca37606fdf/src%2Flibrustc_codegen_ssa%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01303936f37ef494bfe11012645ff7ca37606fdf/src%2Flibrustc_codegen_ssa%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fbase.rs?ref=01303936f37ef494bfe11012645ff7ca37606fdf", "patch": "@@ -43,11 +43,9 @@ use crate::mir;\n \n use crate::traits::*;\n \n-use std::any::Any;\n use std::cmp;\n use std::ops::{Deref, DerefMut};\n use std::time::{Instant, Duration};\n-use std::sync::mpsc;\n use syntax_pos::Span;\n use syntax::attr;\n use rustc::hir;\n@@ -482,19 +480,13 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n     tcx: TyCtxt<'tcx>,\n     metadata: EncodedMetadata,\n     need_metadata_module: bool,\n-    rx: mpsc::Receiver<Box<dyn Any + Send>>,\n ) -> OngoingCodegen<B> {\n     check_for_rustc_errors_attr(tcx);\n \n     // Skip crate items and just output metadata in -Z no-codegen mode.\n     if tcx.sess.opts.debugging_opts.no_codegen ||\n        !tcx.sess.opts.output_types.should_codegen() {\n-        let ongoing_codegen = start_async_codegen(\n-            backend,\n-            tcx,\n-            metadata,\n-            rx,\n-            1);\n+        let ongoing_codegen = start_async_codegen(backend, tcx, metadata, 1);\n \n         ongoing_codegen.codegen_finished(tcx);\n \n@@ -523,12 +515,7 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n         }\n     }\n \n-    let ongoing_codegen = start_async_codegen(\n-        backend.clone(),\n-        tcx,\n-        metadata,\n-        rx,\n-        codegen_units.len());\n+    let ongoing_codegen = start_async_codegen(backend.clone(), tcx, metadata, codegen_units.len());\n     let ongoing_codegen = AbortCodegenOnDrop::<B>(Some(ongoing_codegen));\n \n     // Codegen an allocator shim, if necessary.\n@@ -614,20 +601,22 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n             CguReuse::No => {\n                 tcx.sess.profiler(|p| p.start_activity(format!(\"codegen {}\", cgu.name())));\n                 let start_time = Instant::now();\n-                backend.compile_codegen_unit(tcx, *cgu.name());\n+                backend.compile_codegen_unit(tcx, *cgu.name(), &ongoing_codegen.coordinator_send);\n                 total_codegen_time += start_time.elapsed();\n                 tcx.sess.profiler(|p| p.end_activity(format!(\"codegen {}\", cgu.name())));\n                 false\n             }\n             CguReuse::PreLto => {\n-                submit_pre_lto_module_to_llvm(&backend, tcx, CachedModuleCodegen {\n+                submit_pre_lto_module_to_llvm(&backend, tcx, &ongoing_codegen.coordinator_send,\n+                CachedModuleCodegen {\n                     name: cgu.name().to_string(),\n                     source: cgu.work_product(tcx),\n                 });\n                 true\n             }\n             CguReuse::PostLto => {\n-                submit_post_lto_module_to_llvm(&backend, tcx, CachedModuleCodegen {\n+                submit_post_lto_module_to_llvm(&backend, &ongoing_codegen.coordinator_send,\n+                CachedModuleCodegen {\n                     name: cgu.name().to_string(),\n                     source: cgu.work_product(tcx),\n                 });"}, {"sha": "cb197f51460a1901c66efce9e2d15d47863fcb22", "filename": "src/librustc_codegen_ssa/traits/backend.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/01303936f37ef494bfe11012645ff7ca37606fdf/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01303936f37ef494bfe11012645ff7ca37606fdf/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs?ref=01303936f37ef494bfe11012645ff7ca37606fdf", "patch": "@@ -8,6 +8,7 @@ use rustc::session::{Session, config};\n use rustc::ty::TyCtxt;\n use rustc_codegen_utils::codegen_backend::CodegenBackend;\n use std::sync::Arc;\n+use std::sync::mpsc;\n use syntax::ext::allocator::AllocatorKind;\n use syntax_pos::symbol::InternedString;\n \n@@ -44,7 +45,12 @@ pub trait ExtraBackendMethods: CodegenBackend + WriteBackendMethods + Sized + Se\n         mods: &mut Self::Module,\n         kind: AllocatorKind,\n     );\n-    fn compile_codegen_unit(&self, tcx: TyCtxt<'_>, cgu_name: InternedString);\n+    fn compile_codegen_unit(\n+        &self,\n+        tcx: TyCtxt<'_>,\n+        cgu_name: InternedString,\n+        tx_to_llvm_workers: &mpsc::Sender<Box<dyn std::any::Any + Send>>,\n+    );\n     // If find_features is true this won't access `sess.crate_types` by assuming\n     // that `is_pie_binary` is false. When we discover LLVM target features\n     // `sess.crate_types` is uninitialized so we cannot access it."}, {"sha": "2e3af8431eed0d7f4ddc730b3b82b805531a8c8a", "filename": "src/librustc_codegen_utils/codegen_backend.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01303936f37ef494bfe11012645ff7ca37606fdf/src%2Flibrustc_codegen_utils%2Fcodegen_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01303936f37ef494bfe11012645ff7ca37606fdf/src%2Flibrustc_codegen_utils%2Fcodegen_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fcodegen_backend.rs?ref=01303936f37ef494bfe11012645ff7ca37606fdf", "patch": "@@ -7,7 +7,6 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n use std::any::Any;\n-use std::sync::mpsc;\n \n use syntax::symbol::Symbol;\n use rustc::session::Session;\n@@ -36,7 +35,6 @@ pub trait CodegenBackend {\n         tcx: TyCtxt<'tcx>,\n         metadata: EncodedMetadata,\n         need_metadata_module: bool,\n-        rx: mpsc::Receiver<Box<dyn Any + Send>>,\n     ) -> Box<dyn Any>;\n \n     /// This is called on the returned `Box<dyn Any>` from `codegen_backend`"}, {"sha": "6abc6e32d243be27f6800f3a054081ea9cbdb5f3", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/01303936f37ef494bfe11012645ff7ca37606fdf/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01303936f37ef494bfe11012645ff7ca37606fdf/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=01303936f37ef494bfe11012645ff7ca37606fdf", "patch": "@@ -54,7 +54,6 @@ use std::fs;\n use std::io::{self, Write};\n use std::iter;\n use std::path::PathBuf;\n-use std::sync::mpsc;\n use std::cell::RefCell;\n use std::rc::Rc;\n \n@@ -816,7 +815,6 @@ pub fn create_global_ctxt(\n     defs: hir::map::Definitions,\n     resolutions: Resolutions,\n     outputs: OutputFilenames,\n-    tx: mpsc::Sender<Box<dyn Any + Send>>,\n     crate_name: &str,\n ) -> BoxedGlobalCtxt {\n     let sess = compiler.session().clone();\n@@ -858,7 +856,6 @@ pub fn create_global_ctxt(\n             hir_map,\n             query_result_on_disk_cache,\n             &crate_name,\n-            tx,\n             &outputs\n         );\n \n@@ -1068,7 +1065,6 @@ fn encode_and_write_metadata(\n pub fn start_codegen<'tcx>(\n     codegen_backend: &dyn CodegenBackend,\n     tcx: TyCtxt<'tcx>,\n-    rx: mpsc::Receiver<Box<dyn Any + Send>>,\n     outputs: &OutputFilenames,\n ) -> Box<dyn Any> {\n     if log_enabled!(::log::Level::Info) {\n@@ -1082,7 +1078,7 @@ pub fn start_codegen<'tcx>(\n \n     tcx.sess.profiler(|p| p.start_activity(\"codegen crate\"));\n     let codegen = time(tcx.sess, \"codegen\", move || {\n-        codegen_backend.codegen_crate(tcx, metadata, need_metadata_module, rx)\n+        codegen_backend.codegen_crate(tcx, metadata, need_metadata_module)\n     });\n     tcx.sess.profiler(|p| p.end_activity(\"codegen crate\"));\n "}, {"sha": "cd72dc9453c7e54c3ec99cdc11570001f2f18837", "filename": "src/librustc_interface/queries.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/01303936f37ef494bfe11012645ff7ca37606fdf/src%2Flibrustc_interface%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01303936f37ef494bfe11012645ff7ca37606fdf/src%2Flibrustc_interface%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fqueries.rs?ref=01303936f37ef494bfe11012645ff7ca37606fdf", "patch": "@@ -10,7 +10,6 @@ use rustc::ty::steal::Steal;\n use rustc::dep_graph::DepGraph;\n use std::cell::{Ref, RefMut, RefCell};\n use std::rc::Rc;\n-use std::sync::mpsc;\n use std::any::Any;\n use std::mem;\n use syntax::{self, ast};\n@@ -80,8 +79,6 @@ pub(crate) struct Queries {\n     dep_graph: Query<DepGraph>,\n     lower_to_hir: Query<(Steal<hir::map::Forest>, ExpansionResult)>,\n     prepare_outputs: Query<OutputFilenames>,\n-    codegen_channel: Query<(Steal<mpsc::Sender<Box<dyn Any + Send>>>,\n-                            Steal<mpsc::Receiver<Box<dyn Any + Send>>>)>,\n     global_ctxt: Query<BoxedGlobalCtxt>,\n     ongoing_codegen: Query<Box<dyn Any>>,\n     link: Query<()>,\n@@ -211,36 +208,25 @@ impl Compiler {\n         })\n     }\n \n-    pub fn codegen_channel(&self) -> Result<&Query<(Steal<mpsc::Sender<Box<dyn Any + Send>>>,\n-                                                    Steal<mpsc::Receiver<Box<dyn Any + Send>>>)>> {\n-        self.queries.codegen_channel.compute(|| {\n-            let (tx, rx) = mpsc::channel();\n-            Ok((Steal::new(tx), Steal::new(rx)))\n-        })\n-    }\n-\n     pub fn global_ctxt(&self) -> Result<&Query<BoxedGlobalCtxt>> {\n         self.queries.global_ctxt.compute(|| {\n             let crate_name = self.crate_name()?.peek().clone();\n             let outputs = self.prepare_outputs()?.peek().clone();\n             let hir = self.lower_to_hir()?;\n             let hir = hir.peek();\n             let (ref hir_forest, ref expansion) = *hir;\n-            let tx = self.codegen_channel()?.peek().0.steal();\n             Ok(passes::create_global_ctxt(\n                 self,\n                 hir_forest.steal(),\n                 expansion.defs.steal(),\n                 expansion.resolutions.steal(),\n                 outputs,\n-                tx,\n                 &crate_name))\n         })\n     }\n \n     pub fn ongoing_codegen(&self) -> Result<&Query<Box<dyn Any>>> {\n         self.queries.ongoing_codegen.compute(|| {\n-            let rx = self.codegen_channel()?.peek().1.steal();\n             let outputs = self.prepare_outputs()?;\n             self.global_ctxt()?.peek_mut().enter(|tcx| {\n                 tcx.analysis(LOCAL_CRATE).ok();\n@@ -251,7 +237,6 @@ impl Compiler {\n                 Ok(passes::start_codegen(\n                     &***self.codegen_backend(),\n                     tcx,\n-                    rx,\n                     &*outputs.peek()\n                 ))\n             })"}, {"sha": "c1bcb8a1aa2624cc47eb1702ca0ec8fc2144aca4", "filename": "src/test/run-make-fulldeps/hotplug_codegen_backend/the_backend.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/01303936f37ef494bfe11012645ff7ca37606fdf/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01303936f37ef494bfe11012645ff7ca37606fdf/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs?ref=01303936f37ef494bfe11012645ff7ca37606fdf", "patch": "@@ -64,7 +64,6 @@ impl CodegenBackend for TheBackend {\n         tcx: TyCtxt<'tcx>,\n         _metadata: EncodedMetadata,\n         _need_metadata_module: bool,\n-        _rx: mpsc::Receiver<Box<Any + Send>>\n     ) -> Box<Any> {\n         use rustc::hir::def_id::LOCAL_CRATE;\n "}]}