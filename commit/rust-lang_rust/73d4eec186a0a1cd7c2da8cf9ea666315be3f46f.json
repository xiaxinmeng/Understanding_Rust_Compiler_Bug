{"sha": "73d4eec186a0a1cd7c2da8cf9ea666315be3f46f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczZDRlZWMxODZhMGExY2Q3YzJkYThjZjllYTY2NjMxNWJlM2Y0NmY=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-10-19T15:18:03Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-10-29T08:45:19Z"}, "message": "Improve a few cases of collecting to an FxHash(Map/Set)", "tree": {"sha": "4b4c2cddbee9bf1e4cceca89f585384b3745783a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b4c2cddbee9bf1e4cceca89f585384b3745783a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73d4eec186a0a1cd7c2da8cf9ea666315be3f46f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73d4eec186a0a1cd7c2da8cf9ea666315be3f46f", "html_url": "https://github.com/rust-lang/rust/commit/73d4eec186a0a1cd7c2da8cf9ea666315be3f46f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73d4eec186a0a1cd7c2da8cf9ea666315be3f46f/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e88b7363b7858960ccfd87326ece9d00bf4d973", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e88b7363b7858960ccfd87326ece9d00bf4d973", "html_url": "https://github.com/rust-lang/rust/commit/4e88b7363b7858960ccfd87326ece9d00bf4d973"}], "stats": {"total": 34, "additions": 15, "deletions": 19}, "files": [{"sha": "a210d63f129e31e6527389b8b4274917f50e0ab2", "filename": "src/librustc/infer/lexical_region_resolve/graphviz.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/73d4eec186a0a1cd7c2da8cf9ea666315be3f46f/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73d4eec186a0a1cd7c2da8cf9ea666315be3f46f/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fgraphviz.rs?ref=73d4eec186a0a1cd7c2da8cf9ea666315be3f46f", "patch": "@@ -230,10 +230,7 @@ impl<'a, 'gcx, 'tcx> dot::GraphWalk<'a> for ConstraintGraph<'a, 'gcx, 'tcx> {\n     type Node = Node;\n     type Edge = Edge<'tcx>;\n     fn nodes(&self) -> dot::Nodes<'_, Node> {\n-        let mut set = FxHashSet::default();\n-        for node in self.node_ids.keys() {\n-            set.insert(*node);\n-        }\n+        let set = self.node_ids.keys().cloned().collect::<FxHashSet<_>>();\n         debug!(\"constraint graph has {} nodes\", set.len());\n         set.into_iter().collect()\n     }"}, {"sha": "e3f9c51a1235ee934e046c90e09046d9689097d8", "filename": "src/librustc/middle/dependency_format.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/73d4eec186a0a1cd7c2da8cf9ea666315be3f46f/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73d4eec186a0a1cd7c2da8cf9ea666315be3f46f/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs?ref=73d4eec186a0a1cd7c2da8cf9ea666315be3f46f", "patch": "@@ -94,12 +94,11 @@ pub enum Linkage {\n \n pub fn calculate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     let sess = &tcx.sess;\n-    let mut fmts = FxHashMap::default();\n-    for &ty in sess.crate_types.borrow().iter() {\n+    let fmts = sess.crate_types.borrow().iter().map(|&ty| {\n         let linkage = calculate_type(tcx, ty);\n         verify_ok(tcx, &linkage);\n-        fmts.insert(ty, linkage);\n-    }\n+        (ty, linkage)\n+    }).collect::<FxHashMap<_, _>>();\n     sess.abort_if_errors();\n     sess.dependency_formats.set(fmts);\n }"}, {"sha": "a6a05a44ca93aa6144359a76f3fb13fb9f35b996", "filename": "src/librustc/ty/query/on_disk_cache.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/73d4eec186a0a1cd7c2da8cf9ea666315be3f46f/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73d4eec186a0a1cd7c2da8cf9ea666315be3f46f/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=73d4eec186a0a1cd7c2da8cf9ea666315be3f46f", "patch": "@@ -174,10 +174,13 @@ impl<'sess> OnDiskCache<'sess> {\n         tcx.dep_graph.with_ignore(|| {\n             // Allocate SourceFileIndices\n             let (file_to_file_index, file_index_to_stable_id) = {\n-                let mut file_to_file_index = FxHashMap::default();\n-                let mut file_index_to_stable_id = FxHashMap::default();\n+                let files = tcx.sess.source_map().files();\n+                let mut file_to_file_index = FxHashMap::with_capacity_and_hasher(\n+                    files.len(), Default::default());\n+                let mut file_index_to_stable_id = FxHashMap::with_capacity_and_hasher(\n+                    files.len(), Default::default());\n \n-                for (index, file) in tcx.sess.source_map().files().iter().enumerate() {\n+                for (index, file) in files.iter().enumerate() {\n                     let index = SourceFileIndex(index as u32);\n                     let file_ptr: *const SourceFile = &**file as *const _;\n                     file_to_file_index.insert(file_ptr, index);"}, {"sha": "4851938653b53d33eeebd38b78dd083c3a76234d", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/73d4eec186a0a1cd7c2da8cf9ea666315be3f46f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73d4eec186a0a1cd7c2da8cf9ea666315be3f46f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=73d4eec186a0a1cd7c2da8cf9ea666315be3f46f", "patch": "@@ -3510,10 +3510,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             _ => span_bug!(span, \"non-ADT passed to check_expr_struct_fields\")\n         };\n \n-        let mut remaining_fields = FxHashMap::default();\n-        for (i, field) in variant.fields.iter().enumerate() {\n-            remaining_fields.insert(field.ident.modern(), (i, field));\n-        }\n+        let mut remaining_fields = variant.fields.iter().enumerate().map(|(i, field)|\n+            (field.ident.modern(), (i, field))\n+        ).collect::<FxHashMap<_, _>>();\n \n         let mut seen_fields = FxHashMap::default();\n \n@@ -5051,10 +5050,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // provided (if any) into their appropriate spaces. We'll also report\n         // errors if type parameters are provided in an inappropriate place.\n \n-        let mut generic_segs = FxHashSet::default();\n-        for PathSeg(_, index) in &path_segs {\n-            generic_segs.insert(index);\n-        }\n+        let generic_segs = path_segs.iter().map(|PathSeg(_, index)| index)\n+            .collect::<FxHashSet<_>>();\n         AstConv::prohibit_generics(self, segments.iter().enumerate().filter_map(|(index, seg)| {\n             if !generic_segs.contains(&index) {\n                 Some(seg)"}]}