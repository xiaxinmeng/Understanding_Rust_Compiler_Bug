{"sha": "d9c7d0bc938dd7a1d14e0d86fa0df439faa1ed3f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5YzdkMGJjOTM4ZGQ3YTFkMTRlMGQ4NmZhMGRmNDM5ZmFhMWVkM2Y=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-03T15:15:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-03T15:15:38Z"}, "message": "auto merge of #6185 : gifnksm/rust/prelude-from_str, r=graydon\n\n`core::prelude`  re-exports `core::to_str::ToStr`, but doesn't re-export `core::from_str::FromStr`.\r\nThat is inconsistent.", "tree": {"sha": "500a48e6d3b69d8c32e349a0842bc5caa1c0b035", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/500a48e6d3b69d8c32e349a0842bc5caa1c0b035"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9c7d0bc938dd7a1d14e0d86fa0df439faa1ed3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9c7d0bc938dd7a1d14e0d86fa0df439faa1ed3f", "html_url": "https://github.com/rust-lang/rust/commit/d9c7d0bc938dd7a1d14e0d86fa0df439faa1ed3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9c7d0bc938dd7a1d14e0d86fa0df439faa1ed3f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "213f7b24ccd9a6833af7e1a329c5e7ffc8f9e3d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/213f7b24ccd9a6833af7e1a329c5e7ffc8f9e3d2", "html_url": "https://github.com/rust-lang/rust/commit/213f7b24ccd9a6833af7e1a329c5e7ffc8f9e3d2"}, {"sha": "e34a7ecbab8190560d50d4ccb21ffdae855b7c60", "url": "https://api.github.com/repos/rust-lang/rust/commits/e34a7ecbab8190560d50d4ccb21ffdae855b7c60", "html_url": "https://github.com/rust-lang/rust/commit/e34a7ecbab8190560d50d4ccb21ffdae855b7c60"}], "stats": {"total": 37, "additions": 14, "deletions": 23}, "files": [{"sha": "1b4b81dca267c0e2773f128a65449193049d1c0a", "filename": "src/libcore/bool.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9c7d0bc938dd7a1d14e0d86fa0df439faa1ed3f/src%2Flibcore%2Fbool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9c7d0bc938dd7a1d14e0d86fa0df439faa1ed3f/src%2Flibcore%2Fbool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbool.rs?ref=d9c7d0bc938dd7a1d14e0d86fa0df439faa1ed3f", "patch": "@@ -108,8 +108,6 @@ mod tests {\n \n     #[test]\n     fn test_bool_from_str() {\n-        use from_str::FromStr;\n-\n         do all_values |v| {\n             assert!(Some(v) == FromStr::from_str(to_str(v)))\n         }"}, {"sha": "22f31d52d2d54d30c8522d68b77ce1740128a7c6", "filename": "src/libcore/cast.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9c7d0bc938dd7a1d14e0d86fa0df439faa1ed3f/src%2Flibcore%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9c7d0bc938dd7a1d14e0d86fa0df439faa1ed3f/src%2Flibcore%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcast.rs?ref=d9c7d0bc938dd7a1d14e0d86fa0df439faa1ed3f", "patch": "@@ -10,7 +10,9 @@\n \n //! Unsafe casting functions\n \n+#[cfg(not(stage0))]\n use sys;\n+#[cfg(not(stage0))]\n use unstable;\n \n pub mod rusti {"}, {"sha": "d8cca429f84472a85531af0bcd4d2b36f97b2479", "filename": "src/libcore/core.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d9c7d0bc938dd7a1d14e0d86fa0df439faa1ed3f/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/d9c7d0bc938dd7a1d14e0d86fa0df439faa1ed3f/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=d9c7d0bc938dd7a1d14e0d86fa0df439faa1ed3f", "patch": "@@ -111,6 +111,7 @@ pub use num::{Bitwise, BitCount, Bounded};\n pub use num::{Primitive, Int, Float};\n \n pub use ptr::Ptr;\n+pub use from_str::FromStr;\n pub use to_str::ToStr;\n pub use clone::Clone;\n "}, {"sha": "c18273955adab2fba98c8242b6611a0c6c5dbdbe", "filename": "src/libcore/flate.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d9c7d0bc938dd7a1d14e0d86fa0df439faa1ed3f/src%2Flibcore%2Fflate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9c7d0bc938dd7a1d14e0d86fa0df439faa1ed3f/src%2Flibcore%2Fflate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fflate.rs?ref=d9c7d0bc938dd7a1d14e0d86fa0df439faa1ed3f", "patch": "@@ -16,7 +16,6 @@ Simple compression\n \n use libc;\n use libc::{c_void, size_t, c_int};\n-use ptr;\n use vec;\n \n #[cfg(test)] use rand;"}, {"sha": "1b4c679ea07b47d43d081121c6f5e1b92f11cd5e", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d9c7d0bc938dd7a1d14e0d86fa0df439faa1ed3f/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9c7d0bc938dd7a1d14e0d86fa0df439faa1ed3f/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=d9c7d0bc938dd7a1d14e0d86fa0df439faa1ed3f", "patch": "@@ -10,7 +10,6 @@\n \n //! Operations and constants for `f32`\n \n-use from_str;\n use num::{Zero, One, strconv};\n use prelude::*;\n \n@@ -798,7 +797,7 @@ pub fn from_str_radix(num: &str, rdx: uint) -> Option<f32> {\n                              strconv::ExpNone, false, false)\n }\n \n-impl from_str::FromStr for f32 {\n+impl FromStr for f32 {\n     #[inline(always)]\n     fn from_str(val: &str) -> Option<f32> { from_str(val) }\n }"}, {"sha": "0f7647fa8680dbf30846e3c9e5f8328f453dbbd4", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d9c7d0bc938dd7a1d14e0d86fa0df439faa1ed3f/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9c7d0bc938dd7a1d14e0d86fa0df439faa1ed3f/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=d9c7d0bc938dd7a1d14e0d86fa0df439faa1ed3f", "patch": "@@ -10,7 +10,6 @@\n \n //! Operations and constants for `f64`\n \n-use from_str;\n use libc::c_int;\n use num::{Zero, One, strconv};\n use prelude::*;\n@@ -840,7 +839,7 @@ pub fn from_str_radix(num: &str, rdx: uint) -> Option<f64> {\n                              strconv::ExpNone, false, false)\n }\n \n-impl from_str::FromStr for f64 {\n+impl FromStr for f64 {\n     #[inline(always)]\n     fn from_str(val: &str) -> Option<f64> { from_str(val) }\n }"}, {"sha": "16bb2aa128651ebcb8da461a47b84794a7138470", "filename": "src/libcore/num/float.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d9c7d0bc938dd7a1d14e0d86fa0df439faa1ed3f/src%2Flibcore%2Fnum%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9c7d0bc938dd7a1d14e0d86fa0df439faa1ed3f/src%2Flibcore%2Fnum%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ffloat.rs?ref=d9c7d0bc938dd7a1d14e0d86fa0df439faa1ed3f", "patch": "@@ -20,7 +20,6 @@\n \n // PORT this must match in width according to architecture\n \n-use from_str;\n use libc::c_int;\n use num::{Zero, One, strconv};\n use prelude::*;\n@@ -289,7 +288,7 @@ pub fn from_str_radix(num: &str, radix: uint) -> Option<float> {\n                              strconv::ExpNone, false, false)\n }\n \n-impl from_str::FromStr for float {\n+impl FromStr for float {\n     #[inline(always)]\n     fn from_str(val: &str) -> Option<float> { from_str(val) }\n }"}, {"sha": "090e0256abf6e29954968521b3c2d31bca5a466e", "filename": "src/libcore/num/int-template.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d9c7d0bc938dd7a1d14e0d86fa0df439faa1ed3f/src%2Flibcore%2Fnum%2Fint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9c7d0bc938dd7a1d14e0d86fa0df439faa1ed3f/src%2Flibcore%2Fnum%2Fint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint-template.rs?ref=d9c7d0bc938dd7a1d14e0d86fa0df439faa1ed3f", "patch": "@@ -10,7 +10,6 @@\n \n use T = self::inst::T;\n \n-use from_str::FromStr;\n use num::{ToStrRadix, FromStrRadix};\n use num::{Zero, One, strconv};\n use prelude::*;"}, {"sha": "379c1834543d20ab19b1fbdfc6f791f40cdf4dbd", "filename": "src/libcore/num/uint-template.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d9c7d0bc938dd7a1d14e0d86fa0df439faa1ed3f/src%2Flibcore%2Fnum%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9c7d0bc938dd7a1d14e0d86fa0df439faa1ed3f/src%2Flibcore%2Fnum%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint-template.rs?ref=d9c7d0bc938dd7a1d14e0d86fa0df439faa1ed3f", "patch": "@@ -11,7 +11,6 @@\n use T = self::inst::T;\n use T_SIGNED = self::inst::T_SIGNED;\n \n-use from_str::FromStr;\n use num::{ToStrRadix, FromStrRadix};\n use num::{Zero, One, strconv};\n use prelude::*;"}, {"sha": "19674900f908e07d55f74b733f3f3ea11e9a44d4", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d9c7d0bc938dd7a1d14e0d86fa0df439faa1ed3f/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9c7d0bc938dd7a1d14e0d86fa0df439faa1ed3f/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=d9c7d0bc938dd7a1d14e0d86fa0df439faa1ed3f", "patch": "@@ -303,7 +303,7 @@ struct BufferResource<T> {\n }\n \n #[unsafe_destructor]\n-impl<T> ::ops::Drop for BufferResource<T> {\n+impl<T> Drop for BufferResource<T> {\n     fn finalize(&self) {\n         unsafe {\n             let b = move_it!(self.buffer);\n@@ -639,7 +639,7 @@ pub struct SendPacketBuffered<T, Tbuffer> {\n }\n \n #[unsafe_destructor]\n-impl<T:Owned,Tbuffer:Owned> ::ops::Drop for SendPacketBuffered<T,Tbuffer> {\n+impl<T:Owned,Tbuffer:Owned> Drop for SendPacketBuffered<T,Tbuffer> {\n     fn finalize(&self) {\n         //if self.p != none {\n         //    debug!(\"drop send %?\", option::get(self.p));\n@@ -708,7 +708,7 @@ pub struct RecvPacketBuffered<T, Tbuffer> {\n }\n \n #[unsafe_destructor]\n-impl<T:Owned,Tbuffer:Owned> ::ops::Drop for RecvPacketBuffered<T,Tbuffer> {\n+impl<T:Owned,Tbuffer:Owned> Drop for RecvPacketBuffered<T,Tbuffer> {\n     fn finalize(&self) {\n         //if self.p != none {\n         //    debug!(\"drop recv %?\", option::get(self.p));"}, {"sha": "e3c57097471f25adf585266d6b9da60250e6753e", "filename": "src/libcore/prelude.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d9c7d0bc938dd7a1d14e0d86fa0df439faa1ed3f/src%2Flibcore%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9c7d0bc938dd7a1d14e0d86fa0df439faa1ed3f/src%2Flibcore%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude.rs?ref=d9c7d0bc938dd7a1d14e0d86fa0df439faa1ed3f", "patch": "@@ -51,6 +51,7 @@ pub use path::WindowsPath;\n pub use ptr::Ptr;\n pub use ascii::{Ascii, AsciiCast, OwnedAsciiCast, AsciiStr};\n pub use str::{StrSlice, OwnedStr};\n+pub use from_str::{FromStr};\n pub use to_bytes::IterBytes;\n pub use to_str::{ToStr, ToStrConsume};\n pub use tuple::{CopyableTuple, ImmutableTuple, ExtendedTupleOps};"}, {"sha": "21e1733cc307596e4bad16a8f78ddc6b45863183", "filename": "src/libstd/net_url.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d9c7d0bc938dd7a1d14e0d86fa0df439faa1ed3f/src%2Flibstd%2Fnet_url.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9c7d0bc938dd7a1d14e0d86fa0df439faa1ed3f/src%2Flibstd%2Fnet_url.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_url.rs?ref=d9c7d0bc938dd7a1d14e0d86fa0df439faa1ed3f", "patch": "@@ -13,15 +13,11 @@\n #[allow(deprecated_mode)];\n \n use core::cmp::Eq;\n-use core::from_str::FromStr;\n use core::io::{Reader, ReaderUtil};\n use core::io;\n use core::hashmap::HashMap;\n use core::str;\n-use core::to_bytes::IterBytes;\n use core::to_bytes;\n-use core::to_str::ToStr;\n-use core::to_str;\n use core::uint;\n \n #[deriving(Clone, Eq)]\n@@ -703,13 +699,13 @@ pub fn to_str(url: &Url) -> ~str {\n     fmt!(\"%s:%s%s%s%s\", url.scheme, authority, url.path, query, fragment)\n }\n \n-impl to_str::ToStr for Url {\n+impl ToStr for Url {\n     pub fn to_str(&self) -> ~str {\n         to_str(self)\n     }\n }\n \n-impl to_bytes::IterBytes for Url {\n+impl IterBytes for Url {\n     fn iter_bytes(&self, lsb0: bool, f: to_bytes::Cb) {\n         self.to_str().iter_bytes(lsb0, f)\n     }"}, {"sha": "497ce7f41aae368fe7865785da9061de249df305", "filename": "src/libstd/num/bigint.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d9c7d0bc938dd7a1d14e0d86fa0df439faa1ed3f/src%2Flibstd%2Fnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9c7d0bc938dd7a1d14e0d86fa0df439faa1ed3f/src%2Flibstd%2Fnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fbigint.rs?ref=d9c7d0bc938dd7a1d14e0d86fa0df439faa1ed3f", "patch": "@@ -21,7 +21,6 @@ A BigInt is a combination of BigUint and Sign.\n \n use core::cmp::{Eq, Ord, TotalEq, TotalOrd, Ordering, Less, Equal, Greater};\n use core::num::{IntConvertible, Zero, One, ToStrRadix, FromStrRadix};\n-use core::*;\n \n /**\n A BigDigit is a BigUint's composing element.\n@@ -141,7 +140,7 @@ impl ToStr for BigUint {\n     fn to_str(&self) -> ~str { self.to_str_radix(10) }\n }\n \n-impl from_str::FromStr for BigUint {\n+impl FromStr for BigUint {\n     #[inline(always)]\n     fn from_str(s: &str) -> Option<BigUint> {\n         FromStrRadix::from_str_radix(s, 10)\n@@ -785,7 +784,7 @@ impl ToStr for BigInt {\n     fn to_str(&self) -> ~str { self.to_str_radix(10) }\n }\n \n-impl from_str::FromStr for BigInt {\n+impl FromStr for BigInt {\n     #[inline(always)]\n     fn from_str(s: &str) -> Option<BigInt> {\n         FromStrRadix::from_str_radix(s, 10)"}]}