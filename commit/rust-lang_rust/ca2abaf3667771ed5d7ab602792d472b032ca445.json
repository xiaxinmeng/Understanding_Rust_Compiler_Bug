{"sha": "ca2abaf3667771ed5d7ab602792d472b032ca445", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhMmFiYWYzNjY3NzcxZWQ1ZDdhYjYwMjc5MmQ0NzJiMDMyY2E0NDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-31T07:18:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-31T07:18:06Z"}, "message": "Auto merge of #5109 - phansch:ciao_util_dev, r=flip1995\n\nDeprecate util/dev in favor of cargo alias\n\nThis means one less shell script and a bit more cross-platform support\nfor contributors.\n\nIf you've been using `./util/dev` before, this now becomes `cargo dev`.\n\nThe key part of this change is found in `.cargo/config` where an alias for calling the `clippy_dev` binary is defined.\n\nchangelog: none", "tree": {"sha": "cc833ad4c8a38a38dd0bfe4eb4dd3f7ee69263a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc833ad4c8a38a38dd0bfe4eb4dd3f7ee69263a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca2abaf3667771ed5d7ab602792d472b032ca445", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca2abaf3667771ed5d7ab602792d472b032ca445", "html_url": "https://github.com/rust-lang/rust/commit/ca2abaf3667771ed5d7ab602792d472b032ca445", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca2abaf3667771ed5d7ab602792d472b032ca445/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e9089e454b04b8bad5ed6678050f1cc290a74b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e9089e454b04b8bad5ed6678050f1cc290a74b3", "html_url": "https://github.com/rust-lang/rust/commit/8e9089e454b04b8bad5ed6678050f1cc290a74b3"}, {"sha": "8f457fa4c99c39ec5c2428922d6f7cc3fec84f59", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f457fa4c99c39ec5c2428922d6f7cc3fec84f59", "html_url": "https://github.com/rust-lang/rust/commit/8f457fa4c99c39ec5c2428922d6f7cc3fec84f59"}], "stats": {"total": 134, "additions": 61, "deletions": 73}, "files": [{"sha": "2bad3b9c57f0c95f05d5071bd0c45560f55c88a5", "filename": ".cargo/config", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca2abaf3667771ed5d7ab602792d472b032ca445/.cargo%2Fconfig", "raw_url": "https://github.com/rust-lang/rust/raw/ca2abaf3667771ed5d7ab602792d472b032ca445/.cargo%2Fconfig", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.cargo%2Fconfig?ref=ca2abaf3667771ed5d7ab602792d472b032ca445", "patch": "@@ -1,5 +1,6 @@\n [alias]\n uitest = \"test --test compile-test\"\n+dev = \"run --package clippy_dev --bin clippy_dev --manifest-path clippy_dev/Cargo.toml --\"\n \n [build]\n rustflags = [\"-Zunstable-options\"]"}, {"sha": "97aa220afea540e16a4a18ff05b67fc030f136c4", "filename": ".github/PULL_REQUEST_TEMPLATE.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca2abaf3667771ed5d7ab602792d472b032ca445/.github%2FPULL_REQUEST_TEMPLATE.md", "raw_url": "https://github.com/rust-lang/rust/raw/ca2abaf3667771ed5d7ab602792d472b032ca445/.github%2FPULL_REQUEST_TEMPLATE.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2FPULL_REQUEST_TEMPLATE.md?ref=ca2abaf3667771ed5d7ab602792d472b032ca445", "patch": "@@ -15,9 +15,9 @@ checked during review or continuous integration.\n - [ ] Followed [lint naming conventions][lint_naming]\n - [ ] Added passing UI tests (including committed `.stderr` file)\n - [ ] `cargo test` passes locally\n-- [ ] Executed `./util/dev update_lints`\n+- [ ] Executed `cargo dev update_lints`\n - [ ] Added lint documentation\n-- [ ] Run `./util/dev fmt`\n+- [ ] Run `cargo dev fmt`\n \n [lint_naming]: https://rust-lang.github.io/rfcs/0344-conventions-galore.html#lints\n "}, {"sha": "4a828051185f2c06a4a5bea67e1fd4ea95bb9a1d", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca2abaf3667771ed5d7ab602792d472b032ca445/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/ca2abaf3667771ed5d7ab602792d472b032ca445/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=ca2abaf3667771ed5d7ab602792d472b032ca445", "patch": "@@ -105,7 +105,7 @@ pub fn register_plugins(reg: &mut rustc_driver::plugin::Registry) {\n \n The [`plugin::PluginRegistry`][plugin_registry] provides two methods to register lints: [register_early_lint_pass][reg_early_lint_pass] and [register_late_lint_pass][reg_late_lint_pass].\n Both take an object that implements an [`EarlyLintPass`][early_lint_pass] or [`LateLintPass`][late_lint_pass] respectively. This is done in every single lint.\n-It's worth noting that the majority of `clippy_lints/src/lib.rs` is autogenerated by `util/dev update_lints` and you don't have to add anything by hand. When you are writing your own lint, you can use that script to save you some time.\n+It's worth noting that the majority of `clippy_lints/src/lib.rs` is autogenerated by `cargo dev update_lints` and you don't have to add anything by hand. When you are writing your own lint, you can use that script to save you some time.\n \n ```rust\n // ./clippy_lints/src/else_if_without_else.rs"}, {"sha": "125a566271d0de686d6f1bda6c034c86cc3a7a05", "filename": "ci/base-tests.sh", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca2abaf3667771ed5d7ab602792d472b032ca445/ci%2Fbase-tests.sh", "raw_url": "https://github.com/rust-lang/rust/raw/ca2abaf3667771ed5d7ab602792d472b032ca445/ci%2Fbase-tests.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ci%2Fbase-tests.sh?ref=ca2abaf3667771ed5d7ab602792d472b032ca445", "patch": "@@ -22,8 +22,8 @@ cargo test --features deny-warnings\n )\n \n # Perform various checks for lint registration\n-./util/dev update_lints --check\n-./util/dev --limit-stderr-length\n+cargo dev update_lints --check\n+cargo dev --limit-stderr-length\n \n # Check running clippy-driver without cargo\n ("}, {"sha": "a6043c4be0dc355969e8a144fe0abf1ab8f88cd5", "filename": "clippy_dev/src/fmt.rs", "status": "modified", "additions": 4, "deletions": 26, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ca2abaf3667771ed5d7ab602792d472b032ca445/clippy_dev%2Fsrc%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2abaf3667771ed5d7ab602792d472b032ca445/clippy_dev%2Fsrc%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Ffmt.rs?ref=ca2abaf3667771ed5d7ab602792d472b032ca445", "patch": "@@ -1,15 +1,15 @@\n+use clippy_dev::clippy_project_root;\n use shell_escape::escape;\n use std::ffi::OsStr;\n use std::io;\n-use std::path::{Path, PathBuf};\n+use std::path::Path;\n use std::process::{self, Command};\n use walkdir::WalkDir;\n \n #[derive(Debug)]\n pub enum CliError {\n     CommandFailed(String),\n     IoError(io::Error),\n-    ProjectRootNotFound,\n     RustfmtNotInstalled,\n     WalkDirError(walkdir::Error),\n }\n@@ -35,7 +35,7 @@ pub fn run(check: bool, verbose: bool) {\n     fn try_run(context: &FmtContext) -> Result<bool, CliError> {\n         let mut success = true;\n \n-        let project_root = project_root()?;\n+        let project_root = clippy_project_root();\n \n         rustfmt_test(context)?;\n \n@@ -69,9 +69,6 @@ pub fn run(check: bool, verbose: bool) {\n             CliError::IoError(err) => {\n                 eprintln!(\"error: {}\", err);\n             },\n-            CliError::ProjectRootNotFound => {\n-                eprintln!(\"error: Can't determine root of project. Please run inside a Clippy working dir.\");\n-            },\n             CliError::RustfmtNotInstalled => {\n                 eprintln!(\"error: rustfmt nightly is not installed.\");\n             },\n@@ -88,7 +85,7 @@ pub fn run(check: bool, verbose: bool) {\n         Ok(false) => {\n             eprintln!();\n             eprintln!(\"Formatting check failed.\");\n-            eprintln!(\"Run `./util/dev fmt` to update formatting.\");\n+            eprintln!(\"Run `cargo dev fmt` to update formatting.\");\n             1\n         },\n         Err(err) => {\n@@ -176,22 +173,3 @@ fn rustfmt(context: &FmtContext, path: &Path) -> Result<bool, CliError> {\n     }\n     Ok(success)\n }\n-\n-fn project_root() -> Result<PathBuf, CliError> {\n-    let current_dir = std::env::current_dir()?;\n-    for path in current_dir.ancestors() {\n-        let result = std::fs::read_to_string(path.join(\"Cargo.toml\"));\n-        if let Err(err) = &result {\n-            if err.kind() == io::ErrorKind::NotFound {\n-                continue;\n-            }\n-        }\n-\n-        let content = result?;\n-        if content.contains(\"[package]\\nname = \\\"clippy\\\"\") {\n-            return Ok(path.to_path_buf());\n-        }\n-    }\n-\n-    Err(CliError::ProjectRootNotFound)\n-}"}, {"sha": "c58b80e4318eeb4432356ea9ffee3732fe136cbd", "filename": "clippy_dev/src/lib.rs", "status": "modified", "additions": 27, "deletions": 4, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/ca2abaf3667771ed5d7ab602792d472b032ca445/clippy_dev%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2abaf3667771ed5d7ab602792d472b032ca445/clippy_dev%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Flib.rs?ref=ca2abaf3667771ed5d7ab602792d472b032ca445", "patch": "@@ -7,6 +7,7 @@ use std::collections::HashMap;\n use std::ffi::OsStr;\n use std::fs;\n use std::io::prelude::*;\n+use std::path::{Path, PathBuf};\n use walkdir::WalkDir;\n \n lazy_static! {\n@@ -205,7 +206,8 @@ fn parse_contents(content: &str, filename: &str) -> impl Iterator<Item = Lint> {\n fn lint_files() -> impl Iterator<Item = walkdir::DirEntry> {\n     // We use `WalkDir` instead of `fs::read_dir` here in order to recurse into subdirectories.\n     // Otherwise we would not collect all the lints, for example in `clippy_lints/src/methods/`.\n-    WalkDir::new(\"../clippy_lints/src\")\n+    let path = clippy_project_root().join(\"clippy_lints/src\");\n+    WalkDir::new(path)\n         .into_iter()\n         .filter_map(std::result::Result::ok)\n         .filter(|f| f.path().extension() == Some(OsStr::new(\"rs\")))\n@@ -225,7 +227,7 @@ pub struct FileChange {\n /// See `replace_region_in_text` for documentation of the other options.\n #[allow(clippy::expect_fun_call)]\n pub fn replace_region_in_file<F>(\n-    path: &str,\n+    path: &Path,\n     start: &str,\n     end: &str,\n     replace_start: bool,\n@@ -235,14 +237,15 @@ pub fn replace_region_in_file<F>(\n where\n     F: Fn() -> Vec<String>,\n {\n-    let mut f = fs::File::open(path).expect(&format!(\"File not found: {}\", path));\n+    let path = clippy_project_root().join(path);\n+    let mut f = fs::File::open(&path).expect(&format!(\"File not found: {}\", path.to_string_lossy()));\n     let mut contents = String::new();\n     f.read_to_string(&mut contents)\n         .expect(\"Something went wrong reading the file\");\n     let file_change = replace_region_in_text(&contents, start, end, replace_start, replacements);\n \n     if write_back {\n-        let mut f = fs::File::create(path).expect(&format!(\"File not found: {}\", path));\n+        let mut f = fs::File::create(&path).expect(&format!(\"File not found: {}\", path.to_string_lossy()));\n         f.write_all(file_change.new_lines.as_bytes())\n             .expect(\"Unable to write file\");\n         // Ensure we write the changes with a trailing newline so that\n@@ -318,6 +321,26 @@ where\n     }\n }\n \n+/// Returns the path to the Clippy project directory\n+#[must_use]\n+pub fn clippy_project_root() -> PathBuf {\n+    let current_dir = std::env::current_dir().unwrap();\n+    for path in current_dir.ancestors() {\n+        let result = std::fs::read_to_string(path.join(\"Cargo.toml\"));\n+        if let Err(err) = &result {\n+            if err.kind() == std::io::ErrorKind::NotFound {\n+                continue;\n+            }\n+        }\n+\n+        let content = result.unwrap();\n+        if content.contains(\"[package]\\nname = \\\"clippy\\\"\") {\n+            return path.to_path_buf();\n+        }\n+    }\n+    panic!(\"error: Can't determine root of project. Please run inside a Clippy working dir.\");\n+}\n+\n #[test]\n fn test_parse_contents() {\n     let result: Vec<Lint> = parse_contents("}, {"sha": "7369db1f078d347301b36d55bc1ca3619faaee2a", "filename": "clippy_dev/src/main.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ca2abaf3667771ed5d7ab602792d472b032ca445/clippy_dev%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2abaf3667771ed5d7ab602792d472b032ca445/clippy_dev%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fmain.rs?ref=ca2abaf3667771ed5d7ab602792d472b032ca445", "patch": "@@ -2,6 +2,7 @@\n \n use clap::{App, Arg, SubCommand};\n use clippy_dev::*;\n+use std::path::Path;\n \n mod fmt;\n mod new_lint;\n@@ -49,12 +50,12 @@ fn main() {\n                 .arg(\n                     Arg::with_name(\"check\")\n                         .long(\"check\")\n-                        .help(\"Checks that util/dev update_lints has been run. Used on CI.\"),\n+                        .help(\"Checks that `cargo dev update_lints` has been run. Used on CI.\"),\n                 ),\n         )\n         .subcommand(\n             SubCommand::with_name(\"new_lint\")\n-                .about(\"Create new lint and run util/dev update_lints\")\n+                .about(\"Create new lint and run `cargo dev update_lints`\")\n                 .arg(\n                     Arg::with_name(\"pass\")\n                         .short(\"p\")\n@@ -170,7 +171,7 @@ fn update_lints(update_mode: &UpdateMode) {\n     sorted_usable_lints.sort_by_key(|lint| lint.name.clone());\n \n     let mut file_change = replace_region_in_file(\n-        \"../src/lintlist/mod.rs\",\n+        Path::new(\"src/lintlist/mod.rs\"),\n         \"begin lint list\",\n         \"end lint list\",\n         false,\n@@ -189,7 +190,7 @@ fn update_lints(update_mode: &UpdateMode) {\n     .changed;\n \n     file_change |= replace_region_in_file(\n-        \"../README.md\",\n+        Path::new(\"README.md\"),\n         r#\"\\[There are \\d+ lints included in this crate!\\]\\(https://rust-lang.github.io/rust-clippy/master/index.html\\)\"#,\n         \"\",\n         true,\n@@ -202,7 +203,7 @@ fn update_lints(update_mode: &UpdateMode) {\n     ).changed;\n \n     file_change |= replace_region_in_file(\n-        \"../CHANGELOG.md\",\n+        Path::new(\"CHANGELOG.md\"),\n         \"<!-- begin autogenerated links to lint list -->\",\n         \"<!-- end autogenerated links to lint list -->\",\n         false,\n@@ -212,7 +213,7 @@ fn update_lints(update_mode: &UpdateMode) {\n     .changed;\n \n     file_change |= replace_region_in_file(\n-        \"../clippy_lints/src/lib.rs\",\n+        Path::new(\"clippy_lints/src/lib.rs\"),\n         \"begin deprecated lints\",\n         \"end deprecated lints\",\n         false,\n@@ -222,7 +223,7 @@ fn update_lints(update_mode: &UpdateMode) {\n     .changed;\n \n     file_change |= replace_region_in_file(\n-        \"../clippy_lints/src/lib.rs\",\n+        Path::new(\"clippy_lints/src/lib.rs\"),\n         \"begin register lints\",\n         \"end register lints\",\n         false,\n@@ -232,7 +233,7 @@ fn update_lints(update_mode: &UpdateMode) {\n     .changed;\n \n     file_change |= replace_region_in_file(\n-        \"../clippy_lints/src/lib.rs\",\n+        Path::new(\"clippy_lints/src/lib.rs\"),\n         \"begin lints modules\",\n         \"end lints modules\",\n         false,\n@@ -243,7 +244,7 @@ fn update_lints(update_mode: &UpdateMode) {\n \n     // Generate lists of lints in the clippy::all lint group\n     file_change |= replace_region_in_file(\n-        \"../clippy_lints/src/lib.rs\",\n+        Path::new(\"clippy_lints/src/lib.rs\"),\n         r#\"store.register_group\\(true, \"clippy::all\"\"#,\n         r#\"\\]\\);\"#,\n         false,\n@@ -266,7 +267,7 @@ fn update_lints(update_mode: &UpdateMode) {\n     // Generate the list of lints for all other lint groups\n     for (lint_group, lints) in Lint::by_lint_group(&usable_lints) {\n         file_change |= replace_region_in_file(\n-            \"../clippy_lints/src/lib.rs\",\n+            Path::new(\"clippy_lints/src/lib.rs\"),\n             &format!(\"store.register_group\\\\(true, \\\"clippy::{}\\\"\", lint_group),\n             r#\"\\]\\);\"#,\n             false,\n@@ -279,7 +280,7 @@ fn update_lints(update_mode: &UpdateMode) {\n     if update_mode == &UpdateMode::Check && file_change {\n         println!(\n             \"Not all lints defined properly. \\\n-             Please run `util/dev update_lints` to make sure all lints are defined properly.\"\n+             Please run `cargo dev update_lints` to make sure all lints are defined properly.\"\n         );\n         std::process::exit(1);\n     }"}, {"sha": "9d1f19f954b060f41afe020f3c65e5910328083f", "filename": "clippy_dev/src/new_lint.rs", "status": "modified", "additions": 3, "deletions": 20, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ca2abaf3667771ed5d7ab602792d472b032ca445/clippy_dev%2Fsrc%2Fnew_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2abaf3667771ed5d7ab602792d472b032ca445/clippy_dev%2Fsrc%2Fnew_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fnew_lint.rs?ref=ca2abaf3667771ed5d7ab602792d472b032ca445", "patch": "@@ -1,8 +1,9 @@\n+use clippy_dev::clippy_project_root;\n use std::fs::{File, OpenOptions};\n use std::io;\n use std::io::prelude::*;\n use std::io::ErrorKind;\n-use std::path::{Path, PathBuf};\n+use std::path::Path;\n \n pub fn create(pass: Option<&str>, lint_name: Option<&str>, category: Option<&str>) -> Result<(), io::Error> {\n     let pass = pass.expect(\"`pass` argument is validated by clap\");\n@@ -55,7 +56,7 @@ pub fn create(pass: Option<&str>, lint_name: Option<&str>, category: Option<&str\n }\n \n fn open_files(lint_name: &str) -> Result<(File, File), io::Error> {\n-    let project_root = project_root()?;\n+    let project_root = clippy_project_root();\n \n     let test_file_path = project_root.join(\"tests\").join(\"ui\").join(format!(\"{}.rs\", lint_name));\n     let lint_file_path = project_root\n@@ -82,24 +83,6 @@ fn open_files(lint_name: &str) -> Result<(File, File), io::Error> {\n     Ok((test_file, lint_file))\n }\n \n-fn project_root() -> Result<PathBuf, io::Error> {\n-    let current_dir = std::env::current_dir()?;\n-    for path in current_dir.ancestors() {\n-        let result = std::fs::read_to_string(path.join(\"Cargo.toml\"));\n-        if let Err(err) = &result {\n-            if err.kind() == io::ErrorKind::NotFound {\n-                continue;\n-            }\n-        }\n-\n-        let content = result?;\n-        if content.contains(\"[package]\\nname = \\\"clippy\\\"\") {\n-            return Ok(path.to_path_buf());\n-        }\n-    }\n-    Err(io::Error::new(ErrorKind::Other, \"Unable to find project root\"))\n-}\n-\n fn to_camel_case(name: &str) -> String {\n     name.split('_')\n         .map(|s| {"}, {"sha": "99178c2d75b978361b8704d5755b361036acdd2e", "filename": "doc/adding_lints.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ca2abaf3667771ed5d7ab602792d472b032ca445/doc%2Fadding_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/ca2abaf3667771ed5d7ab602792d472b032ca445/doc%2Fadding_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fadding_lints.md?ref=ca2abaf3667771ed5d7ab602792d472b032ca445", "patch": "@@ -39,10 +39,10 @@ lint. Fortunately, you can use the clippy dev tools to handle this for you. We\n are naming our new lint `foo_functions` (lints are generally written in snake\n case), and we don't need type information so it will have an early pass type\n (more on this later on). To get started on this lint you can run\n-`./util/dev new_lint --name=foo_functions --pass=early --category=pedantic`\n+`cargo dev new_lint --name=foo_functions --pass=early --category=pedantic`\n (category will default to nursery if not provided). This command will create\n two files: `tests/ui/foo_functions.rs` and `clippy_lints/src/foo_functions.rs`,\n-as well as run `./util/dev update_lints` to register the new lint. Next, we'll\n+as well as run `cargo dev update_lints` to register the new lint. Next, we'll\n open up these files and add our lint!\n \n ### Testing\n@@ -386,7 +386,7 @@ It can be installed via `rustup`:\n rustup component add rustfmt --toolchain=nightly\n ```\n \n-Use `./util/dev fmt` to format the whole codebase. Make sure that `rustfmt` is\n+Use `cargo dev fmt` to format the whole codebase. Make sure that `rustfmt` is\n installed for the nightly toolchain.\n \n ### Debugging\n@@ -404,9 +404,9 @@ Before submitting your PR make sure you followed all of the basic requirements:\n - [ ] Followed [lint naming conventions][lint_naming]\n - [ ] Added passing UI tests (including committed `.stderr` file)\n - [ ] `cargo test` passes locally\n-- [ ] Executed `./util/dev update_lints`\n+- [ ] Executed `cargo dev update_lints`\n - [ ] Added lint documentation\n-- [ ] Run `./util/dev fmt`\n+- [ ] Run `cargo dev fmt`\n \n ### Cheatsheet\n "}, {"sha": "3edde70a27fafd76528e43a137603de94f95e886", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca2abaf3667771ed5d7ab602792d472b032ca445/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2abaf3667771ed5d7ab602792d472b032ca445/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=ca2abaf3667771ed5d7ab602792d472b032ca445", "patch": "@@ -1,4 +1,4 @@\n-//! This file is managed by `util/dev update_lints`. Do not edit.\n+//! This file is managed by `cargo dev update_lints`. Do not edit.\n \n pub mod lint;\n pub use lint::Level;"}, {"sha": "2e33c3ed5e5bdc7b26808cc678133f67d1ac857e", "filename": "tests/fmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca2abaf3667771ed5d7ab602792d472b032ca445/tests%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2abaf3667771ed5d7ab602792d472b032ca445/tests%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffmt.rs?ref=ca2abaf3667771ed5d7ab602792d472b032ca445", "patch": "@@ -34,6 +34,6 @@ fn fmt() {\n \n     assert!(\n         output.status.success(),\n-        \"Formatting check failed. Run `./util/dev fmt` to update formatting.\"\n+        \"Formatting check failed. Run `cargo dev fmt` to update formatting.\"\n     );\n }"}, {"sha": "319de217e0d90170c1bcf7545aef25e1caff11d5", "filename": "util/dev", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca2abaf3667771ed5d7ab602792d472b032ca445/util%2Fdev", "raw_url": "https://github.com/rust-lang/rust/raw/ca2abaf3667771ed5d7ab602792d472b032ca445/util%2Fdev", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Fdev?ref=ca2abaf3667771ed5d7ab602792d472b032ca445", "patch": "@@ -2,4 +2,6 @@\n CARGO_TARGET_DIR=$(pwd)/target/\n export CARGO_TARGET_DIR\n \n+echo 'Deprecated! `util/dev` usage is deprecated, please use `cargo dev` instead.'\n+\n cd clippy_dev && cargo run -- \"$@\""}]}