{"sha": "176225c4ddd0dd6f469826b40b0cdae399b4a9c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3NjIyNWM0ZGRkMGRkNmY0Njk4MjZiNDBiMGNkYWUzOTliNGE5YzM=", "commit": {"author": {"name": "gaurikholkar", "email": "f2013002@goa.bits-pilani.ac.in", "date": "2017-06-12T18:45:19Z"}, "committer": {"name": "gaurikholkar", "email": "f2013002@goa.bits-pilani.ac.in", "date": "2017-06-29T13:37:18Z"}, "message": "Adding diagnostic code 0611 for lifetime errors with one named, one anonymous lifetime parameter", "tree": {"sha": "0c1551f3ef93a2ade526b6b50e3778484a0fd4a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c1551f3ef93a2ade526b6b50e3778484a0fd4a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/176225c4ddd0dd6f469826b40b0cdae399b4a9c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/176225c4ddd0dd6f469826b40b0cdae399b4a9c3", "html_url": "https://github.com/rust-lang/rust/commit/176225c4ddd0dd6f469826b40b0cdae399b4a9c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/176225c4ddd0dd6f469826b40b0cdae399b4a9c3/comments", "author": {"login": "gaurikholkar", "id": 117768111, "node_id": "U_kgDOBwT_rw", "avatar_url": "https://avatars.githubusercontent.com/u/117768111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gaurikholkar", "html_url": "https://github.com/gaurikholkar", "followers_url": "https://api.github.com/users/gaurikholkar/followers", "following_url": "https://api.github.com/users/gaurikholkar/following{/other_user}", "gists_url": "https://api.github.com/users/gaurikholkar/gists{/gist_id}", "starred_url": "https://api.github.com/users/gaurikholkar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gaurikholkar/subscriptions", "organizations_url": "https://api.github.com/users/gaurikholkar/orgs", "repos_url": "https://api.github.com/users/gaurikholkar/repos", "events_url": "https://api.github.com/users/gaurikholkar/events{/privacy}", "received_events_url": "https://api.github.com/users/gaurikholkar/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gaurikholkar", "id": 117768111, "node_id": "U_kgDOBwT_rw", "avatar_url": "https://avatars.githubusercontent.com/u/117768111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gaurikholkar", "html_url": "https://github.com/gaurikholkar", "followers_url": "https://api.github.com/users/gaurikholkar/followers", "following_url": "https://api.github.com/users/gaurikholkar/following{/other_user}", "gists_url": "https://api.github.com/users/gaurikholkar/gists{/gist_id}", "starred_url": "https://api.github.com/users/gaurikholkar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gaurikholkar/subscriptions", "organizations_url": "https://api.github.com/users/gaurikholkar/orgs", "repos_url": "https://api.github.com/users/gaurikholkar/repos", "events_url": "https://api.github.com/users/gaurikholkar/events{/privacy}", "received_events_url": "https://api.github.com/users/gaurikholkar/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a", "html_url": "https://github.com/rust-lang/rust/commit/7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a"}], "stats": {"total": 419, "additions": 365, "deletions": 54}, "files": [{"sha": "1e7f3f9aeb8b9e10db632e1d3db5bfd5d652d819", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/176225c4ddd0dd6f469826b40b0cdae399b4a9c3/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/176225c4ddd0dd6f469826b40b0cdae399b4a9c3/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=176225c4ddd0dd6f469826b40b0cdae399b4a9c3", "patch": "@@ -1946,6 +1946,31 @@ Maybe you just misspelled the lint name or the lint doesn't exist anymore.\n Either way, try to update/remove it in order to fix the error.\n \"##,\n \n+E0611: r##\"\n+Lifetime parameter is missing in one of the function argument. Erroneous\n+code example:\n+\n+```compile_fail,E0611\n+fn foo<'a>(x: &'a i32, y: &i32) -> &'a i32 { // explicit lifetime required\n+                                             // in the type of `y`\n+    if x > y { x } else { y }\n+}\n+\n+fn main () { }\n+```\n+\n+Please add the missing lifetime parameter to remove this error. Example:\n+\n+```\n+fn foo<'a>(x: &'a i32, y: &'a i32) -> &'a i32 {\n+    if x > y { x } else { y }\n+}\n+\n+fn main() {\n+}\n+```\n+\"##,\n+\n }\n \n "}, {"sha": "1bc01ab858c94a303f2f679fe5e6e6650b8354af", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 26, "deletions": 15, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/176225c4ddd0dd6f469826b40b0cdae399b4a9c3/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/176225c4ddd0dd6f469826b40b0cdae399b4a9c3/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=176225c4ddd0dd6f469826b40b0cdae399b4a9c3", "patch": "@@ -67,14 +67,17 @@ use hir::def_id::DefId;\n use middle::region;\n use traits::{ObligationCause, ObligationCauseCode};\n use ty::{self, TyCtxt, TypeFoldable};\n-use ty::{Region, Issue32330};\n+use ty::{Region, Issue32330 };\n use ty::error::TypeError;\n use syntax::ast::DUMMY_NODE_ID;\n use syntax_pos::{Pos, Span};\n use errors::{DiagnosticBuilder, DiagnosticStyledString};\n-\n mod note;\n+\n mod need_type_info;\n+mod named_anon_conflict;\n+mod util;\n+\n \n impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     pub fn note_and_explain_region(self,\n@@ -255,34 +258,42 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n }\n \n impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n-    pub fn report_region_errors(&self,\n-                                errors: &Vec<RegionResolutionError<'tcx>>) {\n+\n+    pub fn report_region_errors(&self, errors: &Vec<RegionResolutionError<'tcx>>) {\n         debug!(\"report_region_errors(): {} errors to start\", errors.len());\n \n         // try to pre-process the errors, which will group some of them\n         // together into a `ProcessedErrors` group:\n         let errors = self.process_errors(errors);\n \n-        debug!(\"report_region_errors: {} errors after preprocessing\", errors.len());\n+        debug!(\"report_region_errors: {} errors after preprocessing\",\n+               errors.len());\n \n         for error in errors {\n+\n             debug!(\"report_region_errors: error = {:?}\", error);\n-            match error.clone() {\n-                ConcreteFailure(origin, sub, sup) => {\n-                    self.report_concrete_failure(origin, sub, sup).emit();\n-                }\n+        // If ConcreteFailure does not have an anonymous region\n+            if !self.report_named_anon_conflict(&error){\n \n-                GenericBoundFailure(kind, param_ty, sub) => {\n-                    self.report_generic_bound_failure(kind, param_ty, sub);\n-                }\n+               match error.clone() {\n+\n+                  ConcreteFailure(origin, sub, sup) => {\n+\n+                      self.report_concrete_failure(origin, sub, sup).emit();\n+                  }\n \n-                SubSupConflict(var_origin,\n+                  GenericBoundFailure(kind, param_ty, sub) => {\n+                      self.report_generic_bound_failure(kind, param_ty, sub);\n+                  }\n+\n+                  SubSupConflict(var_origin,\n                                sub_origin, sub_r,\n                                sup_origin, sup_r) => {\n-                    self.report_sub_sup_conflict(var_origin,\n+                      self.report_sub_sup_conflict(var_origin,\n                                                  sub_origin, sub_r,\n                                                  sup_origin, sup_r);\n-                }\n+                  }\n+               }\n             }\n         }\n     }"}, {"sha": "d48cb398ec28240f503f1a92494590a7f6c9ceb6", "filename": "src/librustc/infer/error_reporting/named_anon_conflict.rs", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/176225c4ddd0dd6f469826b40b0cdae399b4a9c3/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnamed_anon_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/176225c4ddd0dd6f469826b40b0cdae399b4a9c3/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnamed_anon_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnamed_anon_conflict.rs?ref=176225c4ddd0dd6f469826b40b0cdae399b4a9c3", "patch": "@@ -0,0 +1,115 @@\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Error Reporting for Anonymous Region Lifetime Errors.\n+use hir;\n+use infer::InferCtxt;\n+use ty::{self, Region};\n+use infer::region_inference::RegionResolutionError::*;\n+use infer::region_inference::RegionResolutionError;\n+\n+impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n+    // This method walks the Type of the function body arguments using\n+    // `fold_regions()` function and returns the\n+    // &hir::Arg of the function argument corresponding to the anonymous\n+    // region and the Ty corresponding to the named region.\n+    // Currently only the case where the function declaration consists of\n+    // one named region and one anonymous region is handled.\n+    // Consider the example `fn foo<'a>(x: &'a i32, y: &i32) -> &'a i32`\n+    // Here, the `y` and the `Ty` of `y` is returned after being substituted\n+    // by that of the named region.\n+    pub fn find_arg_with_anonymous_region(&self,\n+                                          anon_region: Region<'tcx>,\n+                                          named_region: Region<'tcx>)\n+                                          -> Option<(&hir::Arg, ty::Ty<'tcx>)> {\n+\n+        match *anon_region {\n+            ty::ReFree(ref free_region) => {\n+\n+                let id = free_region.scope;\n+                let node_id = self.tcx.hir.as_local_node_id(id).unwrap();\n+                let body_id = self.tcx.hir.maybe_body_owned_by(node_id).unwrap();\n+\n+                let body = self.tcx.hir.body(body_id);\n+                body.arguments\n+                    .iter()\n+                    .filter_map(|arg| if let Some(tables) = self.in_progress_tables {\n+                                    let ty = tables.borrow().node_id_to_type(arg.id);\n+                                    let mut found_anon_region = false;\n+                                    let new_arg_ty = self.tcx\n+                                        .fold_regions(&ty,\n+                                                      &mut false,\n+                                                      |r, _| if *r == *anon_region {\n+                                                          found_anon_region = true;\n+                                                          named_region\n+                                                      } else {\n+                                                          r\n+                                                      });\n+                                    if found_anon_region {\n+                                        return Some((arg, new_arg_ty));\n+                                    } else {\n+                                        None\n+                                    }\n+                                } else {\n+                                    None\n+                                })\n+                    .next()\n+            }\n+            _ => None,\n+        }\n+\n+    }\n+\n+    // This method generates the error message for the case when\n+    // the function arguments consist of a named region and an anonymous\n+    // region and corresponds to `ConcreteFailure(..)`\n+    pub fn report_named_anon_conflict(&self, error: &RegionResolutionError<'tcx>) -> bool {\n+\n+        let (span, sub, sup) = match *error {\n+            ConcreteFailure(ref origin, sub, sup) => (origin.span(), sub, sup),\n+            _ => return false, // inapplicable\n+        };\n+\n+        let (named, (var, new_ty)) =\n+            if self.is_named_region(sub) && self.is_anonymous_region(sup) {\n+                (sub, self.find_arg_with_anonymous_region(sup, sub).unwrap())\n+            } else if self.is_named_region(sup) && self.is_anonymous_region(sub) {\n+                (sup, self.find_arg_with_anonymous_region(sub, sup).unwrap())\n+            } else {\n+                return false; // inapplicable\n+            };\n+\n+        if let Some(simple_name) = var.pat.simple_name() {\n+            struct_span_err!(self.tcx.sess,\n+                             var.pat.span,\n+                             E0611,\n+                             \"explicit lifetime required in the type of `{}`\",\n+                             simple_name)\n+                    .span_label(var.pat.span,\n+                                format!(\"consider changing the type of `{}` to `{}`\",\n+                                        simple_name,\n+                                        new_ty))\n+                    .span_label(span, format!(\"lifetime `{}` required\", named))\n+                    .emit();\n+\n+        } else {\n+            struct_span_err!(self.tcx.sess,\n+                             var.pat.span,\n+                             E0611,\n+                             \"explicit lifetime required in parameter type\")\n+                    .span_label(var.pat.span,\n+                                format!(\"consider changing type to `{}`\", new_ty))\n+                    .span_label(span, format!(\"lifetime `{}` required\", named))\n+                    .emit();\n+        }\n+        return true;\n+\n+    }\n+}"}, {"sha": "ea0c706d8aa713ffe27aaedba1ce52165bcef2f1", "filename": "src/librustc/infer/error_reporting/util.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/176225c4ddd0dd6f469826b40b0cdae399b4a9c3/src%2Flibrustc%2Finfer%2Ferror_reporting%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/176225c4ddd0dd6f469826b40b0cdae399b4a9c3/src%2Flibrustc%2Finfer%2Ferror_reporting%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Futil.rs?ref=176225c4ddd0dd6f469826b40b0cdae399b4a9c3", "patch": "@@ -0,0 +1,56 @@\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Helper for error reporting code for named_anon_conflict\n+\n+use ty::{self, Region};\n+use infer::InferCtxt;\n+use hir::map as hir_map;\n+\n+impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n+    // This method returns whether the given Region is Named\n+    pub fn is_named_region(&self, region: Region<'tcx>) -> bool {\n+\n+        match *region {\n+            ty::ReFree(ref free_region) => {\n+                match free_region.bound_region {\n+                    ty::BrNamed(..) => true,\n+                    _ => false,\n+                }\n+            }\n+            _ => false,\n+        }\n+    }\n+\n+    // This method returns whether the given Region is Anonymous\n+    pub fn is_anonymous_region(&self, region: Region<'tcx>) -> bool {\n+\n+        match *region {\n+            ty::ReFree(ref free_region) => {\n+                match free_region.bound_region {\n+                    ty::BrAnon(..) => {\n+                        let id = free_region.scope;\n+                        let node_id = self.tcx.hir.as_local_node_id(id).unwrap();\n+                        match self.tcx.hir.find(node_id) {\n+                            Some(hir_map::NodeItem(..)) |\n+                            Some(hir_map::NodeImplItem(..)) |\n+                            Some(hir_map::NodeTraitItem(..)) => { /* proceed ahead */ }\n+                            _ => return false, // inapplicable\n+                            // we target only top-level functions\n+                        }\n+                        return true;\n+                    }\n+                    _ => false,\n+                }\n+            }\n+            _ => false,\n+        }\n+    }\n+}"}, {"sha": "07de44c92948daead0bb1c501cc18e5104bbfdc3", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/176225c4ddd0dd6f469826b40b0cdae399b4a9c3/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/176225c4ddd0dd6f469826b40b0cdae399b4a9c3/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=176225c4ddd0dd6f469826b40b0cdae399b4a9c3", "patch": "@@ -38,7 +38,6 @@ use errors::DiagnosticBuilder;\n use syntax_pos::{self, Span, DUMMY_SP};\n use util::nodemap::FxHashMap;\n use arena::DroplessArena;\n-\n use self::combine::CombineFields;\n use self::higher_ranked::HrMatchResult;\n use self::region_inference::{RegionVarBindings, RegionSnapshot};\n@@ -1077,6 +1076,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                                                region_map,\n                                                free_regions);\n         let errors = self.region_vars.resolve_regions(&region_rels);\n+\n         if !self.is_tainted_by_errors() {\n             // As a heuristic, just skip reporting region errors\n             // altogether if other errors have been reported while"}, {"sha": "a1716c4e797922d00a34bfa3b59499a7e185137f", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-if-else-2.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/176225c4ddd0dd6f469826b40b0cdae399b4a9c3/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/176225c4ddd0dd6f469826b40b0cdae399b4a9c3/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-2.rs?ref=176225c4ddd0dd6f469826b40b0cdae399b4a9c3", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn foo<'a>(x: &i32, y: &'a i32) -> &'a i32 {\n+    if x > y { x } else { y }\n+}\n+\n+fn main() { }"}, {"sha": "a04a9461eb4903b9bdc3329a2069bfef3ef58fd5", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-if-else-2.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/176225c4ddd0dd6f469826b40b0cdae399b4a9c3/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/176225c4ddd0dd6f469826b40b0cdae399b4a9c3/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-2.stderr?ref=176225c4ddd0dd6f469826b40b0cdae399b4a9c3", "patch": "@@ -0,0 +1,10 @@\n+error[E0611]: explicit lifetime required in the type of `x`\n+  --> $DIR/ex1-return-one-existing-name-if-else-2.rs:11:12\n+   |\n+11 | fn foo<'a>(x: &i32, y: &'a i32) -> &'a i32 {\n+   |            ^ consider changing the type of `x` to `&'a i32`\n+12 |     if x > y { x } else { y }\n+   |                - lifetime `'a` required\n+\n+error: aborting due to previous error(s)\n+"}, {"sha": "7bd32d8761705d073c4859cd8922350227a26dc4", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-if-else-3.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/176225c4ddd0dd6f469826b40b0cdae399b4a9c3/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/176225c4ddd0dd6f469826b40b0cdae399b4a9c3/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-3.rs?ref=176225c4ddd0dd6f469826b40b0cdae399b4a9c3", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn foo<'a>((x, y): (&'a i32, &i32)) -> &'a i32 {\n+    if x > y { x } else { y }\n+}\n+\n+fn main () { }"}, {"sha": "143021cbbdd4d5997e28cbb487f440788b959e32", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-if-else-3.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/176225c4ddd0dd6f469826b40b0cdae399b4a9c3/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/176225c4ddd0dd6f469826b40b0cdae399b4a9c3/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-3.stderr?ref=176225c4ddd0dd6f469826b40b0cdae399b4a9c3", "patch": "@@ -0,0 +1,10 @@\n+error[E0611]: explicit lifetime required in parameter type\n+  --> $DIR/ex1-return-one-existing-name-if-else-3.rs:11:12\n+   |\n+11 | fn foo<'a>((x, y): (&'a i32, &i32)) -> &'a i32 {\n+   |            ^^^^^^ consider changing type to `(&'a i32, &'a i32)`\n+12 |     if x > y { x } else { y }\n+   |                           - lifetime `'a` required\n+\n+error: aborting due to previous error(s)\n+"}, {"sha": "faf4fe547bf00f1acf3e2bf71d08eb030c5327bd", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-if-else-using-closure.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/176225c4ddd0dd6f469826b40b0cdae399b4a9c3/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/176225c4ddd0dd6f469826b40b0cdae399b4a9c3/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-closure.rs?ref=176225c4ddd0dd6f469826b40b0cdae399b4a9c3", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn invoke<'a, F>(x: &'a i32, f: F) -> &'a i32\n+where F: FnOnce(&'a i32, &i32) -> &'a i32\n+{\n+    let y = 22;\n+    f(x, &y)\n+}\n+\n+fn foo<'a>(x: &'a i32) {\n+    invoke(&x, |a, b| if a > b { a } else { b });\n+}\n+\n+fn main() {\n+}\n+"}, {"sha": "c96ff9bc114815bdacfd6407f379c65f6ddb8a1e", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-if-else-using-closure.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/176225c4ddd0dd6f469826b40b0cdae399b4a9c3/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/176225c4ddd0dd6f469826b40b0cdae399b4a9c3/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-closure.stderr?ref=176225c4ddd0dd6f469826b40b0cdae399b4a9c3", "patch": "@@ -0,0 +1,29 @@\n+error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` due to conflicting requirements\n+  --> $DIR/ex1-return-one-existing-name-if-else-using-closure.rs:19:5\n+   |\n+19 |     invoke(&x, |a, b| if a > b { a } else { b });\n+   |     ^^^^^^\n+   |\n+note: first, the lifetime cannot outlive the anonymous lifetime #2 defined on the body at 19:16...\n+  --> $DIR/ex1-return-one-existing-name-if-else-using-closure.rs:19:16\n+   |\n+19 |     invoke(&x, |a, b| if a > b { a } else { b });\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: ...so that reference does not outlive borrowed content\n+  --> $DIR/ex1-return-one-existing-name-if-else-using-closure.rs:19:45\n+   |\n+19 |     invoke(&x, |a, b| if a > b { a } else { b });\n+   |                                             ^\n+note: but, the lifetime must be valid for the call at 19:5...\n+  --> $DIR/ex1-return-one-existing-name-if-else-using-closure.rs:19:5\n+   |\n+19 |     invoke(&x, |a, b| if a > b { a } else { b });\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: ...so that argument is valid for the call\n+  --> $DIR/ex1-return-one-existing-name-if-else-using-closure.rs:19:12\n+   |\n+19 |     invoke(&x, |a, b| if a > b { a } else { b });\n+   |            ^^\n+\n+error: aborting due to previous error(s)\n+"}, {"sha": "84f166dfa3023df6e4bd329e2f531f545530bb77", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-if-else.stderr", "status": "modified", "additions": 5, "deletions": 18, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/176225c4ddd0dd6f469826b40b0cdae399b4a9c3/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/176225c4ddd0dd6f469826b40b0cdae399b4a9c3/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else.stderr?ref=176225c4ddd0dd6f469826b40b0cdae399b4a9c3", "patch": "@@ -1,23 +1,10 @@\n-error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n-  --> $DIR/ex1-return-one-existing-name-if-else.rs:12:27\n+error[E0611]: explicit lifetime required in the type of `y`\n+  --> $DIR/ex1-return-one-existing-name-if-else.rs:11:24\n    |\n+11 | fn foo<'a>(x: &'a i32, y: &i32) -> &'a i32 {\n+   |                        ^ consider changing the type of `y` to `&'a i32`\n 12 |     if x > y { x } else { y }\n-   |                           ^\n-   |\n-note: ...the reference is valid for the lifetime 'a as defined on the function body at 11:1...\n-  --> $DIR/ex1-return-one-existing-name-if-else.rs:11:1\n-   |\n-11 | / fn foo<'a>(x: &'a i32, y: &i32) -> &'a i32 {\n-12 | |     if x > y { x } else { y }\n-13 | | }\n-   | |_^\n-note: ...but the borrowed content is only valid for the anonymous lifetime #1 defined on the function body at 11:1\n-  --> $DIR/ex1-return-one-existing-name-if-else.rs:11:1\n-   |\n-11 | / fn foo<'a>(x: &'a i32, y: &i32) -> &'a i32 {\n-12 | |     if x > y { x } else { y }\n-13 | | }\n-   | |_^\n+   |                           - lifetime `'a` required\n \n error: aborting due to previous error(s)\n "}, {"sha": "dd34e1aa6d9d227e7377d4d58dd850eeeeea87c9", "filename": "src/test/ui/lifetime-errors/ex2a-push-one-existing-name-2.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/176225c4ddd0dd6f469826b40b0cdae399b4a9c3/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/176225c4ddd0dd6f469826b40b0cdae399b4a9c3/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name-2.rs?ref=176225c4ddd0dd6f469826b40b0cdae399b4a9c3", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Ref<'a, T: 'a> {\n+    data: &'a T\n+}\n+\n+fn foo<'a>(x: Ref<i32>, y: &mut Vec<Ref<'a, i32>>) {\n+    y.push(x);\n+}\n+\n+fn main() { }"}, {"sha": "61e97dc2bcd803b78ed8e436533305abcaf8a027", "filename": "src/test/ui/lifetime-errors/ex2a-push-one-existing-name-2.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/176225c4ddd0dd6f469826b40b0cdae399b4a9c3/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/176225c4ddd0dd6f469826b40b0cdae399b4a9c3/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name-2.stderr?ref=176225c4ddd0dd6f469826b40b0cdae399b4a9c3", "patch": "@@ -0,0 +1,10 @@\n+error[E0611]: explicit lifetime required in the type of `x`\n+  --> $DIR/ex2a-push-one-existing-name-2.rs:15:12\n+   |\n+15 | fn foo<'a>(x: Ref<i32>, y: &mut Vec<Ref<'a, i32>>) {\n+   |            ^ consider changing the type of `x` to `Ref<'a, i32>`\n+16 |     y.push(x);\n+   |            - lifetime `'a` required\n+\n+error: aborting due to previous error(s)\n+"}, {"sha": "51d86a1f964ca9626f14d155ba0d674140ac8eb2", "filename": "src/test/ui/lifetime-errors/ex2a-push-one-existing-name.stderr", "status": "modified", "additions": 5, "deletions": 20, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/176225c4ddd0dd6f469826b40b0cdae399b4a9c3/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/176225c4ddd0dd6f469826b40b0cdae399b4a9c3/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name.stderr?ref=176225c4ddd0dd6f469826b40b0cdae399b4a9c3", "patch": "@@ -1,25 +1,10 @@\n-error[E0308]: mismatched types\n-  --> $DIR/ex2a-push-one-existing-name.rs:16:12\n+error[E0611]: explicit lifetime required in the type of `y`\n+  --> $DIR/ex2a-push-one-existing-name.rs:15:39\n    |\n+15 | fn foo<'a>(x: &mut Vec<Ref<'a, i32>>, y: Ref<i32>) {\n+   |                                       ^ consider changing the type of `y` to `Ref<'a, i32>`\n 16 |     x.push(y);\n-   |            ^ lifetime mismatch\n-   |\n-   = note: expected type `Ref<'a, _>`\n-              found type `Ref<'_, _>`\n-note: the anonymous lifetime #2 defined on the function body at 15:1...\n-  --> $DIR/ex2a-push-one-existing-name.rs:15:1\n-   |\n-15 | / fn foo<'a>(x: &mut Vec<Ref<'a, i32>>, y: Ref<i32>) {\n-16 | |     x.push(y);\n-17 | | }\n-   | |_^\n-note: ...does not necessarily outlive the lifetime 'a as defined on the function body at 15:1\n-  --> $DIR/ex2a-push-one-existing-name.rs:15:1\n-   |\n-15 | / fn foo<'a>(x: &mut Vec<Ref<'a, i32>>, y: Ref<i32>) {\n-16 | |     x.push(y);\n-17 | | }\n-   | |_^\n+   |            - lifetime `'a` required\n \n error: aborting due to previous error(s)\n "}]}