{"sha": "62b3b40ade206830c502c394a9f547a300057ac0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyYjNiNDBhZGUyMDY4MzBjNTAyYzM5NGE5ZjU0N2EzMDAwNTdhYzA=", "commit": {"author": {"name": "Sandeep Datta", "email": "datta.sandeep@gmail.com", "date": "2016-02-11T06:53:06Z"}, "committer": {"name": "Sandeep Datta", "email": "datta.sandeep@gmail.com", "date": "2016-02-11T07:00:53Z"}, "message": "Clarified move semantics in \"the details\" section.", "tree": {"sha": "e9ae5bfadd48a6721f17d4dacf1c051666be5ac3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9ae5bfadd48a6721f17d4dacf1c051666be5ac3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62b3b40ade206830c502c394a9f547a300057ac0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62b3b40ade206830c502c394a9f547a300057ac0", "html_url": "https://github.com/rust-lang/rust/commit/62b3b40ade206830c502c394a9f547a300057ac0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62b3b40ade206830c502c394a9f547a300057ac0/comments", "author": {"login": "sandeep-datta", "id": 328639, "node_id": "MDQ6VXNlcjMyODYzOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/328639?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sandeep-datta", "html_url": "https://github.com/sandeep-datta", "followers_url": "https://api.github.com/users/sandeep-datta/followers", "following_url": "https://api.github.com/users/sandeep-datta/following{/other_user}", "gists_url": "https://api.github.com/users/sandeep-datta/gists{/gist_id}", "starred_url": "https://api.github.com/users/sandeep-datta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sandeep-datta/subscriptions", "organizations_url": "https://api.github.com/users/sandeep-datta/orgs", "repos_url": "https://api.github.com/users/sandeep-datta/repos", "events_url": "https://api.github.com/users/sandeep-datta/events{/privacy}", "received_events_url": "https://api.github.com/users/sandeep-datta/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sandeep-datta", "id": 328639, "node_id": "MDQ6VXNlcjMyODYzOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/328639?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sandeep-datta", "html_url": "https://github.com/sandeep-datta", "followers_url": "https://api.github.com/users/sandeep-datta/followers", "following_url": "https://api.github.com/users/sandeep-datta/following{/other_user}", "gists_url": "https://api.github.com/users/sandeep-datta/gists{/gist_id}", "starred_url": "https://api.github.com/users/sandeep-datta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sandeep-datta/subscriptions", "organizations_url": "https://api.github.com/users/sandeep-datta/orgs", "repos_url": "https://api.github.com/users/sandeep-datta/repos", "events_url": "https://api.github.com/users/sandeep-datta/events{/privacy}", "received_events_url": "https://api.github.com/users/sandeep-datta/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32d962d16fc0abcb63fd705b3cde35025da77a13", "url": "https://api.github.com/repos/rust-lang/rust/commits/32d962d16fc0abcb63fd705b3cde35025da77a13", "html_url": "https://github.com/rust-lang/rust/commit/32d962d16fc0abcb63fd705b3cde35025da77a13"}], "stats": {"total": 34, "additions": 27, "deletions": 7}, "files": [{"sha": "585e337ccc2e62d170bb089841b0c874db795980", "filename": "src/doc/book/ownership.md", "status": "modified", "additions": 27, "deletions": 7, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/62b3b40ade206830c502c394a9f547a300057ac0/src%2Fdoc%2Fbook%2Fownership.md", "raw_url": "https://github.com/rust-lang/rust/raw/62b3b40ade206830c502c394a9f547a300057ac0/src%2Fdoc%2Fbook%2Fownership.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fownership.md?ref=62b3b40ade206830c502c394a9f547a300057ac0", "patch": "@@ -124,19 +124,39 @@ special annotation here, it\u2019s the default thing that Rust does.\n The reason that we cannot use a binding after we\u2019ve moved it is subtle, but\n important. When we write code like this:\n \n+```rust\n+let x = 10;\n+```\n+\n+Rust allocates memory for an integer [i32] on the [stack][sh], copies the bit\n+pattern representing the value of 10 to the allocated memory and binds the\n+variable name x to this memory region for future reference.\n+\n+Now consider the following code fragment:\n+\n ```rust\n let v = vec![1, 2, 3];\n \n let v2 = v;\n ```\n \n-The first line allocates memory for the vector object, `v`, and for the data it\n-contains. The vector object is stored on the [stack][sh] and contains a pointer\n-to the content (`[1, 2, 3]`) stored on the [heap][sh]. When we move `v` to `v2`,\n-it creates a copy of that pointer, for `v2`. Which means that there would be two\n-pointers to the content of the vector on the heap. It would violate Rust\u2019s\n-safety guarantees by introducing a data race. Therefore, Rust forbids using `v`\n-after we\u2019ve done the move.\n+The first line allocates memory for the vector object, `v`, on the stack like\n+it does for `x` above. But in addition to that it also allocates some memory\n+on on the [heap][sh] for the actual data `[1, 2, 3]`. Rust copies the address\n+of this heap allocation to an internal pointer part of the vector object\n+placed on the stack (let's call it the data pointer). It is worth pointing out\n+even at the risk of being redundant that the vector object and its data live\n+in separate memory regions instead of being a single contiguous memory\n+allocation (due to reasons we will not go into at this point of time).\n+\n+When we move `v` to `v2`, rust actually does a bitwise copy of the vector\n+object `v` into the stack allocation represented by `v2`. This shallow copy\n+does not create a copy of the heap allocation containing the actual data.\n+Which means that there would be two pointers to the contents of the vector\n+both pointing to the same memory allocation on the heap. It would violate\n+Rust\u2019s safety guarantees by introducing a data race if one could access both\n+`v` and `v2` at the same time. Therefore, Rust forbids using `v` after we\u2019ve\n+done the move (shallow copy).\n \n [sh]: the-stack-and-the-heap.html\n "}]}