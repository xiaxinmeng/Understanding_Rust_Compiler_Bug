{"sha": "03bfbe1fb3c22567e6e6f2f762945fe7c19f0b49", "node_id": "C_kwDOAAsO6NoAKDAzYmZiZTFmYjNjMjI1NjdlNmU2ZjJmNzYyOTQ1ZmU3YzE5ZjBiNDk", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-07-08T02:32:51Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-07-15T03:17:21Z"}, "message": "Move item_span from check_item_type into each function", "tree": {"sha": "b1af76bdb3a124471fd21d4d9763f9a0282926f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1af76bdb3a124471fd21d4d9763f9a0282926f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03bfbe1fb3c22567e6e6f2f762945fe7c19f0b49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03bfbe1fb3c22567e6e6f2f762945fe7c19f0b49", "html_url": "https://github.com/rust-lang/rust/commit/03bfbe1fb3c22567e6e6f2f762945fe7c19f0b49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03bfbe1fb3c22567e6e6f2f762945fe7c19f0b49/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78efaf43e4e9ef8864faa3da3a4fe1bd5c45dce1", "url": "https://api.github.com/repos/rust-lang/rust/commits/78efaf43e4e9ef8864faa3da3a4fe1bd5c45dce1", "html_url": "https://github.com/rust-lang/rust/commit/78efaf43e4e9ef8864faa3da3a4fe1bd5c45dce1"}], "stats": {"total": 48, "additions": 23, "deletions": 25}, "files": [{"sha": "bd2e89a4dc541dcb9821880129717cd2e713c505", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 16, "deletions": 18, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/03bfbe1fb3c22567e6e6f2f762945fe7c19f0b49/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03bfbe1fb3c22567e6e6f2f762945fe7c19f0b49/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=03bfbe1fb3c22567e6e6f2f762945fe7c19f0b49", "patch": "@@ -375,8 +375,9 @@ fn check_alloc_error_fn(\n     }\n }\n \n-fn check_struct(tcx: TyCtxt<'_>, def_id: LocalDefId, span: Span) {\n+fn check_struct(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n     let def = tcx.adt_def(def_id);\n+    let span = tcx.def_span(def_id);\n     def.destructor(tcx); // force the destructor to be evaluated\n     check_representable(tcx, span, def_id);\n \n@@ -388,8 +389,9 @@ fn check_struct(tcx: TyCtxt<'_>, def_id: LocalDefId, span: Span) {\n     check_packed(tcx, span, def);\n }\n \n-fn check_union(tcx: TyCtxt<'_>, def_id: LocalDefId, span: Span) {\n+fn check_union(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n     let def = tcx.adt_def(def_id);\n+    let span = tcx.def_span(def_id);\n     def.destructor(tcx); // force the destructor to be evaluated\n     check_representable(tcx, span, def_id);\n     check_transparent(tcx, span, def);\n@@ -471,13 +473,14 @@ fn check_union_fields(tcx: TyCtxt<'_>, span: Span, item_def_id: LocalDefId) -> b\n }\n \n /// Check that a `static` is inhabited.\n-fn check_static_inhabited<'tcx>(tcx: TyCtxt<'tcx>, def_id: LocalDefId, span: Span) {\n+fn check_static_inhabited<'tcx>(tcx: TyCtxt<'tcx>, def_id: LocalDefId) {\n     // Make sure statics are inhabited.\n     // Other parts of the compiler assume that there are no uninhabited places. In principle it\n     // would be enough to check this for `extern` statics, as statics with an initializer will\n     // have UB during initialization if they are uninhabited, but there also seems to be no good\n     // reason to allow any statics to be uninhabited.\n     let ty = tcx.type_of(def_id);\n+    let span = tcx.def_span(def_id);\n     let layout = match tcx.layout_of(ParamEnv::reveal_all().and(ty)) {\n         Ok(l) => l,\n         // Foreign statics that overflow their allowed size should emit an error\n@@ -524,9 +527,9 @@ pub(super) fn check_opaque<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     def_id: LocalDefId,\n     substs: SubstsRef<'tcx>,\n-    span: Span,\n     origin: &hir::OpaqueTyOrigin,\n ) {\n+    let span = tcx.def_span(def_id);\n     check_opaque_for_inheriting_lifetimes(tcx, def_id, span);\n     if tcx.type_of(def_id).references_error() {\n         return;\n@@ -781,13 +784,12 @@ fn check_item_type<'tcx>(tcx: TyCtxt<'tcx>, id: hir::ItemId) {\n         id.def_id,\n         tcx.def_path_str(id.def_id.to_def_id())\n     );\n-    let item_span = tcx.def_span(id.def_id);\n     let _indenter = indenter();\n     match tcx.def_kind(id.def_id) {\n         DefKind::Static(..) => {\n             tcx.ensure().typeck(id.def_id);\n-            maybe_check_static_with_link_section(tcx, id.def_id, item_span);\n-            check_static_inhabited(tcx, id.def_id, item_span);\n+            maybe_check_static_with_link_section(tcx, id.def_id);\n+            check_static_inhabited(tcx, id.def_id);\n         }\n         DefKind::Const => {\n             tcx.ensure().typeck(id.def_id);\n@@ -797,7 +799,7 @@ fn check_item_type<'tcx>(tcx: TyCtxt<'tcx>, id: hir::ItemId) {\n             let hir::ItemKind::Enum(ref enum_definition, _) = item.kind else {\n                 return;\n             };\n-            check_enum(tcx, item_span, &enum_definition.variants, item.def_id);\n+            check_enum(tcx, &enum_definition.variants, item.def_id);\n         }\n         DefKind::Fn => {} // entirely within check_item_body\n         DefKind::Impl => {\n@@ -848,10 +850,10 @@ fn check_item_type<'tcx>(tcx: TyCtxt<'tcx>, id: hir::ItemId) {\n             }\n         }\n         DefKind::Struct => {\n-            check_struct(tcx, id.def_id, item_span);\n+            check_struct(tcx, id.def_id);\n         }\n         DefKind::Union => {\n-            check_union(tcx, id.def_id, item_span);\n+            check_union(tcx, id.def_id);\n         }\n         DefKind::OpaqueTy => {\n             let item = tcx.hir().item(id);\n@@ -864,7 +866,7 @@ fn check_item_type<'tcx>(tcx: TyCtxt<'tcx>, id: hir::ItemId) {\n             // See https://github.com/rust-lang/rust/issues/75100\n             if !tcx.sess.opts.actually_rustdoc {\n                 let substs = InternalSubsts::identity_for_item(tcx, item.def_id.to_def_id());\n-                check_opaque(tcx, item.def_id, substs, item_span, &origin);\n+                check_opaque(tcx, item.def_id, substs, &origin);\n             }\n         }\n         DefKind::TyAlias => {\n@@ -928,7 +930,7 @@ fn check_item_type<'tcx>(tcx: TyCtxt<'tcx>, id: hir::ItemId) {\n                             require_c_abi_if_c_variadic(tcx, fn_decl, abi, item.span);\n                         }\n                         hir::ForeignItemKind::Static(..) => {\n-                            check_static_inhabited(tcx, def_id, item.span);\n+                            check_static_inhabited(tcx, def_id);\n                         }\n                         _ => {}\n                     }\n@@ -1442,13 +1444,9 @@ pub(super) fn check_transparent<'tcx>(tcx: TyCtxt<'tcx>, sp: Span, adt: ty::AdtD\n }\n \n #[allow(trivial_numeric_casts)]\n-fn check_enum<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-    sp: Span,\n-    vs: &'tcx [hir::Variant<'tcx>],\n-    def_id: LocalDefId,\n-) {\n+fn check_enum<'tcx>(tcx: TyCtxt<'tcx>, vs: &'tcx [hir::Variant<'tcx>], def_id: LocalDefId) {\n     let def = tcx.adt_def(def_id);\n+    let sp = tcx.def_span(def_id);\n     def.destructor(tcx); // force the destructor to be evaluated\n \n     if vs.is_empty() {"}, {"sha": "d6160266dd7d9f4fbff298dfec38195a6f45fe80", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/03bfbe1fb3c22567e6e6f2f762945fe7c19f0b49/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03bfbe1fb3c22567e6e6f2f762945fe7c19f0b49/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=03bfbe1fb3c22567e6e6f2f762945fe7c19f0b49", "patch": "@@ -534,7 +534,7 @@ fn fn_maybe_err(tcx: TyCtxt<'_>, sp: Span, abi: Abi) {\n     }\n }\n \n-fn maybe_check_static_with_link_section(tcx: TyCtxt<'_>, id: LocalDefId, span: Span) {\n+fn maybe_check_static_with_link_section(tcx: TyCtxt<'_>, id: LocalDefId) {\n     // Only restricted on wasm target for now\n     if !tcx.sess.target.is_like_wasm {\n         return;\n@@ -560,7 +560,7 @@ fn maybe_check_static_with_link_section(tcx: TyCtxt<'_>, id: LocalDefId, span: S\n         let msg = \"statics with a custom `#[link_section]` must be a \\\n                         simple list of bytes on the wasm target with no \\\n                         extra levels of indirection such as references\";\n-        tcx.sess.span_err(span, msg);\n+        tcx.sess.span_err(tcx.def_span(id), msg);\n     }\n }\n "}, {"sha": "1c926399591c232db31f6dec9326bad44501ead4", "filename": "src/test/ui/extern/extern-static-size-overflow.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/03bfbe1fb3c22567e6e6f2f762945fe7c19f0b49/src%2Ftest%2Fui%2Fextern%2Fextern-static-size-overflow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03bfbe1fb3c22567e6e6f2f762945fe7c19f0b49/src%2Ftest%2Fui%2Fextern%2Fextern-static-size-overflow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-static-size-overflow.stderr?ref=03bfbe1fb3c22567e6e6f2f762945fe7c19f0b49", "patch": "@@ -2,19 +2,19 @@ error: extern static is too large for the current architecture\n   --> $DIR/extern-static-size-overflow.rs:38:5\n    |\n LL |     static BAZ: [u8; max_size()];\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: extern static is too large for the current architecture\n   --> $DIR/extern-static-size-overflow.rs:39:5\n    |\n LL |     static UWU: [usize; usize::MAX];\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: extern static is too large for the current architecture\n   --> $DIR/extern-static-size-overflow.rs:40:5\n    |\n LL |     static A: ReallyBig;\n-   |     ^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "88ee4cbdc2efcd66d8d8597f1db913e7de83db3c", "filename": "src/test/ui/statics/uninhabited-static.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/03bfbe1fb3c22567e6e6f2f762945fe7c19f0b49/src%2Ftest%2Fui%2Fstatics%2Funinhabited-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03bfbe1fb3c22567e6e6f2f762945fe7c19f0b49/src%2Ftest%2Fui%2Fstatics%2Funinhabited-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatics%2Funinhabited-static.stderr?ref=03bfbe1fb3c22567e6e6f2f762945fe7c19f0b49", "patch": "@@ -2,7 +2,7 @@ error: static of uninhabited type\n   --> $DIR/uninhabited-static.rs:6:5\n    |\n LL |     static VOID: Void;\n-   |     ^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^\n    |\n note: the lint level is defined here\n   --> $DIR/uninhabited-static.rs:2:9\n@@ -17,7 +17,7 @@ error: static of uninhabited type\n   --> $DIR/uninhabited-static.rs:8:5\n    |\n LL |     static NEVER: !;\n-   |     ^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #74840 <https://github.com/rust-lang/rust/issues/74840>"}]}