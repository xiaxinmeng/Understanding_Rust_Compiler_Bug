{"sha": "b5c194f3f7c1dd38d4743ca65d5a55dfb5b648fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1YzE5NGYzZjdjMWRkMzhkNDc0M2NhNjVkNWE1NWRmYjViNjQ4ZmM=", "commit": {"author": {"name": "James Leitch", "email": "rickvanprim@gmail.com", "date": "2021-04-18T23:36:29Z"}, "committer": {"name": "James Leitch", "email": "rickvanprim@gmail.com", "date": "2021-04-18T23:36:29Z"}, "message": "Flycheck tries to parse both Cargo and Rustc messages.", "tree": {"sha": "bc2b10ac5f5be70aaeed77aa880e424c4124857e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc2b10ac5f5be70aaeed77aa880e424c4124857e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5c194f3f7c1dd38d4743ca65d5a55dfb5b648fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5c194f3f7c1dd38d4743ca65d5a55dfb5b648fc", "html_url": "https://github.com/rust-lang/rust/commit/b5c194f3f7c1dd38d4743ca65d5a55dfb5b648fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5c194f3f7c1dd38d4743ca65d5a55dfb5b648fc/comments", "author": {"login": "rickvanprim", "id": 13792812, "node_id": "MDQ6VXNlcjEzNzkyODEy", "avatar_url": "https://avatars.githubusercontent.com/u/13792812?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rickvanprim", "html_url": "https://github.com/rickvanprim", "followers_url": "https://api.github.com/users/rickvanprim/followers", "following_url": "https://api.github.com/users/rickvanprim/following{/other_user}", "gists_url": "https://api.github.com/users/rickvanprim/gists{/gist_id}", "starred_url": "https://api.github.com/users/rickvanprim/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rickvanprim/subscriptions", "organizations_url": "https://api.github.com/users/rickvanprim/orgs", "repos_url": "https://api.github.com/users/rickvanprim/repos", "events_url": "https://api.github.com/users/rickvanprim/events{/privacy}", "received_events_url": "https://api.github.com/users/rickvanprim/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rickvanprim", "id": 13792812, "node_id": "MDQ6VXNlcjEzNzkyODEy", "avatar_url": "https://avatars.githubusercontent.com/u/13792812?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rickvanprim", "html_url": "https://github.com/rickvanprim", "followers_url": "https://api.github.com/users/rickvanprim/followers", "following_url": "https://api.github.com/users/rickvanprim/following{/other_user}", "gists_url": "https://api.github.com/users/rickvanprim/gists{/gist_id}", "starred_url": "https://api.github.com/users/rickvanprim/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rickvanprim/subscriptions", "organizations_url": "https://api.github.com/users/rickvanprim/orgs", "repos_url": "https://api.github.com/users/rickvanprim/repos", "events_url": "https://api.github.com/users/rickvanprim/events{/privacy}", "received_events_url": "https://api.github.com/users/rickvanprim/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d39873e88b12b6c6c56bed530500baf07bf3391f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d39873e88b12b6c6c56bed530500baf07bf3391f", "html_url": "https://github.com/rust-lang/rust/commit/d39873e88b12b6c6c56bed530500baf07bf3391f"}], "stats": {"total": 69, "additions": 47, "deletions": 22}, "files": [{"sha": "ebd20404c71a9d7391a54ef06d344d36b49c3642", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b5c194f3f7c1dd38d4743ca65d5a55dfb5b648fc/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/b5c194f3f7c1dd38d4743ca65d5a55dfb5b648fc/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=b5c194f3f7c1dd38d4743ca65d5a55dfb5b648fc", "patch": "@@ -396,6 +396,7 @@ dependencies = [\n  \"crossbeam-channel\",\n  \"jod-thread\",\n  \"log\",\n+ \"serde\",\n  \"serde_json\",\n  \"stdx\",\n  \"toolchain\","}, {"sha": "18b9ce7dfc150f3fce814a17e06ef0111ed887b5", "filename": "crates/flycheck/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b5c194f3f7c1dd38d4743ca65d5a55dfb5b648fc/crates%2Fflycheck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b5c194f3f7c1dd38d4743ca65d5a55dfb5b648fc/crates%2Fflycheck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fflycheck%2FCargo.toml?ref=b5c194f3f7c1dd38d4743ca65d5a55dfb5b648fc", "patch": "@@ -13,6 +13,7 @@ doctest = false\n crossbeam-channel = \"0.5.0\"\n log = \"0.4.8\"\n cargo_metadata = \"0.13\"\n+serde = { version = \"1.0.106\", features = [\"derive\"] }\n serde_json = \"1.0.48\"\n jod-thread = \"0.1.1\"\n "}, {"sha": "4c75396f57ae732421a7575714184b9179255716", "filename": "crates/flycheck/src/lib.rs", "status": "modified", "additions": 45, "deletions": 22, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/b5c194f3f7c1dd38d4743ca65d5a55dfb5b648fc/crates%2Fflycheck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5c194f3f7c1dd38d4743ca65d5a55dfb5b648fc/crates%2Fflycheck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fflycheck%2Fsrc%2Flib.rs?ref=b5c194f3f7c1dd38d4743ca65d5a55dfb5b648fc", "patch": "@@ -4,13 +4,14 @@\n \n use std::{\n     fmt,\n-    io::{self, BufReader},\n+    io::{self, BufRead, BufReader},\n     path::PathBuf,\n     process::{self, Command, Stdio},\n     time::Duration,\n };\n \n use crossbeam_channel::{never, select, unbounded, Receiver, Sender};\n+use serde::Deserialize;\n use stdx::JodChild;\n \n pub use cargo_metadata::diagnostic::{\n@@ -128,7 +129,7 @@ struct FlycheckActor {\n \n enum Event {\n     Restart(Restart),\n-    CheckEvent(Option<cargo_metadata::Message>),\n+    CheckEvent(Option<CargoMessage>),\n }\n \n impl FlycheckActor {\n@@ -180,21 +181,16 @@ impl FlycheckActor {\n                     self.progress(Progress::DidFinish(res));\n                 }\n                 Event::CheckEvent(Some(message)) => match message {\n-                    cargo_metadata::Message::CompilerArtifact(msg) => {\n+                    CargoMessage::CompilerArtifact(msg) => {\n                         self.progress(Progress::DidCheckCrate(msg.target.name));\n                     }\n \n-                    cargo_metadata::Message::CompilerMessage(msg) => {\n+                    CargoMessage::Diagnostic(msg) => {\n                         self.send(Message::AddDiagnostic {\n                             workspace_root: self.workspace_root.clone(),\n-                            diagnostic: msg.message,\n+                            diagnostic: msg,\n                         });\n                     }\n-\n-                    cargo_metadata::Message::BuildScriptExecuted(_)\n-                    | cargo_metadata::Message::BuildFinished(_)\n-                    | cargo_metadata::Message::TextLine(_)\n-                    | _ => {}\n                 },\n             }\n         }\n@@ -261,7 +257,7 @@ struct CargoHandle {\n     child: JodChild,\n     #[allow(unused)]\n     thread: jod_thread::JoinHandle<io::Result<bool>>,\n-    receiver: Receiver<cargo_metadata::Message>,\n+    receiver: Receiver<CargoMessage>,\n }\n \n impl CargoHandle {\n@@ -294,14 +290,11 @@ impl CargoHandle {\n \n struct CargoActor {\n     child_stdout: process::ChildStdout,\n-    sender: Sender<cargo_metadata::Message>,\n+    sender: Sender<CargoMessage>,\n }\n \n impl CargoActor {\n-    fn new(\n-        child_stdout: process::ChildStdout,\n-        sender: Sender<cargo_metadata::Message>,\n-    ) -> CargoActor {\n+    fn new(child_stdout: process::ChildStdout, sender: Sender<CargoMessage>) -> CargoActor {\n         CargoActor { child_stdout, sender }\n     }\n     fn run(self) -> io::Result<bool> {\n@@ -315,7 +308,7 @@ impl CargoActor {\n         // erroneus output.\n         let stdout = BufReader::new(self.child_stdout);\n         let mut read_at_least_one_message = false;\n-        for message in cargo_metadata::Message::parse_stream(stdout) {\n+        for message in stdout.lines() {\n             let message = match message {\n                 Ok(message) => message,\n                 Err(err) => {\n@@ -326,13 +319,43 @@ impl CargoActor {\n \n             read_at_least_one_message = true;\n \n-            // Skip certain kinds of messages to only spend time on what's useful\n-            match &message {\n-                cargo_metadata::Message::CompilerArtifact(artifact) if artifact.fresh => (),\n-                cargo_metadata::Message::BuildScriptExecuted(_) => (),\n-                _ => self.sender.send(message).unwrap(),\n+            // Try to deserialize a message from Cargo.\n+            {\n+                let mut deserializer = serde_json::Deserializer::from_str(&message);\n+                deserializer.disable_recursion_limit();\n+                if let Ok(message) = cargo_metadata::Message::deserialize(&mut deserializer) {\n+                    // Skip certain kinds of messages to only spend time on what's useful\n+                    match message {\n+                        cargo_metadata::Message::CompilerArtifact(artifact) if !artifact.fresh => {\n+                            self.sender.send(CargoMessage::CompilerArtifact(artifact)).unwrap()\n+                        }\n+                        cargo_metadata::Message::CompilerMessage(msg) => {\n+                            self.sender.send(CargoMessage::Diagnostic(msg.message)).unwrap()\n+                        }\n+\n+                        cargo_metadata::Message::CompilerArtifact(_)\n+                        | cargo_metadata::Message::BuildScriptExecuted(_)\n+                        | cargo_metadata::Message::BuildFinished(_)\n+                        | cargo_metadata::Message::TextLine(_)\n+                        | _ => (),\n+                    }\n+                }\n+            }\n+\n+            // Try to deserialize a Diagnostic directly from Rustc.\n+            {\n+                let mut deserializer = serde_json::Deserializer::from_str(&message);\n+                deserializer.disable_recursion_limit();\n+                if let Ok(message) = Diagnostic::deserialize(&mut deserializer) {\n+                    self.sender.send(CargoMessage::Diagnostic(message)).unwrap()\n+                }\n             }\n         }\n         Ok(read_at_least_one_message)\n     }\n }\n+\n+enum CargoMessage {\n+    CompilerArtifact(cargo_metadata::Artifact),\n+    Diagnostic(Diagnostic),\n+}"}]}