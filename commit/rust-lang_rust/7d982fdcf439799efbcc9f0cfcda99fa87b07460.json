{"sha": "7d982fdcf439799efbcc9f0cfcda99fa87b07460", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkOTgyZmRjZjQzOTc5OWVmYmNjOWYwY2ZjZGE5OWZhODdiMDc0NjA=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-04-24T12:42:30Z"}, "committer": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2018-04-30T16:18:32Z"}, "message": "Implement `PartialCmp` for `ConstFloat`", "tree": {"sha": "76f20bd4c608cf62102aab106122713678635f8e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76f20bd4c608cf62102aab106122713678635f8e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d982fdcf439799efbcc9f0cfcda99fa87b07460", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJgBAABCgBKFiEEvpMjxK4/cnPNfesJHVy0/Fl8MAQFAlrnQdgsHGdpdC1uby1y\nZXBseS05ODc5MTY1NzE2NDc5NDEzMTMxQG9saS1vYmsuZGUACgkQHVy0/Fl8MARR\ntRAA0ZmY6FHoQ1RCkODq++SO+4FGEW0DIdwv6yexNplrVJwVV7oA5pRXb3bGZfIe\n8yE7GhXK4WrlwOvkC26P43eitisvN3PnGA0U7/ItCkAAPPQZYxB+u1xXJAxN9lI4\nyiCxCAoX4hfuIrJad2DkxVh3VVDUWd0BSqhuxelnki6819+cimjQmyyJcHyaI8rT\nTTZvdb2NCe8xhV/MDvYc+NlS5VjPDSPN0KEQKzyuWsNBVBZLYi6upiFhoZVI7z4i\nYvBCS84cOkY1u1qA+3C2f5yLjz855uO4PiAE5eYg7S7OEYOM/B3pQsjDXgL1VfHH\nI5yZp0iX9qHKbNenBspNmpdJ+hpksKOdsR5eObOvtdGuZ72auDcEs1HWKjibrAx3\nFhnVB6gcHVeGEPc3GIJzoopzIhy8s7j2AiR/kKTDK0rSFvQNdTZBofY/Tox81V6l\neQ33BhWUfFEhX/tHsLkMSIcSJb5Nl4d2HQilBgahNuzGqUVp7iVj2U5izQXN6rXE\n0cGei4tW/Q70LiM1IOpmEcR8NKPMXdaTz5/9hXvb8joMqpsEMR0DVd7DruOaR5M2\nIOAs7Pv2xu7Mw2GFZreMONKg0KyPE77IIkA8hdBHUidg5sSf9ZzSeiU1dGQufbsl\nqskc9cExn5vYqsPLFm4CQxPVCZ1TchMAo0T56PV2HI4wn+g=\n=GW/D\n-----END PGP SIGNATURE-----", "payload": "tree 76f20bd4c608cf62102aab106122713678635f8e\nparent 7def638e42b70ee204cc84458b3d3775bbeba055\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1524573750 +0200\ncommitter Oliver Schneider <git-no-reply-9879165716479413131@oli-obk.de> 1525105112 +0200\n\nImplement `PartialCmp` for `ConstFloat`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d982fdcf439799efbcc9f0cfcda99fa87b07460", "html_url": "https://github.com/rust-lang/rust/commit/7d982fdcf439799efbcc9f0cfcda99fa87b07460", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d982fdcf439799efbcc9f0cfcda99fa87b07460/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7def638e42b70ee204cc84458b3d3775bbeba055", "url": "https://api.github.com/repos/rust-lang/rust/commits/7def638e42b70ee204cc84458b3d3775bbeba055", "html_url": "https://github.com/rust-lang/rust/commit/7def638e42b70ee204cc84458b3d3775bbeba055"}], "stats": {"total": 32, "additions": 17, "deletions": 15}, "files": [{"sha": "387a6d5f35c4497a2fb494cab6f4ddf685e13304", "filename": "src/librustc/ich/impls_const_math.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7d982fdcf439799efbcc9f0cfcda99fa87b07460/src%2Flibrustc%2Fich%2Fimpls_const_math.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d982fdcf439799efbcc9f0cfcda99fa87b07460/src%2Flibrustc%2Fich%2Fimpls_const_math.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_const_math.rs?ref=7d982fdcf439799efbcc9f0cfcda99fa87b07460", "patch": "@@ -17,7 +17,6 @@ impl_stable_hash_for!(struct ::rustc_const_math::ConstFloat {\n });\n \n impl_stable_hash_for!(enum ::rustc_const_math::ConstMathErr {\n-    CmpBetweenUnequalTypes,\n     UnequalTypes(op),\n     Overflow(op),\n     DivisionByZero,"}, {"sha": "5d442ee7b9721b6d6770c3d25175cc668a201c5f", "filename": "src/librustc_const_math/err.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d982fdcf439799efbcc9f0cfcda99fa87b07460/src%2Flibrustc_const_math%2Ferr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d982fdcf439799efbcc9f0cfcda99fa87b07460/src%2Flibrustc_const_math%2Ferr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_math%2Ferr.rs?ref=7d982fdcf439799efbcc9f0cfcda99fa87b07460", "patch": "@@ -10,7 +10,6 @@\n \n #[derive(Debug, PartialEq, Eq, Clone, RustcEncodable, RustcDecodable)]\n pub enum ConstMathErr {\n-    CmpBetweenUnequalTypes,\n     UnequalTypes(Op),\n     Overflow(Op),\n     DivisionByZero,\n@@ -37,7 +36,6 @@ impl ConstMathErr {\n     pub fn description(&self) -> &'static str {\n         use self::Op::*;\n         match *self {\n-            CmpBetweenUnequalTypes => \"compared two values of different types\",\n             UnequalTypes(Add) => \"tried to add two values of different types\",\n             UnequalTypes(Sub) => \"tried to subtract two values of different types\",\n             UnequalTypes(Mul) => \"tried to multiply two values of different types\","}, {"sha": "61e9b34f06a2cb6f963613e97d84a70a9df9ff6a", "filename": "src/librustc_const_math/float.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7d982fdcf439799efbcc9f0cfcda99fa87b07460/src%2Flibrustc_const_math%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d982fdcf439799efbcc9f0cfcda99fa87b07460/src%2Flibrustc_const_math%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_math%2Ffloat.rs?ref=7d982fdcf439799efbcc9f0cfcda99fa87b07460", "patch": "@@ -31,29 +31,35 @@ pub struct ConstFloat {\n     pub bits: u128,\n }\n \n+impl PartialOrd<ConstFloat> for ConstFloat {\n+    fn partial_cmp(&self, other: &Self) -> Option<Ordering> {\n+        self.try_cmp(*other)\n+    }\n+}\n+\n impl ConstFloat {\n     /// Description of the type, not the value\n     pub fn description(&self) -> &'static str {\n         self.ty.ty_to_string()\n     }\n \n     /// Compares the values if they are of the same type\n-    pub fn try_cmp(self, rhs: Self) -> Result<Ordering, ConstMathErr> {\n+    fn try_cmp(self, rhs: Self) -> Option<Ordering> {\n         match (self.ty, rhs.ty) {\n             (ast::FloatTy::F64, ast::FloatTy::F64)  => {\n                 let a = Double::from_bits(self.bits);\n                 let b = Double::from_bits(rhs.bits);\n                 // This is pretty bad but it is the existing behavior.\n-                Ok(a.partial_cmp(&b).unwrap_or(Ordering::Greater))\n+                Some(a.partial_cmp(&b).unwrap_or(Ordering::Greater))\n             }\n \n             (ast::FloatTy::F32, ast::FloatTy::F32) => {\n                 let a = Single::from_bits(self.bits);\n                 let b = Single::from_bits(rhs.bits);\n-                Ok(a.partial_cmp(&b).unwrap_or(Ordering::Greater))\n+                Some(a.partial_cmp(&b).unwrap_or(Ordering::Greater))\n             }\n \n-            _ => Err(CmpBetweenUnequalTypes),\n+            _ => None,\n         }\n     }\n "}, {"sha": "776b24a8648e7a8ffe84f4c3180e2e4ae942ef2c", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7d982fdcf439799efbcc9f0cfcda99fa87b07460/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d982fdcf439799efbcc9f0cfcda99fa87b07460/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=7d982fdcf439799efbcc9f0cfcda99fa87b07460", "patch": "@@ -1069,8 +1069,7 @@ pub fn compare_const_vals<'a, 'tcx>(\n                         bits: b,\n                         ty,\n                     };\n-                    // FIXME(oli-obk): report cmp errors?\n-                    l.try_cmp(r).ok()\n+                    l.partial_cmp(&r)\n                 },\n                 ty::TyInt(_) => {\n                     let a = interpret::sign_extend(tcx, a, ty).expect(\"layout error for TyInt\");"}, {"sha": "0c748f818ccc89e023508654814610f789be93da", "filename": "src/librustc_mir/interpret/operator.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7d982fdcf439799efbcc9f0cfcda99fa87b07460/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d982fdcf439799efbcc9f0cfcda99fa87b07460/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperator.rs?ref=7d982fdcf439799efbcc9f0cfcda99fa87b07460", "patch": "@@ -135,12 +135,12 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n                 ty,\n             };\n             match op {\n-                Eq => PrimVal::from_bool(l.try_cmp(r).unwrap() == Ordering::Equal),\n-                Ne => PrimVal::from_bool(l.try_cmp(r).unwrap() != Ordering::Equal),\n-                Lt => PrimVal::from_bool(l.try_cmp(r).unwrap() == Ordering::Less),\n-                Le => PrimVal::from_bool(l.try_cmp(r).unwrap() != Ordering::Greater),\n-                Gt => PrimVal::from_bool(l.try_cmp(r).unwrap() == Ordering::Greater),\n-                Ge => PrimVal::from_bool(l.try_cmp(r).unwrap() != Ordering::Less),\n+                Eq => PrimVal::from_bool(l.partial_cmp(&r).unwrap() == Ordering::Equal),\n+                Ne => PrimVal::from_bool(l.partial_cmp(&r).unwrap() != Ordering::Equal),\n+                Lt => PrimVal::from_bool(l.partial_cmp(&r).unwrap() == Ordering::Less),\n+                Le => PrimVal::from_bool(l.partial_cmp(&r).unwrap() != Ordering::Greater),\n+                Gt => PrimVal::from_bool(l.partial_cmp(&r).unwrap() == Ordering::Greater),\n+                Ge => PrimVal::from_bool(l.partial_cmp(&r).unwrap() != Ordering::Less),\n                 Add => PrimVal::Bytes((l + r).unwrap().bits),\n                 Sub => PrimVal::Bytes((l - r).unwrap().bits),\n                 Mul => PrimVal::Bytes((l * r).unwrap().bits),"}]}