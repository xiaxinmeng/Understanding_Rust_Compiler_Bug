{"sha": "8395ce9451c901a4b5ce3afd916bd20785e6db7f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzOTVjZTk0NTFjOTAxYTRiNWNlM2FmZDkxNmJkMjA3ODVlNmRiN2Y=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-03-03T05:26:02Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-03-14T23:43:03Z"}, "message": "Require the code mapper to be thread-safe", "tree": {"sha": "32efc728b028accb744d455afb1d884ec0b74a2c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32efc728b028accb744d455afb1d884ec0b74a2c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8395ce9451c901a4b5ce3afd916bd20785e6db7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8395ce9451c901a4b5ce3afd916bd20785e6db7f", "html_url": "https://github.com/rust-lang/rust/commit/8395ce9451c901a4b5ce3afd916bd20785e6db7f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8395ce9451c901a4b5ce3afd916bd20785e6db7f/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a857e6003e3f1ee1023bb8ec50cf652164bf5e11", "url": "https://api.github.com/repos/rust-lang/rust/commits/a857e6003e3f1ee1023bb8ec50cf652164bf5e11", "html_url": "https://github.com/rust-lang/rust/commit/a857e6003e3f1ee1023bb8ec50cf652164bf5e11"}], "stats": {"total": 27, "additions": 14, "deletions": 13}, "files": [{"sha": "ca5d3f55a0fea4988d75505405c1a32d05917145", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8395ce9451c901a4b5ce3afd916bd20785e6db7f/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8395ce9451c901a4b5ce3afd916bd20785e6db7f/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=8395ce9451c901a4b5ce3afd916bd20785e6db7f", "patch": "@@ -12,7 +12,7 @@ use self::Destination::*;\n \n use syntax_pos::{DUMMY_SP, FileMap, Span, MultiSpan};\n \n-use {Level, CodeSuggestion, DiagnosticBuilder, SubDiagnostic, CodeMapper, DiagnosticId};\n+use {Level, CodeSuggestion, DiagnosticBuilder, SubDiagnostic, CodeMapperDyn, DiagnosticId};\n use snippet::{Annotation, AnnotationType, Line, MultilineAnnotation, StyledString, Style};\n use styled_buffer::StyledBuffer;\n \n@@ -120,7 +120,7 @@ impl ColorConfig {\n \n pub struct EmitterWriter {\n     dst: Destination,\n-    cm: Option<Lrc<CodeMapper>>,\n+    cm: Option<Lrc<CodeMapperDyn>>,\n     short_message: bool,\n     teach: bool,\n     ui_testing: bool,\n@@ -134,7 +134,7 @@ struct FileWithAnnotatedLines {\n \n impl EmitterWriter {\n     pub fn stderr(color_config: ColorConfig,\n-                  code_map: Option<Lrc<CodeMapper>>,\n+                  code_map: Option<Lrc<CodeMapperDyn>>,\n                   short_message: bool,\n                   teach: bool)\n                   -> EmitterWriter {\n@@ -149,7 +149,7 @@ impl EmitterWriter {\n     }\n \n     pub fn new(dst: Box<Write + Send>,\n-               code_map: Option<Lrc<CodeMapper>>,\n+               code_map: Option<Lrc<CodeMapperDyn>>,\n                short_message: bool,\n                teach: bool)\n                -> EmitterWriter {\n@@ -1195,8 +1195,6 @@ impl EmitterWriter {\n                                level: &Level,\n                                max_line_num_len: usize)\n                                -> io::Result<()> {\n-        use std::borrow::Borrow;\n-\n         if let Some(ref cm) = self.cm {\n             let mut buffer = StyledBuffer::new();\n \n@@ -1213,7 +1211,7 @@ impl EmitterWriter {\n                                Some(Style::HeaderMsg));\n \n             // Render the replacements for each suggestion\n-            let suggestions = suggestion.splice_lines(cm.borrow());\n+            let suggestions = suggestion.splice_lines(&**cm);\n \n             let mut row_num = 2;\n             for &(ref complete, ref parts) in suggestions.iter().take(MAX_SUGGESTIONS) {"}, {"sha": "a25c3668bb13b168a5a17c79b4bda065416a1d2d", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8395ce9451c901a4b5ce3afd916bd20785e6db7f/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8395ce9451c901a4b5ce3afd916bd20785e6db7f/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=8395ce9451c901a4b5ce3afd916bd20785e6db7f", "patch": "@@ -36,7 +36,7 @@ use self::Level::*;\n \n use emitter::{Emitter, EmitterWriter};\n \n-use rustc_data_structures::sync::Lrc;\n+use rustc_data_structures::sync::{self, Lrc};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::stable_hasher::StableHasher;\n \n@@ -106,6 +106,8 @@ pub struct SubstitutionPart {\n     pub snippet: String,\n }\n \n+pub type CodeMapperDyn = CodeMapper + sync::Send + sync::Sync;\n+\n pub trait CodeMapper {\n     fn lookup_char_pos(&self, pos: BytePos) -> Loc;\n     fn span_to_lines(&self, sp: Span) -> FileLinesResult;\n@@ -119,7 +121,8 @@ pub trait CodeMapper {\n \n impl CodeSuggestion {\n     /// Returns the assembled code suggestions and whether they should be shown with an underline.\n-    pub fn splice_lines(&self, cm: &CodeMapper) -> Vec<(String, Vec<SubstitutionPart>)> {\n+    pub fn splice_lines(&self, cm: &CodeMapperDyn)\n+                        -> Vec<(String, Vec<SubstitutionPart>)> {\n         use syntax_pos::{CharPos, Loc, Pos};\n \n         fn push_trailing(buf: &mut String,\n@@ -290,7 +293,7 @@ impl Handler {\n     pub fn with_tty_emitter(color_config: ColorConfig,\n                             can_emit_warnings: bool,\n                             treat_err_as_bug: bool,\n-                            cm: Option<Lrc<CodeMapper>>)\n+                            cm: Option<Lrc<CodeMapperDyn>>)\n                             -> Handler {\n         Handler::with_tty_emitter_and_flags(\n             color_config,\n@@ -303,7 +306,7 @@ impl Handler {\n     }\n \n     pub fn with_tty_emitter_and_flags(color_config: ColorConfig,\n-                                      cm: Option<Lrc<CodeMapper>>,\n+                                      cm: Option<Lrc<CodeMapperDyn>>,\n                                       flags: HandlerFlags)\n                                       -> Handler {\n         let emitter = Box::new(EmitterWriter::stderr(color_config, cm, false, false));"}, {"sha": "b4f34fb12e36a1c846af690e37114823a7729f0a", "filename": "src/libsyntax/json.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8395ce9451c901a4b5ce3afd916bd20785e6db7f/src%2Flibsyntax%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8395ce9451c901a4b5ce3afd916bd20785e6db7f/src%2Flibsyntax%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fjson.rs?ref=8395ce9451c901a4b5ce3afd916bd20785e6db7f", "patch": "@@ -26,7 +26,7 @@ use errors::{DiagnosticBuilder, SubDiagnostic, CodeSuggestion, CodeMapper};\n use errors::DiagnosticId;\n use errors::emitter::{Emitter, EmitterWriter};\n \n-use rustc_data_structures::sync::Lrc;\n+use rustc_data_structures::sync::{self, Lrc};\n use std::io::{self, Write};\n use std::vec;\n use std::sync::{Arc, Mutex};\n@@ -36,7 +36,7 @@ use rustc_serialize::json::{as_json, as_pretty_json};\n pub struct JsonEmitter {\n     dst: Box<Write + Send>,\n     registry: Option<Registry>,\n-    cm: Lrc<CodeMapper + 'static>,\n+    cm: Lrc<CodeMapper + sync::Send + sync::Sync>,\n     pretty: bool,\n     /// Whether \"approximate suggestions\" are enabled in the config\n     approximate_suggestions: bool,"}]}