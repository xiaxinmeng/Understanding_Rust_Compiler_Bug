{"sha": "6aa2e9d97831fed07646419113173dd7283a756e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhYTJlOWQ5NzgzMWZlZDA3NjQ2NDE5MTEzMTczZGQ3MjgzYTc1NmU=", "commit": {"author": {"name": "Jack Huey", "email": "jack.huey@umassmed.edu", "date": "2020-05-27T00:19:19Z"}, "committer": {"name": "Jack Huey", "email": "jack.huey@umassmed.edu", "date": "2020-06-19T18:04:30Z"}, "message": "Update chalk", "tree": {"sha": "b40dbb71be2c103b30c3ec81d044ba1cffecaa59", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b40dbb71be2c103b30c3ec81d044ba1cffecaa59"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6aa2e9d97831fed07646419113173dd7283a756e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6aa2e9d97831fed07646419113173dd7283a756e", "html_url": "https://github.com/rust-lang/rust/commit/6aa2e9d97831fed07646419113173dd7283a756e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6aa2e9d97831fed07646419113173dd7283a756e/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16dd584e113360a9fff055cc173741bc140808b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/16dd584e113360a9fff055cc173741bc140808b5", "html_url": "https://github.com/rust-lang/rust/commit/16dd584e113360a9fff055cc173741bc140808b5"}], "stats": {"total": 412, "additions": 219, "deletions": 193}, "files": [{"sha": "f8f2a9c6d73306ef6b9404ed23ea836ad1166da1", "filename": "Cargo.lock", "status": "modified", "additions": 25, "deletions": 46, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/6aa2e9d97831fed07646419113173dd7283a756e/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/6aa2e9d97831fed07646419113173dd7283a756e/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=6aa2e9d97831fed07646419113173dd7283a756e", "patch": "@@ -432,10 +432,18 @@ dependencies = [\n  \"rustc-std-workspace-core\",\n ]\n \n+[[package]]\n+name = \"chalk-base\"\n+version = \"0.10.1-dev\"\n+source = \"git+https://github.com/rust-lang/chalk.git?rev=f4977ab4c781e4f3b7fdb9310edbdab6daf56e29#f4977ab4c781e4f3b7fdb9310edbdab6daf56e29\"\n+dependencies = [\n+ \"lazy_static 1.4.0\",\n+]\n+\n [[package]]\n name = \"chalk-derive\"\n version = \"0.10.1-dev\"\n-source = \"git+https://github.com/rust-lang/chalk.git?rev=3e9c2503ae9c5277c2acb74624dc267876dd89b3#3e9c2503ae9c5277c2acb74624dc267876dd89b3\"\n+source = \"git+https://github.com/rust-lang/chalk.git?rev=f4977ab4c781e4f3b7fdb9310edbdab6daf56e29#f4977ab4c781e4f3b7fdb9310edbdab6daf56e29\"\n dependencies = [\n  \"proc-macro2 1.0.3\",\n  \"quote 1.0.2\",\n@@ -446,52 +454,33 @@ dependencies = [\n [[package]]\n name = \"chalk-engine\"\n version = \"0.10.1-dev\"\n-source = \"git+https://github.com/rust-lang/chalk.git?rev=3e9c2503ae9c5277c2acb74624dc267876dd89b3#3e9c2503ae9c5277c2acb74624dc267876dd89b3\"\n+source = \"git+https://github.com/rust-lang/chalk.git?rev=f4977ab4c781e4f3b7fdb9310edbdab6daf56e29#f4977ab4c781e4f3b7fdb9310edbdab6daf56e29\"\n dependencies = [\n- \"chalk-macros\",\n+ \"chalk-base\",\n+ \"chalk-derive\",\n+ \"chalk-ir\",\n  \"rustc-hash\",\n ]\n \n [[package]]\n name = \"chalk-ir\"\n version = \"0.10.1-dev\"\n-source = \"git+https://github.com/rust-lang/chalk.git?rev=3e9c2503ae9c5277c2acb74624dc267876dd89b3#3e9c2503ae9c5277c2acb74624dc267876dd89b3\"\n-dependencies = [\n- \"chalk-derive\",\n- \"chalk-engine\",\n- \"chalk-macros\",\n-]\n-\n-[[package]]\n-name = \"chalk-macros\"\n-version = \"0.10.1-dev\"\n-source = \"git+https://github.com/rust-lang/chalk.git?rev=3e9c2503ae9c5277c2acb74624dc267876dd89b3#3e9c2503ae9c5277c2acb74624dc267876dd89b3\"\n-dependencies = [\n- \"lazy_static\",\n-]\n-\n-[[package]]\n-name = \"chalk-rust-ir\"\n-version = \"0.10.1-dev\"\n-source = \"git+https://github.com/rust-lang/chalk.git?rev=3e9c2503ae9c5277c2acb74624dc267876dd89b3#3e9c2503ae9c5277c2acb74624dc267876dd89b3\"\n+source = \"git+https://github.com/rust-lang/chalk.git?rev=f4977ab4c781e4f3b7fdb9310edbdab6daf56e29#f4977ab4c781e4f3b7fdb9310edbdab6daf56e29\"\n dependencies = [\n+ \"chalk-base\",\n  \"chalk-derive\",\n- \"chalk-engine\",\n- \"chalk-ir\",\n- \"chalk-macros\",\n ]\n \n [[package]]\n name = \"chalk-solve\"\n version = \"0.10.1-dev\"\n-source = \"git+https://github.com/rust-lang/chalk.git?rev=3e9c2503ae9c5277c2acb74624dc267876dd89b3#3e9c2503ae9c5277c2acb74624dc267876dd89b3\"\n+source = \"git+https://github.com/rust-lang/chalk.git?rev=f4977ab4c781e4f3b7fdb9310edbdab6daf56e29#f4977ab4c781e4f3b7fdb9310edbdab6daf56e29\"\n dependencies = [\n+ \"chalk-base\",\n  \"chalk-derive\",\n  \"chalk-engine\",\n  \"chalk-ir\",\n- \"chalk-macros\",\n- \"chalk-rust-ir\",\n- \"ena 0.13.1\",\n+ \"ena 0.14.0\",\n  \"itertools 0.9.0\",\n  \"petgraph\",\n  \"rustc-hash\",\n@@ -1175,9 +1164,9 @@ dependencies = [\n \n [[package]]\n name = \"fixedbitset\"\n-version = \"0.1.9\"\n+version = \"0.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"86d4de0081402f5e88cdac65c8dcdcc73118c1a7a465e2a05f0da05843a8ea33\"\n+checksum = \"37ab347416e802de484e4d03c7316c48f1ecb56574dfd4a46a80f173ce1de04d\"\n \n [[package]]\n name = \"flate2\"\n@@ -2364,12 +2353,6 @@ dependencies = [\n  \"vcpkg\",\n ]\n \n-[[package]]\n-name = \"ordermap\"\n-version = \"0.3.5\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a86ed3f5f244b372d6b1a00b72ef7f8876d0bc6a78a4c9985c53614041512063\"\n-\n [[package]]\n name = \"ordslice\"\n version = \"0.3.0\"\n@@ -2540,12 +2523,12 @@ dependencies = [\n \n [[package]]\n name = \"petgraph\"\n-version = \"0.4.13\"\n+version = \"0.5.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"9c3659d1ee90221741f65dd128d9998311b0e40c5d3c23a62445938214abce4f\"\n+checksum = \"467d164a6de56270bd7c4d070df81d07beace25012d5103ced4e9ff08d6afdb7\"\n dependencies = [\n  \"fixedbitset\",\n- \"ordermap\",\n+ \"indexmap\",\n ]\n \n [[package]]\n@@ -3493,12 +3476,9 @@ dependencies = [\n \n [[package]]\n name = \"rustc-hash\"\n-version = \"1.0.1\"\n+version = \"1.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"7540fc8b0c49f096ee9c961cda096467dce8084bec6bdca2fc83895fd9b28cb8\"\n-dependencies = [\n- \"byteorder\",\n-]\n+checksum = \"08d43f7aa6b08d49f382cde6a7982047c3426db949b1424bc4b7ec9ae12c6ce2\"\n \n [[package]]\n name = \"rustc-main\"\n@@ -4367,7 +4347,6 @@ name = \"rustc_traits\"\n version = \"0.0.0\"\n dependencies = [\n  \"chalk-ir\",\n- \"chalk-rust-ir\",\n  \"chalk-solve\",\n  \"log\",\n  \"rustc_ast\","}, {"sha": "1c2fb90b2d8b47da9f92ee54dee4451087dbd383", "filename": "src/librustc_data_structures/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6aa2e9d97831fed07646419113173dd7283a756e/src%2Flibrustc_data_structures%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/6aa2e9d97831fed07646419113173dd7283a756e/src%2Flibrustc_data_structures%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2FCargo.toml?ref=6aa2e9d97831fed07646419113173dd7283a756e", "patch": "@@ -23,7 +23,7 @@ crossbeam-utils = { version = \"0.7\", features = [\"nightly\"] }\n stable_deref_trait = \"1.0.0\"\n rayon = { version = \"0.3.0\", package = \"rustc-rayon\" }\n rayon-core = { version = \"0.3.0\", package = \"rustc-rayon-core\" }\n-rustc-hash = \"1.0.1\"\n+rustc-hash = \"1.1.0\"\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n rustc_index = { path = \"../librustc_index\", package = \"rustc_index\" }\n bitflags = \"1.2.1\""}, {"sha": "8e809e338ea1cb076eb58f850d424d92ad01ac30", "filename": "src/librustc_middle/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6aa2e9d97831fed07646419113173dd7283a756e/src%2Flibrustc_middle%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/6aa2e9d97831fed07646419113173dd7283a756e/src%2Flibrustc_middle%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2FCargo.toml?ref=6aa2e9d97831fed07646419113173dd7283a756e", "patch": "@@ -30,7 +30,7 @@ rustc_serialize = { path = \"../librustc_serialize\" }\n rustc_ast = { path = \"../librustc_ast\" }\n rustc_span = { path = \"../librustc_span\" }\n byteorder = { version = \"1.3\" }\n-chalk-ir =      { git = \"https://github.com/rust-lang/chalk.git\", rev = \"3e9c2503ae9c5277c2acb74624dc267876dd89b3\" }\n+chalk-ir =      { git = \"https://github.com/rust-lang/chalk.git\", rev = \"f4977ab4c781e4f3b7fdb9310edbdab6daf56e29\" }\n #chalk-ir = \"0.10.0\"\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n measureme = \"0.7.1\""}, {"sha": "a97b6a3ea36259699b58e63dd1fef4122299d9c9", "filename": "src/librustc_middle/traits/chalk.rs", "status": "modified", "additions": 41, "deletions": 26, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/6aa2e9d97831fed07646419113173dd7283a756e/src%2Flibrustc_middle%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6aa2e9d97831fed07646419113173dd7283a756e/src%2Flibrustc_middle%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Ftraits%2Fchalk.rs?ref=6aa2e9d97831fed07646419113173dd7283a756e", "patch": "@@ -5,8 +5,6 @@\n //! its name suggest, is to provide an abstraction boundary for creating\n //! interned Chalk types.\n \n-use chalk_ir::{GoalData, Parameter};\n-\n use rustc_middle::ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n \n@@ -79,16 +77,19 @@ impl fmt::Debug for RustInterner<'_> {\n impl<'tcx> chalk_ir::interner::Interner for RustInterner<'tcx> {\n     type InternedType = Box<chalk_ir::TyData<Self>>;\n     type InternedLifetime = Box<chalk_ir::LifetimeData<Self>>;\n-    type InternedParameter = Box<chalk_ir::ParameterData<Self>>;\n+    type InternedConst = Box<chalk_ir::ConstData<Self>>;\n+    type InternedConcreteConst = u32;\n+    type InternedGenericArg = Box<chalk_ir::GenericArgData<Self>>;\n     type InternedGoal = Box<chalk_ir::GoalData<Self>>;\n     type InternedGoals = Vec<chalk_ir::Goal<Self>>;\n-    type InternedSubstitution = Vec<chalk_ir::Parameter<Self>>;\n+    type InternedSubstitution = Vec<chalk_ir::GenericArg<Self>>;\n     type InternedProgramClause = Box<chalk_ir::ProgramClauseData<Self>>;\n     type InternedProgramClauses = Vec<chalk_ir::ProgramClause<Self>>;\n     type InternedQuantifiedWhereClauses = Vec<chalk_ir::QuantifiedWhereClause<Self>>;\n-    type InternedParameterKinds = Vec<chalk_ir::ParameterKind<()>>;\n-    type InternedCanonicalVarKinds = Vec<chalk_ir::ParameterKind<chalk_ir::UniverseIndex>>;\n+    type InternedVariableKinds = Vec<chalk_ir::VariableKind<Self>>;\n+    type InternedCanonicalVarKinds = Vec<chalk_ir::CanonicalVarKind<Self>>;\n     type DefId = RustDefId;\n+    type InternedAdtId = RustDefId;\n     type Identifier = ();\n \n     fn debug_program_clause_implication(\n@@ -202,25 +203,39 @@ impl<'tcx> chalk_ir::interner::Interner for RustInterner<'tcx> {\n         &lifetime\n     }\n \n-    fn intern_parameter(\n+    fn intern_const(&self, constant: chalk_ir::ConstData<Self>) -> Self::InternedConst {\n+        Box::new(constant)\n+    }\n+\n+    fn const_data<'a>(&self, constant: &'a Self::InternedConst) -> &'a chalk_ir::ConstData<Self> {\n+        &constant\n+    }\n+\n+    fn const_eq(\n         &self,\n-        parameter: chalk_ir::ParameterData<Self>,\n-    ) -> Self::InternedParameter {\n-        Box::new(parameter)\n+        _ty: &Self::InternedType,\n+        c1: &Self::InternedConcreteConst,\n+        c2: &Self::InternedConcreteConst,\n+    ) -> bool {\n+        c1 == c2\n+    }\n+\n+    fn intern_generic_arg(&self, data: chalk_ir::GenericArgData<Self>) -> Self::InternedGenericArg {\n+        Box::new(data)\n     }\n \n-    fn parameter_data<'a>(\n+    fn generic_arg_data<'a>(\n         &self,\n-        parameter: &'a Self::InternedParameter,\n-    ) -> &'a chalk_ir::ParameterData<Self> {\n-        &parameter\n+        data: &'a Self::InternedGenericArg,\n+    ) -> &'a chalk_ir::GenericArgData<Self> {\n+        &data\n     }\n \n-    fn intern_goal(&self, goal: GoalData<Self>) -> Self::InternedGoal {\n+    fn intern_goal(&self, goal: chalk_ir::GoalData<Self>) -> Self::InternedGoal {\n         Box::new(goal)\n     }\n \n-    fn goal_data<'a>(&self, goal: &'a Self::InternedGoal) -> &'a GoalData<Self> {\n+    fn goal_data<'a>(&self, goal: &'a Self::InternedGoal) -> &'a chalk_ir::GoalData<Self> {\n         &goal\n     }\n \n@@ -237,15 +252,15 @@ impl<'tcx> chalk_ir::interner::Interner for RustInterner<'tcx> {\n \n     fn intern_substitution<E>(\n         &self,\n-        data: impl IntoIterator<Item = Result<chalk_ir::Parameter<Self>, E>>,\n+        data: impl IntoIterator<Item = Result<chalk_ir::GenericArg<Self>, E>>,\n     ) -> Result<Self::InternedSubstitution, E> {\n         data.into_iter().collect::<Result<Vec<_>, _>>()\n     }\n \n     fn substitution_data<'a>(\n         &self,\n         substitution: &'a Self::InternedSubstitution,\n-    ) -> &'a [Parameter<Self>] {\n+    ) -> &'a [chalk_ir::GenericArg<Self>] {\n         substitution\n     }\n \n@@ -291,31 +306,31 @@ impl<'tcx> chalk_ir::interner::Interner for RustInterner<'tcx> {\n         clauses\n     }\n \n-    fn intern_parameter_kinds<E>(\n+    fn intern_generic_arg_kinds<E>(\n         &self,\n-        data: impl IntoIterator<Item = Result<chalk_ir::ParameterKind<()>, E>>,\n-    ) -> Result<Self::InternedParameterKinds, E> {\n+        data: impl IntoIterator<Item = Result<chalk_ir::VariableKind<Self>, E>>,\n+    ) -> Result<Self::InternedVariableKinds, E> {\n         data.into_iter().collect::<Result<Vec<_>, _>>()\n     }\n \n-    fn parameter_kinds_data<'a>(\n+    fn variable_kinds_data<'a>(\n         &self,\n-        parameter_kinds: &'a Self::InternedParameterKinds,\n-    ) -> &'a [chalk_ir::ParameterKind<()>] {\n+        parameter_kinds: &'a Self::InternedVariableKinds,\n+    ) -> &'a [chalk_ir::VariableKind<Self>] {\n         parameter_kinds\n     }\n \n     fn intern_canonical_var_kinds<E>(\n         &self,\n-        data: impl IntoIterator<Item = Result<chalk_ir::ParameterKind<chalk_ir::UniverseIndex>, E>>,\n+        data: impl IntoIterator<Item = Result<chalk_ir::CanonicalVarKind<Self>, E>>,\n     ) -> Result<Self::InternedCanonicalVarKinds, E> {\n         data.into_iter().collect::<Result<Vec<_>, _>>()\n     }\n \n     fn canonical_var_kinds_data<'a>(\n         &self,\n         canonical_var_kinds: &'a Self::InternedCanonicalVarKinds,\n-    ) -> &'a [chalk_ir::ParameterKind<chalk_ir::UniverseIndex>] {\n+    ) -> &'a [chalk_ir::CanonicalVarKind<Self>] {\n         canonical_var_kinds\n     }\n }"}, {"sha": "c85cd1765ab43c97d00d614d20f56a52ec5219b8", "filename": "src/librustc_traits/Cargo.toml", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6aa2e9d97831fed07646419113173dd7283a756e/src%2Flibrustc_traits%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/6aa2e9d97831fed07646419113173dd7283a756e/src%2Flibrustc_traits%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2FCargo.toml?ref=6aa2e9d97831fed07646419113173dd7283a756e", "patch": "@@ -19,9 +19,8 @@ rustc_span = { path = \"../librustc_span\" }\n #chalk-ir = \"0.10.0\"\n #chalk-rust-ir = \"0.10.0\"\n #chalk-solve = \"0.10.0\"\n-chalk-solve =   { git = \"https://github.com/rust-lang/chalk.git\", rev = \"3e9c2503ae9c5277c2acb74624dc267876dd89b3\" }\n-chalk-rust-ir = { git = \"https://github.com/rust-lang/chalk.git\", rev = \"3e9c2503ae9c5277c2acb74624dc267876dd89b3\" }\n-chalk-ir =      { git = \"https://github.com/rust-lang/chalk.git\", rev = \"3e9c2503ae9c5277c2acb74624dc267876dd89b3\" }\n+chalk-solve =   { git = \"https://github.com/rust-lang/chalk.git\", rev = \"f4977ab4c781e4f3b7fdb9310edbdab6daf56e29\" }\n+chalk-ir =      { git = \"https://github.com/rust-lang/chalk.git\", rev = \"f4977ab4c781e4f3b7fdb9310edbdab6daf56e29\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n rustc_infer = { path = \"../librustc_infer\" }\n rustc_trait_selection = { path = \"../librustc_trait_selection\" }"}, {"sha": "15125c33f1f530f31e45bfdeea7a7e7fa51ff34e", "filename": "src/librustc_traits/chalk/db.rs", "status": "modified", "additions": 95, "deletions": 66, "changes": 161, "blob_url": "https://github.com/rust-lang/rust/blob/6aa2e9d97831fed07646419113173dd7283a756e/src%2Flibrustc_traits%2Fchalk%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6aa2e9d97831fed07646419113173dd7283a756e/src%2Flibrustc_traits%2Fchalk%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk%2Fdb.rs?ref=6aa2e9d97831fed07646419113173dd7283a756e", "patch": "@@ -38,7 +38,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n     fn associated_ty_data(\n         &self,\n         assoc_type_id: chalk_ir::AssocTypeId<RustInterner<'tcx>>,\n-    ) -> Arc<chalk_rust_ir::AssociatedTyDatum<RustInterner<'tcx>>> {\n+    ) -> Arc<chalk_solve::rust_ir::AssociatedTyDatum<RustInterner<'tcx>>> {\n         let def_id = match assoc_type_id.0 {\n             RustDefId::AssocTy(def_id) => def_id,\n             _ => bug!(\"Did not use `AssocTy` variant when expecting associated type.\"),\n@@ -63,21 +63,21 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n             .map(|(wc, _)| wc.subst(self.tcx, &bound_vars))\n             .filter_map(|wc| LowerInto::<Option<chalk_ir::QuantifiedWhereClause<RustInterner<'tcx>>>>::lower_into(wc, &self.interner)).collect();\n \n-        Arc::new(chalk_rust_ir::AssociatedTyDatum {\n+        Arc::new(chalk_solve::rust_ir::AssociatedTyDatum {\n             trait_id: chalk_ir::TraitId(RustDefId::Trait(trait_def_id)),\n             id: assoc_type_id,\n             name: (),\n             binders: chalk_ir::Binders::new(\n                 binders,\n-                chalk_rust_ir::AssociatedTyDatumBound { bounds: vec![], where_clauses },\n+                chalk_solve::rust_ir::AssociatedTyDatumBound { bounds: vec![], where_clauses },\n             ),\n         })\n     }\n \n     fn trait_datum(\n         &self,\n         trait_id: chalk_ir::TraitId<RustInterner<'tcx>>,\n-    ) -> Arc<chalk_rust_ir::TraitDatum<RustInterner<'tcx>>> {\n+    ) -> Arc<chalk_solve::rust_ir::TraitDatum<RustInterner<'tcx>>> {\n         let def_id = match trait_id.0 {\n             RustDefId::Trait(def_id) => def_id,\n             _ => bug!(\"Did not use `Trait` variant when expecting trait.\"),\n@@ -94,21 +94,21 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n \n         let well_known =\n             if self.tcx.lang_items().sized_trait().map(|t| def_id == t).unwrap_or(false) {\n-                Some(chalk_rust_ir::WellKnownTrait::SizedTrait)\n+                Some(chalk_solve::rust_ir::WellKnownTrait::SizedTrait)\n             } else if self.tcx.lang_items().copy_trait().map(|t| def_id == t).unwrap_or(false) {\n-                Some(chalk_rust_ir::WellKnownTrait::CopyTrait)\n+                Some(chalk_solve::rust_ir::WellKnownTrait::CopyTrait)\n             } else if self.tcx.lang_items().clone_trait().map(|t| def_id == t).unwrap_or(false) {\n-                Some(chalk_rust_ir::WellKnownTrait::CloneTrait)\n+                Some(chalk_solve::rust_ir::WellKnownTrait::CloneTrait)\n             } else {\n                 None\n             };\n-        Arc::new(chalk_rust_ir::TraitDatum {\n+        Arc::new(chalk_solve::rust_ir::TraitDatum {\n             id: trait_id,\n             binders: chalk_ir::Binders::new(\n                 binders,\n-                chalk_rust_ir::TraitDatumBound { where_clauses },\n+                chalk_solve::rust_ir::TraitDatumBound { where_clauses },\n             ),\n-            flags: chalk_rust_ir::TraitFlags {\n+            flags: chalk_solve::rust_ir::TraitFlags {\n                 auto: trait_def.has_auto_impl,\n                 marker: trait_def.is_marker,\n                 upstream: !def_id.is_local(),\n@@ -121,10 +121,10 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n         })\n     }\n \n-    fn struct_datum(\n+    fn adt_datum(\n         &self,\n-        struct_id: chalk_ir::StructId<RustInterner<'tcx>>,\n-    ) -> Arc<chalk_rust_ir::StructDatum<RustInterner<'tcx>>> {\n+        struct_id: chalk_ir::AdtId<RustInterner<'tcx>>,\n+    ) -> Arc<chalk_solve::rust_ir::AdtDatum<RustInterner<'tcx>>> {\n         match struct_id.0 {\n             RustDefId::Adt(adt_def_id) => {\n                 let adt_def = self.tcx.adt_def(adt_def_id);\n@@ -155,47 +155,64 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n                     // FIXME(chalk): handle enums; force_impl_for requires this\n                     ty::AdtKind::Enum => vec![],\n                 };\n-                let struct_datum = Arc::new(chalk_rust_ir::StructDatum {\n+                let struct_datum = Arc::new(chalk_solve::rust_ir::AdtDatum {\n                     id: struct_id,\n                     binders: chalk_ir::Binders::new(\n                         binders,\n-                        chalk_rust_ir::StructDatumBound { fields, where_clauses },\n+                        chalk_solve::rust_ir::AdtDatumBound { fields, where_clauses },\n                     ),\n-                    flags: chalk_rust_ir::StructFlags {\n+                    flags: chalk_solve::rust_ir::AdtFlags {\n                         upstream: !adt_def_id.is_local(),\n                         fundamental: adt_def.is_fundamental(),\n                     },\n                 });\n                 struct_datum\n             }\n-            RustDefId::Array => Arc::new(chalk_rust_ir::StructDatum {\n-                id: struct_id,\n-                binders: chalk_ir::Binders::new(\n-                    chalk_ir::ParameterKinds::from(\n-                        &self.interner,\n-                        Some(chalk_ir::ParameterKind::Ty(())),\n+            RustDefId::Array => {\n+                return Arc::new(chalk_solve::rust_ir::AdtDatum {\n+                    id: struct_id,\n+                    binders: chalk_ir::Binders::new(\n+                        chalk_ir::VariableKinds::from(\n+                            &self.interner,\n+                            Some(chalk_ir::VariableKind::Ty(chalk_ir::TyKind::General)),\n+                        ),\n+                        chalk_solve::rust_ir::AdtDatumBound {\n+                            fields: vec![],\n+                            where_clauses: vec![],\n+                        },\n+                    ),\n+                    flags: chalk_solve::rust_ir::AdtFlags { upstream: false, fundamental: false },\n+                });\n+            }\n+            RustDefId::Never | RustDefId::FnDef(_) => {\n+                return Arc::new(chalk_solve::rust_ir::AdtDatum {\n+                    id: struct_id,\n+                    binders: chalk_ir::Binders::new(\n+                        chalk_ir::VariableKinds::new(&self.interner),\n+                        chalk_solve::rust_ir::AdtDatumBound {\n+                            fields: vec![],\n+                            where_clauses: vec![],\n+                        },\n                     ),\n-                    chalk_rust_ir::StructDatumBound { fields: vec![], where_clauses: vec![] },\n-                ),\n-                flags: chalk_rust_ir::StructFlags { upstream: false, fundamental: false },\n-            }),\n-            RustDefId::Never | RustDefId::FnDef(_) => Arc::new(chalk_rust_ir::StructDatum {\n-                id: struct_id,\n-                binders: chalk_ir::Binders::new(\n-                    chalk_ir::ParameterKinds::new(&self.interner),\n-                    chalk_rust_ir::StructDatumBound { fields: vec![], where_clauses: vec![] },\n-                ),\n-                flags: chalk_rust_ir::StructFlags { upstream: false, fundamental: false },\n-            }),\n+                    flags: chalk_solve::rust_ir::AdtFlags { upstream: false, fundamental: false },\n+                });\n+            }\n \n             v => bug!(\"Used not struct variant ({:?}) when expecting struct variant.\", v),\n         }\n     }\n \n+    fn fn_def_datum(\n+        &self,\n+        _fn_def_id: chalk_ir::FnDefId<RustInterner<'tcx>>,\n+    ) -> Arc<chalk_solve::rust_ir::FnDefDatum<RustInterner<'tcx>>> {\n+        unimplemented!()\n+    }\n+\n     fn impl_datum(\n         &self,\n         impl_id: chalk_ir::ImplId<RustInterner<'tcx>>,\n-    ) -> Arc<chalk_rust_ir::ImplDatum<RustInterner<'tcx>>> {\n+    ) -> Arc<chalk_solve::rust_ir::ImplDatum<RustInterner<'tcx>>> {\n         let def_id = match impl_id.0 {\n             RustDefId::Impl(def_id) => def_id,\n             _ => bug!(\"Did not use `Impl` variant when expecting impl.\"),\n@@ -212,23 +229,23 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n             .map(|(wc, _)| wc.subst(self.tcx, bound_vars))\n             .filter_map(|wc| LowerInto::<Option<chalk_ir::QuantifiedWhereClause<RustInterner<'tcx>>>>::lower_into(wc, &self.interner)).collect();\n \n-        let value = chalk_rust_ir::ImplDatumBound {\n+        let value = chalk_solve::rust_ir::ImplDatumBound {\n             trait_ref: trait_ref.lower_into(&self.interner),\n             where_clauses,\n         };\n \n-        Arc::new(chalk_rust_ir::ImplDatum {\n-            polarity: chalk_rust_ir::Polarity::Positive,\n+        Arc::new(chalk_solve::rust_ir::ImplDatum {\n+            polarity: chalk_solve::rust_ir::Polarity::Positive,\n             binders: chalk_ir::Binders::new(binders, value),\n-            impl_type: chalk_rust_ir::ImplType::Local,\n+            impl_type: chalk_solve::rust_ir::ImplType::Local,\n             associated_ty_value_ids: vec![],\n         })\n     }\n \n     fn impls_for_trait(\n         &self,\n         trait_id: chalk_ir::TraitId<RustInterner<'tcx>>,\n-        parameters: &[chalk_ir::Parameter<RustInterner<'tcx>>],\n+        parameters: &[chalk_ir::GenericArg<RustInterner<'tcx>>],\n     ) -> Vec<chalk_ir::ImplId<RustInterner<'tcx>>> {\n         let def_id: DefId = match trait_id.0 {\n             RustDefId::Trait(def_id) => def_id,\n@@ -261,7 +278,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n     fn impl_provided_for(\n         &self,\n         auto_trait_id: chalk_ir::TraitId<RustInterner<'tcx>>,\n-        struct_id: chalk_ir::StructId<RustInterner<'tcx>>,\n+        struct_id: chalk_ir::AdtId<RustInterner<'tcx>>,\n     ) -> bool {\n         let trait_def_id: DefId = match auto_trait_id.0 {\n             RustDefId::Trait(def_id) => def_id,\n@@ -296,8 +313,8 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n \n     fn associated_ty_value(\n         &self,\n-        associated_ty_id: chalk_rust_ir::AssociatedTyValueId<RustInterner<'tcx>>,\n-    ) -> Arc<chalk_rust_ir::AssociatedTyValue<RustInterner<'tcx>>> {\n+        associated_ty_id: chalk_solve::rust_ir::AssociatedTyValueId<RustInterner<'tcx>>,\n+    ) -> Arc<chalk_solve::rust_ir::AssociatedTyValue<RustInterner<'tcx>>> {\n         let def_id = match associated_ty_id.0 {\n             RustDefId::AssocTy(def_id) => def_id,\n             _ => bug!(\"Did not use `AssocTy` variant when expecting associated type.\"),\n@@ -315,12 +332,12 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n         let binders = binders_for(&self.interner, bound_vars);\n         let ty = self.tcx.type_of(def_id);\n \n-        Arc::new(chalk_rust_ir::AssociatedTyValue {\n+        Arc::new(chalk_solve::rust_ir::AssociatedTyValue {\n             impl_id: chalk_ir::ImplId(RustDefId::Impl(impl_id)),\n             associated_ty_id: chalk_ir::AssocTypeId(RustDefId::AssocTy(def_id)),\n             value: chalk_ir::Binders::new(\n                 binders,\n-                chalk_rust_ir::AssociatedTyValueBound { ty: ty.lower_into(&self.interner) },\n+                chalk_solve::rust_ir::AssociatedTyValueBound { ty: ty.lower_into(&self.interner) },\n             ),\n         })\n     }\n@@ -339,17 +356,17 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n     fn opaque_ty_data(\n         &self,\n         opaque_ty_id: chalk_ir::OpaqueTyId<RustInterner<'tcx>>,\n-    ) -> Arc<chalk_rust_ir::OpaqueTyDatum<RustInterner<'tcx>>> {\n+    ) -> Arc<chalk_solve::rust_ir::OpaqueTyDatum<RustInterner<'tcx>>> {\n         // FIXME(chalk): actually lower opaque ty\n         let hidden_ty =\n             self.tcx.mk_ty(ty::Tuple(self.tcx.intern_substs(&[]))).lower_into(&self.interner);\n-        let value = chalk_rust_ir::OpaqueTyDatumBound {\n+        let value = chalk_solve::rust_ir::OpaqueTyDatumBound {\n             hidden_ty,\n-            bounds: chalk_ir::Binders::new(chalk_ir::ParameterKinds::new(&self.interner), vec![]),\n+            bounds: chalk_ir::Binders::new(chalk_ir::VariableKinds::new(&self.interner), vec![]),\n         };\n-        Arc::new(chalk_rust_ir::OpaqueTyDatum {\n+        Arc::new(chalk_solve::rust_ir::OpaqueTyDatum {\n             opaque_ty_id,\n-            bound: chalk_ir::Binders::new(chalk_ir::ParameterKinds::new(&self.interner), value),\n+            bound: chalk_ir::Binders::new(chalk_ir::VariableKinds::new(&self.interner), value),\n         })\n     }\n \n@@ -358,14 +375,14 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n     /// `None` and eventually this function will be removed.\n     fn force_impl_for(\n         &self,\n-        well_known: chalk_rust_ir::WellKnownTrait,\n+        well_known: chalk_solve::rust_ir::WellKnownTrait,\n         ty: &chalk_ir::TyData<RustInterner<'tcx>>,\n     ) -> Option<bool> {\n         use chalk_ir::TyData::*;\n         match well_known {\n-            chalk_rust_ir::WellKnownTrait::SizedTrait => match ty {\n+            chalk_solve::rust_ir::WellKnownTrait::SizedTrait => match ty {\n                 Apply(apply) => match apply.name {\n-                    chalk_ir::TypeName::Struct(chalk_ir::StructId(rust_def_id)) => {\n+                    chalk_ir::TypeName::Adt(chalk_ir::AdtId(rust_def_id)) => {\n                         use rustc_middle::traits::ChalkRustDefId::*;\n                         match rust_def_id {\n                             Never | Array | FnDef(_) => Some(true),\n@@ -390,13 +407,17 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n                     }\n                     _ => None,\n                 },\n-                Dyn(_) | Alias(_) | Placeholder(_) | Function(_) | InferenceVar(_)\n+                Dyn(_)\n+                | Alias(_)\n+                | Placeholder(_)\n+                | Function(_)\n+                | InferenceVar(_, _)\n                 | BoundVar(_) => None,\n             },\n-            chalk_rust_ir::WellKnownTrait::CopyTrait\n-            | chalk_rust_ir::WellKnownTrait::CloneTrait => match ty {\n+            chalk_solve::rust_ir::WellKnownTrait::CopyTrait\n+            | chalk_solve::rust_ir::WellKnownTrait::CloneTrait => match ty {\n                 Apply(apply) => match apply.name {\n-                    chalk_ir::TypeName::Struct(chalk_ir::StructId(rust_def_id)) => {\n+                    chalk_ir::TypeName::Adt(chalk_ir::AdtId(rust_def_id)) => {\n                         use rustc_middle::traits::ChalkRustDefId::*;\n                         match rust_def_id {\n                             Never => Some(false),\n@@ -420,10 +441,14 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n                     }\n                     _ => None,\n                 },\n-                Dyn(_) | Alias(_) | Placeholder(_) | Function(_) | InferenceVar(_)\n+                Dyn(_)\n+                | Alias(_)\n+                | Placeholder(_)\n+                | Function(_)\n+                | InferenceVar(_, _)\n                 | BoundVar(_) => None,\n             },\n-            chalk_rust_ir::WellKnownTrait::DropTrait => None,\n+            chalk_solve::rust_ir::WellKnownTrait::DropTrait => None,\n         }\n     }\n \n@@ -436,9 +461,9 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n \n     fn well_known_trait_id(\n         &self,\n-        well_known_trait: chalk_rust_ir::WellKnownTrait,\n+        well_known_trait: chalk_solve::rust_ir::WellKnownTrait,\n     ) -> Option<chalk_ir::TraitId<RustInterner<'tcx>>> {\n-        use chalk_rust_ir::WellKnownTrait::*;\n+        use chalk_solve::rust_ir::WellKnownTrait::*;\n         let t = match well_known_trait {\n             SizedTrait => self\n                 .tcx\n@@ -512,13 +537,17 @@ fn bound_vars_for_item(tcx: TyCtxt<'tcx>, def_id: DefId) -> SubstsRef<'tcx> {\n fn binders_for<'tcx>(\n     interner: &RustInterner<'tcx>,\n     bound_vars: SubstsRef<'tcx>,\n-) -> chalk_ir::ParameterKinds<RustInterner<'tcx>> {\n-    chalk_ir::ParameterKinds::from(\n+) -> chalk_ir::VariableKinds<RustInterner<'tcx>> {\n+    chalk_ir::VariableKinds::from(\n         interner,\n         bound_vars.iter().map(|arg| match arg.unpack() {\n-            ty::subst::GenericArgKind::Lifetime(_re) => chalk_ir::ParameterKind::Lifetime(()),\n-            ty::subst::GenericArgKind::Type(_ty) => chalk_ir::ParameterKind::Ty(()),\n-            ty::subst::GenericArgKind::Const(_const) => chalk_ir::ParameterKind::Ty(()),\n+            ty::subst::GenericArgKind::Lifetime(_re) => chalk_ir::VariableKind::Lifetime,\n+            ty::subst::GenericArgKind::Type(_ty) => {\n+                chalk_ir::VariableKind::Ty(chalk_ir::TyKind::General)\n+            }\n+            ty::subst::GenericArgKind::Const(_const) => {\n+                chalk_ir::VariableKind::Ty(chalk_ir::TyKind::General)\n+            }\n         }),\n     )\n }"}, {"sha": "01b7d0208e71bf26eb59eb4730f94fd10064e337", "filename": "src/librustc_traits/chalk/lowering.rs", "status": "modified", "additions": 30, "deletions": 28, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/6aa2e9d97831fed07646419113173dd7283a756e/src%2Flibrustc_traits%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6aa2e9d97831fed07646419113173dd7283a756e/src%2Flibrustc_traits%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk%2Flowering.rs?ref=6aa2e9d97831fed07646419113173dd7283a756e", "patch": "@@ -274,7 +274,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Ty<RustInterner<'tcx>>> for Ty<'tcx> {\n         use TyKind::*;\n \n         let empty = || chalk_ir::Substitution::empty(interner);\n-        let struct_ty = |def_id| chalk_ir::TypeName::Struct(chalk_ir::StructId(def_id));\n+        let struct_ty = |def_id| chalk_ir::TypeName::Adt(chalk_ir::AdtId(def_id));\n         let apply = |name, substitution| {\n             TyData::Apply(chalk_ir::ApplicationTy { name, substitution }).intern(interner)\n         };\n@@ -314,14 +314,14 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Ty<RustInterner<'tcx>>> for Ty<'tcx> {\n                 struct_ty(RustDefId::Array),\n                 chalk_ir::Substitution::from1(\n                     interner,\n-                    chalk_ir::ParameterKind::Ty(ty.lower_into(interner)).intern(interner),\n+                    chalk_ir::GenericArgData::Ty(ty.lower_into(interner)).intern(interner),\n                 ),\n             ),\n             Slice(ty) => apply(\n                 chalk_ir::TypeName::Slice,\n                 chalk_ir::Substitution::from1(\n                     interner,\n-                    chalk_ir::ParameterKind::Ty(ty.lower_into(interner)).intern(interner),\n+                    chalk_ir::GenericArgData::Ty(ty.lower_into(interner)).intern(interner),\n                 ),\n             ),\n             RawPtr(ptr) => {\n@@ -341,9 +341,9 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Ty<RustInterner<'tcx>>> for Ty<'tcx> {\n                     chalk_ir::Substitution::from(\n                         interner,\n                         &[\n-                            chalk_ir::ParameterKind::Lifetime(region.lower_into(interner))\n+                            chalk_ir::GenericArgData::Lifetime(region.lower_into(interner))\n                                 .intern(interner),\n-                            chalk_ir::ParameterKind::Ty(ty.lower_into(interner)).intern(interner),\n+                            chalk_ir::GenericArgData::Ty(ty.lower_into(interner)).intern(interner),\n                         ],\n                     ),\n                 )\n@@ -357,7 +357,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Ty<RustInterner<'tcx>>> for Ty<'tcx> {\n                     substitution: chalk_ir::Substitution::from(\n                         interner,\n                         inputs_and_outputs.iter().map(|ty| {\n-                            chalk_ir::ParameterKind::Ty(ty.lower_into(interner)).intern(interner)\n+                            chalk_ir::GenericArgData::Ty(ty.lower_into(interner)).intern(interner)\n                         }),\n                     ),\n                 })\n@@ -439,16 +439,16 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Lifetime<RustInterner<'tcx>>> for Region<'t\n     }\n }\n \n-impl<'tcx> LowerInto<'tcx, chalk_ir::Parameter<RustInterner<'tcx>>> for GenericArg<'tcx> {\n-    fn lower_into(self, interner: &RustInterner<'tcx>) -> chalk_ir::Parameter<RustInterner<'tcx>> {\n+impl<'tcx> LowerInto<'tcx, chalk_ir::GenericArg<RustInterner<'tcx>>> for GenericArg<'tcx> {\n+    fn lower_into(self, interner: &RustInterner<'tcx>) -> chalk_ir::GenericArg<RustInterner<'tcx>> {\n         match self.unpack() {\n             ty::subst::GenericArgKind::Type(ty) => {\n-                chalk_ir::ParameterKind::Ty(ty.lower_into(interner))\n+                chalk_ir::GenericArgData::Ty(ty.lower_into(interner))\n             }\n             ty::subst::GenericArgKind::Lifetime(lifetime) => {\n-                chalk_ir::ParameterKind::Lifetime(lifetime.lower_into(interner))\n+                chalk_ir::GenericArgData::Lifetime(lifetime.lower_into(interner))\n             }\n-            ty::subst::GenericArgKind::Const(_) => chalk_ir::ParameterKind::Ty(\n+            ty::subst::GenericArgKind::Const(_) => chalk_ir::GenericArgData::Ty(\n                 chalk_ir::TyData::Apply(chalk_ir::ApplicationTy {\n                     name: chalk_ir::TypeName::Tuple(0),\n                     substitution: chalk_ir::Substitution::empty(interner),\n@@ -507,7 +507,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Binders<chalk_ir::QuantifiedWhereClauses<Ru\n         let where_clauses = predicates.into_iter().map(|predicate| match predicate {\n             ty::ExistentialPredicate::Trait(ty::ExistentialTraitRef { def_id, substs }) => {\n                 chalk_ir::Binders::new(\n-                    chalk_ir::ParameterKinds::new(interner),\n+                    chalk_ir::VariableKinds::new(interner),\n                     chalk_ir::WhereClause::Implemented(chalk_ir::TraitRef {\n                         trait_id: chalk_ir::TraitId(RustDefId::Trait(*def_id)),\n                         substitution: substs.lower_into(interner),\n@@ -516,7 +516,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Binders<chalk_ir::QuantifiedWhereClauses<Ru\n             }\n             ty::ExistentialPredicate::Projection(_predicate) => unimplemented!(),\n             ty::ExistentialPredicate::AutoTrait(def_id) => chalk_ir::Binders::new(\n-                chalk_ir::ParameterKinds::new(interner),\n+                chalk_ir::VariableKinds::new(interner),\n                 chalk_ir::WhereClause::Implemented(chalk_ir::TraitRef {\n                     trait_id: chalk_ir::TraitId(RustDefId::Trait(*def_id)),\n                     substitution: chalk_ir::Substitution::empty(interner),\n@@ -541,7 +541,7 @@ crate fn collect_bound_vars<'a, 'tcx, T: TypeFoldable<'tcx>>(\n     interner: &RustInterner<'tcx>,\n     tcx: TyCtxt<'tcx>,\n     ty: &'a Binder<T>,\n-) -> (T, chalk_ir::ParameterKinds<RustInterner<'tcx>>, BTreeMap<DefId, u32>) {\n+) -> (T, chalk_ir::VariableKinds<RustInterner<'tcx>>, BTreeMap<DefId, u32>) {\n     let mut bound_vars_collector = BoundVarsCollector::new();\n     ty.skip_binder().visit_with(&mut bound_vars_collector);\n     let mut parameters = bound_vars_collector.parameters;\n@@ -556,25 +556,25 @@ crate fn collect_bound_vars<'a, 'tcx, T: TypeFoldable<'tcx>>(\n     let new_ty = ty.skip_binder().fold_with(&mut bound_var_substitutor);\n \n     for var in named_parameters.values() {\n-        parameters.insert(*var, chalk_ir::ParameterKind::Lifetime(()));\n+        parameters.insert(*var, chalk_ir::VariableKind::Lifetime);\n     }\n \n     (0..parameters.len()).for_each(|i| {\n         parameters.get(&(i as u32)).expect(\"Skipped bound var index.\");\n     });\n \n-    let binders = chalk_ir::ParameterKinds::from(interner, parameters.into_iter().map(|(_, v)| v));\n+    let binders = chalk_ir::VariableKinds::from(interner, parameters.into_iter().map(|(_, v)| v));\n \n     (new_ty, binders, named_parameters)\n }\n \n-crate struct BoundVarsCollector {\n+crate struct BoundVarsCollector<'tcx> {\n     binder_index: ty::DebruijnIndex,\n-    crate parameters: BTreeMap<u32, chalk_ir::ParameterKind<()>>,\n+    crate parameters: BTreeMap<u32, chalk_ir::VariableKind<RustInterner<'tcx>>>,\n     crate named_parameters: Vec<DefId>,\n }\n \n-impl BoundVarsCollector {\n+impl<'tcx> BoundVarsCollector<'tcx> {\n     crate fn new() -> Self {\n         BoundVarsCollector {\n             binder_index: ty::INNERMOST,\n@@ -584,7 +584,7 @@ impl BoundVarsCollector {\n     }\n }\n \n-impl<'tcx> TypeVisitor<'tcx> for BoundVarsCollector {\n+impl<'tcx> TypeVisitor<'tcx> for BoundVarsCollector<'tcx> {\n     fn visit_binder<T: TypeFoldable<'tcx>>(&mut self, t: &Binder<T>) -> bool {\n         self.binder_index.shift_in(1);\n         let result = t.super_visit_with(self);\n@@ -597,11 +597,12 @@ impl<'tcx> TypeVisitor<'tcx> for BoundVarsCollector {\n             ty::Bound(debruijn, bound_ty) if debruijn == self.binder_index => {\n                 match self.parameters.entry(bound_ty.var.as_u32()) {\n                     Entry::Vacant(entry) => {\n-                        entry.insert(chalk_ir::ParameterKind::Ty(()));\n-                    }\n-                    Entry::Occupied(entry) => {\n-                        entry.get().assert_ty_ref();\n+                        entry.insert(chalk_ir::VariableKind::Ty(chalk_ir::TyKind::General));\n                     }\n+                    Entry::Occupied(entry) => match entry.get() {\n+                        chalk_ir::VariableKind::Ty(_) => {}\n+                        _ => panic!(),\n+                    },\n                 }\n             }\n \n@@ -622,11 +623,12 @@ impl<'tcx> TypeVisitor<'tcx> for BoundVarsCollector {\n \n                 ty::BoundRegion::BrAnon(var) => match self.parameters.entry(*var) {\n                     Entry::Vacant(entry) => {\n-                        entry.insert(chalk_ir::ParameterKind::Lifetime(()));\n-                    }\n-                    Entry::Occupied(entry) => {\n-                        entry.get().assert_lifetime_ref();\n+                        entry.insert(chalk_ir::VariableKind::Lifetime);\n                     }\n+                    Entry::Occupied(entry) => match entry.get() {\n+                        chalk_ir::VariableKind::Lifetime => {}\n+                        _ => panic!(),\n+                    },\n                 },\n \n                 ty::BrEnv => unimplemented!(),"}, {"sha": "bfaa161f7aa76b6588c9e73bfaddd887ebe7ba59", "filename": "src/librustc_traits/chalk/mod.rs", "status": "modified", "additions": 24, "deletions": 22, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/6aa2e9d97831fed07646419113173dd7283a756e/src%2Flibrustc_traits%2Fchalk%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6aa2e9d97831fed07646419113173dd7283a756e/src%2Flibrustc_traits%2Fchalk%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk%2Fmod.rs?ref=6aa2e9d97831fed07646419113173dd7283a756e", "patch": "@@ -55,25 +55,23 @@ crate fn evaluate_goal<'tcx>(\n                     CanonicalVarKind::PlaceholderTy(_ty) => unimplemented!(),\n                     CanonicalVarKind::PlaceholderRegion(_ui) => unimplemented!(),\n                     CanonicalVarKind::Ty(ty) => match ty {\n-                        CanonicalTyVarKind::General(ui) => {\n-                            chalk_ir::ParameterKind::Ty(chalk_ir::UniverseIndex {\n-                                counter: ui.index(),\n-                            })\n-                        }\n-                        CanonicalTyVarKind::Int | CanonicalTyVarKind::Float => {\n-                            // FIXME(chalk) - this is actually really important\n-                            // These variable kinds put some limits on the\n-                            // types that can be substituted (floats or ints).\n-                            // While it's unclear exactly the design here, we\n-                            // probably want some way to \"register\" these.\n-                            chalk_ir::ParameterKind::Ty(chalk_ir::UniverseIndex::root())\n-                        }\n+                        CanonicalTyVarKind::General(ui) => chalk_ir::WithKind::new(\n+                            chalk_ir::VariableKind::Ty(chalk_ir::TyKind::General),\n+                            chalk_ir::UniverseIndex { counter: ui.index() },\n+                        ),\n+                        CanonicalTyVarKind::Int => chalk_ir::WithKind::new(\n+                            chalk_ir::VariableKind::Ty(chalk_ir::TyKind::Integer),\n+                            chalk_ir::UniverseIndex::root(),\n+                        ),\n+                        CanonicalTyVarKind::Float => chalk_ir::WithKind::new(\n+                            chalk_ir::VariableKind::Ty(chalk_ir::TyKind::Float),\n+                            chalk_ir::UniverseIndex::root(),\n+                        ),\n                     },\n-                    CanonicalVarKind::Region(ui) => {\n-                        chalk_ir::ParameterKind::Lifetime(chalk_ir::UniverseIndex {\n-                            counter: ui.index(),\n-                        })\n-                    }\n+                    CanonicalVarKind::Region(ui) => chalk_ir::WithKind::new(\n+                        chalk_ir::VariableKind::Lifetime,\n+                        chalk_ir::UniverseIndex { counter: ui.index() },\n+                    ),\n                     CanonicalVarKind::Const(_ui) => unimplemented!(),\n                     CanonicalVarKind::PlaceholderConst(_pc) => unimplemented!(),\n                 }),\n@@ -101,14 +99,14 @@ crate fn evaluate_goal<'tcx>(\n             // essentially inverse of lowering a `GenericArg`.\n             let _data = p.data(&interner);\n             match _data {\n-                chalk_ir::ParameterKind::Ty(_t) => {\n+                chalk_ir::GenericArgData::Ty(_t) => {\n                     use chalk_ir::TyData;\n                     use rustc_ast::ast;\n \n                     let _data = _t.data(&interner);\n                     let kind = match _data {\n                         TyData::Apply(_application_ty) => match _application_ty.name {\n-                            chalk_ir::TypeName::Struct(_struct_id) => match _struct_id.0 {\n+                            chalk_ir::TypeName::Adt(_struct_id) => match _struct_id.0 {\n                                 RustDefId::Adt(_) => unimplemented!(),\n                                 RustDefId::Never => unimplemented!(),\n                                 RustDefId::Array => unimplemented!(),\n@@ -139,6 +137,9 @@ crate fn evaluate_goal<'tcx>(\n                                     chalk_ir::FloatTy::F64 => ty::Float(ast::FloatTy::F64),\n                                 },\n                             },\n+                            chalk_ir::TypeName::Array => unimplemented!(),\n+                            chalk_ir::TypeName::FnDef(_) => unimplemented!(),\n+                            chalk_ir::TypeName::Never => unimplemented!(),\n                             chalk_ir::TypeName::Tuple(_size) => unimplemented!(),\n                             chalk_ir::TypeName::Slice => unimplemented!(),\n                             chalk_ir::TypeName::Raw(_) => unimplemented!(),\n@@ -160,14 +161,14 @@ crate fn evaluate_goal<'tcx>(\n                                 kind: ty::BoundTyKind::Anon,\n                             },\n                         ),\n-                        TyData::InferenceVar(_) => unimplemented!(),\n+                        TyData::InferenceVar(_, _) => unimplemented!(),\n                         TyData::Dyn(_) => unimplemented!(),\n                     };\n                     let _ty: Ty<'_> = tcx.mk_ty(kind);\n                     let _arg: GenericArg<'_> = _ty.into();\n                     var_values.push(_arg);\n                 }\n-                chalk_ir::ParameterKind::Lifetime(_l) => {\n+                chalk_ir::GenericArgData::Lifetime(_l) => {\n                     let _data = _l.data(&interner);\n                     let _lifetime: Region<'_> = match _data {\n                         chalk_ir::LifetimeData::BoundVar(_var) => {\n@@ -185,6 +186,7 @@ crate fn evaluate_goal<'tcx>(\n                     let _arg: GenericArg<'_> = _lifetime.into();\n                     var_values.push(_arg);\n                 }\n+                chalk_ir::GenericArgData::Const(_) => unimplemented!(),\n             }\n         });\n         let sol = Canonical {"}]}