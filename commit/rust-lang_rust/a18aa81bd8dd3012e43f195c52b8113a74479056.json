{"sha": "a18aa81bd8dd3012e43f195c52b8113a74479056", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExOGFhODFiZDhkZDMwMTJlNDNmMTk1YzUyYjgxMTNhNzQ0NzkwNTY=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-03-06T19:17:03Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-03-16T08:42:34Z"}, "message": "Remove Q parameter from alloc_self_profile_query_strings_for_query_cache.", "tree": {"sha": "667ba1613defec9a4e70162d50bce74cb74fdc15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/667ba1613defec9a4e70162d50bce74cb74fdc15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a18aa81bd8dd3012e43f195c52b8113a74479056", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a18aa81bd8dd3012e43f195c52b8113a74479056", "html_url": "https://github.com/rust-lang/rust/commit/a18aa81bd8dd3012e43f195c52b8113a74479056", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a18aa81bd8dd3012e43f195c52b8113a74479056/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa02dca428314676716c78b5aa1953eea1627bf0", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa02dca428314676716c78b5aa1953eea1627bf0", "html_url": "https://github.com/rust-lang/rust/commit/fa02dca428314676716c78b5aa1953eea1627bf0"}], "stats": {"total": 13, "additions": 7, "deletions": 6}, "files": [{"sha": "98d8de89d8e9e924bd6f56af7d175661b87bd3fd", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a18aa81bd8dd3012e43f195c52b8113a74479056/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a18aa81bd8dd3012e43f195c52b8113a74479056/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=a18aa81bd8dd3012e43f195c52b8113a74479056", "patch": "@@ -1043,7 +1043,7 @@ macro_rules! define_queries_inner {\n                 let mut string_cache = QueryKeyStringCache::new();\n \n                 $({\n-                    alloc_self_profile_query_strings_for_query_cache::<queries::$name<'_>>(\n+                    alloc_self_profile_query_strings_for_query_cache(\n                         self,\n                         stringify!($name),\n                         &self.queries.$name,"}, {"sha": "290e37f2cf8259c12fd89bc38b558e9e8ea68aa3", "filename": "src/librustc/ty/query/profiling_support.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a18aa81bd8dd3012e43f195c52b8113a74479056/src%2Flibrustc%2Fty%2Fquery%2Fprofiling_support.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a18aa81bd8dd3012e43f195c52b8113a74479056/src%2Flibrustc%2Fty%2Fquery%2Fprofiling_support.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fprofiling_support.rs?ref=a18aa81bd8dd3012e43f195c52b8113a74479056", "patch": "@@ -1,7 +1,7 @@\n use crate::hir::map::definitions::DefPathData;\n use crate::ty::context::TyCtxt;\n-use crate::ty::query::config::QueryAccessors;\n-use crate::ty::query::plumbing::QueryState;\n+use crate::ty::query::caches::QueryCache;\n+use crate::ty::query::plumbing::QueryStateImpl;\n use measureme::{StringComponent, StringId};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::profiling::SelfProfiler;\n@@ -157,13 +157,14 @@ where\n /// Allocate the self-profiling query strings for a single query cache. This\n /// method is called from `alloc_self_profile_query_strings` which knows all\n /// the queries via macro magic.\n-pub(super) fn alloc_self_profile_query_strings_for_query_cache<'tcx, Q>(\n+pub(super) fn alloc_self_profile_query_strings_for_query_cache<'tcx, K, V, C>(\n     tcx: TyCtxt<'tcx>,\n     query_name: &'static str,\n-    query_state: &QueryState<'tcx, Q>,\n+    query_state: &QueryStateImpl<'tcx, K, V, C>,\n     string_cache: &mut QueryKeyStringCache,\n ) where\n-    Q: QueryAccessors<'tcx>,\n+    K: Debug + Clone,\n+    C: QueryCache<K, V>,\n {\n     tcx.prof.with_profiler(|profiler| {\n         let event_id_builder = profiler.event_id_builder();"}]}