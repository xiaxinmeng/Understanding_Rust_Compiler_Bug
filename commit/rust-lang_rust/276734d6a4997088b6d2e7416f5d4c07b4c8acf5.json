{"sha": "276734d6a4997088b6d2e7416f5d4c07b4c8acf5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3NjczNGQ2YTQ5OTcwODhiNmQyZTc0MTZmNWQ0YzA3YjRjOGFjZjU=", "commit": {"author": {"name": "David Ross", "email": "daboross@daboross.net", "date": "2020-02-02T02:04:07Z"}, "committer": {"name": "David Ross", "email": "daboross@daboross.net", "date": "2020-02-02T02:58:40Z"}, "message": "Fix 59191\n\nThis adds an explicit error for when macros replace the crate root with\na non-module item.", "tree": {"sha": "8e10593d36e6d9f81feaf5feb39fb75314d66c0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e10593d36e6d9f81feaf5feb39fb75314d66c0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/276734d6a4997088b6d2e7416f5d4c07b4c8acf5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/276734d6a4997088b6d2e7416f5d4c07b4c8acf5", "html_url": "https://github.com/rust-lang/rust/commit/276734d6a4997088b6d2e7416f5d4c07b4c8acf5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/276734d6a4997088b6d2e7416f5d4c07b4c8acf5/comments", "author": {"login": "daboross", "id": 1152146, "node_id": "MDQ6VXNlcjExNTIxNDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1152146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daboross", "html_url": "https://github.com/daboross", "followers_url": "https://api.github.com/users/daboross/followers", "following_url": "https://api.github.com/users/daboross/following{/other_user}", "gists_url": "https://api.github.com/users/daboross/gists{/gist_id}", "starred_url": "https://api.github.com/users/daboross/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daboross/subscriptions", "organizations_url": "https://api.github.com/users/daboross/orgs", "repos_url": "https://api.github.com/users/daboross/repos", "events_url": "https://api.github.com/users/daboross/events{/privacy}", "received_events_url": "https://api.github.com/users/daboross/received_events", "type": "User", "site_admin": false}, "committer": {"login": "daboross", "id": 1152146, "node_id": "MDQ6VXNlcjExNTIxNDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1152146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daboross", "html_url": "https://github.com/daboross", "followers_url": "https://api.github.com/users/daboross/followers", "following_url": "https://api.github.com/users/daboross/following{/other_user}", "gists_url": "https://api.github.com/users/daboross/gists{/gist_id}", "starred_url": "https://api.github.com/users/daboross/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daboross/subscriptions", "organizations_url": "https://api.github.com/users/daboross/orgs", "repos_url": "https://api.github.com/users/daboross/repos", "events_url": "https://api.github.com/users/daboross/events{/privacy}", "received_events_url": "https://api.github.com/users/daboross/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c0b779b7bb23ad1bead914e8023642cc2368406", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c0b779b7bb23ad1bead914e8023642cc2368406", "html_url": "https://github.com/rust-lang/rust/commit/6c0b779b7bb23ad1bead914e8023642cc2368406"}], "stats": {"total": 10, "additions": 9, "deletions": 1}, "files": [{"sha": "1aa4f11a130264ddcd8af2e578006c56776375dc", "filename": "src/librustc_expand/expand.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/276734d6a4997088b6d2e7416f5d4c07b4c8acf5/src%2Flibrustc_expand%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/276734d6a4997088b6d2e7416f5d4c07b4c8acf5/src%2Flibrustc_expand%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fexpand.rs?ref=276734d6a4997088b6d2e7416f5d4c07b4c8acf5", "patch": "@@ -363,7 +363,15 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 krate.attrs = vec![];\n                 krate.module = ast::Mod { inner: orig_mod_span, items: vec![], inline: true };\n             }\n-            _ => unreachable!(),\n+            Some(ast::Item { span, kind, .. }) => {\n+                self.cx.span_fatal(\n+                    span,\n+                    &format!(\n+                        \"expected crate top-level item to be a module after macro expansion, found a {}\",\n+                        kind.descriptive_variant()\n+                    ),\n+                );\n+            }\n         };\n         self.cx.trace_macros_diag();\n         krate"}]}