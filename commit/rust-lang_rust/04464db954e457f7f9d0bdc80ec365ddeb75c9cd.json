{"sha": "04464db954e457f7f9d0bdc80ec365ddeb75c9cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0NDY0ZGI5NTRlNDU3ZjdmOWQwYmRjODBlYzM2NWRkZWI3NWM5Y2Q=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-05-12T16:58:11Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-05-24T22:56:49Z"}, "message": "trans: remove item_symbols from metadata and CrateContext.", "tree": {"sha": "72d005f9351c182f80dcca68fd93210ed913275a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72d005f9351c182f80dcca68fd93210ed913275a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04464db954e457f7f9d0bdc80ec365ddeb75c9cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04464db954e457f7f9d0bdc80ec365ddeb75c9cd", "html_url": "https://github.com/rust-lang/rust/commit/04464db954e457f7f9d0bdc80ec365ddeb75c9cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04464db954e457f7f9d0bdc80ec365ddeb75c9cd/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b03bde9c2af8b004b5c8eba5a797b079190718c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/b03bde9c2af8b004b5c8eba5a797b079190718c3", "html_url": "https://github.com/rust-lang/rust/commit/b03bde9c2af8b004b5c8eba5a797b079190718c3"}], "stats": {"total": 103, "additions": 6, "deletions": 97}, "files": [{"sha": "3ede60beb74436ba1ce61149bd03aabf7cb17062", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/04464db954e457f7f9d0bdc80ec365ddeb75c9cd/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04464db954e457f7f9d0bdc80ec365ddeb75c9cd/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=04464db954e457f7f9d0bdc80ec365ddeb75c9cd", "patch": "@@ -34,8 +34,7 @@ use mir::mir_map::MirMap;\n use session::Session;\n use session::config::PanicStrategy;\n use session::search_paths::PathKind;\n-use util::nodemap::{FnvHashMap, NodeMap, NodeSet, DefIdMap};\n-use std::cell::RefCell;\n+use util::nodemap::{FnvHashMap, NodeSet, DefIdMap};\n use std::rc::Rc;\n use std::path::PathBuf;\n use syntax::ast;\n@@ -169,7 +168,6 @@ pub trait CrateStore<'tcx> {\n     fn item_super_predicates<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId)\n                                  -> ty::GenericPredicates<'tcx>;\n     fn item_attrs(&self, def_id: DefId) -> Vec<ast::Attribute>;\n-    fn item_symbol(&self, def: DefId) -> String;\n     fn trait_def<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId)-> ty::TraitDef<'tcx>;\n     fn adt_def<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId) -> ty::AdtDefMaster<'tcx>;\n     fn method_arg_names(&self, did: DefId) -> Vec<String>;\n@@ -275,7 +273,6 @@ pub trait CrateStore<'tcx> {\n     fn extern_mod_stmt_cnum(&self, emod_id: ast::NodeId) -> Option<ast::CrateNum>;\n     fn encode_metadata<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                            reexports: &def::ExportMap,\n-                           item_symbols: &RefCell<NodeMap<String>>,\n                            link_meta: &LinkMeta,\n                            reachable: &NodeSet,\n                            mir_map: &MirMap<'tcx>,\n@@ -353,7 +350,6 @@ impl<'tcx> CrateStore<'tcx> for DummyCrateStore {\n     fn item_super_predicates<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId)\n                                  -> ty::GenericPredicates<'tcx> { bug!(\"item_super_predicates\") }\n     fn item_attrs(&self, def_id: DefId) -> Vec<ast::Attribute> { bug!(\"item_attrs\") }\n-    fn item_symbol(&self, def: DefId) -> String { bug!(\"item_symbol\") }\n     fn trait_def<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId)-> ty::TraitDef<'tcx>\n         { bug!(\"trait_def\") }\n     fn adt_def<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId) -> ty::AdtDefMaster<'tcx>\n@@ -483,7 +479,6 @@ impl<'tcx> CrateStore<'tcx> for DummyCrateStore {\n     fn extern_mod_stmt_cnum(&self, emod_id: ast::NodeId) -> Option<ast::CrateNum> { None }\n     fn encode_metadata<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                            reexports: &def::ExportMap,\n-                           item_symbols: &RefCell<NodeMap<String>>,\n                            link_meta: &LinkMeta,\n                            reachable: &NodeSet,\n                            mir_map: &MirMap<'tcx>,"}, {"sha": "74f97de26589839266d2b33040ce700092192d7c", "filename": "src/librustc_metadata/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04464db954e457f7f9d0bdc80ec365ddeb75c9cd/src%2Flibrustc_metadata%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04464db954e457f7f9d0bdc80ec365ddeb75c9cd/src%2Flibrustc_metadata%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcommon.rs?ref=04464db954e457f7f9d0bdc80ec365ddeb75c9cd", "patch": "@@ -33,7 +33,7 @@ pub const tag_items_data_item_family: usize = 0x24;\n \n pub const tag_items_data_item_type: usize = 0x25;\n \n-pub const tag_items_data_item_symbol: usize = 0x26;\n+// GAP 0x26\n \n pub const tag_items_data_item_variant: usize = 0x27;\n "}, {"sha": "5d42f8c1d6f6ac3047a7df82403296f5ea4e31f7", "filename": "src/librustc_metadata/csearch.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/04464db954e457f7f9d0bdc80ec365ddeb75c9cd/src%2Flibrustc_metadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04464db954e457f7f9d0bdc80ec365ddeb75c9cd/src%2Flibrustc_metadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcsearch.rs?ref=04464db954e457f7f9d0bdc80ec365ddeb75c9cd", "patch": "@@ -25,7 +25,7 @@ use rustc::hir::map as hir_map;\n use rustc::hir::map::DefKey;\n use rustc::mir::repr::Mir;\n use rustc::mir::mir_map::MirMap;\n-use rustc::util::nodemap::{FnvHashMap, NodeMap, NodeSet, DefIdMap};\n+use rustc::util::nodemap::{FnvHashMap, NodeSet, DefIdMap};\n use rustc::session::config::PanicStrategy;\n \n use std::cell::RefCell;\n@@ -115,13 +115,6 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n         decoder::get_item_attrs(&cdata, def_id.index)\n     }\n \n-    fn item_symbol(&self, def: DefId) -> String\n-    {\n-        self.dep_graph.read(DepNode::MetaData(def));\n-        let cdata = self.get_crate_data(def.krate);\n-        decoder::get_symbol(&cdata, def.index)\n-    }\n-\n     fn trait_def<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId) -> ty::TraitDef<'tcx>\n     {\n         self.dep_graph.read(DepNode::MetaData(def));\n@@ -569,7 +562,6 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n \n     fn encode_metadata<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                            reexports: &def::ExportMap,\n-                           item_symbols: &RefCell<NodeMap<String>>,\n                            link_meta: &LinkMeta,\n                            reachable: &NodeSet,\n                            mir_map: &MirMap<'tcx>,\n@@ -579,7 +571,6 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n             diag: tcx.sess.diagnostic(),\n             tcx: tcx,\n             reexports: reexports,\n-            item_symbols: item_symbols,\n             link_meta: link_meta,\n             cstore: self,\n             reachable: reachable,"}, {"sha": "d1153fe2d06037e6a9cbd17e17afa869011be365", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/04464db954e457f7f9d0bdc80ec365ddeb75c9cd/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04464db954e457f7f9d0bdc80ec365ddeb75c9cd/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=04464db954e457f7f9d0bdc80ec365ddeb75c9cd", "patch": "@@ -213,10 +213,6 @@ fn item_sort(item: rbml::Doc) -> Option<char> {\n     })\n }\n \n-fn item_symbol(item: rbml::Doc) -> String {\n-    reader::get_doc(item, tag_items_data_item_symbol).as_str().to_string()\n-}\n-\n fn untranslated_def_id(d: rbml::Doc) -> DefId {\n     let id = reader::doc_as_u64(d);\n     let index = DefIndex::new((id & 0xFFFF_FFFF) as usize);\n@@ -640,10 +636,6 @@ pub fn get_impl_trait<'a, 'tcx>(cdata: Cmd,\n     }\n }\n \n-pub fn get_symbol(cdata: Cmd, id: DefIndex) -> String {\n-    return item_symbol(cdata.lookup_item(id));\n-}\n-\n /// Iterates over the language items in the given crate.\n pub fn each_lang_item<F>(cdata: Cmd, mut f: F) -> bool where\n     F: FnMut(DefIndex, usize) -> bool,"}, {"sha": "2bc953039adb281851d27713c8a75bc55f279478", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 31, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/04464db954e457f7f9d0bdc80ec365ddeb75c9cd/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04464db954e457f7f9d0bdc80ec365ddeb75c9cd/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=04464db954e457f7f9d0bdc80ec365ddeb75c9cd", "patch": "@@ -34,7 +34,7 @@ use rustc::ty::util::IntTypeExt;\n use rustc::hir::svh::Svh;\n use rustc::mir::mir_map::MirMap;\n use rustc::session::config::{self, PanicStrategy};\n-use rustc::util::nodemap::{FnvHashMap, NodeMap, NodeSet};\n+use rustc::util::nodemap::{FnvHashMap, NodeSet};\n \n use rustc_serialize::Encodable;\n use std::cell::RefCell;\n@@ -59,7 +59,6 @@ pub struct EncodeContext<'a, 'tcx: 'a> {\n     pub diag: &'a Handler,\n     pub tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     pub reexports: &'a def::ExportMap,\n-    pub item_symbols: &'a RefCell<NodeMap<String>>,\n     pub link_meta: &'a LinkMeta,\n     pub cstore: &'a cstore::CStore,\n     pub type_abbrevs: tyencode::abbrev_map<'tcx>,\n@@ -213,20 +212,6 @@ fn encode_region(ecx: &EncodeContext,\n     rbml_w.end_tag();\n }\n \n-fn encode_symbol(ecx: &EncodeContext,\n-                 rbml_w: &mut Encoder,\n-                 id: NodeId) {\n-    match ecx.item_symbols.borrow().get(&id) {\n-        Some(x) => {\n-            debug!(\"encode_symbol(id={}, str={})\", id, *x);\n-            rbml_w.wr_tagged_str(tag_items_data_item_symbol, x);\n-        }\n-        None => {\n-            bug!(\"encode_symbol: id not found {}\", id);\n-        }\n-    }\n-}\n-\n fn encode_disr_val(_: &EncodeContext,\n                    rbml_w: &mut Encoder,\n                    disr_val: ty::Disr) {\n@@ -518,10 +503,6 @@ fn encode_info_for_struct_ctor<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n     encode_name(rbml_w, name);\n     encode_parent_item(rbml_w, ecx.tcx.map.local_def_id(struct_id));\n \n-    if ecx.item_symbols.borrow().contains_key(&ctor_id) {\n-        encode_symbol(ecx, rbml_w, ctor_id);\n-    }\n-\n     let stab = ecx.tcx.lookup_stability(ecx.tcx.map.local_def_id(ctor_id));\n     let depr= ecx.tcx.lookup_deprecation(ecx.tcx.map.local_def_id(ctor_id));\n     encode_stability(rbml_w, stab);\n@@ -710,10 +691,6 @@ fn encode_info_for_method<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n             }\n             encode_constness(rbml_w, sig.constness);\n             encode_defaultness(rbml_w, impl_item.defaultness);\n-            if !any_types {\n-                let m_id = ecx.local_id(m.def_id);\n-                encode_symbol(ecx, rbml_w, m_id);\n-            }\n             encode_method_argument_names(rbml_w, &sig.decl);\n         }\n     }\n@@ -894,7 +871,6 @@ fn encode_info_for_item<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n             encode_family(rbml_w, 'c');\n         }\n         encode_bounds_and_type_for_item(rbml_w, ecx, index, item.id);\n-        encode_symbol(ecx, rbml_w, item.id);\n         encode_name(rbml_w, item.name);\n         encode_visibility(rbml_w, vis);\n         encode_stability(rbml_w, stab);\n@@ -931,9 +907,6 @@ fn encode_info_for_item<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n             encode_inlined_item(ecx, rbml_w, InlinedItemRef::Item(item));\n             encode_mir(ecx, rbml_w, item.id);\n         }\n-        if tps_len == 0 {\n-            encode_symbol(ecx, rbml_w, item.id);\n-        }\n         encode_constness(rbml_w, constness);\n         encode_visibility(rbml_w, vis);\n         encode_stability(rbml_w, stab);\n@@ -1365,8 +1338,6 @@ fn encode_info_for_foreign_item<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n         if abi == Abi::RustIntrinsic || abi == Abi::PlatformIntrinsic {\n             encode_inlined_item(ecx, rbml_w, InlinedItemRef::Foreign(nitem));\n             encode_mir(ecx, rbml_w, nitem.id);\n-        } else {\n-            encode_symbol(ecx, rbml_w, nitem.id);\n         }\n         encode_attributes(rbml_w, &nitem.attrs);\n         let stab = ecx.tcx.lookup_stability(ecx.tcx.map.local_def_id(nitem.id));\n@@ -1387,7 +1358,6 @@ fn encode_info_for_foreign_item<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n         let depr = ecx.tcx.lookup_deprecation(ecx.tcx.map.local_def_id(nitem.id));\n         encode_stability(rbml_w, stab);\n         encode_deprecation(rbml_w, depr);\n-        encode_symbol(ecx, rbml_w, nitem.id);\n         encode_name(rbml_w, nitem.name);\n       }\n     }"}, {"sha": "c4afb348a0fa8c93f72efe81552452466eca9056", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/04464db954e457f7f9d0bdc80ec365ddeb75c9cd/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04464db954e457f7f9d0bdc80ec365ddeb75c9cd/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=04464db954e457f7f9d0bdc80ec365ddeb75c9cd", "patch": "@@ -38,7 +38,6 @@ use llvm;\n use rustc::cfg;\n use rustc::hir::def_id::DefId;\n use middle::lang_items::{LangItem, ExchangeMallocFnLangItem, StartFnLangItem};\n-use middle::weak_lang_items;\n use rustc::hir::pat_util::simple_name;\n use rustc::ty::subst::{self, Substs};\n use rustc::traits;\n@@ -2345,15 +2344,6 @@ pub fn trans_item(ccx: &CrateContext, item: &hir::Item) {\n             set_global_section(ccx, g, item);\n             update_linkage(ccx, g, Some(item.id), OriginalTranslation);\n         }\n-        hir::ItemForeignMod(ref m) => {\n-            if m.abi == Abi::RustIntrinsic || m.abi == Abi::PlatformIntrinsic {\n-                return;\n-            }\n-            for fi in &m.items {\n-                let lname = imported_name(fi.name, &fi.attrs).to_string();\n-                ccx.item_symbols().borrow_mut().insert(fi.id, lname);\n-            }\n-        }\n         _ => {}\n     }\n }\n@@ -2438,16 +2428,6 @@ pub fn create_entry_wrapper(ccx: &CrateContext, sp: Span, main_llfn: ValueRef) {\n     }\n }\n \n-pub fn imported_name(name: ast::Name, attrs: &[ast::Attribute]) -> InternedString {\n-    match attr::first_attr_value_str_by_name(attrs, \"link_name\") {\n-        Some(ln) => ln.clone(),\n-        None => match weak_lang_items::link_name(attrs) {\n-            Some(name) => name,\n-            None => name.as_str(),\n-        }\n-    }\n-}\n-\n fn contains_null(s: &str) -> bool {\n     s.bytes().any(|b| b == 0)\n }\n@@ -2471,7 +2451,6 @@ pub fn write_metadata<'a, 'tcx>(cx: &SharedCrateContext<'a, 'tcx>,\n     let cstore = &cx.tcx().sess.cstore;\n     let metadata = cstore.encode_metadata(cx.tcx(),\n                                           cx.export_map(),\n-                                          cx.item_symbols(),\n                                           cx.link_meta(),\n                                           reachable,\n                                           mir_map,"}, {"sha": "d7f565a9cd449f03e4dda29dce5fe9b12f3b30c1", "filename": "src/librustc_trans/callee.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/04464db954e457f7f9d0bdc80ec365ddeb75c9cd/src%2Flibrustc_trans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04464db954e457f7f9d0bdc80ec365ddeb75c9cd/src%2Flibrustc_trans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcallee.rs?ref=04464db954e457f7f9d0bdc80ec365ddeb75c9cd", "patch": "@@ -575,11 +575,6 @@ fn get_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n         llfn\n     };\n \n-    // Always insert into item_symbols, in case this item is exported.\n-    if let Some(id) = local_item {\n-        ccx.item_symbols().borrow_mut().insert(id, sym);\n-    }\n-\n     ccx.instances().borrow_mut().insert(instance, llfn);\n \n     immediate_rvalue(llfn, fn_ptr_ty)"}, {"sha": "bd36c18a47ee2252803f48a04b189274809380b9", "filename": "src/librustc_trans/consts.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/04464db954e457f7f9d0bdc80ec365ddeb75c9cd/src%2Flibrustc_trans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04464db954e457f7f9d0bdc80ec365ddeb75c9cd/src%2Flibrustc_trans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fconsts.rs?ref=04464db954e457f7f9d0bdc80ec365ddeb75c9cd", "patch": "@@ -1033,13 +1033,10 @@ pub fn get_static<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, def_id: DefId)\n \n                 // Create the global before evaluating the initializer;\n                 // this is necessary to allow recursive statics.\n-                let g = declare::define_global(ccx, &sym, llty).unwrap_or_else(|| {\n+                declare::define_global(ccx, &sym, llty).unwrap_or_else(|| {\n                     ccx.sess().span_fatal(span,\n                         &format!(\"symbol `{}` is already defined\", sym))\n-                });\n-\n-                ccx.item_symbols().borrow_mut().insert(id, sym);\n-                g\n+                })\n             }\n \n             hir_map::NodeForeignItem(&hir::ForeignItem {"}, {"sha": "1c081bb49bca161f5397deb5e9ed1dba3a44dba7", "filename": "src/librustc_trans/context.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/04464db954e457f7f9d0bdc80ec365ddeb75c9cd/src%2Flibrustc_trans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04464db954e457f7f9d0bdc80ec365ddeb75c9cd/src%2Flibrustc_trans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontext.rs?ref=04464db954e457f7f9d0bdc80ec365ddeb75c9cd", "patch": "@@ -71,7 +71,6 @@ pub struct SharedCrateContext<'a, 'tcx: 'a> {\n \n     export_map: ExportMap,\n     reachable: NodeSet,\n-    item_symbols: RefCell<NodeMap<String>>,\n     link_meta: LinkMeta,\n     symbol_hasher: RefCell<Sha256>,\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n@@ -395,7 +394,6 @@ impl<'b, 'tcx> SharedCrateContext<'b, 'tcx> {\n             metadata_llcx: metadata_llcx,\n             export_map: export_map,\n             reachable: reachable,\n-            item_symbols: RefCell::new(NodeMap()),\n             link_meta: link_meta,\n             symbol_hasher: RefCell::new(symbol_hasher),\n             tcx: tcx,\n@@ -439,10 +437,6 @@ impl<'b, 'tcx> SharedCrateContext<'b, 'tcx> {\n         &self.reachable\n     }\n \n-    pub fn item_symbols<'a>(&'a self) -> &'a RefCell<NodeMap<String>> {\n-        &self.item_symbols\n-    }\n-\n     pub fn trait_cache(&self) -> &RefCell<DepTrackingMap<TraitSelectionCache<'tcx>>> {\n         &self.trait_cache\n     }\n@@ -720,10 +714,6 @@ impl<'b, 'tcx> CrateContext<'b, 'tcx> {\n         &self.shared.reachable\n     }\n \n-    pub fn item_symbols<'a>(&'a self) -> &'a RefCell<NodeMap<String>> {\n-        &self.shared.item_symbols\n-    }\n-\n     pub fn link_meta<'a>(&'a self) -> &'a LinkMeta {\n         &self.shared.link_meta\n     }"}]}