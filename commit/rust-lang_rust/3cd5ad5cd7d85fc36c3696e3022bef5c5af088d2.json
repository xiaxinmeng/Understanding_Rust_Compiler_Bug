{"sha": "3cd5ad5cd7d85fc36c3696e3022bef5c5af088d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjZDVhZDVjZDdkODVmYzM2YzM2OTZlMzAyMmJlZjVjNWFmMDg4ZDI=", "commit": {"author": {"name": "jackh726", "email": "jack.huey@umassmed.edu", "date": "2021-07-15T14:03:39Z"}, "committer": {"name": "jackh726", "email": "jack.huey@umassmed.edu", "date": "2021-07-19T22:20:21Z"}, "message": "Better diagnostics when mismatched types due to implict static lifetime", "tree": {"sha": "3805568e3732371815a571964fbb0b57b1c823c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3805568e3732371815a571964fbb0b57b1c823c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3cd5ad5cd7d85fc36c3696e3022bef5c5af088d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3cd5ad5cd7d85fc36c3696e3022bef5c5af088d2", "html_url": "https://github.com/rust-lang/rust/commit/3cd5ad5cd7d85fc36c3696e3022bef5c5af088d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3cd5ad5cd7d85fc36c3696e3022bef5c5af088d2/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77d155973c6c22a0e1af49a4a9bac024f697851d", "url": "https://api.github.com/repos/rust-lang/rust/commits/77d155973c6c22a0e1af49a4a9bac024f697851d", "html_url": "https://github.com/rust-lang/rust/commit/77d155973c6c22a0e1af49a4a9bac024f697851d"}], "stats": {"total": 192, "additions": 168, "deletions": 24}, "files": [{"sha": "670129937be2b9f7981da55968549b214dae2db2", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3cd5ad5cd7d85fc36c3696e3022bef5c5af088d2/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cd5ad5cd7d85fc36c3696e3022bef5c5af088d2/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=3cd5ad5cd7d85fc36c3696e3022bef5c5af088d2", "patch": "@@ -1590,17 +1590,13 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             }\n         };\n         if let Some((expected, found)) = expected_found {\n-            let expected_label = match exp_found {\n-                Mismatch::Variable(ef) => ef.expected.prefix_string(self.tcx),\n-                Mismatch::Fixed(s) => s.into(),\n-            };\n-            let found_label = match exp_found {\n-                Mismatch::Variable(ef) => ef.found.prefix_string(self.tcx),\n-                Mismatch::Fixed(s) => s.into(),\n-            };\n-            let exp_found = match exp_found {\n-                Mismatch::Variable(exp_found) => Some(exp_found),\n-                Mismatch::Fixed(_) => None,\n+            let (expected_label, found_label, exp_found) = match exp_found {\n+                Mismatch::Variable(ef) => (\n+                    ef.expected.prefix_string(self.tcx),\n+                    ef.found.prefix_string(self.tcx),\n+                    Some(ef),\n+                ),\n+                Mismatch::Fixed(s) => (s.into(), s.into(), None),\n             };\n             match (&terr, expected == found) {\n                 (TypeError::Sorts(values), extra) => {"}, {"sha": "6d3ba770f6a0f6c4c75ca125c4b5e07aafcfb2ca", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/mismatched_static_lifetime.rs", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/3cd5ad5cd7d85fc36c3696e3022bef5c5af088d2/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmismatched_static_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cd5ad5cd7d85fc36c3696e3022bef5c5af088d2/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmismatched_static_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmismatched_static_lifetime.rs?ref=3cd5ad5cd7d85fc36c3696e3022bef5c5af088d2", "patch": "@@ -0,0 +1,84 @@\n+//! Error Reporting for when the lifetime for a type doesn't match the `impl` selected for a predicate\n+//! to hold.\n+\n+use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n+use crate::infer::error_reporting::note_and_explain_region;\n+use crate::infer::lexical_region_resolve::RegionResolutionError;\n+use crate::infer::{SubregionOrigin, TypeTrace};\n+use crate::traits::ObligationCauseCode;\n+use rustc_errors::{Applicability, ErrorReported};\n+use rustc_hir as hir;\n+use rustc_hir::intravisit::Visitor;\n+use rustc_middle::ty::{self, TypeVisitor};\n+use rustc_span::MultiSpan;\n+\n+impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n+    pub(super) fn try_report_mismatched_static_lifetime(&self) -> Option<ErrorReported> {\n+        let error = self.error.as_ref()?;\n+        debug!(\"try_report_mismatched_static_lifetime {:?}\", error);\n+\n+        let (origin, sub, sup) = match error.clone() {\n+            RegionResolutionError::ConcreteFailure(origin, sub, sup) => (origin, sub, sup),\n+            _ => return None,\n+        };\n+        if *sub != ty::RegionKind::ReStatic {\n+            return None;\n+        }\n+        let cause = match origin {\n+            SubregionOrigin::Subtype(box TypeTrace { ref cause, .. }) => cause,\n+            _ => return None,\n+        };\n+        let (parent, impl_def_id) = match &cause.code {\n+            ObligationCauseCode::MatchImpl(parent, impl_def_id) => (parent, impl_def_id),\n+            _ => return None,\n+        };\n+        let binding_span = match **parent {\n+            ObligationCauseCode::BindingObligation(_def_id, binding_span) => binding_span,\n+            _ => return None,\n+        };\n+        let mut err = self.tcx().sess.struct_span_err(cause.span, \"incompatible lifetime on type\");\n+        // FIXME: we should point at the lifetime\n+        let mut multi_span: MultiSpan = vec![binding_span].into();\n+        multi_span\n+            .push_span_label(binding_span, \"introduces a `'static` lifetime requirement\".into());\n+        err.span_note(multi_span, \"because this has an unmet lifetime requirement\");\n+        note_and_explain_region(self.tcx(), &mut err, \"...\", sup, \"...\");\n+        if let Some(impl_node) = self.tcx().hir().get_if_local(*impl_def_id) {\n+            let ty = self.tcx().type_of(*impl_def_id);\n+            let mut v = super::static_impl_trait::TraitObjectVisitor(vec![]);\n+            v.visit_ty(ty);\n+            let matching_def_ids = v.0;\n+\n+            let impl_self_ty = match impl_node {\n+                hir::Node::Item(hir::Item {\n+                    kind: hir::ItemKind::Impl(hir::Impl { self_ty, .. }),\n+                    ..\n+                }) => self_ty,\n+                _ => bug!(\"Node not an impl.\"),\n+            };\n+\n+            for matching_def_id in matching_def_ids {\n+                let mut hir_v =\n+                    super::static_impl_trait::HirTraitObjectVisitor(vec![], matching_def_id);\n+                hir_v.visit_ty(&impl_self_ty);\n+\n+                let mut multi_span: MultiSpan = hir_v.0.clone().into();\n+                for span in &hir_v.0 {\n+                    multi_span.push_span_label(\n+                        *span,\n+                        \"this has an implicit `'static` lifetime requirement\".to_string(),\n+                    );\n+                    err.span_suggestion_verbose(\n+                        span.shrink_to_hi(),\n+                        \"consider relaxing the implicit `'static` requirement\",\n+                        \" + '_\".to_string(),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                }\n+                err.span_note(multi_span, \"...does not necessarily outlive the static lifetime introduced by the compatible `impl`\");\n+            }\n+        }\n+        err.emit();\n+        Some(ErrorReported)\n+    }\n+}"}, {"sha": "3f27bf67b59a91d357eb88806d2186b881d49b9b", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cd5ad5cd7d85fc36c3696e3022bef5c5af088d2/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cd5ad5cd7d85fc36c3696e3022bef5c5af088d2/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs?ref=3cd5ad5cd7d85fc36c3696e3022bef5c5af088d2", "patch": "@@ -7,6 +7,7 @@ use rustc_span::source_map::Span;\n \n mod different_lifetimes;\n pub mod find_anon_type;\n+mod mismatched_static_lifetime;\n mod named_anon_conflict;\n mod placeholder_error;\n mod static_impl_trait;\n@@ -58,6 +59,7 @@ impl<'cx, 'tcx> NiceRegionError<'cx, 'tcx> {\n             .or_else(|| self.try_report_impl_not_conforming_to_trait())\n             .or_else(|| self.try_report_anon_anon_conflict())\n             .or_else(|| self.try_report_static_impl_trait())\n+            .or_else(|| self.try_report_mismatched_static_lifetime())\n     }\n \n     pub fn regions(&self) -> Option<(Span, ty::Region<'tcx>, ty::Region<'tcx>)> {"}, {"sha": "a164bc41d149984163b9862f82e73b45d9e358f7", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3cd5ad5cd7d85fc36c3696e3022bef5c5af088d2/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cd5ad5cd7d85fc36c3696e3022bef5c5af088d2/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=3cd5ad5cd7d85fc36c3696e3022bef5c5af088d2", "patch": "@@ -185,7 +185,11 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             }\n         }\n         if let SubregionOrigin::Subtype(box TypeTrace { cause, .. }) = &sub_origin {\n-            if let ObligationCauseCode::ItemObligation(item_def_id) = cause.code {\n+            let code = match &cause.code {\n+                ObligationCauseCode::MatchImpl(parent, ..) => &**parent,\n+                _ => &cause.code,\n+            };\n+            if let ObligationCauseCode::ItemObligation(item_def_id) = *code {\n                 // Same case of `impl Foo for dyn Bar { fn qux(&self) {} }` introducing a `'static`\n                 // lifetime as above, but called using a fully-qualified path to the method:\n                 // `Foo::qux(bar)`.\n@@ -468,7 +472,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n }\n \n /// Collect all the trait objects in a type that could have received an implicit `'static` lifetime.\n-struct TraitObjectVisitor(Vec<DefId>);\n+pub(super) struct TraitObjectVisitor(pub(super) Vec<DefId>);\n \n impl TypeVisitor<'_> for TraitObjectVisitor {\n     fn visit_ty(&mut self, t: Ty<'_>) -> ControlFlow<Self::BreakTy> {\n@@ -485,7 +489,7 @@ impl TypeVisitor<'_> for TraitObjectVisitor {\n }\n \n /// Collect all `hir::Ty<'_>` `Span`s for trait objects with an implicit lifetime.\n-struct HirTraitObjectVisitor(Vec<Span>, DefId);\n+pub(super) struct HirTraitObjectVisitor(pub(super) Vec<Span>, pub(super) DefId);\n \n impl<'tcx> Visitor<'tcx> for HirTraitObjectVisitor {\n     type Map = ErasedMap<'tcx>;"}, {"sha": "f951e43fbfa3538c163e24eb35447cef734d62f1", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3cd5ad5cd7d85fc36c3696e3022bef5c5af088d2/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cd5ad5cd7d85fc36c3696e3022bef5c5af088d2/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=3cd5ad5cd7d85fc36c3696e3022bef5c5af088d2", "patch": "@@ -333,6 +333,9 @@ pub enum ObligationCauseCode<'tcx> {\n     /// This is purely for diagnostic purposes - it is always\n     /// correct to use `MiscObligation` instead\n     WellFormed(Option<hir::HirId>),\n+\n+    /// From `match_impl`. The cause for us having to match an impl, and the DefId we are matching against.\n+    MatchImpl(Lrc<ObligationCauseCode<'tcx>>, DefId),\n }\n \n impl ObligationCauseCode<'_> {"}, {"sha": "50a18ce0ebfff7ed0841b2a0a2eea4b244820f38", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3cd5ad5cd7d85fc36c3696e3022bef5c5af088d2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cd5ad5cd7d85fc36c3696e3022bef5c5af088d2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=3cd5ad5cd7d85fc36c3696e3022bef5c5af088d2", "patch": "@@ -1903,7 +1903,8 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             | ObligationCauseCode::UnifyReceiver(..)\n             | ObligationCauseCode::OpaqueType\n             | ObligationCauseCode::MiscObligation\n-            | ObligationCauseCode::WellFormed(..) => {}\n+            | ObligationCauseCode::WellFormed(..)\n+            | ObligationCauseCode::MatchImpl(..) => {}\n             ObligationCauseCode::SliceOrArrayElem => {\n                 err.note(\"slice and array elements must have `Sized` type\");\n             }"}, {"sha": "1bdc8b34cf6ba7da8f5f5a909264156ee5ace152", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3cd5ad5cd7d85fc36c3696e3022bef5c5af088d2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cd5ad5cd7d85fc36c3696e3022bef5c5af088d2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=3cd5ad5cd7d85fc36c3696e3022bef5c5af088d2", "patch": "@@ -1903,9 +1903,15 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         debug!(?impl_trait_ref, ?placeholder_obligation_trait_ref);\n \n+        let cause = ObligationCause::new(\n+            obligation.cause.span,\n+            obligation.cause.body_id,\n+            ObligationCauseCode::MatchImpl(Lrc::new(obligation.cause.code.clone()), impl_def_id),\n+        );\n+\n         let InferOk { obligations, .. } = self\n             .infcx\n-            .at(&obligation.cause, obligation.param_env)\n+            .at(&cause, obligation.param_env)\n             .eq(placeholder_obligation_trait_ref, impl_trait_ref)\n             .map_err(|e| debug!(\"match_impl: failed eq_trait_refs due to `{}`\", e))?;\n         nested_obligations.extend(obligations);"}, {"sha": "8f40a03ae6f5b1fb36f75ab040a582593e19196c", "filename": "src/test/ui/generic-associated-types/issue-78113-lifetime-mismatch-dyn-trait-box.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3cd5ad5cd7d85fc36c3696e3022bef5c5af088d2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78113-lifetime-mismatch-dyn-trait-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cd5ad5cd7d85fc36c3696e3022bef5c5af088d2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78113-lifetime-mismatch-dyn-trait-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78113-lifetime-mismatch-dyn-trait-box.rs?ref=3cd5ad5cd7d85fc36c3696e3022bef5c5af088d2", "patch": "@@ -0,0 +1,19 @@\n+// Test for diagnostics when we have mismatched lifetime due to implict 'static lifetime in GATs\n+\n+// check-fail\n+\n+#![feature(generic_associated_types)]\n+\n+pub trait A {}\n+impl A for &dyn A {}\n+impl A for Box<dyn A> {}\n+\n+pub trait B {\n+    type T<'a>: A;\n+}\n+\n+impl B for () {\n+    type T<'a> = Box<dyn A + 'a>; //~ incompatible lifetime on type\n+}\n+\n+fn main() {}"}, {"sha": "b77b58284eefbe0ad58e65a39bafb040f4b3a948", "filename": "src/test/ui/generic-associated-types/issue-78113-lifetime-mismatch-dyn-trait-box.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3cd5ad5cd7d85fc36c3696e3022bef5c5af088d2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78113-lifetime-mismatch-dyn-trait-box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cd5ad5cd7d85fc36c3696e3022bef5c5af088d2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78113-lifetime-mismatch-dyn-trait-box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78113-lifetime-mismatch-dyn-trait-box.stderr?ref=3cd5ad5cd7d85fc36c3696e3022bef5c5af088d2", "patch": "@@ -0,0 +1,28 @@\n+error: incompatible lifetime on type\n+  --> $DIR/issue-78113-lifetime-mismatch-dyn-trait-box.rs:16:5\n+   |\n+LL |     type T<'a> = Box<dyn A + 'a>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: because this has an unmet lifetime requirement\n+  --> $DIR/issue-78113-lifetime-mismatch-dyn-trait-box.rs:12:17\n+   |\n+LL |     type T<'a>: A;\n+   |                 ^ introduces a `'static` lifetime requirement\n+note: ...the lifetime `'a` as defined on the associated item at 16:12...\n+  --> $DIR/issue-78113-lifetime-mismatch-dyn-trait-box.rs:16:12\n+   |\n+LL |     type T<'a> = Box<dyn A + 'a>;\n+   |            ^^\n+note: ...does not necessarily outlive the static lifetime introduced by the compatible `impl`\n+  --> $DIR/issue-78113-lifetime-mismatch-dyn-trait-box.rs:9:20\n+   |\n+LL | impl A for Box<dyn A> {}\n+   |                    ^ this has an implicit `'static` lifetime requirement\n+help: consider relaxing the implicit `'static` requirement\n+   |\n+LL | impl A for Box<dyn A + '_> {}\n+   |                      ^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "4fcf8f403bbb6e38ac9da13de6627395f38a7c15", "filename": "src/test/ui/wf/wf-in-foreign-fn-decls-issue-80468.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cd5ad5cd7d85fc36c3696e3022bef5c5af088d2/src%2Ftest%2Fui%2Fwf%2Fwf-in-foreign-fn-decls-issue-80468.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cd5ad5cd7d85fc36c3696e3022bef5c5af088d2/src%2Ftest%2Fui%2Fwf%2Fwf-in-foreign-fn-decls-issue-80468.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-foreign-fn-decls-issue-80468.rs?ref=3cd5ad5cd7d85fc36c3696e3022bef5c5af088d2", "patch": "@@ -13,5 +13,5 @@ pub struct Ref<'a>(&'a u8);\n impl Trait for Ref {} //~ ERROR:  implicit elided lifetime not allowed here\n \n extern \"C\" {\n-    pub fn repro(_: Wrapper<Ref>); //~ ERROR: mismatched types\n+    pub fn repro(_: Wrapper<Ref>); //~ ERROR: incompatible lifetime on type\n }"}, {"sha": "48c9f362fe224888fd4d81895ae8f9b1696e73e2", "filename": "src/test/ui/wf/wf-in-foreign-fn-decls-issue-80468.stderr", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3cd5ad5cd7d85fc36c3696e3022bef5c5af088d2/src%2Ftest%2Fui%2Fwf%2Fwf-in-foreign-fn-decls-issue-80468.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cd5ad5cd7d85fc36c3696e3022bef5c5af088d2/src%2Ftest%2Fui%2Fwf%2Fwf-in-foreign-fn-decls-issue-80468.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-foreign-fn-decls-issue-80468.stderr?ref=3cd5ad5cd7d85fc36c3696e3022bef5c5af088d2", "patch": "@@ -4,21 +4,22 @@ error[E0726]: implicit elided lifetime not allowed here\n LL | impl Trait for Ref {}\n    |                ^^^- help: indicate the anonymous lifetime: `<'_>`\n \n-error[E0308]: mismatched types\n+error: incompatible lifetime on type\n   --> $DIR/wf-in-foreign-fn-decls-issue-80468.rs:16:21\n    |\n LL |     pub fn repro(_: Wrapper<Ref>);\n-   |                     ^^^^^^^^^^^^ lifetime mismatch\n+   |                     ^^^^^^^^^^^^\n    |\n-   = note: expected trait `Trait`\n-              found trait `Trait`\n-note: the anonymous lifetime #1 defined on the method body at 16:5...\n+note: because this has an unmet lifetime requirement\n+  --> $DIR/wf-in-foreign-fn-decls-issue-80468.rs:8:23\n+   |\n+LL | pub struct Wrapper<T: Trait>(T);\n+   |                       ^^^^^ introduces a `'static` lifetime requirement\n+note: ...the anonymous lifetime #1 defined on the method body at 16:5...\n   --> $DIR/wf-in-foreign-fn-decls-issue-80468.rs:16:5\n    |\n LL |     pub fn repro(_: Wrapper<Ref>);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: ...does not necessarily outlive the static lifetime\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0308`."}]}