{"sha": "5b68fc16edaa0f798368d1a28d78b82f640e24ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViNjhmYzE2ZWRhYTBmNzk4MzY4ZDFhMjhkNzhiODJmNjQwZTI0ZWY=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-01-30T11:06:04Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-02-15T18:24:58Z"}, "message": "Use ItemId as a strongly typed index.", "tree": {"sha": "d2d95735279fe89de56df674f2816df0c431929b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2d95735279fe89de56df674f2816df0c431929b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b68fc16edaa0f798368d1a28d78b82f640e24ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b68fc16edaa0f798368d1a28d78b82f640e24ef", "html_url": "https://github.com/rust-lang/rust/commit/5b68fc16edaa0f798368d1a28d78b82f640e24ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b68fc16edaa0f798368d1a28d78b82f640e24ef/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce0a47ab8c0af153fe7124ecd26c82b5430ea604", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce0a47ab8c0af153fe7124ecd26c82b5430ea604", "html_url": "https://github.com/rust-lang/rust/commit/ce0a47ab8c0af153fe7124ecd26c82b5430ea604"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "05c747eee07608ca1d76372b8c3431da4ee4f32d", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b68fc16edaa0f798368d1a28d78b82f640e24ef/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b68fc16edaa0f798368d1a28d78b82f640e24ef/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=5b68fc16edaa0f798368d1a28d78b82f640e24ef", "patch": "@@ -375,7 +375,7 @@ impl<'a, 'tcx> Visitor<'tcx> for RefVisitor<'a, 'tcx> {\n         match ty.kind {\n             TyKind::OpaqueDef(item, _) => {\n                 let map = self.cx.tcx.hir();\n-                let item = map.expect_item(item.id);\n+                let item = map.item(item);\n                 walk_item(self, item);\n                 walk_ty(self, ty);\n             },"}, {"sha": "2e2e693592c8853d22eaffafffd45f0f72992626", "filename": "clippy_lints/src/manual_async_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b68fc16edaa0f798368d1a28d78b82f640e24ef/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b68fc16edaa0f798368d1a28d78b82f640e24ef/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_async_fn.rs?ref=5b68fc16edaa0f798368d1a28d78b82f640e24ef", "patch": "@@ -102,7 +102,7 @@ fn future_trait_ref<'tcx>(\n ) -> Option<(&'tcx TraitRef<'tcx>, Vec<LifetimeName>)> {\n     if_chain! {\n         if let TyKind::OpaqueDef(item_id, bounds) = ty.kind;\n-        let item = cx.tcx.hir().item(item_id.id);\n+        let item = cx.tcx.hir().item(item_id);\n         if let ItemKind::OpaqueTy(opaque) = &item.kind;\n         if let Some(trait_ref) = opaque.bounds.iter().find_map(|bound| {\n             if let GenericBound::Trait(poly, _) = bound {"}, {"sha": "1264813d378a33e42778cfa1748dc9195feffc46", "filename": "clippy_lints/src/missing_inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b68fc16edaa0f798368d1a28d78b82f640e24ef/clippy_lints%2Fsrc%2Fmissing_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b68fc16edaa0f798368d1a28d78b82f640e24ef/clippy_lints%2Fsrc%2Fmissing_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_inline.rs?ref=5b68fc16edaa0f798368d1a28d78b82f640e24ef", "patch": "@@ -107,7 +107,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingInline {\n                                 // trait method with default body needs inline in case\n                                 // an impl is not provided\n                                 let desc = \"a default trait method\";\n-                                let item = cx.tcx.hir().expect_trait_item(tit.id.hir_id);\n+                                let item = cx.tcx.hir().trait_item(tit.id);\n                                 check_missing_inline_attrs(cx, &item.attrs, item.span, desc);\n                             }\n                         },"}, {"sha": "6e3d4fde107775847243d008c3b7e96bf2523302", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b68fc16edaa0f798368d1a28d78b82f640e24ef/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b68fc16edaa0f798368d1a28d78b82f640e24ef/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=5b68fc16edaa0f798368d1a28d78b82f640e24ef", "patch": "@@ -130,7 +130,7 @@ impl<'tcx> LateLintPass<'tcx> for Author {\n     }\n \n     fn check_stmt(&mut self, cx: &LateContext<'tcx>, stmt: &'tcx hir::Stmt<'_>) {\n-        if !has_attr(cx.sess(), stmt.kind.attrs(|id| cx.tcx.hir().item(id.id))) {\n+        if !has_attr(cx.sess(), stmt.kind.attrs(|id| cx.tcx.hir().item(id))) {\n             return;\n         }\n         prelude();"}, {"sha": "b52083af6fd34eb1af7fcb94bd466d7823220efa", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b68fc16edaa0f798368d1a28d78b82f640e24ef/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b68fc16edaa0f798368d1a28d78b82f640e24ef/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=5b68fc16edaa0f798368d1a28d78b82f640e24ef", "patch": "@@ -109,7 +109,7 @@ impl<'tcx> LateLintPass<'tcx> for DeepCodeInspector {\n     }\n \n     fn check_stmt(&mut self, cx: &LateContext<'tcx>, stmt: &'tcx hir::Stmt<'_>) {\n-        if !has_attr(cx.sess(), stmt.kind.attrs(|id| cx.tcx.hir().item(id.id))) {\n+        if !has_attr(cx.sess(), stmt.kind.attrs(|id| cx.tcx.hir().item(id))) {\n             return;\n         }\n         match stmt.kind {"}]}