{"sha": "a1835bcb01fc345653fd9e9ce02b0d103032c58d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExODM1YmNiMDFmYzM0NTY1M2ZkOWU5Y2UwMmIwZDEwMzAzMmM1OGQ=", "commit": {"author": {"name": "Waffle", "email": "waffle.lapkin@gmail.com", "date": "2021-03-02T22:04:20Z"}, "committer": {"name": "Waffle", "email": "waffle.lapkin@gmail.com", "date": "2021-03-02T22:04:20Z"}, "message": "Make Vec::split_at_spare_mut impl safer & simplier", "tree": {"sha": "8816bfde378354f74a639c05cd19040d38aee30e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8816bfde378354f74a639c05cd19040d38aee30e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1835bcb01fc345653fd9e9ce02b0d103032c58d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1835bcb01fc345653fd9e9ce02b0d103032c58d", "html_url": "https://github.com/rust-lang/rust/commit/a1835bcb01fc345653fd9e9ce02b0d103032c58d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1835bcb01fc345653fd9e9ce02b0d103032c58d/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c4e3af39d5e93b2976afa8062ee5c705ba589c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c4e3af39d5e93b2976afa8062ee5c705ba589c5", "html_url": "https://github.com/rust-lang/rust/commit/9c4e3af39d5e93b2976afa8062ee5c705ba589c5"}], "stats": {"total": 14, "additions": 5, "deletions": 9}, "files": [{"sha": "ff401b33832ce61c41ae240fe9e49da1b1cd949d", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a1835bcb01fc345653fd9e9ce02b0d103032c58d/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1835bcb01fc345653fd9e9ce02b0d103032c58d/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=a1835bcb01fc345653fd9e9ce02b0d103032c58d", "patch": "@@ -1944,20 +1944,16 @@ impl<T, A: Allocator> Vec<T, A> {\n     #[unstable(feature = \"vec_split_at_spare\", issue = \"81944\")]\n     #[inline]\n     pub fn split_at_spare_mut(&mut self) -> (&mut [T], &mut [MaybeUninit<T>]) {\n-        let ptr = self.as_mut_ptr();\n-\n-        // SAFETY:\n-        // - `ptr` is guaranteed to be in bounds for `capacity` elements\n-        // - `len` is guaranteed to less or equal to `capacity`\n-        // - `MaybeUninit<T>` has the same layout as `T`\n-        let spare_ptr = unsafe { ptr.cast::<MaybeUninit<T>>().add(self.len) };\n+        let Range { start: ptr, end: spare_ptr } = self.as_mut_ptr_range();\n+        let spare_ptr = spare_ptr.cast::<MaybeUninit<T>>();\n+        let spare_len = self.buf.capacity() - self.len;\n \n         // SAFETY:\n         // - `ptr` is guaranteed to be valid for `len` elements\n-        // - `spare_ptr` is offseted from `ptr` by `len`, so it doesn't overlap `initialized` slice\n+        // - `spare_ptr` is pointing one element past the buffer, so it doesn't overlap with `initialized` slice\n         unsafe {\n             let initialized = slice::from_raw_parts_mut(ptr, self.len);\n-            let spare = slice::from_raw_parts_mut(spare_ptr, self.buf.capacity() - self.len);\n+            let spare = slice::from_raw_parts_mut(spare_ptr, spare_len);\n \n             (initialized, spare)\n         }"}]}