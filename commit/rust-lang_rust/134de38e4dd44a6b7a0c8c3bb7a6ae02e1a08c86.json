{"sha": "134de38e4dd44a6b7a0c8c3bb7a6ae02e1a08c86", "node_id": "C_kwDOAAsO6NoAKDEzNGRlMzhlNGRkNDRhNmI3YTBjOGMzYmI3YTZhZTAyZTFhMDhjODY", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-10-19T05:33:02Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-10-22T06:50:00Z"}, "message": "nit: Inline may_need_drop", "tree": {"sha": "f505e90ae208c49128eb82fc24bf2dfa3c1be88b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f505e90ae208c49128eb82fc24bf2dfa3c1be88b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/134de38e4dd44a6b7a0c8c3bb7a6ae02e1a08c86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/134de38e4dd44a6b7a0c8c3bb7a6ae02e1a08c86", "html_url": "https://github.com/rust-lang/rust/commit/134de38e4dd44a6b7a0c8c3bb7a6ae02e1a08c86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/134de38e4dd44a6b7a0c8c3bb7a6ae02e1a08c86/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b06898d21661414636e35558821173bf16cbf83", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b06898d21661414636e35558821173bf16cbf83", "html_url": "https://github.com/rust-lang/rust/commit/5b06898d21661414636e35558821173bf16cbf83"}], "stats": {"total": 28, "additions": 12, "deletions": 16}, "files": [{"sha": "b7dd599cd432183b00f9a1233afd83a6bdd03783", "filename": "compiler/rustc_hir_typeck/src/generator_interior/mod.rs", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/134de38e4dd44a6b7a0c8c3bb7a6ae02e1a08c86/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/134de38e4dd44a6b7a0c8c3bb7a6ae02e1a08c86/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs?ref=134de38e4dd44a6b7a0c8c3bb7a6ae02e1a08c86", "patch": "@@ -377,19 +377,6 @@ impl<'a, 'tcx> Visitor<'tcx> for InteriorVisitor<'a, 'tcx> {\n         debug!(\"is_borrowed_temporary: {:?}\", self.drop_ranges.is_borrowed_temporary(expr));\n \n         let ty = self.fcx.typeck_results.borrow().expr_ty_adjusted_opt(expr);\n-        let may_need_drop = |ty: Ty<'tcx>| {\n-            // Avoid ICEs in needs_drop.\n-            let ty = self.fcx.resolve_vars_if_possible(ty);\n-            let ty = self.fcx.tcx.erase_regions(ty);\n-            if ty.needs_infer() {\n-                self.fcx\n-                    .tcx\n-                    .sess\n-                    .delay_span_bug(expr.span, &format!(\"inference variables in {ty}\"));\n-                return true;\n-            }\n-            ty.needs_drop(self.fcx.tcx, self.fcx.param_env)\n-        };\n \n         // Typically, the value produced by an expression is consumed by its parent in some way,\n         // so we only have to check if the parent contains a yield (note that the parent may, for\n@@ -407,9 +394,18 @@ impl<'a, 'tcx> Visitor<'tcx> for InteriorVisitor<'a, 'tcx> {\n         // src/test/ui/generator/drop-tracking-parent-expression.rs.\n         let scope = if self.drop_ranges.is_borrowed_temporary(expr)\n             || ty.map_or(true, |ty| {\n-                let needs_drop = may_need_drop(ty);\n-                debug!(?needs_drop, ?ty);\n-                needs_drop\n+                // Avoid ICEs in needs_drop.\n+                let ty = self.fcx.resolve_vars_if_possible(ty);\n+                let ty = self.fcx.tcx.erase_regions(ty);\n+                if ty.needs_infer() {\n+                    self.fcx\n+                        .tcx\n+                        .sess\n+                        .delay_span_bug(expr.span, &format!(\"inference variables in {ty}\"));\n+                    true\n+                } else {\n+                    ty.needs_drop(self.fcx.tcx, self.fcx.param_env)\n+                }\n             }) {\n             self.rvalue_scopes.temporary_scope(self.region_scope_tree, expr.hir_id.local_id)\n         } else {"}]}