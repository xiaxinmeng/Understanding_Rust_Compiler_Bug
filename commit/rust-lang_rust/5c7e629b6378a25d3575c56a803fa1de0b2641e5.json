{"sha": "5c7e629b6378a25d3575c56a803fa1de0b2641e5", "node_id": "C_kwDOAAsO6NoAKDVjN2U2MjliNjM3OGEyNWQzNTc1YzU2YTgwM2ZhMWRlMGIyNjQxZTU", "commit": {"author": {"name": "Ellis Hoag", "email": "ellis.sparky.hoag@gmail.com", "date": "2022-09-24T18:05:37Z"}, "committer": {"name": "Ellis Hoag", "email": "ellis.sparky.hoag@gmail.com", "date": "2022-09-24T18:06:05Z"}, "message": "rebase and update trait names", "tree": {"sha": "914f5b4ab41631b5b839e79713ed3e89398043c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/914f5b4ab41631b5b839e79713ed3e89398043c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c7e629b6378a25d3575c56a803fa1de0b2641e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c7e629b6378a25d3575c56a803fa1de0b2641e5", "html_url": "https://github.com/rust-lang/rust/commit/5c7e629b6378a25d3575c56a803fa1de0b2641e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c7e629b6378a25d3575c56a803fa1de0b2641e5/comments", "author": {"login": "ellishg", "id": 8961915, "node_id": "MDQ6VXNlcjg5NjE5MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8961915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ellishg", "html_url": "https://github.com/ellishg", "followers_url": "https://api.github.com/users/ellishg/followers", "following_url": "https://api.github.com/users/ellishg/following{/other_user}", "gists_url": "https://api.github.com/users/ellishg/gists{/gist_id}", "starred_url": "https://api.github.com/users/ellishg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ellishg/subscriptions", "organizations_url": "https://api.github.com/users/ellishg/orgs", "repos_url": "https://api.github.com/users/ellishg/repos", "events_url": "https://api.github.com/users/ellishg/events{/privacy}", "received_events_url": "https://api.github.com/users/ellishg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ellishg", "id": 8961915, "node_id": "MDQ6VXNlcjg5NjE5MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8961915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ellishg", "html_url": "https://github.com/ellishg", "followers_url": "https://api.github.com/users/ellishg/followers", "following_url": "https://api.github.com/users/ellishg/following{/other_user}", "gists_url": "https://api.github.com/users/ellishg/gists{/gist_id}", "starred_url": "https://api.github.com/users/ellishg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ellishg/subscriptions", "organizations_url": "https://api.github.com/users/ellishg/orgs", "repos_url": "https://api.github.com/users/ellishg/repos", "events_url": "https://api.github.com/users/ellishg/events{/privacy}", "received_events_url": "https://api.github.com/users/ellishg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e22c0a8e1799e0d14f4845060f6857d8921b283", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e22c0a8e1799e0d14f4845060f6857d8921b283", "html_url": "https://github.com/rust-lang/rust/commit/6e22c0a8e1799e0d14f4845060f6857d8921b283"}], "stats": {"total": 94, "additions": 42, "deletions": 52}, "files": [{"sha": "a1c95e7a7f45041baf841e047dbb9258d9c59707", "filename": "compiler/rustc_codegen_gcc/src/errors.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/5c7e629b6378a25d3575c56a803fa1de0b2641e5/compiler%2Frustc_codegen_gcc%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c7e629b6378a25d3575c56a803fa1de0b2641e5/compiler%2Frustc_codegen_gcc%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Ferrors.rs?ref=5c7e629b6378a25d3575c56a803fa1de0b2641e5", "patch": "@@ -1,5 +1,5 @@\n use rustc_errors::{DiagnosticArgValue, IntoDiagnosticArg};\n-use rustc_macros::SessionDiagnostic;\n+use rustc_macros::Diagnostic;\n use rustc_middle::ty::Ty;\n use rustc_span::{Span, Symbol};\n use std::borrow::Cow;\n@@ -17,7 +17,7 @@ impl IntoDiagnosticArg for ExitCode {\n     }\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(codegen_gcc::ranlib_failure)]\n pub(crate) struct RanlibFailure {\n     exit_code: ExitCode,\n@@ -30,7 +30,7 @@ impl RanlibFailure {\n     }\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(codegen_gcc::invalid_monomorphization_basic_integer, code = \"E0511\")]\n pub(crate) struct InvalidMonomorphizationBasicInteger<'a> {\n     #[primary_span]\n@@ -39,7 +39,7 @@ pub(crate) struct InvalidMonomorphizationBasicInteger<'a> {\n     pub ty: Ty<'a>,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(codegen_gcc::invalid_monomorphization_invalid_float_vector, code = \"E0511\")]\n pub(crate) struct InvalidMonomorphizationInvalidFloatVector<'a> {\n     #[primary_span]\n@@ -49,7 +49,7 @@ pub(crate) struct InvalidMonomorphizationInvalidFloatVector<'a> {\n     pub vec_ty: Ty<'a>,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(codegen_gcc::invalid_monomorphization_not_float, code = \"E0511\")]\n pub(crate) struct InvalidMonomorphizationNotFloat<'a> {\n     #[primary_span]\n@@ -58,15 +58,15 @@ pub(crate) struct InvalidMonomorphizationNotFloat<'a> {\n     pub ty: Ty<'a>,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(codegen_gcc::invalid_monomorphization_unrecognized, code = \"E0511\")]\n pub(crate) struct InvalidMonomorphizationUnrecognized {\n     #[primary_span]\n     pub span: Span,\n     pub name: Symbol,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(codegen_gcc::invalid_monomorphization_expected_signed_unsigned, code = \"E0511\")]\n pub(crate) struct InvalidMonomorphizationExpectedSignedUnsigned<'a> {\n     #[primary_span]\n@@ -76,7 +76,7 @@ pub(crate) struct InvalidMonomorphizationExpectedSignedUnsigned<'a> {\n     pub vec_ty: Ty<'a>,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(codegen_gcc::invalid_monomorphization_unsupported_element, code = \"E0511\")]\n pub(crate) struct InvalidMonomorphizationUnsupportedElement<'a> {\n     #[primary_span]\n@@ -87,7 +87,7 @@ pub(crate) struct InvalidMonomorphizationUnsupportedElement<'a> {\n     pub ret_ty: Ty<'a>,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(codegen_gcc::invalid_monomorphization_invalid_bitmask, code = \"E0511\")]\n pub(crate) struct InvalidMonomorphizationInvalidBitmask<'a> {\n     #[primary_span]\n@@ -98,7 +98,7 @@ pub(crate) struct InvalidMonomorphizationInvalidBitmask<'a> {\n     pub expected_bytes: u64,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(codegen_gcc::invalid_monomorphization_simd_shuffle, code = \"E0511\")]\n pub(crate) struct InvalidMonomorphizationSimdShuffle<'a> {\n     #[primary_span]\n@@ -107,7 +107,7 @@ pub(crate) struct InvalidMonomorphizationSimdShuffle<'a> {\n     pub ty: Ty<'a>,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(codegen_gcc::invalid_monomorphization_expected_simd, code = \"E0511\")]\n pub(crate) struct InvalidMonomorphizationExpectedSimd<'a> {\n     #[primary_span]\n@@ -117,7 +117,7 @@ pub(crate) struct InvalidMonomorphizationExpectedSimd<'a> {\n     pub found_ty: Ty<'a>,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(codegen_gcc::invalid_monomorphization_mask_type, code = \"E0511\")]\n pub(crate) struct InvalidMonomorphizationMaskType<'a> {\n     #[primary_span]\n@@ -126,7 +126,7 @@ pub(crate) struct InvalidMonomorphizationMaskType<'a> {\n     pub ty: Ty<'a>,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(codegen_gcc::invalid_monomorphization_return_length, code = \"E0511\")]\n pub(crate) struct InvalidMonomorphizationReturnLength<'a> {\n     #[primary_span]\n@@ -137,7 +137,7 @@ pub(crate) struct InvalidMonomorphizationReturnLength<'a> {\n     pub out_len: u64,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(codegen_gcc::invalid_monomorphization_return_length_input_type, code = \"E0511\")]\n pub(crate) struct InvalidMonomorphizationReturnLengthInputType<'a> {\n     #[primary_span]\n@@ -149,7 +149,7 @@ pub(crate) struct InvalidMonomorphizationReturnLengthInputType<'a> {\n     pub out_len: u64,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(codegen_gcc::invalid_monomorphization_return_element, code = \"E0511\")]\n pub(crate) struct InvalidMonomorphizationReturnElement<'a> {\n     #[primary_span]\n@@ -161,7 +161,7 @@ pub(crate) struct InvalidMonomorphizationReturnElement<'a> {\n     pub out_ty: Ty<'a>,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(codegen_gcc::invalid_monomorphization_return_type, code = \"E0511\")]\n pub(crate) struct InvalidMonomorphizationReturnType<'a> {\n     #[primary_span]\n@@ -172,7 +172,7 @@ pub(crate) struct InvalidMonomorphizationReturnType<'a> {\n     pub ret_ty: Ty<'a>,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(codegen_gcc::invalid_monomorphization_inserted_type, code = \"E0511\")]\n pub(crate) struct InvalidMonomorphizationInsertedType<'a> {\n     #[primary_span]\n@@ -183,7 +183,7 @@ pub(crate) struct InvalidMonomorphizationInsertedType<'a> {\n     pub out_ty: Ty<'a>,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(codegen_gcc::invalid_monomorphization_return_integer_type, code = \"E0511\")]\n pub(crate) struct InvalidMonomorphizationReturnIntegerType<'a> {\n     #[primary_span]\n@@ -193,7 +193,7 @@ pub(crate) struct InvalidMonomorphizationReturnIntegerType<'a> {\n     pub out_ty: Ty<'a>,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(codegen_gcc::invalid_monomorphization_mismatched_lengths, code = \"E0511\")]\n pub(crate) struct InvalidMonomorphizationMismatchedLengths {\n     #[primary_span]\n@@ -203,7 +203,7 @@ pub(crate) struct InvalidMonomorphizationMismatchedLengths {\n     pub v_len: u64,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(codegen_gcc::invalid_monomorphization_unsupported_cast, code = \"E0511\")]\n pub(crate) struct InvalidMonomorphizationUnsupportedCast<'a> {\n     #[primary_span]\n@@ -215,7 +215,7 @@ pub(crate) struct InvalidMonomorphizationUnsupportedCast<'a> {\n     pub out_elem: Ty<'a>,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(codegen_gcc::invalid_monomorphization_unsupported_operation, code = \"E0511\")]\n pub(crate) struct InvalidMonomorphizationUnsupportedOperation<'a> {\n     #[primary_span]\n@@ -225,26 +225,26 @@ pub(crate) struct InvalidMonomorphizationUnsupportedOperation<'a> {\n     pub in_elem: Ty<'a>,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(codegen_gcc::layout_size_overflow)]\n pub(crate) struct LayoutSizeOverflow {\n     #[primary_span]\n     pub span: Span,\n     pub error: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(codegen_gcc::linkage_const_or_mut_type)]\n pub(crate) struct LinkageConstOrMutType {\n     #[primary_span]\n     pub span: Span\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(codegen_gcc::lto_not_supported)]\n pub(crate) struct LTONotSupported;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(codegen_gcc::unwinding_inline_asm)]\n pub(crate) struct UnwindingInlineAsm {\n     #[primary_span]"}, {"sha": "092a77f944c093933d1bf32118e36dab577f8dc4", "filename": "compiler/rustc_errors/src/diagnostic_builder.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5c7e629b6378a25d3575c56a803fa1de0b2641e5/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c7e629b6378a25d3575c56a803fa1de0b2641e5/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs?ref=5c7e629b6378a25d3575c56a803fa1de0b2641e5", "patch": "@@ -5,6 +5,7 @@ use crate::{\n };\n use crate::{Handler, Level, MultiSpan, StashKey};\n use rustc_lint_defs::Applicability;\n+use rustc_span::source_map::Spanned;\n \n use rustc_span::Span;\n use std::borrow::Cow;\n@@ -23,6 +24,18 @@ pub trait IntoDiagnostic<'a, T: EmissionGuarantee = ErrorGuaranteed> {\n     fn into_diagnostic(self, handler: &'a Handler) -> DiagnosticBuilder<'a, T>;\n }\n \n+impl<'a, T, E> IntoDiagnostic<'a, E> for Spanned<T>\n+where\n+    T: IntoDiagnostic<'a, E>,\n+    E: EmissionGuarantee,\n+{\n+    fn into_diagnostic(self, handler: &'a Handler) -> DiagnosticBuilder<'a, E> {\n+        let mut diag = self.node.into_diagnostic(handler);\n+        diag.set_span(self.span);\n+        diag\n+    }\n+}\n+\n /// Used for emitting structured error messages and other diagnostic information.\n ///\n /// If there is some state in a downstream crate you would like to"}, {"sha": "a0b7cf1feb5fda5937ff96246bd0a9b29b089ba3", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5c7e629b6378a25d3575c56a803fa1de0b2641e5/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c7e629b6378a25d3575c56a803fa1de0b2641e5/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=5c7e629b6378a25d3575c56a803fa1de0b2641e5", "patch": "@@ -7,15 +7,13 @@ use crate::ty::{\n };\n use rustc_ast as ast;\n use rustc_attr as attr;\n-use rustc_errors::Handler;\n+use rustc_errors::{Handler, IntoDiagnostic};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::lang_items::LangItem;\n use rustc_index::bit_set::BitSet;\n use rustc_index::vec::{Idx, IndexVec};\n-use rustc_session::{\n-    config::OptLevel, DataTypeKind, FieldInfo, SessionDiagnostic, SizeKind, VariantInfo,\n-};\n+use rustc_session::{config::OptLevel, DataTypeKind, FieldInfo, SizeKind, VariantInfo};\n use rustc_span::symbol::Symbol;\n use rustc_span::{Span, DUMMY_SP};\n use rustc_target::abi::call::{\n@@ -209,7 +207,7 @@ pub enum LayoutError<'tcx> {\n     NormalizationFailure(Ty<'tcx>, NormalizationError<'tcx>),\n }\n \n-impl<'a> SessionDiagnostic<'a, !> for LayoutError<'a> {\n+impl<'a> IntoDiagnostic<'a, !> for LayoutError<'a> {\n     fn into_diagnostic(self, handler: &'a Handler) -> rustc_errors::DiagnosticBuilder<'a, !> {\n         handler.struct_fatal(self.to_string())\n     }"}, {"sha": "0142e98176633495abcdaad3f41ae4d45b4e806f", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 1, "deletions": 22, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5c7e629b6378a25d3575c56a803fa1de0b2641e5/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c7e629b6378a25d3575c56a803fa1de0b2641e5/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=5c7e629b6378a25d3575c56a803fa1de0b2641e5", "patch": "@@ -33,7 +33,7 @@ use rustc_errors::{\n use rustc_macros::HashStable_Generic;\n pub use rustc_span::def_id::StableCrateId;\n use rustc_span::edition::Edition;\n-use rustc_span::source_map::{FileLoader, RealFileLoader, SourceMap, Span, Spanned};\n+use rustc_span::source_map::{FileLoader, RealFileLoader, SourceMap, Span};\n use rustc_span::{sym, SourceFileHashAlgorithm, Symbol};\n use rustc_target::asm::InlineAsmArch;\n use rustc_target::spec::{CodeModel, PanicStrategy, RelocModel, RelroLevel};\n@@ -223,27 +223,6 @@ pub struct PerfStats {\n     pub normalize_projection_ty: AtomicUsize,\n }\n \n-/// Trait implemented by error types. This should not be implemented manually. Instead, use\n-/// `#[derive(SessionDiagnostic)]` -- see [rustc_macros::SessionDiagnostic].\n-#[rustc_diagnostic_item = \"SessionDiagnostic\"]\n-pub trait SessionDiagnostic<'a, T: EmissionGuarantee = ErrorGuaranteed> {\n-    /// Write out as a diagnostic out of `Handler`.\n-    #[must_use]\n-    fn into_diagnostic(self, handler: &'a Handler) -> DiagnosticBuilder<'a, T>;\n-}\n-\n-impl<'a, T, E> SessionDiagnostic<'a, E> for Spanned<T>\n-where\n-    T: SessionDiagnostic<'a, E>,\n-    E: EmissionGuarantee,\n-{\n-    fn into_diagnostic(self, handler: &'a Handler) -> rustc_errors::DiagnosticBuilder<'a, E> {\n-        let mut diag = self.node.into_diagnostic(handler);\n-        diag.set_span(self.span);\n-        diag\n-    }\n-}\n-\n impl Session {\n     pub fn miri_unleashed_feature(&self, span: Span, feature_gate: Option<Symbol>) {\n         self.miri_unleashed_features.lock().push((span, feature_gate));"}]}