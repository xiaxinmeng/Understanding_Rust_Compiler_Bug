{"sha": "3412957e7f50a586f8ac2c12d0ffd0384d546534", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0MTI5NTdlN2Y1MGE1ODZmOGFjMmMxMmQwZmZkMDM4NGQ1NDY1MzQ=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-03-31T16:29:34Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-06-04T19:26:08Z"}, "message": "Unify parallel and non-parallel APIs\n\nIt's confusing for these to be different, even if some of the methods\nare unused.", "tree": {"sha": "7652dea67ad54f600ae9d7cdc90b563b33153e94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7652dea67ad54f600ae9d7cdc90b563b33153e94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3412957e7f50a586f8ac2c12d0ffd0384d546534", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3412957e7f50a586f8ac2c12d0ffd0384d546534", "html_url": "https://github.com/rust-lang/rust/commit/3412957e7f50a586f8ac2c12d0ffd0384d546534", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3412957e7f50a586f8ac2c12d0ffd0384d546534/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a5cc2552536eabe8c26a0592e71de5f7e3e0ebd", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a5cc2552536eabe8c26a0592e71de5f7e3e0ebd", "html_url": "https://github.com/rust-lang/rust/commit/1a5cc2552536eabe8c26a0592e71de5f7e3e0ebd"}], "stats": {"total": 56, "additions": 54, "deletions": 2}, "files": [{"sha": "722ce6b6367266730667d510ffe4130bf44b8898", "filename": "compiler/rustc_data_structures/src/sync.rs", "status": "modified", "additions": 54, "deletions": 2, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/3412957e7f50a586f8ac2c12d0ffd0384d546534/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3412957e7f50a586f8ac2c12d0ffd0384d546534/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs?ref=3412957e7f50a586f8ac2c12d0ffd0384d546534", "patch": "@@ -44,8 +44,8 @@ cfg_if! {\n         use std::panic::{resume_unwind, catch_unwind, AssertUnwindSafe};\n \n         /// This is a single threaded variant of `AtomicU64`, `AtomicUsize`, etc.\n-        /// It differs from `AtomicCell` in that it has explicit ordering arguments\n-        /// and is only intended for use with the native atomic types.\n+        /// It has explicit ordering arguments and is only intended for use with\n+        /// the native atomic types.\n         /// You should use this type through the `AtomicU64`, `AtomicUsize`, etc, type aliases\n         /// as it's not intended to be used separately.\n         #[derive(Debug)]\n@@ -59,6 +59,11 @@ cfg_if! {\n         }\n \n         impl<T: Copy> Atomic<T> {\n+            #[inline]\n+            pub fn into_inner(self) -> T {\n+                self.0.into_inner()\n+            }\n+\n             #[inline]\n             pub fn load(&self, _: Ordering) -> T {\n                 self.0.get()\n@@ -68,6 +73,11 @@ cfg_if! {\n             pub fn store(&self, val: T, _: Ordering) {\n                 self.0.set(val)\n             }\n+\n+            #[inline]\n+            pub fn swap(&self, val: T, _: Ordering) -> T {\n+                self.0.replace(val)\n+            }\n         }\n \n         impl<T: Copy + PartialEq> Atomic<T> {\n@@ -180,6 +190,12 @@ cfg_if! {\n             pub fn new<F: FnMut(usize) -> T>(mut f: F) -> WorkerLocal<T> {\n                 WorkerLocal(OneThread::new(f(0)))\n             }\n+\n+            /// Returns the worker-local value for each thread\n+            #[inline]\n+            pub fn into_inner(self) -> Vec<T> {\n+                vec![OneThread::into_inner(self.0)]\n+            }\n         }\n \n         impl<T> Deref for WorkerLocal<T> {\n@@ -207,6 +223,16 @@ cfg_if! {\n                 self.0\n             }\n \n+            #[inline(always)]\n+            pub fn get_mut(&mut self) -> &mut T {\n+                &mut self.0\n+            }\n+\n+            #[inline(always)]\n+            pub fn lock(&self) -> &T {\n+                &self.0\n+            }\n+\n             #[inline(always)]\n             pub fn lock_mut(&mut self) -> &mut T {\n                 &mut self.0\n@@ -437,6 +463,16 @@ impl<T> RwLock<T> {\n         RwLock(InnerRwLock::new(inner))\n     }\n \n+    #[inline(always)]\n+    pub fn into_inner(self) -> T {\n+        self.0.into_inner()\n+    }\n+\n+    #[inline(always)]\n+    pub fn get_mut(&mut self) -> &mut T {\n+        self.0.get_mut()\n+    }\n+\n     #[cfg(not(parallel_compiler))]\n     #[inline(always)]\n     pub fn read(&self) -> ReadGuard<'_, T> {\n@@ -453,6 +489,11 @@ impl<T> RwLock<T> {\n         }\n     }\n \n+    #[inline(always)]\n+    pub fn with_read_lock<F: FnOnce(&T) -> R, R>(&self, f: F) -> R {\n+        f(&*self.read())\n+    }\n+\n     #[cfg(not(parallel_compiler))]\n     #[inline(always)]\n     pub fn try_write(&self) -> Result<WriteGuard<'_, T>, ()> {\n@@ -481,6 +522,11 @@ impl<T> RwLock<T> {\n         }\n     }\n \n+    #[inline(always)]\n+    pub fn with_write_lock<F: FnOnce(&mut T) -> R, R>(&self, f: F) -> R {\n+        f(&mut *self.write())\n+    }\n+\n     #[inline(always)]\n     pub fn borrow(&self) -> ReadGuard<'_, T> {\n         self.read()\n@@ -529,6 +575,12 @@ impl<T> OneThread<T> {\n             inner,\n         }\n     }\n+\n+    #[inline(always)]\n+    pub fn into_inner(value: Self) -> T {\n+        value.check();\n+        value.inner\n+    }\n }\n \n impl<T> Deref for OneThread<T> {"}]}