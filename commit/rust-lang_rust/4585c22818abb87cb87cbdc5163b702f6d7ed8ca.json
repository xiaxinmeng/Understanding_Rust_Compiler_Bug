{"sha": "4585c22818abb87cb87cbdc5163b702f6d7ed8ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1ODVjMjI4MThhYmI4N2NiODdjYmRjNTE2M2I3MDJmNmQ3ZWQ4Y2E=", "commit": {"author": {"name": "Tamir Duberstein", "email": "tamird@google.com", "date": "2020-10-01T20:40:05Z"}, "committer": {"name": "Tamir Duberstein", "email": "tamird@google.com", "date": "2020-10-04T12:18:12Z"}, "message": "Include scope id in SocketAddrV6::Display", "tree": {"sha": "9c1dcef769bf8abc5c59788c515c8d9c01b45f5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c1dcef769bf8abc5c59788c515c8d9c01b45f5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4585c22818abb87cb87cbdc5163b702f6d7ed8ca", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEGdbxTRDxXfPwlFQKMuM+wV4f7zwFAl95vYQACgkQMuM+wV4f\n7zwlpQv+L83W+kG3H2ZNLNKIoRC9ffyeFTdyc6DUPD47Stwz3X+y8BlS63ocK/Kc\nhx8pKTGil+Tvwhtg5e3RRzmgjQeN2UEpIeEbgosTtGM1R/HC+lQ/6BPong1Z6zLH\nasvyaplF8sNfKl3IYsXoyGZLfeEG2YyEOWB5N+CraNL6NpGWTFJYOnqQbhrgw/hJ\n5mEUPS7hrsqEb3zuVTX+lfMqx6nfstrnC84qAQhZqBT9ODgKHimLLbW8IRT9XtnU\nlwTzVsk9VAG84Y23p280OxbPlABGjdr4o6dAuY6J7amR1rv0924S9xc+l6YF1zTF\nuqTvDPtJ+e/7ANgdt++iGL6hezr0tvF3ALf/3E1kvTvJs40JnWN1fYmxIGIRZ/A/\nZcUcY+gw4v16MwrlwVCbtQpu5yODMlDHGtJfpYwG51/aZOhAvnFcneZL3HCmbR5q\nrXQb6oDBkDPI6wJfLrRxb3h23uobtBiKXYDBIvY0UzHwuvb9jriRkTzy98+0Y6js\nl/uS1U/D\n=VFQI\n-----END PGP SIGNATURE-----", "payload": "tree 9c1dcef769bf8abc5c59788c515c8d9c01b45f5a\nparent 0d37dca25a51fb900a402c94c8818ad1c2789e30\nauthor Tamir Duberstein <tamird@google.com> 1601584805 +0000\ncommitter Tamir Duberstein <tamird@google.com> 1601813892 +0000\n\nInclude scope id in SocketAddrV6::Display\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4585c22818abb87cb87cbdc5163b702f6d7ed8ca", "html_url": "https://github.com/rust-lang/rust/commit/4585c22818abb87cb87cbdc5163b702f6d7ed8ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4585c22818abb87cb87cbdc5163b702f6d7ed8ca/comments", "author": {"login": "tamird", "id": 1535036, "node_id": "MDQ6VXNlcjE1MzUwMzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1535036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tamird", "html_url": "https://github.com/tamird", "followers_url": "https://api.github.com/users/tamird/followers", "following_url": "https://api.github.com/users/tamird/following{/other_user}", "gists_url": "https://api.github.com/users/tamird/gists{/gist_id}", "starred_url": "https://api.github.com/users/tamird/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tamird/subscriptions", "organizations_url": "https://api.github.com/users/tamird/orgs", "repos_url": "https://api.github.com/users/tamird/repos", "events_url": "https://api.github.com/users/tamird/events{/privacy}", "received_events_url": "https://api.github.com/users/tamird/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tamird", "id": 1535036, "node_id": "MDQ6VXNlcjE1MzUwMzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1535036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tamird", "html_url": "https://github.com/tamird", "followers_url": "https://api.github.com/users/tamird/followers", "following_url": "https://api.github.com/users/tamird/following{/other_user}", "gists_url": "https://api.github.com/users/tamird/gists{/gist_id}", "starred_url": "https://api.github.com/users/tamird/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tamird/subscriptions", "organizations_url": "https://api.github.com/users/tamird/orgs", "repos_url": "https://api.github.com/users/tamird/repos", "events_url": "https://api.github.com/users/tamird/events{/privacy}", "received_events_url": "https://api.github.com/users/tamird/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d37dca25a51fb900a402c94c8818ad1c2789e30", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d37dca25a51fb900a402c94c8818ad1c2789e30", "html_url": "https://github.com/rust-lang/rust/commit/0d37dca25a51fb900a402c94c8818ad1c2789e30"}], "stats": {"total": 22, "additions": 19, "deletions": 3}, "files": [{"sha": "63de87128340f38d4cb9ae01a63788dcdd8122ff", "filename": "library/std/src/net/addr.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4585c22818abb87cb87cbdc5163b702f6d7ed8ca/library%2Fstd%2Fsrc%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4585c22818abb87cb87cbdc5163b702f6d7ed8ca/library%2Fstd%2Fsrc%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Faddr.rs?ref=4585c22818abb87cb87cbdc5163b702f6d7ed8ca", "patch": "@@ -623,19 +623,27 @@ impl fmt::Display for SocketAddrV6 {\n         // Fast path: if there's no alignment stuff, write to the output\n         // buffer directly\n         if f.precision().is_none() && f.width().is_none() {\n-            write!(f, \"[{}]:{}\", self.ip(), self.port())\n+            match self.scope_id() {\n+                0 => write!(f, \"[{}]:{}\", self.ip(), self.port()),\n+                scope_id => write!(f, \"[{}%{}]:{}\", self.ip(), scope_id, self.port()),\n+            }\n         } else {\n             const IPV6_SOCKET_BUF_LEN: usize = (4 * 8)  // The address\n             + 7  // The colon separators\n             + 2  // The brackets\n+            + 1 + 10 // The scope id\n             + 1 + 5; // The port\n \n             let mut buf = [0; IPV6_SOCKET_BUF_LEN];\n             let mut buf_slice = &mut buf[..];\n \n+            match self.scope_id() {\n+                0 => write!(buf_slice, \"[{}]:{}\", self.ip(), self.port()),\n+                scope_id => write!(buf_slice, \"[{}%{}]:{}\", self.ip(), scope_id, self.port()),\n+            }\n             // Unwrap is fine because writing to a sufficiently-sized\n             // buffer is infallible\n-            write!(buf_slice, \"[{}]:{}\", self.ip(), self.port()).unwrap();\n+            .unwrap();\n             let len = IPV6_SOCKET_BUF_LEN - buf_slice.len();\n \n             // This unsafe is OK because we know what is being written to the buffer"}, {"sha": "43f965de25e65d2f1ef8a7bc4dc9fd5cabc1959b", "filename": "library/std/src/net/addr/tests.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4585c22818abb87cb87cbdc5163b702f6d7ed8ca/library%2Fstd%2Fsrc%2Fnet%2Faddr%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4585c22818abb87cb87cbdc5163b702f6d7ed8ca/library%2Fstd%2Fsrc%2Fnet%2Faddr%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Faddr%2Ftests.rs?ref=4585c22818abb87cb87cbdc5163b702f6d7ed8ca", "patch": "@@ -178,13 +178,21 @@ fn socket_v4_to_str() {\n \n #[test]\n fn socket_v6_to_str() {\n-    let socket: SocketAddrV6 = \"[2a02:6b8:0:1::1]:53\".parse().unwrap();\n+    let mut socket = SocketAddrV6::new(Ipv6Addr::new(0x2a02, 0x6b8, 0, 1, 0, 0, 0, 1), 53, 0, 0);\n \n     assert_eq!(format!(\"{}\", socket), \"[2a02:6b8:0:1::1]:53\");\n     assert_eq!(format!(\"{:<24}\", socket), \"[2a02:6b8:0:1::1]:53    \");\n     assert_eq!(format!(\"{:>24}\", socket), \"    [2a02:6b8:0:1::1]:53\");\n     assert_eq!(format!(\"{:^24}\", socket), \"  [2a02:6b8:0:1::1]:53  \");\n     assert_eq!(format!(\"{:.15}\", socket), \"[2a02:6b8:0:1::\");\n+\n+    socket.set_scope_id(5);\n+\n+    assert_eq!(format!(\"{}\", socket), \"[2a02:6b8:0:1::1%5]:53\");\n+    assert_eq!(format!(\"{:<24}\", socket), \"[2a02:6b8:0:1::1%5]:53  \");\n+    assert_eq!(format!(\"{:>24}\", socket), \"  [2a02:6b8:0:1::1%5]:53\");\n+    assert_eq!(format!(\"{:^24}\", socket), \" [2a02:6b8:0:1::1%5]:53 \");\n+    assert_eq!(format!(\"{:.18}\", socket), \"[2a02:6b8:0:1::1%5\");\n }\n \n #[test]"}]}