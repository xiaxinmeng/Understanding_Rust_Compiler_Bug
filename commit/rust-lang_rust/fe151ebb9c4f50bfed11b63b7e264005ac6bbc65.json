{"sha": "fe151ebb9c4f50bfed11b63b7e264005ac6bbc65", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlMTUxZWJiOWM0ZjUwYmZlZDExYjYzYjdlMjY0MDA1YWM2YmJjNjU=", "commit": {"author": {"name": "Konrad Borowski", "email": "konrad@borowski.pw", "date": "2018-12-29T16:31:32Z"}, "committer": {"name": "Konrad Borowski", "email": "konrad@borowski.pw", "date": "2018-12-29T16:31:32Z"}, "message": "Use match ergonomics for bit_mask lint", "tree": {"sha": "1cd9a2bc34aea60892ad1ab162b03f5d4396c3d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1cd9a2bc34aea60892ad1ab162b03f5d4396c3d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe151ebb9c4f50bfed11b63b7e264005ac6bbc65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe151ebb9c4f50bfed11b63b7e264005ac6bbc65", "html_url": "https://github.com/rust-lang/rust/commit/fe151ebb9c4f50bfed11b63b7e264005ac6bbc65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe151ebb9c4f50bfed11b63b7e264005ac6bbc65/comments", "author": {"login": "xfix", "id": 1297598, "node_id": "MDQ6VXNlcjEyOTc1OTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1297598?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xfix", "html_url": "https://github.com/xfix", "followers_url": "https://api.github.com/users/xfix/followers", "following_url": "https://api.github.com/users/xfix/following{/other_user}", "gists_url": "https://api.github.com/users/xfix/gists{/gist_id}", "starred_url": "https://api.github.com/users/xfix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xfix/subscriptions", "organizations_url": "https://api.github.com/users/xfix/orgs", "repos_url": "https://api.github.com/users/xfix/repos", "events_url": "https://api.github.com/users/xfix/events{/privacy}", "received_events_url": "https://api.github.com/users/xfix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xfix", "id": 1297598, "node_id": "MDQ6VXNlcjEyOTc1OTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1297598?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xfix", "html_url": "https://github.com/xfix", "followers_url": "https://api.github.com/users/xfix/followers", "following_url": "https://api.github.com/users/xfix/following{/other_user}", "gists_url": "https://api.github.com/users/xfix/gists{/gist_id}", "starred_url": "https://api.github.com/users/xfix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xfix/subscriptions", "organizations_url": "https://api.github.com/users/xfix/orgs", "repos_url": "https://api.github.com/users/xfix/repos", "events_url": "https://api.github.com/users/xfix/events{/privacy}", "received_events_url": "https://api.github.com/users/xfix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "931e2b0026e1223f0a39bc322fd7e70d9736d09a", "url": "https://api.github.com/repos/rust-lang/rust/commits/931e2b0026e1223f0a39bc322fd7e70d9736d09a", "html_url": "https://github.com/rust-lang/rust/commit/931e2b0026e1223f0a39bc322fd7e70d9736d09a"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "c85ab799ddc2f83e915ec0ef4e6c577ab0b70840", "filename": "clippy_lints/src/bit_mask.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fe151ebb9c4f50bfed11b63b7e264005ac6bbc65/clippy_lints%2Fsrc%2Fbit_mask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe151ebb9c4f50bfed11b63b7e264005ac6bbc65/clippy_lints%2Fsrc%2Fbit_mask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbit_mask.rs?ref=fe151ebb9c4f50bfed11b63b7e264005ac6bbc65", "patch": "@@ -121,7 +121,7 @@ impl LintPass for BitMask {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BitMask {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n-        if let ExprKind::Binary(ref cmp, ref left, ref right) = e.node {\n+        if let ExprKind::Binary(cmp, left, right) = &e.node {\n             if cmp.node.is_comparison() {\n                 if let Some(cmp_opt) = fetch_int_literal(cx, right) {\n                     check_compare(cx, left, cmp.node, cmp_opt, e.span)\n@@ -131,13 +131,13 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BitMask {\n             }\n         }\n         if_chain! {\n-            if let ExprKind::Binary(ref op, ref left, ref right) = e.node;\n+            if let ExprKind::Binary(op, left, right) = &e.node;\n             if BinOpKind::Eq == op.node;\n-            if let ExprKind::Binary(ref op1, ref left1, ref right1) = left.node;\n+            if let ExprKind::Binary(op1, left1, right1) = &left.node;\n             if BinOpKind::BitAnd == op1.node;\n-            if let ExprKind::Lit(ref lit) = right1.node;\n+            if let ExprKind::Lit(lit) = &right1.node;\n             if let LitKind::Int(n, _) = lit.node;\n-            if let ExprKind::Lit(ref lit1) = right.node;\n+            if let ExprKind::Lit(lit1) = &right.node;\n             if let LitKind::Int(0, _) = lit1.node;\n             if n.leading_zeros() == n.count_zeros();\n             if n > u128::from(self.verbose_bit_mask_threshold);\n@@ -173,7 +173,7 @@ fn invert_cmp(cmp: BinOpKind) -> BinOpKind {\n }\n \n fn check_compare(cx: &LateContext<'_, '_>, bit_op: &Expr, cmp_op: BinOpKind, cmp_value: u128, span: Span) {\n-    if let ExprKind::Binary(ref op, ref left, ref right) = bit_op.node {\n+    if let ExprKind::Binary(op, left, right) = &bit_op.node {\n         if op.node != BinOpKind::BitAnd && op.node != BinOpKind::BitOr {\n             return;\n         }"}]}