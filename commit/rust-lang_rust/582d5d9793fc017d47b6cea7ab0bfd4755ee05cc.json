{"sha": "582d5d9793fc017d47b6cea7ab0bfd4755ee05cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4MmQ1ZDk3OTNmYzAxN2Q0N2I2Y2VhN2FiMGJmZDQ3NTVlZTA1Y2M=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-02-25T12:13:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-02-25T12:13:38Z"}, "message": "Rollup merge of #40037 - froydnj:overflow-checks, r=alexcrichton\n\nadd `-C overflow-checks` option\n\nIn addition to defining and handling the new option, we also add a method on librustc::Session for determining the necessity of overflow checks.  This method provides a single point to sort out the three (!) different ways for turning on overflow checks: -C debug-assertions, -C overflow-checks, and -Z force-overflow-checks.\n\nI was seeing a [run-pass/issue-28950.rs](https://github.com/rust-lang/rust/blob/b1363a73ede57ae595f3a1be2bb75d308ba4f7f6/src/test/run-pass/issue-28950.rs) failure on my machine with these patches, but I was also seeing the failure without the changes to the core compiler.  We'll see what travis says.\n\nFixes #33134.  r? @alexcrichton", "tree": {"sha": "b856472d279761c3e5ba6aea2e87a9840f00aa9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b856472d279761c3e5ba6aea2e87a9840f00aa9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/582d5d9793fc017d47b6cea7ab0bfd4755ee05cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/582d5d9793fc017d47b6cea7ab0bfd4755ee05cc", "html_url": "https://github.com/rust-lang/rust/commit/582d5d9793fc017d47b6cea7ab0bfd4755ee05cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/582d5d9793fc017d47b6cea7ab0bfd4755ee05cc/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f9d6d6c9f71c848478a372b664df88226ce5796", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f9d6d6c9f71c848478a372b664df88226ce5796", "html_url": "https://github.com/rust-lang/rust/commit/4f9d6d6c9f71c848478a372b664df88226ce5796"}, {"sha": "ffc6ddd51b960469ffee8d2fb80d5a664e2a6c21", "url": "https://api.github.com/repos/rust-lang/rust/commits/ffc6ddd51b960469ffee8d2fb80d5a664e2a6c21", "html_url": "https://github.com/rust-lang/rust/commit/ffc6ddd51b960469ffee8d2fb80d5a664e2a6c21"}], "stats": {"total": 64, "additions": 50, "deletions": 14}, "files": [{"sha": "5fff03dabcecef2f41fe9cb57169f51db6eae4d9", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/582d5d9793fc017d47b6cea7ab0bfd4755ee05cc/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/582d5d9793fc017d47b6cea7ab0bfd4755ee05cc/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=582d5d9793fc017d47b6cea7ab0bfd4755ee05cc", "patch": "@@ -804,6 +804,8 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n         \"save all temporary output files during compilation\"),\n     rpath: bool = (false, parse_bool, [UNTRACKED],\n         \"set rpath values in libs/exes\"),\n+    overflow_checks: Option<bool> = (None, parse_opt_bool, [TRACKED],\n+        \"use overflow checks for integer arithmetic\"),\n     no_prepopulate_passes: bool = (false, parse_bool, [TRACKED],\n         \"don't pre-populate the pass manager with a list of passes\"),\n     no_vectorize_loops: bool = (false, parse_bool, [TRACKED],\n@@ -2348,6 +2350,10 @@ mod tests {\n         opts.cg.llvm_args = vec![String::from(\"1\"), String::from(\"2\")];\n         assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n+        opts = reference.clone();\n+        opts.cg.overflow_checks = Some(true);\n+        assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n+\n         opts = reference.clone();\n         opts.cg.no_prepopulate_passes = true;\n         assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());"}, {"sha": "68edcc60779a10d86be6cc85e8ebdc9428e3453b", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/582d5d9793fc017d47b6cea7ab0bfd4755ee05cc/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/582d5d9793fc017d47b6cea7ab0bfd4755ee05cc/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=582d5d9793fc017d47b6cea7ab0bfd4755ee05cc", "patch": "@@ -372,6 +372,11 @@ impl Session {\n     pub fn nonzeroing_move_hints(&self) -> bool {\n         self.opts.debugging_opts.enable_nonzeroing_move_hints\n     }\n+    pub fn overflow_checks(&self) -> bool {\n+        self.opts.cg.overflow_checks\n+            .or(self.opts.debugging_opts.force_overflow_checks)\n+            .unwrap_or(self.opts.debug_assertions)\n+    }\n \n     pub fn must_not_eliminate_frame_pointers(&self) -> bool {\n         self.opts.debuginfo != DebugInfoLevel::NoDebugInfo ||"}, {"sha": "486900fc2fed5a21adb731d9e416f1294c4d5d00", "filename": "src/librustc_incremental/calculate_svh/svh_visitor.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/582d5d9793fc017d47b6cea7ab0bfd4755ee05cc/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/582d5d9793fc017d47b6cea7ab0bfd4755ee05cc/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs?ref=582d5d9793fc017d47b6cea7ab0bfd4755ee05cc", "patch": "@@ -63,8 +63,7 @@ impl<'a, 'hash, 'tcx> StrictVersionHashVisitor<'a, 'hash, 'tcx> {\n                hash_spans: bool,\n                hash_bodies: bool)\n                -> Self {\n-        let check_overflow = tcx.sess.opts.debugging_opts.force_overflow_checks\n-            .unwrap_or(tcx.sess.opts.debug_assertions);\n+        let check_overflow = tcx.sess.overflow_checks();\n \n         StrictVersionHashVisitor {\n             st: st,"}, {"sha": "852c34a544a97acc2a3be7db561d021bf2c8598c", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/582d5d9793fc017d47b6cea7ab0bfd4755ee05cc/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/582d5d9793fc017d47b6cea7ab0bfd4755ee05cc/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=582d5d9793fc017d47b6cea7ab0bfd4755ee05cc", "patch": "@@ -59,13 +59,8 @@ impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n         let mut check_overflow = attrs.iter()\n             .any(|item| item.check_name(\"rustc_inherit_overflow_checks\"));\n \n-        // Respect -Z force-overflow-checks=on and -C debug-assertions.\n-        check_overflow |= infcx.tcx\n-            .sess\n-            .opts\n-            .debugging_opts\n-            .force_overflow_checks\n-            .unwrap_or(infcx.tcx.sess.opts.debug_assertions);\n+        // Respect -C overflow-checks.\n+        check_overflow |= infcx.tcx.sess.overflow_checks();\n \n         // Constants and const fn's always need overflow checks.\n         check_overflow |= constness == hir::Constness::Const;"}, {"sha": "ca746c58e7f6ad8a421fa2c1b65456c101720e5e", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/582d5d9793fc017d47b6cea7ab0bfd4755ee05cc/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/582d5d9793fc017d47b6cea7ab0bfd4755ee05cc/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=582d5d9793fc017d47b6cea7ab0bfd4755ee05cc", "patch": "@@ -1139,11 +1139,7 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let ty::CrateAnalysis { export_map, reachable, name, .. } = analysis;\n     let exported_symbols = find_exported_symbols(tcx, reachable);\n \n-    let check_overflow = if let Some(v) = tcx.sess.opts.debugging_opts.force_overflow_checks {\n-        v\n-    } else {\n-        tcx.sess.opts.debug_assertions\n-    };\n+    let check_overflow = tcx.sess.overflow_checks();\n \n     let link_meta = link::build_link_meta(incremental_hashes_map, &name);\n "}, {"sha": "a3a7179fb71127737106cf7d4cdca2dce365d272", "filename": "src/test/run-pass/iter-sum-overflow-overflow-checks.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/582d5d9793fc017d47b6cea7ab0bfd4755ee05cc/src%2Ftest%2Frun-pass%2Fiter-sum-overflow-overflow-checks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/582d5d9793fc017d47b6cea7ab0bfd4755ee05cc/src%2Ftest%2Frun-pass%2Fiter-sum-overflow-overflow-checks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fiter-sum-overflow-overflow-checks.rs?ref=582d5d9793fc017d47b6cea7ab0bfd4755ee05cc", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -C overflow-checks\n+\n+use std::panic;\n+\n+fn main() {\n+    let r = panic::catch_unwind(|| {\n+        [1, i32::max_value()].iter().sum::<i32>();\n+    });\n+    assert!(r.is_err());\n+\n+    let r = panic::catch_unwind(|| {\n+        [2, i32::max_value()].iter().product::<i32>();\n+    });\n+    assert!(r.is_err());\n+\n+    let r = panic::catch_unwind(|| {\n+        [1, i32::max_value()].iter().cloned().sum::<i32>();\n+    });\n+    assert!(r.is_err());\n+\n+    let r = panic::catch_unwind(|| {\n+        [2, i32::max_value()].iter().cloned().product::<i32>();\n+    });\n+    assert!(r.is_err());\n+}"}]}