{"sha": "ba3d22ed6685f3ddbfda29edc20b93810a641db8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhM2QyMmVkNjY4NWYzZGRiZmRhMjllZGMyMGI5MzgxMGE2NDFkYjg=", "commit": {"author": {"name": "Jack Huey", "email": "jack.huey@umassmed.edu", "date": "2021-04-12T13:12:10Z"}, "committer": {"name": "Jack Huey", "email": "jack.huey@umassmed.edu", "date": "2021-04-20T20:41:54Z"}, "message": "Precompute inverse binder depth", "tree": {"sha": "4467480797e337ab85af2c91259113407b824550", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4467480797e337ab85af2c91259113407b824550"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba3d22ed6685f3ddbfda29edc20b93810a641db8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba3d22ed6685f3ddbfda29edc20b93810a641db8", "html_url": "https://github.com/rust-lang/rust/commit/ba3d22ed6685f3ddbfda29edc20b93810a641db8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba3d22ed6685f3ddbfda29edc20b93810a641db8/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6df26f897cffb2d86880544bb451c6b5f8509b2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6df26f897cffb2d86880544bb451c6b5f8509b2d", "html_url": "https://github.com/rust-lang/rust/commit/6df26f897cffb2d86880544bb451c6b5f8509b2d"}], "stats": {"total": 177, "additions": 73, "deletions": 104}, "files": [{"sha": "88ceb23b72f5b512005a35db7ccea4610217976a", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 73, "deletions": 104, "changes": 177, "blob_url": "https://github.com/rust-lang/rust/blob/ba3d22ed6685f3ddbfda29edc20b93810a641db8/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba3d22ed6685f3ddbfda29edc20b93810a641db8/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=ba3d22ed6685f3ddbfda29edc20b93810a641db8", "patch": "@@ -249,6 +249,8 @@ enum Scope<'a> {\n         /// requires binders of nested trait refs to be merged.\n         from_poly_trait_ref: bool,\n \n+        binder_depth: u32,\n+\n         /// The late bound vars for a given item are stored by `HirId` to be\n         /// queried later. However, if we enter an elision scope, we have to\n         /// later append the elided bound vars to the list and need to know what\n@@ -345,6 +347,7 @@ impl<'a> fmt::Debug for TruncatedScopeDebug<'a> {\n                 track_lifetime_uses,\n                 opaque_type_parent,\n                 from_poly_trait_ref,\n+                binder_depth,\n                 hir_id,\n                 s: _,\n             } => f\n@@ -354,6 +357,7 @@ impl<'a> fmt::Debug for TruncatedScopeDebug<'a> {\n                 .field(\"track_lifetime_uses\", track_lifetime_uses)\n                 .field(\"opaque_type_parent\", opaque_type_parent)\n                 .field(\"from_poly_trait_ref\", from_poly_trait_ref)\n+                .field(\"binder_depth\", binder_depth)\n                 .field(\"hir_id\", hir_id)\n                 .field(\"s\", &\"..\")\n                 .finish(),\n@@ -618,6 +622,45 @@ fn late_region_as_bound_region<'tcx>(tcx: TyCtxt<'tcx>, region: &Region) -> ty::\n     }\n }\n \n+impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n+    fn depth(&self, concanetate: bool) -> u32 {\n+        let mut passed_boundary = false;\n+        let mut scope = self.scope;\n+        loop {\n+            match *scope {\n+                Scope::Root => {\n+                    break 0;\n+                }\n+\n+                Scope::TraitRefBoundary { s, .. } => {\n+                    passed_boundary = true;\n+                    scope = s;\n+                }\n+\n+                Scope::Binder { binder_depth, from_poly_trait_ref, .. } => {\n+                    break if concanetate {\n+                        if passed_boundary || !from_poly_trait_ref {\n+                            binder_depth + 1\n+                        } else {\n+                            binder_depth\n+                        }\n+                    } else {\n+                        binder_depth + 1\n+                    };\n+                }\n+\n+                Scope::Elision { s, .. }\n+                | Scope::ObjectLifetimeDefault { s, .. }\n+                | Scope::TraitRefHackInner { s, .. }\n+                | Scope::Supertrait { s, .. }\n+                | Scope::Body { s, .. } => {\n+                    scope = s;\n+                }\n+            }\n+        }\n+    }\n+}\n+\n impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n     type Map = Map<'tcx>;\n \n@@ -676,6 +719,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     track_lifetime_uses: true,\n                     opaque_type_parent: false,\n                     from_poly_trait_ref: false,\n+                    binder_depth: self.depth(false),\n                 };\n                 self.with(scope, move |_old_scope, this| {\n                     intravisit::walk_fn(this, fk, fd, b, s, hir_id)\n@@ -801,6 +845,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     opaque_type_parent: true,\n                     track_lifetime_uses,\n                     from_poly_trait_ref: false,\n+                    binder_depth: self.depth(false),\n                     s: ROOT_SCOPE,\n                 };\n                 self.with(scope, |old_scope, this| {\n@@ -870,6 +915,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     track_lifetime_uses: true,\n                     opaque_type_parent: false,\n                     from_poly_trait_ref: false,\n+                    binder_depth: self.depth(false),\n                 };\n                 self.with(scope, |old_scope, this| {\n                     // a bare fn has no bounds, so everything\n@@ -1063,6 +1109,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                             track_lifetime_uses: true,\n                             opaque_type_parent: false,\n                             from_poly_trait_ref: false,\n+                            binder_depth: this.depth(false),\n                         };\n                         this.with(scope, |_old_scope, this| {\n                             this.visit_generics(generics);\n@@ -1083,6 +1130,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                         track_lifetime_uses: true,\n                         opaque_type_parent: false,\n                         from_poly_trait_ref: false,\n+                        binder_depth: self.depth(false),\n                     };\n                     self.with(scope, |_old_scope, this| {\n                         let scope = Scope::TraitRefBoundary { s: this.scope };\n@@ -1142,6 +1190,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     track_lifetime_uses: true,\n                     opaque_type_parent: true,\n                     from_poly_trait_ref: false,\n+                    binder_depth: self.depth(false),\n                 };\n                 self.with(scope, |old_scope, this| {\n                     this.check_lifetime_params(old_scope, &generics.params);\n@@ -1211,6 +1260,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     track_lifetime_uses: true,\n                     opaque_type_parent: true,\n                     from_poly_trait_ref: false,\n+                    binder_depth: self.depth(false),\n                 };\n                 self.with(scope, |old_scope, this| {\n                     this.check_lifetime_params(old_scope, &generics.params);\n@@ -1324,6 +1374,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                                 track_lifetime_uses: true,\n                                 opaque_type_parent: false,\n                                 from_poly_trait_ref: true,\n+                                binder_depth: this.depth(false),\n                             };\n                             this.with(scope, |old_scope, this| {\n                                 this.check_lifetime_params(old_scope, &bound_generic_params);\n@@ -1370,6 +1421,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     track_lifetime_uses: true,\n                     opaque_type_parent: false,\n                     from_poly_trait_ref: false,\n+                    binder_depth: self.depth(false),\n                 };\n                 self.with(scope, |_, this| {\n                     intravisit::walk_param_bound(this, bound);\n@@ -1516,6 +1568,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                 track_lifetime_uses: true,\n                 opaque_type_parent: false,\n                 from_poly_trait_ref: true,\n+                binder_depth: self.depth(true),\n             };\n             self.with(scope, |old_scope, this| {\n                 this.check_lifetime_params(old_scope, &trait_ref.bound_generic_params);\n@@ -2266,6 +2319,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             opaque_type_parent: true,\n             track_lifetime_uses: false,\n             from_poly_trait_ref: false,\n+            binder_depth: self.depth(false),\n         };\n         self.with(scope, move |old_scope, this| {\n             this.check_lifetime_params(old_scope, &generics.params);\n@@ -2323,7 +2377,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         // given name or we run out of scopes.\n         // search.\n         let mut late_depth = 0;\n-        let mut in_poly_trait_ref = false;\n+        let mut first_binder_depth = None;\n         let mut scope = self.scope;\n         let mut outermost_body = None;\n         let result = loop {\n@@ -2341,25 +2395,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                     break None;\n                 }\n \n-                Scope::TraitRefBoundary { s, .. } => {\n-                    // We've exited nested poly trait refs; mark that we are no longer in nested trait refs.\n-                    // We don't increase the late depth because this isn't a `Binder` scope.\n-                    //\n-                    // This came up in #83737, which boiled down to a case like this:\n-                    //\n-                    // ```\n-                    // F: for<> Fn(&()) -> Box<dyn for<> Future<Output = ()> + Unpin>,\n-                    //                         //  ^^^^^\n-\n-                    // ```\n-                    //\n-                    // Here, as we traverse upwards from the `dyn for<>` binder, we want to reset `in_poly_trait_ref`\n-                    // to false, so that we avoid excess contaenation when we encounter the outer `for<>`  binder.\n-                    in_poly_trait_ref = false;\n-                    scope = s;\n-                }\n-\n-                Scope::Binder { ref lifetimes, from_poly_trait_ref, s, .. } => {\n+                Scope::Binder { ref lifetimes, s, binder_depth, .. } => {\n                     match lifetime_ref.name {\n                         LifetimeName::Param(param_name) => {\n                             if let Some(&def) = lifetimes.get(&param_name.normalize_to_macros_2_0())\n@@ -2369,47 +2405,16 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                         }\n                         _ => bug!(\"expected LifetimeName::Param\"),\n                     }\n-\n-                    match (from_poly_trait_ref, in_poly_trait_ref) {\n-                        // This is the first binder we see that is a poly trait ref; add one to the\n-                        // late depth and mark that we're potentially in nested trait refs.\n-                        (true, false) => {\n-                            in_poly_trait_ref = true;\n-                            late_depth += 1;\n-                        }\n-                        // We've already seen a binder that is a poly trait ref and this one is too,\n-                        // that means that they are nested and we are concatenating the bound vars;\n-                        // don't increase the late depth.\n-                        //\n-                        // This happens specifically with associated trait bounds like the following:\n-                        //\n-                        // ```\n-                        // for<'a> T: Iterator<Item: for<'b> Foo<'a, 'b>>\n-                        // ```\n-                        //\n-                        // In this case, as we traverse `for<'b>`, we would increment `late_depth` but\n-                        // set `in_poly_trait_ref` to true. Then when we traverse `for<'a>`, we would\n-                        // not increment `late_depth` again. (NB: Niko thinks this logic is actually\n-                        // wrong.)\n-                        (true, true) => {}\n-                        // We've exited nested poly trait refs; add one to the late depth and mark\n-                        // that we are no longer in nested trait refs\n-                        (false, true) => {\n-                            in_poly_trait_ref = false;\n-                            late_depth += 1;\n-                        }\n-                        // Any other kind of nested binders: just increase late depth.\n-                        (false, false) => {\n-                            late_depth += 1;\n-                        }\n-                    }\n+                    first_binder_depth = first_binder_depth.or(Some(binder_depth));\n+                    late_depth = first_binder_depth.unwrap_or(binder_depth) - binder_depth + 1;\n                     scope = s;\n                 }\n \n                 Scope::Elision { s, .. }\n                 | Scope::ObjectLifetimeDefault { s, .. }\n                 | Scope::TraitRefHackInner { s, .. }\n-                | Scope::Supertrait { s, .. } => {\n+                | Scope::Supertrait { s, .. }\n+                | Scope::TraitRefBoundary { s, .. } => {\n                     scope = s;\n                 }\n             }\n@@ -3112,7 +3117,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n \n         let span = lifetime_refs[0].span;\n         let mut late_depth = 0;\n-        let mut in_poly_trait_ref = false;\n+        let mut first_binder_depth = None;\n         let mut scope = self.scope;\n         let mut lifetime_names = FxHashSet::default();\n         let mut lifetime_spans = vec![];\n@@ -3123,36 +3128,16 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n \n                 Scope::Root => break None,\n \n-                Scope::TraitRefBoundary { s, .. } => {\n-                    // We've exited nested poly trait refs; mark that we are no longer in nested trait refs.\n-                    // We don't increase the late depth because this isn't a `Binder` scope\n-                    in_poly_trait_ref = false;\n-                    scope = s;\n-                }\n-\n-                Scope::Binder { s, ref lifetimes, from_poly_trait_ref, .. } => {\n+                Scope::Binder { s, ref lifetimes, binder_depth, .. } => {\n                     // collect named lifetimes for suggestions\n                     for name in lifetimes.keys() {\n                         if let hir::ParamName::Plain(name) = name {\n                             lifetime_names.insert(name.name);\n                             lifetime_spans.push(name.span);\n                         }\n                     }\n-                    // See comments in `resolve_lifetime_ref`\n-                    match (from_poly_trait_ref, in_poly_trait_ref) {\n-                        (true, false) => {\n-                            in_poly_trait_ref = true;\n-                            late_depth += 1;\n-                        }\n-                        (true, true) => {}\n-                        (false, true) => {\n-                            in_poly_trait_ref = false;\n-                            late_depth += 1;\n-                        }\n-                        (false, false) => {\n-                            late_depth += 1;\n-                        }\n-                    }\n+                    first_binder_depth = first_binder_depth.or(Some(binder_depth));\n+                    late_depth = first_binder_depth.unwrap_or(binder_depth) - binder_depth + 1;\n                     scope = s;\n                 }\n \n@@ -3202,7 +3187,8 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n \n                 Scope::ObjectLifetimeDefault { s, .. }\n                 | Scope::TraitRefHackInner { s, .. }\n-                | Scope::Supertrait { s, .. } => {\n+                | Scope::Supertrait { s, .. }\n+                | Scope::TraitRefBoundary { s, .. } => {\n                     scope = s;\n                 }\n             }\n@@ -3308,32 +3294,13 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n     fn resolve_object_lifetime_default(&mut self, lifetime_ref: &'tcx hir::Lifetime) {\n         debug!(\"resolve_object_lifetime_default(lifetime_ref={:?})\", lifetime_ref);\n         let mut late_depth = 0;\n-        let mut in_poly_trait_ref = false;\n+        let mut first_binder_depth = None;\n         let mut scope = self.scope;\n         let lifetime = loop {\n             match *scope {\n-                Scope::TraitRefBoundary { s, .. } => {\n-                    // We've exited nested poly trait refs; mark that we are no longer in nested trait refs.\n-                    // We don't increase the late depth because this isn't a `Binder` scope\n-                    in_poly_trait_ref = false;\n-                    scope = s;\n-                }\n-\n-                Scope::Binder { s, from_poly_trait_ref, .. } => {\n-                    match (from_poly_trait_ref, in_poly_trait_ref) {\n-                        (true, false) => {\n-                            in_poly_trait_ref = true;\n-                            late_depth += 1;\n-                        }\n-                        (true, true) => {}\n-                        (false, true) => {\n-                            in_poly_trait_ref = false;\n-                            late_depth += 1;\n-                        }\n-                        (false, false) => {\n-                            late_depth += 1;\n-                        }\n-                    }\n+                Scope::Binder { s, binder_depth, .. } => {\n+                    first_binder_depth = first_binder_depth.or(Some(binder_depth));\n+                    late_depth = first_binder_depth.unwrap_or(binder_depth) - binder_depth + 1;\n                     scope = s;\n                 }\n \n@@ -3343,7 +3310,9 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n \n                 Scope::ObjectLifetimeDefault { lifetime: Some(l), .. } => break l,\n \n-                Scope::TraitRefHackInner { s, .. } | Scope::Supertrait { s, .. } => {\n+                Scope::TraitRefHackInner { s, .. }\n+                | Scope::Supertrait { s, .. }\n+                | Scope::TraitRefBoundary { s, .. } => {\n                     scope = s;\n                 }\n             }"}]}