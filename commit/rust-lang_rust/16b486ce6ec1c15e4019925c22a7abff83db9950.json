{"sha": "16b486ce6ec1c15e4019925c22a7abff83db9950", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2YjQ4NmNlNmVjMWMxNWU0MDE5OTI1YzIyYTdhYmZmODNkYjk5NTA=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-06-25T12:38:13Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-07-11T18:09:25Z"}, "message": "Refactor cur_cmnt_and_lit away.\n\nThe literal index was increased in only next_lit, so it isn't\nnecessary: code now uses an iterator. The cur_cmnt field is also moved\nto be increased in print_comment instead of after each call to\nprint_comment.", "tree": {"sha": "758ea9240dd90280a7024a89a124dd1973310ccf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/758ea9240dd90280a7024a89a124dd1973310ccf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16b486ce6ec1c15e4019925c22a7abff83db9950", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16b486ce6ec1c15e4019925c22a7abff83db9950", "html_url": "https://github.com/rust-lang/rust/commit/16b486ce6ec1c15e4019925c22a7abff83db9950", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16b486ce6ec1c15e4019925c22a7abff83db9950/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bac4bb96137cad937e4986b37d9e4273d1f01dcf", "url": "https://api.github.com/repos/rust-lang/rust/commits/bac4bb96137cad937e4986b37d9e4273d1f01dcf", "html_url": "https://github.com/rust-lang/rust/commit/bac4bb96137cad937e4986b37d9e4273d1f01dcf"}], "stats": {"total": 120, "additions": 55, "deletions": 65}, "files": [{"sha": "beaf65b77d81f6a821cf92c63f71345cdb2a9f4f", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/16b486ce6ec1c15e4019925c22a7abff83db9950/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16b486ce6ec1c15e4019925c22a7abff83db9950/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=16b486ce6ec1c15e4019925c22a7abff83db9950", "patch": "@@ -17,7 +17,7 @@ use syntax::parse::ParseSess;\n use syntax::parse::lexer::comments;\n use syntax::print::pp::{self, Breaks};\n use syntax::print::pp::Breaks::{Consistent, Inconsistent};\n-use syntax::print::pprust::{self as ast_pp, PrintState};\n+use syntax::print::pprust::PrintState;\n use syntax::ptr::P;\n use syntax::symbol::keywords;\n use syntax_pos::{self, BytePos};\n@@ -27,6 +27,8 @@ use hir::{PatKind, RegionTyParamBound, TraitTyParamBound, TraitBoundModifier, Ra\n \n use std::cell::Cell;\n use std::io::{self, Write, Read};\n+use std::iter::Peekable;\n+use std::vec;\n \n pub enum AnnNode<'a> {\n     NodeName(&'a ast::Name),\n@@ -77,8 +79,8 @@ pub struct State<'a> {\n     pub s: pp::Printer<'a>,\n     cm: Option<&'a CodeMap>,\n     comments: Option<Vec<comments::Comment>>,\n-    literals: Option<Vec<comments::Literal>>,\n-    cur_cmnt_and_lit: ast_pp::CurrentCommentAndLiteral,\n+    literals: Peekable<vec::IntoIter<comments::Literal>>,\n+    cur_cmnt: usize,\n     boxes: Vec<pp::Breaks>,\n     ann: &'a (PpAnn + 'a),\n }\n@@ -96,12 +98,16 @@ impl<'a> PrintState<'a> for State<'a> {\n         &mut self.comments\n     }\n \n-    fn cur_cmnt_and_lit(&mut self) -> &mut ast_pp::CurrentCommentAndLiteral {\n-        &mut self.cur_cmnt_and_lit\n+    fn cur_cmnt(&mut self) -> &mut usize {\n+        &mut self.cur_cmnt\n     }\n \n-    fn literals(&self) -> &Option<Vec<comments::Literal>> {\n-        &self.literals\n+    fn cur_lit(&mut self) -> Option<&comments::Literal> {\n+        self.literals.peek()\n+    }\n+\n+    fn bump_lit(&mut self) -> Option<comments::Literal> {\n+        self.literals.next()\n     }\n }\n \n@@ -169,11 +175,8 @@ impl<'a> State<'a> {\n             s: pp::mk_printer(out, default_columns),\n             cm: Some(cm),\n             comments: comments.clone(),\n-            literals: literals.clone(),\n-            cur_cmnt_and_lit: ast_pp::CurrentCommentAndLiteral {\n-                cur_cmnt: 0,\n-                cur_lit: 0,\n-            },\n+            literals: literals.unwrap_or_default().into_iter().peekable(),\n+            cur_cmnt: 0,\n             boxes: Vec::new(),\n             ann,\n         }\n@@ -189,11 +192,8 @@ pub fn to_string<F>(ann: &PpAnn, f: F) -> String\n             s: pp::mk_printer(Box::new(&mut wr), default_columns),\n             cm: None,\n             comments: None,\n-            literals: None,\n-            cur_cmnt_and_lit: ast_pp::CurrentCommentAndLiteral {\n-                cur_cmnt: 0,\n-                cur_lit: 0,\n-            },\n+            literals: vec![].into_iter().peekable(),\n+            cur_cmnt: 0,\n             boxes: Vec::new(),\n             ann,\n         };\n@@ -2131,7 +2131,6 @@ impl<'a> State<'a> {\n             if span.hi < (*cmnt).pos && (*cmnt).pos < next &&\n                span_line.line == comment_line.line {\n                 self.print_comment(cmnt)?;\n-                self.cur_cmnt_and_lit.cur_cmnt += 1;\n             }\n         }\n         Ok(())\n@@ -2147,7 +2146,6 @@ impl<'a> State<'a> {\n             match self.next_comment() {\n                 Some(ref cmnt) => {\n                     self.print_comment(cmnt)?;\n-                    self.cur_cmnt_and_lit.cur_cmnt += 1;\n                 }\n                 _ => break,\n             }"}, {"sha": "272a5e199e63d5f707fa00f5fdee6231082fb37d", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 38, "deletions": 46, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/16b486ce6ec1c15e4019925c22a7abff83db9950/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16b486ce6ec1c15e4019925c22a7abff83db9950/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=16b486ce6ec1c15e4019925c22a7abff83db9950", "patch": "@@ -31,7 +31,8 @@ use tokenstream::{self, TokenStream, TokenTree};\n \n use std::ascii;\n use std::io::{self, Write, Read};\n-use std::iter;\n+use std::iter::{self, Peekable};\n+use std::vec;\n \n pub enum AnnNode<'a> {\n     NodeIdent(&'a ast::Ident),\n@@ -53,18 +54,12 @@ pub struct NoAnn;\n \n impl PpAnn for NoAnn {}\n \n-#[derive(Copy, Clone)]\n-pub struct CurrentCommentAndLiteral {\n-    pub cur_cmnt: usize,\n-    pub cur_lit: usize,\n-}\n-\n pub struct State<'a> {\n     pub s: pp::Printer<'a>,\n     cm: Option<&'a CodeMap>,\n     comments: Option<Vec<comments::Comment> >,\n-    literals: Option<Vec<comments::Literal> >,\n-    cur_cmnt_and_lit: CurrentCommentAndLiteral,\n+    literals: Peekable<vec::IntoIter<comments::Literal>>,\n+    cur_cmnt: usize,\n     boxes: Vec<pp::Breaks>,\n     ann: &'a (PpAnn+'a),\n }\n@@ -80,11 +75,8 @@ pub fn rust_printer_annotated<'a>(writer: Box<Write+'a>,\n         s: pp::mk_printer(writer, DEFAULT_COLUMNS),\n         cm: None,\n         comments: None,\n-        literals: None,\n-        cur_cmnt_and_lit: CurrentCommentAndLiteral {\n-            cur_cmnt: 0,\n-            cur_lit: 0\n-        },\n+        literals: vec![].into_iter().peekable(),\n+        cur_cmnt: 0,\n         boxes: Vec::new(),\n         ann: ann,\n     }\n@@ -160,11 +152,8 @@ impl<'a> State<'a> {\n             s: pp::mk_printer(out, DEFAULT_COLUMNS),\n             cm: Some(cm),\n             comments: comments,\n-            literals: literals,\n-            cur_cmnt_and_lit: CurrentCommentAndLiteral {\n-                cur_cmnt: 0,\n-                cur_lit: 0\n-            },\n+            literals: literals.unwrap_or_default().into_iter().peekable(),\n+            cur_cmnt: 0,\n             boxes: Vec::new(),\n             ann: ann,\n         }\n@@ -451,8 +440,9 @@ pub trait PrintState<'a> {\n     fn writer(&mut self) -> &mut pp::Printer<'a>;\n     fn boxes(&mut self) -> &mut Vec<pp::Breaks>;\n     fn comments(&mut self) -> &mut Option<Vec<comments::Comment>>;\n-    fn cur_cmnt_and_lit(&mut self) -> &mut CurrentCommentAndLiteral;\n-    fn literals(&self) -> &Option<Vec<comments::Literal>>;\n+    fn cur_cmnt(&mut self) -> &mut usize;\n+    fn cur_lit(&mut self) -> Option<&comments::Literal>;\n+    fn bump_lit(&mut self) -> Option<comments::Literal>;\n \n     fn word_space(&mut self, w: &str) -> io::Result<()> {\n         self.writer().word(w)?;\n@@ -518,31 +508,24 @@ pub trait PrintState<'a> {\n     }\n \n     fn next_lit(&mut self, pos: BytePos) -> Option<comments::Literal> {\n-        let mut cur_lit = self.cur_cmnt_and_lit().cur_lit;\n-\n-        let mut result = None;\n+        while let Some(ltrl) = self.cur_lit().cloned() {\n+            if ltrl.pos > pos { break; }\n \n-        if let Some(ref lits) = *self.literals() {\n-            while cur_lit < lits.len() {\n-                let ltrl = (*lits)[cur_lit].clone();\n-                if ltrl.pos > pos { break; }\n-                cur_lit += 1;\n-                if ltrl.pos == pos {\n-                    result = Some(ltrl);\n-                    break;\n-                }\n+            // we don't need the value here since we're forced to clone cur_lit\n+            // due to lack of NLL.\n+            self.bump_lit();\n+            if ltrl.pos == pos {\n+                return Some(ltrl);\n             }\n         }\n \n-        self.cur_cmnt_and_lit().cur_lit = cur_lit;\n-        result\n+        None\n     }\n \n     fn maybe_print_comment(&mut self, pos: BytePos) -> io::Result<()> {\n         while let Some(ref cmnt) = self.next_comment() {\n             if cmnt.pos < pos {\n                 self.print_comment(cmnt)?;\n-                self.cur_cmnt_and_lit().cur_cmnt += 1;\n             } else {\n                 break\n             }\n@@ -552,7 +535,7 @@ pub trait PrintState<'a> {\n \n     fn print_comment(&mut self,\n                      cmnt: &comments::Comment) -> io::Result<()> {\n-        match cmnt.style {\n+        let r = match cmnt.style {\n             comments::Mixed => {\n                 assert_eq!(cmnt.lines.len(), 1);\n                 self.writer().zerobreak()?;\n@@ -600,11 +583,18 @@ pub trait PrintState<'a> {\n                 }\n                 self.writer().hardbreak()\n             }\n+        };\n+        match r {\n+            Ok(()) => {\n+                *self.cur_cmnt() = *self.cur_cmnt() + 1;\n+                Ok(())\n+            }\n+            Err(e) => Err(e),\n         }\n     }\n \n     fn next_comment(&mut self) -> Option<comments::Comment> {\n-        let cur_cmnt = self.cur_cmnt_and_lit().cur_cmnt;\n+        let cur_cmnt = *self.cur_cmnt();\n         match *self.comments() {\n             Some(ref cmnts) => {\n                 if cur_cmnt < cmnts.len() {\n@@ -619,8 +609,8 @@ pub trait PrintState<'a> {\n \n     fn print_literal(&mut self, lit: &ast::Lit) -> io::Result<()> {\n         self.maybe_print_comment(lit.span.lo)?;\n-        if let Some(ref ltrl) = self.next_lit(lit.span.lo) {\n-            return self.writer().word(&(*ltrl).lit);\n+        if let Some(ltrl) = self.next_lit(lit.span.lo) {\n+            return self.writer().word(&ltrl.lit);\n         }\n         match lit.node {\n             ast::LitKind::Str(st, style) => self.print_string(&st.as_str(), style),\n@@ -860,12 +850,16 @@ impl<'a> PrintState<'a> for State<'a> {\n         &mut self.comments\n     }\n \n-    fn cur_cmnt_and_lit(&mut self) -> &mut CurrentCommentAndLiteral {\n-        &mut self.cur_cmnt_and_lit\n+    fn cur_cmnt(&mut self) -> &mut usize {\n+        &mut self.cur_cmnt\n+    }\n+\n+    fn cur_lit(&mut self) -> Option<&comments::Literal> {\n+        self.literals.peek()\n     }\n \n-    fn literals(&self) -> &Option<Vec<comments::Literal>> {\n-        &self.literals\n+    fn bump_lit(&mut self) -> Option<comments::Literal> {\n+        self.literals.next()\n     }\n }\n \n@@ -3021,7 +3015,6 @@ impl<'a> State<'a> {\n             let next = next_pos.unwrap_or(cmnt.pos + BytePos(1));\n             if span.hi < cmnt.pos && cmnt.pos < next && span_line.line == comment_line.line {\n                 self.print_comment(cmnt)?;\n-                self.cur_cmnt_and_lit.cur_cmnt += 1;\n             }\n         }\n         Ok(())\n@@ -3035,7 +3028,6 @@ impl<'a> State<'a> {\n         }\n         while let Some(ref cmnt) = self.next_comment() {\n             self.print_comment(cmnt)?;\n-            self.cur_cmnt_and_lit.cur_cmnt += 1;\n         }\n         Ok(())\n     }"}]}