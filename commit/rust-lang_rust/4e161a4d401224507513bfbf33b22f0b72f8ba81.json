{"sha": "4e161a4d401224507513bfbf33b22f0b72f8ba81", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlMTYxYTRkNDAxMjI0NTA3NTEzYmZiZjMzYjIyZjBiNzJmOGJhODE=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-09-17T01:18:07Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-09-17T02:19:23Z"}, "message": "switch Drop to `&mut self`", "tree": {"sha": "59cd25a1d2132de130ddacc5ca2d25d39a511195", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59cd25a1d2132de130ddacc5ca2d25d39a511195"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e161a4d401224507513bfbf33b22f0b72f8ba81", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e161a4d401224507513bfbf33b22f0b72f8ba81", "html_url": "https://github.com/rust-lang/rust/commit/4e161a4d401224507513bfbf33b22f0b72f8ba81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e161a4d401224507513bfbf33b22f0b72f8ba81/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc89ade401e637fcb7d4d1d0b7f356ca359b0e7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc89ade401e637fcb7d4d1d0b7f356ca359b0e7d", "html_url": "https://github.com/rust-lang/rust/commit/bc89ade401e637fcb7d4d1d0b7f356ca359b0e7d"}], "stats": {"total": 395, "additions": 192, "deletions": 203}, "files": [{"sha": "3deaeb14b83f1b389c7f1ca8d4ee13de6e154ba3", "filename": "doc/tutorial-ffi.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/doc%2Ftutorial-ffi.md", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/doc%2Ftutorial-ffi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-ffi.md?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -321,7 +321,7 @@ impl<T: Send> Unique<T> {\n \n #[unsafe_destructor]\n impl<T: Send> Drop for Unique<T> {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         #[fixed_stack_segment];\n         #[inline(never)];\n         "}, {"sha": "d786bff58e1d417e60ff9e17516288991dd31073", "filename": "doc/tutorial.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -1898,7 +1898,7 @@ struct TimeBomb {\n }\n \n impl Drop for TimeBomb {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         for _ in range(0, self.explosivity) {\n             println(\"blam!\");\n         }"}, {"sha": "ca8000c984d4af53005eacfd917dc45515581838", "filename": "src/libextra/arc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Flibextra%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Flibextra%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Farc.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -313,7 +313,7 @@ struct PoisonOnFail {\n }\n \n impl Drop for PoisonOnFail {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         unsafe {\n             /* assert!(!*self.failed);\n                -- might be false in case of cond.wait() */"}, {"sha": "63c8e2010b07ac24f344689dbf92e34ad67c7f01", "filename": "src/libextra/arena.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Flibextra%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Flibextra%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Farena.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -93,7 +93,7 @@ fn chunk(size: uint, is_pod: bool) -> Chunk {\n \n #[unsafe_destructor]\n impl Drop for Arena {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         unsafe {\n             destroy_chunk(&self.head);\n             do self.chunks.each |chunk| {"}, {"sha": "30bce3a81708cafaf940db617210c2ebe0fe7053", "filename": "src/libextra/c_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Flibextra%2Fc_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Flibextra%2Fc_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fc_vec.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -56,7 +56,7 @@ struct DtorRes {\n \n #[unsafe_destructor]\n impl Drop for DtorRes {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         match self.dtor {\n             option::None => (),\n             option::Some(f) => f()"}, {"sha": "da5d5d00e80cf07aaed1b16f16a1b1fa99e454a8", "filename": "src/libextra/dlist.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Flibextra%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Flibextra%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fdlist.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -415,14 +415,11 @@ impl<T: Ord> DList<T> {\n \n #[unsafe_destructor]\n impl<T> Drop for DList<T> {\n-    fn drop(&self) {\n-        let mut_self = unsafe {\n-            cast::transmute_mut(self)\n-        };\n+    fn drop(&mut self) {\n         // Dissolve the dlist in backwards direction\n         // Just dropping the list_head can lead to stack exhaustion\n         // when length is >> 1_000_000\n-        let mut tail = mut_self.list_tail;\n+        let mut tail = self.list_tail;\n         loop {\n             match tail.resolve() {\n                 None => break,\n@@ -432,9 +429,9 @@ impl<T> Drop for DList<T> {\n                 }\n             }\n         }\n-        mut_self.length = 0;\n-        mut_self.list_head = None;\n-        mut_self.list_tail = Rawlink::none();\n+        self.length = 0;\n+        self.list_head = None;\n+        self.list_tail = Rawlink::none();\n     }\n }\n "}, {"sha": "74a551c6f6d560fb7d0b3dee859df088bf307108", "filename": "src/libextra/future.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Flibextra%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Flibextra%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ffuture.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -43,7 +43,7 @@ pub struct Future<A> {\n // over ~fn's that have pipes and so forth within!\n #[unsafe_destructor]\n impl<A> Drop for Future<A> {\n-    fn drop(&self) {}\n+    fn drop(&mut self) {}\n }\n \n enum FutureState<A> {"}, {"sha": "fa7cd9025eb7ce2bd65f1acc6945e7dfcff5ebc2", "filename": "src/libextra/rc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Flibextra%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Flibextra%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Frc.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -73,7 +73,7 @@ impl<T> Rc<T> {\n \n #[unsafe_destructor]\n impl<T> Drop for Rc<T> {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         unsafe {\n             if self.ptr.is_not_null() {\n                 (*self.ptr).count -= 1;\n@@ -218,7 +218,7 @@ impl<T> RcMut<T> {\n \n #[unsafe_destructor]\n impl<T> Drop for RcMut<T> {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         unsafe {\n             if self.ptr.is_not_null() {\n                 (*self.ptr).count -= 1;"}, {"sha": "46244c15a832eb2a1d472cce72c8783db2f48620", "filename": "src/libextra/task_pool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Flibextra%2Ftask_pool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Flibextra%2Ftask_pool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftask_pool.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -34,7 +34,7 @@ pub struct TaskPool<T> {\n \n #[unsafe_destructor]\n impl<T> Drop for TaskPool<T> {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         for channel in self.channels.iter() {\n             channel.send(Quit);\n         }"}, {"sha": "4d3b5ae035edcf8d4a18ed5569d8936a3c878f1f", "filename": "src/libextra/workcache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Flibextra%2Fworkcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Flibextra%2Fworkcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fworkcache.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -201,7 +201,7 @@ impl Database {\n // FIXME #4330: use &mut self here\n #[unsafe_destructor]\n impl Drop for Database {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         if self.db_dirty {\n             self.save();\n         }"}, {"sha": "1fbbc1db05a6ddc838c6ca85b15b318828cc896b", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -105,7 +105,7 @@ pub mod jit {\n     impl Engine for LLVMJITData {}\n \n     impl Drop for LLVMJITData {\n-        fn drop(&self) {\n+        fn drop(&mut self) {\n             unsafe {\n                 llvm::LLVMDisposeExecutionEngine(self.ee);\n                 llvm::LLVMContextDispose(self.llcx);"}, {"sha": "49798288d40d0820b4343e4911b787be5176ab33", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -2325,7 +2325,7 @@ pub struct target_data_res {\n }\n \n impl Drop for target_data_res {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         unsafe {\n             llvm::LLVMDisposeTargetData(self.TD);\n         }\n@@ -2361,7 +2361,7 @@ pub struct pass_manager_res {\n }\n \n impl Drop for pass_manager_res {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         unsafe {\n             llvm::LLVMDisposePassManager(self.PM);\n         }\n@@ -2397,7 +2397,7 @@ pub struct object_file_res {\n }\n \n impl Drop for object_file_res {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         unsafe {\n             llvm::LLVMDisposeObjectFile(self.ObjectFile);\n         }\n@@ -2434,7 +2434,7 @@ pub struct section_iter_res {\n }\n \n impl Drop for section_iter_res {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         unsafe {\n             llvm::LLVMDisposeSectionIterator(self.SI);\n         }"}, {"sha": "275801bc0c118a4f08e6c795bcfa0b4a2f03e768", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -109,7 +109,7 @@ pub struct _InsnCtxt { _x: () }\n \n #[unsafe_destructor]\n impl Drop for _InsnCtxt {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         do local_data::modify(task_local_insn_key) |c| {\n             do c.map_move |ctx| {\n                 let mut ctx = (*ctx).clone();\n@@ -159,7 +159,7 @@ impl<'self> StatRecorder<'self> {\n \n #[unsafe_destructor]\n impl<'self> Drop for StatRecorder<'self> {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         if self.ccx.sess.trans_stats() {\n             let end = time::precise_time_ns();\n             let elapsed = ((end - self.start) / 1_000_000) as uint;"}, {"sha": "b659a93f5f099d148c7715214a3519b627159041", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -111,7 +111,7 @@ pub struct BuilderRef_res {\n }\n \n impl Drop for BuilderRef_res {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         unsafe {\n             llvm::LLVMDisposeBuilder(self.B);\n         }"}, {"sha": "506e427ce410abb9b2a7f62631c2579f762aa291", "filename": "src/librustc/middle/trans/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -273,7 +273,7 @@ impl CrateContext {\n \n #[unsafe_destructor]\n impl Drop for CrateContext {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         unset_task_llcx();\n     }\n }"}, {"sha": "bca2ceb2f84a0505d224a574c69dfa8af4ab7910", "filename": "src/librustc/rustc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Flibrustc%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Flibrustc%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Frustc.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -342,7 +342,7 @@ pub fn monitor(f: ~fn(diagnostic::Emitter)) {\n         }\n \n         impl Drop for finally {\n-            fn drop(&self) { self.ch.send(done); }\n+            fn drop(&mut self) { self.ch.send(done); }\n         }\n \n         let _finally = finally { ch: ch };"}, {"sha": "46620319a8212742da584b09314fd36e2c2a392a", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -40,7 +40,7 @@ pub struct _indenter {\n }\n \n impl Drop for _indenter {\n-    fn drop(&self) { debug!(\"<<\"); }\n+    fn drop(&mut self) { debug!(\"<<\"); }\n }\n \n pub fn _indenter(_i: ()) -> _indenter {"}, {"sha": "23c55488332ad77e277188b52d46d4c73fac4a2e", "filename": "src/librustdoc/demo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Flibrustdoc%2Fdemo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Flibrustdoc%2Fdemo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdemo.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -127,7 +127,7 @@ struct Bored {\n }\n \n impl Drop for Bored {\n-  fn drop(&self) { }\n+  fn drop(&mut self) { }\n }\n \n /**"}, {"sha": "75598b300a37137ba80041c0f2933d4da0ec9f99", "filename": "src/libstd/c_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Flibstd%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Flibstd%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_str.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -127,7 +127,7 @@ impl CString {\n }\n \n impl Drop for CString {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         #[fixed_stack_segment]; #[inline(never)];\n         if self.owns_buffer_ {\n             unsafe {"}, {"sha": "954b8bd73300c5ede29899095ad86b85a015fb84", "filename": "src/libstd/condition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Flibstd%2Fcondition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Flibstd%2Fcondition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcondition.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -87,7 +87,7 @@ struct Guard<'self, T, U> {\n \n #[unsafe_destructor]\n impl<'self, T, U> Drop for Guard<'self, T, U> {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         debug!(\"Guard: popping handler from TLS\");\n         let curr = local_data::pop(self.cond.key);\n         match curr {"}, {"sha": "890a53690d96a8574d55355b38ca945fc90b913b", "filename": "src/libstd/io.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Flibstd%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Flibstd%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -1021,7 +1021,7 @@ impl FILERes {\n }\n \n impl Drop for FILERes {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         #[fixed_stack_segment]; #[inline(never)];\n \n         unsafe {\n@@ -1302,7 +1302,7 @@ impl FdRes {\n }\n \n impl Drop for FdRes {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         #[fixed_stack_segment]; #[inline(never)];\n \n         unsafe {\n@@ -1832,7 +1832,7 @@ pub mod fsync {\n \n     #[unsafe_destructor]\n     impl<T> Drop for Res<T> {\n-        fn drop(&self) {\n+        fn drop(&mut self) {\n             match self.arg.opt_level {\n                 None => (),\n                 Some(level) => {"}, {"sha": "1d4d827434b96518ba0e4de58eb311ae3afd401d", "filename": "src/libstd/ops.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Flibstd%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Flibstd%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fops.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -14,7 +14,7 @@\n \n #[lang=\"drop\"]\n pub trait Drop {\n-    fn drop(&self);\n+    fn drop(&mut self);\n }\n \n #[lang=\"add\"]\n@@ -95,7 +95,7 @@ mod bench {\n     }\n \n     impl Drop for HasDtor {\n-        fn drop(&self) {\n+        fn drop(&mut self) {\n         }\n     }\n \n@@ -105,4 +105,4 @@ mod bench {\n             HasDtor { x : 10 };\n         }\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "9b6d0a77cd83b6945abd8d150d2ab3baa3e0b3ef", "filename": "src/libstd/option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Flibstd%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Flibstd%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foption.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -573,7 +573,7 @@ mod tests {\n \n         #[unsafe_destructor]\n         impl ::ops::Drop for R {\n-           fn drop(&self) { *(self.i) += 1; }\n+           fn drop(&mut self) { *(self.i) += 1; }\n         }\n \n         fn R(i: @mut int) -> R {"}, {"sha": "6fe6a1e47e915570802830dc2b2c0fa7d8c2f460", "filename": "src/libstd/os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -1481,7 +1481,7 @@ impl MemoryMap {\n \n #[cfg(unix)]\n impl Drop for MemoryMap {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         #[fixed_stack_segment]; #[inline(never)];\n \n         unsafe {\n@@ -1607,7 +1607,7 @@ impl MemoryMap {\n \n #[cfg(windows)]\n impl Drop for MemoryMap {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         #[fixed_stack_segment]; #[inline(never)];\n \n         use libc::types::os::arch::extra::{LPCVOID, HANDLE};"}, {"sha": "a8cd9bd66d7de36a0536324f6d91e75fcb2ec96b", "filename": "src/libstd/rt/comm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Flibstd%2Frt%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Flibstd%2Frt%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fcomm.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -363,7 +363,7 @@ impl<T> Peekable<T> for PortOne<T> {\n \n #[unsafe_destructor]\n impl<T> Drop for ChanOne<T> {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         if self.suppress_finalize { return }\n \n         unsafe {\n@@ -391,7 +391,7 @@ impl<T> Drop for ChanOne<T> {\n \n #[unsafe_destructor]\n impl<T> Drop for PortOne<T> {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         if self.suppress_finalize { return }\n \n         unsafe {"}, {"sha": "92dc62490ed1b1479bb46093cce62898c9501ea2", "filename": "src/libstd/rt/kill.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Flibstd%2Frt%2Fkill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Flibstd%2Frt%2Fkill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fkill.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -235,7 +235,7 @@ pub struct Death {\n impl Drop for KillFlag {\n     // Letting a KillFlag with a task inside get dropped would leak the task.\n     // We could free it here, but the task should get awoken by hand somehow.\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         match self.load(Relaxed) {\n             KILL_RUNNING | KILL_KILLED => { },\n             _ => rtabort!(\"can't drop kill flag with a blocked task inside!\"),\n@@ -685,7 +685,7 @@ impl Death {\n }\n \n impl Drop for Death {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         // Mustn't be in an atomic or unkillable section at task death.\n         rtassert!(self.unkillable == 0);\n         rtassert!(self.wont_sleep == 0);"}, {"sha": "9d0a0e0ac25d122d2333d171974b6d3dc984af61", "filename": "src/libstd/rt/local_heap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Flibstd%2Frt%2Flocal_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Flibstd%2Frt%2Flocal_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flocal_heap.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -78,7 +78,7 @@ impl LocalHeap {\n \n impl Drop for LocalHeap {\n     #[fixed_stack_segment] #[inline(never)]\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         unsafe {\n             rust_delete_boxed_region(self.boxed_region);\n             rust_delete_memory_region(self.memory_region);"}, {"sha": "0a6890f627bbb127aa87b3b41d20a4b4c7790229", "filename": "src/libstd/rt/rc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Flibstd%2Frt%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Flibstd%2Frt%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Frc.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -74,7 +74,7 @@ impl<T> RC<T> {\n \n #[unsafe_destructor]\n impl<T> Drop for RC<T> {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         assert!(self.refcount() > 0);\n \n         unsafe {"}, {"sha": "854fdadfb00d24c9e2bafba96ac04fc56117bb51", "filename": "src/libstd/rt/sched.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Flibstd%2Frt%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Flibstd%2Frt%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fsched.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -1200,15 +1200,15 @@ mod test {\n             struct S { field: () }\n \n             impl Drop for S {\n-                fn drop(&self) {\n-                        let _foo = @0;\n+                fn drop(&mut self) {\n+                    let _foo = @0;\n                 }\n             }\n \n             let s = S { field: () };\n \n             do spawntask {\n-                        let _ss = &s;\n+                let _ss = &s;\n             }\n         }\n     }"}, {"sha": "fddee5882b9acf6c8dcdf8da54574ce52fde7c03", "filename": "src/libstd/rt/stack.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Flibstd%2Frt%2Fstack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Flibstd%2Frt%2Fstack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fstack.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -53,7 +53,7 @@ impl StackSegment {\n }\n \n impl Drop for StackSegment {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         #[fixed_stack_segment]; #[inline(never)];\n \n         unsafe {"}, {"sha": "09f5ee7febb3ecc19bc777a0cb60e57909fb581f", "filename": "src/libstd/rt/task.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Flibstd%2Frt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Flibstd%2Frt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftask.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -328,7 +328,7 @@ impl Task {\n }\n \n impl Drop for Task {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         rtdebug!(\"called drop for a task: %u\", borrow::to_uint(self));\n         rtassert!(self.destroyed)\n     }"}, {"sha": "8b64fda21364a2ca9a40fef1b22bb1bbf858399a", "filename": "src/libstd/rt/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Flibstd%2Frt%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Flibstd%2Frt%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fthread.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -46,7 +46,7 @@ impl Thread {\n }\n \n impl Drop for Thread {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         #[fixed_stack_segment]; #[inline(never)];\n \n         assert!(self.joined);"}, {"sha": "f3b97441e8e2596aee4b625a4c15d031441d4458", "filename": "src/libstd/rt/uv/uvio.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -187,7 +187,7 @@ impl UvEventLoop {\n }\n \n impl Drop for UvEventLoop {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         // XXX: Need mutable finalizer\n         let this = unsafe {\n             transmute::<&UvEventLoop, &mut UvEventLoop>(self)\n@@ -351,7 +351,7 @@ impl RemoteCallback for UvRemoteCallback {\n }\n \n impl Drop for UvRemoteCallback {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         unsafe {\n             let this: &mut UvRemoteCallback = cast::transmute_mut(self);\n             do this.exit_flag.with |should_exit| {\n@@ -647,7 +647,7 @@ impl UvTcpListener {\n }\n \n impl Drop for UvTcpListener {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         // XXX need mutable finalizer\n         let self_ = unsafe { transmute::<&UvTcpListener, &mut UvTcpListener>(self) };\n         do self_.home_for_io_with_sched |self_, scheduler| {\n@@ -762,7 +762,7 @@ impl HomingIO for UvTcpStream {\n }\n \n impl Drop for UvTcpStream {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         // XXX need mutable finalizer\n         let this = unsafe { transmute::<&UvTcpStream, &mut UvTcpStream>(self) };\n         do this.home_for_io_with_sched |self_, scheduler| {\n@@ -921,7 +921,7 @@ impl HomingIO for UvUdpSocket {\n }\n \n impl Drop for UvUdpSocket {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         // XXX need mutable finalizer\n         let this = unsafe { transmute::<&UvUdpSocket, &mut UvUdpSocket>(self) };\n         do this.home_for_io_with_sched |self_, scheduler| {\n@@ -1139,7 +1139,7 @@ impl UvTimer {\n }\n \n impl Drop for UvTimer {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         let self_ = unsafe { transmute::<&UvTimer, &mut UvTimer>(self) };\n         do self_.home_for_io_with_sched |self_, scheduler| {\n             rtdebug!(\"closing UvTimer\");\n@@ -1253,7 +1253,7 @@ impl UvFileStream {\n }\n \n impl Drop for UvFileStream {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         let self_ = unsafe { transmute::<&UvFileStream, &mut UvFileStream>(self) };\n         if self.close_on_drop {\n             do self_.home_for_io_with_sched |self_, scheduler| {"}, {"sha": "83646dc59b35ef508aca0955bed5e5aa3e1a2b02", "filename": "src/libstd/run.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Flibstd%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Flibstd%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frun.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -436,12 +436,9 @@ impl Process {\n }\n \n impl Drop for Process {\n-    fn drop(&self) {\n-        // FIXME(#4330) Need self by value to get mutability.\n-        let mut_self: &mut Process = unsafe { cast::transmute(self) };\n-\n-        mut_self.finish();\n-        mut_self.close_outputs();\n+    fn drop(&mut self) {\n+        self.finish();\n+        self.close_outputs();\n         free_handle(self.handle);\n     }\n }"}, {"sha": "58cea8d7d0ecb3b03fbe1f72bd772dd9ae3e68bb", "filename": "src/libstd/task/spawn.rs", "status": "modified", "additions": 28, "deletions": 33, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Flibstd%2Ftask%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Flibstd%2Ftask%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Fspawn.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -319,40 +319,35 @@ pub struct Taskgroup {\n \n impl Drop for Taskgroup {\n     // Runs on task exit.\n-    fn drop(&self) {\n-        unsafe {\n-            // FIXME(#4330) Need self by value to get mutability.\n-            let this: &mut Taskgroup = transmute(self);\n-\n-            // If we are failing, the whole taskgroup needs to die.\n-            do RuntimeGlue::with_task_handle_and_failing |me, failing| {\n-                if failing {\n-                    for x in this.notifier.mut_iter() {\n-                        x.failed = true;\n-                    }\n-                    // Take everybody down with us. After this point, every\n-                    // other task in the group will see 'tg' as none, which\n-                    // indicates the whole taskgroup is failing (and forbids\n-                    // new spawns from succeeding).\n-                    let tg = do access_group(&self.tasks) |tg| { tg.take() };\n-                    // It's safe to send kill signals outside the lock, because\n-                    // we have a refcount on all kill-handles in the group.\n-                    kill_taskgroup(tg, me);\n-                } else {\n-                    // Remove ourselves from the group(s).\n-                    do access_group(&self.tasks) |tg| {\n-                        leave_taskgroup(tg, me, true);\n-                    }\n+    fn drop(&mut self) {\n+        // If we are failing, the whole taskgroup needs to die.\n+        do RuntimeGlue::with_task_handle_and_failing |me, failing| {\n+            if failing {\n+                for x in self.notifier.mut_iter() {\n+                    x.failed = true;\n+                }\n+                // Take everybody down with us. After this point, every\n+                // other task in the group will see 'tg' as none, which\n+                // indicates the whole taskgroup is failing (and forbids\n+                // new spawns from succeeding).\n+                let tg = do access_group(&self.tasks) |tg| { tg.take() };\n+                // It's safe to send kill signals outside the lock, because\n+                // we have a refcount on all kill-handles in the group.\n+                kill_taskgroup(tg, me);\n+            } else {\n+                // Remove ourselves from the group(s).\n+                do access_group(&self.tasks) |tg| {\n+                    leave_taskgroup(tg, me, true);\n                 }\n-                // It doesn't matter whether this happens before or after dealing\n-                // with our own taskgroup, so long as both happen before we die.\n-                // We remove ourself from every ancestor we can, so no cleanup; no\n-                // break.\n-                do each_ancestor(&mut this.ancestors, |_| {}) |ancestor_group| {\n-                    leave_taskgroup(ancestor_group, me, false);\n-                    true\n-                };\n             }\n+            // It doesn't matter whether this happens before or after dealing\n+            // with our own taskgroup, so long as both happen before we die.\n+            // We remove ourself from every ancestor we can, so no cleanup; no\n+            // break.\n+            do each_ancestor(&mut self.ancestors, |_| {}) |ancestor_group| {\n+                leave_taskgroup(ancestor_group, me, false);\n+                true\n+            };\n         }\n     }\n }\n@@ -377,7 +372,7 @@ struct AutoNotify {\n }\n \n impl Drop for AutoNotify {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         let result = if self.failed { Failure } else { Success };\n         self.notify_chan.send(result);\n     }"}, {"sha": "a32b52db1cc0aaaa8889a480eab2c53d7ba36a87", "filename": "src/libstd/unstable/atomics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Flibstd%2Funstable%2Fatomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Flibstd%2Funstable%2Fatomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fatomics.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -338,7 +338,7 @@ impl<T> AtomicOption<T> {\n \n #[unsafe_destructor]\n impl<T> Drop for AtomicOption<T> {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         // This will ensure that the contained data is\n         // destroyed, unless it's null.\n         unsafe {"}, {"sha": "4c92d9c2e362c5272edbaf4e3e2bb399db614140", "filename": "src/libstd/unstable/dynamic_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Flibstd%2Funstable%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Flibstd%2Funstable%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fdynamic_lib.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -26,7 +26,7 @@ use result::*;\n pub struct DynamicLibrary { priv handle: *libc::c_void }\n \n impl Drop for DynamicLibrary {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         match do dl::check_for_errors_in {\n             unsafe {\n                 dl::close(self.handle)"}, {"sha": "6833ca6d7cfef6f2ee086ff3d54a90896332a14a", "filename": "src/libstd/unstable/finally.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Flibstd%2Funstable%2Ffinally.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Flibstd%2Funstable%2Ffinally.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Ffinally.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -64,7 +64,7 @@ struct Finallyalizer<'self> {\n \n #[unsafe_destructor]\n impl<'self> Drop for Finallyalizer<'self> {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         (self.dtor)();\n     }\n }"}, {"sha": "1dafeb27a0e32afcaabef5bf7f247b0f7d9f4eed", "filename": "src/libstd/unstable/sync.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Flibstd%2Funstable%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Flibstd%2Funstable%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fsync.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -220,7 +220,7 @@ impl<T: Send> Clone for UnsafeArc<T> {\n \n #[unsafe_destructor]\n impl<T> Drop for UnsafeArc<T>{\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         unsafe {\n             // Happens when destructing an unwrapper's handle and from `#[unsafe_no_drop_flag]`\n             if self.data.is_null() {\n@@ -308,7 +308,7 @@ pub struct LittleLock {\n }\n \n impl Drop for LittleLock {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         unsafe {\n             rust_destroy_little_lock(self.l);\n         }"}, {"sha": "e8bcceb85fa689ed9574281cab1e752722f0c45b", "filename": "src/libstd/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Flibstd%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Flibstd%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Futil.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -88,7 +88,7 @@ impl NonCopyable {\n }\n \n impl Drop for NonCopyable {\n-    fn drop(&self) { }\n+    fn drop(&mut self) { }\n }\n \n /// A type with no inhabitants\n@@ -188,7 +188,7 @@ mod tests {\n         struct Foo { five: int }\n \n         impl Drop for Foo {\n-            fn drop(&self) {\n+            fn drop(&mut self) {\n                 assert_eq!(self.five, 5);\n                 unsafe {\n                     did_run = true;"}, {"sha": "4aad5c24d0f3d8e07e3355f38bd32d4908d844a1", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -341,7 +341,7 @@ pub struct Parser {\n #[unsafe_destructor]\n impl Drop for Parser {\n     /* do not copy the parser; its state is tied to outside state */\n-    fn drop(&self) {}\n+    fn drop(&mut self) {}\n }\n \n fn is_plain_ident_or_underscore(t: &token::Token) -> bool {"}, {"sha": "8ed65628f54f9277ef5d90fee629b5aa9033ca36", "filename": "src/test/auxiliary/issue-2526.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Fauxiliary%2Fissue-2526.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Fauxiliary%2Fissue-2526.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-2526.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -21,7 +21,7 @@ struct arc_destruct<T> {\n \n #[unsafe_destructor]\n impl<T:Freeze> Drop for arc_destruct<T> {\n-    fn drop(&self) {}\n+    fn drop(&mut self) {}\n }\n \n fn arc_destruct<T:Freeze>(data: int) -> arc_destruct<T> {\n@@ -43,7 +43,7 @@ struct context_res {\n }\n \n impl Drop for context_res {\n-    fn drop(&self) {}\n+    fn drop(&mut self) {}\n }\n \n fn context_res() -> context_res {"}, {"sha": "f9bbfa7ecce07ede44f88770e50ec79f029a9e89", "filename": "src/test/auxiliary/issue-3012-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Fauxiliary%2Fissue-3012-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Fauxiliary%2Fissue-3012-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-3012-1.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -19,7 +19,7 @@ pub mod socket {\n     }\n \n     impl Drop for socket_handle {\n-        fn drop(&self) {\n+        fn drop(&mut self) {\n             /* c::close(self.sockfd); */\n         }\n     }"}, {"sha": "b311ee35674672fe5f22f323ddf98a5c0b2bed7a", "filename": "src/test/auxiliary/issue2170lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Fauxiliary%2Fissue2170lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Fauxiliary%2Fissue2170lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue2170lib.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -16,7 +16,7 @@ pub struct rsrc {\n }\n \n impl Drop for rsrc {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         foo(self.x);\n     }\n }"}, {"sha": "fe403a56a4be6524f9ad3bce538560f8f19091f7", "filename": "src/test/auxiliary/moves_based_on_type_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Fauxiliary%2Fmoves_based_on_type_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Fauxiliary%2Fmoves_based_on_type_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fmoves_based_on_type_lib.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -15,7 +15,7 @@ pub struct S {\n }\n \n impl Drop for S {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         println(\"goodbye\");\n     }\n }"}, {"sha": "f383f7a101fcca9cb8d0a35ada3c35124828889a", "filename": "src/test/bench/task-perf-alloc-unwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -58,7 +58,7 @@ struct r {\n \n #[unsafe_destructor]\n impl Drop for r {\n-    fn drop(&self) {}\n+    fn drop(&mut self) {}\n }\n \n fn r(l: @nillist) -> r {"}, {"sha": "3d1cca46085dbf06f8d9f95a890360b85d309391", "filename": "src/test/compile-fail/bind-by-move-neither-can-live-while-the-other-survives-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-1.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -11,7 +11,7 @@\n struct X { x: () }\n \n impl Drop for X {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         error!(\"destructor runs\");\n     }\n }"}, {"sha": "a1803a621a53fc2996f4ddea13508ddcc58a5d0d", "filename": "src/test/compile-fail/bind-by-move-neither-can-live-while-the-other-survives-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-2.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -11,7 +11,7 @@\n struct X { x: (), }\n \n impl Drop for X {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         error!(\"destructor runs\");\n     }\n }"}, {"sha": "34a9c0b8fc26d01fdcdbcc6ead782b013377ef62", "filename": "src/test/compile-fail/bind-by-move-neither-can-live-while-the-other-survives-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-3.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -11,7 +11,7 @@\n struct X { x: (), }\n \n impl Drop for X {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         error!(\"destructor runs\");\n     }\n }"}, {"sha": "2aa3379993b7abaf195f247baa57c9707d592a04", "filename": "src/test/compile-fail/bind-by-move-neither-can-live-while-the-other-survives-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-4.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -11,7 +11,7 @@\n struct X { x: (), }\n \n impl Drop for X {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         error!(\"destructor runs\");\n     }\n }"}, {"sha": "7143ce0252b733c4b5683f3d2453fe753d16a317", "filename": "src/test/compile-fail/bind-by-move-no-sub-bindings.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-sub-bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-sub-bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-sub-bindings.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -11,7 +11,7 @@\n struct X { x: (), }\n \n impl Drop for X {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         error!(\"destructor runs\");\n     }\n }"}, {"sha": "df42244fd0fc8cfc669210999594c309f2f577e4", "filename": "src/test/compile-fail/block-must-not-have-result-res.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Fcompile-fail%2Fblock-must-not-have-result-res.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Fcompile-fail%2Fblock-must-not-have-result-res.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblock-must-not-have-result-res.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -13,7 +13,7 @@\n struct r;\n \n impl Drop for r {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         true\n     }\n }"}, {"sha": "1c725a0dd0e036ba6f6e6823c90ded1e54f5da89", "filename": "src/test/compile-fail/borrowck-borrowed-uniq-rvalue-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue-2.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -14,7 +14,7 @@ struct defer<'self> {\n \n #[unsafe_destructor]\n impl<'self> Drop for defer<'self> {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         unsafe {\n             error!(\"%?\", self.x);\n         }"}, {"sha": "ade9ce9568f958a5b758c6a8abefcd3576cac1c8", "filename": "src/test/compile-fail/borrowck-move-out-of-struct-with-dtor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-struct-with-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-struct-with-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-struct-with-dtor.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -1,6 +1,6 @@\n struct S {f:~str}\n impl Drop for S {\n-    fn drop(&self) { println(self.f); }\n+    fn drop(&mut self) { println(self.f); }\n }\n \n fn move_in_match() {"}, {"sha": "1a0fc9e3b3b4d7eb6c4d8136c01c42a40cc915a2", "filename": "src/test/compile-fail/borrowck-move-out-of-tuple-struct-with-dtor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-tuple-struct-with-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-tuple-struct-with-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-tuple-struct-with-dtor.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -1,6 +1,6 @@\n struct S(~str);\n impl Drop for S {\n-    fn drop(&self) { println(**self); }\n+    fn drop(&mut self) { println(**self); }\n }\n \n fn move_in_match() {"}, {"sha": "c5f5861de825d778395d9a6d85b9f090af2edb4d", "filename": "src/test/compile-fail/copy-a-resource.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Fcompile-fail%2Fcopy-a-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Fcompile-fail%2Fcopy-a-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcopy-a-resource.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -13,7 +13,7 @@ struct foo {\n }\n \n impl Drop for foo {\n-    fn drop(&self) {}\n+    fn drop(&mut self) {}\n }\n \n fn foo(i:int) -> foo {"}, {"sha": "2a4d46941b9771312b1f37dd2f60821d4573c7b1", "filename": "src/test/compile-fail/disallowed-deconstructing-destructing-struct-let.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Fcompile-fail%2Fdisallowed-deconstructing-destructing-struct-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Fcompile-fail%2Fdisallowed-deconstructing-destructing-struct-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdisallowed-deconstructing-destructing-struct-let.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -13,7 +13,7 @@ struct X {\n }\n \n impl Drop for X {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         error!(\"value: %s\", self.x);\n     }\n }"}, {"sha": "ecb02c4307d3e1427a14952577eb827e5e755118", "filename": "src/test/compile-fail/disallowed-deconstructing-destructing-struct-match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Fcompile-fail%2Fdisallowed-deconstructing-destructing-struct-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Fcompile-fail%2Fdisallowed-deconstructing-destructing-struct-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdisallowed-deconstructing-destructing-struct-match.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -13,7 +13,7 @@ struct X {\n }\n \n impl Drop for X {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         error!(\"value: %s\", self.x);\n     }\n }"}, {"sha": "e65d5966b277a7541df0c0dc3bb03ecb75d5ef3f", "filename": "src/test/compile-fail/drop-on-non-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Fcompile-fail%2Fdrop-on-non-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Fcompile-fail%2Fdrop-on-non-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdrop-on-non-struct.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -12,7 +12,7 @@ type Foo = @[u8];\n \n impl Drop for Foo {   //~ ERROR the Drop trait may only be implemented\n //~^ ERROR cannot provide an extension implementation\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         println(\"kaboom\");\n     }\n }"}, {"sha": "4a34f9c42be4032f04654e8ce33a3568903fc69a", "filename": "src/test/compile-fail/explicit-call-to-dtor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Fcompile-fail%2Fexplicit-call-to-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Fcompile-fail%2Fexplicit-call-to-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fexplicit-call-to-dtor.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -13,7 +13,7 @@ struct Foo {\n }\n \n impl Drop for Foo {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         println(\"kaboom\");\n     }\n }"}, {"sha": "2a5c260910b6f25b9cc32d445584af97a6f1771c", "filename": "src/test/compile-fail/explicit-call-to-supertrait-dtor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Fcompile-fail%2Fexplicit-call-to-supertrait-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Fcompile-fail%2Fexplicit-call-to-supertrait-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fexplicit-call-to-supertrait-dtor.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -17,7 +17,7 @@ trait Bar : Drop {\n }\n \n impl Drop for Foo {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         println(\"kaboom\");\n     }\n }"}, {"sha": "02db789519596d6bdad7fa0731d5d470b353157c", "filename": "src/test/compile-fail/functional-struct-update-noncopyable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Fcompile-fail%2Ffunctional-struct-update-noncopyable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Fcompile-fail%2Ffunctional-struct-update-noncopyable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffunctional-struct-update-noncopyable.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -17,7 +17,7 @@ use extra::arc::*;\n struct A { y: Arc<int>, x: Arc<int> }\n \n impl Drop for A {\n-    fn drop(&self) { println(fmt!(\"x=%?\", self.x.get())); }\n+    fn drop(&mut self) { println(fmt!(\"x=%?\", self.x.get())); }\n }\n fn main() {\n     let a = A { y: Arc::new(1), x: Arc::new(2) };"}, {"sha": "5822b35c74ec64e3b1e5d5357294531a8b1bc693", "filename": "src/test/compile-fail/issue-2548.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Fcompile-fail%2Fissue-2548.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Fcompile-fail%2Fissue-2548.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2548.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -18,7 +18,7 @@ struct foo {\n \n #[unsafe_destructor]\n impl Drop for foo {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         unsafe {\n             println(\"Goodbye, World!\");\n             *self.x += 1;"}, {"sha": "bf00dc139d0f594ce248cfc4af7b74024a27be48", "filename": "src/test/compile-fail/issue-2823.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Fcompile-fail%2Fissue-2823.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Fcompile-fail%2Fissue-2823.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2823.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -13,7 +13,7 @@ struct C {\n }\n \n impl Drop for C {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         error!(\"dropping: %?\", self.x);\n     }\n }"}, {"sha": "5be0a1e708babe6a4a6976e9087206b78595a6dc", "filename": "src/test/compile-fail/issue-3214.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Fcompile-fail%2Fissue-3214.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Fcompile-fail%2Fissue-3214.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3214.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -15,7 +15,7 @@ fn foo<T>() {\n     }\n \n     impl<T> Drop for foo<T> {\n-        fn drop(&self) {}\n+        fn drop(&mut self) {}\n     }\n }\n fn main() { }"}, {"sha": "7ab7aeea85cadb86cc2f0001edd306bb16ed7ed5", "filename": "src/test/compile-fail/kindck-destructor-owned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Fcompile-fail%2Fkindck-destructor-owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Fcompile-fail%2Fkindck-destructor-owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-destructor-owned.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -3,7 +3,7 @@ struct Foo {\n }\n \n impl Drop for Foo { //~ ERROR cannot implement a destructor on a structure that does not satisfy Send\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         *self.f = 10;\n     }\n }"}, {"sha": "e7b897ad9068383d6d0393235eda562ae8cb6348", "filename": "src/test/compile-fail/no-send-res-ports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -20,7 +20,7 @@ fn main() {\n \n     #[unsafe_destructor]\n     impl Drop for foo {\n-        fn drop(&self) {}\n+        fn drop(&mut self) {}\n     }\n \n     fn foo(x: Port<()>) -> foo {"}, {"sha": "9d057998c790d73579736569725f2e199d71e388", "filename": "src/test/compile-fail/noncopyable-class.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Fcompile-fail%2Fnoncopyable-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Fcompile-fail%2Fnoncopyable-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnoncopyable-class.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -15,7 +15,7 @@ struct bar {\n }\n \n impl Drop for bar {\n-    fn drop(&self) {}\n+    fn drop(&mut self) {}\n }\n \n fn bar(x:int) -> bar {"}, {"sha": "822c6812116346fa4ae6e27d112d785af71ef915", "filename": "src/test/compile-fail/pinned-deep-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Fcompile-fail%2Fpinned-deep-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Fcompile-fail%2Fpinned-deep-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpinned-deep-copy.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -14,7 +14,7 @@ struct r {\n \n #[unsafe_destructor]\n impl Drop for r {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         unsafe {\n             *(self.i) = *(self.i) + 1;\n         }"}, {"sha": "ab3f8496eaf26352446158e06ab43a841a571b23", "filename": "src/test/compile-fail/repeat-to-run-dtor-twice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Fcompile-fail%2Frepeat-to-run-dtor-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Fcompile-fail%2Frepeat-to-run-dtor-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frepeat-to-run-dtor-twice.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -17,7 +17,7 @@ struct Foo {\n }\n \n impl Drop for Foo {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         println(\"Goodbye!\");\n     }\n }"}, {"sha": "a9a7966ebeb9858eb5cff2debfaf6b6f75d9e874", "filename": "src/test/compile-fail/unique-object-noncopyable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Fcompile-fail%2Funique-object-noncopyable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Fcompile-fail%2Funique-object-noncopyable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-object-noncopyable.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -17,7 +17,7 @@ struct Bar {\n }\n \n impl Drop for Bar {\n-    fn drop(&self) {}\n+    fn drop(&mut self) {}\n }\n \n impl Foo for Bar {"}, {"sha": "50bb074fc7ac7f09cbffb441a2e10a6ed7d19e7b", "filename": "src/test/compile-fail/unique-pinned-nocopy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -13,7 +13,7 @@ struct r {\n }\n \n impl Drop for r {\n-    fn drop(&self) {}\n+    fn drop(&mut self) {}\n }\n \n fn main() {"}, {"sha": "0fcbc847850bebe7b640e6250516a57f6bc56f56", "filename": "src/test/compile-fail/unique-vec-res.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -14,7 +14,7 @@ struct r {\n \n #[unsafe_destructor]\n impl Drop for r {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         unsafe {\n             *(self.i) = *(self.i) + 1;\n         }"}, {"sha": "5440e1e2728c5991857664331afe7b75a003c31f", "filename": "src/test/compile-fail/use-after-move-self-based-on-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Fcompile-fail%2Fuse-after-move-self-based-on-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Fcompile-fail%2Fuse-after-move-self-based-on-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuse-after-move-self-based-on-type.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -3,7 +3,7 @@ struct S {\n }\n \n impl Drop for S {\n-    fn drop(&self) {}\n+    fn drop(&mut self) {}\n }\n \n impl S {"}, {"sha": "e7441a2c9681800e59747f79b3e856ca19b93806", "filename": "src/test/compile-fail/vec-res-add.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Fcompile-fail%2Fvec-res-add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Fcompile-fail%2Fvec-res-add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvec-res-add.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -17,7 +17,7 @@ struct r {\n fn r(i:int) -> r { r { i: i } }\n \n impl Drop for r {\n-    fn drop(&self) {}\n+    fn drop(&mut self) {}\n }\n \n fn main() {"}, {"sha": "47c9bd469d4098685fa4c6f35683eacfa822c6ea", "filename": "src/test/debug-info/boxed-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Fdebug-info%2Fboxed-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Fdebug-info%2Fboxed-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fboxed-struct.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -42,7 +42,7 @@ struct StructWithDestructor {\n }\n \n impl Drop for StructWithDestructor {\n-    fn drop(&self) {}\n+    fn drop(&mut self) {}\n }\n \n fn main() {"}, {"sha": "a21c98b9d1b82a6d6bee165cdf10088333417d67", "filename": "src/test/debug-info/c-style-enum-in-composite.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Fdebug-info%2Fc-style-enum-in-composite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Fdebug-info%2Fc-style-enum-in-composite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fc-style-enum-in-composite.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -78,7 +78,7 @@ struct StructWithDrop {\n }\n \n impl Drop for StructWithDrop {\n-    fn drop(&self) {()}\n+    fn drop(&mut self) {()}\n }\n \n fn main() {"}, {"sha": "f684a60b68805c05a815e8bbdd4325ba0214e142", "filename": "src/test/debug-info/packed-struct-with-destructor.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Fdebug-info%2Fpacked-struct-with-destructor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Fdebug-info%2Fpacked-struct-with-destructor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fpacked-struct-with-destructor.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -49,7 +49,7 @@ struct Packed {\n }\n \n impl Drop for Packed {\n-    fn drop(&self) {}\n+    fn drop(&mut self) {}\n }\n \n #[packed]\n@@ -74,7 +74,7 @@ struct Unpacked {\n }\n \n impl Drop for Unpacked {\n-    fn drop(&self) {}\n+    fn drop(&mut self) {}\n }\n \n #[packed]\n@@ -94,7 +94,7 @@ struct PackedInPackedWithDrop {\n }\n \n impl Drop for PackedInPackedWithDrop {\n-    fn drop(&self) {}\n+    fn drop(&mut self) {}\n }\n \n struct PackedInUnpackedWithDrop {\n@@ -105,7 +105,7 @@ struct PackedInUnpackedWithDrop {\n }\n \n impl Drop for PackedInUnpackedWithDrop {\n-    fn drop(&self) {}\n+    fn drop(&mut self) {}\n }\n \n #[packed]\n@@ -117,7 +117,7 @@ struct UnpackedInPackedWithDrop {\n }\n \n impl Drop for UnpackedInPackedWithDrop {\n-    fn drop(&self) {}\n+    fn drop(&mut self) {}\n }\n \n struct DeeplyNested {"}, {"sha": "18c5994fe2a8c6d1cde26c985f5737c569256e8c", "filename": "src/test/debug-info/struct-with-destructor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Fdebug-info%2Fstruct-with-destructor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Fdebug-info%2Fstruct-with-destructor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fstruct-with-destructor.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -37,7 +37,7 @@ struct WithDestructor {\n }\n \n impl Drop for WithDestructor {\n-    fn drop(&self) {}\n+    fn drop(&mut self) {}\n }\n \n struct NoDestructorGuarded {\n@@ -55,7 +55,7 @@ struct NestedInner {\n }\n \n impl Drop for NestedInner {\n-    fn drop(&self) {}\n+    fn drop(&mut self) {}\n }\n \n struct NestedOuter {"}, {"sha": "451105b0c529e5ed93df0888a4aacc98ffef2cd2", "filename": "src/test/run-fail/issue-2061.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-fail%2Fissue-2061.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-fail%2Fissue-2061.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fissue-2061.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -15,7 +15,7 @@ struct R {\n }\n \n impl Drop for R {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         let _y = R { b: self.b };\n     }\n }"}, {"sha": "5ac3092640038ae3f4d78a85c81ac2d87041fee3", "filename": "src/test/run-fail/morestack2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-fail%2Fmorestack2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-fail%2Fmorestack2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmorestack2.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -45,7 +45,7 @@ struct and_then_get_big_again {\n }\n \n impl Drop for and_then_get_big_again {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         fn getbig(i: int) {\n             if i != 0 {\n                 getbig(i - 1);"}, {"sha": "e6f219710b37bc0b5a43089c3ef224b3aebe0f8f", "filename": "src/test/run-fail/morestack3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-fail%2Fmorestack3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-fail%2Fmorestack3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmorestack3.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -31,7 +31,7 @@ struct and_then_get_big_again {\n }\n \n impl Drop for and_then_get_big_again {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         fn getbig(i: int) {\n             if i != 0 {\n                 getbig(i - 1);"}, {"sha": "02a65e91d04456e0890d25a7f2f08f6bd3bcb0cd", "filename": "src/test/run-fail/morestack4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-fail%2Fmorestack4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-fail%2Fmorestack4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmorestack4.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -31,7 +31,7 @@ struct and_then_get_big_again {\n }\n \n impl Drop for and_then_get_big_again {\n-    fn drop(&self) {}\n+    fn drop(&mut self) {}\n }\n \n fn and_then_get_big_again(x:int) -> and_then_get_big_again {"}, {"sha": "01f745850906eb1f9391ff8e9774363e7bb535af", "filename": "src/test/run-fail/rt-set-exit-status-fail2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-fail%2Frt-set-exit-status-fail2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-fail%2Frt-set-exit-status-fail2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Frt-set-exit-status-fail2.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -21,7 +21,7 @@ struct r {\n // failed has no effect and the process exits with the\n // runtime's exit code\n impl Drop for r {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         os::set_exit_status(50);\n     }\n }"}, {"sha": "62d25915431a92127461349178b70e3bcd36c620", "filename": "src/test/run-fail/too-much-recursion-unwinding.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-fail%2Ftoo-much-recursion-unwinding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-fail%2Ftoo-much-recursion-unwinding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ftoo-much-recursion-unwinding.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -24,7 +24,7 @@ struct r {\n }\n \n impl Drop for r {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         unsafe {\n             if !*(self.recursed) {\n                 *(self.recursed) = true;"}, {"sha": "c8a3e77a18c46f09d3d27a46ed09417e420083c1", "filename": "src/test/run-fail/unwind-box-res.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-fail%2Funwind-box-res.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-fail%2Funwind-box-res.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-res.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -21,7 +21,7 @@ struct r {\n }\n \n impl Drop for r {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         unsafe {\n             let _v2: ~int = cast::transmute(self.v);\n         }"}, {"sha": "6526455b8e2e073a6694271d4feb6bed9b7b48cf", "filename": "src/test/run-fail/unwind-resource-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-fail%2Funwind-resource-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-fail%2Funwind-resource-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-resource-fail.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -15,7 +15,7 @@ struct r {\n }\n \n impl Drop for r {\n-    fn drop(&self) { fail!(\"squirrel\") }\n+    fn drop(&mut self) { fail!(\"squirrel\") }\n }\n \n fn r(i: int) -> r { r { i: i } }"}, {"sha": "67e1d0e8f92ac5752c85bb6bb781cdad20e00838", "filename": "src/test/run-fail/unwind-resource-fail2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-fail%2Funwind-resource-fail2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-fail%2Funwind-resource-fail2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-resource-fail2.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -16,7 +16,7 @@ struct r {\n }\n \n impl Drop for r {\n-    fn drop(&self) { fail!(\"wombat\") }\n+    fn drop(&mut self) { fail!(\"wombat\") }\n }\n \n fn r(i: int) -> r { r { i: i } }"}, {"sha": "231f6e7b7d579f840b46561821611aff1d08f362", "filename": "src/test/run-fail/unwind-resource-fail3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-fail%2Funwind-resource-fail3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-fail%2Funwind-resource-fail3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-resource-fail3.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -19,7 +19,7 @@ fn faily_box(i: @int) -> faily_box { faily_box { i: i } }\n \n #[unsafe_destructor]\n impl Drop for faily_box {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         fail!(\"quux\");\n     }\n }"}, {"sha": "e5470a1cff472ae28c77024a2a903f069f077582", "filename": "src/test/run-pass/attr-no-drop-flag-size.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Fattr-no-drop-flag-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Fattr-no-drop-flag-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fattr-no-drop-flag-size.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -17,7 +17,7 @@ struct Test<T> {\n \n #[unsafe_destructor]\n impl<T> Drop for Test<T> {\n-    fn drop(&self) { }\n+    fn drop(&mut self) { }\n }\n \n fn main() {"}, {"sha": "2ab0f4262fb5c9d8d0e1ad011f85448c88386788", "filename": "src/test/run-pass/borrowck-unary-move-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Fborrowck-unary-move-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Fborrowck-unary-move-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-unary-move-2.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -13,7 +13,7 @@ struct noncopyable {\n }\n \n impl Drop for noncopyable {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         error!(\"dropped\");\n     }\n }"}, {"sha": "2165f73c3bf4ce3da2595532635a1992c279111d", "filename": "src/test/run-pass/class-attributes-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Fclass-attributes-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Fclass-attributes-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-attributes-1.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -16,7 +16,7 @@ struct cat {\n \n impl Drop for cat {\n     #[cat_dropper]\n-    fn drop(&self) { error!(\"%s landed on hir feet\" , self . name); }\n+    fn drop(&mut self) { error!(\"%s landed on hir feet\" , self . name); }\n }\n \n "}, {"sha": "30cafff0388c57cd822141ade391be12429f8ab5", "filename": "src/test/run-pass/class-attributes-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Fclass-attributes-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Fclass-attributes-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-attributes-2.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -17,7 +17,7 @@ impl Drop for cat {\n     /**\n        Actually, cats don't always land on their feet when you drop them.\n     */\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         error!(\"%s landed on hir feet\", self.name);\n     }\n }"}, {"sha": "8ee382eaa38f949435cd99ce8b57a21a85c96acc", "filename": "src/test/run-pass/class-dtor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Fclass-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Fclass-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-dtor.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -14,7 +14,7 @@ struct cat {\n }\n \n impl Drop for cat {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         (self.done)(self.meows);\n     }\n }"}, {"sha": "39453af83c3815013eaeac873eb97759c9481687", "filename": "src/test/run-pass/drop-trait-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Fdrop-trait-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Fdrop-trait-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop-trait-generic.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -14,7 +14,7 @@ struct S<T> {\n \n #[unsafe_destructor]\n impl<T> ::std::ops::Drop for S<T> {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         println(\"bye\");\n     }\n }"}, {"sha": "e36379295c419e2f4b103596b418fd115884aa91", "filename": "src/test/run-pass/drop-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Fdrop-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Fdrop-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop-trait.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -13,7 +13,7 @@ struct Foo {\n }\n \n impl Drop for Foo {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         println(\"bye\");\n     }\n }"}, {"sha": "fb6204866dfdf6612ec59e2589646c219b3d17f1", "filename": "src/test/run-pass/init-res-into-things.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Finit-res-into-things.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Finit-res-into-things.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finit-res-into-things.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -19,7 +19,7 @@ struct Box { x: r }\n \n #[unsafe_destructor]\n impl Drop for r {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         *(self.i) = *(self.i) + 1;\n     }\n }"}, {"sha": "c12325e6ff52ebec38f9b43e211e8f99d5cd11a6", "filename": "src/test/run-pass/issue-2487-a.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Fissue-2487-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Fissue-2487-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2487-a.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -14,7 +14,7 @@ struct socket {\n }\n \n impl Drop for socket {\n-    fn drop(&self) {}\n+    fn drop(&mut self) {}\n }\n \n impl socket {"}, {"sha": "1fce8e5ce4996692dc012946e62c863657c984c6", "filename": "src/test/run-pass/issue-2708.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Fissue-2708.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Fissue-2708.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2708.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -16,7 +16,7 @@ struct Font {\n }\n \n impl Drop for Font {\n-    fn drop(&self) {}\n+    fn drop(&mut self) {}\n }\n \n fn Font() -> Font {"}, {"sha": "19f0843efd82c81d85742672bdc3862238e88172", "filename": "src/test/run-pass/issue-2718.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2718.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -161,7 +161,7 @@ pub mod pipes {\n \n     #[unsafe_destructor]\n     impl<T:Send> Drop for send_packet<T> {\n-        fn drop(&self) {\n+        fn drop(&mut self) {\n             unsafe {\n                 if self.p != None {\n                     let self_p: &mut Option<*packet<T>> =\n@@ -191,7 +191,7 @@ pub mod pipes {\n \n     #[unsafe_destructor]\n     impl<T:Send> Drop for recv_packet<T> {\n-        fn drop(&self) {\n+        fn drop(&mut self) {\n             unsafe {\n                 if self.p != None {\n                     let self_p: &mut Option<*packet<T>> ="}, {"sha": "3be634c1e58f8007d2b3d8453a17c67fa062996b", "filename": "src/test/run-pass/issue-2735-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Fissue-2735-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Fissue-2735-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2735-2.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -15,7 +15,7 @@ struct defer {\n \n #[unsafe_destructor]\n impl Drop for defer {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         *self.b = true;\n     }\n }"}, {"sha": "8999ffd5f7f09df325e38ad349647784c08ce6a4", "filename": "src/test/run-pass/issue-2735-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Fissue-2735-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Fissue-2735-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2735-3.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -15,7 +15,7 @@ struct defer {\n \n #[unsafe_destructor]\n impl Drop for defer {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         *self.b = true;\n     }\n }"}, {"sha": "f325756d3687651261bfa18245797e54041636a0", "filename": "src/test/run-pass/issue-2895.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Fissue-2895.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Fissue-2895.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2895.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -19,7 +19,7 @@ struct Kitty {\n }\n \n impl Drop for Kitty {\n-    fn drop(&self) {}\n+    fn drop(&mut self) {}\n }\n \n #[cfg(target_arch = \"x86_64\")]"}, {"sha": "9c44a7cfcc3073f50044d038aa353ab6d937fa7c", "filename": "src/test/run-pass/issue-3220.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Fissue-3220.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Fissue-3220.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3220.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -11,7 +11,7 @@\n struct thing { x: int, }\n \n impl Drop for thing {\n-    fn drop(&self) {}\n+    fn drop(&mut self) {}\n }\n \n fn thing() -> thing {"}, {"sha": "9040d5b5fb5f98ee11136d4b5677590c66ce7d03", "filename": "src/test/run-pass/issue-3563-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -57,7 +57,7 @@ struct AsciiArt {\n }\n \n impl Drop for AsciiArt {\n-    fn drop(&self) {}\n+    fn drop(&mut self) {}\n }\n \n // It's common to define a constructor sort of function to create struct instances."}, {"sha": "121757fb5904655bac08600cbb7f36c1f4982f3e", "filename": "src/test/run-pass/issue-4252.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Fissue-4252.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Fissue-4252.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4252.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -26,7 +26,7 @@ impl X for Y {\n }\n \n impl<T: X> Drop for Z<T> {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         self.x.call(); // Adding this statement causes an ICE.\n     }\n }"}, {"sha": "8451d281aa0abae1df328c95e480effd795a49b9", "filename": "src/test/run-pass/issue-4735.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Fissue-4735.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Fissue-4735.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4735.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -15,7 +15,7 @@ use std::libc::c_void;\n struct NonCopyable(*c_void);\n \n impl Drop for NonCopyable {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         let p = **self;\n         let _v = unsafe { transmute::<*c_void, ~int>(p) };\n     }"}, {"sha": "f57482b67e049bc1b321d588d830f40ddc91d111", "filename": "src/test/run-pass/issue-6341.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Fissue-6341.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Fissue-6341.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6341.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -12,7 +12,7 @@\n struct A { x: uint }\n \n impl Drop for A {\n-    fn drop(&self) {}\n+    fn drop(&mut self) {}\n }\n \n fn main() {}\n\\ No newline at end of file"}, {"sha": "6e0b6101d37484b004388cc392a9191a51ad1a8f", "filename": "src/test/run-pass/issue-6344-let.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Fissue-6344-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Fissue-6344-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6344-let.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -10,7 +10,7 @@\n struct A { x: uint }\n \n impl Drop for A {\n-    fn drop(&self) {}\n+    fn drop(&mut self) {}\n }\n \n fn main() {"}, {"sha": "b9429fc63fd28e5ebf32c7b72e2d73a35a420c4a", "filename": "src/test/run-pass/issue-6344-match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Fissue-6344-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Fissue-6344-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6344-match.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -10,7 +10,7 @@\n struct A { x: uint }\n \n impl Drop for A {\n-    fn drop(&self) {}\n+    fn drop(&mut self) {}\n }\n \n fn main() {"}, {"sha": "4c4f19d51664e556a3b5272d3ddef47305530e77", "filename": "src/test/run-pass/issue-979.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Fissue-979.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Fissue-979.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-979.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -14,7 +14,7 @@ struct r {\n \n #[unsafe_destructor]\n impl Drop for r {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         *(self.b) += 1;\n     }\n }"}, {"sha": "578f80f1ca51edd0d02bb58e67ca0a6bd4e28323", "filename": "src/test/run-pass/newtype-struct-drop-run.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Fnewtype-struct-drop-run.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Fnewtype-struct-drop-run.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnewtype-struct-drop-run.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -14,7 +14,7 @@ struct Foo(@mut int);\n \n #[unsafe_destructor]\n impl Drop for Foo {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         ***self = 23;\n     }\n }"}, {"sha": "37b9b5fe068379e8963708895017a2ae5ad3eec1", "filename": "src/test/run-pass/newtype-struct-with-dtor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Fnewtype-struct-with-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Fnewtype-struct-with-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnewtype-struct-with-dtor.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -5,7 +5,7 @@ pub struct Fd(c_int);\n \n impl Drop for Fd {\n     #[fixed_stack_segment] #[inline(never)]\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         unsafe {\n             libc::close(**self);\n         }"}, {"sha": "66cd7f2b55f7499e5ee58e6152fef537e3ac638e", "filename": "src/test/run-pass/option-unwrap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Foption-unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Foption-unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foption-unwrap.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -15,7 +15,7 @@ struct dtor {\n \n #[unsafe_destructor]\n impl Drop for dtor {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         // abuse access to shared mutable state to write this code\n         *self.x -= 1;\n     }"}, {"sha": "dd5450de62fdb4280d49af78bc9a99bb7bebdef9", "filename": "src/test/run-pass/resource-assign-is-not-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Fresource-assign-is-not-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Fresource-assign-is-not-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-assign-is-not-copy.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -14,7 +14,7 @@ struct r {\n \n #[unsafe_destructor]\n impl Drop for r {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         *(self.i) += 1;\n     }\n }"}, {"sha": "a5354fd01cd83083703788805a383d2085b671c1", "filename": "src/test/run-pass/resource-cycle.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Fresource-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Fresource-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-cycle.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -17,10 +17,10 @@ struct r {\n }\n \n impl Drop for r {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         unsafe {\n             info!(\"r's dtor: self = %x, self.v = %x, self.v's value = %x\",\n-              cast::transmute::<*r, uint>(self),\n+              cast::transmute::<*mut r, uint>(self),\n               cast::transmute::<**int, uint>(&(self.v)),\n               cast::transmute::<*int, uint>(self.v));\n             let _v2: ~int = cast::transmute(self.v);"}, {"sha": "45ee6ce802149d0662857497331b4dfcda42b84e", "filename": "src/test/run-pass/resource-cycle2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Fresource-cycle2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Fresource-cycle2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-cycle2.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -23,7 +23,7 @@ struct r {\n }\n \n impl Drop for r {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         unsafe {\n             let _v2: ~int = cast::transmute(self.v.c);\n         }"}, {"sha": "0435f0bdcfd8b00cfce8cb8303efb498a569e227", "filename": "src/test/run-pass/resource-cycle3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Fresource-cycle3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Fresource-cycle3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-cycle3.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -27,7 +27,7 @@ struct R {\n }\n \n impl Drop for R {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         unsafe {\n             let _v2: ~int = cast::transmute(self.v.c);\n             // let _v3: ~int = cast::transmute_copy(self.x);"}, {"sha": "d92cfb5b9a54fd64034d2200b6540f3b29c69f79", "filename": "src/test/run-pass/resource-destruct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Fresource-destruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Fresource-destruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-destruct.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -14,7 +14,7 @@ struct shrinky_pointer {\n \n #[unsafe_destructor]\n impl Drop for shrinky_pointer {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         error!(~\"Hello!\"); **(self.i) -= 1;\n     }\n }"}, {"sha": "d59f79eb2f1bda671e0d2341c041ce3f0202a018", "filename": "src/test/run-pass/resource-in-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Fresource-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Fresource-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-in-struct.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -20,7 +20,7 @@ struct close_res {\n \n #[unsafe_destructor]\n impl Drop for close_res {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         *(self.i) = false;\n     }\n }"}, {"sha": "81e2d0a8ac8ca834e8dc6ec694c3b5ed8942fc61", "filename": "src/test/run-pass/send-resource.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Fsend-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Fsend-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend-resource.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -15,7 +15,7 @@ struct test {\n }\n \n impl Drop for test {\n-    fn drop(&self) {}\n+    fn drop(&mut self) {}\n }\n \n fn test(f: int) -> test {"}, {"sha": "f983830936a1f482b37807c4c26abfa0c9d140f1", "filename": "src/test/run-pass/struct-literal-dtor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Fstruct-literal-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Fstruct-literal-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct-literal-dtor.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -13,7 +13,7 @@ struct foo {\n }\n \n impl Drop for foo {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         error!(\"%s\", self.x);\n     }\n }"}, {"sha": "10116e569467cc344e65ea7a5e7401ea5dcaf1ce", "filename": "src/test/run-pass/task-killjoin-rsrc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -24,7 +24,7 @@ struct notify {\n \n #[unsafe_destructor]\n impl Drop for notify {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         unsafe {\n             error!(\"notify: task=%? v=%x unwinding=%b b=%b\",\n                    0,"}, {"sha": "a1cb0063322dc601760e685fedbca6d298a00c7b", "filename": "src/test/run-pass/type-param-constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Ftype-param-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Ftype-param-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-param-constraints.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -19,7 +19,7 @@ struct r {\n }\n \n impl Drop for r {\n-    fn drop(&self) {}\n+    fn drop(&mut self) {}\n }\n \n fn r(i:int) -> r {"}, {"sha": "6ba3866bb6d43c9b9ffe1bf3d998b32a7c3a54b2", "filename": "src/test/run-pass/unique-pinned-nocopy-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Funique-pinned-nocopy-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Funique-pinned-nocopy-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-pinned-nocopy-2.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -14,7 +14,7 @@ struct r {\n \n #[unsafe_destructor]\n impl Drop for r {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         *(self.i) = *(self.i) + 1;\n     }\n }"}, {"sha": "b8ca66e89793a15c379c329b85a5fc285a06ffea", "filename": "src/test/run-pass/unit-like-struct-drop-run.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Funit-like-struct-drop-run.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Funit-like-struct-drop-run.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funit-like-struct-drop-run.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -16,7 +16,7 @@ use std::task;\n struct Foo;\n \n impl Drop for Foo {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         fail!(\"This failure should happen.\");\n     }\n }"}, {"sha": "f1d5009fe88944f78819c8fd4c6a006fad78f310", "filename": "src/test/run-pass/unwind-resource.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Funwind-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Funwind-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-resource.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -20,7 +20,7 @@ struct complainer {\n }\n \n impl Drop for complainer {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         error!(\"About to send!\");\n         self.c.send(true);\n         error!(\"Sent!\");"}, {"sha": "5b0cd17eea05eca5e735173399d79ebf51f4940a", "filename": "src/test/run-pass/unwind-resource2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Funwind-resource2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Funwind-resource2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-resource2.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -18,7 +18,7 @@ struct complainer {\n \n #[unsafe_destructor]\n impl Drop for complainer {\n-    fn drop(&self) {}\n+    fn drop(&mut self) {}\n }\n \n fn complainer(c: @int) -> complainer {"}, {"sha": "2a4bd2a8cf9a615848e41c0d943797cb679f8f1b", "filename": "src/test/run-pass/vec-slice-drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Fvec-slice-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e161a4d401224507513bfbf33b22f0b72f8ba81/src%2Ftest%2Frun-pass%2Fvec-slice-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-slice-drop.rs?ref=4e161a4d401224507513bfbf33b22f0b72f8ba81", "patch": "@@ -15,7 +15,7 @@ struct foo {\n \n #[unsafe_destructor]\n impl Drop for foo {\n-    fn drop(&self) {\n+    fn drop(&mut self) {\n         *self.x += 1;\n     }\n }"}]}