{"sha": "0f4a5ca33ceb22edd4f2cd12a03806331a2883ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmNGE1Y2EzM2NlYjIyZWRkNGYyY2QxMmEwMzgwNjMzMWEyODgzZWQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-05-08T19:56:39Z"}, "committer": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2019-06-05T20:09:27Z"}, "message": "Added some comments to lowering code.", "tree": {"sha": "2de98a1aff550ccef02b597b2717ca24a493df0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2de98a1aff550ccef02b597b2717ca24a493df0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f4a5ca33ceb22edd4f2cd12a03806331a2883ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f4a5ca33ceb22edd4f2cd12a03806331a2883ed", "html_url": "https://github.com/rust-lang/rust/commit/0f4a5ca33ceb22edd4f2cd12a03806331a2883ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f4a5ca33ceb22edd4f2cd12a03806331a2883ed/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a71d55701e303514f936b862ae5cf0c410d2a785", "url": "https://api.github.com/repos/rust-lang/rust/commits/a71d55701e303514f936b862ae5cf0c410d2a785", "html_url": "https://github.com/rust-lang/rust/commit/a71d55701e303514f936b862ae5cf0c410d2a785"}], "stats": {"total": 53, "additions": 50, "deletions": 3}, "files": [{"sha": "06f9128cd2263f134d01d13b9aa4f89a1f702f9e", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 50, "deletions": 3, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/0f4a5ca33ceb22edd4f2cd12a03806331a2883ed/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f4a5ca33ceb22edd4f2cd12a03806331a2883ed/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=0f4a5ca33ceb22edd4f2cd12a03806331a2883ed", "patch": "@@ -1361,26 +1361,73 @@ impl<'a> LoweringContext<'a> {\n         }\n     }\n \n+    /// Given an associated type constraint like one of these:\n+    ///\n+    /// ```\n+    /// T: Iterator<Item: Debug>\n+    ///             ^^^^^^^^^^^\n+    /// T: Iterator<Item = Debug>\n+    ///             ^^^^^^^^^^^^\n+    /// ```\n+    ///\n+    /// returns a `hir::TypeBinding` representing `Item`.\n     fn lower_assoc_ty_constraint(&mut self,\n                                  c: &AssocTyConstraint,\n                                  itctx: ImplTraitContext<'_>)\n                                  -> hir::TypeBinding {\n         debug!(\"lower_assoc_ty_constraint(constraint={:?}, itctx={:?})\", c, itctx);\n \n+        // Convert to a type representing the `T::Item` value.\n         let ty = match c.kind {\n             AssocTyConstraintKind::Equality { ref ty } => self.lower_ty(ty, itctx),\n             AssocTyConstraintKind::Bound { ref bounds } => {\n-                let (existential_desugaring, itctx) = match itctx {\n+                // Piggy-back on the impl trait context to figure out\n+                // the correct behavior.\n+                let (desugar_to_impl_trait, itctx) = match itctx {\n+                    // We are in the return position:\n+                    //\n+                    // fn foo() -> impl Iterator<Item: Debug>\n+                    //\n+                    // so desugar to\n+                    //\n+                    // fn foo() -> impl Iterator<Item = impl Debug>\n                     ImplTraitContext::Existential(_) => (true, itctx),\n+\n+                    // We are in the argument position, but within a dyn type:\n+                    //\n+                    // fn foo(x: dyn Iterator<Item: Debug>)\n+                    //\n+                    // so desugar to\n+                    //\n+                    // fn foo(x: dyn Iterator<Item = impl Debug>)\n                     ImplTraitContext::Universal(_) if self.is_in_dyn_type => (true, itctx),\n+\n+                    // In `type Foo = dyn Iterator<Item: Debug>` we\n+                    // desugar to `type Foo = dyn Iterator<Item = impl\n+                    // Debug>` but we have to override the \"impl trait\n+                    // context\" to permit `impl Debug` in this\n+                    // position (it desugars then to an existential\n+                    // type).\n+                    //\n                     // FIXME: this is only needed until `impl Trait` is allowed in type aliases.\n                     ImplTraitContext::Disallowed(_) if self.is_in_dyn_type =>\n                         (true, ImplTraitContext::Existential(None)),\n+\n+                    // We are in the argument position, but not within a dyn type:\n+                    //\n+                    // fn foo(x: impl Iterator<Item: Debug>)\n+                    //\n+                    // so we leave it as is and this gets expanded in\n+                    // astconv to a bound like `<T as Iterator>::Item:\n+                    // Debug` where `T` is the type parameter for the\n+                    // `impl Iterator`.\n                     _ => (false, itctx),\n                 };\n \n-                if existential_desugaring {\n-                    // Desugar `AssocTy: Bounds` into `AssocTy = impl Bounds`.\n+                if desugar_to_impl_trait {\n+                    // Desugar `AssocTy: Bounds` into `AssocTy = impl\n+                    // Bounds`. We do this by constructing the HIR\n+                    // for \"impl bounds\" and then lowering that.\n \n                     let impl_trait_node_id = self.sess.next_node_id();\n                     let parent_def_index = self.current_hir_id_owner.last().unwrap().0;"}]}