{"sha": "4440e8196aee718cbd3aafa41a0919f432c06330", "node_id": "C_kwDOAAsO6NoAKDQ0NDBlODE5NmFlZTcxOGNiZDNhYWZhNDFhMDkxOWY0MzJjMDYzMzA", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2023-03-25T10:47:23Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2023-04-26T05:46:14Z"}, "message": "Add query accessor functions", "tree": {"sha": "949aadbe8ee101ba29d4a8d1b838e7a52b8d5bf0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/949aadbe8ee101ba29d4a8d1b838e7a52b8d5bf0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4440e8196aee718cbd3aafa41a0919f432c06330", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4440e8196aee718cbd3aafa41a0919f432c06330", "html_url": "https://github.com/rust-lang/rust/commit/4440e8196aee718cbd3aafa41a0919f432c06330", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4440e8196aee718cbd3aafa41a0919f432c06330/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66d85438cad26aee7ff0d123739edcc43e16bc4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/66d85438cad26aee7ff0d123739edcc43e16bc4a", "html_url": "https://github.com/rust-lang/rust/commit/66d85438cad26aee7ff0d123739edcc43e16bc4a"}], "stats": {"total": 89, "additions": 56, "deletions": 33}, "files": [{"sha": "07d47cae5ee933a574f6777dac613611b479ecce", "filename": "compiler/rustc_middle/src/ty/query.rs", "status": "modified", "additions": 55, "deletions": 32, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/4440e8196aee718cbd3aafa41a0919f432c06330/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4440e8196aee718cbd3aafa41a0919f432c06330/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs?ref=4440e8196aee718cbd3aafa41a0919f432c06330", "patch": "@@ -202,6 +202,40 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n }\n \n+#[inline]\n+fn query_get_at<'tcx, Cache>(\n+    tcx: TyCtxt<'tcx>,\n+    execute_query: fn(TyCtxt<'tcx>, Span, Cache::Key, QueryMode) -> Option<Cache::Value>,\n+    query_cache: &Cache,\n+    span: Span,\n+    key: Cache::Key,\n+) -> Cache::Value\n+where\n+    Cache: QueryCache,\n+{\n+    let key = key.into_query_param();\n+    match try_get_cached(tcx, query_cache, &key) {\n+        Some(value) => value,\n+        None => execute_query(tcx, span, key, QueryMode::Get).unwrap(),\n+    }\n+}\n+\n+#[inline]\n+fn query_ensure<'tcx, Cache>(\n+    tcx: TyCtxt<'tcx>,\n+    execute_query: fn(TyCtxt<'tcx>, Span, Cache::Key, QueryMode) -> Option<Cache::Value>,\n+    query_cache: &Cache,\n+    key: Cache::Key,\n+    check_cache: bool,\n+) where\n+    Cache: QueryCache,\n+{\n+    let key = key.into_query_param();\n+    if try_get_cached(tcx, query_cache, &key).is_none() {\n+        execute_query(tcx, DUMMY_SP, key, QueryMode::Ensure { check_cache });\n+    }\n+}\n+\n macro_rules! query_helper_param_ty {\n     (DefId) => { impl IntoQueryParam<DefId> };\n     (LocalDefId) => { impl IntoQueryParam<LocalDefId> };\n@@ -407,35 +441,27 @@ macro_rules! define_callbacks {\n             $($(#[$attr])*\n             #[inline(always)]\n             pub fn $name(self, key: query_helper_param_ty!($($K)*)) {\n-                let key = key.into_query_param();\n-\n-                match try_get_cached(self.tcx, &self.tcx.query_system.caches.$name, &key) {\n-                    Some(_) => return,\n-                    None => (self.tcx.query_system.fns.engine.$name)(\n-                        self.tcx,\n-                        DUMMY_SP,\n-                        key,\n-                        QueryMode::Ensure { check_cache: false },\n-                    ),\n-                };\n+                query_ensure(\n+                    self.tcx,\n+                    self.tcx.query_system.fns.engine.$name,\n+                    &self.tcx.query_system.caches.$name,\n+                    key.into_query_param(),\n+                    false,\n+                );\n             })*\n         }\n \n         impl<'tcx> TyCtxtEnsureWithValue<'tcx> {\n             $($(#[$attr])*\n             #[inline(always)]\n             pub fn $name(self, key: query_helper_param_ty!($($K)*)) {\n-                let key = key.into_query_param();\n-\n-                match try_get_cached(self.tcx, &self.tcx.query_system.caches.$name, &key) {\n-                    Some(_) => return,\n-                    None => (self.tcx.query_system.fns.engine.$name)(\n-                        self.tcx,\n-                        DUMMY_SP,\n-                        key,\n-                        QueryMode::Ensure { check_cache: true },\n-                    ),\n-                };\n+                query_ensure(\n+                    self.tcx,\n+                    self.tcx.query_system.fns.engine.$name,\n+                    &self.tcx.query_system.caches.$name,\n+                    key.into_query_param(),\n+                    true,\n+                );\n             })*\n         }\n \n@@ -454,16 +480,13 @@ macro_rules! define_callbacks {\n             #[inline(always)]\n             pub fn $name(self, key: query_helper_param_ty!($($K)*)) -> $V\n             {\n-                let key = key.into_query_param();\n-\n-                restore::<$V>(match try_get_cached(self.tcx, &self.tcx.query_system.caches.$name, &key) {\n-                    Some(value) => value,\n-                    None => (self.tcx.query_system.fns.engine.$name)(\n-                        self.tcx,\n-                        self.span,\n-                        key, QueryMode::Get\n-                    ).unwrap(),\n-                })\n+                restore::<$V>(query_get_at(\n+                    self.tcx,\n+                    self.tcx.query_system.fns.engine.$name,\n+                    &self.tcx.query_system.caches.$name,\n+                    self.span,\n+                    key.into_query_param(),\n+                ))\n             })*\n         }\n "}, {"sha": "3b17c665fb7e954259018801379c22948c9f2e7d", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4440e8196aee718cbd3aafa41a0919f432c06330/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4440e8196aee718cbd3aafa41a0919f432c06330/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=4440e8196aee718cbd3aafa41a0919f432c06330", "patch": "@@ -236,7 +236,7 @@ pub(crate) struct CycleError<D: DepKind> {\n /// It returns the shard index and a lock guard to the shard,\n /// which will be used if the query is not in the cache and we need\n /// to compute it.\n-#[inline]\n+#[inline(always)]\n pub fn try_get_cached<Tcx, C>(tcx: Tcx, cache: &C, key: &C::Key) -> Option<C::Value>\n where\n     C: QueryCache,"}]}