{"sha": "d743c0784ed487c3329010b77a935eb13b538816", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3NDNjMDc4NGVkNDg3YzMzMjkwMTBiNzdhOTM1ZWIxM2I1Mzg4MTY=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-09-23T13:23:01Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-09-23T13:23:01Z"}, "message": "clean up get_fat_ptr usage in Unsize", "tree": {"sha": "8059348fdcb79f544769460406e4fa9302af63fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8059348fdcb79f544769460406e4fa9302af63fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d743c0784ed487c3329010b77a935eb13b538816", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJX5Sy1AAoJEFbW7qD8Z6xGBgwP/RZntI2u+55emoolwp50cx+G\n6IQ0jQLN2Dod/Mn8YyMfz2W1kgb8zFzenu1/o+DaOXhp5gXGZZfI/yi+wiUYhBqT\n7TceB2T6KYcSkWbRLMiPhTz3ECojeNjwnr+rOhk3GqSr3zNRm2k+FfSMwnS873Ys\n14N4NOmIgdSAXyHGQ56QcO1IaGy2cweYJGj1gg/+V0+mYWVhZhB4mG/WDfn11Q/G\nZOgQL7H4URk06U/5oNda9niGkk1chB5r7c6dCOSMEMkJtq83KNffewzVAImvYAKN\nPcj8Ejrwng6IV5bpITt1D1RArXF0qX3YFKbbh19nZjN9N30x/HERNdueXs82PrHa\nfB8BGQ5IUkmAYETPMyQgQxWXW4CQygYpelwn6V2lHDeoeOoD8funLpJr/P/1/O67\nDCmQmjfLjYgePuJD8+Kq5Hd5lkAKFy5Nf69FjY3qrMC8KTHA6L9PEB0mO/+YRO86\nClqF89Ezi9OuFkKtmihwUAddqEULvzx7jZnVZcj67g9u8LvDMPhRljHXeXUv0KYr\nrdHHgtnLgrELfheuGnUEI2dy7LLQLveZUq/oRsLm1w9lKz8w6HXgcvZ9+0qWrgls\n3UayMzoDRSmFPpH2Miowyz/PJXSlOTTtXq0zRaQt14W/zX+GGzbPqR6duD+xRIDo\nUCKP+XtURH0M0Dnqdawy\n=aIjt\n-----END PGP SIGNATURE-----", "payload": "tree 8059348fdcb79f544769460406e4fa9302af63fc\nparent 7714cccf2657151b634ae0cdcf908573e838e4d7\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1474636981 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1474636981 +0200\n\nclean up get_fat_ptr usage in Unsize"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d743c0784ed487c3329010b77a935eb13b538816", "html_url": "https://github.com/rust-lang/rust/commit/d743c0784ed487c3329010b77a935eb13b538816", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d743c0784ed487c3329010b77a935eb13b538816/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7714cccf2657151b634ae0cdcf908573e838e4d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/7714cccf2657151b634ae0cdcf908573e838e4d7", "html_url": "https://github.com/rust-lang/rust/commit/7714cccf2657151b634ae0cdcf908573e838e4d7"}], "stats": {"total": 24, "additions": 5, "deletions": 19}, "files": [{"sha": "e381ebdba693b6633c8f6f08c8852f91df7dd4b9", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d743c0784ed487c3329010b77a935eb13b538816/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d743c0784ed487c3329010b77a935eb13b538816/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=d743c0784ed487c3329010b77a935eb13b538816", "patch": "@@ -610,8 +610,6 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                         let dest_ty = self.monomorphize(dest_ty, self.substs());\n                         // FIXME: cases where dest_ty is not a fat pointer. e.g. Arc<Struct> -> Arc<Trait>\n                         assert!(self.type_is_fat_ptr(dest_ty));\n-                        let (ptr, extra) = self.get_fat_ptr(dest);\n-                        self.move_value(src, ptr, src_ty)?;\n                         let src_pointee_ty = pointee_type(src_ty).unwrap();\n                         let dest_pointee_ty = pointee_type(dest_ty).unwrap();\n \n@@ -620,20 +618,21 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n                         match (&src_pointee_ty.sty, &dest_pointee_ty.sty) {\n                             (&ty::TyArray(_, length), &ty::TySlice(_)) => {\n-                                self.memory.write_usize(extra, length as u64)?;\n+                                let ptr = src.read_ptr(&self.memory)?;\n+                                self.memory.write_primval(dest, PrimVal::SlicePtr(ptr, length as u64))?;\n                             }\n                             (&ty::TyTrait(_), &ty::TyTrait(_)) => {\n                                 // For now, upcasts are limited to changes in marker\n                                 // traits, and hence never actually require an actual\n                                 // change to the vtable.\n-                                let src_extra = src.expect_fat_ptr_extra(&self.memory)?;\n-                                self.memory.write_primval(extra, src_extra)?;\n+                                self.write_value(src, dest, dest_ty)?;\n                             },\n                             (_, &ty::TyTrait(ref data)) => {\n                                 let trait_ref = data.principal.with_self_ty(self.tcx, src_pointee_ty);\n                                 let trait_ref = self.tcx.erase_regions(&trait_ref);\n                                 let vtable = self.get_vtable(trait_ref)?;\n-                                self.memory.write_ptr(extra, vtable)?;\n+                                let ptr = src.read_ptr(&self.memory)?;\n+                                self.memory.write_primval(dest, PrimVal::VtablePtr(ptr, vtable))?;\n                             },\n \n                             _ => bug!(\"invalid unsizing {:?} -> {:?}\", src_ty, dest_ty),"}, {"sha": "58805ee4c5c629124cfed7a75f1da2b6dd0fe759", "filename": "src/interpreter/value.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d743c0784ed487c3329010b77a935eb13b538816/src%2Finterpreter%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d743c0784ed487c3329010b77a935eb13b538816/src%2Finterpreter%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fvalue.rs?ref=d743c0784ed487c3329010b77a935eb13b538816", "patch": "@@ -44,17 +44,4 @@ impl Value {\n             _ => unimplemented!(),\n         }\n     }\n-\n-    pub(super) fn expect_fat_ptr_extra<'a, 'tcx: 'a>(&self, mem: &Memory<'a, 'tcx>) -> EvalResult<'tcx, PrimVal> {\n-        use self::Value::*;\n-        match (*self, mem.pointer_size()) {\n-            (ByRef(ptr), size) => mem.read_ptr(ptr.offset(size as isize)).map(PrimVal::Ptr),\n-            (ByVal(PrimVal::SlicePtr(_, len)), 8) => Ok(PrimVal::U64(len)),\n-            (ByVal(PrimVal::SlicePtr(_, len)), 4) => Ok(PrimVal::U32(len as u32)),\n-            (ByVal(PrimVal::SlicePtr(_, len)), 2) => Ok(PrimVal::U16(len as u16)),\n-            (ByVal(PrimVal::SlicePtr(_, len)), 1) => Ok(PrimVal::U8(len as u8)),\n-            (ByVal(PrimVal::VtablePtr(_, ptr)), _) => Ok(PrimVal::Ptr(ptr)),\n-            _ => unimplemented!(),\n-        }\n-    }\n }"}]}