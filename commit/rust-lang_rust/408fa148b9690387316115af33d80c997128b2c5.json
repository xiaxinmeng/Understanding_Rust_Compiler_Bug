{"sha": "408fa148b9690387316115af33d80c997128b2c5", "node_id": "C_kwDOAAsO6NoAKDQwOGZhMTQ4Yjk2OTAzODczMTYxMTVhZjMzZDgwYzk5NzEyOGIyYzU", "commit": {"author": {"name": "bitgaoshu", "email": "bitgaoshu@gmail.com", "date": "2022-06-26T14:48:26Z"}, "committer": {"name": "bitgaoshu", "email": "bitgaoshu@gmail.com", "date": "2022-06-26T14:48:26Z"}, "message": "add test for item same name", "tree": {"sha": "d5251d42d47a89e58ccb351cc9d122097719e581", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5251d42d47a89e58ccb351cc9d122097719e581"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/408fa148b9690387316115af33d80c997128b2c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/408fa148b9690387316115af33d80c997128b2c5", "html_url": "https://github.com/rust-lang/rust/commit/408fa148b9690387316115af33d80c997128b2c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/408fa148b9690387316115af33d80c997128b2c5/comments", "author": {"login": "bitgaoshu", "id": 7943146, "node_id": "MDQ6VXNlcjc5NDMxNDY=", "avatar_url": "https://avatars.githubusercontent.com/u/7943146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bitgaoshu", "html_url": "https://github.com/bitgaoshu", "followers_url": "https://api.github.com/users/bitgaoshu/followers", "following_url": "https://api.github.com/users/bitgaoshu/following{/other_user}", "gists_url": "https://api.github.com/users/bitgaoshu/gists{/gist_id}", "starred_url": "https://api.github.com/users/bitgaoshu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bitgaoshu/subscriptions", "organizations_url": "https://api.github.com/users/bitgaoshu/orgs", "repos_url": "https://api.github.com/users/bitgaoshu/repos", "events_url": "https://api.github.com/users/bitgaoshu/events{/privacy}", "received_events_url": "https://api.github.com/users/bitgaoshu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bitgaoshu", "id": 7943146, "node_id": "MDQ6VXNlcjc5NDMxNDY=", "avatar_url": "https://avatars.githubusercontent.com/u/7943146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bitgaoshu", "html_url": "https://github.com/bitgaoshu", "followers_url": "https://api.github.com/users/bitgaoshu/followers", "following_url": "https://api.github.com/users/bitgaoshu/following{/other_user}", "gists_url": "https://api.github.com/users/bitgaoshu/gists{/gist_id}", "starred_url": "https://api.github.com/users/bitgaoshu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bitgaoshu/subscriptions", "organizations_url": "https://api.github.com/users/bitgaoshu/orgs", "repos_url": "https://api.github.com/users/bitgaoshu/repos", "events_url": "https://api.github.com/users/bitgaoshu/events{/privacy}", "received_events_url": "https://api.github.com/users/bitgaoshu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0dbc091fee10cf8aae68d971713b32c07d1a96f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/0dbc091fee10cf8aae68d971713b32c07d1a96f0", "html_url": "https://github.com/rust-lang/rust/commit/0dbc091fee10cf8aae68d971713b32c07d1a96f0"}], "stats": {"total": 21, "additions": 20, "deletions": 1}, "files": [{"sha": "fb88d1ec8428bef8106a30fc5f0e6a1bd1e27b9c", "filename": "crates/ide/src/goto_definition.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/408fa148b9690387316115af33d80c997128b2c5/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/408fa148b9690387316115af33d80c997128b2c5/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_definition.rs?ref=408fa148b9690387316115af33d80c997128b2c5", "patch": "@@ -1,4 +1,4 @@\n-use std::convert::TryInto;\n+use std::{convert::TryInto, mem::discriminant};\n \n use crate::{doc_links::token_as_doc_comment, FilePosition, NavigationTarget, RangeInfo, TryToNav};\n use hir::{AsAssocItem, AssocItem, Semantics};\n@@ -126,9 +126,11 @@ fn try_filter_trait_item_definition(\n             };\n             let trait_ = imp.trait_(db)?;\n             let name = def.name(db)?;\n+            let discri_value = discriminant(&assoc);\n             trait_\n                 .items(db)\n                 .iter()\n+                .filter(|itm| discriminant(*itm) == discri_value)\n                 .find_map(|itm| (itm.name(db)? == name).then(|| itm.try_to_nav(db)).flatten())\n                 .map(|it| vec![it])\n         }\n@@ -175,6 +177,23 @@ mod tests {\n         assert!(navs.is_empty(), \"didn't expect this to resolve anywhere: {:?}\", navs)\n     }\n \n+    #[test]\n+    fn goto_def_if_items_same_name() {\n+        check(\n+            r#\"\n+trait Trait {\n+    type A;\n+    const A: i32;\n+        //^\n+}\n+\n+struct T;\n+impl Trait for T {\n+    type A = i32;\n+    const A$0: i32 = -9;\n+}\"#,\n+        );\n+    }\n     #[test]\n     fn goto_def_in_mac_call_in_attr_invoc() {\n         check("}]}