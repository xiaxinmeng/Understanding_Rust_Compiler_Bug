{"sha": "b0c4d0f8cbb703c90b9dc3cd1b48d2d550508ef8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwYzRkMGY4Y2JiNzAzYzkwYjlkYzNjZDFiNDhkMmQ1NTA1MDhlZjg=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-08-22T21:27:46Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-08-22T22:44:33Z"}, "message": "incremental: Do not rely on default transparency when decoding syntax contexts\n\nUsing `ExpnId`s default transparency here instead of the mark's real transparency was actually incorrect.", "tree": {"sha": "d102fa94ca035c6ea9a7bf787d803729345b93b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d102fa94ca035c6ea9a7bf787d803729345b93b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0c4d0f8cbb703c90b9dc3cd1b48d2d550508ef8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0c4d0f8cbb703c90b9dc3cd1b48d2d550508ef8", "html_url": "https://github.com/rust-lang/rust/commit/b0c4d0f8cbb703c90b9dc3cd1b48d2d550508ef8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0c4d0f8cbb703c90b9dc3cd1b48d2d550508ef8/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf345dd6e320a3f22396d4fbdd2ed078248105d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf345dd6e320a3f22396d4fbdd2ed078248105d4", "html_url": "https://github.com/rust-lang/rust/commit/bf345dd6e320a3f22396d4fbdd2ed078248105d4"}], "stats": {"total": 46, "additions": 27, "deletions": 19}, "files": [{"sha": "c21639d0dcaee0898e65e284684787ed1a6dc71d", "filename": "src/librustc/ty/query/on_disk_cache.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b0c4d0f8cbb703c90b9dc3cd1b48d2d550508ef8/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0c4d0f8cbb703c90b9dc3cd1b48d2d550508ef8/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=b0c4d0f8cbb703c90b9dc3cd1b48d2d550508ef8", "patch": "@@ -23,7 +23,7 @@ use std::mem;\n use syntax::ast::NodeId;\n use syntax::source_map::{SourceMap, StableSourceFileId};\n use syntax_pos::{BytePos, Span, DUMMY_SP, SourceFile};\n-use syntax_pos::hygiene::{ExpnId, SyntaxContext, ExpnData};\n+use syntax_pos::hygiene::{ExpnId, SyntaxContext};\n \n const TAG_FILE_FOOTER: u128 = 0xC0FFEE_C0FFEE_C0FFEE_C0FFEE_C0FFEE;\n \n@@ -593,8 +593,8 @@ impl<'a, 'tcx> SpecializedDecoder<Span> for CacheDecoder<'a, 'tcx> {\n         // don't seem to be used after HIR lowering, so everything should be fine\n         // as long as incremental compilation does not kick in before that.\n         let location = || Span::with_root_ctxt(lo, hi);\n-        let recover_from_expn_data = |this: &Self, expn_data, pos| {\n-            let span = location().fresh_expansion(expn_data);\n+        let recover_from_expn_data = |this: &Self, expn_data, transparency, pos| {\n+            let span = location().fresh_expansion_with_transparency(expn_data, transparency);\n             this.synthetic_syntax_contexts.borrow_mut().insert(pos, span.ctxt());\n             span\n         };\n@@ -603,9 +603,9 @@ impl<'a, 'tcx> SpecializedDecoder<Span> for CacheDecoder<'a, 'tcx> {\n                 location()\n             }\n             TAG_EXPN_DATA_INLINE => {\n-                let expn_data = Decodable::decode(self)?;\n+                let (expn_data, transparency) = Decodable::decode(self)?;\n                 recover_from_expn_data(\n-                    self, expn_data, AbsoluteBytePos::new(self.opaque.position())\n+                    self, expn_data, transparency, AbsoluteBytePos::new(self.opaque.position())\n                 )\n             }\n             TAG_EXPN_DATA_SHORTHAND => {\n@@ -614,9 +614,9 @@ impl<'a, 'tcx> SpecializedDecoder<Span> for CacheDecoder<'a, 'tcx> {\n                 if let Some(ctxt) = cached_ctxt {\n                     Span::new(lo, hi, ctxt)\n                 } else {\n-                    let expn_data =\n-                        self.with_position(pos.to_usize(), |this| ExpnData::decode(this))?;\n-                    recover_from_expn_data(self, expn_data, pos)\n+                    let (expn_data, transparency) =\n+                        self.with_position(pos.to_usize(), |this| Decodable::decode(this))?;\n+                    recover_from_expn_data(self, expn_data, transparency, pos)\n                 }\n             }\n             _ => {\n@@ -819,15 +819,15 @@ where\n         if span_data.ctxt == SyntaxContext::root() {\n             TAG_NO_EXPN_DATA.encode(self)\n         } else {\n-            let (expn_id, expn_data) = span_data.ctxt.outer_expn_with_data();\n+            let (expn_id, transparency, expn_data) = span_data.ctxt.outer_mark_with_data();\n             if let Some(pos) = self.expn_data_shorthands.get(&expn_id).cloned() {\n                 TAG_EXPN_DATA_SHORTHAND.encode(self)?;\n                 pos.encode(self)\n             } else {\n                 TAG_EXPN_DATA_INLINE.encode(self)?;\n                 let pos = AbsoluteBytePos::new(self.position());\n                 self.expn_data_shorthands.insert(expn_id, pos);\n-                expn_data.encode(self)\n+                (expn_data, transparency).encode(self)\n             }\n         }\n     }"}, {"sha": "c4a0e16d931f27f9f5a4c1a26eca6cd24d5ac764", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b0c4d0f8cbb703c90b9dc3cd1b48d2d550508ef8/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0c4d0f8cbb703c90b9dc3cd1b48d2d550508ef8/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=b0c4d0f8cbb703c90b9dc3cd1b48d2d550508ef8", "patch": "@@ -183,8 +183,9 @@ impl HygieneData {\n         self.syntax_context_data[ctxt.0 as usize].outer_expn\n     }\n \n-    fn outer_transparency(&self, ctxt: SyntaxContext) -> Transparency {\n-        self.syntax_context_data[ctxt.0 as usize].outer_transparency\n+    fn outer_mark(&self, ctxt: SyntaxContext) -> (ExpnId, Transparency) {\n+        let data = &self.syntax_context_data[ctxt.0 as usize];\n+        (data.outer_expn, data.outer_transparency)\n     }\n \n     fn parent_ctxt(&self, ctxt: SyntaxContext) -> SyntaxContext {\n@@ -200,7 +201,7 @@ impl HygieneData {\n     fn marks(&self, mut ctxt: SyntaxContext) -> Vec<(ExpnId, Transparency)> {\n         let mut marks = Vec::new();\n         while ctxt != SyntaxContext::root() {\n-            marks.push((self.outer_expn(ctxt), self.outer_transparency(ctxt)));\n+            marks.push(self.outer_mark(ctxt));\n             ctxt = self.parent_ctxt(ctxt);\n         }\n         marks.reverse();\n@@ -535,13 +536,11 @@ impl SyntaxContext {\n         HygieneData::with(|data| data.expn_data(data.outer_expn(self)).clone())\n     }\n \n-    /// `ctxt.outer_expn_with_data()` is equivalent to but faster than\n-    /// `{ let outer = ctxt.outer_expn(); (outer, outer.expn_data()) }`.\n     #[inline]\n-    pub fn outer_expn_with_data(self) -> (ExpnId, ExpnData) {\n+    pub fn outer_mark_with_data(self) -> (ExpnId, Transparency, ExpnData) {\n         HygieneData::with(|data| {\n-            let outer = data.outer_expn(self);\n-            (outer, data.expn_data(outer).clone())\n+            let (expn_id, transparency) = data.outer_mark(self);\n+            (expn_id, transparency, data.expn_data(expn_id).clone())\n         })\n     }\n \n@@ -563,9 +562,18 @@ impl Span {\n     /// The returned span belongs to the created expansion and has the new properties,\n     /// but its location is inherited from the current span.\n     pub fn fresh_expansion(self, expn_data: ExpnData) -> Span {\n+        let transparency = expn_data.default_transparency;\n+        self.fresh_expansion_with_transparency(expn_data, transparency)\n+    }\n+\n+    pub fn fresh_expansion_with_transparency(\n+        self, expn_data: ExpnData, transparency: Transparency\n+    ) -> Span {\n         HygieneData::with(|data| {\n             let expn_id = data.fresh_expn(Some(expn_data));\n-            self.with_ctxt(data.apply_mark(SyntaxContext::root(), expn_id))\n+            self.with_ctxt(data.apply_mark_with_transparency(\n+                SyntaxContext::root(), expn_id, transparency\n+            ))\n         })\n     }\n }"}]}