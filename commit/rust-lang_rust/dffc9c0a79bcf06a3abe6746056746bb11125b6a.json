{"sha": "dffc9c0a79bcf06a3abe6746056746bb11125b6a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmZmM5YzBhNzliY2YwNmEzYWJlNjc0NjA1Njc0NmJiMTExMjViNmE=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-05-05T12:19:51Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2021-08-05T21:08:28Z"}, "message": "Move extra arguments for highlight URL generation into a new ContextInfo struct for better readability", "tree": {"sha": "328932614d10f3089adee4376530a8b69af628ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/328932614d10f3089adee4376530a8b69af628ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dffc9c0a79bcf06a3abe6746056746bb11125b6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dffc9c0a79bcf06a3abe6746056746bb11125b6a", "html_url": "https://github.com/rust-lang/rust/commit/dffc9c0a79bcf06a3abe6746056746bb11125b6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dffc9c0a79bcf06a3abe6746056746bb11125b6a/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8869cb7a7e760f39088190a724991726cd05c50", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8869cb7a7e760f39088190a724991726cd05c50", "html_url": "https://github.com/rust-lang/rust/commit/e8869cb7a7e760f39088190a724991726cd05c50"}], "stats": {"total": 82, "additions": 42, "deletions": 40}, "files": [{"sha": "d1dbfeff876df421a9ac30adb1cc0a468eaa5112", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 39, "deletions": 31, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/dffc9c0a79bcf06a3abe6746056746bb11125b6a/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffc9c0a79bcf06a3abe6746056746bb11125b6a/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=dffc9c0a79bcf06a3abe6746056746bb11125b6a", "patch": "@@ -19,6 +19,21 @@ use rustc_span::symbol::Symbol;\n use super::format::{self, Buffer};\n use super::render::{LightSpan, LinkFromSrc};\n \n+/// This type is needed in case we want to render links on items to allow to go to their definition.\n+crate struct ContextInfo<'a, 'b, 'c> {\n+    crate context: &'a Context<'b>,\n+    /// This represents the \"lo\" bytes of the current file we're rendering. To get a [`Span`] from\n+    /// it, you just need to add add your current byte position in the string and its length (to get\n+    /// the \"hi\" part).\n+    ///\n+    /// This is used to create a [`LightSpan`] which is then used as an index in the `span_map` in\n+    /// order to retrieve the definition's [`Span`] (which is used to generate the URL).\n+    crate file_span_lo: u32,\n+    /// This field is used to know \"how far\" from the top of the directory we are to link to either\n+    /// documentation pages or other source pages.\n+    crate root_path: &'c str,\n+}\n+\n /// Highlights `src`, returning the HTML output.\n crate fn render_with_highlighting(\n     src: &str,\n@@ -28,9 +43,7 @@ crate fn render_with_highlighting(\n     tooltip: Option<(Option<Edition>, &str)>,\n     edition: Edition,\n     extra_content: Option<Buffer>,\n-    file_span_lo: u32,\n-    context: Option<&Context<'_>>,\n-    root_path: &str,\n+    context_info: Option<ContextInfo<'_, '_, '_>>,\n ) {\n     debug!(\"highlighting: ================\\n{}\\n==============\", src);\n     if let Some((edition_info, class)) = tooltip {\n@@ -47,7 +60,7 @@ crate fn render_with_highlighting(\n     }\n \n     write_header(out, class, extra_content);\n-    write_code(out, &src, edition, file_span_lo, context, root_path);\n+    write_code(out, &src, edition, context_info);\n     write_footer(out, playground_button);\n }\n \n@@ -69,37 +82,28 @@ fn write_header(out: &mut Buffer, class: Option<&str>, extra_content: Option<Buf\n ///\n /// Some explanations on the last arguments:\n ///\n-/// In case we are rendering a code block and not a source code file, `file_span_lo` value doesn't\n-/// matter and `context` will be `None`. To put it more simply: if `context` is `None`, the code\n-/// won't try to generate links to an ident definition.\n+/// In case we are rendering a code block and not a source code file, `context_info` will be `None`.\n+/// To put it more simply: if `context_info` is `None`, the code won't try to generate links to an\n+/// item definition.\n ///\n /// More explanations about spans and how we use them here are provided in the\n /// [`LightSpan::new_in_file`] function documentation about how it works.\n-///\n-/// As for `root_path`, it's used to know \"how far\" from the top of the directory we are to link\n-/// to either documentation pages or other source pages.\n-///\n-/// Same as `file_span_lo`: its value doesn't matter in case you are not rendering a source code\n-/// file.\n fn write_code(\n     out: &mut Buffer,\n     src: &str,\n     edition: Edition,\n-    file_span_lo: u32,\n-    context: Option<&Context<'_>>,\n-    root_path: &str,\n+    context_info: Option<ContextInfo<'_, '_, '_>>,\n ) {\n     // This replace allows to fix how the code source with DOS backline characters is displayed.\n     let src = src.replace(\"\\r\\n\", \"\\n\");\n-    Classifier::new(&src, edition, file_span_lo).highlight(&mut |highlight| {\n-        match highlight {\n-            Highlight::Token { text, class } => {\n-                string(out, Escape(text), class, context, root_path)\n-            }\n-            Highlight::EnterSpan { class } => enter_span(out, class),\n-            Highlight::ExitSpan => exit_span(out),\n-        };\n-    });\n+    Classifier::new(&src, edition, context_info.as_ref().map(|c| c.file_span_lo).unwrap_or(0))\n+        .highlight(&mut |highlight| {\n+            match highlight {\n+                Highlight::Token { text, class } => string(out, Escape(text), class, &context_info),\n+                Highlight::EnterSpan { class } => enter_span(out, class),\n+                Highlight::ExitSpan => exit_span(out),\n+            };\n+        });\n }\n \n fn write_footer(out: &mut Buffer, playground_button: Option<&str>) {\n@@ -540,8 +544,7 @@ fn string<T: Display>(\n     out: &mut Buffer,\n     text: T,\n     klass: Option<Class>,\n-    context: Option<&Context<'_>>,\n-    root_path: &str,\n+    context_info: &Option<ContextInfo<'_, '_, '_>>,\n ) {\n     let klass = match klass {\n         None => return write!(out, \"{}\", text),\n@@ -570,14 +573,19 @@ fn string<T: Display>(\n                 path\n             });\n         }\n-        if let Some(context) = context {\n-            if let Some(href) =\n-                context.shared.span_correspondance_map.get(&def_span).and_then(|href| {\n+        if let Some(context_info) = context_info {\n+            if let Some(href) = context_info\n+                .context\n+                .shared\n+                .span_correspondance_map\n+                .get(&def_span)\n+                .and_then(|href| {\n+                    let context = context_info.context;\n                     match href {\n                         LinkFromSrc::Local(span) => {\n                             context\n                                 .href_from_span(clean::Span::wrap_raw(*span))\n-                                .map(|s| format!(\"{}{}\", root_path, s))\n+                                .map(|s| format!(\"{}{}\", context_info.root_path, s))\n                         }\n                         LinkFromSrc::External(def_id) => {\n                             format::href(*def_id, context).map(|(url, _, _)| url)"}, {"sha": "1259a1f3a23a2581d31b6ab1b3bb3b3ecff007bd", "filename": "src/librustdoc/html/highlight/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dffc9c0a79bcf06a3abe6746056746bb11125b6a/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffc9c0a79bcf06a3abe6746056746bb11125b6a/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ftests.rs?ref=dffc9c0a79bcf06a3abe6746056746bb11125b6a", "patch": "@@ -22,7 +22,7 @@ fn test_html_highlighting() {\n         let src = include_str!(\"fixtures/sample.rs\");\n         let html = {\n             let mut out = Buffer::new();\n-            write_code(&mut out, src, Edition::Edition2018, 0, None, \"\");\n+            write_code(&mut out, src, Edition::Edition2018, None);\n             format!(\"{}<pre><code>{}</code></pre>\\n\", STYLE, out.into_inner())\n         };\n         expect_file![\"fixtures/sample.html\"].assert_eq(&html);\n@@ -36,7 +36,7 @@ fn test_dos_backline() {\n     println!(\\\"foo\\\");\\r\\n\\\n }\\r\\n\";\n         let mut html = Buffer::new();\n-        write_code(&mut html, src, Edition::Edition2018, 0, None, \"\");\n+        write_code(&mut html, src, Edition::Edition2018, None);\n         expect_file![\"fixtures/dos_line.html\"].assert_eq(&html.into_inner());\n     });\n }"}, {"sha": "472323daf3017ae594eebe2a42b091a0cd505f98", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dffc9c0a79bcf06a3abe6746056746bb11125b6a/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffc9c0a79bcf06a3abe6746056746bb11125b6a/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=dffc9c0a79bcf06a3abe6746056746bb11125b6a", "patch": "@@ -330,9 +330,7 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for CodeBlocks<'_, 'a, I> {\n             tooltip,\n             edition,\n             None,\n-            0,\n             None,\n-            \"\",\n         );\n         Some(Event::Html(s.into_inner().into()))\n     }"}, {"sha": "f31305c76e642582b3306cdd3d07f1b02d5ba526", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dffc9c0a79bcf06a3abe6746056746bb11125b6a/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffc9c0a79bcf06a3abe6746056746bb11125b6a/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=dffc9c0a79bcf06a3abe6746056746bb11125b6a", "patch": "@@ -1081,9 +1081,7 @@ fn item_macro(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Mac\n             None,\n             it.span(cx.tcx()).inner().edition(),\n             None,\n-            0,\n             None,\n-            \"\",\n         );\n     });\n     document(w, cx, it, None)"}, {"sha": "9204c94bd7639dbb710e1bc00d929a3c43f1aba3", "filename": "src/librustdoc/html/sources.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dffc9c0a79bcf06a3abe6746056746bb11125b6a/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffc9c0a79bcf06a3abe6746056746bb11125b6a/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fsources.rs?ref=dffc9c0a79bcf06a3abe6746056746bb11125b6a", "patch": "@@ -275,8 +275,6 @@ fn print_src(\n         None,\n         edition,\n         Some(line_numbers),\n-        file_span_lo,\n-        Some(context),\n-        root_path,\n+        Some(highlight::ContextInfo { context, file_span_lo, root_path }),\n     );\n }"}]}