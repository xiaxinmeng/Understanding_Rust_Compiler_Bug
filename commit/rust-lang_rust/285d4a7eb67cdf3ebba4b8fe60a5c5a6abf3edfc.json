{"sha": "285d4a7eb67cdf3ebba4b8fe60a5c5a6abf3edfc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4NWQ0YTdlYjY3Y2RmM2ViYmE0YjhmZTYwYTVjNWE2YWJmM2VkZmM=", "commit": {"author": {"name": "Dan Robertson", "email": "dan@dlrobertson.com", "date": "2019-02-13T17:52:22Z"}, "committer": {"name": "Dan Robertson", "email": "dan@dlrobertson.com", "date": "2019-02-13T17:52:22Z"}, "message": "suggestion-diagnostics: as_ref improve snippet\n\nImprove the code snippet suggested in suggestion-diagnostics when\nsuggesting the use of as_ref.", "tree": {"sha": "fd588a2bf815afbd8d2eff3f682bf97565bceeb1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd588a2bf815afbd8d2eff3f682bf97565bceeb1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/285d4a7eb67cdf3ebba4b8fe60a5c5a6abf3edfc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF5dO2RaKc5C+SCJ9RcSmUsR+QqUFAlxkWVkACgkQRcSmUsR+\nQqXjzA//agtAeB2UsxWyu2PAjnDW0txHY/q0QmQu/3/x4y80T7F24xX5GmJ3vWol\nmY0EQBCWiHfFhtPts7gefGQrOeGxk8FD7zVNyZtF44crYmyhSwbY4Y81+TsVz3rO\nMWh+wj1dsZy+LCUKLKba2fYG9Vmsggy4j65X+5zS1/HgV/0Hpn2MdZS0r/Oox8J1\nt/yzbUlnBKCcL07dItdzgI7E0/uZMFgv7S95cDMXB+FRKrMykFy754zhBLVN/vT7\nxqvIGlx8pXxPJQzRrMKRkElvh1nKR6xPxV3iULPeN+47kkPWnNaLzEMhMQ1a5hBe\nMIS1lXOh3nxoYjWBABDgZLM+LKkZooJpS2g4+81z/v4ElrEsYTGitlyJ9JXFIHKj\nPQYYnK+BlSiEdaiVcqMTp+3TL57+29jBHMx0+BMHUCGCo7Ex6m6BgIP5gQxJRTgd\n9eM1BQc7dAKCwFWdVhxfhtZ82/iIDF8dJzcEPdzPBaTEermpdcWZcTonaXSD/hjA\nqKN/PNmveSJXqQeWrveKcWgf0D5AE9XLeAvuyyHSD7x4a6qzvItaj8zG19t6B2Ds\nsrNQ567bhs6sIYZXhGiGAV9L0oE4XaitIYlCs96qggPliZyidGM4lezwkwlKy3vW\n1qNOeTXMFN/BI8MYCuEBjZfCbOdA7DDsoQfv/zpdYQZfqUkN6Ic=\n=c9Mx\n-----END PGP SIGNATURE-----", "payload": "tree fd588a2bf815afbd8d2eff3f682bf97565bceeb1\nparent e54494727855cd14229f5d456591ed2a2f027c46\nauthor Dan Robertson <dan@dlrobertson.com> 1550080342 +0000\ncommitter Dan Robertson <dan@dlrobertson.com> 1550080342 +0000\n\nsuggestion-diagnostics: as_ref improve snippet\n\nImprove the code snippet suggested in suggestion-diagnostics when\nsuggesting the use of as_ref.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/285d4a7eb67cdf3ebba4b8fe60a5c5a6abf3edfc", "html_url": "https://github.com/rust-lang/rust/commit/285d4a7eb67cdf3ebba4b8fe60a5c5a6abf3edfc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/285d4a7eb67cdf3ebba4b8fe60a5c5a6abf3edfc/comments", "author": {"login": "dlrobertson", "id": 7504153, "node_id": "MDQ6VXNlcjc1MDQxNTM=", "avatar_url": "https://avatars.githubusercontent.com/u/7504153?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dlrobertson", "html_url": "https://github.com/dlrobertson", "followers_url": "https://api.github.com/users/dlrobertson/followers", "following_url": "https://api.github.com/users/dlrobertson/following{/other_user}", "gists_url": "https://api.github.com/users/dlrobertson/gists{/gist_id}", "starred_url": "https://api.github.com/users/dlrobertson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dlrobertson/subscriptions", "organizations_url": "https://api.github.com/users/dlrobertson/orgs", "repos_url": "https://api.github.com/users/dlrobertson/repos", "events_url": "https://api.github.com/users/dlrobertson/events{/privacy}", "received_events_url": "https://api.github.com/users/dlrobertson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dlrobertson", "id": 7504153, "node_id": "MDQ6VXNlcjc1MDQxNTM=", "avatar_url": "https://avatars.githubusercontent.com/u/7504153?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dlrobertson", "html_url": "https://github.com/dlrobertson", "followers_url": "https://api.github.com/users/dlrobertson/followers", "following_url": "https://api.github.com/users/dlrobertson/following{/other_user}", "gists_url": "https://api.github.com/users/dlrobertson/gists{/gist_id}", "starred_url": "https://api.github.com/users/dlrobertson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dlrobertson/subscriptions", "organizations_url": "https://api.github.com/users/dlrobertson/orgs", "repos_url": "https://api.github.com/users/dlrobertson/repos", "events_url": "https://api.github.com/users/dlrobertson/events{/privacy}", "received_events_url": "https://api.github.com/users/dlrobertson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e54494727855cd14229f5d456591ed2a2f027c46", "url": "https://api.github.com/repos/rust-lang/rust/commits/e54494727855cd14229f5d456591ed2a2f027c46", "html_url": "https://github.com/rust-lang/rust/commit/e54494727855cd14229f5d456591ed2a2f027c46"}], "stats": {"total": 31, "additions": 18, "deletions": 13}, "files": [{"sha": "bb9fc872b85d28065309456fdaede00533302649", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/285d4a7eb67cdf3ebba4b8fe60a5c5a6abf3edfc/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/285d4a7eb67cdf3ebba4b8fe60a5c5a6abf3edfc/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=285d4a7eb67cdf3ebba4b8fe60a5c5a6abf3edfc", "patch": "@@ -210,7 +210,10 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     /// ```\n     /// opt.map(|arg| { takes_ref(arg) });\n     /// ```\n-    fn can_use_as_ref(&self, expr: &hir::Expr) -> Option<(Span, &'static str, String)> {\n+    fn can_use_as_ref(\n+        &self,\n+        expr: &hir::Expr,\n+    ) -> Option<(Span, &'static str, String)> {\n         if let hir::ExprKind::Path(hir::QPath::Resolved(_, ref path)) = expr.node {\n             if let hir::def::Def::Local(id) = path.def {\n                 let parent = self.tcx.hir().get_parent_node(id);\n@@ -233,10 +236,12 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             self_ty.starts_with(\"std::option::Option\") ||\n                             self_ty.starts_with(\"std::result::Result\")\n                         ) && (name == \"map\" || name == \"and_then\");\n-                        if is_as_ref_able {\n-                            return Some((span.shrink_to_lo(),\n-                                         \"consider using `as_ref` instead\",\n-                                         \"as_ref().\".into()));\n+                        match (is_as_ref_able, self.sess().source_map().span_to_snippet(*span)) {\n+                            (true, Ok(src)) => {\n+                                return Some((*span, \"consider using `as_ref` instead\",\n+                                             format!(\"as_ref().{}\", src)));\n+                            },\n+                            _ => ()\n                         }\n                     }\n                 }"}, {"sha": "8143acc957b4ca243a802a432355645c413dd6e0", "filename": "src/test/ui/suggestions/as-ref.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/285d4a7eb67cdf3ebba4b8fe60a5c5a6abf3edfc/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/285d4a7eb67cdf3ebba4b8fe60a5c5a6abf3edfc/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref.stderr?ref=285d4a7eb67cdf3ebba4b8fe60a5c5a6abf3edfc", "patch": "@@ -2,9 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/as-ref.rs:6:27\n    |\n LL |   opt.map(|arg| takes_ref(arg));\n-   |       -                   ^^^ expected &Foo, found struct `Foo`\n+   |       ---                 ^^^ expected &Foo, found struct `Foo`\n    |       |\n-   |       help: consider using `as_ref` instead: `as_ref().`\n+   |       help: consider using `as_ref` instead: `as_ref().map`\n    |\n    = note: expected type `&Foo`\n               found type `Foo`\n@@ -13,9 +13,9 @@ error[E0308]: mismatched types\n   --> $DIR/as-ref.rs:8:37\n    |\n LL |   opt.and_then(|arg| Some(takes_ref(arg)));\n-   |       -                             ^^^ expected &Foo, found struct `Foo`\n+   |       --------                      ^^^ expected &Foo, found struct `Foo`\n    |       |\n-   |       help: consider using `as_ref` instead: `as_ref().`\n+   |       help: consider using `as_ref` instead: `as_ref().and_then`\n    |\n    = note: expected type `&Foo`\n               found type `Foo`\n@@ -24,9 +24,9 @@ error[E0308]: mismatched types\n   --> $DIR/as-ref.rs:11:27\n    |\n LL |   opt.map(|arg| takes_ref(arg));\n-   |       -                   ^^^ expected &Foo, found struct `Foo`\n+   |       ---                 ^^^ expected &Foo, found struct `Foo`\n    |       |\n-   |       help: consider using `as_ref` instead: `as_ref().`\n+   |       help: consider using `as_ref` instead: `as_ref().map`\n    |\n    = note: expected type `&Foo`\n               found type `Foo`\n@@ -35,9 +35,9 @@ error[E0308]: mismatched types\n   --> $DIR/as-ref.rs:13:35\n    |\n LL |   opt.and_then(|arg| Ok(takes_ref(arg)));\n-   |       -                           ^^^ expected &Foo, found struct `Foo`\n+   |       --------                    ^^^ expected &Foo, found struct `Foo`\n    |       |\n-   |       help: consider using `as_ref` instead: `as_ref().`\n+   |       help: consider using `as_ref` instead: `as_ref().and_then`\n    |\n    = note: expected type `&Foo`\n               found type `Foo`"}]}