{"sha": "909957793e7008e602079e8fd4c74c9bbda37341", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwOTk1Nzc5M2U3MDA4ZTYwMjA3OWU4ZmQ0Yzc0YzliYmRhMzczNDE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-06-17T13:11:34Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-07-03T23:42:35Z"}, "message": "Add a boolean flag to ExistentialBounds tracking whether the\nregion-bound is expected to change in Rust 1.3, but don't use it for\nanything in this commit. Note that this is not a \"significant\" part of\nthe type (it's not part of the formal model) so we have to normalize\nthis away or trans starts to get confused because two equal types wind\nup with distinct LLVM types.", "tree": {"sha": "c0b0e7aac707de36b1764ea47f84293099bee7f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0b0e7aac707de36b1764ea47f84293099bee7f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/909957793e7008e602079e8fd4c74c9bbda37341", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/909957793e7008e602079e8fd4c74c9bbda37341", "html_url": "https://github.com/rust-lang/rust/commit/909957793e7008e602079e8fd4c74c9bbda37341", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/909957793e7008e602079e8fd4c74c9bbda37341/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef85338175cb322fa07846d20eec91c2800a98e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef85338175cb322fa07846d20eec91c2800a98e6", "html_url": "https://github.com/rust-lang/rust/commit/ef85338175cb322fa07846d20eec91c2800a98e6"}], "stats": {"total": 241, "additions": 202, "deletions": 39}, "files": [{"sha": "61fce699dd555285c6dd5b4235a355deac284fe3", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/909957793e7008e602079e8fd4c74c9bbda37341/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/909957793e7008e602079e8fd4c74c9bbda37341/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=909957793e7008e602079e8fd4c74c9bbda37341", "patch": "@@ -887,9 +887,16 @@ fn parse_existential_bounds_<'a,'tcx, F>(st: &mut PState<'a,'tcx>,\n         }\n     }\n \n+    let region_bound_will_change = match next(st) {\n+        'y' => true,\n+        'n' => false,\n+        c => panic!(\"parse_ty: expected y/n not '{}'\", c)\n+    };\n+\n     return ty::ExistentialBounds { region_bound: region_bound,\n                                    builtin_bounds: builtin_bounds,\n-                                   projection_bounds: projection_bounds };\n+                                   projection_bounds: projection_bounds,\n+                                   region_bound_will_change: region_bound_will_change };\n }\n \n fn parse_builtin_bounds<F>(st: &mut PState, mut _conv: F) -> ty::BuiltinBounds where"}, {"sha": "441f9f102aea911e4fa67b7f1ffcc2f606f68ff5", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/909957793e7008e602079e8fd4c74c9bbda37341/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/909957793e7008e602079e8fd4c74c9bbda37341/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=909957793e7008e602079e8fd4c74c9bbda37341", "patch": "@@ -390,6 +390,8 @@ pub fn enc_existential_bounds<'a,'tcx>(w: &mut Encoder,\n     }\n \n     mywrite!(w, \".\");\n+\n+    mywrite!(w, \"{}\", if bs.region_bound_will_change {'y'} else {'n'});\n }\n \n pub fn enc_region_bounds<'a, 'tcx>(w: &mut Encoder,"}, {"sha": "ad53fb4a8a2701f2f69cf2e35902aa38d29655df", "filename": "src/librustc/middle/infer/bivariate.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/909957793e7008e602079e8fd4c74c9bbda37341/src%2Flibrustc%2Fmiddle%2Finfer%2Fbivariate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/909957793e7008e602079e8fd4c74c9bbda37341/src%2Flibrustc%2Fmiddle%2Finfer%2Fbivariate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fbivariate.rs?ref=909957793e7008e602079e8fd4c74c9bbda37341", "patch": "@@ -49,6 +49,11 @@ impl<'a, 'tcx> TypeRelation<'a, 'tcx> for Bivariate<'a, 'tcx> {\n \n     fn a_is_expected(&self) -> bool { self.fields.a_is_expected }\n \n+    fn will_change(&mut self, _: bool, _: bool) -> bool {\n+        // since we are not comparing regions, we don't care\n+        false\n+    }\n+\n     fn relate_with_variance<T:Relate<'a,'tcx>>(&mut self,\n                                                variance: ty::Variance,\n                                                a: &T,"}, {"sha": "0d081cfeee0410ea7f74065020b79abc94534619", "filename": "src/librustc/middle/infer/combine.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/909957793e7008e602079e8fd4c74c9bbda37341/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/909957793e7008e602079e8fd4c74c9bbda37341/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs?ref=909957793e7008e602079e8fd4c74c9bbda37341", "patch": "@@ -56,6 +56,7 @@ pub struct CombineFields<'a, 'tcx: 'a> {\n     pub infcx: &'a InferCtxt<'a, 'tcx>,\n     pub a_is_expected: bool,\n     pub trace: TypeTrace<'tcx>,\n+    pub cause: Option<ty_relate::Cause>,\n }\n \n pub fn super_combine_tys<'a,'tcx:'a,R>(infcx: &InferCtxt<'a, 'tcx>,"}, {"sha": "c0dcda1792be526426dfaabb383f8c43e8b2466c", "filename": "src/librustc/middle/infer/equate.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/909957793e7008e602079e8fd4c74c9bbda37341/src%2Flibrustc%2Fmiddle%2Finfer%2Fequate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/909957793e7008e602079e8fd4c74c9bbda37341/src%2Flibrustc%2Fmiddle%2Finfer%2Fequate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fequate.rs?ref=909957793e7008e602079e8fd4c74c9bbda37341", "patch": "@@ -34,6 +34,11 @@ impl<'a, 'tcx> TypeRelation<'a,'tcx> for Equate<'a, 'tcx> {\n \n     fn a_is_expected(&self) -> bool { self.fields.a_is_expected }\n \n+    fn will_change(&mut self, a: bool, b: bool) -> bool {\n+        // if either side changed from what it was, that could cause equality to fail\n+        a || b\n+    }\n+\n     fn relate_with_variance<T:Relate<'a,'tcx>>(&mut self,\n                                                _: ty::Variance,\n                                                a: &T,"}, {"sha": "8d226739e1688cdb4bbf82822a43098900e342b3", "filename": "src/librustc/middle/infer/error_reporting.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/909957793e7008e602079e8fd4c74c9bbda37341/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/909957793e7008e602079e8fd4c74c9bbda37341/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs?ref=909957793e7008e602079e8fd4c74c9bbda37341", "patch": "@@ -593,7 +593,8 @@ impl<'a, 'tcx> ErrorReporting<'tcx> for InferCtxt<'a, 'tcx> {\n                                sub: Region,\n                                sup: Region) {\n         match origin {\n-            infer::Subtype(trace) => {\n+            infer::Subtype(trace) |\n+            infer::DefaultExistentialBound(trace) => {\n                 let terr = ty::terr_regions_does_not_outlive(sup, sub);\n                 self.report_and_explain_type_error(trace, &terr);\n             }\n@@ -1569,7 +1570,8 @@ impl<'a, 'tcx> ErrorReportingHelpers<'tcx> for InferCtxt<'a, 'tcx> {\n \n     fn note_region_origin(&self, origin: &SubregionOrigin<'tcx>) {\n         match *origin {\n-            infer::Subtype(ref trace) => {\n+            infer::Subtype(ref trace) |\n+            infer::DefaultExistentialBound(ref trace) => {\n                 let desc = match trace.origin {\n                     infer::Misc(_) => {\n                         \"types are compatible\""}, {"sha": "adfd1a8a7d7945abf088ad564ae2d0836be68604", "filename": "src/librustc/middle/infer/glb.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/909957793e7008e602079e8fd4c74c9bbda37341/src%2Flibrustc%2Fmiddle%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/909957793e7008e602079e8fd4c74c9bbda37341/src%2Flibrustc%2Fmiddle%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fglb.rs?ref=909957793e7008e602079e8fd4c74c9bbda37341", "patch": "@@ -35,6 +35,16 @@ impl<'a, 'tcx> TypeRelation<'a, 'tcx> for Glb<'a, 'tcx> {\n \n     fn a_is_expected(&self) -> bool { self.fields.a_is_expected }\n \n+    fn will_change(&mut self, a: bool, b: bool) -> bool {\n+        // Hmm, so the result of GLB will still be a LB if one or both\n+        // sides change to 'static, but it may no longer be the GLB.\n+        // I'm going to go with `a || b` here to be conservative,\n+        // since the result of this operation may be affected, though\n+        // I think it would mostly be more accepting than before (since the result\n+        // would be a bigger region).\n+        a || b\n+    }\n+\n     fn relate_with_variance<T:Relate<'a,'tcx>>(&mut self,\n                                                variance: ty::Variance,\n                                                a: &T,"}, {"sha": "f10d4adc8e5f2df62032133480d7b3aac5642fbf", "filename": "src/librustc/middle/infer/lub.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/909957793e7008e602079e8fd4c74c9bbda37341/src%2Flibrustc%2Fmiddle%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/909957793e7008e602079e8fd4c74c9bbda37341/src%2Flibrustc%2Fmiddle%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Flub.rs?ref=909957793e7008e602079e8fd4c74c9bbda37341", "patch": "@@ -35,6 +35,11 @@ impl<'a, 'tcx> TypeRelation<'a, 'tcx> for Lub<'a, 'tcx> {\n \n     fn a_is_expected(&self) -> bool { self.fields.a_is_expected }\n \n+    fn will_change(&mut self, a: bool, b: bool) -> bool {\n+        // result will be 'static if a || b\n+        a || b\n+    }\n+\n     fn relate_with_variance<T:Relate<'a,'tcx>>(&mut self,\n                                                variance: ty::Variance,\n                                                a: &T,"}, {"sha": "34726436ff755acd1a888b8f5e0086e064cb68ea", "filename": "src/librustc/middle/infer/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/909957793e7008e602079e8fd4c74c9bbda37341/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/909957793e7008e602079e8fd4c74c9bbda37341/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs?ref=909957793e7008e602079e8fd4c74c9bbda37341", "patch": "@@ -194,6 +194,9 @@ pub enum SubregionOrigin<'tcx> {\n     // Arose from a subtyping relation\n     Subtype(TypeTrace<'tcx>),\n \n+    // Arose from a subtyping relation\n+    DefaultExistentialBound(TypeTrace<'tcx>),\n+\n     // Stack-allocated closures cannot outlive innermost loop\n     // or function so as to ensure we only require finite stack\n     InfStackClosure(Span),\n@@ -658,7 +661,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                       -> CombineFields<'a, 'tcx> {\n         CombineFields {infcx: self,\n                        a_is_expected: a_is_expected,\n-                       trace: trace}\n+                       trace: trace,\n+                       cause: None}\n     }\n \n     // public so that it can be used from the rustc_driver unit tests\n@@ -1464,6 +1468,7 @@ impl<'tcx> SubregionOrigin<'tcx> {\n     pub fn span(&self) -> Span {\n         match *self {\n             Subtype(ref a) => a.span(),\n+            DefaultExistentialBound(ref a) => a.span(),\n             InfStackClosure(a) => a,\n             InvokeClosure(a) => a,\n             DerefPointer(a) => a,"}, {"sha": "7c40e96a2f7a5c8e43eb922c7b6fcd0cb7aae133", "filename": "src/librustc/middle/infer/sub.rs", "status": "modified", "additions": 31, "deletions": 8, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/909957793e7008e602079e8fd4c74c9bbda37341/src%2Flibrustc%2Fmiddle%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/909957793e7008e602079e8fd4c74c9bbda37341/src%2Flibrustc%2Fmiddle%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fsub.rs?ref=909957793e7008e602079e8fd4c74c9bbda37341", "patch": "@@ -10,16 +10,17 @@\n \n use super::combine::{self, CombineFields};\n use super::higher_ranked::HigherRankedRelations;\n-use super::Subtype;\n+use super::SubregionOrigin;\n use super::type_variable::{SubtypeOf, SupertypeOf};\n \n use middle::ty::{self, Ty};\n use middle::ty::TyVar;\n-use middle::ty_relate::{Relate, RelateResult, TypeRelation};\n+use middle::ty_relate::{Cause, Relate, RelateResult, TypeRelation};\n+use std::mem;\n \n /// \"Greatest lower bound\" (common subtype)\n pub struct Sub<'a, 'tcx: 'a> {\n-    fields: CombineFields<'a, 'tcx>\n+    fields: CombineFields<'a, 'tcx>,\n }\n \n impl<'a, 'tcx> Sub<'a, 'tcx> {\n@@ -33,6 +34,25 @@ impl<'a, 'tcx> TypeRelation<'a, 'tcx> for Sub<'a, 'tcx> {\n     fn tcx(&self) -> &'a ty::ctxt<'tcx> { self.fields.infcx.tcx }\n     fn a_is_expected(&self) -> bool { self.fields.a_is_expected }\n \n+    fn with_cause<F,R>(&mut self, cause: Cause, f: F) -> R\n+        where F: FnOnce(&mut Self) -> R\n+    {\n+        debug!(\"sub with_cause={:?}\", cause);\n+        let old_cause = mem::replace(&mut self.fields.cause, Some(cause));\n+        let r = f(self);\n+        debug!(\"sub old_cause={:?}\", old_cause);\n+        self.fields.cause = old_cause;\n+        r\n+    }\n+\n+    fn will_change(&mut self, a: bool, b: bool) -> bool {\n+        // if we have (Foo+'a) <: (Foo+'b), this requires that 'a:'b.\n+        // So if 'a becomes 'static, no additional errors can occur.\n+        // OTOH, if 'a stays the same, but 'b becomes 'static, we\n+        // could have a problem.\n+        !a && b\n+    }\n+\n     fn relate_with_variance<T:Relate<'a,'tcx>>(&mut self,\n                                                variance: ty::Variance,\n                                                a: &T,\n@@ -84,11 +104,14 @@ impl<'a, 'tcx> TypeRelation<'a, 'tcx> for Sub<'a, 'tcx> {\n     }\n \n     fn regions(&mut self, a: ty::Region, b: ty::Region) -> RelateResult<'tcx, ty::Region> {\n-        debug!(\"{}.regions({:?}, {:?})\",\n-               self.tag(),\n-               a,\n-               b);\n-        let origin = Subtype(self.fields.trace.clone());\n+        debug!(\"{}.regions({:?}, {:?}) self.cause={:?}\",\n+               self.tag(), a, b, self.fields.cause);\n+        let origin = match self.fields.cause {\n+            Some(Cause::ExistentialRegionBound(true)) =>\n+                SubregionOrigin::DefaultExistentialBound(self.fields.trace.clone()),\n+            _ =>\n+                SubregionOrigin::Subtype(self.fields.trace.clone()),\n+        };\n         self.fields.infcx.region_vars.make_subregion(origin, a, b);\n         Ok(a)\n     }"}, {"sha": "abc300869adcafb61e329c21de4aecb4e67510b5", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/909957793e7008e602079e8fd4c74c9bbda37341/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/909957793e7008e602079e8fd4c74c9bbda37341/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=909957793e7008e602079e8fd4c74c9bbda37341", "patch": "@@ -2445,6 +2445,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     region_bound: data_b.bounds.region_bound,\n                     builtin_bounds: data_b.bounds.builtin_bounds,\n                     projection_bounds: data_a.bounds.projection_bounds.clone(),\n+                    region_bound_will_change: data_b.bounds.region_bound_will_change,\n                 };\n \n                 let new_trait = tcx.mk_trait(data_a.principal.clone(), bounds);"}, {"sha": "f8b00ba153fcf1237eb81162d4548d1d16d0b4e5", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/909957793e7008e602079e8fd4c74c9bbda37341/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/909957793e7008e602079e8fd4c74c9bbda37341/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=909957793e7008e602079e8fd4c74c9bbda37341", "patch": "@@ -2055,6 +2055,11 @@ pub struct ExistentialBounds<'tcx> {\n     pub region_bound: ty::Region,\n     pub builtin_bounds: BuiltinBounds,\n     pub projection_bounds: Vec<PolyProjectionPredicate<'tcx>>,\n+\n+    // If true, this TyTrait used a \"default bound\" in the surface\n+    // syntax.  This makes no difference to the type system but is\n+    // handy for error reporting.\n+    pub region_bound_will_change: bool,\n }\n \n #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]"}, {"sha": "5e88a0aefd3ab409a4b36c4eb59a957040083be8", "filename": "src/librustc/middle/ty_fold.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/909957793e7008e602079e8fd4c74c9bbda37341/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/909957793e7008e602079e8fd4c74c9bbda37341/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_fold.rs?ref=909957793e7008e602079e8fd4c74c9bbda37341", "patch": "@@ -728,6 +728,7 @@ pub fn super_fold_existential_bounds<'tcx, T: TypeFolder<'tcx>>(\n         region_bound: bounds.region_bound.fold_with(this),\n         builtin_bounds: bounds.builtin_bounds,\n         projection_bounds: bounds.projection_bounds.fold_with(this),\n+        region_bound_will_change: bounds.region_bound_will_change,\n     }\n }\n "}, {"sha": "5776235780a3a927b225d5e5d7074f72bb7bb63b", "filename": "src/librustc/middle/ty_match.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/909957793e7008e602079e8fd4c74c9bbda37341/src%2Flibrustc%2Fmiddle%2Fty_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/909957793e7008e602079e8fd4c74c9bbda37341/src%2Flibrustc%2Fmiddle%2Fty_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_match.rs?ref=909957793e7008e602079e8fd4c74c9bbda37341", "patch": "@@ -42,6 +42,11 @@ impl<'a, 'tcx> TypeRelation<'a, 'tcx> for Match<'a, 'tcx> {\n     fn tcx(&self) -> &'a ty::ctxt<'tcx> { self.tcx }\n     fn a_is_expected(&self) -> bool { true } // irrelevant\n \n+    fn will_change(&mut self, _: bool, _: bool) -> bool {\n+        // we're ignoring regions in this code\n+        false\n+    }\n+\n     fn relate_with_variance<T:Relate<'a,'tcx>>(&mut self,\n                                                _: ty::Variance,\n                                                a: &T,"}, {"sha": "b8b2469b2066737f05abd0a6cfe482352e5d1c41", "filename": "src/librustc/middle/ty_relate/mod.rs", "status": "modified", "additions": 29, "deletions": 4, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/909957793e7008e602079e8fd4c74c9bbda37341/src%2Flibrustc%2Fmiddle%2Fty_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/909957793e7008e602079e8fd4c74c9bbda37341/src%2Flibrustc%2Fmiddle%2Fty_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_relate%2Fmod.rs?ref=909957793e7008e602079e8fd4c74c9bbda37341", "patch": "@@ -22,6 +22,11 @@ use syntax::ast;\n \n pub type RelateResult<'tcx, T> = Result<T, ty::type_err<'tcx>>;\n \n+#[derive(Clone, Debug)]\n+pub enum Cause {\n+    ExistentialRegionBound(bool), // if true, this is a default, else explicit\n+}\n+\n pub trait TypeRelation<'a,'tcx> : Sized {\n     fn tcx(&self) -> &'a ty::ctxt<'tcx>;\n \n@@ -32,6 +37,19 @@ pub trait TypeRelation<'a,'tcx> : Sized {\n     /// relation. Just affects error messages.\n     fn a_is_expected(&self) -> bool;\n \n+    fn with_cause<F,R>(&mut self, _cause: Cause, f: F) -> R\n+        where F: FnOnce(&mut Self) -> R\n+    {\n+        f(self)\n+    }\n+\n+    /// Hack for deciding whether the lifetime bound defaults change\n+    /// will be a breaking change or not. The bools indicate whether\n+    /// `a`/`b` have a default that will change to `'static`; the\n+    /// result is true if this will potentially affect the affect of\n+    /// relating `a` and `b`.\n+    fn will_change(&mut self, a: bool, b: bool) -> bool;\n+\n     /// Generic relation routine suitable for most anything.\n     fn relate<T:Relate<'a,'tcx>>(&mut self, a: &T, b: &T) -> RelateResult<'tcx, T> {\n         Relate::relate(self, a, b)\n@@ -366,14 +384,21 @@ impl<'a,'tcx:'a> Relate<'a,'tcx> for ty::ExistentialBounds<'tcx> {\n                  -> RelateResult<'tcx, ty::ExistentialBounds<'tcx>>\n         where R: TypeRelation<'a,'tcx>\n     {\n-        let r = try!(relation.relate_with_variance(ty::Contravariant,\n-                                                   &a.region_bound,\n-                                                   &b.region_bound));\n+        let will_change = relation.will_change(a.region_bound_will_change,\n+                                               b.region_bound_will_change);\n+\n+        let r =\n+            try!(relation.with_cause(\n+                Cause::ExistentialRegionBound(will_change),\n+                |relation| relation.relate_with_variance(ty::Contravariant,\n+                                                         &a.region_bound,\n+                                                         &b.region_bound)));\n         let nb = try!(relation.relate(&a.builtin_bounds, &b.builtin_bounds));\n         let pb = try!(relation.relate(&a.projection_bounds, &b.projection_bounds));\n         Ok(ty::ExistentialBounds { region_bound: r,\n                                    builtin_bounds: nb,\n-                                   projection_bounds: pb })\n+                                   projection_bounds: pb,\n+                                   region_bound_will_change: will_change })\n     }\n }\n "}, {"sha": "c4fe16805fa5637bccf3eb5993eac94f8fcd57a7", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/909957793e7008e602079e8fd4c74c9bbda37341/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/909957793e7008e602079e8fd4c74c9bbda37341/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=909957793e7008e602079e8fd4c74c9bbda37341", "patch": "@@ -299,6 +299,10 @@ impl<'tcx> fmt::Display for ty::TraitTy<'tcx> {\n             }\n         }\n \n+        if bounds.region_bound_will_change && tcx.sess.verbose() {\n+            components.push(format!(\"WILL-CHANGE\"));\n+        }\n+\n         Ok(())\n     }\n }"}, {"sha": "ed2d303b5e1b6f978f2bdef34b8e39ecf37025fc", "filename": "src/librustc_trans/trans/common.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/909957793e7008e602079e8fd4c74c9bbda37341/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/909957793e7008e602079e8fd4c74c9bbda37341/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs?ref=909957793e7008e602079e8fd4c74c9bbda37341", "patch": "@@ -82,6 +82,16 @@ pub fn erase_regions<'tcx,T>(cx: &ty::ctxt<'tcx>, value: &T) -> T\n             return t_norm;\n         }\n \n+        fn fold_existential_bounds(&mut self, s: &ty::ExistentialBounds<'tcx>)\n+                                   -> ty::ExistentialBounds<'tcx> {\n+            let mut s = ty_fold::super_fold_existential_bounds(self, s);\n+\n+            // this annoying flag messes up trans normalization\n+            s.region_bound_will_change = false;\n+\n+            s\n+        }\n+\n         fn fold_binder<T>(&mut self, t: &ty::Binder<T>) -> ty::Binder<T>\n             where T : TypeFoldable<'tcx>\n         {"}, {"sha": "7f29af0d84b2df4dcb863c25bfff865853c2c2a1", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 33, "deletions": 23, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/909957793e7008e602079e8fd4c74c9bbda37341/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/909957793e7008e602079e8fd4c74c9bbda37341/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=909957793e7008e602079e8fd4c74c9bbda37341", "patch": "@@ -1549,7 +1549,7 @@ pub fn ast_ty_to_ty<'tcx>(this: &AstConv<'tcx>,\n             let rscope1 =\n                 &ObjectLifetimeDefaultRscope::new(\n                     rscope,\n-                    Some(ty::ObjectLifetimeDefault::Specific(r)));\n+                    ty::ObjectLifetimeDefault::Specific(r));\n             let t = ast_ty_to_ty(this, rscope1, &*mt.ty);\n             tcx.mk_ref(tcx.mk_region(r), ty::mt {ty: t, mutbl: mt.mutbl})\n         }\n@@ -2016,19 +2016,38 @@ pub fn conv_existential_bounds_from_partitioned_bounds<'tcx>(\n                   \"only the builtin traits can be used as closure or object bounds\");\n     }\n \n-    let region_bound = compute_object_lifetime_bound(this,\n-                                                     rscope,\n-                                                     span,\n-                                                     &region_bounds,\n-                                                     principal_trait_ref,\n-                                                     builtin_bounds);\n+    let region_bound =\n+        compute_object_lifetime_bound(this,\n+                                      span,\n+                                      &region_bounds,\n+                                      principal_trait_ref,\n+                                      builtin_bounds);\n+\n+    let (region_bound, will_change) = match region_bound {\n+        Some(r) => (r, false),\n+        None => {\n+            match rscope.object_lifetime_default(span) {\n+                Some(r) => (r, rscope.object_lifetime_default_will_change_in_1_3()),\n+                None => {\n+                    span_err!(this.tcx().sess, span, E0228,\n+                              \"the lifetime bound for this object type cannot be deduced \\\n+                               from context; please supply an explicit bound\");\n+                    (ty::ReStatic, false)\n+                }\n+            }\n+        }\n+    };\n+\n+    debug!(\"region_bound: {:?} will_change: {:?}\",\n+           region_bound, will_change);\n \n     ty::sort_bounds_list(&mut projection_bounds);\n \n     ty::ExistentialBounds {\n         region_bound: region_bound,\n         builtin_bounds: builtin_bounds,\n         projection_bounds: projection_bounds,\n+        region_bound_will_change: will_change,\n     }\n }\n \n@@ -2038,12 +2057,11 @@ pub fn conv_existential_bounds_from_partitioned_bounds<'tcx>(\n /// region bounds. It may be that we can derive no bound at all, in which case we return `None`.\n fn compute_object_lifetime_bound<'tcx>(\n     this: &AstConv<'tcx>,\n-    rscope: &RegionScope,\n     span: Span,\n     explicit_region_bounds: &[&ast::Lifetime],\n     principal_trait_ref: ty::PolyTraitRef<'tcx>,\n     builtin_bounds: ty::BuiltinBounds)\n-    -> ty::Region\n+    -> Option<ty::Region> // if None, use the default\n {\n     let tcx = this.tcx();\n \n@@ -2061,11 +2079,11 @@ fn compute_object_lifetime_bound<'tcx>(\n     if !explicit_region_bounds.is_empty() {\n         // Explicitly specified region bound. Use that.\n         let r = explicit_region_bounds[0];\n-        return ast_region_to_region(tcx, r);\n+        return Some(ast_region_to_region(tcx, r));\n     }\n \n     if let Err(ErrorReported) = this.ensure_super_predicates(span,principal_trait_ref.def_id()) {\n-        return ty::ReStatic;\n+        return Some(ty::ReStatic);\n     }\n \n     // No explicit region bound specified. Therefore, examine trait\n@@ -2074,23 +2092,15 @@ fn compute_object_lifetime_bound<'tcx>(\n         object_region_bounds(tcx, &principal_trait_ref, builtin_bounds);\n \n     // If there are no derived region bounds, then report back that we\n-    // can find no region bound.\n+    // can find no region bound. The caller will use the default.\n     if derived_region_bounds.is_empty() {\n-        match rscope.object_lifetime_default(span) {\n-            Some(r) => { return r; }\n-            None => {\n-                span_err!(this.tcx().sess, span, E0228,\n-                          \"the lifetime bound for this object type cannot be deduced \\\n-                           from context; please supply an explicit bound\");\n-                return ty::ReStatic;\n-            }\n-        }\n+        return None;\n     }\n \n     // If any of the derived region bounds are 'static, that is always\n     // the best choice.\n     if derived_region_bounds.iter().any(|r| ty::ReStatic == *r) {\n-        return ty::ReStatic;\n+        return Some(ty::ReStatic);\n     }\n \n     // Determine whether there is exactly one unique region in the set\n@@ -2101,7 +2111,7 @@ fn compute_object_lifetime_bound<'tcx>(\n         span_err!(tcx.sess, span, E0227,\n                   \"ambiguous lifetime bound, explicit lifetime bound required\");\n     }\n-    return r;\n+    return Some(r);\n }\n \n pub struct PartitionedBounds<'a> {"}, {"sha": "d2c982b3099e7d93593c9273a1ed1b0a530f4439", "filename": "src/librustc_typeck/rscope.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/909957793e7008e602079e8fd4c74c9bbda37341/src%2Flibrustc_typeck%2Frscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/909957793e7008e602079e8fd4c74c9bbda37341/src%2Flibrustc_typeck%2Frscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Frscope.rs?ref=909957793e7008e602079e8fd4c74c9bbda37341", "patch": "@@ -52,6 +52,19 @@ pub trait RegionScope {\n     /// computing `object_lifetime_default` (in particular, in legacy\n     /// modes, it may not be relevant).\n     fn base_object_lifetime_default(&self, span: Span) -> ty::Region;\n+\n+    /// Used to issue warnings in Rust 1.2, not needed after that.\n+    /// True if the result of `object_lifetime_default` will change in 1.3.\n+    fn object_lifetime_default_will_change_in_1_3(&self) -> bool {\n+        false\n+    }\n+\n+    /// Used to issue warnings in Rust 1.2, not needed after that.\n+    /// True if the result of `base_object_lifetime_default` differs\n+    /// from the result of `object_lifetime_default`.\n+    fn base_object_lifetime_default_differs(&self) -> bool {\n+        false\n+    }\n }\n \n // A scope in which all regions must be explicitly named. This is used\n@@ -219,6 +232,30 @@ impl<'r> RegionScope for ObjectLifetimeDefaultRscope<'r> {\n         assert!(false, \"this code should not execute until Rust 1.3\");\n         self.base_scope.base_object_lifetime_default(span)\n     }\n+\n+    fn object_lifetime_default_will_change_in_1_3(&self) -> bool {\n+        debug!(\"object_lifetime_default_will_change_in_1_3: {:?}\", self.default);\n+\n+        match self.default {\n+            ty::ObjectLifetimeDefault::Ambiguous |\n+            ty::ObjectLifetimeDefault::Specific(_) =>\n+                false,\n+\n+            ty::ObjectLifetimeDefault::BaseDefault =>\n+                self.base_scope.base_object_lifetime_default_differs()\n+        }\n+    }\n+\n+    fn base_object_lifetime_default_differs(&self) -> bool {\n+        debug!(\"base_object_lifetime_default_differs: {:?}\", self.default);\n+\n+        match self.default {\n+            ty::ObjectLifetimeDefault::Ambiguous |\n+            ty::ObjectLifetimeDefault::Specific(_) =>\n+                true,\n+\n+            ty::ObjectLifetimeDefault::BaseDefault =>\n+                self.base_scope.base_object_lifetime_default_differs(),\n         }\n     }\n "}]}