{"sha": "11c3eefa3594055192612d0d6f844e764dcbda15", "node_id": "C_kwDOAAsO6NoAKDExYzNlZWZhMzU5NDA1NTE5MjYxMmQwZDZmODQ0ZTc2NGRjYmRhMTU", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2022-02-06T03:25:27Z"}, "committer": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2022-02-25T02:03:40Z"}, "message": "Manually implement for supported lanes", "tree": {"sha": "4147eaaccf8c9f9b4814856deaf1b6fb6f1c8e78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4147eaaccf8c9f9b4814856deaf1b6fb6f1c8e78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11c3eefa3594055192612d0d6f844e764dcbda15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11c3eefa3594055192612d0d6f844e764dcbda15", "html_url": "https://github.com/rust-lang/rust/commit/11c3eefa3594055192612d0d6f844e764dcbda15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11c3eefa3594055192612d0d6f844e764dcbda15/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "842ac87747c4a6f8002ada6bab04d97320d206fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/842ac87747c4a6f8002ada6bab04d97320d206fc", "html_url": "https://github.com/rust-lang/rust/commit/842ac87747c4a6f8002ada6bab04d97320d206fc"}], "stats": {"total": 97, "additions": 38, "deletions": 59}, "files": [{"sha": "e27b2689606482ee8cdfbb99ae52dcaf1ec337fb", "filename": "crates/core_simd/src/masks/bitmask.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/11c3eefa3594055192612d0d6f844e764dcbda15/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fbitmask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11c3eefa3594055192612d0d6f844e764dcbda15/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fbitmask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fbitmask.rs?ref=11c3eefa3594055192612d0d6f844e764dcbda15", "patch": "@@ -116,12 +116,13 @@ where\n     }\n \n     #[inline]\n-    pub unsafe fn to_bitmask_intrinsic<U>(self) -> U {\n+    pub unsafe fn to_bitmask_integer<U>(self) -> U {\n         unsafe { core::mem::transmute_copy(&self.0) }\n     }\n \n+    // Safety: U must be the integer with the exact number of bits required to hold the bitmask for\n     #[inline]\n-    pub unsafe fn from_bitmask_intrinsic<U>(bitmask: U) -> Self {\n+    pub unsafe fn from_bitmask_integer<U>(bitmask: U) -> Self {\n         unsafe { Self(core::mem::transmute_copy(&bitmask), PhantomData) }\n     }\n "}, {"sha": "90af486a887b1658ff2b23c1d24845865b4a02fe", "filename": "crates/core_simd/src/masks/full_masks.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/11c3eefa3594055192612d0d6f844e764dcbda15/crates%2Fcore_simd%2Fsrc%2Fmasks%2Ffull_masks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11c3eefa3594055192612d0d6f844e764dcbda15/crates%2Fcore_simd%2Fsrc%2Fmasks%2Ffull_masks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmasks%2Ffull_masks.rs?ref=11c3eefa3594055192612d0d6f844e764dcbda15", "patch": "@@ -110,13 +110,15 @@ where\n     }\n \n     #[inline]\n-    pub unsafe fn to_bitmask_intrinsic<U>(self) -> U {\n+    pub unsafe fn to_bitmask_integer<U>(self) -> U {\n         // Safety: caller must only return bitmask types\n         unsafe { intrinsics::simd_bitmask(self.0) }\n     }\n \n+    // Safety: U must be the integer with the exact number of bits required to hold the bitmask for\n+    // this mask\n     #[inline]\n-    pub unsafe fn from_bitmask_intrinsic<U>(bitmask: U) -> Self {\n+    pub unsafe fn from_bitmask_integer<U>(bitmask: U) -> Self {\n         // Safety: caller must only pass bitmask types\n         unsafe {\n             Self::from_int_unchecked(intrinsics::simd_select_bitmask("}, {"sha": "86143f2331fce100b02e5dbf974df2b536445c13", "filename": "crates/core_simd/src/masks/to_bitmask.rs", "status": "modified", "additions": 30, "deletions": 54, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/11c3eefa3594055192612d0d6f844e764dcbda15/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fto_bitmask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11c3eefa3594055192612d0d6f844e764dcbda15/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fto_bitmask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fto_bitmask.rs?ref=11c3eefa3594055192612d0d6f844e764dcbda15", "patch": "@@ -1,78 +1,54 @@\n use super::{mask_impl, Mask, MaskElement};\n \n-/// Converts masks to and from bitmasks.\n+/// Converts masks to and from integer bitmasks.\n ///\n-/// In a bitmask, each bit represents if the corresponding lane in the mask is set.\n-pub trait ToBitMask<BitMask> {\n+/// Each bit of the bitmask corresponds to a mask lane, starting with the LSB.\n+pub trait ToBitMask {\n+    /// The integer bitmask type.\n+    type BitMask;\n+\n     /// Converts a mask to a bitmask.\n-    fn to_bitmask(self) -> BitMask;\n+    fn to_bitmask(self) -> Self::BitMask;\n \n     /// Converts a bitmask to a mask.\n-    fn from_bitmask(bitmask: BitMask) -> Self;\n+    fn from_bitmask(bitmask: Self::BitMask) -> Self;\n }\n \n-macro_rules! impl_integer_intrinsic {\n-    { $(unsafe impl ToBitMask<$int:ty> for Mask<_, $lanes:literal>)* } => {\n-        $(\n-        impl<T: MaskElement> ToBitMask<$int> for Mask<T, $lanes> {\n-            fn to_bitmask(self) -> $int {\n-                unsafe { self.0.to_bitmask_intrinsic() }\n-            }\n+/// Converts masks to and from byte array bitmasks.\n+///\n+/// Each bit of the bitmask corresponds to a mask lane, starting with the LSB of the first byte.\n+pub trait ToBitMaskArray {\n+    /// The length of the bitmask array.\n+    const BYTES: usize;\n \n-            fn from_bitmask(bitmask: $int) -> Self {\n-                unsafe { Self(mask_impl::Mask::from_bitmask_intrinsic(bitmask)) }\n-            }\n-        }\n-        )*\n-    }\n-}\n+    /// Converts a mask to a bitmask.\n+    fn to_bitmask_array(self) -> [u8; Self::BYTES];\n \n-impl_integer_intrinsic! {\n-    unsafe impl ToBitMask<u8> for Mask<_, 8>\n-    unsafe impl ToBitMask<u16> for Mask<_, 16>\n-    unsafe impl ToBitMask<u32> for Mask<_, 32>\n-    unsafe impl ToBitMask<u64> for Mask<_, 64>\n+    /// Converts a bitmask to a mask.\n+    fn from_bitmask_array(bitmask: [u8; Self::BYTES]) -> Self;\n }\n \n-macro_rules! impl_integer_via {\n-    { $(impl ToBitMask<$int:ty, via $via:ty> for Mask<_, $lanes:literal>)* } => {\n+macro_rules! impl_integer_intrinsic {\n+    { $(unsafe impl ToBitMask<BitMask=$int:ty> for Mask<_, $lanes:literal>)* } => {\n         $(\n-        impl<T: MaskElement> ToBitMask<$int> for Mask<T, $lanes> {\n+        impl<T: MaskElement> ToBitMask for Mask<T, $lanes> {\n+            type BitMask = $int;\n+\n             fn to_bitmask(self) -> $int {\n-                let bitmask: $via = self.to_bitmask();\n-                bitmask as _\n+                unsafe { self.0.to_bitmask_integer() }\n             }\n \n             fn from_bitmask(bitmask: $int) -> Self {\n-                Self::from_bitmask(bitmask as $via)\n+                unsafe { Self(mask_impl::Mask::from_bitmask_integer(bitmask)) }\n             }\n         }\n         )*\n     }\n }\n \n-impl_integer_via! {\n-    impl ToBitMask<u16, via u8> for Mask<_, 8>\n-    impl ToBitMask<u32, via u8> for Mask<_, 8>\n-    impl ToBitMask<u64, via u8> for Mask<_, 8>\n-\n-    impl ToBitMask<u32, via u16> for Mask<_, 16>\n-    impl ToBitMask<u64, via u16> for Mask<_, 16>\n-\n-    impl ToBitMask<u64, via u32> for Mask<_, 32>\n-}\n-\n-#[cfg(target_pointer_width = \"32\")]\n-impl_integer_via! {\n-    impl ToBitMask<usize, via u8> for Mask<_, 8>\n-    impl ToBitMask<usize, via u16> for Mask<_, 16>\n-    impl ToBitMask<usize, via u32> for Mask<_, 32>\n-}\n-\n-#[cfg(target_pointer_width = \"64\")]\n-impl_integer_via! {\n-    impl ToBitMask<usize, via u8> for Mask<_, 8>\n-    impl ToBitMask<usize, via u16> for Mask<_, 16>\n-    impl ToBitMask<usize, via u32> for Mask<_, 32>\n-    impl ToBitMask<usize, via u64> for Mask<_, 64>\n+impl_integer_intrinsic! {\n+    unsafe impl ToBitMask<BitMask=u8> for Mask<_, 8>\n+    unsafe impl ToBitMask<BitMask=u16> for Mask<_, 16>\n+    unsafe impl ToBitMask<BitMask=u32> for Mask<_, 32>\n+    unsafe impl ToBitMask<BitMask=u64> for Mask<_, 64>\n }"}, {"sha": "3aec36ca7b7468b89f9a23401c85bbfd7a7b6151", "filename": "crates/core_simd/tests/masks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11c3eefa3594055192612d0d6f844e764dcbda15/crates%2Fcore_simd%2Ftests%2Fmasks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11c3eefa3594055192612d0d6f844e764dcbda15/crates%2Fcore_simd%2Ftests%2Fmasks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fmasks.rs?ref=11c3eefa3594055192612d0d6f844e764dcbda15", "patch": "@@ -76,7 +76,7 @@ macro_rules! test_mask_api {\n                     true, true, false, false, false, false, false, true,\n                 ];\n                 let mask = core_simd::Mask::<$type, 16>::from_array(values);\n-                let bitmask: u16 = mask.to_bitmask();\n+                let bitmask = mask.to_bitmask();\n                 assert_eq!(bitmask, 0b1000001101001001);\n                 assert_eq!(core_simd::Mask::<$type, 16>::from_bitmask(bitmask), mask);\n             }"}]}