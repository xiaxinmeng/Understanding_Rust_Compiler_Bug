{"sha": "e9cde416ba14f97feb8d2fa6a47eb91164369347", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5Y2RlNDE2YmExNGY5N2ZlYjhkMmZhNmE0N2ViOTExNjQzNjkzNDc=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2019-04-15T21:48:45Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2019-04-15T22:44:09Z"}, "message": "Only suggest .copied() for Option right now", "tree": {"sha": "f1be3f11f000b14d9997f097e26373f4b3757640", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1be3f11f000b14d9997f097e26373f4b3757640"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9cde416ba14f97feb8d2fa6a47eb91164369347", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9cde416ba14f97feb8d2fa6a47eb91164369347", "html_url": "https://github.com/rust-lang/rust/commit/e9cde416ba14f97feb8d2fa6a47eb91164369347", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9cde416ba14f97feb8d2fa6a47eb91164369347/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad2c65bd1bd15b6a941a8d697fd0297e7557d927", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad2c65bd1bd15b6a941a8d697fd0297e7557d927", "html_url": "https://github.com/rust-lang/rust/commit/ad2c65bd1bd15b6a941a8d697fd0297e7557d927"}], "stats": {"total": 53, "additions": 31, "deletions": 22}, "files": [{"sha": "1a9334ae48893245402ee08b14018c21137c7ec8", "filename": "clippy_lints/src/map_clone.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e9cde416ba14f97feb8d2fa6a47eb91164369347/clippy_lints%2Fsrc%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9cde416ba14f97feb8d2fa6a47eb91164369347/clippy_lints%2Fsrc%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_clone.rs?ref=e9cde416ba14f97feb8d2fa6a47eb91164369347", "patch": "@@ -1,6 +1,6 @@\n use crate::utils::paths;\n use crate::utils::{\n-    in_macro, match_trait_method, match_type, remove_blocks, snippet_with_applicability, span_lint_and_sugg, is_copy\n+    in_macro, is_copy, match_trait_method, match_type, remove_blocks, snippet_with_applicability, span_lint_and_sugg,\n };\n use if_chain::if_chain;\n use rustc::hir;\n@@ -63,7 +63,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n             if args.len() == 2;\n             if method.ident.as_str() == \"map\";\n             let ty = cx.tables.expr_ty(&args[0]);\n-            if match_type(cx, ty, &paths::OPTION) || match_trait_method(cx, e, &paths::ITERATOR);\n+            let is_option = match_type(cx, ty, &paths::OPTION);\n+            if is_option || match_trait_method(cx, e, &paths::ITERATOR);\n             if let hir::ExprKind::Closure(_, _, body_id, _, _) = args[1].node;\n             let closure_body = cx.tcx.hir().body(body_id);\n             let closure_expr = remove_blocks(&closure_body.value);\n@@ -73,14 +74,16 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                         hir::BindingAnnotation::Unannotated, .., name, None\n                     ) = inner.node {\n                         if ident_eq(name, closure_expr) {\n-                            lint(cx, e.span, args[0].span, true);\n+                            // FIXME When Iterator::copied() stabilizes we can remove is_option\n+                            // from here and the other lint() calls\n+                            lint(cx, e.span, args[0].span, is_option);\n                         }\n                     },\n                     hir::PatKind::Binding(hir::BindingAnnotation::Unannotated, .., name, None) => {\n                         match closure_expr.node {\n                             hir::ExprKind::Unary(hir::UnOp::UnDeref, ref inner) => {\n                                 if ident_eq(name, inner) && !cx.tables.expr_ty(inner).is_box() {\n-                                    lint(cx, e.span, args[0].span, true);\n+                                    lint(cx, e.span, args[0].span, is_option);\n                                 }\n                             },\n                             hir::ExprKind::MethodCall(ref method, _, ref obj) => {\n@@ -90,7 +93,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                                     let obj_ty = cx.tables.expr_ty(&obj[0]);\n                                     if let ty::Ref(_, ty, _) = obj_ty.sty {\n                                         let copy = is_copy(cx, ty);\n-                                        lint(cx, e.span, args[0].span, copy);\n+                                        lint(cx, e.span, args[0].span, is_option && copy);\n                                     } else {\n                                         lint_needless_cloning(cx, e.span, args[0].span);\n                                     }"}, {"sha": "7ba4ac7d5a3845cfca5c4a55d141bc358827fd19", "filename": "tests/ui/map_clone.fixed", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e9cde416ba14f97feb8d2fa6a47eb91164369347/tests%2Fui%2Fmap_clone.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e9cde416ba14f97feb8d2fa6a47eb91164369347/tests%2Fui%2Fmap_clone.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_clone.fixed?ref=e9cde416ba14f97feb8d2fa6a47eb91164369347", "patch": "@@ -4,14 +4,14 @@\n #![allow(clippy::clone_on_copy)]\n #![allow(clippy::missing_docs_in_private_items)]\n #![allow(clippy::redundant_closure)]\n-#![feature(iter_copied)]\n \n fn main() {\n-    let _: Vec<i8> = vec![5_i8; 6].iter().copied().collect();\n+    let _: Vec<i8> = vec![5_i8; 6].iter().cloned().collect();\n     let _: Vec<String> = vec![String::new()].iter().cloned().collect();\n-    let _: Vec<u32> = vec![42, 43].iter().copied().collect();\n+    let _: Vec<u32> = vec![42, 43].iter().cloned().collect();\n     let _: Option<u64> = Some(Box::new(16)).map(|b| *b);\n-    let _: Vec<u8> = vec![1; 6].iter().copied().collect();\n+    let _: Option<u64> = Some(&16).copied();\n+    let _: Option<u8> = Some(&1).copied();\n \n     // Don't lint these\n     let v = vec![5_i8; 6];"}, {"sha": "9a7be3da2067d4b902eb13bc57f2209d66091835", "filename": "tests/ui/map_clone.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9cde416ba14f97feb8d2fa6a47eb91164369347/tests%2Fui%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9cde416ba14f97feb8d2fa6a47eb91164369347/tests%2Fui%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_clone.rs?ref=e9cde416ba14f97feb8d2fa6a47eb91164369347", "patch": "@@ -4,14 +4,14 @@\n #![allow(clippy::clone_on_copy)]\n #![allow(clippy::missing_docs_in_private_items)]\n #![allow(clippy::redundant_closure)]\n-#![feature(iter_copied)]\n \n fn main() {\n     let _: Vec<i8> = vec![5_i8; 6].iter().map(|x| *x).collect();\n     let _: Vec<String> = vec![String::new()].iter().map(|x| x.clone()).collect();\n     let _: Vec<u32> = vec![42, 43].iter().map(|&x| x).collect();\n     let _: Option<u64> = Some(Box::new(16)).map(|b| *b);\n-    let _: Vec<u8> = vec![1; 6].iter().map(|x| x.clone()).collect();\n+    let _: Option<u64> = Some(&16).map(|b| *b);\n+    let _: Option<u8> = Some(&1).map(|x| x.clone());\n \n     // Don't lint these\n     let v = vec![5_i8; 6];"}, {"sha": "fb0c636d3ba0eb7996331dab24954413ef81537c", "filename": "tests/ui/map_clone.stderr", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e9cde416ba14f97feb8d2fa6a47eb91164369347/tests%2Fui%2Fmap_clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9cde416ba14f97feb8d2fa6a47eb91164369347/tests%2Fui%2Fmap_clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_clone.stderr?ref=e9cde416ba14f97feb8d2fa6a47eb91164369347", "patch": "@@ -1,34 +1,40 @@\n-error: You are using an explicit closure for copying elements\n-  --> $DIR/map_clone.rs:10:22\n+error: You are using an explicit closure for cloning elements\n+  --> $DIR/map_clone.rs:9:22\n    |\n LL |     let _: Vec<i8> = vec![5_i8; 6].iter().map(|x| *x).collect();\n-   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Consider calling the dedicated `copied` method: `vec![5_i8; 6].iter().copied()`\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Consider calling the dedicated `cloned` method: `vec![5_i8; 6].iter().cloned()`\n    |\n    = note: `-D clippy::map-clone` implied by `-D warnings`\n \n error: You are using an explicit closure for cloning elements\n-  --> $DIR/map_clone.rs:11:26\n+  --> $DIR/map_clone.rs:10:26\n    |\n LL |     let _: Vec<String> = vec![String::new()].iter().map(|x| x.clone()).collect();\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Consider calling the dedicated `cloned` method: `vec![String::new()].iter().cloned()`\n \n-error: You are using an explicit closure for copying elements\n-  --> $DIR/map_clone.rs:12:23\n+error: You are using an explicit closure for cloning elements\n+  --> $DIR/map_clone.rs:11:23\n    |\n LL |     let _: Vec<u32> = vec![42, 43].iter().map(|&x| x).collect();\n-   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Consider calling the dedicated `copied` method: `vec![42, 43].iter().copied()`\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Consider calling the dedicated `cloned` method: `vec![42, 43].iter().cloned()`\n+\n+error: You are using an explicit closure for copying elements\n+  --> $DIR/map_clone.rs:13:26\n+   |\n+LL |     let _: Option<u64> = Some(&16).map(|b| *b);\n+   |                          ^^^^^^^^^^^^^^^^^^^^^ help: Consider calling the dedicated `copied` method: `Some(&16).copied()`\n \n error: You are using an explicit closure for copying elements\n-  --> $DIR/map_clone.rs:14:22\n+  --> $DIR/map_clone.rs:14:25\n    |\n-LL |     let _: Vec<u8> = vec![1; 6].iter().map(|x| x.clone()).collect();\n-   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Consider calling the dedicated `copied` method: `vec![1; 6].iter().copied()`\n+LL |     let _: Option<u8> = Some(&1).map(|x| x.clone());\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Consider calling the dedicated `copied` method: `Some(&1).copied()`\n \n error: You are needlessly cloning iterator elements\n   --> $DIR/map_clone.rs:25:29\n    |\n LL |     let _ = std::env::args().map(|v| v.clone());\n    |                             ^^^^^^^^^^^^^^^^^^^ help: Remove the map call\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 6 previous errors\n "}]}