{"sha": "78e73129baf65f4095002422303157d5e64e9479", "node_id": "C_kwDOAAsO6NoAKDc4ZTczMTI5YmFmNjVmNDA5NTAwMjQyMjMwMzE1N2Q1ZTY0ZTk0Nzk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-08T07:29:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-08T07:29:26Z"}, "message": "Auto merge of #7748 - Serial-ATA:lint-undocumented-unsafe, r=flip1995\n\nAdd undocumented_unsafe_blocks lint\n\nchangelog: Added a new lint [`undocumented_unsafe_blocks`]\n\nFixes #7464, #7238 (?)", "tree": {"sha": "28fe67b31265a4e7fcf0629bda1dfcf4618da5b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28fe67b31265a4e7fcf0629bda1dfcf4618da5b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78e73129baf65f4095002422303157d5e64e9479", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78e73129baf65f4095002422303157d5e64e9479", "html_url": "https://github.com/rust-lang/rust/commit/78e73129baf65f4095002422303157d5e64e9479", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78e73129baf65f4095002422303157d5e64e9479/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8aff5dd570fe4fbefdcf25358980fe8680e4eea5", "url": "https://api.github.com/repos/rust-lang/rust/commits/8aff5dd570fe4fbefdcf25358980fe8680e4eea5", "html_url": "https://github.com/rust-lang/rust/commit/8aff5dd570fe4fbefdcf25358980fe8680e4eea5"}, {"sha": "412b862fba9df1219ab4fb5bd5a096bfbdaa37d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/412b862fba9df1219ab4fb5bd5a096bfbdaa37d2", "html_url": "https://github.com/rust-lang/rust/commit/412b862fba9df1219ab4fb5bd5a096bfbdaa37d2"}], "stats": {"total": 676, "additions": 676, "deletions": 0}, "files": [{"sha": "13067e4e92ae38e646c33da8a03a387daaa6c5a8", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/78e73129baf65f4095002422303157d5e64e9479/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/78e73129baf65f4095002422303157d5e64e9479/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=78e73129baf65f4095002422303157d5e64e9479", "patch": "@@ -3033,6 +3033,7 @@ Released 2018-09-13\n [`try_err`]: https://rust-lang.github.io/rust-clippy/master/index.html#try_err\n [`type_complexity`]: https://rust-lang.github.io/rust-clippy/master/index.html#type_complexity\n [`type_repetition_in_bounds`]: https://rust-lang.github.io/rust-clippy/master/index.html#type_repetition_in_bounds\n+[`undocumented_unsafe_blocks`]: https://rust-lang.github.io/rust-clippy/master/index.html#undocumented_unsafe_blocks\n [`undropped_manually_drops`]: https://rust-lang.github.io/rust-clippy/master/index.html#undropped_manually_drops\n [`unicode_not_nfc`]: https://rust-lang.github.io/rust-clippy/master/index.html#unicode_not_nfc\n [`unimplemented`]: https://rust-lang.github.io/rust-clippy/master/index.html#unimplemented"}, {"sha": "3c4b720671a662cf2cd3ed290f415d9d4df8e6d8", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/78e73129baf65f4095002422303157d5e64e9479/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78e73129baf65f4095002422303157d5e64e9479/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=78e73129baf65f4095002422303157d5e64e9479", "patch": "@@ -465,6 +465,7 @@ store.register_lints(&[\n     types::REDUNDANT_ALLOCATION,\n     types::TYPE_COMPLEXITY,\n     types::VEC_BOX,\n+    undocumented_unsafe_blocks::UNDOCUMENTED_UNSAFE_BLOCKS,\n     undropped_manually_drops::UNDROPPED_MANUALLY_DROPS,\n     unicode::INVISIBLE_CHARACTERS,\n     unicode::NON_ASCII_LITERAL,"}, {"sha": "3d68a6e900958fbcfcd886007abc15c468b5ceef", "filename": "clippy_lints/src/lib.register_restriction.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/78e73129baf65f4095002422303157d5e64e9479/clippy_lints%2Fsrc%2Flib.register_restriction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78e73129baf65f4095002422303157d5e64e9479/clippy_lints%2Fsrc%2Flib.register_restriction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_restriction.rs?ref=78e73129baf65f4095002422303157d5e64e9479", "patch": "@@ -57,6 +57,7 @@ store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), ve\n     LintId::of(strings::STR_TO_STRING),\n     LintId::of(types::RC_BUFFER),\n     LintId::of(types::RC_MUTEX),\n+    LintId::of(undocumented_unsafe_blocks::UNDOCUMENTED_UNSAFE_BLOCKS),\n     LintId::of(unnecessary_self_imports::UNNECESSARY_SELF_IMPORTS),\n     LintId::of(unwrap_in_result::UNWRAP_IN_RESULT),\n     LintId::of(verbose_file_reads::VERBOSE_FILE_READS),"}, {"sha": "7e1bcbbd0ed04f4a69b0dc6aeff6211378a9f70a", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78e73129baf65f4095002422303157d5e64e9479/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78e73129baf65f4095002422303157d5e64e9479/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=78e73129baf65f4095002422303157d5e64e9479", "patch": "@@ -358,6 +358,7 @@ mod transmute;\n mod transmuting_null;\n mod try_err;\n mod types;\n+mod undocumented_unsafe_blocks;\n mod undropped_manually_drops;\n mod unicode;\n mod unit_return_expecting_ord;\n@@ -769,6 +770,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(move || Box::new(if_then_panic::IfThenPanic));\n     let enable_raw_pointer_heuristic_for_send = conf.enable_raw_pointer_heuristic_for_send;\n     store.register_late_pass(move || Box::new(non_send_fields_in_send_ty::NonSendFieldInSendTy::new(enable_raw_pointer_heuristic_for_send)));\n+    store.register_late_pass(move || Box::new(undocumented_unsafe_blocks::UndocumentedUnsafeBlocks::default()));\n }\n \n #[rustfmt::skip]"}, {"sha": "e08e4d03c7efef5c651cdd46fcfb4ada153400d3", "filename": "clippy_lints/src/undocumented_unsafe_blocks.rs", "status": "added", "additions": 225, "deletions": 0, "changes": 225, "blob_url": "https://github.com/rust-lang/rust/blob/78e73129baf65f4095002422303157d5e64e9479/clippy_lints%2Fsrc%2Fundocumented_unsafe_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78e73129baf65f4095002422303157d5e64e9479/clippy_lints%2Fsrc%2Fundocumented_unsafe_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fundocumented_unsafe_blocks.rs?ref=78e73129baf65f4095002422303157d5e64e9479", "patch": "@@ -0,0 +1,225 @@\n+use clippy_utils::diagnostics::{span_lint_and_help, span_lint_and_sugg};\n+use clippy_utils::source::{indent_of, reindent_multiline, snippet};\n+use clippy_utils::{in_macro, is_lint_allowed};\n+use rustc_errors::Applicability;\n+use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n+use rustc_hir::{Block, BlockCheckMode, Expr, ExprKind, HirId, Local, UnsafeSource};\n+use rustc_lexer::TokenKind;\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::hir::map::Map;\n+use rustc_middle::lint::in_external_macro;\n+use rustc_middle::ty::TyCtxt;\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_span::{BytePos, Span};\n+use std::borrow::Cow;\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for `unsafe` blocks without a `// Safety: ` comment\n+    /// explaining why the unsafe operations performed inside\n+    /// the block are safe.\n+    ///\n+    /// ### Why is this bad?\n+    /// Undocumented unsafe blocks can make it difficult to\n+    /// read and maintain code, as well as uncover unsoundness\n+    /// and bugs.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// use std::ptr::NonNull;\n+    /// let a = &mut 42;\n+    ///\n+    /// let ptr = unsafe { NonNull::new_unchecked(a) };\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// use std::ptr::NonNull;\n+    /// let a = &mut 42;\n+    ///\n+    /// // Safety: references are guaranteed to be non-null.\n+    /// let ptr = unsafe { NonNull::new_unchecked(a) };\n+    /// ```\n+    pub UNDOCUMENTED_UNSAFE_BLOCKS,\n+    restriction,\n+    \"creating an unsafe block without explaining why it is safe\"\n+}\n+\n+impl_lint_pass!(UndocumentedUnsafeBlocks => [UNDOCUMENTED_UNSAFE_BLOCKS]);\n+\n+#[derive(Default)]\n+pub struct UndocumentedUnsafeBlocks {\n+    pub local_level: u32,\n+    pub local_span: Option<Span>,\n+    // The local was already checked for an overall safety comment\n+    // There is no need to continue checking the blocks in the local\n+    pub local_checked: bool,\n+    // Since we can only check the blocks from expanded macros\n+    // We have to omit the suggestion due to the actual definition\n+    // Not being available to us\n+    pub macro_expansion: bool,\n+}\n+\n+impl LateLintPass<'_> for UndocumentedUnsafeBlocks {\n+    fn check_block(&mut self, cx: &LateContext<'_>, block: &'_ Block<'_>) {\n+        if_chain! {\n+            if !self.local_checked;\n+            if !is_lint_allowed(cx, UNDOCUMENTED_UNSAFE_BLOCKS, block.hir_id);\n+            if !in_external_macro(cx.tcx.sess, block.span);\n+            if let BlockCheckMode::UnsafeBlock(UnsafeSource::UserProvided) = block.rules;\n+            if let Some(enclosing_scope_hir_id) = cx.tcx.hir().get_enclosing_scope(block.hir_id);\n+            if self.block_has_safety_comment(cx.tcx, enclosing_scope_hir_id, block.span) == Some(false);\n+            then {\n+                let mut span = block.span;\n+\n+                if let Some(local_span) = self.local_span {\n+                    span = local_span;\n+\n+                    let result = self.block_has_safety_comment(cx.tcx, enclosing_scope_hir_id, span);\n+\n+                    if result.unwrap_or(true) {\n+                        self.local_checked = true;\n+                        return;\n+                    }\n+                }\n+\n+                self.lint(cx, span);\n+            }\n+        }\n+    }\n+\n+    fn check_local(&mut self, cx: &LateContext<'_>, local: &'_ Local<'_>) {\n+        if_chain! {\n+            if !is_lint_allowed(cx, UNDOCUMENTED_UNSAFE_BLOCKS, local.hir_id);\n+            if !in_external_macro(cx.tcx.sess, local.span);\n+            if let Some(init) = local.init;\n+            then {\n+                self.visit_expr(init);\n+\n+                if self.local_level > 0 {\n+                    self.local_span = Some(local.span);\n+                }\n+            }\n+        }\n+    }\n+\n+    fn check_block_post(&mut self, _: &LateContext<'_>, _: &'_ Block<'_>) {\n+        self.local_level = self.local_level.saturating_sub(1);\n+\n+        if self.local_level == 0 {\n+            self.local_checked = false;\n+            self.local_span = None;\n+        }\n+    }\n+}\n+\n+impl<'hir> Visitor<'hir> for UndocumentedUnsafeBlocks {\n+    type Map = Map<'hir>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::None\n+    }\n+\n+    fn visit_expr(&mut self, ex: &'v Expr<'v>) {\n+        match ex.kind {\n+            ExprKind::Block(_, _) => self.local_level = self.local_level.saturating_add(1),\n+            _ => walk_expr(self, ex),\n+        }\n+    }\n+}\n+\n+impl UndocumentedUnsafeBlocks {\n+    fn block_has_safety_comment(&mut self, tcx: TyCtxt<'_>, enclosing_hir_id: HirId, block_span: Span) -> Option<bool> {\n+        let map = tcx.hir();\n+        let source_map = tcx.sess.source_map();\n+\n+        let enclosing_scope_span = map.opt_span(enclosing_hir_id)?;\n+\n+        let between_span = if in_macro(block_span) {\n+            self.macro_expansion = true;\n+            enclosing_scope_span.with_hi(block_span.hi())\n+        } else {\n+            self.macro_expansion = false;\n+            enclosing_scope_span.to(block_span)\n+        };\n+\n+        let file_name = source_map.span_to_filename(between_span);\n+        let source_file = source_map.get_source_file(&file_name)?;\n+\n+        let lex_start = (between_span.lo().0 + 1) as usize;\n+        let src_str = source_file.src.as_ref()?[lex_start..between_span.hi().0 as usize].to_string();\n+\n+        let mut pos = 0;\n+        let mut comment = false;\n+\n+        for token in rustc_lexer::tokenize(&src_str) {\n+            match token.kind {\n+                TokenKind::LineComment { doc_style: None }\n+                | TokenKind::BlockComment {\n+                    doc_style: None,\n+                    terminated: true,\n+                } => {\n+                    let comment_str = src_str[pos + 2..pos + token.len].to_ascii_uppercase();\n+\n+                    if comment_str.contains(\"SAFETY:\") {\n+                        comment = true;\n+                    }\n+                },\n+                // We need to add all whitespace to `pos` before checking the comment's line number\n+                TokenKind::Whitespace => {},\n+                _ => {\n+                    if comment {\n+                        // Get the line number of the \"comment\" (really wherever the trailing whitespace ended)\n+                        let comment_line_num = source_file\n+                            .lookup_file_pos_with_col_display(BytePos((lex_start + pos).try_into().unwrap()))\n+                            .0;\n+                        // Find the block/local's line number\n+                        let block_line_num = tcx.sess.source_map().lookup_char_pos(block_span.lo()).line;\n+\n+                        // Check the comment is immediately followed by the block/local\n+                        if block_line_num == comment_line_num + 1 || block_line_num == comment_line_num {\n+                            return Some(true);\n+                        }\n+\n+                        comment = false;\n+                    }\n+                },\n+            }\n+\n+            pos += token.len;\n+        }\n+\n+        Some(false)\n+    }\n+\n+    fn lint(&self, cx: &LateContext<'_>, mut span: Span) {\n+        let source_map = cx.tcx.sess.source_map();\n+\n+        if source_map.is_multiline(span) {\n+            span = source_map.span_until_char(span, '\\n');\n+        }\n+\n+        if self.macro_expansion {\n+            span_lint_and_help(\n+                cx,\n+                UNDOCUMENTED_UNSAFE_BLOCKS,\n+                span,\n+                \"unsafe block in macro expansion missing a safety comment\",\n+                None,\n+                \"consider adding a safety comment in the macro definition\",\n+            );\n+        } else {\n+            let block_indent = indent_of(cx, span);\n+            let suggestion = format!(\"// Safety: ...\\n{}\", snippet(cx, span, \"..\"));\n+\n+            span_lint_and_sugg(\n+                cx,\n+                UNDOCUMENTED_UNSAFE_BLOCKS,\n+                span,\n+                \"unsafe block missing a safety comment\",\n+                \"consider adding a safety comment\",\n+                reindent_multiline(Cow::Borrowed(&suggestion), true, block_indent).to_string(),\n+                Applicability::HasPlaceholders,\n+            );\n+        }\n+    }\n+}"}, {"sha": "52577323a5837255f37698f6ff8076a941bd205c", "filename": "tests/ui/undocumented_unsafe_blocks.rs", "status": "added", "additions": 287, "deletions": 0, "changes": 287, "blob_url": "https://github.com/rust-lang/rust/blob/78e73129baf65f4095002422303157d5e64e9479/tests%2Fui%2Fundocumented_unsafe_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78e73129baf65f4095002422303157d5e64e9479/tests%2Fui%2Fundocumented_unsafe_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fundocumented_unsafe_blocks.rs?ref=78e73129baf65f4095002422303157d5e64e9479", "patch": "@@ -0,0 +1,287 @@\n+#![warn(clippy::undocumented_unsafe_blocks)]\n+\n+// Valid comments\n+\n+fn nested_local() {\n+    let _ = {\n+        let _ = {\n+            // Safety:\n+            let _ = unsafe {};\n+        };\n+    };\n+}\n+\n+fn deep_nest() {\n+    let _ = {\n+        let _ = {\n+            // Safety:\n+            let _ = unsafe {};\n+\n+            // Safety:\n+            unsafe {};\n+\n+            let _ = {\n+                let _ = {\n+                    let _ = {\n+                        let _ = {\n+                            let _ = {\n+                                // Safety:\n+                                let _ = unsafe {};\n+\n+                                // Safety:\n+                                unsafe {};\n+                            };\n+                        };\n+                    };\n+\n+                    // Safety:\n+                    unsafe {};\n+                };\n+            };\n+        };\n+\n+        // Safety:\n+        unsafe {};\n+    };\n+\n+    // Safety:\n+    unsafe {};\n+}\n+\n+fn local_tuple_expression() {\n+    // Safety:\n+    let _ = (42, unsafe {});\n+}\n+\n+fn line_comment() {\n+    // Safety:\n+    unsafe {}\n+}\n+\n+fn line_comment_newlines() {\n+    // Safety:\n+\n+    unsafe {}\n+}\n+\n+fn line_comment_empty() {\n+    // Safety:\n+    //\n+    //\n+    //\n+    unsafe {}\n+}\n+\n+fn line_comment_with_extras() {\n+    // This is a description\n+    // Safety:\n+    unsafe {}\n+}\n+\n+fn block_comment() {\n+    /* Safety: */\n+    unsafe {}\n+}\n+\n+fn block_comment_newlines() {\n+    /* Safety: */\n+\n+    unsafe {}\n+}\n+\n+#[rustfmt::skip]\n+fn inline_block_comment() {\n+    /* Safety: */unsafe {}\n+}\n+\n+fn block_comment_with_extras() {\n+    /* This is a description\n+     * Safety:\n+     */\n+    unsafe {}\n+}\n+\n+fn block_comment_terminator_same_line() {\n+    /* This is a description\n+     * Safety: */\n+    unsafe {}\n+}\n+\n+fn buried_safety() {\n+    // Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor\n+    // incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation\n+    // ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in\n+    // reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint\n+    // occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est\n+    // laborum. Safety:\n+    // Tellus elementum sagittis vitae et leo duis ut diam quam. Sit amet nulla facilisi\n+    // morbi tempus iaculis urna. Amet luctus venenatis lectus magna. At quis risus sed vulputate odio\n+    // ut. Luctus venenatis lectus magna fringilla urna. Tortor id aliquet lectus proin nibh nisl\n+    // condimentum id venenatis. Vulputate dignissim suspendisse in est ante in nibh mauris cursus.\n+    unsafe {}\n+}\n+\n+fn safety_with_prepended_text() {\n+    // This is a test. Safety:\n+    unsafe {}\n+}\n+\n+fn local_line_comment() {\n+    // Safety:\n+    let _ = unsafe {};\n+}\n+\n+fn local_block_comment() {\n+    /* Safety: */\n+    let _ = unsafe {};\n+}\n+\n+fn comment_array() {\n+    // Safety:\n+    let _ = [unsafe { 14 }, unsafe { 15 }, 42, unsafe { 16 }];\n+}\n+\n+fn comment_tuple() {\n+    // Safety:\n+    let _ = (42, unsafe {}, \"test\", unsafe {});\n+}\n+\n+fn comment_unary() {\n+    // Safety:\n+    let _ = *unsafe { &42 };\n+}\n+\n+#[allow(clippy::match_single_binding)]\n+fn comment_match() {\n+    // Safety:\n+    let _ = match unsafe {} {\n+        _ => {},\n+    };\n+}\n+\n+fn comment_addr_of() {\n+    // Safety:\n+    let _ = &unsafe {};\n+}\n+\n+fn comment_repeat() {\n+    // Safety:\n+    let _ = [unsafe {}; 5];\n+}\n+\n+fn comment_macro_call() {\n+    macro_rules! t {\n+        ($b:expr) => {\n+            $b\n+        };\n+    }\n+\n+    t!(\n+        // Safety:\n+        unsafe {}\n+    );\n+}\n+\n+fn comment_macro_def() {\n+    macro_rules! t {\n+        () => {\n+            // Safety:\n+            unsafe {}\n+        };\n+    }\n+\n+    t!();\n+}\n+\n+fn non_ascii_comment() {\n+    // \u0950\u19fb\u0ed2 Safety: \u0bf5\u2230\n+    unsafe {};\n+}\n+\n+fn local_commented_block() {\n+    let _ =\n+        // Safety:\n+        unsafe {};\n+}\n+\n+fn local_nest() {\n+    // Safety:\n+    let _ = [(42, unsafe {}, unsafe {}), (52, unsafe {}, unsafe {})];\n+}\n+\n+// Invalid comments\n+\n+fn no_comment() {\n+    unsafe {}\n+}\n+\n+fn no_comment_array() {\n+    let _ = [unsafe { 14 }, unsafe { 15 }, 42, unsafe { 16 }];\n+}\n+\n+fn no_comment_tuple() {\n+    let _ = (42, unsafe {}, \"test\", unsafe {});\n+}\n+\n+fn no_comment_unary() {\n+    let _ = *unsafe { &42 };\n+}\n+\n+#[allow(clippy::match_single_binding)]\n+fn no_comment_match() {\n+    let _ = match unsafe {} {\n+        _ => {},\n+    };\n+}\n+\n+fn no_comment_addr_of() {\n+    let _ = &unsafe {};\n+}\n+\n+fn no_comment_repeat() {\n+    let _ = [unsafe {}; 5];\n+}\n+\n+fn local_no_comment() {\n+    let _ = unsafe {};\n+}\n+\n+fn no_comment_macro_call() {\n+    macro_rules! t {\n+        ($b:expr) => {\n+            $b\n+        };\n+    }\n+\n+    t!(unsafe {});\n+}\n+\n+fn no_comment_macro_def() {\n+    macro_rules! t {\n+        () => {\n+            unsafe {}\n+        };\n+    }\n+\n+    t!();\n+}\n+\n+fn trailing_comment() {\n+    unsafe {} // Safety:\n+}\n+\n+fn internal_comment() {\n+    unsafe {\n+        // Safety:\n+    }\n+}\n+\n+fn interference() {\n+    // Safety\n+\n+    let _ = 42;\n+\n+    unsafe {};\n+}\n+\n+fn main() {}"}, {"sha": "b32069a334ca9911213729a9a7482953b985bcb5", "filename": "tests/ui/undocumented_unsafe_blocks.stderr", "status": "added", "additions": 159, "deletions": 0, "changes": 159, "blob_url": "https://github.com/rust-lang/rust/blob/78e73129baf65f4095002422303157d5e64e9479/tests%2Fui%2Fundocumented_unsafe_blocks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78e73129baf65f4095002422303157d5e64e9479/tests%2Fui%2Fundocumented_unsafe_blocks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fundocumented_unsafe_blocks.stderr?ref=78e73129baf65f4095002422303157d5e64e9479", "patch": "@@ -0,0 +1,159 @@\n+error: unsafe block missing a safety comment\n+  --> $DIR/undocumented_unsafe_blocks.rs:215:5\n+   |\n+LL |     unsafe {}\n+   |     ^^^^^^^^^\n+   |\n+   = note: `-D clippy::undocumented-unsafe-blocks` implied by `-D warnings`\n+help: consider adding a safety comment\n+   |\n+LL ~     // Safety: ...\n+LL +     unsafe {}\n+   |\n+\n+error: unsafe block missing a safety comment\n+  --> $DIR/undocumented_unsafe_blocks.rs:219:5\n+   |\n+LL |     let _ = [unsafe { 14 }, unsafe { 15 }, 42, unsafe { 16 }];\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: consider adding a safety comment\n+   |\n+LL ~     // Safety: ...\n+LL +     let _ = [unsafe { 14 }, unsafe { 15 }, 42, unsafe { 16 }];\n+   |\n+\n+error: unsafe block missing a safety comment\n+  --> $DIR/undocumented_unsafe_blocks.rs:223:5\n+   |\n+LL |     let _ = (42, unsafe {}, \"test\", unsafe {});\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: consider adding a safety comment\n+   |\n+LL ~     // Safety: ...\n+LL +     let _ = (42, unsafe {}, \"test\", unsafe {});\n+   |\n+\n+error: unsafe block missing a safety comment\n+  --> $DIR/undocumented_unsafe_blocks.rs:227:5\n+   |\n+LL |     let _ = *unsafe { &42 };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: consider adding a safety comment\n+   |\n+LL ~     // Safety: ...\n+LL +     let _ = *unsafe { &42 };\n+   |\n+\n+error: unsafe block missing a safety comment\n+  --> $DIR/undocumented_unsafe_blocks.rs:232:5\n+   |\n+LL |     let _ = match unsafe {} {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: consider adding a safety comment\n+   |\n+LL ~     // Safety: ...\n+LL +     let _ = match unsafe {} {\n+   |\n+\n+error: unsafe block missing a safety comment\n+  --> $DIR/undocumented_unsafe_blocks.rs:238:5\n+   |\n+LL |     let _ = &unsafe {};\n+   |     ^^^^^^^^^^^^^^^^^^^\n+   |\n+help: consider adding a safety comment\n+   |\n+LL ~     // Safety: ...\n+LL +     let _ = &unsafe {};\n+   |\n+\n+error: unsafe block missing a safety comment\n+  --> $DIR/undocumented_unsafe_blocks.rs:242:5\n+   |\n+LL |     let _ = [unsafe {}; 5];\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: consider adding a safety comment\n+   |\n+LL ~     // Safety: ...\n+LL +     let _ = [unsafe {}; 5];\n+   |\n+\n+error: unsafe block missing a safety comment\n+  --> $DIR/undocumented_unsafe_blocks.rs:246:5\n+   |\n+LL |     let _ = unsafe {};\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+help: consider adding a safety comment\n+   |\n+LL ~     // Safety: ...\n+LL +     let _ = unsafe {};\n+   |\n+\n+error: unsafe block missing a safety comment\n+  --> $DIR/undocumented_unsafe_blocks.rs:256:8\n+   |\n+LL |     t!(unsafe {});\n+   |        ^^^^^^^^^\n+   |\n+help: consider adding a safety comment\n+   |\n+LL ~     t!(// Safety: ...\n+LL ~     unsafe {});\n+   |\n+\n+error: unsafe block in macro expansion missing a safety comment\n+  --> $DIR/undocumented_unsafe_blocks.rs:262:13\n+   |\n+LL |             unsafe {}\n+   |             ^^^^^^^^^\n+...\n+LL |     t!();\n+   |     ----- in this macro invocation\n+   |\n+   = help: consider adding a safety comment in the macro definition\n+   = note: this error originates in the macro `t` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: unsafe block missing a safety comment\n+  --> $DIR/undocumented_unsafe_blocks.rs:270:5\n+   |\n+LL |     unsafe {} // Safety:\n+   |     ^^^^^^^^^\n+   |\n+help: consider adding a safety comment\n+   |\n+LL ~     // Safety: ...\n+LL ~     unsafe {} // Safety:\n+   |\n+\n+error: unsafe block missing a safety comment\n+  --> $DIR/undocumented_unsafe_blocks.rs:274:5\n+   |\n+LL |     unsafe {\n+   |     ^^^^^^^^\n+   |\n+help: consider adding a safety comment\n+   |\n+LL ~     // Safety: ...\n+LL +     unsafe {\n+   |\n+\n+error: unsafe block missing a safety comment\n+  --> $DIR/undocumented_unsafe_blocks.rs:284:5\n+   |\n+LL |     unsafe {};\n+   |     ^^^^^^^^^\n+   |\n+help: consider adding a safety comment\n+   |\n+LL ~     // Safety: ...\n+LL ~     unsafe {};\n+   |\n+\n+error: aborting due to 13 previous errors\n+"}]}