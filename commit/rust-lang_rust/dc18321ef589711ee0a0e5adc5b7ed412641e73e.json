{"sha": "dc18321ef589711ee0a0e5adc5b7ed412641e73e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjMTgzMjFlZjU4OTcxMWVlMGEwZTVhZGM1YjdlZDQxMjY0MWU3M2U=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-06-14T04:46:59Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-06-14T05:53:10Z"}, "message": "Don't run passes again on JIT code\n\nThese passes are already run beforehand, no need to do them twice.", "tree": {"sha": "341d1cd1ae37f7951358a62f911248b792c70ed9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/341d1cd1ae37f7951358a62f911248b792c70ed9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc18321ef589711ee0a0e5adc5b7ed412641e73e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc18321ef589711ee0a0e5adc5b7ed412641e73e", "html_url": "https://github.com/rust-lang/rust/commit/dc18321ef589711ee0a0e5adc5b7ed412641e73e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc18321ef589711ee0a0e5adc5b7ed412641e73e/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "079ffa362fbec884c6397581c5f9898c4aba392e", "url": "https://api.github.com/repos/rust-lang/rust/commits/079ffa362fbec884c6397581c5f9898c4aba392e", "html_url": "https://github.com/rust-lang/rust/commit/079ffa362fbec884c6397581c5f9898c4aba392e"}], "stats": {"total": 68, "additions": 17, "deletions": 51}, "files": [{"sha": "32ad07bde9317a3d84566a97c3c4d7c7e409553f", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 17, "deletions": 35, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/dc18321ef589711ee0a0e5adc5b7ed412641e73e/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc18321ef589711ee0a0e5adc5b7ed412641e73e/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=dc18321ef589711ee0a0e5adc5b7ed412641e73e", "patch": "@@ -102,35 +102,21 @@ pub mod jit {\n     use back::link::llvm_err;\n     use driver::session::Session;\n     use lib::llvm::llvm;\n-    use lib::llvm::{ModuleRef, PassManagerRef, ContextRef};\n+    use lib::llvm::{ModuleRef, ContextRef};\n     use metadata::cstore;\n \n     use core::cast;\n-    use core::libc::c_int;\n     use core::ptr;\n     use core::str;\n-\n-    pub mod rusti {\n-        #[nolink]\n-        #[abi = \"rust-intrinsic\"]\n-        pub extern \"rust-intrinsic\" {\n-            pub fn morestack_addr() -> *();\n-        }\n-    }\n-\n-    pub struct Closure {\n-        code: *(),\n-        env: *(),\n-    }\n+    use core::sys;\n+    use core::unstable::intrinsics;\n \n     pub fn exec(sess: Session,\n-                pm: PassManagerRef,\n                 c: ContextRef,\n                 m: ModuleRef,\n-                opt: c_int,\n                 stacks: bool) {\n         unsafe {\n-            let manager = llvm::LLVMRustPrepareJIT(rusti::morestack_addr());\n+            let manager = llvm::LLVMRustPrepareJIT(intrinsics::morestack_addr());\n \n             // We need to tell JIT where to resolve all linked\n             // symbols from. The equivalent of -lstd, -lcore, etc.\n@@ -156,7 +142,7 @@ pub mod jit {\n \n             // We custom-build a JIT execution engine via some rust wrappers\n             // first. This wrappers takes ownership of the module passed in.\n-            let ee = llvm::LLVMRustBuildJIT(manager, pm, m, opt, stacks);\n+            let ee = llvm::LLVMRustBuildJIT(manager, m, stacks);\n             if ee.is_null() {\n                 llvm::LLVMContextDispose(c);\n                 llvm_err(sess, ~\"Could not create the JIT\");\n@@ -179,7 +165,7 @@ pub mod jit {\n             // closure\n             let code = llvm::LLVMGetPointerToGlobal(ee, fun);\n             assert!(!code.is_null());\n-            let closure = Closure {\n+            let closure = sys::Closure {\n                 code: code,\n                 env: ptr::null()\n             };\n@@ -282,7 +268,17 @@ pub mod write {\n             debug!(\"Running Module Optimization Pass\");\n             mpm.run(llmod);\n \n-            if is_object_or_assembly_or_exe(output_type) || opts.jit {\n+            if opts.jit {\n+                // If we are using JIT, go ahead and create and execute the\n+                // engine now.  JIT execution takes ownership of the module and\n+                // context, so don't dispose and return.\n+                jit::exec(sess, llcx, llmod, true);\n+\n+                if sess.time_llvm_passes() {\n+                    llvm::LLVMRustPrintPassTimings();\n+                }\n+                return;\n+            } else if is_object_or_assembly_or_exe(output_type) {\n                 let LLVMOptNone       = 0 as c_int; // -O0\n                 let LLVMOptLess       = 1 as c_int; // -O1\n                 let LLVMOptDefault    = 2 as c_int; // -O2, -Os\n@@ -295,20 +291,6 @@ pub mod write {\n                   session::Aggressive => LLVMOptAggressive\n                 };\n \n-                if opts.jit {\n-                    // If we are using JIT, go ahead and create and\n-                    // execute the engine now.\n-                    // JIT execution takes ownership of the module,\n-                    // so don't dispose and return.\n-\n-                    jit::exec(sess, pm.llpm, llcx, llmod, CodeGenOptLevel, true);\n-\n-                    if sess.time_llvm_passes() {\n-                        llvm::LLVMRustPrintPassTimings();\n-                    }\n-                    return;\n-                }\n-\n                 let FileType;\n                 if output_type == output_type_object ||\n                        output_type == output_type_exe {"}, {"sha": "289bb4f63f59e164dcb589293e17638cce3bef14", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc18321ef589711ee0a0e5adc5b7ed412641e73e/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc18321ef589711ee0a0e5adc5b7ed412641e73e/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=dc18321ef589711ee0a0e5adc5b7ed412641e73e", "patch": "@@ -1828,9 +1828,7 @@ pub mod llvm {\n         /** Execute the JIT engine. */\n         #[fast_ffi]\n         pub unsafe fn LLVMRustBuildJIT(MM: *(),\n-                              PM: PassManagerRef,\n                               M: ModuleRef,\n-                              OptLevel: c_int,\n                               EnableSegmentedStacks: bool) -> ExecutionEngineRef;\n \n         /** Parses the bitcode in the given memory buffer. */"}, {"sha": "ba87624e2dde35d4740399d6317c0cacc6ea0edd", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dc18321ef589711ee0a0e5adc5b7ed412641e73e/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/dc18321ef589711ee0a0e5adc5b7ed412641e73e/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=dc18321ef589711ee0a0e5adc5b7ed412641e73e", "patch": "@@ -331,9 +331,7 @@ LLVMRustLoadCrate(void* mem, const char* crate) {\n \n extern \"C\" LLVMExecutionEngineRef\n LLVMRustBuildJIT(void* mem,\n-                 LLVMPassManagerRef PMR,\n                  LLVMModuleRef M,\n-                 CodeGenOpt::Level OptLevel,\n                  bool EnableSegmentedStacks) {\n \n   InitializeNativeTarget();\n@@ -346,25 +344,13 @@ LLVMRustBuildJIT(void* mem,\n   Options.JITEmitDebugInfo = true;\n   Options.NoFramePointerElim = true;\n   Options.EnableSegmentedStacks = EnableSegmentedStacks;\n-  PassManager *PM = unwrap<PassManager>(PMR);\n   RustMCJITMemoryManager* MM = (RustMCJITMemoryManager*) mem;\n-\n   assert(MM);\n \n-  PM->add(createBasicAliasAnalysisPass());\n-  PM->add(createInstructionCombiningPass());\n-  PM->add(createReassociatePass());\n-  PM->add(createGVNPass());\n-  PM->add(createCFGSimplificationPass());\n-  PM->add(createFunctionInliningPass());\n-  PM->add(createPromoteMemoryToRegisterPass());\n-  PM->run(*unwrap(M));\n-\n   ExecutionEngine* EE = EngineBuilder(unwrap(M))\n     .setErrorStr(&Err)\n     .setTargetOptions(Options)\n     .setJITMemoryManager(MM)\n-    .setOptLevel(OptLevel)\n     .setUseMCJIT(true)\n     .setAllocateGVsWithCode(false)\n     .create();"}]}