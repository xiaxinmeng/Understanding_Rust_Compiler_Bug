{"sha": "3b75a3dfeaf8261bd59343792b3650550be86c95", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiNzVhM2RmZWFmODI2MWJkNTkzNDM3OTJiMzY1MDU1MGJlODZjOTU=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-09-14T15:40:37Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-09-20T09:21:25Z"}, "message": "incr.comp.: Make sure traits_in_scope results are hashed in a stable way.", "tree": {"sha": "61d2b82a1873d96daf3c85c7fe312c114adbcc8e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61d2b82a1873d96daf3c85c7fe312c114adbcc8e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b75a3dfeaf8261bd59343792b3650550be86c95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b75a3dfeaf8261bd59343792b3650550be86c95", "html_url": "https://github.com/rust-lang/rust/commit/3b75a3dfeaf8261bd59343792b3650550be86c95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b75a3dfeaf8261bd59343792b3650550be86c95/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54996837a399421f8d691c6901eea5ab20a30f46", "url": "https://api.github.com/repos/rust-lang/rust/commits/54996837a399421f8d691c6901eea5ab20a30f46", "html_url": "https://github.com/rust-lang/rust/commit/54996837a399421f8d691c6901eea5ab20a30f46"}], "stats": {"total": 76, "additions": 67, "deletions": 9}, "files": [{"sha": "36d2454eacc1f4026865af22ad31f5103ec96e7c", "filename": "src/librustc/ich/hcx.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3b75a3dfeaf8261bd59343792b3650550be86c95/src%2Flibrustc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b75a3dfeaf8261bd59343792b3650550be86c95/src%2Flibrustc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fhcx.rs?ref=3b75a3dfeaf8261bd59343792b3650550be86c95", "patch": "@@ -168,6 +168,11 @@ impl<'gcx> StableHashingContext<'gcx> {\n         self.definitions.def_path_hash(def_index)\n     }\n \n+    #[inline]\n+    pub fn node_to_hir_id(&self, node_id: ast::NodeId) -> hir::HirId {\n+        self.definitions.node_to_hir_id(node_id)\n+    }\n+\n     #[inline]\n     pub fn hash_spans(&self) -> bool {\n         self.hash_spans"}, {"sha": "ee4e2536e469dd07e029b5ee073991d0db6d1a19", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3b75a3dfeaf8261bd59343792b3650550be86c95/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b75a3dfeaf8261bd59343792b3650550be86c95/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=3b75a3dfeaf8261bd59343792b3650550be86c95", "patch": "@@ -1160,6 +1160,25 @@ for hir::TraitCandidate {\n     }\n }\n \n+impl<'gcx> ToStableHashKey<StableHashingContext<'gcx>> for hir::TraitCandidate {\n+    type KeyType = (DefPathHash, Option<(DefPathHash, hir::ItemLocalId)>);\n+\n+    fn to_stable_hash_key(&self,\n+                          hcx: &StableHashingContext<'gcx>)\n+                          -> Self::KeyType {\n+        let hir::TraitCandidate {\n+            def_id,\n+            import_id,\n+        } = *self;\n+\n+        let import_id = import_id.map(|node_id| hcx.node_to_hir_id(node_id))\n+                                 .map(|hir_id| (hcx.local_def_path_hash(hir_id.owner),\n+                                                hir_id.local_id));\n+        (hcx.def_path_hash(def_id), import_id)\n+    }\n+}\n+\n+\n impl_stable_hash_for!(struct hir::Freevar {\n     def,\n     span"}, {"sha": "cccdaed6eca86e186c1a2790157bd154b8e15a04", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3b75a3dfeaf8261bd59343792b3650550be86c95/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b75a3dfeaf8261bd59343792b3650550be86c95/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=3b75a3dfeaf8261bd59343792b3650550be86c95", "patch": "@@ -50,8 +50,8 @@ use util::nodemap::{NodeMap, NodeSet, DefIdSet, ItemLocalMap};\n use util::nodemap::{FxHashMap, FxHashSet};\n use rustc_data_structures::accumulate_vec::AccumulateVec;\n use rustc_data_structures::stable_hasher::{HashStable, hash_stable_hashmap,\n-                                           StableHasher, StableHasherResult};\n-\n+                                           StableHasher, StableHasherResult,\n+                                           StableVec};\n use arena::{TypedArena, DroplessArena};\n use rustc_const_math::{ConstInt, ConstUsize};\n use rustc_data_structures::indexed_vec::IndexVec;\n@@ -828,7 +828,9 @@ pub struct GlobalCtxt<'tcx> {\n \n     /// Map indicating what traits are in scope for places where this\n     /// is relevant; generated by resolve.\n-    trait_map: FxHashMap<DefIndex, Rc<FxHashMap<ItemLocalId, Rc<Vec<TraitCandidate>>>>>,\n+    trait_map: FxHashMap<DefIndex,\n+                         Rc<FxHashMap<ItemLocalId,\n+                                      Rc<StableVec<TraitCandidate>>>>>,\n \n     /// Export map produced by name resolution.\n     export_map: FxHashMap<DefId, Rc<Vec<Export>>>,\n@@ -1081,15 +1083,14 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             None\n         };\n \n-        // FIXME(mw): Each of the Vecs in the trait_map should be brought into\n-        // a deterministic order here. Otherwise we might end up with\n-        // unnecessarily unstable incr. comp. hashes.\n         let mut trait_map = FxHashMap();\n         for (k, v) in resolutions.trait_map {\n             let hir_id = hir.node_to_hir_id(k);\n             let map = trait_map.entry(hir_id.owner)\n                 .or_insert_with(|| Rc::new(FxHashMap()));\n-            Rc::get_mut(map).unwrap().insert(hir_id.local_id, Rc::new(v));\n+            Rc::get_mut(map).unwrap()\n+                            .insert(hir_id.local_id,\n+                                    Rc::new(StableVec::new(v)));\n         }\n         let mut defs = FxHashMap();\n         for (k, v) in named_region_map.defs {\n@@ -2103,7 +2104,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         lint::struct_lint_level(self.sess, lint, level, src, None, msg)\n     }\n \n-    pub fn in_scope_traits(self, id: HirId) -> Option<Rc<Vec<TraitCandidate>>> {\n+    pub fn in_scope_traits(self, id: HirId) -> Option<Rc<StableVec<TraitCandidate>>> {\n         self.in_scope_traits_map(id.owner)\n             .and_then(|map| map.get(&id.local_id).cloned())\n     }"}, {"sha": "7a8cecbf812892fe3d07b2c2c81ea3271c5fe8ec", "filename": "src/librustc/ty/maps/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3b75a3dfeaf8261bd59343792b3650550be86c95/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b75a3dfeaf8261bd59343792b3650550be86c95/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs?ref=3b75a3dfeaf8261bd59343792b3650550be86c95", "patch": "@@ -42,6 +42,7 @@ use rustc_data_structures::indexed_set::IdxSetBuf;\n use rustc_back::PanicStrategy;\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::stable_hasher::StableVec;\n use std::cell::{RefCell, Cell};\n \n use std::ops::Deref;\n@@ -259,7 +260,7 @@ define_maps! { <'tcx>\n \n     [] fn specializes: specializes_node((DefId, DefId)) -> bool,\n     [] fn in_scope_traits_map: InScopeTraits(DefIndex)\n-        -> Option<Rc<FxHashMap<ItemLocalId, Rc<Vec<TraitCandidate>>>>>,\n+        -> Option<Rc<FxHashMap<ItemLocalId, Rc<StableVec<TraitCandidate>>>>>,\n     [] fn module_exports: ModuleExports(DefId) -> Option<Rc<Vec<Export>>>,\n     [] fn lint_levels: lint_levels_node(CrateNum) -> Rc<lint::LintLevelMap>,\n "}, {"sha": "a5df250b33810b59f9796ab0656166c0c3d1bb32", "filename": "src/librustc_data_structures/stable_hasher.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/3b75a3dfeaf8261bd59343792b3650550be86c95/src%2Flibrustc_data_structures%2Fstable_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b75a3dfeaf8261bd59343792b3650550be86c95/src%2Flibrustc_data_structures%2Fstable_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fstable_hasher.rs?ref=3b75a3dfeaf8261bd59343792b3650550be86c95", "patch": "@@ -558,3 +558,35 @@ pub fn hash_stable_hashmap<HCX, K, V, R, SK, F, W>(\n     entries.hash_stable(hcx, hasher);\n }\n \n+pub struct StableVec<T>(Vec<T>);\n+\n+impl<T> StableVec<T> {\n+\n+    pub fn new(v: Vec<T>) -> Self {\n+        StableVec(v)\n+    }\n+}\n+\n+impl<T> ::std::ops::Deref for StableVec<T> {\n+    type Target = Vec<T>;\n+\n+    fn deref(&self) -> &Vec<T> {\n+        &self.0\n+    }\n+}\n+\n+impl<T, HCX> HashStable<HCX> for StableVec<T>\n+    where T: HashStable<HCX> + ToStableHashKey<HCX>\n+{\n+    fn hash_stable<W: StableHasherResult>(&self,\n+                                          hcx: &mut HCX,\n+                                          hasher: &mut StableHasher<W>) {\n+        let StableVec(ref v) = *self;\n+\n+        let mut sorted: Vec<_> = v.iter()\n+                                  .map(|x| x.to_stable_hash_key(hcx))\n+                                  .collect();\n+        sorted.sort_unstable();\n+        sorted.hash_stable(hcx, hasher);\n+    }\n+}"}]}