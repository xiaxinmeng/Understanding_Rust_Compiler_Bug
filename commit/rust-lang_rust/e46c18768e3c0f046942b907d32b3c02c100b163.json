{"sha": "e46c18768e3c0f046942b907d32b3c02c100b163", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0NmMxODc2OGUzYzBmMDQ2OTQyYjkwN2QzMmIzYzAyYzEwMGIxNjM=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-07-06T01:20:31Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-07-06T01:40:02Z"}, "message": "Always resolve type@primitive as a primitive, not a module\n\nPreviously, if there were a module in scope with the same name as the\nprimitive, that would take precedence. Coupled with\nhttps://github.com/rust-lang/rust/issues/58699, this made it impossible\nto link to the primitive when that module was in scope.\n\nThis approach could be extended so that `struct@foo` would no longer resolve\nto any type, etc. However, it could not be used for glob imports:\n\n```rust\npub mod foo {\n  pub struct Bar;\n}\n\npub enum Bar {}\nuse foo::*;\n\n// This is expected to link to `inner::Bar`, but instead it will link to the enum.\n/// Link to [struct@Bar]\npub struct MyDocs;\n```\n\nThe reason for this is that this change does not affect the resolution\nalgorithm of rustc_resolve at all. The only reason we could special-case\nprimitives is because we have a list of all possible primitives ahead of time.", "tree": {"sha": "c94021760b3e8a5539233c589f7b806250479aa6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c94021760b3e8a5539233c589f7b806250479aa6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e46c18768e3c0f046942b907d32b3c02c100b163", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e46c18768e3c0f046942b907d32b3c02c100b163", "html_url": "https://github.com/rust-lang/rust/commit/e46c18768e3c0f046942b907d32b3c02c100b163", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e46c18768e3c0f046942b907d32b3c02c100b163/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f844ea1e561475e6023282ef167e76bc973773ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/f844ea1e561475e6023282ef167e76bc973773ef", "html_url": "https://github.com/rust-lang/rust/commit/f844ea1e561475e6023282ef167e76bc973773ef"}], "stats": {"total": 45, "additions": 40, "deletions": 5}, "files": [{"sha": "41a94dad0344d86e72ec914371e137ed7b43cf7b", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 28, "deletions": 5, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e46c18768e3c0f046942b907d32b3c02c100b163/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e46c18768e3c0f046942b907d32b3c02c100b163/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=e46c18768e3c0f046942b907d32b3c02c100b163", "patch": "@@ -164,6 +164,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n     fn resolve(\n         &self,\n         path_str: &str,\n+        disambiguator: Option<&str>,\n         ns: Namespace,\n         current_item: &Option<String>,\n         parent_id: Option<hir::HirId>,\n@@ -203,11 +204,22 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                         }\n                         return Ok((res, Some(path_str.to_owned())));\n                     }\n-                    other => {\n-                        debug!(\n-                            \"failed to resolve {} in namespace {:?} (got {:?})\",\n-                            path_str, ns, other\n-                        );\n+                    Res::Def(DefKind::Mod, _) => {\n+                        // This resolved to a module, but if we were passed `type@`,\n+                        // we want primitive types to take precedence instead.\n+                        if disambiguator == Some(\"type\") {\n+                            if let Some(prim) = is_primitive(path_str, ns) {\n+                                if extra_fragment.is_some() {\n+                                    return Err(ErrorKind::AnchorFailure(\n+                                        \"primitive types cannot be followed by anchors\",\n+                                    ));\n+                                }\n+                                return Ok((prim, Some(path_str.to_owned())));\n+                            }\n+                        }\n+                        return Ok((res, extra_fragment.clone()));\n+                    }\n+                    _ => {\n                         return Ok((res, extra_fragment.clone()));\n                     }\n                 };\n@@ -566,11 +578,13 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n             let mut path_str;\n             let (res, fragment) = {\n                 let mut kind = None;\n+                let mut disambiguator = None;\n                 path_str = if let Some(prefix) = [\"struct@\", \"enum@\", \"type@\", \"trait@\", \"union@\"]\n                     .iter()\n                     .find(|p| link.starts_with(**p))\n                 {\n                     kind = Some(TypeNS);\n+                    disambiguator = Some(&prefix[..prefix.len() - 1]);\n                     link.trim_start_matches(prefix)\n                 } else if let Some(prefix) = [\n                     \"const@\",\n@@ -586,18 +600,23 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n                 .find(|p| link.starts_with(**p))\n                 {\n                     kind = Some(ValueNS);\n+                    disambiguator = Some(&prefix[..prefix.len() - 1]);\n                     link.trim_start_matches(prefix)\n                 } else if link.ends_with(\"()\") {\n                     kind = Some(ValueNS);\n+                    disambiguator = Some(\"fn\");\n                     link.trim_end_matches(\"()\")\n                 } else if link.starts_with(\"macro@\") {\n                     kind = Some(MacroNS);\n+                    disambiguator = Some(\"macro\");\n                     link.trim_start_matches(\"macro@\")\n                 } else if link.starts_with(\"derive@\") {\n                     kind = Some(MacroNS);\n+                    disambiguator = Some(\"derive\");\n                     link.trim_start_matches(\"derive@\")\n                 } else if link.ends_with('!') {\n                     kind = Some(MacroNS);\n+                    disambiguator = Some(\"macro\");\n                     link.trim_end_matches('!')\n                 } else {\n                     &link[..]\n@@ -634,6 +653,7 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n                     Some(ns @ ValueNS) => {\n                         match self.resolve(\n                             path_str,\n+                            disambiguator,\n                             ns,\n                             &current_item,\n                             base_node,\n@@ -657,6 +677,7 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n                     Some(ns @ TypeNS) => {\n                         match self.resolve(\n                             path_str,\n+                            disambiguator,\n                             ns,\n                             &current_item,\n                             base_node,\n@@ -683,6 +704,7 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n                                 .map(|res| (res, extra_fragment.clone())),\n                             type_ns: match self.resolve(\n                                 path_str,\n+                                disambiguator,\n                                 TypeNS,\n                                 &current_item,\n                                 base_node,\n@@ -697,6 +719,7 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n                             },\n                             value_ns: match self.resolve(\n                                 path_str,\n+                                disambiguator,\n                                 ValueNS,\n                                 &current_item,\n                                 base_node,"}, {"sha": "ca83d5e2281a72f72ed3febccc1457ac374a4b94", "filename": "src/test/rustdoc/intra-link-prim-precedence.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e46c18768e3c0f046942b907d32b3c02c100b163/src%2Ftest%2Frustdoc%2Fintra-link-prim-precedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e46c18768e3c0f046942b907d32b3c02c100b163/src%2Ftest%2Frustdoc%2Fintra-link-prim-precedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-link-prim-precedence.rs?ref=e46c18768e3c0f046942b907d32b3c02c100b163", "patch": "@@ -0,0 +1,12 @@\n+// ignore-tidy-linelength\n+#![deny(intra_doc_resolution_failure)]\n+\n+pub mod char {}\n+\n+/// See also [type@char]\n+// @has intra_link_prim_precedence/struct.MyString.html '//a/@href' 'https://doc.rust-lang.org/nightly/std/primitive.char.html'\n+pub struct MyString;\n+\n+/// See also [char]\n+// @has intra_link_prim_precedence/struct.MyString2.html '//a/@href' 'intra_link_prim_precedence/char/index.html'\n+pub struct MyString2;"}]}