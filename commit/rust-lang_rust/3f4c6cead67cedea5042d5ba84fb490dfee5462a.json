{"sha": "3f4c6cead67cedea5042d5ba84fb490dfee5462a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmNGM2Y2VhZDY3Y2VkZWE1MDQyZDViYTg0ZmI0OTBkZmVlNTQ2MmE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-08-04T07:40:10Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-08-04T22:11:56Z"}, "message": "Remove old tests and code for `select`\n\nNot compatible with newsched", "tree": {"sha": "e5100795a3925888510286ff5769b6043a510a41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5100795a3925888510286ff5769b6043a510a41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f4c6cead67cedea5042d5ba84fb490dfee5462a", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f4c6cead67cedea5042d5ba84fb490dfee5462a", "html_url": "https://github.com/rust-lang/rust/commit/3f4c6cead67cedea5042d5ba84fb490dfee5462a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f4c6cead67cedea5042d5ba84fb490dfee5462a/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f8346b949169bd0f4b8fe0630eb4bc49ae35f11", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f8346b949169bd0f4b8fe0630eb4bc49ae35f11", "html_url": "https://github.com/rust-lang/rust/commit/2f8346b949169bd0f4b8fe0630eb4bc49ae35f11"}], "stats": {"total": 202, "additions": 3, "deletions": 199}, "files": [{"sha": "776e25cac8908447988c204aca86bea7c717db87", "filename": "src/libextra/comm.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3f4c6cead67cedea5042d5ba84fb490dfee5462a/src%2Flibextra%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f4c6cead67cedea5042d5ba84fb490dfee5462a/src%2Flibextra%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fcomm.rs?ref=3f4c6cead67cedea5042d5ba84fb490dfee5462a", "patch": "@@ -18,9 +18,8 @@ Higher level communication abstractions.\n \n \n use std::comm::{GenericChan, GenericSmartChan, GenericPort};\n-use std::comm::{Chan, Port, Selectable, Peekable};\n+use std::comm::{Chan, Port, Peekable};\n use std::comm;\n-use std::pipes;\n \n /// An extension of `pipes::stream` that allows both sending and receiving.\n pub struct DuplexStream<T, U> {\n@@ -75,12 +74,6 @@ impl<T:Send,U:Send> Peekable<U> for DuplexStream<T, U> {\n     }\n }\n \n-impl<T:Send,U:Send> Selectable for DuplexStream<T, U> {\n-    fn header(&mut self) -> *mut pipes::PacketHeader {\n-        self.port.header()\n-    }\n-}\n-\n /// Creates a bidirectional stream.\n pub fn DuplexStream<T:Send,U:Send>()\n     -> (DuplexStream<T, U>, DuplexStream<U, T>)"}, {"sha": "4356f1143da4668f760d598aa1f1d34d50cb8120", "filename": "src/libstd/comm.rs", "status": "modified", "additions": 2, "deletions": 108, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/3f4c6cead67cedea5042d5ba84fb490dfee5462a/src%2Flibstd%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f4c6cead67cedea5042d5ba84fb490dfee5462a/src%2Flibstd%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm.rs?ref=3f4c6cead67cedea5042d5ba84fb490dfee5462a", "patch": "@@ -14,7 +14,6 @@ Message passing\n \n #[allow(missing_doc)];\n \n-use cast::transmute;\n use either::{Either, Left, Right};\n use kinds::Send;\n use option::{Option, Some};\n@@ -23,12 +22,6 @@ pub use rt::comm::SendDeferred;\n use rtcomm = rt::comm;\n use rt;\n \n-use pipes::{wait_many, PacketHeader};\n-\n-// FIXME #5160: Making this public exposes some plumbing from\n-// pipes. Needs some refactoring\n-pub use pipes::Selectable;\n-\n /// A trait for things that can send multiple messages.\n pub trait GenericChan<T> {\n     /// Sends a message.\n@@ -146,15 +139,6 @@ impl<T: Send> Peekable<T> for Port<T> {\n     }\n }\n \n-impl<T: Send> Selectable for Port<T> {\n-    fn header(&mut self) -> *mut PacketHeader {\n-        match self.inner {\n-            Left(ref mut port) => port.header(),\n-            Right(_) => fail!(\"can't select on newsched ports\")\n-        }\n-    }\n-}\n-\n /// A channel that can be shared between many senders.\n pub struct SharedChan<T> {\n     inner: Either<Exclusive<pipesy::Chan<T>>, rtcomm::SharedChan<T>>\n@@ -318,8 +302,8 @@ mod pipesy {\n \n     use kinds::Send;\n     use option::{Option, Some, None};\n-    use pipes::{recv, try_recv, peek, PacketHeader};\n-    use super::{GenericChan, GenericSmartChan, GenericPort, Peekable, Selectable};\n+    use pipes::{recv, try_recv, peek};\n+    use super::{GenericChan, GenericSmartChan, GenericPort, Peekable};\n     use cast::transmute_mut;\n \n     /*proto! oneshot (\n@@ -651,103 +635,13 @@ mod pipesy {\n         }\n     }\n \n-    impl<T: Send> Selectable for Port<T> {\n-        fn header(&mut self) -> *mut PacketHeader {\n-            match self.endp {\n-                Some(ref mut endp) => endp.header(),\n-                None => fail!(\"peeking empty stream\")\n-            }\n-    }\n-}\n-\n-}\n-\n-/// Returns the index of an endpoint that is ready to receive.\n-pub fn selecti<T: Selectable>(endpoints: &mut [T]) -> uint {\n-    wait_many(endpoints)\n-}\n-\n-/// Returns 0 or 1 depending on which endpoint is ready to receive\n-pub fn select2i<A:Selectable, B:Selectable>(a: &mut A, b: &mut B)\n-                                            -> Either<(), ()> {\n-    let mut endpoints = [ a.header(), b.header() ];\n-    match wait_many(endpoints) {\n-        0 => Left(()),\n-        1 => Right(()),\n-        _ => fail!(\"wait returned unexpected index\"),\n-    }\n-}\n-\n-/// Receive a message from one of two endpoints.\n-pub trait Select2<T: Send, U: Send> {\n-    /// Receive a message or return `None` if a connection closes.\n-    fn try_select(&mut self) -> Either<Option<T>, Option<U>>;\n-    /// Receive a message or fail if a connection closes.\n-    fn select(&mut self) -> Either<T, U>;\n-}\n-\n-impl<T:Send,\n-     U:Send,\n-     Left:Selectable + GenericPort<T>,\n-     Right:Selectable + GenericPort<U>>\n-     Select2<T, U>\n-     for (Left, Right) {\n-    fn select(&mut self) -> Either<T, U> {\n-        // XXX: Bad borrow check workaround.\n-        unsafe {\n-            let this: &(Left, Right) = transmute(self);\n-            match *this {\n-                (ref lp, ref rp) => {\n-                    let lp: &mut Left = transmute(lp);\n-                    let rp: &mut Right = transmute(rp);\n-                    match select2i(lp, rp) {\n-                        Left(()) => Left(lp.recv()),\n-                        Right(()) => Right(rp.recv()),\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n-    fn try_select(&mut self) -> Either<Option<T>, Option<U>> {\n-        // XXX: Bad borrow check workaround.\n-        unsafe {\n-            let this: &(Left, Right) = transmute(self);\n-            match *this {\n-                (ref lp, ref rp) => {\n-                    let lp: &mut Left = transmute(lp);\n-                    let rp: &mut Right = transmute(rp);\n-                    match select2i(lp, rp) {\n-                        Left(()) => Left (lp.try_recv()),\n-                        Right(()) => Right(rp.try_recv()),\n-                    }\n-                }\n-            }\n-        }\n-    }\n }\n \n #[cfg(test)]\n mod test {\n     use either::Right;\n     use super::{Chan, Port, oneshot, stream};\n \n-    #[test]\n-    fn test_select2() {\n-        let (p1, c1) = stream();\n-        let (p2, c2) = stream();\n-\n-        c1.send(~\"abc\");\n-\n-        let mut tuple = (p1, p2);\n-        match tuple.select() {\n-            Right(_) => fail!(),\n-            _ => (),\n-        }\n-\n-        c2.send(123);\n-    }\n-\n     #[test]\n     fn test_oneshot() {\n         let (p, c) = oneshot();"}, {"sha": "78f937e058a41bb43bbd19d075f072c91ac2fb73", "filename": "src/libstd/pipes.rs", "status": "modified", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/3f4c6cead67cedea5042d5ba84fb490dfee5462a/src%2Flibstd%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f4c6cead67cedea5042d5ba84fb490dfee5462a/src%2Flibstd%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpipes.rs?ref=3f4c6cead67cedea5042d5ba84fb490dfee5462a", "patch": "@@ -868,47 +868,3 @@ pub mod rt {\n     pub fn make_some<T>(val: T) -> Option<T> { Some(val) }\n     pub fn make_none<T>() -> Option<T> { None }\n }\n-\n-#[cfg(test)]\n-mod test {\n-    use either::Right;\n-    use comm::{Chan, Port, oneshot, recv_one, stream, Select2,\n-               GenericChan, Peekable};\n-\n-    #[test]\n-    fn test_select2() {\n-        let (p1, c1) = stream();\n-        let (p2, c2) = stream();\n-\n-        c1.send(~\"abc\");\n-\n-        let mut tuple = (p1, p2);\n-        match tuple.select() {\n-            Right(_) => fail!(),\n-            _ => (),\n-        }\n-\n-        c2.send(123);\n-    }\n-\n-    #[test]\n-    fn test_oneshot() {\n-        let (p, c) = oneshot();\n-\n-        c.send(());\n-\n-        recv_one(p)\n-    }\n-\n-    #[test]\n-    fn test_peek_terminated() {\n-        let (port, chan): (Port<int>, Chan<int>) = stream();\n-\n-        {\n-            // Destroy the channel\n-            let _chan = chan;\n-        }\n-\n-        assert!(!port.peek());\n-    }\n-}"}, {"sha": "df242ee3d3059613093a971667f100ea3ca798de", "filename": "src/test/run-pass/issue-3176.rs", "status": "removed", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/2f8346b949169bd0f4b8fe0630eb4bc49ae35f11/src%2Ftest%2Frun-pass%2Fissue-3176.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f8346b949169bd0f4b8fe0630eb4bc49ae35f11/src%2Ftest%2Frun-pass%2Fissue-3176.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3176.rs?ref=2f8346b949169bd0f4b8fe0630eb4bc49ae35f11", "patch": "@@ -1,39 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// xfail-fast\n-// xfail-win32 #7999\n-\n-use std::comm::{Select2, Selectable};\n-use std::comm;\n-use std::task;\n-\n-pub fn main() {\n-    let (p,c) = comm::stream();\n-    do task::try || {\n-        let (p2,c2) = comm::stream();\n-        do task::spawn || {\n-            p2.recv();\n-            error!(\"sibling fails\");\n-            fail!();\n-        }\n-        let (p3,c3) = comm::stream();\n-        c.send(c3);\n-        c2.send(());\n-        error!(\"child blocks\");\n-        let (p, c) = comm::stream();\n-        let mut tuple = (p, p3);\n-        tuple.select();\n-        c.send(());\n-    };\n-    error!(\"parent tries\");\n-    assert!(!p.recv().try_send(()));\n-    error!(\"all done!\");\n-}"}]}