{"sha": "6e082f7aad35afa89563180d1cdecab3afdf573f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlMDgyZjdhYWQzNWFmYTg5NTYzMTgwZDFjZGVjYWIzYWZkZjU3M2Y=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-04-21T07:59:48Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-04-21T07:59:48Z"}, "message": "Extract some methods for functions.", "tree": {"sha": "6d95707a6ca4b66872222a83ebe141f4b5de6a6a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d95707a6ca4b66872222a83ebe141f4b5de6a6a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e082f7aad35afa89563180d1cdecab3afdf573f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e082f7aad35afa89563180d1cdecab3afdf573f", "html_url": "https://github.com/rust-lang/rust/commit/6e082f7aad35afa89563180d1cdecab3afdf573f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e082f7aad35afa89563180d1cdecab3afdf573f/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a652a83ffd1ba897efa87cdcdd8a5d364410b7a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/a652a83ffd1ba897efa87cdcdd8a5d364410b7a8", "html_url": "https://github.com/rust-lang/rust/commit/a652a83ffd1ba897efa87cdcdd8a5d364410b7a8"}], "stats": {"total": 73, "additions": 46, "deletions": 27}, "files": [{"sha": "ffacfa8cf56dc08f0359336b32d0827347234d72", "filename": "src/functions.rs", "status": "modified", "additions": 45, "deletions": 27, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/6e082f7aad35afa89563180d1cdecab3afdf573f/src%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e082f7aad35afa89563180d1cdecab3afdf573f/src%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffunctions.rs?ref=6e082f7aad35afa89563180d1cdecab3afdf573f", "patch": "@@ -16,6 +16,7 @@ use syntax::print::pprust;\n use syntax::parse::token;\n \n impl<'a> FmtVisitor<'a> {\n+    // TODO extract methods for args and generics\n     pub fn rewrite_fn(&mut self,\n                       indent: usize,\n                       ident: ast::Ident,\n@@ -31,11 +32,7 @@ impl<'a> FmtVisitor<'a> {\n         // who comments there probably deserves what they get.\n \n         let where_clause = &generics.where_clause;\n-        let newline_brace = match FN_BRACE_STYLE {\n-            BraceStyle::AlwaysNextLine => true,\n-            BraceStyle::SameLineWhere if where_clause.predicates.len() > 0 => true,\n-            _ => false,\n-        };\n+        let newline_brace = self.newline_for_brace(where_clause);\n \n         let mut result = String::with_capacity(1024);\n         // Vis unsafety abi.\n@@ -81,11 +78,7 @@ impl<'a> FmtVisitor<'a> {\n             result.push('>');\n         }\n \n-        let ret_str = match fd.output {\n-            ast::FunctionRetTy::DefaultReturn(_) => String::new(),\n-            ast::FunctionRetTy::NoReturn(_) => \"-> !\".to_string(),\n-            ast::FunctionRetTy::Return(ref ty) => \"-> \".to_string() + &pprust::ty_to_string(ty),\n-        };\n+        let ret_str = self.rewrite_return(&fd.output);\n \n         // Args.\n         let args = &fd.inputs;\n@@ -172,23 +165,7 @@ impl<'a> FmtVisitor<'a> {\n         result.push(')');\n \n         // Where clause.\n-        if where_clause.predicates.len() > 0 {\n-            result.push('\\n');\n-            result.push_str(&make_indent(indent + 4));\n-            result.push_str(\"where \");\n-\n-            let budget = IDEAL_WIDTH + LEEWAY - indent - 10;\n-            let fmt = ListFormatting {\n-                tactic: ListTactic::Vertical,\n-                separator: \",\",\n-                trailing_separator: SeparatorTactic::Always,\n-                indent: indent + 10,\n-                h_width: budget,\n-                v_width: budget,\n-            };\n-            let where_strs: Vec<_> = where_clause.predicates.iter().map(|p| (self.rewrite_pred(p), String::new())).collect();\n-            result.push_str(&write_list(&where_strs, &fmt));\n-        }\n+        result.push_str(&self.rewrite_where_clause(where_clause, indent));\n \n         // Return type.\n         if ret_str.len() > 0 {\n@@ -225,6 +202,47 @@ impl<'a> FmtVisitor<'a> {\n         result\n     }\n \n+    fn newline_for_brace(&self, where_clause: &ast::WhereClause) -> bool {\n+        match FN_BRACE_STYLE {\n+            BraceStyle::AlwaysNextLine => true,\n+            BraceStyle::SameLineWhere if where_clause.predicates.len() > 0 => true,\n+            _ => false,\n+        }\n+    }\n+\n+    fn rewrite_where_clause(&self, where_clause: &ast::WhereClause, indent: usize) -> String {\n+        let mut result = String::new();\n+        if where_clause.predicates.len() == 0 {\n+            return result;\n+        }\n+\n+        result.push('\\n');\n+        result.push_str(&make_indent(indent + 4));\n+        result.push_str(\"where \");\n+\n+        let budget = IDEAL_WIDTH + LEEWAY - indent - 10;\n+        let fmt = ListFormatting {\n+            tactic: ListTactic::Vertical,\n+            separator: \",\",\n+            trailing_separator: SeparatorTactic::Always,\n+            indent: indent + 10,\n+            h_width: budget,\n+            v_width: budget,\n+        };\n+        let where_strs: Vec<_> = where_clause.predicates.iter().map(|p| (self.rewrite_pred(p), String::new())).collect();\n+        result.push_str(&write_list(&where_strs, &fmt));\n+\n+        result\n+    }\n+\n+    fn rewrite_return(&self, ret: &ast::FunctionRetTy) -> String {\n+        match *ret {\n+            ast::FunctionRetTy::DefaultReturn(_) => String::new(),\n+            ast::FunctionRetTy::NoReturn(_) => \"-> !\".to_string(),\n+            ast::FunctionRetTy::Return(ref ty) => \"-> \".to_string() + &pprust::ty_to_string(ty),\n+        }        \n+    }\n+\n     // TODO we farm this out, but this could spill over the column limit, so we ought to handle it properly\n     fn rewrite_fn_input(&self, arg: &ast::Arg) -> String {\n         format!(\"{}: {}\","}, {"sha": "0e3ad3a088b0831c76d35c312faa9a87c3d5103b", "filename": "src/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6e082f7aad35afa89563180d1cdecab3afdf573f/src%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e082f7aad35afa89563180d1cdecab3afdf573f/src%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmod.rs?ref=6e082f7aad35afa89563180d1cdecab3afdf573f", "patch": "@@ -192,6 +192,7 @@ impl<'a, 'v> visit::Visitor<'v> for FmtVisitor<'a> {\n \n         self.block_indent -= TAB_SPACES;\n         // TODO we should compress any newlines here to just one\n+        // TODO somewhere here we are preserving bogus whitespace\n         self.format_missing_with_indent(b.span.hi - BytePos(1));\n         self.changes.push_str_span(b.span, \"}\");\n         self.last_pos = b.span.hi;"}]}