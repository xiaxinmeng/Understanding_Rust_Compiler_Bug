{"sha": "edec5807ac5ba90cbc0c61a5ec7b80f29e1eea33", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkZWM1ODA3YWM1YmE5MGNiYzBjNjFhNWVjN2I4MGYyOWUxZWVhMzM=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-09-12T21:31:21Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-10-21T16:28:27Z"}, "message": "Hide items if they use default docs", "tree": {"sha": "f8e1155bf7ed62784725ce95753b47fa0487ac08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8e1155bf7ed62784725ce95753b47fa0487ac08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/edec5807ac5ba90cbc0c61a5ec7b80f29e1eea33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/edec5807ac5ba90cbc0c61a5ec7b80f29e1eea33", "html_url": "https://github.com/rust-lang/rust/commit/edec5807ac5ba90cbc0c61a5ec7b80f29e1eea33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/edec5807ac5ba90cbc0c61a5ec7b80f29e1eea33/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff48ccfeabc4fa6d46b24b97cd56ab9bb3b949db", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff48ccfeabc4fa6d46b24b97cd56ab9bb3b949db", "html_url": "https://github.com/rust-lang/rust/commit/ff48ccfeabc4fa6d46b24b97cd56ab9bb3b949db"}], "stats": {"total": 112, "additions": 85, "deletions": 27}, "files": [{"sha": "bb95696c5130e646a3cfa7825255f2b203a826b4", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 38, "deletions": 23, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/edec5807ac5ba90cbc0c61a5ec7b80f29e1eea33/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edec5807ac5ba90cbc0c61a5ec7b80f29e1eea33/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=edec5807ac5ba90cbc0c61a5ec7b80f29e1eea33", "patch": "@@ -2259,8 +2259,8 @@ fn document(w: &mut fmt::Formatter, cx: &Context, item: &clean::Item) -> fmt::Re\n     if let Some(ref name) = item.name {\n         info!(\"Documenting {}\", name);\n     }\n-    document_stability(w, cx, item)?;\n-    document_full(w, item, cx, \"\")?;\n+    document_stability(w, cx, item, false)?;\n+    document_full(w, item, cx, \"\", false)?;\n     Ok(())\n }\n \n@@ -2269,44 +2269,53 @@ fn render_markdown(w: &mut fmt::Formatter,\n                    cx: &Context,\n                    md_text: &str,\n                    links: Vec<(String, String)>,\n-                   prefix: &str)\n+                   prefix: &str,\n+                   is_hidden: bool)\n                    -> fmt::Result {\n     let mut ids = cx.id_map.borrow_mut();\n-    write!(w, \"<div class='docblock'>{}{}</div>\",\n-        prefix, Markdown(md_text, &links, RefCell::new(&mut ids), cx.codes))\n+    write!(w, \"<div class='docblock{}'>{}{}</div>\",\n+           if is_hidden { \" hidden\" } else { \"\" },\n+           prefix,\n+           Markdown(md_text, &links, RefCell::new(&mut ids),\n+           cx.codes))\n }\n \n fn document_short(w: &mut fmt::Formatter, cx: &Context, item: &clean::Item, link: AssocItemLink,\n-                  prefix: &str) -> fmt::Result {\n+                  prefix: &str, is_hidden: bool) -> fmt::Result {\n     if let Some(s) = item.doc_value() {\n         let markdown = if s.contains('\\n') {\n             format!(\"{} [Read more]({})\",\n                     &plain_summary_line(Some(s)), naive_assoc_href(item, link))\n         } else {\n             plain_summary_line(Some(s)).to_string()\n         };\n-        render_markdown(w, cx, &markdown, item.links(), prefix)?;\n+        render_markdown(w, cx, &markdown, item.links(), prefix, is_hidden)?;\n     } else if !prefix.is_empty() {\n-        write!(w, \"<div class='docblock'>{}</div>\", prefix)?;\n+        write!(w, \"<div class='docblock{}'>{}</div>\",\n+               if is_hidden { \" hidden\" } else { \"\" },\n+               prefix)?;\n     }\n     Ok(())\n }\n \n fn document_full(w: &mut fmt::Formatter, item: &clean::Item,\n-                 cx: &Context, prefix: &str) -> fmt::Result {\n+                 cx: &Context, prefix: &str, is_hidden: bool) -> fmt::Result {\n     if let Some(s) = cx.shared.maybe_collapsed_doc_value(item) {\n         debug!(\"Doc block: =====\\n{}\\n=====\", s);\n-        render_markdown(w, cx, &*s, item.links(), prefix)?;\n+        render_markdown(w, cx, &*s, item.links(), prefix, is_hidden)?;\n     } else if !prefix.is_empty() {\n-        write!(w, \"<div class='docblock'>{}</div>\", prefix)?;\n+        write!(w, \"<div class='docblock{}'>{}</div>\",\n+               if is_hidden { \" hidden\" } else { \"\" },\n+               prefix)?;\n     }\n     Ok(())\n }\n \n-fn document_stability(w: &mut fmt::Formatter, cx: &Context, item: &clean::Item) -> fmt::Result {\n+fn document_stability(w: &mut fmt::Formatter, cx: &Context, item: &clean::Item,\n+                      is_hidden: bool) -> fmt::Result {\n     let stabilities = short_stability(item, cx, true);\n     if !stabilities.is_empty() {\n-        write!(w, \"<div class='stability'>\")?;\n+        write!(w, \"<div class='stability{}'>\", if is_hidden { \" hidden\" } else { \"\" })?;\n         for stability in stabilities {\n             write!(w, \"{}\", stability)?;\n         }\n@@ -3872,6 +3881,11 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n             RenderMode::ForDeref { mut_: deref_mut_ } => should_render_item(&item, deref_mut_),\n         };\n \n+        let (mut is_hidden, extra_class) = if item.doc_value().is_some() {\n+            (false, \"\")\n+        } else {\n+            (true, \" hidden\")\n+        };\n         match item.inner {\n             clean::MethodItem(clean::Method { ref decl, .. }) |\n             clean::TyMethodItem(clean::TyMethod{ ref decl, .. }) => {\n@@ -3896,20 +3910,21 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n                         render_stability_since_raw(w, item.stable_since(), outer_version)?;\n                     }\n                     write!(w, \"</td></tr></tbody></table></span></h4>\")?;\n+                    is_hidden = false;\n                 }\n             }\n             clean::TypedefItem(ref tydef, _) => {\n                 let id = cx.derive_id(format!(\"{}.{}\", ItemType::AssociatedType, name));\n                 let ns_id = cx.derive_id(format!(\"{}.{}\", name, item_type.name_space()));\n-                write!(w, \"<h4 id='{}' class=\\\"{}\\\">\", id, item_type)?;\n+                write!(w, \"<h4 id='{}' class=\\\"{}{}\\\">\", id, item_type, extra_class)?;\n                 write!(w, \"<span id='{}' class='invisible'><code>\", ns_id)?;\n                 assoc_type(w, item, &Vec::new(), Some(&tydef.type_), link.anchor(&id))?;\n                 write!(w, \"</code></span></h4>\\n\")?;\n             }\n             clean::AssociatedConstItem(ref ty, ref default) => {\n                 let id = cx.derive_id(format!(\"{}.{}\", item_type, name));\n                 let ns_id = cx.derive_id(format!(\"{}.{}\", name, item_type.name_space()));\n-                write!(w, \"<h4 id='{}' class=\\\"{}\\\">\", id, item_type)?;\n+                write!(w, \"<h4 id='{}' class=\\\"{}{}\\\">\", id, item_type, extra_class)?;\n                 write!(w, \"<span id='{}' class='invisible'><code>\", ns_id)?;\n                 assoc_const(w, item, ty, default.as_ref(), link.anchor(&id))?;\n                 let src = if let Some(l) = (Item { cx, item }).src_href() {\n@@ -3923,7 +3938,7 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n             clean::AssociatedTypeItem(ref bounds, ref default) => {\n                 let id = cx.derive_id(format!(\"{}.{}\", item_type, name));\n                 let ns_id = cx.derive_id(format!(\"{}.{}\", name, item_type.name_space()));\n-                write!(w, \"<h4 id='{}' class=\\\"{}\\\">\", id, item_type)?;\n+                write!(w, \"<h4 id='{}' class=\\\"{}{}\\\">\", id, item_type, extra_class)?;\n                 write!(w, \"<span id='{}' class='invisible'><code>\", ns_id)?;\n                 assoc_type(w, item, bounds, default.as_ref(), link.anchor(&id))?;\n                 write!(w, \"</code></span></h4>\\n\")?;\n@@ -3940,25 +3955,25 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n                     if let Some(it) = t.items.iter().find(|i| i.name == item.name) {\n                         // We need the stability of the item from the trait\n                         // because impls can't have a stability.\n-                        document_stability(w, cx, it)?;\n+                        document_stability(w, cx, it, is_hidden)?;\n                         if item.doc_value().is_some() {\n-                            document_full(w, item, cx, \"\")?;\n+                            document_full(w, item, cx, \"\", is_hidden)?;\n                         } else if show_def_docs {\n                             // In case the item isn't documented,\n                             // provide short documentation from the trait.\n-                            document_short(w, cx, it, link, \"\")?;\n+                            document_short(w, cx, it, link, \"\", is_hidden)?;\n                         }\n                     }\n                 } else {\n-                    document_stability(w, cx, item)?;\n+                    document_stability(w, cx, item, is_hidden)?;\n                     if show_def_docs {\n-                        document_full(w, item, cx, \"\")?;\n+                        document_full(w, item, cx, \"\", is_hidden)?;\n                     }\n                 }\n             } else {\n-                document_stability(w, cx, item)?;\n+                document_stability(w, cx, item, is_hidden)?;\n                 if show_def_docs {\n-                    document_short(w, cx, item, link, \"\")?;\n+                    document_short(w, cx, item, link, \"\", is_hidden)?;\n                 }\n             }\n         }"}, {"sha": "75e8eaf57532ec69f2a2921ac32abf6c43137c12", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/edec5807ac5ba90cbc0c61a5ec7b80f29e1eea33/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/edec5807ac5ba90cbc0c61a5ec7b80f29e1eea33/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=edec5807ac5ba90cbc0c61a5ec7b80f29e1eea33", "patch": "@@ -2057,6 +2057,36 @@\n     onEach(document.getElementsByClassName('method'), func);\n     onEach(document.getElementsByClassName('associatedconstant'), func);\n     onEach(document.getElementsByClassName('impl'), func);\n+    onEach(document.getElementsByClassName('impl-items'), function(e) {\n+        onEach(e.getElementsByClassName('associatedconstant'), func);\n+        if (e.getElementsByClassName('hidden').length > 0) {\n+            var newToggle = document.createElement('a');\n+            newToggle.href = 'javascript:void(0)';\n+            newToggle.className = 'collapse-toggle hidden-default collapsed';\n+            newToggle.innerHTML = \"[<span class='inner'>\" + labelForToggleButton(true) + \"</span>\" +\n+                                  \"] Show hidden default items\";\n+            newToggle.onclick = function() {\n+                if (hasClass(this, \"collapsed\")) {\n+                    removeClass(this, \"collapsed\");\n+                    onEach(this.parentNode.getElementsByClassName(\"hidden\"), function(x) {\n+                        removeClass(x, \"hidden\");\n+                        addClass(x, \"x\");\n+                    }, true);\n+                    this.innerHTML = \"[<span class='inner'>\" + labelForToggleButton(false) +\n+                                     \"</span>] Hide default items\"\n+                } else {\n+                    addClass(this, \"collapsed\");\n+                    onEach(this.parentNode.getElementsByClassName(\"x\"), function(x) {\n+                        addClass(x, \"hidden\");\n+                        removeClass(x, \"x\");\n+                    }, true);\n+                    this.innerHTML = \"[<span class='inner'>\" + labelForToggleButton(true) +\n+                                     \"</span>] Show hidden default items\";\n+                }\n+            };\n+            e.insertBefore(newToggle, e.firstChild);\n+        }\n+    });\n \n     function createToggle(otherMessage, fontSize, extraClass, show) {\n         var span = document.createElement('span');"}, {"sha": "848d02440b5d2e77e9eb502e02c0e1e4d769e439", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/edec5807ac5ba90cbc0c61a5ec7b80f29e1eea33/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/edec5807ac5ba90cbc0c61a5ec7b80f29e1eea33/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=edec5807ac5ba90cbc0c61a5ec7b80f29e1eea33", "patch": "@@ -816,6 +816,11 @@ h3 > .collapse-toggle, h4 > .collapse-toggle {\n \ttext-align: center;\n }\n \n+.collapse-toggle.hidden-default {\n+\tposition: relative;\n+\tmargin-left: 20px;\n+}\n+\n .ghost {\n \tdisplay: none;\n }"}, {"sha": "5f7a8c75d3c5f6973775c2a09fd98b1af6e4693c", "filename": "src/librustdoc/html/static/storage.js", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/edec5807ac5ba90cbc0c61a5ec7b80f29e1eea33/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstorage.js", "raw_url": "https://github.com/rust-lang/rust/raw/edec5807ac5ba90cbc0c61a5ec7b80f29e1eea33/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstorage.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstorage.js?ref=edec5807ac5ba90cbc0c61a5ec7b80f29e1eea33", "patch": "@@ -15,11 +15,19 @@ var mainTheme = document.getElementById(\"mainThemeStyle\");\n \n var savedHref = [];\n \n-function onEach(arr, func) {\n+function onEach(arr, func, reversed) {\n     if (arr && arr.length > 0 && func) {\n-        for (var i = 0; i < arr.length; i++) {\n-            if (func(arr[i]) === true) {\n-                return true;\n+        if (reversed !== true) {\n+            for (var i = 0; i < arr.length; ++i) {\n+                if (func(arr[i]) === true) {\n+                    return true;\n+                }\n+            }\n+        } else {\n+            for (var i = arr.length - 1; i >= 0; --i) {\n+                if (func(arr[i]) === true) {\n+                    return true;\n+                }\n             }\n         }\n     }"}]}