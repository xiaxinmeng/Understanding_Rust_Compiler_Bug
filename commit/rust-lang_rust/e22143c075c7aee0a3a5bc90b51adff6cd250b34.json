{"sha": "e22143c075c7aee0a3a5bc90b51adff6cd250b34", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyMjE0M2MwNzVjN2FlZTBhM2E1YmM5MGI1MWFkZmY2Y2QyNTBiMzQ=", "commit": {"author": {"name": "The8472", "email": "git@infinite-source.de", "date": "2021-03-14T18:10:34Z"}, "committer": {"name": "The8472", "email": "git@infinite-source.de", "date": "2021-03-14T18:10:34Z"}, "message": "Revert \"Revert \"use RWlock when accessing os::env #81850\"\"\n\nThis reverts commit acdca316c3d42299d31c1b47eb792006ffdfc29c.", "tree": {"sha": "0437dc1abc8a47b16a66b475ef3fd90511a053bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0437dc1abc8a47b16a66b475ef3fd90511a053bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e22143c075c7aee0a3a5bc90b51adff6cd250b34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e22143c075c7aee0a3a5bc90b51adff6cd250b34", "html_url": "https://github.com/rust-lang/rust/commit/e22143c075c7aee0a3a5bc90b51adff6cd250b34", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e22143c075c7aee0a3a5bc90b51adff6cd250b34/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9320b121b5b20d2201c9f5ec40fb3c241fcac6f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/9320b121b5b20d2201c9f5ec40fb3c241fcac6f0", "html_url": "https://github.com/rust-lang/rust/commit/9320b121b5b20d2201c9f5ec40fb3c241fcac6f0"}], "stats": {"total": 84, "additions": 72, "deletions": 12}, "files": [{"sha": "1d1118aa694347d285a59dcbd4c45bf10f32812f", "filename": "library/std/src/sys/unix/os.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e22143c075c7aee0a3a5bc90b51adff6cd250b34/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e22143c075c7aee0a3a5bc90b51adff6cd250b34/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs?ref=e22143c075c7aee0a3a5bc90b51adff6cd250b34", "patch": "@@ -22,6 +22,7 @@ use crate::str;\n use crate::sys::cvt;\n use crate::sys::fd;\n use crate::sys_common::mutex::{StaticMutex, StaticMutexGuard};\n+use crate::sys_common::rwlock::{RWLockReadGuard, StaticRWLock};\n use crate::vec;\n \n use libc::{c_char, c_int, c_void};\n@@ -490,20 +491,20 @@ pub unsafe fn environ() -> *mut *const *const c_char {\n     extern \"C\" {\n         static mut environ: *const *const c_char;\n     }\n-    &mut environ\n+    ptr::addr_of_mut!(environ)\n }\n \n-pub unsafe fn env_lock() -> StaticMutexGuard {\n-    // It is UB to attempt to acquire this mutex reentrantly!\n-    static ENV_LOCK: StaticMutex = StaticMutex::new();\n-    ENV_LOCK.lock()\n+static ENV_LOCK: StaticRWLock = StaticRWLock::new();\n+\n+pub fn env_read_lock() -> RWLockReadGuard {\n+    ENV_LOCK.read_with_guard()\n }\n \n /// Returns a vector of (variable, value) byte-vector pairs for all the\n /// environment variables of the current process.\n pub fn env() -> Env {\n     unsafe {\n-        let _guard = env_lock();\n+        let _guard = env_read_lock();\n         let mut environ = *environ();\n         let mut result = Vec::new();\n         if !environ.is_null() {\n@@ -540,7 +541,7 @@ pub fn getenv(k: &OsStr) -> io::Result<Option<OsString>> {\n     // always None as well\n     let k = CString::new(k.as_bytes())?;\n     unsafe {\n-        let _guard = env_lock();\n+        let _guard = env_read_lock();\n         let s = libc::getenv(k.as_ptr()) as *const libc::c_char;\n         let ret = if s.is_null() {\n             None\n@@ -556,7 +557,7 @@ pub fn setenv(k: &OsStr, v: &OsStr) -> io::Result<()> {\n     let v = CString::new(v.as_bytes())?;\n \n     unsafe {\n-        let _guard = env_lock();\n+        let _guard = ENV_LOCK.write_with_guard();\n         cvt(libc::setenv(k.as_ptr(), v.as_ptr(), 1)).map(drop)\n     }\n }\n@@ -565,7 +566,7 @@ pub fn unsetenv(n: &OsStr) -> io::Result<()> {\n     let nbuf = CString::new(n.as_bytes())?;\n \n     unsafe {\n-        let _guard = env_lock();\n+        let _guard = ENV_LOCK.write_with_guard();\n         cvt(libc::unsetenv(nbuf.as_ptr())).map(drop)\n     }\n }"}, {"sha": "47aaca82af946d0cb3de794e106b72603494421b", "filename": "library/std/src/sys/unix/process/process_unix.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e22143c075c7aee0a3a5bc90b51adff6cd250b34/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e22143c075c7aee0a3a5bc90b51adff6cd250b34/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=e22143c075c7aee0a3a5bc90b51adff6cd250b34", "patch": "@@ -48,7 +48,7 @@ impl Command {\n         // a lock any more because the parent won't do anything and the child is\n         // in its own process. Thus the parent drops the lock guard while the child\n         // forgets it to avoid unlocking it on a new thread, which would be invalid.\n-        let (env_lock, result) = unsafe { (sys::os::env_lock(), cvt(libc::fork())?) };\n+        let (env_lock, result) = unsafe { (sys::os::env_read_lock(), cvt(libc::fork())?) };\n \n         let pid = unsafe {\n             match result {\n@@ -127,7 +127,7 @@ impl Command {\n                     // Similar to when forking, we want to ensure that access to\n                     // the environment is synchronized, so make sure to grab the\n                     // environment lock before we try to exec.\n-                    let _lock = sys::os::env_lock();\n+                    let _lock = sys::os::env_read_lock();\n \n                     let Err(e) = self.do_exec(theirs, envp.as_ref());\n                     e\n@@ -407,7 +407,7 @@ impl Command {\n             cvt_nz(libc::posix_spawnattr_setflags(attrs.0.as_mut_ptr(), flags as _))?;\n \n             // Make sure we synchronize access to the global `environ` resource\n-            let _env_lock = sys::os::env_lock();\n+            let _env_lock = sys::os::env_read_lock();\n             let envp = envp.map(|c| c.as_ptr()).unwrap_or_else(|| *sys::os::environ() as *const _);\n             cvt_nz(libc::posix_spawnp(\n                 &mut p.pid,"}, {"sha": "70b31b19f824cb16eda7030a235fc7de88d3f4c5", "filename": "library/std/src/sys_common/rwlock.rs", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/e22143c075c7aee0a3a5bc90b51adff6cd250b34/library%2Fstd%2Fsrc%2Fsys_common%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e22143c075c7aee0a3a5bc90b51adff6cd250b34/library%2Fstd%2Fsrc%2Fsys_common%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Frwlock.rs?ref=e22143c075c7aee0a3a5bc90b51adff6cd250b34", "patch": "@@ -86,3 +86,62 @@ impl RWLock {\n         self.0.destroy()\n     }\n }\n+\n+// the cfg annotations only exist due to dead code warnings. the code itself is portable\n+#[cfg(unix)]\n+pub struct StaticRWLock(RWLock);\n+\n+#[cfg(unix)]\n+impl StaticRWLock {\n+    pub const fn new() -> StaticRWLock {\n+        StaticRWLock(RWLock::new())\n+    }\n+\n+    /// Acquires shared access to the underlying lock, blocking the current\n+    /// thread to do so.\n+    ///\n+    /// The lock is automatically unlocked when the returned guard is dropped.\n+    #[inline]\n+    pub fn read_with_guard(&'static self) -> RWLockReadGuard {\n+        // SAFETY: All methods require static references, therefore self\n+        // cannot be moved between invocations.\n+        unsafe {\n+            self.0.read();\n+        }\n+        RWLockReadGuard(&self.0)\n+    }\n+\n+    /// Acquires write access to the underlying lock, blocking the current thread\n+    /// to do so.\n+    ///\n+    /// The lock is automatically unlocked when the returned guard is dropped.\n+    #[inline]\n+    pub fn write_with_guard(&'static self) -> RWLockWriteGuard {\n+        // SAFETY: All methods require static references, therefore self\n+        // cannot be moved between invocations.\n+        unsafe {\n+            self.0.write();\n+        }\n+        RWLockWriteGuard(&self.0)\n+    }\n+}\n+\n+#[cfg(unix)]\n+pub struct RWLockReadGuard(&'static RWLock);\n+\n+#[cfg(unix)]\n+impl Drop for RWLockReadGuard {\n+    fn drop(&mut self) {\n+        unsafe { self.0.read_unlock() }\n+    }\n+}\n+\n+#[cfg(unix)]\n+pub struct RWLockWriteGuard(&'static RWLock);\n+\n+#[cfg(unix)]\n+impl Drop for RWLockWriteGuard {\n+    fn drop(&mut self) {\n+        unsafe { self.0.write_unlock() }\n+    }\n+}"}]}