{"sha": "8db319f9578aa4cc5647a187f92aa00a6f4ad335", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkYjMxOWY5NTc4YWE0Y2M1NjQ3YTE4N2Y5MmFhMDBhNmY0YWQzMzU=", "commit": {"author": {"name": "Krishna Veera Reddy", "email": "veerareddy@email.arizona.edu", "date": "2019-12-08T03:10:06Z"}, "committer": {"name": "Krishna Veera Reddy", "email": "veerareddy@email.arizona.edu", "date": "2019-12-31T17:22:34Z"}, "message": "Use `mem::take` instead of `mem::replace` when applicable\n\n`std::mem::take` can be used to replace a value of type `T`\nwith `T::default()` instead of `std::mem::replace`.", "tree": {"sha": "c5b9e85a1c5e20b002aed01ad393e77514874abe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5b9e85a1c5e20b002aed01ad393e77514874abe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8db319f9578aa4cc5647a187f92aa00a6f4ad335", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8db319f9578aa4cc5647a187f92aa00a6f4ad335", "html_url": "https://github.com/rust-lang/rust/commit/8db319f9578aa4cc5647a187f92aa00a6f4ad335", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8db319f9578aa4cc5647a187f92aa00a6f4ad335/comments", "author": {"login": "krishna-veerareddy", "id": 41484652, "node_id": "MDQ6VXNlcjQxNDg0NjUy", "avatar_url": "https://avatars.githubusercontent.com/u/41484652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krishna-veerareddy", "html_url": "https://github.com/krishna-veerareddy", "followers_url": "https://api.github.com/users/krishna-veerareddy/followers", "following_url": "https://api.github.com/users/krishna-veerareddy/following{/other_user}", "gists_url": "https://api.github.com/users/krishna-veerareddy/gists{/gist_id}", "starred_url": "https://api.github.com/users/krishna-veerareddy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krishna-veerareddy/subscriptions", "organizations_url": "https://api.github.com/users/krishna-veerareddy/orgs", "repos_url": "https://api.github.com/users/krishna-veerareddy/repos", "events_url": "https://api.github.com/users/krishna-veerareddy/events{/privacy}", "received_events_url": "https://api.github.com/users/krishna-veerareddy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "krishna-veerareddy", "id": 41484652, "node_id": "MDQ6VXNlcjQxNDg0NjUy", "avatar_url": "https://avatars.githubusercontent.com/u/41484652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krishna-veerareddy", "html_url": "https://github.com/krishna-veerareddy", "followers_url": "https://api.github.com/users/krishna-veerareddy/followers", "following_url": "https://api.github.com/users/krishna-veerareddy/following{/other_user}", "gists_url": "https://api.github.com/users/krishna-veerareddy/gists{/gist_id}", "starred_url": "https://api.github.com/users/krishna-veerareddy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krishna-veerareddy/subscriptions", "organizations_url": "https://api.github.com/users/krishna-veerareddy/orgs", "repos_url": "https://api.github.com/users/krishna-veerareddy/repos", "events_url": "https://api.github.com/users/krishna-veerareddy/events{/privacy}", "received_events_url": "https://api.github.com/users/krishna-veerareddy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99dd0bb653f5ec3767b899c939468512abef0f9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/99dd0bb653f5ec3767b899c939468512abef0f9c", "html_url": "https://github.com/rust-lang/rust/commit/99dd0bb653f5ec3767b899c939468512abef0f9c"}], "stats": {"total": 258, "additions": 189, "deletions": 69}, "files": [{"sha": "05d437d3598c9d9c5ebab2ba6a2d1b84c4966970", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8db319f9578aa4cc5647a187f92aa00a6f4ad335/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/8db319f9578aa4cc5647a187f92aa00a6f4ad335/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=8db319f9578aa4cc5647a187f92aa00a6f4ad335", "patch": "@@ -1173,6 +1173,7 @@ Released 2018-09-13\n [`mem_discriminant_non_enum`]: https://rust-lang.github.io/rust-clippy/master/index.html#mem_discriminant_non_enum\n [`mem_forget`]: https://rust-lang.github.io/rust-clippy/master/index.html#mem_forget\n [`mem_replace_option_with_none`]: https://rust-lang.github.io/rust-clippy/master/index.html#mem_replace_option_with_none\n+[`mem_replace_with_default`]: https://rust-lang.github.io/rust-clippy/master/index.html#mem_replace_with_default\n [`mem_replace_with_uninit`]: https://rust-lang.github.io/rust-clippy/master/index.html#mem_replace_with_uninit\n [`min_max`]: https://rust-lang.github.io/rust-clippy/master/index.html#min_max\n [`misaligned_transmute`]: https://rust-lang.github.io/rust-clippy/master/index.html#misaligned_transmute"}, {"sha": "abcddc88527ca661529896b364f6a187a13b3a50", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8db319f9578aa4cc5647a187f92aa00a6f4ad335/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8db319f9578aa4cc5647a187f92aa00a6f4ad335/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=8db319f9578aa4cc5647a187f92aa00a6f4ad335", "patch": "@@ -599,6 +599,7 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n         &mem_discriminant::MEM_DISCRIMINANT_NON_ENUM,\n         &mem_forget::MEM_FORGET,\n         &mem_replace::MEM_REPLACE_OPTION_WITH_NONE,\n+        &mem_replace::MEM_REPLACE_WITH_DEFAULT,\n         &mem_replace::MEM_REPLACE_WITH_UNINIT,\n         &methods::CHARS_LAST_CMP,\n         &methods::CHARS_NEXT_CMP,\n@@ -1594,6 +1595,7 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n     store.register_group(true, \"clippy::nursery\", Some(\"clippy_nursery\"), vec![\n         LintId::of(&attrs::EMPTY_LINE_AFTER_OUTER_ATTR),\n         LintId::of(&fallible_impl_from::FALLIBLE_IMPL_FROM),\n+        LintId::of(&mem_replace::MEM_REPLACE_WITH_DEFAULT),\n         LintId::of(&missing_const_for_fn::MISSING_CONST_FOR_FN),\n         LintId::of(&mul_add::MANUAL_MUL_ADD),\n         LintId::of(&mutex_atomic::MUTEX_INTEGER),"}, {"sha": "5ad41a53b89baa8d94b224ed772e4dd74cbba070", "filename": "clippy_lints/src/mem_replace.rs", "status": "modified", "additions": 124, "deletions": 62, "changes": 186, "blob_url": "https://github.com/rust-lang/rust/blob/8db319f9578aa4cc5647a187f92aa00a6f4ad335/clippy_lints%2Fsrc%2Fmem_replace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8db319f9578aa4cc5647a187f92aa00a6f4ad335/clippy_lints%2Fsrc%2Fmem_replace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_replace.rs?ref=8db319f9578aa4cc5647a187f92aa00a6f4ad335", "patch": "@@ -3,7 +3,7 @@ use crate::utils::{\n };\n use if_chain::if_chain;\n use rustc::declare_lint_pass;\n-use rustc::hir::{BorrowKind, Expr, ExprKind, Mutability, QPath};\n+use rustc::hir::{BorrowKind, Expr, ExprKind, HirVec, Mutability, QPath};\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc_errors::Applicability;\n use rustc_session::declare_tool_lint;\n@@ -67,8 +67,127 @@ declare_clippy_lint! {\n     \"`mem::replace(&mut _, mem::uninitialized())` or `mem::replace(&mut _, mem::zeroed())`\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks for `std::mem::replace` on a value of type\n+    /// `T` with `T::default()`.\n+    ///\n+    /// **Why is this bad?** `std::mem` module already has the method `take` to\n+    /// take the current value and replace it with the default value of that type.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    /// ```rust\n+    /// let mut text = String::from(\"foo\");\n+    /// let replaced = std::mem::replace(&mut text, String::default());\n+    /// ```\n+    /// Is better expressed with:\n+    /// ```rust\n+    /// let mut text = String::from(\"foo\");\n+    /// let taken = std::mem::take(&mut text);\n+    /// ```\n+    pub MEM_REPLACE_WITH_DEFAULT,\n+    nursery,\n+    \"replacing a value of type `T` with `T::default()` instead of using `std::mem::take`\"\n+}\n+\n declare_lint_pass!(MemReplace =>\n-    [MEM_REPLACE_OPTION_WITH_NONE, MEM_REPLACE_WITH_UNINIT]);\n+    [MEM_REPLACE_OPTION_WITH_NONE, MEM_REPLACE_WITH_UNINIT, MEM_REPLACE_WITH_DEFAULT]);\n+\n+fn check_replace_option_with_none(cx: &LateContext<'_, '_>, expr: &'_ Expr, args: &HirVec<Expr>) {\n+    if let ExprKind::Path(ref replacement_qpath) = args[1].kind {\n+        // Check that second argument is `Option::None`\n+        if match_qpath(replacement_qpath, &paths::OPTION_NONE) {\n+            // Since this is a late pass (already type-checked),\n+            // and we already know that the second argument is an\n+            // `Option`, we do not need to check the first\n+            // argument's type. All that's left is to get\n+            // replacee's path.\n+            let replaced_path = match args[0].kind {\n+                ExprKind::AddrOf(BorrowKind::Ref, Mutability::Mut, ref replaced) => {\n+                    if let ExprKind::Path(QPath::Resolved(None, ref replaced_path)) = replaced.kind {\n+                        replaced_path\n+                    } else {\n+                        return;\n+                    }\n+                },\n+                ExprKind::Path(QPath::Resolved(None, ref replaced_path)) => replaced_path,\n+                _ => return,\n+            };\n+\n+            let mut applicability = Applicability::MachineApplicable;\n+            span_lint_and_sugg(\n+                cx,\n+                MEM_REPLACE_OPTION_WITH_NONE,\n+                expr.span,\n+                \"replacing an `Option` with `None`\",\n+                \"consider `Option::take()` instead\",\n+                format!(\n+                    \"{}.take()\",\n+                    snippet_with_applicability(cx, replaced_path.span, \"\", &mut applicability)\n+                ),\n+                applicability,\n+            );\n+        }\n+    }\n+}\n+\n+fn check_replace_with_uninit(cx: &LateContext<'_, '_>, expr: &'_ Expr, args: &HirVec<Expr>) {\n+    if let ExprKind::Call(ref repl_func, ref repl_args) = args[1].kind {\n+        if_chain! {\n+            if repl_args.is_empty();\n+            if let ExprKind::Path(ref repl_func_qpath) = repl_func.kind;\n+            if let Some(repl_def_id) = cx.tables.qpath_res(repl_func_qpath, repl_func.hir_id).opt_def_id();\n+            then {\n+                if match_def_path(cx, repl_def_id, &paths::MEM_UNINITIALIZED) {\n+                    span_help_and_lint(\n+                        cx,\n+                        MEM_REPLACE_WITH_UNINIT,\n+                        expr.span,\n+                        \"replacing with `mem::uninitialized()`\",\n+                        \"consider using the `take_mut` crate instead\",\n+                    );\n+                } else if match_def_path(cx, repl_def_id, &paths::MEM_ZEROED) &&\n+                        !cx.tables.expr_ty(&args[1]).is_primitive() {\n+                    span_help_and_lint(\n+                        cx,\n+                        MEM_REPLACE_WITH_UNINIT,\n+                        expr.span,\n+                        \"replacing with `mem::zeroed()`\",\n+                        \"consider using a default value or the `take_mut` crate instead\",\n+                    );\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+fn check_replace_with_default(cx: &LateContext<'_, '_>, expr: &'_ Expr, args: &HirVec<Expr>) {\n+    if let ExprKind::Call(ref repl_func, ref repl_args) = args[1].kind {\n+        if_chain! {\n+            if repl_args.is_empty();\n+            if let ExprKind::Path(ref repl_func_qpath) = repl_func.kind;\n+            if let Some(repl_def_id) = cx.tables.qpath_res(repl_func_qpath, repl_func.hir_id).opt_def_id();\n+            if match_def_path(cx, repl_def_id, &paths::DEFAULT_TRAIT_METHOD);\n+            then {\n+                let mut applicability = Applicability::MachineApplicable;\n+\n+                span_lint_and_sugg(\n+                    cx,\n+                    MEM_REPLACE_WITH_DEFAULT,\n+                    expr.span,\n+                    \"replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\",\n+                    \"consider using\",\n+                    format!(\n+                        \"std::mem::take({})\",\n+                        snippet_with_applicability(cx, args[0].span, \"\", &mut applicability)\n+                    ),\n+                    applicability,\n+                );\n+            }\n+        }\n+    }\n+}\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MemReplace {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr<'_>) {\n@@ -80,67 +199,10 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MemReplace {\n             if let Some(def_id) = cx.tables.qpath_res(func_qpath, func.hir_id).opt_def_id();\n             if match_def_path(cx, def_id, &paths::MEM_REPLACE);\n \n-            // Check that second argument is `Option::None`\n             then {\n-                if let ExprKind::Path(ref replacement_qpath) = func_args[1].kind {\n-                    if match_qpath(replacement_qpath, &paths::OPTION_NONE) {\n-\n-                        // Since this is a late pass (already type-checked),\n-                        // and we already know that the second argument is an\n-                        // `Option`, we do not need to check the first\n-                        // argument's type. All that's left is to get\n-                        // replacee's path.\n-                        let replaced_path = match func_args[0].kind {\n-                            ExprKind::AddrOf(BorrowKind::Ref, Mutability::Mut, ref replaced) => {\n-                                if let ExprKind::Path(QPath::Resolved(None, ref replaced_path)) = replaced.kind {\n-                                    replaced_path\n-                                } else {\n-                                    return\n-                                }\n-                            },\n-                            ExprKind::Path(QPath::Resolved(None, ref replaced_path)) => replaced_path,\n-                            _ => return,\n-                        };\n-\n-                        let mut applicability = Applicability::MachineApplicable;\n-                        span_lint_and_sugg(\n-                            cx,\n-                            MEM_REPLACE_OPTION_WITH_NONE,\n-                            expr.span,\n-                            \"replacing an `Option` with `None`\",\n-                            \"consider `Option::take()` instead\",\n-                            format!(\"{}.take()\", snippet_with_applicability(cx, replaced_path.span, \"\", &mut applicability)),\n-                            applicability,\n-                        );\n-                    }\n-                }\n-                if let ExprKind::Call(ref repl_func, ref repl_args) = func_args[1].kind {\n-                    if_chain! {\n-                        if repl_args.is_empty();\n-                        if let ExprKind::Path(ref repl_func_qpath) = repl_func.kind;\n-                        if let Some(repl_def_id) = cx.tables.qpath_res(repl_func_qpath, repl_func.hir_id).opt_def_id();\n-                        then {\n-                            if match_def_path(cx, repl_def_id, &paths::MEM_UNINITIALIZED) {\n-                                span_help_and_lint(\n-                                    cx,\n-                                    MEM_REPLACE_WITH_UNINIT,\n-                                    expr.span,\n-                                    \"replacing with `mem::uninitialized()`\",\n-                                    \"consider using the `take_mut` crate instead\",\n-                                );\n-                            } else if match_def_path(cx, repl_def_id, &paths::MEM_ZEROED) &&\n-                                    !cx.tables.expr_ty(&func_args[1]).is_primitive() {\n-                                span_help_and_lint(\n-                                    cx,\n-                                    MEM_REPLACE_WITH_UNINIT,\n-                                    expr.span,\n-                                    \"replacing with `mem::zeroed()`\",\n-                                    \"consider using a default value or the `take_mut` crate instead\",\n-                                );\n-                            }\n-                        }\n-                    }\n-                }\n+                check_replace_option_with_none(cx, expr, &func_args);\n+                check_replace_with_uninit(cx, expr, &func_args);\n+                check_replace_with_default(cx, expr, &func_args);\n             }\n         }\n     }"}, {"sha": "4b820250c8df06173e4127908856899bc217b88e", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8db319f9578aa4cc5647a187f92aa00a6f4ad335/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8db319f9578aa4cc5647a187f92aa00a6f4ad335/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=8db319f9578aa4cc5647a187f92aa00a6f4ad335", "patch": "@@ -1099,6 +1099,13 @@ pub const ALL_LINTS: [Lint; 342] = [\n         deprecation: None,\n         module: \"mem_replace\",\n     },\n+    Lint {\n+        name: \"mem_replace_with_default\",\n+        group: \"nursery\",\n+        desc: \"replacing a value of type `T` with `T::default()` instead of using `std::mem::take`\",\n+        deprecation: None,\n+        module: \"mem_replace\",\n+    },\n     Lint {\n         name: \"mem_replace_with_uninit\",\n         group: \"correctness\","}, {"sha": "19205dc38223c383a8f657a41524f493ed36a37f", "filename": "tests/ui/mem_replace.fixed", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8db319f9578aa4cc5647a187f92aa00a6f4ad335/tests%2Fui%2Fmem_replace.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8db319f9578aa4cc5647a187f92aa00a6f4ad335/tests%2Fui%2Fmem_replace.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_replace.fixed?ref=8db319f9578aa4cc5647a187f92aa00a6f4ad335", "patch": "@@ -9,13 +9,30 @@\n \n // run-rustfix\n #![allow(unused_imports)]\n-#![warn(clippy::all, clippy::style, clippy::mem_replace_option_with_none)]\n+#![warn(\n+    clippy::all,\n+    clippy::style,\n+    clippy::mem_replace_option_with_none,\n+    clippy::mem_replace_with_default\n+)]\n \n use std::mem;\n \n-fn main() {\n+fn replace_option_with_none() {\n     let mut an_option = Some(1);\n     let _ = an_option.take();\n     let an_option = &mut Some(1);\n     let _ = an_option.take();\n }\n+\n+fn replace_with_default() {\n+    let mut s = String::from(\"foo\");\n+    let _ = std::mem::take(&mut s);\n+    let s = &mut String::from(\"foo\");\n+    let _ = std::mem::take(s);\n+}\n+\n+fn main() {\n+    replace_option_with_none();\n+    replace_with_default();\n+}"}, {"sha": "97ac283abc663f0e930759f0a4c53b2f8ac444d1", "filename": "tests/ui/mem_replace.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8db319f9578aa4cc5647a187f92aa00a6f4ad335/tests%2Fui%2Fmem_replace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8db319f9578aa4cc5647a187f92aa00a6f4ad335/tests%2Fui%2Fmem_replace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_replace.rs?ref=8db319f9578aa4cc5647a187f92aa00a6f4ad335", "patch": "@@ -9,13 +9,30 @@\n \n // run-rustfix\n #![allow(unused_imports)]\n-#![warn(clippy::all, clippy::style, clippy::mem_replace_option_with_none)]\n+#![warn(\n+    clippy::all,\n+    clippy::style,\n+    clippy::mem_replace_option_with_none,\n+    clippy::mem_replace_with_default\n+)]\n \n use std::mem;\n \n-fn main() {\n+fn replace_option_with_none() {\n     let mut an_option = Some(1);\n     let _ = mem::replace(&mut an_option, None);\n     let an_option = &mut Some(1);\n     let _ = mem::replace(an_option, None);\n }\n+\n+fn replace_with_default() {\n+    let mut s = String::from(\"foo\");\n+    let _ = std::mem::replace(&mut s, String::default());\n+    let s = &mut String::from(\"foo\");\n+    let _ = std::mem::replace(s, String::default());\n+}\n+\n+fn main() {\n+    replace_option_with_none();\n+    replace_with_default();\n+}"}, {"sha": "44495a973c870515ba1212b8125a0d0c48fafb64", "filename": "tests/ui/mem_replace.stderr", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8db319f9578aa4cc5647a187f92aa00a6f4ad335/tests%2Fui%2Fmem_replace.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8db319f9578aa4cc5647a187f92aa00a6f4ad335/tests%2Fui%2Fmem_replace.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_replace.stderr?ref=8db319f9578aa4cc5647a187f92aa00a6f4ad335", "patch": "@@ -1,16 +1,30 @@\n error: replacing an `Option` with `None`\n-  --> $DIR/mem_replace.rs:18:13\n+  --> $DIR/mem_replace.rs:23:13\n    |\n LL |     let _ = mem::replace(&mut an_option, None);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider `Option::take()` instead: `an_option.take()`\n    |\n    = note: `-D clippy::mem-replace-option-with-none` implied by `-D warnings`\n \n error: replacing an `Option` with `None`\n-  --> $DIR/mem_replace.rs:20:13\n+  --> $DIR/mem_replace.rs:25:13\n    |\n LL |     let _ = mem::replace(an_option, None);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider `Option::take()` instead: `an_option.take()`\n \n-error: aborting due to 2 previous errors\n+error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n+  --> $DIR/mem_replace.rs:30:13\n+   |\n+LL |     let _ = std::mem::replace(&mut s, String::default());\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut s)`\n+   |\n+   = note: `-D clippy::mem-replace-with-default` implied by `-D warnings`\n+\n+error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n+  --> $DIR/mem_replace.rs:32:13\n+   |\n+LL |     let _ = std::mem::replace(s, String::default());\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(s)`\n+\n+error: aborting due to 4 previous errors\n "}]}