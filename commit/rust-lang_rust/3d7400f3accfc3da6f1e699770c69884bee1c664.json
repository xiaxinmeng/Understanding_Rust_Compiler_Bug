{"sha": "3d7400f3accfc3da6f1e699770c69884bee1c664", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkNzQwMGYzYWNjZmMzZGE2ZjFlNjk5NzcwYzY5ODg0YmVlMWM2NjQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-06-07T23:08:38Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-06-07T23:08:38Z"}, "message": "Add a Num typeclass", "tree": {"sha": "356d7103fed6f494da8ce2bcee344e93e230f88c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/356d7103fed6f494da8ce2bcee344e93e230f88c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d7400f3accfc3da6f1e699770c69884bee1c664", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d7400f3accfc3da6f1e699770c69884bee1c664", "html_url": "https://github.com/rust-lang/rust/commit/3d7400f3accfc3da6f1e699770c69884bee1c664", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d7400f3accfc3da6f1e699770c69884bee1c664/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d542e67827e0ad1a3df5fd248d9c09997b5dcbba", "url": "https://api.github.com/repos/rust-lang/rust/commits/d542e67827e0ad1a3df5fd248d9c09997b5dcbba", "html_url": "https://github.com/rust-lang/rust/commit/d542e67827e0ad1a3df5fd248d9c09997b5dcbba"}], "stats": {"total": 49, "additions": 47, "deletions": 2}, "files": [{"sha": "cfeda40641170b5f7483acb69b14e8be6895e335", "filename": "src/libcore/core.rc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d7400f3accfc3da6f1e699770c69884bee1c664/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/3d7400f3accfc3da6f1e699770c69884bee1c664/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=3d7400f3accfc3da6f1e699770c69884bee1c664", "patch": "@@ -46,6 +46,7 @@ export to_str;\n export swappable;\n export dvec, dvec_iter;\n export cmp;\n+export num;\n \n // NDM seems to be necessary for resolve to work\n export option_iter;\n@@ -155,6 +156,7 @@ mod tuple;\n // Ubiquitous-utility-type modules\n \n mod cmp;\n+mod num;\n mod either;\n mod iter;\n mod logging;"}, {"sha": "8d9225b05a8303c3d1f0008514f86e3eae292d9f", "filename": "src/libcore/int-template.rs", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/3d7400f3accfc3da6f1e699770c69884bee1c664/src%2Flibcore%2Fint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d7400f3accfc3da6f1e699770c69884bee1c664/src%2Flibcore%2Fint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template.rs?ref=3d7400f3accfc3da6f1e699770c69884bee1c664", "patch": "@@ -1,5 +1,6 @@\n import T = inst::T;\n import cmp::{eq, ord};\n+import num::num;\n \n export min_value, max_value;\n export min, max;\n@@ -11,7 +12,7 @@ export range;\n export compl;\n export abs;\n export parse_buf, from_str, to_str, to_str_bytes, str;\n-export ord, eq;\n+export ord, eq, num;\n \n const min_value: T = -1 as T << (inst::bits - 1 as T);\n const max_value: T = min_value - 1 as T;\n@@ -122,6 +123,17 @@ impl eq of eq for T {\n     }\n }\n \n+impl num of num for T {\n+    fn add(&&other: T)    -> T { ret self + other; }\n+    fn sub(&&other: T)    -> T { ret self - other; }\n+    fn mul(&&other: T)    -> T { ret self * other; }\n+    fn div(&&other: T)    -> T { ret self / other; }\n+    fn modulo(&&other: T) -> T { ret self % other; }\n+\n+    fn to_int()         -> int { ret self as int; }\n+    fn from_int(n: int) -> T   { ret n as T;      }\n+}\n+\n \n // FIXME: Has alignment issues on windows and 32-bit linux\n #[test]\n@@ -179,3 +191,22 @@ fn test_to_str() {\n     assert (eq(to_str(127 as T, 16u), \"7f\"));\n     assert (eq(to_str(100 as T, 10u), \"100\"));\n }\n+\n+#[test]\n+fn test_ifaces() {\n+    fn test<U:num>(ten: U) {\n+        assert (ten.to_int() == 10);\n+\n+        let two = ten.from_int(2);\n+        assert (two.to_int() == 2);\n+\n+        assert (ten.add(two) == ten.from_int(12));\n+        assert (ten.sub(two) == ten.from_int(8));\n+        assert (ten.mul(two) == ten.from_int(20));\n+        assert (ten.div(two) == ten.from_int(5));\n+        assert (ten.modulo(two) == ten.from_int(0));\n+    }\n+\n+    test(10 as T);\n+}\n+"}, {"sha": "9d658605f5a30f62133e1992555eccbcbe3fe495", "filename": "src/libcore/uint-template.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3d7400f3accfc3da6f1e699770c69884bee1c664/src%2Flibcore%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d7400f3accfc3da6f1e699770c69884bee1c664/src%2Flibcore%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template.rs?ref=3d7400f3accfc3da6f1e699770c69884bee1c664", "patch": "@@ -1,5 +1,6 @@\n import T = inst::T;\n import cmp::{eq, ord};\n+import num::num;\n \n export min_value, max_value;\n export min, max;\n@@ -11,7 +12,7 @@ export range;\n export compl;\n export to_str, to_str_bytes;\n export from_str, from_str_radix, str, parse_buf;\n-export ord, eq;\n+export ord, eq, num;\n \n const min_value: T = 0 as T;\n const max_value: T = 0 as T - 1 as T;\n@@ -63,6 +64,17 @@ impl eq of eq for T {\n     }\n }\n \n+impl num of num for T {\n+    fn add(&&other: T)    -> T { ret self + other; }\n+    fn sub(&&other: T)    -> T { ret self - other; }\n+    fn mul(&&other: T)    -> T { ret self * other; }\n+    fn div(&&other: T)    -> T { ret self / other; }\n+    fn modulo(&&other: T) -> T { ret self % other; }\n+\n+    fn to_int()         -> int { ret self as int; }\n+    fn from_int(n: int) -> T   { ret n as T;      }\n+}\n+\n #[doc = \"\n Parse a buffer of bytes\n "}]}