{"sha": "e1681df89221a0460ef2e30a69e5df9809e2a8e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxNjgxZGY4OTIyMWEwNDYwZWYyZTMwYTY5ZTVkZjk4MDllMmE4ZTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-09T01:31:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-09T01:31:57Z"}, "message": "auto merge of #12759 : lucab/rust/char-doc, r=alexcrichton\n\nThis is mostly a reaction to #12730. If we are going to keep calling them `char`, at least make it clear that they aren't characters but codepoint/scalar.", "tree": {"sha": "a65469982c33908aeeac67da6adc94e4501c5ca9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a65469982c33908aeeac67da6adc94e4501c5ca9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1681df89221a0460ef2e30a69e5df9809e2a8e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1681df89221a0460ef2e30a69e5df9809e2a8e1", "html_url": "https://github.com/rust-lang/rust/commit/e1681df89221a0460ef2e30a69e5df9809e2a8e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1681df89221a0460ef2e30a69e5df9809e2a8e1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "001705610505065ff50502390af933e0b264853a", "url": "https://api.github.com/repos/rust-lang/rust/commits/001705610505065ff50502390af933e0b264853a", "html_url": "https://github.com/rust-lang/rust/commit/001705610505065ff50502390af933e0b264853a"}, {"sha": "331f9077a035b201e7bddfabae503ba72c3ab1de", "url": "https://api.github.com/repos/rust-lang/rust/commits/331f9077a035b201e7bddfabae503ba72c3ab1de", "html_url": "https://github.com/rust-lang/rust/commit/331f9077a035b201e7bddfabae503ba72c3ab1de"}], "stats": {"total": 89, "additions": 60, "deletions": 29}, "files": [{"sha": "4c0f77586db44eacb01cb6a56acac82e4ce22889", "filename": "src/libstd/char.rs", "status": "modified", "additions": 60, "deletions": 29, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/e1681df89221a0460ef2e30a69e5df9809e2a8e1/src%2Flibstd%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1681df89221a0460ef2e30a69e5df9809e2a8e1/src%2Flibstd%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fchar.rs?ref=e1681df89221a0460ef2e30a69e5df9809e2a8e1", "patch": "@@ -8,7 +8,21 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Unicode characters manipulation (`char` type)\n+//! Character manipulation (`char` type, Unicode Scalar Value)\n+//!\n+//! This module  provides the `Char` trait, as well as its implementation\n+//! for the primitive `char` type, in order to allow basic character manipulation.\n+//!\n+//! A `char` actually represents a\n+//! *[Unicode Scalar Value](http://www.unicode.org/glossary/#unicode_scalar_value)*,\n+//! as it can contain any Unicode code point except high-surrogate and\n+//! low-surrogate code points.\n+//!\n+//! As such, only values in the ranges \\[0x0,0xD7FF\\] and \\[0xE000,0x10FFFF\\]\n+//! (inclusive) are allowed. A `char` can always be safely cast to a `u32`;\n+//! however the converse is not always true due to the above range limits\n+//! and, as such, should be performed via the `from_u32` function..\n+\n \n use cast::transmute;\n use option::{None, Option, Some};\n@@ -66,7 +80,7 @@ static TAG_FOUR_B: uint = 240u;\n /// The highest valid code point\n pub static MAX: char = '\\U0010ffff';\n \n-/// Convert from `u32` to a character.\n+/// Converts from `u32` to a `char`\n #[inline]\n pub fn from_u32(i: u32) -> Option<char> {\n     // catch out-of-bounds and surrogates\n@@ -77,31 +91,44 @@ pub fn from_u32(i: u32) -> Option<char> {\n     }\n }\n \n-/// Returns whether the specified character is considered a unicode alphabetic\n-/// character\n+/// Returns whether the specified `char` is considered a Unicode alphabetic\n+/// code point\n pub fn is_alphabetic(c: char) -> bool   { derived_property::Alphabetic(c) }\n-#[allow(missing_doc)]\n+\n+/// Returns whether the specified `char` satisfies the 'XID_Start' Unicode property\n+///\n+/// 'XID_Start' is a Unicode Derived Property specified in\n+/// [UAX #31](http://unicode.org/reports/tr31/#NFKC_Modifications),\n+/// mostly similar to ID_Start but modified for closure under NFKx.\n pub fn is_XID_start(c: char) -> bool    { derived_property::XID_Start(c) }\n-#[allow(missing_doc)]\n+\n+/// Returns whether the specified `char` satisfies the 'XID_Continue' Unicode property\n+///\n+/// 'XID_Continue' is a Unicode Derived Property specified in\n+/// [UAX #31](http://unicode.org/reports/tr31/#NFKC_Modifications),\n+/// mostly similar to 'ID_Continue' but modified for closure under NFKx.\n pub fn is_XID_continue(c: char) -> bool { derived_property::XID_Continue(c) }\n \n ///\n-/// Indicates whether a character is in lower case, defined\n-/// in terms of the Unicode Derived Core Property 'Lowercase'.\n+/// Indicates whether a `char` is in lower case\n+///\n+/// This is defined according to the terms of the Unicode Derived Core Property 'Lowercase'.\n ///\n #[inline]\n pub fn is_lowercase(c: char) -> bool { derived_property::Lowercase(c) }\n \n ///\n-/// Indicates whether a character is in upper case, defined\n-/// in terms of the Unicode Derived Core Property 'Uppercase'.\n+/// Indicates whether a `char` is in upper case\n+///\n+/// This is defined according to the terms of the Unicode Derived Core Property 'Uppercase'.\n ///\n #[inline]\n pub fn is_uppercase(c: char) -> bool { derived_property::Uppercase(c) }\n \n ///\n-/// Indicates whether a character is whitespace. Whitespace is defined in\n-/// terms of the Unicode Property 'White_Space'.\n+/// Indicates whether a `char` is whitespace\n+///\n+/// Whitespace is defined in terms of the Unicode Property 'White_Space'.\n ///\n #[inline]\n pub fn is_whitespace(c: char) -> bool {\n@@ -112,9 +139,10 @@ pub fn is_whitespace(c: char) -> bool {\n }\n \n ///\n-/// Indicates whether a character is alphanumeric. Alphanumericness is\n-/// defined in terms of the Unicode General Categories 'Nd', 'Nl', 'No'\n-/// and the Derived Core Property 'Alphabetic'.\n+/// Indicates whether a `char` is alphanumeric\n+///\n+/// Alphanumericness is defined in terms of the Unicode General Categories\n+/// 'Nd', 'Nl', 'No' and the Derived Core Property 'Alphabetic'.\n ///\n #[inline]\n pub fn is_alphanumeric(c: char) -> bool {\n@@ -125,14 +153,15 @@ pub fn is_alphanumeric(c: char) -> bool {\n }\n \n ///\n-/// Indicates whether a character is a control character. Control\n-/// characters are defined in terms of the Unicode General Category\n+/// Indicates whether a `char` is a control code point\n+///\n+/// Control code points are defined in terms of the Unicode General Category\n /// 'Cc'.\n ///\n #[inline]\n pub fn is_control(c: char) -> bool { general_category::Cc(c) }\n \n-/// Indicates whether the character is numeric (Nd, Nl, or No)\n+/// Indicates whether the `char` is numeric (Nd, Nl, or No)\n #[inline]\n pub fn is_digit(c: char) -> bool {\n     general_category::Nd(c)\n@@ -141,7 +170,8 @@ pub fn is_digit(c: char) -> bool {\n }\n \n ///\n-/// Checks if a character parses as a numeric digit in the given radix.\n+/// Checks if a `char` parses as a numeric digit in the given radix\n+///\n /// Compared to `is_digit()`, this function only recognizes the\n /// characters `0-9`, `a-z` and `A-Z`.\n ///\n@@ -167,13 +197,13 @@ pub fn is_digit_radix(c: char, radix: uint) -> bool {\n }\n \n ///\n-/// Convert a char to the corresponding digit.\n+/// Converts a `char` to the corresponding digit\n ///\n /// # Return value\n ///\n /// If `c` is between '0' and '9', the corresponding value\n /// between 0 and 9. If `c` is 'a' or 'A', 10. If `c` is\n-/// 'b' or 'B', 11, etc. Returns none if the char does not\n+/// 'b' or 'B', 11, etc. Returns none if the `char` does not\n /// refer to a digit in the given radix.\n ///\n /// # Failure\n@@ -196,7 +226,7 @@ pub fn to_digit(c: char, radix: uint) -> Option<uint> {\n }\n \n ///\n-/// Converts a number to the character representing it.\n+/// Converts a number to the character representing it\n ///\n /// # Return value\n ///\n@@ -254,7 +284,7 @@ fn decompose_hangul(s: char, f: |char|) {\n     }\n }\n \n-/// Returns the canonical decomposition of a character.\n+/// Returns the canonical decomposition of a character\n pub fn decompose_canonical(c: char, f: |char|) {\n     if (c as uint) < S_BASE || (c as uint) >= (S_BASE + S_COUNT) {\n         decompose::canonical(c, f);\n@@ -263,7 +293,7 @@ pub fn decompose_canonical(c: char, f: |char|) {\n     }\n }\n \n-/// Returns the compatibility decomposition of a character.\n+/// Returns the compatibility decomposition of a character\n pub fn decompose_compatible(c: char, f: |char|) {\n     if (c as uint) < S_BASE || (c as uint) >= (S_BASE + S_COUNT) {\n         decompose::compatibility(c, f);\n@@ -273,7 +303,7 @@ pub fn decompose_compatible(c: char, f: |char|) {\n }\n \n ///\n-/// Return the hexadecimal unicode escape of a char.\n+/// Returns the hexadecimal Unicode escape of a `char`\n ///\n /// The rules are as follows:\n ///\n@@ -301,7 +331,7 @@ pub fn escape_unicode(c: char, f: |char|) {\n }\n \n ///\n-/// Return a 'default' ASCII and C++11-like char-literal escape of a char.\n+/// Returns a 'default' ASCII and C++11-like literal escape of a `char`\n ///\n /// The default is chosen with a bias toward producing literals that are\n /// legal in a variety of languages, including C++11 and similar C-family\n@@ -325,7 +355,7 @@ pub fn escape_default(c: char, f: |char|) {\n     }\n }\n \n-/// Returns the amount of bytes this character would need if encoded in utf8\n+/// Returns the amount of bytes this `char` would need if encoded in UTF-8\n pub fn len_utf8_bytes(c: char) -> uint {\n     static MAX_ONE_B:   uint = 128u;\n     static MAX_TWO_B:   uint = 2048u;\n@@ -360,8 +390,9 @@ pub trait Char {\n     fn escape_default(&self, f: |char|);\n     fn len_utf8_bytes(&self) -> uint;\n \n-    /// Encodes this character as utf-8 into the provided byte-buffer. The\n-    /// buffer must be at least 4 bytes long or a runtime failure will occur.\n+    /// Encodes this `char` as utf-8 into the provided byte-buffer\n+    ///\n+    /// The buffer must be at least 4 bytes long or a runtime failure will occur.\n     ///\n     /// This will then return the number of characters written to the slice.\n     fn encode_utf8(&self, dst: &mut [u8]) -> uint;"}]}