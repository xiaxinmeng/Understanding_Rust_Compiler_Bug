{"sha": "5fdc81262a5d44f10e335384b5d69b938d6d729c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmZGM4MTI2MmE1ZDQ0ZjEwZTMzNTM4NGI1ZDY5YjkzOGQ2ZDcyOWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-17T04:56:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-17T04:56:45Z"}, "message": "auto merge of #11553 : klutzy/rust/rustc-cleanups, r=alexcrichton", "tree": {"sha": "164cd2c9f73ba67261af1f3f172ab7b131758d08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/164cd2c9f73ba67261af1f3f172ab7b131758d08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5fdc81262a5d44f10e335384b5d69b938d6d729c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5fdc81262a5d44f10e335384b5d69b938d6d729c", "html_url": "https://github.com/rust-lang/rust/commit/5fdc81262a5d44f10e335384b5d69b938d6d729c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5fdc81262a5d44f10e335384b5d69b938d6d729c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58a15f3d5a2213d37bbf653e4562c36a130f14ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/58a15f3d5a2213d37bbf653e4562c36a130f14ee", "html_url": "https://github.com/rust-lang/rust/commit/58a15f3d5a2213d37bbf653e4562c36a130f14ee"}, {"sha": "b33d2fede8ecebf3771fbe6863ec2220f507613c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b33d2fede8ecebf3771fbe6863ec2220f507613c", "html_url": "https://github.com/rust-lang/rust/commit/b33d2fede8ecebf3771fbe6863ec2220f507613c"}], "stats": {"total": 484, "additions": 187, "deletions": 297}, "files": [{"sha": "65195468ed3c055244cdb531dedc5bbabd804940", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fdc81262a5d44f10e335384b5d69b938d6d729c/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fdc81262a5d44f10e335384b5d69b938d6d729c/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=5fdc81262a5d44f10e335384b5d69b938d6d729c", "patch": "@@ -1166,7 +1166,7 @@ fn add_local_native_libraries(args: &mut ~[~str], sess: Session) {\n fn add_upstream_rust_crates(args: &mut ~[~str], sess: Session,\n                             dylib: bool, tmpdir: &Path) {\n     // Converts a library file-stem into a cc -l argument\n-    fn unlib(config: @session::config, stem: &str) -> ~str {\n+    fn unlib(config: @session::Config, stem: &str) -> ~str {\n         if stem.starts_with(\"lib\") &&\n             config.os != abi::OsWin32 {\n             stem.slice(3, stem.len()).to_owned()"}, {"sha": "43ecbccfd79dcf09fee86a83b3190b3b42c633e0", "filename": "src/librustc/back/rpath.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5fdc81262a5d44f10e335384b5d69b938d6d729c/src%2Flibrustc%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fdc81262a5d44f10e335384b5d69b938d6d729c/src%2Flibrustc%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Frpath.rs?ref=5fdc81262a5d44f10e335384b5d69b938d6d729c", "patch": "@@ -39,7 +39,7 @@ pub fn get_rpath_flags(sess: session::Session, out_filename: &Path) -> ~[~str] {\n \n     debug!(\"preparing the RPATH!\");\n \n-    let sysroot = sess.filesearch.sysroot();\n+    let sysroot = sess.filesearch.sysroot;\n     let output = out_filename;\n     let libs = sess.cstore.get_used_crates(cstore::RequireDynamic);\n     let libs = libs.move_iter().filter_map(|(_, l)| l.map(|p| p.clone())).collect();\n@@ -55,7 +55,7 @@ pub fn get_rpath_flags(sess: session::Session, out_filename: &Path) -> ~[~str] {\n \n fn get_sysroot_absolute_rt_lib(sess: session::Session) -> Path {\n     let r = filesearch::relative_target_lib_path(sess.opts.target_triple);\n-    let mut p = sess.filesearch.sysroot().join(&r);\n+    let mut p = sess.filesearch.sysroot.join(&r);\n     p.push(os::dll_filename(\"rustrt\"));\n     p\n }"}, {"sha": "b5dbf0e0c35c658bd7a5a820778f403a181d7cb7", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/5fdc81262a5d44f10e335384b5d69b938d6d729c/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fdc81262a5d44f10e335384b5d69b938d6d729c/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=5fdc81262a5d44f10e335384b5d69b938d6d729c", "patch": "@@ -62,11 +62,11 @@ pub enum PpMode {\n  */\n pub fn anon_src() -> @str { @\"<anon>\" }\n \n-pub fn source_name(input: &input) -> @str {\n+pub fn source_name(input: &Input) -> @str {\n     match *input {\n       // FIXME (#9639): This needs to handle non-utf8 paths\n-      file_input(ref ifile) => ifile.as_str().unwrap().to_managed(),\n-      str_input(_) => anon_src()\n+      FileInput(ref ifile) => ifile.as_str().unwrap().to_managed(),\n+      StrInput(_) => anon_src()\n     }\n }\n \n@@ -133,22 +133,22 @@ fn parse_cfgspecs(cfgspecs: ~[~str], demitter: @diagnostic::Emitter)\n     }).collect::<ast::CrateConfig>()\n }\n \n-pub enum input {\n+pub enum Input {\n     /// Load source from file\n-    file_input(Path),\n+    FileInput(Path),\n     /// The string is the source\n     // FIXME (#2319): Don't really want to box the source string\n-    str_input(@str)\n+    StrInput(@str)\n }\n \n-pub fn phase_1_parse_input(sess: Session, cfg: ast::CrateConfig, input: &input)\n+pub fn phase_1_parse_input(sess: Session, cfg: ast::CrateConfig, input: &Input)\n     -> ast::Crate {\n     time(sess.time_passes(), \"parsing\", (), |_| {\n         match *input {\n-            file_input(ref file) => {\n+            FileInput(ref file) => {\n                 parse::parse_crate_from_file(&(*file), cfg.clone(), sess.parse_sess)\n             }\n-            str_input(src) => {\n+            StrInput(src) => {\n                 parse::parse_crate_from_source_str(\n                     anon_src(), src, cfg.clone(), sess.parse_sess)\n             }\n@@ -444,7 +444,7 @@ pub fn stop_after_phase_5(sess: Session) -> bool {\n     return false;\n }\n \n-fn write_out_deps(sess: Session, input: &input, outputs: &OutputFilenames, crate: &ast::Crate)\n+fn write_out_deps(sess: Session, input: &Input, outputs: &OutputFilenames, crate: &ast::Crate)\n {\n     let lm = link::build_link_meta(sess, crate.attrs, &outputs.obj_filename,\n                                        &mut ::util::sha2::Sha256::new());\n@@ -460,12 +460,12 @@ fn write_out_deps(sess: Session, input: &input, outputs: &OutputFilenames, crate\n         (true, Some(ref filename)) => filename.clone(),\n         // Use default filename: crate source filename with extension replaced by \".d\"\n         (true, None) => match *input {\n-            file_input(ref input_path) => {\n+            FileInput(ref input_path) => {\n                 let filestem = input_path.filestem().expect(\"input file must have stem\");\n                 let filename = out_filenames[0].dir_path().join(filestem).with_extension(\"d\");\n                 filename\n             },\n-            str_input(..) => {\n+            StrInput(..) => {\n                 sess.warn(\"can not write --dep-info without a filename when compiling stdin.\");\n                 return;\n             },\n@@ -495,7 +495,7 @@ fn write_out_deps(sess: Session, input: &input, outputs: &OutputFilenames, crate\n     }\n }\n \n-pub fn compile_input(sess: Session, cfg: ast::CrateConfig, input: &input,\n+pub fn compile_input(sess: Session, cfg: ast::CrateConfig, input: &Input,\n                      outdir: &Option<Path>, output: &Option<Path>) {\n     // We need nested scopes here, because the intermediate results can keep\n     // large chunks of memory alive and we want to free them as soon as\n@@ -587,7 +587,7 @@ impl pprust::PpAnn for TypedAnnotation {\n \n pub fn pretty_print_input(sess: Session,\n                           cfg: ast::CrateConfig,\n-                          input: &input,\n+                          input: &Input,\n                           ppm: PpMode) {\n     let crate = phase_1_parse_input(sess, cfg.clone(), input);\n \n@@ -664,9 +664,9 @@ static architecture_abis : &'static [(&'static str, abi::Architecture)] = &'stat\n \n     (\"mips\",   abi::Mips)];\n \n-pub fn build_target_config(sopts: @session::options,\n+pub fn build_target_config(sopts: @session::Options,\n                            demitter: @diagnostic::Emitter)\n-                           -> @session::config {\n+                           -> @session::Config {\n     let os = match get_os(sopts.target_triple) {\n       Some(os) => os,\n       None => early_error(demitter, \"unknown operating system\")\n@@ -689,7 +689,7 @@ pub fn build_target_config(sopts: @session::options,\n       abi::Arm => arm::get_target_strs(target_triple, os),\n       abi::Mips => mips::get_target_strs(target_triple, os)\n     };\n-    let target_cfg = @session::config {\n+    let target_cfg = @session::Config {\n         os: os,\n         arch: arch,\n         target_strs: target_strs,\n@@ -714,7 +714,7 @@ pub fn host_triple() -> ~str {\n pub fn build_session_options(binary: ~str,\n                              matches: &getopts::Matches,\n                              demitter: @diagnostic::Emitter)\n-                             -> @session::options {\n+                             -> @session::Options {\n     let mut outputs = ~[];\n     if matches.opt_present(\"rlib\") {\n         outputs.push(session::OutputRlib)\n@@ -862,7 +862,7 @@ pub fn build_session_options(binary: ~str,\n                        matches.opt_present(\"crate-name\"),\n                        matches.opt_present(\"crate-file-name\"));\n \n-    let sopts = @session::options {\n+    let sopts = @session::Options {\n         outputs: outputs,\n         gc: gc,\n         optimize: opt_level,\n@@ -895,7 +895,7 @@ pub fn build_session_options(binary: ~str,\n     return sopts;\n }\n \n-pub fn build_session(sopts: @session::options, demitter: @diagnostic::Emitter)\n+pub fn build_session(sopts: @session::Options, demitter: @diagnostic::Emitter)\n                      -> Session {\n     let codemap = @codemap::CodeMap::new();\n     let diagnostic_handler =\n@@ -905,7 +905,7 @@ pub fn build_session(sopts: @session::options, demitter: @diagnostic::Emitter)\n     build_session_(sopts, codemap, demitter, span_diagnostic_handler)\n }\n \n-pub fn build_session_(sopts: @session::options,\n+pub fn build_session_(sopts: @session::Options,\n                       cm: @codemap::CodeMap,\n                       demitter: @diagnostic::Emitter,\n                       span_diagnostic_handler: @diagnostic::SpanHandler)\n@@ -914,7 +914,7 @@ pub fn build_session_(sopts: @session::options,\n     let p_s = parse::new_parse_sess_special_handler(span_diagnostic_handler,\n                                                     cm);\n     let cstore = @CStore::new(token::get_ident_interner());\n-    let filesearch = filesearch::mk_filesearch(\n+    let filesearch = @filesearch::FileSearch::new(\n         &sopts.maybe_sysroot,\n         sopts.target_triple,\n         sopts.addl_lib_search_paths);\n@@ -1046,7 +1046,7 @@ pub struct OutputFilenames {\n     obj_filename: Path\n }\n \n-pub fn build_output_filenames(input: &input,\n+pub fn build_output_filenames(input: &Input,\n                               odir: &Option<Path>,\n                               ofile: &Option<Path>,\n                               attrs: &[ast::Attribute],\n@@ -1074,15 +1074,15 @@ pub fn build_output_filenames(input: &input,\n           let dirpath = match *odir {\n               Some(ref d) => (*d).clone(),\n               None => match *input {\n-                  str_input(_) => os::getcwd(),\n-                  file_input(ref ifile) => (*ifile).dir_path()\n+                  StrInput(_) => os::getcwd(),\n+                  FileInput(ref ifile) => (*ifile).dir_path()\n               }\n           };\n \n           let mut stem = match *input {\n               // FIXME (#9639): This needs to handle non-utf8 paths\n-              file_input(ref ifile) => (*ifile).filestem_str().unwrap().to_managed(),\n-              str_input(_) => @\"rust_out\"\n+              FileInput(ref ifile) => (*ifile).filestem_str().unwrap().to_managed(),\n+              StrInput(_) => @\"rust_out\"\n           };\n \n           // If a crateid is present, we use it as the link name"}, {"sha": "ebd6c06e2433cd92be2c15550caac28a1952dd1c", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5fdc81262a5d44f10e335384b5d69b938d6d729c/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fdc81262a5d44f10e335384b5d69b938d6d729c/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=5fdc81262a5d44f10e335384b5d69b938d6d729c", "patch": "@@ -31,7 +31,7 @@ use syntax;\n use std::cell::{Cell, RefCell};\n use std::hashmap::{HashMap,HashSet};\n \n-pub struct config {\n+pub struct Config {\n     os: abi::Os,\n     arch: abi::Architecture,\n     target_strs: target_strs::t,\n@@ -134,7 +134,7 @@ pub enum OptLevel {\n }\n \n #[deriving(Clone)]\n-pub struct options {\n+pub struct Options {\n     // The crate config requested for the session, which may be combined\n     // with additional crate configurations during the compile process\n     outputs: ~[OutputStyle],\n@@ -176,11 +176,6 @@ pub struct options {\n     print_metas: (bool, bool, bool),\n }\n \n-pub struct crate_metadata {\n-    name: ~str,\n-    data: ~[u8]\n-}\n-\n // The type of entry function, so\n // users can have their own entry\n // functions that don't start a\n@@ -201,8 +196,8 @@ pub enum OutputStyle {\n }\n \n pub struct Session_ {\n-    targ_cfg: @config,\n-    opts: @options,\n+    targ_cfg: @Config,\n+    opts: @Options,\n     cstore: @metadata::cstore::CStore,\n     parse_sess: @ParseSess,\n     codemap: @codemap::CodeMap,\n@@ -375,8 +370,8 @@ impl Session_ {\n }\n \n /// Some reasonable defaults\n-pub fn basic_options() -> @options {\n-    @options {\n+pub fn basic_options() -> @Options {\n+    @Options {\n         outputs: ~[],\n         gc: false,\n         optimize: No,\n@@ -413,7 +408,7 @@ pub fn expect<T:Clone>(sess: Session, opt: Option<T>, msg: || -> ~str) -> T {\n     diagnostic::expect(sess.diagnostic(), opt, msg)\n }\n \n-pub fn building_library(options: &options, crate: &ast::Crate) -> bool {\n+pub fn building_library(options: &Options, crate: &ast::Crate) -> bool {\n     if options.test { return false }\n     for output in options.outputs.iter() {\n         match *output {"}, {"sha": "8e847238cffafa0702b56f2503f6cfaeb4930d24", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5fdc81262a5d44f10e335384b5d69b938d6d729c/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fdc81262a5d44f10e335384b5d69b938d6d729c/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=5fdc81262a5d44f10e335384b5d69b938d6d729c", "patch": "@@ -255,9 +255,9 @@ pub fn run_compiler(args: &[~str], demitter: @diagnostic::Emitter) {\n         let ifile = matches.free[0].as_slice();\n         if \"-\" == ifile {\n             let src = str::from_utf8_owned(io::stdin().read_to_end());\n-            d::str_input(src.to_managed())\n+            d::StrInput(src.to_managed())\n         } else {\n-            d::file_input(Path::new(ifile))\n+            d::FileInput(Path::new(ifile))\n         }\n       }\n       _ => d::early_error(demitter, \"multiple input filenames provided\")\n@@ -281,12 +281,12 @@ pub fn run_compiler(args: &[~str], demitter: @diagnostic::Emitter) {\n     let ls = matches.opt_present(\"ls\");\n     if ls {\n         match input {\n-          d::file_input(ref ifile) => {\n+          d::FileInput(ref ifile) => {\n             let mut stdout = io::stdout();\n             d::list_metadata(sess, &(*ifile),\n                                   &mut stdout as &mut io::Writer);\n           }\n-          d::str_input(_) => {\n+          d::StrInput(_) => {\n             d::early_error(demitter, \"can not list metadata for stdin\");\n           }\n         }\n@@ -332,12 +332,12 @@ pub fn run_compiler(args: &[~str], demitter: @diagnostic::Emitter) {\n }\n \n fn parse_crate_attrs(sess: session::Session,\n-                     input: &d::input) -> ~[ast::Attribute] {\n+                     input: &d::Input) -> ~[ast::Attribute] {\n     match *input {\n-        d::file_input(ref ifile) => {\n+        d::FileInput(ref ifile) => {\n             parse::parse_crate_attrs_from_file(ifile, ~[], sess.parse_sess)\n         }\n-        d::str_input(src) => {\n+        d::StrInput(src) => {\n             parse::parse_crate_attrs_from_source_str(\n                 d::anon_src(), src, ~[], sess.parse_sess)\n         }"}, {"sha": "f8e7a28d27708117066d7c43f7c2c26dd99ff7a2", "filename": "src/librustc/metadata/filesearch.rs", "status": "modified", "additions": 94, "deletions": 109, "changes": 203, "blob_url": "https://github.com/rust-lang/rust/blob/5fdc81262a5d44f10e335384b5d69b938d6d729c/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fdc81262a5d44f10e335384b5d69b938d6d729c/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs?ref=5fdc81262a5d44f10e335384b5d69b938d6d729c", "patch": "@@ -25,132 +25,117 @@ pub enum FileMatch { FileMatches, FileDoesntMatch }\n /// a file found in that directory.\n pub type pick<'a> = 'a |path: &Path| -> FileMatch;\n \n-pub fn pick_file(file: Path, path: &Path) -> Option<Path> {\n-    if path.filename() == Some(file.as_vec()) {\n-        Some(path.clone())\n-    } else {\n-        None\n-    }\n-}\n-\n-pub trait FileSearch {\n-    fn sysroot(&self) -> @Path;\n-    fn for_each_lib_search_path(&self, f: |&Path| -> FileMatch);\n-    fn get_target_lib_path(&self) -> Path;\n-    fn get_target_lib_file_path(&self, file: &Path) -> Path;\n+pub struct FileSearch {\n+    sysroot: @Path,\n+    addl_lib_search_paths: @RefCell<HashSet<Path>>,\n+    target_triple: ~str\n }\n \n-pub fn mk_filesearch(maybe_sysroot: &Option<@Path>,\n-                     target_triple: &str,\n-                     addl_lib_search_paths: @RefCell<HashSet<Path>>)\n-                  -> @FileSearch {\n-    struct FileSearchImpl {\n-        sysroot: @Path,\n-        addl_lib_search_paths: @RefCell<HashSet<Path>>,\n-        target_triple: ~str\n-    }\n-    impl FileSearch for FileSearchImpl {\n-        fn sysroot(&self) -> @Path { self.sysroot }\n-\n-        fn for_each_lib_search_path(&self, f: |&Path| -> FileMatch) {\n-            let mut visited_dirs = HashSet::new();\n-            let mut found = false;\n-\n-            let addl_lib_search_paths = self.addl_lib_search_paths.borrow();\n-            debug!(\"filesearch: searching additional lib search paths [{:?}]\",\n-                   addl_lib_search_paths.get().len());\n-            for path in addl_lib_search_paths.get().iter() {\n-                match f(path) {\n-                    FileMatches => found = true,\n-                    FileDoesntMatch => ()\n-                }\n-                visited_dirs.insert(path.as_vec().to_owned());\n+impl FileSearch {\n+    pub fn for_each_lib_search_path(&self, f: |&Path| -> FileMatch) {\n+        let mut visited_dirs = HashSet::new();\n+        let mut found = false;\n+\n+        let addl_lib_search_paths = self.addl_lib_search_paths.borrow();\n+        debug!(\"filesearch: searching additional lib search paths [{:?}]\",\n+               addl_lib_search_paths.get().len());\n+        for path in addl_lib_search_paths.get().iter() {\n+            match f(path) {\n+                FileMatches => found = true,\n+                FileDoesntMatch => ()\n             }\n+            visited_dirs.insert(path.as_vec().to_owned());\n+        }\n \n-            debug!(\"filesearch: searching target lib path\");\n-            let tlib_path = make_target_lib_path(self.sysroot,\n-                                        self.target_triple);\n-            if !visited_dirs.contains_equiv(&tlib_path.as_vec()) {\n-                match f(&tlib_path) {\n-                    FileMatches => found = true,\n-                    FileDoesntMatch => ()\n-                }\n+        debug!(\"filesearch: searching target lib path\");\n+        let tlib_path = make_target_lib_path(self.sysroot,\n+                                    self.target_triple);\n+        if !visited_dirs.contains_equiv(&tlib_path.as_vec()) {\n+            match f(&tlib_path) {\n+                FileMatches => found = true,\n+                FileDoesntMatch => ()\n             }\n-            visited_dirs.insert(tlib_path.as_vec().to_owned());\n-            // Try RUST_PATH\n-            if !found {\n-                let rustpath = rust_path();\n-                for path in rustpath.iter() {\n-                    let tlib_path = make_rustpkg_target_lib_path(path, self.target_triple);\n-                    debug!(\"is {} in visited_dirs? {:?}\", tlib_path.display(),\n-                            visited_dirs.contains_equiv(&tlib_path.as_vec().to_owned()));\n-\n-                    if !visited_dirs.contains_equiv(&tlib_path.as_vec()) {\n-                        visited_dirs.insert(tlib_path.as_vec().to_owned());\n-                        // Don't keep searching the RUST_PATH if one match turns up --\n-                        // if we did, we'd get a \"multiple matching crates\" error\n-                        match f(&tlib_path) {\n-                           FileMatches => {\n-                               break;\n-                           }\n-                           FileDoesntMatch => ()\n-                        }\n+        }\n+        visited_dirs.insert(tlib_path.as_vec().to_owned());\n+        // Try RUST_PATH\n+        if !found {\n+            let rustpath = rust_path();\n+            for path in rustpath.iter() {\n+                let tlib_path = make_rustpkg_target_lib_path(path, self.target_triple);\n+                debug!(\"is {} in visited_dirs? {:?}\", tlib_path.display(),\n+                        visited_dirs.contains_equiv(&tlib_path.as_vec().to_owned()));\n+\n+                if !visited_dirs.contains_equiv(&tlib_path.as_vec()) {\n+                    visited_dirs.insert(tlib_path.as_vec().to_owned());\n+                    // Don't keep searching the RUST_PATH if one match turns up --\n+                    // if we did, we'd get a \"multiple matching crates\" error\n+                    match f(&tlib_path) {\n+                       FileMatches => {\n+                           break;\n+                       }\n+                       FileDoesntMatch => ()\n                     }\n                 }\n             }\n         }\n-        fn get_target_lib_path(&self) -> Path {\n-            make_target_lib_path(self.sysroot, self.target_triple)\n-        }\n-        fn get_target_lib_file_path(&self, file: &Path) -> Path {\n-            let mut p = self.get_target_lib_path();\n-            p.push(file);\n-            p\n-        }\n     }\n \n-    let sysroot = get_sysroot(maybe_sysroot);\n-    debug!(\"using sysroot = {}\", sysroot.display());\n-    @FileSearchImpl {\n-        sysroot: sysroot,\n-        addl_lib_search_paths: addl_lib_search_paths,\n-        target_triple: target_triple.to_owned()\n-    } as @FileSearch\n-}\n+    pub fn get_target_lib_path(&self) -> Path {\n+        make_target_lib_path(self.sysroot, self.target_triple)\n+    }\n \n-pub fn search(filesearch: @FileSearch, pick: pick) {\n-    filesearch.for_each_lib_search_path(|lib_search_path| {\n-        debug!(\"searching {}\", lib_search_path.display());\n-        match io::result(|| fs::readdir(lib_search_path)) {\n-            Ok(files) => {\n-                let mut rslt = FileDoesntMatch;\n-                let is_rlib = |p: & &Path| {\n-                    p.extension_str() == Some(\"rlib\")\n-                };\n-                // Reading metadata out of rlibs is faster, and if we find both\n-                // an rlib and a dylib we only read one of the files of\n-                // metadata, so in the name of speed, bring all rlib files to\n-                // the front of the search list.\n-                let files1 = files.iter().filter(|p| is_rlib(p));\n-                let files2 = files.iter().filter(|p| !is_rlib(p));\n-                for path in files1.chain(files2) {\n-                    debug!(\"testing {}\", path.display());\n-                    let maybe_picked = pick(path);\n-                    match maybe_picked {\n-                        FileMatches => {\n-                            debug!(\"picked {}\", path.display());\n-                            rslt = FileMatches;\n-                        }\n-                        FileDoesntMatch => {\n-                            debug!(\"rejected {}\", path.display());\n+    pub fn get_target_lib_file_path(&self, file: &Path) -> Path {\n+        let mut p = self.get_target_lib_path();\n+        p.push(file);\n+        p\n+    }\n+\n+    pub fn search(&self, pick: pick) {\n+        self.for_each_lib_search_path(|lib_search_path| {\n+            debug!(\"searching {}\", lib_search_path.display());\n+            match io::result(|| fs::readdir(lib_search_path)) {\n+                Ok(files) => {\n+                    let mut rslt = FileDoesntMatch;\n+                    let is_rlib = |p: & &Path| {\n+                        p.extension_str() == Some(\"rlib\")\n+                    };\n+                    // Reading metadata out of rlibs is faster, and if we find both\n+                    // an rlib and a dylib we only read one of the files of\n+                    // metadata, so in the name of speed, bring all rlib files to\n+                    // the front of the search list.\n+                    let files1 = files.iter().filter(|p| is_rlib(p));\n+                    let files2 = files.iter().filter(|p| !is_rlib(p));\n+                    for path in files1.chain(files2) {\n+                        debug!(\"testing {}\", path.display());\n+                        let maybe_picked = pick(path);\n+                        match maybe_picked {\n+                            FileMatches => {\n+                                debug!(\"picked {}\", path.display());\n+                                rslt = FileMatches;\n+                            }\n+                            FileDoesntMatch => {\n+                                debug!(\"rejected {}\", path.display());\n+                            }\n                         }\n                     }\n+                    rslt\n                 }\n-                rslt\n+                Err(..) => FileDoesntMatch,\n             }\n-            Err(..) => FileDoesntMatch,\n+        });\n+    }\n+\n+    pub fn new(maybe_sysroot: &Option<@Path>,\n+               target_triple: &str,\n+               addl_lib_search_paths: @RefCell<HashSet<Path>>) -> FileSearch {\n+        let sysroot = get_sysroot(maybe_sysroot);\n+        debug!(\"using sysroot = {}\", sysroot.display());\n+        FileSearch{\n+            sysroot: sysroot,\n+            addl_lib_search_paths: addl_lib_search_paths,\n+            target_triple: target_triple.to_owned()\n         }\n-    });\n+    }\n }\n \n pub fn relative_target_lib_path(target_triple: &str) -> Path {"}, {"sha": "72f2e1baddd7bdd7adb4a2d742382c8b49404358", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5fdc81262a5d44f10e335384b5d69b938d6d729c/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fdc81262a5d44f10e335384b5d69b938d6d729c/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=5fdc81262a5d44f10e335384b5d69b938d6d729c", "patch": "@@ -17,7 +17,6 @@ use metadata::cstore::{MetadataBlob, MetadataVec, MetadataArchive};\n use metadata::decoder;\n use metadata::encoder;\n use metadata::filesearch::{FileMatches, FileDoesntMatch};\n-use metadata::filesearch;\n use syntax::codemap::Span;\n use syntax::diagnostic::SpanHandler;\n use syntax::parse::token::IdentInterner;\n@@ -89,7 +88,7 @@ impl Context {\n         let rlib_prefix = format!(\"lib{}-\", crate_name);\n \n         let mut matches = ~[];\n-        filesearch::search(filesearch, |path| {\n+        filesearch.search(|path| {\n             match path.filename_str() {\n                 None => FileDoesntMatch,\n                 Some(file) => {"}, {"sha": "8501a01d34bcf140073fddf7cf357497801b6942", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fdc81262a5d44f10e335384b5d69b938d6d729c/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fdc81262a5d44f10e335384b5d69b938d6d729c/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=5fdc81262a5d44f10e335384b5d69b938d6d729c", "patch": "@@ -42,15 +42,15 @@ pub struct CrateAnalysis {\n fn get_ast_and_resolve(cpath: &Path,\n                        libs: HashSet<Path>, cfgs: ~[~str]) -> (DocContext, CrateAnalysis) {\n     use syntax::codemap::dummy_spanned;\n-    use rustc::driver::driver::{file_input, build_configuration,\n+    use rustc::driver::driver::{FileInput, build_configuration,\n                                 phase_1_parse_input,\n                                 phase_2_configure_and_expand,\n                                 phase_3_run_analysis_passes};\n \n     let parsesess = parse::new_parse_sess(None);\n-    let input = file_input(cpath.clone());\n+    let input = FileInput(cpath.clone());\n \n-    let sessopts = @driver::session::options {\n+    let sessopts = @driver::session::Options {\n         binary: ~\"rustdoc\",\n         maybe_sysroot: Some(@os::self_exe_path().unwrap().dir_path()),\n         addl_lib_search_paths: @RefCell::new(libs),"}, {"sha": "53a1e5697ef340cb403dd1833ccf145cb3c6b802", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5fdc81262a5d44f10e335384b5d69b938d6d729c/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fdc81262a5d44f10e335384b5d69b938d6d729c/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=5fdc81262a5d44f10e335384b5d69b938d6d729c", "patch": "@@ -34,11 +34,11 @@ use visit_ast::RustdocVisitor;\n \n pub fn run(input: &str, matches: &getopts::Matches) -> int {\n     let parsesess = parse::new_parse_sess(None);\n-    let input = driver::file_input(Path::new(input));\n+    let input = driver::FileInput(Path::new(input));\n     let libs = matches.opt_strs(\"L\").map(|s| Path::new(s.as_slice()));\n     let libs = @RefCell::new(libs.move_iter().collect());\n \n-    let sessopts = @session::options {\n+    let sessopts = @session::Options {\n         binary: ~\"rustdoc\",\n         maybe_sysroot: Some(@os::self_exe_path().unwrap().dir_path()),\n         addl_lib_search_paths: libs,\n@@ -97,9 +97,9 @@ pub fn run(input: &str, matches: &getopts::Matches) -> int {\n fn runtest(test: &str, cratename: &str, libs: HashSet<Path>) {\n     let test = maketest(test, cratename);\n     let parsesess = parse::new_parse_sess(None);\n-    let input = driver::str_input(test);\n+    let input = driver::StrInput(test);\n \n-    let sessopts = @session::options {\n+    let sessopts = @session::Options {\n         binary: ~\"rustdoctest\",\n         maybe_sysroot: Some(@os::self_exe_path().unwrap().dir_path()),\n         addl_lib_search_paths: @RefCell::new(libs),"}, {"sha": "ac94c477e7836bfe2b4e578423f1d6af5a98b873", "filename": "src/librustpkg/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fdc81262a5d44f10e335384b5d69b938d6d729c/src%2Flibrustpkg%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fdc81262a5d44f10e335384b5d69b938d6d729c/src%2Flibrustpkg%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Flib.rs?ref=5fdc81262a5d44f10e335384b5d69b938d6d729c", "patch": "@@ -107,13 +107,13 @@ impl<'a> PkgScript<'a> {\n         // Build the rustc session data structures to pass\n         // to the compiler\n         debug!(\"pkgscript parse: {}\", sysroot.display());\n-        let options = @session::options {\n+        let options = @session::Options {\n             binary: binary,\n             maybe_sysroot: Some(@sysroot),\n             outputs: ~[session::OutputExecutable],\n             .. (*session::basic_options()).clone()\n         };\n-        let input = driver::file_input(script.clone());\n+        let input = driver::FileInput(script.clone());\n         let sess = driver::build_session(options,\n                                          @diagnostic::DefaultEmitter as\n                                             @diagnostic::Emitter);\n@@ -146,7 +146,7 @@ impl<'a> PkgScript<'a> {\n         let (crate, ast_map) = self.crate_and_map.take_unwrap();\n         let crate = util::ready_crate(sess, crate);\n         debug!(\"Building output filenames with script name {}\",\n-               driver::source_name(&driver::file_input(self.input.clone())));\n+               driver::source_name(&driver::FileInput(self.input.clone())));\n         let exe = self.build_dir.join(\"pkg\" + util::exe_suffix());\n         util::compile_crate_from_input(&self.input,\n                                        exec,"}, {"sha": "4d8f5c668b74fd5645a12a7020859dd6cb06b205", "filename": "src/librustpkg/util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fdc81262a5d44f10e335384b5d69b938d6d729c/src%2Flibrustpkg%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fdc81262a5d44f10e335384b5d69b938d6d729c/src%2Flibrustpkg%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Futil.rs?ref=5fdc81262a5d44f10e335384b5d69b938d6d729c", "patch": "@@ -171,7 +171,7 @@ pub fn compile_input(context: &BuildContext,\n                      opt: session::OptLevel,\n                      what: OutputType) -> Option<Path> {\n     assert!(in_file.components().nth(1).is_some());\n-    let input = driver::file_input(in_file.clone());\n+    let input = driver::FileInput(in_file.clone());\n     debug!(\"compile_input: {} / {:?}\", in_file.display(), what);\n     // tjc: by default, use the package ID name as the link name\n     // not sure if we should support anything else\n@@ -228,7 +228,7 @@ pub fn compile_input(context: &BuildContext,\n \n     debug!(\"Output type = {:?}\", output_type);\n \n-    let options = @session::options {\n+    let options = @session::Options {\n         optimize: opt,\n         test: what == Test || what == Bench,\n         maybe_sysroot: Some(sysroot_to_use),\n@@ -373,7 +373,7 @@ pub fn compile_crate_from_input(input: &Path,\n \n     // bad copy\n     debug!(\"out_dir = {}\", out_dir.display());\n-    let file_input = driver::file_input(input.clone());\n+    let file_input = driver::FileInput(input.clone());\n     let mut outputs = driver::build_output_filenames(&file_input,\n                                                      &Some(out_dir.clone()), &None,\n                                                      crate.attrs, sess);"}, {"sha": "800172daf1500b7dfa39a6d1290a075b59c01335", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 15, "deletions": 106, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/5fdc81262a5d44f10e335384b5d69b938d6d729c/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fdc81262a5d44f10e335384b5d69b938d6d729c/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=5fdc81262a5d44f10e335384b5d69b938d6d729c", "patch": "@@ -1195,123 +1195,32 @@ pub enum InlinedItem {\n \n #[cfg(test)]\n mod test {\n+    use extra;\n+    use codemap::*;\n     use super::*;\n \n     fn is_freeze<T: Freeze>() {}\n \n     // Assert that the AST remains Freeze (#10693).\n-    #[test] fn ast_is_freeze() {\n+    #[test]\n+    fn ast_is_freeze() {\n         is_freeze::<Item>();\n     }\n-}\n-\n-/* hold off on tests ... they appear in a later merge.\n-#[cfg(test)]\n-mod test {\n-    use std::option::{None, Option, Some};\n-    use std::uint;\n-    use extra;\n-    use codemap::*;\n-    use super::*;\n-\n-\n-    #[test] fn xorpush_test () {\n-        let mut s = ~[];\n-        xorPush(&mut s,14);\n-        assert_eq!(s,~[14]);\n-        xorPush(&mut s,14);\n-        assert_eq!(s,~[]);\n-        xorPush(&mut s,14);\n-        assert_eq!(s,~[14]);\n-        xorPush(&mut s,15);\n-        assert_eq!(s,~[14,15]);\n-        xorPush (&mut s,16);\n-        assert_eq! (s,~[14,15,16]);\n-        xorPush (&mut s,16);\n-        assert_eq! (s,~[14,15]);\n-        xorPush (&mut s,15);\n-        assert_eq! (s,~[14]);\n-    }\n-\n-    #[test] fn test_marksof () {\n-        let stopname = uints_to_name(&~[12,14,78]);\n-        assert_eq!(s,~[]);\n-        xorPush(&mut s,14);\n-        assert_eq!(s,~[14]);\n-        xorPush(&mut s,15);\n-        assert_eq!(s,~[14,15]);\n-        xorPush (&mut s,16);\n-        assert_eq! (s,~[14,15,16]);\n-        xorPush (&mut s,16);\n-        assert_eq! (s,~[14,15]);\n-        xorPush (&mut s,15);\n-        assert_eq! (s,~[14]);\n-    }\n-\n-    #[test] fn test_marksof () {\n-        let stopname = uints_to_name(&~[12,14,78]);\n-        let name1 = uints_to_name(&~[4,9,7]);\n-        assert_eq!(marksof (MT,stopname),~[]);\n-        assert_eq! (marksof (Mark (4,@Mark(98,@MT)),stopname),~[4,98]);\n-        // does xoring work?\n-        assert_eq! (marksof (Mark (5, @Mark (5, @Mark (16,@MT))),stopname),\n-                     ~[16]);\n-        // does nested xoring work?\n-        assert_eq! (marksof (Mark (5,\n-                                    @Mark (10,\n-                                           @Mark (10,\n-                                                  @Mark (5,\n-                                                         @Mark (16,@MT))))),\n-                              stopname),\n-                     ~[16]);\n-        // stop has no effect on marks\n-        assert_eq! (marksof (Mark (9, @Mark (14, @Mark (12, @MT))),stopname),\n-                     ~[9,14,12]);\n-        // rename where stop doesn't match:\n-        assert_eq! (marksof (Mark (9, @Rename\n-                                    (name1,\n-                                     @Mark (4, @MT),\n-                                     uints_to_name(&~[100,101,102]),\n-                                     @Mark (14, @MT))),\n-                              stopname),\n-                     ~[9,14]);\n-        // rename where stop does match\n-        ;\n-        assert_eq! (marksof (Mark(9, @Rename (name1,\n-                                               @Mark (4, @MT),\n-                                               stopname,\n-                                               @Mark (14, @MT))),\n-                              stopname),\n-                     ~[9]);\n-    }\n \n     // are ASTs encodable?\n-    #[test] fn check_asts_encodable() {\n-        let bogus_span = span {lo:BytePos(10),\n-                               hi:BytePos(20),\n-                               expn_info:None};\n-        let e : crate =\n-            spanned{\n-            node: crate_{\n-                module: Mod {view_items: ~[], items: ~[]},\n-                attrs: ~[],\n-                config: ~[]\n+    #[test]\n+    fn check_asts_encodable() {\n+        let e = Crate {\n+            module: Mod {view_items: ~[], items: ~[]},\n+            attrs: ~[],\n+            config: ~[],\n+            span: Span {\n+                lo: BytePos(10),\n+                hi: BytePos(20),\n+                expn_info: None,\n             },\n-            span: bogus_span};\n+        };\n         // doesn't matter which encoder we use....\n         let _f = (@e as @extra::serialize::Encodable<extra::json::Encoder>);\n     }\n-\n-\n }\n-\n-*/\n-//\n-// Local Variables:\n-// mode: rust\n-// fill-column: 78;\n-// indent-tabs-mode: nil\n-// c-basic-offset: 4\n-// buffer-file-coding-system: utf-8-unix\n-// End:\n-//"}, {"sha": "89aa03a46baaef0da69c895d5db4e1995be4ec64", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/5fdc81262a5d44f10e335384b5d69b938d6d729c/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fdc81262a5d44f10e335384b5d69b938d6d729c/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=5fdc81262a5d44f10e335384b5d69b938d6d729c", "patch": "@@ -872,9 +872,11 @@ pub fn marksof(ctxt: SyntaxContext, stopname: Name, table: &SCTable) -> ~[Mrk] {\n             table.get()[loopvar]\n         };\n         match table_entry {\n-            EmptyCtxt => {return result;},\n-            Mark(mark,tl) => {\n-                xorPush(&mut result,mark);\n+            EmptyCtxt => {\n+                return result;\n+            },\n+            Mark(mark, tl) => {\n+                xorPush(&mut result, mark);\n                 loopvar = tl;\n             },\n             Rename(_,name,tl) => {\n@@ -980,20 +982,20 @@ mod test {\n \n     #[test] fn xorpush_test () {\n         let mut s = ~[];\n-        xorPush(&mut s,14);\n-        assert_eq!(s.clone(),~[14]);\n-        xorPush(&mut s,14);\n-        assert_eq!(s.clone(),~[]);\n-        xorPush(&mut s,14);\n-        assert_eq!(s.clone(),~[14]);\n-        xorPush(&mut s,15);\n-        assert_eq!(s.clone(),~[14,15]);\n-        xorPush (&mut s,16);\n-        assert_eq!(s.clone(),~[14,15,16]);\n-        xorPush (&mut s,16);\n-        assert_eq!(s.clone(),~[14,15]);\n-        xorPush (&mut s,15);\n-        assert_eq!(s.clone(),~[14]);\n+        xorPush(&mut s, 14);\n+        assert_eq!(s.clone(), ~[14]);\n+        xorPush(&mut s, 14);\n+        assert_eq!(s.clone(), ~[]);\n+        xorPush(&mut s, 14);\n+        assert_eq!(s.clone(), ~[14]);\n+        xorPush(&mut s, 15);\n+        assert_eq!(s.clone(), ~[14, 15]);\n+        xorPush(&mut s, 16);\n+        assert_eq!(s.clone(), ~[14, 15, 16]);\n+        xorPush(&mut s, 16);\n+        assert_eq!(s.clone(), ~[14, 15]);\n+        xorPush(&mut s, 15);\n+        assert_eq!(s.clone(), ~[14]);\n     }\n \n     fn id(n: Name, s: SyntaxContext) -> Ident {"}, {"sha": "78328efdd0b9d10bdeca0505b4386705d05ebaa5", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fdc81262a5d44f10e335384b5d69b938d6d729c/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fdc81262a5d44f10e335384b5d69b938d6d729c/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=5fdc81262a5d44f10e335384b5d69b938d6d729c", "patch": "@@ -418,7 +418,7 @@ mod test {\n \n     #[test] fn string_to_tts_1 () {\n         let tts = string_to_tts(@\"fn a (b : int) { b; }\");\n-        assert_eq!(to_json_str(@tts),\n+        assert_eq!(to_json_str(&tts),\n         ~\"[\\\n     {\\\n         \\\"variant\\\":\\\"TTTok\\\",\\"}]}