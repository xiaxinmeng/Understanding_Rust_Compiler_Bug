{"sha": "8098f5faa880df18b0d7c83fdf5df8211a9e8dee", "node_id": "C_kwDOAAsO6NoAKDgwOThmNWZhYTg4MGRmMThiMGQ3YzgzZmRmNWRmODIxMWE5ZThkZWU", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-07-24T12:58:10Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-07-24T12:58:10Z"}, "message": "Remove Clean trait implementation for FieldDef", "tree": {"sha": "909ea160d16d4276dac7011606c497354bcc6be7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/909ea160d16d4276dac7011606c497354bcc6be7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8098f5faa880df18b0d7c83fdf5df8211a9e8dee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8098f5faa880df18b0d7c83fdf5df8211a9e8dee", "html_url": "https://github.com/rust-lang/rust/commit/8098f5faa880df18b0d7c83fdf5df8211a9e8dee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8098f5faa880df18b0d7c83fdf5df8211a9e8dee/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4151a41a0b275dee59ffbbc115e7bfc5be8a8c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4151a41a0b275dee59ffbbc115e7bfc5be8a8c3", "html_url": "https://github.com/rust-lang/rust/commit/b4151a41a0b275dee59ffbbc115e7bfc5be8a8c3"}], "stats": {"total": 55, "additions": 28, "deletions": 27}, "files": [{"sha": "4b91f7ba096cb4fc9c9c4b11103f9845290178ad", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8098f5faa880df18b0d7c83fdf5df8211a9e8dee/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8098f5faa880df18b0d7c83fdf5df8211a9e8dee/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=8098f5faa880df18b0d7c83fdf5df8211a9e8dee", "patch": "@@ -16,8 +16,8 @@ use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::{kw, sym, Symbol};\n \n use crate::clean::{\n-    self, clean_fn_decl_from_did_and_sig, clean_middle_ty, clean_ty, clean_ty_generics, utils,\n-    Attributes, AttributesExt, Clean, ImplKind, ItemId, Type, Visibility,\n+    self, clean_fn_decl_from_did_and_sig, clean_middle_field, clean_middle_ty, clean_ty,\n+    clean_ty_generics, utils, Attributes, AttributesExt, Clean, ImplKind, ItemId, Type, Visibility,\n };\n use crate::core::DocContext;\n use crate::formats::item_type::ItemType;\n@@ -246,7 +246,7 @@ fn build_struct(cx: &mut DocContext<'_>, did: DefId) -> clean::Struct {\n     clean::Struct {\n         struct_type: variant.ctor_kind,\n         generics: clean_ty_generics(cx, cx.tcx.generics_of(did), predicates),\n-        fields: variant.fields.iter().map(|x| x.clean(cx)).collect(),\n+        fields: variant.fields.iter().map(|x| clean_middle_field(x, cx)).collect(),\n     }\n }\n \n@@ -255,7 +255,7 @@ fn build_union(cx: &mut DocContext<'_>, did: DefId) -> clean::Union {\n     let variant = cx.tcx.adt_def(did).non_enum_variant();\n \n     let generics = clean_ty_generics(cx, cx.tcx.generics_of(did), predicates);\n-    let fields = variant.fields.iter().map(|x| x.clean(cx)).collect();\n+    let fields = variant.fields.iter().map(|x| clean_middle_field(x, cx)).collect();\n     clean::Union { generics, fields }\n }\n "}, {"sha": "4c790e809c4a90c0da7d9e60fa3cc944367d8bef", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 24, "deletions": 23, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/8098f5faa880df18b0d7c83fdf5df8211a9e8dee/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8098f5faa880df18b0d7c83fdf5df8211a9e8dee/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=8098f5faa880df18b0d7c83fdf5df8211a9e8dee", "patch": "@@ -1774,25 +1774,26 @@ impl<'tcx> Clean<'tcx, Constant> for ty::Const<'tcx> {\n     }\n }\n \n-impl<'tcx> Clean<'tcx, Item> for hir::FieldDef<'tcx> {\n-    fn clean(&self, cx: &mut DocContext<'tcx>) -> Item {\n-        let def_id = cx.tcx.hir().local_def_id(self.hir_id).to_def_id();\n-        clean_field(def_id, self.ident.name, clean_ty(self.ty, cx), cx)\n-    }\n+pub(crate) fn clean_field<'tcx>(field: &hir::FieldDef<'tcx>, cx: &mut DocContext<'tcx>) -> Item {\n+    let def_id = cx.tcx.hir().local_def_id(field.hir_id).to_def_id();\n+    clean_field_with_def_id(def_id, field.ident.name, clean_ty(field.ty, cx), cx)\n }\n \n-impl<'tcx> Clean<'tcx, Item> for ty::FieldDef {\n-    fn clean(&self, cx: &mut DocContext<'tcx>) -> Item {\n-        clean_field(\n-            self.did,\n-            self.name,\n-            clean_middle_ty(cx.tcx.type_of(self.did), cx, Some(self.did)),\n-            cx,\n-        )\n-    }\n+pub(crate) fn clean_middle_field<'tcx>(field: &ty::FieldDef, cx: &mut DocContext<'tcx>) -> Item {\n+    clean_field_with_def_id(\n+        field.did,\n+        field.name,\n+        clean_middle_ty(cx.tcx.type_of(field.did), cx, Some(field.did)),\n+        cx,\n+    )\n }\n \n-fn clean_field(def_id: DefId, name: Symbol, ty: Type, cx: &mut DocContext<'_>) -> Item {\n+pub(crate) fn clean_field_with_def_id(\n+    def_id: DefId,\n+    name: Symbol,\n+    ty: Type,\n+    cx: &mut DocContext<'_>,\n+) -> Item {\n     let what_rustc_thinks =\n         Item::from_def_id_and_parts(def_id, Some(name), StructFieldItem(ty), cx);\n     if is_field_vis_inherited(cx.tcx, def_id) {\n@@ -1830,27 +1831,27 @@ impl<'tcx> Clean<'tcx, VariantStruct> for rustc_hir::VariantData<'tcx> {\n     fn clean(&self, cx: &mut DocContext<'tcx>) -> VariantStruct {\n         VariantStruct {\n             struct_type: CtorKind::from_hir(self),\n-            fields: self.fields().iter().map(|x| x.clean(cx)).collect(),\n+            fields: self.fields().iter().map(|x| clean_field(x, cx)).collect(),\n         }\n     }\n }\n \n impl<'tcx> Clean<'tcx, Vec<Item>> for hir::VariantData<'tcx> {\n     fn clean(&self, cx: &mut DocContext<'tcx>) -> Vec<Item> {\n-        self.fields().iter().map(|x| x.clean(cx)).collect()\n+        self.fields().iter().map(|x| clean_field(x, cx)).collect()\n     }\n }\n \n impl<'tcx> Clean<'tcx, Item> for ty::VariantDef {\n     fn clean(&self, cx: &mut DocContext<'tcx>) -> Item {\n         let kind = match self.ctor_kind {\n             CtorKind::Const => Variant::CLike,\n-            CtorKind::Fn => {\n-                Variant::Tuple(self.fields.iter().map(|field| field.clean(cx)).collect())\n-            }\n+            CtorKind::Fn => Variant::Tuple(\n+                self.fields.iter().map(|field| clean_middle_field(field, cx)).collect(),\n+            ),\n             CtorKind::Fictive => Variant::Struct(VariantStruct {\n                 struct_type: CtorKind::Fictive,\n-                fields: self.fields.iter().map(|field| field.clean(cx)).collect(),\n+                fields: self.fields.iter().map(|field| clean_middle_field(field, cx)).collect(),\n             }),\n         };\n         let what_rustc_thinks =\n@@ -1970,12 +1971,12 @@ fn clean_maybe_renamed_item<'tcx>(\n             }),\n             ItemKind::Union(ref variant_data, generics) => UnionItem(Union {\n                 generics: generics.clean(cx),\n-                fields: variant_data.fields().iter().map(|x| x.clean(cx)).collect(),\n+                fields: variant_data.fields().iter().map(|x| clean_field(x, cx)).collect(),\n             }),\n             ItemKind::Struct(ref variant_data, generics) => StructItem(Struct {\n                 struct_type: CtorKind::from_hir(variant_data),\n                 generics: generics.clean(cx),\n-                fields: variant_data.fields().iter().map(|x| x.clean(cx)).collect(),\n+                fields: variant_data.fields().iter().map(|x| clean_field(x, cx)).collect(),\n             }),\n             ItemKind::Impl(impl_) => return clean_impl(impl_, item.hir_id(), cx),\n             // proc macros can have a name set by attributes"}]}