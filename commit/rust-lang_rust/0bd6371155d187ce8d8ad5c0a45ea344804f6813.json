{"sha": "0bd6371155d187ce8d8ad5c0a45ea344804f6813", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiZDYzNzExNTVkMTg3Y2U4ZDhhZDVjMGE0NWVhMzQ0ODA0ZjY4MTM=", "commit": {"author": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2012-07-31T20:53:00Z"}, "committer": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2012-07-31T21:07:59Z"}, "message": "Now you can use whatever delimiter you want to invoke syntax extensions.", "tree": {"sha": "c288b2de08704257d34c5bc416e902ae6ffd830f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c288b2de08704257d34c5bc416e902ae6ffd830f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0bd6371155d187ce8d8ad5c0a45ea344804f6813", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0bd6371155d187ce8d8ad5c0a45ea344804f6813", "html_url": "https://github.com/rust-lang/rust/commit/0bd6371155d187ce8d8ad5c0a45ea344804f6813", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0bd6371155d187ce8d8ad5c0a45ea344804f6813/comments", "author": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e7fb8e8f5c7175bb18e38c266de3ccce16189bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e7fb8e8f5c7175bb18e38c266de3ccce16189bb", "html_url": "https://github.com/rust-lang/rust/commit/8e7fb8e8f5c7175bb18e38c266de3ccce16189bb"}], "stats": {"total": 51, "additions": 34, "deletions": 17}, "files": [{"sha": "b9e5fadeb818d20edb42f9902722730368cc046c", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/0bd6371155d187ce8d8ad5c0a45ea344804f6813/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bd6371155d187ce8d8ad5c0a45ea344804f6813/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=0bd6371155d187ce8d8ad5c0a45ea344804f6813", "patch": "@@ -883,9 +883,15 @@ class parser {\n             /* `!`, as an operator, is prefix, so we know this isn't that */\n             if self.token == token::NOT {\n                 self.bump();\n-                let tts = self.parse_unspanned_seq(\n-                    token::LBRACE, token::RBRACE, seq_sep_none(),\n-                    |p| p.parse_token_tree());\n+                let tts = alt self.token {\n+                  token::LPAREN | token::LBRACE | token::LBRACKET {\n+                    let ket = token::flip_delimiter(self.token);\n+                    self.parse_unspanned_seq(copy self.token, ket,\n+                                             seq_sep_none(),\n+                                             |p| p.parse_token_tree())\n+                  }\n+                  _ { self.fatal(~\"expected open delimiter\"); }\n+                };\n                 let hi = self.span.hi;\n \n                 ret pexpr(self.mk_mac_expr(lo, hi, mac_invoc_tt(pth, tts)));\n@@ -1083,16 +1089,6 @@ class parser {\n     }\n \n     fn parse_token_tree() -> token_tree {\n-        /// what's the opposite delimiter?\n-        fn flip(&t: token::token) -> token::token {\n-            alt t {\n-              token::LPAREN { token::RPAREN }\n-              token::LBRACE { token::RBRACE }\n-              token::LBRACKET { token::RBRACKET }\n-              _ { fail }\n-            }\n-        }\n-\n         fn parse_tt_tok(p: parser, delim_ok: bool) -> token_tree {\n             alt p.token {\n               token::RPAREN | token::RBRACE | token::RBRACKET\n@@ -1127,7 +1123,7 @@ class parser {\n \n         ret alt self.token {\n           token::LPAREN | token::LBRACE | token::LBRACKET {\n-            let ket = flip(self.token);\n+            let ket = token::flip_delimiter(self.token);\n             tt_delim(vec::append(\n                 ~[parse_tt_tok(self, true)],\n                 vec::append(\n@@ -2718,9 +2714,15 @@ class parser {\n             let pth = self.parse_path_without_tps();\n             self.expect(token::NOT);\n             let id = self.parse_ident();\n-            let tts = self.parse_unspanned_seq(token::LBRACE, token::RBRACE,\n-                                               seq_sep_none(),\n-                                               |p| p.parse_token_tree());\n+            let tts = alt self.token {\n+              token::LPAREN | token::LBRACE | token::LBRACKET {\n+                let ket = token::flip_delimiter(self.token);\n+                self.parse_unspanned_seq(copy self.token, ket,\n+                                         seq_sep_none(),\n+                                         |p| p.parse_token_tree())\n+              }\n+              _ { self.fatal(~\"expected open delimiter\"); }\n+            };\n             let m = ast::mac_invoc_tt(pth, tts);\n             let m: ast::mac = {node: m,\n                                span: {lo: self.span.lo,"}, {"sha": "50eaa4d0632da33a3024a5e21b61e30b68a0fd62", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0bd6371155d187ce8d8ad5c0a45ea344804f6813/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bd6371155d187ce8d8ad5c0a45ea344804f6813/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=0bd6371155d187ce8d8ad5c0a45ea344804f6813", "patch": "@@ -225,6 +225,21 @@ pure fn can_begin_expr(t: token) -> bool {\n     }\n }\n \n+/// what's the opposite delimiter?\n+fn flip_delimiter(&t: token::token) -> token::token {\n+    alt t {\n+      token::LPAREN { token::RPAREN }\n+      token::LBRACE { token::RBRACE }\n+      token::LBRACKET { token::RBRACKET }\n+      token::RPAREN { token::LPAREN }\n+      token::RBRACE { token::LBRACE }\n+      token::RBRACKET { token::LBRACKET }\n+      _ { fail }\n+    }\n+}\n+\n+\n+\n fn is_lit(t: token) -> bool {\n     alt t {\n       LIT_INT(_, _) { true }"}]}