{"sha": "04b776e5eca7aa49618a1425f08c8825e51b19dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0Yjc3NmU1ZWNhN2FhNDk2MThhMTQyNWYwOGM4ODI1ZTUxYjE5ZGM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2016-09-04T15:37:30Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2016-09-07T19:17:58Z"}, "message": "Zero first byte of CString on drop\n\nThis should prevent code like\n\n```\nlet ptr = CString::new(\"hello\").unwrap().as_ptr();\n```\n\nfrom working by accident.", "tree": {"sha": "7976b9a8c387b3c496a53413896ec48e612a63fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7976b9a8c387b3c496a53413896ec48e612a63fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04b776e5eca7aa49618a1425f08c8825e51b19dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04b776e5eca7aa49618a1425f08c8825e51b19dc", "html_url": "https://github.com/rust-lang/rust/commit/04b776e5eca7aa49618a1425f08c8825e51b19dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04b776e5eca7aa49618a1425f08c8825e51b19dc/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d04201565790e17890f300c2bedeab6b895c313", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d04201565790e17890f300c2bedeab6b895c313", "html_url": "https://github.com/rust-lang/rust/commit/1d04201565790e17890f300c2bedeab6b895c313"}], "stats": {"total": 28, "additions": 25, "deletions": 3}, "files": [{"sha": "2d5e8c041940293a670caa2d1e55ae5d4d304704", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/04b776e5eca7aa49618a1425f08c8825e51b19dc/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04b776e5eca7aa49618a1425f08c8825e51b19dc/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=04b776e5eca7aa49618a1425f08c8825e51b19dc", "patch": "@@ -19,6 +19,7 @@ use mem;\n use memchr;\n use ops;\n use os::raw::c_char;\n+use ptr;\n use slice;\n use str::{self, Utf8Error};\n \n@@ -68,6 +69,9 @@ use str::{self, Utf8Error};\n #[derive(PartialEq, PartialOrd, Eq, Ord, Hash, Clone)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct CString {\n+    // Invariant 1: the slice ends with a zero byte and has a length of at least one.\n+    // Invariant 2: the slice contains only one zero byte.\n+    // Improper usage of unsafe function can break Invariant 2, but not Invariant 1.\n     inner: Box<[u8]>,\n }\n \n@@ -244,7 +248,7 @@ impl CString {\n     /// Failure to call `from_raw` will lead to a memory leak.\n     #[stable(feature = \"cstr_memory\", since = \"1.4.0\")]\n     pub fn into_raw(self) -> *mut c_char {\n-        Box::into_raw(self.inner) as *mut c_char\n+        Box::into_raw(self.into_inner()) as *mut c_char\n     }\n \n     /// Converts the `CString` into a `String` if it contains valid Unicode data.\n@@ -265,7 +269,7 @@ impl CString {\n     /// it is guaranteed to not have any interior nul bytes.\n     #[stable(feature = \"cstring_into\", since = \"1.7.0\")]\n     pub fn into_bytes(self) -> Vec<u8> {\n-        let mut vec = self.inner.into_vec();\n+        let mut vec = self.into_inner().into_vec();\n         let _nul = vec.pop();\n         debug_assert_eq!(_nul, Some(0u8));\n         vec\n@@ -275,7 +279,7 @@ impl CString {\n     /// includes the trailing nul byte.\n     #[stable(feature = \"cstring_into\", since = \"1.7.0\")]\n     pub fn into_bytes_with_nul(self) -> Vec<u8> {\n-        self.inner.into_vec()\n+        self.into_inner().into_vec()\n     }\n \n     /// Returns the contents of this `CString` as a slice of bytes.\n@@ -293,6 +297,24 @@ impl CString {\n     pub fn as_bytes_with_nul(&self) -> &[u8] {\n         &self.inner\n     }\n+\n+    // Bypass \"move out of struct which implements `Drop` trait\" restriction.\n+    fn into_inner(self) -> Box<[u8]> {\n+        unsafe {\n+            let result = ptr::read(&self.inner);\n+            mem::forget(self);\n+            result\n+        }\n+    }\n+}\n+\n+// Turns this `CString` into an empty string to prevent\n+// memory unsafe code from working by accident.\n+#[stable(feature = \"cstring_drop\", since = \"1.13.0\")]\n+impl Drop for CString {\n+    fn drop(&mut self) {\n+        unsafe { *self.inner.get_unchecked_mut(0) = 0; }\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}]}