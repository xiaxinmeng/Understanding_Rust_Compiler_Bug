{"sha": "aef55517519682764c08b0471692e5b0377a8c10", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlZjU1NTE3NTE5NjgyNzY0YzA4YjA0NzE2OTJlNWIwMzc3YThjMTA=", "commit": {"author": {"name": "Chris Wong", "email": "lambda.fairy@gmail.com", "date": "2015-02-13T06:27:56Z"}, "committer": {"name": "Chris Wong", "email": "lambda.fairy@gmail.com", "date": "2015-02-13T06:40:22Z"}, "message": "Rename `unsafe_lang_item` to `unsafe_cell_lang_item`", "tree": {"sha": "e973f040400f4ba54dc11ad16bb276150be95692", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e973f040400f4ba54dc11ad16bb276150be95692"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aef55517519682764c08b0471692e5b0377a8c10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aef55517519682764c08b0471692e5b0377a8c10", "html_url": "https://github.com/rust-lang/rust/commit/aef55517519682764c08b0471692e5b0377a8c10", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aef55517519682764c08b0471692e5b0377a8c10/comments", "author": {"login": "lambda-fairy", "id": 1572323, "node_id": "MDQ6VXNlcjE1NzIzMjM=", "avatar_url": "https://avatars.githubusercontent.com/u/1572323?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lambda-fairy", "html_url": "https://github.com/lambda-fairy", "followers_url": "https://api.github.com/users/lambda-fairy/followers", "following_url": "https://api.github.com/users/lambda-fairy/following{/other_user}", "gists_url": "https://api.github.com/users/lambda-fairy/gists{/gist_id}", "starred_url": "https://api.github.com/users/lambda-fairy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lambda-fairy/subscriptions", "organizations_url": "https://api.github.com/users/lambda-fairy/orgs", "repos_url": "https://api.github.com/users/lambda-fairy/repos", "events_url": "https://api.github.com/users/lambda-fairy/events{/privacy}", "received_events_url": "https://api.github.com/users/lambda-fairy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lambda-fairy", "id": 1572323, "node_id": "MDQ6VXNlcjE1NzIzMjM=", "avatar_url": "https://avatars.githubusercontent.com/u/1572323?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lambda-fairy", "html_url": "https://github.com/lambda-fairy", "followers_url": "https://api.github.com/users/lambda-fairy/followers", "following_url": "https://api.github.com/users/lambda-fairy/following{/other_user}", "gists_url": "https://api.github.com/users/lambda-fairy/gists{/gist_id}", "starred_url": "https://api.github.com/users/lambda-fairy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lambda-fairy/subscriptions", "organizations_url": "https://api.github.com/users/lambda-fairy/orgs", "repos_url": "https://api.github.com/users/lambda-fairy/repos", "events_url": "https://api.github.com/users/lambda-fairy/events{/privacy}", "received_events_url": "https://api.github.com/users/lambda-fairy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4a286144dfbc587604353be2fb3c9e27d405f9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4a286144dfbc587604353be2fb3c9e27d405f9e", "html_url": "https://github.com/rust-lang/rust/commit/b4a286144dfbc587604353be2fb3c9e27d405f9e"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "d5883d8bf864bc3f386b3dfa4f3c763d11939a52", "filename": "src/librustc_typeck/variance.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aef55517519682764c08b0471692e5b0377a8c10/src%2Flibrustc_typeck%2Fvariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aef55517519682764c08b0471692e5b0377a8c10/src%2Flibrustc_typeck%2Fvariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance.rs?ref=aef55517519682764c08b0471692e5b0377a8c10", "patch": "@@ -412,7 +412,7 @@ struct ConstraintContext<'a, 'tcx: 'a> {\n     invariant_lang_items: [Option<ast::DefId>; 2],\n     covariant_lang_items: [Option<ast::DefId>; 2],\n     contravariant_lang_items: [Option<ast::DefId>; 2],\n-    unsafe_lang_item: Option<ast::DefId>,\n+    unsafe_cell_lang_item: Option<ast::DefId>,\n \n     // These are pointers to common `ConstantTerm` instances\n     covariant: VarianceTermPtr<'a>,\n@@ -453,7 +453,7 @@ fn add_constraints_from_crate<'a, 'tcx>(terms_cx: TermsContext<'a, 'tcx>,\n     invariant_lang_items[RegionParam as uint] =\n         terms_cx.tcx.lang_items.invariant_lifetime();\n \n-    let unsafe_lang_item = terms_cx.tcx.lang_items.unsafe_cell_type();\n+    let unsafe_cell_lang_item = terms_cx.tcx.lang_items.unsafe_cell_type();\n \n     let covariant = terms_cx.arena.alloc(ConstantTerm(ty::Covariant));\n     let contravariant = terms_cx.arena.alloc(ConstantTerm(ty::Contravariant));\n@@ -465,7 +465,7 @@ fn add_constraints_from_crate<'a, 'tcx>(terms_cx: TermsContext<'a, 'tcx>,\n         invariant_lang_items: invariant_lang_items,\n         covariant_lang_items: covariant_lang_items,\n         contravariant_lang_items: contravariant_lang_items,\n-        unsafe_lang_item: unsafe_lang_item,\n+        unsafe_cell_lang_item: unsafe_cell_lang_item,\n \n         covariant: covariant,\n         contravariant: contravariant,\n@@ -654,7 +654,7 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n             self.covariant\n         } else if self.contravariant_lang_items[kind as uint] == Some(item_def_id) {\n             self.contravariant\n-        } else if kind == TypeParam && Some(item_def_id) == self.unsafe_lang_item {\n+        } else if kind == TypeParam && Some(item_def_id) == self.unsafe_cell_lang_item {\n             self.invariant\n         } else if param_def_id.krate == ast::LOCAL_CRATE {\n             // Parameter on an item defined within current crate:"}]}