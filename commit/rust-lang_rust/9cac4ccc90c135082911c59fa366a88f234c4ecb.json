{"sha": "9cac4ccc90c135082911c59fa366a88f234c4ecb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljYWM0Y2NjOTBjMTM1MDgyOTExYzU5ZmEzNjZhODhmMjM0YzRlY2I=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-08-08T20:07:21Z"}, "committer": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-08-08T20:07:21Z"}, "message": "std::vec: Use iterator::order functions for Eq, Ord, TotalOrd, TotalEq", "tree": {"sha": "76ef3fb7e6e4f7b18a095f14e21f76f57fb0a4f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76ef3fb7e6e4f7b18a095f14e21f76f57fb0a4f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9cac4ccc90c135082911c59fa366a88f234c4ecb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9cac4ccc90c135082911c59fa366a88f234c4ecb", "html_url": "https://github.com/rust-lang/rust/commit/9cac4ccc90c135082911c59fa366a88f234c4ecb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9cac4ccc90c135082911c59fa366a88f234c4ecb/comments", "author": null, "committer": null, "parents": [{"sha": "e0b08533b4ffa73185fb6f510873ad57a56dac30", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0b08533b4ffa73185fb6f510873ad57a56dac30", "html_url": "https://github.com/rust-lang/rust/commit/e0b08533b4ffa73185fb6f510873ad57a56dac30"}], "stats": {"total": 46, "additions": 22, "deletions": 24}, "files": [{"sha": "87c2a4f9e0a1eceb43632bfe519b3b978169e4e8", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 22, "deletions": 24, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/9cac4ccc90c135082911c59fa366a88f234c4ecb/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cac4ccc90c135082911c59fa366a88f234c4ecb/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=9cac4ccc90c135082911c59fa366a88f234c4ecb", "patch": "@@ -564,17 +564,19 @@ pub mod traits {\n     use super::Vector;\n \n     use clone::Clone;\n-    use cmp::{Eq, Ord, TotalEq, TotalOrd, Ordering, Equal, Equiv};\n+    use cmp::{Eq, Ord, TotalEq, TotalOrd, Ordering, Equiv};\n+    use iterator::order;\n     use ops::Add;\n-    use option::{Some, None};\n \n     impl<'self,T:Eq> Eq for &'self [T] {\n         fn eq(&self, other: & &'self [T]) -> bool {\n             self.len() == other.len() &&\n-                self.iter().zip(other.iter()).all(|(s,o)| *s == *o)\n+                order::eq(self.iter(), other.iter())\n+        }\n+        fn ne(&self, other: & &'self [T]) -> bool {\n+            self.len() != other.len() !=\n+                order::ne(self.iter(), other.iter())\n         }\n-        #[inline]\n-        fn ne(&self, other: & &'self [T]) -> bool { !self.eq(other) }\n     }\n \n     impl<T:Eq> Eq for ~[T] {\n@@ -594,7 +596,7 @@ pub mod traits {\n     impl<'self,T:TotalEq> TotalEq for &'self [T] {\n         fn equals(&self, other: & &'self [T]) -> bool {\n             self.len() == other.len() &&\n-                self.iter().zip(other.iter()).all(|(s,o)| s.equals(o))\n+                order::equals(self.iter(), other.iter())\n         }\n     }\n \n@@ -625,13 +627,7 @@ pub mod traits {\n \n     impl<'self,T:TotalOrd> TotalOrd for &'self [T] {\n         fn cmp(&self, other: & &'self [T]) -> Ordering {\n-            for (s,o) in self.iter().zip(other.iter()) {\n-                match s.cmp(o) {\n-                    Equal => {},\n-                    non_eq => { return non_eq; }\n-                }\n-            }\n-            self.len().cmp(&other.len())\n+            order::cmp(self.iter(), other.iter())\n         }\n     }\n \n@@ -645,23 +641,25 @@ pub mod traits {\n         fn cmp(&self, other: &@[T]) -> Ordering { self.as_slice().cmp(&other.as_slice()) }\n     }\n \n-    impl<'self,T:Ord> Ord for &'self [T] {\n+    impl<'self, T: Eq + Ord> Ord for &'self [T] {\n         fn lt(&self, other: & &'self [T]) -> bool {\n-            for (s,o) in self.iter().zip(other.iter()) {\n-                if *s < *o { return true; }\n-                if *s > *o { return false; }\n-            }\n-            self.len() < other.len()\n+            order::lt(self.iter(), other.iter())\n         }\n         #[inline]\n-        fn le(&self, other: & &'self [T]) -> bool { !(*other < *self) }\n+        fn le(&self, other: & &'self [T]) -> bool {\n+            order::le(self.iter(), other.iter())\n+        }\n         #[inline]\n-        fn ge(&self, other: & &'self [T]) -> bool { !(*self < *other) }\n+        fn ge(&self, other: & &'self [T]) -> bool {\n+            order::ge(self.iter(), other.iter())\n+        }\n         #[inline]\n-        fn gt(&self, other: & &'self [T]) -> bool { *other < *self }\n+        fn gt(&self, other: & &'self [T]) -> bool {\n+            order::gt(self.iter(), other.iter())\n+        }\n     }\n \n-    impl<T:Ord> Ord for ~[T] {\n+    impl<T: Eq + Ord> Ord for ~[T] {\n         #[inline]\n         fn lt(&self, other: &~[T]) -> bool { self.as_slice() < other.as_slice() }\n         #[inline]\n@@ -672,7 +670,7 @@ pub mod traits {\n         fn gt(&self, other: &~[T]) -> bool { self.as_slice() > other.as_slice() }\n     }\n \n-    impl<T:Ord> Ord for @[T] {\n+    impl<T: Eq + Ord> Ord for @[T] {\n         #[inline]\n         fn lt(&self, other: &@[T]) -> bool { self.as_slice() < other.as_slice() }\n         #[inline]"}]}