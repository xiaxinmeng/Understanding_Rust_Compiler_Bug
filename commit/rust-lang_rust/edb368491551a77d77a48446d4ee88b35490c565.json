{"sha": "edb368491551a77d77a48446d4ee88b35490c565", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkYjM2ODQ5MTU1MWE3N2Q3N2E0ODQ0NmQ0ZWU4OGIzNTQ5MGM1NjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-29T07:44:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-29T07:44:36Z"}, "message": "Auto merge of #68572 - tmiasko:sanitizer-use-after-scope, r=nikic\n\nDetect use-after-scope bugs with AddressSanitizer\n\nEnable use-after-scope checks by default when using AddressSanitizer.\nThey allow to detect incorrect use of stack objects after their scope\nhave already ended. The detection is based on LLVM lifetime intrinsics.\n\nTo facilitate the use of this functionality, the lifetime intrinsics are\nnow emitted regardless of optimization level if enabled sanitizer makes\nuse of them.", "tree": {"sha": "711d4b5a6e40ef4281b2a4b3f5c9cb9aa8c41f5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/711d4b5a6e40ef4281b2a4b3f5c9cb9aa8c41f5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/edb368491551a77d77a48446d4ee88b35490c565", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/edb368491551a77d77a48446d4ee88b35490c565", "html_url": "https://github.com/rust-lang/rust/commit/edb368491551a77d77a48446d4ee88b35490c565", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/edb368491551a77d77a48446d4ee88b35490c565/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "343432a74d1b92e4d3e71de4271e68304e046da3", "url": "https://api.github.com/repos/rust-lang/rust/commits/343432a74d1b92e4d3e71de4271e68304e046da3", "html_url": "https://github.com/rust-lang/rust/commit/343432a74d1b92e4d3e71de4271e68304e046da3"}, {"sha": "47fd27a637b7311c81437f138932ddb426350ab7", "url": "https://api.github.com/repos/rust-lang/rust/commits/47fd27a637b7311c81437f138932ddb426350ab7", "html_url": "https://github.com/rust-lang/rust/commit/47fd27a637b7311c81437f138932ddb426350ab7"}], "stats": {"total": 110, "additions": 105, "deletions": 5}, "files": [{"sha": "64bff2a6fe0b46bc169fac3ec0421b321a5e0316", "filename": "src/doc/unstable-book/src/compiler-flags/sanitizer.md", "status": "modified", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/edb368491551a77d77a48446d4ee88b35490c565/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md", "raw_url": "https://github.com/rust-lang/rust/raw/edb368491551a77d77a48446d4ee88b35490c565/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md?ref=edb368491551a77d77a48446d4ee88b35490c565", "patch": "@@ -93,6 +93,80 @@ Shadow byte legend (one shadow byte represents 8 application bytes):\n ==10029==ABORTING\n ```\n \n+Use of a stack object after its scope has already ended:\n+\n+```shell\n+$ cat b.rs\n+static mut P: *mut usize = std::ptr::null_mut();\n+\n+fn main() {\n+    unsafe {\n+        {\n+            let mut x = 0;\n+            P = &mut x;\n+        }\n+        std::ptr::write_volatile(P, 123);\n+    }\n+}\n+$ rustc -Zsanitizer=address b.rs\n+$./b\n+=================================================================\n+==424427==ERROR: AddressSanitizer: stack-use-after-scope on address 0x7fff67be6be0 at pc 0x5647a3ea4658 bp 0x7fff67be6b90 sp 0x7fff67be6b88\n+WRITE of size 8 at 0x7fff67be6be0 thread T0\n+    #0 0x5647a3ea4657 in core::ptr::write_volatile::h4b04601757d0376d (/tmp/b+0xb8657)\n+    #1 0x5647a3ea4432 in b::main::h5574a756e615c9cf (/tmp/b+0xb8432)\n+    #2 0x5647a3ea480b in std::rt::lang_start::_$u7b$$u7b$closure$u7d$$u7d$::hd57e7ee01866077e (/tmp/b+0xb880b)\n+    #3 0x5647a3eab412 in std::panicking::try::do_call::he0421ca82dd11ba3 (.llvm.8083791802951296215) (/tmp/b+0xbf412)\n+    #4 0x5647a3eacb26 in __rust_maybe_catch_panic (/tmp/b+0xc0b26)\n+    #5 0x5647a3ea5b66 in std::rt::lang_start_internal::h19bc96b28f670a64 (/tmp/b+0xb9b66)\n+    #6 0x5647a3ea4788 in std::rt::lang_start::h642d10b4b6965fb8 (/tmp/b+0xb8788)\n+    #7 0x5647a3ea449a in main (/tmp/b+0xb849a)\n+    #8 0x7fd1d18b3bba in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x26bba)\n+    #9 0x5647a3df7299 in _start (/tmp/b+0xb299)\n+\n+Address 0x7fff67be6be0 is located in stack of thread T0 at offset 32 in frame\n+    #0 0x5647a3ea433f in b::main::h5574a756e615c9cf (/tmp/b+0xb833f)\n+\n+  This frame has 1 object(s):\n+    [32, 40) 'x' <== Memory access at offset 32 is inside this variable\n+HINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork\n+      (longjmp and C++ exceptions *are* supported)\n+SUMMARY: AddressSanitizer: stack-use-after-scope (/tmp/b+0xb8657) in core::ptr::write_volatile::h4b04601757d0376d\n+Shadow bytes around the buggy address:\n+  0x10006cf74d20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n+  0x10006cf74d30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n+  0x10006cf74d40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n+  0x10006cf74d50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n+  0x10006cf74d60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n+=>0x10006cf74d70: 00 00 00 00 00 00 00 00 f1 f1 f1 f1[f8]f3 f3 f3\n+  0x10006cf74d80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n+  0x10006cf74d90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n+  0x10006cf74da0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n+  0x10006cf74db0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n+  0x10006cf74dc0: f1 f1 f1 f1 00 f3 f3 f3 00 00 00 00 00 00 00 00\n+Shadow byte legend (one shadow byte represents 8 application bytes):\n+  Addressable:           00\n+  Partially addressable: 01 02 03 04 05 06 07\n+  Heap left redzone:       fa\n+  Freed heap region:       fd\n+  Stack left redzone:      f1\n+  Stack mid redzone:       f2\n+  Stack right redzone:     f3\n+  Stack after return:      f5\n+  Stack use after scope:   f8\n+  Global redzone:          f9\n+  Global init order:       f6\n+  Poisoned by user:        f7\n+  Container overflow:      fc\n+  Array cookie:            ac\n+  Intra object redzone:    bb\n+  ASan internal:           fe\n+  Left alloca redzone:     ca\n+  Right alloca redzone:    cb\n+  Shadow gap:              cc\n+==424427==ABORTING\n+```\n+\n ## MemorySanitizer\n \n Use of uninitialized memory. Note that we are using `-Zbuild-std` to instrument"}, {"sha": "c59b81eb4cc32f772f76b804f6e2f27c424c68cd", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/edb368491551a77d77a48446d4ee88b35490c565/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edb368491551a77d77a48446d4ee88b35490c565/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=edb368491551a77d77a48446d4ee88b35490c565", "patch": "@@ -7,7 +7,7 @@ use crate::type_of::LayoutLlvmExt;\n use crate::value::Value;\n use libc::{c_char, c_uint};\n use log::debug;\n-use rustc::session::config;\n+use rustc::session::config::{self, Sanitizer};\n use rustc::ty::layout::{self, Align, Size, TyLayout};\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc_codegen_ssa::base::to_immediate;\n@@ -1232,12 +1232,19 @@ impl Builder<'a, 'll, 'tcx> {\n     }\n \n     fn call_lifetime_intrinsic(&mut self, intrinsic: &str, ptr: &'ll Value, size: Size) {\n-        if self.cx.sess().opts.optimize == config::OptLevel::No {\n+        let size = size.bytes();\n+        if size == 0 {\n             return;\n         }\n \n-        let size = size.bytes();\n-        if size == 0 {\n+        let opts = &self.cx.sess().opts;\n+        let emit = match opts.debugging_opts.sanitizer {\n+            // Some sanitizer use lifetime intrinsics. When they are in use,\n+            // emit lifetime intrinsics regardless of optimization level.\n+            Some(Sanitizer::Address) | Some(Sanitizer::Memory) => true,\n+            _ => opts.optimize != config::OptLevel::No,\n+        };\n+        if !emit {\n             return;\n         }\n "}, {"sha": "fad703698075d299b4b3d8187ec7033ecd0e2733", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/edb368491551a77d77a48446d4ee88b35490c565/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/edb368491551a77d77a48446d4ee88b35490c565/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=edb368491551a77d77a48446d4ee88b35490c565", "patch": "@@ -87,8 +87,9 @@ extern \"C\" LLVMPassRef LLVMRustFindAndCreatePass(const char *PassName) {\n \n extern \"C\" LLVMPassRef LLVMRustCreateAddressSanitizerFunctionPass(bool Recover) {\n   const bool CompileKernel = false;\n+  const bool UseAfterScope = true;\n \n-  return wrap(createAddressSanitizerFunctionPass(CompileKernel, Recover));\n+  return wrap(createAddressSanitizerFunctionPass(CompileKernel, Recover, UseAfterScope));\n }\n \n extern \"C\" LLVMPassRef LLVMRustCreateModuleAddressSanitizerPass(bool Recover) {"}, {"sha": "d27a30a2dc55f9e65db391fb888dd49fa0f2f1ef", "filename": "src/test/ui/sanitize/address.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/edb368491551a77d77a48446d4ee88b35490c565/src%2Ftest%2Fui%2Fsanitize%2Faddress.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edb368491551a77d77a48446d4ee88b35490c565/src%2Ftest%2Fui%2Fsanitize%2Faddress.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsanitize%2Faddress.rs?ref=edb368491551a77d77a48446d4ee88b35490c565", "previous_filename": "src/test/ui/sanitizer-address.rs"}, {"sha": "9c198543a86649572cd42aa4fc6105d4231b985b", "filename": "src/test/ui/sanitize/cfg.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/edb368491551a77d77a48446d4ee88b35490c565/src%2Ftest%2Fui%2Fsanitize%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edb368491551a77d77a48446d4ee88b35490c565/src%2Ftest%2Fui%2Fsanitize%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsanitize%2Fcfg.rs?ref=edb368491551a77d77a48446d4ee88b35490c565", "previous_filename": "src/test/ui/sanitize-cfg.rs"}, {"sha": "5c2f2cb4e868bb0012a960f21a61e7f85f044017", "filename": "src/test/ui/sanitize/leak.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/edb368491551a77d77a48446d4ee88b35490c565/src%2Ftest%2Fui%2Fsanitize%2Fleak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edb368491551a77d77a48446d4ee88b35490c565/src%2Ftest%2Fui%2Fsanitize%2Fleak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsanitize%2Fleak.rs?ref=edb368491551a77d77a48446d4ee88b35490c565", "previous_filename": "src/test/ui/sanitizer-leak.rs"}, {"sha": "3e1cf4509a31ff953cc9a914b9caef79083e729b", "filename": "src/test/ui/sanitize/memory.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/edb368491551a77d77a48446d4ee88b35490c565/src%2Ftest%2Fui%2Fsanitize%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edb368491551a77d77a48446d4ee88b35490c565/src%2Ftest%2Fui%2Fsanitize%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsanitize%2Fmemory.rs?ref=edb368491551a77d77a48446d4ee88b35490c565", "previous_filename": "src/test/ui/sanitizer-memory.rs"}, {"sha": "444333c3f01e22a3413e6e8875193e7b8102c819", "filename": "src/test/ui/sanitize/unsupported-target.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/edb368491551a77d77a48446d4ee88b35490c565/src%2Ftest%2Fui%2Fsanitize%2Funsupported-target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edb368491551a77d77a48446d4ee88b35490c565/src%2Ftest%2Fui%2Fsanitize%2Funsupported-target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsanitize%2Funsupported-target.rs?ref=edb368491551a77d77a48446d4ee88b35490c565", "previous_filename": "src/test/ui/sanitizer-unsupported-target.rs"}, {"sha": "38be58dd4b36598babb4049de8cfdee4352c1af1", "filename": "src/test/ui/sanitize/unsupported-target.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/edb368491551a77d77a48446d4ee88b35490c565/src%2Ftest%2Fui%2Fsanitize%2Funsupported-target.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/edb368491551a77d77a48446d4ee88b35490c565/src%2Ftest%2Fui%2Fsanitize%2Funsupported-target.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsanitize%2Funsupported-target.stderr?ref=edb368491551a77d77a48446d4ee88b35490c565", "previous_filename": "src/test/ui/sanitizer-unsupported-target.stderr"}, {"sha": "6a2067e157af56c7e2b76ad53831acc510e65c95", "filename": "src/test/ui/sanitize/use-after-scope.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/edb368491551a77d77a48446d4ee88b35490c565/src%2Ftest%2Fui%2Fsanitize%2Fuse-after-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edb368491551a77d77a48446d4ee88b35490c565/src%2Ftest%2Fui%2Fsanitize%2Fuse-after-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsanitize%2Fuse-after-scope.rs?ref=edb368491551a77d77a48446d4ee88b35490c565", "patch": "@@ -0,0 +1,18 @@\n+// needs-sanitizer-support\n+// only-x86_64\n+//\n+// compile-flags: -Zsanitizer=address\n+// run-fail\n+// error-pattern: ERROR: AddressSanitizer: stack-use-after-scope\n+\n+static mut P: *mut usize = std::ptr::null_mut();\n+\n+fn main() {\n+    unsafe {\n+        {\n+            let mut x = 0;\n+            P = &mut x;\n+        }\n+        std::ptr::write_volatile(P, 123);\n+    }\n+}"}]}