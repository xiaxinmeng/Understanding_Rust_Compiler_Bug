{"sha": "7f61ddd5b85f5e2340ef238476139df8a837afb1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmNjFkZGQ1Yjg1ZjVlMjM0MGVmMjM4NDc2MTM5ZGY4YTgzN2FmYjE=", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-02-10T01:39:38Z"}, "committer": {"name": "flip1995", "email": "philipp.krones@embecosm.com", "date": "2021-02-10T10:58:20Z"}, "message": "Move \"types to lint\" to the item stack", "tree": {"sha": "391e0d53b77eab34b1b99e24356ddfc451a7c4db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/391e0d53b77eab34b1b99e24356ddfc451a7c4db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f61ddd5b85f5e2340ef238476139df8a837afb1", "comment_count": 0, "verification": {"verified": false, "reason": "bad_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEij1UXJ/PQTcb99vTHKDfKvWdaKUFAmAjvEwACgkQHKDfKvWd\naKWLRxAAo95/YtkkOGaAzd7GvVRnOc/TXU4SNwYwRG+omVIgW/xjQ4EJleCOQueb\nOO3d4KkLwcUK8cmtGLwKhELZfFEmWAn6PzpaDNNaFZeGBcjKT4cyuOg0IEPJFXYh\nqK/dm1JqtgxOhShSvqTjeysb8o6eAnD4EBMsspOSkj2o1QVb/hrk/4wWqQwNIjk2\n+PLHjoZ05h3OoEFpD0tEEKU0Mgj2NVty3b1kA4F0s+7pSDRCyk76fNdUeXy5gwEV\n2SGCTlmmZ76vcvDgTVYJ/YWXHVvQvRrOa6+XwYIDldYLoDichFSUFsfYeMB6B8NJ\nn+k9VNIwQ3pIJlpfttSQZ0BZo0Eyic8PznhCRNcaViSichvDGn0oKXcbhxVyXQxw\n3ge3eAk+0tJ4QCr8mOqBSskQzS8YIyFZ7NWqAWvEbQytjbgtcJRwdb5+H3bwrX7I\nVKvwXfzQy4chsJmCr+FSn9gd7N7KzCkZ52Z0RIJEnBTW7f7A0hSIXmPOm4WaWuy7\nxQw+Upa/cfHFwzneVqOZPcTE51H4FusOdZjeApu3Q6UclR3K3u2zk2NM3ciHmyEf\nffUZE9OwoXy4nt750doFEVKLY2D7QjByw3IUAipRRfsbB/+2dPSBVC2fSQjgzR4J\n2CYZQ095YlhjhASG/7LWvcPhYkp/XfUfJzWSZOwfbw35K2P+yaI=\n=xDMe\n-----END PGP SIGNATURE-----", "payload": "tree 391e0d53b77eab34b1b99e24356ddfc451a7c4db\nparent 7e1c1c154166d9eaa4184eab166b540e17ff26f3\nauthor Cameron Steffen <cam.steffen94@gmail.com> 1612921178 -0600\ncommitter flip1995 <philipp.krones@embecosm.com> 1612954700 +0100\n\nMove \"types to lint\" to the item stack\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f61ddd5b85f5e2340ef238476139df8a837afb1", "html_url": "https://github.com/rust-lang/rust/commit/7f61ddd5b85f5e2340ef238476139df8a837afb1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f61ddd5b85f5e2340ef238476139df8a837afb1/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e1c1c154166d9eaa4184eab166b540e17ff26f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e1c1c154166d9eaa4184eab166b540e17ff26f3", "html_url": "https://github.com/rust-lang/rust/commit/7e1c1c154166d9eaa4184eab166b540e17ff26f3"}], "stats": {"total": 73, "additions": 41, "deletions": 32}, "files": [{"sha": "8c83ad5650d816e20aff881565381bd6ce9d17c3", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 41, "deletions": 32, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/7f61ddd5b85f5e2340ef238476139df8a837afb1/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f61ddd5b85f5e2340ef238476139df8a837afb1/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=7f61ddd5b85f5e2340ef238476139df8a837afb1", "patch": "@@ -59,8 +59,6 @@ declare_clippy_lint! {\n pub struct UseSelf {\n     msrv: Option<RustcVersion>,\n     stack: Vec<StackItem>,\n-    types_to_skip: Vec<HirId>,\n-    types_to_lint: Vec<HirId>,\n }\n \n const USE_SELF_MSRV: RustcVersion = RustcVersion::new(1, 37, 0);\n@@ -75,11 +73,13 @@ impl UseSelf {\n     }\n }\n \n-#[derive(Debug, PartialEq, Eq, Copy, Clone)]\n+#[derive(Debug)]\n enum StackItem {\n     Check {\n         hir_id: HirId,\n         impl_trait_ref_def_id: Option<LocalDefId>,\n+        types_to_skip: Vec<HirId>,\n+        types_to_lint: Vec<HirId>,\n     },\n     NoCheck,\n }\n@@ -116,6 +116,8 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n                     self.stack.push(StackItem::Check {\n                         hir_id: hir_self_ty.hir_id,\n                         impl_trait_ref_def_id,\n+                        types_to_lint: Vec::new(),\n+                        types_to_skip: Vec::new(),\n                     });\n                 } else {\n                     self.stack.push(StackItem::NoCheck);\n@@ -149,7 +151,11 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n         // declaration. The collection of those types is all this method implementation does.\n         if_chain! {\n             if let ImplItemKind::Fn(FnSig { decl, .. }, ..) = impl_item.kind;\n-            if let Some(StackItem::Check { impl_trait_ref_def_id: Some(def_id), .. }) = self.stack.last().copied();\n+            if let Some(&mut StackItem::Check {\n+                impl_trait_ref_def_id: Some(def_id),\n+                ref mut types_to_skip,\n+                ..\n+            }) = self.stack.last_mut();\n             if let Some(impl_trait_ref) = cx.tcx.impl_trait_ref(def_id);\n             then {\n                 // `self_ty` is the semantic self type of `impl <trait> for <type>`. This cannot be\n@@ -191,17 +197,13 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n                     if trait_sem_ty.walk().any(|inner| inner == self_ty.into()) {\n                         let mut visitor = SkipTyCollector::default();\n                         visitor.visit_ty(&impl_hir_ty);\n-                        self.types_to_skip.extend(visitor.types_to_skip);\n+                        types_to_skip.extend(visitor.types_to_skip);\n                     }\n                 }\n             }\n         }\n     }\n \n-    fn check_impl_item_post(&mut self, _: &LateContext<'_>, _: &hir::ImplItem<'_>) {\n-        self.types_to_skip.clear();\n-    }\n-\n     fn check_body(&mut self, cx: &LateContext<'tcx>, body: &'tcx hir::Body<'_>) {\n         // `hir_ty_to_ty` cannot be called in `Body`s or it will panic (sometimes). But in bodies\n         // we can use `cx.typeck_results.node_type(..)` to get the `ty::Ty` from a `hir::Ty`.\n@@ -211,7 +213,13 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n         // which shouldn't, with a visitor. We could directly lint in the visitor, but then we\n         // could only allow this lint on item scope. And we would have to check if those types are\n         // already dealt with in `check_ty` anyway.\n-        if let Some(StackItem::Check { hir_id, .. }) = self.stack.last() {\n+        if let Some(StackItem::Check {\n+            hir_id,\n+            types_to_lint,\n+            types_to_skip,\n+            ..\n+        }) = self.stack.last_mut()\n+        {\n             let self_ty = ty_from_hir_id(cx, *hir_id);\n \n             let mut visitor = LintTyCollector {\n@@ -221,25 +229,36 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n                 types_to_skip: vec![],\n             };\n             visitor.visit_expr(&body.value);\n-            self.types_to_lint.extend(visitor.types_to_lint);\n-            self.types_to_skip.extend(visitor.types_to_skip);\n+            types_to_lint.extend(visitor.types_to_lint);\n+            types_to_skip.extend(visitor.types_to_skip);\n         }\n     }\n \n-    fn check_body_post(&mut self, _: &LateContext<'_>, _: &hir::Body<'_>) {\n-        self.types_to_lint.clear();\n-    }\n-\n     fn check_ty(&mut self, cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>) {\n-        if in_macro(hir_ty.span)\n-            | in_impl(cx, hir_ty)\n-            | self.types_to_skip.contains(&hir_ty.hir_id)\n-            | !meets_msrv(self.msrv.as_ref(), &USE_SELF_MSRV)\n-        {\n+        if in_macro(hir_ty.span) | in_impl(cx, hir_ty) | !meets_msrv(self.msrv.as_ref(), &USE_SELF_MSRV) {\n             return;\n         }\n \n-        let lint_dependend_on_expr_kind = || {\n+        let lint_dependend_on_expr_kind = if let Some(StackItem::Check {\n+            hir_id,\n+            types_to_lint,\n+            types_to_skip,\n+            ..\n+        }) = self.stack.last()\n+        {\n+            if types_to_skip.contains(&hir_ty.hir_id) {\n+                false\n+            } else if types_to_lint.contains(&hir_ty.hir_id) {\n+                true\n+            } else {\n+                let self_ty = ty_from_hir_id(cx, *hir_id);\n+                should_lint_ty(hir_ty, hir_ty_to_ty(cx.tcx, hir_ty), self_ty)\n+            }\n+        } else {\n+            false\n+        };\n+\n+        if lint_dependend_on_expr_kind {\n             // FIXME: this span manipulation should not be necessary\n             // @flip1995 found an ast lowering issue in\n             // https://github.com/rust-lang/rust/blob/master/src/librustc_ast_lowering/path.rs#l142-l162\n@@ -250,16 +269,6 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n                 })) => span_lint_until_last_segment(cx, hir_ty.span, segment),\n                 _ => span_lint(cx, hir_ty.span),\n             }\n-        };\n-\n-        if self.types_to_lint.contains(&hir_ty.hir_id) {\n-            lint_dependend_on_expr_kind();\n-        } else if let Some(StackItem::Check { hir_id, .. }) = self.stack.last() {\n-            let self_ty = ty_from_hir_id(cx, *hir_id);\n-\n-            if should_lint_ty(hir_ty, hir_ty_to_ty(cx.tcx, hir_ty), self_ty) {\n-                lint_dependend_on_expr_kind();\n-            }\n         }\n     }\n "}]}