{"sha": "0129790a8f84a0858abcb1448e1052caa01fc41c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxMjk3OTBhOGY4NGEwODU4YWJjYjE0NDhlMTA1MmNhYTAxZmM0MWM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-06-25T21:06:17Z"}, "committer": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-06-25T21:06:17Z"}, "message": "Merge #1432\n\n1432: Make fill_match_arm work with trivial arm r=matklad a=ironyman\n\nAddresses this issue https://github.com/rust-analyzer/rust-analyzer/issues/1399\r\n\r\nOne minor issue I noticed is that complete_postfix creates an arm like this\r\n\r\n```\r\n                match E::X {\r\n                    <|>_ => {},\r\n                }\r\n```\r\n\r\nbut fill_match_arms creates arms like this\r\n```\r\n                     E::X => (), \r\n```\n\nCo-authored-by: ironyman <ironyman@users.noreply.github.com>\nCo-authored-by: Changyu Li <changyl@microsoft.com>", "tree": {"sha": "ae3054305d4ee1c610135358e377a2331eaee871", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae3054305d4ee1c610135358e377a2331eaee871"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0129790a8f84a0858abcb1448e1052caa01fc41c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0129790a8f84a0858abcb1448e1052caa01fc41c", "html_url": "https://github.com/rust-lang/rust/commit/0129790a8f84a0858abcb1448e1052caa01fc41c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0129790a8f84a0858abcb1448e1052caa01fc41c/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "4b0c37bd6e4cb3d47614ec6b42fb1deef9bc9324", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b0c37bd6e4cb3d47614ec6b42fb1deef9bc9324", "html_url": "https://github.com/rust-lang/rust/commit/4b0c37bd6e4cb3d47614ec6b42fb1deef9bc9324"}, {"sha": "3a2a13756f325b1dd8ddd54a0a0b24b99180fb82", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a2a13756f325b1dd8ddd54a0a0b24b99180fb82", "html_url": "https://github.com/rust-lang/rust/commit/3a2a13756f325b1dd8ddd54a0a0b24b99180fb82"}], "stats": {"total": 59, "additions": 57, "deletions": 2}, "files": [{"sha": "71b101b4033f356e4f4894747348a2e386111e9b", "filename": "crates/ra_assists/src/fill_match_arms.rs", "status": "modified", "additions": 57, "deletions": 2, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/0129790a8f84a0858abcb1448e1052caa01fc41c/crates%2Fra_assists%2Fsrc%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0129790a8f84a0858abcb1448e1052caa01fc41c/crates%2Fra_assists%2Fsrc%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Ffill_match_arms.rs?ref=0129790a8f84a0858abcb1448e1052caa01fc41c", "patch": "@@ -1,4 +1,5 @@\n use std::fmt::Write;\n+use itertools::Itertools;\n \n use hir::{\n     AdtDef, FieldSource, HasSource,\n@@ -8,13 +9,41 @@ use ra_syntax::ast::{self, AstNode};\n \n use crate::{AssistCtx, Assist, AssistId};\n \n+fn is_trivial_arm(arm: &ast::MatchArm) -> bool {\n+    fn single_pattern(arm: &ast::MatchArm) -> Option<ast::PatKind> {\n+        let (pat,) = arm.pats().collect_tuple()?;\n+        Some(pat.kind())\n+    }\n+    match single_pattern(arm) {\n+        Some(ast::PatKind::PlaceholderPat(..)) => true,\n+        _ => false,\n+    }\n+}\n+\n pub(crate) fn fill_match_arms(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let match_expr = ctx.node_at_offset::<ast::MatchExpr>()?;\n \n     // We already have some match arms, so we don't provide any assists.\n+    // Unless if there is only one trivial match arm possibly created\n+    // by match postfix complete. Trivial match arm is the catch all arm.\n     match match_expr.match_arm_list() {\n-        Some(arm_list) if arm_list.arms().count() > 0 => {\n-            return None;\n+        Some(arm_list) => {\n+            let mut arm_iter = arm_list.arms();\n+            let first = arm_iter.next();\n+\n+            match first {\n+                // If there arm list is empty or there is only one trivial arm, then proceed.\n+                Some(arm) if is_trivial_arm(arm) => {\n+                    if arm_iter.next() != None {\n+                        return None;\n+                    }\n+                }\n+                None => {}\n+\n+                _ => {\n+                    return None;\n+                }\n+            }\n         }\n         _ => {}\n     }\n@@ -228,4 +257,30 @@ mod tests {\n             \"match E::X {}\",\n         );\n     }\n+\n+    #[test]\n+    fn fill_match_arms_trivial_arm() {\n+        check_assist(\n+            fill_match_arms,\n+            r#\"\n+            enum E { X, Y }\n+\n+            fn main() {\n+                match E::X {\n+                    <|>_ => {},\n+                }\n+            }\n+            \"#,\n+            r#\"\n+            enum E { X, Y }\n+\n+            fn main() {\n+                match <|>E::X {\n+                    E::X => (),\n+                    E::Y => (),\n+                }\n+            }\n+            \"#,\n+        );\n+    }\n }"}]}