{"sha": "7569d9266e607df6579916e871d65480aaa8b50a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1NjlkOTI2NmU2MDdkZjY1Nzk5MTZlODcxZDY1NDgwYWFhOGI1MGE=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-09-08T08:07:38Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-09-08T10:26:29Z"}, "message": "Rollup merge of #53932 - matthewjasper:remove-base-path, r=nikomatsakis\n\n[NLL] Remove base_place\n\nThis function was supposed to make `Box` less special. But\n\n* I think that the consensus is that MIR borrowck is going to fully special case `Box`\n* It wasn't implemented correctly, it's looking at the type of the wrong `Place`, resulting in weird behaviour:\n\n```rust\n#![feature(nll)]\ntype A = Box<i32>; // If this is changed to another type then this will compile.\n\npub fn foo(x: Box<(String, A)>) {\n    let a = x.0; // This will compile if these lines are swapped\n    let b = x.1;\n}\n```\n\nr? @nikomatsakis", "tree": {"sha": "a7f82955403356d8126f3589da54f03ac3fdfd43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7f82955403356d8126f3589da54f03ac3fdfd43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7569d9266e607df6579916e871d65480aaa8b50a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAluTo9YACgkQ/vbIBR0O\nATzD5xAAs0lRAv/UigoX6VMQJzV9ssj1bSIqnmmsLNZBZRH7mpKEPrMSaYeYuhTG\nyD9taAVUTuBOvxqBNNLZ8+/L/c/py+te7pngbx8m5UHbqxTyBzEU1FV2xJ9/d5Vf\nq4nKXAfGpc/D1eeIlgT7oxTyxNAddqWZ4PO7xaf6k51LmgYBNLnjXZCrDccLq7B6\nkaDbwDk2KPoN4uPOmkJb01+U13gOSqpus0fd4JAwHrAfOO8dvwHeZN6dJJGb+Mku\nUjuxtPag71/xWI9uZDmiXVCp+QLty/Reo+bEKW4i0RPXeoVcSdFpL/XOnhNkPQOI\nVoKN1boRgNINQH5ECPc3TRGPxBWoAQ5rNjzX3Y8j+3pvTN3UupqmVxNObD7ZVM5G\n5oyHXDmWwG++fM/+CKM5lNe881xqnIwih5zqaGb0iQsBQKNeGlVYhCLNAe/56Nhq\nToyF1p0RUZQzxxPIxsr69cXiPvREzps/J+tNjZoJxVBhYRUld2tlHC66GwiUFB/f\n4lwKxUZ5qxB/msfDvSdE2xyx7bKkDeTEVlvkBsOlzG/zKVSnfbL5RYTLENG9Fny1\nl25PNtqGFd9fibeoU0j51uH7719dij9WkCEwT0gqr5s+6s0jQIdXXl5q5U4QpaYS\naiQ8CWvHc/b0XqcUcsGaxu79oyVOb5dBN9IfPHljRAuY2gmWokk=\n=Agy4\n-----END PGP SIGNATURE-----", "payload": "tree a7f82955403356d8126f3589da54f03ac3fdfd43\nparent 06da917b015a2eceac0e3cca22f9660edef25178\nparent faf80ad3979e58d238f41c22e7be06ff1276a359\nauthor kennytm <kennytm@gmail.com> 1536394058 +0800\ncommitter kennytm <kennytm@gmail.com> 1536402389 +0800\n\nRollup merge of #53932 - matthewjasper:remove-base-path, r=nikomatsakis\n\n[NLL] Remove base_place\n\nThis function was supposed to make `Box` less special. But\n\n* I think that the consensus is that MIR borrowck is going to fully special case `Box`\n* It wasn't implemented correctly, it's looking at the type of the wrong `Place`, resulting in weird behaviour:\n\n```rust\n#![feature(nll)]\ntype A = Box<i32>; // If this is changed to another type then this will compile.\n\npub fn foo(x: Box<(String, A)>) {\n    let a = x.0; // This will compile if these lines are swapped\n    let b = x.1;\n}\n```\n\nr? @nikomatsakis\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7569d9266e607df6579916e871d65480aaa8b50a", "html_url": "https://github.com/rust-lang/rust/commit/7569d9266e607df6579916e871d65480aaa8b50a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7569d9266e607df6579916e871d65480aaa8b50a/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06da917b015a2eceac0e3cca22f9660edef25178", "url": "https://api.github.com/repos/rust-lang/rust/commits/06da917b015a2eceac0e3cca22f9660edef25178", "html_url": "https://github.com/rust-lang/rust/commit/06da917b015a2eceac0e3cca22f9660edef25178"}, {"sha": "faf80ad3979e58d238f41c22e7be06ff1276a359", "url": "https://api.github.com/repos/rust-lang/rust/commits/faf80ad3979e58d238f41c22e7be06ff1276a359", "html_url": "https://github.com/rust-lang/rust/commit/faf80ad3979e58d238f41c22e7be06ff1276a359"}], "stats": {"total": 88, "additions": 18, "deletions": 70}, "files": [{"sha": "5050b5ab2b414ae77ab3bb34913e5f44ffaf3c60", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 4, "deletions": 46, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/7569d9266e607df6579916e871d65480aaa8b50a/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7569d9266e607df6579916e871d65480aaa8b50a/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=7569d9266e607df6579916e871d65480aaa8b50a", "patch": "@@ -1605,10 +1605,6 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         place_span: (&Place<'tcx>, Span),\n         flow_state: &Flows<'cx, 'gcx, 'tcx>,\n     ) {\n-        // FIXME: analogous code in check_loans first maps `place` to\n-        // its base_path ... but is that what we want here?\n-        let place = self.base_path(place_span.0);\n-\n         let maybe_uninits = &flow_state.uninits;\n \n         // Bad scenarios:\n@@ -1646,8 +1642,8 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         //\n         // This code covers scenarios 1, 2, and 3.\n \n-        debug!(\"check_if_full_path_is_moved place: {:?}\", place);\n-        match self.move_path_closest_to(place) {\n+        debug!(\"check_if_full_path_is_moved place: {:?}\", place_span.0);\n+        match self.move_path_closest_to(place_span.0) {\n             Ok(mpi) => {\n                 if maybe_uninits.contains(&mpi) {\n                     self.report_use_of_moved_or_uninitialized(\n@@ -1677,10 +1673,6 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         place_span: (&Place<'tcx>, Span),\n         flow_state: &Flows<'cx, 'gcx, 'tcx>,\n     ) {\n-        // FIXME: analogous code in check_loans first maps `place` to\n-        // its base_path ... but is that what we want here?\n-        let place = self.base_path(place_span.0);\n-\n         let maybe_uninits = &flow_state.uninits;\n \n         // Bad scenarios:\n@@ -1709,8 +1701,8 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         //\n         // This code covers scenario 1.\n \n-        debug!(\"check_if_path_or_subpath_is_moved place: {:?}\", place);\n-        if let Some(mpi) = self.move_path_for_place(place) {\n+        debug!(\"check_if_path_or_subpath_is_moved place: {:?}\", place_span.0);\n+        if let Some(mpi) = self.move_path_for_place(place_span.0) {\n             if let Some(child_mpi) = maybe_uninits.has_any_child_of(mpi) {\n                 self.report_use_of_moved_or_uninitialized(\n                     context,\n@@ -1813,11 +1805,6 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                             let tcx = self.tcx;\n                             match base.ty(self.mir, tcx).to_ty(tcx).sty {\n                                 ty::Adt(def, _) if def.has_dtor(tcx) => {\n-\n-                                    // FIXME: analogous code in\n-                                    // check_loans.rs first maps\n-                                    // `base` to its base_path.\n-\n                                     self.check_if_path_or_subpath_is_moved(\n                                         context, InitializationRequiringAction::Assignment,\n                                         (base, span), flow_state);\n@@ -2190,35 +2177,6 @@ enum Overlap {\n     Disjoint,\n }\n \n-impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n-    // FIXME (#16118): function intended to allow the borrow checker\n-    // to be less precise in its handling of Box while still allowing\n-    // moves out of a Box. They should be removed when/if we stop\n-    // treating Box specially (e.g. when/if DerefMove is added...)\n-\n-    fn base_path<'d>(&self, place: &'d Place<'tcx>) -> &'d Place<'tcx> {\n-        //! Returns the base of the leftmost (deepest) dereference of an\n-        //! Box in `place`. If there is no dereference of an Box\n-        //! in `place`, then it just returns `place` itself.\n-\n-        let mut cursor = place;\n-        let mut deepest = place;\n-        loop {\n-            let proj = match *cursor {\n-                Place::Promoted(_) |\n-                Place::Local(..) | Place::Static(..) => return deepest,\n-                Place::Projection(ref proj) => proj,\n-            };\n-            if proj.elem == ProjectionElem::Deref\n-                && place.ty(self.mir, self.tcx).to_ty(self.tcx).is_box()\n-            {\n-                deepest = &proj.base;\n-            }\n-            cursor = &proj.base;\n-        }\n-    }\n-}\n-\n #[derive(Copy, Clone, PartialEq, Eq, Debug)]\n struct Context {\n     kind: ContextKind,"}, {"sha": "0e380e90e75915b5f12f7df4a26414b267c3444e", "filename": "src/test/ui/borrowck/borrowck-box-insensitivity.nll.stderr", "status": "modified", "additions": 12, "deletions": 23, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/7569d9266e607df6579916e871d65480aaa8b50a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7569d9266e607df6579916e871d65480aaa8b50a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.nll.stderr?ref=7569d9266e607df6579916e871d65480aaa8b50a", "patch": "@@ -1,25 +1,14 @@\n-error[E0382]: use of moved value: `a.y`\n-  --> $DIR/borrowck-box-insensitivity.rs:46:14\n-   |\n-LL |     let _x = a.x;\n-   |              --- value moved here\n-LL |     //~^ value moved here\n-LL |     let _y = a.y; //~ ERROR use of moved\n-   |              ^^^ value used here after move\n-   |\n-   = note: move occurs because `a.x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n-\n-error[E0382]: use of moved value: `a.y`\n-  --> $DIR/borrowck-box-insensitivity.rs:108:14\n-   |\n-LL |     let _x = a.x.x;\n-   |              ----- value moved here\n-LL |     //~^ value moved here\n-LL |     let _y = a.y; //~ ERROR use of collaterally moved\n-   |              ^^^ value used here after move\n-   |\n-   = note: move occurs because `a.x.x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n+error: compilation successful\n+  --> $DIR/borrowck-box-insensitivity.rs:160:1\n+   |\n+LL | / fn main() {\n+LL | |     copy_after_move();\n+LL | |     move_after_move();\n+LL | |     borrow_after_move();\n+...  |\n+LL | |     mut_borrow_after_borrow_nested();\n+LL | | }\n+   | |_^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0382`."}, {"sha": "eabb8d7bca3fae511c73da3e4edd2f5d393e4041", "filename": "src/test/ui/borrowck/borrowck-box-insensitivity.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7569d9266e607df6579916e871d65480aaa8b50a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7569d9266e607df6579916e871d65480aaa8b50a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.rs?ref=7569d9266e607df6579916e871d65480aaa8b50a", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(box_syntax)]\n+#![feature(box_syntax, rustc_attrs)]\n \n struct A {\n     x: Box<isize>,\n@@ -156,6 +156,7 @@ fn mut_borrow_after_borrow_nested() {\n     //~^ mutable borrow occurs here\n }\n \n+#[rustc_error]\n fn main() {\n     copy_after_move();\n     move_after_move();"}]}