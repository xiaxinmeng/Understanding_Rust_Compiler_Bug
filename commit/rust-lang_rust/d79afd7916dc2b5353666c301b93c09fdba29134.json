{"sha": "d79afd7916dc2b5353666c301b93c09fdba29134", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3OWFmZDc5MTZkYzJiNTM1MzY2NmMzMDFiOTNjMDlmZGJhMjkxMzQ=", "commit": {"author": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-07-19T21:31:55Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-21T18:51:22Z"}, "message": "Improving move semantics for channel operations.\n\nThis lets us un-XFAIL task-comm-10.rs.", "tree": {"sha": "90c8c310a21a8126be1cd1eecaedcf3ddfd636e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90c8c310a21a8126be1cd1eecaedcf3ddfd636e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d79afd7916dc2b5353666c301b93c09fdba29134", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d79afd7916dc2b5353666c301b93c09fdba29134", "html_url": "https://github.com/rust-lang/rust/commit/d79afd7916dc2b5353666c301b93c09fdba29134", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d79afd7916dc2b5353666c301b93c09fdba29134/comments", "author": null, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ae4dcd41e72d197e3882835253745f79588b04a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ae4dcd41e72d197e3882835253745f79588b04a", "html_url": "https://github.com/rust-lang/rust/commit/3ae4dcd41e72d197e3882835253745f79588b04a"}], "stats": {"total": 45, "additions": 21, "deletions": 24}, "files": [{"sha": "aca28347cacfe784185b494bd423da7984f9fbef", "filename": "src/comp/middle/trans_comm.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d79afd7916dc2b5353666c301b93c09fdba29134/src%2Fcomp%2Fmiddle%2Ftrans_comm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d79afd7916dc2b5353666c301b93c09fdba29134/src%2Fcomp%2Fmiddle%2Ftrans_comm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_comm.rs?ref=d79afd7916dc2b5353666c301b93c09fdba29134", "patch": "@@ -247,10 +247,11 @@ fn recv_val(&@block_ctxt cx, ValueRef to, &@ast::expr from, &ty::t unit_ty,\n     bcx.build.Call(bcx.fcx.lcx.ccx.upcalls.recv,\n                    ~[bcx.fcx.lltaskptr, lldataptr, llportptr]);\n     auto data_load = load_if_immediate(bcx, to, unit_ty);\n-    auto cp = copy_val(bcx, action, to, data_load, unit_ty);\n-    bcx = cp.bcx;\n-    // TODO: Any cleanup need to be done here?\n-    ret rslt(bcx, to);\n+    //auto cp = copy_val(bcx, action, to, data_load, unit_ty);\n+    //bcx = cp.bcx;\n+\n+    add_clean_temp(cx, data_load, unit_ty);\n+    ret rslt(bcx, data_load);\n }\n \n // Does a deep copy of a value. This is needed for passing arguments to child"}, {"sha": "f2a2a9889645e6cff1425d550d598031f1f415d4", "filename": "src/rt/memory_region.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d79afd7916dc2b5353666c301b93c09fdba29134/src%2Frt%2Fmemory_region.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/d79afd7916dc2b5353666c301b93c09fdba29134/src%2Frt%2Fmemory_region.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fmemory_region.cpp?ref=d79afd7916dc2b5353666c301b93c09fdba29134", "patch": "@@ -4,7 +4,7 @@\n // NB: please do not commit code with this uncommented. It's\n // hugely expensive and should only be used as a last resort.\n //\n-#define TRACK_ALLOCATIONS\n+// #define TRACK_ALLOCATIONS\n \n #define MAGIC 0xbadc0ffe\n "}, {"sha": "92edaa77650a6bfa98de83b834a3158e9dde1c13", "filename": "src/rt/rust_chan.cpp", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d79afd7916dc2b5353666c301b93c09fdba29134/src%2Frt%2Frust_chan.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/d79afd7916dc2b5353666c301b93c09fdba29134/src%2Frt%2Frust_chan.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_chan.cpp?ref=d79afd7916dc2b5353666c301b93c09fdba29134", "patch": "@@ -4,12 +4,10 @@\n /**\n  * Create a new rust channel and associate it with the specified port.\n  */\n-rust_chan::rust_chan(rust_task *task,\n-                     maybe_proxy<rust_port> *port,\n+rust_chan::rust_chan(rust_kernel *kernel, maybe_proxy<rust_port> *port,\n                      size_t unit_sz)\n     : ref_count(1),\n-      kernel(task->kernel),\n-      task(task),\n+      kernel(kernel),\n       port(port),\n       buffer(kernel, unit_sz) {\n     if (port) {\n@@ -39,6 +37,7 @@ void rust_chan::associate(maybe_proxy<rust_port> *port) {\n             this, port);\n         ++this->ref_count;\n         this->task = port->referent()->task;\n+        this->task->ref();\n         this->port->referent()->chans.push(this);\n     }\n }\n@@ -59,6 +58,7 @@ void rust_chan::disassociate() {\n             \"disassociating chan: 0x%\" PRIxPTR \" from port: 0x%\" PRIxPTR,\n             this, port->referent());\n         --this->ref_count;\n+        --this->task->ref_count;\n         this->task = NULL;\n         port->referent()->chans.swap_delete(this);\n     }\n@@ -118,7 +118,7 @@ rust_chan *rust_chan::clone(maybe_proxy<rust_task> *target) {\n         target_task = target->as_proxy()->handle()->referent();\n     }\n     return new (target_task->kernel, \"cloned chan\")\n-        rust_chan(target_task, port, unit_sz);\n+        rust_chan(kernel, port, unit_sz);\n }\n \n /**"}, {"sha": "056d70cebe4d43bb27493bb1352a95576f80a33a", "filename": "src/rt/rust_chan.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d79afd7916dc2b5353666c301b93c09fdba29134/src%2Frt%2Frust_chan.h", "raw_url": "https://github.com/rust-lang/rust/raw/d79afd7916dc2b5353666c301b93c09fdba29134/src%2Frt%2Frust_chan.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_chan.h?ref=d79afd7916dc2b5353666c301b93c09fdba29134", "patch": "@@ -5,12 +5,13 @@ class rust_chan : public kernel_owned<rust_chan>,\n                   public rust_cond {\n public:\n     RUST_REFCOUNTED_WITH_DTOR(rust_chan, destroy())\n-    rust_chan(rust_task *task, maybe_proxy<rust_port> *port, size_t unit_sz);\n+    rust_chan(rust_kernel *kernel, maybe_proxy<rust_port> *port,\n+              size_t unit_sz);\n \n     ~rust_chan();\n \n     rust_kernel *kernel;\n-    smart_ptr<rust_task> task;\n+    rust_task *task;\n     maybe_proxy<rust_port> *port;\n     size_t idx;\n     circular_buffer buffer;"}, {"sha": "19592f4c8695f1c64bd799aca7db9551b0c6aed3", "filename": "src/rt/rust_port.cpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d79afd7916dc2b5353666c301b93c09fdba29134/src%2Frt%2Frust_port.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/d79afd7916dc2b5353666c301b93c09fdba29134/src%2Frt%2Frust_port.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_port.cpp?ref=d79afd7916dc2b5353666c301b93c09fdba29134", "patch": "@@ -10,8 +10,8 @@ rust_port::rust_port(rust_task *task, size_t unit_sz)\n         PRIxPTR, (uintptr_t)task, unit_sz, (uintptr_t)this);\n \n     // Allocate a remote channel, for remote channel data.\n-    remote_channel = new (task->kernel, \"remote chan\")\n-        rust_chan(task, this, unit_sz);\n+    remote_channel = new (kernel, \"remote chan\")\n+        rust_chan(kernel, this, unit_sz);\n }\n \n rust_port::~rust_port() {"}, {"sha": "8313399130ca95c7bfa130e363f43db13bab04fa", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d79afd7916dc2b5353666c301b93c09fdba29134/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/d79afd7916dc2b5353666c301b93c09fdba29134/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=d79afd7916dc2b5353666c301b93c09fdba29134", "patch": "@@ -130,7 +130,7 @@ upcall_new_chan(rust_task *task, rust_port *port) {\n         (uintptr_t) task, task->name, port);\n     I(sched, port);\n     return new (task->kernel, \"rust_chan\")\n-        rust_chan(task, port, port->unit_sz);\n+        rust_chan(task->kernel, port, port->unit_sz);\n }\n \n /**"}, {"sha": "3b96caf7483b5f086c870455f0761c2752aadb89", "filename": "src/test/run-pass/task-comm-10.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d79afd7916dc2b5353666c301b93c09fdba29134/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d79afd7916dc2b5353666c301b93c09fdba29134/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs?ref=d79afd7916dc2b5353666c301b93c09fdba29134", "patch": "@@ -1,6 +1,4 @@\n // xfail-stage0\n-// xfail-stage1\n-// xfail-stage2\n \n use std;\n import std::task;"}, {"sha": "4d8a9bb858aac90fb3a9c434fe91919d7f02d88c", "filename": "src/test/run-pass/task-comm-16.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d79afd7916dc2b5353666c301b93c09fdba29134/src%2Ftest%2Frun-pass%2Ftask-comm-16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d79afd7916dc2b5353666c301b93c09fdba29134/src%2Ftest%2Frun-pass%2Ftask-comm-16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-16.rs?ref=d79afd7916dc2b5353666c301b93c09fdba29134", "patch": "@@ -1,6 +1,3 @@\n-\n-\n-\n // -*- rust -*-\n \n // Tests of ports and channels on various types\n@@ -19,11 +16,11 @@ fn test_rec() {\n }\n \n fn test_vec() {\n-    let port[vec[int]] po = port();\n-    let chan[vec[int]] ch = chan(po);\n-    let vec[int] v0 = [0, 1, 2];\n+    let port[int[]] po = port();\n+    let chan[int[]] ch = chan(po);\n+    let int[] v0 = ~[0, 1, 2];\n     ch <| v0;\n-    let vec[int] v1;\n+    let int[] v1;\n     po |> v1;\n     assert (v1.(0) == 0);\n     assert (v1.(1) == 1);"}]}