{"sha": "285c25f7f4fd5e824da6b6d670a141535f948750", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4NWMyNWY3ZjRmZDVlODI0ZGE2YjZkNjcwYTE0MTUzNWY5NDg3NTA=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-02-06T14:39:14Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-02-08T01:13:28Z"}, "message": "rustc: put range asserts on `char` loads.\n\nA `char` is a Unicode codepoint, and so ranges from 0--0x10FFFF (with\nthe surrogate gaps): we may as well inform LLVM of this.", "tree": {"sha": "661892df7f5c7056f51628fd7b763553b056f261", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/661892df7f5c7056f51628fd7b763553b056f261"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/285c25f7f4fd5e824da6b6d670a141535f948750", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/285c25f7f4fd5e824da6b6d670a141535f948750", "html_url": "https://github.com/rust-lang/rust/commit/285c25f7f4fd5e824da6b6d670a141535f948750", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/285c25f7f4fd5e824da6b6d670a141535f948750/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1dd18801216b26595a7b374e5dc8ee32eb577954", "url": "https://api.github.com/repos/rust-lang/rust/commits/1dd18801216b26595a7b374e5dc8ee32eb577954", "html_url": "https://github.com/rust-lang/rust/commit/1dd18801216b26595a7b374e5dc8ee32eb577954"}], "stats": {"total": 4, "additions": 4, "deletions": 0}, "files": [{"sha": "35fe1d781c1328e20f1f31abaa82bea4926b8a58", "filename": "src/librustc/middle/trans/datum.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/285c25f7f4fd5e824da6b6d670a141535f948750/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/285c25f7f4fd5e824da6b6d670a141535f948750/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs?ref=285c25f7f4fd5e824da6b6d670a141535f948750", "patch": "@@ -546,6 +546,10 @@ fn load<'a>(bcx: &'a Block<'a>, llptr: ValueRef, ty: ty::t) -> ValueRef {\n         C_undef(type_of::type_of(bcx.ccx(), ty))\n     } else if ty::type_is_bool(ty) {\n         LoadRangeAssert(bcx, llptr, 0, 2, lib::llvm::True)\n+    } else if ty::type_is_char(ty) {\n+        // a char is a unicode codepoint, and so takes values from 0\n+        // to 0x10FFFF inclusive only.\n+        LoadRangeAssert(bcx, llptr, 0, 0x10FFFF + 1, lib::llvm::False)\n     } else {\n         Load(bcx, llptr)\n     }"}]}