{"sha": "43d5a4965308ec4b594725c0bd02cb046bdb730c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzZDVhNDk2NTMwOGVjNGI1OTQ3MjVjMGJkMDJjYjA0NmJkYjczMGM=", "commit": {"author": {"name": "Pascal Hertleif", "email": "pascal@technocreatives.com", "date": "2019-05-25T14:23:58Z"}, "committer": {"name": "Pascal Hertleif", "email": "pascal@technocreatives.com", "date": "2019-05-27T09:26:35Z"}, "message": "More clever highlighting, incl draft for structs", "tree": {"sha": "3a6e2965b065e61310deaa4186a8cec6535fd244", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a6e2965b065e61310deaa4186a8cec6535fd244"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43d5a4965308ec4b594725c0bd02cb046bdb730c", "comment_count": 0, "verification": {"verified": false, "reason": "bad_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niF0EABECAB0WIQQ4AX3IqIzUAd4RqS7tuxqNIEegdAUCXOutSwAKCRDtuxqNIEeg\ndBWhAKC8j72Pj0ipnHZQq6m5ZS5sIHhgmQCdHjowSWWxsYk0uwSoEat+WgYZY64=\n=79hs\n-----END PGP SIGNATURE-----", "payload": "tree 3a6e2965b065e61310deaa4186a8cec6535fd244\nparent ed89b0638b1dbf8f9a33d9a95e829e602142bb05\nauthor Pascal Hertleif <pascal@technocreatives.com> 1558794238 +0200\ncommitter Pascal Hertleif <pascal@technocreatives.com> 1558949195 +0200\n\nMore clever highlighting, incl draft for structs\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43d5a4965308ec4b594725c0bd02cb046bdb730c", "html_url": "https://github.com/rust-lang/rust/commit/43d5a4965308ec4b594725c0bd02cb046bdb730c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43d5a4965308ec4b594725c0bd02cb046bdb730c/comments", "author": {"login": "killercup", "id": 20063, "node_id": "MDQ6VXNlcjIwMDYz", "avatar_url": "https://avatars.githubusercontent.com/u/20063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killercup", "html_url": "https://github.com/killercup", "followers_url": "https://api.github.com/users/killercup/followers", "following_url": "https://api.github.com/users/killercup/following{/other_user}", "gists_url": "https://api.github.com/users/killercup/gists{/gist_id}", "starred_url": "https://api.github.com/users/killercup/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killercup/subscriptions", "organizations_url": "https://api.github.com/users/killercup/orgs", "repos_url": "https://api.github.com/users/killercup/repos", "events_url": "https://api.github.com/users/killercup/events{/privacy}", "received_events_url": "https://api.github.com/users/killercup/received_events", "type": "User", "site_admin": false}, "committer": {"login": "killercup", "id": 20063, "node_id": "MDQ6VXNlcjIwMDYz", "avatar_url": "https://avatars.githubusercontent.com/u/20063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killercup", "html_url": "https://github.com/killercup", "followers_url": "https://api.github.com/users/killercup/followers", "following_url": "https://api.github.com/users/killercup/following{/other_user}", "gists_url": "https://api.github.com/users/killercup/gists{/gist_id}", "starred_url": "https://api.github.com/users/killercup/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killercup/subscriptions", "organizations_url": "https://api.github.com/users/killercup/orgs", "repos_url": "https://api.github.com/users/killercup/repos", "events_url": "https://api.github.com/users/killercup/events{/privacy}", "received_events_url": "https://api.github.com/users/killercup/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed89b0638b1dbf8f9a33d9a95e829e602142bb05", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed89b0638b1dbf8f9a33d9a95e829e602142bb05", "html_url": "https://github.com/rust-lang/rust/commit/ed89b0638b1dbf8f9a33d9a95e829e602142bb05"}], "stats": {"total": 573, "additions": 159, "deletions": 414}, "files": [{"sha": "68c5f78747d3461135294fad96ae94939a248c04", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/43d5a4965308ec4b594725c0bd02cb046bdb730c/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/43d5a4965308ec4b594725c0bd02cb046bdb730c/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=43d5a4965308ec4b594725c0bd02cb046bdb730c", "patch": "@@ -1155,6 +1155,7 @@ dependencies = [\n  \"ra_prof 0.1.0\",\n  \"ra_syntax 0.1.0\",\n  \"ra_text_edit 0.1.0\",\n+ \"rand 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rayon 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"relative-path 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\","}, {"sha": "bdc7a76c6eef7b23837b2eccefae9f58e688f1da", "filename": "crates/ra_cli/src/main.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/43d5a4965308ec4b594725c0bd02cb046bdb730c/crates%2Fra_cli%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43d5a4965308ec4b594725c0bd02cb046bdb730c/crates%2Fra_cli%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fmain.rs?ref=43d5a4965308ec4b594725c0bd02cb046bdb730c", "patch": "@@ -16,7 +16,10 @@ fn main() -> Result<()> {\n         .setting(clap::AppSettings::SubcommandRequiredElseHelp)\n         .subcommand(SubCommand::with_name(\"parse\").arg(Arg::with_name(\"no-dump\").long(\"--no-dump\")))\n         .subcommand(SubCommand::with_name(\"symbols\"))\n-        .subcommand(SubCommand::with_name(\"highlight\"))\n+        .subcommand(\n+            SubCommand::with_name(\"highlight\")\n+                .arg(Arg::with_name(\"rainbow\").short(\"r\").long(\"rainbow\"))\n+        )\n         .subcommand(\n             SubCommand::with_name(\"analysis-stats\")\n                 .arg(Arg::with_name(\"verbose\").short(\"v\").long(\"verbose\"))\n@@ -39,9 +42,9 @@ fn main() -> Result<()> {\n                 println!(\"{:?}\", s);\n             }\n         }\n-        (\"highlight\", _) => {\n+        (\"highlight\", Some(matches)) => {\n             let (analysis, file_id) = Analysis::from_single_file(read_stdin()?);\n-            let html = analysis.highlight_as_html(file_id).unwrap();\n+            let html = analysis.highlight_as_html(file_id, matches.is_present(\"rainbow\")).unwrap();\n             println!(\"{}\", html);\n         }\n         (\"analysis-stats\", Some(matches)) => {"}, {"sha": "8939e9d79dedb8284743f4e7e69ebfbacc6e06ce", "filename": "crates/ra_ide_api/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/43d5a4965308ec4b594725c0bd02cb046bdb730c/crates%2Fra_ide_api%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/43d5a4965308ec4b594725c0bd02cb046bdb730c/crates%2Fra_ide_api%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2FCargo.toml?ref=43d5a4965308ec4b594725c0bd02cb046bdb730c", "patch": "@@ -15,6 +15,7 @@ rustc-hash = \"1.0\"\n parking_lot = \"0.7.0\"\n unicase = \"2.2.0\"\n superslice = \"1.0.0\"\n+rand = \"0.6.5\"\n \n jemallocator = { version = \"0.1.9\", optional = true }\n jemalloc-ctl = { version = \"0.2.0\", optional = true }"}, {"sha": "65a3b591ae2567b654dfcbfe2107ae48cbb98835", "filename": "crates/ra_ide_api/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43d5a4965308ec4b594725c0bd02cb046bdb730c/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43d5a4965308ec4b594725c0bd02cb046bdb730c/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Flib.rs?ref=43d5a4965308ec4b594725c0bd02cb046bdb730c", "patch": "@@ -464,7 +464,7 @@ impl Analysis {\n \n     /// Computes syntax highlighting for the given file.\n     pub fn highlight_as_html(&self, file_id: FileId) -> Cancelable<String> {\n-        self.with_db(|db| syntax_highlighting::highlight_as_html(db, file_id))\n+        self.with_db(|db| syntax_highlighting::highlight_as_html(db, file_id, true))\n     }\n \n     /// Computes completions at the given position."}, {"sha": "4f4ed62a1bf363532a5d324a7f4a2f4c063242bb", "filename": "crates/ra_ide_api/src/snapshots/highlighting.html", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/43d5a4965308ec4b594725c0bd02cb046bdb730c/crates%2Fra_ide_api%2Fsrc%2Fsnapshots%2Fhighlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/43d5a4965308ec4b594725c0bd02cb046bdb730c/crates%2Fra_ide_api%2Fsrc%2Fsnapshots%2Fhighlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsnapshots%2Fhighlighting.html?ref=43d5a4965308ec4b594725c0bd02cb046bdb730c", "patch": "@@ -1,10 +1,7 @@\n \n <style>\n-pre {\n-    color: #DCDCCC;\n-    background-color: #3F3F3F;\n-    font-size: 22px;\n-}\n+body       { margin: 0; }\n+pre        { color: #DCDCCC; background: #3F3F3F; font-size: 22px; padding: 0.4em; }\n \n .comment   { color: #7F9F7F; }\n .string    { color: #CC9393; }\n@@ -19,13 +16,11 @@\n .keyword           { color: #F0DFAF; }\n .keyword\\.unsafe  { color: #F0DFAF; font-weight: bold; }\n .keyword\\.control { color: #DC8CC3; }\n-\n </style>\n-<pre><code>\n-<span class=\"attribute\">#</span><span class=\"attribute\">[</span><span class=\"attribute\">derive</span><span class=\"attribute\">(</span><span class=\"attribute\">Clone</span><span class=\"attribute\">,</span><span class=\"attribute\"> </span><span class=\"attribute\">Debug</span><span class=\"attribute\">)</span><span class=\"attribute\">]</span>\n+<pre><code><span class=\"attribute\">#</span><span class=\"attribute\">[</span><span class=\"attribute\">derive</span><span class=\"attribute\">(</span><span class=\"attribute\">Clone</span><span class=\"attribute\">,</span><span class=\"attribute\"> </span><span class=\"attribute\">Debug</span><span class=\"attribute\">)</span><span class=\"attribute\">]</span>\n <span class=\"keyword\">struct</span> <span class=\"function\">Foo</span> {\n-    <span class=\"keyword\">pub</span> <span class=\"function\">x</span>: <span class=\"text\">i32</span>,\n-    <span class=\"keyword\">pub</span> <span class=\"function\">y</span>: <span class=\"text\">i32</span>,\n+    <span class=\"keyword\">pub</span> <span class=\"variable\" data-binding-hash=\"12067179602561426350\" style=\"color: hsl(78,84%,47%);\">x</span>: <span class=\"text\">i32</span>,\n+    <span class=\"keyword\">pub</span> <span class=\"variable\" data-binding-hash=\"15562018766631452210\" style=\"color: hsl(318,95%,78%);\">y</span>: <span class=\"text\">i32</span>,\n }\n \n <span class=\"keyword\">fn</span> <span class=\"function\">foo</span>&lt;<span class=\"type function\">T</span>&gt;() -&gt; <span class=\"type\">T</span> {\n@@ -36,10 +31,9 @@\n <span class=\"keyword\">fn</span> <span class=\"function\">main</span>() {\n     <span class=\"macro\">println</span><span class=\"macro\">!</span>(<span class=\"string\">\"Hello, {}!\"</span>, <span class=\"literal\">92</span>);\n \n-    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"function\">vec</span> = <span class=\"text\">Vec</span>::<span class=\"text\">new</span>();\n+    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable\" data-binding-hash=\"9636295041291189729\" style=\"color: hsl(51,57%,74%);\">vec</span> = <span class=\"text\">Vec</span>::<span class=\"text\">new</span>();\n     <span class=\"keyword.control\">if</span> <span class=\"keyword\">true</span> {\n-        <span class=\"text\">vec</span>.<span class=\"text\">push</span>(<span class=\"type\">Foo</span> { <span class=\"field\">x</span>: <span class=\"literal\">0</span>, <span class=\"field\">y</span>: <span class=\"literal\">1</span> });\n+        <span class=\"variable\" data-binding-hash=\"8496027264380925433\" style=\"color: hsl(18,48%,55%);\">vec</span>.<span class=\"text\">push</span>(<span class=\"type\">Foo</span> { <span class=\"field\" data-binding-hash=\"17368948500121423555\" style=\"color: hsl(49,97%,70%);\">x</span>: <span class=\"literal\">0</span>, <span class=\"field\" data-binding-hash=\"13663097548341495469\" style=\"color: hsl(26,51%,46%);\">y</span>: <span class=\"literal\">1</span> });\n     }\n-    <span class=\"keyword.unsafe\">unsafe</span> { <span class=\"text\">vec</span>.<span class=\"text\">set_len</span>(<span class=\"literal\">0</span>); }\n-}\n-</code></pre>\n\\ No newline at end of file\n+    <span class=\"keyword.unsafe\">unsafe</span> { <span class=\"variable\" data-binding-hash=\"8496027264380925433\" style=\"color: hsl(18,48%,55%);\">vec</span>.<span class=\"text\">set_len</span>(<span class=\"literal\">0</span>); }\n+}</code></pre>\n\\ No newline at end of file"}, {"sha": "729d129d070c8d0df91c7cd5e649366efd509498", "filename": "crates/ra_ide_api/src/snapshots/rainbow_highlighting.html", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/43d5a4965308ec4b594725c0bd02cb046bdb730c/crates%2Fra_ide_api%2Fsrc%2Fsnapshots%2Frainbow_highlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/43d5a4965308ec4b594725c0bd02cb046bdb730c/crates%2Fra_ide_api%2Fsrc%2Fsnapshots%2Frainbow_highlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsnapshots%2Frainbow_highlighting.html?ref=43d5a4965308ec4b594725c0bd02cb046bdb730c", "patch": "@@ -0,0 +1,27 @@\n+\n+<style>\n+body       { margin: 0; }\n+pre        { color: #DCDCCC; background: #3F3F3F; font-size: 22px; padding: 0.4em; }\n+\n+.comment   { color: #7F9F7F; }\n+.string    { color: #CC9393; }\n+.function  { color: #93E0E3; }\n+.parameter { color: #94BFF3; }\n+.builtin   { color: #DD6718; }\n+.text      { color: #DCDCCC; }\n+.attribute { color: #BFEBBF; }\n+.literal   { color: #DFAF8F; }\n+.macro     { color: #DFAF8F; }\n+\n+.keyword           { color: #F0DFAF; }\n+.keyword\\.unsafe  { color: #F0DFAF; font-weight: bold; }\n+.keyword\\.control { color: #DC8CC3; }\n+</style>\n+<pre><code><span class=\"keyword\">fn</span> <span class=\"function\">main</span>() {\n+    <span class=\"keyword\">let</span> <span class=\"variable\" data-binding-hash=\"3888301305669440875\" style=\"color: hsl(242,59%,59%);\">hello</span> = <span class=\"string\">\"hello\"</span>;\n+    <span class=\"keyword\">let</span> <span class=\"variable\" data-binding-hash=\"5695551762718493399\" style=\"color: hsl(272,48%,45%);\">x</span> = <span class=\"variable\" data-binding-hash=\"3888301305669440875\" style=\"color: hsl(242,59%,59%);\">hello</span>.<span class=\"text\">to_string</span>();\n+    <span class=\"keyword\">let</span> <span class=\"variable\" data-binding-hash=\"5435401749617022797\" style=\"color: hsl(353,77%,74%);\">y</span> = <span class=\"variable\" data-binding-hash=\"3888301305669440875\" style=\"color: hsl(242,59%,59%);\">hello</span>.<span class=\"text\">to_string</span>();\n+\n+    <span class=\"keyword\">let</span> <span class=\"variable\" data-binding-hash=\"1903207544374197704\" style=\"color: hsl(58,61%,61%);\">x</span> = <span class=\"string\">\"other color please!\"</span>;\n+    <span class=\"keyword\">let</span> <span class=\"variable\" data-binding-hash=\"14878783531007968800\" style=\"color: hsl(265,73%,83%);\">y</span> = <span class=\"variable\" data-binding-hash=\"1903207544374197704\" style=\"color: hsl(58,61%,61%);\">x</span>.<span class=\"text\">to_string</span>();\n+}</code></pre>\n\\ No newline at end of file"}, {"sha": "e50003b3c087f3cc177a8b9e65e319014e1d8234", "filename": "crates/ra_ide_api/src/snapshots/tests__highlighting.snap", "status": "removed", "additions": 0, "deletions": 192, "changes": 192, "blob_url": "https://github.com/rust-lang/rust/blob/ed89b0638b1dbf8f9a33d9a95e829e602142bb05/crates%2Fra_ide_api%2Fsrc%2Fsnapshots%2Ftests__highlighting.snap", "raw_url": "https://github.com/rust-lang/rust/raw/ed89b0638b1dbf8f9a33d9a95e829e602142bb05/crates%2Fra_ide_api%2Fsrc%2Fsnapshots%2Ftests__highlighting.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsnapshots%2Ftests__highlighting.snap?ref=ed89b0638b1dbf8f9a33d9a95e829e602142bb05", "patch": "@@ -1,192 +0,0 @@\n----\n-created: \"2019-05-25T11:24:53.486036Z\"\n-creator: insta@0.8.1\n-source: crates/ra_ide_api/src/syntax_highlighting.rs\n-expression: result\n----\n-Ok(\n-    [\n-        HighlightedRange {\n-            range: [1; 24),\n-            tag: \"attribute\",\n-            id: None,\n-        },\n-        HighlightedRange {\n-            range: [25; 31),\n-            tag: \"keyword\",\n-            id: None,\n-        },\n-        HighlightedRange {\n-            range: [32; 35),\n-            tag: \"variable\",\n-            id: Some(\n-                8465336196764640996,\n-            ),\n-        },\n-        HighlightedRange {\n-            range: [42; 45),\n-            tag: \"keyword\",\n-            id: None,\n-        },\n-        HighlightedRange {\n-            range: [46; 47),\n-            tag: \"variable\",\n-            id: Some(\n-                176272420896316891,\n-            ),\n-        },\n-        HighlightedRange {\n-            range: [49; 52),\n-            tag: \"text\",\n-            id: None,\n-        },\n-        HighlightedRange {\n-            range: [58; 61),\n-            tag: \"keyword\",\n-            id: None,\n-        },\n-        HighlightedRange {\n-            range: [62; 63),\n-            tag: \"variable\",\n-            id: Some(\n-                15061637676198917049,\n-            ),\n-        },\n-        HighlightedRange {\n-            range: [65; 68),\n-            tag: \"text\",\n-            id: None,\n-        },\n-        HighlightedRange {\n-            range: [73; 75),\n-            tag: \"keyword\",\n-            id: None,\n-        },\n-        HighlightedRange {\n-            range: [76; 79),\n-            tag: \"variable\",\n-            id: Some(\n-                14077410872302487760,\n-            ),\n-        },\n-        HighlightedRange {\n-            range: [80; 81),\n-            tag: \"type\",\n-            id: None,\n-        },\n-        HighlightedRange {\n-            range: [80; 81),\n-            tag: \"variable\",\n-            id: Some(\n-                8379786015941272633,\n-            ),\n-        },\n-        HighlightedRange {\n-            range: [88; 89),\n-            tag: \"type\",\n-            id: None,\n-        },\n-        HighlightedRange {\n-            range: [96; 110),\n-            tag: \"macro\",\n-            id: None,\n-        },\n-        HighlightedRange {\n-            range: [117; 127),\n-            tag: \"comment\",\n-            id: None,\n-        },\n-        HighlightedRange {\n-            range: [128; 130),\n-            tag: \"keyword\",\n-            id: None,\n-        },\n-        HighlightedRange {\n-            range: [131; 135),\n-            tag: \"variable\",\n-            id: Some(\n-                5766414492220109266,\n-            ),\n-        },\n-        HighlightedRange {\n-            range: [145; 153),\n-            tag: \"macro\",\n-            id: None,\n-        },\n-        HighlightedRange {\n-            range: [154; 166),\n-            tag: \"string\",\n-            id: None,\n-        },\n-        HighlightedRange {\n-            range: [168; 170),\n-            tag: \"literal\",\n-            id: None,\n-        },\n-        HighlightedRange {\n-            range: [178; 181),\n-            tag: \"keyword\",\n-            id: None,\n-        },\n-        HighlightedRange {\n-            range: [182; 185),\n-            tag: \"keyword\",\n-            id: None,\n-        },\n-        HighlightedRange {\n-            range: [186; 189),\n-            tag: \"macro\",\n-            id: None,\n-        },\n-        HighlightedRange {\n-            range: [197; 200),\n-            tag: \"macro\",\n-            id: None,\n-        },\n-        HighlightedRange {\n-            range: [192; 195),\n-            tag: \"text\",\n-            id: None,\n-        },\n-        HighlightedRange {\n-            range: [208; 211),\n-            tag: \"macro\",\n-            id: None,\n-        },\n-        HighlightedRange {\n-            range: [212; 216),\n-            tag: \"macro\",\n-            id: None,\n-        },\n-        HighlightedRange {\n-            range: [226; 227),\n-            tag: \"literal\",\n-            id: None,\n-        },\n-        HighlightedRange {\n-            range: [232; 233),\n-            tag: \"literal\",\n-            id: None,\n-        },\n-        HighlightedRange {\n-            range: [242; 248),\n-            tag: \"keyword.unsafe\",\n-            id: None,\n-        },\n-        HighlightedRange {\n-            range: [251; 254),\n-            tag: \"text\",\n-            id: None,\n-        },\n-        HighlightedRange {\n-            range: [255; 262),\n-            tag: \"text\",\n-            id: None,\n-        },\n-        HighlightedRange {\n-            range: [263; 264),\n-            tag: \"literal\",\n-            id: None,\n-        },\n-    ],\n-)"}, {"sha": "84cd521a24e4bee911222e3433377b3c6473d4ff", "filename": "crates/ra_ide_api/src/snapshots/tests__rainbow_highlighting.snap", "status": "removed", "additions": 0, "deletions": 128, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/ed89b0638b1dbf8f9a33d9a95e829e602142bb05/crates%2Fra_ide_api%2Fsrc%2Fsnapshots%2Ftests__rainbow_highlighting.snap", "raw_url": "https://github.com/rust-lang/rust/raw/ed89b0638b1dbf8f9a33d9a95e829e602142bb05/crates%2Fra_ide_api%2Fsrc%2Fsnapshots%2Ftests__rainbow_highlighting.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsnapshots%2Ftests__rainbow_highlighting.snap?ref=ed89b0638b1dbf8f9a33d9a95e829e602142bb05", "patch": "@@ -1,128 +0,0 @@\n----\n-created: \"2019-05-25T11:21:56.117898Z\"\n-creator: insta@0.8.1\n-source: crates/ra_ide_api/src/syntax_highlighting.rs\n-expression: result\n----\n-Ok(\n-    [\n-        HighlightedRange {\n-            range: [1; 3),\n-            tag: \"keyword\",\n-            id: None,\n-        },\n-        HighlightedRange {\n-            range: [4; 8),\n-            tag: \"variable\",\n-            id: Some(\n-                5766414492220109266,\n-            ),\n-        },\n-        HighlightedRange {\n-            range: [17; 20),\n-            tag: \"keyword\",\n-            id: None,\n-        },\n-        HighlightedRange {\n-            range: [21; 26),\n-            tag: \"variable\",\n-            id: Some(\n-                15975256018338854530,\n-            ),\n-        },\n-        HighlightedRange {\n-            range: [29; 36),\n-            tag: \"string\",\n-            id: None,\n-        },\n-        HighlightedRange {\n-            range: [42; 45),\n-            tag: \"keyword\",\n-            id: None,\n-        },\n-        HighlightedRange {\n-            range: [46; 47),\n-            tag: \"variable\",\n-            id: Some(\n-                176272420896316891,\n-            ),\n-        },\n-        HighlightedRange {\n-            range: [50; 55),\n-            tag: \"variable\",\n-            id: Some(\n-                15975256018338854530,\n-            ),\n-        },\n-        HighlightedRange {\n-            range: [56; 65),\n-            tag: \"text\",\n-            id: None,\n-        },\n-        HighlightedRange {\n-            range: [73; 76),\n-            tag: \"keyword\",\n-            id: None,\n-        },\n-        HighlightedRange {\n-            range: [77; 78),\n-            tag: \"variable\",\n-            id: Some(\n-                15061637676198917049,\n-            ),\n-        },\n-        HighlightedRange {\n-            range: [81; 86),\n-            tag: \"variable\",\n-            id: Some(\n-                15975256018338854530,\n-            ),\n-        },\n-        HighlightedRange {\n-            range: [87; 96),\n-            tag: \"text\",\n-            id: None,\n-        },\n-        HighlightedRange {\n-            range: [105; 108),\n-            tag: \"keyword\",\n-            id: None,\n-        },\n-        HighlightedRange {\n-            range: [109; 110),\n-            tag: \"variable\",\n-            id: Some(\n-                1714508680417729339,\n-            ),\n-        },\n-        HighlightedRange {\n-            range: [113; 134),\n-            tag: \"string\",\n-            id: None,\n-        },\n-        HighlightedRange {\n-            range: [140; 143),\n-            tag: \"keyword\",\n-            id: None,\n-        },\n-        HighlightedRange {\n-            range: [144; 145),\n-            tag: \"variable\",\n-            id: Some(\n-                15953336624848413466,\n-            ),\n-        },\n-        HighlightedRange {\n-            range: [148; 149),\n-            tag: \"variable\",\n-            id: Some(\n-                1714508680417729339,\n-            ),\n-        },\n-        HighlightedRange {\n-            range: [150; 159),\n-            tag: \"text\",\n-            id: None,\n-        },\n-    ],\n-)"}, {"sha": "8981c85e65cf546c68951faa9f96d80cb927bd62", "filename": "crates/ra_ide_api/src/syntax_highlighting.rs", "status": "modified", "additions": 114, "deletions": 71, "changes": 185, "blob_url": "https://github.com/rust-lang/rust/blob/43d5a4965308ec4b594725c0bd02cb046bdb730c/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43d5a4965308ec4b594725c0bd02cb046bdb730c/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs?ref=43d5a4965308ec4b594725c0bd02cb046bdb730c", "patch": "@@ -10,7 +10,7 @@ use crate::{FileId, db::RootDatabase};\n pub struct HighlightedRange {\n     pub range: TextRange,\n     pub tag: &'static str,\n-    pub id: Option<u64>,\n+    pub binding_hash: Option<u64>,\n }\n \n fn is_control_keyword(kind: SyntaxKind) -> bool {\n@@ -30,15 +30,18 @@ fn is_control_keyword(kind: SyntaxKind) -> bool {\n \n pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Vec<HighlightedRange> {\n     let _p = profile(\"highlight\");\n-\n     let source_file = db.parse(file_id);\n \n-    fn hash<T: std::hash::Hash + std::fmt::Debug>(x: T) -> u64 {\n-        use std::{collections::hash_map::DefaultHasher, hash::Hasher};\n+    fn calc_binding_hash(file_id: FileId, text: &SmolStr, shadow_count: u32) -> u64 {\n+        fn hash<T: std::hash::Hash + std::fmt::Debug>(x: T) -> u64 {\n+            use std::{collections::hash_map::DefaultHasher, hash::Hasher};\n+\n+            let mut hasher = DefaultHasher::new();\n+            x.hash(&mut hasher);\n+            hasher.finish()\n+        }\n \n-        let mut hasher = DefaultHasher::new();\n-        x.hash(&mut hasher);\n-        hasher.finish()\n+        hash((file_id, text, shadow_count))\n     }\n \n     // Visited nodes to handle highlighting priorities\n@@ -50,66 +53,92 @@ pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Vec<HighlightedRa\n         if highlighted.contains(&node) {\n             continue;\n         }\n-        let (tag, id) = match node.kind() {\n-            COMMENT => (\"comment\", None),\n-            STRING | RAW_STRING | RAW_BYTE_STRING | BYTE_STRING => (\"string\", None),\n-            ATTR => (\"attribute\", None),\n+        let mut binding_hash = None;\n+        let tag = match node.kind() {\n+            COMMENT => \"comment\",\n+            STRING | RAW_STRING | RAW_BYTE_STRING | BYTE_STRING => \"string\",\n+            ATTR => \"attribute\",\n             NAME_REF => {\n-                if let Some(name_ref) = node.as_ast_node::<ast::NameRef>() {\n+                if let Some(name_ref) = node.as_node().and_then(ast::NameRef::cast) {\n                     use crate::name_ref_kind::{classify_name_ref, NameRefKind::*};\n                     use hir::{ModuleDef, ImplItem};\n \n                     // FIXME: try to reuse the SourceAnalyzers\n                     let analyzer = hir::SourceAnalyzer::new(db, file_id, name_ref.syntax(), None);\n                     match classify_name_ref(db, &analyzer, name_ref) {\n-                        Some(Method(_)) => (\"function\", None),\n-                        Some(Macro(_)) => (\"macro\", None),\n-                        Some(FieldAccess(_)) => (\"field\", None),\n-                        Some(AssocItem(ImplItem::Method(_))) => (\"function\", None),\n-                        Some(AssocItem(ImplItem::Const(_))) => (\"constant\", None),\n-                        Some(AssocItem(ImplItem::TypeAlias(_))) => (\"type\", None),\n-                        Some(Def(ModuleDef::Module(_))) => (\"module\", None),\n-                        Some(Def(ModuleDef::Function(_))) => (\"function\", None),\n-                        Some(Def(ModuleDef::Struct(_))) => (\"type\", None),\n-                        Some(Def(ModuleDef::Union(_))) => (\"type\", None),\n-                        Some(Def(ModuleDef::Enum(_))) => (\"type\", None),\n-                        Some(Def(ModuleDef::EnumVariant(_))) => (\"constant\", None),\n-                        Some(Def(ModuleDef::Const(_))) => (\"constant\", None),\n-                        Some(Def(ModuleDef::Static(_))) => (\"constant\", None),\n-                        Some(Def(ModuleDef::Trait(_))) => (\"type\", None),\n-                        Some(Def(ModuleDef::TypeAlias(_))) => (\"type\", None),\n-                        Some(SelfType(_)) => (\"type\", None),\n-                        Some(Pat(ptr)) => (\"variable\", Some(hash({\n-                            let text = ptr.syntax_node_ptr().to_node(&source_file.syntax()).text().to_smol_string();\n-                            let shadow_count = bindings_shadow_count.entry(text.clone()).or_default();\n-                            (text, shadow_count)\n-                        }))),\n-                        Some(SelfParam(_)) => (\"type\", None),\n-                        Some(GenericParam(_)) => (\"type\", None),\n-                        None => (\"text\", None),\n+                        Some(Method(_)) => \"function\",\n+                        Some(Macro(_)) => \"macro\",\n+                        Some(FieldAccess(field)) => {\n+                            let (hir_file_id, src) = field.source(db);\n+                            if let hir::FieldSource::Named(name) = src {\n+                                let text = name.syntax().text().to_smol_string();\n+                                let shadow_count = 0; // potentially even from different file\n+                                binding_hash = Some(calc_binding_hash(hir_file_id.original_file(db), &text, shadow_count));\n+                            }\n+\n+                            \"field\"\n+                        },\n+                        Some(AssocItem(ImplItem::Method(_))) => \"function\",\n+                        Some(AssocItem(ImplItem::Const(_))) => \"constant\",\n+                        Some(AssocItem(ImplItem::TypeAlias(_))) => \"type\",\n+                        Some(Def(ModuleDef::Module(_))) => \"module\",\n+                        Some(Def(ModuleDef::Function(_))) => \"function\",\n+                        Some(Def(ModuleDef::Struct(_))) => \"type\",\n+                        Some(Def(ModuleDef::Union(_))) => \"type\",\n+                        Some(Def(ModuleDef::Enum(_))) => \"type\",\n+                        Some(Def(ModuleDef::EnumVariant(_))) => \"constant\",\n+                        Some(Def(ModuleDef::Const(_))) => \"constant\",\n+                        Some(Def(ModuleDef::Static(_))) => \"constant\",\n+                        Some(Def(ModuleDef::Trait(_))) => \"type\",\n+                        Some(Def(ModuleDef::TypeAlias(_))) => \"type\",\n+                        Some(SelfType(_)) => \"type\",\n+                        Some(Pat(ptr)) => {\n+                            binding_hash = Some({\n+                                let text = ptr.syntax_node_ptr().to_node(&source_file.syntax()).text().to_smol_string();\n+                                let shadow_count = bindings_shadow_count.entry(text.clone()).or_default();\n+                                calc_binding_hash(file_id, &text, *shadow_count)\n+                            });\n+\n+                            \"variable\"\n+                        },\n+                        Some(SelfParam(_)) => \"type\",\n+                        Some(GenericParam(_)) => \"type\",\n+                        None => \"text\",\n                     }\n                 } else {\n-                    (\"text\", None)\n+                    \"text\"\n                 }\n             }\n             NAME => {\n-                if let Some(name) = node.as_ast_node::<ast::Name>() {\n-                    (\"variable\", Some(hash({\n-                        let text = name.syntax().text().to_smol_string();\n-                        let shadow_count = bindings_shadow_count.entry(text.clone()).or_insert(1);\n-                        *shadow_count += 1;\n-                        (text, shadow_count)\n-                    })))\n+                if let Some(name) = node.as_node().and_then(ast::Name::cast) {\n+                    if name.syntax().ancestors().any(|x| ast::BindPat::cast(x).is_some()) {\n+                        binding_hash = Some({\n+                            let text = name.syntax().text().to_smol_string();\n+                            let shadow_count = bindings_shadow_count.entry(text.clone()).or_insert(0);\n+                            *shadow_count += 1;\n+                            calc_binding_hash(file_id, &text, *shadow_count)\n+                        });\n+                        \"variable\"\n+                    } else if name.syntax().ancestors().any(|x| ast::NamedFieldDef::cast(x).is_some()) {\n+                        binding_hash = Some({\n+                            let text = name.syntax().text().to_smol_string();\n+                            let shadow_count = 0;\n+                            calc_binding_hash(file_id, &text, shadow_count)\n+                        });\n+                        \"variable\"\n+                    } else {\n+                        \"function\"\n+                    }\n                 } else {\n-                    (\"text\", None)\n+                    \"text\"\n                 }\n             }\n-            TYPE_ALIAS_DEF | TYPE_ARG | TYPE_PARAM => (\"type\", None),\n-            INT_NUMBER | FLOAT_NUMBER | CHAR | BYTE => (\"literal\", None),\n-            LIFETIME => (\"parameter\", None),\n-            T![unsafe] => (\"keyword.unsafe\", None),\n-            k if is_control_keyword(k) => (\"keyword.control\", None),\n-            k if k.is_keyword() => (\"keyword\", None),\n+            TYPE_ALIAS_DEF | TYPE_ARG | TYPE_PARAM => \"type\",\n+            INT_NUMBER | FLOAT_NUMBER | CHAR | BYTE => \"literal\",\n+            LIFETIME => \"parameter\",\n+            T![unsafe] => \"keyword.unsafe\",\n+            k if is_control_keyword(k) => \"keyword.control\",\n+            k if k.is_keyword() => \"keyword\",\n             _ => {\n                 // let analyzer = hir::SourceAnalyzer::new(db, file_id, name_ref.syntax(), None);\n                 if let Some(macro_call) = node.as_node().and_then(ast::MacroCall::cast) {\n@@ -128,7 +157,7 @@ pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Vec<HighlightedRa\n                                 res.push(HighlightedRange {\n                                     range: TextRange::from_to(range_start, range_end),\n                                     tag: \"macro\",\n-                                    id: None,\n+                                    binding_hash: None,\n                                 })\n                             }\n                         }\n@@ -137,14 +166,24 @@ pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Vec<HighlightedRa\n                 continue;\n             }\n         };\n-        res.push(HighlightedRange { range: node.range(), tag, id })\n+        res.push(HighlightedRange { range: node.range(), tag, binding_hash })\n     }\n     res\n }\n \n-pub(crate) fn highlight_as_html(db: &RootDatabase, file_id: FileId) -> String {\n+pub(crate) fn highlight_as_html(db: &RootDatabase, file_id: FileId, rainbow: bool) -> String {\n     let source_file = db.parse(file_id);\n \n+    fn rainbowify(seed: u64) -> String {\n+        use rand::prelude::*;\n+        let mut rng = SmallRng::seed_from_u64(seed);\n+        format!(\"hsl({h},{s}%,{l}%)\",\n+            h = rng.gen_range::<u16, _, _>(0, 361),\n+            s = rng.gen_range::<u16, _, _>(42, 99),\n+            l = rng.gen_range::<u16, _, _>(40, 91),\n+        )\n+    }\n+\n     let mut ranges = highlight(db, file_id);\n     ranges.sort_by_key(|it| it.range.start());\n     // quick non-optimal heuristic to intersect token ranges and highlighted ranges\n@@ -166,16 +205,20 @@ pub(crate) fn highlight_as_html(db: &RootDatabase, file_id: FileId) -> String {\n             }\n         }\n         let text = html_escape(&token.text());\n-        let classes = could_intersect\n+        let ranges = could_intersect\n             .iter()\n             .filter(|it| token.range().is_subrange(&it.range))\n-            .map(|it| it.tag)\n             .collect::<Vec<_>>();\n-        if classes.is_empty() {\n+        if ranges.is_empty() {\n             buf.push_str(&text);\n         } else {\n-            let classes = classes.join(\" \");\n-            buf.push_str(&format!(\"<span class=\\\"{}\\\">{}</span>\", classes, text));\n+            let classes = ranges.iter().map(|x| x.tag).collect::<Vec<_>>().join(\" \");\n+            let binding_hash = ranges.first().and_then(|x| x.binding_hash);\n+            let color = match (rainbow, binding_hash) {\n+                (true, Some(hash)) => format!(\" data-binding-hash=\\\"{}\\\" style=\\\"color: {};\\\"\", hash, rainbowify(hash)),\n+                _ => \"\".into()\n+            };\n+            buf.push_str(&format!(\"<span class=\\\"{}\\\"{}>{}</span>\", classes, color, text));\n         }\n     }\n     buf.push_str(\"</code></pre>\");\n@@ -189,11 +232,8 @@ fn html_escape(text: &str) -> String {\n \n const STYLE: &str = \"\n <style>\n-pre {\n-    color: #DCDCCC;\n-    background-color: #3F3F3F;\n-    font-size: 22px;\n-}\n+body       { margin: 0; }\n+pre        { color: #DCDCCC; background: #3F3F3F; font-size: 22px; padding: 0.4em; }\n \n .comment   { color: #7F9F7F; }\n .string    { color: #CC9393; }\n@@ -208,7 +248,6 @@ pre {\n .keyword           { color: #F0DFAF; }\n .keyword\\\\.unsafe  { color: #F0DFAF; font-weight: bold; }\n .keyword\\\\.control { color: #DC8CC3; }\n-\n </style>\n \";\n \n@@ -241,12 +280,12 @@ fn main() {\n     }\n     unsafe { vec.set_len(0); }\n }\n-\"#,\n+\"#.trim(),\n         );\n         let dst_file = project_dir().join(\"crates/ra_ide_api/src/snapshots/highlighting.html\");\n         let actual_html = &analysis.highlight_as_html(file_id).unwrap();\n         let expected_html = &read_text(&dst_file);\n-        // std::fs::write(dst_file, &actual_html).unwrap();\n+        std::fs::write(dst_file, &actual_html).unwrap();\n         assert_eq_text!(expected_html, actual_html);\n     }\n \n@@ -261,9 +300,13 @@ fn main() {\n \n     let x = \"other color please!\";\n     let y = x.to_string();\n-}\"#,\n+}\n+\"#.trim(),\n         );\n-        let result = analysis.highlight(file_id);\n-        assert_debug_snapshot_matches!(\"rainbow_highlighting\", result);\n+        let dst_file = project_dir().join(\"crates/ra_ide_api/src/snapshots/rainbow_highlighting.html\");\n+        let actual_html = &analysis.highlight_as_html(file_id).unwrap();\n+        let expected_html = &read_text(&dst_file);\n+        std::fs::write(dst_file, &actual_html).unwrap();\n+        assert_eq_text!(expected_html, actual_html);\n     }\n }"}, {"sha": "80054f529a00b5235de23938d05addac8da29761", "filename": "crates/ra_syntax/src/syntax_node.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/43d5a4965308ec4b594725c0bd02cb046bdb730c/crates%2Fra_syntax%2Fsrc%2Fsyntax_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43d5a4965308ec4b594725c0bd02cb046bdb730c/crates%2Fra_syntax%2Fsrc%2Fsyntax_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fsyntax_node.rs?ref=43d5a4965308ec4b594725c0bd02cb046bdb730c", "patch": "@@ -523,10 +523,6 @@ impl<'a> SyntaxElement<'a> {\n         }\n     }\n \n-    pub fn as_ast_node<T: AstNode>(&self) -> Option<&T> {\n-        self.as_node().and_then(|x| <T as AstNode>::cast(x))\n-    }\n-\n     pub fn as_token(&self) -> Option<SyntaxToken<'a>> {\n         match self {\n             SyntaxElement::Node(_) => None,"}]}