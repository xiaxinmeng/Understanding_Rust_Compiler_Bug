{"sha": "25926095749ddc92b8b457383f8e129d267457e4", "node_id": "C_kwDOAAsO6NoAKDI1OTI2MDk1NzQ5ZGRjOTJiOGI0NTczODNmOGUxMjlkMjY3NDU3ZTQ", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-10-07T16:35:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-07T16:35:29Z"}, "message": "Rollup merge of #102300 - scottmcm:simpler-fold-closures, r=Mark-Simulacrum\n\nUse a macro to not have to copy-paste `ConstFnMutClosure::new(&mut fold, NeverShortCircuit::wrap_mut_2_imp)).0` everywhere\n\nAlso use that macro to replace a bunch of places that had custom closure-wrappers.\n\n+35 -114 sounds good to me.", "tree": {"sha": "bbbe8f579f4b1f25ef883acbb8d1f51cd1042f66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bbbe8f579f4b1f25ef883acbb8d1f51cd1042f66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25926095749ddc92b8b457383f8e129d267457e4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjQFVRCRBK7hj4Ov3rIwAAK4kIADNSFROe+vK4xpnFqFy5aIER\naXrf4f55WXg1DIppeC1G1P12x0kn31FndDOvGO+UmaORpLon5q6nuhg+S3ZEM+la\ntVegYJxKp0o7pjAQEiTZwcboDFC/N7u9NrE4GSsF+3hjvtVihurRVc0W6/Dz2/y1\niiiCi4byznoJa82+2FoNeyjT+xMOeyrT888xrXk7E5q8BZqZdStivkV0VfBHje+z\nUbKT3iL793jMljtgFKoR9gNvCu7lpyebjDJnHD8hftRDJLuTEpFlbEzxjnAttjs8\njzDUlO3xT5Vq/qewYz5mgb6tlKOnIF+V8oIZcJ+7Vr9kyGfjCeWUXuk0gQM/9g8=\n=6k3w\n-----END PGP SIGNATURE-----\n", "payload": "tree bbbe8f579f4b1f25ef883acbb8d1f51cd1042f66\nparent e42c4d7218b2596276152c5eb1e69335621f3086\nparent 55492de54557c3308795282bd96c8120ad66b62e\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1665160529 +0530\ncommitter GitHub <noreply@github.com> 1665160529 +0530\n\nRollup merge of #102300 - scottmcm:simpler-fold-closures, r=Mark-Simulacrum\n\nUse a macro to not have to copy-paste `ConstFnMutClosure::new(&mut fold, NeverShortCircuit::wrap_mut_2_imp)).0` everywhere\n\nAlso use that macro to replace a bunch of places that had custom closure-wrappers.\n\n+35 -114 sounds good to me.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25926095749ddc92b8b457383f8e129d267457e4", "html_url": "https://github.com/rust-lang/rust/commit/25926095749ddc92b8b457383f8e129d267457e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25926095749ddc92b8b457383f8e129d267457e4/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e42c4d7218b2596276152c5eb1e69335621f3086", "url": "https://api.github.com/repos/rust-lang/rust/commits/e42c4d7218b2596276152c5eb1e69335621f3086", "html_url": "https://github.com/rust-lang/rust/commit/e42c4d7218b2596276152c5eb1e69335621f3086"}, {"sha": "55492de54557c3308795282bd96c8120ad66b62e", "url": "https://api.github.com/repos/rust-lang/rust/commits/55492de54557c3308795282bd96c8120ad66b62e", "html_url": "https://github.com/rust-lang/rust/commit/55492de54557c3308795282bd96c8120ad66b62e"}], "stats": {"total": 149, "additions": 35, "deletions": 114}, "files": [{"sha": "d4fb886101fe78aff33812627e5c10748edeb4b3", "filename": "library/core/src/iter/adapters/array_chunks.rs", "status": "modified", "additions": 3, "deletions": 16, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/25926095749ddc92b8b457383f8e129d267457e4/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Farray_chunks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25926095749ddc92b8b457383f8e129d267457e4/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Farray_chunks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Farray_chunks.rs?ref=25926095749ddc92b8b457383f8e129d267457e4", "patch": "@@ -1,7 +1,6 @@\n use crate::array;\n-use crate::const_closure::ConstFnMutClosure;\n use crate::iter::{ByRefSized, FusedIterator, Iterator};\n-use crate::ops::{ControlFlow, NeverShortCircuit, Try};\n+use crate::ops::{ControlFlow, Try};\n \n /// An iterator over `N` elements of the iterator at a time.\n ///\n@@ -83,13 +82,7 @@ where\n         }\n     }\n \n-    fn fold<B, F>(mut self, init: B, mut f: F) -> B\n-    where\n-        Self: Sized,\n-        F: FnMut(B, Self::Item) -> B,\n-    {\n-        self.try_fold(init, ConstFnMutClosure::new(&mut f, NeverShortCircuit::wrap_mut_2_imp)).0\n-    }\n+    impl_fold_via_try_fold! { fold -> try_fold }\n }\n \n #[unstable(feature = \"iter_array_chunks\", reason = \"recently added\", issue = \"100450\")]\n@@ -127,13 +120,7 @@ where\n         try { acc }\n     }\n \n-    fn rfold<B, F>(mut self, init: B, mut f: F) -> B\n-    where\n-        Self: Sized,\n-        F: FnMut(B, Self::Item) -> B,\n-    {\n-        self.try_rfold(init, ConstFnMutClosure::new(&mut f, NeverShortCircuit::wrap_mut_2_imp)).0\n-    }\n+    impl_fold_via_try_fold! { rfold -> try_rfold }\n }\n \n impl<I, const N: usize> ArrayChunks<I, N>"}, {"sha": "fbdeca4d4ee4f7e689e8f7fdfb0a8b57e75ebb83", "filename": "library/core/src/iter/adapters/map_while.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/25926095749ddc92b8b457383f8e129d267457e4/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmap_while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25926095749ddc92b8b457383f8e129d267457e4/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmap_while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmap_while.rs?ref=25926095749ddc92b8b457383f8e129d267457e4", "patch": "@@ -64,19 +64,7 @@ where\n         .into_try()\n     }\n \n-    #[inline]\n-    fn fold<Acc, Fold>(mut self, init: Acc, fold: Fold) -> Acc\n-    where\n-        Self: Sized,\n-        Fold: FnMut(Acc, Self::Item) -> Acc,\n-    {\n-        #[inline]\n-        fn ok<B, T>(mut f: impl FnMut(B, T) -> B) -> impl FnMut(B, T) -> Result<B, !> {\n-            move |acc, x| Ok(f(acc, x))\n-        }\n-\n-        self.try_fold(init, ok(fold)).unwrap()\n-    }\n+    impl_fold_via_try_fold! { fold -> try_fold }\n }\n \n #[unstable(issue = \"none\", feature = \"inplace_iteration\")]"}, {"sha": "8cc2b7cec41650f273669b836593f809cbe4a899", "filename": "library/core/src/iter/adapters/mod.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/25926095749ddc92b8b457383f8e129d267457e4/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25926095749ddc92b8b457383f8e129d267457e4/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs?ref=25926095749ddc92b8b457383f8e129d267457e4", "patch": "@@ -1,6 +1,5 @@\n-use crate::const_closure::ConstFnMutClosure;\n use crate::iter::{InPlaceIterable, Iterator};\n-use crate::ops::{ChangeOutputType, ControlFlow, FromResidual, NeverShortCircuit, Residual, Try};\n+use crate::ops::{ChangeOutputType, ControlFlow, FromResidual, Residual, Try};\n \n mod array_chunks;\n mod by_ref_sized;\n@@ -204,13 +203,7 @@ where\n             .into_try()\n     }\n \n-    fn fold<B, F>(mut self, init: B, mut fold: F) -> B\n-    where\n-        Self: Sized,\n-        F: FnMut(B, Self::Item) -> B,\n-    {\n-        self.try_fold(init, ConstFnMutClosure::new(&mut fold, NeverShortCircuit::wrap_mut_2_imp)).0\n-    }\n+    impl_fold_via_try_fold! { fold -> try_fold }\n }\n \n #[unstable(issue = \"none\", feature = \"inplace_iteration\")]"}, {"sha": "62470512cc747f9ee3ea975584de5a21944ae8fb", "filename": "library/core/src/iter/adapters/scan.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/25926095749ddc92b8b457383f8e129d267457e4/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fscan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25926095749ddc92b8b457383f8e129d267457e4/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fscan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fscan.rs?ref=25926095749ddc92b8b457383f8e129d267457e4", "patch": "@@ -74,19 +74,7 @@ where\n         self.iter.try_fold(init, scan(state, f, fold)).into_try()\n     }\n \n-    #[inline]\n-    fn fold<Acc, Fold>(mut self, init: Acc, fold: Fold) -> Acc\n-    where\n-        Self: Sized,\n-        Fold: FnMut(Acc, Self::Item) -> Acc,\n-    {\n-        #[inline]\n-        fn ok<B, T>(mut f: impl FnMut(B, T) -> B) -> impl FnMut(B, T) -> Result<B, !> {\n-            move |acc, x| Ok(f(acc, x))\n-        }\n-\n-        self.try_fold(init, ok(fold)).unwrap()\n-    }\n+    impl_fold_via_try_fold! { fold -> try_fold }\n }\n \n #[unstable(issue = \"none\", feature = \"inplace_iteration\")]"}, {"sha": "c6334880db57cdbc346f42c0b2e3f779f6fef1e3", "filename": "library/core/src/iter/adapters/skip.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/25926095749ddc92b8b457383f8e129d267457e4/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fskip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25926095749ddc92b8b457383f8e129d267457e4/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fskip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fskip.rs?ref=25926095749ddc92b8b457383f8e129d267457e4", "patch": "@@ -206,17 +206,7 @@ where\n         if n == 0 { try { init } } else { self.iter.try_rfold(init, check(n, fold)).into_try() }\n     }\n \n-    fn rfold<Acc, Fold>(mut self, init: Acc, fold: Fold) -> Acc\n-    where\n-        Fold: FnMut(Acc, Self::Item) -> Acc,\n-    {\n-        #[inline]\n-        fn ok<Acc, T>(mut f: impl FnMut(Acc, T) -> Acc) -> impl FnMut(Acc, T) -> Result<Acc, !> {\n-            move |acc, x| Ok(f(acc, x))\n-        }\n-\n-        self.try_rfold(init, ok(fold)).unwrap()\n-    }\n+    impl_fold_via_try_fold! { rfold -> try_rfold }\n \n     #[inline]\n     fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {"}, {"sha": "58a0b9d7bbe99cd9c6965a61ef5e1509147cef07", "filename": "library/core/src/iter/adapters/take.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/25926095749ddc92b8b457383f8e129d267457e4/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ftake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25926095749ddc92b8b457383f8e129d267457e4/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ftake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ftake.rs?ref=25926095749ddc92b8b457383f8e129d267457e4", "patch": "@@ -98,19 +98,7 @@ where\n         }\n     }\n \n-    #[inline]\n-    fn fold<Acc, Fold>(mut self, init: Acc, fold: Fold) -> Acc\n-    where\n-        Self: Sized,\n-        Fold: FnMut(Acc, Self::Item) -> Acc,\n-    {\n-        #[inline]\n-        fn ok<B, T>(mut f: impl FnMut(B, T) -> B) -> impl FnMut(B, T) -> Result<B, !> {\n-            move |acc, x| Ok(f(acc, x))\n-        }\n-\n-        self.try_fold(init, ok(fold)).unwrap()\n-    }\n+    impl_fold_via_try_fold! { fold -> try_fold }\n \n     #[inline]\n     #[rustc_inherit_overflow_checks]"}, {"sha": "ec66dc3aec3602cc814c0345df547d5f8c8854c5", "filename": "library/core/src/iter/adapters/take_while.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/25926095749ddc92b8b457383f8e129d267457e4/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ftake_while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25926095749ddc92b8b457383f8e129d267457e4/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ftake_while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ftake_while.rs?ref=25926095749ddc92b8b457383f8e129d267457e4", "patch": "@@ -94,19 +94,7 @@ where\n         }\n     }\n \n-    #[inline]\n-    fn fold<Acc, Fold>(mut self, init: Acc, fold: Fold) -> Acc\n-    where\n-        Self: Sized,\n-        Fold: FnMut(Acc, Self::Item) -> Acc,\n-    {\n-        #[inline]\n-        fn ok<B, T>(mut f: impl FnMut(B, T) -> B) -> impl FnMut(B, T) -> Result<B, !> {\n-            move |acc, x| Ok(f(acc, x))\n-        }\n-\n-        self.try_fold(init, ok(fold)).unwrap()\n-    }\n+    impl_fold_via_try_fold! { fold -> try_fold }\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]"}, {"sha": "ef0f397825b15ebb0c96d17fea966d2201321aae", "filename": "library/core/src/iter/mod.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/25926095749ddc92b8b457383f8e129d267457e4/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25926095749ddc92b8b457383f8e129d267457e4/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs?ref=25926095749ddc92b8b457383f8e129d267457e4", "patch": "@@ -352,6 +352,29 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n+// This needs to be up here in order to be usable in the child modules\n+macro_rules! impl_fold_via_try_fold {\n+    (fold -> try_fold) => {\n+        impl_fold_via_try_fold! { @internal fold -> try_fold }\n+    };\n+    (rfold -> try_rfold) => {\n+        impl_fold_via_try_fold! { @internal rfold -> try_rfold }\n+    };\n+    (@internal $fold:ident -> $try_fold:ident) => {\n+        #[inline]\n+        fn $fold<AAA, FFF>(mut self, init: AAA, mut fold: FFF) -> AAA\n+        where\n+            FFF: FnMut(AAA, Self::Item) -> AAA,\n+        {\n+            use crate::const_closure::ConstFnMutClosure;\n+            use crate::ops::NeverShortCircuit;\n+\n+            let fold = ConstFnMutClosure::new(&mut fold, NeverShortCircuit::wrap_mut_2_imp);\n+            self.$try_fold(init, fold).0\n+        }\n+    };\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::traits::Iterator;\n "}, {"sha": "ac7b389b15b4d5e9e00e99ef2a4740a7c51b2971", "filename": "library/core/src/iter/range.rs", "status": "modified", "additions": 2, "deletions": 26, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/25926095749ddc92b8b457383f8e129d267457e4/library%2Fcore%2Fsrc%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25926095749ddc92b8b457383f8e129d267457e4/library%2Fcore%2Fsrc%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Frange.rs?ref=25926095749ddc92b8b457383f8e129d267457e4", "patch": "@@ -1150,19 +1150,7 @@ impl<A: Step> Iterator for ops::RangeInclusive<A> {\n         self.spec_try_fold(init, f)\n     }\n \n-    #[inline]\n-    fn fold<B, F>(mut self, init: B, f: F) -> B\n-    where\n-        Self: Sized,\n-        F: FnMut(B, Self::Item) -> B,\n-    {\n-        #[inline]\n-        fn ok<B, T>(mut f: impl FnMut(B, T) -> B) -> impl FnMut(B, T) -> Result<B, !> {\n-            move |acc, x| Ok(f(acc, x))\n-        }\n-\n-        self.try_fold(init, ok(f)).unwrap()\n-    }\n+    impl_fold_via_try_fold! { fold -> try_fold }\n \n     #[inline]\n     fn last(mut self) -> Option<A> {\n@@ -1230,19 +1218,7 @@ impl<A: Step> DoubleEndedIterator for ops::RangeInclusive<A> {\n         self.spec_try_rfold(init, f)\n     }\n \n-    #[inline]\n-    fn rfold<B, F>(mut self, init: B, f: F) -> B\n-    where\n-        Self: Sized,\n-        F: FnMut(B, Self::Item) -> B,\n-    {\n-        #[inline]\n-        fn ok<B, T>(mut f: impl FnMut(B, T) -> B) -> impl FnMut(B, T) -> Result<B, !> {\n-            move |acc, x| Ok(f(acc, x))\n-        }\n-\n-        self.try_rfold(init, ok(f)).unwrap()\n-    }\n+    impl_fold_via_try_fold! { rfold -> try_rfold }\n }\n \n // Safety: See above implementation for `ops::Range<A>`"}]}