{"sha": "8c0f8a285f7fcd3ed94402ac1f72ff4c01190e13", "node_id": "C_kwDOAAsO6NoAKDhjMGY4YTI4NWY3ZmNkM2VkOTQ0MDJhYzFmNzJmZjRjMDExOTBlMTM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-09-19T15:55:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-19T15:55:21Z"}, "message": "Rollup merge of #101985 - RalfJung:generate_stacktrace, r=oli-obk\n\ninterpret: expose generate_stacktrace without full InterpCx\n\nIn Miri we sometimes want to emit diagnostics without having a full `&InterpCx` available. To avoid duplicating code, this adds a way to get a stacktrace from an arbitrary slice of interpreter frames, that Miri can use with access to just a thread manager.", "tree": {"sha": "8f2ce5e60cbed231205a5dc85bf0a05815e9725b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f2ce5e60cbed231205a5dc85bf0a05815e9725b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c0f8a285f7fcd3ed94402ac1f72ff4c01190e13", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjKJDpCRBK7hj4Ov3rIwAAUeQIAFn/3tXX6/C/xPZGVvGskISM\nYVIhA5wSb4WqdCP6s9b+4R6aDYLt+KjZ6EGqAHdGAnVW3YbkAzfH6MstgpdYEy6x\nuX547kwe+i4AIYCSBKEzRTmoHCZjNO0GGvIXSQP4EORAsYA+2XSXjGP7h3QvWz40\nVFy5w8btIGOn7D1AH8Eak5Hg1fjA8Oo/dEjykXwq5Hvog2h/toG9AqmMwbAV6wVj\n1o5d+e2SvLIQkNnY0RH86so4y8FlKJ3mJaiv2olWS7+SXlgQU3/jrbcEUWONMQld\nS+DHOlBnov9XNYiCXqMxLAicWF1wRqNICsLrofnwoX6cI2vzjzd1lir92875OVY=\n=UMrY\n-----END PGP SIGNATURE-----\n", "payload": "tree 8f2ce5e60cbed231205a5dc85bf0a05815e9725b\nparent 33a224297d877633d304af62d75dd8fd29594daf\nparent 9fa3171015c63edc541d45583f2a24af3fa4d2bc\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1663602921 +0200\ncommitter GitHub <noreply@github.com> 1663602921 +0200\n\nRollup merge of #101985 - RalfJung:generate_stacktrace, r=oli-obk\n\ninterpret: expose generate_stacktrace without full InterpCx\n\nIn Miri we sometimes want to emit diagnostics without having a full `&InterpCx` available. To avoid duplicating code, this adds a way to get a stacktrace from an arbitrary slice of interpreter frames, that Miri can use with access to just a thread manager.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c0f8a285f7fcd3ed94402ac1f72ff4c01190e13", "html_url": "https://github.com/rust-lang/rust/commit/8c0f8a285f7fcd3ed94402ac1f72ff4c01190e13", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c0f8a285f7fcd3ed94402ac1f72ff4c01190e13/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33a224297d877633d304af62d75dd8fd29594daf", "url": "https://api.github.com/repos/rust-lang/rust/commits/33a224297d877633d304af62d75dd8fd29594daf", "html_url": "https://github.com/rust-lang/rust/commit/33a224297d877633d304af62d75dd8fd29594daf"}, {"sha": "9fa3171015c63edc541d45583f2a24af3fa4d2bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fa3171015c63edc541d45583f2a24af3fa4d2bc", "html_url": "https://github.com/rust-lang/rust/commit/9fa3171015c63edc541d45583f2a24af3fa4d2bc"}], "stats": {"total": 11, "additions": 9, "deletions": 2}, "files": [{"sha": "3177537fee25ec8e04a05a43bdf4984955d895f3", "filename": "compiler/rustc_const_eval/src/interpret/eval_context.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8c0f8a285f7fcd3ed94402ac1f72ff4c01190e13/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c0f8a285f7fcd3ed94402ac1f72ff4c01190e13/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs?ref=8c0f8a285f7fcd3ed94402ac1f72ff4c01190e13", "patch": "@@ -929,11 +929,13 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     }\n \n     #[must_use]\n-    pub fn generate_stacktrace(&self) -> Vec<FrameInfo<'tcx>> {\n+    pub fn generate_stacktrace_from_stack(\n+        stack: &[Frame<'mir, 'tcx, M::Provenance, M::FrameExtra>],\n+    ) -> Vec<FrameInfo<'tcx>> {\n         let mut frames = Vec::new();\n         // This deliberately does *not* honor `requires_caller_location` since it is used for much\n         // more than just panics.\n-        for frame in self.stack().iter().rev() {\n+        for frame in stack.iter().rev() {\n             let lint_root = frame.current_source_info().and_then(|source_info| {\n                 match &frame.body.source_scopes[source_info.scope].local_data {\n                     mir::ClearCrossCrate::Set(data) => Some(data.lint_root),\n@@ -947,6 +949,11 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         trace!(\"generate stacktrace: {:#?}\", frames);\n         frames\n     }\n+\n+    #[must_use]\n+    pub fn generate_stacktrace(&self) -> Vec<FrameInfo<'tcx>> {\n+        Self::generate_stacktrace_from_stack(self.stack())\n+    }\n }\n \n #[doc(hidden)]"}]}