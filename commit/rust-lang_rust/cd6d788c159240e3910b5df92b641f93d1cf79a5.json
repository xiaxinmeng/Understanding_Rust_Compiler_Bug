{"sha": "cd6d788c159240e3910b5df92b641f93d1cf79a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkNmQ3ODhjMTU5MjQwZTM5MTBiNWRmOTJiNjQxZjkzZDFjZjc5YTU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-04-20T17:33:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-20T17:33:17Z"}, "message": "Merge #4060\n\n4060: Update Chalk, and cache Chalk env elaboration through a query r=matklad a=flodiebold\n\nThis should fix some of the worst performance problems.\n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>", "tree": {"sha": "ef72ed32a71a9473f4c65c6f78e978473ced6075", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef72ed32a71a9473f4c65c6f78e978473ced6075"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd6d788c159240e3910b5df92b641f93d1cf79a5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJendzdCRBK7hj4Ov3rIwAAdHIIACUdcRRW0QZPpljSRldXbbYU\nuQyU7COINQjg0VBMJ2YV+vjyynuDqmTrRsja6/lhQDb3hH2CADuwwFarq9Vf2tfK\nHfcUK8VyvYvN9Pd2pb7jxoLvLtNqtIhNXuasELFpdlwoNq3XVDo+vmJq8jmmra75\nmk8Cjfpk9x5rIHhJXxU98FcXb4PUtGrywA3vWuwXxqifoJNzVnrNtk2TENMTObbW\nrIOmOJkRdipfl/QKFN3ujayz9/C/xs2SnVY46wukAUcIS+DkrFSXi6lC5hK7LhQj\nubfgFahle0GIe0anw8/vQhRDyuCU++vi2QiAbIdUHL6Yw6Q6k8t57aQynnq213g=\n=kilv\n-----END PGP SIGNATURE-----\n", "payload": "tree ef72ed32a71a9473f4c65c6f78e978473ced6075\nparent 2e0b7b0159ed922693db48f3f94ed95b1827494a\nparent 0be68a482581861f4218e0a759e2da71ee19fce6\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1587403997 +0000\ncommitter GitHub <noreply@github.com> 1587403997 +0000\n\nMerge #4060\n\n4060: Update Chalk, and cache Chalk env elaboration through a query r=matklad a=flodiebold\n\nThis should fix some of the worst performance problems.\n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd6d788c159240e3910b5df92b641f93d1cf79a5", "html_url": "https://github.com/rust-lang/rust/commit/cd6d788c159240e3910b5df92b641f93d1cf79a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd6d788c159240e3910b5df92b641f93d1cf79a5/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e0b7b0159ed922693db48f3f94ed95b1827494a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e0b7b0159ed922693db48f3f94ed95b1827494a", "html_url": "https://github.com/rust-lang/rust/commit/2e0b7b0159ed922693db48f3f94ed95b1827494a"}, {"sha": "0be68a482581861f4218e0a759e2da71ee19fce6", "url": "https://api.github.com/repos/rust-lang/rust/commits/0be68a482581861f4218e0a759e2da71ee19fce6", "html_url": "https://github.com/rust-lang/rust/commit/0be68a482581861f4218e0a759e2da71ee19fce6"}], "stats": {"total": 205, "additions": 170, "deletions": 35}, "files": [{"sha": "37455bc57ba41f9e6cda1a7e9956710b670b1087", "filename": "Cargo.lock", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cd6d788c159240e3910b5df92b641f93d1cf79a5/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/cd6d788c159240e3910b5df92b641f93d1cf79a5/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=cd6d788c159240e3910b5df92b641f93d1cf79a5", "patch": "@@ -114,7 +114,7 @@ checksum = \"4785bdd1c96b2a846b2bd7cc02e86b6b3dbf14e7e53446c4f54c92a361040822\"\n [[package]]\n name = \"chalk-derive\"\n version = \"0.1.0\"\n-source = \"git+https://github.com/rust-lang/chalk.git?rev=28cef6ff403d403e6ad2f3d27d944e9ffac1bce8#28cef6ff403d403e6ad2f3d27d944e9ffac1bce8\"\n+source = \"git+https://github.com/rust-lang/chalk.git?rev=2c072cc830d04af5f10b390e6643327f85108282#2c072cc830d04af5f10b390e6643327f85108282\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n@@ -125,7 +125,7 @@ dependencies = [\n [[package]]\n name = \"chalk-engine\"\n version = \"0.9.0\"\n-source = \"git+https://github.com/rust-lang/chalk.git?rev=28cef6ff403d403e6ad2f3d27d944e9ffac1bce8#28cef6ff403d403e6ad2f3d27d944e9ffac1bce8\"\n+source = \"git+https://github.com/rust-lang/chalk.git?rev=2c072cc830d04af5f10b390e6643327f85108282#2c072cc830d04af5f10b390e6643327f85108282\"\n dependencies = [\n  \"chalk-macros\",\n  \"rustc-hash\",\n@@ -134,7 +134,7 @@ dependencies = [\n [[package]]\n name = \"chalk-ir\"\n version = \"0.1.0\"\n-source = \"git+https://github.com/rust-lang/chalk.git?rev=28cef6ff403d403e6ad2f3d27d944e9ffac1bce8#28cef6ff403d403e6ad2f3d27d944e9ffac1bce8\"\n+source = \"git+https://github.com/rust-lang/chalk.git?rev=2c072cc830d04af5f10b390e6643327f85108282#2c072cc830d04af5f10b390e6643327f85108282\"\n dependencies = [\n  \"chalk-derive\",\n  \"chalk-engine\",\n@@ -144,15 +144,15 @@ dependencies = [\n [[package]]\n name = \"chalk-macros\"\n version = \"0.1.1\"\n-source = \"git+https://github.com/rust-lang/chalk.git?rev=28cef6ff403d403e6ad2f3d27d944e9ffac1bce8#28cef6ff403d403e6ad2f3d27d944e9ffac1bce8\"\n+source = \"git+https://github.com/rust-lang/chalk.git?rev=2c072cc830d04af5f10b390e6643327f85108282#2c072cc830d04af5f10b390e6643327f85108282\"\n dependencies = [\n  \"lazy_static\",\n ]\n \n [[package]]\n name = \"chalk-rust-ir\"\n version = \"0.1.0\"\n-source = \"git+https://github.com/rust-lang/chalk.git?rev=28cef6ff403d403e6ad2f3d27d944e9ffac1bce8#28cef6ff403d403e6ad2f3d27d944e9ffac1bce8\"\n+source = \"git+https://github.com/rust-lang/chalk.git?rev=2c072cc830d04af5f10b390e6643327f85108282#2c072cc830d04af5f10b390e6643327f85108282\"\n dependencies = [\n  \"chalk-derive\",\n  \"chalk-engine\",\n@@ -163,7 +163,7 @@ dependencies = [\n [[package]]\n name = \"chalk-solve\"\n version = \"0.1.0\"\n-source = \"git+https://github.com/rust-lang/chalk.git?rev=28cef6ff403d403e6ad2f3d27d944e9ffac1bce8#28cef6ff403d403e6ad2f3d27d944e9ffac1bce8\"\n+source = \"git+https://github.com/rust-lang/chalk.git?rev=2c072cc830d04af5f10b390e6643327f85108282#2c072cc830d04af5f10b390e6643327f85108282\"\n dependencies = [\n  \"chalk-derive\",\n  \"chalk-engine\","}, {"sha": "04d3cd6a2795ca4e03a2ee19ee793714a8e700dd", "filename": "crates/ra_hir_ty/Cargo.toml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd6d788c159240e3910b5df92b641f93d1cf79a5/crates%2Fra_hir_ty%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/cd6d788c159240e3910b5df92b641f93d1cf79a5/crates%2Fra_hir_ty%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2FCargo.toml?ref=cd6d788c159240e3910b5df92b641f93d1cf79a5", "patch": "@@ -27,9 +27,9 @@ test_utils = { path = \"../test_utils\" }\n \n scoped-tls = \"1\"\n \n-chalk-solve =   { git = \"https://github.com/rust-lang/chalk.git\", rev = \"28cef6ff403d403e6ad2f3d27d944e9ffac1bce8\" }\n-chalk-rust-ir = { git = \"https://github.com/rust-lang/chalk.git\", rev = \"28cef6ff403d403e6ad2f3d27d944e9ffac1bce8\" }\n-chalk-ir =      { git = \"https://github.com/rust-lang/chalk.git\", rev = \"28cef6ff403d403e6ad2f3d27d944e9ffac1bce8\" }\n+chalk-solve =   { git = \"https://github.com/rust-lang/chalk.git\", rev = \"2c072cc830d04af5f10b390e6643327f85108282\" }\n+chalk-rust-ir = { git = \"https://github.com/rust-lang/chalk.git\", rev = \"2c072cc830d04af5f10b390e6643327f85108282\" }\n+chalk-ir =      { git = \"https://github.com/rust-lang/chalk.git\", rev = \"2c072cc830d04af5f10b390e6643327f85108282\" }\n \n [dev-dependencies]\n insta = \"0.16.0\""}, {"sha": "9e5dfeab3cddb5686cbf7fb018a7349324f6bace", "filename": "crates/ra_hir_ty/src/db.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cd6d788c159240e3910b5df92b641f93d1cf79a5/crates%2Fra_hir_ty%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd6d788c159240e3910b5df92b641f93d1cf79a5/crates%2Fra_hir_ty%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdb.rs?ref=cd6d788c159240e3910b5df92b641f93d1cf79a5", "patch": "@@ -107,6 +107,13 @@ pub trait HirDatabase: DefDatabase + Upcast<dyn DefDatabase> {\n         krate: CrateId,\n         goal: crate::Canonical<crate::InEnvironment<crate::Obligation>>,\n     ) -> Option<crate::traits::Solution>;\n+\n+    #[salsa::invoke(crate::traits::chalk::program_clauses_for_chalk_env_query)]\n+    fn program_clauses_for_chalk_env(\n+        &self,\n+        krate: CrateId,\n+        env: chalk_ir::Environment<chalk::Interner>,\n+    ) -> chalk_ir::ProgramClauses<chalk::Interner>;\n }\n \n fn infer_wait(db: &impl HirDatabase, def: DefWithBodyId) -> Arc<InferenceResult> {"}, {"sha": "6bc6d474c9783f0438f2e6c7c2e035159b2045b2", "filename": "crates/ra_hir_ty/src/traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd6d788c159240e3910b5df92b641f93d1cf79a5/crates%2Fra_hir_ty%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd6d788c159240e3910b5df92b641f93d1cf79a5/crates%2Fra_hir_ty%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits.rs?ref=cd6d788c159240e3910b5df92b641f93d1cf79a5", "patch": "@@ -225,7 +225,7 @@ fn solution_from_chalk(\n                 None => unimplemented!(),\n             })\n             .collect();\n-        let result = Canonical { value, num_vars: subst.binders.len() };\n+        let result = Canonical { value, num_vars: subst.binders.len(&Interner) };\n         SolutionVariables(result)\n     };\n     match solution {"}, {"sha": "1ccb7c3b4ab8a62379912a955c87b6d597402187", "filename": "crates/ra_hir_ty/src/traits/chalk.rs", "status": "modified", "additions": 123, "deletions": 22, "changes": 145, "blob_url": "https://github.com/rust-lang/rust/blob/cd6d788c159240e3910b5df92b641f93d1cf79a5/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd6d788c159240e3910b5df92b641f93d1cf79a5/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs?ref=cd6d788c159240e3910b5df92b641f93d1cf79a5", "patch": "@@ -4,8 +4,8 @@ use std::{fmt, sync::Arc};\n use log::debug;\n \n use chalk_ir::{\n-    cast::Cast, fold::shift::Shift, Goal, GoalData, Parameter, PlaceholderIndex, TypeName,\n-    UniverseIndex,\n+    cast::Cast, fold::shift::Shift, interner::HasInterner, Goal, GoalData, Parameter,\n+    PlaceholderIndex, TypeName, UniverseIndex,\n };\n \n use hir_def::{AssocContainerId, AssocItemId, GenericDefId, HasModule, Lookup, TypeAliasId};\n@@ -33,8 +33,10 @@ impl chalk_ir::interner::Interner for Interner {\n     type InternedGoals = Vec<Goal<Self>>;\n     type InternedSubstitution = Vec<Parameter<Self>>;\n     type InternedProgramClause = chalk_ir::ProgramClauseData<Self>;\n-    type InternedProgramClauses = Vec<chalk_ir::ProgramClause<Self>>;\n+    type InternedProgramClauses = Arc<[chalk_ir::ProgramClause<Self>]>;\n     type InternedQuantifiedWhereClauses = Vec<chalk_ir::QuantifiedWhereClause<Self>>;\n+    type InternedParameterKinds = Vec<chalk_ir::ParameterKind<()>>;\n+    type InternedCanonicalVarKinds = Vec<chalk_ir::ParameterKind<UniverseIndex>>;\n     type Identifier = TypeAliasId;\n     type DefId = InternId;\n \n@@ -60,6 +62,27 @@ impl chalk_ir::interner::Interner for Interner {\n         tls::with_current_program(|prog| Some(prog?.debug_alias(alias, fmt)))\n     }\n \n+    fn debug_projection_ty(\n+        proj: &chalk_ir::ProjectionTy<Interner>,\n+        fmt: &mut fmt::Formatter<'_>,\n+    ) -> Option<fmt::Result> {\n+        tls::with_current_program(|prog| Some(prog?.debug_projection_ty(proj, fmt)))\n+    }\n+\n+    fn debug_opaque_ty(\n+        opaque_ty: &chalk_ir::OpaqueTy<Interner>,\n+        fmt: &mut fmt::Formatter<'_>,\n+    ) -> Option<fmt::Result> {\n+        tls::with_current_program(|prog| Some(prog?.debug_opaque_ty(opaque_ty, fmt)))\n+    }\n+\n+    fn debug_opaque_ty_id(\n+        opaque_ty_id: chalk_ir::OpaqueTyId<Self>,\n+        fmt: &mut fmt::Formatter<'_>,\n+    ) -> Option<fmt::Result> {\n+        tls::with_current_program(|prog| Some(prog?.debug_opaque_ty_id(opaque_ty_id, fmt)))\n+    }\n+\n     fn debug_ty(ty: &chalk_ir::Ty<Interner>, fmt: &mut fmt::Formatter<'_>) -> Option<fmt::Result> {\n         tls::with_current_program(|prog| Some(prog?.debug_ty(ty, fmt)))\n     }\n@@ -202,15 +225,15 @@ impl chalk_ir::interner::Interner for Interner {\n     fn intern_program_clauses(\n         &self,\n         data: impl IntoIterator<Item = chalk_ir::ProgramClause<Self>>,\n-    ) -> Vec<chalk_ir::ProgramClause<Self>> {\n+    ) -> Arc<[chalk_ir::ProgramClause<Self>]> {\n         data.into_iter().collect()\n     }\n \n     fn program_clauses_data<'a>(\n         &self,\n-        clauses: &'a Vec<chalk_ir::ProgramClause<Self>>,\n+        clauses: &'a Arc<[chalk_ir::ProgramClause<Self>]>,\n     ) -> &'a [chalk_ir::ProgramClause<Self>] {\n-        clauses\n+        &clauses\n     }\n \n     fn intern_quantified_where_clauses(\n@@ -226,6 +249,34 @@ impl chalk_ir::interner::Interner for Interner {\n     ) -> &'a [chalk_ir::QuantifiedWhereClause<Self>] {\n         clauses\n     }\n+\n+    fn intern_parameter_kinds(\n+        &self,\n+        data: impl IntoIterator<Item = chalk_ir::ParameterKind<()>>,\n+    ) -> Self::InternedParameterKinds {\n+        data.into_iter().collect()\n+    }\n+\n+    fn parameter_kinds_data<'a>(\n+        &self,\n+        parameter_kinds: &'a Self::InternedParameterKinds,\n+    ) -> &'a [chalk_ir::ParameterKind<()>] {\n+        &parameter_kinds\n+    }\n+\n+    fn intern_canonical_var_kinds(\n+        &self,\n+        data: impl IntoIterator<Item = chalk_ir::ParameterKind<UniverseIndex>>,\n+    ) -> Self::InternedCanonicalVarKinds {\n+        data.into_iter().collect()\n+    }\n+\n+    fn canonical_var_kinds_data<'a>(\n+        &self,\n+        canonical_var_kinds: &'a Self::InternedCanonicalVarKinds,\n+    ) -> &'a [chalk_ir::ParameterKind<UniverseIndex>] {\n+        &canonical_var_kinds\n+    }\n }\n \n impl chalk_ir::interner::HasInterner for Interner {\n@@ -268,9 +319,12 @@ impl ToChalk for Ty {\n             Ty::Projection(proj_ty) => {\n                 let associated_ty_id = proj_ty.associated_ty.to_chalk(db);\n                 let substitution = proj_ty.parameters.to_chalk(db);\n-                chalk_ir::AliasTy { associated_ty_id, substitution }\n-                    .cast(&Interner)\n-                    .intern(&Interner)\n+                chalk_ir::AliasTy::Projection(chalk_ir::ProjectionTy {\n+                    associated_ty_id,\n+                    substitution,\n+                })\n+                .cast(&Interner)\n+                .intern(&Interner)\n             }\n             Ty::Placeholder(id) => {\n                 let interned_id = db.intern_type_param_id(id);\n@@ -314,16 +368,17 @@ impl ToChalk for Ty {\n                 );\n                 Ty::Placeholder(db.lookup_intern_type_param_id(interned_id))\n             }\n-            chalk_ir::TyData::Alias(proj) => {\n+            chalk_ir::TyData::Alias(chalk_ir::AliasTy::Projection(proj)) => {\n                 let associated_ty = from_chalk(db, proj.associated_ty_id);\n                 let parameters = from_chalk(db, proj.substitution);\n                 Ty::Projection(ProjectionTy { associated_ty, parameters })\n             }\n+            chalk_ir::TyData::Alias(chalk_ir::AliasTy::Opaque(_)) => unimplemented!(),\n             chalk_ir::TyData::Function(_) => unimplemented!(),\n             chalk_ir::TyData::BoundVar(idx) => Ty::Bound(idx),\n             chalk_ir::TyData::InferenceVar(_iv) => Ty::Unknown,\n             chalk_ir::TyData::Dyn(where_clauses) => {\n-                assert_eq!(where_clauses.bounds.binders.len(), 1);\n+                assert_eq!(where_clauses.bounds.binders.len(&Interner), 1);\n                 let predicates = where_clauses\n                     .bounds\n                     .skip_binders()\n@@ -404,6 +459,7 @@ impl ToChalk for TypeCtor {\n         match type_name {\n             TypeName::Struct(struct_id) => db.lookup_intern_type_ctor(struct_id.into()),\n             TypeName::AssociatedType(type_id) => TypeCtor::AssociatedType(from_chalk(db, type_id)),\n+            TypeName::OpaqueType(_) => unreachable!(),\n             TypeName::Error => {\n                 // this should not be reached, since we don't represent TypeName::Error with TypeCtor\n                 unreachable!()\n@@ -460,7 +516,8 @@ impl ToChalk for GenericPredicate {\n             }\n             GenericPredicate::Projection(projection_pred) => {\n                 let ty = projection_pred.ty.to_chalk(db).shifted_in(&Interner);\n-                let alias = projection_pred.projection_ty.to_chalk(db).shifted_in(&Interner);\n+                let projection = projection_pred.projection_ty.to_chalk(db).shifted_in(&Interner);\n+                let alias = chalk_ir::AliasTy::Projection(projection);\n                 make_binders(chalk_ir::WhereClause::AliasEq(chalk_ir::AliasEq { alias, ty }), 0)\n             }\n             GenericPredicate::Error => panic!(\"tried passing GenericPredicate::Error to Chalk\"),\n@@ -481,7 +538,13 @@ impl ToChalk for GenericPredicate {\n                 GenericPredicate::Implemented(from_chalk(db, tr))\n             }\n             chalk_ir::WhereClause::AliasEq(projection_eq) => {\n-                let projection_ty = from_chalk(db, projection_eq.alias);\n+                let projection_ty = from_chalk(\n+                    db,\n+                    match projection_eq.alias {\n+                        chalk_ir::AliasTy::Projection(p) => p,\n+                        _ => unimplemented!(),\n+                    },\n+                );\n                 let ty = from_chalk(db, projection_eq.ty);\n                 GenericPredicate::Projection(super::ProjectionPredicate { projection_ty, ty })\n             }\n@@ -490,18 +553,18 @@ impl ToChalk for GenericPredicate {\n }\n \n impl ToChalk for ProjectionTy {\n-    type Chalk = chalk_ir::AliasTy<Interner>;\n+    type Chalk = chalk_ir::ProjectionTy<Interner>;\n \n-    fn to_chalk(self, db: &dyn HirDatabase) -> chalk_ir::AliasTy<Interner> {\n-        chalk_ir::AliasTy {\n+    fn to_chalk(self, db: &dyn HirDatabase) -> chalk_ir::ProjectionTy<Interner> {\n+        chalk_ir::ProjectionTy {\n             associated_ty_id: self.associated_ty.to_chalk(db),\n             substitution: self.parameters.to_chalk(db),\n         }\n     }\n \n     fn from_chalk(\n         db: &dyn HirDatabase,\n-        projection_ty: chalk_ir::AliasTy<Interner>,\n+        projection_ty: chalk_ir::ProjectionTy<Interner>,\n     ) -> ProjectionTy {\n         ProjectionTy {\n             associated_ty: from_chalk(db, projection_ty.associated_ty_id),\n@@ -514,7 +577,10 @@ impl ToChalk for super::ProjectionPredicate {\n     type Chalk = chalk_ir::AliasEq<Interner>;\n \n     fn to_chalk(self, db: &dyn HirDatabase) -> chalk_ir::AliasEq<Interner> {\n-        chalk_ir::AliasEq { alias: self.projection_ty.to_chalk(db), ty: self.ty.to_chalk(db) }\n+        chalk_ir::AliasEq {\n+            alias: chalk_ir::AliasTy::Projection(self.projection_ty.to_chalk(db)),\n+            ty: self.ty.to_chalk(db),\n+        }\n     }\n \n     fn from_chalk(_db: &dyn HirDatabase, _normalize: chalk_ir::AliasEq<Interner>) -> Self {\n@@ -540,17 +606,24 @@ impl ToChalk for Obligation {\n impl<T> ToChalk for Canonical<T>\n where\n     T: ToChalk,\n+    T::Chalk: HasInterner<Interner = Interner>,\n {\n     type Chalk = chalk_ir::Canonical<T::Chalk>;\n \n     fn to_chalk(self, db: &dyn HirDatabase) -> chalk_ir::Canonical<T::Chalk> {\n         let parameter = chalk_ir::ParameterKind::Ty(chalk_ir::UniverseIndex::ROOT);\n         let value = self.value.to_chalk(db);\n-        chalk_ir::Canonical { value, binders: vec![parameter; self.num_vars] }\n+        chalk_ir::Canonical {\n+            value,\n+            binders: chalk_ir::CanonicalVarKinds::from(&Interner, vec![parameter; self.num_vars]),\n+        }\n     }\n \n     fn from_chalk(db: &dyn HirDatabase, canonical: chalk_ir::Canonical<T::Chalk>) -> Canonical<T> {\n-        Canonical { num_vars: canonical.binders.len(), value: from_chalk(db, canonical.value) }\n+        Canonical {\n+            num_vars: canonical.binders.len(&Interner),\n+            value: from_chalk(db, canonical.value),\n+        }\n     }\n }\n \n@@ -649,9 +722,15 @@ impl ToChalk for builtin::BuiltinImplAssocTyValueData {\n     }\n }\n \n-fn make_binders<T>(value: T, num_vars: usize) -> chalk_ir::Binders<T> {\n+fn make_binders<T>(value: T, num_vars: usize) -> chalk_ir::Binders<T>\n+where\n+    T: HasInterner<Interner = Interner>,\n+{\n     chalk_ir::Binders::new(\n-        std::iter::repeat(chalk_ir::ParameterKind::Ty(())).take(num_vars).collect(),\n+        chalk_ir::ParameterKinds::from(\n+            &Interner,\n+            std::iter::repeat(chalk_ir::ParameterKind::Ty(())).take(num_vars),\n+        ),\n         value,\n     )\n }\n@@ -799,6 +878,28 @@ impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n         // FIXME tell Chalk about well-known traits (here and in trait_datum)\n         None\n     }\n+\n+    fn program_clauses_for_env(\n+        &self,\n+        environment: &chalk_ir::Environment<Interner>,\n+    ) -> chalk_ir::ProgramClauses<Interner> {\n+        self.db.program_clauses_for_chalk_env(self.krate, environment.clone())\n+    }\n+\n+    fn opaque_ty_data(\n+        &self,\n+        _id: chalk_ir::OpaqueTyId<Interner>,\n+    ) -> Arc<chalk_rust_ir::OpaqueTyDatum<Interner>> {\n+        unimplemented!()\n+    }\n+}\n+\n+pub(crate) fn program_clauses_for_chalk_env_query(\n+    db: &dyn HirDatabase,\n+    krate: CrateId,\n+    environment: chalk_ir::Environment<Interner>,\n+) -> chalk_ir::ProgramClauses<Interner> {\n+    chalk_solve::program_clauses_for_env(&ChalkContext { db, krate }, &environment)\n }\n \n pub(crate) fn associated_ty_data_query("}, {"sha": "4867cb17ed1ec4a04d3ba10d5ba7b3e2f93baa45", "filename": "crates/ra_hir_ty/src/traits/chalk/tls.rs", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/cd6d788c159240e3910b5df92b641f93d1cf79a5/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd6d788c159240e3910b5df92b641f93d1cf79a5/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Ftls.rs?ref=cd6d788c159240e3910b5df92b641f93d1cf79a5", "patch": "@@ -121,19 +121,38 @@ impl DebugContext<'_> {\n         write!(fmt, \"{}::{}\", trait_data.name, type_alias_data.name)\n     }\n \n+    pub fn debug_opaque_ty_id(\n+        &self,\n+        opaque_ty_id: chalk_ir::OpaqueTyId<Interner>,\n+        fmt: &mut fmt::Formatter<'_>,\n+    ) -> Result<(), fmt::Error> {\n+        fmt.debug_struct(\"OpaqueTyId\").field(\"index\", &opaque_ty_id.0).finish()\n+    }\n+\n     pub fn debug_alias(\n         &self,\n-        alias: &AliasTy<Interner>,\n+        alias_ty: &AliasTy<Interner>,\n+        fmt: &mut fmt::Formatter<'_>,\n+    ) -> Result<(), fmt::Error> {\n+        match alias_ty {\n+            AliasTy::Projection(projection_ty) => self.debug_projection_ty(projection_ty, fmt),\n+            AliasTy::Opaque(opaque_ty) => self.debug_opaque_ty(opaque_ty, fmt),\n+        }\n+    }\n+\n+    pub fn debug_projection_ty(\n+        &self,\n+        projection_ty: &chalk_ir::ProjectionTy<Interner>,\n         fmt: &mut fmt::Formatter<'_>,\n     ) -> Result<(), fmt::Error> {\n-        let type_alias: TypeAliasId = from_chalk(self.0, alias.associated_ty_id);\n+        let type_alias: TypeAliasId = from_chalk(self.0, projection_ty.associated_ty_id);\n         let type_alias_data = self.0.type_alias_data(type_alias);\n         let trait_ = match type_alias.lookup(self.0.upcast()).container {\n             AssocContainerId::TraitId(t) => t,\n             _ => panic!(\"associated type not in trait\"),\n         };\n         let trait_data = self.0.trait_data(trait_);\n-        let params = alias.substitution.parameters(&Interner);\n+        let params = projection_ty.substitution.parameters(&Interner);\n         write!(fmt, \"<{:?} as {}\", &params[0], trait_data.name,)?;\n         if params.len() > 1 {\n             write!(\n@@ -145,6 +164,14 @@ impl DebugContext<'_> {\n         write!(fmt, \">::{}\", type_alias_data.name)\n     }\n \n+    pub fn debug_opaque_ty(\n+        &self,\n+        opaque_ty: &chalk_ir::OpaqueTy<Interner>,\n+        fmt: &mut fmt::Formatter<'_>,\n+    ) -> Result<(), fmt::Error> {\n+        write!(fmt, \"{:?}\", opaque_ty.opaque_ty_id)\n+    }\n+\n     pub fn debug_ty(\n         &self,\n         ty: &chalk_ir::Ty<Interner>,"}]}