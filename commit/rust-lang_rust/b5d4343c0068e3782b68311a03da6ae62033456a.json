{"sha": "b5d4343c0068e3782b68311a03da6ae62033456a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1ZDQzNDNjMDA2OGUzNzgyYjY4MzExYTAzZGE2YWU2MjAzMzQ1NmE=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-06-28T23:46:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-28T23:46:09Z"}, "message": "Rollup merge of #86059 - GuillaumeGomez:html-checker2, r=Mark-Simulacrum\n\nAdd new tool to check HTML\n\nRe-opening of https://github.com/rust-lang/rust/pull/84480.\n\nr? `@Mark-Simulacrum`", "tree": {"sha": "208f867d1a1e041e2fb28b99cea857751368416f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/208f867d1a1e041e2fb28b99cea857751368416f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5d4343c0068e3782b68311a03da6ae62033456a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg2l9BCRBK7hj4Ov3rIwAAlCUIAHPFfBpmYw7vKD8GJFXKQ+oF\n6CXQuPc8ZdwNSp0geVsvFCV98zoqoluPbJgM0mXy9ZeE+mUGqQbJX+lC+Ii5+9vd\nlg/iZ/aG4D+BXDrfykZREE/SJtW3vhd1bBbFy5SA/p3LSu8ERw5NfaH02L4D2k6p\nDK+nI323gq8c4+ZxZ1hxJMyq/I75xcs2idXTMv3MNmd3ijTWSb1QBGNoUM3qSGn2\nIDN0VbefBJvXUeOyO6keFOboaN3QMeW/DezdzWYmOO1MZseYyig6LTlJFprus21O\n9cCIPsP0Zu6pLxJI1KfvZO9DSyhcYYymNWLHNxnxjmbJh6A3IMPeCJ35z2apXGQ=\n=9F6l\n-----END PGP SIGNATURE-----\n", "payload": "tree 208f867d1a1e041e2fb28b99cea857751368416f\nparent a435b49e86d16e98dcc6595dd471f95e823f41aa\nparent 785b705ae4cc0cc503a79c7bccfcf689bcc7820f\nauthor Yuki Okushi <jtitor@2k36.org> 1624923969 +0900\ncommitter GitHub <noreply@github.com> 1624923969 +0900\n\nRollup merge of #86059 - GuillaumeGomez:html-checker2, r=Mark-Simulacrum\n\nAdd new tool to check HTML\n\nRe-opening of https://github.com/rust-lang/rust/pull/84480.\n\nr? `@Mark-Simulacrum`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5d4343c0068e3782b68311a03da6ae62033456a", "html_url": "https://github.com/rust-lang/rust/commit/b5d4343c0068e3782b68311a03da6ae62033456a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5d4343c0068e3782b68311a03da6ae62033456a/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a435b49e86d16e98dcc6595dd471f95e823f41aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/a435b49e86d16e98dcc6595dd471f95e823f41aa", "html_url": "https://github.com/rust-lang/rust/commit/a435b49e86d16e98dcc6595dd471f95e823f41aa"}, {"sha": "785b705ae4cc0cc503a79c7bccfcf689bcc7820f", "url": "https://api.github.com/repos/rust-lang/rust/commits/785b705ae4cc0cc503a79c7bccfcf689bcc7820f", "html_url": "https://github.com/rust-lang/rust/commit/785b705ae4cc0cc503a79c7bccfcf689bcc7820f"}], "stats": {"total": 170, "additions": 165, "deletions": 5}, "files": [{"sha": "d57d17a3581fdc25a4f6d9f471b3affde5961cca", "filename": "Cargo.lock", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b5d4343c0068e3782b68311a03da6ae62033456a/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/b5d4343c0068e3782b68311a03da6ae62033456a/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=b5d4343c0068e3782b68311a03da6ae62033456a", "patch": "@@ -1578,6 +1578,13 @@ dependencies = [\n  \"winapi 0.3.9\",\n ]\n \n+[[package]]\n+name = \"html-checker\"\n+version = \"0.1.0\"\n+dependencies = [\n+ \"walkdir\",\n+]\n+\n [[package]]\n name = \"html5ever\"\n version = \"0.25.1\""}, {"sha": "4c00a7dc99ea9ddecee65ef54d11e621f01b1900", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b5d4343c0068e3782b68311a03da6ae62033456a/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b5d4343c0068e3782b68311a03da6ae62033456a/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=b5d4343c0068e3782b68311a03da6ae62033456a", "patch": "@@ -34,6 +34,7 @@ members = [\n   \"src/tools/unicode-table-generator\",\n   \"src/tools/expand-yaml-anchors\",\n   \"src/tools/jsondocck\",\n+  \"src/tools/html-checker\",\n ]\n \n exclude = ["}, {"sha": "b4c5a2abc9c905497a45228030f00a26becbe5d7", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b5d4343c0068e3782b68311a03da6ae62033456a/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5d4343c0068e3782b68311a03da6ae62033456a/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=b5d4343c0068e3782b68311a03da6ae62033456a", "patch": "@@ -450,6 +450,7 @@ impl<'a> Builder<'a> {\n                 test::RustdocTheme,\n                 test::RustdocUi,\n                 test::RustdocJson,\n+                test::HtmlCheck,\n                 // Run bootstrap close to the end as it's unlikely to fail\n                 test::Bootstrap,\n                 // Run run-make last, since these won't pass without make on Windows"}, {"sha": "634332df863528f16131bf6474cfd02c482320ed", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b5d4343c0068e3782b68311a03da6ae62033456a/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5d4343c0068e3782b68311a03da6ae62033456a/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=b5d4343c0068e3782b68311a03da6ae62033456a", "patch": "@@ -501,8 +501,8 @@ impl Step for Std {\n \n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct Rustc {\n-    stage: u32,\n-    target: TargetSelection,\n+    pub stage: u32,\n+    pub target: TargetSelection,\n }\n \n impl Step for Rustc {"}, {"sha": "64b3ee7c359e7144905ec7aed25ee59de2536049", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 44, "deletions": 1, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/b5d4343c0068e3782b68311a03da6ae62033456a/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5d4343c0068e3782b68311a03da6ae62033456a/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=b5d4343c0068e3782b68311a03da6ae62033456a", "patch": "@@ -9,7 +9,7 @@ use std::fmt;\n use std::fs;\n use std::iter;\n use std::path::{Path, PathBuf};\n-use std::process::Command;\n+use std::process::{Command, Stdio};\n \n use build_helper::{self, output, t};\n \n@@ -161,6 +161,49 @@ You can skip linkcheck with --exclude src/tools/linkchecker\"\n     }\n }\n \n+fn check_if_tidy_is_installed() -> bool {\n+    Command::new(\"tidy\")\n+        .arg(\"--version\")\n+        .stdout(Stdio::null())\n+        .status()\n+        .map_or(false, |status| status.success())\n+}\n+\n+#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n+pub struct HtmlCheck {\n+    target: TargetSelection,\n+}\n+\n+impl Step for HtmlCheck {\n+    type Output = ();\n+    const DEFAULT: bool = true;\n+    const ONLY_HOSTS: bool = true;\n+\n+    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n+        let run = run.path(\"src/tools/html-checker\");\n+        run.lazy_default_condition(Box::new(check_if_tidy_is_installed))\n+    }\n+\n+    fn make_run(run: RunConfig<'_>) {\n+        run.builder.ensure(HtmlCheck { target: run.target });\n+    }\n+\n+    fn run(self, builder: &Builder<'_>) {\n+        if !check_if_tidy_is_installed() {\n+            eprintln!(\"not running HTML-check tool because `tidy` is missing\");\n+            eprintln!(\n+                \"Note that `tidy` is not the in-tree `src/tools/tidy` but needs to be installed\"\n+            );\n+            panic!(\"Cannot run html-check tests\");\n+        }\n+        // Ensure that a few different kinds of documentation are available.\n+        builder.default_doc(&[]);\n+        builder.ensure(crate::doc::Rustc { target: self.target, stage: builder.top_stage });\n+\n+        try_run(builder, builder.tool_cmd(Tool::HtmlChecker).arg(builder.doc_out(self.target)));\n+    }\n+}\n+\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub struct Cargotest {\n     stage: u32,"}, {"sha": "aa7fe658df3209cdeb3b7050d1dc0e1d29aff4f3", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b5d4343c0068e3782b68311a03da6ae62033456a/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5d4343c0068e3782b68311a03da6ae62033456a/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=b5d4343c0068e3782b68311a03da6ae62033456a", "patch": "@@ -376,6 +376,7 @@ bootstrap_tool!(\n     ExpandYamlAnchors, \"src/tools/expand-yaml-anchors\", \"expand-yaml-anchors\";\n     LintDocs, \"src/tools/lint-docs\", \"lint-docs\";\n     JsonDocCk, \"src/tools/jsondocck\", \"jsondocck\";\n+    HtmlChecker, \"src/tools/html-checker\", \"html-checker\";\n );\n \n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq, Ord, PartialOrd)]"}, {"sha": "ee3cd092f4cdbcec937c6e4ec8f913883cab2708", "filename": "src/ci/docker/host-x86_64/x86_64-gnu-aux/Dockerfile", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b5d4343c0068e3782b68311a03da6ae62033456a/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-aux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/b5d4343c0068e3782b68311a03da6ae62033456a/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-aux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-aux%2FDockerfile?ref=b5d4343c0068e3782b68311a03da6ae62033456a", "patch": "@@ -17,7 +17,8 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   libgl1-mesa-dev \\\n   llvm-dev \\\n   libfreetype6-dev \\\n-  libexpat1-dev\n+  libexpat1-dev \\\n+  tidy\n \n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh"}, {"sha": "faed1761fa45c0fac3751b4fb8ab6ca145871801", "filename": "src/ci/docker/host-x86_64/x86_64-gnu-tools/Dockerfile", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b5d4343c0068e3782b68311a03da6ae62033456a/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/b5d4343c0068e3782b68311a03da6ae62033456a/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2FDockerfile?ref=b5d4343c0068e3782b68311a03da6ae62033456a", "patch": "@@ -12,7 +12,8 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   cmake \\\n   libssl-dev \\\n   sudo \\\n-  xz-utils\n+  xz-utils \\\n+  tidy\n \n # Install dependencies for chromium browser\n RUN apt-get install -y \\"}, {"sha": "fe35df823b656bee6da9261d9a1a890660159fdf", "filename": "src/tools/html-checker/Cargo.toml", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b5d4343c0068e3782b68311a03da6ae62033456a/src%2Ftools%2Fhtml-checker%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b5d4343c0068e3782b68311a03da6ae62033456a/src%2Ftools%2Fhtml-checker%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fhtml-checker%2FCargo.toml?ref=b5d4343c0068e3782b68311a03da6ae62033456a", "patch": "@@ -0,0 +1,12 @@\n+[package]\n+name = \"html-checker\"\n+version = \"0.1.0\"\n+authors = [\"Guillaume Gomez <guillaume1.gomez@gmail.com>\"]\n+edition = \"2018\"\n+\n+[[bin]]\n+name = \"html-checker\"\n+path = \"main.rs\"\n+\n+[dependencies]\n+walkdir = \"2\""}, {"sha": "bf2830254e8190cfeff90f9fe2ca429ad7f2cc48", "filename": "src/tools/html-checker/main.rs", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/b5d4343c0068e3782b68311a03da6ae62033456a/src%2Ftools%2Fhtml-checker%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5d4343c0068e3782b68311a03da6ae62033456a/src%2Ftools%2Fhtml-checker%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fhtml-checker%2Fmain.rs?ref=b5d4343c0068e3782b68311a03da6ae62033456a", "patch": "@@ -0,0 +1,93 @@\n+use std::env;\n+use std::path::Path;\n+use std::process::{Command, Output};\n+\n+fn check_html_file(file: &Path) -> usize {\n+    let to_mute = &[\n+        // \"disabled\" on <link> or \"autocomplete\" on <select> emit this warning\n+        \"PROPRIETARY_ATTRIBUTE\",\n+        // It complains when multiple in the same page link to the same anchor for some reason...\n+        \"ANCHOR_NOT_UNIQUE\",\n+        // If a <span> contains only HTML elements and no text, it complains about it.\n+        \"TRIM_EMPTY_ELEMENT\",\n+        // FIXME: the three next warnings are about <pre> elements which are not supposed to\n+        //        contain HTML. The solution here would be to replace them with a <div>\n+        \"MISSING_ENDTAG_BEFORE\",\n+        \"INSERTING_TAG\",\n+        \"DISCARDING_UNEXPECTED\",\n+    ];\n+    let to_mute_s = to_mute.join(\",\");\n+    let mut command = Command::new(\"tidy\");\n+    command\n+        .arg(\"-errors\")\n+        .arg(\"-quiet\")\n+        .arg(\"--mute-id\") // this option is useful in case we want to mute more warnings\n+        .arg(\"yes\")\n+        .arg(\"--mute\")\n+        .arg(&to_mute_s)\n+        .arg(file);\n+\n+    let Output { status, stderr, .. } = command.output().expect(\"failed to run tidy command\");\n+    if status.success() {\n+        0\n+    } else {\n+        let stderr = String::from_utf8(stderr).expect(\"String::from_utf8 failed...\");\n+        if stderr.is_empty() && status.code() != Some(2) {\n+            0\n+        } else {\n+            eprintln!(\n+                \"=> Errors for `{}` (error code: {}) <=\",\n+                file.display(),\n+                status.code().unwrap_or(-1)\n+            );\n+            eprintln!(\"{}\", stderr);\n+            stderr.lines().count()\n+        }\n+    }\n+}\n+\n+const DOCS_TO_CHECK: &[&str] =\n+    &[\"alloc\", \"core\", \"proc_macro\", \"implementors\", \"src\", \"std\", \"test\"];\n+\n+// Returns the number of files read and the number of errors.\n+fn find_all_html_files(dir: &Path) -> (usize, usize) {\n+    let mut files_read = 0;\n+    let mut errors = 0;\n+\n+    for entry in walkdir::WalkDir::new(dir).into_iter().filter_entry(|e| {\n+        e.depth() != 1\n+            || e.file_name()\n+                .to_str()\n+                .map(|s| DOCS_TO_CHECK.into_iter().any(|d| *d == s))\n+                .unwrap_or(false)\n+    }) {\n+        let entry = entry.expect(\"failed to read file\");\n+        if !entry.file_type().is_file() {\n+            continue;\n+        }\n+        let entry = entry.path();\n+        if entry.extension().and_then(|s| s.to_str()) == Some(\"html\") {\n+            errors += check_html_file(&entry);\n+            files_read += 1;\n+        }\n+    }\n+    (files_read, errors)\n+}\n+\n+fn main() -> Result<(), String> {\n+    let args = env::args().collect::<Vec<_>>();\n+    if args.len() != 2 {\n+        return Err(format!(\"Usage: {} <doc folder>\", args[0]));\n+    }\n+\n+    println!(\"Running HTML checker...\");\n+\n+    let (files_read, errors) = find_all_html_files(&Path::new(&args[1]));\n+    println!(\"Done! Read {} files...\", files_read);\n+    if errors > 0 {\n+        Err(format!(\"HTML check failed: {} errors\", errors))\n+    } else {\n+        println!(\"No error found!\");\n+        Ok(())\n+    }\n+}"}]}