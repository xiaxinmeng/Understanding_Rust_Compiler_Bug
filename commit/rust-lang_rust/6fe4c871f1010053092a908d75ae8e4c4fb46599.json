{"sha": "6fe4c871f1010053092a908d75ae8e4c4fb46599", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmZTRjODcxZjEwMTAwNTMwOTJhOTA4ZDc1YWU4ZTRjNGZiNDY1OTk=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-08-12T16:39:19Z"}, "committer": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-08-15T00:52:55Z"}, "message": "Update either::partition\n\nRemove the only use of either::partition since it was better\naccomplished with vector methods.\n\nUpdate either::partition so that it sizes the vectors correctly before\nit starts.", "tree": {"sha": "ed792a27a8fef56bede8360f7c4e2939d13fd73c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed792a27a8fef56bede8360f7c4e2939d13fd73c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6fe4c871f1010053092a908d75ae8e4c4fb46599", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6fe4c871f1010053092a908d75ae8e4c4fb46599", "html_url": "https://github.com/rust-lang/rust/commit/6fe4c871f1010053092a908d75ae8e4c4fb46599", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6fe4c871f1010053092a908d75ae8e4c4fb46599/comments", "author": null, "committer": null, "parents": [{"sha": "a5f9494199c0990002b52c29fed998c5753f4a0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5f9494199c0990002b52c29fed998c5753f4a0b", "html_url": "https://github.com/rust-lang/rust/commit/a5f9494199c0990002b52c29fed998c5753f4a0b"}], "stats": {"total": 19, "additions": 6, "deletions": 13}, "files": [{"sha": "c8c4a396c87af99c0041f1274fcd3acf92b353c7", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6fe4c871f1010053092a908d75ae8e4c4fb46599/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fe4c871f1010053092a908d75ae8e4c4fb46599/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=6fe4c871f1010053092a908d75ae8e4c4fb46599", "patch": "@@ -57,6 +57,7 @@ pub fn read_crates(diag: @mut span_handler,\n     warn_if_multiple_versions(e, diag, *e.crate_cache);\n }\n \n+#[deriving(Clone)]\n struct cache_entry {\n     cnum: int,\n     span: span,\n@@ -76,22 +77,13 @@ fn dump_crates(crate_cache: &[cache_entry]) {\n fn warn_if_multiple_versions(e: @mut Env,\n                              diag: @mut span_handler,\n                              crate_cache: &[cache_entry]) {\n-    use std::either::*;\n-\n     if crate_cache.len() != 0u {\n         let name = loader::crate_name_from_metas(\n             *crate_cache[crate_cache.len() - 1].metas\n         );\n \n-        let vec: ~[Either<cache_entry, cache_entry>] = crate_cache.iter().map(|&entry| {\n-            let othername = loader::crate_name_from_metas(*entry.metas);\n-            if name == othername {\n-                Left(entry)\n-            } else {\n-                Right(entry)\n-            }\n-        }).collect();\n-        let (matches, non_matches) = partition(vec);\n+        let (matches, non_matches) = crate_cache.partitioned(|entry|\n+            name == loader::crate_name_from_metas(*entry.metas));\n \n         assert!(!matches.is_empty());\n "}, {"sha": "5d988965e8cccc9ce61eb583530b63225b58caae", "filename": "src/libstd/either.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6fe4c871f1010053092a908d75ae8e4c4fb46599/src%2Flibstd%2Feither.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fe4c871f1010053092a908d75ae8e4c4fb46599/src%2Flibstd%2Feither.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Feither.rs?ref=6fe4c871f1010053092a908d75ae8e4c4fb46599", "patch": "@@ -151,8 +151,9 @@ pub fn rights<L, R, Iter: Iterator<Either<L, R>>>(eithers: Iter)\n /// Returns a structure containing a vector of left values and a vector of\n /// right values.\n pub fn partition<L, R>(eithers: ~[Either<L, R>]) -> (~[L], ~[R]) {\n-    let mut lefts: ~[L] = ~[];\n-    let mut rights: ~[R] = ~[];\n+    let n_lefts = eithers.iter().count(|elt| elt.is_left());\n+    let mut lefts = vec::with_capacity(n_lefts);\n+    let mut rights = vec::with_capacity(eithers.len() - n_lefts);\n     for elt in eithers.move_iter() {\n         match elt {\n             Left(l) => lefts.push(l),"}]}