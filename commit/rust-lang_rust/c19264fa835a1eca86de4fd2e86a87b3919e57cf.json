{"sha": "c19264fa835a1eca86de4fd2e86a87b3919e57cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxOTI2NGZhODM1YTFlY2E4NmRlNGZkMmU4NmE4N2IzOTE5ZTU3Y2Y=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-03-21T01:06:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-03-21T01:06:16Z"}, "message": "Auto merge of #49200 - oli-obk:extern_static_metadata, r=michaelwoerister\n\nEncode/decode extern statics in metadata and incremental cache\n\nfixes #49153\n\ncc @abonander\n\nr? @michaelwoerister incremental ICE", "tree": {"sha": "2a768000004d96f6ebc687949ed795212c68f458", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a768000004d96f6ebc687949ed795212c68f458"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c19264fa835a1eca86de4fd2e86a87b3919e57cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c19264fa835a1eca86de4fd2e86a87b3919e57cf", "html_url": "https://github.com/rust-lang/rust/commit/c19264fa835a1eca86de4fd2e86a87b3919e57cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c19264fa835a1eca86de4fd2e86a87b3919e57cf/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10420536ec95b05603b20e6ef769b44ed8c1ea8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/10420536ec95b05603b20e6ef769b44ed8c1ea8e", "html_url": "https://github.com/rust-lang/rust/commit/10420536ec95b05603b20e6ef769b44ed8c1ea8e"}, {"sha": "13bfbe1394732163c7130dd57e6b0a86e147c7e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/13bfbe1394732163c7130dd57e6b0a86e147c7e8", "html_url": "https://github.com/rust-lang/rust/commit/13bfbe1394732163c7130dd57e6b0a86e147c7e8"}], "stats": {"total": 41, "additions": 38, "deletions": 3}, "files": [{"sha": "e242ec4985ab4ae838f7a974aef0776fcf4fc4d4", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c19264fa835a1eca86de4fd2e86a87b3919e57cf/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c19264fa835a1eca86de4fd2e86a87b3919e57cf/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=c19264fa835a1eca86de4fd2e86a87b3919e57cf", "patch": "@@ -156,6 +156,8 @@ impl ::rustc_serialize::UseSpecializedDecodable for AllocId {}\n \n pub const ALLOC_DISCRIMINANT: usize = 0;\n pub const FN_DISCRIMINANT: usize = 1;\n+pub const EXTERN_STATIC_DISCRIMINANT: usize = 2;\n+pub const SHORTHAND_START: usize = 3;\n \n pub fn specialized_encode_alloc_id<\n     'a, 'tcx,\n@@ -173,13 +175,18 @@ pub fn specialized_encode_alloc_id<\n         trace!(\"encoding {:?} with {:#?}\", alloc_id, alloc);\n         ALLOC_DISCRIMINANT.encode(encoder)?;\n         alloc.encode(encoder)?;\n+        // encode whether this allocation is the root allocation of a static\n         tcx.interpret_interner\n             .get_corresponding_static_def_id(alloc_id)\n             .encode(encoder)?;\n     } else if let Some(fn_instance) = tcx.interpret_interner.get_fn(alloc_id) {\n         trace!(\"encoding {:?} with {:#?}\", alloc_id, fn_instance);\n         FN_DISCRIMINANT.encode(encoder)?;\n         fn_instance.encode(encoder)?;\n+    } else if let Some(did) = tcx.interpret_interner.get_corresponding_static_def_id(alloc_id) {\n+        // extern \"C\" statics don't have allocations, just encode its def_id\n+        EXTERN_STATIC_DISCRIMINANT.encode(encoder)?;\n+        did.encode(encoder)?;\n     } else {\n         bug!(\"alloc id without corresponding allocation: {}\", alloc_id);\n     }\n@@ -225,6 +232,13 @@ pub fn specialized_decode_alloc_id<\n             cache(decoder, pos, id);\n             Ok(id)\n         },\n+        EXTERN_STATIC_DISCRIMINANT => {\n+            trace!(\"creating extern static alloc id at {}\", pos);\n+            let did = DefId::decode(decoder)?;\n+            let alloc_id = tcx.interpret_interner.reserve();\n+            tcx.interpret_interner.cache(did, alloc_id);\n+            Ok(alloc_id)\n+        },\n         shorthand => {\n             trace!(\"loading shorthand {}\", shorthand);\n             short(decoder, shorthand)"}, {"sha": "c103d6e015aa4c37093a10ed548822dd2804eb5c", "filename": "src/librustc/ty/maps/on_disk_cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c19264fa835a1eca86de4fd2e86a87b3919e57cf/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c19264fa835a1eca86de4fd2e86a87b3919e57cf/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs?ref=c19264fa835a1eca86de4fd2e86a87b3919e57cf", "patch": "@@ -820,7 +820,7 @@ impl<'enc, 'a, 'tcx, E> SpecializedEncoder<interpret::AllocId> for CacheEncoder<\n                 // of the metadata file, because that would end up making our indices\n                 // not special. It is essentially impossible for that to happen,\n                 // but let's make sure\n-                assert!(pos != interpret::ALLOC_DISCRIMINANT && pos != interpret::FN_DISCRIMINANT);\n+                assert!(pos >= interpret::SHORTHAND_START);\n                 entry.insert(pos);\n                 None\n             },"}, {"sha": "6b3453f2c99e832d591bce45fd0c05270f8bf7a9", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c19264fa835a1eca86de4fd2e86a87b3919e57cf/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c19264fa835a1eca86de4fd2e86a87b3919e57cf/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=c19264fa835a1eca86de4fd2e86a87b3919e57cf", "patch": "@@ -203,9 +203,9 @@ impl<'a, 'tcx> SpecializedEncoder<interpret::AllocId> for EncodeContext<'a, 'tcx\n             Entry::Occupied(entry) => Some(entry.get().clone()),\n             Entry::Vacant(entry) => {\n                 // ensure that we don't place any AllocIds at the very beginning\n-                // of the metadata file, because that would end up making our 0 and 1 indices\n+                // of the metadata file, because that would end up making our indices\n                 // not special. This is essentially impossible, but let's make sure\n-                assert!(pos != 0 && pos != 1);\n+                assert!(pos >= interpret::SHORTHAND_START);\n                 entry.insert(pos);\n                 None\n             },"}, {"sha": "e0538e09c64707d8482e9ffa2d6cff389978f2f7", "filename": "src/test/incremental/extern_static/issue-49153.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c19264fa835a1eca86de4fd2e86a87b3919e57cf/src%2Ftest%2Fincremental%2Fextern_static%2Fissue-49153.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c19264fa835a1eca86de4fd2e86a87b3919e57cf/src%2Ftest%2Fincremental%2Fextern_static%2Fissue-49153.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fextern_static%2Fissue-49153.rs?ref=c19264fa835a1eca86de4fd2e86a87b3919e57cf", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// https://github.com/rust-lang/rust/issues/49153\n+\n+// revisions:rpass1 rpass2\n+\n+extern \"C\" {\n+    pub static __ImageBase: u8;\n+}\n+\n+pub static FOO: &'static u8 = unsafe { &__ImageBase };\n+\n+fn main() {}"}]}