{"sha": "79cd224e758f603898b64308e849fbb9be6e6f4d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5Y2QyMjRlNzU4ZjYwMzg5OGI2NDMwOGU4NDlmYmI5YmU2ZTZmNGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-24T00:31:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-24T00:31:01Z"}, "message": "Auto merge of #69366 - Centril:unified-items, r=petrochenkov\n\nparse: unify item parsing & filter illegal item kinds\n\nThis PR fully unifies item parsing into a single `fn parse_item_common` method which produces `Option<Item>`. The `Item` is then mapped into `ForeignItem` and `AssocItem` as necessary by transforming the `*Kind` and converting contextually bad variants into `None`, thereby filtering them away.\n\nThe PR does not yet unmerge the definition of `ForeignItemKind` from `AssocItemKind`. I've left that as future work as it didn't feel like this parser-focused PR would be the best one to deal with it. Changes to the AST data structures are instead kept to a reasonable minimum.\n\nBased on https://github.com/rust-lang/rust/pull/69361.\n\nFixes https://github.com/rust-lang/rust/issues/48137.\nRELNOTES: Now, `item` macro fragments can be interpolated into `impl`, `trait`, and `extern` contexts. See `src/test/ui/parser/issue-48137-macros-cannot-interpolate-impl-items.rs` for the relevant test.\n\nr? @petrochenkov\ncc @estebank", "tree": {"sha": "6baaaa0f7f57a4b5b20013878c06e9087b4ee58c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6baaaa0f7f57a4b5b20013878c06e9087b4ee58c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79cd224e758f603898b64308e849fbb9be6e6f4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79cd224e758f603898b64308e849fbb9be6e6f4d", "html_url": "https://github.com/rust-lang/rust/commit/79cd224e758f603898b64308e849fbb9be6e6f4d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79cd224e758f603898b64308e849fbb9be6e6f4d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d0e58bff88f620c1a4f641a627f046bf4cde4ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d0e58bff88f620c1a4f641a627f046bf4cde4ad", "html_url": "https://github.com/rust-lang/rust/commit/6d0e58bff88f620c1a4f641a627f046bf4cde4ad"}, {"sha": "1c75f5aaa177734c8dbdab91612a8d59b519bf07", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c75f5aaa177734c8dbdab91612a8d59b519bf07", "html_url": "https://github.com/rust-lang/rust/commit/1c75f5aaa177734c8dbdab91612a8d59b519bf07"}], "stats": {"total": 2621, "additions": 1977, "deletions": 644}, "files": [{"sha": "b5e4fe90d0dce6f2b6e29d4016c5a10caf436c4c", "filename": "src/librustc_ast_lowering/item.rs", "status": "modified", "additions": 28, "deletions": 32, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Flibrustc_ast_lowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Flibrustc_ast_lowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fitem.rs?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -173,7 +173,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 }\n                 ids\n             }\n-            ItemKind::Const(ref ty, ..) => {\n+            ItemKind::Const(_, ref ty, ..) => {\n                 let mut ids = smallvec![i.id];\n                 if self.sess.features_untracked().impl_trait_in_bindings {\n                     let mut visitor = ImplTraitTypeIdVisitor { ids: &mut ids };\n@@ -264,11 +264,11 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 let (ty, body_id) = self.lower_const_item(t, span, e.as_deref());\n                 hir::ItemKind::Static(ty, m, body_id)\n             }\n-            ItemKind::Const(ref t, ref e) => {\n+            ItemKind::Const(_, ref t, ref e) => {\n                 let (ty, body_id) = self.lower_const_item(t, span, e.as_deref());\n                 hir::ItemKind::Const(ty, body_id)\n             }\n-            ItemKind::Fn(FnSig { ref decl, header }, ref generics, ref body) => {\n+            ItemKind::Fn(_, FnSig { ref decl, header }, ref generics, ref body) => {\n                 let fn_def_id = self.resolver.definitions().local_def_id(id);\n                 self.with_new_scopes(|this| {\n                     this.current_item = Some(ident.span);\n@@ -297,24 +297,24 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             ItemKind::Mod(ref m) => hir::ItemKind::Mod(self.lower_mod(m)),\n             ItemKind::ForeignMod(ref nm) => hir::ItemKind::ForeignMod(self.lower_foreign_mod(nm)),\n             ItemKind::GlobalAsm(ref ga) => hir::ItemKind::GlobalAsm(self.lower_global_asm(ga)),\n-            ItemKind::TyAlias(ref generics, _, Some(ref ty)) => match ty.kind.opaque_top_hack() {\n+            ItemKind::TyAlias(_, ref gen, _, Some(ref ty)) => match ty.kind.opaque_top_hack() {\n                 None => {\n                     let ty = self.lower_ty(ty, ImplTraitContext::disallowed());\n-                    let generics = self.lower_generics(generics, ImplTraitContext::disallowed());\n+                    let generics = self.lower_generics(gen, ImplTraitContext::disallowed());\n                     hir::ItemKind::TyAlias(ty, generics)\n                 }\n                 Some(bounds) => {\n                     let ctx = || ImplTraitContext::OpaqueTy(None, hir::OpaqueTyOrigin::Misc);\n                     let ty = hir::OpaqueTy {\n-                        generics: self.lower_generics(generics, ctx()),\n+                        generics: self.lower_generics(gen, ctx()),\n                         bounds: self.lower_param_bounds(bounds, ctx()),\n                         impl_trait_fn: None,\n                         origin: hir::OpaqueTyOrigin::TypeAlias,\n                     };\n                     hir::ItemKind::OpaqueTy(ty)\n                 }\n             },\n-            ItemKind::TyAlias(ref generics, _, None) => {\n+            ItemKind::TyAlias(_, ref generics, _, None) => {\n                 let ty = self.arena.alloc(self.ty(span, hir::TyKind::Err));\n                 let generics = self.lower_generics(generics, ImplTraitContext::disallowed());\n                 hir::ItemKind::TyAlias(ty, generics)\n@@ -654,7 +654,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             ident: i.ident,\n             attrs: self.lower_attrs(&i.attrs),\n             kind: match i.kind {\n-                ForeignItemKind::Fn(ref sig, ref generics, _) => {\n+                ForeignItemKind::Fn(_, ref sig, ref generics, _) => {\n                     let fdec = &sig.decl;\n                     let (generics, (fn_dec, fn_args)) = self.add_in_band_defs(\n                         generics,\n@@ -675,7 +675,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     let ty = self.lower_ty(t, ImplTraitContext::disallowed());\n                     hir::ForeignItemKind::Static(ty, m)\n                 }\n-                ForeignItemKind::Const(ref t, _) => {\n+                ForeignItemKind::Const(_, ref t, _) => {\n                     // For recovery purposes.\n                     let ty = self.lower_ty(t, ImplTraitContext::disallowed());\n                     hir::ForeignItemKind::Static(ty, Mutability::Not)\n@@ -758,24 +758,24 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n         let (generics, kind) = match i.kind {\n             AssocItemKind::Static(ref ty, _, ref default) // Let's pretend this is a `const`.\n-            | AssocItemKind::Const(ref ty, ref default) => {\n+            | AssocItemKind::Const(_, ref ty, ref default) => {\n                 let ty = self.lower_ty(ty, ImplTraitContext::disallowed());\n                 let body = default.as_ref().map(|x| self.lower_const_body(i.span, Some(x)));\n                 (hir::Generics::empty(), hir::TraitItemKind::Const(ty, body))\n             }\n-            AssocItemKind::Fn(ref sig, ref generics, None) => {\n+            AssocItemKind::Fn(_, ref sig, ref generics, None) => {\n                 let names = self.lower_fn_params_to_names(&sig.decl);\n                 let (generics, sig) =\n                     self.lower_method_sig(generics, sig, trait_item_def_id, false, None);\n                 (generics, hir::TraitItemKind::Method(sig, hir::TraitMethod::Required(names)))\n             }\n-            AssocItemKind::Fn(ref sig, ref generics, Some(ref body)) => {\n+            AssocItemKind::Fn(_, ref sig, ref generics, Some(ref body)) => {\n                 let body_id = self.lower_fn_body_block(i.span, &sig.decl, Some(body));\n                 let (generics, sig) =\n                     self.lower_method_sig(generics, sig, trait_item_def_id, false, None);\n                 (generics, hir::TraitItemKind::Method(sig, hir::TraitMethod::Provided(body_id)))\n             }\n-            AssocItemKind::TyAlias(ref generics, ref bounds, ref default) => {\n+            AssocItemKind::TyAlias(_, ref generics, ref bounds, ref default) => {\n                 let ty = default.as_ref().map(|x| self.lower_ty(x, ImplTraitContext::disallowed()));\n                 let generics = self.lower_generics(generics, ImplTraitContext::disallowed());\n                 let kind = hir::TraitItemKind::Type(\n@@ -801,22 +801,18 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     fn lower_trait_item_ref(&mut self, i: &AssocItem) -> hir::TraitItemRef {\n         let (kind, has_default) = match &i.kind {\n             AssocItemKind::Static(_, _, default) // Let's pretend this is a `const` for recovery.\n-            | AssocItemKind::Const(_, default) => {\n+            | AssocItemKind::Const(_, _, default) => {\n                 (hir::AssocItemKind::Const, default.is_some())\n             }\n-            AssocItemKind::TyAlias(_, _, default) => (hir::AssocItemKind::Type, default.is_some()),\n-            AssocItemKind::Fn(sig, _, default) => {\n+            AssocItemKind::TyAlias(_, _, _, default) => (hir::AssocItemKind::Type, default.is_some()),\n+            AssocItemKind::Fn(_, sig, _, default) => {\n                 (hir::AssocItemKind::Method { has_self: sig.decl.has_self() }, default.is_some())\n             }\n             AssocItemKind::Macro(..) => unimplemented!(),\n         };\n-        hir::TraitItemRef {\n-            id: hir::TraitItemId { hir_id: self.lower_node_id(i.id) },\n-            ident: i.ident,\n-            span: i.span,\n-            defaultness: self.lower_defaultness(Defaultness::Default, has_default),\n-            kind,\n-        }\n+        let id = hir::TraitItemId { hir_id: self.lower_node_id(i.id) };\n+        let defaultness = hir::Defaultness::Default { has_value: has_default };\n+        hir::TraitItemRef { id, ident: i.ident, span: i.span, defaultness, kind }\n     }\n \n     /// Construct `ExprKind::Err` for the given `span`.\n@@ -827,15 +823,15 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     fn lower_impl_item(&mut self, i: &AssocItem) -> hir::ImplItem<'hir> {\n         let impl_item_def_id = self.resolver.definitions().local_def_id(i.id);\n \n-        let (generics, kind) = match i.kind {\n-            AssocItemKind::Static(ref ty, _, ref expr) | AssocItemKind::Const(ref ty, ref expr) => {\n+        let (generics, kind) = match &i.kind {\n+            AssocItemKind::Static(ty, _, expr) | AssocItemKind::Const(_, ty, expr) => {\n                 let ty = self.lower_ty(ty, ImplTraitContext::disallowed());\n                 (\n                     hir::Generics::empty(),\n                     hir::ImplItemKind::Const(ty, self.lower_const_body(i.span, expr.as_deref())),\n                 )\n             }\n-            AssocItemKind::Fn(ref sig, ref generics, ref body) => {\n+            AssocItemKind::Fn(_, sig, generics, body) => {\n                 self.current_item = Some(i.span);\n                 let asyncness = sig.header.asyncness;\n                 let body_id =\n@@ -851,7 +847,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n                 (generics, hir::ImplItemKind::Method(sig, body_id))\n             }\n-            AssocItemKind::TyAlias(ref generics, _, ref ty) => {\n+            AssocItemKind::TyAlias(_, generics, _, ty) => {\n                 let generics = self.lower_generics(generics, ImplTraitContext::disallowed());\n                 let kind = match ty {\n                     None => {\n@@ -880,7 +876,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             attrs: self.lower_attrs(&i.attrs),\n             generics,\n             vis: self.lower_visibility(&i.vis, None),\n-            defaultness: self.lower_defaultness(i.defaultness, true /* [1] */),\n+            defaultness: self.lower_defaultness(i.kind.defaultness(), true /* [1] */),\n             kind,\n             span: i.span,\n         }\n@@ -894,17 +890,17 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             ident: i.ident,\n             span: i.span,\n             vis: self.lower_visibility(&i.vis, Some(i.id)),\n-            defaultness: self.lower_defaultness(i.defaultness, true /* [1] */),\n+            defaultness: self.lower_defaultness(i.kind.defaultness(), true /* [1] */),\n             kind: match &i.kind {\n                 AssocItemKind::Static(..) // Let's pretend this is a `const` for recovery.\n                 | AssocItemKind::Const(..) => hir::AssocItemKind::Const,\n-                AssocItemKind::TyAlias(_, _, ty) => {\n+                AssocItemKind::TyAlias(.., ty) => {\n                     match ty.as_deref().and_then(|ty| ty.kind.opaque_top_hack()) {\n                         None => hir::AssocItemKind::Type,\n                         Some(_) => hir::AssocItemKind::OpaqueTy,\n                     }\n                 }\n-                AssocItemKind::Fn(sig, _, _) => {\n+                AssocItemKind::Fn(_, sig, ..) => {\n                     hir::AssocItemKind::Method { has_self: sig.decl.has_self() }\n                 }\n                 AssocItemKind::Macro(..) => unimplemented!(),\n@@ -948,7 +944,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n     fn lower_defaultness(&self, d: Defaultness, has_value: bool) -> hir::Defaultness {\n         match d {\n-            Defaultness::Default => hir::Defaultness::Default { has_value: has_value },\n+            Defaultness::Default(_) => hir::Defaultness::Default { has_value },\n             Defaultness::Final => {\n                 assert!(has_value);\n                 hir::Defaultness::Final"}, {"sha": "8bf9311bfc7987db433f1976f942bb8cee153a9d", "filename": "src/librustc_ast_lowering/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Flibrustc_ast_lowering%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Flibrustc_ast_lowering%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Flib.rs?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -462,7 +462,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     ItemKind::Struct(_, ref generics)\n                     | ItemKind::Union(_, ref generics)\n                     | ItemKind::Enum(_, ref generics)\n-                    | ItemKind::TyAlias(ref generics, ..)\n+                    | ItemKind::TyAlias(_, ref generics, ..)\n                     | ItemKind::Trait(_, _, ref generics, ..) => {\n                         let def_id = self.lctx.resolver.definitions().local_def_id(item.id);\n                         let count = generics\n@@ -490,7 +490,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 self.lctx.allocate_hir_id_counter(item.id);\n                 let owner = match (&item.kind, ctxt) {\n                     // Ignore patterns in trait methods without bodies.\n-                    (AssocItemKind::Fn(_, _, None), AssocCtxt::Trait) => None,\n+                    (AssocItemKind::Fn(_, _, _, None), AssocCtxt::Trait) => None,\n                     _ => Some(item.id),\n                 };\n                 self.with_hir_id_owner(owner, |this| visit::walk_assoc_item(this, item, ctxt));"}, {"sha": "44fed6dee6628f58d299eb71b16f0862df3b8b6b", "filename": "src/librustc_ast_passes/ast_validation.rs", "status": "modified", "additions": 24, "deletions": 15, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Flibrustc_ast_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Flibrustc_ast_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Fast_validation.rs?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -400,9 +400,11 @@ impl<'a> AstValidator<'a> {\n     }\n \n     fn check_defaultness(&self, span: Span, defaultness: Defaultness) {\n-        if let Defaultness::Default = defaultness {\n+        if let Defaultness::Default(def_span) = defaultness {\n+            let span = self.session.source_map().def_span(span);\n             self.err_handler()\n                 .struct_span_err(span, \"`default` is only allowed on items in `impl` definitions\")\n+                .span_label(def_span, \"`default` because of this\")\n                 .emit();\n         }\n     }\n@@ -863,10 +865,12 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 if polarity == ImplPolarity::Negative {\n                     self.err_handler().span_err(item.span, \"inherent impls cannot be negative\");\n                 }\n-                if defaultness == Defaultness::Default {\n+                if let Defaultness::Default(def_span) = defaultness {\n+                    let span = self.session.source_map().def_span(item.span);\n                     self.err_handler()\n-                        .struct_span_err(item.span, \"inherent impls cannot be default\")\n-                        .note(\"only trait implementations may be annotated with default\")\n+                        .struct_span_err(span, \"inherent impls cannot be `default`\")\n+                        .span_label(def_span, \"`default` because of this\")\n+                        .note(\"only trait implementations may be annotated with `default`\")\n                         .emit();\n                 }\n                 if let Const::Yes(span) = constness {\n@@ -877,7 +881,8 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                         .emit();\n                 }\n             }\n-            ItemKind::Fn(ref sig, ref generics, ref body) => {\n+            ItemKind::Fn(def, ref sig, ref generics, ref body) => {\n+                self.check_defaultness(item.span, def);\n                 self.check_const_fn_const_generic(item.span, sig, generics);\n \n                 if body.is_none() {\n@@ -961,15 +966,17 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                     self.err_handler().span_err(item.span, \"unions cannot have zero fields\");\n                 }\n             }\n-            ItemKind::Const(.., None) => {\n+            ItemKind::Const(def, .., None) => {\n+                self.check_defaultness(item.span, def);\n                 let msg = \"free constant item without body\";\n                 self.error_item_without_body(item.span, \"constant\", msg, \" = <expr>;\");\n             }\n             ItemKind::Static(.., None) => {\n                 let msg = \"free static item without body\";\n                 self.error_item_without_body(item.span, \"static\", msg, \" = <expr>;\");\n             }\n-            ItemKind::TyAlias(_, ref bounds, ref body) => {\n+            ItemKind::TyAlias(def, _, ref bounds, ref body) => {\n+                self.check_defaultness(item.span, def);\n                 if body.is_none() {\n                     let msg = \"free type alias without body\";\n                     self.error_item_without_body(item.span, \"type\", msg, \" = <type>;\");\n@@ -984,11 +991,13 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n \n     fn visit_foreign_item(&mut self, fi: &'a ForeignItem) {\n         match &fi.kind {\n-            ForeignItemKind::Fn(sig, _, body) => {\n+            ForeignItemKind::Fn(def, sig, _, body) => {\n+                self.check_defaultness(fi.span, *def);\n                 self.check_foreign_fn_bodyless(fi.ident, body.as_deref());\n                 self.check_foreign_fn_headerless(fi.ident, fi.span, sig.header);\n             }\n-            ForeignItemKind::TyAlias(generics, bounds, body) => {\n+            ForeignItemKind::TyAlias(def, generics, bounds, body) => {\n+                self.check_defaultness(fi.span, *def);\n                 self.check_foreign_kind_bodyless(fi.ident, \"type\", body.as_ref().map(|b| b.span));\n                 self.check_type_no_bounds(bounds, \"`extern` blocks\");\n                 self.check_foreign_ty_genericless(generics);\n@@ -1229,19 +1238,19 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n     }\n \n     fn visit_assoc_item(&mut self, item: &'a AssocItem, ctxt: AssocCtxt) {\n-        if ctxt == AssocCtxt::Trait {\n-            self.check_defaultness(item.span, item.defaultness);\n+        if ctxt == AssocCtxt::Trait || !self.in_trait_impl {\n+            self.check_defaultness(item.span, item.kind.defaultness());\n         }\n \n         if ctxt == AssocCtxt::Impl {\n             match &item.kind {\n-                AssocItemKind::Const(_, body) => {\n+                AssocItemKind::Const(_, _, body) => {\n                     self.check_impl_item_provided(item.span, body, \"constant\", \" = <expr>;\");\n                 }\n-                AssocItemKind::Fn(_, _, body) => {\n+                AssocItemKind::Fn(_, _, _, body) => {\n                     self.check_impl_item_provided(item.span, body, \"function\", \" { <body> }\");\n                 }\n-                AssocItemKind::TyAlias(_, bounds, body) => {\n+                AssocItemKind::TyAlias(_, _, bounds, body) => {\n                     self.check_impl_item_provided(item.span, body, \"type\", \" = <type>;\");\n                     self.check_type_no_bounds(bounds, \"`impl`s\");\n                 }\n@@ -1251,7 +1260,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n \n         if ctxt == AssocCtxt::Trait || self.in_trait_impl {\n             self.invalid_visibility(&item.vis, None);\n-            if let AssocItemKind::Fn(sig, _, _) = &item.kind {\n+            if let AssocItemKind::Fn(_, sig, _, _) = &item.kind {\n                 self.check_trait_fn_not_const(sig.header.constness);\n                 self.check_trait_fn_not_async(item.span, sig.header.asyncness);\n             }"}, {"sha": "33ff0bc451b3256174c8fee2d5058dde53161fd1", "filename": "src/librustc_ast_passes/feature_gate.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Flibrustc_ast_passes%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Flibrustc_ast_passes%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Ffeature_gate.rs?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -349,7 +349,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                     );\n                 }\n \n-                if let ast::Defaultness::Default = defaultness {\n+                if let ast::Defaultness::Default(_) = defaultness {\n                     gate_feature_post!(&self, specialization, i.span, \"specialization is unstable\");\n                 }\n             }\n@@ -372,7 +372,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                 gate_feature_post!(&self, decl_macro, i.span, msg);\n             }\n \n-            ast::ItemKind::TyAlias(_, _, Some(ref ty)) => self.check_impl_trait(&ty),\n+            ast::ItemKind::TyAlias(_, _, _, Some(ref ty)) => self.check_impl_trait(&ty),\n \n             _ => {}\n         }\n@@ -543,17 +543,17 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n     }\n \n     fn visit_assoc_item(&mut self, i: &'a ast::AssocItem, ctxt: AssocCtxt) {\n-        if i.defaultness == ast::Defaultness::Default {\n+        if let ast::Defaultness::Default(_) = i.kind.defaultness() {\n             gate_feature_post!(&self, specialization, i.span, \"specialization is unstable\");\n         }\n \n         match i.kind {\n-            ast::AssocItemKind::Fn(ref sig, _, _) => {\n+            ast::AssocItemKind::Fn(_, ref sig, _, _) => {\n                 if let (ast::Const::Yes(_), AssocCtxt::Trait) = (sig.header.constness, ctxt) {\n                     gate_feature_post!(&self, const_fn, i.span, \"const fn is unstable\");\n                 }\n             }\n-            ast::AssocItemKind::TyAlias(ref generics, _, ref ty) => {\n+            ast::AssocItemKind::TyAlias(_, ref generics, _, ref ty) => {\n                 if let (Some(_), AssocCtxt::Trait) = (ty, ctxt) {\n                     gate_feature_post!(\n                         &self,"}, {"sha": "2b223d92ff1985e631f8f33dccb67c027fbdf8e1", "filename": "src/librustc_ast_pretty/pprust.rs", "status": "modified", "additions": 15, "deletions": 18, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Flibrustc_ast_pretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Flibrustc_ast_pretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_pretty%2Fpprust.rs?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -1016,8 +1016,8 @@ impl<'a> State<'a> {\n     }\n \n     crate fn print_foreign_item(&mut self, item: &ast::ForeignItem) {\n-        let ast::ForeignItem { id, span, ident, attrs, kind, vis, tokens: _ } = item;\n-        self.print_nested_item_kind(*id, *span, *ident, attrs, ast::Defaultness::Final, kind, vis);\n+        let ast::Item { id, span, ident, attrs, kind, vis, tokens: _ } = item;\n+        self.print_nested_item_kind(*id, *span, *ident, attrs, kind, vis);\n     }\n \n     fn print_nested_item_kind(\n@@ -1026,7 +1026,6 @@ impl<'a> State<'a> {\n         span: Span,\n         ident: ast::Ident,\n         attrs: &[Attribute],\n-        def: ast::Defaultness,\n         kind: &ast::AssocItemKind,\n         vis: &ast::Visibility,\n     ) {\n@@ -1035,17 +1034,18 @@ impl<'a> State<'a> {\n         self.maybe_print_comment(span.lo());\n         self.print_outer_attributes(attrs);\n         match kind {\n-            ast::ForeignItemKind::Fn(sig, gen, body) => {\n-                self.print_fn_full(sig, ident, gen, vis, def, body.as_deref(), attrs);\n+            ast::ForeignItemKind::Fn(def, sig, gen, body) => {\n+                self.print_fn_full(sig, ident, gen, vis, *def, body.as_deref(), attrs);\n             }\n-            ast::ForeignItemKind::Const(ty, body) => {\n-                self.print_item_const(ident, None, ty, body.as_deref(), vis, def);\n+            ast::ForeignItemKind::Const(def, ty, body) => {\n+                self.print_item_const(ident, None, ty, body.as_deref(), vis, *def);\n             }\n             ast::ForeignItemKind::Static(ty, mutbl, body) => {\n+                let def = ast::Defaultness::Final;\n                 self.print_item_const(ident, Some(*mutbl), ty, body.as_deref(), vis, def);\n             }\n-            ast::ForeignItemKind::TyAlias(generics, bounds, ty) => {\n-                self.print_associated_type(ident, generics, bounds, ty.as_deref(), vis, def);\n+            ast::ForeignItemKind::TyAlias(def, generics, bounds, ty) => {\n+                self.print_associated_type(ident, generics, bounds, ty.as_deref(), vis, *def);\n             }\n             ast::ForeignItemKind::Macro(m) => {\n                 self.print_mac(m);\n@@ -1146,12 +1146,10 @@ impl<'a> State<'a> {\n                 let def = ast::Defaultness::Final;\n                 self.print_item_const(item.ident, Some(mutbl), ty, body.as_deref(), &item.vis, def);\n             }\n-            ast::ItemKind::Const(ref ty, ref body) => {\n-                let def = ast::Defaultness::Final;\n+            ast::ItemKind::Const(def, ref ty, ref body) => {\n                 self.print_item_const(item.ident, None, ty, body.as_deref(), &item.vis, def);\n             }\n-            ast::ItemKind::Fn(ref sig, ref gen, ref body) => {\n-                let def = ast::Defaultness::Final;\n+            ast::ItemKind::Fn(def, ref sig, ref gen, ref body) => {\n                 let body = body.as_deref();\n                 self.print_fn_full(sig, item.ident, gen, &item.vis, def, body, &item.attrs);\n             }\n@@ -1185,8 +1183,7 @@ impl<'a> State<'a> {\n                 self.s.word(ga.asm.to_string());\n                 self.end();\n             }\n-            ast::ItemKind::TyAlias(ref generics, ref bounds, ref ty) => {\n-                let def = ast::Defaultness::Final;\n+            ast::ItemKind::TyAlias(def, ref generics, ref bounds, ref ty) => {\n                 let ty = ty.as_deref();\n                 self.print_associated_type(item.ident, generics, bounds, ty, &item.vis, def);\n             }\n@@ -1389,7 +1386,7 @@ impl<'a> State<'a> {\n     }\n \n     crate fn print_defaultness(&mut self, defaultness: ast::Defaultness) {\n-        if let ast::Defaultness::Default = defaultness {\n+        if let ast::Defaultness::Default(_) = defaultness {\n             self.word_nbsp(\"default\");\n         }\n     }\n@@ -1461,8 +1458,8 @@ impl<'a> State<'a> {\n     }\n \n     crate fn print_assoc_item(&mut self, item: &ast::AssocItem) {\n-        let ast::AssocItem { id, span, ident, attrs, defaultness, kind, vis, tokens: _ } = item;\n-        self.print_nested_item_kind(*id, *span, *ident, attrs, *defaultness, kind, vis);\n+        let ast::Item { id, span, ident, attrs, kind, vis, tokens: _ } = item;\n+        self.print_nested_item_kind(*id, *span, *ident, attrs, kind, vis);\n     }\n \n     crate fn print_stmt(&mut self, st: &ast::Stmt) {"}, {"sha": "00ed05608b50be317036ec2294411468288b8e96", "filename": "src/librustc_builtin_macros/deriving/generic/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fmod.rs?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -542,9 +542,9 @@ impl<'a> TraitDef<'a> {\n                 span: self.span,\n                 ident,\n                 vis: respan(self.span.shrink_to_lo(), ast::VisibilityKind::Inherited),\n-                defaultness: ast::Defaultness::Final,\n                 attrs: Vec::new(),\n                 kind: ast::AssocItemKind::TyAlias(\n+                    ast::Defaultness::Final,\n                     Generics::default(),\n                     Vec::new(),\n                     Some(type_def.to_ty(cx, self.span, type_ident, generics)),\n@@ -968,16 +968,16 @@ impl<'a> MethodDef<'a> {\n             header: ast::FnHeader { unsafety, ext: ast::Extern::None, ..ast::FnHeader::default() },\n             decl: fn_decl,\n         };\n+        let def = ast::Defaultness::Final;\n \n         // Create the method.\n         P(ast::AssocItem {\n             id: ast::DUMMY_NODE_ID,\n             attrs: self.attributes.clone(),\n             span: trait_.span,\n             vis: respan(trait_lo_sp, ast::VisibilityKind::Inherited),\n-            defaultness: ast::Defaultness::Final,\n             ident: method_ident,\n-            kind: ast::AssocItemKind::Fn(sig, fn_generics, Some(body_block)),\n+            kind: ast::AssocItemKind::Fn(def, sig, fn_generics, Some(body_block)),\n             tokens: None,\n         })\n     }"}, {"sha": "5a0b1a6b88542c424b7a95ee4713d5ff144276e4", "filename": "src/librustc_builtin_macros/global_allocator.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Flibrustc_builtin_macros%2Fglobal_allocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Flibrustc_builtin_macros%2Fglobal_allocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fglobal_allocator.rs?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -66,7 +66,8 @@ impl AllocFnFactory<'_, '_> {\n         let decl = self.cx.fn_decl(abi_args, ast::FnRetTy::Ty(output_ty));\n         let header = FnHeader { unsafety: Unsafe::Yes(self.span), ..FnHeader::default() };\n         let sig = FnSig { decl, header };\n-        let kind = ItemKind::Fn(sig, Generics::default(), Some(self.cx.block_expr(output_expr)));\n+        let block = Some(self.cx.block_expr(output_expr));\n+        let kind = ItemKind::Fn(ast::Defaultness::Final, sig, Generics::default(), block);\n         let item = self.cx.item(\n             self.span,\n             self.cx.ident_of(&self.kind.fn_name(method.name), self.span),"}, {"sha": "8407352f57714057fa3e45cbc911156734e461e8", "filename": "src/librustc_builtin_macros/test.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Flibrustc_builtin_macros%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Flibrustc_builtin_macros%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Ftest.rs?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -184,6 +184,7 @@ pub fn expand_test_or_bench(\n         ],\n         // const $ident: test::TestDescAndFn =\n         ast::ItemKind::Const(\n+            ast::Defaultness::Final,\n             cx.ty(sp, ast::TyKind::Path(None, test_path(\"TestDescAndFn\"))),\n             // test::TestDescAndFn {\n             Some(\n@@ -378,7 +379,7 @@ fn test_type(cx: &ExtCtxt<'_>) -> TestType {\n fn has_test_signature(cx: &ExtCtxt<'_>, i: &ast::Item) -> bool {\n     let has_should_panic_attr = attr::contains_name(&i.attrs, sym::should_panic);\n     let ref sd = cx.parse_sess.span_diagnostic;\n-    if let ast::ItemKind::Fn(ref sig, ref generics, _) = i.kind {\n+    if let ast::ItemKind::Fn(_, ref sig, ref generics, _) = i.kind {\n         if let ast::Unsafe::Yes(span) = sig.header.unsafety {\n             sd.struct_span_err(i.span, \"unsafe functions cannot be used for tests\")\n                 .span_label(span, \"`unsafe` because of this\")\n@@ -427,7 +428,7 @@ fn has_test_signature(cx: &ExtCtxt<'_>, i: &ast::Item) -> bool {\n }\n \n fn has_bench_signature(cx: &ExtCtxt<'_>, i: &ast::Item) -> bool {\n-    let has_sig = if let ast::ItemKind::Fn(ref sig, _, _) = i.kind {\n+    let has_sig = if let ast::ItemKind::Fn(_, ref sig, _, _) = i.kind {\n         // N.B., inadequate check, but we're running\n         // well before resolve, can't get too deep.\n         sig.decl.inputs.len() == 1"}, {"sha": "4bbab0d257489b7e1a9bd288f5a9d2e22a9a56f1", "filename": "src/librustc_builtin_macros/test_harness.rs", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Flibrustc_builtin_macros%2Ftest_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Flibrustc_builtin_macros%2Ftest_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Ftest_harness.rs?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -170,22 +170,13 @@ impl MutVisitor for EntryPointCleaner {\n                     ));\n                     let allow_dead_code_item = attr::mk_list_item(allow_ident, vec![dc_nested]);\n                     let allow_dead_code = attr::mk_attr_outer(allow_dead_code_item);\n+                    let attrs = attrs\n+                        .into_iter()\n+                        .filter(|attr| !attr.check_name(sym::main) && !attr.check_name(sym::start))\n+                        .chain(iter::once(allow_dead_code))\n+                        .collect();\n \n-                    ast::Item {\n-                        id,\n-                        ident,\n-                        attrs: attrs\n-                            .into_iter()\n-                            .filter(|attr| {\n-                                !attr.check_name(sym::main) && !attr.check_name(sym::start)\n-                            })\n-                            .chain(iter::once(allow_dead_code))\n-                            .collect(),\n-                        kind,\n-                        vis,\n-                        span,\n-                        tokens,\n-                    }\n+                    ast::Item { id, ident, attrs, kind, vis, span, tokens }\n                 }),\n             EntryPointType::None | EntryPointType::OtherMain => item,\n         };\n@@ -307,7 +298,8 @@ fn mk_main(cx: &mut TestCtxt<'_>) -> P<ast::Item> {\n \n     let decl = ecx.fn_decl(vec![], ast::FnRetTy::Ty(main_ret_ty));\n     let sig = ast::FnSig { decl, header: ast::FnHeader::default() };\n-    let main = ast::ItemKind::Fn(sig, ast::Generics::default(), Some(main_body));\n+    let def = ast::Defaultness::Final;\n+    let main = ast::ItemKind::Fn(def, sig, ast::Generics::default(), Some(main_body));\n \n     // Honor the reexport_test_harness_main attribute\n     let main_id = match cx.reexport_test_harness_main {"}, {"sha": "bd6823cd4e275f586dbe26e39c00aadca1541c51", "filename": "src/librustc_expand/build.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Flibrustc_expand%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Flibrustc_expand%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fbuild.rs?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -644,7 +644,8 @@ impl<'a> ExtCtxt<'a> {\n         ty: P<ast::Ty>,\n         expr: P<ast::Expr>,\n     ) -> P<ast::Item> {\n-        self.item(span, name, Vec::new(), ast::ItemKind::Const(ty, Some(expr)))\n+        let def = ast::Defaultness::Final;\n+        self.item(span, name, Vec::new(), ast::ItemKind::Const(def, ty, Some(expr)))\n     }\n \n     pub fn attribute(&self, mi: ast::MetaItem) -> ast::Attribute {"}, {"sha": "bbea066b048d24e91b2567a5d466d6e617baa12b", "filename": "src/librustc_expand/expand.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Flibrustc_expand%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Flibrustc_expand%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fexpand.rs?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -377,8 +377,8 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 self.cx.span_err(\n                     span,\n                     &format!(\n-                        \"expected crate top-level item to be a module after macro expansion, found a {}\",\n-                        kind.descriptive_variant()\n+                        \"expected crate top-level item to be a module after macro expansion, found {} {}\",\n+                        kind.article(), kind.descr()\n                     ),\n                 );\n             }\n@@ -864,22 +864,22 @@ pub fn parse_ast_fragment<'a>(\n         }\n         AstFragmentKind::TraitItems => {\n             let mut items = SmallVec::new();\n-            while this.token != token::Eof {\n-                items.push(this.parse_trait_item(&mut false)?);\n+            while let Some(item) = this.parse_trait_item()? {\n+                items.extend(item);\n             }\n             AstFragment::TraitItems(items)\n         }\n         AstFragmentKind::ImplItems => {\n             let mut items = SmallVec::new();\n-            while this.token != token::Eof {\n-                items.push(this.parse_impl_item(&mut false)?);\n+            while let Some(item) = this.parse_impl_item()? {\n+                items.extend(item);\n             }\n             AstFragment::ImplItems(items)\n         }\n         AstFragmentKind::ForeignItems => {\n             let mut items = SmallVec::new();\n-            while this.token != token::Eof {\n-                items.push(this.parse_foreign_item(&mut false)?);\n+            while let Some(item) = this.parse_foreign_item()? {\n+                items.extend(item);\n             }\n             AstFragment::ForeignItems(items)\n         }"}, {"sha": "c323af4336a4ce498a3212077d93327a307b30e2", "filename": "src/librustc_expand/placeholders.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Flibrustc_expand%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Flibrustc_expand%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fplaceholders.rs?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -57,7 +57,6 @@ pub fn placeholder(\n             vis,\n             attrs,\n             kind: ast::AssocItemKind::Macro(mac_placeholder()),\n-            defaultness: ast::Defaultness::Final,\n             tokens: None,\n         })]),\n         AstFragmentKind::ImplItems => AstFragment::ImplItems(smallvec![P(ast::AssocItem {\n@@ -67,7 +66,6 @@ pub fn placeholder(\n             vis,\n             attrs,\n             kind: ast::AssocItemKind::Macro(mac_placeholder()),\n-            defaultness: ast::Defaultness::Final,\n             tokens: None,\n         })]),\n         AstFragmentKind::ForeignItems => {"}, {"sha": "6d2f5ba6baf14d74079485a80059f06560f65fae", "filename": "src/librustc_hir/hir.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Flibrustc_hir%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Flibrustc_hir%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir.rs?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -2500,24 +2500,24 @@ pub enum ItemKind<'hir> {\n }\n \n impl ItemKind<'_> {\n-    pub fn descriptive_variant(&self) -> &str {\n+    pub fn descr(&self) -> &str {\n         match *self {\n             ItemKind::ExternCrate(..) => \"extern crate\",\n-            ItemKind::Use(..) => \"use\",\n+            ItemKind::Use(..) => \"`use` import\",\n             ItemKind::Static(..) => \"static item\",\n             ItemKind::Const(..) => \"constant item\",\n             ItemKind::Fn(..) => \"function\",\n             ItemKind::Mod(..) => \"module\",\n-            ItemKind::ForeignMod(..) => \"foreign module\",\n-            ItemKind::GlobalAsm(..) => \"global asm\",\n+            ItemKind::ForeignMod(..) => \"extern block\",\n+            ItemKind::GlobalAsm(..) => \"global asm item\",\n             ItemKind::TyAlias(..) => \"type alias\",\n             ItemKind::OpaqueTy(..) => \"opaque type\",\n             ItemKind::Enum(..) => \"enum\",\n             ItemKind::Struct(..) => \"struct\",\n             ItemKind::Union(..) => \"union\",\n             ItemKind::Trait(..) => \"trait\",\n             ItemKind::TraitAlias(..) => \"trait alias\",\n-            ItemKind::Impl { .. } => \"impl\",\n+            ItemKind::Impl { .. } => \"implementation\",\n         }\n     }\n "}, {"sha": "c73f7aafb4860bda8798aaece6d1654d91d9b03a", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -677,7 +677,7 @@ impl<'a> MutVisitor for ReplaceBodyWithLoop<'a, '_> {\n     fn visit_item_kind(&mut self, i: &mut ast::ItemKind) {\n         let is_const = match i {\n             ast::ItemKind::Static(..) | ast::ItemKind::Const(..) => true,\n-            ast::ItemKind::Fn(ref sig, _, _) => Self::is_sig_const(sig),\n+            ast::ItemKind::Fn(_, ref sig, _, _) => Self::is_sig_const(sig),\n             _ => false,\n         };\n         self.run(is_const, |s| noop_visit_item_kind(i, s))\n@@ -686,7 +686,7 @@ impl<'a> MutVisitor for ReplaceBodyWithLoop<'a, '_> {\n     fn flat_map_trait_item(&mut self, i: P<ast::AssocItem>) -> SmallVec<[P<ast::AssocItem>; 1]> {\n         let is_const = match i.kind {\n             ast::AssocItemKind::Const(..) => true,\n-            ast::AssocItemKind::Fn(ref sig, _, _) => Self::is_sig_const(sig),\n+            ast::AssocItemKind::Fn(_, ref sig, _, _) => Self::is_sig_const(sig),\n             _ => false,\n         };\n         self.run(is_const, |s| noop_flat_map_assoc_item(i, s))"}, {"sha": "ca3727d1755635632eaf9b29dbff39453c0e1cd1", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -640,7 +640,7 @@ declare_lint_pass!(\n impl EarlyLintPass for AnonymousParameters {\n     fn check_trait_item(&mut self, cx: &EarlyContext<'_>, it: &ast::AssocItem) {\n         match it.kind {\n-            ast::AssocItemKind::Fn(ref sig, _, _) => {\n+            ast::AssocItemKind::Fn(_, ref sig, _, _) => {\n                 for arg in sig.decl.inputs.iter() {\n                     match arg.pat.kind {\n                         ast::PatKind::Ident(_, ident, None) => {"}, {"sha": "d6da62705419697589caadfc415c6ed4816aca03", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 180, "deletions": 240, "changes": 420, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -5,12 +5,12 @@ use super::{FollowedByType, Parser, PathStyle};\n use crate::maybe_whole;\n \n use rustc_ast_pretty::pprust;\n-use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, PResult, StashKey};\n+use rustc_errors::{struct_span_err, Applicability, PResult, StashKey};\n use rustc_span::source_map::{self, Span};\n use rustc_span::symbol::{kw, sym, Symbol};\n use syntax::ast::{self, AttrStyle, AttrVec, Attribute, Ident, DUMMY_NODE_ID};\n-use syntax::ast::{AssocItem, AssocItemKind, Item, ItemKind, UseTree, UseTreeKind};\n-use syntax::ast::{Async, Const, Defaultness, IsAuto, PathSegment, Unsafe};\n+use syntax::ast::{AssocItem, AssocItemKind, ForeignItemKind, Item, ItemKind};\n+use syntax::ast::{Async, Const, Defaultness, IsAuto, PathSegment, Unsafe, UseTree, UseTreeKind};\n use syntax::ast::{BindingMode, Block, FnDecl, FnSig, Mac, MacArgs, MacDelimiter, Param, SelfKind};\n use syntax::ast::{EnumDef, Generics, StructField, TraitRef, Ty, TyKind, Variant, VariantData};\n use syntax::ast::{FnHeader, ForeignItem, Mutability, Visibility, VisibilityKind};\n@@ -25,19 +25,31 @@ pub(super) type ItemInfo = (Ident, ItemKind);\n \n impl<'a> Parser<'a> {\n     pub fn parse_item(&mut self) -> PResult<'a, Option<P<Item>>> {\n+        self.parse_item_(|_| true).map(|i| i.map(P))\n+    }\n+\n+    fn parse_item_(&mut self, req_name: ReqName) -> PResult<'a, Option<Item>> {\n         let attrs = self.parse_outer_attributes()?;\n-        self.parse_item_(attrs, true, false)\n+        self.parse_item_common(attrs, true, false, req_name)\n     }\n \n-    pub(super) fn parse_item_(\n+    pub(super) fn parse_item_common(\n         &mut self,\n-        attrs: Vec<Attribute>,\n-        macros_allowed: bool,\n-        attributes_allowed: bool,\n-    ) -> PResult<'a, Option<P<Item>>> {\n+        mut attrs: Vec<Attribute>,\n+        mac_allowed: bool,\n+        attrs_allowed: bool,\n+        req_name: ReqName,\n+    ) -> PResult<'a, Option<Item>> {\n+        maybe_whole!(self, NtItem, |item| {\n+            let mut item = item;\n+            mem::swap(&mut item.attrs, &mut attrs);\n+            item.attrs.extend(attrs);\n+            Some(item.into_inner())\n+        });\n+\n         let mut unclosed_delims = vec![];\n-        let (ret, tokens) = self.collect_tokens(|this| {\n-            let item = this.parse_item_implementation(attrs, macros_allowed, attributes_allowed);\n+        let (mut item, tokens) = self.collect_tokens(|this| {\n+            let item = this.parse_item_common_(attrs, mac_allowed, attrs_allowed, req_name);\n             unclosed_delims.append(&mut this.unclosed_delims);\n             item\n         })?;\n@@ -57,52 +69,74 @@ impl<'a> Parser<'a> {\n         // it (bad!). To work around this case for now we just avoid recording\n         // `tokens` if we detect any inner attributes. This should help keep\n         // expansion correct, but we should fix this bug one day!\n-        Ok(ret.map(|item| {\n-            item.map(|mut i| {\n-                if !i.attrs.iter().any(|attr| attr.style == AttrStyle::Inner) {\n-                    i.tokens = Some(tokens);\n-                }\n-                i\n-            })\n-        }))\n+        if let Some(item) = &mut item {\n+            if !item.attrs.iter().any(|attr| attr.style == AttrStyle::Inner) {\n+                item.tokens = Some(tokens);\n+            }\n+        }\n+        Ok(item)\n     }\n \n-    /// Parses one of the items allowed by the flags.\n-    fn parse_item_implementation(\n+    fn parse_item_common_(\n         &mut self,\n         mut attrs: Vec<Attribute>,\n-        macros_allowed: bool,\n-        attributes_allowed: bool,\n-    ) -> PResult<'a, Option<P<Item>>> {\n-        maybe_whole!(self, NtItem, |item| {\n-            let mut item = item;\n-            mem::swap(&mut item.attrs, &mut attrs);\n-            item.attrs.extend(attrs);\n-            Some(item)\n-        });\n-\n+        mac_allowed: bool,\n+        attrs_allowed: bool,\n+        req_name: ReqName,\n+    ) -> PResult<'a, Option<Item>> {\n         let lo = self.token.span;\n         let vis = self.parse_visibility(FollowedByType::No)?;\n+        let mut def = self.parse_defaultness();\n+        let kind = self.parse_item_kind(&mut attrs, mac_allowed, lo, &vis, &mut def, req_name)?;\n+        if let Some((ident, kind)) = kind {\n+            self.error_on_unconsumed_default(def, &kind);\n+            let span = lo.to(self.prev_span);\n+            let id = DUMMY_NODE_ID;\n+            let item = Item { ident, attrs, id, kind, vis, span, tokens: None };\n+            return Ok(Some(item));\n+        }\n \n-        if let Some((ident, kind)) = self.parse_item_kind(&mut attrs, macros_allowed, lo, &vis)? {\n-            return Ok(Some(P(self.mk_item(lo, ident, kind, vis, attrs))));\n+        // At this point, we have failed to parse an item.\n+        self.error_on_unmatched_vis(&vis);\n+        self.error_on_unmatched_defaultness(def);\n+        if !attrs_allowed {\n+            self.recover_attrs_no_item(&attrs)?;\n         }\n+        Ok(None)\n+    }\n \n-        // FAILURE TO PARSE ITEM\n+    /// Error in-case a non-inherited visibility was parsed but no item followed.\n+    fn error_on_unmatched_vis(&self, vis: &Visibility) {\n         if let VisibilityKind::Inherited = vis.node {\n-        } else {\n-            let vs = pprust::vis_to_string(&vis);\n-            let vs = vs.trim_end();\n-            self.struct_span_err(vis.span, &format!(\"unmatched visibility `{}`\", vs))\n-                .span_label(vis.span, \"the unmatched visibility\")\n-                .help(&format!(\"you likely meant to define an item, e.g., `{} fn foo() {{}}`\", vs))\n+            return;\n+        }\n+        let vs = pprust::vis_to_string(&vis);\n+        let vs = vs.trim_end();\n+        self.struct_span_err(vis.span, &format!(\"visibility `{}` is not followed by an item\", vs))\n+            .span_label(vis.span, \"the visibility\")\n+            .help(&format!(\"you likely meant to define an item, e.g., `{} fn foo() {{}}`\", vs))\n+            .emit();\n+    }\n+\n+    /// Error in-case a `default` was parsed but no item followed.\n+    fn error_on_unmatched_defaultness(&self, def: Defaultness) {\n+        if let Defaultness::Default(sp) = def {\n+            self.struct_span_err(sp, \"`default` is not followed by an item\")\n+                .span_label(sp, \"the `default` qualifier\")\n+                .note(\"only `fn`, `const`, `type`, or `impl` items may be prefixed by `default`\")\n                 .emit();\n         }\n+    }\n \n-        if !attributes_allowed {\n-            self.recover_attrs_no_item(&attrs)?;\n+    /// Error in-case `default` was parsed in an in-appropriate context.\n+    fn error_on_unconsumed_default(&self, def: Defaultness, kind: &ItemKind) {\n+        if let Defaultness::Default(span) = def {\n+            let msg = format!(\"{} {} cannot be `default`\", kind.article(), kind.descr());\n+            self.struct_span_err(span, &msg)\n+                .span_label(span, \"`default` because of this\")\n+                .note(\"only associated `fn`, `const`, and `type` items can be `default`\")\n+                .emit();\n         }\n-        Ok(None)\n     }\n \n     /// Parses one of the items allowed by the flags.\n@@ -112,16 +146,20 @@ impl<'a> Parser<'a> {\n         macros_allowed: bool,\n         lo: Span,\n         vis: &Visibility,\n+        def: &mut Defaultness,\n+        req_name: ReqName,\n     ) -> PResult<'a, Option<ItemInfo>> {\n+        let mut def = || mem::replace(def, Defaultness::Final);\n+\n         let info = if self.eat_keyword(kw::Use) {\n             // USE ITEM\n             let tree = self.parse_use_tree()?;\n             self.expect_semi()?;\n             (Ident::invalid(), ItemKind::Use(P(tree)))\n         } else if self.check_fn_front_matter() {\n             // FUNCTION ITEM\n-            let (ident, sig, generics, body) = self.parse_fn(&mut false, attrs, |_| true)?;\n-            (ident, ItemKind::Fn(sig, generics, body))\n+            let (ident, sig, generics, body) = self.parse_fn(attrs, req_name)?;\n+            (ident, ItemKind::Fn(def(), sig, generics, body))\n         } else if self.eat_keyword(kw::Extern) {\n             if self.eat_keyword(kw::Crate) {\n                 // EXTERN CRATE\n@@ -134,29 +172,27 @@ impl<'a> Parser<'a> {\n             // STATIC ITEM\n             self.bump(); // `static`\n             let m = self.parse_mutability();\n-            self.parse_item_const(Some(m))?\n+            let (ident, ty, expr) = self.parse_item_global(Some(m))?;\n+            (ident, ItemKind::Static(ty, m, expr))\n         } else if let Const::Yes(const_span) = self.parse_constness() {\n             // CONST ITEM\n             self.recover_const_mut(const_span);\n-            self.parse_item_const(None)?\n+            let (ident, ty, expr) = self.parse_item_global(None)?;\n+            (ident, ItemKind::Const(def(), ty, expr))\n         } else if self.check_keyword(kw::Trait) || self.check_auto_or_unsafe_trait_item() {\n             // TRAIT ITEM\n             self.parse_item_trait(attrs, lo)?\n         } else if self.check_keyword(kw::Impl)\n             || self.check_keyword(kw::Unsafe) && self.is_keyword_ahead(1, &[kw::Impl])\n-            || self.check_keyword(kw::Default) && self.is_keyword_ahead(1, &[kw::Impl, kw::Unsafe])\n         {\n             // IMPL ITEM\n-            let defaultness = self.parse_defaultness();\n-            let unsafety = self.parse_unsafety();\n-            self.expect_keyword(kw::Impl)?;\n-            self.parse_item_impl(attrs, unsafety, defaultness)?\n+            self.parse_item_impl(attrs, def())?\n         } else if self.eat_keyword(kw::Mod) {\n             // MODULE ITEM\n             self.parse_item_mod(attrs)?\n         } else if self.eat_keyword(kw::Type) {\n             // TYPE ITEM\n-            self.parse_type_alias()?\n+            self.parse_type_alias(def())?\n         } else if self.eat_keyword(kw::Enum) {\n             // ENUM ITEM\n             self.parse_item_enum()?\n@@ -332,24 +368,7 @@ impl<'a> Parser<'a> {\n         self.token.is_keyword(kw::Async) && self.is_keyword_ahead(1, &[kw::Fn])\n     }\n \n-    /// Given this code `path(`, it seems like this is not\n-    /// setting the visibility of a macro invocation,\n-    /// but rather a mistyped method declaration.\n-    /// Create a diagnostic pointing out that `fn` is missing.\n-    ///\n-    /// ```\n-    /// x |     pub   path(&self) {\n-    ///   |         ^ missing `fn`, `type`, `const`, or `static`\n-    /// ```\n-    fn missing_nested_item_kind_err(&self, prev_span: Span) -> DiagnosticBuilder<'a> {\n-        let sp = prev_span.between(self.token.span);\n-        let expected_kinds = \"missing `fn`, `type`, `const`, or `static`\";\n-        let mut err = self.struct_span_err(sp, &format!(\"{} for item declaration\", expected_kinds));\n-        err.span_label(sp, expected_kinds);\n-        err\n-    }\n-\n-    /// Parses an implementation item, `impl` keyword is already parsed.\n+    /// Parses an implementation item.\n     ///\n     /// ```\n     /// impl<'a, T> TYPE { /* impl items */ }\n@@ -366,9 +385,11 @@ impl<'a> Parser<'a> {\n     fn parse_item_impl(\n         &mut self,\n         attrs: &mut Vec<Attribute>,\n-        unsafety: Unsafe,\n         defaultness: Defaultness,\n     ) -> PResult<'a, ItemInfo> {\n+        let unsafety = self.parse_unsafety();\n+        self.expect_keyword(kw::Impl)?;\n+\n         // First, parse generic parameters if necessary.\n         let mut generics = if self.choose_generics_over_qpath() {\n             self.parse_generics()?\n@@ -420,7 +441,7 @@ impl<'a> Parser<'a> {\n \n         generics.where_clause = self.parse_where_clause()?;\n \n-        let impl_items = self.parse_item_list(attrs, |p, at_end| p.parse_impl_item(at_end))?;\n+        let impl_items = self.parse_item_list(attrs, |p| p.parse_impl_item())?;\n \n         let item_kind = match ty_second {\n             Some(ty_second) => {\n@@ -479,8 +500,9 @@ impl<'a> Parser<'a> {\n     fn parse_item_list<T>(\n         &mut self,\n         attrs: &mut Vec<Attribute>,\n-        mut parse_item: impl FnMut(&mut Parser<'a>, &mut bool) -> PResult<'a, T>,\n+        mut parse_item: impl FnMut(&mut Parser<'a>) -> PResult<'a, Option<Option<T>>>,\n     ) -> PResult<'a, Vec<T>> {\n+        let open_brace_span = self.token.span;\n         self.expect(&token::OpenDelim(token::Brace))?;\n         attrs.append(&mut self.parse_inner_attributes()?);\n \n@@ -489,15 +511,25 @@ impl<'a> Parser<'a> {\n             if self.recover_doc_comment_before_brace() {\n                 continue;\n             }\n-            let mut at_end = false;\n-            match parse_item(self, &mut at_end) {\n-                Ok(item) => items.push(item),\n+            match parse_item(self) {\n+                Ok(None) => {\n+                    // We have to bail or we'll potentially never make progress.\n+                    let non_item_span = self.token.span;\n+                    self.consume_block(token::Brace, ConsumeClosingDelim::Yes);\n+                    self.struct_span_err(non_item_span, \"non-item in item list\")\n+                        .span_label(open_brace_span, \"item list starts here\")\n+                        .span_label(non_item_span, \"non-item starts here\")\n+                        .span_label(self.prev_span, \"item list ends here\")\n+                        .emit();\n+                    break;\n+                }\n+                Ok(Some(item)) => items.extend(item),\n                 Err(mut err) => {\n-                    err.emit();\n-                    if !at_end {\n-                        self.consume_block(token::Brace, ConsumeClosingDelim::Yes);\n-                        break;\n-                    }\n+                    self.consume_block(token::Brace, ConsumeClosingDelim::Yes);\n+                    err.span_label(open_brace_span, \"while parsing this item list starting here\")\n+                        .span_label(self.prev_span, \"the item list ends here\")\n+                        .emit();\n+                    break;\n                 }\n             }\n         }\n@@ -529,25 +561,14 @@ impl<'a> Parser<'a> {\n \n     /// Parses defaultness (i.e., `default` or nothing).\n     fn parse_defaultness(&mut self) -> Defaultness {\n-        // `pub` is included for better error messages\n+        // We are interested in `default` followed by another identifier.\n+        // However, we must avoid keywords that occur as binary operators.\n+        // Currently, the only applicable keyword is `as` (`default as Ty`).\n         if self.check_keyword(kw::Default)\n-            && self.is_keyword_ahead(\n-                1,\n-                &[\n-                    kw::Impl,\n-                    kw::Static,\n-                    kw::Const,\n-                    kw::Async,\n-                    kw::Fn,\n-                    kw::Unsafe,\n-                    kw::Extern,\n-                    kw::Type,\n-                    kw::Pub,\n-                ],\n-            )\n+            && self.look_ahead(1, |t| t.is_non_raw_ident_where(|i| i.name != kw::As))\n         {\n             self.bump(); // `default`\n-            Defaultness::Default\n+            Defaultness::Default(self.prev_span)\n         } else {\n             Defaultness::Final\n         }\n@@ -605,109 +626,49 @@ impl<'a> Parser<'a> {\n         } else {\n             // It's a normal trait.\n             tps.where_clause = self.parse_where_clause()?;\n-            let items = self.parse_item_list(attrs, |p, at_end| p.parse_trait_item(at_end))?;\n+            let items = self.parse_item_list(attrs, |p| p.parse_trait_item())?;\n             Ok((ident, ItemKind::Trait(is_auto, unsafety, tps, bounds, items)))\n         }\n     }\n \n-    pub fn parse_impl_item(&mut self, at_end: &mut bool) -> PResult<'a, P<AssocItem>> {\n-        maybe_whole!(self, NtImplItem, |x| x);\n-        self.parse_assoc_item(at_end, |_| true)\n+    pub fn parse_impl_item(&mut self) -> PResult<'a, Option<Option<P<AssocItem>>>> {\n+        maybe_whole!(self, NtImplItem, |x| Some(Some(x)));\n+        self.parse_assoc_item(|_| true)\n     }\n \n-    pub fn parse_trait_item(&mut self, at_end: &mut bool) -> PResult<'a, P<AssocItem>> {\n-        maybe_whole!(self, NtTraitItem, |x| x);\n+    pub fn parse_trait_item(&mut self) -> PResult<'a, Option<Option<P<AssocItem>>>> {\n+        maybe_whole!(self, NtTraitItem, |x| Some(Some(x)));\n         // This is somewhat dubious; We don't want to allow\n         // param names to be left off if there is a definition...\n         //\n         // We don't allow param names to be left off in edition 2018.\n-        self.parse_assoc_item(at_end, |t| t.span.rust_2018())\n+        self.parse_assoc_item(|t| t.span.rust_2018())\n     }\n \n     /// Parses associated items.\n-    fn parse_assoc_item(\n-        &mut self,\n-        at_end: &mut bool,\n-        req_name: ReqName,\n-    ) -> PResult<'a, P<AssocItem>> {\n-        let attrs = self.parse_outer_attributes()?;\n-        let mut unclosed_delims = vec![];\n-        let (mut item, tokens) = self.collect_tokens(|this| {\n-            let item = this.parse_assoc_item_(at_end, attrs, req_name);\n-            unclosed_delims.append(&mut this.unclosed_delims);\n-            item\n-        })?;\n-        self.unclosed_delims.append(&mut unclosed_delims);\n-        // See `parse_item` for why this clause is here.\n-        if !item.attrs.iter().any(|attr| attr.style == AttrStyle::Inner) {\n-            item.tokens = Some(tokens);\n-        }\n-        self.error_on_assoc_static(&item);\n-        Ok(P(item))\n-    }\n-\n-    fn error_on_assoc_static(&self, item: &AssocItem) {\n-        if let AssocItemKind::Static(..) = item.kind {\n-            self.struct_span_err(item.span, \"associated `static` items are not allowed\").emit();\n-        }\n-    }\n-\n-    fn parse_assoc_item_(\n-        &mut self,\n-        at_end: &mut bool,\n-        mut attrs: Vec<Attribute>,\n-        req_name: ReqName,\n-    ) -> PResult<'a, AssocItem> {\n-        let lo = self.token.span;\n-        let vis = self.parse_visibility(FollowedByType::No)?;\n-        let defaultness = self.parse_defaultness();\n-        let (ident, kind) = self.parse_assoc_item_kind(at_end, &mut attrs, req_name, &vis)?;\n-        let span = lo.to(self.prev_span);\n-        let id = DUMMY_NODE_ID;\n-        Ok(AssocItem { id, span, ident, attrs, vis, defaultness, kind, tokens: None })\n-    }\n-\n-    fn parse_assoc_item_kind(\n-        &mut self,\n-        at_end: &mut bool,\n-        attrs: &mut Vec<Attribute>,\n-        req_name: ReqName,\n-        vis: &Visibility,\n-    ) -> PResult<'a, (Ident, AssocItemKind)> {\n-        if self.eat_keyword(kw::Type) {\n-            match self.parse_type_alias()? {\n-                (ident, ItemKind::TyAlias(a, b, c)) => Ok((ident, AssocItemKind::TyAlias(a, b, c))),\n-                _ => unreachable!(),\n-            }\n-        } else if self.check_fn_front_matter() {\n-            let (ident, sig, generics, body) = self.parse_fn(at_end, attrs, req_name)?;\n-            Ok((ident, AssocItemKind::Fn(sig, generics, body)))\n-        } else if self.is_static_global() {\n-            self.bump(); // `static`\n-            let mutbl = self.parse_mutability();\n-            let (ident, ty, expr) = self.parse_item_const_common(Some(mutbl))?;\n-            Ok((ident, AssocItemKind::Static(ty, mutbl, expr)))\n-        } else if self.eat_keyword(kw::Const) {\n-            let (ident, ty, expr) = self.parse_item_const_common(None)?;\n-            Ok((ident, AssocItemKind::Const(ty, expr)))\n-        } else if self.isnt_macro_invocation() {\n-            Err(self.missing_nested_item_kind_err(self.prev_span))\n-        } else if self.token.is_path_start() {\n-            let mac = self.parse_item_macro(&vis)?;\n-            *at_end = true;\n-            Ok((Ident::invalid(), AssocItemKind::Macro(mac)))\n-        } else {\n-            self.recover_attrs_no_item(attrs)?;\n-            self.unexpected()\n-        }\n+    fn parse_assoc_item(&mut self, req_name: ReqName) -> PResult<'a, Option<Option<P<AssocItem>>>> {\n+        Ok(self.parse_item_(req_name)?.map(|Item { attrs, id, span, vis, ident, kind, tokens }| {\n+            let kind = match kind {\n+                ItemKind::Mac(a) => AssocItemKind::Macro(a),\n+                ItemKind::Fn(a, b, c, d) => AssocItemKind::Fn(a, b, c, d),\n+                ItemKind::TyAlias(a, b, c, d) => AssocItemKind::TyAlias(a, b, c, d),\n+                ItemKind::Const(a, b, c) => AssocItemKind::Const(a, b, c),\n+                ItemKind::Static(a, _, b) => {\n+                    self.struct_span_err(span, \"associated `static` items are not allowed\").emit();\n+                    AssocItemKind::Const(Defaultness::Final, a, b)\n+                }\n+                _ => return self.error_bad_item_kind(span, &kind, \"`trait`s or `impl`s\"),\n+            };\n+            Some(P(Item { attrs, id, span, vis, ident, kind, tokens }))\n+        }))\n     }\n \n     /// Parses a `type` alias with the following grammar:\n     /// ```\n     /// TypeAlias = \"type\" Ident Generics {\":\" GenericBounds}? {\"=\" Ty}? \";\" ;\n     /// ```\n     /// The `\"type\"` has already been eaten.\n-    fn parse_type_alias(&mut self) -> PResult<'a, (Ident, ItemKind)> {\n+    fn parse_type_alias(&mut self, def: Defaultness) -> PResult<'a, ItemInfo> {\n         let ident = self.parse_ident()?;\n         let mut generics = self.parse_generics()?;\n \n@@ -719,7 +680,7 @@ impl<'a> Parser<'a> {\n         let default = if self.eat(&token::Eq) { Some(self.parse_ty()?) } else { None };\n         self.expect_semi()?;\n \n-        Ok((ident, ItemKind::TyAlias(generics, bounds, default)))\n+        Ok((ident, ItemKind::TyAlias(def, generics, bounds, default)))\n     }\n \n     /// Parses a `UseTree`.\n@@ -866,38 +827,48 @@ impl<'a> Parser<'a> {\n     /// ```\n     fn parse_item_foreign_mod(&mut self, attrs: &mut Vec<Attribute>) -> PResult<'a, ItemInfo> {\n         let abi = self.parse_abi(); // ABI?\n-        let items = self.parse_item_list(attrs, |p, at_end| p.parse_foreign_item(at_end))?;\n+        let items = self.parse_item_list(attrs, |p| p.parse_foreign_item())?;\n         let module = ast::ForeignMod { abi, items };\n         Ok((Ident::invalid(), ItemKind::ForeignMod(module)))\n     }\n \n     /// Parses a foreign item (one in an `extern { ... }` block).\n-    pub fn parse_foreign_item(&mut self, at_end: &mut bool) -> PResult<'a, P<ForeignItem>> {\n-        maybe_whole!(self, NtForeignItem, |ni| ni);\n+    pub fn parse_foreign_item(&mut self) -> PResult<'a, Option<Option<P<ForeignItem>>>> {\n+        maybe_whole!(self, NtForeignItem, |item| Some(Some(item)));\n+\n+        Ok(self.parse_item_(|_| true)?.map(|Item { attrs, id, span, vis, ident, kind, tokens }| {\n+            let kind = match kind {\n+                ItemKind::Mac(a) => ForeignItemKind::Macro(a),\n+                ItemKind::Fn(a, b, c, d) => ForeignItemKind::Fn(a, b, c, d),\n+                ItemKind::TyAlias(a, b, c, d) => ForeignItemKind::TyAlias(a, b, c, d),\n+                ItemKind::Static(a, b, c) => ForeignItemKind::Static(a, b, c),\n+                ItemKind::Const(_, a, b) => {\n+                    self.error_on_foreign_const(span, ident);\n+                    ForeignItemKind::Static(a, Mutability::Not, b)\n+                }\n+                _ => return self.error_bad_item_kind(span, &kind, \"`extern` blocks\"),\n+            };\n+            Some(P(Item { attrs, id, span, vis, ident, kind, tokens }))\n+        }))\n+    }\n \n-        let mut attrs = self.parse_outer_attributes()?;\n-        let lo = self.token.span;\n-        let vis = self.parse_visibility(FollowedByType::No)?;\n-        let (ident, kind) = self.parse_assoc_item_kind(at_end, &mut attrs, |_| true, &vis)?;\n-        let item = self.mk_item(lo, ident, kind, vis, attrs);\n-        self.error_on_foreign_const(&item);\n-        Ok(P(item))\n+    fn error_bad_item_kind<T>(&self, span: Span, kind: &ItemKind, ctx: &str) -> Option<T> {\n+        let span = self.sess.source_map().def_span(span);\n+        let msg = format!(\"{} is not supported in {}\", kind.descr(), ctx);\n+        self.struct_span_err(span, &msg).emit();\n+        return None;\n     }\n \n-    fn error_on_foreign_const(&self, item: &ForeignItem) {\n-        if let AssocItemKind::Const(..) = item.kind {\n-            self.struct_span_err(item.ident.span, \"extern items cannot be `const`\")\n-                .span_suggestion(\n-                    item.span.with_hi(item.ident.span.lo()),\n-                    \"try using a static value\",\n-                    \"static \".to_string(),\n-                    Applicability::MachineApplicable,\n-                )\n-                .note(\n-                    \"for more information, visit https://doc.rust-lang.org/std/keyword.extern.html\",\n-                )\n-                .emit();\n-        }\n+    fn error_on_foreign_const(&self, span: Span, ident: Ident) {\n+        self.struct_span_err(ident.span, \"extern items cannot be `const`\")\n+            .span_suggestion(\n+                span.with_hi(ident.span.lo()),\n+                \"try using a static value\",\n+                \"static \".to_string(),\n+                Applicability::MachineApplicable,\n+            )\n+            .note(\"for more information, visit https://doc.rust-lang.org/std/keyword.extern.html\")\n+            .emit();\n     }\n \n     fn is_static_global(&mut self) -> bool {\n@@ -937,20 +908,7 @@ impl<'a> Parser<'a> {\n     /// `[\"const\" | (\"static\" \"mut\"?)]` already parsed and stored in `m`.\n     ///\n     /// When `m` is `\"const\"`, `$ident` may also be `\"_\"`.\n-    fn parse_item_const(&mut self, m: Option<Mutability>) -> PResult<'a, ItemInfo> {\n-        let (id, ty, expr) = self.parse_item_const_common(m)?;\n-        let item = match m {\n-            Some(m) => ItemKind::Static(ty, m, expr),\n-            None => ItemKind::Const(ty, expr),\n-        };\n-        Ok((id, item))\n-    }\n-\n-    /// Parse `[\"const\" | (\"static\" \"mut\"?)] $ident \":\" $ty (= $expr)?` with\n-    /// `[\"const\" | (\"static\" \"mut\"?)]` already parsed and stored in `m`.\n-    ///\n-    /// When `m` is `\"const\"`, `$ident` may also be `\"_\"`.\n-    fn parse_item_const_common(\n+    fn parse_item_global(\n         &mut self,\n         m: Option<Mutability>,\n     ) -> PResult<'a, (Ident, P<Ty>, Option<P<ast::Expr>>)> {\n@@ -1426,18 +1384,6 @@ impl<'a> Parser<'a> {\n         }\n         Ok(true)\n     }\n-\n-    fn mk_item<K>(\n-        &self,\n-        lo: Span,\n-        ident: Ident,\n-        kind: K,\n-        vis: Visibility,\n-        attrs: Vec<Attribute>,\n-    ) -> Item<K> {\n-        let span = lo.to(self.prev_span);\n-        Item { ident, attrs, id: DUMMY_NODE_ID, kind, vis, span, tokens: None }\n-    }\n }\n \n /// The parsing configuration used to parse a parameter list (see `parse_fn_params`).\n@@ -1450,7 +1396,6 @@ impl<'a> Parser<'a> {\n     /// Parse a function starting from the front matter (`const ...`) to the body `{ ... }` or `;`.\n     fn parse_fn(\n         &mut self,\n-        at_end: &mut bool,\n         attrs: &mut Vec<Attribute>,\n         req_name: ReqName,\n     ) -> PResult<'a, (Ident, FnSig, Generics, Option<P<Block>>)> {\n@@ -1459,18 +1404,14 @@ impl<'a> Parser<'a> {\n         let mut generics = self.parse_generics()?; // `<'a, T, ...>`\n         let decl = self.parse_fn_decl(req_name, AllowPlus::Yes)?; // `(p: u8, ...)`\n         generics.where_clause = self.parse_where_clause()?; // `where T: Ord`\n-        let body = self.parse_fn_body(at_end, attrs)?; // `;` or `{ ... }`.\n+        let body = self.parse_fn_body(attrs)?; // `;` or `{ ... }`.\n         Ok((ident, FnSig { header, decl }, generics, body))\n     }\n \n     /// Parse the \"body\" of a function.\n     /// This can either be `;` when there's no body,\n     /// or e.g. a block when the function is a provided one.\n-    fn parse_fn_body(\n-        &mut self,\n-        at_end: &mut bool,\n-        attrs: &mut Vec<Attribute>,\n-    ) -> PResult<'a, Option<P<Block>>> {\n+    fn parse_fn_body(&mut self, attrs: &mut Vec<Attribute>) -> PResult<'a, Option<P<Block>>> {\n         let (inner_attrs, body) = match self.token.kind {\n             token::Semi => {\n                 self.bump();\n@@ -1490,7 +1431,6 @@ impl<'a> Parser<'a> {\n             _ => return self.expected_semi_or_open_brace(),\n         };\n         attrs.extend(inner_attrs);\n-        *at_end = true;\n         Ok(body)\n     }\n "}, {"sha": "bbfbe9c20df9446a58ceff711c8d76cc56e2a77f", "filename": "src/librustc_parse/parser/stmt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fstmt.rs?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -81,11 +81,11 @@ impl<'a> Parser<'a> {\n         // FIXME: Bad copy of attrs\n         let old_directory_ownership =\n             mem::replace(&mut self.directory.ownership, DirectoryOwnership::UnownedViaBlock);\n-        let item = self.parse_item_(attrs.clone(), false, true)?;\n+        let item = self.parse_item_common(attrs.clone(), false, true, |_| true)?;\n         self.directory.ownership = old_directory_ownership;\n \n         if let Some(item) = item {\n-            return Ok(Some(self.mk_stmt(lo.to(item.span), StmtKind::Item(item))));\n+            return Ok(Some(self.mk_stmt(lo.to(item.span), StmtKind::Item(P(item)))));\n         }\n \n         // Do not attempt to parse an expression if we're done here."}, {"sha": "e0eef1db0f089e474b86b402486c5c8618ba5226", "filename": "src/librustc_passes/dead.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Flibrustc_passes%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Flibrustc_passes%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdead.rs?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -601,13 +601,7 @@ impl Visitor<'tcx> for DeadVisitor<'tcx> {\n                 hir::ItemKind::Struct(..) => \"constructed\", // Issue #52325\n                 _ => \"used\",\n             };\n-            self.warn_dead_code(\n-                item.hir_id,\n-                span,\n-                item.ident.name,\n-                item.kind.descriptive_variant(),\n-                participle,\n-            );\n+            self.warn_dead_code(item.hir_id, span, item.ident.name, item.kind.descr(), participle);\n         } else {\n             // Only continue if we didn't warn\n             intravisit::walk_item(self, item);"}, {"sha": "99fbac4568e4f3414ca12c98679d79f26ea9b61b", "filename": "src/librustc_passes/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Flibrustc_passes%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Flibrustc_passes%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fstability.rs?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -362,7 +362,7 @@ impl<'a, 'tcx> Visitor<'tcx> for MissingStabilityAnnotations<'a, 'tcx> {\n             // optional. They inherit stability from their parents when unannotated.\n             hir::ItemKind::Impl { of_trait: None, .. } | hir::ItemKind::ForeignMod(..) => {}\n \n-            _ => self.check_missing_stability(i.hir_id, i.span, i.kind.descriptive_variant()),\n+            _ => self.check_missing_stability(i.hir_id, i.span, i.kind.descr()),\n         }\n \n         intravisit::walk_item(self, i)"}, {"sha": "a81caea4e412a49b150297cc599f77a3c7b41168", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -718,7 +718,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n             }\n \n             // These items live in the type namespace.\n-            ItemKind::TyAlias(_, _, ref ty) => {\n+            ItemKind::TyAlias(_, _, _, ref ty) => {\n                 let def_kind = match ty.as_deref().and_then(|ty| ty.kind.opaque_top_hack()) {\n                     None => DefKind::TyAlias,\n                     Some(_) => DefKind::OpaqueTy,\n@@ -1253,7 +1253,7 @@ impl<'a, 'b> Visitor<'b> for BuildReducedGraphVisitor<'a, 'b> {\n         let (res, ns) = match item.kind {\n             AssocItemKind::Static(..) // Let's pretend it's a `const` for recovery.\n             | AssocItemKind::Const(..) => (Res::Def(DefKind::AssocConst, item_def_id), ValueNS),\n-            AssocItemKind::Fn(ref sig, _, _) => {\n+            AssocItemKind::Fn(_, ref sig, _, _) => {\n                 if sig.decl.has_self() {\n                     self.r.has_self.insert(item_def_id);\n                 }"}, {"sha": "30089633689c4630d8276c37609fd9a147c83364", "filename": "src/librustc_resolve/def_collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Flibrustc_resolve%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Flibrustc_resolve%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdef_collector.rs?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -117,7 +117,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n             | ItemKind::ExternCrate(..)\n             | ItemKind::ForeignMod(..)\n             | ItemKind::TyAlias(..) => DefPathData::TypeNs(i.ident.name),\n-            ItemKind::Fn(sig, generics, body) if sig.header.asyncness.is_async() => {\n+            ItemKind::Fn(_, sig, generics, body) if sig.header.asyncness.is_async() => {\n                 return self.visit_async_fn(\n                     i.id,\n                     i.ident.name,\n@@ -215,7 +215,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n \n     fn visit_assoc_item(&mut self, i: &'a AssocItem, ctxt: visit::AssocCtxt) {\n         let def_data = match &i.kind {\n-            AssocItemKind::Fn(FnSig { header, decl }, generics, body)\n+            AssocItemKind::Fn(_, FnSig { header, decl }, generics, body)\n                 if header.asyncness.is_async() =>\n             {\n                 return self.visit_async_fn("}, {"sha": "5b5180a7e1a44b7952fa4e9fe04128465be3cd30", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -437,8 +437,8 @@ impl<'a, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n     }\n     fn visit_foreign_item(&mut self, foreign_item: &'ast ForeignItem) {\n         match foreign_item.kind {\n-            ForeignItemKind::Fn(_, ref generics, _)\n-            | ForeignItemKind::TyAlias(ref generics, ..) => {\n+            ForeignItemKind::Fn(_, _, ref generics, _)\n+            | ForeignItemKind::TyAlias(_, ref generics, ..) => {\n                 self.with_generic_param_rib(generics, ItemRibKind(HasGenericParams::Yes), |this| {\n                     visit::walk_foreign_item(this, foreign_item);\n                 });\n@@ -797,7 +797,7 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         debug!(\"(resolving item) resolving {} ({:?})\", name, item.kind);\n \n         match item.kind {\n-            ItemKind::TyAlias(ref generics, _, _) | ItemKind::Fn(_, ref generics, _) => {\n+            ItemKind::TyAlias(_, ref generics, _, _) | ItemKind::Fn(_, _, ref generics, _) => {\n                 self.with_generic_param_rib(generics, ItemRibKind(HasGenericParams::Yes), |this| {\n                     visit::walk_item(this, item)\n                 });\n@@ -837,18 +837,18 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                             this.with_trait_items(trait_items, |this| {\n                                 match &item.kind {\n                                     AssocItemKind::Static(ty, _, default)\n-                                    | AssocItemKind::Const(ty, default) => {\n+                                    | AssocItemKind::Const(_, ty, default) => {\n                                         this.visit_ty(ty);\n                                         // Only impose the restrictions of `ConstRibKind` for an\n                                         // actual constant expression in a provided default.\n                                         if let Some(expr) = default {\n                                             this.with_constant_rib(|this| this.visit_expr(expr));\n                                         }\n                                     }\n-                                    AssocItemKind::Fn(_, generics, _) => {\n+                                    AssocItemKind::Fn(_, _, generics, _) => {\n                                         walk_assoc_item(this, generics, item);\n                                     }\n-                                    AssocItemKind::TyAlias(generics, _, _) => {\n+                                    AssocItemKind::TyAlias(_, generics, _, _) => {\n                                         walk_assoc_item(this, generics, item);\n                                     }\n                                     AssocItemKind::Macro(_) => {\n@@ -878,7 +878,7 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 });\n             }\n \n-            ItemKind::Static(ref ty, _, ref expr) | ItemKind::Const(ref ty, ref expr) => {\n+            ItemKind::Static(ref ty, _, ref expr) | ItemKind::Const(_, ref ty, ref expr) => {\n                 debug!(\"resolve_item ItemKind::Const\");\n                 self.with_item_rib(HasGenericParams::No, |this| {\n                     this.visit_ty(ty);\n@@ -1015,7 +1015,9 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             trait_items\n                 .iter()\n                 .filter_map(|item| match &item.kind {\n-                    AssocItemKind::TyAlias(_, bounds, _) if bounds.len() == 0 => Some(item.ident),\n+                    AssocItemKind::TyAlias(_, _, bounds, _) if bounds.len() == 0 => {\n+                        Some(item.ident)\n+                    }\n                     _ => None,\n                 })\n                 .collect(),\n@@ -1125,7 +1127,7 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                                                 visit::walk_assoc_item(this, item, AssocCtxt::Impl)\n                                             });\n                                         }\n-                                        AssocItemKind::Fn(_, generics, _) => {\n+                                        AssocItemKind::Fn(_, _, generics, _) => {\n                                             // We also need a new scope for the impl item type parameters.\n                                             this.with_generic_param_rib(\n                                                 generics,\n@@ -1148,7 +1150,7 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                                                 },\n                                             );\n                                         }\n-                                        AssocItemKind::TyAlias(generics, _, _) => {\n+                                        AssocItemKind::TyAlias(_, generics, _, _) => {\n                                             // We also need a new scope for the impl item type parameters.\n                                             this.with_generic_param_rib(\n                                                 generics,"}, {"sha": "b3a8657d80bed8643c44f3c54d1c0a6116f06041", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -1005,7 +1005,7 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n         let vis_span = trait_item.span.shrink_to_lo();\n         match trait_item.kind {\n             ast::AssocItemKind::Static(ref ty, _, ref expr)\n-            | ast::AssocItemKind::Const(ref ty, ref expr) => {\n+            | ast::AssocItemKind::Const(_, ref ty, ref expr) => {\n                 self.process_assoc_const(\n                     trait_item.id,\n                     trait_item.ident,\n@@ -1016,7 +1016,7 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n                     &trait_item.attrs,\n                 );\n             }\n-            ast::AssocItemKind::Fn(ref sig, ref generics, ref body) => {\n+            ast::AssocItemKind::Fn(_, ref sig, ref generics, ref body) => {\n                 self.process_method(\n                     sig,\n                     body.as_ref().map(|x| &**x),\n@@ -1027,7 +1027,7 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n                     trait_item.span,\n                 );\n             }\n-            ast::AssocItemKind::TyAlias(_, ref bounds, ref default_ty) => {\n+            ast::AssocItemKind::TyAlias(_, _, ref bounds, ref default_ty) => {\n                 // FIXME do something with _bounds (for type refs)\n                 let name = trait_item.ident.name.to_string();\n                 let qualname = format!(\n@@ -1076,7 +1076,7 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n         self.process_macro_use(impl_item.span);\n         match impl_item.kind {\n             ast::AssocItemKind::Static(ref ty, _, ref expr)\n-            | ast::AssocItemKind::Const(ref ty, ref expr) => {\n+            | ast::AssocItemKind::Const(_, ref ty, ref expr) => {\n                 self.process_assoc_const(\n                     impl_item.id,\n                     impl_item.ident,\n@@ -1087,7 +1087,7 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n                     &impl_item.attrs,\n                 );\n             }\n-            ast::AssocItemKind::Fn(ref sig, ref generics, ref body) => {\n+            ast::AssocItemKind::Fn(_, ref sig, ref generics, ref body) => {\n                 self.process_method(\n                     sig,\n                     body.as_deref(),\n@@ -1098,8 +1098,8 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n                     impl_item.span,\n                 );\n             }\n-            ast::AssocItemKind::TyAlias(_, _, None) => {}\n-            ast::AssocItemKind::TyAlias(_, _, Some(ref ty)) => {\n+            ast::AssocItemKind::TyAlias(_, _, _, None) => {}\n+            ast::AssocItemKind::TyAlias(_, _, _, Some(ref ty)) => {\n                 // FIXME: uses of the assoc type should ideally point to this\n                 // 'def' and the name here should be a ref to the def in the\n                 // trait.\n@@ -1292,11 +1292,11 @@ impl<'l, 'tcx> Visitor<'l> for DumpVisitor<'l, 'tcx> {\n                     );\n                 }\n             }\n-            Fn(ref sig, ref ty_params, ref body) => {\n+            Fn(_, ref sig, ref ty_params, ref body) => {\n                 self.process_fn(item, &sig.decl, &sig.header, ty_params, body.as_deref())\n             }\n             Static(ref typ, _, ref e) => self.process_static_or_const_item(item, typ, e.as_deref()),\n-            Const(ref typ, ref e) => self.process_static_or_const_item(item, typ, e.as_deref()),\n+            Const(_, ref typ, ref e) => self.process_static_or_const_item(item, typ, e.as_deref()),\n             Struct(ref def, ref ty_params) | Union(ref def, ref ty_params) => {\n                 self.process_struct(item, def, ty_params)\n             }\n@@ -1311,7 +1311,7 @@ impl<'l, 'tcx> Visitor<'l> for DumpVisitor<'l, 'tcx> {\n                 self.process_mod(item);\n                 visit::walk_mod(self, m);\n             }\n-            TyAlias(ref ty_params, _, ref ty) => {\n+            TyAlias(_, ref ty_params, _, ref ty) => {\n                 let qualname = format!(\n                     \"::{}\",\n                     self.tcx.def_path_str(self.tcx.hir().local_def_id_from_node_id(item.id))\n@@ -1520,7 +1520,7 @@ impl<'l, 'tcx> Visitor<'l> for DumpVisitor<'l, 'tcx> {\n         let access = access_from!(self.save_ctxt, item, hir_id);\n \n         match item.kind {\n-            ast::ForeignItemKind::Fn(ref sig, ref generics, _) => {\n+            ast::ForeignItemKind::Fn(_, ref sig, ref generics, _) => {\n                 let decl = &sig.decl;\n                 if let Some(fn_data) = self.save_ctxt.get_extern_item_data(item) {\n                     down_cast_data!(fn_data, DefData, item.span);\n@@ -1537,7 +1537,8 @@ impl<'l, 'tcx> Visitor<'l> for DumpVisitor<'l, 'tcx> {\n                     self.visit_ty(&ret_ty);\n                 }\n             }\n-            ast::ForeignItemKind::Const(ref ty, _) | ast::ForeignItemKind::Static(ref ty, _, _) => {\n+            ast::ForeignItemKind::Const(_, ref ty, _)\n+            | ast::ForeignItemKind::Static(ref ty, _, _) => {\n                 if let Some(var_data) = self.save_ctxt.get_extern_item_data(item) {\n                     down_cast_data!(var_data, DefData, item.span);\n                     self.dumper.dump_def(&access, var_data);"}, {"sha": "b253559dd5cd53049bfe5c5232bd43d14def3a9e", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -133,7 +133,7 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n             self.tcx.def_path_str(self.tcx.hir().local_def_id_from_node_id(item.id))\n         );\n         match item.kind {\n-            ast::ForeignItemKind::Fn(ref sig, ref generics, _) => {\n+            ast::ForeignItemKind::Fn(_, ref sig, ref generics, _) => {\n                 filter!(self.span_utils, item.ident.span);\n \n                 Some(Data::DefData(Def {\n@@ -151,7 +151,8 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n                     attributes: lower_attributes(item.attrs.clone(), self),\n                 }))\n             }\n-            ast::ForeignItemKind::Const(ref ty, _) | ast::ForeignItemKind::Static(ref ty, _, _) => {\n+            ast::ForeignItemKind::Const(_, ref ty, _)\n+            | ast::ForeignItemKind::Static(ref ty, _, _) => {\n                 filter!(self.span_utils, item.ident.span);\n \n                 let id = id_from_node_id(item.id, self);\n@@ -180,7 +181,7 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n \n     pub fn get_item_data(&self, item: &ast::Item) -> Option<Data> {\n         match item.kind {\n-            ast::ItemKind::Fn(ref sig, .., ref generics, _) => {\n+            ast::ItemKind::Fn(_, ref sig, .., ref generics, _) => {\n                 let qualname = format!(\n                     \"::{}\",\n                     self.tcx.def_path_str(self.tcx.hir().local_def_id_from_node_id(item.id))\n@@ -227,7 +228,7 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n                     attributes: lower_attributes(item.attrs.clone(), self),\n                 }))\n             }\n-            ast::ItemKind::Const(ref typ, _) => {\n+            ast::ItemKind::Const(_, ref typ, _) => {\n                 let qualname = format!(\n                     \"::{}\",\n                     self.tcx.def_path_str(self.tcx.hir().local_def_id_from_node_id(item.id))"}, {"sha": "9670fb1e2c46526e86550e16a6267620f66a83fb", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -345,7 +345,7 @@ impl Sig for ast::Item {\n \n                 Ok(extend_sig(ty, text, defs, vec![]))\n             }\n-            ast::ItemKind::Const(ref ty, ref expr) => {\n+            ast::ItemKind::Const(_, ref ty, ref expr) => {\n                 let mut text = \"const \".to_owned();\n                 let name = self.ident.to_string();\n                 let defs = vec![SigElement {\n@@ -369,7 +369,7 @@ impl Sig for ast::Item {\n \n                 Ok(extend_sig(ty, text, defs, vec![]))\n             }\n-            ast::ItemKind::Fn(ast::FnSig { ref decl, header }, ref generics, _) => {\n+            ast::ItemKind::Fn(_, ast::FnSig { ref decl, header }, ref generics, _) => {\n                 let mut text = String::new();\n                 if let ast::Const::Yes(_) = header.constness {\n                     text.push_str(\"const \");\n@@ -423,7 +423,7 @@ impl Sig for ast::Item {\n \n                 Ok(Signature { text, defs, refs: vec![] })\n             }\n-            ast::ItemKind::TyAlias(ref generics, _, ref ty) => {\n+            ast::ItemKind::TyAlias(_, ref generics, _, ref ty) => {\n                 let text = \"type \".to_owned();\n                 let mut sig = name_and_generics(text, offset, generics, self.id, self.ident, scx)?;\n \n@@ -502,7 +502,7 @@ impl Sig for ast::Item {\n                 items: _,\n             } => {\n                 let mut text = String::new();\n-                if let ast::Defaultness::Default = defaultness {\n+                if let ast::Defaultness::Default(_) = defaultness {\n                     text.push_str(\"default \");\n                 }\n                 if let ast::Unsafe::Yes(_) = unsafety {\n@@ -732,7 +732,7 @@ impl Sig for ast::ForeignItem {\n     fn make(&self, offset: usize, _parent_id: Option<NodeId>, scx: &SaveContext<'_, '_>) -> Result {\n         let id = Some(self.id);\n         match self.kind {\n-            ast::ForeignItemKind::Fn(ref sig, ref generics, _) => {\n+            ast::ForeignItemKind::Fn(_, ref sig, ref generics, _) => {\n                 let decl = &sig.decl;\n                 let mut text = String::new();\n                 text.push_str(\"fn \");"}, {"sha": "19c705fa9975385101dcf369b8ff2fec8729e092", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 39, "deletions": 31, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -2106,7 +2106,7 @@ pub enum Const {\n /// For details see the [RFC #2532](https://github.com/rust-lang/rfcs/pull/2532).\n #[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub enum Defaultness {\n-    Default,\n+    Default(Span),\n     Final,\n }\n \n@@ -2411,15 +2411,15 @@ impl VariantData {\n     }\n }\n \n-/// An item.\n-///\n-/// The name might be a dummy name in case of anonymous items.\n+/// An item definition.\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Item<K = ItemKind> {\n     pub attrs: Vec<Attribute>,\n     pub id: NodeId,\n     pub span: Span,\n     pub vis: Visibility,\n+    /// The name of the item.\n+    /// It might be a dummy name in case of anonymous items.\n     pub ident: Ident,\n \n     pub kind: K,\n@@ -2506,11 +2506,11 @@ pub enum ItemKind {\n     /// A constant item (`const`).\n     ///\n     /// E.g., `const FOO: i32 = 42;`.\n-    Const(P<Ty>, Option<P<Expr>>),\n+    Const(Defaultness, P<Ty>, Option<P<Expr>>),\n     /// A function declaration (`fn`).\n     ///\n     /// E.g., `fn foo(bar: usize) -> usize { .. }`.\n-    Fn(FnSig, Generics, Option<P<Block>>),\n+    Fn(Defaultness, FnSig, Generics, Option<P<Block>>),\n     /// A module declaration (`mod`).\n     ///\n     /// E.g., `mod foo;` or `mod foo { .. }`.\n@@ -2524,7 +2524,7 @@ pub enum ItemKind {\n     /// A type alias (`type`).\n     ///\n     /// E.g., `type Foo = Bar<u8>;`.\n-    TyAlias(Generics, GenericBounds, Option<P<Ty>>),\n+    TyAlias(Defaultness, Generics, GenericBounds, Option<P<Ty>>),\n     /// An enum definition (`enum`).\n     ///\n     /// E.g., `enum Foo<A, B> { C<A>, D<B> }`.\n@@ -2571,30 +2571,41 @@ pub enum ItemKind {\n }\n \n impl ItemKind {\n-    pub fn descriptive_variant(&self) -> &str {\n-        match *self {\n+    pub fn article(&self) -> &str {\n+        use ItemKind::*;\n+        match self {\n+            Use(..) | Static(..) | Const(..) | Fn(..) | Mod(..) | GlobalAsm(..) | TyAlias(..)\n+            | Struct(..) | Union(..) | Trait(..) | TraitAlias(..) | MacroDef(..) => \"a\",\n+            ExternCrate(..) | ForeignMod(..) | Mac(..) | Enum(..) | Impl { .. } => \"an\",\n+        }\n+    }\n+\n+    pub fn descr(&self) -> &str {\n+        match self {\n             ItemKind::ExternCrate(..) => \"extern crate\",\n-            ItemKind::Use(..) => \"use\",\n+            ItemKind::Use(..) => \"`use` import\",\n             ItemKind::Static(..) => \"static item\",\n             ItemKind::Const(..) => \"constant item\",\n             ItemKind::Fn(..) => \"function\",\n             ItemKind::Mod(..) => \"module\",\n-            ItemKind::ForeignMod(..) => \"foreign module\",\n-            ItemKind::GlobalAsm(..) => \"global asm\",\n+            ItemKind::ForeignMod(..) => \"extern block\",\n+            ItemKind::GlobalAsm(..) => \"global asm item\",\n             ItemKind::TyAlias(..) => \"type alias\",\n             ItemKind::Enum(..) => \"enum\",\n             ItemKind::Struct(..) => \"struct\",\n             ItemKind::Union(..) => \"union\",\n             ItemKind::Trait(..) => \"trait\",\n             ItemKind::TraitAlias(..) => \"trait alias\",\n-            ItemKind::Mac(..) | ItemKind::MacroDef(..) | ItemKind::Impl { .. } => \"item\",\n+            ItemKind::Mac(..) => \"item macro invocation\",\n+            ItemKind::MacroDef(..) => \"macro definition\",\n+            ItemKind::Impl { .. } => \"implementation\",\n         }\n     }\n \n     pub fn generics(&self) -> Option<&Generics> {\n         match self {\n-            Self::Fn(_, generics, _)\n-            | Self::TyAlias(generics, ..)\n+            Self::Fn(_, _, generics, _)\n+            | Self::TyAlias(_, generics, ..)\n             | Self::Enum(_, generics)\n             | Self::Struct(_, generics)\n             | Self::Union(_, generics)\n@@ -2613,19 +2624,7 @@ pub type ForeignItemKind = AssocItemKind;\n \n /// Represents associated items.\n /// These include items in `impl` and `trait` definitions.\n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n-pub struct AssocItem {\n-    pub attrs: Vec<Attribute>,\n-    pub id: NodeId,\n-    pub span: Span,\n-    pub vis: Visibility,\n-    pub ident: Ident,\n-\n-    pub defaultness: Defaultness,\n-    pub kind: AssocItemKind,\n-    /// See `Item::tokens` for what this is.\n-    pub tokens: Option<TokenStream>,\n-}\n+pub type AssocItem = Item<AssocItemKind>;\n \n /// Represents non-free item kinds.\n ///\n@@ -2638,13 +2637,22 @@ pub struct AssocItem {\n pub enum AssocItemKind {\n     /// A constant, `const $ident: $ty $def?;` where `def ::= \"=\" $expr? ;`.\n     /// If `def` is parsed, then the constant is provided, and otherwise required.\n-    Const(P<Ty>, Option<P<Expr>>),\n+    Const(Defaultness, P<Ty>, Option<P<Expr>>),\n     /// A static item (`static FOO: u8`).\n     Static(P<Ty>, Mutability, Option<P<Expr>>),\n     /// A function.\n-    Fn(FnSig, Generics, Option<P<Block>>),\n+    Fn(Defaultness, FnSig, Generics, Option<P<Block>>),\n     /// A type.\n-    TyAlias(Generics, GenericBounds, Option<P<Ty>>),\n+    TyAlias(Defaultness, Generics, GenericBounds, Option<P<Ty>>),\n     /// A macro expanding to items.\n     Macro(Mac),\n }\n+\n+impl AssocItemKind {\n+    pub fn defaultness(&self) -> Defaultness {\n+        match *self {\n+            Self::Const(def, ..) | Self::Fn(def, ..) | Self::TyAlias(def, ..) => def,\n+            Self::Macro(..) | Self::Static(..) => Defaultness::Final,\n+        }\n+    }\n+}"}, {"sha": "cd485e7137808b3726f0c555b0cca6e0d43cf400", "filename": "src/libsyntax/attr/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Flibsyntax%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Flibsyntax%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fmod.rs?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -722,6 +722,6 @@ macro_rules! derive_has_attrs {\n }\n \n derive_has_attrs! {\n-    Item, Expr, Local, ast::ForeignItem, ast::StructField, ast::AssocItem, ast::Arm,\n+    Item, Expr, Local, ast::ForeignItem, ast::StructField, ast::Arm,\n     ast::Field, ast::FieldPat, ast::Variant, ast::Param, GenericParam\n }"}, {"sha": "05bb07cd4b90a567a331e1e0130427537f299c9b", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -890,19 +890,19 @@ pub fn noop_visit_item_kind<T: MutVisitor>(kind: &mut ItemKind, vis: &mut T) {\n     match kind {\n         ItemKind::ExternCrate(_orig_name) => {}\n         ItemKind::Use(use_tree) => vis.visit_use_tree(use_tree),\n-        ItemKind::Static(ty, _, expr) | ItemKind::Const(ty, expr) => {\n+        ItemKind::Static(ty, _, expr) | ItemKind::Const(_, ty, expr) => {\n             vis.visit_ty(ty);\n             visit_opt(expr, |expr| vis.visit_expr(expr));\n         }\n-        ItemKind::Fn(sig, generics, body) => {\n+        ItemKind::Fn(_, sig, generics, body) => {\n             visit_fn_sig(sig, vis);\n             vis.visit_generics(generics);\n             visit_opt(body, |body| vis.visit_block(body));\n         }\n         ItemKind::Mod(m) => vis.visit_mod(m),\n         ItemKind::ForeignMod(nm) => vis.visit_foreign_mod(nm),\n         ItemKind::GlobalAsm(_ga) => {}\n-        ItemKind::TyAlias(generics, bounds, ty) => {\n+        ItemKind::TyAlias(_, generics, bounds, ty) => {\n             vis.visit_generics(generics);\n             visit_bounds(bounds, vis);\n             visit_opt(ty, |ty| vis.visit_ty(ty));\n@@ -948,8 +948,7 @@ pub fn noop_flat_map_assoc_item<T: MutVisitor>(\n     mut item: P<AssocItem>,\n     visitor: &mut T,\n ) -> SmallVec<[P<AssocItem>; 1]> {\n-    let AssocItem { id, ident, vis, defaultness: _, attrs, kind, span, tokens: _ } =\n-        item.deref_mut();\n+    let Item { id, ident, vis, attrs, kind, span, tokens: _ } = item.deref_mut();\n     walk_nested_item(visitor, id, span, ident, vis, attrs, kind);\n     smallvec![item]\n }\n@@ -968,16 +967,16 @@ pub fn walk_nested_item(\n     visitor.visit_vis(vis);\n     visit_attrs(attrs, visitor);\n     match kind {\n-        AssocItemKind::Const(ty, expr) | AssocItemKind::Static(ty, _, expr) => {\n+        AssocItemKind::Const(_, ty, expr) | AssocItemKind::Static(ty, _, expr) => {\n             visitor.visit_ty(ty);\n             visit_opt(expr, |expr| visitor.visit_expr(expr));\n         }\n-        AssocItemKind::Fn(sig, generics, body) => {\n+        AssocItemKind::Fn(_, sig, generics, body) => {\n             visitor.visit_generics(generics);\n             visit_fn_sig(sig, visitor);\n             visit_opt(body, |body| visitor.visit_block(body));\n         }\n-        AssocItemKind::TyAlias(generics, bounds, ty) => {\n+        AssocItemKind::TyAlias(_, generics, bounds, ty) => {\n             visitor.visit_generics(generics);\n             visit_bounds(bounds, visitor);\n             visit_opt(ty, |ty| visitor.visit_ty(ty));\n@@ -1049,7 +1048,7 @@ pub fn noop_flat_map_foreign_item<T: MutVisitor>(\n     mut item: P<ForeignItem>,\n     visitor: &mut T,\n ) -> SmallVec<[P<ForeignItem>; 1]> {\n-    let ForeignItem { ident, attrs, id, kind, vis, span, tokens: _ } = item.deref_mut();\n+    let Item { ident, attrs, id, kind, vis, span, tokens: _ } = item.deref_mut();\n     walk_nested_item(visitor, id, span, ident, vis, attrs, kind);\n     smallvec![item]\n }"}, {"sha": "96149ad7947ce208a0501483d608a146dcd062df", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -298,11 +298,11 @@ pub fn walk_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a Item) {\n             }\n         }\n         ItemKind::Use(ref use_tree) => visitor.visit_use_tree(use_tree, item.id, false),\n-        ItemKind::Static(ref typ, _, ref expr) | ItemKind::Const(ref typ, ref expr) => {\n+        ItemKind::Static(ref typ, _, ref expr) | ItemKind::Const(_, ref typ, ref expr) => {\n             visitor.visit_ty(typ);\n             walk_list!(visitor, visit_expr, expr);\n         }\n-        ItemKind::Fn(ref sig, ref generics, ref body) => {\n+        ItemKind::Fn(_, ref sig, ref generics, ref body) => {\n             visitor.visit_generics(generics);\n             let kind = FnKind::Fn(FnCtxt::Free, item.ident, sig, &item.vis, body.as_deref());\n             visitor.visit_fn(kind, item.span, item.id)\n@@ -312,7 +312,7 @@ pub fn walk_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a Item) {\n             walk_list!(visitor, visit_foreign_item, &foreign_module.items);\n         }\n         ItemKind::GlobalAsm(ref ga) => visitor.visit_global_asm(ga),\n-        ItemKind::TyAlias(ref generics, ref bounds, ref ty) => {\n+        ItemKind::TyAlias(_, ref generics, ref bounds, ref ty) => {\n             visitor.visit_generics(generics);\n             walk_list!(visitor, visit_param_bound, bounds);\n             walk_list!(visitor, visit_ty, ty);\n@@ -526,7 +526,7 @@ pub fn walk_pat<'a, V: Visitor<'a>>(visitor: &mut V, pattern: &'a Pat) {\n }\n \n pub fn walk_foreign_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a ForeignItem) {\n-    let ForeignItem { id, span, ident, vis, attrs, kind, tokens: _ } = item;\n+    let Item { id, span, ident, vis, attrs, kind, tokens: _ } = item;\n     walk_nested_item(visitor, *id, *span, *ident, vis, attrs, kind, FnCtxt::Foreign);\n }\n \n@@ -610,7 +610,7 @@ pub fn walk_fn<'a, V: Visitor<'a>>(visitor: &mut V, kind: FnKind<'a>, _span: Spa\n }\n \n pub fn walk_assoc_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a AssocItem, ctxt: AssocCtxt) {\n-    let AssocItem { id, span, ident, vis, attrs, kind, tokens: _, defaultness: _ } = item;\n+    let Item { id, span, ident, vis, attrs, kind, tokens: _ } = item;\n     walk_nested_item(visitor, *id, *span, *ident, vis, attrs, kind, FnCtxt::Assoc(ctxt));\n }\n \n@@ -628,16 +628,16 @@ fn walk_nested_item<'a, V: Visitor<'a>>(\n     visitor.visit_ident(ident);\n     walk_list!(visitor, visit_attribute, attrs);\n     match kind {\n-        AssocItemKind::Const(ty, expr) | AssocItemKind::Static(ty, _, expr) => {\n+        AssocItemKind::Const(_, ty, expr) | AssocItemKind::Static(ty, _, expr) => {\n             visitor.visit_ty(ty);\n             walk_list!(visitor, visit_expr, expr);\n         }\n-        AssocItemKind::Fn(sig, generics, body) => {\n+        AssocItemKind::Fn(_, sig, generics, body) => {\n             visitor.visit_generics(generics);\n             let kind = FnKind::Fn(ctxt, ident, sig, vis, body.as_deref());\n             visitor.visit_fn(kind, span, id);\n         }\n-        AssocItemKind::TyAlias(generics, bounds, ty) => {\n+        AssocItemKind::TyAlias(_, generics, bounds, ty) => {\n             visitor.visit_generics(generics);\n             walk_list!(visitor, visit_param_bound, bounds);\n             walk_list!(visitor, visit_ty, ty);"}, {"sha": "c97b4ff0f497e72480422bc63929eeb6fe32715e", "filename": "src/test/ui/async-await/no-unsafe-async.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fasync-await%2Fno-unsafe-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fasync-await%2Fno-unsafe-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-unsafe-async.stderr?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -1,8 +1,13 @@\n error: expected one of `extern` or `fn`, found keyword `async`\n   --> $DIR/no-unsafe-async.rs:7:12\n    |\n+LL | impl S {\n+   |        - while parsing this item list starting here\n+LL |     #[cfg(FALSE)]\n LL |     unsafe async fn g() {}\n    |            ^^^^^ expected one of `extern` or `fn`\n+LL | }\n+   | - the item list ends here\n \n error: expected one of `extern` or `fn`, found keyword `async`\n   --> $DIR/no-unsafe-async.rs:11:8"}, {"sha": "74f304d81a0f169323fb80362872580571666851", "filename": "src/test/ui/did_you_mean/issue-40006.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.rs?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -1,28 +1,28 @@\n-impl dyn A { //~ ERROR missing\n+impl dyn A {\n     Y\n-}\n+} //~ ERROR expected one of `!` or `::`, found `}`\n \n struct S;\n \n-trait X { //~ ERROR missing\n-    X() {}\n+trait X {\n+    X() {} //~ ERROR expected one of `!` or `::`, found `(`\n     fn xxx() { ### }\n     L = M;\n     Z = { 2 + 3 };\n     ::Y ();\n }\n \n-trait A { //~ ERROR missing\n-    X() {}\n+trait A {\n+    X() {} //~ ERROR expected one of `!` or `::`, found `(`\n }\n trait B {\n     fn xxx() { ### } //~ ERROR expected\n }\n-trait C { //~ ERROR missing `fn`, `type`, `const`, or `static` for item declaration\n-    L = M;\n+trait C {\n+    L = M; //~ ERROR expected one of `!` or `::`, found `=`\n }\n-trait D { //~ ERROR missing `fn`, `type`, `const`, or `static` for item declaration\n-    Z = { 2 + 3 };\n+trait D {\n+    Z = { 2 + 3 }; //~ ERROR expected one of `!` or `::`, found `=`\n }\n trait E {\n     ::Y (); //~ ERROR expected one of"}, {"sha": "613d7eee59480869cfa38bb5600ba90d7a68d566", "filename": "src/test/ui/did_you_mean/issue-40006.stderr", "status": "modified", "additions": 60, "deletions": 32, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.stderr?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -1,60 +1,88 @@\n-error: missing `fn`, `type`, `const`, or `static` for item declaration\n-  --> $DIR/issue-40006.rs:1:13\n+error: expected one of `!` or `::`, found `}`\n+  --> $DIR/issue-40006.rs:3:1\n    |\n-LL |   impl dyn A {\n-   |  _____________^\n-LL | |     Y\n-   | |____^ missing `fn`, `type`, `const`, or `static`\n+LL | impl dyn A {\n+   |            - while parsing this item list starting here\n+LL |     Y\n+   |      - expected one of `!` or `::`\n+LL | }\n+   | ^\n+   | |\n+   | unexpected token\n+   | the item list ends here\n \n-error: missing `fn`, `type`, `const`, or `static` for item declaration\n-  --> $DIR/issue-40006.rs:7:10\n+error: expected one of `!` or `::`, found `(`\n+  --> $DIR/issue-40006.rs:8:6\n    |\n-LL |   trait X {\n-   |  __________^\n-LL | |     X() {}\n-   | |____^ missing `fn`, `type`, `const`, or `static`\n+LL | trait X {\n+   |         - while parsing this item list starting here\n+LL |     X() {}\n+   |      ^ expected one of `!` or `::`\n+...\n+LL | }\n+   | - the item list ends here\n \n-error: missing `fn`, `type`, `const`, or `static` for item declaration\n-  --> $DIR/issue-40006.rs:15:10\n+error: expected one of `!` or `::`, found `(`\n+  --> $DIR/issue-40006.rs:16:6\n    |\n-LL |   trait A {\n-   |  __________^\n-LL | |     X() {}\n-   | |____^ missing `fn`, `type`, `const`, or `static`\n+LL | trait A {\n+   |         - while parsing this item list starting here\n+LL |     X() {}\n+   |      ^ expected one of `!` or `::`\n+LL | }\n+   | - the item list ends here\n \n error: expected `[`, found `#`\n   --> $DIR/issue-40006.rs:19:17\n    |\n LL |     fn xxx() { ### }\n    |                 ^ expected `[`\n \n-error: missing `fn`, `type`, `const`, or `static` for item declaration\n-  --> $DIR/issue-40006.rs:21:10\n+error: expected one of `!` or `::`, found `=`\n+  --> $DIR/issue-40006.rs:22:7\n    |\n-LL |   trait C {\n-   |  __________^\n-LL | |     L = M;\n-   | |____^ missing `fn`, `type`, `const`, or `static`\n+LL | trait C {\n+   |         - while parsing this item list starting here\n+LL |     L = M;\n+   |       ^ expected one of `!` or `::`\n+LL | }\n+   | - the item list ends here\n \n-error: missing `fn`, `type`, `const`, or `static` for item declaration\n-  --> $DIR/issue-40006.rs:24:10\n+error: expected one of `!` or `::`, found `=`\n+  --> $DIR/issue-40006.rs:25:7\n    |\n-LL |   trait D {\n-   |  __________^\n-LL | |     Z = { 2 + 3 };\n-   | |____^ missing `fn`, `type`, `const`, or `static`\n+LL | trait D {\n+   |         - while parsing this item list starting here\n+LL |     Z = { 2 + 3 };\n+   |       ^ expected one of `!` or `::`\n+LL | }\n+   | - the item list ends here\n \n error: expected one of `!` or `::`, found `(`\n   --> $DIR/issue-40006.rs:28:9\n    |\n+LL | trait E {\n+   |         - while parsing this item list starting here\n LL |     ::Y ();\n    |         ^ expected one of `!` or `::`\n+LL | }\n+   | - the item list ends here\n \n-error: missing `fn`, `type`, `const`, or `static` for item declaration\n+error: missing `fn` for method definition\n   --> $DIR/issue-40006.rs:32:8\n    |\n+LL | impl S {\n+   |        - while parsing this item list starting here\n LL |     pub hello_method(&self) {\n-   |        ^ missing `fn`, `type`, `const`, or `static`\n+   |        ^\n+...\n+LL | }\n+   | - the item list ends here\n+   |\n+help: add `fn` here to parse `hello_method` as a public method\n+   |\n+LL |     pub fn hello_method(&self) {\n+   |         ^^\n \n error[E0599]: no method named `hello_method` found for struct `S` in the current scope\n   --> $DIR/issue-40006.rs:38:7"}, {"sha": "bd5708d81403776643aeeb4f416c30cff3ef8fe3", "filename": "src/test/ui/generic-associated-types/empty_generics.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fempty_generics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fempty_generics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fempty_generics.stderr?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -1,8 +1,13 @@\n error: expected one of `>`, `const`, identifier, or lifetime, found `,`\n   --> $DIR/empty_generics.rs:5:14\n    |\n+LL | trait Foo {\n+   |           - while parsing this item list starting here\n LL |     type Bar<,>;\n    |              ^ expected one of `>`, `const`, identifier, or lifetime\n+LL |\n+LL | }\n+   | - the item list ends here\n \n error: aborting due to previous error\n "}, {"sha": "a8db8e8b41ad20ebcbc2a93f4c963c8f12e957f7", "filename": "src/test/ui/issues/issue-58856-1.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fissues%2Fissue-58856-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fissues%2Fissue-58856-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-58856-1.stderr?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -9,8 +9,14 @@ LL |     fn b(self>\n error: expected `;` or `{`, found `>`\n   --> $DIR/issue-58856-1.rs:3:14\n    |\n+LL | impl A {\n+   |        - while parsing this item list starting here\n+LL |\n LL |     fn b(self>\n    |              ^ expected `;` or `{`\n+...\n+LL | }\n+   | - the item list ends here\n \n error[E0412]: cannot find type `A` in this scope\n   --> $DIR/issue-58856-1.rs:1:6"}, {"sha": "9356d57b0e5f42aa3e25135aa99996a808e5de53", "filename": "src/test/ui/issues/issue-58856-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fissues%2Fissue-58856-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fissues%2Fissue-58856-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-58856-2.rs?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -9,6 +9,6 @@ impl Howness for () {\n         Empty\n     }\n }\n-//~^ ERROR expected one of `async`, `const`, `crate`, `default`, `extern`, `fn`,\n+//~^ ERROR non-item in item list\n \n fn main() {}"}, {"sha": "303b5eacc3296c277520d103960605b038b88b6c", "filename": "src/test/ui/issues/issue-58856-2.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fissues%2Fissue-58856-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fissues%2Fissue-58856-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-58856-2.stderr?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -7,13 +7,17 @@ LL |     fn how_are_you(&self -> Empty {\n    |                   |     help: `)` may belong here\n    |                   unclosed delimiter\n \n-error: expected one of `async`, `const`, `crate`, `default`, `extern`, `fn`, `pub`, `static`, `type`, `unsafe`, `}`, or identifier, found `)`\n+error: non-item in item list\n   --> $DIR/issue-58856-2.rs:11:1\n    |\n-LL |     }\n-   |      - expected one of 12 possible tokens\n+LL | impl Howness for () {\n+   |                     - item list starts here\n+...\n LL | }\n-   | ^ unexpected token\n+   | ^\n+   | |\n+   | non-item starts here\n+   | item list ends here\n \n error[E0407]: method `how_are_you` is not a member of trait `Howness`\n   --> $DIR/issue-58856-2.rs:6:5"}, {"sha": "e89d78ee8a6a284826e6b53f918665129563a4a3", "filename": "src/test/ui/issues/issue-60075.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fissues%2Fissue-60075.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fissues%2Fissue-60075.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60075.rs?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -4,7 +4,8 @@ trait T {\n     fn qux() -> Option<usize> {\n         let _ = if true {\n         });\n-//~^ ERROR expected one of `async`\n-//~| ERROR expected one of `.`, `;`, `?`, `else`, or an operator, found `}`\n+//~^ ERROR non-item in item list\n+//~| ERROR mismatched closing delimiter: `)`\n+//~| ERROR expected one of `.`, `;`\n         Some(4)\n     }"}, {"sha": "e3b7f4ad420e8a200972dae53e79389a25440738", "filename": "src/test/ui/issues/issue-60075.stderr", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fissues%2Fissue-60075.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fissues%2Fissue-60075.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60075.stderr?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -4,14 +4,26 @@ error: expected one of `.`, `;`, `?`, `else`, or an operator, found `}`\n LL |         });\n    |          ^ expected one of `.`, `;`, `?`, `else`, or an operator\n \n-error: expected one of `async`, `const`, `crate`, `default`, `extern`, `fn`, `pub`, `static`, `type`, `unsafe`, `}`, or identifier, found `;`\n+error: non-item in item list\n   --> $DIR/issue-60075.rs:6:11\n    |\n+LL | trait T {\n+   |         - item list starts here\n+...\n+LL |         });\n+   |           ^ non-item starts here\n+...\n+LL |     }\n+   |     - item list ends here\n+\n+error: mismatched closing delimiter: `)`\n+  --> $DIR/issue-60075.rs:6:10\n+   |\n LL |     fn qux() -> Option<usize> {\n    |                               - unclosed delimiter\n LL |         let _ = if true {\n LL |         });\n-   |           ^ help: `}` may belong here\n+   |          ^ mismatched closing delimiter\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n "}, {"sha": "b24d7e1f6bee5681880f68b882381289b43cb887", "filename": "src/test/ui/macros/issue-54441.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fmacros%2Fissue-54441.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fmacros%2Fissue-54441.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-54441.rs?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -1,7 +1,6 @@\n macro_rules! m {\n-    //~^ ERROR missing `fn`, `type`, `const`, or `static` for item declaration\n     () => {\n-        let\n+        let //~ ERROR macro expansion ignores token `let` and any following\n     };\n }\n "}, {"sha": "752916e665560d88a13e016f37efd88eb46b6977", "filename": "src/test/ui/macros/issue-54441.stderr", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fmacros%2Fissue-54441.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fmacros%2Fissue-54441.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-54441.stderr?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -1,11 +1,13 @@\n-error: missing `fn`, `type`, `const`, or `static` for item declaration\n-  --> $DIR/issue-54441.rs:1:1\n+error: macro expansion ignores token `let` and any following\n+  --> $DIR/issue-54441.rs:3:9\n    |\n-LL | / macro_rules! m {\n-LL | |\n-LL | |     () => {\n-LL | |         let\n-   | |________^ missing `fn`, `type`, `const`, or `static`\n+LL |         let\n+   |         ^^^\n+...\n+LL |     m!();\n+   |     ----- caused by the macro expansion here\n+   |\n+   = note: the usage of `m!` is likely invalid in foreign item context\n \n error: aborting due to previous error\n "}, {"sha": "215a2921315213ad680a802ea98155c5ab34766f", "filename": "src/test/ui/parser/assoc-static-semantic-fail.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fassoc-static-semantic-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fassoc-static-semantic-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fassoc-static-semantic-fail.rs?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -10,10 +10,14 @@ impl S {\n     //~^ ERROR associated `static` items are not allowed\n     static IB: u8;\n     //~^ ERROR associated `static` items are not allowed\n+    //~| ERROR associated constant in `impl` without body\n     default static IC: u8 = 0;\n     //~^ ERROR associated `static` items are not allowed\n+    //~| ERROR a static item cannot be `default`\n     pub(crate) default static ID: u8;\n     //~^ ERROR associated `static` items are not allowed\n+    //~| ERROR associated constant in `impl` without body\n+    //~| ERROR a static item cannot be `default`\n }\n \n trait T {\n@@ -23,21 +27,25 @@ trait T {\n     //~^ ERROR associated `static` items are not allowed\n     default static TC: u8 = 0;\n     //~^ ERROR associated `static` items are not allowed\n-    //~| ERROR `default` is only allowed on items in\n+    //~| ERROR a static item cannot be `default`\n     pub(crate) default static TD: u8;\n     //~^ ERROR associated `static` items are not allowed\n-    //~| ERROR `default` is only allowed on items in\n     //~| ERROR unnecessary visibility qualifier\n+    //~| ERROR a static item cannot be `default`\n }\n \n impl T for S {\n     static TA: u8 = 0;\n     //~^ ERROR associated `static` items are not allowed\n     static TB: u8;\n     //~^ ERROR associated `static` items are not allowed\n+    //~| ERROR associated constant in `impl` without body\n     default static TC: u8 = 0;\n     //~^ ERROR associated `static` items are not allowed\n+    //~| ERROR a static item cannot be `default`\n     pub default static TD: u8;\n     //~^ ERROR associated `static` items are not allowed\n+    //~| ERROR associated constant in `impl` without body\n     //~| ERROR unnecessary visibility qualifier\n+    //~| ERROR a static item cannot be `default`\n }"}, {"sha": "612297c9cd8b1a9e064b74b13ae69564528420d1", "filename": "src/test/ui/parser/assoc-static-semantic-fail.stderr", "status": "modified", "additions": 89, "deletions": 21, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fassoc-static-semantic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fassoc-static-semantic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fassoc-static-semantic-fail.stderr?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -10,90 +10,158 @@ error: associated `static` items are not allowed\n LL |     static IB: u8;\n    |     ^^^^^^^^^^^^^^\n \n+error: a static item cannot be `default`\n+  --> $DIR/assoc-static-semantic-fail.rs:14:5\n+   |\n+LL |     default static IC: u8 = 0;\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n error: associated `static` items are not allowed\n-  --> $DIR/assoc-static-semantic-fail.rs:13:5\n+  --> $DIR/assoc-static-semantic-fail.rs:14:5\n    |\n LL |     default static IC: u8 = 0;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: a static item cannot be `default`\n+  --> $DIR/assoc-static-semantic-fail.rs:17:16\n+   |\n+LL |     pub(crate) default static ID: u8;\n+   |                ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n error: associated `static` items are not allowed\n-  --> $DIR/assoc-static-semantic-fail.rs:15:5\n+  --> $DIR/assoc-static-semantic-fail.rs:17:5\n    |\n LL |     pub(crate) default static ID: u8;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: associated `static` items are not allowed\n-  --> $DIR/assoc-static-semantic-fail.rs:20:5\n+  --> $DIR/assoc-static-semantic-fail.rs:24:5\n    |\n LL |     static TA: u8 = 0;\n    |     ^^^^^^^^^^^^^^^^^^\n \n error: associated `static` items are not allowed\n-  --> $DIR/assoc-static-semantic-fail.rs:22:5\n+  --> $DIR/assoc-static-semantic-fail.rs:26:5\n    |\n LL |     static TB: u8;\n    |     ^^^^^^^^^^^^^^\n \n+error: a static item cannot be `default`\n+  --> $DIR/assoc-static-semantic-fail.rs:28:5\n+   |\n+LL |     default static TC: u8 = 0;\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n error: associated `static` items are not allowed\n-  --> $DIR/assoc-static-semantic-fail.rs:24:5\n+  --> $DIR/assoc-static-semantic-fail.rs:28:5\n    |\n LL |     default static TC: u8 = 0;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: a static item cannot be `default`\n+  --> $DIR/assoc-static-semantic-fail.rs:31:16\n+   |\n+LL |     pub(crate) default static TD: u8;\n+   |                ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n error: associated `static` items are not allowed\n-  --> $DIR/assoc-static-semantic-fail.rs:27:5\n+  --> $DIR/assoc-static-semantic-fail.rs:31:5\n    |\n LL |     pub(crate) default static TD: u8;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: associated `static` items are not allowed\n-  --> $DIR/assoc-static-semantic-fail.rs:34:5\n+  --> $DIR/assoc-static-semantic-fail.rs:38:5\n    |\n LL |     static TA: u8 = 0;\n    |     ^^^^^^^^^^^^^^^^^^\n \n error: associated `static` items are not allowed\n-  --> $DIR/assoc-static-semantic-fail.rs:36:5\n+  --> $DIR/assoc-static-semantic-fail.rs:40:5\n    |\n LL |     static TB: u8;\n    |     ^^^^^^^^^^^^^^\n \n+error: a static item cannot be `default`\n+  --> $DIR/assoc-static-semantic-fail.rs:43:5\n+   |\n+LL |     default static TC: u8 = 0;\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n error: associated `static` items are not allowed\n-  --> $DIR/assoc-static-semantic-fail.rs:38:5\n+  --> $DIR/assoc-static-semantic-fail.rs:43:5\n    |\n LL |     default static TC: u8 = 0;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: a static item cannot be `default`\n+  --> $DIR/assoc-static-semantic-fail.rs:46:9\n+   |\n+LL |     pub default static TD: u8;\n+   |         ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n error: associated `static` items are not allowed\n-  --> $DIR/assoc-static-semantic-fail.rs:40:5\n+  --> $DIR/assoc-static-semantic-fail.rs:46:5\n    |\n LL |     pub default static TD: u8;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: `default` is only allowed on items in `impl` definitions\n-  --> $DIR/assoc-static-semantic-fail.rs:24:5\n+error: associated constant in `impl` without body\n+  --> $DIR/assoc-static-semantic-fail.rs:11:5\n    |\n-LL |     default static TC: u8 = 0;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     static IB: u8;\n+   |     ^^^^^^^^^^^^^-\n+   |                  |\n+   |                  help: provide a definition for the constant: `= <expr>;`\n \n-error: `default` is only allowed on items in `impl` definitions\n-  --> $DIR/assoc-static-semantic-fail.rs:27:5\n+error: associated constant in `impl` without body\n+  --> $DIR/assoc-static-semantic-fail.rs:17:5\n    |\n-LL |     pub(crate) default static TD: u8;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     pub(crate) default static ID: u8;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n+   |                                     |\n+   |                                     help: provide a definition for the constant: `= <expr>;`\n \n error[E0449]: unnecessary visibility qualifier\n-  --> $DIR/assoc-static-semantic-fail.rs:27:5\n+  --> $DIR/assoc-static-semantic-fail.rs:31:5\n    |\n LL |     pub(crate) default static TD: u8;\n    |     ^^^^^^^^^^\n \n-error[E0449]: unnecessary visibility qualifier\n+error: associated constant in `impl` without body\n   --> $DIR/assoc-static-semantic-fail.rs:40:5\n    |\n+LL |     static TB: u8;\n+   |     ^^^^^^^^^^^^^-\n+   |                  |\n+   |                  help: provide a definition for the constant: `= <expr>;`\n+\n+error: associated constant in `impl` without body\n+  --> $DIR/assoc-static-semantic-fail.rs:46:5\n+   |\n+LL |     pub default static TD: u8;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^-\n+   |                              |\n+   |                              help: provide a definition for the constant: `= <expr>;`\n+\n+error[E0449]: unnecessary visibility qualifier\n+  --> $DIR/assoc-static-semantic-fail.rs:46:5\n+   |\n LL |     pub default static TD: u8;\n    |     ^^^ `pub` not permitted here because it's implied\n \n-error: aborting due to 16 previous errors\n+error: aborting due to 24 previous errors\n \n For more information about this error, try `rustc --explain E0449`."}, {"sha": "492f2ea16ef57ba14b110beb67bd6a042c6d4f19", "filename": "src/test/ui/parser/assoc-static-syntactic-fail.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fassoc-static-syntactic-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fassoc-static-syntactic-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fassoc-static-syntactic-fail.rs?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -7,21 +7,27 @@ impl S {\n     static IA: u8 = 0; //~ ERROR associated `static` items are not allowed\n     static IB: u8; //~ ERROR associated `static` items are not allowed\n     default static IC: u8 = 0; //~ ERROR associated `static` items are not allowed\n+    //~^ ERROR a static item cannot be `default`\n     pub(crate) default static ID: u8; //~ ERROR associated `static` items are not allowed\n+    //~^ ERROR a static item cannot be `default`\n }\n \n #[cfg(FALSE)]\n trait T {\n     static TA: u8 = 0; //~ ERROR associated `static` items are not allowed\n     static TB: u8; //~ ERROR associated `static` items are not allowed\n     default static TC: u8 = 0; //~ ERROR associated `static` items are not allowed\n+    //~^ ERROR a static item cannot be `default`\n     pub(crate) default static TD: u8; //~ ERROR associated `static` items are not allowed\n+    //~^ ERROR a static item cannot be `default`\n }\n \n #[cfg(FALSE)]\n impl T for S {\n     static TA: u8 = 0; //~ ERROR associated `static` items are not allowed\n     static TB: u8; //~ ERROR associated `static` items are not allowed\n     default static TC: u8 = 0; //~ ERROR associated `static` items are not allowed\n+    //~^ ERROR a static item cannot be `default`\n     pub default static TD: u8; //~ ERROR associated `static` items are not allowed\n+    //~^ ERROR a static item cannot be `default`\n }"}, {"sha": "e972361451235856128e34442b9b20cf9f348883", "filename": "src/test/ui/parser/assoc-static-syntactic-fail.stderr", "status": "modified", "additions": 58, "deletions": 10, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fassoc-static-syntactic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fassoc-static-syntactic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fassoc-static-syntactic-fail.stderr?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -10,65 +10,113 @@ error: associated `static` items are not allowed\n LL |     static IB: u8;\n    |     ^^^^^^^^^^^^^^\n \n+error: a static item cannot be `default`\n+  --> $DIR/assoc-static-syntactic-fail.rs:9:5\n+   |\n+LL |     default static IC: u8 = 0;\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n error: associated `static` items are not allowed\n   --> $DIR/assoc-static-syntactic-fail.rs:9:5\n    |\n LL |     default static IC: u8 = 0;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: a static item cannot be `default`\n+  --> $DIR/assoc-static-syntactic-fail.rs:11:16\n+   |\n+LL |     pub(crate) default static ID: u8;\n+   |                ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n error: associated `static` items are not allowed\n-  --> $DIR/assoc-static-syntactic-fail.rs:10:5\n+  --> $DIR/assoc-static-syntactic-fail.rs:11:5\n    |\n LL |     pub(crate) default static ID: u8;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: associated `static` items are not allowed\n-  --> $DIR/assoc-static-syntactic-fail.rs:15:5\n+  --> $DIR/assoc-static-syntactic-fail.rs:17:5\n    |\n LL |     static TA: u8 = 0;\n    |     ^^^^^^^^^^^^^^^^^^\n \n error: associated `static` items are not allowed\n-  --> $DIR/assoc-static-syntactic-fail.rs:16:5\n+  --> $DIR/assoc-static-syntactic-fail.rs:18:5\n    |\n LL |     static TB: u8;\n    |     ^^^^^^^^^^^^^^\n \n+error: a static item cannot be `default`\n+  --> $DIR/assoc-static-syntactic-fail.rs:19:5\n+   |\n+LL |     default static TC: u8 = 0;\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n error: associated `static` items are not allowed\n-  --> $DIR/assoc-static-syntactic-fail.rs:17:5\n+  --> $DIR/assoc-static-syntactic-fail.rs:19:5\n    |\n LL |     default static TC: u8 = 0;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: a static item cannot be `default`\n+  --> $DIR/assoc-static-syntactic-fail.rs:21:16\n+   |\n+LL |     pub(crate) default static TD: u8;\n+   |                ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n error: associated `static` items are not allowed\n-  --> $DIR/assoc-static-syntactic-fail.rs:18:5\n+  --> $DIR/assoc-static-syntactic-fail.rs:21:5\n    |\n LL |     pub(crate) default static TD: u8;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: associated `static` items are not allowed\n-  --> $DIR/assoc-static-syntactic-fail.rs:23:5\n+  --> $DIR/assoc-static-syntactic-fail.rs:27:5\n    |\n LL |     static TA: u8 = 0;\n    |     ^^^^^^^^^^^^^^^^^^\n \n error: associated `static` items are not allowed\n-  --> $DIR/assoc-static-syntactic-fail.rs:24:5\n+  --> $DIR/assoc-static-syntactic-fail.rs:28:5\n    |\n LL |     static TB: u8;\n    |     ^^^^^^^^^^^^^^\n \n+error: a static item cannot be `default`\n+  --> $DIR/assoc-static-syntactic-fail.rs:29:5\n+   |\n+LL |     default static TC: u8 = 0;\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n error: associated `static` items are not allowed\n-  --> $DIR/assoc-static-syntactic-fail.rs:25:5\n+  --> $DIR/assoc-static-syntactic-fail.rs:29:5\n    |\n LL |     default static TC: u8 = 0;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: a static item cannot be `default`\n+  --> $DIR/assoc-static-syntactic-fail.rs:31:9\n+   |\n+LL |     pub default static TD: u8;\n+   |         ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n error: associated `static` items are not allowed\n-  --> $DIR/assoc-static-syntactic-fail.rs:26:5\n+  --> $DIR/assoc-static-syntactic-fail.rs:31:5\n    |\n LL |     pub default static TD: u8;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 12 previous errors\n+error: aborting due to 18 previous errors\n "}, {"sha": "3862f5c379fc37dc668b67ec68d04d87d8123590", "filename": "src/test/ui/parser/attrs-after-extern-mod.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fattrs-after-extern-mod.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fattrs-after-extern-mod.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fattrs-after-extern-mod.stderr?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -1,8 +1,12 @@\n error: expected item after attributes\n   --> $DIR/attrs-after-extern-mod.rs:6:5\n    |\n+LL | extern {\n+   |        - while parsing this item list starting here\n LL |     #[cfg(stage37)]\n    |     ^^^^^^^^^^^^^^^\n+LL | }\n+   | - the item list ends here\n \n error: aborting due to previous error\n "}, {"sha": "98a95cfa35a9ea0295b18593f1e53c5ac679c327", "filename": "src/test/ui/parser/default-on-wrong-item-kind.rs", "status": "added", "additions": 140, "deletions": 0, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fdefault-on-wrong-item-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fdefault-on-wrong-item-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdefault-on-wrong-item-kind.rs?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -0,0 +1,140 @@\n+// Test parsing for `default` where it doesn't belong.\n+// Specifically, we are interested in kinds of items or items in certain contexts.\n+// Also test item kinds in `extern` blocks and associated contexts which are not allowed there.\n+\n+fn main() {}\n+\n+#[cfg(FALSE)]\n+mod free_items {\n+    default extern crate foo; //~ ERROR an extern crate cannot be `default`\n+    default use foo; //~ ERROR a `use` import cannot be `default`\n+    default static foo: u8; //~ ERROR a static item cannot be `default`\n+    default const foo: u8;\n+    default fn foo();\n+    default mod foo {} //~ ERROR a module cannot be `default`\n+    default extern \"C\" {} //~ ERROR an extern block cannot be `default`\n+    default type foo = u8;\n+    default enum foo {} //~ ERROR an enum cannot be `default`\n+    default struct foo {} //~ ERROR a struct cannot be `default`\n+    default union foo {} //~ ERROR a union cannot be `default`\n+    default trait foo {} //~ ERROR a trait cannot be `default`\n+    default trait foo = Ord; //~ ERROR a trait alias cannot be `default`\n+    default impl foo {}\n+    default!();\n+    default::foo::bar!();\n+    default default!(); //~ ERROR an item macro invocation cannot be `default`\n+    default default::foo::bar!(); //~ ERROR an item macro invocation cannot be `default`\n+    default macro foo {} //~ ERROR a macro definition cannot be `default`\n+    default macro_rules! foo {} //~ ERROR a macro definition cannot be `default`\n+}\n+\n+#[cfg(FALSE)]\n+extern \"C\" {\n+    default extern crate foo; //~ ERROR an extern crate cannot be `default`\n+    //~^ ERROR extern crate is not supported in `extern` blocks\n+    default use foo; //~ ERROR a `use` import cannot be `default`\n+    //~^ ERROR `use` import is not supported in `extern` blocks\n+    default static foo: u8; //~ ERROR a static item cannot be `default`\n+    default const foo: u8;\n+    //~^ ERROR extern items cannot be `const`\n+    default fn foo();\n+    default mod foo {} //~ ERROR a module cannot be `default`\n+    //~^ ERROR module is not supported in `extern` blocks\n+    default extern \"C\" {} //~ ERROR an extern block cannot be `default`\n+    //~^ ERROR extern block is not supported in `extern` blocks\n+    default type foo = u8;\n+    default enum foo {} //~ ERROR an enum cannot be `default`\n+    //~^ ERROR enum is not supported in `extern` blocks\n+    default struct foo {} //~ ERROR a struct cannot be `default`\n+    //~^ ERROR struct is not supported in `extern` blocks\n+    default union foo {} //~ ERROR a union cannot be `default`\n+    //~^ ERROR union is not supported in `extern` blocks\n+    default trait foo {} //~ ERROR a trait cannot be `default`\n+    //~^ ERROR trait is not supported in `extern` blocks\n+    default trait foo = Ord; //~ ERROR a trait alias cannot be `default`\n+    //~^ ERROR trait alias is not supported in `extern` blocks\n+    default impl foo {}\n+    //~^ ERROR implementation is not supported in `extern` blocks\n+    default!();\n+    default::foo::bar!();\n+    default default!(); //~ ERROR an item macro invocation cannot be `default`\n+    default default::foo::bar!(); //~ ERROR an item macro invocation cannot be `default`\n+    default macro foo {} //~ ERROR a macro definition cannot be `default`\n+    //~^ ERROR macro definition is not supported in `extern` blocks\n+    default macro_rules! foo {} //~ ERROR a macro definition cannot be `default`\n+    //~^ ERROR macro definition is not supported in `extern` blocks\n+}\n+\n+#[cfg(FALSE)]\n+impl S {\n+    default extern crate foo; //~ ERROR an extern crate cannot be `default`\n+    //~^ ERROR extern crate is not supported in `trait`s or `impl`s\n+    default use foo; //~ ERROR a `use` import cannot be `default`\n+    //~^ ERROR `use` import is not supported in `trait`s or `impl`s\n+    default static foo: u8; //~ ERROR a static item cannot be `default`\n+    //~^ ERROR associated `static` items are not allowed\n+    default const foo: u8;\n+    default fn foo();\n+    default mod foo {}//~ ERROR a module cannot be `default`\n+    //~^ ERROR module is not supported in `trait`s or `impl`s\n+    default extern \"C\" {} //~ ERROR an extern block cannot be `default`\n+    //~^ ERROR extern block is not supported in `trait`s or `impl`s\n+    default type foo = u8;\n+    default enum foo {} //~ ERROR an enum cannot be `default`\n+    //~^ ERROR enum is not supported in `trait`s or `impl`s\n+    default struct foo {} //~ ERROR a struct cannot be `default`\n+    //~^ ERROR struct is not supported in `trait`s or `impl`s\n+    default union foo {} //~ ERROR a union cannot be `default`\n+    //~^ ERROR union is not supported in `trait`s or `impl`s\n+    default trait foo {} //~ ERROR a trait cannot be `default`\n+    //~^ ERROR trait is not supported in `trait`s or `impl`s\n+    default trait foo = Ord; //~ ERROR a trait alias cannot be `default`\n+    //~^ ERROR trait alias is not supported in `trait`s or `impl`s\n+    default impl foo {}\n+    //~^ ERROR implementation is not supported in `trait`s or `impl`s\n+    default!();\n+    default::foo::bar!();\n+    default default!(); //~ ERROR an item macro invocation cannot be `default`\n+    default default::foo::bar!(); //~ ERROR an item macro invocation cannot be `default`\n+    default macro foo {} //~ ERROR a macro definition cannot be `default`\n+    //~^ ERROR macro definition is not supported in `trait`s or `impl`s\n+    default macro_rules! foo {} //~ ERROR a macro definition cannot be `default`\n+    //~^ ERROR macro definition is not supported in `trait`s or `impl`s\n+}\n+\n+#[cfg(FALSE)]\n+trait T {\n+    default extern crate foo; //~ ERROR an extern crate cannot be `default`\n+    //~^ ERROR extern crate is not supported in `trait`s or `impl`s\n+    default use foo; //~ ERROR a `use` import cannot be `default`\n+    //~^ ERROR `use` import is not supported in `trait`s or `impl`s\n+    default static foo: u8; //~ ERROR a static item cannot be `default`\n+    //~^ ERROR associated `static` items are not allowed\n+    default const foo: u8;\n+    default fn foo();\n+    default mod foo {}//~ ERROR a module cannot be `default`\n+    //~^ ERROR module is not supported in `trait`s or `impl`s\n+    default extern \"C\" {} //~ ERROR an extern block cannot be `default`\n+    //~^ ERROR extern block is not supported in `trait`s or `impl`s\n+    default type foo = u8;\n+    default enum foo {} //~ ERROR an enum cannot be `default`\n+    //~^ ERROR enum is not supported in `trait`s or `impl`s\n+    default struct foo {} //~ ERROR a struct cannot be `default`\n+    //~^ ERROR struct is not supported in `trait`s or `impl`s\n+    default union foo {} //~ ERROR a union cannot be `default`\n+    //~^ ERROR union is not supported in `trait`s or `impl`s\n+    default trait foo {} //~ ERROR a trait cannot be `default`\n+    //~^ ERROR trait is not supported in `trait`s or `impl`s\n+    default trait foo = Ord; //~ ERROR a trait alias cannot be `default`\n+    //~^ ERROR trait alias is not supported in `trait`s or `impl`s\n+    default impl foo {}\n+    //~^ ERROR implementation is not supported in `trait`s or `impl`s\n+    default!();\n+    default::foo::bar!();\n+    default default!(); //~ ERROR an item macro invocation cannot be `default`\n+    default default::foo::bar!(); //~ ERROR an item macro invocation cannot be `default`\n+    default macro foo {} //~ ERROR a macro definition cannot be `default`\n+    //~^ ERROR macro definition is not supported in `trait`s or `impl`s\n+    default macro_rules! foo {} //~ ERROR a macro definition cannot be `default`\n+    //~^ ERROR macro definition is not supported in `trait`s or `impl`s\n+}"}, {"sha": "9788bd64725b83152ec4adad8c19d0ba580c17a6", "filename": "src/test/ui/parser/default-on-wrong-item-kind.stderr", "status": "added", "additions": 688, "deletions": 0, "changes": 688, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fdefault-on-wrong-item-kind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fdefault-on-wrong-item-kind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdefault-on-wrong-item-kind.stderr?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -0,0 +1,688 @@\n+error: an extern crate cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:9:5\n+   |\n+LL |     default extern crate foo;\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: a `use` import cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:10:5\n+   |\n+LL |     default use foo;\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: a static item cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:11:5\n+   |\n+LL |     default static foo: u8;\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: a module cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:14:5\n+   |\n+LL |     default mod foo {}\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: an extern block cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:15:5\n+   |\n+LL |     default extern \"C\" {}\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: an enum cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:17:5\n+   |\n+LL |     default enum foo {}\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: a struct cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:18:5\n+   |\n+LL |     default struct foo {}\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: a union cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:19:5\n+   |\n+LL |     default union foo {}\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: a trait cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:20:5\n+   |\n+LL |     default trait foo {}\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: a trait alias cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:21:5\n+   |\n+LL |     default trait foo = Ord;\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: an item macro invocation cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:25:5\n+   |\n+LL |     default default!();\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: an item macro invocation cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:26:5\n+   |\n+LL |     default default::foo::bar!();\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: a macro definition cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:27:5\n+   |\n+LL |     default macro foo {}\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: a macro definition cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:28:5\n+   |\n+LL |     default macro_rules! foo {}\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: an extern crate cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:33:5\n+   |\n+LL |     default extern crate foo;\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: extern crate is not supported in `extern` blocks\n+  --> $DIR/default-on-wrong-item-kind.rs:33:5\n+   |\n+LL |     default extern crate foo;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: a `use` import cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:35:5\n+   |\n+LL |     default use foo;\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: `use` import is not supported in `extern` blocks\n+  --> $DIR/default-on-wrong-item-kind.rs:35:5\n+   |\n+LL |     default use foo;\n+   |     ^^^^^^^^^^^^^^^^\n+\n+error: a static item cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:37:5\n+   |\n+LL |     default static foo: u8;\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: extern items cannot be `const`\n+  --> $DIR/default-on-wrong-item-kind.rs:38:19\n+   |\n+LL |     default const foo: u8;\n+   |     --------------^^^\n+   |     |\n+   |     help: try using a static value: `static`\n+   |\n+   = note: for more information, visit https://doc.rust-lang.org/std/keyword.extern.html\n+\n+error: a module cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:41:5\n+   |\n+LL |     default mod foo {}\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: module is not supported in `extern` blocks\n+  --> $DIR/default-on-wrong-item-kind.rs:41:5\n+   |\n+LL |     default mod foo {}\n+   |     ^^^^^^^^^^^^^^^\n+\n+error: an extern block cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:43:5\n+   |\n+LL |     default extern \"C\" {}\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: extern block is not supported in `extern` blocks\n+  --> $DIR/default-on-wrong-item-kind.rs:43:5\n+   |\n+LL |     default extern \"C\" {}\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error: an enum cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:46:5\n+   |\n+LL |     default enum foo {}\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: enum is not supported in `extern` blocks\n+  --> $DIR/default-on-wrong-item-kind.rs:46:5\n+   |\n+LL |     default enum foo {}\n+   |     ^^^^^^^^^^^^^^^^\n+\n+error: a struct cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:48:5\n+   |\n+LL |     default struct foo {}\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: struct is not supported in `extern` blocks\n+  --> $DIR/default-on-wrong-item-kind.rs:48:5\n+   |\n+LL |     default struct foo {}\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error: a union cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:50:5\n+   |\n+LL |     default union foo {}\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: union is not supported in `extern` blocks\n+  --> $DIR/default-on-wrong-item-kind.rs:50:5\n+   |\n+LL |     default union foo {}\n+   |     ^^^^^^^^^^^^^^^^^\n+\n+error: a trait cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:52:5\n+   |\n+LL |     default trait foo {}\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: trait is not supported in `extern` blocks\n+  --> $DIR/default-on-wrong-item-kind.rs:52:5\n+   |\n+LL |     default trait foo {}\n+   |     ^^^^^^^^^^^^^^^^^\n+\n+error: a trait alias cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:54:5\n+   |\n+LL |     default trait foo = Ord;\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: trait alias is not supported in `extern` blocks\n+  --> $DIR/default-on-wrong-item-kind.rs:54:5\n+   |\n+LL |     default trait foo = Ord;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: implementation is not supported in `extern` blocks\n+  --> $DIR/default-on-wrong-item-kind.rs:56:5\n+   |\n+LL |     default impl foo {}\n+   |     ^^^^^^^^^^^^^^^^\n+\n+error: an item macro invocation cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:60:5\n+   |\n+LL |     default default!();\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: an item macro invocation cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:61:5\n+   |\n+LL |     default default::foo::bar!();\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: a macro definition cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:62:5\n+   |\n+LL |     default macro foo {}\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: macro definition is not supported in `extern` blocks\n+  --> $DIR/default-on-wrong-item-kind.rs:62:5\n+   |\n+LL |     default macro foo {}\n+   |     ^^^^^^^^^^^^^^^^^\n+\n+error: a macro definition cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:64:5\n+   |\n+LL |     default macro_rules! foo {}\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: macro definition is not supported in `extern` blocks\n+  --> $DIR/default-on-wrong-item-kind.rs:64:5\n+   |\n+LL |     default macro_rules! foo {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: an extern crate cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:70:5\n+   |\n+LL |     default extern crate foo;\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: extern crate is not supported in `trait`s or `impl`s\n+  --> $DIR/default-on-wrong-item-kind.rs:70:5\n+   |\n+LL |     default extern crate foo;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: a `use` import cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:72:5\n+   |\n+LL |     default use foo;\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: `use` import is not supported in `trait`s or `impl`s\n+  --> $DIR/default-on-wrong-item-kind.rs:72:5\n+   |\n+LL |     default use foo;\n+   |     ^^^^^^^^^^^^^^^^\n+\n+error: a static item cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:74:5\n+   |\n+LL |     default static foo: u8;\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: associated `static` items are not allowed\n+  --> $DIR/default-on-wrong-item-kind.rs:74:5\n+   |\n+LL |     default static foo: u8;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: a module cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:78:5\n+   |\n+LL |     default mod foo {}\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: module is not supported in `trait`s or `impl`s\n+  --> $DIR/default-on-wrong-item-kind.rs:78:5\n+   |\n+LL |     default mod foo {}\n+   |     ^^^^^^^^^^^^^^^\n+\n+error: an extern block cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:80:5\n+   |\n+LL |     default extern \"C\" {}\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: extern block is not supported in `trait`s or `impl`s\n+  --> $DIR/default-on-wrong-item-kind.rs:80:5\n+   |\n+LL |     default extern \"C\" {}\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error: an enum cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:83:5\n+   |\n+LL |     default enum foo {}\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: enum is not supported in `trait`s or `impl`s\n+  --> $DIR/default-on-wrong-item-kind.rs:83:5\n+   |\n+LL |     default enum foo {}\n+   |     ^^^^^^^^^^^^^^^^\n+\n+error: a struct cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:85:5\n+   |\n+LL |     default struct foo {}\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: struct is not supported in `trait`s or `impl`s\n+  --> $DIR/default-on-wrong-item-kind.rs:85:5\n+   |\n+LL |     default struct foo {}\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error: a union cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:87:5\n+   |\n+LL |     default union foo {}\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: union is not supported in `trait`s or `impl`s\n+  --> $DIR/default-on-wrong-item-kind.rs:87:5\n+   |\n+LL |     default union foo {}\n+   |     ^^^^^^^^^^^^^^^^^\n+\n+error: a trait cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:89:5\n+   |\n+LL |     default trait foo {}\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: trait is not supported in `trait`s or `impl`s\n+  --> $DIR/default-on-wrong-item-kind.rs:89:5\n+   |\n+LL |     default trait foo {}\n+   |     ^^^^^^^^^^^^^^^^^\n+\n+error: a trait alias cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:91:5\n+   |\n+LL |     default trait foo = Ord;\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: trait alias is not supported in `trait`s or `impl`s\n+  --> $DIR/default-on-wrong-item-kind.rs:91:5\n+   |\n+LL |     default trait foo = Ord;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: implementation is not supported in `trait`s or `impl`s\n+  --> $DIR/default-on-wrong-item-kind.rs:93:5\n+   |\n+LL |     default impl foo {}\n+   |     ^^^^^^^^^^^^^^^^\n+\n+error: an item macro invocation cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:97:5\n+   |\n+LL |     default default!();\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: an item macro invocation cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:98:5\n+   |\n+LL |     default default::foo::bar!();\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: a macro definition cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:99:5\n+   |\n+LL |     default macro foo {}\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: macro definition is not supported in `trait`s or `impl`s\n+  --> $DIR/default-on-wrong-item-kind.rs:99:5\n+   |\n+LL |     default macro foo {}\n+   |     ^^^^^^^^^^^^^^^^^\n+\n+error: a macro definition cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:101:5\n+   |\n+LL |     default macro_rules! foo {}\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: macro definition is not supported in `trait`s or `impl`s\n+  --> $DIR/default-on-wrong-item-kind.rs:101:5\n+   |\n+LL |     default macro_rules! foo {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: an extern crate cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:107:5\n+   |\n+LL |     default extern crate foo;\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: extern crate is not supported in `trait`s or `impl`s\n+  --> $DIR/default-on-wrong-item-kind.rs:107:5\n+   |\n+LL |     default extern crate foo;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: a `use` import cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:109:5\n+   |\n+LL |     default use foo;\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: `use` import is not supported in `trait`s or `impl`s\n+  --> $DIR/default-on-wrong-item-kind.rs:109:5\n+   |\n+LL |     default use foo;\n+   |     ^^^^^^^^^^^^^^^^\n+\n+error: a static item cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:111:5\n+   |\n+LL |     default static foo: u8;\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: associated `static` items are not allowed\n+  --> $DIR/default-on-wrong-item-kind.rs:111:5\n+   |\n+LL |     default static foo: u8;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: a module cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:115:5\n+   |\n+LL |     default mod foo {}\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: module is not supported in `trait`s or `impl`s\n+  --> $DIR/default-on-wrong-item-kind.rs:115:5\n+   |\n+LL |     default mod foo {}\n+   |     ^^^^^^^^^^^^^^^\n+\n+error: an extern block cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:117:5\n+   |\n+LL |     default extern \"C\" {}\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: extern block is not supported in `trait`s or `impl`s\n+  --> $DIR/default-on-wrong-item-kind.rs:117:5\n+   |\n+LL |     default extern \"C\" {}\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error: an enum cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:120:5\n+   |\n+LL |     default enum foo {}\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: enum is not supported in `trait`s or `impl`s\n+  --> $DIR/default-on-wrong-item-kind.rs:120:5\n+   |\n+LL |     default enum foo {}\n+   |     ^^^^^^^^^^^^^^^^\n+\n+error: a struct cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:122:5\n+   |\n+LL |     default struct foo {}\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: struct is not supported in `trait`s or `impl`s\n+  --> $DIR/default-on-wrong-item-kind.rs:122:5\n+   |\n+LL |     default struct foo {}\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error: a union cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:124:5\n+   |\n+LL |     default union foo {}\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: union is not supported in `trait`s or `impl`s\n+  --> $DIR/default-on-wrong-item-kind.rs:124:5\n+   |\n+LL |     default union foo {}\n+   |     ^^^^^^^^^^^^^^^^^\n+\n+error: a trait cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:126:5\n+   |\n+LL |     default trait foo {}\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: trait is not supported in `trait`s or `impl`s\n+  --> $DIR/default-on-wrong-item-kind.rs:126:5\n+   |\n+LL |     default trait foo {}\n+   |     ^^^^^^^^^^^^^^^^^\n+\n+error: a trait alias cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:128:5\n+   |\n+LL |     default trait foo = Ord;\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: trait alias is not supported in `trait`s or `impl`s\n+  --> $DIR/default-on-wrong-item-kind.rs:128:5\n+   |\n+LL |     default trait foo = Ord;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: implementation is not supported in `trait`s or `impl`s\n+  --> $DIR/default-on-wrong-item-kind.rs:130:5\n+   |\n+LL |     default impl foo {}\n+   |     ^^^^^^^^^^^^^^^^\n+\n+error: an item macro invocation cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:134:5\n+   |\n+LL |     default default!();\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: an item macro invocation cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:135:5\n+   |\n+LL |     default default::foo::bar!();\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: a macro definition cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:136:5\n+   |\n+LL |     default macro foo {}\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: macro definition is not supported in `trait`s or `impl`s\n+  --> $DIR/default-on-wrong-item-kind.rs:136:5\n+   |\n+LL |     default macro foo {}\n+   |     ^^^^^^^^^^^^^^^^^\n+\n+error: a macro definition cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:138:5\n+   |\n+LL |     default macro_rules! foo {}\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: macro definition is not supported in `trait`s or `impl`s\n+  --> $DIR/default-on-wrong-item-kind.rs:138:5\n+   |\n+LL |     default macro_rules! foo {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 95 previous errors\n+"}, {"sha": "168ea3e76f648e785381f15d374e99d3ae0b662b", "filename": "src/test/ui/parser/default-unmatched-assoc.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fdefault-unmatched-assoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fdefault-unmatched-assoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdefault-unmatched-assoc.rs?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -0,0 +1,16 @@\n+fn main() {}\n+\n+trait Foo {\n+    default!(); //~ ERROR cannot find macro `default` in this scope\n+    default do\n+    //~^ ERROR `default` is not followed by an item\n+    //~| ERROR non-item in item list\n+}\n+\n+struct S;\n+impl S {\n+    default!(); //~ ERROR cannot find macro `default` in this scope\n+    default do\n+    //~^ ERROR `default` is not followed by an item\n+    //~| ERROR non-item in item list\n+}"}, {"sha": "c8d1769cb5a2a23f2bf7efcbb47b5612a96ceae9", "filename": "src/test/ui/parser/default-unmatched-assoc.stderr", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fdefault-unmatched-assoc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fdefault-unmatched-assoc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdefault-unmatched-assoc.stderr?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -0,0 +1,54 @@\n+error: `default` is not followed by an item\n+  --> $DIR/default-unmatched-assoc.rs:5:5\n+   |\n+LL |     default do\n+   |     ^^^^^^^ the `default` qualifier\n+   |\n+   = note: only `fn`, `const`, `type`, or `impl` items may be prefixed by `default`\n+\n+error: non-item in item list\n+  --> $DIR/default-unmatched-assoc.rs:5:13\n+   |\n+LL | trait Foo {\n+   |           - item list starts here\n+LL |     default!();\n+LL |     default do\n+   |             ^^ non-item starts here\n+...\n+LL | }\n+   | - item list ends here\n+\n+error: `default` is not followed by an item\n+  --> $DIR/default-unmatched-assoc.rs:13:5\n+   |\n+LL |     default do\n+   |     ^^^^^^^ the `default` qualifier\n+   |\n+   = note: only `fn`, `const`, `type`, or `impl` items may be prefixed by `default`\n+\n+error: non-item in item list\n+  --> $DIR/default-unmatched-assoc.rs:13:13\n+   |\n+LL | impl S {\n+   |        - item list starts here\n+LL |     default!();\n+LL |     default do\n+   |             ^^ non-item starts here\n+...\n+LL | }\n+   | - item list ends here\n+\n+error: cannot find macro `default` in this scope\n+  --> $DIR/default-unmatched-assoc.rs:12:5\n+   |\n+LL |     default!();\n+   |     ^^^^^^^\n+\n+error: cannot find macro `default` in this scope\n+  --> $DIR/default-unmatched-assoc.rs:4:5\n+   |\n+LL |     default!();\n+   |     ^^^^^^^\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "8d0ea590f573fa895490018c81ac3723cb132a98", "filename": "src/test/ui/parser/default-unmatched-extern.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fdefault-unmatched-extern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fdefault-unmatched-extern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdefault-unmatched-extern.rs?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -0,0 +1,8 @@\n+fn main() {}\n+\n+extern \"C\" {\n+    default!(); //~ ERROR cannot find macro `default` in this scope\n+    default do\n+    //~^ ERROR `default` is not followed by an item\n+    //~| ERROR non-item in item list\n+}"}, {"sha": "bb4efd51631e4686d1fed69ece3c895ff4a63db1", "filename": "src/test/ui/parser/default-unmatched-extern.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fdefault-unmatched-extern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fdefault-unmatched-extern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdefault-unmatched-extern.stderr?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -0,0 +1,28 @@\n+error: `default` is not followed by an item\n+  --> $DIR/default-unmatched-extern.rs:5:5\n+   |\n+LL |     default do\n+   |     ^^^^^^^ the `default` qualifier\n+   |\n+   = note: only `fn`, `const`, `type`, or `impl` items may be prefixed by `default`\n+\n+error: non-item in item list\n+  --> $DIR/default-unmatched-extern.rs:5:13\n+   |\n+LL | extern \"C\" {\n+   |            - item list starts here\n+LL |     default!();\n+LL |     default do\n+   |             ^^ non-item starts here\n+...\n+LL | }\n+   | - item list ends here\n+\n+error: cannot find macro `default` in this scope\n+  --> $DIR/default-unmatched-extern.rs:4:5\n+   |\n+LL |     default!();\n+   |     ^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "49346e5c6318d497e0f521197fa833a1f48c5c89", "filename": "src/test/ui/parser/default-unmatched.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fdefault-unmatched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fdefault-unmatched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdefault-unmatched.rs?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -0,0 +1,6 @@\n+mod foo {\n+    default!(); // OK.\n+    default do\n+    //~^ ERROR `default` is not followed by an item\n+    //~| ERROR expected item, found reserved keyword `do`\n+}"}, {"sha": "331e003f63c0f0671bd3ee2bfd2f0d9d8f694e30", "filename": "src/test/ui/parser/default-unmatched.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fdefault-unmatched.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fdefault-unmatched.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdefault-unmatched.stderr?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -0,0 +1,16 @@\n+error: `default` is not followed by an item\n+  --> $DIR/default-unmatched.rs:3:5\n+   |\n+LL |     default do\n+   |     ^^^^^^^ the `default` qualifier\n+   |\n+   = note: only `fn`, `const`, `type`, or `impl` items may be prefixed by `default`\n+\n+error: expected item, found reserved keyword `do`\n+  --> $DIR/default-unmatched.rs:3:13\n+   |\n+LL |     default do\n+   |             ^^ expected item\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "64ba4b5531184bbdf49a71b007bd2fad41c6d245", "filename": "src/test/ui/parser/default.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdefault.rs?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -20,7 +20,8 @@ impl Foo for u16 {\n \n impl Foo for u32 { //~ ERROR not all trait items implemented, missing: `foo`\n     default pub fn foo<T: Default>() -> T { T::default() }\n-    //~^ ERROR missing `fn`, `type`, `const`, or `static` for item declaration\n+    //~^ ERROR `default` is not followed by an item\n+    //~| ERROR non-item in item list\n }\n \n fn main() {}"}, {"sha": "15c49e8b6270b3789e467dc72c784c177e0295f2", "filename": "src/test/ui/parser/default.stderr", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fdefault.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fdefault.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdefault.stderr?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -1,8 +1,21 @@\n-error: missing `fn`, `type`, `const`, or `static` for item declaration\n-  --> $DIR/default.rs:22:12\n+error: `default` is not followed by an item\n+  --> $DIR/default.rs:22:5\n    |\n LL |     default pub fn foo<T: Default>() -> T { T::default() }\n-   |            ^ missing `fn`, `type`, `const`, or `static`\n+   |     ^^^^^^^ the `default` qualifier\n+   |\n+   = note: only `fn`, `const`, `type`, or `impl` items may be prefixed by `default`\n+\n+error: non-item in item list\n+  --> $DIR/default.rs:22:13\n+   |\n+LL | impl Foo for u32 {\n+   |                  - item list starts here\n+LL |     default pub fn foo<T: Default>() -> T { T::default() }\n+   |             ^^^ non-item starts here\n+...\n+LL | }\n+   | - item list ends here\n \n error[E0449]: unnecessary visibility qualifier\n   --> $DIR/default.rs:16:5\n@@ -19,7 +32,7 @@ LL |     fn foo<T: Default>() -> T;\n LL | impl Foo for u32 {\n    | ^^^^^^^^^^^^^^^^ missing `foo` in implementation\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 4 previous errors\n \n Some errors have detailed explanations: E0046, E0449.\n For more information about an error, try `rustc --explain E0046`."}, {"sha": "31318ae3a096c2c1d1a60c0c0d0a6d57bf831a0b", "filename": "src/test/ui/parser/duplicate-visibility.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.rs?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -2,5 +2,6 @@ fn main() {}\n \n extern {\n     pub pub fn foo();\n-    //~^ ERROR missing `fn`, `type`, `const`, or `static` for item declaration\n+    //~^ ERROR visibility `pub` is not followed by an item\n+    //~| ERROR non-item in item list\n }"}, {"sha": "36b9efd9dca6e39327220ffd8f218fb0750cff28", "filename": "src/test/ui/parser/duplicate-visibility.stderr", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.stderr?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -1,8 +1,21 @@\n-error: missing `fn`, `type`, `const`, or `static` for item declaration\n-  --> $DIR/duplicate-visibility.rs:4:8\n+error: visibility `pub` is not followed by an item\n+  --> $DIR/duplicate-visibility.rs:4:5\n    |\n LL |     pub pub fn foo();\n-   |        ^ missing `fn`, `type`, `const`, or `static`\n+   |     ^^^ the visibility\n+   |\n+   = help: you likely meant to define an item, e.g., `pub fn foo() {}`\n+\n+error: non-item in item list\n+  --> $DIR/duplicate-visibility.rs:4:9\n+   |\n+LL | extern {\n+   |        - item list starts here\n+LL |     pub pub fn foo();\n+   |         ^^^ non-item starts here\n+...\n+LL | }\n+   | - item list ends here\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n "}, {"sha": "d9f35e0eb5cfc013d18ca50e4210bf7d4f68ec0a", "filename": "src/test/ui/parser/extern-no-fn.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fextern-no-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fextern-no-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fextern-no-fn.rs?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -1,6 +1,5 @@\n extern {\n-//~^ ERROR missing `fn`, `type`, `const`, or `static` for item declaration\n-    f();\n+    f(); //~ ERROR expected one of `!` or `::`, found `(`\n }\n \n fn main() {"}, {"sha": "0151cb4235b0da8740ac190eb7b983d4df6e7241", "filename": "src/test/ui/parser/extern-no-fn.stderr", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fextern-no-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fextern-no-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fextern-no-fn.stderr?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -1,11 +1,12 @@\n-error: missing `fn`, `type`, `const`, or `static` for item declaration\n-  --> $DIR/extern-no-fn.rs:1:9\n+error: expected one of `!` or `::`, found `(`\n+  --> $DIR/extern-no-fn.rs:2:6\n    |\n-LL |   extern {\n-   |  _________^\n-LL | |\n-LL | |     f();\n-   | |____^ missing `fn`, `type`, `const`, or `static`\n+LL | extern {\n+   |        - while parsing this item list starting here\n+LL |     f();\n+   |      ^ expected one of `!` or `::`\n+LL | }\n+   | - the item list ends here\n \n error: aborting due to previous error\n "}, {"sha": "82978e655ba38b73f73aef57e779178e5be94660", "filename": "src/test/ui/parser/foreign-const-semantic-fail.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fforeign-const-semantic-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fforeign-const-semantic-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fforeign-const-semantic-fail.rs?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -5,4 +5,5 @@ extern {\n     //~^ ERROR extern items cannot be `const`\n     const B: isize = 42;\n     //~^ ERROR extern items cannot be `const`\n+    //~| ERROR incorrect `static` inside `extern` block\n }"}, {"sha": "f529b3ad87b2f9b8e56202f04d0faef8e08a99cc", "filename": "src/test/ui/parser/foreign-const-semantic-fail.stderr", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fforeign-const-semantic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fforeign-const-semantic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fforeign-const-semantic-fail.stderr?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -18,5 +18,18 @@ LL |     const B: isize = 42;\n    |\n    = note: for more information, visit https://doc.rust-lang.org/std/keyword.extern.html\n \n-error: aborting due to 2 previous errors\n+error: incorrect `static` inside `extern` block\n+  --> $DIR/foreign-const-semantic-fail.rs:6:11\n+   |\n+LL | extern {\n+   | ------ `extern` blocks define existing foreign statics and statics inside of them cannot have a body\n+...\n+LL |     const B: isize = 42;\n+   |           ^          -- the invalid body\n+   |           |\n+   |           cannot have a body\n+   |\n+   = note: for more information, visit https://doc.rust-lang.org/std/keyword.extern.html\n+\n+error: aborting due to 3 previous errors\n "}, {"sha": "80ce8885570786145d8c9218dcc7a171672d0d36", "filename": "src/test/ui/parser/impl-parsing.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fimpl-parsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fimpl-parsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fimpl-parsing.rs?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -6,4 +6,5 @@ impl Trait .. {} //~ ERROR missing `for` in a trait impl\n impl ?Sized for Type {} //~ ERROR expected a trait, found type\n impl ?Sized for .. {} //~ ERROR expected a trait, found type\n \n-default unsafe FAIL //~ ERROR expected `impl`, found `FAIL`\n+default unsafe FAIL //~ ERROR expected item, found keyword `unsafe`\n+//~^ ERROR `default` is not followed by an item"}, {"sha": "755addf14527a8a63922081e9af554b75873b533", "filename": "src/test/ui/parser/impl-parsing.stderr", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fimpl-parsing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fimpl-parsing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fimpl-parsing.stderr?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -22,11 +22,19 @@ error: expected a trait, found type\n LL | impl ?Sized for .. {}\n    |      ^^^^^^\n \n-error: expected `impl`, found `FAIL`\n-  --> $DIR/impl-parsing.rs:9:16\n+error: `default` is not followed by an item\n+  --> $DIR/impl-parsing.rs:9:1\n    |\n LL | default unsafe FAIL\n-   |                ^^^^ expected `impl`\n+   | ^^^^^^^ the `default` qualifier\n+   |\n+   = note: only `fn`, `const`, `type`, or `impl` items may be prefixed by `default`\n+\n+error: expected item, found keyword `unsafe`\n+  --> $DIR/impl-parsing.rs:9:9\n+   |\n+LL | default unsafe FAIL\n+   |         ^^^^^^ expected item\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 6 previous errors\n "}, {"sha": "46eb320a172f2f89edb7a97706e6afea4b15fc32", "filename": "src/test/ui/parser/issue-19398.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fissue-19398.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fissue-19398.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-19398.rs?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -1,6 +1,6 @@\n trait T {\n-    //~^ ERROR missing `fn`, `type`, `const`, or `static` for item declaration\n     extern \"Rust\" unsafe fn foo();\n+    //~^ ERROR expected `{`, found keyword `unsafe`\n }\n \n fn main() {}"}, {"sha": "1da00960adfe4cc59c1939e408acf217605d397b", "filename": "src/test/ui/parser/issue-19398.stderr", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fissue-19398.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fissue-19398.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-19398.stderr?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -1,11 +1,13 @@\n-error: missing `fn`, `type`, `const`, or `static` for item declaration\n-  --> $DIR/issue-19398.rs:1:10\n+error: expected `{`, found keyword `unsafe`\n+  --> $DIR/issue-19398.rs:2:19\n    |\n-LL |   trait T {\n-   |  __________^\n-LL | |\n-LL | |     extern \"Rust\" unsafe fn foo();\n-   | |____^ missing `fn`, `type`, `const`, or `static`\n+LL | trait T {\n+   |         - while parsing this item list starting here\n+LL |     extern \"Rust\" unsafe fn foo();\n+   |                   ^^^^^^ expected `{`\n+LL |\n+LL | }\n+   | - the item list ends here\n \n error: aborting due to previous error\n "}, {"sha": "12b18bbc59416a7ad6cd22964694f2346a25cb80", "filename": "src/test/ui/parser/issue-20711-2.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fissue-20711-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fissue-20711-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-20711-2.stderr?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -1,8 +1,14 @@\n error: expected item after attributes\n   --> $DIR/issue-20711-2.rs:6:5\n    |\n+LL | impl Foo {\n+   |          - while parsing this item list starting here\n+...\n LL |     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |\n+LL | }\n+   | - the item list ends here\n \n error: aborting due to previous error\n "}, {"sha": "4af4b22bee292e499d508c1fb2f478122ccb1ad3", "filename": "src/test/ui/parser/issue-20711.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fissue-20711.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fissue-20711.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-20711.stderr?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -1,8 +1,13 @@\n error: expected item after attributes\n   --> $DIR/issue-20711.rs:4:5\n    |\n+LL | impl Foo {\n+   |          - while parsing this item list starting here\n LL |     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |\n+LL | }\n+   | - the item list ends here\n \n error: aborting due to previous error\n "}, {"sha": "bf5fdb1f3c6b048195b1e2d76f9e733c8bec0d89", "filename": "src/test/ui/parser/issue-21153.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fissue-21153.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fissue-21153.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-21153.rs?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -1,6 +1,6 @@\n trait MyTrait<T>: Iterator {\n-    //~^ ERROR missing `fn`, `type`, `const`, or `static` for item declaration\n     Item = T;\n+    //~^ ERROR expected one of `!` or `::`, found `=`\n }\n \n fn main() {}"}, {"sha": "cbfa9ded3c3939ec4096242b235f6ac06a67ce70", "filename": "src/test/ui/parser/issue-21153.stderr", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fissue-21153.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fissue-21153.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-21153.stderr?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -1,11 +1,13 @@\n-error: missing `fn`, `type`, `const`, or `static` for item declaration\n-  --> $DIR/issue-21153.rs:1:29\n+error: expected one of `!` or `::`, found `=`\n+  --> $DIR/issue-21153.rs:2:10\n    |\n-LL |   trait MyTrait<T>: Iterator {\n-   |  _____________________________^\n-LL | |\n-LL | |     Item = T;\n-   | |____^ missing `fn`, `type`, `const`, or `static`\n+LL | trait MyTrait<T>: Iterator {\n+   |                            - while parsing this item list starting here\n+LL |     Item = T;\n+   |          ^ expected one of `!` or `::`\n+LL |\n+LL | }\n+   | - the item list ends here\n \n error: aborting due to previous error\n "}, {"sha": "7515369aaa0b9da6262dae51a4beeb8c154c1feb", "filename": "src/test/ui/parser/issue-32446.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fissue-32446.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fissue-32446.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-32446.stderr?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -1,8 +1,11 @@\n-error: expected one of `async`, `const`, `crate`, `default`, `extern`, `fn`, `pub`, `static`, `type`, `unsafe`, `}`, or identifier, found `...`\n+error: non-item in item list\n   --> $DIR/issue-32446.rs:4:11\n    |\n LL | trait T { ... }\n-   |           ^^^ expected one of 12 possible tokens\n+   |         - ^^^ - item list ends here\n+   |         | |\n+   |         | non-item starts here\n+   |         item list starts here\n \n error: aborting due to previous error\n "}, {"sha": "5a7488e6ffcb464ef39260dd1be65aae948508ae", "filename": "src/test/ui/parser/issue-41155.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fissue-41155.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fissue-41155.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-41155.rs?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -1,7 +1,7 @@\n struct S;\n \n impl S {\n-    pub\n-} //~ ERROR expected one of\n+    pub //~ ERROR visibility `pub` is not followed by an item\n+} //~ ERROR non-item in item list\n \n fn main() {}"}, {"sha": "8491afae2300498b447cdf494c6ab7716dde2011", "filename": "src/test/ui/parser/issue-41155.stderr", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fissue-41155.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fissue-41155.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-41155.stderr?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -1,10 +1,22 @@\n-error: expected one of `(`, `async`, `const`, `default`, `extern`, `fn`, `static`, `type`, `unsafe`, or identifier, found `}`\n+error: visibility `pub` is not followed by an item\n+  --> $DIR/issue-41155.rs:4:5\n+   |\n+LL |     pub\n+   |     ^^^ the visibility\n+   |\n+   = help: you likely meant to define an item, e.g., `pub fn foo() {}`\n+\n+error: non-item in item list\n   --> $DIR/issue-41155.rs:5:1\n    |\n+LL | impl S {\n+   |        - item list starts here\n LL |     pub\n-   |        - expected one of 10 possible tokens\n LL | }\n-   | ^ unexpected token\n+   | ^\n+   | |\n+   | non-item starts here\n+   | item list ends here\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n "}, {"sha": "48a679b2d098dd9d561ecee33b4d1af0ecb2ef33", "filename": "src/test/ui/parser/issue-48137-macros-cannot-interpolate-impl-items-bad-variants.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fissue-48137-macros-cannot-interpolate-impl-items-bad-variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fissue-48137-macros-cannot-interpolate-impl-items-bad-variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-48137-macros-cannot-interpolate-impl-items-bad-variants.rs?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -0,0 +1,44 @@\n+fn main() {}\n+\n+macro_rules! expand_to_enum {\n+    () => {\n+        enum BadE {}\n+        //~^ ERROR enum is not supported in `trait`s or `impl`s\n+        //~| ERROR enum is not supported in `trait`s or `impl`s\n+        //~| ERROR enum is not supported in `extern` blocks\n+    };\n+}\n+\n+macro_rules! mac_impl {\n+    ($($i:item)*) => {\n+        struct S;\n+        impl S { $($i)* }\n+    }\n+}\n+\n+mac_impl! {\n+    struct BadS; //~ ERROR struct is not supported in `trait`s or `impl`s\n+    expand_to_enum!();\n+}\n+\n+macro_rules! mac_trait {\n+    ($($i:item)*) => {\n+        trait T { $($i)* }\n+    }\n+}\n+\n+mac_trait! {\n+    struct BadS; //~ ERROR struct is not supported in `trait`s or `impl`s\n+    expand_to_enum!();\n+}\n+\n+macro_rules! mac_extern {\n+    ($($i:item)*) => {\n+        extern \"C\" { $($i)* }\n+    }\n+}\n+\n+mac_extern! {\n+    struct BadS; //~ ERROR struct is not supported in `extern` blocks\n+    expand_to_enum!();\n+}"}, {"sha": "bfd27a1a41e13390c0afd53a7808736595bea280", "filename": "src/test/ui/parser/issue-48137-macros-cannot-interpolate-impl-items-bad-variants.stderr", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fissue-48137-macros-cannot-interpolate-impl-items-bad-variants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fissue-48137-macros-cannot-interpolate-impl-items-bad-variants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-48137-macros-cannot-interpolate-impl-items-bad-variants.stderr?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -0,0 +1,53 @@\n+error: struct is not supported in `trait`s or `impl`s\n+  --> $DIR/issue-48137-macros-cannot-interpolate-impl-items-bad-variants.rs:20:5\n+   |\n+LL |     struct BadS;\n+   |     ^^^^^^^^^^^^\n+\n+error: enum is not supported in `trait`s or `impl`s\n+  --> $DIR/issue-48137-macros-cannot-interpolate-impl-items-bad-variants.rs:5:9\n+   |\n+LL |         enum BadE {}\n+   |         ^^^^^^^^^\n+...\n+LL |     expand_to_enum!();\n+   |     ------------------ in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: struct is not supported in `trait`s or `impl`s\n+  --> $DIR/issue-48137-macros-cannot-interpolate-impl-items-bad-variants.rs:31:5\n+   |\n+LL |     struct BadS;\n+   |     ^^^^^^^^^^^^\n+\n+error: enum is not supported in `trait`s or `impl`s\n+  --> $DIR/issue-48137-macros-cannot-interpolate-impl-items-bad-variants.rs:5:9\n+   |\n+LL |         enum BadE {}\n+   |         ^^^^^^^^^\n+...\n+LL |     expand_to_enum!();\n+   |     ------------------ in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: struct is not supported in `extern` blocks\n+  --> $DIR/issue-48137-macros-cannot-interpolate-impl-items-bad-variants.rs:42:5\n+   |\n+LL |     struct BadS;\n+   |     ^^^^^^^^^^^^\n+\n+error: enum is not supported in `extern` blocks\n+  --> $DIR/issue-48137-macros-cannot-interpolate-impl-items-bad-variants.rs:5:9\n+   |\n+LL |         enum BadE {}\n+   |         ^^^^^^^^^\n+...\n+LL |     expand_to_enum!();\n+   |     ------------------ in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "8592f8a728715d5836d9d65e186d8802dfcb306c", "filename": "src/test/ui/parser/issue-48137-macros-cannot-interpolate-impl-items.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fissue-48137-macros-cannot-interpolate-impl-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fissue-48137-macros-cannot-interpolate-impl-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-48137-macros-cannot-interpolate-impl-items.rs?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -0,0 +1,34 @@\n+// check-pass\n+\n+fn main() {}\n+\n+macro_rules! mac_impl {\n+    ($i:item) => {\n+        struct S;\n+        impl S { $i }\n+    }\n+}\n+\n+mac_impl! {\n+    fn foo() {}\n+}\n+\n+macro_rules! mac_trait {\n+    ($i:item) => {\n+        trait T { $i }\n+    }\n+}\n+\n+mac_trait! {\n+    fn foo() {}\n+}\n+\n+macro_rules! mac_extern {\n+    ($i:item) => {\n+        extern \"C\" { $i }\n+    }\n+}\n+\n+mac_extern! {\n+    fn foo();\n+}"}, {"sha": "a98042089466435485cbb380bd2fac82386d16d6", "filename": "src/test/ui/parser/issue-6610.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fissue-6610.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fissue-6610.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-6610.stderr?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -2,7 +2,11 @@ error: expected `;` or `{`, found `}`\n   --> $DIR/issue-6610.rs:1:20\n    |\n LL | trait Foo { fn a() }\n-   |                    ^ expected `;` or `{`\n+   |           -        ^\n+   |           |        |\n+   |           |        expected `;` or `{`\n+   |           |        the item list ends here\n+   |           while parsing this item list starting here\n \n error: aborting due to previous error\n "}, {"sha": "97fb564bf647958f7d37926e23d388a7beecc84f", "filename": "src/test/ui/parser/macro/trait-non-item-macros.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-non-item-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-non-item-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-non-item-macros.rs?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -1,10 +1,13 @@\n macro_rules! bah {\n-    ($a:expr) => ($a)\n-    //~^ ERROR expected one of `async`\n+    ($a:expr) => {\n+        $a\n+    }; //~^ ERROR macro expansion ignores token `2` and any following\n }\n \n-trait bar {\n+trait Bar {\n     bah!(2);\n }\n \n-fn main() {}\n+fn main() {\n+    let _recovery_witness: () = 0; //~ ERROR mismatched types\n+}"}, {"sha": "35e5bfe62f5b4da8bcea1d83fe19e1990db184f0", "filename": "src/test/ui/parser/macro/trait-non-item-macros.stderr", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-non-item-macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-non-item-macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-non-item-macros.stderr?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -1,13 +1,22 @@\n-error: expected one of `async`, `const`, `crate`, `default`, `extern`, `fn`, `pub`, `static`, `type`, `unsafe`, or identifier, found `2`\n-  --> $DIR/trait-non-item-macros.rs:2:19\n+error: macro expansion ignores token `2` and any following\n+  --> $DIR/trait-non-item-macros.rs:3:9\n    |\n-LL |     ($a:expr) => ($a)\n-   |                   ^^ expected one of 11 possible tokens\n+LL |         $a\n+   |         ^^\n ...\n LL |     bah!(2);\n-   |     -------- in this macro invocation\n+   |     -------- caused by the macro expansion here\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: the usage of `bah!` is likely invalid in trait item context\n \n-error: aborting due to previous error\n+error[E0308]: mismatched types\n+  --> $DIR/trait-non-item-macros.rs:12:33\n+   |\n+LL |     let _recovery_witness: () = 0;\n+   |                            --   ^ expected `()`, found integer\n+   |                            |\n+   |                            expected due to this\n+\n+error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "8f46970b1af4dc422966c3eb4ac22431db260367", "filename": "src/test/ui/parser/mismatched-braces/missing-close-brace-in-impl-trait.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-impl-trait.rs?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -3,12 +3,11 @@ fn main() {}\n impl T for () { //~ ERROR cannot find trait `T` in this scope\n \n fn foo(&self) {}\n-//~^ ERROR missing `fn`, `type`, `const`, or `static` for item declaration\n \n-trait T {\n+trait T { //~ ERROR trait is not supported in `trait`s or `impl`s\n     fn foo(&self);\n }\n \n-pub(crate) struct Bar<T>();\n+pub(crate) struct Bar<T>(); //~ ERROR struct is not supported in `trait`s or `impl`s\n \n //~ ERROR this file contains an unclosed delimiter"}, {"sha": "1655a96839569d0be255a04dec9cfab9853e65a4", "filename": "src/test/ui/parser/mismatched-braces/missing-close-brace-in-impl-trait.stderr", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-impl-trait.stderr?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -1,28 +1,30 @@\n error: this file contains an unclosed delimiter\n-  --> $DIR/missing-close-brace-in-impl-trait.rs:14:52\n+  --> $DIR/missing-close-brace-in-impl-trait.rs:13:52\n    |\n LL | impl T for () {\n    |               - unclosed delimiter\n ...\n LL |\n    |                                                    ^\n \n-error: missing `fn`, `type`, `const`, or `static` for item declaration\n-  --> $DIR/missing-close-brace-in-impl-trait.rs:5:17\n+error: trait is not supported in `trait`s or `impl`s\n+  --> $DIR/missing-close-brace-in-impl-trait.rs:7:1\n    |\n-LL |   fn foo(&self) {}\n-   |  _________________^\n-LL | |\n-LL | |\n-LL | | trait T {\n-   | |_ missing `fn`, `type`, `const`, or `static`\n+LL | trait T {\n+   | ^^^^^^^\n+\n+error: struct is not supported in `trait`s or `impl`s\n+  --> $DIR/missing-close-brace-in-impl-trait.rs:11:1\n+   |\n+LL | pub(crate) struct Bar<T>();\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0405]: cannot find trait `T` in this scope\n   --> $DIR/missing-close-brace-in-impl-trait.rs:3:6\n    |\n LL | impl T for () {\n    |      ^ not found in this scope\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0405`."}, {"sha": "b6932deb5c0a684f7b97e263e8521f34789462d0", "filename": "src/test/ui/parser/mismatched-braces/missing-close-brace-in-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-trait.rs?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -1,11 +1,11 @@\n trait T {\n-//~^ ERROR `main` function not found in crate `missing_close_brace_in_trait`\n     fn foo(&self);\n \n pub(crate) struct Bar<T>();\n-//~^ ERROR missing `fn`, `type`, `const`, or `static` for item declaration\n+//~^ ERROR struct is not supported in `trait`s or `impl`s\n \n impl T for Bar<usize> {\n+//~^ ERROR implementation is not supported in `trait`s or `impl`s\n fn foo(&self) {}\n }\n "}, {"sha": "43a3883357a754112636611e79d0fccc42c898dd", "filename": "src/test/ui/parser/mismatched-braces/missing-close-brace-in-trait.stderr", "status": "modified", "additions": 7, "deletions": 14, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-trait.stderr?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -7,24 +7,17 @@ LL | trait T {\n LL | fn main() {}\n    |                                                                 ^\n \n-error: missing `fn`, `type`, `const`, or `static` for item declaration\n-  --> $DIR/missing-close-brace-in-trait.rs:5:11\n+error: struct is not supported in `trait`s or `impl`s\n+  --> $DIR/missing-close-brace-in-trait.rs:4:1\n    |\n LL | pub(crate) struct Bar<T>();\n-   |           ^ missing `fn`, `type`, `const`, or `static`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0601]: `main` function not found in crate `missing_close_brace_in_trait`\n-  --> $DIR/missing-close-brace-in-trait.rs:1:1\n+error: implementation is not supported in `trait`s or `impl`s\n+  --> $DIR/missing-close-brace-in-trait.rs:7:1\n    |\n-LL | / trait T {\n-LL | |\n-LL | |     fn foo(&self);\n-LL | |\n-...  |\n-LL | |\n-LL | | fn main() {}\n-   | |________________________________________________________________^ consider adding a `main` function to `$DIR/missing-close-brace-in-trait.rs`\n+LL | impl T for Bar<usize> {\n+   | ^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0601`."}, {"sha": "04e34dc16a84209f06e2cd9ec5abfef665fabdce", "filename": "src/test/ui/parser/removed-syntax-static-fn.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-static-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-static-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-static-fn.stderr?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -7,8 +7,13 @@ LL |     static fn f() {}\n error: expected one of `:`, `;`, or `=`, found `f`\n   --> $DIR/removed-syntax-static-fn.rs:4:15\n    |\n+LL | impl S {\n+   |        - while parsing this item list starting here\n LL |     static fn f() {}\n    |               ^ expected one of `:`, `;`, or `=`\n+...\n+LL | }\n+   | - the item list ends here\n \n error: missing type for `static` item\n   --> $DIR/removed-syntax-static-fn.rs:4:12"}, {"sha": "6bb946d5b647095b518e539efb86c504763d93cb", "filename": "src/test/ui/parser/trait-item-with-defaultness-fail-semantic.stderr", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Ftrait-item-with-defaultness-fail-semantic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fparser%2Ftrait-item-with-defaultness-fail-semantic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-item-with-defaultness-fail-semantic.stderr?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -2,37 +2,49 @@ error: `default` is only allowed on items in `impl` definitions\n   --> $DIR/trait-item-with-defaultness-fail-semantic.rs:6:5\n    |\n LL |     default const A: u8;\n-   |     ^^^^^^^^^^^^^^^^^^^^\n+   |     -------^^^^^^^^^^^^^\n+   |     |\n+   |     `default` because of this\n \n error: `default` is only allowed on items in `impl` definitions\n   --> $DIR/trait-item-with-defaultness-fail-semantic.rs:7:5\n    |\n LL |     default const B: u8 = 0;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     -------^^^^^^^^^^^^^^^^^\n+   |     |\n+   |     `default` because of this\n \n error: `default` is only allowed on items in `impl` definitions\n   --> $DIR/trait-item-with-defaultness-fail-semantic.rs:8:5\n    |\n LL |     default type D;\n-   |     ^^^^^^^^^^^^^^^\n+   |     -------^^^^^^^^\n+   |     |\n+   |     `default` because of this\n \n error: `default` is only allowed on items in `impl` definitions\n   --> $DIR/trait-item-with-defaultness-fail-semantic.rs:9:5\n    |\n LL |     default type C: Ord;\n-   |     ^^^^^^^^^^^^^^^^^^^^\n+   |     -------^^^^^^^^^^^^^\n+   |     |\n+   |     `default` because of this\n \n error: `default` is only allowed on items in `impl` definitions\n   --> $DIR/trait-item-with-defaultness-fail-semantic.rs:10:5\n    |\n LL |     default fn f1();\n-   |     ^^^^^^^^^^^^^^^^\n+   |     -------^^^^^^^^^\n+   |     |\n+   |     `default` because of this\n \n error: `default` is only allowed on items in `impl` definitions\n   --> $DIR/trait-item-with-defaultness-fail-semantic.rs:11:5\n    |\n LL |     default fn f2() {}\n-   |     ^^^^^^^^^^^^^^^^^^\n+   |     -------^^^^^^^^\n+   |     |\n+   |     `default` because of this\n \n error: aborting due to 6 previous errors\n "}, {"sha": "fc1aeae2b0cf46caffcad8bae443ca218ef0a758", "filename": "src/test/ui/pub/pub-restricted-error-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-error-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-error-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-error-fn.rs?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -1,2 +1,2 @@\n-pub(crate) () fn foo() {} //~ unmatched visibility\n+pub(crate) () fn foo() {} //~ ERROR visibility `pub(crate)` is not followed by an item\n //~^ ERROR expected item, found `(`"}, {"sha": "0511a821a7afdae36acadfcb6c52ceca8cd8a8d7", "filename": "src/test/ui/pub/pub-restricted-error-fn.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-error-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-error-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-error-fn.stderr?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -1,8 +1,8 @@\n-error: unmatched visibility `pub(crate)`\n+error: visibility `pub(crate)` is not followed by an item\n   --> $DIR/pub-restricted-error-fn.rs:1:1\n    |\n LL | pub(crate) () fn foo() {}\n-   | ^^^^^^^^^^ the unmatched visibility\n+   | ^^^^^^^^^^ the visibility\n    |\n    = help: you likely meant to define an item, e.g., `pub(crate) fn foo() {}`\n "}, {"sha": "26b3f1ec4149118ff12904b40c4feec30dff4af4", "filename": "src/test/ui/specialization/defaultimpl/validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fvalidation.rs?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -4,7 +4,7 @@\n struct S;\n struct Z;\n \n-default impl S {} //~ ERROR inherent impls cannot be default\n+default impl S {} //~ ERROR inherent impls cannot be `default`\n \n default unsafe impl Send for S {} //~ ERROR impls of auto traits cannot be default\n default impl !Send for Z {} //~ ERROR impls of auto traits cannot be default"}, {"sha": "03b1ef69ca0725c0016d4f5f13861a44d5586598", "filename": "src/test/ui/specialization/defaultimpl/validation.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fvalidation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79cd224e758f603898b64308e849fbb9be6e6f4d/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fvalidation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fvalidation.stderr?ref=79cd224e758f603898b64308e849fbb9be6e6f4d", "patch": "@@ -1,10 +1,12 @@\n-error: inherent impls cannot be default\n+error: inherent impls cannot be `default`\n   --> $DIR/validation.rs:7:1\n    |\n LL | default impl S {}\n-   | ^^^^^^^^^^^^^^^^^\n+   | -------^^^^^^^\n+   | |\n+   | `default` because of this\n    |\n-   = note: only trait implementations may be annotated with default\n+   = note: only trait implementations may be annotated with `default`\n \n error: impls of auto traits cannot be default\n   --> $DIR/validation.rs:9:1"}]}