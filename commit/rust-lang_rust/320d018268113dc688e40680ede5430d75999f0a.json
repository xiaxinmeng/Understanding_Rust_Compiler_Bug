{"sha": "320d018268113dc688e40680ede5430d75999f0a", "node_id": "C_kwDOAAsO6NoAKDMyMGQwMTgyNjgxMTNkYzY4OGU0MDY4MGVkZTU0MzBkNzU5OTlmMGE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-09T21:31:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-09T21:31:57Z"}, "message": "Rollup merge of #105468 - sunfishcode:sunfishcode/main-void-wasi, r=estebank\n\nMangle \"main\" as \"__main_void\" on wasm32-wasi\n\nOn wasm, the age-old C trick of having a main function which can either have no arguments or argc+argv doesn't work, because wasm requires caller and callee signatures to match. WASI's current strategy is to have compilers mangle main's name to indicate which signature they're using. Rust uses the no-argument form, which should be mangled as `__main_void`.\n\nThis is needed on wasm32-wasi as of #105395.", "tree": {"sha": "d6abc7b232e50d62282f4051e39592b45c622b77", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6abc7b232e50d62282f4051e39592b45c622b77"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/320d018268113dc688e40680ede5430d75999f0a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjk6lNCRBK7hj4Ov3rIwAALFwIACGhKtk2/L9gy8ff1nPy2Us0\nNLnmS4qrMXrrIHmlN3w4/u3EZyQfcXWzm5x5iOHAR/+MbYOivSDOU1HxfNrLezBN\nb5/3y+JOJTaJBhnBt53d+XjrxtoK/283P4S5dv4a3iG3u0IPBFDeX74LN517GAg3\njRTVirXmBxGzi+1aE6VNjORH9chHO0T5IEgUnQvyUOoTJe668P+LEkR14UB3kWAS\nMkK2iuKxFpqp6lvzi+Qh+pCXd7CGD1AOQrqyLCBrBIw8Jc0F3RapjGarIhDKXm/c\nmfniq1CJVdhKSC+dWMGVJBVPMWdQHidEfM5cFxyE+hfBWwy0oVBHz6JSUnLOiGk=\n=xUQI\n-----END PGP SIGNATURE-----\n", "payload": "tree d6abc7b232e50d62282f4051e39592b45c622b77\nparent 5156fbdc74cbf9902a96bafd27775f4764d5bfde\nparent 98ae83daae67e9e7663b8345eced1de8c667271f\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1670621517 +0100\ncommitter GitHub <noreply@github.com> 1670621517 +0100\n\nRollup merge of #105468 - sunfishcode:sunfishcode/main-void-wasi, r=estebank\n\nMangle \"main\" as \"__main_void\" on wasm32-wasi\n\nOn wasm, the age-old C trick of having a main function which can either have no arguments or argc+argv doesn't work, because wasm requires caller and callee signatures to match. WASI's current strategy is to have compilers mangle main's name to indicate which signature they're using. Rust uses the no-argument form, which should be mangled as `__main_void`.\n\nThis is needed on wasm32-wasi as of #105395.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/320d018268113dc688e40680ede5430d75999f0a", "html_url": "https://github.com/rust-lang/rust/commit/320d018268113dc688e40680ede5430d75999f0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/320d018268113dc688e40680ede5430d75999f0a/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5156fbdc74cbf9902a96bafd27775f4764d5bfde", "url": "https://api.github.com/repos/rust-lang/rust/commits/5156fbdc74cbf9902a96bafd27775f4764d5bfde", "html_url": "https://github.com/rust-lang/rust/commit/5156fbdc74cbf9902a96bafd27775f4764d5bfde"}, {"sha": "98ae83daae67e9e7663b8345eced1de8c667271f", "url": "https://api.github.com/repos/rust-lang/rust/commits/98ae83daae67e9e7663b8345eced1de8c667271f", "html_url": "https://github.com/rust-lang/rust/commit/98ae83daae67e9e7663b8345eced1de8c667271f"}], "stats": {"total": 4, "additions": 4, "deletions": 0}, "files": [{"sha": "a0476d542e6424a1fb3ba2593dd88c3fcc406cf4", "filename": "compiler/rustc_target/src/spec/wasm32_wasi.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/320d018268113dc688e40680ede5430d75999f0a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_wasi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/320d018268113dc688e40680ede5430d75999f0a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_wasi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_wasi.rs?ref=320d018268113dc688e40680ede5430d75999f0a", "patch": "@@ -104,6 +104,10 @@ pub fn target() -> Target {\n     // `args::args()` makes the WASI API calls itself.\n     options.main_needs_argc_argv = false;\n \n+    // And, WASI mangles the name of \"main\" to distinguish between different\n+    // signatures.\n+    options.entry_name = \"__main_void\".into();\n+\n     Target {\n         llvm_target: \"wasm32-wasi\".into(),\n         pointer_width: 32,"}]}