{"sha": "ee1586c1ed058ff0f090b552d52fe6bbe2dd7f7f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlMTU4NmMxZWQwNThmZjBmMDkwYjU1MmQ1MmZlNmJiZTJkZDdmN2Y=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-07-27T19:46:25Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-08-11T12:09:08Z"}, "message": "Better naming", "tree": {"sha": "8cb1dc2bb49f8607b6346eee6ab2d27b7e0f5654", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8cb1dc2bb49f8607b6346eee6ab2d27b7e0f5654"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee1586c1ed058ff0f090b552d52fe6bbe2dd7f7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee1586c1ed058ff0f090b552d52fe6bbe2dd7f7f", "html_url": "https://github.com/rust-lang/rust/commit/ee1586c1ed058ff0f090b552d52fe6bbe2dd7f7f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee1586c1ed058ff0f090b552d52fe6bbe2dd7f7f/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a61f2445cba2a48bb7ea6c8477e3198b297f3c67", "url": "https://api.github.com/repos/rust-lang/rust/commits/a61f2445cba2a48bb7ea6c8477e3198b297f3c67", "html_url": "https://github.com/rust-lang/rust/commit/a61f2445cba2a48bb7ea6c8477e3198b297f3c67"}], "stats": {"total": 105, "additions": 57, "deletions": 48}, "files": [{"sha": "1c5dc3d5102ffedd296236c0accd2e7e516f3498", "filename": "crates/ra_hir/src/semantics.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ee1586c1ed058ff0f090b552d52fe6bbe2dd7f7f/crates%2Fra_hir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee1586c1ed058ff0f090b552d52fe6bbe2dd7f7f/crates%2Fra_hir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsemantics.rs?ref=ee1586c1ed058ff0f090b552d52fe6bbe2dd7f7f", "patch": "@@ -145,6 +145,10 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n         self.imp.original_range(node)\n     }\n \n+    pub fn diagnostics_fix_range(&self, diagnostics: &dyn Diagnostic) -> FileRange {\n+        self.imp.diagnostics_fix_range(diagnostics)\n+    }\n+\n     pub fn diagnostics_range(&self, diagnostics: &dyn Diagnostic) -> FileRange {\n         self.imp.diagnostics_range(diagnostics)\n     }\n@@ -376,6 +380,13 @@ impl<'db> SemanticsImpl<'db> {\n         original_range(self.db, node.as_ref())\n     }\n \n+    fn diagnostics_fix_range(&self, diagnostics: &dyn Diagnostic) -> FileRange {\n+        let src = diagnostics.fix_source();\n+        let root = self.db.parse_or_expand(src.file_id).unwrap();\n+        let node = src.value.to_node(&root);\n+        original_range(self.db, src.with_value(&node))\n+    }\n+\n     fn diagnostics_range(&self, diagnostics: &dyn Diagnostic) -> FileRange {\n         let src = diagnostics.source();\n         let root = self.db.parse_or_expand(src.file_id).unwrap();"}, {"sha": "e532695895e731dba6daafe5b6263c8985d8a7e5", "filename": "crates/ra_hir_def/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee1586c1ed058ff0f090b552d52fe6bbe2dd7f7f/crates%2Fra_hir_def%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee1586c1ed058ff0f090b552d52fe6bbe2dd7f7f/crates%2Fra_hir_def%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdiagnostics.rs?ref=ee1586c1ed058ff0f090b552d52fe6bbe2dd7f7f", "patch": "@@ -18,7 +18,7 @@ impl Diagnostic for UnresolvedModule {\n     fn message(&self) -> String {\n         \"unresolved module\".to_string()\n     }\n-    fn source(&self) -> InFile<SyntaxNodePtr> {\n+    fn fix_source(&self) -> InFile<SyntaxNodePtr> {\n         InFile::new(self.file, self.decl.clone().into())\n     }\n     fn as_any(&self) -> &(dyn Any + Send + 'static) {"}, {"sha": "074a8c45e85966670273c1aa12c4ace99d011bb7", "filename": "crates/ra_hir_expand/src/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ee1586c1ed058ff0f090b552d52fe6bbe2dd7f7f/crates%2Fra_hir_expand%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee1586c1ed058ff0f090b552d52fe6bbe2dd7f7f/crates%2Fra_hir_expand%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fdiagnostics.rs?ref=ee1586c1ed058ff0f090b552d52fe6bbe2dd7f7f", "patch": "@@ -22,9 +22,9 @@ use crate::{db::AstDatabase, InFile};\n \n pub trait Diagnostic: Any + Send + Sync + fmt::Debug + 'static {\n     fn message(&self) -> String;\n-    fn source(&self) -> InFile<SyntaxNodePtr>;\n-    fn highlighting_source(&self) -> InFile<SyntaxNodePtr> {\n-        self.source()\n+    fn fix_source(&self) -> InFile<SyntaxNodePtr>;\n+    fn source(&self) -> InFile<SyntaxNodePtr> {\n+        self.fix_source()\n     }\n     fn as_any(&self) -> &(dyn Any + Send + 'static);\n     fn is_experimental(&self) -> bool {"}, {"sha": "a4cede81dc704348e4491d9d2d407404bab122a4", "filename": "crates/ra_hir_ty/src/diagnostics.rs", "status": "modified", "additions": 25, "deletions": 30, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/ee1586c1ed058ff0f090b552d52fe6bbe2dd7f7f/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee1586c1ed058ff0f090b552d52fe6bbe2dd7f7f/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs?ref=ee1586c1ed058ff0f090b552d52fe6bbe2dd7f7f", "patch": "@@ -37,7 +37,7 @@ impl Diagnostic for NoSuchField {\n         \"no such field\".to_string()\n     }\n \n-    fn source(&self) -> InFile<SyntaxNodePtr> {\n+    fn fix_source(&self) -> InFile<SyntaxNodePtr> {\n         InFile::new(self.file, self.field.clone().into())\n     }\n \n@@ -50,9 +50,8 @@ impl AstDiagnostic for NoSuchField {\n     type AST = ast::RecordExprField;\n \n     fn ast(&self, db: &dyn AstDatabase) -> Self::AST {\n-        let root = db.parse_or_expand(self.source().file_id).unwrap();\n-        let node = self.source().value.to_node(&root);\n-        ast::RecordExprField::cast(node).unwrap()\n+        let root = db.parse_or_expand(self.file).unwrap();\n+        self.field.to_node(&root)\n     }\n }\n \n@@ -72,19 +71,19 @@ impl Diagnostic for MissingFields {\n         }\n         buf\n     }\n-    fn source(&self) -> InFile<SyntaxNodePtr> {\n+    fn fix_source(&self) -> InFile<SyntaxNodePtr> {\n         InFile { file_id: self.file, value: self.field_list.clone().into() }\n     }\n \n-    fn as_any(&self) -> &(dyn Any + Send + 'static) {\n-        self\n-    }\n-\n-    fn highlighting_source(&self) -> InFile<SyntaxNodePtr> {\n+    fn source(&self) -> InFile<SyntaxNodePtr> {\n         self.list_parent_path\n             .clone()\n             .map(|path| InFile { file_id: self.file, value: path.into() })\n-            .unwrap_or_else(|| self.source())\n+            .unwrap_or_else(|| self.fix_source())\n+    }\n+\n+    fn as_any(&self) -> &(dyn Any + Send + 'static) {\n+        self\n     }\n }\n \n@@ -112,7 +111,7 @@ impl Diagnostic for MissingPatFields {\n         }\n         buf\n     }\n-    fn source(&self) -> InFile<SyntaxNodePtr> {\n+    fn fix_source(&self) -> InFile<SyntaxNodePtr> {\n         InFile { file_id: self.file, value: self.field_list.clone().into() }\n     }\n     fn as_any(&self) -> &(dyn Any + Send + 'static) {\n@@ -131,7 +130,7 @@ impl Diagnostic for MissingMatchArms {\n     fn message(&self) -> String {\n         String::from(\"Missing match arm\")\n     }\n-    fn source(&self) -> InFile<SyntaxNodePtr> {\n+    fn fix_source(&self) -> InFile<SyntaxNodePtr> {\n         InFile { file_id: self.file, value: self.match_expr.clone().into() }\n     }\n     fn as_any(&self) -> &(dyn Any + Send + 'static) {\n@@ -149,7 +148,7 @@ impl Diagnostic for MissingOkInTailExpr {\n     fn message(&self) -> String {\n         \"wrap return expression in Ok\".to_string()\n     }\n-    fn source(&self) -> InFile<SyntaxNodePtr> {\n+    fn fix_source(&self) -> InFile<SyntaxNodePtr> {\n         InFile { file_id: self.file, value: self.expr.clone().into() }\n     }\n     fn as_any(&self) -> &(dyn Any + Send + 'static) {\n@@ -162,8 +161,7 @@ impl AstDiagnostic for MissingOkInTailExpr {\n \n     fn ast(&self, db: &dyn AstDatabase) -> Self::AST {\n         let root = db.parse_or_expand(self.file).unwrap();\n-        let node = self.source().value.to_node(&root);\n-        ast::Expr::cast(node).unwrap()\n+        self.expr.to_node(&root)\n     }\n }\n \n@@ -177,7 +175,7 @@ impl Diagnostic for BreakOutsideOfLoop {\n     fn message(&self) -> String {\n         \"break outside of loop\".to_string()\n     }\n-    fn source(&self) -> InFile<SyntaxNodePtr> {\n+    fn fix_source(&self) -> InFile<SyntaxNodePtr> {\n         InFile { file_id: self.file, value: self.expr.clone().into() }\n     }\n     fn as_any(&self) -> &(dyn Any + Send + 'static) {\n@@ -190,8 +188,7 @@ impl AstDiagnostic for BreakOutsideOfLoop {\n \n     fn ast(&self, db: &dyn AstDatabase) -> Self::AST {\n         let root = db.parse_or_expand(self.file).unwrap();\n-        let node = self.source().value.to_node(&root);\n-        ast::Expr::cast(node).unwrap()\n+        self.expr.to_node(&root)\n     }\n }\n \n@@ -205,7 +202,7 @@ impl Diagnostic for MissingUnsafe {\n     fn message(&self) -> String {\n         format!(\"This operation is unsafe and requires an unsafe function or block\")\n     }\n-    fn source(&self) -> InFile<SyntaxNodePtr> {\n+    fn fix_source(&self) -> InFile<SyntaxNodePtr> {\n         InFile { file_id: self.file, value: self.expr.clone().into() }\n     }\n     fn as_any(&self) -> &(dyn Any + Send + 'static) {\n@@ -217,9 +214,8 @@ impl AstDiagnostic for MissingUnsafe {\n     type AST = ast::Expr;\n \n     fn ast(&self, db: &dyn AstDatabase) -> Self::AST {\n-        let root = db.parse_or_expand(self.source().file_id).unwrap();\n-        let node = self.source().value.to_node(&root);\n-        ast::Expr::cast(node).unwrap()\n+        let root = db.parse_or_expand(self.file).unwrap();\n+        self.expr.to_node(&root)\n     }\n }\n \n@@ -236,7 +232,7 @@ impl Diagnostic for MismatchedArgCount {\n         let s = if self.expected == 1 { \"\" } else { \"s\" };\n         format!(\"Expected {} argument{}, found {}\", self.expected, s, self.found)\n     }\n-    fn source(&self) -> InFile<SyntaxNodePtr> {\n+    fn fix_source(&self) -> InFile<SyntaxNodePtr> {\n         InFile { file_id: self.file, value: self.call_expr.clone().into() }\n     }\n     fn as_any(&self) -> &(dyn Any + Send + 'static) {\n@@ -250,7 +246,7 @@ impl Diagnostic for MismatchedArgCount {\n impl AstDiagnostic for MismatchedArgCount {\n     type AST = ast::CallExpr;\n     fn ast(&self, db: &dyn AstDatabase) -> Self::AST {\n-        let root = db.parse_or_expand(self.source().file_id).unwrap();\n+        let root = db.parse_or_expand(self.file).unwrap();\n         let node = self.source().value.to_node(&root);\n         ast::CallExpr::cast(node).unwrap()\n     }\n@@ -308,12 +304,11 @@ mod tests {\n         let mut actual: FxHashMap<FileId, Vec<(TextRange, String)>> = FxHashMap::default();\n         db.diagnostics(|d| {\n             // FXIME: macros...\n-            let file_id = d.source().file_id.original_file(&db);\n-            let highlighting_source = d.highlighting_source();\n-            let node = db.parse_or_expand(highlighting_source.file_id).unwrap();\n-            let range = highlighting_source.value.to_node(&node).text_range();\n+            let source = d.source();\n+            let root = db.parse_or_expand(source.file_id).unwrap();\n+            let range = source.value.to_node(&root).text_range();\n             let message = d.message().to_owned();\n-            actual.entry(file_id).or_default().push((range, message));\n+            actual.entry(source.file_id.original_file(&db)).or_default().push((range, message));\n         });\n \n         for (file_id, diags) in actual.iter_mut() {"}, {"sha": "0d2ff17e1f18b40e9e7e3723e39cc8c782a5ccfb", "filename": "crates/ra_ide/src/diagnostics.rs", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/ee1586c1ed058ff0f090b552d52fe6bbe2dd7f7f/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee1586c1ed058ff0f090b552d52fe6bbe2dd7f7f/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs?ref=ee1586c1ed058ff0f090b552d52fe6bbe2dd7f7f", "patch": "@@ -54,18 +54,19 @@ pub(crate) fn diagnostics(\n     let res = RefCell::new(res);\n     let mut sink = DiagnosticSinkBuilder::new()\n         .on::<hir::diagnostics::UnresolvedModule, _>(|d| {\n-            let original_file = d.source().file_id.original_file(db);\n             let fix = Fix::new(\n                 \"Create module\",\n-                FileSystemEdit::CreateFile { anchor: original_file, dst: d.candidate.clone() }\n-                    .into(),\n+                FileSystemEdit::CreateFile {\n+                    anchor: d.file.original_file(db),\n+                    dst: d.candidate.clone(),\n+                }\n+                .into(),\n             );\n-            let range = sema.diagnostics_range(d).range;\n             res.borrow_mut().push(Diagnostic {\n-                range,\n+                range: sema.diagnostics_range(d).range,\n                 message: d.message(),\n                 severity: Severity::Error,\n-                fix: Some((fix, range)),\n+                fix: Some((fix, sema.diagnostics_fix_range(d).range)),\n             })\n         })\n         .on::<hir::diagnostics::MissingFields, _>(|d| {\n@@ -94,12 +95,12 @@ pub(crate) fn diagnostics(\n                 };\n                 Some((\n                     Fix::new(\"Fill struct fields\", SourceFileEdit { file_id, edit }.into()),\n-                    sema.diagnostics_range(d).range,\n+                    sema.diagnostics_fix_range(d).range,\n                 ))\n             };\n \n             res.borrow_mut().push(Diagnostic {\n-                range: d.highlighting_source().file_syntax(db).text_range(),\n+                range: sema.diagnostics_range(d).range,\n                 message: d.message(),\n                 severity: Severity::Error,\n                 fix,\n@@ -110,21 +111,23 @@ pub(crate) fn diagnostics(\n             let replacement = format!(\"Ok({})\", node.syntax());\n             let edit = TextEdit::replace(node.syntax().text_range(), replacement);\n             let source_change = SourceFileEdit { file_id, edit }.into();\n-            let range = sema.diagnostics_range(d).range;\n             res.borrow_mut().push(Diagnostic {\n-                range,\n+                range: sema.diagnostics_range(d).range,\n                 message: d.message(),\n                 severity: Severity::Error,\n-                fix: Some((Fix::new(\"Wrap with ok\", source_change), range)),\n+                fix: Some((\n+                    Fix::new(\"Wrap with ok\", source_change),\n+                    sema.diagnostics_fix_range(d).range,\n+                )),\n             })\n         })\n         .on::<hir::diagnostics::NoSuchField, _>(|d| {\n-            let range = sema.diagnostics_range(d).range;\n             res.borrow_mut().push(Diagnostic {\n-                range,\n+                range: sema.diagnostics_range(d).range,\n                 message: d.message(),\n                 severity: Severity::Error,\n-                fix: missing_struct_field_fix(&sema, file_id, d).map(|fix| (fix, range)),\n+                fix: missing_struct_field_fix(&sema, file_id, d)\n+                    .map(|fix| (fix, sema.diagnostics_fix_range(d).range)),\n             })\n         })\n         // Only collect experimental diagnostics when they're enabled."}]}