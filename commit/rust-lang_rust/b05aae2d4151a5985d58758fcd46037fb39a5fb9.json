{"sha": "b05aae2d4151a5985d58758fcd46037fb39a5fb9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwNWFhZTJkNDE1MWE1OTg1ZDU4NzU4ZmNkNDYwMzdmYjM5YTVmYjk=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-05-03T20:33:33Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-05-10T23:20:20Z"}, "message": "test: Use the new `for` protocol", "tree": {"sha": "c12b1b3738ade87f372a3388b13c698b1929d639", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c12b1b3738ade87f372a3388b13c698b1929d639"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b05aae2d4151a5985d58758fcd46037fb39a5fb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b05aae2d4151a5985d58758fcd46037fb39a5fb9", "html_url": "https://github.com/rust-lang/rust/commit/b05aae2d4151a5985d58758fcd46037fb39a5fb9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b05aae2d4151a5985d58758fcd46037fb39a5fb9/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cdc266e47d8ee63a1eaf29c775f2cbc5f3a61bb4", "url": "https://api.github.com/repos/rust-lang/rust/commits/cdc266e47d8ee63a1eaf29c775f2cbc5f3a61bb4", "html_url": "https://github.com/rust-lang/rust/commit/cdc266e47d8ee63a1eaf29c775f2cbc5f3a61bb4"}], "stats": {"total": 209, "additions": 164, "deletions": 45}, "files": [{"sha": "790c07db685e3464ca485f2b30084f1c2d68ce15", "filename": "src/libcore/core", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b05aae2d4151a5985d58758fcd46037fb39a5fb9/src%2Flibcore%2Fcore", "raw_url": "https://github.com/rust-lang/rust/raw/b05aae2d4151a5985d58758fcd46037fb39a5fb9/src%2Flibcore%2Fcore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore?ref=b05aae2d4151a5985d58758fcd46037fb39a5fb9"}, {"sha": "d5649d3dfd297bab082fa470b024382fa95e4d22", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 28, "deletions": 3, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/b05aae2d4151a5985d58758fcd46037fb39a5fb9/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b05aae2d4151a5985d58758fcd46037fb39a5fb9/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=b05aae2d4151a5985d58758fcd46037fb39a5fb9", "patch": "@@ -86,9 +86,34 @@ pub fn to_vec<T>(iter: &fn(f: &fn(T) -> bool) -> bool) -> ~[T] {\n #[cfg(not(stage0))]\n pub fn any<T>(predicate: &fn(T) -> bool,\n               iter: &fn(f: &fn(T) -> bool) -> bool) -> bool {\n-    // If the predicate returns true, we break. If we ever broke, then we found\n-    // something\n-    !iter(|x| !predicate(x))\n+    for iter |x| {\n+        if predicate(x) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n+\n+/**\n+ * Return true if `predicate` is true for all values yielded by an internal iterator.\n+ *\n+ * # Example:\n+ *\n+ * ~~~~\n+ * assert!(all(|&x: &uint| x < 6, |f| uint::range(1, 6, f)));\n+ * assert!(!all(|&x: &uint| x < 5, |f| uint::range(1, 6, f)));\n+ * ~~~~\n+ */\n+#[inline(always)]\n+#[cfg(stage0)]\n+pub fn all<T>(predicate: &fn(T) -> bool,\n+              iter: &fn(f: &fn(T) -> bool)) -> bool {\n+    for iter |x| {\n+        if !predicate(x) {\n+            return false;\n+        }\n+    }\n+    return true;\n }\n \n /**"}, {"sha": "d7b27f53e7a78a7b8a83320939b1c6c465d9dbab", "filename": "src/libcore/str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b05aae2d4151a5985d58758fcd46037fb39a5fb9/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b05aae2d4151a5985d58758fcd46037fb39a5fb9/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=b05aae2d4151a5985d58758fcd46037fb39a5fb9", "patch": "@@ -3404,7 +3404,7 @@ mod tests {\n         let lf = ~\"\\nMary had a little lamb\\nLittle lamb\\n\";\n         let crlf = ~\"\\r\\nMary had a little lamb\\r\\nLittle lamb\\r\\n\";\n \n-        fn t(s: &str, f: &fn(&str, &fn(&str) -> bool), u: &[~str]) {\n+        fn t(s: &str, f: &fn(&str, &fn(&str) -> bool) -> bool, u: &[~str]) {\n             let mut v = ~[];\n             for f(s) |s| { v.push(s.to_owned()) }\n             assert!(vec::all2(v, u, |a,b| a == b));\n@@ -3424,7 +3424,7 @@ mod tests {\n \n     #[test]\n     fn test_words () {\n-        fn t(s: &str, f: &fn(&str, &fn(&str) -> bool), u: &[~str]) {\n+        fn t(s: &str, f: &fn(&str, &fn(&str) -> bool) -> bool, u: &[~str]) {\n             let mut v = ~[];\n             for f(s) |s| { v.push(s.to_owned()) }\n             assert!(vec::all2(v, u, |a,b| a == b));"}, {"sha": "7eba2cbf0ccc455d487d802fafded8f20dd39294", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b05aae2d4151a5985d58758fcd46037fb39a5fb9/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b05aae2d4151a5985d58758fcd46037fb39a5fb9/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=b05aae2d4151a5985d58758fcd46037fb39a5fb9", "patch": "@@ -1744,13 +1744,37 @@ pub fn each_permutation<T:Copy>(v: &[T], put: &fn(ts: &[T]) -> bool) -> bool {\n  * ~~~\n  *\n  */\n+#[cfg(stage0)]\n pub fn windowed<'r, T>(n: uint, v: &'r [T], it: &fn(&'r [T]) -> bool) {\n     assert!(1u <= n);\n     if n > v.len() { return; }\n     for uint::range(0, v.len() - n + 1) |i| {\n         if !it(v.slice(i, i + n)) { return }\n     }\n }\n+/**\n+ * Iterate over all contiguous windows of length `n` of the vector `v`.\n+ *\n+ * # Example\n+ *\n+ * Print the adjacent pairs of a vector (i.e. `[1,2]`, `[2,3]`, `[3,4]`)\n+ *\n+ * ~~~\n+ * for windowed(2, &[1,2,3,4]) |v| {\n+ *     io::println(fmt!(\"%?\", v));\n+ * }\n+ * ~~~\n+ *\n+ */\n+#[cfg(not(stage0))]\n+pub fn windowed<'r, T>(n: uint, v: &'r [T], it: &fn(&'r [T]) -> bool) -> bool {\n+    assert!(1u <= n);\n+    if n > v.len() { return true; }\n+    for uint::range(0, v.len() - n + 1) |i| {\n+        if !it(v.slice(i, i + n)) { return false; }\n+    }\n+    return true;\n+}\n \n /**\n  * Work with the buffer of a vector.\n@@ -4566,7 +4590,7 @@ mod tests {\n             }\n             i += 0;\n             false\n-        }\n+        };\n     }\n \n     #[test]\n@@ -4581,7 +4605,7 @@ mod tests {\n             }\n             i += 0;\n             false\n-        }\n+        };\n     }\n \n     #[test]"}, {"sha": "741bd62968018fcad2eb77c6c76e7e01d982644a", "filename": "src/libstd/dlist.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b05aae2d4151a5985d58758fcd46037fb39a5fb9/src%2Flibstd%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b05aae2d4151a5985d58758fcd46037fb39a5fb9/src%2Flibstd%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdlist.rs?ref=b05aae2d4151a5985d58758fcd46037fb39a5fb9", "patch": "@@ -393,6 +393,7 @@ pub impl<T> DList<T> {\n     }\n \n     /// Iterate over nodes.\n+    #[cfg(stage0)]\n     fn each_node(@mut self, f: &fn(@mut DListNode<T>) -> bool) {\n         let mut link = self.peek_n();\n         while link.is_some() {\n@@ -401,6 +402,17 @@ pub impl<T> DList<T> {\n             link = nobe.next_link();\n         }\n     }\n+    /// Iterate over nodes.\n+    #[cfg(not(stage0))]\n+    fn each_node(@mut self, f: &fn(@mut DListNode<T>) -> bool) -> bool {\n+        let mut link = self.peek_n();\n+        while link.is_some() {\n+            let nobe = link.get();\n+            if !f(nobe) { return false; }\n+            link = nobe.next_link();\n+        }\n+        return true;\n+    }\n \n     /// Check data structure integrity. O(n).\n     fn assert_consistent(@mut self) {"}, {"sha": "2c5cbc1cbf9274b47053dc439f889e495329f04e", "filename": "src/libstd/fileinput.rs", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/b05aae2d4151a5985d58758fcd46037fb39a5fb9/src%2Flibstd%2Ffileinput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b05aae2d4151a5985d58758fcd46037fb39a5fb9/src%2Flibstd%2Ffileinput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffileinput.rs?ref=b05aae2d4151a5985d58758fcd46037fb39a5fb9", "patch": "@@ -256,10 +256,21 @@ impl FileInput {\n     (line numbers and file names, see documentation for\n     `FileInputState`). Otherwise identical to `lines_each`.\n     */\n+    #[cfg(stage0)]\n     pub fn each_line_state(&self,\n                             f: &fn(&str, FileInputState) -> bool) {\n          self.each_line(|line| f(line, copy self.fi.state));\n     }\n+    /**\n+    Apply `f` to each line successively, along with some state\n+    (line numbers and file names, see documentation for\n+    `FileInputState`). Otherwise identical to `lines_each`.\n+    */\n+    #[cfg(not(stage0))]\n+    pub fn each_line_state(&self,\n+                            f: &fn(&str, FileInputState) -> bool) -> bool {\n+         self.each_line(|line| f(line, copy self.fi.state))\n+    }\n \n \n     /**\n@@ -367,10 +378,22 @@ reading from `stdin`).\n \n Fails when attempting to read from a file that can't be opened.\n */\n+#[cfg(stage0)]\n pub fn input(f: &fn(&str) -> bool) {\n     let mut i = FileInput::from_args();\n     i.each_line(f);\n }\n+/**\n+Iterate directly over the command line arguments (no arguments implies\n+reading from `stdin`).\n+\n+Fails when attempting to read from a file that can't be opened.\n+*/\n+#[cfg(not(stage0))]\n+pub fn input(f: &fn(&str) -> bool) -> bool {\n+    let mut i = FileInput::from_args();\n+    i.each_line(f)\n+}\n \n /**\n Iterate directly over the command line arguments (no arguments\n@@ -379,32 +402,69 @@ provided at each call.\n \n Fails when attempting to read from a file that can't be opened.\n */\n+#[cfg(stage0)]\n pub fn input_state(f: &fn(&str, FileInputState) -> bool) {\n     let mut i = FileInput::from_args();\n     i.each_line_state(f);\n }\n+/**\n+Iterate directly over the command line arguments (no arguments\n+implies reading from `stdin`) with the current state of the iteration\n+provided at each call.\n+\n+Fails when attempting to read from a file that can't be opened.\n+*/\n+#[cfg(not(stage0))]\n+pub fn input_state(f: &fn(&str, FileInputState) -> bool) -> bool {\n+    let mut i = FileInput::from_args();\n+    i.each_line_state(f)\n+}\n \n /**\n Iterate over a vector of files (an empty vector implies just `stdin`).\n \n Fails when attempting to read from a file that can't be opened.\n */\n+#[cfg(stage0)]\n pub fn input_vec(files: ~[Option<Path>], f: &fn(&str) -> bool) {\n     let mut i = FileInput::from_vec(files);\n     i.each_line(f);\n }\n+/**\n+Iterate over a vector of files (an empty vector implies just `stdin`).\n+\n+Fails when attempting to read from a file that can't be opened.\n+*/\n+#[cfg(not(stage0))]\n+pub fn input_vec(files: ~[Option<Path>], f: &fn(&str) -> bool) -> bool {\n+    let mut i = FileInput::from_vec(files);\n+    i.each_line(f)\n+}\n \n /**\n Iterate over a vector of files (an empty vector implies just `stdin`)\n with the current state of the iteration provided at each call.\n \n Fails when attempting to read from a file that can't be opened.\n */\n+#[cfg(stage0)]\n pub fn input_vec_state(files: ~[Option<Path>],\n                        f: &fn(&str, FileInputState) -> bool) {\n     let mut i = FileInput::from_vec(files);\n     i.each_line_state(f);\n }\n+/**\n+Iterate over a vector of files (an empty vector implies just `stdin`)\n+with the current state of the iteration provided at each call.\n+\n+Fails when attempting to read from a file that can't be opened.\n+*/\n+#[cfg(not(stage0))]\n+pub fn input_vec_state(files: ~[Option<Path>],\n+                       f: &fn(&str, FileInputState) -> bool) -> bool {\n+    let mut i = FileInput::from_vec(files);\n+    i.each_line_state(f)\n+}\n \n #[cfg(test)]\n mod test {"}, {"sha": "252bb1a6af8e98db450e2db4345c1499a8221da0", "filename": "src/libstd/treemap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b05aae2d4151a5985d58758fcd46037fb39a5fb9/src%2Flibstd%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b05aae2d4151a5985d58758fcd46037fb39a5fb9/src%2Flibstd%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftreemap.rs?ref=b05aae2d4151a5985d58758fcd46037fb39a5fb9", "patch": "@@ -674,7 +674,7 @@ impl<T: TotalOrd> Set<T> for TreeSet<T> {\n                 a = x.next();\n             }\n         }\n-        return a.each(|&x| f(x)) && y.advance(f);\n+        return b.each(|&x| f(x)) && y.advance(f);\n     }\n }\n \n@@ -1326,7 +1326,7 @@ mod test_set {\n     }\n \n     fn check(a: &[int], b: &[int], expected: &[int],\n-             f: &fn(&TreeSet<int>, &TreeSet<int>, f: &fn(&int) -> bool)) {\n+             f: &fn(&TreeSet<int>, &TreeSet<int>, f: &fn(&int) -> bool) -> bool) {\n         let mut set_a = TreeSet::new();\n         let mut set_b = TreeSet::new();\n "}, {"sha": "fb27672354371edd42a62e2ca536eb428b066162", "filename": "src/test/bench/graph500-bfs.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b05aae2d4151a5985d58758fcd46037fb39a5fb9/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b05aae2d4151a5985d58758fcd46037fb39a5fb9/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fgraph500-bfs.rs?ref=b05aae2d4151a5985d58758fcd46037fb39a5fb9", "patch": "@@ -10,8 +10,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[allow(deprecated_mode)];\n-\n /*!\n \n An implementation of the Graph500 Breadth First Search problem in Rust.\n@@ -23,7 +21,7 @@ use std::arc;\n use std::time;\n use std::deque::Deque;\n use std::par;\n-use core::hashmap::{HashMap, HashSet};\n+use core::hashmap::HashSet;\n use core::int::abs;\n use core::rand::RngUtil;\n \n@@ -83,14 +81,13 @@ fn make_graph(N: uint, edges: ~[(node_id, node_id)]) -> graph {\n         HashSet::new()\n     };\n \n-    do vec::each(edges) |e| {\n+    for vec::each(edges) |e| {\n         match *e {\n             (i, j) => {\n                 graph[i].insert(j);\n                 graph[j].insert(i);\n             }\n         }\n-        true\n     }\n \n     do vec::map_consume(graph) |mut v| {"}, {"sha": "7ff51eff8eeb64612b4a1cf9b343a0f8aea10775", "filename": "src/test/compile-fail/bad-for-loop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b05aae2d4151a5985d58758fcd46037fb39a5fb9/src%2Ftest%2Fcompile-fail%2Fbad-for-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b05aae2d4151a5985d58758fcd46037fb39a5fb9/src%2Ftest%2Fcompile-fail%2Fbad-for-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-for-loop.rs?ref=b05aae2d4151a5985d58758fcd46037fb39a5fb9", "patch": "@@ -11,4 +11,5 @@\n fn main() {\n     fn baz(_x: &fn(y: int) -> int) {}\n     for baz |_e| { } //~ ERROR A `for` loop iterator should expect a closure that returns `bool`\n+                     //~^ ERROR expected `for` closure to return `bool`\n }"}, {"sha": "f7a72d6e6108c36d9ac2cf203ed31a0304709f33", "filename": "src/test/compile-fail/borrowck-lend-flow-loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b05aae2d4151a5985d58758fcd46037fb39a5fb9/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b05aae2d4151a5985d58758fcd46037fb39a5fb9/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-loop.rs?ref=b05aae2d4151a5985d58758fcd46037fb39a5fb9", "patch": "@@ -17,7 +17,7 @@\n fn borrow(_v: &int) {}\n fn borrow_mut(_v: &mut int) {}\n fn cond() -> bool { fail!() }\n-fn for_func(_f: &fn() -> bool) { fail!() }\n+fn for_func(_f: &fn() -> bool) -> bool { fail!() }\n fn produce<T>() -> T { fail!(); }\n \n fn inc(v: &mut ~int) {"}, {"sha": "17b0d88a6a827712fda6a2bb7f11cc0cae4bdb83", "filename": "src/test/compile-fail/issue-2817-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b05aae2d4151a5985d58758fcd46037fb39a5fb9/src%2Ftest%2Fcompile-fail%2Fissue-2817-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b05aae2d4151a5985d58758fcd46037fb39a5fb9/src%2Ftest%2Fcompile-fail%2Fissue-2817-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2817-2.rs?ref=b05aae2d4151a5985d58758fcd46037fb39a5fb9", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn not_bool(f: &fn(int) -> ~str) {}\n+fn not_bool(f: &fn(int) -> ~str) -> bool {}\n \n fn main() {\n     for uint::range(0, 100000) |_i| { //~ ERROR A for-loop body must return (), but"}, {"sha": "77585d15b6b3ebbcd8d7c79f73590472d0d836cd", "filename": "src/test/compile-fail/issue-2817.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b05aae2d4151a5985d58758fcd46037fb39a5fb9/src%2Ftest%2Fcompile-fail%2Fissue-2817.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b05aae2d4151a5985d58758fcd46037fb39a5fb9/src%2Ftest%2Fcompile-fail%2Fissue-2817.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2817.rs?ref=b05aae2d4151a5985d58758fcd46037fb39a5fb9", "patch": "@@ -16,10 +16,10 @@ fn uuid_random() -> uint { fail!(); }\n \n fn main() {\n     do uint::range(0, 100000) |_i| { //~ ERROR Do-block body must return bool, but\n-    }\n+    };\n     // should get a more general message if the callback\n     // doesn't return nil\n     do uint::range(0, 100000) |_i| { //~ ERROR mismatched types\n         ~\"str\"\n-    }\n+    };\n }"}, {"sha": "98a02b6b74691c4b390ffda638b472245a4c2baa", "filename": "src/test/compile-fail/issue-3651-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b05aae2d4151a5985d58758fcd46037fb39a5fb9/src%2Ftest%2Fcompile-fail%2Fissue-3651-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b05aae2d4151a5985d58758fcd46037fb39a5fb9/src%2Ftest%2Fcompile-fail%2Fissue-3651-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3651-2.rs?ref=b05aae2d4151a5985d58758fcd46037fb39a5fb9", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n fn main() {\n-    do 5.times {} //~ ERROR Do-block body must return bool, but returns () here. Perhaps\n+    do 5.times {}; //~ ERROR Do-block body must return bool, but returns () here. Perhaps\n }"}, {"sha": "8d704859fe57453cea89fb547a83aa3b27883088", "filename": "src/test/compile-fail/issue-3651.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b05aae2d4151a5985d58758fcd46037fb39a5fb9/src%2Ftest%2Fcompile-fail%2Fissue-3651.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b05aae2d4151a5985d58758fcd46037fb39a5fb9/src%2Ftest%2Fcompile-fail%2Fissue-3651.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3651.rs?ref=b05aae2d4151a5985d58758fcd46037fb39a5fb9", "patch": "@@ -10,4 +10,5 @@\n \n fn main() {\n     for task::spawn { return true; } //~ ERROR A `for` loop iterator should expect a closure that\n+                                     //~^ ERROR expected `for` closure to return `bool`\n }"}, {"sha": "0d84bc2fc605c040713fb9f05efb67f65241327a", "filename": "src/test/compile-fail/private-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b05aae2d4151a5985d58758fcd46037fb39a5fb9/src%2Ftest%2Fcompile-fail%2Fprivate-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b05aae2d4151a5985d58758fcd46037fb39a5fb9/src%2Ftest%2Fcompile-fail%2Fprivate-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-method.rs?ref=b05aae2d4151a5985d58758fcd46037fb39a5fb9", "patch": "@@ -18,7 +18,7 @@ mod kitties {\n     }\n \n     pub impl cat {\n-        priv fn nap(&self) { uint::range(1u, 10000u, |_i| false)}\n+        priv fn nap(&self) { uint::range(1u, 10000u, |_i| false); }\n     }\n \n     pub fn cat(in_x : uint, in_y : int) -> cat {"}, {"sha": "6946ed3fbcfc0dfaa7c1aba7ff83db95617b6b0b", "filename": "src/test/run-pass/assignability-trait.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b05aae2d4151a5985d58758fcd46037fb39a5fb9/src%2Ftest%2Frun-pass%2Fassignability-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b05aae2d4151a5985d58758fcd46037fb39a5fb9/src%2Ftest%2Frun-pass%2Fassignability-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassignability-trait.rs?ref=b05aae2d4151a5985d58758fcd46037fb39a5fb9", "patch": "@@ -13,22 +13,18 @@\n // it.\n \n trait iterable<A> {\n-    fn iterate(&self, blk: &fn(x: &A) -> bool);\n+    fn iterate(&self, blk: &fn(x: &A) -> bool) -> bool;\n }\n \n impl<'self,A> iterable<A> for &'self [A] {\n-    fn iterate(&self, f: &fn(x: &A) -> bool) {\n-        for vec::each(*self) |e| {\n-            if !f(e) { break; }\n-        }\n+    fn iterate(&self, f: &fn(x: &A) -> bool) -> bool {\n+        vec::each(*self, f)\n     }\n }\n \n impl<A> iterable<A> for ~[A] {\n-    fn iterate(&self, f: &fn(x: &A) -> bool) {\n-        for vec::each(*self) |e| {\n-            if !f(e) { break; }\n-        }\n+    fn iterate(&self, f: &fn(x: &A) -> bool) -> bool {\n+        vec::each(*self, f)\n     }\n }\n "}, {"sha": "778637701c5fd6dca724ed10df0d2301cea5c152", "filename": "src/test/run-pass/borrowck-mut-uniq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b05aae2d4151a5985d58758fcd46037fb39a5fb9/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b05aae2d4151a5985d58758fcd46037fb39a5fb9/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs?ref=b05aae2d4151a5985d58758fcd46037fb39a5fb9", "patch": "@@ -18,7 +18,7 @@ fn add_int(x: &mut Ints, v: int) {\n     x.values <-> values;\n }\n \n-fn iter_ints(x: &Ints, f: &fn(x: &int) -> bool) {\n+fn iter_ints(x: &Ints, f: &fn(x: &int) -> bool) -> bool {\n     let l = x.values.len();\n     uint::range(0, l, |i| f(&x.values[i]))\n }"}, {"sha": "39d4b25f262be118b8fed83b9168d8ffc4821bd9", "filename": "src/test/run-pass/class-impl-very-parameterized-trait.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b05aae2d4151a5985d58758fcd46037fb39a5fb9/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b05aae2d4151a5985d58758fcd46037fb39a5fb9/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs?ref=b05aae2d4151a5985d58758fcd46037fb39a5fb9", "patch": "@@ -59,25 +59,26 @@ impl<T> Mutable for cat<T> {\n }\n \n impl<T> Map<int, T> for cat<T> {\n-    fn each<'a>(&'a self, f: &fn(&int, &'a T) -> bool) {\n+    fn each<'a>(&'a self, f: &fn(&int, &'a T) -> bool) -> bool {\n         let mut n = int::abs(self.meows);\n         while n > 0 {\n-            if !f(&n, &self.name) { break; }\n+            if !f(&n, &self.name) { return false; }\n             n -= 1;\n         }\n+        return true;\n     }\n \n     fn contains_key(&self, k: &int) -> bool { *k <= self.meows }\n \n-    fn each_key(&self, f: &fn(v: &int) -> bool) {\n-        for self.each |k, _| { if !f(k) { break; } loop;};\n+    fn each_key(&self, f: &fn(v: &int) -> bool) -> bool {\n+        self.each(|k, _| f(k))\n     }\n \n-    fn each_value<'a>(&'a self, f: &fn(v: &'a T) -> bool) {\n-        for self.each |_, v| { if !f(v) { break; } loop;};\n+    fn each_value<'a>(&'a self, f: &fn(v: &'a T) -> bool) -> bool {\n+        self.each(|_, v| f(v))\n     }\n \n-    fn mutate_values(&mut self, _f: &fn(&int, &mut T) -> bool) {\n+    fn mutate_values(&mut self, _f: &fn(&int, &mut T) -> bool) -> bool {\n         fail!(~\"nope\")\n     }\n "}, {"sha": "fb1bc37fd5efabd4e989c091a0e9cb06bf5461a5", "filename": "src/test/run-pass/do-for-empty-args.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b05aae2d4151a5985d58758fcd46037fb39a5fb9/src%2Ftest%2Frun-pass%2Fdo-for-empty-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b05aae2d4151a5985d58758fcd46037fb39a5fb9/src%2Ftest%2Frun-pass%2Fdo-for-empty-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdo-for-empty-args.rs?ref=b05aae2d4151a5985d58758fcd46037fb39a5fb9", "patch": "@@ -11,14 +11,15 @@\n // no-reformat\n // Testing various forms of `do` and `for` with empty arg lists\n \n-fn f(f: &fn() -> bool) {\n+fn f(f: &fn() -> bool) -> bool {\n+    true\n }\n \n pub fn main() {\n-    do f() || { true }\n-    do f() { true }\n-    do f || { true }\n-    do f { true }\n+    do f() || { true };\n+    do f() { true };\n+    do f || { true };\n+    do f { true };\n     for f() || { }\n     for f() { }\n     for f || { }"}, {"sha": "e9d7c946a9a11ee2351a96ccfaa43d27dff887dc", "filename": "src/test/run-pass/do-for-no-args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b05aae2d4151a5985d58758fcd46037fb39a5fb9/src%2Ftest%2Frun-pass%2Fdo-for-no-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b05aae2d4151a5985d58758fcd46037fb39a5fb9/src%2Ftest%2Frun-pass%2Fdo-for-no-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdo-for-no-args.rs?ref=b05aae2d4151a5985d58758fcd46037fb39a5fb9", "patch": "@@ -10,7 +10,7 @@\n \n // Testing that we can drop the || in for/do exprs\n \n-fn f(f: @fn() -> bool) { }\n+fn f(f: @fn() -> bool) -> bool { true }\n \n fn d(f: @fn()) { }\n "}, {"sha": "1792a89d64f1ea485cf919aedbde8447e47ed06d", "filename": "src/test/run-pass/ret-break-cont-in-block.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b05aae2d4151a5985d58758fcd46037fb39a5fb9/src%2Ftest%2Frun-pass%2Fret-break-cont-in-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b05aae2d4151a5985d58758fcd46037fb39a5fb9/src%2Ftest%2Frun-pass%2Fret-break-cont-in-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fret-break-cont-in-block.rs?ref=b05aae2d4151a5985d58758fcd46037fb39a5fb9", "patch": "@@ -12,12 +12,13 @@\n \n use core::cmp::Eq;\n \n-fn iter<T>(v: ~[T], it: &fn(&T) -> bool) {\n+fn iter<T>(v: ~[T], it: &fn(&T) -> bool) -> bool {\n     let mut i = 0u, l = v.len();\n     while i < l {\n-        if !it(&v[i]) { break; }\n+        if !it(&v[i]) { return false; }\n         i += 1u;\n     }\n+    return true;\n }\n \n fn find_pos<T:Eq + Copy + Clone>(n: T, h: ~[T]) -> Option<uint> {"}]}