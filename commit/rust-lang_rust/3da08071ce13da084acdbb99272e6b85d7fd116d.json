{"sha": "3da08071ce13da084acdbb99272e6b85d7fd116d", "node_id": "C_kwDOAAsO6NoAKDNkYTA4MDcxY2UxM2RhMDg0YWNkYmI5OTI3MmU2Yjg1ZDdmZDExNmQ", "commit": {"author": {"name": "Moritz Vetter", "email": "mv@3yourmind.com", "date": "2022-02-13T11:48:04Z"}, "committer": {"name": "Moritz Vetter", "email": "mv@3yourmind.com", "date": "2022-02-24T17:58:14Z"}, "message": "add logic to highlight continue and break keywords according to expectations", "tree": {"sha": "aefb58945171d29c5d85cbe8360e403309de7ebe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aefb58945171d29c5d85cbe8360e403309de7ebe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3da08071ce13da084acdbb99272e6b85d7fd116d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3da08071ce13da084acdbb99272e6b85d7fd116d", "html_url": "https://github.com/rust-lang/rust/commit/3da08071ce13da084acdbb99272e6b85d7fd116d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3da08071ce13da084acdbb99272e6b85d7fd116d/comments", "author": null, "committer": null, "parents": [{"sha": "cad0cf6950fb73da4d137e005110d9921e6c04be", "url": "https://api.github.com/repos/rust-lang/rust/commits/cad0cf6950fb73da4d137e005110d9921e6c04be", "html_url": "https://github.com/rust-lang/rust/commit/cad0cf6950fb73da4d137e005110d9921e6c04be"}], "stats": {"total": 92, "additions": 60, "deletions": 32}, "files": [{"sha": "f886ff7837b4a8e50eea608f6a0a1c95b5d26b02", "filename": "crates/ide/src/highlight_related.rs", "status": "modified", "additions": 44, "deletions": 19, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/3da08071ce13da084acdbb99272e6b85d7fd116d/crates%2Fide%2Fsrc%2Fhighlight_related.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3da08071ce13da084acdbb99272e6b85d7fd116d/crates%2Fide%2Fsrc%2Fhighlight_related.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhighlight_related.rs?ref=3da08071ce13da084acdbb99272e6b85d7fd116d", "patch": "@@ -2,15 +2,17 @@ use hir::Semantics;\n use ide_db::{\n     base_db::{FileId, FilePosition},\n     defs::{Definition, IdentClass},\n-    helpers::{for_each_break_expr, for_each_tail_expr, node_ext::walk_expr, pick_best_token},\n+    helpers::{\n+        for_each_break_and_continue_expr, for_each_tail_expr, node_ext::walk_expr, pick_best_token,\n+    },\n     search::{FileReference, ReferenceCategory, SearchScope},\n     RootDatabase,\n };\n use rustc_hash::FxHashSet;\n use syntax::{\n     ast::{self, HasLoopBody},\n     match_ast, AstNode,\n-    SyntaxKind::{IDENT, INT_NUMBER},\n+    SyntaxKind::{self, IDENT, INT_NUMBER},\n     SyntaxNode, SyntaxToken, TextRange, T,\n };\n \n@@ -66,7 +68,9 @@ pub(crate) fn highlight_related(\n         T![for] if config.break_points && token.parent().and_then(ast::ForExpr::cast).is_some() => {\n             highlight_break_points(token)\n         }\n-        T![break] | T![loop] | T![while] if config.break_points => highlight_break_points(token),\n+        T![break] | T![loop] | T![while] | T![continue] if config.break_points => {\n+            highlight_break_points(token)\n+        }\n         _ if config.references => highlight_references(sema, &syntax, token, file_id),\n         _ => None,\n     }\n@@ -187,6 +191,7 @@ fn highlight_exit_points(\n \n fn highlight_break_points(token: SyntaxToken) -> Option<Vec<HighlightedRange>> {\n     fn hl(\n+        cursor_token_kind: SyntaxKind,\n         token: Option<SyntaxToken>,\n         label: Option<ast::Label>,\n         body: Option<ast::StmtList>,\n@@ -197,11 +202,20 @@ fn highlight_break_points(token: SyntaxToken) -> Option<Vec<HighlightedRange>> {\n             label.as_ref().map(|it| it.syntax().text_range()),\n         );\n         highlights.extend(range.map(|range| HighlightedRange { category: None, range }));\n-        for_each_break_expr(label, body, &mut |expr| {\n-            let range: Option<TextRange> = match expr {\n-                ast::Expr::BreakExpr(break_) => cover_range(\n-                    break_.break_token().map(|it| it.text_range()),\n-                    break_.lifetime().map(|it| it.syntax().text_range()),\n+        for_each_break_and_continue_expr(label, body, &mut |expr| {\n+            let range: Option<TextRange> = match (cursor_token_kind, expr) {\n+                (T![for] | T![while] | T![loop] | T![break], ast::Expr::BreakExpr(break_)) => {\n+                    cover_range(\n+                        break_.break_token().map(|it| it.text_range()),\n+                        break_.lifetime().map(|it| it.syntax().text_range()),\n+                    )\n+                }\n+                (\n+                    T![for] | T![while] | T![loop] | T![continue],\n+                    ast::Expr::ContinueExpr(continue_),\n+                ) => cover_range(\n+                    continue_.continue_token().map(|it| it.text_range()),\n+                    continue_.lifetime().map(|it| it.syntax().text_range()),\n                 ),\n                 _ => None,\n             };\n@@ -213,6 +227,7 @@ fn highlight_break_points(token: SyntaxToken) -> Option<Vec<HighlightedRange>> {\n     let lbl = match_ast! {\n         match parent {\n             ast::BreakExpr(b) => b.lifetime(),\n+            ast::ContinueExpr(c) => c.lifetime(),\n             ast::LoopExpr(l) => l.label().and_then(|it| it.lifetime()),\n             ast::ForExpr(f) => f.label().and_then(|it| it.lifetime()),\n             ast::WhileExpr(w) => w.label().and_then(|it| it.lifetime()),\n@@ -227,19 +242,29 @@ fn highlight_break_points(token: SyntaxToken) -> Option<Vec<HighlightedRange>> {\n         }\n         None => true,\n     };\n+    let token_kind = token.kind();\n     for anc in token.ancestors().flat_map(ast::Expr::cast) {\n         return match anc {\n-            ast::Expr::LoopExpr(l) if label_matches(l.label()) => {\n-                hl(l.loop_token(), l.label(), l.loop_body().and_then(|it| it.stmt_list()))\n-            }\n-            ast::Expr::ForExpr(f) if label_matches(f.label()) => {\n-                hl(f.for_token(), f.label(), f.loop_body().and_then(|it| it.stmt_list()))\n-            }\n-            ast::Expr::WhileExpr(w) if label_matches(w.label()) => {\n-                hl(w.while_token(), w.label(), w.loop_body().and_then(|it| it.stmt_list()))\n-            }\n+            ast::Expr::LoopExpr(l) if label_matches(l.label()) => hl(\n+                token_kind,\n+                l.loop_token(),\n+                l.label(),\n+                l.loop_body().and_then(|it| it.stmt_list()),\n+            ),\n+            ast::Expr::ForExpr(f) if label_matches(f.label()) => hl(\n+                token_kind,\n+                f.for_token(),\n+                f.label(),\n+                f.loop_body().and_then(|it| it.stmt_list()),\n+            ),\n+            ast::Expr::WhileExpr(w) if label_matches(w.label()) => hl(\n+                token_kind,\n+                w.while_token(),\n+                w.label(),\n+                w.loop_body().and_then(|it| it.stmt_list()),\n+            ),\n             ast::Expr::BlockExpr(e) if e.label().is_some() && label_matches(e.label()) => {\n-                hl(None, e.label(), e.stmt_list())\n+                hl(token_kind, None, e.label(), e.stmt_list())\n             }\n             _ => continue,\n         };\n@@ -882,7 +907,7 @@ fn foo() {\n         check(\n             r#\"\n fn foo() {\n-    'outer$0: for _ in () {\n+    'outer: fo$0r _ in () {\n  // ^^^^^^^^^^^\n         break;\n      // ^^^^^"}, {"sha": "4c59629bc66b7d6835b3b267f1fc650582a5923a", "filename": "crates/ide_db/src/helpers.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/3da08071ce13da084acdbb99272e6b85d7fd116d/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3da08071ce13da084acdbb99272e6b85d7fd116d/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers.rs?ref=3da08071ce13da084acdbb99272e6b85d7fd116d", "patch": "@@ -120,9 +120,7 @@ pub fn for_each_tail_expr(expr: &ast::Expr, cb: &mut dyn FnMut(&ast::Expr)) {\n                 ) => return cb(expr),\n \n                 Some(ast::BlockModifier::Label(label)) => {\n-                    for_each_break_expr(Some(label), b.stmt_list(), &mut |b| {\n-                        cb(&b)\n-                    });\n+                    for_each_break_and_continue_expr(Some(label), b.stmt_list(), &mut |b| cb(&b));\n                 }\n                 Some(ast::BlockModifier::Unsafe(_)) => (),\n                 None => (),\n@@ -149,16 +147,16 @@ pub fn for_each_tail_expr(expr: &ast::Expr, cb: &mut dyn FnMut(&ast::Expr)) {\n                 }\n             }\n         }\n-        ast::Expr::LoopExpr(l) => {\n-            for_each_break_expr(l.label(), l.loop_body().and_then(|it| it.stmt_list()), &mut |b| {\n-                cb(&b)\n-            })\n-        }\n+        ast::Expr::LoopExpr(l) => for_each_break_and_continue_expr(\n+            l.label(),\n+            l.loop_body().and_then(|it| it.stmt_list()),\n+            &mut |b| cb(&b),\n+        ),\n         ast::Expr::MatchExpr(m) => {\n             if let Some(arms) = m.match_arm_list() {\n-                arms.arms().filter_map(|arm| arm.expr()).for_each(|e| for_each_tail_expr(&e, &mut |b| {\n-                    cb(&b)\n-                }));\n+                arms.arms()\n+                    .filter_map(|arm| arm.expr())\n+                    .for_each(|e| for_each_tail_expr(&e, &mut |b| cb(&b)));\n             }\n         }\n         ast::Expr::ArrayExpr(_)\n@@ -192,8 +190,8 @@ pub fn for_each_tail_expr(expr: &ast::Expr, cb: &mut dyn FnMut(&ast::Expr)) {\n     }\n }\n \n-/// Calls `cb` on each break expr inside of `body` that is applicable for the given label.\n-pub fn for_each_break_expr(\n+/// Calls `cb` on each break expr and continue expr inside of `body` that is applicable for the given label.\n+pub fn for_each_break_and_continue_expr(\n     label: Option<ast::Label>,\n     body: Option<ast::StmtList>,\n     cb: &mut dyn FnMut(ast::Expr),\n@@ -221,6 +219,11 @@ pub fn for_each_break_expr(\n                     {\n                         cb(ast::Expr::BreakExpr(b));\n                     }\n+                    ast::Expr::ContinueExpr(c)\n+                        if (depth == 0 && c.lifetime().is_none()) || eq_label(c.lifetime()) =>\n+                    {\n+                        cb(ast::Expr::ContinueExpr(c))\n+                    }\n                     _ => (),\n                 },\n                 WalkEvent::Leave(expr) => match expr {"}]}