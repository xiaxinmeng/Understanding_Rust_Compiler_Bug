{"sha": "12c1e9a193e860090ec3a306964392acae8f7699", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyYzFlOWExOTNlODYwMDkwZWMzYTMwNjk2NDM5MmFjYWU4Zjc2OTk=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-09T06:18:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-09T06:18:32Z"}, "message": "Rollup merge of #66134 - estebank:unknown-formatting-trait, r=nikomatsakis\n\nPoint at formatting descriptor string when it is invalid\n\nWhen a formatting string contains an invalid descriptor, point at it\ninstead of the argument:\n\n```\nerror: unknown format trait `foo`\n  --> $DIR/ifmt-bad-arg.rs:86:17\n   |\nLL |     println!(\"{:foo}\", 1);\n   |                 ^^^\n   |\n   = note: the only appropriate formatting traits are:\n           - ``, which uses the `Display` trait\n           - `?`, which uses the `Debug` trait\n           - `e`, which uses the `LowerExp` trait\n           - `E`, which uses the `UpperExp` trait\n           - `o`, which uses the `Octal` trait\n           - `p`, which uses the `Pointer` trait\n           - `b`, which uses the `Binary` trait\n           - `x`, which uses the `LowerHex` trait\n           - `X`, which uses the `UpperHex` trait\n```", "tree": {"sha": "d48872ee5cfa207b386c0eb32d48cc758f3fb2d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d48872ee5cfa207b386c0eb32d48cc758f3fb2d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12c1e9a193e860090ec3a306964392acae8f7699", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdxlo4CRBK7hj4Ov3rIwAAdHIIAGvfX8uwyWAzWmn54prtwuEN\nBprWIUgv3aJxudxhKzYyjg13mqyF3o3E9R8j6XOpK2Esj2Z/OVFQUxcr2AGi7vtT\nwvS1FQvwAcmLQ5GDXueCWjEkEsHyVqtZTPPDiD4JhF74IMt5wdFW/+U4WUeB22n7\n6N9dM3W+tgAuA7wobCyzCBFp2JjDgIgeDWXxChiNFouyN7i4JI6c9L2GjaEQsdgC\nQnydsEz/anb7Ib2wDN61LhYJlINyKDwdwq6Bgebux8AHCT1jnsoAFDDFnbs501lL\n4ZptqiYxs39KwHiqLa7efde6AKW2ymm2ZR+N7SeJRXYauS6QO9nAr5zNggH61Y0=\n=d1aD\n-----END PGP SIGNATURE-----\n", "payload": "tree d48872ee5cfa207b386c0eb32d48cc758f3fb2d4\nparent a1fc485e64502e51e9fe6c1422e496bedde5875c\nparent 543fe5b413bee7f7637c028b4b67b5daa97e1b8e\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1573280312 +0100\ncommitter GitHub <noreply@github.com> 1573280312 +0100\n\nRollup merge of #66134 - estebank:unknown-formatting-trait, r=nikomatsakis\n\nPoint at formatting descriptor string when it is invalid\n\nWhen a formatting string contains an invalid descriptor, point at it\ninstead of the argument:\n\n```\nerror: unknown format trait `foo`\n  --> $DIR/ifmt-bad-arg.rs:86:17\n   |\nLL |     println!(\"{:foo}\", 1);\n   |                 ^^^\n   |\n   = note: the only appropriate formatting traits are:\n           - ``, which uses the `Display` trait\n           - `?`, which uses the `Debug` trait\n           - `e`, which uses the `LowerExp` trait\n           - `E`, which uses the `UpperExp` trait\n           - `o`, which uses the `Octal` trait\n           - `p`, which uses the `Pointer` trait\n           - `b`, which uses the `Binary` trait\n           - `x`, which uses the `LowerHex` trait\n           - `X`, which uses the `UpperHex` trait\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12c1e9a193e860090ec3a306964392acae8f7699", "html_url": "https://github.com/rust-lang/rust/commit/12c1e9a193e860090ec3a306964392acae8f7699", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12c1e9a193e860090ec3a306964392acae8f7699/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1fc485e64502e51e9fe6c1422e496bedde5875c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1fc485e64502e51e9fe6c1422e496bedde5875c", "html_url": "https://github.com/rust-lang/rust/commit/a1fc485e64502e51e9fe6c1422e496bedde5875c"}, {"sha": "543fe5b413bee7f7637c028b4b67b5daa97e1b8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/543fe5b413bee7f7637c028b4b67b5daa97e1b8e", "html_url": "https://github.com/rust-lang/rust/commit/543fe5b413bee7f7637c028b4b67b5daa97e1b8e"}], "stats": {"total": 163, "additions": 104, "deletions": 59}, "files": [{"sha": "24b19028ac1179e65cff77613606a4eb8666fd03", "filename": "src/libfmt_macros/lib.rs", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/12c1e9a193e860090ec3a306964392acae8f7699/src%2Flibfmt_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c1e9a193e860090ec3a306964392acae8f7699/src%2Flibfmt_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Flib.rs?ref=12c1e9a193e860090ec3a306964392acae8f7699", "patch": "@@ -35,7 +35,7 @@ impl InnerOffset {\n \n /// A piece is a portion of the format string which represents the next part\n /// to emit. These are emitted as a stream by the `Parser` class.\n-#[derive(Copy, Clone, PartialEq)]\n+#[derive(Copy, Clone, Debug, PartialEq)]\n pub enum Piece<'a> {\n     /// A literal string which should directly be emitted\n     String(&'a str),\n@@ -45,7 +45,7 @@ pub enum Piece<'a> {\n }\n \n /// Representation of an argument specification.\n-#[derive(Copy, Clone, PartialEq)]\n+#[derive(Copy, Clone, Debug, PartialEq)]\n pub struct Argument<'a> {\n     /// Where to find this argument\n     pub position: Position,\n@@ -54,7 +54,7 @@ pub struct Argument<'a> {\n }\n \n /// Specification for the formatting of an argument in the format string.\n-#[derive(Copy, Clone, PartialEq)]\n+#[derive(Copy, Clone, Debug, PartialEq)]\n pub struct FormatSpec<'a> {\n     /// Optionally specified character to fill alignment with.\n     pub fill: Option<char>,\n@@ -74,10 +74,12 @@ pub struct FormatSpec<'a> {\n     /// this argument, this can be empty or any number of characters, although\n     /// it is required to be one word.\n     pub ty: &'a str,\n+    /// The span of the descriptor string (for diagnostics).\n+    pub ty_span: Option<InnerSpan>,\n }\n \n /// Enum describing where an argument for a format can be located.\n-#[derive(Copy, Clone, PartialEq)]\n+#[derive(Copy, Clone, Debug, PartialEq)]\n pub enum Position {\n     /// The argument is implied to be located at an index\n     ArgumentImplicitlyIs(usize),\n@@ -97,7 +99,7 @@ impl Position {\n }\n \n /// Enum of alignments which are supported.\n-#[derive(Copy, Clone, PartialEq)]\n+#[derive(Copy, Clone, Debug, PartialEq)]\n pub enum Alignment {\n     /// The value will be aligned to the left.\n     AlignLeft,\n@@ -111,7 +113,7 @@ pub enum Alignment {\n \n /// Various flags which can be applied to format strings. The meaning of these\n /// flags is defined by the formatters themselves.\n-#[derive(Copy, Clone, PartialEq)]\n+#[derive(Copy, Clone, Debug, PartialEq)]\n pub enum Flag {\n     /// A `+` will be used to denote positive numbers.\n     FlagSignPlus,\n@@ -131,7 +133,7 @@ pub enum Flag {\n \n /// A count is used for the precision and width parameters of an integer, and\n /// can reference either an argument or a literal integer.\n-#[derive(Copy, Clone, PartialEq)]\n+#[derive(Copy, Clone, Debug, PartialEq)]\n pub enum Count {\n     /// The count is specified explicitly.\n     CountIs(usize),\n@@ -475,6 +477,7 @@ impl<'a> Parser<'a> {\n             width: CountImplied,\n             width_span: None,\n             ty: &self.input[..0],\n+            ty_span: None,\n         };\n         if !self.consume(':') {\n             return spec;\n@@ -548,6 +551,7 @@ impl<'a> Parser<'a> {\n                 spec.precision_span = sp;\n             }\n         }\n+        let ty_span_start = self.cur.peek().map(|(pos, _)| *pos);\n         // Optional radix followed by the actual format specifier\n         if self.consume('x') {\n             if self.consume('?') {\n@@ -567,6 +571,12 @@ impl<'a> Parser<'a> {\n             spec.ty = \"?\";\n         } else {\n             spec.ty = self.word();\n+            let ty_span_end = self.cur.peek().map(|(pos, _)| *pos);\n+            if !spec.ty.is_empty() {\n+                spec.ty_span = ty_span_start\n+                    .and_then(|s| ty_span_end.map(|e| (s, e)))\n+                    .map(|(start, end)| self.to_span_index(start).to(self.to_span_index(end)));\n+            }\n         }\n         spec\n     }"}, {"sha": "81359033eda29f7aa64ab5dee11e28d125468cb4", "filename": "src/libfmt_macros/tests.rs", "status": "modified", "additions": 28, "deletions": 15, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/12c1e9a193e860090ec3a306964392acae8f7699/src%2Flibfmt_macros%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c1e9a193e860090ec3a306964392acae8f7699/src%2Flibfmt_macros%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Ftests.rs?ref=12c1e9a193e860090ec3a306964392acae8f7699", "patch": "@@ -2,7 +2,7 @@ use super::*;\n \n fn same(fmt: &'static str, p: &[Piece<'static>]) {\n     let parser = Parser::new(fmt, None, vec![], false);\n-    assert!(parser.collect::<Vec<Piece<'static>>>() == p);\n+    assert_eq!(parser.collect::<Vec<Piece<'static>>>(), p);\n }\n \n fn fmtdflt() -> FormatSpec<'static> {\n@@ -15,6 +15,7 @@ fn fmtdflt() -> FormatSpec<'static> {\n         precision_span: None,\n         width_span: None,\n         ty: \"\",\n+        ty_span: None,\n     };\n }\n \n@@ -82,7 +83,7 @@ fn format_position_nothing_else() {\n #[test]\n fn format_type() {\n     same(\n-        \"{3:a}\",\n+        \"{3:x}\",\n         &[NextArgument(Argument {\n             position: ArgumentIs(3),\n             format: FormatSpec {\n@@ -93,7 +94,8 @@ fn format_type() {\n                 width: CountImplied,\n                 precision_span: None,\n                 width_span: None,\n-                ty: \"a\",\n+                ty: \"x\",\n+                ty_span: None,\n             },\n         })]);\n }\n@@ -112,6 +114,7 @@ fn format_align_fill() {\n                 precision_span: None,\n                 width_span: None,\n                 ty: \"\",\n+                ty_span: None,\n             },\n         })]);\n     same(\n@@ -127,6 +130,7 @@ fn format_align_fill() {\n                 precision_span: None,\n                 width_span: None,\n                 ty: \"\",\n+                ty_span: None,\n             },\n         })]);\n     same(\n@@ -142,6 +146,7 @@ fn format_align_fill() {\n                 precision_span: None,\n                 width_span: None,\n                 ty: \"abcd\",\n+                ty_span: Some(InnerSpan::new(6, 10)),\n             },\n         })]);\n }\n@@ -150,7 +155,7 @@ fn format_counts() {\n     use syntax_pos::{GLOBALS, Globals, edition};\n     GLOBALS.set(&Globals::new(edition::DEFAULT_EDITION), || {\n     same(\n-        \"{:10s}\",\n+        \"{:10x}\",\n         &[NextArgument(Argument {\n             position: ArgumentImplicitlyIs(0),\n             format: FormatSpec {\n@@ -161,11 +166,12 @@ fn format_counts() {\n                 width: CountIs(10),\n                 precision_span: None,\n                 width_span: None,\n-                ty: \"s\",\n+                ty: \"x\",\n+                ty_span: None,\n             },\n         })]);\n     same(\n-        \"{:10$.10s}\",\n+        \"{:10$.10x}\",\n         &[NextArgument(Argument {\n             position: ArgumentImplicitlyIs(0),\n             format: FormatSpec {\n@@ -176,11 +182,12 @@ fn format_counts() {\n                 width: CountIsParam(10),\n                 precision_span: None,\n                 width_span: Some(InnerSpan::new(3, 6)),\n-                ty: \"s\",\n+                ty: \"x\",\n+                ty_span: None,\n             },\n         })]);\n     same(\n-        \"{:.*s}\",\n+        \"{:.*x}\",\n         &[NextArgument(Argument {\n             position: ArgumentImplicitlyIs(1),\n             format: FormatSpec {\n@@ -191,11 +198,12 @@ fn format_counts() {\n                 width: CountImplied,\n                 precision_span: Some(InnerSpan::new(3, 5)),\n                 width_span: None,\n-                ty: \"s\",\n+                ty: \"x\",\n+                ty_span: None,\n             },\n         })]);\n     same(\n-        \"{:.10$s}\",\n+        \"{:.10$x}\",\n         &[NextArgument(Argument {\n             position: ArgumentImplicitlyIs(0),\n             format: FormatSpec {\n@@ -206,11 +214,12 @@ fn format_counts() {\n                 width: CountImplied,\n                 precision_span: Some(InnerSpan::new(3, 7)),\n                 width_span: None,\n-                ty: \"s\",\n+                ty: \"x\",\n+                ty_span: None,\n             },\n         })]);\n     same(\n-        \"{:a$.b$s}\",\n+        \"{:a$.b$?}\",\n         &[NextArgument(Argument {\n             position: ArgumentImplicitlyIs(0),\n             format: FormatSpec {\n@@ -221,7 +230,8 @@ fn format_counts() {\n                 width: CountIsName(Symbol::intern(\"a\")),\n                 precision_span: None,\n                 width_span: None,\n-                ty: \"s\",\n+                ty: \"?\",\n+                ty_span: None,\n             },\n         })]);\n     });\n@@ -241,6 +251,7 @@ fn format_flags() {\n                 precision_span: None,\n                 width_span: None,\n                 ty: \"\",\n+                ty_span: None,\n             },\n         })]);\n     same(\n@@ -256,13 +267,14 @@ fn format_flags() {\n                 precision_span: None,\n                 width_span: None,\n                 ty: \"\",\n+                ty_span: None,\n             },\n         })]);\n }\n #[test]\n fn format_mixture() {\n     same(\n-        \"abcd {3:a} efg\",\n+        \"abcd {3:x} efg\",\n         &[\n             String(\"abcd \"),\n             NextArgument(Argument {\n@@ -275,7 +287,8 @@ fn format_mixture() {\n                     width: CountImplied,\n                     precision_span: None,\n                     width_span: None,\n-                    ty: \"a\",\n+                    ty: \"x\",\n+                    ty_span: None,\n                 },\n             }),\n             String(\" efg\"),"}, {"sha": "25daca9237fd6aa6466d66d352643778e6d68b81", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 55, "deletions": 33, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/12c1e9a193e860090ec3a306964392acae8f7699/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c1e9a193e860090ec3a306964392acae8f7699/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=12c1e9a193e860090ec3a306964392acae8f7699", "patch": "@@ -21,7 +21,7 @@ use std::collections::hash_map::Entry;\n \n #[derive(PartialEq)]\n enum ArgumentType {\n-    Placeholder(String),\n+    Placeholder(&'static str),\n     Count,\n }\n \n@@ -244,7 +244,57 @@ impl<'a, 'b> Context<'a, 'b> {\n                     parse::ArgumentNamed(s) => Named(s),\n                 };\n \n-                let ty = Placeholder(arg.format.ty.to_string());\n+                let ty = Placeholder(match &arg.format.ty[..] {\n+                    \"\" => \"Display\",\n+                    \"?\" => \"Debug\",\n+                    \"e\" => \"LowerExp\",\n+                    \"E\" => \"UpperExp\",\n+                    \"o\" => \"Octal\",\n+                    \"p\" => \"Pointer\",\n+                    \"b\" => \"Binary\",\n+                    \"x\" => \"LowerHex\",\n+                    \"X\" => \"UpperHex\",\n+                    _ => {\n+                        let fmtsp = self.fmtsp;\n+                        let sp = arg.format.ty_span.map(|sp| fmtsp.from_inner(sp));\n+                        let mut err = self.ecx.struct_span_err(\n+                            sp.unwrap_or(fmtsp),\n+                            &format!(\"unknown format trait `{}`\", arg.format.ty),\n+                        );\n+                        err.note(\"the only appropriate formatting traits are:\\n\\\n+                                - ``, which uses the `Display` trait\\n\\\n+                                - `?`, which uses the `Debug` trait\\n\\\n+                                - `e`, which uses the `LowerExp` trait\\n\\\n+                                - `E`, which uses the `UpperExp` trait\\n\\\n+                                - `o`, which uses the `Octal` trait\\n\\\n+                                - `p`, which uses the `Pointer` trait\\n\\\n+                                - `b`, which uses the `Binary` trait\\n\\\n+                                - `x`, which uses the `LowerHex` trait\\n\\\n+                                - `X`, which uses the `UpperHex` trait\");\n+                        if let Some(sp) = sp {\n+                            for (fmt, name) in &[\n+                                (\"\", \"Display\"),\n+                                (\"?\", \"Debug\"),\n+                                (\"e\", \"LowerExp\"),\n+                                (\"E\", \"UpperExp\"),\n+                                (\"o\", \"Octal\"),\n+                                (\"p\", \"Pointer\"),\n+                                (\"b\", \"Binary\"),\n+                                (\"x\", \"LowerHex\"),\n+                                (\"X\", \"UpperHex\"),\n+                            ] {\n+                                err.tool_only_span_suggestion(\n+                                    sp,\n+                                    &format!(\"use the `{}` trait\", name),\n+                                    fmt.to_string(),\n+                                    Applicability::MaybeIncorrect,\n+                                );\n+                            }\n+                        }\n+                        err.emit();\n+                        \"<invalid>\"\n+                    }\n+                });\n                 self.verify_arg_type(pos, ty);\n                 self.curpiece += 1;\n             }\n@@ -590,6 +640,7 @@ impl<'a, 'b> Context<'a, 'b> {\n                         width: parse::CountImplied,\n                         width_span: None,\n                         ty: arg.format.ty,\n+                        ty_span: arg.format.ty_span,\n                     },\n                 };\n \n@@ -761,37 +812,8 @@ impl<'a, 'b> Context<'a, 'b> {\n         sp = ecx.with_def_site_ctxt(sp);\n         let arg = ecx.expr_ident(sp, arg);\n         let trait_ = match *ty {\n-            Placeholder(ref tyname) => {\n-                match &tyname[..] {\n-                    \"\" => \"Display\",\n-                    \"?\" => \"Debug\",\n-                    \"e\" => \"LowerExp\",\n-                    \"E\" => \"UpperExp\",\n-                    \"o\" => \"Octal\",\n-                    \"p\" => \"Pointer\",\n-                    \"b\" => \"Binary\",\n-                    \"x\" => \"LowerHex\",\n-                    \"X\" => \"UpperHex\",\n-                    _ => {\n-                        let mut err = ecx.struct_span_err(\n-                            sp,\n-                            &format!(\"unknown format trait `{}`\", *tyname),\n-                        );\n-                        err.note(\"the only appropriate formatting traits are:\\n\\\n-                                  - ``, which uses the `Display` trait\\n\\\n-                                  - `?`, which uses the `Debug` trait\\n\\\n-                                  - `e`, which uses the `LowerExp` trait\\n\\\n-                                  - `E`, which uses the `UpperExp` trait\\n\\\n-                                  - `o`, which uses the `Octal` trait\\n\\\n-                                  - `p`, which uses the `Pointer` trait\\n\\\n-                                  - `b`, which uses the `Binary` trait\\n\\\n-                                  - `x`, which uses the `LowerHex` trait\\n\\\n-                                  - `X`, which uses the `UpperHex` trait\");\n-                        err.emit();\n-                        return DummyResult::raw_expr(sp, true);\n-                    }\n-                }\n-            }\n+            Placeholder(trait_) if trait_ == \"<invalid>\" => return DummyResult::raw_expr(sp, true),\n+            Placeholder(trait_) => trait_,\n             Count => {\n                 let path = ecx.std_path(&[sym::fmt, sym::ArgumentV1, sym::from_usize]);\n                 return ecx.expr_call_global(macsp, path, vec![arg]);"}, {"sha": "d65ffd85060343ba85fcb4b8a10e64f4d58acbb1", "filename": "src/test/ui/if/ifmt-bad-arg.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/12c1e9a193e860090ec3a306964392acae8f7699/src%2Ftest%2Fui%2Fif%2Fifmt-bad-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/12c1e9a193e860090ec3a306964392acae8f7699/src%2Ftest%2Fui%2Fif%2Fifmt-bad-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fifmt-bad-arg.stderr?ref=12c1e9a193e860090ec3a306964392acae8f7699", "patch": "@@ -257,10 +257,10 @@ LL |     println!(\"{} {:07$} {}\", 1, 3.2, 4);\n    = note: for information about formatting flags, visit https://doc.rust-lang.org/std/fmt/index.html\n \n error: unknown format trait `foo`\n-  --> $DIR/ifmt-bad-arg.rs:86:24\n+  --> $DIR/ifmt-bad-arg.rs:86:17\n    |\n LL |     println!(\"{:foo}\", 1);\n-   |                        ^\n+   |                 ^^^\n    |\n    = note: the only appropriate formatting traits are:\n            - ``, which uses the `Display` trait"}, {"sha": "459432bf4e4266391843e40de84d7d586d36f399", "filename": "src/test/ui/if/ifmt-unknown-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/12c1e9a193e860090ec3a306964392acae8f7699/src%2Ftest%2Fui%2Fif%2Fifmt-unknown-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/12c1e9a193e860090ec3a306964392acae8f7699/src%2Ftest%2Fui%2Fif%2Fifmt-unknown-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fifmt-unknown-trait.stderr?ref=12c1e9a193e860090ec3a306964392acae8f7699", "patch": "@@ -1,8 +1,8 @@\n error: unknown format trait `notimplemented`\n-  --> $DIR/ifmt-unknown-trait.rs:2:34\n+  --> $DIR/ifmt-unknown-trait.rs:2:16\n    |\n LL |     format!(\"{:notimplemented}\", \"3\");\n-   |                                  ^^^\n+   |                ^^^^^^^^^^^^^^\n    |\n    = note: the only appropriate formatting traits are:\n            - ``, which uses the `Display` trait"}]}