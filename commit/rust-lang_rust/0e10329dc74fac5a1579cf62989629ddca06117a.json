{"sha": "0e10329dc74fac5a1579cf62989629ddca06117a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlMTAzMjlkYzc0ZmFjNWExNTc5Y2Y2Mjk4OTYyOWRkY2EwNjExN2E=", "commit": {"author": {"name": "Ga\u00ebtan Cassiers", "email": "gaetan.cassiers@gmail.com", "date": "2015-07-26T10:55:25Z"}, "committer": {"name": "Ga\u00ebtan Cassiers", "email": "gaetan.cassiers@gmail.com", "date": "2015-08-02T11:07:27Z"}, "message": "Separate modules and files listing of reformatting\n\nAs suggested in #141\nCloses #156", "tree": {"sha": "56279435c0873bbaf945259f72727f86242cd8df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56279435c0873bbaf945259f72727f86242cd8df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e10329dc74fac5a1579cf62989629ddca06117a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e10329dc74fac5a1579cf62989629ddca06117a", "html_url": "https://github.com/rust-lang/rust/commit/0e10329dc74fac5a1579cf62989629ddca06117a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e10329dc74fac5a1579cf62989629ddca06117a/comments", "author": {"login": "cassiersg", "id": 9348542, "node_id": "MDQ6VXNlcjkzNDg1NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/9348542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cassiersg", "html_url": "https://github.com/cassiersg", "followers_url": "https://api.github.com/users/cassiersg/followers", "following_url": "https://api.github.com/users/cassiersg/following{/other_user}", "gists_url": "https://api.github.com/users/cassiersg/gists{/gist_id}", "starred_url": "https://api.github.com/users/cassiersg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cassiersg/subscriptions", "organizations_url": "https://api.github.com/users/cassiersg/orgs", "repos_url": "https://api.github.com/users/cassiersg/repos", "events_url": "https://api.github.com/users/cassiersg/events{/privacy}", "received_events_url": "https://api.github.com/users/cassiersg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cassiersg", "id": 9348542, "node_id": "MDQ6VXNlcjkzNDg1NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/9348542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cassiersg", "html_url": "https://github.com/cassiersg", "followers_url": "https://api.github.com/users/cassiersg/followers", "following_url": "https://api.github.com/users/cassiersg/following{/other_user}", "gists_url": "https://api.github.com/users/cassiersg/gists{/gist_id}", "starred_url": "https://api.github.com/users/cassiersg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cassiersg/subscriptions", "organizations_url": "https://api.github.com/users/cassiersg/orgs", "repos_url": "https://api.github.com/users/cassiersg/repos", "events_url": "https://api.github.com/users/cassiersg/events{/privacy}", "received_events_url": "https://api.github.com/users/cassiersg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc43b81200e268160f5c945369c377d765142886", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc43b81200e268160f5c945369c377d765142886", "html_url": "https://github.com/rust-lang/rust/commit/bc43b81200e268160f5c945369c377d765142886"}], "stats": {"total": 138, "additions": 87, "deletions": 51}, "files": [{"sha": "aba6eaa325098387e6073a99b86161c46530a2b2", "filename": "src/changes.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0e10329dc74fac5a1579cf62989629ddca06117a/src%2Fchanges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e10329dc74fac5a1579cf62989629ddca06117a/src%2Fchanges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchanges.rs?ref=0e10329dc74fac5a1579cf62989629ddca06117a", "patch": "@@ -216,10 +216,6 @@ impl<'a> ChangeSet<'a> {\n \n         Ok(None)\n     }\n-\n-    pub fn is_changed(&self, filename: &str) -> bool {\n-        self.file_map.get(filename).expect(\"Unknown filename\").len != 0\n-    }\n }\n \n // Iterates over each file in the ChangSet. Yields the filename and the changed"}, {"sha": "b52ba9b72176084083ea1d60a189f868b08e9b54", "filename": "src/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0e10329dc74fac5a1579cf62989629ddca06117a/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e10329dc74fac5a1579cf62989629ddca06117a/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=0e10329dc74fac5a1579cf62989629ddca06117a", "patch": "@@ -37,7 +37,6 @@ use rustc_driver::{driver, CompilerCalls, Compilation};\n use syntax::ast;\n use syntax::codemap::CodeMap;\n use syntax::diagnostics;\n-use syntax::visit;\n \n use std::path::PathBuf;\n use std::collections::HashMap;\n@@ -64,6 +63,7 @@ mod issues;\n mod rewrite;\n mod string;\n mod comment;\n+mod modules;\n \n const MIN_STRING: usize = 10;\n // When we get scoped annotations, we should have rustfmt::skip.\n@@ -198,7 +198,9 @@ impl fmt::Display for FormatReport {\n // Formatting which depends on the AST.\n fn fmt_ast<'a>(krate: &ast::Crate, codemap: &'a CodeMap, config: &'a Config) -> ChangeSet<'a> {\n     let mut visitor = FmtVisitor::from_codemap(codemap, config);\n-    visit::walk_crate(&mut visitor, krate);\n+    for (path, module) in modules::list_modules(krate, codemap) {\n+        visitor.format_separate_mod(module, path.to_str().unwrap());\n+    }\n     visitor.changes\n }\n "}, {"sha": "04906c44e7a5acf2bd5095c4485f333c36f1474e", "filename": "src/modules.rs", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/0e10329dc74fac5a1579cf62989629ddca06117a/src%2Fmodules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e10329dc74fac5a1579cf62989629ddca06117a/src%2Fmodules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmodules.rs?ref=0e10329dc74fac5a1579cf62989629ddca06117a", "patch": "@@ -0,0 +1,73 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use utils;\n+\n+use std::path::{Path, PathBuf};\n+use std::collections::HashMap;\n+\n+use syntax::ast;\n+use syntax::codemap;\n+use syntax::parse::{parser, token};\n+\n+\n+/// List all the files containing modules of a crate.\n+/// If a file is used twice in a crate, it appears only once.\n+pub fn list_modules<'a>(krate: &'a ast::Crate,\n+                        codemap: &codemap::CodeMap)\n+                        -> HashMap<PathBuf, &'a ast::Mod> {\n+    let mut result = HashMap::new();\n+    let root_filename: PathBuf = codemap.span_to_filename(krate.span).into();\n+    list_submodules(&krate.module, root_filename.parent().unwrap(), codemap, &mut result);\n+    result.insert(root_filename, &krate.module);\n+    result\n+}\n+\n+/// Recursively list all external modules included in a module.\n+fn list_submodules<'a>(module: &'a ast::Mod,\n+                       search_dir: &Path,\n+                       codemap: &codemap::CodeMap,\n+                       result: &mut HashMap<PathBuf, &'a ast::Mod>) {\n+    debug!(\"list_submodules: search_dir: {:?}\", search_dir);\n+    for item in module.items.iter() {\n+        if let ast::ItemMod(ref sub_mod) = item.node {\n+            if !utils::contains_skip(&item.attrs) {\n+                let is_internal = codemap.span_to_filename(item.span) ==\n+                                  codemap.span_to_filename(sub_mod.inner);\n+                let dir_path = if is_internal {\n+                    let dir: &str = &token::get_ident(item.ident);\n+                    search_dir.join(dir)\n+                } else {\n+                    let mod_path = module_file(item.ident, &item.attrs, search_dir, codemap);\n+                    let dir_path = mod_path.parent().unwrap().to_owned();\n+                    result.insert(mod_path, sub_mod);\n+                    dir_path\n+                };\n+                list_submodules(sub_mod, &dir_path, codemap, result);\n+            }\n+        }\n+    }\n+}\n+\n+/// Find the file corresponding to an external mod\n+fn module_file(id: ast::Ident,\n+               attrs: &[ast::Attribute],\n+               dir_path: &Path,\n+               codemap: &codemap::CodeMap)\n+               -> PathBuf {\n+    if let Some(path) = parser::Parser::submod_path_from_attr(attrs, &dir_path) {\n+        return path;\n+    }\n+\n+    match parser::Parser::default_submod_path(id, &dir_path, codemap).result {\n+        Ok(parser::ModulePathSuccess { path, .. }) => path,\n+        Err(_) => panic!(\"Couldn't find module {}\", token::get_ident(id))\n+    }\n+}"}, {"sha": "718a540fe94fabeec387248cb0278894ec302d27", "filename": "src/visitor.rs", "status": "modified", "additions": 3, "deletions": 45, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/0e10329dc74fac5a1579cf62989629ddca06117a/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e10329dc74fac5a1579cf62989629ddca06117a/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=0e10329dc74fac5a1579cf62989629ddca06117a", "patch": "@@ -11,8 +11,6 @@\n use syntax::ast;\n use syntax::codemap::{self, CodeMap, Span, BytePos};\n use syntax::visit;\n-use syntax::parse::parser;\n-use std::path::PathBuf;\n \n use utils;\n use config::Config;\n@@ -197,7 +195,7 @@ impl<'a, 'v> visit::Visitor<'v> for FmtVisitor<'a> {\n             }\n             ast::Item_::ItemMod(ref module) => {\n                 self.format_missing_with_indent(item.span.lo);\n-                self.format_mod(module, item.span, item.ident, &item.attrs);\n+                self.format_mod(module, item.span, item.ident);\n             }\n             _ => {\n                 visit::walk_item(self, item);\n@@ -237,12 +235,6 @@ impl<'a, 'v> visit::Visitor<'v> for FmtVisitor<'a> {\n     fn visit_mac(&mut self, mac: &'v ast::Mac) {\n         visit::walk_mac(self, mac)\n     }\n-\n-    fn visit_mod(&mut self, m: &'v ast::Mod, s: Span, _: ast::NodeId) {\n-        // This is only called for the root module\n-        let filename = self.codemap.span_to_filename(s);\n-        self.format_separate_mod(m, &filename);\n-    }\n }\n \n impl<'a> FmtVisitor<'a> {\n@@ -322,7 +314,7 @@ impl<'a> FmtVisitor<'a> {\n         result\n     }\n \n-    fn format_mod(&mut self, m: &ast::Mod, s: Span, ident: ast::Ident, attrs: &[ast::Attribute]) {\n+    fn format_mod(&mut self, m: &ast::Mod, s: Span, ident: ast::Ident) {\n         debug!(\"FmtVisitor::format_mod: ident: {:?}, span: {:?}\", ident, s);\n \n         // Decide whether this is an inline mod or an external mod.\n@@ -337,49 +329,15 @@ impl<'a> FmtVisitor<'a> {\n             visit::walk_mod(self, m);\n             debug!(\"... last_pos after: {:?}\", self.last_pos);\n             self.block_indent -= self.config.tab_spaces;\n-        } else {\n-            debug!(\"FmtVisitor::format_mod: external mod\");\n-            let file_path = self.module_file(ident, attrs, local_file_name);\n-            let filename = file_path.to_str().unwrap();\n-            if self.changes.is_changed(filename) {\n-                // The file has already been reformatted, do nothing\n-            } else {\n-                self.format_separate_mod(m, filename);\n-            }\n-        }\n-\n-        debug!(\"FmtVisitor::format_mod: exit\");\n-    }\n-\n-    /// Find the file corresponding to an external mod\n-    fn module_file(&self, id: ast::Ident, attrs: &[ast::Attribute], filename: String) -> PathBuf {\n-        let dir_path = {\n-            let mut path = PathBuf::from(&filename);\n-            path.pop();\n-            path\n-        };\n-\n-        if let Some(path) = parser::Parser::submod_path_from_attr(attrs, &dir_path) {\n-            return path;\n-        }\n-\n-        match parser::Parser::default_submod_path(id, &dir_path, &self.codemap).result {\n-            Ok(parser::ModulePathSuccess { path, .. }) => path,\n-            _ => panic!(\"Couldn't find module {}\", id)\n         }\n     }\n \n-    /// Format the content of a module into a separate file\n-    fn format_separate_mod(&mut self, m: &ast::Mod, filename: &str) {\n-        let last_pos = self.last_pos;\n-        let block_indent = self.block_indent;\n+    pub fn format_separate_mod(&mut self, m: &ast::Mod, filename: &str) {\n         let filemap = self.codemap.get_filemap(filename);\n         self.last_pos = filemap.start_pos;\n         self.block_indent = 0;\n         visit::walk_mod(self, m);\n         self.format_missing(filemap.end_pos);\n-        self.last_pos = last_pos;\n-        self.block_indent = block_indent;\n     }\n \n     fn format_import(&mut self, vis: ast::Visibility, vp: &ast::ViewPath, span: Span) {"}, {"sha": "d04e49570a4f64b034dc130df6ce61df6ec6dfe7", "filename": "tests/source/nestedmod/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0e10329dc74fac5a1579cf62989629ddca06117a/tests%2Fsource%2Fnestedmod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e10329dc74fac5a1579cf62989629ddca06117a/tests%2Fsource%2Fnestedmod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fnestedmod%2Fmod.rs?ref=0e10329dc74fac5a1579cf62989629ddca06117a", "patch": "@@ -4,6 +4,7 @@ mod mod2b;\n \n mod mymod1 {\n           use mod2a::{Foo,Bar};\n+mod mod3a;\n }\n \n #[path=\"mod2c.rs\"]"}, {"sha": "f28bde5e56dbbcd3572cf6c65680c6aede221f5c", "filename": "tests/source/nestedmod/mymod1/mod3a.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e10329dc74fac5a1579cf62989629ddca06117a/tests%2Fsource%2Fnestedmod%2Fmymod1%2Fmod3a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e10329dc74fac5a1579cf62989629ddca06117a/tests%2Fsource%2Fnestedmod%2Fmymod1%2Fmod3a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fnestedmod%2Fmymod1%2Fmod3a.rs?ref=0e10329dc74fac5a1579cf62989629ddca06117a", "patch": "@@ -0,0 +1,2 @@\n+// Another mod\n+fn a(          ) {       }"}, {"sha": "b3456bf0d0fb9b0de19effc44b365fe3ee973cd8", "filename": "tests/target/nestedmod/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0e10329dc74fac5a1579cf62989629ddca06117a/tests%2Ftarget%2Fnestedmod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e10329dc74fac5a1579cf62989629ddca06117a/tests%2Ftarget%2Fnestedmod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fnestedmod%2Fmod.rs?ref=0e10329dc74fac5a1579cf62989629ddca06117a", "patch": "@@ -4,6 +4,7 @@ mod mod2b;\n \n mod mymod1 {\n     use mod2a::{Foo, Bar};\n+    mod mod3a;\n }\n \n #[path=\"mod2c.rs\"]"}, {"sha": "a6399f5565d4684b9f9e96a2fcb79ad53144a0b9", "filename": "tests/target/nestedmod/mymod1/mod3a.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0e10329dc74fac5a1579cf62989629ddca06117a/tests%2Ftarget%2Fnestedmod%2Fmymod1%2Fmod3a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e10329dc74fac5a1579cf62989629ddca06117a/tests%2Ftarget%2Fnestedmod%2Fmymod1%2Fmod3a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fnestedmod%2Fmymod1%2Fmod3a.rs?ref=0e10329dc74fac5a1579cf62989629ddca06117a", "patch": "@@ -0,0 +1,3 @@\n+// Another mod\n+fn a() {\n+}"}]}