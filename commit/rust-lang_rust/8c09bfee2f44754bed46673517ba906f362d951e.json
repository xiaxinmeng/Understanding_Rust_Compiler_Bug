{"sha": "8c09bfee2f44754bed46673517ba906f362d951e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjMDliZmVlMmY0NDc1NGJlZDQ2NjczNTE3YmE5MDZmMzYyZDk1MWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-30T09:17:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-30T09:17:35Z"}, "message": "Auto merge of #1026 - RalfJung:rustup, r=RalfJung\n\nrustup for span in intrinsic emulation", "tree": {"sha": "987dd084bf50c2aa0b43fa67d13f3f2de1eba21b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/987dd084bf50c2aa0b43fa67d13f3f2de1eba21b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c09bfee2f44754bed46673517ba906f362d951e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c09bfee2f44754bed46673517ba906f362d951e", "html_url": "https://github.com/rust-lang/rust/commit/8c09bfee2f44754bed46673517ba906f362d951e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c09bfee2f44754bed46673517ba906f362d951e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4dbc90b44399d48df7a3b4463954e913d1ebbc45", "url": "https://api.github.com/repos/rust-lang/rust/commits/4dbc90b44399d48df7a3b4463954e913d1ebbc45", "html_url": "https://github.com/rust-lang/rust/commit/4dbc90b44399d48df7a3b4463954e913d1ebbc45"}, {"sha": "15ae234a42bf45efeb8fae3d1c7a080a10c465cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/15ae234a42bf45efeb8fae3d1c7a080a10c465cd", "html_url": "https://github.com/rust-lang/rust/commit/15ae234a42bf45efeb8fae3d1c7a080a10c465cd"}], "stats": {"total": 12, "additions": 7, "deletions": 5}, "files": [{"sha": "8fb4c0987318a1018ac615503688a8340cbdb517", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c09bfee2f44754bed46673517ba906f362d951e/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/8c09bfee2f44754bed46673517ba906f362d951e/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=8c09bfee2f44754bed46673517ba906f362d951e", "patch": "@@ -1 +1 @@\n-084edc426f2e7e4bbedb5c6afa7fc422a52ee379\n+aa69777ea2902208b24b3fd77767d577ceaf6386"}, {"sha": "c07fca68199cec5aba9526f296d677792858e9f7", "filename": "src/machine.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8c09bfee2f44754bed46673517ba906f362d951e/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c09bfee2f44754bed46673517ba906f362d951e/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=8c09bfee2f44754bed46673517ba906f362d951e", "patch": "@@ -14,8 +14,7 @@ use rustc::ty::{\n     layout::{LayoutOf, Size},\n     Ty, TyCtxt,\n };\n-use syntax::attr;\n-use syntax::symbol::sym;\n+use syntax::{attr, source_map::Span, symbol::sym};\n \n use crate::*;\n \n@@ -192,11 +191,12 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n     #[inline(always)]\n     fn call_intrinsic(\n         ecx: &mut rustc_mir::interpret::InterpCx<'mir, 'tcx, Self>,\n+        span: Span,\n         instance: ty::Instance<'tcx>,\n         args: &[OpTy<'tcx, Tag>],\n         dest: PlaceTy<'tcx, Tag>,\n     ) -> InterpResult<'tcx> {\n-        ecx.call_intrinsic(instance, args, dest)\n+        ecx.call_intrinsic(span, instance, args, dest)\n     }\n \n     #[inline(always)]"}, {"sha": "9e47c095d6d315831227fc68d699608c34c4f25e", "filename": "src/shims/intrinsics.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8c09bfee2f44754bed46673517ba906f362d951e/src%2Fshims%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c09bfee2f44754bed46673517ba906f362d951e/src%2Fshims%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics.rs?ref=8c09bfee2f44754bed46673517ba906f362d951e", "patch": "@@ -5,6 +5,7 @@ use rustc::mir;\n use rustc::mir::interpret::{InterpResult, PointerArithmetic};\n use rustc::ty::layout::{self, LayoutOf, Size, Align};\n use rustc::ty;\n+use syntax::source_map::Span;\n \n use crate::{\n     PlaceTy, OpTy, Immediate, Scalar, Tag,\n@@ -15,12 +16,13 @@ impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tc\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n     fn call_intrinsic(\n         &mut self,\n+        span: Span,\n         instance: ty::Instance<'tcx>,\n         args: &[OpTy<'tcx, Tag>],\n         dest: PlaceTy<'tcx, Tag>,\n     ) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n-        if this.emulate_intrinsic(instance, args, dest)? {\n+        if this.emulate_intrinsic(span, instance, args, dest)? {\n             return Ok(());\n         }\n         let tcx = &{this.tcx.tcx};"}]}