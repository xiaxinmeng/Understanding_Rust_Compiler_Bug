{"sha": "f07c74d93ad2b5292267e5829c4c8493211aa835", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwN2M3NGQ5M2FkMmI1MjkyMjY3ZTU4MjljNGM4NDkzMjExYWE4MzU=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-01-06T13:17:38Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-01-07T13:31:24Z"}, "message": "std::trie: remove some obsolete internal iterators.", "tree": {"sha": "44bf06183d338d4edc8870f0e8980beb8972289b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44bf06183d338d4edc8870f0e8980beb8972289b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f07c74d93ad2b5292267e5829c4c8493211aa835", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f07c74d93ad2b5292267e5829c4c8493211aa835", "html_url": "https://github.com/rust-lang/rust/commit/f07c74d93ad2b5292267e5829c4c8493211aa835", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f07c74d93ad2b5292267e5829c4c8493211aa835/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0643ee9ae5726edaa382a1a125319688477ec98", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0643ee9ae5726edaa382a1a125319688477ec98", "html_url": "https://github.com/rust-lang/rust/commit/a0643ee9ae5726edaa382a1a125319688477ec98"}], "stats": {"total": 124, "additions": 11, "deletions": 113}, "files": [{"sha": "59f7f2a2ffcb1d8d3564b8dd8a2c1d0628722719", "filename": "src/libextra/serialize.rs", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f07c74d93ad2b5292267e5829c4c8493211aa835/src%2Flibextra%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07c74d93ad2b5292267e5829c4c8493211aa835/src%2Flibextra%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fserialize.rs?ref=f07c74d93ad2b5292267e5829c4c8493211aa835", "patch": "@@ -768,14 +768,11 @@ impl<\n > Encodable<E> for TrieMap<V> {\n     fn encode(&self, e: &mut E) {\n         e.emit_map(self.len(), |e| {\n-            let mut i = 0;\n-            self.each(|key, val| {\n-                e.emit_map_elt_key(i, |e| key.encode(e));\n-                e.emit_map_elt_val(i, |e| val.encode(e));\n-                i += 1;\n-                true\n+                for (i, (key, val)) in self.iter().enumerate() {\n+                    e.emit_map_elt_key(i, |e| key.encode(e));\n+                    e.emit_map_elt_val(i, |e| val.encode(e));\n+                }\n             });\n-        })\n     }\n }\n \n@@ -799,13 +796,10 @@ impl<\n impl<S: Encoder> Encodable<S> for TrieSet {\n     fn encode(&self, s: &mut S) {\n         s.emit_seq(self.len(), |s| {\n-            let mut i = 0;\n-            self.each(|e| {\n-                s.emit_seq_elt(i, |s| e.encode(s));\n-                i += 1;\n-                true\n-            });\n-        })\n+                for (i, e) in self.iter().enumerate() {\n+                    s.emit_seq_elt(i, |s| e.encode(s));\n+                }\n+            })\n     }\n }\n "}, {"sha": "08805c88c7bf54155b669b44a17396966faa174a", "filename": "src/libstd/trie.rs", "status": "modified", "additions": 3, "deletions": 99, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/f07c74d93ad2b5292267e5829c4c8493211aa835/src%2Flibstd%2Ftrie.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07c74d93ad2b5292267e5829c4c8493211aa835/src%2Flibstd%2Ftrie.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftrie.rs?ref=f07c74d93ad2b5292267e5829c4c8493211aa835", "patch": "@@ -111,30 +111,6 @@ impl<T> TrieMap<T> {\n         self.root.each_reverse(f)\n     }\n \n-    /// Visit all key-value pairs in order\n-    #[inline]\n-    pub fn each<'a>(&'a self, f: |&uint, &'a T| -> bool) -> bool {\n-        self.root.each(f)\n-    }\n-\n-    /// Visit all keys in order\n-    #[inline]\n-    pub fn each_key(&self, f: |&uint| -> bool) -> bool {\n-        self.each(|k, _| f(k))\n-    }\n-\n-    /// Visit all values in order\n-    #[inline]\n-    pub fn each_value<'a>(&'a self, f: |&'a T| -> bool) -> bool {\n-        self.each(|_, v| f(v))\n-    }\n-\n-    /// Iterate over the map and mutate the contained values\n-    #[inline]\n-    pub fn mutate_values(&mut self, f: |&uint, &mut T| -> bool) -> bool {\n-        self.root.mutate_values(f)\n-    }\n-\n     /// Visit all keys in reverse order\n     #[inline]\n     pub fn each_key_reverse(&self, f: |&uint| -> bool) -> bool {\n@@ -331,10 +307,6 @@ impl TrieSet {\n         self.map.remove(value)\n     }\n \n-    /// Visit all values in order\n-    #[inline]\n-    pub fn each(&self, f: |&uint| -> bool) -> bool { self.map.each_key(f) }\n-\n     /// Visit all values in reverse order\n     #[inline]\n     pub fn each_reverse(&self, f: |&uint| -> bool) -> bool {\n@@ -395,17 +367,6 @@ impl<T> TrieNode<T> {\n }\n \n impl<T> TrieNode<T> {\n-    fn each<'a>(&'a self, f: |&uint, &'a T| -> bool) -> bool {\n-        for elt in self.children.iter() {\n-            match *elt {\n-                Internal(ref x) => if !x.each(|i,t| f(i,t)) { return false },\n-                External(k, ref v) => if !f(&k, v) { return false },\n-                Nothing => ()\n-            }\n-        }\n-        true\n-    }\n-\n     fn each_reverse<'a>(&'a self, f: |&uint, &'a T| -> bool) -> bool {\n         for elt in self.children.rev_iter() {\n             match *elt {\n@@ -416,19 +377,6 @@ impl<T> TrieNode<T> {\n         }\n         true\n     }\n-\n-    fn mutate_values<'a>(&'a mut self, f: |&uint, &mut T| -> bool) -> bool {\n-        for child in self.children.mut_iter() {\n-            match *child {\n-                Internal(ref mut x) => if !x.mutate_values(|i,t| f(i,t)) {\n-                    return false\n-                },\n-                External(k, ref mut v) => if !f(&k, v) { return false },\n-                Nothing => ()\n-            }\n-        }\n-        true\n-    }\n }\n \n // if this was done via a trait, the key could be generic\n@@ -691,46 +639,6 @@ mod test_map {\n         }\n     }\n \n-    #[test]\n-    fn test_each() {\n-        let mut m = TrieMap::new();\n-\n-        assert!(m.insert(3, 6));\n-        assert!(m.insert(0, 0));\n-        assert!(m.insert(4, 8));\n-        assert!(m.insert(2, 4));\n-        assert!(m.insert(1, 2));\n-\n-        let mut n = 0;\n-        m.each(|k, v| {\n-            assert_eq!(*k, n);\n-            assert_eq!(*v, n * 2);\n-            n += 1;\n-            true\n-        });\n-    }\n-\n-    #[test]\n-    fn test_each_break() {\n-        let mut m = TrieMap::new();\n-\n-        for x in range(uint::max_value - 10000, uint::max_value).invert() {\n-            m.insert(x, x / 2);\n-        }\n-\n-        let mut n = uint::max_value - 10000;\n-        m.each(|k, v| {\n-            if n == uint::max_value - 5000 { false } else {\n-                assert!(n < uint::max_value - 5000);\n-\n-                assert_eq!(*k, n);\n-                assert_eq!(*v, n / 2);\n-                n += 1;\n-                true\n-            }\n-        });\n-    }\n-\n     #[test]\n     fn test_each_reverse() {\n         let mut m = TrieMap::new();\n@@ -943,13 +851,9 @@ mod test_set {\n \n         let expected = [x, y];\n \n-        let mut i = 0;\n-\n-        trie.each(|x| {\n-            assert_eq!(expected[i], *x);\n-            i += 1;\n-            true\n-        });\n+        for (i, x) in trie.iter().enumerate() {\n+            assert_eq!(expected[i], x);\n+        }\n     }\n \n     #[test]"}]}