{"sha": "28cdbc2a641737b291de4e54f9c6cf070d7309be", "node_id": "C_kwDOAAsO6NoAKDI4Y2RiYzJhNjQxNzM3YjI5MWRlNGU1NGY5YzZjZjA3MGQ3MzA5YmU", "commit": {"author": {"name": "Urgau", "email": "urgau@numericable.fr", "date": "2023-03-26T10:25:08Z"}, "committer": {"name": "Urgau", "email": "urgau@numericable.fr", "date": "2023-05-10T17:36:01Z"}, "message": "Uplift clippy::drop_ref to rustc", "tree": {"sha": "b0e8fee75b2eb6c3da460b26bb28fa3f89c7cc8f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0e8fee75b2eb6c3da460b26bb28fa3f89c7cc8f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28cdbc2a641737b291de4e54f9c6cf070d7309be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28cdbc2a641737b291de4e54f9c6cf070d7309be", "html_url": "https://github.com/rust-lang/rust/commit/28cdbc2a641737b291de4e54f9c6cf070d7309be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28cdbc2a641737b291de4e54f9c6cf070d7309be/comments", "author": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7dab6094bb5ca154e6642b9427cffb3370812409", "url": "https://api.github.com/repos/rust-lang/rust/commits/7dab6094bb5ca154e6642b9427cffb3370812409", "html_url": "https://github.com/rust-lang/rust/commit/7dab6094bb5ca154e6642b9427cffb3370812409"}], "stats": {"total": 341, "additions": 341, "deletions": 0}, "files": [{"sha": "7e6d65db0e8da1139337dbd9311a0518f59e6df5", "filename": "compiler/rustc_lint/messages.ftl", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/28cdbc2a641737b291de4e54f9c6cf070d7309be/compiler%2Frustc_lint%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/28cdbc2a641737b291de4e54f9c6cf070d7309be/compiler%2Frustc_lint%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fmessages.ftl?ref=28cdbc2a641737b291de4e54f9c6cf070d7309be", "patch": "@@ -520,3 +520,6 @@ lint_opaque_hidden_inferred_bound = opaque type `{$ty}` does not satisfy its ass\n     .specifically = this associated type bound is unsatisfied for `{$proj_ty}`\n \n lint_opaque_hidden_inferred_bound_sugg = add this bound\n+\n+lint_drop_ref = calls to `std::mem::drop` with a reference instead of an owned value\n+    .note = argument has type `{$arg_ty}`"}, {"sha": "734a43af4a2d41102233b642c37ddc19f4dce201", "filename": "compiler/rustc_lint/src/drop_forget_useless.rs", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/28cdbc2a641737b291de4e54f9c6cf070d7309be/compiler%2Frustc_lint%2Fsrc%2Fdrop_forget_useless.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28cdbc2a641737b291de4e54f9c6cf070d7309be/compiler%2Frustc_lint%2Fsrc%2Fdrop_forget_useless.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fdrop_forget_useless.rs?ref=28cdbc2a641737b291de4e54f9c6cf070d7309be", "patch": "@@ -0,0 +1,76 @@\n+use rustc_hir::{Arm, Expr, ExprKind, Node};\n+use rustc_span::sym;\n+\n+use crate::{lints::DropRefDiag, LateContext, LateLintPass, LintContext};\n+\n+declare_lint! {\n+    /// The `drop_ref` lint checks for calls to `std::mem::drop` with a reference\n+    /// instead of an owned value.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust\n+    /// # fn operation_that_requires_mutex_to_be_unlocked() {} // just to make it compile\n+    /// # let mutex = std::sync::Mutex::new(1); // just to make it compile\n+    /// let mut lock_guard = mutex.lock();\n+    /// std::mem::drop(&lock_guard); // Should have been drop(lock_guard), mutex\n+    /// // still locked\n+    /// operation_that_requires_mutex_to_be_unlocked();\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// Calling `drop` on a reference will only drop the\n+    /// reference itself, which is a no-op. It will not call the `drop` method (from\n+    /// the `Drop` trait implementation) on the underlying referenced value, which\n+    /// is likely what was intended.\n+    pub DROP_REF,\n+    Warn,\n+    \"calls to `std::mem::drop` with a reference instead of an owned value\"\n+}\n+\n+declare_lint_pass!(DropForgetUseless => [DROP_REF]);\n+\n+impl<'tcx> LateLintPass<'tcx> for DropForgetUseless {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n+        if let ExprKind::Call(path, [arg]) = expr.kind\n+            && let ExprKind::Path(ref qpath) = path.kind\n+            && let Some(def_id) = cx.qpath_res(qpath, path.hir_id).opt_def_id()\n+            && let Some(fn_name) = cx.tcx.get_diagnostic_name(def_id)\n+        {\n+            let arg_ty = cx.typeck_results().expr_ty(arg);\n+            let drop_is_single_call_in_arm = is_single_call_in_arm(cx, arg, expr);\n+            match fn_name {\n+                sym::mem_drop if arg_ty.is_ref() && !drop_is_single_call_in_arm => {\n+                    cx.emit_spanned_lint(DROP_REF, expr.span, DropRefDiag { arg_ty, note: arg.span });\n+                },\n+                _ => return,\n+            };\n+        }\n+    }\n+}\n+\n+// Dropping returned value of a function, as in the following snippet is considered idiomatic, see\n+// rust-lang/rust-clippy#9482 for examples.\n+//\n+// ```\n+// match <var> {\n+//     <pat> => drop(fn_with_side_effect_and_returning_some_value()),\n+//     ..\n+// }\n+// ```\n+fn is_single_call_in_arm<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    arg: &'tcx Expr<'_>,\n+    drop_expr: &'tcx Expr<'_>,\n+) -> bool {\n+    if matches!(arg.kind, ExprKind::Call(..) | ExprKind::MethodCall(..)) {\n+        let parent_node = cx.tcx.hir().find_parent(drop_expr.hir_id);\n+        if let Some(Node::Arm(Arm { body, .. })) = &parent_node {\n+            return body.hir_id == drop_expr.hir_id;\n+        }\n+    }\n+    false\n+}"}, {"sha": "5c7016633c2d1568ae0f60cf8ea9202e1d1bb99b", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/28cdbc2a641737b291de4e54f9c6cf070d7309be/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28cdbc2a641737b291de4e54f9c6cf070d7309be/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=28cdbc2a641737b291de4e54f9c6cf070d7309be", "patch": "@@ -52,6 +52,7 @@ mod array_into_iter;\n pub mod builtin;\n mod context;\n mod deref_into_dyn_supertrait;\n+mod drop_forget_useless;\n mod early;\n mod enum_intrinsics_non_enums;\n mod errors;\n@@ -96,6 +97,7 @@ use rustc_span::Span;\n use array_into_iter::ArrayIntoIter;\n use builtin::*;\n use deref_into_dyn_supertrait::*;\n+use drop_forget_useless::*;\n use enum_intrinsics_non_enums::EnumIntrinsicsNonEnums;\n use for_loops_over_fallibles::*;\n use hidden_unicode_codepoints::*;\n@@ -201,6 +203,7 @@ late_lint_methods!(\n         [\n             ForLoopsOverFallibles: ForLoopsOverFallibles,\n             DerefIntoDynSupertrait: DerefIntoDynSupertrait,\n+            DropForgetUseless: DropForgetUseless,\n             HardwiredLints: HardwiredLints,\n             ImproperCTypesDeclarations: ImproperCTypesDeclarations,\n             ImproperCTypesDefinitions: ImproperCTypesDefinitions,"}, {"sha": "a8696c81ab638fa5009a8cb01043baae12d7fbf0", "filename": "compiler/rustc_lint/src/lints.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/28cdbc2a641737b291de4e54f9c6cf070d7309be/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28cdbc2a641737b291de4e54f9c6cf070d7309be/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flints.rs?ref=28cdbc2a641737b291de4e54f9c6cf070d7309be", "patch": "@@ -662,6 +662,15 @@ pub struct ForLoopsOverFalliblesSuggestion<'a> {\n     pub end_span: Span,\n }\n \n+// drop_ref.rs\n+#[derive(LintDiagnostic)]\n+#[diag(lint_drop_ref)]\n+pub struct DropRefDiag<'a> {\n+    pub arg_ty: Ty<'a>,\n+    #[note]\n+    pub note: Span,\n+}\n+\n // hidden_unicode_codepoints.rs\n #[derive(LintDiagnostic)]\n #[diag(lint_hidden_unicode_codepoints)]"}, {"sha": "db4f7569f6fa3ac64a68ce3b1f0fa056afba42db", "filename": "tests/ui/lint/drop_ref.rs", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/28cdbc2a641737b291de4e54f9c6cf070d7309be/tests%2Fui%2Flint%2Fdrop_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28cdbc2a641737b291de4e54f9c6cf070d7309be/tests%2Fui%2Flint%2Fdrop_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fdrop_ref.rs?ref=28cdbc2a641737b291de4e54f9c6cf070d7309be", "patch": "@@ -0,0 +1,99 @@\n+// check-pass\n+\n+#![warn(drop_ref)]\n+\n+struct SomeStruct;\n+\n+fn main() {\n+    drop(&SomeStruct); //~ WARN calls to `std::mem::drop`\n+\n+    let mut owned1 = SomeStruct;\n+    drop(&owned1); //~ WARN calls to `std::mem::drop`\n+    drop(&&owned1); //~ WARN calls to `std::mem::drop`\n+    drop(&mut owned1); //~ WARN calls to `std::mem::drop`\n+    drop(owned1);\n+\n+    let reference1 = &SomeStruct;\n+    drop(reference1); //~ WARN calls to `std::mem::drop`\n+\n+    let reference2 = &mut SomeStruct;\n+    drop(reference2); //~ WARN calls to `std::mem::drop`\n+\n+    let ref reference3 = SomeStruct;\n+    drop(reference3); //~ WARN calls to `std::mem::drop`\n+}\n+\n+#[allow(dead_code)]\n+fn test_generic_fn_drop<T>(val: T) {\n+    drop(&val); //~ WARN calls to `std::mem::drop`\n+    drop(val);\n+}\n+\n+#[allow(dead_code)]\n+fn test_similarly_named_function() {\n+    fn drop<T>(_val: T) {}\n+    drop(&SomeStruct); //OK; call to unrelated function which happens to have the same name\n+    std::mem::drop(&SomeStruct); //~ WARN calls to `std::mem::drop`\n+}\n+\n+#[derive(Copy, Clone)]\n+pub struct Error;\n+fn produce_half_owl_error() -> Result<(), Error> {\n+    Ok(())\n+}\n+\n+fn produce_half_owl_ok() -> Result<bool, ()> {\n+    Ok(true)\n+}\n+\n+#[allow(dead_code)]\n+fn test_owl_result() -> Result<(), ()> {\n+    produce_half_owl_error().map_err(|_| ())?;\n+    produce_half_owl_ok().map(|_| ())?;\n+    // the following should not be linted,\n+    // we should not force users to use toilet closures\n+    // to produce owl results when drop is more convenient\n+    produce_half_owl_error().map_err(drop)?;\n+    produce_half_owl_ok().map_err(drop)?;\n+    Ok(())\n+}\n+\n+#[allow(dead_code)]\n+fn test_owl_result_2() -> Result<u8, ()> {\n+    produce_half_owl_error().map_err(|_| ())?;\n+    produce_half_owl_ok().map(|_| ())?;\n+    // the following should not be linted,\n+    // we should not force users to use toilet closures\n+    // to produce owl results when drop is more convenient\n+    produce_half_owl_error().map_err(drop)?;\n+    produce_half_owl_ok().map(drop)?;\n+    Ok(1)\n+}\n+\n+#[allow(unused)]\n+#[allow(clippy::unit_cmp)]\n+fn issue10122(x: u8) {\n+    // This is a function which returns a reference and has a side-effect, which means\n+    // that calling drop() on the function is considered an idiomatic way of achieving\n+    // the side-effect in a match arm.\n+    fn println_and<T>(t: &T) -> &T {\n+        println!(\"foo\");\n+        t\n+    }\n+\n+    match x {\n+        // Don't lint (copy type), we only care about side-effects\n+        0 => drop(println_and(&12)),\n+        // Don't lint (no copy type), we only care about side-effects\n+        1 => drop(println_and(&String::new())),\n+        2 => {\n+            // Lint, even if we only care about the side-effect, it's already in a block\n+            drop(println_and(&13)); //~ WARN calls to `std::mem::drop`\n+        },\n+        // Lint, idiomatic use is only in body of `Arm`\n+        3 if drop(println_and(&14)) == () => (), //~ WARN calls to `std::mem::drop`\n+         // Lint, not a fn/method call\n+        4 => drop(&2), //~ WARN calls to `std::mem::drop`\n+        _ => (),\n+    }\n+}"}, {"sha": "34e4050abcf6d8d88cf59a05fe2ee7efbac8494d", "filename": "tests/ui/lint/drop_ref.stderr", "status": "added", "additions": 151, "deletions": 0, "changes": 151, "blob_url": "https://github.com/rust-lang/rust/blob/28cdbc2a641737b291de4e54f9c6cf070d7309be/tests%2Fui%2Flint%2Fdrop_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28cdbc2a641737b291de4e54f9c6cf070d7309be/tests%2Fui%2Flint%2Fdrop_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fdrop_ref.stderr?ref=28cdbc2a641737b291de4e54f9c6cf070d7309be", "patch": "@@ -0,0 +1,151 @@\n+warning: calls to `std::mem::drop` with a reference instead of an owned value\n+  --> $DIR/drop_ref.rs:8:5\n+   |\n+LL |     drop(&SomeStruct);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+note: argument has type `&SomeStruct`\n+  --> $DIR/drop_ref.rs:8:10\n+   |\n+LL |     drop(&SomeStruct);\n+   |          ^^^^^^^^^^^\n+note: the lint level is defined here\n+  --> $DIR/drop_ref.rs:3:9\n+   |\n+LL | #![warn(drop_ref)]\n+   |         ^^^^^^^^\n+\n+warning: calls to `std::mem::drop` with a reference instead of an owned value\n+  --> $DIR/drop_ref.rs:11:5\n+   |\n+LL |     drop(&owned1);\n+   |     ^^^^^^^^^^^^^\n+   |\n+note: argument has type `&SomeStruct`\n+  --> $DIR/drop_ref.rs:11:10\n+   |\n+LL |     drop(&owned1);\n+   |          ^^^^^^^\n+\n+warning: calls to `std::mem::drop` with a reference instead of an owned value\n+  --> $DIR/drop_ref.rs:12:5\n+   |\n+LL |     drop(&&owned1);\n+   |     ^^^^^^^^^^^^^^\n+   |\n+note: argument has type `&&SomeStruct`\n+  --> $DIR/drop_ref.rs:12:10\n+   |\n+LL |     drop(&&owned1);\n+   |          ^^^^^^^^\n+\n+warning: calls to `std::mem::drop` with a reference instead of an owned value\n+  --> $DIR/drop_ref.rs:13:5\n+   |\n+LL |     drop(&mut owned1);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+note: argument has type `&mut SomeStruct`\n+  --> $DIR/drop_ref.rs:13:10\n+   |\n+LL |     drop(&mut owned1);\n+   |          ^^^^^^^^^^^\n+\n+warning: calls to `std::mem::drop` with a reference instead of an owned value\n+  --> $DIR/drop_ref.rs:17:5\n+   |\n+LL |     drop(reference1);\n+   |     ^^^^^^^^^^^^^^^^\n+   |\n+note: argument has type `&SomeStruct`\n+  --> $DIR/drop_ref.rs:17:10\n+   |\n+LL |     drop(reference1);\n+   |          ^^^^^^^^^^\n+\n+warning: calls to `std::mem::drop` with a reference instead of an owned value\n+  --> $DIR/drop_ref.rs:20:5\n+   |\n+LL |     drop(reference2);\n+   |     ^^^^^^^^^^^^^^^^\n+   |\n+note: argument has type `&mut SomeStruct`\n+  --> $DIR/drop_ref.rs:20:10\n+   |\n+LL |     drop(reference2);\n+   |          ^^^^^^^^^^\n+\n+warning: calls to `std::mem::drop` with a reference instead of an owned value\n+  --> $DIR/drop_ref.rs:23:5\n+   |\n+LL |     drop(reference3);\n+   |     ^^^^^^^^^^^^^^^^\n+   |\n+note: argument has type `&SomeStruct`\n+  --> $DIR/drop_ref.rs:23:10\n+   |\n+LL |     drop(reference3);\n+   |          ^^^^^^^^^^\n+\n+warning: calls to `std::mem::drop` with a reference instead of an owned value\n+  --> $DIR/drop_ref.rs:28:5\n+   |\n+LL |     drop(&val);\n+   |     ^^^^^^^^^^\n+   |\n+note: argument has type `&T`\n+  --> $DIR/drop_ref.rs:28:10\n+   |\n+LL |     drop(&val);\n+   |          ^^^^\n+\n+warning: calls to `std::mem::drop` with a reference instead of an owned value\n+  --> $DIR/drop_ref.rs:36:5\n+   |\n+LL |     std::mem::drop(&SomeStruct);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: argument has type `&SomeStruct`\n+  --> $DIR/drop_ref.rs:36:20\n+   |\n+LL |     std::mem::drop(&SomeStruct);\n+   |                    ^^^^^^^^^^^\n+\n+warning: calls to `std::mem::drop` with a reference instead of an owned value\n+  --> $DIR/drop_ref.rs:91:13\n+   |\n+LL |             drop(println_and(&13));\n+   |             ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: argument has type `&i32`\n+  --> $DIR/drop_ref.rs:91:18\n+   |\n+LL |             drop(println_and(&13));\n+   |                  ^^^^^^^^^^^^^^^^\n+\n+warning: calls to `std::mem::drop` with a reference instead of an owned value\n+  --> $DIR/drop_ref.rs:94:14\n+   |\n+LL |         3 if drop(println_and(&14)) == () => (),\n+   |              ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: argument has type `&i32`\n+  --> $DIR/drop_ref.rs:94:19\n+   |\n+LL |         3 if drop(println_and(&14)) == () => (),\n+   |                   ^^^^^^^^^^^^^^^^\n+\n+warning: calls to `std::mem::drop` with a reference instead of an owned value\n+  --> $DIR/drop_ref.rs:96:14\n+   |\n+LL |         4 => drop(&2),\n+   |              ^^^^^^^^\n+   |\n+note: argument has type `&i32`\n+  --> $DIR/drop_ref.rs:96:19\n+   |\n+LL |         4 => drop(&2),\n+   |                   ^^\n+\n+warning: 12 warnings emitted\n+"}]}