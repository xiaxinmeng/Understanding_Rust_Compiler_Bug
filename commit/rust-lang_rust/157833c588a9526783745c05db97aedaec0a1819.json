{"sha": "157833c588a9526783745c05db97aedaec0a1819", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1NzgzM2M1ODhhOTUyNjc4Mzc0NWMwNWRiOTdhZWRhZWMwYTE4MTk=", "commit": {"author": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2018-10-30T15:20:58Z"}, "committer": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2018-11-02T21:24:58Z"}, "message": "swap uses of Matches with pre-parsed args", "tree": {"sha": "ebe3f0fc189db5613c9329844f71a74775f83250", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ebe3f0fc189db5613c9329844f71a74775f83250"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/157833c588a9526783745c05db97aedaec0a1819", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/157833c588a9526783745c05db97aedaec0a1819", "html_url": "https://github.com/rust-lang/rust/commit/157833c588a9526783745c05db97aedaec0a1819", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/157833c588a9526783745c05db97aedaec0a1819/comments", "author": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5f496efd086ae763075295eac8aae757909f29c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5f496efd086ae763075295eac8aae757909f29c", "html_url": "https://github.com/rust-lang/rust/commit/f5f496efd086ae763075295eac8aae757909f29c"}], "stats": {"total": 179, "additions": 68, "deletions": 111}, "files": [{"sha": "9a91f5f555e786329566effed60879994c765559", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/157833c588a9526783745c05db97aedaec0a1819/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/157833c588a9526783745c05db97aedaec0a1819/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=157833c588a9526783745c05db97aedaec0a1819", "patch": "@@ -32,6 +32,7 @@ use opts;\n use passes::{self, DefaultPassOption};\n use theme;\n \n+#[derive(Clone)]\n pub struct Options {\n     // Basic options / Options passed directly to rustc\n \n@@ -330,6 +331,14 @@ impl Options {\n             }\n         };\n \n+        match matches.opt_str(\"r\").as_ref().map(|s| &**s) {\n+            Some(\"rust\") | None => {}\n+            Some(s) => {\n+                diag.struct_err(&format!(\"unknown input format: {}\", s)).emit();\n+                return Err(1);\n+            }\n+        }\n+\n         match matches.opt_str(\"w\").as_ref().map(|s| &**s) {\n             Some(\"html\") | None => {}\n             Some(s) => {\n@@ -448,6 +457,19 @@ fn check_deprecated_options(matches: &getopts::Matches, diag: &errors::Handler)\n             err.emit();\n         }\n     }\n+\n+    let removed_flags = [\n+        \"plugins\",\n+        \"plugin-path\",\n+    ];\n+\n+    for &flag in removed_flags.iter() {\n+        if matches.opt_present(flag) {\n+            diag.struct_warn(&format!(\"the '{}' flag no longer functions\", flag))\n+                .warn(\"see CVE-2018-1000622\")\n+                .emit();\n+        }\n+    }\n }\n \n /// Extracts `--extern-html-root-url` arguments from `matches` and returns a map of crate names to"}, {"sha": "966befd8689772f41f0caf87d94bf87c74d2ce77", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/157833c588a9526783745c05db97aedaec0a1819/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/157833c588a9526783745c05db97aedaec0a1819/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=157833c588a9526783745c05db97aedaec0a1819", "patch": "@@ -905,7 +905,7 @@ pub fn markdown_links(md: &str) -> Vec<(String, Option<Range<usize>>)> {\n     links\n }\n \n-#[derive(Default)]\n+#[derive(Clone, Default)]\n pub struct IdMap {\n     map: FxHashMap<String, usize>,\n }"}, {"sha": "e7417a91284d2946bebf9c2f5aa04fa8c0559bc9", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/157833c588a9526783745c05db97aedaec0a1819/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/157833c588a9526783745c05db97aedaec0a1819/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=157833c588a9526783745c05db97aedaec0a1819", "patch": "@@ -55,7 +55,6 @@ use std::rc::Rc;\n use externalfiles::ExternalHtml;\n \n use errors;\n-use getopts;\n \n use serialize::json::{ToJson, Json, as_json};\n use syntax::ast;\n@@ -70,6 +69,7 @@ use rustc::util::nodemap::{FxHashMap, FxHashSet};\n use rustc_data_structures::flock;\n \n use clean::{self, AttributesExt, GetDefId, SelfTy, Mutability};\n+use config;\n use doctree;\n use fold::DocFolder;\n use html::escape::Escape;\n@@ -509,7 +509,7 @@ pub fn run(mut krate: clean::Crate,\n            id_map: IdMap,\n            enable_index_page: bool,\n            index_page: Option<PathBuf>,\n-           matches: &getopts::Matches,\n+           options: config::Options,\n            diag: &errors::Handler,\n ) -> Result<(), Error> {\n     let src_root = match krate.src {\n@@ -678,7 +678,7 @@ pub fn run(mut krate: clean::Crate,\n     CACHE_KEY.with(|v| *v.borrow_mut() = cache.clone());\n     CURRENT_LOCATION_KEY.with(|s| s.borrow_mut().clear());\n \n-    write_shared(&cx, &krate, &*cache, index, enable_minification, matches, diag)?;\n+    write_shared(&cx, &krate, &*cache, index, enable_minification, &options, diag)?;\n \n     // And finally render the whole crate's documentation\n     cx.krate(krate)\n@@ -760,7 +760,7 @@ fn write_shared(\n     cache: &Cache,\n     search_index: String,\n     enable_minification: bool,\n-    matches: &getopts::Matches,\n+    options: &config::Options,\n     diag: &errors::Handler,\n ) -> Result<(), Error> {\n     // Write out the shared files. Note that these are shared among all rustdoc\n@@ -994,9 +994,11 @@ themePicker.onblur = handleThemeButtonsBlur;\n         if let Some(ref index_page) = cx.index_page {\n             ::markdown::render(index_page,\n                                cx.dst.clone(),\n-                               &matches, &(*cx.shared).layout.external_html,\n-                               !matches.opt_present(\"markdown-no-toc\"),\n-                               diag);\n+                               &options.markdown_css.clone(),\n+                               options.markdown_playground_url.clone()\n+                                   .or_else(|| options.playground_url.clone()),\n+                               &(*cx.shared).layout.external_html,\n+                               !options.markdown_no_toc, diag);\n         } else {\n             let dst = cx.dst.join(\"index.html\");\n             let mut w = BufWriter::new(try_err!(File::create(&dst), &dst));"}, {"sha": "a21613d6cd7f5890f834db956b210ac624a95efe", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 31, "deletions": 97, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/157833c588a9526783745c05db97aedaec0a1819/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/157833c588a9526783745c05db97aedaec0a1819/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=157833c588a9526783745c05db97aedaec0a1819", "patch": "@@ -56,16 +56,11 @@ extern crate serialize as rustc_serialize; // used by deriving\n use std::default::Default;\n use std::env;\n use std::panic;\n-use std::path::PathBuf;\n use std::process;\n use std::sync::mpsc::channel;\n \n-use syntax::edition::Edition;\n use rustc::session::{early_warn, early_error};\n-use rustc::session::search_paths::SearchPaths;\n-use rustc::session::config::{ErrorOutputType, RustcOptGroup, Externs, CodegenOptions};\n-use rustc_target::spec::TargetTriple;\n-use rustc::session::config::get_cmd_lint_options;\n+use rustc::session::config::{ErrorOutputType, RustcOptGroup};\n \n #[macro_use]\n mod externalfiles;\n@@ -387,17 +382,23 @@ fn main_args(args: &[String]) -> isize {\n                              options.codegen_options)\n         }\n         (false, true) => return markdown::render(&options.input, options.output,\n-                                                 &matches,\n+                                                 &options.markdown_css,\n+                                                 options.markdown_playground_url\n+                                                    .or(options.playground_url),\n                                                  &options.external_html,\n                                                  !options.markdown_no_toc, &diag),\n         (false, false) => {}\n     }\n \n-    let res = acquire_input(options.input.clone(), options.externs.clone(), options.edition,\n-                            options.codegen_options.clone(), matches, options.error_format,\n-                            move |out, matches| {\n+    //TODO: split render-time options into their own struct so i don't have to clone here\n+    rust_input(options.clone(), move |out| {\n         let Output { krate, passes, renderinfo } = out;\n         info!(\"going to format\");\n+        let diag = core::new_handler(options.error_format,\n+                                     None,\n+                                     options.debugging_options.treat_err_as_bug,\n+                                     options.debugging_options.ui_testing);\n+        let html_opts = options.clone();\n         html::render::run(krate, options.extern_html_root_urls, &options.external_html, options.playground_url,\n                           options.output,\n                           options.resource_suffix,\n@@ -408,106 +409,48 @@ fn main_args(args: &[String]) -> isize {\n                           options.themes,\n                           options.enable_minification, options.id_map,\n                           options.enable_index_page, options.index_page,\n-                          &matches,\n+                          html_opts,\n                           &diag)\n             .expect(\"failed to generate documentation\");\n         0\n-    });\n-    res.unwrap_or_else(|s| {\n-        diag.struct_err(&format!(\"input error: {}\", s)).emit();\n-        1\n     })\n }\n \n-/// Looks inside the command line arguments to extract the relevant input format\n-/// and files and then generates the necessary rustdoc output for formatting.\n-fn acquire_input<R, F>(input: PathBuf,\n-                       externs: Externs,\n-                       edition: Edition,\n-                       cg: CodegenOptions,\n-                       matches: getopts::Matches,\n-                       error_format: ErrorOutputType,\n-                       f: F)\n-                       -> Result<R, String>\n-where R: 'static + Send, F: 'static + Send + FnOnce(Output, &getopts::Matches) -> R {\n-    match matches.opt_str(\"r\").as_ref().map(|s| &**s) {\n-        Some(\"rust\") => Ok(rust_input(input, externs, edition, cg, matches, error_format, f)),\n-        Some(s) => Err(format!(\"unknown input format: {}\", s)),\n-        None => Ok(rust_input(input, externs, edition, cg, matches, error_format, f))\n-    }\n-}\n-\n /// Interprets the input file as a rust source file, passing it through the\n /// compiler all the way through the analysis passes. The rustdoc output is then\n /// generated from the cleaned AST of the crate.\n ///\n /// This form of input will run all of the plug/cleaning passes\n-fn rust_input<R, F>(cratefile: PathBuf,\n-                    externs: Externs,\n-                    edition: Edition,\n-                    cg: CodegenOptions,\n-                    matches: getopts::Matches,\n-                    error_format: ErrorOutputType,\n+fn rust_input<R, F>(options: config::Options,\n                     f: F) -> R\n where R: 'static + Send,\n-      F: 'static + Send + FnOnce(Output, &getopts::Matches) -> R\n+      F: 'static + Send + FnOnce(Output) -> R\n {\n-    let default_passes = if matches.opt_present(\"no-defaults\") {\n-        passes::DefaultPassOption::None\n-    } else if matches.opt_present(\"document-private-items\") {\n-        passes::DefaultPassOption::Private\n-    } else {\n-        passes::DefaultPassOption::Default\n-    };\n-\n-    let manual_passes = matches.opt_strs(\"passes\");\n-    let plugins = matches.opt_strs(\"plugins\");\n-\n     // First, parse the crate and extract all relevant information.\n-    let mut paths = SearchPaths::new();\n-    for s in &matches.opt_strs(\"L\") {\n-        paths.add_path(s, ErrorOutputType::default());\n-    }\n-    let mut cfgs = matches.opt_strs(\"cfg\");\n-    cfgs.push(\"rustdoc\".to_string());\n-    let triple = matches.opt_str(\"target\").map(|target| {\n-        if target.ends_with(\".json\") {\n-            TargetTriple::TargetPath(PathBuf::from(target))\n-        } else {\n-            TargetTriple::TargetTriple(target)\n-        }\n-    });\n-    let maybe_sysroot = matches.opt_str(\"sysroot\").map(PathBuf::from);\n-    let crate_name = matches.opt_str(\"crate-name\");\n-    let crate_version = matches.opt_str(\"crate-version\");\n-    let plugin_path = matches.opt_str(\"plugin-path\");\n-\n     info!(\"starting to run rustc\");\n-    let display_warnings = matches.opt_present(\"display-warnings\");\n-\n-    let force_unstable_if_unmarked = matches.opt_strs(\"Z\").iter().any(|x| {\n-        *x == \"force-unstable-if-unmarked\"\n-    });\n-    let treat_err_as_bug = matches.opt_strs(\"Z\").iter().any(|x| {\n-        *x == \"treat-err-as-bug\"\n-    });\n-    let ui_testing = matches.opt_strs(\"Z\").iter().any(|x| {\n-        *x == \"ui-testing\"\n-    });\n-\n-    let (lint_opts, describe_lints, lint_cap) = get_cmd_lint_options(&matches, error_format);\n \n     let (tx, rx) = channel();\n \n     let result = rustc_driver::monitor(move || syntax::with_globals(move || {\n         use rustc::session::config::Input;\n \n+        let paths = options.libs;\n+        let cfgs = options.cfgs;\n+        let triple = options.target;\n+        let maybe_sysroot = options.maybe_sysroot;\n+        let crate_name = options.crate_name;\n+        let crate_version = options.crate_version;\n+        let force_unstable_if_unmarked = options.debugging_options.force_unstable_if_unmarked;\n+        let treat_err_as_bug = options.debugging_options.treat_err_as_bug;\n+        let ui_testing = options.debugging_options.ui_testing;\n+\n         let (mut krate, renderinfo, passes) =\n-            core::run_core(paths, cfgs, externs, Input::File(cratefile), triple, maybe_sysroot,\n-                           display_warnings, crate_name.clone(),\n-                           force_unstable_if_unmarked, edition, cg, error_format,\n-                           lint_opts, lint_cap, describe_lints, manual_passes, default_passes,\n-                           treat_err_as_bug, ui_testing);\n+            core::run_core(paths, cfgs, options.externs, Input::File(options.input), triple, maybe_sysroot,\n+                           options.display_warnings, crate_name.clone(),\n+                           force_unstable_if_unmarked, options.edition, options.codegen_options, options.error_format,\n+                           options.lint_opts, options.lint_cap, options.describe_lints,\n+                           options.manual_passes, options.default_passes, treat_err_as_bug,\n+                           ui_testing);\n \n         info!(\"finished with rustc\");\n \n@@ -517,14 +460,6 @@ where R: 'static + Send,\n \n         krate.version = crate_version;\n \n-        if !plugins.is_empty() {\n-            eprintln!(\"WARNING: --plugins no longer functions; see CVE-2018-1000622\");\n-        }\n-\n-        if !plugin_path.is_none() {\n-            eprintln!(\"WARNING: --plugin-path no longer functions; see CVE-2018-1000622\");\n-        }\n-\n         info!(\"Executing passes\");\n \n         for pass in &passes {\n@@ -547,8 +482,7 @@ where R: 'static + Send,\n             krate = pass(krate);\n         }\n \n-        tx.send(f(Output { krate: krate, renderinfo: renderinfo, passes: passes },\n-                  &matches)).unwrap();\n+        tx.send(f(Output { krate: krate, renderinfo: renderinfo, passes: passes })).unwrap();\n     }));\n \n     match result {"}, {"sha": "dde104a62a8f9df263b01357636efbf1b8830e14", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/157833c588a9526783745c05db97aedaec0a1819/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/157833c588a9526783745c05db97aedaec0a1819/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=157833c588a9526783745c05db97aedaec0a1819", "patch": "@@ -15,7 +15,6 @@ use std::path::{PathBuf, Path};\n use std::cell::RefCell;\n \n use errors;\n-use getopts;\n use testing;\n use rustc::session::search_paths::SearchPaths;\n use rustc::session::config::{Externs, CodegenOptions};\n@@ -51,13 +50,14 @@ fn extract_leading_metadata<'a>(s: &'a str) -> (Vec<&'a str>, &'a str) {\n \n /// Render `input` (e.g. \"foo.md\") into an HTML file in `output`\n /// (e.g. output = \"bar\" => \"bar/foo.html\").\n-pub fn render(input: &Path, mut output: PathBuf, matches: &getopts::Matches,\n-              external_html: &ExternalHtml, include_toc: bool, diag: &errors::Handler) -> isize {\n+pub fn render(input: &Path, mut output: PathBuf, markdown_css: &[String],\n+              playground_url: Option<String>, external_html: &ExternalHtml, include_toc: bool,\n+              diag: &errors::Handler) -> isize {\n     output.push(input.file_stem().unwrap());\n     output.set_extension(\"html\");\n \n     let mut css = String::new();\n-    for name in &matches.opt_strs(\"markdown-css\") {\n+    for name in markdown_css {\n         let s = format!(\"<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"{}\\\">\\n\", name);\n         css.push_str(&s)\n     }\n@@ -67,8 +67,7 @@ pub fn render(input: &Path, mut output: PathBuf, matches: &getopts::Matches,\n         Err(LoadStringError::ReadFail) => return 1,\n         Err(LoadStringError::BadUtf8) => return 2,\n     };\n-    if let Some(playground) = matches.opt_str(\"markdown-playground-url\").or(\n-                              matches.opt_str(\"playground-url\")) {\n+    if let Some(playground) = playground_url {\n         markdown::PLAYGROUND.with(|s| { *s.borrow_mut() = Some((None, playground)); });\n     }\n "}]}