{"sha": "1275cc15d6aa0597f0b3bbf8aa0750239f9da7b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyNzVjYzE1ZDZhYTA1OTdmMGIzYmJmOGFhMDc1MDIzOWY5ZGE3YjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-10T17:12:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-10T17:12:42Z"}, "message": "Auto merge of #74936 - GuillaumeGomez:const-rustc_const_unstable, r=jyn514\n\nDon't print \"const\" keyword on non-nightly build if rustc_const_unstable is used on the item\n\nFixes #74579.", "tree": {"sha": "d324048a06cd22cdbd71c2e7d2664cbb15b9b88e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d324048a06cd22cdbd71c2e7d2664cbb15b9b88e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1275cc15d6aa0597f0b3bbf8aa0750239f9da7b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1275cc15d6aa0597f0b3bbf8aa0750239f9da7b2", "html_url": "https://github.com/rust-lang/rust/commit/1275cc15d6aa0597f0b3bbf8aa0750239f9da7b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1275cc15d6aa0597f0b3bbf8aa0750239f9da7b2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08324fe6f7ac24be4c8bfcab42b12ee447635c80", "url": "https://api.github.com/repos/rust-lang/rust/commits/08324fe6f7ac24be4c8bfcab42b12ee447635c80", "html_url": "https://github.com/rust-lang/rust/commit/08324fe6f7ac24be4c8bfcab42b12ee447635c80"}, {"sha": "2a281e0a76d2c48a3c2fbe41c78920a1952adb17", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a281e0a76d2c48a3c2fbe41c78920a1952adb17", "html_url": "https://github.com/rust-lang/rust/commit/2a281e0a76d2c48a3c2fbe41c78920a1952adb17"}], "stats": {"total": 37, "additions": 32, "deletions": 5}, "files": [{"sha": "3afd3671d6ba65a19070e931fba162e94a3457e7", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1275cc15d6aa0597f0b3bbf8aa0750239f9da7b2/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1275cc15d6aa0597f0b3bbf8aa0750239f9da7b2/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=1275cc15d6aa0597f0b3bbf8aa0750239f9da7b2", "patch": "@@ -1083,25 +1083,37 @@ impl Clean<TypeKind> for hir::def::DefKind {\n \n impl Clean<Item> for hir::TraitItem<'_> {\n     fn clean(&self, cx: &DocContext<'_>) -> Item {\n+        let local_did = cx.tcx.hir().local_def_id(self.hir_id);\n         let inner = match self.kind {\n             hir::TraitItemKind::Const(ref ty, default) => {\n                 AssocConstItem(ty.clean(cx), default.map(|e| print_const_expr(cx, e)))\n             }\n             hir::TraitItemKind::Fn(ref sig, hir::TraitFn::Provided(body)) => {\n-                MethodItem((sig, &self.generics, body, None).clean(cx))\n+                let mut m = (sig, &self.generics, body, None).clean(cx);\n+                if m.header.constness == hir::Constness::Const\n+                    && !is_min_const_fn(cx.tcx, local_did.to_def_id())\n+                {\n+                    m.header.constness = hir::Constness::NotConst;\n+                }\n+                MethodItem(m)\n             }\n             hir::TraitItemKind::Fn(ref sig, hir::TraitFn::Required(ref names)) => {\n                 let (generics, decl) = enter_impl_trait(cx, || {\n                     (self.generics.clean(cx), (&*sig.decl, &names[..]).clean(cx))\n                 });\n                 let (all_types, ret_types) = get_all_types(&generics, &decl, cx);\n-                TyMethodItem(TyMethod { header: sig.header, decl, generics, all_types, ret_types })\n+                let mut t = TyMethod { header: sig.header, decl, generics, all_types, ret_types };\n+                if t.header.constness == hir::Constness::Const\n+                    && !is_min_const_fn(cx.tcx, local_did.to_def_id())\n+                {\n+                    t.header.constness = hir::Constness::NotConst;\n+                }\n+                TyMethodItem(t)\n             }\n             hir::TraitItemKind::Type(ref bounds, ref default) => {\n                 AssocTypeItem(bounds.clean(cx), default.clean(cx))\n             }\n         };\n-        let local_did = cx.tcx.hir().local_def_id(self.hir_id);\n         Item {\n             name: Some(self.ident.name.clean(cx)),\n             attrs: self.attrs.clean(cx),\n@@ -1117,20 +1129,26 @@ impl Clean<Item> for hir::TraitItem<'_> {\n \n impl Clean<Item> for hir::ImplItem<'_> {\n     fn clean(&self, cx: &DocContext<'_>) -> Item {\n+        let local_did = cx.tcx.hir().local_def_id(self.hir_id);\n         let inner = match self.kind {\n             hir::ImplItemKind::Const(ref ty, expr) => {\n                 AssocConstItem(ty.clean(cx), Some(print_const_expr(cx, expr)))\n             }\n             hir::ImplItemKind::Fn(ref sig, body) => {\n-                MethodItem((sig, &self.generics, body, Some(self.defaultness)).clean(cx))\n+                let mut m = (sig, &self.generics, body, Some(self.defaultness)).clean(cx);\n+                if m.header.constness == hir::Constness::Const\n+                    && !is_min_const_fn(cx.tcx, local_did.to_def_id())\n+                {\n+                    m.header.constness = hir::Constness::NotConst;\n+                }\n+                MethodItem(m)\n             }\n             hir::ImplItemKind::TyAlias(ref ty) => {\n                 let type_ = ty.clean(cx);\n                 let item_type = type_.def_id().and_then(|did| inline::build_ty(cx, did));\n                 TypedefItem(Typedef { type_, generics: Generics::default(), item_type }, true)\n             }\n         };\n-        let local_did = cx.tcx.hir().local_def_id(self.hir_id);\n         Item {\n             name: Some(self.ident.name.clean(cx)),\n             source: self.span.clean(cx),"}, {"sha": "c5016c650e5f67cedb835de34296712b51692713", "filename": "src/test/rustdoc/const-display.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1275cc15d6aa0597f0b3bbf8aa0750239f9da7b2/src%2Ftest%2Frustdoc%2Fconst-display.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1275cc15d6aa0597f0b3bbf8aa0750239f9da7b2/src%2Ftest%2Frustdoc%2Fconst-display.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-display.rs?ref=1275cc15d6aa0597f0b3bbf8aa0750239f9da7b2", "patch": "@@ -32,3 +32,12 @@ pub const unsafe fn bar2_gated() -> u32 { 42 }\n \n // @has 'foo/fn.bar_not_gated.html' '//pre' 'pub unsafe fn bar_not_gated() -> u32'\n pub const unsafe fn bar_not_gated() -> u32 { 42 }\n+\n+pub struct Foo;\n+\n+impl Foo {\n+    // @has 'foo/struct.Foo.html' '//h4[@id=\"method.gated\"]/code' 'pub unsafe fn gated() -> u32'\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_const_unstable(feature=\"foo\", issue = \"none\")]\n+    pub const unsafe fn gated() -> u32 { 42 }\n+}"}]}