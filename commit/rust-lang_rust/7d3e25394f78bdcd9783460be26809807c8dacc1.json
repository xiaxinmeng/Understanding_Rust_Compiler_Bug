{"sha": "7d3e25394f78bdcd9783460be26809807c8dacc1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkM2UyNTM5NGY3OGJkY2Q5NzgzNDYwYmUyNjgwOTgwN2M4ZGFjYzE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-22T02:51:02Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T23:54:34Z"}, "message": "librustc: De-`@mut` `MoveData::path_map`", "tree": {"sha": "afcb3fefbbf462946012d597c97232d540eb367d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/afcb3fefbbf462946012d597c97232d540eb367d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d3e25394f78bdcd9783460be26809807c8dacc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d3e25394f78bdcd9783460be26809807c8dacc1", "html_url": "https://github.com/rust-lang/rust/commit/7d3e25394f78bdcd9783460be26809807c8dacc1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d3e25394f78bdcd9783460be26809807c8dacc1/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b8391ca12c5465a78673b0ba5ea4d338e487fb1", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b8391ca12c5465a78673b0ba5ea4d338e487fb1", "html_url": "https://github.com/rust-lang/rust/commit/1b8391ca12c5465a78673b0ba5ea4d338e487fb1"}], "stats": {"total": 33, "additions": 23, "deletions": 10}, "files": [{"sha": "b1fedabc0937db55837799459ca0295c6a9bd0b0", "filename": "src/librustc/middle/borrowck/move_data.rs", "status": "modified", "additions": 23, "deletions": 10, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/7d3e25394f78bdcd9783460be26809807c8dacc1/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d3e25394f78bdcd9783460be26809807c8dacc1/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs?ref=7d3e25394f78bdcd9783460be26809807c8dacc1", "patch": "@@ -35,7 +35,7 @@ pub struct MoveData {\n     paths: RefCell<~[MovePath]>,\n \n     /// Cache of loan path to move path index, for easy lookup.\n-    path_map: HashMap<@LoanPath, MovePathIndex>,\n+    path_map: RefCell<HashMap<@LoanPath, MovePathIndex>>,\n \n     /// Each move or uninitialized variable gets an entry here.\n     moves: RefCell<~[Move]>,\n@@ -166,7 +166,7 @@ impl MoveData {\n     pub fn new() -> MoveData {\n         MoveData {\n             paths: RefCell::new(~[]),\n-            path_map: HashMap::new(),\n+            path_map: RefCell::new(HashMap::new()),\n             moves: RefCell::new(~[]),\n             path_assignments: ~[],\n             var_assignments: ~[],\n@@ -234,11 +234,14 @@ impl MoveData {\n          * base paths that do not yet have an index.\n          */\n \n-        match self.path_map.find(&lp) {\n-            Some(&index) => {\n-                return index;\n+        {\n+            let path_map = self.path_map.borrow();\n+            match path_map.get().find(&lp) {\n+                Some(&index) => {\n+                    return index;\n+                }\n+                None => {}\n             }\n-            None => {}\n         }\n \n         let index = match *lp {\n@@ -289,14 +292,17 @@ impl MoveData {\n \n         let paths = self.paths.borrow();\n         assert_eq!(*index, paths.get().len() - 1);\n-        self.path_map.insert(lp, index);\n+\n+        let mut path_map = self.path_map.borrow_mut();\n+        path_map.get().insert(lp, index);\n         return index;\n     }\n \n     fn existing_move_path(&self,\n                           lp: @LoanPath)\n                           -> Option<MovePathIndex> {\n-        self.path_map.find_copy(&lp)\n+        let path_map = self.path_map.borrow();\n+        path_map.get().find_copy(&lp)\n     }\n \n     fn existing_base_paths(&self,\n@@ -315,7 +321,11 @@ impl MoveData {\n          * paths of `lp` to `result`, but does not add new move paths\n          */\n \n-        match self.path_map.find_copy(&lp) {\n+        let index_opt = {\n+            let path_map = self.path_map.borrow();\n+            path_map.get().find_copy(&lp)\n+        };\n+        match index_opt {\n             Some(index) => {\n                 self.each_base_path(index, |p| {\n                     result.push(p);\n@@ -442,7 +452,10 @@ impl MoveData {\n                 match *path.loan_path {\n                     LpVar(id) => {\n                         let kill_id = tcx.region_maps.encl_scope(id);\n-                        let path = *self.path_map.get(&path.loan_path);\n+                        let path = {\n+                            let path_map = self.path_map.borrow();\n+                            *path_map.get().get(&path.loan_path)\n+                        };\n                         self.kill_moves(path, kill_id, dfcx_moves);\n                     }\n                     LpExtend(..) => {}"}]}