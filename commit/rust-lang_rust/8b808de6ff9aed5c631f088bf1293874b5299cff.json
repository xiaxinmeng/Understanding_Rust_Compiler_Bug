{"sha": "8b808de6ff9aed5c631f088bf1293874b5299cff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiODA4ZGU2ZmY5YWVkNWM2MzFmMDg4YmYxMjkzODc0YjUyOTljZmY=", "commit": {"author": {"name": "Aaron Lobb", "email": "alobb@hmc.edu", "date": "2015-09-14T07:29:15Z"}, "committer": {"name": "Aaron Lobb", "email": "alobb@hmc.edu", "date": "2015-09-14T07:29:15Z"}, "message": "Fixed https://github.com/nrc/rustfmt/issues/291; added output to --help runtime option with possible config values", "tree": {"sha": "dc7c60c1d261d80207ba00a3fe46cd7c02e517d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc7c60c1d261d80207ba00a3fe46cd7c02e517d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b808de6ff9aed5c631f088bf1293874b5299cff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b808de6ff9aed5c631f088bf1293874b5299cff", "html_url": "https://github.com/rust-lang/rust/commit/8b808de6ff9aed5c631f088bf1293874b5299cff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b808de6ff9aed5c631f088bf1293874b5299cff/comments", "author": {"login": "alobb", "id": 5897943, "node_id": "MDQ6VXNlcjU4OTc5NDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5897943?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alobb", "html_url": "https://github.com/alobb", "followers_url": "https://api.github.com/users/alobb/followers", "following_url": "https://api.github.com/users/alobb/following{/other_user}", "gists_url": "https://api.github.com/users/alobb/gists{/gist_id}", "starred_url": "https://api.github.com/users/alobb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alobb/subscriptions", "organizations_url": "https://api.github.com/users/alobb/orgs", "repos_url": "https://api.github.com/users/alobb/repos", "events_url": "https://api.github.com/users/alobb/events{/privacy}", "received_events_url": "https://api.github.com/users/alobb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alobb", "id": 5897943, "node_id": "MDQ6VXNlcjU4OTc5NDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5897943?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alobb", "html_url": "https://github.com/alobb", "followers_url": "https://api.github.com/users/alobb/followers", "following_url": "https://api.github.com/users/alobb/following{/other_user}", "gists_url": "https://api.github.com/users/alobb/gists{/gist_id}", "starred_url": "https://api.github.com/users/alobb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alobb/subscriptions", "organizations_url": "https://api.github.com/users/alobb/orgs", "repos_url": "https://api.github.com/users/alobb/repos", "events_url": "https://api.github.com/users/alobb/events{/privacy}", "received_events_url": "https://api.github.com/users/alobb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4738d284f2c1c6d448b3a375f547b61da2c86adc", "url": "https://api.github.com/repos/rust-lang/rust/commits/4738d284f2c1c6d448b3a375f547b61da2c86adc", "html_url": "https://github.com/rust-lang/rust/commit/4738d284f2c1c6d448b3a375f547b61da2c86adc"}], "stats": {"total": 144, "additions": 113, "deletions": 31}, "files": [{"sha": "f2eb4f46ac109c6c1ec09f9bf705c4d63efb8570", "filename": "src/bin/rustfmt.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8b808de6ff9aed5c631f088bf1293874b5299cff/src%2Fbin%2Frustfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b808de6ff9aed5c631f088bf1293874b5299cff/src%2Fbin%2Frustfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Frustfmt.rs?ref=8b808de6ff9aed5c631f088bf1293874b5299cff", "patch": "@@ -18,6 +18,7 @@ extern crate toml;\n \n use rustfmt::{WriteMode, run};\n use rustfmt::config::Config;\n+use rustfmt::config::ConfigHelpVariantTypes;\n \n use std::env;\n use std::fs::{File, PathExt};\n@@ -85,6 +86,16 @@ fn print_usage<S: Into<String>>(reason: S) {\n     println!(\"{}\\n\\r usage: rustfmt [-h Help] [--write-mode=[replace|overwrite|display|diff]] \\\n               <file_name>\",\n              reason.into());\n+\n+    for option in Config::get_docs() {\n+        let variants = option.variant_names();\n+        let variant_names: String = match *variants {\n+            ConfigHelpVariantTypes::UsizeConfig => \"<unsigned integer>\".into(),\n+            ConfigHelpVariantTypes::BoolConfig => \"<boolean>\".into(),\n+            ConfigHelpVariantTypes::EnumConfig(ref variants) => variants.join(\", \"),\n+        };\n+        println!(\"{}, {}, Possible values: {}\", option.option_name(), option.doc_string(), variant_names);\n+    }\n }\n \n fn determine_params<I>(args: I) -> Option<(Vec<String>, WriteMode)>"}, {"sha": "4026ea856cbb2aefdf8fa1063c61053ca6ba832b", "filename": "src/config.rs", "status": "modified", "additions": 91, "deletions": 31, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/8b808de6ff9aed5c631f088bf1293874b5299cff/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b808de6ff9aed5c631f088bf1293874b5299cff/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=8b808de6ff9aed5c631f088bf1293874b5299cff", "patch": "@@ -66,7 +66,7 @@ impl MultilineStyle {\n }\n \n macro_rules! create_config {\n-    ($($i:ident: $ty:ty),+ $(,)*) => (\n+    ($($i:ident: $ty:ty, $dstring: tt),+ $(,)*) => (\n         #[derive(RustcDecodable, Clone)]\n         pub struct Config {\n             $(pub $i: $ty),+\n@@ -82,6 +82,50 @@ macro_rules! create_config {\n             $(pub $i: Option<$ty>),+\n         }\n \n+        // This trait and the following impl blocks are there only so that we\n+        // can use UCFS inside the get_docs() function on builtin types for configs.\n+        trait IsConfigType {\n+            fn get_variant_names() -> Vec<&'static str>;\n+        }\n+\n+        impl IsConfigType for bool {\n+            fn get_variant_names() -> Vec<&'static str> {\n+                unreachable!()\n+            }\n+        }\n+\n+        impl IsConfigType for usize {\n+            fn get_variant_names() -> Vec<&'static str> {\n+                unreachable!()\n+            }\n+        }\n+\n+        pub struct ConfigHelpItem {\n+            option_name: &'static str,\n+            doc_string : &'static str,\n+            variant_names: ConfigHelpVariantTypes,\n+        }\n+\n+        pub enum ConfigHelpVariantTypes {\n+            UsizeConfig,\n+            BoolConfig,\n+            EnumConfig(Vec<&'static str>),\n+        }\n+\n+        impl ConfigHelpItem {\n+            pub fn option_name(&self) -> &'static str {\n+                self.option_name\n+            }\n+\n+            pub fn doc_string(&self) -> &'static str {\n+                self.doc_string\n+            }\n+\n+            pub fn variant_names(&self) -> &ConfigHelpVariantTypes {\n+                &self.variant_names\n+            }\n+        }\n+\n         impl Config {\n \n             fn fill_from_parsed_config(mut self, parsed: &ParsedConfig) -> Config {\n@@ -117,41 +161,57 @@ macro_rules! create_config {\n                     _ => panic!(\"Bad config key!\")\n                 }\n             }\n+\n+            pub fn get_docs() -> Vec<ConfigHelpItem> {\n+                let mut options: Vec<ConfigHelpItem> = Vec::new();\n+                $(\n+                    let config_variant_type = match stringify!($ty) {\n+                        \"bool\" => ConfigHelpVariantTypes::BoolConfig,\n+                        \"usize\" => ConfigHelpVariantTypes::UsizeConfig,\n+                        _ => ConfigHelpVariantTypes::EnumConfig(<$ty>::get_variant_names()),\n+                    };\n+                    options.push(ConfigHelpItem {\n+                        option_name: stringify!($i),\n+                        doc_string: stringify!($dstring),\n+                        variant_names: config_variant_type,\n+                    });\n+                )+\n+                options\n+            }\n         }\n     )\n }\n \n create_config! {\n-    max_width: usize,\n-    ideal_width: usize,\n-    leeway: usize,\n-    tab_spaces: usize,\n-    newline_style: NewlineStyle,\n-    fn_brace_style: BraceStyle,\n-    fn_return_indent: ReturnIndent,\n-    fn_args_paren_newline: bool,\n-    fn_args_density: Density,\n-    fn_args_layout: StructLitStyle,\n-    fn_arg_indent: BlockIndentStyle,\n-    where_density: Density, // Should we at least try to put the where clause on\n-                            // the same line as the rest of the function decl?\n-    where_indent: BlockIndentStyle, // Visual will be treated like Tabbed\n-    where_layout: ListTactic,\n-    where_pred_indent: BlockIndentStyle,\n-    generics_indent: BlockIndentStyle,\n-    struct_trailing_comma: SeparatorTactic,\n-    struct_lit_trailing_comma: SeparatorTactic,\n-    struct_lit_style: StructLitStyle,\n-    struct_lit_multiline_style: MultilineStyle,\n-    enum_trailing_comma: bool,\n-    report_todo: ReportTactic,\n-    report_fixme: ReportTactic,\n-    reorder_imports: bool, // Alphabetically, case sensitive.\n-    single_line_if_else: bool,\n-    format_strings: bool,\n-    chains_overflow_last: bool,\n-    take_source_hints: bool, // Retain some formatting characteristics from\n-                             // the source code.\n+    max_width: usize, \"Maximum width of each line\",\n+    ideal_width: usize, \"Ideal width of each line\",\n+    leeway: usize, \"Leeway of line width\",\n+    tab_spaces: usize, \"Number of spaces per tab\",\n+    newline_style: NewlineStyle, \"Unix or Windows line endings\",\n+    fn_brace_style: BraceStyle, \"Brace style for functions\",\n+    fn_return_indent: ReturnIndent, \"Location of return type in function declaration\",\n+    fn_args_paren_newline: bool, \"If function argument parenthases goes on a newline\",\n+    fn_args_density: Density, \"Argument density in functions\",\n+    fn_args_layout: StructLitStyle, \"Layout of function arguments\",\n+    fn_arg_indent: BlockIndentStyle, \"Indent on function arguments\",\n+    where_density: Density, \"Density of a where clause\", // Should we at least try to put the where clause on the same line as\n+                                                         // the rest of the function decl?\n+    where_indent: BlockIndentStyle, \"Indentation of a where clause\", // Visual will be treated like Tabbed\n+    where_layout: ListTactic, \"Element layout inside a where clause\",\n+    where_pred_indent: BlockIndentStyle, \"Indentation style of a where predicate\",\n+    generics_indent: BlockIndentStyle, \"Indentation of generics\",\n+    struct_trailing_comma: SeparatorTactic, \"If there is a trailing comma on structs\",\n+    struct_lit_trailing_comma: SeparatorTactic, \"If there is a trailing comma on literal structs\",\n+    struct_lit_style: StructLitStyle, \"Style of struct definition\",\n+    struct_lit_multiline_style: MultilineStyle, \"Multilline style on literal structs\",\n+    enum_trailing_comma: bool, \"Put a trailing comma on enum declarations\",\n+    report_todo: ReportTactic, \"Report all occurences of TODO in source file comments\",\n+    report_fixme: ReportTactic, \"Report all occurences of FIXME in source file comments\",\n+    reorder_imports: bool, \"Reorder import statements alphabetically\", // Alphabetically, case sensitive.\n+    single_line_if_else: bool, \"Put else on same line as closing brace for if statements\",\n+    format_strings: bool, \"Format string literals, or leave as is\",\n+    chains_overflow_last: bool, \"chains overflow last\",\n+    take_source_hints: bool, \"Retain some formatting characteristics from the source code\",\n }\n \n impl Default for Config {"}, {"sha": "0ba0c2c4a48b03fbc2bfe7e85e23bc3d62d22140", "filename": "src/utils.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8b808de6ff9aed5c631f088bf1293874b5299cff/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b808de6ff9aed5c631f088bf1293874b5299cff/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=8b808de6ff9aed5c631f088bf1293874b5299cff", "patch": "@@ -161,6 +161,17 @@ macro_rules! impl_enum_decodable {\n                 }\n             }\n         }\n+\n+        impl $e {\n+            pub fn get_variant_names() -> Vec<&'static str> {\n+                let mut variants = Vec::new();\n+                $(\n+                    variants.push(stringify!($x));\n+                )*\n+\n+                variants\n+            }\n+        }\n     };\n }\n "}]}