{"sha": "a96948195227f98dd18eecea8cd85c58406b6388", "node_id": "C_kwDOAAsO6NoAKGE5Njk0ODE5NTIyN2Y5OGRkMThlZWNlYThjZDg1YzU4NDA2YjYzODg", "commit": {"author": {"name": "Paul Lange", "email": "palango@gmx.de", "date": "2022-07-26T14:10:26Z"}, "committer": {"name": "Paul Lange", "email": "palango@gmx.de", "date": "2022-07-27T16:16:58Z"}, "message": "Add syntax fixup for while loops", "tree": {"sha": "3df231f96f9d7a1b8e1d2141e1c8c19f67b8d8fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3df231f96f9d7a1b8e1d2141e1c8c19f67b8d8fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a96948195227f98dd18eecea8cd85c58406b6388", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a96948195227f98dd18eecea8cd85c58406b6388", "html_url": "https://github.com/rust-lang/rust/commit/a96948195227f98dd18eecea8cd85c58406b6388", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a96948195227f98dd18eecea8cd85c58406b6388/comments", "author": {"login": "palango", "id": 90851, "node_id": "MDQ6VXNlcjkwODUx", "avatar_url": "https://avatars.githubusercontent.com/u/90851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/palango", "html_url": "https://github.com/palango", "followers_url": "https://api.github.com/users/palango/followers", "following_url": "https://api.github.com/users/palango/following{/other_user}", "gists_url": "https://api.github.com/users/palango/gists{/gist_id}", "starred_url": "https://api.github.com/users/palango/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/palango/subscriptions", "organizations_url": "https://api.github.com/users/palango/orgs", "repos_url": "https://api.github.com/users/palango/repos", "events_url": "https://api.github.com/users/palango/events{/privacy}", "received_events_url": "https://api.github.com/users/palango/received_events", "type": "User", "site_admin": false}, "committer": {"login": "palango", "id": 90851, "node_id": "MDQ6VXNlcjkwODUx", "avatar_url": "https://avatars.githubusercontent.com/u/90851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/palango", "html_url": "https://github.com/palango", "followers_url": "https://api.github.com/users/palango/followers", "following_url": "https://api.github.com/users/palango/following{/other_user}", "gists_url": "https://api.github.com/users/palango/gists{/gist_id}", "starred_url": "https://api.github.com/users/palango/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/palango/subscriptions", "organizations_url": "https://api.github.com/users/palango/orgs", "repos_url": "https://api.github.com/users/palango/repos", "events_url": "https://api.github.com/users/palango/events{/privacy}", "received_events_url": "https://api.github.com/users/palango/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a1ec451d3c8c6bed062ee002b5c613d64ca1ecd", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a1ec451d3c8c6bed062ee002b5c613d64ca1ecd", "html_url": "https://github.com/rust-lang/rust/commit/9a1ec451d3c8c6bed062ee002b5c613d64ca1ecd"}], "stats": {"total": 76, "additions": 75, "deletions": 1}, "files": [{"sha": "6d0766020bd9041c9669001297ccb123dd945bd3", "filename": "crates/hir-expand/src/fixup.rs", "status": "modified", "additions": 75, "deletions": 1, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/a96948195227f98dd18eecea8cd85c58406b6388/crates%2Fhir-expand%2Fsrc%2Ffixup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a96948195227f98dd18eecea8cd85c58406b6388/crates%2Fhir-expand%2Fsrc%2Ffixup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Ffixup.rs?ref=a96948195227f98dd18eecea8cd85c58406b6388", "patch": "@@ -5,7 +5,7 @@ use std::mem;\n use mbe::{SyntheticToken, SyntheticTokenId, TokenMap};\n use rustc_hash::FxHashMap;\n use syntax::{\n-    ast::{self, AstNode},\n+    ast::{self, AstNode, HasLoopBody},\n     match_ast, SyntaxElement, SyntaxKind, SyntaxNode, TextRange,\n };\n use tt::Subtree;\n@@ -142,6 +142,39 @@ pub(crate) fn fixup_syntax(node: &SyntaxNode) -> SyntaxFixups {\n                         ]);\n                     }\n                 },\n+                ast::WhileExpr(it) => {\n+                    if it.condition().is_none() {\n+                        // insert placeholder token after the while token\n+                        let while_token = match it.while_token() {\n+                            Some(t) => t,\n+                            None => continue,\n+                        };\n+                        append.insert(while_token.into(), vec![\n+                            SyntheticToken {\n+                                kind: SyntaxKind::IDENT,\n+                                text: \"__ra_fixup\".into(),\n+                                range: end_range,\n+                                id: EMPTY_ID,\n+                            },\n+                        ]);\n+                    }\n+                    if it.loop_body().is_none() {\n+                        append.insert(node.clone().into(), vec![\n+                            SyntheticToken {\n+                                kind: SyntaxKind::L_CURLY,\n+                                text: \"{\".into(),\n+                                range: end_range,\n+                                id: EMPTY_ID,\n+                            },\n+                            SyntheticToken {\n+                                kind: SyntaxKind::R_CURLY,\n+                                text: \"}\".into(),\n+                                range: end_range,\n+                                id: EMPTY_ID,\n+                            },\n+                        ]);\n+                    }\n+                },\n                 // FIXME: foo::\n                 // FIXME: for, loop, match etc.\n                 _ => (),\n@@ -376,6 +409,47 @@ fn foo() {\n             // the {} gets parsed as the condition, I think?\n             expect![[r#\"\n fn foo () {if {} {}}\n+\"#]],\n+        )\n+    }\n+\n+    #[test]\n+    fn fixup_while_1() {\n+        check(\n+            r#\"\n+fn foo() {\n+    while\n+}\n+\"#,\n+            expect![[r#\"\n+fn foo () {while __ra_fixup {}}\n+\"#]],\n+        )\n+    }\n+\n+    #[test]\n+    fn fixup_while_2() {\n+        check(\n+            r#\"\n+fn foo() {\n+    while foo\n+}\n+\"#,\n+            expect![[r#\"\n+fn foo () {while foo {}}\n+\"#]],\n+        )\n+    }\n+    #[test]\n+    fn fixup_while_3() {\n+        check(\n+            r#\"\n+fn foo() {\n+    while {}\n+}\n+\"#,\n+            expect![[r#\"\n+fn foo () {while __ra_fixup {}}\n \"#]],\n         )\n     }"}]}