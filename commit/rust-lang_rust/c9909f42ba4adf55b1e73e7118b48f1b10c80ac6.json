{"sha": "c9909f42ba4adf55b1e73e7118b48f1b10c80ac6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5OTA5ZjQyYmE0YWRmNTViMWU3M2U3MTE4YjQ4ZjFiMTBjODBhYzY=", "commit": {"author": {"name": "Jeremy A. Kolb", "email": "jkolb@ara.com", "date": "2018-10-12T11:54:57Z"}, "committer": {"name": "Jeremy A. Kolb", "email": "jkolb@ara.com", "date": "2018-10-12T11:54:57Z"}, "message": "A FnDescriptor shouldn't exist without a name", "tree": {"sha": "66f565a193434bb219bcd2bc55df5f8a198c0d90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66f565a193434bb219bcd2bc55df5f8a198c0d90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9909f42ba4adf55b1e73e7118b48f1b10c80ac6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9909f42ba4adf55b1e73e7118b48f1b10c80ac6", "html_url": "https://github.com/rust-lang/rust/commit/c9909f42ba4adf55b1e73e7118b48f1b10c80ac6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9909f42ba4adf55b1e73e7118b48f1b10c80ac6/comments", "author": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ac51997558c1904a56b0992f8f37f30b3aee1ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ac51997558c1904a56b0992f8f37f30b3aee1ee", "html_url": "https://github.com/rust-lang/rust/commit/3ac51997558c1904a56b0992f8f37f30b3aee1ee"}], "stats": {"total": 96, "additions": 47, "deletions": 49}, "files": [{"sha": "faf945a41f037f478355a667fa7e99aac6248535", "filename": "crates/ra_analysis/src/descriptors.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c9909f42ba4adf55b1e73e7118b48f1b10c80ac6/crates%2Fra_analysis%2Fsrc%2Fdescriptors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9909f42ba4adf55b1e73e7118b48f1b10c80ac6/crates%2Fra_analysis%2Fsrc%2Fdescriptors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdescriptors.rs?ref=c9909f42ba4adf55b1e73e7118b48f1b10c80ac6", "patch": "@@ -4,7 +4,7 @@ use std::{\n use relative_path::RelativePathBuf;\n use ra_syntax::{\n     SmolStr,\n-    ast::{self, NameOwner, AstNode, TypeParamsOwner},\n+    ast::{self, NameOwner, AstNode},\n     text_utils::is_subrange\n };\n use {\n@@ -222,15 +222,15 @@ fn resolve_submodule(\n \n #[derive(Debug, Clone)]\n pub struct FnDescriptor {\n-    pub name: Option<String>,\n+    pub name: String,\n     pub label : String,\n     pub ret_type: Option<String>,\n     pub params: Vec<String>,\n }\n \n impl FnDescriptor {\n-    pub fn new(node: ast::FnDef) -> Self {\n-        let name = node.name().map(|name| name.text().to_string());\n+    pub fn new(node: ast::FnDef) -> Option<Self> {\n+        let name = node.name()?.text().to_string();\n \n         // Strip the body out for the label.\n         let label : String = if let Some(body) = node.body() {\n@@ -247,12 +247,12 @@ impl FnDescriptor {\n         let params = FnDescriptor::param_list(node);\n         let ret_type = node.ret_type().map(|r| r.syntax().text().to_string());\n \n-        FnDescriptor {\n+        Some(FnDescriptor {\n             name,\n             ret_type,\n             params,\n             label\n-        }\n+        })\n     }\n \n     fn param_list(node: ast::FnDef) -> Vec<String> {"}, {"sha": "aad54b977133d32fc185cd713e3b5ea66f527823", "filename": "crates/ra_analysis/src/imp.rs", "status": "modified", "additions": 36, "deletions": 38, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/c9909f42ba4adf55b1e73e7118b48f1b10c80ac6/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9909f42ba4adf55b1e73e7118b48f1b10c80ac6/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fimp.rs?ref=c9909f42ba4adf55b1e73e7118b48f1b10c80ac6", "patch": "@@ -321,47 +321,45 @@ impl AnalysisImpl {\n         for (_, fs) in file_symbols {\n             if fs.kind == FN_DEF {\n                 if let Some(fn_def) = find_node_at_offset(syntax, fs.node_range.start()) {\n-                    let descriptor = FnDescriptor::new(fn_def);\n-\n-                    // If we have a calling expression let's find which argument we are on\n-                    let mut current_parameter = None;\n-\n-                    let num_params = descriptor.params.len();\n-                    let has_self = fn_def.param_list()\n-                        .and_then(|l| l.self_param())\n-                        .is_some();\n-\n-\n-                    if num_params == 1 {\n-                        if !has_self {\n-                            current_parameter = Some(1);\n-                        }\n-                    }\n-                    else if num_params > 1 {\n-                        // Count how many parameters into the call we are.\n-                        // TODO: This is best effort for now and should be fixed at some point.\n-                        // It may be better to see where we are in the arg_list and then check\n-                        // where offset is in that list (or beyond).\n-                        // Revisit this after we get documentation comments in.\n-                        if let Some(ref arg_list) = calling_node.arg_list() {\n-                            let start = arg_list.syntax().range().start();\n-\n-                            let range_search = TextRange::from_to(start, offset);\n-                            let mut commas : usize = arg_list.syntax().text()\n-                                .slice(range_search).to_string()\n-                                .matches(\",\")\n-                                .count();\n-\n-                            // If we have a method call eat the first param since it's just self.\n-                            if has_self {\n-                                commas = commas + 1;\n+                    if let Some(descriptor) = FnDescriptor::new(fn_def) {\n+                        // If we have a calling expression let's find which argument we are on\n+                        let mut current_parameter = None;\n+\n+                        let num_params = descriptor.params.len();\n+                        let has_self = fn_def.param_list()\n+                            .and_then(|l| l.self_param())\n+                            .is_some();\n+\n+                        if num_params == 1 {\n+                            if !has_self {\n+                                current_parameter = Some(1);\n+                            }\n+                        } else if num_params > 1 {\n+                            // Count how many parameters into the call we are.\n+                            // TODO: This is best effort for now and should be fixed at some point.\n+                            // It may be better to see where we are in the arg_list and then check\n+                            // where offset is in that list (or beyond).\n+                            // Revisit this after we get documentation comments in.\n+                            if let Some(ref arg_list) = calling_node.arg_list() {\n+                                let start = arg_list.syntax().range().start();\n+\n+                                let range_search = TextRange::from_to(start, offset);\n+                                let mut commas: usize = arg_list.syntax().text()\n+                                    .slice(range_search).to_string()\n+                                    .matches(\",\")\n+                                    .count();\n+\n+                                // If we have a method call eat the first param since it's just self.\n+                                if has_self {\n+                                    commas = commas + 1;\n+                                }\n+\n+                                current_parameter = Some(commas);\n                             }\n-\n-                            current_parameter = Some(commas);\n                         }\n-                    }\n \n-                    return Some((descriptor, current_parameter));\n+                        return Some((descriptor, current_parameter));\n+                    }\n                 }\n             }\n         }"}, {"sha": "755640fb4198cc927c8c40a9cad8514d6fae418d", "filename": "crates/ra_analysis/tests/tests.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c9909f42ba4adf55b1e73e7118b48f1b10c80ac6/crates%2Fra_analysis%2Ftests%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9909f42ba4adf55b1e73e7118b48f1b10c80ac6/crates%2Fra_analysis%2Ftests%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Ftests%2Ftests.rs?ref=c9909f42ba4adf55b1e73e7118b48f1b10c80ac6", "patch": "@@ -164,7 +164,7 @@ fn test_fn_signature_two_args_first() {\n r#\"fn foo(x: u32, y: u32) -> u32 {x + y}\n fn bar() { foo(<|>3, ); }\"#);\n \n-    assert_eq!(desc.name, Some(\"foo\".into()));\n+    assert_eq!(desc.name, \"foo\".to_string());\n     assert_eq!(desc.params, vec!(\"x\".to_string(),\"y\".to_string()));\n     assert_eq!(desc.ret_type, Some(\"-> u32\".into()));\n     assert_eq!(param, Some(0));\n@@ -176,7 +176,7 @@ fn test_fn_signature_two_args_second() {\n         r#\"fn foo(x: u32, y: u32) -> u32 {x + y}\n fn bar() { foo(3, <|>); }\"#);\n \n-    assert_eq!(desc.name, Some(\"foo\".into()));\n+    assert_eq!(desc.name, \"foo\".to_string());\n     assert_eq!(desc.params, vec!(\"x\".to_string(),\"y\".to_string()));\n     assert_eq!(desc.ret_type, Some(\"-> u32\".into()));\n     assert_eq!(param, Some(1));\n@@ -188,7 +188,7 @@ fn test_fn_signature_for_impl() {\n r#\"struct F; impl F { pub fn new() { F{}} }\n fn bar() {let _ : F = F::new(<|>);}\"#);\n \n-    assert_eq!(desc.name, Some(\"new\".into()));\n+    assert_eq!(desc.name, \"new\".to_string());\n     assert_eq!(desc.params, Vec::<String>::new());\n     assert_eq!(desc.ret_type, None);\n     assert_eq!(param, None);\n@@ -211,7 +211,7 @@ fn bar() {\n     f.do_it(<|>);\n }\"#);\n \n-    assert_eq!(desc.name, Some(\"do_it\".into()));\n+    assert_eq!(desc.name, \"do_it\".to_string());\n     assert_eq!(desc.params, vec![\"&self\".to_string()]);\n     assert_eq!(desc.ret_type, None);\n     assert_eq!(param, None);\n@@ -234,7 +234,7 @@ fn bar() {\n     f.do_it(<|>);\n }\"#);\n \n-    assert_eq!(desc.name, Some(\"do_it\".into()));\n+    assert_eq!(desc.name, \"do_it\".to_string());\n     assert_eq!(desc.params, vec![\"&self\".to_string(), \"x\".to_string()]);\n     assert_eq!(desc.ret_type, None);\n     assert_eq!(param, Some(1));"}]}