{"sha": "4cec3ab71d49d1971f58812a522ff3112d396796", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjZWMzYWI3MWQ0OWQxOTcxZjU4ODEyYTUyMmZmMzExMmQzOTY3OTY=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-04-26T08:29:56Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-04-26T08:29:56Z"}, "message": "Prevent panicking against directories or non-existent files", "tree": {"sha": "1f335fc7c5c9c2892fc06c24053d916263190281", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f335fc7c5c9c2892fc06c24053d916263190281"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4cec3ab71d49d1971f58812a522ff3112d396796", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4cec3ab71d49d1971f58812a522ff3112d396796", "html_url": "https://github.com/rust-lang/rust/commit/4cec3ab71d49d1971f58812a522ff3112d396796", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4cec3ab71d49d1971f58812a522ff3112d396796/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b46c147fedd5c744f63c6941de75e738e6c5047b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b46c147fedd5c744f63c6941de75e738e6c5047b", "html_url": "https://github.com/rust-lang/rust/commit/b46c147fedd5c744f63c6941de75e738e6c5047b"}], "stats": {"total": 32, "additions": 20, "deletions": 12}, "files": [{"sha": "d5bc534bc020890ab8ec06308d9dc24076917c38", "filename": "src/bin/rustfmt.rs", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/4cec3ab71d49d1971f58812a522ff3112d396796/src%2Fbin%2Frustfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cec3ab71d49d1971f58812a522ff3112d396796/src%2Fbin%2Frustfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Frustfmt.rs?ref=4cec3ab71d49d1971f58812a522ff3112d396796", "patch": "@@ -258,21 +258,29 @@ fn execute(opts: &Options) -> FmtResult<Summary> {\n \n             let mut error_summary = Summary::new();\n             for file in files {\n-                // Check the file directory if the config-path could not be read or not provided\n-                if path.is_none() {\n-                    let (config_tmp, path_tmp) = resolve_config(file.parent().unwrap())?;\n-                    if options.verbose {\n-                        if let Some(path) = path_tmp.as_ref() {\n-                            println!(\"Using rustfmt config file {} for {}\",\n-                                     path.display(),\n-                                     file.display());\n+                if !file.exists() {\n+                    println!(\"Error: file `{}` does not exist\", file.to_str().unwrap());\n+                    error_summary.add_operational_error();\n+                } else if file.is_dir() {\n+                    println!(\"Error: `{}` is a directory\", file.to_str().unwrap());\n+                    error_summary.add_operational_error();\n+                } else {\n+                    // Check the file directory if the config-path could not be read or not provided\n+                    if path.is_none() {\n+                        let (config_tmp, path_tmp) = resolve_config(file.parent().unwrap())?;\n+                        if options.verbose {\n+                            if let Some(path) = path_tmp.as_ref() {\n+                                println!(\"Using rustfmt config file {} for {}\",\n+                                         path.display(),\n+                                         file.display());\n+                            }\n                         }\n+                        config = config_tmp;\n                     }\n-                    config = config_tmp;\n-                }\n \n-                options.clone().apply_to(&mut config);\n-                error_summary.add(run(Input::File(file), &config));\n+                    options.clone().apply_to(&mut config);\n+                    error_summary.add(run(Input::File(file), &config));\n+                }\n             }\n             Ok(error_summary)\n         }"}]}