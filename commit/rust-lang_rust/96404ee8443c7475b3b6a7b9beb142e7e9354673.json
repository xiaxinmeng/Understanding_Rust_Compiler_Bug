{"sha": "96404ee8443c7475b3b6a7b9beb142e7e9354673", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2NDA0ZWU4NDQzYzc0NzViM2I2YTdiOWJlYjE0MmU3ZTkzNTQ2NzM=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-03-12T12:06:43Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-04-02T14:14:58Z"}, "message": "Emit ansi color codes in the `rendered` field of json diagnostics", "tree": {"sha": "e58feead43d306e1230bd104a7ac9f517acf6a97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e58feead43d306e1230bd104a7ac9f517acf6a97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96404ee8443c7475b3b6a7b9beb142e7e9354673", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96404ee8443c7475b3b6a7b9beb142e7e9354673", "html_url": "https://github.com/rust-lang/rust/commit/96404ee8443c7475b3b6a7b9beb142e7e9354673", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96404ee8443c7475b3b6a7b9beb142e7e9354673/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f694222887cf31f51e68927716c25736e62f037f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f694222887cf31f51e68927716c25736e62f037f", "html_url": "https://github.com/rust-lang/rust/commit/f694222887cf31f51e68927716c25736e62f037f"}], "stats": {"total": 203, "additions": 123, "deletions": 80}, "files": [{"sha": "7dcccdb74b426988a15367b50bc09ed905dcb286", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 27, "deletions": 8, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/96404ee8443c7475b3b6a7b9beb142e7e9354673/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96404ee8443c7475b3b6a7b9beb142e7e9354673/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=96404ee8443c7475b3b6a7b9beb142e7e9354673", "patch": "@@ -205,7 +205,12 @@ impl OutputType {\n #[derive(Clone, Copy, Debug, PartialEq, Eq)]\n pub enum ErrorOutputType {\n     HumanReadable(ColorConfig),\n-    Json(bool),\n+    Json {\n+        /// Render the json in a human readable way (with indents and newlines)\n+        pretty: bool,\n+        /// The `rendered` field with the command line diagnostics include color codes\n+        colorful_rendered: bool,\n+    },\n     Short(ColorConfig),\n }\n \n@@ -1345,6 +1350,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"print some statistics about AST and HIR\"),\n     always_encode_mir: bool = (false, parse_bool, [TRACKED],\n         \"encode MIR of all functions into the crate metadata\"),\n+    colorful_json: bool = (false, parse_bool, [UNTRACKED],\n+        \"encode color codes in the `rendered` field of json diagnostics\"),\n     unleash_the_miri_inside_of_you: bool = (false, parse_bool, [TRACKED],\n         \"take the breaks off const evaluation. NOTE: this is unsound\"),\n     osx_rpath_install_name: bool = (false, parse_bool, [TRACKED],\n@@ -1798,6 +1805,12 @@ pub fn rustc_optgroups() -> Vec<RustcOptGroup> {\n             \"How errors and other messages are produced\",\n             \"human|json|short\",\n         ),\n+        opt::opt(\n+            \"\",\n+            \"colorful-json\",\n+            \"Emit ansi color codes to the `rendered` field of json diagnostics\",\n+            \"TYPE\",\n+        ),\n         opt::opt_s(\n             \"\",\n             \"color\",\n@@ -1938,6 +1951,7 @@ pub fn build_session_options_and_crate_config(\n         )\n     }\n \n+    let colorful_rendered = matches.opt_present(\"colorful-json\");\n \n     // We need the opts_present check because the driver will send us Matches\n     // with only stable options if no unstable options are used. Since error-format\n@@ -1946,8 +1960,8 @@ pub fn build_session_options_and_crate_config(\n     let error_format = if matches.opts_present(&[\"error-format\".to_owned()]) {\n         match matches.opt_str(\"error-format\").as_ref().map(|s| &s[..]) {\n             Some(\"human\") => ErrorOutputType::HumanReadable(color),\n-            Some(\"json\") => ErrorOutputType::Json(false),\n-            Some(\"pretty-json\") => ErrorOutputType::Json(true),\n+            Some(\"json\") => ErrorOutputType::Json { pretty: false, colorful_rendered },\n+            Some(\"pretty-json\") => ErrorOutputType::Json { pretty: true, colorful_rendered },\n             Some(\"short\") => ErrorOutputType::Short(color),\n             None => ErrorOutputType::HumanReadable(color),\n \n@@ -1973,11 +1987,16 @@ pub fn build_session_options_and_crate_config(\n \n     let mut debugging_opts = build_debugging_options(matches, error_format);\n \n-    if !debugging_opts.unstable_options && error_format == ErrorOutputType::Json(true) {\n-        early_error(\n-            ErrorOutputType::Json(false),\n-            \"--error-format=pretty-json is unstable\",\n-        );\n+    if !debugging_opts.unstable_options {\n+        if colorful_rendered {\n+            early_error(error_format, \"--colorful-json=true is unstable\");\n+        }\n+        if let ErrorOutputType::Json { pretty: true, .. } = error_format {\n+            early_error(\n+                ErrorOutputType::Json { pretty: false, colorful_rendered: false },\n+                \"--error-format=pretty-json is unstable\",\n+            );\n+        }\n     }\n \n     if debugging_opts.pgo_gen.is_some() && !debugging_opts.pgo_use.is_empty() {"}, {"sha": "88eee1cd306d5b05d79e0d024a7a1a58c67bd8a3", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/96404ee8443c7475b3b6a7b9beb142e7e9354673/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96404ee8443c7475b3b6a7b9beb142e7e9354673/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=96404ee8443c7475b3b6a7b9beb142e7e9354673", "patch": "@@ -1046,29 +1046,34 @@ fn default_emitter(\n             ).ui_testing(sopts.debugging_opts.ui_testing),\n         ),\n         (config::ErrorOutputType::HumanReadable(_), Some(dst)) => Box::new(\n-            EmitterWriter::new(dst, Some(source_map.clone()), false, false)\n-                .ui_testing(sopts.debugging_opts.ui_testing),\n+            EmitterWriter::new(\n+                dst, Some(source_map.clone()), false, false, sopts.debugging_opts.colorful_json,\n+            ).ui_testing(sopts.debugging_opts.ui_testing),\n         ),\n-        (config::ErrorOutputType::Json(pretty), None) => Box::new(\n+        (config::ErrorOutputType::Json { pretty, colorful_rendered }, None) => Box::new(\n             JsonEmitter::stderr(\n                 Some(registry),\n                 source_map.clone(),\n                 pretty,\n+                colorful_rendered,\n             ).ui_testing(sopts.debugging_opts.ui_testing),\n         ),\n-        (config::ErrorOutputType::Json(pretty), Some(dst)) => Box::new(\n+        (config::ErrorOutputType::Json { pretty, colorful_rendered }, Some(dst)) => Box::new(\n             JsonEmitter::new(\n                 dst,\n                 Some(registry),\n                 source_map.clone(),\n                 pretty,\n+                colorful_rendered,\n             ).ui_testing(sopts.debugging_opts.ui_testing),\n         ),\n         (config::ErrorOutputType::Short(color_config), None) => Box::new(\n             EmitterWriter::stderr(color_config, Some(source_map.clone()), true, false),\n         ),\n         (config::ErrorOutputType::Short(_), Some(dst)) => {\n-            Box::new(EmitterWriter::new(dst, Some(source_map.clone()), true, false))\n+            Box::new(EmitterWriter::new(\n+                dst, Some(source_map.clone()), true, false, sopts.debugging_opts.colorful_json,\n+            ))\n         }\n     }\n }\n@@ -1317,7 +1322,8 @@ pub fn early_error(output: config::ErrorOutputType, msg: &str) -> ! {\n         config::ErrorOutputType::HumanReadable(color_config) => {\n             Box::new(EmitterWriter::stderr(color_config, None, false, false))\n         }\n-        config::ErrorOutputType::Json(pretty) => Box::new(JsonEmitter::basic(pretty)),\n+        config::ErrorOutputType::Json { pretty, colorful_rendered } =>\n+            Box::new(JsonEmitter::basic(pretty, colorful_rendered)),\n         config::ErrorOutputType::Short(color_config) => {\n             Box::new(EmitterWriter::stderr(color_config, None, true, false))\n         }\n@@ -1332,7 +1338,8 @@ pub fn early_warn(output: config::ErrorOutputType, msg: &str) {\n         config::ErrorOutputType::HumanReadable(color_config) => {\n             Box::new(EmitterWriter::stderr(color_config, None, false, false))\n         }\n-        config::ErrorOutputType::Json(pretty) => Box::new(JsonEmitter::basic(pretty)),\n+        config::ErrorOutputType::Json { pretty, colorful_rendered } =>\n+            Box::new(JsonEmitter::basic(pretty, colorful_rendered)),\n         config::ErrorOutputType::Short(color_config) => {\n             Box::new(EmitterWriter::stderr(color_config, None, true, false))\n         }"}, {"sha": "0790f9bc76146d07cf6be1e63356198dbef9611b", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/96404ee8443c7475b3b6a7b9beb142e7e9354673/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96404ee8443c7475b3b6a7b9beb142e7e9354673/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=96404ee8443c7475b3b6a7b9beb142e7e9354673", "patch": "@@ -16,7 +16,7 @@ use std::borrow::Cow;\n use std::io::prelude::*;\n use std::io;\n use std::cmp::{min, Reverse};\n-use termcolor::{StandardStream, ColorChoice, ColorSpec, BufferWriter};\n+use termcolor::{StandardStream, ColorChoice, ColorSpec, BufferWriter, Ansi};\n use termcolor::{WriteColor, Color, Buffer};\n \n const ANONYMIZED_LINE_NUM: &str = \"LL\";\n@@ -152,13 +152,15 @@ impl EmitterWriter {\n         }\n     }\n \n-    pub fn new(dst: Box<dyn Write + Send>,\n-               source_map: Option<Lrc<SourceMapperDyn>>,\n-               short_message: bool,\n-               teach: bool)\n-               -> EmitterWriter {\n+    pub fn new(\n+        dst: Box<dyn Write + Send>,\n+        source_map: Option<Lrc<SourceMapperDyn>>,\n+        short_message: bool,\n+        teach: bool,\n+        colored: bool,\n+    ) -> EmitterWriter {\n         EmitterWriter {\n-            dst: Raw(dst),\n+            dst: Raw(dst, colored),\n             sm: source_map,\n             short_message,\n             teach,\n@@ -1538,13 +1540,14 @@ fn emit_to_destination(rendered_buffer: &[Vec<StyledString>],\n pub enum Destination {\n     Terminal(StandardStream),\n     Buffered(BufferWriter),\n-    Raw(Box<dyn Write + Send>),\n+    Raw(Box<(dyn Write + Send)>, bool),\n }\n \n pub enum WritableDst<'a> {\n     Terminal(&'a mut StandardStream),\n     Buffered(&'a mut BufferWriter, Buffer),\n-    Raw(&'a mut Box<dyn Write + Send>),\n+    Raw(&'a mut (dyn Write + Send)),\n+    ColoredRaw(Ansi<&'a mut (dyn Write + Send)>),\n }\n \n impl Destination {\n@@ -1570,7 +1573,8 @@ impl Destination {\n                 let buf = t.buffer();\n                 WritableDst::Buffered(t, buf)\n             }\n-            Destination::Raw(ref mut t) => WritableDst::Raw(t),\n+            Destination::Raw(ref mut t, false) => WritableDst::Raw(t),\n+            Destination::Raw(ref mut t, true) => WritableDst::ColoredRaw(Ansi::new(t)),\n         }\n     }\n }\n@@ -1628,6 +1632,7 @@ impl<'a> WritableDst<'a> {\n         match *self {\n             WritableDst::Terminal(ref mut t) => t.set_color(color),\n             WritableDst::Buffered(_, ref mut t) => t.set_color(color),\n+            WritableDst::ColoredRaw(ref mut t) => t.set_color(color),\n             WritableDst::Raw(_) => Ok(())\n         }\n     }\n@@ -1636,6 +1641,7 @@ impl<'a> WritableDst<'a> {\n         match *self {\n             WritableDst::Terminal(ref mut t) => t.reset(),\n             WritableDst::Buffered(_, ref mut t) => t.reset(),\n+            WritableDst::ColoredRaw(ref mut t) => t.reset(),\n             WritableDst::Raw(_) => Ok(()),\n         }\n     }\n@@ -1647,6 +1653,7 @@ impl<'a> Write for WritableDst<'a> {\n             WritableDst::Terminal(ref mut t) => t.write(bytes),\n             WritableDst::Buffered(_, ref mut buf) => buf.write(bytes),\n             WritableDst::Raw(ref mut w) => w.write(bytes),\n+            WritableDst::ColoredRaw(ref mut t) => t.write(bytes),\n         }\n     }\n \n@@ -1655,6 +1662,7 @@ impl<'a> Write for WritableDst<'a> {\n             WritableDst::Terminal(ref mut t) => t.flush(),\n             WritableDst::Buffered(_, ref mut buf) => buf.flush(),\n             WritableDst::Raw(ref mut w) => w.flush(),\n+            WritableDst::ColoredRaw(ref mut w) => w.flush(),\n         }\n     }\n }"}, {"sha": "55005a821b274c4a65f5f22698c9cf621e5e50a7", "filename": "src/libsyntax/json.rs", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/96404ee8443c7475b3b6a7b9beb142e7e9354673/src%2Flibsyntax%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96404ee8443c7475b3b6a7b9beb142e7e9354673/src%2Flibsyntax%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fjson.rs?ref=96404ee8443c7475b3b6a7b9beb142e7e9354673", "patch": "@@ -30,37 +30,46 @@ pub struct JsonEmitter {\n     sm: Lrc<dyn SourceMapper + sync::Send + sync::Sync>,\n     pretty: bool,\n     ui_testing: bool,\n+    colorful_rendered: bool,\n }\n \n impl JsonEmitter {\n-    pub fn stderr(registry: Option<Registry>,\n-                  source_map: Lrc<SourceMap>,\n-                  pretty: bool) -> JsonEmitter {\n+    pub fn stderr(\n+        registry: Option<Registry>,\n+        source_map: Lrc<SourceMap>,\n+        pretty: bool,\n+        colorful_rendered: bool,\n+    ) -> JsonEmitter {\n         JsonEmitter {\n             dst: Box::new(io::stderr()),\n             registry,\n             sm: source_map,\n             pretty,\n             ui_testing: false,\n+            colorful_rendered,\n         }\n     }\n \n-    pub fn basic(pretty: bool) -> JsonEmitter {\n+    pub fn basic(pretty: bool, colorful_rendered: bool) -> JsonEmitter {\n         let file_path_mapping = FilePathMapping::empty();\n         JsonEmitter::stderr(None, Lrc::new(SourceMap::new(file_path_mapping)),\n-                            pretty)\n+                            pretty, colorful_rendered)\n     }\n \n-    pub fn new(dst: Box<dyn Write + Send>,\n-               registry: Option<Registry>,\n-               source_map: Lrc<SourceMap>,\n-               pretty: bool) -> JsonEmitter {\n+    pub fn new(\n+        dst: Box<dyn Write + Send>,\n+        registry: Option<Registry>,\n+        source_map: Lrc<SourceMap>,\n+        pretty: bool,\n+        colorful_rendered: bool,\n+    ) -> JsonEmitter {\n         JsonEmitter {\n             dst,\n             registry,\n             sm: source_map,\n             pretty,\n             ui_testing: false,\n+            colorful_rendered,\n         }\n     }\n \n@@ -190,7 +199,7 @@ impl Diagnostic {\n         }\n         let buf = BufWriter::default();\n         let output = buf.clone();\n-        EmitterWriter::new(Box::new(buf), Some(je.sm.clone()), false, false)\n+        EmitterWriter::new(Box::new(buf), Some(je.sm.clone()), false, false, je.colorful_rendered)\n             .ui_testing(je.ui_testing).emit(db);\n         let output = Arc::try_unwrap(output.0).unwrap().into_inner().unwrap();\n         let output = String::from_utf8(output).unwrap();"}, {"sha": "9cf3d0fa40301a7eb1ef6b86599c470d61c55d83", "filename": "src/test/ui/lint/use_suggestion_json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96404ee8443c7475b3b6a7b9beb142e7e9354673/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96404ee8443c7475b3b6a7b9beb142e7e9354673/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.rs?ref=96404ee8443c7475b3b6a7b9beb142e7e9354673", "patch": "@@ -1,5 +1,5 @@\n // ignore-cloudabi\n-// compile-flags: --error-format pretty-json -Zunstable-options\n+// compile-flags: --error-format pretty-json -Zunstable-options --colorful-json=true\n \n // The output for humans should just highlight the whole span without showing\n // the suggested replacement, but we also want to test that suggested"}, {"sha": "789bb5ea72f628b72a12320090af607ea80cb259", "filename": "src/test/ui/lint/use_suggestion_json.stderr", "status": "modified", "additions": 44, "deletions": 44, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/96404ee8443c7475b3b6a7b9beb142e7e9354673/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/96404ee8443c7475b3b6a7b9beb142e7e9354673/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.stderr?ref=96404ee8443c7475b3b6a7b9beb142e7e9354673", "patch": "@@ -73,8 +73,8 @@ mod foo {\n   \"spans\": [\n     {\n       \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-      \"byte_start\": 440,\n-      \"byte_end\": 444,\n+      \"byte_start\": 461,\n+      \"byte_end\": 465,\n       \"line_start\": 11,\n       \"line_end\": 11,\n       \"column_start\": 12,\n@@ -101,8 +101,8 @@ mod foo {\n       \"spans\": [\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 417,\n-          \"byte_end\": 417,\n+          \"byte_start\": 438,\n+          \"byte_end\": 438,\n           \"line_start\": 10,\n           \"line_end\": 10,\n           \"column_start\": 1,\n@@ -124,8 +124,8 @@ mod foo {\n         },\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 417,\n-          \"byte_end\": 417,\n+          \"byte_start\": 438,\n+          \"byte_end\": 438,\n           \"line_start\": 10,\n           \"line_end\": 10,\n           \"column_start\": 1,\n@@ -147,8 +147,8 @@ mod foo {\n         },\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 417,\n-          \"byte_end\": 417,\n+          \"byte_start\": 438,\n+          \"byte_end\": 438,\n           \"line_start\": 10,\n           \"line_end\": 10,\n           \"column_start\": 1,\n@@ -170,8 +170,8 @@ mod foo {\n         },\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 417,\n-          \"byte_end\": 417,\n+          \"byte_start\": 438,\n+          \"byte_end\": 438,\n           \"line_start\": 10,\n           \"line_end\": 10,\n           \"column_start\": 1,\n@@ -193,8 +193,8 @@ mod foo {\n         },\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 417,\n-          \"byte_end\": 417,\n+          \"byte_start\": 438,\n+          \"byte_end\": 438,\n           \"line_start\": 10,\n           \"line_end\": 10,\n           \"column_start\": 1,\n@@ -216,8 +216,8 @@ mod foo {\n         },\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 417,\n-          \"byte_end\": 417,\n+          \"byte_start\": 438,\n+          \"byte_end\": 438,\n           \"line_start\": 10,\n           \"line_end\": 10,\n           \"column_start\": 1,\n@@ -239,8 +239,8 @@ mod foo {\n         },\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 417,\n-          \"byte_end\": 417,\n+          \"byte_start\": 438,\n+          \"byte_end\": 438,\n           \"line_start\": 10,\n           \"line_end\": 10,\n           \"column_start\": 1,\n@@ -262,8 +262,8 @@ mod foo {\n         },\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 417,\n-          \"byte_end\": 417,\n+          \"byte_start\": 438,\n+          \"byte_end\": 438,\n           \"line_start\": 10,\n           \"line_end\": 10,\n           \"column_start\": 1,\n@@ -285,8 +285,8 @@ mod foo {\n         },\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 417,\n-          \"byte_end\": 417,\n+          \"byte_start\": 438,\n+          \"byte_end\": 438,\n           \"line_start\": 10,\n           \"line_end\": 10,\n           \"column_start\": 1,\n@@ -308,8 +308,8 @@ mod foo {\n         },\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 417,\n-          \"byte_end\": 417,\n+          \"byte_start\": 438,\n+          \"byte_end\": 438,\n           \"line_start\": 10,\n           \"line_end\": 10,\n           \"column_start\": 1,\n@@ -331,8 +331,8 @@ mod foo {\n         },\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 417,\n-          \"byte_end\": 417,\n+          \"byte_start\": 438,\n+          \"byte_end\": 438,\n           \"line_start\": 10,\n           \"line_end\": 10,\n           \"column_start\": 1,\n@@ -354,8 +354,8 @@ mod foo {\n         },\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 417,\n-          \"byte_end\": 417,\n+          \"byte_start\": 438,\n+          \"byte_end\": 438,\n           \"line_start\": 10,\n           \"line_end\": 10,\n           \"column_start\": 1,\n@@ -380,22 +380,22 @@ mod foo {\n       \"rendered\": null\n     }\n   ],\n-  \"rendered\": \"error[E0412]: cannot find type `Iter` in this scope\n-  --> $DIR/use_suggestion_json.rs:11:12\n-   |\n-LL |     let x: Iter;\n-   |            ^^^^ not found in this scope\n-help: possible candidates are found in other modules, you can import them into scope\n-   |\n-LL | use std::collections::binary_heap::Iter;\n-   |\n-LL | use std::collections::btree_map::Iter;\n-   |\n-LL | use std::collections::btree_set::Iter;\n-   |\n-LL | use std::collections::hash_map::Iter;\n-   |\n-and 8 other candidates\n+  \"rendered\": \"/u001b[0m/u001b[1m/u001b[38;5;9merror[E0412]/u001b[0m/u001b[0m/u001b[1m: cannot find type `Iter` in this scope/u001b[0m\n+/u001b[0m  /u001b[0m/u001b[0m/u001b[1m/u001b[38;5;12m--> /u001b[0m/u001b[0m$DIR/use_suggestion_json.rs:11:12/u001b[0m\n+/u001b[0m   /u001b[0m/u001b[0m/u001b[1m/u001b[38;5;12m|/u001b[0m\n+/u001b[0m/u001b[1m/u001b[38;5;12mLL/u001b[0m/u001b[0m /u001b[0m/u001b[0m/u001b[1m/u001b[38;5;12m| /u001b[0m/u001b[0m    let x: Iter;/u001b[0m\n+/u001b[0m   /u001b[0m/u001b[0m/u001b[1m/u001b[38;5;12m| /u001b[0m/u001b[0m           /u001b[0m/u001b[0m/u001b[1m/u001b[38;5;9m^^^^/u001b[0m/u001b[0m /u001b[0m/u001b[0m/u001b[1m/u001b[38;5;9mnot found in this scope/u001b[0m\n+/u001b[0m/u001b[1m/u001b[38;5;14mhelp/u001b[0m/u001b[0m: possible candidates are found in other modules, you can import them into scope/u001b[0m\n+/u001b[0m   /u001b[0m/u001b[0m/u001b[1m/u001b[38;5;12m|/u001b[0m\n+/u001b[0m/u001b[1m/u001b[38;5;12mLL/u001b[0m/u001b[0m /u001b[0m/u001b[0m/u001b[1m/u001b[38;5;12m| /u001b[0m/u001b[0muse std::collections::binary_heap::Iter;/u001b[0m\n+/u001b[0m   /u001b[0m/u001b[0m/u001b[1m/u001b[38;5;12m|/u001b[0m\n+/u001b[0m/u001b[1m/u001b[38;5;12mLL/u001b[0m/u001b[0m /u001b[0m/u001b[0m/u001b[1m/u001b[38;5;12m| /u001b[0m/u001b[0muse std::collections::btree_map::Iter;/u001b[0m\n+/u001b[0m   /u001b[0m/u001b[0m/u001b[1m/u001b[38;5;12m|/u001b[0m\n+/u001b[0m/u001b[1m/u001b[38;5;12mLL/u001b[0m/u001b[0m /u001b[0m/u001b[0m/u001b[1m/u001b[38;5;12m| /u001b[0m/u001b[0muse std::collections::btree_set::Iter;/u001b[0m\n+/u001b[0m   /u001b[0m/u001b[0m/u001b[1m/u001b[38;5;12m|/u001b[0m\n+/u001b[0m/u001b[1m/u001b[38;5;12mLL/u001b[0m/u001b[0m /u001b[0m/u001b[0m/u001b[1m/u001b[38;5;12m| /u001b[0m/u001b[0muse std::collections::hash_map::Iter;/u001b[0m\n+/u001b[0m   /u001b[0m/u001b[0m/u001b[1m/u001b[38;5;12m|/u001b[0m\n+/u001b[0mand 8 other candidates/u001b[0m\n \n \"\n }\n@@ -405,7 +405,7 @@ and 8 other candidates\n   \"level\": \"error\",\n   \"spans\": [],\n   \"children\": [],\n-  \"rendered\": \"error: aborting due to previous error\n+  \"rendered\": \"/u001b[0m/u001b[1m/u001b[38;5;9merror/u001b[0m/u001b[0m/u001b[1m: aborting due to previous error/u001b[0m\n \n \"\n }\n@@ -415,6 +415,6 @@ and 8 other candidates\n   \"level\": \"\",\n   \"spans\": [],\n   \"children\": [],\n-  \"rendered\": \"For more information about this error, try `rustc --explain E0412`.\n+  \"rendered\": \"/u001b[0m/u001b[1mFor more information about this error, try `rustc --explain E0412`./u001b[0m\n \"\n }"}]}