{"sha": "7cf470b6dadcb3294e4fa1649dd7a1bad8316347", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjZjQ3MGI2ZGFkY2IzMjk0ZTRmYTE2NDlkZDdhMWJhZDgzMTYzNDc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-12-23T09:31:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-12-23T09:31:25Z"}, "message": "Merge pull request #20001 from huonw/speeling2\n\nFix some spelling errors.\n\nReviewed-by: nick29581", "tree": {"sha": "66d3d3d9061f765ac6f7c03d3804a1963f208481", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66d3d3d9061f765ac6f7c03d3804a1963f208481"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7cf470b6dadcb3294e4fa1649dd7a1bad8316347", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7cf470b6dadcb3294e4fa1649dd7a1bad8316347", "html_url": "https://github.com/rust-lang/rust/commit/7cf470b6dadcb3294e4fa1649dd7a1bad8316347", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7cf470b6dadcb3294e4fa1649dd7a1bad8316347/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e751038bfd51a55736ad7a6a18bad1cb1428b5db", "url": "https://api.github.com/repos/rust-lang/rust/commits/e751038bfd51a55736ad7a6a18bad1cb1428b5db", "html_url": "https://github.com/rust-lang/rust/commit/e751038bfd51a55736ad7a6a18bad1cb1428b5db"}, {"sha": "832c3e3cd725d85963c70cfdce26b13a5c0d508f", "url": "https://api.github.com/repos/rust-lang/rust/commits/832c3e3cd725d85963c70cfdce26b13a5c0d508f", "html_url": "https://github.com/rust-lang/rust/commit/832c3e3cd725d85963c70cfdce26b13a5c0d508f"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "6c213555ce496db187b746cd9aeac834efd726ee", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7cf470b6dadcb3294e4fa1649dd7a1bad8316347/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cf470b6dadcb3294e4fa1649dd7a1bad8316347/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=7cf470b6dadcb3294e4fa1649dd7a1bad8316347", "patch": "@@ -39,7 +39,7 @@ impl Ascii {\n         self.chr\n     }\n \n-    /// Deprecated: use `as_byte` isntead.\n+    /// Deprecated: use `as_byte` instead.\n     #[deprecated = \"use as_byte\"]\n     pub fn to_byte(self) -> u8 {\n         self.as_byte()\n@@ -52,7 +52,7 @@ impl Ascii {\n         self.chr as char\n     }\n \n-    /// Deprecated: use `as_char` isntead.\n+    /// Deprecated: use `as_char` instead.\n     #[deprecated = \"use as_char\"]\n     pub fn to_char(self) -> char {\n         self.as_char()"}, {"sha": "7352cdfbfe7f8ded86c76515e3754c6699160edc", "filename": "src/libstd/comm/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7cf470b6dadcb3294e4fa1649dd7a1bad8316347/src%2Flibstd%2Fcomm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cf470b6dadcb3294e4fa1649dd7a1bad8316347/src%2Flibstd%2Fcomm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm%2Fmod.rs?ref=7cf470b6dadcb3294e4fa1649dd7a1bad8316347", "patch": "@@ -547,7 +547,7 @@ impl<T: Send> Sender<T> {\n     /// so it is possible for a send to succeed (the other end is alive), but\n     /// then the other end could immediately disconnect.\n     ///\n-    /// The purpose of this functionality is to propagate panicks among tasks.\n+    /// The purpose of this functionality is to propagate panics among tasks.\n     /// If a panic is not desired, then consider using the `send_opt` method\n     #[experimental = \"this function is being considered candidate for removal \\\n                       to adhere to the general guidelines of rust\"]\n@@ -790,7 +790,7 @@ impl<T: Send> Receiver<T> {\n     ///\n     /// Similar to channels, this method will trigger a task panic if the\n     /// other end of the channel has hung up (been deallocated). The purpose of\n-    /// this is to propagate panicks among tasks.\n+    /// this is to propagate panics among tasks.\n     ///\n     /// If a panic is not desired, then there are two options:\n     ///"}, {"sha": "add986387daf7db4df672497d38e8f25a05999e4", "filename": "src/libstd/io/net/ip.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7cf470b6dadcb3294e4fa1649dd7a1bad8316347/src%2Flibstd%2Fio%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cf470b6dadcb3294e4fa1649dd7a1bad8316347/src%2Flibstd%2Fio%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fip.rs?ref=7cf470b6dadcb3294e4fa1649dd7a1bad8316347", "patch": "@@ -383,8 +383,8 @@ impl FromStr for SocketAddr {\n ///    expected by its `FromStr` implementation or a string like `<host_name>:<port>` pair\n ///    where `<port>` is a `u16` value.\n ///\n-///    For the former, `to_socker_addr_all` returns a vector with a single element corresponding\n-///    to that socker address.\n+///    For the former, `to_socket_addr_all` returns a vector with a single element corresponding\n+///    to that socket address.\n ///\n ///    For the latter, it tries to resolve the host name and returns a vector of all IP addresses\n ///    for the host name, each joined with the port.\n@@ -443,7 +443,7 @@ pub trait ToSocketAddr {\n \n     /// Converts this object to all available socket address values.\n     ///\n-    /// Some values like host name string naturally corrrespond to multiple IP addresses.\n+    /// Some values like host name string naturally correspond to multiple IP addresses.\n     /// This method tries to return all available addresses corresponding to this object.\n     ///\n     /// By default this method delegates to `to_socket_addr` method, creating a singleton"}, {"sha": "6adb5387f2ef5e796d23a378c6c9426535e66c59", "filename": "src/libstd/io/net/tcp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7cf470b6dadcb3294e4fa1649dd7a1bad8316347/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cf470b6dadcb3294e4fa1649dd7a1bad8316347/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs?ref=7cf470b6dadcb3294e4fa1649dd7a1bad8316347", "patch": "@@ -319,7 +319,7 @@ impl TcpListener {\n     /// to this listener. The port allocated can be queried via the\n     /// `socket_name` function.\n     ///\n-    /// The address type can be any implementor of `ToSocketAddr` trait. See its\n+    /// The address type can be any implementer of `ToSocketAddr` trait. See its\n     /// documentation for concrete examples.\n     pub fn bind<A: ToSocketAddr>(addr: A) -> IoResult<TcpListener> {\n         super::with_addresses(addr, |addr| {"}, {"sha": "f462143faf4c16383a4bf57ad15599c3c4d502d7", "filename": "src/libstd/io/net/udp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7cf470b6dadcb3294e4fa1649dd7a1bad8316347/src%2Flibstd%2Fio%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cf470b6dadcb3294e4fa1649dd7a1bad8316347/src%2Flibstd%2Fio%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fudp.rs?ref=7cf470b6dadcb3294e4fa1649dd7a1bad8316347", "patch": "@@ -82,7 +82,7 @@ impl UdpSocket {\n     /// Sends data on the socket to the given address. Returns nothing on\n     /// success.\n     ///\n-    /// Address type can be any implementor of `ToSocketAddr` trait. See its\n+    /// Address type can be any implementer of `ToSocketAddr` trait. See its\n     /// documentation for concrete examples.\n     pub fn send_to<A: ToSocketAddr>(&mut self, buf: &[u8], addr: A) -> IoResult<()> {\n         super::with_addresses(addr, |addr| self.inner.send_to(buf, addr))"}, {"sha": "3f177a42f4471af71af98129cda5f7e8086c1ae6", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7cf470b6dadcb3294e4fa1649dd7a1bad8316347/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cf470b6dadcb3294e4fa1649dd7a1bad8316347/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=7cf470b6dadcb3294e4fa1649dd7a1bad8316347", "patch": "@@ -60,7 +60,7 @@ pub struct RWLock<T> {\n     data: UnsafeCell<T>,\n }\n \n-/// Structure representing a staticaly allocated RWLock.\n+/// Structure representing a statically allocated RWLock.\n ///\n /// This structure is intended to be used inside of a `static` and will provide\n /// automatic global access as well as lazy initialization. The internal"}, {"sha": "643a0f55e7427aba7a6f9bd0f24becf86c934221", "filename": "src/libstd/thread_local/scoped.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7cf470b6dadcb3294e4fa1649dd7a1bad8316347/src%2Flibstd%2Fthread_local%2Fscoped.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cf470b6dadcb3294e4fa1649dd7a1bad8316347/src%2Flibstd%2Fthread_local%2Fscoped.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread_local%2Fscoped.rs?ref=7cf470b6dadcb3294e4fa1649dd7a1bad8316347", "patch": "@@ -17,7 +17,7 @@\n //!\n //! There are no restrictions on what types can be placed into a scoped\n //! variable, but all scoped variables are initialized to the equivalent of\n-//! null. Scoped thread local stor is useful when a value is present for a known\n+//! null. Scoped thread local storage is useful when a value is present for a known\n //! period of time and it is not required to relinquish ownership of the\n //! contents.\n //!"}]}