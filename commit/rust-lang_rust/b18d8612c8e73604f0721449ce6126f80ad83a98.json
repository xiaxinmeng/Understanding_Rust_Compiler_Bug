{"sha": "b18d8612c8e73604f0721449ce6126f80ad83a98", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxOGQ4NjEyYzhlNzM2MDRmMDcyMTQ0OWNlNjEyNmY4MGFkODNhOTg=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-28T20:11:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-28T20:11:58Z"}, "message": "Rollup merge of #64131 - shivan1b:deterministic-fxhashmap, r=Mark-Simulacrum\n\ndata_structures: Add deterministic FxHashMap and FxHashSet wrappers\n\nStableMap\nA wrapper for FxHashMap that allows to `insert`, `remove`, `get`, `get_mut` and convert a hashmap into a sorted vector using the method `into_sorted_vector` but no iteration support.\n\nStableSet\nA wrapper for FxHashSet that allows to `insert`, `remove`, `get` and convert a hashset into a sorted vector using the method `into_sorted_vector` but no iteration support.\n\nAddresses issue #63713", "tree": {"sha": "b3d45c6461791cc43618bf54ba8b0929ec11ec14", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3d45c6461791cc43618bf54ba8b0929ec11ec14"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b18d8612c8e73604f0721449ce6126f80ad83a98", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdj76OCRBK7hj4Ov3rIwAAdHIIAE+wATSnCRU61Fug0eNYK+iQ\nWIIvja6knN9dVX3mbIwswPahhRDnZA2JM2P5Bh13OohUMDQqd4+0C5P+0jHL4Uzg\n95qa7ujJ3mwV8s3YvRv4lIKqKteq2rnl2wLszyVpDgoMRvnr/o2reofJlJ1EyBUG\nL9WviIBP1uJOUFCTYJiYwKjIiYLa9WwZbLiNIBbA2HkWM32tSfsmjFqj7OwJzJdV\nV3qtiRWEaANBZHSZZ1jBXmRBM/hPns5pG+A51m/OuuR6b2gZZHCz4Qx6f0B51myr\nl1F8L5hQXjhR6oUc9SDWFGXJZFe0XW5I9ZaL/5SvkCQ6R8CegDyvAltybwLkuMI=\n=xaZW\n-----END PGP SIGNATURE-----\n", "payload": "tree b3d45c6461791cc43618bf54ba8b0929ec11ec14\nparent 488381ce9ef0ceabe83b73127c659e5d38137df0\nparent 800bd3a11c45ef62726b1c29c2c165e2dbf85ae2\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1569701518 +0200\ncommitter GitHub <noreply@github.com> 1569701518 +0200\n\nRollup merge of #64131 - shivan1b:deterministic-fxhashmap, r=Mark-Simulacrum\n\ndata_structures: Add deterministic FxHashMap and FxHashSet wrappers\n\nStableMap\nA wrapper for FxHashMap that allows to `insert`, `remove`, `get`, `get_mut` and convert a hashmap into a sorted vector using the method `into_sorted_vector` but no iteration support.\n\nStableSet\nA wrapper for FxHashSet that allows to `insert`, `remove`, `get` and convert a hashset into a sorted vector using the method `into_sorted_vector` but no iteration support.\n\nAddresses issue #63713\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b18d8612c8e73604f0721449ce6126f80ad83a98", "html_url": "https://github.com/rust-lang/rust/commit/b18d8612c8e73604f0721449ce6126f80ad83a98", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b18d8612c8e73604f0721449ce6126f80ad83a98/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "488381ce9ef0ceabe83b73127c659e5d38137df0", "url": "https://api.github.com/repos/rust-lang/rust/commits/488381ce9ef0ceabe83b73127c659e5d38137df0", "html_url": "https://github.com/rust-lang/rust/commit/488381ce9ef0ceabe83b73127c659e5d38137df0"}, {"sha": "800bd3a11c45ef62726b1c29c2c165e2dbf85ae2", "url": "https://api.github.com/repos/rust-lang/rust/commits/800bd3a11c45ef62726b1c29c2c165e2dbf85ae2", "html_url": "https://github.com/rust-lang/rust/commit/800bd3a11c45ef62726b1c29c2c165e2dbf85ae2"}], "stats": {"total": 178, "additions": 178, "deletions": 0}, "files": [{"sha": "d6e9c479c9b8dad1d1e5fb87763a8a406a480af4", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b18d8612c8e73604f0721449ce6126f80ad83a98/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b18d8612c8e73604f0721449ce6126f80ad83a98/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=b18d8612c8e73604f0721449ce6126f80ad83a98", "patch": "@@ -73,6 +73,7 @@ pub mod box_region;\n pub mod const_cstr;\n pub mod flock;\n pub mod fx;\n+pub mod stable_map;\n pub mod graph;\n pub mod indexed_vec;\n pub mod jobserver;\n@@ -84,6 +85,7 @@ pub mod small_c_str;\n pub mod snapshot_map;\n pub use ena::snapshot_vec;\n pub mod sorted_map;\n+pub mod stable_set;\n #[macro_use] pub mod stable_hasher;\n pub mod sync;\n pub mod sharded;"}, {"sha": "f69f28e14b2a1b3fcd2d6ceace3e812ff5fe9cc5", "filename": "src/librustc_data_structures/stable_map.rs", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/b18d8612c8e73604f0721449ce6126f80ad83a98/src%2Flibrustc_data_structures%2Fstable_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b18d8612c8e73604f0721449ce6126f80ad83a98/src%2Flibrustc_data_structures%2Fstable_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fstable_map.rs?ref=b18d8612c8e73604f0721449ce6126f80ad83a98", "patch": "@@ -0,0 +1,99 @@\n+pub use rustc_hash::FxHashMap;\n+use std::borrow::Borrow;\n+use std::collections::hash_map::Entry;\n+use std::fmt;\n+use std::hash::Hash;\n+\n+/// A deterministic wrapper around FxHashMap that does not provide iteration support.\n+///\n+/// It supports insert, remove, get and get_mut functions from FxHashMap.\n+/// It also allows to convert hashmap to a sorted vector with the method `into_sorted_vector()`.\n+#[derive(Clone)]\n+pub struct StableMap<K, V> {\n+    base: FxHashMap<K, V>,\n+}\n+\n+impl<K, V> Default for StableMap<K, V>\n+where\n+    K: Eq + Hash,\n+{\n+    fn default() -> StableMap<K, V> {\n+        StableMap::new()\n+    }\n+}\n+\n+impl<K, V> fmt::Debug for StableMap<K, V>\n+where\n+    K: Eq + Hash + fmt::Debug,\n+    V: fmt::Debug,\n+{\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(f, \"{:?}\", self.base)\n+    }\n+}\n+\n+impl<K, V> PartialEq for StableMap<K, V>\n+where\n+    K: Eq + Hash,\n+    V: PartialEq,\n+{\n+    fn eq(&self, other: &StableMap<K, V>) -> bool {\n+        self.base == other.base\n+    }\n+}\n+\n+impl<K, V> Eq for StableMap<K, V>\n+where\n+    K: Eq + Hash,\n+    V: Eq,\n+{}\n+\n+impl<K, V> StableMap<K, V>\n+where\n+    K: Eq + Hash,\n+{\n+    pub fn new() -> StableMap<K, V> {\n+        StableMap { base: FxHashMap::default() }\n+    }\n+\n+    pub fn into_sorted_vector(self) -> Vec<(K, V)>\n+    where\n+        K: Ord + Copy,\n+    {\n+        let mut vector = self.base.into_iter().collect::<Vec<_>>();\n+        vector.sort_unstable_by_key(|pair| pair.0);\n+        vector\n+    }\n+\n+    pub fn entry(&mut self, k: K) -> Entry<'_, K, V> {\n+        self.base.entry(k)\n+    }\n+\n+    pub fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>\n+    where\n+        K: Borrow<Q>,\n+        Q: Hash + Eq,\n+    {\n+        self.base.get(k)\n+    }\n+\n+    pub fn get_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut V>\n+    where\n+        K: Borrow<Q>,\n+        Q: Hash + Eq,\n+    {\n+        self.base.get_mut(k)\n+    }\n+\n+    pub fn insert(&mut self, k: K, v: V) -> Option<V> {\n+        self.base.insert(k, v)\n+    }\n+\n+    pub fn remove<Q: ?Sized>(&mut self, k: &Q) -> Option<V>\n+    where\n+        K: Borrow<Q>,\n+        Q: Hash + Eq,\n+    {\n+        self.base.remove(k)\n+    }\n+}"}, {"sha": "c7ca74f5fbd9d1243f1895b392451b6b4757fbd9", "filename": "src/librustc_data_structures/stable_set.rs", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/b18d8612c8e73604f0721449ce6126f80ad83a98/src%2Flibrustc_data_structures%2Fstable_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b18d8612c8e73604f0721449ce6126f80ad83a98/src%2Flibrustc_data_structures%2Fstable_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fstable_set.rs?ref=b18d8612c8e73604f0721449ce6126f80ad83a98", "patch": "@@ -0,0 +1,77 @@\n+pub use rustc_hash::FxHashSet;\n+use std::borrow::Borrow;\n+use std::fmt;\n+use std::hash::Hash;\n+\n+/// A deterministic wrapper around FxHashSet that does not provide iteration support.\n+///\n+/// It supports insert, remove, get functions from FxHashSet.\n+/// It also allows to convert hashset to a sorted vector with the method `into_sorted_vector()`.\n+#[derive(Clone)]\n+pub struct StableSet<T> {\n+    base: FxHashSet<T>,\n+}\n+\n+impl<T> Default for StableSet<T>\n+where\n+    T: Eq + Hash,\n+{\n+    fn default() -> StableSet<T> {\n+        StableSet::new()\n+    }\n+}\n+\n+impl<T> fmt::Debug for StableSet<T>\n+where\n+    T: Eq + Hash + fmt::Debug,\n+{\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(f, \"{:?}\", self.base)\n+    }\n+}\n+\n+impl<T> PartialEq<StableSet<T>> for StableSet<T>\n+where\n+    T: Eq + Hash,\n+{\n+    fn eq(&self, other: &StableSet<T>) -> bool {\n+        self.base == other.base\n+    }\n+}\n+\n+impl<T> Eq for StableSet<T> where T: Eq + Hash {}\n+\n+impl<T: Hash + Eq> StableSet<T> {\n+    pub fn new() -> StableSet<T> {\n+        StableSet { base: FxHashSet::default() }\n+    }\n+\n+    pub fn into_sorted_vector(self) -> Vec<T>\n+    where\n+        T: Ord,\n+    {\n+        let mut vector = self.base.into_iter().collect::<Vec<_>>();\n+        vector.sort_unstable();\n+        vector\n+    }\n+\n+    pub fn get<Q: ?Sized>(&self, value: &Q) -> Option<&T>\n+    where\n+        T: Borrow<Q>,\n+        Q: Hash + Eq,\n+    {\n+        self.base.get(value)\n+    }\n+\n+    pub fn insert(&mut self, value: T) -> bool {\n+        self.base.insert(value)\n+    }\n+\n+    pub fn remove<Q: ?Sized>(&mut self, value: &Q) -> bool\n+    where\n+        T: Borrow<Q>,\n+        Q: Hash + Eq,\n+    {\n+        self.base.remove(value)\n+    }\n+}"}]}