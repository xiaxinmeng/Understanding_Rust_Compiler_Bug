{"sha": "a0767d6096e2da69381b4d925f3f22887f754aef", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwNzY3ZDYwOTZlMmRhNjkzODFiNGQ5MjVmM2YyMjg4N2Y3NTRhZWY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-02-14T01:41:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-02-14T01:41:24Z"}, "message": "Rollup merge of #58308 - gnzlbg:context_insert_intr, r=eddyb\n\nExtract block to insert an intrinsic into its own function\n\nr? @eddyb", "tree": {"sha": "fd070f430bac8a7e503c2a8d59302a1bbb987b8f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd070f430bac8a7e503c2a8d59302a1bbb987b8f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0767d6096e2da69381b4d925f3f22887f754aef", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcZMdECRBK7hj4Ov3rIwAAdHIIAJHMIFMXO4LQJNhREdZbvLzs\nSwCxMN7EsLYP8i5GnxEdBv2I39ZKVFYnKQ/brtsHYso1pWet6X0msTnAtvKzpMnA\n5VQ/9KRzihpCfH323Qyz39XS95Dfgo4F5yey2OqmkBq2dZ5nl7NpNlkDzaIZqKfB\namvdTzSkxV+E7XFpoH4TOPOeR8ZWGgnmhhiLABz8kNfAIe6hp/daMgTaB1Gkkm3U\nNW3j5D29W1SQXk13q5KVXVfCQ2+D52v/f3eSh2phxijfzfn0WyPZIalmOYUoGzQ+\nH0cLCrXEjYWAKICvUxgvOCWjqc2arNiHwpvdJKKh4i5bDE3LyHe0SrH7TMDOS9U=\n=woTT\n-----END PGP SIGNATURE-----\n", "payload": "tree fd070f430bac8a7e503c2a8d59302a1bbb987b8f\nparent fab0f9be32dd39b8b821bbc758101720d134fcf1\nparent 7d6bfc53c85d3eb9470fd30621a1b54a61bbbdb6\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1550108484 +0100\ncommitter GitHub <noreply@github.com> 1550108484 +0100\n\nRollup merge of #58308 - gnzlbg:context_insert_intr, r=eddyb\n\nExtract block to insert an intrinsic into its own function\n\nr? @eddyb\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0767d6096e2da69381b4d925f3f22887f754aef", "html_url": "https://github.com/rust-lang/rust/commit/a0767d6096e2da69381b4d925f3f22887f754aef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0767d6096e2da69381b4d925f3f22887f754aef/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fab0f9be32dd39b8b821bbc758101720d134fcf1", "url": "https://api.github.com/repos/rust-lang/rust/commits/fab0f9be32dd39b8b821bbc758101720d134fcf1", "html_url": "https://github.com/rust-lang/rust/commit/fab0f9be32dd39b8b821bbc758101720d134fcf1"}, {"sha": "7d6bfc53c85d3eb9470fd30621a1b54a61bbbdb6", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d6bfc53c85d3eb9470fd30621a1b54a61bbbdb6", "html_url": "https://github.com/rust-lang/rust/commit/7d6bfc53c85d3eb9470fd30621a1b54a61bbbdb6"}], "stats": {"total": 29, "additions": 17, "deletions": 12}, "files": [{"sha": "8144132832e50cbca7d3cfe625da98a2e7f4e230", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/a0767d6096e2da69381b4d925f3f22887f754aef/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0767d6096e2da69381b4d925f3f22887f754aef/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=a0767d6096e2da69381b4d925f3f22887f754aef", "patch": "@@ -465,33 +465,38 @@ impl CodegenCx<'b, 'tcx> {\n         self.declare_intrinsic(key).unwrap_or_else(|| bug!(\"unknown intrinsic '{}'\", key))\n     }\n \n+    fn insert_intrinsic(\n+        &self, name: &'static str, args: Option<&[&'b llvm::Type]>, ret: &'b llvm::Type\n+    ) -> &'b llvm::Value {\n+        let fn_ty = if let Some(args) = args {\n+            self.type_func(args, ret)\n+        } else {\n+            self.type_variadic_func(&[], ret)\n+        };\n+        let f = self.declare_cfn(name, fn_ty);\n+        llvm::SetUnnamedAddr(f, false);\n+        self.intrinsics.borrow_mut().insert(name, f.clone());\n+        f\n+    }\n+\n     fn declare_intrinsic(\n         &self,\n         key: &str\n     ) -> Option<&'b Value> {\n         macro_rules! ifn {\n             ($name:expr, fn() -> $ret:expr) => (\n                 if key == $name {\n-                    let f = self.declare_cfn($name, self.type_func(&[], $ret));\n-                    llvm::SetUnnamedAddr(f, false);\n-                    self.intrinsics.borrow_mut().insert($name, f.clone());\n-                    return Some(f);\n+                    return Some(self.insert_intrinsic($name, Some(&[]), $ret));\n                 }\n             );\n             ($name:expr, fn(...) -> $ret:expr) => (\n                 if key == $name {\n-                    let f = self.declare_cfn($name, self.type_variadic_func(&[], $ret));\n-                    llvm::SetUnnamedAddr(f, false);\n-                    self.intrinsics.borrow_mut().insert($name, f.clone());\n-                    return Some(f);\n+                    return Some(self.insert_intrinsic($name, None, $ret));\n                 }\n             );\n             ($name:expr, fn($($arg:expr),*) -> $ret:expr) => (\n                 if key == $name {\n-                    let f = self.declare_cfn($name, self.type_func(&[$($arg),*], $ret));\n-                    llvm::SetUnnamedAddr(f, false);\n-                    self.intrinsics.borrow_mut().insert($name, f.clone());\n-                    return Some(f);\n+                    return Some(self.insert_intrinsic($name, Some(&[$($arg),*]), $ret));\n                 }\n             );\n         }"}]}