{"sha": "7391124154094b9177e0448026aa0d6dd5c1a48a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczOTExMjQxNTQwOTRiOTE3N2UwNDQ4MDI2YWEwZDZkZDVjMWE0OGE=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-03-30T23:14:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-30T23:14:40Z"}, "message": "Rollup merge of #80720 - steffahn:prettify_prelude_imports, r=camelid,jyn514\n\nMake documentation of which items the prelude exports more readable.\n\nI recently figured out that rustdoc allows link inside of inline code blocks as long as they\u2019re delimited with `<code> </code>` instead of `` ` ` ``. I think this applies nicely in the listing of prelude exports [in the docs](https://doc.rust-lang.org/std/prelude/index.html). There, currently unformatted `::` and `{ , }` is used in order to mimick import syntax while attatching links to individual identifiers.\n\n## Rendered Comparison\n### Currently (light)\n![Screenshot_20210105_155801](https://user-images.githubusercontent.com/3986214/103661510-1a87be80-4f6f-11eb-8360-1dfb23f732e8.png)\n\n### After this PR (light)\n![Screenshot_20210105_155811](https://user-images.githubusercontent.com/3986214/103661533-1f4c7280-4f6f-11eb-89d4-874793937824.png)\n\n### Currently (dark)\n![Screenshot_20210105_155824](https://user-images.githubusercontent.com/3986214/103661571-2a9f9e00-4f6f-11eb-95f9-e291b5570b41.png)\n\n### After this PR (dark)\n![Screenshot_20210105_155836](https://user-images.githubusercontent.com/3986214/103661592-2ffce880-4f6f-11eb-977a-82afcb07d331.png)\n\n### Currently (ayu)\n![Screenshot_20210105_155917](https://user-images.githubusercontent.com/3986214/103661619-39865080-4f6f-11eb-9ca1-9045a107cddd.png)\n\n### After this PR (ayu)\n![Screenshot_20210105_155923](https://user-images.githubusercontent.com/3986214/103661652-3db26e00-4f6f-11eb-82b7-378e38f0c41f.png)\n\n_Edit:_ I just noticed, the \u201ccurrent\u201d screenshots are from stable, so there are a few more differences in the pictures than the ones from just this PR.", "tree": {"sha": "ddafc24c97b8b349cf5e9b01067b648f0f941abe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ddafc24c97b8b349cf5e9b01067b648f0f941abe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7391124154094b9177e0448026aa0d6dd5c1a48a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgY7DhCRBK7hj4Ov3rIwAAdHIIALAb4joqnzT2ZbBuebf6Ws8y\n0An4NtWBP30qmXocmuKSkSTYexpALxdWkCeyBt2r8CQ1xQwhS1AxnuhssB2NmyB0\nprd4f09nLQ3U19DgfQeSWQk/dINmLyhOKAa8mOFHIbYwC0vwxdOpFGHfWe/3QCAT\nji5yrUhsB7E4SWeJBeW4AhUiDvZLv/HIDrX9qYAe17qCAkLbyo/VuuCdb26muCSv\nfvDVDCAVPJ/MXv9zfD5TS9l6NK5EaPEB4VUrk/FKUyurXotvcZrO0w330MDrfcC0\ni48Ep5chtMKvUdY7iApSC+ABf8C8VK1tkTnGQFljpHzQT45EqE33jHqTaWBJnqk=\n=yne0\n-----END PGP SIGNATURE-----\n", "payload": "tree ddafc24c97b8b349cf5e9b01067b648f0f941abe\nparent 74874a690bc95443292496ff5df5cc5c8cb56e0b\nparent 761296bcb37f4099921c064137353762ae5ddf3f\nauthor Dylan DPC <dylan.dpc@gmail.com> 1617146080 +0200\ncommitter GitHub <noreply@github.com> 1617146080 +0200\n\nRollup merge of #80720 - steffahn:prettify_prelude_imports, r=camelid,jyn514\n\nMake documentation of which items the prelude exports more readable.\n\nI recently figured out that rustdoc allows link inside of inline code blocks as long as they\u2019re delimited with `<code> </code>` instead of `` ` ` ``. I think this applies nicely in the listing of prelude exports [in the docs](https://doc.rust-lang.org/std/prelude/index.html). There, currently unformatted `::` and `{ , }` is used in order to mimick import syntax while attatching links to individual identifiers.\n\n## Rendered Comparison\n### Currently (light)\n![Screenshot_20210105_155801](https://user-images.githubusercontent.com/3986214/103661510-1a87be80-4f6f-11eb-8360-1dfb23f732e8.png)\n\n### After this PR (light)\n![Screenshot_20210105_155811](https://user-images.githubusercontent.com/3986214/103661533-1f4c7280-4f6f-11eb-89d4-874793937824.png)\n\n### Currently (dark)\n![Screenshot_20210105_155824](https://user-images.githubusercontent.com/3986214/103661571-2a9f9e00-4f6f-11eb-95f9-e291b5570b41.png)\n\n### After this PR (dark)\n![Screenshot_20210105_155836](https://user-images.githubusercontent.com/3986214/103661592-2ffce880-4f6f-11eb-977a-82afcb07d331.png)\n\n### Currently (ayu)\n![Screenshot_20210105_155917](https://user-images.githubusercontent.com/3986214/103661619-39865080-4f6f-11eb-9ca1-9045a107cddd.png)\n\n### After this PR (ayu)\n![Screenshot_20210105_155923](https://user-images.githubusercontent.com/3986214/103661652-3db26e00-4f6f-11eb-82b7-378e38f0c41f.png)\n\n_Edit:_ I just noticed, the \u201ccurrent\u201d screenshots are from stable, so there are a few more differences in the pictures than the ones from just this PR.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7391124154094b9177e0448026aa0d6dd5c1a48a", "html_url": "https://github.com/rust-lang/rust/commit/7391124154094b9177e0448026aa0d6dd5c1a48a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7391124154094b9177e0448026aa0d6dd5c1a48a/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74874a690bc95443292496ff5df5cc5c8cb56e0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/74874a690bc95443292496ff5df5cc5c8cb56e0b", "html_url": "https://github.com/rust-lang/rust/commit/74874a690bc95443292496ff5df5cc5c8cb56e0b"}, {"sha": "761296bcb37f4099921c064137353762ae5ddf3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/761296bcb37f4099921c064137353762ae5ddf3f", "html_url": "https://github.com/rust-lang/rust/commit/761296bcb37f4099921c064137353762ae5ddf3f"}], "stats": {"total": 64, "additions": 32, "deletions": 32}, "files": [{"sha": "1b4facdd049bbeab64eff81abe740217091670e5", "filename": "library/std/src/prelude/mod.rs", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/7391124154094b9177e0448026aa0d6dd5c1a48a/library%2Fstd%2Fsrc%2Fprelude%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7391124154094b9177e0448026aa0d6dd5c1a48a/library%2Fstd%2Fsrc%2Fprelude%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprelude%2Fmod.rs?ref=7391124154094b9177e0448026aa0d6dd5c1a48a", "patch": "@@ -28,53 +28,53 @@\n //! The current version of the prelude (version 1) lives in\n //! [`std::prelude::v1`], and re-exports the following:\n //!\n-//! * [`std::marker`]::{[`Copy`], [`Send`], [`Sized`], [`Sync`], [`Unpin`]}:\n+//! * <code>[std::marker]::{[Copy], [Send], [Sized], [Sync], [Unpin]}</code>,\n //!   marker traits that indicate fundamental properties of types.\n-//! * [`std::ops`]::{[`Drop`], [`Fn`], [`FnMut`], [`FnOnce`]}: various\n+//! * <code>[std::ops]::{[Drop], [Fn], [FnMut], [FnOnce]}</code>, various\n //!   operations for both destructors and overloading `()`.\n-//! * [`std::mem`]::[`drop`][`mem::drop`]: a convenience function for explicitly\n+//! * <code>[std::mem]::[drop][mem::drop]</code>, a convenience function for explicitly\n //!   dropping a value.\n-//! * [`std::boxed`]::[`Box`]: a way to allocate values on the heap.\n-//! * [`std::borrow`]::[`ToOwned`]: the conversion trait that defines\n+//! * <code>[std::boxed]::[Box]</code>, a way to allocate values on the heap.\n+//! * <code>[std::borrow]::[ToOwned]</code>, the conversion trait that defines\n //!   [`to_owned`], the generic method for creating an owned type from a\n //!   borrowed type.\n-//! * [`std::clone`]::[`Clone`]: the ubiquitous trait that defines\n-//!   [`clone`][`Clone::clone`], the method for producing a copy of a value.\n-//! * [`std::cmp`]::{[`PartialEq`], [`PartialOrd`], [`Eq`], [`Ord`]}: the\n+//! * <code>[std::clone]::[Clone]</code>, the ubiquitous trait that defines\n+//!   [`clone`][Clone::clone], the method for producing a copy of a value.\n+//! * <code>[std::cmp]::{[PartialEq], [PartialOrd], [Eq], [Ord]}</code>, the\n //!   comparison traits, which implement the comparison operators and are often\n //!   seen in trait bounds.\n-//! * [`std::convert`]::{[`AsRef`], [`AsMut`], [`Into`], [`From`]}: generic\n+//! * <code>[std::convert]::{[AsRef], [AsMut], [Into], [From]}</code>, generic\n //!   conversions, used by savvy API authors to create overloaded methods.\n-//! * [`std::default`]::[`Default`], types that have default values.\n-//! * [`std::iter`]::{[`Iterator`], [`Extend`], [`IntoIterator`],\n-//!   [`DoubleEndedIterator`], [`ExactSizeIterator`]}: iterators of various\n+//! * <code>[std::default]::[Default]</code>, types that have default values.\n+//! * <code>[std::iter]::{[Iterator], [Extend], [IntoIterator], [DoubleEndedIterator], [ExactSizeIterator]}</code>,\n+//!   iterators of various\n //!   kinds.\n-//! * [`std::option`]::[`Option`]::{[`self`][`Option`], [`Some`], [`None`]}, a\n+//! * <code>[std::option]::[Option]::{[self][Option], [Some], [None]}</code>, a\n //!   type which expresses the presence or absence of a value. This type is so\n //!   commonly used, its variants are also exported.\n-//! * [`std::result`]::[`Result`]::{[`self`][`Result`], [`Ok`], [`Err`]}: a type\n+//! * <code>[std::result]::[Result]::{[self][Result], [Ok], [Err]}</code>, a type\n //!   for functions that may succeed or fail. Like [`Option`], its variants are\n //!   exported as well.\n-//! * [`std::string`]::{[`String`], [`ToString`]}: heap-allocated strings.\n-//! * [`std::vec`]::[`Vec`]: a growable, heap-allocated vector.\n+//! * <code>[std::string]::{[String], [ToString]}</code>, heap-allocated strings.\n+//! * <code>[std::vec]::[Vec]</code>, a growable, heap-allocated vector.\n //!\n-//! [`mem::drop`]: crate::mem::drop\n-//! [`std::borrow`]: crate::borrow\n-//! [`std::boxed`]: crate::boxed\n-//! [`std::clone`]: crate::clone\n-//! [`std::cmp`]: crate::cmp\n-//! [`std::convert`]: crate::convert\n-//! [`std::default`]: crate::default\n-//! [`std::iter`]: crate::iter\n-//! [`std::marker`]: crate::marker\n-//! [`std::mem`]: crate::mem\n-//! [`std::ops`]: crate::ops\n-//! [`std::option`]: crate::option\n+//! [mem::drop]: crate::mem::drop\n+//! [std::borrow]: crate::borrow\n+//! [std::boxed]: crate::boxed\n+//! [std::clone]: crate::clone\n+//! [std::cmp]: crate::cmp\n+//! [std::convert]: crate::convert\n+//! [std::default]: crate::default\n+//! [std::iter]: crate::iter\n+//! [std::marker]: crate::marker\n+//! [std::mem]: crate::mem\n+//! [std::ops]: crate::ops\n+//! [std::option]: crate::option\n //! [`std::prelude::v1`]: v1\n-//! [`std::result`]: crate::result\n-//! [`std::slice`]: crate::slice\n-//! [`std::string`]: crate::string\n-//! [`std::vec`]: mod@crate::vec\n+//! [std::result]: crate::result\n+//! [std::slice]: crate::slice\n+//! [std::string]: crate::string\n+//! [std::vec]: mod@crate::vec\n //! [`to_owned`]: crate::borrow::ToOwned::to_owned\n //! [book-closures]: ../../book/ch13-01-closures.html\n //! [book-dtor]: ../../book/ch15-03-drop.html"}]}