{"sha": "57a7c85f93d78b507c3779944b2978c617f91c5d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3YTdjODVmOTNkNzhiNTA3YzM3Nzk5NDRiMjk3OGM2MTdmOTFjNWQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-14T16:25:06Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-14T16:25:06Z"}, "message": "miri: backtraces with instances", "tree": {"sha": "36361bdfdbb0a05b5f6400edd833adaf52e779e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36361bdfdbb0a05b5f6400edd833adaf52e779e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57a7c85f93d78b507c3779944b2978c617f91c5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57a7c85f93d78b507c3779944b2978c617f91c5d", "html_url": "https://github.com/rust-lang/rust/commit/57a7c85f93d78b507c3779944b2978c617f91c5d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57a7c85f93d78b507c3779944b2978c617f91c5d/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "126a0e2aadcd2c4cbe0b67f9c192047d6f6ec9e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/126a0e2aadcd2c4cbe0b67f9c192047d6f6ec9e6", "html_url": "https://github.com/rust-lang/rust/commit/126a0e2aadcd2c4cbe0b67f9c192047d6f6ec9e6"}], "stats": {"total": 52, "additions": 31, "deletions": 21}, "files": [{"sha": "d8b207fa25aaf8d3445af5f23ef5e1e22add9281", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57a7c85f93d78b507c3779944b2978c617f91c5d/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57a7c85f93d78b507c3779944b2978c617f91c5d/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=57a7c85f93d78b507c3779944b2978c617f91c5d", "patch": "@@ -387,10 +387,10 @@ impl_stable_hash_for!(enum mir::interpret::ErrorHandled {\n     TooGeneric\n });\n \n-impl_stable_hash_for!(struct mir::interpret::FrameInfo {\n+impl_stable_hash_for!(struct mir::interpret::FrameInfo<'tcx> {\n     span,\n     lint_root,\n-    location\n+    instance\n });\n \n impl_stable_hash_for!(struct ty::ClosureSubsts<'tcx> { substs });"}, {"sha": "c30d41f340340335a3fa24284aa9a3f5b8027dea", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 26, "deletions": 7, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/57a7c85f93d78b507c3779944b2978c617f91c5d/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57a7c85f93d78b507c3779944b2978c617f91c5d/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=57a7c85f93d78b507c3779944b2978c617f91c5d", "patch": "@@ -10,16 +10,16 @@\n \n use std::{fmt, env};\n \n+use hir::map::definitions::DefPathData;\n use mir;\n-use ty::{Ty, layout};\n+use ty::{self, Ty, layout};\n use ty::layout::{Size, Align, LayoutError};\n use rustc_target::spec::abi::Abi;\n \n use super::{Pointer, Scalar};\n \n use backtrace::Backtrace;\n \n-use ty;\n use ty::query::TyCtxtAt;\n use errors::DiagnosticBuilder;\n \n@@ -52,16 +52,30 @@ pub type ConstEvalResult<'tcx> = Result<&'tcx ty::Const<'tcx>, ErrorHandled>;\n pub struct ConstEvalErr<'tcx> {\n     pub span: Span,\n     pub error: ::mir::interpret::EvalErrorKind<'tcx, u64>,\n-    pub stacktrace: Vec<FrameInfo>,\n+    pub stacktrace: Vec<FrameInfo<'tcx>>,\n }\n \n #[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n-pub struct FrameInfo {\n+pub struct FrameInfo<'tcx> {\n     pub span: Span,\n-    pub location: String,\n+    pub instance: ty::Instance<'tcx>,\n     pub lint_root: Option<ast::NodeId>,\n }\n \n+impl<'tcx> fmt::Display for FrameInfo<'tcx> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        ty::tls::with(|tcx| {\n+            if tcx.def_key(self.instance.def_id()).disambiguated_data.data\n+                == DefPathData::ClosureExpr\n+            {\n+                write!(f, \"inside call to closure\")\n+            } else {\n+                write!(f, \"inside call to `{}`\", self.instance)\n+            }\n+        })\n+    }\n+}\n+\n impl<'a, 'gcx, 'tcx> ConstEvalErr<'tcx> {\n     pub fn struct_error(&self,\n         tcx: TyCtxtAt<'a, 'gcx, 'tcx>,\n@@ -135,8 +149,13 @@ impl<'a, 'gcx, 'tcx> ConstEvalErr<'tcx> {\n             struct_error(tcx, message)\n         };\n         err.span_label(self.span, self.error.to_string());\n-        for FrameInfo { span, location, .. } in &self.stacktrace {\n-            err.span_label(*span, format!(\"inside call to `{}`\", location));\n+        // Skip the last, which is just the environment of the constant.  The stacktrace\n+        // is sometimes empty because we create \"fake\" eval contexts in CTFE to do work\n+        // on constant values.\n+        if self.stacktrace.len() > 0 {\n+            for frame_info in &self.stacktrace[..self.stacktrace.len()-1] {\n+                err.span_label(frame_info.span, frame_info.to_string());\n+            }\n         }\n         Ok(err)\n     }"}, {"sha": "279955fba17ad41e3a226e1077c5aa564bc03dcd", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/57a7c85f93d78b507c3779944b2978c617f91c5d/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57a7c85f93d78b507c3779944b2978c617f91c5d/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=57a7c85f93d78b507c3779944b2978c617f91c5d", "patch": "@@ -14,7 +14,6 @@ use std::mem;\n use syntax::source_map::{self, Span, DUMMY_SP};\n use rustc::hir::def_id::DefId;\n use rustc::hir::def::Def;\n-use rustc::hir::map::definitions::DefPathData;\n use rustc::mir;\n use rustc::ty::layout::{\n     self, Size, Align, HasDataLayout, LayoutOf, TyLayout\n@@ -654,11 +653,10 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n         }\n     }\n \n-    pub fn generate_stacktrace(&self, explicit_span: Option<Span>) -> Vec<FrameInfo> {\n+    pub fn generate_stacktrace(&self, explicit_span: Option<Span>) -> Vec<FrameInfo<'tcx>> {\n         let mut last_span = None;\n         let mut frames = Vec::new();\n-        // skip 1 because the last frame is just the environment of the constant\n-        for &Frame { instance, span, mir, block, stmt, .. } in self.stack().iter().skip(1).rev() {\n+        for &Frame { instance, span, mir, block, stmt, .. } in self.stack().iter().rev() {\n             // make sure we don't emit frames that are duplicates of the previous\n             if explicit_span == Some(span) {\n                 last_span = Some(span);\n@@ -671,13 +669,6 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n             } else {\n                 last_span = Some(span);\n             }\n-            let location = if self.tcx.def_key(instance.def_id()).disambiguated_data.data\n-                == DefPathData::ClosureExpr\n-            {\n-                \"closure\".to_owned()\n-            } else {\n-                instance.to_string()\n-            };\n             let block = &mir.basic_blocks()[block];\n             let source_info = if stmt < block.statements.len() {\n                 block.statements[stmt].source_info\n@@ -688,7 +679,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n                 mir::ClearCrossCrate::Set(ref ivs) => Some(ivs[source_info.scope].lint_root),\n                 mir::ClearCrossCrate::Clear => None,\n             };\n-            frames.push(FrameInfo { span, location, lint_root });\n+            frames.push(FrameInfo { span, instance, lint_root });\n         }\n         trace!(\"generate stacktrace: {:#?}, {:?}\", frames, explicit_span);\n         frames"}]}