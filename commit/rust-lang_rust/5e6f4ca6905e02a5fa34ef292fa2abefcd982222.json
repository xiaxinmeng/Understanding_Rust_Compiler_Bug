{"sha": "5e6f4ca6905e02a5fa34ef292fa2abefcd982222", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlNmY0Y2E2OTA1ZTAyYTVmYTM0ZWYyOTJmYTJhYmVmY2Q5ODIyMjI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-02-25T09:55:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-25T09:55:56Z"}, "message": "Merge #3299\n\n3299: vscode: migrate to request type api r=matklad a=Veetaha\n\nMore type-safety to the god of type-safety.\n\nCo-authored-by: Veetaha <gerzoh1@gmail.com>", "tree": {"sha": "413691f3aab076538aac3c49bef015fb945d5320", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/413691f3aab076538aac3c49bef015fb945d5320"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e6f4ca6905e02a5fa34ef292fa2abefcd982222", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeVO8sCRBK7hj4Ov3rIwAAdHIIACG990VjRwhhXaPpqWXALmHd\nkGHLDZMwFzyMgGankRuZKw87QZvY9tBG4fSiAglH7CV0GZ2botuD5mMfGm69vtbJ\n7780vOvMsjXWTdAG0qFSR5BwN/aw85K2RuJzrCHf7XXz3nYP4YuaGnmmaoirDhlX\nkcYU8y/tmxRYtAJm1HkNjUDSKFkMibwz7FTL8SSWhiklLpOcUzsDEolhS5rKNcmp\nd5X4h400+G21x5GYW2d2y+vcFquPIMaNU9b1Hmx6neExf6tU4jA6EXkxnqu4xdoc\ncpjHLCzIUaFqtDLf7s8gSGyssru36DCYyXB1UfEHfNnGne4OJHKloq31kLjDveM=\n=/DKo\n-----END PGP SIGNATURE-----\n", "payload": "tree 413691f3aab076538aac3c49bef015fb945d5320\nparent 558d263a0c602ef12914cbb10c263a9e2bb96bf2\nparent 18b97d9d367d5fc1533c48157ebca7bb18b62e3c\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1582624556 +0000\ncommitter GitHub <noreply@github.com> 1582624556 +0000\n\nMerge #3299\n\n3299: vscode: migrate to request type api r=matklad a=Veetaha\n\nMore type-safety to the god of type-safety.\n\nCo-authored-by: Veetaha <gerzoh1@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e6f4ca6905e02a5fa34ef292fa2abefcd982222", "html_url": "https://github.com/rust-lang/rust/commit/5e6f4ca6905e02a5fa34ef292fa2abefcd982222", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e6f4ca6905e02a5fa34ef292fa2abefcd982222/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "558d263a0c602ef12914cbb10c263a9e2bb96bf2", "url": "https://api.github.com/repos/rust-lang/rust/commits/558d263a0c602ef12914cbb10c263a9e2bb96bf2", "html_url": "https://github.com/rust-lang/rust/commit/558d263a0c602ef12914cbb10c263a9e2bb96bf2"}, {"sha": "18b97d9d367d5fc1533c48157ebca7bb18b62e3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/18b97d9d367d5fc1533c48157ebca7bb18b62e3c", "html_url": "https://github.com/rust-lang/rust/commit/18b97d9d367d5fc1533c48157ebca7bb18b62e3c"}], "stats": {"total": 401, "additions": 203, "deletions": 198}, "files": [{"sha": "1c6ea399b1c73e65e21e499a33c6555a7fdea0db", "filename": "editors/code/src/commands/analyzer_status.ts", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5e6f4ca6905e02a5fa34ef292fa2abefcd982222/editors%2Fcode%2Fsrc%2Fcommands%2Fanalyzer_status.ts", "raw_url": "https://github.com/rust-lang/rust/raw/5e6f4ca6905e02a5fa34ef292fa2abefcd982222/editors%2Fcode%2Fsrc%2Fcommands%2Fanalyzer_status.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fanalyzer_status.ts?ref=5e6f4ca6905e02a5fa34ef292fa2abefcd982222", "patch": "@@ -1,5 +1,6 @@\n import * as vscode from 'vscode';\n \n+import * as ra from '../rust-analyzer-api';\n import { Ctx, Cmd } from '../ctx';\n \n // Shows status of rust-analyzer (for debugging)\n@@ -50,10 +51,7 @@ class TextDocumentContentProvider\n         const client = this.ctx.client;\n         if (!editor || !client) return '';\n \n-        return client.sendRequest<string>(\n-            'rust-analyzer/analyzerStatus',\n-            null,\n-        );\n+        return client.sendRequest(ra.analyzerStatus, null);\n     }\n \n     get onDidChange(): vscode.Event<vscode.Uri> {"}, {"sha": "23f2ef1d5e362c832092e532080c411b577134b8", "filename": "editors/code/src/commands/expand_macro.ts", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5e6f4ca6905e02a5fa34ef292fa2abefcd982222/editors%2Fcode%2Fsrc%2Fcommands%2Fexpand_macro.ts", "raw_url": "https://github.com/rust-lang/rust/raw/5e6f4ca6905e02a5fa34ef292fa2abefcd982222/editors%2Fcode%2Fsrc%2Fcommands%2Fexpand_macro.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fexpand_macro.ts?ref=5e6f4ca6905e02a5fa34ef292fa2abefcd982222", "patch": "@@ -1,5 +1,5 @@\n import * as vscode from 'vscode';\n-import * as lc from 'vscode-languageclient';\n+import * as ra from '../rust-analyzer-api';\n \n import { Ctx, Cmd } from '../ctx';\n \n@@ -26,12 +26,7 @@ export function expandMacro(ctx: Ctx): Cmd {\n     };\n }\n \n-interface ExpandedMacro {\n-    name: string;\n-    expansion: string;\n-}\n-\n-function codeFormat(expanded: ExpandedMacro): string {\n+function codeFormat(expanded: ra.ExpandedMacro): string {\n     let result = `// Recursive expansion of ${expanded.name}! macro\\n`;\n     result += '// ' + '='.repeat(result.length - 3);\n     result += '\\n\\n';\n@@ -54,14 +49,11 @@ class TextDocumentContentProvider\n         if (!editor || !client) return '';\n \n         const position = editor.selection.active;\n-        const request: lc.TextDocumentPositionParams = {\n+\n+        const expanded = await client.sendRequest(ra.expandMacro, {\n             textDocument: { uri: editor.document.uri.toString() },\n             position,\n-        };\n-        const expanded = await client.sendRequest<ExpandedMacro>(\n-            'rust-analyzer/expandMacro',\n-            request,\n-        );\n+        });\n \n         if (expanded == null) return 'Not available';\n "}, {"sha": "bdb7fc3b03b890daa3e3ff5525fd9957f5d6589c", "filename": "editors/code/src/commands/index.ts", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5e6f4ca6905e02a5fa34ef292fa2abefcd982222/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts", "raw_url": "https://github.com/rust-lang/rust/raw/5e6f4ca6905e02a5fa34ef292fa2abefcd982222/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts?ref=5e6f4ca6905e02a5fa34ef292fa2abefcd982222", "patch": "@@ -1,5 +1,6 @@\n import * as vscode from 'vscode';\n import * as lc from 'vscode-languageclient';\n+import * as ra from '../rust-analyzer-api';\n \n import { Ctx, Cmd } from '../ctx';\n import * as sourceChange from '../source_change';\n@@ -16,9 +17,7 @@ export * from './ssr';\n export * from './server_version';\n \n export function collectGarbage(ctx: Ctx): Cmd {\n-    return async () => {\n-        await ctx.client?.sendRequest<null>('rust-analyzer/collectGarbage', null);\n-    };\n+    return async () => ctx.client.sendRequest(ra.collectGarbage, null);\n }\n \n export function showReferences(ctx: Ctx): Cmd {\n@@ -36,13 +35,13 @@ export function showReferences(ctx: Ctx): Cmd {\n }\n \n export function applySourceChange(ctx: Ctx): Cmd {\n-    return async (change: sourceChange.SourceChange) => {\n+    return async (change: ra.SourceChange) => {\n         await sourceChange.applySourceChange(ctx, change);\n     };\n }\n \n export function selectAndApplySourceChange(ctx: Ctx): Cmd {\n-    return async (changes: sourceChange.SourceChange[]) => {\n+    return async (changes: ra.SourceChange[]) => {\n         if (changes.length === 1) {\n             await sourceChange.applySourceChange(ctx, changes[0]);\n         } else if (changes.length > 0) {"}, {"sha": "de0614653d6b13d00b3bcf80db24f51153a5706a", "filename": "editors/code/src/commands/join_lines.ts", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5e6f4ca6905e02a5fa34ef292fa2abefcd982222/editors%2Fcode%2Fsrc%2Fcommands%2Fjoin_lines.ts", "raw_url": "https://github.com/rust-lang/rust/raw/5e6f4ca6905e02a5fa34ef292fa2abefcd982222/editors%2Fcode%2Fsrc%2Fcommands%2Fjoin_lines.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fjoin_lines.ts?ref=5e6f4ca6905e02a5fa34ef292fa2abefcd982222", "patch": "@@ -1,27 +1,18 @@\n-import * as lc from 'vscode-languageclient';\n+import * as ra from '../rust-analyzer-api';\n \n import { Ctx, Cmd } from '../ctx';\n-import { applySourceChange, SourceChange } from '../source_change';\n+import { applySourceChange } from '../source_change';\n \n export function joinLines(ctx: Ctx): Cmd {\n     return async () => {\n         const editor = ctx.activeRustEditor;\n         const client = ctx.client;\n         if (!editor || !client) return;\n \n-        const request: JoinLinesParams = {\n+        const change = await client.sendRequest(ra.joinLines, {\n             range: client.code2ProtocolConverter.asRange(editor.selection),\n             textDocument: { uri: editor.document.uri.toString() },\n-        };\n-        const change = await client.sendRequest<SourceChange>(\n-            'rust-analyzer/joinLines',\n-            request,\n-        );\n+        });\n         await applySourceChange(ctx, change);\n     };\n }\n-\n-interface JoinLinesParams {\n-    textDocument: lc.TextDocumentIdentifier;\n-    range: lc.Range;\n-}"}, {"sha": "a60776e2d4d15cf6452abad56d391b0d0ee65a8d", "filename": "editors/code/src/commands/matching_brace.ts", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5e6f4ca6905e02a5fa34ef292fa2abefcd982222/editors%2Fcode%2Fsrc%2Fcommands%2Fmatching_brace.ts", "raw_url": "https://github.com/rust-lang/rust/raw/5e6f4ca6905e02a5fa34ef292fa2abefcd982222/editors%2Fcode%2Fsrc%2Fcommands%2Fmatching_brace.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fmatching_brace.ts?ref=5e6f4ca6905e02a5fa34ef292fa2abefcd982222", "patch": "@@ -1,5 +1,5 @@\n import * as vscode from 'vscode';\n-import * as lc from 'vscode-languageclient';\n+import * as ra from '../rust-analyzer-api';\n \n import { Ctx, Cmd } from '../ctx';\n \n@@ -9,16 +9,12 @@ export function matchingBrace(ctx: Ctx): Cmd {\n         const client = ctx.client;\n         if (!editor || !client) return;\n \n-        const request: FindMatchingBraceParams = {\n+        const response = await client.sendRequest(ra.findMatchingBrace, {\n             textDocument: { uri: editor.document.uri.toString() },\n             offsets: editor.selections.map(s =>\n                 client.code2ProtocolConverter.asPosition(s.active),\n             ),\n-        };\n-        const response = await client.sendRequest<lc.Position[]>(\n-            'rust-analyzer/findMatchingBrace',\n-            request,\n-        );\n+        });\n         editor.selections = editor.selections.map((sel, idx) => {\n             const active = client.protocol2CodeConverter.asPosition(\n                 response[idx],\n@@ -29,8 +25,3 @@ export function matchingBrace(ctx: Ctx): Cmd {\n         editor.revealRange(editor.selection);\n     };\n }\n-\n-interface FindMatchingBraceParams {\n-    textDocument: lc.TextDocumentIdentifier;\n-    offsets: lc.Position[];\n-}"}, {"sha": "285849db70749dce4516b52b39c4b192725c4661", "filename": "editors/code/src/commands/on_enter.ts", "status": "modified", "additions": 7, "deletions": 14, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5e6f4ca6905e02a5fa34ef292fa2abefcd982222/editors%2Fcode%2Fsrc%2Fcommands%2Fon_enter.ts", "raw_url": "https://github.com/rust-lang/rust/raw/5e6f4ca6905e02a5fa34ef292fa2abefcd982222/editors%2Fcode%2Fsrc%2Fcommands%2Fon_enter.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fon_enter.ts?ref=5e6f4ca6905e02a5fa34ef292fa2abefcd982222", "patch": "@@ -1,7 +1,7 @@\n import * as vscode from 'vscode';\n-import * as lc from 'vscode-languageclient';\n+import * as ra from '../rust-analyzer-api';\n \n-import { applySourceChange, SourceChange } from '../source_change';\n+import { applySourceChange } from '../source_change';\n import { Cmd, Ctx } from '../ctx';\n \n async function handleKeypress(ctx: Ctx) {\n@@ -10,22 +10,15 @@ async function handleKeypress(ctx: Ctx) {\n \n     if (!editor || !client) return false;\n \n-    const request: lc.TextDocumentPositionParams = {\n+    const change = await client.sendRequest(ra.onEnter, {\n         textDocument: { uri: editor.document.uri.toString() },\n         position: client.code2ProtocolConverter.asPosition(\n             editor.selection.active,\n         ),\n-    };\n-    const change = await client.sendRequest<undefined | SourceChange>(\n-        'rust-analyzer/onEnter',\n-        request,\n-    ).catch(\n-        (_error: any) => {\n-            // FIXME: switch to the more modern (?) typed request infrastructure\n-            // client.logFailedRequest(OnEnterRequest.type, error);\n-            return Promise.resolve(null);\n-        }\n-    );\n+    }).catch(_error => {\n+        // client.logFailedRequest(OnEnterRequest.type, error);\n+        return null;\n+    });\n     if (!change) return false;\n \n     await applySourceChange(ctx, change);"}, {"sha": "8f78ddd71c63ad19ed28342fde235a229d540543", "filename": "editors/code/src/commands/parent_module.ts", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5e6f4ca6905e02a5fa34ef292fa2abefcd982222/editors%2Fcode%2Fsrc%2Fcommands%2Fparent_module.ts", "raw_url": "https://github.com/rust-lang/rust/raw/5e6f4ca6905e02a5fa34ef292fa2abefcd982222/editors%2Fcode%2Fsrc%2Fcommands%2Fparent_module.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fparent_module.ts?ref=5e6f4ca6905e02a5fa34ef292fa2abefcd982222", "patch": "@@ -1,5 +1,5 @@\n import * as vscode from 'vscode';\n-import * as lc from 'vscode-languageclient';\n+import * as ra from '../rust-analyzer-api';\n \n import { Ctx, Cmd } from '../ctx';\n \n@@ -9,16 +9,12 @@ export function parentModule(ctx: Ctx): Cmd {\n         const client = ctx.client;\n         if (!editor || !client) return;\n \n-        const request: lc.TextDocumentPositionParams = {\n+        const response = await client.sendRequest(ra.parentModule, {\n             textDocument: { uri: editor.document.uri.toString() },\n             position: client.code2ProtocolConverter.asPosition(\n                 editor.selection.active,\n             ),\n-        };\n-        const response = await client.sendRequest<lc.Location[]>(\n-            'rust-analyzer/parentModule',\n-            request,\n-        );\n+        });\n         const loc = response[0];\n         if (loc == null) return;\n "}, {"sha": "06b5134668649e12d565eba945efac5fe2c44cc5", "filename": "editors/code/src/commands/runnables.ts", "status": "modified", "additions": 7, "deletions": 22, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5e6f4ca6905e02a5fa34ef292fa2abefcd982222/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts", "raw_url": "https://github.com/rust-lang/rust/raw/5e6f4ca6905e02a5fa34ef292fa2abefcd982222/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts?ref=5e6f4ca6905e02a5fa34ef292fa2abefcd982222", "patch": "@@ -1,5 +1,6 @@\n import * as vscode from 'vscode';\n import * as lc from 'vscode-languageclient';\n+import * as ra from '../rust-analyzer-api';\n \n import { Ctx, Cmd } from '../ctx';\n \n@@ -14,16 +15,13 @@ export function run(ctx: Ctx): Cmd {\n         const textDocument: lc.TextDocumentIdentifier = {\n             uri: editor.document.uri.toString(),\n         };\n-        const params: RunnablesParams = {\n+\n+        const runnables = await client.sendRequest(ra.runnables, {\n             textDocument,\n             position: client.code2ProtocolConverter.asPosition(\n                 editor.selection.active,\n             ),\n-        };\n-        const runnables = await client.sendRequest<Runnable[]>(\n-            'rust-analyzer/runnables',\n-            params,\n-        );\n+        });\n         const items: RunnableQuickPick[] = [];\n         if (prevRunnable) {\n             items.push(prevRunnable);\n@@ -48,7 +46,7 @@ export function run(ctx: Ctx): Cmd {\n }\n \n export function runSingle(ctx: Ctx): Cmd {\n-    return async (runnable: Runnable) => {\n+    return async (runnable: ra.Runnable) => {\n         const editor = ctx.activeRustEditor;\n         if (!editor) return;\n \n@@ -64,26 +62,13 @@ export function runSingle(ctx: Ctx): Cmd {\n     };\n }\n \n-interface RunnablesParams {\n-    textDocument: lc.TextDocumentIdentifier;\n-    position?: lc.Position;\n-}\n-\n-interface Runnable {\n-    label: string;\n-    bin: string;\n-    args: string[];\n-    env: { [index: string]: string };\n-    cwd?: string;\n-}\n-\n class RunnableQuickPick implements vscode.QuickPickItem {\n     public label: string;\n     public description?: string | undefined;\n     public detail?: string | undefined;\n     public picked?: boolean | undefined;\n \n-    constructor(public runnable: Runnable) {\n+    constructor(public runnable: ra.Runnable) {\n         this.label = runnable.label;\n     }\n }\n@@ -96,7 +81,7 @@ interface CargoTaskDefinition extends vscode.TaskDefinition {\n     env?: { [key: string]: string };\n }\n \n-function createTask(spec: Runnable): vscode.Task {\n+function createTask(spec: ra.Runnable): vscode.Task {\n     const TASK_SOURCE = 'Rust';\n     const definition: CargoTaskDefinition = {\n         type: 'cargo',"}, {"sha": "eee48c69352148d9da5ec2bdf4adbf44103b4406", "filename": "editors/code/src/commands/ssr.ts", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5e6f4ca6905e02a5fa34ef292fa2abefcd982222/editors%2Fcode%2Fsrc%2Fcommands%2Fssr.ts", "raw_url": "https://github.com/rust-lang/rust/raw/5e6f4ca6905e02a5fa34ef292fa2abefcd982222/editors%2Fcode%2Fsrc%2Fcommands%2Fssr.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fssr.ts?ref=5e6f4ca6905e02a5fa34ef292fa2abefcd982222", "patch": "@@ -1,6 +1,8 @@\n-import { Ctx, Cmd } from '../ctx';\n-import { applySourceChange, SourceChange } from '../source_change';\n import * as vscode from 'vscode';\n+import * as ra from \"../rust-analyzer-api\";\n+\n+import { Ctx, Cmd } from '../ctx';\n+import { applySourceChange } from '../source_change';\n \n export function ssr(ctx: Ctx): Cmd {\n     return async () => {\n@@ -21,16 +23,8 @@ export function ssr(ctx: Ctx): Cmd {\n \n         if (!request) return;\n \n-        const ssrRequest: SsrRequest = { arg: request };\n-        const change = await client.sendRequest<SourceChange>(\n-            'rust-analyzer/ssr',\n-            ssrRequest,\n-        );\n+        const change = await client.sendRequest(ra.ssr, { arg: request });\n \n         await applySourceChange(ctx, change);\n     };\n }\n-\n-interface SsrRequest {\n-    arg: string;\n-}"}, {"sha": "7218bfb90082f5e7ae118a7e76b3ed9bb6dfb8e1", "filename": "editors/code/src/commands/syntax_tree.ts", "status": "modified", "additions": 7, "deletions": 20, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5e6f4ca6905e02a5fa34ef292fa2abefcd982222/editors%2Fcode%2Fsrc%2Fcommands%2Fsyntax_tree.ts", "raw_url": "https://github.com/rust-lang/rust/raw/5e6f4ca6905e02a5fa34ef292fa2abefcd982222/editors%2Fcode%2Fsrc%2Fcommands%2Fsyntax_tree.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fsyntax_tree.ts?ref=5e6f4ca6905e02a5fa34ef292fa2abefcd982222", "patch": "@@ -1,5 +1,5 @@\n import * as vscode from 'vscode';\n-import * as lc from 'vscode-languageclient';\n+import * as ra from '../rust-analyzer-api';\n \n import { Ctx, Cmd } from '../ctx';\n \n@@ -61,13 +61,8 @@ function afterLs(f: () => void) {\n     setTimeout(f, 10);\n }\n \n-interface SyntaxTreeParams {\n-    textDocument: lc.TextDocumentIdentifier;\n-    range?: lc.Range;\n-}\n \n-class TextDocumentContentProvider\n-    implements vscode.TextDocumentContentProvider {\n+class TextDocumentContentProvider implements vscode.TextDocumentContentProvider {\n     uri = vscode.Uri.parse('rust-analyzer://syntaxtree');\n     eventEmitter = new vscode.EventEmitter<vscode.Uri>();\n \n@@ -79,23 +74,15 @@ class TextDocumentContentProvider\n         const client = this.ctx.client;\n         if (!editor || !client) return '';\n \n-        let range: lc.Range | undefined;\n-\n         // When the range based query is enabled we take the range of the selection\n-        if (uri.query === 'range=true') {\n-            range = editor.selection.isEmpty\n-                ? undefined\n-                : client.code2ProtocolConverter.asRange(editor.selection);\n-        }\n+        const range = uri.query === 'range=true' && !editor.selection.isEmpty\n+            ? client.code2ProtocolConverter.asRange(editor.selection)\n+            : null;\n \n-        const request: SyntaxTreeParams = {\n+        return client.sendRequest(ra.syntaxTree, {\n             textDocument: { uri: editor.document.uri.toString() },\n             range,\n-        };\n-        return client.sendRequest<string>(\n-            'rust-analyzer/syntaxTree',\n-            request,\n-        );\n+        });\n     }\n \n     get onDidChange(): vscode.Event<vscode.Uri> {"}, {"sha": "3e0cbdc561699672245ad53a282ad53c0a426cac", "filename": "editors/code/src/highlighting.ts", "status": "modified", "additions": 21, "deletions": 39, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/5e6f4ca6905e02a5fa34ef292fa2abefcd982222/editors%2Fcode%2Fsrc%2Fhighlighting.ts", "raw_url": "https://github.com/rust-lang/rust/raw/5e6f4ca6905e02a5fa34ef292fa2abefcd982222/editors%2Fcode%2Fsrc%2Fhighlighting.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fhighlighting.ts?ref=5e6f4ca6905e02a5fa34ef292fa2abefcd982222", "patch": "@@ -1,5 +1,5 @@\n import * as vscode from 'vscode';\n-import * as lc from 'vscode-languageclient';\n+import * as ra from './rust-analyzer-api';\n \n import { ColorTheme, TextMateRuleSettings } from './color_theme';\n \n@@ -8,29 +8,25 @@ import { sendRequestWithRetry } from './util';\n \n export function activateHighlighting(ctx: Ctx) {\n     const highlighter = new Highlighter(ctx);\n-    const client = ctx.client;\n-    if (client != null) {\n-        client.onNotification(\n-            'rust-analyzer/publishDecorations',\n-            (params: PublishDecorationsParams) => {\n-                if (!ctx.config.highlightingOn) return;\n-\n-                const targetEditor = vscode.window.visibleTextEditors.find(\n-                    editor => {\n-                        const unescapedUri = unescape(\n-                            editor.document.uri.toString(),\n-                        );\n-                        // Unescaped URI looks like:\n-                        // file:///c:/Workspace/ra-test/src/main.rs\n-                        return unescapedUri === params.uri;\n-                    },\n-                );\n-                if (!targetEditor) return;\n \n-                highlighter.setHighlights(targetEditor, params.decorations);\n+    ctx.client.onNotification(ra.publishDecorations, params => {\n+        if (!ctx.config.highlightingOn) return;\n+\n+        const targetEditor = vscode.window.visibleTextEditors.find(\n+            editor => {\n+                const unescapedUri = unescape(\n+                    editor.document.uri.toString(),\n+                );\n+                // Unescaped URI looks like:\n+                // file:///c:/Workspace/ra-test/src/main.rs\n+                return unescapedUri === params.uri;\n             },\n         );\n-    }\n+        if (!targetEditor) return;\n+\n+        highlighter.setHighlights(targetEditor, params.decorations);\n+    });\n+\n \n     vscode.workspace.onDidChangeConfiguration(\n         _ => highlighter.removeHighlights(),\n@@ -45,13 +41,10 @@ export function activateHighlighting(ctx: Ctx) {\n             const client = ctx.client;\n             if (!client) return;\n \n-            const params: lc.TextDocumentIdentifier = {\n-                uri: editor.document.uri.toString(),\n-            };\n-            const decorations = await sendRequestWithRetry<Decoration[]>(\n+            const decorations = await sendRequestWithRetry(\n                 client,\n-                'rust-analyzer/decorationsRequest',\n-                params,\n+                ra.decorationsRequest,\n+                { uri: editor.document.uri.toString() },\n             );\n             highlighter.setHighlights(editor, decorations);\n         },\n@@ -60,17 +53,6 @@ export function activateHighlighting(ctx: Ctx) {\n     );\n }\n \n-interface PublishDecorationsParams {\n-    uri: string;\n-    decorations: Decoration[];\n-}\n-\n-interface Decoration {\n-    range: lc.Range;\n-    tag: string;\n-    bindingHash?: string;\n-}\n-\n // Based on this HSL-based color generator: https://gist.github.com/bendc/76c48ce53299e6078a76\n function fancify(seed: string, shade: 'light' | 'dark') {\n     const random = randomU32Numbers(hashString(seed));\n@@ -108,7 +90,7 @@ class Highlighter {\n         this.decorations = null;\n     }\n \n-    public setHighlights(editor: vscode.TextEditor, highlights: Decoration[]) {\n+    public setHighlights(editor: vscode.TextEditor, highlights: ra.Decoration[]) {\n         const client = this.ctx.client;\n         if (!client) return;\n         // Initialize decorations if necessary"}, {"sha": "5951cf1b457dc5c157b4542d0c064f633b7b28f8", "filename": "editors/code/src/inlay_hints.ts", "status": "modified", "additions": 8, "deletions": 23, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/5e6f4ca6905e02a5fa34ef292fa2abefcd982222/editors%2Fcode%2Fsrc%2Finlay_hints.ts", "raw_url": "https://github.com/rust-lang/rust/raw/5e6f4ca6905e02a5fa34ef292fa2abefcd982222/editors%2Fcode%2Fsrc%2Finlay_hints.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Finlay_hints.ts?ref=5e6f4ca6905e02a5fa34ef292fa2abefcd982222", "patch": "@@ -1,5 +1,5 @@\n import * as vscode from 'vscode';\n-import * as lc from 'vscode-languageclient';\n+import * as ra from './rust-analyzer-api';\n \n import { Ctx } from './ctx';\n import { log, sendRequestWithRetry } from './util';\n@@ -39,16 +39,6 @@ export function activateInlayHints(ctx: Ctx) {\n     void hintsUpdater.setEnabled(ctx.config.displayInlayHints);\n }\n \n-interface InlayHintsParams {\n-    textDocument: lc.TextDocumentIdentifier;\n-}\n-\n-interface InlayHint {\n-    range: vscode.Range;\n-    kind: \"TypeHint\" | \"ParameterHint\";\n-    label: string;\n-}\n-\n const typeHintDecorationType = vscode.window.createTextEditorDecorationType({\n     after: {\n         color: new vscode.ThemeColor('rust_analyzer.inlayHint'),\n@@ -107,9 +97,9 @@ class HintsUpdater {\n         if (newHints == null) return;\n \n         const newTypeDecorations = newHints\n-            .filter(hint => hint.kind === 'TypeHint')\n+            .filter(hint => hint.kind === ra.InlayKind.TypeHint)\n             .map(hint => ({\n-                range: hint.range,\n+                range: this.ctx.client.protocol2CodeConverter.asRange(hint.range),\n                 renderOptions: {\n                     after: {\n                         contentText: `: ${hint.label}`,\n@@ -119,9 +109,9 @@ class HintsUpdater {\n         this.setTypeDecorations(editor, newTypeDecorations);\n \n         const newParameterDecorations = newHints\n-            .filter(hint => hint.kind === 'ParameterHint')\n+            .filter(hint => hint.kind === ra.InlayKind.ParameterHint)\n             .map(hint => ({\n-                range: hint.range,\n+                range: this.ctx.client.protocol2CodeConverter.asRange(hint.range),\n                 renderOptions: {\n                     before: {\n                         contentText: `${hint.label}: `,\n@@ -151,20 +141,15 @@ class HintsUpdater {\n         );\n     }\n \n-    private async queryHints(documentUri: string): Promise<InlayHint[] | null> {\n+    private async queryHints(documentUri: string): Promise<ra.InlayHint[] | null> {\n         this.pending.get(documentUri)?.cancel();\n \n         const tokenSource = new vscode.CancellationTokenSource();\n         this.pending.set(documentUri, tokenSource);\n \n-        const request: InlayHintsParams = { textDocument: { uri: documentUri } };\n+        const request = { textDocument: { uri: documentUri } };\n \n-        return sendRequestWithRetry<InlayHint[]>(\n-            this.ctx.client,\n-            'rust-analyzer/inlayHints',\n-            request,\n-            tokenSource.token\n-        )\n+        return sendRequestWithRetry(this.ctx.client, ra.inlayHints, request, tokenSource.token)\n             .catch(_ => null)\n             .finally(() => {\n                 if (!tokenSource.token.isCancellationRequested) {"}, {"sha": "c5a010e94722075a7cb8d4857135e78a51c6f322", "filename": "editors/code/src/rust-analyzer-api.ts", "status": "added", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/5e6f4ca6905e02a5fa34ef292fa2abefcd982222/editors%2Fcode%2Fsrc%2Frust-analyzer-api.ts", "raw_url": "https://github.com/rust-lang/rust/raw/5e6f4ca6905e02a5fa34ef292fa2abefcd982222/editors%2Fcode%2Fsrc%2Frust-analyzer-api.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Frust-analyzer-api.ts?ref=5e6f4ca6905e02a5fa34ef292fa2abefcd982222", "patch": "@@ -0,0 +1,117 @@\n+/**\n+ * This file mirrors `crates/rust-analyzer/src/req.rs` declarations.\n+ */\n+\n+import * as lc from \"vscode-languageclient\";\n+\n+type Option<T> = null | T;\n+type Vec<T> = T[];\n+type FxHashMap<K extends PropertyKey, V> = Record<K, V>;\n+\n+function request<TParams, TResult>(method: string) {\n+    return new lc.RequestType<TParams, TResult, unknown>(`rust-analyzer/${method}`);\n+}\n+function notification<TParam>(method: string) {\n+    return new lc.NotificationType<TParam>(method);\n+}\n+\n+\n+export const analyzerStatus = request<null, string>(\"analyzerStatus\");\n+\n+\n+export const collectGarbage = request<null, null>(\"collectGarbage\");\n+\n+\n+export interface SyntaxTreeParams {\n+    textDocument: lc.TextDocumentIdentifier;\n+    range: Option<lc.Range>;\n+}\n+export const syntaxTree = request<SyntaxTreeParams, string>(\"syntaxTree\");\n+\n+\n+export interface ExpandMacroParams {\n+    textDocument: lc.TextDocumentIdentifier;\n+    position: Option<lc.Position>;\n+}\n+export interface ExpandedMacro {\n+    name: string;\n+    expansion: string;\n+}\n+export const expandMacro = request<ExpandMacroParams, Option<ExpandedMacro>>(\"expandMacro\");\n+\n+\n+export interface FindMatchingBraceParams {\n+    textDocument: lc.TextDocumentIdentifier;\n+    offsets: Vec<lc.Position>;\n+}\n+export const findMatchingBrace = request<FindMatchingBraceParams, Vec<lc.Position>>(\"findMatchingBrace\");\n+\n+\n+export interface PublishDecorationsParams {\n+    uri: string;\n+    decorations: Vec<Decoration>;\n+}\n+export interface Decoration {\n+    range: lc.Range;\n+    tag: string;\n+    bindingHash: Option<string>;\n+}\n+export const decorationsRequest = request<lc.TextDocumentIdentifier, Vec<Decoration>>(\"decorationsRequest\");\n+\n+\n+export const parentModule = request<lc.TextDocumentPositionParams, Vec<lc.Location>>(\"parentModule\");\n+\n+\n+export interface JoinLinesParams {\n+    textDocument: lc.TextDocumentIdentifier;\n+    range: lc.Range;\n+}\n+export const joinLines = request<JoinLinesParams, SourceChange>(\"joinLines\");\n+\n+\n+export const onEnter = request<lc.TextDocumentPositionParams, Option<SourceChange>>(\"onEnter\");\n+\n+export interface RunnablesParams {\n+    textDocument: lc.TextDocumentIdentifier;\n+    position: Option<lc.Position>;\n+}\n+export interface Runnable {\n+    range: lc.Range;\n+    label: string;\n+    bin: string;\n+    args: Vec<string>;\n+    env: FxHashMap<string, string>;\n+    cwd: Option<string>;\n+}\n+export const runnables = request<RunnablesParams, Vec<Runnable>>(\"runnables\");\n+\n+\n+export const enum InlayKind {\n+    TypeHint = \"TypeHint\",\n+    ParameterHint = \"ParameterHint\",\n+}\n+export interface InlayHint {\n+    range: lc.Range;\n+    kind: InlayKind;\n+    label: string;\n+}\n+export interface InlayHintsParams {\n+    textDocument: lc.TextDocumentIdentifier;\n+}\n+export const inlayHints = request<InlayHintsParams, Vec<InlayHint>>(\"inlayHints\");\n+\n+\n+export interface SsrParams {\n+    arg: string;\n+}\n+export const ssr = request<SsrParams, SourceChange>(\"ssr\");\n+\n+\n+export const publishDecorations = notification<PublishDecorationsParams>(\"publishDecorations\");\n+\n+\n+export interface SourceChange {\n+    label: string;\n+    workspaceEdit: lc.WorkspaceEdit;\n+    cursorPosition: Option<lc.TextDocumentPositionParams>;\n+}"}, {"sha": "399a150c6544037d2f2ade16851f6748a4541e06", "filename": "editors/code/src/source_change.ts", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5e6f4ca6905e02a5fa34ef292fa2abefcd982222/editors%2Fcode%2Fsrc%2Fsource_change.ts", "raw_url": "https://github.com/rust-lang/rust/raw/5e6f4ca6905e02a5fa34ef292fa2abefcd982222/editors%2Fcode%2Fsrc%2Fsource_change.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fsource_change.ts?ref=5e6f4ca6905e02a5fa34ef292fa2abefcd982222", "patch": "@@ -1,15 +1,10 @@\n import * as vscode from 'vscode';\n import * as lc from 'vscode-languageclient';\n+import * as ra from './rust-analyzer-api';\n \n import { Ctx } from './ctx';\n \n-export interface SourceChange {\n-    label: string;\n-    workspaceEdit: lc.WorkspaceEdit;\n-    cursorPosition?: lc.TextDocumentPositionParams;\n-}\n-\n-export async function applySourceChange(ctx: Ctx, change: SourceChange) {\n+export async function applySourceChange(ctx: Ctx, change: ra.SourceChange) {\n     const client = ctx.client;\n     if (!client) return;\n "}, {"sha": "68c2a94d0455833c6fd3cfe61b64295a721d69ae", "filename": "editors/code/src/util.ts", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5e6f4ca6905e02a5fa34ef292fa2abefcd982222/editors%2Fcode%2Fsrc%2Futil.ts", "raw_url": "https://github.com/rust-lang/rust/raw/5e6f4ca6905e02a5fa34ef292fa2abefcd982222/editors%2Fcode%2Fsrc%2Futil.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Futil.ts?ref=5e6f4ca6905e02a5fa34ef292fa2abefcd982222", "patch": "@@ -20,21 +20,21 @@ export const log = {\n     }\n };\n \n-export async function sendRequestWithRetry<R>(\n+export async function sendRequestWithRetry<TParam, TRet>(\n     client: lc.LanguageClient,\n-    method: string,\n-    param: unknown,\n+    reqType: lc.RequestType<TParam, TRet, unknown>,\n+    param: TParam,\n     token?: vscode.CancellationToken,\n-): Promise<R> {\n+): Promise<TRet> {\n     for (const delay of [2, 4, 6, 8, 10, null]) {\n         try {\n             return await (token\n-                ? client.sendRequest(method, param, token)\n-                : client.sendRequest(method, param)\n+                ? client.sendRequest(reqType, param, token)\n+                : client.sendRequest(reqType, param)\n             );\n         } catch (error) {\n             if (delay === null) {\n-                log.error(\"LSP request timed out\", { method, param, error });\n+                log.error(\"LSP request timed out\", { method: reqType.method, param, error });\n                 throw error;\n             }\n \n@@ -43,7 +43,7 @@ export async function sendRequestWithRetry<R>(\n             }\n \n             if (error.code !== lc.ErrorCodes.ContentModified) {\n-                log.error(\"LSP request failed\", { method, param, error });\n+                log.error(\"LSP request failed\", { method: reqType.method, param, error });\n                 throw error;\n             }\n "}]}