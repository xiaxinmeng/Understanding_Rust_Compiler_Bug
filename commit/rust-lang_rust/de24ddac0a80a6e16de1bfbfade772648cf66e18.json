{"sha": "de24ddac0a80a6e16de1bfbfade772648cf66e18", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlMjRkZGFjMGE4MGE2ZTE2ZGUxYmZiZmFkZTc3MjY0OGNmNjZlMTg=", "commit": {"author": {"name": "Charles Lew", "email": "crlf0710@gmail.com", "date": "2020-05-16T06:09:01Z"}, "committer": {"name": "Charles Lew", "email": "crlf0710@gmail.com", "date": "2020-05-16T17:31:18Z"}, "message": "Disallow forbidden usage of non-ascii identifiers.", "tree": {"sha": "ecf4544c98229fcf0e53e7cb3bc29473668edb90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ecf4544c98229fcf0e53e7cb3bc29473668edb90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de24ddac0a80a6e16de1bfbfade772648cf66e18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de24ddac0a80a6e16de1bfbfade772648cf66e18", "html_url": "https://github.com/rust-lang/rust/commit/de24ddac0a80a6e16de1bfbfade772648cf66e18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de24ddac0a80a6e16de1bfbfade772648cf66e18/comments", "author": {"login": "crlf0710", "id": 451806, "node_id": "MDQ6VXNlcjQ1MTgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/451806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crlf0710", "html_url": "https://github.com/crlf0710", "followers_url": "https://api.github.com/users/crlf0710/followers", "following_url": "https://api.github.com/users/crlf0710/following{/other_user}", "gists_url": "https://api.github.com/users/crlf0710/gists{/gist_id}", "starred_url": "https://api.github.com/users/crlf0710/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crlf0710/subscriptions", "organizations_url": "https://api.github.com/users/crlf0710/orgs", "repos_url": "https://api.github.com/users/crlf0710/repos", "events_url": "https://api.github.com/users/crlf0710/events{/privacy}", "received_events_url": "https://api.github.com/users/crlf0710/received_events", "type": "User", "site_admin": false}, "committer": {"login": "crlf0710", "id": 451806, "node_id": "MDQ6VXNlcjQ1MTgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/451806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crlf0710", "html_url": "https://github.com/crlf0710", "followers_url": "https://api.github.com/users/crlf0710/followers", "following_url": "https://api.github.com/users/crlf0710/following{/other_user}", "gists_url": "https://api.github.com/users/crlf0710/gists{/gist_id}", "starred_url": "https://api.github.com/users/crlf0710/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crlf0710/subscriptions", "organizations_url": "https://api.github.com/users/crlf0710/orgs", "repos_url": "https://api.github.com/users/crlf0710/repos", "events_url": "https://api.github.com/users/crlf0710/events{/privacy}", "received_events_url": "https://api.github.com/users/crlf0710/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "163445ac80225090c81e7ff1b185fb5dca52e3b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/163445ac80225090c81e7ff1b185fb5dca52e3b2", "html_url": "https://github.com/rust-lang/rust/commit/163445ac80225090c81e7ff1b185fb5dca52e3b2"}], "stats": {"total": 130, "additions": 128, "deletions": 2}, "files": [{"sha": "8eb125e444053d0191da9b7021cedd97b5bfa7ec", "filename": "src/librustc_ast_passes/ast_validation.rs", "status": "modified", "additions": 37, "deletions": 2, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/de24ddac0a80a6e16de1bfbfade772648cf66e18/src%2Flibrustc_ast_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de24ddac0a80a6e16de1bfbfade772648cf66e18/src%2Flibrustc_ast_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Fast_validation.rs?ref=de24ddac0a80a6e16de1bfbfade772648cf66e18", "patch": "@@ -572,6 +572,35 @@ impl<'a> AstValidator<'a> {\n             .emit();\n     }\n \n+    fn check_nomangle_item_asciionly(&self, ident: Ident, item_span: Span) {\n+        if ident.name.as_str().is_ascii() {\n+            return;\n+        }\n+        let head_span = self.session.source_map().guess_head_span(item_span);\n+        struct_span_err!(\n+            self.session,\n+            head_span,\n+            E0754,\n+            \"`#[no_mangle]` requires ASCII identifier\"\n+        )\n+        .emit();\n+    }\n+\n+    fn check_mod_file_item_asciionly(&self, ident: Ident) {\n+        if ident.name.as_str().is_ascii() {\n+            return;\n+        }\n+        struct_span_err!(\n+            self.session,\n+            ident.span,\n+            E0754,\n+            \"trying to load file for module `{}` with non ascii identifer name\",\n+            ident.name\n+        )\n+        .help(\"consider using `#[path]` attribute to specify filesystem path\")\n+        .emit();\n+    }\n+\n     fn deny_generic_params(&self, generics: &Generics, ident_span: Span) {\n         if !generics.params.is_empty() {\n             struct_span_err!(\n@@ -866,6 +895,10 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             self.has_proc_macro_decls = true;\n         }\n \n+        if attr::contains_name(&item.attrs, sym::no_mangle) {\n+            self.check_nomangle_item_asciionly(item.ident, item.span);\n+        }\n+\n         match item.kind {\n             ItemKind::Impl {\n                 unsafety,\n@@ -992,9 +1025,11 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 walk_list!(self, visit_attribute, &item.attrs);\n                 return;\n             }\n-            ItemKind::Mod(_) => {\n+            ItemKind::Mod(Mod { inline, .. }) => {\n                 // Ensure that `path` attributes on modules are recorded as used (cf. issue #35584).\n-                attr::first_attr_value_str_by_name(&item.attrs, sym::path);\n+                if !inline && !attr::contains_name(&item.attrs, sym::path) {\n+                    self.check_mod_file_item_asciionly(item.ident);\n+                }\n             }\n             ItemKind::Union(ref vdata, _) => {\n                 if let VariantData::Tuple(..) | VariantData::Unit(..) = vdata {"}, {"sha": "d6863c615f64400234daa22b6eada8f4331e9629", "filename": "src/librustc_error_codes/error_codes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/de24ddac0a80a6e16de1bfbfade772648cf66e18/src%2Flibrustc_error_codes%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de24ddac0a80a6e16de1bfbfade772648cf66e18/src%2Flibrustc_error_codes%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes.rs?ref=de24ddac0a80a6e16de1bfbfade772648cf66e18", "patch": "@@ -436,6 +436,7 @@ E0750: include_str!(\"./error_codes/E0750.md\"),\n E0751: include_str!(\"./error_codes/E0751.md\"),\n E0752: include_str!(\"./error_codes/E0752.md\"),\n E0753: include_str!(\"./error_codes/E0753.md\"),\n+E0754: include_str!(\"./error_codes/E0754.md\"),\n ;\n //  E0006, // merged with E0005\n //  E0008, // cannot bind by-move into a pattern guard"}, {"sha": "abdc01ed21ab738dcece9a0d7c0e2a219a0ffbc1", "filename": "src/librustc_error_codes/error_codes/E0754.md", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/de24ddac0a80a6e16de1bfbfade772648cf66e18/src%2Flibrustc_error_codes%2Ferror_codes%2FE0754.md", "raw_url": "https://github.com/rust-lang/rust/raw/de24ddac0a80a6e16de1bfbfade772648cf66e18/src%2Flibrustc_error_codes%2Ferror_codes%2FE0754.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0754.md?ref=de24ddac0a80a6e16de1bfbfade772648cf66e18", "patch": "@@ -0,0 +1,33 @@\n+An non-ascii identifier was used in an invalid context.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0754\n+# #![feature(non_ascii_idents)]\n+\n+mod \u0159\u0173\u015b\u0165;\n+// ^ error!\n+fn main() {}\n+```\n+\n+```compile_fail,E0754\n+# #![feature(non_ascii_idents)]\n+\n+#[no_mangle]\n+fn \u0159\u0173\u015b\u0165() {}\n+// ^ error!\n+fn main() {}\n+```\n+\n+Non-ascii can be used as module names if it is inline\n+or a #\\[path\\] attribute is specified. For example:\n+\n+```\n+# #![feature(non_ascii_idents)]\n+\n+mod \u0159\u0173\u015b\u0165 {\n+    const IS_GREAT: bool = true;\n+}\n+\n+fn main() {}\n+```"}, {"sha": "e373b64384f927ca7a5134d42ec6e3de53159df7", "filename": "src/test/ui/rfc-2457/auxiliary/mod_file_nonascii_with_path_allowed-aux.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/de24ddac0a80a6e16de1bfbfade772648cf66e18/src%2Ftest%2Fui%2Frfc-2457%2Fauxiliary%2Fmod_file_nonascii_with_path_allowed-aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de24ddac0a80a6e16de1bfbfade772648cf66e18/src%2Ftest%2Fui%2Frfc-2457%2Fauxiliary%2Fmod_file_nonascii_with_path_allowed-aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2457%2Fauxiliary%2Fmod_file_nonascii_with_path_allowed-aux.rs?ref=de24ddac0a80a6e16de1bfbfade772648cf66e18", "patch": "@@ -0,0 +1 @@\n+pub trait Foo {}"}, {"sha": "efd2932f152948918e9c5b54ede2690c369fd2e4", "filename": "src/test/ui/rfc-2457/mod_file_nonascii_forbidden.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/de24ddac0a80a6e16de1bfbfade772648cf66e18/src%2Ftest%2Fui%2Frfc-2457%2Fmod_file_nonascii_forbidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de24ddac0a80a6e16de1bfbfade772648cf66e18/src%2Ftest%2Fui%2Frfc-2457%2Fmod_file_nonascii_forbidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2457%2Fmod_file_nonascii_forbidden.rs?ref=de24ddac0a80a6e16de1bfbfade772648cf66e18", "patch": "@@ -0,0 +1,6 @@\n+#![feature(non_ascii_idents)]\n+\n+mod \u0159\u0173\u015b\u0165; //~ trying to load file for\n+//~^ file not found for\n+\n+fn main() {}"}, {"sha": "be729836f4f2127bebb338abab6862ac50356116", "filename": "src/test/ui/rfc-2457/mod_file_nonascii_forbidden.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/de24ddac0a80a6e16de1bfbfade772648cf66e18/src%2Ftest%2Fui%2Frfc-2457%2Fmod_file_nonascii_forbidden.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de24ddac0a80a6e16de1bfbfade772648cf66e18/src%2Ftest%2Fui%2Frfc-2457%2Fmod_file_nonascii_forbidden.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2457%2Fmod_file_nonascii_forbidden.stderr?ref=de24ddac0a80a6e16de1bfbfade772648cf66e18", "patch": "@@ -0,0 +1,20 @@\n+error[E0583]: file not found for module `\u0159\u0173\u015b\u0165`\n+  --> $DIR/mod_file_nonascii_forbidden.rs:3:1\n+   |\n+LL | mod \u0159\u0173\u015b\u0165;\n+   | ^^^^^^^^^\n+   |\n+   = help: to create the module `\u0159\u0173\u015b\u0165`, create file \"$DIR/\u0159\u0173\u015b\u0165.rs\"\n+\n+error[E0754]: trying to load file for module `\u0159\u0173\u015b\u0165` with non ascii identifer name\n+  --> $DIR/mod_file_nonascii_forbidden.rs:3:5\n+   |\n+LL | mod \u0159\u0173\u015b\u0165;\n+   |     ^^^^\n+   |\n+   = help: consider using `#[path]` attribute to specify filesystem path\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0583, E0754.\n+For more information about an error, try `rustc --explain E0583`."}, {"sha": "e9f3fba2fb01e61c38b71adf4c9f7eaad4d8efdc", "filename": "src/test/ui/rfc-2457/mod_file_nonascii_with_path_allowed.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/de24ddac0a80a6e16de1bfbfade772648cf66e18/src%2Ftest%2Fui%2Frfc-2457%2Fmod_file_nonascii_with_path_allowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de24ddac0a80a6e16de1bfbfade772648cf66e18/src%2Ftest%2Fui%2Frfc-2457%2Fmod_file_nonascii_with_path_allowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2457%2Fmod_file_nonascii_with_path_allowed.rs?ref=de24ddac0a80a6e16de1bfbfade772648cf66e18", "patch": "@@ -0,0 +1,7 @@\n+// check-pass\n+#![feature(non_ascii_idents)]\n+\n+#[path=\"auxiliary/mod_file_nonascii_with_path_allowed-aux.rs\"]\n+mod \u0159\u0173\u015b\u0165;\n+\n+fn main() {}"}, {"sha": "dd27da432ba657482691266cedb703f6c65f90e2", "filename": "src/test/ui/rfc-2457/mod_inline_nonascii_allowed.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/de24ddac0a80a6e16de1bfbfade772648cf66e18/src%2Ftest%2Fui%2Frfc-2457%2Fmod_inline_nonascii_allowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de24ddac0a80a6e16de1bfbfade772648cf66e18/src%2Ftest%2Fui%2Frfc-2457%2Fmod_inline_nonascii_allowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2457%2Fmod_inline_nonascii_allowed.rs?ref=de24ddac0a80a6e16de1bfbfade772648cf66e18", "patch": "@@ -0,0 +1,8 @@\n+// check-pass\n+#![feature(non_ascii_idents)]\n+\n+mod \u0159\u0173\u015b\u0165 {\n+    const IS_GREAT: bool = true;\n+}\n+\n+fn main() {}"}, {"sha": "a408c9757165c4979f40a36e889ff52b1924d4a3", "filename": "src/test/ui/rfc-2457/no_mangle_nonascii_forbidden.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/de24ddac0a80a6e16de1bfbfade772648cf66e18/src%2Ftest%2Fui%2Frfc-2457%2Fno_mangle_nonascii_forbidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de24ddac0a80a6e16de1bfbfade772648cf66e18/src%2Ftest%2Fui%2Frfc-2457%2Fno_mangle_nonascii_forbidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2457%2Fno_mangle_nonascii_forbidden.rs?ref=de24ddac0a80a6e16de1bfbfade772648cf66e18", "patch": "@@ -0,0 +1,6 @@\n+#![feature(non_ascii_idents)]\n+\n+#[no_mangle]\n+pub fn \u0159\u0173\u015b\u0165() {}  //~ `#[no_mangle]` requires ASCII identifier\n+\n+fn main() {}"}, {"sha": "4ca83e41032081449cbb474c16a9650f33a2649c", "filename": "src/test/ui/rfc-2457/no_mangle_nonascii_forbidden.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/de24ddac0a80a6e16de1bfbfade772648cf66e18/src%2Ftest%2Fui%2Frfc-2457%2Fno_mangle_nonascii_forbidden.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de24ddac0a80a6e16de1bfbfade772648cf66e18/src%2Ftest%2Fui%2Frfc-2457%2Fno_mangle_nonascii_forbidden.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2457%2Fno_mangle_nonascii_forbidden.stderr?ref=de24ddac0a80a6e16de1bfbfade772648cf66e18", "patch": "@@ -0,0 +1,9 @@\n+error[E0754]: `#[no_mangle]` requires ASCII identifier\n+  --> $DIR/no_mangle_nonascii_forbidden.rs:4:1\n+   |\n+LL | pub fn \u0159\u0173\u015b\u0165() {}\n+   | ^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0754`."}]}