{"sha": "00098bd33b99ca7f9d7e67cc5d877c25e9a93bf7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwMDk4YmQzM2I5OWNhN2Y5ZDdlNjdjYzVkODc3YzI1ZTlhOTNiZjc=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-10-04T16:24:44Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-10-08T16:05:18Z"}, "message": "Add missing urls for hash modules", "tree": {"sha": "b376973fa9d3e86c211b0878497488618d0934b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b376973fa9d3e86c211b0878497488618d0934b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00098bd33b99ca7f9d7e67cc5d877c25e9a93bf7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00098bd33b99ca7f9d7e67cc5d877c25e9a93bf7", "html_url": "https://github.com/rust-lang/rust/commit/00098bd33b99ca7f9d7e67cc5d877c25e9a93bf7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00098bd33b99ca7f9d7e67cc5d877c25e9a93bf7/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a9af010ebc728bc4798b1ba30de0322c1f0138a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a9af010ebc728bc4798b1ba30de0322c1f0138a", "html_url": "https://github.com/rust-lang/rust/commit/4a9af010ebc728bc4798b1ba30de0322c1f0138a"}], "stats": {"total": 37, "additions": 22, "deletions": 15}, "files": [{"sha": "ac36cbaace7a89fe85cc97e5e57ee86b85dca396", "filename": "src/libcore/hash/mod.rs", "status": "modified", "additions": 22, "deletions": 15, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/00098bd33b99ca7f9d7e67cc5d877c25e9a93bf7/src%2Flibcore%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00098bd33b99ca7f9d7e67cc5d877c25e9a93bf7/src%2Flibcore%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fmod.rs?ref=00098bd33b99ca7f9d7e67cc5d877c25e9a93bf7", "patch": "@@ -38,7 +38,9 @@\n //! ```\n //!\n //! If you need more control over how a value is hashed, you need to implement\n-//! the `Hash` trait:\n+//! the [`Hash`] trait:\n+//!\n+//! [`Hash`]: trait.Hash.html\n //!\n //! ```rust\n //! use std::hash::{Hash, Hasher, SipHasher};\n@@ -90,21 +92,21 @@ mod sip;\n /// The `H` type parameter is an abstract hash state that is used by the `Hash`\n /// to compute the hash.\n ///\n-/// If you are also implementing `Eq`, there is an additional property that\n+/// If you are also implementing [`Eq`], there is an additional property that\n /// is important:\n ///\n /// ```text\n /// k1 == k2 -> hash(k1) == hash(k2)\n /// ```\n ///\n /// In other words, if two keys are equal, their hashes should also be equal.\n-/// `HashMap` and `HashSet` both rely on this behavior.\n+/// [`HashMap`] and [`HashSet`] both rely on this behavior.\n ///\n /// ## Derivable\n ///\n /// This trait can be used with `#[derive]` if all fields implement `Hash`.\n /// When `derive`d, the resulting hash will be the combination of the values\n-/// from calling `.hash()` on each field.\n+/// from calling [`.hash()`] on each field.\n ///\n /// ## How can I implement `Hash`?\n ///\n@@ -127,6 +129,11 @@ mod sip;\n ///     }\n /// }\n /// ```\n+///\n+/// [`Eq`]: ../../std/cmp/trait.Eq.html\n+/// [`HashMap`]: ../../std/collections/struct.HashMap.html\n+/// [`HashSet`]: ../../std/collections/struct.HashSet.html\n+/// [`.hash()`]: #tymethod.hash\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Hash {\n     /// Feeds this value into the state given, updating the hasher as necessary.\n@@ -151,35 +158,35 @@ pub trait Hasher {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn finish(&self) -> u64;\n \n-    /// Writes some data into this `Hasher`\n+    /// Writes some data into this `Hasher`.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn write(&mut self, bytes: &[u8]);\n \n-    /// Write a single `u8` into this hasher\n+    /// Write a single `u8` into this hasher.\n     #[inline]\n     #[stable(feature = \"hasher_write\", since = \"1.3.0\")]\n     fn write_u8(&mut self, i: u8) {\n         self.write(&[i])\n     }\n-    /// Write a single `u16` into this hasher.\n+    /// Writes a single `u16` into this hasher.\n     #[inline]\n     #[stable(feature = \"hasher_write\", since = \"1.3.0\")]\n     fn write_u16(&mut self, i: u16) {\n         self.write(&unsafe { mem::transmute::<_, [u8; 2]>(i) })\n     }\n-    /// Write a single `u32` into this hasher.\n+    /// Writes a single `u32` into this hasher.\n     #[inline]\n     #[stable(feature = \"hasher_write\", since = \"1.3.0\")]\n     fn write_u32(&mut self, i: u32) {\n         self.write(&unsafe { mem::transmute::<_, [u8; 4]>(i) })\n     }\n-    /// Write a single `u64` into this hasher.\n+    /// Writes a single `u64` into this hasher.\n     #[inline]\n     #[stable(feature = \"hasher_write\", since = \"1.3.0\")]\n     fn write_u64(&mut self, i: u64) {\n         self.write(&unsafe { mem::transmute::<_, [u8; 8]>(i) })\n     }\n-    /// Write a single `usize` into this hasher.\n+    /// Writes a single `usize` into this hasher.\n     #[inline]\n     #[stable(feature = \"hasher_write\", since = \"1.3.0\")]\n     fn write_usize(&mut self, i: usize) {\n@@ -189,31 +196,31 @@ pub trait Hasher {\n         self.write(bytes);\n     }\n \n-    /// Write a single `i8` into this hasher.\n+    /// Writes a single `i8` into this hasher.\n     #[inline]\n     #[stable(feature = \"hasher_write\", since = \"1.3.0\")]\n     fn write_i8(&mut self, i: i8) {\n         self.write_u8(i as u8)\n     }\n-    /// Write a single `i16` into this hasher.\n+    /// Writes a single `i16` into this hasher.\n     #[inline]\n     #[stable(feature = \"hasher_write\", since = \"1.3.0\")]\n     fn write_i16(&mut self, i: i16) {\n         self.write_u16(i as u16)\n     }\n-    /// Write a single `i32` into this hasher.\n+    /// Writes a single `i32` into this hasher.\n     #[inline]\n     #[stable(feature = \"hasher_write\", since = \"1.3.0\")]\n     fn write_i32(&mut self, i: i32) {\n         self.write_u32(i as u32)\n     }\n-    /// Write a single `i64` into this hasher.\n+    /// Writes a single `i64` into this hasher.\n     #[inline]\n     #[stable(feature = \"hasher_write\", since = \"1.3.0\")]\n     fn write_i64(&mut self, i: i64) {\n         self.write_u64(i as u64)\n     }\n-    /// Write a single `isize` into this hasher.\n+    /// Writes a single `isize` into this hasher.\n     #[inline]\n     #[stable(feature = \"hasher_write\", since = \"1.3.0\")]\n     fn write_isize(&mut self, i: isize) {"}]}