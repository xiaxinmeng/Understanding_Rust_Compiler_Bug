{"sha": "16831891da49422e08c597a3857c2091ca220cbc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2ODMxODkxZGE0OTQyMmUwOGM1OTdhMzg1N2MyMDkxY2EyMjBjYmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-10T22:12:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-10T22:12:38Z"}, "message": "Auto merge of #5889 - ebroto:5886_or_fun_call_const_0_args, r=Manishearth\n\nAvoid or_fun_call for const_fn with no args\n\nBased on #5682 by @lzutao\n\nThis avoids a subset of false positives, specifically those related to `const fn`s that take no arguments.\nFor the rest, a much more involved fix would be needed, see https://github.com/rust-lang/rust-clippy/pull/5682#issuecomment-638681210.\n\nSo this does *not* solve #5658\n\nchangelog: Avoid triggering [`or_fun_call`] with `const fn`s that take no arguments.\n\nFixes #5886", "tree": {"sha": "04c4f1120412dfeaffa6b5e21dc4fd62566d39de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04c4f1120412dfeaffa6b5e21dc4fd62566d39de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16831891da49422e08c597a3857c2091ca220cbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16831891da49422e08c597a3857c2091ca220cbc", "html_url": "https://github.com/rust-lang/rust/commit/16831891da49422e08c597a3857c2091ca220cbc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16831891da49422e08c597a3857c2091ca220cbc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41134532023a8e5bbbe621f2538e61049ceafe6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/41134532023a8e5bbbe621f2538e61049ceafe6b", "html_url": "https://github.com/rust-lang/rust/commit/41134532023a8e5bbbe621f2538e61049ceafe6b"}, {"sha": "5d66bd7bb3fd701d70ec11217e3f89fabe5cb0a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d66bd7bb3fd701d70ec11217e3f89fabe5cb0a7", "html_url": "https://github.com/rust-lang/rust/commit/5d66bd7bb3fd701d70ec11217e3f89fabe5cb0a7"}], "stats": {"total": 25, "additions": 25, "deletions": 0}, "files": [{"sha": "223628cc610da038d91f1856ea638dc56ce892b7", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/16831891da49422e08c597a3857c2091ca220cbc/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16831891da49422e08c597a3857c2091ca220cbc/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=16831891da49422e08c597a3857c2091ca220cbc", "patch": "@@ -43,6 +43,7 @@ use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{LateContext, Level, Lint, LintContext};\n use rustc_middle::hir::map::Map;\n use rustc_middle::ty::{self, layout::IntegerExt, subst::GenericArg, Ty, TyCtxt, TypeFoldable};\n+use rustc_mir::const_eval;\n use rustc_span::hygiene::{ExpnKind, MacroKind};\n use rustc_span::source_map::original_sp;\n use rustc_span::symbol::{self, kw, Symbol};\n@@ -868,11 +869,19 @@ pub fn is_copy<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n \n /// Checks if an expression is constructing a tuple-like enum variant or struct\n pub fn is_ctor_or_promotable_const_function(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n+    fn has_no_arguments(cx: &LateContext<'_>, def_id: DefId) -> bool {\n+        cx.tcx.fn_sig(def_id).skip_binder().inputs().is_empty()\n+    }\n+\n     if let ExprKind::Call(ref fun, _) = expr.kind {\n         if let ExprKind::Path(ref qp) = fun.kind {\n             let res = cx.qpath_res(qp, fun.hir_id);\n             return match res {\n                 def::Res::Def(DefKind::Variant | DefKind::Ctor(..), ..) => true,\n+                // FIXME: check the constness of the arguments, see https://github.com/rust-lang/rust-clippy/pull/5682#issuecomment-638681210\n+                def::Res::Def(DefKind::Fn, def_id) if has_no_arguments(cx, def_id) => {\n+                    const_eval::is_const_fn(cx.tcx, def_id)\n+                },\n                 def::Res::Def(_, def_id) => cx.tcx.is_promotable_const_fn(def_id),\n                 _ => false,\n             };"}, {"sha": "67faa8bd4a0aa1f8b2c5eb2a8f86f43df6fd2798", "filename": "tests/ui/or_fun_call.fixed", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16831891da49422e08c597a3857c2091ca220cbc/tests%2Fui%2For_fun_call.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/16831891da49422e08c597a3857c2091ca220cbc/tests%2Fui%2For_fun_call.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.fixed?ref=16831891da49422e08c597a3857c2091ca220cbc", "patch": "@@ -116,4 +116,12 @@ fn f() -> Option<()> {\n     Some(())\n }\n \n+// Issue 5886 - const fn (with no arguments)\n+pub fn skip_const_fn_with_no_args() {\n+    const fn foo() -> Option<i32> {\n+        Some(42)\n+    }\n+    let _ = None.or(foo());\n+}\n+\n fn main() {}"}, {"sha": "9867e2eedcff5253eaa86e20bbb24fabd9a046bd", "filename": "tests/ui/or_fun_call.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16831891da49422e08c597a3857c2091ca220cbc/tests%2Fui%2For_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16831891da49422e08c597a3857c2091ca220cbc/tests%2Fui%2For_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.rs?ref=16831891da49422e08c597a3857c2091ca220cbc", "patch": "@@ -116,4 +116,12 @@ fn f() -> Option<()> {\n     Some(())\n }\n \n+// Issue 5886 - const fn (with no arguments)\n+pub fn skip_const_fn_with_no_args() {\n+    const fn foo() -> Option<i32> {\n+        Some(42)\n+    }\n+    let _ = None.or(foo());\n+}\n+\n fn main() {}"}]}