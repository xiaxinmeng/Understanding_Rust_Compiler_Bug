{"sha": "a3a01ba5b7c955f65d576d8f51b57d9cb307f481", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzYTAxYmE1YjdjOTU1ZjY1ZDU3NmQ4ZjUxYjU3ZDljYjMwN2Y0ODE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-03-17T17:57:18Z"}, "committer": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2018-04-13T14:04:57Z"}, "message": "Add stack guard shim", "tree": {"sha": "bd324787134e5c1388640a1e18ce1d1df90dbe0f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd324787134e5c1388640a1e18ce1d1df90dbe0f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3a01ba5b7c955f65d576d8f51b57d9cb307f481", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJgBAABCgBKFiEEvpMjxK4/cnPNfesJHVy0/Fl8MAQFAlrQuQosHGdpdC1uby1y\nZXBseS05ODc5MTY1NzE2NDc5NDEzMTMxQG9saS1vYmsuZGUACgkQHVy0/Fl8MAQT\ncRAAtKUcy1URlUmxj+smjJlEmkB3Gr3yyddhBTEg89aU5EAf/9isTHyXGmV+Wv0a\n00fFFC+RRis8U3TsdwRgzBRKi9Trr56WUS8A50DfpQ3+iHigrCpjSCM/NbiV4XfX\nhPdbHX+C3d/G8D0mw1vmUCpJ9cCOHSfklzFtF8lmKQO3m1OkDKAFbC8Z1RRuxGDy\nlZVRpPR9TpepiwRm7chQjxE+47T4g1QOefHYkK812VQiKd8hLU5WVcWCo/I75DwT\niFVLxiTEiyF26mggyYMYXBNHdpufMTKqb+XWKYlKjPWhBl0Ae/Mo4TFIq3jb1y3A\n5BnwKbDDZuWNdIyG9is8KHNRujyUGmek8LgDGpSxBwjPHn9LA4Ieoev9SjrI1FL+\nOImhibAwOGJm/598Vqkyk8+HsVGrk97hjJKuDc5+TpY87sGJQmTma+JKs+Nv2Ybi\n5es6tFw9pGbP5nXtkHlglF2yxl6AKMBf9NYdR0uYajSlFkI72flNm3mqQZcJ8QcW\nOFmGFmKAT+mkq580vDxbGZ4W0/gx9ea84RYX8qj4kCoXra99Hkd9g7pw3l6YP18T\nR+cfL6pcCRtXwAmKDme9ej/layce7/kf5P1rNN/Aa5DWxxifHZ1eP7LV39PJiSAQ\npa0MimTb22ASIZS30XStQypGGKX2ccPX4Oj0XGUUVgDBTRs=\n=aoxk\n-----END PGP SIGNATURE-----", "payload": "tree bd324787134e5c1388640a1e18ce1d1df90dbe0f\nparent 753da676bacd058cd6ef58aa23f02b787381421e\nauthor bjorn3 <bjorn3@users.noreply.github.com> 1521309438 +0100\ncommitter Oliver Schneider <git-no-reply-9879165716479413131@oli-obk.de> 1523628297 +0200\n\nAdd stack guard shim\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3a01ba5b7c955f65d576d8f51b57d9cb307f481", "html_url": "https://github.com/rust-lang/rust/commit/a3a01ba5b7c955f65d576d8f51b57d9cb307f481", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3a01ba5b7c955f65d576d8f51b57d9cb307f481/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "753da676bacd058cd6ef58aa23f02b787381421e", "url": "https://api.github.com/repos/rust-lang/rust/commits/753da676bacd058cd6ef58aa23f02b787381421e", "html_url": "https://github.com/rust-lang/rust/commit/753da676bacd058cd6ef58aa23f02b787381421e"}], "stats": {"total": 72, "additions": 71, "deletions": 1}, "files": [{"sha": "d5d77c5d325939968bc3f36385b86fd53cce4134", "filename": "miri/fn_call.rs", "status": "modified", "additions": 70, "deletions": 1, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/a3a01ba5b7c955f65d576d8f51b57d9cb307f481/miri%2Ffn_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3a01ba5b7c955f65d576d8f51b57d9cb307f481/miri%2Ffn_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/miri%2Ffn_call.rs?ref=a3a01ba5b7c955f65d576d8f51b57d9cb307f481", "patch": "@@ -1,7 +1,8 @@\n use rustc::ty::{self, Ty};\n-use rustc::ty::layout::{Align, LayoutOf};\n+use rustc::ty::layout::{self, Align, LayoutOf};\n use rustc::hir::def_id::{DefId, CRATE_DEF_INDEX};\n use rustc::mir;\n+use rustc_data_structures::indexed_vec::Idx;\n use syntax::attr;\n use syntax::abi::Abi;\n use syntax::codemap::Span;\n@@ -14,6 +15,50 @@ use tls::MemoryExt;\n \n use super::memory::MemoryKind;\n \n+fn write_discriminant_value<'a, 'mir, 'tcx: 'a + 'mir>(\n+        ecx: &mut EvalContext<'a, 'mir, 'tcx, super::Evaluator<'tcx>>,\n+        dest_ty: Ty<'tcx>,\n+        dest: Place,\n+        variant_index: usize,\n+    ) -> EvalResult<'tcx> {\n+        let layout = ecx.layout_of(dest_ty)?;\n+\n+        match layout.variants {\n+            layout::Variants::Single { index } => {\n+                if index != variant_index {\n+                    // If the layout of an enum is `Single`, all\n+                    // other variants are necessarily uninhabited.\n+                    assert_eq!(layout.for_variant(&ecx, variant_index).abi,\n+                               layout::Abi::Uninhabited);\n+                }\n+            }\n+            layout::Variants::Tagged { .. } => {\n+                let discr_val = dest_ty.ty_adt_def().unwrap()\n+                    .discriminant_for_variant(*ecx.tcx, variant_index)\n+                    .val;\n+\n+                let (discr_dest, discr) = ecx.place_field(dest, mir::Field::new(0), layout)?;\n+                ecx.write_primval(discr_dest, PrimVal::Bytes(discr_val), discr.ty)?;\n+            }\n+            layout::Variants::NicheFilling {\n+                dataful_variant,\n+                ref niche_variants,\n+                niche_start,\n+                ..\n+            } => {\n+                if variant_index != dataful_variant {\n+                    let (niche_dest, niche) =\n+                        ecx.place_field(dest, mir::Field::new(0), layout)?;\n+                    let niche_value = ((variant_index - niche_variants.start) as u128)\n+                        .wrapping_add(niche_start);\n+                    ecx.write_primval(niche_dest, PrimVal::Bytes(niche_value), niche.ty)?;\n+                }\n+            }\n+        }\n+\n+        Ok(())\n+    }\n+\n pub trait EvalContextExt<'tcx> {\n     fn call_c_abi(\n         &mut self,\n@@ -58,6 +103,30 @@ impl<'a, 'mir, 'tcx: 'mir + 'a> EvalContextExt<'tcx> for EvalContext<'a, 'mir, '\n     ) -> EvalResult<'tcx, bool> {\n         trace!(\"eval_fn_call: {:#?}, {:#?}\", instance, destination);\n \n+        let def_id = instance.def_id();\n+        let item_path = self.tcx.absolute_item_path_str(def_id);\n+        if item_path.starts_with(\"std::\") {\n+            println!(\"{}\", item_path);\n+        }\n+        match &*item_path {\n+            \"std::sys::unix::thread::guard::init\" | \"std::sys::unix::thread::guard::current\" => {\n+                // Return None, as it doesn't make sense to return Some, because miri detects stack overflow itself.\n+                let ret_ty = sig.output();\n+                match ret_ty.sty {\n+                    ty::TyAdt(ref adt_def, _) => {\n+                        assert!(adt_def.is_enum(), \"Unexpected return type for {}\", item_path);\n+                        let none_variant_index = adt_def.variants.iter().enumerate().find(|&(_i, ref def)| {\n+                            def.name.as_str() == \"None\"\n+                        }).expect(\"No None variant\").0;\n+                        write_discriminant_value(self, ret_ty, destination.unwrap().0, none_variant_index)?;\n+                        return Ok(true);\n+                    }\n+                    _ => panic!(\"Unexpected return type for {}\", item_path)\n+                }\n+            }\n+            _ => {}\n+        }\n+\n         let mir = match self.load_mir(instance.def) {\n             Ok(mir) => mir,\n             Err(EvalError { kind: EvalErrorKind::NoMirFor(path), .. }) => {"}, {"sha": "85827da5dd3c8d974249fb5c74bb6649d5a53048", "filename": "miri/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a3a01ba5b7c955f65d576d8f51b57d9cb307f481/miri%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3a01ba5b7c955f65d576d8f51b57d9cb307f481/miri%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/miri%2Flib.rs?ref=a3a01ba5b7c955f65d576d8f51b57d9cb307f481", "patch": "@@ -3,6 +3,7 @@\n     rustc_private,\n     conservative_impl_trait,\n     catch_expr,\n+    inclusive_range_fields\n )]\n \n #[macro_use]"}]}