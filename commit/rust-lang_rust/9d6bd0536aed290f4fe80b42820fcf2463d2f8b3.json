{"sha": "9d6bd0536aed290f4fe80b42820fcf2463d2f8b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkNmJkMDUzNmFlZDI5MGY0ZmU4MGI0MjgyMGZjZjI0NjNkMmY4YjM=", "commit": {"author": {"name": "Trevor Spiteri", "email": "tspiteri@ieee.org", "date": "2017-12-21T01:39:01Z"}, "committer": {"name": "Trevor Spiteri", "email": "tspiteri@ieee.org", "date": "2017-12-21T01:39:01Z"}, "message": "docs: do not call integer overflows as underflows", "tree": {"sha": "7ad43434c283c05405836e8eea77b2d206a3a39f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ad43434c283c05405836e8eea77b2d206a3a39f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d6bd0536aed290f4fe80b42820fcf2463d2f8b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d6bd0536aed290f4fe80b42820fcf2463d2f8b3", "html_url": "https://github.com/rust-lang/rust/commit/9d6bd0536aed290f4fe80b42820fcf2463d2f8b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d6bd0536aed290f4fe80b42820fcf2463d2f8b3/comments", "author": {"login": "tspiteri", "id": 18604588, "node_id": "MDQ6VXNlcjE4NjA0NTg4", "avatar_url": "https://avatars.githubusercontent.com/u/18604588?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tspiteri", "html_url": "https://github.com/tspiteri", "followers_url": "https://api.github.com/users/tspiteri/followers", "following_url": "https://api.github.com/users/tspiteri/following{/other_user}", "gists_url": "https://api.github.com/users/tspiteri/gists{/gist_id}", "starred_url": "https://api.github.com/users/tspiteri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tspiteri/subscriptions", "organizations_url": "https://api.github.com/users/tspiteri/orgs", "repos_url": "https://api.github.com/users/tspiteri/repos", "events_url": "https://api.github.com/users/tspiteri/events{/privacy}", "received_events_url": "https://api.github.com/users/tspiteri/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tspiteri", "id": 18604588, "node_id": "MDQ6VXNlcjE4NjA0NTg4", "avatar_url": "https://avatars.githubusercontent.com/u/18604588?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tspiteri", "html_url": "https://github.com/tspiteri", "followers_url": "https://api.github.com/users/tspiteri/followers", "following_url": "https://api.github.com/users/tspiteri/following{/other_user}", "gists_url": "https://api.github.com/users/tspiteri/gists{/gist_id}", "starred_url": "https://api.github.com/users/tspiteri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tspiteri/subscriptions", "organizations_url": "https://api.github.com/users/tspiteri/orgs", "repos_url": "https://api.github.com/users/tspiteri/repos", "events_url": "https://api.github.com/users/tspiteri/events{/privacy}", "received_events_url": "https://api.github.com/users/tspiteri/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7eb64b86ce44cc1828dd176a8b981e37ea08fc38", "url": "https://api.github.com/repos/rust-lang/rust/commits/7eb64b86ce44cc1828dd176a8b981e37ea08fc38", "html_url": "https://github.com/rust-lang/rust/commit/7eb64b86ce44cc1828dd176a8b981e37ea08fc38"}], "stats": {"total": 34, "additions": 15, "deletions": 19}, "files": [{"sha": "732a02e8c427dd6a0bdc36e3c31f334c052bd295", "filename": "src/libcore/num/bignum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d6bd0536aed290f4fe80b42820fcf2463d2f8b3/src%2Flibcore%2Fnum%2Fbignum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d6bd0536aed290f4fe80b42820fcf2463d2f8b3/src%2Flibcore%2Fnum%2Fbignum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fbignum.rs?ref=9d6bd0536aed290f4fe80b42820fcf2463d2f8b3", "patch": "@@ -114,7 +114,7 @@ macro_rules! define_bignum {\n         /// copying it recklessly may result in the performance hit.\n         /// Thus this is intentionally not `Copy`.\n         ///\n-        /// All operations available to bignums panic in the case of over/underflows.\n+        /// All operations available to bignums panic in the case of overflows.\n         /// The caller is responsible to use large enough bignum types.\n         pub struct $name {\n             /// One plus the offset to the maximum \"digit\" in use."}, {"sha": "10570b5adf32dfe90dede283f38ccd2bed0b586a", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9d6bd0536aed290f4fe80b42820fcf2463d2f8b3/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d6bd0536aed290f4fe80b42820fcf2463d2f8b3/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=9d6bd0536aed290f4fe80b42820fcf2463d2f8b3", "patch": "@@ -402,7 +402,7 @@ macro_rules! int_impl {\n         }\n \n         /// Checked integer subtraction. Computes `self - rhs`, returning\n-        /// `None` if underflow occurred.\n+        /// `None` if overflow occurred.\n         ///\n         /// # Examples\n         ///\n@@ -420,7 +420,7 @@ macro_rules! int_impl {\n         }\n \n         /// Checked integer multiplication. Computes `self * rhs`, returning\n-        /// `None` if underflow or overflow occurred.\n+        /// `None` if overflow occurred.\n         ///\n         /// # Examples\n         ///\n@@ -438,7 +438,7 @@ macro_rules! int_impl {\n         }\n \n         /// Checked integer division. Computes `self / rhs`, returning `None`\n-        /// if `rhs == 0` or the operation results in underflow or overflow.\n+        /// if `rhs == 0` or the operation results in overflow.\n         ///\n         /// # Examples\n         ///\n@@ -460,7 +460,7 @@ macro_rules! int_impl {\n         }\n \n         /// Checked integer remainder. Computes `self % rhs`, returning `None`\n-        /// if `rhs == 0` or the operation results in underflow or overflow.\n+        /// if `rhs == 0` or the operation results in overflow.\n         ///\n         /// # Examples\n         ///\n@@ -1598,7 +1598,7 @@ macro_rules! uint_impl {\n         }\n \n         /// Checked integer subtraction. Computes `self - rhs`, returning\n-        /// `None` if underflow occurred.\n+        /// `None` if overflow occurred.\n         ///\n         /// # Examples\n         ///\n@@ -1616,7 +1616,7 @@ macro_rules! uint_impl {\n         }\n \n         /// Checked integer multiplication. Computes `self * rhs`, returning\n-        /// `None` if underflow or overflow occurred.\n+        /// `None` if overflow occurred.\n         ///\n         /// # Examples\n         ///\n@@ -1634,7 +1634,7 @@ macro_rules! uint_impl {\n         }\n \n         /// Checked integer division. Computes `self / rhs`, returning `None`\n-        /// if `rhs == 0` or the operation results in underflow or overflow.\n+        /// if `rhs == 0` or the operation results in overflow.\n         ///\n         /// # Examples\n         ///\n@@ -1654,7 +1654,7 @@ macro_rules! uint_impl {\n         }\n \n         /// Checked integer remainder. Computes `self % rhs`, returning `None`\n-        /// if `rhs == 0` or the operation results in underflow or overflow.\n+        /// if `rhs == 0` or the operation results in overflow.\n         ///\n         /// # Examples\n         ///"}, {"sha": "85bdeae442bf7991aaf36e3a1331fb16dd4a88af", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9d6bd0536aed290f4fe80b42820fcf2463d2f8b3/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d6bd0536aed290f4fe80b42820fcf2463d2f8b3/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=9d6bd0536aed290f4fe80b42820fcf2463d2f8b3", "patch": "@@ -581,8 +581,7 @@ impl<T: ?Sized> *const T {\n     /// * Both the starting and resulting pointer must be either in bounds or one\n     ///   byte past the end of an allocated object.\n     ///\n-    /// * The computed offset, **in bytes**, cannot overflow or underflow an\n-    ///   `isize`.\n+    /// * The computed offset, **in bytes**, cannot overflow an `isize`.\n     ///\n     /// * The offset being in bounds cannot rely on \"wrapping around\" the address\n     ///   space. That is, the infinite-precision sum, **in bytes** must fit in a usize.\n@@ -714,8 +713,7 @@ impl<T: ?Sized> *const T {\n     /// * Both the starting and resulting pointer must be either in bounds or one\n     ///   byte past the end of an allocated object.\n     ///\n-    /// * The computed offset, **in bytes**, cannot overflow or underflow an\n-    ///   `isize`.\n+    /// * The computed offset, **in bytes**, cannot overflow an `isize`.\n     ///\n     /// * The offset being in bounds cannot rely on \"wrapping around\" the address\n     ///   space. That is, the infinite-precision sum must fit in a `usize`.\n@@ -1219,8 +1217,7 @@ impl<T: ?Sized> *mut T {\n     /// * Both the starting and resulting pointer must be either in bounds or one\n     ///   byte past the end of an allocated object.\n     ///\n-    /// * The computed offset, **in bytes**, cannot overflow or underflow an\n-    ///   `isize`.\n+    /// * The computed offset, **in bytes**, cannot overflow an `isize`.\n     ///\n     /// * The offset being in bounds cannot rely on \"wrapping around\" the address\n     ///   space. That is, the infinite-precision sum, **in bytes** must fit in a usize.\n@@ -1419,8 +1416,7 @@ impl<T: ?Sized> *mut T {\n     /// * Both the starting and resulting pointer must be either in bounds or one\n     ///   byte past the end of an allocated object.\n     ///\n-    /// * The computed offset, **in bytes**, cannot overflow or underflow an\n-    ///   `isize`.\n+    /// * The computed offset, **in bytes**, cannot overflow an `isize`.\n     ///\n     /// * The offset being in bounds cannot rely on \"wrapping around\" the address\n     ///   space. That is, the infinite-precision sum must fit in a `usize`."}, {"sha": "8308ab48d9ceb47ce3e6081b2c85da931d8245b6", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d6bd0536aed290f4fe80b42820fcf2463d2f8b3/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d6bd0536aed290f4fe80b42820fcf2463d2f8b3/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=9d6bd0536aed290f4fe80b42820fcf2463d2f8b3", "patch": "@@ -263,7 +263,7 @@ impl<R: Seek> Seek for BufReader<R> {\n     /// See `std::io::Seek` for more details.\n     ///\n     /// Note: In the edge case where you're seeking with `SeekFrom::Current(n)`\n-    /// where `n` minus the internal buffer length underflows an `i64`, two\n+    /// where `n` minus the internal buffer length overflows an `i64`, two\n     /// seeks will be performed instead of one. If the second seek returns\n     /// `Err`, the underlying reader will be left at the same position it would\n     /// have if you seeked to `SeekFrom::Current(0)`."}, {"sha": "15ddb62bab5c8635c39e8932da0056fd6b9c9f23", "filename": "src/libstd/time/duration.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d6bd0536aed290f4fe80b42820fcf2463d2f8b3/src%2Flibstd%2Ftime%2Fduration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d6bd0536aed290f4fe80b42820fcf2463d2f8b3/src%2Flibstd%2Ftime%2Fduration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime%2Fduration.rs?ref=9d6bd0536aed290f4fe80b42820fcf2463d2f8b3", "patch": "@@ -290,7 +290,7 @@ impl Duration {\n     }\n \n     /// Checked `Duration` subtraction. Computes `self - other`, returning [`None`]\n-    /// if the result would be negative or if underflow occurred.\n+    /// if the result would be negative or if overflow occurred.\n     ///\n     /// [`None`]: ../../std/option/enum.Option.html#variant.None\n     ///"}]}