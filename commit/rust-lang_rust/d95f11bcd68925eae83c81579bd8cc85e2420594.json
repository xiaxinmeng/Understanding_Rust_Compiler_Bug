{"sha": "d95f11bcd68925eae83c81579bd8cc85e2420594", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5NWYxMWJjZDY4OTI1ZWFlODNjODE1NzliZDhjYzg1ZTI0MjA1OTQ=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-11-11T21:40:09Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-11-26T20:32:27Z"}, "message": "Remove ForeignMod struct.", "tree": {"sha": "7a0380daa7b83a47b77d34d507c7f5fc225f217f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a0380daa7b83a47b77d34d507c7f5fc225f217f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d95f11bcd68925eae83c81579bd8cc85e2420594", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d95f11bcd68925eae83c81579bd8cc85e2420594", "html_url": "https://github.com/rust-lang/rust/commit/d95f11bcd68925eae83c81579bd8cc85e2420594", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d95f11bcd68925eae83c81579bd8cc85e2420594/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6827839c0b3e81f07c522fc28b5a2406025acaf", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6827839c0b3e81f07c522fc28b5a2406025acaf", "html_url": "https://github.com/rust-lang/rust/commit/f6827839c0b3e81f07c522fc28b5a2406025acaf"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "4678f6872f37ce64887bab2d16fbab1639946850", "filename": "clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d95f11bcd68925eae83c81579bd8cc85e2420594/clippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95f11bcd68925eae83c81579bd8cc85e2420594/clippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_doc.rs?ref=d95f11bcd68925eae83c81579bd8cc85e2420594", "patch": "@@ -147,7 +147,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n             hir::ItemKind::Union(..) => \"a union\",\n             hir::ItemKind::OpaqueTy(..) => \"an existential type\",\n             hir::ItemKind::ExternCrate(..)\n-            | hir::ItemKind::ForeignMod(..)\n+            | hir::ItemKind::ForeignMod { .. }\n             | hir::ItemKind::GlobalAsm(..)\n             | hir::ItemKind::Impl { .. }\n             | hir::ItemKind::Use(..) => return,"}, {"sha": "913d9daff46fd49a680f17ac9f2f207531660bba", "filename": "clippy_lints/src/missing_inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d95f11bcd68925eae83c81579bd8cc85e2420594/clippy_lints%2Fsrc%2Fmissing_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95f11bcd68925eae83c81579bd8cc85e2420594/clippy_lints%2Fsrc%2Fmissing_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_inline.rs?ref=d95f11bcd68925eae83c81579bd8cc85e2420594", "patch": "@@ -125,7 +125,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingInline {\n             | hir::ItemKind::Union(..)\n             | hir::ItemKind::OpaqueTy(..)\n             | hir::ItemKind::ExternCrate(..)\n-            | hir::ItemKind::ForeignMod(..)\n+            | hir::ItemKind::ForeignMod { .. }\n             | hir::ItemKind::Impl { .. }\n             | hir::ItemKind::Use(..) => {},\n         };"}, {"sha": "8f0ef9150d4503824677526c68155c243d617b97", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d95f11bcd68925eae83c81579bd8cc85e2420594/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95f11bcd68925eae83c81579bd8cc85e2420594/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=d95f11bcd68925eae83c81579bd8cc85e2420594", "patch": "@@ -395,7 +395,7 @@ fn print_item(cx: &LateContext<'_>, item: &hir::Item<'_>) {\n             println!(\"function of type {:#?}\", item_ty);\n         },\n         hir::ItemKind::Mod(..) => println!(\"module\"),\n-        hir::ItemKind::ForeignMod(ref fm) => println!(\"foreign module with abi: {}\", fm.abi),\n+        hir::ItemKind::ForeignMod { abi, .. } => println!(\"foreign module with abi: {}\", abi),\n         hir::ItemKind::GlobalAsm(ref asm) => println!(\"global asm: {:?}\", asm),\n         hir::ItemKind::TyAlias(..) => {\n             println!(\"type alias for {:?}\", cx.tcx.type_of(did));"}]}