{"sha": "9b6791078a580acdd05246f00f900cbc079bb95e", "node_id": "C_kwDOAAsO6NoAKDliNjc5MTA3OGE1ODBhY2RkMDUyNDZmMDBmOTAwY2JjMDc5YmI5NWU", "commit": {"author": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2022-10-21T00:40:35Z"}, "committer": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2022-10-21T00:40:35Z"}, "message": "Add a missing precondition check", "tree": {"sha": "505a3aec81b1b911aaea01244a7a8e9feba712ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/505a3aec81b1b911aaea01244a7a8e9feba712ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b6791078a580acdd05246f00f900cbc079bb95e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b6791078a580acdd05246f00f900cbc079bb95e", "html_url": "https://github.com/rust-lang/rust/commit/9b6791078a580acdd05246f00f900cbc079bb95e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b6791078a580acdd05246f00f900cbc079bb95e/comments", "author": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ffa67d7309047ff47b9c624ba4061fb8c004c31", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ffa67d7309047ff47b9c624ba4061fb8c004c31", "html_url": "https://github.com/rust-lang/rust/commit/5ffa67d7309047ff47b9c624ba4061fb8c004c31"}], "stats": {"total": 6, "additions": 5, "deletions": 1}, "files": [{"sha": "7264d57ba6aed02a040518b404bd67d8d984bbb8", "filename": "library/core/src/ptr/non_null.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b6791078a580acdd05246f00f900cbc079bb95e/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b6791078a580acdd05246f00f900cbc079bb95e/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs?ref=9b6791078a580acdd05246f00f900cbc079bb95e", "patch": "@@ -2,6 +2,7 @@ use crate::cmp::Ordering;\n use crate::convert::From;\n use crate::fmt;\n use crate::hash;\n+use crate::intrinsics::assert_unsafe_precondition;\n use crate::marker::Unsize;\n use crate::mem::{self, MaybeUninit};\n use crate::num::NonZeroUsize;\n@@ -195,7 +196,10 @@ impl<T: ?Sized> NonNull<T> {\n     #[inline]\n     pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {\n         // SAFETY: the caller must guarantee that `ptr` is non-null.\n-        unsafe { NonNull { pointer: ptr as _ } }\n+        unsafe {\n+            assert_unsafe_precondition!([T: ?Sized](ptr: *mut T) => !ptr.is_null());\n+            NonNull { pointer: ptr as _ }\n+        }\n     }\n \n     /// Creates a new `NonNull` if `ptr` is non-null."}]}