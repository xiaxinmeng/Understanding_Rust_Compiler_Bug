{"sha": "abf4d8babfebcdad66599c50bf5b6ae3e5bcbeb5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiZjRkOGJhYmZlYmNkYWQ2NjU5OWM1MGJmNWI2YWUzZTViY2JlYjU=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-02-26T13:34:06Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-03-23T22:58:01Z"}, "message": "When picking a candidate, consider the unstable ones last.\n\nIf there is potential ambiguity after stabilizing those candidates, a\nwarning will be emitted.", "tree": {"sha": "dd6d8262326e6ced02103facdcb7680858022a0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd6d8262326e6ced02103facdcb7680858022a0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abf4d8babfebcdad66599c50bf5b6ae3e5bcbeb5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlq1hnoACgkQ/vbIBR0O\nATxzgBAAxRk5sxd1QoP+ohd1rjhg7dSRXVkVRLz7pmhyZiMOTXTzVjpdxey5SVaZ\nQ7uZj1/tP4cCDfpn2K6RgigUASssOxgb6DaVVsv9LCIlD2cA/U6s8rlywF/5lQjm\nWGTzYe7lSd1Jq7xuY+Ifowcuu3Q+CdqgMHodrAAKBT4bcBVvgL3QTqEBFZMtpvrZ\nb3PRGazpwo5KIO91m5yl5q/jThUglFwS5iCP1yoSqsWqnpuKjHtGOMVgq/g4Lm1+\n0H5RDs4HzKBfutn/w8TIWvVIGky5swq7TqZBjOIC6Tpqr3t4JQG1ZLamqqQJ7gI4\n+V0eTRzFRWHECkkfS9ZDj16Aesrg+peMzZ+zDP0kTkFVnKbICjp4j5AuAf5bA2Nu\nmjjlaUn0RpF6pBWRKeUrSkGCFWwgX3mJ9QVG1CkDfeVDqVczhXZ9TdjuyPzY8spL\nIRBSkbK5uYwZ2fwcRHBhaqJ524x0SM3UCquF17VrvhEi+KW6kJfAZ/fIU89VIkBB\n7fLmSyotLFe9qsZcf0ALCYhqqbWZbTKv5+Vtqtgbz+OTAT4xi+UwHmsvSgcxa3DL\nKV12idjtmQzWmXR+oE9xqAr4zHcJwouVgAlwvsCp2y9pnHaKzJgMuI1DoD7WreMv\nIoHK0tZ6DC9DHK33o2M3scJ39ujNP0PbVrxCTrUCI2UdqkmqZGc=\n=8j6X\n-----END PGP SIGNATURE-----", "payload": "tree dd6d8262326e6ced02103facdcb7680858022a0b\nparent 1731bf8049258e63257f6dde48b375acafaeb4ef\nauthor kennytm <kennytm@gmail.com> 1519652046 +0800\ncommitter kennytm <kennytm@gmail.com> 1521845881 +0800\n\nWhen picking a candidate, consider the unstable ones last.\n\nIf there is potential ambiguity after stabilizing those candidates, a\nwarning will be emitted.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abf4d8babfebcdad66599c50bf5b6ae3e5bcbeb5", "html_url": "https://github.com/rust-lang/rust/commit/abf4d8babfebcdad66599c50bf5b6ae3e5bcbeb5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abf4d8babfebcdad66599c50bf5b6ae3e5bcbeb5/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1731bf8049258e63257f6dde48b375acafaeb4ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/1731bf8049258e63257f6dde48b375acafaeb4ef", "html_url": "https://github.com/rust-lang/rust/commit/1731bf8049258e63257f6dde48b375acafaeb4ef"}], "stats": {"total": 358, "additions": 317, "deletions": 41}, "files": [{"sha": "97cfcf0f60795a07080b82d196a545aee8e14db9", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/abf4d8babfebcdad66599c50bf5b6ae3e5bcbeb5/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abf4d8babfebcdad66599c50bf5b6ae3e5bcbeb5/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=abf4d8babfebcdad66599c50bf5b6ae3e5bcbeb5", "patch": "@@ -260,6 +260,12 @@ declare_lint! {\n     \"floating-point literals cannot be used in patterns\"\n }\n \n+declare_lint! {\n+    pub UNSTABLE_NAME_COLLISION,\n+    Warn,\n+    \"detects name collision with an existing but unstable method\"\n+}\n+\n /// Does nothing as a lint pass, but registers some `Lint`s\n /// which are used by other parts of the compiler.\n #[derive(Copy, Clone)]\n@@ -307,7 +313,8 @@ impl LintPass for HardwiredLints {\n             SINGLE_USE_LIFETIME,\n             TYVAR_BEHIND_RAW_POINTER,\n             ELIDED_LIFETIME_IN_PATH,\n-            BARE_TRAIT_OBJECT\n+            BARE_TRAIT_OBJECT,\n+            UNSTABLE_NAME_COLLISION,\n         )\n     }\n }"}, {"sha": "9193dc086fdbb4ecba1ac341a99e612cc9cdb381", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 52, "deletions": 20, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/abf4d8babfebcdad66599c50bf5b6ae3e5bcbeb5/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abf4d8babfebcdad66599c50bf5b6ae3e5bcbeb5/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=abf4d8babfebcdad66599c50bf5b6ae3e5bcbeb5", "patch": "@@ -474,6 +474,22 @@ struct Checker<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n }\n \n+/// Result of `TyCtxt::eval_stability`.\n+pub enum EvalResult {\n+    /// We can use the item because it is stable or we provided the\n+    /// corresponding feature gate.\n+    Allow,\n+    /// We cannot use the item because it is unstable and we did not provide the\n+    /// corresponding feature gate.\n+    Deny {\n+        feature: Symbol,\n+        reason: Option<Symbol>,\n+        issue: u32,\n+    },\n+    /// The item does not have the `#[stable]` or `#[unstable]` marker assigned.\n+    Unmarked,\n+}\n+\n impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     // (See issue #38412)\n     fn skip_stability_check_due_to_privacy(self, mut def_id: DefId) -> bool {\n@@ -509,11 +525,16 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    pub fn check_stability(self, def_id: DefId, id: NodeId, span: Span) {\n+    /// Evaluates the stability of an item.\n+    ///\n+    /// Returns `None` if the item is stable, or unstable but the corresponding `#![feature]` has\n+    /// been provided. Returns the tuple `Some((feature, reason, issue))` of the offending unstable\n+    /// feature otherwise.\n+    pub fn eval_stability(self, def_id: DefId, id: NodeId, span: Span) -> EvalResult {\n         if span.allows_unstable() {\n             debug!(\"stability: \\\n                     skipping span={:?} since it is internal\", span);\n-            return;\n+            return EvalResult::Allow;\n         }\n \n         let lint_deprecated = |def_id: DefId, note: Option<Symbol>| {\n@@ -549,7 +570,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             ..def_id\n         }).is_some();\n         if !is_staged_api {\n-            return;\n+            return EvalResult::Allow;\n         }\n \n         let stability = self.lookup_stability(def_id);\n@@ -566,18 +587,18 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         // Only the cross-crate scenario matters when checking unstable APIs\n         let cross_crate = !def_id.is_local();\n         if !cross_crate {\n-            return\n+            return EvalResult::Allow;\n         }\n \n         // Issue 38412: private items lack stability markers.\n         if self.skip_stability_check_due_to_privacy(def_id) {\n-            return\n+            return EvalResult::Allow;\n         }\n \n         match stability {\n-            Some(&Stability { level: attr::Unstable {ref reason, issue}, ref feature, .. }) => {\n-                if self.stability().active_features.contains(feature) {\n-                    return\n+            Some(&Stability { level: attr::Unstable { reason, issue }, feature, .. }) => {\n+                if self.stability().active_features.contains(&feature) {\n+                    return EvalResult::Allow;\n                 }\n \n                 // When we're compiling the compiler itself we may pull in\n@@ -589,19 +610,34 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                 // the `-Z force-unstable-if-unmarked` flag present (we're\n                 // compiling a compiler crate), then let this missing feature\n                 // annotation slide.\n-                if *feature == \"rustc_private\" && issue == 27812 {\n+                if feature == \"rustc_private\" && issue == 27812 {\n                     if self.sess.opts.debugging_opts.force_unstable_if_unmarked {\n-                        return\n+                        return EvalResult::Allow;\n                     }\n                 }\n \n-                let msg = match *reason {\n-                    Some(ref r) => format!(\"use of unstable library feature '{}': {}\",\n-                                           feature.as_str(), &r),\n+                EvalResult::Deny { feature, reason, issue }\n+            }\n+            Some(_) => {\n+                // Stable APIs are always ok to call and deprecated APIs are\n+                // handled by the lint emitting logic above.\n+                EvalResult::Allow\n+            }\n+            None => {\n+                EvalResult::Unmarked\n+            }\n+        }\n+    }\n+\n+    pub fn check_stability(self, def_id: DefId, id: NodeId, span: Span) {\n+        match self.eval_stability(def_id, id, span) {\n+            EvalResult::Allow => {}\n+            EvalResult::Deny { feature, reason, issue } => {\n+                let msg = match reason {\n+                    Some(r) => format!(\"use of unstable library feature '{}': {}\", feature, r),\n                     None => format!(\"use of unstable library feature '{}'\", &feature)\n                 };\n \n-\n                 let msp: MultiSpan = span.into();\n                 let cm = &self.sess.parse_sess.codemap();\n                 let span_key = msp.primary_span().and_then(|sp: Span|\n@@ -624,12 +660,8 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                                      GateIssue::Library(Some(issue)), &msg);\n                 }\n             }\n-            Some(_) => {\n-                // Stable APIs are always ok to call and deprecated APIs are\n-                // handled by the lint emitting logic above.\n-            }\n-            None => {\n-                span_bug!(span, \"encountered unmarked API\");\n+            EvalResult::Unmarked => {\n+                span_bug!(span, \"encountered unmarked API: {:?}\", def_id);\n             }\n         }\n     }"}, {"sha": "fad21ecef4d8eb92d143c8112d5092148662b81b", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/abf4d8babfebcdad66599c50bf5b6ae3e5bcbeb5/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abf4d8babfebcdad66599c50bf5b6ae3e5bcbeb5/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=abf4d8babfebcdad66599c50bf5b6ae3e5bcbeb5", "patch": "@@ -273,7 +273,15 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n             id: LintId::of(TYVAR_BEHIND_RAW_POINTER),\n             reference: \"issue #46906 <https://github.com/rust-lang/rust/issues/46906>\",\n             edition: Some(Edition::Edition2018),\n-        }\n+        },\n+        FutureIncompatibleInfo {\n+            id: LintId::of(UNSTABLE_NAME_COLLISION),\n+            reference: \"pr #48552 <https://github.com/rust-lang/rust/pull/48552>\",\n+            edition: None,\n+            // FIXME: create a proper tracking issue.\n+            // Note: this item represents future incompatibility of all unstable functions in the\n+            //       standard library, and thus should never be removed or changed to an error.\n+        },\n         ]);\n \n     // Register renamed and removed lints"}, {"sha": "738e1ee87c72fd2caab4491ecb07753f8e77ad53", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 94, "deletions": 19, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/abf4d8babfebcdad66599c50bf5b6ae3e5bcbeb5/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abf4d8babfebcdad66599c50bf5b6ae3e5bcbeb5/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=abf4d8babfebcdad66599c50bf5b6ae3e5bcbeb5", "patch": "@@ -23,9 +23,10 @@ use rustc::ty::{self, Ty, ToPolyTraitRef, ToPredicate, TraitRef, TypeFoldable};\n use rustc::infer::type_variable::TypeVariableOrigin;\n use rustc::util::nodemap::FxHashSet;\n use rustc::infer::{self, InferOk};\n+use rustc::middle::stability;\n use syntax::ast;\n use syntax::util::lev_distance::{lev_distance, find_best_match_for_name};\n-use syntax_pos::Span;\n+use syntax_pos::{Span, symbol::Symbol};\n use rustc::hir;\n use rustc::lint;\n use std::mem;\n@@ -937,30 +938,59 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n         debug!(\"pick_method(self_ty={})\", self.ty_to_string(self_ty));\n \n         let mut possibly_unsatisfied_predicates = Vec::new();\n-\n-        debug!(\"searching inherent candidates\");\n-        if let Some(pick) = self.consider_candidates(self_ty,\n-                                                     &self.inherent_candidates,\n-                                                     &mut possibly_unsatisfied_predicates) {\n-            return Some(pick);\n+        let mut unstable_candidates = Vec::new();\n+\n+        for (kind, candidates) in &[\n+            (\"inherent\", &self.inherent_candidates),\n+            (\"extension\", &self.extension_candidates),\n+        ] {\n+            debug!(\"searching {} candidates\", kind);\n+            let res = self.consider_candidates(\n+                self_ty,\n+                candidates.iter(),\n+                &mut possibly_unsatisfied_predicates,\n+                Some(&mut unstable_candidates),\n+            );\n+            if let Some(pick) = res {\n+                if !unstable_candidates.is_empty() && !self_ty.is_ty_var() {\n+                    if let Ok(p) = &pick {\n+                        // Emit a lint if there are unstable candidates alongside the stable ones.\n+                        //\n+                        // Note, we suppress warning if `self_ty` is TyVar (`_`), since every\n+                        // possible candidates of every type will be considered, which leads to\n+                        // bogus ambiguity like `str::rsplit` vs `[_]::rsplit`. This condition is\n+                        // seen in `src/test/compile-fail/occurs-check-2.rs`.\n+                        self.emit_unstable_name_collision_hint(p, &unstable_candidates);\n+                    }\n+                }\n+                return Some(pick);\n+            }\n         }\n \n-        debug!(\"searching extension candidates\");\n-        let res = self.consider_candidates(self_ty,\n-                                           &self.extension_candidates,\n-                                           &mut possibly_unsatisfied_predicates);\n-        if let None = res {\n+        debug!(\"searching unstable candidates\");\n+        let res = self.consider_candidates(\n+            self_ty,\n+            unstable_candidates.into_iter().map(|(c, _)| c),\n+            &mut possibly_unsatisfied_predicates,\n+            None,\n+        );\n+        if res.is_none() {\n             self.unsatisfied_predicates.extend(possibly_unsatisfied_predicates);\n         }\n         res\n     }\n \n-    fn consider_candidates(&self,\n-                           self_ty: Ty<'tcx>,\n-                           probes: &[Candidate<'tcx>],\n-                           possibly_unsatisfied_predicates: &mut Vec<TraitRef<'tcx>>)\n-                           -> Option<PickResult<'tcx>> {\n-        let mut applicable_candidates: Vec<_> = probes.iter()\n+    fn consider_candidates<'b, ProbesIter>(\n+        &self,\n+        self_ty: Ty<'tcx>,\n+        probes: ProbesIter,\n+        possibly_unsatisfied_predicates: &mut Vec<TraitRef<'tcx>>,\n+        unstable_candidates: Option<&mut Vec<(&'b Candidate<'tcx>, Symbol)>>,\n+    ) -> Option<PickResult<'tcx>>\n+    where\n+        ProbesIter: Iterator<Item = &'b Candidate<'tcx>> + Clone,\n+    {\n+        let mut applicable_candidates: Vec<_> = probes.clone()\n             .map(|probe| {\n                 (probe, self.consider_probe(self_ty, probe, possibly_unsatisfied_predicates))\n             })\n@@ -975,8 +1005,20 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n             }\n         }\n \n+        if let Some(uc) = unstable_candidates {\n+            applicable_candidates.retain(|&(p, _)| {\n+                if let stability::EvalResult::Deny { feature, .. } =\n+                    self.tcx.eval_stability(p.item.def_id, ast::DUMMY_NODE_ID, self.span)\n+                {\n+                    uc.push((p, feature));\n+                    return false;\n+                }\n+                true\n+            });\n+        }\n+\n         if applicable_candidates.len() > 1 {\n-            let sources = probes.iter()\n+            let sources = probes\n                 .map(|p| self.candidate_source(p, self_ty))\n                 .collect();\n             return Some(Err(MethodError::Ambiguity(sources)));\n@@ -991,6 +1033,39 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n         })\n     }\n \n+    fn emit_unstable_name_collision_hint(\n+        &self,\n+        stable_pick: &Pick,\n+        unstable_candidates: &[(&Candidate<'tcx>, Symbol)],\n+    ) {\n+        let mut diag = self.tcx.struct_span_lint_node(\n+            lint::builtin::UNSTABLE_NAME_COLLISION,\n+            self.fcx.body_id,\n+            self.span,\n+            \"a method with this name will be added to the standard library in the future\",\n+        );\n+\n+        // FIXME: This should be a `span_suggestion` instead of `help`. However `self.span` only\n+        // highlights the method name, so we can't use it. Also consider reusing the code from\n+        // `report_method_error()`.\n+        diag.help(&format!(\n+            \"call with fully qualified syntax `{}(...)` to keep using the current method\",\n+            self.tcx.item_path_str(stable_pick.item.def_id),\n+        ));\n+\n+        if ::rustc::session::config::nightly_options::is_nightly_build() {\n+            for (candidate, feature) in unstable_candidates {\n+                diag.note(&format!(\n+                    \"add #![feature({})] to the crate attributes to enable `{}`\",\n+                    feature,\n+                    self.tcx.item_path_str(candidate.item.def_id),\n+                ));\n+            }\n+        }\n+\n+        diag.emit();\n+    }\n+\n     fn select_trait_candidate(&self, trait_ref: ty::TraitRef<'tcx>)\n                               -> traits::SelectionResult<'tcx, traits::Selection<'tcx>>\n     {"}, {"sha": "b73346e6332ca12402b94e281b452383001919fd", "filename": "src/test/ui/auxiliary/inference_unstable_iterator.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/abf4d8babfebcdad66599c50bf5b6ae3e5bcbeb5/src%2Ftest%2Fui%2Fauxiliary%2Finference_unstable_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abf4d8babfebcdad66599c50bf5b6ae3e5bcbeb5/src%2Ftest%2Fui%2Fauxiliary%2Finference_unstable_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Finference_unstable_iterator.rs?ref=abf4d8babfebcdad66599c50bf5b6ae3e5bcbeb5", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(staged_api)]\n+\n+#![stable(feature = \"ipu_iterator\", since = \"1.0.0\")]\n+\n+#[stable(feature = \"ipu_iterator\", since = \"1.0.0\")]\n+pub trait IpuIterator {\n+    #[unstable(feature = \"ipu_flatten\", issue = \"99999\")]\n+    fn ipu_flatten(&self) -> u32 {\n+        0\n+    }\n+}\n+\n+#[stable(feature = \"ipu_iterator\", since = \"1.0.0\")]\n+impl IpuIterator for char {}"}, {"sha": "2ad264ee3d82fbc786d89bfc3d2f2f41b77f132b", "filename": "src/test/ui/auxiliary/inference_unstable_itertools.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/abf4d8babfebcdad66599c50bf5b6ae3e5bcbeb5/src%2Ftest%2Fui%2Fauxiliary%2Finference_unstable_itertools.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abf4d8babfebcdad66599c50bf5b6ae3e5bcbeb5/src%2Ftest%2Fui%2Fauxiliary%2Finference_unstable_itertools.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Finference_unstable_itertools.rs?ref=abf4d8babfebcdad66599c50bf5b6ae3e5bcbeb5", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub trait IpuItertools {\n+    fn ipu_flatten(&self) -> u32 {\n+        1\n+    }\n+}\n+\n+impl IpuItertools for char {}"}, {"sha": "525fda33955a3ea200f3f02cd4637c25e4bc2b81", "filename": "src/test/ui/inference_unstable.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/abf4d8babfebcdad66599c50bf5b6ae3e5bcbeb5/src%2Ftest%2Fui%2Finference_unstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abf4d8babfebcdad66599c50bf5b6ae3e5bcbeb5/src%2Ftest%2Fui%2Finference_unstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference_unstable.rs?ref=abf4d8babfebcdad66599c50bf5b6ae3e5bcbeb5", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Ensures #[unstable] functions without opting in the corresponding #![feature]\n+// will not break inference.\n+\n+// aux-build:inference_unstable_iterator.rs\n+// aux-build:inference_unstable_itertools.rs\n+// run-pass\n+\n+extern crate inference_unstable_iterator;\n+extern crate inference_unstable_itertools;\n+\n+#[allow(unused_imports)]\n+use inference_unstable_iterator::IpuIterator;\n+use inference_unstable_itertools::IpuItertools;\n+\n+fn main() {\n+    assert_eq!('x'.ipu_flatten(), 1);\n+    //~^ WARN a method with this name will be added to the standard library in the future\n+    //~^^ WARN it will become a hard error in a future release\n+}"}, {"sha": "a5cf4d6dff3b1651a98b726b7e94dec3c4908843", "filename": "src/test/ui/inference_unstable.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/abf4d8babfebcdad66599c50bf5b6ae3e5bcbeb5/src%2Ftest%2Fui%2Finference_unstable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abf4d8babfebcdad66599c50bf5b6ae3e5bcbeb5/src%2Ftest%2Fui%2Finference_unstable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference_unstable.stderr?ref=abf4d8babfebcdad66599c50bf5b6ae3e5bcbeb5", "patch": "@@ -0,0 +1,12 @@\n+warning: a method with this name will be added to the standard library in the future\n+  --> $DIR/inference_unstable.rs:26:20\n+   |\n+LL |     assert_eq!('x'.ipu_flatten(), 1);\n+   |                    ^^^^^^^^^^^\n+   |\n+   = note: #[warn(unstable_name_collision)] on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see pr #48552 <https://github.com/rust-lang/rust/pull/48552>\n+   = help: call with fully qualified syntax `inference_unstable_itertools::IpuItertools::ipu_flatten(...)` to keep using the current method\n+   = note: add #![feature(ipu_flatten)] to the crate attributes to enable `inference_unstable_iterator::IpuIterator::ipu_flatten`\n+"}, {"sha": "f5c49bedc7117a24653afb596f5b3f7642d5bc7d", "filename": "src/test/ui/inference_unstable_featured.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/abf4d8babfebcdad66599c50bf5b6ae3e5bcbeb5/src%2Ftest%2Fui%2Finference_unstable_featured.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abf4d8babfebcdad66599c50bf5b6ae3e5bcbeb5/src%2Ftest%2Fui%2Finference_unstable_featured.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference_unstable_featured.rs?ref=abf4d8babfebcdad66599c50bf5b6ae3e5bcbeb5", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// There should be E0034 \"multiple applicable items in scope\" if we opt-in for\n+// the feature.\n+\n+// aux-build:inference_unstable_iterator.rs\n+// aux-build:inference_unstable_itertools.rs\n+\n+#![feature(ipu_flatten)]\n+\n+extern crate inference_unstable_iterator;\n+extern crate inference_unstable_itertools;\n+\n+use inference_unstable_iterator::IpuIterator;\n+use inference_unstable_itertools::IpuItertools;\n+\n+fn main() {\n+    assert_eq!('x'.ipu_flatten(), 0);   //~ ERROR E0034\n+}"}, {"sha": "cb5f3623291b524c843fea0719f958dfae6d203c", "filename": "src/test/ui/inference_unstable_featured.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/abf4d8babfebcdad66599c50bf5b6ae3e5bcbeb5/src%2Ftest%2Fui%2Finference_unstable_featured.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abf4d8babfebcdad66599c50bf5b6ae3e5bcbeb5/src%2Ftest%2Fui%2Finference_unstable_featured.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference_unstable_featured.stderr?ref=abf4d8babfebcdad66599c50bf5b6ae3e5bcbeb5", "patch": "@@ -0,0 +1,12 @@\n+error[E0034]: multiple applicable items in scope\n+  --> $DIR/inference_unstable_featured.rs:26:20\n+   |\n+LL |     assert_eq!('x'.ipu_flatten(), 0);   //~ ERROR E0034\n+   |                    ^^^^^^^^^^^ multiple `ipu_flatten` found\n+   |\n+   = note: candidate #1 is defined in an impl of the trait `inference_unstable_iterator::IpuIterator` for the type `char`\n+   = note: candidate #2 is defined in an impl of the trait `inference_unstable_itertools::IpuItertools` for the type `char`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0034`."}, {"sha": "82ce4034ce269297f4b61ddaf871180823a3ec79", "filename": "src/test/ui/inference_unstable_forced.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/abf4d8babfebcdad66599c50bf5b6ae3e5bcbeb5/src%2Ftest%2Fui%2Finference_unstable_forced.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abf4d8babfebcdad66599c50bf5b6ae3e5bcbeb5/src%2Ftest%2Fui%2Finference_unstable_forced.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference_unstable_forced.rs?ref=abf4d8babfebcdad66599c50bf5b6ae3e5bcbeb5", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// If the unstable API is the only possible solution,\n+// still emit E0658 \"use of unstable library feature\".\n+\n+// aux-build:inference_unstable_iterator.rs\n+\n+extern crate inference_unstable_iterator;\n+\n+use inference_unstable_iterator::IpuIterator;\n+\n+fn main() {\n+    assert_eq!('x'.ipu_flatten(), 0);   //~ ERROR E0658\n+}"}, {"sha": "00eb81cd9a2398d6f3bcc5c1bebfcaa83115900b", "filename": "src/test/ui/inference_unstable_forced.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/abf4d8babfebcdad66599c50bf5b6ae3e5bcbeb5/src%2Ftest%2Fui%2Finference_unstable_forced.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abf4d8babfebcdad66599c50bf5b6ae3e5bcbeb5/src%2Ftest%2Fui%2Finference_unstable_forced.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference_unstable_forced.stderr?ref=abf4d8babfebcdad66599c50bf5b6ae3e5bcbeb5", "patch": "@@ -0,0 +1,11 @@\n+error[E0658]: use of unstable library feature 'ipu_flatten' (see issue #99999)\n+  --> $DIR/inference_unstable_forced.rs:21:20\n+   |\n+LL |     assert_eq!('x'.ipu_flatten(), 0);   //~ ERROR E0658\n+   |                    ^^^^^^^^^^^\n+   |\n+   = help: add #![feature(ipu_flatten)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}]}