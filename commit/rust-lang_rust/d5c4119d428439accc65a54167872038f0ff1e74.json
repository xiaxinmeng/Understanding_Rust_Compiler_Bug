{"sha": "d5c4119d428439accc65a54167872038f0ff1e74", "node_id": "C_kwDOAAsO6NoAKGQ1YzQxMTlkNDI4NDM5YWNjYzY1YTU0MTY3ODcyMDM4ZjBmZjFlNzQ", "commit": {"author": {"name": "BB", "email": "bartlomiejbetka@gmail.com", "date": "2021-12-28T16:45:43Z"}, "committer": {"name": "BB", "email": "bartlomiejbetka@gmail.com", "date": "2021-12-28T16:49:18Z"}, "message": "Fixed issues with to_radians and to_degrees lints", "tree": {"sha": "a78898a970d345f1b29ff13a193c092f6f546ed2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a78898a970d345f1b29ff13a193c092f6f546ed2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5c4119d428439accc65a54167872038f0ff1e74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5c4119d428439accc65a54167872038f0ff1e74", "html_url": "https://github.com/rust-lang/rust/commit/d5c4119d428439accc65a54167872038f0ff1e74", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5c4119d428439accc65a54167872038f0ff1e74/comments", "author": {"login": "ApamNapat", "id": 18621228, "node_id": "MDQ6VXNlcjE4NjIxMjI4", "avatar_url": "https://avatars.githubusercontent.com/u/18621228?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ApamNapat", "html_url": "https://github.com/ApamNapat", "followers_url": "https://api.github.com/users/ApamNapat/followers", "following_url": "https://api.github.com/users/ApamNapat/following{/other_user}", "gists_url": "https://api.github.com/users/ApamNapat/gists{/gist_id}", "starred_url": "https://api.github.com/users/ApamNapat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ApamNapat/subscriptions", "organizations_url": "https://api.github.com/users/ApamNapat/orgs", "repos_url": "https://api.github.com/users/ApamNapat/repos", "events_url": "https://api.github.com/users/ApamNapat/events{/privacy}", "received_events_url": "https://api.github.com/users/ApamNapat/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ApamNapat", "id": 18621228, "node_id": "MDQ6VXNlcjE4NjIxMjI4", "avatar_url": "https://avatars.githubusercontent.com/u/18621228?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ApamNapat", "html_url": "https://github.com/ApamNapat", "followers_url": "https://api.github.com/users/ApamNapat/followers", "following_url": "https://api.github.com/users/ApamNapat/following{/other_user}", "gists_url": "https://api.github.com/users/ApamNapat/gists{/gist_id}", "starred_url": "https://api.github.com/users/ApamNapat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ApamNapat/subscriptions", "organizations_url": "https://api.github.com/users/ApamNapat/orgs", "repos_url": "https://api.github.com/users/ApamNapat/repos", "events_url": "https://api.github.com/users/ApamNapat/events{/privacy}", "received_events_url": "https://api.github.com/users/ApamNapat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "adba132411824fdf45b8ada54ccdb7c4822b0355", "url": "https://api.github.com/repos/rust-lang/rust/commits/adba132411824fdf45b8ada54ccdb7c4822b0355", "html_url": "https://github.com/rust-lang/rust/commit/adba132411824fdf45b8ada54ccdb7c4822b0355"}], "stats": {"total": 68, "additions": 64, "deletions": 4}, "files": [{"sha": "f801d95563d195db52e6bbace1e3384cb3b3a7d6", "filename": "clippy_lints/src/floating_point_arithmetic.rs", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d5c4119d428439accc65a54167872038f0ff1e74/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5c4119d428439accc65a54167872038f0ff1e74/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs?ref=d5c4119d428439accc65a54167872038f0ff1e74", "patch": "@@ -654,26 +654,52 @@ fn check_radians(cx: &LateContext<'_>, expr: &Expr<'_>) {\n             if (F32(f32_consts::PI) == rvalue || F64(f64_consts::PI) == rvalue) &&\n                (F32(180_f32) == lvalue || F64(180_f64) == lvalue)\n             {\n+                let mut proposal = format!(\"{}.to_degrees()\", Sugg::hir(cx, mul_lhs, \"..\"));\n+                if_chain! {\n+                    if let ExprKind::Lit(ref literal) = mul_lhs.kind;\n+                    if let ast::LitKind::Float(ref value, float_type) = literal.node;\n+                    if float_type == ast::LitFloatType::Unsuffixed;\n+                    then {\n+                        if value.as_str().ends_with('.') {\n+                            proposal = format!(\"{}0_f64.to_degrees()\", Sugg::hir(cx, mul_lhs, \"..\"));\n+                        } else {\n+                            proposal = format!(\"{}_f64.to_degrees()\", Sugg::hir(cx, mul_lhs, \"..\"));\n+                        }\n+                    }\n+                }\n                 span_lint_and_sugg(\n                     cx,\n                     SUBOPTIMAL_FLOPS,\n                     expr.span,\n                     \"conversion to degrees can be done more accurately\",\n                     \"consider using\",\n-                    format!(\"{}.to_degrees()\", Sugg::hir(cx, mul_lhs, \"..\")),\n+                    proposal,\n                     Applicability::MachineApplicable,\n                 );\n             } else if\n                 (F32(180_f32) == rvalue || F64(180_f64) == rvalue) &&\n                 (F32(f32_consts::PI) == lvalue || F64(f64_consts::PI) == lvalue)\n             {\n+                let mut proposal = format!(\"{}.to_radians()\", Sugg::hir(cx, mul_lhs, \"..\"));\n+                if_chain! {\n+                    if let ExprKind::Lit(ref literal) = mul_lhs.kind;\n+                    if let ast::LitKind::Float(ref value, float_type) = literal.node;\n+                    if float_type == ast::LitFloatType::Unsuffixed;\n+                    then {\n+                        if value.as_str().ends_with('.') {\n+                            proposal = format!(\"{}0_f64.to_radians()\", Sugg::hir(cx, mul_lhs, \"..\"));\n+                        } else {\n+                            proposal = format!(\"{}_f64.to_radians()\", Sugg::hir(cx, mul_lhs, \"..\"));\n+                        }\n+                    }\n+                }\n                 span_lint_and_sugg(\n                     cx,\n                     SUBOPTIMAL_FLOPS,\n                     expr.span,\n                     \"conversion to radians can be done more accurately\",\n                     \"consider using\",\n-                    format!(\"{}.to_radians()\", Sugg::hir(cx, mul_lhs, \"..\")),\n+                    proposal,\n                     Applicability::MachineApplicable,\n                 );\n             }"}, {"sha": "ce91fe176c6fccec4fee57bc3339f7091e0e8827", "filename": "tests/ui/floating_point_rad.fixed", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d5c4119d428439accc65a54167872038f0ff1e74/tests%2Fui%2Ffloating_point_rad.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d5c4119d428439accc65a54167872038f0ff1e74/tests%2Fui%2Ffloating_point_rad.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_rad.fixed?ref=d5c4119d428439accc65a54167872038f0ff1e74", "patch": "@@ -11,7 +11,12 @@ pub const fn const_context() {\n fn main() {\n     let x = 3f32;\n     let _ = x.to_degrees();\n+    let _ = 90.0_f64.to_degrees();\n+    let _ = 90.5_f64.to_degrees();\n     let _ = x.to_radians();\n+    let _ = 90.0_f64.to_radians();\n+    let _ = 90.5_f64.to_radians();\n+    // let _ = 90.5 * 80. * std::f32::consts::PI / 180f32;\n     // Cases where the lint shouldn't be applied\n     let _ = x * 90f32 / std::f32::consts::PI;\n     let _ = x * std::f32::consts::PI / 90f32;"}, {"sha": "8f3234986148b70d302dd0f5ac04852feec89c16", "filename": "tests/ui/floating_point_rad.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d5c4119d428439accc65a54167872038f0ff1e74/tests%2Fui%2Ffloating_point_rad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5c4119d428439accc65a54167872038f0ff1e74/tests%2Fui%2Ffloating_point_rad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_rad.rs?ref=d5c4119d428439accc65a54167872038f0ff1e74", "patch": "@@ -11,7 +11,12 @@ pub const fn const_context() {\n fn main() {\n     let x = 3f32;\n     let _ = x * 180f32 / std::f32::consts::PI;\n+    let _ = 90. * 180f64 / std::f64::consts::PI;\n+    let _ = 90.5 * 180f64 / std::f64::consts::PI;\n     let _ = x * std::f32::consts::PI / 180f32;\n+    let _ = 90. * std::f32::consts::PI / 180f32;\n+    let _ = 90.5 * std::f32::consts::PI / 180f32;\n+    // let _ = 90.5 * 80. * std::f32::consts::PI / 180f32;\n     // Cases where the lint shouldn't be applied\n     let _ = x * 90f32 / std::f32::consts::PI;\n     let _ = x * std::f32::consts::PI / 90f32;"}, {"sha": "f12d3d23f3ab93fa38f53d5fc595857872e1d3a2", "filename": "tests/ui/floating_point_rad.stderr", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d5c4119d428439accc65a54167872038f0ff1e74/tests%2Fui%2Ffloating_point_rad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5c4119d428439accc65a54167872038f0ff1e74/tests%2Fui%2Ffloating_point_rad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_rad.stderr?ref=d5c4119d428439accc65a54167872038f0ff1e74", "patch": "@@ -6,11 +6,35 @@ LL |     let _ = x * 180f32 / std::f32::consts::PI;\n    |\n    = note: `-D clippy::suboptimal-flops` implied by `-D warnings`\n \n-error: conversion to radians can be done more accurately\n+error: conversion to degrees can be done more accurately\n   --> $DIR/floating_point_rad.rs:14:13\n    |\n+LL |     let _ = 90. * 180f64 / std::f64::consts::PI;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `90.0_f64.to_degrees()`\n+\n+error: conversion to degrees can be done more accurately\n+  --> $DIR/floating_point_rad.rs:15:13\n+   |\n+LL |     let _ = 90.5 * 180f64 / std::f64::consts::PI;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `90.5_f64.to_degrees()`\n+\n+error: conversion to radians can be done more accurately\n+  --> $DIR/floating_point_rad.rs:16:13\n+   |\n LL |     let _ = x * std::f32::consts::PI / 180f32;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.to_radians()`\n \n-error: aborting due to 2 previous errors\n+error: conversion to radians can be done more accurately\n+  --> $DIR/floating_point_rad.rs:17:13\n+   |\n+LL |     let _ = 90. * std::f32::consts::PI / 180f32;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `90.0_f64.to_radians()`\n+\n+error: conversion to radians can be done more accurately\n+  --> $DIR/floating_point_rad.rs:18:13\n+   |\n+LL |     let _ = 90.5 * std::f32::consts::PI / 180f32;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `90.5_f64.to_radians()`\n+\n+error: aborting due to 6 previous errors\n "}]}