{"sha": "5c5c8eb864e56ce905742b8e97df5506bba6aeef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjNWM4ZWI4NjRlNTZjZTkwNTc0MmI4ZTk3ZGY1NTA2YmJhNmFlZWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-07T14:46:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-07T14:46:30Z"}, "message": "Auto merge of #66927 - RalfJung:engines-dont-panic, r=oli-obk\n\nMiri core engine: use throw_ub instead of throw_panic\n\nSee https://github.com/rust-lang/rust/issues/66902 for context: panicking is not really an \"interpreter error\", but just part of a normal Rust execution. This is a first step towards removing the `InterpError::Panic` variant: the core Miri engine does not use it any more.\n\nConstProp and ConstEval still use it, though. This will be addressed in future PRs.\n\nFrom what I can tell, all the error messages this removes are actually duplicates.\n\nr? @oli-obk @wesleywiser", "tree": {"sha": "135e46e08b4e56b961a23d223fce2a2f5f04c4f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/135e46e08b4e56b961a23d223fce2a2f5f04c4f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c5c8eb864e56ce905742b8e97df5506bba6aeef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c5c8eb864e56ce905742b8e97df5506bba6aeef", "html_url": "https://github.com/rust-lang/rust/commit/5c5c8eb864e56ce905742b8e97df5506bba6aeef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c5c8eb864e56ce905742b8e97df5506bba6aeef/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a953cd9aa8b4c8b821bc672a4408900758e7e63", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a953cd9aa8b4c8b821bc672a4408900758e7e63", "html_url": "https://github.com/rust-lang/rust/commit/0a953cd9aa8b4c8b821bc672a4408900758e7e63"}, {"sha": "15f159addefd8fea7564ba7617c8af78582b7816", "url": "https://api.github.com/repos/rust-lang/rust/commits/15f159addefd8fea7564ba7617c8af78582b7816", "html_url": "https://github.com/rust-lang/rust/commit/15f159addefd8fea7564ba7617c8af78582b7816"}], "stats": {"total": 358, "additions": 84, "deletions": 274}, "files": [{"sha": "0dec7c071bfeee860a176578dd964ea336c09143", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5c5c8eb864e56ce905742b8e97df5506bba6aeef/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c5c8eb864e56ce905742b8e97df5506bba6aeef/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=5c5c8eb864e56ce905742b8e97df5506bba6aeef", "patch": "@@ -370,6 +370,14 @@ pub enum UndefinedBehaviorInfo {\n     Unreachable,\n     /// An enum discriminant was set to a value which was outside the range of valid values.\n     InvalidDiscriminant(ScalarMaybeUndef),\n+    /// A slice/array index projection went out-of-bounds.\n+    BoundsCheckFailed { len: u64, index: u64 },\n+    /// Something was divided by 0 (x / 0).\n+    DivisionByZero,\n+    /// Something was \"remainded\" by 0 (x % 0).\n+    RemainderByZero,\n+    /// Overflowing inbounds pointer arithmetic.\n+    PointerArithOverflow,\n }\n \n impl fmt::Debug for UndefinedBehaviorInfo {\n@@ -379,9 +387,18 @@ impl fmt::Debug for UndefinedBehaviorInfo {\n             Ub(msg) | UbExperimental(msg) =>\n                 write!(f, \"{}\", msg),\n             Unreachable =>\n-                write!(f, \"entered unreachable code\"),\n+                write!(f, \"entering unreachable code\"),\n             InvalidDiscriminant(val) =>\n-                write!(f, \"encountered invalid enum discriminant {}\", val),\n+                write!(f, \"encountering invalid enum discriminant {}\", val),\n+            BoundsCheckFailed { ref len, ref index } =>\n+                write!(f, \"indexing out of bounds: the len is {:?} but the index is {:?}\",\n+                    len, index),\n+            DivisionByZero =>\n+                write!(f, \"dividing by zero\"),\n+            RemainderByZero =>\n+                write!(f, \"calculating the remainder with a divisor of zero\"),\n+            PointerArithOverflow =>\n+                write!(f, \"overflowing in-bounds pointer arithmetic\"),\n         }\n     }\n }"}, {"sha": "0b27f512e55b8c44b36d4f9d64837fe1ef5ee314", "filename": "src/librustc/mir/interpret/pointer.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5c5c8eb864e56ce905742b8e97df5506bba6aeef/src%2Flibrustc%2Fmir%2Finterpret%2Fpointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c5c8eb864e56ce905742b8e97df5506bba6aeef/src%2Flibrustc%2Fmir%2Finterpret%2Fpointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fpointer.rs?ref=5c5c8eb864e56ce905742b8e97df5506bba6aeef", "patch": "@@ -1,6 +1,5 @@\n use super::{AllocId, InterpResult};\n \n-use crate::mir;\n use crate::ty::layout::{self, HasDataLayout, Size};\n \n use rustc_macros::HashStable;\n@@ -88,13 +87,13 @@ pub trait PointerArithmetic: layout::HasDataLayout {\n     #[inline]\n     fn offset<'tcx>(&self, val: u64, i: u64) -> InterpResult<'tcx, u64> {\n         let (res, over) = self.overflowing_offset(val, i);\n-        if over { throw_panic!(Overflow(mir::BinOp::Add)) } else { Ok(res) }\n+        if over { throw_ub!(PointerArithOverflow) } else { Ok(res) }\n     }\n \n     #[inline]\n     fn signed_offset<'tcx>(&self, val: u64, i: i64) -> InterpResult<'tcx, u64> {\n         let (res, over) = self.overflowing_signed_offset(val, i128::from(i));\n-        if over { throw_panic!(Overflow(mir::BinOp::Add)) } else { Ok(res) }\n+        if over { throw_ub!(PointerArithOverflow) } else { Ok(res) }\n     }\n }\n "}, {"sha": "68004294c5dc9bfdb4fd5858c1a4587b7b35197b", "filename": "src/librustc_mir/interpret/operator.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5c5c8eb864e56ce905742b8e97df5506bba6aeef/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c5c8eb864e56ce905742b8e97df5506bba6aeef/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperator.rs?ref=5c5c8eb864e56ce905742b8e97df5506bba6aeef", "patch": "@@ -177,8 +177,8 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 return Ok((Scalar::from_bool(op(&l, &r)), false, self.tcx.types.bool));\n             }\n             let op: Option<fn(i128, i128) -> (i128, bool)> = match bin_op {\n-                Div if r == 0 => throw_panic!(DivisionByZero),\n-                Rem if r == 0 => throw_panic!(RemainderByZero),\n+                Div if r == 0 => throw_ub!(DivisionByZero),\n+                Rem if r == 0 => throw_ub!(RemainderByZero),\n                 Div => Some(i128::overflowing_div),\n                 Rem => Some(i128::overflowing_rem),\n                 Add => Some(i128::overflowing_add),\n@@ -234,8 +234,8 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     Add => u128::overflowing_add,\n                     Sub => u128::overflowing_sub,\n                     Mul => u128::overflowing_mul,\n-                    Div if r == 0 => throw_panic!(DivisionByZero),\n-                    Rem if r == 0 => throw_panic!(RemainderByZero),\n+                    Div if r == 0 => throw_ub!(DivisionByZero),\n+                    Rem if r == 0 => throw_ub!(RemainderByZero),\n                     Div => u128::overflowing_div,\n                     Rem => u128::overflowing_rem,\n                     _ => bug!(),"}, {"sha": "a600eb11e1d03c393c143ed2d48a3210e2521610", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5c5c8eb864e56ce905742b8e97df5506bba6aeef/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c5c8eb864e56ce905742b8e97df5506bba6aeef/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=5c5c8eb864e56ce905742b8e97df5506bba6aeef", "patch": "@@ -384,10 +384,8 @@ where\n             layout::FieldPlacement::Array { stride, .. } => {\n                 let len = base.len(self)?;\n                 if field >= len {\n-                    // This can be violated because the index (field) can be a runtime value\n-                    // provided by the user.\n-                    debug!(\"tried to access element {} of array/slice with length {}\", field, len);\n-                    throw_panic!(BoundsCheck { len, index: field });\n+                    // This can only be reached in ConstProp and non-rustc-MIR.\n+                    throw_ub!(BoundsCheckFailed { len, index: field });\n                 }\n                 stride * field\n             }"}, {"sha": "fc10824f0c03cf3e85384b3a09d61e8667592d9b", "filename": "src/test/compile-fail/consts/const-err3.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5c5c8eb864e56ce905742b8e97df5506bba6aeef/src%2Ftest%2Fcompile-fail%2Fconsts%2Fconst-err3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c5c8eb864e56ce905742b8e97df5506bba6aeef/src%2Ftest%2Fcompile-fail%2Fconsts%2Fconst-err3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconsts%2Fconst-err3.rs?ref=5c5c8eb864e56ce905742b8e97df5506bba6aeef", "patch": "@@ -14,7 +14,6 @@ fn main() {\n     //~^ ERROR const_err\n     let _e = [5u8][1];\n     //~^ ERROR const_err\n-    //~| ERROR this expression will panic at runtime\n     black_box(b);\n     black_box(c);\n     black_box(d);"}, {"sha": "f4d4e6f969b36a438e4598c98c1b6cabd9605d51", "filename": "src/test/ui/consts/array-literal-index-oob.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c5c8eb864e56ce905742b8e97df5506bba6aeef/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c5c8eb864e56ce905742b8e97df5506bba6aeef/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.stderr?ref=5c5c8eb864e56ce905742b8e97df5506bba6aeef", "patch": "@@ -12,7 +12,7 @@ error: reaching this expression at runtime will panic or abort\n LL |     &{[1, 2, 3][4]};\n    |     --^^^^^^^^^^^^-\n    |       |\n-   |       index out of bounds: the len is 3 but the index is 4\n+   |       indexing out of bounds: the len is 3 but the index is 4\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ecbcc2a4b496f882e1414066a7e75dff2884adab", "filename": "src/test/ui/consts/const-err2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5c5c8eb864e56ce905742b8e97df5506bba6aeef/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c5c8eb864e56ce905742b8e97df5506bba6aeef/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.rs?ref=5c5c8eb864e56ce905742b8e97df5506bba6aeef", "patch": "@@ -23,7 +23,6 @@ fn main() {\n     //~^ ERROR const_err\n     let _e = [5u8][1];\n     //~^ ERROR index out of bounds\n-    //~| ERROR this expression will panic at runtime\n     black_box(a);\n     black_box(b);\n     black_box(c);"}, {"sha": "1d84d44dc27b3c834400ad29840aae4a0e9d54d3", "filename": "src/test/ui/consts/const-err2.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5c5c8eb864e56ce905742b8e97df5506bba6aeef/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c5c8eb864e56ce905742b8e97df5506bba6aeef/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.stderr?ref=5c5c8eb864e56ce905742b8e97df5506bba6aeef", "patch": "@@ -34,11 +34,5 @@ error: index out of bounds: the len is 1 but the index is 1\n LL |     let _e = [5u8][1];\n    |              ^^^^^^^^\n \n-error: this expression will panic at runtime\n-  --> $DIR/const-err2.rs:24:14\n-   |\n-LL |     let _e = [5u8][1];\n-   |              ^^^^^^^^ index out of bounds: the len is 1 but the index is 1\n-\n-error: aborting due to 6 previous errors\n+error: aborting due to 5 previous errors\n "}, {"sha": "a9cf04cda7a5aed0be90fdfdd085e39b30b7d1f6", "filename": "src/test/ui/consts/const-err3.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5c5c8eb864e56ce905742b8e97df5506bba6aeef/src%2Ftest%2Fui%2Fconsts%2Fconst-err3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c5c8eb864e56ce905742b8e97df5506bba6aeef/src%2Ftest%2Fui%2Fconsts%2Fconst-err3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err3.rs?ref=5c5c8eb864e56ce905742b8e97df5506bba6aeef", "patch": "@@ -23,7 +23,6 @@ fn main() {\n     //~^ ERROR const_err\n     let _e = [5u8][1];\n     //~^ ERROR const_err\n-    //~| ERROR this expression will panic at runtime\n     black_box(a);\n     black_box(b);\n     black_box(c);"}, {"sha": "0602707be70408458efe8ba4b1f7f4882e7cab05", "filename": "src/test/ui/consts/const-err3.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5c5c8eb864e56ce905742b8e97df5506bba6aeef/src%2Ftest%2Fui%2Fconsts%2Fconst-err3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c5c8eb864e56ce905742b8e97df5506bba6aeef/src%2Ftest%2Fui%2Fconsts%2Fconst-err3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err3.stderr?ref=5c5c8eb864e56ce905742b8e97df5506bba6aeef", "patch": "@@ -34,11 +34,5 @@ error: index out of bounds: the len is 1 but the index is 1\n LL |     let _e = [5u8][1];\n    |              ^^^^^^^^\n \n-error: this expression will panic at runtime\n-  --> $DIR/const-err3.rs:24:14\n-   |\n-LL |     let _e = [5u8][1];\n-   |              ^^^^^^^^ index out of bounds: the len is 1 but the index is 1\n-\n-error: aborting due to 6 previous errors\n+error: aborting due to 5 previous errors\n "}, {"sha": "dfa6863082cdb2471976905650b185b787d038f2", "filename": "src/test/ui/consts/const-eval/promoted_errors.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5c5c8eb864e56ce905742b8e97df5506bba6aeef/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c5c8eb864e56ce905742b8e97df5506bba6aeef/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.rs?ref=5c5c8eb864e56ce905742b8e97df5506bba6aeef", "patch": "@@ -8,14 +8,12 @@ fn main() {\n     //~^ ERROR const_err\n     println!(\"{}\", 1/(1-1));\n     //~^ ERROR attempt to divide by zero [const_err]\n-    //~| ERROR reaching this expression at runtime will panic or abort [const_err]\n+    //~| ERROR const_err\n     let _x = 1/(1-1);\n     //~^ ERROR const_err\n-    //~| ERROR const_err\n     println!(\"{}\", 1/(false as u32));\n     //~^ ERROR attempt to divide by zero [const_err]\n-    //~| ERROR reaching this expression at runtime will panic or abort [const_err]\n+    //~| ERROR const_err\n     let _x = 1/(false as u32);\n     //~^ ERROR const_err\n-    //~| ERROR const_err\n }"}, {"sha": "848a880ba492ffabe21f3de70879e876de511ec1", "filename": "src/test/ui/consts/const-eval/promoted_errors.stderr", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5c5c8eb864e56ce905742b8e97df5506bba6aeef/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c5c8eb864e56ce905742b8e97df5506bba6aeef/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.stderr?ref=5c5c8eb864e56ce905742b8e97df5506bba6aeef", "patch": "@@ -20,43 +20,31 @@ error: reaching this expression at runtime will panic or abort\n   --> $DIR/promoted_errors.rs:9:20\n    |\n LL |     println!(\"{}\", 1/(1-1));\n-   |                    ^^^^^^^ attempt to divide by zero\n+   |                    ^^^^^^^ dividing by zero\n \n error: attempt to divide by zero\n   --> $DIR/promoted_errors.rs:12:14\n    |\n LL |     let _x = 1/(1-1);\n    |              ^^^^^^^\n \n-error: this expression will panic at runtime\n-  --> $DIR/promoted_errors.rs:12:14\n-   |\n-LL |     let _x = 1/(1-1);\n-   |              ^^^^^^^ attempt to divide by zero\n-\n error: attempt to divide by zero\n-  --> $DIR/promoted_errors.rs:15:20\n+  --> $DIR/promoted_errors.rs:14:20\n    |\n LL |     println!(\"{}\", 1/(false as u32));\n    |                    ^^^^^^^^^^^^^^^^\n \n error: reaching this expression at runtime will panic or abort\n-  --> $DIR/promoted_errors.rs:15:20\n+  --> $DIR/promoted_errors.rs:14:20\n    |\n LL |     println!(\"{}\", 1/(false as u32));\n-   |                    ^^^^^^^^^^^^^^^^ attempt to divide by zero\n+   |                    ^^^^^^^^^^^^^^^^ dividing by zero\n \n error: attempt to divide by zero\n-  --> $DIR/promoted_errors.rs:18:14\n+  --> $DIR/promoted_errors.rs:17:14\n    |\n LL |     let _x = 1/(false as u32);\n    |              ^^^^^^^^^^^^^^^^\n \n-error: this expression will panic at runtime\n-  --> $DIR/promoted_errors.rs:18:14\n-   |\n-LL |     let _x = 1/(false as u32);\n-   |              ^^^^^^^^^^^^^^^^ attempt to divide by zero\n-\n-error: aborting due to 9 previous errors\n+error: aborting due to 7 previous errors\n "}, {"sha": "58b1794091228638af67c4e64694d8450f277042", "filename": "src/test/ui/consts/const-eval/promoted_errors2.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5c5c8eb864e56ce905742b8e97df5506bba6aeef/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c5c8eb864e56ce905742b8e97df5506bba6aeef/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors2.rs?ref=5c5c8eb864e56ce905742b8e97df5506bba6aeef", "patch": "@@ -9,14 +9,12 @@ fn main() {\n     //~^ ERROR attempt to subtract with overflow\n     println!(\"{}\", 1/(1-1));\n     //~^ ERROR attempt to divide by zero [const_err]\n-    //~| ERROR reaching this expression at runtime will panic or abort [const_err]\n+    //~| ERROR const_err\n     let _x = 1/(1-1);\n     //~^ ERROR const_err\n-    //~| ERROR const_err\n     println!(\"{}\", 1/(false as u32));\n     //~^ ERROR attempt to divide by zero [const_err]\n-    //~| ERROR reaching this expression at runtime will panic or abort [const_err]\n+    //~| ERROR const_err\n     let _x = 1/(false as u32);\n     //~^ ERROR const_err\n-    //~| ERROR const_err\n }"}, {"sha": "6f4b1c045f462cdde66f935561884342a645f89b", "filename": "src/test/ui/consts/const-eval/promoted_errors2.stderr", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5c5c8eb864e56ce905742b8e97df5506bba6aeef/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c5c8eb864e56ce905742b8e97df5506bba6aeef/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors2.stderr?ref=5c5c8eb864e56ce905742b8e97df5506bba6aeef", "patch": "@@ -26,43 +26,31 @@ error: reaching this expression at runtime will panic or abort\n   --> $DIR/promoted_errors2.rs:10:20\n    |\n LL |     println!(\"{}\", 1/(1-1));\n-   |                    ^^^^^^^ attempt to divide by zero\n+   |                    ^^^^^^^ dividing by zero\n \n error: attempt to divide by zero\n   --> $DIR/promoted_errors2.rs:13:14\n    |\n LL |     let _x = 1/(1-1);\n    |              ^^^^^^^\n \n-error: this expression will panic at runtime\n-  --> $DIR/promoted_errors2.rs:13:14\n-   |\n-LL |     let _x = 1/(1-1);\n-   |              ^^^^^^^ attempt to divide by zero\n-\n error: attempt to divide by zero\n-  --> $DIR/promoted_errors2.rs:16:20\n+  --> $DIR/promoted_errors2.rs:15:20\n    |\n LL |     println!(\"{}\", 1/(false as u32));\n    |                    ^^^^^^^^^^^^^^^^\n \n error: reaching this expression at runtime will panic or abort\n-  --> $DIR/promoted_errors2.rs:16:20\n+  --> $DIR/promoted_errors2.rs:15:20\n    |\n LL |     println!(\"{}\", 1/(false as u32));\n-   |                    ^^^^^^^^^^^^^^^^ attempt to divide by zero\n+   |                    ^^^^^^^^^^^^^^^^ dividing by zero\n \n error: attempt to divide by zero\n-  --> $DIR/promoted_errors2.rs:19:14\n+  --> $DIR/promoted_errors2.rs:18:14\n    |\n LL |     let _x = 1/(false as u32);\n    |              ^^^^^^^^^^^^^^^^\n \n-error: this expression will panic at runtime\n-  --> $DIR/promoted_errors2.rs:19:14\n-   |\n-LL |     let _x = 1/(false as u32);\n-   |              ^^^^^^^^^^^^^^^^ attempt to divide by zero\n-\n-error: aborting due to 10 previous errors\n+error: aborting due to 8 previous errors\n "}, {"sha": "13309f978b6729733584a2ea1dd170e77a8a2338", "filename": "src/test/ui/consts/const-prop-ice.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5c5c8eb864e56ce905742b8e97df5506bba6aeef/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c5c8eb864e56ce905742b8e97df5506bba6aeef/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice.rs?ref=5c5c8eb864e56ce905742b8e97df5506bba6aeef", "patch": "@@ -1,4 +1,3 @@\n fn main() {\n     [0; 3][3u64 as usize]; //~ ERROR the len is 3 but the index is 3\n-    //~| ERROR this expression will panic at runtime\n }"}, {"sha": "4b3880198bf2ddcc938fd39146a06571fdb72170", "filename": "src/test/ui/consts/const-prop-ice.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5c5c8eb864e56ce905742b8e97df5506bba6aeef/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c5c8eb864e56ce905742b8e97df5506bba6aeef/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice.stderr?ref=5c5c8eb864e56ce905742b8e97df5506bba6aeef", "patch": "@@ -6,11 +6,5 @@ LL |     [0; 3][3u64 as usize];\n    |\n    = note: `#[deny(const_err)]` on by default\n \n-error: this expression will panic at runtime\n-  --> $DIR/const-prop-ice.rs:2:5\n-   |\n-LL |     [0; 3][3u64 as usize];\n-   |     ^^^^^^^^^^^^^^^^^^^^^ index out of bounds: the len is 3 but the index is 3\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n "}, {"sha": "68d838054776e7675e9aa0fd91e2bea74b9ec09f", "filename": "src/test/ui/issues/issue-54348.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c5c8eb864e56ce905742b8e97df5506bba6aeef/src%2Ftest%2Fui%2Fissues%2Fissue-54348.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c5c8eb864e56ce905742b8e97df5506bba6aeef/src%2Ftest%2Fui%2Fissues%2Fissue-54348.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54348.rs?ref=5c5c8eb864e56ce905742b8e97df5506bba6aeef", "patch": "@@ -1,7 +1,5 @@\n fn main() {\n     [1][0u64 as usize];\n     [1][1.5 as usize]; //~ ERROR index out of bounds\n-    //~| ERROR this expression will panic at runtime\n     [1][1u64 as usize]; //~ ERROR index out of bounds\n-    //~| ERROR this expression will panic at runtime\n }"}, {"sha": "fa77bd6fd77973777265f9315d26ac86907eb4fc", "filename": "src/test/ui/issues/issue-54348.stderr", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5c5c8eb864e56ce905742b8e97df5506bba6aeef/src%2Ftest%2Fui%2Fissues%2Fissue-54348.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c5c8eb864e56ce905742b8e97df5506bba6aeef/src%2Ftest%2Fui%2Fissues%2Fissue-54348.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54348.stderr?ref=5c5c8eb864e56ce905742b8e97df5506bba6aeef", "patch": "@@ -6,23 +6,11 @@ LL |     [1][1.5 as usize];\n    |\n    = note: `#[deny(const_err)]` on by default\n \n-error: this expression will panic at runtime\n-  --> $DIR/issue-54348.rs:3:5\n-   |\n-LL |     [1][1.5 as usize];\n-   |     ^^^^^^^^^^^^^^^^^ index out of bounds: the len is 1 but the index is 1\n-\n error: index out of bounds: the len is 1 but the index is 1\n-  --> $DIR/issue-54348.rs:5:5\n+  --> $DIR/issue-54348.rs:4:5\n    |\n LL |     [1][1u64 as usize];\n    |     ^^^^^^^^^^^^^^^^^^\n \n-error: this expression will panic at runtime\n-  --> $DIR/issue-54348.rs:5:5\n-   |\n-LL |     [1][1u64 as usize];\n-   |     ^^^^^^^^^^^^^^^^^^ index out of bounds: the len is 1 but the index is 1\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to 2 previous errors\n "}, {"sha": "71e2b58031ce7a6c3ba9c99fe07070352eef056d", "filename": "src/test/ui/issues/issue-8460-const.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5c5c8eb864e56ce905742b8e97df5506bba6aeef/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c5c8eb864e56ce905742b8e97df5506bba6aeef/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.rs?ref=5c5c8eb864e56ce905742b8e97df5506bba6aeef", "patch": "@@ -23,19 +23,14 @@ fn main() {\n     //~| ERROR this expression will panic at runtime\n     assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n     //~^ ERROR attempt to divide by zero\n-    //~| ERROR this expression will panic at runtime\n     assert!(thread::spawn(move|| { 1i8 / 0; }).join().is_err());\n     //~^ ERROR attempt to divide by zero\n-    //~| ERROR this expression will panic at runtime\n     assert!(thread::spawn(move|| { 1i16 / 0; }).join().is_err());\n     //~^ ERROR attempt to divide by zero\n-    //~| ERROR this expression will panic at runtime\n     assert!(thread::spawn(move|| { 1i32 / 0; }).join().is_err());\n     //~^ ERROR attempt to divide by zero\n-    //~| ERROR this expression will panic at runtime\n     assert!(thread::spawn(move|| { 1i64 / 0; }).join().is_err());\n     //~^ ERROR attempt to divide by zero\n-    //~| ERROR this expression will panic at runtime\n     assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n     //~^ ERROR attempt to calculate the remainder with overflow\n     //~| ERROR this expression will panic at runtime\n@@ -53,17 +48,12 @@ fn main() {\n     //~| ERROR this expression will panic at runtime\n     assert!(thread::spawn(move|| { 1isize % 0; }).join().is_err());\n     //~^ ERROR attempt to calculate the remainder with a divisor of zero\n-    //~| ERROR this expression will panic at runtime\n     assert!(thread::spawn(move|| { 1i8 % 0; }).join().is_err());\n     //~^ ERROR attempt to calculate the remainder with a divisor of zero\n-    //~| ERROR this expression will panic at runtime\n     assert!(thread::spawn(move|| { 1i16 % 0; }).join().is_err());\n     //~^ ERROR attempt to calculate the remainder with a divisor of zero\n-    //~| ERROR this expression will panic at runtime\n     assert!(thread::spawn(move|| { 1i32 % 0; }).join().is_err());\n     //~^ ERROR attempt to calculate the remainder with a divisor of zero\n-    //~| ERROR this expression will panic at runtime\n     assert!(thread::spawn(move|| { 1i64 % 0; }).join().is_err());\n     //~^ ERROR attempt to calculate the remainder with a divisor of zero\n-    //~| ERROR this expression will panic at runtime\n }"}, {"sha": "c6750e653d7bbc8a74d2f3987002b0519f362e0d", "filename": "src/test/ui/issues/issue-8460-const.stderr", "status": "modified", "additions": 20, "deletions": 80, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/5c5c8eb864e56ce905742b8e97df5506bba6aeef/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c5c8eb864e56ce905742b8e97df5506bba6aeef/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.stderr?ref=5c5c8eb864e56ce905742b8e97df5506bba6aeef", "patch": "@@ -70,179 +70,119 @@ error: attempt to divide by zero\n LL |     assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n    |                                    ^^^^^^^^^^\n \n-error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:24:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n-   |                                    ^^^^^^^^^^ attempt to divide by zero\n-\n error: attempt to divide by zero\n-  --> $DIR/issue-8460-const.rs:27:36\n+  --> $DIR/issue-8460-const.rs:26:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i8 / 0; }).join().is_err());\n    |                                    ^^^^^^^\n \n-error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:27:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1i8 / 0; }).join().is_err());\n-   |                                    ^^^^^^^ attempt to divide by zero\n-\n error: attempt to divide by zero\n-  --> $DIR/issue-8460-const.rs:30:36\n+  --> $DIR/issue-8460-const.rs:28:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i16 / 0; }).join().is_err());\n    |                                    ^^^^^^^^\n \n-error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:30:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1i16 / 0; }).join().is_err());\n-   |                                    ^^^^^^^^ attempt to divide by zero\n-\n error: attempt to divide by zero\n-  --> $DIR/issue-8460-const.rs:33:36\n+  --> $DIR/issue-8460-const.rs:30:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i32 / 0; }).join().is_err());\n    |                                    ^^^^^^^^\n \n-error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:33:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1i32 / 0; }).join().is_err());\n-   |                                    ^^^^^^^^ attempt to divide by zero\n-\n error: attempt to divide by zero\n-  --> $DIR/issue-8460-const.rs:36:36\n+  --> $DIR/issue-8460-const.rs:32:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i64 / 0; }).join().is_err());\n    |                                    ^^^^^^^^\n \n-error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:36:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1i64 / 0; }).join().is_err());\n-   |                                    ^^^^^^^^ attempt to divide by zero\n-\n error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const.rs:39:36\n+  --> $DIR/issue-8460-const.rs:34:36\n    |\n LL |     assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:39:36\n+  --> $DIR/issue-8460-const.rs:34:36\n    |\n LL |     assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n \n error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const.rs:42:36\n+  --> $DIR/issue-8460-const.rs:37:36\n    |\n LL |     assert!(thread::spawn(move|| { i8::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:42:36\n+  --> $DIR/issue-8460-const.rs:37:36\n    |\n LL |     assert!(thread::spawn(move|| { i8::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n \n error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const.rs:45:36\n+  --> $DIR/issue-8460-const.rs:40:36\n    |\n LL |     assert!(thread::spawn(move|| { i16::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:45:36\n+  --> $DIR/issue-8460-const.rs:40:36\n    |\n LL |     assert!(thread::spawn(move|| { i16::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n \n error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const.rs:48:36\n+  --> $DIR/issue-8460-const.rs:43:36\n    |\n LL |     assert!(thread::spawn(move|| { i32::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:48:36\n+  --> $DIR/issue-8460-const.rs:43:36\n    |\n LL |     assert!(thread::spawn(move|| { i32::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n \n error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const.rs:51:36\n+  --> $DIR/issue-8460-const.rs:46:36\n    |\n LL |     assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:51:36\n+  --> $DIR/issue-8460-const.rs:46:36\n    |\n LL |     assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n \n error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const.rs:54:36\n+  --> $DIR/issue-8460-const.rs:49:36\n    |\n LL |     assert!(thread::spawn(move|| { 1isize % 0; }).join().is_err());\n    |                                    ^^^^^^^^^^\n \n-error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:54:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1isize % 0; }).join().is_err());\n-   |                                    ^^^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n-\n error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const.rs:57:36\n+  --> $DIR/issue-8460-const.rs:51:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i8 % 0; }).join().is_err());\n    |                                    ^^^^^^^\n \n-error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:57:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1i8 % 0; }).join().is_err());\n-   |                                    ^^^^^^^ attempt to calculate the remainder with a divisor of zero\n-\n error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const.rs:60:36\n+  --> $DIR/issue-8460-const.rs:53:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i16 % 0; }).join().is_err());\n    |                                    ^^^^^^^^\n \n-error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:60:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1i16 % 0; }).join().is_err());\n-   |                                    ^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n-\n error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const.rs:63:36\n+  --> $DIR/issue-8460-const.rs:55:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i32 % 0; }).join().is_err());\n    |                                    ^^^^^^^^\n \n-error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:63:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1i32 % 0; }).join().is_err());\n-   |                                    ^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n-\n error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const.rs:66:36\n+  --> $DIR/issue-8460-const.rs:57:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i64 % 0; }).join().is_err());\n    |                                    ^^^^^^^^\n \n-error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:66:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1i64 % 0; }).join().is_err());\n-   |                                    ^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n-\n-error: aborting due to 40 previous errors\n+error: aborting due to 30 previous errors\n "}, {"sha": "723a17940a3a56ea3224206b70dec8b64c768637", "filename": "src/test/ui/issues/issue-8460-const2.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5c5c8eb864e56ce905742b8e97df5506bba6aeef/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c5c8eb864e56ce905742b8e97df5506bba6aeef/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const2.rs?ref=5c5c8eb864e56ce905742b8e97df5506bba6aeef", "patch": "@@ -18,19 +18,14 @@ fn main() {\n     //~^ ERROR attempt to divide with overflow\n     assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n     //~^ ERROR attempt to divide by zero\n-    //~| ERROR this expression will panic at runtime\n     assert!(thread::spawn(move|| { 1i8 / 0; }).join().is_err());\n     //~^ ERROR attempt to divide by zero\n-    //~| ERROR this expression will panic at runtime\n     assert!(thread::spawn(move|| { 1i16 / 0; }).join().is_err());\n     //~^ ERROR attempt to divide by zero\n-    //~| ERROR this expression will panic at runtime\n     assert!(thread::spawn(move|| { 1i32 / 0; }).join().is_err());\n     //~^ ERROR attempt to divide by zero\n-    //~| ERROR this expression will panic at runtime\n     assert!(thread::spawn(move|| { 1i64 / 0; }).join().is_err());\n     //~^ ERROR attempt to divide by zero\n-    //~| ERROR this expression will panic at runtime\n     assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n     //~^ ERROR attempt to calculate the remainder with overflow\n     assert!(thread::spawn(move|| { i8::MIN % -1; }).join().is_err());\n@@ -43,17 +38,12 @@ fn main() {\n     //~^ ERROR attempt to calculate the remainder with overflow\n     assert!(thread::spawn(move|| { 1isize % 0; }).join().is_err());\n     //~^ ERROR attempt to calculate the remainder with a divisor of zero\n-    //~| ERROR this expression will panic at runtime\n     assert!(thread::spawn(move|| { 1i8 % 0; }).join().is_err());\n     //~^ ERROR attempt to calculate the remainder with a divisor of zero\n-    //~| ERROR this expression will panic at runtime\n     assert!(thread::spawn(move|| { 1i16 % 0; }).join().is_err());\n     //~^ ERROR attempt to calculate the remainder with a divisor of zero\n-    //~| ERROR this expression will panic at runtime\n     assert!(thread::spawn(move|| { 1i32 % 0; }).join().is_err());\n     //~^ ERROR attempt to calculate the remainder with a divisor of zero\n-    //~| ERROR this expression will panic at runtime\n     assert!(thread::spawn(move|| { 1i64 % 0; }).join().is_err());\n     //~^ ERROR attempt to calculate the remainder with a divisor of zero\n-    //~| ERROR this expression will panic at runtime\n }"}, {"sha": "87b9b2daa6f604a30f6d974ad7f7d5f7b6b04c46", "filename": "src/test/ui/issues/issue-8460-const2.stderr", "status": "modified", "additions": 15, "deletions": 75, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/5c5c8eb864e56ce905742b8e97df5506bba6aeef/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c5c8eb864e56ce905742b8e97df5506bba6aeef/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const2.stderr?ref=5c5c8eb864e56ce905742b8e97df5506bba6aeef", "patch": "@@ -40,149 +40,89 @@ error: attempt to divide by zero\n LL |     assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n    |                                    ^^^^^^^^^^\n \n-error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const2.rs:19:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n-   |                                    ^^^^^^^^^^ attempt to divide by zero\n-\n error: attempt to divide by zero\n-  --> $DIR/issue-8460-const2.rs:22:36\n+  --> $DIR/issue-8460-const2.rs:21:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i8 / 0; }).join().is_err());\n    |                                    ^^^^^^^\n \n-error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const2.rs:22:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1i8 / 0; }).join().is_err());\n-   |                                    ^^^^^^^ attempt to divide by zero\n-\n error: attempt to divide by zero\n-  --> $DIR/issue-8460-const2.rs:25:36\n+  --> $DIR/issue-8460-const2.rs:23:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i16 / 0; }).join().is_err());\n    |                                    ^^^^^^^^\n \n-error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const2.rs:25:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1i16 / 0; }).join().is_err());\n-   |                                    ^^^^^^^^ attempt to divide by zero\n-\n error: attempt to divide by zero\n-  --> $DIR/issue-8460-const2.rs:28:36\n+  --> $DIR/issue-8460-const2.rs:25:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i32 / 0; }).join().is_err());\n    |                                    ^^^^^^^^\n \n-error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const2.rs:28:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1i32 / 0; }).join().is_err());\n-   |                                    ^^^^^^^^ attempt to divide by zero\n-\n error: attempt to divide by zero\n-  --> $DIR/issue-8460-const2.rs:31:36\n+  --> $DIR/issue-8460-const2.rs:27:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i64 / 0; }).join().is_err());\n    |                                    ^^^^^^^^\n \n-error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const2.rs:31:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1i64 / 0; }).join().is_err());\n-   |                                    ^^^^^^^^ attempt to divide by zero\n-\n error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const2.rs:34:36\n+  --> $DIR/issue-8460-const2.rs:29:36\n    |\n LL |     assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^^^\n \n error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const2.rs:36:36\n+  --> $DIR/issue-8460-const2.rs:31:36\n    |\n LL |     assert!(thread::spawn(move|| { i8::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^\n \n error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const2.rs:38:36\n+  --> $DIR/issue-8460-const2.rs:33:36\n    |\n LL |     assert!(thread::spawn(move|| { i16::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^\n \n error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const2.rs:40:36\n+  --> $DIR/issue-8460-const2.rs:35:36\n    |\n LL |     assert!(thread::spawn(move|| { i32::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^\n \n error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const2.rs:42:36\n+  --> $DIR/issue-8460-const2.rs:37:36\n    |\n LL |     assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^\n \n error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const2.rs:44:36\n+  --> $DIR/issue-8460-const2.rs:39:36\n    |\n LL |     assert!(thread::spawn(move|| { 1isize % 0; }).join().is_err());\n    |                                    ^^^^^^^^^^\n \n-error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const2.rs:44:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1isize % 0; }).join().is_err());\n-   |                                    ^^^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n-\n error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const2.rs:47:36\n+  --> $DIR/issue-8460-const2.rs:41:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i8 % 0; }).join().is_err());\n    |                                    ^^^^^^^\n \n-error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const2.rs:47:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1i8 % 0; }).join().is_err());\n-   |                                    ^^^^^^^ attempt to calculate the remainder with a divisor of zero\n-\n error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const2.rs:50:36\n+  --> $DIR/issue-8460-const2.rs:43:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i16 % 0; }).join().is_err());\n    |                                    ^^^^^^^^\n \n-error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const2.rs:50:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1i16 % 0; }).join().is_err());\n-   |                                    ^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n-\n error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const2.rs:53:36\n+  --> $DIR/issue-8460-const2.rs:45:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i32 % 0; }).join().is_err());\n    |                                    ^^^^^^^^\n \n-error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const2.rs:53:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1i32 % 0; }).join().is_err());\n-   |                                    ^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n-\n error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const2.rs:56:36\n+  --> $DIR/issue-8460-const2.rs:47:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i64 % 0; }).join().is_err());\n    |                                    ^^^^^^^^\n \n-error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const2.rs:56:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1i64 % 0; }).join().is_err());\n-   |                                    ^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n-\n-error: aborting due to 30 previous errors\n+error: aborting due to 20 previous errors\n "}]}