{"sha": "7140d7c52bdf55daf0b978a19706d20c3bf7ee92", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxNDBkN2M1MmJkZjU1ZGFmMGI5NzhhMTk3MDZkMjBjM2JmN2VlOTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-07T20:42:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-07T20:42:35Z"}, "message": "auto merge of #5227 : jdm/rust/newconst, r=pcwalton\n\nAll comments from previous pull requests addressed.", "tree": {"sha": "fa144af85716da7669197383ffa625d79b64dba4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa144af85716da7669197383ffa625d79b64dba4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7140d7c52bdf55daf0b978a19706d20c3bf7ee92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7140d7c52bdf55daf0b978a19706d20c3bf7ee92", "html_url": "https://github.com/rust-lang/rust/commit/7140d7c52bdf55daf0b978a19706d20c3bf7ee92", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7140d7c52bdf55daf0b978a19706d20c3bf7ee92/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2bc301fd6821a76d91d7c121b2737c473a54897f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bc301fd6821a76d91d7c121b2737c473a54897f", "html_url": "https://github.com/rust-lang/rust/commit/2bc301fd6821a76d91d7c121b2737c473a54897f"}, {"sha": "27668fbfab593c0e671f0ef104b1d677a770ea7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/27668fbfab593c0e671f0ef104b1d677a770ea7c", "html_url": "https://github.com/rust-lang/rust/commit/27668fbfab593c0e671f0ef104b1d677a770ea7c"}], "stats": {"total": 322, "additions": 293, "deletions": 29}, "files": [{"sha": "67d25637093e18a443a4fa587c54c3b6ce4c6bd6", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7140d7c52bdf55daf0b978a19706d20c3bf7ee92/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7140d7c52bdf55daf0b978a19706d20c3bf7ee92/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=7140d7c52bdf55daf0b978a19706d20c3bf7ee92", "patch": "@@ -616,7 +616,7 @@ fn encode_info_for_item(ecx: @EncodeContext, ebml_w: writer::Encoder,\n     let must_write =\n         match item.node {\n           item_enum(_, _) | item_impl(*) | item_trait(*) | item_struct(*) |\n-          item_mod(*) | item_foreign_mod(*) => true,\n+          item_mod(*) | item_foreign_mod(*) | item_const(*) => true,\n           _ => false\n         };\n     if !must_write && !reachable(ecx, item.id) { return; }\n@@ -639,6 +639,7 @@ fn encode_info_for_item(ecx: @EncodeContext, ebml_w: writer::Encoder,\n         encode_type(ecx, ebml_w, node_id_to_type(tcx, item.id));\n         encode_symbol(ecx, ebml_w, item.id);\n         encode_path(ecx, ebml_w, path, ast_map::path_name(item.ident));\n+        (ecx.encode_inlined_item)(ecx, ebml_w, path, ii_item(item));\n         ebml_w.end_tag();\n       }\n       item_fn(_, purity, ref generics, _) => {"}, {"sha": "58099574126f48fc270dac1713accc2088458bed", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7140d7c52bdf55daf0b978a19706d20c3bf7ee92/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7140d7c52bdf55daf0b978a19706d20c3bf7ee92/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=7140d7c52bdf55daf0b978a19706d20c3bf7ee92", "patch": "@@ -107,7 +107,7 @@ pub fn check_expr(sess: Session,\n           expr_lit(_) => (),\n           expr_cast(_, _) => {\n             let ety = ty::expr_ty(tcx, e);\n-            if !ty::type_is_numeric(ety) {\n+            if !ty::type_is_numeric(ety) && !ty::type_is_unsafe_ptr(ety) {\n                 sess.span_err(e.span, ~\"can not cast to `\" +\n                               ppaux::ty_to_str(tcx, ety) +\n                               ~\"` in a constant expression\");\n@@ -124,17 +124,11 @@ pub fn check_expr(sess: Session,\n                               items without type parameters\");\n             }\n             match def_map.find(&e.id) {\n-                Some(def_variant(_, _)) |\n-                Some(def_struct(_)) => { }\n+              Some(def_const(_)) |\n+              Some(def_fn(_, _)) |\n+              Some(def_variant(_, _)) |\n+              Some(def_struct(_)) => { }\n \n-                Some(def_const(def_id)) |\n-                Some(def_fn(def_id, _)) => {\n-                if !ast_util::is_local(def_id) {\n-                    sess.span_err(\n-                        e.span, ~\"paths in constants may only refer to \\\n-                                 crate-local constants or functions\");\n-                }\n-              }\n               Some(def) => {\n                 debug!(\"(checking const) found bad def: %?\", def);\n                 sess.span_err(\n@@ -246,11 +240,13 @@ pub fn check_item_recursion(sess: Session,\n           expr_path(*) => {\n             match env.def_map.find(&e.id) {\n               Some(def_const(def_id)) => {\n-                match env.ast_map.get(&def_id.node) {\n-                  ast_map::node_item(it, _) => {\n-                    (v.visit_item)(it, env, v);\n+                if ast_util::is_local(def_id) {\n+                  match env.ast_map.get(&def_id.node) {\n+                    ast_map::node_item(it, _) => {\n+                      (v.visit_item)(it, env, v);\n+                    }\n+                    _ => fail!(~\"const not bound to an item\")\n                   }\n-                  _ => fail!(~\"const not bound to an item\")\n                 }\n               }\n               _ => ()"}, {"sha": "b7a536aa3a2eacaaa678e15dcbdece436f2286a2", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7140d7c52bdf55daf0b978a19706d20c3bf7ee92/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7140d7c52bdf55daf0b978a19706d20c3bf7ee92/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=7140d7c52bdf55daf0b978a19706d20c3bf7ee92", "patch": "@@ -11,13 +11,15 @@\n use core::prelude::*;\n \n use lib::llvm::{llvm, ValueRef, TypeRef, Bool, True, False};\n+use metadata::csearch;\n use middle::const_eval;\n use middle::trans::adt;\n use middle::trans::base;\n use middle::trans::base::get_insn_ctxt;\n use middle::trans::common::*;\n use middle::trans::consts;\n use middle::trans::expr;\n+use middle::trans::inline;\n use middle::trans::machine;\n use middle::trans::type_of;\n use middle::ty;\n@@ -110,7 +112,7 @@ pub fn const_autoderef(cx: @CrateContext, ty: ty::t, v: ValueRef)\n     let mut v1 = v;\n     loop {\n         // Only rptrs can be autoderef'ed in a const context.\n-        match ty::get(ty).sty {\n+        match ty::get(t1).sty {\n             ty::ty_rptr(_, mt) => {\n                 t1 = mt.ty;\n                 v1 = const_deref(cx, v1);\n@@ -121,10 +123,12 @@ pub fn const_autoderef(cx: @CrateContext, ty: ty::t, v: ValueRef)\n }\n \n pub fn get_const_val(cx: @CrateContext, def_id: ast::def_id) -> ValueRef {\n-    if !ast_util::is_local(def_id) {\n-        cx.tcx.sess.bug(~\"cross-crate constants\");\n-    }\n-    if !cx.const_values.contains_key(&def_id.node) {\n+    let mut def_id = def_id;\n+    if !ast_util::is_local(def_id) ||\n+       !cx.const_values.contains_key(&def_id.node) {\n+        if !ast_util::is_local(def_id) {\n+            def_id = inline::maybe_instantiate_inline(cx, def_id, true);\n+        }\n         match cx.tcx.items.get(&def_id.node) {\n             ast_map::node_item(@ast::item {\n                 node: ast::item_const(_, subexpr), _\n@@ -338,6 +342,12 @@ fn const_expr_unchecked(cx: @CrateContext, e: @ast::expr) -> ValueRef {\n                                        integral or float\")\n                 }\n               }\n+              (expr::cast_pointer, expr::cast_pointer) => {\n+                llvm::LLVMConstPointerCast(v, llty)\n+              }\n+              (expr::cast_integral, expr::cast_pointer) => {\n+                llvm::LLVMConstIntToPtr(v, llty)\n+              }\n               _ => {\n                 cx.sess.impossible_case(e.span,\n                                         ~\"bad combination of types for cast\")\n@@ -416,8 +426,13 @@ fn const_expr_unchecked(cx: @CrateContext, e: @ast::expr) -> ValueRef {\n             assert pth.types.len() == 0;\n             match cx.tcx.def_map.find(&e.id) {\n                 Some(ast::def_fn(def_id, _purity)) => {\n-                    assert ast_util::is_local(def_id);\n-                    let f = base::get_item_val(cx, def_id.node);\n+                    let f = if !ast_util::is_local(def_id) {\n+                        let ty = csearch::get_type(cx.tcx, def_id).ty;\n+                        base::trans_external_path(cx, def_id, ty)\n+                    } else {\n+                        assert ast_util::is_local(def_id);\n+                        base::get_item_val(cx, def_id.node)\n+                    };\n                     let ety = ty::expr_ty_adjusted(cx.tcx, e);\n                     match ty::get(ety).sty {\n                         ty::ty_bare_fn(*) | ty::ty_ptr(*) => {"}, {"sha": "5fb07d6e7d8f61ba409dd44d80633b9b9b99d8bb", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 45, "deletions": 5, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/7140d7c52bdf55daf0b978a19706d20c3bf7ee92/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7140d7c52bdf55daf0b978a19706d20c3bf7ee92/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=7140d7c52bdf55daf0b978a19706d20c3bf7ee92", "patch": "@@ -138,6 +138,7 @@ use middle::trans::consts;\n use middle::trans::controlflow;\n use middle::trans::datum::*;\n use middle::trans::debuginfo;\n+use middle::trans::inline;\n use middle::trans::machine;\n use middle::trans::meth;\n use middle::trans::tvec;\n@@ -984,15 +985,54 @@ fn trans_lvalue_unadjusted(bcx: block, expr: @ast::expr) -> DatumBlock {\n         match def {\n             ast::def_const(did) => {\n                 let const_ty = expr_ty(bcx, ref_expr);\n-                let val = if did.crate == ast::local_crate {\n+\n+                #[cfg(stage0)]\n+                fn get_did(_ccx: @CrateContext, did: ast::def_id)\n+                    -> ast::def_id {\n+                    did\n+                }\n+\n+                #[cfg(stage1)]\n+                #[cfg(stage2)]\n+                #[cfg(stage3)]\n+                fn get_did(ccx: @CrateContext, did: ast::def_id)\n+                    -> ast::def_id {\n+                    if did.crate != ast::local_crate {\n+                        inline::maybe_instantiate_inline(ccx, did, true)\n+                    } else {\n+                        did\n+                    }\n+                }\n+\n+                #[cfg(stage0)]\n+                fn get_val(bcx: block, did: ast::def_id, const_ty: ty::t)\n+                    -> ValueRef {\n+                    let ccx = bcx.ccx();\n+                    if did.crate == ast::local_crate {\n+                        // The LLVM global has the type of its initializer,\n+                        // which may not be equal to the enum's type for\n+                        // non-C-like enums.\n+                        PointerCast(bcx, base::get_item_val(ccx, did.node),\n+                                    T_ptr(type_of(bcx.ccx(), const_ty)))\n+                    } else {\n+                        base::trans_external_path(ccx, did, const_ty)\n+                    }\n+                }\n+\n+                #[cfg(stage1)]\n+                #[cfg(stage2)]\n+                #[cfg(stage3)]\n+                fn get_val(bcx: block, did: ast::def_id, const_ty: ty::t)\n+                    -> ValueRef {\n                     // The LLVM global has the type of its initializer,\n                     // which may not be equal to the enum's type for\n                     // non-C-like enums.\n-                    PointerCast(bcx, base::get_item_val(ccx, did.node),\n+                    PointerCast(bcx, base::get_item_val(bcx.ccx(), did.node),\n                                 T_ptr(type_of(bcx.ccx(), const_ty)))\n-                } else {\n-                    base::trans_external_path(ccx, did, const_ty)\n-                };\n+                }\n+\n+                let did = get_did(ccx, did);\n+                let val = get_val(bcx, did, const_ty);\n                 DatumBlock {\n                     bcx: bcx,\n                     datum: Datum {val: val,"}, {"sha": "80b13341e54e195f5430a953bc8af011dcdf116d", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 49, "deletions": 1, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/7140d7c52bdf55daf0b978a19706d20c3bf7ee92/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7140d7c52bdf55daf0b978a19706d20c3bf7ee92/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=7140d7c52bdf55daf0b978a19706d20c3bf7ee92", "patch": "@@ -93,7 +93,7 @@ use middle::typeck::check::method::TransformTypeNormally;\n use middle::typeck::check::regionmanip::replace_bound_regions_in_fn_sig;\n use middle::typeck::check::vtable::{LocationInfo, VtableContext};\n use middle::typeck::CrateCtxt;\n-use middle::typeck::infer::{resolve_type, force_tvar};\n+use middle::typeck::infer::{resolve_type, force_tvar, mk_eqty};\n use middle::typeck::infer;\n use middle::typeck::rscope::{binding_rscope, bound_self_region};\n use middle::typeck::rscope::{RegionError};\n@@ -2452,6 +2452,44 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n             let t_1_is_scalar = type_is_scalar(fcx, expr.span, t_1);\n             if type_is_c_like_enum(fcx,expr.span,t_e) && t_1_is_scalar {\n                 /* this case is allowed */\n+            } else if type_is_region_ptr(fcx, expr.span, t_e) &&\n+                      type_is_unsafe_ptr(fcx, expr.span, t_1) {\n+\n+                fn is_vec(t: ty::t) -> bool {\n+                    match ty::get(t).sty {\n+                      ty::ty_evec(_,_) => true,\n+                      _ => false\n+                    }\n+                }\n+                fn types_compatible(fcx: @mut FnCtxt, sp: span, t1: ty::t,\n+                                    t2: ty::t) -> bool {\n+                    if !is_vec(t1) {\n+                        false\n+                    } else {\n+                        let el = ty::sequence_element_type(fcx.tcx(), t1);\n+                        infer::mk_eqty(fcx.infcx(), false, sp, el, t2).is_ok()\n+                    }\n+                }\n+\n+                // Due to the limitations of LLVM global constants,\n+                // region pointers end up pointing at copies of\n+                // vector elements instead of the original values.\n+                // To allow unsafe pointers to work correctly, we\n+                // need to special-case obtaining an unsafe pointer\n+                // from a region pointer to a vector.\n+\n+                /* this cast is only allowed from &[T] to *T or\n+                   &T to *T. */\n+                let te = structurally_resolved_type(fcx, e.span, t_e);\n+                match (&ty::get(te).sty, &ty::get(t_1).sty) {\n+                  (&ty::ty_rptr(_, mt1), &ty::ty_ptr(mt2))\n+                    if types_compatible(fcx, e.span, mt1.ty, mt2.ty) => {\n+                      /* this case is allowed */\n+                  }\n+                  _ => {\n+                    demand::coerce(fcx, e.span, t_1, e);\n+                  }\n+                }\n             } else if !(type_is_scalar(fcx,expr.span,t_e) && t_1_is_scalar) {\n                 /*\n                 If more type combinations should be supported than are\n@@ -3081,6 +3119,16 @@ pub fn type_is_scalar(fcx: @mut FnCtxt, sp: span, typ: ty::t) -> bool {\n     return ty::type_is_scalar(typ_s);\n }\n \n+pub fn type_is_unsafe_ptr(fcx: @mut FnCtxt, sp: span, typ: ty::t) -> bool {\n+    let typ_s = structurally_resolved_type(fcx, sp, typ);\n+    return ty::type_is_unsafe_ptr(typ_s);\n+}\n+\n+pub fn type_is_region_ptr(fcx: @mut FnCtxt, sp: span, typ: ty::t) -> bool {\n+    let typ_s = structurally_resolved_type(fcx, sp, typ);\n+    return ty::type_is_region_ptr(typ_s);\n+}\n+\n pub fn type_is_c_like_enum(fcx: @mut FnCtxt, sp: span, typ: ty::t) -> bool {\n     let typ_s = structurally_resolved_type(fcx, sp, typ);\n     return ty::type_is_c_like_enum(fcx.ccx.tcx, typ_s);"}, {"sha": "b2dd0cc8e586059cfb965433dfb9321c9489dbbd", "filename": "src/test/auxiliary/cci_const.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7140d7c52bdf55daf0b978a19706d20c3bf7ee92/src%2Ftest%2Fauxiliary%2Fcci_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7140d7c52bdf55daf0b978a19706d20c3bf7ee92/src%2Ftest%2Fauxiliary%2Fcci_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_const.rs?ref=7140d7c52bdf55daf0b978a19706d20c3bf7ee92", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub extern fn bar() {\n+}\n+\n+pub const foopy: &static/str = \"hi there\";\n+pub const uint_val: uint = 12;\n+pub const uint_expr: uint = (1 << uint_val) - 1;"}, {"sha": "a083757a0eb9a7fc732adf20bb096ba5f9badc90", "filename": "src/test/compile-fail/cast-vector-to-unsafe-nonstatic.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7140d7c52bdf55daf0b978a19706d20c3bf7ee92/src%2Ftest%2Fcompile-fail%2Fcast-vector-to-unsafe-nonstatic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7140d7c52bdf55daf0b978a19706d20c3bf7ee92/src%2Ftest%2Fcompile-fail%2Fcast-vector-to-unsafe-nonstatic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcast-vector-to-unsafe-nonstatic.rs?ref=7140d7c52bdf55daf0b978a19706d20c3bf7ee92", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let foo = ['h' as u8, 'i' as u8, 0 as u8];\n+    let bar = &foo as *u8; //~ ERROR mismatched types\n+}\n\\ No newline at end of file"}, {"sha": "08fa6915106fe123493a2ea0a587d1dafe69d466", "filename": "src/test/compile-fail/const-cast-different-types.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7140d7c52bdf55daf0b978a19706d20c3bf7ee92/src%2Ftest%2Fcompile-fail%2Fconst-cast-different-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7140d7c52bdf55daf0b978a19706d20c3bf7ee92/src%2Ftest%2Fcompile-fail%2Fconst-cast-different-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-cast-different-types.rs?ref=7140d7c52bdf55daf0b978a19706d20c3bf7ee92", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+const a: &static/str = &\"foo\";\n+const b: *u8 = a as *u8; //~ ERROR non-scalar cast\n+const c: *u8 = &a as *u8; //~ ERROR mismatched types\n+\n+fn main() {\n+}\n\\ No newline at end of file"}, {"sha": "fe91056d47b6f847b909be3c39b989aea562345d", "filename": "src/test/compile-fail/const-cast-wrong-type.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7140d7c52bdf55daf0b978a19706d20c3bf7ee92/src%2Ftest%2Fcompile-fail%2Fconst-cast-wrong-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7140d7c52bdf55daf0b978a19706d20c3bf7ee92/src%2Ftest%2Fcompile-fail%2Fconst-cast-wrong-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-cast-wrong-type.rs?ref=7140d7c52bdf55daf0b978a19706d20c3bf7ee92", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+const a: [u8 * 3] = ['h' as u8, 'i' as u8, 0 as u8];\n+const b: *i8 = &a as *i8; //~ ERROR mismatched types\n+\n+fn main() {\n+}\n\\ No newline at end of file"}, {"sha": "559e11efcffda389bf00ccc3ef89c2f34a54dc8c", "filename": "src/test/run-pass/const-cast-ptr-int.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7140d7c52bdf55daf0b978a19706d20c3bf7ee92/src%2Ftest%2Frun-pass%2Fconst-cast-ptr-int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7140d7c52bdf55daf0b978a19706d20c3bf7ee92/src%2Ftest%2Frun-pass%2Fconst-cast-ptr-int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-cast-ptr-int.rs?ref=7140d7c52bdf55daf0b978a19706d20c3bf7ee92", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+const a: *u8 = 0 as *u8;\n+\n+fn main() {\n+    assert a == ptr::null();\n+}\n\\ No newline at end of file"}, {"sha": "9174b45d1000c1e17c3952433b0d89eaf6569e80", "filename": "src/test/run-pass/const-cast.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7140d7c52bdf55daf0b978a19706d20c3bf7ee92/src%2Ftest%2Frun-pass%2Fconst-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7140d7c52bdf55daf0b978a19706d20c3bf7ee92/src%2Ftest%2Frun-pass%2Fconst-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-cast.rs?ref=7140d7c52bdf55daf0b978a19706d20c3bf7ee92", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern fn foo() {}\n+\n+const x: *u8 = foo;\n+const y: *libc::c_void = x as *libc::c_void;\n+const a: &static/int = &10;\n+const b: *int = a as *int;\n+\n+fn main() {\n+    assert x as *libc::c_void == y;\n+    assert a as *int == b;\n+}\n\\ No newline at end of file"}, {"sha": "eb3c482737c222a38b6826584f7fc37f39302b1d", "filename": "src/test/run-pass/const-cross-crate-const.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/7140d7c52bdf55daf0b978a19706d20c3bf7ee92/src%2Ftest%2Frun-pass%2Fconst-cross-crate-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7140d7c52bdf55daf0b978a19706d20c3bf7ee92/src%2Ftest%2Frun-pass%2Fconst-cross-crate-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-cross-crate-const.rs?ref=7140d7c52bdf55daf0b978a19706d20c3bf7ee92", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// xfail-fast\n+// aux-build:cci_const.rs\n+\n+extern mod cci_const;\n+const foo: &static/str = cci_const::foopy;\n+const a: uint = cci_const::uint_val;\n+const b: uint = cci_const::uint_expr + 5;\n+\n+fn main() {\n+    assert a == 12;\n+    let foo2 = a;\n+    assert foo2 == cci_const::uint_val;\n+    assert b == cci_const::uint_expr + 5;\n+    assert foo == cci_const::foopy;\n+}"}, {"sha": "e86118f3c433c4fcead53384178b1fdffce98835", "filename": "src/test/run-pass/const-cross-crate-extern.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7140d7c52bdf55daf0b978a19706d20c3bf7ee92/src%2Ftest%2Frun-pass%2Fconst-cross-crate-extern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7140d7c52bdf55daf0b978a19706d20c3bf7ee92/src%2Ftest%2Frun-pass%2Fconst-cross-crate-extern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-cross-crate-extern.rs?ref=7140d7c52bdf55daf0b978a19706d20c3bf7ee92", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// xfail-fast\n+// aux-build:cci_const.rs\n+\n+extern mod cci_const;\n+use cci_const::bar;\n+const foo: *u8 = bar;\n+\n+fn main() {\n+    assert foo == cci_const::bar;\n+}"}, {"sha": "3438e65f05fad9d6227225029875eaf6c992bbda", "filename": "src/test/run-pass/const-str-ptr.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7140d7c52bdf55daf0b978a19706d20c3bf7ee92/src%2Ftest%2Frun-pass%2Fconst-str-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7140d7c52bdf55daf0b978a19706d20c3bf7ee92/src%2Ftest%2Frun-pass%2Fconst-str-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-str-ptr.rs?ref=7140d7c52bdf55daf0b978a19706d20c3bf7ee92", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+const a: [u8 * 3] = ['h' as u8, 'i' as u8, 0 as u8];\n+const c: &static/[u8 * 3] = &a;\n+const b: *u8 = c as *u8;\n+\n+fn main() {\n+    let foo = &a as *u8;\n+    assert unsafe { str::raw::from_bytes(a) } == ~\"hi\\x00\";\n+    assert unsafe { str::raw::from_buf(foo) } == ~\"hi\";\n+    assert unsafe { str::raw::from_buf(b) } == ~\"hi\";\n+    assert unsafe { *b == a[0] };\n+    assert unsafe { *(&c[0] as *u8) == a[0] };\n+}\n\\ No newline at end of file"}]}