{"sha": "5a83fa271d9ea85bca163c26dc8896ac394976e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhODNmYTI3MWQ5ZWE4NWJjYTE2M2MyNmRjODg5NmFjMzk0OTc2ZTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-06T11:56:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-06T11:56:15Z"}, "message": "Auto merge of #25120 - bluss:sliceconcatext, r=alexcrichton\n\ncollections: Convert SliceConcatExt to use associated types\r\n\r\nCoherence now allows this, we have `SliceConcatExt<T> for [V] where T: Sized + Clone` and` SliceConcatExt<str> for [S]`, these don't conflict because\r\nstr is never Sized.", "tree": {"sha": "6485fb2a4a3d7966c16751301c97568f324db7a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6485fb2a4a3d7966c16751301c97568f324db7a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a83fa271d9ea85bca163c26dc8896ac394976e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a83fa271d9ea85bca163c26dc8896ac394976e4", "html_url": "https://github.com/rust-lang/rust/commit/5a83fa271d9ea85bca163c26dc8896ac394976e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a83fa271d9ea85bca163c26dc8896ac394976e4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc45fd99f5560c4ca731ba221ffaeb8ad4ba749c", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc45fd99f5560c4ca731ba221ffaeb8ad4ba749c", "html_url": "https://github.com/rust-lang/rust/commit/fc45fd99f5560c4ca731ba221ffaeb8ad4ba749c"}, {"sha": "2ca77f1c96f60b44c0d51d7d69046ad9a8532a46", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ca77f1c96f60b44c0d51d7d69046ad9a8532a46", "html_url": "https://github.com/rust-lang/rust/commit/2ca77f1c96f60b44c0d51d7d69046ad9a8532a46"}], "stats": {"total": 20, "additions": 14, "deletions": 6}, "files": [{"sha": "8eb7995c42218838215bc0730396b69d261497f2", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5a83fa271d9ea85bca163c26dc8896ac394976e4/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a83fa271d9ea85bca163c26dc8896ac394976e4/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=5a83fa271d9ea85bca163c26dc8896ac394976e4", "patch": "@@ -996,9 +996,13 @@ impl<T> [T] {\n ////////////////////////////////////////////////////////////////////////////////\n // Extension traits for slices over specific kinds of data\n ////////////////////////////////////////////////////////////////////////////////\n-#[unstable(feature = \"collections\", reason = \"U should be an associated type\")]\n+#[unstable(feature = \"collections\", reason = \"recently changed\")]\n /// An extension trait for concatenating slices\n-pub trait SliceConcatExt<T: ?Sized, U> {\n+pub trait SliceConcatExt<T: ?Sized> {\n+    #[unstable(feature = \"collections\", reason = \"recently changed\")]\n+    /// The resulting type after concatenation\n+    type Output;\n+\n     /// Flattens a slice of `T` into a single value `U`.\n     ///\n     /// # Examples\n@@ -1007,7 +1011,7 @@ pub trait SliceConcatExt<T: ?Sized, U> {\n     /// assert_eq!([\"hello\", \"world\"].concat(), \"helloworld\");\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn concat(&self) -> U;\n+    fn concat(&self) -> Self::Output;\n \n     /// Flattens a slice of `T` into a single value `U`, placing a given separator between each.\n     ///\n@@ -1017,10 +1021,12 @@ pub trait SliceConcatExt<T: ?Sized, U> {\n     /// assert_eq!([\"hello\", \"world\"].connect(\" \"), \"hello world\");\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn connect(&self, sep: &T) -> U;\n+    fn connect(&self, sep: &T) -> Self::Output;\n }\n \n-impl<T: Clone, V: AsRef<[T]>> SliceConcatExt<T, Vec<T>> for [V] {\n+impl<T: Clone, V: AsRef<[T]>> SliceConcatExt<T> for [V] {\n+    type Output = Vec<T>;\n+\n     fn concat(&self) -> Vec<T> {\n         let size = self.iter().fold(0, |acc, v| acc + v.as_ref().len());\n         let mut result = Vec::with_capacity(size);"}, {"sha": "da1b4dcddfc38b508432573e0da072214a9f4338", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a83fa271d9ea85bca163c26dc8896ac394976e4/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a83fa271d9ea85bca163c26dc8896ac394976e4/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=5a83fa271d9ea85bca163c26dc8896ac394976e4", "patch": "@@ -83,7 +83,9 @@ pub use core::str::pattern;\n Section: Creating a string\n */\n \n-impl<S: AsRef<str>> SliceConcatExt<str, String> for [S] {\n+impl<S: AsRef<str>> SliceConcatExt<str> for [S] {\n+    type Output = String;\n+\n     fn concat(&self) -> String {\n         if self.is_empty() {\n             return String::new();"}]}