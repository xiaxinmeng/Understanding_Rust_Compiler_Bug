{"sha": "2feabc4dc462644287372922928110eea4c60ca7", "node_id": "C_kwDOAAsO6NoAKDJmZWFiYzRkYzQ2MjY0NDI4NzM3MjkyMjkyODExMGVlYTRjNjBjYTc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-22T11:43:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-22T11:43:42Z"}, "message": "Auto merge of #14622 - alibektas:make_ty_alias, r=alibektas\n\nAdd syntax::make::ty_alias\n\nThere was until now no function that returns TypeAlias. This commit introduces a func that is fully compliant with the Rust Reference. I had problems working with Ident so for now the function uses simple string manipulation until ast_from_text function is called. I am however open to any ideas that could replace ident param in such a way that it accepts syntax::ast::Ident", "tree": {"sha": "575e4b2aad3c44ee70cb97897da4974c568b81a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/575e4b2aad3c44ee70cb97897da4974c568b81a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2feabc4dc462644287372922928110eea4c60ca7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2feabc4dc462644287372922928110eea4c60ca7", "html_url": "https://github.com/rust-lang/rust/commit/2feabc4dc462644287372922928110eea4c60ca7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2feabc4dc462644287372922928110eea4c60ca7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5750d81e3032cf925aa9422a8ac128a2b3a1950c", "url": "https://api.github.com/repos/rust-lang/rust/commits/5750d81e3032cf925aa9422a8ac128a2b3a1950c", "html_url": "https://github.com/rust-lang/rust/commit/5750d81e3032cf925aa9422a8ac128a2b3a1950c"}, {"sha": "e275f77b2cb070e84f76e9e493560d2d9a531bff", "url": "https://api.github.com/repos/rust-lang/rust/commits/e275f77b2cb070e84f76e9e493560d2d9a531bff", "html_url": "https://github.com/rust-lang/rust/commit/e275f77b2cb070e84f76e9e493560d2d9a531bff"}], "stats": {"total": 41, "additions": 41, "deletions": 0}, "files": [{"sha": "cc0d7f4b48e335cfb123dfb6a52379e0ee49532c", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/2feabc4dc462644287372922928110eea4c60ca7/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2feabc4dc462644287372922928110eea4c60ca7/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=2feabc4dc462644287372922928110eea4c60ca7", "patch": "@@ -158,6 +158,47 @@ fn ty_from_text(text: &str) -> ast::Type {\n     ast_from_text(&format!(\"type _T = {text};\"))\n }\n \n+/// Related goto [link](https://doc.rust-lang.org/reference/items/type-aliases.html)\n+/// Type Alias syntax is\n+/// ```\n+/// TypeAlias :\n+/// type IDENTIFIER GenericParams? ( : TypeParamBounds )? WhereClause? ( = Type WhereClause?)? ;\n+/// ```\n+/// FIXME : ident should be of type ast::Ident\n+pub fn ty_alias(\n+    ident: &str,\n+    generic_param_list: Option<ast::GenericParamList>,\n+    type_param_bounds: Option<ast::TypeParam>,\n+    where_clause: Option<ast::WhereClause>,\n+    assignment: Option<(ast::Type, Option<ast::WhereClause>)>,\n+) -> ast::TypeAlias {\n+    let mut s = String::new();\n+    s.push_str(&format!(\"type {}\", ident));\n+\n+    if let Some(list) = generic_param_list {\n+        s.push_str(&list.to_string());\n+    }\n+\n+    if let Some(list) = type_param_bounds {\n+        s.push_str(&format!(\" : {}\", &list));\n+    }\n+\n+    if let Some(cl) = where_clause {\n+        s.push_str(&format!(\" {}\", &cl.to_string()));\n+    }\n+\n+    if let Some(exp) = assignment {\n+        if let Some(cl) = exp.1 {\n+            s.push_str(&format!(\"= {} {}\", &exp.0.to_string(), &cl.to_string()));\n+        } else {\n+            s.push_str(&format!(\"= {}\", &exp.0.to_string()));\n+        }\n+    }\n+\n+    s.push_str(\";\");\n+    ast_from_text(&s)\n+}\n+\n pub fn assoc_item_list() -> ast::AssocItemList {\n     ast_from_text(\"impl C for D {}\")\n }"}]}