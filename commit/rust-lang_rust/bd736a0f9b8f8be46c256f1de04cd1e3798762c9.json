{"sha": "bd736a0f9b8f8be46c256f1de04cd1e3798762c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkNzM2YTBmOWI4ZjhiZTQ2YzI1NmYxZGUwNGNkMWUzNzk4NzYyYzk=", "commit": {"author": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-08-21T01:59:47Z"}, "committer": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-08-21T02:00:06Z"}, "message": "oops, remove #[cfg(stage1)]s from arc::unwrap functions+tests", "tree": {"sha": "9b03135c7d32690f043dc11beac5c53a24e8b7b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b03135c7d32690f043dc11beac5c53a24e8b7b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd736a0f9b8f8be46c256f1de04cd1e3798762c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd736a0f9b8f8be46c256f1de04cd1e3798762c9", "html_url": "https://github.com/rust-lang/rust/commit/bd736a0f9b8f8be46c256f1de04cd1e3798762c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd736a0f9b8f8be46c256f1de04cd1e3798762c9/comments", "author": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1aa50bba7c11b8d3e2e66bd55913214fcb05a3cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/1aa50bba7c11b8d3e2e66bd55913214fcb05a3cc", "html_url": "https://github.com/rust-lang/rust/commit/1aa50bba7c11b8d3e2e66bd55913214fcb05a3cc"}], "stats": {"total": 9, "additions": 0, "deletions": 9}, "files": [{"sha": "0f6040ed6e088557bce53bb8d6c9b31bec9edcf0", "filename": "src/libcore/unsafe.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bd736a0f9b8f8be46c256f1de04cd1e3798762c9/src%2Flibcore%2Funsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd736a0f9b8f8be46c256f1de04cd1e3798762c9/src%2Flibcore%2Funsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funsafe.rs?ref=bd736a0f9b8f8be46c256f1de04cd1e3798762c9", "patch": "@@ -330,7 +330,6 @@ impl<T: send> Exclusive<T> {\n }\n \n // FIXME(#2585) make this a by-move method on the exclusive\n-#[cfg(stage1)]\n fn unwrap_exclusive<T: send>(+arc: Exclusive<T>) -> T {\n     let Exclusive { x: x } = arc;\n     let inner = unsafe { unwrap_shared_mutable_state(x) };\n@@ -426,14 +425,12 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg(stage1)]\n     fn exclusive_unwrap_basic() {\n         let x = exclusive(~~\"hello\");\n         assert unwrap_exclusive(x) == ~~\"hello\";\n     }\n \n     #[test]\n-    #[cfg(stage1)]\n     fn exclusive_unwrap_contended() {\n         let x = exclusive(~~\"hello\");\n         let x2 = ~mut some(x.clone());\n@@ -459,7 +456,6 @@ mod tests {\n     }\n \n     #[test] #[should_fail] #[ignore(cfg(windows))]\n-    #[cfg(stage1)]\n     fn exclusive_unwrap_conflict() {\n         let x = exclusive(~~\"hello\");\n         let x2 = ~mut some(x.clone());\n@@ -474,7 +470,6 @@ mod tests {\n     }\n \n     #[test] #[ignore(cfg(windows))]\n-    #[cfg(stage1)]\n     fn exclusive_unwrap_deadlock() {\n         // This is not guaranteed to get to the deadlock before being killed,\n         // but it will show up sometimes, and if the deadlock were not there,"}, {"sha": "531140c7e48d4f6f983e1bb66af4766bd6a03ba4", "filename": "src/libstd/arc.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd736a0f9b8f8be46c256f1de04cd1e3798762c9/src%2Flibstd%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd736a0f9b8f8be46c256f1de04cd1e3798762c9/src%2Flibstd%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farc.rs?ref=bd736a0f9b8f8be46c256f1de04cd1e3798762c9", "patch": "@@ -93,7 +93,6 @@ fn clone<T: const send>(rc: &arc<T>) -> arc<T> {\n     arc { x: unsafe { clone_shared_mutable_state(&rc.x) } }\n }\n \n-#[cfg(stage1)]\n fn unwrap<T: const send>(+rc: arc<T>) -> T {\n     let arc { x: x } = rc;\n     unsafe { unwrap_shared_mutable_state(x) }\n@@ -188,7 +187,6 @@ impl<T: send> &mutex_arc<T> {\n }\n \n // FIXME(#2585) make this a by-move method on the arc\n-#[cfg(stage1)]\n fn unwrap_mutex_arc<T: send>(+arc: mutex_arc<T>) -> T {\n     let mutex_arc { x: x } = arc;\n     let inner = unsafe { unwrap_shared_mutable_state(x) };\n@@ -366,7 +364,6 @@ impl<T: const send> &rw_arc<T> {\n }\n \n // FIXME(#2585) make this a by-move method on the arc\n-#[cfg(stage1)]\n fn unwrap_rw_arc<T: const send>(+arc: rw_arc<T>) -> T {\n     let rw_arc { x: x, _ } = arc;\n     let inner = unsafe { unwrap_shared_mutable_state(x) };\n@@ -527,7 +524,6 @@ mod tests {\n         }\n     }\n     #[test] #[should_fail] #[ignore(cfg(windows))]\n-    #[cfg(stage1)]\n     fn test_mutex_arc_unwrap_poison() {\n         let arc = mutex_arc(1);\n         let arc2 = ~(&arc).clone();"}]}