{"sha": "c12748fab3a14beae4958f13551e7e6c52298490", "node_id": "C_kwDOAAsO6NoAKGMxMjc0OGZhYjNhMTRiZWFlNDk1OGYxMzU1MWU3ZTZjNTIyOTg0OTA", "commit": {"author": {"name": "feniljain", "email": "fkjainco@gmail.com", "date": "2023-04-01T11:03:17Z"}, "committer": {"name": "feniljain", "email": "fkjainco@gmail.com", "date": "2023-04-04T04:14:49Z"}, "message": "fix(needless_return): do not trigger on ambiguous match arms return", "tree": {"sha": "2f4f16e3cccb58ff24ac63dbafffe43227cce6e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f4f16e3cccb58ff24ac63dbafffe43227cce6e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c12748fab3a14beae4958f13551e7e6c52298490", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c12748fab3a14beae4958f13551e7e6c52298490", "html_url": "https://github.com/rust-lang/rust/commit/c12748fab3a14beae4958f13551e7e6c52298490", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c12748fab3a14beae4958f13551e7e6c52298490/comments", "author": {"login": "feniljain", "id": 49019259, "node_id": "MDQ6VXNlcjQ5MDE5MjU5", "avatar_url": "https://avatars.githubusercontent.com/u/49019259?v=4", "gravatar_id": "", "url": "https://api.github.com/users/feniljain", "html_url": "https://github.com/feniljain", "followers_url": "https://api.github.com/users/feniljain/followers", "following_url": "https://api.github.com/users/feniljain/following{/other_user}", "gists_url": "https://api.github.com/users/feniljain/gists{/gist_id}", "starred_url": "https://api.github.com/users/feniljain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/feniljain/subscriptions", "organizations_url": "https://api.github.com/users/feniljain/orgs", "repos_url": "https://api.github.com/users/feniljain/repos", "events_url": "https://api.github.com/users/feniljain/events{/privacy}", "received_events_url": "https://api.github.com/users/feniljain/received_events", "type": "User", "site_admin": false}, "committer": {"login": "feniljain", "id": 49019259, "node_id": "MDQ6VXNlcjQ5MDE5MjU5", "avatar_url": "https://avatars.githubusercontent.com/u/49019259?v=4", "gravatar_id": "", "url": "https://api.github.com/users/feniljain", "html_url": "https://github.com/feniljain", "followers_url": "https://api.github.com/users/feniljain/followers", "following_url": "https://api.github.com/users/feniljain/following{/other_user}", "gists_url": "https://api.github.com/users/feniljain/gists{/gist_id}", "starred_url": "https://api.github.com/users/feniljain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/feniljain/subscriptions", "organizations_url": "https://api.github.com/users/feniljain/orgs", "repos_url": "https://api.github.com/users/feniljain/repos", "events_url": "https://api.github.com/users/feniljain/events{/privacy}", "received_events_url": "https://api.github.com/users/feniljain/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29987062d9c807bf38a1d46f73b0ca1f3666e88f", "url": "https://api.github.com/repos/rust-lang/rust/commits/29987062d9c807bf38a1d46f73b0ca1f3666e88f", "html_url": "https://github.com/rust-lang/rust/commit/29987062d9c807bf38a1d46f73b0ca1f3666e88f"}], "stats": {"total": 50, "additions": 34, "deletions": 16}, "files": [{"sha": "b8172b74dc011974d0f15153aded4b7eb73c3382", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c12748fab3a14beae4958f13551e7e6c52298490/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c12748fab3a14beae4958f13551e7e6c52298490/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=c12748fab3a14beae4958f13551e7e6c52298490", "patch": "@@ -9,7 +9,7 @@ use rustc_hir::intravisit::FnKind;\n use rustc_hir::{Block, Body, Expr, ExprKind, FnDecl, LangItem, MatchSource, PatKind, QPath, StmtKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n-use rustc_middle::ty::subst::GenericArgKind;\n+use rustc_middle::ty::{self, subst::GenericArgKind, Ty};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::def_id::LocalDefId;\n use rustc_span::source_map::Span;\n@@ -175,7 +175,7 @@ impl<'tcx> LateLintPass<'tcx> for Return {\n                 } else {\n                     RetReplacement::Empty\n                 };\n-                check_final_expr(cx, body.value, vec![], replacement);\n+                check_final_expr(cx, body.value, vec![], replacement, None);\n             },\n             FnKind::ItemFn(..) | FnKind::Method(..) => {\n                 check_block_return(cx, &body.value.kind, sp, vec![]);\n@@ -188,11 +188,11 @@ impl<'tcx> LateLintPass<'tcx> for Return {\n fn check_block_return<'tcx>(cx: &LateContext<'tcx>, expr_kind: &ExprKind<'tcx>, sp: Span, mut semi_spans: Vec<Span>) {\n     if let ExprKind::Block(block, _) = expr_kind {\n         if let Some(block_expr) = block.expr {\n-            check_final_expr(cx, block_expr, semi_spans, RetReplacement::Empty);\n+            check_final_expr(cx, block_expr, semi_spans, RetReplacement::Empty, None);\n         } else if let Some(stmt) = block.stmts.iter().last() {\n             match stmt.kind {\n                 StmtKind::Expr(expr) => {\n-                    check_final_expr(cx, expr, semi_spans, RetReplacement::Empty);\n+                    check_final_expr(cx, expr, semi_spans, RetReplacement::Empty, None);\n                 },\n                 StmtKind::Semi(semi_expr) => {\n                     // Remove ending semicolons and any whitespace ' ' in between.\n@@ -202,7 +202,7 @@ fn check_block_return<'tcx>(cx: &LateContext<'tcx>, expr_kind: &ExprKind<'tcx>,\n                             span_find_starting_semi(cx.sess().source_map(), semi_span.with_hi(sp.hi()));\n                         semi_spans.push(semi_span_to_remove);\n                     }\n-                    check_final_expr(cx, semi_expr, semi_spans, RetReplacement::Empty);\n+                    check_final_expr(cx, semi_expr, semi_spans, RetReplacement::Empty, None);\n                 },\n                 _ => (),\n             }\n@@ -216,6 +216,7 @@ fn check_final_expr<'tcx>(\n     semi_spans: Vec<Span>, /* containing all the places where we would need to remove semicolons if finding an\n                             * needless return */\n     replacement: RetReplacement<'tcx>,\n+    match_ty_opt: Option<Ty<'_>>,\n ) {\n     let peeled_drop_expr = expr.peel_drop_temps();\n     match &peeled_drop_expr.kind {\n@@ -244,7 +245,22 @@ fn check_final_expr<'tcx>(\n                     RetReplacement::Expr(snippet, applicability)\n                 }\n             } else {\n-                replacement\n+                match match_ty_opt {\n+                    Some(match_ty) => {\n+                        match match_ty.kind() {\n+                            // If the code got till here with\n+                            // tuple not getting detected before it,\n+                            // then we are sure it's going to be Unit\n+                            // type\n+                            ty::Tuple(_) => RetReplacement::Unit,\n+                            // We don't want to anything in this case\n+                            // cause we can't predict what the user would\n+                            // want here\n+                            _ => return,\n+                        }\n+                    },\n+                    None => replacement,\n+                }\n             };\n \n             if !cx.tcx.hir().attrs(expr.hir_id).is_empty() {\n@@ -268,8 +284,9 @@ fn check_final_expr<'tcx>(\n         // note, if without else is going to be a type checking error anyways\n         // (except for unit type functions) so we don't match it\n         ExprKind::Match(_, arms, MatchSource::Normal) => {\n+            let match_ty = cx.typeck_results().expr_ty(peeled_drop_expr);\n             for arm in arms.iter() {\n-                check_final_expr(cx, arm.body, semi_spans.clone(), RetReplacement::Unit);\n+                check_final_expr(cx, arm.body, semi_spans.clone(), RetReplacement::Empty, Some(match_ty));\n             }\n         },\n         // if it's a whole block, check it\n@@ -293,6 +310,7 @@ fn emit_return_lint(cx: &LateContext<'_>, ret_span: Span, semi_spans: Vec<Span>,\n     if ret_span.from_expansion() {\n         return;\n     }\n+\n     let applicability = replacement.applicability().unwrap_or(Applicability::MachineApplicable);\n     let return_replacement = replacement.to_string();\n     let sugg_help = replacement.sugg_help();"}, {"sha": "38ae448618c02cd28890b104cfd85b5bc01d0264", "filename": "tests/ui/needless_return.fixed", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c12748fab3a14beae4958f13551e7e6c52298490/tests%2Fui%2Fneedless_return.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/c12748fab3a14beae4958f13551e7e6c52298490/tests%2Fui%2Fneedless_return.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.fixed?ref=c12748fab3a14beae4958f13551e7e6c52298490", "patch": "@@ -81,7 +81,7 @@ fn test_void_if_fun(b: bool) {\n fn test_void_match(x: u32) {\n     match x {\n         0 => (),\n-        _ => (),\n+        _ =>(),\n     }\n }\n \n@@ -91,7 +91,7 @@ fn test_nested_match(x: u32) {\n         1 => {\n             let _ = 42;\n         },\n-        _ => (),\n+        _ =>(),\n     }\n }\n \n@@ -196,7 +196,7 @@ async fn async_test_void_if_fun(b: bool) {\n async fn async_test_void_match(x: u32) {\n     match x {\n         0 => (),\n-        _ => (),\n+        _ =>(),\n     }\n }\n "}, {"sha": "5d471a3c521477cbaae70e9bbd79da09e54ed87f", "filename": "tests/ui/needless_return.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c12748fab3a14beae4958f13551e7e6c52298490/tests%2Fui%2Fneedless_return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c12748fab3a14beae4958f13551e7e6c52298490/tests%2Fui%2Fneedless_return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.stderr?ref=c12748fab3a14beae4958f13551e7e6c52298490", "patch": "@@ -118,10 +118,10 @@ LL | |         return;\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:87:14\n+  --> $DIR/needless_return.rs:87:13\n    |\n LL |         _ => return,\n-   |              ^^^^^^\n+   |             ^^^^^^^\n    |\n    = help: replace `return` with a unit value\n \n@@ -136,10 +136,10 @@ LL | |             return;\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:98:14\n+  --> $DIR/needless_return.rs:98:13\n    |\n LL |         _ => return,\n-   |              ^^^^^^\n+   |             ^^^^^^^\n    |\n    = help: replace `return` with a unit value\n \n@@ -296,10 +296,10 @@ LL | |         return;\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:207:14\n+  --> $DIR/needless_return.rs:207:13\n    |\n LL |         _ => return,\n-   |              ^^^^^^\n+   |             ^^^^^^^\n    |\n    = help: replace `return` with a unit value\n "}]}