{"sha": "71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxYTM0ZDcyOGI3OWQwZjI5MGFhNmU3ZWViYWFkOGNkZDc4OWVjZDA=", "commit": {"author": {"name": "Jos\u00e9 manuel Barroso Galindo", "email": "theypsilon@gmail.com", "date": "2016-08-09T17:35:16Z"}, "committer": {"name": "Jos\u00e9 manuel Barroso Galindo", "email": "theypsilon@gmail.com", "date": "2016-08-09T17:35:16Z"}, "message": "Merge branch 'master' of github.com:theypsilon/rust", "tree": {"sha": "916838ad79c59630a8257d1f44154cd00b7de467", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/916838ad79c59630a8257d1f44154cd00b7de467"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "html_url": "https://github.com/rust-lang/rust/commit/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/comments", "author": {"login": "theypsilon", "id": 852246, "node_id": "MDQ6VXNlcjg1MjI0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/852246?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theypsilon", "html_url": "https://github.com/theypsilon", "followers_url": "https://api.github.com/users/theypsilon/followers", "following_url": "https://api.github.com/users/theypsilon/following{/other_user}", "gists_url": "https://api.github.com/users/theypsilon/gists{/gist_id}", "starred_url": "https://api.github.com/users/theypsilon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theypsilon/subscriptions", "organizations_url": "https://api.github.com/users/theypsilon/orgs", "repos_url": "https://api.github.com/users/theypsilon/repos", "events_url": "https://api.github.com/users/theypsilon/events{/privacy}", "received_events_url": "https://api.github.com/users/theypsilon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "theypsilon", "id": 852246, "node_id": "MDQ6VXNlcjg1MjI0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/852246?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theypsilon", "html_url": "https://github.com/theypsilon", "followers_url": "https://api.github.com/users/theypsilon/followers", "following_url": "https://api.github.com/users/theypsilon/following{/other_user}", "gists_url": "https://api.github.com/users/theypsilon/gists{/gist_id}", "starred_url": "https://api.github.com/users/theypsilon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theypsilon/subscriptions", "organizations_url": "https://api.github.com/users/theypsilon/orgs", "repos_url": "https://api.github.com/users/theypsilon/repos", "events_url": "https://api.github.com/users/theypsilon/events{/privacy}", "received_events_url": "https://api.github.com/users/theypsilon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e8ec4333c969bfa81231e54aa6e8ef203e87987", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e8ec4333c969bfa81231e54aa6e8ef203e87987", "html_url": "https://github.com/rust-lang/rust/commit/0e8ec4333c969bfa81231e54aa6e8ef203e87987"}, {"sha": "f0139140f6a2d1207cb21336b0faca69b5a337b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0139140f6a2d1207cb21336b0faca69b5a337b2", "html_url": "https://github.com/rust-lang/rust/commit/f0139140f6a2d1207cb21336b0faca69b5a337b2"}], "stats": {"total": 884, "additions": 691, "deletions": 193}, "files": [{"sha": "5cdf4ee88c00cd511016b2620908251d1f0dc126", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -973,8 +973,8 @@ impl<T> [T] {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    pub fn binary_search_by<F>(&self, f: F) -> Result<usize, usize>\n-        where F: FnMut(&T) -> Ordering\n+    pub fn binary_search_by<'a, F>(&'a self, f: F) -> Result<usize, usize>\n+        where F: FnMut(&'a T) -> Ordering\n     {\n         core_slice::SliceExt::binary_search_by(self, f)\n     }\n@@ -1009,8 +1009,8 @@ impl<T> [T] {\n     /// ```\n     #[stable(feature = \"slice_binary_search_by_key\", since = \"1.10.0\")]\n     #[inline]\n-    pub fn binary_search_by_key<B, F>(&self, b: &B, f: F) -> Result<usize, usize>\n-        where F: FnMut(&T) -> B,\n+    pub fn binary_search_by_key<'a, B, F>(&'a self, b: &B, f: F) -> Result<usize, usize>\n+        where F: FnMut(&'a T) -> B,\n               B: Ord\n     {\n         core_slice::SliceExt::binary_search_by_key(self, b, f)"}, {"sha": "70b514afd035f1d17d446c0dbbee6f158b1eb950", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -1874,6 +1874,27 @@ impl<'a> From<String> for Cow<'a, str> {\n     }\n }\n \n+#[stable(feature = \"cow_str_from_iter\", since = \"1.12.0\")]\n+impl<'a> FromIterator<char> for Cow<'a, str> {\n+    fn from_iter<I: IntoIterator<Item = char>>(it: I) -> Cow<'a, str> {\n+        Cow::Owned(FromIterator::from_iter(it))\n+    }\n+}\n+\n+#[stable(feature = \"cow_str_from_iter\", since = \"1.12.0\")]\n+impl<'a, 'b> FromIterator<&'b str> for Cow<'a, str> {\n+    fn from_iter<I: IntoIterator<Item = &'b str>>(it: I) -> Cow<'a, str> {\n+        Cow::Owned(FromIterator::from_iter(it))\n+    }\n+}\n+\n+#[stable(feature = \"cow_str_from_iter\", since = \"1.12.0\")]\n+impl<'a> FromIterator<String> for Cow<'a, str> {\n+    fn from_iter<I: IntoIterator<Item = String>>(it: I) -> Cow<'a, str> {\n+        Cow::Owned(FromIterator::from_iter(it))\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Into<Vec<u8>> for String {\n     fn into(self) -> Vec<u8> {"}, {"sha": "434084d3af8653f9888fb3f41cc75c1a19f5ffd2", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 116, "deletions": 9, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -147,10 +147,13 @@\n use clone::Clone;\n use cmp::{PartialEq, Eq, PartialOrd, Ord, Ordering};\n use default::Default;\n-use marker::{Copy, Send, Sync, Sized, Unsize};\n+use fmt::{self, Debug, Display};\n+use marker::{Copy, PhantomData, Send, Sync, Sized, Unsize};\n use ops::{Deref, DerefMut, Drop, FnOnce, CoerceUnsized};\n use option::Option;\n use option::Option::{None, Some};\n+use result::Result;\n+use result::Result::{Ok, Err};\n \n /// A mutable memory location that admits only `Copy` data.\n ///\n@@ -347,6 +350,46 @@ pub enum BorrowState {\n     Unused,\n }\n \n+/// An error returned by [`RefCell::try_borrow`](struct.RefCell.html#method.try_borrow).\n+#[unstable(feature = \"try_borrow\", issue = \"35070\")]\n+pub struct BorrowError<'a, T: 'a + ?Sized> {\n+    marker: PhantomData<&'a RefCell<T>>,\n+}\n+\n+#[unstable(feature = \"try_borrow\", issue = \"35070\")]\n+impl<'a, T: ?Sized> Debug for BorrowError<'a, T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_struct(\"BorrowError\").finish()\n+    }\n+}\n+\n+#[unstable(feature = \"try_borrow\", issue = \"35070\")]\n+impl<'a, T: ?Sized> Display for BorrowError<'a, T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        Display::fmt(\"already mutably borrowed\", f)\n+    }\n+}\n+\n+/// An error returned by [`RefCell::try_borrow_mut`](struct.RefCell.html#method.try_borrow_mut).\n+#[unstable(feature = \"try_borrow\", issue = \"35070\")]\n+pub struct BorrowMutError<'a, T: 'a + ?Sized> {\n+    marker: PhantomData<&'a RefCell<T>>,\n+}\n+\n+#[unstable(feature = \"try_borrow\", issue = \"35070\")]\n+impl<'a, T: ?Sized> Debug for BorrowMutError<'a, T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_struct(\"BorrowMutError\").finish()\n+    }\n+}\n+\n+#[unstable(feature = \"try_borrow\", issue = \"35070\")]\n+impl<'a, T: ?Sized> Display for BorrowMutError<'a, T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        Display::fmt(\"already borrowed\", f)\n+    }\n+}\n+\n // Values [1, MAX-1] represent the number of `Ref` active\n // (will not outgrow its range since `usize` is the size of the address space)\n type BorrowFlag = usize;\n@@ -432,7 +475,8 @@ impl<T: ?Sized> RefCell<T> {\n     ///\n     /// # Panics\n     ///\n-    /// Panics if the value is currently mutably borrowed.\n+    /// Panics if the value is currently mutably borrowed. For a non-panicking variant, use\n+    /// [`try_borrow`](#method.try_borrow).\n     ///\n     /// # Examples\n     ///\n@@ -463,12 +507,45 @@ impl<T: ?Sized> RefCell<T> {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn borrow(&self) -> Ref<T> {\n+        self.try_borrow().expect(\"already mutably borrowed\")\n+    }\n+\n+    /// Immutably borrows the wrapped value, returning an error if the value is currently mutably\n+    /// borrowed.\n+    ///\n+    /// The borrow lasts until the returned `Ref` exits scope. Multiple immutable borrows can be\n+    /// taken out at the same time.\n+    ///\n+    /// This is the non-panicking variant of [`borrow`](#method.borrow).\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(try_borrow)]\n+    ///\n+    /// use std::cell::RefCell;\n+    ///\n+    /// let c = RefCell::new(5);\n+    ///\n+    /// {\n+    ///     let m = c.borrow_mut();\n+    ///     assert!(c.try_borrow().is_err());\n+    /// }\n+    ///\n+    /// {\n+    ///     let m = c.borrow();\n+    ///     assert!(c.try_borrow().is_ok());\n+    /// }\n+    /// ```\n+    #[unstable(feature = \"try_borrow\", issue = \"35070\")]\n+    #[inline]\n+    pub fn try_borrow(&self) -> Result<Ref<T>, BorrowError<T>> {\n         match BorrowRef::new(&self.borrow) {\n-            Some(b) => Ref {\n+            Some(b) => Ok(Ref {\n                 value: unsafe { &*self.value.get() },\n                 borrow: b,\n-            },\n-            None => panic!(\"RefCell<T> already mutably borrowed\"),\n+            }),\n+            None => Err(BorrowError { marker: PhantomData }),\n         }\n     }\n \n@@ -479,7 +556,8 @@ impl<T: ?Sized> RefCell<T> {\n     ///\n     /// # Panics\n     ///\n-    /// Panics if the value is currently borrowed.\n+    /// Panics if the value is currently borrowed. For a non-panicking variant, use\n+    /// [`try_borrow_mut`](#method.try_borrow_mut).\n     ///\n     /// # Examples\n     ///\n@@ -511,12 +589,41 @@ impl<T: ?Sized> RefCell<T> {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn borrow_mut(&self) -> RefMut<T> {\n+        self.try_borrow_mut().expect(\"already borrowed\")\n+    }\n+\n+    /// Mutably borrows the wrapped value, returning an error if the value is currently borrowed.\n+    ///\n+    /// The borrow lasts until the returned `RefMut` exits scope. The value cannot be borrowed\n+    /// while this borrow is active.\n+    ///\n+    /// This is the non-panicking variant of [`borrow_mut`](#method.borrow_mut).\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(try_borrow)]\n+    ///\n+    /// use std::cell::RefCell;\n+    ///\n+    /// let c = RefCell::new(5);\n+    ///\n+    /// {\n+    ///     let m = c.borrow();\n+    ///     assert!(c.try_borrow_mut().is_err());\n+    /// }\n+    ///\n+    /// assert!(c.try_borrow_mut().is_ok());\n+    /// ```\n+    #[unstable(feature = \"try_borrow\", issue = \"35070\")]\n+    #[inline]\n+    pub fn try_borrow_mut(&self) -> Result<RefMut<T>, BorrowMutError<T>> {\n         match BorrowRefMut::new(&self.borrow) {\n-            Some(b) => RefMut {\n+            Some(b) => Ok(RefMut {\n                 value: unsafe { &mut *self.value.get() },\n                 borrow: b,\n-            },\n-            None => panic!(\"RefCell<T> already borrowed\"),\n+            }),\n+            None => Err(BorrowMutError { marker: PhantomData }),\n         }\n     }\n "}, {"sha": "4cbabe3f5edafc1036216b05470c7cd7d5478169", "filename": "src/libcore/iter/traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Flibcore%2Fiter%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Flibcore%2Fiter%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -548,7 +548,7 @@ pub trait ExactSizeIterator: Iterator {\n     /// assert_eq!(one_element.next(), None);\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"exact_size_is_empty\", issue = \"0\")]\n+    #[unstable(feature = \"exact_size_is_empty\", issue = \"35428\")]\n     fn is_empty(&self) -> bool {\n         self.len() == 0\n     }"}, {"sha": "3141c289e931ce0b5e001213edec511ca0dbe996", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -105,11 +105,11 @@ pub trait SliceExt {\n     fn binary_search(&self, x: &Self::Item) -> Result<usize, usize>\n         where Self::Item: Ord;\n     #[stable(feature = \"core\", since = \"1.6.0\")]\n-    fn binary_search_by<F>(&self, f: F) -> Result<usize, usize>\n-        where F: FnMut(&Self::Item) -> Ordering;\n+    fn binary_search_by<'a, F>(&'a self, f: F) -> Result<usize, usize>\n+        where F: FnMut(&'a Self::Item) -> Ordering;\n     #[stable(feature = \"slice_binary_search_by_key\", since = \"1.10.0\")]\n-    fn binary_search_by_key<B, F>(&self, b: &B, f: F) -> Result<usize, usize>\n-        where F: FnMut(&Self::Item) -> B,\n+    fn binary_search_by_key<'a, B, F>(&'a self, b: &B, f: F) -> Result<usize, usize>\n+        where F: FnMut(&'a Self::Item) -> B,\n               B: Ord;\n     #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn len(&self) -> usize;\n@@ -301,8 +301,8 @@ impl<T> SliceExt for [T] {\n         self as *const [T] as *const T\n     }\n \n-    fn binary_search_by<F>(&self, mut f: F) -> Result<usize, usize> where\n-        F: FnMut(&T) -> Ordering\n+    fn binary_search_by<'a, F>(&'a self, mut f: F) -> Result<usize, usize>\n+        where F: FnMut(&'a T) -> Ordering\n     {\n         let mut base = 0usize;\n         let mut s = self;\n@@ -514,8 +514,8 @@ impl<T> SliceExt for [T] {\n     }\n \n     #[inline]\n-    fn binary_search_by_key<B, F>(&self, b: &B, mut f: F) -> Result<usize, usize>\n-        where F: FnMut(&Self::Item) -> B,\n+    fn binary_search_by_key<'a, B, F>(&'a self, b: &B, mut f: F) -> Result<usize, usize>\n+        where F: FnMut(&'a Self::Item) -> B,\n               B: Ord\n     {\n         self.binary_search_by(|k| f(k).cmp(b))"}, {"sha": "9950560b13a5a7cda70ccd0d38ccc2fedf6a6c46", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -870,10 +870,12 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n \n \n     fn need_type_info(&self, span: Span, ty: Ty<'tcx>) {\n-        span_err!(self.tcx.sess, span, E0282,\n-                  \"unable to infer enough type information about `{}`; \\\n-                   type annotations or generic parameter binding required\",\n-                  ty);\n+        let mut err = struct_span_err!(self.tcx.sess, span, E0282,\n+                                       \"unable to infer enough type information about `{}`\",\n+                                       ty);\n+        err.note(\"type annotations or generic parameter binding required\");\n+        err.span_label(span, &format!(\"cannot infer type for `{}`\", ty));\n+        err.emit()\n     }\n \n     fn note_obligation_cause<T>(&self,"}, {"sha": "599e3ec871a8327cdcc08f18083a042806bd7945", "filename": "src/librustc_const_eval/check_match.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Flibrustc_const_eval%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Flibrustc_const_eval%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fcheck_match.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -235,7 +235,12 @@ fn check_expr(cx: &mut MatchCheckCtxt, ex: &hir::Expr) {\n                 .flat_map(|arm| &arm.0)\n                 .map(|pat| vec![wrap_pat(cx, &pat)])\n                 .collect();\n-            check_exhaustive(cx, ex.span, &matrix, source);\n+            let match_span = Span {\n+                lo: ex.span.lo,\n+                hi: scrut.span.hi,\n+                expn_id: ex.span.expn_id\n+            };\n+            check_exhaustive(cx, match_span, &matrix, source);\n         },\n         _ => ()\n     }"}, {"sha": "5455ca62ea46e6eb3a426af70db3a8b5946881a0", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -686,8 +686,10 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n             Rvalue::Box(_) => {\n                 self.add(Qualif::NOT_CONST);\n                 if self.mode != Mode::Fn {\n-                    span_err!(self.tcx.sess, self.span, E0010,\n-                              \"allocations are not allowed in {}s\", self.mode);\n+                    struct_span_err!(self.tcx.sess, self.span, E0010,\n+                                     \"allocations are not allowed in {}s\", self.mode)\n+                        .span_label(self.span, &format!(\"allocation not allowed in {}s\", self.mode))\n+                        .emit();\n                 }\n             }\n "}, {"sha": "9f1f07004f4aecc9978fefb658e20a85a3b3fbbf", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -3375,7 +3375,11 @@ impl<'a> Resolver<'a> {\n             (true, _) | (_, true) => struct_span_err!(self.session, span, E0260, \"{}\", msg),\n             _ => match (old_binding.is_import(), binding.is_import()) {\n                 (false, false) => struct_span_err!(self.session, span, E0428, \"{}\", msg),\n-                (true, true) => struct_span_err!(self.session, span, E0252, \"{}\", msg),\n+                (true, true) => {\n+                    let mut e = struct_span_err!(self.session, span, E0252, \"{}\", msg);\n+                    e.span_label(span, &format!(\"already imported\"));\n+                    e\n+                },\n                 _ => {\n                     let mut e = struct_span_err!(self.session, span, E0255, \"{}\", msg);\n                     e.span_label(span, &format!(\"`{}` was already imported\", name));"}, {"sha": "b4e9fb5c65bb3576417b53469e454c262a249830", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 29, "deletions": 17, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -1215,10 +1215,12 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                                         type_str: &str,\n                                         trait_str: &str,\n                                         name: &str) {\n-        span_err!(self.tcx().sess, span, E0223,\n-                  \"ambiguous associated type; specify the type using the syntax \\\n-                   `<{} as {}>::{}`\",\n-                  type_str, trait_str, name);\n+        struct_span_err!(self.tcx().sess, span, E0223, \"ambiguous associated type\")\n+            .span_label(span, &format!(\"ambiguous associated type\"))\n+            .note(&format!(\"specify the type using the syntax `<{} as {}>::{}`\",\n+                  type_str, trait_str, name))\n+            .emit();\n+\n     }\n \n     // Search for a bound on a type parameter which includes the associated item\n@@ -2095,8 +2097,11 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n \n         if !trait_bounds.is_empty() {\n             let b = &trait_bounds[0];\n-            span_err!(self.tcx().sess, b.trait_ref.path.span, E0225,\n-                      \"only the builtin traits can be used as closure or object bounds\");\n+            let span = b.trait_ref.path.span;\n+            struct_span_err!(self.tcx().sess, span, E0225,\n+                             \"only the builtin traits can be used as closure or object bounds\")\n+                .span_label(span, &format!(\"non-builtin trait used as bounds\"))\n+                .emit();\n         }\n \n         let region_bound =\n@@ -2255,20 +2260,27 @@ fn check_type_argument_count(tcx: TyCtxt, span: Span, supplied: usize,\n         } else {\n             \"expected\"\n         };\n-        span_err!(tcx.sess, span, E0243,\n-                  \"wrong number of type arguments: {} {}, found {}\",\n-                  expected, required, supplied);\n+        struct_span_err!(tcx.sess, span, E0243, \"wrong number of type arguments\")\n+            .span_label(\n+                span,\n+                &format!(\"{} {} type arguments, found {}\", expected, required, supplied)\n+            )\n+            .emit();\n     } else if supplied > accepted {\n-        let expected = if required < accepted {\n-            \"expected at most\"\n+        let expected = if required == 0 {\n+            \"expected no\".to_string()\n+        } else if required < accepted {\n+            format!(\"expected at most {}\", accepted)\n         } else {\n-            \"expected\"\n+            format!(\"expected {}\", accepted)\n         };\n-        span_err!(tcx.sess, span, E0244,\n-                  \"wrong number of type arguments: {} {}, found {}\",\n-                  expected,\n-                  accepted,\n-                  supplied);\n+\n+        struct_span_err!(tcx.sess, span, E0244, \"wrong number of type arguments\")\n+            .span_label(\n+                span,\n+                &format!(\"{} type arguments, found {}\", expected, supplied)\n+            )\n+            .emit();\n     }\n }\n "}, {"sha": "fe68690d4e97447efbc826717314234bbffb86ec", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -93,13 +93,12 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         end.span\n                     };\n \n-                    // Note: spacing here is intentional, we want a space before \"start\" and \"end\".\n-                    span_err!(tcx.sess, span, E0029,\n-                              \"only char and numeric types are allowed in range patterns\\n \\\n-                               start type: {}\\n end type: {}\",\n-                              self.ty_to_string(lhs_ty),\n-                              self.ty_to_string(rhs_ty)\n-                    );\n+                    struct_span_err!(tcx.sess, span, E0029,\n+                        \"only char and numeric types are allowed in range patterns\")\n+                        .span_label(span, &format!(\"ranges require char or numeric types\"))\n+                        .note(&format!(\"start type: {}\", self.ty_to_string(lhs_ty)))\n+                        .note(&format!(\"end type: {}\", self.ty_to_string(rhs_ty)))\n+                        .emit();\n                     return;\n                 }\n \n@@ -700,9 +699,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             for field in variant.fields\n                 .iter()\n                 .filter(|field| !used_fields.contains_key(&field.name)) {\n-                span_err!(tcx.sess, span, E0027,\n-                    \"pattern does not mention field `{}`\",\n-                    field.name);\n+                struct_span_err!(tcx.sess, span, E0027,\n+                                \"pattern does not mention field `{}`\",\n+                                field.name)\n+                                .span_label(span, &format!(\"missing field `{}`\", field.name))\n+                                .emit();\n             }\n         }\n     }"}, {"sha": "e73c3aa352b5605beec6fe6d8b1f164554360fbf", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -28,7 +28,9 @@ use rustc::hir;\n /// method that is called)\n pub fn check_legal_trait_for_method_call(ccx: &CrateCtxt, span: Span, trait_id: DefId) {\n     if ccx.tcx.lang_items.drop_trait() == Some(trait_id) {\n-        span_err!(ccx.tcx.sess, span, E0040, \"explicit use of destructor method\");\n+        struct_span_err!(ccx.tcx.sess, span, E0040, \"explicit use of destructor method\")\n+            .span_label(span, &format!(\"call to destructor method\"))\n+            .emit();\n     }\n }\n "}, {"sha": "b971ae02cd0bd27a87905137df7540a80142257b", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -59,19 +59,33 @@ pub fn compare_impl_method<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n         (&ty::ExplicitSelfCategory::Static,\n          &ty::ExplicitSelfCategory::Static) => {}\n         (&ty::ExplicitSelfCategory::Static, _) => {\n-            span_err!(tcx.sess, impl_m_span, E0185,\n+            let mut err = struct_span_err!(tcx.sess, impl_m_span, E0185,\n                 \"method `{}` has a `{}` declaration in the impl, \\\n                         but not in the trait\",\n                         trait_m.name,\n                         impl_m.explicit_self);\n+            err.span_label(impl_m_span, &format!(\"`{}` used in impl\",\n+                                                 impl_m.explicit_self));\n+            if let Some(span) = tcx.map.span_if_local(trait_m.def_id) {\n+                err.span_label(span, &format!(\"trait declared without `{}`\",\n+                                              impl_m.explicit_self));\n+            }\n+            err.emit();\n             return;\n         }\n         (_, &ty::ExplicitSelfCategory::Static) => {\n-            span_err!(tcx.sess, impl_m_span, E0186,\n+            let mut err = struct_span_err!(tcx.sess, impl_m_span, E0186,\n                 \"method `{}` has a `{}` declaration in the trait, \\\n                         but not in the impl\",\n                         trait_m.name,\n                         trait_m.explicit_self);\n+            err.span_label(impl_m_span, &format!(\"expected `{}` in impl\",\n+                                                  trait_m.explicit_self));\n+            if let Some(span) = tcx.map.span_if_local(trait_m.def_id) {\n+                err.span_label(span, & format!(\"`{}` used in trait\",\n+                                               trait_m.explicit_self));\n+            }\n+            err.emit();\n             return;\n         }\n         _ => {"}, {"sha": "54521782474fe05ac1e8b15ae5e0fec19a193def", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 28, "deletions": 20, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -162,26 +162,34 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     },\n                     rcvr_ty);\n \n-                // If the item has the name of a field, give a help note\n-                if let (&ty::TyStruct(def, substs), Some(expr)) = (&rcvr_ty.sty, rcvr_expr) {\n-                    if let Some(field) = def.struct_variant().find_field_named(item_name) {\n-                        let expr_string = match tcx.sess.codemap().span_to_snippet(expr.span) {\n-                            Ok(expr_string) => expr_string,\n-                            _ => \"s\".into() // Default to a generic placeholder for the\n-                                            // expression when we can't generate a string\n-                                            // snippet\n-                        };\n-\n-                        let field_ty = field.ty(tcx, substs);\n-\n-                        if self.is_fn_ty(&field_ty, span) {\n-                            err.span_note(span,\n-                                          &format!(\"use `({0}.{1})(...)` if you meant to call \\\n-                                                   the function stored in the `{1}` field\",\n-                                                   expr_string, item_name));\n-                        } else {\n-                            err.span_note(span, &format!(\"did you mean to write `{0}.{1}`?\",\n-                                                         expr_string, item_name));\n+                // If the method name is the name of a field with a function or closure type,\n+                // give a helping note that it has to be called as (x.f)(...).\n+                if let Some(expr) = rcvr_expr {\n+                    for (ty, _) in self.autoderef(span, rcvr_ty) {\n+                        if let ty::TyStruct(def, substs) = ty.sty {\n+                            if let Some(field) = def.struct_variant().find_field_named(item_name) {\n+                                let snippet = tcx.sess.codemap().span_to_snippet(expr.span);\n+                                let expr_string = match snippet {\n+                                    Ok(expr_string) => expr_string,\n+                                    _ => \"s\".into() // Default to a generic placeholder for the\n+                                                    // expression when we can't generate a\n+                                                    // string snippet\n+                                };\n+\n+                                let field_ty = field.ty(tcx, substs);\n+\n+                                if self.is_fn_ty(&field_ty, span) {\n+                                    err.span_note(span, &format!(\n+                                        \"use `({0}.{1})(...)` if you meant to call the function \\\n+                                         stored in the `{1}` field\",\n+                                        expr_string, item_name));\n+                                } else {\n+                                    err.span_note(span, &format!(\n+                                        \"did you mean to write `{0}.{1}`?\",\n+                                        expr_string, item_name));\n+                                }\n+                                break;\n+                            }\n                         }\n                     }\n                 }"}, {"sha": "4bb36aa639c541b1e0ae46517a27b654b46d4f40", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -1136,11 +1136,16 @@ fn check_impl_items_against_trait<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n     }\n \n     if !missing_items.is_empty() {\n-        span_err!(tcx.sess, impl_span, E0046,\n+        struct_span_err!(tcx.sess, impl_span, E0046,\n             \"not all trait items implemented, missing: `{}`\",\n             missing_items.iter()\n                   .map(|name| name.to_string())\n                   .collect::<Vec<_>>().join(\"`, `\"))\n+            .span_label(impl_span, &format!(\"missing `{}` in implementation\",\n+                missing_items.iter()\n+                    .map(|name| name.to_string())\n+                    .collect::<Vec<_>>().join(\"`, `\"))\n+            ).emit();\n     }\n \n     if !invalidated_items.is_empty() {"}, {"sha": "42893e40024e891aa14eb5ec8dd7684f3a93edb8", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -441,13 +441,19 @@ impl<'cx, 'gcx, 'tcx> Resolver<'cx, 'gcx, 'tcx> {\n         if !self.tcx.sess.has_errors() {\n             match self.reason {\n                 ResolvingExpr(span) => {\n-                    span_err!(self.tcx.sess, span, E0101,\n-                        \"cannot determine a type for this expression: {}\", e);\n+                    struct_span_err!(\n+                        self.tcx.sess, span, E0101,\n+                        \"cannot determine a type for this expression: {}\", e)\n+                        .span_label(span, &format!(\"cannot resolve type of expression\"))\n+                        .emit();\n                 }\n \n                 ResolvingLocal(span) => {\n-                    span_err!(self.tcx.sess, span, E0102,\n-                        \"cannot determine a type for this local variable: {}\", e);\n+                    struct_span_err!(\n+                        self.tcx.sess, span, E0102,\n+                        \"cannot determine a type for this local variable: {}\", e)\n+                        .span_label(span, &format!(\"cannot resolve type of variable\"))\n+                        .emit();\n                 }\n \n                 ResolvingPattern(span) => {"}, {"sha": "cdf2ca14d4c78366a4a8284d9ac63eace14c2b01", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -311,24 +311,36 @@ impl<'a, 'gcx, 'tcx> CoherenceChecker<'a, 'gcx, 'tcx> {\n             match param_env.can_type_implement_copy(tcx, self_type, span) {\n                 Ok(()) => {}\n                 Err(CopyImplementationError::InfrigingField(name)) => {\n-                       span_err!(tcx.sess, span, E0204,\n-                                 \"the trait `Copy` may not be \\\n-                                          implemented for this type; field \\\n-                                          `{}` does not implement `Copy`\",\n-                                         name)\n+                       struct_span_err!(tcx.sess, span, E0204,\n+                                 \"the trait `Copy` may not be implemented for \\\n+                                 this type\")\n+                           .span_label(span, &format!(\n+                                 \"field `{}` does not implement `Copy`\", name)\n+                               )\n+                           .emit()\n+\n                 }\n                 Err(CopyImplementationError::InfrigingVariant(name)) => {\n-                       span_err!(tcx.sess, span, E0205,\n+                       struct_span_err!(tcx.sess, span, E0205,\n                                  \"the trait `Copy` may not be \\\n-                                          implemented for this type; variant \\\n+                                          implemented for this type\")\n+                           .span_label(span, &format!(\"variant \\\n                                           `{}` does not implement `Copy`\",\n-                                         name)\n+                                         name))\n+                           .emit()\n                 }\n                 Err(CopyImplementationError::NotAnAdt) => {\n-                       span_err!(tcx.sess, span, E0206,\n-                                 \"the trait `Copy` may not be implemented \\\n-                                  for this type; type is not a structure or \\\n-                                  enumeration\")\n+                    let item = tcx.map.expect_item(impl_node_id);\n+                    let span = if let ItemImpl(_, _, _, _, ref ty, _) = item.node {\n+                        ty.span\n+                    } else {\n+                        span\n+                    };\n+\n+                    struct_span_err!(tcx.sess, span, E0206,\n+                                     \"the trait `Copy` may not be implemented for this type\")\n+                        .span_label(span, &format!(\"type is not a structure or enumeration\"))\n+                        .emit();\n                 }\n                 Err(CopyImplementationError::HasDestructor) => {\n                     span_err!(tcx.sess, span, E0184,"}, {"sha": "e426f0cb643b7ab99159ed0ec331e438f5b23514", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -33,10 +33,12 @@ struct OrphanChecker<'cx, 'tcx:'cx> {\n impl<'cx, 'tcx> OrphanChecker<'cx, 'tcx> {\n     fn check_def_id(&self, item: &hir::Item, def_id: DefId) {\n         if def_id.krate != LOCAL_CRATE {\n-            span_err!(self.tcx.sess, item.span, E0116,\n+            struct_span_err!(self.tcx.sess, item.span, E0116,\n                       \"cannot define inherent `impl` for a type outside of the \\\n-                       crate where the type is defined; define and implement \\\n-                       a trait or new type instead\");\n+                       crate where the type is defined\")\n+                .span_label(item.span, &format!(\"impl for type defined outside of crate.\"))\n+                .span_note(item.span, &format!(\"define and implement a trait or new type instead\"))\n+                .emit();\n         }\n     }\n \n@@ -66,7 +68,7 @@ impl<'cx, 'tcx> OrphanChecker<'cx, 'tcx> {\n     fn check_item(&self, item: &hir::Item) {\n         let def_id = self.tcx.map.local_def_id(item.id);\n         match item.node {\n-            hir::ItemImpl(_, _, _, None, _, _) => {\n+            hir::ItemImpl(_, _, _, None, ref ty, _) => {\n                 // For inherent impls, self type must be a nominal type\n                 // defined in this crate.\n                 debug!(\"coherence2::orphan check: inherent impl {}\",\n@@ -209,11 +211,11 @@ impl<'cx, 'tcx> OrphanChecker<'cx, 'tcx> {\n                         return;\n                     }\n                     _ => {\n-                        struct_span_err!(self.tcx.sess, item.span, E0118,\n+                        struct_span_err!(self.tcx.sess, ty.span, E0118,\n                                          \"no base type found for inherent implementation\")\n-                        .span_help(item.span,\n-                                   \"either implement a trait on it or create a newtype to wrap it \\\n-                                    instead\")\n+                        .span_label(ty.span, &format!(\"impl requires a base type\"))\n+                        .note(&format!(\"either implement a trait on it or create a newtype \\\n+                                        to wrap it instead\"))\n                         .emit();\n                         return;\n                     }\n@@ -228,12 +230,14 @@ impl<'cx, 'tcx> OrphanChecker<'cx, 'tcx> {\n                 match traits::orphan_check(self.tcx, def_id) {\n                     Ok(()) => { }\n                     Err(traits::OrphanCheckErr::NoLocalInputType) => {\n-                        span_err!(\n+                        struct_span_err!(\n                             self.tcx.sess, item.span, E0117,\n-                            \"the impl does not reference any \\\n-                             types defined in this crate; \\\n-                             only traits defined in the current crate can be \\\n-                             implemented for arbitrary types\");\n+                             \"only traits defined in the current crate can be \\\n+                             implemented for arbitrary types\")\n+                        .span_label(item.span, &format!(\"impl doesn't use types inside crate\"))\n+                        .note(&format!(\"the impl does not reference any \\\n+                                        types defined in this crate\"))\n+                        .emit();\n                         return;\n                     }\n                     Err(traits::OrphanCheckErr::UncoveredTy(param_ty)) => {"}, {"sha": "9b1a6c78335f189470f69c1d31b59706e37c21b3", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -367,8 +367,13 @@ impl<'a, 'tcx> AstConv<'tcx, 'tcx> for ItemCtxt<'a, 'tcx> {\n                 _substs: Option<&mut Substs<'tcx>>,\n                 _space: Option<ParamSpace>,\n                 span: Span) -> Ty<'tcx> {\n-        span_err!(self.tcx().sess, span, E0121,\n-                  \"the type placeholder `_` is not allowed within types on item signatures\");\n+        struct_span_err!(\n+            self.tcx().sess,\n+            span,\n+            E0121,\n+            \"the type placeholder `_` is not allowed within types on item signatures\"\n+        ).span_label(span, &format!(\"not allowed in type signatures\"))\n+        .emit();\n         self.tcx().types.err\n     }\n \n@@ -770,9 +775,10 @@ fn convert_item(ccx: &CrateCtxt, it: &hir::Item) {\n                         let mut err = struct_span_err!(tcx.sess, impl_item.span, E0201,\n                                                        \"duplicate definitions with name `{}`:\",\n                                                        impl_item.name);\n-                        span_note!(&mut err, *entry.get(),\n-                                   \"previous definition of `{}` here\",\n-                                   impl_item.name);\n+                        err.span_label(*entry.get(),\n+                                   &format!(\"previous definition of `{}` here\",\n+                                        impl_item.name));\n+                        err.span_label(impl_item.span, &format!(\"duplicate definition\"));\n                         err.emit();\n                     }\n                     Vacant(entry) => {"}, {"sha": "65e00705121a7e6dcc5745d3034f10d5c0550053", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -211,11 +211,15 @@ fn check_main_fn_ty(ccx: &CrateCtxt,\n             match tcx.map.find(main_id) {\n                 Some(hir_map::NodeItem(it)) => {\n                     match it.node {\n-                        hir::ItemFn(_, _, _, _, ref ps, _)\n-                        if ps.is_parameterized() => {\n-                            span_err!(ccx.tcx.sess, main_span, E0131,\n-                                      \"main function is not allowed to have type parameters\");\n-                            return;\n+                        hir::ItemFn(_, _, _, _, ref generics, _) => {\n+                            if let Some(gen_span) = generics.span() {\n+                                struct_span_err!(ccx.tcx.sess, gen_span, E0131,\n+                                         \"main function is not allowed to have type parameters\")\n+                                    .span_label(gen_span,\n+                                                &format!(\"main cannot have type parameters\"))\n+                                    .emit();\n+                                return;\n+                            }\n                         }\n                         _ => ()\n                     }"}, {"sha": "914599271aca279044667c6ff0cb572d0a7d2ce2", "filename": "src/libstd/error.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -49,6 +49,7 @@\n \n use any::TypeId;\n use boxed::Box;\n+use cell;\n use char;\n use fmt::{self, Debug, Display};\n use marker::{Send, Sync, Reflect};\n@@ -289,6 +290,20 @@ impl Error for fmt::Error {\n     }\n }\n \n+#[unstable(feature = \"try_borrow\", issue = \"35070\")]\n+impl<'a, T: ?Sized + Reflect> Error for cell::BorrowError<'a, T> {\n+    fn description(&self) -> &str {\n+        \"already mutably borrowed\"\n+    }\n+}\n+\n+#[unstable(feature = \"try_borrow\", issue = \"35070\")]\n+impl<'a, T: ?Sized + Reflect> Error for cell::BorrowMutError<'a, T> {\n+    fn description(&self) -> &str {\n+        \"already borrowed\"\n+    }\n+}\n+\n // copied from any.rs\n impl Error + 'static {\n     /// Returns true if the boxed type is the same as `T`"}, {"sha": "e0501f9cc61d24c70781bab1cf2645d2ed143ffe", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -373,6 +373,15 @@ impl NulError {\n \n     /// Consumes this error, returning the underlying vector of bytes which\n     /// generated the error in the first place.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::ffi::CString;\n+    ///\n+    /// let nul_error = CString::new(\"foo\\0bar\").unwrap_err();\n+    /// assert_eq!(nul_error.into_vec(), b\"foo\\0bar\");\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn into_vec(self) -> Vec<u8> { self.1 }\n }"}, {"sha": "c6272012d66d5b13bb1010658e0c9b220b3bf85d", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -269,6 +269,7 @@\n #![feature(str_utf16)]\n #![feature(test, rustc_private)]\n #![feature(thread_local)]\n+#![feature(try_borrow)]\n #![feature(try_from)]\n #![feature(unboxed_closures)]\n #![feature(unicode)]"}, {"sha": "9c57f25dfcce8eb65585d51fa42d06459f114f94", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -21,6 +21,7 @@ use fmt;\n use io;\n use iter;\n use libc::{self, c_int, c_char, c_void};\n+use marker::PhantomData;\n use mem;\n use memchr;\n use path::{self, PathBuf};\n@@ -37,6 +38,7 @@ static ENV_LOCK: Mutex = Mutex::new();\n \n \n extern {\n+    #[cfg(not(target_os = \"dragonfly\"))]\n     #[cfg_attr(any(target_os = \"linux\", target_os = \"emscripten\"),\n                link_name = \"__errno_location\")]\n     #[cfg_attr(any(target_os = \"bitrig\",\n@@ -304,7 +306,7 @@ pub fn current_exe() -> io::Result<PathBuf> {\n \n pub struct Args {\n     iter: vec::IntoIter<OsString>,\n-    _dont_send_or_sync_me: *mut (),\n+    _dont_send_or_sync_me: PhantomData<*mut ()>,\n }\n \n impl Iterator for Args {\n@@ -342,7 +344,7 @@ pub fn args() -> Args {\n     };\n     Args {\n         iter: vec.into_iter(),\n-        _dont_send_or_sync_me: ptr::null_mut(),\n+        _dont_send_or_sync_me: PhantomData,\n     }\n }\n \n@@ -399,7 +401,7 @@ pub fn args() -> Args {\n         }\n     }\n \n-    Args { iter: res.into_iter(), _dont_send_or_sync_me: ptr::null_mut() }\n+    Args { iter: res.into_iter(), _dont_send_or_sync_me: PhantomData }\n }\n \n #[cfg(any(target_os = \"linux\",\n@@ -418,12 +420,12 @@ pub fn args() -> Args {\n     let v: Vec<OsString> = bytes.into_iter().map(|v| {\n         OsStringExt::from_vec(v)\n     }).collect();\n-    Args { iter: v.into_iter(), _dont_send_or_sync_me: ptr::null_mut() }\n+    Args { iter: v.into_iter(), _dont_send_or_sync_me: PhantomData }\n }\n \n pub struct Env {\n     iter: vec::IntoIter<(OsString, OsString)>,\n-    _dont_send_or_sync_me: *mut (),\n+    _dont_send_or_sync_me: PhantomData<*mut ()>,\n }\n \n impl Iterator for Env {\n@@ -464,7 +466,7 @@ pub fn env() -> Env {\n         }\n         let ret = Env {\n             iter: result.into_iter(),\n-            _dont_send_or_sync_me: ptr::null_mut(),\n+            _dont_send_or_sync_me: PhantomData,\n         };\n         ENV_LOCK.unlock();\n         return ret"}, {"sha": "8a666168c86fd22207a7067c426fe0c89329dfd6", "filename": "src/test/compile-fail/E0010.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2FE0010.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2FE0010.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0010.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -11,5 +11,6 @@\n #![feature(box_syntax)]\n \n const CON : Box<i32> = box 0; //~ ERROR E0010\n+                              //~| NOTE allocation not allowed in\n \n fn main() {}"}, {"sha": "ca496a24701fba48141189c332229ad1248707e5", "filename": "src/test/compile-fail/E0027.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2FE0027.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2FE0027.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0027.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -17,6 +17,8 @@ fn main() {\n     let d = Dog { name: \"Rusty\".to_string(), age: 8 };\n \n     match d {\n-        Dog { age: x } => {} //~ ERROR E0027\n+        Dog { age: x } => {}\n+        //~^ ERROR pattern does not mention field `name`\n+        //~| NOTE missing field `name`\n     }\n }"}, {"sha": "ec84e2a3f8a3650c8e910752e5fdeba1fb71a4fc", "filename": "src/test/compile-fail/E0029.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2FE0029.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2FE0029.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0029.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -12,7 +12,11 @@ fn main() {\n     let s = \"hoho\";\n \n     match s {\n-        \"hello\" ... \"world\" => {} //~ ERROR E0029\n+        \"hello\" ... \"world\" => {}\n+        //~^ ERROR only char and numeric types are allowed in range patterns\n+        //~| NOTE ranges require char or numeric types\n+        //~| NOTE start type: &'static str\n+        //~| NOTE end type: &'static str\n         _ => {}\n     }\n }"}, {"sha": "80ff57c36359561f28aac3410823d551f6afe16e", "filename": "src/test/compile-fail/E0040.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2FE0040.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2FE0040.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0040.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -20,5 +20,7 @@ impl Drop for Foo {\n \n fn main() {\n     let mut x = Foo { x: -7 };\n-    x.drop(); //~ ERROR E0040\n+    x.drop();\n+    //~^ ERROR E0040\n+    //~| NOTE call to destructor method\n }"}, {"sha": "a8b56b2b9ab37248a596f3f37df0d5e15290ff34", "filename": "src/test/compile-fail/E0046.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2FE0046.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2FE0046.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0046.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -14,7 +14,9 @@ trait Foo {\n \n struct Bar;\n \n-impl Foo for Bar {} //~ ERROR E0046\n+impl Foo for Bar {}\n+//~^ ERROR E0046\n+//~| NOTE missing `foo` in implementation\n \n fn main() {\n }"}, {"sha": "0005da048e4a5706fb37ebed9292f51b3902f04d", "filename": "src/test/compile-fail/E0101.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2FE0101.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2FE0101.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0101.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -9,5 +9,7 @@\n // except according to those terms.\n \n fn main() {\n-    let x = |_| {}; //~ ERROR E0101\n+    let x = |_| {};\n+    //~^ ERROR E0101\n+    //~| NOTE cannot resolve type of expression\n }"}, {"sha": "1d64798bb838202e6f1696addb1f96adaab34a7a", "filename": "src/test/compile-fail/E0102.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2FE0102.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2FE0102.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0102.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -9,5 +9,7 @@\n // except according to those terms.\n \n fn main() {\n-    let x = []; //~ ERROR E0102\n+    let x = [];\n+    //~^ ERROR E0102\n+    //~| NOTE cannot resolve type of variable\n }"}, {"sha": "f885241eec4c7f1b00a7451fa11d091afb60fc95", "filename": "src/test/compile-fail/E0116.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2FE0116.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2FE0116.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0116.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -8,7 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-impl Vec<u8> {} //~ ERROR E0116\n+impl Vec<u8> {}\n+//~^ ERROR E0116\n+//~| NOTE impl for type defined outside of crate.\n+//~| NOTE define and implement a trait or new type instead\n \n fn main() {\n }"}, {"sha": "e9375e673253fb863edb4135df4256446645d4ec", "filename": "src/test/compile-fail/E0117.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2FE0117.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2FE0117.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0117.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n impl Drop for u32 {} //~ ERROR E0117\n+//~^ NOTE impl doesn't use types inside crate\n+//~| NOTE the impl does not reference any types defined in this crate\n \n fn main() {\n }"}, {"sha": "3fc478f1e403e3adf57ed00c48e547b1c1f1dfbb", "filename": "src/test/compile-fail/E0118.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2FE0118.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2FE0118.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0118.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n impl (u8, u8) { //~ ERROR E0118\n+//~^ NOTE impl requires a base type\n+//~| NOTE either implement a trait on it or create a newtype to wrap it instead\n     fn get_state(&self) -> String {\n         String::new()\n     }"}, {"sha": "e6e924e2d966fd9cc8a335060afe22098ed44b7a", "filename": "src/test/compile-fail/E0131.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2FE0131.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2FE0131.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0131.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -8,5 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn main<T>() { //~ ERROR E0131\n+fn main<T>() {\n+    //~^ ERROR E0131\n+    //~| NOTE main cannot have type parameters\n }"}, {"sha": "be54c3754ea1fe98e7aef7f4aaef686d8282f629", "filename": "src/test/compile-fail/E0185.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2FE0185.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2FE0185.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0185.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -9,13 +9,14 @@\n // except according to those terms.\n \n trait Foo {\n-    fn foo();\n+    fn foo(); //~ trait declared without `&self`\n }\n \n struct Bar;\n \n impl Foo for Bar {\n     fn foo(&self) {} //~ ERROR E0185\n+    //~^ `&self` used in impl\n }\n \n fn main() {"}, {"sha": "55a3490cac4a620b9206e243cd81687e084edb8d", "filename": "src/test/compile-fail/E0186.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2FE0186.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2FE0186.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0186.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -9,13 +9,14 @@\n // except according to those terms.\n \n trait Foo {\n-    fn foo(&self);\n+    fn foo(&self); //~ `&self` used in trait\n }\n \n struct Bar;\n \n impl Foo for Bar {\n     fn foo() {} //~ ERROR E0186\n+    //~^ expected `&self` in impl\n }\n \n fn main() {"}, {"sha": "0f108a17c95db3127edf399eab121a8566916427", "filename": "src/test/compile-fail/E0204.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2FE0204.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2FE0204.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0204.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -12,9 +12,14 @@ struct Foo {\n     foo: Vec<u32>,\n }\n \n-impl Copy for Foo { } //~ ERROR E0204\n+impl Copy for Foo { }\n+//~^ ERROR E0204\n+//~| NOTE field `foo` does not implement `Copy`\n \n-#[derive(Copy)] //~ ERROR E0204\n+#[derive(Copy)]\n+//~^ ERROR E0204\n+//~| NOTE field `ty` does not implement `Copy`\n+//~| NOTE in this expansion of #[derive(Copy)]\n struct Foo2<'a> {\n     ty: &'a mut bool,\n }"}, {"sha": "37ac57af524a6d1f5ba06d7752019b94e5e613e7", "filename": "src/test/compile-fail/E0205.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2FE0205.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2FE0205.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0205.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -13,9 +13,14 @@ enum Foo {\n     Baz,\n }\n \n-impl Copy for Foo { } //~ ERROR E0205\n+impl Copy for Foo { }\n+//~^ ERROR E0205\n+//~| NOTE variant `Bar` does not implement `Copy`\n \n-#[derive(Copy)] //~ ERROR E0205\n+#[derive(Copy)]\n+//~^ ERROR E0205\n+//~| NOTE variant `Bar` does not implement `Copy`\n+//~| NOTE in this expansion of #[derive(Copy)]\n enum Foo2<'a> {\n     Bar(&'a mut bool),\n     Baz,"}, {"sha": "888e42ed3a18cea72870207b7b9cbc459fea7417", "filename": "src/test/compile-fail/E0206.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2FE0206.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2FE0206.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0206.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -10,13 +10,19 @@\n \n type Foo = i32;\n \n-impl Copy for Foo { } //~ ERROR E0206\n-                      //~^ ERROR E0117\n+impl Copy for Foo { }\n+//~^ ERROR the trait `Copy` may not be implemented for this type\n+//~| NOTE type is not a structure or enumeration\n+//~| ERROR only traits defined in the current crate can be implemented for arbitrary types\n+//~| NOTE impl doesn't use types inside crate\n+//~| NOTE the impl does not reference any types defined in this crate\n \n #[derive(Copy, Clone)]\n struct Bar;\n \n-impl Copy for &'static Bar { } //~ ERROR E0206\n+impl Copy for &'static Bar { }\n+//~^ ERROR the trait `Copy` may not be implemented for this type\n+//~| NOTE type is not a structure or enumeration\n \n fn main() {\n }"}, {"sha": "56057b372599dc284593b08489ae84eeab283dd1", "filename": "src/test/compile-fail/E0223.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2FE0223.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2FE0223.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0223.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -11,5 +11,8 @@\n trait MyTrait { type X; }\n \n fn main() {\n-    let foo: MyTrait::X; //~ ERROR E0223\n+    let foo: MyTrait::X;\n+    //~^ ERROR ambiguous associated type\n+    //~| NOTE ambiguous associated type\n+    //~| NOTE specify the type using the syntax `<Type as MyTrait>::X`\n }"}, {"sha": "b013788ceff8506f95d52844f4f56c7279d76604", "filename": "src/test/compile-fail/E0225.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2FE0225.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2FE0225.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0225.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -9,5 +9,7 @@\n // except according to those terms.\n \n fn main() {\n-    let _: Box<std::io::Read + std::io::Write>; //~ ERROR E0225\n+    let _: Box<std::io::Read + std::io::Write>;\n+    //~^ ERROR only the builtin traits can be used as closure or object bounds [E0225]\n+    //~| NOTE non-builtin trait used as bounds\n }"}, {"sha": "77c9856c261ff595054194d558447438c19b990f", "filename": "src/test/compile-fail/E0243.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2FE0243.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2FE0243.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0243.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -9,7 +9,9 @@\n // except according to those terms.\n \n struct Foo<T> { x: T }\n-struct Bar { x: Foo } //~ ERROR E0243\n+struct Bar { x: Foo }\n+                //~^ ERROR E0243\n+                //~| NOTE expected 1 type arguments, found 0\n \n fn main() {\n }"}, {"sha": "5678a7fd450d8f95a1bcebb635c99a59ba238a55", "filename": "src/test/compile-fail/E0244.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2FE0244.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2FE0244.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0244.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -9,7 +9,10 @@\n // except according to those terms.\n \n struct Foo { x: bool }\n-struct Bar<S, T> { x: Foo<S, T> } //~ ERROR E0244\n+struct Bar<S, T> { x: Foo<S, T> }\n+                      //~^ ERROR E0244\n+                      //~| NOTE expected no type arguments, found 2\n+\n \n fn main() {\n }"}, {"sha": "ff886e63dc59ef1aebab668fe16ce51d5edcd29c", "filename": "src/test/compile-fail/associated-types-in-ambiguous-context.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2Fassociated-types-in-ambiguous-context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2Fassociated-types-in-ambiguous-context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-in-ambiguous-context.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -15,15 +15,21 @@ trait Get {\n \n fn get<T:Get,U:Get>(x: T, y: U) -> Get::Value {}\n //~^ ERROR ambiguous associated type\n+//~| NOTE ambiguous associated type\n+//~| NOTE specify the type using the syntax `<Type as Get>::Value`\n \n trait Grab {\n     type Value;\n     fn grab(&self) -> Grab::Value;\n     //~^ ERROR ambiguous associated type\n+    //~| NOTE ambiguous associated type\n+    //~| NOTE specify the type using the syntax `<Type as Grab>::Value`\n }\n \n type X = std::ops::Deref::Target;\n //~^ ERROR ambiguous associated type\n+//~| NOTE ambiguous associated type\n+//~| NOTE specify the type using the syntax `<Type as std::ops::Deref>::Target`\n \n fn main() {\n }"}, {"sha": "f686a146042cee4351a2c1874605d7a3ab7e000a", "filename": "src/test/compile-fail/coherence-impls-copy.rs", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2Fcoherence-impls-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2Fcoherence-impls-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-impls-copy.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -27,23 +27,34 @@ impl Clone for TestE { fn clone(&self) -> Self { *self } }\n impl Copy for MyType {}\n \n impl Copy for &'static mut MyType {}\n-//~^ ERROR E0206\n+//~^ ERROR the trait `Copy` may not be implemented for this type\n+//~| NOTE type is not a structure or enumeration\n impl Clone for MyType { fn clone(&self) -> Self { *self } }\n \n impl Copy for (MyType, MyType) {}\n-//~^ ERROR E0206\n-//~| ERROR E0117\n+//~^ ERROR the trait `Copy` may not be implemented for this type\n+//~| NOTE type is not a structure or enumeration\n+//~| ERROR only traits defined in the current crate can be implemented for arbitrary types\n+//~| NOTE impl doesn't use types inside crate\n+//~| NOTE the impl does not reference any types defined in this crate\n \n impl Copy for &'static NotSync {}\n-//~^ ERROR E0206\n+//~^ ERROR the trait `Copy` may not be implemented for this type\n+//~| NOTE type is not a structure or enumeration\n \n impl Copy for [MyType] {}\n-//~^ ERROR E0206\n-//~| ERROR E0117\n+//~^ ERROR the trait `Copy` may not be implemented for this type\n+//~| NOTE type is not a structure or enumeration\n+//~| ERROR only traits defined in the current crate can be implemented for arbitrary types\n+//~| NOTE impl doesn't use types inside crate\n+//~| NOTE the impl does not reference any types defined in this crate\n \n impl Copy for &'static [NotSync] {}\n-//~^ ERROR E0206\n-//~| ERROR E0117\n+//~^ ERROR the trait `Copy` may not be implemented for this type\n+//~| NOTE type is not a structure or enumeration\n+//~| ERROR only traits defined in the current crate can be implemented for arbitrary types\n+//~| NOTE impl doesn't use types inside crate\n+//~| NOTE the impl does not reference any types defined in this crate\n \n fn main() {\n }"}, {"sha": "bd190a6df8e39f97153e0b76862e97f42ef3e452", "filename": "src/test/compile-fail/double-import.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2Fdouble-import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2Fdouble-import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdouble-import.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -7,8 +7,6 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-#![feature(no_core)]\n-#![no_core]\n \n // This tests that conflicting imports shows both `use` lines\n // when reporting the error.\n@@ -23,5 +21,6 @@ mod sub2 {\n \n use sub1::foo; //~ NOTE previous import of `foo` here\n use sub2::foo; //~ ERROR a value named `foo` has already been imported in this module [E0252]\n+               //~| NOTE already imported\n \n fn main() {}"}, {"sha": "d9ac715fa9548447340e9f33633299676fb352ae", "filename": "src/test/compile-fail/generic-type-less-params-with-defaults.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2Fgeneric-type-less-params-with-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2Fgeneric-type-less-params-with-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgeneric-type-less-params-with-defaults.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -16,5 +16,7 @@ struct Vec<T, A = Heap>(\n     marker::PhantomData<(T,A)>);\n \n fn main() {\n-    let _: Vec; //~ ERROR wrong number of type arguments: expected at least 1, found 0\n+    let _: Vec;\n+    //~^ ERROR E0243\n+    //~| NOTE expected at least 1 type arguments, found 0\n }"}, {"sha": "8f733ddfce187f7c73b58d82e652be928597b0be", "filename": "src/test/compile-fail/generic-type-more-params-with-defaults.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2Fgeneric-type-more-params-with-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2Fgeneric-type-more-params-with-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgeneric-type-more-params-with-defaults.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -17,5 +17,6 @@ struct Vec<T, A = Heap>(\n \n fn main() {\n     let _: Vec<isize, Heap, bool>;\n-    //~^ ERROR wrong number of type arguments: expected at most 2, found 3\n+    //~^ ERROR E0244\n+    //~| NOTE expected at most 2 type arguments, found 3\n }"}, {"sha": "f6e9ab2d614bce630b7f8dae5a1d8f56e2f8576e", "filename": "src/test/compile-fail/impl-duplicate-methods.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2Fimpl-duplicate-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2Fimpl-duplicate-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimpl-duplicate-methods.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -12,7 +12,9 @@ struct Foo;\n \n impl Foo {\n     fn orange(&self) {} //~ NOTE previous definition of `orange` here\n-    fn orange(&self) {} //~ ERROR duplicate definitions with name `orange`\n+    fn orange(&self) {}\n+    //~^ ERROR duplicate definition\n+    //~| NOTE duplicate definition\n }\n \n fn main() {}"}, {"sha": "e0ea1a4cac58bb83102cacf447fb478961897928", "filename": "src/test/compile-fail/impl-wrong-item-for-trait.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2Fimpl-wrong-item-for-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2Fimpl-wrong-item-for-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimpl-wrong-item-for-trait.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -21,6 +21,7 @@ pub struct FooConstForMethod;\n \n impl Foo for FooConstForMethod {\n     //~^ ERROR E0046\n+    //~| NOTE missing `bar` in implementation\n     const bar: u64 = 1;\n     //~^ ERROR E0323\n     //~| NOTE does not match trait\n@@ -31,6 +32,7 @@ pub struct FooMethodForConst;\n \n impl Foo for FooMethodForConst {\n     //~^ ERROR E0046\n+    //~| NOTE missing `MY_CONST` in implementation\n     fn bar(&self) {}\n     fn MY_CONST() {}\n     //~^ ERROR E0324\n@@ -41,6 +43,7 @@ pub struct FooTypeForMethod;\n \n impl Foo for FooTypeForMethod {\n     //~^ ERROR E0046\n+    //~| NOTE missing `bar` in implementation\n     type bar = u64;\n     //~^ ERROR E0325\n     //~| NOTE does not match trait"}, {"sha": "001e4b51bebc4f619beaa84665fb38a7d6ecf525", "filename": "src/test/compile-fail/issue-12187-1.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2Fissue-12187-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2Fissue-12187-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-12187-1.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -14,5 +14,7 @@ fn new<T>() -> &'static T {\n \n fn main() {\n     let &v = new();\n-    //~^ ERROR type annotations or generic parameter binding required\n+    //~^ ERROR unable to infer enough type information about `_` [E0282]\n+    //~| NOTE cannot infer type for `_`\n+    //~| NOTE type annotations or generic parameter binding\n }"}, {"sha": "7cbee402b368253cb59845e912ed357307f77f33", "filename": "src/test/compile-fail/issue-12187-2.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2Fissue-12187-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2Fissue-12187-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-12187-2.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -14,5 +14,7 @@ fn new<'r, T>() -> &'r T {\n \n fn main() {\n     let &v = new();\n-    //~^ ERROR type annotations or generic parameter binding required\n+    //~^ ERROR unable to infer enough type information about `_` [E0282]\n+    //~| NOTE cannot infer type for `_`\n+    //~| NOTE type annotations or generic parameter binding\n }"}, {"sha": "dd02fa7ac151c10186bd633726d7dc2567896f8f", "filename": "src/test/compile-fail/issue-14092.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2Fissue-14092.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2Fissue-14092.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-14092.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn fn1(0: Box) {} //~ ERROR: wrong number of type arguments: expected 1, found 0\n+fn fn1(0: Box) {}\n+        //~^ ERROR E0243\n+        //~| NOTE expected 1 type arguments, found 0\n \n fn main() {}"}, {"sha": "e266f004317e7f46d1adb52b8bb96498bc56acad", "filename": "src/test/compile-fail/issue-23024.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2Fissue-23024.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2Fissue-23024.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-23024.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -18,6 +18,6 @@ fn main()\n     vfnfer.push(box h);\n     println!(\"{:?}\",(vfnfer[0] as Fn)(3));\n     //~^ ERROR the precise format of `Fn`-family traits'\n-    //~| ERROR wrong number of type arguments: expected 1, found 0\n+    //~| ERROR E0243\n     //~| ERROR the value of the associated type `Output` (from the trait `std::ops::FnOnce`)\n }"}, {"sha": "1be082ba9bbbad454982a42a82d8ce3e7c4b6361", "filename": "src/test/compile-fail/issue-23041.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2Fissue-23041.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2Fissue-23041.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-23041.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -14,4 +14,6 @@ fn main()\n     fn bar(x:i32) ->i32 { 3*x };\n     let b:Box<Any> = Box::new(bar as fn(_)->_);\n     b.downcast_ref::<fn(_)->_>(); //~ ERROR E0282\n+                                  //~| NOTE cannot infer type for `_`\n+                                  //~| NOTE type annotations or generic parameter binding required\n }"}, {"sha": "b1047ce18cccdf552ce6bd2ceee305fe78fe5a81", "filename": "src/test/compile-fail/issue-23729.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2Fissue-23729.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2Fissue-23729.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-23729.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -18,7 +18,8 @@ fn main() {\n         }\n \n         impl Iterator for Recurrence {\n-            //~^ ERROR not all trait items implemented, missing: `Item` [E0046]\n+            //~^ ERROR E0046\n+            //~| NOTE missing `Item` in implementation\n             #[inline]\n             fn next(&mut self) -> Option<u64> {\n                 if self.pos < 2 {"}, {"sha": "2062e2373129bd77d698d0aa555743dd85d0494d", "filename": "src/test/compile-fail/issue-23827.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2Fissue-23827.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2Fissue-23827.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-23827.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -34,7 +34,8 @@ impl<C: Component> FnMut<(C,)> for Prototype {\n }\n \n impl<C: Component> FnOnce<(C,)> for Prototype {\n-    //~^ ERROR not all trait items implemented, missing: `Output` [E0046]\n+    //~^ ERROR E0046\n+    //~| NOTE missing `Output` in implementation\n     extern \"rust-call\" fn call_once(self, (comp,): (C,)) -> Prototype {\n         Fn::call(&self, (comp,))\n     }"}, {"sha": "d39fd539dcebc301350cc85ba5e606408c774f20", "filename": "src/test/compile-fail/issue-24356.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2Fissue-24356.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2Fissue-24356.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-24356.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -28,7 +28,8 @@ fn main() {\n \n         // Causes ICE\n         impl Deref for Thing {\n-            //~^ ERROR not all trait items implemented, missing: `Target` [E0046]\n+            //~^ ERROR E0046\n+            //~| NOTE missing `Target` in implementation\n             fn deref(&self) -> i8 { self.0 }\n         }\n "}, {"sha": "46e82363c8bd832597d76b525427754b9c0a0a51", "filename": "src/test/compile-fail/issue-26886.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2Fissue-26886.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2Fissue-26886.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-26886.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -11,7 +11,9 @@\n use std::sync::{self, Arc}; //~ NOTE previous import\n                             //~^ NOTE previous import\n use std::sync::Arc; //~ ERROR a type named\n+                    //~| NOTE already imported\n use std::sync; //~ ERROR a module named\n+               //~| NOTE already imported\n \n fn main() {\n }"}, {"sha": "ce3fa487d4e02fa0b892acf8d676340b50a18a22", "filename": "src/test/compile-fail/issue-27340.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2Fissue-27340.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2Fissue-27340.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-27340.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -10,7 +10,7 @@\n \n struct Foo;\n #[derive(Copy, Clone)]\n-//~^ ERROR the trait `Copy` may not be implemented for this type; field `0` does not implement\n+//~^ ERROR the trait `Copy` may not be implemented for this type\n struct Bar(Foo);\n \n fn main() {}"}, {"sha": "4229be29473dbc1dd229e8eb278d43905356009b", "filename": "src/test/compile-fail/issue-33784.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2Fissue-33784.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2Fissue-33784.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-33784.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -0,0 +1,46 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::ops::Deref;\n+\n+struct Obj<F> where F: FnMut() -> u32 {\n+    fn_ptr: fn() -> (),\n+    closure: F,\n+}\n+\n+struct C {\n+    c_fn_ptr: fn() -> (),\n+}\n+\n+struct D(C);\n+\n+impl Deref for D {\n+    type Target = C;\n+    fn deref(&self) -> &C {\n+        &self.0\n+    }\n+}\n+\n+\n+fn empty() {}\n+\n+fn main() {\n+    let o = Obj { fn_ptr: empty, closure: || 42 };\n+    let p = &o;\n+    p.closure(); //~ ERROR no method named `closure` found\n+    //~^ NOTE use `(p.closure)(...)` if you meant to call the function stored in the `closure` field\n+    let q = &p;\n+    q.fn_ptr(); //~ ERROR no method named `fn_ptr` found\n+    //~^ NOTE use `(q.fn_ptr)(...)` if you meant to call the function stored in the `fn_ptr` field\n+    let r = D(C { c_fn_ptr: empty });\n+    let s = &r;\n+    s.c_fn_ptr(); //~ ERROR no method named `c_fn_ptr` found\n+    //~^ NOTE use `(s.c_fn_ptr)(...)` if you meant to call the function stored in the `c_fn_ptr`\n+}"}, {"sha": "5e3b777cc0b62cd845cb9af92176b3c64a590d8c", "filename": "src/test/compile-fail/issue-34209.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2Fissue-34209.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2Fissue-34209.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-34209.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -15,7 +15,9 @@ enum S {\n fn bug(l: S) {\n     match l {\n         S::B{ } => { },\n-        //~^ ERROR ambiguous associated type; specify the type using the syntax `<S as Trait>::B`\n+        //~^ ERROR ambiguous associated type\n+        //~| NOTE ambiguous associated type\n+        //~| NOTE specify the type using the syntax `<S as Trait>::B`\n     }\n }\n "}, {"sha": "f5aa4fadbed88605886670d9165c9e4ce41fd759", "filename": "src/test/compile-fail/issue-5062.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2Fissue-5062.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2Fissue-5062.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5062.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -9,4 +9,4 @@\n // except according to those terms.\n \n fn main() { format!(\"{:?}\", None); }\n-    //~^ ERROR type annotations or generic parameter binding required\n+    //~^ ERROR unable to infer enough type information about `_` [E0282]"}, {"sha": "71f28054579157b40e159f1d924e72b8b4913bcc", "filename": "src/test/compile-fail/issue-6458-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2Fissue-6458-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2Fissue-6458-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-6458-2.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -11,5 +11,5 @@\n fn main() {\n     // Unconstrained type:\n     format!(\"{:?}\", None);\n-    //~^ ERROR type annotations or generic parameter binding required\n+    //~^ ERROR unable to infer enough type information about `_` [E0282]\n }"}, {"sha": "e397805565bbdcd95c036d8f1ce6ff45dbe560be", "filename": "src/test/compile-fail/issue-6458-3.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2Fissue-6458-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2Fissue-6458-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-6458-3.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -12,5 +12,7 @@ use std::mem;\n \n fn main() {\n     mem::transmute(0);\n-    //~^ ERROR type annotations or generic parameter binding required\n+    //~^ ERROR unable to infer enough type information about `_` [E0282]\n+    //~| NOTE cannot infer type for `_`\n+    //~| NOTE type annotations or generic parameter binding\n }"}, {"sha": "c3f3a718ad0e21cf5c6a91ec11b62fe5031d442f", "filename": "src/test/compile-fail/issue-6458-4.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2Fissue-6458-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2Fissue-6458-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-6458-4.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -10,7 +10,9 @@\n \n fn foo(b: bool) -> Result<bool,String> {\n     Err(\"bar\".to_string());\n-    //~^ ERROR type annotations or generic parameter binding required\n+    //~^ ERROR unable to infer enough type information about `_` [E0282]\n+    //~| NOTE cannot infer type for `_`\n+    //~| NOTE type annotations or generic parameter binding\n }\n \n fn main() {"}, {"sha": "a64522a0e5b7543bfc038c051d3247a759a9088a", "filename": "src/test/compile-fail/issue-6458.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2Fissue-6458.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2Fissue-6458.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-6458.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -17,7 +17,9 @@ pub fn foo<State>(_: TypeWithState<State>) {}\n \n pub fn bar() {\n    foo(TypeWithState(marker::PhantomData));\n-   //~^ ERROR type annotations or generic parameter binding required\n+   //~^ ERROR unable to infer enough type information about `_` [E0282]\n+   //~| NOTE cannot infer type for `_`\n+   //~| NOTE type annotations or generic parameter binding\n }\n \n fn main() {"}, {"sha": "e3cb1d0c7daafac93b6be3ec2842647bf4ca1e8c", "filename": "src/test/compile-fail/issue-7813.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2Fissue-7813.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2Fissue-7813.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7813.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -10,5 +10,7 @@\n \n fn main() {\n     let v = &[];\n-    let it = v.iter(); //~ ERROR type annotations or generic parameter binding required\n+    let it = v.iter(); //~ ERROR unable to infer enough type information about `_` [E0282]\n+                       //~| NOTE cannot infer type for `_`\n+                       //~| NOTE type annotations or generic parameter binding\n }"}, {"sha": "4f86909765ef1f84f0efd972291286990f8b9617", "filename": "src/test/compile-fail/method-ambig-one-trait-unknown-int-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2Fmethod-ambig-one-trait-unknown-int-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2Fmethod-ambig-one-trait-unknown-int-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmethod-ambig-one-trait-unknown-int-type.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -32,7 +32,7 @@ impl foo for Vec<isize> {\n fn m1() {\n     // we couldn't infer the type of the vector just based on calling foo()...\n     let mut x = Vec::new();\n-    //~^ ERROR type annotations or generic parameter binding required\n+    //~^ ERROR unable to infer enough type information about `_` [E0282]\n     x.foo();\n }\n "}, {"sha": "e685ebc272098b1264366b8a59b0905305a4829e", "filename": "src/test/compile-fail/qualified-path-params-2.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2Fqualified-path-params-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2Fqualified-path-params-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fqualified-path-params-2.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -25,7 +25,11 @@ impl S {\n     fn f<T>() {}\n }\n \n-type A = <S as Tr>::A::f<u8>; //~ ERROR type parameters are not allowed on this type\n-//~^ ERROR ambiguous associated type; specify the type using the syntax `<<S as Tr>::A as Trait>::f`\n+type A = <S as Tr>::A::f<u8>;\n+//~^ ERROR type parameters are not allowed on this type\n+//~| NOTE type parameter not allowed\n+//~| ERROR ambiguous associated type\n+//~| NOTE ambiguous associated type\n+//~| NOTE specify the type using the syntax `<<S as Tr>::A as Trait>::f`\n \n fn main() {}"}, {"sha": "860e69fcaec4d46b6f0b43d12d17f4adc0ef8989", "filename": "src/test/compile-fail/self-impl.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2Fself-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2Fself-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fself-impl.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -31,9 +31,13 @@ impl SuperFoo for Bar {\n impl Bar {\n     fn f() {\n         let _: <Self>::Baz = true;\n-//~^ERROR: ambiguous associated type; specify the type using the syntax `<Bar as Trait>::Baz`\n+        //~^ ERROR ambiguous associated type\n+        //~| NOTE ambiguous associated type\n+        //~| NOTE specify the type using the syntax `<Bar as Trait>::Baz`\n         let _: Self::Baz = true;\n-//~^ERROR: ambiguous associated type; specify the type using the syntax `<Bar as Trait>::Baz`\n+        //~^ ERROR ambiguous associated type\n+        //~| NOTE ambiguous associated type\n+        //~| NOTE specify the type using the syntax `<Bar as Trait>::Baz`\n     }\n }\n "}, {"sha": "e6545063dbd4414e4a246986693933f4751bbe3a", "filename": "src/test/compile-fail/traits-multidispatch-convert-ambig-dest.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2Ftraits-multidispatch-convert-ambig-dest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2Ftraits-multidispatch-convert-ambig-dest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftraits-multidispatch-convert-ambig-dest.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -34,7 +34,9 @@ where T : Convert<U>\n \n fn a() {\n     test(22, std::default::Default::default());\n-    //~^ ERROR type annotations or generic parameter binding required\n+    //~^ ERROR unable to infer enough type information about `_` [E0282]\n+    //~| NOTE cannot infer type for `_`\n+    //~| NOTE type annotations or generic parameter binding\n }\n \n fn main() {}"}, {"sha": "41242a44f58b80c1c852473ca2c8bbf39d38e4e2", "filename": "src/test/compile-fail/typeck-builtin-bound-type-parameters.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2Ftypeck-builtin-bound-type-parameters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2Ftypeck-builtin-bound-type-parameters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-builtin-bound-type-parameters.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -9,20 +9,27 @@\n // except according to those terms.\n \n fn foo1<T:Copy<U>, U>(x: T) {}\n-//~^ ERROR: wrong number of type arguments: expected 0, found 1\n+//~^ ERROR E0244\n+//~| NOTE expected no type arguments, found 1\n \n trait Trait: Copy<Send> {}\n-//~^ ERROR: wrong number of type arguments: expected 0, found 1\n+//~^ ERROR E0244\n+//~| NOTE expected no type arguments, found 1\n \n struct MyStruct1<T: Copy<T>>;\n-//~^ ERROR wrong number of type arguments: expected 0, found 1\n+//~^ ERROR E0244\n+//~| NOTE expected no type arguments, found 1\n \n struct MyStruct2<'a, T: Copy<'a>>;\n //~^ ERROR: wrong number of lifetime parameters: expected 0, found 1\n+//~| NOTE unexpected lifetime parameter\n+\n \n fn foo2<'a, T:Copy<'a, U>, U>(x: T) {}\n-//~^ ERROR: wrong number of type arguments: expected 0, found 1\n-//~^^ ERROR: wrong number of lifetime parameters: expected 0, found 1\n+//~^ ERROR E0244\n+//~| NOTE expected no type arguments, found 1\n+//~| ERROR: wrong number of lifetime parameters: expected 0, found 1\n+//~| NOTE unexpected lifetime parameter\n \n fn main() {\n }"}, {"sha": "42db3b47a04f3af15e6c3faf07ed8e2107a9b528", "filename": "src/test/compile-fail/typeck_type_placeholder_item.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_item.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -13,107 +13,141 @@\n \n fn test() -> _ { 5 }\n //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+//~| NOTE not allowed in type signatures\n \n fn test2() -> (_, _) { (5, 5) }\n //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n //~^^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+//~| NOTE not allowed in type signatures\n+//~| NOTE not allowed in type signatures\n \n static TEST3: _ = \"test\";\n //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+//~| NOTE not allowed in type signatures\n \n static TEST4: _ = 145;\n //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+//~| NOTE not allowed in type signatures\n \n static TEST5: (_, _) = (1, 2);\n //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n //~^^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+//~| NOTE not allowed in type signatures\n+//~| NOTE not allowed in type signatures\n \n fn test6(_: _) { }\n //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+//~| NOTE not allowed in type signatures\n \n fn test7(x: _) { let _x: usize = x; }\n //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+//~| NOTE not allowed in type signatures\n \n fn test8(_f: fn() -> _) { }\n //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+//~| NOTE not allowed in type signatures\n \n struct Test9;\n \n impl Test9 {\n     fn test9(&self) -> _ { () }\n     //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~| NOTE not allowed in type signatures\n \n     fn test10(&self, _x : _) { }\n     //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~| NOTE not allowed in type signatures\n }\n \n impl Clone for Test9 {\n     fn clone(&self) -> _ { Test9 }\n     //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~| NOTE not allowed in type signatures\n \n     fn clone_from(&mut self, other: _) { *self = Test9; }\n     //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~| NOTE not allowed in type signatures\n }\n \n struct Test10 {\n     a: _,\n     //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~| NOTE not allowed in type signatures\n     b: (_, _),\n     //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n     //~^^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~| NOTE not allowed in type signatures\n+    //~| NOTE not allowed in type signatures\n }\n \n pub fn main() {\n     fn fn_test() -> _ { 5 }\n     //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~| NOTE not allowed in type signatures\n \n     fn fn_test2() -> (_, _) { (5, 5) }\n     //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n     //~^^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~| NOTE not allowed in type signatures\n+    //~| NOTE not allowed in type signatures\n \n     static FN_TEST3: _ = \"test\";\n     //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~| NOTE not allowed in type signatures\n \n     static FN_TEST4: _ = 145;\n     //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~| NOTE not allowed in type signatures\n \n     static FN_TEST5: (_, _) = (1, 2);\n     //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n     //~^^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~| NOTE not allowed in type signatures\n+    //~| NOTE not allowed in type signatures\n \n     fn fn_test6(_: _) { }\n     //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~| NOTE not allowed in type signatures\n \n     fn fn_test7(x: _) { let _x: usize = x; }\n     //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~| NOTE not allowed in type signatures\n \n     fn fn_test8(_f: fn() -> _) { }\n     //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~| NOTE not allowed in type signatures\n \n     struct FnTest9;\n \n     impl FnTest9 {\n         fn fn_test9(&self) -> _ { () }\n         //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+        //~| NOTE not allowed in type signatures\n \n         fn fn_test10(&self, _x : _) { }\n         //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+        //~| NOTE not allowed in type signatures\n     }\n \n     impl Clone for FnTest9 {\n         fn clone(&self) -> _ { FnTest9 }\n         //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+        //~| NOTE not allowed in type signatures\n \n         fn clone_from(&mut self, other: _) { *self = FnTest9; }\n         //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+        //~| NOTE not allowed in type signatures\n     }\n \n     struct FnTest10 {\n         a: _,\n         //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+        //~| NOTE not allowed in type signatures\n         b: (_, _),\n         //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n         //~^^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+        //~| NOTE not allowed in type signatures\n+        //~| NOTE not allowed in type signatures\n     }\n \n }"}, {"sha": "f60d925a74864b918978de7a9ecc12ed9d8f4663", "filename": "src/test/compile-fail/typeck_type_placeholder_lifetime_1.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_lifetime_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_lifetime_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_lifetime_1.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -17,5 +17,6 @@ struct Foo<'a, T:'a> {\n \n pub fn main() {\n     let c: Foo<_, _> = Foo { r: &5 };\n-    //~^ ERROR wrong number of type arguments: expected 1, found 2\n+    //~^ ERROR E0244\n+    //~| NOTE expected 1 type arguments, found 2\n }"}, {"sha": "ec2675ece74b0dea088c6325650d63c22dd86682", "filename": "src/test/compile-fail/typeck_type_placeholder_lifetime_2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_lifetime_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_lifetime_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_lifetime_2.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -17,5 +17,6 @@ struct Foo<'a, T:'a> {\n \n pub fn main() {\n     let c: Foo<_, usize> = Foo { r: &5 };\n-    //~^ ERROR wrong number of type arguments: expected 1, found 2\n+    //~^ ERROR E0244\n+    //~| NOTE expected 1 type arguments, found 2\n }"}, {"sha": "1209757610251cd8477b890325a24bdaf7727b2a", "filename": "src/test/compile-fail/unboxed-closure-sugar-wrong-trait.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-wrong-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-wrong-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-wrong-trait.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -13,7 +13,8 @@\n trait Trait {}\n \n fn f<F:Trait(isize) -> isize>(x: F) {}\n-//~^ ERROR wrong number of type arguments: expected 0, found 1\n+//~^ ERROR E0244\n+//~| NOTE expected no type arguments, found 1\n //~| ERROR associated type `Output` not found\n \n fn main() {}"}, {"sha": "380cdd266cd6e86eff564624814a54a7586148c2", "filename": "src/test/compile-fail/unconstrained-none.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2Funconstrained-none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2Funconstrained-none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funconstrained-none.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -11,5 +11,7 @@\n // Issue #5062\n \n fn main() {\n-    None; //~ ERROR type annotations or generic parameter binding required\n+    None; //~ ERROR unable to infer enough type information about `_` [E0282]\n+          //~| NOTE cannot infer type for `_`\n+          //~| NOTE type annotations or generic parameter binding\n }"}, {"sha": "ba94bf613d217d8e18c3ff27775e91b2a82185ee", "filename": "src/test/compile-fail/unconstrained-ref.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2Funconstrained-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2Funconstrained-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funconstrained-ref.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -13,5 +13,7 @@ struct S<'a, T:'a> {\n }\n \n fn main() {\n-    S { o: &None }; //~ ERROR type annotations or generic parameter binding required\n+    S { o: &None }; //~ ERROR unable to infer enough type information about `_` [E0282]\n+                    //~| NOTE cannot infer type for `_`\n+                    //~| NOTE type annotations or generic parameter binding\n }"}, {"sha": "6be878dce1fb93acb3acc874225b9169582997aa", "filename": "src/test/compile-fail/use-mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2Fuse-mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2Fuse-mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuse-mod.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -15,7 +15,8 @@ use foo::bar::{\n     Bar,\n     self\n //~^ NOTE another `self` import appears here\n-//~^^ ERROR a module named `bar` has already been imported in this module\n+//~| ERROR a module named `bar` has already been imported in this module\n+//~| NOTE already imported\n };\n \n use {self};"}, {"sha": "25709f35246e3b37f70ae690f6869b133718bbc0", "filename": "src/test/compile-fail/vector-no-ann.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2Fvector-no-ann.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Fcompile-fail%2Fvector-no-ann.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvector-no-ann.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -11,5 +11,7 @@\n \n fn main() {\n     let _foo = Vec::new();\n-    //~^ ERROR type annotations or generic parameter binding required\n+    //~^ ERROR unable to infer enough type information about `_` [E0282]\n+    //~| NOTE cannot infer type for `_`\n+    //~| NOTE type annotations or generic parameter binding\n }"}, {"sha": "d2c335605458bb0976039ed9250e4bfedb87a9f8", "filename": "src/test/run-pass/issue-20847.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Frun-pass%2Fissue-20847.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Frun-pass%2Fissue-20847.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-20847.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(fn_traits)]\n+\n+use std::ops::Fn;\n+\n+fn say(x: u32, y: u32) {\n+    println!(\"{} {}\", x, y);\n+}\n+\n+fn main() {\n+    Fn::call(&say, (1, 2));\n+}"}, {"sha": "80b370d58fc5370a4b88640a8be21c9e38028dc7", "filename": "src/test/run-pass/slice_binary_search.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Frun-pass%2Fslice_binary_search.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a34d728b79d0f290aa6e7eebaad8cdd789ecd0/src%2Ftest%2Frun-pass%2Fslice_binary_search.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fslice_binary_search.rs?ref=71a34d728b79d0f290aa6e7eebaad8cdd789ecd0", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test binary_search_by_key lifetime. Issue #34683\n+\n+#[derive(Debug)]\n+struct Assignment {\n+    topic: String,\n+    partition: i32,\n+}\n+\n+fn main() {\n+    let xs = vec![\n+        Assignment { topic: \"abc\".into(), partition: 1 },\n+        Assignment { topic: \"def\".into(), partition: 2 },\n+        Assignment { topic: \"ghi\".into(), partition: 3 },\n+    ];\n+\n+    let key: &str = \"def\";\n+    let r = xs.binary_search_by_key(&key, |e| &e.topic);\n+    assert_eq!(Ok(1), r.map(|i| i));\n+}"}]}