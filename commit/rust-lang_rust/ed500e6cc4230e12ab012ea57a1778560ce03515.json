{"sha": "ed500e6cc4230e12ab012ea57a1778560ce03515", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkNTAwZTZjYzQyMzBlMTJhYjAxMmVhNTdhMTc3ODU2MGNlMDM1MTU=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2019-02-07T05:57:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-02-07T05:57:37Z"}, "message": "Rollup merge of #58119 - taiki-e:libproc_macro-2018, r=petrochenkov\n\nlibproc_macro => 2018\n\nTransitions `libproc_macro` to Rust 2018; cc #58099\n\nr? @Centril", "tree": {"sha": "06d29ddf328d2496126cf59898c81a79fd4231c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06d29ddf328d2496126cf59898c81a79fd4231c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed500e6cc4230e12ab012ea57a1778560ce03515", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcW8jRCRBK7hj4Ov3rIwAAdHIIAIR1hKyKK4M94g99taw6cDLL\nfMQZ+TBOhd7bwIPRyzzTd4YfC3Z7QO8esf4TNxznrk6Qu8WmqmGFFQY+jl7nkOYP\npwAZlMRRpTcCRensFC4PxmHhnLWqPQ9Y7jDFdcSE/gxtrRfNb6cv3x4yJdTY1qRp\n4v1n2tkHtsS4s71Gjhy6/zzEL1ef8CE16EgQ3HmIOLiybmMqzGucP4y0zO52dykm\nzf+td6y+j76/JcwBgh7WQYXp3dljCjWjBaV5EafDYOEjSP712fcVnqRz1jMipxOg\nzHYExjFnCUZtAPJwvL5AYysX/aw31+WfFKBkZAHVOJnItj6N0UhP/ABPp3dSTxY=\n=xKe+\n-----END PGP SIGNATURE-----\n", "payload": "tree 06d29ddf328d2496126cf59898c81a79fd4231c7\nparent 9b793702fe425b5ffe7d7c458b25ebfc8db1aa18\nparent 18da195bab0d64680d42ae141e09cbde5514a371\nauthor kennytm <kennytm@gmail.com> 1549519057 +0800\ncommitter GitHub <noreply@github.com> 1549519057 +0800\n\nRollup merge of #58119 - taiki-e:libproc_macro-2018, r=petrochenkov\n\nlibproc_macro => 2018\n\nTransitions `libproc_macro` to Rust 2018; cc #58099\n\nr? @Centril\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed500e6cc4230e12ab012ea57a1778560ce03515", "html_url": "https://github.com/rust-lang/rust/commit/ed500e6cc4230e12ab012ea57a1778560ce03515", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed500e6cc4230e12ab012ea57a1778560ce03515/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b793702fe425b5ffe7d7c458b25ebfc8db1aa18", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b793702fe425b5ffe7d7c458b25ebfc8db1aa18", "html_url": "https://github.com/rust-lang/rust/commit/9b793702fe425b5ffe7d7c458b25ebfc8db1aa18"}, {"sha": "18da195bab0d64680d42ae141e09cbde5514a371", "url": "https://api.github.com/repos/rust-lang/rust/commits/18da195bab0d64680d42ae141e09cbde5514a371", "html_url": "https://github.com/rust-lang/rust/commit/18da195bab0d64680d42ae141e09cbde5514a371"}], "stats": {"total": 190, "additions": 100, "deletions": 90}, "files": [{"sha": "b3d0ee94f0e12f4ae52f3bc48ebb144dd2aca443", "filename": "src/libproc_macro/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed500e6cc4230e12ab012ea57a1778560ce03515/src%2Flibproc_macro%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ed500e6cc4230e12ab012ea57a1778560ce03515/src%2Flibproc_macro%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2FCargo.toml?ref=ed500e6cc4230e12ab012ea57a1778560ce03515", "patch": "@@ -2,6 +2,7 @@\n authors = [\"The Rust Project Developers\"]\n name = \"proc_macro\"\n version = \"0.0.0\"\n+edition = \"2018\"\n \n [lib]\n path = \"lib.rs\""}, {"sha": "0d8cc552d61ab3cdbd86ec1d39f1d6527ddb3aa9", "filename": "src/libproc_macro/bridge/buffer.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ed500e6cc4230e12ab012ea57a1778560ce03515/src%2Flibproc_macro%2Fbridge%2Fbuffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed500e6cc4230e12ab012ea57a1778560ce03515/src%2Flibproc_macro%2Fbridge%2Fbuffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Fbridge%2Fbuffer.rs?ref=ed500e6cc4230e12ab012ea57a1778560ce03515", "patch": "@@ -6,7 +6,7 @@ use std::ops::{Deref, DerefMut};\n use std::slice;\n \n #[repr(C)]\n-struct Slice<'a, T: 'a> {\n+struct Slice<'a, T> {\n     data: &'a [T; 0],\n     len: usize,\n }\n@@ -42,7 +42,7 @@ pub struct Buffer<T: Copy> {\n     data: *mut T,\n     len: usize,\n     capacity: usize,\n-    extend_from_slice: extern \"C\" fn(Buffer<T>, Slice<T>) -> Buffer<T>,\n+    extend_from_slice: extern \"C\" fn(Buffer<T>, Slice<'_, T>) -> Buffer<T>,\n     drop: extern \"C\" fn(Buffer<T>),\n }\n \n@@ -139,7 +139,7 @@ impl<T: Copy> From<Vec<T>> for Buffer<T> {\n             }\n         }\n \n-        extern \"C\" fn extend_from_slice<T: Copy>(b: Buffer<T>, xs: Slice<T>) -> Buffer<T> {\n+        extern \"C\" fn extend_from_slice<T: Copy>(b: Buffer<T>, xs: Slice<'_, T>) -> Buffer<T> {\n             let mut v = to_vec(b);\n             v.extend_from_slice(&xs);\n             Buffer::from(v)"}, {"sha": "b198bdb144699908a7c1feb4a2ed411722912d29", "filename": "src/libproc_macro/bridge/client.rs", "status": "modified", "additions": 35, "deletions": 27, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/ed500e6cc4230e12ab012ea57a1778560ce03515/src%2Flibproc_macro%2Fbridge%2Fclient.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed500e6cc4230e12ab012ea57a1778560ce03515/src%2Flibproc_macro%2Fbridge%2Fclient.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Fbridge%2Fclient.rs?ref=ed500e6cc4230e12ab012ea57a1778560ce03515", "patch": "@@ -66,7 +66,7 @@ macro_rules! define_handles {\n             impl<S: server::Types> DecodeMut<'_, '_, HandleStore<server::MarkedTypes<S>>>\n                 for Marked<S::$oty, $oty>\n             {\n-                fn decode(r: &mut Reader, s: &mut HandleStore<server::MarkedTypes<S>>) -> Self {\n+                fn decode(r: &mut Reader<'_>, s: &mut HandleStore<server::MarkedTypes<S>>) -> Self {\n                     s.$oty.take(handle::Handle::decode(r, &mut ()))\n                 }\n             }\n@@ -80,7 +80,7 @@ macro_rules! define_handles {\n             impl<S: server::Types> Decode<'_, 's, HandleStore<server::MarkedTypes<S>>>\n                 for &'s Marked<S::$oty, $oty>\n             {\n-                fn decode(r: &mut Reader, s: &'s HandleStore<server::MarkedTypes<S>>) -> Self {\n+                fn decode(r: &mut Reader<'_>, s: &'s HandleStore<server::MarkedTypes<S>>) -> Self {\n                     &s.$oty[handle::Handle::decode(r, &mut ())]\n                 }\n             }\n@@ -94,7 +94,10 @@ macro_rules! define_handles {\n             impl<S: server::Types> DecodeMut<'_, 's, HandleStore<server::MarkedTypes<S>>>\n                 for &'s mut Marked<S::$oty, $oty>\n             {\n-                fn decode(r: &mut Reader, s: &'s mut HandleStore<server::MarkedTypes<S>>) -> Self {\n+                fn decode(\n+                    r: &mut Reader<'_>,\n+                    s: &'s mut HandleStore<server::MarkedTypes<S>>\n+                ) -> Self {\n                     &mut s.$oty[handle::Handle::decode(r, &mut ())]\n                 }\n             }\n@@ -108,7 +111,7 @@ macro_rules! define_handles {\n             }\n \n             impl<S> DecodeMut<'_, '_, S> for $oty {\n-                fn decode(r: &mut Reader, s: &mut S) -> Self {\n+                fn decode(r: &mut Reader<'_>, s: &mut S) -> Self {\n                     $oty(handle::Handle::decode(r, s))\n                 }\n             }\n@@ -130,7 +133,7 @@ macro_rules! define_handles {\n             impl<S: server::Types> DecodeMut<'_, '_, HandleStore<server::MarkedTypes<S>>>\n                 for Marked<S::$ity, $ity>\n             {\n-                fn decode(r: &mut Reader, s: &mut HandleStore<server::MarkedTypes<S>>) -> Self {\n+                fn decode(r: &mut Reader<'_>, s: &mut HandleStore<server::MarkedTypes<S>>) -> Self {\n                     s.$ity.copy(handle::Handle::decode(r, &mut ()))\n                 }\n             }\n@@ -144,7 +147,7 @@ macro_rules! define_handles {\n             }\n \n             impl<S> DecodeMut<'_, '_, S> for $ity {\n-                fn decode(r: &mut Reader, s: &mut S) -> Self {\n+                fn decode(r: &mut Reader<'_>, s: &mut S) -> Self {\n                     $ity(handle::Handle::decode(r, s))\n                 }\n             }\n@@ -200,7 +203,7 @@ impl Clone for Literal {\n \n // FIXME(eddyb) `Literal` should not expose internal `Debug` impls.\n impl fmt::Debug for Literal {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.write_str(&self.debug())\n     }\n }\n@@ -212,7 +215,7 @@ impl Clone for SourceFile {\n }\n \n impl fmt::Debug for Span {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.write_str(&self.debug())\n     }\n }\n@@ -275,7 +278,7 @@ impl BridgeState<'_> {\n     ///\n     /// N.B., while `f` is running, the thread-local state\n     /// is `BridgeState::InUse`.\n-    fn with<R>(f: impl FnOnce(&mut BridgeState) -> R) -> R {\n+    fn with<R>(f: impl FnOnce(&mut BridgeState<'_>) -> R) -> R {\n         BRIDGE_STATE.with(|state| {\n             state.replace(BridgeState::InUse, |mut state| {\n                 // FIXME(#52812) pass `f` directly to `replace` when `RefMutL` is gone\n@@ -306,7 +309,7 @@ impl Bridge<'_> {\n         BRIDGE_STATE.with(|state| state.set(BridgeState::Connected(self), f))\n     }\n \n-    fn with<R>(f: impl FnOnce(&mut Bridge) -> R) -> R {\n+    fn with<R>(f: impl FnOnce(&mut Bridge<'_>) -> R) -> R {\n         BridgeState::with(|state| match state {\n             BridgeState::NotConnected => {\n                 panic!(\"procedural macro API is used outside of a procedural macro\");\n@@ -331,15 +334,15 @@ impl Bridge<'_> {\n #[derive(Copy, Clone)]\n pub struct Client<F> {\n     pub(super) get_handle_counters: extern \"C\" fn() -> &'static HandleCounters,\n-    pub(super) run: extern \"C\" fn(Bridge, F) -> Buffer<u8>,\n+    pub(super) run: extern \"C\" fn(Bridge<'_>, F) -> Buffer<u8>,\n     pub(super) f: F,\n }\n \n // FIXME(#53451) public to work around `Cannot create local mono-item` ICE,\n // affecting not only the function itself, but also the `BridgeState` `thread_local!`.\n pub extern \"C\" fn __run_expand1(\n-    mut bridge: Bridge,\n-    f: fn(::TokenStream) -> ::TokenStream,\n+    mut bridge: Bridge<'_>,\n+    f: fn(crate::TokenStream) -> crate::TokenStream,\n ) -> Buffer<u8> {\n     // The initial `cached_buffer` contains the input.\n     let mut b = bridge.cached_buffer.take();\n@@ -352,7 +355,7 @@ pub extern \"C\" fn __run_expand1(\n             // Put the `cached_buffer` back in the `Bridge`, for requests.\n             Bridge::with(|bridge| bridge.cached_buffer = b.take());\n \n-            let output = f(::TokenStream(input)).0;\n+            let output = f(crate::TokenStream(input)).0;\n \n             // Take the `cached_buffer` back out, for the output value.\n             b = Bridge::with(|bridge| bridge.cached_buffer.take());\n@@ -378,8 +381,8 @@ pub extern \"C\" fn __run_expand1(\n     b\n }\n \n-impl Client<fn(::TokenStream) -> ::TokenStream> {\n-    pub const fn expand1(f: fn(::TokenStream) -> ::TokenStream) -> Self {\n+impl Client<fn(crate::TokenStream) -> crate::TokenStream> {\n+    pub const fn expand1(f: fn(crate::TokenStream) -> crate::TokenStream) -> Self {\n         Client {\n             get_handle_counters: HandleCounters::get,\n             run: __run_expand1,\n@@ -391,8 +394,8 @@ impl Client<fn(::TokenStream) -> ::TokenStream> {\n // FIXME(#53451) public to work around `Cannot create local mono-item` ICE,\n // affecting not only the function itself, but also the `BridgeState` `thread_local!`.\n pub extern \"C\" fn __run_expand2(\n-    mut bridge: Bridge,\n-    f: fn(::TokenStream, ::TokenStream) -> ::TokenStream,\n+    mut bridge: Bridge<'_>,\n+    f: fn(crate::TokenStream, crate::TokenStream) -> crate::TokenStream,\n ) -> Buffer<u8> {\n     // The initial `cached_buffer` contains the input.\n     let mut b = bridge.cached_buffer.take();\n@@ -406,7 +409,7 @@ pub extern \"C\" fn __run_expand2(\n             // Put the `cached_buffer` back in the `Bridge`, for requests.\n             Bridge::with(|bridge| bridge.cached_buffer = b.take());\n \n-            let output = f(::TokenStream(input), ::TokenStream(input2)).0;\n+            let output = f(crate::TokenStream(input), crate::TokenStream(input2)).0;\n \n             // Take the `cached_buffer` back out, for the output value.\n             b = Bridge::with(|bridge| bridge.cached_buffer.take());\n@@ -432,8 +435,10 @@ pub extern \"C\" fn __run_expand2(\n     b\n }\n \n-impl Client<fn(::TokenStream, ::TokenStream) -> ::TokenStream> {\n-    pub const fn expand2(f: fn(::TokenStream, ::TokenStream) -> ::TokenStream) -> Self {\n+impl Client<fn(crate::TokenStream, crate::TokenStream) -> crate::TokenStream> {\n+    pub const fn expand2(\n+        f: fn(crate::TokenStream, crate::TokenStream) -> crate::TokenStream\n+    ) -> Self {\n         Client {\n             get_handle_counters: HandleCounters::get,\n             run: __run_expand2,\n@@ -448,25 +453,25 @@ pub enum ProcMacro {\n     CustomDerive {\n         trait_name: &'static str,\n         attributes: &'static [&'static str],\n-        client: Client<fn(::TokenStream) -> ::TokenStream>,\n+        client: Client<fn(crate::TokenStream) -> crate::TokenStream>,\n     },\n \n     Attr {\n         name: &'static str,\n-        client: Client<fn(::TokenStream, ::TokenStream) -> ::TokenStream>,\n+        client: Client<fn(crate::TokenStream, crate::TokenStream) -> crate::TokenStream>,\n     },\n \n     Bang {\n         name: &'static str,\n-        client: Client<fn(::TokenStream) -> ::TokenStream>,\n+        client: Client<fn(crate::TokenStream) -> crate::TokenStream>,\n     },\n }\n \n impl ProcMacro {\n     pub const fn custom_derive(\n         trait_name: &'static str,\n         attributes: &'static [&'static str],\n-        expand: fn(::TokenStream) -> ::TokenStream,\n+        expand: fn(crate::TokenStream) -> crate::TokenStream,\n     ) -> Self {\n         ProcMacro::CustomDerive {\n             trait_name,\n@@ -477,15 +482,18 @@ impl ProcMacro {\n \n     pub const fn attr(\n         name: &'static str,\n-        expand: fn(::TokenStream, ::TokenStream) -> ::TokenStream,\n+        expand: fn(crate::TokenStream, crate::TokenStream) -> crate::TokenStream,\n     ) -> Self {\n         ProcMacro::Attr {\n             name,\n             client: Client::expand2(expand),\n         }\n     }\n \n-    pub const fn bang(name: &'static str, expand: fn(::TokenStream) -> ::TokenStream) -> Self {\n+    pub const fn bang(\n+        name: &'static str,\n+        expand: fn(crate::TokenStream) -> crate::TokenStream\n+    ) -> Self {\n         ProcMacro::Bang {\n             name,\n             client: Client::expand1(expand),"}, {"sha": "3173651b0395128bf59232f23578b63854881cc0", "filename": "src/libproc_macro/bridge/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ed500e6cc4230e12ab012ea57a1778560ce03515/src%2Flibproc_macro%2Fbridge%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed500e6cc4230e12ab012ea57a1778560ce03515/src%2Flibproc_macro%2Fbridge%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Fbridge%2Fmod.rs?ref=ed500e6cc4230e12ab012ea57a1778560ce03515", "patch": "@@ -17,7 +17,7 @@ use std::panic;\n use std::sync::atomic::AtomicUsize;\n use std::sync::Once;\n use std::thread;\n-use {Delimiter, Level, LineColumn, Spacing};\n+use crate::{Delimiter, Level, LineColumn, Spacing};\n \n /// Higher-order macro describing the server RPC API, allowing automatic\n /// generation of type-safe Rust APIs, both client-side and server-side.\n@@ -196,9 +196,9 @@ mod scoped_cell;\n #[forbid(unsafe_code)]\n pub mod server;\n \n-use self::buffer::Buffer;\n-pub use self::rpc::PanicMessage;\n-use self::rpc::{Decode, DecodeMut, Encode, Reader, Writer};\n+use buffer::Buffer;\n+pub use rpc::PanicMessage;\n+use rpc::{Decode, DecodeMut, Encode, Reader, Writer};\n \n /// An active connection between a server and a client.\n /// The server creates the bridge (`Bridge::run_server` in `server.rs`),"}, {"sha": "a3bc0d229084679e232db6d554c626647cac6022", "filename": "src/libproc_macro/bridge/rpc.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ed500e6cc4230e12ab012ea57a1778560ce03515/src%2Flibproc_macro%2Fbridge%2Frpc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed500e6cc4230e12ab012ea57a1778560ce03515/src%2Flibproc_macro%2Fbridge%2Frpc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Fbridge%2Frpc.rs?ref=ed500e6cc4230e12ab012ea57a1778560ce03515", "patch": "@@ -40,7 +40,7 @@ macro_rules! rpc_encode_decode {\n         }\n \n         impl<S> DecodeMut<'_, '_, S> for $ty {\n-            fn decode(r: &mut Reader, s: &mut S) -> Self {\n+            fn decode(r: &mut Reader<'_>, s: &mut S) -> Self {\n                 let mut byte = 0x80;\n                 let mut v = 0;\n                 let mut shift = 0;\n@@ -61,7 +61,7 @@ macro_rules! rpc_encode_decode {\n         }\n \n         impl<S> DecodeMut<'_, '_, S> for $name {\n-            fn decode(r: &mut Reader, s: &mut S) -> Self {\n+            fn decode(r: &mut Reader<'_>, s: &mut S) -> Self {\n                 $name {\n                     $($field: DecodeMut::decode(r, s)),*\n                 }\n@@ -119,7 +119,7 @@ impl<S> Encode<S> for () {\n }\n \n impl<S> DecodeMut<'_, '_, S> for () {\n-    fn decode(_: &mut Reader, _: &mut S) -> Self {}\n+    fn decode(_: &mut Reader<'_>, _: &mut S) -> Self {}\n }\n \n impl<S> Encode<S> for u8 {\n@@ -129,7 +129,7 @@ impl<S> Encode<S> for u8 {\n }\n \n impl<S> DecodeMut<'_, '_, S> for u8 {\n-    fn decode(r: &mut Reader, _: &mut S) -> Self {\n+    fn decode(r: &mut Reader<'_>, _: &mut S) -> Self {\n         let x = r[0];\n         *r = &r[1..];\n         x\n@@ -146,7 +146,7 @@ impl<S> Encode<S> for bool {\n }\n \n impl<S> DecodeMut<'_, '_, S> for bool {\n-    fn decode(r: &mut Reader, s: &mut S) -> Self {\n+    fn decode(r: &mut Reader<'_>, s: &mut S) -> Self {\n         match u8::decode(r, s) {\n             0 => false,\n             1 => true,\n@@ -162,7 +162,7 @@ impl<S> Encode<S> for char {\n }\n \n impl<S> DecodeMut<'_, '_, S> for char {\n-    fn decode(r: &mut Reader, s: &mut S) -> Self {\n+    fn decode(r: &mut Reader<'_>, s: &mut S) -> Self {\n         char::from_u32(u32::decode(r, s)).unwrap()\n     }\n }\n@@ -174,7 +174,7 @@ impl<S> Encode<S> for NonZeroU32 {\n }\n \n impl<S> DecodeMut<'_, '_, S> for NonZeroU32 {\n-    fn decode(r: &mut Reader, s: &mut S) -> Self {\n+    fn decode(r: &mut Reader<'_>, s: &mut S) -> Self {\n         Self::new(u32::decode(r, s)).unwrap()\n     }\n }\n@@ -251,7 +251,7 @@ impl<S> Encode<S> for String {\n }\n \n impl<S> DecodeMut<'_, '_, S> for String {\n-    fn decode(r: &mut Reader, s: &mut S) -> Self {\n+    fn decode(r: &mut Reader<'_>, s: &mut S) -> Self {\n         <&str>::decode(r, s).to_string()\n     }\n }\n@@ -306,7 +306,7 @@ impl<S> Encode<S> for PanicMessage {\n }\n \n impl<S> DecodeMut<'_, '_, S> for PanicMessage {\n-    fn decode(r: &mut Reader, s: &mut S) -> Self {\n+    fn decode(r: &mut Reader<'_>, s: &mut S) -> Self {\n         match Option::<String>::decode(r, s) {\n             Some(s) => PanicMessage::String(s),\n             None => PanicMessage::Unknown,"}, {"sha": "75806eb9d17602edbae8da9143391ba067d81897", "filename": "src/libproc_macro/bridge/server.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ed500e6cc4230e12ab012ea57a1778560ce03515/src%2Flibproc_macro%2Fbridge%2Fserver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed500e6cc4230e12ab012ea57a1778560ce03515/src%2Flibproc_macro%2Fbridge%2Fserver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Fbridge%2Fserver.rs?ref=ed500e6cc4230e12ab012ea57a1778560ce03515", "patch": "@@ -131,7 +131,7 @@ pub trait ExecutionStrategy {\n         &self,\n         dispatcher: &mut impl DispatcherTrait,\n         input: Buffer<u8>,\n-        run_client: extern \"C\" fn(Bridge, D) -> Buffer<u8>,\n+        run_client: extern \"C\" fn(Bridge<'_>, D) -> Buffer<u8>,\n         client_data: D,\n     ) -> Buffer<u8>;\n }\n@@ -143,7 +143,7 @@ impl ExecutionStrategy for SameThread {\n         &self,\n         dispatcher: &mut impl DispatcherTrait,\n         input: Buffer<u8>,\n-        run_client: extern \"C\" fn(Bridge, D) -> Buffer<u8>,\n+        run_client: extern \"C\" fn(Bridge<'_>, D) -> Buffer<u8>,\n         client_data: D,\n     ) -> Buffer<u8> {\n         let mut dispatch = |b| dispatcher.dispatch(b);\n@@ -168,7 +168,7 @@ impl ExecutionStrategy for CrossThread1 {\n         &self,\n         dispatcher: &mut impl DispatcherTrait,\n         input: Buffer<u8>,\n-        run_client: extern \"C\" fn(Bridge, D) -> Buffer<u8>,\n+        run_client: extern \"C\" fn(Bridge<'_>, D) -> Buffer<u8>,\n         client_data: D,\n     ) -> Buffer<u8> {\n         use std::sync::mpsc::channel;\n@@ -206,7 +206,7 @@ impl ExecutionStrategy for CrossThread2 {\n         &self,\n         dispatcher: &mut impl DispatcherTrait,\n         input: Buffer<u8>,\n-        run_client: extern \"C\" fn(Bridge, D) -> Buffer<u8>,\n+        run_client: extern \"C\" fn(Bridge<'_>, D) -> Buffer<u8>,\n         client_data: D,\n     ) -> Buffer<u8> {\n         use std::sync::{Arc, Mutex};\n@@ -273,7 +273,7 @@ fn run_server<\n     handle_counters: &'static client::HandleCounters,\n     server: S,\n     input: I,\n-    run_client: extern \"C\" fn(Bridge, D) -> Buffer<u8>,\n+    run_client: extern \"C\" fn(Bridge<'_>, D) -> Buffer<u8>,\n     client_data: D,\n ) -> Result<O, PanicMessage> {\n     let mut dispatcher = Dispatcher {\n@@ -289,7 +289,7 @@ fn run_server<\n     Result::decode(&mut &b[..], &mut dispatcher.handle_store)\n }\n \n-impl client::Client<fn(::TokenStream) -> ::TokenStream> {\n+impl client::Client<fn(crate::TokenStream) -> crate::TokenStream> {\n     pub fn run<S: Server>(\n         &self,\n         strategy: &impl ExecutionStrategy,\n@@ -313,7 +313,7 @@ impl client::Client<fn(::TokenStream) -> ::TokenStream> {\n     }\n }\n \n-impl client::Client<fn(::TokenStream, ::TokenStream) -> ::TokenStream> {\n+impl client::Client<fn(crate::TokenStream, crate::TokenStream) -> crate::TokenStream> {\n     pub fn run<S: Server>(\n         &self,\n         strategy: &impl ExecutionStrategy,"}, {"sha": "7a0c9419f62342f1ae4827987c77bfb398b3ee9f", "filename": "src/libproc_macro/diagnostic.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ed500e6cc4230e12ab012ea57a1778560ce03515/src%2Flibproc_macro%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed500e6cc4230e12ab012ea57a1778560ce03515/src%2Flibproc_macro%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Fdiagnostic.rs?ref=ed500e6cc4230e12ab012ea57a1778560ce03515", "patch": "@@ -1,4 +1,4 @@\n-use Span;\n+use crate::Span;\n \n /// An enum representing a diagnostic level.\n #[unstable(feature = \"proc_macro_diagnostic\", issue = \"54140\")]\n@@ -80,7 +80,7 @@ macro_rules! diagnostic_child_methods {\n /// Iterator over the children diagnostics of a `Diagnostic`.\n #[derive(Debug, Clone)]\n #[unstable(feature = \"proc_macro_diagnostic\", issue = \"54140\")]\n-pub struct Children<'a>(::std::slice::Iter<'a, Diagnostic>);\n+pub struct Children<'a>(std::slice::Iter<'a, Diagnostic>);\n \n #[unstable(feature = \"proc_macro_diagnostic\", issue = \"54140\")]\n impl<'a> Iterator for Children<'a> {\n@@ -161,22 +161,22 @@ impl Diagnostic {\n \n     /// Returns an iterator over the children diagnostics of `self`.\n     #[unstable(feature = \"proc_macro_diagnostic\", issue = \"54140\")]\n-    pub fn children(&self) -> Children {\n+    pub fn children(&self) -> Children<'_> {\n         Children(self.children.iter())\n     }\n \n     /// Emit the diagnostic.\n     #[unstable(feature = \"proc_macro_diagnostic\", issue = \"54140\")]\n     pub fn emit(self) {\n-        fn to_internal(spans: Vec<Span>) -> ::bridge::client::MultiSpan {\n-            let mut multi_span = ::bridge::client::MultiSpan::new();\n+        fn to_internal(spans: Vec<Span>) -> crate::bridge::client::MultiSpan {\n+            let mut multi_span = crate::bridge::client::MultiSpan::new();\n             for span in spans {\n                 multi_span.push(span.0);\n             }\n             multi_span\n         }\n \n-        let mut diag = ::bridge::client::Diagnostic::new(\n+        let mut diag = crate::bridge::client::Diagnostic::new(\n             self.level,\n             &self.message[..],\n             to_internal(self.spans),"}, {"sha": "bb6f5e234f7c227038faa93ae10e06918f1cbd6d", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/ed500e6cc4230e12ab012ea57a1778560ce03515/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed500e6cc4230e12ab012ea57a1778560ce03515/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=ed500e6cc4230e12ab012ea57a1778560ce03515", "patch": "@@ -17,7 +17,8 @@\n        test(no_crate_inject, attr(deny(warnings))),\n        test(attr(allow(dead_code, deprecated, unused_variables, unused_mut))))]\n \n-#![feature(nll)]\n+#![deny(rust_2018_idioms)]\n+\n #![feature(staged_api)]\n #![feature(const_fn)]\n #![feature(extern_types)]\n@@ -114,15 +115,15 @@ impl ToString for TokenStream {\n /// with `Delimiter::None` delimiters and negative numeric literals.\n #[stable(feature = \"proc_macro_lib\", since = \"1.15.0\")]\n impl fmt::Display for TokenStream {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.write_str(&self.to_string())\n     }\n }\n \n /// Prints token in a form convenient for debugging.\n #[stable(feature = \"proc_macro_lib\", since = \"1.15.0\")]\n impl fmt::Debug for TokenStream {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.write_str(\"TokenStream \")?;\n         f.debug_list().entries(self.clone()).finish()\n     }\n@@ -183,7 +184,7 @@ impl Extend<TokenStream> for TokenStream {\n /// Public implementation details for the `TokenStream` type, such as iterators.\n #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n pub mod token_stream {\n-    use {bridge, Group, Ident, Literal, Punct, TokenTree, TokenStream};\n+    use crate::{bridge, Group, Ident, Literal, Punct, TokenTree, TokenStream};\n \n     /// An iterator over `TokenStream`'s `TokenTree`s.\n     /// The iteration is \"shallow\", e.g., the iterator doesn't recurse into delimited groups,\n@@ -340,7 +341,7 @@ impl Span {\n /// Prints a span in a form convenient for debugging.\n #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n impl fmt::Debug for Span {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         self.0.fmt(f)\n     }\n }\n@@ -398,7 +399,7 @@ impl SourceFile {\n \n #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n impl fmt::Debug for SourceFile {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"SourceFile\")\n             .field(\"path\", &self.path())\n             .field(\"is_real\", &self.is_real())\n@@ -483,7 +484,7 @@ impl TokenTree {\n /// Prints token tree in a form convenient for debugging.\n #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n impl fmt::Debug for TokenTree {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         // Each of these has the name in the struct type in the derived debug,\n         // so don't bother with an extra layer of indirection\n         match *self {\n@@ -542,7 +543,7 @@ impl ToString for TokenTree {\n /// with `Delimiter::None` delimiters and negative numeric literals.\n #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n impl fmt::Display for TokenTree {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.write_str(&self.to_string())\n     }\n }\n@@ -667,14 +668,14 @@ impl ToString for Group {\n /// with `Delimiter::None` delimiters.\n #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n impl fmt::Display for Group {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.write_str(&self.to_string())\n     }\n }\n \n #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n impl fmt::Debug for Group {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"Group\")\n             .field(\"delimiter\", &self.delimiter())\n             .field(\"stream\", &self.stream())\n@@ -763,14 +764,14 @@ impl ToString for Punct {\n /// back into the same character.\n #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n impl fmt::Display for Punct {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.write_str(&self.to_string())\n     }\n }\n \n #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n impl fmt::Debug for Punct {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"Punct\")\n             .field(\"ch\", &self.as_char())\n             .field(\"spacing\", &self.spacing())\n@@ -842,14 +843,14 @@ impl ToString for Ident {\n /// back into the same identifier.\n #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n impl fmt::Display for Ident {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.write_str(&self.to_string())\n     }\n }\n \n #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n impl fmt::Debug for Ident {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"Ident\")\n             .field(\"ident\", &self.to_string())\n             .field(\"span\", &self.span())\n@@ -1092,14 +1093,14 @@ impl ToString for Literal {\n /// back into the same literal (except for possible rounding for floating point literals).\n #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n impl fmt::Display for Literal {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.write_str(&self.to_string())\n     }\n }\n \n #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n impl fmt::Debug for Literal {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         // FIXME(eddyb) `Literal` should not expose internal `Debug` impls.\n         self.0.fmt(f)\n     }"}, {"sha": "e3d31b78f4a09258b398160bd9185d5f2671e80a", "filename": "src/libproc_macro/quote.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ed500e6cc4230e12ab012ea57a1778560ce03515/src%2Flibproc_macro%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed500e6cc4230e12ab012ea57a1778560ce03515/src%2Flibproc_macro%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Fquote.rs?ref=ed500e6cc4230e12ab012ea57a1778560ce03515", "patch": "@@ -4,7 +4,7 @@\n //! This quasiquoter uses macros 2.0 hygiene to reliably access\n //! items from `proc_macro`, to build a `proc_macro::TokenStream`.\n \n-use {Delimiter, Group, Ident, Literal, Punct, Spacing, Span, TokenStream, TokenTree};\n+use crate::{Delimiter, Group, Ident, Literal, Punct, Spacing, Span, TokenStream, TokenTree};\n \n macro_rules! quote_tt {\n     (($($t:tt)*)) => { Group::new(Delimiter::Parenthesis, quote!($($t)*)) };\n@@ -63,7 +63,7 @@ macro_rules! quote {\n #[unstable(feature = \"proc_macro_quote\", issue = \"54722\")]\n pub fn quote(stream: TokenStream) -> TokenStream {\n     if stream.is_empty() {\n-        return quote!(::TokenStream::new());\n+        return quote!(crate::TokenStream::new());\n     }\n     let mut after_dollar = false;\n     let tokens = stream\n@@ -73,7 +73,7 @@ pub fn quote(stream: TokenStream) -> TokenStream {\n                 after_dollar = false;\n                 match tree {\n                     TokenTree::Ident(_) => {\n-                        return Some(quote!(Into::<::TokenStream>::into(\n+                        return Some(quote!(Into::<crate::TokenStream>::into(\n                         Clone::clone(&(@ tree))),));\n                     }\n                     TokenTree::Punct(ref tt) if tt.as_char() == '$' => {}\n@@ -86,33 +86,33 @@ pub fn quote(stream: TokenStream) -> TokenStream {\n                 }\n             }\n \n-            Some(quote!(::TokenStream::from((@ match tree {\n-                TokenTree::Punct(tt) => quote!(::TokenTree::Punct(::Punct::new(\n+            Some(quote!(crate::TokenStream::from((@ match tree {\n+                TokenTree::Punct(tt) => quote!(crate::TokenTree::Punct(crate::Punct::new(\n                     (@ TokenTree::from(Literal::character(tt.as_char()))),\n                     (@ match tt.spacing() {\n-                        Spacing::Alone => quote!(::Spacing::Alone),\n-                        Spacing::Joint => quote!(::Spacing::Joint),\n+                        Spacing::Alone => quote!(crate::Spacing::Alone),\n+                        Spacing::Joint => quote!(crate::Spacing::Joint),\n                     }),\n                 ))),\n-                TokenTree::Group(tt) => quote!(::TokenTree::Group(::Group::new(\n+                TokenTree::Group(tt) => quote!(crate::TokenTree::Group(crate::Group::new(\n                     (@ match tt.delimiter() {\n-                        Delimiter::Parenthesis => quote!(::Delimiter::Parenthesis),\n-                        Delimiter::Brace => quote!(::Delimiter::Brace),\n-                        Delimiter::Bracket => quote!(::Delimiter::Bracket),\n-                        Delimiter::None => quote!(::Delimiter::None),\n+                        Delimiter::Parenthesis => quote!(crate::Delimiter::Parenthesis),\n+                        Delimiter::Brace => quote!(crate::Delimiter::Brace),\n+                        Delimiter::Bracket => quote!(crate::Delimiter::Bracket),\n+                        Delimiter::None => quote!(crate::Delimiter::None),\n                     }),\n                     (@ quote(tt.stream())),\n                 ))),\n-                TokenTree::Ident(tt) => quote!(::TokenTree::Ident(::Ident::new(\n+                TokenTree::Ident(tt) => quote!(crate::TokenTree::Ident(crate::Ident::new(\n                     (@ TokenTree::from(Literal::string(&tt.to_string()))),\n                     (@ quote_span(tt.span())),\n                 ))),\n-                TokenTree::Literal(tt) => quote!(::TokenTree::Literal({\n+                TokenTree::Literal(tt) => quote!(crate::TokenTree::Literal({\n                     let mut iter = (@ TokenTree::from(Literal::string(&tt.to_string())))\n-                        .parse::<::TokenStream>()\n+                        .parse::<crate::TokenStream>()\n                         .unwrap()\n                         .into_iter();\n-                    if let (Some(::TokenTree::Literal(mut lit)), None) =\n+                    if let (Some(crate::TokenTree::Literal(mut lit)), None) =\n                         (iter.next(), iter.next())\n                     {\n                         lit.set_span((@ quote_span(tt.span())));\n@@ -129,12 +129,12 @@ pub fn quote(stream: TokenStream) -> TokenStream {\n         panic!(\"unexpected trailing `$` in `quote!`\");\n     }\n \n-    quote!([(@ tokens)].iter().cloned().collect::<::TokenStream>())\n+    quote!([(@ tokens)].iter().cloned().collect::<crate::TokenStream>())\n }\n \n /// Quote a `Span` into a `TokenStream`.\n /// This is needed to implement a custom quoter.\n #[unstable(feature = \"proc_macro_quote\", issue = \"54722\")]\n pub fn quote_span(_: Span) -> TokenStream {\n-    quote!(::Span::def_site())\n+    quote!(crate::Span::def_site())\n }"}]}