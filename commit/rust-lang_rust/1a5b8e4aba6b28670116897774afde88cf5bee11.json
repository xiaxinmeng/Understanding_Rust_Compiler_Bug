{"sha": "1a5b8e4aba6b28670116897774afde88cf5bee11", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhNWI4ZTRhYmE2YjI4NjcwMTE2ODk3Nzc0YWZkZTg4Y2Y1YmVlMTE=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-02-11T16:34:00Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-02-19T18:02:51Z"}, "message": "libsyntax: change attr:get_attr_name to take a ref", "tree": {"sha": "ecb303a70c46e684d28e8a50ea5dbc8c7d3c5ab4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ecb303a70c46e684d28e8a50ea5dbc8c7d3c5ab4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a5b8e4aba6b28670116897774afde88cf5bee11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a5b8e4aba6b28670116897774afde88cf5bee11", "html_url": "https://github.com/rust-lang/rust/commit/1a5b8e4aba6b28670116897774afde88cf5bee11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a5b8e4aba6b28670116897774afde88cf5bee11/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc62bd378251d6dd60f2999cd8c853a75a4e8d02", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc62bd378251d6dd60f2999cd8c853a75a4e8d02", "html_url": "https://github.com/rust-lang/rust/commit/bc62bd378251d6dd60f2999cd8c853a75a4e8d02"}], "stats": {"total": 21, "additions": 10, "deletions": 11}, "files": [{"sha": "90b83e9bd6e613c5f88f4208b9f0d62fb2caf3b6", "filename": "src/librustc/front/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a5b8e4aba6b28670116897774afde88cf5bee11/src%2Flibrustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a5b8e4aba6b28670116897774afde88cf5bee11/src%2Flibrustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ftest.rs?ref=1a5b8e4aba6b28670116897774afde88cf5bee11", "patch": "@@ -111,7 +111,7 @@ fn fold_mod(cx: @mut TestCtxt,\n     fn nomain(cx: @mut TestCtxt, item: @ast::item) -> @ast::item {\n         if !*cx.sess.building_library {\n             @ast::item{attrs: item.attrs.filtered(|attr| {\n-                               attr::get_attr_name(*attr) != ~\"main\"\n+                               attr::get_attr_name(attr) != ~\"main\"\n                            }),.. copy *item}\n         } else { item }\n     }"}, {"sha": "6267e6be67b8ef07edac7a831ec9559a5a0b392b", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a5b8e4aba6b28670116897774afde88cf5bee11/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a5b8e4aba6b28670116897774afde88cf5bee11/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=1a5b8e4aba6b28670116897774afde88cf5bee11", "patch": "@@ -1097,7 +1097,7 @@ fn synthesize_crate_attrs(ecx: @encode_ctxt, crate: &crate) -> ~[attribute] {\n     let mut found_link_attr = false;\n     for crate.node.attrs.each |attr| {\n         attrs.push(\n-            if attr::get_attr_name(*attr) != ~\"link\" {\n+            if attr::get_attr_name(attr) != ~\"link\" {\n                 /*bad*/copy *attr\n             } else {\n                 match /*bad*/copy attr.node.value.node {"}, {"sha": "c50c6ddc2104f61dcc5262af26aa63dd4e738685", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1a5b8e4aba6b28670116897774afde88cf5bee11/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a5b8e4aba6b28670116897774afde88cf5bee11/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=1a5b8e4aba6b28670116897774afde88cf5bee11", "patch": "@@ -90,7 +90,7 @@ pub fn desugar_doc_attr(attr: &ast::attribute) -> ast::attribute {\n \n /* Accessors */\n \n-pub fn get_attr_name(attr: ast::attribute) -> ~str {\n+pub fn get_attr_name(attr: &ast::attribute) -> ~str {\n     get_meta_item_name(@attr.node.value)\n }\n \n@@ -146,14 +146,13 @@ pub fn get_name_value_str_pair(item: @ast::meta_item)\n /// Search a list of attributes and return only those with a specific name\n pub fn find_attrs_by_name(attrs: &[ast::attribute], name: &str) ->\n    ~[ast::attribute] {\n-    let filter: &fn(a: &ast::attribute) -> Option<ast::attribute> = |a| {\n-        if name == get_attr_name(*a) {\n-            option::Some(*a)\n+    do vec::filter_mapped(attrs) |a| {\n+        if name == get_attr_name(a) {\n+            Some(*a)\n         } else {\n-            option::None\n+            None\n         }\n-    };\n-    return vec::filter_mapped(attrs, filter);\n+    }\n }\n \n /// Search a list of meta items and return only those with a specific name"}, {"sha": "24f5d650d2b0077a3d79019008429710218b9d44", "filename": "src/libsyntax/ext/auto_encode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a5b8e4aba6b28670116897774afde88cf5bee11/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a5b8e4aba6b28670116897774afde88cf5bee11/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fauto_encode.rs?ref=1a5b8e4aba6b28670116897774afde88cf5bee11", "patch": "@@ -114,7 +114,7 @@ pub fn expand_auto_encode(\n     in_items: ~[@ast::item]\n ) -> ~[@ast::item] {\n     fn is_auto_encode(a: &ast::attribute) -> bool {\n-        attr::get_attr_name(*a) == ~\"auto_encode\"\n+        attr::get_attr_name(a) == ~\"auto_encode\"\n     }\n \n     fn filter_attrs(item: @ast::item) -> @ast::item {\n@@ -169,7 +169,7 @@ pub fn expand_auto_decode(\n     in_items: ~[@ast::item]\n ) -> ~[@ast::item] {\n     fn is_auto_decode(a: &ast::attribute) -> bool {\n-        attr::get_attr_name(*a) == ~\"auto_decode\"\n+        attr::get_attr_name(a) == ~\"auto_decode\"\n     }\n \n     fn filter_attrs(item: @ast::item) -> @ast::item {"}]}