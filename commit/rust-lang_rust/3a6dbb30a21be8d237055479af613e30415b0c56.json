{"sha": "3a6dbb30a21be8d237055479af613e30415b0c56", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhNmRiYjMwYTIxYmU4ZDIzNzA1NTQ3OWFmNjEzZTMwNDE1YjBjNTY=", "commit": {"author": {"name": "Michael F. Lamb", "email": "mike@datagrok.org", "date": "2016-01-07T00:04:47Z"}, "committer": {"name": "Michael F. Lamb", "email": "mike@datagrok.org", "date": "2016-01-07T00:06:55Z"}, "message": "Be consistent about what is a \"chapter\" versus a \"section\"", "tree": {"sha": "0ff0706a67b657fefb6e2673e207c75a6eebc298", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ff0706a67b657fefb6e2673e207c75a6eebc298"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a6dbb30a21be8d237055479af613e30415b0c56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a6dbb30a21be8d237055479af613e30415b0c56", "html_url": "https://github.com/rust-lang/rust/commit/3a6dbb30a21be8d237055479af613e30415b0c56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a6dbb30a21be8d237055479af613e30415b0c56/comments", "author": {"login": "datagrok", "id": 569728, "node_id": "MDQ6VXNlcjU2OTcyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/569728?v=4", "gravatar_id": "", "url": "https://api.github.com/users/datagrok", "html_url": "https://github.com/datagrok", "followers_url": "https://api.github.com/users/datagrok/followers", "following_url": "https://api.github.com/users/datagrok/following{/other_user}", "gists_url": "https://api.github.com/users/datagrok/gists{/gist_id}", "starred_url": "https://api.github.com/users/datagrok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/datagrok/subscriptions", "organizations_url": "https://api.github.com/users/datagrok/orgs", "repos_url": "https://api.github.com/users/datagrok/repos", "events_url": "https://api.github.com/users/datagrok/events{/privacy}", "received_events_url": "https://api.github.com/users/datagrok/received_events", "type": "User", "site_admin": false}, "committer": {"login": "datagrok", "id": 569728, "node_id": "MDQ6VXNlcjU2OTcyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/569728?v=4", "gravatar_id": "", "url": "https://api.github.com/users/datagrok", "html_url": "https://github.com/datagrok", "followers_url": "https://api.github.com/users/datagrok/followers", "following_url": "https://api.github.com/users/datagrok/following{/other_user}", "gists_url": "https://api.github.com/users/datagrok/gists{/gist_id}", "starred_url": "https://api.github.com/users/datagrok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/datagrok/subscriptions", "organizations_url": "https://api.github.com/users/datagrok/orgs", "repos_url": "https://api.github.com/users/datagrok/repos", "events_url": "https://api.github.com/users/datagrok/events{/privacy}", "received_events_url": "https://api.github.com/users/datagrok/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "936678adb10b8dee7a9f83d5fc7526c036daddd3", "url": "https://api.github.com/repos/rust-lang/rust/commits/936678adb10b8dee7a9f83d5fc7526c036daddd3", "html_url": "https://github.com/rust-lang/rust/commit/936678adb10b8dee7a9f83d5fc7526c036daddd3"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "9f9b6a9b043dde75197310bf764f1338f75acc29", "filename": "src/doc/book/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a6dbb30a21be8d237055479af613e30415b0c56/src%2Fdoc%2Fbook%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/3a6dbb30a21be8d237055479af613e30415b0c56/src%2Fdoc%2Fbook%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2FREADME.md?ref=3a6dbb30a21be8d237055479af613e30415b0c56", "patch": "@@ -14,7 +14,7 @@ Even then, Rust still allows precise control like a low-level language would.\n \n [rust]: https://www.rust-lang.org\n \n-\u201cThe Rust Programming Language\u201d is split into sections. This introduction\n+\u201cThe Rust Programming Language\u201d is split into chapters. This introduction\n is the first. After this:\n \n * [Getting started][gs] - Set up your computer for Rust development."}, {"sha": "24993477ede257c11b08186d18533117996beb41", "filename": "src/doc/book/closures.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a6dbb30a21be8d237055479af613e30415b0c56/src%2Fdoc%2Fbook%2Fclosures.md", "raw_url": "https://github.com/rust-lang/rust/raw/3a6dbb30a21be8d237055479af613e30415b0c56/src%2Fdoc%2Fbook%2Fclosures.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fclosures.md?ref=3a6dbb30a21be8d237055479af613e30415b0c56", "patch": "@@ -208,7 +208,7 @@ different.\n \n Rust\u2019s implementation of closures is a bit different than other languages. They\n are effectively syntax sugar for traits. You\u2019ll want to make sure to have read\n-the [traits chapter][traits] before this one, as well as the chapter on [trait\n+the [traits][traits] section before this one, as well as the section on [trait\n objects][trait-objects].\n \n [traits]: traits.html"}, {"sha": "65873c80e55e4364e13ac2107463088b2760d673", "filename": "src/doc/book/effective-rust.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a6dbb30a21be8d237055479af613e30415b0c56/src%2Fdoc%2Fbook%2Feffective-rust.md", "raw_url": "https://github.com/rust-lang/rust/raw/3a6dbb30a21be8d237055479af613e30415b0c56/src%2Fdoc%2Fbook%2Feffective-rust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Feffective-rust.md?ref=3a6dbb30a21be8d237055479af613e30415b0c56", "patch": "@@ -3,6 +3,6 @@\n So you\u2019ve learned how to write some Rust code. But there\u2019s a difference between\n writing *any* Rust code and writing *good* Rust code.\n \n-This section consists of relatively independent tutorials which show you how to\n+This chapter consists of relatively independent tutorials which show you how to\n take your Rust to the next level. Common patterns and standard library features\n will be introduced. Read these sections in any order of your choosing."}, {"sha": "f24f7d1dbb173fed75071f51665b8fd749471127", "filename": "src/doc/book/error-handling.md", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3a6dbb30a21be8d237055479af613e30415b0c56/src%2Fdoc%2Fbook%2Ferror-handling.md", "raw_url": "https://github.com/rust-lang/rust/raw/3a6dbb30a21be8d237055479af613e30415b0c56/src%2Fdoc%2Fbook%2Ferror-handling.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Ferror-handling.md?ref=3a6dbb30a21be8d237055479af613e30415b0c56", "patch": "@@ -5,18 +5,18 @@ errors in a particular way. Generally speaking, error handling is divided into\n two broad categories: exceptions and return values. Rust opts for return\n values.\n \n-In this chapter, we intend to provide a comprehensive treatment of how to deal\n+In this section, we intend to provide a comprehensive treatment of how to deal\n with errors in Rust. More than that, we will attempt to introduce error handling\n one piece at a time so that you'll come away with a solid working knowledge of\n how everything fits together.\n \n When done na\u00efvely, error handling in Rust can be verbose and annoying. This\n-chapter will explore those stumbling blocks and demonstrate how to use the\n+section will explore those stumbling blocks and demonstrate how to use the\n standard library to make error handling concise and ergonomic.\n \n # Table of Contents\n \n-This chapter is very long, mostly because we start at the very beginning with\n+This section is very long, mostly because we start at the very beginning with\n sum types and combinators, and try to motivate the way Rust does error handling\n incrementally. As such, programmers with experience in other expressive type\n systems may want to jump around.\n@@ -636,7 +636,7 @@ Thus far, we've looked at error handling where everything was either an\n `Option` and a `Result`? Or what if you have a `Result<T, Error1>` and a\n `Result<T, Error2>`? Handling *composition of distinct error types* is the next\n challenge in front of us, and it will be the major theme throughout the rest of\n-this chapter.\n+this section.\n \n ## Composing `Option` and `Result`\n \n@@ -648,7 +648,7 @@ Of course, in real code, things aren't always as clean. Sometimes you have a\n mix of `Option` and `Result` types. Must we resort to explicit case analysis,\n or can we continue using combinators?\n \n-For now, let's revisit one of the first examples in this chapter:\n+For now, let's revisit one of the first examples in this section:\n \n ```rust,should_panic\n use std::env;\n@@ -1319,7 +1319,7 @@ and [`cause`](../std/error/trait.Error.html#method.cause), but the\n limitation remains: `Box<Error>` is opaque. (N.B. This isn't entirely\n true because Rust does have runtime reflection, which is useful in\n some scenarios that are [beyond the scope of this\n-chapter](https://crates.io/crates/error).)\n+section](https://crates.io/crates/error).)\n \n It's time to revisit our custom `CliError` type and tie everything together.\n \n@@ -1486,7 +1486,7 @@ and [`fmt::Result`](../std/fmt/type.Result.html).\n \n # Case study: A program to read population data\n \n-This chapter was long, and depending on your background, it might be\n+This section was long, and depending on your background, it might be\n rather dense. While there is plenty of example code to go along with\n the prose, most of it was specifically designed to be pedagogical. So,\n we're going to do something new: a case study.\n@@ -1512,7 +1512,7 @@ and [`rustc-serialize`](https://crates.io/crates/rustc-serialize) crates.\n \n We're not going to spend a lot of time on setting up a project with\n Cargo because it is already covered well in [the Cargo\n-chapter](../book/hello-cargo.html) and [Cargo's documentation][14].\n+section](../book/hello-cargo.html) and [Cargo's documentation][14].\n \n To get started from scratch, run `cargo new --bin city-pop` and make sure your\n `Cargo.toml` looks something like this:\n@@ -2108,7 +2108,7 @@ handling.\n \n # The Short Story\n \n-Since this chapter is long, it is useful to have a quick summary for error\n+Since this section is long, it is useful to have a quick summary for error\n handling in Rust. These are some good \u201crules of thumb.\" They are emphatically\n *not* commandments. There are probably good reasons to break every one of these\n heuristics!"}, {"sha": "a4c028e85b0d79fd3b6c3b1e3faf6acd0a7a7aaa", "filename": "src/doc/book/getting-started.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a6dbb30a21be8d237055479af613e30415b0c56/src%2Fdoc%2Fbook%2Fgetting-started.md", "raw_url": "https://github.com/rust-lang/rust/raw/3a6dbb30a21be8d237055479af613e30415b0c56/src%2Fdoc%2Fbook%2Fgetting-started.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fgetting-started.md?ref=3a6dbb30a21be8d237055479af613e30415b0c56", "patch": "@@ -1,13 +1,13 @@\n % Getting Started\n \n-This first section of the book will get us going with Rust and its tooling.\n+This first chapter of the book will get us going with Rust and its tooling.\n First, we\u2019ll install Rust. Then, the classic \u2018Hello World\u2019 program. Finally,\n we\u2019ll talk about Cargo, Rust\u2019s build system and package manager.\n \n # Installing Rust\n \n The first step to using Rust is to install it. Generally speaking, you\u2019ll need\n-an Internet connection to run the commands in this chapter, as we\u2019ll be\n+an Internet connection to run the commands in this section, as we\u2019ll be\n downloading Rust from the internet.\n \n We\u2019ll be showing off a number of commands using a terminal, and those lines all"}, {"sha": "6665d1f87d81836868848295bb7804c7da5f428e", "filename": "src/doc/book/guessing-game.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a6dbb30a21be8d237055479af613e30415b0c56/src%2Fdoc%2Fbook%2Fguessing-game.md", "raw_url": "https://github.com/rust-lang/rust/raw/3a6dbb30a21be8d237055479af613e30415b0c56/src%2Fdoc%2Fbook%2Fguessing-game.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fguessing-game.md?ref=3a6dbb30a21be8d237055479af613e30415b0c56", "patch": "@@ -7,7 +7,7 @@ prompt us to enter a guess. Upon entering our guess, it will tell us if we\u2019re\n too low or too high. Once we guess correctly, it will congratulate us. Sounds\n good?\n \n-Along the way, we\u2019ll learn a little bit about Rust. The next section, \u2018Syntax\n+Along the way, we\u2019ll learn a little bit about Rust. The next chapter, \u2018Syntax\n and Semantics\u2019, will dive deeper into each part.\n \n # Set up"}, {"sha": "7be7fa4f039a710dece1e34f1507f17757bbc286", "filename": "src/doc/book/learn-rust.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a6dbb30a21be8d237055479af613e30415b0c56/src%2Fdoc%2Fbook%2Flearn-rust.md", "raw_url": "https://github.com/rust-lang/rust/raw/3a6dbb30a21be8d237055479af613e30415b0c56/src%2Fdoc%2Fbook%2Flearn-rust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Flearn-rust.md?ref=3a6dbb30a21be8d237055479af613e30415b0c56", "patch": "@@ -1,6 +1,6 @@\n % Learn Rust\n \n-Welcome! This section has a few tutorials that teach you Rust through building\n+Welcome! This chapter has a few tutorials that teach you Rust through building\n projects. You\u2019ll get a high-level overview, but we\u2019ll skim over the details.\n \n If you\u2019d prefer a more \u2018from the ground up\u2019-style experience, check"}, {"sha": "e9ec26dccdcdcb4c934bcf112f4ddc73445920ba", "filename": "src/doc/book/syntax-and-semantics.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a6dbb30a21be8d237055479af613e30415b0c56/src%2Fdoc%2Fbook%2Fsyntax-and-semantics.md", "raw_url": "https://github.com/rust-lang/rust/raw/3a6dbb30a21be8d237055479af613e30415b0c56/src%2Fdoc%2Fbook%2Fsyntax-and-semantics.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsyntax-and-semantics.md?ref=3a6dbb30a21be8d237055479af613e30415b0c56", "patch": "@@ -1,6 +1,6 @@\n % Syntax and Semantics\n \n-This section breaks Rust down into small chunks, one for each concept.\n+This chapter breaks Rust down into small chunks, one for each concept.\n \n If you\u2019d like to learn Rust from the bottom up, reading this in order is a\n great way to do that."}]}