{"sha": "afa632124f149b190ff3fb0a625a6a162637d82c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmYTYzMjEyNGYxNDliMTkwZmYzZmIwYTYyNWE2YTE2MjYzN2Q4MmM=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-06-25T15:29:50Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-06-25T19:16:03Z"}, "message": "Use single-bar or to make tstate/states.rs prettier\n\nSorry. This is the kind of thing I do when I'm on a plane and too\ntired to manage anything that requires thinking.", "tree": {"sha": "5a714850c5dcfef14111fd918de478c41dbb6529", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a714850c5dcfef14111fd918de478c41dbb6529"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/afa632124f149b190ff3fb0a625a6a162637d82c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/afa632124f149b190ff3fb0a625a6a162637d82c", "html_url": "https://github.com/rust-lang/rust/commit/afa632124f149b190ff3fb0a625a6a162637d82c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/afa632124f149b190ff3fb0a625a6a162637d82c/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7432017d5ef4c2adc611bfd8efc6055902a25e4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7432017d5ef4c2adc611bfd8efc6055902a25e4c", "html_url": "https://github.com/rust-lang/rust/commit/7432017d5ef4c2adc611bfd8efc6055902a25e4c"}], "stats": {"total": 262, "additions": 89, "deletions": 173}, "files": [{"sha": "034a9bd7f7f2db5a7b37aeefc31404c761655305", "filename": "src/comp/middle/tstate/auxiliary.rs", "status": "modified", "additions": 4, "deletions": 18, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/afa632124f149b190ff3fb0a625a6a162637d82c/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa632124f149b190ff3fb0a625a6a162637d82c/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs?ref=afa632124f149b190ff3fb0a625a6a162637d82c", "patch": "@@ -436,22 +436,8 @@ fn set_postcond_false(&crate_ctxt ccx, node_id id) {\n }\n \n fn pure_exp(&crate_ctxt ccx, node_id id, &prestate p) -> bool {\n-    auto changed = false;\n-    changed = extend_prestate_ann(ccx, id, p) || changed;\n-    changed = extend_poststate_ann(ccx, id, p) || changed;\n-    ret changed;\n-}\n-\n-fn fixed_point_states(&fn_ctxt fcx, fn(&fn_ctxt, &_fn) -> bool  f,\n-                      &_fn start) {\n-    auto changed = f(fcx, start);\n-    if (changed) {\n-        ret fixed_point_states(fcx, f, start);\n-    } else {\n-        // we're done!\n-\n-        ret;\n-    }\n+    ret extend_prestate_ann(ccx, id, p) |\n+        extend_poststate_ann(ccx, id, p);\n }\n \n fn num_constraints(fn_info m) -> uint { ret m.num_constraints; }\n@@ -733,7 +719,7 @@ fn forget_in_poststate(&fn_ctxt fcx, &poststate p, node_id dead_v) -> bool {\n         case (some(?d_id)) {\n             for (norm_constraint c in constraints(fcx)) {\n                 if (constraint_mentions(fcx, c, d_id)) {\n-                    changed = clear_in_poststate_(c.bit_num, p) || changed;\n+                    changed |= clear_in_poststate_(c.bit_num, p);\n                 }\n             }\n         }\n@@ -752,7 +738,7 @@ fn forget_in_poststate_still_init(&fn_ctxt fcx, &poststate p, node_id dead_v)\n         case (some(?d_id)) {\n             for (norm_constraint c in constraints(fcx)) {\n                 if (non_init_constraint_mentions(fcx, c, d_id)) {\n-                    changed = clear_in_poststate_(c.bit_num, p) || changed;\n+                    changed |= clear_in_poststate_(c.bit_num, p);\n                 }\n             }\n         }"}, {"sha": "a65dfbbc8c10c73af6268d439845440ab82ff585", "filename": "src/comp/middle/tstate/ck.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/afa632124f149b190ff3fb0a625a6a162637d82c/src%2Fcomp%2Fmiddle%2Ftstate%2Fck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa632124f149b190ff3fb0a625a6a162637d82c/src%2Fcomp%2Fmiddle%2Ftstate%2Fck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fck.rs?ref=afa632124f149b190ff3fb0a625a6a162637d82c", "patch": "@@ -51,7 +51,6 @@ import aux::expr_poststate;\n import aux::stmt_poststate;\n import aux::stmt_to_ann;\n import aux::num_constraints;\n-import aux::fixed_point_states;\n import aux::tritv_to_str;\n import aux::first_difference_string;\n import pretty::pprust::ty_to_str;\n@@ -176,8 +175,9 @@ fn check_states_against_conditions(&fn_ctxt fcx, &_fn f, node_id id,\n fn check_fn_states(&fn_ctxt fcx, &_fn f, node_id id, &span sp, &fn_ident i) {\n     /* Compute the pre- and post-states for this function */\n \n-    auto g = find_pre_post_state_fn;\n-    fixed_point_states(fcx, g, f);\n+    // Fixpoint iteration\n+    while (find_pre_post_state_fn(fcx, f)) {}\n+\n     /* Now compare each expr's pre-state to its precondition\n        and post-state to its postcondition */\n "}, {"sha": "0de5cf33fd4a7f9dab29100b80a3fe48fed3b25a", "filename": "src/comp/middle/tstate/states.rs", "status": "modified", "additions": 82, "deletions": 152, "changes": 234, "blob_url": "https://github.com/rust-lang/rust/blob/afa632124f149b190ff3fb0a625a6a162637d82c/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa632124f149b190ff3fb0a625a6a162637d82c/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs?ref=afa632124f149b190ff3fb0a625a6a162637d82c", "patch": "@@ -105,7 +105,7 @@ fn seq_states(&fn_ctxt fcx, prestate pres, vec[@expr] exprs) ->\n     auto changed = false;\n     auto post = pres;\n     for (@expr e in exprs) {\n-        changed = find_pre_post_state_expr(fcx, post, e) || changed;\n+        changed |= find_pre_post_state_expr(fcx, post, e) || changed;\n         // log_err(\"Seq_states: changed =\");\n         // log_err changed;\n         post = expr_poststate(fcx.ccx, e);\n@@ -172,48 +172,39 @@ fn find_pre_post_state_call(&fn_ctxt fcx, &prestate pres, &@expr a,\n fn find_pre_post_state_exprs(&fn_ctxt fcx, &prestate pres, ast::node_id id,\n                              &vec[@expr] es, controlflow cf) -> bool {\n     auto rs = seq_states(fcx, pres, es);\n-    auto changed = rs._0;\n-    changed = set_prestate_ann(fcx.ccx, id, pres) || changed;\n+    auto changed = rs._0 | set_prestate_ann(fcx.ccx, id, pres);\n     /* if this is a failing call, it sets everything as initialized */\n     alt (cf) {\n         case (noreturn) {\n-            changed =\n-                set_poststate_ann(fcx.ccx, id,\n-                   false_postcond(num_constraints(fcx.enclosing))) ||\n-                changed;\n+            changed |= set_poststate_ann\n+                (fcx.ccx, id, false_postcond(num_constraints(fcx.enclosing)));\n         }\n         case (_) { \n-            changed = set_poststate_ann(fcx.ccx, id, rs._1) || changed;\n+            changed |= set_poststate_ann(fcx.ccx, id, rs._1);\n         }\n     }\n     ret changed;\n }\n \n fn find_pre_post_state_loop(&fn_ctxt fcx, prestate pres, &@local l,\n                             &@expr index, &block body, node_id id) -> bool {\n-    auto changed = false;\n     /* same issues as while */\n \n     // FIXME: also want to set l as initialized, no?\n-\n-    changed = set_prestate_ann(fcx.ccx, id, pres) || changed;\n-    changed = find_pre_post_state_expr(fcx, pres, index) || changed;\n+    auto changed = set_prestate_ann(fcx.ccx, id, pres) |\n+        find_pre_post_state_expr(fcx, pres, index);\n     /* in general, would need the intersection of\n        (poststate of index, poststate of body) */\n-\n-    changed =\n-        find_pre_post_state_block(fcx, expr_poststate(fcx.ccx, index), body)\n-            || changed;\n+        find_pre_post_state_block(fcx, expr_poststate(fcx.ccx, index), body);\n \n     if (has_nonlocal_exits(body)) { \n-        changed = set_poststate_ann(fcx.ccx, id, pres) || changed;\n+        changed |= set_poststate_ann(fcx.ccx, id, pres);\n     }\n \n     auto res_p =\n         intersect_postconds([expr_poststate(fcx.ccx, index),\n                              block_poststate(fcx.ccx, body)]);\n-    changed = set_poststate_ann(fcx.ccx, id, res_p) || changed;\n-    ret changed;\n+    ret changed | set_poststate_ann(fcx.ccx, id, res_p);\n }\n \n fn gen_if_local(&fn_ctxt fcx, &poststate p, &@expr e) -> bool {\n@@ -234,10 +225,8 @@ fn gen_if_local(&fn_ctxt fcx, &poststate p, &@expr e) -> bool {\n fn join_then_else(&fn_ctxt fcx, &@expr antec, &block conseq,\n                   &option::t[@expr] maybe_alt, ast::node_id id, &if_ty chk,\n                   &prestate pres) -> bool {\n-    auto changed = false;\n-\n-    changed = set_prestate_ann(fcx.ccx, id, pres) || changed;\n-    changed = find_pre_post_state_expr(fcx, pres, antec) || changed;\n+    auto changed = set_prestate_ann(fcx.ccx, id, pres) |\n+        find_pre_post_state_expr(fcx, pres, antec);\n     \n     /*\n     log_err(\"join_then_else:\");\n@@ -256,22 +245,14 @@ fn join_then_else(&fn_ctxt fcx, &@expr antec, &block conseq,\n \n     alt (maybe_alt) {\n         case (none) {\n-\n-            changed =\n-                find_pre_post_state_block(fcx, expr_poststate(fcx.ccx, antec),\n-                                  conseq) || changed;\n-   \n-            changed =\n+            changed |= find_pre_post_state_block\n+                (fcx, expr_poststate(fcx.ccx, antec), conseq) |\n                 set_poststate_ann(fcx.ccx, id,\n-                                     expr_poststate(fcx.ccx, antec))\n-                || changed;\n+                                  expr_poststate(fcx.ccx, antec));\n         }\n         case (some(?altern)) {\n-            changed =\n-                find_pre_post_state_expr(fcx,\n-                                         expr_poststate(fcx.ccx,\n-                                                        antec),\n-                                         altern) || changed;\n+            changed |= find_pre_post_state_expr\n+                (fcx, expr_poststate(fcx.ccx, antec), altern);\n \n             auto conseq_prestate = expr_poststate(fcx.ccx, antec);\n             alt (chk) {\n@@ -284,14 +265,12 @@ fn join_then_else(&fn_ctxt fcx, &@expr antec, &block conseq,\n             }\n \n \n-            changed =\n-                find_pre_post_state_block(fcx, conseq_prestate, conseq)\n-                || changed;\n+            changed |=\n+                find_pre_post_state_block(fcx, conseq_prestate, conseq);\n    \n             auto poststate_res =\n                 intersect_postconds([block_poststate(fcx.ccx, conseq),\n-                                     expr_poststate(fcx.ccx,\n-                                                    altern)]);\n+                                     expr_poststate(fcx.ccx, altern)]);\n             /*   fcx.ccx.tcx.sess.span_note(antec.span,\n                \"poststate_res = \" + aux::bitv_to_str(fcx, poststate_res));\n             fcx.ccx.tcx.sess.span_note(antec.span,\n@@ -301,16 +280,13 @@ fn join_then_else(&fn_ctxt fcx, &@expr antec, &block conseq,\n             \"conseq poststate = \" + aux::bitv_to_str(fcx,\n                block_poststate(fcx.ccx, conseq))); */\n \n-            changed =\n-                set_poststate_ann(fcx.ccx, id, poststate_res) ||\n-                changed;\n+            changed |= set_poststate_ann(fcx.ccx, id, poststate_res);\n         }\n     }\n     ret changed;\n }\n \n fn find_pre_post_state_expr(&fn_ctxt fcx, &prestate pres, @expr e) -> bool {\n-    auto changed = false;\n     auto num_local_vars = num_constraints(fcx.enclosing);\n \n     alt (e.node) {\n@@ -322,16 +298,14 @@ fn find_pre_post_state_expr(&fn_ctxt fcx, &prestate pres, @expr e) -> bool {\n                                           elt_exprs(elts), return);\n         }\n         case (expr_call(?operator, ?operands)) {\n-            changed = find_pre_post_state_call(fcx, pres, operator,\n-                               e.id, operands,\n-                               controlflow_expr(fcx.ccx, operator))\n-                || changed;\n-            ret changed;\n+            ret find_pre_post_state_call\n+                (fcx, pres, operator, e.id, operands,\n+                 controlflow_expr(fcx.ccx, operator));\n         }\n         case (expr_spawn(_, _, ?operator, ?operands)) {\n             ret find_pre_post_state_call(fcx, pres, operator, e.id, operands,\n                                          return);\n-         }\n+        }\n         case (expr_bind(?operator, ?maybe_args)) {\n             ret find_pre_post_state_call(fcx, pres, operator, e.id,\n                                          cat_options(maybe_args), return);\n@@ -358,23 +332,19 @@ fn find_pre_post_state_expr(&fn_ctxt fcx, &prestate pres, @expr e) -> bool {\n         // FIXME This was just put in here as a placeholder\n         case (expr_fn(?f)) { ret pure_exp(fcx.ccx, e.id, pres); }\n         case (expr_block(?b)) {\n-            changed = find_pre_post_state_block(fcx, pres, b) || changed;\n-            changed = set_prestate_ann(fcx.ccx, e.id, pres) || changed;\n-            changed = set_poststate_ann\n-                (fcx.ccx, e.id, block_poststate(fcx.ccx, b)) || changed;\n-            ret changed;\n+            ret find_pre_post_state_block(fcx, pres, b) |\n+                set_prestate_ann(fcx.ccx, e.id, pres) |\n+                set_poststate_ann(fcx.ccx, e.id, block_poststate(fcx.ccx, b));\n         }\n         case (expr_rec(?fields, ?maybe_base)) {\n-            changed = find_pre_post_state_exprs\n-                (fcx, pres, e.id, field_exprs(fields), return) || changed;\n+            auto changed = find_pre_post_state_exprs\n+                (fcx, pres, e.id, field_exprs(fields), return);\n             alt (maybe_base) {\n                 case (none) {/* do nothing */ }\n                 case (some(?base)) {\n-                    changed =\n-                        find_pre_post_state_expr(fcx, pres, base) || changed;\n-                    changed = set_poststate_ann\n-                        (fcx.ccx, e.id, expr_poststate(fcx.ccx, base))\n-                        || changed;\n+                    changed |= find_pre_post_state_expr(fcx, pres, base) |\n+                        set_poststate_ann(fcx.ccx, e.id,\n+                                          expr_poststate(fcx.ccx, base));\n                 }\n             }\n             ret changed;\n@@ -396,18 +366,17 @@ fn find_pre_post_state_expr(&fn_ctxt fcx, &prestate pres, @expr e) -> bool {\n         case (expr_recv(?lhs, ?rhs)) {\n             // Opposite order as most other binary operations,\n             // so not using find_pre_post_state_two\n-            auto changed = set_prestate_ann(fcx.ccx, e.id, pres);\n-            changed = find_pre_post_state_expr(fcx, pres, lhs) || changed;\n-            changed = find_pre_post_state_expr(fcx,\n-                expr_poststate(fcx.ccx, lhs), rhs)  || changed;\n+            auto changed = set_prestate_ann(fcx.ccx, e.id, pres) |\n+                find_pre_post_state_expr(fcx, pres, lhs) |\n+                find_pre_post_state_expr\n+                (fcx, expr_poststate(fcx.ccx, lhs), rhs);\n             auto post = tritv_clone(expr_poststate(fcx.ccx, rhs));\n             forget_in_poststate_still_init(fcx, post, rhs.id);\n             gen_if_local(fcx, post, rhs); \n-            changed = set_poststate_ann(fcx.ccx, e.id, post) || changed;\n-            ret changed;\n+            ret changed | set_poststate_ann(fcx.ccx, e.id, post);\n         }\n         case (expr_ret(?maybe_ret_val)) {\n-            changed = set_prestate_ann(fcx.ccx, e.id, pres) || changed;\n+            auto changed = set_prestate_ann(fcx.ccx, e.id, pres);\n             /* normally, everything is true if execution continues after\n                a ret expression (since execution never continues locally\n                after a ret expression */\n@@ -425,23 +394,19 @@ fn find_pre_post_state_expr(&fn_ctxt fcx, &prestate pres, @expr e) -> bool {\n             alt (maybe_ret_val) {\n                 case (none) {/* do nothing */ }\n                 case (some(?ret_val)) {\n-                    changed = find_pre_post_state_expr(fcx, pres, ret_val)\n-                        || changed;\n+                    changed |= find_pre_post_state_expr(fcx, pres, ret_val);\n                 }\n             }\n             ret changed;\n         }\n         case (expr_be(?val)) {\n-            changed = set_prestate_ann(fcx.ccx, e.id, pres) || changed;\n+            auto changed = set_prestate_ann(fcx.ccx, e.id, pres);\n             set_poststate_ann(fcx.ccx, e.id, false_postcond(num_local_vars));\n-            changed = find_pre_post_state_expr(fcx, pres, val) || changed;\n-            ret changed;\n+            ret changed | find_pre_post_state_expr(fcx, pres, val);\n         }\n         case (expr_if(?antec, ?conseq, ?maybe_alt)) {\n-            changed = join_then_else\n-                (fcx, antec, conseq, maybe_alt, e.id, plain_if, pres)\n-                || changed;\n-            ret changed;\n+            ret join_then_else\n+                (fcx, antec, conseq, maybe_alt, e.id, plain_if, pres);\n         }\n         case (expr_ternary(_, _, _)) {\n             ret find_pre_post_state_expr(fcx, pres, ternary_to_if(e));\n@@ -458,7 +423,7 @@ fn find_pre_post_state_expr(&fn_ctxt fcx, &prestate pres, @expr e) -> bool {\n                                         oper_assign);\n         }\n         case (expr_while(?test, ?body)) {\n-            changed = set_prestate_ann(fcx.ccx, e.id, pres) || changed;\n+            auto changed = set_prestate_ann(fcx.ccx, e.id, pres) |\n             /* to handle general predicates, we need to pass in\n                 pres `intersect` (poststate(a)) \n              like: auto test_pres = intersect_postconds(pres,\n@@ -467,27 +432,24 @@ fn find_pre_post_state_expr(&fn_ctxt fcx, &prestate pres, @expr e) -> bool {\n                FIXME\n                maybe need a \"don't know\" state in addition to 0 or 1?\n             */\n-\n-            changed = find_pre_post_state_expr(fcx, pres, test) || changed;\n-            changed =\n+                find_pre_post_state_expr(fcx, pres, test) |\n                 find_pre_post_state_block(fcx, expr_poststate(fcx.ccx, test),\n-                                          body) || changed;\n+                                          body);\n             /* conservative approximation: if a loop contains a break\n                or cont, we assume nothing about the poststate */\n             if (has_nonlocal_exits(body)) { \n-                changed = set_poststate_ann(fcx.ccx, e.id, pres) || changed;\n+                changed |= set_poststate_ann(fcx.ccx, e.id, pres);\n             }\n \n             auto e_post = expr_poststate(fcx.ccx, test);\n             auto b_post = block_poststate(fcx.ccx, body);\n-            ret set_poststate_ann\n-                (fcx.ccx, e.id, intersect_postconds([e_post, b_post])) ||\n-                changed;\n+            ret changed | set_poststate_ann\n+                (fcx.ccx, e.id, intersect_postconds([e_post, b_post]));\n         }\n         case (expr_do_while(?body, ?test)) {\n-            changed = set_prestate_ann(fcx.ccx, e.id, pres) || changed;\n+            auto changed = set_prestate_ann(fcx.ccx, e.id, pres);\n             auto changed0 = changed;\n-            changed = find_pre_post_state_block(fcx, pres, body) || changed;\n+            changed |= find_pre_post_state_block(fcx, pres, body);\n             /* conservative approximination: if the body of the loop\n                could break or cont, we revert to the prestate\n                (TODO: could treat cont differently from break, since\n@@ -504,17 +466,15 @@ fn find_pre_post_state_expr(&fn_ctxt fcx, &prestate pres, @expr e) -> bool {\n                 changed = changed0;\n             }\n \n-            changed =\n-                find_pre_post_state_expr(fcx, block_poststate(fcx.ccx, body),\n-                                         test) || changed;\n+            changed |= find_pre_post_state_expr\n+                (fcx, block_poststate(fcx.ccx, body), test);\n \n             if (breaks) {\n                 set_poststate_ann(fcx.ccx, e.id, pres);\n             }\n             else {\n-                changed =  set_poststate_ann(fcx.ccx, e.id,\n-                                            expr_poststate(fcx.ccx, test)) ||\n-                    changed;\n+                changed |= set_poststate_ann\n+                    (fcx.ccx, e.id, expr_poststate(fcx.ccx, test));\n             }\n             ret changed;\n         }\n@@ -528,16 +488,15 @@ fn find_pre_post_state_expr(&fn_ctxt fcx, &prestate pres, @expr e) -> bool {\n             ret find_pre_post_state_two(fcx, pres, val, sub, e.id, oper_pure);\n         }\n         case (expr_alt(?val, ?alts)) {\n-            changed = set_prestate_ann(fcx.ccx, e.id, pres) || changed;\n-            changed = find_pre_post_state_expr(fcx, pres, val) || changed;\n+            auto changed = set_prestate_ann(fcx.ccx, e.id, pres) |\n+                find_pre_post_state_expr(fcx, pres, val);\n             auto e_post = expr_poststate(fcx.ccx, val);\n             auto a_post;\n             if (vec::len[arm](alts) > 0u) {\n                 a_post = false_postcond(num_local_vars);\n                 for (arm an_alt in alts) {\n-                    changed =\n-                        find_pre_post_state_block(fcx, e_post, an_alt.block)\n-                            || changed;\n+                    changed |= find_pre_post_state_block\n+                        (fcx, e_post, an_alt.block);\n                     intersect(a_post, block_poststate(fcx.ccx, an_alt.block));\n                     // We deliberately do *not* update changed here, because\n                     // we'd go into an infinite loop that way, and the change\n@@ -549,8 +508,7 @@ fn find_pre_post_state_expr(&fn_ctxt fcx, &prestate pres, @expr e) -> bool {\n \n                 a_post = e_post;\n             }\n-            changed = set_poststate_ann(fcx.ccx, e.id, a_post) || changed;\n-            ret changed;\n+            ret changed | set_poststate_ann(fcx.ccx, e.id, a_post);\n         }\n         case (expr_field(?val, _)) {\n             ret find_pre_post_state_sub(fcx, pres, val, e.id, none);\n@@ -562,30 +520,23 @@ fn find_pre_post_state_expr(&fn_ctxt fcx, &prestate pres, @expr e) -> bool {\n             ret find_pre_post_state_sub(fcx, pres, operand, e.id, none);\n         }\n         case (expr_fail(_)) {\n-            changed = set_prestate_ann(fcx.ccx, e.id, pres) || changed;\n+            ret set_prestate_ann(fcx.ccx, e.id, pres) |\n             /* if execution continues after fail, then everything is true!\n                woo! */\n-\n-            changed = set_poststate_ann\n-                (fcx.ccx, e.id, false_postcond(num_local_vars)) || changed;\n-            ret changed;\n+                set_poststate_ann(fcx.ccx, e.id,\n+                                  false_postcond(num_local_vars));\n         }\n         case (expr_assert(?p)) {\n             ret find_pre_post_state_sub(fcx, pres, p, e.id, none);\n         }\n         case (expr_check(?p)) {\n             /* predicate p holds after this expression executes */\n-\n             let aux::constr c = expr_to_constr(fcx.ccx.tcx, p);\n-            changed = find_pre_post_state_sub(fcx, pres, p, e.id,\n-                          some(c.node)) || changed;\n-            ret changed;\n+            ret find_pre_post_state_sub(fcx, pres, p, e.id, some(c.node));\n         }\n         case (expr_if_check(?p, ?conseq, ?maybe_alt)) {\n-            changed = join_then_else\n-                (fcx, p, conseq, maybe_alt, e.id, if_check, pres) || changed;\n-\n-            ret changed;\n+            ret join_then_else\n+                (fcx, p, conseq, maybe_alt, e.id, if_check, pres);\n         }\n         case (expr_break) { ret pure_exp(fcx.ccx, e.id, pres); }\n         case (expr_cont) { ret pure_exp(fcx.ccx, e.id, pres); }\n@@ -603,7 +554,6 @@ fn find_pre_post_state_expr(&fn_ctxt fcx, &prestate pres, @expr e) -> bool {\n }\n \n fn find_pre_post_state_stmt(&fn_ctxt fcx, &prestate pres, @stmt s) -> bool {\n-    auto changed = false;\n     auto stmt_ann = stmt_to_ann(fcx.ccx, *s);\n \n     /*    \n@@ -623,13 +573,9 @@ fn find_pre_post_state_stmt(&fn_ctxt fcx, &prestate pres, @stmt s) -> bool {\n                 case (decl_local(?alocal)) {\n                     alt (alocal.node.init) {\n                         case (some(?an_init)) {\n-                            changed =\n-                                set_prestate(stmt_ann, pres) || changed;\n-                            \n-                            changed =\n+                            auto changed = set_prestate(stmt_ann, pres) |\n                                 find_pre_post_state_expr(fcx, pres,\n-                                                         an_init.expr)\n-                                || changed;\n+                                                         an_init.expr);\n \n                             auto post = tritv_clone(expr_poststate(fcx.ccx,\n                                                       an_init.expr));\n@@ -644,8 +590,7 @@ fn find_pre_post_state_stmt(&fn_ctxt fcx, &prestate pres, @stmt s) -> bool {\n                             /* important to do this in one step to ensure\n                                termination (don't want to set changed to true\n                                for intermediate changes) */\n-                            changed = set_poststate(stmt_ann, post)\n-                                || changed;\n+                            ret changed | set_poststate(stmt_ann, post);\n \n                             /*\n                             log_err \"Summary: stmt = \";\n@@ -657,37 +602,24 @@ fn find_pre_post_state_stmt(&fn_ctxt fcx, &prestate pres, @stmt s) -> bool {\n                             log_err \"changed =\";\n                             log_err changed;\n                             */\n-\n-                            ret changed;\n                         }\n                         case (none) {\n-                            changed =\n-                                set_prestate(stmt_ann, pres) || changed;\n-                            changed =\n-                                set_poststate(stmt_ann, pres) || changed;\n-                            ret changed;\n+                            ret set_prestate(stmt_ann, pres) |\n+                                set_poststate(stmt_ann, pres);\n                         }\n                     }\n                 }\n                 case (decl_item(?an_item)) {\n-                    changed =\n-                        set_prestate(stmt_ann, pres) || changed;\n-                    changed =\n-                        set_poststate(stmt_ann, pres) || changed;\n+                    ret set_prestate(stmt_ann, pres) |\n+                        set_poststate(stmt_ann, pres);\n                     /* the outer \"walk\" will recurse into the item */\n-\n-                    ret changed;\n                 }\n             }\n         }\n         case (stmt_expr(?ex, _)) {\n-            changed = find_pre_post_state_expr(fcx, pres, ex) || changed;\n-            changed =\n-                set_prestate(stmt_ann, expr_prestate(fcx.ccx, ex)) || changed;\n-            changed =\n-                set_poststate(stmt_ann, expr_poststate(fcx.ccx, ex))\n-                || changed;\n-          \n+            ret find_pre_post_state_expr(fcx, pres, ex) |\n+                set_prestate(stmt_ann, expr_prestate(fcx.ccx, ex)) |\n+                set_poststate(stmt_ann, expr_poststate(fcx.ccx, ex));\n             /*\n             log_err \"Finally:\";\n               log_stmt_err(*s);\n@@ -700,8 +632,6 @@ fn find_pre_post_state_stmt(&fn_ctxt fcx, &prestate pres, @stmt s) -> bool {\n               log_err(\"changed =\");\n               log_err(changed);\n             */\n-\n-            ret changed;\n         }\n         case (_) { ret false; }\n     }\n@@ -710,9 +640,8 @@ fn find_pre_post_state_stmt(&fn_ctxt fcx, &prestate pres, @stmt s) -> bool {\n \n /* Updates the pre- and post-states of statements in the block,\n    returns a boolean flag saying whether any pre- or poststates changed */\n-fn find_pre_post_state_block(&fn_ctxt fcx, &prestate pres0, &block b) ->\n-   bool {\n-    auto changed = false;\n+fn find_pre_post_state_block(&fn_ctxt fcx, &prestate pres0, &block b)\n+    -> bool {\n     auto num_local_vars = num_constraints(fcx.enclosing);\n     /* First, set the pre-states and post-states for every expression */\n \n@@ -721,15 +650,16 @@ fn find_pre_post_state_block(&fn_ctxt fcx, &prestate pres0, &block b) ->\n      consist of improving <pres> with whatever variables this stmt\n      initializes.  Then <pres> becomes the new poststate. */\n \n+    auto changed = false;\n     for (@stmt s in b.node.stmts) {\n-        changed = find_pre_post_state_stmt(fcx, pres, s) || changed;\n+        changed |= find_pre_post_state_stmt(fcx, pres, s);\n         pres = stmt_poststate(fcx.ccx, *s);\n     }\n     auto post = pres;\n     alt (b.node.expr) {\n         case (none) { }\n         case (some(?e)) {\n-            changed = find_pre_post_state_expr(fcx, pres, e) || changed;\n+            changed |= find_pre_post_state_expr(fcx, pres, e);\n             post = expr_poststate(fcx.ccx, e);\n         }\n     }"}]}