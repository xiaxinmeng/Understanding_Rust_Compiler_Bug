{"sha": "8b76cad0a7e4a7743d4dd44dd53f077f3d0b8924", "node_id": "C_kwDOAAsO6NoAKDhiNzZjYWQwYTdlNGE3NzQzZDRkZDQ0ZGQ1M2YwNzdmM2QwYjg5MjQ", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-01-15T18:44:57Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-01-25T13:48:08Z"}, "message": "Add a minimal working `append_const_msg` argument", "tree": {"sha": "b9b6bec08d4c71c406b822d3a1ff30dd99790129", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9b6bec08d4c71c406b822d3a1ff30dd99790129"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b76cad0a7e4a7743d4dd44dd53f077f3d0b8924", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE3RQPHNISvvEnSKtjbQF6ltjmwvkFAmHv/5gACgkQbQF6ltjm\nwvl/zg/9H6Gr6tJeKhVyiIcwSV7y9hb4XXhmsVbDwoVPExdp0leAPZR6scnWYe2p\neaQp9HY43bRr3TyvCXpzjt2gFoNj1tmVlrH4/I4SE9CmOYWjzLOW0GCNnAjaX9di\nAgimZs678H8AsiOLqm0BpeX8eGq1QqWAOCDl2rPtAEznIdQUggmMDkHj4SNB8ZGT\n4bBoejMUI9BnV0GNw/YuEZc3xdvW4s+xSA2rIDZ0PGuDmhuBEsQlJs8beIxzV0DP\nHhQrX8Nt1x8qHaOMW9Sb830XlmiWN4s3WUEqt3mwwMcckhiLcT1akp8d5uKPsT7+\nMu44UZb8ijGx75nbsKvmPEx8Par3IaIYCM2UcfJmEcJXa5RN+cIo/GcLIT6KnP4G\nY7TGzkPHjeqBseIQmoU+GLDYlumPBPtEwW6psewfeYI4Qp3nvtVfCQjGiOdPyuBq\nRY7jp7Ca8XM12xo0n9mz63P7F4+tRbgsxPxom/UeyzwvrlMAIWlPGRHGt4N7L7ws\nucaQBH3ECBawnL706RbJoUdc8Iycd0Se9BZcgXWMsSqosaEaldPrWPc1i/+rQKEX\nNe1h+/PoWxwORJgo8OlsHutPqnLPiDy7Wi7ISwJaaqAeYhLs0ZexsW8nrERk3RPB\n5IQ/hhprz34SCH1Gre0OB44ATtg2PweTft5DgQb+bxQX0tuX4rI=\n=uum4\n-----END PGP SIGNATURE-----", "payload": "tree b9b6bec08d4c71c406b822d3a1ff30dd99790129\nparent fdf7d01088d9a2b8f6354e22e4b0fa8223b8db8e\nauthor Deadbeef <ent3rm4n@gmail.com> 1642272297 +0800\ncommitter Deadbeef <ent3rm4n@gmail.com> 1643118488 +1100\n\nAdd a minimal working `append_const_msg` argument\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b76cad0a7e4a7743d4dd44dd53f077f3d0b8924", "html_url": "https://github.com/rust-lang/rust/commit/8b76cad0a7e4a7743d4dd44dd53f077f3d0b8924", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b76cad0a7e4a7743d4dd44dd53f077f3d0b8924/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fdf7d01088d9a2b8f6354e22e4b0fa8223b8db8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/fdf7d01088d9a2b8f6354e22e4b0fa8223b8db8e", "html_url": "https://github.com/rust-lang/rust/commit/fdf7d01088d9a2b8f6354e22e4b0fa8223b8db8e"}], "stats": {"total": 134, "additions": 112, "deletions": 22}, "files": [{"sha": "d99bdd3bdd5be8242b70211d2242edbe49347ca3", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8b76cad0a7e4a7743d4dd44dd53f077f3d0b8924/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b76cad0a7e4a7743d4dd44dd53f077f3d0b8924/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=8b76cad0a7e4a7743d4dd44dd53f077f3d0b8924", "patch": "@@ -321,6 +321,7 @@ symbols! {\n         and,\n         and_then,\n         any,\n+        append_const_msg,\n         arbitrary_enum_discriminant,\n         arbitrary_self_types,\n         arith_offset,"}, {"sha": "213084cdcd659a9c08abc2c28f64de3eda383778", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 29, "deletions": 8, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/8b76cad0a7e4a7743d4dd44dd53f077f3d0b8924/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b76cad0a7e4a7743d4dd44dd53f077f3d0b8924/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=8b76cad0a7e4a7743d4dd44dd53f077f3d0b8924", "patch": "@@ -310,13 +310,18 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                             })\n                             .unwrap_or_default();\n \n-                        let OnUnimplementedNote { message, label, note, enclosing_scope } =\n-                            self.on_unimplemented_note(trait_ref, &obligation);\n+                        let OnUnimplementedNote {\n+                            message,\n+                            label,\n+                            note,\n+                            enclosing_scope,\n+                            append_const_msg,\n+                        } = self.on_unimplemented_note(trait_ref, &obligation);\n                         let have_alt_message = message.is_some() || label.is_some();\n                         let is_try_conversion = self.is_try_conversion(span, trait_ref.def_id());\n                         let is_unsize =\n                             { Some(trait_ref.def_id()) == self.tcx.lang_items().unsize_trait() };\n-                        let (message, note) = if is_try_conversion {\n+                        let (message, note, append_const_msg) = if is_try_conversion {\n                             (\n                                 Some(format!(\n                                     \"`?` couldn't convert the error to `{}`\",\n@@ -327,22 +332,38 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                                         conversion on the error value using the `From` trait\"\n                                         .to_owned(),\n                                 ),\n+                                Some(None),\n                             )\n                         } else {\n-                            (message, note)\n+                            (message, note, append_const_msg)\n                         };\n \n                         let mut err = struct_span_err!(\n                             self.tcx.sess,\n                             span,\n                             E0277,\n                             \"{}\",\n-                            (!predicate_is_const).then(|| message).flatten().unwrap_or_else(\n-                                || format!(\n+                            message\n+                                .and_then(|cannot_do_this| {\n+                                    match (predicate_is_const, append_const_msg) {\n+                                        // do nothing if predicate is not const\n+                                        (false, _) => Some(cannot_do_this),\n+                                        // suggested using default post message\n+                                        (true, Some(None)) => {\n+                                            Some(format!(\"{cannot_do_this} in const contexts\"))\n+                                        }\n+                                        // overriden post message\n+                                        (true, Some(Some(post_message))) => {\n+                                            Some(format!(\"{cannot_do_this}{post_message}\"))\n+                                        }\n+                                        // fallback to generic message\n+                                        (true, None) => None,\n+                                    }\n+                                })\n+                                .unwrap_or_else(|| format!(\n                                     \"the trait bound `{}` is not satisfied{}\",\n                                     trait_predicate, post_message,\n-                                )\n-                            )\n+                                ))\n                         );\n \n                         if is_try_conversion {"}, {"sha": "6b20476b95594de9862dc530417b850ea9a0728b", "filename": "compiler/rustc_trait_selection/src/traits/on_unimplemented.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8b76cad0a7e4a7743d4dd44dd53f077f3d0b8924/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b76cad0a7e4a7743d4dd44dd53f077f3d0b8924/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fon_unimplemented.rs?ref=8b76cad0a7e4a7743d4dd44dd53f077f3d0b8924", "patch": "@@ -19,6 +19,7 @@ pub struct OnUnimplementedDirective {\n     pub label: Option<OnUnimplementedFormatString>,\n     pub note: Option<OnUnimplementedFormatString>,\n     pub enclosing_scope: Option<OnUnimplementedFormatString>,\n+    pub append_const_msg: Option<Option<Symbol>>,\n }\n \n #[derive(Default)]\n@@ -27,6 +28,11 @@ pub struct OnUnimplementedNote {\n     pub label: Option<String>,\n     pub note: Option<String>,\n     pub enclosing_scope: Option<String>,\n+    /// Append a message for `~const Trait` errors. `None` means not requested and\n+    /// should fallback to a generic message, `Some(None)` suggests using the default\n+    /// appended message, `Some(Some(s))` suggests use the `s` message instead of the\n+    /// default one..\n+    pub append_const_msg: Option<Option<Symbol>>,\n }\n \n fn parse_error(\n@@ -89,6 +95,7 @@ impl<'tcx> OnUnimplementedDirective {\n         let mut note = None;\n         let mut enclosing_scope = None;\n         let mut subcommands = vec![];\n+        let mut append_const_msg = None;\n \n         let parse_value = |value_str| {\n             OnUnimplementedFormatString::try_parse(tcx, trait_def_id, value_str, span).map(Some)\n@@ -131,6 +138,14 @@ impl<'tcx> OnUnimplementedDirective {\n                     }\n                     continue;\n                 }\n+            } else if item.has_name(sym::append_const_msg) && append_const_msg.is_none() {\n+                if let Some(msg) = item.value_str() {\n+                    append_const_msg = Some(Some(msg));\n+                    continue;\n+                } else if item.is_word() {\n+                    append_const_msg = Some(None);\n+                    continue;\n+                }\n             }\n \n             // nothing found\n@@ -153,6 +168,7 @@ impl<'tcx> OnUnimplementedDirective {\n                 label,\n                 note,\n                 enclosing_scope,\n+                append_const_msg,\n             })\n         }\n     }\n@@ -183,6 +199,7 @@ impl<'tcx> OnUnimplementedDirective {\n                 )?),\n                 note: None,\n                 enclosing_scope: None,\n+                append_const_msg: None,\n             }))\n         } else {\n             return Err(ErrorReported);\n@@ -201,6 +218,7 @@ impl<'tcx> OnUnimplementedDirective {\n         let mut label = None;\n         let mut note = None;\n         let mut enclosing_scope = None;\n+        let mut append_const_msg = None;\n         info!(\"evaluate({:?}, trait_ref={:?}, options={:?})\", self, trait_ref, options);\n \n         for command in self.subcommands.iter().chain(Some(self)).rev() {\n@@ -235,6 +253,8 @@ impl<'tcx> OnUnimplementedDirective {\n             if let Some(ref enclosing_scope_) = command.enclosing_scope {\n                 enclosing_scope = Some(enclosing_scope_.clone());\n             }\n+\n+            append_const_msg = command.append_const_msg.clone();\n         }\n \n         let options: FxHashMap<Symbol, String> =\n@@ -244,6 +264,7 @@ impl<'tcx> OnUnimplementedDirective {\n             message: message.map(|m| m.format(tcx, trait_ref, &options)),\n             note: note.map(|n| n.format(tcx, trait_ref, &options)),\n             enclosing_scope: enclosing_scope.map(|e_s| e_s.format(tcx, trait_ref, &options)),\n+            append_const_msg,\n         }\n     }\n }"}, {"sha": "1af352d542ac65fcf8dd99780cd9badf773bb217", "filename": "library/core/src/cmp.rs", "status": "modified", "additions": 28, "deletions": 6, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/8b76cad0a7e4a7743d4dd44dd53f077f3d0b8924/library%2Fcore%2Fsrc%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b76cad0a7e4a7743d4dd44dd53f077f3d0b8924/library%2Fcore%2Fsrc%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcmp.rs?ref=8b76cad0a7e4a7743d4dd44dd53f077f3d0b8924", "patch": "@@ -199,9 +199,20 @@ use self::Ordering::*;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[doc(alias = \"==\")]\n #[doc(alias = \"!=\")]\n-#[rustc_on_unimplemented(\n-    message = \"can't compare `{Self}` with `{Rhs}`\",\n-    label = \"no implementation for `{Self} == {Rhs}`\"\n+#[cfg_attr(\n+    bootstrap,\n+    rustc_on_unimplemented(\n+        message = \"can't compare `{Self}` with `{Rhs}`\",\n+        label = \"no implementation for `{Self} == {Rhs}`\"\n+    )\n+)]\n+#[cfg_attr(\n+    not(bootstrap),\n+    rustc_on_unimplemented(\n+        message = \"can't compare `{Self}` with `{Rhs}`\",\n+        label = \"no implementation for `{Self} == {Rhs}`\",\n+        append_const_msg,\n+    )\n )]\n #[rustc_diagnostic_item = \"PartialEq\"]\n pub trait PartialEq<Rhs: ?Sized = Self> {\n@@ -1031,9 +1042,20 @@ impl PartialOrd for Ordering {\n #[doc(alias = \"<\")]\n #[doc(alias = \"<=\")]\n #[doc(alias = \">=\")]\n-#[rustc_on_unimplemented(\n-    message = \"can't compare `{Self}` with `{Rhs}`\",\n-    label = \"no implementation for `{Self} < {Rhs}` and `{Self} > {Rhs}`\"\n+#[cfg_attr(\n+    bootstrap,\n+    rustc_on_unimplemented(\n+        message = \"can't compare `{Self}` with `{Rhs}`\",\n+        label = \"no implementation for `{Self} < {Rhs}` and `{Self} > {Rhs}`\",\n+    )\n+)]\n+#[cfg_attr(\n+    not(bootstrap),\n+    rustc_on_unimplemented(\n+        message = \"can't compare `{Self}` with `{Rhs}`\",\n+        label = \"no implementation for `{Self} < {Rhs}` and `{Self} > {Rhs}`\",\n+        append_const_msg,\n+    )\n )]\n #[rustc_diagnostic_item = \"PartialOrd\"]\n pub trait PartialOrd<Rhs: ?Sized = Self>: PartialEq<Rhs> {"}, {"sha": "e367be8c167c720d64ecb26125d4d25c963e7980", "filename": "library/core/src/ops/arith.rs", "status": "modified", "additions": 30, "deletions": 5, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/8b76cad0a7e4a7743d4dd44dd53f077f3d0b8924/library%2Fcore%2Fsrc%2Fops%2Farith.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b76cad0a7e4a7743d4dd44dd53f077f3d0b8924/library%2Fcore%2Fsrc%2Fops%2Farith.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Farith.rs?ref=8b76cad0a7e4a7743d4dd44dd53f077f3d0b8924", "patch": "@@ -65,11 +65,36 @@\n /// ```\n #[lang = \"add\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented(\n-    on(all(_Self = \"{integer}\", Rhs = \"{float}\"), message = \"cannot add a float to an integer\",),\n-    on(all(_Self = \"{float}\", Rhs = \"{integer}\"), message = \"cannot add an integer to a float\",),\n-    message = \"cannot add `{Rhs}` to `{Self}`\",\n-    label = \"no implementation for `{Self} + {Rhs}`\"\n+#[cfg_attr(\n+    bootstrap,\n+    rustc_on_unimplemented(\n+        on(\n+            all(_Self = \"{integer}\", Rhs = \"{float}\"),\n+            message = \"cannot add a float to an integer\",\n+        ),\n+        on(\n+            all(_Self = \"{float}\", Rhs = \"{integer}\"),\n+            message = \"cannot add an integer to a float\",\n+        ),\n+        message = \"cannot add `{Rhs}` to `{Self}`\",\n+        label = \"no implementation for `{Self} + {Rhs}`\"\n+    )\n+)]\n+#[cfg_attr(\n+    not(bootstrap),\n+    rustc_on_unimplemented(\n+        on(\n+            all(_Self = \"{integer}\", Rhs = \"{float}\"),\n+            message = \"cannot add a float to an integer\",\n+        ),\n+        on(\n+            all(_Self = \"{float}\", Rhs = \"{integer}\"),\n+            message = \"cannot add an integer to a float\",\n+        ),\n+        message = \"cannot add `{Rhs}` to `{Self}`\",\n+        label = \"no implementation for `{Self} + {Rhs}`\",\n+        append_const_msg,\n+    )\n )]\n #[doc(alias = \"+\")]\n pub trait Add<Rhs = Self> {"}, {"sha": "99eacaa837f91a5bff0ef288af7b8081c0b71143", "filename": "src/test/ui/rfc-2632-const-trait-impl/assoc-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b76cad0a7e4a7743d4dd44dd53f077f3d0b8924/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b76cad0a7e4a7743d4dd44dd53f077f3d0b8924/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.rs?ref=8b76cad0a7e4a7743d4dd44dd53f077f3d0b8924", "patch": "@@ -16,7 +16,7 @@ trait Foo {\n \n impl const Foo for NonConstAdd {\n     type Bar = NonConstAdd;\n-    //~^ ERROR: the trait bound `NonConstAdd: ~const Add` is not satisfied\n+    //~^ ERROR: cannot add `NonConstAdd` to `NonConstAdd` in const contexts\n }\n \n trait Baz {"}, {"sha": "429b9f3364be1d46e52faa50f0eee6a3c5a77fbd", "filename": "src/test/ui/rfc-2632-const-trait-impl/assoc-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b76cad0a7e4a7743d4dd44dd53f077f3d0b8924/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b76cad0a7e4a7743d4dd44dd53f077f3d0b8924/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.stderr?ref=8b76cad0a7e4a7743d4dd44dd53f077f3d0b8924", "patch": "@@ -1,4 +1,4 @@\n-error[E0277]: the trait bound `NonConstAdd: ~const Add` is not satisfied\n+error[E0277]: cannot add `NonConstAdd` to `NonConstAdd` in const contexts\n   --> $DIR/assoc-type.rs:18:16\n    |\n LL |     type Bar = NonConstAdd;"}, {"sha": "13cffaba91a1ddd191235bdd30143778818f63b9", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-method-nonconst.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b76cad0a7e4a7743d4dd44dd53f077f3d0b8924/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b76cad0a7e4a7743d4dd44dd53f077f3d0b8924/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst.stderr?ref=8b76cad0a7e4a7743d4dd44dd53f077f3d0b8924", "patch": "@@ -1,4 +1,4 @@\n-error[E0277]: the trait bound `S: ~const PartialEq` is not satisfied\n+error[E0277]: can't compare `S` with `S` in const contexts\n   --> $DIR/call-generic-method-nonconst.rs:19:34\n    |\n LL | pub const EQ: bool = equals_self(&S);"}]}