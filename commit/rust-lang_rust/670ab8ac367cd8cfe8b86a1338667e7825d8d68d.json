{"sha": "670ab8ac367cd8cfe8b86a1338667e7825d8d68d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3MGFiOGFjMzY3Y2Q4Y2ZlOGI4NmExMzM4NjY3ZTc4MjVkOGQ2OGQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-04-26T23:19:26Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-04-29T21:30:57Z"}, "message": "librustc: Change labels to use the lifetime notation `'`.", "tree": {"sha": "babfc59051ffe36a8f4f45c2c8dba2a36dc679d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/babfc59051ffe36a8f4f45c2c8dba2a36dc679d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/670ab8ac367cd8cfe8b86a1338667e7825d8d68d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/670ab8ac367cd8cfe8b86a1338667e7825d8d68d", "html_url": "https://github.com/rust-lang/rust/commit/670ab8ac367cd8cfe8b86a1338667e7825d8d68d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/670ab8ac367cd8cfe8b86a1338667e7825d8d68d/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "876483dcf4bdcd0001cc25812060bc04cf367f60", "url": "https://api.github.com/repos/rust-lang/rust/commits/876483dcf4bdcd0001cc25812060bc04cf367f60", "html_url": "https://github.com/rust-lang/rust/commit/876483dcf4bdcd0001cc25812060bc04cf367f60"}], "stats": {"total": 119, "additions": 79, "deletions": 40}, "files": [{"sha": "9f81b38009fe8784cec4346411e1b865c4a9ef86", "filename": "doc/rust.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/670ab8ac367cd8cfe8b86a1338667e7825d8d68d/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/670ab8ac367cd8cfe8b86a1338667e7825d8d68d/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=670ab8ac367cd8cfe8b86a1338667e7825d8d68d", "patch": "@@ -2187,7 +2187,7 @@ A loop expression denotes an infinite loop;\n see [Continue expressions](#continue-expressions) for continue expressions.\n \n ~~~~~~~~{.ebnf .gram}\n-loop_expr : \"loop\" [ ident ':' ] '{' block '}';\n+loop_expr : [ lifetime ':' ] \"loop\" '{' block '}';\n ~~~~~~~~\n \n A `loop` expression may optionally have a _label_.\n@@ -2198,7 +2198,7 @@ See [Break expressions](#break-expressions).\n ### Break expressions\n \n ~~~~~~~~{.ebnf .gram}\n-break_expr : \"break\" [ ident ];\n+break_expr : \"break\" [ lifetime ];\n ~~~~~~~~\n \n A `break` expression has an optional `label`.\n@@ -2211,7 +2211,7 @@ but must enclose it.\n ### Continue expressions\n \n ~~~~~~~~{.ebnf .gram}\n-continue_expr : \"loop\" [ ident ];\n+continue_expr : \"loop\" [ lifetime ];\n ~~~~~~~~\n \n A continue expression, written `loop`, also has an optional `label`."}, {"sha": "dfebf6f786a28d028e139659edc1cfe011ee348e", "filename": "src/libsyntax/ext/asm.rs", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/670ab8ac367cd8cfe8b86a1338667e7825d8d68d/src%2Flibsyntax%2Fext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/670ab8ac367cd8cfe8b86a1338667e7825d8d68d/src%2Flibsyntax%2Fext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fasm.rs?ref=670ab8ac367cd8cfe8b86a1338667e7825d8d68d", "patch": "@@ -52,7 +52,10 @@ pub fn expand_asm(cx: @ext_ctxt, sp: span, tts: &[ast::token_tree])\n     let mut dialect = ast::asm_att;\n \n     let mut state = Asm;\n-    loop outer: {\n+\n+    // Not using labeled break to get us through one round of bootstrapping.\n+    let mut continue = true;\n+    while continue {\n         match state {\n             Asm => {\n                 asm = expr_to_str(cx, p.parse_expr(),\n@@ -139,20 +142,30 @@ pub fn expand_asm(cx: @ext_ctxt, sp: span, tts: &[ast::token_tree])\n                 p.bump();\n                 match next_state(state) {\n                     Some(x) => x,\n-                    None    => break outer\n+                    None    => {\n+                        continue = false;\n+                        break\n+                    }\n                 }\n             } else if *p.token == token::MOD_SEP {\n                 p.bump();\n                 let s = match next_state(state) {\n                     Some(x) => x,\n-                    None    => break outer\n+                    None    => {\n+                        continue = false;\n+                        break\n+                    }\n                 };\n                 match next_state(s) {\n                     Some(x) => x,\n-                    None    => break outer\n+                    None    => {\n+                        continue = false;\n+                        break\n+                    }\n                 }\n             } else if *p.token == token::EOF {\n-                break outer;\n+                continue = false;\n+                break;\n             } else {\n                state\n             };"}, {"sha": "50bdfb2f557263baba00cf0339e364be1ee5e841", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 37, "deletions": 20, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/670ab8ac367cd8cfe8b86a1338667e7825d8d68d/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/670ab8ac367cd8cfe8b86a1338667e7825d8d68d/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=670ab8ac367cd8cfe8b86a1338667e7825d8d68d", "patch": "@@ -348,6 +348,20 @@ pub impl Parser {\n             self.token_is_keyword(&~\"fn\", tok)\n     }\n \n+    fn token_is_lifetime(&self, tok: &token::Token) -> bool {\n+        match *tok {\n+            token::LIFETIME(*) => true,\n+            _ => false,\n+        }\n+    }\n+\n+    fn get_lifetime(&self, tok: &token::Token) -> ast::ident {\n+        match *tok {\n+            token::LIFETIME(ref ident) => copy *ident,\n+            _ => self.bug(~\"not a lifetime\"),\n+        }\n+    }\n+\n     // parse a ty_bare_fun type:\n     fn parse_ty_bare_fn(&self) -> ty_\n     {\n@@ -1228,8 +1242,14 @@ pub impl Parser {\n                                                expr_do_body);\n         } else if self.eat_keyword(&~\"while\") {\n             return self.parse_while_expr();\n+        } else if self.token_is_lifetime(&*self.token) {\n+            let lifetime = self.get_lifetime(&*self.token);\n+            self.bump();\n+            self.expect(&token::COLON);\n+            self.expect_keyword(&~\"loop\");\n+            return self.parse_loop_expr(Some(lifetime));\n         } else if self.eat_keyword(&~\"loop\") {\n-            return self.parse_loop_expr();\n+            return self.parse_loop_expr(None);\n         } else if self.eat_keyword(&~\"match\") {\n             return self.parse_match_expr();\n         } else if self.eat_keyword(&~\"unsafe\") {\n@@ -1290,8 +1310,10 @@ pub impl Parser {\n             } else { ex = expr_ret(None); }\n         } else if self.eat_keyword(&~\"break\") {\n             // BREAK expression\n-            if is_ident(&*self.token) {\n-                ex = expr_break(Some(self.parse_ident()));\n+            if self.token_is_lifetime(&*self.token) {\n+                let lifetime = self.get_lifetime(&*self.token);\n+                self.bump();\n+                ex = expr_break(Some(lifetime));\n             } else {\n                 ex = expr_break(None);\n             }\n@@ -1995,37 +2017,32 @@ pub impl Parser {\n         return self.mk_expr(lo, hi, expr_while(cond, body));\n     }\n \n-    fn parse_loop_expr(&self) -> @expr {\n+    fn parse_loop_expr(&self, opt_ident: Option<ast::ident>) -> @expr {\n         // loop headers look like 'loop {' or 'loop unsafe {'\n         let is_loop_header =\n             *self.token == token::LBRACE\n             || (is_ident(&*self.token)\n                 && self.look_ahead(1) == token::LBRACE);\n-        // labeled loop headers look like 'loop foo: {'\n-        let is_labeled_loop_header =\n-            is_ident(&*self.token)\n-            && !self.is_any_keyword(&copy *self.token)\n-            && self.look_ahead(1) == token::COLON;\n \n-        if is_loop_header || is_labeled_loop_header {\n+        if is_loop_header {\n             // This is a loop body\n-            let opt_ident;\n-            if is_labeled_loop_header {\n-                opt_ident = Some(self.parse_ident());\n-                self.expect(&token::COLON);\n-            } else {\n-                opt_ident = None;\n-            }\n-\n             let lo = self.last_span.lo;\n             let body = self.parse_block();\n             let hi = body.span.hi;\n             return self.mk_expr(lo, hi, expr_loop(body, opt_ident));\n         } else {\n             // This is a 'continue' expression\n+            if opt_ident.is_some() {\n+                self.span_err(*self.last_span,\n+                              ~\"a label may not be used with a `loop` \\\n+                                expression\");\n+            }\n+\n             let lo = self.span.lo;\n-            let ex = if is_ident(&*self.token) {\n-                expr_again(Some(self.parse_ident()))\n+            let ex = if self.token_is_lifetime(&*self.token) {\n+                let lifetime = self.get_lifetime(&*self.token);\n+                self.bump();\n+                expr_again(Some(lifetime))\n             } else {\n                 expr_again(None)\n             };"}, {"sha": "d5645ada9294a3e20c7d115e26ca0f357ffe8a9b", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/670ab8ac367cd8cfe8b86a1338667e7825d8d68d/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/670ab8ac367cd8cfe8b86a1338667e7825d8d68d/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=670ab8ac367cd8cfe8b86a1338667e7825d8d68d", "patch": "@@ -1210,12 +1210,13 @@ pub fn print_expr(s: @ps, expr: @ast::expr) {\n         print_block(s, blk);\n       }\n       ast::expr_loop(ref blk, opt_ident) => {\n-        head(s, ~\"loop\");\n-        space(s.s);\n         for opt_ident.each |ident| {\n+            word(s.s, ~\"'\");\n             print_ident(s, *ident);\n             word_space(s, ~\":\");\n         }\n+        head(s, ~\"loop\");\n+        space(s.s);\n         print_block(s, blk);\n       }\n       ast::expr_match(expr, ref arms) => {\n@@ -1363,12 +1364,20 @@ pub fn print_expr(s: @ps, expr: @ast::expr) {\n       ast::expr_break(opt_ident) => {\n         word(s.s, ~\"break\");\n         space(s.s);\n-        for opt_ident.each |ident| { print_ident(s, *ident); space(s.s) }\n+        for opt_ident.each |ident| {\n+            word(s.s, ~\"'\");\n+            print_ident(s, *ident);\n+            space(s.s);\n+        }\n       }\n       ast::expr_again(opt_ident) => {\n         word(s.s, ~\"loop\");\n         space(s.s);\n-        for opt_ident.each |ident| { print_ident(s, *ident); space(s.s) }\n+        for opt_ident.each |ident| {\n+            word(s.s, ~\"'\");\n+            print_ident(s, *ident);\n+            space(s.s)\n+        }\n       }\n       ast::expr_ret(result) => {\n         word(s.s, ~\"return\");"}, {"sha": "98965cb6d9102437a9e666cad3c035e78866f4bf", "filename": "src/test/run-pass/issue-2216.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/670ab8ac367cd8cfe8b86a1338667e7825d8d68d/src%2Ftest%2Frun-pass%2Fissue-2216.rs", "raw_url": "https://github.com/rust-lang/rust/raw/670ab8ac367cd8cfe8b86a1338667e7825d8d68d/src%2Ftest%2Frun-pass%2Fissue-2216.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2216.rs?ref=670ab8ac367cd8cfe8b86a1338667e7825d8d68d", "patch": "@@ -11,17 +11,17 @@\n pub fn main() {\n     let mut x = 0;\n     \n-    loop foo: {\n-        loop bar: {\n-            loop quux: {\n+    'foo: loop {\n+        'bar: loop {\n+            'quux: loop {\n                 if 1 == 2 {\n-                    break foo;\n+                    break 'foo;\n                 }\n                 else {\n-                    break bar;\n+                    break 'bar;\n                 }\n             }\n-            loop foo;\n+            loop 'foo;\n         }\n         x = 42;\n         break;"}, {"sha": "06ca401a136e7477d3ef564a7a279dbe49a944d8", "filename": "src/test/run-pass/labeled-break.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/670ab8ac367cd8cfe8b86a1338667e7825d8d68d/src%2Ftest%2Frun-pass%2Flabeled-break.rs", "raw_url": "https://github.com/rust-lang/rust/raw/670ab8ac367cd8cfe8b86a1338667e7825d8d68d/src%2Ftest%2Frun-pass%2Flabeled-break.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flabeled-break.rs?ref=670ab8ac367cd8cfe8b86a1338667e7825d8d68d", "patch": "@@ -12,9 +12,9 @@\n // xfail-test\n \n pub fn main() {\n-    loop foo: {\n+    'foo: loop {\n         loop {\n-            break foo;\n+            break 'foo;\n         }\n     }\n }"}]}