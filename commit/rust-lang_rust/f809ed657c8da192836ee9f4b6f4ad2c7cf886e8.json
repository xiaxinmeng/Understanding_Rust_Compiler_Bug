{"sha": "f809ed657c8da192836ee9f4b6f4ad2c7cf886e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4MDllZDY1N2M4ZGExOTI4MzZlZTlmNGI2ZjRhZDJjN2NmODg2ZTg=", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2021-09-20T23:49:47Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2021-09-20T23:54:23Z"}, "message": "Revert the rustdoc box syntax removal\n\nIt turned out to cause (minor) perf regressions.", "tree": {"sha": "01832b1db2167ee3c0d26c081a9d5b715dd12be3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01832b1db2167ee3c0d26c081a9d5b715dd12be3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f809ed657c8da192836ee9f4b6f4ad2c7cf886e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f809ed657c8da192836ee9f4b6f4ad2c7cf886e8", "html_url": "https://github.com/rust-lang/rust/commit/f809ed657c8da192836ee9f4b6f4ad2c7cf886e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f809ed657c8da192836ee9f4b6f4ad2c7cf886e8/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "207d9558d00dd5cc438a6418ba96912d396e2155", "url": "https://api.github.com/repos/rust-lang/rust/commits/207d9558d00dd5cc438a6418ba96912d396e2155", "html_url": "https://github.com/rust-lang/rust/commit/207d9558d00dd5cc438a6418ba96912d396e2155"}], "stats": {"total": 101, "additions": 47, "deletions": 54}, "files": [{"sha": "c83ca6ba54ce34942b40f90873729cc94b4b6844", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f809ed657c8da192836ee9f4b6f4ad2c7cf886e8/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f809ed657c8da192836ee9f4b6f4ad2c7cf886e8/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=f809ed657c8da192836ee9f4b6f4ad2c7cf886e8", "patch": "@@ -114,7 +114,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n             attrs: Default::default(),\n             visibility: Inherited,\n             def_id: ItemId::Auto { trait_: trait_def_id, for_: item_def_id },\n-            kind: Box::new(ImplItem(Impl {\n+            kind: box ImplItem(Impl {\n                 span: Span::dummy(),\n                 unsafety: hir::Unsafety::Normal,\n                 generics: new_generics,\n@@ -124,7 +124,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                 negative_polarity,\n                 synthetic: true,\n                 blanket_impl: None,\n-            })),\n+            }),\n             cfg: None,\n         })\n     }"}, {"sha": "82939c930c4ea811fe0b3eba5e59fc2813cf045a", "filename": "src/librustdoc/clean/blanket_impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f809ed657c8da192836ee9f4b6f4ad2c7cf886e8/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f809ed657c8da192836ee9f4b6f4ad2c7cf886e8/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs?ref=f809ed657c8da192836ee9f4b6f4ad2c7cf886e8", "patch": "@@ -100,7 +100,7 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n                     attrs: Default::default(),\n                     visibility: Inherited,\n                     def_id: ItemId::Blanket { impl_id: impl_def_id, for_: item_def_id },\n-                    kind: Box::new(ImplItem(Impl {\n+                    kind: box ImplItem(Impl {\n                         span: Span::new(self.cx.tcx.def_span(impl_def_id)),\n                         unsafety: hir::Unsafety::Normal,\n                         generics: (\n@@ -121,8 +121,8 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n                             .clean(self.cx),\n                         negative_polarity: false,\n                         synthetic: false,\n-                        blanket_impl: Some(Box::new(trait_ref.self_ty().clean(self.cx))),\n-                    })),\n+                        blanket_impl: Some(box trait_ref.self_ty().clean(self.cx)),\n+                    }),\n                     cfg: None,\n                 });\n             }"}, {"sha": "15d704eb57f1e67f70284bd33a92273d8cad977a", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f809ed657c8da192836ee9f4b6f4ad2c7cf886e8/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f809ed657c8da192836ee9f4b6f4ad2c7cf886e8/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=f809ed657c8da192836ee9f4b6f4ad2c7cf886e8", "patch": "@@ -124,14 +124,8 @@ crate fn try_inline(\n \n     let (attrs, cfg) = merge_attrs(cx, Some(parent_module), load_attrs(cx, did), attrs_clone);\n     cx.inlined.insert(did.into());\n-    let mut item = clean::Item::from_def_id_and_attrs_and_parts(\n-        did,\n-        Some(name),\n-        kind,\n-        Box::new(attrs),\n-        cx,\n-        cfg,\n-    );\n+    let mut item =\n+        clean::Item::from_def_id_and_attrs_and_parts(did, Some(name), kind, box attrs, cx, cfg);\n     if let Some(import_def_id) = import_def_id {\n         // The visibility needs to reflect the one from the reexport and not from the \"source\" DefId.\n         item.visibility = cx.tcx.visibility(import_def_id).clean(cx);\n@@ -464,7 +458,7 @@ crate fn build_impl(\n             synthetic: false,\n             blanket_impl: None,\n         }),\n-        Box::new(merged_attrs),\n+        box merged_attrs,\n         cx,\n         cfg,\n     ));\n@@ -493,10 +487,10 @@ fn build_module(\n                 let prim_ty = clean::PrimitiveType::from(p);\n                 items.push(clean::Item {\n                     name: None,\n-                    attrs: Box::new(clean::Attributes::default()),\n+                    attrs: box clean::Attributes::default(),\n                     def_id: ItemId::Primitive(prim_ty, did.krate),\n                     visibility: clean::Public,\n-                    kind: Box::new(clean::ImportItem(clean::Import::new_simple(\n+                    kind: box clean::ImportItem(clean::Import::new_simple(\n                         item.ident.name,\n                         clean::ImportSource {\n                             path: clean::Path {\n@@ -513,7 +507,7 @@ fn build_module(\n                             did: None,\n                         },\n                         true,\n-                    ))),\n+                    )),\n                     cfg: None,\n                 });\n             } else if let Some(i) = try_inline(cx, did, None, res, item.ident.name, None, visited) {"}, {"sha": "3ec979c5ae918a90abd627bca42cdad0a5dd2fa7", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 21, "deletions": 23, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/f809ed657c8da192836ee9f4b6f4ad2c7cf886e8/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f809ed657c8da192836ee9f4b6f4ad2c7cf886e8/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=f809ed657c8da192836ee9f4b6f4ad2c7cf886e8", "patch": "@@ -392,8 +392,8 @@ impl<'tcx> Clean<Type> for ty::ProjectionTy<'tcx> {\n         Type::QPath {\n             name: cx.tcx.associated_item(self.item_def_id).ident.name,\n             self_def_id: self_type.def_id(),\n-            self_type: Box::new(self_type),\n-            trait_: Box::new(trait_),\n+            self_type: box self_type,\n+            trait_: box trait_,\n         }\n     }\n }\n@@ -1284,8 +1284,8 @@ fn clean_qpath(hir_ty: &hir::Ty<'_>, cx: &mut DocContext<'_>) -> Type {\n             Type::QPath {\n                 name: p.segments.last().expect(\"segments were empty\").ident.name,\n                 self_def_id: Some(DefId::local(qself.hir_id.owner.local_def_index)),\n-                self_type: Box::new(qself.clean(cx)),\n-                trait_: Box::new(resolve_type(cx, trait_path)),\n+                self_type: box qself.clean(cx),\n+                trait_: box resolve_type(cx, trait_path),\n             }\n         }\n         hir::QPath::TypeRelative(ref qself, ref segment) => {\n@@ -1300,8 +1300,8 @@ fn clean_qpath(hir_ty: &hir::Ty<'_>, cx: &mut DocContext<'_>) -> Type {\n             Type::QPath {\n                 name: segment.ident.name,\n                 self_def_id: res.opt_def_id(),\n-                self_type: Box::new(qself.clean(cx)),\n-                trait_: Box::new(resolve_type(cx, trait_path)),\n+                self_type: box qself.clean(cx),\n+                trait_: box resolve_type(cx, trait_path),\n             }\n         }\n         hir::QPath::LangItem(..) => bug!(\"clean: requiring documentation of lang item\"),\n@@ -1314,7 +1314,7 @@ impl Clean<Type> for hir::Ty<'_> {\n \n         match self.kind {\n             TyKind::Never => Never,\n-            TyKind::Ptr(ref m) => RawPointer(m.mutbl, Box::new(m.ty.clean(cx))),\n+            TyKind::Ptr(ref m) => RawPointer(m.mutbl, box m.ty.clean(cx)),\n             TyKind::Rptr(ref l, ref m) => {\n                 // There are two times a `Fresh` lifetime can be created:\n                 // 1. For `&'_ x`, written by the user. This corresponds to `lower_lifetime` in `rustc_ast_lowering`.\n@@ -1326,9 +1326,9 @@ impl Clean<Type> for hir::Ty<'_> {\n                 let elided =\n                     l.is_elided() || matches!(l.name, LifetimeName::Param(ParamName::Fresh(_)));\n                 let lifetime = if elided { None } else { Some(l.clean(cx)) };\n-                BorrowedRef { lifetime, mutability: m.mutbl, type_: Box::new(m.ty.clean(cx)) }\n+                BorrowedRef { lifetime, mutability: m.mutbl, type_: box m.ty.clean(cx) }\n             }\n-            TyKind::Slice(ref ty) => Slice(Box::new(ty.clean(cx))),\n+            TyKind::Slice(ref ty) => Slice(box ty.clean(cx)),\n             TyKind::Array(ref ty, ref length) => {\n                 let def_id = cx.tcx.hir().local_def_id(length.hir_id);\n                 // NOTE(min_const_generics): We can't use `const_eval_poly` for constants\n@@ -1341,7 +1341,7 @@ impl Clean<Type> for hir::Ty<'_> {\n                 let ct = ty::Const::from_anon_const(cx.tcx, def_id);\n                 let param_env = cx.tcx.param_env(def_id);\n                 let length = print_const(cx, ct.eval(cx.tcx, param_env));\n-                Array(Box::new(ty.clean(cx)), length)\n+                Array(box ty.clean(cx), length)\n             }\n             TyKind::Tup(ref tys) => Tuple(tys.clean(cx)),\n             TyKind::OpaqueDef(item_id, _) => {\n@@ -1358,7 +1358,7 @@ impl Clean<Type> for hir::Ty<'_> {\n                 let lifetime = if !lifetime.is_elided() { Some(lifetime.clean(cx)) } else { None };\n                 DynTrait(bounds, lifetime)\n             }\n-            TyKind::BareFn(ref barefn) => BareFunction(Box::new(barefn.clean(cx))),\n+            TyKind::BareFn(ref barefn) => BareFunction(box barefn.clean(cx)),\n             // Rustdoc handles `TyKind::Err`s by turning them into `Type::Infer`s.\n             TyKind::Infer | TyKind::Err => Infer,\n             TyKind::Typeof(..) => panic!(\"unimplemented type {:?}\", self.kind),\n@@ -1409,29 +1409,27 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n             ty::Uint(uint_ty) => Primitive(uint_ty.into()),\n             ty::Float(float_ty) => Primitive(float_ty.into()),\n             ty::Str => Primitive(PrimitiveType::Str),\n-            ty::Slice(ty) => Slice(Box::new(ty.clean(cx))),\n+            ty::Slice(ty) => Slice(box ty.clean(cx)),\n             ty::Array(ty, n) => {\n                 let mut n = cx.tcx.lift(n).expect(\"array lift failed\");\n                 n = n.eval(cx.tcx, ty::ParamEnv::reveal_all());\n                 let n = print_const(cx, n);\n-                Array(Box::new(ty.clean(cx)), n)\n+                Array(box ty.clean(cx), n)\n+            }\n+            ty::RawPtr(mt) => RawPointer(mt.mutbl, box mt.ty.clean(cx)),\n+            ty::Ref(r, ty, mutbl) => {\n+                BorrowedRef { lifetime: r.clean(cx), mutability: mutbl, type_: box ty.clean(cx) }\n             }\n-            ty::RawPtr(mt) => RawPointer(mt.mutbl, Box::new(mt.ty.clean(cx))),\n-            ty::Ref(r, ty, mutbl) => BorrowedRef {\n-                lifetime: r.clean(cx),\n-                mutability: mutbl,\n-                type_: Box::new(ty.clean(cx)),\n-            },\n             ty::FnDef(..) | ty::FnPtr(_) => {\n                 let ty = cx.tcx.lift(*self).expect(\"FnPtr lift failed\");\n                 let sig = ty.fn_sig(cx.tcx);\n                 let def_id = DefId::local(CRATE_DEF_INDEX);\n-                BareFunction(Box::new(BareFunctionDecl {\n+                BareFunction(box BareFunctionDecl {\n                     unsafety: sig.unsafety(),\n                     generic_params: Vec::new(),\n                     decl: (def_id, sig).clean(cx),\n                     abi: sig.abi(),\n-                }))\n+                })\n             }\n             ty::Adt(def, substs) => {\n                 let did = def.did;\n@@ -1974,10 +1972,10 @@ fn clean_extern_crate(\n     // FIXME: using `from_def_id_and_kind` breaks `rustdoc/masked` for some reason\n     vec![Item {\n         name: Some(name),\n-        attrs: Box::new(attrs.clean(cx)),\n+        attrs: box attrs.clean(cx),\n         def_id: crate_def_id.into(),\n         visibility: krate.vis.clean(cx),\n-        kind: Box::new(ExternCrateItem { src: orig_name }),\n+        kind: box ExternCrateItem { src: orig_name },\n         cfg: attrs.cfg(cx.sess()),\n     }]\n }"}, {"sha": "d23941d77ba4ff27019c42cd17f56371960f1bbb", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f809ed657c8da192836ee9f4b6f4ad2c7cf886e8/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f809ed657c8da192836ee9f4b6f4ad2c7cf886e8/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=f809ed657c8da192836ee9f4b6f4ad2c7cf886e8", "patch": "@@ -421,7 +421,7 @@ impl Item {\n             def_id,\n             name,\n             kind,\n-            Box::new(ast_attrs.clean(cx)),\n+            box ast_attrs.clean(cx),\n             cx,\n             ast_attrs.cfg(cx.sess()),\n         )\n@@ -439,7 +439,7 @@ impl Item {\n \n         Item {\n             def_id: def_id.into(),\n-            kind: Box::new(kind),\n+            kind: box kind,\n             name,\n             attrs,\n             visibility: cx.tcx.visibility(def_id).clean(cx),"}, {"sha": "e48a0c178846e65da9692896f03a81cae0e6b5f5", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f809ed657c8da192836ee9f4b6f4ad2c7cf886e8/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f809ed657c8da192836ee9f4b6f4ad2c7cf886e8/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=f809ed657c8da192836ee9f4b6f4ad2c7cf886e8", "patch": "@@ -263,7 +263,7 @@ crate fn create_config(\n         stderr: None,\n         lint_caps,\n         parse_sess_created: None,\n-        register_lints: Some(Box::new(crate::lint::register_lints)),\n+        register_lints: Some(box crate::lint::register_lints),\n         override_queries: Some(|_sess, providers, _external_providers| {\n             // Most lints will require typechecking, so just don't run them.\n             providers.lint_mod = |_, _| {};"}, {"sha": "ac760fad103c18d52138ba6b51b8bbeee0724755", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f809ed657c8da192836ee9f4b6f4ad2c7cf886e8/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f809ed657c8da192836ee9f4b6f4ad2c7cf886e8/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=f809ed657c8da192836ee9f4b6f4ad2c7cf886e8", "patch": "@@ -99,7 +99,7 @@ crate fn run(options: Options) -> Result<(), ErrorReported> {\n         stderr: None,\n         lint_caps,\n         parse_sess_created: None,\n-        register_lints: Some(Box::new(crate::lint::register_lints)),\n+        register_lints: Some(box crate::lint::register_lints),\n         override_queries: None,\n         make_codegen_backend: None,\n         registry: rustc_driver::diagnostics_registry(),\n@@ -550,10 +550,10 @@ crate fn make_test(\n                     .supports_color();\n \n             let emitter =\n-                EmitterWriter::new(Box::new(io::sink()), None, false, false, false, None, false);\n+                EmitterWriter::new(box io::sink(), None, false, false, false, None, false);\n \n             // FIXME(misdreavus): pass `-Z treat-err-as-bug` to the doctest parser\n-            let handler = Handler::with_emitter(false, None, Box::new(emitter));\n+            let handler = Handler::with_emitter(false, None, box emitter);\n             let sess = ParseSess::with_span_handler(handler, sm);\n \n             let mut found_main = false;\n@@ -963,7 +963,7 @@ impl Tester for Collector {\n                 no_run,\n                 test_type: test::TestType::DocTest,\n             },\n-            testfn: test::DynTestFn(Box::new(move || {\n+            testfn: test::DynTestFn(box move || {\n                 let report_unused_externs = |uext| {\n                     unused_externs.lock().unwrap().push(uext);\n                 };\n@@ -1043,9 +1043,9 @@ impl Tester for Collector {\n                         }\n                     }\n \n-                    panic::resume_unwind(Box::new(()));\n+                    panic::resume_unwind(box ());\n                 }\n-            })),\n+            }),\n         });\n     }\n "}, {"sha": "f84850c0fe1f1c1531ccd4b59d06698fa516cebb", "filename": "src/librustdoc/fold.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f809ed657c8da192836ee9f4b6f4ad2c7cf886e8/src%2Flibrustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f809ed657c8da192836ee9f4b6f4ad2c7cf886e8/src%2Flibrustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ffold.rs?ref=f809ed657c8da192836ee9f4b6f4ad2c7cf886e8", "patch": "@@ -2,7 +2,7 @@ use crate::clean::*;\n \n crate fn strip_item(mut item: Item) -> Item {\n     if !matches!(*item.kind, StrippedItem(..)) {\n-        item.kind = Box::new(StrippedItem(item.kind));\n+        item.kind = box StrippedItem(item.kind);\n     }\n     item\n }\n@@ -69,10 +69,10 @@ crate trait DocFolder: Sized {\n \n     /// don't override!\n     fn fold_item_recur(&mut self, mut item: Item) -> Item {\n-        item.kind = Box::new(match *item.kind {\n-            StrippedItem(box i) => StrippedItem(Box::new(self.fold_inner_recur(i))),\n+        item.kind = box match *item.kind {\n+            StrippedItem(box i) => StrippedItem(box self.fold_inner_recur(i)),\n             _ => self.fold_inner_recur(*item.kind),\n-        });\n+        };\n         item\n     }\n "}, {"sha": "5cfd21046f5d7748f64c2f5a034e848939f12077", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f809ed657c8da192836ee9f4b6f4ad2c7cf886e8/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f809ed657c8da192836ee9f4b6f4ad2c7cf886e8/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=f809ed657c8da192836ee9f4b6f4ad2c7cf886e8", "patch": "@@ -7,6 +7,7 @@\n #![feature(assert_matches)]\n #![feature(box_patterns)]\n #![feature(control_flow_enum)]\n+#![feature(box_syntax)]\n #![feature(in_band_lifetimes)]\n #![feature(nll)]\n #![feature(test)]"}, {"sha": "3edd96a3364dba6f9f60f2434bf8640c3ac323cc", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f809ed657c8da192836ee9f4b6f4ad2c7cf886e8/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f809ed657c8da192836ee9f4b6f4ad2c7cf886e8/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=f809ed657c8da192836ee9f4b6f4ad2c7cf886e8", "patch": "@@ -64,7 +64,7 @@ enum ErrorKind<'a> {\n \n impl<'a> From<ResolutionFailure<'a>> for ErrorKind<'a> {\n     fn from(err: ResolutionFailure<'a>) -> Self {\n-        ErrorKind::Resolve(Box::new(err))\n+        ErrorKind::Resolve(box err)\n     }\n }\n "}]}