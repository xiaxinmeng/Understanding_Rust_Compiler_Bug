{"sha": "557cf513fa8126a71775cc559d5242cf4feac625", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1N2NmNTEzZmE4MTI2YTcxNzc1Y2M1NTlkNTI0MmNmNGZlYWM2MjU=", "commit": {"author": {"name": "Benjamin Coenen", "email": "5719034+bnjjj@users.noreply.github.com", "date": "2021-01-17T14:15:23Z"}, "committer": {"name": "Benjamin Coenen", "email": "5719034+bnjjj@users.noreply.github.com", "date": "2021-01-17T14:15:23Z"}, "message": "Add assist: add lifetime to type #7200\n\nSigned-off-by: Benjamin Coenen <5719034+bnjjj@users.noreply.github.com>", "tree": {"sha": "de36d2910d54360ededf9351000f7bd47812bf40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de36d2910d54360ededf9351000f7bd47812bf40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/557cf513fa8126a71775cc559d5242cf4feac625", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/557cf513fa8126a71775cc559d5242cf4feac625", "html_url": "https://github.com/rust-lang/rust/commit/557cf513fa8126a71775cc559d5242cf4feac625", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/557cf513fa8126a71775cc559d5242cf4feac625/comments", "author": {"login": "bnjjj", "id": 5719034, "node_id": "MDQ6VXNlcjU3MTkwMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5719034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnjjj", "html_url": "https://github.com/bnjjj", "followers_url": "https://api.github.com/users/bnjjj/followers", "following_url": "https://api.github.com/users/bnjjj/following{/other_user}", "gists_url": "https://api.github.com/users/bnjjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnjjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnjjj/subscriptions", "organizations_url": "https://api.github.com/users/bnjjj/orgs", "repos_url": "https://api.github.com/users/bnjjj/repos", "events_url": "https://api.github.com/users/bnjjj/events{/privacy}", "received_events_url": "https://api.github.com/users/bnjjj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bnjjj", "id": 5719034, "node_id": "MDQ6VXNlcjU3MTkwMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5719034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnjjj", "html_url": "https://github.com/bnjjj", "followers_url": "https://api.github.com/users/bnjjj/followers", "following_url": "https://api.github.com/users/bnjjj/following{/other_user}", "gists_url": "https://api.github.com/users/bnjjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnjjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnjjj/subscriptions", "organizations_url": "https://api.github.com/users/bnjjj/orgs", "repos_url": "https://api.github.com/users/bnjjj/repos", "events_url": "https://api.github.com/users/bnjjj/events{/privacy}", "received_events_url": "https://api.github.com/users/bnjjj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd532e615abdac766ce9110e02e197f674fce375", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd532e615abdac766ce9110e02e197f674fce375", "html_url": "https://github.com/rust-lang/rust/commit/cd532e615abdac766ce9110e02e197f674fce375"}], "stats": {"total": 238, "additions": 238, "deletions": 0}, "files": [{"sha": "c7af84704654cf6d739572f017e62874b27034d7", "filename": "crates/assists/src/handlers/add_lifetime_to_type.rs", "status": "added", "additions": 217, "deletions": 0, "changes": 217, "blob_url": "https://github.com/rust-lang/rust/blob/557cf513fa8126a71775cc559d5242cf4feac625/crates%2Fassists%2Fsrc%2Fhandlers%2Fadd_lifetime_to_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/557cf513fa8126a71775cc559d5242cf4feac625/crates%2Fassists%2Fsrc%2Fhandlers%2Fadd_lifetime_to_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fadd_lifetime_to_type.rs?ref=557cf513fa8126a71775cc559d5242cf4feac625", "patch": "@@ -0,0 +1,217 @@\n+use ast::FieldList;\n+use syntax::ast::{self, AstNode, GenericParamsOwner, NameOwner, RefType, Type};\n+\n+use crate::{AssistContext, AssistId, AssistKind, Assists};\n+\n+// Assist: add_lifetime_to_type\n+//\n+// Adds a new lifetime to a struct, enum or union.\n+//\n+// ```\n+// struct Point$0 {\n+//     x: &u32,\n+//     y: u32,\n+// }\n+// ```\n+// ->\n+// ```\n+// struct Point<'a> {\n+//     x: &'a u32,\n+//     y: u32,\n+// }\n+// ```\n+pub(crate) fn add_lifetime_to_type(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+    let node = ctx.find_node_at_offset::<ast::AdtDef>()?;\n+    let has_lifetime = node\n+        .generic_param_list()\n+        .map(|gen_list| gen_list.lifetime_params().count() > 0)\n+        .unwrap_or_default();\n+\n+    if has_lifetime {\n+        return None;\n+    }\n+\n+    let ref_types = fetch_borrowed_types(&node)?;\n+    let target = node.syntax().text_range();\n+\n+    acc.add(\n+        AssistId(\"add_lifetime_to_type\", AssistKind::Generate),\n+        \"Add lifetime`\",\n+        target,\n+        |builder| {\n+            match node.generic_param_list() {\n+                Some(gen_param) => {\n+                    if let Some(left_angle) = gen_param.l_angle_token() {\n+                        builder.insert(left_angle.text_range().end(), \"'a, \");\n+                    }\n+                }\n+                None => {\n+                    if let Some(name) = node.name() {\n+                        builder.insert(name.syntax().text_range().end(), \"<'a>\");\n+                    }\n+                }\n+            }\n+\n+            for ref_type in ref_types {\n+                if let Some(amp_token) = ref_type.amp_token() {\n+                    builder.insert(amp_token.text_range().end(), \"'a \");\n+                }\n+            }\n+        },\n+    )\n+}\n+\n+fn fetch_borrowed_types(node: &ast::AdtDef) -> Option<Vec<RefType>> {\n+    let ref_types: Vec<RefType> = match node {\n+        ast::AdtDef::Enum(enum_) => {\n+            let variant_list = enum_.variant_list()?;\n+            variant_list\n+                .variants()\n+                .filter_map(|variant| {\n+                    let field_list = variant.field_list()?;\n+\n+                    find_ref_types_from_field_list(&field_list)\n+                })\n+                .flatten()\n+                .collect()\n+        }\n+        ast::AdtDef::Struct(strukt) => {\n+            let field_list = strukt.field_list()?;\n+            find_ref_types_from_field_list(&field_list)?\n+        }\n+        ast::AdtDef::Union(un) => {\n+            let record_field_list = un.record_field_list()?;\n+            record_field_list\n+                .fields()\n+                .filter_map(|r_field| {\n+                    if let Type::RefType(ref_type) = r_field.ty()? {\n+                        if ref_type.lifetime().is_none() {\n+                            return Some(ref_type);\n+                        }\n+                    }\n+\n+                    None\n+                })\n+                .collect()\n+        }\n+    };\n+\n+    if ref_types.is_empty() {\n+        None\n+    } else {\n+        Some(ref_types)\n+    }\n+}\n+\n+fn find_ref_types_from_field_list(field_list: &FieldList) -> Option<Vec<RefType>> {\n+    let ref_types: Vec<RefType> = match field_list {\n+        ast::FieldList::RecordFieldList(record_list) => record_list\n+            .fields()\n+            .filter_map(|f| {\n+                if let Type::RefType(ref_type) = f.ty()? {\n+                    if ref_type.lifetime().is_none() {\n+                        return Some(ref_type);\n+                    }\n+                }\n+\n+                None\n+            })\n+            .collect(),\n+        ast::FieldList::TupleFieldList(tuple_field_list) => tuple_field_list\n+            .fields()\n+            .filter_map(|f| {\n+                if let Type::RefType(ref_type) = f.ty()? {\n+                    if ref_type.lifetime().is_none() {\n+                        return Some(ref_type);\n+                    }\n+                }\n+\n+                None\n+            })\n+            .collect(),\n+    };\n+\n+    if ref_types.is_empty() {\n+        None\n+    } else {\n+        Some(ref_types)\n+    }\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n+\n+    use super::*;\n+\n+    #[test]\n+    fn add_lifetime_to_struct() {\n+        check_assist(\n+            add_lifetime_to_type,\n+            \"struct Foo$0 { a: &i32 }\",\n+            \"struct Foo<'a> { a: &'a i32 }\",\n+        );\n+\n+        check_assist(\n+            add_lifetime_to_type,\n+            \"struct Foo$0 { a: &i32, b: &usize }\",\n+            \"struct Foo<'a> { a: &'a i32, b: &'a usize }\",\n+        );\n+\n+        check_assist(\n+            add_lifetime_to_type,\n+            \"struct Foo<T>$0 { a: &T, b: usize }\",\n+            \"struct Foo<'a, T> { a: &'a T, b: usize }\",\n+        );\n+\n+        check_assist_not_applicable(add_lifetime_to_type, \"struct Foo<'a>$0 { a: &'a i32 }\");\n+        check_assist_not_applicable(add_lifetime_to_type, \"struct Foo$0 { a: &'a i32 }\");\n+    }\n+\n+    #[test]\n+    fn add_lifetime_to_enum() {\n+        check_assist(\n+            add_lifetime_to_type,\n+            \"enum Foo$0 { Bar { a: i32 }, Other, Tuple(u32, &u32)}\",\n+            \"enum Foo<'a> { Bar { a: i32 }, Other, Tuple(u32, &'a u32)}\",\n+        );\n+\n+        check_assist(\n+            add_lifetime_to_type,\n+            \"enum Foo$0 { Bar { a: &i32 }}\",\n+            \"enum Foo<'a> { Bar { a: &'a i32 }}\",\n+        );\n+\n+        check_assist(\n+            add_lifetime_to_type,\n+            \"enum Foo<T>$0 { Bar { a: &i32, b: &T }}\",\n+            \"enum Foo<'a, T> { Bar { a: &'a i32, b: &'a T }}\",\n+        );\n+\n+        check_assist_not_applicable(add_lifetime_to_type, \"enum Foo<'a>$0 { Bar { a: &'a i32 }}\");\n+        check_assist_not_applicable(add_lifetime_to_type, \"enum Foo$0 { Bar, Misc }\");\n+    }\n+\n+    #[test]\n+    fn add_lifetime_to_union() {\n+        check_assist(\n+            add_lifetime_to_type,\n+            \"union Foo$0 { a: &i32 }\",\n+            \"union Foo<'a> { a: &'a i32 }\",\n+        );\n+\n+        check_assist(\n+            add_lifetime_to_type,\n+            \"union Foo$0 { a: &i32, b: &usize }\",\n+            \"union Foo<'a> { a: &'a i32, b: &'a usize }\",\n+        );\n+\n+        check_assist(\n+            add_lifetime_to_type,\n+            \"union Foo<T>$0 { a: &T, b: usize }\",\n+            \"union Foo<'a, T> { a: &'a T, b: usize }\",\n+        );\n+\n+        check_assist_not_applicable(add_lifetime_to_type, \"struct Foo<'a>$0 { a: &'a i32 }\");\n+    }\n+}"}, {"sha": "559b9651e80041a6e7aaac9ac5e499ab605b3f9f", "filename": "crates/assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/557cf513fa8126a71775cc559d5242cf4feac625/crates%2Fassists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/557cf513fa8126a71775cc559d5242cf4feac625/crates%2Fassists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Flib.rs?ref=557cf513fa8126a71775cc559d5242cf4feac625", "patch": "@@ -108,6 +108,7 @@ mod handlers {\n     pub(crate) type Handler = fn(&mut Assists, &AssistContext) -> Option<()>;\n \n     mod add_explicit_type;\n+    mod add_lifetime_to_type;\n     mod add_missing_impl_members;\n     mod add_turbo_fish;\n     mod apply_demorgan;\n@@ -164,6 +165,7 @@ mod handlers {\n         &[\n             // These are alphabetic for the foolish consistency\n             add_explicit_type::add_explicit_type,\n+            add_lifetime_to_type::add_lifetime_to_type,\n             add_turbo_fish::add_turbo_fish,\n             apply_demorgan::apply_demorgan,\n             auto_import::auto_import,"}, {"sha": "4b254d463cac3f17920c601f44ab39b869d63095", "filename": "crates/assists/src/tests/generated.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/557cf513fa8126a71775cc559d5242cf4feac625/crates%2Fassists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/557cf513fa8126a71775cc559d5242cf4feac625/crates%2Fassists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Ftests%2Fgenerated.rs?ref=557cf513fa8126a71775cc559d5242cf4feac625", "patch": "@@ -103,6 +103,25 @@ impl Trait<u32> for () {\n     )\n }\n \n+#[test]\n+fn doctest_add_lifetime_to_type() {\n+    check_doc_test(\n+        \"add_lifetime_to_type\",\n+        r#####\"\n+struct Point$0 {\n+    x: &u32,\n+    y: u32,\n+}\n+\"#####,\n+        r#####\"\n+struct Point<'a> {\n+    x: &'a u32,\n+    y: u32,\n+}\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_add_turbo_fish() {\n     check_doc_test("}]}