{"sha": "b16d8eb3f2e42a720d9da5aff7119b2fd2b4805b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxNmQ4ZWIzZjJlNDJhNzIwZDlkYTVhZmY3MTE5YjJmZDJiNDgwNWI=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-11-25T16:05:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-25T16:05:00Z"}, "message": "Rollup merge of #56072 - da-x:stabilize-literal-matcher, r=petrochenkov\n\nStabilize macro_literal_matcher\n\nThis followed FCP in #35625.\n\nCloses #35625", "tree": {"sha": "a112a73d32f1f41eafd0bcc4bd570d0ce9140d8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a112a73d32f1f41eafd0bcc4bd570d0ce9140d8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b16d8eb3f2e42a720d9da5aff7119b2fd2b4805b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJb+sgsCRBK7hj4Ov3rIwAAdHIIAKTMsE99ROI4GXE470e9p/73\nJ6RYULlqkqVqWM0JYxsByuw1WWdTyLA1uL8VjYcKdbqc6AGJFLe7GzkIg1m2fMMc\nZXJLtEBAjC48c5rQp/ARIQPSa1PAcdRZyPRE/RAUO1885qngSdReNAuk8CKgmeDH\nTBttuRMgYQY992xkrEp6mWA+6hFtJA+Woy6YRzvwCIggi8WUioYNU4wGi2QKPyEB\n2qi9BeWho/qp/Mqpz8FNJwPCjL6rWnczXeTeNzk78ADfFnEA0I+w8Vz9CUHbJYJj\n4BhVxE6B7ajeGloaxE5LwZi6z7Vq39z95SuYKZCCV0vc3GjxYxZ/OJyifHHPHXE=\n=PZOd\n-----END PGP SIGNATURE-----\n", "payload": "tree a112a73d32f1f41eafd0bcc4bd570d0ce9140d8a\nparent 6c2513c0d38c8690ef0d2f9d024fafa2391671db\nparent b8ae7b801bf1f3d298493b2e7e1328a1a7ecace7\nauthor Pietro Albini <pietro@pietroalbini.org> 1543161900 +0100\ncommitter GitHub <noreply@github.com> 1543161900 +0100\n\nRollup merge of #56072 - da-x:stabilize-literal-matcher, r=petrochenkov\n\nStabilize macro_literal_matcher\n\nThis followed FCP in #35625.\n\nCloses #35625\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b16d8eb3f2e42a720d9da5aff7119b2fd2b4805b", "html_url": "https://github.com/rust-lang/rust/commit/b16d8eb3f2e42a720d9da5aff7119b2fd2b4805b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b16d8eb3f2e42a720d9da5aff7119b2fd2b4805b/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c2513c0d38c8690ef0d2f9d024fafa2391671db", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c2513c0d38c8690ef0d2f9d024fafa2391671db", "html_url": "https://github.com/rust-lang/rust/commit/6c2513c0d38c8690ef0d2f9d024fafa2391671db"}, {"sha": "b8ae7b801bf1f3d298493b2e7e1328a1a7ecace7", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8ae7b801bf1f3d298493b2e7e1328a1a7ecace7", "html_url": "https://github.com/rust-lang/rust/commit/b8ae7b801bf1f3d298493b2e7e1328a1a7ecace7"}], "stats": {"total": 88, "additions": 15, "deletions": 73}, "files": [{"sha": "870158200dee90aa9c2787bed74d71e60cff9365", "filename": "src/doc/unstable-book/src/language-features/macro-literal-matcher.md", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6c2513c0d38c8690ef0d2f9d024fafa2391671db/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fmacro-literal-matcher.md", "raw_url": "https://github.com/rust-lang/rust/raw/6c2513c0d38c8690ef0d2f9d024fafa2391671db/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fmacro-literal-matcher.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fmacro-literal-matcher.md?ref=6c2513c0d38c8690ef0d2f9d024fafa2391671db", "patch": "@@ -1,17 +0,0 @@\n-# `macro_literal_matcher`\n-\n-The tracking issue for this feature is: [#35625]\n-\n-The RFC is: [rfc#1576].\n-\n-With this feature gate enabled, the [list of designators] gains one more entry:\n-\n-* `literal`: a literal. Examples: 2, \"string\", 'c'\n-\n-A `literal` may be followed by anything, similarly to the `ident` specifier.\n-\n-[rfc#1576]: http://rust-lang.github.io/rfcs/1576-macros-literal-matcher.html\n-[#35625]: https://github.com/rust-lang/rust/issues/35625\n-[list of designators]: ../reference/macros-by-example.html\n-\n-------------------------"}, {"sha": "d526e464ba4f50935ab50ba00b615fdb675e28a9", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 13, "deletions": 18, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/b16d8eb3f2e42a720d9da5aff7119b2fd2b4805b/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b16d8eb3f2e42a720d9da5aff7119b2fd2b4805b/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=b16d8eb3f2e42a720d9da5aff7119b2fd2b4805b", "patch": "@@ -19,7 +19,7 @@ use ext::tt::macro_parser::{MatchedSeq, MatchedNonterminal};\n use ext::tt::macro_parser::{parse, parse_failure_msg};\n use ext::tt::quoted;\n use ext::tt::transcribe::transcribe;\n-use feature_gate::{self, emit_feature_err, Features, GateIssue};\n+use feature_gate::Features;\n use parse::{Directory, ParseSess};\n use parse::parser::Parser;\n use parse::token::{self, NtTT};\n@@ -1027,26 +1027,21 @@ fn has_legal_fragment_specifier(sess: &ParseSess,\n     Ok(())\n }\n \n-fn is_legal_fragment_specifier(sess: &ParseSess,\n-                               features: &Features,\n-                               attrs: &[ast::Attribute],\n+fn is_legal_fragment_specifier(_sess: &ParseSess,\n+                               _features: &Features,\n+                               _attrs: &[ast::Attribute],\n                                frag_name: &str,\n-                               frag_span: Span) -> bool {\n+                               _frag_span: Span) -> bool {\n+    /*\n+     * If new fragment specifiers are invented in nightly, `_sess`,\n+     * `_features`, `_attrs`, and `_frag_span` will be useful here\n+     * for checking against feature gates. See past versions of\n+     * this function.\n+     */\n     match frag_name {\n         \"item\" | \"block\" | \"stmt\" | \"expr\" | \"pat\" | \"lifetime\" |\n-        \"path\" | \"ty\" | \"ident\" | \"meta\" | \"tt\" | \"vis\" | \"\" => true,\n-        \"literal\" => {\n-            if !features.macro_literal_matcher &&\n-               !attr::contains_name(attrs, \"allow_internal_unstable\") {\n-                let explain = feature_gate::EXPLAIN_LITERAL_MATCHER;\n-                emit_feature_err(sess,\n-                                 \"macro_literal_matcher\",\n-                                 frag_span,\n-                                 GateIssue::Language,\n-                                 explain);\n-            }\n-            true\n-        },\n+        \"path\" | \"ty\" | \"ident\" | \"meta\" | \"tt\" | \"vis\" | \"literal\" |\n+        \"\" => true,\n         _ => false,\n     }\n }"}, {"sha": "73567765a04c456ab3912a0a891c4c537dadf548", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b16d8eb3f2e42a720d9da5aff7119b2fd2b4805b/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b16d8eb3f2e42a720d9da5aff7119b2fd2b4805b/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=b16d8eb3f2e42a720d9da5aff7119b2fd2b4805b", "patch": "@@ -436,9 +436,6 @@ declare_features! (\n     // Allows irrefutable patterns in if-let and while-let statements (RFC 2086)\n     (active, irrefutable_let_patterns, \"1.27.0\", Some(44495), None),\n \n-    // Allows use of the :literal macro fragment specifier (RFC 1576)\n-    (active, macro_literal_matcher, \"1.27.0\", Some(35625), None),\n-\n     // inconsistent bounds in where clauses\n     (active, trivial_bounds, \"1.28.0\", Some(48214), None),\n \n@@ -690,6 +687,8 @@ declare_features! (\n     (accepted, impl_header_lifetime_elision, \"1.31.0\", Some(15872), None),\n     // `extern crate foo as bar;` puts `bar` into extern prelude.\n     (accepted, extern_crate_item_prelude, \"1.31.0\", Some(55599), None),\n+    // Allows use of the :literal macro fragment specifier (RFC 1576)\n+    (accepted, macro_literal_matcher, \"1.31.0\", Some(35625), None),\n );\n \n // If you change this, please modify src/doc/unstable-book as well. You must\n@@ -1425,9 +1424,6 @@ pub const EXPLAIN_DEPR_CUSTOM_DERIVE: &'static str =\n pub const EXPLAIN_DERIVE_UNDERSCORE: &'static str =\n     \"attributes of the form `#[derive_*]` are reserved for the compiler\";\n \n-pub const EXPLAIN_LITERAL_MATCHER: &'static str =\n-    \":literal fragment specifier is experimental and subject to change\";\n-\n pub const EXPLAIN_UNSIZED_TUPLE_COERCION: &'static str =\n     \"unsized tuple coercion is not stable enough for use and is subject to change\";\n "}, {"sha": "c4ed534cc20ec84e0a3975a8758c1f0e1bce167f", "filename": "src/test/run-pass/issues/issue-52169.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b16d8eb3f2e42a720d9da5aff7119b2fd2b4805b/src%2Ftest%2Frun-pass%2Fissues%2Fissue-52169.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b16d8eb3f2e42a720d9da5aff7119b2fd2b4805b/src%2Ftest%2Frun-pass%2Fissues%2Fissue-52169.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-52169.rs?ref=b16d8eb3f2e42a720d9da5aff7119b2fd2b4805b", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // run-pass\n-#![feature(macro_literal_matcher)]\n \n macro_rules! a {\n     ($i:literal) => { \"right\" };"}, {"sha": "de268e3388a5e34440cf789f525e7fd587baa850", "filename": "src/test/run-pass/macros/macro-literal.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b16d8eb3f2e42a720d9da5aff7119b2fd2b4805b/src%2Ftest%2Frun-pass%2Fmacros%2Fmacro-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b16d8eb3f2e42a720d9da5aff7119b2fd2b4805b/src%2Ftest%2Frun-pass%2Fmacros%2Fmacro-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacros%2Fmacro-literal.rs?ref=b16d8eb3f2e42a720d9da5aff7119b2fd2b4805b", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // run-pass\n-#![feature(macro_literal_matcher)]\n \n macro_rules! mtester {\n     ($l:literal) => {"}, {"sha": "db5cca193ab4eb1dbcba2ab9dcb6434bdb3420a0", "filename": "src/test/ui/feature-gates/feature-gate-macro-literal-matcher.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6c2513c0d38c8690ef0d2f9d024fafa2391671db/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-macro-literal-matcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c2513c0d38c8690ef0d2f9d024fafa2391671db/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-macro-literal-matcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-macro-literal-matcher.rs?ref=6c2513c0d38c8690ef0d2f9d024fafa2391671db", "patch": "@@ -1,19 +0,0 @@\n-// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Test that the :lifetime macro fragment cannot be used when macro_lifetime_matcher\n-// feature gate is not used.\n-\n-macro_rules! m { ($lt:literal) => {} }\n-//~^ ERROR :literal fragment specifier is experimental and subject to change\n-\n-fn main() {\n-    m!(\"some string literal\");\n-}"}, {"sha": "f714b916966a14f3dba755d939e408169d263a6d", "filename": "src/test/ui/feature-gates/feature-gate-macro-literal-matcher.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6c2513c0d38c8690ef0d2f9d024fafa2391671db/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-macro-literal-matcher.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c2513c0d38c8690ef0d2f9d024fafa2391671db/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-macro-literal-matcher.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-macro-literal-matcher.stderr?ref=6c2513c0d38c8690ef0d2f9d024fafa2391671db", "patch": "@@ -1,11 +0,0 @@\n-error[E0658]: :literal fragment specifier is experimental and subject to change (see issue #35625)\n-  --> $DIR/feature-gate-macro-literal-matcher.rs:14:19\n-   |\n-LL | macro_rules! m { ($lt:literal) => {} }\n-   |                   ^^^^^^^^^^^\n-   |\n-   = help: add #![feature(macro_literal_matcher)] to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}]}