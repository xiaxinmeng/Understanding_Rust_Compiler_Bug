{"sha": "50d17df649dd8ec356e69013b609a12be50cc51f", "node_id": "C_kwDOAAsO6NoAKDUwZDE3ZGY2NDlkZDhlYzM1NmU2OTAxM2I2MDlhMTJiZTUwY2M1MWY", "commit": {"author": {"name": "S\u00e9bastien Marie", "email": "semarie@online.fr", "date": "2021-12-19T08:18:42Z"}, "committer": {"name": "S\u00e9bastien Marie", "email": "semarie@online.fr", "date": "2021-12-19T08:18:42Z"}, "message": "add OpenBSD platform-support page", "tree": {"sha": "ecfc3e1668427f55c7284876047a3384acd3c023", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ecfc3e1668427f55c7284876047a3384acd3c023"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50d17df649dd8ec356e69013b609a12be50cc51f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50d17df649dd8ec356e69013b609a12be50cc51f", "html_url": "https://github.com/rust-lang/rust/commit/50d17df649dd8ec356e69013b609a12be50cc51f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50d17df649dd8ec356e69013b609a12be50cc51f/comments", "author": {"login": "semarie", "id": 8948701, "node_id": "MDQ6VXNlcjg5NDg3MDE=", "avatar_url": "https://avatars.githubusercontent.com/u/8948701?v=4", "gravatar_id": "", "url": "https://api.github.com/users/semarie", "html_url": "https://github.com/semarie", "followers_url": "https://api.github.com/users/semarie/followers", "following_url": "https://api.github.com/users/semarie/following{/other_user}", "gists_url": "https://api.github.com/users/semarie/gists{/gist_id}", "starred_url": "https://api.github.com/users/semarie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/semarie/subscriptions", "organizations_url": "https://api.github.com/users/semarie/orgs", "repos_url": "https://api.github.com/users/semarie/repos", "events_url": "https://api.github.com/users/semarie/events{/privacy}", "received_events_url": "https://api.github.com/users/semarie/received_events", "type": "User", "site_admin": false}, "committer": {"login": "semarie", "id": 8948701, "node_id": "MDQ6VXNlcjg5NDg3MDE=", "avatar_url": "https://avatars.githubusercontent.com/u/8948701?v=4", "gravatar_id": "", "url": "https://api.github.com/users/semarie", "html_url": "https://github.com/semarie", "followers_url": "https://api.github.com/users/semarie/followers", "following_url": "https://api.github.com/users/semarie/following{/other_user}", "gists_url": "https://api.github.com/users/semarie/gists{/gist_id}", "starred_url": "https://api.github.com/users/semarie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/semarie/subscriptions", "organizations_url": "https://api.github.com/users/semarie/orgs", "repos_url": "https://api.github.com/users/semarie/repos", "events_url": "https://api.github.com/users/semarie/events{/privacy}", "received_events_url": "https://api.github.com/users/semarie/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df2f45c1d30615c930b7aa76bb9efbeea3909703", "url": "https://api.github.com/repos/rust-lang/rust/commits/df2f45c1d30615c930b7aa76bb9efbeea3909703", "html_url": "https://github.com/rust-lang/rust/commit/df2f45c1d30615c930b7aa76bb9efbeea3909703"}], "stats": {"total": 64, "additions": 60, "deletions": 4}, "files": [{"sha": "70b19ef9d9ff2356f0ab02bed74baa05989adfb2", "filename": "src/doc/rustc/src/platform-support.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/50d17df649dd8ec356e69013b609a12be50cc51f/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "raw_url": "https://github.com/rust-lang/rust/raw/50d17df649dd8ec356e69013b609a12be50cc51f/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md?ref=50d17df649dd8ec356e69013b609a12be50cc51f", "patch": "@@ -208,7 +208,7 @@ target | std | host | notes\n `aarch64-unknown-uefi` | * |  | ARM64 UEFI\n `aarch64-unknown-linux-gnu_ilp32` | \u2713 | \u2713 | ARM64 Linux (ILP32 ABI)\n `aarch64-unknown-netbsd` | \u2713 | \u2713 |\n-`aarch64-unknown-openbsd` | \u2713 | \u2713 | ARM64 OpenBSD\n+[`aarch64-unknown-openbsd`](platform-support/openbsd.md) | \u2713 | \u2713 | ARM64 OpenBSD\n `aarch64-unknown-redox` | ? |  | ARM64 Redox OS\n `aarch64-uwp-windows-msvc` | ? |  |\n `aarch64-wrs-vxworks` | ? |  |\n@@ -237,7 +237,7 @@ target | std | host | notes\n `i686-pc-windows-msvc` | \u2713 |  | 32-bit Windows XP support\n `i686-unknown-haiku` | \u2713 | \u2713 | 32-bit Haiku\n `i686-unknown-netbsd` | \u2713 | \u2713 | NetBSD/i386 with SSE2\n-`i686-unknown-openbsd` | \u2713 | \u2713 | 32-bit OpenBSD\n+[`i686-unknown-openbsd`](platform-support/openbsd.md) | \u2713 | \u2713 | 32-bit OpenBSD\n `i686-unknown-uefi` | * |  | 32-bit UEFI\n `i686-uwp-windows-gnu` | ? |  |\n `i686-uwp-windows-msvc` | ? |  |\n@@ -272,7 +272,7 @@ target | std | host | notes\n `s390x-unknown-linux-musl` |  |  | S390x Linux (kernel 2.6.32, MUSL)\n `sparc-unknown-linux-gnu` | \u2713 |  | 32-bit SPARC Linux\n `sparc64-unknown-netbsd` | \u2713 | \u2713 | NetBSD/sparc64\n-`sparc64-unknown-openbsd` | ? |  |\n+[`sparc64-unknown-openbsd`](platform-support/openbsd.md) | \u2713 | \u2713 | OpenBSD/sparc64\n `thumbv4t-none-eabi` | * |  | ARMv4T T32\n `thumbv7a-pc-windows-msvc` | ? |  |\n `thumbv7a-uwp-windows-msvc` | \u2713 |  |\n@@ -289,7 +289,7 @@ target | std | host | notes\n [`x86_64-unknown-none`](platform-support/x86_64-unknown-none.md) | * |  | Freestanding/bare-metal x86_64, softfloat\n `x86_64-unknown-none-hermitkernel` | ? |  | HermitCore kernel\n `x86_64-unknown-none-linuxkernel` | * |  | Linux kernel modules\n-`x86_64-unknown-openbsd` | \u2713 | \u2713 | 64-bit OpenBSD\n+[`x86_64-unknown-openbsd`](platform-support/openbsd.md) | \u2713 | \u2713 | 64-bit OpenBSD\n `x86_64-unknown-uefi` | * |  | 64-bit UEFI\n `x86_64-uwp-windows-gnu` | \u2713 |  |\n `x86_64-uwp-windows-msvc` | \u2713 |  |"}, {"sha": "b2ac776eada487fe5e2d548d00feb3c5672c2811", "filename": "src/doc/rustc/src/platform-support/openbsd.md", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/50d17df649dd8ec356e69013b609a12be50cc51f/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fopenbsd.md", "raw_url": "https://github.com/rust-lang/rust/raw/50d17df649dd8ec356e69013b609a12be50cc51f/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fopenbsd.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fopenbsd.md?ref=50d17df649dd8ec356e69013b609a12be50cc51f", "patch": "@@ -0,0 +1,56 @@\n+# \\*-unknown-openbsd\n+\n+**Tier: 3**\n+\n+[OpenBSD] multi-platform 4.4BSD-based UNIX-like operating system.\n+\n+[OpenBSD]: https://www.openbsd.org/\n+\n+The target names follow this format: `$ARCH-unknown-openbsd`, where `$ARCH` specifies the target processor architecture. The following targets are currently defined:\n+\n+|          Target name           | C++ library | OpenBSD Platform |\n+|--------------------------------|-------------|------------------|\n+| `aarch64-unknown-openbsd`      | libc++      | [64-bit ARM systems](https://www.openbsd.org/arm64.html)  |\n+| `i686-unknown-openbsd`         | libc++      | [Standard PC and clones based on the Intel i386 architecture and compatible processors](https://www.openbsd.org/i386.html) |\n+| `sparc64-unknown-openbsd`      | estdc++     | [Sun UltraSPARC and Fujitsu SPARC64 systems](https://www.openbsd.org/sparc64.html) |\n+| `x86_64-unknown-openbsd`       | libc++      | [AMD64-based systems](https://www.openbsd.org/amd64.html) |\n+\n+Note that all OS versions are *major* even if using X.Y notation (`6.8` and `6.9` are different major versions) and could be binary incompatibles (with breaking changes).\n+\n+\n+## Designated Developers\n+\n+- [@semarie](https://github.com/semarie), `semarie@openbsd.org`\n+- [lang/rust](https://cvsweb.openbsd.org/cgi-bin/cvsweb/ports/lang/rust/Makefile?rev=HEAD&content-type=text/x-cvsweb-markup) maintainer (see MAINTAINER variable)\n+\n+Fallback to ports@openbsd.org, OpenBSD third parties public mailing-list (with openbsd developers readers)\n+\n+\n+## Requirements\n+\n+These targets are natively compiled and could be cross-compiled.\n+C compiler toolchain is required for the purpose of building Rust and functional binaries.\n+\n+## Building\n+\n+The target can be built by enabling it for a `rustc` build.\n+\n+```toml\n+[build]\n+target = [\"$ARCH-unknown-openbsd\"]\n+\n+[target.$ARCH-unknown-openbsd]\n+cc = \"$ARCH-openbsd-cc\"\n+```\n+\n+## Cross-compilation\n+\n+These targets can be cross-compiled, but LLVM might not build out-of-box.\n+\n+## Testing\n+\n+The Rust testsuite could be run natively.\n+\n+## Building Rust programs\n+\n+Rust does not yet ship pre-compiled artifacts for these targets."}]}