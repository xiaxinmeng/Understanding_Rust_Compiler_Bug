{"sha": "dc38e1616a156c5a1216cdd622090719d53cff58", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjMzhlMTYxNmExNTZjNWExMjE2Y2RkNjIyMDkwNzE5ZDUzY2ZmNTg=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-07-24T20:52:57Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-07-24T20:52:57Z"}, "message": "Generalize the `ty::substs` struct so that it can represent\nmultiple lifetime parameters, and not just one. Also add an option\nfor erasing lifetimes, which makes trans code somewhat simpler\nand cleaner.", "tree": {"sha": "c113ec447d654d978724e7256ddbf7f3bca85da0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c113ec447d654d978724e7256ddbf7f3bca85da0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc38e1616a156c5a1216cdd622090719d53cff58", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc38e1616a156c5a1216cdd622090719d53cff58", "html_url": "https://github.com/rust-lang/rust/commit/dc38e1616a156c5a1216cdd622090719d53cff58", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc38e1616a156c5a1216cdd622090719d53cff58/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51028532d790db476b102ebdda40bb9b1a7f8106", "url": "https://api.github.com/repos/rust-lang/rust/commits/51028532d790db476b102ebdda40bb9b1a7f8106", "html_url": "https://github.com/rust-lang/rust/commit/51028532d790db476b102ebdda40bb9b1a7f8106"}], "stats": {"total": 483, "additions": 304, "deletions": 179}, "files": [{"sha": "b76743fc468f8145fdd58f5ff1532e01b92770c5", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/dc38e1616a156c5a1216cdd622090719d53cff58/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc38e1616a156c5a1216cdd622090719d53cff58/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=dc38e1616a156c5a1216cdd622090719d53cff58", "patch": "@@ -186,7 +186,7 @@ fn parse_trait_store(st: &mut PState) -> ty::TraitStore {\n }\n \n fn parse_substs(st: &mut PState, conv: conv_did) -> ty::substs {\n-    let self_r = parse_opt(st, |st| parse_region(st) );\n+    let regions = parse_region_substs(st, |x,y| conv(x,y));\n \n     let self_ty = parse_opt(st, |st| parse_ty(st, |x,y| conv(x,y)) );\n \n@@ -196,12 +196,28 @@ fn parse_substs(st: &mut PState, conv: conv_did) -> ty::substs {\n     st.pos = st.pos + 1u;\n \n     return ty::substs {\n-        self_r: self_r,\n+        regions: regions,\n         self_ty: self_ty,\n         tps: params\n     };\n }\n \n+fn parse_region_substs(st: &mut PState, conv: conv_did) -> ty::RegionSubsts {\n+    match next(st) {\n+        'e' => ty::ErasedRegions,\n+        'n' => {\n+            let mut regions = opt_vec::Empty;\n+            while peek(st) != '.' {\n+                let r = parse_region(st);\n+                regions.push(r);\n+            }\n+            assert_eq!(next(st), '.');\n+            ty::NonerasedRegions(regions)\n+        }\n+        _ => fail!(\"parse_bound_region: bad input\")\n+    }\n+}\n+\n fn parse_bound_region(st: &mut PState) -> ty::bound_region {\n     match next(st) {\n       's' => ty::br_self,"}, {"sha": "a1cb1bf68486e4bce2d3babc6d3eff47b77606ac", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/dc38e1616a156c5a1216cdd622090719d53cff58/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc38e1616a156c5a1216cdd622090719d53cff58/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=dc38e1616a156c5a1216cdd622090719d53cff58", "patch": "@@ -120,13 +120,28 @@ fn enc_opt<T>(w: @io::Writer, t: Option<T>, enc_f: &fn(T)) {\n }\n \n fn enc_substs(w: @io::Writer, cx: @ctxt, substs: &ty::substs) {\n-    do enc_opt(w, substs.self_r) |r| { enc_region(w, cx, r) }\n+    enc_region_substs(w, cx, &substs.regions);\n     do enc_opt(w, substs.self_ty) |t| { enc_ty(w, cx, t) }\n     w.write_char('[');\n     for substs.tps.iter().advance |t| { enc_ty(w, cx, *t); }\n     w.write_char(']');\n }\n \n+fn enc_region_substs(w: @io::Writer, cx: @ctxt, substs: &ty::RegionSubsts) {\n+    match *substs {\n+        ty::ErasedRegions => {\n+            w.write_char('e');\n+        }\n+        ty::NonerasedRegions(ref regions) => {\n+            w.write_char('n');\n+            for regions.iter().advance |&r| {\n+                enc_region(w, cx, r);\n+            }\n+            w.write_char('.');\n+        }\n+    }\n+}\n+\n fn enc_region(w: @io::Writer, cx: @ctxt, r: ty::Region) {\n     match r {\n       ty::re_bound(br) => {"}, {"sha": "99aae34911b3b84bc2d8e231633f4cfcc6569970", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dc38e1616a156c5a1216cdd622090719d53cff58/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc38e1616a156c5a1216cdd622090719d53cff58/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=dc38e1616a156c5a1216cdd622090719d53cff58", "patch": "@@ -19,6 +19,7 @@ use util::ppaux::UserString;\n use syntax::ast::*;\n use syntax::attr;\n use syntax::codemap::span;\n+use syntax::opt_vec;\n use syntax::print::pprust::expr_to_str;\n use syntax::{visit, ast_util};\n \n@@ -83,7 +84,7 @@ fn check_struct_safe_for_destructor(cx: Context,\n     let struct_tpt = ty::lookup_item_type(cx.tcx, struct_did);\n     if !struct_tpt.generics.has_type_params() {\n         let struct_ty = ty::mk_struct(cx.tcx, struct_did, ty::substs {\n-            self_r: None,\n+            regions: ty::NonerasedRegions(opt_vec::Empty),\n             self_ty: None,\n             tps: ~[]\n         });"}, {"sha": "7b2b130bc68ec06f4c3410eebea9de02667a65ad", "filename": "src/librustc/middle/subst.rs", "status": "modified", "additions": 32, "deletions": 9, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/dc38e1616a156c5a1216cdd622090719d53cff58/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc38e1616a156c5a1216cdd622090719d53cff58/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fsubst.rs?ref=dc38e1616a156c5a1216cdd622090719d53cff58", "patch": "@@ -12,6 +12,7 @@\n \n \n use middle::ty;\n+use syntax::opt_vec::OptVec;\n use util::ppaux::Repr;\n \n ///////////////////////////////////////////////////////////////////////////\n@@ -79,6 +80,12 @@ impl<T:Subst> Subst for ~[T] {\n     }\n }\n \n+impl<T:Subst> Subst for OptVec<T> {\n+    fn subst(&self, tcx: ty::ctxt, substs: &ty::substs) -> OptVec<T> {\n+        self.map(|t| t.subst(tcx, substs))\n+    }\n+}\n+\n impl<T:Subst + 'static> Subst for @T {\n     fn subst(&self, tcx: ty::ctxt, substs: &ty::substs) -> @T {\n         match self {\n@@ -105,13 +112,26 @@ impl Subst for ty::TraitRef {\n impl Subst for ty::substs {\n     fn subst(&self, tcx: ty::ctxt, substs: &ty::substs) -> ty::substs {\n         ty::substs {\n-            self_r: self.self_r.subst(tcx, substs),\n+            regions: self.regions.subst(tcx, substs),\n             self_ty: self.self_ty.map(|typ| typ.subst(tcx, substs)),\n             tps: self.tps.map(|typ| typ.subst(tcx, substs))\n         }\n     }\n }\n \n+impl Subst for ty::RegionSubsts {\n+    fn subst(&self, tcx: ty::ctxt, substs: &ty::substs) -> ty::RegionSubsts {\n+        match *self {\n+            ty::ErasedRegions => {\n+                ty::ErasedRegions\n+            }\n+            ty::NonerasedRegions(ref regions) => {\n+                ty::NonerasedRegions(regions.subst(tcx, substs))\n+            }\n+        }\n+    }\n+}\n+\n impl Subst for ty::BareFnTy {\n     fn subst(&self, tcx: ty::ctxt, substs: &ty::substs) -> ty::BareFnTy {\n         ty::fold_bare_fn_ty(self, |t| t.subst(tcx, substs))\n@@ -158,15 +178,18 @@ impl Subst for ty::Region {\n         // will most likely disappear.\n         match self {\n             &ty::re_bound(ty::br_self) => {\n-                match substs.self_r {\n-                    None => {\n-                        tcx.sess.bug(\n-                            fmt!(\"ty::Region#subst(): \\\n-                                  Reference to self region when \\\n-                                  given substs with no self region: %s\",\n-                                 substs.repr(tcx)));\n+                match substs.regions {\n+                    ty::ErasedRegions => ty::re_static,\n+                    ty::NonerasedRegions(ref regions) => {\n+                        if regions.len() != 1 {\n+                            tcx.sess.bug(\n+                                fmt!(\"ty::Region#subst(): \\\n+                                      Reference to self region when \\\n+                                      given substs with no self region: %s\",\n+                                     substs.repr(tcx)));\n+                        }\n+                        *regions.get(0)\n                     }\n-                    Some(self_r) => self_r\n                 }\n             }\n             _ => *self"}, {"sha": "d2b075150ff318043607058762a4598e7a7c154a", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dc38e1616a156c5a1216cdd622090719d53cff58/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc38e1616a156c5a1216cdd622090719d53cff58/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=dc38e1616a156c5a1216cdd622090719d53cff58", "patch": "@@ -517,7 +517,8 @@ pub fn get_res_dtor(ccx: @mut CrateContext,\n             did\n         };\n         assert_eq!(did.crate, ast::local_crate);\n-        let tsubsts = ty::substs { self_r: None, self_ty: None,\n+        let tsubsts = ty::substs {regions: ty::ErasedRegions,\n+                                  self_ty: None,\n                                   tps: /*bad*/ substs.to_owned() };\n         let (val, _) = monomorphize::monomorphic_fn(ccx,\n                                                     did,"}, {"sha": "416c5e3db29d0e2c22678f60f2f5906f16d9e356", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dc38e1616a156c5a1216cdd622090719d53cff58/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc38e1616a156c5a1216cdd622090719d53cff58/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=dc38e1616a156c5a1216cdd622090719d53cff58", "patch": "@@ -284,15 +284,10 @@ pub fn trans_fn_ref_with_vtables(\n     // Polytype of the function item (may have type params)\n     let fn_tpt = ty::lookup_item_type(tcx, def_id);\n \n-    // For simplicity, we want to use the Subst trait when composing\n-    // substitutions for default methods.  The subst trait does\n-    // substitutions with regions, though, so we put a dummy self\n-    // region parameter in to keep it from failing. This is a hack.\n-    let substs = ty::substs { self_r: Some(ty::re_empty),\n+    let substs = ty::substs { regions: ty::ErasedRegions,\n                               self_ty: None,\n                               tps: /*bad*/ type_params.to_owned() };\n \n-\n     // We need to do a bunch of special handling for default methods.\n     // We need to modify the def_id and our substs in order to monomorphize\n     // the function."}, {"sha": "bab0f41477c33cc738b6c837ddb4b99efc7c70f9", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc38e1616a156c5a1216cdd622090719d53cff58/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc38e1616a156c5a1216cdd622090719d53cff58/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=dc38e1616a156c5a1216cdd622090719d53cff58", "patch": "@@ -1114,7 +1114,7 @@ pub fn find_vtable(tcx: ty::ctxt,\n \n pub fn dummy_substs(tps: ~[ty::t]) -> ty::substs {\n     substs {\n-        self_r: Some(ty::re_bound(ty::br_self)),\n+        regions: ty::ErasedRegions,\n         self_ty: None,\n         tps: tps\n     }"}, {"sha": "b743f2e9401575cc30d353298873433a6229293b", "filename": "src/librustc/middle/trans/type_of.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc38e1616a156c5a1216cdd622090719d53cff58/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc38e1616a156c5a1216cdd622090719d53cff58/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs?ref=dc38e1616a156c5a1216cdd622090719d53cff58", "patch": "@@ -17,6 +17,7 @@ use util::ppaux;\n use middle::trans::type_::Type;\n \n use syntax::ast;\n+use syntax::opt_vec;\n \n pub fn arg_is_indirect(ccx: &CrateContext, arg_ty: &ty::t) -> bool {\n     !ty::type_is_immediate(ccx.tcx, *arg_ty)\n@@ -312,7 +313,8 @@ pub fn llvm_type_name(cx: &CrateContext,\n         a_struct => { \"struct\" }\n         an_enum => { \"enum\" }\n     };\n-    let tstr = ppaux::parameterized(cx.tcx, ty::item_path_str(cx.tcx, did), None, tps);\n+    let tstr = ppaux::parameterized(cx.tcx, ty::item_path_str(cx.tcx, did),\n+                                    &ty::NonerasedRegions(opt_vec::Empty), tps);\n     if did.crate == 0 {\n         fmt!(\"%s.%s\", name, tstr)\n     } else {"}, {"sha": "743d063be245169197521027965a88e86280b2c2", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 60, "deletions": 30, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/dc38e1616a156c5a1216cdd622090719d53cff58/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc38e1616a156c5a1216cdd622090719d53cff58/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=dc38e1616a156c5a1216cdd622090719d53cff58", "patch": "@@ -486,7 +486,15 @@ pub enum bound_region {\n     br_cap_avoid(ast::node_id, @bound_region),\n }\n \n-type opt_region = Option<Region>;\n+/**\n+ * Represents the values to use when substituting lifetime parameters.\n+ * If the value is `ErasedRegions`, then this subst is occurring during\n+ * trans, and all region parameters will be replaced with `ty::re_static`. */\n+#[deriving(Clone, Eq, IterBytes)]\n+pub enum RegionSubsts {\n+    ErasedRegions,\n+    NonerasedRegions(OptVec<ty::Region>)\n+}\n \n /**\n  * The type substs represents the kinds of things that can be substituted to\n@@ -507,9 +515,9 @@ type opt_region = Option<Region>;\n  *   always substituted away to the implementing type for a trait. */\n #[deriving(Clone, Eq, IterBytes)]\n pub struct substs {\n-    self_r: opt_region,\n     self_ty: Option<ty::t>,\n-    tps: ~[t]\n+    tps: ~[t],\n+    regions: RegionSubsts,\n }\n \n mod primitives {\n@@ -948,7 +956,14 @@ fn mk_t(cx: ctxt, st: sty) -> t {\n     fn sflags(substs: &substs) -> uint {\n         let mut f = 0u;\n         for substs.tps.iter().advance |tt| { f |= get(*tt).flags; }\n-        for substs.self_r.iter().advance |r| { f |= rflags(*r) }\n+        match substs.regions {\n+            ErasedRegions => {}\n+            NonerasedRegions(ref regions) => {\n+                for regions.iter().advance |r| {\n+                    f |= rflags(*r)\n+                }\n+            }\n+        }\n         return f;\n     }\n     match &st {\n@@ -1286,7 +1301,7 @@ pub fn fold_bare_fn_ty(fty: &BareFnTy, fldop: &fn(t) -> t) -> BareFnTy {\n \n fn fold_sty(sty: &sty, fldop: &fn(t) -> t) -> sty {\n     fn fold_substs(substs: &substs, fldop: &fn(t) -> t) -> substs {\n-        substs {self_r: substs.self_r,\n+        substs {regions: substs.regions.clone(),\n                 self_ty: substs.self_ty.map(|t| fldop(*t)),\n                 tps: substs.tps.map(|t| fldop(*t))}\n     }\n@@ -1378,8 +1393,15 @@ pub fn fold_regions_and_ty(\n         fldr: &fn(r: Region) -> Region,\n         fldt: &fn(t: t) -> t)\n      -> substs {\n+        let regions = match substs.regions {\n+            ErasedRegions => ErasedRegions,\n+            NonerasedRegions(ref regions) => {\n+                NonerasedRegions(regions.map(|r| fldr(*r)))\n+            }\n+        };\n+\n         substs {\n-            self_r: substs.self_r.map(|r| fldr(*r)),\n+            regions: regions,\n             self_ty: substs.self_ty.map(|t| fldt(*t)),\n             tps: substs.tps.map(|t| fldt(*t))\n         }\n@@ -1478,8 +1500,13 @@ pub fn subst_tps(cx: ctxt, tps: &[t], self_ty_opt: Option<t>, typ: t) -> t {\n }\n \n pub fn substs_is_noop(substs: &substs) -> bool {\n+    let regions_is_noop = match substs.regions {\n+        ErasedRegions => false, // may be used to canonicalize\n+        NonerasedRegions(ref regions) => regions.is_empty()\n+    };\n+\n     substs.tps.len() == 0u &&\n-        substs.self_r.is_none() &&\n+        regions_is_noop &&\n         substs.self_ty.is_none()\n }\n \n@@ -4227,30 +4254,33 @@ pub fn normalize_ty(cx: ctxt, t: t) -> t {\n             })\n         }\n \n-        ty_enum(did, ref r) =>\n-            match (*r).self_r {\n-                Some(_) =>\n-                    // Use re_static since trans doesn't care about regions\n-                    mk_enum(cx, did,\n-                     substs {\n-                        self_r: Some(ty::re_static),\n-                        self_ty: None,\n-                        tps: (*r).tps.clone()\n-                     }),\n-                None =>\n+        ty_enum(did, ref r) => {\n+            match (*r).regions {\n+                NonerasedRegions(_) => {\n+                    // trans doesn't care about regions\n+                    mk_enum(cx, did, substs {regions: ty::ErasedRegions,\n+                                             self_ty: None,\n+                                             tps: (*r).tps.clone()})\n+                }\n+                ErasedRegions => {\n                     t\n-            },\n+                }\n+            }\n+        }\n \n-        ty_struct(did, ref r) =>\n-            match (*r).self_r {\n-              Some(_) =>\n-                // Ditto.\n-                mk_struct(cx, did, substs {self_r: Some(ty::re_static),\n-                                           self_ty: None,\n-                                           tps: (*r).tps.clone()}),\n-              None =>\n-                t\n-            },\n+        ty_struct(did, ref r) => {\n+            match (*r).regions {\n+                NonerasedRegions(_) => {\n+                    // Ditto.\n+                    mk_struct(cx, did, substs {regions: ty::ErasedRegions,\n+                                               self_ty: None,\n+                                               tps: (*r).tps.clone()})\n+                }\n+                ErasedRegions => {\n+                    t\n+                }\n+            }\n+        }\n \n         _ =>\n             t\n@@ -4434,7 +4464,7 @@ pub fn visitor_object_ty(tcx: ctxt) -> Result<(@TraitRef, t), ~str> {\n         Err(s) => { return Err(s); }\n     };\n     let substs = substs {\n-        self_r: None,\n+        regions: ty::NonerasedRegions(opt_vec::Empty),\n         self_ty: None,\n         tps: ~[]\n     };"}, {"sha": "a506142a971b06a9dbf4e211fe656ce8b5fc8d62", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 22, "deletions": 21, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/dc38e1616a156c5a1216cdd622090719d53cff58/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc38e1616a156c5a1216cdd622090719d53cff58/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=dc38e1616a156c5a1216cdd622090719d53cff58", "patch": "@@ -150,26 +150,27 @@ fn ast_path_substs<AC:AstConv,RS:region_scope + Clone + 'static>(\n     // If the type is parameterized by the this region, then replace this\n     // region with the current anon region binding (in other words,\n     // whatever & would get replaced with).\n-    let self_r = match (&decl_generics.region_param, &path.rp) {\n-      (&None, &None) => {\n-        None\n-      }\n-      (&None, &Some(_)) => {\n-        tcx.sess.span_err(\n-            path.span,\n-            fmt!(\"no region bound is allowed on `%s`, \\\n-                  which is not declared as containing region pointers\",\n-                 ty::item_path_str(tcx, def_id)));\n-        None\n-      }\n-      (&Some(_), &None) => {\n-        let res = rscope.anon_region(path.span);\n-        let r = get_region_reporting_err(this.tcx(), path.span, &None, res);\n-        Some(r)\n-      }\n-      (&Some(_), &Some(_)) => {\n-        Some(ast_region_to_region(this, rscope, path.span, &path.rp))\n-      }\n+    let regions = match (&decl_generics.region_param, &path.rp) {\n+        (&None, &None) => {\n+            opt_vec::Empty\n+        }\n+        (&None, &Some(_)) => {\n+            tcx.sess.span_err(\n+                path.span,\n+                fmt!(\"no region bound is allowed on `%s`, \\\n+                      which is not declared as containing region pointers\",\n+                     ty::item_path_str(tcx, def_id)));\n+            opt_vec::Empty\n+        }\n+        (&Some(_), &None) => {\n+            let res = rscope.anon_region(path.span);\n+            let r = get_region_reporting_err(this.tcx(), path.span, &None, res);\n+            opt_vec::with(r)\n+        }\n+        (&Some(_), &Some(_)) => {\n+            opt_vec::with(\n+                ast_region_to_region(this, rscope, path.span, &path.rp))\n+        }\n     };\n \n     // Convert the type parameters supplied by the user.\n@@ -181,7 +182,7 @@ fn ast_path_substs<AC:AstConv,RS:region_scope + Clone + 'static>(\n     }\n     let tps = path.types.map(|a_t| ast_ty_to_ty(this, rscope, a_t));\n \n-    substs {self_r:self_r, self_ty:self_ty, tps:tps}\n+    substs {regions:ty::NonerasedRegions(regions), self_ty:self_ty, tps:tps}\n }\n \n pub fn ast_path_to_substs_and_ty<AC:AstConv,"}, {"sha": "05e400fb8b51ea667749a3ae01fcf7b53a58cda1", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc38e1616a156c5a1216cdd622090719d53cff58/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc38e1616a156c5a1216cdd622090719d53cff58/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=dc38e1616a156c5a1216cdd622090719d53cff58", "patch": "@@ -952,7 +952,7 @@ impl<'self> LookupContext<'self> {\n         // which is equal to the class tps + the method tps.\n         let all_substs = substs {\n             tps: vec::append(candidate.rcvr_substs.tps.clone(), m_substs),\n-            self_r: candidate.rcvr_substs.self_r,\n+            regions: candidate.rcvr_substs.regions.clone(),\n             self_ty: candidate.rcvr_substs.self_ty,\n         };\n "}, {"sha": "a7aef4f0680150dae181cc713365a5b190d1bcc9", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 40, "deletions": 33, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/dc38e1616a156c5a1216cdd622090719d53cff58/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc38e1616a156c5a1216cdd622090719d53cff58/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=dc38e1616a156c5a1216cdd622090719d53cff58", "patch": "@@ -925,10 +925,15 @@ impl FnCtxt {\n     pub fn region_var_if_parameterized(&self,\n                                        rp: Option<ty::region_variance>,\n                                        span: span)\n-                                       -> Option<ty::Region> {\n-        rp.map(\n-            |_| self.infcx().next_region_var(\n-                infer::BoundRegionInTypeOrImpl(span)))\n+                                       -> OptVec<ty::Region> {\n+        match rp {\n+            None => opt_vec::Empty,\n+            Some(_) => {\n+                opt_vec::with(\n+                    self.infcx().next_region_var(\n+                        infer::BoundRegionInTypeOrImpl(span)))\n+            }\n+        }\n     }\n \n     pub fn type_error_message(&self,\n@@ -1111,15 +1116,15 @@ pub fn impl_self_ty(vcx: &VtableContext,\n         (ity.generics.type_param_defs.len(), ity.generics.region_param, ity.ty)\n     };\n \n-    let self_r = if region_param.is_some() {\n-        Some(vcx.infcx.next_region_var(\n+    let regions = ty::NonerasedRegions(if region_param.is_some() {\n+        opt_vec::with(vcx.infcx.next_region_var(\n             infer::BoundRegionInTypeOrImpl(location_info.span)))\n     } else {\n-        None\n-    };\n+        opt_vec::Empty\n+    });\n     let tps = vcx.infcx.next_ty_vars(n_tps);\n \n-    let substs = substs { self_r: self_r, self_ty: None, tps: tps };\n+    let substs = substs {regions: regions, self_ty: None, tps: tps};\n     let substd_ty = ty::subst(tcx, &substs, raw_ty);\n \n     ty_param_substs_and_ty { substs: substs, ty: substd_ty }\n@@ -1986,7 +1991,7 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n                         bound_self_region(region_parameterized);\n \n                     raw_type = ty::mk_struct(tcx, class_id, substs {\n-                        self_r: self_region,\n+                        regions: ty::NonerasedRegions(self_region),\n                         self_ty: None,\n                         tps: ty::ty_params_to_tys(\n                             tcx,\n@@ -2006,11 +2011,11 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n         }\n \n         // Generate the struct type.\n-        let self_region =\n+        let regions =\n             fcx.region_var_if_parameterized(region_parameterized, span);\n         let type_parameters = fcx.infcx().next_ty_vars(type_parameter_count);\n         let substitutions = substs {\n-            self_r: self_region,\n+            regions: ty::NonerasedRegions(regions),\n             self_ty: None,\n             tps: type_parameters\n         };\n@@ -2070,11 +2075,10 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n \n                     type_parameter_count = generics.ty_params.len();\n \n-                    let self_region =\n-                        bound_self_region(region_parameterized);\n+                    let regions = bound_self_region(region_parameterized);\n \n                     raw_type = ty::mk_enum(tcx, enum_id, substs {\n-                        self_r: self_region,\n+                        regions: ty::NonerasedRegions(regions),\n                         self_ty: None,\n                         tps: ty::ty_params_to_tys(\n                             tcx,\n@@ -2094,11 +2098,11 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n         }\n \n         // Generate the enum type.\n-        let self_region =\n+        let regions =\n             fcx.region_var_if_parameterized(region_parameterized, span);\n         let type_parameters = fcx.infcx().next_ty_vars(type_parameter_count);\n         let substitutions = substs {\n-            self_r: self_region,\n+            regions: ty::NonerasedRegions(regions),\n             self_ty: None,\n             tps: type_parameters\n         };\n@@ -3309,22 +3313,23 @@ pub fn instantiate_path(fcx: @mut FnCtxt,\n \n     // determine the region bound, using the value given by the user\n     // (if any) and otherwise using a fresh region variable\n-    let self_r = match pth.rp {\n-      Some(_) => { // user supplied a lifetime parameter...\n-        match tpt.generics.region_param {\n-          None => { // ...but the type is not lifetime parameterized!\n-            fcx.ccx.tcx.sess.span_err\n-                (span, \"this item is not region-parameterized\");\n-            None\n-          }\n-          Some(_) => { // ...and the type is lifetime parameterized, ok.\n-            Some(ast_region_to_region(fcx, fcx, span, &pth.rp))\n-          }\n+    let regions = match pth.rp {\n+        Some(_) => { // user supplied a lifetime parameter...\n+            match tpt.generics.region_param {\n+                None => { // ...but the type is not lifetime parameterized!\n+                    fcx.ccx.tcx.sess.span_err\n+                        (span, \"this item is not region-parameterized\");\n+                    opt_vec::Empty\n+                }\n+                Some(_) => { // ...and the type is lifetime parameterized, ok.\n+                    opt_vec::with(\n+                        ast_region_to_region(fcx, fcx, span, &pth.rp))\n+                }\n+            }\n+        }\n+        None => { // no lifetime parameter supplied, insert default\n+            fcx.region_var_if_parameterized(tpt.generics.region_param, span)\n         }\n-      }\n-      None => { // no lifetime parameter supplied, insert default\n-        fcx.region_var_if_parameterized(tpt.generics.region_param, span)\n-      }\n     };\n \n     // determine values for type parameters, using the values given by\n@@ -3351,7 +3356,9 @@ pub fn instantiate_path(fcx: @mut FnCtxt,\n         pth.types.map(|aty| fcx.to_ty(aty))\n     };\n \n-    let substs = substs { self_r: self_r, self_ty: None, tps: tps };\n+    let substs = substs {regions: ty::NonerasedRegions(regions),\n+                         self_ty: None,\n+                         tps: tps };\n     fcx.write_ty_substs(node_id, tpt.ty, substs);\n \n     debug!(\"<<<\");"}, {"sha": "7fd4257a00616a40a7c575b6a32e955a09bfb000", "filename": "src/librustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc38e1616a156c5a1216cdd622090719d53cff58/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc38e1616a156c5a1216cdd622090719d53cff58/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=dc38e1616a156c5a1216cdd622090719d53cff58", "patch": "@@ -590,7 +590,7 @@ pub fn early_resolve_expr(ex: @ast::expr,\n                               def_id: target_def_id,\n                               substs: ty::substs {\n                                   tps: target_substs.tps.clone(),\n-                                  self_r: target_substs.self_r,\n+                                  regions: target_substs.regions.clone(),\n                                   self_ty: Some(mt.ty)\n                               }\n                           };"}, {"sha": "ca3710e19a4c2bdac2cd7b414125b4c650027d6a", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/dc38e1616a156c5a1216cdd622090719d53cff58/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc38e1616a156c5a1216cdd622090719d53cff58/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=dc38e1616a156c5a1216cdd622090719d53cff58", "patch": "@@ -45,6 +45,7 @@ use syntax::ast_map;\n use syntax::ast_util::{def_id_of_def, local_def};\n use syntax::codemap::{span, dummy_sp};\n use syntax::parse;\n+use syntax::opt_vec;\n use syntax::visit::{default_simple_visitor, default_visitor};\n use syntax::visit::{mk_simple_visitor, mk_vt, visit_crate, visit_item};\n use syntax::visit::{Visitor, SimpleVisitor};\n@@ -436,30 +437,30 @@ impl CoherenceChecker {\n     pub fn universally_quantify_polytype(&self,\n                                          polytype: ty_param_bounds_and_ty)\n                                          -> UniversalQuantificationResult {\n-        let self_region =\n-            polytype.generics.region_param.map(\n-                |_| self.inference_context.next_region_var(\n-                    infer::BoundRegionInCoherence));\n+        let regions = match polytype.generics.region_param {\n+            None => opt_vec::Empty,\n+            Some(r) => {\n+                opt_vec::with(\n+                    self.inference_context.next_region_var(\n+                        infer::BoundRegionInCoherence))\n+            }\n+        };\n \n         let bounds_count = polytype.generics.type_param_defs.len();\n         let type_parameters = self.inference_context.next_ty_vars(bounds_count);\n \n         let substitutions = substs {\n-            self_r: self_region,\n+            regions: ty::NonerasedRegions(regions),\n             self_ty: None,\n             tps: type_parameters\n         };\n         let monotype = subst(self.crate_context.tcx,\n                              &substitutions,\n                              polytype.ty);\n \n-        // Get our type parameters back.\n-        let substs { self_r: _, self_ty: _, tps: type_parameters } =\n-            substitutions;\n-\n         UniversalQuantificationResult {\n             monotype: monotype,\n-            type_variables: type_parameters,\n+            type_variables: substitutions.tps,\n             type_param_defs: polytype.generics.type_param_defs\n         }\n     }\n@@ -845,7 +846,7 @@ pub fn make_substs_for_receiver_types(tcx: ty::ctxt,\n     });\n \n     return ty::substs {\n-        self_r: trait_ref.substs.self_r,\n+        regions: trait_ref.substs.regions.clone(),\n         self_ty: trait_ref.substs.self_ty,\n         tps: combined_tps\n     };"}, {"sha": "98b4de9d719a820a96b4001aef597dc751994797", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dc38e1616a156c5a1216cdd622090719d53cff58/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc38e1616a156c5a1216cdd622090719d53cff58/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=dc38e1616a156c5a1216cdd622090719d53cff58", "patch": "@@ -301,7 +301,7 @@ pub fn ensure_trait_methods(ccx: &CrateCtxt,\n         //     Self => D'\n         //     D,E,F => E',F',G'\n         let substs = substs {\n-            self_r: None,\n+            regions: ty::NonerasedRegions(opt_vec::Empty),\n             self_ty: Some(self_param),\n             tps: non_shifted_trait_tps + shifted_method_tps\n         };\n@@ -622,7 +622,7 @@ pub fn compare_impl_method(tcx: ty::ctxt,\n         let trait_tps = trait_substs.tps.map(\n             |t| replace_bound_self(tcx, *t, dummy_self_r));\n         let substs = substs {\n-            self_r: Some(dummy_self_r),\n+            regions: ty::NonerasedRegions(opt_vec::with(dummy_self_r)),\n             self_ty: Some(self_ty),\n             tps: vec::append(trait_tps, dummy_tps)\n         };\n@@ -1268,6 +1268,8 @@ pub fn mk_item_substs(ccx: &CrateCtxt,\n         i += 1u;\n         t\n     });\n-    let self_r = rscope::bound_self_region(rp);\n-    (ty_generics, substs {self_r: self_r, self_ty: self_ty, tps: params})\n+    let regions = rscope::bound_self_region(rp);\n+    (ty_generics, substs {regions: ty::NonerasedRegions(regions),\n+                          self_ty: self_ty,\n+                          tps: params})\n }"}, {"sha": "b1492cac16e730213de27e1178a3a53e9da0f287", "filename": "src/librustc/middle/typeck/infer/combine.rs", "status": "modified", "additions": 50, "deletions": 39, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/dc38e1616a156c5a1216cdd622090719d53cff58/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc38e1616a156c5a1216cdd622090719d53cff58/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs?ref=dc38e1616a156c5a1216cdd622090719d53cff58", "patch": "@@ -197,56 +197,67 @@ pub fn super_substs<C:Combine>(\n     this: &C, generics: &ty::Generics,\n     a: &ty::substs, b: &ty::substs) -> cres<ty::substs> {\n \n-    fn relate_region_param<C:Combine>(\n+    fn relate_region_params<C:Combine>(\n         this: &C,\n         generics: &ty::Generics,\n-        a: Option<ty::Region>,\n-        b: Option<ty::Region>)\n-        -> cres<Option<ty::Region>>\n+        a: &ty::RegionSubsts,\n+        b: &ty::RegionSubsts)\n+        -> cres<ty::RegionSubsts>\n     {\n-        match (&generics.region_param, &a, &b) {\n-          (&None, &None, &None) => {\n-            Ok(None)\n-          }\n-          (&Some(ty::rv_invariant), &Some(a), &Some(b)) => {\n-            do eq_regions(this, a, b).then {\n-                Ok(Some(a))\n-            }\n-          }\n-          (&Some(ty::rv_covariant), &Some(a), &Some(b)) => {\n-            do this.regions(a, b).chain |r| {\n-                Ok(Some(r))\n+        match (a, b) {\n+            (&ty::ErasedRegions, _) |\n+            (_, &ty::ErasedRegions) => {\n+                Ok(ty::ErasedRegions)\n             }\n-          }\n-          (&Some(ty::rv_contravariant), &Some(a), &Some(b)) => {\n-            do this.contraregions(a, b).chain |r| {\n-                Ok(Some(r))\n+\n+            (&ty::NonerasedRegions(ref a_rs),\n+             &ty::NonerasedRegions(ref b_rs)) => {\n+                match generics.region_param {\n+                    None => {\n+                        assert!(a_rs.is_empty());\n+                        assert!(b_rs.is_empty());\n+                        Ok(ty::NonerasedRegions(opt_vec::Empty))\n+                    }\n+\n+                    Some(variance) => {\n+                        assert_eq!(a_rs.len(), 1);\n+                        assert_eq!(b_rs.len(), 1);\n+                        let a_r = *a_rs.get(0);\n+                        let b_r = *b_rs.get(0);\n+\n+                        match variance {\n+                            ty::rv_invariant => {\n+                                do eq_regions(this, a_r, b_r).then {\n+                                    Ok(ty::NonerasedRegions(opt_vec::with(a_r)))\n+                                }\n+                            }\n+\n+                            ty::rv_covariant => {\n+                                do this.regions(a_r, b_r).chain |r| {\n+                                    Ok(ty::NonerasedRegions(opt_vec::with(r)))\n+                                }\n+                            }\n+\n+                            ty::rv_contravariant => {\n+                                do this.contraregions(a_r, b_r).chain |r| {\n+                                    Ok(ty::NonerasedRegions(opt_vec::with(r)))\n+                                }\n+                            }\n+                        }\n+                    }\n+                }\n             }\n-          }\n-          (_, _, _) => {\n-            // If these two substitutions are for the same type (and\n-            // they should be), then the type should either\n-            // consistently have a region parameter or not have a\n-            // region parameter, and that should match with the\n-            // polytype.\n-            this.infcx().tcx.sess.bug(\n-                fmt!(\"substitution a had opt_region %s and \\\n-                      b had opt_region %s with variance %?\",\n-                      a.inf_str(this.infcx()),\n-                      b.inf_str(this.infcx()),\n-                     generics.region_param));\n-          }\n         }\n     }\n \n     do this.tps(a.tps, b.tps).chain |tps| {\n         do this.self_tys(a.self_ty, b.self_ty).chain |self_ty| {\n-            do relate_region_param(this,\n-                                   generics,\n-                                   a.self_r,\n-                                   b.self_r).chain |self_r| {\n+            do relate_region_params(this,\n+                                    generics,\n+                                    &a.regions,\n+                                    &b.regions).chain |regions| {\n                 Ok(substs {\n-                    self_r: self_r,\n+                    regions: regions,\n                     self_ty: self_ty,\n                     tps: tps.clone()\n                 })"}, {"sha": "94d30fd9a87ac39c7d96683d5d1d693f0132863e", "filename": "src/librustc/middle/typeck/rscope.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dc38e1616a156c5a1216cdd622090719d53cff58/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc38e1616a156c5a1216cdd622090719d53cff58/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs?ref=dc38e1616a156c5a1216cdd622090719d53cff58", "patch": "@@ -260,10 +260,10 @@ impl region_scope for type_rscope {\n }\n \n pub fn bound_self_region(rp: Option<ty::region_variance>)\n-                      -> Option<ty::Region> {\n+                      -> OptVec<ty::Region> {\n     match rp {\n-      Some(_) => Some(ty::re_bound(ty::br_self)),\n-      None => None\n+      Some(_) => opt_vec::with(ty::re_bound(ty::br_self)),\n+      None => opt_vec::Empty\n     }\n }\n "}, {"sha": "6d74068401b2aee518a97478abdb1a0031da405f", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 34, "deletions": 13, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/dc38e1616a156c5a1216cdd622090719d53cff58/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc38e1616a156c5a1216cdd622090719d53cff58/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=dc38e1616a156c5a1216cdd622090719d53cff58", "patch": "@@ -30,6 +30,8 @@ use syntax::codemap::span;\n use syntax::parse::token;\n use syntax::print::pprust;\n use syntax::{ast, ast_util};\n+use syntax::opt_vec;\n+use syntax::opt_vec::OptVec;\n \n /// Produces a string suitable for debugging output.\n pub trait Repr {\n@@ -451,12 +453,12 @@ pub fn ty_to_str(cx: ctxt, typ: t) -> ~str {\n       ty_enum(did, ref substs) | ty_struct(did, ref substs) => {\n         let path = ty::item_path(cx, did);\n         let base = ast_map::path_to_str(path, cx.sess.intr());\n-        parameterized(cx, base, substs.self_r, substs.tps)\n+        parameterized(cx, base, &substs.regions, substs.tps)\n       }\n       ty_trait(did, ref substs, s, mutbl, ref bounds) => {\n         let path = ty::item_path(cx, did);\n         let base = ast_map::path_to_str(path, cx.sess.intr());\n-        let ty = parameterized(cx, base, substs.self_r, substs.tps);\n+        let ty = parameterized(cx, base, &substs.regions, substs.tps);\n         let bound_sep = if bounds.is_empty() { \"\" } else { \":\" };\n         let bound_str = bounds.repr(cx);\n         fmt!(\"%s%s%s%s%s\", trait_store_to_str(cx, s), mutability_to_str(mutbl), ty,\n@@ -475,16 +477,18 @@ pub fn ty_to_str(cx: ctxt, typ: t) -> ~str {\n \n pub fn parameterized(cx: ctxt,\n                      base: &str,\n-                     self_r: Option<ty::Region>,\n+                     regions: &ty::RegionSubsts,\n                      tps: &[ty::t]) -> ~str {\n \n     let mut strs = ~[];\n-    match self_r {\n-        None => (),\n-        Some(r) => {\n-            strs.push(region_to_str(cx, \"\", false, r))\n+    match *regions {\n+        ty::ErasedRegions => { }\n+        ty::NonerasedRegions(ref regions) => {\n+            for regions.iter().advance |&r| {\n+                strs.push(region_to_str(cx, \"\", false, r))\n+            }\n         }\n-    };\n+    }\n \n     for tps.iter().advance |t| {\n         strs.push(ty_to_str(cx, *t))\n@@ -534,6 +538,15 @@ impl<'self, T:Repr> Repr for &'self [T] {\n     }\n }\n \n+impl<T:Repr> Repr for OptVec<T> {\n+    fn repr(&self, tcx: ctxt) -> ~str {\n+        match *self {\n+            opt_vec::Empty => ~\"[]\",\n+            opt_vec::Vec(ref v) => repr_vec(tcx, *v)\n+        }\n+    }\n+}\n+\n // This is necessary to handle types like Option<~[T]>, for which\n // autoderef cannot convert the &[T] handler\n impl<T:Repr> Repr for ~[T] {\n@@ -557,13 +570,22 @@ impl Repr for ty::t {\n \n impl Repr for ty::substs {\n     fn repr(&self, tcx: ctxt) -> ~str {\n-        fmt!(\"substs(self_r=%s, self_ty=%s, tps=%s)\",\n-             self.self_r.repr(tcx),\n+        fmt!(\"substs(regions=%s, self_ty=%s, tps=%s)\",\n+             self.regions.repr(tcx),\n              self.self_ty.repr(tcx),\n              self.tps.repr(tcx))\n     }\n }\n \n+impl Repr for ty::RegionSubsts {\n+    fn repr(&self, tcx: ctxt) -> ~str {\n+        match *self {\n+            ty::ErasedRegions => ~\"erased\",\n+            ty::NonerasedRegions(ref regions) => regions.repr(tcx)\n+        }\n+    }\n+}\n+\n impl Repr for ty::ParamBounds {\n     fn repr(&self, tcx: ctxt) -> ~str {\n         let mut res = ~[];\n@@ -832,10 +854,9 @@ impl UserString for ty::TraitRef {\n         if tcx.sess.verbose() && self.substs.self_ty.is_some() {\n             let mut all_tps = self.substs.tps.clone();\n             for self.substs.self_ty.iter().advance |&t| { all_tps.push(t); }\n-            parameterized(tcx, base, self.substs.self_r, all_tps)\n+            parameterized(tcx, base, &self.substs.regions, all_tps)\n         } else {\n-            parameterized(tcx, base, self.substs.self_r,\n-                          self.substs.tps)\n+            parameterized(tcx, base, &self.substs.regions, self.substs.tps)\n         }\n     }\n }"}, {"sha": "10603751a06d119e434372385b86ab8879104802", "filename": "src/libsyntax/opt_vec.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dc38e1616a156c5a1216cdd622090719d53cff58/src%2Flibsyntax%2Fopt_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc38e1616a156c5a1216cdd622090719d53cff58/src%2Flibsyntax%2Fopt_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fopt_vec.rs?ref=dc38e1616a156c5a1216cdd622090719d53cff58", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n /*!\n- *\n  * Defines a type OptVec<T> that can be used in place of ~[T].\n  * OptVec avoids the need for allocation for empty vectors.\n  * OptVec implements the iterable interface as well as"}]}