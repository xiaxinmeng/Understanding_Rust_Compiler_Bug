{"sha": "6e6a4b1957e2407563f3c9005504f95138ffe28f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlNmE0YjE5NTdlMjQwNzU2M2YzYzkwMDU1MDRmOTUxMzhmZmUyOGY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-21T12:33:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-21T12:33:19Z"}, "message": "Auto merge of #50265 - japaric:sz, r=alexcrichton\n\nstabilize opt-level={s,z}\n\ncloses #35784\ncloses #47651\n\n### Rationale\n\nSince the lastest LLVM upgrade rustc / LLVM does more agressive loop unrolling. This results in increased binary size of embedded / no_std programs: a hundreds of bytes increase, or about a 7x increase, in the case of the smallest Cortex-M binary cf. #49260.\n\nAs we are shooting for embedded Rust on stable it would be great to also provide a way to optimize for size (which is pretty important for embedded applications that target resource constrained devices) on stable.\n\nAlso this has been baking in nightly for a long time.\n\nr? @alexcrichton which team has to sign off this?", "tree": {"sha": "6500f355613acd41371ba548e9dfa8e30569600c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6500f355613acd41371ba548e9dfa8e30569600c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e6a4b1957e2407563f3c9005504f95138ffe28f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e6a4b1957e2407563f3c9005504f95138ffe28f", "html_url": "https://github.com/rust-lang/rust/commit/6e6a4b1957e2407563f3c9005504f95138ffe28f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e6a4b1957e2407563f3c9005504f95138ffe28f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21b536704574061cebe431582116b6f91ae5b983", "url": "https://api.github.com/repos/rust-lang/rust/commits/21b536704574061cebe431582116b6f91ae5b983", "html_url": "https://github.com/rust-lang/rust/commit/21b536704574061cebe431582116b6f91ae5b983"}, {"sha": "2b09d7cc6455715205e08fedf16d382f49e82152", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b09d7cc6455715205e08fedf16d382f49e82152", "html_url": "https://github.com/rust-lang/rust/commit/2b09d7cc6455715205e08fedf16d382f49e82152"}], "stats": {"total": 30, "additions": 9, "deletions": 21}, "files": [{"sha": "e0c0fdd2a01fe1fdd271045922da4a2e7a31d347", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 9, "deletions": 21, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6e6a4b1957e2407563f3c9005504f95138ffe28f/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e6a4b1957e2407563f3c9005504f95138ffe28f/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=6e6a4b1957e2407563f3c9005504f95138ffe28f", "patch": "@@ -2020,27 +2020,15 @@ pub fn build_session_options_and_crate_config(\n             }\n             OptLevel::Default\n         } else {\n-            match (\n-                cg.opt_level.as_ref().map(String::as_ref),\n-                nightly_options::is_nightly_build(),\n-            ) {\n-                (None, _) => OptLevel::No,\n-                (Some(\"0\"), _) => OptLevel::No,\n-                (Some(\"1\"), _) => OptLevel::Less,\n-                (Some(\"2\"), _) => OptLevel::Default,\n-                (Some(\"3\"), _) => OptLevel::Aggressive,\n-                (Some(\"s\"), true) => OptLevel::Size,\n-                (Some(\"z\"), true) => OptLevel::SizeMin,\n-                (Some(\"s\"), false) | (Some(\"z\"), false) => {\n-                    early_error(\n-                        error_format,\n-                        &format!(\n-                            \"the optimizations s or z are only \\\n-                             accepted on the nightly compiler\"\n-                        ),\n-                    );\n-                }\n-                (Some(arg), _) => {\n+            match cg.opt_level.as_ref().map(String::as_ref) {\n+                None => OptLevel::No,\n+                Some(\"0\") => OptLevel::No,\n+                Some(\"1\") => OptLevel::Less,\n+                Some(\"2\") => OptLevel::Default,\n+                Some(\"3\") => OptLevel::Aggressive,\n+                Some(\"s\") => OptLevel::Size,\n+                Some(\"z\") => OptLevel::SizeMin,\n+                Some(arg) => {\n                     early_error(\n                         error_format,\n                         &format!("}]}