{"sha": "1999a3147f5ab65cd556d45e631be5c18fbaebf4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5OTlhMzE0N2Y1YWI2NWNkNTU2ZDQ1ZTYzMWJlNWMxOGZiYWViZjQ=", "commit": {"author": {"name": "Ryan Levick", "email": "me@ryanlevick.com", "date": "2021-02-16T21:39:05Z"}, "committer": {"name": "Ryan Levick", "email": "me@ryanlevick.com", "date": "2021-03-03T10:23:29Z"}, "message": "Fix borrow and deref", "tree": {"sha": "93caf2a0a440349e20cc3371ea67c8f50b9d2a55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93caf2a0a440349e20cc3371ea67c8f50b9d2a55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1999a3147f5ab65cd556d45e631be5c18fbaebf4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1999a3147f5ab65cd556d45e631be5c18fbaebf4", "html_url": "https://github.com/rust-lang/rust/commit/1999a3147f5ab65cd556d45e631be5c18fbaebf4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1999a3147f5ab65cd556d45e631be5c18fbaebf4/comments", "author": {"login": "rylev", "id": 1327285, "node_id": "MDQ6VXNlcjEzMjcyODU=", "avatar_url": "https://avatars.githubusercontent.com/u/1327285?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rylev", "html_url": "https://github.com/rylev", "followers_url": "https://api.github.com/users/rylev/followers", "following_url": "https://api.github.com/users/rylev/following{/other_user}", "gists_url": "https://api.github.com/users/rylev/gists{/gist_id}", "starred_url": "https://api.github.com/users/rylev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rylev/subscriptions", "organizations_url": "https://api.github.com/users/rylev/orgs", "repos_url": "https://api.github.com/users/rylev/repos", "events_url": "https://api.github.com/users/rylev/events{/privacy}", "received_events_url": "https://api.github.com/users/rylev/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rylev", "id": 1327285, "node_id": "MDQ6VXNlcjEzMjcyODU=", "avatar_url": "https://avatars.githubusercontent.com/u/1327285?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rylev", "html_url": "https://github.com/rylev", "followers_url": "https://api.github.com/users/rylev/followers", "following_url": "https://api.github.com/users/rylev/following{/other_user}", "gists_url": "https://api.github.com/users/rylev/gists{/gist_id}", "starred_url": "https://api.github.com/users/rylev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rylev/subscriptions", "organizations_url": "https://api.github.com/users/rylev/orgs", "repos_url": "https://api.github.com/users/rylev/repos", "events_url": "https://api.github.com/users/rylev/events{/privacy}", "received_events_url": "https://api.github.com/users/rylev/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da3995f0ec3085de42dcce9e91dbb5662b2c99d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/da3995f0ec3085de42dcce9e91dbb5662b2c99d3", "html_url": "https://github.com/rust-lang/rust/commit/da3995f0ec3085de42dcce9e91dbb5662b2c99d3"}], "stats": {"total": 99, "additions": 67, "deletions": 32}, "files": [{"sha": "3a1b9c85fd1bd2bcb0249a2047e1f2801810e418", "filename": "compiler/rustc_lint/src/noop_method_call.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1999a3147f5ab65cd556d45e631be5c18fbaebf4/compiler%2Frustc_lint%2Fsrc%2Fnoop_method_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1999a3147f5ab65cd556d45e631be5c18fbaebf4/compiler%2Frustc_lint%2Fsrc%2Fnoop_method_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnoop_method_call.rs?ref=1999a3147f5ab65cd556d45e631be5c18fbaebf4", "patch": "@@ -15,6 +15,7 @@ declare_lint! {\n     ///\n     /// ```rust\n     /// # #![allow(unused)]\n+    /// #![deny(noop_method_call)]\n     /// struct Foo;\n     /// let foo = &Foo;\n     /// let clone: &Foo = foo.clone();\n@@ -30,7 +31,7 @@ declare_lint! {\n     /// calling `clone` on a `&T` where `T` does not implement clone, actually doesn't do anything\n     /// as references are copy. This lint detects these calls and warns the user about them.\n     pub NOOP_METHOD_CALL,\n-    Warn,\n+    Allow,\n     \"detects the use of well-known noop methods\"\n }\n \n@@ -50,7 +51,9 @@ impl<'tcx> LateLintPass<'tcx> for NoopMethodCall {\n             Some((DefKind::AssocFn, did)) => match cx.tcx.trait_of_item(did) {\n                 // Check that we're dealing with a trait method for one of the traits we care about.\n                 Some(trait_id)\n-                    if [sym::Clone].iter().any(|s| cx.tcx.is_diagnostic_item(*s, trait_id)) =>\n+                    if [sym::Clone, sym::Deref, sym::Borrow]\n+                        .iter()\n+                        .any(|s| cx.tcx.is_diagnostic_item(*s, trait_id)) =>\n                 {\n                     (trait_id, did)\n                 }\n@@ -71,20 +74,11 @@ impl<'tcx> LateLintPass<'tcx> for NoopMethodCall {\n             _ => return,\n         };\n         // (Re)check that it implements the noop diagnostic.\n-        for (s, peel_ref) in [(sym::noop_method_clone, false)].iter() {\n+        for s in [sym::noop_method_clone, sym::noop_method_deref, sym::noop_method_borrow].iter() {\n             if cx.tcx.is_diagnostic_item(*s, i.def_id()) {\n                 let method = &call.ident.name;\n                 let receiver = &elements[0];\n                 let receiver_ty = cx.typeck_results().expr_ty(receiver);\n-                let receiver_ty = match receiver_ty.kind() {\n-                    // Remove one borrow from the receiver if appropriate to positively verify that\n-                    // the receiver `&self` type and the return type are the same, depending on the\n-                    // involved trait being checked.\n-                    ty::Ref(_, ty, _) if *peel_ref => ty,\n-                    // When it comes to `Clone` we need to check the `receiver_ty` directly.\n-                    // FIXME: we must come up with a better strategy for this.\n-                    _ => receiver_ty,\n-                };\n                 let expr_ty = cx.typeck_results().expr_ty_adjusted(expr);\n                 if receiver_ty != expr_ty {\n                     // This lint will only trigger if the receiver type and resulting expression \\"}, {"sha": "61f9a080a5217ae0937d3603ca01c2c4a6f7e561", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1999a3147f5ab65cd556d45e631be5c18fbaebf4/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1999a3147f5ab65cd556d45e631be5c18fbaebf4/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=1999a3147f5ab65cd556d45e631be5c18fbaebf4", "patch": "@@ -142,6 +142,7 @@ symbols! {\n         Decodable,\n         Decoder,\n         Default,\n+        Deref,\n         Encodable,\n         Encoder,\n         Eq,\n@@ -790,7 +791,9 @@ symbols! {\n         none_error,\n         nontemporal_store,\n         nontrapping_dash_fptoint: \"nontrapping-fptoint\",\n+        noop_method_borrow,\n         noop_method_clone,\n+        noop_method_deref,\n         noreturn,\n         nostack,\n         not,"}, {"sha": "f28be20aaa1e6309d72be3a403a055a546707c18", "filename": "library/core/src/borrow.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1999a3147f5ab65cd556d45e631be5c18fbaebf4/library%2Fcore%2Fsrc%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1999a3147f5ab65cd556d45e631be5c18fbaebf4/library%2Fcore%2Fsrc%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fborrow.rs?ref=1999a3147f5ab65cd556d45e631be5c18fbaebf4", "patch": "@@ -153,6 +153,7 @@\n /// [`HashMap<K, V>`]: ../../std/collections/struct.HashMap.html\n /// [`String`]: ../../std/string/struct.String.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_diagnostic_item = \"Borrow\"]\n pub trait Borrow<Borrowed: ?Sized> {\n     /// Immutably borrows from an owned value.\n     ///\n@@ -205,6 +206,7 @@ pub trait BorrowMut<Borrowed: ?Sized>: Borrow<Borrowed> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized> Borrow<T> for T {\n+    #[rustc_diagnostic_item = \"noop_method_borrow\"]\n     fn borrow(&self) -> &T {\n         self\n     }"}, {"sha": "10e3ce67448c8d717dc28484ca6d5867516f7ffb", "filename": "library/core/src/ops/deref.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1999a3147f5ab65cd556d45e631be5c18fbaebf4/library%2Fcore%2Fsrc%2Fops%2Fderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1999a3147f5ab65cd556d45e631be5c18fbaebf4/library%2Fcore%2Fsrc%2Fops%2Fderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fderef.rs?ref=1999a3147f5ab65cd556d45e631be5c18fbaebf4", "patch": "@@ -60,6 +60,7 @@\n #[doc(alias = \"*\")]\n #[doc(alias = \"&*\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_diagnostic_item = \"Deref\"]\n pub trait Deref {\n     /// The resulting type after dereferencing.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -78,6 +79,7 @@ pub trait Deref {\n impl<T: ?Sized> Deref for &T {\n     type Target = T;\n \n+    #[rustc_diagnostic_item = \"noop_method_deref\"]\n     fn deref(&self) -> &T {\n         *self\n     }"}, {"sha": "c97a87aebce4154b8a92d8f1a4ffb4b65b0f5b5e", "filename": "library/core/tests/clone.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1999a3147f5ab65cd556d45e631be5c18fbaebf4/library%2Fcore%2Ftests%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1999a3147f5ab65cd556d45e631be5c18fbaebf4/library%2Fcore%2Ftests%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fclone.rs?ref=1999a3147f5ab65cd556d45e631be5c18fbaebf4", "patch": "@@ -1,5 +1,3 @@\n-#![cfg_attr(not(bootstrap), allow(noop_method_call))]\n-\n #[test]\n fn test_borrowed_clone() {\n     let x = 5;"}, {"sha": "7ffe9652797cf969dd586e9f03660650317c25f6", "filename": "src/test/ui/issues/issue-11820.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1999a3147f5ab65cd556d45e631be5c18fbaebf4/src%2Ftest%2Fui%2Fissues%2Fissue-11820.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1999a3147f5ab65cd556d45e631be5c18fbaebf4/src%2Ftest%2Fui%2Fissues%2Fissue-11820.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11820.rs?ref=1999a3147f5ab65cd556d45e631be5c18fbaebf4", "patch": "@@ -1,8 +1,6 @@\n // run-pass\n // pretty-expanded FIXME #23616\n \n-#![allow(noop_method_call)]\n-\n struct NoClone;\n \n fn main() {"}, {"sha": "9870c813572e36d15c6935adfe8f742f778d7368", "filename": "src/test/ui/lint/noop-method-call.rs", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1999a3147f5ab65cd556d45e631be5c18fbaebf4/src%2Ftest%2Fui%2Flint%2Fnoop-method-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1999a3147f5ab65cd556d45e631be5c18fbaebf4/src%2Ftest%2Fui%2Flint%2Fnoop-method-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fnoop-method-call.rs?ref=1999a3147f5ab65cd556d45e631be5c18fbaebf4", "patch": "@@ -1,15 +1,19 @@\n // check-pass\n \n #![allow(unused)]\n+#![warn(noop_method_call)]\n \n-struct NonCloneType<T>(T);\n+use std::borrow::Borrow;\n+use std::ops::Deref;\n+\n+struct PlainType<T>(T);\n \n #[derive(Clone)]\n struct CloneType<T>(T);\n \n fn main() {\n-    let non_clone_type_ref = &NonCloneType(1u32);\n-    let non_clone_type_ref_clone: &NonCloneType<u32> = non_clone_type_ref.clone();\n+    let non_clone_type_ref = &PlainType(1u32);\n+    let non_clone_type_ref_clone: &PlainType<u32> = non_clone_type_ref.clone();\n     //~^ WARNING call to `.clone()` on a reference in this situation does nothing\n \n     let clone_type_ref = &CloneType(1u32);\n@@ -20,15 +24,31 @@ fn main() {\n     let clone_type_ref = &&CloneType(1u32);\n     let clone_type_ref_clone: &CloneType<u32> = clone_type_ref.clone();\n \n+    let non_deref_type = &PlainType(1u32);\n+    let non_deref_type_deref: &PlainType<u32> = non_deref_type.deref();\n+    //~^ WARNING call to `.deref()` on a reference in this situation does nothing\n+\n+    // Dereferencing a &&T does not warn since it has collapsed the double reference\n+    let non_deref_type = &&PlainType(1u32);\n+    let non_deref_type_deref: &PlainType<u32> = non_deref_type.deref();\n+\n+    let non_borrow_type = &PlainType(1u32);\n+    let non_borrow_type_borrow: &PlainType<u32> = non_borrow_type.borrow();\n+    //~^ WARNING call to `.borrow()` on a reference in this situation does nothing\n+\n+    // Borrowing a &&T does not warn since it has collapsed the double reference\n+    let non_borrow_type = &&PlainType(1u32);\n+    let non_borrow_type_borrow: &PlainType<u32> = non_borrow_type.borrow();\n+\n     let xs = [\"a\", \"b\", \"c\"];\n     let _v: Vec<&str> = xs.iter().map(|x| x.clone()).collect(); // ok, but could use `*x` instead\n }\n \n-fn generic<T>(non_clone_type: &NonCloneType<T>) {\n+fn generic<T>(non_clone_type: &PlainType<T>) {\n     non_clone_type.clone();\n }\n \n-fn non_generic(non_clone_type: &NonCloneType<u32>) {\n+fn non_generic(non_clone_type: &PlainType<u32>) {\n     non_clone_type.clone();\n     //~^ WARNING call to `.clone()` on a reference in this situation does nothing\n }"}, {"sha": "7f6f96bf1d142218d4e923ec25fe6d79bed6da81", "filename": "src/test/ui/lint/noop-method-call.stderr", "status": "modified", "additions": 28, "deletions": 8, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/1999a3147f5ab65cd556d45e631be5c18fbaebf4/src%2Ftest%2Fui%2Flint%2Fnoop-method-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1999a3147f5ab65cd556d45e631be5c18fbaebf4/src%2Ftest%2Fui%2Flint%2Fnoop-method-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fnoop-method-call.stderr?ref=1999a3147f5ab65cd556d45e631be5c18fbaebf4", "patch": "@@ -1,19 +1,39 @@\n warning: call to `.clone()` on a reference in this situation does nothing\n-  --> $DIR/noop-method-call.rs:12:74\n+  --> $DIR/noop-method-call.rs:16:71\n    |\n-LL |     let non_clone_type_ref_clone: &NonCloneType<u32> = non_clone_type_ref.clone();\n-   |                                                                          ^^^^^^^^ unnecessary method call\n+LL |     let non_clone_type_ref_clone: &PlainType<u32> = non_clone_type_ref.clone();\n+   |                                                                       ^^^^^^^^ unnecessary method call\n    |\n-   = note: `#[warn(noop_method_call)]` on by default\n-   = note: the type `&NonCloneType<u32>` which `clone` is being called on is the same as the type returned from `clone`, so the method call does not do anything and can be removed\n+note: the lint level is defined here\n+  --> $DIR/noop-method-call.rs:4:9\n+   |\n+LL | #![warn(noop_method_call)]\n+   |         ^^^^^^^^^^^^^^^^\n+   = note: the type `&PlainType<u32>` which `clone` is being called on is the same as the type returned from `clone`, so the method call does not do anything and can be removed\n+\n+warning: call to `.deref()` on a reference in this situation does nothing\n+  --> $DIR/noop-method-call.rs:28:63\n+   |\n+LL |     let non_deref_type_deref: &PlainType<u32> = non_deref_type.deref();\n+   |                                                               ^^^^^^^^ unnecessary method call\n+   |\n+   = note: the type `&PlainType<u32>` which `deref` is being called on is the same as the type returned from `deref`, so the method call does not do anything and can be removed\n+\n+warning: call to `.borrow()` on a reference in this situation does nothing\n+  --> $DIR/noop-method-call.rs:36:66\n+   |\n+LL |     let non_borrow_type_borrow: &PlainType<u32> = non_borrow_type.borrow();\n+   |                                                                  ^^^^^^^^^ unnecessary method call\n+   |\n+   = note: the type `&PlainType<u32>` which `borrow` is being called on is the same as the type returned from `borrow`, so the method call does not do anything and can be removed\n \n warning: call to `.clone()` on a reference in this situation does nothing\n-  --> $DIR/noop-method-call.rs:32:19\n+  --> $DIR/noop-method-call.rs:52:19\n    |\n LL |     non_clone_type.clone();\n    |                   ^^^^^^^^ unnecessary method call\n    |\n-   = note: the type `&NonCloneType<u32>` which `clone` is being called on is the same as the type returned from `clone`, so the method call does not do anything and can be removed\n+   = note: the type `&PlainType<u32>` which `clone` is being called on is the same as the type returned from `clone`, so the method call does not do anything and can be removed\n \n-warning: 2 warnings emitted\n+warning: 4 warnings emitted\n "}, {"sha": "bacf9b2d5a96a326f61b4c780d005e3de27b7f7f", "filename": "src/test/ui/underscore-imports/cycle.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1999a3147f5ab65cd556d45e631be5c18fbaebf4/src%2Ftest%2Fui%2Funderscore-imports%2Fcycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1999a3147f5ab65cd556d45e631be5c18fbaebf4/src%2Ftest%2Fui%2Funderscore-imports%2Fcycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-imports%2Fcycle.rs?ref=1999a3147f5ab65cd556d45e631be5c18fbaebf4", "patch": "@@ -14,6 +14,5 @@ mod y {\n \n pub fn main() {\n     use x::*;\n-    #[allow(noop_method_call)]\n     (&0).deref();\n }"}, {"sha": "43f527bc9a4087866163a38a59b61c10ba088d76", "filename": "src/test/ui/underscore-imports/macro-expanded.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1999a3147f5ab65cd556d45e631be5c18fbaebf4/src%2Ftest%2Fui%2Funderscore-imports%2Fmacro-expanded.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1999a3147f5ab65cd556d45e631be5c18fbaebf4/src%2Ftest%2Fui%2Funderscore-imports%2Fmacro-expanded.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-imports%2Fmacro-expanded.rs?ref=1999a3147f5ab65cd556d45e631be5c18fbaebf4", "patch": "@@ -3,7 +3,6 @@\n // check-pass\n \n #![feature(decl_macro, rustc_attrs)]\n-#![allow(noop_method_call)]\n \n mod x {\n     pub use std::ops::Not as _;"}, {"sha": "6770a7fac90fdc6343092d5e05a02e750d4a0019", "filename": "src/tools/clippy/tests/ui/unnecessary_clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1999a3147f5ab65cd556d45e631be5c18fbaebf4/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1999a3147f5ab65cd556d45e631be5c18fbaebf4/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_clone.rs?ref=1999a3147f5ab65cd556d45e631be5c18fbaebf4", "patch": "@@ -1,7 +1,7 @@\n // does not test any rustfixable lints\n \n #![warn(clippy::clone_on_ref_ptr)]\n-#![allow(unused, noop_method_call, clippy::redundant_clone, clippy::unnecessary_wraps)]\n+#![allow(unused, clippy::redundant_clone, clippy::unnecessary_wraps)]\n \n use std::cell::RefCell;\n use std::rc::{self, Rc};"}]}