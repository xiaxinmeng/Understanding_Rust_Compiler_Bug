{"sha": "a5294b6486ea4930e0d16518851dffa51917a8e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1Mjk0YjY0ODZlYTQ5MzBlMGQxNjUxODg1MWRmZmE1MTkxN2E4ZTU=", "commit": {"author": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2020-04-13T15:23:39Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2020-05-17T16:38:19Z"}, "message": "We already handle arrays of unknown length correctly", "tree": {"sha": "93d40f0a456369332abad93daec0f8d178d99b05", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93d40f0a456369332abad93daec0f8d178d99b05"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5294b6486ea4930e0d16518851dffa51917a8e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5294b6486ea4930e0d16518851dffa51917a8e5", "html_url": "https://github.com/rust-lang/rust/commit/a5294b6486ea4930e0d16518851dffa51917a8e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5294b6486ea4930e0d16518851dffa51917a8e5/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a1772ea92ce7949beade6c9d2f110e64de30aa0", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a1772ea92ce7949beade6c9d2f110e64de30aa0", "html_url": "https://github.com/rust-lang/rust/commit/4a1772ea92ce7949beade6c9d2f110e64de30aa0"}], "stats": {"total": 20, "additions": 4, "deletions": 16}, "files": [{"sha": "56e9c5d11888b4019320a90feedfdc634bf96094", "filename": "src/librustc_mir_build/hair/pattern/_match.rs", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a5294b6486ea4930e0d16518851dffa51917a8e5/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5294b6486ea4930e0d16518851dffa51917a8e5/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs?ref=a5294b6486ea4930e0d16518851dffa51917a8e5", "patch": "@@ -885,22 +885,10 @@ impl<'tcx> Constructor<'tcx> {\n                                 // in any other pattern from this match (because they are\n                                 // private), so their type does not matter - but we don't want\n                                 // to know they are uninhabited.\n-                                let allowed_to_inspect = is_visible\n-                                    && match (is_non_exhaustive, is_uninhabited) {\n-                                        // Treat all uninhabited types in non-exhaustive variants as\n-                                        // `TyErr`.\n-                                        (true, true) => false,\n-                                        (_, _) => {\n-                                            match ty.kind {\n-                                                // If the field type returned is an array of an unknown\n-                                                // size return an TyErr.\n-                                                ty::Array(_, len) => len\n-                                                    .try_eval_usize(cx.tcx, cx.param_env)\n-                                                    .is_some(),\n-                                                _ => true,\n-                                            }\n-                                        }\n-                                    };\n+                                // Also treat all uninhabited types in non-exhaustive variants as\n+                                // `TyErr`.\n+                                let allowed_to_inspect =\n+                                    is_visible && !(is_non_exhaustive && is_uninhabited);\n \n                                 if allowed_to_inspect {\n                                     Pat::wildcard_from_ty(ty)"}]}