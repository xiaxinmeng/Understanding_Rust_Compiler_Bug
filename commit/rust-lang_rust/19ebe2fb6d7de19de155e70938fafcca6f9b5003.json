{"sha": "19ebe2fb6d7de19de155e70938fafcca6f9b5003", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5ZWJlMmZiNmQ3ZGUxOWRlMTU1ZTcwOTM4ZmFmY2NhNmY5YjUwMDM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-11-13T08:07:52Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-11-13T08:07:52Z"}, "message": "clarify why we can do the ptr cast", "tree": {"sha": "def0038c7655cb6daaa41bf6500b61e9b2500ee8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/def0038c7655cb6daaa41bf6500b61e9b2500ee8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19ebe2fb6d7de19de155e70938fafcca6f9b5003", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19ebe2fb6d7de19de155e70938fafcca6f9b5003", "html_url": "https://github.com/rust-lang/rust/commit/19ebe2fb6d7de19de155e70938fafcca6f9b5003", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19ebe2fb6d7de19de155e70938fafcca6f9b5003/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aba385abbd69146387893c84951a06ec283f4d10", "url": "https://api.github.com/repos/rust-lang/rust/commits/aba385abbd69146387893c84951a06ec283f4d10", "html_url": "https://github.com/rust-lang/rust/commit/aba385abbd69146387893c84951a06ec283f4d10"}], "stats": {"total": 8, "additions": 5, "deletions": 3}, "files": [{"sha": "4afeec667586517cd3e3b1030412ba2640ac3e35", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/19ebe2fb6d7de19de155e70938fafcca6f9b5003/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19ebe2fb6d7de19de155e70938fafcca6f9b5003/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=19ebe2fb6d7de19de155e70938fafcca6f9b5003", "patch": "@@ -1545,7 +1545,8 @@ impl<T: ?Sized> UnsafeCell<T> {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const fn get(&self) -> *mut T {\n         // We can just cast the pointer from `UnsafeCell<T>` to `T` because of\n-        // #[repr(transparent)]\n+        // #[repr(transparent)]. This exploits libstd's special status, there is\n+        // no guarantee for user code that this will work in future versions of the compiler!\n         self as *const UnsafeCell<T> as *const T as *mut T\n     }\n \n@@ -1572,10 +1573,11 @@ impl<T: ?Sized> UnsafeCell<T> {\n     /// assert_eq!(uc.into_inner(), 5);\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"unsafe_cell_raw_get\", issue = \"0\")]\n+    #[unstable(feature = \"unsafe_cell_raw_get\", issue = \"66358\")]\n     pub const fn raw_get(self: *const Self) -> *mut T {\n         // We can just cast the pointer from `UnsafeCell<T>` to `T` because of\n-        // #[repr(transparent)]\n+        // #[repr(transparent)]. This exploits libstd's special status, there is\n+        // no guarantee for user code that this will work in future versions of the compiler!\n         self as *const T as *mut T\n     }\n }"}]}