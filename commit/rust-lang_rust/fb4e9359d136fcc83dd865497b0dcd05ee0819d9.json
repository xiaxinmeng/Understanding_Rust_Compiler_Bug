{"sha": "fb4e9359d136fcc83dd865497b0dcd05ee0819d9", "node_id": "C_kwDOAAsO6NoAKGZiNGU5MzU5ZDEzNmZjYzgzZGQ4NjU0OTdiMGRjZDA1ZWUwODE5ZDk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-14T14:14:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-14T14:14:46Z"}, "message": "Auto merge of #13769 - jonas-schievink:parse-half-open-range-pat, r=jonas-schievink\n\nfeat: Parse half-open `..= X` patterns\n\nCloses https://github.com/rust-lang/rust-analyzer/issues/13739", "tree": {"sha": "5deee9a71ba88e511f20390653506ad9c9349e85", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5deee9a71ba88e511f20390653506ad9c9349e85"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb4e9359d136fcc83dd865497b0dcd05ee0819d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb4e9359d136fcc83dd865497b0dcd05ee0819d9", "html_url": "https://github.com/rust-lang/rust/commit/fb4e9359d136fcc83dd865497b0dcd05ee0819d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb4e9359d136fcc83dd865497b0dcd05ee0819d9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5bd9373c5b92f6470777ea86520f31ff96ff4b0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5bd9373c5b92f6470777ea86520f31ff96ff4b0d", "html_url": "https://github.com/rust-lang/rust/commit/5bd9373c5b92f6470777ea86520f31ff96ff4b0d"}, {"sha": "9e0aaf4cf34ce0be50970e092b9e22e3c1e029f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e0aaf4cf34ce0be50970e092b9e22e3c1e029f3", "html_url": "https://github.com/rust-lang/rust/commit/9e0aaf4cf34ce0be50970e092b9e22e3c1e029f3"}], "stats": {"total": 192, "additions": 157, "deletions": 35}, "files": [{"sha": "633e3e0a0b92429380dfb8bfcd3f01559914311a", "filename": "crates/parser/src/grammar/patterns.rs", "status": "modified", "additions": 43, "deletions": 32, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/fb4e9359d136fcc83dd865497b0dcd05ee0819d9/crates%2Fparser%2Fsrc%2Fgrammar%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb4e9359d136fcc83dd865497b0dcd05ee0819d9/crates%2Fparser%2Fsrc%2Fgrammar%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fpatterns.rs?ref=fb4e9359d136fcc83dd865497b0dcd05ee0819d9", "patch": "@@ -62,39 +62,50 @@ fn pattern_r(p: &mut Parser<'_>, recovery_set: TokenSet) {\n }\n \n fn pattern_single_r(p: &mut Parser<'_>, recovery_set: TokenSet) {\n-    if let Some(lhs) = atom_pat(p, recovery_set) {\n-        // test range_pat\n-        // fn main() {\n-        //     match 92 {\n-        //         0 ... 100 => (),\n-        //         101 ..= 200 => (),\n-        //         200 .. 301 => (),\n-        //         302 .. => (),\n-        //     }\n-        //\n-        //     match Some(10 as u8) {\n-        //         Some(0) | None => (),\n-        //         Some(1..) => ()\n-        //     }\n-        //\n-        //     match () {\n-        //         S { a: 0 } => (),\n-        //         S { a: 1.. } => (),\n-        //     }\n-        //\n-        //     match () {\n-        //         [0] => (),\n-        //         [1..] => (),\n-        //     }\n-        //\n-        //     match (10 as u8, 5 as u8) {\n-        //         (0, _) => (),\n-        //         (1.., _) => ()\n-        //     }\n-        // }\n+    // test range_pat\n+    // fn main() {\n+    //     match 92 {\n+    //         0 ... 100 => (),\n+    //         101 ..= 200 => (),\n+    //         200 .. 301 => (),\n+    //         302 .. => (),\n+    //         ..= 303 => (),\n+    //     }\n+    //\n+    //     match Some(10 as u8) {\n+    //         Some(0) | None => (),\n+    //         Some(1..) => (),\n+    //         Some(..=2) => (),\n+    //     }\n+    //\n+    //     match () {\n+    //         S { a: 0 } => (),\n+    //         S { a: 1.. } => (),\n+    //         S { a: ..=2 } => (),\n+    //     }\n+    //\n+    //     match () {\n+    //         [0] => (),\n+    //         [1..] => (),\n+    //         [..=2] => (),\n+    //     }\n+    //\n+    //     match (10 as u8, 5 as u8) {\n+    //         (0, _) => (),\n+    //         (1.., _) => (),\n+    //         (..=2, _) => (),\n+    //     }\n+    // }\n+\n+    if p.at(T![..=]) {\n+        let m = p.start();\n+        p.bump(T![..=]);\n+        atom_pat(p, recovery_set);\n+        m.complete(p, RANGE_PAT);\n+        return;\n+    }\n \n-        // FIXME: support half_open_range_patterns (`..=2`),\n-        // exclusive_range_pattern (`..5`) with missing lhs\n+    if let Some(lhs) = atom_pat(p, recovery_set) {\n         for range_op in [T![...], T![..=], T![..]] {\n             if p.at(range_op) {\n                 let m = lhs.precede(p);"}, {"sha": "33d645b048b8a75f41ae14d263248713bd756d76", "filename": "crates/parser/src/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb4e9359d136fcc83dd865497b0dcd05ee0819d9/crates%2Fparser%2Fsrc%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb4e9359d136fcc83dd865497b0dcd05ee0819d9/crates%2Fparser%2Fsrc%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fparser.rs?ref=fb4e9359d136fcc83dd865497b0dcd05ee0819d9", "patch": "@@ -162,7 +162,7 @@ impl<'t> Parser<'t> {\n         Marker::new(pos)\n     }\n \n-    /// Consume the next token if `kind` matches.\n+    /// Consume the next token. Panics if the parser isn't currently at `kind`.\n     pub(crate) fn bump(&mut self, kind: SyntaxKind) {\n         assert!(self.eat(kind));\n     }"}, {"sha": "d9981c50719f331287a839361215d8cdf55d68a3", "filename": "crates/parser/test_data/parser/inline/ok/0058_range_pat.rast", "status": "modified", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/fb4e9359d136fcc83dd865497b0dcd05ee0819d9/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0058_range_pat.rast", "raw_url": "https://github.com/rust-lang/rust/raw/fb4e9359d136fcc83dd865497b0dcd05ee0819d9/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0058_range_pat.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0058_range_pat.rast?ref=fb4e9359d136fcc83dd865497b0dcd05ee0819d9", "patch": "@@ -93,6 +93,21 @@ SOURCE_FILE\n                   L_PAREN \"(\"\n                   R_PAREN \")\"\n                 COMMA \",\"\n+              WHITESPACE \"\\n        \"\n+              MATCH_ARM\n+                RANGE_PAT\n+                  DOT2EQ \"..=\"\n+                  WHITESPACE \" \"\n+                  LITERAL_PAT\n+                    LITERAL\n+                      INT_NUMBER \"303\"\n+                WHITESPACE \" \"\n+                FAT_ARROW \"=>\"\n+                WHITESPACE \" \"\n+                TUPLE_EXPR\n+                  L_PAREN \"(\"\n+                  R_PAREN \")\"\n+                COMMA \",\"\n               WHITESPACE \"\\n    \"\n               R_CURLY \"}\"\n         WHITESPACE \"\\n\\n    \"\n@@ -169,6 +184,28 @@ SOURCE_FILE\n                 TUPLE_EXPR\n                   L_PAREN \"(\"\n                   R_PAREN \")\"\n+                COMMA \",\"\n+              WHITESPACE \"\\n        \"\n+              MATCH_ARM\n+                TUPLE_STRUCT_PAT\n+                  PATH\n+                    PATH_SEGMENT\n+                      NAME_REF\n+                        IDENT \"Some\"\n+                  L_PAREN \"(\"\n+                  RANGE_PAT\n+                    DOT2EQ \"..=\"\n+                    LITERAL_PAT\n+                      LITERAL\n+                        INT_NUMBER \"2\"\n+                  R_PAREN \")\"\n+                WHITESPACE \" \"\n+                FAT_ARROW \"=>\"\n+                WHITESPACE \" \"\n+                TUPLE_EXPR\n+                  L_PAREN \"(\"\n+                  R_PAREN \")\"\n+                COMMA \",\"\n               WHITESPACE \"\\n    \"\n               R_CURLY \"}\"\n         WHITESPACE \"\\n\\n    \"\n@@ -240,6 +277,36 @@ SOURCE_FILE\n                   L_PAREN \"(\"\n                   R_PAREN \")\"\n                 COMMA \",\"\n+              WHITESPACE \"\\n        \"\n+              MATCH_ARM\n+                RECORD_PAT\n+                  PATH\n+                    PATH_SEGMENT\n+                      NAME_REF\n+                        IDENT \"S\"\n+                  WHITESPACE \" \"\n+                  RECORD_PAT_FIELD_LIST\n+                    L_CURLY \"{\"\n+                    WHITESPACE \" \"\n+                    RECORD_PAT_FIELD\n+                      NAME_REF\n+                        IDENT \"a\"\n+                      COLON \":\"\n+                      WHITESPACE \" \"\n+                      RANGE_PAT\n+                        DOT2EQ \"..=\"\n+                        LITERAL_PAT\n+                          LITERAL\n+                            INT_NUMBER \"2\"\n+                    WHITESPACE \" \"\n+                    R_CURLY \"}\"\n+                WHITESPACE \" \"\n+                FAT_ARROW \"=>\"\n+                WHITESPACE \" \"\n+                TUPLE_EXPR\n+                  L_PAREN \"(\"\n+                  R_PAREN \")\"\n+                COMMA \",\"\n               WHITESPACE \"\\n    \"\n               R_CURLY \"}\"\n         WHITESPACE \"\\n\\n    \"\n@@ -285,6 +352,23 @@ SOURCE_FILE\n                   L_PAREN \"(\"\n                   R_PAREN \")\"\n                 COMMA \",\"\n+              WHITESPACE \"\\n        \"\n+              MATCH_ARM\n+                SLICE_PAT\n+                  L_BRACK \"[\"\n+                  RANGE_PAT\n+                    DOT2EQ \"..=\"\n+                    LITERAL_PAT\n+                      LITERAL\n+                        INT_NUMBER \"2\"\n+                  R_BRACK \"]\"\n+                WHITESPACE \" \"\n+                FAT_ARROW \"=>\"\n+                WHITESPACE \" \"\n+                TUPLE_EXPR\n+                  L_PAREN \"(\"\n+                  R_PAREN \")\"\n+                COMMA \",\"\n               WHITESPACE \"\\n    \"\n               R_CURLY \"}\"\n         WHITESPACE \"\\n\\n    \"\n@@ -360,6 +444,28 @@ SOURCE_FILE\n               TUPLE_EXPR\n                 L_PAREN \"(\"\n                 R_PAREN \")\"\n+              COMMA \",\"\n+            WHITESPACE \"\\n        \"\n+            MATCH_ARM\n+              TUPLE_PAT\n+                L_PAREN \"(\"\n+                RANGE_PAT\n+                  DOT2EQ \"..=\"\n+                  LITERAL_PAT\n+                    LITERAL\n+                      INT_NUMBER \"2\"\n+                COMMA \",\"\n+                WHITESPACE \" \"\n+                WILDCARD_PAT\n+                  UNDERSCORE \"_\"\n+                R_PAREN \")\"\n+              WHITESPACE \" \"\n+              FAT_ARROW \"=>\"\n+              WHITESPACE \" \"\n+              TUPLE_EXPR\n+                L_PAREN \"(\"\n+                R_PAREN \")\"\n+              COMMA \",\"\n             WHITESPACE \"\\n    \"\n             R_CURLY \"}\"\n         WHITESPACE \"\\n\""}, {"sha": "b54354211d2dcf03ea7f8d98c625c451bb1c3362", "filename": "crates/parser/test_data/parser/inline/ok/0058_range_pat.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fb4e9359d136fcc83dd865497b0dcd05ee0819d9/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0058_range_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb4e9359d136fcc83dd865497b0dcd05ee0819d9/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0058_range_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0058_range_pat.rs?ref=fb4e9359d136fcc83dd865497b0dcd05ee0819d9", "patch": "@@ -4,25 +4,30 @@ fn main() {\n         101 ..= 200 => (),\n         200 .. 301 => (),\n         302 .. => (),\n+        ..= 303 => (),\n     }\n \n     match Some(10 as u8) {\n         Some(0) | None => (),\n-        Some(1..) => ()\n+        Some(1..) => (),\n+        Some(..=2) => (),\n     }\n \n     match () {\n         S { a: 0 } => (),\n         S { a: 1.. } => (),\n+        S { a: ..=2 } => (),\n     }\n \n     match () {\n         [0] => (),\n         [1..] => (),\n+        [..=2] => (),\n     }\n \n     match (10 as u8, 5 as u8) {\n         (0, _) => (),\n-        (1.., _) => ()\n+        (1.., _) => (),\n+        (..=2, _) => (),\n     }\n }"}]}