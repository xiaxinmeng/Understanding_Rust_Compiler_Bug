{"sha": "0f2266d3cca6ea6bae5ecf271174a0fed0d89546", "node_id": "C_kwDOAAsO6NoAKDBmMjI2NmQzY2NhNmVhNmJhZTVlY2YyNzExNzRhMGZlZDBkODk1NDY", "commit": {"author": {"name": "Amos Wenger", "email": "amoswenger@gmail.com", "date": "2022-07-22T13:38:45Z"}, "committer": {"name": "Amos Wenger", "email": "amoswenger@gmail.com", "date": "2022-07-24T08:37:29Z"}, "message": "Convert rust-analyzer to 'in-tree' tool, pass 'in-rust-tree' feature by default", "tree": {"sha": "f74e5a54edb0804c1633802129692d08dcdc6916", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f74e5a54edb0804c1633802129692d08dcdc6916"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f2266d3cca6ea6bae5ecf271174a0fed0d89546", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f2266d3cca6ea6bae5ecf271174a0fed0d89546", "html_url": "https://github.com/rust-lang/rust/commit/0f2266d3cca6ea6bae5ecf271174a0fed0d89546", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f2266d3cca6ea6bae5ecf271174a0fed0d89546/comments", "author": {"login": "fasterthanlime", "id": 7998310, "node_id": "MDQ6VXNlcjc5OTgzMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/7998310?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fasterthanlime", "html_url": "https://github.com/fasterthanlime", "followers_url": "https://api.github.com/users/fasterthanlime/followers", "following_url": "https://api.github.com/users/fasterthanlime/following{/other_user}", "gists_url": "https://api.github.com/users/fasterthanlime/gists{/gist_id}", "starred_url": "https://api.github.com/users/fasterthanlime/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fasterthanlime/subscriptions", "organizations_url": "https://api.github.com/users/fasterthanlime/orgs", "repos_url": "https://api.github.com/users/fasterthanlime/repos", "events_url": "https://api.github.com/users/fasterthanlime/events{/privacy}", "received_events_url": "https://api.github.com/users/fasterthanlime/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fasterthanlime", "id": 7998310, "node_id": "MDQ6VXNlcjc5OTgzMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/7998310?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fasterthanlime", "html_url": "https://github.com/fasterthanlime", "followers_url": "https://api.github.com/users/fasterthanlime/followers", "following_url": "https://api.github.com/users/fasterthanlime/following{/other_user}", "gists_url": "https://api.github.com/users/fasterthanlime/gists{/gist_id}", "starred_url": "https://api.github.com/users/fasterthanlime/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fasterthanlime/subscriptions", "organizations_url": "https://api.github.com/users/fasterthanlime/orgs", "repos_url": "https://api.github.com/users/fasterthanlime/repos", "events_url": "https://api.github.com/users/fasterthanlime/events{/privacy}", "received_events_url": "https://api.github.com/users/fasterthanlime/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43acb501b93c637b32fa134ba8cf586d82e96732", "url": "https://api.github.com/repos/rust-lang/rust/commits/43acb501b93c637b32fa134ba8cf586d82e96732", "html_url": "https://github.com/rust-lang/rust/commit/43acb501b93c637b32fa134ba8cf586d82e96732"}], "stats": {"total": 51, "additions": 47, "deletions": 4}, "files": [{"sha": "dee6228fe1aff079d54527929176424bd37548a1", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f2266d3cca6ea6bae5ecf271174a0fed0d89546/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f2266d3cca6ea6bae5ecf271174a0fed0d89546/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=0f2266d3cca6ea6bae5ecf271174a0fed0d89546", "patch": "@@ -1551,7 +1551,7 @@ impl<'a> Builder<'a> {\n             Mode::ToolStd => {\n                 // Right now this is just compiletest and a few other tools that build on stable.\n                 // Allow them to use `feature(test)`, but nothing else.\n-                rustflags.arg(\"-Zallow-features=binary-dep-depinfo,test,backtrace\");\n+                rustflags.arg(\"-Zallow-features=binary-dep-depinfo,test,backtrace,proc_macro_internals,proc_macro_diagnostic,proc_macro_span\");\n             }\n             Mode::Std | Mode::Rustc | Mode::Codegen | Mode::ToolRustc => {}\n         }"}, {"sha": "95655c0ee35989eec45dbfbe2eeb28116061abfa", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f2266d3cca6ea6bae5ecf271174a0fed0d89546/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f2266d3cca6ea6bae5ecf271174a0fed0d89546/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=0f2266d3cca6ea6bae5ecf271174a0fed0d89546", "patch": "@@ -1058,7 +1058,7 @@ impl Step for RustAnalyzer {\n         }\n \n         let rust_analyzer = builder\n-            .ensure(tool::RustAnalyzer { compiler, target, extra_features: Vec::new() })\n+            .ensure(tool::RustAnalyzer { compiler, target })\n             .expect(\"rust-analyzer always builds\");\n \n         let mut tarball = Tarball::new(builder, \"rust-analyzer\", &target.triple);"}, {"sha": "5743548d9692da28ff307174bb84264190fd8b74", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 45, "deletions": 2, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/0f2266d3cca6ea6bae5ecf271174a0fed0d89546/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f2266d3cca6ea6bae5ecf271174a0fed0d89546/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=0f2266d3cca6ea6bae5ecf271174a0fed0d89546", "patch": "@@ -1,7 +1,7 @@\n use std::collections::HashSet;\n use std::env;\n use std::fs;\n-use std::path::{Path, PathBuf};\n+use std::path::PathBuf;\n use std::process::Command;\n \n use crate::builder::{Builder, Cargo as CargoCommand, RunConfig, ShouldRun, Step};\n@@ -683,6 +683,50 @@ impl Step for LldWrapper {\n     }\n }\n \n+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n+pub struct RustAnalyzer {\n+    pub compiler: Compiler,\n+    pub target: TargetSelection,\n+}\n+\n+impl Step for RustAnalyzer {\n+    type Output = Option<PathBuf>;\n+    const DEFAULT: bool = true;\n+    const ONLY_HOSTS: bool = true;\n+\n+    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n+        let builder = run.builder;\n+        run.path(\"src/tools/rust-analyzer/crates/rust-analyzer\").default_condition(\n+            builder.config.extended\n+                && builder\n+                    .config\n+                    .tools\n+                    .as_ref()\n+                    .map_or(true, |tools| tools.iter().any(|tool| tool == \"rust-analyzer\")),\n+        )\n+    }\n+\n+    fn make_run(run: RunConfig<'_>) {\n+        run.builder.ensure(RustAnalyzer {\n+            compiler: run.builder.compiler(run.builder.top_stage, run.builder.config.build),\n+            target: run.target,\n+        });\n+    }\n+\n+    fn run(self, builder: &Builder<'_>) -> Option<PathBuf> {\n+        builder.ensure(ToolBuild {\n+            compiler: self.compiler,\n+            target: self.target,\n+            tool: \"rust-analyzer\",\n+            mode: Mode::ToolStd,\n+            path: \"src/tools/rust-analyzer/crates/rust-analyzer\",\n+            extra_features: vec![\"in-rust-tree\".to_owned()],\n+            is_optional_tool: true,\n+            source_type: SourceType::InTree,\n+        })\n+    }\n+}\n+\n macro_rules! tool_extended {\n     (($sel:ident, $builder:ident),\n        $($name:ident,\n@@ -780,7 +824,6 @@ tool_extended!((self, builder),\n     // and this is close enough for now.\n     RustDemangler, rust_demangler, \"src/tools/rust-demangler\", \"rust-demangler\", stable=false, in_tree=true, tool_std=true, {};\n     Rustfmt, rustfmt, \"src/tools/rustfmt\", \"rustfmt\", stable=true, in_tree=true, {};\n-    RustAnalyzer, rust_analyzer, \"src/tools/rust-analyzer/crates/rust-analyzer\", \"rust-analyzer\", stable=true, submodule=\"rust-analyzer\", {};\n );\n \n impl<'a> Builder<'a> {"}]}