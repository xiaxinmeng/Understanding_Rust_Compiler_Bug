{"sha": "1f2c2bb24f88e9fd008ce130017cc1628626d296", "node_id": "C_kwDOAAsO6NoAKDFmMmMyYmIyNGY4OGU5ZmQwMDhjZTEzMDAxN2NjMTYyODYyNmQyOTY", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-04-11T12:27:06Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-04-11T12:27:06Z"}, "message": "Add comments to futex rwlock implementation.", "tree": {"sha": "e07abfc4230fc7181076bffd75f397095bfc7644", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e07abfc4230fc7181076bffd75f397095bfc7644"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f2c2bb24f88e9fd008ce130017cc1628626d296", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f2c2bb24f88e9fd008ce130017cc1628626d296", "html_url": "https://github.com/rust-lang/rust/commit/1f2c2bb24f88e9fd008ce130017cc1628626d296", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f2c2bb24f88e9fd008ce130017cc1628626d296/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c287915654d0b3f1cc4b060b41db32a83b000c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c287915654d0b3f1cc4b060b41db32a83b000c5", "html_url": "https://github.com/rust-lang/rust/commit/7c287915654d0b3f1cc4b060b41db32a83b000c5"}], "stats": {"total": 13, "additions": 12, "deletions": 1}, "files": [{"sha": "f602479bb52bbdac3a9003d211a937a74a79fdab", "filename": "library/std/src/sys/unix/locks/futex_rwlock.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1f2c2bb24f88e9fd008ce130017cc1628626d296/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Ffutex_rwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f2c2bb24f88e9fd008ce130017cc1628626d296/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Ffutex_rwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Ffutex_rwlock.rs?ref=1f2c2bb24f88e9fd008ce130017cc1628626d296", "patch": "@@ -45,6 +45,11 @@ fn writers_waiting(state: i32) -> bool {\n \n fn read_lockable(state: i32) -> bool {\n     // This also returns false if the counter could overflow if we tried to read lock it.\n+    //\n+    // We don't allow read-locking if there's readers waiting, even if the lock is unlocked\n+    // and there's no writers waiting. The only situation when this happens is after unlocking,\n+    // at which point the unlocking thread might be waking up writers, which have priority over readers.\n+    // The unlocking thread will clear the readers waiting bit and wake up readers, if necssary.\n     state & MASK < MAX_READERS && !readers_waiting(state) && !writers_waiting(state)\n }\n \n@@ -249,7 +254,8 @@ impl RwLock {\n             if self.wake_writer() {\n                 return;\n             }\n-            // No writers were actually waiting. Continue to wake up readers instead.\n+            // No writers were actually blocked on futex_wait, so we continue\n+            // to wake up readers instead, since we can't be sure if we notified a writer.\n             state = READERS_WAITING;\n         }\n \n@@ -261,6 +267,11 @@ impl RwLock {\n         }\n     }\n \n+    /// This wakes one writer and returns true if we woke up a writer that was\n+    /// blocked on futex_wait.\n+    ///\n+    /// If this returns false, it might still be the case that we notified a\n+    /// writer that was about to go to sleep.\n     fn wake_writer(&self) -> bool {\n         self.writer_notify.fetch_add(1, Release);\n         futex_wake(&self.writer_notify)"}]}