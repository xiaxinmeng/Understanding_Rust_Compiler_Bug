{"sha": "f41b4e351b4fface2ad3c4b74912837c4059d56a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0MWI0ZTM1MWI0ZmZhY2UyYWQzYzRiNzQ5MTI4MzdjNDA1OWQ1NmE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-11T16:21:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-11T16:21:21Z"}, "message": "auto merge of #10888 : chris-morgan/rust/2013-12-10-vim-updates, r=thestinger\n\n### Fix up float highlighting in Vim.\r\n\r\nThis fixes a regression introduced in #10793.\r\n\r\nHaving a colorscheme which highlights Float the same as Number (I\r\nbelieve most do), I hadn't noticed that having the special case of \"5.\"\r\nfloats (which was one of the added features in #10793) last made it take\r\nprecedence, and so it was left to @thestinger to notice it.\r\n\r\nThe regression meant that in `5.0`, the `5.` was a `rustFloat` (linked\r\nby default to `Float`) and the `0` was a `rustDecNumber` (linked by\r\ndefault to `Number`), and for `5.0f32` the `5.` was a `rustFloat` and\r\nthe `0f32` was a second `rustFloat` (and thus appeared correctly, though\r\nfor the wrong reason).\r\n\r\n### Vim keyword highlighting improvements.\r\n\r\n- Removed the `log` keyword;\r\n- Removed keyword duplicates;\r\n- Highlighted `const` as `Error` rather than `StorageClass`; and\r\n- Highlighted all the reserved keywords as `Error` rather than as\r\n  `Keyword`.\r\n\r\n(As usual, these highlightings can be overridden if desired.)", "tree": {"sha": "f2317c5a40327d87b0602f8b89ed56ed023c3ae4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2317c5a40327d87b0602f8b89ed56ed023c3ae4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f41b4e351b4fface2ad3c4b74912837c4059d56a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f41b4e351b4fface2ad3c4b74912837c4059d56a", "html_url": "https://github.com/rust-lang/rust/commit/f41b4e351b4fface2ad3c4b74912837c4059d56a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f41b4e351b4fface2ad3c4b74912837c4059d56a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d441c5468814b0d8f9ccdba426baf1f16b5134fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/d441c5468814b0d8f9ccdba426baf1f16b5134fc", "html_url": "https://github.com/rust-lang/rust/commit/d441c5468814b0d8f9ccdba426baf1f16b5134fc"}, {"sha": "f39c883598ca937b8b84720f184cdf370daf107d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f39c883598ca937b8b84720f184cdf370daf107d", "html_url": "https://github.com/rust-lang/rust/commit/f39c883598ca937b8b84720f184cdf370daf107d"}], "stats": {"total": 23, "additions": 13, "deletions": 10}, "files": [{"sha": "9131c4faa8021621afcafcf26c4da5514d42f9e4", "filename": "src/etc/vim/syntax/rust.vim", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f41b4e351b4fface2ad3c4b74912837c4059d56a/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim", "raw_url": "https://github.com/rust-lang/rust/raw/f41b4e351b4fface2ad3c4b74912837c4059d56a/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim?ref=f41b4e351b4fface2ad3c4b74912837c4059d56a", "patch": "@@ -3,7 +3,7 @@\n \" Maintainer:   Patrick Walton <pcwalton@mozilla.com>\n \" Maintainer:   Ben Blum <bblum@cs.cmu.edu>\n \" Maintainer:   Chris Morgan <me@chrismorgan.info>\n-\" Last Change:  2013 Dec 04\n+\" Last Change:  2013 Dec 10\n \n if version < 600\n   syntax clear\n@@ -19,23 +19,23 @@ syn keyword   rustOperator    as\n syn match     rustAssert      \"\\<assert\\(\\w\\)*!\" contained\n syn match     rustFail        \"\\<fail\\(\\w\\)*!\" contained\n syn keyword   rustKeyword     break continue do extern\n-syn keyword   rustKeyword     in if impl let log\n-syn keyword   rustKeyword     for impl let log\n-syn keyword   rustKeyword     loop mod once priv pub\n+syn keyword   rustKeyword     for in if impl let\n+syn keyword   rustKeyword     loop once priv pub\n syn keyword   rustKeyword     return\n syn keyword   rustKeyword     unsafe while\n syn keyword   rustKeyword     use nextgroup=rustModPath skipwhite\n \" FIXME: Scoped impl's name is also fallen in this category\n syn keyword   rustKeyword     mod trait struct enum type nextgroup=rustIdentifier skipwhite\n syn keyword   rustKeyword     fn nextgroup=rustFuncName skipwhite\n syn keyword   rustKeyword     proc\n-syn keyword   rustStorage     const mut ref static\n+syn keyword   rustStorage     mut ref static\n+syn keyword   rustObsoleteStorage const\n \n syn match     rustIdentifier  contains=rustIdentifierPrime \"\\%([^[:cntrl:][:space:][:punct:][:digit:]]\\|_\\)\\%([^[:cntrl:][:punct:][:space:]]\\|_\\)*\" display contained\n syn match     rustFuncName    \"\\%([^[:cntrl:][:space:][:punct:][:digit:]]\\|_\\)\\%([^[:cntrl:][:punct:][:space:]]\\|_\\)*\" display contained\n \n \" Reserved (but not yet used) keywords {{{2\n-syn keyword   rustKeyword     alignof be offsetof pure sizeof typeof yield\n+syn keyword   rustReservedKeyword alignof be offsetof pure sizeof typeof yield\n \n \" Built-in types {{{2\n syn keyword   rustType        int uint float char bool u8 u16 u32 u64 f32\n@@ -160,14 +160,15 @@ syn match     rustHexNumber   display \"\\<0x[a-fA-F0-9_]\\+\\%([iu]\\%(8\\|16\\|32\\|64\n syn match     rustOctNumber   display \"\\<0o[0-7_]\\+\\%([iu]\\%(8\\|16\\|32\\|64\\)\\=\\)\\=\"\n syn match     rustBinNumber   display \"\\<0b[01_]\\+\\%([iu]\\%(8\\|16\\|32\\|64\\)\\=\\)\\=\"\n \n-\" To mark it as a float, it must have at least one of the three things integral values don't have:\n+\" Special case for numbers of the form \"1.\" which are float literals, unless followed by\n+\" an identifier, which makes them integer literals with a method call or field access.\n+\" (This must go first so the others take precedence.)\n+syn match     rustFloat       display \"\\<[0-9][0-9_]*\\.\\%([^[:cntrl:][:space:][:punct:][:digit:]]\\|_\\)\\@!\"\n+\" To mark a number as a normal float, it must have at least one of the three things integral values don't have:\n \" a decimal point and more numbers; an exponent; and a type suffix.\n syn match     rustFloat       display \"\\<[0-9][0-9_]*\\%(\\.[0-9][0-9_]*\\)\\%([eE][+-]\\=[0-9_]\\+\\)\\=\\(f32\\|f64\\)\\=\"\n syn match     rustFloat       display \"\\<[0-9][0-9_]*\\%(\\.[0-9][0-9_]*\\)\\=\\%([eE][+-]\\=[0-9_]\\+\\)\\(f32\\|f64\\)\\=\"\n syn match     rustFloat       display \"\\<[0-9][0-9_]*\\%(\\.[0-9][0-9_]*\\)\\=\\%([eE][+-]\\=[0-9_]\\+\\)\\=\\(f32\\|f64\\)\"\n-\" Special case for numbers of the form \"1.\" which are float literals, unless followed by\n-\" an identifier, which makes them integer literals with a method call or field access.\n-syn match     rustFloat       display \"\\<[0-9][0-9_]*\\.\\%([^[:cntrl:][:space:][:punct:][:digit:]]\\|_\\)\\@!\"\n \n \" For the benefit of delimitMate\n syn region rustLifetimeCandidate display start=/&'\\%(\\([^'\\\\]\\|\\\\\\(['nrt0\\\\\\\"]\\|x\\x\\{2}\\|u\\x\\{4}\\|U\\x\\{8}\\)\\)'\\)\\@!/ end=/[[:cntrl:][:space:][:punct:]]\\@=\\|$/ contains=rustSigil,rustLifetime\n@@ -227,6 +228,7 @@ hi def link rustSelf          Constant\n hi def link rustFloat         Float\n hi def link rustOperator      Operator\n hi def link rustKeyword       Keyword\n+hi def link rustReservedKeyword Error\n hi def link rustConditional   Conditional\n hi def link rustIdentifier    Identifier\n hi def link rustCapsIdent     rustIdentifier\n@@ -247,6 +249,7 @@ hi def link rustTodo          Todo\n hi def link rustAttribute     PreProc\n hi def link rustDeriving      PreProc\n hi def link rustStorage       StorageClass\n+hi def link rustObsoleteStorage Error\n hi def link rustLifetime      Special\n \n \" Other Suggestions:"}]}