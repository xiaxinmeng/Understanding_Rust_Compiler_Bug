{"sha": "76b0cf812b70b458cbae480af75d788a29a43adc", "node_id": "C_kwDOAAsO6NoAKDc2YjBjZjgxMmI3MGI0NThjYmFlNDgwYWY3NWQ3ODhhMjlhNDNhZGM", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-21T18:06:04Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2023-03-29T14:19:48Z"}, "message": "Walk return-position impl trait in trait deeply in associated_item_def_ids", "tree": {"sha": "396d8e4b352c7474987c5d124fe411a47db13db8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/396d8e4b352c7474987c5d124fe411a47db13db8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76b0cf812b70b458cbae480af75d788a29a43adc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmQkSQQACgkQgTGiTgx5\n768AOQ/9HfazUy8pEICdVpFrLy3qYLOf5s7SMEwfxOuIW7qTMkU2Q9RkqGKHexM7\n26fT19xffUxDJyijfLuL/DS1L3pvHPhu2nGamMPd4W7XPlhHwox3dyZ4b5zyygMl\no/5ij1uDsxHse40P7zUAAuY1MgFeiGtnVKuE9SkE8aFrAEhHfZw6AyWI+GZFkAqH\nKXFYLq5GWTouioz659gUOLUZtJmtaI3XMF0bzjtqVCsVZXWxNKCkjW27c63x5VO3\nqSWqcqiahrN/UssFQvsIPqroA2dNRpofSBaGmTJdd/7LSnV0s6YoOVqDuauYyJgw\nEj/rt3pnozuFN1gQWP0zovYZd284PQFk5i6Etdwqv2C2oEc3GZLVv6bDd1OezQmk\nnGNe4UyL7KHqUUAqagQt7sWn1O33amr2Ob5LXuBwWrgpfWiaf6B5MoCm7HcNXfFI\nb1xLLxwrPo8hEknmg5ez0VP78+UJEHsDBcLsvshR/86X6HMtBDMxEGIkTXaWA+pD\nTDYqQGzQvxU8vffXUghV2i9BGRGGEob9UY2Y9eaixJ5IM59gciVcTduK9LAmUhY+\nEAj2N1TLIJYunn2KXcni7xMornqoVMqTrT252vpjiaJ5MqRT/lpivv04QFLefrdm\nJRyrZMhxo+gFFhCVxRfa5X8vufnt4AE09uXjQ/1ibrpQxNnDraE=\n=xJDE\n-----END PGP SIGNATURE-----", "payload": "tree 396d8e4b352c7474987c5d124fe411a47db13db8\nparent 478cbb42b730ba4739351b72ce2aa928e78e2f81\nauthor Michael Goulet <michael@errs.io> 1679421964 +0000\ncommitter Santiago Pastorino <spastorino@gmail.com> 1680099588 -0300\n\nWalk return-position impl trait in trait deeply in associated_item_def_ids\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76b0cf812b70b458cbae480af75d788a29a43adc", "html_url": "https://github.com/rust-lang/rust/commit/76b0cf812b70b458cbae480af75d788a29a43adc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76b0cf812b70b458cbae480af75d788a29a43adc/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "478cbb42b730ba4739351b72ce2aa928e78e2f81", "url": "https://api.github.com/repos/rust-lang/rust/commits/478cbb42b730ba4739351b72ce2aa928e78e2f81", "html_url": "https://github.com/rust-lang/rust/commit/478cbb42b730ba4739351b72ce2aa928e78e2f81"}], "stats": {"total": 56, "additions": 35, "deletions": 21}, "files": [{"sha": "de1e1a527d5a96242029431435045807311a4b2d", "filename": "compiler/rustc_ty_utils/src/assoc.rs", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/76b0cf812b70b458cbae480af75d788a29a43adc/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76b0cf812b70b458cbae480af75d788a29a43adc/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs?ref=76b0cf812b70b458cbae480af75d788a29a43adc", "patch": "@@ -1,3 +1,4 @@\n+use rustc_data_structures::fx::FxIndexSet;\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{DefId, DefIdMap, LocalDefId};\n@@ -196,20 +197,26 @@ fn associated_types_for_impl_traits_in_associated_fn(\n \n     match tcx.def_kind(parent_def_id) {\n         DefKind::Trait => {\n-            struct RPITVisitor {\n-                rpits: Vec<LocalDefId>,\n+            struct RPITVisitor<'tcx> {\n+                rpits: FxIndexSet<LocalDefId>,\n+                tcx: TyCtxt<'tcx>,\n             }\n \n-            impl<'v> Visitor<'v> for RPITVisitor {\n-                fn visit_ty(&mut self, ty: &'v hir::Ty<'v>) {\n-                    if let hir::TyKind::OpaqueDef(item_id, _, _) = ty.kind {\n-                        self.rpits.push(item_id.owner_id.def_id)\n+            impl<'tcx> Visitor<'tcx> for RPITVisitor<'tcx> {\n+                fn visit_ty(&mut self, ty: &'tcx hir::Ty<'tcx>) {\n+                    if let hir::TyKind::OpaqueDef(item_id, _, _) = ty.kind\n+                        && self.rpits.insert(item_id.owner_id.def_id)\n+                    {\n+                        let opaque_item = self.tcx.hir().expect_item(item_id.owner_id.def_id).expect_opaque_ty();\n+                        for bound in opaque_item.bounds {\n+                            intravisit::walk_param_bound(self, bound);\n+                        }\n                     }\n                     intravisit::walk_ty(self, ty)\n                 }\n             }\n \n-            let mut visitor = RPITVisitor { rpits: Vec::new() };\n+            let mut visitor = RPITVisitor { tcx, rpits: FxIndexSet::default() };\n \n             if let Some(output) = tcx.hir().get_fn_output(fn_def_id) {\n                 visitor.visit_fn_ret_ty(output);\n@@ -227,13 +234,9 @@ fn associated_types_for_impl_traits_in_associated_fn(\n \n             tcx.arena.alloc_from_iter(\n                 tcx.associated_types_for_impl_traits_in_associated_fn(trait_fn_def_id).iter().map(\n-                    move |trait_assoc_def_id| {\n-                        associated_type_for_impl_trait_in_impl(\n-                            tcx,\n-                            trait_assoc_def_id.expect_local(),\n-                            fn_def_id,\n-                        )\n-                        .to_def_id()\n+                    move |&trait_assoc_def_id| {\n+                        associated_type_for_impl_trait_in_impl(tcx, trait_assoc_def_id, fn_def_id)\n+                            .to_def_id()\n                     },\n                 ),\n             )\n@@ -355,7 +358,7 @@ fn associated_type_for_impl_trait_in_trait(\n /// that inherits properties that we infer from the method and the associated type.\n fn associated_type_for_impl_trait_in_impl(\n     tcx: TyCtxt<'_>,\n-    trait_assoc_def_id: LocalDefId,\n+    trait_assoc_def_id: DefId,\n     impl_fn_def_id: LocalDefId,\n ) -> LocalDefId {\n     let impl_local_def_id = tcx.local_parent(impl_fn_def_id);\n@@ -380,7 +383,7 @@ fn associated_type_for_impl_trait_in_impl(\n         name: kw::Empty,\n         kind: ty::AssocKind::Type,\n         def_id,\n-        trait_item_def_id: Some(trait_assoc_def_id.to_def_id()),\n+        trait_item_def_id: Some(trait_assoc_def_id),\n         container: ty::ImplContainer,\n         fn_has_self_parameter: false,\n         opt_rpitit_info: Some(ImplTraitInTraitData::Impl { fn_def_id: impl_fn_def_id.to_def_id() }),"}, {"sha": "ffeabe5c2edabd52387d5a1e6ba38dc19985c03d", "filename": "tests/ui/impl-trait/in-trait/auxiliary/rpitit.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/76b0cf812b70b458cbae480af75d788a29a43adc/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fauxiliary%2Frpitit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76b0cf812b70b458cbae480af75d788a29a43adc/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fauxiliary%2Frpitit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fauxiliary%2Frpitit.rs?ref=76b0cf812b70b458cbae480af75d788a29a43adc", "patch": "@@ -2,12 +2,13 @@\n \n #![feature(return_position_impl_trait_in_trait)]\n \n+use std::ops::Deref;\n+\n pub trait Foo {\n-    fn bar() -> impl Sized;\n+    fn bar() -> impl Deref<Target = impl Sized>;\n }\n \n pub struct Foreign;\n-\n impl Foo for Foreign {\n-    fn bar() {}\n+    fn bar() -> &'static () { &() }\n }"}, {"sha": "f4972d948b24684dccebcc9df7d5cd69c002713e", "filename": "tests/ui/impl-trait/in-trait/foreign.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/76b0cf812b70b458cbae480af75d788a29a43adc/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76b0cf812b70b458cbae480af75d788a29a43adc/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fforeign.rs?ref=76b0cf812b70b458cbae480af75d788a29a43adc", "patch": "@@ -5,7 +5,17 @@\n \n extern crate rpitit;\n \n+use std::sync::Arc;\n+\n+// Implement an RPITIT from another crate.\n+struct Local;\n+impl rpitit::Foo for Local {\n+    fn bar() -> Arc<String> { Arc::new(String::new()) }\n+}\n+\n fn main() {\n-    // Witness an RPITIT from another crate\n-    let () = <rpitit::Foreign as rpitit::Foo>::bar();\n+    // Witness an RPITIT from another crate.\n+    let &() = <rpitit::Foreign as rpitit::Foo>::bar();\n+\n+    let x: Arc<String> = <Local as rpitit::Foo>::bar();\n }"}]}