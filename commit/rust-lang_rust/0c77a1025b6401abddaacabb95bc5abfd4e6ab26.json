{"sha": "0c77a1025b6401abddaacabb95bc5abfd4e6ab26", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjNzdhMTAyNWI2NDAxYWJkZGFhY2FiYjk1YmM1YWJmZDRlNmFiMjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-20T06:56:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-20T06:56:18Z"}, "message": "Auto merge of #903 - RalfJung:discriminant, r=RalfJung\n\nfix discriminant handling\n\nThe Miri side of https://github.com/rust-lang/rust/pull/63448", "tree": {"sha": "e462a821c87626523f940f95c8d1c215dbf0474e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e462a821c87626523f940f95c8d1c215dbf0474e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c77a1025b6401abddaacabb95bc5abfd4e6ab26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c77a1025b6401abddaacabb95bc5abfd4e6ab26", "html_url": "https://github.com/rust-lang/rust/commit/0c77a1025b6401abddaacabb95bc5abfd4e6ab26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c77a1025b6401abddaacabb95bc5abfd4e6ab26/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d83bcbd339c2782edb9a523874e7d9c0bcca012e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d83bcbd339c2782edb9a523874e7d9c0bcca012e", "html_url": "https://github.com/rust-lang/rust/commit/d83bcbd339c2782edb9a523874e7d9c0bcca012e"}, {"sha": "a86ca2452627d19289b076ea8f1762d6d7d77cd9", "url": "https://api.github.com/repos/rust-lang/rust/commits/a86ca2452627d19289b076ea8f1762d6d7d77cd9", "html_url": "https://github.com/rust-lang/rust/commit/a86ca2452627d19289b076ea8f1762d6d7d77cd9"}], "stats": {"total": 103, "additions": 102, "deletions": 1}, "files": [{"sha": "60dae7291d63658295189b309836904e8f66552b", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c77a1025b6401abddaacabb95bc5abfd4e6ab26/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/0c77a1025b6401abddaacabb95bc5abfd4e6ab26/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=0c77a1025b6401abddaacabb95bc5abfd4e6ab26", "patch": "@@ -1 +1 @@\n-64c09694a6ecc434cd3a61ade89beb1de17770c5\n+ea3ba36f3f4b7f0168a27d23c499efeb2304e2d5"}, {"sha": "39bf567076c47246055a30630a9f7d221424c5fd", "filename": "tests/run-pass/enums.rs", "status": "modified", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/0c77a1025b6401abddaacabb95bc5abfd4e6ab26/tests%2Frun-pass%2Fenums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c77a1025b6401abddaacabb95bc5abfd4e6ab26/tests%2Frun-pass%2Fenums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fenums.rs?ref=0c77a1025b6401abddaacabb95bc5abfd4e6ab26", "patch": "@@ -23,6 +23,104 @@ fn test(me: MyEnum) {\n     }\n }\n \n+fn discriminant_overflow() {\n+    // Tests for https://github.com/rust-lang/rust/issues/62138.\n+    #[repr(u8)]\n+    #[allow(dead_code)]\n+    enum WithWraparoundInvalidValues {\n+        X = 1,\n+        Y = 254,\n+    }\n+\n+    #[allow(dead_code)]\n+    enum Foo {\n+        A,\n+        B,\n+        C(WithWraparoundInvalidValues),\n+    }\n+\n+    let x = Foo::B;\n+    match x {\n+        Foo::B => {},\n+        _ => panic!(),\n+    }\n+}\n+\n+fn more_discriminant_overflow() {\n+    pub enum Infallible {}\n+\n+    // The check that the `bool` field of `V1` is encoding a \"niche variant\"\n+    // (i.e. not `V1`, so `V3` or `V4`) used to be mathematically incorrect,\n+    // causing valid `V1` values to be interpreted as other variants.\n+    #[allow(dead_code)]\n+    pub enum E1 {\n+        V1 { f: bool },\n+        V2 { f: Infallible },\n+        V3,\n+        V4,\n+    }\n+\n+    // Computing the discriminant used to be done using the niche type (here `u8`,\n+    // from the `bool` field of `V1`), overflowing for variants with large enough\n+    // indices (`V3` and `V4`), causing them to be interpreted as other variants.\n+    #[allow(dead_code)]\n+    pub enum E2<X> {\n+        V1 { f: bool },\n+\n+        /*_00*/ _01(X), _02(X), _03(X), _04(X), _05(X), _06(X), _07(X),\n+        _08(X), _09(X), _0A(X), _0B(X), _0C(X), _0D(X), _0E(X), _0F(X),\n+        _10(X), _11(X), _12(X), _13(X), _14(X), _15(X), _16(X), _17(X),\n+        _18(X), _19(X), _1A(X), _1B(X), _1C(X), _1D(X), _1E(X), _1F(X),\n+        _20(X), _21(X), _22(X), _23(X), _24(X), _25(X), _26(X), _27(X),\n+        _28(X), _29(X), _2A(X), _2B(X), _2C(X), _2D(X), _2E(X), _2F(X),\n+        _30(X), _31(X), _32(X), _33(X), _34(X), _35(X), _36(X), _37(X),\n+        _38(X), _39(X), _3A(X), _3B(X), _3C(X), _3D(X), _3E(X), _3F(X),\n+        _40(X), _41(X), _42(X), _43(X), _44(X), _45(X), _46(X), _47(X),\n+        _48(X), _49(X), _4A(X), _4B(X), _4C(X), _4D(X), _4E(X), _4F(X),\n+        _50(X), _51(X), _52(X), _53(X), _54(X), _55(X), _56(X), _57(X),\n+        _58(X), _59(X), _5A(X), _5B(X), _5C(X), _5D(X), _5E(X), _5F(X),\n+        _60(X), _61(X), _62(X), _63(X), _64(X), _65(X), _66(X), _67(X),\n+        _68(X), _69(X), _6A(X), _6B(X), _6C(X), _6D(X), _6E(X), _6F(X),\n+        _70(X), _71(X), _72(X), _73(X), _74(X), _75(X), _76(X), _77(X),\n+        _78(X), _79(X), _7A(X), _7B(X), _7C(X), _7D(X), _7E(X), _7F(X),\n+        _80(X), _81(X), _82(X), _83(X), _84(X), _85(X), _86(X), _87(X),\n+        _88(X), _89(X), _8A(X), _8B(X), _8C(X), _8D(X), _8E(X), _8F(X),\n+        _90(X), _91(X), _92(X), _93(X), _94(X), _95(X), _96(X), _97(X),\n+        _98(X), _99(X), _9A(X), _9B(X), _9C(X), _9D(X), _9E(X), _9F(X),\n+        _A0(X), _A1(X), _A2(X), _A3(X), _A4(X), _A5(X), _A6(X), _A7(X),\n+        _A8(X), _A9(X), _AA(X), _AB(X), _AC(X), _AD(X), _AE(X), _AF(X),\n+        _B0(X), _B1(X), _B2(X), _B3(X), _B4(X), _B5(X), _B6(X), _B7(X),\n+        _B8(X), _B9(X), _BA(X), _BB(X), _BC(X), _BD(X), _BE(X), _BF(X),\n+        _C0(X), _C1(X), _C2(X), _C3(X), _C4(X), _C5(X), _C6(X), _C7(X),\n+        _C8(X), _C9(X), _CA(X), _CB(X), _CC(X), _CD(X), _CE(X), _CF(X),\n+        _D0(X), _D1(X), _D2(X), _D3(X), _D4(X), _D5(X), _D6(X), _D7(X),\n+        _D8(X), _D9(X), _DA(X), _DB(X), _DC(X), _DD(X), _DE(X), _DF(X),\n+        _E0(X), _E1(X), _E2(X), _E3(X), _E4(X), _E5(X), _E6(X), _E7(X),\n+        _E8(X), _E9(X), _EA(X), _EB(X), _EC(X), _ED(X), _EE(X), _EF(X),\n+        _F0(X), _F1(X), _F2(X), _F3(X), _F4(X), _F5(X), _F6(X), _F7(X),\n+        _F8(X), _F9(X), _FA(X), _FB(X), _FC(X), _FD(X), _FE(X), _FF(X),\n+\n+        V3,\n+        V4,\n+    }\n+\n+    if let E1::V2 { .. } = (E1::V1 { f: true }) {\n+        unreachable!()\n+    }\n+    if let E1::V1 { .. } = (E1::V1 { f: true }) {\n+    } else {\n+        unreachable!()\n+    }\n+\n+    if let E2::V1 { .. } = E2::V3::<Infallible> {\n+        unreachable!()\n+    }\n+    if let E2::V3 { .. } = E2::V3::<Infallible> {\n+    } else {\n+        unreachable!()\n+    }\n+}\n+\n fn main() {\n     test(MyEnum::MyEmptyVariant);\n     test(MyEnum::MyNewtypeVariant(42));\n@@ -31,4 +129,7 @@ fn main() {\n         my_first_field: 45,\n         my_second_field: 46,\n     });\n+\n+    discriminant_overflow();\n+    more_discriminant_overflow();\n }"}]}