{"sha": "aee8f173ec46d4b98cc562c6e7cad54bef764298", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlZThmMTczZWM0NmQ0Yjk4Y2M1NjJjNmU3Y2FkNTRiZWY3NjQyOTg=", "commit": {"author": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-08-14T21:48:36Z"}, "committer": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-08-14T21:50:36Z"}, "message": "Delegate writing to emulate_foreign_item", "tree": {"sha": "70b4d0ca1bb492f9600a83ebd0a74ada4d3b2f8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70b4d0ca1bb492f9600a83ebd0a74ada4d3b2f8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aee8f173ec46d4b98cc562c6e7cad54bef764298", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aee8f173ec46d4b98cc562c6e7cad54bef764298", "html_url": "https://github.com/rust-lang/rust/commit/aee8f173ec46d4b98cc562c6e7cad54bef764298", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aee8f173ec46d4b98cc562c6e7cad54bef764298/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41f8cfa30edc92c3c42a08059d0737d5ee4b87ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/41f8cfa30edc92c3c42a08059d0737d5ee4b87ac", "html_url": "https://github.com/rust-lang/rust/commit/41f8cfa30edc92c3c42a08059d0737d5ee4b87ac"}], "stats": {"total": 56, "additions": 29, "deletions": 27}, "files": [{"sha": "c941bf4f50e3f0c74afc2671bec6fe4ae4a3a382", "filename": "src/shims/env.rs", "status": "modified", "additions": 15, "deletions": 24, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/aee8f173ec46d4b98cc562c6e7cad54bef764298/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee8f173ec46d4b98cc562c6e7cad54bef764298/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=aee8f173ec46d4b98cc562c6e7cad54bef764298", "patch": "@@ -52,34 +52,28 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn getenv(\n         &mut self,\n         name_op: OpTy<'tcx, Tag>,\n-        dest: PlaceTy<'tcx, Tag>\n-    ) -> InterpResult<'tcx> {\n+    ) -> InterpResult<'tcx, Scalar<Tag>> {\n         let this = self.eval_context_mut();\n \n-        let result = {\n-            let name_ptr = this.read_scalar(name_op)?.not_undef()?;\n-            let name = this.memory().read_c_str(name_ptr)?;\n-            match this.machine.env_vars.map.get(name) {\n-                Some(&var) => Scalar::Ptr(var),\n-                None => Scalar::ptr_null(&*this.tcx),\n-            }\n-        };\n-        this.write_scalar(result, dest)?;\n-        Ok(())\n+        let name_ptr = this.read_scalar(name_op)?.not_undef()?;\n+        let name = this.memory().read_c_str(name_ptr)?;\n+        Ok(match this.machine.env_vars.map.get(name) {\n+            Some(&var) => Scalar::Ptr(var),\n+            None => Scalar::ptr_null(&*this.tcx),\n+        })\n     }\n \n     fn setenv(\n         &mut self,\n         name_op: OpTy<'tcx, Tag>,\n         value_op: OpTy<'tcx, Tag>,\n-        dest: PlaceTy<'tcx, Tag>\n-    ) -> InterpResult<'tcx> {\n+    ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        let mut new = None;\n         let name_ptr = this.read_scalar(name_op)?.not_undef()?;\n         let value_ptr = this.read_scalar(value_op)?.not_undef()?;\n         let value = this.memory().read_c_str(value_ptr)?;\n+        let mut new = None;\n         if !this.is_null(name_ptr)? {\n             let name = this.memory().read_c_str(name_ptr)?;\n             if !name.is_empty() && !name.contains(&b'=') {\n@@ -91,22 +85,20 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             if let Some(var) = this.machine.env_vars.map.insert(name.to_owned(), value_copy) {\n                 this.memory_mut().deallocate(var, None, MiriMemoryKind::Env.into())?;\n             }\n-            this.write_null(dest)?;\n+            Ok(0)\n         } else {\n-            this.write_scalar(Scalar::from_int(-1, dest.layout.size), dest)?;\n+            Ok(-1)\n         }\n-        Ok(())\n     }\n \n     fn unsetenv(\n         &mut self,\n         name_op: OpTy<'tcx, Tag>,\n-        dest: PlaceTy<'tcx, Tag>\n-    ) -> InterpResult<'tcx> {\n+    ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        let mut success = None;\n         let name_ptr = this.read_scalar(name_op)?.not_undef()?;\n+        let mut success = None;\n         if !this.is_null(name_ptr)? {\n             let name = this.memory().read_c_str(name_ptr)?.to_owned();\n             if !name.is_empty() && !name.contains(&b'=') {\n@@ -117,10 +109,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             if let Some(var) = old {\n                 this.memory_mut().deallocate(var, None, MiriMemoryKind::Env.into())?;\n             }\n-            this.write_null(dest)?;\n+            Ok(0)\n         } else {\n-            this.write_scalar(Scalar::from_int(-1, dest.layout.size), dest)?;\n+            Ok(-1)\n         }\n-        Ok(())\n     }\n }"}, {"sha": "59e7673dcab5f58f729d5841f8594bfe771f9c21", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/aee8f173ec46d4b98cc562c6e7cad54bef764298/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee8f173ec46d4b98cc562c6e7cad54bef764298/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=aee8f173ec46d4b98cc562c6e7cad54bef764298", "patch": "@@ -421,9 +421,20 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 }\n             }\n \n-            \"getenv\" => this.getenv(args[0], dest)?,\n-            \"unsetenv\" => this.unsetenv(args[0], dest)?,\n-            \"setenv\" => this.setenv(args[0], args[1], dest)?,\n+            \"getenv\" => {\n+                let result = this.getenv(args[0])?;\n+                this.write_scalar(result, dest)?;\n+            }\n+\n+            \"unsetenv\" => {\n+                let result = this.unsetenv(args[0])?;\n+                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+            }\n+\n+            \"setenv\" => {\n+                let result = this.setenv(args[0], args[1])?;\n+                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+            }\n \n             \"write\" => {\n                 let fd = this.read_scalar(args[0])?.to_i32()?;"}]}