{"sha": "7db49b9612e97e29bbd933b550f156d2ea4de3e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkYjQ5Yjk2MTJlOTdlMjliYmQ5MzNiNTUwZjE1NmQyZWE0ZGUzZTY=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2017-11-14T19:47:31Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2017-11-16T23:37:28Z"}, "message": "Deduplicated borrow checking errors.", "tree": {"sha": "def71efd193b11d3b26439ce0f7b435e11c7b558", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/def71efd193b11d3b26439ce0f7b435e11c7b558"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7db49b9612e97e29bbd933b550f156d2ea4de3e6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJaDiE4AAoJEAF2C0+fU/FUJlAP/2E/CIM4L71X5NIQb86qahqD\n5RmynI90Yxe2B/YskUaeng+Y3Axpt4wqUO1fx7juzNl5kt2CQCjJ7n9JdZ7m/I/L\naT1fLtSUcqSXWRVRLZfv3j40qXzt15QnOxdn3tjS0aDeRgm034QAA84SKLkO11i4\nfWM82ib7Q4c2TMouTcQ2rAQ41rNCr4m9b7J9Rb6VEmNxB+uWsqoV0ObjRet9Bxli\n+gRz+6pI90ES+9mhEaGdOfIqbUS+nSicQEXA2CYJJJ77w0AoGbbAJ4M6nfKF21oM\nIVjJloiGLZl9X6l6kPdUsu6LkGnVr4I+Bg+38cy0N4wAhfH8jhSiAfcGglAPvabo\ny9ZCqYmRM/EYdSsmWHKRot83PE1IQ+uKsnwWgka9iuWs1gf9LQLnmmjLLwO5JlHO\nqC73sOQgcPQv4BCK6IX526EKfuMsplwEgX/fmZtUTwM4U7LLLWSw6zy1xKAqGihf\n6AldnHUSEiXU5c8S8QRDCxbLSxI2TOeSVVGKXy6sOc9pwAfP5zO7g/v2KVNjmeFA\nMGW6iYMqgbl4Kk0LKk6eYabvBlnnXwyuBL84b4qQ7d8SkjpRzfWspAaLLFbjtpgc\nwG2B/UNLf9KiAd5qEdgsq+6I36igua2VpqzaU6s6CNLK46lrzWyBkalcM9ISWdnQ\nQdDIS7qE2HaBjSVa6/cj\n=Rswg\n-----END PGP SIGNATURE-----", "payload": "tree def71efd193b11d3b26439ce0f7b435e11c7b558\nparent d0f8e2913a93573c78cddfd297944cff4eb4c41a\nauthor David Wood <david@davidtw.co> 1510688851 +0000\ncommitter David Wood <david@davidtw.co> 1510875448 +0000\n\nDeduplicated borrow checking errors.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7db49b9612e97e29bbd933b550f156d2ea4de3e6", "html_url": "https://github.com/rust-lang/rust/commit/7db49b9612e97e29bbd933b550f156d2ea4de3e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7db49b9612e97e29bbd933b550f156d2ea4de3e6/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0f8e2913a93573c78cddfd297944cff4eb4c41a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0f8e2913a93573c78cddfd297944cff4eb4c41a", "html_url": "https://github.com/rust-lang/rust/commit/d0f8e2913a93573c78cddfd297944cff4eb4c41a"}], "stats": {"total": 39, "additions": 29, "deletions": 10}, "files": [{"sha": "1c2289c758defabf76636f18b17e58f87c6456ec", "filename": "src/librustc_mir/borrow_check.rs", "status": "modified", "additions": 29, "deletions": 10, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/7db49b9612e97e29bbd933b550f156d2ea4de3e6/src%2Flibrustc_mir%2Fborrow_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db49b9612e97e29bbd933b550f156d2ea4de3e6/src%2Flibrustc_mir%2Fborrow_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check.rs?ref=7db49b9612e97e29bbd933b550f156d2ea4de3e6", "patch": "@@ -20,6 +20,7 @@ use rustc::mir::{Mir, Mutability, Operand, Projection, ProjectionElem, Rvalue};\n use rustc::mir::{Statement, StatementKind, Terminator, TerminatorKind};\n use transform::nll;\n \n+use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::indexed_set::{self, IdxSetBuf};\n use rustc_data_structures::indexed_vec::{Idx};\n \n@@ -136,6 +137,7 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n         node_id: id,\n         move_data: &mdpe.move_data,\n         param_env: param_env,\n+        storage_drop_or_dead_error_reported: FxHashSet(),\n     };\n \n     let mut state = InProgress::new(flow_borrows,\n@@ -153,6 +155,10 @@ pub struct MirBorrowckCtxt<'cx, 'gcx: 'tcx, 'tcx: 'cx> {\n     node_id: ast::NodeId,\n     move_data: &'cx MoveData<'tcx>,\n     param_env: ParamEnv<'gcx>,\n+    /// This field keeps track of when storage drop or dead errors are reported\n+    /// in order to stop duplicate error reporting and identify the conditions required\n+    /// for a \"temporary value dropped here while still borrowed\" error. See #45360.\n+    storage_drop_or_dead_error_reported: FxHashSet<Local>,\n }\n \n // (forced to be `pub` due to its use as an associated type below.)\n@@ -281,10 +287,12 @@ impl<'cx, 'gcx, 'tcx> DataflowResultsConsumer<'cx, 'tcx> for MirBorrowckCtxt<'cx\n             }\n \n             StatementKind::StorageDead(local) => {\n-                self.access_lvalue(ContextKind::StorageDead.new(location),\n-                                   (&Lvalue::Local(local), span),\n-                                   (Shallow(None), Write(WriteKind::StorageDead)),\n-                                   flow_state);\n+                if self.storage_drop_or_dead_error_reported.insert(local) {\n+                    self.access_lvalue(ContextKind::StorageDead.new(location),\n+                                       (&Lvalue::Local(local), span),\n+                                       (Shallow(None), Write(WriteKind::StorageDead)),\n+                                       flow_state);\n+                }\n             }\n         }\n     }\n@@ -604,12 +612,23 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         let erased_ty = gcx.lift(&self.tcx.erase_regions(&ty)).unwrap();\n         let moves_by_default = erased_ty.moves_by_default(gcx, self.param_env, DUMMY_SP);\n \n-        if moves_by_default {\n-            // move of lvalue: check if this is move of already borrowed path\n-            self.access_lvalue(context, lvalue_span, (Deep, Write(WriteKind::Move)), flow_state);\n-        } else {\n-            // copy of lvalue: check if this is \"copy of frozen path\" (FIXME: see check_loans.rs)\n-            self.access_lvalue(context, lvalue_span, (Deep, Read(ReadKind::Copy)), flow_state);\n+        // Check if error has already been reported to stop duplicate reporting.\n+        let has_storage_drop_or_dead_error_reported = match *lvalue {\n+            Lvalue::Local(local) => self.storage_drop_or_dead_error_reported.insert(local),\n+            _ => false,\n+        };\n+\n+        if !has_storage_drop_or_dead_error_reported {\n+            if moves_by_default {\n+                // move of lvalue: check if this is move of already borrowed path\n+                self.access_lvalue(context, lvalue_span, (Deep, Write(WriteKind::Move)),\n+                                   flow_state);\n+            } else {\n+                // copy of lvalue: check if this is \"copy of frozen path\"\n+                // (FIXME: see check_loans.rs)\n+                self.access_lvalue(context, lvalue_span, (Deep, Read(ReadKind::Copy)),\n+                                   flow_state);\n+            }\n         }\n \n         // Finally, check if path was already moved."}]}