{"sha": "4e280656189588a3cc30b86599a0ff4f211030b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlMjgwNjU2MTg5NTg4YTNjYzMwYjg2NTk5YTBmZjRmMjExMDMwYjg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-07-15T18:07:01Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-07-15T20:47:11Z"}, "message": "tweak pointer out-of-bounds error message", "tree": {"sha": "653d9dba7272d998a0018f2faf571b5a2524c107", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/653d9dba7272d998a0018f2faf571b5a2524c107"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e280656189588a3cc30b86599a0ff4f211030b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e280656189588a3cc30b86599a0ff4f211030b8", "html_url": "https://github.com/rust-lang/rust/commit/4e280656189588a3cc30b86599a0ff4f211030b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e280656189588a3cc30b86599a0ff4f211030b8/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd874a9d5d59e32e7e1afb6c8bac4776dc55d4d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd874a9d5d59e32e7e1afb6c8bac4776dc55d4d1", "html_url": "https://github.com/rust-lang/rust/commit/bd874a9d5d59e32e7e1afb6c8bac4776dc55d4d1"}], "stats": {"total": 65, "additions": 38, "deletions": 27}, "files": [{"sha": "432d078dc9b05d8488b6a58f16ff82483ebedc85", "filename": "compiler/rustc_middle/src/mir/interpret/error.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4e280656189588a3cc30b86599a0ff4f211030b8/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e280656189588a3cc30b86599a0ff4f211030b8/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs?ref=4e280656189588a3cc30b86599a0ff4f211030b8", "patch": "@@ -181,8 +181,8 @@ pub enum CheckInAllocMsg {\n }\n \n impl fmt::Display for CheckInAllocMsg {\n-    /// When this is printed as an error the context looks like this\n-    /// \"{msg}pointer must be in-bounds at offset...\"\n+    /// When this is printed as an error the context looks like this:\n+    /// \"{msg}0x01 is not a valid pointer\".\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(\n             f,\n@@ -318,14 +318,24 @@ impl fmt::Display for UndefinedBehaviorInfo<'_> {\n             PointerUseAfterFree(a) => {\n                 write!(f, \"pointer to {} was dereferenced after this allocation got freed\", a)\n             }\n+            PointerOutOfBounds { alloc_id, offset, size: Size::ZERO, msg, allocation_size } => {\n+                write!(\n+                    f,\n+                    \"{}{} has size {}, so pointer at offset {} is out-of-bounds\",\n+                    msg,\n+                    alloc_id,\n+                    allocation_size.bytes(),\n+                    offset.bytes(),\n+                )\n+            }\n             PointerOutOfBounds { alloc_id, offset, size, msg, allocation_size } => write!(\n                 f,\n-                \"{}pointer must be in-bounds for {} bytes at offset {}, but {} has size {}\",\n+                \"{}{} has size {}, so pointer to {} bytes starting at offset {} is out-of-bounds\",\n                 msg,\n+                alloc_id,\n+                allocation_size.bytes(),\n                 size.bytes(),\n                 offset.bytes(),\n-                alloc_id,\n-                allocation_size.bytes()\n             ),\n             DanglingIntPointer(0, CheckInAllocMsg::InboundsTest) => {\n                 write!(f, \"null pointer is not a valid pointer for this operation\")"}, {"sha": "92541779213a4e33e90286785f2ac7e490358626", "filename": "src/test/ui/const-ptr/out_of_bounds_read.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4e280656189588a3cc30b86599a0ff4f211030b8/src%2Ftest%2Fui%2Fconst-ptr%2Fout_of_bounds_read.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e280656189588a3cc30b86599a0ff4f211030b8/src%2Ftest%2Fui%2Fconst-ptr%2Fout_of_bounds_read.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-ptr%2Fout_of_bounds_read.stderr?ref=4e280656189588a3cc30b86599a0ff4f211030b8", "patch": "@@ -4,7 +4,7 @@ error[E0080]: evaluation of constant value failed\n LL |     unsafe { copy_nonoverlapping(src, dst, count) }\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |              |\n-   |              memory access failed: pointer must be in-bounds for 4 bytes at offset 4, but alloc7 has size 4\n+   |              memory access failed: alloc7 has size 4, so pointer to 4 bytes starting at offset 4 is out-of-bounds\n    |              inside `copy_nonoverlapping::<u32>` at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n    | \n   ::: $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n@@ -23,7 +23,7 @@ error[E0080]: evaluation of constant value failed\n LL |     unsafe { copy_nonoverlapping(src, dst, count) }\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |              |\n-   |              memory access failed: pointer must be in-bounds for 4 bytes at offset 4, but alloc7 has size 4\n+   |              memory access failed: alloc7 has size 4, so pointer to 4 bytes starting at offset 4 is out-of-bounds\n    |              inside `copy_nonoverlapping::<u32>` at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n    | \n   ::: $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n@@ -47,7 +47,7 @@ error[E0080]: evaluation of constant value failed\n LL |     unsafe { copy_nonoverlapping(src, dst, count) }\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |              |\n-   |              memory access failed: pointer must be in-bounds for 4 bytes at offset 4, but alloc7 has size 4\n+   |              memory access failed: alloc7 has size 4, so pointer to 4 bytes starting at offset 4 is out-of-bounds\n    |              inside `copy_nonoverlapping::<u32>` at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n    | \n   ::: $SRC_DIR/core/src/ptr/mod.rs:LL:COL"}, {"sha": "e44f324945481e2f84cc695315d701aecd25078e", "filename": "src/test/ui/consts/const-eval/ub-nonnull.32bit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e280656189588a3cc30b86599a0ff4f211030b8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e280656189588a3cc30b86599a0ff4f211030b8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.32bit.stderr?ref=4e280656189588a3cc30b86599a0ff4f211030b8", "patch": "@@ -13,7 +13,7 @@ error[E0080]: evaluation of constant value failed\n   --> $DIR/ub-nonnull.rs:19:30\n    |\n LL |     let out_of_bounds_ptr = &ptr[255];\n-   |                              ^^^^^^^^ dereferencing pointer failed: pointer must be in-bounds for 256 bytes at offset 0, but alloc11 has size 1\n+   |                              ^^^^^^^^ dereferencing pointer failed: alloc11 has size 1, so pointer to 256 bytes starting at offset 0 is out-of-bounds\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-nonnull.rs:23:1"}, {"sha": "1ce87bc7c1ce87a4e22b3c66578373ff1b11703e", "filename": "src/test/ui/consts/const-eval/ub-nonnull.64bit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e280656189588a3cc30b86599a0ff4f211030b8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e280656189588a3cc30b86599a0ff4f211030b8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.64bit.stderr?ref=4e280656189588a3cc30b86599a0ff4f211030b8", "patch": "@@ -13,7 +13,7 @@ error[E0080]: evaluation of constant value failed\n   --> $DIR/ub-nonnull.rs:19:30\n    |\n LL |     let out_of_bounds_ptr = &ptr[255];\n-   |                              ^^^^^^^^ dereferencing pointer failed: pointer must be in-bounds for 256 bytes at offset 0, but alloc11 has size 1\n+   |                              ^^^^^^^^ dereferencing pointer failed: alloc11 has size 1, so pointer to 256 bytes starting at offset 0 is out-of-bounds\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-nonnull.rs:23:1"}, {"sha": "2a489e8b69c8f70a7fe2a9b8c327cd9289ae7ac4", "filename": "src/test/ui/consts/const-eval/ub-wide-ptr.32bit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e280656189588a3cc30b86599a0ff4f211030b8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e280656189588a3cc30b86599a0ff4f211030b8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.32bit.stderr?ref=4e280656189588a3cc30b86599a0ff4f211030b8", "patch": "@@ -302,7 +302,7 @@ error[E0080]: could not evaluate static initializer\n   --> $DIR/ub-wide-ptr.rs:139:5\n    |\n LL |     mem::transmute::<_, &dyn Trait>((&92u8, &3u64))\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ memory access failed: pointer must be in-bounds for 12 bytes at offset N, but allocN has size N\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ memory access failed: allocN has size N, so pointer to 12 bytes starting at offset N is out-of-bounds\n \n error: aborting due to 28 previous errors\n "}, {"sha": "ff850d2dbe9a0aa2cb072ade07eefda59c98d110", "filename": "src/test/ui/consts/const-eval/ub-wide-ptr.64bit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e280656189588a3cc30b86599a0ff4f211030b8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e280656189588a3cc30b86599a0ff4f211030b8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.64bit.stderr?ref=4e280656189588a3cc30b86599a0ff4f211030b8", "patch": "@@ -302,7 +302,7 @@ error[E0080]: could not evaluate static initializer\n   --> $DIR/ub-wide-ptr.rs:139:5\n    |\n LL |     mem::transmute::<_, &dyn Trait>((&92u8, &3u64))\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ memory access failed: pointer must be in-bounds for 24 bytes at offset N, but allocN has size N\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ memory access failed: allocN has size N, so pointer to 24 bytes starting at offset N is out-of-bounds\n \n error: aborting due to 28 previous errors\n "}, {"sha": "124e16e2b2c0f0cb9410c9199ce1f705c2352441", "filename": "src/test/ui/consts/copy-intrinsic.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4e280656189588a3cc30b86599a0ff4f211030b8/src%2Ftest%2Fui%2Fconsts%2Fcopy-intrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e280656189588a3cc30b86599a0ff4f211030b8/src%2Ftest%2Fui%2Fconsts%2Fcopy-intrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcopy-intrinsic.rs?ref=4e280656189588a3cc30b86599a0ff4f211030b8", "patch": "@@ -24,20 +24,21 @@ const COPY_OOB_1: () = unsafe {\n     let mut x = 0i32;\n     let dangle = (&mut x as *mut i32).wrapping_add(10);\n     // Even if the first ptr is an int ptr and this is a ZST copy, we should detect dangling 2nd ptrs.\n-    copy_nonoverlapping(0x100 as *const i32, dangle, 0); //~ evaluation of constant value failed [E0080]\n+    copy_nonoverlapping(0x100 as *const i32, dangle, 0); //~ ERROR evaluation of constant value failed [E0080]\n+    //~| pointer at offset 40 is out-of-bounds\n };\n const COPY_OOB_2: () = unsafe {\n     let x = 0i32;\n     let dangle = (&x as *const i32).wrapping_add(10);\n     // Even if the second ptr is an int ptr and this is a ZST copy, we should detect dangling 1st ptrs.\n-    copy_nonoverlapping(dangle, 0x100 as *mut i32, 0); //~ evaluation of constant value failed [E0080]\n-    //~| memory access failed: pointer must be in-bounds\n+    copy_nonoverlapping(dangle, 0x100 as *mut i32, 0); //~ ERROR evaluation of constant value failed [E0080]\n+    //~| pointer at offset 40 is out-of-bounds\n };\n \n const COPY_SIZE_OVERFLOW: () = unsafe {\n     let x = 0;\n     let mut y = 0;\n-    copy(&x, &mut y, 1usize << (mem::size_of::<usize>() * 8 - 1)); //~ evaluation of constant value failed [E0080]\n+    copy(&x, &mut y, 1usize << (mem::size_of::<usize>() * 8 - 1)); //~ ERROR evaluation of constant value failed [E0080]\n     //~| overflow computing total size of `copy`\n };\n const COPY_NONOVERLAPPING_SIZE_OVERFLOW: () = unsafe {"}, {"sha": "be41c2db398bebfde848dc5530770c1a3b7ce4a3", "filename": "src/test/ui/consts/copy-intrinsic.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4e280656189588a3cc30b86599a0ff4f211030b8/src%2Ftest%2Fui%2Fconsts%2Fcopy-intrinsic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e280656189588a3cc30b86599a0ff4f211030b8/src%2Ftest%2Fui%2Fconsts%2Fcopy-intrinsic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcopy-intrinsic.stderr?ref=4e280656189588a3cc30b86599a0ff4f211030b8", "patch": "@@ -2,22 +2,22 @@ error[E0080]: evaluation of constant value failed\n   --> $DIR/copy-intrinsic.rs:27:5\n    |\n LL |     copy_nonoverlapping(0x100 as *const i32, dangle, 0);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ memory access failed: pointer must be in-bounds for 0 bytes at offset 40, but alloc5 has size 4\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ memory access failed: alloc5 has size 4, so pointer at offset 40 is out-of-bounds\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/copy-intrinsic.rs:33:5\n+  --> $DIR/copy-intrinsic.rs:34:5\n    |\n LL |     copy_nonoverlapping(dangle, 0x100 as *mut i32, 0);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ memory access failed: pointer must be in-bounds for 0 bytes at offset 40, but alloc7 has size 4\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ memory access failed: alloc7 has size 4, so pointer at offset 40 is out-of-bounds\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/copy-intrinsic.rs:40:5\n+  --> $DIR/copy-intrinsic.rs:41:5\n    |\n LL |     copy(&x, &mut y, 1usize << (mem::size_of::<usize>() * 8 - 1));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflow computing total size of `copy`\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/copy-intrinsic.rs:46:5\n+  --> $DIR/copy-intrinsic.rs:47:5\n    |\n LL |     copy_nonoverlapping(&x, &mut y, 1usize << (mem::size_of::<usize>() * 8 - 1));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflow computing total size of `copy_nonoverlapping`"}, {"sha": "4f7c4f92060a24352fbd799251f2487fd7880413", "filename": "src/test/ui/consts/offset_ub.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4e280656189588a3cc30b86599a0ff4f211030b8/src%2Ftest%2Fui%2Fconsts%2Foffset_ub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e280656189588a3cc30b86599a0ff4f211030b8/src%2Ftest%2Fui%2Fconsts%2Foffset_ub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Foffset_ub.stderr?ref=4e280656189588a3cc30b86599a0ff4f211030b8", "patch": "@@ -18,7 +18,7 @@ error[E0080]: evaluation of constant value failed\n LL |         unsafe { intrinsics::offset(self, count) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                  |\n-   |                  pointer arithmetic failed: pointer must be in-bounds for 2 bytes at offset 0, but allocN has size 1\n+   |                  pointer arithmetic failed: allocN has size 1, so pointer to 2 bytes starting at offset 0 is out-of-bounds\n    |                  inside `ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    | \n   ::: $DIR/offset_ub.rs:9:43\n@@ -32,7 +32,7 @@ error[E0080]: evaluation of constant value failed\n LL |         unsafe { intrinsics::offset(self, count) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                  |\n-   |                  pointer arithmetic failed: pointer must be in-bounds for 101 bytes at offset 0, but allocN has size 100\n+   |                  pointer arithmetic failed: allocN has size 100, so pointer to 101 bytes starting at offset 0 is out-of-bounds\n    |                  inside `ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    | \n   ::: $DIR/offset_ub.rs:10:45\n@@ -102,7 +102,7 @@ error[E0080]: evaluation of constant value failed\n LL |         unsafe { intrinsics::offset(self, count) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                  |\n-   |                  pointer arithmetic failed: pointer must be in-bounds for 1 bytes at offset 0, but allocN has size 0\n+   |                  pointer arithmetic failed: allocN has size 0, so pointer to 1 bytes starting at offset 0 is out-of-bounds\n    |                  inside `ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    | \n   ::: $DIR/offset_ub.rs:17:50"}, {"sha": "9b5fd18f818b0a0b071ddf98d62d6d68583b57f2", "filename": "src/test/ui/consts/ptr_comparisons.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e280656189588a3cc30b86599a0ff4f211030b8/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e280656189588a3cc30b86599a0ff4f211030b8/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.rs?ref=4e280656189588a3cc30b86599a0ff4f211030b8", "patch": "@@ -63,7 +63,7 @@ const _: *const usize = unsafe { (FOO as *const usize).offset(2) };\n const _: *const u8 =\n     unsafe { std::ptr::addr_of!((*(FOO as *const usize as *const [u8; 1000]))[999]) };\n //~^ ERROR evaluation of constant value failed\n-//~| pointer must be in-bounds\n+//~| out-of-bounds\n \n const _: usize = unsafe { std::mem::transmute::<*const usize, usize>(FOO) + 4 };\n //~^ ERROR any use of this value will cause an error"}, {"sha": "6ae24c179ff1c838dff09e859328d831bdc7b74f", "filename": "src/test/ui/consts/ptr_comparisons.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e280656189588a3cc30b86599a0ff4f211030b8/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e280656189588a3cc30b86599a0ff4f211030b8/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr?ref=4e280656189588a3cc30b86599a0ff4f211030b8", "patch": "@@ -4,7 +4,7 @@ error[E0080]: evaluation of constant value failed\n LL |         unsafe { intrinsics::offset(self, count) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                  |\n-   |                  pointer arithmetic failed: pointer must be in-bounds for $TWO_WORDS bytes at offset 0, but alloc3 has size $WORD\n+   |                  pointer arithmetic failed: alloc3 has size $WORD, so pointer to $TWO_WORDS bytes starting at offset 0 is out-of-bounds\n    |                  inside `ptr::const_ptr::<impl *const usize>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    | \n   ::: $DIR/ptr_comparisons.rs:61:34\n@@ -16,7 +16,7 @@ error[E0080]: evaluation of constant value failed\n   --> $DIR/ptr_comparisons.rs:64:33\n    |\n LL |     unsafe { std::ptr::addr_of!((*(FOO as *const usize as *const [u8; 1000]))[999]) };\n-   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereferencing pointer failed: pointer must be in-bounds for 1000 bytes at offset 0, but alloc3 has size $WORD\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereferencing pointer failed: alloc3 has size $WORD, so pointer to 1000 bytes starting at offset 0 is out-of-bounds\n \n error: any use of this value will cause an error\n   --> $DIR/ptr_comparisons.rs:68:27"}]}