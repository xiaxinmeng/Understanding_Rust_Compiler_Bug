{"sha": "e81e09a24e5e1862969aef9ba3a9e71519259eb8", "node_id": "C_kwDOAAsO6NoAKGU4MWUwOWEyNGU1ZTE4NjI5NjlhZWY5YmEzYTllNzE1MTkyNTllYjg", "commit": {"author": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2022-02-09T11:03:27Z"}, "committer": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2022-02-12T11:23:53Z"}, "message": "change to a struct variant", "tree": {"sha": "cb1b15a7c6cb33b3540aa3a66b663216343443ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb1b15a7c6cb33b3540aa3a66b663216343443ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e81e09a24e5e1862969aef9ba3a9e71519259eb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e81e09a24e5e1862969aef9ba3a9e71519259eb8", "html_url": "https://github.com/rust-lang/rust/commit/e81e09a24e5e1862969aef9ba3a9e71519259eb8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e81e09a24e5e1862969aef9ba3a9e71519259eb8/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9cdefd763b910ffd1d42233a8c752ab5fd84ca4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/9cdefd763b910ffd1d42233a8c752ab5fd84ca4d", "html_url": "https://github.com/rust-lang/rust/commit/9cdefd763b910ffd1d42233a8c752ab5fd84ca4d"}], "stats": {"total": 125, "additions": 68, "deletions": 57}, "files": [{"sha": "1738e0495d8e0852efa5d07f6f942ed507bc29d5", "filename": "compiler/rustc_hir/src/def.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e81e09a24e5e1862969aef9ba3a9e71519259eb8/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e81e09a24e5e1862969aef9ba3a9e71519259eb8/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdef.rs?ref=e81e09a24e5e1862969aef9ba3a9e71519259eb8", "patch": "@@ -313,12 +313,12 @@ pub enum Res<Id = hir::HirId> {\n     /// which already works on stable while causing the `const_evaluatable_unchecked` future compat lint.\n     ///\n     /// FIXME(generic_const_exprs): Remove this bodge once that feature is stable.\n-    SelfTy(\n+    SelfTy {\n         /// Optionally, the trait associated with this `Self` type.\n-        Option<DefId>,\n-        /// Optionally, the impl associated with this `Self` type.\n-        Option<(DefId, bool)>,\n-    ),\n+        trait_: Option<DefId>,\n+        /// Optionally, the impl or adt associated with this `Self` type.\n+        alias_to: Option<(DefId, bool)>,\n+    },\n     /// A tool attribute module; e.g., the `rustfmt` in `#[rustfmt::skip]`.\n     ///\n     /// **Belongs to the type namespace.**\n@@ -550,7 +550,7 @@ impl<Id> Res<Id> {\n \n             Res::Local(..)\n             | Res::PrimTy(..)\n-            | Res::SelfTy(..)\n+            | Res::SelfTy { .. }\n             | Res::SelfCtor(..)\n             | Res::ToolMod\n             | Res::NonMacroAttr(..)\n@@ -573,7 +573,7 @@ impl<Id> Res<Id> {\n             Res::SelfCtor(..) => \"self constructor\",\n             Res::PrimTy(..) => \"builtin type\",\n             Res::Local(..) => \"local variable\",\n-            Res::SelfTy(..) => \"self type\",\n+            Res::SelfTy { .. } => \"self type\",\n             Res::ToolMod => \"tool module\",\n             Res::NonMacroAttr(attr_kind) => attr_kind.descr(),\n             Res::Err => \"unresolved item\",\n@@ -596,7 +596,7 @@ impl<Id> Res<Id> {\n             Res::SelfCtor(id) => Res::SelfCtor(id),\n             Res::PrimTy(id) => Res::PrimTy(id),\n             Res::Local(id) => Res::Local(map(id)),\n-            Res::SelfTy(a, b) => Res::SelfTy(a, b),\n+            Res::SelfTy { trait_, alias_to } => Res::SelfTy { trait_, alias_to },\n             Res::ToolMod => Res::ToolMod,\n             Res::NonMacroAttr(attr_kind) => Res::NonMacroAttr(attr_kind),\n             Res::Err => Res::Err,\n@@ -620,7 +620,7 @@ impl<Id> Res<Id> {\n     pub fn ns(&self) -> Option<Namespace> {\n         match self {\n             Res::Def(kind, ..) => kind.ns(),\n-            Res::PrimTy(..) | Res::SelfTy(..) | Res::ToolMod => Some(Namespace::TypeNS),\n+            Res::PrimTy(..) | Res::SelfTy { .. } | Res::ToolMod => Some(Namespace::TypeNS),\n             Res::SelfCtor(..) | Res::Local(..) => Some(Namespace::ValueNS),\n             Res::NonMacroAttr(..) => Some(Namespace::MacroNS),\n             Res::Err => None,"}, {"sha": "0961d0131d07cfca16b61f201f9498f26e518b24", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e81e09a24e5e1862969aef9ba3a9e71519259eb8/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e81e09a24e5e1862969aef9ba3a9e71519259eb8/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=e81e09a24e5e1862969aef9ba3a9e71519259eb8", "patch": "@@ -640,9 +640,8 @@ impl<'hir> WhereBoundPredicate<'hir> {\n             _ => return false,\n         };\n         match path.res {\n-            Res::Def(DefKind::TyParam, def_id) | Res::SelfTy(Some(def_id), None) => {\n-                def_id == param_def_id\n-            }\n+            Res::Def(DefKind::TyParam, def_id)\n+            | Res::SelfTy { trait_: Some(def_id), alias_to: None } => def_id == param_def_id,\n             _ => false,\n         }\n     }"}, {"sha": "ba4d412cf7597f2e5caecd0d6fa5e121bbbda1b6", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/trait_impl_difference.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e81e09a24e5e1862969aef9ba3a9e71519259eb8/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e81e09a24e5e1862969aef9ba3a9e71519259eb8/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs?ref=e81e09a24e5e1862969aef9ba3a9e71519259eb8", "patch": "@@ -203,7 +203,8 @@ impl<'tcx> Visitor<'tcx> for TypeParamSpanVisitor<'tcx> {\n                         .map(|res| {\n                             matches!(\n                                 res,\n-                                Res::SelfTy(_, _) | Res::Def(hir::def::DefKind::TyParam, _)\n+                                Res::SelfTy { trait_: _, alias_to: _ }\n+                                    | Res::Def(hir::def::DefKind::TyParam, _)\n                             )\n                         })\n                         .unwrap_or(false) =>"}, {"sha": "944a0996427557a7fdef625e8836d08ca4c8b019", "filename": "compiler/rustc_lint/src/internal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e81e09a24e5e1862969aef9ba3a9e71519259eb8/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e81e09a24e5e1862969aef9ba3a9e71519259eb8/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Finternal.rs?ref=e81e09a24e5e1862969aef9ba3a9e71519259eb8", "patch": "@@ -202,7 +202,7 @@ fn is_ty_or_ty_ctxt(cx: &LateContext<'_>, ty: &Ty<'_>) -> Option<String> {\n                 }\n             }\n             // Only lint on `&Ty` and `&TyCtxt` if it is used outside of a trait.\n-            Res::SelfTy(None, Some((did, _))) => {\n+            Res::SelfTy { trait_: None, alias_to: Some((did, _)) } => {\n                 if let ty::Adt(adt, substs) = cx.tcx.type_of(did).kind() {\n                     if let Some(name @ (sym::Ty | sym::TyCtxt)) =\n                         cx.tcx.get_diagnostic_name(adt.did)"}, {"sha": "5ee263159c0fd0aedf18e7938a620acc179cf0bb", "filename": "compiler/rustc_lint/src/pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e81e09a24e5e1862969aef9ba3a9e71519259eb8/compiler%2Frustc_lint%2Fsrc%2Fpass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e81e09a24e5e1862969aef9ba3a9e71519259eb8/compiler%2Frustc_lint%2Fsrc%2Fpass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fpass_by_value.rs?ref=e81e09a24e5e1862969aef9ba3a9e71519259eb8", "patch": "@@ -54,7 +54,7 @@ fn path_for_pass_by_value(cx: &LateContext<'_>, ty: &hir::Ty<'_>) -> Option<Stri\n                 let path_segment = path.segments.last().unwrap();\n                 return Some(format!(\"{}{}\", name, gen_args(cx, path_segment)));\n             }\n-            Res::SelfTy(None, Some((did, _))) => {\n+            Res::SelfTy { trait_: None, alias_to: Some((did, _)) } => {\n                 if let ty::Adt(adt, substs) = cx.tcx.type_of(did).kind() {\n                     if cx.tcx.has_attr(adt.did, sym::rustc_pass_by_value) {\n                         return Some(cx.tcx.def_path_str_with_substs(adt.did, substs));"}, {"sha": "40fbea7c3d91fc7e643799b48c03347dae2fba31", "filename": "compiler/rustc_middle/src/ty/adt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e81e09a24e5e1862969aef9ba3a9e71519259eb8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e81e09a24e5e1862969aef9ba3a9e71519259eb8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs?ref=e81e09a24e5e1862969aef9ba3a9e71519259eb8", "patch": "@@ -395,7 +395,7 @@ impl<'tcx> AdtDef {\n             | Res::Def(DefKind::Union, _)\n             | Res::Def(DefKind::TyAlias, _)\n             | Res::Def(DefKind::AssocTy, _)\n-            | Res::SelfTy(..)\n+            | Res::SelfTy { .. }\n             | Res::SelfCtor(..) => self.non_enum_variant(),\n             _ => bug!(\"unexpected res {:?} in variant_of_res\", res),\n         }"}, {"sha": "df5d2f30284aa13e5c78cc00e4b61712a5de49e7", "filename": "compiler/rustc_mir_build/src/thir/pattern/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e81e09a24e5e1862969aef9ba3a9e71519259eb8/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e81e09a24e5e1862969aef9ba3a9e71519259eb8/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs?ref=e81e09a24e5e1862969aef9ba3a9e71519259eb8", "patch": "@@ -417,7 +417,7 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n                 | DefKind::AssocTy,\n                 _,\n             )\n-            | Res::SelfTy(..)\n+            | Res::SelfTy { .. }\n             | Res::SelfCtor(..) => PatKind::Leaf { subpatterns },\n             _ => {\n                 let pattern_error = match res {"}, {"sha": "e52fbc8ab92d6587285f7fb779cc2e29e53a7931", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e81e09a24e5e1862969aef9ba3a9e71519259eb8/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e81e09a24e5e1862969aef9ba3a9e71519259eb8/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=e81e09a24e5e1862969aef9ba3a9e71519259eb8", "patch": "@@ -104,7 +104,7 @@ impl<'tcx> MarkSymbolVisitor<'tcx> {\n                     self.check_def_id(variant_id);\n                 }\n             }\n-            Res::SelfTy(t, i) => {\n+            Res::SelfTy { trait_: t, alias_to: i } => {\n                 if let Some(t) = t {\n                     self.check_def_id(t);\n                 }"}, {"sha": "e53d712224c8a7f4a5049d14a2d7116dc46cb4ed", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e81e09a24e5e1862969aef9ba3a9e71519259eb8/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e81e09a24e5e1862969aef9ba3a9e71519259eb8/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=e81e09a24e5e1862969aef9ba3a9e71519259eb8", "patch": "@@ -1350,7 +1350,7 @@ struct ObsoleteCheckTypeForPrivatenessVisitor<'a, 'b, 'tcx> {\n impl<'a, 'tcx> ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n     fn path_is_private_type(&self, path: &hir::Path<'_>) -> bool {\n         let did = match path.res {\n-            Res::PrimTy(..) | Res::SelfTy(..) | Res::Err => return false,\n+            Res::PrimTy(..) | Res::SelfTy { .. } | Res::Err => return false,\n             res => res.def_id(),\n         };\n "}, {"sha": "3fa9343c399adf2a32115a9c5ae63a7552764ab8", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e81e09a24e5e1862969aef9ba3a9e71519259eb8/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e81e09a24e5e1862969aef9ba3a9e71519259eb8/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=e81e09a24e5e1862969aef9ba3a9e71519259eb8", "patch": "@@ -991,7 +991,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                 _,\n             )\n             | Res::Local(..)\n-            | Res::SelfTy(..)\n+            | Res::SelfTy { .. }\n             | Res::SelfCtor(..)\n             | Res::Err => bug!(\"unexpected resolution: {:?}\", res),\n         }"}, {"sha": "4b85531557c68d2a36b92fcf0d5e307d9bdc03a2", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e81e09a24e5e1862969aef9ba3a9e71519259eb8/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e81e09a24e5e1862969aef9ba3a9e71519259eb8/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=e81e09a24e5e1862969aef9ba3a9e71519259eb8", "patch": "@@ -123,7 +123,7 @@ impl<'a> Resolver<'a> {\n \n                 let sm = self.session.source_map();\n                 match outer_res {\n-                    Res::SelfTy(maybe_trait_defid, maybe_impl_defid) => {\n+                    Res::SelfTy { trait_: maybe_trait_defid, alias_to: maybe_impl_defid } => {\n                         if let Some(impl_span) =\n                             maybe_impl_defid.and_then(|(def_id, _)| self.opt_span(def_id))\n                         {"}, {"sha": "9ac3e6e22bd9d81aa17f4b9c49ca1812e8acd9a3", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e81e09a24e5e1862969aef9ba3a9e71519259eb8/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e81e09a24e5e1862969aef9ba3a9e71519259eb8/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=e81e09a24e5e1862969aef9ba3a9e71519259eb8", "patch": "@@ -289,7 +289,7 @@ impl<'a> PathSource<'a> {\n                         | DefKind::ForeignTy,\n                     _,\n                 ) | Res::PrimTy(..)\n-                    | Res::SelfTy(..)\n+                    | Res::SelfTy { .. }\n             ),\n             PathSource::Trait(AliasPossibility::No) => matches!(res, Res::Def(DefKind::Trait, _)),\n             PathSource::Trait(AliasPossibility::Maybe) => {\n@@ -326,7 +326,7 @@ impl<'a> PathSource<'a> {\n                         | DefKind::TyAlias\n                         | DefKind::AssocTy,\n                     _,\n-                ) | Res::SelfTy(..)\n+                ) | Res::SelfTy { .. }\n             ),\n             PathSource::TraitItem(ns) => match res {\n                 Res::Def(DefKind::AssocConst | DefKind::AssocFn, _) if ns == ValueNS => true,\n@@ -911,9 +911,12 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         self.with_current_self_item(item, |this| {\n             this.with_generic_param_rib(generics, ItemRibKind(HasGenericParams::Yes), |this| {\n                 let item_def_id = this.r.local_def_id(item.id).to_def_id();\n-                this.with_self_rib(Res::SelfTy(None, Some((item_def_id, false))), |this| {\n-                    visit::walk_item(this, item);\n-                });\n+                this.with_self_rib(\n+                    Res::SelfTy { trait_: None, alias_to: Some((item_def_id, false)) },\n+                    |this| {\n+                        visit::walk_item(this, item);\n+                    },\n+                );\n             });\n         });\n     }\n@@ -999,8 +1002,8 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 self.compute_num_lifetime_params(item.id, generics);\n                 // Create a new rib for the trait-wide type parameters.\n                 self.with_generic_param_rib(generics, ItemRibKind(HasGenericParams::Yes), |this| {\n-                    let local_def_id = this.r.local_def_id(item.id).to_def_id();\n-                    this.with_self_rib(Res::SelfTy(Some(local_def_id), None), |this| {\n+                    let def = this.r.local_def_id(item.id).to_def_id();\n+                    this.with_self_rib(Res::SelfTy { trait_: Some(def), alias_to: None }, |this| {\n                         this.visit_generics(generics);\n                         walk_list!(this, visit_param_bound, bounds);\n \n@@ -1051,8 +1054,8 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 self.compute_num_lifetime_params(item.id, generics);\n                 // Create a new rib for the trait-wide type parameters.\n                 self.with_generic_param_rib(generics, ItemRibKind(HasGenericParams::Yes), |this| {\n-                    let local_def_id = this.r.local_def_id(item.id).to_def_id();\n-                    this.with_self_rib(Res::SelfTy(Some(local_def_id), None), |this| {\n+                    let def = this.r.local_def_id(item.id).to_def_id();\n+                    this.with_self_rib(Res::SelfTy { trait_: Some(def), alias_to: None }, |this| {\n                         this.visit_generics(generics);\n                         walk_list!(this, visit_param_bound, bounds);\n                     });\n@@ -1296,7 +1299,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         // If applicable, create a rib for the type parameters.\n         self.with_generic_param_rib(generics, ItemRibKind(HasGenericParams::Yes), |this| {\n             // Dummy self type for better errors if `Self` is used in the trait path.\n-            this.with_self_rib(Res::SelfTy(None, None), |this| {\n+            this.with_self_rib(Res::SelfTy { trait_: None, alias_to: None }, |this| {\n                 // Resolve the trait reference, if necessary.\n                 this.with_optional_trait_ref(opt_trait_reference.as_ref(), |this, trait_id| {\n                     let item_def_id = this.r.local_def_id(item_id);\n@@ -1307,7 +1310,9 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                     }\n \n                     let item_def_id = item_def_id.to_def_id();\n-                    this.with_self_rib(Res::SelfTy(trait_id, Some((item_def_id, false))), |this| {\n+                    let res =\n+                        Res::SelfTy { trait_: trait_id, alias_to: Some((item_def_id, false)) };\n+                    this.with_self_rib(res, |this| {\n                         if let Some(trait_ref) = opt_trait_reference.as_ref() {\n                             // Resolve type arguments in the trait path.\n                             visit::walk_trait_ref(this, trait_ref);"}, {"sha": "5d843b46ee2258899c6778baa3a49238b5fb72aa", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e81e09a24e5e1862969aef9ba3a9e71519259eb8/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e81e09a24e5e1862969aef9ba3a9e71519259eb8/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=e81e09a24e5e1862969aef9ba3a9e71519259eb8", "patch": "@@ -1189,7 +1189,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                     Applicability::HasPlaceholders,\n                 );\n             }\n-            (Res::SelfTy(..), _) if ns == ValueNS => {\n+            (Res::SelfTy { .. }, _) if ns == ValueNS => {\n                 err.span_label(span, fallback_label);\n                 err.note(\"can't use `Self` as a constructor, you must use the implemented struct\");\n             }"}, {"sha": "3bea95fa1d554ecfcaa418cd8c909dbce92902e2", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e81e09a24e5e1862969aef9ba3a9e71519259eb8/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e81e09a24e5e1862969aef9ba3a9e71519259eb8/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=e81e09a24e5e1862969aef9ba3a9e71519259eb8", "patch": "@@ -2793,7 +2793,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                 // Look for `self: &'a Self` - also desugared from `&'a self`,\n                 // and if that matches, use it for elision and return early.\n                 fn is_self_ty(&self, res: Res) -> bool {\n-                    if let Res::SelfTy(..) = res {\n+                    if let Res::SelfTy { .. } = res {\n                         return true;\n                     }\n "}, {"sha": "dbda59e8884b9846d2e60ad55c02b64a7fab6db0", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e81e09a24e5e1862969aef9ba3a9e71519259eb8/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e81e09a24e5e1862969aef9ba3a9e71519259eb8/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=e81e09a24e5e1862969aef9ba3a9e71519259eb8", "patch": "@@ -2784,7 +2784,7 @@ impl<'a> Resolver<'a> {\n                     return Res::Err;\n                 }\n             }\n-            Res::Def(DefKind::TyParam, _) | Res::SelfTy(..) => {\n+            Res::Def(DefKind::TyParam, _) | Res::SelfTy { .. } => {\n                 for rib in ribs {\n                     let has_generic_params: HasGenericParams = match rib.kind {\n                         NormalRibKind\n@@ -2804,8 +2804,8 @@ impl<'a> Resolver<'a> {\n                                 // HACK(min_const_generics): If we encounter `Self` in an anonymous constant\n                                 // we can't easily tell if it's generic at this stage, so we instead remember\n                                 // this and then enforce the self type to be concrete later on.\n-                                if let Res::SelfTy(trait_def, Some((impl_def, _))) = res {\n-                                    res = Res::SelfTy(trait_def, Some((impl_def, true)));\n+                                if let Res::SelfTy { trait_, alias_to: Some((def, _)) } = res {\n+                                    res = Res::SelfTy { trait_, alias_to: Some((def, true)) }\n                                 } else {\n                                     if record_used {\n                                         self.report_error("}, {"sha": "0ff56a30ea005fb50d43996b0632e5c39dfe2024", "filename": "compiler/rustc_save_analysis/src/dump_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e81e09a24e5e1862969aef9ba3a9e71519259eb8/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e81e09a24e5e1862969aef9ba3a9e71519259eb8/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs?ref=e81e09a24e5e1862969aef9ba3a9e71519259eb8", "patch": "@@ -921,7 +921,7 @@ impl<'tcx> DumpVisitor<'tcx> {\n                     | HirDefKind::AssocTy,\n                     _,\n                 )\n-                | Res::SelfTy(..) => {\n+                | Res::SelfTy { .. } => {\n                     self.dump_path_segment_ref(id, &hir::PathSegment::from_ident(ident));\n                 }\n                 def => {"}, {"sha": "8b0adba9fab15b0202765c791ce53aaffc743ac0", "filename": "compiler/rustc_save_analysis/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e81e09a24e5e1862969aef9ba3a9e71519259eb8/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e81e09a24e5e1862969aef9ba3a9e71519259eb8/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs?ref=e81e09a24e5e1862969aef9ba3a9e71519259eb8", "patch": "@@ -749,7 +749,7 @@ impl<'tcx> SaveContext<'tcx> {\n                 _,\n             )\n             | Res::PrimTy(..)\n-            | Res::SelfTy(..)\n+            | Res::SelfTy { .. }\n             | Res::ToolMod\n             | Res::NonMacroAttr(..)\n             | Res::SelfCtor(..)\n@@ -814,7 +814,7 @@ impl<'tcx> SaveContext<'tcx> {\n \n     fn lookup_def_id(&self, ref_id: hir::HirId) -> Option<DefId> {\n         match self.get_path_res(ref_id) {\n-            Res::PrimTy(_) | Res::SelfTy(..) | Res::Err => None,\n+            Res::PrimTy(_) | Res::SelfTy { .. } | Res::Err => None,\n             def => def.opt_def_id(),\n         }\n     }"}, {"sha": "3bb1d2ff35730ad5ecc45d32c641ae303ebf4ef1", "filename": "compiler/rustc_save_analysis/src/sig.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e81e09a24e5e1862969aef9ba3a9e71519259eb8/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e81e09a24e5e1862969aef9ba3a9e71519259eb8/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs?ref=e81e09a24e5e1862969aef9ba3a9e71519259eb8", "patch": "@@ -573,7 +573,7 @@ impl<'hir> Sig for hir::Path<'hir> {\n         let res = scx.get_path_res(id.ok_or(\"Missing id for Path\")?);\n \n         let (name, start, end) = match res {\n-            Res::PrimTy(..) | Res::SelfTy(..) | Res::Err => {\n+            Res::PrimTy(..) | Res::SelfTy { .. } | Res::Err => {\n                 return Ok(Signature { text: path_to_string(self), defs: vec![], refs: vec![] });\n             }\n             Res::Def(DefKind::AssocConst | DefKind::Variant | DefKind::Ctor(..), _) => {"}, {"sha": "2bee37c0238e02e8385296b27bede769b5c9e368", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e81e09a24e5e1862969aef9ba3a9e71519259eb8/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e81e09a24e5e1862969aef9ba3a9e71519259eb8/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=e81e09a24e5e1862969aef9ba3a9e71519259eb8", "patch": "@@ -1805,7 +1805,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         // Find the type of the associated item, and the trait where the associated\n         // item is declared.\n         let bound = match (&qself_ty.kind(), qself_res) {\n-            (_, Res::SelfTy(Some(_), Some((impl_def_id, _)))) => {\n+            (_, Res::SelfTy { trait_: Some(_), alias_to: Some((impl_def_id, _)) }) => {\n                 // `Self` in an impl of a trait -- we have a concrete self type and a\n                 // trait reference.\n                 let trait_ref = match tcx.impl_trait_ref(impl_def_id) {\n@@ -1826,7 +1826,8 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             }\n             (\n                 &ty::Param(_),\n-                Res::SelfTy(Some(param_did), None) | Res::Def(DefKind::TyParam, param_did),\n+                Res::SelfTy { trait_: Some(param_did), alias_to: None }\n+                | Res::Def(DefKind::TyParam, param_did),\n             ) => self.find_bound_for_assoc_item(param_did.expect_local(), assoc_ident, span)?,\n             _ => {\n                 if variant_resolution.is_some() {\n@@ -2270,13 +2271,13 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 let index = generics.param_def_id_to_index[&def_id];\n                 tcx.mk_ty_param(index, tcx.hir().name(hir_id))\n             }\n-            Res::SelfTy(Some(_), None) => {\n+            Res::SelfTy { trait_: Some(_), alias_to: None } => {\n                 // `Self` in trait or type alias.\n                 assert_eq!(opt_self_ty, None);\n                 self.prohibit_generics(path.segments);\n                 tcx.types.self_param\n             }\n-            Res::SelfTy(_, Some((def_id, forbid_generic))) => {\n+            Res::SelfTy { trait_: _, alias_to: Some((def_id, forbid_generic)) } => {\n                 // `Self` in impl (we know the concrete type).\n                 assert_eq!(opt_self_ty, None);\n                 self.prohibit_generics(path.segments);"}, {"sha": "7adefbbbe3db20041e3c07e06375d4358a3a15ef", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e81e09a24e5e1862969aef9ba3a9e71519259eb8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e81e09a24e5e1862969aef9ba3a9e71519259eb8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=e81e09a24e5e1862969aef9ba3a9e71519259eb8", "patch": "@@ -522,7 +522,12 @@ pub(super) fn check_opaque_for_inheriting_lifetimes<'tcx>(\n         fn visit_ty(&mut self, arg: &'tcx hir::Ty<'tcx>) {\n             match arg.kind {\n                 hir::TyKind::Path(hir::QPath::Resolved(None, path)) => match &path.segments {\n-                    [PathSegment { res: Some(Res::SelfTy(_, impl_ref)), .. }] => {\n+                    [\n+                        PathSegment {\n+                            res: Some(Res::SelfTy { trait_: _, alias_to: impl_ref }),\n+                            ..\n+                        },\n+                    ] => {\n                         let impl_ty_name =\n                             impl_ref.map(|(def_id, _)| self.tcx.def_path_str(def_id));\n                         self.selftys.push((path.span, impl_ty_name));"}, {"sha": "d05dd517f1ea32ab68d9737805309b5680d9dbcc", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e81e09a24e5e1862969aef9ba3a9e71519259eb8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e81e09a24e5e1862969aef9ba3a9e71519259eb8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=e81e09a24e5e1862969aef9ba3a9e71519259eb8", "patch": "@@ -578,7 +578,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 _ => bug!(\"unexpected type: {:?}\", ty),\n             },\n             Res::Def(DefKind::Struct | DefKind::Union | DefKind::TyAlias | DefKind::AssocTy, _)\n-            | Res::SelfTy(..) => match ty.kind() {\n+            | Res::SelfTy { .. } => match ty.kind() {\n                 ty::Adt(adt, substs) if !adt.is_enum() => {\n                     Some((adt.non_enum_variant(), adt.did, substs))\n                 }"}, {"sha": "025232ff48829f4a1dd24fec0efd57d14bd21912", "filename": "compiler/rustc_typeck/src/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e81e09a24e5e1862969aef9ba3a9e71519259eb8/compiler%2Frustc_typeck%2Fsrc%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e81e09a24e5e1862969aef9ba3a9e71519259eb8/compiler%2Frustc_typeck%2Fsrc%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fmem_categorization.rs?ref=e81e09a24e5e1862969aef9ba3a9e71519259eb8", "patch": "@@ -562,7 +562,7 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n             Res::Def(DefKind::Ctor(CtorOf::Struct, ..), _)\n             | Res::Def(DefKind::Struct | DefKind::Union | DefKind::TyAlias | DefKind::AssocTy, _)\n             | Res::SelfCtor(..)\n-            | Res::SelfTy(..) => {\n+            | Res::SelfTy { .. } => {\n                 // Structs and Unions have only have one variant.\n                 Ok(VariantIdx::new(0))\n             }"}, {"sha": "74184427dd5732e413ce6cf56c1383b46e42e32c", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e81e09a24e5e1862969aef9ba3a9e71519259eb8/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e81e09a24e5e1862969aef9ba3a9e71519259eb8/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=e81e09a24e5e1862969aef9ba3a9e71519259eb8", "patch": "@@ -1972,7 +1972,7 @@ impl Path {\n     /// Checks if this is a `T::Name` path for an associated type.\n     crate fn is_assoc_ty(&self) -> bool {\n         match self.res {\n-            Res::SelfTy(..) if self.segments.len() != 1 => true,\n+            Res::SelfTy { .. } if self.segments.len() != 1 => true,\n             Res::Def(DefKind::TyParam, _) if self.segments.len() != 1 => true,\n             Res::Def(DefKind::AssocTy, _) => true,\n             _ => false,"}, {"sha": "1a1755ea38cde975df6222e60d443cdc6b39b996", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e81e09a24e5e1862969aef9ba3a9e71519259eb8/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e81e09a24e5e1862969aef9ba3a9e71519259eb8/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=e81e09a24e5e1862969aef9ba3a9e71519259eb8", "patch": "@@ -355,7 +355,7 @@ crate fn resolve_type(cx: &mut DocContext<'_>, path: Path) -> Type {\n \n     match path.res {\n         Res::PrimTy(p) => Primitive(PrimitiveType::from(p)),\n-        Res::SelfTy(..) if path.segments.len() == 1 => Generic(kw::SelfUpper),\n+        Res::SelfTy { .. } if path.segments.len() == 1 => Generic(kw::SelfUpper),\n         Res::Def(DefKind::TyParam, _) if path.segments.len() == 1 => Generic(path.segments[0].name),\n         _ => {\n             let _ = register_res(cx, path.res);\n@@ -398,10 +398,10 @@ crate fn register_res(cx: &mut DocContext<'_>, res: Res) -> DefId {\n             i,\n         ) => (i, kind.into()),\n         // This is part of a trait definition; document the trait.\n-        Res::SelfTy(Some(trait_def_id), _) => (trait_def_id, ItemType::Trait),\n+        Res::SelfTy { trait_: Some(trait_def_id), alias_to: _ } => (trait_def_id, ItemType::Trait),\n         // This is an inherent impl; it doesn't have its own page.\n-        Res::SelfTy(None, Some((impl_def_id, _))) => return impl_def_id,\n-        Res::SelfTy(None, None)\n+        Res::SelfTy { trait_: None, alias_to: Some((impl_def_id, _)) } => return impl_def_id,\n+        Res::SelfTy { trait_: None, alias_to: None }\n         | Res::PrimTy(_)\n         | Res::ToolMod\n         | Res::SelfCtor(_)"}, {"sha": "bca95b7f25638449b03f0c13d68c1d2a41d250f6", "filename": "src/tools/clippy/clippy_lints/src/trait_bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e81e09a24e5e1862969aef9ba3a9e71519259eb8/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftrait_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e81e09a24e5e1862969aef9ba3a9e71519259eb8/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftrait_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftrait_bounds.rs?ref=e81e09a24e5e1862969aef9ba3a9e71519259eb8", "patch": "@@ -98,7 +98,7 @@ impl<'tcx> LateLintPass<'tcx> for TraitBounds {\n                 if let WherePredicate::BoundPredicate(ref bound_predicate) = predicate;\n                 if !bound_predicate.span.from_expansion();\n                 if let TyKind::Path(QPath::Resolved(_, Path { segments, .. })) = bound_predicate.bounded_ty.kind;\n-                if let Some(PathSegment { res: Some(Res::SelfTy(Some(def_id), _)), .. }) = segments.first();\n+                if let Some(PathSegment { res: Some(Res::SelfTy{ trait_: Some(def_id), alias_to: _ }), .. }) = segments.first();\n \n                 if let Some(\n                     Node::Item("}, {"sha": "80164c59ba74c3e570d82fb46985d25f6e47255a", "filename": "src/tools/clippy/clippy_lints/src/use_self.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e81e09a24e5e1862969aef9ba3a9e71519259eb8/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e81e09a24e5e1862969aef9ba3a9e71519259eb8/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuse_self.rs?ref=e81e09a24e5e1862969aef9ba3a9e71519259eb8", "patch": "@@ -204,7 +204,7 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n                 ref types_to_skip,\n             }) = self.stack.last();\n             if let TyKind::Path(QPath::Resolved(_, path)) = hir_ty.kind;\n-            if !matches!(path.res, Res::SelfTy(..) | Res::Def(DefKind::TyParam, _));\n+            if !matches!(path.res, Res::SelfTy { .. } | Res::Def(DefKind::TyParam, _));\n             if !types_to_skip.contains(&hir_ty.hir_id);\n             let ty = if in_body > 0 {\n                 cx.typeck_results().node_type(hir_ty.hir_id)\n@@ -231,7 +231,7 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n         }\n         match expr.kind {\n             ExprKind::Struct(QPath::Resolved(_, path), ..) => match path.res {\n-                Res::SelfTy(..) => (),\n+                Res::SelfTy { .. } => (),\n                 Res::Def(DefKind::Variant, _) => lint_path_to_variant(cx, path),\n                 _ => span_lint(cx, path.span),\n             },"}, {"sha": "f775cdd3bc280b0c6047ef771d22e2812b5b37ba", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e81e09a24e5e1862969aef9ba3a9e71519259eb8/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e81e09a24e5e1862969aef9ba3a9e71519259eb8/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=e81e09a24e5e1862969aef9ba3a9e71519259eb8", "patch": "@@ -1460,7 +1460,7 @@ pub fn is_self(slf: &Param<'_>) -> bool {\n \n pub fn is_self_ty(slf: &hir::Ty<'_>) -> bool {\n     if let TyKind::Path(QPath::Resolved(None, path)) = slf.kind {\n-        if let Res::SelfTy(..) = path.res {\n+        if let Res::SelfTy { .. } = path.res {\n             return true;\n         }\n     }"}]}