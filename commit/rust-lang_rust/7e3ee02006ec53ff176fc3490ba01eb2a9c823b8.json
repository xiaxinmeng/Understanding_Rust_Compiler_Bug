{"sha": "7e3ee02006ec53ff176fc3490ba01eb2a9c823b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlM2VlMDIwMDZlYzUzZmYxNzZmYzM0OTBiYTAxZWIyYTljODIzYjg=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-03-24T00:50:14Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-03-24T21:37:03Z"}, "message": "Bug fixes", "tree": {"sha": "f2eb7fc20a87d794676517f672ea94506dbeff09", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2eb7fc20a87d794676517f672ea94506dbeff09"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e3ee02006ec53ff176fc3490ba01eb2a9c823b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e3ee02006ec53ff176fc3490ba01eb2a9c823b8", "html_url": "https://github.com/rust-lang/rust/commit/7e3ee02006ec53ff176fc3490ba01eb2a9c823b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e3ee02006ec53ff176fc3490ba01eb2a9c823b8/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7122a5a09d06aedd1d27d14c3ac38c40b0a7425", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7122a5a09d06aedd1d27d14c3ac38c40b0a7425", "html_url": "https://github.com/rust-lang/rust/commit/e7122a5a09d06aedd1d27d14c3ac38c40b0a7425"}], "stats": {"total": 28, "additions": 3, "deletions": 25}, "files": [{"sha": "ae1dbbb1b00ad2ca0dc0d619344fc5aaea99e8e5", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7e3ee02006ec53ff176fc3490ba01eb2a9c823b8/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e3ee02006ec53ff176fc3490ba01eb2a9c823b8/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=7e3ee02006ec53ff176fc3490ba01eb2a9c823b8", "patch": "@@ -381,29 +381,6 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n                             None\n                         }\n                     }\n-                    (&ty::ty_trait(ref data_a), &ty::ty_trait(ref data_b)) => {\n-                        // For now, we only support upcasts from\n-                        // `Foo+Send` to `Foo` (really, any time there are\n-                        // fewer builtin bounds then before). These are\n-                        // convenient because they don't require any sort\n-                        // of change to the vtable at runtime.\n-                        if data_a.bounds.builtin_bounds != data_b.bounds.builtin_bounds &&\n-                            data_a.bounds.builtin_bounds.is_superset(&data_b.bounds.builtin_bounds)\n-                        {\n-                            let bounds_a1 = ty::ExistentialBounds {\n-                                region_bound: data_a.bounds.region_bound,\n-                                builtin_bounds: data_b.bounds.builtin_bounds,\n-                                projection_bounds: data_a.bounds.projection_bounds.clone(),\n-                            };\n-                            let ty_a1 = ty::mk_trait(tcx, data_a.principal.clone(), bounds_a1);\n-                            match self.fcx.infcx().try(|_| self.subtype(ty_a1, ty_b)) {\n-                                Ok(_) => Some((ty_b, ty::UnsizeUpcast(ty_b))),\n-                                Err(_) => None,\n-                            }\n-                        } else {\n-                            None\n-                        }\n-                    }\n                     (_, &ty::ty_trait(ref data)) => {\n                         Some((ty_b, ty::UnsizeVtable(ty::TyTrait {\n                                                          principal: data.principal.clone(),"}, {"sha": "167db1e8ac2d790b056c05af6bd78b8bdb8cdb86", "filename": "src/libstd/sys/windows/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e3ee02006ec53ff176fc3490ba01eb2a9c823b8/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e3ee02006ec53ff176fc3490ba01eb2a9c823b8/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs?ref=7e3ee02006ec53ff176fc3490ba01eb2a9c823b8", "patch": "@@ -109,7 +109,7 @@ impl Iterator for Env {\n             if *self.cur == 0 { return None }\n             let p = &*self.cur;\n             let mut len = 0;\n-            while *(p as *const _).offset(len) != 0 {\n+            while *(p as *const u16).offset(len) != 0 {\n                 len += 1;\n             }\n             let p = p as *const u16;"}, {"sha": "a2b824bb016ffa401255a488249e480e0d56eaf8", "filename": "src/libstd/thread/local.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7e3ee02006ec53ff176fc3490ba01eb2a9c823b8/src%2Flibstd%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e3ee02006ec53ff176fc3490ba01eb2a9c823b8/src%2Flibstd%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Flocal.rs?ref=7e3ee02006ec53ff176fc3490ba01eb2a9c823b8", "patch": "@@ -176,6 +176,7 @@ macro_rules! __thread_local_inner {\n             }\n         };\n \n+        #[allow(trivial_casts)]\n         #[cfg(any(not(any(target_os = \"macos\", target_os = \"linux\")), target_arch = \"aarch64\"))]\n         const _INIT: ::std::thread::__local::__impl::KeyInner<$t> = {\n             ::std::thread::__local::__impl::KeyInner {"}, {"sha": "001313db6769f133b8f8166b16c61428ead730a4", "filename": "src/libterm/win.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e3ee02006ec53ff176fc3490ba01eb2a9c823b8/src%2Flibterm%2Fwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e3ee02006ec53ff176fc3490ba01eb2a9c823b8/src%2Flibterm%2Fwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fwin.rs?ref=7e3ee02006ec53ff176fc3490ba01eb2a9c823b8", "patch": "@@ -126,7 +126,7 @@ impl<T: Write+Send+'static> WinConsole<T> {\n         }\n         Some(box WinConsole { buf: out,\n                               def_foreground: fg, def_background: bg,\n-                              foreground: fg, background: bg } as Box<Terminal<T>+Send>)\n+                              foreground: fg, background: bg })\n     }\n }\n "}]}