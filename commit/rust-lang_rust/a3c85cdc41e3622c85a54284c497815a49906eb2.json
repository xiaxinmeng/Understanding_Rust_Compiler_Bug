{"sha": "a3c85cdc41e3622c85a54284c497815a49906eb2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzYzg1Y2RjNDFlMzYyMmM4NWE1NDI4NGM0OTc4MTVhNDk5MDZlYjI=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-05-13T23:07:54Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-05-13T23:07:54Z"}, "message": "Reorder the --help message", "tree": {"sha": "b57502684a9c731791a761f37512745a9ef467ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b57502684a9c731791a761f37512745a9ef467ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3c85cdc41e3622c85a54284c497815a49906eb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3c85cdc41e3622c85a54284c497815a49906eb2", "html_url": "https://github.com/rust-lang/rust/commit/a3c85cdc41e3622c85a54284c497815a49906eb2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3c85cdc41e3622c85a54284c497815a49906eb2/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d0695303a97edbf94a7ed605247806af4a9e262", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d0695303a97edbf94a7ed605247806af4a9e262", "html_url": "https://github.com/rust-lang/rust/commit/6d0695303a97edbf94a7ed605247806af4a9e262"}], "stats": {"total": 70, "additions": 30, "deletions": 40}, "files": [{"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "rustfmt.toml", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3c85cdc41e3622c85a54284c497815a49906eb2/rustfmt.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a3c85cdc41e3622c85a54284c497815a49906eb2/rustfmt.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt.toml?ref=a3c85cdc41e3622c85a54284c497815a49906eb2", "patch": "@@ -1,2 +0,0 @@\n-error_on_line_overflow = true\n-error_on_unformatted = true"}, {"sha": "2c7bf5a244567e3f891efcc1e6a4c2c85cf6df49", "filename": "src/bin/main.rs", "status": "modified", "additions": 29, "deletions": 30, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/a3c85cdc41e3622c85a54284c497815a49906eb2/src%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c85cdc41e3622c85a54284c497815a49906eb2/src%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmain.rs?ref=a3c85cdc41e3622c85a54284c497815a49906eb2", "patch": "@@ -90,39 +90,32 @@ enum HelpOp {\n fn make_opts() -> Options {\n     let mut opts = Options::new();\n \n-    // Sorted in alphabetical order.\n-    opts.optflag(\"\", \"backup\", \"Backup any modified files.\");\n     opts.optflag(\n         \"\",\n         \"check\",\n         \"Run in 'check' mode. Exits with 0 if input if formatted correctly. Exits \\\n          with 1 and prints a diff if formatting is required.\",\n     );\n-    opts.optopt(\n-        \"\",\n-        \"color\",\n-        \"Use colored output (if supported)\",\n-        \"[always|never|auto]\",\n-    );\n-    opts.optopt(\n-        \"\",\n-        \"config-path\",\n-        \"Recursively searches the given path for the rustfmt.toml config file. If not \\\n-         found reverts to the input file path\",\n-        \"[Path for the configuration file]\",\n-    );\n     let is_nightly = is_nightly();\n     let emit_opts = if is_nightly {\n         \"[files|stdout|coverage|checkstyle]\"\n     } else {\n         \"[files|stdout]\"\n     };\n     opts.optopt(\"\", \"emit\", \"What data to emit and how\", emit_opts);\n-    opts.optflagopt(\n-        \"h\",\n-        \"help\",\n-        \"Show this message or help about a specific topic: `config` or `file-lines`\",\n-        \"=TOPIC\",\n+    opts.optflag(\"\", \"backup\", \"Backup any modified files.\");\n+    opts.optopt(\n+        \"\",\n+        \"config-path\",\n+        \"Recursively searches the given path for the rustfmt.toml config file. If not \\\n+         found reverts to the input file path\",\n+        \"[Path for the configuration file]\",\n+    );\n+    opts.optopt(\n+        \"\",\n+        \"color\",\n+        \"Use colored output (if supported)\",\n+        \"[always|never|auto]\",\n     );\n     opts.optopt(\n         \"\",\n@@ -131,36 +124,43 @@ fn make_opts() -> Options {\n          subset of the current config file used for formatting the current program.\",\n         \"[minimal|default] PATH\",\n     );\n-    opts.optflag(\"v\", \"verbose\", \"Print verbose output\");\n-    opts.optflag(\"q\", \"quiet\", \"Print less output\");\n-    opts.optflag(\"V\", \"version\", \"Show version information\");\n \n     if is_nightly {\n         opts.optflag(\n             \"\",\n             \"unstable-features\",\n             \"Enables unstable features. Only available on nightly channel.\",\n         );\n-        opts.optflag(\n-            \"\",\n-            \"error-on-unformatted\",\n-            \"Error if unable to get comments or string literals within max_width, \\\n-             or they are left with trailing whitespaces (unstable).\",\n-        );\n         opts.optopt(\n             \"\",\n             \"file-lines\",\n             \"Format specified line ranges. Run with `--help file-lines` for \\\n              more detail (unstable).\",\n             \"JSON\",\n         );\n+        opts.optflag(\n+            \"\",\n+            \"error-on-unformatted\",\n+            \"Error if unable to get comments or string literals within max_width, \\\n+             or they are left with trailing whitespaces (unstable).\",\n+        );\n         opts.optflag(\n             \"\",\n             \"skip-children\",\n             \"Don't reformat child modules (unstable).\",\n         );\n     }\n \n+    opts.optflag(\"v\", \"verbose\", \"Print verbose output\");\n+    opts.optflag(\"q\", \"quiet\", \"Print less output\");\n+    opts.optflag(\"V\", \"version\", \"Show version information\");\n+    opts.optflagopt(\n+        \"h\",\n+        \"help\",\n+        \"Show this message or help about a specific topic: `config` or `file-lines`\",\n+        \"=TOPIC\",\n+    );\n+\n     opts\n }\n \n@@ -177,7 +177,6 @@ fn execute(opts: &Options) -> FmtResult<(WriteMode, Summary)> {\n     match determine_operation(&matches)? {\n         Operation::Help(HelpOp::None) => {\n             print_usage_to_stdout(opts, \"\");\n-            Summary::print_exit_codes();\n             Ok((WriteMode::None, Summary::default()))\n         }\n         Operation::Help(HelpOp::Config) => {"}, {"sha": "06580339d9e9c7a52d71840c9d763433cf5392f8", "filename": "src/config/options.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3c85cdc41e3622c85a54284c497815a49906eb2/src%2Fconfig%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c85cdc41e3622c85a54284c497815a49906eb2/src%2Fconfig%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Foptions.rs?ref=a3c85cdc41e3622c85a54284c497815a49906eb2", "patch": "@@ -360,7 +360,7 @@ impl CliOptions {\n             options.unstable_features = matches.opt_present(\"unstable-features\");\n         }\n \n-        if !options.unstable_features {\n+        if options.unstable_features {\n             if matches.opt_present(\"skip-children\") {\n                 options.skip_children = Some(true);\n             }"}, {"sha": "d44c69b04a6b41c3acce9d3eb1d7c95fd9db4e03", "filename": "src/config/summary.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a3c85cdc41e3622c85a54284c497815a49906eb2/src%2Fconfig%2Fsummary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c85cdc41e3622c85a54284c497815a49906eb2/src%2Fconfig%2Fsummary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fsummary.rs?ref=a3c85cdc41e3622c85a54284c497815a49906eb2", "patch": "@@ -102,13 +102,6 @@ impl Summary {\n         self.has_parsing_errors |= other.has_parsing_errors;\n         self.has_diff |= other.has_diff;\n     }\n-\n-    pub fn print_exit_codes() {\n-        let exit_codes = r#\"Exit Codes:\n-    0 = No errors\n-    1 = Encountered error in formatting code\"#;\n-        println!(\"{}\", exit_codes);\n-    }\n }\n \n #[derive(Clone, Copy, Debug)]"}]}