{"sha": "f55be75a17dab2ca23b34c45e7597fe19a5fc8e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1NWJlNzVhMTdkYWIyY2EyM2IzNGM0NWU3NTk3ZmUxOWE1ZmM4ZTQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-07T11:51:12Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-07T13:25:16Z"}, "message": "Remove irrelevant distinction", "tree": {"sha": "9b285fc57782ccbda0e08b934807420e6471b721", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b285fc57782ccbda0e08b934807420e6471b721"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f55be75a17dab2ca23b34c45e7597fe19a5fc8e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f55be75a17dab2ca23b34c45e7597fe19a5fc8e4", "html_url": "https://github.com/rust-lang/rust/commit/f55be75a17dab2ca23b34c45e7597fe19a5fc8e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f55be75a17dab2ca23b34c45e7597fe19a5fc8e4/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d0d113c7d17483f3a6e0d09db7cc0cb5ed145c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d0d113c7d17483f3a6e0d09db7cc0cb5ed145c4", "html_url": "https://github.com/rust-lang/rust/commit/4d0d113c7d17483f3a6e0d09db7cc0cb5ed145c4"}], "stats": {"total": 70, "additions": 22, "deletions": 48}, "files": [{"sha": "080cc302b10a38c7ed4630f1e50e9bf3f943c7bd", "filename": "crates/ra_ide/src/goto_definition.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f55be75a17dab2ca23b34c45e7597fe19a5fc8e4/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f55be75a17dab2ca23b34c45e7597fe19a5fc8e4/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs?ref=f55be75a17dab2ca23b34c45e7597fe19a5fc8e4", "patch": "@@ -78,7 +78,6 @@ pub(crate) fn reference_definition(\n         Some(Macro(it)) => return Exact(it.to_nav(sb.db)),\n         Some(Field(it)) => return Exact(it.to_nav(sb.db)),\n         Some(TypeParam(it)) => return Exact(it.to_nav(sb.db)),\n-        Some(AssocItem(it)) => return Exact(it.to_nav(sb.db)),\n         Some(Local(it)) => return Exact(it.to_nav(sb.db)),\n         Some(Def(def)) => match NavigationTarget::from_def(sb.db, def) {\n             Some(nav) => return Exact(nav),"}, {"sha": "ab3f513f272fef2a36b4d5023cd8fd3b19cc774f", "filename": "crates/ra_ide/src/hover.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f55be75a17dab2ca23b34c45e7597fe19a5fc8e4/crates%2Fra_ide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f55be75a17dab2ca23b34c45e7597fe19a5fc8e4/crates%2Fra_ide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fhover.rs?ref=f55be75a17dab2ca23b34c45e7597fe19a5fc8e4", "patch": "@@ -105,11 +105,6 @@ fn hover_text_from_name_kind(db: &RootDatabase, name_kind: NameKind) -> Option<S\n                 _ => None,\n             }\n         }\n-        AssocItem(it) => match it {\n-            hir::AssocItem::Function(it) => from_def_source(db, it),\n-            hir::AssocItem::Const(it) => from_def_source(db, it),\n-            hir::AssocItem::TypeAlias(it) => from_def_source(db, it),\n-        },\n         Def(it) => match it {\n             hir::ModuleDef::Module(it) => match it.definition_source(db).value {\n                 hir::ModuleSource::Module(it) => {"}, {"sha": "612ed84b7f3a45506ae8ad8707fb25b01df5ed09", "filename": "crates/ra_ide/src/references.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f55be75a17dab2ca23b34c45e7597fe19a5fc8e4/crates%2Fra_ide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f55be75a17dab2ca23b34c45e7597fe19a5fc8e4/crates%2Fra_ide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences.rs?ref=f55be75a17dab2ca23b34c45e7597fe19a5fc8e4", "patch": "@@ -128,7 +128,6 @@ pub(crate) fn find_all_refs(\n     let declaration = match def.kind {\n         NameKind::Macro(mac) => mac.to_nav(db),\n         NameKind::Field(field) => field.to_nav(db),\n-        NameKind::AssocItem(assoc) => assoc.to_nav(db),\n         NameKind::Def(def) => NavigationTarget::from_def(db, def)?,\n         NameKind::SelfType(imp) => imp.to_nav(db),\n         NameKind::Local(local) => local.to_nav(db),"}, {"sha": "d0f03d8a89a88aa2284f1a4ee6e58eb6dd401ab9", "filename": "crates/ra_ide/src/references/classify.rs", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f55be75a17dab2ca23b34c45e7597fe19a5fc8e4/crates%2Fra_ide%2Fsrc%2Freferences%2Fclassify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f55be75a17dab2ca23b34c45e7597fe19a5fc8e4/crates%2Fra_ide%2Fsrc%2Freferences%2Fclassify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences%2Fclassify.rs?ref=f55be75a17dab2ca23b34c45e7597fe19a5fc8e4", "patch": "@@ -8,7 +8,7 @@ use test_utils::tested_by;\n use super::{NameDefinition, NameKind};\n use ra_ide_db::RootDatabase;\n \n-pub use ra_ide_db::defs::{classify_name, from_assoc_item, from_module_def, from_struct_field};\n+pub use ra_ide_db::defs::{classify_name, from_module_def, from_struct_field};\n \n pub(crate) fn classify_name_ref(\n     sb: &mut SourceBinder<RootDatabase>,\n@@ -22,7 +22,7 @@ pub(crate) fn classify_name_ref(\n     if let Some(method_call) = ast::MethodCallExpr::cast(parent.clone()) {\n         tested_by!(goto_def_for_methods);\n         if let Some(func) = analyzer.resolve_method_call(&method_call) {\n-            return Some(from_assoc_item(sb.db, func.into()));\n+            return Some(from_module_def(sb.db, func.into(), None));\n         }\n     }\n \n@@ -57,27 +57,35 @@ pub(crate) fn classify_name_ref(\n \n     let path = name_ref.value.syntax().ancestors().find_map(ast::Path::cast)?;\n     let resolved = analyzer.resolve_path(sb.db, &path)?;\n-    match resolved {\n-        PathResolution::Def(def) => Some(from_module_def(sb.db, def, Some(container))),\n-        PathResolution::AssocItem(item) => Some(from_assoc_item(sb.db, item)),\n+    let res = match resolved {\n+        PathResolution::Def(def) => from_module_def(sb.db, def, Some(container)),\n+        PathResolution::AssocItem(item) => {\n+            let def = match item {\n+                hir::AssocItem::Function(it) => it.into(),\n+                hir::AssocItem::Const(it) => it.into(),\n+                hir::AssocItem::TypeAlias(it) => it.into(),\n+            };\n+            from_module_def(sb.db, def, Some(container))\n+        }\n         PathResolution::Local(local) => {\n             let kind = NameKind::Local(local);\n             let container = local.module(sb.db);\n-            Some(NameDefinition { kind, container, visibility: None })\n+            NameDefinition { kind, container, visibility: None }\n         }\n         PathResolution::TypeParam(par) => {\n             let kind = NameKind::TypeParam(par);\n             let container = par.module(sb.db);\n-            Some(NameDefinition { kind, container, visibility })\n+            NameDefinition { kind, container, visibility }\n         }\n         PathResolution::Macro(def) => {\n             let kind = NameKind::Macro(def);\n-            Some(NameDefinition { kind, container, visibility })\n+            NameDefinition { kind, container, visibility }\n         }\n         PathResolution::SelfType(impl_block) => {\n             let kind = NameKind::SelfType(impl_block);\n             let container = impl_block.module(sb.db);\n-            Some(NameDefinition { kind, container, visibility })\n+            NameDefinition { kind, container, visibility }\n         }\n-    }\n+    };\n+    Some(res)\n }"}, {"sha": "c970f5d34e6b1d05a3a4942c1ef1f2297b6ae9c9", "filename": "crates/ra_ide/src/syntax_highlighting.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f55be75a17dab2ca23b34c45e7597fe19a5fc8e4/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f55be75a17dab2ca23b34c45e7597fe19a5fc8e4/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs?ref=f55be75a17dab2ca23b34c45e7597fe19a5fc8e4", "patch": "@@ -321,9 +321,6 @@ fn highlight_name(db: &RootDatabase, name_kind: NameKind) -> &'static str {\n     match name_kind {\n         Macro(_) => tags::MACRO,\n         Field(_) => tags::FIELD,\n-        AssocItem(hir::AssocItem::Function(_)) => tags::FUNCTION,\n-        AssocItem(hir::AssocItem::Const(_)) => tags::CONSTANT,\n-        AssocItem(hir::AssocItem::TypeAlias(_)) => tags::TYPE,\n         Def(hir::ModuleDef::Module(_)) => tags::MODULE,\n         Def(hir::ModuleDef::Function(_)) => tags::FUNCTION,\n         Def(hir::ModuleDef::Adt(_)) => tags::TYPE,"}, {"sha": "0599f5e384464afb2672d886e7120a4a883e761a", "filename": "crates/ra_ide_db/src/defs.rs", "status": "modified", "additions": 4, "deletions": 28, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f55be75a17dab2ca23b34c45e7597fe19a5fc8e4/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f55be75a17dab2ca23b34c45e7597fe19a5fc8e4/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs?ref=f55be75a17dab2ca23b34c45e7597fe19a5fc8e4", "patch": "@@ -6,7 +6,7 @@\n // FIXME: this badly needs rename/rewrite (matklad, 2020-02-06).\n \n use hir::{\n-    Adt, AssocItem, HasSource, ImplBlock, InFile, Local, MacroDef, Module, ModuleDef, SourceBinder,\n+    Adt, HasSource, ImplBlock, InFile, Local, MacroDef, Module, ModuleDef, SourceBinder,\n     StructField, TypeParam, VariantDef,\n };\n use ra_prof::profile;\n@@ -21,7 +21,6 @@ use crate::RootDatabase;\n pub enum NameKind {\n     Macro(MacroDef),\n     Field(StructField),\n-    AssocItem(AssocItem),\n     Def(ModuleDef),\n     SelfType(ImplBlock),\n     Local(Local),\n@@ -92,29 +91,17 @@ pub fn classify_name(\n             ast::FnDef(it) => {\n                 let src = name.with_value(it);\n                 let def: hir::Function = sb.to_def(src)?;\n-                if parent.parent().and_then(ast::ItemList::cast).map_or(false, |it| it.syntax().parent().and_then(ast::Module::cast).is_none()) {\n-                    Some(from_assoc_item(sb.db, def.into()))\n-                } else {\n-                    Some(from_module_def(sb.db, def.into(), None))\n-                }\n+                Some(from_module_def(sb.db, def.into(), None))\n             },\n             ast::ConstDef(it) => {\n                 let src = name.with_value(it);\n                 let def: hir::Const = sb.to_def(src)?;\n-                if parent.parent().and_then(ast::ItemList::cast).is_some() {\n-                    Some(from_assoc_item(sb.db, def.into()))\n-                } else {\n-                    Some(from_module_def(sb.db, def.into(), None))\n-                }\n+                Some(from_module_def(sb.db, def.into(), None))\n             },\n             ast::TypeAliasDef(it) => {\n                 let src = name.with_value(it);\n                 let def: hir::TypeAlias = sb.to_def(src)?;\n-                if parent.parent().and_then(ast::ItemList::cast).is_some() {\n-                    Some(from_assoc_item(sb.db, def.into()))\n-                } else {\n-                    Some(from_module_def(sb.db, def.into(), None))\n-                }\n+                Some(from_module_def(sb.db, def.into(), None))\n             },\n             ast::MacroCall(it) => {\n                 let src = name.with_value(it);\n@@ -142,17 +129,6 @@ pub fn classify_name(\n     }\n }\n \n-pub fn from_assoc_item(db: &RootDatabase, item: AssocItem) -> NameDefinition {\n-    let container = item.module(db);\n-    let visibility = match item {\n-        AssocItem::Function(f) => f.source(db).value.visibility(),\n-        AssocItem::Const(c) => c.source(db).value.visibility(),\n-        AssocItem::TypeAlias(a) => a.source(db).value.visibility(),\n-    };\n-    let kind = NameKind::AssocItem(item);\n-    NameDefinition { kind, container, visibility }\n-}\n-\n pub fn from_struct_field(db: &RootDatabase, field: StructField) -> NameDefinition {\n     let kind = NameKind::Field(field);\n     let parent = field.parent_def(db);"}]}