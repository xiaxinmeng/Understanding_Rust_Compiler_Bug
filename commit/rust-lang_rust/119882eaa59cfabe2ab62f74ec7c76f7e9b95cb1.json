{"sha": "119882eaa59cfabe2ab62f74ec7c76f7e9b95cb1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExOTg4MmVhYTU5Y2ZhYmUyYWI2MmY3NGVjN2M3NmY3ZTliOTVjYjE=", "commit": {"author": {"name": "Douglas Campos", "email": "qmx@qmx.me", "date": "2017-09-21T15:19:52Z"}, "committer": {"name": "Douglas Campos", "email": "qmx@qmx.me", "date": "2017-09-25T13:50:37Z"}, "message": "add comment per @nikomatsakis request", "tree": {"sha": "9577e9937b7e7c0012e9b731504f75f2be97fce1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9577e9937b7e7c0012e9b731504f75f2be97fce1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/119882eaa59cfabe2ab62f74ec7c76f7e9b95cb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/119882eaa59cfabe2ab62f74ec7c76f7e9b95cb1", "html_url": "https://github.com/rust-lang/rust/commit/119882eaa59cfabe2ab62f74ec7c76f7e9b95cb1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/119882eaa59cfabe2ab62f74ec7c76f7e9b95cb1/comments", "author": {"login": "qmx", "id": 66734, "node_id": "MDQ6VXNlcjY2NzM0", "avatar_url": "https://avatars.githubusercontent.com/u/66734?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qmx", "html_url": "https://github.com/qmx", "followers_url": "https://api.github.com/users/qmx/followers", "following_url": "https://api.github.com/users/qmx/following{/other_user}", "gists_url": "https://api.github.com/users/qmx/gists{/gist_id}", "starred_url": "https://api.github.com/users/qmx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qmx/subscriptions", "organizations_url": "https://api.github.com/users/qmx/orgs", "repos_url": "https://api.github.com/users/qmx/repos", "events_url": "https://api.github.com/users/qmx/events{/privacy}", "received_events_url": "https://api.github.com/users/qmx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "qmx", "id": 66734, "node_id": "MDQ6VXNlcjY2NzM0", "avatar_url": "https://avatars.githubusercontent.com/u/66734?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qmx", "html_url": "https://github.com/qmx", "followers_url": "https://api.github.com/users/qmx/followers", "following_url": "https://api.github.com/users/qmx/following{/other_user}", "gists_url": "https://api.github.com/users/qmx/gists{/gist_id}", "starred_url": "https://api.github.com/users/qmx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qmx/subscriptions", "organizations_url": "https://api.github.com/users/qmx/orgs", "repos_url": "https://api.github.com/users/qmx/repos", "events_url": "https://api.github.com/users/qmx/events{/privacy}", "received_events_url": "https://api.github.com/users/qmx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c900abf42df64d1724d2a435b9ad5351ecbc3081", "url": "https://api.github.com/repos/rust-lang/rust/commits/c900abf42df64d1724d2a435b9ad5351ecbc3081", "html_url": "https://github.com/rust-lang/rust/commit/c900abf42df64d1724d2a435b9ad5351ecbc3081"}], "stats": {"total": 1, "additions": 1, "deletions": 0}, "files": [{"sha": "947e7117c4ea2d42842b528f76b4d7e593c3d540", "filename": "src/librustc/traits/trans/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/119882eaa59cfabe2ab62f74ec7c76f7e9b95cb1/src%2Flibrustc%2Ftraits%2Ftrans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/119882eaa59cfabe2ab62f74ec7c76f7e9b95cb1/src%2Flibrustc%2Ftraits%2Ftrans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ftrans%2Fmod.rs?ref=119882eaa59cfabe2ab62f74ec7c76f7e9b95cb1", "patch": "@@ -31,6 +31,7 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n     /// (necessarily) resolve all nested obligations on the impl. Note\n     /// that type check should guarantee to us that all nested\n     /// obligations *could be* resolved if we wanted to.\n+    /// Assumes that this is run after the entire crate has been successfully type-checked.\n     pub fn trans_fulfill_obligation(self,\n                                     span: Span,\n                                     param_env: ty::ParamEnv<'tcx>,"}]}