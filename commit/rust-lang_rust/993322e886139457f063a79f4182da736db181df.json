{"sha": "993322e886139457f063a79f4182da736db181df", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5MzMyMmU4ODYxMzk0NTdmMDYzYTc5ZjQxODJkYTczNmRiMTgxZGY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-02-07T16:30:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-02-07T16:30:56Z"}, "message": "Rollup merge of #48018 - alexcrichton:require-const-arg, r=eddyb\n\nrustc: Add `#[rustc_args_required_const]`\n\nThis commit adds a new unstable attribute to the compiler which requires that\narguments to a function are always provided as constants. The primary use case\nfor this is SIMD intrinsics where arguments are defined by vendors to be\nconstant and in LLVM they indeed must be constant as well.\n\nFor now this is mostly just a semantic guarantee in rustc that an argument is a\nconstant when invoked, phases like trans don't actually take advantage of it\nyet. This means that we'll be able to use this in stdsimd but we won't be able\nto remove the `constify_*` macros just yet. Hopefully soon though!", "tree": {"sha": "f5d8fd48019aa26b8f9281d4004e96ea02483e0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5d8fd48019aa26b8f9281d4004e96ea02483e0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/993322e886139457f063a79f4182da736db181df", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaeynACRBK7hj4Ov3rIwAAdHIIABHGPuEzq8GdeZBjl8mmYiaI\n775i60vZER3WCLrejksOac3kRBtF0iYpF/9nr8vcsE/AgBfd8KdYCHxdjaKIKrxg\n7+HW32ZsJDPbR4w7ixh2n7UcTLXaI70opYljz17FiuYmTY7Ojk0SEKX2GI5/AI0F\nzXV75YgayBVDLX5X8klTrjaCyG9f0sUV/n055PZyfMzAw9rKYG/oFRk4qhKXtapH\nLzVLjRvxo6w5iBbYqPXKNUW4fYaMgnzdRDCq+Kfd/pRYbGP/WnRwV/xgAzj4/Mqz\ngi3AFMDnnXA7kMbk4CIp9IR4s71GF5jCZLSpG08fSKhhZqraJ6Cl6bdaEIuVLcU=\n=AeG9\n-----END PGP SIGNATURE-----\n", "payload": "tree f5d8fd48019aa26b8f9281d4004e96ea02483e0c\nparent 6908fb762d5f7952ed7d31cf34405b9149a51e02\nparent 27a4e73ca54f454d16cab7942ef9b27d5c942a32\nauthor Manish Goregaokar <manishsmail@gmail.com> 1518021056 -0800\ncommitter GitHub <noreply@github.com> 1518021056 -0800\n\nRollup merge of #48018 - alexcrichton:require-const-arg, r=eddyb\n\nrustc: Add `#[rustc_args_required_const]`\n\nThis commit adds a new unstable attribute to the compiler which requires that\narguments to a function are always provided as constants. The primary use case\nfor this is SIMD intrinsics where arguments are defined by vendors to be\nconstant and in LLVM they indeed must be constant as well.\n\nFor now this is mostly just a semantic guarantee in rustc that an argument is a\nconstant when invoked, phases like trans don't actually take advantage of it\nyet. This means that we'll be able to use this in stdsimd but we won't be able\nto remove the `constify_*` macros just yet. Hopefully soon though!\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/993322e886139457f063a79f4182da736db181df", "html_url": "https://github.com/rust-lang/rust/commit/993322e886139457f063a79f4182da736db181df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/993322e886139457f063a79f4182da736db181df/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6908fb762d5f7952ed7d31cf34405b9149a51e02", "url": "https://api.github.com/repos/rust-lang/rust/commits/6908fb762d5f7952ed7d31cf34405b9149a51e02", "html_url": "https://github.com/rust-lang/rust/commit/6908fb762d5f7952ed7d31cf34405b9149a51e02"}, {"sha": "27a4e73ca54f454d16cab7942ef9b27d5c942a32", "url": "https://api.github.com/repos/rust-lang/rust/commits/27a4e73ca54f454d16cab7942ef9b27d5c942a32", "html_url": "https://github.com/rust-lang/rust/commit/27a4e73ca54f454d16cab7942ef9b27d5c942a32"}], "stats": {"total": 100, "additions": 89, "deletions": 11}, "files": [{"sha": "b732eeb624c6dd3cefb5e8e61d36e54a5949da74", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/993322e886139457f063a79f4182da736db181df/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/993322e886139457f063a79f4182da736db181df/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=993322e886139457f063a79f4182da736db181df", "patch": "@@ -71,9 +71,12 @@ pub enum Candidate {\n     /// Borrow of a constant temporary.\n     Ref(Location),\n \n-    /// Array of indices found in the third argument of\n-    /// a call to one of the simd_shuffleN intrinsics.\n-    ShuffleIndices(BasicBlock)\n+    /// Currently applied to function calls where the callee has the unstable\n+    /// `#[rustc_args_required_const]` attribute as well as the SIMD shuffle\n+    /// intrinsic. The intrinsic requires the arguments are indeed constant and\n+    /// the attribute currently provides the semantic requirement that arguments\n+    /// must be constant.\n+    Argument { bb: BasicBlock, index: usize },\n }\n \n struct TempCollector<'tcx> {\n@@ -303,10 +306,10 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                     _ => bug!()\n                 }\n             }\n-            Candidate::ShuffleIndices(bb) => {\n+            Candidate::Argument { bb, index } => {\n                 match self.source[bb].terminator_mut().kind {\n                     TerminatorKind::Call { ref mut args, .. } => {\n-                        Rvalue::Use(mem::replace(&mut args[2], new_operand))\n+                        Rvalue::Use(mem::replace(&mut args[index], new_operand))\n                     }\n                     _ => bug!()\n                 }\n@@ -359,15 +362,15 @@ pub fn promote_candidates<'a, 'tcx>(mir: &mut Mir<'tcx>,\n                 }\n                 (statement.source_info.span, dest.ty(mir, tcx).to_ty(tcx))\n             }\n-            Candidate::ShuffleIndices(bb) => {\n+            Candidate::Argument { bb, index } => {\n                 let terminator = mir[bb].terminator();\n                 let ty = match terminator.kind {\n                     TerminatorKind::Call { ref args, .. } => {\n-                        args[2].ty(mir, tcx)\n+                        args[index].ty(mir, tcx)\n                     }\n                     _ => {\n                         span_bug!(terminator.source_info.span,\n-                                  \"expected simd_shuffleN call to promote\");\n+                                  \"expected call argument to promote\");\n                     }\n                 };\n                 (terminator.source_info.span, ty)"}, {"sha": "297e0e491f69468b777130d1fa59acaa7ccda266", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 42, "deletions": 3, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/993322e886139457f063a79f4182da736db181df/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/993322e886139457f063a79f4182da736db181df/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=993322e886139457f063a79f4182da736db181df", "patch": "@@ -17,6 +17,7 @@\n use rustc_data_structures::bitvec::BitVector;\n use rustc_data_structures::indexed_set::IdxSetBuf;\n use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n+use rustc_data_structures::fx::FxHashSet;\n use rustc::hir;\n use rustc::hir::def_id::DefId;\n use rustc::middle::const_val::ConstVal;\n@@ -30,6 +31,7 @@ use rustc::mir::visit::{PlaceContext, Visitor};\n use rustc::middle::lang_items;\n use syntax::abi::Abi;\n use syntax::attr;\n+use syntax::ast::LitKind;\n use syntax::feature_gate::UnstableFeatures;\n use syntax_pos::{Span, DUMMY_SP};\n \n@@ -407,7 +409,7 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n                         _ => {}\n                     }\n                 }\n-                Candidate::ShuffleIndices(_) => {}\n+                Candidate::Argument { .. } => {}\n             }\n         }\n \n@@ -730,8 +732,10 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n             self.visit_operand(func, location);\n \n             let fn_ty = func.ty(self.mir, self.tcx);\n+            let mut callee_def_id = None;\n             let (mut is_shuffle, mut is_const_fn) = (false, None);\n             if let ty::TyFnDef(def_id, _) = fn_ty.sty {\n+                callee_def_id = Some(def_id);\n                 match self.tcx.fn_sig(def_id).abi() {\n                     Abi::RustIntrinsic |\n                     Abi::PlatformIntrinsic => {\n@@ -754,17 +758,39 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                 }\n             }\n \n+            let constant_arguments = callee_def_id.and_then(|id| {\n+                args_required_const(self.tcx, id)\n+            });\n             for (i, arg) in args.iter().enumerate() {\n                 self.nest(|this| {\n                     this.visit_operand(arg, location);\n-                    if is_shuffle && i == 2 && this.mode == Mode::Fn {\n-                        let candidate = Candidate::ShuffleIndices(bb);\n+                    if this.mode != Mode::Fn {\n+                        return\n+                    }\n+                    let candidate = Candidate::Argument { bb, index: i };\n+                    if is_shuffle && i == 2 {\n                         if this.can_promote() {\n                             this.promotion_candidates.push(candidate);\n                         } else {\n                             span_err!(this.tcx.sess, this.span, E0526,\n                                       \"shuffle indices are not constant\");\n                         }\n+                        return\n+                    }\n+\n+                    let constant_arguments = match constant_arguments.as_ref() {\n+                        Some(s) => s,\n+                        None => return,\n+                    };\n+                    if !constant_arguments.contains(&i) {\n+                        return\n+                    }\n+                    if this.can_promote() {\n+                        this.promotion_candidates.push(candidate);\n+                    } else {\n+                        this.tcx.sess.span_err(this.span,\n+                            &format!(\"argument {} is required to be a constant\",\n+                                     i + 1));\n                     }\n                 });\n             }\n@@ -1085,3 +1111,16 @@ impl MirPass for QualifyAndPromoteConstants {\n         }\n     }\n }\n+\n+fn args_required_const(tcx: TyCtxt, def_id: DefId) -> Option<FxHashSet<usize>> {\n+    let attrs = tcx.get_attrs(def_id);\n+    let attr = attrs.iter().find(|a| a.check_name(\"rustc_args_required_const\"))?;\n+    let mut ret = FxHashSet();\n+    for meta in attr.meta_item_list()? {\n+        match meta.literal()?.node {\n+            LitKind::Int(a, _) => { ret.insert(a as usize); }\n+            _ => return None,\n+        }\n+    }\n+    Some(ret)\n+}"}, {"sha": "aac9299eaafb9d91b256f4cd33363daf8173510d", "filename": "src/test/compile-fail/rustc-args-required-const.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/993322e886139457f063a79f4182da736db181df/src%2Ftest%2Fcompile-fail%2Frustc-args-required-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/993322e886139457f063a79f4182da736db181df/src%2Ftest%2Fcompile-fail%2Frustc-args-required-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frustc-args-required-const.rs?ref=993322e886139457f063a79f4182da736db181df", "patch": "@@ -0,0 +1,36 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(attr_literals, rustc_attrs, const_fn)]\n+\n+#[rustc_args_required_const(0)]\n+fn foo(_a: i32) {\n+}\n+\n+#[rustc_args_required_const(1)]\n+fn bar(_a: i32, _b: i32) {\n+}\n+\n+const A: i32 = 3;\n+\n+const fn baz() -> i32 {\n+    3\n+}\n+\n+fn main() {\n+    foo(2);\n+    foo(2 + 3);\n+    foo(baz());\n+    let a = 4;\n+    foo(A);\n+    foo(a); //~ ERROR: argument 1 is required to be a constant\n+    bar(a, 3);\n+    bar(a, a); //~ ERROR: argument 2 is required to be a constant\n+}"}]}