{"sha": "cb985670c1997534a0cd1cfee606e81e4fa136dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiOTg1NjcwYzE5OTc1MzRhMGNkMWNmZWU2MDZlODFlNGZhMTM2ZGM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-08-16T15:08:34Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-08-16T15:08:38Z"}, "message": "make alignment check integer-based by default, and add an option to make it symbolic", "tree": {"sha": "8cecbeba2966b7bc45523d09820767f6dcd3100d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8cecbeba2966b7bc45523d09820767f6dcd3100d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb985670c1997534a0cd1cfee606e81e4fa136dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb985670c1997534a0cd1cfee606e81e4fa136dc", "html_url": "https://github.com/rust-lang/rust/commit/cb985670c1997534a0cd1cfee606e81e4fa136dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb985670c1997534a0cd1cfee606e81e4fa136dc/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca9e988bdb24838e5e23e40bcc936fd35ce7dede", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca9e988bdb24838e5e23e40bcc936fd35ce7dede", "html_url": "https://github.com/rust-lang/rust/commit/ca9e988bdb24838e5e23e40bcc936fd35ce7dede"}], "stats": {"total": 115, "additions": 62, "deletions": 53}, "files": [{"sha": "134702047522d3fc91e4cf396f41d055fa390ee2", "filename": "src/bin/miri.rs", "status": "modified", "additions": 17, "deletions": 37, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/cb985670c1997534a0cd1cfee606e81e4fa136dc/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb985670c1997534a0cd1cfee606e81e4fa136dc/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=cb985670c1997534a0cd1cfee606e81e4fa136dc", "patch": "@@ -172,48 +172,41 @@ fn main() {\n     init_early_loggers();\n \n     // Parse our arguments and split them across `rustc` and `miri`.\n-    let mut validate = true;\n-    let mut stacked_borrows = true;\n-    let mut check_alignment = true;\n-    let mut communicate = false;\n-    let mut ignore_leaks = false;\n-    let mut seed: Option<u64> = None;\n-    let mut tracked_pointer_tag: Option<miri::PtrId> = None;\n-    let mut tracked_call_id: Option<miri::CallId> = None;\n-    let mut tracked_alloc_id: Option<miri::AllocId> = None;\n+    let mut miri_config = miri::MiriConfig::default();\n     let mut rustc_args = vec![];\n-    let mut crate_args = vec![];\n     let mut after_dashdash = false;\n-    let mut excluded_env_vars = vec![];\n     for arg in env::args() {\n         if rustc_args.is_empty() {\n             // Very first arg: binary name.\n             rustc_args.push(arg);\n         } else if after_dashdash {\n             // Everything that comes after `--` is forwarded to the interpreted crate.\n-            crate_args.push(arg);\n+            miri_config.args.push(arg);\n         } else {\n             match arg.as_str() {\n                 \"-Zmiri-disable-validation\" => {\n-                    validate = false;\n+                    miri_config.validate = false;\n                 }\n                 \"-Zmiri-disable-stacked-borrows\" => {\n-                    stacked_borrows = false;\n+                    miri_config.stacked_borrows = false;\n                 }\n                 \"-Zmiri-disable-alignment-check\" => {\n-                    check_alignment = false;\n+                    miri_config.check_alignment = miri::AlignmentCheck::None;\n+                }\n+                \"-Zmiri-symbolic-alignment-check\" => {\n+                    miri_config.check_alignment = miri::AlignmentCheck::Symbolic;\n                 }\n                 \"-Zmiri-disable-isolation\" => {\n-                    communicate = true;\n+                    miri_config.communicate = true;\n                 }\n                 \"-Zmiri-ignore-leaks\" => {\n-                    ignore_leaks = true;\n+                    miri_config.ignore_leaks = true;\n                 }\n                 \"--\" => {\n                     after_dashdash = true;\n                 }\n                 arg if arg.starts_with(\"-Zmiri-seed=\") => {\n-                    if seed.is_some() {\n+                    if miri_config.seed.is_some() {\n                         panic!(\"Cannot specify -Zmiri-seed multiple times!\");\n                     }\n                     let seed_raw = hex::decode(arg.strip_prefix(\"-Zmiri-seed=\").unwrap())\n@@ -234,10 +227,10 @@ fn main() {\n \n                     let mut bytes = [0; 8];\n                     bytes[..seed_raw.len()].copy_from_slice(&seed_raw);\n-                    seed = Some(u64::from_be_bytes(bytes));\n+                    miri_config.seed = Some(u64::from_be_bytes(bytes));\n                 }\n                 arg if arg.starts_with(\"-Zmiri-env-exclude=\") => {\n-                    excluded_env_vars\n+                    miri_config.excluded_env_vars\n                         .push(arg.strip_prefix(\"-Zmiri-env-exclude=\").unwrap().to_owned());\n                 }\n                 arg if arg.starts_with(\"-Zmiri-track-pointer-tag=\") => {\n@@ -249,7 +242,7 @@ fn main() {\n                         ),\n                     };\n                     if let Some(id) = miri::PtrId::new(id) {\n-                        tracked_pointer_tag = Some(id);\n+                        miri_config.tracked_pointer_tag = Some(id);\n                     } else {\n                         panic!(\"-Zmiri-track-pointer-tag requires a nonzero argument\");\n                     }\n@@ -263,7 +256,7 @@ fn main() {\n                         ),\n                     };\n                     if let Some(id) = miri::CallId::new(id) {\n-                        tracked_call_id = Some(id);\n+                        miri_config.tracked_call_id = Some(id);\n                     } else {\n                         panic!(\"-Zmiri-track-call-id requires a nonzero argument\");\n                     }\n@@ -276,7 +269,7 @@ fn main() {\n                             err\n                         ),\n                     };\n-                    tracked_alloc_id = Some(miri::AllocId(id));\n+                    miri_config.tracked_alloc_id = Some(miri::AllocId(id));\n                 }\n                 _ => {\n                     // Forward to rustc.\n@@ -287,19 +280,6 @@ fn main() {\n     }\n \n     debug!(\"rustc arguments: {:?}\", rustc_args);\n-    debug!(\"crate arguments: {:?}\", crate_args);\n-    let miri_config = miri::MiriConfig {\n-        validate,\n-        stacked_borrows,\n-        check_alignment,\n-        communicate,\n-        ignore_leaks,\n-        excluded_env_vars,\n-        seed,\n-        args: crate_args,\n-        tracked_pointer_tag,\n-        tracked_call_id,\n-        tracked_alloc_id,\n-    };\n+    debug!(\"crate arguments: {:?}\", miri_config.args);\n     run_compiler(rustc_args, &mut MiriCompilerCalls { miri_config })\n }"}, {"sha": "8e4604c3360a6a190f22be6575c3dae4891bae38", "filename": "src/eval.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cb985670c1997534a0cd1cfee606e81e4fa136dc/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb985670c1997534a0cd1cfee606e81e4fa136dc/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=cb985670c1997534a0cd1cfee606e81e4fa136dc", "patch": "@@ -13,15 +13,25 @@ use rustc_target::abi::LayoutOf;\n \n use crate::*;\n \n+#[derive(Copy, Clone, Debug, PartialEq)]\n+pub enum AlignmentCheck {\n+    /// Do not check alignment.\n+    None,\n+    /// Check alignment \"symbolically\", i.e., using only the requested alignment for an allocation and not its real base address.\n+    Symbolic,\n+    /// Check alignment on the actual physical integer address.\n+    Int,\n+}\n+\n /// Configuration needed to spawn a Miri instance.\n #[derive(Clone)]\n pub struct MiriConfig {\n     /// Determine if validity checking is enabled.\n     pub validate: bool,\n     /// Determines if Stacked Borrows is enabled.\n     pub stacked_borrows: bool,\n-    /// Determines if alignment checking is enabled.\n-    pub check_alignment: bool,\n+    /// Controls alignment checking.\n+    pub check_alignment: AlignmentCheck,\n     /// Determines if communication with the host environment is enabled.\n     pub communicate: bool,\n     /// Determines if memory leaks should be ignored.\n@@ -45,7 +55,7 @@ impl Default for MiriConfig {\n         MiriConfig {\n             validate: true,\n             stacked_borrows: true,\n-            check_alignment: true,\n+            check_alignment: AlignmentCheck::Int,\n             communicate: false,\n             ignore_leaks: false,\n             excluded_env_vars: vec![],"}, {"sha": "1b66d5ff6f31d691d569f97b9d4f804ee6328879", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb985670c1997534a0cd1cfee606e81e4fa136dc/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb985670c1997534a0cd1cfee606e81e4fa136dc/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=cb985670c1997534a0cd1cfee606e81e4fa136dc", "patch": "@@ -55,7 +55,7 @@ pub use crate::diagnostics::{\n     register_diagnostic, report_error, EvalContextExt as DiagnosticsEvalContextExt,\n     TerminationInfo, NonHaltingDiagnostic,\n };\n-pub use crate::eval::{create_ecx, eval_main, MiriConfig};\n+pub use crate::eval::{create_ecx, eval_main, AlignmentCheck, MiriConfig};\n pub use crate::helpers::EvalContextExt as HelpersEvalContextExt;\n pub use crate::machine::{\n     AllocExtra, Evaluator, FrameData, MemoryExtra, MiriEvalContext, MiriEvalContextExt,"}, {"sha": "f2abb2ae0e7e6273e4183dd9bd2feb8b51e752a3", "filename": "src/machine.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cb985670c1997534a0cd1cfee606e81e4fa136dc/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb985670c1997534a0cd1cfee606e81e4fa136dc/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=cb985670c1997534a0cd1cfee606e81e4fa136dc", "patch": "@@ -128,7 +128,7 @@ pub struct MemoryExtra {\n     tracked_alloc_id: Option<AllocId>,\n \n     /// Controls whether alignment of memory accesses is being checked.\n-    check_alignment: bool,\n+    check_alignment: AlignmentCheck,\n }\n \n impl MemoryExtra {\n@@ -138,7 +138,7 @@ impl MemoryExtra {\n         tracked_pointer_tag: Option<PtrId>,\n         tracked_call_id: Option<CallId>,\n         tracked_alloc_id: Option<AllocId>,\n-        check_alignment: bool,\n+        check_alignment: AlignmentCheck,\n     ) -> Self {\n         let stacked_borrows = if stacked_borrows {\n             Some(Rc::new(RefCell::new(stacked_borrows::GlobalState::new(tracked_pointer_tag, tracked_call_id))))\n@@ -336,7 +336,12 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\n \n     #[inline(always)]\n     fn enforce_alignment(memory_extra: &MemoryExtra) -> bool {\n-        memory_extra.check_alignment\n+        memory_extra.check_alignment != AlignmentCheck::None\n+    }\n+\n+    #[inline(always)]\n+    fn force_int_for_alignment_check(memory_extra: &Self::MemoryExtra) -> bool {\n+        memory_extra.check_alignment == AlignmentCheck::Int\n     }\n \n     #[inline(always)]"}, {"sha": "77eff5087dac5c2f293a40bb8c15c796f71ee1a5", "filename": "tests/compile-fail/unaligned_pointers/atomic_unaligned.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb985670c1997534a0cd1cfee606e81e4fa136dc/tests%2Fcompile-fail%2Funaligned_pointers%2Fatomic_unaligned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb985670c1997534a0cd1cfee606e81e4fa136dc/tests%2Fcompile-fail%2Funaligned_pointers%2Fatomic_unaligned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_pointers%2Fatomic_unaligned.rs?ref=cb985670c1997534a0cd1cfee606e81e4fa136dc", "patch": "@@ -1,3 +1,4 @@\n+// compile-flags: -Zmiri-symbolic-alignment-check\n #![feature(core_intrinsics)]\n \n fn main() {"}, {"sha": "a40db99a72a6c6e78c7172ef680ddfa97b6b59d9", "filename": "tests/compile-fail/unaligned_pointers/dyn_alignment.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb985670c1997534a0cd1cfee606e81e4fa136dc/tests%2Fcompile-fail%2Funaligned_pointers%2Fdyn_alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb985670c1997534a0cd1cfee606e81e4fa136dc/tests%2Fcompile-fail%2Funaligned_pointers%2Fdyn_alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_pointers%2Fdyn_alignment.rs?ref=cb985670c1997534a0cd1cfee606e81e4fa136dc", "patch": "@@ -1,4 +1,4 @@\n-// should find the bug even without these, but gets masked by optimizations\n+// should find the bug even without validation and stacked borrows, but gets masked by optimizations\n // compile-flags: -Zmiri-disable-validation -Zmiri-disable-stacked-borrows -Zmir-opt-level=0\n \n #[repr(align(256))]\n@@ -15,5 +15,5 @@ fn main() {\n     // Overwrite the data part of `ptr` so it points to `buf`.\n     unsafe { (&mut ptr as *mut _ as *mut *const u8).write(&buf as *const _ as *const u8); }\n     // Re-borrow that. This should be UB.\n-    let _ptr = &*ptr; //~ ERROR accessing memory with alignment 4, but alignment 256 is required\n+    let _ptr = &*ptr; //~ ERROR alignment 256 is required\n }"}, {"sha": "3865d45786374929fbf3f62fb05b7b9cbf672e5d", "filename": "tests/compile-fail/unaligned_pointers/intptrcast_alignment_check.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cb985670c1997534a0cd1cfee606e81e4fa136dc/tests%2Fcompile-fail%2Funaligned_pointers%2Fintptrcast_alignment_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb985670c1997534a0cd1cfee606e81e4fa136dc/tests%2Fcompile-fail%2Funaligned_pointers%2Fintptrcast_alignment_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_pointers%2Fintptrcast_alignment_check.rs?ref=cb985670c1997534a0cd1cfee606e81e4fa136dc", "patch": "@@ -1,7 +1,9 @@\n-// Even with intptrcast and without validation, we want to be *sure* to catch bugs\n-// that arise from pointers being insufficiently aligned. The only way to achieve\n-// that is not not let programs exploit integer information for alignment, so here\n-// we test that this is indeed the case.\n+// compile-flags: -Zmiri-symbolic-alignment-check\n+// With the symbolic alignment check, even with intptrcast and without\n+// validation, we want to be *sure* to catch bugs that arise from pointers being\n+// insufficiently aligned. The only way to achieve that is not not let programs\n+// exploit integer information for alignment, so here we test that this is\n+// indeed the case.\n //\n // See https://github.com/rust-lang/miri/issues/1074.\n fn main() {"}, {"sha": "a1240c90182aa8ff5cf986596a460e9cba5060bf", "filename": "tests/compile-fail/unaligned_pointers/reference_to_packed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb985670c1997534a0cd1cfee606e81e4fa136dc/tests%2Fcompile-fail%2Funaligned_pointers%2Freference_to_packed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb985670c1997534a0cd1cfee606e81e4fa136dc/tests%2Fcompile-fail%2Funaligned_pointers%2Freference_to_packed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_pointers%2Freference_to_packed.rs?ref=cb985670c1997534a0cd1cfee606e81e4fa136dc", "patch": "@@ -15,5 +15,5 @@ fn main() {\n         y: 99,\n     };\n     let p = unsafe { &foo.x };\n-    let i = *p; //~ ERROR memory with alignment 1, but alignment 4 is required\n+    let i = *p; //~ ERROR alignment 4 is required\n }"}, {"sha": "beba47359b551d4119b093aa7edf7c6f503043c9", "filename": "tests/compile-fail/unaligned_pointers/unaligned_ptr_zst.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb985670c1997534a0cd1cfee606e81e4fa136dc/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr_zst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb985670c1997534a0cd1cfee606e81e4fa136dc/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr_zst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr_zst.rs?ref=cb985670c1997534a0cd1cfee606e81e4fa136dc", "patch": "@@ -2,9 +2,9 @@\n // compile-flags: -Zmiri-disable-validation\n \n fn main() {\n-    let x = &2u16;\n+    let x = &2u8;\n     let x = x as *const _ as *const [u32; 0];\n     // This must fail because alignment is violated. Test specifically for loading ZST.\n     let _x = unsafe { *x };\n-    //~^ ERROR memory with alignment 2, but alignment 4 is required\n+    //~^ ERROR alignment 4 is required\n }"}, {"sha": "b3d268f45e4bbf326cfc015759dc8662cd291eb1", "filename": "tests/run-pass/align.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cb985670c1997534a0cd1cfee606e81e4fa136dc/tests%2Frun-pass%2Falign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb985670c1997534a0cd1cfee606e81e4fa136dc/tests%2Frun-pass%2Falign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Falign.rs?ref=cb985670c1997534a0cd1cfee606e81e4fa136dc", "patch": "@@ -0,0 +1,11 @@\n+// This manually makes sure that we have a pointer with the proper alignment.\n+// Do this a couple times in a loop because it may work \"by chance\".\n+fn main() {\n+    for _ in 0..10 {\n+        let x = &mut [0u8; 3];\n+        let base_addr = x as *mut _ as usize;\n+        let base_addr_aligned = if base_addr % 2 == 0 { base_addr } else { base_addr+1 };\n+        let u16_ptr = base_addr_aligned as *mut u16;\n+        unsafe { *u16_ptr = 2; }\n+    }\n+}"}]}