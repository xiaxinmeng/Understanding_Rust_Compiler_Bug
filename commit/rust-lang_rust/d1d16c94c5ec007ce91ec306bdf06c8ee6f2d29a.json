{"sha": "d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxZDE2Yzk0YzVlYzAwN2NlOTFlYzMwNmJkZjA2YzhlZTZmMmQyOWE=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-06-30T18:22:47Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-08-12T03:43:34Z"}, "message": "rustc: rename ProjectionMode and its variant to be more memorable.", "tree": {"sha": "f57c49957f1ae5713a3a1ba68618dd016c238bf4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f57c49957f1ae5713a3a1ba68618dd016c238bf4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a", "html_url": "https://github.com/rust-lang/rust/commit/d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8787a12334439d47e931be26fef53381ce337c3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8787a12334439d47e931be26fef53381ce337c3a", "html_url": "https://github.com/rust-lang/rust/commit/8787a12334439d47e931be26fef53381ce337c3a"}], "stats": {"total": 192, "additions": 83, "deletions": 109}, "files": [{"sha": "697478015cb7b65a496d0b88ec48555f25fa7e37", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a", "patch": "@@ -34,7 +34,7 @@ use ty::{self, Ty, TyCtxt};\n use ty::error::{ExpectedFound, TypeError, UnconstrainedNumeric};\n use ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n use ty::relate::{Relate, RelateResult, TypeRelation};\n-use traits::{self, PredicateObligations, ProjectionMode};\n+use traits::{self, PredicateObligations, Reveal};\n use rustc_data_structures::unify::{self, UnificationTable};\n use std::cell::{Cell, RefCell, Ref, RefMut};\n use std::fmt;\n@@ -147,8 +147,8 @@ pub struct InferCtxt<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n \n     // Sadly, the behavior of projection varies a bit depending on the\n     // stage of compilation. The specifics are given in the\n-    // documentation for `ProjectionMode`.\n-    projection_mode: ProjectionMode,\n+    // documentation for `Reveal`.\n+    projection_mode: Reveal,\n \n     // When an error occurs, we want to avoid reporting \"derived\"\n     // errors that are due to this original failure. Normally, we\n@@ -459,15 +459,15 @@ pub struct InferCtxtBuilder<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     arenas: ty::CtxtArenas<'tcx>,\n     tables: Option<RefCell<ty::Tables<'tcx>>>,\n     param_env: Option<ty::ParameterEnvironment<'gcx>>,\n-    projection_mode: ProjectionMode,\n+    projection_mode: Reveal,\n     normalize: bool\n }\n \n impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'gcx> {\n     pub fn infer_ctxt(self,\n                       tables: Option<ty::Tables<'tcx>>,\n                       param_env: Option<ty::ParameterEnvironment<'gcx>>,\n-                      projection_mode: ProjectionMode)\n+                      projection_mode: Reveal)\n                       -> InferCtxtBuilder<'a, 'gcx, 'tcx> {\n         InferCtxtBuilder {\n             global_tcx: self,\n@@ -479,7 +479,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'gcx> {\n         }\n     }\n \n-    pub fn normalizing_infer_ctxt(self, projection_mode: ProjectionMode)\n+    pub fn normalizing_infer_ctxt(self, projection_mode: Reveal)\n                                   -> InferCtxtBuilder<'a, 'gcx, 'tcx> {\n         InferCtxtBuilder {\n             global_tcx: self,\n@@ -509,7 +509,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'gcx> {\n             projection_cache: RefCell::new(traits::ProjectionCache::new()),\n             reported_trait_errors: RefCell::new(FnvHashSet()),\n             normalize: false,\n-            projection_mode: ProjectionMode::AnyFinal,\n+            projection_mode: Reveal::NotSpecializable,\n             tainted_by_errors_flag: Cell::new(false),\n             err_count_on_creation: self.sess.err_count(),\n             obligations_in_snapshot: Cell::new(false),\n@@ -641,7 +641,7 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n             return value;\n         }\n \n-        self.infer_ctxt(None, None, ProjectionMode::Any).enter(|infcx| {\n+        self.infer_ctxt(None, None, Reveal::All).enter(|infcx| {\n             value.trans_normalize(&infcx)\n         })\n     }\n@@ -659,7 +659,7 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n             return value;\n         }\n \n-        self.infer_ctxt(None, Some(env.clone()), ProjectionMode::Any).enter(|infcx| {\n+        self.infer_ctxt(None, Some(env.clone()), Reveal::All).enter(|infcx| {\n             value.trans_normalize(&infcx)\n        })\n     }\n@@ -736,7 +736,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         Ok(self.tcx.erase_regions(&result))\n     }\n \n-    pub fn projection_mode(&self) -> ProjectionMode {\n+    pub fn projection_mode(&self) -> Reveal {\n         self.projection_mode\n     }\n "}, {"sha": "15f2f21ef25291b2c4df292dada02a9bcd701d19", "filename": "src/librustc/middle/intrinsicck.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs?ref=d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a", "patch": "@@ -12,7 +12,7 @@ use dep_graph::DepNode;\n use hir::def::Def;\n use hir::def_id::DefId;\n use infer::InferCtxt;\n-use traits::ProjectionMode;\n+use traits::Reveal;\n use ty::{self, Ty, TyCtxt};\n use ty::layout::{LayoutError, Pointer, SizeSkeleton};\n \n@@ -36,7 +36,7 @@ struct ItemVisitor<'a, 'tcx: 'a> {\n impl<'a, 'tcx> ItemVisitor<'a, 'tcx> {\n     fn visit_const(&mut self, item_id: ast::NodeId, expr: &hir::Expr) {\n         let param_env = ty::ParameterEnvironment::for_item(self.tcx, item_id);\n-        self.tcx.infer_ctxt(None, Some(param_env), ProjectionMode::Any).enter(|infcx| {\n+        self.tcx.infer_ctxt(None, Some(param_env), Reveal::All).enter(|infcx| {\n             let mut visitor = ExprVisitor {\n                 infcx: &infcx\n             };\n@@ -114,7 +114,7 @@ impl<'a, 'gcx, 'tcx> ExprVisitor<'a, 'gcx, 'tcx> {\n impl<'a, 'tcx, 'v> Visitor<'v> for ItemVisitor<'a, 'tcx> {\n     // const, static and N in [T; N].\n     fn visit_expr(&mut self, expr: &hir::Expr) {\n-        self.tcx.infer_ctxt(None, None, ProjectionMode::Any).enter(|infcx| {\n+        self.tcx.infer_ctxt(None, None, Reveal::All).enter(|infcx| {\n             let mut visitor = ExprVisitor {\n                 infcx: &infcx\n             };\n@@ -144,7 +144,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for ItemVisitor<'a, 'tcx> {\n             span_bug!(s, \"intrinsicck: closure outside of function\")\n         }\n         let param_env = ty::ParameterEnvironment::for_item(self.tcx, id);\n-        self.tcx.infer_ctxt(None, Some(param_env), ProjectionMode::Any).enter(|infcx| {\n+        self.tcx.infer_ctxt(None, Some(param_env), Reveal::All).enter(|infcx| {\n             let mut visitor = ExprVisitor {\n                 infcx: &infcx\n             };"}, {"sha": "f62c9a5d8823e7586b9d90b77aa420e62f80549c", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a", "patch": "@@ -113,7 +113,7 @@ use dep_graph::DepNode;\n use hir::def::*;\n use hir::pat_util;\n use ty::{self, TyCtxt, ParameterEnvironment};\n-use traits::{self, ProjectionMode};\n+use traits::{self, Reveal};\n use ty::subst::Subst;\n use lint;\n use util::nodemap::NodeMap;\n@@ -1484,7 +1484,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n                 let param_env = ParameterEnvironment::for_item(self.ir.tcx, id);\n                 let t_ret_subst = t_ret.subst(self.ir.tcx, &param_env.free_substs);\n                 let is_nil = self.ir.tcx.infer_ctxt(None, Some(param_env),\n-                                                    ProjectionMode::Any).enter(|infcx| {\n+                                                    Reveal::All).enter(|infcx| {\n                     let cause = traits::ObligationCause::dummy();\n                     traits::fully_normalize(&infcx, cause, &t_ret_subst).unwrap().is_nil()\n                 });"}, {"sha": "693b3c2d1c0fb37f59c334ae0b0f51e8254c65e9", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a", "patch": "@@ -32,7 +32,7 @@ pub use self::coherence::OrphanCheckErr;\n pub use self::fulfill::{FulfillmentContext, GlobalFulfilledPredicates, RegionObligation};\n pub use self::project::MismatchedProjectionTypes;\n pub use self::project::{normalize, normalize_projection_type, Normalized};\n-pub use self::project::{ProjectionCache, ProjectionCacheSnapshot, ProjectionMode};\n+pub use self::project::{ProjectionCache, ProjectionCacheSnapshot, Reveal};\n pub use self::object_safety::ObjectSafetyViolation;\n pub use self::object_safety::MethodViolationCode;\n pub use self::select::{EvaluationCache, SelectionContext, SelectionCache};\n@@ -435,7 +435,7 @@ pub fn normalize_param_env_or_error<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     let elaborated_env = unnormalized_env.with_caller_bounds(predicates);\n \n-    tcx.infer_ctxt(None, Some(elaborated_env), ProjectionMode::AnyFinal).enter(|infcx| {\n+    tcx.infer_ctxt(None, Some(elaborated_env), Reveal::NotSpecializable).enter(|infcx| {\n         let predicates = match fully_normalize(&infcx, cause,\n                                                &infcx.parameter_environment.caller_bounds) {\n             Ok(predicates) => predicates,"}, {"sha": "b43074a68b16838ed8f4649aa0467024e44e4087", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 8, "deletions": 32, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a", "patch": "@@ -38,7 +38,7 @@ use std::rc::Rc;\n /// Depending on the stage of compilation, we want projection to be\n /// more or less conservative.\n #[derive(Debug, Copy, Clone, PartialEq, Eq)]\n-pub enum ProjectionMode {\n+pub enum Reveal {\n     /// FIXME (#32205)\n     /// At coherence-checking time, we're still constructing the\n     /// specialization graph, and thus we only project\n@@ -67,7 +67,7 @@ pub enum ProjectionMode {\n     ///\n     /// The projection would succeed if `Output` had been defined\n     /// directly in the impl for `u8`.\n-    Topmost,\n+    ExactMatch,\n \n     /// At type-checking time, we refuse to project any associated\n     /// type that is marked `default`. Non-`default` (\"final\") types\n@@ -91,36 +91,12 @@ pub enum ProjectionMode {\n     /// fn main() {\n     ///     let <() as Assoc>::Output = true;\n     /// }\n-    AnyFinal,\n+    NotSpecializable,\n \n     /// At trans time, all projections will succeed.\n-    Any,\n+    All,\n }\n \n-impl ProjectionMode {\n-    pub fn is_topmost(&self) -> bool {\n-        match *self {\n-            ProjectionMode::Topmost => true,\n-            _ => false,\n-        }\n-    }\n-\n-    pub fn is_any_final(&self) -> bool {\n-        match *self {\n-            ProjectionMode::AnyFinal => true,\n-            _ => false,\n-        }\n-    }\n-\n-    pub fn is_any(&self) -> bool {\n-        match *self {\n-            ProjectionMode::Any => true,\n-            _ => false,\n-        }\n-    }\n-}\n-\n-\n pub type PolyProjectionObligation<'tcx> =\n     Obligation<'tcx, ty::PolyProjectionPredicate<'tcx>>;\n \n@@ -902,7 +878,7 @@ fn assemble_candidates_from_impls<'cx, 'gcx, 'tcx>(\n \n                 candidate_set.vec.push(ProjectionTyCandidate::Select);\n             }\n-            super::VtableImpl(ref impl_data) if !selcx.projection_mode().is_any() => {\n+            super::VtableImpl(ref impl_data) if selcx.projection_mode() != Reveal::All => {\n                 // We have to be careful when projecting out of an\n                 // impl because of specialization. If we are not in\n                 // trans (i.e., projection mode is not \"any\"), and the\n@@ -1008,7 +984,7 @@ fn assemble_candidates_from_impls<'cx, 'gcx, 'tcx>(\n             }\n             super::VtableImpl(_) => {\n                 // In trans mode, we can just project out of impls, no prob.\n-                assert!(selcx.projection_mode().is_any());\n+                assert!(selcx.projection_mode() == Reveal::All);\n                 candidate_set.vec.push(ProjectionTyCandidate::Select);\n             }\n             super::VtableParam(..) => {\n@@ -1332,7 +1308,7 @@ fn confirm_impl_candidate<'cx, 'gcx, 'tcx>(\n /// starting from the given impl.\n ///\n /// Based on the \"projection mode\", this lookup may in fact only examine the\n-/// topmost impl. See the comments for `ProjectionMode` for more details.\n+/// topmost impl. See the comments for `Reveal` for more details.\n fn assoc_ty_def<'cx, 'gcx, 'tcx>(\n     selcx: &SelectionContext<'cx, 'gcx, 'tcx>,\n     impl_def_id: DefId,\n@@ -1341,7 +1317,7 @@ fn assoc_ty_def<'cx, 'gcx, 'tcx>(\n {\n     let trait_def_id = selcx.tcx().impl_trait_ref(impl_def_id).unwrap().def_id;\n \n-    if selcx.projection_mode().is_topmost() {\n+    if selcx.projection_mode() == Reveal::ExactMatch {\n         let impl_node = specialization_graph::Node::Impl(impl_def_id);\n         for item in impl_node.items(selcx.tcx()) {\n             if let ty::TypeTraitItem(assoc_ty) = item {"}, {"sha": "028d05731b64b98eb56ddf8c50a64800599b1cc9", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a", "patch": "@@ -23,7 +23,7 @@ use super::{PredicateObligation, TraitObligation, ObligationCause};\n use super::{ObligationCauseCode, BuiltinDerivedObligation, ImplDerivedObligation};\n use super::{SelectionError, Unimplemented, OutputTypeParameterMismatch};\n use super::{ObjectCastObligation, Obligation};\n-use super::ProjectionMode;\n+use super::Reveal;\n use super::TraitNotObjectSafe;\n use super::Selection;\n use super::SelectionResult;\n@@ -343,7 +343,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         self.infcx\n     }\n \n-    pub fn projection_mode(&self) -> ProjectionMode {\n+    pub fn projection_mode(&self) -> Reveal {\n         self.infcx.projection_mode()\n     }\n "}, {"sha": "38cccb9753df60ba69e80e83586a84656c06a534", "filename": "src/librustc/traits/specialize/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs?ref=d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a", "patch": "@@ -25,7 +25,7 @@ use hir::def_id::DefId;\n use infer::{InferCtxt, TypeOrigin};\n use middle::region;\n use ty::subst::{Subst, Substs};\n-use traits::{self, ProjectionMode, ObligationCause, Normalized};\n+use traits::{self, Reveal, ObligationCause, Normalized};\n use ty::{self, TyCtxt};\n use syntax_pos::DUMMY_SP;\n \n@@ -151,7 +151,7 @@ pub fn specializes<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                              .unwrap()\n                              .subst(tcx, &penv.free_substs);\n \n-    let result = tcx.normalizing_infer_ctxt(ProjectionMode::Topmost).enter(|mut infcx| {\n+    let result = tcx.normalizing_infer_ctxt(Reveal::ExactMatch).enter(|mut infcx| {\n         // Normalize the trait reference, adding any obligations\n         // that arise into the impl1 assumptions.\n         let Normalized { value: impl1_trait_ref, obligations: normalization_obligations } = {"}, {"sha": "a47cd23c64aa6f7145868c142a50f6af542b8a8f", "filename": "src/librustc/traits/specialize/specialization_graph.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs?ref=d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a", "patch": "@@ -14,7 +14,7 @@ use std::rc::Rc;\n use super::{OverlapError, specializes};\n \n use hir::def_id::DefId;\n-use traits::{self, ProjectionMode};\n+use traits::{self, Reveal};\n use ty::{self, TyCtxt, ImplOrTraitItem, TraitDef, TypeFoldable};\n use ty::fast_reject::{self, SimplifiedType};\n use syntax::ast::Name;\n@@ -111,8 +111,7 @@ impl<'a, 'gcx, 'tcx> Children {\n             let possible_sibling = *slot;\n \n             let tcx = tcx.global_tcx();\n-            let (le, ge) = tcx.infer_ctxt(None, None,\n-                                          ProjectionMode::Topmost).enter(|infcx| {\n+            let (le, ge) = tcx.infer_ctxt(None, None, Reveal::ExactMatch).enter(|infcx| {\n                 let overlap = traits::overlapping_impls(&infcx,\n                                                         possible_sibling,\n                                                         impl_def_id);"}, {"sha": "d9802c48f6cfd96f1837800d21c80d491e260e86", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a", "patch": "@@ -14,7 +14,7 @@ use hir::def_id::DefId;\n use ty::subst;\n use infer::InferCtxt;\n use hir::pat_util;\n-use traits::{self, ProjectionMode};\n+use traits::{self, Reveal};\n use ty::{self, Ty, TyCtxt, TypeAndMut, TypeFlags, TypeFoldable};\n use ty::{Disr, ParameterEnvironment};\n use ty::fold::TypeVisitor;\n@@ -137,8 +137,7 @@ impl<'tcx> ParameterEnvironment<'tcx> {\n                                        self_type: Ty<'tcx>, span: Span)\n                                        -> Result<(),CopyImplementationError> {\n         // FIXME: (@jroesch) float this code up\n-        tcx.infer_ctxt(None, Some(self.clone()),\n-                       ProjectionMode::Topmost).enter(|infcx| {\n+        tcx.infer_ctxt(None, Some(self.clone()), Reveal::ExactMatch).enter(|infcx| {\n             let adt = match self_type.sty {\n                 ty::TyStruct(struct_def, substs) => {\n                     for field in struct_def.all_fields() {\n@@ -533,7 +532,7 @@ impl<'a, 'tcx> ty::TyS<'tcx> {\n                    param_env: &ParameterEnvironment<'tcx>,\n                    bound: ty::BuiltinBound, span: Span) -> bool\n     {\n-        tcx.infer_ctxt(None, Some(param_env.clone()), ProjectionMode::Topmost).enter(|infcx| {\n+        tcx.infer_ctxt(None, Some(param_env.clone()), Reveal::ExactMatch).enter(|infcx| {\n             traits::type_known_to_meet_builtin_bound(&infcx, self, bound, span)\n         })\n     }"}, {"sha": "3e88dec8cb27a0c31e8aec233937be99ead96c62", "filename": "src/librustc_const_eval/check_match.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a/src%2Flibrustc_const_eval%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a/src%2Flibrustc_const_eval%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fcheck_match.rs?ref=d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a", "patch": "@@ -25,7 +25,7 @@ use rustc::middle::expr_use_visitor::{LoanCause, MutateMode};\n use rustc::middle::expr_use_visitor as euv;\n use rustc::middle::mem_categorization::{cmt};\n use rustc::hir::pat_util::*;\n-use rustc::traits::ProjectionMode;\n+use rustc::traits::Reveal;\n use rustc::ty::*;\n use rustc::ty;\n use std::cmp::Ordering;\n@@ -1133,7 +1133,7 @@ fn check_legality_of_move_bindings(cx: &MatchCheckCtxt,\n                 let pat_ty = cx.tcx.node_id_to_type(p.id);\n                 //FIXME: (@jroesch) this code should be floated up as well\n                 cx.tcx.infer_ctxt(None, Some(cx.param_env.clone()),\n-                                  ProjectionMode::AnyFinal).enter(|infcx| {\n+                                  Reveal::NotSpecializable).enter(|infcx| {\n                     if infcx.type_moves_by_default(pat_ty, pat.span) {\n                         check_move(p, sub.as_ref().map(|p| &**p));\n                     }\n@@ -1149,7 +1149,7 @@ fn check_legality_of_move_bindings(cx: &MatchCheckCtxt,\n fn check_for_mutation_in_guard<'a, 'tcx>(cx: &'a MatchCheckCtxt<'a, 'tcx>,\n                                          guard: &hir::Expr) {\n     cx.tcx.infer_ctxt(None, Some(cx.param_env.clone()),\n-                      ProjectionMode::AnyFinal).enter(|infcx| {\n+                      Reveal::NotSpecializable).enter(|infcx| {\n         let mut checker = MutationChecker {\n             cx: cx,\n         };"}, {"sha": "73b54c4374ffb65dce75dcf20a6a0bbe29545af5", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a", "patch": "@@ -24,7 +24,7 @@ use rustc::hir::def_id::DefId;\n use rustc::hir::pat_util::def_to_path;\n use rustc::ty::{self, Ty, TyCtxt, subst};\n use rustc::ty::util::IntTypeExt;\n-use rustc::traits::ProjectionMode;\n+use rustc::traits::Reveal;\n use rustc::util::common::ErrorReported;\n use rustc::util::nodemap::NodeMap;\n use rustc::lint;\n@@ -1055,7 +1055,7 @@ fn resolve_trait_associated_const<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n            trait_ref);\n \n     tcx.populate_implementations_for_trait_if_necessary(trait_ref.def_id());\n-    tcx.infer_ctxt(None, None, ProjectionMode::AnyFinal).enter(|infcx| {\n+    tcx.infer_ctxt(None, None, Reveal::NotSpecializable).enter(|infcx| {\n         let mut selcx = traits::SelectionContext::new(&infcx);\n         let obligation = traits::Obligation::new(traits::ObligationCause::dummy(),\n                                                  trait_ref.to_poly_trait_predicate());\n@@ -1073,9 +1073,9 @@ fn resolve_trait_associated_const<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         };\n \n         // NOTE: this code does not currently account for specialization, but when\n-        // it does so, it should hook into the ProjectionMode to determine when the\n+        // it does so, it should hook into the Reveal to determine when the\n         // constant should resolve; this will also require plumbing through to this\n-        // function whether we are in \"trans mode\" to pick the right ProjectionMode\n+        // function whether we are in \"trans mode\" to pick the right Reveal\n         // when constructing the inference context above.\n         match selection {\n             traits::VtableImpl(ref impl_data) => {"}, {"sha": "30fe38a0603a563f71791bc8ac58fa7124d80c5e", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a", "patch": "@@ -22,7 +22,7 @@ use rustc::middle::resolve_lifetime;\n use rustc::middle::stability;\n use rustc::ty::subst;\n use rustc::ty::subst::Subst;\n-use rustc::traits::ProjectionMode;\n+use rustc::traits::Reveal;\n use rustc::ty::{self, Ty, TyCtxt, TypeFoldable};\n use rustc::infer::{self, InferOk, InferResult, TypeOrigin};\n use rustc_metadata::cstore::CStore;\n@@ -141,7 +141,7 @@ fn test_env<F>(source_string: &str,\n                              index,\n                              \"test_crate\",\n                              |tcx| {\n-        tcx.infer_ctxt(None, None, ProjectionMode::AnyFinal).enter(|infcx| {\n+        tcx.infer_ctxt(None, None, Reveal::NotSpecializable).enter(|infcx| {\n \n             body(Env { infcx: &infcx });\n             let free_regions = FreeRegionMap::new();"}, {"sha": "d8ec79fb0609680de5be956ab554eadc2335d468", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a", "patch": "@@ -35,7 +35,7 @@ use rustc::cfg;\n use rustc::ty::subst::Substs;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::adjustment;\n-use rustc::traits::{self, ProjectionMode};\n+use rustc::traits::{self, Reveal};\n use rustc::hir::map as hir_map;\n use util::nodemap::{NodeSet};\n use lint::{Level, LateContext, LintContext, LintArray, Lint};\n@@ -911,7 +911,7 @@ impl LateLintPass for UnconditionalRecursion {\n                     let node_id = tcx.map.as_local_node_id(method.def_id).unwrap();\n \n                     let param_env = Some(ty::ParameterEnvironment::for_item(tcx, node_id));\n-                    tcx.infer_ctxt(None, param_env, ProjectionMode::AnyFinal).enter(|infcx| {\n+                    tcx.infer_ctxt(None, param_env, Reveal::NotSpecializable).enter(|infcx| {\n                         let mut selcx = traits::SelectionContext::new(&infcx);\n                         match selcx.select(&obligation) {\n                             // The method comes from a `T: Trait` bound."}, {"sha": "09dd8748b30c5f343c18e205313c3c227272406d", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a", "patch": "@@ -14,7 +14,7 @@ use rustc::hir::def_id::DefId;\n use rustc::ty::subst::Substs;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::layout::{Layout, Primitive};\n-use rustc::traits::ProjectionMode;\n+use rustc::traits::Reveal;\n use middle::const_val::ConstVal;\n use rustc_const_eval::eval_const_expr_partial;\n use rustc_const_eval::EvalHint::ExprTypeChecked;\n@@ -697,7 +697,7 @@ impl LateLintPass for VariantSizeDifferences {\n         if let hir::ItemEnum(ref enum_definition, ref gens) = it.node {\n             if gens.ty_params.is_empty() {  // sizes only make sense for non-generic types\n                 let t = cx.tcx.node_id_to_type(it.id);\n-                let layout = cx.tcx.normalizing_infer_ctxt(ProjectionMode::Any).enter(|infcx| {\n+                let layout = cx.tcx.normalizing_infer_ctxt(Reveal::All).enter(|infcx| {\n                     let ty = cx.tcx.erase_regions(&t);\n                     ty.layout(&infcx).unwrap_or_else(|e| {\n                         bug!(\"failed to get layout for `{}`: {}\", t, e)"}, {"sha": "5e92a057da38280a46c8ca1ef21353e1bad1ef64", "filename": "src/librustc_mir/mir_map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a/src%2Flibrustc_mir%2Fmir_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a/src%2Flibrustc_mir%2Fmir_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmir_map.rs?ref=d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a", "patch": "@@ -27,7 +27,7 @@ use hair::cx::Cx;\n \n use rustc::mir::mir_map::MirMap;\n use rustc::infer::InferCtxtBuilder;\n-use rustc::traits::ProjectionMode;\n+use rustc::traits::Reveal;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::subst::Substs;\n use rustc::hir;\n@@ -103,7 +103,7 @@ impl<'a, 'gcx, 'tcx> BuildMir<'a, 'gcx> {\n         let def_id = self.tcx.map.local_def_id(src.item_id());\n         CxBuilder {\n             src: src,\n-            infcx: self.tcx.infer_ctxt(None, Some(param_env), ProjectionMode::AnyFinal),\n+            infcx: self.tcx.infer_ctxt(None, Some(param_env), Reveal::NotSpecializable),\n             def_id: def_id,\n             map: self.map\n         }"}, {"sha": "7ebc72bcc5fca36875d7dc631774151219194300", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a", "patch": "@@ -21,7 +21,7 @@ use rustc::hir;\n use rustc::hir::def_id::DefId;\n use rustc::hir::intravisit::FnKind;\n use rustc::hir::map::blocks::FnLikeNode;\n-use rustc::traits::{self, ProjectionMode};\n+use rustc::traits::{self, Reveal};\n use rustc::ty::{self, TyCtxt, Ty};\n use rustc::ty::cast::CastTy;\n use rustc::mir::repr::*;\n@@ -992,7 +992,7 @@ impl<'tcx> MirMapPass<'tcx> for QualifyAndPromoteConstants {\n             // Statics must be Sync.\n             if mode == Mode::Static {\n                 let ty = mir.return_ty.unwrap();\n-                tcx.infer_ctxt(None, None, ProjectionMode::AnyFinal).enter(|infcx| {\n+                tcx.infer_ctxt(None, None, Reveal::NotSpecializable).enter(|infcx| {\n                     let cause = traits::ObligationCause::new(mir.span, id, traits::SharedStatic);\n                     let mut fulfillment_cx = traits::FulfillmentContext::new();\n                     fulfillment_cx.register_builtin_bound(&infcx, ty, ty::BoundSync, cause);"}, {"sha": "52f41741b08d69c6975ca1049ddafb3e91ecae6a", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a", "patch": "@@ -12,7 +12,7 @@\n #![allow(unreachable_code)]\n \n use rustc::infer::{self, InferCtxt, InferOk};\n-use rustc::traits::{self, ProjectionMode};\n+use rustc::traits::{self, Reveal};\n use rustc::ty::fold::TypeFoldable;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::mir::repr::*;\n@@ -695,7 +695,7 @@ impl<'tcx> MirPass<'tcx> for TypeckMir {\n             return;\n         }\n         let param_env = ty::ParameterEnvironment::for_item(tcx, src.item_id());\n-        tcx.infer_ctxt(None, Some(param_env), ProjectionMode::AnyFinal).enter(|infcx| {\n+        tcx.infer_ctxt(None, Some(param_env), Reveal::NotSpecializable).enter(|infcx| {\n             let mut checker = TypeChecker::new(&infcx);\n             {\n                 let mut verifier = TypeVerifier::new(&mut checker, mir);"}, {"sha": "37e42cdea1bf84b6f6b690efeb9bd92b28a4afa4", "filename": "src/librustc_passes/consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a/src%2Flibrustc_passes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a/src%2Flibrustc_passes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconsts.rs?ref=d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a", "patch": "@@ -39,7 +39,7 @@ use rustc::middle::expr_use_visitor as euv;\n use rustc::middle::mem_categorization as mc;\n use rustc::middle::mem_categorization::Categorization;\n use rustc::ty::{self, Ty, TyCtxt};\n-use rustc::traits::ProjectionMode;\n+use rustc::traits::Reveal;\n use rustc::util::common::ErrorReported;\n use rustc::util::nodemap::NodeMap;\n use rustc::middle::const_qualif::ConstQualif;\n@@ -96,7 +96,7 @@ impl<'a, 'gcx> CheckCrateVisitor<'a, 'gcx> {\n         };\n \n         self.tcx\n-            .infer_ctxt(None, Some(param_env), ProjectionMode::AnyFinal)\n+            .infer_ctxt(None, Some(param_env), Reveal::NotSpecializable)\n             .enter(|infcx| f(&mut euv::ExprUseVisitor::new(self, &infcx)))\n     }\n "}, {"sha": "782ee34edd4f98ec90c45b2716b332bd2e19b79f", "filename": "src/librustc_passes/rvalues.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a/src%2Flibrustc_passes%2Frvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a/src%2Flibrustc_passes%2Frvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Frvalues.rs?ref=d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a", "patch": "@@ -15,7 +15,7 @@ use rustc::dep_graph::DepNode;\n use rustc::middle::expr_use_visitor as euv;\n use rustc::middle::mem_categorization as mc;\n use rustc::ty::{self, TyCtxt, ParameterEnvironment};\n-use rustc::traits::ProjectionMode;\n+use rustc::traits::Reveal;\n \n use rustc::hir;\n use rustc::hir::intravisit;\n@@ -41,7 +41,7 @@ impl<'a, 'tcx, 'v> intravisit::Visitor<'v> for RvalueContext<'a, 'tcx> {\n         // FIXME (@jroesch) change this to be an inference context\n         let param_env = ParameterEnvironment::for_item(self.tcx, fn_id);\n         self.tcx.infer_ctxt(None, Some(param_env.clone()),\n-                            ProjectionMode::AnyFinal).enter(|infcx| {\n+                            Reveal::NotSpecializable).enter(|infcx| {\n             let mut delegate = RvalueContextDelegate {\n                 tcx: infcx.tcx,\n                 param_env: &param_env"}, {"sha": "29b3f6ce52fb2b8368f17d2fcbea1193273aac20", "filename": "src/librustc_trans/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a/src%2Flibrustc_trans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a/src%2Flibrustc_trans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2F_match.rs?ref=d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a", "patch": "@@ -217,7 +217,7 @@ use type_of;\n use Disr;\n use value::Value;\n use rustc::ty::{self, Ty, TyCtxt};\n-use rustc::traits::ProjectionMode;\n+use rustc::traits::Reveal;\n use session::config::NoDebugInfo;\n use util::common::indenter;\n use util::nodemap::FnvHashMap;\n@@ -1471,7 +1471,7 @@ fn is_discr_reassigned(bcx: Block, discr: &hir::Expr, body: &hir::Expr) -> bool\n         field: field,\n         reassigned: false\n     };\n-    bcx.tcx().normalizing_infer_ctxt(ProjectionMode::Any).enter(|infcx| {\n+    bcx.tcx().normalizing_infer_ctxt(Reveal::All).enter(|infcx| {\n         let mut visitor = euv::ExprUseVisitor::new(&mut rc, &infcx);\n         visitor.walk_expr(body);\n     });"}, {"sha": "dea5a1560e15b0564f94aaf8b29bb16a5cdc80fc", "filename": "src/librustc_trans/common.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a/src%2Flibrustc_trans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a/src%2Flibrustc_trans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcommon.rs?ref=d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a", "patch": "@@ -40,7 +40,7 @@ use type_::Type;\n use value::Value;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::layout::Layout;\n-use rustc::traits::{self, SelectionContext, ProjectionMode};\n+use rustc::traits::{self, SelectionContext, Reveal};\n use rustc::ty::fold::TypeFoldable;\n use rustc::hir;\n use util::nodemap::NodeMap;\n@@ -128,7 +128,7 @@ pub fn type_pair_fields<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, ty: Ty<'tcx>)\n pub fn type_is_imm_pair<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, ty: Ty<'tcx>)\n                                   -> bool {\n     let tcx = ccx.tcx();\n-    let layout = tcx.normalizing_infer_ctxt(ProjectionMode::Any).enter(|infcx| {\n+    let layout = tcx.normalizing_infer_ctxt(Reveal::All).enter(|infcx| {\n         match ty.layout(&infcx) {\n             Ok(layout) => layout,\n             Err(err) => {\n@@ -1136,7 +1136,7 @@ pub fn fulfill_obligation<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,\n \n         // Do the initial selection for the obligation. This yields the\n         // shallow result we are looking for -- that is, what specific impl.\n-        tcx.normalizing_infer_ctxt(ProjectionMode::Any).enter(|infcx| {\n+        tcx.normalizing_infer_ctxt(Reveal::All).enter(|infcx| {\n             let mut selcx = SelectionContext::new(&infcx);\n \n             let obligation_cause = traits::ObligationCause::misc(span,\n@@ -1195,7 +1195,7 @@ pub fn normalize_and_test_predicates<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     debug!(\"normalize_and_test_predicates(predicates={:?})\",\n            predicates);\n \n-    tcx.normalizing_infer_ctxt(ProjectionMode::Any).enter(|infcx| {\n+    tcx.normalizing_infer_ctxt(Reveal::All).enter(|infcx| {\n         let mut selcx = SelectionContext::new(&infcx);\n         let mut fulfill_cx = traits::FulfillmentContext::new();\n         let cause = traits::ObligationCause::dummy();"}, {"sha": "93e5f4ba1e205cec5dfd64577a54ea7564065a8f", "filename": "src/librustc_trans/glue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a/src%2Flibrustc_trans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a/src%2Flibrustc_trans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fglue.rs?ref=d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a", "patch": "@@ -115,7 +115,7 @@ pub fn get_drop_glue_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     match t.sty {\n         ty::TyBox(typ) if !type_needs_drop(tcx, typ)\n                          && type_is_sized(tcx, typ) => {\n-            tcx.normalizing_infer_ctxt(traits::ProjectionMode::Any).enter(|infcx| {\n+            tcx.normalizing_infer_ctxt(traits::Reveal::All).enter(|infcx| {\n                 let layout = t.layout(&infcx).unwrap();\n                 if layout.size(&tcx.data_layout).bytes() == 0 {\n                     // `Box<ZeroSizeType>` does not allocate."}, {"sha": "3d6093d4d6960f16aeeab3e697a71564414bc823", "filename": "src/librustc_trans/meth.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a/src%2Flibrustc_trans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a/src%2Flibrustc_trans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmeth.rs?ref=d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a", "patch": "@@ -17,7 +17,7 @@ use llvm::{ValueRef, get_params};\n use rustc::hir::def_id::DefId;\n use rustc::ty::subst::{FnSpace, Subst, Substs};\n use rustc::ty::subst;\n-use rustc::traits::{self, ProjectionMode};\n+use rustc::traits::{self, Reveal};\n use abi::FnType;\n use base::*;\n use build::*;\n@@ -321,7 +321,7 @@ pub fn get_impl_method<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     match trait_def.ancestors(impl_def_id).fn_defs(tcx, name).next() {\n         Some(node_item) => {\n-            let substs = tcx.normalizing_infer_ctxt(ProjectionMode::Any).enter(|infcx| {\n+            let substs = tcx.normalizing_infer_ctxt(Reveal::All).enter(|infcx| {\n                 let substs = traits::translate_substs(&infcx, impl_def_id,\n                                                       substs, node_item.node);\n                 tcx.lift(&substs).unwrap_or_else(|| {"}, {"sha": "496870d6c27a1aa5242c6050a1a9c34bf442ebf5", "filename": "src/librustc_trans/type_of.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a/src%2Flibrustc_trans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a/src%2Flibrustc_trans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftype_of.rs?ref=d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a", "patch": "@@ -16,7 +16,7 @@ use abi::FnType;\n use adt;\n use common::*;\n use machine;\n-use rustc::traits::ProjectionMode;\n+use rustc::traits::Reveal;\n use rustc::ty::{self, Ty, TypeFoldable};\n \n use type_::Type;\n@@ -123,7 +123,7 @@ pub fn sizing_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) -> Typ\n     cx.llsizingtypes().borrow_mut().insert(t, llsizingty);\n \n     // FIXME(eddyb) Temporary sanity check for ty::layout.\n-    let layout = cx.tcx().normalizing_infer_ctxt(ProjectionMode::Any).enter(|infcx| {\n+    let layout = cx.tcx().normalizing_infer_ctxt(Reveal::All).enter(|infcx| {\n         t.layout(&infcx)\n     });\n     match layout {"}, {"sha": "e6ddc6ad69379922d7f94282c66389683edb8c50", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a", "patch": "@@ -11,7 +11,7 @@\n use middle::free_region::FreeRegionMap;\n use rustc::infer::{self, InferOk, TypeOrigin};\n use rustc::ty;\n-use rustc::traits::{self, ProjectionMode};\n+use rustc::traits::{self, Reveal};\n use rustc::ty::error::ExpectedFound;\n use rustc::ty::subst::{self, Subst, Substs, VecPerParamSpace};\n use rustc::hir::map::Node;\n@@ -213,7 +213,7 @@ pub fn compare_impl_method<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n         return;\n     }\n \n-    tcx.infer_ctxt(None, None, ProjectionMode::AnyFinal).enter(|mut infcx| {\n+    tcx.infer_ctxt(None, None, Reveal::NotSpecializable).enter(|mut infcx| {\n         let mut fulfillment_cx = traits::FulfillmentContext::new();\n \n         // Normalize the associated types in the trait_bounds.\n@@ -433,7 +433,7 @@ pub fn compare_const_impl<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n            impl_trait_ref);\n \n     let tcx = ccx.tcx;\n-    tcx.infer_ctxt(None, None, ProjectionMode::AnyFinal).enter(|infcx| {\n+    tcx.infer_ctxt(None, None, Reveal::NotSpecializable).enter(|infcx| {\n         let mut fulfillment_cx = traits::FulfillmentContext::new();\n \n         // The below is for the most part highly similar to the procedure"}, {"sha": "0791c76c7121f9ee5039015e2b6a3f0e4133b703", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a", "patch": "@@ -17,7 +17,7 @@ use rustc::infer;\n use middle::region;\n use rustc::ty::subst::{self, Subst};\n use rustc::ty::{self, Ty, TyCtxt};\n-use rustc::traits::{self, ProjectionMode};\n+use rustc::traits::{self, Reveal};\n use util::nodemap::FnvHashSet;\n \n use syntax::ast;\n@@ -84,7 +84,7 @@ fn ensure_drop_params_and_item_params_correspond<'a, 'tcx>(\n     // check that the impl type can be made to match the trait type.\n \n     let impl_param_env = ty::ParameterEnvironment::for_item(tcx, self_type_node_id);\n-    tcx.infer_ctxt(None, Some(impl_param_env), ProjectionMode::AnyFinal).enter(|infcx| {\n+    tcx.infer_ctxt(None, Some(impl_param_env), Reveal::NotSpecializable).enter(|infcx| {\n         let tcx = infcx.tcx;\n         let mut fulfillment_cx = traits::FulfillmentContext::new();\n "}, {"sha": "f4c8032c1d190055d6d868c685ea50fe58450f59", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a", "patch": "@@ -89,7 +89,7 @@ use hir::def_id::DefId;\n use hir::pat_util;\n use rustc::infer::{self, InferCtxt, InferOk, TypeOrigin, TypeTrace, type_variable};\n use rustc::ty::subst::{self, Subst, Substs, VecPerParamSpace, ParamSpace};\n-use rustc::traits::{self, ProjectionMode};\n+use rustc::traits::{self, Reveal};\n use rustc::ty::{GenericPredicates, TypeScheme};\n use rustc::ty::{ParamTy, ParameterEnvironment};\n use rustc::ty::{LvaluePreference, NoPreference, PreferMutLvalue};\n@@ -390,7 +390,7 @@ impl<'a, 'gcx, 'tcx> CrateCtxt<'a, 'gcx> {\n             ccx: self,\n             infcx: self.tcx.infer_ctxt(Some(ty::Tables::empty()),\n                                        param_env,\n-                                       ProjectionMode::AnyFinal)\n+                                       Reveal::NotSpecializable)\n         }\n     }\n }"}, {"sha": "3e6df0ca5bbbd0b69b492d7e345002198aac087a", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a", "patch": "@@ -19,7 +19,7 @@ use hir::def_id::DefId;\n use middle::lang_items::UnsizeTraitLangItem;\n use rustc::ty::subst::{self, Subst};\n use rustc::ty::{self, TyCtxt, TypeFoldable};\n-use rustc::traits::{self, ProjectionMode};\n+use rustc::traits::{self, Reveal};\n use rustc::ty::{ImplOrTraitItemId, ConstTraitItemId};\n use rustc::ty::{MethodTraitItemId, TypeTraitItemId, ParameterEnvironment};\n use rustc::ty::{Ty, TyBool, TyChar, TyEnum, TyError};\n@@ -399,7 +399,7 @@ impl<'a, 'gcx, 'tcx> CoherenceChecker<'a, 'gcx, 'tcx> {\n             debug!(\"check_implementations_of_coerce_unsized: {:?} -> {:?} (free)\",\n                    source, target);\n \n-            tcx.infer_ctxt(None, Some(param_env), ProjectionMode::Topmost).enter(|infcx| {\n+            tcx.infer_ctxt(None, Some(param_env), Reveal::ExactMatch).enter(|infcx| {\n                 let origin = TypeOrigin::Misc(span);\n                 let check_mutbl = |mt_a: ty::TypeAndMut<'gcx>, mt_b: ty::TypeAndMut<'gcx>,\n                                    mk_ptr: &Fn(Ty<'gcx>) -> Ty<'gcx>| {\n@@ -536,7 +536,7 @@ fn enforce_trait_manually_implementable(tcx: TyCtxt, sp: Span, trait_def_id: Def\n \n pub fn check_coherence(ccx: &CrateCtxt) {\n     let _task = ccx.tcx.dep_graph.in_task(DepNode::Coherence);\n-    ccx.tcx.infer_ctxt(None, None, ProjectionMode::Topmost).enter(|infcx| {\n+    ccx.tcx.infer_ctxt(None, None, Reveal::ExactMatch).enter(|infcx| {\n         CoherenceChecker {\n             crate_context: ccx,\n             inference_context: infcx,"}, {"sha": "46a9ef8d5babb0edcc4fe4de4e44894e41910425", "filename": "src/librustc_typeck/coherence/overlap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs?ref=d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a", "patch": "@@ -13,7 +13,7 @@\n //! constructor provide a method with the same name.\n \n use hir::def_id::DefId;\n-use rustc::traits::{self, ProjectionMode};\n+use rustc::traits::{self, Reveal};\n use rustc::ty::{self, TyCtxt};\n use syntax::ast;\n use rustc::dep_graph::DepNode;\n@@ -84,7 +84,7 @@ impl<'cx, 'tcx> OverlapChecker<'cx, 'tcx> {\n \n         for (i, &impl1_def_id) in impls.iter().enumerate() {\n             for &impl2_def_id in &impls[(i+1)..] {\n-                self.tcx.infer_ctxt(None, None, ProjectionMode::Topmost).enter(|infcx| {\n+                self.tcx.infer_ctxt(None, None, Reveal::ExactMatch).enter(|infcx| {\n                     if traits::overlapping_impls(&infcx, impl1_def_id, impl2_def_id).is_some() {\n                         self.check_for_common_items_in_impls(impl1_def_id, impl2_def_id)\n                     }"}, {"sha": "78e8c905ab787761da81a96be2f2e6fe670ec35a", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=d1d16c94c5ec007ce91ec306bdf06c8ee6f2d29a", "patch": "@@ -107,7 +107,7 @@ use hir::map as hir_map;\n use rustc::infer::TypeOrigin;\n use rustc::ty::subst::Substs;\n use rustc::ty::{self, Ty, TyCtxt, TypeFoldable};\n-use rustc::traits::ProjectionMode;\n+use rustc::traits::Reveal;\n use session::{config, CompileResult};\n use util::common::time;\n \n@@ -190,7 +190,7 @@ fn require_same_types<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                                 t1: Ty<'tcx>,\n                                 t2: Ty<'tcx>)\n                                 -> bool {\n-    ccx.tcx.infer_ctxt(None, None, ProjectionMode::AnyFinal).enter(|infcx| {\n+    ccx.tcx.infer_ctxt(None, None, Reveal::NotSpecializable).enter(|infcx| {\n         if let Err(err) = infcx.eq_types(false, origin.clone(), t1, t2) {\n             infcx.report_mismatched_types(origin, t1, t2, err);\n             false"}]}