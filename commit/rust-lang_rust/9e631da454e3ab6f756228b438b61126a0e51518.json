{"sha": "9e631da454e3ab6f756228b438b61126a0e51518", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllNjMxZGE0NTRlM2FiNmY3NTYyMjhiNDM4YjYxMTI2YTBlNTE1MTg=", "commit": {"author": {"name": "Yoshitomo Nakanishi", "email": "yurayura.rounin.3@gmail.com", "date": "2021-03-09T11:04:19Z"}, "committer": {"name": "Yoshitomo Nakanishi", "email": "yurayura.rounin.3@gmail.com", "date": "2021-03-09T11:18:25Z"}, "message": "Move ptr_as_ptr to its own module", "tree": {"sha": "8725128e6cef391193ddc3963dd3feb5cafccd0d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8725128e6cef391193ddc3963dd3feb5cafccd0d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e631da454e3ab6f756228b438b61126a0e51518", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e631da454e3ab6f756228b438b61126a0e51518", "html_url": "https://github.com/rust-lang/rust/commit/9e631da454e3ab6f756228b438b61126a0e51518", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e631da454e3ab6f756228b438b61126a0e51518/comments", "author": {"login": "Y-Nak", "id": 6376004, "node_id": "MDQ6VXNlcjYzNzYwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6376004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Y-Nak", "html_url": "https://github.com/Y-Nak", "followers_url": "https://api.github.com/users/Y-Nak/followers", "following_url": "https://api.github.com/users/Y-Nak/following{/other_user}", "gists_url": "https://api.github.com/users/Y-Nak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Y-Nak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Y-Nak/subscriptions", "organizations_url": "https://api.github.com/users/Y-Nak/orgs", "repos_url": "https://api.github.com/users/Y-Nak/repos", "events_url": "https://api.github.com/users/Y-Nak/events{/privacy}", "received_events_url": "https://api.github.com/users/Y-Nak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Y-Nak", "id": 6376004, "node_id": "MDQ6VXNlcjYzNzYwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6376004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Y-Nak", "html_url": "https://github.com/Y-Nak", "followers_url": "https://api.github.com/users/Y-Nak/followers", "following_url": "https://api.github.com/users/Y-Nak/following{/other_user}", "gists_url": "https://api.github.com/users/Y-Nak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Y-Nak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Y-Nak/subscriptions", "organizations_url": "https://api.github.com/users/Y-Nak/orgs", "repos_url": "https://api.github.com/users/Y-Nak/repos", "events_url": "https://api.github.com/users/Y-Nak/events{/privacy}", "received_events_url": "https://api.github.com/users/Y-Nak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43c88c60c152f55fb1ada9438ed2378c358b329a", "url": "https://api.github.com/repos/rust-lang/rust/commits/43c88c60c152f55fb1ada9438ed2378c358b329a", "html_url": "https://github.com/rust-lang/rust/commit/43c88c60c152f55fb1ada9438ed2378c358b329a"}], "stats": {"total": 198, "additions": 100, "deletions": 98}, "files": [{"sha": "b726bd75f1d83ca7702a8d0aec672003d789ef33", "filename": "clippy_lints/src/casts/mod.rs", "status": "modified", "additions": 47, "deletions": 96, "changes": 143, "blob_url": "https://github.com/rust-lang/rust/blob/9e631da454e3ab6f756228b438b61126a0e51518/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e631da454e3ab6f756228b438b61126a0e51518/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs?ref=9e631da454e3ab6f756228b438b61126a0e51518", "patch": "@@ -8,22 +8,17 @@ mod cast_sign_loss;\n mod char_lit_as_u8;\n mod fn_to_numeric_cast;\n mod fn_to_numeric_cast_with_truncation;\n+mod ptr_as_ptr;\n mod unnecessary_cast;\n mod utils;\n \n-use std::borrow::Cow;\n-\n-use if_chain::if_chain;\n-use rustc_errors::Applicability;\n-use rustc_hir::{Expr, ExprKind, Mutability, TyKind};\n+use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n-use rustc_middle::ty::{self, TypeAndMut};\n use rustc_semver::RustcVersion;\n-use rustc_session::{declare_lint_pass, declare_tool_lint, impl_lint_pass};\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n \n-use crate::utils::sugg::Sugg;\n-use crate::utils::{is_hir_ty_cfg_dependant, meets_msrv, span_lint_and_sugg};\n+use crate::utils::is_hir_ty_cfg_dependant;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for casts from any numerical to a float type where\n@@ -315,58 +310,6 @@ declare_clippy_lint! {\n     \"casting a character literal to `u8` truncates\"\n }\n \n-declare_lint_pass!(Casts => [\n-    CAST_PRECISION_LOSS,\n-    CAST_SIGN_LOSS,\n-    CAST_POSSIBLE_TRUNCATION,\n-    CAST_POSSIBLE_WRAP,\n-    CAST_LOSSLESS,\n-    CAST_REF_TO_MUT,\n-    CAST_PTR_ALIGNMENT,\n-    UNNECESSARY_CAST,\n-    FN_TO_NUMERIC_CAST,\n-    FN_TO_NUMERIC_CAST_WITH_TRUNCATION,\n-    CHAR_LIT_AS_U8,\n-]);\n-\n-impl<'tcx> LateLintPass<'tcx> for Casts {\n-    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        cast_ref_to_mut::check(cx, expr);\n-\n-        if expr.span.from_expansion() {\n-            return;\n-        }\n-        if let ExprKind::Cast(ref cast_expr, cast_to) = expr.kind {\n-            if is_hir_ty_cfg_dependant(cx, cast_to) {\n-                return;\n-            }\n-            let (cast_from, cast_to) = (\n-                cx.typeck_results().expr_ty(cast_expr),\n-                cx.typeck_results().expr_ty(expr),\n-            );\n-\n-            if unnecessary_cast::check(cx, expr, cast_expr, cast_from, cast_to) {\n-                return;\n-            }\n-\n-            fn_to_numeric_cast::check(cx, expr, cast_expr, cast_from, cast_to);\n-            fn_to_numeric_cast_with_truncation::check(cx, expr, cast_expr, cast_from, cast_to);\n-            if cast_from.is_numeric() && cast_to.is_numeric() && !in_external_macro(cx.sess(), expr.span) {\n-                cast_possible_truncation::check(cx, expr, cast_from, cast_to);\n-                cast_possible_wrap::check(cx, expr, cast_from, cast_to);\n-                cast_precision_loss::check(cx, expr, cast_from, cast_to);\n-                cast_lossless::check(cx, expr, cast_expr, cast_from, cast_to);\n-                cast_sign_loss::check(cx, expr, cast_expr, cast_from, cast_to);\n-            }\n-        }\n-\n-        cast_ptr_alignment::check(cx, expr);\n-        char_lit_as_u8::check(cx, expr);\n-    }\n-}\n-\n-const PTR_AS_PTR_MSRV: RustcVersion = RustcVersion::new(1, 38, 0);\n-\n declare_clippy_lint! {\n     /// **What it does:**\n     /// Checks for `as` casts between raw pointers without changing its mutability,\n@@ -398,58 +341,66 @@ declare_clippy_lint! {\n     \"casting using `as` from and to raw pointers that doesn't change its mutability, where `pointer::cast` could take the place of `as`\"\n }\n \n-pub struct PtrAsPtr {\n+pub struct Casts {\n     msrv: Option<RustcVersion>,\n }\n \n-impl PtrAsPtr {\n+impl Casts {\n     #[must_use]\n     pub fn new(msrv: Option<RustcVersion>) -> Self {\n         Self { msrv }\n     }\n }\n \n-impl_lint_pass!(PtrAsPtr => [PTR_AS_PTR]);\n+impl_lint_pass!(Casts => [\n+    CAST_PRECISION_LOSS,\n+    CAST_SIGN_LOSS,\n+    CAST_POSSIBLE_TRUNCATION,\n+    CAST_POSSIBLE_WRAP,\n+    CAST_LOSSLESS,\n+    CAST_REF_TO_MUT,\n+    CAST_PTR_ALIGNMENT,\n+    UNNECESSARY_CAST,\n+    FN_TO_NUMERIC_CAST,\n+    FN_TO_NUMERIC_CAST_WITH_TRUNCATION,\n+    CHAR_LIT_AS_U8,\n+    PTR_AS_PTR,\n+]);\n \n-impl<'tcx> LateLintPass<'tcx> for PtrAsPtr {\n+impl<'tcx> LateLintPass<'tcx> for Casts {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        if !meets_msrv(self.msrv.as_ref(), &PTR_AS_PTR_MSRV) {\n-            return;\n-        }\n-\n         if expr.span.from_expansion() {\n             return;\n         }\n \n-        if_chain! {\n-            if let ExprKind::Cast(cast_expr, cast_to_hir_ty) = expr.kind;\n-            let (cast_from, cast_to) = (cx.typeck_results().expr_ty(cast_expr), cx.typeck_results().expr_ty(expr));\n-            if let ty::RawPtr(TypeAndMut { mutbl: from_mutbl, .. }) = cast_from.kind();\n-            if let ty::RawPtr(TypeAndMut { ty: to_pointee_ty, mutbl: to_mutbl }) = cast_to.kind();\n-            if matches!((from_mutbl, to_mutbl),\n-                (Mutability::Not, Mutability::Not) | (Mutability::Mut, Mutability::Mut));\n-            // The `U` in `pointer::cast` have to be `Sized`\n-            // as explained here: https://github.com/rust-lang/rust/issues/60602.\n-            if to_pointee_ty.is_sized(cx.tcx.at(expr.span), cx.param_env);\n-            then {\n-                let mut applicability = Applicability::MachineApplicable;\n-                let cast_expr_sugg = Sugg::hir_with_applicability(cx, cast_expr, \"_\", &mut applicability);\n-                let turbofish = match &cast_to_hir_ty.kind {\n-                        TyKind::Infer => Cow::Borrowed(\"\"),\n-                        TyKind::Ptr(mut_ty) if matches!(mut_ty.ty.kind, TyKind::Infer) => Cow::Borrowed(\"\"),\n-                        _ => Cow::Owned(format!(\"::<{}>\", to_pointee_ty)),\n-                    };\n-                span_lint_and_sugg(\n-                    cx,\n-                    PTR_AS_PTR,\n-                    expr.span,\n-                    \"`as` casting between raw pointers without changing its mutability\",\n-                    \"try `pointer::cast`, a safer alternative\",\n-                    format!(\"{}.cast{}()\", cast_expr_sugg.maybe_par(), turbofish),\n-                    applicability,\n-                );\n+        if let ExprKind::Cast(ref cast_expr, cast_to) = expr.kind {\n+            if is_hir_ty_cfg_dependant(cx, cast_to) {\n+                return;\n+            }\n+            let (cast_from, cast_to) = (\n+                cx.typeck_results().expr_ty(cast_expr),\n+                cx.typeck_results().expr_ty(expr),\n+            );\n+\n+            if unnecessary_cast::check(cx, expr, cast_expr, cast_from, cast_to) {\n+                return;\n+            }\n+\n+            fn_to_numeric_cast::check(cx, expr, cast_expr, cast_from, cast_to);\n+            fn_to_numeric_cast_with_truncation::check(cx, expr, cast_expr, cast_from, cast_to);\n+            if cast_from.is_numeric() && cast_to.is_numeric() && !in_external_macro(cx.sess(), expr.span) {\n+                cast_possible_truncation::check(cx, expr, cast_from, cast_to);\n+                cast_possible_wrap::check(cx, expr, cast_from, cast_to);\n+                cast_precision_loss::check(cx, expr, cast_from, cast_to);\n+                cast_lossless::check(cx, expr, cast_expr, cast_from, cast_to);\n+                cast_sign_loss::check(cx, expr, cast_expr, cast_from, cast_to);\n             }\n         }\n+\n+        cast_ref_to_mut::check(cx, expr);\n+        cast_ptr_alignment::check(cx, expr);\n+        char_lit_as_u8::check(cx, expr);\n+        ptr_as_ptr::check(cx, expr, &self.msrv);\n     }\n \n     extract_msrv_attr!(LateContext);"}, {"sha": "abfbadf3642bed7e875f67ff6e1197c3b030a4fc", "filename": "clippy_lints/src/casts/ptr_as_ptr.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/9e631da454e3ab6f756228b438b61126a0e51518/clippy_lints%2Fsrc%2Fcasts%2Fptr_as_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e631da454e3ab6f756228b438b61126a0e51518/clippy_lints%2Fsrc%2Fcasts%2Fptr_as_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fptr_as_ptr.rs?ref=9e631da454e3ab6f756228b438b61126a0e51518", "patch": "@@ -0,0 +1,52 @@\n+use std::borrow::Cow;\n+\n+use rustc_errors::Applicability;\n+use rustc_hir::{Expr, ExprKind, Mutability, TyKind};\n+use rustc_lint::LateContext;\n+use rustc_middle::ty::{self, TypeAndMut};\n+use rustc_semver::RustcVersion;\n+\n+use if_chain::if_chain;\n+\n+use crate::utils::sugg::Sugg;\n+use crate::utils::{meets_msrv, span_lint_and_sugg};\n+\n+use super::PTR_AS_PTR;\n+\n+const PTR_AS_PTR_MSRV: RustcVersion = RustcVersion::new(1, 38, 0);\n+\n+pub(super) fn check(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, msrv: &Option<RustcVersion>) {\n+    if !meets_msrv(msrv.as_ref(), &PTR_AS_PTR_MSRV) {\n+        return;\n+    }\n+\n+    if_chain! {\n+        if let ExprKind::Cast(cast_expr, cast_to_hir_ty) = expr.kind;\n+        let (cast_from, cast_to) = (cx.typeck_results().expr_ty(cast_expr), cx.typeck_results().expr_ty(expr));\n+        if let ty::RawPtr(TypeAndMut { mutbl: from_mutbl, .. }) = cast_from.kind();\n+        if let ty::RawPtr(TypeAndMut { ty: to_pointee_ty, mutbl: to_mutbl }) = cast_to.kind();\n+        if matches!((from_mutbl, to_mutbl),\n+            (Mutability::Not, Mutability::Not) | (Mutability::Mut, Mutability::Mut));\n+        // The `U` in `pointer::cast` have to be `Sized`\n+        // as explained here: https://github.com/rust-lang/rust/issues/60602.\n+        if to_pointee_ty.is_sized(cx.tcx.at(expr.span), cx.param_env);\n+        then {\n+            let mut applicability = Applicability::MachineApplicable;\n+            let cast_expr_sugg = Sugg::hir_with_applicability(cx, cast_expr, \"_\", &mut applicability);\n+            let turbofish = match &cast_to_hir_ty.kind {\n+                    TyKind::Infer => Cow::Borrowed(\"\"),\n+                    TyKind::Ptr(mut_ty) if matches!(mut_ty.ty.kind, TyKind::Infer) => Cow::Borrowed(\"\"),\n+                    _ => Cow::Owned(format!(\"::<{}>\", to_pointee_ty)),\n+                };\n+            span_lint_and_sugg(\n+                cx,\n+                PTR_AS_PTR,\n+                expr.span,\n+                \"`as` casting between raw pointers without changing its mutability\",\n+                \"try `pointer::cast`, a safer alternative\",\n+                format!(\"{}.cast{}()\", cast_expr_sugg.maybe_par(), turbofish),\n+                applicability,\n+            );\n+        }\n+    }\n+}"}, {"sha": "04e151df8e8547efa01bfac782ff04afb02f1f77", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9e631da454e3ab6f756228b438b61126a0e51518/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e631da454e3ab6f756228b438b61126a0e51518/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=9e631da454e3ab6f756228b438b61126a0e51518", "patch": "@@ -1076,6 +1076,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(move || box use_self::UseSelf::new(msrv));\n     store.register_late_pass(move || box missing_const_for_fn::MissingConstForFn::new(msrv));\n     store.register_late_pass(move || box needless_question_mark::NeedlessQuestionMark::new(msrv));\n+    store.register_late_pass(move || box casts::Casts::new(msrv));\n \n     store.register_late_pass(|| box size_of_in_element_count::SizeOfInElementCount);\n     store.register_late_pass(|| box map_clone::MapClone);\n@@ -1087,7 +1088,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box main_recursion::MainRecursion::default());\n     store.register_late_pass(|| box lifetimes::Lifetimes);\n     store.register_late_pass(|| box entry::HashMapPass);\n-    store.register_late_pass(|| box casts::Casts);\n     let type_complexity_threshold = conf.type_complexity_threshold;\n     store.register_late_pass(move || box types::TypeComplexity::new(type_complexity_threshold));\n     store.register_late_pass(|| box minmax::MinMaxPass);\n@@ -1276,7 +1276,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box strings::StringToString);\n     store.register_late_pass(|| box zero_sized_map_values::ZeroSizedMapValues);\n     store.register_late_pass(|| box vec_init_then_push::VecInitThenPush::default());\n-    store.register_late_pass(move || box casts::PtrAsPtr::new(msrv));\n     store.register_late_pass(|| box case_sensitive_file_extension_comparisons::CaseSensitiveFileExtensionComparisons);\n     store.register_late_pass(|| box redundant_slicing::RedundantSlicing);\n     store.register_late_pass(|| box from_str_radix_10::FromStrRadix10);"}]}