{"sha": "c1eeb69ce8f922e91b5471e2e84d9289a0cefef1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxZWViNjljZThmOTIyZTkxYjU0NzFlMmU4NGQ5Mjg5YTBjZWZlZjE=", "commit": {"author": {"name": "Irina Popa", "email": "irinagpopa@gmail.com", "date": "2018-07-13T11:43:12Z"}, "committer": {"name": "Irina Popa", "email": "irinagpopa@gmail.com", "date": "2018-07-30T17:10:34Z"}, "message": "rustc_codegen_llvm: use safe references for RustString.", "tree": {"sha": "d5e056aaedd6de71957e9c05eec71029a9ce9fff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5e056aaedd6de71957e9c05eec71029a9ce9fff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1eeb69ce8f922e91b5471e2e84d9289a0cefef1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1eeb69ce8f922e91b5471e2e84d9289a0cefef1", "html_url": "https://github.com/rust-lang/rust/commit/c1eeb69ce8f922e91b5471e2e84d9289a0cefef1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1eeb69ce8f922e91b5471e2e84d9289a0cefef1/comments", "author": {"login": "irinagpopa", "id": 32459019, "node_id": "MDQ6VXNlcjMyNDU5MDE5", "avatar_url": "https://avatars.githubusercontent.com/u/32459019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irinagpopa", "html_url": "https://github.com/irinagpopa", "followers_url": "https://api.github.com/users/irinagpopa/followers", "following_url": "https://api.github.com/users/irinagpopa/following{/other_user}", "gists_url": "https://api.github.com/users/irinagpopa/gists{/gist_id}", "starred_url": "https://api.github.com/users/irinagpopa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irinagpopa/subscriptions", "organizations_url": "https://api.github.com/users/irinagpopa/orgs", "repos_url": "https://api.github.com/users/irinagpopa/repos", "events_url": "https://api.github.com/users/irinagpopa/events{/privacy}", "received_events_url": "https://api.github.com/users/irinagpopa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "irinagpopa", "id": 32459019, "node_id": "MDQ6VXNlcjMyNDU5MDE5", "avatar_url": "https://avatars.githubusercontent.com/u/32459019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irinagpopa", "html_url": "https://github.com/irinagpopa", "followers_url": "https://api.github.com/users/irinagpopa/followers", "following_url": "https://api.github.com/users/irinagpopa/following{/other_user}", "gists_url": "https://api.github.com/users/irinagpopa/gists{/gist_id}", "starred_url": "https://api.github.com/users/irinagpopa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irinagpopa/subscriptions", "organizations_url": "https://api.github.com/users/irinagpopa/orgs", "repos_url": "https://api.github.com/users/irinagpopa/repos", "events_url": "https://api.github.com/users/irinagpopa/events{/privacy}", "received_events_url": "https://api.github.com/users/irinagpopa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44ae6f190993f486d4822dc3da870f564f12b190", "url": "https://api.github.com/repos/rust-lang/rust/commits/44ae6f190993f486d4822dc3da870f564f12b190", "html_url": "https://github.com/rust-lang/rust/commit/44ae6f190993f486d4822dc3da870f564f12b190"}], "stats": {"total": 63, "additions": 33, "deletions": 30}, "files": [{"sha": "7f2a9d6984a1577fbca34234f932f2b250e253d7", "filename": "src/librustc_codegen_llvm/llvm/diagnostic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c1eeb69ce8f922e91b5471e2e84d9289a0cefef1/src%2Flibrustc_codegen_llvm%2Fllvm%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1eeb69ce8f922e91b5471e2e84d9289a0cefef1/src%2Flibrustc_codegen_llvm%2Fllvm%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fdiagnostic.rs?ref=c1eeb69ce8f922e91b5471e2e84d9289a0cefef1", "patch": "@@ -73,9 +73,9 @@ impl OptimizationDiagnostic<'ll> {\n                                                                 &mut column,\n                                                                 filename,\n                                                                 message)\n-                )\n-            )\n-        );\n+                ).ok()\n+            ).ok()\n+        ).ok();\n \n         let mut filename = filename.unwrap_or(String::new());\n         if filename.is_empty() {"}, {"sha": "c2b23246b934bc09929fbd8a0206fd07fe977172", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c1eeb69ce8f922e91b5471e2e84d9289a0cefef1/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1eeb69ce8f922e91b5471e2e84d9289a0cefef1/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=c1eeb69ce8f922e91b5471e2e84d9289a0cefef1", "patch": "@@ -26,7 +26,7 @@ use libc::{c_ulonglong, c_void};\n \n use std::ptr::NonNull;\n \n-use super::RustStringRef;\n+use super::RustString;\n \n pub type Bool = c_uint;\n \n@@ -1402,8 +1402,8 @@ extern \"C\" {\n     pub fn LLVMRustDIBuilderCreateOpDeref() -> i64;\n     pub fn LLVMRustDIBuilderCreateOpPlusUconst() -> i64;\n \n-    pub fn LLVMRustWriteTypeToString(Type: &Type, s: RustStringRef);\n-    pub fn LLVMRustWriteValueToString(value_ref: &Value, s: RustStringRef);\n+    pub fn LLVMRustWriteTypeToString(Type: &Type, s: &RustString);\n+    pub fn LLVMRustWriteValueToString(value_ref: &Value, s: &RustString);\n \n     pub fn LLVMIsAConstantInt(value_ref: &Value) -> Option<&Value>;\n     pub fn LLVMIsAConstantFP(value_ref: &Value) -> Option<&Value>;\n@@ -1478,32 +1478,32 @@ extern \"C\" {\n \n     pub fn LLVMRustGetSectionName(SI: SectionIteratorRef, data: *mut *const c_char) -> size_t;\n \n-    pub fn LLVMRustWriteTwineToString(T: &Twine, s: RustStringRef);\n+    pub fn LLVMRustWriteTwineToString(T: &Twine, s: &RustString);\n \n     pub fn LLVMContextSetDiagnosticHandler(C: &Context,\n                                            Handler: DiagnosticHandler,\n                                            DiagnosticContext: *mut c_void);\n \n     pub fn LLVMRustUnpackOptimizationDiagnostic(DI: &'a DiagnosticInfo,\n-                                                pass_name_out: RustStringRef,\n-                                                function_out: *mut Option<&'a Value>,\n-                                                loc_line_out: *mut c_uint,\n-                                                loc_column_out: *mut c_uint,\n-                                                loc_filename_out: RustStringRef,\n-                                                message_out: RustStringRef);\n+                                                pass_name_out: &RustString,\n+                                                function_out: &mut Option<&'a Value>,\n+                                                loc_line_out: &mut c_uint,\n+                                                loc_column_out: &mut c_uint,\n+                                                loc_filename_out: &RustString,\n+                                                message_out: &RustString);\n     pub fn LLVMRustUnpackInlineAsmDiagnostic(DI: &'a DiagnosticInfo,\n                                              cookie_out: *mut c_uint,\n                                              message_out: *mut Option<&'a Twine>,\n                                              instruction_out: *mut Option<&'a Value>);\n \n-    pub fn LLVMRustWriteDiagnosticInfoToString(DI: &DiagnosticInfo, s: RustStringRef);\n+    pub fn LLVMRustWriteDiagnosticInfoToString(DI: &DiagnosticInfo, s: &RustString);\n     pub fn LLVMRustGetDiagInfoKind(DI: &DiagnosticInfo) -> DiagnosticKind;\n \n     pub fn LLVMRustSetInlineAsmDiagnosticHandler(C: &Context,\n                                                  H: InlineAsmDiagHandler,\n                                                  CX: *mut c_void);\n \n-    pub fn LLVMRustWriteSMDiagnosticToString(d: &SMDiagnostic, s: RustStringRef);\n+    pub fn LLVMRustWriteSMDiagnosticToString(d: &SMDiagnostic, s: &RustString);\n \n     pub fn LLVMRustWriteArchive(Dst: *const c_char,\n                                 NumMembers: size_t,"}, {"sha": "c27e0d2ae8681d60e89fffebe058297d3b55e666", "filename": "src/librustc_codegen_llvm/llvm/mod.rs", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/c1eeb69ce8f922e91b5471e2e84d9289a0cefef1/src%2Flibrustc_codegen_llvm%2Fllvm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1eeb69ce8f922e91b5471e2e84d9289a0cefef1/src%2Flibrustc_codegen_llvm%2Fllvm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fmod.rs?ref=c1eeb69ce8f922e91b5471e2e84d9289a0cefef1", "patch": "@@ -22,6 +22,7 @@ pub use self::CallConv::*;\n pub use self::Linkage::*;\n \n use std::str::FromStr;\n+use std::string::FromUtf8Error;\n use std::slice;\n use std::ffi::{CString, CStr};\n use std::cell::RefCell;\n@@ -92,20 +93,19 @@ impl FromStr for ArchiveKind {\n     }\n }\n \n-#[allow(missing_copy_implementations)]\n-extern { pub type RustString; }\n-type RustStringRef = *mut RustString;\n-type RustStringRepr = *mut RefCell<Vec<u8>>;\n+#[repr(C)]\n+pub struct RustString {\n+    bytes: RefCell<Vec<u8>>,\n+}\n \n /// Appending to a Rust string -- used by RawRustStringOstream.\n #[no_mangle]\n-pub unsafe extern \"C\" fn LLVMRustStringWriteImpl(sr: RustStringRef,\n+pub unsafe extern \"C\" fn LLVMRustStringWriteImpl(sr: &RustString,\n                                                  ptr: *const c_char,\n                                                  size: size_t) {\n     let slice = slice::from_raw_parts(ptr as *const u8, size as usize);\n \n-    let sr = sr as RustStringRepr;\n-    (*sr).borrow_mut().extend_from_slice(slice);\n+    sr.bytes.borrow_mut().extend_from_slice(slice);\n }\n \n pub fn SetInstructionCallConv(instr: &'a Value, cc: CallConv) {\n@@ -229,16 +229,19 @@ pub fn get_param(llfn: &'a Value, index: c_uint) -> &'a Value {\n     }\n }\n \n-pub fn build_string<F>(f: F) -> Option<String>\n-    where F: FnOnce(RustStringRef)\n-{\n-    let mut buf = RefCell::new(Vec::new());\n-    f(&mut buf as RustStringRepr as RustStringRef);\n-    String::from_utf8(buf.into_inner()).ok()\n+pub fn build_string(f: impl FnOnce(&RustString)) -> Result<String, FromUtf8Error> {\n+    let sr = RustString {\n+        bytes: RefCell::new(Vec::new()),\n+    };\n+    f(&sr);\n+    String::from_utf8(sr.bytes.into_inner())\n }\n \n-pub unsafe fn twine_to_string(tr: &Twine) -> String {\n-    build_string(|s| LLVMRustWriteTwineToString(tr, s)).expect(\"got a non-UTF8 Twine from LLVM\")\n+pub fn twine_to_string(tr: &Twine) -> String {\n+    unsafe {\n+        build_string(|s| LLVMRustWriteTwineToString(tr, s))\n+            .expect(\"got a non-UTF8 Twine from LLVM\")\n+    }\n }\n \n pub fn last_error() -> Option<String> {"}]}