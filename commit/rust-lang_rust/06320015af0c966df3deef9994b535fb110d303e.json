{"sha": "06320015af0c966df3deef9994b535fb110d303e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2MzIwMDE1YWYwYzk2NmRmM2RlZWY5OTk0YjUzNWZiMTEwZDMwM2U=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-12-24T12:04:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-24T12:04:28Z"}, "message": "Merge #7021\n\n7021: Track labels in the HIR r=matklad a=Veykril\n\nGroundwork for #6966\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "c067698863b8f6e2d7ab9778b7e23e19fbfcf0b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c067698863b8f6e2d7ab9778b7e23e19fbfcf0b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06320015af0c966df3deef9994b535fb110d303e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf5IPMCRBK7hj4Ov3rIwAAdHIIAGg4uUZmlV1bXPOAyGDOSNxZ\nMuDw8U7iWHAjY+ro98l95b4IhRYt3GmH/XyMH4xHPeJ94wcvqjWNbJNhxFtl0bpW\nTkwxjVA9cP/yoadIgPkjebXcnK/tihtS98UsB3g2ccn1M6zKPB6Nm6q7CBXFZkjR\nf2GhXawL9vZhhbcFJafRW1wm9ny9zDpgMOshMlD/ivSrMCz2ztJU51iCEl6O4RPD\nJ2XKBPRc0RXzFLoQCG3/SZSHLjNglIJStD6yaGcWCBHXJeiDEmiUeAZAzYN4ySxh\nnuXgLXm03x6sbqP9zU+JYCnowbn7zaCcMKnU7NO5EU6fe01Jeuh6nVeVww1sVLY=\n=AxlU\n-----END PGP SIGNATURE-----\n", "payload": "tree c067698863b8f6e2d7ab9778b7e23e19fbfcf0b9\nparent 1487f2f10efe2d0a54e8627692643f3a48ffdbff\nparent 262b9c39824b58068d89d6c5cf53d8fea782b11c\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1608811468 +0000\ncommitter GitHub <noreply@github.com> 1608811468 +0000\n\nMerge #7021\n\n7021: Track labels in the HIR r=matklad a=Veykril\n\nGroundwork for #6966\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06320015af0c966df3deef9994b535fb110d303e", "html_url": "https://github.com/rust-lang/rust/commit/06320015af0c966df3deef9994b535fb110d303e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06320015af0c966df3deef9994b535fb110d303e/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1487f2f10efe2d0a54e8627692643f3a48ffdbff", "url": "https://api.github.com/repos/rust-lang/rust/commits/1487f2f10efe2d0a54e8627692643f3a48ffdbff", "html_url": "https://github.com/rust-lang/rust/commit/1487f2f10efe2d0a54e8627692643f3a48ffdbff"}, {"sha": "262b9c39824b58068d89d6c5cf53d8fea782b11c", "url": "https://api.github.com/repos/rust-lang/rust/commits/262b9c39824b58068d89d6c5cf53d8fea782b11c", "html_url": "https://github.com/rust-lang/rust/commit/262b9c39824b58068d89d6c5cf53d8fea782b11c"}], "stats": {"total": 235, "additions": 167, "deletions": 68}, "files": [{"sha": "b7ded3478867e336b7c2a2669c7a3594a6f287d7", "filename": "crates/hir/src/code_model.rs", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/06320015af0c966df3deef9994b535fb110d303e/crates%2Fhir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06320015af0c966df3deef9994b535fb110d303e/crates%2Fhir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fcode_model.rs?ref=06320015af0c966df3deef9994b535fb110d303e", "patch": "@@ -9,7 +9,7 @@ use hir_def::{\n     adt::StructKind,\n     adt::VariantData,\n     builtin_type::BuiltinType,\n-    expr::{BindingAnnotation, Pat, PatId},\n+    expr::{BindingAnnotation, LabelId, Pat, PatId},\n     import_map,\n     item_tree::ItemTreeNode,\n     lang_item::LangItemTarget,\n@@ -1205,6 +1205,34 @@ impl Local {\n     }\n }\n \n+#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n+pub struct Label {\n+    pub(crate) parent: DefWithBodyId,\n+    pub(crate) label_id: LabelId,\n+}\n+\n+impl Label {\n+    pub fn module(self, db: &dyn HirDatabase) -> Module {\n+        self.parent(db).module(db)\n+    }\n+\n+    pub fn parent(self, _db: &dyn HirDatabase) -> DefWithBody {\n+        self.parent.into()\n+    }\n+\n+    pub fn name(self, db: &dyn HirDatabase) -> Name {\n+        let body = db.body(self.parent.into());\n+        body[self.label_id].name.clone()\n+    }\n+\n+    pub fn source(self, db: &dyn HirDatabase) -> InFile<ast::Label> {\n+        let (_body, source_map) = db.body_with_source_map(self.parent.into());\n+        let src = source_map.label_syntax(self.label_id);\n+        let root = src.file_syntax(db.upcast());\n+        src.map(|ast| ast.to_node(&root))\n+    }\n+}\n+\n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n pub enum GenericParam {\n     TypeParam(TypeParam),"}, {"sha": "a0792b9a6675f72e5aa27e15936be858a359aae0", "filename": "crates/hir/src/from_id.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/06320015af0c966df3deef9994b535fb110d303e/crates%2Fhir%2Fsrc%2Ffrom_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06320015af0c966df3deef9994b535fb110d303e/crates%2Fhir%2Fsrc%2Ffrom_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Ffrom_id.rs?ref=06320015af0c966df3deef9994b535fb110d303e", "patch": "@@ -4,12 +4,15 @@\n //! are splitting the hir.\n \n use hir_def::{\n-    expr::PatId, item_scope::ItemInNs, AdtId, AssocItemId, DefWithBodyId, EnumVariantId, FieldId,\n-    GenericDefId, ModuleDefId, VariantId,\n+    expr::{LabelId, PatId},\n+    item_scope::ItemInNs,\n+    AdtId, AssocItemId, DefWithBodyId, EnumVariantId, FieldId, GenericDefId, ModuleDefId,\n+    VariantId,\n };\n \n use crate::{\n-    Adt, AssocItem, DefWithBody, Field, GenericDef, Local, MacroDef, ModuleDef, Variant, VariantDef,\n+    Adt, AssocItem, DefWithBody, Field, GenericDef, Label, Local, MacroDef, ModuleDef, Variant,\n+    VariantDef,\n };\n \n macro_rules! from_id {\n@@ -228,6 +231,12 @@ impl From<(DefWithBodyId, PatId)> for Local {\n     }\n }\n \n+impl From<(DefWithBodyId, LabelId)> for Label {\n+    fn from((parent, label_id): (DefWithBodyId, LabelId)) -> Self {\n+        Label { parent, label_id }\n+    }\n+}\n+\n impl From<MacroDef> for ItemInNs {\n     fn from(macro_def: MacroDef) -> Self {\n         ItemInNs::Macros(macro_def.into())"}, {"sha": "7ac9fd507991d5ee90e97ed3bc3b4afebde3d474", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/06320015af0c966df3deef9994b535fb110d303e/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06320015af0c966df3deef9994b535fb110d303e/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=06320015af0c966df3deef9994b535fb110d303e", "patch": "@@ -35,8 +35,8 @@ pub use crate::{\n     code_model::{\n         Access, Adt, AsAssocItem, AssocItem, AssocItemContainer, Callable, CallableKind, Const,\n         Crate, CrateDependency, DefWithBody, Enum, Field, FieldSource, Function, GenericDef,\n-        HasVisibility, Impl, LifetimeParam, Local, MacroDef, Module, ModuleDef, ScopeDef, Static,\n-        Struct, Trait, Type, TypeAlias, TypeParam, Union, Variant, VariantDef,\n+        HasVisibility, Impl, Label, LifetimeParam, Local, MacroDef, Module, ModuleDef, ScopeDef,\n+        Static, Struct, Trait, Type, TypeAlias, TypeParam, Union, Variant, VariantDef,\n     },\n     has_source::HasSource,\n     semantics::{PathResolution, Semantics, SemanticsScope},"}, {"sha": "67cd16e311cbf0f1a0271ecc6bed409006edb216", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/06320015af0c966df3deef9994b535fb110d303e/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06320015af0c966df3deef9994b535fb110d303e/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=06320015af0c966df3deef9994b535fb110d303e", "patch": "@@ -15,7 +15,7 @@ use itertools::Itertools;\n use rustc_hash::{FxHashMap, FxHashSet};\n use syntax::{\n     algo::find_node_at_offset,\n-    ast::{self, GenericParamsOwner},\n+    ast::{self, GenericParamsOwner, LoopBodyOwner},\n     match_ast, AstNode, SyntaxNode, SyntaxToken, TextSize,\n };\n \n@@ -25,8 +25,8 @@ use crate::{\n     diagnostics::Diagnostic,\n     semantics::source_to_def::{ChildContainer, SourceToDefCache, SourceToDefCtx},\n     source_analyzer::{resolve_hir_path, SourceAnalyzer},\n-    AssocItem, Callable, Crate, Field, Function, HirFileId, Impl, InFile, LifetimeParam, Local,\n-    MacroDef, Module, ModuleDef, Name, Path, ScopeDef, Trait, Type, TypeAlias, TypeParam,\n+    AssocItem, Callable, Crate, Field, Function, HirFileId, Impl, InFile, Label, LifetimeParam,\n+    Local, MacroDef, Module, ModuleDef, Name, Path, ScopeDef, Trait, Type, TypeAlias, TypeParam,\n     VariantDef,\n };\n \n@@ -182,6 +182,10 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n         self.imp.resolve_lifetime_param(lifetime)\n     }\n \n+    pub fn resolve_label(&self, lifetime: &ast::Lifetime) -> Option<Label> {\n+        self.imp.resolve_label(lifetime)\n+    }\n+\n     pub fn type_of_expr(&self, expr: &ast::Expr) -> Option<Type> {\n         self.imp.type_of_expr(expr)\n     }\n@@ -425,6 +429,28 @@ impl<'db> SemanticsImpl<'db> {\n         ToDef::to_def(self, src)\n     }\n \n+    fn resolve_label(&self, lifetime: &ast::Lifetime) -> Option<Label> {\n+        let text = lifetime.text();\n+        let label = lifetime.syntax().ancestors().find_map(|syn| {\n+            let label = match_ast! {\n+                match syn {\n+                    ast::ForExpr(it) => it.label(),\n+                    ast::WhileExpr(it) => it.label(),\n+                    ast::LoopExpr(it) => it.label(),\n+                    ast::EffectExpr(it) => it.label(),\n+                    _ => None,\n+                }\n+            };\n+            label.filter(|l| {\n+                l.lifetime()\n+                    .and_then(|lt| lt.lifetime_ident_token())\n+                    .map_or(false, |lt| lt.text() == text)\n+            })\n+        })?;\n+        let src = self.find_file(label.syntax().clone()).with_value(label);\n+        ToDef::to_def(self, src)\n+    }\n+\n     fn type_of_expr(&self, expr: &ast::Expr) -> Option<Type> {\n         self.analyze(expr.syntax()).type_of_expr(self.db, expr)\n     }\n@@ -720,6 +746,7 @@ to_def_impls![\n     (crate::LifetimeParam, ast::LifetimeParam, lifetime_param_to_def),\n     (crate::MacroDef, ast::MacroRules, macro_rules_to_def),\n     (crate::Local, ast::IdentPat, bind_pat_to_def),\n+    (crate::Label, ast::Label, label_to_def),\n ];\n \n fn find_root(node: &SyntaxNode) -> SyntaxNode {"}, {"sha": "424e6e8a9408efaf300ca3479f3c401fa33fdc39", "filename": "crates/hir/src/semantics/source_to_def.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/06320015af0c966df3deef9994b535fb110d303e/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06320015af0c966df3deef9994b535fb110d303e/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs?ref=06320015af0c966df3deef9994b535fb110d303e", "patch": "@@ -4,7 +4,7 @@ use base_db::FileId;\n use hir_def::{\n     child_by_source::ChildBySource,\n     dyn_map::DynMap,\n-    expr::PatId,\n+    expr::{LabelId, PatId},\n     keys::{self, Key},\n     ConstId, DefWithBodyId, EnumId, EnumVariantId, FieldId, FunctionId, GenericDefId, ImplId,\n     LifetimeParamId, ModuleId, StaticId, StructId, TraitId, TypeAliasId, TypeParamId, UnionId,\n@@ -108,12 +108,21 @@ impl SourceToDefCtx<'_, '_> {\n         &mut self,\n         src: InFile<ast::IdentPat>,\n     ) -> Option<(DefWithBodyId, PatId)> {\n-        let container = self.find_pat_container(src.as_ref().map(|it| it.syntax()))?;\n+        let container = self.find_pat_or_label_container(src.as_ref().map(|it| it.syntax()))?;\n         let (_body, source_map) = self.db.body_with_source_map(container);\n         let src = src.map(ast::Pat::from);\n         let pat_id = source_map.node_pat(src.as_ref())?;\n         Some((container, pat_id))\n     }\n+    pub(super) fn label_to_def(\n+        &mut self,\n+        src: InFile<ast::Label>,\n+    ) -> Option<(DefWithBodyId, LabelId)> {\n+        let container = self.find_pat_or_label_container(src.as_ref().map(|it| it.syntax()))?;\n+        let (_body, source_map) = self.db.body_with_source_map(container);\n+        let label_id = source_map.node_label(src.as_ref())?;\n+        Some((container, label_id))\n+    }\n \n     fn to_def<Ast: AstNode + 'static, ID: Copy + 'static>(\n         &mut self,\n@@ -237,7 +246,7 @@ impl SourceToDefCtx<'_, '_> {\n         None\n     }\n \n-    fn find_pat_container(&mut self, src: InFile<&SyntaxNode>) -> Option<DefWithBodyId> {\n+    fn find_pat_or_label_container(&mut self, src: InFile<&SyntaxNode>) -> Option<DefWithBodyId> {\n         for container in src.cloned().ancestors_with_macros(self.db.upcast()).skip(1) {\n             let res: DefWithBodyId = match_ast! {\n                 match (container.value) {"}, {"sha": "d07004b9d7c969b944eea851a007051522cad13e", "filename": "crates/hir_def/src/body.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/06320015af0c966df3deef9994b535fb110d303e/crates%2Fhir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06320015af0c966df3deef9994b535fb110d303e/crates%2Fhir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody.rs?ref=06320015af0c966df3deef9994b535fb110d303e", "patch": "@@ -26,7 +26,7 @@ pub(crate) use lower::LowerCtx;\n use crate::{\n     attr::{Attrs, RawAttrs},\n     db::DefDatabase,\n-    expr::{Expr, ExprId, Pat, PatId},\n+    expr::{Expr, ExprId, Label, LabelId, Pat, PatId},\n     item_scope::BuiltinShadowMode,\n     item_scope::ItemScope,\n     nameres::CrateDefMap,\n@@ -226,6 +226,7 @@ pub(crate) struct Mark {\n pub struct Body {\n     pub exprs: Arena<Expr>,\n     pub pats: Arena<Pat>,\n+    pub labels: Arena<Label>,\n     /// The patterns for the function's parameters. While the parameter types are\n     /// part of the function signature, the patterns are not (they don't change\n     /// the external type of the function).\n@@ -244,6 +245,8 @@ pub type ExprSource = InFile<ExprPtr>;\n pub type PatPtr = Either<AstPtr<ast::Pat>, AstPtr<ast::SelfParam>>;\n pub type PatSource = InFile<PatPtr>;\n \n+pub type LabelPtr = AstPtr<ast::Label>;\n+pub type LabelSource = InFile<LabelPtr>;\n /// An item body together with the mapping from syntax nodes to HIR expression\n /// IDs. This is needed to go from e.g. a position in a file to the HIR\n /// expression containing it; but for type inference etc., we want to operate on\n@@ -261,6 +264,8 @@ pub struct BodySourceMap {\n     expr_map_back: ArenaMap<ExprId, Result<ExprSource, SyntheticSyntax>>,\n     pat_map: FxHashMap<PatSource, PatId>,\n     pat_map_back: ArenaMap<PatId, Result<PatSource, SyntheticSyntax>>,\n+    label_map: FxHashMap<LabelSource, LabelId>,\n+    label_map_back: ArenaMap<LabelId, LabelSource>,\n     field_map: FxHashMap<(ExprId, usize), InFile<AstPtr<ast::RecordExprField>>>,\n     expansions: FxHashMap<InFile<AstPtr<ast::MacroCall>>, HirFileId>,\n \n@@ -334,6 +339,14 @@ impl Index<PatId> for Body {\n     }\n }\n \n+impl Index<LabelId> for Body {\n+    type Output = Label;\n+\n+    fn index(&self, label: LabelId) -> &Label {\n+        &self.labels[label]\n+    }\n+}\n+\n impl BodySourceMap {\n     pub fn expr_syntax(&self, expr: ExprId) -> Result<ExprSource, SyntheticSyntax> {\n         self.expr_map_back[expr].clone()\n@@ -363,6 +376,15 @@ impl BodySourceMap {\n         self.pat_map.get(&src).cloned()\n     }\n \n+    pub fn label_syntax(&self, label: LabelId) -> LabelSource {\n+        self.label_map_back[label].clone()\n+    }\n+\n+    pub fn node_label(&self, node: InFile<&ast::Label>) -> Option<LabelId> {\n+        let src = node.map(|it| AstPtr::new(it));\n+        self.label_map.get(&src).cloned()\n+    }\n+\n     pub fn field_syntax(&self, expr: ExprId, field: usize) -> InFile<AstPtr<ast::RecordExprField>> {\n         self.field_map[&(expr, field)].clone()\n     }"}, {"sha": "17c72779bad52eb8d6af7381757b6f60d0c2769f", "filename": "crates/hir_def/src/body/lower.rs", "status": "modified", "additions": 45, "deletions": 47, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/06320015af0c966df3deef9994b535fb110d303e/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06320015af0c966df3deef9994b535fb110d303e/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs?ref=06320015af0c966df3deef9994b535fb110d303e", "patch": "@@ -22,13 +22,14 @@ use test_utils::mark;\n \n use crate::{\n     adt::StructKind,\n-    body::{Body, BodySourceMap, Expander, PatPtr, SyntheticSyntax},\n+    body::{Body, BodySourceMap, Expander, LabelSource, PatPtr, SyntheticSyntax},\n     builtin_type::{BuiltinFloat, BuiltinInt},\n     db::DefDatabase,\n     diagnostics::{InactiveCode, MacroError, UnresolvedProcMacro},\n     expr::{\n-        dummy_expr_id, ArithOp, Array, BinaryOp, BindingAnnotation, CmpOp, Expr, ExprId, Literal,\n-        LogicOp, MatchArm, Ordering, Pat, PatId, RecordFieldPat, RecordLitField, Statement,\n+        dummy_expr_id, ArithOp, Array, BinaryOp, BindingAnnotation, CmpOp, Expr, ExprId, Label,\n+        LabelId, Literal, LogicOp, MatchArm, Ordering, Pat, PatId, RecordFieldPat, RecordLitField,\n+        Statement,\n     },\n     item_scope::BuiltinShadowMode,\n     item_tree::{ItemTree, ItemTreeId, ItemTreeNode},\n@@ -72,6 +73,7 @@ pub(super) fn lower(\n         body: Body {\n             exprs: Arena::default(),\n             pats: Arena::default(),\n+            labels: Arena::default(),\n             params: Vec::new(),\n             body_expr: dummy_expr_id(),\n             item_scope: Default::default(),\n@@ -175,6 +177,18 @@ impl ExprCollector<'_> {\n         id\n     }\n \n+    fn alloc_label(&mut self, label: Label, ptr: AstPtr<ast::Label>) -> LabelId {\n+        let src = self.expander.to_source(ptr);\n+        let id = self.make_label(label, src.clone());\n+        self.source_map.label_map.insert(src, id);\n+        id\n+    }\n+    fn make_label(&mut self, label: Label, src: LabelSource) -> LabelId {\n+        let id = self.body.labels.alloc(label);\n+        self.source_map.label_map_back.insert(id, src);\n+        id\n+    }\n+\n     fn collect_expr(&mut self, expr: ast::Expr) -> ExprId {\n         let syntax_ptr = AstPtr::new(&expr);\n         if self.check_cfg(&expr).is_none() {\n@@ -228,19 +242,22 @@ impl ExprCollector<'_> {\n                     self.alloc_expr(Expr::Unsafe { body }, syntax_ptr)\n                 }\n                 // FIXME: we need to record these effects somewhere...\n-                ast::Effect::Label(label) => match e.block_expr() {\n-                    Some(block) => {\n-                        let res = self.collect_block(block);\n-                        match &mut self.body.exprs[res] {\n-                            Expr::Block { label: block_label, .. } => {\n-                                *block_label = label.lifetime().map(|t| Name::new_lifetime(&t))\n+                ast::Effect::Label(label) => {\n+                    let label = self.collect_label(label);\n+                    match e.block_expr() {\n+                        Some(block) => {\n+                            let res = self.collect_block(block);\n+                            match &mut self.body.exprs[res] {\n+                                Expr::Block { label: block_label, .. } => {\n+                                    *block_label = Some(label);\n+                                }\n+                                _ => unreachable!(),\n                             }\n-                            _ => unreachable!(),\n+                            res\n                         }\n-                        res\n+                        None => self.missing_expr(),\n                     }\n-                    None => self.missing_expr(),\n-                },\n+                }\n                 // FIXME: we need to record these effects somewhere...\n                 ast::Effect::Async(_) => {\n                     let body = self.collect_block_opt(e.block_expr());\n@@ -253,16 +270,12 @@ impl ExprCollector<'_> {\n             },\n             ast::Expr::BlockExpr(e) => self.collect_block(e),\n             ast::Expr::LoopExpr(e) => {\n+                let label = e.label().map(|label| self.collect_label(label));\n                 let body = self.collect_block_opt(e.loop_body());\n-                self.alloc_expr(\n-                    Expr::Loop {\n-                        body,\n-                        label: e.label().and_then(|l| l.lifetime()).map(|l| Name::new_lifetime(&l)),\n-                    },\n-                    syntax_ptr,\n-                )\n+                self.alloc_expr(Expr::Loop { body, label }, syntax_ptr)\n             }\n             ast::Expr::WhileExpr(e) => {\n+                let label = e.label().map(|label| self.collect_label(label));\n                 let body = self.collect_block_opt(e.loop_body());\n \n                 let condition = match e.condition() {\n@@ -283,42 +296,20 @@ impl ExprCollector<'_> {\n                             ];\n                             let match_expr =\n                                 self.alloc_expr_desugared(Expr::Match { expr: match_expr, arms });\n-                            return self.alloc_expr(\n-                                Expr::Loop {\n-                                    body: match_expr,\n-                                    label: e\n-                                        .label()\n-                                        .and_then(|l| l.lifetime())\n-                                        .map(|l| Name::new_lifetime(&l)),\n-                                },\n-                                syntax_ptr,\n-                            );\n+                            return self\n+                                .alloc_expr(Expr::Loop { body: match_expr, label }, syntax_ptr);\n                         }\n                     },\n                 };\n \n-                self.alloc_expr(\n-                    Expr::While {\n-                        condition,\n-                        body,\n-                        label: e.label().and_then(|l| l.lifetime()).map(|l| Name::new_lifetime(&l)),\n-                    },\n-                    syntax_ptr,\n-                )\n+                self.alloc_expr(Expr::While { condition, body, label }, syntax_ptr)\n             }\n             ast::Expr::ForExpr(e) => {\n+                let label = e.label().map(|label| self.collect_label(label));\n                 let iterable = self.collect_expr_opt(e.iterable());\n                 let pat = self.collect_pat_opt(e.pat());\n                 let body = self.collect_block_opt(e.loop_body());\n-                self.alloc_expr(\n-                    Expr::For {\n-                        iterable,\n-                        pat,\n-                        body,\n-                        label: e.label().and_then(|l| l.lifetime()).map(|l| Name::new_lifetime(&l)),\n-                    },\n-                    syntax_ptr,\n-                )\n+                self.alloc_expr(Expr::For { iterable, pat, body, label }, syntax_ptr)\n             }\n             ast::Expr::CallExpr(e) => {\n                 let callee = self.collect_expr_opt(e.expr());\n@@ -818,6 +809,13 @@ impl ExprCollector<'_> {\n         }\n     }\n \n+    fn collect_label(&mut self, ast_label: ast::Label) -> LabelId {\n+        let label = Label {\n+            name: ast_label.lifetime().as_ref().map_or_else(Name::missing, Name::new_lifetime),\n+        };\n+        self.alloc_label(label, AstPtr::new(&ast_label))\n+    }\n+\n     fn collect_pat(&mut self, pat: ast::Pat) -> PatId {\n         let pattern = match &pat {\n             ast::Pat::IdentPat(bp) => {"}, {"sha": "6a481769dbc50ed191824500c6860dae3ecae621", "filename": "crates/hir_def/src/expr.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/06320015af0c966df3deef9994b535fb110d303e/crates%2Fhir_def%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06320015af0c966df3deef9994b535fb110d303e/crates%2Fhir_def%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fexpr.rs?ref=06320015af0c966df3deef9994b535fb110d303e", "patch": "@@ -29,6 +29,12 @@ pub(crate) fn dummy_expr_id() -> ExprId {\n \n pub type PatId = Idx<Pat>;\n \n+#[derive(Debug, Clone, Eq, PartialEq)]\n+pub struct Label {\n+    pub name: Name,\n+}\n+pub type LabelId = Idx<Label>;\n+\n #[derive(Debug, Clone, Eq, PartialEq)]\n pub enum Literal {\n     String(String),\n@@ -52,22 +58,22 @@ pub enum Expr {\n     Block {\n         statements: Vec<Statement>,\n         tail: Option<ExprId>,\n-        label: Option<Name>,\n+        label: Option<LabelId>,\n     },\n     Loop {\n         body: ExprId,\n-        label: Option<Name>,\n+        label: Option<LabelId>,\n     },\n     While {\n         condition: ExprId,\n         body: ExprId,\n-        label: Option<Name>,\n+        label: Option<LabelId>,\n     },\n     For {\n         iterable: ExprId,\n         pat: PatId,\n         body: ExprId,\n-        label: Option<Name>,\n+        label: Option<LabelId>,\n     },\n     Call {\n         callee: ExprId,"}, {"sha": "70a3f3075c08aac00fc70ee8e087a9d42d16d50c", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/06320015af0c966df3deef9994b535fb110d303e/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06320015af0c966df3deef9994b535fb110d303e/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=06320015af0c966df3deef9994b535fb110d303e", "patch": "@@ -143,7 +143,7 @@ impl<'a> InferenceContext<'a> {\n                     self.breakables.push(BreakableContext {\n                         may_break: false,\n                         break_ty: break_ty.clone(),\n-                        label: label.clone(),\n+                        label: label.map(|label| self.body[label].name.clone()),\n                     });\n                     let ty = self.infer_block(statements, *tail, &Expectation::has_type(break_ty));\n                     let ctxt = self.breakables.pop().expect(\"breakable stack broken\");\n@@ -172,7 +172,7 @@ impl<'a> InferenceContext<'a> {\n                 self.breakables.push(BreakableContext {\n                     may_break: false,\n                     break_ty: self.table.new_type_var(),\n-                    label: label.clone(),\n+                    label: label.map(|label| self.body[label].name.clone()),\n                 });\n                 self.infer_expr(*body, &Expectation::has_type(Ty::unit()));\n \n@@ -191,7 +191,7 @@ impl<'a> InferenceContext<'a> {\n                 self.breakables.push(BreakableContext {\n                     may_break: false,\n                     break_ty: Ty::Unknown,\n-                    label: label.clone(),\n+                    label: label.map(|label| self.body[label].name.clone()),\n                 });\n                 // while let is desugared to a match loop, so this is always simple while\n                 self.infer_expr(*condition, &Expectation::has_type(Ty::simple(TypeCtor::Bool)));\n@@ -207,7 +207,7 @@ impl<'a> InferenceContext<'a> {\n                 self.breakables.push(BreakableContext {\n                     may_break: false,\n                     break_ty: Ty::Unknown,\n-                    label: label.clone(),\n+                    label: label.map(|label| self.body[label].name.clone()),\n                 });\n                 let pat_ty =\n                     self.resolve_associated_type(iterable_ty, self.resolve_into_iter_item());"}]}