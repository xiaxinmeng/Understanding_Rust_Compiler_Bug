{"sha": "a87e9145a67634a5ea8a893ab8b52b3c07108a13", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4N2U5MTQ1YTY3NjM0YTVlYThhODkzYWI4YjUyYjNjMDcxMDhhMTM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-22T08:36:14Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-22T08:36:14Z"}, "message": "Rename Atts trait", "tree": {"sha": "60339d4a73be3b0bdca0130239a764c580283501", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60339d4a73be3b0bdca0130239a764c580283501"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a87e9145a67634a5ea8a893ab8b52b3c07108a13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a87e9145a67634a5ea8a893ab8b52b3c07108a13", "html_url": "https://github.com/rust-lang/rust/commit/a87e9145a67634a5ea8a893ab8b52b3c07108a13", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a87e9145a67634a5ea8a893ab8b52b3c07108a13/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e42f9627664cc3c44094e1c4f985270fbfd592b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/e42f9627664cc3c44094e1c4f985270fbfd592b1", "html_url": "https://github.com/rust-lang/rust/commit/e42f9627664cc3c44094e1c4f985270fbfd592b1"}], "stats": {"total": 27, "additions": 12, "deletions": 15}, "files": [{"sha": "96da8c88c44048feaa44139d162d1d2eda6b22aa", "filename": "crates/ra_hir/src/code_model/attrs.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a87e9145a67634a5ea8a893ab8b52b3c07108a13/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a87e9145a67634a5ea8a893ab8b52b3c07108a13/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fattrs.rs?ref=a87e9145a67634a5ea8a893ab8b52b3c07108a13", "patch": "@@ -5,7 +5,7 @@ use crate::{\n     Adt, Const, Enum, EnumVariant, FieldSource, Function, HasSource, MacroDef, Module, Static,\n     Struct, StructField, Trait, TypeAlias, Union,\n };\n-use hir_def::attr::Attr;\n+use hir_def::attr::{Attr, Attrs};\n use hir_expand::hygiene::Hygiene;\n use ra_syntax::ast;\n \n@@ -36,19 +36,16 @@ impl_froms!(\n     MacroDef\n );\n \n-pub trait Attrs {\n-    fn attrs(&self, db: &impl HirDatabase) -> hir_def::attr::Attrs;\n+pub trait HasAttrs {\n+    fn attrs(&self, db: &impl HirDatabase) -> Attrs;\n }\n \n-pub(crate) fn attributes_query(\n-    db: &(impl DefDatabase + AstDatabase),\n-    def: AttrDef,\n-) -> hir_def::attr::Attrs {\n+pub(crate) fn attributes_query(db: &(impl DefDatabase + AstDatabase), def: AttrDef) -> Attrs {\n     match def {\n         AttrDef::Module(it) => {\n             let src = match it.declaration_source(db) {\n                 Some(it) => it,\n-                None => return hir_def::attr::Attrs::default(),\n+                None => return Attrs::default(),\n             };\n             let hygiene = Hygiene::new(db, src.file_id);\n             Attr::from_attrs_owner(&src.value, &hygiene)\n@@ -59,7 +56,7 @@ pub(crate) fn attributes_query(\n                 let hygiene = Hygiene::new(db, src.file_id);\n                 Attr::from_attrs_owner(&named, &hygiene)\n             }\n-            FieldSource::Pos(..) => hir_def::attr::Attrs::default(),\n+            FieldSource::Pos(..) => Attrs::default(),\n         },\n         AttrDef::Adt(it) => match it {\n             Adt::Struct(it) => attrs_from_ast(it, db),\n@@ -76,7 +73,7 @@ pub(crate) fn attributes_query(\n     }\n }\n \n-fn attrs_from_ast<T, D>(node: T, db: &D) -> hir_def::attr::Attrs\n+fn attrs_from_ast<T, D>(node: T, db: &D) -> Attrs\n where\n     T: HasSource,\n     T::Ast: ast::AttrsOwner,\n@@ -87,8 +84,8 @@ where\n     Attr::from_attrs_owner(&src.value, &hygiene)\n }\n \n-impl<T: Into<AttrDef> + Copy> Attrs for T {\n-    fn attrs(&self, db: &impl HirDatabase) -> hir_def::attr::Attrs {\n+impl<T: Into<AttrDef> + Copy> HasAttrs for T {\n+    fn attrs(&self, db: &impl HirDatabase) -> Attrs {\n         db.attrs((*self).into())\n     }\n }"}, {"sha": "915ca46fb77088032610ebc04ccd4a867d81c694", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a87e9145a67634a5ea8a893ab8b52b3c07108a13/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a87e9145a67634a5ea8a893ab8b52b3c07108a13/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=a87e9145a67634a5ea8a893ab8b52b3c07108a13", "patch": "@@ -52,7 +52,7 @@ mod marks;\n \n pub use crate::{\n     code_model::{\n-        attrs::{AttrDef, Attrs},\n+        attrs::{AttrDef, HasAttrs},\n         docs::{DocDef, Docs, Documentation},\n         src::{HasBodySource, HasSource},\n         Adt, AssocItem, Const, ConstData, Container, Crate, CrateDependency, DefWithBody, Enum,"}, {"sha": "bd464d193eeb0e62d4e23e578f542d63b9503673", "filename": "crates/ra_ide_api/src/completion/presentation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a87e9145a67634a5ea8a893ab8b52b3c07108a13/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a87e9145a67634a5ea8a893ab8b52b3c07108a13/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=a87e9145a67634a5ea8a893ab8b52b3c07108a13", "patch": "@@ -1,6 +1,6 @@\n //! This modules takes care of rendering various definitions as completion items.\n \n-use hir::{db::HirDatabase, Attrs, Docs, HasSource, HirDisplay, ScopeDef, Ty, TypeWalk};\n+use hir::{db::HirDatabase, Docs, HasAttrs, HasSource, HirDisplay, ScopeDef, Ty, TypeWalk};\n use join_to_string::join;\n use ra_syntax::ast::NameOwner;\n use test_utils::tested_by;\n@@ -285,7 +285,7 @@ impl Completions {\n     }\n }\n \n-fn is_deprecated(node: impl Attrs, db: &impl HirDatabase) -> bool {\n+fn is_deprecated(node: impl HasAttrs, db: &impl HirDatabase) -> bool {\n     node.attrs(db).has_atom(\"deprecated\")\n }\n "}]}