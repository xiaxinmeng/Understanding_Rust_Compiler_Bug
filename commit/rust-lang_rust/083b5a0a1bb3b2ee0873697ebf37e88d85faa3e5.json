{"sha": "083b5a0a1bb3b2ee0873697ebf37e88d85faa3e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4M2I1YTBhMWJiM2IyZWUwODczNjk3ZWJmMzdlODhkODVmYWEzZTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-22T13:54:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-22T13:54:41Z"}, "message": "Auto merge of #66460 - cjgillot:hashstable_generic, r=Zoxc\n\nAdd a proc-macro to derive HashStable in librustc dependencies\n\nA second proc-macro is added to derive HashStable for crates librustc depends on.\nThis proc-macro HashStable_Generic (to bikeshed) allows to decouple code and some librustc's boilerplate.\n\nNot everything is migrated, because `Span` and `TokenKind` require to be placed inside librustc.\nTypes using them stay there too.\n\nSplit out of #66279\nr? @Zoxc", "tree": {"sha": "a9ec5f23575deb5436cb8dd0fef4675cbc80ba75", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9ec5f23575deb5436cb8dd0fef4675cbc80ba75"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/083b5a0a1bb3b2ee0873697ebf37e88d85faa3e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/083b5a0a1bb3b2ee0873697ebf37e88d85faa3e5", "html_url": "https://github.com/rust-lang/rust/commit/083b5a0a1bb3b2ee0873697ebf37e88d85faa3e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/083b5a0a1bb3b2ee0873697ebf37e88d85faa3e5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eaac45a9a9e6d457a03ed354dacde990fe8c14ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/eaac45a9a9e6d457a03ed354dacde990fe8c14ac", "html_url": "https://github.com/rust-lang/rust/commit/eaac45a9a9e6d457a03ed354dacde990fe8c14ac"}, {"sha": "44a595f52ca0dec2cf7a08ba182ce9f1eb637795", "url": "https://api.github.com/repos/rust-lang/rust/commits/44a595f52ca0dec2cf7a08ba182ce9f1eb637795", "html_url": "https://github.com/rust-lang/rust/commit/44a595f52ca0dec2cf7a08ba182ce9f1eb637795"}], "stats": {"total": 588, "additions": 164, "deletions": 424}, "files": [{"sha": "40a6f67220d63b044bac1c8f9a34ad36bce9d8ba", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/083b5a0a1bb3b2ee0873697ebf37e88d85faa3e5/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/083b5a0a1bb3b2ee0873697ebf37e88d85faa3e5/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=083b5a0a1bb3b2ee0873697ebf37e88d85faa3e5", "patch": "@@ -3838,6 +3838,7 @@ dependencies = [\n  \"log\",\n  \"rustc_data_structures\",\n  \"rustc_index\",\n+ \"rustc_macros\",\n  \"serialize\",\n  \"syntax_pos\",\n ]\n@@ -4405,6 +4406,7 @@ dependencies = [\n  \"rustc_errors\",\n  \"rustc_index\",\n  \"rustc_lexer\",\n+ \"rustc_macros\",\n  \"scoped-tls\",\n  \"serialize\",\n  \"smallvec 1.0.0\","}, {"sha": "39d1f850f45efa26f23934341ba36a02fa86c0cd", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/083b5a0a1bb3b2ee0873697ebf37e88d85faa3e5/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/083b5a0a1bb3b2ee0873697ebf37e88d85faa3e5/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=083b5a0a1bb3b2ee0873697ebf37e88d85faa3e5", "patch": "@@ -213,11 +213,6 @@ impl<'a> HashStable<StableHashingContext<'a>> for hir::ImplItem {\n     }\n }\n \n-impl_stable_hash_for!(enum ast::CrateSugar {\n-    JustCrate,\n-    PubCrate,\n-});\n-\n impl<'a> HashStable<StableHashingContext<'a>> for hir::VisibilityKind {\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n         mem::discriminant(self).hash_stable(hcx, hasher);"}, {"sha": "417305139e472ee58a4e30c9c1d29a6a2e8b6a53", "filename": "src/librustc/ich/impls_misc.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/eaac45a9a9e6d457a03ed354dacde990fe8c14ac/src%2Flibrustc%2Fich%2Fimpls_misc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaac45a9a9e6d457a03ed354dacde990fe8c14ac/src%2Flibrustc%2Fich%2Fimpls_misc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_misc.rs?ref=eaac45a9a9e6d457a03ed354dacde990fe8c14ac", "patch": "@@ -1,7 +0,0 @@\n-//! This module contains `HashStable` implementations for various data types\n-//! that don't fit into any of the other impls_xxx modules.\n-\n-impl_stable_hash_for!(enum ::rustc_target::spec::PanicStrategy {\n-    Abort,\n-    Unwind\n-});"}, {"sha": "f8bf8f4ab8a2f7b4e7e974e5acca8bc7558d09a5", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 1, "deletions": 209, "changes": 210, "blob_url": "https://github.com/rust-lang/rust/blob/083b5a0a1bb3b2ee0873697ebf37e88d85faa3e5/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/083b5a0a1bb3b2ee0873697ebf37e88d85faa3e5/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=083b5a0a1bb3b2ee0873697ebf37e88d85faa3e5", "patch": "@@ -10,168 +10,22 @@ use syntax::ast;\n use syntax::feature_gate;\n use syntax::token;\n use syntax::tokenstream;\n-use syntax_pos::symbol::SymbolStr;\n use syntax_pos::SourceFile;\n \n use crate::hir::def_id::{DefId, CrateNum, CRATE_DEF_INDEX};\n \n use smallvec::SmallVec;\n-use rustc_data_structures::stable_hasher::{HashStable, ToStableHashKey, StableHasher};\n-\n-impl<'a> HashStable<StableHashingContext<'a>> for SymbolStr {\n-    #[inline]\n-    fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n-        let str = self as &str;\n-        str.hash_stable(hcx, hasher)\n-    }\n-}\n-\n-impl<'a> ToStableHashKey<StableHashingContext<'a>> for SymbolStr {\n-    type KeyType = SymbolStr;\n-\n-    #[inline]\n-    fn to_stable_hash_key(&self,\n-                          _: &StableHashingContext<'a>)\n-                          -> SymbolStr {\n-        self.clone()\n-    }\n-}\n-\n-impl<'a> HashStable<StableHashingContext<'a>> for ast::Name {\n-    #[inline]\n-    fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n-        self.as_str().hash_stable(hcx, hasher);\n-    }\n-}\n-\n-impl<'a> ToStableHashKey<StableHashingContext<'a>> for ast::Name {\n-    type KeyType = SymbolStr;\n-\n-    #[inline]\n-    fn to_stable_hash_key(&self,\n-                          _: &StableHashingContext<'a>)\n-                          -> SymbolStr {\n-        self.as_str()\n-    }\n-}\n-\n-impl_stable_hash_for!(enum ::syntax::ast::AsmDialect {\n-    Att,\n-    Intel\n-});\n-\n-impl_stable_hash_for!(enum ::syntax_pos::hygiene::MacroKind {\n-    Bang,\n-    Attr,\n-    Derive,\n-});\n-\n-\n-impl_stable_hash_for!(enum ::rustc_target::spec::abi::Abi {\n-    Cdecl,\n-    Stdcall,\n-    Fastcall,\n-    Vectorcall,\n-    Thiscall,\n-    Aapcs,\n-    Win64,\n-    SysV64,\n-    PtxKernel,\n-    Msp430Interrupt,\n-    X86Interrupt,\n-    AmdGpuKernel,\n-    EfiApi,\n-    Rust,\n-    C,\n-    System,\n-    RustIntrinsic,\n-    RustCall,\n-    PlatformIntrinsic,\n-    Unadjusted\n-});\n-\n-impl_stable_hash_for!(struct ::syntax::attr::Deprecation { since, note });\n-impl_stable_hash_for!(struct ::syntax::attr::Stability {\n-    level,\n-    feature,\n-    rustc_depr,\n-    promotable,\n-    allow_const_fn_ptr,\n-    const_stability\n-});\n-\n-impl_stable_hash_for!(enum ::syntax::edition::Edition {\n-    Edition2015,\n-    Edition2018,\n-});\n-\n-impl<'a> HashStable<StableHashingContext<'a>>\n-for ::syntax::attr::StabilityLevel {\n-    fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n-        mem::discriminant(self).hash_stable(hcx, hasher);\n-        match *self {\n-            ::syntax::attr::StabilityLevel::Unstable { ref reason, ref issue, ref is_soft } => {\n-                reason.hash_stable(hcx, hasher);\n-                issue.hash_stable(hcx, hasher);\n-                is_soft.hash_stable(hcx, hasher);\n-            }\n-            ::syntax::attr::StabilityLevel::Stable { ref since } => {\n-                since.hash_stable(hcx, hasher);\n-            }\n-        }\n-    }\n-}\n-\n-impl_stable_hash_for!(struct ::syntax::attr::RustcDeprecation { since, reason, suggestion });\n-\n-impl_stable_hash_for!(enum ::syntax::attr::IntType {\n-    SignedInt(int_ty),\n-    UnsignedInt(uint_ty)\n-});\n-\n-impl_stable_hash_for!(enum ::syntax::ast::LitIntType {\n-    Signed(int_ty),\n-    Unsigned(int_ty),\n-    Unsuffixed\n-});\n-\n-impl_stable_hash_for!(enum ::syntax::ast::LitFloatType {\n-    Suffixed(float_ty),\n-    Unsuffixed\n-});\n+use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n \n impl_stable_hash_for!(struct ::syntax::ast::Lit {\n     kind,\n     token,\n     span\n });\n \n-impl_stable_hash_for!(enum ::syntax::ast::LitKind {\n-    Str(value, style),\n-    ByteStr(value),\n-    Byte(value),\n-    Char(value),\n-    Int(value, lit_int_type),\n-    Float(value, lit_float_type),\n-    Bool(value),\n-    Err(value)\n-});\n-\n impl_stable_hash_for_spanned!(::syntax::ast::LitKind);\n \n-impl_stable_hash_for!(enum ::syntax::ast::IntTy { Isize, I8, I16, I32, I64, I128 });\n-impl_stable_hash_for!(enum ::syntax::ast::UintTy { Usize, U8, U16, U32, U64, U128 });\n-impl_stable_hash_for!(enum ::syntax::ast::FloatTy { F32, F64 });\n-impl_stable_hash_for!(enum ::syntax::ast::Unsafety { Unsafe, Normal });\n-impl_stable_hash_for!(enum ::syntax::ast::Constness { Const, NotConst });\n-impl_stable_hash_for!(enum ::syntax::ast::Defaultness { Default, Final });\n impl_stable_hash_for!(struct ::syntax::ast::Lifetime { id, ident });\n-impl_stable_hash_for!(enum ::syntax::ast::StrStyle { Cooked, Raw(pounds) });\n-impl_stable_hash_for!(enum ::syntax::ast::AttrStyle { Outer, Inner });\n-impl_stable_hash_for!(enum ::syntax::ast::Movability { Static, Movable });\n-impl_stable_hash_for!(enum ::syntax::ast::CaptureBy { Value, Ref });\n-impl_stable_hash_for!(enum ::syntax::ast::IsAuto { Yes, No });\n-impl_stable_hash_for!(enum ::syntax::ast::ImplPolarity { Positive, Negative });\n \n impl<'a> HashStable<StableHashingContext<'a>> for [ast::Attribute] {\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n@@ -255,25 +109,6 @@ for tokenstream::TokenStream {\n     }\n }\n \n-impl_stable_hash_for!(enum token::LitKind {\n-    Bool,\n-    Byte,\n-    Char,\n-    Integer,\n-    Float,\n-    Str,\n-    ByteStr,\n-    StrRaw(n),\n-    ByteStrRaw(n),\n-    Err\n-});\n-\n-impl_stable_hash_for!(struct token::Lit {\n-    kind,\n-    symbol,\n-    suffix\n-});\n-\n impl<'a> HashStable<StableHashingContext<'a>> for token::TokenKind {\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n         mem::discriminant(self).hash_stable(hcx, hasher);\n@@ -359,12 +194,6 @@ impl_stable_hash_for!(enum ::syntax::ast::MetaItemKind {\n     NameValue(lit)\n });\n \n-impl_stable_hash_for!(enum ::syntax_pos::hygiene::Transparency {\n-    Transparent,\n-    SemiTransparent,\n-    Opaque,\n-});\n-\n impl_stable_hash_for!(struct ::syntax_pos::hygiene::ExpnData {\n     kind,\n     parent -> _,\n@@ -376,43 +205,6 @@ impl_stable_hash_for!(struct ::syntax_pos::hygiene::ExpnData {\n     edition\n });\n \n-impl_stable_hash_for!(enum ::syntax_pos::hygiene::ExpnKind {\n-    Root,\n-    Macro(kind, descr),\n-    AstPass(kind),\n-    Desugaring(kind)\n-});\n-\n-impl_stable_hash_for!(enum ::syntax_pos::hygiene::AstPass {\n-    StdImports,\n-    TestHarness,\n-    ProcMacroHarness,\n-    PluginMacroDefs,\n-});\n-\n-impl_stable_hash_for!(enum ::syntax_pos::hygiene::DesugaringKind {\n-    CondTemporary,\n-    Async,\n-    Await,\n-    QuestionMark,\n-    OpaqueTy,\n-    ForLoop,\n-    TryBlock\n-});\n-\n-impl_stable_hash_for!(enum ::syntax_pos::FileName {\n-    Real(pb),\n-    Macros(s),\n-    QuoteExpansion(s),\n-    Anon(s),\n-    MacroExpansion(s),\n-    ProcMacroSourceCode(s),\n-    CliCrateAttr(s),\n-    CfgSpec(s),\n-    Custom(s),\n-    DocTest(pb, line),\n-});\n-\n impl<'a> HashStable<StableHashingContext<'a>> for SourceFile {\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n         let SourceFile {"}, {"sha": "7f50d859cde3a544ca2d56255db2cf42ea0890df", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/083b5a0a1bb3b2ee0873697ebf37e88d85faa3e5/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/083b5a0a1bb3b2ee0873697ebf37e88d85faa3e5/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=083b5a0a1bb3b2ee0873697ebf37e88d85faa3e5", "patch": "@@ -159,11 +159,6 @@ where\n     }\n }\n \n-impl_stable_hash_for!(enum ::syntax::ast::Mutability {\n-    Immutable,\n-    Mutable\n-});\n-\n impl<'a> ToStableHashKey<StableHashingContext<'a>> for region::Scope {\n     type KeyType = region::Scope;\n "}, {"sha": "9e985ffb14ca77d1edff44453d2da8c212ce72cd", "filename": "src/librustc/ich/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/083b5a0a1bb3b2ee0873697ebf37e88d85faa3e5/src%2Flibrustc%2Fich%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/083b5a0a1bb3b2ee0873697ebf37e88d85faa3e5/src%2Flibrustc%2Fich%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fmod.rs?ref=083b5a0a1bb3b2ee0873697ebf37e88d85faa3e5", "patch": "@@ -10,7 +10,6 @@ mod caching_source_map_view;\n mod hcx;\n \n mod impls_hir;\n-mod impls_misc;\n mod impls_ty;\n mod impls_syntax;\n "}, {"sha": "b6050a5caf13e996e20f0fe248e205eea91473c1", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 0, "deletions": 152, "changes": 152, "blob_url": "https://github.com/rust-lang/rust/blob/083b5a0a1bb3b2ee0873697ebf37e88d85faa3e5/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/083b5a0a1bb3b2ee0873697ebf37e88d85faa3e5/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=083b5a0a1bb3b2ee0873697ebf37e88d85faa3e5", "patch": "@@ -2327,158 +2327,6 @@ where\n     }\n }\n \n-impl<'a> HashStable<StableHashingContext<'a>> for Variants {\n-    fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n-        use crate::ty::layout::Variants::*;\n-        mem::discriminant(self).hash_stable(hcx, hasher);\n-\n-        match *self {\n-            Single { index } => {\n-                index.hash_stable(hcx, hasher);\n-            }\n-            Multiple {\n-                ref discr,\n-                ref discr_kind,\n-                discr_index,\n-                ref variants,\n-            } => {\n-                discr.hash_stable(hcx, hasher);\n-                discr_kind.hash_stable(hcx, hasher);\n-                discr_index.hash_stable(hcx, hasher);\n-                variants.hash_stable(hcx, hasher);\n-            }\n-        }\n-    }\n-}\n-\n-impl<'a> HashStable<StableHashingContext<'a>> for DiscriminantKind {\n-    fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n-        use crate::ty::layout::DiscriminantKind::*;\n-        mem::discriminant(self).hash_stable(hcx, hasher);\n-\n-        match *self {\n-            Tag => {}\n-            Niche {\n-                dataful_variant,\n-                ref niche_variants,\n-                niche_start,\n-            } => {\n-                dataful_variant.hash_stable(hcx, hasher);\n-                niche_variants.start().hash_stable(hcx, hasher);\n-                niche_variants.end().hash_stable(hcx, hasher);\n-                niche_start.hash_stable(hcx, hasher);\n-            }\n-        }\n-    }\n-}\n-\n-impl<'a> HashStable<StableHashingContext<'a>> for FieldPlacement {\n-    fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n-        use crate::ty::layout::FieldPlacement::*;\n-        mem::discriminant(self).hash_stable(hcx, hasher);\n-\n-        match *self {\n-            Union(count) => {\n-                count.hash_stable(hcx, hasher);\n-            }\n-            Array { count, stride } => {\n-                count.hash_stable(hcx, hasher);\n-                stride.hash_stable(hcx, hasher);\n-            }\n-            Arbitrary { ref offsets, ref memory_index } => {\n-                offsets.hash_stable(hcx, hasher);\n-                memory_index.hash_stable(hcx, hasher);\n-            }\n-        }\n-    }\n-}\n-\n-impl<'a> HashStable<StableHashingContext<'a>> for VariantIdx {\n-    fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n-        self.as_u32().hash_stable(hcx, hasher)\n-    }\n-}\n-\n-impl<'a> HashStable<StableHashingContext<'a>> for Abi {\n-    fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n-        use crate::ty::layout::Abi::*;\n-        mem::discriminant(self).hash_stable(hcx, hasher);\n-\n-        match *self {\n-            Uninhabited => {}\n-            Scalar(ref value) => {\n-                value.hash_stable(hcx, hasher);\n-            }\n-            ScalarPair(ref a, ref b) => {\n-                a.hash_stable(hcx, hasher);\n-                b.hash_stable(hcx, hasher);\n-            }\n-            Vector { ref element, count } => {\n-                element.hash_stable(hcx, hasher);\n-                count.hash_stable(hcx, hasher);\n-            }\n-            Aggregate { sized } => {\n-                sized.hash_stable(hcx, hasher);\n-            }\n-        }\n-    }\n-}\n-\n-impl<'a> HashStable<StableHashingContext<'a>> for Scalar {\n-    fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n-        let Scalar { value, ref valid_range } = *self;\n-        value.hash_stable(hcx, hasher);\n-        valid_range.start().hash_stable(hcx, hasher);\n-        valid_range.end().hash_stable(hcx, hasher);\n-    }\n-}\n-\n-impl_stable_hash_for!(struct crate::ty::layout::Niche {\n-    offset,\n-    scalar\n-});\n-\n-impl_stable_hash_for!(struct crate::ty::layout::LayoutDetails {\n-    variants,\n-    fields,\n-    abi,\n-    largest_niche,\n-    size,\n-    align\n-});\n-\n-impl_stable_hash_for!(enum crate::ty::layout::Integer {\n-    I8,\n-    I16,\n-    I32,\n-    I64,\n-    I128\n-});\n-\n-impl_stable_hash_for!(enum crate::ty::layout::Primitive {\n-    Int(integer, signed),\n-    F32,\n-    F64,\n-    Pointer\n-});\n-\n-impl_stable_hash_for!(struct crate::ty::layout::AbiAndPrefAlign {\n-    abi,\n-    pref\n-});\n-\n-impl<'tcx> HashStable<StableHashingContext<'tcx>> for Align {\n-    fn hash_stable(&self, hcx: &mut StableHashingContext<'tcx>, hasher: &mut StableHasher) {\n-        self.bytes().hash_stable(hcx, hasher);\n-    }\n-}\n-\n-impl<'tcx> HashStable<StableHashingContext<'tcx>> for Size {\n-    fn hash_stable(&self, hcx: &mut StableHashingContext<'tcx>, hasher: &mut StableHasher) {\n-        self.bytes().hash_stable(hcx, hasher);\n-    }\n-}\n-\n impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for LayoutError<'tcx> {\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n         use crate::ty::layout::LayoutError::*;"}, {"sha": "ce62021ac17116eb46d000f406fd3346ca0a16d1", "filename": "src/librustc_data_structures/stable_hasher.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/083b5a0a1bb3b2ee0873697ebf37e88d85faa3e5/src%2Flibrustc_data_structures%2Fstable_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/083b5a0a1bb3b2ee0873697ebf37e88d85faa3e5/src%2Flibrustc_data_structures%2Fstable_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fstable_hasher.rs?ref=083b5a0a1bb3b2ee0873697ebf37e88d85faa3e5", "patch": "@@ -429,6 +429,16 @@ impl<T, CTX> HashStable<CTX> for ::std::mem::Discriminant<T> {\n     }\n }\n \n+impl<T, CTX> HashStable<CTX> for ::std::ops::RangeInclusive<T>\n+    where T: HashStable<CTX>\n+{\n+    #[inline]\n+    fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {\n+        self.start().hash_stable(ctx, hasher);\n+        self.end().hash_stable(ctx, hasher);\n+    }\n+}\n+\n impl<I: vec::Idx, T, CTX> HashStable<CTX> for vec::IndexVec<I, T>\n     where T: HashStable<CTX>,\n {"}, {"sha": "3fb252cbf8d9c867939130d585f14a1ee3e3868d", "filename": "src/librustc_macros/src/hash_stable.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/083b5a0a1bb3b2ee0873697ebf37e88d85faa3e5/src%2Flibrustc_macros%2Fsrc%2Fhash_stable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/083b5a0a1bb3b2ee0873697ebf37e88d85faa3e5/src%2Flibrustc_macros%2Fsrc%2Fhash_stable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_macros%2Fsrc%2Fhash_stable.rs?ref=083b5a0a1bb3b2ee0873697ebf37e88d85faa3e5", "patch": "@@ -47,6 +47,44 @@ fn parse_attributes(field: &syn::Field) -> Attributes {\n     attrs\n }\n \n+pub fn hash_stable_generic_derive(mut s: synstructure::Structure<'_>) -> proc_macro2::TokenStream {\n+    let generic: syn::GenericParam = parse_quote!(__CTX);\n+    s.add_bounds(synstructure::AddBounds::Generics);\n+    s.add_impl_generic(generic);\n+    let body = s.each(|bi| {\n+        let attrs = parse_attributes(bi.ast());\n+        if attrs.ignore {\n+             quote!{}\n+        } else if let Some(project) = attrs.project {\n+            quote!{\n+                &#bi.#project.hash_stable(__hcx, __hasher);\n+            }\n+        } else {\n+            quote!{\n+                #bi.hash_stable(__hcx, __hasher);\n+            }\n+        }\n+    });\n+\n+    let discriminant = match s.ast().data {\n+        syn::Data::Enum(_) => quote! {\n+            ::std::mem::discriminant(self).hash_stable(__hcx, __hasher);\n+        },\n+        syn::Data::Struct(_) => quote! {},\n+        syn::Data::Union(_) => panic!(\"cannot derive on union\"),\n+    };\n+\n+    s.bound_impl(quote!(::rustc_data_structures::stable_hasher::HashStable<__CTX>), quote!{\n+        fn hash_stable(\n+            &self,\n+            __hcx: &mut __CTX,\n+            __hasher: &mut ::rustc_data_structures::stable_hasher::StableHasher) {\n+            #discriminant\n+            match *self { #body }\n+        }\n+    })\n+}\n+\n pub fn hash_stable_derive(mut s: synstructure::Structure<'_>) -> proc_macro2::TokenStream {\n     let generic: syn::GenericParam = parse_quote!('__ctx);\n     s.add_bounds(synstructure::AddBounds::Generics);"}, {"sha": "eee634ffebd928185c084202a969c13ce4d2b667", "filename": "src/librustc_macros/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/083b5a0a1bb3b2ee0873697ebf37e88d85faa3e5/src%2Flibrustc_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/083b5a0a1bb3b2ee0873697ebf37e88d85faa3e5/src%2Flibrustc_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_macros%2Fsrc%2Flib.rs?ref=083b5a0a1bb3b2ee0873697ebf37e88d85faa3e5", "patch": "@@ -25,5 +25,10 @@ pub fn symbols(input: TokenStream) -> TokenStream {\n }\n \n decl_derive!([HashStable, attributes(stable_hasher)] => hash_stable::hash_stable_derive);\n+decl_derive!(\n+    [HashStable_Generic, attributes(stable_hasher)] =>\n+    hash_stable::hash_stable_generic_derive\n+);\n+\n decl_derive!([TypeFoldable, attributes(type_foldable)] => type_foldable::type_foldable_derive);\n decl_derive!([Lift, attributes(lift)] => lift::lift_derive);"}, {"sha": "0e0732490fbbdc1ce201c3cb438b8e1437f0eaad", "filename": "src/librustc_target/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/083b5a0a1bb3b2ee0873697ebf37e88d85faa3e5/src%2Flibrustc_target%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/083b5a0a1bb3b2ee0873697ebf37e88d85faa3e5/src%2Flibrustc_target%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2FCargo.toml?ref=083b5a0a1bb3b2ee0873697ebf37e88d85faa3e5", "patch": "@@ -12,6 +12,7 @@ path = \"lib.rs\"\n bitflags = \"1.2.1\"\n log = \"0.4\"\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n+rustc_macros = { path = \"../librustc_macros\" }\n rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n rustc_index = { path = \"../librustc_index\" }"}, {"sha": "ac781819cc35e7e652a28dda3bc60f7ffb0a2515", "filename": "src/librustc_target/abi/mod.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/083b5a0a1bb3b2ee0873697ebf37e88d85faa3e5/src%2Flibrustc_target%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/083b5a0a1bb3b2ee0873697ebf37e88d85faa3e5/src%2Flibrustc_target%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fmod.rs?ref=083b5a0a1bb3b2ee0873697ebf37e88d85faa3e5", "patch": "@@ -6,6 +6,7 @@ use crate::spec::Target;\n use std::ops::{Add, Deref, Sub, Mul, AddAssign, Range, RangeInclusive};\n \n use rustc_index::vec::{Idx, IndexVec};\n+use rustc_macros::HashStable_Generic;\n use syntax_pos::Span;\n \n pub mod call;\n@@ -242,6 +243,7 @@ pub enum Endian {\n \n /// Size of a type in bytes.\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, RustcEncodable, RustcDecodable)]\n+#[derive(HashStable_Generic)]\n pub struct Size {\n     raw: u64\n }\n@@ -365,6 +367,7 @@ impl AddAssign for Size {\n \n /// Alignment of a type in bytes (always a power of two).\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, RustcEncodable, RustcDecodable)]\n+#[derive(HashStable_Generic)]\n pub struct Align {\n     pow2: u8,\n }\n@@ -423,6 +426,7 @@ impl Align {\n \n /// A pair of aligments, ABI-mandated and preferred.\n #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, RustcEncodable, RustcDecodable)]\n+#[derive(HashStable_Generic)]\n pub struct AbiAndPrefAlign {\n     pub abi: Align,\n     pub pref: Align,\n@@ -452,7 +456,7 @@ impl AbiAndPrefAlign {\n }\n \n /// Integers, also used for enum discriminants.\n-#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, HashStable_Generic)]\n pub enum Integer {\n     I8,\n     I16,\n@@ -533,7 +537,7 @@ impl Integer {\n }\n \n /// Fundamental unit of memory access and layout.\n-#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, HashStable_Generic)]\n pub enum Primitive {\n     /// The `bool` is the signedness of the `Integer` type.\n     ///\n@@ -588,6 +592,7 @@ impl Primitive {\n \n /// Information about one scalar component of a Rust type.\n #[derive(Clone, PartialEq, Eq, Hash, Debug)]\n+#[derive(HashStable_Generic)]\n pub struct Scalar {\n     pub value: Primitive,\n \n@@ -636,7 +641,7 @@ impl Scalar {\n }\n \n /// Describes how the fields of a type are located in memory.\n-#[derive(PartialEq, Eq, Hash, Debug)]\n+#[derive(PartialEq, Eq, Hash, Debug, HashStable_Generic)]\n pub enum FieldPlacement {\n     /// All fields start at no offset. The `usize` is the field count.\n     ///\n@@ -752,7 +757,7 @@ impl FieldPlacement {\n \n /// Describes how values of the type are passed by target ABIs,\n /// in terms of categories of C types there are ABI rules for.\n-#[derive(Clone, PartialEq, Eq, Hash, Debug)]\n+#[derive(Clone, PartialEq, Eq, Hash, Debug, HashStable_Generic)]\n pub enum Abi {\n     Uninhabited,\n     Scalar(Scalar),\n@@ -800,10 +805,12 @@ impl Abi {\n }\n \n rustc_index::newtype_index! {\n-    pub struct VariantIdx { .. }\n+    pub struct VariantIdx {\n+        derive [HashStable_Generic]\n+    }\n }\n \n-#[derive(PartialEq, Eq, Hash, Debug)]\n+#[derive(PartialEq, Eq, Hash, Debug, HashStable_Generic)]\n pub enum Variants {\n     /// Single enum variants, structs/tuples, unions, and all non-ADTs.\n     Single {\n@@ -821,7 +828,7 @@ pub enum Variants {\n     },\n }\n \n-#[derive(PartialEq, Eq, Hash, Debug)]\n+#[derive(PartialEq, Eq, Hash, Debug, HashStable_Generic)]\n pub enum DiscriminantKind {\n     /// Integer tag holding the discriminant value itself.\n     Tag,\n@@ -842,7 +849,7 @@ pub enum DiscriminantKind {\n     },\n }\n \n-#[derive(Clone, PartialEq, Eq, Hash, Debug)]\n+#[derive(Clone, PartialEq, Eq, Hash, Debug, HashStable_Generic)]\n pub struct Niche {\n     pub offset: Size,\n     pub scalar: Scalar,\n@@ -906,7 +913,7 @@ impl Niche {\n     }\n }\n \n-#[derive(PartialEq, Eq, Hash, Debug)]\n+#[derive(PartialEq, Eq, Hash, Debug, HashStable_Generic)]\n pub struct LayoutDetails {\n     pub variants: Variants,\n     pub fields: FieldPlacement,"}, {"sha": "736358a995b640ea1f82efc040e4007d0b9d4821", "filename": "src/librustc_target/spec/abi.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/083b5a0a1bb3b2ee0873697ebf37e88d85faa3e5/src%2Flibrustc_target%2Fspec%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/083b5a0a1bb3b2ee0873697ebf37e88d85faa3e5/src%2Flibrustc_target%2Fspec%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fabi.rs?ref=083b5a0a1bb3b2ee0873697ebf37e88d85faa3e5", "patch": "@@ -1,9 +1,12 @@\n use std::fmt;\n \n+use rustc_macros::HashStable_Generic;\n+\n #[cfg(test)]\n mod tests;\n \n-#[derive(PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable, Clone, Copy, Debug)]\n+#[derive(PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable,\n+         Clone, Copy, Debug, HashStable_Generic)]\n pub enum Abi {\n     // N.B., this ordering MUST match the AbiDatas array below.\n     // (This is ensured by the test indices_are_correct().)"}, {"sha": "716aef056a35b6a79e9d18edc0d6a47f0d18f3ca", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/083b5a0a1bb3b2ee0873697ebf37e88d85faa3e5/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/083b5a0a1bb3b2ee0873697ebf37e88d85faa3e5/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=083b5a0a1bb3b2ee0873697ebf37e88d85faa3e5", "patch": "@@ -42,6 +42,8 @@ use std::path::{Path, PathBuf};\n use std::str::FromStr;\n use crate::spec::abi::{Abi, lookup as lookup_abi};\n \n+use rustc_macros::HashStable_Generic;\n+\n pub mod abi;\n mod android_base;\n mod apple_base;\n@@ -153,7 +155,7 @@ flavor_mappings! {\n     ((LinkerFlavor::Lld(LldFlavor::Link)), \"lld-link\"),\n }\n \n-#[derive(Clone, Copy, Debug, PartialEq, Hash, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, Copy, Debug, PartialEq, Hash, RustcEncodable, RustcDecodable, HashStable_Generic)]\n pub enum PanicStrategy {\n     Unwind,\n     Abort,"}, {"sha": "dff23076c82e637a7bd0807425ef3e020ada950e", "filename": "src/libsyntax/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/083b5a0a1bb3b2ee0873697ebf37e88d85faa3e5/src%2Flibsyntax%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/083b5a0a1bb3b2ee0873697ebf37e88d85faa3e5/src%2Flibsyntax%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2FCargo.toml?ref=083b5a0a1bb3b2ee0873697ebf37e88d85faa3e5", "patch": "@@ -20,5 +20,6 @@ errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_index = { path = \"../librustc_index\" }\n rustc_lexer = { path = \"../librustc_lexer\" }\n+rustc_macros = { path = \"../librustc_macros\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n rustc_error_codes = { path = \"../librustc_error_codes\" }"}, {"sha": "a9f03e4af5b656e2f2ee07392703dd148a047a79", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 23, "deletions": 20, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/083b5a0a1bb3b2ee0873697ebf37e88d85faa3e5/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/083b5a0a1bb3b2ee0873697ebf37e88d85faa3e5/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=083b5a0a1bb3b2ee0873697ebf37e88d85faa3e5", "patch": "@@ -37,6 +37,7 @@ use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::thin_vec::ThinVec;\n use rustc_index::vec::Idx;\n use rustc_serialize::{self, Decoder, Encoder};\n+use rustc_macros::HashStable_Generic;\n \n use std::fmt;\n \n@@ -722,9 +723,8 @@ pub enum PatKind {\n     Mac(Mac),\n }\n \n-#[derive(\n-    Clone, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable, Debug, Copy,\n-)]\n+#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash,\n+         RustcEncodable, RustcDecodable, Debug, Copy, HashStable_Generic)]\n pub enum Mutability {\n     Mutable,\n     Immutable,\n@@ -1328,7 +1328,7 @@ pub struct QSelf {\n }\n \n /// A capture clause used in closures and `async` blocks.\n-#[derive(Clone, Copy, PartialEq, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Clone, Copy, PartialEq, RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub enum CaptureBy {\n     /// `move |x| y + x`.\n     Value,\n@@ -1339,7 +1339,7 @@ pub enum CaptureBy {\n /// The movability of a generator / closure literal:\n /// whether a generator contains self-references, causing it to be `!Unpin`.\n #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash,\n-         RustcEncodable, RustcDecodable, Debug, Copy)]\n+         RustcEncodable, RustcDecodable, Debug, Copy, HashStable_Generic)]\n pub enum Movability {\n     /// May contain self-references, `!Unpin`.\n     Static,\n@@ -1400,7 +1400,7 @@ impl MacroDef {\n }\n \n // Clippy uses Hash and PartialEq\n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug, Copy, Hash, PartialEq)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug, Copy, Hash, PartialEq, HashStable_Generic)]\n pub enum StrStyle {\n     /// A regular string, like `\"foo\"`.\n     Cooked,\n@@ -1451,7 +1451,7 @@ impl StrLit {\n \n // Clippy uses Hash and PartialEq\n /// Type of the integer literal based on provided suffix.\n-#[derive(Clone, Copy, RustcEncodable, RustcDecodable, Debug, Hash, PartialEq)]\n+#[derive(Clone, Copy, RustcEncodable, RustcDecodable, Debug, Hash, PartialEq, HashStable_Generic)]\n pub enum LitIntType {\n     /// e.g. `42_i32`.\n     Signed(IntTy),\n@@ -1462,7 +1462,7 @@ pub enum LitIntType {\n }\n \n /// Type of the float literal based on provided suffix.\n-#[derive(Clone, Copy, RustcEncodable, RustcDecodable, Debug, Hash, PartialEq)]\n+#[derive(Clone, Copy, RustcEncodable, RustcDecodable, Debug, Hash, PartialEq, HashStable_Generic)]\n pub enum LitFloatType {\n     /// A float literal with a suffix (`1f32` or `1E10f32`).\n     Suffixed(FloatTy),\n@@ -1474,7 +1474,7 @@ pub enum LitFloatType {\n ///\n /// E.g., `\"foo\"`, `42`, `12.34`, or `bool`.\n // Clippy uses Hash and PartialEq\n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug, Hash, PartialEq)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug, Hash, PartialEq, HashStable_Generic)]\n pub enum LitKind {\n     /// A string literal (`\"foo\"`).\n     Str(Symbol, StrStyle),\n@@ -1609,7 +1609,8 @@ pub enum ImplItemKind {\n     Macro(Mac),\n }\n \n-#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, HashStable_Generic,\n+         RustcEncodable, RustcDecodable, Debug)]\n pub enum FloatTy {\n     F32,\n     F64,\n@@ -1638,7 +1639,8 @@ impl FloatTy {\n     }\n }\n \n-#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, HashStable_Generic,\n+         RustcEncodable, RustcDecodable, Debug)]\n pub enum IntTy {\n     Isize,\n     I8,\n@@ -1690,7 +1692,8 @@ impl IntTy {\n     }\n }\n \n-#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable, Copy, Debug)]\n+#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, HashStable_Generic,\n+         RustcEncodable, RustcDecodable, Copy, Debug)]\n pub enum UintTy {\n     Usize,\n     U8,\n@@ -1863,7 +1866,7 @@ pub enum TraitObjectSyntax {\n /// Inline assembly dialect.\n ///\n /// E.g., `\"intel\"` as in `asm!(\"mov eax, 2\" : \"={eax}\"(result) : : : \"intel\")`.\n-#[derive(Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, Copy)]\n+#[derive(Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, Copy, HashStable_Generic)]\n pub enum AsmDialect {\n     Att,\n     Intel,\n@@ -2021,14 +2024,14 @@ impl FnDecl {\n }\n \n /// Is the trait definition an auto trait?\n-#[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub enum IsAuto {\n     Yes,\n     No,\n }\n \n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash,\n-         RustcEncodable, RustcDecodable, Debug)]\n+         RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub enum Unsafety {\n     Unsafe,\n     Normal,\n@@ -2085,21 +2088,21 @@ impl IsAsync {\n     }\n }\n \n-#[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub enum Constness {\n     Const,\n     NotConst,\n }\n \n /// Item defaultness.\n /// For details see the [RFC #2532](https://github.com/rust-lang/rfcs/pull/2532).\n-#[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub enum Defaultness {\n     Default,\n     Final,\n }\n \n-#[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable)]\n+#[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, HashStable_Generic)]\n pub enum ImplPolarity {\n     /// `impl Trait for Type`\n     Positive,\n@@ -2233,7 +2236,7 @@ impl UseTree {\n /// Distinguishes between `Attribute`s that decorate items and Attributes that\n /// are contained as statements within items. These two cases need to be\n /// distinguished for pretty-printing.\n-#[derive(Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, Copy)]\n+#[derive(Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, Copy, HashStable_Generic)]\n pub enum AttrStyle {\n     Outer,\n     Inner,\n@@ -2331,7 +2334,7 @@ impl PolyTraitRef {\n     }\n }\n \n-#[derive(Copy, Clone, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Copy, Clone, RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub enum CrateSugar {\n     /// Source is `pub(crate)`.\n     PubCrate,"}, {"sha": "c10541c8c7e75d367eaf8055937d46a4c5ec7c68", "filename": "src/libsyntax/attr/builtin.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/083b5a0a1bb3b2ee0873697ebf37e88d85faa3e5/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/083b5a0a1bb3b2ee0873697ebf37e88d85faa3e5/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fbuiltin.rs?ref=083b5a0a1bb3b2ee0873697ebf37e88d85faa3e5", "patch": "@@ -9,6 +9,7 @@ use errors::{Applicability, Handler};\n use std::num::NonZeroU32;\n use syntax_pos::hygiene::Transparency;\n use syntax_pos::{symbol::Symbol, symbol::sym, Span};\n+use rustc_macros::HashStable_Generic;\n \n use super::{mark_used, MetaItemKind};\n \n@@ -141,7 +142,8 @@ pub fn find_unwind_attr(diagnostic: Option<&Handler>, attrs: &[Attribute]) -> Op\n }\n \n /// Represents the #[stable], #[unstable], #[rustc_{deprecated,const_unstable}] attributes.\n-#[derive(RustcEncodable, RustcDecodable, Copy, Clone, Debug, PartialEq, Eq, Hash)]\n+#[derive(RustcEncodable, RustcDecodable, Copy, Clone, Debug,\n+         PartialEq, Eq, Hash, HashStable_Generic)]\n pub struct Stability {\n     pub level: StabilityLevel,\n     pub feature: Symbol,\n@@ -157,7 +159,8 @@ pub struct Stability {\n }\n \n /// The available stability levels.\n-#[derive(RustcEncodable, RustcDecodable, PartialEq, PartialOrd, Copy, Clone, Debug, Eq, Hash)]\n+#[derive(RustcEncodable, RustcDecodable, PartialEq, PartialOrd,\n+         Copy, Clone, Debug, Eq, Hash, HashStable_Generic)]\n pub enum StabilityLevel {\n     // Reason for the current stability level and the relevant rust-lang issue\n     Unstable { reason: Option<Symbol>, issue: Option<NonZeroU32>, is_soft: bool },\n@@ -181,7 +184,8 @@ impl StabilityLevel {\n     }\n }\n \n-#[derive(RustcEncodable, RustcDecodable, PartialEq, PartialOrd, Copy, Clone, Debug, Eq, Hash)]\n+#[derive(RustcEncodable, RustcDecodable, PartialEq, PartialOrd,\n+         Copy, Clone, Debug, Eq, Hash, HashStable_Generic)]\n pub struct RustcDeprecation {\n     pub since: Symbol,\n     pub reason: Symbol,\n@@ -636,7 +640,7 @@ pub fn eval_condition<F>(cfg: &ast::MetaItem, sess: &ParseSess, eval: &mut F)\n     }\n }\n \n-#[derive(RustcEncodable, RustcDecodable, Clone)]\n+#[derive(RustcEncodable, RustcDecodable, Clone, HashStable_Generic)]\n pub struct Deprecation {\n     pub since: Option<Symbol>,\n     pub note: Option<Symbol>,\n@@ -763,7 +767,7 @@ pub enum ReprAttr {\n     ReprAlign(u32),\n }\n \n-#[derive(Eq, PartialEq, Debug, RustcEncodable, RustcDecodable, Copy, Clone)]\n+#[derive(Eq, PartialEq, Debug, RustcEncodable, RustcDecodable, Copy, Clone, HashStable_Generic)]\n pub enum IntType {\n     SignedInt(ast::IntTy),\n     UnsignedInt(ast::UintTy)"}, {"sha": "fd1623384a443e186e7e6083649e02b9fe1f27eb", "filename": "src/libsyntax/token.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/083b5a0a1bb3b2ee0873697ebf37e88d85faa3e5/src%2Flibsyntax%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/083b5a0a1bb3b2ee0873697ebf37e88d85faa3e5/src%2Flibsyntax%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftoken.rs?ref=083b5a0a1bb3b2ee0873697ebf37e88d85faa3e5", "patch": "@@ -15,6 +15,7 @@ use syntax_pos::{self, Span, DUMMY_SP};\n use std::fmt;\n use std::mem;\n use rustc_data_structures::sync::Lrc;\n+use rustc_macros::HashStable_Generic;\n \n #[derive(Clone, PartialEq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n pub enum BinOpToken {\n@@ -53,7 +54,7 @@ impl DelimToken {\n     }\n }\n \n-#[derive(Clone, Copy, PartialEq, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Clone, Copy, PartialEq, RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub enum LitKind {\n     Bool, // AST only, must never appear in a `Token`\n     Byte,\n@@ -68,7 +69,7 @@ pub enum LitKind {\n }\n \n /// A literal token.\n-#[derive(Clone, Copy, PartialEq, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Clone, Copy, PartialEq, RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub struct Lit {\n     pub kind: LitKind,\n     pub symbol: Symbol,"}, {"sha": "727aad546f5f12d4661a730b440916534afd9367", "filename": "src/libsyntax_pos/edition.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/083b5a0a1bb3b2ee0873697ebf37e88d85faa3e5/src%2Flibsyntax_pos%2Fedition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/083b5a0a1bb3b2ee0873697ebf37e88d85faa3e5/src%2Flibsyntax_pos%2Fedition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fedition.rs?ref=083b5a0a1bb3b2ee0873697ebf37e88d85faa3e5", "patch": "@@ -2,8 +2,11 @@ use crate::symbol::{Symbol, sym};\n use std::fmt;\n use std::str::FromStr;\n \n+use rustc_macros::HashStable_Generic;\n+\n /// The edition of the compiler (RFC 2052)\n-#[derive(Clone, Copy, Hash, PartialEq, PartialOrd, Debug, RustcEncodable, RustcDecodable, Eq)]\n+#[derive(Clone, Copy, Hash, PartialEq, PartialOrd, Debug,\n+         RustcEncodable, RustcDecodable, Eq, HashStable_Generic)]\n pub enum Edition {\n     // editions must be kept in order, oldest to newest\n "}, {"sha": "eb420454f03d324cd8385720bc529a9a988d5752", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/083b5a0a1bb3b2ee0873697ebf37e88d85faa3e5/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/083b5a0a1bb3b2ee0873697ebf37e88d85faa3e5/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=083b5a0a1bb3b2ee0873697ebf37e88d85faa3e5", "patch": "@@ -30,6 +30,7 @@ use crate::{Span, DUMMY_SP};\n use crate::edition::Edition;\n use crate::symbol::{kw, sym, Symbol};\n \n+use rustc_macros::HashStable_Generic;\n use rustc_serialize::{Encodable, Decodable, Encoder, Decoder};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::Lrc;\n@@ -58,7 +59,8 @@ pub struct ExpnId(u32);\n \n /// A property of a macro expansion that determines how identifiers\n /// produced by that expansion are resolved.\n-#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Hash, Debug, RustcEncodable, RustcDecodable)]\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Hash, Debug,\n+         RustcEncodable, RustcDecodable, HashStable_Generic)]\n pub enum Transparency {\n     /// Identifier produced by a transparent expansion is always resolved at call-site.\n     /// Call-site spans in procedural macros, hygiene opt-out in `macro` should use this.\n@@ -683,7 +685,7 @@ impl ExpnData {\n }\n \n /// Expansion kind.\n-#[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, Debug, RustcEncodable, RustcDecodable, HashStable_Generic)]\n pub enum ExpnKind {\n     /// No expansion, aka root expansion. Only `ExpnId::root()` has this kind.\n     Root,\n@@ -707,7 +709,8 @@ impl ExpnKind {\n }\n \n /// The kind of macro invocation or definition.\n-#[derive(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable,\n+         Hash, Debug, HashStable_Generic)]\n pub enum MacroKind {\n     /// A bang macro `foo!()`.\n     Bang,\n@@ -742,7 +745,7 @@ impl MacroKind {\n }\n \n /// The kind of AST transform.\n-#[derive(Clone, Copy, PartialEq, Debug, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, Copy, PartialEq, Debug, RustcEncodable, RustcDecodable, HashStable_Generic)]\n pub enum AstPass {\n     StdImports,\n     TestHarness,\n@@ -762,7 +765,7 @@ impl AstPass {\n }\n \n /// The kind of compiler desugaring.\n-#[derive(Clone, Copy, PartialEq, Debug, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, Copy, PartialEq, Debug, RustcEncodable, RustcDecodable, HashStable_Generic)]\n pub enum DesugaringKind {\n     /// We desugar `if c { i } else { e }` to `match $ExprKind::Use(c) { true => i, _ => e }`.\n     /// However, we do not want to blame `c` for unreachability but rather say that `i`"}, {"sha": "720ace90324b9580879f6242da8c9ecb1ca68f5c", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/083b5a0a1bb3b2ee0873697ebf37e88d85faa3e5/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/083b5a0a1bb3b2ee0873697ebf37e88d85faa3e5/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=083b5a0a1bb3b2ee0873697ebf37e88d85faa3e5", "patch": "@@ -15,6 +15,7 @@\n #![feature(step_trait)]\n \n use rustc_serialize::{Encodable, Decodable, Encoder, Decoder};\n+use rustc_macros::HashStable_Generic;\n \n pub mod source_map;\n \n@@ -66,7 +67,8 @@ impl Globals {\n scoped_tls::scoped_thread_local!(pub static GLOBALS: Globals);\n \n /// Differentiates between real files and common virtual files.\n-#[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd, Hash, RustcDecodable, RustcEncodable)]\n+#[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd, Hash,\n+         RustcDecodable, RustcEncodable, HashStable_Generic)]\n pub enum FileName {\n     Real(PathBuf),\n     /// A macro. This includes the full name of the macro, so that there are no clashes."}, {"sha": "23ee972529a70dd30a1e64fbe200f1218a22a3db", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/083b5a0a1bb3b2ee0873697ebf37e88d85faa3e5/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/083b5a0a1bb3b2ee0873697ebf37e88d85faa3e5/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=083b5a0a1bb3b2ee0873697ebf37e88d85faa3e5", "patch": "@@ -8,6 +8,7 @@ use rustc_index::vec::Idx;\n use rustc_macros::symbols;\n use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n use rustc_serialize::{UseSpecializedDecodable, UseSpecializedEncodable};\n+use rustc_data_structures::stable_hasher::{HashStable, ToStableHashKey, StableHasher};\n \n use std::cmp::{PartialEq, PartialOrd, Ord};\n use std::fmt;\n@@ -941,6 +942,22 @@ impl Decodable for Symbol {\n     }\n }\n \n+impl<CTX> HashStable<CTX> for Symbol {\n+    #[inline]\n+    fn hash_stable(&self, hcx: &mut CTX, hasher: &mut StableHasher) {\n+        self.as_str().hash_stable(hcx, hasher);\n+    }\n+}\n+\n+impl<CTX> ToStableHashKey<CTX> for Symbol {\n+    type KeyType = SymbolStr;\n+\n+    #[inline]\n+    fn to_stable_hash_key(&self, _: &CTX) -> SymbolStr {\n+        self.as_str()\n+    }\n+}\n+\n // The `&'static str`s in this type actually point into the arena.\n #[derive(Default)]\n pub struct Interner {\n@@ -1138,3 +1155,19 @@ impl fmt::Display for SymbolStr {\n         fmt::Display::fmt(self.string, f)\n     }\n }\n+\n+impl<CTX> HashStable<CTX> for SymbolStr {\n+    #[inline]\n+    fn hash_stable(&self, hcx: &mut CTX, hasher: &mut StableHasher) {\n+        self.string.hash_stable(hcx, hasher)\n+    }\n+}\n+\n+impl<CTX> ToStableHashKey<CTX> for SymbolStr {\n+    type KeyType = SymbolStr;\n+\n+    #[inline]\n+    fn to_stable_hash_key(&self, _: &CTX) -> SymbolStr {\n+        self.clone()\n+    }\n+}"}]}