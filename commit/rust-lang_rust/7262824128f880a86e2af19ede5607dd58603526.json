{"sha": "7262824128f880a86e2af19ede5607dd58603526", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyNjI4MjQxMjhmODgwYTg2ZTJhZjE5ZWRlNTYwN2RkNTg2MDM1MjY=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-06-26T09:35:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-06-26T09:35:38Z"}, "message": "Rollup merge of #51731 - varkor:closure-array-break-length, r=estebank\n\nFix ICEs when using continue as an array length inside closures (inside loop conditions)\n\nFixes #51707.\nFixes #51708.\n\nr? @estebank", "tree": {"sha": "66dee72eb64d71a55c041f9d24f8131153ed827d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66dee72eb64d71a55c041f9d24f8131153ed827d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7262824128f880a86e2af19ede5607dd58603526", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbMgjqCRBK7hj4Ov3rIwAAdHIIAF9iFk1kg0Mt20ROjOhl402T\n1C8Y3Vrf9foF/0iUm3h67vRZMLLKhemtRS+HNPRoYkV9klrUVl7CCcvo0dzgI5EO\nvGEDAoC/EnfZtTxDGMsP15z2gBXSvNo2JSQ8n+2Sry4D3EDd7cLjUEXmW49c1D+K\nRPluILEtqmJqfZW6CGxTr2MUWTCPbQalg8/KqrKlN3RwO7850nUCYJAn6ESBX251\neBhw0U7liy0dc7yLIbvSRCFKy6kc0+WOC7lHRdCB5DblXrjLCOkUv25DpVhpPmhO\nMuO3/+WrPdEfrH8mKbCOKde9w1QmwTuyZUp1eBINxBy46IwyRF9m152Vj5ndLjI=\n=Fv+C\n-----END PGP SIGNATURE-----\n", "payload": "tree 66dee72eb64d71a55c041f9d24f8131153ed827d\nparent b71f6df5dd74804682a500ca7eb251e34e58b1cb\nparent c3d6ee9e7b652546b892bc2eac56896a8a39415a\nauthor Pietro Albini <pietro@pietroalbini.org> 1530005738 +0200\ncommitter GitHub <noreply@github.com> 1530005738 +0200\n\nRollup merge of #51731 - varkor:closure-array-break-length, r=estebank\n\nFix ICEs when using continue as an array length inside closures (inside loop conditions)\n\nFixes #51707.\nFixes #51708.\n\nr? @estebank\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7262824128f880a86e2af19ede5607dd58603526", "html_url": "https://github.com/rust-lang/rust/commit/7262824128f880a86e2af19ede5607dd58603526", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7262824128f880a86e2af19ede5607dd58603526/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b71f6df5dd74804682a500ca7eb251e34e58b1cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/b71f6df5dd74804682a500ca7eb251e34e58b1cb", "html_url": "https://github.com/rust-lang/rust/commit/b71f6df5dd74804682a500ca7eb251e34e58b1cb"}, {"sha": "c3d6ee9e7b652546b892bc2eac56896a8a39415a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3d6ee9e7b652546b892bc2eac56896a8a39415a", "html_url": "https://github.com/rust-lang/rust/commit/c3d6ee9e7b652546b892bc2eac56896a8a39415a"}], "stats": {"total": 118, "additions": 87, "deletions": 31}, "files": [{"sha": "484c41b3a79965c231f57f8d709fe9aaccb9ae25", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 25, "deletions": 15, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/7262824128f880a86e2af19ede5607dd58603526/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7262824128f880a86e2af19ede5607dd58603526/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=7262824128f880a86e2af19ede5607dd58603526", "patch": "@@ -3536,12 +3536,22 @@ impl<'a> LoweringContext<'a> {\n                         this.expr_block(block, ThinVec::new())\n                     })\n                 })\n-            },\n+            }\n             ExprKind::Closure(\n-                capture_clause, asyncness, movability, ref decl, ref body, fn_decl_span) =>\n-            {\n-                self.with_new_scopes(|this| {\n-                    if let IsAsync::Async(async_closure_node_id) = asyncness {\n+                capture_clause, asyncness, movability, ref decl, ref body, fn_decl_span\n+            ) => {\n+                if let IsAsync::Async(async_closure_node_id) = asyncness {\n+                    let outer_decl = FnDecl {\n+                        inputs: decl.inputs.clone(),\n+                        output: FunctionRetTy::Default(fn_decl_span),\n+                        variadic: false,\n+                    };\n+                    // We need to lower the declaration outside the new scope, because we\n+                    // have to conserve the state of being inside a loop condition for the\n+                    // closure argument types.\n+                    let fn_decl = self.lower_fn_decl(&outer_decl, None, false, false);\n+\n+                    self.with_new_scopes(|this| {\n                         // FIXME(cramertj) allow `async` non-`move` closures with\n                         if capture_clause == CaptureBy::Ref &&\n                             !decl.inputs.is_empty()\n@@ -3561,11 +3571,6 @@ impl<'a> LoweringContext<'a> {\n \n                         // Transform `async |x: u8| -> X { ... }` into\n                         // `|x: u8| future_from_generator(|| -> X { ... })`\n-                        let outer_decl = FnDecl {\n-                            inputs: decl.inputs.clone(),\n-                            output: FunctionRetTy::Default(fn_decl_span),\n-                            variadic: false,\n-                        };\n                         let body_id = this.lower_body(Some(&outer_decl), |this| {\n                             let async_ret_ty = if let FunctionRetTy::Ty(ty) = &decl.output {\n                                 Some(&**ty)\n@@ -3579,12 +3584,17 @@ impl<'a> LoweringContext<'a> {\n                         });\n                         hir::ExprClosure(\n                             this.lower_capture_clause(capture_clause),\n-                            this.lower_fn_decl(&outer_decl, None, false, false),\n+                            fn_decl,\n                             body_id,\n                             fn_decl_span,\n                             None,\n                         )\n-                    } else {\n+                    })\n+                } else {\n+                    // Lower outside new scope to preserve `is_in_loop_condition`.\n+                    let fn_decl = self.lower_fn_decl(decl, None, false, false);\n+\n+                    self.with_new_scopes(|this| {\n                         let mut is_generator = false;\n                         let body_id = this.lower_body(Some(decl), |this| {\n                             let e = this.lower_expr(body);\n@@ -3618,13 +3628,13 @@ impl<'a> LoweringContext<'a> {\n                         };\n                         hir::ExprClosure(\n                             this.lower_capture_clause(capture_clause),\n-                            this.lower_fn_decl(decl, None, false, false),\n+                            fn_decl,\n                             body_id,\n                             fn_decl_span,\n                             generator_option,\n                         )\n-                    }\n-                })\n+                    })\n+                }\n             }\n             ExprKind::Block(ref blk, opt_label) => {\n                 hir::ExprBlock(self.lower_block(blk,"}, {"sha": "b9d6486d9174a9117ca38c11d7aed88c4567fb17", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7262824128f880a86e2af19ede5607dd58603526/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7262824128f880a86e2af19ede5607dd58603526/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=7262824128f880a86e2af19ede5607dd58603526", "patch": "@@ -540,12 +540,12 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     // ==============\n     /// Finds the breakable scope for a given label. This is used for\n     /// resolving `break` and `continue`.\n-    pub fn find_breakable_scope(&mut self,\n+    pub fn find_breakable_scope(&self,\n                            span: Span,\n                            label: region::Scope)\n-                           -> &mut BreakableScope<'tcx> {\n+                           -> &BreakableScope<'tcx> {\n         // find the loop-scope with the correct id\n-        self.breakable_scopes.iter_mut()\n+        self.breakable_scopes.iter()\n             .rev()\n             .filter(|breakable_scope| breakable_scope.region_scope == label)\n             .next()"}, {"sha": "889073f6b4ca96a0ba5a9bfa67522c2176c73ce0", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7262824128f880a86e2af19ede5607dd58603526/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7262824128f880a86e2af19ede5607dd58603526/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=7262824128f880a86e2af19ede5607dd58603526", "patch": "@@ -3846,7 +3846,14 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 }\n \n             }\n-            hir::ExprContinue(_) => { tcx.types.never }\n+            hir::ExprContinue(destination) => {\n+                if let Ok(_) = destination.target_id {\n+                    tcx.types.never\n+                } else {\n+                    // There was an error, make typecheck fail\n+                    tcx.types.err\n+                }\n+            }\n             hir::ExprRet(ref expr_opt) => {\n                 if self.ret_coercion.is_none() {\n                     struct_span_err!(self.tcx.sess, expr.span, E0572,"}, {"sha": "30ba14c1bab3af49902b8133b503418a14552e8f", "filename": "src/test/mir-opt/end_region_6.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7262824128f880a86e2af19ede5607dd58603526/src%2Ftest%2Fmir-opt%2Fend_region_6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7262824128f880a86e2af19ede5607dd58603526/src%2Ftest%2Fmir-opt%2Fend_region_6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_6.rs?ref=7262824128f880a86e2af19ede5607dd58603526", "patch": "@@ -68,17 +68,17 @@ fn foo<F>(f: F) where F: FnOnce() -> i32 {\n // fn main::{{closure}}(_1: [closure@NodeId(22) d:&'19s D]) -> i32 {\n //     let mut _0: i32;\n //     ...\n-//     let _2: &'15_0rs D;\n+//     let _2: &'16_0rs D;\n //     ...\n //     let mut _3: i32;\n //     bb0: {\n //         StorageLive(_2);\n-//         _2 = &'15_0rs (*(_1.0: &'19s D));\n+//         _2 = &'16_0rs (*(_1.0: &'19s D));\n //         StorageLive(_3);\n //         _3 = ((*_2).0: i32);\n //         _0 = move _3;\n //         StorageDead(_3);\n-//         EndRegion('15_0rs);\n+//         EndRegion('16_0rs);\n //         StorageDead(_2);\n //         return;\n //     }"}, {"sha": "6d6afa25ae30e4c788b424de4907026cb9db1493", "filename": "src/test/mir-opt/end_region_7.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7262824128f880a86e2af19ede5607dd58603526/src%2Ftest%2Fmir-opt%2Fend_region_7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7262824128f880a86e2af19ede5607dd58603526/src%2Ftest%2Fmir-opt%2Fend_region_7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_7.rs?ref=7262824128f880a86e2af19ede5607dd58603526", "patch": "@@ -76,17 +76,17 @@ fn foo<F>(f: F) where F: FnOnce() -> i32 {\n // fn main::{{closure}}(_1: [closure@NodeId(22) d:D]) -> i32 {\n //     let mut _0: i32;\n //     ...\n-//     let _2: &'15_0rs D;\n+//     let _2: &'16_0rs D;\n //     ...\n //     let mut _3: i32;\n //     bb0: {\n //         StorageLive(_2);\n-//         _2 = &'15_0rs (_1.0: D);\n+//         _2 = &'16_0rs (_1.0: D);\n //         StorageLive(_3);\n //         _3 = ((*_2).0: i32);\n //         _0 = move _3;\n //         StorageDead(_3);\n-//         EndRegion('15_0rs);\n+//         EndRegion('16_0rs);\n //         StorageDead(_2);\n //         drop(_1) -> [return: bb2, unwind: bb1];\n //     }"}, {"sha": "c331276aade7756857cef58b821cff228c4b0222", "filename": "src/test/mir-opt/validate_1.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7262824128f880a86e2af19ede5607dd58603526/src%2Ftest%2Fmir-opt%2Fvalidate_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7262824128f880a86e2af19ede5607dd58603526/src%2Ftest%2Fmir-opt%2Fvalidate_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fvalidate_1.rs?ref=7262824128f880a86e2af19ede5607dd58603526", "patch": "@@ -64,14 +64,14 @@ fn main() {\n //     bb0: {\n //         Validate(Acquire, [_1: &ReFree(DefId(0/1:11 ~ validate_1[317d]::main[0]::{{closure}}[0]), BrEnv) [closure@NodeId(50)], _2: &ReFree(DefId(0/1:11 ~ validate_1[317d]::main[0]::{{closure}}[0]), BrAnon(0)) mut i32]);\n //         StorageLive(_3);\n-//         Validate(Suspend(ReScope(Remainder(BlockRemainder { block: ItemLocalId(22), first_statement_index: 0 }))), [(*_2): i32]);\n+//         Validate(Suspend(ReScope(Remainder(BlockRemainder { block: ItemLocalId(25), first_statement_index: 0 }))), [(*_2): i32]);\n //         _3 = &ReErased (*_2);\n-//         Validate(Acquire, [(*_3): i32/ReScope(Remainder(BlockRemainder { block: ItemLocalId(22), first_statement_index: 0 })) (imm)]);\n+//         Validate(Acquire, [(*_3): i32/ReScope(Remainder(BlockRemainder { block: ItemLocalId(25), first_statement_index: 0 })) (imm)]);\n //         StorageLive(_4);\n //         _4 = (*_3);\n //         _0 = move _4;\n //         StorageDead(_4);\n-//         EndRegion(ReScope(Remainder(BlockRemainder { block: ItemLocalId(22), first_statement_index: 0 })));\n+//         EndRegion(ReScope(Remainder(BlockRemainder { block: ItemLocalId(25), first_statement_index: 0 })));\n //         StorageDead(_3);\n //         return;\n //     }"}, {"sha": "b4d4479bab94a62eeed89817efd827950a8b72ce", "filename": "src/test/mir-opt/validate_5.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7262824128f880a86e2af19ede5607dd58603526/src%2Ftest%2Fmir-opt%2Fvalidate_5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7262824128f880a86e2af19ede5607dd58603526/src%2Ftest%2Fmir-opt%2Fvalidate_5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fvalidate_5.rs?ref=7262824128f880a86e2af19ede5607dd58603526", "patch": "@@ -53,12 +53,12 @@ fn main() {\n //         StorageLive(_3);\n //         StorageLive(_4);\n //         StorageLive(_5);\n-//         Validate(Suspend(ReScope(Node(ItemLocalId(9)))), [(*_2): i32]);\n+//         Validate(Suspend(ReScope(Node(ItemLocalId(12)))), [(*_2): i32]);\n //         _5 = &ReErased mut (*_2);\n-//         Validate(Acquire, [(*_5): i32/ReScope(Node(ItemLocalId(9)))]);\n+//         Validate(Acquire, [(*_5): i32/ReScope(Node(ItemLocalId(12)))]);\n //         _4 = move _5 as *mut i32 (Misc);\n //         _3 = move _4;\n-//         EndRegion(ReScope(Node(ItemLocalId(9))));\n+//         EndRegion(ReScope(Node(ItemLocalId(12))));\n //         StorageDead(_4);\n //         StorageDead(_5);\n //         Validate(Release, [_0: bool, _3: *mut i32]);"}, {"sha": "2e99921956ab295b1f89dc4bdfe798b7d0bb39aa", "filename": "src/test/ui/closure-array-break-length.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7262824128f880a86e2af19ede5607dd58603526/src%2Ftest%2Fui%2Fclosure-array-break-length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7262824128f880a86e2af19ede5607dd58603526/src%2Ftest%2Fui%2Fclosure-array-break-length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-array-break-length.rs?ref=7262824128f880a86e2af19ede5607dd58603526", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    |_: [_; continue]| {}; //~ ERROR: `continue` outside of loop\n+\n+    while |_: [_; continue]| {} {} //~ ERROR: `break` or `continue` with no label\n+\n+    while |_: [_; break]| {} {} //~ ERROR: `break` or `continue` with no label\n+}"}, {"sha": "139153992e27402d8a1fd1636ceaff4cd17c17bd", "filename": "src/test/ui/closure-array-break-length.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7262824128f880a86e2af19ede5607dd58603526/src%2Ftest%2Fui%2Fclosure-array-break-length.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7262824128f880a86e2af19ede5607dd58603526/src%2Ftest%2Fui%2Fclosure-array-break-length.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-array-break-length.stderr?ref=7262824128f880a86e2af19ede5607dd58603526", "patch": "@@ -0,0 +1,22 @@\n+error[E0268]: `continue` outside of loop\n+  --> $DIR/closure-array-break-length.rs:12:13\n+   |\n+LL |     |_: [_; continue]| {}; //~ ERROR: `continue` outside of loop\n+   |             ^^^^^^^^ cannot break outside of a loop\n+\n+error[E0590]: `break` or `continue` with no label in the condition of a `while` loop\n+  --> $DIR/closure-array-break-length.rs:14:19\n+   |\n+LL |     while |_: [_; continue]| {} {} //~ ERROR: `break` or `continue` with no label\n+   |                   ^^^^^^^^ unlabeled `continue` in the condition of a `while` loop\n+\n+error[E0590]: `break` or `continue` with no label in the condition of a `while` loop\n+  --> $DIR/closure-array-break-length.rs:16:19\n+   |\n+LL |     while |_: [_; break]| {} {} //~ ERROR: `break` or `continue` with no label\n+   |                   ^^^^^ unlabeled `break` in the condition of a `while` loop\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors occurred: E0268, E0590.\n+For more information about an error, try `rustc --explain E0268`."}]}