{"sha": "04717b9bd2decfee70a6fbde90540d3dc16bb76f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0NzE3YjliZDJkZWNmZWU3MGE2ZmJkZTkwNTQwZDNkYzE2YmI3NmY=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-05-08T20:43:26Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-05-08T20:43:26Z"}, "message": "Fix builtintype def_to_ty", "tree": {"sha": "3ffa9ce31f03693006cc8e11ead2ba44a417deb6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ffa9ce31f03693006cc8e11ead2ba44a417deb6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04717b9bd2decfee70a6fbde90540d3dc16bb76f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04717b9bd2decfee70a6fbde90540d3dc16bb76f", "html_url": "https://github.com/rust-lang/rust/commit/04717b9bd2decfee70a6fbde90540d3dc16bb76f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04717b9bd2decfee70a6fbde90540d3dc16bb76f/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41f470fea84998af65292f3c297c3e2b1d897848", "url": "https://api.github.com/repos/rust-lang/rust/commits/41f470fea84998af65292f3c297c3e2b1d897848", "html_url": "https://github.com/rust-lang/rust/commit/41f470fea84998af65292f3c297c3e2b1d897848"}], "stats": {"total": 22, "additions": 14, "deletions": 8}, "files": [{"sha": "d8abef491bfce76c87a367c2bf86699a02e1820b", "filename": "crates/ide_db/src/search.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/04717b9bd2decfee70a6fbde90540d3dc16bb76f/crates%2Fide_db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04717b9bd2decfee70a6fbde90540d3dc16bb76f/crates%2Fide_db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsearch.rs?ref=04717b9bd2decfee70a6fbde90540d3dc16bb76f", "patch": "@@ -318,7 +318,7 @@ pub struct FindUsages<'a> {\n impl<'a> FindUsages<'a> {\n     /// Enable searching for `Self` when the definition is a type.\n     pub fn include_self_refs(mut self) -> FindUsages<'a> {\n-        self.include_self_kw_refs = def_to_ty(self.sema.db, self.def);\n+        self.include_self_kw_refs = def_to_ty(self.sema, self.def);\n         self\n     }\n \n@@ -474,7 +474,7 @@ impl<'a> FindUsages<'a> {\n                 sink(file_id, reference)\n             }\n             Some(NameRefClass::Definition(def)) if self.include_self_kw_refs.is_some() => {\n-                if self.include_self_kw_refs == def_to_ty(self.sema.db, &def) {\n+                if self.include_self_kw_refs == def_to_ty(self.sema, &def) {\n                     let FileRange { file_id, range } = self.sema.original_range(name_ref.syntax());\n                     let reference = FileReference {\n                         range,\n@@ -536,16 +536,22 @@ impl<'a> FindUsages<'a> {\n     }\n }\n \n-fn def_to_ty(db: &RootDatabase, def: &Definition) -> Option<hir::Type> {\n+fn def_to_ty(sema: &Semantics<RootDatabase>, def: &Definition) -> Option<hir::Type> {\n     match def {\n         Definition::ModuleDef(def) => match def {\n-            ModuleDef::Adt(adt) => Some(adt.ty(db)),\n-            ModuleDef::TypeAlias(it) => Some(it.ty(db)),\n-            ModuleDef::BuiltinType(_it) => None, // FIXME somehow acquire some module to construct the builtin type\n-            ModuleDef::Trait(_it) => None,       // FIXME turn trait into its self-type\n+            ModuleDef::Adt(adt) => Some(adt.ty(sema.db)),\n+            ModuleDef::TypeAlias(it) => Some(it.ty(sema.db)),\n+            ModuleDef::BuiltinType(it) => {\n+                let graph = sema.db.crate_graph();\n+                let krate = graph.iter().next()?;\n+                let root_file = graph[krate].root_file_id;\n+                let module = sema.to_module_def(root_file)?;\n+                Some(it.ty(sema.db, module))\n+            }\n+            ModuleDef::Trait(_it) => None, // FIXME turn trait into its self-type\n             _ => None,\n         },\n-        Definition::SelfType(it) => Some(it.self_ty(db)),\n+        Definition::SelfType(it) => Some(it.self_ty(sema.db)),\n         _ => None,\n     }\n }"}]}