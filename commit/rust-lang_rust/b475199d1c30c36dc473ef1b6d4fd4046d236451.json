{"sha": "b475199d1c30c36dc473ef1b6d4fd4046d236451", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0NzUxOTlkMWMzMGMzNmRjNDczZWYxYjZkNGZkNDA0NmQyMzY0NTE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-03-17T14:30:32Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-03-17T14:30:32Z"}, "message": "[debuginfo] Fix map_reg", "tree": {"sha": "7ef7f0bb4313484d02aa5ccb37ba01db63535d0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ef7f0bb4313484d02aa5ccb37ba01db63535d0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b475199d1c30c36dc473ef1b6d4fd4046d236451", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b475199d1c30c36dc473ef1b6d4fd4046d236451", "html_url": "https://github.com/rust-lang/rust/commit/b475199d1c30c36dc473ef1b6d4fd4046d236451", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b475199d1c30c36dc473ef1b6d4fd4046d236451/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7b2ffaebdaf76ebf0084e5ed2fc6253787b0467", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7b2ffaebdaf76ebf0084e5ed2fc6253787b0467", "html_url": "https://github.com/rust-lang/rust/commit/c7b2ffaebdaf76ebf0084e5ed2fc6253787b0467"}], "stats": {"total": 111, "additions": 59, "deletions": 52}, "files": [{"sha": "c1fb6c92c316ade9c42a4f5de3a26063c8db5bb5", "filename": "src/debuginfo/mod.rs", "status": "modified", "additions": 59, "deletions": 52, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/b475199d1c30c36dc473ef1b6d4fd4046d236451/src%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b475199d1c30c36dc473ef1b6d4fd4046d236451/src%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fmod.rs?ref=b475199d1c30c36dc473ef1b6d4fd4046d236451", "patch": "@@ -4,7 +4,7 @@ mod line_info;\n use crate::prelude::*;\n \n use cranelift_codegen::ir::{StackSlots, ValueLabel, ValueLoc};\n-use cranelift_codegen::isa::RegUnit;\n+use cranelift_codegen::isa::{RegUnit, TargetIsa};\n use cranelift_codegen::ValueLocRange;\n \n use gimli::write::{\n@@ -253,7 +253,7 @@ impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n     pub fn define(\n         &mut self,\n         context: &Context,\n-        isa: &dyn cranelift_codegen::isa::TargetIsa,\n+        isa: &dyn TargetIsa,\n         source_info_set: &indexmap::IndexSet<SourceInfo>,\n         local_map: HashMap<mir::Local, CPlace<'tcx>>,\n     ) {\n@@ -279,6 +279,7 @@ impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n \n                 let location = place_location(\n                     self,\n+                    isa,\n                     context,\n                     &local_map,\n                     &value_labels_ranges,\n@@ -299,6 +300,7 @@ impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n \n fn place_location<'a, 'tcx>(\n     func_debug_ctx: &mut FunctionDebugContext<'a, 'tcx>,\n+    isa: &dyn TargetIsa,\n     context: &Context,\n     local_map: &HashMap<mir::Local, CPlace<'tcx>>,\n     value_labels_ranges: &HashMap<ValueLabel, Vec<ValueLocRange>>,\n@@ -323,7 +325,7 @@ fn place_location<'a, 'tcx>(\n                                 addend: i64::from(value_loc_range.end),\n                             },\n                             data: Expression(\n-                                translate_loc(value_loc_range.loc, &context.func.stack_slots).unwrap(),\n+                                translate_loc(isa, value_loc_range.loc, &context.func.stack_slots).unwrap(),\n                             ),\n                         })\n                         .collect(),\n@@ -353,62 +355,67 @@ fn place_location<'a, 'tcx>(\n \n \n \n-// Adapted from https://github.com/CraneStation/wasmtime/blob/5a1845b4caf7a5dba8eda1fef05213a532ed4259/crates/debug/src/transform/expression.rs#L59-L137\n-\n-fn map_reg(reg: RegUnit) -> Register {\n-    static mut REG_X86_MAP: Option<HashMap<RegUnit, Register>> = None;\n-    // FIXME lazy initialization?\n-    unsafe {\n-        if REG_X86_MAP.is_none() {\n-            REG_X86_MAP = Some(HashMap::new());\n+// Adapted from https://github.com/bytecodealliance/wasmtime/blob/50496efb6bac32aaf469c6d9186b322de83549bf/crates/debug/src/transform/map_reg.rs\n+pub(crate) fn map_reg(isa: &dyn TargetIsa, reg: RegUnit) -> Register {\n+    // TODO avoid duplication with fde.rs\n+    assert!(isa.name() == \"x86\" && isa.pointer_bits() == 64);\n+    // Mapping from https://github.com/bytecodealliance/cranelift/pull/902 by @iximeow\n+    const X86_GP_REG_MAP: [Register; 16] = [\n+        X86_64::RAX,\n+        X86_64::RCX,\n+        X86_64::RDX,\n+        X86_64::RBX,\n+        X86_64::RSP,\n+        X86_64::RBP,\n+        X86_64::RSI,\n+        X86_64::RDI,\n+        X86_64::R8,\n+        X86_64::R9,\n+        X86_64::R10,\n+        X86_64::R11,\n+        X86_64::R12,\n+        X86_64::R13,\n+        X86_64::R14,\n+        X86_64::R15,\n+    ];\n+    const X86_XMM_REG_MAP: [Register; 16] = [\n+        X86_64::XMM0,\n+        X86_64::XMM1,\n+        X86_64::XMM2,\n+        X86_64::XMM3,\n+        X86_64::XMM4,\n+        X86_64::XMM5,\n+        X86_64::XMM6,\n+        X86_64::XMM7,\n+        X86_64::XMM8,\n+        X86_64::XMM9,\n+        X86_64::XMM10,\n+        X86_64::XMM11,\n+        X86_64::XMM12,\n+        X86_64::XMM13,\n+        X86_64::XMM14,\n+        X86_64::XMM15,\n+    ];\n+    let reg_info = isa.register_info();\n+    let bank = reg_info.bank_containing_regunit(reg).unwrap();\n+    match bank.name {\n+        \"IntRegs\" => {\n+            // x86 GP registers have a weird mapping to DWARF registers, so we use a\n+            // lookup table.\n+            X86_GP_REG_MAP[(reg - bank.first_unit) as usize]\n         }\n-        if let Some(val) = REG_X86_MAP.as_mut().unwrap().get(&reg) {\n-            return *val;\n+        \"FloatRegs\" => X86_XMM_REG_MAP[(reg - bank.first_unit) as usize],\n+        bank_name => {\n+            panic!(\"unsupported register bank: {}\", bank_name);\n         }\n-        let result = match reg {\n-            0 => X86_64::RAX,\n-            1 => X86_64::RCX,\n-            2 => X86_64::RDX,\n-            3 => X86_64::RBX,\n-            4 => X86_64::RSP,\n-            5 => X86_64::RBP,\n-            6 => X86_64::RSI,\n-            7 => X86_64::RDI,\n-            8 => X86_64::R8,\n-            9 => X86_64::R9,\n-            10 => X86_64::R10,\n-            11 => X86_64::R11,\n-            12 => X86_64::R12,\n-            13 => X86_64::R13,\n-            14 => X86_64::R14,\n-            15 => X86_64::R15,\n-            16 => X86_64::XMM0,\n-            17 => X86_64::XMM1,\n-            18 => X86_64::XMM2,\n-            19 => X86_64::XMM3,\n-            20 => X86_64::XMM4,\n-            21 => X86_64::XMM5,\n-            22 => X86_64::XMM6,\n-            23 => X86_64::XMM7,\n-            24 => X86_64::XMM8,\n-            25 => X86_64::XMM9,\n-            26 => X86_64::XMM10,\n-            27 => X86_64::XMM11,\n-            28 => X86_64::XMM12,\n-            29 => X86_64::XMM13,\n-            30 => X86_64::XMM14,\n-            31 => X86_64::XMM15,\n-            _ => panic!(\"unknown x86_64 register {}\", reg),\n-        };\n-        REG_X86_MAP.as_mut().unwrap().insert(reg, result);\n-        result\n     }\n }\n \n-fn translate_loc(loc: ValueLoc, stack_slots: &StackSlots) -> Option<Vec<u8>> {\n+// Adapted from https://github.com/CraneStation/wasmtime/blob/5a1845b4caf7a5dba8eda1fef05213a532ed4259/crates/debug/src/transform/expression.rs#L59-L137\n+fn translate_loc(isa: &dyn TargetIsa, loc: ValueLoc, stack_slots: &StackSlots) -> Option<Vec<u8>> {\n     match loc {\n         ValueLoc::Reg(reg) => {\n-            let machine_reg = map_reg(reg).0 as u8;\n+            let machine_reg = map_reg(isa, reg).0 as u8;\n             assert!(machine_reg <= 32); // FIXME\n             Some(vec![gimli::constants::DW_OP_reg0.0 + machine_reg])\n         }"}]}