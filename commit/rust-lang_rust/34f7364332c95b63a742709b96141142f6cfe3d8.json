{"sha": "34f7364332c95b63a742709b96141142f6cfe3d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0ZjczNjQzMzJjOTViNjNhNzQyNzA5Yjk2MTQxMTQyZjZjZmUzZDg=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-01-21T23:39:22Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-02-11T19:12:33Z"}, "message": "rustc_llvm: Tweak how initialization is performed\n\nRefactor a bit to have less repetition and #[cfg] and try to bury it all inside\nof a macro.", "tree": {"sha": "4ac30091f086eb53bd26781edd1dc7325a9f720a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ac30091f086eb53bd26781edd1dc7325a9f720a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34f7364332c95b63a742709b96141142f6cfe3d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34f7364332c95b63a742709b96141142f6cfe3d8", "html_url": "https://github.com/rust-lang/rust/commit/34f7364332c95b63a742709b96141142f6cfe3d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34f7364332c95b63a742709b96141142f6cfe3d8/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32c56138ec338b001875c3df7c97c67af266a324", "url": "https://api.github.com/repos/rust-lang/rust/commits/32c56138ec338b001875c3df7c97c67af266a324", "html_url": "https://github.com/rust-lang/rust/commit/32c56138ec338b001875c3df7c97c67af266a324"}], "stats": {"total": 119, "additions": 40, "deletions": 79}, "files": [{"sha": "2bdbef35badf90110721e643523465b2dd03eb5c", "filename": "mk/llvm.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34f7364332c95b63a742709b96141142f6cfe3d8/mk%2Fllvm.mk", "raw_url": "https://github.com/rust-lang/rust/raw/34f7364332c95b63a742709b96141142f6cfe3d8/mk%2Fllvm.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fllvm.mk?ref=34f7364332c95b63a742709b96141142f6cfe3d8", "patch": "@@ -102,7 +102,7 @@ $(foreach host,$(CFG_HOST), \\\n define LLVM_LINKAGE_DEPS\n $$(TLIB$(1)_T_$(2)_H_$(3))/stamp.rustc_llvm: $$(LLVM_LINKAGE_PATH_$(2))\n RUSTFLAGS$(1)_rustc_llvm_T_$(2) += $$(shell echo $$(LLVM_ALL_COMPONENTS_$(2)) | tr '-' '_' |\\\n-\tsed -e 's/^ //;s/\\([^ ]*\\)/\\-\\-cfg have_component_\\1/g')\n+\tsed -e 's/^ //;s/\\([^ ]*\\)/\\-\\-cfg \"llvm_component=\\\\\"\\1\\\\\"\"/g')\n endef\n \n $(foreach source,$(CFG_HOST), \\"}, {"sha": "1933c926e3018e9dd6eefdfc2be47a3445bedf43", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 39, "deletions": 78, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/34f7364332c95b63a742709b96141142f6cfe3d8/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34f7364332c95b63a742709b96141142f6cfe3d8/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=34f7364332c95b63a742709b96141142f6cfe3d8", "patch": "@@ -2166,53 +2166,6 @@ extern {\n     pub fn LLVMRustFreeOperandBundleDef(Bundle: OperandBundleDefRef);\n }\n \n-#[cfg(have_component_x86)]\n-extern {\n-    pub fn LLVMInitializeX86TargetInfo();\n-    pub fn LLVMInitializeX86Target();\n-    pub fn LLVMInitializeX86TargetMC();\n-    pub fn LLVMInitializeX86AsmPrinter();\n-    pub fn LLVMInitializeX86AsmParser();\n-}\n-#[cfg(have_component_arm)]\n-extern {\n-    pub fn LLVMInitializeARMTargetInfo();\n-    pub fn LLVMInitializeARMTarget();\n-    pub fn LLVMInitializeARMTargetMC();\n-    pub fn LLVMInitializeARMAsmPrinter();\n-    pub fn LLVMInitializeARMAsmParser();\n-}\n-#[cfg(have_component_aarch64)]\n-extern {\n-    pub fn LLVMInitializeAArch64TargetInfo();\n-    pub fn LLVMInitializeAArch64Target();\n-    pub fn LLVMInitializeAArch64TargetMC();\n-    pub fn LLVMInitializeAArch64AsmPrinter();\n-    pub fn LLVMInitializeAArch64AsmParser();\n-}\n-#[cfg(have_component_mips)]\n-extern {\n-    pub fn LLVMInitializeMipsTargetInfo();\n-    pub fn LLVMInitializeMipsTarget();\n-    pub fn LLVMInitializeMipsTargetMC();\n-    pub fn LLVMInitializeMipsAsmPrinter();\n-    pub fn LLVMInitializeMipsAsmParser();\n-}\n-#[cfg(have_component_powerpc)]\n-extern {\n-    pub fn LLVMInitializePowerPCTargetInfo();\n-    pub fn LLVMInitializePowerPCTarget();\n-    pub fn LLVMInitializePowerPCTargetMC();\n-    pub fn LLVMInitializePowerPCAsmPrinter();\n-    pub fn LLVMInitializePowerPCAsmParser();\n-}\n-#[cfg(have_component_pnacl)]\n-extern {\n-    pub fn LLVMInitializePNaClTargetInfo();\n-    pub fn LLVMInitializePNaClTarget();\n-    pub fn LLVMInitializePNaClTargetMC();\n-}\n-\n // LLVM requires symbols from this library, but apparently they're not printed\n // during llvm-config?\n #[cfg(windows)]\n@@ -2399,47 +2352,55 @@ pub unsafe fn debug_loc_to_string(c: ContextRef, tr: DebugLocRef) -> String {\n \n pub fn initialize_available_targets() {\n     macro_rules! init_target(\n-        ($cfg:ident $arch:ident) => { {\n+        ($cfg:meta, $($method:ident),*) => { {\n             #[cfg($cfg)]\n             fn init() {\n+                extern {\n+                    $(fn $method();)*\n+                }\n                 unsafe {\n-                    let f = concat_idents!(LLVMInitialize, $arch, TargetInfo);\n-                    f();\n-                    let f = concat_idents!(LLVMInitialize, $arch, Target);\n-                    f();\n-                    let f = concat_idents!(LLVMInitialize, $arch, TargetMC);\n-                    f();\n-                    let f = concat_idents!(LLVMInitialize, $arch, AsmPrinter);\n-                    f();\n-                    let f = concat_idents!(LLVMInitialize, $arch, AsmParser);\n-                    f();\n+                    $($method();)*\n                 }\n             }\n             #[cfg(not($cfg))]\n             fn init() { }\n             init();\n         } }\n     );\n-\n-    init_target!(have_component_powerpc PowerPC);\n-    init_target!(have_component_mips Mips);\n-    init_target!(have_component_aarch64 AArch64);\n-    init_target!(have_component_arm ARM);\n-    init_target!(have_component_x86 X86);\n-\n-    // PNaCl doesn't provide some of the optional target components, so we\n-    // manually initialize it here.\n-    #[cfg(have_component_pnacl)]\n-    fn init_pnacl() {\n-        unsafe {\n-            LLVMInitializePNaClTargetInfo();\n-            LLVMInitializePNaClTarget();\n-            LLVMInitializePNaClTargetMC();\n-        }\n-    }\n-    #[cfg(not(have_component_pnacl))]\n-    fn init_pnacl() { }\n-    init_pnacl();\n+    init_target!(llvm_component = \"x86\",\n+                 LLVMInitializeX86TargetInfo,\n+                 LLVMInitializeX86Target,\n+                 LLVMInitializeX86TargetMC,\n+                 LLVMInitializeX86AsmPrinter,\n+                 LLVMInitializeX86AsmParser);\n+    init_target!(llvm_component = \"arm\",\n+                 LLVMInitializeARMTargetInfo,\n+                 LLVMInitializeARMTarget,\n+                 LLVMInitializeARMTargetMC,\n+                 LLVMInitializeARMAsmPrinter,\n+                 LLVMInitializeARMAsmParser);\n+    init_target!(llvm_component = \"aarch64\",\n+                 LLVMInitializeAArch64TargetInfo,\n+                 LLVMInitializeAArch64Target,\n+                 LLVMInitializeAArch64TargetMC,\n+                 LLVMInitializeAArch64AsmPrinter,\n+                 LLVMInitializeAArch64AsmParser);\n+    init_target!(llvm_component = \"mips\",\n+                 LLVMInitializeMipsTargetInfo,\n+                 LLVMInitializeMipsTarget,\n+                 LLVMInitializeMipsTargetMC,\n+                 LLVMInitializeMipsAsmPrinter,\n+                 LLVMInitializeMipsAsmParser);\n+    init_target!(llvm_component = \"powerpc\",\n+                 LLVMInitializePowerPCTargetInfo,\n+                 LLVMInitializePowerPCTarget,\n+                 LLVMInitializePowerPCTargetMC,\n+                 LLVMInitializePowerPCAsmPrinter,\n+                 LLVMInitializePowerPCAsmParser);\n+    init_target!(llvm_component = \"pnacl\",\n+                 LLVMInitializePNaClTargetInfo,\n+                 LLVMInitializePNaClTarget,\n+                 LLVMInitializePNaClTargetMC);\n }\n \n pub fn last_error() -> Option<String> {"}]}