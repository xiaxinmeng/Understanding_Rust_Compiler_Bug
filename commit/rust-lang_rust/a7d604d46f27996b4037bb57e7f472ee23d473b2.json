{"sha": "a7d604d46f27996b4037bb57e7f472ee23d473b2", "node_id": "C_kwDOAAsO6NoAKGE3ZDYwNGQ0NmYyNzk5NmI0MDM3YmI1N2U3ZjQ3MmVlMjNkNDczYjI", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-06-01T07:37:55Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-06-01T09:05:03Z"}, "message": "fix: Fix nav target calculation discarding file ids from differing macro upmapping", "tree": {"sha": "499e23b939711c5b3a00f6e489b8a750e5d7506e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/499e23b939711c5b3a00f6e489b8a750e5d7506e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7d604d46f27996b4037bb57e7f472ee23d473b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7d604d46f27996b4037bb57e7f472ee23d473b2", "html_url": "https://github.com/rust-lang/rust/commit/a7d604d46f27996b4037bb57e7f472ee23d473b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7d604d46f27996b4037bb57e7f472ee23d473b2/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e2820283261183972b016d86a92144a3f8472e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e2820283261183972b016d86a92144a3f8472e5", "html_url": "https://github.com/rust-lang/rust/commit/0e2820283261183972b016d86a92144a3f8472e5"}], "stats": {"total": 112, "additions": 55, "deletions": 57}, "files": [{"sha": "385c1b0c00816c28d0c373c566c3440125445a38", "filename": "crates/ide/src/navigation_target.rs", "status": "modified", "additions": 53, "deletions": 55, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/a7d604d46f27996b4037bb57e7f472ee23d473b2/crates%2Fide%2Fsrc%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d604d46f27996b4037bb57e7f472ee23d473b2/crates%2Fide%2Fsrc%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fnavigation_target.rs?ref=a7d604d46f27996b4037bb57e7f472ee23d473b2", "patch": "@@ -5,7 +5,7 @@ use std::fmt;\n use either::Either;\n use hir::{\n     symbols::FileSymbol, AssocItem, Documentation, FieldSource, HasAttrs, HasContainer, HasSource,\n-    HirDisplay, InFile, LocalSource, ModuleSource,\n+    HirDisplay, HirFileId, InFile, LocalSource, ModuleSource,\n };\n use ide_db::{\n     base_db::{FileId, FileRange},\n@@ -92,10 +92,9 @@ impl NavigationTarget {\n \n     pub(crate) fn from_module_to_decl(db: &RootDatabase, module: hir::Module) -> NavigationTarget {\n         let name = module.name(db).map(|it| it.to_smol_str()).unwrap_or_default();\n-        if let Some(src @ InFile { value, .. }) = &module.declaration_source(db) {\n-            let FileRange { file_id, range: full_range } = src.syntax().original_file_range(db);\n-            let focus_range =\n-                value.name().and_then(|it| orig_focus_range(db, src.file_id, it.syntax()));\n+        if let Some(InFile { value, file_id }) = &module.declaration_source(db) {\n+            let (file_id, full_range, focus_range) =\n+                orig_range_with_focus(db, *file_id, value.syntax(), value.name());\n             let mut res = NavigationTarget::from_syntax(\n                 file_id,\n                 name,\n@@ -131,14 +130,15 @@ impl NavigationTarget {\n     /// Allows `NavigationTarget` to be created from a `NameOwner`\n     pub(crate) fn from_named(\n         db: &RootDatabase,\n-        node @ InFile { file_id, value }: InFile<&dyn ast::HasName>,\n+        InFile { file_id, value }: InFile<&dyn ast::HasName>,\n         kind: SymbolKind,\n     ) -> NavigationTarget {\n         let name = value.name().map(|it| it.text().into()).unwrap_or_else(|| \"_\".into());\n-        let focus_range = value.name().and_then(|it| orig_focus_range(db, file_id, it.syntax()));\n-        let FileRange { file_id, range } = node.map(|it| it.syntax()).original_file_range(db);\n \n-        NavigationTarget::from_syntax(file_id, name, focus_range, range, kind)\n+        let (file_id, full_range, focus_range) =\n+            orig_range_with_focus(db, file_id, value.syntax(), value.name());\n+\n+        NavigationTarget::from_syntax(file_id, name, focus_range, full_range, kind)\n     }\n \n     fn from_syntax(\n@@ -165,15 +165,21 @@ impl NavigationTarget {\n impl TryToNav for FileSymbol {\n     fn try_to_nav(&self, db: &RootDatabase) -> Option<NavigationTarget> {\n         let full_range = self.loc.original_range(db);\n-        let name_range = self.loc.original_name_range(db)?;\n+        let focus_range = self.loc.original_name_range(db).and_then(|it| {\n+            if it.file_id == full_range.file_id {\n+                Some(it.range)\n+            } else {\n+                None\n+            }\n+        });\n \n         Some(NavigationTarget {\n             file_id: full_range.file_id,\n             name: if self.is_alias { self.def.name(db)?.to_smol_str() } else { self.name.clone() },\n             alias: if self.is_alias { Some(self.name.clone()) } else { None },\n             kind: Some(hir::ModuleDefId::from(self.def).into()),\n             full_range: full_range.range,\n-            focus_range: Some(name_range.range),\n+            focus_range,\n             container_name: self.container_name.clone(),\n             description: match self.def {\n                 hir::ModuleDef::Module(it) => Some(it.display(db).to_string()),\n@@ -340,15 +346,11 @@ impl ToNav for hir::Module {\n         let name = self.name(db).map(|it| it.to_smol_str()).unwrap_or_default();\n         let (syntax, focus) = match &value {\n             ModuleSource::SourceFile(node) => (node.syntax(), None),\n-            ModuleSource::Module(node) => (\n-                node.syntax(),\n-                node.name().and_then(|it| orig_focus_range(db, file_id, it.syntax())),\n-            ),\n+            ModuleSource::Module(node) => (node.syntax(), node.name()),\n             ModuleSource::BlockExpr(node) => (node.syntax(), None),\n         };\n-        let FileRange { file_id, range: full_range } =\n-            InFile::new(file_id, syntax).original_file_range(db);\n-        NavigationTarget::from_syntax(file_id, name, focus, full_range, SymbolKind::Module)\n+        let (file_id, full_range, focus_range) = orig_range_with_focus(db, file_id, syntax, focus);\n+        NavigationTarget::from_syntax(file_id, name, focus_range, full_range, SymbolKind::Module)\n     }\n }\n \n@@ -357,17 +359,14 @@ impl TryToNav for hir::Impl {\n         let InFile { file_id, value } = self.source(db)?;\n         let derive_attr = self.is_builtin_derive(db);\n \n-        let focus_range = if derive_attr.is_some() {\n-            None\n-        } else {\n-            value.self_ty().and_then(|ty| orig_focus_range(db, file_id, ty.syntax()))\n-        };\n+        let focus = if derive_attr.is_some() { None } else { value.self_ty() };\n \n-        let FileRange { file_id, range: full_range } = match &derive_attr {\n-            Some(attr) => attr.syntax().original_file_range(db),\n-            None => InFile::new(file_id, value.syntax()).original_file_range(db),\n+        let syntax = match &derive_attr {\n+            Some(attr) => attr.value.syntax(),\n+            None => value.syntax(),\n         };\n \n+        let (file_id, full_range, focus_range) = orig_range_with_focus(db, file_id, syntax, focus);\n         Some(NavigationTarget::from_syntax(\n             file_id,\n             \"impl\".into(),\n@@ -456,9 +455,8 @@ impl ToNav for LocalSource {\n             Either::Left(bind_pat) => (bind_pat.syntax(), bind_pat.name()),\n             Either::Right(it) => (it.syntax(), it.name()),\n         };\n-        let focus_range = name.and_then(|it| orig_focus_range(db, file_id, it.syntax()));\n-        let FileRange { file_id, range: full_range } =\n-            InFile::new(file_id, node).original_file_range(db);\n+\n+        let (file_id, full_range, focus_range) = orig_range_with_focus(db, file_id, node, name);\n \n         let name = local.name(db).to_smol_str();\n         let kind = if local.is_self(db) {\n@@ -493,9 +491,8 @@ impl ToNav for hir::Label {\n         let InFile { file_id, value } = self.source(db);\n         let name = self.name(db).to_smol_str();\n \n-        let range = |syntax: &_| InFile::new(file_id, syntax).original_file_range(db);\n-        let FileRange { file_id, range: full_range } = range(value.syntax());\n-        let focus_range = value.lifetime().map(|lt| range(lt.syntax()).range);\n+        let (file_id, full_range, focus_range) =\n+            orig_range_with_focus(db, file_id, value.syntax(), value.lifetime());\n \n         NavigationTarget {\n             file_id,\n@@ -525,19 +522,14 @@ impl TryToNav for hir::TypeParam {\n             Either::Right(x) => Either::Right(x),\n         };\n \n-        let range = |syntax: &_| InFile::new(file_id, syntax).original_file_range(db);\n-        let focus_range = |syntax: &_| InFile::new(file_id, syntax).original_file_range_opt(db);\n-        let FileRange { file_id, range: full_range } = match &value {\n-            Either::Left(type_param) => range(type_param.syntax()),\n-            Either::Right(trait_) => trait_\n-                .name()\n-                .and_then(|name| focus_range(name.syntax()))\n-                .unwrap_or_else(|| range(trait_.syntax())),\n+        let syntax = match &value {\n+            Either::Left(type_param) => type_param.syntax(),\n+            Either::Right(trait_) => trait_.syntax(),\n         };\n-        let focus_range = value\n-            .either(|it| it.name(), |it| it.name())\n-            .and_then(|it| focus_range(it.syntax()))\n-            .map(|it| it.range);\n+        let focus = value.as_ref().either(|it| it.name(), |it| it.name());\n+\n+        let (file_id, full_range, focus_range) = orig_range_with_focus(db, file_id, syntax, focus);\n+\n         Some(NavigationTarget {\n             file_id,\n             name,\n@@ -563,15 +555,15 @@ impl TryToNav for hir::LifetimeParam {\n         let InFile { file_id, value } = self.source(db)?;\n         let name = self.name(db).to_smol_str();\n \n-        let FileRange { file_id, range: full_range } =\n+        let FileRange { file_id, range } =\n             InFile::new(file_id, value.syntax()).original_file_range(db);\n         Some(NavigationTarget {\n             file_id,\n             name,\n             alias: None,\n             kind: Some(SymbolKind::LifetimeParam),\n-            full_range,\n-            focus_range: Some(full_range),\n+            full_range: range,\n+            focus_range: Some(range),\n             container_name: None,\n             description: None,\n             docs: None,\n@@ -592,9 +584,8 @@ impl TryToNav for hir::ConstParam {\n             }\n         };\n \n-        let focus_range = value.name().and_then(|it| orig_focus_range(db, file_id, it.syntax()));\n-        let FileRange { file_id, range: full_range } =\n-            InFile::new(file_id, value.syntax()).original_file_range(db);\n+        let (file_id, full_range, focus_range) =\n+            orig_range_with_focus(db, file_id, value.syntax(), value.name());\n         Some(NavigationTarget {\n             file_id,\n             name,\n@@ -609,12 +600,19 @@ impl TryToNav for hir::ConstParam {\n     }\n }\n \n-fn orig_focus_range(\n+fn orig_range_with_focus(\n     db: &RootDatabase,\n-    file_id: hir::HirFileId,\n-    syntax: &SyntaxNode,\n-) -> Option<TextRange> {\n-    InFile::new(file_id, syntax).original_file_range_opt(db).map(|it| it.range)\n+    hir_file: HirFileId,\n+    value: &SyntaxNode,\n+    name: Option<impl AstNode>,\n+) -> (FileId, TextRange, Option<TextRange>) {\n+    let FileRange { file_id, range: full_range } =\n+        InFile::new(hir_file, value).original_file_range(db);\n+    let focus_range = name\n+        .and_then(|it| InFile::new(hir_file, it.syntax()).original_file_range_opt(db))\n+        .and_then(|range| if range.file_id == file_id { Some(range.range) } else { None });\n+\n+    (file_id, full_range, focus_range)\n }\n \n #[cfg(test)]"}, {"sha": "fdc5261ac38b2f6099bc21d615df4b21d3223b0c", "filename": "crates/ide/src/references.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7d604d46f27996b4037bb57e7f472ee23d473b2/crates%2Fide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d604d46f27996b4037bb57e7f472ee23d473b2/crates%2Fide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences.rs?ref=a7d604d46f27996b4037bb57e7f472ee23d473b2", "patch": "@@ -1289,7 +1289,7 @@ trait Foo where Self$0 {\n impl Foo for () {}\n \"#,\n             expect![[r#\"\n-                Self TypeParam FileId(0) 6..9 6..9\n+                Self TypeParam FileId(0) 0..44 6..9\n \n                 FileId(0) 16..20\n                 FileId(0) 37..41\n@@ -1380,7 +1380,7 @@ fn foo<T: Bar>(_: impl Bar, _: &dyn Bar) {}\n trait Foo = where Self$0: ;\n \"#,\n             expect![[r#\"\n-                Self TypeParam FileId(0) 6..9 6..9\n+                Self TypeParam FileId(0) 0..25 6..9\n \n                 FileId(0) 18..22\n             \"#]],"}]}