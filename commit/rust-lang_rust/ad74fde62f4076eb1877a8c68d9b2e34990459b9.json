{"sha": "ad74fde62f4076eb1877a8c68d9b2e34990459b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkNzRmZGU2MmY0MDc2ZWIxODc3YThjNjhkOWIyZTM0OTkwNDU5Yjk=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-09-15T00:46:51Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-09-15T04:41:34Z"}, "message": "Use std::iter::range_step\n\nUse the iterator version instead of the old uint::/int::range_step\nfunctions.", "tree": {"sha": "fe28cb87415d8077041d1a512addeb33247b4176", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe28cb87415d8077041d1a512addeb33247b4176"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad74fde62f4076eb1877a8c68d9b2e34990459b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad74fde62f4076eb1877a8c68d9b2e34990459b9", "html_url": "https://github.com/rust-lang/rust/commit/ad74fde62f4076eb1877a8c68d9b2e34990459b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad74fde62f4076eb1877a8c68d9b2e34990459b9/comments", "author": null, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66c2965b046029bec04b3f2c73e6619c15784145", "url": "https://api.github.com/repos/rust-lang/rust/commits/66c2965b046029bec04b3f2c73e6619c15784145", "html_url": "https://github.com/rust-lang/rust/commit/66c2965b046029bec04b3f2c73e6619c15784145"}], "stats": {"total": 134, "additions": 57, "deletions": 77}, "files": [{"sha": "8e07c7ee1c7cac43a4903a382022ce6d867e4350", "filename": "src/libextra/crypto/md5.rs", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ad74fde62f4076eb1877a8c68d9b2e34990459b9/src%2Flibextra%2Fcrypto%2Fmd5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad74fde62f4076eb1877a8c68d9b2e34990459b9/src%2Flibextra%2Fcrypto%2Fmd5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fcrypto%2Fmd5.rs?ref=ad74fde62f4076eb1877a8c68d9b2e34990459b9", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::uint;\n+use std::iter::range_step;\n \n use cryptoutil::{write_u32_le, read_u32v_le, FixedBuffer, FixedBuffer64, StandardPadding};\n use digest::Digest;\n@@ -86,46 +86,42 @@ impl Md5State {\n         read_u32v_le(data, input);\n \n         // round 1\n-        do uint::range_step(0, 16, 4) |i| {\n+        for i in range_step(0u, 16, 4) {\n             a = op_f(a, b, c, d, data[i] + C1[i], 7);\n             d = op_f(d, a, b, c, data[i + 1] + C1[i + 1], 12);\n             c = op_f(c, d, a, b, data[i + 2] + C1[i + 2], 17);\n             b = op_f(b, c, d, a, data[i + 3] + C1[i + 3], 22);\n-            true\n-        };\n+        }\n \n         // round 2\n         let mut t = 1;\n-        do uint::range_step(0, 16, 4) |i| {\n+        for i in range_step(0u, 16, 4) {\n             a = op_g(a, b, c, d, data[t & 0x0f] + C2[i], 5);\n             d = op_g(d, a, b, c, data[(t + 5) & 0x0f] + C2[i + 1], 9);\n             c = op_g(c, d, a, b, data[(t + 10) & 0x0f] + C2[i + 2], 14);\n             b = op_g(b, c, d, a, data[(t + 15) & 0x0f] + C2[i + 3], 20);\n             t += 20;\n-            true\n-        };\n+        }\n \n         // round 3\n         t = 5;\n-        do uint::range_step(0, 16, 4) |i| {\n+        for i in range_step(0u, 16, 4) {\n             a = op_h(a, b, c, d, data[t & 0x0f] + C3[i], 4);\n             d = op_h(d, a, b, c, data[(t + 3) & 0x0f] + C3[i + 1], 11);\n             c = op_h(c, d, a, b, data[(t + 6) & 0x0f] + C3[i + 2], 16);\n             b = op_h(b, c, d, a, data[(t + 9) & 0x0f] + C3[i + 3], 23);\n             t += 12;\n-            true\n-        };\n+        }\n \n         // round 4\n         t = 0;\n-        do uint::range_step(0, 16, 4) |i| {\n+        for i in range_step(0u, 16, 4) {\n             a = op_i(a, b, c, d, data[t & 0x0f] + C4[i], 6);\n             d = op_i(d, a, b, c, data[(t + 7) & 0x0f] + C4[i + 1], 10);\n             c = op_i(c, d, a, b, data[(t + 14) & 0x0f] + C4[i + 2], 15);\n             b = op_i(b, c, d, a, data[(t + 21) & 0x0f] + C4[i + 3], 21);\n             t += 28;\n-            true\n-        };\n+        }\n \n         self.s0 += a;\n         self.s1 += b;"}, {"sha": "10289fb8b976465ebde8557f07746ddd25ff7994", "filename": "src/libextra/crypto/sha2.rs", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ad74fde62f4076eb1877a8c68d9b2e34990459b9/src%2Flibextra%2Fcrypto%2Fsha2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad74fde62f4076eb1877a8c68d9b2e34990459b9/src%2Flibextra%2Fcrypto%2Fsha2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fcrypto%2Fsha2.rs?ref=ad74fde62f4076eb1877a8c68d9b2e34990459b9", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::uint;\n+use std::iter::range_step;\n \n use cryptoutil::{write_u64_be, write_u32_be, read_u64v_be, read_u32v_be, add_bytes_to_bits,\n     add_bytes_to_bits_tuple, FixedBuffer, FixedBuffer128, FixedBuffer64, StandardPadding};\n@@ -111,7 +111,7 @@ impl Engine512State {\n \n         // Putting the message schedule inside the same loop as the round calculations allows for\n         // the compiler to generate better code.\n-        do uint::range_step(0, 64, 8) |t| {\n+        for t in range_step(0u, 64, 8) {\n             schedule_round!(t + 16);\n             schedule_round!(t + 17);\n             schedule_round!(t + 18);\n@@ -129,10 +129,9 @@ impl Engine512State {\n             sha2_round!(d, e, f, g, h, a, b, c, K64, t + 5);\n             sha2_round!(c, d, e, f, g, h, a, b, K64, t + 6);\n             sha2_round!(b, c, d, e, f, g, h, a, K64, t + 7);\n-            true\n-        };\n+        }\n \n-        do uint::range_step(64, 80, 8) |t| {\n+        for t in range_step(64u, 80, 8) {\n             sha2_round!(a, b, c, d, e, f, g, h, K64, t);\n             sha2_round!(h, a, b, c, d, e, f, g, K64, t + 1);\n             sha2_round!(g, h, a, b, c, d, e, f, K64, t + 2);\n@@ -141,8 +140,7 @@ impl Engine512State {\n             sha2_round!(d, e, f, g, h, a, b, c, K64, t + 5);\n             sha2_round!(c, d, e, f, g, h, a, b, K64, t + 6);\n             sha2_round!(b, c, d, e, f, g, h, a, K64, t + 7);\n-            true\n-        };\n+        }\n \n         self.H0 += a;\n         self.H1 += b;\n@@ -527,7 +525,7 @@ impl Engine256State {\n \n         // Putting the message schedule inside the same loop as the round calculations allows for\n         // the compiler to generate better code.\n-        do uint::range_step(0, 48, 8) |t| {\n+        for t in range_step(0u, 48, 8) {\n             schedule_round!(t + 16);\n             schedule_round!(t + 17);\n             schedule_round!(t + 18);\n@@ -545,10 +543,9 @@ impl Engine256State {\n             sha2_round!(d, e, f, g, h, a, b, c, K32, t + 5);\n             sha2_round!(c, d, e, f, g, h, a, b, K32, t + 6);\n             sha2_round!(b, c, d, e, f, g, h, a, K32, t + 7);\n-            true\n-        };\n+        }\n \n-        do uint::range_step(48, 64, 8) |t| {\n+        for t in range_step(48u, 64, 8) {\n             sha2_round!(a, b, c, d, e, f, g, h, K32, t);\n             sha2_round!(h, a, b, c, d, e, f, g, K32, t + 1);\n             sha2_round!(g, h, a, b, c, d, e, f, K32, t + 2);\n@@ -557,8 +554,7 @@ impl Engine256State {\n             sha2_round!(d, e, f, g, h, a, b, c, K32, t + 5);\n             sha2_round!(c, d, e, f, g, h, a, b, K32, t + 6);\n             sha2_round!(b, c, d, e, f, g, h, a, K32, t + 7);\n-            true\n-        };\n+        }\n \n         self.H0 += a;\n         self.H1 += b;"}, {"sha": "911d883f88ac98c1f537b6c768ec306706c9a2ce", "filename": "src/libstd/char.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ad74fde62f4076eb1877a8c68d9b2e34990459b9/src%2Flibstd%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad74fde62f4076eb1877a8c68d9b2e34990459b9/src%2Flibstd%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fchar.rs?ref=ad74fde62f4076eb1877a8c68d9b2e34990459b9", "patch": "@@ -12,7 +12,7 @@\n \n use cast::transmute;\n use option::{None, Option, Some};\n-use i32;\n+use iter::{Iterator, range_step};\n use str::StrSlice;\n use unicode::{derived_property, general_category, decompose};\n use to_str::ToStr;\n@@ -286,15 +286,14 @@ pub fn escape_unicode(c: char, f: &fn(char)) {\n         (c <= '\\uffff') { f('u'); 4 }\n         _               { f('U'); 8 }\n     );\n-    do i32::range_step(4 * (pad - 1), -1, -4) |offset| {\n+    for offset in range_step::<i32>(4 * (pad - 1), -1, -4) {\n         unsafe {\n             match ((c as i32) >> offset) & 0xf {\n                 i @ 0 .. 9 => { f(transmute('0' as i32 + i)); }\n                 i => { f(transmute('a' as i32 + (i - 10))); }\n             }\n         }\n-        true\n-    };\n+    }\n }\n \n ///"}, {"sha": "1330096ee36a6f59fa475f0cb1a4ba57e0cc1b82", "filename": "src/libstd/rand.rs", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ad74fde62f4076eb1877a8c68d9b2e34990459b9/src%2Flibstd%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad74fde62f4076eb1877a8c68d9b2e34990459b9/src%2Flibstd%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand.rs?ref=ad74fde62f4076eb1877a8c68d9b2e34990459b9", "patch": "@@ -48,7 +48,7 @@ use clone::Clone;\n use cmp;\n use container::Container;\n use int;\n-use iter::{Iterator, range};\n+use iter::{Iterator, range, range_step};\n use local_data;\n use num;\n use prelude::*;\n@@ -748,7 +748,7 @@ impl IsaacRng {\n         if use_rsl {\n             macro_rules! memloop (\n                 ($arr:expr) => {{\n-                    do u32::range_step(0, RAND_SIZE, 8) |i| {\n+                    for i in range_step(0u32, RAND_SIZE, 8) {\n                         a+=$arr[i  ]; b+=$arr[i+1];\n                         c+=$arr[i+2]; d+=$arr[i+3];\n                         e+=$arr[i+4]; f+=$arr[i+5];\n@@ -758,22 +758,20 @@ impl IsaacRng {\n                         self.mem[i+2]=c; self.mem[i+3]=d;\n                         self.mem[i+4]=e; self.mem[i+5]=f;\n                         self.mem[i+6]=g; self.mem[i+7]=h;\n-                        true\n-                    };\n+                    }\n                 }}\n             );\n \n             memloop!(self.rsl);\n             memloop!(self.mem);\n         } else {\n-            do u32::range_step(0, RAND_SIZE, 8) |i| {\n+            for i in range_step(0u32, RAND_SIZE, 8) {\n                 mix!();\n                 self.mem[i  ]=a; self.mem[i+1]=b;\n                 self.mem[i+2]=c; self.mem[i+3]=d;\n                 self.mem[i+4]=e; self.mem[i+5]=f;\n                 self.mem[i+6]=g; self.mem[i+7]=h;\n-                true\n-            };\n+            }\n         }\n \n         self.isaac();\n@@ -794,7 +792,7 @@ impl IsaacRng {\n         });\n         macro_rules! rngstep(\n             ($j:expr, $shift:expr) => {{\n-                let base = base + $j;\n+                let base = $j;\n                 let mix = if $shift < 0 {\n                     a >> -$shift as uint\n                 } else {\n@@ -813,13 +811,12 @@ impl IsaacRng {\n \n         let r = [(0, MIDPOINT), (MIDPOINT, 0)];\n         for &(mr_offset, m2_offset) in r.iter() {\n-            do uint::range_step(0, MIDPOINT, 4) |base| {\n-                rngstep!(0, 13);\n-                rngstep!(1, -6);\n-                rngstep!(2, 2);\n-                rngstep!(3, -16);\n-                true\n-            };\n+            for i in range_step(0u, MIDPOINT, 4) {\n+                rngstep!(i + 0, 13);\n+                rngstep!(i + 1, -6);\n+                rngstep!(i + 2, 2);\n+                rngstep!(i + 3, -16);\n+            }\n         }\n \n         self.a = a;"}, {"sha": "88a953a1601e92191fb9e251bd44c7900c4147b6", "filename": "src/libstd/trie.rs", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ad74fde62f4076eb1877a8c68d9b2e34990459b9/src%2Flibstd%2Ftrie.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad74fde62f4076eb1877a8c68d9b2e34990459b9/src%2Flibstd%2Ftrie.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftrie.rs?ref=ad74fde62f4076eb1877a8c68d9b2e34990459b9", "patch": "@@ -520,6 +520,7 @@ pub fn check_integrity<T>(trie: &TrieNode<T>) {\n mod test_map {\n     use super::*;\n     use prelude::*;\n+    use iter::range_step;\n     use uint;\n \n     #[test]\n@@ -538,41 +539,37 @@ mod test_map {\n     #[test]\n     fn test_step() {\n         let mut trie = TrieMap::new();\n-        let n = 300;\n+        let n = 300u;\n \n-        do uint::range_step(1, n, 2) |x| {\n+        for x in range_step(1u, n, 2) {\n             assert!(trie.insert(x, x + 1));\n             assert!(trie.contains_key(&x));\n             check_integrity(&trie.root);\n-            true\n-        };\n+        }\n \n-        do uint::range_step(0, n, 2) |x| {\n+        for x in range_step(0u, n, 2) {\n             assert!(!trie.contains_key(&x));\n             assert!(trie.insert(x, x + 1));\n             check_integrity(&trie.root);\n-            true\n-        };\n+        }\n \n         for x in range(0u, n) {\n             assert!(trie.contains_key(&x));\n             assert!(!trie.insert(x, x + 1));\n             check_integrity(&trie.root);\n         }\n \n-        do uint::range_step(1, n, 2) |x| {\n+        for x in range_step(1u, n, 2) {\n             assert!(trie.remove(&x));\n             assert!(!trie.contains_key(&x));\n             check_integrity(&trie.root);\n-            true\n-        };\n+        }\n \n-        do uint::range_step(0, n, 2) |x| {\n+        for x in range_step(0u, n, 2) {\n             assert!(trie.contains_key(&x));\n             assert!(!trie.insert(x, x + 1));\n             check_integrity(&trie.root);\n-            true\n-        };\n+        }\n     }\n \n     #[test]\n@@ -715,11 +712,10 @@ mod test_map {\n         let value = 42u;\n \n         let mut map : TrieMap<uint> = TrieMap::new();\n-        do uint::range_step(0u, last, step as int) |x| {\n+        for x in range_step(0u, last, step) {\n             assert!(x % step == 0);\n             map.insert(x, value);\n-            true\n-        };\n+        }\n \n         for i in range(0u, last - step) {\n             let mut lb = map.lower_bound_iter(i);"}, {"sha": "05b84c059c4b37788539b86cde4f3544e284126e", "filename": "src/test/run-pass/num-range-rev.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad74fde62f4076eb1877a8c68d9b2e34990459b9/src%2Ftest%2Frun-pass%2Fnum-range-rev.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad74fde62f4076eb1877a8c68d9b2e34990459b9/src%2Ftest%2Frun-pass%2Fnum-range-rev.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnum-range-rev.rs?ref=ad74fde62f4076eb1877a8c68d9b2e34990459b9", "patch": "@@ -28,11 +28,11 @@ fn int_range_rev(hi: int,  lo: int, it: &fn(int) -> bool) -> bool {\n }\n \n fn int_range_step(a: int, b: int, step: int, it: &fn(int) -> bool) -> bool {\n-    int::range_step(a, b, step, it)\n+    std::iter::range_step(a, b, step).advance(it)\n }\n \n fn uint_range_step(a: uint, b: uint, step: int, it: &fn(uint) -> bool) -> bool {\n-    uint::range_step(a, b, step, it)\n+    std::iter::range_step(a, b, step).advance(it)\n }\n \n "}, {"sha": "5f87d01719ec08f17e1760b1eea127e8bee212b7", "filename": "src/test/run-pass/num-range.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ad74fde62f4076eb1877a8c68d9b2e34990459b9/src%2Ftest%2Frun-pass%2Fnum-range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad74fde62f4076eb1877a8c68d9b2e34990459b9/src%2Ftest%2Frun-pass%2Fnum-range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnum-range.rs?ref=ad74fde62f4076eb1877a8c68d9b2e34990459b9", "patch": "@@ -20,11 +20,11 @@ fn int_range(lo: int, hi: int, it: &fn(int) -> bool) -> bool {\n }\n \n fn int_range_step(a: int, b: int, step: int, it: &fn(int) -> bool) -> bool {\n-    int::range_step(a, b, step, it)\n+    std::iter::range_step(a, b, step).advance(it)\n }\n \n fn uint_range_step(a: uint, b: uint, s: int, it: &fn(uint) -> bool) -> bool {\n-    uint::range_step(a, b, s, it)\n+    std::iter::range_step(a, b, s).advance(it)\n }\n \n pub fn main() {\n@@ -98,35 +98,31 @@ pub fn main() {\n \n     // range_step_inclusive will never pass stop element, and may skip it.\n     let mut saw21 = false;\n-    do uint::range_step_inclusive(0, 21, 4) |x| {\n+    for x in std::iter::range_step_inclusive(0, 21, 4) {\n         assert!(x <= 21);\n         if x == 21 { saw21 = true; }\n-        true\n-    };\n+    }\n     assert!(!saw21);\n     let mut saw21 = false;\n-    do int::range_step_inclusive(0, 21, 4) |x| {\n+    for x in std::iter::range_step_inclusive(0, 21, 4) {\n         assert!(x <= 21);\n         if x == 21 { saw21 = true; }\n-        true\n-    };\n+    }\n     assert!(!saw21);\n \n     // range_step_inclusive will never pass stop element, but may visit it.\n     let mut saw21 = false;\n-    do uint::range_step_inclusive(0, 21, 3) |x| {\n+    for x in std::iter::range_step_inclusive(0, 21, 3) {\n         assert!(x <= 21);\n         printfln!(\"saw: %u\", x);\n         if x == 21 { saw21 = true; }\n-        true\n-    };\n+    }\n     assert!(saw21);\n     let mut saw21 = false;\n-    do int::range_step_inclusive(0, 21, 3) |x| {\n+    for x in std::iter::range_step_inclusive(0, 21, 3) {\n         assert!(x <= 21);\n         if x == 21 { saw21 = true; }\n-        true\n-    };\n+    }\n     assert!(saw21);\n \n }"}]}