{"sha": "6e6300207f835c0a6c4dd0b6a4e55ab07d3d272b", "node_id": "C_kwDOAAsO6NoAKDZlNjMwMDIwN2Y4MzVjMGE2YzRkZDBiNmE0ZTU1YWIwN2QzZDI3MmI", "commit": {"author": {"name": "Lamb", "email": "contact@ltow.me", "date": "2021-07-26T03:38:16Z"}, "committer": {"name": "Lamb", "email": "lamb@ltow.me", "date": "2022-01-09T21:33:14Z"}, "message": "Compute most of Public/Exported access level in rustc_resolve\n\nMak DefId to AccessLevel map in resolve for export\n\nhir_id to accesslevel in resolve and applied in privacy\nusing local def id\nremoving tracing probes\nmaking function not recursive and adding comments\n\nMove most of Exported/Public res to rustc_resolve\n\nmoving public/export res to resolve\n\nfix missing stability attributes in core, std and alloc\n\nmove code to access_levels.rs\n\nreturn for some kinds instead of going through them\n\nExport correctness, macro changes, comments\n\nadd comment for import binding\n\nadd comment for import binding\n\nrenmae to access level visitor, remove comments, move fn as closure, remove new_key\n\nfmt\n\nfix rebase\n\nfix rebase\n\nfmt\n\nfmt\n\nfix: move macro def to rustc_resolve\n\nfix: reachable AccessLevel for enum variants\n\nfmt\n\nfix: missing stability attributes for other architectures\n\nallow unreachable pub in rustfmt\n\nfix: missing impl access level + renaming export to reexport\n\nMissing impl access level was found thanks to a test in clippy", "tree": {"sha": "985716d87715f3a673b1bd11a37e372ee95225dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/985716d87715f3a673b1bd11a37e372ee95225dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e6300207f835c0a6c4dd0b6a4e55ab07d3d272b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e6300207f835c0a6c4dd0b6a4e55ab07d3d272b", "html_url": "https://github.com/rust-lang/rust/commit/6e6300207f835c0a6c4dd0b6a4e55ab07d3d272b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e6300207f835c0a6c4dd0b6a4e55ab07d3d272b/comments", "author": {"login": "lambinoo", "id": 57440804, "node_id": "MDQ6VXNlcjU3NDQwODA0", "avatar_url": "https://avatars.githubusercontent.com/u/57440804?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lambinoo", "html_url": "https://github.com/lambinoo", "followers_url": "https://api.github.com/users/lambinoo/followers", "following_url": "https://api.github.com/users/lambinoo/following{/other_user}", "gists_url": "https://api.github.com/users/lambinoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/lambinoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lambinoo/subscriptions", "organizations_url": "https://api.github.com/users/lambinoo/orgs", "repos_url": "https://api.github.com/users/lambinoo/repos", "events_url": "https://api.github.com/users/lambinoo/events{/privacy}", "received_events_url": "https://api.github.com/users/lambinoo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6db6bafc61b6f4f782c5f10e8dbe3f006c41fc5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6db6bafc61b6f4f782c5f10e8dbe3f006c41fc5d", "html_url": "https://github.com/rust-lang/rust/commit/6db6bafc61b6f4f782c5f10e8dbe3f006c41fc5d"}], "stats": {"total": 1, "additions": 1, "deletions": 0}, "files": [{"sha": "fae8080c02e413c09f12a7adf91076022448a5c9", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6e6300207f835c0a6c4dd0b6a4e55ab07d3d272b/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e6300207f835c0a6c4dd0b6a4e55ab07d3d272b/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=6e6300207f835c0a6c4dd0b6a4e55ab07d3d272b", "patch": "@@ -3,6 +3,7 @@\n #![warn(unreachable_pub)]\n #![recursion_limit = \"256\"]\n #![allow(clippy::match_like_matches_macro)]\n+#![allow(unreachable_pub)]\n \n #[macro_use]\n extern crate derive_new;"}]}