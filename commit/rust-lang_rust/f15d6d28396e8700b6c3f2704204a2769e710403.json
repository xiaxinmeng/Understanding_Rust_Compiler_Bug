{"sha": "f15d6d28396e8700b6c3f2704204a2769e710403", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxNWQ2ZDI4Mzk2ZTg3MDBiNmMzZjI3MDQyMDRhMjc2OWU3MTA0MDM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-20T22:46:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-20T22:46:29Z"}, "message": "auto merge of #15810 : SimonSapin/rust/base64-from-bytes, r=alexcrichton\n\nThe algorithm was already based on bytes internally.\r\n\r\nAlso use byte literals instead of casting u8 to char for matching.\r\n\r\n[breaking-change] The `InvalidBase64Character` variant of the `FromBase64Error` enum was renamed to `InvalidBase64Byte`, and contains a `u8` instead of a `char`.\r\n\r\nr? @alexcrichton", "tree": {"sha": "91051be4a239176fe7dd8beddac70091b35477dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91051be4a239176fe7dd8beddac70091b35477dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f15d6d28396e8700b6c3f2704204a2769e710403", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f15d6d28396e8700b6c3f2704204a2769e710403", "html_url": "https://github.com/rust-lang/rust/commit/f15d6d28396e8700b6c3f2704204a2769e710403", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f15d6d28396e8700b6c3f2704204a2769e710403/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8748a69e6cf6d6e922ddf07bd9ef69a67ebc83b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/8748a69e6cf6d6e922ddf07bd9ef69a67ebc83b6", "html_url": "https://github.com/rust-lang/rust/commit/8748a69e6cf6d6e922ddf07bd9ef69a67ebc83b6"}, {"sha": "56218f5dfc3677be77bb52c0d298da2b12de99d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/56218f5dfc3677be77bb52c0d298da2b12de99d3", "html_url": "https://github.com/rust-lang/rust/commit/56218f5dfc3677be77bb52c0d298da2b12de99d3"}], "stats": {"total": 46, "additions": 29, "deletions": 17}, "files": [{"sha": "79c1d6554113f1b665e6c7e381c582f4aaf30d7d", "filename": "src/libserialize/base64.rs", "status": "modified", "additions": 29, "deletions": 17, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/f15d6d28396e8700b6c3f2704204a2769e710403/src%2Flibserialize%2Fbase64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f15d6d28396e8700b6c3f2704204a2769e710403/src%2Flibserialize%2Fbase64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fbase64.rs?ref=f15d6d28396e8700b6c3f2704204a2769e710403", "patch": "@@ -161,15 +161,15 @@ pub trait FromBase64 {\n /// Errors that can occur when decoding a base64 encoded string\n pub enum FromBase64Error {\n     /// The input contained a character not part of the base64 format\n-    InvalidBase64Character(char, uint),\n+    InvalidBase64Byte(u8, uint),\n     /// The input had an invalid length\n     InvalidBase64Length,\n }\n \n impl fmt::Show for FromBase64Error {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n-            InvalidBase64Character(ch, idx) =>\n+            InvalidBase64Byte(ch, idx) =>\n                 write!(f, \"Invalid character '{}' at position {}\", ch, idx),\n             InvalidBase64Length => write!(f, \"Invalid length\"),\n         }\n@@ -205,24 +205,31 @@ impl<'a> FromBase64 for &'a str {\n      * }\n      * ```\n      */\n+    #[inline]\n+    fn from_base64(&self) -> Result<Vec<u8>, FromBase64Error> {\n+        self.as_bytes().from_base64()\n+    }\n+}\n+\n+impl<'a> FromBase64 for &'a [u8] {\n     fn from_base64(&self) -> Result<Vec<u8>, FromBase64Error> {\n         let mut r = Vec::new();\n         let mut buf: u32 = 0;\n         let mut modulus = 0i;\n \n-        let mut it = self.bytes().enumerate();\n-        for (idx, byte) in it {\n+        let mut it = self.iter().enumerate();\n+        for (idx, &byte) in it {\n             let val = byte as u32;\n \n-            match byte as char {\n-                'A'..'Z' => buf |= val - 0x41,\n-                'a'..'z' => buf |= val - 0x47,\n-                '0'..'9' => buf |= val + 0x04,\n-                '+'|'-' => buf |= 0x3E,\n-                '/'|'_' => buf |= 0x3F,\n-                '\\r'|'\\n' => continue,\n-                '=' => break,\n-                _ => return Err(InvalidBase64Character(self.char_at(idx), idx)),\n+            match byte {\n+                b'A'..b'Z' => buf |= val - 0x41,\n+                b'a'..b'z' => buf |= val - 0x47,\n+                b'0'..b'9' => buf |= val + 0x04,\n+                b'+' | b'-' => buf |= 0x3E,\n+                b'/' | b'_' => buf |= 0x3F,\n+                b'\\r' | b'\\n' => continue,\n+                b'=' => break,\n+                _ => return Err(InvalidBase64Byte(self[idx], idx)),\n             }\n \n             buf <<= 6;\n@@ -235,10 +242,10 @@ impl<'a> FromBase64 for &'a str {\n             }\n         }\n \n-        for (idx, byte) in it {\n-            match byte as char {\n-                '='|'\\r'|'\\n' => continue,\n-                _ => return Err(InvalidBase64Character(self.char_at(idx), idx)),\n+        for (idx, &byte) in it {\n+            match byte {\n+                b'=' | b'\\r' | b'\\n' => continue,\n+                _ => return Err(InvalidBase64Byte(self[idx], idx)),\n             }\n         }\n \n@@ -308,6 +315,11 @@ mod tests {\n         assert_eq!(\"Zm9vYmFy\".from_base64().unwrap().as_slice(), \"foobar\".as_bytes());\n     }\n \n+    #[test]\n+    fn test_from_base64_bytes() {\n+        assert_eq!(b\"Zm9vYmFy\".from_base64().unwrap().as_slice(), \"foobar\".as_bytes());\n+    }\n+\n     #[test]\n     fn test_from_base64_newlines() {\n         assert_eq!(\"Zm9v\\r\\nYmFy\".from_base64().unwrap().as_slice(),"}]}