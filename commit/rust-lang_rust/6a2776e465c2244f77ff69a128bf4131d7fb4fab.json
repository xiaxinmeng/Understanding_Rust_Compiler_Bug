{"sha": "6a2776e465c2244f77ff69a128bf4131d7fb4fab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhMjc3NmU0NjVjMjI0NGY3N2ZmNjlhMTI4YmY0MTMxZDdmYjRmYWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-11T13:37:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-11T13:37:05Z"}, "message": "Auto merge of #983 - christianpoveda:fs-shims-tweaks, r=RalfJung\n\nVarious fixes to the file related shims\n\nHi @RalfJung, I'll be working incrementally over your comments for the new `fs` shims module here.", "tree": {"sha": "0ea4772074c5f2b397c53983d4d548916fc02e9c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ea4772074c5f2b397c53983d4d548916fc02e9c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a2776e465c2244f77ff69a128bf4131d7fb4fab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a2776e465c2244f77ff69a128bf4131d7fb4fab", "html_url": "https://github.com/rust-lang/rust/commit/6a2776e465c2244f77ff69a128bf4131d7fb4fab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a2776e465c2244f77ff69a128bf4131d7fb4fab/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e10d9d32d79aaf5860d6f90dd6ba26a1cce8c6b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/e10d9d32d79aaf5860d6f90dd6ba26a1cce8c6b0", "html_url": "https://github.com/rust-lang/rust/commit/e10d9d32d79aaf5860d6f90dd6ba26a1cce8c6b0"}, {"sha": "003b257f87b94921594a46b4e0ad4dc22bb4cf4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/003b257f87b94921594a46b4e0ad4dc22bb4cf4d", "html_url": "https://github.com/rust-lang/rust/commit/003b257f87b94921594a46b4e0ad4dc22bb4cf4d"}], "stats": {"total": 73, "additions": 42, "deletions": 31}, "files": [{"sha": "c7b7853388cc543e4f871a1c8f9f87859c6abe86", "filename": "src/helpers.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6a2776e465c2244f77ff69a128bf4131d7fb4fab/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2776e465c2244f77ff69a128bf4131d7fb4fab/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=6a2776e465c2244f77ff69a128bf4131d7fb4fab", "patch": "@@ -291,4 +291,17 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n         }\n     }\n+\n+    /// Helper function to get a `libc` constant as a `Scalar`.\n+    fn eval_libc(&mut self, name: &str) -> InterpResult<'tcx, Scalar<Tag>> {\n+        self.eval_context_mut()\n+            .eval_path_scalar(&[\"libc\", name])?\n+            .ok_or_else(|| err_unsup_format!(\"Path libc::{} cannot be resolved.\", name))?\n+            .not_undef()\n+    }\n+\n+    /// Helper function to get a `libc` constant as an `i32`.\n+    fn eval_libc_i32(&mut self, name: &str) -> InterpResult<'tcx, i32> {\n+        self.eval_libc(name)?.to_i32()\n+    }\n }"}, {"sha": "baae26d91adaa5ab6ab3c88d9b0fda2467ff7a4d", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a2776e465c2244f77ff69a128bf4131d7fb4fab/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2776e465c2244f77ff69a128bf4131d7fb4fab/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=6a2776e465c2244f77ff69a128bf4131d7fb4fab", "patch": "@@ -34,7 +34,7 @@ pub use crate::shims::intrinsics::EvalContextExt as IntrinsicsEvalContextExt;\n pub use crate::shims::tls::{EvalContextExt as TlsEvalContextExt, TlsData};\n pub use crate::shims::dlsym::{Dlsym, EvalContextExt as DlsymEvalContextExt};\n pub use crate::shims::env::{EnvVars, EvalContextExt as EnvEvalContextExt};\n-pub use crate::shims::io::{FileHandler, EvalContextExt as FileEvalContextExt};\n+pub use crate::shims::fs::{FileHandler, EvalContextExt as FileEvalContextExt};\n pub use crate::operator::EvalContextExt as OperatorEvalContextExt;\n pub use crate::range_map::RangeMap;\n pub use crate::helpers::{EvalContextExt as HelpersEvalContextExt};"}, {"sha": "2ccbc0238e5f90f828ada61665dc18fdabeb0788", "filename": "src/shims/env.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6a2776e465c2244f77ff69a128bf4131d7fb4fab/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2776e465c2244f77ff69a128bf4131d7fb4fab/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=6a2776e465c2244f77ff69a128bf4131d7fb4fab", "patch": "@@ -127,17 +127,21 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let tcx = &{ this.tcx.tcx };\n \n         let buf = this.force_ptr(this.read_scalar(buf_op)?.not_undef()?)?;\n-        let size = this.read_scalar(size_op)?.to_usize(&*this.tcx)?;\n+        let size = this.read_scalar(size_op)?.to_usize(&*tcx)?;\n         // If we cannot get the current directory, we return null\n         match env::current_dir() {\n             Ok(cwd) => {\n                 // It is not clear what happens with non-utf8 paths here\n                 let mut bytes = cwd.display().to_string().into_bytes();\n-                // If the buffer is smaller or equal than the path, we return null.\n+                // If `size` is smaller or equal than the `bytes.len()`, writing `bytes` plus the\n+                // required null terminator to memory using the `buf` pointer would cause an\n+                // overflow. The desired behavior in this case is to return null.\n                 if (bytes.len() as u64) < size {\n                     // We add a `/0` terminator\n                     bytes.push(0);\n-                    // This is ok because the buffer is larger than the path with the null terminator.\n+                    // This is ok because the buffer was strictly larger than `bytes`, so after\n+                    // adding the null terminator, the buffer size is larger or equal to\n+                    // `bytes.len()`, meaning that `bytes` actually fit inside tbe buffer.\n                     this.memory_mut()\n                         .get_mut(buf.alloc_id)?\n                         .write_bytes(tcx, buf, &bytes)?;\n@@ -148,7 +152,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n             Err(e) => this.consume_io_error(e)?,\n         }\n-        Ok(Scalar::ptr_null(&*this.tcx))\n+        Ok(Scalar::ptr_null(&*tcx))\n     }\n \n     fn chdir(&mut self, path_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {"}, {"sha": "00160156312a8dfa06ef7c6726287874222d050a", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6a2776e465c2244f77ff69a128bf4131d7fb4fab/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2776e465c2244f77ff69a128bf4131d7fb4fab/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=6a2776e465c2244f77ff69a128bf4131d7fb4fab", "patch": "@@ -981,17 +981,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         return Ok(None);\n     }\n \n-    fn eval_libc(&mut self, name: &str) -> InterpResult<'tcx, Scalar<Tag>> {\n-        self.eval_context_mut()\n-            .eval_path_scalar(&[\"libc\", name])?\n-            .ok_or_else(|| err_unsup_format!(\"Path libc::{} cannot be resolved.\", name).into())\n-            .and_then(|scalar| scalar.not_undef())\n-    }\n-\n-    fn eval_libc_i32(&mut self, name: &str) -> InterpResult<'tcx, i32> {\n-        self.eval_libc(name).and_then(|scalar| scalar.to_i32())\n-    }\n-\n     fn set_last_error(&mut self, scalar: Scalar<Tag>) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n         let tcx = &{ this.tcx.tcx };"}, {"sha": "7e684489b5c9c8f361acffc13dfdf8ecb366ad78", "filename": "src/shims/fs.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a2776e465c2244f77ff69a128bf4131d7fb4fab/src%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2776e465c2244f77ff69a128bf4131d7fb4fab/src%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ffs.rs?ref=6a2776e465c2244f77ff69a128bf4131d7fb4fab", "patch": "@@ -107,6 +107,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             if let Some(FileHandle { flag: old_flag, .. }) =\n                 this.machine.file_handler.handles.get_mut(&fd)\n             {\n+                // Check that the only difference between the old flag and the current flag is\n+                // exactly the `FD_CLOEXEC` value.\n                 if flag ^ *old_flag == fd_cloexec {\n                     *old_flag = flag;\n                 } else {", "previous_filename": "src/shims/io.rs"}, {"sha": "6d80af46850ca4bd74c1fa6ae16b65eaf5855407", "filename": "src/shims/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a2776e465c2244f77ff69a128bf4131d7fb4fab/src%2Fshims%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2776e465c2244f77ff69a128bf4131d7fb4fab/src%2Fshims%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fmod.rs?ref=6a2776e465c2244f77ff69a128bf4131d7fb4fab", "patch": "@@ -3,7 +3,7 @@ pub mod env;\n pub mod foreign_items;\n pub mod intrinsics;\n pub mod tls;\n-pub mod io;\n+pub mod fs;\n \n use rustc::{mir, ty};\n "}, {"sha": "fa8220339db063a775e46776d8754fbb1382040c", "filename": "tests/run-pass/change_current_dir.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e10d9d32d79aaf5860d6f90dd6ba26a1cce8c6b0/tests%2Frun-pass%2Fchange_current_dir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e10d9d32d79aaf5860d6f90dd6ba26a1cce8c6b0/tests%2Frun-pass%2Fchange_current_dir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fchange_current_dir.rs?ref=e10d9d32d79aaf5860d6f90dd6ba26a1cce8c6b0", "patch": "@@ -1,14 +0,0 @@\n-// ignore-windows: TODO the windows hook is not done yet\n-// compile-flags: -Zmiri-disable-isolation\n-use std::env;\n-use std::path::Path;\n-\n-fn main() {\n-    // test that `getcwd` is available\n-    let cwd = env::current_dir().unwrap();\n-    let parent = cwd.parent().unwrap_or(&cwd);\n-    // test that `chdir` is available\n-    assert!(env::set_current_dir(&Path::new(\"..\")).is_ok());\n-    // test that `..` goes to the parent directory\n-    assert_eq!(env::current_dir().unwrap(), parent);\n-}"}, {"sha": "5e896659c85ee3b852380900dad52b9bdc004418", "filename": "tests/run-pass/current_dir.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6a2776e465c2244f77ff69a128bf4131d7fb4fab/tests%2Frun-pass%2Fcurrent_dir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2776e465c2244f77ff69a128bf4131d7fb4fab/tests%2Frun-pass%2Fcurrent_dir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fcurrent_dir.rs?ref=6a2776e465c2244f77ff69a128bf4131d7fb4fab", "patch": "@@ -0,0 +1,17 @@\n+// ignore-windows: TODO the windows hook is not done yet\n+// compile-flags: -Zmiri-disable-isolation\n+use std::env;\n+use std::path::Path;\n+\n+fn main() {\n+    // Test that `getcwd` is available\n+    let cwd = env::current_dir().unwrap();\n+    // Test that changing dir to `..` actually sets the current directory to the parent of `cwd`.\n+    // The only exception here is if `cwd` is the root directory, then changing directory must\n+    // keep the current directory equal to `cwd`.\n+    let parent = cwd.parent().unwrap_or(&cwd);\n+    // Test that `chdir` is available\n+    assert!(env::set_current_dir(&Path::new(\"..\")).is_ok());\n+    // Test that `..` goes to the parent directory\n+    assert_eq!(env::current_dir().unwrap(), parent);\n+}"}]}