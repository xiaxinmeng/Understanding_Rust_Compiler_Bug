{"sha": "55dce720b24fde5d8489498fb5f7abd8c52c28f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1ZGNlNzIwYjI0ZmRlNWQ4NDg5NDk4ZmI1ZjdhYmQ4YzUyYzI4ZjM=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-01-23T23:21:15Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-01-24T01:04:09Z"}, "message": "Account for `ty::Error` when suggesting `impl Trait` or `Box<dyn Trait>`", "tree": {"sha": "a6fa0dc8b204bf592eca093d66a978b2a051e47c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6fa0dc8b204bf592eca093d66a978b2a051e47c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55dce720b24fde5d8489498fb5f7abd8c52c28f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55dce720b24fde5d8489498fb5f7abd8c52c28f3", "html_url": "https://github.com/rust-lang/rust/commit/55dce720b24fde5d8489498fb5f7abd8c52c28f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55dce720b24fde5d8489498fb5f7abd8c52c28f3/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0bbe7915e2b663ac84244918d6d06e0747ed33e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0bbe7915e2b663ac84244918d6d06e0747ed33e", "html_url": "https://github.com/rust-lang/rust/commit/e0bbe7915e2b663ac84244918d6d06e0747ed33e"}], "stats": {"total": 199, "additions": 191, "deletions": 8}, "files": [{"sha": "12c8de17d10f9426af6062e867c5049eeed3836a", "filename": "src/librustc/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/55dce720b24fde5d8489498fb5f7abd8c52c28f3/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55dce720b24fde5d8489498fb5f7abd8c52c28f3/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=55dce720b24fde5d8489498fb5f7abd8c52c28f3", "patch": "@@ -606,11 +606,13 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         let tables = self.in_progress_tables.map(|t| t.borrow()).unwrap();\n \n         let mut ret_types = visitor.0.iter().filter_map(|expr| tables.node_type_opt(expr.hir_id));\n-        let (last_ty, all_returns_have_same_type) =\n-            ret_types.clone().fold((None, true), |(last_ty, mut same), returned_ty| {\n-                same &= last_ty.map_or(true, |ty| ty == returned_ty);\n-                (Some(returned_ty), same)\n-            });\n+        let (last_ty, all_returns_have_same_type) = ret_types.clone().fold(\n+            (None, true),\n+            |(last_ty, mut same): (std::option::Option<Ty<'_>>, bool), ty| {\n+                same &= last_ty.map_or(true, |last_ty| last_ty == ty) && ty.kind != ty::Error;\n+                (Some(ty), same)\n+            },\n+        );\n         let all_returns_conform_to_trait =\n             if let Some(ty_ret_ty) = tables.node_type_opt(ret_ty.hir_id) {\n                 match ty_ret_ty.kind {\n@@ -625,7 +627,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                             })\n                         })\n                     }\n-                    _ => true,\n+                    _ => false,\n                 }\n             } else {\n                 true"}, {"sha": "93414379fd41a31379609c5ff4a34c34482ed5a4", "filename": "src/test/ui/impl-trait/dyn-trait-return-should-be-impl-trait.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/55dce720b24fde5d8489498fb5f7abd8c52c28f3/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-return-should-be-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55dce720b24fde5d8489498fb5f7abd8c52c28f3/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-return-should-be-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-return-should-be-impl-trait.rs?ref=55dce720b24fde5d8489498fb5f7abd8c52c28f3", "patch": "@@ -22,6 +22,32 @@ fn bal() -> dyn Trait { //~ ERROR E0746\n     }\n     42\n }\n+fn bam() -> Box<dyn Trait> {\n+    if true {\n+        return Struct; //~ ERROR mismatched types\n+    }\n+    42 //~ ERROR mismatched types\n+}\n+fn baq() -> Box<dyn Trait> {\n+    if true {\n+        return 0; //~ ERROR mismatched types\n+    }\n+    42 //~ ERROR mismatched types\n+}\n+fn baz() -> Box<dyn Trait> {\n+    if true {\n+        Struct //~ ERROR mismatched types\n+    } else {\n+        42 //~ ERROR mismatched types\n+    }\n+}\n+fn baw() -> Box<dyn Trait> {\n+    if true {\n+        0 //~ ERROR mismatched types\n+    } else {\n+        42 //~ ERROR mismatched types\n+    }\n+}\n \n // Suggest using `impl Trait`\n fn bat() -> dyn Trait { //~ ERROR E0746\n@@ -30,5 +56,12 @@ fn bat() -> dyn Trait { //~ ERROR E0746\n     }\n     42\n }\n+fn bay() -> dyn Trait { //~ ERROR E0746\n+    if true {\n+        0u32\n+    } else {\n+        42u32\n+    }\n+}\n \n fn main() {}"}, {"sha": "0df6e8f8dc77cd481680250b64a3a0850e50113c", "filename": "src/test/ui/impl-trait/dyn-trait-return-should-be-impl-trait.stderr", "status": "modified", "additions": 150, "deletions": 2, "changes": 152, "blob_url": "https://github.com/rust-lang/rust/blob/55dce720b24fde5d8489498fb5f7abd8c52c28f3/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-return-should-be-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55dce720b24fde5d8489498fb5f7abd8c52c28f3/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-return-should-be-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-return-should-be-impl-trait.stderr?ref=55dce720b24fde5d8489498fb5f7abd8c52c28f3", "patch": "@@ -95,8 +95,136 @@ LL |     }\n LL |     Box::new(42)\n    |\n \n+error[E0308]: mismatched types\n+  --> $DIR/dyn-trait-return-should-be-impl-trait.rs:27:16\n+   |\n+LL | fn bam() -> Box<dyn Trait> {\n+   |             -------------- expected `std::boxed::Box<(dyn Trait + 'static)>` because of return type\n+LL |     if true {\n+LL |         return Struct;\n+   |                ^^^^^^\n+   |                |\n+   |                expected struct `std::boxed::Box`, found struct `Struct`\n+   |                help: store this in the heap by calling `Box::new`: `Box::new(Struct)`\n+   |\n+   = note: expected struct `std::boxed::Box<(dyn Trait + 'static)>`\n+              found struct `Struct`\n+   = note: for more on the distinction between the stack and the heap, read https://doc.rust-lang.org/book/ch15-01-box.html, https://doc.rust-lang.org/rust-by-example/std/box.html, and https://doc.rust-lang.org/std/boxed/index.html\n+\n+error[E0308]: mismatched types\n+  --> $DIR/dyn-trait-return-should-be-impl-trait.rs:29:5\n+   |\n+LL | fn bam() -> Box<dyn Trait> {\n+   |             -------------- expected `std::boxed::Box<(dyn Trait + 'static)>` because of return type\n+...\n+LL |     42\n+   |     ^^\n+   |     |\n+   |     expected struct `std::boxed::Box`, found integer\n+   |     help: store this in the heap by calling `Box::new`: `Box::new(42)`\n+   |\n+   = note: expected struct `std::boxed::Box<(dyn Trait + 'static)>`\n+                found type `{integer}`\n+   = note: for more on the distinction between the stack and the heap, read https://doc.rust-lang.org/book/ch15-01-box.html, https://doc.rust-lang.org/rust-by-example/std/box.html, and https://doc.rust-lang.org/std/boxed/index.html\n+\n+error[E0308]: mismatched types\n+  --> $DIR/dyn-trait-return-should-be-impl-trait.rs:33:16\n+   |\n+LL | fn baq() -> Box<dyn Trait> {\n+   |             -------------- expected `std::boxed::Box<(dyn Trait + 'static)>` because of return type\n+LL |     if true {\n+LL |         return 0;\n+   |                ^\n+   |                |\n+   |                expected struct `std::boxed::Box`, found integer\n+   |                help: store this in the heap by calling `Box::new`: `Box::new(0)`\n+   |\n+   = note: expected struct `std::boxed::Box<(dyn Trait + 'static)>`\n+                found type `{integer}`\n+   = note: for more on the distinction between the stack and the heap, read https://doc.rust-lang.org/book/ch15-01-box.html, https://doc.rust-lang.org/rust-by-example/std/box.html, and https://doc.rust-lang.org/std/boxed/index.html\n+\n+error[E0308]: mismatched types\n+  --> $DIR/dyn-trait-return-should-be-impl-trait.rs:35:5\n+   |\n+LL | fn baq() -> Box<dyn Trait> {\n+   |             -------------- expected `std::boxed::Box<(dyn Trait + 'static)>` because of return type\n+...\n+LL |     42\n+   |     ^^\n+   |     |\n+   |     expected struct `std::boxed::Box`, found integer\n+   |     help: store this in the heap by calling `Box::new`: `Box::new(42)`\n+   |\n+   = note: expected struct `std::boxed::Box<(dyn Trait + 'static)>`\n+                found type `{integer}`\n+   = note: for more on the distinction between the stack and the heap, read https://doc.rust-lang.org/book/ch15-01-box.html, https://doc.rust-lang.org/rust-by-example/std/box.html, and https://doc.rust-lang.org/std/boxed/index.html\n+\n+error[E0308]: mismatched types\n+  --> $DIR/dyn-trait-return-should-be-impl-trait.rs:39:9\n+   |\n+LL | fn baz() -> Box<dyn Trait> {\n+   |             -------------- expected `std::boxed::Box<(dyn Trait + 'static)>` because of return type\n+LL |     if true {\n+LL |         Struct\n+   |         ^^^^^^\n+   |         |\n+   |         expected struct `std::boxed::Box`, found struct `Struct`\n+   |         help: store this in the heap by calling `Box::new`: `Box::new(Struct)`\n+   |\n+   = note: expected struct `std::boxed::Box<(dyn Trait + 'static)>`\n+              found struct `Struct`\n+   = note: for more on the distinction between the stack and the heap, read https://doc.rust-lang.org/book/ch15-01-box.html, https://doc.rust-lang.org/rust-by-example/std/box.html, and https://doc.rust-lang.org/std/boxed/index.html\n+\n+error[E0308]: mismatched types\n+  --> $DIR/dyn-trait-return-should-be-impl-trait.rs:41:9\n+   |\n+LL | fn baz() -> Box<dyn Trait> {\n+   |             -------------- expected `std::boxed::Box<(dyn Trait + 'static)>` because of return type\n+...\n+LL |         42\n+   |         ^^\n+   |         |\n+   |         expected struct `std::boxed::Box`, found integer\n+   |         help: store this in the heap by calling `Box::new`: `Box::new(42)`\n+   |\n+   = note: expected struct `std::boxed::Box<(dyn Trait + 'static)>`\n+                found type `{integer}`\n+   = note: for more on the distinction between the stack and the heap, read https://doc.rust-lang.org/book/ch15-01-box.html, https://doc.rust-lang.org/rust-by-example/std/box.html, and https://doc.rust-lang.org/std/boxed/index.html\n+\n+error[E0308]: mismatched types\n+  --> $DIR/dyn-trait-return-should-be-impl-trait.rs:46:9\n+   |\n+LL | fn baw() -> Box<dyn Trait> {\n+   |             -------------- expected `std::boxed::Box<(dyn Trait + 'static)>` because of return type\n+LL |     if true {\n+LL |         0\n+   |         ^\n+   |         |\n+   |         expected struct `std::boxed::Box`, found integer\n+   |         help: store this in the heap by calling `Box::new`: `Box::new(0)`\n+   |\n+   = note: expected struct `std::boxed::Box<(dyn Trait + 'static)>`\n+                found type `{integer}`\n+   = note: for more on the distinction between the stack and the heap, read https://doc.rust-lang.org/book/ch15-01-box.html, https://doc.rust-lang.org/rust-by-example/std/box.html, and https://doc.rust-lang.org/std/boxed/index.html\n+\n+error[E0308]: mismatched types\n+  --> $DIR/dyn-trait-return-should-be-impl-trait.rs:48:9\n+   |\n+LL | fn baw() -> Box<dyn Trait> {\n+   |             -------------- expected `std::boxed::Box<(dyn Trait + 'static)>` because of return type\n+...\n+LL |         42\n+   |         ^^\n+   |         |\n+   |         expected struct `std::boxed::Box`, found integer\n+   |         help: store this in the heap by calling `Box::new`: `Box::new(42)`\n+   |\n+   = note: expected struct `std::boxed::Box<(dyn Trait + 'static)>`\n+                found type `{integer}`\n+   = note: for more on the distinction between the stack and the heap, read https://doc.rust-lang.org/book/ch15-01-box.html, https://doc.rust-lang.org/rust-by-example/std/box.html, and https://doc.rust-lang.org/std/boxed/index.html\n+\n error[E0746]: return type cannot have an unboxed trait object\n-  --> $DIR/dyn-trait-return-should-be-impl-trait.rs:27:13\n+  --> $DIR/dyn-trait-return-should-be-impl-trait.rs:53:13\n    |\n LL | fn bat() -> dyn Trait {\n    |             ^^^^^^^^^ doesn't have a size known at compile-time\n@@ -107,7 +235,27 @@ help: return `impl Trait` instead, as all return paths are of type `{integer}`,\n LL | fn bat() -> impl Trait {\n    |             ^^^^^^^^^^\n \n-error: aborting due to 9 previous errors\n+error[E0746]: return type cannot have an unboxed trait object\n+  --> $DIR/dyn-trait-return-should-be-impl-trait.rs:59:13\n+   |\n+LL | fn bay() -> dyn Trait {\n+   |             ^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = note: for information on trait objects, see <https://doc.rust-lang.org/book/ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types>\n+   = note: if all the returned values were of the same type you could use `impl Trait` as the return type\n+   = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n+   = note: you can create a new `enum` with a variant for each returned type\n+help: return a boxed trait object instead\n+   |\n+LL | fn bay() -> Box<dyn Trait> {\n+LL |     Box::new(if true {\n+LL |         0u32\n+LL |     } else {\n+LL |         42u32\n+LL |     })\n+   |\n+\n+error: aborting due to 18 previous errors\n \n Some errors have detailed explanations: E0277, E0308, E0746.\n For more information about an error, try `rustc --explain E0277`."}]}