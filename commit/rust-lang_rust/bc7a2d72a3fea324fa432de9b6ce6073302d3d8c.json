{"sha": "bc7a2d72a3fea324fa432de9b6ce6073302d3d8c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjN2EyZDcyYTNmZWEzMjRmYTQzMmRlOWI2Y2U2MDczMzAyZDNkOGM=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-03-25T05:13:11Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-04-01T09:46:10Z"}, "message": "rand: bubble up IO messages futher.\n\nThe various ...Rng::new() methods can hit IO errors from the OSRng they use,\nand it seems sensible to expose them at a higher level. Unfortunately, writing\ne.g. `StdRng::new().unwrap()` gives a much poorer error message than if it\nfailed internally, but this is a problem with all `IoResult`s.", "tree": {"sha": "5291b4abea25c42302facd2cf2387003060ae376", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5291b4abea25c42302facd2cf2387003060ae376"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc7a2d72a3fea324fa432de9b6ce6073302d3d8c", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc7a2d72a3fea324fa432de9b6ce6073302d3d8c", "html_url": "https://github.com/rust-lang/rust/commit/bc7a2d72a3fea324fa432de9b6ce6073302d3d8c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc7a2d72a3fea324fa432de9b6ce6073302d3d8c/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e8c949786539375ccb6ebe4af968c7cf5cebe43", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e8c949786539375ccb6ebe4af968c7cf5cebe43", "html_url": "https://github.com/rust-lang/rust/commit/0e8c949786539375ccb6ebe4af968c7cf5cebe43"}], "stats": {"total": 179, "additions": 102, "deletions": 77}, "files": [{"sha": "6fd525bac2ecdd65f0c65a0e8c3d0f61a8b35780", "filename": "src/libcollections/deque.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc7a2d72a3fea324fa432de9b6ce6073302d3d8c/src%2Flibcollections%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7a2d72a3fea324fa432de9b6ce6073302d3d8c/src%2Flibcollections%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fdeque.rs?ref=bc7a2d72a3fea324fa432de9b6ce6073302d3d8c", "patch": "@@ -52,7 +52,7 @@ pub mod bench {\n                                                   map: &mut M,\n                                                   bh: &mut BenchHarness) {\n         // setup\n-        let mut rng = rand::XorShiftRng::new();\n+        let mut rng = rand::weak_rng();\n \n         map.clear();\n         for _ in range(0, n) {\n@@ -89,7 +89,7 @@ pub mod bench {\n                                                 map: &mut M,\n                                                 bh: &mut BenchHarness) {\n         // setup\n-        let mut rng = rand::XorShiftRng::new();\n+        let mut rng = rand::weak_rng();\n         let mut keys = slice::from_fn(n, |_| rng.gen::<uint>() % n);\n \n         for k in keys.iter() {"}, {"sha": "c38d136e9395a0fc8bf3227115e2234e81a03921", "filename": "src/libgreen/sched.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bc7a2d72a3fea324fa432de9b6ce6073302d3d8c/src%2Flibgreen%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7a2d72a3fea324fa432de9b6ce6073302d3d8c/src%2Flibgreen%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fsched.rs?ref=bc7a2d72a3fea324fa432de9b6ce6073302d3d8c", "patch": "@@ -966,7 +966,12 @@ impl ClosureConverter for UnsafeTaskReceiver {\n // worry there.\n #[cfg(windows)]\n fn new_sched_rng() -> XorShiftRng {\n-    XorShiftRng::new()\n+    match XorShiftRng::new() {\n+        Ok(r) => r,\n+        Err(e) => {\n+            rtabort!(\"sched: failed to create seeded RNG: {}\", e)\n+        }\n+    }\n }\n #[cfg(unix)]\n fn new_sched_rng() -> XorShiftRng {"}, {"sha": "889c83b28c263dd1776d725ac1a665be809316ab", "filename": "src/librand/distributions/exponential.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc7a2d72a3fea324fa432de9b6ce6073302d3d8c/src%2Flibrand%2Fdistributions%2Fexponential.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7a2d72a3fea324fa432de9b6ce6073302d3d8c/src%2Flibrand%2Fdistributions%2Fexponential.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fexponential.rs?ref=bc7a2d72a3fea324fa432de9b6ce6073302d3d8c", "patch": "@@ -126,7 +126,7 @@ mod bench {\n \n     #[bench]\n     fn rand_exp(bh: &mut BenchHarness) {\n-        let mut rng = XorShiftRng::new();\n+        let mut rng = XorShiftRng::new().unwrap();\n         let mut exp = Exp::new(2.71828 * 3.14159);\n \n         bh.iter(|| {"}, {"sha": "70ab4c86455b0c4ead6c1e6e3880f5ad7b58851c", "filename": "src/librand/distributions/gamma.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bc7a2d72a3fea324fa432de9b6ce6073302d3d8c/src%2Flibrand%2Fdistributions%2Fgamma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7a2d72a3fea324fa432de9b6ce6073302d3d8c/src%2Flibrand%2Fdistributions%2Fgamma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fgamma.rs?ref=bc7a2d72a3fea324fa432de9b6ce6073302d3d8c", "patch": "@@ -370,14 +370,14 @@ mod bench {\n     use self::test::BenchHarness;\n     use std::mem::size_of;\n     use distributions::IndependentSample;\n-    use {StdRng, RAND_BENCH_N};\n+    use {XorShiftRng, RAND_BENCH_N};\n     use super::Gamma;\n \n \n     #[bench]\n     fn bench_gamma_large_shape(bh: &mut BenchHarness) {\n         let gamma = Gamma::new(10., 1.0);\n-        let mut rng = StdRng::new();\n+        let mut rng = XorShiftRng::new().unwrap();\n \n         bh.iter(|| {\n             for _ in range(0, RAND_BENCH_N) {\n@@ -390,7 +390,7 @@ mod bench {\n     #[bench]\n     fn bench_gamma_small_shape(bh: &mut BenchHarness) {\n         let gamma = Gamma::new(0.1, 1.0);\n-        let mut rng = StdRng::new();\n+        let mut rng = XorShiftRng::new().unwrap();\n \n         bh.iter(|| {\n             for _ in range(0, RAND_BENCH_N) {"}, {"sha": "e163714b0058320e00100842a9e6c9605b87d49e", "filename": "src/librand/distributions/normal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc7a2d72a3fea324fa432de9b6ce6073302d3d8c/src%2Flibrand%2Fdistributions%2Fnormal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7a2d72a3fea324fa432de9b6ce6073302d3d8c/src%2Flibrand%2Fdistributions%2Fnormal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fnormal.rs?ref=bc7a2d72a3fea324fa432de9b6ce6073302d3d8c", "patch": "@@ -193,7 +193,7 @@ mod bench {\n \n     #[bench]\n     fn rand_normal(bh: &mut BenchHarness) {\n-        let mut rng = XorShiftRng::new();\n+        let mut rng = XorShiftRng::new().unwrap();\n         let mut normal = Normal::new(-2.71828, 3.14159);\n \n         bh.iter(|| {"}, {"sha": "f985935e07b983dc2af678562dfa089b1146105a", "filename": "src/librand/isaac.rs", "status": "modified", "additions": 21, "deletions": 17, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/bc7a2d72a3fea324fa432de9b6ce6073302d3d8c/src%2Flibrand%2Fisaac.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7a2d72a3fea324fa432de9b6ce6073302d3d8c/src%2Flibrand%2Fisaac.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fisaac.rs?ref=bc7a2d72a3fea324fa432de9b6ce6073302d3d8c", "patch": "@@ -11,6 +11,7 @@\n //! The ISAAC random number generator.\n \n use {Rng, SeedableRng, OSRng};\n+use std::io::IoResult;\n use std::iter::{range_step, Repeat};\n use std::slice::raw;\n use std::mem;\n@@ -44,12 +45,13 @@ static EMPTY: IsaacRng = IsaacRng {\n \n impl IsaacRng {\n     /// Create an ISAAC random number generator with a random seed.\n-    pub fn new() -> IsaacRng {\n+    ///\n+    /// This reads randomness from the operating system (via `OSRng`)\n+    /// which may fail, any error is propagated via the `IoResult`\n+    /// return value.\n+    pub fn new() -> IoResult<IsaacRng> {\n         let mut rng = EMPTY;\n-        let mut os_rng = match OSRng::new() {\n-            Ok(r) => r,\n-            Err(e) => fail!(\"IsaacRng::new: creating OSRng failed: {}\", e)\n-        };\n+        let mut os_rng = try!(OSRng::new());\n         unsafe {\n             let ptr = rng.rsl.as_mut_ptr();\n \n@@ -59,7 +61,7 @@ impl IsaacRng {\n         }\n \n         rng.init(true);\n-        rng\n+        Ok(rng)\n     }\n \n     /// Create an ISAAC random number generator using the default\n@@ -252,12 +254,14 @@ static EMPTY_64: Isaac64Rng = Isaac64Rng {\n impl Isaac64Rng {\n     /// Create a 64-bit ISAAC random number generator with a random\n     /// seed.\n-    pub fn new() -> Isaac64Rng {\n+    ///\n+    /// This reads randomness from the operating system (via `OSRng`)\n+    /// which may fail, any error is propagated via the `IoResult`\n+    /// return value.\n+    pub fn new() -> IoResult<Isaac64Rng> {\n         let mut rng = EMPTY_64;\n-        let mut os_rng = match OSRng::new() {\n-            Ok(r) => r,\n-            Err(e) => fail!(\"Isaac64Rng::new: creating OSRng failed: {}\", e)\n-        };\n+        let mut os_rng = try!(OSRng::new());\n+\n         unsafe {\n             let ptr = rng.rsl.as_mut_ptr();\n \n@@ -267,7 +271,7 @@ impl Isaac64Rng {\n         }\n \n         rng.init(true);\n-        rng\n+        Ok(rng)\n     }\n \n     /// Create a 64-bit ISAAC random number generator using the\n@@ -436,19 +440,19 @@ impl<'a> SeedableRng<&'a [u64]> for Isaac64Rng {\n #[cfg(test)]\n mod test {\n     use super::{IsaacRng, Isaac64Rng};\n-    use {Rng, SeedableRng, OSRng};\n+    use {Rng, SeedableRng, task_rng};\n     use std::slice;\n \n     #[test]\n     fn test_rng_32_rand_seeded() {\n-        let s = OSRng::new().gen_vec::<u32>(256);\n+        let s = task_rng().gen_vec::<u32>(256);\n         let mut ra: IsaacRng = SeedableRng::from_seed(s.as_slice());\n         let mut rb: IsaacRng = SeedableRng::from_seed(s.as_slice());\n         assert_eq!(ra.gen_ascii_str(100u), rb.gen_ascii_str(100u));\n     }\n     #[test]\n     fn test_rng_64_rand_seeded() {\n-        let s = OSRng::new().gen_vec::<u64>(256);\n+        let s = task_rng().gen_vec::<u64>(256);\n         let mut ra: Isaac64Rng = SeedableRng::from_seed(s.as_slice());\n         let mut rb: Isaac64Rng = SeedableRng::from_seed(s.as_slice());\n         assert_eq!(ra.gen_ascii_str(100u), rb.gen_ascii_str(100u));\n@@ -471,7 +475,7 @@ mod test {\n \n     #[test]\n     fn test_rng_32_reseed() {\n-        let s = OSRng::new().gen_vec::<u32>(256);\n+        let s = task_rng().gen_vec::<u32>(256);\n         let mut r: IsaacRng = SeedableRng::from_seed(s.as_slice());\n         let string1 = r.gen_ascii_str(100);\n \n@@ -482,7 +486,7 @@ mod test {\n     }\n     #[test]\n     fn test_rng_64_reseed() {\n-        let s = OSRng::new().gen_vec::<u64>(256);\n+        let s = task_rng().gen_vec::<u64>(256);\n         let mut r: Isaac64Rng = SeedableRng::from_seed(s.as_slice());\n         let string1 = r.gen_ascii_str(100);\n "}, {"sha": "7924f43876922ea796a561b8ca464afb1a5fa6e2", "filename": "src/librand/lib.rs", "status": "modified", "additions": 36, "deletions": 22, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/bc7a2d72a3fea324fa432de9b6ce6073302d3d8c/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7a2d72a3fea324fa432de9b6ce6073302d3d8c/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=bc7a2d72a3fea324fa432de9b6ce6073302d3d8c", "patch": "@@ -76,6 +76,7 @@ println!(\"{:?}\", tuple_ptr)\n #[phase(syntax, link)] extern crate log;\n \n use std::cast;\n+use std::io::IoResult;\n use std::kinds::marker;\n use std::local_data;\n use std::str;\n@@ -401,7 +402,7 @@ pub trait SeedableRng<Seed>: Rng {\n /// appropriate.\n #[deprecated=\"use `task_rng` or `StdRng::new`\"]\n pub fn rng() -> StdRng {\n-    StdRng::new()\n+    StdRng::new().unwrap()\n }\n \n /// The standard RNG. This is designed to be efficient on the current\n@@ -423,9 +424,12 @@ impl StdRng {\n     /// number of random numbers, or doesn't need the utmost speed for\n     /// generating each number, `task_rng` and/or `random` may be more\n     /// appropriate.\n+    ///\n+    /// Reading the randomness from the OS may fail, and any error is\n+    /// propagated via the `IoResult` return value.\n     #[cfg(not(target_word_size=\"64\"))]\n-    pub fn new() -> StdRng {\n-        StdRng { rng: IsaacRng::new() }\n+    pub fn new() -> IoResult<StdRng> {\n+        IsaacRng::new().map(|r| StdRng { rng: r })\n     }\n     /// Create a randomly seeded instance of `StdRng`.\n     ///\n@@ -435,9 +439,12 @@ impl StdRng {\n     /// number of random numbers, or doesn't need the utmost speed for\n     /// generating each number, `task_rng` and/or `random` may be more\n     /// appropriate.\n+    ///\n+    /// Reading the randomness from the OS may fail, and any error is\n+    /// propagated via the `IoResult` return value.\n     #[cfg(target_word_size=\"64\")]\n-    pub fn new() -> StdRng {\n-        StdRng { rng: Isaac64Rng::new() }\n+    pub fn new() -> IoResult<StdRng> {\n+        Isaac64Rng::new().map(|r| StdRng { rng: r })\n     }\n }\n \n@@ -475,7 +482,10 @@ impl<'a> SeedableRng<&'a [uint]> for StdRng {\n /// This will read randomness from the operating system to seed the\n /// generator.\n pub fn weak_rng() -> XorShiftRng {\n-    XorShiftRng::new()\n+    match XorShiftRng::new() {\n+        Ok(r) => r,\n+        Err(e) => fail!(\"weak_rng: failed to create seeded RNG: {}\", e)\n+    }\n }\n \n /// An Xorshift[1] random number\n@@ -537,21 +547,18 @@ impl SeedableRng<[u32, .. 4]> for XorShiftRng {\n \n impl XorShiftRng {\n     /// Create an xor shift random number generator with a random seed.\n-    pub fn new() -> XorShiftRng {\n+    pub fn new() -> IoResult<XorShiftRng> {\n         let mut s = [0u8, ..16];\n+        let mut r = try!(OSRng::new());\n         loop {\n-            let mut r = match OSRng::new() {\n-                Ok(r) => r,\n-                Err(e) => fail!(\"XorShiftRng::new: creating OSRng failed: {}\", e)\n-            };\n             r.fill_bytes(s);\n \n             if !s.iter().all(|x| *x == 0) {\n                 break;\n             }\n         }\n         let s: [u32, ..4] = unsafe { cast::transmute(s) };\n-        SeedableRng::from_seed(s)\n+        Ok(SeedableRng::from_seed(s))\n     }\n }\n \n@@ -560,7 +567,10 @@ struct TaskRngReseeder;\n \n impl reseeding::Reseeder<StdRng> for TaskRngReseeder {\n     fn reseed(&mut self, rng: &mut StdRng) {\n-        *rng = StdRng::new();\n+        *rng = match StdRng::new() {\n+            Ok(r) => r,\n+            Err(e) => fail!(\"could not reseed task_rng: {}\", e)\n+        }\n     }\n }\n static TASK_RNG_RESEED_THRESHOLD: uint = 32_768;\n@@ -597,7 +607,11 @@ local_data_key!(TASK_RNG_KEY: ~TaskRngInner)\n pub fn task_rng() -> TaskRng {\n     local_data::get_mut(TASK_RNG_KEY, |rng| match rng {\n         None => {\n-            let mut rng = ~reseeding::ReseedingRng::new(StdRng::new(),\n+            let r = match StdRng::new() {\n+                Ok(r) => r,\n+                Err(e) => fail!(\"could not initialize task_rng: {}\", e)\n+            };\n+            let mut rng = ~reseeding::ReseedingRng::new(r,\n                                                         TASK_RNG_RESEED_THRESHOLD,\n                                                         TaskRngReseeder);\n             let ptr = &mut *rng as *mut TaskRngInner;\n@@ -680,7 +694,7 @@ pub struct Closed01<F>(F);\n #[cfg(test)]\n mod test {\n     use std::slice;\n-    use super::{Rng, task_rng, random, OSRng, SeedableRng, StdRng};\n+    use super::{Rng, task_rng, random, SeedableRng, StdRng};\n \n     struct ConstRng { i: u64 }\n     impl Rng for ConstRng {\n@@ -842,15 +856,15 @@ mod test {\n \n     #[test]\n     fn test_std_rng_seeded() {\n-        let s = OSRng::new().gen_vec::<uint>(256);\n+        let s = task_rng().gen_vec::<uint>(256);\n         let mut ra: StdRng = SeedableRng::from_seed(s.as_slice());\n         let mut rb: StdRng = SeedableRng::from_seed(s.as_slice());\n         assert_eq!(ra.gen_ascii_str(100u), rb.gen_ascii_str(100u));\n     }\n \n     #[test]\n     fn test_std_rng_reseed() {\n-        let s = OSRng::new().gen_vec::<uint>(256);\n+        let s = task_rng().gen_vec::<uint>(256);\n         let mut r: StdRng = SeedableRng::from_seed(s.as_slice());\n         let string1 = r.gen_ascii_str(100);\n \n@@ -873,7 +887,7 @@ mod bench {\n \n     #[bench]\n     fn rand_xorshift(bh: &mut BenchHarness) {\n-        let mut rng = XorShiftRng::new();\n+        let mut rng = XorShiftRng::new().unwrap();\n         bh.iter(|| {\n             for _ in range(0, RAND_BENCH_N) {\n                 rng.gen::<uint>();\n@@ -884,7 +898,7 @@ mod bench {\n \n     #[bench]\n     fn rand_isaac(bh: &mut BenchHarness) {\n-        let mut rng = IsaacRng::new();\n+        let mut rng = IsaacRng::new().unwrap();\n         bh.iter(|| {\n             for _ in range(0, RAND_BENCH_N) {\n                 rng.gen::<uint>();\n@@ -895,7 +909,7 @@ mod bench {\n \n     #[bench]\n     fn rand_isaac64(bh: &mut BenchHarness) {\n-        let mut rng = Isaac64Rng::new();\n+        let mut rng = Isaac64Rng::new().unwrap();\n         bh.iter(|| {\n             for _ in range(0, RAND_BENCH_N) {\n                 rng.gen::<uint>();\n@@ -906,7 +920,7 @@ mod bench {\n \n     #[bench]\n     fn rand_std(bh: &mut BenchHarness) {\n-        let mut rng = StdRng::new();\n+        let mut rng = StdRng::new().unwrap();\n         bh.iter(|| {\n             for _ in range(0, RAND_BENCH_N) {\n                 rng.gen::<uint>();\n@@ -917,7 +931,7 @@ mod bench {\n \n     #[bench]\n     fn rand_shuffle_100(bh: &mut BenchHarness) {\n-        let mut rng = XorShiftRng::new();\n+        let mut rng = XorShiftRng::new().unwrap();\n         let x : &mut[uint] = [1,..100];\n         bh.iter(|| {\n             rng.shuffle_mut(x);"}, {"sha": "fc0944fc7db8a9c2015379a177eadb71f6018998", "filename": "src/librand/os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc7a2d72a3fea324fa432de9b6ce6073302d3d8c/src%2Flibrand%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7a2d72a3fea324fa432de9b6ce6073302d3d8c/src%2Flibrand%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fos.rs?ref=bc7a2d72a3fea324fa432de9b6ce6073302d3d8c", "patch": "@@ -192,7 +192,7 @@ mod test {\n \n     #[test]\n     fn test_os_rng() {\n-        let mut r = OSRng::new();\n+        let mut r = OSRng::new().unwrap();\n \n         r.next_u32();\n         r.next_u64();\n@@ -214,7 +214,7 @@ mod test {\n \n                 // deschedule to attempt to interleave things as much\n                 // as possible (XXX: is this a good test?)\n-                let mut r = OSRng::new();\n+                let mut r = OSRng::new().unwrap();\n                 task::deschedule();\n                 let mut v = [0u8, .. 1000];\n "}, {"sha": "131f081cba7a189785d0a3563965911db146c490", "filename": "src/librand/reseeding.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bc7a2d72a3fea324fa432de9b6ce6073302d3d8c/src%2Flibrand%2Freseeding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7a2d72a3fea324fa432de9b6ce6073302d3d8c/src%2Flibrand%2Freseeding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Freseeding.rs?ref=bc7a2d72a3fea324fa432de9b6ce6073302d3d8c", "patch": "@@ -100,20 +100,22 @@ impl<S, R: SeedableRng<S>, Rsdr: Reseeder<R>>\n /// # Example\n ///\n /// ```rust\n-/// use rand::{Rng, SeedableRng};\n+/// use rand::{Rng, SeedableRng, StdRng};\n /// use rand::reseeding::{Reseeder, ReseedingRng};\n ///\n /// struct TickTockReseeder { tick: bool }\n-/// impl Reseeder<rand::StdRng> for TickTockReseeder {\n-///     fn reseed(&mut self, rng: &mut rand::StdRng) {\n+/// impl Reseeder<StdRng> for TickTockReseeder {\n+///     fn reseed(&mut self, rng: &mut StdRng) {\n ///         let val = if self.tick {0} else {1};\n ///         rng.reseed(&[val]);\n ///         self.tick = !self.tick;\n ///     }\n /// }\n /// fn main() {\n ///     let rsdr = TickTockReseeder { tick: true };\n-///     let mut rng = ReseedingRng::new(rand::StdRng::new(), 10, rsdr);\n+///\n+///     let inner = StdRng::new().unwrap();\n+///     let mut rng = ReseedingRng::new(inner, 10, rsdr);\n ///\n ///     // this will repeat, because it gets reseeded very regularly.\n ///     println!(\"{}\", rng.gen_ascii_str(100));"}, {"sha": "85fffc5545a4d03c0d4b2bfc879d2fa572bbff7c", "filename": "src/libstd/fmt/num.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bc7a2d72a3fea324fa432de9b6ce6073302d3d8c/src%2Flibstd%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7a2d72a3fea324fa432de9b6ce6073302d3d8c/src%2Flibstd%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt%2Fnum.rs?ref=bc7a2d72a3fea324fa432de9b6ce6073302d3d8c", "patch": "@@ -400,31 +400,31 @@ mod bench {\n \n         #[bench]\n         fn format_bin(bh: &mut BenchHarness) {\n-            let mut rng = XorShiftRng::new();\n+            let mut rng = XorShiftRng::new().unwrap();\n             bh.iter(|| { format!(\"{:t}\", rng.gen::<uint>()); })\n         }\n \n         #[bench]\n         fn format_oct(bh: &mut BenchHarness) {\n-            let mut rng = XorShiftRng::new();\n+            let mut rng = XorShiftRng::new().unwrap();\n             bh.iter(|| { format!(\"{:o}\", rng.gen::<uint>()); })\n         }\n \n         #[bench]\n         fn format_dec(bh: &mut BenchHarness) {\n-            let mut rng = XorShiftRng::new();\n+            let mut rng = XorShiftRng::new().unwrap();\n             bh.iter(|| { format!(\"{:u}\", rng.gen::<uint>()); })\n         }\n \n         #[bench]\n         fn format_hex(bh: &mut BenchHarness) {\n-            let mut rng = XorShiftRng::new();\n+            let mut rng = XorShiftRng::new().unwrap();\n             bh.iter(|| { format!(\"{:x}\", rng.gen::<uint>()); })\n         }\n \n         #[bench]\n         fn format_base_36(bh: &mut BenchHarness) {\n-            let mut rng = XorShiftRng::new();\n+            let mut rng = XorShiftRng::new().unwrap();\n             bh.iter(|| { format!(\"{}\", radix(rng.gen::<uint>(), 36)); })\n         }\n     }\n@@ -436,31 +436,31 @@ mod bench {\n \n         #[bench]\n         fn format_bin(bh: &mut BenchHarness) {\n-            let mut rng = XorShiftRng::new();\n+            let mut rng = XorShiftRng::new().unwrap();\n             bh.iter(|| { format!(\"{:t}\", rng.gen::<int>()); })\n         }\n \n         #[bench]\n         fn format_oct(bh: &mut BenchHarness) {\n-            let mut rng = XorShiftRng::new();\n+            let mut rng = XorShiftRng::new().unwrap();\n             bh.iter(|| { format!(\"{:o}\", rng.gen::<int>()); })\n         }\n \n         #[bench]\n         fn format_dec(bh: &mut BenchHarness) {\n-            let mut rng = XorShiftRng::new();\n+            let mut rng = XorShiftRng::new().unwrap();\n             bh.iter(|| { format!(\"{:d}\", rng.gen::<int>()); })\n         }\n \n         #[bench]\n         fn format_hex(bh: &mut BenchHarness) {\n-            let mut rng = XorShiftRng::new();\n+            let mut rng = XorShiftRng::new().unwrap();\n             bh.iter(|| { format!(\"{:x}\", rng.gen::<int>()); })\n         }\n \n         #[bench]\n         fn format_base_36(bh: &mut BenchHarness) {\n-            let mut rng = XorShiftRng::new();\n+            let mut rng = XorShiftRng::new().unwrap();\n             bh.iter(|| { format!(\"{}\", radix(rng.gen::<int>(), 36)); })\n         }\n     }"}, {"sha": "63973584c1e8b3c0f74e77b0218367f18143502a", "filename": "src/libstd/io/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc7a2d72a3fea324fa432de9b6ce6073302d3d8c/src%2Flibstd%2Fio%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7a2d72a3fea324fa432de9b6ce6073302d3d8c/src%2Flibstd%2Fio%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ffs.rs?ref=bc7a2d72a3fea324fa432de9b6ce6073302d3d8c", "patch": "@@ -1285,7 +1285,7 @@ mod test {\n         use rand::{StdRng, Rng};\n \n         let mut bytes = [0, ..1024];\n-        StdRng::new().fill_bytes(bytes);\n+        StdRng::new().unwrap().fill_bytes(bytes);\n \n         let tmpdir = tmpdir();\n "}, {"sha": "c516973ddd5b4495007da2391de10cf771d2dffe", "filename": "src/libstd/num/strconv.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/bc7a2d72a3fea324fa432de9b6ce6073302d3d8c/src%2Flibstd%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7a2d72a3fea324fa432de9b6ce6073302d3d8c/src%2Flibstd%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fstrconv.rs?ref=bc7a2d72a3fea324fa432de9b6ce6073302d3d8c", "patch": "@@ -821,31 +821,31 @@ mod bench {\n \n         #[bench]\n         fn to_str_bin(bh: &mut BenchHarness) {\n-            let mut rng = XorShiftRng::new();\n+            let mut rng = XorShiftRng::new().unwrap();\n             bh.iter(|| { rng.gen::<uint>().to_str_radix(2); })\n         }\n \n         #[bench]\n         fn to_str_oct(bh: &mut BenchHarness) {\n-            let mut rng = XorShiftRng::new();\n+            let mut rng = XorShiftRng::new().unwrap();\n             bh.iter(|| { rng.gen::<uint>().to_str_radix(8); })\n         }\n \n         #[bench]\n         fn to_str_dec(bh: &mut BenchHarness) {\n-            let mut rng = XorShiftRng::new();\n+            let mut rng = XorShiftRng::new().unwrap();\n             bh.iter(|| { rng.gen::<uint>().to_str_radix(10); })\n         }\n \n         #[bench]\n         fn to_str_hex(bh: &mut BenchHarness) {\n-            let mut rng = XorShiftRng::new();\n+            let mut rng = XorShiftRng::new().unwrap();\n             bh.iter(|| { rng.gen::<uint>().to_str_radix(16); })\n         }\n \n         #[bench]\n         fn to_str_base_36(bh: &mut BenchHarness) {\n-            let mut rng = XorShiftRng::new();\n+            let mut rng = XorShiftRng::new().unwrap();\n             bh.iter(|| { rng.gen::<uint>().to_str_radix(36); })\n         }\n     }\n@@ -857,31 +857,31 @@ mod bench {\n \n         #[bench]\n         fn to_str_bin(bh: &mut BenchHarness) {\n-            let mut rng = XorShiftRng::new();\n+            let mut rng = XorShiftRng::new().unwrap();\n             bh.iter(|| { rng.gen::<int>().to_str_radix(2); })\n         }\n \n         #[bench]\n         fn to_str_oct(bh: &mut BenchHarness) {\n-            let mut rng = XorShiftRng::new();\n+            let mut rng = XorShiftRng::new().unwrap();\n             bh.iter(|| { rng.gen::<int>().to_str_radix(8); })\n         }\n \n         #[bench]\n         fn to_str_dec(bh: &mut BenchHarness) {\n-            let mut rng = XorShiftRng::new();\n+            let mut rng = XorShiftRng::new().unwrap();\n             bh.iter(|| { rng.gen::<int>().to_str_radix(10); })\n         }\n \n         #[bench]\n         fn to_str_hex(bh: &mut BenchHarness) {\n-            let mut rng = XorShiftRng::new();\n+            let mut rng = XorShiftRng::new().unwrap();\n             bh.iter(|| { rng.gen::<int>().to_str_radix(16); })\n         }\n \n         #[bench]\n         fn to_str_base_36(bh: &mut BenchHarness) {\n-            let mut rng = XorShiftRng::new();\n+            let mut rng = XorShiftRng::new().unwrap();\n             bh.iter(|| { rng.gen::<int>().to_str_radix(36); })\n         }\n     }\n@@ -893,7 +893,7 @@ mod bench {\n \n         #[bench]\n         fn float_to_str(bh: &mut BenchHarness) {\n-            let mut rng = XorShiftRng::new();\n+            let mut rng = XorShiftRng::new().unwrap();\n             bh.iter(|| { f64::to_str(rng.gen()); })\n         }\n     }"}, {"sha": "abaa91b12f8a2bcff44a22c3beddfad8ca33a90c", "filename": "src/libstd/rt/task.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc7a2d72a3fea324fa432de9b6ce6073302d3d8c/src%2Flibstd%2Frt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7a2d72a3fea324fa432de9b6ce6073302d3d8c/src%2Flibstd%2Frt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftask.rs?ref=bc7a2d72a3fea324fa432de9b6ce6073302d3d8c", "patch": "@@ -434,7 +434,7 @@ mod test {\n     #[test]\n     fn rng() {\n         use rand::{StdRng, Rng};\n-        let mut r = StdRng::new();\n+        let mut r = StdRng::new().unwrap();\n         let _ = r.next_u32();\n     }\n "}, {"sha": "babf3f737fbeda6c6559fdd3f08d1cfcd8db0447", "filename": "src/test/bench/noise.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc7a2d72a3fea324fa432de9b6ce6073302d3d8c/src%2Ftest%2Fbench%2Fnoise.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7a2d72a3fea324fa432de9b6ce6073302d3d8c/src%2Ftest%2Fbench%2Fnoise.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fnoise.rs?ref=bc7a2d72a3fea324fa432de9b6ce6073302d3d8c", "patch": "@@ -41,7 +41,7 @@ struct Noise2DContext {\n \n impl Noise2DContext {\n     fn new() -> Noise2DContext {\n-        let mut rng = StdRng::new();\n+        let mut rng = StdRng::new().unwrap();\n \n         let mut rgradients = [Vec2 { x: 0.0, y: 0.0 }, ..256];\n         for x in rgradients.mut_iter() {"}]}