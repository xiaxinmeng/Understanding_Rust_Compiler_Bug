{"sha": "232b2022b515fdba7e06354c635998cbc0d76114", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzMmIyMDIyYjUxNWZkYmE3ZTA2MzU0YzYzNTk5OGNiYzBkNzYxMTQ=", "commit": {"author": {"name": "Carol Nichols", "email": "carol.nichols@gmail.com", "date": "2015-05-02T20:26:45Z"}, "committer": {"name": "Carol Nichols", "email": "carol.nichols@gmail.com", "date": "2015-05-04T00:16:03Z"}, "message": "Update debuginfo metadata to use Box instead of ~\n\nAlso remove comments that reference the unique_type_id HEAP_VEC_BOX\nmetadata, which was removed in 3e62637 and the unique_type_id GC_BOX\nmetadata, which was removed in 8a91d33.", "tree": {"sha": "7bc9bd87937a34e96a09af12cfcd75cd804b1726", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7bc9bd87937a34e96a09af12cfcd75cd804b1726"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/232b2022b515fdba7e06354c635998cbc0d76114", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/232b2022b515fdba7e06354c635998cbc0d76114", "html_url": "https://github.com/rust-lang/rust/commit/232b2022b515fdba7e06354c635998cbc0d76114", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/232b2022b515fdba7e06354c635998cbc0d76114/comments", "author": {"login": "carols10cents", "id": 193874, "node_id": "MDQ6VXNlcjE5Mzg3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/193874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carols10cents", "html_url": "https://github.com/carols10cents", "followers_url": "https://api.github.com/users/carols10cents/followers", "following_url": "https://api.github.com/users/carols10cents/following{/other_user}", "gists_url": "https://api.github.com/users/carols10cents/gists{/gist_id}", "starred_url": "https://api.github.com/users/carols10cents/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carols10cents/subscriptions", "organizations_url": "https://api.github.com/users/carols10cents/orgs", "repos_url": "https://api.github.com/users/carols10cents/repos", "events_url": "https://api.github.com/users/carols10cents/events{/privacy}", "received_events_url": "https://api.github.com/users/carols10cents/received_events", "type": "User", "site_admin": false}, "committer": {"login": "carols10cents", "id": 193874, "node_id": "MDQ6VXNlcjE5Mzg3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/193874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carols10cents", "html_url": "https://github.com/carols10cents", "followers_url": "https://api.github.com/users/carols10cents/followers", "following_url": "https://api.github.com/users/carols10cents/following{/other_user}", "gists_url": "https://api.github.com/users/carols10cents/gists{/gist_id}", "starred_url": "https://api.github.com/users/carols10cents/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carols10cents/subscriptions", "organizations_url": "https://api.github.com/users/carols10cents/orgs", "repos_url": "https://api.github.com/users/carols10cents/repos", "events_url": "https://api.github.com/users/carols10cents/events{/privacy}", "received_events_url": "https://api.github.com/users/carols10cents/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ec81722250efc7798d9163574e01eec5cde85ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ec81722250efc7798d9163574e01eec5cde85ca", "html_url": "https://github.com/rust-lang/rust/commit/7ec81722250efc7798d9163574e01eec5cde85ca"}], "stats": {"total": 36, "additions": 17, "deletions": 19}, "files": [{"sha": "29c22c8c9f712c5896982eee82fd0e951b9d4973", "filename": "src/librustc_trans/trans/debuginfo/metadata.rs", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/232b2022b515fdba7e06354c635998cbc0d76114/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/232b2022b515fdba7e06354c635998cbc0d76114/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs?ref=232b2022b515fdba7e06354c635998cbc0d76114", "patch": "@@ -142,26 +142,24 @@ impl<'tcx> TypeMap<'tcx> {\n     fn get_unique_type_id_of_type<'a>(&mut self, cx: &CrateContext<'a, 'tcx>,\n                                       type_: Ty<'tcx>) -> UniqueTypeId {\n \n-        // basic type           -> {:name of the type:}\n-        // tuple                -> {tuple_(:param-uid:)*}\n-        // struct               -> {struct_:svh: / :node-id:_<(:param-uid:),*> }\n-        // enum                 -> {enum_:svh: / :node-id:_<(:param-uid:),*> }\n-        // enum variant         -> {variant_:variant-name:_:enum-uid:}\n-        // reference (&)        -> {& :pointee-uid:}\n-        // mut reference (&mut) -> {&mut :pointee-uid:}\n-        // ptr (*)              -> {* :pointee-uid:}\n-        // mut ptr (*mut)       -> {*mut :pointee-uid:}\n-        // unique ptr (~)       -> {~ :pointee-uid:}\n-        // @-ptr (@)            -> {@ :pointee-uid:}\n-        // sized vec ([T; x])   -> {[:size:] :element-uid:}\n-        // unsized vec ([T])    -> {[] :element-uid:}\n-        // trait (T)            -> {trait_:svh: / :node-id:_<(:param-uid:),*> }\n-        // closure              -> {<unsafe_> <once_> :store-sigil: |(:param-uid:),* <,_...>| -> \\\n+        // basic type             -> {:name of the type:}\n+        // tuple                  -> {tuple_(:param-uid:)*}\n+        // struct                 -> {struct_:svh: / :node-id:_<(:param-uid:),*> }\n+        // enum                   -> {enum_:svh: / :node-id:_<(:param-uid:),*> }\n+        // enum variant           -> {variant_:variant-name:_:enum-uid:}\n+        // reference (&)          -> {& :pointee-uid:}\n+        // mut reference (&mut)   -> {&mut :pointee-uid:}\n+        // ptr (*)                -> {* :pointee-uid:}\n+        // mut ptr (*mut)         -> {*mut :pointee-uid:}\n+        // unique ptr (Box)       -> {Box :pointee-uid:}\n+        // @-ptr (@)              -> {@ :pointee-uid:}\n+        // sized vec ([T; x])     -> {[:size:] :element-uid:}\n+        // unsized vec ([T])      -> {[] :element-uid:}\n+        // trait (T)              -> {trait_:svh: / :node-id:_<(:param-uid:),*> }\n+        // closure                -> {<unsafe_> <once_> :store-sigil: |(:param-uid:),* <,_...>| -> \\\n         //                             :return-type-uid: : (:bounds:)*}\n-        // function             -> {<unsafe_> <abi_> fn( (:param-uid:)* <,_...> ) -> \\\n+        // function               -> {<unsafe_> <abi_> fn( (:param-uid:)* <,_...> ) -> \\\n         //                             :return-type-uid:}\n-        // unique vec box (~[]) -> {HEAP_VEC_BOX<:pointee-uid:>}\n-        // gc box               -> {GC_BOX<:pointee-uid:>}\n \n         match self.type_to_unique_id.get(&type_).cloned() {\n             Some(unique_type_id) => return unique_type_id,\n@@ -202,7 +200,7 @@ impl<'tcx> TypeMap<'tcx> {\n                 }\n             },\n             ty::ty_uniq(inner_type) => {\n-                unique_type_id.push('~');\n+                unique_type_id.push_str(\"Box \");\n                 let inner_type_id = self.get_unique_type_id_of_type(cx, inner_type);\n                 let inner_type_id = self.get_unique_type_id_as_string(inner_type_id);\n                 unique_type_id.push_str(&inner_type_id[..]);"}]}