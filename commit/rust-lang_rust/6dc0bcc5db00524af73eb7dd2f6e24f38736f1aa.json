{"sha": "6dc0bcc5db00524af73eb7dd2f6e24f38736f1aa", "node_id": "C_kwDOAAsO6NoAKDZkYzBiY2M1ZGIwMDUyNGFmNzNlYjdkZDJmNmUyNGYzODczNmYxYWE", "commit": {"author": {"name": "Nikita Popov", "email": "npopov@redhat.com", "date": "2022-04-20T07:25:13Z"}, "committer": {"name": "Nikita Popov", "email": "npopov@redhat.com", "date": "2022-04-20T07:36:02Z"}, "message": "Stub out more PassManagerBuilder functions", "tree": {"sha": "9a100df4702f4d8394a5f46a542fd685f7551833", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a100df4702f4d8394a5f46a542fd685f7551833"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6dc0bcc5db00524af73eb7dd2f6e24f38736f1aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6dc0bcc5db00524af73eb7dd2f6e24f38736f1aa", "html_url": "https://github.com/rust-lang/rust/commit/6dc0bcc5db00524af73eb7dd2f6e24f38736f1aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6dc0bcc5db00524af73eb7dd2f6e24f38736f1aa/comments", "author": {"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3cf0809a8d3ce66f468eed3dea96408d42eec33b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3cf0809a8d3ce66f468eed3dea96408d42eec33b", "html_url": "https://github.com/rust-lang/rust/commit/3cf0809a8d3ce66f468eed3dea96408d42eec33b"}], "stats": {"total": 91, "additions": 68, "deletions": 23}, "files": [{"sha": "99e30531c226f0aa5d3dd08c6d8b05943f311887", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6dc0bcc5db00524af73eb7dd2f6e24f38736f1aa/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dc0bcc5db00524af73eb7dd2f6e24f38736f1aa/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=6dc0bcc5db00524af73eb7dd2f6e24f38736f1aa", "patch": "@@ -634,8 +634,8 @@ pub(crate) unsafe fn optimize(\n                         extra_passes.as_ptr(),\n                         extra_passes.len() as size_t,\n                     );\n-                    llvm::LLVMPassManagerBuilderPopulateFunctionPassManager(b, fpm);\n-                    llvm::LLVMPassManagerBuilderPopulateModulePassManager(b, mpm);\n+                    llvm::LLVMRustPassManagerBuilderPopulateFunctionPassManager(b, fpm);\n+                    llvm::LLVMRustPassManagerBuilderPopulateModulePassManager(b, mpm);\n                 });\n \n                 have_name_anon_globals_pass = have_name_anon_globals_pass || prepare_for_thin_lto;\n@@ -1091,7 +1091,7 @@ pub unsafe fn with_llvm_pmb(\n     // Create the PassManagerBuilder for LLVM. We configure it with\n     // reasonable defaults and prepare it to actually populate the pass\n     // manager.\n-    let builder = llvm::LLVMPassManagerBuilderCreate();\n+    let builder = llvm::LLVMRustPassManagerBuilderCreate();\n     let opt_size = config.opt_size.map_or(llvm::CodeGenOptSizeNone, |x| to_llvm_opt_settings(x).1);\n     let inline_threshold = config.inline_threshold;\n     let pgo_gen_path = get_pgo_gen_path(config);\n@@ -1108,14 +1108,9 @@ pub unsafe fn with_llvm_pmb(\n         pgo_gen_path.as_ref().map_or(ptr::null(), |s| s.as_ptr()),\n         pgo_use_path.as_ref().map_or(ptr::null(), |s| s.as_ptr()),\n         pgo_sample_use_path.as_ref().map_or(ptr::null(), |s| s.as_ptr()),\n+        opt_size as c_int,\n     );\n \n-    llvm::LLVMPassManagerBuilderSetSizeLevel(builder, opt_size as u32);\n-\n-    if opt_size != llvm::CodeGenOptSizeNone {\n-        llvm::LLVMPassManagerBuilderSetDisableUnrollLoops(builder, 1);\n-    }\n-\n     llvm::LLVMRustAddBuilderLibraryInfo(builder, llmod, config.no_builtins);\n \n     // Here we match what clang does (kinda). For O0 we only inline\n@@ -1124,16 +1119,16 @@ pub unsafe fn with_llvm_pmb(\n     // thresholds copied from clang.\n     match (opt_level, opt_size, inline_threshold) {\n         (.., Some(t)) => {\n-            llvm::LLVMPassManagerBuilderUseInlinerWithThreshold(builder, t);\n+            llvm::LLVMRustPassManagerBuilderUseInlinerWithThreshold(builder, t);\n         }\n         (llvm::CodeGenOptLevel::Aggressive, ..) => {\n-            llvm::LLVMPassManagerBuilderUseInlinerWithThreshold(builder, 275);\n+            llvm::LLVMRustPassManagerBuilderUseInlinerWithThreshold(builder, 275);\n         }\n         (_, llvm::CodeGenOptSizeDefault, _) => {\n-            llvm::LLVMPassManagerBuilderUseInlinerWithThreshold(builder, 75);\n+            llvm::LLVMRustPassManagerBuilderUseInlinerWithThreshold(builder, 75);\n         }\n         (_, llvm::CodeGenOptSizeAggressive, _) => {\n-            llvm::LLVMPassManagerBuilderUseInlinerWithThreshold(builder, 25);\n+            llvm::LLVMRustPassManagerBuilderUseInlinerWithThreshold(builder, 25);\n         }\n         (llvm::CodeGenOptLevel::None, ..) => {\n             llvm::LLVMRustAddAlwaysInlinePass(builder, config.emit_lifetime_markers);\n@@ -1142,12 +1137,12 @@ pub unsafe fn with_llvm_pmb(\n             llvm::LLVMRustAddAlwaysInlinePass(builder, config.emit_lifetime_markers);\n         }\n         (llvm::CodeGenOptLevel::Default, ..) => {\n-            llvm::LLVMPassManagerBuilderUseInlinerWithThreshold(builder, 225);\n+            llvm::LLVMRustPassManagerBuilderUseInlinerWithThreshold(builder, 225);\n         }\n     }\n \n     f(builder);\n-    llvm::LLVMPassManagerBuilderDispose(builder);\n+    llvm::LLVMRustPassManagerBuilderDispose(builder);\n }\n \n // Create a `__imp_<symbol> = &symbol` global for every public static `symbol`."}, {"sha": "13baaddccd4df5be8bf9d37d83b2ed37c5489fe2", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6dc0bcc5db00524af73eb7dd2f6e24f38736f1aa/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dc0bcc5db00524af73eb7dd2f6e24f38736f1aa/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=6dc0bcc5db00524af73eb7dd2f6e24f38736f1aa", "patch": "@@ -1825,20 +1825,18 @@ extern \"C\" {\n \n     pub fn LLVMAddAnalysisPasses<'a>(T: &'a TargetMachine, PM: &PassManager<'a>);\n \n-    pub fn LLVMPassManagerBuilderCreate() -> &'static mut PassManagerBuilder;\n-    pub fn LLVMPassManagerBuilderDispose(PMB: &'static mut PassManagerBuilder);\n-    pub fn LLVMPassManagerBuilderSetSizeLevel(PMB: &PassManagerBuilder, Value: Bool);\n-    pub fn LLVMPassManagerBuilderSetDisableUnrollLoops(PMB: &PassManagerBuilder, Value: Bool);\n-    pub fn LLVMPassManagerBuilderUseInlinerWithThreshold(\n+    pub fn LLVMRustPassManagerBuilderCreate() -> &'static mut PassManagerBuilder;\n+    pub fn LLVMRustPassManagerBuilderDispose(PMB: &'static mut PassManagerBuilder);\n+    pub fn LLVMRustPassManagerBuilderUseInlinerWithThreshold(\n         PMB: &PassManagerBuilder,\n         threshold: c_uint,\n     );\n-    pub fn LLVMPassManagerBuilderPopulateModulePassManager(\n+    pub fn LLVMRustPassManagerBuilderPopulateModulePassManager(\n         PMB: &PassManagerBuilder,\n         PM: &PassManager<'_>,\n     );\n \n-    pub fn LLVMPassManagerBuilderPopulateFunctionPassManager(\n+    pub fn LLVMRustPassManagerBuilderPopulateFunctionPassManager(\n         PMB: &PassManagerBuilder,\n         PM: &PassManager<'_>,\n     );\n@@ -2308,6 +2306,7 @@ extern \"C\" {\n         PGOGenPath: *const c_char,\n         PGOUsePath: *const c_char,\n         PGOSampleUsePath: *const c_char,\n+        SizeLevel: c_int,\n     );\n     pub fn LLVMRustAddLibraryInfo<'a>(\n         PM: &PassManager<'a>,"}, {"sha": "38fddbdba54ddf9a04a22a7b52c7fe05065a6161", "filename": "compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp", "status": "modified", "additions": 52, "deletions": 1, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/6dc0bcc5db00524af73eb7dd2f6e24f38736f1aa/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/6dc0bcc5db00524af73eb7dd2f6e24f38736f1aa/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp?ref=6dc0bcc5db00524af73eb7dd2f6e24f38736f1aa", "patch": "@@ -187,6 +187,41 @@ extern \"C\" void LLVMRustAddPass(LLVMPassManagerRef PMR, LLVMPassRef RustPass) {\n   report_fatal_error(\"Legacy PM not supported with LLVM 15\");\n #endif\n }\n+\n+extern \"C\" LLVMPassManagerBuilderRef LLVMRustPassManagerBuilderCreate() {\n+#if LLVM_VERSION_LT(15, 0)\n+  return LLVMPassManagerBuilderCreate();\n+#else\n+  report_fatal_error(\"Legacy PM not supported with LLVM 15\");\n+#endif\n+}\n+\n+extern \"C\" void LLVMRustPassManagerBuilderDispose(LLVMPassManagerBuilderRef PMB) {\n+#if LLVM_VERSION_LT(15, 0)\n+  LLVMPassManagerBuilderDispose(PMB);\n+#else\n+  report_fatal_error(\"Legacy PM not supported with LLVM 15\");\n+#endif\n+}\n+\n+extern \"C\" void LLVMRustPassManagerBuilderPopulateFunctionPassManager(\n+  LLVMPassManagerBuilderRef PMB, LLVMPassManagerRef PM) {\n+#if LLVM_VERSION_LT(15, 0)\n+  LLVMPassManagerBuilderPopulateFunctionPassManager(PMB, PM);\n+#else\n+  report_fatal_error(\"Legacy PM not supported with LLVM 15\");\n+#endif\n+}\n+\n+extern \"C\" void LLVMRustPassManagerBuilderPopulateModulePassManager(\n+  LLVMPassManagerBuilderRef PMB, LLVMPassManagerRef PM) {\n+#if LLVM_VERSION_LT(15, 0)\n+  LLVMPassManagerBuilderPopulateModulePassManager(PMB, PM);\n+#else\n+  report_fatal_error(\"Legacy PM not supported with LLVM 15\");\n+#endif\n+}\n+\n extern \"C\" void LLVMRustPassManagerBuilderPopulateLTOPassManager(\n   LLVMPassManagerBuilderRef PMB, LLVMPassManagerRef PM, bool Internalize, bool RunInliner) {\n #if LLVM_VERSION_LT(15, 0)\n@@ -208,6 +243,15 @@ void LLVMRustPassManagerBuilderPopulateThinLTOPassManager(\n #endif\n }\n \n+extern \"C\" void LLVMRustPassManagerBuilderUseInlinerWithThreshold(\n+  LLVMPassManagerBuilderRef PMB, unsigned Threshold) {\n+#if LLVM_VERSION_LT(15, 0)\n+  LLVMPassManagerBuilderUseInlinerWithThreshold(PMB, Threshold);\n+#else\n+  report_fatal_error(\"Legacy PM not supported with LLVM 15\");\n+#endif\n+}\n+\n extern \"C\"\n void LLVMRustAddLastExtensionPasses(\n     LLVMPassManagerBuilderRef PMBR, LLVMPassRef *Passes, size_t NumPasses) {\n@@ -577,12 +621,16 @@ extern \"C\" void LLVMRustDisposeTargetMachine(LLVMTargetMachineRef TM) {\n extern \"C\" void LLVMRustConfigurePassManagerBuilder(\n     LLVMPassManagerBuilderRef PMBR, LLVMRustCodeGenOptLevel OptLevel,\n     bool MergeFunctions, bool SLPVectorize, bool LoopVectorize, bool PrepareForThinLTO,\n-    const char* PGOGenPath, const char* PGOUsePath, const char* PGOSampleUsePath) {\n+    const char* PGOGenPath, const char* PGOUsePath, const char* PGOSampleUsePath,\n+    int SizeLevel) {\n+#if LLVM_VERSION_LT(15, 0)\n   unwrap(PMBR)->MergeFunctions = MergeFunctions;\n   unwrap(PMBR)->SLPVectorize = SLPVectorize;\n   unwrap(PMBR)->OptLevel = fromRust(OptLevel);\n   unwrap(PMBR)->LoopVectorize = LoopVectorize;\n   unwrap(PMBR)->PrepareForThinLTO = PrepareForThinLTO;\n+  unwrap(PMBR)->SizeLevel = SizeLevel;\n+  unwrap(PMBR)->DisableUnrollLoops = SizeLevel != 0;\n \n   if (PGOGenPath) {\n     assert(!PGOUsePath && !PGOSampleUsePath);\n@@ -594,6 +642,9 @@ extern \"C\" void LLVMRustConfigurePassManagerBuilder(\n   } else if (PGOSampleUsePath) {\n     unwrap(PMBR)->PGOSampleUse = PGOSampleUsePath;\n   }\n+#else\n+  report_fatal_error(\"Legacy PM not supported with LLVM 15\");\n+#endif\n }\n \n // Unfortunately, the LLVM C API doesn't provide a way to set the `LibraryInfo`"}]}