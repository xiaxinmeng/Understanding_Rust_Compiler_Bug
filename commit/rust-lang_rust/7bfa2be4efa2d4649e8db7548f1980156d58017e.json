{"sha": "7bfa2be4efa2d4649e8db7548f1980156d58017e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiZmEyYmU0ZWZhMmQ0NjQ5ZThkYjc1NDhmMTk4MDE1NmQ1ODAxN2U=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-08-31T01:21:57Z"}, "committer": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-08-31T01:22:49Z"}, "message": "fuchsia: Don't fail to spawn if no stdin exists", "tree": {"sha": "08f29115f9c69720acf76a30bc6892041cd7c498", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08f29115f9c69720acf76a30bc6892041cd7c498"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7bfa2be4efa2d4649e8db7548f1980156d58017e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7bfa2be4efa2d4649e8db7548f1980156d58017e", "html_url": "https://github.com/rust-lang/rust/commit/7bfa2be4efa2d4649e8db7548f1980156d58017e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7bfa2be4efa2d4649e8db7548f1980156d58017e/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "403701f97628b85bfa3e5ec0e5ca82b81d53ba1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/403701f97628b85bfa3e5ec0e5ca82b81d53ba1e", "html_url": "https://github.com/rust-lang/rust/commit/403701f97628b85bfa3e5ec0e5ca82b81d53ba1e"}], "stats": {"total": 63, "additions": 41, "deletions": 22}, "files": [{"sha": "2b3795292f42a9c461937dfb7a880af24097d8df", "filename": "src/libstd/sys/unix/process/process_fuchsia.rs", "status": "modified", "additions": 36, "deletions": 21, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/7bfa2be4efa2d4649e8db7548f1980156d58017e/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bfa2be4efa2d4649e8db7548f1980156d58017e/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs?ref=7bfa2be4efa2d4649e8db7548f1980156d58017e", "patch": "@@ -52,30 +52,45 @@ impl Command {\n             None => ptr::null(),\n         };\n \n-        let make_action = |local_io: &ChildStdio, target_fd| if let Some(local_fd) = local_io.fd() {\n-            fdio_spawn_action_t {\n-                action: FDIO_SPAWN_ACTION_TRANSFER_FD,\n-                local_fd,\n-                target_fd,\n-                ..Default::default()\n-            }\n-        } else {\n-            if let ChildStdio::Null = local_io {\n-                // acts as no-op\n-                return Default::default();\n-            }\n-            fdio_spawn_action_t {\n-                action: FDIO_SPAWN_ACTION_CLONE_FD,\n-                local_fd: target_fd,\n-                target_fd,\n-                ..Default::default()\n+        let make_action = |local_io: &ChildStdio, target_fd| -> io::Result<fdio_spawn_action_t> {\n+            if let Some(local_fd) = local_io.fd() {\n+                Ok(fdio_spawn_action_t {\n+                    action: FDIO_SPAWN_ACTION_TRANSFER_FD,\n+                    local_fd,\n+                    target_fd,\n+                    ..Default::default()\n+                })\n+            } else {\n+                if let ChildStdio::Null = local_io {\n+                    // acts as no-op\n+                    return Ok(Default::default());\n+                }\n+\n+                let mut handle = ZX_HANDLE_INVALID;\n+                let status = fdio_fd_clone(target_fd, &mut handle);\n+                if status == ERR_INVALID_ARGS || status == ERR_NOT_SUPPORTED {\n+                    // This descriptor is closed; skip it rather than generating an\n+                    // error.\n+                    return Ok(Default::default());\n+                }\n+                zx_cvt(status)?;\n+\n+                let mut cloned_fd = 0;\n+                zx_cvt(fdio_fd_create(handle, &mut cloned_fd))?;\n+\n+                Ok(fdio_spawn_action_t {\n+                    action: FDIO_SPAWN_ACTION_TRANSFER_FD,\n+                    local_fd: cloned_fd as i32,\n+                    target_fd,\n+                    ..Default::default()\n+                })\n             }\n         };\n \n         // Clone stdin, stdout, and stderr\n-        let action1 = make_action(&stdio.stdin, 0);\n-        let action2 = make_action(&stdio.stdout, 1);\n-        let action3 = make_action(&stdio.stderr, 2);\n+        let action1 = make_action(&stdio.stdin, 0)?;\n+        let action2 = make_action(&stdio.stdout, 1)?;\n+        let action3 = make_action(&stdio.stderr, 2)?;\n         let actions = [action1, action2, action3];\n \n         // We don't want FileDesc::drop to be called on any stdio. fdio_spawn_etc\n@@ -88,7 +103,7 @@ impl Command {\n \n         let mut process_handle: zx_handle_t = 0;\n         zx_cvt(fdio_spawn_etc(\n-            0,\n+            ZX_HANDLE_INVALID,\n             FDIO_SPAWN_CLONE_JOB | FDIO_SPAWN_CLONE_LDSVC | FDIO_SPAWN_CLONE_NAMESPACE,\n             self.get_argv()[0], self.get_argv().as_ptr(), envp,\n             actions.len() as size_t, actions.as_ptr(),"}, {"sha": "1ba48de3c07855badc5bc34778ee960c9c29231f", "filename": "src/libstd/sys/unix/process/zircon.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7bfa2be4efa2d4649e8db7548f1980156d58017e/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fzircon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bfa2be4efa2d4649e8db7548f1980156d58017e/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fzircon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fzircon.rs?ref=7bfa2be4efa2d4649e8db7548f1980156d58017e", "patch": "@@ -2,8 +2,9 @@\n \n use crate::convert::TryInto;\n use crate::io;\n-use crate::os::raw::c_char;\n use crate::i64;\n+use crate::mem::MaybeUninit;\n+use crate::os::raw::c_char;\n \n use libc::{c_int, c_void, size_t};\n \n@@ -122,6 +123,9 @@ extern {\n                           argv: *const *const c_char, envp: *const *const c_char,\n                           action_count: size_t, actions: *const fdio_spawn_action_t,\n                           process: *mut zx_handle_t, err_msg: *mut c_char) -> zx_status_t;\n+\n+    pub fn fdio_fd_clone(fd: c_int, out_handle: *mut zx_handle_t) -> zx_status_t;\n+    pub fn fdio_fd_create(handle: zx_handle_t, fd: *mut c_int) -> zx_status_t;\n }\n \n // fdio_spawn_etc flags"}]}