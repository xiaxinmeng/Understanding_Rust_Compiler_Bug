{"sha": "7cde07e5cc5cfc1665dd64e4c06482c2f10b693a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjZGUwN2U1Y2M1Y2ZjMTY2NWRkNjRlNGMwNjQ4MmMyZjEwYjY5M2E=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-05-31T02:58:49Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-06-10T21:09:51Z"}, "message": "review comments: only suggest one substitution", "tree": {"sha": "3ab5cf21ade5b31a5e21aa79724b2d47837a5333", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ab5cf21ade5b31a5e21aa79724b2d47837a5333"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7cde07e5cc5cfc1665dd64e4c06482c2f10b693a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7cde07e5cc5cfc1665dd64e4c06482c2f10b693a", "html_url": "https://github.com/rust-lang/rust/commit/7cde07e5cc5cfc1665dd64e4c06482c2f10b693a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7cde07e5cc5cfc1665dd64e4c06482c2f10b693a/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c29b3fa1484c625bd34cb4d94fc76f36c6233447", "url": "https://api.github.com/repos/rust-lang/rust/commits/c29b3fa1484c625bd34cb4d94fc76f36c6233447", "html_url": "https://github.com/rust-lang/rust/commit/c29b3fa1484c625bd34cb4d94fc76f36c6233447"}], "stats": {"total": 193, "additions": 38, "deletions": 155}, "files": [{"sha": "d31e04cffd55f57cbb03e39c75268960b50f5b95", "filename": "src/librustc_trait_selection/traits/error_reporting/mod.rs", "status": "modified", "additions": 14, "deletions": 35, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/7cde07e5cc5cfc1665dd64e4c06482c2f10b693a/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cde07e5cc5cfc1665dd64e4c06482c2f10b693a/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=7cde07e5cc5cfc1665dd64e4c06482c2f10b693a", "patch": "@@ -1759,48 +1759,27 @@ pub fn recursive_type_with_infinite_size_error(\n     for &span in &spans {\n         err.span_label(span, \"recursive without indirection\");\n     }\n-    let short_msg = format!(\"insert some indirection to make `{}` representable\", path);\n     let msg = format!(\n         \"insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `{}` representable\",\n         path,\n     );\n-    match &spans[..] {\n-        [span] => {\n-            err.multipart_suggestions(\n-                &short_msg,\n-                vec![\n+    if spans.len() <= 4 {\n+        err.multipart_suggestion(\n+            &msg,\n+            spans\n+                .iter()\n+                .flat_map(|&span| {\n                     vec![\n                         (span.shrink_to_lo(), \"Box<\".to_string()),\n                         (span.shrink_to_hi(), \">\".to_string()),\n-                    ],\n-                    vec![\n-                        (span.shrink_to_lo(), \"Rc<\".to_string()),\n-                        (span.shrink_to_hi(), \">\".to_string()),\n-                    ],\n-                    vec![(span.shrink_to_lo(), \"&\".to_string())],\n-                ],\n-                Applicability::HasPlaceholders,\n-            );\n-        }\n-        _ if spans.len() <= 4 => {\n-            err.multipart_suggestion(\n-                &msg,\n-                spans\n-                    .iter()\n-                    .flat_map(|&span| {\n-                        vec![\n-                            (span.shrink_to_lo(), \"Box<\".to_string()),\n-                            (span.shrink_to_hi(), \">\".to_string()),\n-                        ]\n-                        .into_iter()\n-                    })\n-                    .collect(),\n-                Applicability::HasPlaceholders,\n-            );\n-        }\n-        _ => {\n-            err.help(&msg);\n-        }\n+                    ]\n+                    .into_iter()\n+                })\n+                .collect(),\n+            Applicability::HasPlaceholders,\n+        );\n+    } else {\n+        err.help(&msg);\n     }\n     err.emit();\n }"}, {"sha": "6d1df4fda2eb052db05b8c94464eac0b2d1fb247", "filename": "src/test/ui/infinite/infinite-tag-type-recursion.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7cde07e5cc5cfc1665dd64e4c06482c2f10b693a/src%2Ftest%2Fui%2Finfinite%2Finfinite-tag-type-recursion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7cde07e5cc5cfc1665dd64e4c06482c2f10b693a/src%2Ftest%2Fui%2Finfinite%2Finfinite-tag-type-recursion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-tag-type-recursion.stderr?ref=7cde07e5cc5cfc1665dd64e4c06482c2f10b693a", "patch": "@@ -6,14 +6,10 @@ LL | enum MList { Cons(isize, MList), Nil }\n    | |\n    | recursive type has infinite size\n    |\n-help: insert some indirection to make `MList` representable\n+help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `MList` representable\n    |\n LL | enum MList { Cons(isize, Box<MList>), Nil }\n    |                          ^^^^     ^\n-LL | enum MList { Cons(isize, Rc<MList>), Nil }\n-   |                          ^^^     ^\n-LL | enum MList { Cons(isize, &MList), Nil }\n-   |                          ^\n \n error[E0391]: cycle detected when computing drop-check constraints for `MList`\n   --> $DIR/infinite-tag-type-recursion.rs:1:1"}, {"sha": "58d087ca1998b7900e35b094e94b7d5f9841a5fd", "filename": "src/test/ui/issues/issue-17431-1.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7cde07e5cc5cfc1665dd64e4c06482c2f10b693a/src%2Ftest%2Fui%2Fissues%2Fissue-17431-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7cde07e5cc5cfc1665dd64e4c06482c2f10b693a/src%2Ftest%2Fui%2Fissues%2Fissue-17431-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17431-1.stderr?ref=7cde07e5cc5cfc1665dd64e4c06482c2f10b693a", "patch": "@@ -6,14 +6,10 @@ LL | struct Foo { foo: Option<Option<Foo>> }\n    | |\n    | recursive type has infinite size\n    |\n-help: insert some indirection to make `Foo` representable\n+help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `Foo` representable\n    |\n LL | struct Foo { foo: Box<Option<Option<Foo>>> }\n    |                   ^^^^                   ^\n-LL | struct Foo { foo: Rc<Option<Option<Foo>>> }\n-   |                   ^^^                   ^\n-LL | struct Foo { foo: &Option<Option<Foo>> }\n-   |                   ^\n \n error: aborting due to previous error\n "}, {"sha": "eba4bf6d1d5eaf2ab9a408bc1e0359fd6801b339", "filename": "src/test/ui/issues/issue-17431-2.stderr", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7cde07e5cc5cfc1665dd64e4c06482c2f10b693a/src%2Ftest%2Fui%2Fissues%2Fissue-17431-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7cde07e5cc5cfc1665dd64e4c06482c2f10b693a/src%2Ftest%2Fui%2Fissues%2Fissue-17431-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17431-2.stderr?ref=7cde07e5cc5cfc1665dd64e4c06482c2f10b693a", "patch": "@@ -6,14 +6,10 @@ LL | struct Baz { q: Option<Foo> }\n    | |\n    | recursive type has infinite size\n    |\n-help: insert some indirection to make `Baz` representable\n+help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `Baz` representable\n    |\n LL | struct Baz { q: Box<Option<Foo>> }\n    |                 ^^^^           ^\n-LL | struct Baz { q: Rc<Option<Foo>> }\n-   |                 ^^^           ^\n-LL | struct Baz { q: &Option<Foo> }\n-   |                 ^\n \n error[E0072]: recursive type `Foo` has infinite size\n   --> $DIR/issue-17431-2.rs:4:1\n@@ -23,14 +19,10 @@ LL | struct Foo { q: Option<Baz> }\n    | |\n    | recursive type has infinite size\n    |\n-help: insert some indirection to make `Foo` representable\n+help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `Foo` representable\n    |\n LL | struct Foo { q: Box<Option<Baz>> }\n    |                 ^^^^           ^\n-LL | struct Foo { q: Rc<Option<Baz>> }\n-   |                 ^^^           ^\n-LL | struct Foo { q: &Option<Baz> }\n-   |                 ^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f6b15d0528ae8ab605e8ace07f8502461ba27d38", "filename": "src/test/ui/issues/issue-17431-3.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7cde07e5cc5cfc1665dd64e4c06482c2f10b693a/src%2Ftest%2Fui%2Fissues%2Fissue-17431-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7cde07e5cc5cfc1665dd64e4c06482c2f10b693a/src%2Ftest%2Fui%2Fissues%2Fissue-17431-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17431-3.stderr?ref=7cde07e5cc5cfc1665dd64e4c06482c2f10b693a", "patch": "@@ -6,14 +6,10 @@ LL | struct Foo { foo: Mutex<Option<Foo>> }\n    | |\n    | recursive type has infinite size\n    |\n-help: insert some indirection to make `Foo` representable\n+help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `Foo` representable\n    |\n LL | struct Foo { foo: Box<Mutex<Option<Foo>>> }\n    |                   ^^^^                  ^\n-LL | struct Foo { foo: Rc<Mutex<Option<Foo>>> }\n-   |                   ^^^                  ^\n-LL | struct Foo { foo: &Mutex<Option<Foo>> }\n-   |                   ^\n \n error: aborting due to previous error\n "}, {"sha": "aa709e1ad518350eb0ac815ae67f8dba787c8e81", "filename": "src/test/ui/issues/issue-17431-4.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7cde07e5cc5cfc1665dd64e4c06482c2f10b693a/src%2Ftest%2Fui%2Fissues%2Fissue-17431-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7cde07e5cc5cfc1665dd64e4c06482c2f10b693a/src%2Ftest%2Fui%2Fissues%2Fissue-17431-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17431-4.stderr?ref=7cde07e5cc5cfc1665dd64e4c06482c2f10b693a", "patch": "@@ -6,14 +6,10 @@ LL | struct Foo<T> { foo: Option<Option<Foo<T>>>, marker: marker::PhantomData<T>\n    | |\n    | recursive type has infinite size\n    |\n-help: insert some indirection to make `Foo` representable\n+help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `Foo` representable\n    |\n LL | struct Foo<T> { foo: Box<Option<Option<Foo<T>>>>, marker: marker::PhantomData<T> }\n    |                      ^^^^                      ^\n-LL | struct Foo<T> { foo: Rc<Option<Option<Foo<T>>>>, marker: marker::PhantomData<T> }\n-   |                      ^^^                      ^\n-LL | struct Foo<T> { foo: &Option<Option<Foo<T>>>, marker: marker::PhantomData<T> }\n-   |                      ^\n \n error: aborting due to previous error\n "}, {"sha": "1558cffb036b3490fac5b9487a6bc6cbdf77c7dd", "filename": "src/test/ui/issues/issue-17431-5.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7cde07e5cc5cfc1665dd64e4c06482c2f10b693a/src%2Ftest%2Fui%2Fissues%2Fissue-17431-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7cde07e5cc5cfc1665dd64e4c06482c2f10b693a/src%2Ftest%2Fui%2Fissues%2Fissue-17431-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17431-5.stderr?ref=7cde07e5cc5cfc1665dd64e4c06482c2f10b693a", "patch": "@@ -6,14 +6,10 @@ LL | struct Bar<T> { x: Bar<Foo> , marker: marker::PhantomData<T> }\n    | |\n    | recursive type has infinite size\n    |\n-help: insert some indirection to make `Bar` representable\n+help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `Bar` representable\n    |\n LL | struct Bar<T> { x: Box<Bar<Foo>> , marker: marker::PhantomData<T> }\n    |                    ^^^^        ^\n-LL | struct Bar<T> { x: Rc<Bar<Foo>> , marker: marker::PhantomData<T> }\n-   |                    ^^^        ^\n-LL | struct Bar<T> { x: &Bar<Foo> , marker: marker::PhantomData<T> }\n-   |                    ^\n \n error: aborting due to previous error\n "}, {"sha": "f2aa2a79c820030141750f658c73b90df23cc798", "filename": "src/test/ui/issues/issue-17431-6.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7cde07e5cc5cfc1665dd64e4c06482c2f10b693a/src%2Ftest%2Fui%2Fissues%2Fissue-17431-6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7cde07e5cc5cfc1665dd64e4c06482c2f10b693a/src%2Ftest%2Fui%2Fissues%2Fissue-17431-6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17431-6.stderr?ref=7cde07e5cc5cfc1665dd64e4c06482c2f10b693a", "patch": "@@ -6,14 +6,10 @@ LL | enum Foo { X(Mutex<Option<Foo>>) }\n    | |\n    | recursive type has infinite size\n    |\n-help: insert some indirection to make `Foo` representable\n+help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `Foo` representable\n    |\n LL | enum Foo { X(Box<Mutex<Option<Foo>>>) }\n    |              ^^^^                  ^\n-LL | enum Foo { X(Rc<Mutex<Option<Foo>>>) }\n-   |              ^^^                  ^\n-LL | enum Foo { X(&Mutex<Option<Foo>>) }\n-   |              ^\n \n error: aborting due to previous error\n "}, {"sha": "684c3089e85ec872695fb5da4845861780b599a3", "filename": "src/test/ui/issues/issue-17431-7.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7cde07e5cc5cfc1665dd64e4c06482c2f10b693a/src%2Ftest%2Fui%2Fissues%2Fissue-17431-7.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7cde07e5cc5cfc1665dd64e4c06482c2f10b693a/src%2Ftest%2Fui%2Fissues%2Fissue-17431-7.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17431-7.stderr?ref=7cde07e5cc5cfc1665dd64e4c06482c2f10b693a", "patch": "@@ -6,14 +6,10 @@ LL | enum Foo { Voo(Option<Option<Foo>>) }\n    | |\n    | recursive type has infinite size\n    |\n-help: insert some indirection to make `Foo` representable\n+help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `Foo` representable\n    |\n LL | enum Foo { Voo(Box<Option<Option<Foo>>>) }\n    |                ^^^^                   ^\n-LL | enum Foo { Voo(Rc<Option<Option<Foo>>>) }\n-   |                ^^^                   ^\n-LL | enum Foo { Voo(&Option<Option<Foo>>) }\n-   |                ^\n \n error: aborting due to previous error\n "}, {"sha": "d152ffde4e57d28e7dea5533d787cf8f3b3f41c8", "filename": "src/test/ui/issues/issue-2718-a.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7cde07e5cc5cfc1665dd64e4c06482c2f10b693a/src%2Ftest%2Fui%2Fissues%2Fissue-2718-a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7cde07e5cc5cfc1665dd64e4c06482c2f10b693a/src%2Ftest%2Fui%2Fissues%2Fissue-2718-a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2718-a.stderr?ref=7cde07e5cc5cfc1665dd64e4c06482c2f10b693a", "patch": "@@ -7,14 +7,10 @@ LL |     pub struct Pong(SendPacket<Ping>);\n    |     |               recursive without indirection\n    |     recursive type has infinite size\n    |\n-help: insert some indirection to make `pingpong::Pong` representable\n+help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `pingpong::Pong` representable\n    |\n LL |     pub struct Pong(Box<SendPacket<Ping>>);\n    |                     ^^^^                ^\n-LL |     pub struct Pong(Rc<SendPacket<Ping>>);\n-   |                     ^^^                ^\n-LL |     pub struct Pong(&SendPacket<Ping>);\n-   |                     ^\n \n error: aborting due to previous error\n "}, {"sha": "87ee36df21696e3b51fa3b18db910ed106b7f89e", "filename": "src/test/ui/issues/issue-3008-1.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7cde07e5cc5cfc1665dd64e4c06482c2f10b693a/src%2Ftest%2Fui%2Fissues%2Fissue-3008-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7cde07e5cc5cfc1665dd64e4c06482c2f10b693a/src%2Ftest%2Fui%2Fissues%2Fissue-3008-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3008-1.stderr?ref=7cde07e5cc5cfc1665dd64e4c06482c2f10b693a", "patch": "@@ -7,14 +7,10 @@ LL | enum Bar {\n LL |     BarSome(Bar)\n    |             --- recursive without indirection\n    |\n-help: insert some indirection to make `Bar` representable\n+help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `Bar` representable\n    |\n LL |     BarSome(Box<Bar>)\n    |             ^^^^   ^\n-LL |     BarSome(Rc<Bar>)\n-   |             ^^^   ^\n-LL |     BarSome(&Bar)\n-   |             ^\n \n error: aborting due to previous error\n "}, {"sha": "369a19d37e6f6450679ba38e959871a709b6eb11", "filename": "src/test/ui/issues/issue-3008-2.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7cde07e5cc5cfc1665dd64e4c06482c2f10b693a/src%2Ftest%2Fui%2Fissues%2Fissue-3008-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7cde07e5cc5cfc1665dd64e4c06482c2f10b693a/src%2Ftest%2Fui%2Fissues%2Fissue-3008-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3008-2.stderr?ref=7cde07e5cc5cfc1665dd64e4c06482c2f10b693a", "patch": "@@ -6,14 +6,10 @@ LL | struct Bar { x: Bar }\n    | |\n    | recursive type has infinite size\n    |\n-help: insert some indirection to make `Bar` representable\n+help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `Bar` representable\n    |\n LL | struct Bar { x: Box<Bar> }\n    |                 ^^^^   ^\n-LL | struct Bar { x: Rc<Bar> }\n-   |                 ^^^   ^\n-LL | struct Bar { x: &Bar }\n-   |                 ^\n \n error: aborting due to previous error\n "}, {"sha": "0b162eff94a7cb251fe529dc44c105387e7107d9", "filename": "src/test/ui/issues/issue-3008-3.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7cde07e5cc5cfc1665dd64e4c06482c2f10b693a/src%2Ftest%2Fui%2Fissues%2Fissue-3008-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7cde07e5cc5cfc1665dd64e4c06482c2f10b693a/src%2Ftest%2Fui%2Fissues%2Fissue-3008-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3008-3.stderr?ref=7cde07e5cc5cfc1665dd64e4c06482c2f10b693a", "patch": "@@ -6,14 +6,10 @@ LL | enum E2<T> { V2(E2<E1>, marker::PhantomData<T>), }\n    | |\n    | recursive type has infinite size\n    |\n-help: insert some indirection to make `E2` representable\n+help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `E2` representable\n    |\n LL | enum E2<T> { V2(Box<E2<E1>>, marker::PhantomData<T>), }\n    |                 ^^^^      ^\n-LL | enum E2<T> { V2(Rc<E2<E1>>, marker::PhantomData<T>), }\n-   |                 ^^^      ^\n-LL | enum E2<T> { V2(&E2<E1>, marker::PhantomData<T>), }\n-   |                 ^\n \n error: aborting due to previous error\n "}, {"sha": "7b17e91421660f4a31d83ec28692b8394a7da156", "filename": "src/test/ui/issues/issue-3779.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7cde07e5cc5cfc1665dd64e4c06482c2f10b693a/src%2Ftest%2Fui%2Fissues%2Fissue-3779.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7cde07e5cc5cfc1665dd64e4c06482c2f10b693a/src%2Ftest%2Fui%2Fissues%2Fissue-3779.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3779.stderr?ref=7cde07e5cc5cfc1665dd64e4c06482c2f10b693a", "patch": "@@ -7,14 +7,10 @@ LL |\n LL |     element: Option<S>\n    |              --------- recursive without indirection\n    |\n-help: insert some indirection to make `S` representable\n+help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `S` representable\n    |\n LL |     element: Box<Option<S>>\n    |              ^^^^         ^\n-LL |     element: Rc<Option<S>>\n-   |              ^^^         ^\n-LL |     element: &Option<S>\n-   |              ^\n \n error: aborting due to previous error\n "}, {"sha": "b7c799e163cee7474a99e9781995aaf55f06774c", "filename": "src/test/ui/issues/issue-57271.stderr", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7cde07e5cc5cfc1665dd64e4c06482c2f10b693a/src%2Ftest%2Fui%2Fissues%2Fissue-57271.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7cde07e5cc5cfc1665dd64e4c06482c2f10b693a/src%2Ftest%2Fui%2Fissues%2Fissue-57271.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57271.stderr?ref=7cde07e5cc5cfc1665dd64e4c06482c2f10b693a", "patch": "@@ -7,14 +7,10 @@ LL |     Class(ClassTypeSignature),\n LL |     Array(TypeSignature),\n    |           ------------- recursive without indirection\n    |\n-help: insert some indirection to make `ObjectType` representable\n+help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `ObjectType` representable\n    |\n LL |     Array(Box<TypeSignature>),\n    |           ^^^^             ^\n-LL |     Array(Rc<TypeSignature>),\n-   |           ^^^             ^\n-LL |     Array(&TypeSignature),\n-   |           ^\n \n error[E0072]: recursive type `TypeSignature` has infinite size\n   --> $DIR/issue-57271.rs:19:1\n@@ -25,14 +21,10 @@ LL |     Base(BaseType),\n LL |     Object(ObjectType),\n    |            ---------- recursive without indirection\n    |\n-help: insert some indirection to make `TypeSignature` representable\n+help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `TypeSignature` representable\n    |\n LL |     Object(Box<ObjectType>),\n    |            ^^^^          ^\n-LL |     Object(Rc<ObjectType>),\n-   |            ^^^          ^\n-LL |     Object(&ObjectType),\n-   |            ^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ab4709d8e709e0bd5c5f5b7bc389cce36dc7eb37", "filename": "src/test/ui/recursion/recursive-enum.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7cde07e5cc5cfc1665dd64e4c06482c2f10b693a/src%2Ftest%2Fui%2Frecursion%2Frecursive-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7cde07e5cc5cfc1665dd64e4c06482c2f10b693a/src%2Ftest%2Fui%2Frecursion%2Frecursive-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Frecursive-enum.stderr?ref=7cde07e5cc5cfc1665dd64e4c06482c2f10b693a", "patch": "@@ -6,14 +6,10 @@ LL | enum List<T> { Cons(T, List<T>), Nil }\n    | |\n    | recursive type has infinite size\n    |\n-help: insert some indirection to make `List` representable\n+help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `List` representable\n    |\n LL | enum List<T> { Cons(T, Box<List<T>>), Nil }\n    |                        ^^^^       ^\n-LL | enum List<T> { Cons(T, Rc<List<T>>), Nil }\n-   |                        ^^^       ^\n-LL | enum List<T> { Cons(T, &List<T>), Nil }\n-   |                        ^\n \n error: aborting due to previous error\n "}, {"sha": "45062c2ea6c7239fa0a847f9a06d36a8223daf55", "filename": "src/test/ui/sized-cycle-note.stderr", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7cde07e5cc5cfc1665dd64e4c06482c2f10b693a/src%2Ftest%2Fui%2Fsized-cycle-note.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7cde07e5cc5cfc1665dd64e4c06482c2f10b693a/src%2Ftest%2Fui%2Fsized-cycle-note.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsized-cycle-note.stderr?ref=7cde07e5cc5cfc1665dd64e4c06482c2f10b693a", "patch": "@@ -6,14 +6,10 @@ LL | struct Baz { q: Option<Foo> }\n    | |\n    | recursive type has infinite size\n    |\n-help: insert some indirection to make `Baz` representable\n+help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `Baz` representable\n    |\n LL | struct Baz { q: Box<Option<Foo>> }\n    |                 ^^^^           ^\n-LL | struct Baz { q: Rc<Option<Foo>> }\n-   |                 ^^^           ^\n-LL | struct Baz { q: &Option<Foo> }\n-   |                 ^\n \n error[E0072]: recursive type `Foo` has infinite size\n   --> $DIR/sized-cycle-note.rs:11:1\n@@ -23,14 +19,10 @@ LL | struct Foo { q: Option<Baz> }\n    | |\n    | recursive type has infinite size\n    |\n-help: insert some indirection to make `Foo` representable\n+help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `Foo` representable\n    |\n LL | struct Foo { q: Box<Option<Baz>> }\n    |                 ^^^^           ^\n-LL | struct Foo { q: Rc<Option<Baz>> }\n-   |                 ^^^           ^\n-LL | struct Foo { q: &Option<Baz> }\n-   |                 ^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "06493f05142e6d2a59fa7e2ab6ba4a17d4253e40", "filename": "src/test/ui/span/E0072.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7cde07e5cc5cfc1665dd64e4c06482c2f10b693a/src%2Ftest%2Fui%2Fspan%2FE0072.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7cde07e5cc5cfc1665dd64e4c06482c2f10b693a/src%2Ftest%2Fui%2Fspan%2FE0072.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2FE0072.stderr?ref=7cde07e5cc5cfc1665dd64e4c06482c2f10b693a", "patch": "@@ -7,14 +7,10 @@ LL |     head: u8,\n LL |     tail: Option<ListNode>,\n    |           ---------------- recursive without indirection\n    |\n-help: insert some indirection to make `ListNode` representable\n+help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `ListNode` representable\n    |\n LL |     tail: Box<Option<ListNode>>,\n    |           ^^^^                ^\n-LL |     tail: Rc<Option<ListNode>>,\n-   |           ^^^                ^\n-LL |     tail: &Option<ListNode>,\n-   |           ^\n \n error: aborting due to previous error\n "}, {"sha": "55128347f7404f26f091e4e1a240047a6f2bbcb2", "filename": "src/test/ui/span/multiline-span-E0072.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7cde07e5cc5cfc1665dd64e4c06482c2f10b693a/src%2Ftest%2Fui%2Fspan%2Fmultiline-span-E0072.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7cde07e5cc5cfc1665dd64e4c06482c2f10b693a/src%2Ftest%2Fui%2Fspan%2Fmultiline-span-E0072.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmultiline-span-E0072.stderr?ref=7cde07e5cc5cfc1665dd64e4c06482c2f10b693a", "patch": "@@ -10,14 +10,10 @@ LL | |     tail: Option<ListNode>,\n LL | | }\n    | |_^ recursive type has infinite size\n    |\n-help: insert some indirection to make `ListNode` representable\n+help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `ListNode` representable\n    |\n LL |     tail: Box<Option<ListNode>>,\n    |           ^^^^                ^\n-LL |     tail: Rc<Option<ListNode>>,\n-   |           ^^^                ^\n-LL |     tail: &Option<ListNode>,\n-   |           ^\n \n error: aborting due to previous error\n "}, {"sha": "fb1d98b58dfbe3cd433767b8b19e9de241ad2b48", "filename": "src/test/ui/span/recursive-type-field.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7cde07e5cc5cfc1665dd64e4c06482c2f10b693a/src%2Ftest%2Fui%2Fspan%2Frecursive-type-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7cde07e5cc5cfc1665dd64e4c06482c2f10b693a/src%2Ftest%2Fui%2Fspan%2Frecursive-type-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Frecursive-type-field.stderr?ref=7cde07e5cc5cfc1665dd64e4c06482c2f10b693a", "patch": "@@ -6,14 +6,10 @@ LL | struct Foo<'a> {\n LL |     bar: Bar<'a>,\n    |          ------- recursive without indirection\n    |\n-help: insert some indirection to make `Foo` representable\n+help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `Foo` representable\n    |\n LL |     bar: Box<Bar<'a>>,\n    |          ^^^^       ^\n-LL |     bar: Rc<Bar<'a>>,\n-   |          ^^^       ^\n-LL |     bar: &Bar<'a>,\n-   |          ^\n \n error[E0072]: recursive type `Bar` has infinite size\n   --> $DIR/recursive-type-field.rs:8:1"}, {"sha": "d6d32cc5d6f395ffa9c2b4e4f239287fe5e0a548", "filename": "src/test/ui/type/type-recursive.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7cde07e5cc5cfc1665dd64e4c06482c2f10b693a/src%2Ftest%2Fui%2Ftype%2Ftype-recursive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7cde07e5cc5cfc1665dd64e4c06482c2f10b693a/src%2Ftest%2Fui%2Ftype%2Ftype-recursive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-recursive.stderr?ref=7cde07e5cc5cfc1665dd64e4c06482c2f10b693a", "patch": "@@ -7,14 +7,10 @@ LL |     foo: isize,\n LL |     foolish: T1\n    |              -- recursive without indirection\n    |\n-help: insert some indirection to make `T1` representable\n+help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `T1` representable\n    |\n LL |     foolish: Box<T1>\n    |              ^^^^  ^\n-LL |     foolish: Rc<T1>\n-   |              ^^^  ^\n-LL |     foolish: &T1\n-   |              ^\n \n error: aborting due to previous error\n "}, {"sha": "c54d04de12c509043382130f57522fff7d5f9e7c", "filename": "src/test/ui/union/union-nonrepresentable.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7cde07e5cc5cfc1665dd64e4c06482c2f10b693a/src%2Ftest%2Fui%2Funion%2Funion-nonrepresentable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7cde07e5cc5cfc1665dd64e4c06482c2f10b693a/src%2Ftest%2Fui%2Funion%2Funion-nonrepresentable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-nonrepresentable.stderr?ref=7cde07e5cc5cfc1665dd64e4c06482c2f10b693a", "patch": "@@ -7,14 +7,10 @@ LL |     a: u8,\n LL |     b: U,\n    |        - recursive without indirection\n    |\n-help: insert some indirection to make `U` representable\n+help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `U` representable\n    |\n LL |     b: Box<U>,\n    |        ^^^^ ^\n-LL |     b: Rc<U>,\n-   |        ^^^ ^\n-LL |     b: &U,\n-   |        ^\n \n error: aborting due to previous error\n "}]}