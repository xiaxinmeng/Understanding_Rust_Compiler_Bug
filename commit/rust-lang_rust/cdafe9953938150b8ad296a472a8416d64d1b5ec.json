{"sha": "cdafe9953938150b8ad296a472a8416d64d1b5ec", "node_id": "C_kwDOAAsO6NoAKGNkYWZlOTk1MzkzODE1MGI4YWQyOTZhNDcyYTg0MTZkNjRkMWI1ZWM", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-11-08T01:45:10Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-11-08T02:27:21Z"}, "message": "Add more missing methods to `IntraLinkCrateLoader`\n\nThis helps with (but does not fix)\nhttps://github.com/rust-lang/rust/issues/84738. I tested on\nhttps://github.com/jyn514/objr/commit/edcee7b8124abf0e4c63873e8422ff81beb11ebb\nand still hit ICEs.", "tree": {"sha": "453343c1f548225384a1e9b8b1755b2b4d6b6e24", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/453343c1f548225384a1e9b8b1755b2b4d6b6e24"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cdafe9953938150b8ad296a472a8416d64d1b5ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cdafe9953938150b8ad296a472a8416d64d1b5ec", "html_url": "https://github.com/rust-lang/rust/commit/cdafe9953938150b8ad296a472a8416d64d1b5ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cdafe9953938150b8ad296a472a8416d64d1b5ec/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "489ec310d2eadbdbdafc172fb09e9d598c01c93e", "url": "https://api.github.com/repos/rust-lang/rust/commits/489ec310d2eadbdbdafc172fb09e9d598c01c93e", "html_url": "https://github.com/rust-lang/rust/commit/489ec310d2eadbdbdafc172fb09e9d598c01c93e"}], "stats": {"total": 61, "additions": 57, "deletions": 4}, "files": [{"sha": "4cebf741e200271ce837e047fd81cc587c673e4b", "filename": "src/librustdoc/passes/collect_intra_doc_links/early.rs", "status": "modified", "additions": 27, "deletions": 4, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/cdafe9953938150b8ad296a472a8416d64d1b5ec/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdafe9953938150b8ad296a472a8416d64d1b5ec/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links%2Fearly.rs?ref=cdafe9953938150b8ad296a472a8416d64d1b5ec", "patch": "@@ -1,3 +1,4 @@\n+use ast::visit;\n use rustc_ast as ast;\n use rustc_hir::def::Namespace::TypeNS;\n use rustc_hir::def_id::{LocalDefId, CRATE_DEF_ID};\n@@ -16,7 +17,7 @@ crate fn load_intra_link_crates(resolver: Resolver, krate: &ast::Crate) -> Resol\n     let mut loader = IntraLinkCrateLoader { current_mod: CRATE_DEF_ID, resolver };\n     // `walk_crate` doesn't visit the crate itself for some reason.\n     loader.load_links_in_attrs(&krate.attrs, krate.span);\n-    ast::visit::walk_crate(&mut loader, krate);\n+    visit::walk_crate(&mut loader, krate);\n     loader.resolver\n }\n \n@@ -54,7 +55,12 @@ impl IntraLinkCrateLoader {\n     }\n }\n \n-impl ast::visit::Visitor<'_> for IntraLinkCrateLoader {\n+impl visit::Visitor<'_> for IntraLinkCrateLoader {\n+    fn visit_foreign_item(&mut self, item: &ast::ForeignItem) {\n+        self.load_links_in_attrs(&item.attrs, item.span);\n+        visit::walk_foreign_item(self, item)\n+    }\n+\n     fn visit_item(&mut self, item: &ast::Item) {\n         use rustc_ast_lowering::ResolverAstLowering;\n \n@@ -64,12 +70,29 @@ impl ast::visit::Visitor<'_> for IntraLinkCrateLoader {\n             let old_mod = mem::replace(&mut self.current_mod, new_mod);\n \n             self.load_links_in_attrs(&item.attrs, item.span);\n-            ast::visit::walk_item(self, item);\n+            visit::walk_item(self, item);\n \n             self.current_mod = old_mod;\n         } else {\n             self.load_links_in_attrs(&item.attrs, item.span);\n-            ast::visit::walk_item(self, item);\n+            visit::walk_item(self, item);\n         }\n     }\n+\n+    // NOTE: if doc-comments are ever allowed on function parameters, this will have to implement `visit_param` too.\n+\n+    fn visit_assoc_item(&mut self, item: &ast::AssocItem, ctxt: visit::AssocCtxt) {\n+        self.load_links_in_attrs(&item.attrs, item.span);\n+        visit::walk_assoc_item(self, item, ctxt)\n+    }\n+\n+    fn visit_field_def(&mut self, field: &ast::FieldDef) {\n+        self.load_links_in_attrs(&field.attrs, field.span);\n+        visit::walk_field_def(self, field)\n+    }\n+\n+    fn visit_variant(&mut self, v: &ast::Variant) {\n+        self.load_links_in_attrs(&v.attrs, v.span);\n+        visit::walk_variant(self, v)\n+    }\n }"}, {"sha": "d11c69f812a8dfe9ea3db2474363c188c096c5b3", "filename": "src/test/rustdoc-ui/intra-doc/auxiliary/dep1.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cdafe9953938150b8ad296a472a8416d64d1b5ec/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fauxiliary%2Fdep1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdafe9953938150b8ad296a472a8416d64d1b5ec/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fauxiliary%2Fdep1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fauxiliary%2Fdep1.rs?ref=cdafe9953938150b8ad296a472a8416d64d1b5ec", "patch": "@@ -0,0 +1 @@\n+// intentionally empty"}, {"sha": "d11c69f812a8dfe9ea3db2474363c188c096c5b3", "filename": "src/test/rustdoc-ui/intra-doc/auxiliary/dep2.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cdafe9953938150b8ad296a472a8416d64d1b5ec/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fauxiliary%2Fdep2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdafe9953938150b8ad296a472a8416d64d1b5ec/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fauxiliary%2Fdep2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fauxiliary%2Fdep2.rs?ref=cdafe9953938150b8ad296a472a8416d64d1b5ec", "patch": "@@ -0,0 +1 @@\n+// intentionally empty"}, {"sha": "d11c69f812a8dfe9ea3db2474363c188c096c5b3", "filename": "src/test/rustdoc-ui/intra-doc/auxiliary/dep3.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cdafe9953938150b8ad296a472a8416d64d1b5ec/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fauxiliary%2Fdep3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdafe9953938150b8ad296a472a8416d64d1b5ec/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fauxiliary%2Fdep3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fauxiliary%2Fdep3.rs?ref=cdafe9953938150b8ad296a472a8416d64d1b5ec", "patch": "@@ -0,0 +1 @@\n+// intentionally empty"}, {"sha": "d11c69f812a8dfe9ea3db2474363c188c096c5b3", "filename": "src/test/rustdoc-ui/intra-doc/auxiliary/dep4.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cdafe9953938150b8ad296a472a8416d64d1b5ec/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fauxiliary%2Fdep4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdafe9953938150b8ad296a472a8416d64d1b5ec/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fauxiliary%2Fdep4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fauxiliary%2Fdep4.rs?ref=cdafe9953938150b8ad296a472a8416d64d1b5ec", "patch": "@@ -0,0 +1 @@\n+// intentionally empty"}, {"sha": "438c56aa516a9839281fba992942513823f7d86d", "filename": "src/test/rustdoc-ui/intra-doc/extern-crate-load.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/cdafe9953938150b8ad296a472a8416d64d1b5ec/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fextern-crate-load.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdafe9953938150b8ad296a472a8416d64d1b5ec/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fextern-crate-load.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fextern-crate-load.rs?ref=cdafe9953938150b8ad296a472a8416d64d1b5ec", "patch": "@@ -0,0 +1,26 @@\n+// check-pass\n+// aux-crate:dep1=dep1.rs\n+// aux-crate:dep2=dep2.rs\n+// aux-crate:dep3=dep3.rs\n+// aux-crate:dep4=dep4.rs\n+#![deny(rustdoc::broken_intra_doc_links)]\n+\n+pub trait Trait {\n+    /// [dep1]\n+    type Item;\n+}\n+\n+pub struct S {\n+    /// [dep2]\n+    pub x: usize,\n+}\n+\n+extern \"C\" {\n+    /// [dep3]\n+    pub fn printf();\n+}\n+\n+pub enum E {\n+    /// [dep4]\n+    A\n+}"}]}