{"sha": "2dbac1fb8ed43cbcd160855803d50a51c38b8cee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkYmFjMWZiOGVkNDNjYmNkMTYwODU1ODAzZDUwYTUxYzM4YjhjZWU=", "commit": {"author": {"name": "Ulrik Sverdrup", "email": "bluss@users.noreply.github.com", "date": "2016-03-14T23:01:12Z"}, "committer": {"name": "Ulrik Sverdrup", "email": "bluss@users.noreply.github.com", "date": "2016-03-18T16:31:41Z"}, "message": "Add intrinsics for float arithmetic with `fast` flag enabled\n\n`fast` a.k.a UnsafeAlgebra is the flag for enabling all \"unsafe\"\n(according to llvm) float optimizations.\n\nSee LangRef for more information http://llvm.org/docs/LangRef.html#fast-math-flags\n\nProviding these operations with less precise associativity rules (for\nexample) is useful to numerical applications.\n\nFor example, the summation loop:\n\n    let sum = 0.;\n    for element in data {\n        sum += *element;\n    }\n\nUsing the default floating point semantics, this loop expresses the\nfloats must be added in a sequence, one after another. This constraint\nis usually completely unintended, and it means that no autovectorization\nis possible.", "tree": {"sha": "af284454253d8c401a31b4ad4b3f0bfb1ffa3f67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af284454253d8c401a31b4ad4b3f0bfb1ffa3f67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2dbac1fb8ed43cbcd160855803d50a51c38b8cee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2dbac1fb8ed43cbcd160855803d50a51c38b8cee", "html_url": "https://github.com/rust-lang/rust/commit/2dbac1fb8ed43cbcd160855803d50a51c38b8cee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2dbac1fb8ed43cbcd160855803d50a51c38b8cee/comments", "author": {"login": "bluss", "id": 3209739, "node_id": "MDQ6VXNlcjMyMDk3Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3209739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluss", "html_url": "https://github.com/bluss", "followers_url": "https://api.github.com/users/bluss/followers", "following_url": "https://api.github.com/users/bluss/following{/other_user}", "gists_url": "https://api.github.com/users/bluss/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluss/subscriptions", "organizations_url": "https://api.github.com/users/bluss/orgs", "repos_url": "https://api.github.com/users/bluss/repos", "events_url": "https://api.github.com/users/bluss/events{/privacy}", "received_events_url": "https://api.github.com/users/bluss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bluss", "id": 3209739, "node_id": "MDQ6VXNlcjMyMDk3Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3209739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluss", "html_url": "https://github.com/bluss", "followers_url": "https://api.github.com/users/bluss/followers", "following_url": "https://api.github.com/users/bluss/following{/other_user}", "gists_url": "https://api.github.com/users/bluss/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluss/subscriptions", "organizations_url": "https://api.github.com/users/bluss/orgs", "repos_url": "https://api.github.com/users/bluss/repos", "events_url": "https://api.github.com/users/bluss/events{/privacy}", "received_events_url": "https://api.github.com/users/bluss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "235d77457d80b549dad3ac36d94f235208a1eafb", "url": "https://api.github.com/repos/rust-lang/rust/commits/235d77457d80b549dad3ac36d94f235208a1eafb", "html_url": "https://github.com/rust-lang/rust/commit/235d77457d80b549dad3ac36d94f235208a1eafb"}], "stats": {"total": 261, "additions": 261, "deletions": 0}, "files": [{"sha": "69cfd0368d635d95637511b9145fa01ae19a6a7b", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2dbac1fb8ed43cbcd160855803d50a51c38b8cee/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbac1fb8ed43cbcd160855803d50a51c38b8cee/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=2dbac1fb8ed43cbcd160855803d50a51c38b8cee", "patch": "@@ -539,6 +539,32 @@ extern \"rust-intrinsic\" {\n     /// Returns the nearest integer to an `f64`. Rounds half-way cases away from zero.\n     pub fn roundf64(x: f64) -> f64;\n \n+    /// Float addition that allows optimizations based on algebraic rules.\n+    /// May assume inputs are finite.\n+    #[cfg(not(stage0))]\n+    pub fn fadd_fast<T>(a: T, b: T) -> T;\n+\n+    /// Float subtraction that allows optimizations based on algebraic rules.\n+    /// May assume inputs are finite.\n+    #[cfg(not(stage0))]\n+    pub fn fsub_fast<T>(a: T, b: T) -> T;\n+\n+    /// Float multiplication that allows optimizations based on algebraic rules.\n+    /// May assume inputs are finite.\n+    #[cfg(not(stage0))]\n+    pub fn fmul_fast<T>(a: T, b: T) -> T;\n+\n+    /// Float division that allows optimizations based on algebraic rules.\n+    /// May assume inputs are finite.\n+    #[cfg(not(stage0))]\n+    pub fn fdiv_fast<T>(a: T, b: T) -> T;\n+\n+    /// Float remainder that allows optimizations based on algebraic rules.\n+    /// May assume inputs are finite.\n+    #[cfg(not(stage0))]\n+    pub fn frem_fast<T>(a: T, b: T) -> T;\n+\n+\n     /// Returns the number of bits set in an integer type `T`\n     pub fn ctpop<T>(x: T) -> T;\n "}, {"sha": "c1b909bd877a85bd3d61bcf7601b494a25c454d1", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2dbac1fb8ed43cbcd160855803d50a51c38b8cee/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbac1fb8ed43cbcd160855803d50a51c38b8cee/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=2dbac1fb8ed43cbcd160855803d50a51c38b8cee", "patch": "@@ -1310,6 +1310,7 @@ extern {\n                          -> ValueRef;\n     pub fn LLVMBuildNot(B: BuilderRef, V: ValueRef, Name: *const c_char)\n                         -> ValueRef;\n+    pub fn LLVMRustSetHasUnsafeAlgebra(Instr: ValueRef);\n \n     /* Memory */\n     pub fn LLVMBuildAlloca(B: BuilderRef, Ty: TypeRef, Name: *const c_char)"}, {"sha": "53e64c086a8dbf2917a14a1653729c884d2d631a", "filename": "src/librustc_trans/trans/build.rs", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/2dbac1fb8ed43cbcd160855803d50a51c38b8cee/src%2Flibrustc_trans%2Ftrans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbac1fb8ed43cbcd160855803d50a51c38b8cee/src%2Flibrustc_trans%2Ftrans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbuild.rs?ref=2dbac1fb8ed43cbcd160855803d50a51c38b8cee", "patch": "@@ -221,6 +221,18 @@ pub fn FAdd(cx: Block,\n     B(cx).fadd(lhs, rhs)\n }\n \n+pub fn FAddFast(cx: Block,\n+                lhs: ValueRef,\n+                rhs: ValueRef,\n+                debug_loc: DebugLoc)\n+            -> ValueRef {\n+    if cx.unreachable.get() {\n+        return _Undef(lhs);\n+    }\n+    debug_loc.apply(cx.fcx);\n+    B(cx).fadd_fast(lhs, rhs)\n+}\n+\n pub fn Sub(cx: Block,\n            lhs: ValueRef,\n            rhs: ValueRef,\n@@ -269,6 +281,18 @@ pub fn FSub(cx: Block,\n     B(cx).fsub(lhs, rhs)\n }\n \n+pub fn FSubFast(cx: Block,\n+                lhs: ValueRef,\n+                rhs: ValueRef,\n+                debug_loc: DebugLoc)\n+            -> ValueRef {\n+    if cx.unreachable.get() {\n+        return _Undef(lhs);\n+    }\n+    debug_loc.apply(cx.fcx);\n+    B(cx).fsub_fast(lhs, rhs)\n+}\n+\n pub fn Mul(cx: Block,\n            lhs: ValueRef,\n            rhs: ValueRef,\n@@ -317,6 +341,18 @@ pub fn FMul(cx: Block,\n     B(cx).fmul(lhs, rhs)\n }\n \n+pub fn FMulFast(cx: Block,\n+                lhs: ValueRef,\n+                rhs: ValueRef,\n+                debug_loc: DebugLoc)\n+            -> ValueRef {\n+    if cx.unreachable.get() {\n+        return _Undef(lhs);\n+    }\n+    debug_loc.apply(cx.fcx);\n+    B(cx).fmul_fast(lhs, rhs)\n+}\n+\n pub fn UDiv(cx: Block,\n             lhs: ValueRef,\n             rhs: ValueRef,\n@@ -365,6 +401,18 @@ pub fn FDiv(cx: Block,\n     B(cx).fdiv(lhs, rhs)\n }\n \n+pub fn FDivFast(cx: Block,\n+                lhs: ValueRef,\n+                rhs: ValueRef,\n+                debug_loc: DebugLoc)\n+            -> ValueRef {\n+    if cx.unreachable.get() {\n+        return _Undef(lhs);\n+    }\n+    debug_loc.apply(cx.fcx);\n+    B(cx).fdiv_fast(lhs, rhs)\n+}\n+\n pub fn URem(cx: Block,\n             lhs: ValueRef,\n             rhs: ValueRef,\n@@ -401,6 +449,18 @@ pub fn FRem(cx: Block,\n     B(cx).frem(lhs, rhs)\n }\n \n+pub fn FRemFast(cx: Block,\n+                lhs: ValueRef,\n+                rhs: ValueRef,\n+                debug_loc: DebugLoc)\n+            -> ValueRef {\n+    if cx.unreachable.get() {\n+        return _Undef(lhs);\n+    }\n+    debug_loc.apply(cx.fcx);\n+    B(cx).frem_fast(lhs, rhs)\n+}\n+\n pub fn Shl(cx: Block,\n            lhs: ValueRef,\n            rhs: ValueRef,"}, {"sha": "869e9212b1cf6faa4075d149e93d5c309be5d496", "filename": "src/librustc_trans/trans/builder.rs", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/2dbac1fb8ed43cbcd160855803d50a51c38b8cee/src%2Flibrustc_trans%2Ftrans%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbac1fb8ed43cbcd160855803d50a51c38b8cee/src%2Flibrustc_trans%2Ftrans%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbuilder.rs?ref=2dbac1fb8ed43cbcd160855803d50a51c38b8cee", "patch": "@@ -226,6 +226,15 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         }\n     }\n \n+    pub fn fadd_fast(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef {\n+        self.count_insn(\"fadd\");\n+        unsafe {\n+            let instr = llvm::LLVMBuildFAdd(self.llbuilder, lhs, rhs, noname());\n+            llvm::LLVMRustSetHasUnsafeAlgebra(instr);\n+            instr\n+        }\n+    }\n+\n     pub fn sub(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef {\n         self.count_insn(\"sub\");\n         unsafe {\n@@ -254,6 +263,15 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         }\n     }\n \n+    pub fn fsub_fast(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef {\n+        self.count_insn(\"sub\");\n+        unsafe {\n+            let instr = llvm::LLVMBuildFSub(self.llbuilder, lhs, rhs, noname());\n+            llvm::LLVMRustSetHasUnsafeAlgebra(instr);\n+            instr\n+        }\n+    }\n+\n     pub fn mul(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef {\n         self.count_insn(\"mul\");\n         unsafe {\n@@ -282,6 +300,16 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         }\n     }\n \n+    pub fn fmul_fast(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef {\n+        self.count_insn(\"fmul\");\n+        unsafe {\n+            let instr = llvm::LLVMBuildFMul(self.llbuilder, lhs, rhs, noname());\n+            llvm::LLVMRustSetHasUnsafeAlgebra(instr);\n+            instr\n+        }\n+    }\n+\n+\n     pub fn udiv(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef {\n         self.count_insn(\"udiv\");\n         unsafe {\n@@ -310,6 +338,15 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         }\n     }\n \n+    pub fn fdiv_fast(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef {\n+        self.count_insn(\"fdiv\");\n+        unsafe {\n+            let instr = llvm::LLVMBuildFDiv(self.llbuilder, lhs, rhs, noname());\n+            llvm::LLVMRustSetHasUnsafeAlgebra(instr);\n+            instr\n+        }\n+    }\n+\n     pub fn urem(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef {\n         self.count_insn(\"urem\");\n         unsafe {\n@@ -331,6 +368,15 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         }\n     }\n \n+    pub fn frem_fast(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef {\n+        self.count_insn(\"frem\");\n+        unsafe {\n+            let instr = llvm::LLVMBuildFRem(self.llbuilder, lhs, rhs, noname());\n+            llvm::LLVMRustSetHasUnsafeAlgebra(instr);\n+            instr\n+        }\n+    }\n+\n     pub fn shl(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef {\n         self.count_insn(\"shl\");\n         unsafe {"}, {"sha": "0ad65e5dab4fd7ab43e8c11a6fbd96df61c6c449", "filename": "src/librustc_trans/trans/intrinsic.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/2dbac1fb8ed43cbcd160855803d50a51c38b8cee/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbac1fb8ed43cbcd160855803d50a51c38b8cee/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs?ref=2dbac1fb8ed43cbcd160855803d50a51c38b8cee", "patch": "@@ -658,6 +658,29 @@ pub fn trans_intrinsic_call<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n             }\n \n         },\n+        (_, \"fadd_fast\") | (_, \"fsub_fast\") | (_, \"fmul_fast\") | (_, \"fdiv_fast\") |\n+        (_, \"frem_fast\") => {\n+            let sty = &arg_tys[0].sty;\n+            match float_type_width(sty) {\n+                Some(_width) =>\n+                    match &*name {\n+                        \"fadd_fast\" => FAddFast(bcx, llargs[0], llargs[1], call_debug_location),\n+                        \"fsub_fast\" => FSubFast(bcx, llargs[0], llargs[1], call_debug_location),\n+                        \"fmul_fast\" => FMulFast(bcx, llargs[0], llargs[1], call_debug_location),\n+                        \"fdiv_fast\" => FDivFast(bcx, llargs[0], llargs[1], call_debug_location),\n+                        \"frem_fast\" => FRemFast(bcx, llargs[0], llargs[1], call_debug_location),\n+                        _ => unreachable!(),\n+                    },\n+                None => {\n+                    span_invalid_monomorphization_error(\n+                        tcx.sess, span,\n+                        &format!(\"invalid monomorphization of `{}` intrinsic: \\\n+                                  expected basic float type, found `{}`\", name, sty));\n+                        C_null(llret_ty)\n+                }\n+            }\n+\n+        },\n \n \n         (_, \"return_address\") => {\n@@ -1700,3 +1723,17 @@ fn int_type_width_signed<'tcx>(sty: &ty::TypeVariants<'tcx>, ccx: &CrateContext)\n         _ => None,\n     }\n }\n+\n+// Returns the width of a float TypeVariant\n+// Returns None if the type is not a float\n+fn float_type_width<'tcx>(sty: &ty::TypeVariants<'tcx>)\n+        -> Option<u64> {\n+    use rustc::middle::ty::TyFloat;\n+    match *sty {\n+        TyFloat(t) => Some(match t {\n+            ast::FloatTy::F32 => 32,\n+            ast::FloatTy::F64 => 64,\n+        }),\n+        _ => None,\n+    }\n+}"}, {"sha": "3282d17d3a0c2986ef1895c85c7ebab185d30b6f", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dbac1fb8ed43cbcd160855803d50a51c38b8cee/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbac1fb8ed43cbcd160855803d50a51c38b8cee/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=2dbac1fb8ed43cbcd160855803d50a51c38b8cee", "patch": "@@ -280,6 +280,8 @@ pub fn check_intrinsic_type(ccx: &CrateCtxt, it: &hir::ForeignItem) {\n \n             \"overflowing_add\" | \"overflowing_sub\" | \"overflowing_mul\" =>\n                 (1, vec![param(ccx, 0), param(ccx, 0)], param(ccx, 0)),\n+            \"fadd_fast\" | \"fsub_fast\" | \"fmul_fast\" | \"fdiv_fast\" | \"frem_fast\" =>\n+                (1, vec![param(ccx, 0), param(ccx, 0)], param(ccx, 0)),\n \n             \"return_address\" => (0, vec![], tcx.mk_imm_ptr(tcx.types.u8)),\n "}, {"sha": "f488a517b23fcc292c80ad29cae66445c1c124e2", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2dbac1fb8ed43cbcd160855803d50a51c38b8cee/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/2dbac1fb8ed43cbcd160855803d50a51c38b8cee/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=2dbac1fb8ed43cbcd160855803d50a51c38b8cee", "patch": "@@ -164,6 +164,11 @@ extern \"C\" void LLVMRemoveFunctionAttrString(LLVMValueRef fn, unsigned index, co\n                                           to_remove));\n }\n \n+// enable fpmath flag UnsafeAlgebra\n+extern \"C\" void LLVMRustSetHasUnsafeAlgebra(LLVMValueRef Instr) {\n+    unwrap<Instruction>(Instr)->setHasUnsafeAlgebra(true);\n+}\n+\n extern \"C\" LLVMValueRef LLVMBuildAtomicLoad(LLVMBuilderRef B,\n                                             LLVMValueRef source,\n                                             const char* Name,"}, {"sha": "bc458d45446fe7ab9292c5003d033064fcb8b323", "filename": "src/test/codegen/float_math.rs", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/2dbac1fb8ed43cbcd160855803d50a51c38b8cee/src%2Ftest%2Fcodegen%2Ffloat_math.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbac1fb8ed43cbcd160855803d50a51c38b8cee/src%2Ftest%2Fcodegen%2Ffloat_math.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Ffloat_math.rs?ref=2dbac1fb8ed43cbcd160855803d50a51c38b8cee", "patch": "@@ -0,0 +1,60 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -C no-prepopulate-passes\n+\n+#![crate_type = \"lib\"]\n+#![feature(core_intrinsics)]\n+\n+use std::intrinsics::{fadd_fast, fsub_fast, fmul_fast, fdiv_fast, frem_fast};\n+\n+// CHECK-LABEL: @add\n+#[no_mangle]\n+pub fn add(x: f32, y: f32) -> f32 {\n+// CHECK: fadd float\n+// CHECK-NOT fast\n+    x + y\n+}\n+\n+// CHECK-LABEL: @addition\n+#[no_mangle]\n+pub fn addition(x: f32, y: f32) -> f32 {\n+// CHECK: fadd fast float\n+    unsafe {\n+        fadd_fast(x, y)\n+    }\n+}\n+\n+// CHECK-LABEL: @subtraction\n+#[no_mangle]\n+pub fn subtraction(x: f32, y: f32) -> f32 {\n+// CHECK: fsub fast float\n+    unsafe {\n+        fsub_fast(x, y)\n+    }\n+}\n+\n+// CHECK-LABEL: @multiplication\n+#[no_mangle]\n+pub fn multiplication(x: f32, y: f32) -> f32 {\n+// CHECK: fmul fast float\n+    unsafe {\n+        fmul_fast(x, y)\n+    }\n+}\n+\n+// CHECK-LABEL: @division\n+#[no_mangle]\n+pub fn division(x: f32, y: f32) -> f32 {\n+// CHECK: fdiv fast float\n+    unsafe {\n+        fdiv_fast(x, y)\n+    }\n+}"}, {"sha": "396b7321f45d0af954676478488616f2a5626411", "filename": "src/test/run-pass/float_math.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2dbac1fb8ed43cbcd160855803d50a51c38b8cee/src%2Ftest%2Frun-pass%2Ffloat_math.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbac1fb8ed43cbcd160855803d50a51c38b8cee/src%2Ftest%2Frun-pass%2Ffloat_math.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffloat_math.rs?ref=2dbac1fb8ed43cbcd160855803d50a51c38b8cee", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(core_intrinsics)]\n+\n+use std::intrinsics::{fadd_fast, fsub_fast, fmul_fast, fdiv_fast, frem_fast};\n+\n+fn main() {\n+    // make sure they all map to the correct operation\n+    unsafe {\n+        assert_eq!(fadd_fast(1., 2.), 1. + 2.);\n+        assert_eq!(fsub_fast(1., 2.), 1. - 2.);\n+        assert_eq!(fmul_fast(2., 3.), 2. * 3.);\n+        assert_eq!(fdiv_fast(10., 5.), 10. / 5.);\n+        assert_eq!(frem_fast(10., 5.), 10. % 5.);\n+    }\n+}"}]}