{"sha": "d38aab397e3295ead5869f84cd54044c1759c6d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzOGFhYjM5N2UzMjk1ZWFkNTg2OWY4NGNkNTQwNDRjMTc1OWM2ZDc=", "commit": {"author": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2015-02-07T13:24:34Z"}, "committer": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2015-02-22T01:14:25Z"}, "message": "Rename DefTrait to DefaultImpl", "tree": {"sha": "0daf6cb9a56ce6ae0fc28dc86c153e9761b67657", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0daf6cb9a56ce6ae0fc28dc86c153e9761b67657"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d38aab397e3295ead5869f84cd54044c1759c6d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d38aab397e3295ead5869f84cd54044c1759c6d7", "html_url": "https://github.com/rust-lang/rust/commit/d38aab397e3295ead5869f84cd54044c1759c6d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d38aab397e3295ead5869f84cd54044c1759c6d7/comments", "author": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e382132a57953e09bbb4e41152107032d69a2cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e382132a57953e09bbb4e41152107032d69a2cf", "html_url": "https://github.com/rust-lang/rust/commit/7e382132a57953e09bbb4e41152107032d69a2cf"}], "stats": {"total": 186, "additions": 93, "deletions": 93}, "files": [{"sha": "b5738650ccb41a6c160c0c540be4023e93480806", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d38aab397e3295ead5869f84cd54044c1759c6d7/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d38aab397e3295ead5869f84cd54044c1759c6d7/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=d38aab397e3295ead5869f84cd54044c1759c6d7", "patch": "@@ -126,7 +126,7 @@ enum Family {\n     TupleVariant,          // v\n     StructVariant,         // V\n     Impl,                  // i\n-    DefTrait,              // d\n+    DefaultImpl,              // d\n     Trait,                 // I\n     Struct,                // S\n     PublicField,           // g\n@@ -152,7 +152,7 @@ fn item_family(item: rbml::Doc) -> Family {\n       'v' => TupleVariant,\n       'V' => StructVariant,\n       'i' => Impl,\n-      'd' => DefTrait,\n+      'd' => DefaultImpl,\n       'I' => Trait,\n       'S' => Struct,\n       'g' => PublicField,\n@@ -357,9 +357,9 @@ fn item_to_def_like(item: rbml::Doc, did: ast::DefId, cnum: ast::CrateNum)\n             let enum_did = item_reqd_and_translated_parent_item(cnum, item);\n             DlDef(def::DefVariant(enum_did, did, false))\n         }\n-        Trait => DlDef(def::DefTrait(did)),\n+        Trait => DlDef(def::DefaultImpl(did)),\n         Enum => DlDef(def::DefTy(did, true)),\n-        Impl | DefTrait => DlImpl(did),\n+        Impl | DefaultImpl => DlImpl(did),\n         PublicField | InheritedField => DlField,\n     }\n }\n@@ -482,7 +482,7 @@ pub fn get_impl_trait<'tcx>(cdata: Cmd,\n     let item_doc = lookup_item(id, cdata.data());\n     let fam = item_family(item_doc);\n     match fam {\n-        Family::Impl | Family::DefTrait => {\n+        Family::Impl | Family::DefaultImpl => {\n             reader::maybe_get_doc(item_doc, tag_item_trait_ref).map(|tp| {\n                 doc_trait_ref(tp, tcx, cdata)\n             })\n@@ -1358,7 +1358,7 @@ pub fn get_trait_of_item(cdata: Cmd, id: ast::NodeId, tcx: &ty::ctxt)\n     let parent_item_doc = lookup_item(parent_item_id.node, cdata.data());\n     match item_family(parent_item_doc) {\n         Trait => Some(item_def_id(parent_item_doc, cdata)),\n-        Impl | DefTrait => {\n+        Impl | DefaultImpl => {\n             reader::maybe_get_doc(parent_item_doc, tag_item_trait_ref)\n                 .map(|_| item_trait_ref(parent_item_doc, tcx, cdata).def_id)\n         }\n@@ -1568,7 +1568,7 @@ pub fn is_associated_type(cdata: Cmd, id: ast::NodeId) -> bool {\n pub fn is_default_trait<'tcx>(cdata: Cmd, id: ast::NodeId) -> bool {\n     let item_doc = lookup_item(id, cdata.data());\n     match item_family(item_doc) {\n-        Family::DefTrait => true,\n+        Family::DefaultImpl => true,\n         _ => false\n     }\n }"}, {"sha": "df4a556a87036f5da5698af927e7360e2eacb3ea", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d38aab397e3295ead5869f84cd54044c1759c6d7/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d38aab397e3295ead5869f84cd54044c1759c6d7/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=d38aab397e3295ead5869f84cd54044c1759c6d7", "patch": "@@ -1201,7 +1201,7 @@ fn encode_info_for_item(ecx: &EncodeContext,\n             None => {}\n         }\n       }\n-      ast::ItemDefTrait(unsafety, ref ast_trait_ref) => {\n+      ast::ItemDefaultImpl(unsafety, ref ast_trait_ref) => {\n           add_to_index(item, rbml_w, index);\n           rbml_w.start_tag(tag_items_data_item);\n           encode_def_id(rbml_w, def_id);"}, {"sha": "cbed978d16f8613818cfb239c3d8b369fbeefc61", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d38aab397e3295ead5869f84cd54044c1759c6d7/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d38aab397e3295ead5869f84cd54044c1759c6d7/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=d38aab397e3295ead5869f84cd54044c1759c6d7", "patch": "@@ -440,7 +440,7 @@ impl tr for def::Def {\n           def::DefVariant(e_did, v_did, is_s) => {\n             def::DefVariant(e_did.tr(dcx), v_did.tr(dcx), is_s)\n           },\n-          def::DefTrait(did) => def::DefTrait(did.tr(dcx)),\n+          def::DefaultImpl(did) => def::DefaultImpl(did.tr(dcx)),\n           def::DefTy(did, is_enum) => def::DefTy(did.tr(dcx), is_enum),\n           def::DefAssociatedTy(did) => def::DefAssociatedTy(did.tr(dcx)),\n           def::DefAssociatedPath(def::TyParamProvenance::FromSelf(did), ident) =>"}, {"sha": "009bfaf8728f8012e43e928e12f5d6e43d7e5d26", "filename": "src/librustc/middle/def.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d38aab397e3295ead5869f84cd54044c1759c6d7/src%2Flibrustc%2Fmiddle%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d38aab397e3295ead5869f84cd54044c1759c6d7/src%2Flibrustc%2Fmiddle%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdef.rs?ref=d38aab397e3295ead5869f84cd54044c1759c6d7", "patch": "@@ -38,7 +38,7 @@ pub enum Def {\n     // type `U` (indicated by the Ident).\n     // FIXME(#20301) -- should use Name\n     DefAssociatedPath(TyParamProvenance, ast::Ident),\n-    DefTrait(ast::DefId),\n+    DefaultImpl(ast::DefId),\n     DefPrimTy(ast::PrimTy),\n     DefTyParam(ParamSpace, u32, ast::DefId, ast::Name),\n     DefUse(ast::DefId),\n@@ -135,7 +135,7 @@ impl Def {\n             DefFn(id, _) | DefStaticMethod(id, _) | DefMod(id) |\n             DefForeignMod(id) | DefStatic(id, _) |\n             DefVariant(_, id, _) | DefTy(id, _) | DefAssociatedTy(id) |\n-            DefTyParam(_, _, id, _) | DefUse(id) | DefStruct(id) | DefTrait(id) |\n+            DefTyParam(_, _, id, _) | DefUse(id) | DefStruct(id) | DefaultImpl(id) |\n             DefMethod(id, _, _) | DefConst(id) |\n             DefAssociatedPath(TyParamProvenance::FromSelf(id), _) |\n             DefAssociatedPath(TyParamProvenance::FromParam(id), _) => {"}, {"sha": "ab6dd927782f1aad7a75aec89d1946a407883ad3", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d38aab397e3295ead5869f84cd54044c1759c6d7/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d38aab397e3295ead5869f84cd54044c1759c6d7/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=d38aab397e3295ead5869f84cd54044c1759c6d7", "patch": "@@ -579,7 +579,7 @@ impl<'t,'tcx,TYPER:Typer<'tcx>> MemCategorizationContext<'t,TYPER> {\n                 Ok(self.cat_rvalue_node(id, span, expr_ty))\n           }\n           def::DefMod(_) | def::DefForeignMod(_) | def::DefUse(_) |\n-          def::DefTrait(_) | def::DefTy(..) | def::DefPrimTy(_) |\n+          def::DefaultImpl(_) | def::DefTy(..) | def::DefPrimTy(_) |\n           def::DefTyParam(..) | def::DefTyParamBinder(..) | def::DefRegion(_) |\n           def::DefLabel(_) | def::DefSelfTy(..) |\n           def::DefAssociatedTy(..) | def::DefAssociatedPath(..)=> {"}, {"sha": "58daad2176de766424a44177263a44fbfc850083", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d38aab397e3295ead5869f84cd54044c1759c6d7/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d38aab397e3295ead5869f84cd54044c1759c6d7/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=d38aab397e3295ead5869f84cd54044c1759c6d7", "patch": "@@ -302,7 +302,7 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n                     ast::ItemMod(..) | ast::ItemForeignMod(..) |\n                     ast::ItemImpl(..) | ast::ItemTrait(..) |\n                     ast::ItemStruct(..) | ast::ItemEnum(..) |\n-                    ast::ItemDefTrait(..) => {}\n+                    ast::ItemDefaultImpl(..) => {}\n \n                     _ => {\n                         self.tcx.sess.span_bug(item.span,"}, {"sha": "bef98f5bd02beecb7a2199137f8c6a99dafb131d", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d38aab397e3295ead5869f84cd54044c1759c6d7/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d38aab397e3295ead5869f84cd54044c1759c6d7/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=d38aab397e3295ead5869f84cd54044c1759c6d7", "patch": "@@ -115,7 +115,7 @@ impl<'a, 'v> Visitor<'v> for LifetimeContext<'a> {\n                 ast::ItemUse(_) |\n                 ast::ItemMod(..) |\n                 ast::ItemMac(..) |\n-                ast::ItemDefTrait(..) |\n+                ast::ItemDefaultImpl(..) |\n                 ast::ItemForeignMod(..) |\n                 ast::ItemStatic(..) |\n                 ast::ItemConst(..) => {\n@@ -169,7 +169,7 @@ impl<'a, 'v> Visitor<'v> for LifetimeContext<'a> {\n                 // if this path references a trait, then this will resolve to\n                 // a trait ref, which introduces a binding scope.\n                 match self.def_map.borrow().get(&id) {\n-                    Some(&def::DefTrait(..)) => {\n+                    Some(&def::DefaultImpl(..)) => {\n                         self.with(LateScope(&Vec::new(), self.scope), |_, this| {\n                             this.visit_path(path, id);\n                         });"}, {"sha": "c400dd5a78a5a087eaad02ad926200eb58c5d4ff", "filename": "src/librustc/middle/traits/mod.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d38aab397e3295ead5869f84cd54044c1759c6d7/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d38aab397e3295ead5869f84cd54044c1759c6d7/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs?ref=d38aab397e3295ead5869f84cd54044c1759c6d7", "patch": "@@ -222,7 +222,7 @@ pub enum Vtable<'tcx, N> {\n     VtableImpl(VtableImplData<'tcx, N>),\n \n     /// Vtable for default trait implementations\n-    VtableDefaultTrait(VtableDefaultTraitData<N>),\n+    VtableDefaultImpl(VtableDefaultImplData<N>),\n \n     /// Successful resolution to an obligation provided by the caller\n     /// for some type parameter. The `Vec<N>` represents the\n@@ -263,7 +263,7 @@ pub struct VtableImplData<'tcx, N> {\n }\n \n #[derive(Debug,Clone)]\n-pub struct VtableDefaultTraitData<N> {\n+pub struct VtableDefaultImplData<N> {\n     pub trait_def_id: ast::DefId,\n     pub nested: Vec<N>\n }\n@@ -525,15 +525,15 @@ impl<'tcx, N> Vtable<'tcx, N> {\n             VtableParam(ref n) => n.iter(),\n             VtableBuiltin(ref i) => i.iter_nested(),\n             VtableObject(_) |\n-            VtableDefaultTrait(..) | VtableFnPointer(..) |\n+            VtableDefaultImpl(..) | VtableFnPointer(..) |\n             VtableClosure(..) => (&[]).iter(),\n         }\n     }\n \n     pub fn map_nested<M, F>(&self, op: F) -> Vtable<'tcx, M> where F: FnMut(&N) -> M {\n         match *self {\n             VtableImpl(ref i) => VtableImpl(i.map_nested(op)),\n-            VtableDefaultTrait(ref t) => VtableDefaultTrait(t.map_nested(op)),\n+            VtableDefaultImpl(ref t) => VtableDefaultImpl(t.map_nested(op)),\n             VtableFnPointer(ref sig) => VtableFnPointer((*sig).clone()),\n             VtableClosure(d, ref s) => VtableClosure(d, s.clone()),\n             VtableParam(ref n) => VtableParam(n.iter().map(op).collect()),\n@@ -549,7 +549,7 @@ impl<'tcx, N> Vtable<'tcx, N> {\n             VtableImpl(i) => VtableImpl(i.map_move_nested(op)),\n             VtableFnPointer(sig) => VtableFnPointer(sig),\n             VtableClosure(d, s) => VtableClosure(d, s),\n-            VtableDefaultTrait(t) => VtableDefaultTrait(t.map_move_nested(op)),\n+            VtableDefaultImpl(t) => VtableDefaultImpl(t.map_move_nested(op)),\n             VtableParam(n) => VtableParam(n.into_iter().map(op).collect()),\n             VtableObject(p) => VtableObject(p),\n             VtableBuiltin(no) => VtableBuiltin(no.map_move_nested(op)),\n@@ -584,25 +584,25 @@ impl<'tcx, N> VtableImplData<'tcx, N> {\n     }\n }\n \n-impl<N> VtableDefaultTraitData<N> {\n+impl<N> VtableDefaultImplData<N> {\n     pub fn iter_nested(&self) -> Iter<N> {\n         self.nested.iter()\n     }\n \n-    pub fn map_nested<M, F>(&self, op: F) -> VtableDefaultTraitData<M> where\n+    pub fn map_nested<M, F>(&self, op: F) -> VtableDefaultImplData<M> where\n         F: FnMut(&N) -> M,\n     {\n-        VtableDefaultTraitData {\n+        VtableDefaultImplData {\n             trait_def_id: self.trait_def_id,\n             nested: self.nested.iter().map(op).collect()\n         }\n     }\n \n-    pub fn map_move_nested<M, F>(self, op: F) -> VtableDefaultTraitData<M> where\n+    pub fn map_move_nested<M, F>(self, op: F) -> VtableDefaultImplData<M> where\n         F: FnMut(N) -> M,\n     {\n-        let VtableDefaultTraitData { trait_def_id, nested } = self;\n-        VtableDefaultTraitData {\n+        let VtableDefaultImplData { trait_def_id, nested } = self;\n+        VtableDefaultImplData {\n             trait_def_id: trait_def_id,\n             nested: nested.into_iter().map(op).collect()\n         }"}, {"sha": "7d4febb38e678186ff6b5380f55e53ec20bb1a2c", "filename": "src/librustc/middle/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d38aab397e3295ead5869f84cd54044c1759c6d7/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d38aab397e3295ead5869f84cd54044c1759c6d7/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs?ref=d38aab397e3295ead5869f84cd54044c1759c6d7", "patch": "@@ -709,7 +709,7 @@ fn assemble_candidates_from_impls<'cx,'tcx>(\n             // projection. And the projection where clause is handled\n             // in `assemble_candidates_from_param_env`.\n         }\n-        super::VtableDefaultTrait(..) |\n+        super::VtableDefaultImpl(..) |\n         super::VtableBuiltin(..) => {\n             // These traits have no associated types.\n             selcx.tcx().sess.span_bug("}, {"sha": "7f1119fc3440c13aa620c533bfda1e53f499d3ae", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d38aab397e3295ead5869f84cd54044c1759c6d7/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d38aab397e3295ead5869f84cd54044c1759c6d7/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=d38aab397e3295ead5869f84cd54044c1759c6d7", "patch": "@@ -26,8 +26,8 @@ use super::{SelectionError, Unimplemented, Overflow, OutputTypeParameterMismatch\n use super::{Selection};\n use super::{SelectionResult};\n use super::{VtableBuiltin, VtableImpl, VtableParam, VtableClosure,\n-            VtableFnPointer, VtableObject, VtableDefaultTrait};\n-use super::{VtableImplData, VtableObjectData, VtableBuiltinData, VtableDefaultTraitData};\n+            VtableFnPointer, VtableObject, VtableDefaultImpl};\n+use super::{VtableImplData, VtableObjectData, VtableBuiltinData, VtableDefaultImplData};\n use super::object_safety;\n use super::{util};\n \n@@ -136,7 +136,7 @@ enum SelectionCandidate<'tcx> {\n     BuiltinCandidate(ty::BuiltinBound),\n     ParamCandidate(ty::PolyTraitRef<'tcx>),\n     ImplCandidate(ast::DefId),\n-    DefaultTraitCandidate(ast::DefId),\n+    DefaultImplCandidate(ast::DefId),\n \n     /// This is a trait matching with a projected type as `Self`, and\n     /// we found an applicable bound in the trait definition.\n@@ -1150,7 +1150,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         }\n \n         if ty::trait_has_default_impl(self.tcx(), def_id) {\n-            candidates.vec.push(DefaultTraitCandidate(def_id.clone()))\n+            candidates.vec.push(DefaultImplCandidate(def_id.clone()))\n         }\n \n         Ok(())\n@@ -1275,7 +1275,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 // #18453.\n                 true\n             }\n-            (&DefaultTraitCandidate(_), _) => {\n+            (&DefaultImplCandidate(_), _) => {\n                 // Prefer other candidates over default implementations.\n                 true\n             }\n@@ -1728,9 +1728,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 Ok(VtableParam(obligations))\n             }\n \n-            DefaultTraitCandidate(trait_def_id) => {\n+            DefaultImplCandidate(trait_def_id) => {\n                 let data = try!(self.confirm_default_impl_candidate(obligation, trait_def_id));\n-                Ok(VtableDefaultTrait(data))\n+                Ok(VtableDefaultImpl(data))\n             }\n \n             ImplCandidate(impl_def_id) => {\n@@ -1868,7 +1868,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     fn confirm_default_impl_candidate(&mut self,\n                               obligation: &TraitObligation<'tcx>,\n                               impl_def_id: ast::DefId)\n-                              -> Result<VtableDefaultTraitData<PredicateObligation<'tcx>>,\n+                              -> Result<VtableDefaultImplData<PredicateObligation<'tcx>>,\n                                         SelectionError<'tcx>>\n     {\n         debug!(\"confirm_default_impl_candidate({}, {})\",\n@@ -1884,7 +1884,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                            obligation: &TraitObligation<'tcx>,\n                            trait_def_id: ast::DefId,\n                            nested: Vec<Ty<'tcx>>)\n-                           -> VtableDefaultTraitData<PredicateObligation<'tcx>>\n+                           -> VtableDefaultImplData<PredicateObligation<'tcx>>\n     {\n         let derived_cause = self.derived_cause(obligation, ImplDerivedObligation);\n         let obligations = nested.iter().map(|&nested_ty| {\n@@ -1920,7 +1920,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         debug!(\"vtable_default_impl_data: obligations={}\", obligations.repr(self.tcx()));\n \n-        VtableDefaultTraitData {\n+        VtableDefaultImplData {\n             trait_def_id: trait_def_id,\n             nested: obligations\n         }\n@@ -2456,7 +2456,7 @@ impl<'tcx> Repr<'tcx> for SelectionCandidate<'tcx> {\n             BuiltinCandidate(b) => format!(\"BuiltinCandidate({:?})\", b),\n             ParamCandidate(ref a) => format!(\"ParamCandidate({})\", a.repr(tcx)),\n             ImplCandidate(a) => format!(\"ImplCandidate({})\", a.repr(tcx)),\n-            DefaultTraitCandidate(t) => format!(\"DefaultTraitCandidate({:?})\", t),\n+            DefaultImplCandidate(t) => format!(\"DefaultImplCandidate({:?})\", t),\n             ProjectionCandidate => format!(\"ProjectionCandidate\"),\n             FnPointerCandidate => format!(\"FnPointerCandidate\"),\n             ObjectCandidate => {"}, {"sha": "0308604aa8be53d7f909d0951f7ad0d4ed3d6545", "filename": "src/librustc/middle/traits/util.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d38aab397e3295ead5869f84cd54044c1759c6d7/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d38aab397e3295ead5869f84cd54044c1759c6d7/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs?ref=d38aab397e3295ead5869f84cd54044c1759c6d7", "patch": "@@ -20,7 +20,7 @@ use util::nodemap::FnvHashSet;\n use util::ppaux::Repr;\n \n use super::{Obligation, ObligationCause, PredicateObligation,\n-            VtableImpl, VtableParam, VtableImplData, VtableDefaultTraitData};\n+            VtableImpl, VtableParam, VtableImplData, VtableDefaultImplData};\n \n struct PredicateSet<'a,'tcx:'a> {\n     tcx: &'a ty::ctxt<'tcx>,\n@@ -469,7 +469,7 @@ impl<'tcx, N:Repr<'tcx>> Repr<'tcx> for super::Vtable<'tcx, N> {\n             super::VtableImpl(ref v) =>\n                 v.repr(tcx),\n \n-            super::VtableDefaultTrait(ref t) =>\n+            super::VtableDefaultImpl(ref t) =>\n                 t.repr(tcx),\n \n             super::VtableClosure(ref d, ref s) =>\n@@ -511,9 +511,9 @@ impl<'tcx, N:Repr<'tcx>> Repr<'tcx> for super::VtableBuiltinData<N> {\n     }\n }\n \n-impl<'tcx, N:Repr<'tcx>> Repr<'tcx> for super::VtableDefaultTraitData<N> {\n+impl<'tcx, N:Repr<'tcx>> Repr<'tcx> for super::VtableDefaultImplData<N> {\n     fn repr(&self, tcx: &ty::ctxt<'tcx>) -> String {\n-        format!(\"VtableDefaultTraitData(trait_def_id={}, nested={})\",\n+        format!(\"VtableDefaultImplData(trait_def_id={}, nested={})\",\n                 self.trait_def_id.repr(tcx),\n                 self.nested.repr(tcx))\n     }"}, {"sha": "7b70240f695920d3173bb568ac22146066e9e066", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d38aab397e3295ead5869f84cd54044c1759c6d7/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d38aab397e3295ead5869f84cd54044c1759c6d7/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=d38aab397e3295ead5869f84cd54044c1759c6d7", "patch": "@@ -5175,7 +5175,7 @@ pub fn impl_trait_ref<'tcx>(cx: &ctxt<'tcx>, id: ast::DefId)\n                                 &None => None\n                             }\n                         }\n-                        ast::ItemDefTrait(_, ref ast_trait_ref) => {\n+                        ast::ItemDefaultImpl(_, ref ast_trait_ref) => {\n                             Some(ty::node_id_to_trait_ref(cx, ast_trait_ref.ref_id))\n                         }\n                         _ => None"}, {"sha": "92b0ea905accf96e1dc831ce3fec05ec333e9dd9", "filename": "src/librustc/middle/ty_fold.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d38aab397e3295ead5869f84cd54044c1759c6d7/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d38aab397e3295ead5869f84cd54044c1759c6d7/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_fold.rs?ref=d38aab397e3295ead5869f84cd54044c1759c6d7", "patch": "@@ -507,9 +507,9 @@ impl<'tcx, N: TypeFoldable<'tcx>> TypeFoldable<'tcx> for traits::VtableImplData<\n     }\n }\n \n-impl<'tcx, N: TypeFoldable<'tcx>> TypeFoldable<'tcx> for traits::VtableDefaultTraitData<N> {\n-    fn fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> traits::VtableDefaultTraitData<N> {\n-        traits::VtableDefaultTraitData {\n+impl<'tcx, N: TypeFoldable<'tcx>> TypeFoldable<'tcx> for traits::VtableDefaultImplData<N> {\n+    fn fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> traits::VtableDefaultImplData<N> {\n+        traits::VtableDefaultImplData {\n             trait_def_id: self.trait_def_id,\n             nested: self.nested.fold_with(folder),\n         }\n@@ -528,7 +528,7 @@ impl<'tcx, N: TypeFoldable<'tcx>> TypeFoldable<'tcx> for traits::Vtable<'tcx, N>\n     fn fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> traits::Vtable<'tcx, N> {\n         match *self {\n             traits::VtableImpl(ref v) => traits::VtableImpl(v.fold_with(folder)),\n-            traits::VtableDefaultTrait(ref t) => traits::VtableDefaultTrait(t.fold_with(folder)),\n+            traits::VtableDefaultImpl(ref t) => traits::VtableDefaultImpl(t.fold_with(folder)),\n             traits::VtableClosure(d, ref s) => {\n                 traits::VtableClosure(d, s.fold_with(folder))\n             }"}, {"sha": "ddf77a9030ce9fe8e436045e2c70363e31e8a447", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d38aab397e3295ead5869f84cd54044c1759c6d7/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d38aab397e3295ead5869f84cd54044c1759c6d7/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=d38aab397e3295ead5869f84cd54044c1759c6d7", "patch": "@@ -209,7 +209,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EmbargoVisitor<'a, 'tcx> {\n         match item.node {\n             // impls/extern blocks do not break the \"public chain\" because they\n             // cannot have visibility qualifiers on them anyway\n-            ast::ItemImpl(..) | ast::ItemDefTrait(..) | ast::ItemForeignMod(..) => {}\n+            ast::ItemImpl(..) | ast::ItemDefaultImpl(..) | ast::ItemForeignMod(..) => {}\n \n             // Traits are a little special in that even if they themselves are\n             // not public they may still be exported.\n@@ -802,7 +802,7 @@ impl<'a, 'tcx> PrivacyVisitor<'a, 'tcx> {\n             def::DefVariant(..) => ck(\"variant\"),\n             def::DefTy(_, false) => ck(\"type\"),\n             def::DefTy(_, true) => ck(\"enum\"),\n-            def::DefTrait(..) => ck(\"trait\"),\n+            def::DefaultImpl(..) => ck(\"trait\"),\n             def::DefStruct(..) => ck(\"struct\"),\n             def::DefMethod(_, Some(..), _) => ck(\"trait method\"),\n             def::DefMethod(..) => ck(\"method\"),\n@@ -1145,7 +1145,7 @@ impl<'a, 'tcx> SanePrivacyVisitor<'a, 'tcx> {\n                 }\n             }\n \n-            ast::ItemDefTrait(..) |\n+            ast::ItemDefaultImpl(..) |\n             ast::ItemConst(..) | ast::ItemStatic(..) | ast::ItemStruct(..) |\n             ast::ItemFn(..) | ast::ItemMod(..) | ast::ItemTy(..) |\n             ast::ItemExternCrate(_) | ast::ItemUse(_) | ast::ItemMac(..) => {}\n@@ -1205,7 +1205,7 @@ impl<'a, 'tcx> SanePrivacyVisitor<'a, 'tcx> {\n                 }\n             }\n \n-            ast::ItemDefTrait(..) | ast::ItemExternCrate(_) | ast::ItemUse(_) |\n+            ast::ItemDefaultImpl(..) | ast::ItemExternCrate(_) | ast::ItemUse(_) |\n             ast::ItemStatic(..) | ast::ItemConst(..) |\n             ast::ItemFn(..) | ast::ItemMod(..) | ast::ItemTy(..) |\n             ast::ItemMac(..) => {}"}, {"sha": "8696db212f9c01e3168c62b05789b74ed566beb1", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d38aab397e3295ead5869f84cd54044c1759c6d7/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d38aab397e3295ead5869f84cd54044c1759c6d7/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=d38aab397e3295ead5869f84cd54044c1759c6d7", "patch": "@@ -40,7 +40,7 @@ use syntax::ast::{Block, Crate};\n use syntax::ast::{DeclItem, DefId};\n use syntax::ast::{ForeignItem, ForeignItemFn, ForeignItemStatic};\n use syntax::ast::{Item, ItemConst, ItemEnum, ItemExternCrate, ItemFn};\n-use syntax::ast::{ItemForeignMod, ItemImpl, ItemMac, ItemMod, ItemStatic, ItemDefTrait};\n+use syntax::ast::{ItemForeignMod, ItemImpl, ItemMac, ItemMod, ItemStatic, ItemDefaultImpl};\n use syntax::ast::{ItemStruct, ItemTrait, ItemTy, ItemUse};\n use syntax::ast::{MethodImplItem, Name, NamedField, NodeId};\n use syntax::ast::{PathListIdent, PathListMod};\n@@ -656,7 +656,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                 parent.clone()\n             }\n \n-            ItemDefTrait(_, _) |\n+            ItemDefaultImpl(_, _) |\n             ItemImpl(_, _, _, Some(_), _, _) => parent.clone(),\n \n             ItemTrait(_, _, _, ref items) => {\n@@ -736,7 +736,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                     self.trait_item_map.insert((name, def_id), kind);\n                 }\n \n-                name_bindings.define_type(DefTrait(def_id), sp, modifiers);\n+                name_bindings.define_type(DefaultImpl(def_id), sp, modifiers);\n                 parent.clone()\n             }\n             ItemMac(..) => parent.clone()\n@@ -918,7 +918,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n             }\n             child_name_bindings.define_value(def, DUMMY_SP, modifiers);\n           }\n-          DefTrait(def_id) => {\n+          DefaultImpl(def_id) => {\n               debug!(\"(building reduced graph for external \\\n                       crate) building type {}\", final_ident);\n "}, {"sha": "ea99ad6a18ae88673c318e2b7ac61315e6e04722", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d38aab397e3295ead5869f84cd54044c1759c6d7/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d38aab397e3295ead5869f84cd54044c1759c6d7/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=d38aab397e3295ead5869f84cd54044c1759c6d7", "patch": "@@ -70,7 +70,7 @@ use syntax::ast::{ExprClosure, ExprLoop, ExprWhile, ExprMethodCall};\n use syntax::ast::{ExprPath, ExprQPath, ExprStruct, FnDecl};\n use syntax::ast::{ForeignItemFn, ForeignItemStatic, Generics};\n use syntax::ast::{Ident, ImplItem, Item, ItemConst, ItemEnum, ItemExternCrate};\n-use syntax::ast::{ItemFn, ItemForeignMod, ItemImpl, ItemMac, ItemMod, ItemStatic, ItemDefTrait};\n+use syntax::ast::{ItemFn, ItemForeignMod, ItemImpl, ItemMac, ItemMod, ItemStatic, ItemDefaultImpl};\n use syntax::ast::{ItemStruct, ItemTrait, ItemTy, ItemUse};\n use syntax::ast::{Local, MethodImplItem, Mod, Name, NodeId};\n use syntax::ast::{Pat, PatEnum, PatIdent, PatLit};\n@@ -2840,7 +2840,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                 });\n             }\n \n-            ItemDefTrait(_, ref trait_ref) => {\n+            ItemDefaultImpl(_, ref trait_ref) => {\n                 self.resolve_trait_reference(item.id, trait_ref, TraitImplementation);\n             }\n             ItemImpl(_, _,\n@@ -3199,7 +3199,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             }\n             Some(def) => {\n                 match def {\n-                    (DefTrait(_), _) => {\n+                    (DefaultImpl(_), _) => {\n                         debug!(\"(resolving trait) found trait def: {:?}\", def);\n                         self.record_def(trait_reference.ref_id, def);\n                     }\n@@ -4675,7 +4675,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                         None => continue\n                     };\n                     let trait_def_id = match def {\n-                        DefTrait(trait_def_id) => trait_def_id,\n+                        DefaultImpl(trait_def_id) => trait_def_id,\n                         _ => continue,\n                     };\n                     if self.trait_item_map.contains_key(&(name, trait_def_id)) {\n@@ -4691,7 +4691,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                     Some(target) => target,\n                 };\n                 let did = match target.bindings.def_for_namespace(TypeNS) {\n-                    Some(DefTrait(trait_def_id)) => trait_def_id,\n+                    Some(DefaultImpl(trait_def_id)) => trait_def_id,\n                     Some(..) | None => continue,\n                 };\n                 if self.trait_item_map.contains_key(&(name, did)) {"}, {"sha": "439c83e0b376c6dcfdea630c24963f2ecad2c59d", "filename": "src/librustc_trans/save/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d38aab397e3295ead5869f84cd54044c1759c6d7/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d38aab397e3295ead5869f84cd54044c1759c6d7/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fmod.rs?ref=d38aab397e3295ead5869f84cd54044c1759c6d7", "patch": "@@ -239,7 +239,7 @@ impl <'l, 'tcx> DxrVisitor<'l, 'tcx> {\n             def::DefTy(..) |\n             def::DefAssociatedTy(..) |\n             def::DefAssociatedPath(..) |\n-            def::DefTrait(_) => Some(recorder::TypeRef),\n+            def::DefaultImpl(_) => Some(recorder::TypeRef),\n             def::DefStatic(_, _) |\n             def::DefConst(_) |\n             def::DefLocal(_) |"}, {"sha": "052c9b4da6b0cc94794fc57eeb864a073aedcc6c", "filename": "src/librustc_trans/trans/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d38aab397e3295ead5869f84cd54044c1759c6d7/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d38aab397e3295ead5869f84cd54044c1759c6d7/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs?ref=d38aab397e3295ead5869f84cd54044c1759c6d7", "patch": "@@ -207,7 +207,7 @@ fn trans<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, expr: &ast::Expr)\n             def::DefUpvar(..) => {\n                 datum_callee(bcx, ref_expr)\n             }\n-            def::DefMod(..) | def::DefForeignMod(..) | def::DefTrait(..) |\n+            def::DefMod(..) | def::DefForeignMod(..) | def::DefaultImpl(..) |\n             def::DefTy(..) | def::DefPrimTy(..) | def::DefAssociatedTy(..) |\n             def::DefUse(..) | def::DefTyParamBinder(..) |\n             def::DefRegion(..) | def::DefLabel(..) | def::DefTyParam(..) |"}, {"sha": "16e050ce01c057b7f8900e48bd7c32ac2a5d3be0", "filename": "src/librustc_trans/trans/meth.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d38aab397e3295ead5869f84cd54044c1759c6d7/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d38aab397e3295ead5869f84cd54044c1759c6d7/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs?ref=d38aab397e3295ead5869f84cd54044c1759c6d7", "patch": "@@ -390,7 +390,7 @@ fn trans_monomorphized_callee<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n             Callee { bcx: bcx, data: Fn(llfn) }\n         }\n         traits::VtableBuiltin(..) |\n-        traits::VtableDefaultTrait(..) |\n+        traits::VtableDefaultImpl(..) |\n         traits::VtableParam(..) => {\n             bcx.sess().bug(\n                 &format!(\"resolved vtable bad vtable {} in trans\",\n@@ -716,7 +716,7 @@ pub fn get_vtable<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n         let vtable = fulfill_obligation(ccx, DUMMY_SP, trait_ref.clone());\n         match vtable {\n             // Should default trait error here?\n-            traits::VtableDefaultTrait(_) |\n+            traits::VtableDefaultImpl(_) |\n             traits::VtableBuiltin(_) => {\n                 Vec::new().into_iter()\n             }"}, {"sha": "96c770218d9f2eb487186d841c6b042808e0f53d", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d38aab397e3295ead5869f84cd54044c1759c6d7/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d38aab397e3295ead5869f84cd54044c1759c6d7/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=d38aab397e3295ead5869f84cd54044c1759c6d7", "patch": "@@ -617,7 +617,7 @@ pub fn instantiate_trait_ref<'tcx>(\n     -> Rc<ty::TraitRef<'tcx>>\n {\n     match ::lookup_def_tcx(this.tcx(), ast_trait_ref.path.span, ast_trait_ref.ref_id) {\n-        def::DefTrait(trait_def_id) => {\n+        def::DefaultImpl(trait_def_id) => {\n             let trait_ref = ast_path_to_trait_ref(this,\n                                                   rscope,\n                                                   trait_def_id,\n@@ -931,7 +931,7 @@ fn ast_ty_to_trait_ref<'tcx>(this: &AstConv<'tcx>,\n     match ty.node {\n         ast::TyPath(ref path, id) => {\n             match this.tcx().def_map.borrow().get(&id) {\n-                Some(&def::DefTrait(trait_def_id)) => {\n+                Some(&def::DefaultImpl(trait_def_id)) => {\n                     let mut projection_bounds = Vec::new();\n                     let trait_ref = object_path_to_poly_trait_ref(this,\n                                                                   rscope,\n@@ -1211,7 +1211,7 @@ pub fn ast_ty_to_ty<'tcx>(this: &AstConv<'tcx>,\n                     Some(&d) => d\n                 };\n                 match a_def {\n-                    def::DefTrait(trait_def_id) => {\n+                    def::DefaultImpl(trait_def_id) => {\n                         // N.B. this case overlaps somewhat with\n                         // TyObjectSum, see that fn for details\n                         let mut projection_bounds = Vec::new();\n@@ -1821,7 +1821,7 @@ pub fn partition_bounds<'a>(tcx: &ty::ctxt,\n         match *ast_bound {\n             ast::TraitTyParamBound(ref b, ast::TraitBoundModifier::None) => {\n                 match ::lookup_def_tcx(tcx, b.trait_ref.path.span, b.trait_ref.ref_id) {\n-                    def::DefTrait(trait_did) => {\n+                    def::DefaultImpl(trait_did) => {\n                         match trait_def_ids.get(&trait_did) {\n                             // Already seen this trait. We forbid\n                             // duplicates in the list (for some"}, {"sha": "26ba0fe8ed148230054fa8eba805580dcf1baa15", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d38aab397e3295ead5869f84cd54044c1759c6d7/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d38aab397e3295ead5869f84cd54044c1759c6d7/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=d38aab397e3295ead5869f84cd54044c1759c6d7", "patch": "@@ -435,7 +435,7 @@ pub fn check_pat_struct<'a, 'tcx>(pcx: &pat_ctxt<'a, 'tcx>, pat: &'tcx ast::Pat,\n \n     let def = tcx.def_map.borrow()[pat.id].clone();\n     let (enum_def_id, variant_def_id) = match def {\n-        def::DefTrait(_) => {\n+        def::DefaultImpl(_) => {\n             let name = pprust::path_to_string(path);\n             span_err!(tcx.sess, pat.span, E0168,\n                 \"use of trait `{}` in a struct pattern\", name);"}, {"sha": "20c2fd098402ba9f56b516e14546ecf432c97d72", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d38aab397e3295ead5869f84cd54044c1759c6d7/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d38aab397e3295ead5869f84cd54044c1759c6d7/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=d38aab397e3295ead5869f84cd54044c1759c6d7", "patch": "@@ -330,7 +330,7 @@ pub fn all_traits<'a>(ccx: &'a CrateCtxt) -> AllTraits<'a> {\n                                cstore: &cstore::CStore,\n                                dl: decoder::DefLike) {\n             match dl {\n-                decoder::DlDef(def::DefTrait(did)) => {\n+                decoder::DlDef(def::DefaultImpl(did)) => {\n                     traits.push(TraitInfo::new(did));\n                 }\n                 decoder::DlDef(def::DefMod(did)) => {"}, {"sha": "aa3af257fd6275b6e04ebc724a0c91207719a085", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d38aab397e3295ead5869f84cd54044c1759c6d7/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d38aab397e3295ead5869f84cd54044c1759c6d7/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=d38aab397e3295ead5869f84cd54044c1759c6d7", "patch": "@@ -3858,7 +3858,7 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n                                           variant_id, &fields[..]);\n                 enum_id\n             }\n-            Some(def::DefTrait(def_id)) => {\n+            Some(def::DefaultImpl(def_id)) => {\n                 span_err!(tcx.sess, path.span, E0159,\n                     \"use of trait `{}` as a struct constructor\",\n                     pprust::path_to_string(path));\n@@ -4630,7 +4630,7 @@ fn type_scheme_and_predicates_for_def<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n         def::DefStruct(id) | def::DefConst(id) => {\n             (ty::lookup_item_type(fcx.tcx(), id), ty::lookup_predicates(fcx.tcx(), id))\n         }\n-        def::DefTrait(_) |\n+        def::DefaultImpl(_) |\n         def::DefTy(..) |\n         def::DefAssociatedTy(..) |\n         def::DefAssociatedPath(..) |\n@@ -4734,7 +4734,7 @@ pub fn instantiate_path<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n         def::DefTy(..) |\n         def::DefAssociatedTy(..) |\n         def::DefAssociatedPath(..) |\n-        def::DefTrait(..) |\n+        def::DefaultImpl(..) |\n         def::DefPrimTy(..) |\n         def::DefTyParam(..) => {\n             // Everything but the final segment should have no"}, {"sha": "08aa54b6f5f4b4f2f43625b37df1d74dcc59357e", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d38aab397e3295ead5869f84cd54044c1759c6d7/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d38aab397e3295ead5869f84cd54044c1759c6d7/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=d38aab397e3295ead5869f84cd54044c1759c6d7", "patch": "@@ -96,7 +96,7 @@ impl<'cx, 'tcx,'v> visit::Visitor<'v> for OrphanChecker<'cx, 'tcx> {\n                     }\n                 }\n             }\n-            ast::ItemDefTrait(_, ref ast_trait_ref) => {\n+            ast::ItemDefaultImpl(_, ref ast_trait_ref) => {\n                 // \"Trait\" impl\n                 debug!(\"coherence2::orphan check: default trait impl {}\", item.repr(self.tcx));\n                 let trait_ref = ty::node_id_to_trait_ref(self.tcx, ast_trait_ref.ref_id);"}, {"sha": "6988ad59aa4c70754afb904a65aa0971b82de98d", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d38aab397e3295ead5869f84cd54044c1759c6d7/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d38aab397e3295ead5869f84cd54044c1759c6d7/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=d38aab397e3295ead5869f84cd54044c1759c6d7", "patch": "@@ -648,7 +648,7 @@ fn convert_item(ccx: &CollectCtxt, it: &ast::Item) {\n                                    predicates,\n                                    &enum_definition.variants);\n         },\n-        ast::ItemDefTrait(_, ref ast_trait_ref) => {\n+        ast::ItemDefaultImpl(_, ref ast_trait_ref) => {\n             let trait_ref = astconv::instantiate_trait_ref(ccx, &ExplicitRscope,\n                                                            ast_trait_ref, None, None);\n \n@@ -1147,7 +1147,7 @@ fn compute_type_scheme_of_item<'a,'tcx>(ccx: &CollectCtxt<'a,'tcx>,\n             let t = ty::mk_struct(tcx, local_def(it.id), tcx.mk_substs(substs));\n             ty::TypeScheme { ty: t, generics: ty_generics }\n         }\n-        ast::ItemDefTrait(..) |\n+        ast::ItemDefaultImpl(..) |\n         ast::ItemTrait(..) |\n         ast::ItemImpl(..) |\n         ast::ItemMod(..) |"}, {"sha": "ed5a879edb360a853a500989078553fa0b798a14", "filename": "src/librustc_typeck/variance.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d38aab397e3295ead5869f84cd54044c1759c6d7/src%2Flibrustc_typeck%2Fvariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d38aab397e3295ead5869f84cd54044c1759c6d7/src%2Flibrustc_typeck%2Fvariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance.rs?ref=d38aab397e3295ead5869f84cd54044c1759c6d7", "patch": "@@ -476,7 +476,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for TermsContext<'a, 'tcx> {\n \n             ast::ItemExternCrate(_) |\n             ast::ItemUse(_) |\n-            ast::ItemDefTrait(..) |\n+            ast::ItemDefaultImpl(..) |\n             ast::ItemImpl(..) |\n             ast::ItemStatic(..) |\n             ast::ItemConst(..) |\n@@ -627,7 +627,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for ConstraintContext<'a, 'tcx> {\n             ast::ItemForeignMod(..) |\n             ast::ItemTy(..) |\n             ast::ItemImpl(..) |\n-            ast::ItemDefTrait(..) |\n+            ast::ItemDefaultImpl(..) |\n             ast::ItemMac(..) => {\n             }\n         }"}, {"sha": "4cd6f6551d0885cd8e2448112a44b0e5c56ea55a", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d38aab397e3295ead5869f84cd54044c1759c6d7/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d38aab397e3295ead5869f84cd54044c1759c6d7/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=d38aab397e3295ead5869f84cd54044c1759c6d7", "patch": "@@ -69,7 +69,7 @@ fn try_inline_def(cx: &DocContext, tcx: &ty::ctxt,\n     let mut ret = Vec::new();\n     let did = def.def_id();\n     let inner = match def {\n-        def::DefTrait(did) => {\n+        def::DefaultImpl(did) => {\n             record_extern_fqn(cx, did, clean::TypeTrait);\n             clean::TraitItem(build_external_trait(cx, tcx, did))\n         }"}, {"sha": "929a5f19ad96f89156594a78d56777be76b7f210", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d38aab397e3295ead5869f84cd54044c1759c6d7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d38aab397e3295ead5869f84cd54044c1759c6d7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=d38aab397e3295ead5869f84cd54044c1759c6d7", "patch": "@@ -2431,7 +2431,7 @@ fn register_def(cx: &DocContext, def: def::Def) -> ast::DefId {\n         def::DefFn(i, _) => (i, TypeFunction),\n         def::DefTy(i, false) => (i, TypeTypedef),\n         def::DefTy(i, true) => (i, TypeEnum),\n-        def::DefTrait(i) => (i, TypeTrait),\n+        def::DefaultImpl(i) => (i, TypeTrait),\n         def::DefStruct(i) => (i, TypeStruct),\n         def::DefMod(i) => (i, TypeModule),\n         def::DefStatic(i, _) => (i, TypeStatic),"}, {"sha": "8143926982f0168988bc92d27e08101cf1a46582", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d38aab397e3295ead5869f84cd54044c1759c6d7/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d38aab397e3295ead5869f84cd54044c1759c6d7/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=d38aab397e3295ead5869f84cd54044c1759c6d7", "patch": "@@ -39,7 +39,7 @@ pub struct Module {\n     pub vis: ast::Visibility,\n     pub stab: Option<attr::Stability>,\n     pub impls: Vec<Impl>,\n-    pub def_traits: Vec<DefaultTrait>,\n+    pub def_traits: Vec<DefaultImpl>,\n     pub foreigns: Vec<ast::ForeignMod>,\n     pub macros: Vec<Macro>,\n     pub is_crate: bool,\n@@ -198,7 +198,7 @@ pub struct Impl {\n     pub id: ast::NodeId,\n }\n \n-pub struct DefaultTrait {\n+pub struct DefaultImpl {\n     pub unsafety: ast::Unsafety,\n     pub trait_: ast::TraitRef,\n     pub id: ast::NodeId,"}, {"sha": "c64aff31e30ed82d55a20a22b95c70ce3d645de0", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d38aab397e3295ead5869f84cd54044c1759c6d7/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d38aab397e3295ead5869f84cd54044c1759c6d7/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=d38aab397e3295ead5869f84cd54044c1759c6d7", "patch": "@@ -358,8 +358,8 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                 };\n                 om.impls.push(i);\n             },\n-            ast::ItemDefTrait(unsafety, ref trait_ref) => {\n-                let i = DefaultTrait {\n+            ast::ItemDefaultImpl(unsafety, ref trait_ref) => {\n+                let i = DefaultImpl {\n                     unsafety: unsafety,\n                     trait_: trait_ref.clone(),\n                     id: item.id"}, {"sha": "effaac52716340e2c0f77f4821b0de6d0f01a5e9", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d38aab397e3295ead5869f84cd54044c1759c6d7/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d38aab397e3295ead5869f84cd54044c1759c6d7/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=d38aab397e3295ead5869f84cd54044c1759c6d7", "patch": "@@ -1644,7 +1644,7 @@ pub enum Item_ {\n \n     // Default trait implementations\n     // `impl Trait for ..`\n-    ItemDefTrait(Unsafety, TraitRef),\n+    ItemDefaultImpl(Unsafety, TraitRef),\n     ItemImpl(Unsafety,\n              ImplPolarity,\n              Generics,\n@@ -1671,7 +1671,7 @@ impl Item_ {\n             ItemTrait(..) => \"trait\",\n             ItemMac(..) |\n             ItemImpl(..) |\n-            ItemDefTrait(..) => \"item\"\n+            ItemDefaultImpl(..) => \"item\"\n         }\n     }\n }"}, {"sha": "c33158193ce215a6c835df3798bed0694c5ce294", "filename": "src/libsyntax/ast_map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d38aab397e3295ead5869f84cd54044c1759c6d7/src%2Flibsyntax%2Fast_map%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d38aab397e3295ead5869f84cd54044c1759c6d7/src%2Flibsyntax%2Fast_map%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map%2Fmod.rs?ref=d38aab397e3295ead5869f84cd54044c1759c6d7", "patch": "@@ -1044,7 +1044,7 @@ fn node_id_to_string(map: &Map, id: NodeId, include_id: bool) -> String {\n                 ItemStruct(..) => \"struct\",\n                 ItemTrait(..) => \"trait\",\n                 ItemImpl(..) => \"impl\",\n-                ItemDefTrait(..) => \"default impl\",\n+                ItemDefaultImpl(..) => \"default impl\",\n                 ItemMac(..) => \"macro\"\n             };\n             format!(\"{} {}{}\", item_str, path_str, id_str)"}, {"sha": "dae830583c44b43ce2c9e0b2e9832d95a1942bd9", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d38aab397e3295ead5869f84cd54044c1759c6d7/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d38aab397e3295ead5869f84cd54044c1759c6d7/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=d38aab397e3295ead5869f84cd54044c1759c6d7", "patch": "@@ -999,8 +999,8 @@ pub fn noop_fold_item_underscore<T: Folder>(i: Item_, folder: &mut T) -> Item_ {\n             let struct_def = folder.fold_struct_def(struct_def);\n             ItemStruct(struct_def, folder.fold_generics(generics))\n         }\n-        ItemDefTrait(unsafety, ref trait_ref) => {\n-            ItemDefTrait(unsafety, folder.fold_trait_ref((*trait_ref).clone()))\n+        ItemDefaultImpl(unsafety, ref trait_ref) => {\n+            ItemDefaultImpl(unsafety, folder.fold_trait_ref((*trait_ref).clone()))\n         }\n         ItemImpl(unsafety, polarity, generics, ifce, ty, impl_items) => {\n             let new_impl_items = impl_items.into_iter().flat_map(|item| {"}, {"sha": "0a5afcb33017006189f870cfc25bb6e2bea898e7", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d38aab397e3295ead5869f84cd54044c1759c6d7/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d38aab397e3295ead5869f84cd54044c1759c6d7/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=d38aab397e3295ead5869f84cd54044c1759c6d7", "patch": "@@ -31,7 +31,7 @@ use ast::{ExprVec, ExprWhile, ExprWhileLet, ExprForLoop, Field, FnDecl};\n use ast::{ForeignItem, ForeignItemStatic, ForeignItemFn, ForeignMod, FunctionRetTy};\n use ast::{Ident, Inherited, ImplItem, Item, Item_, ItemStatic};\n use ast::{ItemEnum, ItemFn, ItemForeignMod, ItemImpl, ItemConst};\n-use ast::{ItemMac, ItemMod, ItemStruct, ItemTrait, ItemTy, ItemDefTrait};\n+use ast::{ItemMac, ItemMod, ItemStruct, ItemTrait, ItemTy, ItemDefaultImpl};\n use ast::{ItemExternCrate, ItemUse};\n use ast::{LifetimeDef, Lit, Lit_};\n use ast::{LitBool, LitChar, LitByte, LitBinary};\n@@ -4843,7 +4843,7 @@ impl<'a> Parser<'a> {\n             self.expect(&token::OpenDelim(token::Brace));\n             self.expect(&token::CloseDelim(token::Brace));\n             (ast_util::impl_pretty_name(&opt_trait, None),\n-             ItemDefTrait(unsafety, opt_trait.unwrap()), None)\n+             ItemDefaultImpl(unsafety, opt_trait.unwrap()), None)\n         } else {\n             if opt_trait.is_some() {\n                 ty = self.parse_ty_sum();"}, {"sha": "1a3e1816e9f70abc1f5e4640d86128b52cc79b21", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d38aab397e3295ead5869f84cd54044c1759c6d7/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d38aab397e3295ead5869f84cd54044c1759c6d7/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=d38aab397e3295ead5869f84cd54044c1759c6d7", "patch": "@@ -926,7 +926,7 @@ impl<'a> State<'a> {\n                 try!(self.print_struct(&**struct_def, generics, item.ident, item.span));\n             }\n \n-            ast::ItemDefTrait(unsafety, ref trait_ref) => {\n+            ast::ItemDefaultImpl(unsafety, ref trait_ref) => {\n                 try!(self.head(\"\"));\n                 try!(self.print_visibility(item.vis));\n                 try!(self.print_unsafety(unsafety));"}, {"sha": "412bf0fa22a00a37dd77567636fd9eeb40a4914e", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d38aab397e3295ead5869f84cd54044c1759c6d7/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d38aab397e3295ead5869f84cd54044c1759c6d7/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=d38aab397e3295ead5869f84cd54044c1759c6d7", "patch": "@@ -282,7 +282,7 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) {\n             visitor.visit_generics(type_parameters);\n             walk_enum_def(visitor, enum_definition, type_parameters)\n         }\n-        ItemDefTrait(_, ref trait_ref) => {\n+        ItemDefaultImpl(_, ref trait_ref) => {\n             visitor.visit_trait_ref(trait_ref)\n         }\n         ItemImpl(_, _,"}]}