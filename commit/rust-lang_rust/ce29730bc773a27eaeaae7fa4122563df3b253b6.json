{"sha": "ce29730bc773a27eaeaae7fa4122563df3b253b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlMjk3MzBiYzc3M2EyN2VhZWFhZTdmYTQxMjI1NjNkZjNiMjUzYjY=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-01-22T15:31:40Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-01-22T15:33:58Z"}, "message": "Obtain `ModuleId`'s `DefMap` through a method", "tree": {"sha": "57818d6bc1e176a421f63c01a6561fb5e6a291b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57818d6bc1e176a421f63c01a6561fb5e6a291b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce29730bc773a27eaeaae7fa4122563df3b253b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce29730bc773a27eaeaae7fa4122563df3b253b6", "html_url": "https://github.com/rust-lang/rust/commit/ce29730bc773a27eaeaae7fa4122563df3b253b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce29730bc773a27eaeaae7fa4122563df3b253b6/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5322e3d5b813e4bce7a73762c14bebbd9a36e01", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5322e3d5b813e4bce7a73762c14bebbd9a36e01", "html_url": "https://github.com/rust-lang/rust/commit/a5322e3d5b813e4bce7a73762c14bebbd9a36e01"}], "stats": {"total": 75, "additions": 43, "deletions": 32}, "files": [{"sha": "c34a99d90bdff7ee834b10e756b48e249e762dde", "filename": "crates/hir/src/code_model.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ce29730bc773a27eaeaae7fa4122563df3b253b6/crates%2Fhir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce29730bc773a27eaeaae7fa4122563df3b253b6/crates%2Fhir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fcode_model.rs?ref=ce29730bc773a27eaeaae7fa4122563df3b253b6", "patch": "@@ -281,7 +281,7 @@ impl Module {\n \n     /// Name of this module.\n     pub fn name(self, db: &dyn HirDatabase) -> Option<Name> {\n-        let def_map = db.crate_def_map(self.id.krate);\n+        let def_map = self.id.def_map(db.upcast());\n         let parent = def_map[self.id.local_id].parent?;\n         def_map[parent].children.iter().find_map(|(name, module_id)| {\n             if *module_id == self.id.local_id {\n@@ -307,7 +307,7 @@ impl Module {\n \n     /// Iterates over all child modules.\n     pub fn children(self, db: &dyn HirDatabase) -> impl Iterator<Item = Module> {\n-        let def_map = db.crate_def_map(self.id.krate);\n+        let def_map = self.id.def_map(db.upcast());\n         let children = def_map[self.id.local_id]\n             .children\n             .iter()\n@@ -318,7 +318,7 @@ impl Module {\n \n     /// Finds a parent module.\n     pub fn parent(self, db: &dyn HirDatabase) -> Option<Module> {\n-        let def_map = db.crate_def_map(self.id.krate);\n+        let def_map = self.id.def_map(db.upcast());\n         let parent_id = def_map[self.id.local_id].parent?;\n         Some(self.with_module_id(parent_id))\n     }\n@@ -339,7 +339,7 @@ impl Module {\n         db: &dyn HirDatabase,\n         visible_from: Option<Module>,\n     ) -> Vec<(Name, ScopeDef)> {\n-        db.crate_def_map(self.id.krate)[self.id.local_id]\n+        self.id.def_map(db.upcast())[self.id.local_id]\n             .scope\n             .entries()\n             .filter_map(|(name, def)| {\n@@ -362,14 +362,14 @@ impl Module {\n     }\n \n     pub fn visibility_of(self, db: &dyn HirDatabase, def: &ModuleDef) -> Option<Visibility> {\n-        db.crate_def_map(self.id.krate)[self.id.local_id].scope.visibility_of(def.clone().into())\n+        self.id.def_map(db.upcast())[self.id.local_id].scope.visibility_of(def.clone().into())\n     }\n \n     pub fn diagnostics(self, db: &dyn HirDatabase, sink: &mut DiagnosticSink) {\n         let _p = profile::span(\"Module::diagnostics\").detail(|| {\n             format!(\"{:?}\", self.name(db).map_or(\"<unknown>\".into(), |name| name.to_string()))\n         });\n-        let crate_def_map = db.crate_def_map(self.id.krate);\n+        let crate_def_map = self.id.def_map(db.upcast());\n         crate_def_map.add_diagnostics(db.upcast(), self.id.local_id, sink);\n         for decl in self.declarations(db) {\n             match decl {\n@@ -396,12 +396,12 @@ impl Module {\n     }\n \n     pub fn declarations(self, db: &dyn HirDatabase) -> Vec<ModuleDef> {\n-        let def_map = db.crate_def_map(self.id.krate);\n+        let def_map = self.id.def_map(db.upcast());\n         def_map[self.id.local_id].scope.declarations().map(ModuleDef::from).collect()\n     }\n \n     pub fn impl_defs(self, db: &dyn HirDatabase) -> Vec<Impl> {\n-        let def_map = db.crate_def_map(self.id.krate);\n+        let def_map = self.id.def_map(db.upcast());\n         def_map[self.id.local_id].scope.impls().map(Impl::from).collect()\n     }\n "}, {"sha": "2620026713c80ed3e234055fe20bfa0039c358f2", "filename": "crates/hir/src/has_source.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ce29730bc773a27eaeaae7fa4122563df3b253b6/crates%2Fhir%2Fsrc%2Fhas_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce29730bc773a27eaeaae7fa4122563df3b253b6/crates%2Fhir%2Fsrc%2Fhas_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fhas_source.rs?ref=ce29730bc773a27eaeaae7fa4122563df3b253b6", "patch": "@@ -24,12 +24,12 @@ pub trait HasSource {\n impl Module {\n     /// Returns a node which defines this module. That is, a file or a `mod foo {}` with items.\n     pub fn definition_source(self, db: &dyn HirDatabase) -> InFile<ModuleSource> {\n-        let def_map = db.crate_def_map(self.id.krate);\n+        let def_map = self.id.def_map(db.upcast());\n         def_map[self.id.local_id].definition_source(db.upcast())\n     }\n \n     pub fn is_mod_rs(self, db: &dyn HirDatabase) -> bool {\n-        let def_map = db.crate_def_map(self.id.krate);\n+        let def_map = self.id.def_map(db.upcast());\n         match def_map[self.id.local_id].origin {\n             ModuleOrigin::File { is_mod_rs, .. } => is_mod_rs,\n             _ => false,\n@@ -39,7 +39,7 @@ impl Module {\n     /// Returns a node which declares this module, either a `mod foo;` or a `mod foo {}`.\n     /// `None` for the crate root.\n     pub fn declaration_source(self, db: &dyn HirDatabase) -> Option<InFile<ast::Module>> {\n-        let def_map = db.crate_def_map(self.id.krate);\n+        let def_map = self.id.def_map(db.upcast());\n         def_map[self.id.local_id].declaration_source(db.upcast())\n     }\n }"}, {"sha": "775f7ec8b7687f36fd6fd1066bf6b9f883237abe", "filename": "crates/hir/src/semantics/source_to_def.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ce29730bc773a27eaeaae7fa4122563df3b253b6/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce29730bc773a27eaeaae7fa4122563df3b253b6/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs?ref=ce29730bc773a27eaeaae7fa4122563df3b253b6", "patch": "@@ -31,6 +31,7 @@ impl SourceToDefCtx<'_, '_> {\n     pub(super) fn file_to_def(&mut self, file: FileId) -> Option<ModuleId> {\n         let _p = profile::span(\"SourceBinder::to_module_def\");\n         let (krate, local_id) = self.db.relevant_crates(file).iter().find_map(|&crate_id| {\n+            // FIXME: inner items\n             let crate_def_map = self.db.crate_def_map(crate_id);\n             let local_id = crate_def_map.modules_for_file(file).next()?;\n             Some((crate_id, local_id))\n@@ -60,7 +61,7 @@ impl SourceToDefCtx<'_, '_> {\n         }?;\n \n         let child_name = src.value.name()?.as_name();\n-        let def_map = self.db.crate_def_map(parent_module.krate);\n+        let def_map = parent_module.def_map(self.db.upcast());\n         let child_id = *def_map[parent_module.local_id].children.get(&child_name)?;\n         Some(ModuleId { krate: parent_module.krate, local_id: child_id })\n     }"}, {"sha": "6513daec87dc9a03cef322ba1373a1126e87deb9", "filename": "crates/hir_def/src/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce29730bc773a27eaeaae7fa4122563df3b253b6/crates%2Fhir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce29730bc773a27eaeaae7fa4122563df3b253b6/crates%2Fhir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fattr.rs?ref=ce29730bc773a27eaeaae7fa4122563df3b253b6", "patch": "@@ -196,7 +196,7 @@ impl Attrs {\n     pub(crate) fn attrs_query(db: &dyn DefDatabase, def: AttrDefId) -> Attrs {\n         let raw_attrs = match def {\n             AttrDefId::ModuleId(module) => {\n-                let def_map = db.crate_def_map(module.krate);\n+                let def_map = module.def_map(db);\n                 let mod_data = &def_map[module.local_id];\n                 match mod_data.declaration_source(db) {\n                     Some(it) => {"}, {"sha": "d0c84ab0b5907771018aca94e9725ff853fbea14", "filename": "crates/hir_def/src/body.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce29730bc773a27eaeaae7fa4122563df3b253b6/crates%2Fhir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce29730bc773a27eaeaae7fa4122563df3b253b6/crates%2Fhir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody.rs?ref=ce29730bc773a27eaeaae7fa4122563df3b253b6", "patch": "@@ -86,7 +86,7 @@ impl Expander {\n         module: ModuleId,\n     ) -> Expander {\n         let cfg_expander = CfgExpander::new(db, current_file_id, module.krate);\n-        let crate_def_map = db.crate_def_map(module.krate);\n+        let crate_def_map = module.def_map(db);\n         let ast_id_map = db.ast_id_map(current_file_id);\n         Expander {\n             cfg_expander,"}, {"sha": "65d85c86a782cb27ecfe6b5a63b9ab80217952ee", "filename": "crates/hir_def/src/child_by_source.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce29730bc773a27eaeaae7fa4122563df3b253b6/crates%2Fhir_def%2Fsrc%2Fchild_by_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce29730bc773a27eaeaae7fa4122563df3b253b6/crates%2Fhir_def%2Fsrc%2Fchild_by_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fchild_by_source.rs?ref=ce29730bc773a27eaeaae7fa4122563df3b253b6", "patch": "@@ -74,7 +74,7 @@ impl ChildBySource for ImplId {\n \n impl ChildBySource for ModuleId {\n     fn child_by_source(&self, db: &dyn DefDatabase) -> DynMap {\n-        let crate_def_map = db.crate_def_map(self.krate);\n+        let crate_def_map = self.def_map(db);\n         let module_data = &crate_def_map[self.local_id];\n         module_data.scope.child_by_source(db)\n     }"}, {"sha": "c01b6daf2c03a0b5b0c58b65f01bb16f19d7b2fc", "filename": "crates/hir_def/src/find_path.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ce29730bc773a27eaeaae7fa4122563df3b253b6/crates%2Fhir_def%2Fsrc%2Ffind_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce29730bc773a27eaeaae7fa4122563df3b253b6/crates%2Fhir_def%2Fsrc%2Ffind_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Ffind_path.rs?ref=ce29730bc773a27eaeaae7fa4122563df3b253b6", "patch": "@@ -110,7 +110,7 @@ fn find_path_inner(\n     // Base cases:\n \n     // - if the item is already in scope, return the name under which it is\n-    let def_map = db.crate_def_map(from.krate);\n+    let def_map = from.def_map(db);\n     let from_scope: &crate::item_scope::ItemScope = &def_map[from.local_id].scope;\n     let scope_name =\n         if let Some((name, _)) = from_scope.name_of(item) { Some(name.clone()) } else { None };\n@@ -145,7 +145,7 @@ fn find_path_inner(\n \n     // - if the item is in the prelude, return the name from there\n     if let Some(prelude_module) = def_map.prelude() {\n-        let prelude_def_map = db.crate_def_map(prelude_module.krate);\n+        let prelude_def_map = prelude_module.def_map(db);\n         let prelude_scope: &crate::item_scope::ItemScope =\n             &prelude_def_map[prelude_module.local_id].scope;\n         if let Some((name, vis)) = prelude_scope.name_of(item) {\n@@ -283,7 +283,7 @@ fn find_local_import_locations(\n     // above `from` with any visibility. That means we do not need to descend into private siblings\n     // of `from` (and similar).\n \n-    let def_map = db.crate_def_map(from.krate);\n+    let def_map = from.def_map(db);\n \n     // Compute the initial worklist. We start with all direct child modules of `from` as well as all\n     // of its (recursive) parent modules.\n@@ -312,7 +312,7 @@ fn find_local_import_locations(\n             &def_map[module.local_id]\n         } else {\n             // The crate might reexport a module defined in another crate.\n-            ext_def_map = db.crate_def_map(module.krate);\n+            ext_def_map = module.def_map(db);\n             &ext_def_map[module.local_id]\n         };\n \n@@ -375,7 +375,7 @@ mod tests {\n             parsed_path_file.syntax_node().descendants().find_map(syntax::ast::Path::cast).unwrap();\n         let mod_path = ModPath::from_src(ast_path, &Hygiene::new_unhygienic()).unwrap();\n \n-        let crate_def_map = db.crate_def_map(module.krate);\n+        let crate_def_map = module.def_map(&db);\n         let resolved = crate_def_map\n             .resolve_path(\n                 &db,"}, {"sha": "0b783044564b678a97a48eb8fcdaaef23bfd1f33", "filename": "crates/hir_def/src/import_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce29730bc773a27eaeaae7fa4122563df3b253b6/crates%2Fhir_def%2Fsrc%2Fimport_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce29730bc773a27eaeaae7fa4122563df3b253b6/crates%2Fhir_def%2Fsrc%2Fimport_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fimport_map.rs?ref=ce29730bc773a27eaeaae7fa4122563df3b253b6", "patch": "@@ -83,7 +83,7 @@ impl ImportMap {\n                 &def_map[module.local_id]\n             } else {\n                 // The crate might reexport a module defined in another crate.\n-                ext_def_map = db.crate_def_map(module.krate);\n+                ext_def_map = module.def_map(db);\n                 &ext_def_map[module.local_id]\n             };\n "}, {"sha": "2f9261a7fe6b22648a658446ec8ae1a01bb60c03", "filename": "crates/hir_def/src/lib.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ce29730bc773a27eaeaae7fa4122563df3b253b6/crates%2Fhir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce29730bc773a27eaeaae7fa4122563df3b253b6/crates%2Fhir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Flib.rs?ref=ce29730bc773a27eaeaae7fa4122563df3b253b6", "patch": "@@ -50,14 +50,18 @@ pub mod import_map;\n #[cfg(test)]\n mod test_db;\n \n-use std::hash::{Hash, Hasher};\n+use std::{\n+    hash::{Hash, Hasher},\n+    sync::Arc,\n+};\n \n use base_db::{impl_intern_key, salsa, CrateId};\n use hir_expand::{\n     ast_id_map::FileAstId, eager::expand_eager_macro, hygiene::Hygiene, AstId, HirFileId, InFile,\n     MacroCallId, MacroCallKind, MacroDefId, MacroDefKind,\n };\n use la_arena::Idx;\n+use nameres::DefMap;\n use syntax::ast;\n \n use crate::builtin_type::BuiltinType;\n@@ -73,6 +77,12 @@ pub struct ModuleId {\n     pub local_id: LocalModuleId,\n }\n \n+impl ModuleId {\n+    pub fn def_map(&self, db: &dyn db::DefDatabase) -> Arc<DefMap> {\n+        db.crate_def_map(self.krate)\n+    }\n+}\n+\n /// An ID of a module, **local** to a specific crate\n pub type LocalModuleId = Idx<nameres::ModuleData>;\n "}, {"sha": "adfcf879a44866fd351f8b6e6764b89f6a9fea39", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce29730bc773a27eaeaae7fa4122563df3b253b6/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce29730bc773a27eaeaae7fa4122563df3b253b6/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=ce29730bc773a27eaeaae7fa4122563df3b253b6", "patch": "@@ -578,7 +578,7 @@ impl DefCollector<'_> {\n                     } else if m.krate != self.def_map.krate {\n                         mark::hit!(glob_across_crates);\n                         // glob import from other crate => we can just import everything once\n-                        let item_map = self.db.crate_def_map(m.krate);\n+                        let item_map = m.def_map(self.db);\n                         let scope = &item_map[m.local_id].scope;\n \n                         // Module scoped macros is included"}, {"sha": "82528b792062ea5c04e8123660ea6ea12356660f", "filename": "crates/hir_def/src/nameres/path_resolution.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce29730bc773a27eaeaae7fa4122563df3b253b6/crates%2Fhir_def%2Fsrc%2Fnameres%2Fpath_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce29730bc773a27eaeaae7fa4122563df3b253b6/crates%2Fhir_def%2Fsrc%2Fnameres%2Fpath_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fpath_resolution.rs?ref=ce29730bc773a27eaeaae7fa4122563df3b253b6", "patch": "@@ -243,7 +243,7 @@ impl DefMap {\n                             kind: PathKind::Super(0),\n                         };\n                         log::debug!(\"resolving {:?} in other crate\", path);\n-                        let defp_map = db.crate_def_map(module.krate);\n+                        let defp_map = module.def_map(db);\n                         let (def, s) = defp_map.resolve_path(db, module.local_id, &path, shadow);\n                         return ResolvePathResult::with(\n                             def,\n@@ -356,7 +356,7 @@ impl DefMap {\n                 self\n             } else {\n                 // Extend lifetime\n-                keep = db.crate_def_map(prelude.krate);\n+                keep = prelude.def_map(db);\n                 &keep\n             };\n             def_map[prelude.local_id].scope.get(name)"}, {"sha": "130c074f0887e1eaf5a3cb1e75bf9794be01ef13", "filename": "crates/hir_def/src/resolver.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ce29730bc773a27eaeaae7fa4122563df3b253b6/crates%2Fhir_def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce29730bc773a27eaeaae7fa4122563df3b253b6/crates%2Fhir_def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fresolver.rs?ref=ce29730bc773a27eaeaae7fa4122563df3b253b6", "patch": "@@ -430,7 +430,7 @@ impl Resolver {\n         for scope in &self.scopes {\n             if let Scope::ModuleScope(m) = scope {\n                 if let Some(prelude) = m.crate_def_map.prelude() {\n-                    let prelude_def_map = db.crate_def_map(prelude.krate);\n+                    let prelude_def_map = prelude.def_map(db);\n                     traits.extend(prelude_def_map[prelude.local_id].scope.traits());\n                 }\n                 traits.extend(m.crate_def_map[m.module_id].scope.traits());\n@@ -529,7 +529,7 @@ impl Scope {\n                     f(name.clone(), ScopeDef::PerNs(def));\n                 });\n                 if let Some(prelude) = m.crate_def_map.prelude() {\n-                    let prelude_def_map = db.crate_def_map(prelude.krate);\n+                    let prelude_def_map = prelude.def_map(db);\n                     prelude_def_map[prelude.local_id].scope.entries().for_each(|(name, def)| {\n                         let seen_tuple = (name.clone(), def);\n                         if !seen.contains(&seen_tuple) {\n@@ -633,7 +633,7 @@ pub trait HasResolver: Copy {\n \n impl HasResolver for ModuleId {\n     fn resolver(self, db: &dyn DefDatabase) -> Resolver {\n-        let def_map = db.crate_def_map(self.krate);\n+        let def_map = self.def_map(db);\n         Resolver::default().push_module_scope(def_map, self.local_id)\n     }\n }"}, {"sha": "e79a911023813b6efd952fcc04662211ee0a9624", "filename": "crates/hir_def/src/visibility.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce29730bc773a27eaeaae7fa4122563df3b253b6/crates%2Fhir_def%2Fsrc%2Fvisibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce29730bc773a27eaeaae7fa4122563df3b253b6/crates%2Fhir_def%2Fsrc%2Fvisibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fvisibility.rs?ref=ce29730bc773a27eaeaae7fa4122563df3b253b6", "patch": "@@ -103,7 +103,7 @@ impl Visibility {\n         if from_module.krate != to_module.krate {\n             return false;\n         }\n-        let def_map = db.crate_def_map(from_module.krate);\n+        let def_map = from_module.def_map(db);\n         self.is_visible_from_def_map(&def_map, from_module.local_id)\n     }\n "}, {"sha": "25ee664d6f4cacb91f54de0ed942bb63da9bd47b", "filename": "crates/hir_ty/src/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ce29730bc773a27eaeaae7fa4122563df3b253b6/crates%2Fhir_ty%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce29730bc773a27eaeaae7fa4122563df3b253b6/crates%2Fhir_ty%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests.rs?ref=ce29730bc773a27eaeaae7fa4122563df3b253b6", "patch": "@@ -188,10 +188,10 @@ fn infer_with_mismatches(content: &str, include_mismatches: bool) -> String {\n     };\n \n     let module = db.module_for_file(file_id);\n-    let crate_def_map = db.crate_def_map(module.krate);\n+    let def_map = module.def_map(&db);\n \n     let mut defs: Vec<DefWithBodyId> = Vec::new();\n-    visit_module(&db, &crate_def_map, module.local_id, &mut |it| defs.push(it));\n+    visit_module(&db, &def_map, module.local_id, &mut |it| defs.push(it));\n     defs.sort_by_key(|def| match def {\n         DefWithBodyId::FunctionId(it) => {\n             let loc = it.lookup(&db);\n@@ -321,7 +321,7 @@ fn typing_whitespace_inside_a_function_should_not_invalidate_types() {\n     {\n         let events = db.log_executed(|| {\n             let module = db.module_for_file(pos.file_id);\n-            let crate_def_map = db.crate_def_map(module.krate);\n+            let crate_def_map = module.def_map(&db);\n             visit_module(&db, &crate_def_map, module.local_id, &mut |def| {\n                 db.infer(def);\n             });"}]}