{"sha": "91a0e18866d143c045e9e29377a6e918011c0b63", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxYTBlMTg4NjZkMTQzYzA0NWU5ZTI5Mzc3YTZlOTE4MDExYzBiNjM=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2014-12-03T22:48:18Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2014-12-30T16:26:13Z"}, "message": "debuginfo: Add a rust-gdb shell script that will start GDB with Rust pretty printers enabled.", "tree": {"sha": "c1aa9260172c0c9dabb61a525faf219a3ae9b2cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1aa9260172c0c9dabb61a525faf219a3ae9b2cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91a0e18866d143c045e9e29377a6e918011c0b63", "comment_count": 10, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91a0e18866d143c045e9e29377a6e918011c0b63", "html_url": "https://github.com/rust-lang/rust/commit/91a0e18866d143c045e9e29377a6e918011c0b63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91a0e18866d143c045e9e29377a6e918011c0b63/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2368c3c11ddab9d812c4ddec2e44579326ad347", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2368c3c11ddab9d812c4ddec2e44579326ad347", "html_url": "https://github.com/rust-lang/rust/commit/d2368c3c11ddab9d812c4ddec2e44579326ad347"}], "stats": {"total": 467, "additions": 396, "deletions": 71}, "files": [{"sha": "5b90d41ceeceb85c5e1ed457f054032149d39bc1", "filename": "mk/clean.mk", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/mk%2Fclean.mk", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/mk%2Fclean.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fclean.mk?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -64,6 +64,7 @@ clean-generic-$(2)-$(1):\n          -name '*.dll' -o \\\n          -name '*.def' -o \\\n          -name '*.py' -o \\\n+         -name '*.pyc' -o \\\n          -name '*.bc' \\\n          \\) \\\n          | xargs rm -f\n@@ -79,7 +80,7 @@ define CLEAN_HOST_STAGE_N\n \n clean$(1)_H_$(2): \\\n \t    $$(foreach crate,$$(CRATES),clean$(1)_H_$(2)-lib-$$(crate)) \\\n-\t    $$(foreach tool,$$(TOOLS) $$(DEBUGGER_BIN_SCRIPTS),clean$(1)_H_$(2)-tool-$$(tool))\n+\t    $$(foreach tool,$$(TOOLS) $$(DEBUGGER_BIN_SCRIPTS_ALL),clean$(1)_H_$(2)-tool-$$(tool))\n \t$$(Q)rm -fr $(2)/rt/libbacktrace\n \n clean$(1)_H_$(2)-tool-%:\n@@ -99,7 +100,7 @@ define CLEAN_TARGET_STAGE_N\n \n clean$(1)_T_$(2)_H_$(3): \\\n \t    $$(foreach crate,$$(CRATES),clean$(1)_T_$(2)_H_$(3)-lib-$$(crate)) \\\n-\t    $$(foreach tool,$$(TOOLS) $$(DEBUGGER_BIN_SCRIPTS),clean$(1)_T_$(2)_H_$(3)-tool-$$(tool))\n+\t    $$(foreach tool,$$(TOOLS) $$(DEBUGGER_BIN_SCRIPTS_ALL),clean$(1)_T_$(2)_H_$(3)-tool-$$(tool))\n \t$$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/libmorestack.a\n \t$$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/libcompiler-rt.a\n \t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/librun_pass_stage* # For unix"}, {"sha": "899cc42d066e4a2032a37a5646925fecb7e913d2", "filename": "mk/debuggers.mk", "status": "modified", "additions": 88, "deletions": 13, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/mk%2Fdebuggers.mk", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/mk%2Fdebuggers.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fdebuggers.mk?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -12,26 +12,77 @@\n # Copy debugger related scripts\n ######################################################################\n \n-DEBUGGER_RUSTLIB_ETC_SCRIPTS=lldb_rust_formatters.py\n-DEBUGGER_BIN_SCRIPTS=rust-lldb\n \n-DEBUGGER_RUSTLIB_ETC_SCRIPTS_ABS=$(foreach script,$(DEBUGGER_RUSTLIB_ETC_SCRIPTS), \\\n-                                     $(CFG_SRC_DIR)src/etc/$(script))\n-DEBUGGER_BIN_SCRIPTS_ABS=$(foreach script,$(DEBUGGER_BIN_SCRIPTS), \\\n-                             $(CFG_SRC_DIR)src/etc/$(script))\n+## GDB ##\n+DEBUGGER_RUSTLIB_ETC_SCRIPTS_GDB=gdb_load_rust_pretty_printers.py \\\n+                                 gdb_rust_pretty_printing.py\n+DEBUGGER_RUSTLIB_ETC_SCRIPTS_GDB_ABS=\\\n+    $(foreach script,$(DEBUGGER_RUSTLIB_ETC_SCRIPTS_GDB), \\\n+        $(CFG_SRC_DIR)src/etc/$(script))\n+\n+DEBUGGER_BIN_SCRIPTS_GDB=rust-gdb\n+DEBUGGER_BIN_SCRIPTS_GDB_ABS=\\\n+    $(foreach script,$(DEBUGGER_BIN_SCRIPTS_GDB), \\\n+        $(CFG_SRC_DIR)src/etc/$(script))\n+\n+\n+## LLDB ##\n+DEBUGGER_RUSTLIB_ETC_SCRIPTS_LLDB=lldb_rust_formatters.py\n+DEBUGGER_RUSTLIB_ETC_SCRIPTS_LLDB_ABS=\\\n+    $(foreach script,$(DEBUGGER_RUSTLIB_ETC_SCRIPTS_LLDB), \\\n+        $(CFG_SRC_DIR)src/etc/$(script))\n+\n+DEBUGGER_BIN_SCRIPTS_LLDB=rust-lldb\n+DEBUGGER_BIN_SCRIPTS_LLDB_ABS=\\\n+    $(foreach script,$(DEBUGGER_BIN_SCRIPTS_LLDB), \\\n+        $(CFG_SRC_DIR)src/etc/$(script))\n+\n+\n+## ALL ##\n+DEBUGGER_RUSTLIB_ETC_SCRIPTS_ALL=$(DEBUGGER_RUSTLIB_ETC_SCRIPTS_GDB) \\\n+                                 $(DEBUGGER_RUSTLIB_ETC_SCRIPTS_LLDB)\n+DEBUGGER_RUSTLIB_ETC_SCRIPTS_ALL_ABS=$(DEBUGGER_RUSTLIB_ETC_SCRIPTS_GDB_ABS) \\\n+                                     $(DEBUGGER_RUSTLIB_ETC_SCRIPTS_LLDB_ABS)\n+DEBUGGER_BIN_SCRIPTS_ALL=$(DEBUGGER_BIN_SCRIPTS_GDB) \\\n+                         $(DEBUGGER_BIN_SCRIPTS_LLDB)\n+DEBUGGER_BIN_SCRIPTS_ALL_ABS=$(DEBUGGER_BIN_SCRIPTS_GDB_ABS) \\\n+                             $(DEBUGGER_BIN_SCRIPTS_LLDB_ABS)\n \n-DEBUGGER_SCRIPTS_ALL=$(DEBUGGER_RUSTLIB_ETC_SCRIPTS_ABS) $(DEBUGGER_BIN_SCRIPTS_ABS)\n \n # $(1) - the stage to copy to\n # $(2) - the host triple\n define DEF_INSTALL_DEBUGGER_SCRIPTS_HOST\n \n-tmp/install-debugger-scripts$(1)_H_$(2).done: $$(DEBUGGER_SCRIPTS_ALL)\n+tmp/install-debugger-scripts$(1)_H_$(2)-gdb.done: \\\n+  $$(DEBUGGER_RUSTLIB_ETC_SCRIPTS_GDB_ABS) \\\n+  $$(DEBUGGER_BIN_SCRIPTS_GDB_ABS)\n+\t$(Q)mkdir -p $$(HBIN$(1)_H_$(2))\n+\t$(Q)mkdir -p $$(HLIB$(1)_H_$(2))/rustlib/etc\n+\t$(Q)install $$(DEBUGGER_BIN_SCRIPTS_GDB_ABS) $$(HBIN$(1)_H_$(2))\n+\t$(Q)install $$(DEBUGGER_RUSTLIB_ETC_SCRIPTS_GDB_ABS) $$(HLIB$(1)_H_$(2))/rustlib/etc\n+\t$(Q)touch $$@\n+\n+tmp/install-debugger-scripts$(1)_H_$(2)-lldb.done: \\\n+  $$(DEBUGGER_RUSTLIB_ETC_SCRIPTS_LLDB_ABS) \\\n+  $$(DEBUGGER_BIN_SCRIPTS_LLDB_ABS)\n+\t$(Q)mkdir -p $$(HBIN$(1)_H_$(2))\n+\t$(Q)mkdir -p $$(HLIB$(1)_H_$(2))/rustlib/etc\n+\t$(Q)install $$(DEBUGGER_BIN_SCRIPTS_LLDB_ABS) $$(HBIN$(1)_H_$(2))\n+\t$(Q)install $$(DEBUGGER_RUSTLIB_ETC_SCRIPTS_LLDB_ABS) $$(HLIB$(1)_H_$(2))/rustlib/etc\n+\t$(Q)touch $$@\n+\n+tmp/install-debugger-scripts$(1)_H_$(2)-all.done: \\\n+  $$(DEBUGGER_RUSTLIB_ETC_SCRIPTS_ALL_ABS) \\\n+  $$(DEBUGGER_BIN_SCRIPTS_ALL_ABS)\n \t$(Q)mkdir -p $$(HBIN$(1)_H_$(2))\n \t$(Q)mkdir -p $$(HLIB$(1)_H_$(2))/rustlib/etc\n-\t$(Q)install $(DEBUGGER_BIN_SCRIPTS_ABS) $$(HBIN$(1)_H_$(2))\n-\t$(Q)install $(DEBUGGER_RUSTLIB_ETC_SCRIPTS_ABS) $$(HLIB$(1)_H_$(2))/rustlib/etc\n+\t$(Q)install $$(DEBUGGER_BIN_SCRIPTS_ALL_ABS) $$(HBIN$(1)_H_$(2))\n+\t$(Q)install $$(DEBUGGER_RUSTLIB_ETC_SCRIPTS_ALL_ABS) $$(HLIB$(1)_H_$(2))/rustlib/etc\n \t$(Q)touch $$@\n+\n+tmp/install-debugger-scripts$(1)_H_$(2)-none.done:\n+\t$(Q)touch $$@\n+\n endef\n \n # Expand host make-targets for all stages\n@@ -44,12 +95,36 @@ $(foreach stage,$(STAGES), \\\n # $(3) is the host triple\n define DEF_INSTALL_DEBUGGER_SCRIPTS_TARGET\n \n-tmp/install-debugger-scripts$(1)_T_$(2)_H_$(3).done: $$(DEBUGGER_SCRIPTS_ALL)\n+tmp/install-debugger-scripts$(1)_T_$(2)_H_$(3)-gdb.done: \\\n+  $$(DEBUGGER_RUSTLIB_ETC_SCRIPTS_GDB_ABS) \\\n+  $$(DEBUGGER_BIN_SCRIPTS_GDB_ABS)\n+\t$(Q)mkdir -p $$(TBIN$(1)_T_$(2)_H_$(3))\n+\t$(Q)mkdir -p $$(TLIB$(1)_T_$(2)_H_$(3))/rustlib/etc\n+\t$(Q)install $(DEBUGGER_BIN_SCRIPTS_GDB_ABS) $$(TBIN$(1)_T_$(2)_H_$(3))\n+\t$(Q)install $(DEBUGGER_RUSTLIB_ETC_SCRIPTS_GDB_ABS) $$(TLIB$(1)_T_$(2)_H_$(3))/rustlib/etc\n+\t$(Q)touch $$@\n+\n+tmp/install-debugger-scripts$(1)_T_$(2)_H_$(3)-lldb.done: \\\n+  $$(DEBUGGER_RUSTLIB_ETC_SCRIPTS_LLDB_ABS) \\\n+  $$(DEBUGGER_BIN_SCRIPTS_LLDB_ABS)\n \t$(Q)mkdir -p $$(TBIN$(1)_T_$(2)_H_$(3))\n \t$(Q)mkdir -p $$(TLIB$(1)_T_$(2)_H_$(3))/rustlib/etc\n-\t$(Q)install $(DEBUGGER_BIN_SCRIPTS_ABS) $$(TBIN$(1)_T_$(2)_H_$(3))\n-\t$(Q)install $(DEBUGGER_RUSTLIB_ETC_SCRIPTS_ABS) $$(TLIB$(1)_T_$(2)_H_$(3))/rustlib/etc\n+\t$(Q)install $(DEBUGGER_BIN_SCRIPTS_LLDB_ABS) $$(TBIN$(1)_T_$(2)_H_$(3))\n+\t$(Q)install $(DEBUGGER_RUSTLIB_ETC_SCRIPTS_LLDB_ABS) $$(TLIB$(1)_T_$(2)_H_$(3))/rustlib/etc\n \t$(Q)touch $$@\n+\n+tmp/install-debugger-scripts$(1)_T_$(2)_H_$(3)-all.done: \\\n+  $$(DEBUGGER_RUSTLIB_ETC_SCRIPTS_ALL_ABS) \\\n+  $$(DEBUGGER_BIN_SCRIPTS_ALL_ABS)\n+\t$(Q)mkdir -p $$(TBIN$(1)_T_$(2)_H_$(3))\n+\t$(Q)mkdir -p $$(TLIB$(1)_T_$(2)_H_$(3))/rustlib/etc\n+\t$(Q)install $(DEBUGGER_BIN_SCRIPTS_ALL_ABS) $$(TBIN$(1)_T_$(2)_H_$(3))\n+\t$(Q)install $(DEBUGGER_RUSTLIB_ETC_SCRIPTS_ALL_ABS) $$(TLIB$(1)_T_$(2)_H_$(3))/rustlib/etc\n+\t$(Q)touch $$@\n+\n+tmp/install-debugger-scripts$(1)_T_$(2)_H_$(3)-none.done:\n+\t$(Q)touch $$@\n+\n endef\n \n # Expand target make-targets for all stages"}, {"sha": "7d0617b988a4bfb852a19f282ff73f7a786394be", "filename": "mk/main.mk", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/mk%2Fmain.mk", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/mk%2Fmain.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fmain.mk?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -325,6 +325,12 @@ export CFG_DISABLE_INJECT_STD_VERSION\n # Per-stage targets and runner\n ######################################################################\n \n+# Valid setting-strings are 'all', 'none', 'gdb', 'lldb'\n+# This 'function' will determine which debugger scripts to copy based on a\n+# target triple. See debuggers.mk for more information.\n+TRIPLE_TO_DEBUGGER_SCRIPT_SETTING=\\\n+ $(if $(findstring windows,$(1)),none,$(if $(findstring darwin,$(1)),lldb,gdb))\n+\n STAGES = 0 1 2 3\n \n define SREQ\n@@ -357,7 +363,7 @@ else\n HSREQ$(1)_H_$(3) = \\\n \t$$(HBIN$(1)_H_$(3))/rustc$$(X_$(3)) \\\n \t$$(MKFILE_DEPS) \\\n-\ttmp/install-debugger-scripts$(1)_H_$(3).done\n+\ttmp/install-debugger-scripts$(1)_H_$(3)-$$(call TRIPLE_TO_DEBUGGER_SCRIPT_SETTING,$(3)).done\n endif\n \n # Prerequisites for using the stageN compiler to build target artifacts\n@@ -372,7 +378,7 @@ SREQ$(1)_T_$(2)_H_$(3) = \\\n \t$$(TSREQ$(1)_T_$(2)_H_$(3)) \\\n \t$$(foreach dep,$$(TARGET_CRATES), \\\n \t    $$(TLIB$(1)_T_$(2)_H_$(3))/stamp.$$(dep)) \\\n-\ttmp/install-debugger-scripts$(1)_T_$(2)_H_$(3).done\n+\ttmp/install-debugger-scripts$(1)_T_$(2)_H_$(3)-$$(call TRIPLE_TO_DEBUGGER_SCRIPT_SETTING,$(2)).done\n \n # Prerequisites for a working stageN compiler and complete set of target\n # libraries"}, {"sha": "52fbbef81bd78e4098fd9ecafd1b3981f1ea70c6", "filename": "mk/prepare.mk", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/mk%2Fprepare.mk", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/mk%2Fprepare.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fprepare.mk?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -144,6 +144,27 @@ prepare-target-$(2)-host-$(3)-$(1)-$(4): prepare-maybe-clean-$(4) \\\n           $$(call PREPARE_LIB,libcompiler-rt.a),),),)\n endef\n \n+define INSTALL_GDB_DEBUGGER_SCRIPTS_COMMANDS\n+\t$(Q)$(PREPARE_BIN_CMD) $(DEBUGGER_BIN_SCRIPTS_GDB_ABS) $(PREPARE_DEST_BIN_DIR)\n+\t$(Q)$(PREPARE_LIB_CMD) $(DEBUGGER_RUSTLIB_ETC_SCRIPTS_GDB_ABS) $(PREPARE_DEST_LIB_DIR)/rustlib/etc\n+endef\n+\n+define INSTALL_LLDB_DEBUGGER_SCRIPTS_COMMANDS\n+\t$(Q)$(PREPARE_BIN_CMD) $(DEBUGGER_BIN_SCRIPTS_LLDB_ABS) $(PREPARE_DEST_BIN_DIR)\n+\t$(Q)$(PREPARE_LIB_CMD) $(DEBUGGER_RUSTLIB_ETC_SCRIPTS_LLDB_ABS) $(PREPARE_DEST_LIB_DIR)/rustlib/etc\n+endef\n+\n+define INSTALL_NO_DEBUGGER_SCRIPTS_COMMANDS\n+\t$(Q)echo \"No debugger scripts will be installed for host $(PREPARE_HOST)\"\n+endef\n+\n+# $(1) is PREPARE_HOST\n+INSTALL_DEBUGGER_SCRIPT_COMMANDS=$(if $(findstring windows,$(1)),\\\n+                                   $(INSTALL_NO_DEBUGGER_SCRIPTS_COMMANDS),\\\n+                                   $(if $(findstring darwin,$(1)),\\\n+                                     $(INSTALL_LLDB_DEBUGGER_SCRIPTS_COMMANDS),\\\n+                                     $(INSTALL_GDB_DEBUGGER_SCRIPTS_COMMANDS)))\n+\n define DEF_PREPARE\n \n prepare-base-$(1): PREPARE_SOURCE_DIR=$$(PREPARE_HOST)/stage$$(PREPARE_STAGE)\n@@ -170,9 +191,10 @@ prepare-host-dirs-$(1): prepare-maybe-clean-$(1)\n \t$$(call PREPARE_DIR,$$(PREPARE_DEST_LIB_DIR)/rustlib/etc)\n \t$$(call PREPARE_DIR,$$(PREPARE_DEST_MAN_DIR))\n \n-prepare-debugger-scripts-$(1): prepare-host-dirs-$(1) $(DEBUGGER_SCRIPTS_ALL)\n-\t$$(Q)$$(PREPARE_BIN_CMD) $(DEBUGGER_BIN_SCRIPTS_ABS) $$(PREPARE_DEST_BIN_DIR)\n-\t$$(Q)$$(PREPARE_LIB_CMD) $(DEBUGGER_RUSTLIB_ETC_SCRIPTS_ABS) $$(PREPARE_DEST_LIB_DIR)/rustlib/etc\n+prepare-debugger-scripts-$(1): prepare-host-dirs-$(1) \\\n+                               $$(DEBUGGER_BIN_SCRIPTS_ALL_ABS) \\\n+                               $$(DEBUGGER_RUSTLIB_ETC_SCRIPTS_ALL_ABS)\n+\t$$(call INSTALL_DEBUGGER_SCRIPT_COMMANDS,$$(PREPARE_HOST))\n \n $$(foreach tool,$$(PREPARE_TOOLS), \\\n   $$(foreach host,$$(CFG_HOST), \\"}, {"sha": "6bc34f1eb2c60da030ecc0e51bb8b64afd280dfe", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 4, "deletions": 33, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -367,7 +367,6 @@ fn run_debuginfo_gdb_test(config: &Config, props: &TestProps, testfile: &Path) {\n     let DebuggerCommands {\n         commands,\n         check_lines,\n-        use_gdb_pretty_printer,\n         breakpoint_lines\n     } = parse_debugger_commands(testfile, \"gdb\");\n     let mut cmds = commands.connect(\"\\n\");\n@@ -521,16 +520,11 @@ fn run_debuginfo_gdb_test(config: &Config, props: &TestProps, testfile: &Path) {\n                     if header::gdb_version_to_int(version.as_slice()) >\n                         header::gdb_version_to_int(\"7.4\") {\n                         // Add the directory containing the pretty printers to\n-                        // GDB's script auto loading safe path ...\n+                        // GDB's script auto loading safe path\n                         script_str.push_str(\n                             format!(\"add-auto-load-safe-path {}\\n\",\n                                     rust_pp_module_abs_path.replace(\"\\\\\", \"\\\\\\\\\").as_slice())\n                                 .as_slice());\n-                        // ... and also the test directory\n-                        script_str.push_str(\n-                            format!(\"add-auto-load-safe-path {}\\n\",\n-                                    config.build_base.as_str().unwrap().replace(\"\\\\\", \"\\\\\\\\\"))\n-                                .as_slice());\n                     }\n                 }\n                 _ => {\n@@ -543,6 +537,9 @@ fn run_debuginfo_gdb_test(config: &Config, props: &TestProps, testfile: &Path) {\n             // pretty printing, it just tells GDB to print values on one line:\n             script_str.push_str(\"set print pretty off\\n\");\n \n+            // Add the pretty printer directory to GDB's source-file search path\n+            script_str.push_str(format!(\"directory {}\\n\", rust_pp_module_abs_path)[]);\n+\n             // Load the target executable\n             script_str.push_str(format!(\"file {}\\n\",\n                                         exe_file.as_str().unwrap().replace(\"\\\\\", \"\\\\\\\\\"))\n@@ -564,12 +561,6 @@ fn run_debuginfo_gdb_test(config: &Config, props: &TestProps, testfile: &Path) {\n                              script_str.as_slice(),\n                              \"debugger.script\");\n \n-            if use_gdb_pretty_printer {\n-                // Only emit the gdb auto-loading script if pretty printers\n-                // should actually be loaded\n-                dump_gdb_autoload_script(config, testfile);\n-            }\n-\n             // run debugger script with gdb\n             #[cfg(windows)]\n             fn debugger() -> String {\n@@ -611,19 +602,6 @@ fn run_debuginfo_gdb_test(config: &Config, props: &TestProps, testfile: &Path) {\n     }\n \n     check_debugger_output(&debugger_run_result, check_lines.as_slice());\n-\n-    fn dump_gdb_autoload_script(config: &Config, testfile: &Path) {\n-        let mut script_path = output_base_name(config, testfile);\n-        let mut script_file_name = script_path.filename().unwrap().to_vec();\n-        script_file_name.push_all(\"-gdb.py\".as_bytes());\n-        script_path.set_filename(script_file_name.as_slice());\n-\n-        let script_content = \"import gdb_rust_pretty_printing\\n\\\n-                              gdb_rust_pretty_printing.register_printers(gdb.current_objfile())\\n\"\n-                             .as_bytes();\n-\n-        File::create(&script_path).write(script_content).unwrap();\n-    }\n }\n \n fn find_rust_src_root(config: &Config) -> Option<Path> {\n@@ -781,7 +759,6 @@ struct DebuggerCommands {\n     commands: Vec<String>,\n     check_lines: Vec<String>,\n     breakpoint_lines: Vec<uint>,\n-    use_gdb_pretty_printer: bool\n }\n \n fn parse_debugger_commands(file_path: &Path, debugger_prefix: &str)\n@@ -794,7 +771,6 @@ fn parse_debugger_commands(file_path: &Path, debugger_prefix: &str)\n     let mut breakpoint_lines = vec!();\n     let mut commands = vec!();\n     let mut check_lines = vec!();\n-    let mut use_gdb_pretty_printer = false;\n     let mut counter = 1;\n     let mut reader = BufferedReader::new(File::open(file_path).unwrap());\n     for line in reader.lines() {\n@@ -804,10 +780,6 @@ fn parse_debugger_commands(file_path: &Path, debugger_prefix: &str)\n                     breakpoint_lines.push(counter);\n                 }\n \n-                if line.as_slice().contains(\"gdb-use-pretty-printer\") {\n-                    use_gdb_pretty_printer = true;\n-                }\n-\n                 header::parse_name_value_directive(\n                         line.as_slice(),\n                         command_directive.as_slice()).map(|cmd| {\n@@ -832,7 +804,6 @@ fn parse_debugger_commands(file_path: &Path, debugger_prefix: &str)\n         commands: commands,\n         check_lines: check_lines,\n         breakpoint_lines: breakpoint_lines,\n-        use_gdb_pretty_printer: use_gdb_pretty_printer,\n     }\n }\n "}, {"sha": "755cac153d10d0f57eec3ad3cd1e841276ae8e69", "filename": "src/etc/gdb_load_rust_pretty_printers.py", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Fetc%2Fgdb_load_rust_pretty_printers.py", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Fetc%2Fgdb_load_rust_pretty_printers.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fgdb_load_rust_pretty_printers.py?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -0,0 +1,12 @@\n+# Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+import gdb_rust_pretty_printing\n+gdb_rust_pretty_printing.register_printers(gdb.current_objfile())"}, {"sha": "520a108da914cf965d6768a6d0f474fc5986f04e", "filename": "src/etc/rust-gdb", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Fetc%2Frust-gdb", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Fetc%2Frust-gdb", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Frust-gdb?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -0,0 +1,23 @@\n+#!/bin/sh\n+# Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+# Exit if anything fails\n+set -e\n+\n+# Find out where the pretty printer Python module is\n+RUSTC_SYSROOT=`rustc --print=sysroot`\n+GDB_PYTHON_MODULE_DIRECTORY=\"$RUSTC_SYSROOT/lib/rustlib/etc\"\n+\n+# Run GDB with the additional arguments that load the pretty printers\n+PYTHONPATH=\"$PYTHONPATH:$GDB_PYTHON_MODULE_DIRECTORY\" gdb \\\n+  -d \"$GDB_PYTHON_MODULE_DIRECTORY\" \\\n+  -iex \"add-auto-load-safe-path $GDB_PYTHON_MODULE_DIRECTORY\" \\\n+  \"$@\""}, {"sha": "7c496623d62d2da9236db4117d33f32155f9241d", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -654,6 +654,7 @@ impl LintPass for UnusedAttributes {\n             \"static_assert\",\n             \"thread_local\",\n             \"no_debug\",\n+            \"omit_gdb_pretty_printer_section\",\n             \"unsafe_no_drop_flag\",\n \n             // used in resolve"}, {"sha": "296ebcf9cfd8f7b946bef5d6e0bf2700654f2d57", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -1743,7 +1743,8 @@ extern {\n                                           isOptimized: bool,\n                                           Flags: *const c_char,\n                                           RuntimeVer: c_uint,\n-                                          SplitName: *const c_char);\n+                                          SplitName: *const c_char)\n+                                          -> DIDescriptor;\n \n     pub fn LLVMDIBuilderCreateFile(Builder: DIBuilderRef,\n                                    Filename: *const c_char,"}, {"sha": "c0837a54cdbef0ad6c47dd3e15b52d332c9f4754", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -2673,6 +2673,8 @@ pub fn create_entry_wrapper(ccx: &CrateContext,\n         unsafe {\n             llvm::LLVMPositionBuilderAtEnd(bld, llbb);\n \n+            debuginfo::insert_reference_to_gdb_debug_scripts_section_global(ccx);\n+\n             let (start_fn, args) = if use_start_lang_item {\n                 let start_def_id = match ccx.tcx().lang_items.require(StartFnLangItem) {\n                     Ok(id) => id,"}, {"sha": "23221d88157e9a173b876a9d23eced2cd90da870", "filename": "src/librustc_trans/trans/debuginfo.rs", "status": "modified", "additions": 87, "deletions": 5, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -212,7 +212,7 @@ use std::ptr;\n use std::rc::{Rc, Weak};\n use syntax::util::interner::Interner;\n use syntax::codemap::{Span, Pos};\n-use syntax::{ast, codemap, ast_util, ast_map};\n+use syntax::{ast, codemap, ast_util, ast_map, attr};\n use syntax::ast_util::PostExpansionMethod;\n use syntax::parse::token::{mod, special_idents};\n \n@@ -740,7 +740,16 @@ pub fn finalize(cx: &CrateContext) {\n     }\n \n     debug!(\"finalize\");\n-    compile_unit_metadata(cx);\n+    let _ = compile_unit_metadata(cx);\n+\n+    if needs_gdb_debug_scripts_section(cx) {\n+        // Add a .debug_gdb_scripts section to this compile-unit. This will\n+        // cause GDB to try and load the gdb_load_rust_pretty_printers.py file,\n+        // which activates the Rust pretty printers for binary this section is\n+        // contained in.\n+        get_or_insert_gdb_debug_scripts_section_global(cx);\n+    }\n+\n     unsafe {\n         llvm::LLVMDIBuilderFinalize(DIB(cx));\n         llvm::LLVMDIBuilderDispose(DIB(cx));\n@@ -1579,7 +1588,7 @@ fn create_DIArray(builder: DIBuilderRef, arr: &[DIDescriptor]) -> DIArray {\n     };\n }\n \n-fn compile_unit_metadata(cx: &CrateContext) {\n+fn compile_unit_metadata(cx: &CrateContext) -> DIDescriptor {\n     let work_dir = &cx.sess().working_dir;\n     let compile_unit_name = match cx.sess().local_crate_source_file {\n         None => fallback_path(cx),\n@@ -1614,7 +1623,7 @@ fn compile_unit_metadata(cx: &CrateContext) {\n                            (option_env!(\"CFG_VERSION\")).expect(\"CFG_VERSION\"));\n \n     let compile_unit_name = compile_unit_name.as_ptr();\n-    work_dir.as_vec().with_c_str(|work_dir| {\n+    return work_dir.as_vec().with_c_str(|work_dir| {\n         producer.with_c_str(|producer| {\n             \"\".with_c_str(|flags| {\n                 \"\".with_c_str(|split_name| {\n@@ -1628,7 +1637,7 @@ fn compile_unit_metadata(cx: &CrateContext) {\n                             cx.sess().opts.optimize != config::No,\n                             flags,\n                             0,\n-                            split_name);\n+                            split_name)\n                     }\n                 })\n             })\n@@ -4103,3 +4112,76 @@ fn namespace_for_item(cx: &CrateContext, def_id: ast::DefId) -> Rc<NamespaceTree\n         }\n     })\n }\n+\n+\n+//=-----------------------------------------------------------------------------\n+// .debug_gdb_scripts binary section\n+//=-----------------------------------------------------------------------------\n+\n+/// Inserts a side-effect free instruction sequence that makes sure that the\n+/// .debug_gdb_scripts global is referenced, so it isn't removed by the linker.\n+pub fn insert_reference_to_gdb_debug_scripts_section_global(ccx: &CrateContext) {\n+    if needs_gdb_debug_scripts_section(ccx) {\n+        let empty = b\"\".to_c_str();\n+        let gdb_debug_scripts_section_global =\n+            get_or_insert_gdb_debug_scripts_section_global(ccx);\n+        unsafe {\n+            let volative_load_instruction =\n+                llvm::LLVMBuildLoad(ccx.raw_builder(),\n+                                    gdb_debug_scripts_section_global,\n+                                    empty.as_ptr());\n+            llvm::LLVMSetVolatile(volative_load_instruction, llvm::True);\n+        }\n+    }\n+}\n+\n+/// Allocates the global variable responsible for the .debug_gdb_scripts binary\n+/// section.\n+fn get_or_insert_gdb_debug_scripts_section_global(ccx: &CrateContext)\n+                                                  -> llvm::ValueRef {\n+    let section_var_name = b\"__rustc_debug_gdb_scripts_section__\".to_c_str();\n+\n+    let section_var = unsafe {\n+        llvm::LLVMGetNamedGlobal(ccx.llmod(), section_var_name.as_ptr())\n+    };\n+\n+    if section_var == ptr::null_mut() {\n+        let section_name = b\".debug_gdb_scripts\".to_c_str();\n+        let section_contents = b\"\\x01gdb_load_rust_pretty_printers.py\\0\";\n+\n+        unsafe {\n+            let llvm_type = Type::array(&Type::i8(ccx),\n+                                        section_contents.len() as u64);\n+            let section_var = llvm::LLVMAddGlobal(ccx.llmod(),\n+                                                  llvm_type.to_ref(),\n+                                                  section_var_name.as_ptr());\n+            llvm::LLVMSetSection(section_var, section_name.as_ptr());\n+            llvm::LLVMSetInitializer(section_var, C_bytes(ccx, section_contents));\n+            llvm::LLVMSetGlobalConstant(section_var, llvm::True);\n+            llvm::LLVMSetUnnamedAddr(section_var, llvm::True);\n+            llvm::SetLinkage(section_var, llvm::Linkage::LinkOnceODRLinkage);\n+            // This should make sure that the whole section is not larger than\n+            // the string it contains. Otherwise we get a warning from GDB.\n+            llvm::LLVMSetAlignment(section_var, 1);\n+            section_var\n+        }\n+    } else {\n+        section_var\n+    }\n+}\n+\n+fn needs_gdb_debug_scripts_section(ccx: &CrateContext) -> bool {\n+    let omit_gdb_pretty_printer_section =\n+        attr::contains_name(ccx.tcx()\n+                               .map\n+                               .krate()\n+                               .attrs\n+                               .as_slice(),\n+                            \"omit_gdb_pretty_printer_section\");\n+\n+    !omit_gdb_pretty_printer_section &&\n+    !ccx.sess().target.target.options.is_like_osx &&\n+    !ccx.sess().target.target.options.is_like_windows &&\n+    ccx.sess().opts.debuginfo != NoDebugInfo\n+}\n+"}, {"sha": "bce73a27699363db24e5f4339c7b6bbff6216396", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -257,7 +257,7 @@ extern \"C\" void LLVMDIBuilderFinalize(DIBuilderRef Builder) {\n     Builder->finalize();\n }\n \n-extern \"C\" void LLVMDIBuilderCreateCompileUnit(\n+extern \"C\" LLVMValueRef LLVMDIBuilderCreateCompileUnit(\n     DIBuilderRef Builder,\n     unsigned Lang,\n     const char* File,\n@@ -267,8 +267,14 @@ extern \"C\" void LLVMDIBuilderCreateCompileUnit(\n     const char* Flags,\n     unsigned RuntimeVer,\n     const char* SplitName) {\n-    Builder->createCompileUnit(Lang, File, Dir, Producer, isOptimized,\n-        Flags, RuntimeVer, SplitName);\n+    return wrap(Builder->createCompileUnit(Lang,\n+                                           File,\n+                                           Dir,\n+                                           Producer,\n+                                           isOptimized,\n+                                           Flags,\n+                                           RuntimeVer,\n+                                           SplitName));\n }\n \n extern \"C\" LLVMValueRef LLVMDIBuilderCreateFile("}, {"sha": "4251f22b291470cef15d41a0ecf391a4f5dfad59", "filename": "src/test/debuginfo/basic-types-globals-metadata.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fbasic-types-globals-metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fbasic-types-globals-metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fbasic-types-globals-metadata.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -45,6 +45,7 @@\n \n #![allow(unused_variables)]\n #![allow(dead_code)]\n+#![omit_gdb_pretty_printer_section]\n \n \n static B: bool = false;"}, {"sha": "a4d4ddfea531db9303ff0ab0a8748e73e07c3845", "filename": "src/test/debuginfo/basic-types-globals.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fbasic-types-globals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fbasic-types-globals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fbasic-types-globals.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -50,6 +50,7 @@\n // gdb-command:continue\n \n #![allow(unused_variables)]\n+#![omit_gdb_pretty_printer_section]\n \n static B: bool = false;\n static I: int = -1;"}, {"sha": "6aa228ec51bfce93cae3939bffa7ed31c6bfbb8f", "filename": "src/test/debuginfo/basic-types-metadata.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fbasic-types-metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fbasic-types-metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fbasic-types-metadata.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -48,6 +48,7 @@\n // gdb-command:continue\n \n #![allow(unused_variables)]\n+#![omit_gdb_pretty_printer_section]\n \n fn main() {\n     let unit: () = ();"}, {"sha": "bc8cdaf8eacc9eb41e6a9c14e9aff8f426ab48c1", "filename": "src/test/debuginfo/basic-types-mut-globals.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fbasic-types-mut-globals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fbasic-types-mut-globals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fbasic-types-mut-globals.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -83,6 +83,7 @@\n // gdb-check:$28 = 9.25\n \n #![allow(unused_variables)]\n+#![omit_gdb_pretty_printer_section]\n \n static mut B: bool = false;\n static mut I: int = -1;"}, {"sha": "f61f49228cdebf508223b82aaaba685f8dc6f9b2", "filename": "src/test/debuginfo/basic-types.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fbasic-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fbasic-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fbasic-types.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -88,6 +88,7 @@\n // lldb-check:[...]$12 = 3.5\n \n #![allow(unused_variables)]\n+#![omit_gdb_pretty_printer_section]\n \n fn main() {\n     let b: bool = false;"}, {"sha": "f4c31278cf63be5c83722eee42a9e8ecc004eeee", "filename": "src/test/debuginfo/borrowed-basic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fborrowed-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fborrowed-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fborrowed-basic.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -109,6 +109,7 @@\n // lldb-check:[...]$12 = 3.5\n \n #![allow(unused_variables)]\n+#![omit_gdb_pretty_printer_section]\n \n fn main() {\n     let bool_val: bool = true;"}, {"sha": "c2da58f1583c0b38c239865ce51b30a43d9607f5", "filename": "src/test/debuginfo/borrowed-c-style-enum.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fborrowed-c-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fborrowed-c-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fborrowed-c-style-enum.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -41,6 +41,7 @@\n // lldb-check:[...]$2 = TheC\n \n #![allow(unused_variables)]\n+#![omit_gdb_pretty_printer_section]\n \n enum ABC { TheA, TheB, TheC }\n "}, {"sha": "d54869888f182d590c235949d73ac9b4a4ea3f6d", "filename": "src/test/debuginfo/borrowed-enum.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fborrowed-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fborrowed-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fborrowed-enum.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -40,6 +40,7 @@\n // lldb-check:[...]$2 = TheOnlyCase(4820353753753434)\n \n #![allow(unused_variables)]\n+#![omit_gdb_pretty_printer_section]\n \n // The first element is to ensure proper alignment, irrespective of the machines word size. Since\n // the size of the discriminant value is machine dependent, this has be taken into account when"}, {"sha": "e3cf438be439c81dd56aa33163679e41c7d0b8fb", "filename": "src/test/debuginfo/borrowed-struct.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fborrowed-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fborrowed-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fborrowed-struct.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -64,6 +64,7 @@\n // lldb-check:[...]$6 = 26.5\n \n #![allow(unused_variables)]\n+#![omit_gdb_pretty_printer_section]\n \n struct SomeStruct {\n     x: int,"}, {"sha": "ce0930f2fbf38f71de67f153a28c1b6836ec987c", "filename": "src/test/debuginfo/borrowed-tuple.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fborrowed-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fborrowed-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fborrowed-tuple.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -42,6 +42,7 @@\n \n \n #![allow(unused_variables)]\n+#![omit_gdb_pretty_printer_section]\n \n fn main() {\n     let stack_val: (i16, f32) = (-14, -19f32);"}, {"sha": "d152775a8ed6a9514626589208f25474dfe9e4db", "filename": "src/test/debuginfo/borrowed-unique-basic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fborrowed-unique-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fborrowed-unique-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fborrowed-unique-basic.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -112,7 +112,7 @@\n // lldb-check:[...]$12 = 3.5\n \n #![allow(unused_variables)]\n-\n+#![omit_gdb_pretty_printer_section]\n \n fn main() {\n     let bool_box: Box<bool> = box true;"}, {"sha": "5a70eb190412832f3a0266993297a8241e5d8ab9", "filename": "src/test/debuginfo/box.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fbox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fbox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fbox.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -32,6 +32,7 @@\n // lldb-check:[...]$1 = (2, 3.5)\n \n #![allow(unused_variables)]\n+#![omit_gdb_pretty_printer_section]\n \n fn main() {\n     let a = box 1i;"}, {"sha": "f9d762bf99d28a1b43c16fe5742c5f891d726b76", "filename": "src/test/debuginfo/boxed-struct.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fboxed-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fboxed-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fboxed-struct.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -35,6 +35,7 @@\n // lldb-check:[...]$1 = StructWithDestructor { x: 77, y: 777, z: 7777, w: 77777 }\n \n #![allow(unused_variables)]\n+#![omit_gdb_pretty_printer_section]\n \n struct StructWithSomePadding {\n     x: i16,"}, {"sha": "b0c5b2f21b95cf675b96e96ef95c3ded614cb853", "filename": "src/test/debuginfo/by-value-non-immediate-argument.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fby-value-non-immediate-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fby-value-non-immediate-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fby-value-non-immediate-argument.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -71,6 +71,8 @@\n // lldb-check:[...]$6 = Case1 { x: 0, y: 8970181431921507452 }\n // lldb-command:continue\n \n+#![omit_gdb_pretty_printer_section]\n+\n #[deriving(Clone)]\n struct Struct {\n     a: int,"}, {"sha": "6907313370e1a5edf57f26e6ec3bc158dc9bea1d", "filename": "src/test/debuginfo/by-value-self-argument-in-trait-impl.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fby-value-self-argument-in-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fby-value-self-argument-in-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fby-value-self-argument-in-trait-impl.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -46,6 +46,8 @@\n // lldb-check:[...]$2 = (4444.5, 5555, 6666, 7777.5)\n // lldb-command:continue\n \n+#![omit_gdb_pretty_printer_section]\n+\n trait Trait {\n     fn method(self) -> Self;\n }"}, {"sha": "f2dfc63d52253edfe7f0211741c0927e4807765c", "filename": "src/test/debuginfo/c-style-enum-in-composite.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fc-style-enum-in-composite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fc-style-enum-in-composite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fc-style-enum-in-composite.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -65,6 +65,7 @@\n // lldb-check:[...]$6 = (StructWithDrop { a: OneHundred, b: Vienna }, 9)\n \n #![allow(unused_variables)]\n+#![omit_gdb_pretty_printer_section]\n \n use self::AnEnum::{OneHundred, OneThousand, OneMillion};\n use self::AnotherEnum::{MountainView, Toronto, Vienna};"}, {"sha": "b62a8167eaf07f30e40a54f083888b6a29018b27", "filename": "src/test/debuginfo/c-style-enum.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fc-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fc-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fc-style-enum.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -99,6 +99,7 @@\n \n #![allow(unused_variables)]\n #![allow(dead_code)]\n+#![omit_gdb_pretty_printer_section]\n \n use self::AutoDiscriminant::{One, Two, Three};\n use self::ManualDiscriminant::{OneHundred, OneThousand, OneMillion};"}, {"sha": "84366ae71146501ee1e25e61d44c4d67fc009f78", "filename": "src/test/debuginfo/closure-in-generic-function.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fclosure-in-generic-function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fclosure-in-generic-function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fclosure-in-generic-function.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -46,6 +46,8 @@\n // lldb-check:[...]$3 = 110\n // lldb-command:continue\n \n+#![omit_gdb_pretty_printer_section]\n+\n fn some_generic_fun<T1, T2>(a: T1, b: T2) -> (T2, T1) {\n \n     let closure = |x, y| {"}, {"sha": "b4688e4928a6bfa65644a532068c821cdd9b58e8", "filename": "src/test/debuginfo/destructured-fn-argument.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fdestructured-fn-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fdestructured-fn-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fdestructured-fn-argument.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -311,6 +311,7 @@\n // lldb-command:continue\n \n #![allow(unused_variables)]\n+#![omit_gdb_pretty_printer_section]\n \n use self::Univariant::Unit;\n "}, {"sha": "364720d0e4fb34d0316d8630bd29142438967371", "filename": "src/test/debuginfo/destructured-for-loop-variable.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fdestructured-for-loop-variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fdestructured-for-loop-variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fdestructured-for-loop-variable.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -152,6 +152,9 @@\n // lldb-check:[...]$23 = (34903493, 232323)\n // lldb-command:continue\n \n+#![allow(unused_variables)]\n+#![omit_gdb_pretty_printer_section]\n+\n struct Struct {\n     x: i16,\n     y: f32,"}, {"sha": "d5a6b36f1fcf90329f69cf7d16726be3f1db3f34", "filename": "src/test/debuginfo/destructured-local.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fdestructured-local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fdestructured-local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fdestructured-local.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -244,6 +244,7 @@\n \n \n #![allow(unused_variables)]\n+#![omit_gdb_pretty_printer_section]\n \n use self::Univariant::Unit;\n "}, {"sha": "f623a321922b8d7695cd4f7665cab48414a17059", "filename": "src/test/debuginfo/evec-in-struct.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fevec-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fevec-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fevec-in-struct.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -51,6 +51,7 @@\n // lldb-check:[...]$4 = StructPaddedAtEnd { x: [22, 23], y: [24, 25] }\n \n #![allow(unused_variables)]\n+#![omit_gdb_pretty_printer_section]\n \n struct NoPadding1 {\n     x: [u32; 3],"}, {"sha": "55c5c50406416aa807d43b576cc593f075587ef6", "filename": "src/test/debuginfo/function-arg-initialization.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Ffunction-arg-initialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Ffunction-arg-initialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ffunction-arg-initialization.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -222,10 +222,8 @@\n // lldb-command:continue\n \n \n-\n #![allow(unused_variables)]\n-\n-\n+#![omit_gdb_pretty_printer_section]\n \n fn immediate_args(a: int, b: bool, c: f64) {\n     ::std::io::print(\"\") // #break"}, {"sha": "01136c11014a343f8764c5ae340f10bcd7f0d1d1", "filename": "src/test/debuginfo/function-arguments.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Ffunction-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Ffunction-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ffunction-arguments.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -45,6 +45,9 @@\n // lldb-check:[...]$3 = 3000\n // lldb-command:continue\n \n+\n+#![omit_gdb_pretty_printer_section]\n+\n fn main() {\n \n     fun(111102, true);"}, {"sha": "e437e35db3a991117d4c61332a295422ba3040e9", "filename": "src/test/debuginfo/function-prologue-stepping-no-stack-check.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Ffunction-prologue-stepping-no-stack-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Ffunction-prologue-stepping-no-stack-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ffunction-prologue-stepping-no-stack-check.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -245,6 +245,7 @@\n // lldb-command:continue\n \n #![allow(unused_variables)]\n+#![omit_gdb_pretty_printer_section]\n \n #[no_stack_check]\n fn immediate_args(a: int, b: bool, c: f64) {"}, {"sha": "05ea357389bc61004678a88beb9835f47ea61329", "filename": "src/test/debuginfo/function-prologue-stepping-regular.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Ffunction-prologue-stepping-regular.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Ffunction-prologue-stepping-regular.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ffunction-prologue-stepping-regular.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -126,6 +126,7 @@\n // lldb-command:continue\n \n #![allow(unused_variables)]\n+#![omit_gdb_pretty_printer_section]\n \n fn immediate_args(a: int, b: bool, c: f64) {\n     ()"}, {"sha": "092cd9edc70658e21d3a008c9048270a9aaaf6f9", "filename": "src/test/debuginfo/gdb-pretty-struct-and-enums-pre-gdb-7-7.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fgdb-pretty-struct-and-enums-pre-gdb-7-7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fgdb-pretty-struct-and-enums-pre-gdb-7-7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgdb-pretty-struct-and-enums-pre-gdb-7-7.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -17,7 +17,6 @@\n // ignore-lldb\n // ignore-android: FIXME(#10381)\n // compile-flags:-g\n-// gdb-use-pretty-printer\n \n // gdb-command: run\n "}, {"sha": "64c120e1ab3a9a6566f59f9830afadbf708a9969", "filename": "src/test/debuginfo/gdb-pretty-struct-and-enums.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fgdb-pretty-struct-and-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fgdb-pretty-struct-and-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgdb-pretty-struct-and-enums.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -13,7 +13,6 @@\n // ignore-lldb\n // ignore-android: FIXME(#10381)\n // compile-flags:-g\n-// gdb-use-pretty-printer\n \n // This test uses some GDB Python API features (e.g. accessing anonymous fields)\n // which are only available in newer GDB version. The following directive will"}, {"sha": "cefe67970e959494f291d56b4f487e64db26c4c4", "filename": "src/test/debuginfo/generic-function.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fgeneric-function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fgeneric-function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgeneric-function.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -70,6 +70,7 @@\n // lldb-check:[...]$8 = ((5, Struct { a: 6, b: 7.5 }), (Struct { a: 6, b: 7.5 }, 5))\n // lldb-command:continue\n \n+#![omit_gdb_pretty_printer_section]\n \n #[deriving(Clone)]\n struct Struct {"}, {"sha": "0f3fd556f189a6c64f67d52cfb8f994575261537", "filename": "src/test/debuginfo/generic-functions-nested.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fgeneric-functions-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fgeneric-functions-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgeneric-functions-nested.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -70,6 +70,9 @@\n // lldb-check:[...]$7 = 2.5\n // lldb-command:continue\n \n+\n+#![omit_gdb_pretty_printer_section]\n+\n fn outer<TA: Clone>(a: TA) {\n     inner(a.clone(), 1i);\n     inner(a.clone(), 2.5f64);"}, {"sha": "0e358499a3d025d0ae0e5ac4816250f241cc041c", "filename": "src/test/debuginfo/generic-method-on-generic-struct.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fgeneric-method-on-generic-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fgeneric-method-on-generic-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgeneric-method-on-generic-struct.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -112,6 +112,7 @@\n // lldb-check:[...]$14 = -10.5\n // lldb-command:continue\n \n+#![omit_gdb_pretty_printer_section]\n \n struct Struct<T> {\n     x: T"}, {"sha": "bf755d379a6237ffd7cc26e4c341dd65d1e97389", "filename": "src/test/debuginfo/generic-static-method-on-struct-and-enum.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fgeneric-static-method-on-struct-and-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fgeneric-static-method-on-struct-and-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgeneric-static-method-on-struct-and-enum.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -31,6 +31,9 @@\n // gdb-check:$5 = 5\n // gdb-command:continue\n \n+\n+#![omit_gdb_pretty_printer_section]\n+\n struct Struct {\n     x: int\n }"}, {"sha": "992e74179137bad54a4c4b7ef50fcc2f78eb6462", "filename": "src/test/debuginfo/generic-struct-style-enum.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fgeneric-struct-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fgeneric-struct-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgeneric-struct-style-enum.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -29,6 +29,9 @@\n // gdb-command:print univariant\n // gdb-check:$4 = {{a = -1}}\n \n+\n+#![omit_gdb_pretty_printer_section]\n+\n use self::Regular::{Case1, Case2, Case3};\n use self::Univariant::TheOnlyCase;\n "}, {"sha": "908968fd6b32acbd97265b9c2bd24c37195e1d0c", "filename": "src/test/debuginfo/generic-struct.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fgeneric-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fgeneric-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgeneric-struct.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -41,6 +41,9 @@\n // lldb-command:print float_int_float\n // lldb-check:[...]$3 = AGenericStruct<f64, generic-struct::AGenericStruct<int, f64>> { key: 6.5, value: AGenericStruct<int, f64> { key: 7, value: 8.5 } }\n \n+\n+#![omit_gdb_pretty_printer_section]\n+\n struct AGenericStruct<TKey, TValue> {\n     key: TKey,\n     value: TValue"}, {"sha": "4382861fd20991af0d3e2f248fc4978e5528449c", "filename": "src/test/debuginfo/generic-trait-generic-static-default-method.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fgeneric-trait-generic-static-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fgeneric-trait-generic-static-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgeneric-trait-generic-static-default-method.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -25,6 +25,7 @@\n // gdb-check:$4 = {3.5, {4, 5, 6}}\n // gdb-command:continue\n \n+#![omit_gdb_pretty_printer_section]\n \n struct Struct {\n     x: int"}, {"sha": "f9dc9d1f055c82c205a3ae57ab29d2fdde507601", "filename": "src/test/debuginfo/generic-tuple-style-enum.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fgeneric-tuple-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fgeneric-tuple-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgeneric-tuple-style-enum.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -48,6 +48,8 @@\n // lldb-command:print univariant\n // lldb-check:[...]$3 = TheOnlyCase(-1)\n \n+#![omit_gdb_pretty_printer_section]\n+\n use self::Regular::{Case1, Case2, Case3};\n use self::Univariant::TheOnlyCase;\n "}, {"sha": "25719a802863d78898283b61a2e2dfa3a0fde9dc", "filename": "src/test/debuginfo/include_string.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Finclude_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Finclude_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Finclude_string.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -36,6 +36,7 @@\n // lldb-command:continue\n \n #![allow(unused_variables)]\n+#![omit_gdb_pretty_printer_section]\n \n // This test case makes sure that debug info does not ICE when include_str is\n // used multiple times (see issue #11322)."}, {"sha": "c6acc9a31fe3c68a0c70d13ac41f48144241b818", "filename": "src/test/debuginfo/issue12886.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fissue12886.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fissue12886.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fissue12886.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -16,9 +16,11 @@\n \n // gdb-command:run\n // gdb-command:next\n-// gdb-check:[...]32[...]s\n+// gdb-check:[...]34[...]s\n // gdb-command:continue\n \n+#![omit_gdb_pretty_printer_section]\n+\n // IF YOU MODIFY THIS FILE, BE CAREFUL TO ADAPT THE LINE NUMBERS IN THE DEBUGGER COMMANDS\n \n // This test makes sure that gdb does not set unwanted breakpoints in inlined functions. If a"}, {"sha": "3309ae13c9dcbc2430c9368f89517ca4cc3f0311", "filename": "src/test/debuginfo/lexical-scope-in-for-loop.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-for-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-for-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-for-loop.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -86,6 +86,8 @@\n // lldb-check:[...]$6 = 1000000\n // lldb-command:continue\n \n+#![omit_gdb_pretty_printer_section]\n+\n fn main() {\n \n     let range = [1i, 2, 3];"}, {"sha": "bc3a69452432550aaecd01eefabade4acc1dca05", "filename": "src/test/debuginfo/lexical-scope-in-if.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-if.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -134,6 +134,7 @@\n // lldb-check:[...]$15 = -1\n // lldb-command:continue\n \n+#![omit_gdb_pretty_printer_section]\n \n fn main() {\n "}, {"sha": "37976ab3996ae22e18a9156dadd155f7937c4f99", "filename": "src/test/debuginfo/lexical-scope-in-match.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-match.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -126,6 +126,7 @@\n // lldb-check:[...]$17 = 232\n // lldb-command:continue\n \n+#![omit_gdb_pretty_printer_section]\n \n struct Struct {\n     x: int,"}, {"sha": "d6e3a43eea0a6383f478ebf0a23243515bfcff8c", "filename": "src/test/debuginfo/lexical-scope-in-stack-closure.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-stack-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-stack-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-stack-closure.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -70,6 +70,8 @@\n // lldb-check:[...]$5 = false\n // lldb-command:continue\n \n+#![omit_gdb_pretty_printer_section]\n+\n fn main() {\n \n     let x = false;"}, {"sha": "b295c6f37a7a16d3d5567a9c32881c1f7451894b", "filename": "src/test/debuginfo/lexical-scope-in-unconditional-loop.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-unconditional-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-unconditional-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-unconditional-loop.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -132,6 +132,8 @@\n // lldb-check:[...]$12 = 2\n // lldb-command:continue\n \n+#![omit_gdb_pretty_printer_section]\n+\n fn main() {\n \n     let mut x = 0i;"}, {"sha": "be4085b63abe51dcacd0261647af347d9aa1632b", "filename": "src/test/debuginfo/lexical-scope-in-unique-closure.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-unique-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-unique-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-unique-closure.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -70,6 +70,9 @@\n // lldb-check:[...]$5 = false\n // lldb-command:continue\n \n+\n+#![omit_gdb_pretty_printer_section]\n+\n fn main() {\n \n     let x = false;"}, {"sha": "c7a36ef9b82bd07f0e69ba72d32380c11899d519", "filename": "src/test/debuginfo/lexical-scope-in-while.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-while.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -132,6 +132,7 @@\n // lldb-check:[...]$12 = 2\n // lldb-command:continue\n \n+#![omit_gdb_pretty_printer_section]\n \n fn main() {\n "}, {"sha": "be52ffff1b45e9aaba2df6274ea5240cfe740b80", "filename": "src/test/debuginfo/lexical-scope-with-macro.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Flexical-scope-with-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Flexical-scope-with-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Flexical-scope-with-macro.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -112,6 +112,7 @@\n \n \n #![feature(macro_rules)]\n+#![omit_gdb_pretty_printer_section]\n \n macro_rules! trivial {\n     ($e1:expr) => ($e1)"}, {"sha": "2f8b11ac283b63b884cf719c856d5075100f0441", "filename": "src/test/debuginfo/lexical-scopes-in-block-expression.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Flexical-scopes-in-block-expression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Flexical-scopes-in-block-expression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Flexical-scopes-in-block-expression.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -349,6 +349,7 @@\n \n #![allow(unused_variables)]\n #![allow(unused_assignments)]\n+#![omit_gdb_pretty_printer_section]\n \n static mut MUT_INT: int = 0;\n "}, {"sha": "35889ff81335c04b9789447e487988d583d27a66", "filename": "src/test/debuginfo/limited-debuginfo.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Flimited-debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Flimited-debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Flimited-debuginfo.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -30,6 +30,7 @@\n \n \n #![allow(unused_variables)]\n+#![omit_gdb_pretty_printer_section]\n \n struct Struct {\n     a: i64,"}, {"sha": "b1ebb124d4e76a53a4e877590f0e33864dc9fb46", "filename": "src/test/debuginfo/method-on-enum.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fmethod-on-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fmethod-on-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmethod-on-enum.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -113,6 +113,8 @@\n // lldb-check:[...]$14 = -10\n // lldb-command:continue\n \n+#![omit_gdb_pretty_printer_section]\n+\n enum Enum {\n     Variant1 { x: u16, y: u16 },\n     Variant2 (u32)"}, {"sha": "68a6ac8c1f31e9c00f8f635942981ad2f0c89bf0", "filename": "src/test/debuginfo/method-on-generic-struct.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fmethod-on-generic-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fmethod-on-generic-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmethod-on-generic-struct.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -113,6 +113,8 @@\n // lldb-command:continue\n \n \n+#![omit_gdb_pretty_printer_section]\n+\n struct Struct<T> {\n     x: T\n }"}, {"sha": "84e74d4364cfaa2cea68cdf833acda89c87a82cb", "filename": "src/test/debuginfo/method-on-struct.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fmethod-on-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fmethod-on-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmethod-on-struct.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -112,6 +112,9 @@\n // lldb-check:[...]$14 = -10\n // lldb-command:continue\n \n+\n+#![omit_gdb_pretty_printer_section]\n+\n struct Struct {\n     x: int\n }"}, {"sha": "f53bb11eac442555e4f9786df0b8b6a626248011", "filename": "src/test/debuginfo/method-on-trait.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fmethod-on-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fmethod-on-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmethod-on-trait.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -112,6 +112,9 @@\n // lldb-check:[...]$14 = -10\n // lldb-command:continue\n \n+\n+#![omit_gdb_pretty_printer_section]\n+\n struct Struct {\n     x: int\n }"}, {"sha": "6994c38818c1b906733db0945d942ab33ed29779", "filename": "src/test/debuginfo/method-on-tuple-struct.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fmethod-on-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fmethod-on-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmethod-on-tuple-struct.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -112,6 +112,9 @@\n // lldb-check:[...]$14 = -10\n // lldb-command:continue\n \n+\n+#![omit_gdb_pretty_printer_section]\n+\n struct TupleStruct(int, f64);\n \n impl TupleStruct {"}, {"sha": "cb21c13426a7b63cd3977f7d86cbb8cd1cef3be4", "filename": "src/test/debuginfo/multiple-functions-equal-var-names.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fmultiple-functions-equal-var-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fmultiple-functions-equal-var-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmultiple-functions-equal-var-names.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -45,6 +45,7 @@\n // lldb-check:[...]$2 = 30303\n \n #![allow(unused_variables)]\n+#![omit_gdb_pretty_printer_section]\n \n fn function_one() {\n     let abc = 10101i;"}, {"sha": "ef7c4ce2045c7fe02d9e6e593dadc3292ad6089a", "filename": "src/test/debuginfo/multiple-functions.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fmultiple-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fmultiple-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmultiple-functions.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -45,6 +45,7 @@\n // lldb-check:[...]$2 = 30303\n \n #![allow(unused_variables)]\n+#![omit_gdb_pretty_printer_section]\n \n fn function_one() {\n     let a = 10101i;"}, {"sha": "d248c7e98198c71b9c1264fb149ad8b5414e3da7", "filename": "src/test/debuginfo/name-shadowing-and-scope-nesting.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fname-shadowing-and-scope-nesting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fname-shadowing-and-scope-nesting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fname-shadowing-and-scope-nesting.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -94,6 +94,8 @@\n // lldb-check:[...]$11 = 20\n // lldb-command:continue\n \n+#![omit_gdb_pretty_printer_section]\n+\n fn main() {\n     let x = false;\n     let y = true;"}, {"sha": "f0eaf6acb6138f86ea4f7fec1fb906a0fba6bc9d", "filename": "src/test/debuginfo/nil-enum.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fnil-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fnil-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fnil-enum.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -23,6 +23,7 @@\n // gdb-check:$2 = {<No data fields>}\n \n #![allow(unused_variables)]\n+#![omit_gdb_pretty_printer_section]\n \n enum ANilEnum {}\n enum AnotherNilEnum {}"}, {"sha": "dcc1928ae50c91e7ddcf86d312be5c26e816da55", "filename": "src/test/debuginfo/no-debug-attribute.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fno-debug-attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fno-debug-attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fno-debug-attribute.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -24,6 +24,7 @@\n // gdb-command:continue\n \n #![allow(unused_variables)]\n+#![omit_gdb_pretty_printer_section]\n \n fn function_with_debuginfo() {\n     let abc = 10u;"}, {"sha": "333ad602cf1301a55c21082689f79007a42f15b3", "filename": "src/test/debuginfo/option-like-enum.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Foption-like-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Foption-like-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Foption-like-enum.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -68,6 +68,8 @@\n // lldb-check:[...]$7 = None\n \n \n+#![omit_gdb_pretty_printer_section]\n+\n // If a struct has exactly two variants, one of them is empty, and the other one\n // contains a non-nullable pointer, then this value is used as the discriminator.\n // The test cases in this file make sure that something readable is generated for"}, {"sha": "84c0b8da02c0610bdfc7d008c48399d48ce87237", "filename": "src/test/debuginfo/packed-struct-with-destructor.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fpacked-struct-with-destructor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fpacked-struct-with-destructor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fpacked-struct-with-destructor.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -74,6 +74,7 @@\n \n \n #![allow(unused_variables)]\n+#![omit_gdb_pretty_printer_section]\n \n #[repr(packed)]\n struct Packed {"}, {"sha": "97e6ee79952e8078c0480e6673833f3f3762c594", "filename": "src/test/debuginfo/packed-struct.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fpacked-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fpacked-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fpacked-struct.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -60,6 +60,7 @@\n // lldb-check:[...]$5 = 40\n \n #![allow(unused_variables)]\n+#![omit_gdb_pretty_printer_section]\n \n #[repr(packed)]\n struct Packed {"}, {"sha": "93348e7b53e559b9732726850bae5c61fb1898ed", "filename": "src/test/debuginfo/recursive-enum.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Frecursive-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Frecursive-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Frecursive-enum.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -18,6 +18,7 @@\n // is taken from issue #11083.\n \n #![allow(unused_variables)]\n+#![omit_gdb_pretty_printer_section]\n \n pub struct Window<'a> {\n     callbacks: WindowCallbacks<'a>"}, {"sha": "90c32ad8da11ffad27354715c5f94d53063cea2b", "filename": "src/test/debuginfo/recursive-struct.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Frecursive-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Frecursive-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Frecursive-struct.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -69,6 +69,7 @@\n // gdb-command:continue\n \n #![allow(unused_variables)]\n+#![omit_gdb_pretty_printer_section]\n \n use self::Opt::{Empty, Val};\n "}, {"sha": "f8ef5b3d2fcf9411cfe493eaccd8c5172cf40c19", "filename": "src/test/debuginfo/self-in-default-method.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fself-in-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fself-in-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fself-in-default-method.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -112,6 +112,7 @@\n // lldb-check:[...]$14 = -10\n // lldb-command:continue\n \n+#![omit_gdb_pretty_printer_section]\n \n struct Struct {\n     x: int"}, {"sha": "c2594df7d351c1da129e3e56bccad819dbbd2819", "filename": "src/test/debuginfo/self-in-generic-default-method.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fself-in-generic-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fself-in-generic-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fself-in-generic-default-method.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -112,6 +112,7 @@\n // lldb-check:[...]$14 = -10.5\n // lldb-command:continue\n \n+#![omit_gdb_pretty_printer_section]\n \n struct Struct {\n     x: int"}, {"sha": "c5c3664b07a7c307f355236ef695369129345ac2", "filename": "src/test/debuginfo/shadowed-argument.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fshadowed-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fshadowed-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fshadowed-argument.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -58,6 +58,9 @@\n // lldb-check:[...]$5 = 20\n // lldb-command:continue\n \n+\n+#![omit_gdb_pretty_printer_section]\n+\n fn a_function(x: bool, y: bool) {\n     zzz(); // #break\n     sentinel();"}, {"sha": "f384b756da67813c9941a6562c534b157b5d2f3c", "filename": "src/test/debuginfo/shadowed-variable.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fshadowed-variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fshadowed-variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fshadowed-variable.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -58,6 +58,8 @@\n // lldb-check:[...]$5 = 20\n // lldb-command:continue\n \n+#![omit_gdb_pretty_printer_section]\n+\n fn main() {\n     let x = false;\n     let y = true;"}, {"sha": "288e7461dd5a0c226d5a507000dfac7fc52b97ae", "filename": "src/test/debuginfo/simd.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fsimd.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -43,6 +43,7 @@\n \n #![allow(experimental)]\n #![allow(unused_variables)]\n+#![omit_gdb_pretty_printer_section]\n \n use std::simd::{i8x16, i16x8,i32x4,i64x2,u8x16,u16x8,u32x4,u64x2,f32x4,f64x2};\n "}, {"sha": "5981c18494d40c8b4ffe6079f0fc3437934f9917", "filename": "src/test/debuginfo/simple-lexical-scope.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fsimple-lexical-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fsimple-lexical-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fsimple-lexical-scope.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -78,6 +78,9 @@\n // lldb-check:[...]$6 = false\n // lldb-command:continue\n \n+\n+#![omit_gdb_pretty_printer_section]\n+\n fn main() {\n     let x = false;\n "}, {"sha": "3015b16a0aa99ea4ccdda9103f64f83c5aafc3b7", "filename": "src/test/debuginfo/simple-struct.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fsimple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fsimple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fsimple-struct.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -95,8 +95,9 @@\n // lldb-command:print padding_at_end\n // lldb-check:[...]$5 = PaddingAtEnd { x: -10014, y: 10015 }\n \n-#![allow(unused_variables)];\n-#![allow(dead_code)];\n+#![allow(unused_variables)]\n+#![allow(dead_code)]\n+#![omit_gdb_pretty_printer_section]\n \n struct NoPadding16 {\n     x: u16,"}, {"sha": "78184fab7d3904971a6c4e620f75f2e81885b03a", "filename": "src/test/debuginfo/simple-tuple.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fsimple-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fsimple-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fsimple-tuple.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -92,6 +92,7 @@\n \n #![allow(unused_variables)]\n #![allow(dead_code)]\n+#![omit_gdb_pretty_printer_section]\n \n static mut NO_PADDING_8: (i8, u8) = (-50, 50);\n static mut NO_PADDING_16: (i16, i16, u16) = (-1, 2, 3);"}, {"sha": "59ee300b3e3b52644a2fa1dc36ebf0c796ba6d84", "filename": "src/test/debuginfo/static-method-on-struct-and-enum.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fstatic-method-on-struct-and-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fstatic-method-on-struct-and-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fstatic-method-on-struct-and-enum.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -54,6 +54,8 @@\n // lldb-check:[...]$4 = 5\n // lldb-command:continue\n \n+#![omit_gdb_pretty_printer_section]\n+\n struct Struct {\n     x: int\n }"}, {"sha": "6f801a7d587d378a9b4b2b5c11d121217c34cbfa", "filename": "src/test/debuginfo/struct-in-enum.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fstruct-in-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fstruct-in-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fstruct-in-enum.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -42,6 +42,7 @@\n // lldb-check:[...]$2 = TheOnlyCase(Struct { x: 123, y: 456, z: 789 })\n \n #![allow(unused_variables)]\n+#![omit_gdb_pretty_printer_section]\n \n use self::Regular::{Case1, Case2};\n use self::Univariant::TheOnlyCase;"}, {"sha": "3f819c92e1017de50d762f9295522dec5e654e72", "filename": "src/test/debuginfo/struct-in-struct.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fstruct-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fstruct-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fstruct-in-struct.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -57,6 +57,7 @@\n // lldb-check:[...]$7 = Tree { x: Simple { x: 25 }, y: InternalPaddingParent { x: InternalPadding { x: 26, y: 27 }, y: InternalPadding { x: 28, y: 29 }, z: InternalPadding { x: 30, y: 31 } }, z: BagInBag { x: Bag { x: Simple { x: 32 } } } }\n \n #![allow(unused_variables)]\n+#![omit_gdb_pretty_printer_section]\n \n struct Simple {\n     x: i32"}, {"sha": "f6d4627082f0e2d37b8b6b009d19be2e936e2e12", "filename": "src/test/debuginfo/struct-style-enum.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fstruct-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fstruct-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fstruct-style-enum.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -49,6 +49,7 @@\n // lldb-check:[...]$3 = TheOnlyCase { a: -1 }\n \n #![allow(unused_variables)]\n+#![omit_gdb_pretty_printer_section]\n \n use self::Regular::{Case1, Case2, Case3};\n use self::Univariant::TheOnlyCase;"}, {"sha": "743f5ac5ff452c82023504d02ec1e7114ffd0ac3", "filename": "src/test/debuginfo/struct-with-destructor.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fstruct-with-destructor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fstruct-with-destructor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fstruct-with-destructor.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -45,6 +45,7 @@\n // lldb-check:[...]$3 = NestedOuter { a: NestedInner { a: WithDestructor { x: 7890, y: 9870 } } }\n \n #![allow(unused_variables)]\n+#![omit_gdb_pretty_printer_section]\n \n struct NoDestructor {\n     x: i32,"}, {"sha": "2ecafb02ae52d4e8ac4f1d1355e98d962f1162de", "filename": "src/test/debuginfo/trait-generic-static-default-method.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Ftrait-generic-static-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Ftrait-generic-static-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ftrait-generic-static-default-method.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -45,6 +45,8 @@\n // lldb-check:[...]$3 = (1, 2, 3)\n // lldb-command:continue\n \n+#![omit_gdb_pretty_printer_section]\n+\n struct Struct {\n     x: int\n }"}, {"sha": "9f8c0aa06e67692f2fd118498707a31b4772f2fa", "filename": "src/test/debuginfo/trait-pointers.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Ftrait-pointers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Ftrait-pointers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ftrait-pointers.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -16,6 +16,7 @@\n // lldb-command:run\n \n #![allow(unused_variables)]\n+#![omit_gdb_pretty_printer_section]\n \n trait Trait {\n     fn method(&self) -> int { 0 }"}, {"sha": "3d28490c0cfd76f3f38eb38b0148d11ff44de2a7", "filename": "src/test/debuginfo/tuple-in-struct.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Ftuple-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Ftuple-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ftuple-in-struct.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -41,6 +41,7 @@\n // gdb-check:$10 = {x = {{40, 41, 42}, {43, 44}}, y = {45, 46, 47, 48}}\n \n #![allow(unused_variables)]\n+#![omit_gdb_pretty_printer_section]\n \n struct NoPadding1 {\n     x: (i32, i32),"}, {"sha": "b1228f7a8846ada1726d3a1b6156e2e3e9c10334", "filename": "src/test/debuginfo/tuple-in-tuple.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Ftuple-in-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Ftuple-in-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ftuple-in-tuple.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -57,6 +57,7 @@\n // lldb-check:[...]$6 = ((21, 22), 23)\n \n #![allow(unused_variables)]\n+#![omit_gdb_pretty_printer_section]\n \n fn main() {\n     let no_padding1: ((u32, u32), u32, u32) = ((0, 1), 2, 3);"}, {"sha": "0960ab5834dd6693b08d8aeec56e3f202c9723e0", "filename": "src/test/debuginfo/tuple-struct.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Ftuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Ftuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ftuple-struct.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -62,6 +62,9 @@\n // to all fields having the name \"<unnamed_field>\"). Otherwise they are handled the same a normal\n // structs.\n \n+\n+#![omit_gdb_pretty_printer_section]\n+\n struct NoPadding16(u16, i16);\n struct NoPadding32(i32, f32, u32);\n struct NoPadding64(f64, i64, u64);"}, {"sha": "f205f484f25fb5ba1cd617560af0f293bc702799", "filename": "src/test/debuginfo/tuple-style-enum.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Ftuple-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Ftuple-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ftuple-style-enum.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -49,6 +49,7 @@\n // lldb-check:[...]$3 = TheOnlyCase(-1)\n \n #![allow(unused_variables)]\n+#![omit_gdb_pretty_printer_section]\n \n use self::Regular::{Case1, Case2, Case3};\n use self::Univariant::TheOnlyCase;"}, {"sha": "ddcbfdcceee01c2c8bbb36d54055a53990cd3d62", "filename": "src/test/debuginfo/type-names.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Ftype-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Ftype-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ftype-names.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -173,6 +173,8 @@\n // gdb-command:whatis stack_closure2\n // gdb-check:type = struct (&mut|i8, f32| -> f32, uint)\n \n+#![omit_gdb_pretty_printer_section]\n+\n use self::Enum1::{Variant1_1, Variant1_2};\n use std::ptr;\n "}, {"sha": "3d028eb1077bc70f431ae9f686f19ae7cec478fb", "filename": "src/test/debuginfo/unique-enum.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Funique-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Funique-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Funique-enum.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -42,6 +42,7 @@\n // lldb-check:[...]$2 = TheOnlyCase(123234)\n \n #![allow(unused_variables)]\n+#![omit_gdb_pretty_printer_section]\n \n // The first element is to ensure proper alignment, irrespective of the machines word size. Since\n // the size of the discriminant value is machine dependent, this has be taken into account when"}, {"sha": "99d67c60516b5a6fe1e8652c6efcf6e6952b7c4a", "filename": "src/test/debuginfo/var-captured-in-nested-closure.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-nested-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-nested-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-nested-closure.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -79,6 +79,7 @@\n // lldb-command:continue\n \n #![allow(unused_variables)]\n+#![omit_gdb_pretty_printer_section]\n \n struct Struct {\n     a: int,"}, {"sha": "b34749260f30c16816b0d04dc798998f783a47d0", "filename": "src/test/debuginfo/var-captured-in-sendable-closure.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-sendable-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-sendable-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-sendable-closure.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -42,6 +42,7 @@\n \n #![allow(unused_variables)]\n #![feature(unboxed_closures)]\n+#![omit_gdb_pretty_printer_section]\n \n struct Struct {\n     a: int,"}, {"sha": "f474e8d1317993feb8647e2d2626a4fb32ab9b9f", "filename": "src/test/debuginfo/var-captured-in-stack-closure.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-stack-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-stack-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-stack-closure.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -72,6 +72,7 @@\n \n #![feature(unboxed_closures)]\n #![allow(unused_variables)]\n+#![omit_gdb_pretty_printer_section]\n \n struct Struct {\n     a: int,"}, {"sha": "70211d74d885d9534bd600a8bc80b70fb7324774", "filename": "src/test/debuginfo/vec-slices.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fvec-slices.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fvec-slices.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fvec-slices.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -78,6 +78,7 @@\n \n #![allow(unused_variables)]\n #![feature(slicing_syntax)]\n+#![omit_gdb_pretty_printer_section]\n \n struct AStruct {\n     x: i16,"}, {"sha": "92a490206b6243afc7855c6484b6a20d15cf9cbe", "filename": "src/test/debuginfo/vec.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a0e18866d143c045e9e29377a6e918011c0b63/src%2Ftest%2Fdebuginfo%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fvec.rs?ref=91a0e18866d143c045e9e29377a6e918011c0b63", "patch": "@@ -29,6 +29,7 @@\n // lldb-check:[...]$0 = [1, 2, 3]\n \n #![allow(unused_variables)]\n+#![omit_gdb_pretty_printer_section]\n \n static mut VECT: [i32; 3] = [1, 2, 3];\n "}]}