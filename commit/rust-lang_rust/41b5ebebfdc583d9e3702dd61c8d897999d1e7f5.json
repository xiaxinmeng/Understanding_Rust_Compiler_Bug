{"sha": "41b5ebebfdc583d9e3702dd61c8d897999d1e7f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxYjVlYmViZmRjNTgzZDllMzcwMmRkNjFjOGQ4OTc5OTlkMWU3ZjU=", "commit": {"author": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-12-15T23:14:47Z"}, "committer": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-12-15T23:14:47Z"}, "message": "needless_doctest_main: add edition support", "tree": {"sha": "fbd4f0a4c159a6b4d0311c715ce4820a4b6a3ddf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fbd4f0a4c159a6b4d0311c715ce4820a4b6a3ddf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41b5ebebfdc583d9e3702dd61c8d897999d1e7f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41b5ebebfdc583d9e3702dd61c8d897999d1e7f5", "html_url": "https://github.com/rust-lang/rust/commit/41b5ebebfdc583d9e3702dd61c8d897999d1e7f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41b5ebebfdc583d9e3702dd61c8d897999d1e7f5/comments", "author": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39bcf8e55438016fb86427f9b8a78b6a32a84126", "url": "https://api.github.com/repos/rust-lang/rust/commits/39bcf8e55438016fb86427f9b8a78b6a32a84126", "html_url": "https://github.com/rust-lang/rust/commit/39bcf8e55438016fb86427f9b8a78b6a32a84126"}], "stats": {"total": 30, "additions": 20, "deletions": 10}, "files": [{"sha": "08134cc16c00c2478c4db5aeba966d5928266d11", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/41b5ebebfdc583d9e3702dd61c8d897999d1e7f5/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41b5ebebfdc583d9e3702dd61c8d897999d1e7f5/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=41b5ebebfdc583d9e3702dd61c8d897999d1e7f5", "patch": "@@ -14,6 +14,7 @@ use rustc_middle::ty;\n use rustc_parse::maybe_new_parser_from_source_str;\n use rustc_session::parse::ParseSess;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_span::edition::Edition;\n use rustc_span::source_map::{BytePos, FilePathMapping, MultiSpan, SourceMap, Span};\n use rustc_span::{sym, FileName, Pos};\n use std::io;\n@@ -377,7 +378,7 @@ fn check_attrs<'a>(cx: &LateContext<'_>, valid_idents: &FxHashSet<String>, attrs\n     check_doc(cx, valid_idents, events, &spans)\n }\n \n-const RUST_CODE: &[&str] = &[\"rust\", \"no_run\", \"should_panic\", \"compile_fail\", \"edition2018\"];\n+const RUST_CODE: &[&str] = &[\"rust\", \"no_run\", \"should_panic\", \"compile_fail\"];\n \n fn check_doc<'a, Events: Iterator<Item = (pulldown_cmark::Event<'a>, Range<usize>)>>(\n     cx: &LateContext<'_>,\n@@ -400,13 +401,21 @@ fn check_doc<'a, Events: Iterator<Item = (pulldown_cmark::Event<'a>, Range<usize\n     let mut in_link = None;\n     let mut in_heading = false;\n     let mut is_rust = false;\n+    let mut edition = None;\n     for (event, range) in events {\n         match event {\n             Start(CodeBlock(ref kind)) => {\n                 in_code = true;\n                 if let CodeBlockKind::Fenced(lang) = kind {\n-                    is_rust =\n-                        lang.is_empty() || !lang.contains(\"ignore\") && lang.split(',').any(|i| RUST_CODE.contains(&i));\n+                    let infos = lang.split(',').collect::<Vec<_>>();\n+                    is_rust = !infos.iter().any(|&i| i == \"ignore\")\n+                        && infos\n+                            .iter()\n+                            .any(|i| i.is_empty() || i.starts_with(\"edition\") || RUST_CODE.contains(&i));\n+                    edition = infos\n+                        .iter()\n+                        .find_map(|i| i.starts_with(\"edition\").then(|| i[7..].parse::<Edition>().ok()))\n+                        .flatten();\n                 }\n             },\n             End(CodeBlock(_)) => {\n@@ -436,7 +445,8 @@ fn check_doc<'a, Events: Iterator<Item = (pulldown_cmark::Event<'a>, Range<usize\n                 let (begin, span) = spans[index];\n                 if in_code {\n                     if is_rust {\n-                        check_code(cx, &text, span);\n+                        let edition = edition.unwrap_or_else(|| cx.tcx.sess.edition());\n+                        check_code(cx, &text, edition, span);\n                     }\n                 } else {\n                     // Adjust for the beginning of the current `Event`\n@@ -450,10 +460,10 @@ fn check_doc<'a, Events: Iterator<Item = (pulldown_cmark::Event<'a>, Range<usize\n     headers\n }\n \n-fn check_code(cx: &LateContext<'_>, text: &str, span: Span) {\n-    fn has_needless_main(cx: &LateContext<'_>, code: &str) -> bool {\n+fn check_code(cx: &LateContext<'_>, text: &str, edition: Edition, span: Span) {\n+    fn has_needless_main(code: &str, edition: Edition) -> bool {\n         rustc_driver::catch_fatal_errors(|| {\n-            rustc_span::with_session_globals(cx.tcx.sess.edition(), || {\n+            rustc_span::with_session_globals(edition, || {\n                 let filename = FileName::anon_source_code(code);\n \n                 let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n@@ -516,7 +526,7 @@ fn check_code(cx: &LateContext<'_>, text: &str, span: Span) {\n         .unwrap_or_default()\n     }\n \n-    if has_needless_main(cx, text) {\n+    if has_needless_main(text, edition) {\n         span_lint(cx, NEEDLESS_DOCTEST_MAIN, span, \"needless `fn main` in doctest\");\n     }\n }"}, {"sha": "83e9bbaa3af43dc1bdc1f8c60f77130b42c9bcb5", "filename": "tests/ui/needless_doc_main.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/41b5ebebfdc583d9e3702dd61c8d897999d1e7f5/tests%2Fui%2Fneedless_doc_main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41b5ebebfdc583d9e3702dd61c8d897999d1e7f5/tests%2Fui%2Fneedless_doc_main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_doc_main.rs?ref=41b5ebebfdc583d9e3702dd61c8d897999d1e7f5", "patch": "@@ -10,7 +10,7 @@\n /// ```\n ///\n /// With an explicit return type it should lint too\n-/// ```\n+/// ```edition2015\n /// fn main() -> () {\n ///     unimplemented!();\n /// }\n@@ -39,7 +39,7 @@ fn bad_doctests() {}\n /// ```\n ///\n /// This shouldn't lint either, because main is async:\n-/// ```\n+/// ```edition2018\n /// async fn main() {\n ///     assert_eq!(42, ANSWER);\n /// }"}]}