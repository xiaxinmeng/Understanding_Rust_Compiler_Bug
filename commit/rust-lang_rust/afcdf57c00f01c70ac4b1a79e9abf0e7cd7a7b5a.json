{"sha": "afcdf57c00f01c70ac4b1a79e9abf0e7cd7a7b5a", "node_id": "C_kwDOAAsO6NoAKGFmY2RmNTdjMDBmMDFjNzBhYzRiMWE3OWU5YWJmMGU3Y2Q3YTdiNWE", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-02-17T17:06:15Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-02-17T17:06:15Z"}, "message": "Sync from rust 0416b1a6f", "tree": {"sha": "035499f8bc6a14896b71dc95770369c9f6c339b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/035499f8bc6a14896b71dc95770369c9f6c339b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/afcdf57c00f01c70ac4b1a79e9abf0e7cd7a7b5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/afcdf57c00f01c70ac4b1a79e9abf0e7cd7a7b5a", "html_url": "https://github.com/rust-lang/rust/commit/afcdf57c00f01c70ac4b1a79e9abf0e7cd7a7b5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/afcdf57c00f01c70ac4b1a79e9abf0e7cd7a7b5a/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5bf5153d0051d05d9f5e85f76327cb70a2666049", "url": "https://api.github.com/repos/rust-lang/rust/commits/5bf5153d0051d05d9f5e85f76327cb70a2666049", "html_url": "https://github.com/rust-lang/rust/commit/5bf5153d0051d05d9f5e85f76327cb70a2666049"}, {"sha": "14bc2e60c236d3b349142cda071cafc9ceee2d3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/14bc2e60c236d3b349142cda071cafc9ceee2d3a", "html_url": "https://github.com/rust-lang/rust/commit/14bc2e60c236d3b349142cda071cafc9ceee2d3a"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "898c0662bc647b7f3e36070e34b7fcb14df2a303", "filename": "src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afcdf57c00f01c70ac4b1a79e9abf0e7cd7a7b5a/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afcdf57c00f01c70ac4b1a79e9abf0e7cd7a7b5a/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=afcdf57c00f01c70ac4b1a79e9abf0e7cd7a7b5a", "patch": "@@ -857,7 +857,7 @@ fn codegen_stmt<'tcx>(\n fn codegen_array_len<'tcx>(fx: &mut FunctionCx<'_, '_, 'tcx>, place: CPlace<'tcx>) -> Value {\n     match *place.layout().ty.kind() {\n         ty::Array(_elem_ty, len) => {\n-            let len = fx.monomorphize(len).eval_usize(fx.tcx, ParamEnv::reveal_all()) as i64;\n+            let len = fx.monomorphize(len).eval_target_usize(fx.tcx, ParamEnv::reveal_all()) as i64;\n             fx.bcx.ins().iconst(fx.pointer_type, len)\n         }\n         ty::Slice(_elem_ty) => {"}, {"sha": "a1d63acfb61667e2c9fa60fdb8ba181e02adc48f", "filename": "src/intrinsics/simd.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/afcdf57c00f01c70ac4b1a79e9abf0e7cd7a7b5a/src%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afcdf57c00f01c70ac4b1a79e9abf0e7cd7a7b5a/src%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fsimd.rs?ref=afcdf57c00f01c70ac4b1a79e9abf0e7cd7a7b5a", "patch": "@@ -141,7 +141,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                 let idx_ty = fx.monomorphize(idx.ty(fx.mir, fx.tcx));\n                 match idx_ty.kind() {\n                     ty::Array(ty, len) if matches!(ty.kind(), ty::Uint(ty::UintTy::U32)) => len\n-                        .try_eval_usize(fx.tcx, ty::ParamEnv::reveal_all())\n+                        .try_eval_target_usize(fx.tcx, ty::ParamEnv::reveal_all())\n                         .unwrap_or_else(|| {\n                             span_bug!(span, \"could not evaluate shuffle index array length\")\n                         })\n@@ -735,7 +735,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                 ty::Uint(i) if i.bit_width() == Some(expected_int_bits) => {}\n                 ty::Array(elem, len)\n                     if matches!(elem.kind(), ty::Uint(ty::UintTy::U8))\n-                        && len.try_eval_usize(fx.tcx, ty::ParamEnv::reveal_all())\n+                        && len.try_eval_target_usize(fx.tcx, ty::ParamEnv::reveal_all())\n                             == Some(expected_bytes) => {}\n                 _ => {\n                     fx.tcx.sess.span_fatal("}, {"sha": "e400d476db50e3c5710ad912e94a4ced582fcabe", "filename": "src/unsize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afcdf57c00f01c70ac4b1a79e9abf0e7cd7a7b5a/src%2Funsize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afcdf57c00f01c70ac4b1a79e9abf0e7cd7a7b5a/src%2Funsize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Funsize.rs?ref=afcdf57c00f01c70ac4b1a79e9abf0e7cd7a7b5a", "patch": "@@ -24,7 +24,7 @@ pub(crate) fn unsized_info<'tcx>(\n         (&ty::Array(_, len), &ty::Slice(_)) => fx\n             .bcx\n             .ins()\n-            .iconst(fx.pointer_type, len.eval_usize(fx.tcx, ParamEnv::reveal_all()) as i64),\n+            .iconst(fx.pointer_type, len.eval_target_usize(fx.tcx, ParamEnv::reveal_all()) as i64),\n         (\n             &ty::Dynamic(ref data_a, _, src_dyn_kind),\n             &ty::Dynamic(ref data_b, _, target_dyn_kind),"}, {"sha": "58e0a498292d4498637b447f58f54ff50fc82adb", "filename": "src/value_and_place.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/afcdf57c00f01c70ac4b1a79e9abf0e7cd7a7b5a/src%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afcdf57c00f01c70ac4b1a79e9abf0e7cd7a7b5a/src%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue_and_place.rs?ref=afcdf57c00f01c70ac4b1a79e9abf0e7cd7a7b5a", "patch": "@@ -567,8 +567,8 @@ impl<'tcx> CPlace<'tcx> {\n             CPlaceInner::Var(_local, var) => {\n                 if let ty::Array(element, len) = dst_layout.ty.kind() {\n                     // Can only happen for vector types\n-                    let len =\n-                        u32::try_from(len.eval_usize(fx.tcx, ParamEnv::reveal_all())).unwrap();\n+                    let len = u32::try_from(len.eval_target_usize(fx.tcx, ParamEnv::reveal_all()))\n+                        .unwrap();\n                     let vector_ty = fx.clif_type(*element).unwrap().by(len).unwrap();\n \n                     let data = match from.0 {"}]}