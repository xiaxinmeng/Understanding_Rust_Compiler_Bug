{"sha": "79c3651988185bb762e9d59d8c74350416cd669f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5YzM2NTE5ODgxODViYjc2MmU5ZDU5ZDhjNzQzNTA0MTZjZDY2OWY=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-03-10T08:53:16Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-03-12T07:25:03Z"}, "message": "syntax: Optimize `maybe_whole`/`maybe_whole_expr` slightly", "tree": {"sha": "976bb1ed4ff1b955310d3387ba2b2b485746348e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/976bb1ed4ff1b955310d3387ba2b2b485746348e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79c3651988185bb762e9d59d8c74350416cd669f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79c3651988185bb762e9d59d8c74350416cd669f", "html_url": "https://github.com/rust-lang/rust/commit/79c3651988185bb762e9d59d8c74350416cd669f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79c3651988185bb762e9d59d8c74350416cd669f/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18229bb1ad197fcc28ed2ff399c738bb500a3f0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/18229bb1ad197fcc28ed2ff399c738bb500a3f0d", "html_url": "https://github.com/rust-lang/rust/commit/18229bb1ad197fcc28ed2ff399c738bb500a3f0d"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "bc7cb0403ef93fb07ed70e62023d8450fe6bed0c", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/79c3651988185bb762e9d59d8c74350416cd669f/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79c3651988185bb762e9d59d8c74350416cd669f/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=79c3651988185bb762e9d59d8c74350416cd669f", "patch": "@@ -118,23 +118,22 @@ enum BlockMode {\n /// `token::Interpolated` tokens.\n macro_rules! maybe_whole_expr {\n     ($p:expr) => {\n-        if let token::Interpolated(nt) = $p.token.clone() {\n-            match *nt {\n-                token::NtExpr(ref e) | token::NtLiteral(ref e) => {\n+        if let token::Interpolated(nt) = &$p.token {\n+            match &**nt {\n+                token::NtExpr(e) | token::NtLiteral(e) => {\n+                    let e = e.clone();\n                     $p.bump();\n-                    return Ok((*e).clone());\n+                    return Ok(e);\n                 }\n-                token::NtPath(ref path) => {\n+                token::NtPath(path) => {\n+                    let path = path.clone();\n                     $p.bump();\n-                    let span = $p.span;\n-                    let kind = ExprKind::Path(None, (*path).clone());\n-                    return Ok($p.mk_expr(span, kind, ThinVec::new()));\n+                    return Ok($p.mk_expr($p.span, ExprKind::Path(None, path), ThinVec::new()));\n                 }\n-                token::NtBlock(ref block) => {\n+                token::NtBlock(block) => {\n+                    let block = block.clone();\n                     $p.bump();\n-                    let span = $p.span;\n-                    let kind = ExprKind::Block((*block).clone(), None);\n-                    return Ok($p.mk_expr(span, kind, ThinVec::new()));\n+                    return Ok($p.mk_expr($p.span, ExprKind::Block(block, None), ThinVec::new()));\n                 }\n                 _ => {},\n             };\n@@ -145,8 +144,9 @@ macro_rules! maybe_whole_expr {\n /// As maybe_whole_expr, but for things other than expressions\n macro_rules! maybe_whole {\n     ($p:expr, $constructor:ident, |$x:ident| $e:expr) => {\n-        if let token::Interpolated(nt) = $p.token.clone() {\n-            if let token::$constructor($x) = (*nt).clone() {\n+        if let token::Interpolated(nt) = &$p.token {\n+            if let token::$constructor(x) = &**nt {\n+                let $x = x.clone();\n                 $p.bump();\n                 return Ok($e);\n             }"}]}