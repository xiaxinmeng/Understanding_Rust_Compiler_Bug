{"sha": "71f054ddd02051928e8e60356ecd95cb0b3f64e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxZjA1NGRkZDAyMDUxOTI4ZThlNjAzNTZlY2Q5NWNiMGIzZjY0ZTY=", "commit": {"author": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2014-04-15T20:05:37Z"}, "committer": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2014-04-23T16:19:05Z"}, "message": "Remove special rooting code from trans\n\n[breaking-change]\n\ncc #11586", "tree": {"sha": "38bb4ef7c9c6c3194f17d432523a8d1766e6b2db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38bb4ef7c9c6c3194f17d432523a8d1766e6b2db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71f054ddd02051928e8e60356ecd95cb0b3f64e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71f054ddd02051928e8e60356ecd95cb0b3f64e6", "html_url": "https://github.com/rust-lang/rust/commit/71f054ddd02051928e8e60356ecd95cb0b3f64e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71f054ddd02051928e8e60356ecd95cb0b3f64e6/comments", "author": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30fe55066a29a14fffd2a5f41e0ab21e7056fb34", "url": "https://api.github.com/repos/rust-lang/rust/commits/30fe55066a29a14fffd2a5f41e0ab21e7056fb34", "html_url": "https://github.com/rust-lang/rust/commit/30fe55066a29a14fffd2a5f41e0ab21e7056fb34"}], "stats": {"total": 258, "additions": 0, "deletions": 258}, "files": [{"sha": "9bb0375bf44d27b93a1cefc5c0e84194c810a966", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/71f054ddd02051928e8e60356ecd95cb0b3f64e6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f054ddd02051928e8e60356ecd95cb0b3f64e6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=71f054ddd02051928e8e60356ecd95cb0b3f64e6", "patch": "@@ -59,7 +59,6 @@ use middle::trans::meth;\n use middle::trans::inline;\n use middle::trans::tvec;\n use middle::trans::type_of;\n-use middle::trans::write_guard;\n use middle::ty::struct_fields;\n use middle::ty::{AutoBorrowObj, AutoDerefRef, AutoAddEnv, AutoObject, AutoUnsafe};\n use middle::ty::{AutoPtr, AutoBorrowVec, AutoBorrowVecRef};\n@@ -1676,8 +1675,6 @@ fn deref_once<'a>(bcx: &'a Block<'a>,\n                   derefs: uint)\n                   -> DatumBlock<'a, Expr> {\n     let ccx = bcx.ccx();\n-    let bcx = write_guard::root_and_write_guard(&datum, bcx, expr.span,\n-                                                expr.id, derefs);\n \n     debug!(\"deref_once(expr={}, datum={}, derefs={})\",\n            expr.repr(bcx.tcx()),"}, {"sha": "f07adb1ed87c0b95a79cdcf5e5177c33477ddff9", "filename": "src/librustc/middle/trans/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/71f054ddd02051928e8e60356ecd95cb0b3f64e6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f054ddd02051928e8e60356ecd95cb0b3f64e6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmod.rs?ref=71f054ddd02051928e8e60356ecd95cb0b3f64e6", "patch": "@@ -15,7 +15,6 @@ pub mod monomorphize;\n pub mod controlflow;\n pub mod glue;\n pub mod datum;\n-pub mod write_guard;\n pub mod callee;\n pub mod expr;\n pub mod common;"}, {"sha": "8f114827bfd27223099eb18fcb41bd2d6a1bd9ab", "filename": "src/librustc/middle/trans/write_guard.rs", "status": "removed", "additions": 0, "deletions": 63, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/30fe55066a29a14fffd2a5f41e0ab21e7056fb34/src%2Flibrustc%2Fmiddle%2Ftrans%2Fwrite_guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30fe55066a29a14fffd2a5f41e0ab21e7056fb34/src%2Flibrustc%2Fmiddle%2Ftrans%2Fwrite_guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fwrite_guard.rs?ref=30fe55066a29a14fffd2a5f41e0ab21e7056fb34", "patch": "@@ -1,63 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! Logic relating to rooting and write guards for managed values.\n-//! This code is primarily for use by datum;\n-//! it exists in its own module both to keep datum.rs bite-sized\n-//! and for each in debugging (e.g., so you can use\n-//! `RUST_LOG=rustc::middle::trans::write_guard`).\n-\n-\n-use middle::borrowck::{RootInfo, root_map_key};\n-use middle::trans::cleanup;\n-use middle::trans::common::*;\n-use middle::trans::datum::*;\n-use syntax::codemap::Span;\n-use syntax::ast;\n-\n-pub fn root_and_write_guard<'a, K:KindOps>(datum: &Datum<K>,\n-                                           bcx: &'a Block<'a>,\n-                                           span: Span,\n-                                           expr_id: ast::NodeId,\n-                                           derefs: uint) -> &'a Block<'a> {\n-    let key = root_map_key { id: expr_id, derefs: derefs };\n-    debug!(\"write_guard::root_and_write_guard(key={:?})\", key);\n-\n-    // root the autoderef'd value, if necessary:\n-    //\n-    // (Note: root'd values are always boxes)\n-    let ccx = bcx.ccx();\n-    match ccx.maps.root_map.find(&key) {\n-        None => bcx,\n-        Some(&root_info) => root(datum, bcx, span, key, root_info)\n-    }\n-}\n-\n-fn root<'a, K:KindOps>(datum: &Datum<K>,\n-                       bcx: &'a Block<'a>,\n-                       _span: Span,\n-                       root_key: root_map_key,\n-                       root_info: RootInfo) -> &'a Block<'a> {\n-    //! In some cases, borrowck will decide that an @T value must be\n-    //! rooted for the program to be safe.  In that case, we will call\n-    //! this function, which will stash a copy away until we exit the\n-    //! scope `scope_id`.\n-\n-    debug!(\"write_guard::root(root_key={:?}, root_info={:?}, datum={:?})\",\n-           root_key, root_info, datum.to_str(bcx.ccx()));\n-\n-    // Root the datum. Note that we must zero this value,\n-    // because sometimes we root on one path but not another.\n-    // See e.g. #4904.\n-    lvalue_scratch_datum(\n-        bcx, datum.ty, \"__write_guard\", true,\n-        cleanup::AstScope(root_info.scope), (),\n-        |(), bcx, llval| datum.shallow_copy_and_take(bcx, llval)).bcx\n-}"}, {"sha": "f05b8c67d77e2e304db26f05813df513e738e76a", "filename": "src/test/run-pass/borrowck-preserve-box-in-field.rs", "status": "removed", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/30fe55066a29a14fffd2a5f41e0ab21e7056fb34/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30fe55066a29a14fffd2a5f41e0ab21e7056fb34/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-field.rs?ref=30fe55066a29a14fffd2a5f41e0ab21e7056fb34", "patch": "@@ -1,37 +0,0 @@\n-// ignore-pretty\n-\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// exec-env:RUST_POISON_ON_FREE=1\n-\n-#![feature(managed_boxes)]\n-\n-fn borrow(x: &int, f: |x: &int|) {\n-    let before = *x;\n-    f(x);\n-    let after = *x;\n-    assert_eq!(before, after);\n-}\n-\n-struct F { f: ~int }\n-\n-pub fn main() {\n-    let mut x = @F {f: ~3};\n-    borrow(x.f, |b_x| {\n-        assert_eq!(*b_x, 3);\n-        assert_eq!(&(*x.f) as *int, &(*b_x) as *int);\n-        x = @F {f: ~4};\n-\n-        println!(\"&*b_x = {:p}\", &(*b_x));\n-        assert_eq!(*b_x, 3);\n-        assert!(&(*x.f) as *int != &(*b_x) as *int);\n-    })\n-}"}, {"sha": "0896d4de625c91367f3eb88b88469f13f6771de1", "filename": "src/test/run-pass/borrowck-preserve-box-in-uniq.rs", "status": "removed", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/30fe55066a29a14fffd2a5f41e0ab21e7056fb34/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30fe55066a29a14fffd2a5f41e0ab21e7056fb34/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-uniq.rs?ref=30fe55066a29a14fffd2a5f41e0ab21e7056fb34", "patch": "@@ -1,37 +0,0 @@\n-// ignore-pretty\n-\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// exec-env:RUST_POISON_ON_FREE=1\n-\n-#![feature(managed_boxes)]\n-\n-fn borrow(x: &int, f: |x: &int|) {\n-    let before = *x;\n-    f(x);\n-    let after = *x;\n-    assert_eq!(before, after);\n-}\n-\n-struct F { f: ~int }\n-\n-pub fn main() {\n-    let mut x = ~@F{f: ~3};\n-    borrow(x.f, |b_x| {\n-        assert_eq!(*b_x, 3);\n-        assert_eq!(&(*x.f) as *int, &(*b_x) as *int);\n-        *x = @F{f: ~4};\n-\n-        println!(\"&*b_x = {:p}\", &(*b_x));\n-        assert_eq!(*b_x, 3);\n-        assert!(&(*x.f) as *int != &(*b_x) as *int);\n-    })\n-}"}, {"sha": "cfb9a4b91df176ca6620ecc8b14d4b9186b2db24", "filename": "src/test/run-pass/borrowck-preserve-box.rs", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/30fe55066a29a14fffd2a5f41e0ab21e7056fb34/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30fe55066a29a14fffd2a5f41e0ab21e7056fb34/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box.rs?ref=30fe55066a29a14fffd2a5f41e0ab21e7056fb34", "patch": "@@ -1,35 +0,0 @@\n-// ignore-pretty\n-\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// exec-env:RUST_POISON_ON_FREE=1\n-\n-#![feature(managed_boxes)]\n-\n-fn borrow(x: &int, f: |x: &int|) {\n-    let before = *x;\n-    f(x);\n-    let after = *x;\n-    assert_eq!(before, after);\n-}\n-\n-pub fn main() {\n-    let mut x = @3;\n-    borrow(x, |b_x| {\n-        assert_eq!(*b_x, 3);\n-        assert_eq!(&(*x) as *int, &(*b_x) as *int);\n-        x = @22;\n-\n-        println!(\"&*b_x = {:p}\", &(*b_x));\n-        assert_eq!(*b_x, 3);\n-        assert!(&(*x) as *int != &(*b_x) as *int);\n-    })\n-}"}, {"sha": "52ea474dbf55072c5a0195462a4934210f686f28", "filename": "src/test/run-pass/borrowck-preserve-cond-box.rs", "status": "removed", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/30fe55066a29a14fffd2a5f41e0ab21e7056fb34/src%2Ftest%2Frun-pass%2Fborrowck-preserve-cond-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30fe55066a29a14fffd2a5f41e0ab21e7056fb34/src%2Ftest%2Frun-pass%2Fborrowck-preserve-cond-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-cond-box.rs?ref=30fe55066a29a14fffd2a5f41e0ab21e7056fb34", "patch": "@@ -1,45 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// exec-env:RUST_POISON_ON_FREE=1\n-\n-#![feature(managed_boxes)]\n-\n-fn testfn(cond: bool) {\n-    let mut x = @3;\n-    let mut y = @4;\n-\n-    // borrow x and y\n-    let r_x = &*x;\n-    let r_y = &*y;\n-    let mut r = r_x;\n-    let mut exp = 3;\n-\n-    if cond {\n-        r = r_y;\n-        exp = 4;\n-    }\n-\n-    println!(\"*r = {}, exp = {}\", *r, exp);\n-    assert_eq!(*r, exp);\n-\n-    x = @5;\n-    y = @6;\n-\n-    println!(\"*r = {}, exp = {}\", *r, exp);\n-    assert_eq!(*r, exp);\n-    assert_eq!(x, @5);\n-    assert_eq!(y, @6);\n-}\n-\n-pub fn main() {\n-    testfn(true);\n-    testfn(false);\n-}"}, {"sha": "749c8063950038b84b14b22df48824d9a08e0a26", "filename": "src/test/run-pass/borrowck-preserve-expl-deref.rs", "status": "removed", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/30fe55066a29a14fffd2a5f41e0ab21e7056fb34/src%2Ftest%2Frun-pass%2Fborrowck-preserve-expl-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30fe55066a29a14fffd2a5f41e0ab21e7056fb34/src%2Ftest%2Frun-pass%2Fborrowck-preserve-expl-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-expl-deref.rs?ref=30fe55066a29a14fffd2a5f41e0ab21e7056fb34", "patch": "@@ -1,37 +0,0 @@\n-// ignore-pretty\n-\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// exec-env:RUST_POISON_ON_FREE=1\n-\n-#![feature(managed_boxes)]\n-\n-fn borrow(x: &int, f: |x: &int|) {\n-    let before = *x;\n-    f(x);\n-    let after = *x;\n-    assert_eq!(before, after);\n-}\n-\n-struct F { f: ~int }\n-\n-pub fn main() {\n-    let mut x = @F {f: ~3};\n-    borrow((*x).f, |b_x| {\n-        assert_eq!(*b_x, 3);\n-        assert_eq!(&(*x.f) as *int, &(*b_x) as *int);\n-        x = @F {f: ~4};\n-\n-        println!(\"&*b_x = {:p}\", &(*b_x));\n-        assert_eq!(*b_x, 3);\n-        assert!(&(*x.f) as *int != &(*b_x) as *int);\n-    })\n-}"}]}