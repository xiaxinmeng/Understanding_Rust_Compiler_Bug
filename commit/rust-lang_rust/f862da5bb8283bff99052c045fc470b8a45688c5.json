{"sha": "f862da5bb8283bff99052c045fc470b8a45688c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4NjJkYTViYjgyODNiZmY5OTA1MmMwNDVmYzQ3MGI4YTQ1Njg4YzU=", "commit": {"author": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2015-06-18T12:23:19Z"}, "committer": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2015-06-20T01:33:04Z"}, "message": "Use a single match arm for all TyRef variants when deducing function argument attributes\n\nThis makes it a lot easier to later add attributes for fat pointers.", "tree": {"sha": "a0baf4287e0ed8ecc4f1c184e83a816cdc00cd2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0baf4287e0ed8ecc4f1c184e83a816cdc00cd2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f862da5bb8283bff99052c045fc470b8a45688c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f862da5bb8283bff99052c045fc470b8a45688c5", "html_url": "https://github.com/rust-lang/rust/commit/f862da5bb8283bff99052c045fc470b8a45688c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f862da5bb8283bff99052c045fc470b8a45688c5/comments", "author": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b42cbd5eb3e947875aa427dbda52121ef186586", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b42cbd5eb3e947875aa427dbda52121ef186586", "html_url": "https://github.com/rust-lang/rust/commit/4b42cbd5eb3e947875aa427dbda52121ef186586"}], "stats": {"total": 46, "additions": 20, "deletions": 26}, "files": [{"sha": "8422c782b4f0d9106ff455907bc580848307149e", "filename": "src/librustc_trans/trans/attributes.rs", "status": "modified", "additions": 20, "deletions": 26, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/f862da5bb8283bff99052c045fc470b8a45688c5/src%2Flibrustc_trans%2Ftrans%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f862da5bb8283bff99052c045fc470b8a45688c5/src%2Flibrustc_trans%2Ftrans%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fattributes.rs?ref=f862da5bb8283bff99052c045fc470b8a45688c5", "patch": "@@ -262,41 +262,35 @@ pub fn from_fn_type<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, fn_type: ty::Ty<'tcx\n                      .arg(idx, llvm::DereferenceableAttribute(llsz));\n             }\n \n-            // `&mut` pointer parameters never alias other parameters, or mutable global data\n-            //\n-            // `&T` where `T` contains no `UnsafeCell<U>` is immutable, and can be marked as both\n-            // `readonly` and `noalias`, as LLVM's definition of `noalias` is based solely on\n-            // memory dependencies rather than pointer equality\n-            ty::TyRef(b, mt) if mt.mutbl == ast::MutMutable ||\n-                                  !ty::type_contents(ccx.tcx(), mt.ty).interior_unsafe() => {\n-\n-                let llsz = machine::llsize_of_real(ccx, type_of::type_of(ccx, mt.ty));\n-                attrs.arg(idx, llvm::Attribute::NoAlias)\n-                     .arg(idx, llvm::DereferenceableAttribute(llsz));\n+            ty::TyRef(b, mt) => {\n+                // `&mut` pointer parameters never alias other parameters, or mutable global data\n+                //\n+                // `&T` where `T` contains no `UnsafeCell<U>` is immutable, and can be marked as\n+                // both `readonly` and `noalias`, as LLVM's definition of `noalias` is based solely\n+                // on memory dependencies rather than pointer equality\n+                let interior_unsafe = ty::type_contents(ccx.tcx(), mt.ty).interior_unsafe();\n+\n+                if mt.mutbl == ast::MutMutable || !interior_unsafe {\n+                    attrs.arg(idx, llvm::Attribute::NoAlias);\n+                }\n \n-                if mt.mutbl == ast::MutImmutable {\n+                if mt.mutbl == ast::MutImmutable && !interior_unsafe {\n                     attrs.arg(idx, llvm::Attribute::ReadOnly);\n                 }\n \n+                // & pointer parameters are also never null and we know exactly\n+                // how many bytes we can dereference\n+                let llsz = machine::llsize_of_real(ccx, type_of::type_of(ccx, mt.ty));\n+                attrs.arg(idx, llvm::DereferenceableAttribute(llsz));\n+\n+                // When a reference in an argument has no named lifetime, it's\n+                // impossible for that reference to escape this function\n+                // (returned or stored beyond the call by a closure).\n                 if let ReLateBound(_, BrAnon(_)) = *b {\n                     attrs.arg(idx, llvm::Attribute::NoCapture);\n                 }\n             }\n \n-            // When a reference in an argument has no named lifetime, it's impossible for that\n-            // reference to escape this function (returned or stored beyond the call by a closure).\n-            ty::TyRef(&ReLateBound(_, BrAnon(_)), mt) => {\n-                let llsz = machine::llsize_of_real(ccx, type_of::type_of(ccx, mt.ty));\n-                attrs.arg(idx, llvm::Attribute::NoCapture)\n-                     .arg(idx, llvm::DereferenceableAttribute(llsz));\n-            }\n-\n-            // & pointer parameters are also never null and we know exactly how\n-            // many bytes we can dereference\n-            ty::TyRef(_, mt) => {\n-                let llsz = machine::llsize_of_real(ccx, type_of::type_of(ccx, mt.ty));\n-                attrs.arg(idx, llvm::DereferenceableAttribute(llsz));\n-            }\n             _ => ()\n         }\n     }"}]}