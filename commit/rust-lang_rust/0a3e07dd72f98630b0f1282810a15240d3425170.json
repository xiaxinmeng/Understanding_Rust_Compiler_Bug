{"sha": "0a3e07dd72f98630b0f1282810a15240d3425170", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhM2UwN2RkNzJmOTg2MzBiMGYxMjgyODEwYTE1MjQwZDM0MjUxNzA=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-02-06T19:23:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-02-06T19:23:23Z"}, "message": "Rollup merge of #46962 - clarcharr:os_raw_docs, r=QuietMisdreavus\n\nDocument std::os::raw.\n\nThis adds a brief explanation to each type and its definition according to C. This also helps clarify that the definitions of the types, as described by rustdoc, are not necessarily the same from platform to platform.", "tree": {"sha": "e511831f3e4eb166776902d69abb6d64bd4a2264", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e511831f3e4eb166776902d69abb6d64bd4a2264"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a3e07dd72f98630b0f1282810a15240d3425170", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaegCrCRBK7hj4Ov3rIwAAdHIIAJR0/80KwOfWGFhChd5z8O+y\nM6b60c0+lPAB9VSnEVSs4/QSkSkG6bZ/r35D1jtVHsfYFgOOKIXnrGIdhnt9KfZR\nq8Oe6y5sOhQAe4OTi+VcPk8/+u4fk9DSd7fjP0UQRoQgUgYezHgflPedt8XVs/TO\n2ur1IGJYN0YilmNfOi+P8ob+aycPR2InPFFFyYWpGGoLotkN29NnRQ+PAk6nF7nW\n8xm3+G2J9NKlKBeAdLNP6UgDpWWXY2CrA4b4MFUnDHGZTMN+nffejUVEUT3JvW5z\nGRsFxnx6laTYyKMyqMhaTnKySw5Kq9EhhnrXW/YVlRpJxwkg8XrFLJJ4GGihJsk=\n=Yy4T\n-----END PGP SIGNATURE-----\n", "payload": "tree e511831f3e4eb166776902d69abb6d64bd4a2264\nparent ca7d839088cbfe5b9bf232f5c27c48703d4f1605\nparent fefd5e9bbc150273faf2ac0c4dff8e0e8a098393\nauthor kennytm <kennytm@gmail.com> 1517945003 +0800\ncommitter GitHub <noreply@github.com> 1517945003 +0800\n\nRollup merge of #46962 - clarcharr:os_raw_docs, r=QuietMisdreavus\n\nDocument std::os::raw.\n\nThis adds a brief explanation to each type and its definition according to C. This also helps clarify that the definitions of the types, as described by rustdoc, are not necessarily the same from platform to platform.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a3e07dd72f98630b0f1282810a15240d3425170", "html_url": "https://github.com/rust-lang/rust/commit/0a3e07dd72f98630b0f1282810a15240d3425170", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a3e07dd72f98630b0f1282810a15240d3425170/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca7d839088cbfe5b9bf232f5c27c48703d4f1605", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca7d839088cbfe5b9bf232f5c27c48703d4f1605", "html_url": "https://github.com/rust-lang/rust/commit/ca7d839088cbfe5b9bf232f5c27c48703d4f1605"}, {"sha": "fefd5e9bbc150273faf2ac0c4dff8e0e8a098393", "url": "https://api.github.com/repos/rust-lang/rust/commits/fefd5e9bbc150273faf2ac0c4dff8e0e8a098393", "html_url": "https://github.com/rust-lang/rust/commit/fefd5e9bbc150273faf2ac0c4dff8e0e8a098393"}], "stats": {"total": 129, "additions": 124, "deletions": 5}, "files": [{"sha": "642fa8775a479d8a74f522a923beb734c85787e7", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0a3e07dd72f98630b0f1282810a15240d3425170/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a3e07dd72f98630b0f1282810a15240d3425170/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=0a3e07dd72f98630b0f1282810a15240d3425170", "patch": "@@ -260,6 +260,7 @@\n #![feature(core_intrinsics)]\n #![feature(dropck_eyepatch)]\n #![feature(exact_size_is_empty)]\n+#![feature(external_doc)]\n #![feature(fs_read_write)]\n #![feature(fixed_size_array)]\n #![feature(float_from_str_radix)]"}, {"sha": "9a55767d965a658108062d721b39718978d4c5f3", "filename": "src/libstd/os/raw/char.md", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0a3e07dd72f98630b0f1282810a15240d3425170/src%2Flibstd%2Fos%2Fraw%2Fchar.md", "raw_url": "https://github.com/rust-lang/rust/raw/0a3e07dd72f98630b0f1282810a15240d3425170/src%2Flibstd%2Fos%2Fraw%2Fchar.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw%2Fchar.md?ref=0a3e07dd72f98630b0f1282810a15240d3425170", "patch": "@@ -0,0 +1,11 @@\n+Equivalent to C's `char` type.\n+\n+[C's `char` type] is completely unlike [Rust's `char` type]; while Rust's type represents a unicode scalar value, C's `char` type is just an ordinary integer. This type will always be either [`i8`] or [`u8`], as the type is defined as being one byte long.\n+\n+C chars are most commonly used to make C strings. Unlike Rust, where the length of a string is included alongside the string, C strings mark the end of a string with the character `'\\0'`. See [`CStr`] for more information.\n+\n+[C's `char` type]: https://en.wikipedia.org/wiki/C_data_types#Basic_types\n+[Rust's `char` type]: ../../primitive.char.html\n+[`CStr`]: ../../ffi/struct.CStr.html\n+[`i8`]: ../../primitive.i8.html\n+[`u8`]: ../../primitive.u8.html"}, {"sha": "6818dada317938d121b63059341104f46ccd372d", "filename": "src/libstd/os/raw/double.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0a3e07dd72f98630b0f1282810a15240d3425170/src%2Flibstd%2Fos%2Fraw%2Fdouble.md", "raw_url": "https://github.com/rust-lang/rust/raw/0a3e07dd72f98630b0f1282810a15240d3425170/src%2Flibstd%2Fos%2Fraw%2Fdouble.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw%2Fdouble.md?ref=0a3e07dd72f98630b0f1282810a15240d3425170", "patch": "@@ -0,0 +1,7 @@\n+Equivalent to C's `double` type.\n+\n+This type will almost always be [`f64`], which is guaranteed to be an [IEEE-754 double-precision float] in Rust. That said, the standard technically only guarantees that it be a floating-point number with at least the precision of a [`float`], and it may be `f32` or something entirely different from the IEEE-754 standard.\n+\n+[IEEE-754 double-precision float]: https://en.wikipedia.org/wiki/IEEE_754\n+[`float`]: type.c_float.html\n+[`f64`]: ../../primitive.f64.html"}, {"sha": "57d1071d0da1787522b57a635df16ffa35fbe139", "filename": "src/libstd/os/raw/float.md", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a3e07dd72f98630b0f1282810a15240d3425170/src%2Flibstd%2Fos%2Fraw%2Ffloat.md", "raw_url": "https://github.com/rust-lang/rust/raw/0a3e07dd72f98630b0f1282810a15240d3425170/src%2Flibstd%2Fos%2Fraw%2Ffloat.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw%2Ffloat.md?ref=0a3e07dd72f98630b0f1282810a15240d3425170", "patch": "@@ -0,0 +1,6 @@\n+Equivalent to C's `float` type.\n+\n+This type will almost always be [`f32`], which is guaranteed to be an [IEEE-754 single-precision float] in Rust. That said, the standard technically only guarantees that it be a floating-point number, and it may have less precision than `f32` or not follow the IEEE-754 standard at all.\n+\n+[IEEE-754 single-precision float]: https://en.wikipedia.org/wiki/IEEE_754\n+[`f32`]: ../../primitive.f32.html"}, {"sha": "a0d25fd21d89f490347f7366ec53b330969534ab", "filename": "src/libstd/os/raw/int.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0a3e07dd72f98630b0f1282810a15240d3425170/src%2Flibstd%2Fos%2Fraw%2Fint.md", "raw_url": "https://github.com/rust-lang/rust/raw/0a3e07dd72f98630b0f1282810a15240d3425170/src%2Flibstd%2Fos%2Fraw%2Fint.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw%2Fint.md?ref=0a3e07dd72f98630b0f1282810a15240d3425170", "patch": "@@ -0,0 +1,7 @@\n+Equivalent to C's `signed int` (`int`) type.\n+\n+This type will almost always be [`i32`], but may differ on some esoteric systems. The C standard technically only requires that this type be a signed integer that is at least the size of a [`short`]; some systems define it as an [`i16`], for example.\n+\n+[`short`]: type.c_short.html\n+[`i32`]: ../../primitive.i32.html\n+[`i16`]: ../../primitive.i16.html"}, {"sha": "c620b402819fddfe2cf31863bebb3bdf28ceff1d", "filename": "src/libstd/os/raw/long.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0a3e07dd72f98630b0f1282810a15240d3425170/src%2Flibstd%2Fos%2Fraw%2Flong.md", "raw_url": "https://github.com/rust-lang/rust/raw/0a3e07dd72f98630b0f1282810a15240d3425170/src%2Flibstd%2Fos%2Fraw%2Flong.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw%2Flong.md?ref=0a3e07dd72f98630b0f1282810a15240d3425170", "patch": "@@ -0,0 +1,7 @@\n+Equivalent to C's `signed long` (`long`) type.\n+\n+This type will always be [`i32`] or [`i64`]. Most notably, many Linux-based systems assume an `i64`, but Windows assumes `i32`. The C standard technically only requires that this type be a signed integer that is at least 32 bits and at least the size of an [`int`], although in practice, no system would have a `long` that is neither an `i32` nor `i64`.\n+\n+[`int`]: type.c_int.html\n+[`i32`]: ../../primitive.i32.html\n+[`i64`]: ../../primitive.i64.html"}, {"sha": "ab3d6436568dfc20484d1ea935b1e2fbee2519e9", "filename": "src/libstd/os/raw/longlong.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0a3e07dd72f98630b0f1282810a15240d3425170/src%2Flibstd%2Fos%2Fraw%2Flonglong.md", "raw_url": "https://github.com/rust-lang/rust/raw/0a3e07dd72f98630b0f1282810a15240d3425170/src%2Flibstd%2Fos%2Fraw%2Flonglong.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw%2Flonglong.md?ref=0a3e07dd72f98630b0f1282810a15240d3425170", "patch": "@@ -0,0 +1,7 @@\n+Equivalent to C's `signed long long` (`long long`) type.\n+\n+This type will almost always be [`i64`], but may differ on some systems. The C standard technically only requires that this type be a signed integer that is at least 64 bits and at least the size of a [`long`], although in practice, no system would have a `long long` that is not an `i64`, as most systems do not have a standardised [`i128`] type.\n+\n+[`long`]: type.c_int.html\n+[`i64`]: ../../primitive.i64.html\n+[`i128`]: ../../primitive.i128.html"}, {"sha": "d5eeb5252f0f155a59589fd4c099075d14fda114", "filename": "src/libstd/os/raw/mod.rs", "status": "renamed", "additions": 33, "deletions": 5, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/0a3e07dd72f98630b0f1282810a15240d3425170/src%2Flibstd%2Fos%2Fraw%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a3e07dd72f98630b0f1282810a15240d3425170/src%2Flibstd%2Fos%2Fraw%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw%2Fmod.rs?ref=0a3e07dd72f98630b0f1282810a15240d3425170", "patch": "@@ -8,12 +8,19 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Raw OS-specific types for the current platform/architecture\n+//! Platform-specific types, as defined by C.\n+//!\n+//! Code that interacts via FFI will almost certainly be using the\n+//! base types provided by C, which aren't nearly as nicely defined\n+//! as Rust's primitive types. This module provides types which will\n+//! match those defined by C, so that code that interacts with C will\n+//! refer to the correct types.\n \n #![stable(feature = \"raw_os\", since = \"1.1.0\")]\n \n use fmt;\n \n+#[doc(include = \"os/raw/char.md\")]\n #[cfg(any(all(target_os = \"linux\", any(target_arch = \"aarch64\",\n                                        target_arch = \"arm\",\n                                        target_arch = \"powerpc\",\n@@ -25,6 +32,7 @@ use fmt;\n           all(target_os = \"openbsd\", target_arch = \"aarch64\"),\n           all(target_os = \"fuchsia\", target_arch = \"aarch64\")))]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_char = u8;\n+#[doc(include = \"os/raw/char.md\")]\n #[cfg(not(any(all(target_os = \"linux\", any(target_arch = \"aarch64\",\n                                            target_arch = \"arm\",\n                                            target_arch = \"powerpc\",\n@@ -36,30 +44,50 @@ use fmt;\n               all(target_os = \"openbsd\", target_arch = \"aarch64\"),\n               all(target_os = \"fuchsia\", target_arch = \"aarch64\"))))]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_char = i8;\n+#[doc(include = \"os/raw/schar.md\")]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_schar = i8;\n+#[doc(include = \"os/raw/uchar.md\")]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_uchar = u8;\n+#[doc(include = \"os/raw/short.md\")]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_short = i16;\n+#[doc(include = \"os/raw/ushort.md\")]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_ushort = u16;\n+#[doc(include = \"os/raw/int.md\")]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_int = i32;\n+#[doc(include = \"os/raw/uint.md\")]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_uint = u32;\n+#[doc(include = \"os/raw/long.md\")]\n #[cfg(any(target_pointer_width = \"32\", windows))]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_long = i32;\n+#[doc(include = \"os/raw/ulong.md\")]\n #[cfg(any(target_pointer_width = \"32\", windows))]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_ulong = u32;\n+#[doc(include = \"os/raw/long.md\")]\n #[cfg(all(target_pointer_width = \"64\", not(windows)))]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_long = i64;\n+#[doc(include = \"os/raw/ulong.md\")]\n #[cfg(all(target_pointer_width = \"64\", not(windows)))]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_ulong = u64;\n+#[doc(include = \"os/raw/longlong.md\")]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_longlong = i64;\n+#[doc(include = \"os/raw/ulonglong.md\")]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_ulonglong = u64;\n+#[doc(include = \"os/raw/float.md\")]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_float = f32;\n+#[doc(include = \"os/raw/double.md\")]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_double = f64;\n \n-/// Type used to construct void pointers for use with C.\n+/// Equivalent to C's `void` type when used as a [pointer].\n ///\n-/// This type is only useful as a pointer target. Do not use it as a\n-/// return type for FFI functions which have the `void` return type in\n-/// C. Use the unit type `()` or omit the return type instead.\n+/// In essence, `*const c_void` is equivalent to C's `const void*`\n+/// and `*mut c_void` is equivalent to C's `void*`. That said, this is\n+/// *not* the same as C's `void` return type, which is Rust's `()` type.\n+///\n+/// Ideally, this type would be equivalent to [`!`], but currently it may\n+/// be more ideal to use `c_void` for FFI purposes.\n+///\n+/// [`!`]: ../../primitive.never.html\n+/// [pointer]: ../../primitive.pointer.html\n // NB: For LLVM to recognize the void pointer type and by extension\n //     functions like malloc(), we need to have it represented as i8* in\n //     LLVM bitcode. The enum used here ensures this and prevents misuse", "previous_filename": "src/libstd/os/raw.rs"}, {"sha": "6aa8b1211d808d82b003cec6194fb8675ab58de6", "filename": "src/libstd/os/raw/schar.md", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a3e07dd72f98630b0f1282810a15240d3425170/src%2Flibstd%2Fos%2Fraw%2Fschar.md", "raw_url": "https://github.com/rust-lang/rust/raw/0a3e07dd72f98630b0f1282810a15240d3425170/src%2Flibstd%2Fos%2Fraw%2Fschar.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw%2Fschar.md?ref=0a3e07dd72f98630b0f1282810a15240d3425170", "patch": "@@ -0,0 +1,6 @@\n+Equivalent to C's `signed char` type.\n+\n+This type will always be [`i8`], but is included for completeness. It is defined as being a signed integer the same size as a C [`char`].\n+\n+[`char`]: type.c_char.html\n+[`i8`]: ../../primitive.i8.html"}, {"sha": "be92c6c106d598534a0f8bed771656a2f5aae5ce", "filename": "src/libstd/os/raw/short.md", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a3e07dd72f98630b0f1282810a15240d3425170/src%2Flibstd%2Fos%2Fraw%2Fshort.md", "raw_url": "https://github.com/rust-lang/rust/raw/0a3e07dd72f98630b0f1282810a15240d3425170/src%2Flibstd%2Fos%2Fraw%2Fshort.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw%2Fshort.md?ref=0a3e07dd72f98630b0f1282810a15240d3425170", "patch": "@@ -0,0 +1,6 @@\n+Equivalent to C's `signed short` (`short`) type.\n+\n+This type will almost always be [`i16`], but may differ on some esoteric systems. The C standard technically only requires that this type be a signed integer with at least 16 bits; some systems may define it as `i32`, for example.\n+\n+[`char`]: type.c_char.html\n+[`i16`]: ../../primitive.i16.html"}, {"sha": "b6ca711f869347a2b1ab44f8542c946eaf72db63", "filename": "src/libstd/os/raw/uchar.md", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a3e07dd72f98630b0f1282810a15240d3425170/src%2Flibstd%2Fos%2Fraw%2Fuchar.md", "raw_url": "https://github.com/rust-lang/rust/raw/0a3e07dd72f98630b0f1282810a15240d3425170/src%2Flibstd%2Fos%2Fraw%2Fuchar.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw%2Fuchar.md?ref=0a3e07dd72f98630b0f1282810a15240d3425170", "patch": "@@ -0,0 +1,6 @@\n+Equivalent to C's `unsigned char` type.\n+\n+This type will always be [`u8`], but is included for completeness. It is defined as being an unsigned integer the same size as a C [`char`].\n+\n+[`char`]: type.c_char.html\n+[`u8`]: ../../primitive.u8.html"}, {"sha": "6f7013a8ac18dfe20db854a2104d6960eb853c3c", "filename": "src/libstd/os/raw/uint.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0a3e07dd72f98630b0f1282810a15240d3425170/src%2Flibstd%2Fos%2Fraw%2Fuint.md", "raw_url": "https://github.com/rust-lang/rust/raw/0a3e07dd72f98630b0f1282810a15240d3425170/src%2Flibstd%2Fos%2Fraw%2Fuint.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw%2Fuint.md?ref=0a3e07dd72f98630b0f1282810a15240d3425170", "patch": "@@ -0,0 +1,7 @@\n+Equivalent to C's `unsigned int` type.\n+\n+This type will almost always be [`u32`], but may differ on some esoteric systems. The C standard technically only requires that this type be an unsigned integer with the same size as an [`int`]; some systems define it as a [`u16`], for example.\n+\n+[`int`]: type.c_int.html\n+[`u32`]: ../../primitive.u32.html\n+[`u16`]: ../../primitive.u16.html"}, {"sha": "c350395080e80f429aa1ec71b42235ef9be87b64", "filename": "src/libstd/os/raw/ulong.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0a3e07dd72f98630b0f1282810a15240d3425170/src%2Flibstd%2Fos%2Fraw%2Fulong.md", "raw_url": "https://github.com/rust-lang/rust/raw/0a3e07dd72f98630b0f1282810a15240d3425170/src%2Flibstd%2Fos%2Fraw%2Fulong.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw%2Fulong.md?ref=0a3e07dd72f98630b0f1282810a15240d3425170", "patch": "@@ -0,0 +1,7 @@\n+Equivalent to C's `unsigned long` type.\n+\n+This type will always be [`u32`] or [`u64`]. Most notably, many Linux-based systems assume an `u64`, but Windows assumes `u32`. The C standard technically only requires that this type be an unsigned integer with the size of a [`long`], although in practice, no system would have a `ulong` that is neither a `u32` nor `u64`.\n+\n+[`long`]: type.c_long.html\n+[`u32`]: ../../primitive.u32.html\n+[`u64`]: ../../primitive.u64.html"}, {"sha": "c41faf74c5c68243f1d84f220e021b3d231008e5", "filename": "src/libstd/os/raw/ulonglong.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0a3e07dd72f98630b0f1282810a15240d3425170/src%2Flibstd%2Fos%2Fraw%2Fulonglong.md", "raw_url": "https://github.com/rust-lang/rust/raw/0a3e07dd72f98630b0f1282810a15240d3425170/src%2Flibstd%2Fos%2Fraw%2Fulonglong.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw%2Fulonglong.md?ref=0a3e07dd72f98630b0f1282810a15240d3425170", "patch": "@@ -0,0 +1,7 @@\n+Equivalent to C's `unsigned long long` type.\n+\n+This type will almost always be [`u64`], but may differ on some systems. The C standard technically only requires that this type be an unsigned integer with the size of a [`long long`], although in practice, no system would have a `long long` that is not a `u64`, as most systems do not have a standardised [`u128`] type.\n+\n+[`long long`]: type.c_longlong.html\n+[`u64`]: ../../primitive.u64.html\n+[`u128`]: ../../primitive.u128.html"}, {"sha": "d364abb3c8e0c501237e0b5363ee1482653c8992", "filename": "src/libstd/os/raw/ushort.md", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a3e07dd72f98630b0f1282810a15240d3425170/src%2Flibstd%2Fos%2Fraw%2Fushort.md", "raw_url": "https://github.com/rust-lang/rust/raw/0a3e07dd72f98630b0f1282810a15240d3425170/src%2Flibstd%2Fos%2Fraw%2Fushort.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw%2Fushort.md?ref=0a3e07dd72f98630b0f1282810a15240d3425170", "patch": "@@ -0,0 +1,6 @@\n+Equivalent to C's `unsigned short` type.\n+\n+This type will almost always be [`u16`], but may differ on some esoteric systems. The C standard technically only requires that this type be an unsigned integer with the same size as a [`short`].\n+\n+[`short`]: type.c_short.html\n+[`u16`]: ../../primitive.u16.html"}]}