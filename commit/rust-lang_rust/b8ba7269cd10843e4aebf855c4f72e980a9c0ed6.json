{"sha": "b8ba7269cd10843e4aebf855c4f72e980a9c0ed6", "node_id": "C_kwDOAAsO6NoAKGI4YmE3MjY5Y2QxMDg0M2U0YWViZjg1NWM0ZjcyZTk4MGE5YzBlZDY", "commit": {"author": {"name": "Yechan Bae", "email": "yechan@gatech.edu", "date": "2021-09-17T07:27:31Z"}, "committer": {"name": "Yechan Bae", "email": "yechan@gatech.edu", "date": "2021-10-09T09:38:19Z"}, "message": "Fix clippy lints", "tree": {"sha": "4f0d43ce7bc698f890291bd95b9e91d8f9122d69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f0d43ce7bc698f890291bd95b9e91d8f9122d69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8ba7269cd10843e4aebf855c4f72e980a9c0ed6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8ba7269cd10843e4aebf855c4f72e980a9c0ed6", "html_url": "https://github.com/rust-lang/rust/commit/b8ba7269cd10843e4aebf855c4f72e980a9c0ed6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8ba7269cd10843e4aebf855c4f72e980a9c0ed6/comments", "author": {"login": "Qwaz", "id": 5073807, "node_id": "MDQ6VXNlcjUwNzM4MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/5073807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Qwaz", "html_url": "https://github.com/Qwaz", "followers_url": "https://api.github.com/users/Qwaz/followers", "following_url": "https://api.github.com/users/Qwaz/following{/other_user}", "gists_url": "https://api.github.com/users/Qwaz/gists{/gist_id}", "starred_url": "https://api.github.com/users/Qwaz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Qwaz/subscriptions", "organizations_url": "https://api.github.com/users/Qwaz/orgs", "repos_url": "https://api.github.com/users/Qwaz/repos", "events_url": "https://api.github.com/users/Qwaz/events{/privacy}", "received_events_url": "https://api.github.com/users/Qwaz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Qwaz", "id": 5073807, "node_id": "MDQ6VXNlcjUwNzM4MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/5073807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Qwaz", "html_url": "https://github.com/Qwaz", "followers_url": "https://api.github.com/users/Qwaz/followers", "following_url": "https://api.github.com/users/Qwaz/following{/other_user}", "gists_url": "https://api.github.com/users/Qwaz/gists{/gist_id}", "starred_url": "https://api.github.com/users/Qwaz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Qwaz/subscriptions", "organizations_url": "https://api.github.com/users/Qwaz/orgs", "repos_url": "https://api.github.com/users/Qwaz/repos", "events_url": "https://api.github.com/users/Qwaz/events{/privacy}", "received_events_url": "https://api.github.com/users/Qwaz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "452181c69d2a106d9d5a1262b69e68a765c4b3e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/452181c69d2a106d9d5a1262b69e68a765c4b3e3", "html_url": "https://github.com/rust-lang/rust/commit/452181c69d2a106d9d5a1262b69e68a765c4b3e3"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "8b1254b60f9117c5d9da87a19600a7a169dea4e0", "filename": "clippy_lints/src/uninit_vec.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8ba7269cd10843e4aebf855c4f72e980a9c0ed6/clippy_lints%2Fsrc%2Funinit_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ba7269cd10843e4aebf855c4f72e980a9c0ed6/clippy_lints%2Fsrc%2Funinit_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funinit_vec.rs?ref=b8ba7269cd10843e4aebf855c4f72e980a9c0ed6", "patch": "@@ -91,7 +91,7 @@ impl<'tcx> LocalOrExpr<'tcx> {\n     }\n }\n \n-/// Returns the target vec of Vec::with_capacity() or Vec::reserve()\n+/// Returns the target vec of `Vec::with_capacity()` or `Vec::reserve()`\n fn extract_with_capacity_or_reserve_target(cx: &LateContext<'_>, stmt: &'tcx Stmt<'_>) -> Option<LocalOrExpr<'tcx>> {\n     match stmt.kind {\n         StmtKind::Local(local) => {\n@@ -128,7 +128,7 @@ fn extract_with_capacity_or_reserve_target(cx: &LateContext<'_>, stmt: &'tcx Stm\n                 _ => None,\n             }\n         },\n-        _ => None,\n+        StmtKind::Item(_) => None,\n     }\n }\n \n@@ -145,7 +145,7 @@ fn is_with_capacity(cx: &LateContext<'_>, expr: &'tcx Expr<'_>) -> bool {\n     }\n }\n \n-/// Returns self if the expression is Vec::set_len()\n+/// Returns self if the expression is `Vec::set_len()`\n fn extract_set_len_self(cx: &LateContext<'_>, expr: &'tcx Expr<'_>) -> Option<(&'tcx Expr<'tcx>, Span)> {\n     // peel unsafe blocks in `unsafe { vec.set_len() }`\n     let expr = peel_hir_expr_while(expr, |e| {"}]}