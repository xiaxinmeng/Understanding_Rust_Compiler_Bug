{"sha": "a3208246f1b7b6199121d80a9232139800459a44", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzMjA4MjQ2ZjFiN2I2MTk5MTIxZDgwYTkyMzIxMzk4MDA0NTlhNDQ=", "commit": {"author": {"name": "Piotr Czarnecki", "email": "pioczarn@gmail.com", "date": "2014-11-09T15:34:04Z"}, "committer": {"name": "Piotr Czarnecki", "email": "pioczarn@gmail.com", "date": "2014-11-09T15:34:04Z"}, "message": "Fix ICEs that involved quasi-quotation\n\n* fixed get_tt for doc comments\n* properly handle MatchNt in `quote`\n\nFixes #18763\nFixes #18775", "tree": {"sha": "fe77d6a476ece08e39dd6351358564f9017330ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe77d6a476ece08e39dd6351358564f9017330ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3208246f1b7b6199121d80a9232139800459a44", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3208246f1b7b6199121d80a9232139800459a44", "html_url": "https://github.com/rust-lang/rust/commit/a3208246f1b7b6199121d80a9232139800459a44", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3208246f1b7b6199121d80a9232139800459a44/comments", "author": {"login": "pczarn", "id": 3356767, "node_id": "MDQ6VXNlcjMzNTY3Njc=", "avatar_url": "https://avatars.githubusercontent.com/u/3356767?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pczarn", "html_url": "https://github.com/pczarn", "followers_url": "https://api.github.com/users/pczarn/followers", "following_url": "https://api.github.com/users/pczarn/following{/other_user}", "gists_url": "https://api.github.com/users/pczarn/gists{/gist_id}", "starred_url": "https://api.github.com/users/pczarn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pczarn/subscriptions", "organizations_url": "https://api.github.com/users/pczarn/orgs", "repos_url": "https://api.github.com/users/pczarn/repos", "events_url": "https://api.github.com/users/pczarn/events{/privacy}", "received_events_url": "https://api.github.com/users/pczarn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pczarn", "id": 3356767, "node_id": "MDQ6VXNlcjMzNTY3Njc=", "avatar_url": "https://avatars.githubusercontent.com/u/3356767?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pczarn", "html_url": "https://github.com/pczarn", "followers_url": "https://api.github.com/users/pczarn/followers", "following_url": "https://api.github.com/users/pczarn/following{/other_user}", "gists_url": "https://api.github.com/users/pczarn/gists{/gist_id}", "starred_url": "https://api.github.com/users/pczarn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pczarn/subscriptions", "organizations_url": "https://api.github.com/users/pczarn/orgs", "repos_url": "https://api.github.com/users/pczarn/repos", "events_url": "https://api.github.com/users/pczarn/events{/privacy}", "received_events_url": "https://api.github.com/users/pczarn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebc625ad3eaa2ee630c6c8203106826ad23abc98", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebc625ad3eaa2ee630c6c8203106826ad23abc98", "html_url": "https://github.com/rust-lang/rust/commit/ebc625ad3eaa2ee630c6c8203106826ad23abc98"}], "stats": {"total": 83, "additions": 53, "deletions": 30}, "files": [{"sha": "0bfcf16fce5bb06417f79144c6489d2cdb5866d5", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a3208246f1b7b6199121d80a9232139800459a44/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3208246f1b7b6199121d80a9232139800459a44/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=a3208246f1b7b6199121d80a9232139800459a44", "patch": "@@ -10,7 +10,7 @@\n \n // The Rust abstract syntax tree.\n \n-use codemap::{Span, Spanned, DUMMY_SP, ExpnId, respan};\n+use codemap::{Span, Spanned, DUMMY_SP, ExpnId};\n use abi::Abi;\n use ast_util;\n use owned_slice::OwnedSlice;\n@@ -783,13 +783,13 @@ impl TokenTree {\n                 TtToken(sp, token::Pound)\n             }\n             (&TtToken(sp, token::DocComment(name)), 1) => {\n-                let doc = MetaNameValue(token::intern_and_get_ident(\"doc\"),\n-                                        respan(sp, LitStr(token::get_name(name), CookedStr)));\n-                let doc = token::NtMeta(P(respan(sp, doc)));\n                 TtDelimited(sp, Rc::new(Delimited {\n                     delim: token::Bracket,\n                     open_span: sp,\n-                    tts: vec![TtToken(sp, token::Interpolated(doc))],\n+                    tts: vec![TtToken(sp, token::Ident(token::str_to_ident(\"doc\"),\n+                                                       token::Plain)),\n+                              TtToken(sp, token::Eq),\n+                              TtToken(sp, token::LitStr(name))],\n                     close_span: sp,\n                 }))\n             }"}, {"sha": "b3086fba834c0435b4d035ffd7160a14f092935b", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 17, "deletions": 25, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/a3208246f1b7b6199121d80a9232139800459a44/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3208246f1b7b6199121d80a9232139800459a44/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=a3208246f1b7b6199121d80a9232139800459a44", "patch": "@@ -23,8 +23,8 @@ use ptr::P;\n *\n * This is registered as a set of expression syntax extension called quote!\n * that lifts its argument token-tree to an AST representing the\n-* construction of the same token tree, with ast::TtNonterminal nodes\n-* interpreted as antiquotes (splices).\n+* construction of the same token tree, with token::SubstNt interpreted\n+* as antiquotes (splices).\n *\n */\n \n@@ -616,20 +616,6 @@ fn mk_token(cx: &ExtCtxt, sp: Span, tok: &token::Token) -> P<ast::Expr> {\n                                 vec!(mk_name(cx, sp, ident.ident())));\n         }\n \n-        token::MatchNt(name, kind, name_style, kind_style) => {\n-            return cx.expr_call(sp,\n-                                mk_token_path(cx, sp, \"MatchNt\"),\n-                                vec![mk_ident(cx, sp, name),\n-                                     mk_ident(cx, sp, kind),\n-                                     match name_style {\n-                                         ModName => mk_token_path(cx, sp, \"ModName\"),\n-                                         Plain   => mk_token_path(cx, sp, \"Plain\"),\n-                                     },\n-                                     match kind_style {\n-                                         ModName => mk_token_path(cx, sp, \"ModName\"),\n-                                         Plain   => mk_token_path(cx, sp, \"Plain\"),\n-                                     }]);\n-        }\n         token::Interpolated(_) => panic!(\"quote! with interpolated token\"),\n \n         _ => ()\n@@ -666,7 +652,7 @@ fn mk_token(cx: &ExtCtxt, sp: Span, tok: &token::Token) -> P<ast::Expr> {\n     mk_token_path(cx, sp, name)\n }\n \n-fn mk_tt(cx: &ExtCtxt, _: Span, tt: &ast::TokenTree) -> Vec<P<ast::Stmt>> {\n+fn mk_tt(cx: &ExtCtxt, tt: &ast::TokenTree) -> Vec<P<ast::Stmt>> {\n     match *tt {\n         ast::TtToken(sp, SubstNt(ident, _)) => {\n             // tt.extend($ident.to_tokens(ext_cx).into_iter())\n@@ -687,6 +673,13 @@ fn mk_tt(cx: &ExtCtxt, _: Span, tt: &ast::TokenTree) -> Vec<P<ast::Stmt>> {\n \n             vec!(cx.stmt_expr(e_push))\n         }\n+        ref tt @ ast::TtToken(_, MatchNt(..)) => {\n+            let mut seq = vec![];\n+            for i in range(0, tt.len()) {\n+                seq.push(tt.get_tt(i));\n+            }\n+            mk_tts(cx, seq.as_slice())\n+        }\n         ast::TtToken(sp, ref tok) => {\n             let e_sp = cx.expr_ident(sp, id_ext(\"_sp\"));\n             let e_tok = cx.expr_call(sp,\n@@ -699,21 +692,20 @@ fn mk_tt(cx: &ExtCtxt, _: Span, tt: &ast::TokenTree) -> Vec<P<ast::Stmt>> {\n                                     vec!(e_tok));\n             vec!(cx.stmt_expr(e_push))\n         },\n-        ast::TtDelimited(sp, ref delimed) => {\n-            mk_tt(cx, sp, &delimed.open_tt()).into_iter()\n-                .chain(delimed.tts.iter().flat_map(|tt| mk_tt(cx, sp, tt).into_iter()))\n-                .chain(mk_tt(cx, sp, &delimed.close_tt()).into_iter())\n+        ast::TtDelimited(_, ref delimed) => {\n+            mk_tt(cx, &delimed.open_tt()).into_iter()\n+                .chain(delimed.tts.iter().flat_map(|tt| mk_tt(cx, tt).into_iter()))\n+                .chain(mk_tt(cx, &delimed.close_tt()).into_iter())\n                 .collect()\n         },\n         ast::TtSequence(..) => panic!(\"TtSequence in quote!\"),\n     }\n }\n \n-fn mk_tts(cx: &ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n-    -> Vec<P<ast::Stmt>> {\n+fn mk_tts(cx: &ExtCtxt, tts: &[ast::TokenTree]) -> Vec<P<ast::Stmt>> {\n     let mut ss = Vec::new();\n     for tt in tts.iter() {\n-        ss.extend(mk_tt(cx, sp, tt).into_iter());\n+        ss.extend(mk_tt(cx, tt).into_iter());\n     }\n     ss\n }\n@@ -775,7 +767,7 @@ fn expand_tts(cx: &ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n     let stmt_let_tt = cx.stmt_let(sp, true, id_ext(\"tt\"), cx.expr_vec_ng(sp));\n \n     let mut vector = vec!(stmt_let_sp, stmt_let_tt);\n-    vector.extend(mk_tts(cx, sp, tts.as_slice()).into_iter());\n+    vector.extend(mk_tts(cx, tts.as_slice()).into_iter());\n     let block = cx.expr_block(\n         cx.block_all(sp,\n                      Vec::new(),"}, {"sha": "23228d499951cc1af871d6b7583636e2eb215cf2", "filename": "src/test/run-pass-fulldeps/issue-18763-quote-token-tree.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a3208246f1b7b6199121d80a9232139800459a44/src%2Ftest%2Frun-pass-fulldeps%2Fissue-18763-quote-token-tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3208246f1b7b6199121d80a9232139800459a44/src%2Ftest%2Frun-pass-fulldeps%2Fissue-18763-quote-token-tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fissue-18763-quote-token-tree.rs?ref=a3208246f1b7b6199121d80a9232139800459a44", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-android\n+// ignore-pretty: does not work well with `--test`\n+\n+#![feature(quote)]\n+\n+extern crate syntax;\n+\n+use syntax::ext::base::ExtCtxt;\n+\n+fn syntax_extension(cx: &ExtCtxt) {\n+    let _toks_1 = vec![quote_tokens!(cx, /** comment */ fn foo() {})];\n+    let name = quote_tokens!(cx, bar);\n+    let _toks_2 = vec![quote_item!(cx, static $name:int = 2;)];\n+    let _toks_3 = vec![quote_item!(cx,\n+        /// comment\n+        fn foo() { let $name:int = 3; }\n+    )];\n+}\n+\n+fn main() {\n+}"}]}