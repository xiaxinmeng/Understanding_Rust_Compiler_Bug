{"sha": "dcb5387b420456d6cb827a90756931ada70f4e6a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjYjUzODdiNDIwNDU2ZDZjYjgyN2E5MDc1NjkzMWFkYTcwZjRlNmE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-01-04T13:44:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-04T13:44:21Z"}, "message": "Merge #7152\n\n7152: Implement hover for ConstParam r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "38a4c4ab7de241042df86c01cad3889435576f1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38a4c4ab7de241042df86c01cad3889435576f1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dcb5387b420456d6cb827a90756931ada70f4e6a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf8xu1CRBK7hj4Ov3rIwAAdHIIADFTypKOVpP8fIX95R6tFZem\nkYhkEBQgbgoUrtk5zZc9GiTJZDnNaeL1ZcMLDJN47zlr6Vo0CbNtgLJYFzw8zICW\nZYhph8M1Xl7SfZdyks6C1l0bzx3UCD8SJdaTrvoWdTqyvJgnJ3sLsZU8dPHeQeZf\ngHczkUHwZH9snRKBZ+dfm+kxonYVb0gw0GtrhTfTpZwD8GG8aEYP3H7MGTuT6LWy\nEgHRDvhkslGiItjMEO9UtgNBvYCkJB986sqSbM91OLBwRVTNqr7hVL2M0oAMLBnH\nJHPOci9oTgxISZ6p6VCh+wJWlwvRh/DtuX+JTHVQmthlgjusxB4S/nPuepdcjWo=\n=lXT0\n-----END PGP SIGNATURE-----\n", "payload": "tree 38a4c4ab7de241042df86c01cad3889435576f1a\nparent 5771cad4517005afe134d0b9c93571c177f14db4\nparent 5804b3fae8732576146a7da0b600b2088183dc31\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1609767861 +0000\ncommitter GitHub <noreply@github.com> 1609767861 +0000\n\nMerge #7152\n\n7152: Implement hover for ConstParam r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dcb5387b420456d6cb827a90756931ada70f4e6a", "html_url": "https://github.com/rust-lang/rust/commit/dcb5387b420456d6cb827a90756931ada70f4e6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dcb5387b420456d6cb827a90756931ada70f4e6a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5771cad4517005afe134d0b9c93571c177f14db4", "url": "https://api.github.com/repos/rust-lang/rust/commits/5771cad4517005afe134d0b9c93571c177f14db4", "html_url": "https://github.com/rust-lang/rust/commit/5771cad4517005afe134d0b9c93571c177f14db4"}, {"sha": "5804b3fae8732576146a7da0b600b2088183dc31", "url": "https://api.github.com/repos/rust-lang/rust/commits/5804b3fae8732576146a7da0b600b2088183dc31", "html_url": "https://github.com/rust-lang/rust/commit/5804b3fae8732576146a7da0b600b2088183dc31"}], "stats": {"total": 56, "additions": 41, "deletions": 15}, "files": [{"sha": "990f740b8b5e2d0f1d425872d4608381c56d579d", "filename": "crates/ide/src/display/short_label.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/dcb5387b420456d6cb827a90756931ada70f4e6a/crates%2Fide%2Fsrc%2Fdisplay%2Fshort_label.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcb5387b420456d6cb827a90756931ada70f4e6a/crates%2Fide%2Fsrc%2Fdisplay%2Fshort_label.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdisplay%2Fshort_label.rs?ref=dcb5387b420456d6cb827a90756931ada70f4e6a", "patch": "@@ -87,6 +87,17 @@ impl ShortLabel for ast::Variant {\n     }\n }\n \n+impl ShortLabel for ast::ConstParam {\n+    fn short_label(&self) -> Option<String> {\n+        let mut buf = \"const \".to_owned();\n+        buf.push_str(self.name()?.text().as_str());\n+        if let Some(type_ref) = self.ty() {\n+            format_to!(buf, \": {}\", type_ref.syntax());\n+        }\n+        Some(buf)\n+    }\n+}\n+\n fn short_label_from_ty<T>(node: &T, ty: Option<ast::Type>, prefix: &str) -> Option<String>\n where\n     T: NameOwner + VisibilityOwner,"}, {"sha": "c0786eb51db1b2931b1c2250093348333ff1b86d", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 29, "deletions": 14, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/dcb5387b420456d6cb827a90756931ada70f4e6a/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcb5387b420456d6cb827a90756931ada70f4e6a/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=dcb5387b420456d6cb827a90756931ada70f4e6a", "patch": "@@ -70,7 +70,7 @@ impl HoverConfig {\n #[derive(Debug, Clone)]\n pub enum HoverAction {\n     Runnable(Runnable),\n-    Implementaion(FilePosition),\n+    Implementation(FilePosition),\n     GoToType(Vec<HoverGotoTypeData>),\n }\n \n@@ -116,12 +116,13 @@ pub(crate) fn hover(\n     };\n     if let Some(definition) = definition {\n         if let Some(markup) = hover_for_definition(db, definition) {\n+            let markup = markup.as_str();\n             let markup = if !markdown {\n-                remove_markdown(&markup.as_str())\n+                remove_markdown(markup)\n             } else if links_in_hover {\n-                rewrite_links(db, &markup.as_str(), &definition)\n+                rewrite_links(db, markup, &definition)\n             } else {\n-                remove_links(&markup.as_str())\n+                remove_links(markup)\n             };\n             res.markup = Markup::from(markup);\n             if let Some(action) = show_implementations_action(db, definition) {\n@@ -175,7 +176,7 @@ pub(crate) fn hover(\n \n fn show_implementations_action(db: &RootDatabase, def: Definition) -> Option<HoverAction> {\n     fn to_action(nav_target: NavigationTarget) -> HoverAction {\n-        HoverAction::Implementaion(FilePosition {\n+        HoverAction::Implementation(FilePosition {\n             file_id: nav_target.file_id,\n             offset: nav_target.focus_or_full_range().start(),\n         })\n@@ -371,10 +372,7 @@ fn hover_for_definition(db: &RootDatabase, def: Definition) -> Option<Markup> {\n         Definition::Label(it) => Some(Markup::fenced_block(&it.name(db))),\n         Definition::LifetimeParam(it) => Some(Markup::fenced_block(&it.name(db))),\n         Definition::TypeParam(type_param) => Some(Markup::fenced_block(&type_param.display(db))),\n-        Definition::ConstParam(_) => {\n-            // FIXME: Hover for generic const param\n-            None\n-        }\n+        Definition::ConstParam(it) => from_def_source(db, it, None),\n     };\n \n     fn from_def_source<A, D>(db: &RootDatabase, def: D, mod_path: Option<String>) -> Option<Markup>\n@@ -1394,7 +1392,7 @@ fn bar() { fo<|>o(); }\n             r\"unsafe trait foo<|>() {}\",\n             expect![[r#\"\n                 [\n-                    Implementaion(\n+                    Implementation(\n                         FilePosition {\n                             file_id: FileId(\n                                 0,\n@@ -2106,7 +2104,7 @@ fn foo() { let bar = Bar; bar.fo<|>o(); }\n             r#\"trait foo<|>() {}\"#,\n             expect![[r#\"\n                 [\n-                    Implementaion(\n+                    Implementation(\n                         FilePosition {\n                             file_id: FileId(\n                                 0,\n@@ -2125,7 +2123,7 @@ fn foo() { let bar = Bar; bar.fo<|>o(); }\n             r\"struct foo<|>() {}\",\n             expect![[r#\"\n                 [\n-                    Implementaion(\n+                    Implementation(\n                         FilePosition {\n                             file_id: FileId(\n                                 0,\n@@ -2144,7 +2142,7 @@ fn foo() { let bar = Bar; bar.fo<|>o(); }\n             r#\"union foo<|>() {}\"#,\n             expect![[r#\"\n                 [\n-                    Implementaion(\n+                    Implementation(\n                         FilePosition {\n                             file_id: FileId(\n                                 0,\n@@ -2163,7 +2161,7 @@ fn foo() { let bar = Bar; bar.fo<|>o(); }\n             r\"enum foo<|>() { A, B }\",\n             expect![[r#\"\n                 [\n-                    Implementaion(\n+                    Implementation(\n                         FilePosition {\n                             file_id: FileId(\n                                 0,\n@@ -3305,4 +3303,21 @@ impl<T: 'static> Foo<T<|>> {}\n                 \"#]],\n         );\n     }\n+\n+    #[test]\n+    fn hover_const_param() {\n+        check(\n+            r#\"\n+struct Foo<const LEN: usize>;\n+impl<const LEN: usize> Foo<LEN<|>> {}\n+\"#,\n+            expect![[r#\"\n+                *LEN*\n+\n+                ```rust\n+                const LEN: usize\n+                ```\n+            \"#]],\n+        );\n+    }\n }"}, {"sha": "c21ca044ae8780fa7110a5f24b13d6697f01df6a", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dcb5387b420456d6cb827a90756931ada70f4e6a/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcb5387b420456d6cb827a90756931ada70f4e6a/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=dcb5387b420456d6cb827a90756931ada70f4e6a", "patch": "@@ -1648,7 +1648,7 @@ fn prepare_hover_actions(\n     actions\n         .iter()\n         .filter_map(|it| match it {\n-            HoverAction::Implementaion(position) => show_impl_command_link(snap, position),\n+            HoverAction::Implementation(position) => show_impl_command_link(snap, position),\n             HoverAction::Runnable(r) => runnable_action_links(snap, file_id, r.clone()),\n             HoverAction::GoToType(targets) => goto_type_action_links(snap, targets),\n         })"}]}