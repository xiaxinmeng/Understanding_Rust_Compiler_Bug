{"sha": "78e95bb7ac92f8f92654705a47cef652b6a0b259", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4ZTk1YmI3YWM5MmY4ZjkyNjU0NzA1YTQ3Y2VmNjUyYjZhMGIyNTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-27T10:02:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-27T10:02:51Z"}, "message": "Auto merge of #42588 - ishitatsuyuki:patch-1, r=petrochenkov\n\nMake unused-extern-crate warn-by-default\n\nApart from enabling the lint, this pull request also removes existing unused crates in the codebase, and fix some amount of false positives on crates with special purposes.\n\nNow that all false positive issues are closed, it should be possible to make it available to wider users.\n\nQuote:\n> Now that macro modularization is implemented, this is true today! *https://github.com/rust-lang/rust/issues/30849#issuecomment-286573218*\n\nConcerns: can break some `#[deny(warnings)]`.\n\nClose #42591", "tree": {"sha": "a0d4ee18cfe588ccfc8ad76f5b91b70a03d1da30", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0d4ee18cfe588ccfc8ad76f5b91b70a03d1da30"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78e95bb7ac92f8f92654705a47cef652b6a0b259", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78e95bb7ac92f8f92654705a47cef652b6a0b259", "html_url": "https://github.com/rust-lang/rust/commit/78e95bb7ac92f8f92654705a47cef652b6a0b259", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78e95bb7ac92f8f92654705a47cef652b6a0b259/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93cdf5e3c45a0578c79afe8563065d07e5f6984f", "url": "https://api.github.com/repos/rust-lang/rust/commits/93cdf5e3c45a0578c79afe8563065d07e5f6984f", "html_url": "https://github.com/rust-lang/rust/commit/93cdf5e3c45a0578c79afe8563065d07e5f6984f"}, {"sha": "a91bdf4ad558b3cf7b2a0230df15d83a6a686397", "url": "https://api.github.com/repos/rust-lang/rust/commits/a91bdf4ad558b3cf7b2a0230df15d83a6a686397", "html_url": "https://github.com/rust-lang/rust/commit/a91bdf4ad558b3cf7b2a0230df15d83a6a686397"}], "stats": {"total": 134, "additions": 96, "deletions": 38}, "files": [{"sha": "123c884585c19f276c7acc2d31968900eb55f6e4", "filename": "src/Cargo.lock", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=78e95bb7ac92f8f92654705a47cef652b6a0b259", "patch": "@@ -1327,7 +1327,6 @@ dependencies = [\n  \"graphviz 0.0.0\",\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n- \"rustc_data_structures 0.0.0\",\n  \"rustc_errors 0.0.0\",\n  \"rustc_mir 0.0.0\",\n  \"syntax 0.0.0\",\n@@ -1464,7 +1463,6 @@ dependencies = [\n  \"proc_macro 0.0.0\",\n  \"rustc 0.0.0\",\n  \"rustc_back 0.0.0\",\n- \"rustc_const_math 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_errors 0.0.0\",\n  \"serialize 0.0.0\",\n@@ -1605,6 +1603,7 @@ dependencies = [\n name = \"rustc_tsan\"\n version = \"0.0.0\"\n dependencies = [\n+ \"alloc 0.0.0\",\n  \"alloc_system 0.0.0\",\n  \"build_helper 0.1.0\",\n  \"cmake 0.1.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1859,7 +1858,6 @@ name = \"syntax_ext\"\n version = \"0.0.0\"\n dependencies = [\n  \"fmt_macros 0.0.0\",\n- \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"proc_macro 0.0.0\",\n  \"rustc_errors 0.0.0\",\n  \"syntax 0.0.0\","}, {"sha": "8f3e71ef794465fb8a5b3e1c23d28faf5ffaf32c", "filename": "src/liballoc/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Fliballoc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Fliballoc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Flib.rs?ref=78e95bb7ac92f8f92654705a47cef652b6a0b259", "patch": "@@ -10,7 +10,6 @@\n \n #![deny(warnings)]\n \n-#![feature(alloc)]\n #![feature(attr_literals)]\n #![feature(box_syntax)]\n #![feature(inclusive_range_syntax)]\n@@ -27,14 +26,10 @@\n #![feature(splice)]\n #![feature(str_escape)]\n #![feature(string_retain)]\n-#![feature(test)]\n #![feature(unboxed_closures)]\n #![feature(unicode)]\n \n-extern crate alloc;\n-extern crate test;\n extern crate std_unicode;\n-extern crate core;\n \n use std::hash::{Hash, Hasher};\n use std::collections::hash_map::DefaultHasher;"}, {"sha": "efefabc974c7fb0c068a422e487de10318daf86d", "filename": "src/liballoc_jemalloc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Fliballoc_jemalloc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Fliballoc_jemalloc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2Flib.rs?ref=78e95bb7ac92f8f92654705a47cef652b6a0b259", "patch": "@@ -19,7 +19,7 @@\n #![feature(libc)]\n #![feature(linkage)]\n #![feature(staged_api)]\n-#![cfg_attr(dummy_jemalloc, allow(dead_code))]\n+#![cfg_attr(dummy_jemalloc, allow(dead_code, unused_extern_crates))]\n #![cfg_attr(not(dummy_jemalloc), feature(allocator_api))]\n \n extern crate alloc;"}, {"sha": "ab2022b1824ca3a2e5f5b682731d53c52abb5a14", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=78e95bb7ac92f8f92654705a47cef652b6a0b259", "patch": "@@ -26,7 +26,6 @@\n #![feature(inclusive_range)]\n #![feature(inclusive_range_syntax)]\n #![feature(iter_rfind)]\n-#![feature(libc)]\n #![feature(nonzero)]\n #![feature(ord_max_min)]\n #![feature(rand)]\n@@ -41,13 +40,10 @@\n #![feature(test)]\n #![feature(trusted_len)]\n #![feature(try_from)]\n-#![feature(unicode)]\n #![feature(unique)]\n \n extern crate core;\n extern crate test;\n-extern crate libc;\n-extern crate std_unicode;\n extern crate rand;\n \n mod any;"}, {"sha": "558286f4ec0707c1fb740cf499f65222afe6243c", "filename": "src/libpanic_unwind/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Flibpanic_unwind%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Flibpanic_unwind%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Flib.rs?ref=78e95bb7ac92f8f92654705a47cef652b6a0b259", "patch": "@@ -34,7 +34,9 @@\n #![feature(core_intrinsics)]\n #![feature(lang_items)]\n #![feature(libc)]\n-#![feature(panic_unwind)]\n+#![cfg_attr(not(any(target_env = \"msvc\",\n+                    all(windows, target_arch = \"x86_64\", target_env = \"gnu\"))),\n+            feature(panic_unwind))]\n #![feature(raw)]\n #![feature(staged_api)]\n #![feature(unwind_attributes)]\n@@ -45,6 +47,7 @@\n \n extern crate alloc;\n extern crate libc;\n+#[cfg(not(any(target_env = \"msvc\", all(windows, target_arch = \"x86_64\", target_env = \"gnu\"))))]\n extern crate unwind;\n \n use core::intrinsics;"}, {"sha": "01fff60528394366345e212528a0c04b4b43ed33", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=78e95bb7ac92f8f92654705a47cef652b6a0b259", "patch": "@@ -522,6 +522,8 @@ define_dep_nodes!( <'tcx>\n     [] DylibDepFormats(DefId),\n     [] IsAllocator(DefId),\n     [] IsPanicRuntime(DefId),\n+    [] IsCompilerBuiltins(DefId),\n+    [] HasGlobalAllocator(DefId),\n     [] ExternCrate(DefId),\n     [] LintLevels,\n );"}, {"sha": "152b2e2aa5ebc104d80936b458b66de4db488cb8", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=78e95bb7ac92f8f92654705a47cef652b6a0b259", "patch": "@@ -26,7 +26,7 @@\n #![feature(core_intrinsics)]\n #![feature(discriminant_value)]\n #![feature(i128_type)]\n-#![feature(libc)]\n+#![cfg_attr(windows, feature(libc))]\n #![feature(never_type)]\n #![feature(nonzero)]\n #![feature(quote)]\n@@ -45,6 +45,7 @@ extern crate core;\n extern crate fmt_macros;\n extern crate getopts;\n extern crate graphviz;\n+#[cfg(windows)]\n extern crate libc;\n extern crate owning_ref;\n extern crate rustc_back;\n@@ -62,7 +63,9 @@ extern crate serialize as rustc_serialize; // used by deriving\n \n // Note that librustc doesn't actually depend on these crates, see the note in\n // `Cargo.toml` for this crate about why these are here.\n+#[allow(unused_extern_crates)]\n extern crate flate2;\n+#[allow(unused_extern_crates)]\n extern crate test;\n \n #[macro_use]"}, {"sha": "811bf9776101d4d5e0fd453d5e68c97a5e6e98b7", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=78e95bb7ac92f8f92654705a47cef652b6a0b259", "patch": "@@ -30,7 +30,7 @@ declare_lint! {\n \n declare_lint! {\n     pub UNUSED_EXTERN_CRATES,\n-    Allow,\n+    Warn,\n     \"extern crates that are never used\"\n }\n "}, {"sha": "6ce2232eb3e5d38ad36c2ae8af266990584d15df", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=78e95bb7ac92f8f92654705a47cef652b6a0b259", "patch": "@@ -797,6 +797,8 @@ pub struct GlobalCtxt<'tcx> {\n \n     pub maybe_unused_trait_imports: NodeSet,\n \n+    pub maybe_unused_extern_crates: Vec<(NodeId, Span)>,\n+\n     // Internal cache for metadata decoding. No need to track deps on this.\n     pub rcache: RefCell<FxHashMap<ty::CReaderCacheKey, Ty<'tcx>>>,\n \n@@ -1038,6 +1040,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             mir_passes,\n             freevars: RefCell::new(resolutions.freevars),\n             maybe_unused_trait_imports: resolutions.maybe_unused_trait_imports,\n+            maybe_unused_extern_crates: resolutions.maybe_unused_extern_crates,\n             rcache: RefCell::new(FxHashMap()),\n             normalized_cache: RefCell::new(FxHashMap()),\n             inhabitedness_cache: RefCell::new(FxHashMap()),"}, {"sha": "a73202ced61e627ef2dfc2cb24fae0ebb873b218", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=78e95bb7ac92f8f92654705a47cef652b6a0b259", "patch": "@@ -516,6 +516,18 @@ impl<'tcx> QueryDescription for queries::is_panic_runtime<'tcx> {\n     }\n }\n \n+impl<'tcx> QueryDescription for queries::is_compiler_builtins<'tcx> {\n+    fn describe(_: TyCtxt, _: DefId) -> String {\n+        \"checking if the crate is_compiler_builtins\".to_string()\n+    }\n+}\n+\n+impl<'tcx> QueryDescription for queries::has_global_allocator<'tcx> {\n+    fn describe(_: TyCtxt, _: DefId) -> String {\n+        \"checking if the crate has_global_allocator\".to_string()\n+    }\n+}\n+\n impl<'tcx> QueryDescription for queries::extern_crate<'tcx> {\n     fn describe(_: TyCtxt, _: DefId) -> String {\n         \"getting crate's ExternCrateData\".to_string()\n@@ -1079,6 +1091,8 @@ define_maps! { <'tcx>\n \n     [] is_allocator: IsAllocator(DefId) -> bool,\n     [] is_panic_runtime: IsPanicRuntime(DefId) -> bool,\n+    [] is_compiler_builtins: IsCompilerBuiltins(DefId) -> bool,\n+    [] has_global_allocator: HasGlobalAllocator(DefId) -> bool,\n \n     [] extern_crate: ExternCrate(DefId) -> Rc<Option<ExternCrate>>,\n "}, {"sha": "6597dccf25816d55da840a68d16034a11047d740", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=78e95bb7ac92f8f92654705a47cef652b6a0b259", "patch": "@@ -131,6 +131,7 @@ pub struct Resolutions {\n     pub freevars: FreevarMap,\n     pub trait_map: TraitMap,\n     pub maybe_unused_trait_imports: NodeSet,\n+    pub maybe_unused_extern_crates: Vec<(NodeId, Span)>,\n     pub export_map: ExportMap,\n }\n "}, {"sha": "25f02537490fa8d694a52ff0a366692622c54d45", "filename": "src/librustc_borrowck/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Flibrustc_borrowck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Flibrustc_borrowck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2FCargo.toml?ref=78e95bb7ac92f8f92654705a47cef652b6a0b259", "patch": "@@ -15,6 +15,5 @@ syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n graphviz = { path = \"../libgraphviz\" }\n rustc = { path = \"../librustc\" }\n-rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_mir = { path = \"../librustc_mir\" }\n rustc_errors = { path = \"../librustc_errors\" }"}, {"sha": "9bedbfed5db6d3039b3e3a61dfe926042cb28521", "filename": "src/librustc_borrowck/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Flibrustc_borrowck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Flibrustc_borrowck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Flib.rs?ref=78e95bb7ac92f8f92654705a47cef652b6a0b259", "patch": "@@ -28,9 +28,7 @@ extern crate rustc_errors as errors;\n extern crate graphviz as dot;\n #[macro_use]\n extern crate rustc;\n-extern crate rustc_data_structures;\n extern crate rustc_mir;\n-extern crate core; // for NonZero\n \n pub use borrowck::check_crate;\n pub use borrowck::build_borrowck_dataflow_data_for_fn;"}, {"sha": "96688c6ac9cdb07afd45f6f0bf0c514e7128028f", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=78e95bb7ac92f8f92654705a47cef652b6a0b259", "patch": "@@ -877,6 +877,7 @@ pub fn phase_2_configure_and_expand<F>(sess: &Session,\n             export_map: resolver.export_map,\n             trait_map: resolver.trait_map,\n             maybe_unused_trait_imports: resolver.maybe_unused_trait_imports,\n+            maybe_unused_extern_crates: resolver.maybe_unused_extern_crates,\n         },\n         hir_forest,\n     })"}, {"sha": "1915a1c86484a6148239c3714882c42fe49a9ce8", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=78e95bb7ac92f8f92654705a47cef652b6a0b259", "patch": "@@ -20,7 +20,7 @@\n #![deny(warnings)]\n \n #![feature(box_syntax)]\n-#![feature(libc)]\n+#![cfg_attr(unix, feature(libc))]\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(set_stdio)]\n@@ -29,6 +29,7 @@ extern crate arena;\n extern crate getopts;\n extern crate graphviz;\n extern crate env_logger;\n+#[cfg(unix)]\n extern crate libc;\n extern crate rustc;\n extern crate rustc_allocator;"}, {"sha": "870bb01bb9ffb7963ff6a6b6057721a690e28c31", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=78e95bb7ac92f8f92654705a47cef652b6a0b259", "patch": "@@ -16,10 +16,11 @@\n #![feature(custom_attribute)]\n #![allow(unused_attributes)]\n #![feature(range_contains)]\n-#![feature(libc)]\n+#![cfg_attr(unix, feature(libc))]\n #![feature(conservative_impl_trait)]\n \n extern crate term;\n+#[cfg(unix)]\n extern crate libc;\n extern crate serialize as rustc_serialize;\n extern crate syntax_pos;"}, {"sha": "40b75be36fefb061c7fcabb5a71f02853b0d2874", "filename": "src/librustc_metadata/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Flibrustc_metadata%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Flibrustc_metadata%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2FCargo.toml?ref=78e95bb7ac92f8f92654705a47cef652b6a0b259", "patch": "@@ -15,7 +15,6 @@ owning_ref = \"0.3.3\"\n proc_macro = { path = \"../libproc_macro\" }\n rustc = { path = \"../librustc\" }\n rustc_back = { path = \"../librustc_back\" }\n-rustc_const_math = { path = \"../librustc_const_math\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_errors = { path = \"../librustc_errors\" }\n serialize = { path = \"../libserialize\" }"}, {"sha": "ad320a7ff3d1e659f8ee6a52e96bb6b337e3ff62", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=78e95bb7ac92f8f92654705a47cef652b6a0b259", "patch": "@@ -137,6 +137,8 @@ provide! { <'tcx> tcx, def_id, cdata,\n \n     dylib_dependency_formats => { Rc::new(cdata.get_dylib_dependency_formats(&tcx.dep_graph)) }\n     is_panic_runtime => { cdata.is_panic_runtime(&tcx.dep_graph) }\n+    is_compiler_builtins => { cdata.is_compiler_builtins(&tcx.dep_graph) }\n+    has_global_allocator => { cdata.has_global_allocator(&tcx.dep_graph) }\n     extern_crate => { Rc::new(cdata.extern_crate.get()) }\n }\n "}, {"sha": "f79abecf9da4b3ea2154783762dd7e7cdbeaa0a2", "filename": "src/librustc_metadata/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Flibrustc_metadata%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Flibrustc_metadata%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flib.rs?ref=78e95bb7ac92f8f92654705a47cef652b6a0b259", "patch": "@@ -39,7 +39,6 @@ extern crate proc_macro;\n #[macro_use]\n extern crate rustc;\n extern crate rustc_back;\n-extern crate rustc_const_math;\n extern crate rustc_data_structures;\n \n mod diagnostics;"}, {"sha": "a66d1ce0859b7efe179eda60087d3c5c7ddf4a7e", "filename": "src/librustc_resolve/check_unused.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Flibrustc_resolve%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Flibrustc_resolve%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fcheck_unused.rs?ref=78e95bb7ac92f8f92654705a47cef652b6a0b259", "patch": "@@ -121,9 +121,7 @@ pub fn check_crate(resolver: &mut Resolver, krate: &ast::Crate) {\n                  directive.vis.get() == ty::Visibility::Public ||\n                  directive.span.source_equal(&DUMMY_SP) => {}\n             ImportDirectiveSubclass::ExternCrate => {\n-                let lint = lint::builtin::UNUSED_EXTERN_CRATES;\n-                let msg = \"unused extern crate\";\n-             ;   resolver.session.buffer_lint(lint, directive.id, directive.span, msg)\n+                resolver.maybe_unused_extern_crates.push((directive.id, directive.span));\n             }\n             ImportDirectiveSubclass::MacroUse => {\n                 let lint = lint::builtin::UNUSED_IMPORTS;"}, {"sha": "a83ac9bb6336958e4d5e6d644f73c30b8fc72743", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=78e95bb7ac92f8f92654705a47cef652b6a0b259", "patch": "@@ -1250,6 +1250,7 @@ pub struct Resolver<'a> {\n \n     used_imports: FxHashSet<(NodeId, Namespace)>,\n     pub maybe_unused_trait_imports: NodeSet,\n+    pub maybe_unused_extern_crates: Vec<(NodeId, Span)>,\n \n     /// privacy errors are delayed until the end in order to deduplicate them\n     privacy_errors: Vec<PrivacyError<'a>>,\n@@ -1457,6 +1458,7 @@ impl<'a> Resolver<'a> {\n \n             used_imports: FxHashSet(),\n             maybe_unused_trait_imports: NodeSet(),\n+            maybe_unused_extern_crates: Vec::new(),\n \n             privacy_errors: Vec::new(),\n             ambiguity_errors: Vec::new(),"}, {"sha": "7b83985ba673167370da3e40d6fb8dd6d9ba5e2f", "filename": "src/librustc_tsan/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Flibrustc_tsan%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Flibrustc_tsan%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_tsan%2FCargo.toml?ref=78e95bb7ac92f8f92654705a47cef652b6a0b259", "patch": "@@ -14,5 +14,6 @@ build_helper = { path = \"../build_helper\" }\n cmake = \"0.1.18\"\n \n [dependencies]\n+alloc = { path = \"../liballoc\" }\n alloc_system = { path = \"../liballoc_system\" }\n core = { path = \"../libcore\" }"}, {"sha": "3429e3bda0f6770bfcb49f84be94a35bc0e23312", "filename": "src/librustc_tsan/lib.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Flibrustc_tsan%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Flibrustc_tsan%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_tsan%2Flib.rs?ref=78e95bb7ac92f8f92654705a47cef652b6a0b259", "patch": "@@ -9,12 +9,19 @@\n // except according to those terms.\n \n #![sanitizer_runtime]\n-#![feature(sanitizer_runtime)]\n #![feature(alloc_system)]\n+#![feature(allocator_api)]\n+#![feature(global_allocator)]\n+#![feature(sanitizer_runtime)]\n #![feature(staged_api)]\n #![no_std]\n #![unstable(feature = \"sanitizer_runtime_lib\",\n             reason = \"internal implementation detail of sanitizers\",\n             issue = \"0\")]\n \n extern crate alloc_system;\n+\n+use alloc_system::System;\n+\n+#[global_allocator]\n+static ALLOC: System = System;"}, {"sha": "3da154e0689addb8a26ed863906e0fe3f4576646", "filename": "src/librustc_typeck/check_unused.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Flibrustc_typeck%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Flibrustc_typeck%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck_unused.rs?ref=78e95bb7ac92f8f92654705a47cef652b6a0b259", "patch": "@@ -72,4 +72,15 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n \n     let mut visitor = CheckVisitor { tcx, used_trait_imports };\n     tcx.hir.krate().visit_all_item_likes(&mut visitor);\n+\n+    for &(id, span) in &tcx.maybe_unused_extern_crates {\n+        let cnum = tcx.sess.cstore.extern_mod_stmt_cnum(id).unwrap().as_def_id();\n+        if !tcx.is_compiler_builtins(cnum)\n+            && !tcx.is_panic_runtime(cnum)\n+            && !tcx.has_global_allocator(cnum) {\n+                let lint = lint::builtin::UNUSED_EXTERN_CRATES;\n+                let msg = \"unused extern crate\";\n+                tcx.lint_node(lint, id, span, msg);\n+            }\n+    }\n }"}, {"sha": "b57067e35e9d95db0180cd983a5881eaeabb4cde", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=78e95bb7ac92f8f92654705a47cef652b6a0b259", "patch": "@@ -358,6 +358,7 @@ extern crate std_unicode;\n extern crate libc;\n \n // We always need an unwinder currently for backtraces\n+#[allow(unused_extern_crates)]\n extern crate unwind;\n \n // compiler-rt intrinsics"}, {"sha": "538753d86923eebcbd2e2e9871f696cb5e1d7394", "filename": "src/libstd/prelude/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Flibstd%2Fprelude%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Flibstd%2Fprelude%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude%2Fmod.rs?ref=78e95bb7ac92f8f92654705a47cef652b6a0b259", "patch": "@@ -23,6 +23,7 @@\n //! On a technical level, Rust inserts\n //!\n //! ```\n+//! # #[allow(unused_extern_crates)]\n //! extern crate std;\n //! ```\n //!"}, {"sha": "f44b9aa9615683f7e3b87c6e7e92efacdbbd9cff", "filename": "src/libstd/sys/unix/ext/fs.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs?ref=78e95bb7ac92f8f92654705a47cef652b6a0b259", "patch": "@@ -154,8 +154,6 @@ pub trait OpenOptionsExt {\n     /// # Examples\n     ///\n     /// ```no_run\n-    /// # #![feature(libc)]\n-    /// extern crate libc;\n     /// use std::fs::OpenOptions;\n     /// use std::os::unix::fs::OpenOptionsExt;\n     ///"}, {"sha": "1c4702402886d59b9553ebdf3beba6c0839e429f", "filename": "src/libsyntax_ext/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Flibsyntax_ext%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Flibsyntax_ext%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2FCargo.toml?ref=78e95bb7ac92f8f92654705a47cef652b6a0b259", "patch": "@@ -10,7 +10,6 @@ crate-type = [\"dylib\"]\n \n [dependencies]\n fmt_macros = { path = \"../libfmt_macros\" }\n-log = \"0.3\"\n proc_macro = { path = \"../libproc_macro\" }\n rustc_errors = { path = \"../librustc_errors\" }\n syntax = { path = \"../libsyntax\" }"}, {"sha": "42bbb4ae0cbee35a18aaa513d4655ea9e7751db5", "filename": "src/libsyntax_ext/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Flibsyntax_ext%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Flibsyntax_ext%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flib.rs?ref=78e95bb7ac92f8f92654705a47cef652b6a0b259", "patch": "@@ -18,7 +18,6 @@\n #![feature(proc_macro_internals)]\n \n extern crate fmt_macros;\n-extern crate log;\n #[macro_use]\n extern crate syntax;\n extern crate syntax_pos;"}, {"sha": "642eb28556408339c78e39f4b9ca107eaa04f13d", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=78e95bb7ac92f8f92654705a47cef652b6a0b259", "patch": "@@ -35,13 +35,14 @@\n #![deny(warnings)]\n \n #![feature(asm)]\n-#![feature(libc)]\n+#![cfg_attr(unix, feature(libc))]\n #![feature(set_stdio)]\n #![feature(panic_unwind)]\n #![feature(staged_api)]\n \n extern crate getopts;\n extern crate term;\n+#[cfg(unix)]\n extern crate libc;\n extern crate panic_unwind;\n "}, {"sha": "bb292e2e52a95418cf89881184473170d62aa8f1", "filename": "src/test/compile-fail-fulldeps/plugin-as-extern-crate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Ftest%2Fcompile-fail-fulldeps%2Fplugin-as-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Ftest%2Fcompile-fail-fulldeps%2Fplugin-as-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fplugin-as-extern-crate.rs?ref=78e95bb7ac92f8f92654705a47cef652b6a0b259", "patch": "@@ -15,6 +15,7 @@\n // libsyntax is not compiled for it.\n \n #![deny(plugin_as_library)]\n+#![allow(unused_extern_crates)]\n \n extern crate macro_crate_test; //~ ERROR compiler plugin used as an ordinary library\n "}, {"sha": "996a6b97cd9989c9a25cb654fe59fc3571d6225e", "filename": "src/test/compile-fail/E0254.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Ftest%2Fcompile-fail%2FE0254.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Ftest%2Fcompile-fail%2FE0254.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0254.rs?ref=78e95bb7ac92f8f92654705a47cef652b6a0b259", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #![feature(alloc)]\n+#![allow(unused_extern_crates)]\n \n extern crate alloc;\n //~^ NOTE previous import of the extern crate `alloc` here"}, {"sha": "c285c4d9e00c1b342d806e03a107cab1e9f5e5ea", "filename": "src/test/compile-fail/E0259.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Ftest%2Fcompile-fail%2FE0259.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Ftest%2Fcompile-fail%2FE0259.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0259.rs?ref=78e95bb7ac92f8f92654705a47cef652b6a0b259", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #![feature(alloc, libc)]\n+#![allow(unused_extern_crates)]\n \n extern crate alloc;\n //~^ NOTE previous import of the extern crate `alloc` here"}, {"sha": "ad8888e58f79ad4176b537850c836d2933d77b77", "filename": "src/test/compile-fail/E0260.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Ftest%2Fcompile-fail%2FE0260.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Ftest%2Fcompile-fail%2FE0260.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0260.rs?ref=78e95bb7ac92f8f92654705a47cef652b6a0b259", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #![feature(alloc)]\n+#![allow(unused_extern_crates)]\n \n extern crate alloc;\n //~^ NOTE previous import of the extern crate `alloc` here"}, {"sha": "fc4bca865c932e390fd8898f1ad3d3d1b93391d4", "filename": "src/test/compile-fail/auxiliary/lint_unused_extern_crate5.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Flint_unused_extern_crate5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Flint_unused_extern_crate5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Flint_unused_extern_crate5.rs?ref=78e95bb7ac92f8f92654705a47cef652b6a0b259", "patch": "@@ -0,0 +1,9 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms."}, {"sha": "bc9e2345f0ebb57a098ea525585f98da4d8ecd1b", "filename": "src/test/compile-fail/enable-unstable-lib-feature.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Ftest%2Fcompile-fail%2Fenable-unstable-lib-feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Ftest%2Fcompile-fail%2Fenable-unstable-lib-feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fenable-unstable-lib-feature.rs?ref=78e95bb7ac92f8f92654705a47cef652b6a0b259", "patch": "@@ -16,6 +16,7 @@\n #![deny(non_snake_case)] // To trigger a hard error\n \n // Shouldn't generate a warning about unstable features\n+#[allow(unused_extern_crates)]\n extern crate stability_cfg2;\n \n pub fn BOGUS() { } //~ ERROR"}, {"sha": "0f5aa24926beb9d3d24026f5a68ab9904458f85d", "filename": "src/test/compile-fail/issue-36881.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Ftest%2Fcompile-fail%2Fissue-36881.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Ftest%2Fcompile-fail%2Fissue-36881.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-36881.rs?ref=78e95bb7ac92f8f92654705a47cef652b6a0b259", "patch": "@@ -11,6 +11,7 @@\n // aux-build:issue-36881-aux.rs\n \n fn main() {\n+    #[allow(unused_extern_crates)]\n     extern crate issue_36881_aux;\n     use issue_36881_aux::Foo; //~ ERROR unresolved import\n }"}, {"sha": "9bc2c021904aad24dee2886f8a9cf2b8db797e5a", "filename": "src/test/compile-fail/lint-stability-deprecated.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Ftest%2Fcompile-fail%2Flint-stability-deprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Ftest%2Fcompile-fail%2Flint-stability-deprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-stability-deprecated.rs?ref=78e95bb7ac92f8f92654705a47cef652b6a0b259", "patch": "@@ -14,7 +14,7 @@\n // aux-build:stability_cfg2.rs\n \n #![warn(deprecated)]\n-#![allow(dead_code)]\n+#![allow(dead_code, unused_extern_crates)]\n #![feature(staged_api, test_feature, rustc_attrs)]\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "a3cfa1349831d6f477967879059369bd8556b44a", "filename": "src/test/compile-fail/lint-unused-extern-crate.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Ftest%2Fcompile-fail%2Flint-unused-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Ftest%2Fcompile-fail%2Flint-unused-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-extern-crate.rs?ref=78e95bb7ac92f8f92654705a47cef652b6a0b259", "patch": "@@ -12,12 +12,15 @@\n // aux-build:lint_unused_extern_crate2.rs\n // aux-build:lint_unused_extern_crate3.rs\n // aux-build:lint_unused_extern_crate4.rs\n+// aux-build:lint_unused_extern_crate5.rs\n \n #![deny(unused_extern_crates)]\n #![allow(unused_variables)]\n #![allow(deprecated)]\n \n-extern crate lint_unused_extern_crate4; //~ ERROR: unused extern crate\n+extern crate lint_unused_extern_crate5; //~ ERROR: unused extern crate\n+\n+pub extern crate lint_unused_extern_crate4; // no error, it is reexported\n \n extern crate lint_unused_extern_crate3; // no error, it is used\n "}, {"sha": "a2778a831306bbb7a5ec6c54c588788f0a7ee391", "filename": "src/test/compile-fail/macro-reexport-malformed-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-malformed-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-malformed-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-malformed-1.rs?ref=78e95bb7ac92f8f92654705a47cef652b6a0b259", "patch": "@@ -11,5 +11,6 @@\n #![no_std]\n #![feature(macro_reexport)]\n \n+#[allow(unused_extern_crates)]\n #[macro_reexport]  //~ ERROR bad macro reexport\n extern crate std;"}, {"sha": "c5af9e3799de77bc3d1e0b379dd85e344d394dc8", "filename": "src/test/compile-fail/macro-reexport-malformed-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-malformed-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-malformed-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-malformed-2.rs?ref=78e95bb7ac92f8f92654705a47cef652b6a0b259", "patch": "@@ -11,5 +11,6 @@\n #![no_std]\n #![feature(macro_reexport)]\n \n+#[allow(unused_extern_crates)]\n #[macro_reexport=\"foo\"]  //~ ERROR bad macro reexport\n extern crate std;"}, {"sha": "d72d1ee004ef77ce09923c960fa8fc0f1c0713d8", "filename": "src/test/compile-fail/macro-reexport-malformed-3.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-malformed-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-malformed-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-malformed-3.rs?ref=78e95bb7ac92f8f92654705a47cef652b6a0b259", "patch": "@@ -11,5 +11,6 @@\n #![no_std]\n #![feature(macro_reexport)]\n \n+#[allow(unused_extern_crates)]\n #[macro_reexport(foo=\"bar\")]  //~ ERROR bad macro reexport\n extern crate std;"}, {"sha": "a07cc834411732da96fd7dc9e87df1bc72ce64e2", "filename": "src/test/compile-fail/macro-use-bad-args-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Ftest%2Fcompile-fail%2Fmacro-use-bad-args-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Ftest%2Fcompile-fail%2Fmacro-use-bad-args-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-use-bad-args-1.rs?ref=78e95bb7ac92f8f92654705a47cef652b6a0b259", "patch": "@@ -10,5 +10,6 @@\n \n #![no_std]\n \n+#[allow(unused_extern_crates)]\n #[macro_use(foo(bar))]  //~ ERROR bad macro import\n extern crate std;"}, {"sha": "89004f16897742944693a75edb034c449fab82bb", "filename": "src/test/compile-fail/macro-use-bad-args-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Ftest%2Fcompile-fail%2Fmacro-use-bad-args-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Ftest%2Fcompile-fail%2Fmacro-use-bad-args-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-use-bad-args-2.rs?ref=78e95bb7ac92f8f92654705a47cef652b6a0b259", "patch": "@@ -10,5 +10,6 @@\n \n #![no_std]\n \n+#[allow(unused_extern_crates)]\n #[macro_use(foo=\"bar\")]  //~ ERROR bad macro import\n extern crate std;"}, {"sha": "49064853d21d6830190f7a46d4ffd8f000e31118", "filename": "src/test/compile-fail/no-std-inject.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Ftest%2Fcompile-fail%2Fno-std-inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Ftest%2Fcompile-fail%2Fno-std-inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-std-inject.rs?ref=78e95bb7ac92f8f92654705a47cef652b6a0b259", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #![no_std]\n+#![allow(unused_extern_crates)]\n \n extern crate core; //~ ERROR: the name `core` is defined multiple times\n extern crate std;"}, {"sha": "35695efe1a9b2293fd3d1e3aeed16a8edad06801", "filename": "src/test/compile-fail/placement-expr-unstable.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Ftest%2Fcompile-fail%2Fplacement-expr-unstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Ftest%2Fcompile-fail%2Fplacement-expr-unstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fplacement-expr-unstable.rs?ref=78e95bb7ac92f8f92654705a47cef652b6a0b259", "patch": "@@ -12,8 +12,6 @@\n \n #![feature(placement_in_syntax)]\n \n-extern crate core;\n-\n fn main() {\n     use std::boxed::HEAP; //~ ERROR use of unstable library feature\n "}, {"sha": "6a04a2c370430c47fdbf2f7c1ff3cca906a45da7", "filename": "src/test/compile-fail/resolve-conflict-extern-crate-vs-extern-crate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Ftest%2Fcompile-fail%2Fresolve-conflict-extern-crate-vs-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Ftest%2Fcompile-fail%2Fresolve-conflict-extern-crate-vs-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fresolve-conflict-extern-crate-vs-extern-crate.rs?ref=78e95bb7ac92f8f92654705a47cef652b6a0b259", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[allow(unused_extern_crates)]\n extern crate std;\n //~^ ERROR the name `std` is defined multiple times\n "}, {"sha": "a89fd802baf0c11f936c9672da05c4be557ad6b3", "filename": "src/test/compile-fail/resolve_self_super_hint.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Ftest%2Fcompile-fail%2Fresolve_self_super_hint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Ftest%2Fcompile-fail%2Fresolve_self_super_hint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fresolve_self_super_hint.rs?ref=78e95bb7ac92f8f92654705a47cef652b6a0b259", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #![feature(alloc)]\n+#![allow(unused_extern_crates)]\n \n mod a {\n     extern crate alloc;"}, {"sha": "e20d03478ec188ed66208e08ea95b4f69f17f9d0", "filename": "src/test/compile-fail/unused-attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Ftest%2Fcompile-fail%2Funused-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Ftest%2Fcompile-fail%2Funused-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funused-attr.rs?ref=78e95bb7ac92f8f92654705a47cef652b6a0b259", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n #![deny(unused_attributes)]\n-#![allow(dead_code, unused_imports)]\n+#![allow(dead_code, unused_imports, unused_extern_crates)]\n #![feature(custom_attribute)]\n \n #![foo] //~ ERROR unused attribute"}, {"sha": "3d3f2c05d742e5f907e951aa8849b03f0bc1a895", "filename": "src/tools/cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargo?ref=78e95bb7ac92f8f92654705a47cef652b6a0b259", "patch": "@@ -1 +1 @@\n-Subproject commit 7847f75bb6fc4fee6f511ca740bbe6872c08502b\n+Subproject commit 3d3f2c05d742e5f907e951aa8849b03f0bc1a895"}, {"sha": "15216f52d91fd1bdfda89a9691472f6298454cac", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78e95bb7ac92f8f92654705a47cef652b6a0b259/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=78e95bb7ac92f8f92654705a47cef652b6a0b259", "patch": "@@ -14,6 +14,7 @@\n \n #![deny(warnings)]\n \n+#[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n extern crate libc;\n extern crate test;\n extern crate getopts;"}]}