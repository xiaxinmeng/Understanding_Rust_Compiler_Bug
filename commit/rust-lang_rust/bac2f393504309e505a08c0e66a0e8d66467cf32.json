{"sha": "bac2f393504309e505a08c0e66a0e8d66467cf32", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhYzJmMzkzNTA0MzA5ZTUwNWEwOGMwZTY2YTBlOGQ2NjQ2N2NmMzI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-09-19T09:47:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-19T09:47:39Z"}, "message": "Rollup merge of #76310 - scottmcm:array-try_from-vec, r=dtolnay\n\nAdd `[T; N]: TryFrom<Vec<T>>` (insta-stable)\n\nThis is very similar to the [existing](https://doc.rust-lang.org/nightly/std/convert/trait.TryFrom.html#impl-TryFrom%3CBox%3C%5BT%5D%3E%3E) `Box<[T; N]>: TryFrom<Box<[T]>>`, but allows avoiding the `shrink_to_fit` if you have a vector and not a boxed slice.\n\nLike the slice equivalents of this, it fails if the length of the vector is not exactly `N`.\nThis uses `Vec<T>` as the `Error` type to return the input, like how the `Rc<[T]> -> Rc<[T; N]>` (and Arc) ones also reflect the input directly in the error type.\n\n```rust\n#[stable(feature = \"array_try_from_vec\", since = \"1.47.0\")]\nimpl<T, const N: usize> TryFrom<Vec<T>> for [T; N] {\n    type Error = Vec<T>;\n    fn try_from(mut vec: Vec<T>) -> Result<[T; N], Vec<T>>;\n}\n```\n\nInspired by this zulip thread: https://rust-lang.zulipchat.com/#narrow/stream/219381-t-libs/topic/APIs.20for.20getting.20stuff.20from.20a.20Vec.20by.20owned/near/209048103", "tree": {"sha": "e891b6d9314dd79c42bcf9bb8df92830756ad239", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e891b6d9314dd79c42bcf9bb8df92830756ad239"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bac2f393504309e505a08c0e66a0e8d66467cf32", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfZdO8CRBK7hj4Ov3rIwAAdHIIAG5slsa3A70YK86/0zWSzKCG\nBJQltK7Fgvs05gXf19C3nRwUk34Iwhx2QR+v/Aj1mo3czyzwlvlpvsBZ/1vBC8Nx\nxUQ6vT7+D0aUOFUHqkHBZ2k7nMbRBT/0ZfeHmmsNrzHrX4jCo2ZEuGBP2YXeLN5D\nlTswVECSjcBnSHzzPdWhevehuhUJbt+8Vi020sFemcdxoTzUPZtxjXBpciNmLogj\nNvWWvotbkD9lvWfsk9lBmBkNHPFMKgLbGgAVo1zCMG5hDTYZ27DpxTUB2kREV5+I\nfLYDIZOPICjEhoe42ako7DXwMFXsrrErnK7+LTinYPkrx2JKmTc5Lnz3Iz7H29A=\n=hkvB\n-----END PGP SIGNATURE-----\n", "payload": "tree e891b6d9314dd79c42bcf9bb8df92830756ad239\nparent 3ebba83a47ab60cc478e8085be670c5c52d55cb7\nparent 3d89ee9586354e736cfe4a472d8aaa507d10f77c\nauthor Ralf Jung <post@ralfj.de> 1600508859 +0200\ncommitter GitHub <noreply@github.com> 1600508859 +0200\n\nRollup merge of #76310 - scottmcm:array-try_from-vec, r=dtolnay\n\nAdd `[T; N]: TryFrom<Vec<T>>` (insta-stable)\n\nThis is very similar to the [existing](https://doc.rust-lang.org/nightly/std/convert/trait.TryFrom.html#impl-TryFrom%3CBox%3C%5BT%5D%3E%3E) `Box<[T; N]>: TryFrom<Box<[T]>>`, but allows avoiding the `shrink_to_fit` if you have a vector and not a boxed slice.\n\nLike the slice equivalents of this, it fails if the length of the vector is not exactly `N`.\nThis uses `Vec<T>` as the `Error` type to return the input, like how the `Rc<[T]> -> Rc<[T; N]>` (and Arc) ones also reflect the input directly in the error type.\n\n```rust\n#[stable(feature = \"array_try_from_vec\", since = \"1.47.0\")]\nimpl<T, const N: usize> TryFrom<Vec<T>> for [T; N] {\n    type Error = Vec<T>;\n    fn try_from(mut vec: Vec<T>) -> Result<[T; N], Vec<T>>;\n}\n```\n\nInspired by this zulip thread: https://rust-lang.zulipchat.com/#narrow/stream/219381-t-libs/topic/APIs.20for.20getting.20stuff.20from.20a.20Vec.20by.20owned/near/209048103\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bac2f393504309e505a08c0e66a0e8d66467cf32", "html_url": "https://github.com/rust-lang/rust/commit/bac2f393504309e505a08c0e66a0e8d66467cf32", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bac2f393504309e505a08c0e66a0e8d66467cf32/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ebba83a47ab60cc478e8085be670c5c52d55cb7", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ebba83a47ab60cc478e8085be670c5c52d55cb7", "html_url": "https://github.com/rust-lang/rust/commit/3ebba83a47ab60cc478e8085be670c5c52d55cb7"}, {"sha": "3d89ee9586354e736cfe4a472d8aaa507d10f77c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d89ee9586354e736cfe4a472d8aaa507d10f77c", "html_url": "https://github.com/rust-lang/rust/commit/3d89ee9586354e736cfe4a472d8aaa507d10f77c"}], "stats": {"total": 52, "additions": 52, "deletions": 0}, "files": [{"sha": "8c0b6af54829b4cbfc1a224bbd51b94cfd03fc20", "filename": "library/alloc/src/vec.rs", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/bac2f393504309e505a08c0e66a0e8d66467cf32/library%2Falloc%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bac2f393504309e505a08c0e66a0e8d66467cf32/library%2Falloc%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec.rs?ref=bac2f393504309e505a08c0e66a0e8d66467cf32", "patch": "@@ -55,6 +55,7 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use core::cmp::{self, Ordering};\n+use core::convert::TryFrom;\n use core::fmt;\n use core::hash::{Hash, Hasher};\n use core::intrinsics::{arith_offset, assume};\n@@ -2754,6 +2755,57 @@ impl From<&str> for Vec<u8> {\n     }\n }\n \n+#[stable(feature = \"array_try_from_vec\", since = \"1.48.0\")]\n+impl<T, const N: usize> TryFrom<Vec<T>> for [T; N] {\n+    type Error = Vec<T>;\n+\n+    /// Gets the entire contents of the `Vec<T>` as an array,\n+    /// if its size exactly matches that of the requested array.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::convert::TryInto;\n+    /// assert_eq!(vec![1, 2, 3].try_into(), Ok([1, 2, 3]));\n+    /// assert_eq!(<Vec<i32>>::new().try_into(), Ok([]));\n+    /// ```\n+    ///\n+    /// If the length doesn't match, the input comes back in `Err`:\n+    /// ```\n+    /// use std::convert::TryInto;\n+    /// let r: Result<[i32; 4], _> = (0..10).collect::<Vec<_>>().try_into();\n+    /// assert_eq!(r, Err(vec![0, 1, 2, 3, 4, 5, 6, 7, 8, 9]));\n+    /// ```\n+    ///\n+    /// If you're fine with just getting a prefix of the `Vec<T>`,\n+    /// you can call [`.truncate(N)`](Vec::truncate) first.\n+    /// ```\n+    /// use std::convert::TryInto;\n+    /// let mut v = String::from(\"hello world\").into_bytes();\n+    /// v.sort();\n+    /// v.truncate(2);\n+    /// let [a, b]: [_; 2] = v.try_into().unwrap();\n+    /// assert_eq!(a, b' ');\n+    /// assert_eq!(b, b'd');\n+    /// ```\n+    fn try_from(mut vec: Vec<T>) -> Result<[T; N], Vec<T>> {\n+        if vec.len() != N {\n+            return Err(vec);\n+        }\n+\n+        // SAFETY: `.set_len(0)` is always sound.\n+        unsafe { vec.set_len(0) };\n+\n+        // SAFETY: A `Vec`'s pointer is always aligned properly, and\n+        // the alignment the array needs is the same as the items.\n+        // We checked earlier that we have sufficient items.\n+        // The items will not double-drop as the `set_len`\n+        // tells the `Vec` not to also drop them.\n+        let array = unsafe { ptr::read(vec.as_ptr() as *const [T; N]) };\n+        Ok(array)\n+    }\n+}\n+\n ////////////////////////////////////////////////////////////////////////////////\n // Clone-on-write\n ////////////////////////////////////////////////////////////////////////////////"}]}