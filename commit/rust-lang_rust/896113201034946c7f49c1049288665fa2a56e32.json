{"sha": "896113201034946c7f49c1049288665fa2a56e32", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5NjExMzIwMTAzNDk0NmM3ZjQ5YzEwNDkyODg2NjVmYTJhNTZlMzI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-31T09:08:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-31T09:08:33Z"}, "message": "Auto merge of #52850 - SimonSapin:unstablize, r=alexcrichton\n\nRevert \"Stabilize to_bytes and from_bytes for integers.\"\n\nThis reverts commit c8f9b84b393915a48253e3edc862c15a9b7152a7 / PR https://github.com/rust-lang/rust/pull/51835, and reopens the tracking issue https://github.com/rust-lang/rust/issues/49792.\n\nThese methods were stabilized in Rust 1.29, which is still in Nightly as of this writing. So my understanding is that it is still time to change our minds. Given the ongoing discussion in https://github.com/rust-lang/rust/pull/51919 about possibly renaming these APIs and since 1.29 goes to beta soon, I\u2019d like to revert this stabilization for now until a decision is made in that PR. It\u2019s possible that a decision will be made in time for 1.29, but there is no urgency. At most I expect this functionality to make it into 1.30.", "tree": {"sha": "e5f4541018e5345bcfe4a42f09aad34e713d6c24", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5f4541018e5345bcfe4a42f09aad34e713d6c24"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/896113201034946c7f49c1049288665fa2a56e32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/896113201034946c7f49c1049288665fa2a56e32", "html_url": "https://github.com/rust-lang/rust/commit/896113201034946c7f49c1049288665fa2a56e32", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/896113201034946c7f49c1049288665fa2a56e32/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2652f6c1da28af0cdc22e8112b7d3b6b74ad9d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2652f6c1da28af0cdc22e8112b7d3b6b74ad9d7", "html_url": "https://github.com/rust-lang/rust/commit/d2652f6c1da28af0cdc22e8112b7d3b6b74ad9d7"}, {"sha": "f162438fb3910b3b68f1b0aa664a3a89df1383de", "url": "https://api.github.com/repos/rust-lang/rust/commits/f162438fb3910b3b68f1b0aa664a3a89df1383de", "html_url": "https://github.com/rust-lang/rust/commit/f162438fb3910b3b68f1b0aa664a3a89df1383de"}], "stats": {"total": 16, "additions": 12, "deletions": 4}, "files": [{"sha": "3bc2861460e1455024c9e1dc06c58d3b8c2de2a7", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/896113201034946c7f49c1049288665fa2a56e32/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/896113201034946c7f49c1049288665fa2a56e32/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=896113201034946c7f49c1049288665fa2a56e32", "patch": "@@ -1903,10 +1903,12 @@ $EndFeature, \"\n         /// # Examples\n         ///\n         /// ```\n+        /// #![feature(int_to_from_bytes)]\n+        ///\n         /// let bytes = i32::min_value().to_be().to_bytes();\n         /// assert_eq!(bytes, [0x80, 0, 0, 0]);\n         /// ```\n-        #[stable(feature = \"int_to_from_bytes\", since = \"1.29.0\")]\n+        #[unstable(feature = \"int_to_from_bytes\", issue = \"49792\")]\n         #[inline]\n         pub fn to_bytes(self) -> [u8; mem::size_of::<Self>()] {\n             unsafe { mem::transmute(self) }\n@@ -1923,10 +1925,12 @@ $EndFeature, \"\n         /// # Examples\n         ///\n         /// ```\n+        /// #![feature(int_to_from_bytes)]\n+        ///\n         /// let int = i32::from_be(i32::from_bytes([0x80, 0, 0, 0]));\n         /// assert_eq!(int, i32::min_value());\n         /// ```\n-        #[stable(feature = \"int_to_from_bytes\", since = \"1.29.0\")]\n+        #[unstable(feature = \"int_to_from_bytes\", issue = \"49792\")]\n         #[inline]\n         pub fn from_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n             unsafe { mem::transmute(bytes) }\n@@ -3508,10 +3512,12 @@ $EndFeature, \"\n         /// # Examples\n         ///\n         /// ```\n+        /// #![feature(int_to_from_bytes)]\n+        ///\n         /// let bytes = 0x1234_5678_u32.to_be().to_bytes();\n         /// assert_eq!(bytes, [0x12, 0x34, 0x56, 0x78]);\n         /// ```\n-        #[stable(feature = \"int_to_from_bytes\", since = \"1.29.0\")]\n+        #[unstable(feature = \"int_to_from_bytes\", issue = \"49792\")]\n         #[inline]\n         pub fn to_bytes(self) -> [u8; mem::size_of::<Self>()] {\n             unsafe { mem::transmute(self) }\n@@ -3528,10 +3534,12 @@ $EndFeature, \"\n         /// # Examples\n         ///\n         /// ```\n+        /// #![feature(int_to_from_bytes)]\n+        ///\n         /// let int = u32::from_be(u32::from_bytes([0x12, 0x34, 0x56, 0x78]));\n         /// assert_eq!(int, 0x1234_5678_u32);\n         /// ```\n-        #[stable(feature = \"int_to_from_bytes\", since = \"1.29.0\")]\n+        #[unstable(feature = \"int_to_from_bytes\", issue = \"49792\")]\n         #[inline]\n         pub fn from_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n             unsafe { mem::transmute(bytes) }"}]}