{"sha": "c1b2fe31b70e2b7293b3aea7cfb8b1ed084b9334", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxYjJmZTMxYjcwZTJiNzI5M2IzYWVhN2NmYjhiMWVkMDg0YjkzMzQ=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-02-24T19:52:47Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-02-24T19:52:47Z"}, "message": "Use `span_suggestion` in `len_zero`", "tree": {"sha": "3cf62d9de6b0eba1fddf9687ec1b8418c1a4da55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3cf62d9de6b0eba1fddf9687ec1b8418c1a4da55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1b2fe31b70e2b7293b3aea7cfb8b1ed084b9334", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1b2fe31b70e2b7293b3aea7cfb8b1ed084b9334", "html_url": "https://github.com/rust-lang/rust/commit/c1b2fe31b70e2b7293b3aea7cfb8b1ed084b9334", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1b2fe31b70e2b7293b3aea7cfb8b1ed084b9334/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d299b5d4d9c6d66cfe7f9ba081a1de646b6dc310", "url": "https://api.github.com/repos/rust-lang/rust/commits/d299b5d4d9c6d66cfe7f9ba081a1de646b6dc310", "html_url": "https://github.com/rust-lang/rust/commit/d299b5d4d9c6d66cfe7f9ba081a1de646b6dc310"}], "stats": {"total": 45, "additions": 32, "deletions": 13}, "files": [{"sha": "f99ea1e6fd5e84d15933aa993319dde7ff86b8ec", "filename": "src/len_zero.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c1b2fe31b70e2b7293b3aea7cfb8b1ed084b9334/src%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1b2fe31b70e2b7293b3aea7cfb8b1ed084b9334/src%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flen_zero.rs?ref=c1b2fe31b70e2b7293b3aea7cfb8b1ed084b9334", "patch": "@@ -8,7 +8,7 @@ use rustc::middle::ty::{self, MethodTraitItemId, ImplOrTraitItemId};\n \n use syntax::ast::{Lit, LitKind};\n \n-use utils::{get_item_name, snippet, span_lint, walk_ptrs_ty};\n+use utils::{get_item_name, snippet, span_lint, span_lint_and_then, walk_ptrs_ty};\n \n /// **What it does:** This lint checks for getting the length of something via `.len()` just to compare to zero, and suggests using `.is_empty()` where applicable.\n ///\n@@ -80,7 +80,6 @@ fn check_trait_items(cx: &LateContext, item: &Item, trait_items: &[TraitItem]) {\n     }\n \n     if !trait_items.iter().any(|i| is_named_self(i, \"is_empty\")) {\n-        // span_lint(cx, LEN_WITHOUT_IS_EMPTY, item.span, &format!(\"trait {}\", item.ident));\n         for i in trait_items {\n             if is_named_self(i, \"len\") {\n                 span_lint(cx,\n@@ -151,12 +150,17 @@ fn check_cmp(cx: &LateContext, span: Span, left: &Expr, right: &Expr, op: &str)\n fn check_len_zero(cx: &LateContext, span: Span, name: &Name, args: &[P<Expr>], lit: &Lit, op: &str) {\n     if let Spanned{node: LitKind::Int(0, _), ..} = *lit {\n         if name.as_str() == \"len\" && args.len() == 1 && has_is_empty(cx, &args[0]) {\n-            span_lint(cx,\n-                      LEN_ZERO,\n-                      span,\n-                      &format!(\"consider replacing the len comparison with `{}{}.is_empty()`\",\n-                               op,\n-                               snippet(cx, args[0].span, \"_\")));\n+            span_lint_and_then(cx,\n+                               LEN_ZERO,\n+                               span,\n+                               \"length comparison to zero\",\n+                               |db| {\n+                                   db.span_suggestion(span,\n+                                                      \"consider using `is_empty`\",\n+                                                       format!(\"{}{}.is_empty()\",\n+                                                               op,\n+                                                               snippet(cx, args[0].span, \"_\")));\n+                               });\n         }\n     }\n }"}, {"sha": "9814a1c2d7d1d2ce78729ddf50350a007ae7dff8", "filename": "tests/compile-fail/len_zero.rs", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c1b2fe31b70e2b7293b3aea7cfb8b1ed084b9334/tests%2Fcompile-fail%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1b2fe31b70e2b7293b3aea7cfb8b1ed084b9334/tests%2Fcompile-fail%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Flen_zero.rs?ref=c1b2fe31b70e2b7293b3aea7cfb8b1ed084b9334", "patch": "@@ -69,7 +69,10 @@ impl HasWrongIsEmpty {\n #[deny(len_zero)]\n fn main() {\n     let x = [1, 2];\n-    if x.len() == 0 { //~ERROR consider replacing the len comparison\n+    if x.len() == 0 {\n+        //~^ERROR length comparison to zero\n+        //~|HELP consider using `is_empty`\n+        //~|SUGGESTION x.is_empty()\n         println!(\"This should not happen!\");\n     }\n \n@@ -84,19 +87,31 @@ fn main() {\n     }\n \n     let hie = HasIsEmpty;\n-    if hie.len() == 0 { //~ERROR consider replacing the len comparison\n+    if hie.len() == 0 {\n+        //~^ERROR length comparison to zero\n+        //~|HELP consider using `is_empty`\n+        //~|SUGGESTION hie.is_empty()\n         println!(\"Or this!\");\n     }\n-    if hie.len() != 0 { //~ERROR consider replacing the len comparison\n+    if hie.len() != 0 {\n+        //~^ERROR length comparison to zero\n+        //~|HELP consider using `is_empty`\n+        //~|SUGGESTION !hie.is_empty()\n         println!(\"Or this!\");\n     }\n-    if hie.len() > 0 { //~ERROR consider replacing the len comparison\n+    if hie.len() > 0 {\n+        //~^ERROR length comparison to zero\n+        //~|HELP consider using `is_empty`\n+        //~|SUGGESTION !hie.is_empty()\n         println!(\"Or this!\");\n     }\n     assert!(!hie.is_empty());\n \n     let wie : &WithIsEmpty = &Wither;\n-    if wie.len() == 0 { //~ERROR consider replacing the len comparison\n+    if wie.len() == 0 {\n+        //~^ERROR length comparison to zero\n+        //~|HELP consider using `is_empty`\n+        //~|SUGGESTION wie.is_empty()\n         println!(\"Or this!\");\n     }\n     assert!(!wie.is_empty());"}]}