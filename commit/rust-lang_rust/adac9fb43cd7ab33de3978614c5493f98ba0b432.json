{"sha": "adac9fb43cd7ab33de3978614c5493f98ba0b432", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkYWM5ZmI0M2NkN2FiMzNkZTM5Nzg2MTRjNTQ5M2Y5OGJhMGI0MzI=", "commit": {"author": {"name": "Bryce Van Dyk", "email": "bryce@vandyk.net.nz", "date": "2017-10-23T02:17:30Z"}, "committer": {"name": "Bryce Van Dyk", "email": "bryce@vandyk.net.nz", "date": "2017-10-25T09:18:19Z"}, "message": "Use stderr for various errors and warnings.\n\nAdjusts several error and warning report cases to output using eprintln!\ninstead of println! so that messages are sent to stderr.", "tree": {"sha": "a021b65746384558d3566b8053897b14cc560c4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a021b65746384558d3566b8053897b14cc560c4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/adac9fb43cd7ab33de3978614c5493f98ba0b432", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/adac9fb43cd7ab33de3978614c5493f98ba0b432", "html_url": "https://github.com/rust-lang/rust/commit/adac9fb43cd7ab33de3978614c5493f98ba0b432", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/adac9fb43cd7ab33de3978614c5493f98ba0b432/comments", "author": {"login": "SingingTree", "id": 3637370, "node_id": "MDQ6VXNlcjM2MzczNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/3637370?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SingingTree", "html_url": "https://github.com/SingingTree", "followers_url": "https://api.github.com/users/SingingTree/followers", "following_url": "https://api.github.com/users/SingingTree/following{/other_user}", "gists_url": "https://api.github.com/users/SingingTree/gists{/gist_id}", "starred_url": "https://api.github.com/users/SingingTree/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SingingTree/subscriptions", "organizations_url": "https://api.github.com/users/SingingTree/orgs", "repos_url": "https://api.github.com/users/SingingTree/repos", "events_url": "https://api.github.com/users/SingingTree/events{/privacy}", "received_events_url": "https://api.github.com/users/SingingTree/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SingingTree", "id": 3637370, "node_id": "MDQ6VXNlcjM2MzczNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/3637370?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SingingTree", "html_url": "https://github.com/SingingTree", "followers_url": "https://api.github.com/users/SingingTree/followers", "following_url": "https://api.github.com/users/SingingTree/following{/other_user}", "gists_url": "https://api.github.com/users/SingingTree/gists{/gist_id}", "starred_url": "https://api.github.com/users/SingingTree/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SingingTree/subscriptions", "organizations_url": "https://api.github.com/users/SingingTree/orgs", "repos_url": "https://api.github.com/users/SingingTree/repos", "events_url": "https://api.github.com/users/SingingTree/events{/privacy}", "received_events_url": "https://api.github.com/users/SingingTree/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "560b0541470345277a6b0d7c721ae91c0bfdd4ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/560b0541470345277a6b0d7c721ae91c0bfdd4ff", "html_url": "https://github.com/rust-lang/rust/commit/560b0541470345277a6b0d7c721ae91c0bfdd4ff"}], "stats": {"total": 72, "additions": 46, "deletions": 26}, "files": [{"sha": "826476bed3ee83019be7003e42031d8727bfe144", "filename": "src/bin/cargo-fmt.rs", "status": "modified", "additions": 22, "deletions": 12, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/adac9fb43cd7ab33de3978614c5493f98ba0b432/src%2Fbin%2Fcargo-fmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adac9fb43cd7ab33de3978614c5493f98ba0b432/src%2Fbin%2Fcargo-fmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcargo-fmt.rs?ref=adac9fb43cd7ab33de3978614c5493f98ba0b432", "patch": "@@ -55,14 +55,14 @@ fn execute() -> i32 {\n         .take_while(|a| a != \"--\")\n         .find(|a| !a.starts_with('-'))\n     {\n-        print_usage(&opts, &format!(\"Invalid argument: `{}`.\", arg));\n+        print_usage_to_stderr(&opts, &format!(\"Invalid argument: `{}`.\", arg));\n         return failure;\n     }\n \n     let matches = match opts.parse(env::args().skip(1).take_while(|a| a != \"--\")) {\n         Ok(m) => m,\n         Err(e) => {\n-            print_usage(&opts, &e.to_string());\n+            print_usage_to_stderr(&opts, &e.to_string());\n             return failure;\n         }\n     };\n@@ -72,21 +72,21 @@ fn execute() -> i32 {\n         (false, true) => Verbosity::Quiet,\n         (true, false) => Verbosity::Verbose,\n         (true, true) => {\n-            print_usage(&opts, \"quiet mode and verbose mode are not compatible\");\n+            print_usage_to_stderr(&opts, \"quiet mode and verbose mode are not compatible\");\n             return failure;\n         }\n     };\n \n     if matches.opt_present(\"h\") {\n-        print_usage(&opts, \"\");\n+        print_usage_to_stdout(&opts, \"\");\n         return success;\n     }\n \n     let workspace_hitlist = WorkspaceHitlist::from_matches(&matches);\n \n     match format_crate(verbosity, &workspace_hitlist) {\n         Err(e) => {\n-            print_usage(&opts, &e.to_string());\n+            print_usage_to_stderr(&opts, &e.to_string());\n             failure\n         }\n         Ok(status) => if status.success() {\n@@ -97,13 +97,23 @@ fn execute() -> i32 {\n     }\n }\n \n-fn print_usage(opts: &Options, reason: &str) {\n-    let msg = format!(\"{}\\nusage: cargo fmt [options]\", reason);\n-    println!(\n-        \"{}\\nThis utility formats all bin and lib files of the current crate using rustfmt. \\\n-         Arguments after `--` are passed to rustfmt.\",\n-        opts.usage(&msg)\n-    );\n+macro_rules! print_usage {\n+    ($print:ident, $opts:ident, $reason:expr) => ({\n+        let msg = format!(\"{}\\nusage: cargo fmt [options]\", $reason);\n+        $print!(\n+            \"{}\\nThis utility formats all bin and lib files of the current crate using rustfmt. \\\n+             Arguments after `--` are passed to rustfmt.\",\n+            $opts.usage(&msg)\n+        );\n+    })\n+}\n+\n+fn print_usage_to_stdout(opts: &Options, reason: &str) {\n+    print_usage!(println, opts, reason);\n+}\n+\n+fn print_usage_to_stderr(opts: &Options, reason: &str) {\n+    print_usage!(eprintln, opts, reason);\n }\n \n #[derive(Debug, Clone, Copy, PartialEq)]"}, {"sha": "541759b17822406e60febafded2fc3c5f979e269", "filename": "src/bin/rustfmt.rs", "status": "modified", "additions": 23, "deletions": 13, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/adac9fb43cd7ab33de3978614c5493f98ba0b432/src%2Fbin%2Frustfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adac9fb43cd7ab33de3978614c5493f98ba0b432/src%2Fbin%2Frustfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Frustfmt.rs?ref=adac9fb43cd7ab33de3978614c5493f98ba0b432", "patch": "@@ -161,7 +161,7 @@ fn execute(opts: &Options) -> FmtResult<Summary> {\n \n     match determine_operation(&matches)? {\n         Operation::Help => {\n-            print_usage(opts, \"\");\n+            print_usage_to_stdout(opts, \"\");\n             Summary::print_exit_codes();\n             Ok(Summary::default())\n         }\n@@ -196,7 +196,7 @@ fn execute(opts: &Options) -> FmtResult<Summary> {\n                 config.set().file_lines(file_lines.parse()?);\n                 for f in config.file_lines().files() {\n                     if f != \"stdin\" {\n-                        println!(\"Warning: Extra file listed in file_lines option '{}'\", f);\n+                        eprintln!(\"Warning: Extra file listed in file_lines option '{}'\", f);\n                     }\n                 }\n             }\n@@ -212,7 +212,7 @@ fn execute(opts: &Options) -> FmtResult<Summary> {\n \n             for f in options.file_lines.files() {\n                 if !files.contains(&PathBuf::from(f)) {\n-                    println!(\"Warning: Extra file listed in file_lines option '{}'\", f);\n+                    eprintln!(\"Warning: Extra file listed in file_lines option '{}'\", f);\n                 }\n             }\n \n@@ -231,10 +231,10 @@ fn execute(opts: &Options) -> FmtResult<Summary> {\n             let mut error_summary = Summary::default();\n             for file in files {\n                 if !file.exists() {\n-                    println!(\"Error: file `{}` does not exist\", file.to_str().unwrap());\n+                    eprintln!(\"Error: file `{}` does not exist\", file.to_str().unwrap());\n                     error_summary.add_operational_error();\n                 } else if file.is_dir() {\n-                    println!(\"Error: `{}` is a directory\", file.to_str().unwrap());\n+                    eprintln!(\"Error: `{}` is a directory\", file.to_str().unwrap());\n                     error_summary.add_operational_error();\n                 } else {\n                     // Check the file directory if the config-path could not be read or not provided\n@@ -293,7 +293,7 @@ fn main() {\n             }\n         }\n         Err(e) => {\n-            print_usage(&opts, &e.to_string());\n+            print_usage_to_stderr(&opts, &e.to_string());\n             1\n         }\n     };\n@@ -307,13 +307,23 @@ fn main() {\n     std::process::exit(exit_code);\n }\n \n-fn print_usage(opts: &Options, reason: &str) {\n-    let reason = format!(\n-        \"{}\\n\\nusage: {} [options] <file>...\",\n-        reason,\n-        env::args_os().next().unwrap().to_string_lossy()\n-    );\n-    println!(\"{}\", opts.usage(&reason));\n+macro_rules! print_usage {\n+    ($print:ident, $opts:ident, $reason:expr) => ({\n+        let msg = format!(\n+            \"{}\\n\\nusage: {} [options] <file>...\",\n+            $reason,\n+            env::args_os().next().unwrap().to_string_lossy()\n+        );\n+        $print!(\"{}\", $opts.usage(&msg));\n+    })\n+}\n+\n+fn print_usage_to_stdout(opts: &Options, reason: &str) {\n+    print_usage!(println, opts, reason);\n+}\n+\n+fn print_usage_to_stderr(opts: &Options, reason: &str) {\n+    print_usage!(eprintln, opts, reason);\n }\n \n fn print_version() {"}, {"sha": "be44083e3d5ce602273dd2ddc6ced4d84d794d17", "filename": "src/visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adac9fb43cd7ab33de3978614c5493f98ba0b432/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adac9fb43cd7ab33de3978614c5493f98ba0b432/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=adac9fb43cd7ab33de3978614c5493f98ba0b432", "patch": "@@ -601,7 +601,7 @@ impl<'a> FmtVisitor<'a> {\n         match self.codemap.span_to_snippet(span) {\n             Ok(s) => s,\n             Err(_) => {\n-                println!(\n+                eprintln!(\n                     \"Couldn't make snippet for span {:?}->{:?}\",\n                     self.codemap.lookup_char_pos(span.lo()),\n                     self.codemap.lookup_char_pos(span.hi())"}]}