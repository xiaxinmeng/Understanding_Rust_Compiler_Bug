{"sha": "8142d1f606dc2e52b1d2b8992671e2bd73379f28", "node_id": "C_kwDOAAsO6NoAKDgxNDJkMWY2MDZkYzJlNTJiMWQyYjg5OTI2NzFlMmJkNzMzNzlmMjg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-31T06:55:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-31T06:55:11Z"}, "message": "Auto merge of #13445 - notJoon:modify-dead-links, r=lnicola\n\nfix) update broken links in guide.md\n\nHi, I Just fixed some broken links in `guide.md`.\n\nIn most cases, it is not connected by an old version (expecially `guide-2019-01`) of the link, so I made some modifications.\n\nThanks for your time :)", "tree": {"sha": "951b073f93bac7ae2f2628577ee2c041f398aef8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/951b073f93bac7ae2f2628577ee2c041f398aef8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8142d1f606dc2e52b1d2b8992671e2bd73379f28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8142d1f606dc2e52b1d2b8992671e2bd73379f28", "html_url": "https://github.com/rust-lang/rust/commit/8142d1f606dc2e52b1d2b8992671e2bd73379f28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8142d1f606dc2e52b1d2b8992671e2bd73379f28/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba28e19b7838e3ad4223ae82d074dc3950ef1548", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba28e19b7838e3ad4223ae82d074dc3950ef1548", "html_url": "https://github.com/rust-lang/rust/commit/ba28e19b7838e3ad4223ae82d074dc3950ef1548"}, {"sha": "8ebc96a8a98f9e88259400f02ce3fabe1f526570", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ebc96a8a98f9e88259400f02ce3fabe1f526570", "html_url": "https://github.com/rust-lang/rust/commit/8ebc96a8a98f9e88259400f02ce3fabe1f526570"}], "stats": {"total": 50, "additions": 25, "deletions": 25}, "files": [{"sha": "56a68ef04379036f0dd95701cc1407d3ba318b58", "filename": "docs/dev/guide.md", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/8142d1f606dc2e52b1d2b8992671e2bd73379f28/docs%2Fdev%2Fguide.md", "raw_url": "https://github.com/rust-lang/rust/raw/8142d1f606dc2e52b1d2b8992671e2bd73379f28/docs%2Fdev%2Fguide.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Fguide.md?ref=8142d1f606dc2e52b1d2b8992671e2bd73379f28", "patch": "@@ -338,7 +338,7 @@ The algorithm for building a tree of modules is to start with a crate root\n declarations and recursively process child modules. This is handled by the\n [`module_tree_query`], with two slight variations.\n \n-[`module_tree_query`]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/hir/src/module_tree.rs#L116-L123\n+[`module_tree_query`]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/ra_hir/src/module_tree.rs#L115-L133\n \n First, rust-analyzer builds a module tree for all crates in a source root\n simultaneously. The main reason for this is historical (`module_tree` predates\n@@ -361,7 +361,7 @@ the same, we don't have to re-execute [`module_tree_query`]. In fact, we only\n need to re-execute it when we add/remove new files or when we change mod\n declarations.\n \n-[`submodules_query`]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/hir/src/module_tree.rs#L41\n+[`submodules_query`]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/ra_hir/src/module_tree.rs#L41\n \n We store the resulting modules in a `Vec`-based indexed arena. The indices in\n the arena becomes module IDs. And this brings us to the next topic:\n@@ -389,8 +389,8 @@ integers which can \"intern\" a location and return an integer ID back. The salsa\n database we use includes a couple of [interners]. How to \"garbage collect\"\n unused locations is an open question.\n \n-[`LocationInterner`]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/base_db/src/loc2id.rs#L65-L71\n-[interners]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/hir/src/db.rs#L22-L23\n+[`LocationInterner`]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/ra_db/src/loc2id.rs#L65-L71\n+[interners]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/ra_hir/src/db.rs#L22-L23\n \n For example, we use `LocationInterner` to assign IDs to definitions of functions,\n structs, enums, etc. The location, [`DefLoc`] contains two bits of information:\n@@ -404,7 +404,7 @@ using offsets, text ranges or syntax trees as keys and values for queries. What\n we do instead is we store \"index\" of the item among all of the items of a file\n (so, a positional based ID, but localized to a single file).\n \n-[`DefLoc`]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/hir/src/ids.rs#L127-L139\n+[`DefLoc`]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/ra_hir/src/ids.rs#L129-L139\n \n One thing we've glossed over for the time being is support for macros. We have\n only proof of concept handling of macros at the moment, but they are extremely\n@@ -437,7 +437,7 @@ terms of `HirFileId`! This does not recur infinitely though: any chain of\n `HirFileId`s bottoms out in `HirFileId::FileId`, that is, some source file\n actually written by the user.\n \n-[`HirFileId`]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/hir/src/ids.rs#L18-L125\n+[`HirFileId`]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/ra_hir/src/ids.rs#L31-L93\n \n Now that we understand how to identify a definition, in a source or in a\n macro-generated file, we can discuss name resolution a bit.\n@@ -451,14 +451,13 @@ each module into a position-independent representation which does not change if\n we modify bodies of the items. After that we [loop] resolving all imports until\n we've reached a fixed point.\n \n-[lower]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/hir/src/nameres/lower.rs#L113-L117\n-[loop]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/hir/src/nameres.rs#L186-L196\n-\n+[lower]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/ra_hir/src/nameres/lower.rs#L113-L147\n+[loop]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/ra_hir/src/nameres.rs#L186-L196\n And, given all our preparation with IDs and a position-independent representation,\n it is satisfying to [test] that typing inside function body does not invalidate\n name resolution results.\n \n-[test]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/hir/src/nameres/tests.rs#L376\n+[test]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/ra_hir/src/nameres/tests.rs#L376\n \n An interesting fact about name resolution is that it \"erases\" all of the\n intermediate paths from the imports: in the end, we know which items are defined\n@@ -493,10 +492,10 @@ there's an intermediate [projection query] which returns only the first\n position-independent part of the lowering. The result of this query is stable.\n Naturally, name resolution [uses] this stable projection query.\n \n-[imports]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/hir/src/nameres/lower.rs#L52-L59\n-[`SourceMap`]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/hir/src/nameres/lower.rs#L52-L59\n-[projection query]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/hir/src/nameres/lower.rs#L97-L103\n-[uses]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/hir/src/query_definitions.rs#L49\n+[imports]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/ra_hir/src/nameres/lower.rs#L52-L59\n+[`SourceMap`]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/ra_hir/src/nameres/lower.rs#L52-L59\n+[projection query]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/ra_hir/src/nameres/lower.rs#L97-L103\n+[uses]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/ra_hir/src/query_definitions.rs#L49\n \n ## Type inference\n \n@@ -518,10 +517,10 @@ construct a mapping from `ExprId`s to types.\n \n [@flodiebold]: https://github.com/flodiebold\n [#327]: https://github.com/rust-lang/rust-analyzer/pull/327\n-[lower the AST]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/hir/src/expr.rs\n-[positional ID]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/hir/src/expr.rs#L13-L15\n-[a source map]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/hir/src/expr.rs#L41-L44\n-[type inference]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/hir/src/ty.rs#L1208-L1223\n+[lower the AST]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/ra_hir/src/expr.rs\n+[positional ID]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/ra_hir/src/expr.rs#L13-L15\n+[a source map]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/ra_hir/src/expr.rs#L41-L44\n+[type inference]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/ra_hir/src/ty.rs#L1208-L1223\n \n ## Tying it all together: completion\n \n@@ -563,10 +562,11 @@ the type to completion.\n [catch]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/ra_lsp_server/src/main_loop.rs#L436-L442\n [the handler]: https://salsa.zulipchat.com/#narrow/stream/181542-rfcs.2Fsalsa-query-group/topic/design.20next.20steps\n [ask analysis for completion]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/ide_api/src/lib.rs#L439-L444\n-[completion implementation]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/ide_api/src/completion.rs#L46-L62\n-[`CompletionContext`]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/ide_api/src/completion/completion_context.rs#L14-L37\n-[\"IntelliJ Trick\"]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/ide_api/src/completion/completion_context.rs#L72-L75\n-[find an ancestor `fn` node]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/ide_api/src/completion/completion_context.rs#L116-L120\n-[semantic model]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/ide_api/src/completion/completion_context.rs#L123\n-[series of independent completion routines]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/ide_api/src/completion.rs#L52-L59\n-[`complete_dot`]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/ide_api/src/completion/complete_dot.rs#L6-L22\n+[ask analysis for completion]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/ra_ide_api/src/lib.rs#L439-L444\n+[completion implementation]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/ra_ide_api/src/completion.rs#L46-L62\n+[`CompletionContext`]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/ra_ide_api/src/completion/completion_context.rs#L14-L37\n+[\"IntelliJ Trick\"]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/ra_ide_api/src/completion/completion_context.rs#L72-L75\n+[find an ancestor `fn` node]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/ra_ide_api/src/completion/completion_context.rs#L116-L120\n+[semantic model]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/ra_ide_api/src/completion/completion_context.rs#L123\n+[series of independent completion routines]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/ra_ide_api/src/completion.rs#L52-L59\n+[`complete_dot`]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/ra_ide_api/src/completion/complete_dot.rs#L6-L22"}]}