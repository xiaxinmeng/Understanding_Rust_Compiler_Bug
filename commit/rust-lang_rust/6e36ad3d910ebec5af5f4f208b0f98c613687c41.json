{"sha": "6e36ad3d910ebec5af5f4f208b0f98c613687c41", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlMzZhZDNkOTEwZWJlYzVhZjVmNGYyMDhiMGY5OGM2MTM2ODdjNDE=", "commit": {"author": {"name": "Roland Ruckerbauer", "email": "roland.rucky@gmail.com", "date": "2020-05-19T19:18:43Z"}, "committer": {"name": "Roland Ruckerbauer", "email": "roland.rucky@gmail.com", "date": "2020-05-19T19:18:43Z"}, "message": "Move false negative expr_diverges_missing_arm() to working tests", "tree": {"sha": "889e8bedf57b00c6090f34973cb72ffae611d0d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/889e8bedf57b00c6090f34973cb72ffae611d0d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e36ad3d910ebec5af5f4f208b0f98c613687c41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e36ad3d910ebec5af5f4f208b0f98c613687c41", "html_url": "https://github.com/rust-lang/rust/commit/6e36ad3d910ebec5af5f4f208b0f98c613687c41", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e36ad3d910ebec5af5f4f208b0f98c613687c41/comments", "author": null, "committer": null, "parents": [{"sha": "6eaa669da0c7b3730a309db5e320126653b88997", "url": "https://api.github.com/repos/rust-lang/rust/commits/6eaa669da0c7b3730a309db5e320126653b88997", "html_url": "https://github.com/rust-lang/rust/commit/6eaa669da0c7b3730a309db5e320126653b88997"}], "stats": {"total": 39, "additions": 18, "deletions": 21}, "files": [{"sha": "3e6e1e3331b0140bd7c0ca174326b51fcaeef142", "filename": "crates/ra_hir_ty/src/_match.rs", "status": "modified", "additions": 18, "deletions": 21, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/6e36ad3d910ebec5af5f4f208b0f98c613687c41/crates%2Fra_hir_ty%2Fsrc%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e36ad3d910ebec5af5f4f208b0f98c613687c41/crates%2Fra_hir_ty%2Fsrc%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2F_match.rs?ref=6e36ad3d910ebec5af5f4f208b0f98c613687c41", "patch": "@@ -1946,6 +1946,23 @@ mod tests {\n \n         check_no_diagnostic(content);\n     }\n+\n+    #[test]\n+    fn expr_diverges_missing_arm() {\n+        let content = r\"\n+            enum Either {\n+                A,\n+                B,\n+            }\n+            fn test_fn() {\n+                match loop {} {\n+                    Either::A => (),\n+                }\n+            }\n+        \";\n+\n+        check_no_diagnostic(content);\n+    }\n }\n \n #[cfg(test)]\n@@ -1997,26 +2014,6 @@ mod false_negatives {\n         check_no_diagnostic(content);\n     }\n \n-    #[test]\n-    fn expr_diverges_missing_arm() {\n-        let content = r\"\n-            enum Either {\n-                A,\n-                B,\n-            }\n-            fn test_fn() {\n-                match loop {} {\n-                    Either::A => (),\n-                }\n-            }\n-        \";\n-\n-        // This is a false negative.\n-        // Even though the match expression diverges, rustc fails\n-        // to compile here since `Either::B` is missing.\n-        check_no_diagnostic(content);\n-    }\n-\n     #[test]\n     fn expr_loop_missing_arm() {\n         let content = r\"\n@@ -2035,7 +2032,7 @@ mod false_negatives {\n         // We currently infer the type of `loop { break Foo::A }` to `!`, which\n         // causes us to skip the diagnostic since `Either::A` doesn't type check\n         // with `!`.\n-        check_no_diagnostic(content);\n+        check_diagnostic(content);\n     }\n \n     #[test]"}]}