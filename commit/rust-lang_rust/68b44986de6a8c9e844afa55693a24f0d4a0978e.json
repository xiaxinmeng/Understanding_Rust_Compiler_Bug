{"sha": "68b44986de6a8c9e844afa55693a24f0d4a0978e", "node_id": "C_kwDOAAsO6NoAKDY4YjQ0OTg2ZGU2YThjOWU4NDRhZmE1NTY5M2EyNGYwZDRhMDk3OGU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-05T17:44:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-05T17:44:37Z"}, "message": "Auto merge of #8365 - Alexendoo:explicit-write-suggestion, r=camsteffen\n\nAdd `explicit_write` suggestions for `write!`s with format args\n\nchangelog: Add [`explicit_write`] suggestions for `write!`s with format args\n\nFixes #4542\n\n```rust\nwriteln!(std::io::stderr(), \"macro arg {}\", one!()).unwrap();\n```\n\nNow suggests:\n\n```\nerror: use of `writeln!(stderr(), ...).unwrap()`\n  --> $DIR/explicit_write.rs:36:9\n   |\nLL |         writeln!(std::io::stderr(), \"macro arg {}\", one!()).unwrap();\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `eprintln!(\"macro arg {}\", one!())`\n```\n\n---------\n\nr? `@camsteffen` (again, sorry \ud83d\ude1b) for the `FormatArgsExpn` change\n\nBefore this change `inputs_span` returned a span pointing to just `1` in\n\n```rust\nmacro_rules! one {\n    () => { 1 };\n}\n\n`writeln!(std::io::stderr(), \"macro arg {}\", one!()).unwrap();`\n```\n\nAnd the `source_callsite` of that span didn't include the format string, it was just `one!()`", "tree": {"sha": "fa2e21087e2a10dfada3a1879a5132ed789cf5be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa2e21087e2a10dfada3a1879a5132ed789cf5be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68b44986de6a8c9e844afa55693a24f0d4a0978e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68b44986de6a8c9e844afa55693a24f0d4a0978e", "html_url": "https://github.com/rust-lang/rust/commit/68b44986de6a8c9e844afa55693a24f0d4a0978e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68b44986de6a8c9e844afa55693a24f0d4a0978e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29cc0d8e595f93cd0bd8341dd034c847f3a7746f", "url": "https://api.github.com/repos/rust-lang/rust/commits/29cc0d8e595f93cd0bd8341dd034c847f3a7746f", "html_url": "https://github.com/rust-lang/rust/commit/29cc0d8e595f93cd0bd8341dd034c847f3a7746f"}, {"sha": "144b4a59c7a3d18a0dd2c4316061672d00516ea3", "url": "https://api.github.com/repos/rust-lang/rust/commits/144b4a59c7a3d18a0dd2c4316061672d00516ea3", "html_url": "https://github.com/rust-lang/rust/commit/144b4a59c7a3d18a0dd2c4316061672d00516ea3"}], "stats": {"total": 256, "additions": 173, "deletions": 83}, "files": [{"sha": "3e2217c28da3a0dee72c6d62b567fe6fb3014436", "filename": "clippy_lints/src/explicit_write.rs", "status": "modified", "additions": 18, "deletions": 23, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/68b44986de6a8c9e844afa55693a24f0d4a0978e/clippy_lints%2Fsrc%2Fexplicit_write.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b44986de6a8c9e844afa55693a24f0d4a0978e/clippy_lints%2Fsrc%2Fexplicit_write.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexplicit_write.rs?ref=68b44986de6a8c9e844afa55693a24f0d4a0978e", "patch": "@@ -1,5 +1,6 @@\n-use clippy_utils::diagnostics::{span_lint_and_help, span_lint_and_sugg};\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::macros::FormatArgsExpn;\n+use clippy_utils::source::snippet_with_applicability;\n use clippy_utils::{is_expn_of, match_function_call, paths};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n@@ -79,28 +80,22 @@ impl<'tcx> LateLintPass<'tcx> for ExplicitWrite {\n                         \"print\".into(),\n                     )\n                 };\n-                let msg = format!(\"use of `{}.unwrap()`\", used);\n-                if let [write_output] = *format_args.format_string_parts {\n-                    let mut write_output = write_output.to_string();\n-                    if write_output.ends_with('\\n') {\n-                        write_output.pop();\n-                    }\n-\n-                    let sugg = format!(\"{}{}!(\\\"{}\\\")\", prefix, sugg_mac, write_output.escape_default());\n-                    span_lint_and_sugg(\n-                        cx,\n-                        EXPLICIT_WRITE,\n-                        expr.span,\n-                        &msg,\n-                        \"try this\",\n-                        sugg,\n-                        Applicability::MachineApplicable\n-                    );\n-                } else {\n-                    // We don't have a proper suggestion\n-                    let help = format!(\"consider using `{}{}!` instead\", prefix, sugg_mac);\n-                    span_lint_and_help(cx, EXPLICIT_WRITE, expr.span, &msg, None, &help);\n-                }\n+                let mut applicability = Applicability::MachineApplicable;\n+                let inputs_snippet = snippet_with_applicability(\n+                    cx,\n+                    format_args.inputs_span(),\n+                    \"..\",\n+                    &mut applicability,\n+                );\n+                span_lint_and_sugg(\n+                    cx,\n+                    EXPLICIT_WRITE,\n+                    expr.span,\n+                    &format!(\"use of `{}.unwrap()`\", used),\n+                    \"try this\",\n+                    format!(\"{}{}!({})\", prefix, sugg_mac, inputs_snippet),\n+                    applicability,\n+                )\n             }\n         }\n     }"}, {"sha": "76478c74e21367ff7339187f0e622fee665e2de6", "filename": "clippy_utils/src/macros.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/68b44986de6a8c9e844afa55693a24f0d4a0978e/clippy_utils%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b44986de6a8c9e844afa55693a24f0d4a0978e/clippy_utils%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fmacros.rs?ref=68b44986de6a8c9e844afa55693a24f0d4a0978e", "patch": "@@ -9,7 +9,7 @@ use rustc_hir::intravisit::Visitor;\n use rustc_hir::{self as hir, Expr, ExprKind, HirId, Node, QPath};\n use rustc_lint::LateContext;\n use rustc_span::def_id::DefId;\n-use rustc_span::hygiene::{MacroKind, SyntaxContext};\n+use rustc_span::hygiene::{self, MacroKind, SyntaxContext};\n use rustc_span::{sym, ExpnData, ExpnId, ExpnKind, Span, Symbol};\n use std::ops::ControlFlow;\n \n@@ -306,6 +306,7 @@ fn is_assert_arg(cx: &LateContext<'_>, expr: &Expr<'_>, assert_expn: ExpnId) ->\n }\n \n /// A parsed `format_args!` expansion\n+#[derive(Debug)]\n pub struct FormatArgsExpn<'tcx> {\n     /// Span of the first argument, the format string\n     pub format_string_span: Span,\n@@ -465,11 +466,13 @@ impl<'tcx> FormatArgsExpn<'tcx> {\n             .collect()\n     }\n \n-    /// Span of all inputs\n+    /// Source callsite span of all inputs\n     pub fn inputs_span(&self) -> Span {\n         match *self.value_args {\n             [] => self.format_string_span,\n-            [.., last] => self.format_string_span.to(last.span),\n+            [.., last] => self\n+                .format_string_span\n+                .to(hygiene::walk_chain(last.span, self.format_string_span.ctxt())),\n         }\n     }\n }"}, {"sha": "53e45d28bded91a7ab772f5aa2afd15c3f8a379e", "filename": "tests/ui/expect_fun_call.fixed", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/68b44986de6a8c9e844afa55693a24f0d4a0978e/tests%2Fui%2Fexpect_fun_call.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/68b44986de6a8c9e844afa55693a24f0d4a0978e/tests%2Fui%2Fexpect_fun_call.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexpect_fun_call.fixed?ref=68b44986de6a8c9e844afa55693a24f0d4a0978e", "patch": "@@ -5,6 +5,12 @@\n \n /// Checks implementation of the `EXPECT_FUN_CALL` lint\n \n+macro_rules! one {\n+    () => {\n+        1\n+    };\n+}\n+\n fn main() {\n     struct Foo;\n \n@@ -31,6 +37,9 @@ fn main() {\n     let with_none_and_as_str: Option<i32> = None;\n     with_none_and_as_str.unwrap_or_else(|| panic!(\"Error {}: fake error\", error_code));\n \n+    let with_none_and_format_with_macro: Option<i32> = None;\n+    with_none_and_format_with_macro.unwrap_or_else(|| panic!(\"Error {}: fake error\", one!()));\n+\n     let with_ok: Result<(), ()> = Ok(());\n     with_ok.expect(\"error\");\n "}, {"sha": "22e530b80349d81e27ef8fdeb015acbe54a027a5", "filename": "tests/ui/expect_fun_call.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/68b44986de6a8c9e844afa55693a24f0d4a0978e/tests%2Fui%2Fexpect_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b44986de6a8c9e844afa55693a24f0d4a0978e/tests%2Fui%2Fexpect_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexpect_fun_call.rs?ref=68b44986de6a8c9e844afa55693a24f0d4a0978e", "patch": "@@ -5,6 +5,12 @@\n \n /// Checks implementation of the `EXPECT_FUN_CALL` lint\n \n+macro_rules! one {\n+    () => {\n+        1\n+    };\n+}\n+\n fn main() {\n     struct Foo;\n \n@@ -31,6 +37,9 @@ fn main() {\n     let with_none_and_as_str: Option<i32> = None;\n     with_none_and_as_str.expect(format!(\"Error {}: fake error\", error_code).as_str());\n \n+    let with_none_and_format_with_macro: Option<i32> = None;\n+    with_none_and_format_with_macro.expect(format!(\"Error {}: fake error\", one!()).as_str());\n+\n     let with_ok: Result<(), ()> = Ok(());\n     with_ok.expect(\"error\");\n "}, {"sha": "aca15935fca06596dca5f84edebe35b693baaa15", "filename": "tests/ui/expect_fun_call.stderr", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/68b44986de6a8c9e844afa55693a24f0d4a0978e/tests%2Fui%2Fexpect_fun_call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68b44986de6a8c9e844afa55693a24f0d4a0978e/tests%2Fui%2Fexpect_fun_call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexpect_fun_call.stderr?ref=68b44986de6a8c9e844afa55693a24f0d4a0978e", "patch": "@@ -1,76 +1,82 @@\n error: use of `expect` followed by a function call\n-  --> $DIR/expect_fun_call.rs:29:26\n+  --> $DIR/expect_fun_call.rs:35:26\n    |\n LL |     with_none_and_format.expect(&format!(\"Error {}: fake error\", error_code));\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| panic!(\"Error {}: fake error\", error_code))`\n    |\n    = note: `-D clippy::expect-fun-call` implied by `-D warnings`\n \n error: use of `expect` followed by a function call\n-  --> $DIR/expect_fun_call.rs:32:26\n+  --> $DIR/expect_fun_call.rs:38:26\n    |\n LL |     with_none_and_as_str.expect(format!(\"Error {}: fake error\", error_code).as_str());\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| panic!(\"Error {}: fake error\", error_code))`\n \n error: use of `expect` followed by a function call\n-  --> $DIR/expect_fun_call.rs:42:25\n+  --> $DIR/expect_fun_call.rs:41:37\n+   |\n+LL |     with_none_and_format_with_macro.expect(format!(\"Error {}: fake error\", one!()).as_str());\n+   |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| panic!(\"Error {}: fake error\", one!()))`\n+\n+error: use of `expect` followed by a function call\n+  --> $DIR/expect_fun_call.rs:51:25\n    |\n LL |     with_err_and_format.expect(&format!(\"Error {}: fake error\", error_code));\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|_| panic!(\"Error {}: fake error\", error_code))`\n \n error: use of `expect` followed by a function call\n-  --> $DIR/expect_fun_call.rs:45:25\n+  --> $DIR/expect_fun_call.rs:54:25\n    |\n LL |     with_err_and_as_str.expect(format!(\"Error {}: fake error\", error_code).as_str());\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|_| panic!(\"Error {}: fake error\", error_code))`\n \n error: use of `expect` followed by a function call\n-  --> $DIR/expect_fun_call.rs:57:17\n+  --> $DIR/expect_fun_call.rs:66:17\n    |\n LL |     Some(\"foo\").expect(format!(\"{} {}\", 1, 2).as_ref());\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| panic!(\"{} {}\", 1, 2))`\n \n error: use of `expect` followed by a function call\n-  --> $DIR/expect_fun_call.rs:78:21\n+  --> $DIR/expect_fun_call.rs:87:21\n    |\n LL |         Some(\"foo\").expect(&get_string());\n    |                     ^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| { panic!(\"{}\", get_string()) })`\n \n error: use of `expect` followed by a function call\n-  --> $DIR/expect_fun_call.rs:79:21\n+  --> $DIR/expect_fun_call.rs:88:21\n    |\n LL |         Some(\"foo\").expect(get_string().as_ref());\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| { panic!(\"{}\", get_string()) })`\n \n error: use of `expect` followed by a function call\n-  --> $DIR/expect_fun_call.rs:80:21\n+  --> $DIR/expect_fun_call.rs:89:21\n    |\n LL |         Some(\"foo\").expect(get_string().as_str());\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| { panic!(\"{}\", get_string()) })`\n \n error: use of `expect` followed by a function call\n-  --> $DIR/expect_fun_call.rs:82:21\n+  --> $DIR/expect_fun_call.rs:91:21\n    |\n LL |         Some(\"foo\").expect(get_static_str());\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| { panic!(\"{}\", get_static_str()) })`\n \n error: use of `expect` followed by a function call\n-  --> $DIR/expect_fun_call.rs:83:21\n+  --> $DIR/expect_fun_call.rs:92:21\n    |\n LL |         Some(\"foo\").expect(get_non_static_str(&0));\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| { panic!(\"{}\", get_non_static_str(&0).to_string()) })`\n \n error: use of `expect` followed by a function call\n-  --> $DIR/expect_fun_call.rs:87:16\n+  --> $DIR/expect_fun_call.rs:96:16\n    |\n LL |     Some(true).expect(&format!(\"key {}, {}\", 1, 2));\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| panic!(\"key {}, {}\", 1, 2))`\n \n error: use of `expect` followed by a function call\n-  --> $DIR/expect_fun_call.rs:93:17\n+  --> $DIR/expect_fun_call.rs:102:17\n    |\n LL |         opt_ref.expect(&format!(\"{:?}\", opt_ref));\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| panic!(\"{:?}\", opt_ref))`\n \n-error: aborting due to 12 previous errors\n+error: aborting due to 13 previous errors\n "}, {"sha": "74d0e5290282aff21105c871e8ba6223477e862b", "filename": "tests/ui/explicit_write.fixed", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/68b44986de6a8c9e844afa55693a24f0d4a0978e/tests%2Fui%2Fexplicit_write.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/68b44986de6a8c9e844afa55693a24f0d4a0978e/tests%2Fui%2Fexplicit_write.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_write.fixed?ref=68b44986de6a8c9e844afa55693a24f0d4a0978e", "patch": "@@ -10,6 +10,12 @@ fn stderr() -> String {\n     String::new()\n }\n \n+macro_rules! one {\n+    () => {\n+        1\n+    };\n+}\n+\n fn main() {\n     // these should warn\n     {\n@@ -24,6 +30,12 @@ fn main() {\n         // including newlines\n         println!(\"test\\ntest\");\n         eprintln!(\"test\\ntest\");\n+\n+        let value = 1;\n+        eprintln!(\"with {}\", value);\n+        eprintln!(\"with {} {}\", 2, value);\n+        eprintln!(\"with {value}\");\n+        eprintln!(\"macro arg {}\", one!());\n     }\n     // these should not warn, different destination\n     {"}, {"sha": "e7a698d3e012d35049febcde9222b519904e06e8", "filename": "tests/ui/explicit_write.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/68b44986de6a8c9e844afa55693a24f0d4a0978e/tests%2Fui%2Fexplicit_write.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b44986de6a8c9e844afa55693a24f0d4a0978e/tests%2Fui%2Fexplicit_write.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_write.rs?ref=68b44986de6a8c9e844afa55693a24f0d4a0978e", "patch": "@@ -10,6 +10,12 @@ fn stderr() -> String {\n     String::new()\n }\n \n+macro_rules! one {\n+    () => {\n+        1\n+    };\n+}\n+\n fn main() {\n     // these should warn\n     {\n@@ -24,6 +30,12 @@ fn main() {\n         // including newlines\n         writeln!(std::io::stdout(), \"test\\ntest\").unwrap();\n         writeln!(std::io::stderr(), \"test\\ntest\").unwrap();\n+\n+        let value = 1;\n+        writeln!(std::io::stderr(), \"with {}\", value).unwrap();\n+        writeln!(std::io::stderr(), \"with {} {}\", 2, value).unwrap();\n+        writeln!(std::io::stderr(), \"with {value}\").unwrap();\n+        writeln!(std::io::stderr(), \"macro arg {}\", one!()).unwrap();\n     }\n     // these should not warn, different destination\n     {"}, {"sha": "29ae0cdece2499e6466a957b8409f1faf007397b", "filename": "tests/ui/explicit_write.stderr", "status": "modified", "additions": 33, "deletions": 9, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/68b44986de6a8c9e844afa55693a24f0d4a0978e/tests%2Fui%2Fexplicit_write.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68b44986de6a8c9e844afa55693a24f0d4a0978e/tests%2Fui%2Fexplicit_write.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_write.stderr?ref=68b44986de6a8c9e844afa55693a24f0d4a0978e", "patch": "@@ -1,52 +1,76 @@\n error: use of `write!(stdout(), ...).unwrap()`\n-  --> $DIR/explicit_write.rs:17:9\n+  --> $DIR/explicit_write.rs:23:9\n    |\n LL |         write!(std::io::stdout(), \"test\").unwrap();\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `print!(\"test\")`\n    |\n    = note: `-D clippy::explicit-write` implied by `-D warnings`\n \n error: use of `write!(stderr(), ...).unwrap()`\n-  --> $DIR/explicit_write.rs:18:9\n+  --> $DIR/explicit_write.rs:24:9\n    |\n LL |         write!(std::io::stderr(), \"test\").unwrap();\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `eprint!(\"test\")`\n \n error: use of `writeln!(stdout(), ...).unwrap()`\n-  --> $DIR/explicit_write.rs:19:9\n+  --> $DIR/explicit_write.rs:25:9\n    |\n LL |         writeln!(std::io::stdout(), \"test\").unwrap();\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `println!(\"test\")`\n \n error: use of `writeln!(stderr(), ...).unwrap()`\n-  --> $DIR/explicit_write.rs:20:9\n+  --> $DIR/explicit_write.rs:26:9\n    |\n LL |         writeln!(std::io::stderr(), \"test\").unwrap();\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `eprintln!(\"test\")`\n \n error: use of `stdout().write_fmt(...).unwrap()`\n-  --> $DIR/explicit_write.rs:21:9\n+  --> $DIR/explicit_write.rs:27:9\n    |\n LL |         std::io::stdout().write_fmt(format_args!(\"test\")).unwrap();\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `print!(\"test\")`\n \n error: use of `stderr().write_fmt(...).unwrap()`\n-  --> $DIR/explicit_write.rs:22:9\n+  --> $DIR/explicit_write.rs:28:9\n    |\n LL |         std::io::stderr().write_fmt(format_args!(\"test\")).unwrap();\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `eprint!(\"test\")`\n \n error: use of `writeln!(stdout(), ...).unwrap()`\n-  --> $DIR/explicit_write.rs:25:9\n+  --> $DIR/explicit_write.rs:31:9\n    |\n LL |         writeln!(std::io::stdout(), \"test/ntest\").unwrap();\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `println!(\"test/ntest\")`\n \n error: use of `writeln!(stderr(), ...).unwrap()`\n-  --> $DIR/explicit_write.rs:26:9\n+  --> $DIR/explicit_write.rs:32:9\n    |\n LL |         writeln!(std::io::stderr(), \"test/ntest\").unwrap();\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `eprintln!(\"test/ntest\")`\n \n-error: aborting due to 8 previous errors\n+error: use of `writeln!(stderr(), ...).unwrap()`\n+  --> $DIR/explicit_write.rs:35:9\n+   |\n+LL |         writeln!(std::io::stderr(), \"with {}\", value).unwrap();\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `eprintln!(\"with {}\", value)`\n+\n+error: use of `writeln!(stderr(), ...).unwrap()`\n+  --> $DIR/explicit_write.rs:36:9\n+   |\n+LL |         writeln!(std::io::stderr(), \"with {} {}\", 2, value).unwrap();\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `eprintln!(\"with {} {}\", 2, value)`\n+\n+error: use of `writeln!(stderr(), ...).unwrap()`\n+  --> $DIR/explicit_write.rs:37:9\n+   |\n+LL |         writeln!(std::io::stderr(), \"with {value}\").unwrap();\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `eprintln!(\"with {value}\")`\n+\n+error: use of `writeln!(stderr(), ...).unwrap()`\n+  --> $DIR/explicit_write.rs:38:9\n+   |\n+LL |         writeln!(std::io::stderr(), \"macro arg {}\", one!()).unwrap();\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `eprintln!(\"macro arg {}\", one!())`\n+\n+error: aborting due to 12 previous errors\n "}, {"sha": "f21e8ef935bd02f71fb0cab1c48983afcbe06589", "filename": "tests/ui/explicit_write_non_rustfix.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/29cc0d8e595f93cd0bd8341dd034c847f3a7746f/tests%2Fui%2Fexplicit_write_non_rustfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29cc0d8e595f93cd0bd8341dd034c847f3a7746f/tests%2Fui%2Fexplicit_write_non_rustfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_write_non_rustfix.rs?ref=29cc0d8e595f93cd0bd8341dd034c847f3a7746f", "patch": "@@ -1,8 +0,0 @@\n-#![allow(unused_imports, clippy::blacklisted_name)]\n-#![warn(clippy::explicit_write)]\n-\n-fn main() {\n-    use std::io::Write;\n-    let bar = \"bar\";\n-    writeln!(std::io::stderr(), \"foo {}\", bar).unwrap();\n-}"}, {"sha": "b94ec6403ddcea3c63bfd188bbd6914679581c70", "filename": "tests/ui/explicit_write_non_rustfix.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/29cc0d8e595f93cd0bd8341dd034c847f3a7746f/tests%2Fui%2Fexplicit_write_non_rustfix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29cc0d8e595f93cd0bd8341dd034c847f3a7746f/tests%2Fui%2Fexplicit_write_non_rustfix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_write_non_rustfix.stderr?ref=29cc0d8e595f93cd0bd8341dd034c847f3a7746f", "patch": "@@ -1,11 +0,0 @@\n-error: use of `writeln!(stderr(), ...).unwrap()`\n-  --> $DIR/explicit_write_non_rustfix.rs:7:5\n-   |\n-LL |     writeln!(std::io::stderr(), \"foo {}\", bar).unwrap();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `-D clippy::explicit-write` implied by `-D warnings`\n-   = help: consider using `eprintln!` instead\n-\n-error: aborting due to previous error\n-"}, {"sha": "d0bc640db88994c7c59312de4dfcb001aa984a78", "filename": "tests/ui/manual_assert.edition2018.fixed", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/68b44986de6a8c9e844afa55693a24f0d4a0978e/tests%2Fui%2Fmanual_assert.edition2018.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/68b44986de6a8c9e844afa55693a24f0d4a0978e/tests%2Fui%2Fmanual_assert.edition2018.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_assert.edition2018.fixed?ref=68b44986de6a8c9e844afa55693a24f0d4a0978e", "patch": "@@ -6,6 +6,12 @@\n #![warn(clippy::manual_assert)]\n #![allow(clippy::nonminimal_bool)]\n \n+macro_rules! one {\n+    () => {\n+        1\n+    };\n+}\n+\n fn main() {\n     let a = vec![1, 2, 3];\n     let c = Some(2);\n@@ -42,4 +48,5 @@ fn main() {\n     assert!(!(a.is_empty() && !b.is_empty()), \"panic3\");\n     assert!(!(b.is_empty() || a.is_empty()), \"panic4\");\n     assert!(!(a.is_empty() || !b.is_empty()), \"panic5\");\n+    assert!(!a.is_empty(), \"with expansion {}\", one!());\n }"}, {"sha": "a0f31afd6ebfe5986ff06e2f716b539e713b1535", "filename": "tests/ui/manual_assert.edition2018.stderr", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/68b44986de6a8c9e844afa55693a24f0d4a0978e/tests%2Fui%2Fmanual_assert.edition2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68b44986de6a8c9e844afa55693a24f0d4a0978e/tests%2Fui%2Fmanual_assert.edition2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_assert.edition2018.stderr?ref=68b44986de6a8c9e844afa55693a24f0d4a0978e", "patch": "@@ -1,5 +1,5 @@\n error: only a `panic!` in `if`-then statement\n-  --> $DIR/manual_assert.rs:24:5\n+  --> $DIR/manual_assert.rs:30:5\n    |\n LL | /     if !a.is_empty() {\n LL | |         panic!(\"qaqaq{:?}\", a);\n@@ -9,52 +9,60 @@ LL | |     }\n    = note: `-D clippy::manual-assert` implied by `-D warnings`\n \n error: only a `panic!` in `if`-then statement\n-  --> $DIR/manual_assert.rs:27:5\n+  --> $DIR/manual_assert.rs:33:5\n    |\n LL | /     if !a.is_empty() {\n LL | |         panic!(\"qwqwq\");\n LL | |     }\n    | |_____^ help: try: `assert!(a.is_empty(), \"qwqwq\");`\n \n error: only a `panic!` in `if`-then statement\n-  --> $DIR/manual_assert.rs:44:5\n+  --> $DIR/manual_assert.rs:50:5\n    |\n LL | /     if b.is_empty() {\n LL | |         panic!(\"panic1\");\n LL | |     }\n    | |_____^ help: try: `assert!(!b.is_empty(), \"panic1\");`\n \n error: only a `panic!` in `if`-then statement\n-  --> $DIR/manual_assert.rs:47:5\n+  --> $DIR/manual_assert.rs:53:5\n    |\n LL | /     if b.is_empty() && a.is_empty() {\n LL | |         panic!(\"panic2\");\n LL | |     }\n    | |_____^ help: try: `assert!(!(b.is_empty() && a.is_empty()), \"panic2\");`\n \n error: only a `panic!` in `if`-then statement\n-  --> $DIR/manual_assert.rs:50:5\n+  --> $DIR/manual_assert.rs:56:5\n    |\n LL | /     if a.is_empty() && !b.is_empty() {\n LL | |         panic!(\"panic3\");\n LL | |     }\n    | |_____^ help: try: `assert!(!(a.is_empty() && !b.is_empty()), \"panic3\");`\n \n error: only a `panic!` in `if`-then statement\n-  --> $DIR/manual_assert.rs:53:5\n+  --> $DIR/manual_assert.rs:59:5\n    |\n LL | /     if b.is_empty() || a.is_empty() {\n LL | |         panic!(\"panic4\");\n LL | |     }\n    | |_____^ help: try: `assert!(!(b.is_empty() || a.is_empty()), \"panic4\");`\n \n error: only a `panic!` in `if`-then statement\n-  --> $DIR/manual_assert.rs:56:5\n+  --> $DIR/manual_assert.rs:62:5\n    |\n LL | /     if a.is_empty() || !b.is_empty() {\n LL | |         panic!(\"panic5\");\n LL | |     }\n    | |_____^ help: try: `assert!(!(a.is_empty() || !b.is_empty()), \"panic5\");`\n \n-error: aborting due to 7 previous errors\n+error: only a `panic!` in `if`-then statement\n+  --> $DIR/manual_assert.rs:65:5\n+   |\n+LL | /     if a.is_empty() {\n+LL | |         panic!(\"with expansion {}\", one!())\n+LL | |     }\n+   | |_____^ help: try: `assert!(!a.is_empty(), \"with expansion {}\", one!());`\n+\n+error: aborting due to 8 previous errors\n "}, {"sha": "d0bc640db88994c7c59312de4dfcb001aa984a78", "filename": "tests/ui/manual_assert.edition2021.fixed", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/68b44986de6a8c9e844afa55693a24f0d4a0978e/tests%2Fui%2Fmanual_assert.edition2021.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/68b44986de6a8c9e844afa55693a24f0d4a0978e/tests%2Fui%2Fmanual_assert.edition2021.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_assert.edition2021.fixed?ref=68b44986de6a8c9e844afa55693a24f0d4a0978e", "patch": "@@ -6,6 +6,12 @@\n #![warn(clippy::manual_assert)]\n #![allow(clippy::nonminimal_bool)]\n \n+macro_rules! one {\n+    () => {\n+        1\n+    };\n+}\n+\n fn main() {\n     let a = vec![1, 2, 3];\n     let c = Some(2);\n@@ -42,4 +48,5 @@ fn main() {\n     assert!(!(a.is_empty() && !b.is_empty()), \"panic3\");\n     assert!(!(b.is_empty() || a.is_empty()), \"panic4\");\n     assert!(!(a.is_empty() || !b.is_empty()), \"panic5\");\n+    assert!(!a.is_empty(), \"with expansion {}\", one!());\n }"}, {"sha": "a0f31afd6ebfe5986ff06e2f716b539e713b1535", "filename": "tests/ui/manual_assert.edition2021.stderr", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/68b44986de6a8c9e844afa55693a24f0d4a0978e/tests%2Fui%2Fmanual_assert.edition2021.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68b44986de6a8c9e844afa55693a24f0d4a0978e/tests%2Fui%2Fmanual_assert.edition2021.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_assert.edition2021.stderr?ref=68b44986de6a8c9e844afa55693a24f0d4a0978e", "patch": "@@ -1,5 +1,5 @@\n error: only a `panic!` in `if`-then statement\n-  --> $DIR/manual_assert.rs:24:5\n+  --> $DIR/manual_assert.rs:30:5\n    |\n LL | /     if !a.is_empty() {\n LL | |         panic!(\"qaqaq{:?}\", a);\n@@ -9,52 +9,60 @@ LL | |     }\n    = note: `-D clippy::manual-assert` implied by `-D warnings`\n \n error: only a `panic!` in `if`-then statement\n-  --> $DIR/manual_assert.rs:27:5\n+  --> $DIR/manual_assert.rs:33:5\n    |\n LL | /     if !a.is_empty() {\n LL | |         panic!(\"qwqwq\");\n LL | |     }\n    | |_____^ help: try: `assert!(a.is_empty(), \"qwqwq\");`\n \n error: only a `panic!` in `if`-then statement\n-  --> $DIR/manual_assert.rs:44:5\n+  --> $DIR/manual_assert.rs:50:5\n    |\n LL | /     if b.is_empty() {\n LL | |         panic!(\"panic1\");\n LL | |     }\n    | |_____^ help: try: `assert!(!b.is_empty(), \"panic1\");`\n \n error: only a `panic!` in `if`-then statement\n-  --> $DIR/manual_assert.rs:47:5\n+  --> $DIR/manual_assert.rs:53:5\n    |\n LL | /     if b.is_empty() && a.is_empty() {\n LL | |         panic!(\"panic2\");\n LL | |     }\n    | |_____^ help: try: `assert!(!(b.is_empty() && a.is_empty()), \"panic2\");`\n \n error: only a `panic!` in `if`-then statement\n-  --> $DIR/manual_assert.rs:50:5\n+  --> $DIR/manual_assert.rs:56:5\n    |\n LL | /     if a.is_empty() && !b.is_empty() {\n LL | |         panic!(\"panic3\");\n LL | |     }\n    | |_____^ help: try: `assert!(!(a.is_empty() && !b.is_empty()), \"panic3\");`\n \n error: only a `panic!` in `if`-then statement\n-  --> $DIR/manual_assert.rs:53:5\n+  --> $DIR/manual_assert.rs:59:5\n    |\n LL | /     if b.is_empty() || a.is_empty() {\n LL | |         panic!(\"panic4\");\n LL | |     }\n    | |_____^ help: try: `assert!(!(b.is_empty() || a.is_empty()), \"panic4\");`\n \n error: only a `panic!` in `if`-then statement\n-  --> $DIR/manual_assert.rs:56:5\n+  --> $DIR/manual_assert.rs:62:5\n    |\n LL | /     if a.is_empty() || !b.is_empty() {\n LL | |         panic!(\"panic5\");\n LL | |     }\n    | |_____^ help: try: `assert!(!(a.is_empty() || !b.is_empty()), \"panic5\");`\n \n-error: aborting due to 7 previous errors\n+error: only a `panic!` in `if`-then statement\n+  --> $DIR/manual_assert.rs:65:5\n+   |\n+LL | /     if a.is_empty() {\n+LL | |         panic!(\"with expansion {}\", one!())\n+LL | |     }\n+   | |_____^ help: try: `assert!(!a.is_empty(), \"with expansion {}\", one!());`\n+\n+error: aborting due to 8 previous errors\n "}, {"sha": "027747d8386319431e82d9a836cf095063d2f2b9", "filename": "tests/ui/manual_assert.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/68b44986de6a8c9e844afa55693a24f0d4a0978e/tests%2Fui%2Fmanual_assert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b44986de6a8c9e844afa55693a24f0d4a0978e/tests%2Fui%2Fmanual_assert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_assert.rs?ref=68b44986de6a8c9e844afa55693a24f0d4a0978e", "patch": "@@ -6,6 +6,12 @@\n #![warn(clippy::manual_assert)]\n #![allow(clippy::nonminimal_bool)]\n \n+macro_rules! one {\n+    () => {\n+        1\n+    };\n+}\n+\n fn main() {\n     let a = vec![1, 2, 3];\n     let c = Some(2);\n@@ -56,4 +62,7 @@ fn main() {\n     if a.is_empty() || !b.is_empty() {\n         panic!(\"panic5\");\n     }\n+    if a.is_empty() {\n+        panic!(\"with expansion {}\", one!())\n+    }\n }"}]}