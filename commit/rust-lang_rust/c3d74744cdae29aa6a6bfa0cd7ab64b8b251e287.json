{"sha": "c3d74744cdae29aa6a6bfa0cd7ab64b8b251e287", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzZDc0NzQ0Y2RhZTI5YWE2YTZiZmEwY2Q3YWI2NGI4YjI1MWUyODc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-12-30T21:57:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-30T21:57:08Z"}, "message": "Merge #2694\n\n2694: Refactor inlay hints r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "bf53aac74110d30eba6da346e764e003ffd8b9c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf53aac74110d30eba6da346e764e003ffd8b9c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3d74744cdae29aa6a6bfa0cd7ab64b8b251e287", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeCnK0CRBK7hj4Ov3rIwAAdHIIABRe52aSc67LlPiYH7d/6F0B\nzH7MSDSMWq1lo7NHoZBPeOrgHAk0LXNXRiaLL9/9kniHtWhsivYX92sfdePdKYv1\ns9fvHO0EU7j5bLQ/OlWNZhS8wDVqS2aezjOKgL3hv01IWIzCiJWG4wsm7WfD0sPy\n8vMEFJSrBCs5fnnkaCLyTvSjQJYOeX4S2G5XKYC5ByQZPhP8mVxzSqUWPQqVvwfw\nkXn89azWHL0UU8/51rPA4yr9GkP2nrP6iHsXvBxuCixN9KlVrqzXg6eXdROJAg8l\n0B+5eSk8RiYzwvqvKFfBk91bkp41ZIihT4Tn5G9UOunpiqfq3jjw5+tPXptaNS4=\n=bd6B\n-----END PGP SIGNATURE-----\n", "payload": "tree bf53aac74110d30eba6da346e764e003ffd8b9c4\nparent 17dda0972a68dd88a766c223390317dc2cb3ea00\nparent cdd7118cbf23e21c376092b3b2734407004b8dbf\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1577743028 +0000\ncommitter GitHub <noreply@github.com> 1577743028 +0000\n\nMerge #2694\n\n2694: Refactor inlay hints r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3d74744cdae29aa6a6bfa0cd7ab64b8b251e287", "html_url": "https://github.com/rust-lang/rust/commit/c3d74744cdae29aa6a6bfa0cd7ab64b8b251e287", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3d74744cdae29aa6a6bfa0cd7ab64b8b251e287/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17dda0972a68dd88a766c223390317dc2cb3ea00", "url": "https://api.github.com/repos/rust-lang/rust/commits/17dda0972a68dd88a766c223390317dc2cb3ea00", "html_url": "https://github.com/rust-lang/rust/commit/17dda0972a68dd88a766c223390317dc2cb3ea00"}, {"sha": "cdd7118cbf23e21c376092b3b2734407004b8dbf", "url": "https://api.github.com/repos/rust-lang/rust/commits/cdd7118cbf23e21c376092b3b2734407004b8dbf", "html_url": "https://github.com/rust-lang/rust/commit/cdd7118cbf23e21c376092b3b2734407004b8dbf"}], "stats": {"total": 284, "additions": 130, "deletions": 154}, "files": [{"sha": "4336583fee8e20bd8ef61f15e637b08a5def43eb", "filename": "crates/ra_lsp_server/src/main_loop.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c3d74744cdae29aa6a6bfa0cd7ab64b8b251e287/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3d74744cdae29aa6a6bfa0cd7ab64b8b251e287/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs?ref=c3d74744cdae29aa6a6bfa0cd7ab64b8b251e287", "patch": "@@ -709,16 +709,11 @@ where\n             Ok(lsp_error) => Response::new_err(id, lsp_error.code, lsp_error.message),\n             Err(e) => {\n                 if is_canceled(&e) {\n-                    // FIXME: When https://github.com/Microsoft/vscode-languageserver-node/issues/457\n-                    // gets fixed, we can return the proper response.\n-                    // This works around the issue where \"content modified\" error would continuously\n-                    // show an message pop-up in VsCode\n-                    // Response::err(\n-                    //     id,\n-                    //     ErrorCode::ContentModified as i32,\n-                    //     \"content modified\".to_string(),\n-                    // )\n-                    Response::new_ok(id, ())\n+                    Response::new_err(\n+                        id,\n+                        ErrorCode::ContentModified as i32,\n+                        \"content modified\".to_string(),\n+                    )\n                 } else {\n                     Response::new_err(id, ErrorCode::InternalError as i32, e.to_string())\n                 }"}, {"sha": "14fb9e085c519e9e1acf7141d45e2660316dbf64", "filename": "editors/code/rollup.config.js", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3d74744cdae29aa6a6bfa0cd7ab64b8b251e287/editors%2Fcode%2Frollup.config.js", "raw_url": "https://github.com/rust-lang/rust/raw/c3d74744cdae29aa6a6bfa0cd7ab64b8b251e287/editors%2Fcode%2Frollup.config.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Frollup.config.js?ref=c3d74744cdae29aa6a6bfa0cd7ab64b8b251e287", "patch": "@@ -13,7 +13,7 @@ export default {\n         commonjs({\n             namedExports: {\n                 // squelch missing import warnings\n-                'vscode-languageclient': ['CreateFile', 'RenameFile']\n+                'vscode-languageclient': ['CreateFile', 'RenameFile', 'ErrorCodes']\n             }\n         })\n     ],"}, {"sha": "d3ef27e430fdee7ee8140e5c8cf7de02cabcb24e", "filename": "editors/code/src/ctx.ts", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c3d74744cdae29aa6a6bfa0cd7ab64b8b251e287/editors%2Fcode%2Fsrc%2Fctx.ts", "raw_url": "https://github.com/rust-lang/rust/raw/c3d74744cdae29aa6a6bfa0cd7ab64b8b251e287/editors%2Fcode%2Fsrc%2Fctx.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fctx.ts?ref=c3d74744cdae29aa6a6bfa0cd7ab64b8b251e287", "patch": "@@ -1,6 +1,7 @@\n import * as vscode from 'vscode';\n import * as lc from 'vscode-languageclient';\n import { Server } from './server';\n+import { Config } from './config';\n \n export class Ctx {\n     private extCtx: vscode.ExtensionContext;\n@@ -13,6 +14,10 @@ export class Ctx {\n         return Server.client;\n     }\n \n+    get config(): Config {\n+        return Server.config;\n+    }\n+\n     get activeRustEditor(): vscode.TextEditor | undefined {\n         const editor = vscode.window.activeTextEditor;\n         return editor && editor.document.languageId === 'rust'\n@@ -56,6 +61,24 @@ export class Ctx {\n     pushCleanup(d: { dispose(): any }) {\n         this.extCtx.subscriptions.push(d);\n     }\n+\n+    async sendRequestWithRetry<R>(method: string, param: any, token: vscode.CancellationToken): Promise<R> {\n+        await this.client.onReady();\n+        for (const delay of [2, 4, 6, 8, 10, null]) {\n+            try {\n+                return await this.client.sendRequest(method, param, token);\n+            } catch (e) {\n+                if (e.code === lc.ErrorCodes.ContentModified && delay !== null) {\n+                    await sleep(10 * (1 << delay))\n+                    continue;\n+                }\n+                throw e;\n+            }\n+        }\n+        throw 'unreachable'\n+    }\n }\n \n export type Cmd = (...args: any[]) => any;\n+\n+const sleep = (ms: number) => new Promise(resolve => setTimeout(resolve, ms))"}, {"sha": "4384ee56768c178a62476ec8e760a13ac38e364a", "filename": "editors/code/src/events/change_active_text_editor.ts", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/17dda0972a68dd88a766c223390317dc2cb3ea00/editors%2Fcode%2Fsrc%2Fevents%2Fchange_active_text_editor.ts", "raw_url": "https://github.com/rust-lang/rust/raw/17dda0972a68dd88a766c223390317dc2cb3ea00/editors%2Fcode%2Fsrc%2Fevents%2Fchange_active_text_editor.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fevents%2Fchange_active_text_editor.ts?ref=17dda0972a68dd88a766c223390317dc2cb3ea00", "patch": "@@ -1,25 +0,0 @@\n-import { TextEditor } from 'vscode';\n-import { TextDocumentIdentifier } from 'vscode-languageclient';\n-import { Decoration } from '../highlighting';\n-import { Server } from '../server';\n-\n-export function makeHandler() {\n-    return async function handle(editor: TextEditor | undefined) {\n-        if (!editor || editor.document.languageId !== 'rust') {\n-            return;\n-        }\n-\n-        if (!Server.config.highlightingOn) {\n-            return;\n-        }\n-\n-        const params: TextDocumentIdentifier = {\n-            uri: editor.document.uri.toString(),\n-        };\n-        const decorations = await Server.client.sendRequest<Decoration[]>(\n-            'rust-analyzer/decorationsRequest',\n-            params,\n-        );\n-        Server.highlighter.setHighlights(editor, decorations);\n-    };\n-}"}, {"sha": "be135474de620b85ec0e2176525ed7b458b8d155", "filename": "editors/code/src/events/index.ts", "status": "removed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/17dda0972a68dd88a766c223390317dc2cb3ea00/editors%2Fcode%2Fsrc%2Fevents%2Findex.ts", "raw_url": "https://github.com/rust-lang/rust/raw/17dda0972a68dd88a766c223390317dc2cb3ea00/editors%2Fcode%2Fsrc%2Fevents%2Findex.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fevents%2Findex.ts?ref=17dda0972a68dd88a766c223390317dc2cb3ea00", "patch": "@@ -1,3 +0,0 @@\n-import * as changeActiveTextEditor from './change_active_text_editor';\n-\n-export { changeActiveTextEditor };"}, {"sha": "333319b850c8424b95637126287ccf57e7479e49", "filename": "editors/code/src/highlighting.ts", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c3d74744cdae29aa6a6bfa0cd7ab64b8b251e287/editors%2Fcode%2Fsrc%2Fhighlighting.ts", "raw_url": "https://github.com/rust-lang/rust/raw/c3d74744cdae29aa6a6bfa0cd7ab64b8b251e287/editors%2Fcode%2Fsrc%2Fhighlighting.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fhighlighting.ts?ref=c3d74744cdae29aa6a6bfa0cd7ab64b8b251e287", "patch": "@@ -1,10 +1,31 @@\n-import seedrandom = require('seedrandom');\n import * as vscode from 'vscode';\n import * as lc from 'vscode-languageclient';\n+import * as seedrandom_ from 'seedrandom';\n+const seedrandom = seedrandom_; // https://github.com/jvandemo/generator-angular2-library/issues/221#issuecomment-355945207\n+\n import * as scopes from './scopes';\n import * as scopesMapper from './scopes_mapper';\n \n import { Server } from './server';\n+import { Ctx } from './ctx';\n+\n+export function activateHighlighting(ctx: Ctx) {\n+    vscode.window.onDidChangeActiveTextEditor(\n+        async (editor: vscode.TextEditor | undefined) => {\n+            if (!editor || editor.document.languageId !== 'rust') return;\n+            if (!ctx.config.highlightingOn) return;\n+\n+            const params: lc.TextDocumentIdentifier = {\n+                uri: editor.document.uri.toString(),\n+            };\n+            const decorations = await ctx.client.sendRequest<Decoration[]>(\n+                'rust-analyzer/decorationsRequest',\n+                params,\n+            );\n+            Server.highlighter.setHighlights(editor, decorations);\n+        },\n+    );\n+}\n \n export interface Decoration {\n     range: lc.Range;"}, {"sha": "d41297407e078569122d5b042f59f2f0ed2dbf92", "filename": "editors/code/src/inlay_hints.ts", "status": "modified", "additions": 73, "deletions": 103, "changes": 176, "blob_url": "https://github.com/rust-lang/rust/blob/c3d74744cdae29aa6a6bfa0cd7ab64b8b251e287/editors%2Fcode%2Fsrc%2Finlay_hints.ts", "raw_url": "https://github.com/rust-lang/rust/raw/c3d74744cdae29aa6a6bfa0cd7ab64b8b251e287/editors%2Fcode%2Fsrc%2Finlay_hints.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Finlay_hints.ts?ref=c3d74744cdae29aa6a6bfa0cd7ab64b8b251e287", "patch": "@@ -1,41 +1,27 @@\n import * as vscode from 'vscode';\n import * as lc from 'vscode-languageclient';\n-import { Server } from './server';\n+\n import { Ctx } from './ctx';\n \n export function activateInlayHints(ctx: Ctx) {\n-    const hintsUpdater = new HintsUpdater();\n-    hintsUpdater.refreshHintsForVisibleEditors().then(() => {\n-        // vscode may ignore top level hintsUpdater.refreshHintsForVisibleEditors()\n-        // so update the hints once when the focus changes to guarantee their presence\n-        let editorChangeDisposable: vscode.Disposable | null = null;\n-        editorChangeDisposable = vscode.window.onDidChangeActiveTextEditor(\n-            _ => {\n-                if (editorChangeDisposable !== null) {\n-                    editorChangeDisposable.dispose();\n-                }\n-                return hintsUpdater.refreshHintsForVisibleEditors();\n-            },\n-        );\n+    const hintsUpdater = new HintsUpdater(ctx);\n+    vscode.window.onDidChangeVisibleTextEditors(async _ => {\n+        await hintsUpdater.refresh();\n+    }, ctx.subscriptions);\n \n-        ctx.pushCleanup(\n-            vscode.window.onDidChangeVisibleTextEditors(_ =>\n-                hintsUpdater.refreshHintsForVisibleEditors(),\n-            ),\n-        );\n-        ctx.pushCleanup(\n-            vscode.workspace.onDidChangeTextDocument(e =>\n-                hintsUpdater.refreshHintsForVisibleEditors(e),\n-            ),\n-        );\n-        ctx.pushCleanup(\n-            vscode.workspace.onDidChangeConfiguration(_ =>\n-                hintsUpdater.toggleHintsDisplay(\n-                    Server.config.displayInlayHints,\n-                ),\n-            ),\n-        );\n-    });\n+    vscode.workspace.onDidChangeTextDocument(async e => {\n+        if (e.contentChanges.length === 0) return;\n+        if (e.document.languageId !== 'rust') return;\n+        await hintsUpdater.refresh();\n+    }, ctx.subscriptions);\n+\n+    vscode.workspace.onDidChangeConfiguration(_ => {\n+        hintsUpdater.setEnabled(ctx.config.displayInlayHints);\n+    }, ctx.subscriptions);\n+\n+    // XXX: don't await here;\n+    // Who knows what happens if an exception is thrown here...\n+    hintsUpdater.refresh();\n }\n \n interface InlayHintsParams {\n@@ -55,95 +41,79 @@ const typeHintDecorationType = vscode.window.createTextEditorDecorationType({\n });\n \n class HintsUpdater {\n-    private displayHints = true;\n+    private pending: Map<string, vscode.CancellationTokenSource> = new Map();\n+    private ctx: Ctx;\n+    private enabled = true;\n \n-    public async toggleHintsDisplay(displayHints: boolean): Promise<void> {\n-        if (this.displayHints !== displayHints) {\n-            this.displayHints = displayHints;\n-            return this.refreshVisibleEditorsHints(\n-                displayHints ? undefined : [],\n-            );\n-        }\n+    constructor(ctx: Ctx) {\n+        this.ctx = ctx;\n     }\n \n-    public async refreshHintsForVisibleEditors(\n-        cause?: vscode.TextDocumentChangeEvent,\n-    ): Promise<void> {\n-        if (!this.displayHints) return;\n-\n-        if (\n-            cause !== undefined &&\n-            (cause.contentChanges.length === 0 ||\n-                !this.isRustDocument(cause.document))\n-        ) {\n-            return;\n+    async setEnabled(enabled: boolean) {\n+        if (this.enabled == enabled) return;\n+        this.enabled = enabled;\n+\n+        if (this.enabled) {\n+            await this.refresh();\n+        } else {\n+            this.allEditors.forEach(it => this.setDecorations(it, []));\n         }\n-        return this.refreshVisibleEditorsHints();\n     }\n \n-    private async refreshVisibleEditorsHints(\n-        newDecorations?: vscode.DecorationOptions[],\n-    ) {\n-        const promises: Array<Promise<void>> = [];\n-\n-        for (const rustEditor of vscode.window.visibleTextEditors.filter(\n-            editor => this.isRustDocument(editor.document),\n-        )) {\n-            if (newDecorations !== undefined) {\n-                promises.push(\n-                    Promise.resolve(\n-                        rustEditor.setDecorations(\n-                            typeHintDecorationType,\n-                            newDecorations,\n-                        ),\n-                    ),\n-                );\n-            } else {\n-                promises.push(this.updateDecorationsFromServer(rustEditor));\n-            }\n-        }\n+    async refresh() {\n+        if (!this.enabled) return;\n+        const promises = this.allEditors.map(it => this.refreshEditor(it));\n+        await Promise.all(promises);\n+    }\n \n-        for (const promise of promises) {\n-            await promise;\n-        }\n+    private async refreshEditor(editor: vscode.TextEditor): Promise<void> {\n+        const newHints = await this.queryHints(editor.document.uri.toString());\n+        if (newHints == null) return;\n+        const newDecorations = newHints.map(hint => ({\n+            range: hint.range,\n+            renderOptions: {\n+                after: {\n+                    contentText: `: ${hint.label}`,\n+                },\n+            },\n+        }));\n+        this.setDecorations(editor, newDecorations);\n     }\n \n-    private isRustDocument(document: vscode.TextDocument): boolean {\n-        return document && document.languageId === 'rust';\n+    private get allEditors(): vscode.TextEditor[] {\n+        return vscode.window.visibleTextEditors.filter(\n+            editor => editor.document.languageId === 'rust',\n+        );\n     }\n \n-    private async updateDecorationsFromServer(\n+    private setDecorations(\n         editor: vscode.TextEditor,\n-    ): Promise<void> {\n-        const newHints = await this.queryHints(editor.document.uri.toString());\n-        if (newHints !== null) {\n-            const newDecorations = newHints.map(hint => ({\n-                range: hint.range,\n-                renderOptions: {\n-                    after: {\n-                        contentText: `: ${hint.label}`,\n-                    },\n-                },\n-            }));\n-            return editor.setDecorations(\n-                typeHintDecorationType,\n-                newDecorations,\n-            );\n-        }\n+        decorations: vscode.DecorationOptions[],\n+    ) {\n+        editor.setDecorations(\n+            typeHintDecorationType,\n+            this.enabled ? decorations : [],\n+        );\n     }\n \n     private async queryHints(documentUri: string): Promise<InlayHint[] | null> {\n         const request: InlayHintsParams = {\n             textDocument: { uri: documentUri },\n         };\n-        const client = Server.client;\n-        return client\n-            .onReady()\n-            .then(() =>\n-                client.sendRequest<InlayHint[] | null>(\n-                    'rust-analyzer/inlayHints',\n-                    request,\n-                ),\n+        let tokenSource = new vscode.CancellationTokenSource();\n+        let prev = this.pending.get(documentUri);\n+        if (prev) prev.cancel()\n+        this.pending.set(documentUri, tokenSource);\n+        try {\n+            return await this.ctx.sendRequestWithRetry<InlayHint[] | null>(\n+                'rust-analyzer/inlayHints',\n+                request,\n+                tokenSource.token,\n             );\n+        } finally {\n+            if (!tokenSource.token.isCancellationRequested) {\n+                this.pending.delete(documentUri)\n+            }\n+        }\n     }\n }"}, {"sha": "345ae068566e39416908fb5fc2ba6427cc9c7860", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c3d74744cdae29aa6a6bfa0cd7ab64b8b251e287/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/c3d74744cdae29aa6a6bfa0cd7ab64b8b251e287/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=c3d74744cdae29aa6a6bfa0cd7ab64b8b251e287", "patch": "@@ -4,10 +4,10 @@ import * as lc from 'vscode-languageclient';\n import * as commands from './commands';\n import { activateInlayHints } from './inlay_hints';\n import { StatusDisplay } from './status_display';\n-import * as events from './events';\n import * as notifications from './notifications';\n import { Server } from './server';\n import { Ctx } from './ctx';\n+import { activateHighlighting } from './highlighting';\n \n let ctx!: Ctx;\n \n@@ -28,15 +28,15 @@ export async function activate(context: vscode.ExtensionContext) {\n     ctx.registerCommand('runSingle', commands.runSingle);\n     ctx.registerCommand('showReferences', commands.showReferences);\n \n-    if (Server.config.enableEnhancedTyping) {\n+    if (ctx.config.enableEnhancedTyping) {\n         ctx.overrideCommand('type', commands.onEnter);\n     }\n \n-    const watchStatus = new StatusDisplay(\n-        Server.config.cargoWatchOptions.command,\n-    );\n+    const watchStatus = new StatusDisplay(ctx.config.cargoWatchOptions.command);\n     ctx.pushCleanup(watchStatus);\n \n+    activateHighlighting(ctx);\n+\n     // Notifications are events triggered by the language server\n     const allNotifications: [string, lc.GenericNotificationHandler][] = [\n         [\n@@ -49,11 +49,6 @@ export async function activate(context: vscode.ExtensionContext) {\n         ],\n     ];\n \n-    // The events below are plain old javascript events, triggered and handled by vscode\n-    vscode.window.onDidChangeActiveTextEditor(\n-        events.changeActiveTextEditor.makeHandler(),\n-    );\n-\n     const startServer = () => Server.start(allNotifications);\n     const reloadCommand = () => reloadServer(startServer);\n \n@@ -66,7 +61,7 @@ export async function activate(context: vscode.ExtensionContext) {\n         vscode.window.showErrorMessage(e.message);\n     }\n \n-    if (Server.config.displayInlayHints) {\n+    if (ctx.config.displayInlayHints) {\n         activateInlayHints(ctx);\n     }\n }"}]}