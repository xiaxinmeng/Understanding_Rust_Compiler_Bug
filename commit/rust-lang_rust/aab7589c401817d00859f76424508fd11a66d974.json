{"sha": "aab7589c401817d00859f76424508fd11a66d974", "node_id": "C_kwDOAAsO6NoAKGFhYjc1ODljNDAxODE3ZDAwODU5Zjc2NDI0NTA4ZmQxMWE2NmQ5NzQ", "commit": {"author": {"name": "hkalbasi", "email": "hamidrezakalbasi@protonmail.com", "date": "2023-06-02T20:15:29Z"}, "committer": {"name": "hkalbasi", "email": "hamidrezakalbasi@protonmail.com", "date": "2023-06-02T20:15:29Z"}, "message": "Fix string pattern matching in mir interpreter", "tree": {"sha": "40b194e2d55a1f80a08ef5d23cceb9f4d5ffd7b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40b194e2d55a1f80a08ef5d23cceb9f4d5ffd7b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aab7589c401817d00859f76424508fd11a66d974", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aab7589c401817d00859f76424508fd11a66d974", "html_url": "https://github.com/rust-lang/rust/commit/aab7589c401817d00859f76424508fd11a66d974", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aab7589c401817d00859f76424508fd11a66d974/comments", "author": {"login": "HKalbasi", "id": 45197576, "node_id": "MDQ6VXNlcjQ1MTk3NTc2", "avatar_url": "https://avatars.githubusercontent.com/u/45197576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HKalbasi", "html_url": "https://github.com/HKalbasi", "followers_url": "https://api.github.com/users/HKalbasi/followers", "following_url": "https://api.github.com/users/HKalbasi/following{/other_user}", "gists_url": "https://api.github.com/users/HKalbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/HKalbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HKalbasi/subscriptions", "organizations_url": "https://api.github.com/users/HKalbasi/orgs", "repos_url": "https://api.github.com/users/HKalbasi/repos", "events_url": "https://api.github.com/users/HKalbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/HKalbasi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "HKalbasi", "id": 45197576, "node_id": "MDQ6VXNlcjQ1MTk3NTc2", "avatar_url": "https://avatars.githubusercontent.com/u/45197576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HKalbasi", "html_url": "https://github.com/HKalbasi", "followers_url": "https://api.github.com/users/HKalbasi/followers", "following_url": "https://api.github.com/users/HKalbasi/following{/other_user}", "gists_url": "https://api.github.com/users/HKalbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/HKalbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HKalbasi/subscriptions", "organizations_url": "https://api.github.com/users/HKalbasi/orgs", "repos_url": "https://api.github.com/users/HKalbasi/repos", "events_url": "https://api.github.com/users/HKalbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/HKalbasi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfaca9398a1edcb6dd3d801a1a62e482a652bde6", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfaca9398a1edcb6dd3d801a1a62e482a652bde6", "html_url": "https://github.com/rust-lang/rust/commit/dfaca9398a1edcb6dd3d801a1a62e482a652bde6"}], "stats": {"total": 96, "additions": 84, "deletions": 12}, "files": [{"sha": "a8071591adac99e11e1fa1d9dc1e05d40506dbf3", "filename": "crates/hir-ty/src/chalk_ext.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aab7589c401817d00859f76424508fd11a66d974/crates%2Fhir-ty%2Fsrc%2Fchalk_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aab7589c401817d00859f76424508fd11a66d974/crates%2Fhir-ty%2Fsrc%2Fchalk_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fchalk_ext.rs?ref=aab7589c401817d00859f76424508fd11a66d974", "patch": "@@ -22,6 +22,7 @@ use crate::{\n pub trait TyExt {\n     fn is_unit(&self) -> bool;\n     fn is_integral(&self) -> bool;\n+    fn is_scalar(&self) -> bool;\n     fn is_floating_point(&self) -> bool;\n     fn is_never(&self) -> bool;\n     fn is_unknown(&self) -> bool;\n@@ -68,6 +69,10 @@ impl TyExt for Ty {\n         )\n     }\n \n+    fn is_scalar(&self) -> bool {\n+        matches!(self.kind(Interner), TyKind::Scalar(_))\n+    }\n+\n     fn is_floating_point(&self) -> bool {\n         matches!(\n             self.kind(Interner),"}, {"sha": "06fff08b7d35b52fa66768a9840b655761c709f4", "filename": "crates/hir-ty/src/consteval/tests.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/aab7589c401817d00859f76424508fd11a66d974/crates%2Fhir-ty%2Fsrc%2Fconsteval%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aab7589c401817d00859f76424508fd11a66d974/crates%2Fhir-ty%2Fsrc%2Fconsteval%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fconsteval%2Ftests.rs?ref=aab7589c401817d00859f76424508fd11a66d974", "patch": "@@ -179,6 +179,7 @@ fn casts() {\n         \"#,\n         4,\n     );\n+    check_number(r#\"const GOAL: i32 = -12i8 as i32\"#, -12);\n }\n \n #[test]\n@@ -1034,16 +1035,18 @@ fn pattern_matching_literal() {\n     );\n     check_number(\n         r#\"\n-    const fn f(x: &str) -> u8 {\n+    const fn f(x: &str) -> i32 {\n         match x {\n-            \"foo\" => 1,\n-            \"bar\" => 10,\n-            _ => 100,\n+            \"f\" => 1,\n+            \"foo\" => 10,\n+            \"\" => 100,\n+            \"bar\" => 1000,\n+            _ => 10000,\n         }\n     }\n-    const GOAL: u8 = f(\"foo\") + f(\"bar\");\n+    const GOAL: i32 = f(\"f\") + f(\"foo\") * 2 + f(\"\") * 3 + f(\"bar\") * 4;\n         \"#,\n-        11,\n+        4321,\n     );\n }\n "}, {"sha": "6778808d529db6e87b40e7bd82703f89b6706de4", "filename": "crates/hir-ty/src/mir/eval.rs", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/aab7589c401817d00859f76424508fd11a66d974/crates%2Fhir-ty%2Fsrc%2Fmir%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aab7589c401817d00859f76424508fd11a66d974/crates%2Fhir-ty%2Fsrc%2Fmir%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fmir%2Feval.rs?ref=aab7589c401817d00859f76424508fd11a66d974", "patch": "@@ -17,6 +17,7 @@ use hir_expand::InFile;\n use intern::Interned;\n use la_arena::ArenaMap;\n use rustc_hash::{FxHashMap, FxHashSet};\n+use stdx::never;\n use syntax::{SyntaxNodePtr, TextRange};\n use triomphe::Arc;\n \n@@ -896,7 +897,7 @@ impl Evaluator<'_> {\n                     Owned(c)\n                 }\n             }\n-            Rvalue::CheckedBinaryOp(op, lhs, rhs) => {\n+            Rvalue::CheckedBinaryOp(op, lhs, rhs) => 'binary_op: {\n                 let lc = self.eval_operand(lhs, locals)?;\n                 let rc = self.eval_operand(rhs, locals)?;\n                 let mut lc = lc.get(&self)?;\n@@ -905,10 +906,17 @@ impl Evaluator<'_> {\n                 while let TyKind::Ref(_, _, z) = ty.kind(Interner) {\n                     ty = z.clone();\n                     let size = if ty.kind(Interner) == &TyKind::Str {\n-                        let ns = from_bytes!(usize, &lc[self.ptr_size()..self.ptr_size() * 2]);\n+                        if *op != BinOp::Eq {\n+                            never!(\"Only eq is builtin for `str`\");\n+                        }\n+                        let ls = from_bytes!(usize, &lc[self.ptr_size()..self.ptr_size() * 2]);\n+                        let rs = from_bytes!(usize, &rc[self.ptr_size()..self.ptr_size() * 2]);\n+                        if ls != rs {\n+                            break 'binary_op Owned(vec![0]);\n+                        }\n                         lc = &lc[..self.ptr_size()];\n                         rc = &rc[..self.ptr_size()];\n-                        ns\n+                        ls\n                     } else {\n                         self.size_of_sized(&ty, locals, \"operand of binary op\")?\n                     };\n@@ -1200,8 +1208,15 @@ impl Evaluator<'_> {\n                 CastKind::IntToInt\n                 | CastKind::PointerExposeAddress\n                 | CastKind::PointerFromExposedAddress => {\n-                    // FIXME: handle signed cast\n-                    let current = pad16(self.eval_operand(operand, locals)?.get(&self)?, false);\n+                    let current_ty = self.operand_ty(operand, locals)?;\n+                    let is_signed = match current_ty.kind(Interner) {\n+                        TyKind::Scalar(s) => match s {\n+                            chalk_ir::Scalar::Int(_) => true,\n+                            _ => false,\n+                        },\n+                        _ => false,\n+                    };\n+                    let current = pad16(self.eval_operand(operand, locals)?.get(&self)?, is_signed);\n                     let dest_size =\n                         self.size_of_sized(target_ty, locals, \"destination of int to int cast\")?;\n                     Owned(current[0..dest_size].to_vec())"}, {"sha": "3b9ef03c369f49e680e3522e1eb0c307519c331c", "filename": "crates/hir-ty/src/mir/eval/shim.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/aab7589c401817d00859f76424508fd11a66d974/crates%2Fhir-ty%2Fsrc%2Fmir%2Feval%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aab7589c401817d00859f76424508fd11a66d974/crates%2Fhir-ty%2Fsrc%2Fmir%2Feval%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fmir%2Feval%2Fshim.rs?ref=aab7589c401817d00859f76424508fd11a66d974", "patch": "@@ -238,6 +238,22 @@ impl Evaluator<'_> {\n         _span: MirSpan,\n     ) -> Result<()> {\n         match as_str {\n+            \"memcmp\" => {\n+                let [ptr1, ptr2, size] = args else {\n+                    return Err(MirEvalError::TypeError(\"memcmp args are not provided\"));\n+                };\n+                let addr1 = Address::from_bytes(ptr1.get(self)?)?;\n+                let addr2 = Address::from_bytes(ptr2.get(self)?)?;\n+                let size = from_bytes!(usize, size.get(self)?);\n+                let slice1 = self.read_memory(addr1, size)?;\n+                let slice2 = self.read_memory(addr2, size)?;\n+                let r: i128 = match slice1.cmp(slice2) {\n+                    cmp::Ordering::Less => -1,\n+                    cmp::Ordering::Equal => 0,\n+                    cmp::Ordering::Greater => 1,\n+                };\n+                destination.write_from_bytes(self, &r.to_le_bytes()[..destination.size])\n+            }\n             \"write\" => {\n                 let [fd, ptr, len] = args else {\n                     return Err(MirEvalError::TypeError(\"libc::write args are not provided\"));"}, {"sha": "8c097539eb5e69fe16b4d6ad5201c1bb7e1dfc40", "filename": "crates/hir-ty/src/mir/eval/tests.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/aab7589c401817d00859f76424508fd11a66d974/crates%2Fhir-ty%2Fsrc%2Fmir%2Feval%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aab7589c401817d00859f76424508fd11a66d974/crates%2Fhir-ty%2Fsrc%2Fmir%2Feval%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fmir%2Feval%2Ftests.rs?ref=aab7589c401817d00859f76424508fd11a66d974", "patch": "@@ -228,6 +228,39 @@ fn main() {\n     );\n }\n \n+#[test]\n+fn memcmp() {\n+    check_pass(\n+        r#\"\n+//- minicore: slice, coerce_unsized, index\n+\n+fn should_not_reach() -> bool {\n+    _ // FIXME: replace this function with panic when that works\n+}\n+\n+extern \"C\" {\n+    fn memcmp(s1: *const u8, s2: *const u8, n: usize) -> i32;\n+}\n+\n+fn my_cmp(x: &[u8], y: &[u8]) -> i32 {\n+    memcmp(x as *const u8, y as *const u8, x.len())\n+}\n+\n+fn main() {\n+    if my_cmp(&[1, 2, 3], &[1, 2, 3]) != 0 {\n+        should_not_reach();\n+    }\n+    if my_cmp(&[1, 20, 3], &[1, 2, 3]) <= 0 {\n+        should_not_reach();\n+    }\n+    if my_cmp(&[1, 2, 3], &[1, 20, 3]) >= 0 {\n+        should_not_reach();\n+    }\n+}\n+    \"#,\n+    );\n+}\n+\n #[test]\n fn unix_write_stdout() {\n     check_pass_and_stdio("}, {"sha": "ebd419983551caa7d032eb6b1434607fab049bf8", "filename": "crates/hir-ty/src/mir/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aab7589c401817d00859f76424508fd11a66d974/crates%2Fhir-ty%2Fsrc%2Fmir%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aab7589c401817d00859f76424508fd11a66d974/crates%2Fhir-ty%2Fsrc%2Fmir%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fmir%2Flower.rs?ref=aab7589c401817d00859f76424508fd11a66d974", "patch": "@@ -829,7 +829,7 @@ impl<'ctx> MirLowerCtx<'ctx> {\n                         op,\n                         BinaryOp::ArithOp(ArithOp::Shl | ArithOp::Shr) | BinaryOp::Assignment { op: Some(ArithOp::Shl | ArithOp::Shr) }\n                     );\n-                    lhs_ty.as_builtin().is_some() && rhs_ty.as_builtin().is_some() && (lhs_ty == rhs_ty || builtin_inequal_impls)\n+                    lhs_ty.is_scalar() && rhs_ty.is_scalar() && (lhs_ty == rhs_ty || builtin_inequal_impls)\n                 };\n                 if !is_builtin {\n                     if let Some((func_id, generic_args)) = self.infer.method_resolution(expr_id) {"}]}