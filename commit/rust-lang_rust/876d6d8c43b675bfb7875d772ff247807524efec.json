{"sha": "876d6d8c43b675bfb7875d772ff247807524efec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3NmQ2ZDhjNDNiNjc1YmZiNzg3NWQ3NzJmZjI0NzgwNzUyNGVmZWM=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2017-12-01T07:10:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-12-01T07:10:30Z"}, "message": "Merge pull request #2166 from HMPerson1/fix_2160\n\nFix #2160", "tree": {"sha": "3d9ee07d8add6ffd619bf3bc065483c6591bf9ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d9ee07d8add6ffd619bf3bc065483c6591bf9ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/876d6d8c43b675bfb7875d772ff247807524efec", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaIQBmCRBK7hj4Ov3rIwAAdHIIAFMtOdv2xafRnxsKVFp7w6ZO\niFiC7XLgE3njXrjDtQO82fpZ21DqkW42OAmtNGxwPH/clGZg/jdXyyhuH1ibONP3\nWraK/W+F+OMKYQx5vVdcViUqUUsKXtll43AijziaoVYQ0vBX5C+Cu1XmXrsJnXz8\nrI3S2B0LRWSw9kygy4z8NC1hCSpiGbd7ZTGB3Ll+JQMQCQB6KMyB3SjMR6nU9U8y\nolB6/AfEdkdmHsX+r0tUfvSucEp+7o2LAjgksmRpCv5KvSDki/IVupVSEzeyClh7\nJJLL38d1fAYfXspH7d+xRE85S1Kx9Ob4ERS1HgOJXZwz/BuTx+685J4TeEoyJRA=\n=97f2\n-----END PGP SIGNATURE-----\n", "payload": "tree 3d9ee07d8add6ffd619bf3bc065483c6591bf9ba\nparent 7d7fef1690218bbb406cf3bcadf7bb29dbb40cc5\nparent c2c324ec657888667a71f361f3cdca48ff843a61\nauthor Oliver Schneider <oli-obk@users.noreply.github.com> 1512112230 +0100\ncommitter GitHub <noreply@github.com> 1512112230 +0100\n\nMerge pull request #2166 from HMPerson1/fix_2160\n\nFix #2160"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/876d6d8c43b675bfb7875d772ff247807524efec", "html_url": "https://github.com/rust-lang/rust/commit/876d6d8c43b675bfb7875d772ff247807524efec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/876d6d8c43b675bfb7875d772ff247807524efec/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d7fef1690218bbb406cf3bcadf7bb29dbb40cc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d7fef1690218bbb406cf3bcadf7bb29dbb40cc5", "html_url": "https://github.com/rust-lang/rust/commit/7d7fef1690218bbb406cf3bcadf7bb29dbb40cc5"}, {"sha": "c2c324ec657888667a71f361f3cdca48ff843a61", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2c324ec657888667a71f361f3cdca48ff843a61", "html_url": "https://github.com/rust-lang/rust/commit/c2c324ec657888667a71f361f3cdca48ff843a61"}], "stats": {"total": 132, "additions": 74, "deletions": 58}, "files": [{"sha": "90e2ef760f752171f5e38cb6dfb505463dd3a066", "filename": "clippy_lints/src/is_unit_expr.rs", "status": "modified", "additions": 50, "deletions": 58, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/876d6d8c43b675bfb7875d772ff247807524efec/clippy_lints%2Fsrc%2Fis_unit_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/876d6d8c43b675bfb7875d772ff247807524efec/clippy_lints%2Fsrc%2Fis_unit_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fis_unit_expr.rs?ref=876d6d8c43b675bfb7875d772ff247807524efec", "patch": "@@ -1,7 +1,7 @@\n use rustc::lint::*;\n use syntax::ast::*;\n use syntax::ext::quote::rt::Span;\n-use utils::span_note_and_lint;\n+use utils::{span_lint, span_note_and_lint};\n \n /// **What it does:** Checks for\n ///  - () being assigned to a variable\n@@ -24,6 +24,12 @@ declare_lint! {\n     \"unintended assignment or use of a unit typed value\"\n }\n \n+#[derive(Copy, Clone)]\n+enum UnitCause {\n+    SemiColon,\n+    EmptyBlock,\n+}\n+\n #[derive(Copy, Clone)]\n pub struct UnitExpr;\n \n@@ -36,43 +42,16 @@ impl LintPass for UnitExpr {\n impl EarlyLintPass for UnitExpr {\n     fn check_expr(&mut self, cx: &EarlyContext, expr: &Expr) {\n         if let ExprKind::Assign(ref _left, ref right) = expr.node {\n-            if let Some(span) = is_unit_expr(right) {\n-                span_note_and_lint(\n-                    cx,\n-                    UNIT_EXPR,\n-                    expr.span,\n-                    \"This expression evaluates to the Unit type ()\",\n-                    span,\n-                    \"Consider removing the trailing semicolon\",\n-                );\n-            }\n+            check_for_unit(cx, right);\n         }\n         if let ExprKind::MethodCall(ref _left, ref args) = expr.node {\n             for arg in args {\n-                if let Some(span) = is_unit_expr(arg) {\n-                    span_note_and_lint(\n-                        cx,\n-                        UNIT_EXPR,\n-                        expr.span,\n-                        \"This expression evaluates to the Unit type ()\",\n-                        span,\n-                        \"Consider removing the trailing semicolon\",\n-                    );\n-                }\n+                check_for_unit(cx, arg);\n             }\n         }\n         if let ExprKind::Call(_, ref args) = expr.node {\n             for arg in args {\n-                if let Some(span) = is_unit_expr(arg) {\n-                    span_note_and_lint(\n-                        cx,\n-                        UNIT_EXPR,\n-                        expr.span,\n-                        \"This expression evaluates to the Unit type ()\",\n-                        span,\n-                        \"Consider removing the trailing semicolon\",\n-                    );\n-                }\n+                check_for_unit(cx, arg);\n             }\n         }\n     }\n@@ -83,28 +62,41 @@ impl EarlyLintPass for UnitExpr {\n                 return;\n             }\n             if let Some(ref expr) = local.init {\n-                if let Some(span) = is_unit_expr(expr) {\n-                    span_note_and_lint(\n-                        cx,\n-                        UNIT_EXPR,\n-                        expr.span,\n-                        \"This expression evaluates to the Unit type ()\",\n-                        span,\n-                        \"Consider removing the trailing semicolon\",\n-                    );\n-                }\n+                check_for_unit(cx, expr);\n             }\n         }\n     }\n }\n \n-fn is_unit_expr(expr: &Expr) -> Option<Span> {\n+fn check_for_unit(cx: &EarlyContext, expr: &Expr) {\n+    match is_unit_expr(expr) {\n+        Some((span, UnitCause::SemiColon)) => span_note_and_lint(\n+            cx,\n+            UNIT_EXPR,\n+            expr.span,\n+            \"This expression evaluates to the Unit type ()\",\n+            span,\n+            \"Consider removing the trailing semicolon\",\n+        ),\n+        Some((_span, UnitCause::EmptyBlock)) => span_lint(\n+            cx,\n+            UNIT_EXPR,\n+            expr.span,\n+            \"This expression evaluates to the Unit type ()\",\n+        ),\n+        None => (),\n+    }\n+}\n+\n+fn is_unit_expr(expr: &Expr) -> Option<(Span, UnitCause)> {\n     match expr.node {\n-        ExprKind::Block(ref block) => if check_last_stmt_in_block(block) {\n-            Some(block.stmts[block.stmts.len() - 1].span)\n-        } else {\n-            None\n-        },\n+        ExprKind::Block(ref block) => match check_last_stmt_in_block(block) {\n+            Some(UnitCause::SemiColon) =>\n+                Some((block.stmts[block.stmts.len() - 1].span, UnitCause::SemiColon)),\n+            Some(UnitCause::EmptyBlock) =>\n+                Some((block.span, UnitCause::EmptyBlock)),\n+            None => None\n+        }\n         ExprKind::If(_, ref then, ref else_) => {\n             let check_then = check_last_stmt_in_block(then);\n             if let Some(ref else_) = *else_ {\n@@ -113,16 +105,15 @@ fn is_unit_expr(expr: &Expr) -> Option<Span> {\n                     return Some(*expr_else);\n                 }\n             }\n-            if check_then {\n-                Some(expr.span)\n-            } else {\n-                None\n+            match check_then {\n+                Some(c) => Some((expr.span, c)),\n+                None => None,\n             }\n         },\n         ExprKind::Match(ref _pattern, ref arms) => {\n             for arm in arms {\n-                if let Some(expr) = is_unit_expr(&arm.body) {\n-                    return Some(expr);\n+                if let Some(r) = is_unit_expr(&arm.body) {\n+                    return Some(r);\n                 }\n             }\n             None\n@@ -131,18 +122,19 @@ fn is_unit_expr(expr: &Expr) -> Option<Span> {\n     }\n }\n \n-fn check_last_stmt_in_block(block: &Block) -> bool {\n+fn check_last_stmt_in_block(block: &Block) -> Option<UnitCause> {\n+    if block.stmts.is_empty() { return Some(UnitCause::EmptyBlock); }\n     let final_stmt = &block.stmts[block.stmts.len() - 1];\n \n \n     // Made a choice here to risk false positives on divergent macro invocations\n     // like `panic!()`\n     match final_stmt.node {\n-        StmtKind::Expr(_) => false,\n+        StmtKind::Expr(_) => None,\n         StmtKind::Semi(ref expr) => match expr.node {\n-            ExprKind::Break(_, _) | ExprKind::Continue(_) | ExprKind::Ret(_) => false,\n-            _ => true,\n+            ExprKind::Break(_, _) | ExprKind::Continue(_) | ExprKind::Ret(_) => None,\n+            _ => Some(UnitCause::SemiColon),\n         },\n-        _ => true,\n+        _ => Some(UnitCause::SemiColon), // not sure what's happening here\n     }\n }"}, {"sha": "6c8f108d9f6e4089db623854e38a7c4515ca6115", "filename": "tests/ui/is_unit_expr.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/876d6d8c43b675bfb7875d772ff247807524efec/tests%2Fui%2Fis_unit_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/876d6d8c43b675bfb7875d772ff247807524efec/tests%2Fui%2Fis_unit_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fis_unit_expr.rs?ref=876d6d8c43b675bfb7875d772ff247807524efec", "patch": "@@ -71,3 +71,9 @@ pub fn foo() -> i32 {\n     };\n     55\n }\n+\n+pub fn issue_2160() {\n+    let x1 = {};\n+    let x2 = if true {} else {};\n+    let x3 = match None { Some(_) => {}, None => {}, };\n+}"}, {"sha": "64a7ad86b7065d3dcc5944a1bbd8c2a612879dd2", "filename": "tests/ui/is_unit_expr.stderr", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/876d6d8c43b675bfb7875d772ff247807524efec/tests%2Fui%2Fis_unit_expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/876d6d8c43b675bfb7875d772ff247807524efec/tests%2Fui%2Fis_unit_expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fis_unit_expr.stderr?ref=876d6d8c43b675bfb7875d772ff247807524efec", "patch": "@@ -51,3 +51,21 @@ note: Consider removing the trailing semicolon\n 42 |             x;\n    |             ^^\n \n+error: This expression evaluates to the Unit type ()\n+  --> $DIR/is_unit_expr.rs:76:14\n+   |\n+76 |     let x1 = {};\n+   |              ^^\n+\n+error: This expression evaluates to the Unit type ()\n+  --> $DIR/is_unit_expr.rs:77:14\n+   |\n+77 |     let x2 = if true {} else {};\n+   |              ^^^^^^^^^^^^^^^^^^\n+\n+error: This expression evaluates to the Unit type ()\n+  --> $DIR/is_unit_expr.rs:78:14\n+   |\n+78 |     let x3 = match None { Some(_) => {}, None => {}, };\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+"}]}