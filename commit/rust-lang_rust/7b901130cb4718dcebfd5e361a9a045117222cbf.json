{"sha": "7b901130cb4718dcebfd5e361a9a045117222cbf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiOTAxMTMwY2I0NzE4ZGNlYmZkNWUzNjFhOWEwNDUxMTcyMjJjYmY=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-03-10T01:29:45Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-03-10T01:29:45Z"}, "message": "Insert a newline before block-formatted generics\n\nFixes #1359", "tree": {"sha": "bfb3c7040e47031586498c4024647c7895962a6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bfb3c7040e47031586498c4024647c7895962a6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b901130cb4718dcebfd5e361a9a045117222cbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b901130cb4718dcebfd5e361a9a045117222cbf", "html_url": "https://github.com/rust-lang/rust/commit/7b901130cb4718dcebfd5e361a9a045117222cbf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b901130cb4718dcebfd5e361a9a045117222cbf/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b60d94a9941f41787efacb59986563e31a05777", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b60d94a9941f41787efacb59986563e31a05777", "html_url": "https://github.com/rust-lang/rust/commit/4b60d94a9941f41787efacb59986563e31a05777"}], "stats": {"total": 39, "additions": 25, "deletions": 14}, "files": [{"sha": "ec3076c9a3b57f0db53f59df9b9e6aec064be6d8", "filename": "rfc-rustfmt.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b901130cb4718dcebfd5e361a9a045117222cbf/rfc-rustfmt.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7b901130cb4718dcebfd5e361a9a045117222cbf/rfc-rustfmt.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rfc-rustfmt.toml?ref=7b901130cb4718dcebfd5e361a9a045117222cbf", "patch": "@@ -1,2 +1,3 @@\n fn_args_layout = \"Block\"\n where_style = \"Rfc\"\n+generics_indent = \"Tabbed\""}, {"sha": "67fa2256daa76b82aaffcec1574e14c200b56793", "filename": "src/config.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b901130cb4718dcebfd5e361a9a045117222cbf/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b901130cb4718dcebfd5e361a9a045117222cbf/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=7b901130cb4718dcebfd5e361a9a045117222cbf", "patch": "@@ -375,6 +375,7 @@ create_config! {\n     where_layout: ListTactic, ListTactic::Vertical, \"Element layout inside a where clause\";\n     where_pred_indent: BlockIndentStyle, BlockIndentStyle::Visual,\n         \"Indentation style of a where predicate\";\n+    generics_style: Style, Style::Default, \"Overall strategy for generics\";\n     generics_indent: BlockIndentStyle, BlockIndentStyle::Visual, \"Indentation of generics\";\n     struct_lit_style: StructLitStyle, StructLitStyle::Block, \"Style of struct definition\";\n     struct_lit_multiline_style: MultilineStyle, MultilineStyle::PreferSingle,"}, {"sha": "2a191815b7ede052af4cadf94686a43a9fba77c4", "filename": "src/items.rs", "status": "modified", "additions": 23, "deletions": 14, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/7b901130cb4718dcebfd5e361a9a045117222cbf/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b901130cb4718dcebfd5e361a9a045117222cbf/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=7b901130cb4718dcebfd5e361a9a045117222cbf", "patch": "@@ -13,7 +13,8 @@\n use {Indent, Shape};\n use codemap::SpanUtils;\n use utils::{format_mutability, format_visibility, contains_skip, end_typaram, wrap_str,\n-            last_line_width, format_unsafety, trim_newlines, stmt_expr, semicolon_for_expr};\n+            last_line_width, format_unsafety, trim_newlines, stmt_expr, semicolon_for_expr,\n+            trimmed_last_line_width};\n use lists::{write_list, itemize_list, ListItem, ListFormatting, SeparatorTactic,\n             DefinitiveListTactic, ListTactic, definitive_tactic, format_item_list};\n use expr::{is_empty_block, is_simple_block_stmt, rewrite_assign_rhs, type_annotation_separator};\n@@ -1468,6 +1469,8 @@ fn rewrite_fn_base(context: &RewriteContext,\n                                                  generics_span));\n     result.push_str(&generics_str);\n \n+    let snuggle_angle_bracket = last_line_width(&generics_str) == 1;\n+\n     // Note that the width and indent don't really matter, we'll re-layout the\n     // return type later anyway.\n     let ret_str = try_opt!(fd.output.rewrite(&context,\n@@ -1495,7 +1498,9 @@ fn rewrite_fn_base(context: &RewriteContext,\n \n     // Check if vertical layout was forced.\n     if one_line_budget == 0 {\n-        if context.config.fn_args_paren_newline {\n+        if snuggle_angle_bracket {\n+            result.push_str(\"(\");\n+        } else if context.config.fn_args_paren_newline {\n             result.push('\\n');\n             result.push_str(&arg_indent.to_string(context.config));\n             arg_indent = arg_indent + 1; // extra space for `(`\n@@ -1534,11 +1539,11 @@ fn rewrite_fn_base(context: &RewriteContext,\n \n     let multi_line_arg_str = arg_str.contains('\\n');\n \n-    let put_args_in_block = match context.config.fn_args_layout {\n+    let put_args_in_block = (match context.config.fn_args_layout {\n         FnArgLayoutStyle::Block => multi_line_arg_str,\n         FnArgLayoutStyle::BlockAlways => true,\n         _ => false,\n-    } && !fd.inputs.is_empty();\n+    } || generics_str.contains('\\n') )&& !fd.inputs.is_empty();\n \n     if put_args_in_block {\n         arg_indent = indent.block_indent(context.config);\n@@ -1920,11 +1925,14 @@ fn rewrite_generics(context: &RewriteContext,\n     let list_str =\n         try_opt!(format_item_list(items, Shape::legacy(h_budget, offset), context.config));\n \n-    Some(if context.config.spaces_within_angle_brackets {\n-             format!(\"< {} >\", list_str)\n-         } else {\n-             format!(\"<{}>\", list_str)\n-         })\n+    let result = if context.config.generics_indent != BlockIndentStyle::Visual && list_str.contains('\\n') {\n+        format!(\"<\\n{}{}\\n{}>\", offset.to_string(context.config), list_str, shape.indent.to_string(context.config))\n+    } else if context.config.spaces_within_angle_brackets {\n+        format!(\"< {} >\", list_str)\n+    } else {\n+        format!(\"<{}>\", list_str)\n+    };\n+    Some(result)\n }\n \n fn rewrite_trait_bounds(context: &RewriteContext,\n@@ -2144,10 +2152,11 @@ fn format_generics(context: &RewriteContext,\n                                                              Density::Tall,\n                                                              terminator,\n                                                              false,\n-                                                             false,\n+                                                             trimmed_last_line_width(&result) == 1,\n                                                              Some(span.hi)));\n         result.push_str(&where_clause_str);\n-        if !force_same_line_brace &&\n+        let same_line_brace = force_same_line_brace || (generics.where_clause.predicates.is_empty() && trimmed_last_line_width(&result) == 1);\n+        if !same_line_brace &&\n            (brace_style == BraceStyle::SameLineWhere || brace_style == BraceStyle::AlwaysNextLine) {\n             result.push('\\n');\n             result.push_str(&offset.block_only().to_string(context.config));\n@@ -2156,11 +2165,11 @@ fn format_generics(context: &RewriteContext,\n         }\n         result.push_str(opener);\n     } else {\n-        if !force_same_line_brace && brace_style == BraceStyle::AlwaysNextLine {\n+        if force_same_line_brace || trimmed_last_line_width(&result) == 1 || brace_style != BraceStyle::AlwaysNextLine {\n+            result.push(' ');\n+        } else {\n             result.push('\\n');\n             result.push_str(&offset.block_only().to_string(context.config));\n-        } else {\n-            result.push(' ');\n         }\n         result.push_str(opener);\n     }"}]}