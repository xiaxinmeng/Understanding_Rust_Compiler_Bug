{"sha": "b2af873b762e5241ff7ad6a4c07f2e9198ef747d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyYWY4NzNiNzYyZTUyNDFmZjdhZDZhNGMwN2YyZTkxOThlZjc0N2Q=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-10-23T04:44:53Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-10-23T04:44:53Z"}, "message": "Merge remote-tracking branch 'luqmana/incoming'", "tree": {"sha": "9cfdc92180bc08cd3b264a69da391abf14434353", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9cfdc92180bc08cd3b264a69da391abf14434353"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2af873b762e5241ff7ad6a4c07f2e9198ef747d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2af873b762e5241ff7ad6a4c07f2e9198ef747d", "html_url": "https://github.com/rust-lang/rust/commit/b2af873b762e5241ff7ad6a4c07f2e9198ef747d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2af873b762e5241ff7ad6a4c07f2e9198ef747d/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7c6f867b378e56b589f0e238913a3818af24816", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7c6f867b378e56b589f0e238913a3818af24816", "html_url": "https://github.com/rust-lang/rust/commit/f7c6f867b378e56b589f0e238913a3818af24816"}, {"sha": "ed447a744717faf1ef83869851003ccb93a1591b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed447a744717faf1ef83869851003ccb93a1591b", "html_url": "https://github.com/rust-lang/rust/commit/ed447a744717faf1ef83869851003ccb93a1591b"}], "stats": {"total": 137, "additions": 104, "deletions": 33}, "files": [{"sha": "6addb106de39034da8a2a68a49256c668dbb7231", "filename": "src/libcore/private.rs", "status": "modified", "additions": 30, "deletions": 14, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/b2af873b762e5241ff7ad6a4c07f2e9198ef747d/src%2Flibcore%2Fprivate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2af873b762e5241ff7ad6a4c07f2e9198ef747d/src%2Flibcore%2Fprivate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprivate.rs?ref=b2af873b762e5241ff7ad6a4c07f2e9198ef747d", "patch": "@@ -5,7 +5,6 @@\n \n #[doc(hidden)];\n \n-use compare_and_swap = rustrt::rust_compare_and_swap_ptr;\n use task::TaskBuilder;\n use task::atomically;\n \n@@ -14,14 +13,6 @@ extern mod rustrt {\n     fn rust_task_weaken(ch: rust_port_id);\n     fn rust_task_unweaken(ch: rust_port_id);\n \n-    #[rust_stack]\n-    fn rust_atomic_increment(p: &mut libc::intptr_t)\n-        -> libc::intptr_t;\n-\n-    #[rust_stack]\n-    fn rust_atomic_decrement(p: &mut libc::intptr_t)\n-        -> libc::intptr_t;\n-\n     #[rust_stack]\n     fn rust_compare_and_swap_ptr(address: &mut libc::uintptr_t,\n                                  oldval: libc::uintptr_t,\n@@ -33,11 +24,36 @@ extern mod rustrt {\n     fn rust_unlock_little_lock(lock: rust_little_lock);\n }\n \n+#[abi = \"rust-intrinsic\"]\n+extern mod rusti {\n+\n+    #[cfg(stage1)] #[cfg(stage2)] #[cfg(stage3)]    \n+    fn atomic_cxchg(dst: &mut int, old: int, src: int) -> int;\n+    fn atomic_xadd(dst: &mut int, src: int) -> int;\n+    fn atomic_xsub(dst: &mut int, src: int) -> int;\n+}\n+\n #[allow(non_camel_case_types)] // runtime type\n type rust_port_id = uint;\n \n type GlobalPtr = *libc::uintptr_t;\n \n+// TODO: Remove once snapshots have atomic_cxchg\n+#[cfg(stage0)]\n+fn compare_and_swap(address: &mut libc::uintptr_t,\n+                    oldval: libc::uintptr_t,\n+                    newval: libc::uintptr_t) -> bool {\n+    rustrt::rust_compare_and_swap_ptr(address, oldval, newval)\n+}\n+\n+#[cfg(stage1)]\n+#[cfg(stage2)]\n+#[cfg(stage3)]\n+fn compare_and_swap(address: &mut int, oldval: int, newval: int) -> bool {\n+    let old = rusti::atomic_cxchg(address, oldval, newval);\n+    old == oldval\n+}\n+\n /**\n  * Atomically gets a channel from a pointer to a pointer-sized memory location\n  * or, if no channel exists creates and installs a new channel and sets up a\n@@ -85,7 +101,7 @@ pub unsafe fn chan_from_global_ptr<T: Send>(\n         log(debug,~\"BEFORE COMPARE AND SWAP\");\n         let swapped = compare_and_swap(\n             cast::reinterpret_cast(&global),\n-            0u, cast::reinterpret_cast(&ch));\n+            0, cast::reinterpret_cast(&ch));\n         log(debug,fmt!(\"AFTER .. swapped? %?\", swapped));\n \n         if swapped {\n@@ -305,7 +321,7 @@ struct ArcDestruct<T> {\n         }\n         do task::unkillable {\n             let data: ~ArcData<T> = cast::reinterpret_cast(&self.data);\n-            let new_count = rustrt::rust_atomic_decrement(&mut data.count);\n+            let new_count = rusti::atomic_xsub(&mut data.count, 1) - 1;\n             assert new_count >= 0;\n             if new_count == 0 {\n                 // Were we really last, or should we hand off to an unwrapper?\n@@ -373,8 +389,8 @@ pub unsafe fn unwrap_shared_mutable_state<T: Send>(rc: SharedMutableState<T>)\n             // Got in. Step 0: Tell destructor not to run. We are now it.\n             rc.data = ptr::null();\n             // Step 1 - drop our own reference.\n-            let new_count = rustrt::rust_atomic_decrement(&mut ptr.count);\n-        //    assert new_count >= 0;\n+            let new_count = rusti::atomic_xsub(&mut ptr.count, 1) - 1;\n+            //assert new_count >= 0;\n             if new_count == 0 {\n                 // We were the last owner. Can unwrap immediately.\n                 // Also we have to free the server endpoints.\n@@ -452,7 +468,7 @@ pub unsafe fn clone_shared_mutable_state<T: Send>(rc: &SharedMutableState<T>)\n         -> SharedMutableState<T> {\n     unsafe {\n         let ptr: ~ArcData<T> = cast::reinterpret_cast(&(*rc).data);\n-        let new_count = rustrt::rust_atomic_increment(&mut ptr.count);\n+        let new_count = rusti::atomic_xadd(&mut ptr.count, 1) + 1;\n         assert new_count >= 2;\n         cast::forget(move ptr);\n     }"}, {"sha": "67281cbee5a365d6bcc2ca60c877f846d6a8a541", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b2af873b762e5241ff7ad6a4c07f2e9198ef747d/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/b2af873b762e5241ff7ad6a4c07f2e9198ef747d/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=b2af873b762e5241ff7ad6a4c07f2e9198ef747d", "patch": "@@ -830,16 +830,6 @@ rust_compare_and_swap_ptr(intptr_t *address,\n     return sync::compare_and_swap(address, oldval, newval);\n }\n \n-extern \"C\" CDECL intptr_t\n-rust_atomic_increment(intptr_t *address) {\n-    return sync::increment(address);\n-}\n-\n-extern \"C\" CDECL intptr_t\n-rust_atomic_decrement(intptr_t *address) {\n-    return sync::decrement(address);\n-}\n-\n extern \"C\" CDECL void\n rust_task_weaken(rust_port_id chan) {\n     rust_task *task = rust_get_current_task();"}, {"sha": "3760c9ff09f4a2e607a387bf403b1056933c7e19", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2af873b762e5241ff7ad6a4c07f2e9198ef747d/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/b2af873b762e5241ff7ad6a4c07f2e9198ef747d/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=b2af873b762e5241ff7ad6a4c07f2e9198ef747d", "patch": "@@ -178,8 +178,6 @@ rust_dbg_do_nothing\n rust_dbg_breakpoint\n rust_osmain_sched_id\n rust_compare_and_swap_ptr\n-rust_atomic_increment\n-rust_atomic_decrement\n rust_global_env_chan_ptr\n rust_port_take\n rust_port_drop\n@@ -207,4 +205,4 @@ rust_gc_metadata\n rust_uv_ip4_port\n rust_uv_ip6_port\n rust_uv_tcp_getpeername\n-rust_uv_tcp_getpeername6\n\\ No newline at end of file\n+rust_uv_tcp_getpeername6"}, {"sha": "f1397006b16b958d61ec1ebd3b3c1d065fcea09e", "filename": "src/rustc/lib/llvm.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b2af873b762e5241ff7ad6a4c07f2e9198ef747d/src%2Frustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2af873b762e5241ff7ad6a4c07f2e9198ef747d/src%2Frustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Flib%2Fllvm.rs?ref=b2af873b762e5241ff7ad6a4c07f2e9198ef747d", "patch": "@@ -843,6 +843,9 @@ extern mod llvm {\n                         Name: *c_char) -> ValueRef;\n \n     /* Atomic Operations */\n+    fn LLVMBuildAtomicCmpXchg(B: BuilderRef, LHS: ValueRef,\n+                              CMP: ValueRef, RHS: ValueRef,\n+                              ++Order: AtomicOrdering) -> ValueRef;\n     fn LLVMBuildAtomicRMW(B: BuilderRef, ++Op: AtomicBinOp,\n                           LHS: ValueRef, RHS: ValueRef,\n                           ++Order: AtomicOrdering) -> ValueRef;"}, {"sha": "f7690b7bc93004dd38fa05a75bc766a38c4bfb28", "filename": "src/rustc/middle/trans/build.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b2af873b762e5241ff7ad6a4c07f2e9198ef747d/src%2Frustc%2Fmiddle%2Ftrans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2af873b762e5241ff7ad6a4c07f2e9198ef747d/src%2Frustc%2Fmiddle%2Ftrans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbuild.rs?ref=b2af873b762e5241ff7ad6a4c07f2e9198ef747d", "patch": "@@ -813,6 +813,11 @@ fn Resume(cx: block, Exn: ValueRef) -> ValueRef {\n }\n \n // Atomic Operations\n+fn AtomicCmpXchg(cx: block, dst: ValueRef,\n+                 cmp: ValueRef, src: ValueRef,\n+                 order: AtomicOrdering) -> ValueRef {\n+    llvm::LLVMBuildAtomicCmpXchg(B(cx), dst, cmp, src, order)\n+}\n fn AtomicRMW(cx: block, op: AtomicBinOp,\n              dst: ValueRef, src: ValueRef,\n              order: AtomicOrdering) -> ValueRef {"}, {"sha": "8fa23ef8fabd8ce2e7de9f43c07dae434914bd65", "filename": "src/rustc/middle/trans/foreign.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b2af873b762e5241ff7ad6a4c07f2e9198ef747d/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2af873b762e5241ff7ad6a4c07f2e9198ef747d/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=b2af873b762e5241ff7ad6a4c07f2e9198ef747d", "patch": "@@ -799,6 +799,30 @@ fn trans_intrinsic(ccx: @crate_ctxt, decl: ValueRef, item: @ast::foreign_item,\n                                Some(substs), Some(item.span));\n     let mut bcx = top_scope_block(fcx, None), lltop = bcx.llbb;\n     match ccx.sess.str_of(item.ident) {\n+        ~\"atomic_cxchg\" => {\n+            let old = AtomicCmpXchg(bcx,\n+                                    get_param(decl, first_real_arg),\n+                                    get_param(decl, first_real_arg + 1u),\n+                                    get_param(decl, first_real_arg + 2u),\n+                                    SequentiallyConsistent);\n+            Store(bcx, old, fcx.llretptr);\n+        }\n+        ~\"atomic_cxchg_acq\" => {\n+            let old = AtomicCmpXchg(bcx,\n+                                    get_param(decl, first_real_arg),\n+                                    get_param(decl, first_real_arg + 1u),\n+                                    get_param(decl, first_real_arg + 2u),\n+                                    Acquire);\n+            Store(bcx, old, fcx.llretptr);\n+        }\n+        ~\"atomic_cxchg_rel\" => {\n+            let old = AtomicCmpXchg(bcx,\n+                                    get_param(decl, first_real_arg),\n+                                    get_param(decl, first_real_arg + 1u),\n+                                    get_param(decl, first_real_arg + 2u),\n+                                    Release);\n+            Store(bcx, old, fcx.llretptr);\n+        }\n         ~\"atomic_xchg\" => {\n             let old = AtomicRMW(bcx, Xchg,\n                                 get_param(decl, first_real_arg),"}, {"sha": "ddd50d47c08fd116fb7cec9ee701a184ca4274c4", "filename": "src/rustc/middle/trans/type_use.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b2af873b762e5241ff7ad6a4c07f2e9198ef747d/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2af873b762e5241ff7ad6a4c07f2e9198ef747d/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=b2af873b762e5241ff7ad6a4c07f2e9198ef747d", "patch": "@@ -98,11 +98,12 @@ fn type_uses_for(ccx: @crate_ctxt, fn_id: def_id, n_tps: uint)\n \n                 ~\"get_tydesc\" | ~\"needs_drop\" => use_tydesc,\n \n-                ~\"atomic_xchg\"     | ~\"atomic_xadd\"     |\n-                ~\"atomic_xsub\"     | ~\"atomic_xchg_acq\" |\n-                ~\"atomic_xadd_acq\" | ~\"atomic_xsub_acq\" |\n-                ~\"atomic_xchg_rel\" | ~\"atomic_xadd_rel\" |\n-                ~\"atomic_xsub_rel\" => 0,\n+                ~\"atomic_cxchg\"    | ~\"atomic_cxchg_acq\"|\n+                ~\"atomic_cxchg_rel\"| ~\"atomic_xchg\"     |\n+                ~\"atomic_xadd\"     | ~\"atomic_xsub\"     |\n+                ~\"atomic_xchg_acq\" | ~\"atomic_xadd_acq\" |\n+                ~\"atomic_xsub_acq\" | ~\"atomic_xchg_rel\" |\n+                ~\"atomic_xadd_rel\" | ~\"atomic_xsub_rel\" => 0,\n \n                 ~\"visit_tydesc\"  | ~\"forget\" | ~\"addr_of\" |\n                 ~\"frame_address\" | ~\"morestack_addr\" => 0,"}, {"sha": "8d65cb9fdac2dfc5c6a0fd2bc8436a963317b518", "filename": "src/rustc/middle/typeck/check.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b2af873b762e5241ff7ad6a4c07f2e9198ef747d/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2af873b762e5241ff7ad6a4c07f2e9198ef747d/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs?ref=b2af873b762e5241ff7ad6a4c07f2e9198ef747d", "patch": "@@ -2638,7 +2638,15 @@ fn check_intrinsic_type(ccx: @crate_ctxt, it: @ast::foreign_item) {\n       }\n       ~\"needs_drop\" => (1u, ~[], ty::mk_bool(tcx)),\n \n-      ~\"atomic_xchg\"     | ~\"atomic_xadd\"     | ~\"atomic_xsub\" |\n+      ~\"atomic_cxchg\"    | ~\"atomic_cxchg_acq\"| ~\"atomic_cxchg_rel\" => {\n+        (0u, ~[arg(ast::by_copy,\n+                   ty::mk_mut_rptr(tcx, ty::re_bound(ty::br_anon(0)),\n+                                   ty::mk_int(tcx))),\n+               arg(ast::by_copy, ty::mk_int(tcx)),\n+               arg(ast::by_copy, ty::mk_int(tcx))],\n+         ty::mk_int(tcx))\n+      }\n+      ~\"atomic_xchg\"     | ~\"atomic_xadd\"     | ~\"atomic_xsub\"     |\n       ~\"atomic_xchg_acq\" | ~\"atomic_xadd_acq\" | ~\"atomic_xsub_acq\" |\n       ~\"atomic_xchg_rel\" | ~\"atomic_xadd_rel\" | ~\"atomic_xsub_rel\" => {\n         (0u, ~[arg(ast::by_copy,"}, {"sha": "39a707ad3206c64022f5403e7b68a45adf03213c", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b2af873b762e5241ff7ad6a4c07f2e9198ef747d/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/b2af873b762e5241ff7ad6a4c07f2e9198ef747d/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=b2af873b762e5241ff7ad6a4c07f2e9198ef747d", "patch": "@@ -482,6 +482,14 @@ extern \"C\" LLVMTypeRef LLVMMetadataType(void) {\n   return LLVMMetadataTypeInContext(LLVMGetGlobalContext());\n }\n \n+extern \"C\" LLVMValueRef LLVMBuildAtomicCmpXchg(LLVMBuilderRef B,\n+                                               LLVMValueRef target,\n+                                               LLVMValueRef old,\n+                                               LLVMValueRef source,\n+                                               AtomicOrdering order) {\n+    return wrap(unwrap(B)->CreateAtomicCmpXchg(unwrap(target), unwrap(old),\n+                                               unwrap(source), order));\n+}\n extern \"C\" LLVMValueRef LLVMBuildAtomicRMW(LLVMBuilderRef B,\n                                            AtomicRMWInst::BinOp op,\n                                            LLVMValueRef target,"}, {"sha": "44636f4f36b16c1c2d7e63cda5db796d8f2142ac", "filename": "src/rustllvm/rustllvm.def.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2af873b762e5241ff7ad6a4c07f2e9198ef747d/src%2Frustllvm%2Frustllvm.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/b2af873b762e5241ff7ad6a4c07f2e9198ef747d/src%2Frustllvm%2Frustllvm.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Frustllvm.def.in?ref=b2af873b762e5241ff7ad6a4c07f2e9198ef747d", "patch": "@@ -84,6 +84,7 @@ LLVMArrayType\n LLVMBasicBlockAsValue\n LLVMBlockAddress\n LLVMBuildAShr\n+LLVMBuildAtomicCmpXchg\n LLVMBuildAtomicRMW\n LLVMBuildAdd\n LLVMBuildAggregateRet"}, {"sha": "f3ea9fd531c38a2992cd9d087ccba3848c3403b2", "filename": "src/test/auxiliary/cci_intrinsic.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2af873b762e5241ff7ad6a4c07f2e9198ef747d/src%2Ftest%2Fauxiliary%2Fcci_intrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2af873b762e5241ff7ad6a4c07f2e9198ef747d/src%2Ftest%2Fauxiliary%2Fcci_intrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_intrinsic.rs?ref=b2af873b762e5241ff7ad6a4c07f2e9198ef747d", "patch": "@@ -2,6 +2,10 @@\n #[abi = \"rust-intrinsic\"]\n extern mod rusti {\n     #[legacy_exports];\n+    fn atomic_cxchg(dst: &mut int, old: int, src: int) -> int;\n+    fn atomic_cxchg_acq(dst: &mut int, old: int, src: int) -> int;\n+    fn atomic_cxchg_rel(dst: &mut int, old: int, src: int) -> int;\n+\n     fn atomic_xchg(dst: &mut int, src: int) -> int;\n     fn atomic_xchg_acq(dst: &mut int, src: int) -> int;\n     fn atomic_xchg_rel(dst: &mut int, src: int) -> int;"}, {"sha": "8438ecf383ec13c75199564d073876310311130a", "filename": "src/test/run-pass/intrinsic-atomics.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b2af873b762e5241ff7ad6a4c07f2e9198ef747d/src%2Ftest%2Frun-pass%2Fintrinsic-atomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2af873b762e5241ff7ad6a4c07f2e9198ef747d/src%2Ftest%2Frun-pass%2Fintrinsic-atomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-atomics.rs?ref=b2af873b762e5241ff7ad6a4c07f2e9198ef747d", "patch": "@@ -1,6 +1,10 @@\n #[abi = \"rust-intrinsic\"]\n extern mod rusti {\n     #[legacy_exports];\n+    fn atomic_cxchg(dst: &mut int, old: int, src: int) -> int;\n+    fn atomic_cxchg_acq(dst: &mut int, old: int, src: int) -> int;\n+    fn atomic_cxchg_rel(dst: &mut int, old: int, src: int) -> int;\n+\n     fn atomic_xchg(dst: &mut int, src: int) -> int;\n     fn atomic_xchg_acq(dst: &mut int, src: int) -> int;\n     fn atomic_xchg_rel(dst: &mut int, src: int) -> int;\n@@ -17,6 +21,15 @@ extern mod rusti {\n fn main() {\n     let x = ~mut 1;\n \n+    assert rusti::atomic_cxchg(x, 1, 2) == 1;\n+    assert *x == 2;\n+\n+    assert rusti::atomic_cxchg_acq(x, 1, 3) == 2;\n+    assert *x == 2;\n+\n+    assert rusti::atomic_cxchg_rel(x, 2, 1) == 2;\n+    assert *x == 1;\n+\n     assert rusti::atomic_xchg(x, 0) == 1;\n     assert *x == 0;\n "}]}