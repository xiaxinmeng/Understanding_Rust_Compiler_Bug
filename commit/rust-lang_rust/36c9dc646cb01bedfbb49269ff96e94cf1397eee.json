{"sha": "36c9dc646cb01bedfbb49269ff96e94cf1397eee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2YzlkYzY0NmNiMDFiZWRmYmI0OTI2OWZmOTZlOTRjZjEzOTdlZWU=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2019-01-27T14:14:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-01-27T14:14:57Z"}, "message": "Merge pull request #3293 from scampi/issue-3241\n\nKeep leading colons for global paths", "tree": {"sha": "68147c9d8bb073ed01220ec79dc8ef0f49ed04c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68147c9d8bb073ed01220ec79dc8ef0f49ed04c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36c9dc646cb01bedfbb49269ff96e94cf1397eee", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcTbzhCRBK7hj4Ov3rIwAAdHIIAEt/c+x2iV0sZM8AFXD7Cy9f\nVwlKAYHHNxqmWHFM1t8w/9v190bfz9wg6yHQdtT489PnHiItjr5RxQwLIkttcjPQ\nQGwLkIzn69a8KS8tpcJA3HKwHcoOsP3gnUSaMJMyxGGTKZFM2M59cANSoyyUYqo3\nJWY5iH2CvI0bduSK24L2RnVFCF0soSpKxiWE/xNOBgiDNVyZOmIFTyjaR2GTCufa\nvKtDnYgQsh4tyXvr6oqtVWTiTe87B+reO/mph5S1oYZaeffSZE8wezvAYEVL1n1A\nk+e4vflq3Ed6QryRGF36yI5hShJQ+JGqkuqlD5WsCYb9mDto+74AK5WKQnvdA8A=\n=Da4g\n-----END PGP SIGNATURE-----\n", "payload": "tree 68147c9d8bb073ed01220ec79dc8ef0f49ed04c3\nparent 5b6f6431a3d81026a1987f5081e64262ac96af82\nparent 2125ad272e036c13547e6c6ff8cdfd0188c91fd7\nauthor Seiichi Uchida <seuchida@gmail.com> 1548598497 +0900\ncommitter GitHub <noreply@github.com> 1548598497 +0900\n\nMerge pull request #3293 from scampi/issue-3241\n\nKeep leading colons for global paths"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36c9dc646cb01bedfbb49269ff96e94cf1397eee", "html_url": "https://github.com/rust-lang/rust/commit/36c9dc646cb01bedfbb49269ff96e94cf1397eee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36c9dc646cb01bedfbb49269ff96e94cf1397eee/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b6f6431a3d81026a1987f5081e64262ac96af82", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b6f6431a3d81026a1987f5081e64262ac96af82", "html_url": "https://github.com/rust-lang/rust/commit/5b6f6431a3d81026a1987f5081e64262ac96af82"}, {"sha": "2125ad272e036c13547e6c6ff8cdfd0188c91fd7", "url": "https://api.github.com/repos/rust-lang/rust/commits/2125ad272e036c13547e6c6ff8cdfd0188c91fd7", "html_url": "https://github.com/rust-lang/rust/commit/2125ad272e036c13547e6c6ff8cdfd0188c91fd7"}], "stats": {"total": 80, "additions": 66, "deletions": 14}, "files": [{"sha": "acdb0b35ef89b445bdd195f573e6c1872401bcce", "filename": "README.md", "status": "modified", "additions": 24, "deletions": 10, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/36c9dc646cb01bedfbb49269ff96e94cf1397eee/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/36c9dc646cb01bedfbb49269ff96e94cf1397eee/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=36c9dc646cb01bedfbb49269ff96e94cf1397eee", "patch": "@@ -15,24 +15,33 @@ the \"travis example\" badge above.\n \n You can run `rustfmt` with Rust 1.24 and above.\n \n+### On the Stable toolchain\n+\n To install:\n \n-```\n+```sh\n rustup component add rustfmt\n ```\n \n-to run on a cargo project in the current working directory:\n+To run on a cargo project in the current working directory:\n \n-```\n+```sh\n cargo fmt\n ```\n \n-For the latest and greatest `rustfmt` (nightly required):\n-```\n+### On the Nightly toolchain\n+\n+For the latest and greatest `rustfmt`, nightly is required.\n+\n+To install:\n+\n+```sh\n rustup component add rustfmt --toolchain nightly\n ```\n-To run:\n-```\n+\n+To run on a cargo project in the current working directory:\n+\n+```sh\n cargo +nightly fmt\n ```\n \n@@ -67,15 +76,15 @@ because in the future Rustfmt might work on code where it currently does not):\n \n ## Installation\n \n-```\n+```sh\n rustup component add rustfmt\n ```\n \n ## Installing from source\n \n To install from source (nightly required), first checkout to the tag or branch you want to install, then issue\n \n-```\n+```sh\n cargo install --path .\n ```\n \n@@ -161,6 +170,11 @@ Configuration options are either stable or unstable. Stable options can always\n be used, while unstable ones are only available on a nightly toolchain, and opt-in.\n See [Configurations.md](Configurations.md) for details.\n \n+### Rust's Editions\n+\n+Rustfmt is able to pick up the edition used by reading the `Cargo.toml` file if\n+executed through the Cargo's formatting tool `cargo fmt`. Otherwise, the edition\n+needs to be specified in `rustfmt.toml`, e.g., with `edition = \"2018\"`.\n \n ## Tips\n \n@@ -178,7 +192,7 @@ See [Configurations.md](Configurations.md) for details.\n \n   Example:\n \n-  ```\n+  ```sh\n   cargo fmt -- --emit files\n   ```\n "}, {"sha": "dea8fdf313fbc1830a237509ea2e32f9e5b6e2d3", "filename": "src/imports.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/36c9dc646cb01bedfbb49269ff96e94cf1397eee/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36c9dc646cb01bedfbb49269ff96e94cf1397eee/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=36c9dc646cb01bedfbb49269ff96e94cf1397eee", "patch": "@@ -324,9 +324,8 @@ impl UseTree {\n             attrs,\n         };\n \n-        let leading_modsep = context.config.edition() == Edition::Edition2018\n-            && a.prefix.to_string().len() > 2\n-            && a.prefix.to_string().starts_with(\"::\");\n+        let leading_modsep =\n+            context.config.edition() == Edition::Edition2018 && a.prefix.is_global();\n \n         let mut modsep = leading_modsep;\n \n@@ -339,6 +338,10 @@ impl UseTree {\n \n         match a.kind {\n             UseTreeKind::Glob => {\n+                // in case of a global path and the glob starts at the root, e.g., \"::*\"\n+                if a.prefix.segments.len() == 1 && leading_modsep {\n+                    result.path.push(UseSegment::Ident(\"\".to_owned(), None));\n+                }\n                 result.path.push(UseSegment::Glob);\n             }\n             UseTreeKind::Nested(ref list) => {\n@@ -357,6 +360,11 @@ impl UseTree {\n                     false,\n                 )\n                 .collect();\n+                // in case of a global path and the nested list starts at the root,\n+                // e.g., \"::{foo, bar}\"\n+                if a.prefix.segments.len() == 1 && leading_modsep {\n+                    result.path.push(UseSegment::Ident(\"\".to_owned(), None));\n+                }\n                 result.path.push(UseSegment::List(\n                     list.iter()\n                         .zip(items.into_iter())\n@@ -367,7 +375,15 @@ impl UseTree {\n                 ));\n             }\n             UseTreeKind::Simple(ref rename, ..) => {\n-                let name = rewrite_ident(context, path_to_imported_ident(&a.prefix)).to_owned();\n+                // If the path has leading double colons and is composed of only 2 segments, then we\n+                // bypass the call to path_to_imported_ident which would get only the ident and\n+                // lose the path root, e.g., `that` in `::that`.\n+                // The span of `a.prefix` contains the leading colons.\n+                let name = if a.prefix.segments.len() == 2 && leading_modsep {\n+                    context.snippet(a.prefix.span).to_owned()\n+                } else {\n+                    rewrite_ident(context, path_to_imported_ident(&a.prefix)).to_owned()\n+                };\n                 let alias = rename.and_then(|ident| {\n                     if ident.name == \"_\" {\n                         // for impl-only-use"}, {"sha": "090284a21fdce001724746a5256e53b57992b5e5", "filename": "tests/source/issue-3241.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/36c9dc646cb01bedfbb49269ff96e94cf1397eee/tests%2Fsource%2Fissue-3241.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36c9dc646cb01bedfbb49269ff96e94cf1397eee/tests%2Fsource%2Fissue-3241.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-3241.rs?ref=36c9dc646cb01bedfbb49269ff96e94cf1397eee", "patch": "@@ -0,0 +1,11 @@\n+// rustfmt-edition: 2018\n+\n+use ::ignore;\n+use ::ignore::some::more;\n+use ::{foo, bar};\n+use ::*;\n+use ::baz::{foo, bar};\n+\n+fn main() {\n+    println!(\"Hello, world!\");\n+}"}, {"sha": "60b452abdde916c7788c6c53649f6c5fa6878854", "filename": "tests/target/issue-3241.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/36c9dc646cb01bedfbb49269ff96e94cf1397eee/tests%2Ftarget%2Fissue-3241.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36c9dc646cb01bedfbb49269ff96e94cf1397eee/tests%2Ftarget%2Fissue-3241.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-3241.rs?ref=36c9dc646cb01bedfbb49269ff96e94cf1397eee", "patch": "@@ -0,0 +1,11 @@\n+// rustfmt-edition: 2018\n+\n+use ::baz::{bar, foo};\n+use ::ignore;\n+use ::ignore::some::more;\n+use ::*;\n+use ::{bar, foo};\n+\n+fn main() {\n+    println!(\"Hello, world!\");\n+}"}]}