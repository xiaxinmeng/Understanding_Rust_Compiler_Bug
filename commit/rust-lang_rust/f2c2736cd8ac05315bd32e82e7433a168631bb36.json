{"sha": "f2c2736cd8ac05315bd32e82e7433a168631bb36", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyYzI3MzZjZDhhYzA1MzE1YmQzMmU4MmU3NDMzYTE2ODYzMWJiMzY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-05-11T14:28:57Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-05-11T14:28:57Z"}, "message": "Rollup merge of #25290 - bluss:docfixes, r=steveklabnik\n\nSeveral Minor API / Reference Documentation Fixes\r\n\r\n- Fix a few small errors in the reference.\r\n- Fix paper cuts in the API docs.\r\n\r\nFixes #24882\r\nFixes #25233\r\nFixes #25250", "tree": {"sha": "46a9bd9db71858539475d1433e9003c2ddf98001", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46a9bd9db71858539475d1433e9003c2ddf98001"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2c2736cd8ac05315bd32e82e7433a168631bb36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2c2736cd8ac05315bd32e82e7433a168631bb36", "html_url": "https://github.com/rust-lang/rust/commit/f2c2736cd8ac05315bd32e82e7433a168631bb36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2c2736cd8ac05315bd32e82e7433a168631bb36/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f01d8d7c290f24980e2915b2df14d244eb430a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f01d8d7c290f24980e2915b2df14d244eb430a2", "html_url": "https://github.com/rust-lang/rust/commit/8f01d8d7c290f24980e2915b2df14d244eb430a2"}, {"sha": "aabdd8e0a607643915020c072923fdf135358921", "url": "https://api.github.com/repos/rust-lang/rust/commits/aabdd8e0a607643915020c072923fdf135358921", "html_url": "https://github.com/rust-lang/rust/commit/aabdd8e0a607643915020c072923fdf135358921"}], "stats": {"total": 49, "additions": 32, "deletions": 17}, "files": [{"sha": "5a445bb42a6b2f5524a0caf7c1ba19ca5039b688", "filename": "src/doc/reference.md", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f2c2736cd8ac05315bd32e82e7433a168631bb36/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/f2c2736cd8ac05315bd32e82e7433a168631bb36/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=f2c2736cd8ac05315bd32e82e7433a168631bb36", "patch": "@@ -653,9 +653,10 @@ There are several kinds of item:\n * [`use` declarations](#use-declarations)\n * [modules](#modules)\n * [functions](#functions)\n-* [type definitions](#type-definitions)\n+* [type aliases](#type-aliases)\n * [structures](#structures)\n * [enumerations](#enumerations)\n+* [constant items](#constant-items)\n * [static items](#static-items)\n * [traits](#traits)\n * [implementations](#implementations)\n@@ -672,16 +673,16 @@ which sub-item declarations may appear.\n \n ### Type Parameters\n \n-All items except modules may be *parameterized* by type. Type parameters are\n-given as a comma-separated list of identifiers enclosed in angle brackets\n-(`<...>`), after the name of the item and before its definition. The type\n-parameters of an item are considered \"part of the name\", not part of the type\n-of the item. A referencing [path](#paths) must (in principle) provide type\n-arguments as a list of comma-separated types enclosed within angle brackets, in\n-order to refer to the type-parameterized item. In practice, the type-inference\n-system can usually infer such argument types from context. There are no\n-general type-parametric types, only type-parametric items. That is, Rust has\n-no notion of type abstraction: there are no first-class \"forall\" types.\n+All items except modules, constants and statics may be *parameterized* by type.\n+Type parameters are given as a comma-separated list of identifiers enclosed in\n+angle brackets (`<...>`), after the name of the item and before its definition.\n+The type parameters of an item are considered \"part of the name\", not part of\n+the type of the item. A referencing [path](#paths) must (in principle) provide\n+type arguments as a list of comma-separated types enclosed within angle\n+brackets, in order to refer to the type-parameterized item. In practice, the\n+type-inference system can usually infer such argument types from context. There\n+are no general type-parametric types, only type-parametric items. That is, Rust\n+has no notion of type abstraction: there are no first-class \"forall\" types.\n \n ### Modules\n \n@@ -743,7 +744,7 @@ mod thread {\n }\n ```\n \n-##### Extern crate declarations\n+#### Extern crate declarations\n \n An _`extern crate` declaration_ specifies a dependency on an external crate.\n The external crate is then bound into the declaring scope as the `ident`\n@@ -767,7 +768,7 @@ extern crate std; // equivalent to: extern crate std as std;\n extern crate std as ruststd; // linking to 'std' under another name\n ```\n \n-##### Use declarations\n+#### Use declarations\n \n A _use declaration_ creates one or more local name bindings synonymous with\n some other [path](#paths). Usually a `use` declaration is used to shorten the"}, {"sha": "d5a069b194a5de3535c7fdc4664faf70ea095733", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f2c2736cd8ac05315bd32e82e7433a168631bb36/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2c2736cd8ac05315bd32e82e7433a168631bb36/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=f2c2736cd8ac05315bd32e82e7433a168631bb36", "patch": "@@ -1002,7 +1002,7 @@ pub trait SliceConcatExt<T: ?Sized> {\n     /// The resulting type after concatenation\n     type Output;\n \n-    /// Flattens a slice of `T` into a single value `U`.\n+    /// Flattens a slice of `T` into a single value `Self::Output`.\n     ///\n     /// # Examples\n     ///\n@@ -1012,7 +1012,8 @@ pub trait SliceConcatExt<T: ?Sized> {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn concat(&self) -> Self::Output;\n \n-    /// Flattens a slice of `T` into a single value `U`, placing a given separator between each.\n+    /// Flattens a slice of `T` into a single value `Self::Output`, placing a given separator\n+    /// between each.\n     ///\n     /// # Examples\n     ///"}, {"sha": "11ca6e332b5713da5c204c7cd65755269aaab7b0", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f2c2736cd8ac05315bd32e82e7433a168631bb36/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2c2736cd8ac05315bd32e82e7433a168631bb36/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=f2c2736cd8ac05315bd32e82e7433a168631bb36", "patch": "@@ -44,8 +44,11 @@ pub trait FromStr {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type Err;\n \n-    /// Parses a string `s` to return an optional value of this type. If the\n-    /// string is ill-formatted, the None is returned.\n+    /// Parses a string `s` to return a value of this type.\n+    ///\n+    /// If parsing succeeds, return the value inside `Ok`, otherwise\n+    /// when the string is ill-formatted return an error specific to the\n+    /// inside `Err`. The error type is specific to implementation of the trait.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn from_str(s: &str) -> Result<Self, Self::Err>;\n }"}, {"sha": "21f873e687743ed7918202f9b3f10e3ecb12d6b9", "filename": "src/libstd/path.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f2c2736cd8ac05315bd32e82e7433a168631bb36/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2c2736cd8ac05315bd32e82e7433a168631bb36/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=f2c2736cd8ac05315bd32e82e7433a168631bb36", "patch": "@@ -1449,6 +1449,8 @@ impl Path {\n \n     /// Determines whether `base` is a prefix of `self`.\n     ///\n+    /// Only considers whole path components to match.\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -1457,6 +1459,8 @@ impl Path {\n     /// let path = Path::new(\"/etc/passwd\");\n     ///\n     /// assert!(path.starts_with(\"/etc\"));\n+    ///\n+    /// assert!(!path.starts_with(\"/e\"));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn starts_with<P: AsRef<Path>>(&self, base: P) -> bool {\n@@ -1465,6 +1469,8 @@ impl Path {\n \n     /// Determines whether `child` is a suffix of `self`.\n     ///\n+    /// Only considers whole path components to match.\n+    ///\n     /// # Examples\n     ///\n     /// ```"}, {"sha": "2e043c58a5da94e9cf733a59d100d31545c16b78", "filename": "src/libstd/thread/local.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2c2736cd8ac05315bd32e82e7433a168631bb36/src%2Flibstd%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2c2736cd8ac05315bd32e82e7433a168631bb36/src%2Flibstd%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Flocal.rs?ref=f2c2736cd8ac05315bd32e82e7433a168631bb36", "patch": "@@ -85,6 +85,8 @@ pub struct LocalKey<T> {\n }\n \n /// Declare a new thread local storage key of type `std::thread::LocalKey`.\n+///\n+/// See [LocalKey documentation](thread/struct.LocalKey.html) for more information.\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[allow_internal_unstable]"}, {"sha": "e195c3aaa3f8f8c0b021fb2b6df45d37f0a30364", "filename": "src/libstd/thread/scoped_tls.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2c2736cd8ac05315bd32e82e7433a168631bb36/src%2Flibstd%2Fthread%2Fscoped_tls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2c2736cd8ac05315bd32e82e7433a168631bb36/src%2Flibstd%2Fthread%2Fscoped_tls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fscoped_tls.rs?ref=f2c2736cd8ac05315bd32e82e7433a168631bb36", "patch": "@@ -66,6 +66,8 @@ pub struct ScopedKey<T> { #[doc(hidden)] pub inner: __impl::KeyInner<T> }\n ///\n /// This macro declares a `static` item on which methods are used to get and\n /// set the value stored within.\n+///\n+/// See [ScopedKey documentation](thread/struct.ScopedKey.html) for more information.\n #[macro_export]\n #[allow_internal_unstable]\n macro_rules! scoped_thread_local {"}]}