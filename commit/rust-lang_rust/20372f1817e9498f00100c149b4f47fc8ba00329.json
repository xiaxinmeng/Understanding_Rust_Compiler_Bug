{"sha": "20372f1817e9498f00100c149b4f47fc8ba00329", "node_id": "C_kwDOAAsO6NoAKDIwMzcyZjE4MTdlOTQ5OGYwMDEwMGMxNDliNGY0N2ZjOGJhMDAzMjk", "commit": {"author": {"name": "jyn", "email": "github@jyn.dev", "date": "2023-05-25T18:37:24Z"}, "committer": {"name": "jyn", "email": "github@jyn.dev", "date": "2023-05-29T18:26:44Z"}, "message": "Add a `make_run_crates` function and use it Rustc and Std\n\nThis fixes the panic from the previous commit.", "tree": {"sha": "e477c8bb11c2b919c45d1879375d79620f1b5fce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e477c8bb11c2b919c45d1879375d79620f1b5fce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20372f1817e9498f00100c149b4f47fc8ba00329", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20372f1817e9498f00100c149b4f47fc8ba00329", "html_url": "https://github.com/rust-lang/rust/commit/20372f1817e9498f00100c149b4f47fc8ba00329", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20372f1817e9498f00100c149b4f47fc8ba00329/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "564e3adfdfdd761a8fa94e5e33abd04ae5f14675", "url": "https://api.github.com/repos/rust-lang/rust/commits/564e3adfdfdd761a8fa94e5e33abd04ae5f14675", "html_url": "https://github.com/rust-lang/rust/commit/564e3adfdfdd761a8fa94e5e33abd04ae5f14675"}], "stats": {"total": 27, "additions": 17, "deletions": 10}, "files": [{"sha": "09835516f7bd3c2d61a9e3953ab3fabd0b55f149", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/20372f1817e9498f00100c149b4f47fc8ba00329/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20372f1817e9498f00100c149b4f47fc8ba00329/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=20372f1817e9498f00100c149b4f47fc8ba00329", "patch": "@@ -2,7 +2,9 @@\n \n use crate::builder::{crate_description, Builder, Kind, RunConfig, ShouldRun, Step};\n use crate::cache::Interned;\n-use crate::compile::{add_to_sysroot, run_cargo, rustc_cargo, rustc_cargo_env, std_cargo};\n+use crate::compile::{\n+    add_to_sysroot, make_run_crates, run_cargo, rustc_cargo, rustc_cargo_env, std_cargo,\n+};\n use crate::config::TargetSelection;\n use crate::tool::{prepare_tool_cargo, SourceType};\n use crate::INTERNER;\n@@ -88,7 +90,7 @@ impl Step for Std {\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n-        let crates = run.cargo_crates_in_set();\n+        let crates = make_run_crates(&run, \"library\");\n         run.builder.ensure(Std { target: run.target, crates });\n     }\n \n@@ -218,7 +220,7 @@ impl Step for Rustc {\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n-        let crates = run.cargo_crates_in_set();\n+        let crates = make_run_crates(&run, \"compiler\");\n         run.builder.ensure(Rustc { target: run.target, crates });\n     }\n "}, {"sha": "7b9c4c0f3b3a8b085ba90a6e7c8d9cc3cc96194b", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/20372f1817e9498f00100c149b4f47fc8ba00329/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20372f1817e9498f00100c149b4f47fc8ba00329/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=20372f1817e9498f00100c149b4f47fc8ba00329", "patch": "@@ -48,6 +48,17 @@ impl Std {\n     }\n }\n \n+/// Given an `alias` selected by the `Step` and the paths passed on the command line,\n+/// return a list of the crates that should be built.\n+///\n+/// Normally, people will pass *just* `library` if they pass it.\n+/// But it's possible (although strange) to pass something like `library std core`.\n+/// Build all crates anyway, as if they hadn't passed the other args.\n+pub(crate) fn make_run_crates(run: &RunConfig<'_>, alias: &str) -> Interned<Vec<String>> {\n+    let has_alias = run.paths.iter().any(|set| set.assert_single_path().path.ends_with(alias));\n+    if has_alias { Default::default() } else { run.cargo_crates_in_set() }\n+}\n+\n impl Step for Std {\n     type Output = ();\n     const DEFAULT: bool = true;\n@@ -62,16 +73,10 @@ impl Step for Std {\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n-        // Normally, people will pass *just* library if they pass it.\n-        // But it's possible (although strange) to pass something like `library std core`.\n-        // Build all crates anyway, as if they hadn't passed the other args.\n-        let has_library =\n-            run.paths.iter().any(|set| set.assert_single_path().path.ends_with(\"library\"));\n-        let crates = if has_library { Default::default() } else { run.cargo_crates_in_set() };\n         run.builder.ensure(Std {\n             compiler: run.builder.compiler(run.builder.top_stage, run.build_triple()),\n             target: run.target,\n-            crates,\n+            crates: make_run_crates(&run, \"library\"),\n         });\n     }\n "}]}