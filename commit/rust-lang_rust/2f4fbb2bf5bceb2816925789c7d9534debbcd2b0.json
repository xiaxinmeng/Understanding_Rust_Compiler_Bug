{"sha": "2f4fbb2bf5bceb2816925789c7d9534debbcd2b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmNGZiYjJiZjViY2ViMjgxNjkyNTc4OWM3ZDk1MzRkZWJiY2QyYjA=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-11-03T13:00:22Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-11-04T09:06:50Z"}, "message": "Merge first three chapters into one.\n\nConceptually, this makes more sense as one introductory chapter.", "tree": {"sha": "a4c264f2e610ca0885b9c2e403f96c23825b6cdc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4c264f2e610ca0885b9c2e403f96c23825b6cdc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f4fbb2bf5bceb2816925789c7d9534debbcd2b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f4fbb2bf5bceb2816925789c7d9534debbcd2b0", "html_url": "https://github.com/rust-lang/rust/commit/2f4fbb2bf5bceb2816925789c7d9534debbcd2b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f4fbb2bf5bceb2816925789c7d9534debbcd2b0/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75a6d5175062bf799075a96e58dad79daa195520", "url": "https://api.github.com/repos/rust-lang/rust/commits/75a6d5175062bf799075a96e58dad79daa195520", "html_url": "https://github.com/rust-lang/rust/commit/75a6d5175062bf799075a96e58dad79daa195520"}], "stats": {"total": 1219, "additions": 609, "deletions": 610}, "files": [{"sha": "704bcf1587b8a54b766f846e266921a927e289b6", "filename": "src/doc/trpl/SUMMARY.md", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2f4fbb2bf5bceb2816925789c7d9534debbcd2b0/src%2Fdoc%2Ftrpl%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/2f4fbb2bf5bceb2816925789c7d9534debbcd2b0/src%2Fdoc%2Ftrpl%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2FSUMMARY.md?ref=2f4fbb2bf5bceb2816925789c7d9534debbcd2b0", "patch": "@@ -1,9 +1,6 @@\n # Summary\n \n * [Getting Started](getting-started.md)\n-    * [Installing Rust](installing-rust.md)\n-    * [Hello, world!](hello-world.md)\n-    * [Hello, Cargo!](hello-cargo.md)\n * [Learn Rust](learn-rust.md)\n     * [Guessing Game](guessing-game.md)\n     * [Dining Philosophers](dining-philosophers.md)"}, {"sha": "caf87601a0be26e50d48d2b4a614d0bd8deda900", "filename": "src/doc/trpl/getting-started.md", "status": "modified", "additions": 609, "deletions": 0, "changes": 609, "blob_url": "https://github.com/rust-lang/rust/blob/2f4fbb2bf5bceb2816925789c7d9534debbcd2b0/src%2Fdoc%2Ftrpl%2Fgetting-started.md", "raw_url": "https://github.com/rust-lang/rust/raw/2f4fbb2bf5bceb2816925789c7d9534debbcd2b0/src%2Fdoc%2Ftrpl%2Fgetting-started.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fgetting-started.md?ref=2f4fbb2bf5bceb2816925789c7d9534debbcd2b0", "patch": "@@ -3,3 +3,612 @@\n This first section of the book will get us going with Rust and its tooling.\n First, we\u2019ll install Rust. Then, the classic \u2018Hello World\u2019 program. Finally,\n we\u2019ll talk about Cargo, Rust\u2019s build system and package manager.\n+\n+# Installing Rust\n+\n+The first step to using Rust is to install it. Generally speaking, you\u2019ll need\n+an internet connection to run the commands in this chapter, as we\u2019ll be\n+downloading Rust from the internet.\n+\n+We\u2019ll be showing off a number of commands using a terminal, and those lines all\n+start with `$`. We don't need to type in the `$`s, they are there to indicate\n+the start of each command. We\u2019ll see many tutorials and examples around the web\n+that follow this convention: `$` for commands run as our regular user, and `#`\n+for commands we should be running as an administrator.\n+\n+## Platform support\n+\n+The Rust compiler runs on, and compiles to, a great number of platforms, though\n+not all platforms are equally supported. Rust's support levels are organized\n+into three tiers, each with a different set of guarantees.\n+\n+Platforms are identified by their \"target triple\" which is the string to inform\n+the compiler what kind of output should be produced. The columns below indicate\n+whether the corresponding component works on the specified platform.\n+\n+### Tier 1\n+\n+Tier 1 platforms can be thought of as \"guaranteed to build and work\".\n+Specifically they will each satisfy the following requirements:\n+\n+* Automated testing is set up to run tests for the platform.\n+* Landing changes to the `rust-lang/rust` repository's master branch is gated on\n+  tests passing.\n+* Official release artifacts are provided for the platform.\n+* Documentation for how to use and how to build the platform is available.\n+\n+|  Target                       | std |rustc|cargo| notes                      |\n+|-------------------------------|-----|-----|-----|----------------------------|\n+| `x86_64-pc-windows-msvc`      |  \u2713  |  \u2713  |  \u2713  | 64-bit MSVC (Windows 7+)   |\n+| `i686-pc-windows-gnu`         |  \u2713  |  \u2713  |  \u2713  | 32-bit MinGW (Windows 7+)  |\n+| `x86_64-pc-windows-gnu`       |  \u2713  |  \u2713  |  \u2713  | 64-bit MinGW (Windows 7+)  |\n+| `i686-apple-darwin`           |  \u2713  |  \u2713  |  \u2713  | 32-bit OSX (10.7+, Lion+)  |\n+| `x86_64-apple-darwin`         |  \u2713  |  \u2713  |  \u2713  | 64-bit OSX (10.7+, Lion+)  |\n+| `i686-unknown-linux-gnu`      |  \u2713  |  \u2713  |  \u2713  | 32-bit Linux (2.6.18+)     |\n+| `x86_64-unknown-linux-gnu`    |  \u2713  |  \u2713  |  \u2713  | 64-bit Linux (2.6.18+)     |\n+\n+### Tier 2\n+\n+Tier 2 platforms can be thought of as \"guaranteed to build\". Automated tests\n+are not run so it's not guaranteed to produce a working build, but platforms\n+often work to quite a good degree and patches are always welcome! Specifically,\n+these platforms are required to have each of the following:\n+\n+* Automated building is set up, but may not be running tests.\n+* Landing changes to the `rust-lang/rust` repository's master branch is gated on\n+  platforms **building**. Note that this means for some platforms only the\n+  standard library is compiled, but for others the full bootstrap is run.\n+* Official release artifacts are provided for the platform.\n+\n+|  Target                       | std |rustc|cargo| notes                      |\n+|-------------------------------|-----|-----|-----|----------------------------|\n+| `i686-pc-windows-msvc`        |  \u2713  |  \u2713  |  \u2713  | 32-bit MSVC (Windows 7+)   |\n+\n+### Tier 3\n+\n+Tier 3 platforms are those which Rust has support for, but landing changes is\n+not gated on the platform either building or passing tests. Working builds for\n+these platforms may be spotty as their reliability is often defined in terms of\n+community contributions. Additionally, release artifacts and installers are not\n+provided, but there may be community infrastructure producing these in\n+unofficial locations.\n+\n+|  Target                       | std |rustc|cargo| notes                      |\n+|-------------------------------|-----|-----|-----|----------------------------|\n+| `x86_64-unknown-linux-musl`   |  \u2713  |     |     | 64-bit Linux with MUSL     |\n+| `arm-linux-androideabi`       |  \u2713  |     |     | ARM Android                |\n+| `i686-linux-android`          |  \u2713  |     |     | 32-bit x86 Android         |\n+| `aarch64-linux-android`       |  \u2713  |     |     | ARM64 Android              |\n+| `arm-unknown-linux-gnueabi`   |  \u2713  |  \u2713  |     | ARM Linux (2.6.18+)        |\n+| `arm-unknown-linux-gnueabihf` |  \u2713  |  \u2713  |     | ARM Linux (2.6.18+)        |\n+| `aarch64-unknown-linux-gnu`   |  \u2713  |     |     | ARM64 Linux (2.6.18+)      |\n+| `mips-unknown-linux-gnu`      |  \u2713  |     |     | MIPS Linux (2.6.18+)       |\n+| `mipsel-unknown-linux-gnu`    |  \u2713  |     |     | MIPS (LE) Linux (2.6.18+)  |\n+| `powerpc-unknown-linux-gnu`   |  \u2713  |     |     | PowerPC Linux (2.6.18+)    |\n+| `i386-apple-ios`              |  \u2713  |     |     | 32-bit x86 iOS             |\n+| `x86_64-apple-ios`            |  \u2713  |     |     | 64-bit x86 iOS             |\n+| `armv7-apple-ios`             |  \u2713  |     |     | ARM iOS                    |\n+| `armv7s-apple-ios`            |  \u2713  |     |     | ARM iOS                    |\n+| `aarch64-apple-ios`           |  \u2713  |     |     | ARM64 iOS                  |\n+| `i686-unknown-freebsd`        |  \u2713  |  \u2713  |     | 32-bit FreeBSD             |\n+| `x86_64-unknown-freebsd`      |  \u2713  |  \u2713  |     | 64-bit FreeBSD             |\n+| `x86_64-unknown-openbsd`      |  \u2713  |  \u2713  |     | 64-bit OpenBSD             |\n+| `x86_64-unknown-netbsd`       |  \u2713  |  \u2713  |     | 64-bit NetBSD              |\n+| `x86_64-unknown-bitrig`       |  \u2713  |  \u2713  |     | 64-bit Bitrig              |\n+| `x86_64-unknown-dragonfly`    |  \u2713  |  \u2713  |     | 64-bit DragonFlyBSD        |\n+| `x86_64-rumprun-netbsd`       |  \u2713  |     |     | 64-bit NetBSD Rump Kernel  |\n+| `i686-pc-windows-msvc` (XP)   |  \u2713  |     |     | Windows XP support         |\n+| `x86_64-pc-windows-msvc` (XP) |  \u2713  |     |     | Windows XP support         |\n+\n+Note that this table can be expanded over time, this isn't the exhaustive set of\n+tier 3 platforms that will ever be!\n+\n+## Installing on Linux or Mac\n+\n+If we're on Linux or a Mac, all we need to do is open a terminal and type this:\n+\n+```bash\n+$ curl -sf -L https://static.rust-lang.org/rustup.sh | sh\n+```\n+\n+This will download a script, and stat the installation. If it all goes well,\n+you\u2019ll see this appear:\n+\n+```text\n+Welcome to Rust.\n+\n+This script will download the Rust compiler and its package manager, Cargo, and\n+install them to /usr/local. You may install elsewhere by running this script\n+with the --prefix=<path> option.\n+\n+The installer will run under \u2018sudo\u2019 and may ask you for your password. If you do\n+not want the script to run \u2018sudo\u2019 then pass it the --disable-sudo flag.\n+\n+You may uninstall later by running /usr/local/lib/rustlib/uninstall.sh,\n+or by running this script again with the --uninstall flag.\n+\n+Continue? (y/N) \n+```\n+\n+From here, press `y` for \u2018yes\u2019, and then follow the rest of the prompts.\n+\n+## Installing on Windows\n+\n+If you're on Windows, please download the appropriate [installer][install-page].\n+\n+[install-page]: https://www.rust-lang.org/install.html\n+\n+## Uninstalling\n+\n+If you ever need to uninstall Rust for any reason, refer to this section to\n+find out how. It's actually as easy as installing. On Linux or Mac, just run\n+the uninstall script:\n+\n+```bash\n+$ sudo /usr/local/lib/rustlib/uninstall.sh\n+```\n+\n+If we used the Windows installer, we can re-run the `.msi` and it will give us\n+an uninstall option.\n+\n+## Troubleshooting\n+\n+If we've got Rust installed, we can open up a shell, and type this:\n+\n+```bash\n+$ rustc --version\n+```\n+\n+You should see the version number, commit hash, and commit date.\n+\n+If you do, Rust has been installed successfully! Congrats!\n+\n+This installer also installs a copy of the documentation locally, so we can\n+read it offline. On UNIX systems, `/usr/local/share/doc/rust` is the location.\n+On Windows, it's in a `share/doc` directory, inside the directory to which Rust\n+was installed.\n+\n+If you don't and you're on Windows, check that Rust is in your %PATH% system\n+variable. If it isn't, run the installer again, select \"Change\" on the \"Change,\n+repair, or remove installation\" page and ensure \"Add to PATH\" is installed on\n+the local hard drive.\n+\n+If not, there are a number of places where we can get help. The easiest is\n+[the #rust IRC channel on irc.mozilla.org][irc], which we can access through\n+[Mibbit][mibbit]. Click that link, and we'll be chatting with other Rustaceans\n+(a silly nickname we call ourselves) who can help us out. Other great resources\n+include [the user\u2019s forum][users], and [Stack Overflow][stackoverflow].\n+\n+[irc]: irc://irc.mozilla.org/#rust\n+[mibbit]: http://chat.mibbit.com/?server=irc.mozilla.org&channel=%23rust\n+[users]: https://users.rust-lang.org/\n+[stackoverflow]: http://stackoverflow.com/questions/tagged/rust\n+\n+# Hello, world!\n+\n+Now that you have Rust installed, we'll help you write your first Rust program.\n+It's traditional when learning a new language to write a little program to\n+print the text \u201cHello, world!\u201d to the screen, and in this section, we'll follow\n+that tradition. \n+\n+The nice thing about starting with such a simple program is that you can\n+quickly verify that your compiler is installed, and that it's working properly.\n+Printing information to the screen is also just a pretty common thing to do, so\n+practicing it early on is good.\n+\n+> Note: This book assumes basic familiarity with the command line. Rust itself\n+> makes no specific demands about your editing, tooling, or where your code\n+> lives, so if you prefer an IDE to the command line, that's an option. You may\n+> want to check out [SolidOak], which was built specifically with Rust in mind.\n+> There are a number of extensions in development by the community, and the\n+> Rust team ships plugins for [various editors]. Configuring your editor or\n+> IDE is out of the scope of this tutorial, so check the documentation for your\n+> specific setup. \n+\n+[SolidOak]: https://github.com/oakes/SolidOak\n+[various editors]: https://github.com/rust-lang/rust/blob/master/src/etc/CONFIGS.md\n+\n+## Creating a Project File\n+\n+First, make a file to put your Rust code in. Rust doesn't care where your code\n+lives, but for this book, I suggest making a *projects* directory in your home\n+directory, and keeping all your projects there. Open a terminal and enter the\n+following commands to make a directory for this particular project:\n+\n+```bash\n+$ mkdir ~/projects\n+$ cd ~/projects\n+$ mkdir hello_world\n+$ cd hello_world\n+```\n+\n+> Note: If you\u2019re on Windows and not using PowerShell, the `~` may not work.\n+> Consult the documentation for your shell for more details.\n+\n+## Writing and Running a Rust Program\n+\n+Next, make a new source file next and call it *main.rs*. Rust files always end\n+in a *.rs* extension. If you\u2019re using more than one word in your filename, use\n+an underscore to separate them; for example, you'd use *hello_world.rs* rather\n+than *helloworld.rs*.\n+\n+Now open the *main.rs* file you just created, and type the following code:\n+\n+```rust\n+fn main() {\n+    println!(\"Hello, world!\");\n+}\n+```\n+\n+Save the file, and go back to your terminal window. On Linux or OSX, enter the\n+following commands:\n+\n+```bash\n+$ rustc main.rs\n+$ ./main \n+Hello, world!\n+```\n+\n+In Windows, just replace `main` with `main.exe`. Regardless of your operating\n+system, you should see the string `Hello, world!` print to the terminal. If you\n+did, then congratulations! You've officially written a Rust program. That makes\n+you a Rust programmer! Welcome. \n+\n+## Anatomy of a Rust Program\n+\n+Now, let\u2019s go over what just happened in your \"Hello, world!\" program in\n+detail. Here's the first piece of the puzzle:\n+\n+```rust\n+fn main() {\n+\n+}\n+```\n+\n+These lines define a *function* in Rust. The `main` function is special: it's\n+the beginning of every Rust program. The first line says, \"I\u2019m declaring a\n+function named `main` that currently takes no arguments and returns nothing.\"\n+If there were arguments, they would go inside the parentheses (`(` and `)`),\n+and because we aren\u2019t returning anything from this function, we can omit the\n+return type entirely.\n+\n+Also note that the function body is wrapped in curly braces (`{` and `}`). Rust\n+requires these around all function bodies. It's considered good style to put\n+the opening curly brace on the same line as the function declaration, with one\n+space in between.\n+\n+Inside the `main()` function, is this line:\n+\n+```rust\n+    println!(\"Hello, world!\");\n+```\n+\n+This line does all of the work in this little program: it prints text to the\n+screen. There are a number of details that are important here. The first is\n+that it\u2019s indented with four spaces, not tabs. If you configure your editor of\n+choice to insert four spaces with the tab key, it will make your coding much\n+more efficient.\n+ \n+The second important part is the `println!()` line. This is calling a Rust\n+*[macro]*, which is how metaprogramming is done in Rust. If it were calling a\n+function instead, it would look like this: `println()` (without the !). We'll\n+discuss Rust macros in more detail later, but for now you just need to\n+know that when you see a `!` that means that you\u2019re calling a macro instead of\n+a normal function. \n+\n+\n+[macro]: macros.html\n+\n+Next is `\"Hello, world!\"` which is a *string*. Strings are a surprisingly\n+complicated topic in a systems programming language, and this is a *[statically\n+allocated]* string. We pass this string as an argument to `println!`, which\n+prints the string to the screen. Easy enough!\n+\n+[allocation]: the-stack-and-the-heap.html\n+\n+The line ends with a semicolon (`;`). Rust is an *[expression oriented]*\n+language, which means that most things are expressions, rather than statements.\n+The `;` indicates that this expression is over, and the next one is ready to\n+begin. Most lines of Rust code end with a `;`.\n+\n+[expression-oriented language]: glossary.html#expression-oriented-language\n+\n+## Compiling and Running Are Separate Steps\n+\n+In \"Writing and Running a Rust Program\", we showed you how to run a newly\n+created program. We'll break that process down and examine each step now. \n+\n+Before running a Rust program, you have to compile it. You can use the Rust\n+compiler by entering the `rustc` command and passing it the name of your source\n+file, like this:\n+\n+```bash\n+$ rustc main.rs\n+```\n+\n+If you come from a C or C++ background, you'll notice that this is similar to\n+`gcc` or `clang`. After compiling successfully, Rust should output a binary\n+executable, which you can see on Linux or OSX by entering the `ls` command in\n+your shell as follows:\n+\n+```bash\n+$ ls\n+main  main.rs\n+```\n+\n+On Windows, you'd enter:\n+\n+```bash\n+$ dir\n+main.exe  main.rs\n+```\n+\n+This would create two files: the source code, with a `.rs` extension, and the\n+executable (`main.exe` on Windows, `main` everywhere else). All that's left to\n+do from here is run the `main` or `main.exe` file, like this:\n+\n+```bash\n+$ ./main  # or main.exe on Windows\n+```\n+\n+If *main.rs* were your \"Hello, world!\" program, this would print `Hello,\n+world!` to your terminal.\n+\n+If you come from a dynamic language like Ruby, Python, or JavaScript, you may\n+not be used to compiling and running a program being separate steps. Rust is an\n+*ahead-of-time compiled* language, which means that you can compile a program,\n+give it to someone else, and they can run it even without Rust installed. If\n+you give someone a `.rb` or `.py` or `.js` file, on the other hand, they need\n+to have a Ruby, Python, or JavaScript implementation installed (respectively),\n+but you only need one command to both compile and run your program. Everything\n+is a tradeoff in language design, and Rust has made its choice.\n+\n+Just compiling with `rustc` is fine for simple programs, but as your project\n+grows, you'll want to be able to manage all of the options your project has,\n+and make it easy to share your code with other people and projects. Next, I'll\n+introduce you to a tool called Cargo, which will help you write real-world Rust\n+programs.\n+\n+# Hello, Cargo!\n+\n+Cargo is Rust\u2019s build system and package manager, and Rustaceans use Cargo to\n+manage their Rust projects. Cargo manages three things: building your code,\n+downloading the libraries your code depends on, and building those libraries.\n+We call libraries your code needs \u2018dependencies\u2019, since your code depends on\n+them.\n+\n+The simplest Rust programs don\u2019t have any dependencies, so right now, you'd\n+only use the first part of its functionality. As you write more complex Rust\n+programs, you\u2019ll want to add dependencies, and if you start off using Cargo,\n+that will be a lot easier to do.\n+\n+As the vast, vast majority of Rust projects use Cargo, we will assume that\n+you\u2019re using it for the rest of the book. Cargo comes installed with Rust\n+itself, if you used the official installers. If you installed Rust through some\n+other means, you can check if you have Cargo installed by typing:\n+\n+```bash\n+$ cargo --version\n+```\n+\n+Into a terminal. If you see a version number, great! If you see an error like\n+\u2018`command not found`\u2019, then you should look at the documentation for the system\n+in which you installed Rust, to determine if Cargo is separate.\n+\n+## Converting to Cargo\n+\n+Let\u2019s convert the Hello World program to Cargo. To Cargo-fy a project, you need\n+to do three things: \n+\n+1. Put your source file in the right directory.\n+2. Get rid of the old executable (`main.exe` on Windows, `main` everywhere else)\n+   and make a new one.\n+3. Make a Cargo configuration file.\n+\n+Let's get started!\n+\n+### Creating a new Executable and Source Directory\n+\n+First, go back to your terminal, move to your *hello_world* directory, and\n+enter the following commands:\n+\n+```bash\n+$ mkdir src\n+$ mv main.rs src/main.rs\n+$ rm main  # or 'del main.exe' on Windows\n+```\n+\n+Cargo expects your source files to live inside a *src* directory, so do that\n+first. This leaves the top-level project directory (in this case,\n+*hello_world*) for READMEs, license information, and anything else not related\n+to your code. In this way, using Cargo helps you keep your projects nice and\n+tidy. There's a place for everything, and everything is in its place. \n+\n+Now, copy *main.rs* to the *src* directory, and delete the compiled file you\n+created with `rustc`. As usual, replace `main` with `main.exe` if you're on\n+Windows.\n+\n+This example retains `main.rs` as the source filename because it's creating an\n+executable. If you wanted to make a library instead, you'd name the file\n+`lib.rs`. This convention is used by Cargo to successfully compile your\n+projects, but it can be overridden if you wish. \n+\n+### Creating a Configuration File\n+\n+Next, create a new file inside your *hello_world* directory, and call it\n+`Cargo.toml`.\n+\n+Make sure to capitalize the `C` in `Cargo.toml`, or Cargo won't know what to do\n+with the configuration file. \n+\n+This file is in the *[TOML]* (Tom's Obvious, Minimal Language) format. TOML is\n+similar to INI, but has some extra goodies. According to the TOML docs, TOML\n+\u201caims to be a minimal configuration file format that's easy to read\u201d, and so we\n+chose it as the format Cargo uses.\n+\n+[TOML]: https://github.com/toml-lang/toml\n+\n+Inside this file, type the following information:\n+\n+```toml\n+[package]\n+\n+name = \"hello_world\"\n+version = \"0.0.1\"\n+authors = [ \"Your name <you@example.com>\" ]\n+```\n+\n+The first line, `[package]`, indicates that the following statements are\n+configuring a package. As we add more information to this file, we\u2019ll add other\n+sections, but for now, we just have the package configuration.\n+\n+The other three lines set the three bits of configuration that Cargo needs to\n+know to compile your program: its name, what version it is, and who wrote it.\n+\n+Once you've added this information to the *Cargo.toml* file, save it to finish\n+creating the configuration file.\n+\n+## Building and Running a Cargo Project \n+\n+With your *Cargo.toml* file in place in your project's root directory, you\n+should be ready to build and run your Hello World program! To do so, enter the\n+following commands:\n+\n+```bash\n+$ cargo build\n+   Compiling hello_world v0.0.1 (file:///home/yourname/projects/hello_world)\n+$ ./target/debug/hello_world\n+Hello, world!\n+```\n+\n+Bam! If all goes well, `Hello, world!` should print to the terminal once more. \n+\n+You just built a project with `cargo build` and ran it with\n+`./target/debug/hello_world`, but you can actually do both in one step with\n+`cargo run` as follows:\n+\n+```bash\n+$ cargo run\n+     Running `target/debug/hello_world`\n+Hello, world!\n+```\n+\n+Notice that this example didn\u2019t re-build the project. Cargo figured out that\n+the hasn\u2019t changed, and so it just ran the binary. If you'd modified your\n+program, Cargo would have built the file before running it, and you would have\n+seen something like this:\n+\n+```bash\n+$ cargo run\n+   Compiling hello_world v0.0.1 (file:///home/yourname/projects/hello_world)\n+     Running `target/debug/hello_world`\n+Hello, world!\n+```\n+\n+Cargo checks to see if any of your project\u2019s files have been modified, and only\n+rebuilds your project if they\u2019ve changed since the last time you built it.\n+\n+With simple projects, Cargo doesn't bring a whole lot over just using `rustc`,\n+but it will become useful in future. When your projects get more complex,\n+you'll need to do more things to get all of the parts to properly compile. With\n+Cargo, you can just run `cargo build`, and it should work the right way.\n+\n+## Building for Release\n+\n+When your project is finally ready for release, you can use `cargo build\n+--release` to compile your project with optimizations. These optimizations make\n+your Rust code run faster, but turning them on makes your program take longer\n+to compile. This is why there are two different profiles, one for development,\n+and one for building the final program you\u2019ll give to a user.\n+\n+Running this command also causes Cargo to create a new file called\n+*Cargo.lock*, which looks like this:\n+\n+```toml\n+[root]\n+name = \"hello_world\"\n+version = \"0.0.1\"\n+```\n+\n+Cargo uses the *Cargo.lock* file to keep track of dependencies in your\n+application. This is the Hello World project's *Cargo.lock* file. This project\n+doesn't have dependencies, so the file is a bit sparse. Realistically, you\n+won't ever need to touch this file yourself; just let Cargo handle it.\n+\n+That\u2019s it! If you've been following along, you should have successfully built\n+`hello_world` with Cargo. \n+\n+Even though the project is simple, it now uses much of the real tooling you\u2019ll\n+use for the rest of your Rust career. In fact, you can expect to start\n+virtually all Rust projects with some variation on the following commands:\n+\n+```bash\n+$ git clone someurl.com/foo\n+$ cd foo\n+$ cargo build\n+```\n+\n+## Making A New Cargo Project the Easy Way\n+\n+You don\u2019t have to go through that previous process every time you want to start\n+a new project! Cargo can quickly make a bare-bones project directory that you\n+can start developing in right away.\n+\n+To start a new project with Cargo, enter `cargo new` at the command line:\n+\n+```bash\n+$ cargo new hello_world --bin\n+```\n+\n+This command passes `--bin` because the goal is to get straight to making an\n+executable application, as opposed to a library. Executables are often called\n+*binaries* (as in `/usr/bin`, if you\u2019re on a Unix system).\n+\n+Cargo has generated two files and one directory for us: a `Cargo.toml` and a\n+*src* directory with a *main.rs* file inside. These should look familliar,\n+they\u2019re exactly what we created by hand, above.\n+\n+This output is all you need to get started. First, open `Cargo.toml`. It should\n+look something like this:\n+\n+```toml\n+[package]\n+\n+name = \"hello_world\"\n+version = \"0.1.0\"\n+authors = [\"Your Name <you@example.com>\"]\n+```\n+\n+Cargo has populated *Cargo.toml* with reasonable defaults based on the arguments\n+you gave it and your `git` global configuration. You may notice that Cargo has\n+also initialized the `hello_world` directory as a `git` repository.\n+\n+Here\u2019s what should be in `src/main.rs`:\n+\n+```rust\n+fn main() {\n+    println!(\"Hello, world!\");\n+}\n+```\n+\n+Cargo has generated a \"Hello World!\" for you, and you\u2019re ready to start coding! \n+\n+> Note: If you want to look at Cargo in more detail, check out the official [Cargo\n+guide], which covers all of its features.\n+\n+[Cargo guide]: http://doc.crates.io/guide.html\n+\n+# Closing Thoughts\n+\n+This chapter covered the basics that will serve you well through the rest of\n+this book, and the rest of your time with Rust. Now that you\u2019ve got the tools\n+down, we'll cover more about the Rust language itself. \n+\n+You have two options: Dive into a project with \u2018[Learn Rust][learnrust]\u2019, or\n+start from the bottom and work your way up with \u2018[Syntax and\n+Semantics][syntax]\u2019. More experienced systems programmers will probably prefer\n+\u2018Learn Rust\u2019, while those from dynamic backgrounds may enjoy either. Different\n+people learn differently! Choose whatever\u2019s right for you.\n+\n+[learnrust]: learn-rust.html\n+[syntax]: syntax-and-semantics.html"}, {"sha": "3fac3e3bf04ad4d77424677275c5ccf44dc3aaca", "filename": "src/doc/trpl/hello-cargo.md", "status": "removed", "additions": 0, "deletions": 243, "changes": 243, "blob_url": "https://github.com/rust-lang/rust/blob/75a6d5175062bf799075a96e58dad79daa195520/src%2Fdoc%2Ftrpl%2Fhello-cargo.md", "raw_url": "https://github.com/rust-lang/rust/raw/75a6d5175062bf799075a96e58dad79daa195520/src%2Fdoc%2Ftrpl%2Fhello-cargo.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fhello-cargo.md?ref=75a6d5175062bf799075a96e58dad79daa195520", "patch": "@@ -1,243 +0,0 @@\n-% Hello, Cargo!\n-\n-Cargo is Rust\u2019s build system and package manager, and Rustaceans use Cargo to\n-manage their Rust projects. Cargo manages three things: building your code,\n-downloading the libraries your code depends on, and building those libraries.\n-We call libraries your code needs \u2018dependencies\u2019, since your code depends on\n-them.\n-\n-The simplest Rust programs don\u2019t have any dependencies, so right now, you'd\n-only use the first part of its functionality. As you write more complex Rust\n-programs, you\u2019ll want to add dependencies, and if you start off using Cargo,\n-that will be a lot easier to do.\n-\n-As the vast, vast majority of Rust projects use Cargo, we will assume that\n-you\u2019re using it for the rest of the book. Cargo comes installed with Rust\n-itself, if you used the official installers. If you installed Rust through some\n-other means, you can check if you have Cargo installed by typing:\n-\n-```bash\n-$ cargo --version\n-```\n-\n-Into a terminal. If you see a version number, great! If you see an error like\n-\u2018`command not found`\u2019, then you should look at the documentation for the system\n-in which you installed Rust, to determine if Cargo is separate.\n-\n-## Converting to Cargo\n-\n-Let\u2019s convert the Hello World program to Cargo. To Cargo-fy a project, you need\n-to do three things: \n-\n-1. Put your source file in the right directory.\n-2. Get rid of the old executable (`main.exe` on Windows, `main` everywhere else)\n-   and make a new one.\n-3. Make a Cargo configuration file.\n-\n-Let's get started!\n-\n-### Creating a new Executable and Source Directory\n-\n-First, go back to your terminal, move to your *hello_world* directory, and\n-enter the following commands:\n-\n-```bash\n-$ mkdir src\n-$ mv main.rs src/main.rs\n-$ rm main  # or 'del main.exe' on Windows\n-```\n-\n-Cargo expects your source files to live inside a *src* directory, so do that\n-first. This leaves the top level project directory (in this case,\n-*hello_world*) for READMEs, license information, and anything else not related\n-to your code. In this way, using Cargo helps you keep your projects nice and\n-tidy. There's a place for everything, and everything is in its place. \n-\n-Now, copy *main.rs* to the *src* directory, and delete the compiled file you\n-created with `rustc`. As usual, replace `main` with `main.exe` if you're on\n-Windows.\n-\n-This example retains `main.rs` as the source filename because it's creating an\n-executable. If you wanted to make a library instead, you'd name the file\n-`lib.rs`. This convention is used by Cargo to successfully compile your\n-projects, but it can be overridden if you wish. \n-\n-### Creating a Configuration File\n-\n-Next, create a new file inside your *hello_world* directory, and call it\n-`Cargo.toml`.\n-\n-Make sure to capitalize the `C` in `Cargo.toml`, or Cargo won't know what to do\n-with the configuration file. \n-\n-This file is in the *[TOML]* (Tom's Obvious, Minimal Language) format. TOML is\n-similar to INI, but has some extra goodies. According to the TOML docs, TOML\n-\u201caims to be a minimal configuration file format that's easy to read\u201d, and so we\n-chose it as the format Cargo uses.\n-\n-[TOML]: https://github.com/toml-lang/toml\n-\n-Inside this file, type the following information:\n-\n-```toml\n-[package]\n-\n-name = \"hello_world\"\n-version = \"0.0.1\"\n-authors = [ \"Your name <you@example.com>\" ]\n-```\n-\n-The first line, `[package]`, indicates that the following statements are\n-configuring a package. As we add more information to this file, we\u2019ll add other\n-sections, but for now, we just have the package configuration.\n-\n-The other three lines set the three bits of configuration that Cargo needs to\n-know to compile your program: its name, what version it is, and who wrote it.\n-\n-Once you've added this information to the *Cargo.toml* file, save it to finish\n-creating the configuration file.\n-\n-## Building and Running a Cargo Project \n-\n-With your *Cargo.toml* file in place in your project's root directory, you\n-should be ready to build and run your Hello World program! To do so, enter the\n-following commands:\n-\n-```bash\n-$ cargo build\n-   Compiling hello_world v0.0.1 (file:///home/yourname/projects/hello_world)\n-$ ./target/debug/hello_world\n-Hello, world!\n-```\n-\n-Bam! If all goes well, `Hello, world!` should print to the terminal once more. \n-\n-You just built a project with `cargo build` and ran it with\n-`./target/debug/hello_world`, but you can actually do both in one step with\n-`cargo run` as follows:\n-\n-```bash\n-$ cargo run\n-     Running `target/debug/hello_world`\n-Hello, world!\n-```\n-\n-Notice that this example didn\u2019t re-build the project. Cargo figured out that\n-the hasn\u2019t changed, and so it just ran the binary. If you'd modified your\n-program, Cargo would have built the file before running it, and you would have\n-seen something like this:\n-\n-```bash\n-$ cargo run\n-   Compiling hello_world v0.0.1 (file:///home/yourname/projects/hello_world)\n-     Running `target/debug/hello_world`\n-Hello, world!\n-```\n-\n-Cargo checks to see if any of your project\u2019s files have been modified, and only\n-rebuilds your project if they\u2019ve changed since the last time you built it.\n-\n-With simple projects, Cargo doesn't bring a whole lot over just using `rustc`,\n-but it will become useful in future. When your projects get more complex,\n-you'll need to do more things to get all of the parts to properly compile. With\n-Cargo, you can just run `cargo build`, and it should work the right way.\n-\n-## Building for Release\n-\n-When your project is finally ready for release, you can use `cargo build\n---release` to compile your project with optimizations. These optimizations make\n-your Rust code run faster, but turning them on makes your program take longer\n-to compile. This is why there are two different profiles, one for development,\n-and one for building the final program you\u2019ll give to a user.\n-\n-Running this command also causes Cargo to create a new file called\n-*Cargo.lock*, which looks like this:\n-\n-```toml\n-[root]\n-name = \"hello_world\"\n-version = \"0.0.1\"\n-```\n-\n-Cargo uses the *Cargo.lock* file to keep track of dependencies in your\n-application. This is the Hello World project's *Cargo.lock* file. This project\n-doesn't have dependencies, so the file is a bit sparse. Realistically, you\n-won't ever need to touch this file yourself; just let Cargo handle it.\n-\n-That\u2019s it! If you've been following along, you should have successfully built\n-`hello_world` with Cargo. \n-\n-Even though the project is simple, it now uses much of the real tooling you\u2019ll\n-use for the rest of your Rust career. In fact, you can expect to start\n-virtually all Rust projects with some variation on the following commands:\n-\n-```bash\n-$ git clone someurl.com/foo\n-$ cd foo\n-$ cargo build\n-```\n-\n-## Making A New Cargo Project the Easy Way\n-\n-You don\u2019t have to go through that previous process every time you want to start\n-a new project! Cargo can quickly make a bare-bones project directory that you\n-can start developing in right away.\n-\n-To start a new project with Cargo, enter `cargo new` at the command line:\n-\n-```bash\n-$ cargo new hello_world --bin\n-```\n-\n-This command passes `--bin` because the goal is to get straight to making an\n-executable application, as opposed to a library. Executables are often called\n-*binaries* (as in `/usr/bin`, if you\u2019re on a Unix system).\n-\n-Cargo has generated two files and one directory for us: a `Cargo.toml` and a\n-*src* directory with a *main.rs* file inside. These should look familliar,\n-they\u2019re exactly what we created by hand, above.\n-\n-This output is all you need to get started. First, open `Cargo.toml`. It should\n-look something like this:\n-\n-```toml\n-[package]\n-\n-name = \"hello_world\"\n-version = \"0.1.0\"\n-authors = [\"Your Name <you@example.com>\"]\n-```\n-\n-Cargo has populated *Cargo.toml* with reasonable defaults based on the arguments\n-you gave it and your `git` global configuration. You may notice that Cargo has\n-also initialized the `hello_world` directory as a `git` repository.\n-\n-Here\u2019s what should be in `src/main.rs`:\n-\n-```rust\n-fn main() {\n-    println!(\"Hello, world!\");\n-}\n-```\n-\n-Cargo has generated a \"Hello World!\" for you, and you\u2019re ready to start coding! \n-\n-> Note: If you want to look at Cargo in more detail, check out the official [Cargo\n-guide], which covers all of its features.\n-\n-[Cargo guide]: http://doc.crates.io/guide.html\n-\n-# Closing Thoughts\n-\n-This chapter covered the basics that will serve you well through the rest of\n-this book, and the rest of your time with Rust. Now that you\u2019ve got the tools\n-down, we'll cover more about the Rust language itself. \n-\n-You have two options: Dive into a project with \u2018[Learn Rust][learnrust]\u2019, or\n-start from the bottom and work your way up with \u2018[Syntax and\n-Semantics][syntax]\u2019. More experienced systems programmers will probably prefer\n-\u2018Learn Rust\u2019, while those from dynamic backgrounds may enjoy either. Different\n-people learn differently! Choose whatever\u2019s right for you.\n-\n-[learnrust]: learn-rust.html\n-[syntax]: syntax-and-semantics.html"}, {"sha": "cb88b85b5c65f627d23651fd52d7519490136ece", "filename": "src/doc/trpl/hello-world.md", "status": "removed", "additions": 0, "deletions": 185, "changes": 185, "blob_url": "https://github.com/rust-lang/rust/blob/75a6d5175062bf799075a96e58dad79daa195520/src%2Fdoc%2Ftrpl%2Fhello-world.md", "raw_url": "https://github.com/rust-lang/rust/raw/75a6d5175062bf799075a96e58dad79daa195520/src%2Fdoc%2Ftrpl%2Fhello-world.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fhello-world.md?ref=75a6d5175062bf799075a96e58dad79daa195520", "patch": "@@ -1,185 +0,0 @@\n-% Hello, world!\n-\n-Now that you have Rust installed, we'll help you write your first Rust program.\n-It's traditional when learning a new language to write a little program to\n-print the text \u201cHello, world!\u201d to the screen, and in this section, we'll follow\n-that tradition. \n-\n-The nice thing about starting with such a simple program is that you can\n-quickly verify that your compiler is installed, and that it's working properly.\n-Printing information to the screen is also just a pretty common thing to do, so\n-practicing it early on is good.\n-\n-> Note: This book assumes basic familiarity with the command line. Rust itself\n-> makes no specific demands about your editing, tooling, or where your code\n-> lives, so if you prefer an IDE to the command line, that's an option. You may\n-> want to check out [SolidOak], which was built specifically with Rust in mind.\n-> There are a number of extensions in development by the community, and the\n-> Rust team ships plugins for [various editors]. Configuring your editor or\n-> IDE is out of the scope of this tutorial, so check the documentation for your\n-> specific setup. \n-\n-[SolidOak]: https://github.com/oakes/SolidOak\n-[various editors]: https://github.com/rust-lang/rust/blob/master/src/etc/CONFIGS.md\n-\n-## Creating a Project File\n-\n-First, make a file to put your Rust code in. Rust doesn't care where your code\n-lives, but for this book, I suggest making a *projects* directory in your home\n-directory, and keeping all your projects there. Open a terminal and enter the\n-following commands to make a directory for this particular project:\n-\n-```bash\n-$ mkdir ~/projects\n-$ cd ~/projects\n-$ mkdir hello_world\n-$ cd hello_world\n-```\n-\n-> Note: If you\u2019re on Windows and not using PowerShell, the `~` may not work.\n-> Consult the documentation for your shell for more details.\n-\n-## Writing and Running a Rust Program\n-\n-Next, make a new source file next and call it *main.rs*. Rust files always end\n-in a *.rs* extension. If you\u2019re using more than one word in your filename, use\n-an underscore to separate them; for example, you'd use *hello_world.rs* rather\n-than *helloworld.rs*.\n-\n-Now open the *main.rs* file you just created, and type the following code:\n-\n-```rust\n-fn main() {\n-    println!(\"Hello, world!\");\n-}\n-```\n-\n-Save the file, and go back to your terminal window. On Linux or OSX, enter the\n-following commands:\n-\n-```bash\n-$ rustc main.rs\n-$ ./main \n-Hello, world!\n-```\n-\n-In Windows, just replace `main` with `main.exe`. Regardless of your operating\n-system, you should see the string `Hello, world!` print to the terminal. If you\n-did, then congratulations! You've officially written a Rust program. That makes\n-you a Rust programmer! Welcome. \n-\n-#Anatomy of a Rust Program\n-\n-Now, let\u2019s go over what just happened in your \"Hello, world!\" program in\n-detail. Here's the first piece of the puzzle:\n-\n-```rust\n-fn main() {\n-\n-}\n-```\n-\n-These lines define a *function* in Rust. The `main` function is special: it's\n-the beginning of every Rust program. The first line says, \"I\u2019m declaring a\n-function named `main` that currently takes no arguments and returns nothing.\"\n-If there were arguments, they would go inside the parentheses (`(` and `)`),\n-and because we aren\u2019t returning anything from this function, we can omit the\n-return type entirely.\n-\n-Also note that the function body is wrapped in curly braces (`{` and `}`). Rust\n-requires these around all function bodies. It's considered good style to put\n-the opening curly brace on the same line as the function declaration, with one\n-line space in between.\n-\n-Inside the `main()` function, is this line:\n-\n-```rust\n-    println!(\"Hello, world!\");\n-```\n-\n-This line does all of the work in this little program: it prints text to the\n-screen. There are a number of details that are important here. The first is\n-that it\u2019s indented with four spaces, not tabs. If you configure your editor of\n-choice to insert four spaces with the tab key, it will make your coding much\n-more efficient.\n- \n-The second important part is the `println!()` line. This is calling a Rust\n-*[macro]*, which is how metaprogramming is done in Rust. If it were calling a\n-function instead, it would look like this: `println()` (without the !). We'll\n-discuss Rust macros in more detail in Chapter XX, but for now you just need to\n-know that when you see a `!` that means that you\u2019re calling a macro instead of\n-a normal function. \n-\n-\n-[macro]: macros.html\n-\n-Next is `\"Hello, world!\"` which is a *string*. Strings are a surprisingly\n-complicated topic in a systems programming language, and this is a *[statically\n-allocated]* string. We pass this string as an argument to `println!`, which\n-prints the string to the screen. Easy enough!\n-\n-[allocation]: the-stack-and-the-heap.html\n-\n-The line ends with a semicolon (`;`). Rust is an *[expression oriented]*\n-language, which means that most things are expressions, rather than statements.\n-The `;` indicates that this expression is over, and the next one is ready to\n-begin. Most lines of Rust code end with a `;`.\n-\n-[expression-oriented language]: glossary.html#expression-oriented-language\n-\n-# Compiling and Running Are Separate Steps\n-\n-In \"Writing and Running a Rust Program\", we showed you how to run a newly\n-created program. We'll break that process down and examine each step now. \n-\n-Before running a Rust program, you have to compile it. You can use the Rust\n-compiler by entering the `rustc` command and passing it the name of your source\n-file, like this:\n-\n-```bash\n-$ rustc main.rs\n-```\n-\n-If you come from a C or C++ background, you'll notice that this is similar to\n-`gcc` or `clang`. After compiling successfully, Rust should output a binary\n-executable, which you can see on Linux or OSX by entering the `ls` command in\n-your shell as follows:\n-\n-```bash\n-$ ls\n-main  main.rs\n-```\n-\n-On Windows, you'd enter:\n-\n-```bash\n-$ dir\n-main.exe  main.rs\n-```\n-\n-This would create two files: the source code, with a `.rs` extension, and the\n-executable (`main.exe` on Windows, `main` everywhere else). All that's left to\n-do from here is run the `main` or `main.exe` file, like this:\n-\n-```bash\n-$ ./main  # or main.exe on Windows\n-```\n-\n-If *main.rs* were your \"Hello, world!\" program, this would print `Hello,\n-world!` to your terminal.\n-\n-If you come from a dynamic language like Ruby, Python, or JavaScript, you may\n-not be used to compiling and running a program being separate steps. Rust is an\n-*ahead-of-time compiled* language, which means that you can compile a program,\n-give it to someone else, and they can run it even without Rust installed. If\n-you give someone a `.rb` or `.py` or `.js` file, on the other hand, they need\n-to have a Ruby, Python, or JavaScript implementation installed (respectively),\n-but you only need one command to both compile and run your program. Everything\n-is a tradeoff in language design, and Rust has made its choice.\n-\n-Just compiling with `rustc` is fine for simple programs, but as your project\n-grows, you'll want to be able to manage all of the options your project has,\n-and make it easy to share your code with other people and projects. Next, I'll\n-introduce you to a tool called Cargo, which will help you write real-world Rust\n-programs.\n-"}, {"sha": "bf97436a1c5391f2869e2720933b4cfc2eba609c", "filename": "src/doc/trpl/installing-rust.md", "status": "removed", "additions": 0, "deletions": 179, "changes": 179, "blob_url": "https://github.com/rust-lang/rust/blob/75a6d5175062bf799075a96e58dad79daa195520/src%2Fdoc%2Ftrpl%2Finstalling-rust.md", "raw_url": "https://github.com/rust-lang/rust/raw/75a6d5175062bf799075a96e58dad79daa195520/src%2Fdoc%2Ftrpl%2Finstalling-rust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Finstalling-rust.md?ref=75a6d5175062bf799075a96e58dad79daa195520", "patch": "@@ -1,179 +0,0 @@\n-% Installing Rust\n-\n-The first step to using Rust is to install it. Generally speaking, you\u2019ll need\n-an internet connection to run the commands in this chapter, as we\u2019ll be\n-downloading Rust from the internet.\n-\n-We\u2019ll be showing off a number of commands using a terminal, and those lines all\n-start with `$`. We don't need to type in the `$`s, they are there to indicate\n-the start of each command. We\u2019ll see many tutorials and examples around the web\n-that follow this convention: `$` for commands run as our regular user, and `#`\n-for commands we should be running as an administrator.\n-\n-## Platform support\n-\n-The Rust compiler runs on, and compiles to, a great number of platforms, though\n-not all platforms are equally supported. Rust's support levels are organized\n-into three tiers, each with a different set of guarantees.\n-\n-Platforms are identified by their \"target triple\" which is the string to inform\n-the compiler what kind of output should be produced. The columns below indicate\n-whether the corresponding component works on the specified platform.\n-\n-### Tier 1\n-\n-Tier 1 platforms can be thought of as \"guaranteed to build and work\".\n-Specifically they will each satisfy the following requirements:\n-\n-* Automated testing is set up to run tests for the platform.\n-* Landing changes to the `rust-lang/rust` repository's master branch is gated on\n-  tests passing.\n-* Official release artifacts are provided for the platform.\n-* Documentation for how to use and how to build the platform is available.\n-\n-|  Target                       | std |rustc|cargo| notes                      |\n-|-------------------------------|-----|-----|-----|----------------------------|\n-| `x86_64-pc-windows-msvc`      |  \u2713  |  \u2713  |  \u2713  | 64-bit MSVC (Windows 7+)   |\n-| `i686-pc-windows-gnu`         |  \u2713  |  \u2713  |  \u2713  | 32-bit MinGW (Windows 7+)  |\n-| `x86_64-pc-windows-gnu`       |  \u2713  |  \u2713  |  \u2713  | 64-bit MinGW (Windows 7+)  |\n-| `i686-apple-darwin`           |  \u2713  |  \u2713  |  \u2713  | 32-bit OSX (10.7+, Lion+)  |\n-| `x86_64-apple-darwin`         |  \u2713  |  \u2713  |  \u2713  | 64-bit OSX (10.7+, Lion+)  |\n-| `i686-unknown-linux-gnu`      |  \u2713  |  \u2713  |  \u2713  | 32-bit Linux (2.6.18+)     |\n-| `x86_64-unknown-linux-gnu`    |  \u2713  |  \u2713  |  \u2713  | 64-bit Linux (2.6.18+)     |\n-\n-### Tier 2\n-\n-Tier 2 platforms can be thought of as \"guaranteed to build\". Automated tests\n-are not run so it's not guaranteed to produce a working build, but platforms\n-often work to quite a good degree and patches are always welcome! Specifically,\n-these platforms are required to have each of the following:\n-\n-* Automated building is set up, but may not be running tests.\n-* Landing changes to the `rust-lang/rust` repository's master branch is gated on\n-  platforms **building**. Note that this means for some platforms only the\n-  standard library is compiled, but for others the full bootstrap is run.\n-* Official release artifacts are provided for the platform.\n-\n-|  Target                       | std |rustc|cargo| notes                      |\n-|-------------------------------|-----|-----|-----|----------------------------|\n-| `i686-pc-windows-msvc`        |  \u2713  |  \u2713  |  \u2713  | 32-bit MSVC (Windows 7+)   |\n-\n-### Tier 3\n-\n-Tier 3 platforms are those which Rust has support for, but landing changes is\n-not gated on the platform either building or passing tests. Working builds for\n-these platforms may be spotty as their reliability is often defined in terms of\n-community contributions. Additionally, release artifacts and installers are not\n-provided, but there may be community infrastructure producing these in\n-unofficial locations.\n-\n-|  Target                       | std |rustc|cargo| notes                      |\n-|-------------------------------|-----|-----|-----|----------------------------|\n-| `x86_64-unknown-linux-musl`   |  \u2713  |     |     | 64-bit Linux with MUSL     |\n-| `arm-linux-androideabi`       |  \u2713  |     |     | ARM Android                |\n-| `i686-linux-android`          |  \u2713  |     |     | 32-bit x86 Android         |\n-| `aarch64-linux-android`       |  \u2713  |     |     | ARM64 Android              |\n-| `arm-unknown-linux-gnueabi`   |  \u2713  |  \u2713  |     | ARM Linux (2.6.18+)        |\n-| `arm-unknown-linux-gnueabihf` |  \u2713  |  \u2713  |     | ARM Linux (2.6.18+)        |\n-| `aarch64-unknown-linux-gnu`   |  \u2713  |     |     | ARM64 Linux (2.6.18+)      |\n-| `mips-unknown-linux-gnu`      |  \u2713  |     |     | MIPS Linux (2.6.18+)       |\n-| `mipsel-unknown-linux-gnu`    |  \u2713  |     |     | MIPS (LE) Linux (2.6.18+)  |\n-| `powerpc-unknown-linux-gnu`   |  \u2713  |     |     | PowerPC Linux (2.6.18+)    |\n-| `i386-apple-ios`              |  \u2713  |     |     | 32-bit x86 iOS             |\n-| `x86_64-apple-ios`            |  \u2713  |     |     | 64-bit x86 iOS             |\n-| `armv7-apple-ios`             |  \u2713  |     |     | ARM iOS                    |\n-| `armv7s-apple-ios`            |  \u2713  |     |     | ARM iOS                    |\n-| `aarch64-apple-ios`           |  \u2713  |     |     | ARM64 iOS                  |\n-| `i686-unknown-freebsd`        |  \u2713  |  \u2713  |     | 32-bit FreeBSD             |\n-| `x86_64-unknown-freebsd`      |  \u2713  |  \u2713  |     | 64-bit FreeBSD             |\n-| `x86_64-unknown-openbsd`      |  \u2713  |  \u2713  |     | 64-bit OpenBSD             |\n-| `x86_64-unknown-netbsd`       |  \u2713  |  \u2713  |     | 64-bit NetBSD              |\n-| `x86_64-unknown-bitrig`       |  \u2713  |  \u2713  |     | 64-bit Bitrig              |\n-| `x86_64-unknown-dragonfly`    |  \u2713  |  \u2713  |     | 64-bit DragonFlyBSD        |\n-| `x86_64-rumprun-netbsd`       |  \u2713  |     |     | 64-bit NetBSD Rump Kernel  |\n-| `i686-pc-windows-msvc` (XP)   |  \u2713  |     |     | Windows XP support         |\n-| `x86_64-pc-windows-msvc` (XP) |  \u2713  |     |     | Windows XP support         |\n-\n-Note that this table can be expanded over time, this isn't the exhaustive set of\n-tier 3 platforms that will ever be!\n-\n-## Installing on Linux or Mac\n-\n-If we're on Linux or a Mac, all we need to do is open a terminal and type this:\n-\n-```bash\n-$ curl -sf -L https://static.rust-lang.org/rustup.sh | sh\n-```\n-\n-This will download a script, and stat the installation. If it all goes well,\n-you\u2019ll see this appear:\n-\n-```\n-Welcome to Rust.\n-\n-This script will download the Rust compiler and its package manager, Cargo, and\n-install them to /usr/local. You may install elsewhere by running this script\n-with the --prefix=<path> option.\n-\n-The installer will run under \u2018sudo\u2019 and may ask you for your password. If you do\n-not want the script to run \u2018sudo\u2019 then pass it the --disable-sudo flag.\n-\n-You may uninstall later by running /usr/local/lib/rustlib/uninstall.sh,\n-or by running this script again with the --uninstall flag.\n-\n-Continue? (y/N) \n-```\n-\n-From here, press `y` for \u2018yes\u2019, and then follow the rest of the prompts.\n-\n-## Installing on Windows\n-\n-If you're on Windows, please download the appropriate [installer][install-page].\n-\n-[install-page]: https://www.rust-lang.org/install.html\n-\n-## Uninstalling\n-\n-If you ever need to uninstall Rust for any reason, refer to this section to\n-find out how. It's actually as easy as installing. On Linux or Mac, just run\n-the uninstall script:\n-\n-```bash\n-$ sudo /usr/local/lib/rustlib/uninstall.sh\n-```\n-\n-If we used the Windows installer, we can re-run the `.msi` and it will give us\n-an uninstall option.\n-\n-## Troubleshooting\n-\n-If we've got Rust installed, we can open up a shell, and type this:\n-\n-```bash\n-$ rustc --version\n-```\n-\n-You should see the version number, commit hash, and commit date.\n-\n-If you do, Rust has been installed successfully! Congrats!\n-\n-This installer also installs a copy of the documentation locally, so we can\n-read it offline. On UNIX systems, `/usr/local/share/doc/rust` is the location.\n-On Windows, it's in a `share/doc` directory, inside the directory to which Rust\n-was installed.\n-\n-If you don't and you're on Windows, check that Rust is in your %PATH% system\n-variable. If it isn't, run the installer again, select \"Change\" on the \"Change,\n-repair, or remove installation\" page and ensure \"Add to PATH\" is installed on\n-the local hard drive.\n-\n-If not, there are a number of places where we can get help. The easiest is\n-[the #rust IRC channel on irc.mozilla.org][irc], which we can access through\n-[Mibbit][mibbit]. Click that link, and we'll be chatting with other Rustaceans\n-(a silly nickname we call ourselves) who can help us out. Other great resources\n-include [the user\u2019s forum][users], and [Stack Overflow][stackoverflow].\n-\n-[irc]: irc://irc.mozilla.org/#rust\n-[mibbit]: http://chat.mibbit.com/?server=irc.mozilla.org&channel=%23rust\n-[users]: https://users.rust-lang.org/\n-[stackoverflow]: http://stackoverflow.com/questions/tagged/rust"}]}