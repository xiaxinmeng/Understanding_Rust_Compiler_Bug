{"sha": "ae120563cc4ee0ac2f0b687c6ccc1d2d68c6f892", "node_id": "C_kwDOAAsO6NoAKGFlMTIwNTYzY2M0ZWUwYWMyZjBiNjg3YzZjY2MxZDJkNjhjNmY4OTI", "commit": {"author": {"name": "5225225", "email": "5225225@mailbox.org", "date": "2021-12-06T19:26:13Z"}, "committer": {"name": "5225225", "email": "5225225@mailbox.org", "date": "2021-12-06T19:26:13Z"}, "message": "Destroying any uninit posix_ object is UB", "tree": {"sha": "f2f5b494b5fa3b1fe016d4ff199c145b3b7227d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2f5b494b5fa3b1fe016d4ff199c145b3b7227d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae120563cc4ee0ac2f0b687c6ccc1d2d68c6f892", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae120563cc4ee0ac2f0b687c6ccc1d2d68c6f892", "html_url": "https://github.com/rust-lang/rust/commit/ae120563cc4ee0ac2f0b687c6ccc1d2d68c6f892", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae120563cc4ee0ac2f0b687c6ccc1d2d68c6f892/comments", "author": {"login": "5225225", "id": 8584210, "node_id": "MDQ6VXNlcjg1ODQyMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/8584210?v=4", "gravatar_id": "", "url": "https://api.github.com/users/5225225", "html_url": "https://github.com/5225225", "followers_url": "https://api.github.com/users/5225225/followers", "following_url": "https://api.github.com/users/5225225/following{/other_user}", "gists_url": "https://api.github.com/users/5225225/gists{/gist_id}", "starred_url": "https://api.github.com/users/5225225/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/5225225/subscriptions", "organizations_url": "https://api.github.com/users/5225225/orgs", "repos_url": "https://api.github.com/users/5225225/repos", "events_url": "https://api.github.com/users/5225225/events{/privacy}", "received_events_url": "https://api.github.com/users/5225225/received_events", "type": "User", "site_admin": false}, "committer": {"login": "5225225", "id": 8584210, "node_id": "MDQ6VXNlcjg1ODQyMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/8584210?v=4", "gravatar_id": "", "url": "https://api.github.com/users/5225225", "html_url": "https://github.com/5225225", "followers_url": "https://api.github.com/users/5225225/followers", "following_url": "https://api.github.com/users/5225225/following{/other_user}", "gists_url": "https://api.github.com/users/5225225/gists{/gist_id}", "starred_url": "https://api.github.com/users/5225225/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/5225225/subscriptions", "organizations_url": "https://api.github.com/users/5225225/orgs", "repos_url": "https://api.github.com/users/5225225/repos", "events_url": "https://api.github.com/users/5225225/events{/privacy}", "received_events_url": "https://api.github.com/users/5225225/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eadeedde425e5a8027cf745da233bf3de58419a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/eadeedde425e5a8027cf745da233bf3de58419a9", "html_url": "https://github.com/rust-lang/rust/commit/eadeedde425e5a8027cf745da233bf3de58419a9"}], "stats": {"total": 33, "additions": 23, "deletions": 10}, "files": [{"sha": "29bca11f831e3ccbc02ed4c6e31a7c8d17b94609", "filename": "src/shims/posix/sync.rs", "status": "modified", "additions": 23, "deletions": 10, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/ae120563cc4ee0ac2f0b687c6ccc1d2d68c6f892/src%2Fshims%2Fposix%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae120563cc4ee0ac2f0b687c6ccc1d2d68c6f892/src%2Fshims%2Fposix%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Fsync.rs?ref=ae120563cc4ee0ac2f0b687c6ccc1d2d68c6f892", "patch": "@@ -186,15 +186,12 @@ fn condattr_set_clock_id<'mir, 'tcx: 'mir>(\n     attr_op: &OpTy<'tcx, Tag>,\n     clock_id: impl Into<ScalarMaybeUninit<Tag>>,\n ) -> InterpResult<'tcx, ()> {\n-    ecx.write_scalar_at_offset(attr_op, 0, clock_id, ecx.machine.layouts.i32)\n-}\n-\n-fn condattr_deinit_clock_id<'mir, 'tcx: 'mir>(\n-    ecx: &mut MiriEvalContext<'mir, 'tcx>,\n-    attr_op: &OpTy<'tcx, Tag>,\n-) -> InterpResult<'tcx, ()> {\n-    let layout = layout_of_maybe_uninit(ecx.tcx, ecx.machine.layouts.i32.ty);\n-    ecx.write_scalar_at_offset(attr_op, 0, ScalarMaybeUninit::Uninit, layout)\n+    ecx.write_scalar_at_offset(\n+        attr_op,\n+        0,\n+        clock_id,\n+        layout_of_maybe_uninit(ecx.tcx, ecx.machine.layouts.i32.ty),\n+    )\n }\n \n // pthread_cond_t\n@@ -367,6 +364,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn pthread_mutexattr_destroy(&mut self, attr_op: &OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n+        // Destroying an uninit pthread_mutexattr is UB, so check to make sure it's not uninit.\n+        mutexattr_get_kind(this, attr_op)?.check_init()?;\n+\n         mutexattr_set_kind(this, attr_op, ScalarMaybeUninit::Uninit)?;\n \n         Ok(0)\n@@ -505,6 +505,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             throw_ub_format!(\"destroyed a locked mutex\");\n         }\n \n+        // Destroying an uninit pthread_mutex is UB, so check to make sure it's not uninit.\n+        mutex_get_kind(this, mutex_op)?.check_init()?;\n+        mutex_get_id(this, mutex_op)?.check_init()?;\n+\n         mutex_set_kind(this, mutex_op, ScalarMaybeUninit::Uninit)?;\n         mutex_set_id(this, mutex_op, ScalarMaybeUninit::Uninit)?;\n         // FIXME: delete interpreter state associated with this mutex.\n@@ -606,6 +610,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             throw_ub_format!(\"destroyed a locked rwlock\");\n         }\n \n+        // Destroying an uninit pthread_rwlock is UB, so check to make sure it's not uninit.\n+        rwlock_get_id(this, rwlock_op)?.check_init()?;\n+\n         rwlock_set_id(this, rwlock_op, ScalarMaybeUninit::Uninit)?;\n         // FIXME: delete interpreter state associated with this rwlock.\n \n@@ -660,9 +667,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn pthread_condattr_destroy(&mut self, attr_op: &OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n+        // Destroying an uninit pthread_condattr is UB, so check to make sure it's not uninit.\n         condattr_get_clock_id(this, attr_op)?.check_init()?;\n \n-        condattr_deinit_clock_id(this, attr_op)?;\n+        condattr_set_clock_id(this, attr_op, ScalarMaybeUninit::Uninit)?;\n \n         Ok(0)\n     }\n@@ -799,6 +807,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         if this.condvar_is_awaited(id) {\n             throw_ub_format!(\"destroying an awaited conditional variable\");\n         }\n+\n+        // Destroying an uninit pthread_cond is UB, so check to make sure it's not uninit.\n+        cond_get_id(this, cond_op)?.check_init()?;\n+        cond_get_clock_id(this, cond_op)?.check_init()?;\n+\n         cond_set_id(this, cond_op, ScalarMaybeUninit::Uninit)?;\n         cond_set_clock_id(this, cond_op, ScalarMaybeUninit::Uninit)?;\n         // FIXME: delete interpreter state associated with this condvar."}]}