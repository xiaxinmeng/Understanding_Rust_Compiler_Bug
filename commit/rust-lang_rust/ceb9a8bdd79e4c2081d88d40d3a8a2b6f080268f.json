{"sha": "ceb9a8bdd79e4c2081d88d40d3a8a2b6f080268f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlYjlhOGJkZDc5ZTRjMjA4MWQ4OGQ0MGQzYThhMmI2ZjA4MDI2OGY=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-02-07T21:50:54Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-02-07T21:50:54Z"}, "message": "regex macro lint", "tree": {"sha": "697a37530a3a719f8087b95a37c2c2f572dd0972", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/697a37530a3a719f8087b95a37c2c2f572dd0972"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ceb9a8bdd79e4c2081d88d40d3a8a2b6f080268f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ceb9a8bdd79e4c2081d88d40d3a8a2b6f080268f", "html_url": "https://github.com/rust-lang/rust/commit/ceb9a8bdd79e4c2081d88d40d3a8a2b6f080268f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ceb9a8bdd79e4c2081d88d40d3a8a2b6f080268f/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5105f566782bf5149f9c3e28b55a1b05305d451", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5105f566782bf5149f9c3e28b55a1b05305d451", "html_url": "https://github.com/rust-lang/rust/commit/b5105f566782bf5149f9c3e28b55a1b05305d451"}], "stats": {"total": 67, "additions": 63, "deletions": 4}, "files": [{"sha": "e7abc9be8764ad0a230762f2411b21f3b42bd7f7", "filename": "src/regex.rs", "status": "modified", "additions": 54, "deletions": 2, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/ceb9a8bdd79e4c2081d88d40d3a8a2b6f080268f/src%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb9a8bdd79e4c2081d88d40d3a8a2b6f080268f/src%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fregex.rs?ref=ceb9a8bdd79e4c2081d88d40d3a8a2b6f080268f", "patch": "@@ -1,14 +1,16 @@\n use regex_syntax;\n use std::error::Error;\n use syntax::ast::Lit_::LitStr;\n+use syntax::ast::NodeId;\n use syntax::codemap::{Span, BytePos};\n use syntax::parse::token::InternedString;\n use rustc_front::hir::*;\n+use rustc_front::intravisit::{Visitor, walk_block, FnKind};\n use rustc::middle::const_eval::{eval_const_expr_partial, ConstVal};\n use rustc::middle::const_eval::EvalHint::ExprTypeChecked;\n use rustc::lint::*;\n \n-use utils::{match_path, REGEX_NEW_PATH, span_lint, span_help_and_lint};\n+use utils::{is_expn_of, match_path, REGEX_NEW_PATH, span_lint, span_help_and_lint};\n \n /// **What it does:** This lint checks `Regex::new(_)` invocations for correct regex syntax.\n ///\n@@ -37,16 +39,41 @@ declare_lint! {\n     \"finds trivial regular expressions in `Regex::new(_)` invocations\"\n }\n \n+/// **What it does:** This lint checks for usage of `regex!(_)` which as of now is usually slower than `Regex::new(_)` unless called in a loop (which is a bad idea anyway).\n+///\n+/// **Why is this bad?** Performance, at least for now. The macro version is likely to catch up long-term, but for now the dynamic version is faster.\n+///\n+/// **Known problems:** None\n+///\n+/// **Example:** `regex!(\"foo|bar\")`\n+declare_lint! {\n+    pub REGEX_MACRO,\n+    Allow,\n+    \"finds use of `regex!(_)`, suggests `Regex::new(_)` instead\"\n+}\n+\n #[derive(Copy,Clone)]\n pub struct RegexPass;\n \n impl LintPass for RegexPass {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(INVALID_REGEX, TRIVIAL_REGEX)\n+        lint_array!(INVALID_REGEX, REGEX_MACRO, TRIVIAL_REGEX)\n     }\n }\n \n impl LateLintPass for RegexPass {\n+    fn check_fn(&mut self, \n+                cx: &LateContext, \n+                _: FnKind, \n+                _: &FnDecl, \n+                block: &Block, \n+                _: Span, \n+                _: NodeId) {\n+        let mut visitor = RegexVisitor { cx: cx, last: BytePos(0) };\n+        visitor.visit_block(block);\n+    }\n+\n+\n     fn check_expr(&mut self, cx: &LateContext, expr: &Expr) {\n         if_let_chain!{[\n             let ExprCall(ref fun, ref args) = expr.node,\n@@ -139,3 +166,28 @@ fn is_trivial_regex(s: &regex_syntax::Expr) -> Option<&'static str> {\n         _ => None,\n     }\n }\n+\n+struct RegexVisitor<'v, 't: 'v> {\n+    cx: &'v LateContext<'v, 't>,\n+    last: BytePos\n+}\n+\n+impl<'v, 't: 'v> Visitor<'v> for RegexVisitor<'v, 't> {\n+    fn visit_block(&mut self, block: &'v Block) {\n+        if let Some(ref expr) = block.expr {\n+            if let Some(span) = is_expn_of(self.cx, expr.span, \"regex\") {\n+                if span.lo == BytePos(0) || span.lo == self.last {\n+                    return;\n+                }\n+                span_lint(self.cx, \n+                          REGEX_MACRO, \n+                          span,\n+                          &format!(\"regex!(_): {:?}, {:?}\", self.last, span.lo));\n+                          //\"`regex!(_)` found. Use `Regex::new(_)`, which is faster for now.\");\n+                self.last = span.lo;\n+                return;\n+            }\n+        }\n+        walk_block(self, block);\n+    }\n+}"}, {"sha": "df52cc3dff0b070f00e2c524ce63cc32eae71bc2", "filename": "tests/compile-fail/regex.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ceb9a8bdd79e4c2081d88d40d3a8a2b6f080268f/tests%2Fcompile-fail%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb9a8bdd79e4c2081d88d40d3a8a2b6f080268f/tests%2Fcompile-fail%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fregex.rs?ref=ceb9a8bdd79e4c2081d88d40d3a8a2b6f080268f", "patch": "@@ -1,8 +1,8 @@\n #![feature(plugin)]\n-#![plugin(clippy)]\n+#![plugin(clippy, regex_macros)]\n \n #![allow(unused)]\n-#![deny(invalid_regex, trivial_regex)]\n+#![deny(invalid_regex, trivial_regex, regex_macro)]\n \n extern crate regex;\n \n@@ -70,7 +70,14 @@ fn trivial_regex() {\n     let non_trivial_ends_with = Regex::new(\"foo|bar\");\n }\n \n+fn regex_macro() {\n+    let some_regex = regex!(\"for real!\"); //~ERROR `regex!(_)`\n+    let other_regex = regex!(\"[a-z]_[A-Z]\"); //~ERROR `regex!(_)`\n+}\n+\n+\n fn main() {\n+    regex_macro();\n     syntax_error();\n     trivial_regex();\n }"}]}