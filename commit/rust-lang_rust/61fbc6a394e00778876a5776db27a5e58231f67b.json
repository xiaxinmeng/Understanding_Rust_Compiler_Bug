{"sha": "61fbc6a394e00778876a5776db27a5e58231f67b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxZmJjNmEzOTRlMDA3Nzg4NzZhNTc3NmRiMjdhNWU1ODIzMWY2N2I=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-04-23T13:57:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-23T13:57:11Z"}, "message": "Rollup merge of #71005 - jonas-schievink:no-place-like-return, r=oli-obk\n\nReading from the return place is fine\n\nConst eval thinks that reading from local `_0` is UB, but it isn't. `_0` is just a normal local like any other, and codegen handles it that way too. The only special thing is that the `Return` terminator will read from it.\n\nI've hit these errors while working on an NRVO pass that can merge other locals with `_0` in https://github.com/rust-lang/rust/pull/71003.\n\nr? @oli-obk", "tree": {"sha": "e891819b31ad998317320c021a41fecb9a807e0f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e891819b31ad998317320c021a41fecb9a807e0f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61fbc6a394e00778876a5776db27a5e58231f67b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeoZ63CRBK7hj4Ov3rIwAAdHIIAGE0vm+dH1ecGpjLouiwd5J0\nDNLjlapDCxLDb2zSQCpaQ3AdcohBxwt+NAuGFtsTbfgqspRfuF5tc21BlHx+bgyu\nKlr4UTIQWd7SNSvO1sgTsKdeVMbyDkSVFL0G2luP5QuJDJzgGPYsBrOfb6g2q6IJ\nOrSf+Xl9j3+zI41HGYbo6lpvP2E9C3d/VkPwuSZWJmY5fTkODYxf8vTdK6w4jOIm\nuZYL9uNQPsDgdqv7xgc3BnUnNndjvTLkOieHyI3OiomtArS7e4rTO+yOJ84alSYg\nr67XPPJDB1hutLAVsLgHiug7qzzx5oXFQsj/ySYGXIKThEnAQ/552oAF8B92DRU=\n=jldW\n-----END PGP SIGNATURE-----\n", "payload": "tree e891819b31ad998317320c021a41fecb9a807e0f\nparent 66f7a5d92f5adb9053bf66e0bf8f6d31d404870d\nparent 415fd0cc1a9bb902a2b4a22669debac74373cf67\nauthor Dylan DPC <dylan.dpc@gmail.com> 1587650231 +0200\ncommitter GitHub <noreply@github.com> 1587650231 +0200\n\nRollup merge of #71005 - jonas-schievink:no-place-like-return, r=oli-obk\n\nReading from the return place is fine\n\nConst eval thinks that reading from local `_0` is UB, but it isn't. `_0` is just a normal local like any other, and codegen handles it that way too. The only special thing is that the `Return` terminator will read from it.\n\nI've hit these errors while working on an NRVO pass that can merge other locals with `_0` in https://github.com/rust-lang/rust/pull/71003.\n\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61fbc6a394e00778876a5776db27a5e58231f67b", "html_url": "https://github.com/rust-lang/rust/commit/61fbc6a394e00778876a5776db27a5e58231f67b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61fbc6a394e00778876a5776db27a5e58231f67b/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66f7a5d92f5adb9053bf66e0bf8f6d31d404870d", "url": "https://api.github.com/repos/rust-lang/rust/commits/66f7a5d92f5adb9053bf66e0bf8f6d31d404870d", "html_url": "https://github.com/rust-lang/rust/commit/66f7a5d92f5adb9053bf66e0bf8f6d31d404870d"}, {"sha": "415fd0cc1a9bb902a2b4a22669debac74373cf67", "url": "https://api.github.com/repos/rust-lang/rust/commits/415fd0cc1a9bb902a2b4a22669debac74373cf67", "html_url": "https://github.com/rust-lang/rust/commit/415fd0cc1a9bb902a2b4a22669debac74373cf67"}], "stats": {"total": 242, "additions": 86, "deletions": 156}, "files": [{"sha": "2510dbcea0bdc1f40570f5221d1860d3d3e81073", "filename": "src/librustc_middle/mir/interpret/error.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/61fbc6a394e00778876a5776db27a5e58231f67b/src%2Flibrustc_middle%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61fbc6a394e00778876a5776db27a5e58231f67b/src%2Flibrustc_middle%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Finterpret%2Ferror.rs?ref=61fbc6a394e00778876a5776db27a5e58231f67b", "patch": "@@ -361,8 +361,6 @@ pub enum UndefinedBehaviorInfo {\n     InvalidUndefBytes(Option<Pointer>),\n     /// Working with a local that is not currently live.\n     DeadLocal,\n-    /// Trying to read from the return place of a function.\n-    ReadFromReturnPlace,\n }\n \n impl fmt::Debug for UndefinedBehaviorInfo {\n@@ -424,7 +422,6 @@ impl fmt::Debug for UndefinedBehaviorInfo {\n                 \"using uninitialized data, but this operation requires initialized memory\"\n             ),\n             DeadLocal => write!(f, \"accessing a dead local variable\"),\n-            ReadFromReturnPlace => write!(f, \"reading from return place\"),\n         }\n     }\n }"}, {"sha": "25fa3e5e8e0e350453ae068900801d3cab23047e", "filename": "src/librustc_middle/mir/interpret/value.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/61fbc6a394e00778876a5776db27a5e58231f67b/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61fbc6a394e00778876a5776db27a5e58231f67b/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fvalue.rs?ref=61fbc6a394e00778876a5776db27a5e58231f67b", "patch": "@@ -188,11 +188,6 @@ impl<'tcx, Tag> Scalar<Tag> {\n         }\n     }\n \n-    #[inline]\n-    pub fn null_ptr(cx: &impl HasDataLayout) -> Self {\n-        Scalar::Raw { data: 0, size: cx.data_layout().pointer_size.bytes() as u8 }\n-    }\n-\n     #[inline]\n     pub fn zst() -> Self {\n         Scalar::Raw { data: 0, size: 0 }"}, {"sha": "0e06f5162f8cecbafab5f0b9ac8d2aa61eb085cd", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 31, "deletions": 45, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/61fbc6a394e00778876a5776db27a5e58231f67b/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61fbc6a394e00778876a5776db27a5e58231f67b/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=61fbc6a394e00778876a5776db27a5e58231f67b", "patch": "@@ -628,35 +628,30 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         let frame = M::init_frame_extra(self, pre_frame)?;\n         self.stack_mut().push(frame);\n \n-        // don't allocate at all for trivial constants\n-        if body.local_decls.len() > 1 {\n-            // Locals are initially uninitialized.\n-            let dummy = LocalState { value: LocalValue::Uninitialized, layout: Cell::new(None) };\n-            let mut locals = IndexVec::from_elem(dummy, &body.local_decls);\n-            // Return place is handled specially by the `eval_place` functions, and the\n-            // entry in `locals` should never be used. Make it dead, to be sure.\n-            locals[mir::RETURN_PLACE].value = LocalValue::Dead;\n-            // Now mark those locals as dead that we do not want to initialize\n-            match self.tcx.def_kind(instance.def_id()) {\n-                // statics and constants don't have `Storage*` statements, no need to look for them\n-                //\n-                // FIXME: The above is likely untrue. See\n-                // <https://github.com/rust-lang/rust/pull/70004#issuecomment-602022110>. Is it\n-                // okay to ignore `StorageDead`/`StorageLive` annotations during CTFE?\n-                Some(DefKind::Static | DefKind::Const | DefKind::AssocConst) => {}\n-                _ => {\n-                    // Mark locals that use `Storage*` annotations as dead on function entry.\n-                    let always_live = AlwaysLiveLocals::new(self.body());\n-                    for local in locals.indices() {\n-                        if !always_live.contains(local) {\n-                            locals[local].value = LocalValue::Dead;\n-                        }\n+        // Locals are initially uninitialized.\n+        let dummy = LocalState { value: LocalValue::Uninitialized, layout: Cell::new(None) };\n+        let mut locals = IndexVec::from_elem(dummy, &body.local_decls);\n+\n+        // Now mark those locals as dead that we do not want to initialize\n+        match self.tcx.def_kind(instance.def_id()) {\n+            // statics and constants don't have `Storage*` statements, no need to look for them\n+            //\n+            // FIXME: The above is likely untrue. See\n+            // <https://github.com/rust-lang/rust/pull/70004#issuecomment-602022110>. Is it\n+            // okay to ignore `StorageDead`/`StorageLive` annotations during CTFE?\n+            Some(DefKind::Static | DefKind::Const | DefKind::AssocConst) => {}\n+            _ => {\n+                // Mark locals that use `Storage*` annotations as dead on function entry.\n+                let always_live = AlwaysLiveLocals::new(self.body());\n+                for local in locals.indices() {\n+                    if !always_live.contains(local) {\n+                        locals[local].value = LocalValue::Dead;\n                     }\n                 }\n             }\n-            // done\n-            self.frame_mut().locals = locals;\n         }\n+        // done\n+        self.frame_mut().locals = locals;\n \n         M::after_stack_push(self)?;\n         info!(\"ENTERING({}) {}\", self.frame_idx(), self.frame().instance);\n@@ -734,6 +729,17 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         let frame =\n             self.stack_mut().pop().expect(\"tried to pop a stack frame, but there were none\");\n \n+        if !unwinding {\n+            // Copy the return value to the caller's stack frame.\n+            if let Some(return_place) = frame.return_place {\n+                let op = self.access_local(&frame, mir::RETURN_PLACE, None)?;\n+                self.copy_op_transmute(op, return_place)?;\n+                self.dump_place(*return_place);\n+            } else {\n+                throw_ub!(Unreachable);\n+            }\n+        }\n+\n         // Now where do we jump next?\n \n         // Usually we want to clean up (deallocate locals), but in a few rare cases we don't.\n@@ -759,7 +765,6 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             self.deallocate_local(local.value)?;\n         }\n \n-        let return_place = frame.return_place;\n         if M::after_stack_pop(self, frame, unwinding)? == StackPopJump::NoJump {\n             // The hook already did everything.\n             // We want to skip the `info!` below, hence early return.\n@@ -772,25 +777,6 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             self.unwind_to_block(unwind);\n         } else {\n             // Follow the normal return edge.\n-            // Validate the return value. Do this after deallocating so that we catch dangling\n-            // references.\n-            if let Some(return_place) = return_place {\n-                if M::enforce_validity(self) {\n-                    // Data got changed, better make sure it matches the type!\n-                    // It is still possible that the return place held invalid data while\n-                    // the function is running, but that's okay because nobody could have\n-                    // accessed that same data from the \"outside\" to observe any broken\n-                    // invariant -- that is, unless a function somehow has a ptr to\n-                    // its return place... but the way MIR is currently generated, the\n-                    // return place is always a local and then this cannot happen.\n-                    self.validate_operand(self.place_to_op(return_place)?)?;\n-                }\n-            } else {\n-                // Uh, that shouldn't happen... the function did not intend to return\n-                throw_ub!(Unreachable);\n-            }\n-\n-            // Jump to new block -- *after* validation so that the spans make more sense.\n             if let Some(ret) = next_block {\n                 self.return_to_block(ret)?;\n             }"}, {"sha": "8188106b5f1876234e4d54dfabe42a290d00c9b0", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/61fbc6a394e00778876a5776db27a5e58231f67b/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61fbc6a394e00778876a5776db27a5e58231f67b/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=61fbc6a394e00778876a5776db27a5e58231f67b", "patch": "@@ -419,7 +419,6 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         local: mir::Local,\n         layout: Option<TyAndLayout<'tcx>>,\n     ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {\n-        assert_ne!(local, mir::RETURN_PLACE);\n         let layout = self.layout_of_local(frame, local, layout)?;\n         let op = if layout.is_zst() {\n             // Do not read from ZST, they might not be initialized\n@@ -454,16 +453,11 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         place: mir::Place<'tcx>,\n         layout: Option<TyAndLayout<'tcx>>,\n     ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {\n-        let base_op = match place.local {\n-            mir::RETURN_PLACE => throw_ub!(ReadFromReturnPlace),\n-            local => {\n-                // Do not use the layout passed in as argument if the base we are looking at\n-                // here is not the entire place.\n-                let layout = if place.projection.is_empty() { layout } else { None };\n-\n-                self.access_local(self.frame(), local, layout)?\n-            }\n-        };\n+        // Do not use the layout passed in as argument if the base we are looking at\n+        // here is not the entire place.\n+        let layout = if place.projection.is_empty() { layout } else { None };\n+\n+        let base_op = self.access_local(self.frame(), place.local, layout)?;\n \n         let op = place\n             .projection"}, {"sha": "ba17a0b482afc79e7c74179f817c0f22401fee8c", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 4, "deletions": 41, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/61fbc6a394e00778876a5776db27a5e58231f67b/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61fbc6a394e00778876a5776db27a5e58231f67b/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=61fbc6a394e00778876a5776db27a5e58231f67b", "patch": "@@ -135,12 +135,6 @@ impl<Tag> MemPlace<Tag> {\n         MemPlace { ptr, align, meta: MemPlaceMeta::None }\n     }\n \n-    /// Produces a Place that will error if attempted to be read from or written to\n-    #[inline(always)]\n-    fn null(cx: &impl HasDataLayout) -> Self {\n-        Self::from_scalar_ptr(Scalar::null_ptr(cx), Align::from_bytes(1).unwrap())\n-    }\n-\n     #[inline(always)]\n     pub fn from_ptr(ptr: Pointer<Tag>, align: Align) -> Self {\n         Self::from_scalar_ptr(ptr.into(), align)\n@@ -260,12 +254,6 @@ impl<'tcx, Tag: ::std::fmt::Debug + Copy> OpTy<'tcx, Tag> {\n }\n \n impl<Tag: ::std::fmt::Debug> Place<Tag> {\n-    /// Produces a Place that will error if attempted to be read from or written to\n-    #[inline(always)]\n-    fn null(cx: &impl HasDataLayout) -> Self {\n-        Place::Ptr(MemPlace::null(cx))\n-    }\n-\n     #[inline]\n     pub fn assert_mem_place(self) -> MemPlace<Tag> {\n         match self {\n@@ -641,35 +629,10 @@ where\n         &mut self,\n         place: mir::Place<'tcx>,\n     ) -> InterpResult<'tcx, PlaceTy<'tcx, M::PointerTag>> {\n-        let mut place_ty = match place.local {\n-            mir::RETURN_PLACE => {\n-                // `return_place` has the *caller* layout, but we want to use our\n-                // `layout to verify our assumption. The caller will validate\n-                // their layout on return.\n-                PlaceTy {\n-                    place: match self.frame().return_place {\n-                        Some(p) => *p,\n-                        // Even if we don't have a return place, we sometimes need to\n-                        // create this place, but any attempt to read from / write to it\n-                        // (even a ZST read/write) needs to error, so let us make this\n-                        // a NULL place.\n-                        //\n-                        // FIXME: Ideally we'd make sure that the place projections also\n-                        // bail out.\n-                        None => Place::null(&*self),\n-                    },\n-                    layout: self.layout_of(\n-                        self.subst_from_current_frame_and_normalize_erasing_regions(\n-                            self.frame().body.return_ty(),\n-                        ),\n-                    )?,\n-                }\n-            }\n-            local => PlaceTy {\n-                // This works even for dead/uninitialized locals; we check further when writing\n-                place: Place::Local { frame: self.frame_idx(), local },\n-                layout: self.layout_of_local(self.frame(), local, None)?,\n-            },\n+        let mut place_ty = PlaceTy {\n+            // This works even for dead/uninitialized locals; we check further when writing\n+            place: Place::Local { frame: self.frame_idx(), local: place.local },\n+            layout: self.layout_of_local(self.frame(), place.local, None)?,\n         };\n \n         for elem in place.projection.iter() {"}, {"sha": "777a4381cda720d125635af6f9137891cad8c6a2", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/61fbc6a394e00778876a5776db27a5e58231f67b/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61fbc6a394e00778876a5776db27a5e58231f67b/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=61fbc6a394e00778876a5776db27a5e58231f67b", "patch": "@@ -19,7 +19,6 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         use rustc_middle::mir::TerminatorKind::*;\n         match terminator.kind {\n             Return => {\n-                self.frame().return_place.map(|r| self.dump_place(*r));\n                 self.pop_stack_frame(/* unwinding */ false)?\n             }\n "}, {"sha": "beabdf7f784f8d086544fb79046210066f23998a", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/61fbc6a394e00778876a5776db27a5e58231f67b/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61fbc6a394e00778876a5776db27a5e58231f67b/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=61fbc6a394e00778876a5776db27a5e58231f67b", "patch": "@@ -330,7 +330,6 @@ struct ConstPropagator<'mir, 'tcx> {\n     // by accessing them through `ecx` instead.\n     source_scopes: IndexVec<SourceScope, SourceScopeData>,\n     local_decls: IndexVec<Local, LocalDecl<'tcx>>,\n-    ret: Option<OpTy<'tcx, ()>>,\n     // Because we have `MutVisitor` we can't obtain the `SourceInfo` from a `Location`. So we store\n     // the last known `SourceInfo` here and just keep revisiting it.\n     source_info: Option<SourceInfo>,\n@@ -402,22 +401,19 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             source_scopes: body.source_scopes.clone(),\n             //FIXME(wesleywiser) we can't steal this because `Visitor::super_visit_body()` needs it\n             local_decls: body.local_decls.clone(),\n-            ret: ret.map(Into::into),\n             source_info: None,\n         }\n     }\n \n     fn get_const(&self, local: Local) -> Option<OpTy<'tcx>> {\n-        if local == RETURN_PLACE {\n-            // Try to read the return place as an immediate so that if it is representable as a\n-            // scalar, we can handle it as such, but otherwise, just return the value as is.\n-            return match self.ret.map(|ret| self.ecx.try_read_immediate(ret)) {\n-                Some(Ok(Ok(imm))) => Some(imm.into()),\n-                _ => self.ret,\n-            };\n-        }\n+        let op = self.ecx.access_local(self.ecx.frame(), local, None).ok();\n \n-        self.ecx.access_local(self.ecx.frame(), local, None).ok()\n+        // Try to read the local as an immediate so that if it is representable as a scalar, we can\n+        // handle it as such, but otherwise, just return the value as is.\n+        match op.map(|ret| self.ecx.try_read_immediate(ret)) {\n+            Some(Ok(Ok(imm))) => Some(imm.into()),\n+            _ => op,\n+        }\n     }\n \n     fn remove_const(&mut self, local: Local) {"}, {"sha": "ed93af2f993d3bc7bee7b7dae1ca99b363671a5a", "filename": "src/test/codegen/consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/61fbc6a394e00778876a5776db27a5e58231f67b/src%2Ftest%2Fcodegen%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61fbc6a394e00778876a5776db27a5e58231f67b/src%2Ftest%2Fcodegen%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fconsts.rs?ref=61fbc6a394e00778876a5776db27a5e58231f67b", "patch": "@@ -10,11 +10,11 @@\n // CHECK: @STATIC = {{.*}}, align 4\n \n // This checks the constants from inline_enum_const\n-// CHECK: @alloc5 = {{.*}}, align 2\n+// CHECK: @alloc7 = {{.*}}, align 2\n \n // This checks the constants from {low,high}_align_const, they share the same\n // constant, but the alignment differs, so the higher one should be used\n-// CHECK: [[LOW_HIGH:@[0-9]+]] = {{.*}} getelementptr inbounds (<{ [8 x i8] }>, <{ [8 x i8] }>* @alloc15, i32 0, i32 0, i32 0), {{.*}}\n+// CHECK: [[LOW_HIGH:@[0-9]+]] = {{.*}} getelementptr inbounds (<{ [8 x i8] }>, <{ [8 x i8] }>* @alloc19, i32 0, i32 0, i32 0), {{.*}}\n \n #[derive(Copy, Clone)]\n // repr(i16) is required for the {low,high}_align_const test"}, {"sha": "2c07cbcb2054b711f55bd91f8e0f7c337aa0183f", "filename": "src/test/incremental/hashes/enum_constructors.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/61fbc6a394e00778876a5776db27a5e58231f67b/src%2Ftest%2Fincremental%2Fhashes%2Fenum_constructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61fbc6a394e00778876a5776db27a5e58231f67b/src%2Ftest%2Fincremental%2Fhashes%2Fenum_constructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fenum_constructors.rs?ref=61fbc6a394e00778876a5776db27a5e58231f67b", "patch": "@@ -274,29 +274,29 @@ pub enum Clike2 {\n // Change constructor path (C-like) --------------------------------------\n #[cfg(cfail1)]\n pub fn change_constructor_path_c_like() {\n-    let _ = Clike::B;\n+    let _x = Clike::B;\n }\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir,mir_built,typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_constructor_path_c_like() {\n-    let _ = Clike2::B;\n+    let _x = Clike2::B;\n }\n \n \n \n // Change constructor variant (C-like) --------------------------------------\n #[cfg(cfail1)]\n pub fn change_constructor_variant_c_like() {\n-    let _ = Clike::A;\n+    let _x = Clike::A;\n }\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir,mir_built\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_constructor_variant_c_like() {\n-    let _ = Clike::C;\n+    let _x = Clike::C;\n }\n \n "}, {"sha": "efd14ea140fe8e85ae48fbe61d44e0ed9fe5026f", "filename": "src/test/mir-opt/const_allocation2/32bit/rustc.main.ConstProp.after.mir", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/61fbc6a394e00778876a5776db27a5e58231f67b/src%2Ftest%2Fmir-opt%2Fconst_allocation2%2F32bit%2Frustc.main.ConstProp.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/61fbc6a394e00778876a5776db27a5e58231f67b/src%2Ftest%2Fmir-opt%2Fconst_allocation2%2F32bit%2Frustc.main.ConstProp.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation2%2F32bit%2Frustc.main.ConstProp.after.mir?ref=61fbc6a394e00778876a5776db27a5e58231f67b", "patch": "@@ -30,41 +30,41 @@ fn main() -> () {\n }\n \n alloc0 (static: FOO, size: 8, align: 4) {\n-    \u257ealloc24+0\u257c 03 00 00 00                         \u2502 \u257e\u2500\u2500\u257c....\n+    \u257ealloc25+0\u257c 03 00 00 00                         \u2502 \u257e\u2500\u2500\u257c....\n }\n \n-alloc24 (size: 48, align: 4) {\n-    0x00 \u2502 00 00 00 00 __ __ __ __ \u257ealloc9+0\u2500\u257c 00 00 00 00 \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u257c....\n-    0x10 \u2502 00 00 00 00 __ __ __ __ \u257ealloc14+0\u257c 02 00 00 00 \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u257c....\n-    0x20 \u2502 01 00 00 00 2a 00 00 00 \u257ealloc22+0\u257c 03 00 00 00 \u2502 ....*...\u257e\u2500\u2500\u257c....\n+alloc25 (size: 48, align: 4) {\n+    0x00 \u2502 00 00 00 00 __ __ __ __ \u257ealloc10+0\u257c 00 00 00 00 \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u257c....\n+    0x10 \u2502 00 00 00 00 __ __ __ __ \u257ealloc15+0\u257c 02 00 00 00 \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u257c....\n+    0x20 \u2502 01 00 00 00 2a 00 00 00 \u257ealloc23+0\u257c 03 00 00 00 \u2502 ....*...\u257e\u2500\u2500\u257c....\n }\n \n-alloc9 (size: 0, align: 4) {}\n+alloc10 (size: 0, align: 4) {}\n \n-alloc14 (size: 8, align: 4) {\n-    \u257ealloc12+0\u257c \u257ealloc13+0\u257c                         \u2502 \u257e\u2500\u2500\u257c\u257e\u2500\u2500\u257c\n+alloc15 (size: 8, align: 4) {\n+    \u257ealloc13+0\u257c \u257ealloc14+0\u257c                         \u2502 \u257e\u2500\u2500\u257c\u257e\u2500\u2500\u257c\n }\n \n-alloc12 (size: 1, align: 1) {\n+alloc13 (size: 1, align: 1) {\n     05                                              \u2502 .\n }\n \n-alloc13 (size: 1, align: 1) {\n+alloc14 (size: 1, align: 1) {\n     06                                              \u2502 .\n }\n \n-alloc22 (size: 12, align: 4) {\n-    \u257ealloc18+3\u257c \u257ealloc19+0\u257c \u257ealloc21+2\u257c             \u2502 \u257e\u2500\u2500\u257c\u257e\u2500\u2500\u257c\u257e\u2500\u2500\u257c\n+alloc23 (size: 12, align: 4) {\n+    \u257ealloc19+3\u257c \u257ealloc20+0\u257c \u257ealloc22+2\u257c             \u2502 \u257e\u2500\u2500\u257c\u257e\u2500\u2500\u257c\u257e\u2500\u2500\u257c\n }\n \n-alloc18 (size: 4, align: 1) {\n+alloc19 (size: 4, align: 1) {\n     2a 45 15 6f                                     \u2502 *E.o\n }\n \n-alloc19 (size: 1, align: 1) {\n+alloc20 (size: 1, align: 1) {\n     2a                                              \u2502 *\n }\n \n-alloc21 (size: 4, align: 1) {\n+alloc22 (size: 4, align: 1) {\n     2a 45 15 6f                                     \u2502 *E.o\n }"}, {"sha": "3b649ee7a24bd90dbedd40621248584057849a4e", "filename": "src/test/mir-opt/const_allocation2/64bit/rustc.main.ConstProp.after.mir", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/61fbc6a394e00778876a5776db27a5e58231f67b/src%2Ftest%2Fmir-opt%2Fconst_allocation2%2F64bit%2Frustc.main.ConstProp.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/61fbc6a394e00778876a5776db27a5e58231f67b/src%2Ftest%2Fmir-opt%2Fconst_allocation2%2F64bit%2Frustc.main.ConstProp.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation2%2F64bit%2Frustc.main.ConstProp.after.mir?ref=61fbc6a394e00778876a5776db27a5e58231f67b", "patch": "@@ -30,44 +30,44 @@ fn main() -> () {\n }\n \n alloc0 (static: FOO, size: 16, align: 8) {\n-    \u257e\u2500\u2500\u2500\u2500\u2500\u2500alloc24+0\u2500\u2500\u2500\u2500\u2500\u2500\u257c 03 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n+    \u257e\u2500\u2500\u2500\u2500\u2500\u2500alloc25+0\u2500\u2500\u2500\u2500\u2500\u2500\u257c 03 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n }\n \n-alloc24 (size: 72, align: 8) {\n-    0x00 \u2502 00 00 00 00 __ __ __ __ \u257e\u2500\u2500\u2500\u2500\u2500\u2500alloc9+0\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+alloc25 (size: 72, align: 8) {\n+    0x00 \u2502 00 00 00 00 __ __ __ __ \u257e\u2500\u2500\u2500\u2500\u2500\u2500alloc10+0\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n     0x10 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 __ __ __ __ \u2502 ............\u2591\u2591\u2591\u2591\n-    0x20 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500alloc14+0\u2500\u2500\u2500\u2500\u2500\u2500\u257c 02 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n-    0x30 \u2502 01 00 00 00 2a 00 00 00 \u257e\u2500\u2500\u2500\u2500\u2500\u2500alloc22+0\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 ....*...\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+    0x20 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500alloc15+0\u2500\u2500\u2500\u2500\u2500\u2500\u257c 02 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n+    0x30 \u2502 01 00 00 00 2a 00 00 00 \u257e\u2500\u2500\u2500\u2500\u2500\u2500alloc23+0\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 ....*...\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n     0x40 \u2502 03 00 00 00 00 00 00 00                         \u2502 ........\n }\n \n-alloc9 (size: 0, align: 8) {}\n+alloc10 (size: 0, align: 8) {}\n \n-alloc14 (size: 16, align: 8) {\n-    \u257e\u2500\u2500\u2500\u2500\u2500\u2500alloc12+0\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u257e\u2500\u2500\u2500\u2500\u2500\u2500alloc13+0\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+alloc15 (size: 16, align: 8) {\n+    \u257e\u2500\u2500\u2500\u2500\u2500\u2500alloc13+0\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u257e\u2500\u2500\u2500\u2500\u2500\u2500alloc14+0\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n }\n \n-alloc12 (size: 1, align: 1) {\n+alloc13 (size: 1, align: 1) {\n     05                                              \u2502 .\n }\n \n-alloc13 (size: 1, align: 1) {\n+alloc14 (size: 1, align: 1) {\n     06                                              \u2502 .\n }\n \n-alloc22 (size: 24, align: 8) {\n-    0x00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500alloc18+3\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u257e\u2500\u2500\u2500\u2500\u2500\u2500alloc19+0\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n-    0x10 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500alloc21+2\u2500\u2500\u2500\u2500\u2500\u2500\u257c                         \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+alloc23 (size: 24, align: 8) {\n+    0x00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500alloc19+3\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u257e\u2500\u2500\u2500\u2500\u2500\u2500alloc20+0\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+    0x10 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500alloc22+2\u2500\u2500\u2500\u2500\u2500\u2500\u257c                         \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n }\n \n-alloc18 (size: 4, align: 1) {\n+alloc19 (size: 4, align: 1) {\n     2a 45 15 6f                                     \u2502 *E.o\n }\n \n-alloc19 (size: 1, align: 1) {\n+alloc20 (size: 1, align: 1) {\n     2a                                              \u2502 *\n }\n \n-alloc21 (size: 4, align: 1) {\n+alloc22 (size: 4, align: 1) {\n     2a 45 15 6f                                     \u2502 *E.o\n }"}, {"sha": "b6c2572cb8dc3108db1c08e629b94f72802870ac", "filename": "src/test/ui/consts/const-eval/ub-nonnull.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61fbc6a394e00778876a5776db27a5e58231f67b/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/61fbc6a394e00778876a5776db27a5e58231f67b/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.stderr?ref=61fbc6a394e00778876a5776db27a5e58231f67b", "patch": "@@ -13,7 +13,7 @@ LL | / const OUT_OF_BOUNDS_PTR: NonNull<u8> = { unsafe {\n LL | |     let ptr: &[u8; 256] = mem::transmute(&0u8); // &0 gets promoted so it does not dangle\n LL | |     // Use address-of-element for pointer arithmetic. This could wrap around to NULL!\n LL | |     let out_of_bounds_ptr = &ptr[255];\n-   | |                             ^^^^^^^^^ Memory access failed: pointer must be in-bounds at offset 256, but is outside bounds of alloc8 which has size 1\n+   | |                             ^^^^^^^^^ Memory access failed: pointer must be in-bounds at offset 256, but is outside bounds of alloc11 which has size 1\n LL | |     mem::transmute(out_of_bounds_ptr)\n LL | | } };\n    | |____-"}, {"sha": "54a9eda21466088c75433b179020984d54f9955e", "filename": "src/test/ui/consts/miri_unleashed/mutable_const.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61fbc6a394e00778876a5776db27a5e58231f67b/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/61fbc6a394e00778876a5776db27a5e58231f67b/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const.stderr?ref=61fbc6a394e00778876a5776db27a5e58231f67b", "patch": "@@ -11,7 +11,7 @@ LL | / const MUTATING_BEHIND_RAW: () = {\n LL | |     // Test that `MUTABLE_BEHIND_RAW` is actually immutable, by doing this at const time.\n LL | |     unsafe {\n LL | |         *MUTABLE_BEHIND_RAW = 99\n-   | |         ^^^^^^^^^^^^^^^^^^^^^^^^ writing to alloc1 which is read-only\n+   | |         ^^^^^^^^^^^^^^^^^^^^^^^^ writing to alloc2 which is read-only\n LL | |     }\n LL | | };\n    | |__-"}]}