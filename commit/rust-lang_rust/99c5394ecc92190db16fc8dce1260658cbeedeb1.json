{"sha": "99c5394ecc92190db16fc8dce1260658cbeedeb1", "node_id": "C_kwDOAAsO6NoAKDk5YzUzOTRlY2M5MjE5MGRiMTZmYzhkY2UxMjYwNjU4Y2JlZWRlYjE", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-01-02T18:12:28Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-04-18T18:59:08Z"}, "message": "Add query syntax for the parser", "tree": {"sha": "a9aaffe051b0de821c374d20e0d5a9e77c8327f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9aaffe051b0de821c374d20e0d5a9e77c8327f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99c5394ecc92190db16fc8dce1260658cbeedeb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99c5394ecc92190db16fc8dce1260658cbeedeb1", "html_url": "https://github.com/rust-lang/rust/commit/99c5394ecc92190db16fc8dce1260658cbeedeb1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99c5394ecc92190db16fc8dce1260658cbeedeb1/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51de26cfd977edc7b0dc5450474a840359a79443", "url": "https://api.github.com/repos/rust-lang/rust/commits/51de26cfd977edc7b0dc5450474a840359a79443", "html_url": "https://github.com/rust-lang/rust/commit/51de26cfd977edc7b0dc5450474a840359a79443"}], "stats": {"total": 83, "additions": 71, "deletions": 12}, "files": [{"sha": "469551f20920ec614f0a51b4f6ad0eb0fcde1c36", "filename": "src/librustdoc/html/static/js/search.js", "status": "modified", "additions": 71, "deletions": 12, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/99c5394ecc92190db16fc8dce1260658cbeedeb1/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "raw_url": "https://github.com/rust-lang/rust/raw/99c5394ecc92190db16fc8dce1260658cbeedeb1/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js?ref=99c5394ecc92190db16fc8dce1260658cbeedeb1", "patch": "@@ -158,7 +158,65 @@ window.initSearch = function(rawSearchIndex) {\n     }\n \n     /**\n-     * Executes the query and returns a list of results for each results tab.\n+     * Executes the query and builds an index of results\n+     *\n+     * The supported syntax by this parser is as follow:\n+     *\n+     * ident = *1(ALPHA / DIGIT)\n+     * path = ident *WS *(DOUBLE-COLON *WS ident)\n+     * arg = path *WS [generics]\n+     * nonempty-arg-list = arg *WS *(COMMA *WS arg)\n+     * generics = OPEN-ANGLE-BRACKET *WS nonempty-arg-list *WS CLOSE-ANGLE-BRACKET\n+     * function-args = OPEN-PAREN *WS [nonempty-arg-list] *WS END-PAREN\n+     * return-args = RETURN-ARROW *WS function-args\n+     *\n+     * exact-search = [type-filter *WS COLON] *WS QUOTE ident QUOTE *WS [generics]\n+     * type-search = [type-filter *WS COLON] *WS path *WS generics\n+     * function-search = path *WS function-args *WS [return-args]\n+     *\n+     * query = *WS (exact-search / type-search / function-search / return-args) *WS\n+     *\n+     * type-filter = (\n+     *     \"mod\" /\n+     *     \"externcrate\" /\n+     *     \"import\" /\n+     *     \"struct\" /\n+     *     \"enum\" /\n+     *     \"fn\" /\n+     *     \"type\" /\n+     *     \"static\" /\n+     *     \"trait\" /\n+     *     \"impl\" /\n+     *     \"tymethod\" /\n+     *     \"method\" /\n+     *     \"structfield\" /\n+     *     \"variant\" /\n+     *     \"macro\" /\n+     *     \"primitive\" /\n+     *     \"associatedtype\" /\n+     *     \"constant\" /\n+     *     \"associatedconstant\" /\n+     *     \"union\" /\n+     *     \"foreigntype\" /\n+     *     \"keyword\" /\n+     *     \"existential\" /\n+     *     \"attr\" /\n+     *     \"derive\" /\n+     *     \"traitalias\")\n+     *\n+     * OPEN-ANGLE-BRACKET = \"<\"\n+     * CLOSE-ANGLE-BRACKET = \">\"\n+     * OPEN-PAREN = \"(\"\n+     * END-PAREN = \")\"\n+     * COLON = \":\"\n+     * DOUBLE-COLON = \"::\"\n+     * QUOTE = %x22\n+     * COMMA = \",\"\n+     * RETURN-ARROW = \"->\"\n+     *\n+     * ALPHA = %x41-5A / %x61-7A ; A-Z / a-z\n+     * DIGIT = %x30-39\n+     * WS = %x09 / \" \"\n      *\n      * @param  {string} val     - The user query\n      * @return {ParsedQuery}    - The parsed query\n@@ -606,7 +664,8 @@ window.initSearch = function(rawSearchIndex) {\n          * This function checks if the object (`obj`) generics match the given type (`val`)\n          * generics. If there are no generics on `obj`, `defaultLev` is returned.\n          *\n-         * @param {Object} obj         - The object to check.\n+         * @param {Row} obj            - The object to check.\n+         * @param {QueryElement} val   - The element from the parsed query.\n          * @param {integer} defaultLev - This is the value to return in case there are no generics.\n          *\n          * @return {integer}           - Returns the best match (if any) or `MAX_LEV_DISTANCE + 1`.\n@@ -662,8 +721,8 @@ window.initSearch = function(rawSearchIndex) {\n           * This function checks if the object (`obj`) matches the given type (`val`) and its\n           * generics (if any).\n           *\n-          * @param {Object} obj\n-          * @param {Object} val\n+          * @param {Row} obj\n+          * @param {QueryElement} val    - The element from the parsed query.\n           *\n           * @return {integer} - Returns a Levenshtein distance to the best match.\n           */\n@@ -756,8 +815,8 @@ window.initSearch = function(rawSearchIndex) {\n         /**\n          * This function checks if the object (`obj`) has an argument with the given type (`val`).\n          *\n-         * @param {Object} obj\n-         * @param {Object} val\n+         * @param {Row} obj\n+         * @param {QueryElement} val    - The element from the parsed query.\n          * @param {integer} typeFilter\n          *\n          * @return {integer} - Returns a Levenshtein distance to the best match. If there is no\n@@ -784,8 +843,8 @@ window.initSearch = function(rawSearchIndex) {\n         }\n \n         /**\n-         * @param {Object} obj\n-         * @param {Object} val\n+         * @param {Row} obj\n+         * @param {QueryElement} val   - The element from the parsed query.\n          * @param {integer} typeFilter\n          *\n          * @return {integer} - Returns a Levenshtein distance to the best match. If there is no\n@@ -978,9 +1037,9 @@ window.initSearch = function(rawSearchIndex) {\n         /**\n          * This function is called in case the query is only one element (with or without generics).\n          *\n-         * @param {Object} ty\n-         * @param {integer} pos     - Position in the `searchIndex`.\n-         * @param {Object} elem     - The element from the parsed query.\n+         * @param {Row} ty\n+         * @param {integer} pos           - Position in the `searchIndex`.\n+         * @param {QueryElement} elem     - The element from the parsed query.\n          */\n         function handleSingleArg(ty, pos, elem) {\n             if (!ty || (filterCrates !== null && ty.crate !== filterCrates)) {\n@@ -1477,7 +1536,7 @@ window.initSearch = function(rawSearchIndex) {\n         }\n \n         if (!forced && query.id === currentResults) {\n-            if (query.val.length > 0) {\n+            if (query.userQuery.length > 0) {\n                 putBackSearch();\n             }\n             return;"}]}