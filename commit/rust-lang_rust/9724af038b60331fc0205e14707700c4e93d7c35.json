{"sha": "9724af038b60331fc0205e14707700c4e93d7c35", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3MjRhZjAzOGI2MDMzMWZjMDIwNWUxNDcwNzcwMGM0ZTkzZDdjMzU=", "commit": {"author": {"name": "Matt Hooper", "email": "matthewjhooper94@gmail.com", "date": "2020-09-20T23:42:27Z"}, "committer": {"name": "Matt Hooper", "email": "matthewjhooper94@gmail.com", "date": "2020-09-20T23:42:27Z"}, "message": "Replace entire impl def instead of only associated items for missing impl member assist (if braces are missing from an impl def then there is no associated item list in the AST)", "tree": {"sha": "fa1bcb823031141722b615b3052f9bb7e1a083a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa1bcb823031141722b615b3052f9bb7e1a083a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9724af038b60331fc0205e14707700c4e93d7c35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9724af038b60331fc0205e14707700c4e93d7c35", "html_url": "https://github.com/rust-lang/rust/commit/9724af038b60331fc0205e14707700c4e93d7c35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9724af038b60331fc0205e14707700c4e93d7c35/comments", "author": {"login": "M-J-Hooper", "id": 13765376, "node_id": "MDQ6VXNlcjEzNzY1Mzc2", "avatar_url": "https://avatars.githubusercontent.com/u/13765376?v=4", "gravatar_id": "", "url": "https://api.github.com/users/M-J-Hooper", "html_url": "https://github.com/M-J-Hooper", "followers_url": "https://api.github.com/users/M-J-Hooper/followers", "following_url": "https://api.github.com/users/M-J-Hooper/following{/other_user}", "gists_url": "https://api.github.com/users/M-J-Hooper/gists{/gist_id}", "starred_url": "https://api.github.com/users/M-J-Hooper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/M-J-Hooper/subscriptions", "organizations_url": "https://api.github.com/users/M-J-Hooper/orgs", "repos_url": "https://api.github.com/users/M-J-Hooper/repos", "events_url": "https://api.github.com/users/M-J-Hooper/events{/privacy}", "received_events_url": "https://api.github.com/users/M-J-Hooper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "M-J-Hooper", "id": 13765376, "node_id": "MDQ6VXNlcjEzNzY1Mzc2", "avatar_url": "https://avatars.githubusercontent.com/u/13765376?v=4", "gravatar_id": "", "url": "https://api.github.com/users/M-J-Hooper", "html_url": "https://github.com/M-J-Hooper", "followers_url": "https://api.github.com/users/M-J-Hooper/followers", "following_url": "https://api.github.com/users/M-J-Hooper/following{/other_user}", "gists_url": "https://api.github.com/users/M-J-Hooper/gists{/gist_id}", "starred_url": "https://api.github.com/users/M-J-Hooper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/M-J-Hooper/subscriptions", "organizations_url": "https://api.github.com/users/M-J-Hooper/orgs", "repos_url": "https://api.github.com/users/M-J-Hooper/repos", "events_url": "https://api.github.com/users/M-J-Hooper/events{/privacy}", "received_events_url": "https://api.github.com/users/M-J-Hooper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae7c9824215dbaa53786cba2fcc1d9537cb06276", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae7c9824215dbaa53786cba2fcc1d9537cb06276", "html_url": "https://github.com/rust-lang/rust/commit/ae7c9824215dbaa53786cba2fcc1d9537cb06276"}], "stats": {"total": 21, "additions": 12, "deletions": 9}, "files": [{"sha": "e6f72f4bdf150386b9bbcc8ea1e30f4f7bd9c359", "filename": "crates/assists/src/handlers/add_missing_impl_members.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9724af038b60331fc0205e14707700c4e93d7c35/crates%2Fassists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9724af038b60331fc0205e14707700c4e93d7c35/crates%2Fassists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs?ref=9724af038b60331fc0205e14707700c4e93d7c35", "patch": "@@ -111,8 +111,6 @@ fn add_missing_impl_members_inner(\n ) -> Option<()> {\n     let _p = profile::span(\"add_missing_impl_members_inner\");\n     let impl_def = ctx.find_node_at_offset::<ast::Impl>()?;\n-    let impl_item_list = impl_def.assoc_item_list()?;\n-\n     let trait_ = resolve_target_trait(&ctx.sema, &impl_def)?;\n \n     let def_name = |item: &ast::AssocItem| -> Option<SmolStr> {\n@@ -148,11 +146,14 @@ fn add_missing_impl_members_inner(\n \n     let target = impl_def.syntax().text_range();\n     acc.add(AssistId(assist_id, AssistKind::QuickFix), label, target, |builder| {\n+        let impl_item_list = impl_def.assoc_item_list().unwrap_or(make::assoc_item_list());\n+\n         let n_existing_items = impl_item_list.assoc_items().count();\n         let source_scope = ctx.sema.scope_for_def(trait_);\n-        let target_scope = ctx.sema.scope(impl_item_list.syntax());\n+        let target_scope = ctx.sema.scope(impl_def.syntax());\n         let ast_transform = QualifyPaths::new(&target_scope, &source_scope)\n-            .or(SubstituteTypeParams::for_trait_impl(&source_scope, trait_, impl_def));\n+            .or(SubstituteTypeParams::for_trait_impl(&source_scope, trait_, impl_def.clone()));\n+\n         let items = missing_items\n             .into_iter()\n             .map(|it| ast_transform::apply(&*ast_transform, it))\n@@ -162,12 +163,14 @@ fn add_missing_impl_members_inner(\n                 _ => it,\n             })\n             .map(|it| edit::remove_attrs_and_docs(&it));\n+\n         let new_impl_item_list = impl_item_list.append_items(items);\n-        let first_new_item = new_impl_item_list.assoc_items().nth(n_existing_items).unwrap();\n+        let new_impl_def = impl_def.with_items(new_impl_item_list);\n+        let first_new_item =\n+            new_impl_def.assoc_item_list().unwrap().assoc_items().nth(n_existing_items).unwrap();\n \n-        let original_range = impl_item_list.syntax().text_range();\n         match ctx.config.snippet_cap {\n-            None => builder.replace(original_range, new_impl_item_list.to_string()),\n+            None => builder.replace(target, new_impl_def.to_string()),\n             Some(cap) => {\n                 let mut cursor = Cursor::Before(first_new_item.syntax());\n                 let placeholder;\n@@ -181,8 +184,8 @@ fn add_missing_impl_members_inner(\n                 }\n                 builder.replace_snippet(\n                     cap,\n-                    original_range,\n-                    render_snippet(cap, new_impl_item_list.syntax(), cursor),\n+                    target,\n+                    render_snippet(cap, new_impl_def.syntax(), cursor),\n                 )\n             }\n         };"}]}