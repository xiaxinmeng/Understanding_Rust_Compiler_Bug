{"sha": "e9988c1e2d9ec0a1442f8591804c471ee11e1924", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5OTg4YzFlMmQ5ZWMwYTE0NDJmODU5MTgwNGM0NzFlZTExZTE5MjQ=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2013-07-04T03:33:55Z"}, "committer": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2013-07-04T03:33:55Z"}, "message": "Upper-cased exported statics", "tree": {"sha": "fe763a48163cf195aac8710500dc95b6c214b073", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe763a48163cf195aac8710500dc95b6c214b073"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9988c1e2d9ec0a1442f8591804c471ee11e1924", "comment_count": 12, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9988c1e2d9ec0a1442f8591804c471ee11e1924", "html_url": "https://github.com/rust-lang/rust/commit/e9988c1e2d9ec0a1442f8591804c471ee11e1924", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9988c1e2d9ec0a1442f8591804c471ee11e1924/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1482cf5ded3998fa8edb01999287d22594f1e4bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/1482cf5ded3998fa8edb01999287d22594f1e4bb", "html_url": "https://github.com/rust-lang/rust/commit/1482cf5ded3998fa8edb01999287d22594f1e4bb"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "3c1fc72e95783c14f5ff47a7c1a3654b9598c497", "filename": "src/libextra/base64.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e9988c1e2d9ec0a1442f8591804c471ee11e1924/src%2Flibextra%2Fbase64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9988c1e2d9ec0a1442f8591804c471ee11e1924/src%2Flibextra%2Fbase64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fbase64.rs?ref=e9988c1e2d9ec0a1442f8591804c471ee11e1924", "patch": "@@ -29,15 +29,15 @@ pub struct Config {\n }\n \n /// Configuration for RFC 4648 standard base64 encoding\n-pub static standard: Config =\n+pub static STANDARD: Config =\n     Config {char_set: Standard, pad: true, line_length: None};\n \n /// Configuration for RFC 4648 base64url encoding\n-pub static url_safe: Config =\n+pub static URL_SAFE: Config =\n     Config {char_set: UrlSafe, pad: false, line_length: None};\n \n /// Configuration for RFC 2045 MIME base64 encoding\n-pub static mime: Config =\n+pub static MIME: Config =\n     Config {char_set: Standard, pad: true, line_length: Some(76)};\n \n static STANDARD_CHARS: [char, ..64] = [\n@@ -286,33 +286,33 @@ impl<'self> FromBase64 for &'self str {\n \n #[test]\n fn test_to_base64_basic() {\n-    assert_eq!(\"\".to_base64(standard), ~\"\");\n-    assert_eq!(\"f\".to_base64(standard), ~\"Zg==\");\n-    assert_eq!(\"fo\".to_base64(standard), ~\"Zm8=\");\n-    assert_eq!(\"foo\".to_base64(standard), ~\"Zm9v\");\n-    assert_eq!(\"foob\".to_base64(standard), ~\"Zm9vYg==\");\n-    assert_eq!(\"fooba\".to_base64(standard), ~\"Zm9vYmE=\");\n-    assert_eq!(\"foobar\".to_base64(standard), ~\"Zm9vYmFy\");\n+    assert_eq!(\"\".to_base64(STANDARD), ~\"\");\n+    assert_eq!(\"f\".to_base64(STANDARD), ~\"Zg==\");\n+    assert_eq!(\"fo\".to_base64(STANDARD), ~\"Zm8=\");\n+    assert_eq!(\"foo\".to_base64(STANDARD), ~\"Zm9v\");\n+    assert_eq!(\"foob\".to_base64(STANDARD), ~\"Zm9vYg==\");\n+    assert_eq!(\"fooba\".to_base64(STANDARD), ~\"Zm9vYmE=\");\n+    assert_eq!(\"foobar\".to_base64(STANDARD), ~\"Zm9vYmFy\");\n }\n \n #[test]\n fn test_to_base64_line_break() {\n-    assert!(![0u8, 1000].to_base64(Config {line_length: None, ..standard})\n+    assert!(![0u8, 1000].to_base64(Config {line_length: None, ..STANDARD})\n         .contains(\"\\r\\n\"));\n-    assert_eq!(\"foobar\".to_base64(Config {line_length: Some(4), ..standard}),\n+    assert_eq!(\"foobar\".to_base64(Config {line_length: Some(4), ..STANDARD}),\n         ~\"Zm9v\\r\\nYmFy\");\n }\n \n #[test]\n fn test_to_base64_padding() {\n-    assert_eq!(\"f\".to_base64(Config {pad: false, ..standard}), ~\"Zg\");\n-    assert_eq!(\"fo\".to_base64(Config {pad: false, ..standard}), ~\"Zm8\");\n+    assert_eq!(\"f\".to_base64(Config {pad: false, ..STANDARD}), ~\"Zg\");\n+    assert_eq!(\"fo\".to_base64(Config {pad: false, ..STANDARD}), ~\"Zm8\");\n }\n \n #[test]\n fn test_to_base64_url_safe() {\n-    assert_eq!([251, 255].to_base64(url_safe), ~\"-_8\");\n-    assert_eq!([251, 255].to_base64(standard), ~\"+/8=\");\n+    assert_eq!([251, 255].to_base64(URL_SAFE), ~\"-_8\");\n+    assert_eq!([251, 255].to_base64(STANDARD), ~\"+/8=\");\n }\n \n #[test]\n@@ -359,6 +359,6 @@ fn test_base64_random() {\n                 push(random());\n             }\n         };\n-        assert_eq!(v.to_base64(standard).from_base64().get(), v);\n+        assert_eq!(v.to_base64(STANDARD).from_base64().get(), v);\n     }\n }"}]}