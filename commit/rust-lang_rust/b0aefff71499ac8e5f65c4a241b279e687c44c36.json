{"sha": "b0aefff71499ac8e5f65c4a241b279e687c44c36", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwYWVmZmY3MTQ5OWFjOGU1ZjY1YzRhMjQxYjI3OWU2ODdjNDRjMzY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-04-30T09:07:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-04-30T09:07:33Z"}, "message": "Auto merge of #32846 - jseyfried:allow_unconfigured_gated_expanded_items, r=nrc\n\nAvoid gated feature checking unconfigured expanded items\n\nAvoid gated feature checking unconfigured macro-expanded items (fixes #32840).\nUnconfigured items that are not macro-expanded are already not gated feature checked.\nr? @nrc", "tree": {"sha": "fbf61aea82a77a40de7c5406658c2ecf74a0e2f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fbf61aea82a77a40de7c5406658c2ecf74a0e2f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0aefff71499ac8e5f65c4a241b279e687c44c36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0aefff71499ac8e5f65c4a241b279e687c44c36", "html_url": "https://github.com/rust-lang/rust/commit/b0aefff71499ac8e5f65c4a241b279e687c44c36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0aefff71499ac8e5f65c4a241b279e687c44c36/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46504e9a9d3a57a852ff57f7530de2017a7b37ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/46504e9a9d3a57a852ff57f7530de2017a7b37ba", "html_url": "https://github.com/rust-lang/rust/commit/46504e9a9d3a57a852ff57f7530de2017a7b37ba"}, {"sha": "86f069d41a89122740d58d0eb8eaeb7496bb03ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/86f069d41a89122740d58d0eb8eaeb7496bb03ce", "html_url": "https://github.com/rust-lang/rust/commit/86f069d41a89122740d58d0eb8eaeb7496bb03ce"}], "stats": {"total": 51, "additions": 29, "deletions": 22}, "files": [{"sha": "23e937e83e6bbf8e93eb23422d0f4ee74e3ce1d3", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b0aefff71499ac8e5f65c4a241b279e687c44c36/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0aefff71499ac8e5f65c4a241b279e687c44c36/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=b0aefff71499ac8e5f65c4a241b279e687c44c36", "patch": "@@ -645,21 +645,6 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n         ret\n     });\n \n-    // Needs to go *after* expansion to be able to check the results\n-    // of macro expansion.  This runs before #[cfg] to try to catch as\n-    // much as possible (e.g. help the programmer avoid platform\n-    // specific differences)\n-    time(time_passes, \"complete gated feature checking 1\", || {\n-        sess.track_errors(|| {\n-            let features = syntax::feature_gate::check_crate(sess.codemap(),\n-                                                             &sess.parse_sess.span_diagnostic,\n-                                                             &krate,\n-                                                             &attributes,\n-                                                             sess.opts.unstable_features);\n-            *sess.features.borrow_mut() = features;\n-        })\n-    })?;\n-\n     // JBC: make CFG processing part of expansion to avoid this problem:\n \n     // strip again, in case expansion added anything with a #[cfg].\n@@ -698,10 +683,8 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n          \"checking for inline asm in case the target doesn't support it\",\n          || no_asm::check_crate(sess, &krate));\n \n-    // One final feature gating of the true AST that gets compiled\n-    // later, to make sure we've got everything (e.g. configuration\n-    // can insert new attributes via `cfg_attr`)\n-    time(time_passes, \"complete gated feature checking 2\", || {\n+    // Needs to go *after* expansion to be able to check the results of macro expansion.\n+    time(time_passes, \"complete gated feature checking\", || {\n         sess.track_errors(|| {\n             let features = syntax::feature_gate::check_crate(sess.codemap(),\n                                                              &sess.parse_sess.span_diagnostic,"}, {"sha": "63d9a699944ea875bbac6352468a09a8499c4458", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0aefff71499ac8e5f65c4a241b279e687c44c36/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0aefff71499ac8e5f65c4a241b279e687c44c36/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=b0aefff71499ac8e5f65c4a241b279e687c44c36", "patch": "@@ -327,9 +327,7 @@ macro_rules! with_exts_frame {\n // When we enter a module, record it, for the sake of `module!`\n pub fn expand_item(it: P<ast::Item>, fld: &mut MacroExpander)\n                    -> SmallVector<P<ast::Item>> {\n-    let it = expand_item_multi_modifier(Annotatable::Item(it), fld);\n-\n-    expand_annotatable(it, fld)\n+    expand_annotatable(Annotatable::Item(it), fld)\n         .into_iter().map(|i| i.expect_item()).collect()\n }\n "}, {"sha": "2f74aeba9eb4335d692d82ba2b9ab2e51d532646", "filename": "src/test/compile-fail/expanded-cfg.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b0aefff71499ac8e5f65c4a241b279e687c44c36/src%2Ftest%2Fcompile-fail%2Fexpanded-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0aefff71499ac8e5f65c4a241b279e687c44c36/src%2Ftest%2Fcompile-fail%2Fexpanded-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fexpanded-cfg.rs?ref=b0aefff71499ac8e5f65c4a241b279e687c44c36", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(rustc_attrs)]\n+\n+macro_rules! mac {\n+    {} => {\n+        #[cfg(attr)]\n+        mod m {\n+            #[lang_item]\n+            fn f() {}\n+        }\n+    }\n+}\n+\n+mac! {}\n+\n+#[rustc_error]\n+fn main() {} //~ ERROR compilation successful"}]}