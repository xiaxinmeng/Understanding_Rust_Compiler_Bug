{"sha": "db35604792fb64efa0a3deaebc0ea0842e19c67a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiMzU2MDQ3OTJmYjY0ZWZhMGEzZGVhZWJjMGVhMDg0MmUxOWM2N2E=", "commit": {"author": {"name": "Jonas Bushart", "email": "jonas@bushart.org", "date": "2017-03-02T21:38:57Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-03-10T16:02:24Z"}, "message": "Move remove_docs_from_attrs into lowering step", "tree": {"sha": "0bd9403c77684ab24200a71210e00ebed36dff5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0bd9403c77684ab24200a71210e00ebed36dff5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db35604792fb64efa0a3deaebc0ea0842e19c67a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db35604792fb64efa0a3deaebc0ea0842e19c67a", "html_url": "https://github.com/rust-lang/rust/commit/db35604792fb64efa0a3deaebc0ea0842e19c67a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db35604792fb64efa0a3deaebc0ea0842e19c67a/comments", "author": {"login": "jonasbb", "id": 273459, "node_id": "MDQ6VXNlcjI3MzQ1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/273459?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonasbb", "html_url": "https://github.com/jonasbb", "followers_url": "https://api.github.com/users/jonasbb/followers", "following_url": "https://api.github.com/users/jonasbb/following{/other_user}", "gists_url": "https://api.github.com/users/jonasbb/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonasbb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonasbb/subscriptions", "organizations_url": "https://api.github.com/users/jonasbb/orgs", "repos_url": "https://api.github.com/users/jonasbb/repos", "events_url": "https://api.github.com/users/jonasbb/events{/privacy}", "received_events_url": "https://api.github.com/users/jonasbb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "203d22762ddb215af583108d79a521a8441693c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/203d22762ddb215af583108d79a521a8441693c2", "html_url": "https://github.com/rust-lang/rust/commit/203d22762ddb215af583108d79a521a8441693c2"}], "stats": {"total": 77, "additions": 36, "deletions": 41}, "files": [{"sha": "cbb1a3e5023638d0c60217e60d9c182dd93ada8e", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/db35604792fb64efa0a3deaebc0ea0842e19c67a/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db35604792fb64efa0a3deaebc0ea0842e19c67a/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=db35604792fb64efa0a3deaebc0ea0842e19c67a", "patch": "@@ -47,8 +47,7 @@ use syntax::ptr::P;\n use syntax::codemap::Spanned;\n use syntax_pos::*;\n \n-use super::{escape, generated_code, SaveContext, PathCollector, docs_for_attrs,\n-            remove_docs_from_attrs};\n+use super::{escape, generated_code, SaveContext, PathCollector, docs_for_attrs};\n use super::data::*;\n use super::dump::Dump;\n use super::external_data::{Lower, make_def_id};\n@@ -450,7 +449,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                     visibility: vis,\n                     docs: docs_for_attrs(attrs),\n                     sig: method_data.sig,\n-                    attributes: remove_docs_from_attrs(attrs),\n+                    attributes: attrs.to_vec(),\n                 }.lower(self.tcx));\n             }\n \n@@ -596,7 +595,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                 visibility: vis,\n                 docs: docs_for_attrs(attrs),\n                 sig: None,\n-                attributes: remove_docs_from_attrs(attrs),\n+                attributes: attrs.to_vec(),\n             }.lower(self.tcx));\n         }\n \n@@ -641,7 +640,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                 visibility: From::from(&item.vis),\n                 docs: docs_for_attrs(&item.attrs),\n                 sig: self.save_ctxt.sig_base(item),\n-                attributes: remove_docs_from_attrs(&item.attrs),\n+                attributes: item.attrs.clone(),\n             }.lower(self.tcx));\n         }\n \n@@ -707,7 +706,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                             parent: Some(make_def_id(item.id, &self.tcx.hir)),\n                             docs: docs_for_attrs(&variant.node.attrs),\n                             sig: sig,\n-                            attributes: remove_docs_from_attrs(&variant.node.attrs),\n+                            attributes: variant.node.attrs.clone(),\n                         }.lower(self.tcx));\n                     }\n                 }\n@@ -734,7 +733,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                             parent: Some(make_def_id(item.id, &self.tcx.hir)),\n                             docs: docs_for_attrs(&variant.node.attrs),\n                             sig: sig,\n-                            attributes: remove_docs_from_attrs(&variant.node.attrs),\n+                            attributes: variant.node.attrs.clone(),\n                         }.lower(self.tcx));\n                     }\n                 }\n@@ -806,7 +805,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                 visibility: From::from(&item.vis),\n                 docs: docs_for_attrs(&item.attrs),\n                 sig: self.save_ctxt.sig_base(item),\n-                attributes: remove_docs_from_attrs(&item.attrs),\n+                attributes: item.attrs.clone(),\n             }.lower(self.tcx));\n         }\n \n@@ -1315,7 +1314,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump +'ll> Visitor<'l> for DumpVisitor<'l, 'tcx, 'll,\n                         parent: None,\n                         docs: docs_for_attrs(&item.attrs),\n                         sig: Some(self.save_ctxt.sig_base(item)),\n-                        attributes: remove_docs_from_attrs(&item.attrs),\n+                        attributes: item.attrs.clone(),\n                     }.lower(self.tcx));\n                 }\n "}, {"sha": "41658dc5b1b48b043b9faf344768803a1db2b52b", "filename": "src/librustc_save_analysis/external_data.rs", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/db35604792fb64efa0a3deaebc0ea0842e19c67a/src%2Flibrustc_save_analysis%2Fexternal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db35604792fb64efa0a3deaebc0ea0842e19c67a/src%2Flibrustc_save_analysis%2Fexternal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fexternal_data.rs?ref=db35604792fb64efa0a3deaebc0ea0842e19c67a", "patch": "@@ -14,6 +14,7 @@ use rustc::ty::TyCtxt;\n use syntax::ast::{self, NodeId};\n use syntax::codemap::CodeMap;\n use syntax::print::pprust;\n+use syntax::symbol::Symbol;\n use syntax_pos::Span;\n \n use data::{self, Visibility, SigElement};\n@@ -72,28 +73,29 @@ pub struct Attribute {\n     span: SpanData,\n }\n \n-impl Lower for ast::Attribute {\n-    type Target = Attribute;\n-\n-    fn lower(mut self, tcx: TyCtxt) -> Attribute {\n-        // strip #[] and #![] from the original attributes\n-        self.style = ast::AttrStyle::Outer;\n-        let value = pprust::attribute_to_string(&self);\n-        // #[] are all ASCII which makes this slice save\n-        let value = value[2..value.len()-1].to_string();\n-\n-        Attribute {\n-            value: value,\n-            span: SpanData::from_span(self.span, tcx.sess.codemap()),\n-        }\n-    }\n-}\n-\n impl Lower for Vec<ast::Attribute> {\n     type Target = Vec<Attribute>;\n \n     fn lower(self, tcx: TyCtxt) -> Vec<Attribute> {\n-        self.into_iter().map(|x| x.lower(tcx)).collect()\n+        let doc = Symbol::intern(\"doc\");\n+        self.into_iter()\n+        // Only retain real attributes. Doc comments are lowered separately.\n+        .filter(|attr| attr.name() != doc)\n+        .map(|mut attr| {\n+            // Remove the surrounding '#[..]' or '#![..]' of the pretty printed\n+            // attribute. First normalize all inner attribute (#![..]) to outer\n+            // ones (#[..]), then remove the two leading and the one trailing character.\n+            attr.style = ast::AttrStyle::Outer;\n+            let value = pprust::attribute_to_string(&attr);\n+            // This str slicing works correctly, because the leading and trailing characters\n+            // are in the ASCII range and thus exactly one byte each.\n+            let value = value[2..value.len()-1].to_string();\n+\n+            Attribute {\n+                value: value,\n+                span: SpanData::from_span(attr.span, tcx.sess.codemap()),\n+            }\n+        }).collect()\n     }\n }\n "}, {"sha": "2153b30b62cd52d9e4bcb201ca1e6ab758d2567f", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/db35604792fb64efa0a3deaebc0ea0842e19c67a/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db35604792fb64efa0a3deaebc0ea0842e19c67a/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=db35604792fb64efa0a3deaebc0ea0842e19c67a", "patch": "@@ -136,7 +136,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     parent: None,\n                     docs: docs_for_attrs(&item.attrs),\n                     sig: self.sig_base(item),\n-                    attributes: remove_docs_from_attrs(&item.attrs),\n+                    attributes: item.attrs.clone(),\n                 }))\n             }\n             ast::ItemKind::Static(ref typ, mt, ref expr) => {\n@@ -165,7 +165,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     visibility: From::from(&item.vis),\n                     docs: docs_for_attrs(&item.attrs),\n                     sig: Some(self.sig_base(item)),\n-                    attributes: remove_docs_from_attrs(&item.attrs),\n+                    attributes: item.attrs.clone(),\n                 }))\n             }\n             ast::ItemKind::Const(ref typ, ref expr) => {\n@@ -185,7 +185,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     visibility: From::from(&item.vis),\n                     docs: docs_for_attrs(&item.attrs),\n                     sig: Some(self.sig_base(item)),\n-                    attributes: remove_docs_from_attrs(&item.attrs),\n+                    attributes: item.attrs.clone(),\n                 }))\n             }\n             ast::ItemKind::Mod(ref m) => {\n@@ -208,7 +208,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     visibility: From::from(&item.vis),\n                     docs: docs_for_attrs(&item.attrs),\n                     sig: self.sig_base(item),\n-                    attributes: remove_docs_from_attrs(&item.attrs),\n+                    attributes: item.attrs.clone(),\n                 }))\n             }\n             ast::ItemKind::Enum(ref def, _) => {\n@@ -232,7 +232,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     visibility: From::from(&item.vis),\n                     docs: docs_for_attrs(&item.attrs),\n                     sig: self.sig_base(item),\n-                    attributes: remove_docs_from_attrs(&item.attrs),\n+                    attributes: item.attrs.clone(),\n                 }))\n             }\n             ast::ItemKind::Impl(.., ref trait_ref, ref typ, _) => {\n@@ -320,7 +320,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                 visibility: From::from(&field.vis),\n                 docs: docs_for_attrs(&field.attrs),\n                 sig: Some(sig),\n-                attributes: remove_docs_from_attrs(&field.attrs),\n+                attributes: field.attrs.clone(),\n             })\n         } else {\n             None\n@@ -356,7 +356,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                             (result, trait_id, decl_id,\n                              From::from(&item.vis),\n                              docs_for_attrs(&item.attrs),\n-                             remove_docs_from_attrs(&item.attrs))\n+                             item.attrs.to_vec())\n                         }\n                         _ => {\n                             span_bug!(span,\n@@ -382,7 +382,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                              Some(def_id), None,\n                              From::from(&item.vis),\n                              docs_for_attrs(&item.attrs),\n-                             remove_docs_from_attrs(&item.attrs))\n+                             item.attrs.to_vec())\n                         }\n                         r => {\n                             span_bug!(span,\n@@ -845,12 +845,6 @@ fn docs_for_attrs(attrs: &[Attribute]) -> String {\n     result\n }\n \n-/// Remove all attributes which are docs\n-fn remove_docs_from_attrs(attrs: &[Attribute]) -> Vec<Attribute> {\n-    let doc = Symbol::intern(\"doc\");\n-    attrs.iter().cloned().filter(|attr| attr.name() != doc).collect()\n-}\n-\n #[derive(Clone, Copy, Debug, RustcEncodable)]\n pub enum Format {\n     Csv,"}]}