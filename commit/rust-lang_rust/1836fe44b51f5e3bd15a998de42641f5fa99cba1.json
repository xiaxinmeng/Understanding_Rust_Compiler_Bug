{"sha": "1836fe44b51f5e3bd15a998de42641f5fa99cba1", "node_id": "C_kwDOAAsO6NoAKDE4MzZmZTQ0YjUxZjVlM2JkMTVhOTk4ZGU0MjY0MWY1ZmE5OWNiYTE", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2023-03-05T12:35:13Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2023-03-05T12:35:13Z"}, "message": "Improve documentation and argument naming of some TyCtxt methods", "tree": {"sha": "2a2bf6477972e00b33c648c2153ffc943e2875d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a2bf6477972e00b33c648c2153ffc943e2875d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1836fe44b51f5e3bd15a998de42641f5fa99cba1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1836fe44b51f5e3bd15a998de42641f5fa99cba1", "html_url": "https://github.com/rust-lang/rust/commit/1836fe44b51f5e3bd15a998de42641f5fa99cba1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1836fe44b51f5e3bd15a998de42641f5fa99cba1/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "276b75a843af8822ffe4e395266d9445679a57a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/276b75a843af8822ffe4e395266d9445679a57a4", "html_url": "https://github.com/rust-lang/rust/commit/276b75a843af8822ffe4e395266d9445679a57a4"}], "stats": {"total": 33, "additions": 20, "deletions": 13}, "files": [{"sha": "649a58c9170731896aa16dcda2ef1ae9156c9a38", "filename": "compiler/rustc_middle/src/ty/trait_def.rs", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/1836fe44b51f5e3bd15a998de42641f5fa99cba1/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1836fe44b51f5e3bd15a998de42641f5fa99cba1/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs?ref=1836fe44b51f5e3bd15a998de42641f5fa99cba1", "patch": "@@ -100,8 +100,9 @@ impl<'tcx> TraitDef {\n }\n \n impl<'tcx> TyCtxt<'tcx> {\n-    pub fn for_each_impl<F: FnMut(DefId)>(self, def_id: DefId, mut f: F) {\n-        let impls = self.trait_impls_of(def_id);\n+    /// `trait_def_id` MUST BE the `DefId` of a trait.\n+    pub fn for_each_impl<F: FnMut(DefId)>(self, trait_def_id: DefId, mut f: F) {\n+        let impls = self.trait_impls_of(trait_def_id);\n \n         for &impl_def_id in impls.blanket_impls.iter() {\n             f(impl_def_id);\n@@ -114,26 +115,28 @@ impl<'tcx> TyCtxt<'tcx> {\n         }\n     }\n \n-    /// Iterate over every impl that could possibly match the\n-    /// self type `self_ty`.\n+    /// Iterate over every impl that could possibly match the self type `self_ty`.\n+    ///\n+    /// `trait_def_id` MUST BE the `DefId` of a trait.\n     pub fn for_each_relevant_impl<F: FnMut(DefId)>(\n         self,\n-        def_id: DefId,\n+        trait_def_id: DefId,\n         self_ty: Ty<'tcx>,\n         mut f: F,\n     ) {\n-        let _: Option<()> = self.find_map_relevant_impl(def_id, self_ty, |did| {\n+        let _: Option<()> = self.find_map_relevant_impl(trait_def_id, self_ty, |did| {\n             f(did);\n             None\n         });\n     }\n \n+    /// `trait_def_id` MUST BE the `DefId` of a trait.\n     pub fn non_blanket_impls_for_ty(\n         self,\n-        def_id: DefId,\n+        trait_def_id: DefId,\n         self_ty: Ty<'tcx>,\n     ) -> impl Iterator<Item = DefId> + 'tcx {\n-        let impls = self.trait_impls_of(def_id);\n+        let impls = self.trait_impls_of(trait_def_id);\n         if let Some(simp) = fast_reject::simplify_type(self, self_ty, TreatParams::AsInfer) {\n             if let Some(impls) = impls.non_blanket_impls.get(&simp) {\n                 return impls.iter().copied();\n@@ -145,9 +148,11 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     /// Applies function to every impl that could possibly match the self type `self_ty` and returns\n     /// the first non-none value.\n+    ///\n+    /// `trait_def_id` MUST BE the `DefId` of a trait.\n     pub fn find_map_relevant_impl<T, F: FnMut(DefId) -> Option<T>>(\n         self,\n-        def_id: DefId,\n+        trait_def_id: DefId,\n         self_ty: Ty<'tcx>,\n         mut f: F,\n     ) -> Option<T> {\n@@ -156,7 +161,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         //\n         // If we want to be faster, we could have separate queries for\n         // blanket and non-blanket impls, and compare them separately.\n-        let impls = self.trait_impls_of(def_id);\n+        let impls = self.trait_impls_of(trait_def_id);\n \n         for &impl_def_id in impls.blanket_impls.iter() {\n             if let result @ Some(_) = f(impl_def_id) {\n@@ -190,9 +195,11 @@ impl<'tcx> TyCtxt<'tcx> {\n         None\n     }\n \n-    /// Returns an iterator containing all impls\n-    pub fn all_impls(self, def_id: DefId) -> impl Iterator<Item = DefId> + 'tcx {\n-        let TraitImpls { blanket_impls, non_blanket_impls } = self.trait_impls_of(def_id);\n+    /// Returns an iterator containing all impls for `trait_def_id`.\n+    ///\n+    /// `trait_def_id` MUST BE the `DefId` of a trait.\n+    pub fn all_impls(self, trait_def_id: DefId) -> impl Iterator<Item = DefId> + 'tcx {\n+        let TraitImpls { blanket_impls, non_blanket_impls } = self.trait_impls_of(trait_def_id);\n \n         blanket_impls.iter().chain(non_blanket_impls.iter().flat_map(|(_, v)| v)).cloned()\n     }"}]}