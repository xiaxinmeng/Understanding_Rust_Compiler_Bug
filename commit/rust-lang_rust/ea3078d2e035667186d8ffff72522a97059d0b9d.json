{"sha": "ea3078d2e035667186d8ffff72522a97059d0b9d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhMzA3OGQyZTAzNTY2NzE4NmQ4ZmZmZjcyNTIyYTk3MDU5ZDBiOWQ=", "commit": {"author": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2018-12-13T20:31:42Z"}, "committer": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2018-12-14T15:17:11Z"}, "message": "include comments in doctest partition logic", "tree": {"sha": "55fde3e2af100a026a87eb735cd73ef3dddfbb00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55fde3e2af100a026a87eb735cd73ef3dddfbb00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea3078d2e035667186d8ffff72522a97059d0b9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea3078d2e035667186d8ffff72522a97059d0b9d", "html_url": "https://github.com/rust-lang/rust/commit/ea3078d2e035667186d8ffff72522a97059d0b9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea3078d2e035667186d8ffff72522a97059d0b9d/comments", "author": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22de23e303c0b07e3cb4e23fe2abf5ff2c186a3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/22de23e303c0b07e3cb4e23fe2abf5ff2c186a3a", "html_url": "https://github.com/rust-lang/rust/commit/22de23e303c0b07e3cb4e23fe2abf5ff2c186a3a"}], "stats": {"total": 71, "additions": 55, "deletions": 16}, "files": [{"sha": "396aa1400e35fde1771d706e4513739bd11fbfd2", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 55, "deletions": 16, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/ea3078d2e035667186d8ffff72522a97059d0b9d/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea3078d2e035667186d8ffff72522a97059d0b9d/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=ea3078d2e035667186d8ffff72522a97059d0b9d", "patch": "@@ -496,32 +496,71 @@ pub fn make_test(s: &str,\n \n // FIXME(aburka): use a real parser to deal with multiline attributes\n fn partition_source(s: &str) -> (String, String, String) {\n-    let mut after_header = false;\n+    #[derive(Copy, Clone, PartialEq)]\n+    enum PartitionState {\n+        Attrs,\n+        Crates,\n+        Other,\n+    }\n+    let mut state = PartitionState::Attrs;\n     let mut before = String::new();\n     let mut crates = String::new();\n     let mut after = String::new();\n \n     for line in s.lines() {\n         let trimline = line.trim();\n-        let header = trimline.chars().all(|c| c.is_whitespace()) ||\n-            trimline.starts_with(\"#![\") ||\n-            trimline.starts_with(\"#[macro_use] extern crate\") ||\n-            trimline.starts_with(\"extern crate\");\n-        if !header || after_header {\n-            after_header = true;\n-            after.push_str(line);\n-            after.push_str(\"\\n\");\n-        } else {\n-            if trimline.starts_with(\"#[macro_use] extern crate\")\n-                || trimline.starts_with(\"extern crate\") {\n+\n+        // FIXME(misdreavus): if a doc comment is placed on an extern crate statement, it will be\n+        // shunted into \"everything else\"\n+        match state {\n+            PartitionState::Attrs => {\n+                state = if trimline.starts_with(\"#![\") ||\n+                    trimline.chars().all(|c| c.is_whitespace()) ||\n+                    (trimline.starts_with(\"//\") && !trimline.starts_with(\"///\"))\n+                {\n+                    PartitionState::Attrs\n+                } else if trimline.starts_with(\"extern crate\") ||\n+                    trimline.starts_with(\"#[macro_use] extern crate\")\n+                {\n+                    PartitionState::Crates\n+                } else {\n+                    PartitionState::Other\n+                };\n+            }\n+            PartitionState::Crates => {\n+                state = if trimline.starts_with(\"extern crate\") ||\n+                    trimline.starts_with(\"#[macro_use] extern crate\") ||\n+                    trimline.chars().all(|c| c.is_whitespace()) ||\n+                    (trimline.starts_with(\"//\") && !trimline.starts_with(\"///\"))\n+                {\n+                    PartitionState::Crates\n+                } else {\n+                    PartitionState::Other\n+                };\n+            }\n+            PartitionState::Other => {}\n+        }\n+\n+        match state {\n+            PartitionState::Attrs => {\n+                before.push_str(line);\n+                before.push_str(\"\\n\");\n+            }\n+            PartitionState::Crates => {\n                 crates.push_str(line);\n                 crates.push_str(\"\\n\");\n             }\n-            before.push_str(line);\n-            before.push_str(\"\\n\");\n+            PartitionState::Other => {\n+                after.push_str(line);\n+                after.push_str(\"\\n\");\n+            }\n         }\n     }\n \n+    debug!(\"before:\\n{}\", before);\n+    debug!(\"crates:\\n{}\", crates);\n+    debug!(\"after:\\n{}\", after);\n+\n     (before, after, crates)\n }\n \n@@ -1038,8 +1077,8 @@ fn main() {\n assert_eq!(2+2, 4);\";\n         let expected =\n \"#![allow(unused)]\n-fn main() {\n //Ceci n'est pas une `fn main`\n+fn main() {\n assert_eq!(2+2, 4);\n }\".to_string();\n         let output = make_test(input, None, false, &opts);\n@@ -1086,8 +1125,8 @@ assert_eq!(2+2, 4);\";\n \n         let expected =\n \"#![allow(unused)]\n-fn main() {\n // fn main\n+fn main() {\n assert_eq!(2+2, 4);\n }\".to_string();\n "}]}