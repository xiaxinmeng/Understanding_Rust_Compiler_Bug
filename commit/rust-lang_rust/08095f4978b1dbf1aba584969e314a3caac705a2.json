{"sha": "08095f4978b1dbf1aba584969e314a3caac705a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4MDk1ZjQ5NzhiMWRiZjFhYmE1ODQ5NjllMzE0YTNjYWFjNzA1YTI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-10T05:47:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-10T05:47:53Z"}, "message": "Rollup merge of #69817 - thekuom:test/borrow-checking-pattern-features, r=Centril\n\ntest(patterns): add patterns feature tests to borrowck test suite\n\nAddresses request here: https://github.com/rust-lang/rust/pull/69690#issuecomment-595763571\n\nFixes https://github.com/rust-lang/rust/issues/67311.\n\nr? @Centril", "tree": {"sha": "b602696dceff087b0f6d5bdb3cf29775b7b00385", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b602696dceff087b0f6d5bdb3cf29775b7b00385"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08095f4978b1dbf1aba584969e314a3caac705a2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeZyoJCRBK7hj4Ov3rIwAAdHIIACjICUqRWIrH1EOHCCR9uQDY\nCBXP2VJrbVVj6rbeYW8Z2rnT+eB5ecvw8U6eBERBZ+Ne4gmHnGzfR2uKovXNVhjv\nqdbc6uD6a0Xj4vyI0Vz5Qwaee5DRgrJY1R8JfXiTPU7FgDFAQurXhG3QpqUH86zg\n2k/QvcME7LyFSEedPqQCSvLwGE0l+HCGSSjvSmZFEM4giPKZg2OF0YDcdKgYAjCI\njbBLhKeEgETtRgOC4aIzoATwyzwuFaYLAHGrYvbbHoRukwljjcBBTcGNIpRbE2wM\n3VcEP1Q9G2HJHX5AGcxnagT1vJXvajXF+zLVFUtnlmb2NJReG1zqaiinMimXgec=\n=24GK\n-----END PGP SIGNATURE-----\n", "payload": "tree b602696dceff087b0f6d5bdb3cf29775b7b00385\nparent 6ad5e69b5af63f9044a4fab81450d49303ae8839\nparent b974d6fc306d5847ad4b8bb48a99e6ca234cb6d1\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1583819273 +0100\ncommitter GitHub <noreply@github.com> 1583819273 +0100\n\nRollup merge of #69817 - thekuom:test/borrow-checking-pattern-features, r=Centril\n\ntest(patterns): add patterns feature tests to borrowck test suite\n\nAddresses request here: https://github.com/rust-lang/rust/pull/69690#issuecomment-595763571\n\nFixes https://github.com/rust-lang/rust/issues/67311.\n\nr? @Centril\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08095f4978b1dbf1aba584969e314a3caac705a2", "html_url": "https://github.com/rust-lang/rust/commit/08095f4978b1dbf1aba584969e314a3caac705a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08095f4978b1dbf1aba584969e314a3caac705a2/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ad5e69b5af63f9044a4fab81450d49303ae8839", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ad5e69b5af63f9044a4fab81450d49303ae8839", "html_url": "https://github.com/rust-lang/rust/commit/6ad5e69b5af63f9044a4fab81450d49303ae8839"}, {"sha": "b974d6fc306d5847ad4b8bb48a99e6ca234cb6d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/b974d6fc306d5847ad4b8bb48a99e6ca234cb6d1", "html_url": "https://github.com/rust-lang/rust/commit/b974d6fc306d5847ad4b8bb48a99e6ca234cb6d1"}], "stats": {"total": 432, "additions": 432, "deletions": 0}, "files": [{"sha": "b67d494866b85d7f181e30a8b6dea1e124b2c2bb", "filename": "src/test/ui/borrowck/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs", "status": "added", "additions": 224, "deletions": 0, "changes": 224, "blob_url": "https://github.com/rust-lang/rust/blob/08095f4978b1dbf1aba584969e314a3caac705a2/src%2Ftest%2Fui%2Fborrowck%2Fbindings-after-at-or-patterns-slice-patterns-box-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08095f4978b1dbf1aba584969e314a3caac705a2/src%2Ftest%2Fui%2Fborrowck%2Fbindings-after-at-or-patterns-slice-patterns-box-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fbindings-after-at-or-patterns-slice-patterns-box-patterns.rs?ref=08095f4978b1dbf1aba584969e314a3caac705a2", "patch": "@@ -0,0 +1,224 @@\n+// Tests using a combination of pattern features has the expected borrow checking behavior\n+#![feature(bindings_after_at)]\n+#![feature(or_patterns)]\n+#![feature(box_patterns)]\n+\n+#![feature(move_ref_pattern)]\n+\n+enum Test {\n+    Foo,\n+    Bar,\n+    _Baz,\n+}\n+\n+// bindings_after_at + slice_patterns\n+\n+fn bindings_after_at_slice_patterns_move_binding(x: [String; 4]) {\n+    match x {\n+        a @ [.., _] => (),\n+        _ => (),\n+    };\n+\n+    &x;\n+    //~^ ERROR borrow of moved value\n+}\n+\n+fn bindings_after_at_slice_patterns_borrows_binding_mut(mut x: [String; 4]) {\n+    let r = match x {\n+        ref mut foo @ [.., _] => Some(foo),\n+        _ => None,\n+    };\n+\n+    &x;\n+    //~^ ERROR cannot borrow\n+\n+    drop(r);\n+}\n+\n+fn bindings_after_at_slice_patterns_borrows_slice_mut1(mut x: [String; 4]) {\n+    let r = match x {\n+        ref foo @ [.., ref mut bar] => (),\n+        //~^ ERROR cannot borrow\n+        _ => (),\n+    };\n+\n+    drop(r);\n+}\n+\n+fn bindings_after_at_slice_patterns_borrows_slice_mut2(mut x: [String; 4]) {\n+    let r = match x {\n+        [ref foo @ .., ref bar] => Some(foo),\n+        _ => None,\n+    };\n+\n+    &mut x;\n+    //~^ ERROR cannot borrow\n+\n+    drop(r);\n+}\n+\n+fn bindings_after_at_slice_patterns_borrows_both(mut x: [String; 4]) {\n+    let r = match x {\n+        ref foo @ [.., ref bar] => Some(foo),\n+        _ => None,\n+    };\n+\n+    &mut x;\n+    //~^ ERROR cannot borrow\n+\n+    drop(r);\n+}\n+\n+// bindings_after_at + or_patterns\n+\n+fn bindings_after_at_or_patterns_move(x: Option<Test>) {\n+    match x {\n+        foo @ Some(Test::Foo | Test::Bar) => (),\n+        _ => (),\n+    }\n+\n+    &x;\n+    //~^ ERROR borrow of moved value\n+}\n+\n+fn bindings_after_at_or_patterns_borrows(mut x: Option<Test>) {\n+    let r = match x {\n+        ref foo @ Some(Test::Foo | Test::Bar) => Some(foo),\n+        _ => None,\n+    };\n+\n+    &mut x;\n+    //~^ ERROR cannot borrow\n+\n+    drop(r);\n+}\n+\n+fn bindings_after_at_or_patterns_borrows_mut(mut x: Option<Test>) {\n+    let r = match x {\n+        ref mut foo @ Some(Test::Foo | Test::Bar) => Some(foo),\n+        _ => None,\n+    };\n+\n+    &x;\n+    //~^ ERROR cannot borrow\n+\n+    drop(r);\n+}\n+\n+// bindings_after_at + box_patterns\n+\n+fn bindings_after_at_box_patterns_borrows_both(mut x: Option<Box<String>>) {\n+    let r = match x {\n+        ref foo @ Some(box ref s) => Some(foo),\n+        _ => None,\n+    };\n+\n+    &mut x;\n+    //~^ ERROR cannot borrow\n+\n+    drop(r);\n+}\n+\n+fn bindings_after_at_box_patterns_borrows_mut(mut x: Option<Box<String>>) {\n+    match x {\n+        ref foo @ Some(box ref mut s) => (),\n+        //~^ ERROR cannot borrow\n+        _ => (),\n+    };\n+}\n+\n+// bindings_after_at + slice_patterns + or_patterns\n+\n+fn bindings_after_at_slice_patterns_or_patterns_moves(x: [Option<Test>; 4]) {\n+    match x {\n+        a @ [.., Some(Test::Foo | Test::Bar)] => (),\n+        _ => (),\n+    };\n+\n+    &x;\n+    //~^ ERROR borrow of moved value\n+}\n+\n+fn bindings_after_at_slice_patterns_or_patterns_borrows_binding(mut x: [Option<Test>; 4]) {\n+    let r = match x {\n+        ref a @ [ref b @ .., Some(Test::Foo | Test::Bar)] => Some(a),\n+        _ => None,\n+    };\n+\n+    &mut x;\n+    //~^ ERROR cannot borrow\n+\n+    drop(r);\n+}\n+\n+fn bindings_after_at_slice_patterns_or_patterns_borrows_slice(mut x: [Option<Test>; 4]) {\n+    let r = match x {\n+        ref a @ [ref b @ .., Some(Test::Foo | Test::Bar)] => Some(b),\n+        _ => None,\n+    };\n+\n+    &mut x;\n+    //~^ ERROR cannot borrow\n+\n+    drop(r);\n+}\n+\n+// bindings_after_at + slice_patterns + box_patterns\n+\n+fn bindings_after_at_slice_patterns_box_patterns_borrows(mut x: [Option<Box<String>>; 4]) {\n+    let r = match x {\n+        [_, ref a @ Some(box ref b), ..] => Some(a),\n+        _ => None,\n+    };\n+\n+    &mut x;\n+    //~^ ERROR cannot borrow\n+\n+    drop(r);\n+}\n+\n+// bindings_after_at + slice_patterns + or_patterns + box_patterns\n+\n+fn bindings_after_at_slice_patterns_or_patterns_box_patterns_borrows(\n+    mut x: [Option<Box<Test>>; 4]\n+) {\n+    let r = match x {\n+        [_, ref a @ Some(box Test::Foo | box Test::Bar), ..] => Some(a),\n+        _ => None,\n+    };\n+\n+    &mut x;\n+    //~^ ERROR cannot borrow\n+\n+    drop(r);\n+}\n+\n+fn bindings_after_at_slice_patterns_or_patterns_box_patterns_borrows_mut(\n+    mut x: [Option<Box<Test>>; 4]\n+) {\n+    let r = match x {\n+        [_, ref mut a @ Some(box Test::Foo | box Test::Bar), ..] => Some(a),\n+        _ => None,\n+    };\n+\n+    &x;\n+    //~^ ERROR cannot borrow\n+\n+    drop(r);\n+}\n+\n+fn bindings_after_at_slice_patterns_or_patterns_box_patterns_borrows_binding(\n+    mut x: [Option<Box<Test>>; 4]\n+) {\n+    let r = match x {\n+        ref a @ [_, ref b @ Some(box Test::Foo | box Test::Bar), ..] => Some(a),\n+        _ => None,\n+    };\n+\n+    &mut x;\n+    //~^ ERROR cannot borrow\n+\n+    drop(r);\n+}\n+\n+fn main() {}"}, {"sha": "35ed2763c2b08635a6f56c802efcad2ad5130e9d", "filename": "src/test/ui/borrowck/bindings-after-at-or-patterns-slice-patterns-box-patterns.stderr", "status": "added", "additions": 208, "deletions": 0, "changes": 208, "blob_url": "https://github.com/rust-lang/rust/blob/08095f4978b1dbf1aba584969e314a3caac705a2/src%2Ftest%2Fui%2Fborrowck%2Fbindings-after-at-or-patterns-slice-patterns-box-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/08095f4978b1dbf1aba584969e314a3caac705a2/src%2Ftest%2Fui%2Fborrowck%2Fbindings-after-at-or-patterns-slice-patterns-box-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fbindings-after-at-or-patterns-slice-patterns-box-patterns.stderr?ref=08095f4978b1dbf1aba584969e314a3caac705a2", "patch": "@@ -0,0 +1,208 @@\n+error: cannot borrow value as mutable because it is also borrowed as immutable\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:40:9\n+   |\n+LL |         ref foo @ [.., ref mut bar] => (),\n+   |         -------^^^^^^^^-----------^\n+   |         |              |\n+   |         |              mutable borrow, by `bar`, occurs here\n+   |         immutable borrow, by `foo`, occurs here\n+\n+error: cannot borrow value as mutable because it is also borrowed as immutable\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:124:9\n+   |\n+LL |         ref foo @ Some(box ref mut s) => (),\n+   |         -------^^^^^^^^^^^^---------^\n+   |         |                  |\n+   |         |                  mutable borrow, by `s`, occurs here\n+   |         immutable borrow, by `foo`, occurs here\n+\n+error[E0382]: borrow of moved value: `x`\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:22:5\n+   |\n+LL | fn bindings_after_at_slice_patterns_move_binding(x: [String; 4]) {\n+   |                                                  - move occurs because `x` has type `[std::string::String; 4]`, which does not implement the `Copy` trait\n+LL |     match x {\n+LL |         a @ [.., _] => (),\n+   |         ----------- value moved here\n+...\n+LL |     &x;\n+   |     ^^ value borrowed here after move\n+\n+error[E0502]: cannot borrow `x` as immutable because it is also borrowed as mutable\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:32:5\n+   |\n+LL |         ref mut foo @ [.., _] => Some(foo),\n+   |         --------------------- mutable borrow occurs here\n+...\n+LL |     &x;\n+   |     ^^ immutable borrow occurs here\n+...\n+LL |     drop(r);\n+   |          - mutable borrow later used here\n+\n+error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immutable\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:54:5\n+   |\n+LL |         [ref foo @ .., ref bar] => Some(foo),\n+   |          ------------ immutable borrow occurs here\n+...\n+LL |     &mut x;\n+   |     ^^^^^^ mutable borrow occurs here\n+...\n+LL |     drop(r);\n+   |          - immutable borrow later used here\n+\n+error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immutable\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:66:5\n+   |\n+LL |         ref foo @ [.., ref bar] => Some(foo),\n+   |         ----------------------- immutable borrow occurs here\n+...\n+LL |     &mut x;\n+   |     ^^^^^^ mutable borrow occurs here\n+...\n+LL |     drop(r);\n+   |          - immutable borrow later used here\n+\n+error[E0382]: borrow of moved value: `x`\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:80:5\n+   |\n+LL | fn bindings_after_at_or_patterns_move(x: Option<Test>) {\n+   |                                       - move occurs because `x` has type `std::option::Option<Test>`, which does not implement the `Copy` trait\n+LL |     match x {\n+LL |         foo @ Some(Test::Foo | Test::Bar) => (),\n+   |         ---------------------------------\n+   |         |\n+   |         value moved here\n+   |         value moved here\n+...\n+LL |     &x;\n+   |     ^^ value borrowed here after move\n+\n+error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immutable\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:90:5\n+   |\n+LL |         ref foo @ Some(Test::Foo | Test::Bar) => Some(foo),\n+   |         ------------------------------------- immutable borrow occurs here\n+...\n+LL |     &mut x;\n+   |     ^^^^^^ mutable borrow occurs here\n+...\n+LL |     drop(r);\n+   |          - immutable borrow later used here\n+\n+error[E0502]: cannot borrow `x` as immutable because it is also borrowed as mutable\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:102:5\n+   |\n+LL |         ref mut foo @ Some(Test::Foo | Test::Bar) => Some(foo),\n+   |         ----------------------------------------- mutable borrow occurs here\n+...\n+LL |     &x;\n+   |     ^^ immutable borrow occurs here\n+...\n+LL |     drop(r);\n+   |          - mutable borrow later used here\n+\n+error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immutable\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:116:5\n+   |\n+LL |         ref foo @ Some(box ref s) => Some(foo),\n+   |         ------------------------- immutable borrow occurs here\n+...\n+LL |     &mut x;\n+   |     ^^^^^^ mutable borrow occurs here\n+...\n+LL |     drop(r);\n+   |          - immutable borrow later used here\n+\n+error[E0382]: borrow of moved value: `x`\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:138:5\n+   |\n+LL | fn bindings_after_at_slice_patterns_or_patterns_moves(x: [Option<Test>; 4]) {\n+   |                                                       - move occurs because `x` has type `[std::option::Option<Test>; 4]`, which does not implement the `Copy` trait\n+LL |     match x {\n+LL |         a @ [.., Some(Test::Foo | Test::Bar)] => (),\n+   |         -------------------------------------\n+   |         |\n+   |         value moved here\n+   |         value moved here\n+...\n+LL |     &x;\n+   |     ^^ value borrowed here after move\n+\n+error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immutable\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:148:5\n+   |\n+LL |         ref a @ [ref b @ .., Some(Test::Foo | Test::Bar)] => Some(a),\n+   |         ------------------------------------------------- immutable borrow occurs here\n+...\n+LL |     &mut x;\n+   |     ^^^^^^ mutable borrow occurs here\n+...\n+LL |     drop(r);\n+   |          - immutable borrow later used here\n+\n+error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immutable\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:160:5\n+   |\n+LL |         ref a @ [ref b @ .., Some(Test::Foo | Test::Bar)] => Some(b),\n+   |                  ---------- immutable borrow occurs here\n+...\n+LL |     &mut x;\n+   |     ^^^^^^ mutable borrow occurs here\n+...\n+LL |     drop(r);\n+   |          - immutable borrow later used here\n+\n+error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immutable\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:174:5\n+   |\n+LL |         [_, ref a @ Some(box ref b), ..] => Some(a),\n+   |             ----------------------- immutable borrow occurs here\n+...\n+LL |     &mut x;\n+   |     ^^^^^^ mutable borrow occurs here\n+...\n+LL |     drop(r);\n+   |          - immutable borrow later used here\n+\n+error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immutable\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:190:5\n+   |\n+LL |         [_, ref a @ Some(box Test::Foo | box Test::Bar), ..] => Some(a),\n+   |             ------------------------------------------- immutable borrow occurs here\n+...\n+LL |     &mut x;\n+   |     ^^^^^^ mutable borrow occurs here\n+...\n+LL |     drop(r);\n+   |          - immutable borrow later used here\n+\n+error[E0502]: cannot borrow `x` as immutable because it is also borrowed as mutable\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:204:5\n+   |\n+LL |         [_, ref mut a @ Some(box Test::Foo | box Test::Bar), ..] => Some(a),\n+   |             ----------------------------------------------- mutable borrow occurs here\n+...\n+LL |     &x;\n+   |     ^^ immutable borrow occurs here\n+...\n+LL |     drop(r);\n+   |          - mutable borrow later used here\n+\n+error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immutable\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:218:5\n+   |\n+LL |         ref a @ [_, ref b @ Some(box Test::Foo | box Test::Bar), ..] => Some(a),\n+   |         ------------------------------------------------------------ immutable borrow occurs here\n+...\n+LL |     &mut x;\n+   |     ^^^^^^ mutable borrow occurs here\n+...\n+LL |     drop(r);\n+   |          - immutable borrow later used here\n+\n+error: aborting due to 17 previous errors\n+\n+Some errors have detailed explanations: E0382, E0502.\n+For more information about an error, try `rustc --explain E0382`."}]}