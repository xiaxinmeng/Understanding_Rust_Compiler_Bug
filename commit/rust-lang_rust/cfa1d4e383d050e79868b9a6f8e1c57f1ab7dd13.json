{"sha": "cfa1d4e383d050e79868b9a6f8e1c57f1ab7dd13", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmYTFkNGUzODNkMDUwZTc5ODY4YjlhNmY4ZTFjNTdmMWFiN2RkMTM=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2020-02-07T10:14:47Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2020-03-14T21:52:28Z"}, "message": "Add HIR queries", "tree": {"sha": "b62f9b5320adbb8ab50b312f8cec25a9017800c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b62f9b5320adbb8ab50b312f8cec25a9017800c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cfa1d4e383d050e79868b9a6f8e1c57f1ab7dd13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cfa1d4e383d050e79868b9a6f8e1c57f1ab7dd13", "html_url": "https://github.com/rust-lang/rust/commit/cfa1d4e383d050e79868b9a6f8e1c57f1ab7dd13", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cfa1d4e383d050e79868b9a6f8e1c57f1ab7dd13/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "131772c5e0ba40cd656dedb5e1990d36e3ea31cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/131772c5e0ba40cd656dedb5e1990d36e3ea31cf", "html_url": "https://github.com/rust-lang/rust/commit/131772c5e0ba40cd656dedb5e1990d36e3ea31cf"}], "stats": {"total": 165, "additions": 101, "deletions": 64}, "files": [{"sha": "fd0a7e73b3470eae3a6f79957d06997a705d3fcc", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/cfa1d4e383d050e79868b9a6f8e1c57f1ab7dd13/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfa1d4e383d050e79868b9a6f8e1c57f1ab7dd13/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=cfa1d4e383d050e79868b9a6f8e1c57f1ab7dd13", "patch": "@@ -7,12 +7,36 @@ pub mod map;\n \n use crate::ty::query::Providers;\n use crate::ty::TyCtxt;\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_hir::print;\n+use rustc_hir::Body;\n use rustc_hir::Crate;\n use rustc_hir::HirId;\n+use rustc_hir::ItemLocalId;\n+use rustc_hir::Node;\n+use rustc_index::vec::IndexVec;\n use std::ops::Deref;\n \n+#[derive(HashStable)]\n+pub struct HirOwner<'tcx> {\n+    parent: HirId,\n+    node: Node<'tcx>,\n+}\n+\n+#[derive(HashStable)]\n+pub struct HirItem<'tcx> {\n+    parent: ItemLocalId,\n+    node: Node<'tcx>,\n+}\n+\n+#[derive(HashStable)]\n+pub struct HirOwnerItems<'tcx> {\n+    owner: &'tcx HirOwner<'tcx>,\n+    items: IndexVec<ItemLocalId, Option<HirItem<'tcx>>>,\n+    bodies: FxHashMap<ItemLocalId, &'tcx Body<'tcx>>,\n+}\n+\n /// A wrapper type which allows you to access HIR.\n #[derive(Clone)]\n pub struct Hir<'tcx> {"}, {"sha": "5a49d9a1f1ae1607f456b73c446e6ffa5598b3cb", "filename": "src/librustc/ich/hcx.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cfa1d4e383d050e79868b9a6f8e1c57f1ab7dd13/src%2Flibrustc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfa1d4e383d050e79868b9a6f8e1c57f1ab7dd13/src%2Flibrustc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fhcx.rs?ref=cfa1d4e383d050e79868b9a6f8e1c57f1ab7dd13", "patch": "@@ -164,15 +164,6 @@ impl<'a> StableHashingContext<'a> {\n         }\n         IGNORED_ATTRIBUTES.with(|attrs| attrs.contains(&name))\n     }\n-\n-    pub fn hash_hir_item_like<F: FnOnce(&mut Self)>(&mut self, f: F) {\n-        let prev_hash_node_ids = self.node_id_hashing_mode;\n-        self.node_id_hashing_mode = NodeIdHashingMode::Ignore;\n-\n-        f(self);\n-\n-        self.node_id_hashing_mode = prev_hash_node_ids;\n-    }\n }\n \n /// Something that can provide a stable hashing context."}, {"sha": "1015ffdbf2833a916890a7b142771f388d40a425", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 9, "deletions": 53, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/cfa1d4e383d050e79868b9a6f8e1c57f1ab7dd13/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfa1d4e383d050e79868b9a6f8e1c57f1ab7dd13/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=cfa1d4e383d050e79868b9a6f8e1c57f1ab7dd13", "patch": "@@ -105,6 +105,15 @@ impl<'ctx> rustc_hir::HashStableContext for StableHashingContext<'ctx> {\n             }\n         }\n     }\n+\n+    fn hash_hir_item_like<F: FnOnce(&mut Self)>(&mut self, f: F) {\n+        let prev_hash_node_ids = self.node_id_hashing_mode;\n+        self.node_id_hashing_mode = NodeIdHashingMode::Ignore;\n+\n+        f(self);\n+\n+        self.node_id_hashing_mode = prev_hash_node_ids;\n+    }\n }\n \n impl<'a> ToStableHashKey<StableHashingContext<'a>> for DefId {\n@@ -158,59 +167,6 @@ impl<'a> ToStableHashKey<StableHashingContext<'a>> for hir::ItemLocalId {\n     }\n }\n \n-impl<'a> HashStable<StableHashingContext<'a>> for hir::TraitItem<'_> {\n-    fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n-        let hir::TraitItem { hir_id: _, ident, ref attrs, ref generics, ref kind, span } = *self;\n-\n-        hcx.hash_hir_item_like(|hcx| {\n-            ident.name.hash_stable(hcx, hasher);\n-            attrs.hash_stable(hcx, hasher);\n-            generics.hash_stable(hcx, hasher);\n-            kind.hash_stable(hcx, hasher);\n-            span.hash_stable(hcx, hasher);\n-        });\n-    }\n-}\n-\n-impl<'a> HashStable<StableHashingContext<'a>> for hir::ImplItem<'_> {\n-    fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n-        let hir::ImplItem {\n-            hir_id: _,\n-            ident,\n-            ref vis,\n-            defaultness,\n-            ref attrs,\n-            ref generics,\n-            ref kind,\n-            span,\n-        } = *self;\n-\n-        hcx.hash_hir_item_like(|hcx| {\n-            ident.name.hash_stable(hcx, hasher);\n-            vis.hash_stable(hcx, hasher);\n-            defaultness.hash_stable(hcx, hasher);\n-            attrs.hash_stable(hcx, hasher);\n-            generics.hash_stable(hcx, hasher);\n-            kind.hash_stable(hcx, hasher);\n-            span.hash_stable(hcx, hasher);\n-        });\n-    }\n-}\n-\n-impl<'a> HashStable<StableHashingContext<'a>> for hir::Item<'_> {\n-    fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n-        let hir::Item { ident, ref attrs, hir_id: _, ref kind, ref vis, span } = *self;\n-\n-        hcx.hash_hir_item_like(|hcx| {\n-            ident.name.hash_stable(hcx, hasher);\n-            attrs.hash_stable(hcx, hasher);\n-            kind.hash_stable(hcx, hasher);\n-            vis.hash_stable(hcx, hasher);\n-            span.hash_stable(hcx, hasher);\n-        });\n-    }\n-}\n-\n impl<'a> HashStable<StableHashingContext<'a>> for hir::Body<'_> {\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n         let hir::Body { params, value, generator_kind } = self;"}, {"sha": "cf7cb30a056dca53f8981bf7976e2abdd70a8b12", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cfa1d4e383d050e79868b9a6f8e1c57f1ab7dd13/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfa1d4e383d050e79868b9a6f8e1c57f1ab7dd13/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=cfa1d4e383d050e79868b9a6f8e1c57f1ab7dd13", "patch": "@@ -55,6 +55,14 @@ rustc_queries! {\n             desc { \"get the crate HIR\" }\n         }\n \n+        query hir_owner(key: DefId) -> &'tcx HirOwner<'tcx> {\n+            eval_always\n+        }\n+\n+        query hir_owner_items(key: DefId) -> &'tcx HirOwnerItems<'tcx> {\n+            eval_always\n+        }\n+\n         /// Records the type of every item.\n         query type_of(key: DefId) -> Ty<'tcx> {\n             cache_on_disk_if { key.is_local() }"}, {"sha": "667c00a3df16b2bbcc2ebe375c1aefad653b19ed", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cfa1d4e383d050e79868b9a6f8e1c57f1ab7dd13/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfa1d4e383d050e79868b9a6f8e1c57f1ab7dd13/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=cfa1d4e383d050e79868b9a6f8e1c57f1ab7dd13", "patch": "@@ -1,5 +1,6 @@\n use crate::dep_graph::{self, DepConstructor, DepNode, DepNodeParams};\n use crate::hir::exports::Export;\n+use crate::hir::{HirOwner, HirOwnerItems};\n use crate::infer::canonical::{self, Canonical};\n use crate::lint::LintLevelMap;\n use crate::middle::codegen_fn_attrs::CodegenFnAttrs;"}, {"sha": "ed06aeb60bb18d42421ca34dcf025c7888806460", "filename": "src/librustc_hir/hir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfa1d4e383d050e79868b9a6f8e1c57f1ab7dd13/src%2Flibrustc_hir%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfa1d4e383d050e79868b9a6f8e1c57f1ab7dd13/src%2Flibrustc_hir%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir.rs?ref=cfa1d4e383d050e79868b9a6f8e1c57f1ab7dd13", "patch": "@@ -2653,7 +2653,7 @@ pub type TraitMap<ID = HirId> = NodeMap<Vec<TraitCandidate<ID>>>;\n // imported.\n pub type GlobMap = NodeMap<FxHashSet<Name>>;\n \n-#[derive(Copy, Clone, Debug)]\n+#[derive(Copy, Clone, Debug, HashStable_Generic)]\n pub enum Node<'hir> {\n     Param(&'hir Param<'hir>),\n     Item(&'hir Item<'hir>),"}, {"sha": "9756edc3f4dcb03b5c3c3c287966e47b38fde0f8", "filename": "src/librustc_hir/stable_hash_impls.rs", "status": "modified", "additions": 58, "deletions": 1, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/cfa1d4e383d050e79868b9a6f8e1c57f1ab7dd13/src%2Flibrustc_hir%2Fstable_hash_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfa1d4e383d050e79868b9a6f8e1c57f1ab7dd13/src%2Flibrustc_hir%2Fstable_hash_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fstable_hash_impls.rs?ref=cfa1d4e383d050e79868b9a6f8e1c57f1ab7dd13", "patch": "@@ -1,6 +1,9 @@\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n \n-use crate::hir::{BodyId, Expr, ImplItemId, ItemId, Mod, TraitItemId, Ty, VisibilityKind};\n+use crate::hir::{\n+    BodyId, Expr, ImplItem, ImplItemId, Item, ItemId, Mod, TraitItem, TraitItemId, Ty,\n+    VisibilityKind,\n+};\n use crate::hir_id::HirId;\n \n /// Requirements for a `StableHashingContext` to be used in this crate.\n@@ -16,6 +19,7 @@ pub trait HashStableContext:\n     fn hash_hir_expr(&mut self, _: &Expr<'_>, hasher: &mut StableHasher);\n     fn hash_hir_ty(&mut self, _: &Ty<'_>, hasher: &mut StableHasher);\n     fn hash_hir_visibility_kind(&mut self, _: &VisibilityKind<'_>, hasher: &mut StableHasher);\n+    fn hash_hir_item_like<F: FnOnce(&mut Self)>(&mut self, f: F);\n }\n \n impl<HirCtx: crate::HashStableContext> HashStable<HirCtx> for HirId {\n@@ -78,3 +82,56 @@ impl<HirCtx: crate::HashStableContext> HashStable<HirCtx> for VisibilityKind<'_>\n         hcx.hash_hir_visibility_kind(self, hasher)\n     }\n }\n+\n+impl<HirCtx: crate::HashStableContext> HashStable<HirCtx> for TraitItem<'_> {\n+    fn hash_stable(&self, hcx: &mut HirCtx, hasher: &mut StableHasher) {\n+        let TraitItem { hir_id: _, ident, ref attrs, ref generics, ref kind, span } = *self;\n+\n+        hcx.hash_hir_item_like(|hcx| {\n+            ident.name.hash_stable(hcx, hasher);\n+            attrs.hash_stable(hcx, hasher);\n+            generics.hash_stable(hcx, hasher);\n+            kind.hash_stable(hcx, hasher);\n+            span.hash_stable(hcx, hasher);\n+        });\n+    }\n+}\n+\n+impl<HirCtx: crate::HashStableContext> HashStable<HirCtx> for ImplItem<'_> {\n+    fn hash_stable(&self, hcx: &mut HirCtx, hasher: &mut StableHasher) {\n+        let ImplItem {\n+            hir_id: _,\n+            ident,\n+            ref vis,\n+            defaultness,\n+            ref attrs,\n+            ref generics,\n+            ref kind,\n+            span,\n+        } = *self;\n+\n+        hcx.hash_hir_item_like(|hcx| {\n+            ident.name.hash_stable(hcx, hasher);\n+            vis.hash_stable(hcx, hasher);\n+            defaultness.hash_stable(hcx, hasher);\n+            attrs.hash_stable(hcx, hasher);\n+            generics.hash_stable(hcx, hasher);\n+            kind.hash_stable(hcx, hasher);\n+            span.hash_stable(hcx, hasher);\n+        });\n+    }\n+}\n+\n+impl<HirCtx: crate::HashStableContext> HashStable<HirCtx> for Item<'_> {\n+    fn hash_stable(&self, hcx: &mut HirCtx, hasher: &mut StableHasher) {\n+        let Item { ident, ref attrs, hir_id: _, ref kind, ref vis, span } = *self;\n+\n+        hcx.hash_hir_item_like(|hcx| {\n+            ident.name.hash_stable(hcx, hasher);\n+            attrs.hash_stable(hcx, hasher);\n+            kind.hash_stable(hcx, hasher);\n+            vis.hash_stable(hcx, hasher);\n+            span.hash_stable(hcx, hasher);\n+        });\n+    }\n+}"}]}