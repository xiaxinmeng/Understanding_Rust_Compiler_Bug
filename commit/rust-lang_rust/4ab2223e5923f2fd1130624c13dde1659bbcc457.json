{"sha": "4ab2223e5923f2fd1130624c13dde1659bbcc457", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhYjIyMjNlNTkyM2YyZmQxMTMwNjI0YzEzZGRlMTY1OWJiY2M0NTc=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2017-09-24T11:57:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-09-24T11:57:56Z"}, "message": "Merge pull request #2060 from mrecachinas/feature/int-plus-one\n\nAddresses #1955 - Suggests >= y + 1 become > y", "tree": {"sha": "87999a8621a7d6b32cfeb28ca85b38a24f4276cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87999a8621a7d6b32cfeb28ca85b38a24f4276cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ab2223e5923f2fd1130624c13dde1659bbcc457", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ab2223e5923f2fd1130624c13dde1659bbcc457", "html_url": "https://github.com/rust-lang/rust/commit/4ab2223e5923f2fd1130624c13dde1659bbcc457", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ab2223e5923f2fd1130624c13dde1659bbcc457/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3509b0b40c4eb536475296e5409cf906e393543a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3509b0b40c4eb536475296e5409cf906e393543a", "html_url": "https://github.com/rust-lang/rust/commit/3509b0b40c4eb536475296e5409cf906e393543a"}, {"sha": "f571cf0b5e56ff2f7651fdd809410d35edba09bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/f571cf0b5e56ff2f7651fdd809410d35edba09bd", "html_url": "https://github.com/rust-lang/rust/commit/f571cf0b5e56ff2f7651fdd809410d35edba09bd"}], "stats": {"total": 211, "additions": 211, "deletions": 0}, "files": [{"sha": "420427e7d0ab7eecb40707924e8f7d9a8a66cbc4", "filename": "clippy_lints/src/int_plus_one.rs", "status": "added", "additions": 143, "deletions": 0, "changes": 143, "blob_url": "https://github.com/rust-lang/rust/blob/4ab2223e5923f2fd1130624c13dde1659bbcc457/clippy_lints%2Fsrc%2Fint_plus_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ab2223e5923f2fd1130624c13dde1659bbcc457/clippy_lints%2Fsrc%2Fint_plus_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fint_plus_one.rs?ref=4ab2223e5923f2fd1130624c13dde1659bbcc457", "patch": "@@ -0,0 +1,143 @@\n+//! lint on blocks unnecessarily using >= with a + 1 or - 1\n+\n+use rustc::lint::*;\n+use syntax::ast::*;\n+\n+use utils::{span_lint_and_then, snippet_opt};\n+\n+/// **What it does:** Checks for usage of `x >= y + 1` or `x - 1 >= y` (and `<=`) in a block\n+///\n+///\n+/// **Why is this bad?** Readability -- better to use `> y` instead of `>= y + 1`.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// x >= y + 1\n+/// ```\n+///\n+/// Could be written:\n+///\n+/// ```rust\n+/// x > y\n+/// ```\n+declare_lint! {\n+    pub INT_PLUS_ONE,\n+    Allow,\n+    \"instead of using x >= y + 1, use x > y\"\n+}\n+\n+pub struct IntPlusOne;\n+\n+impl LintPass for IntPlusOne {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(INT_PLUS_ONE)\n+    }\n+}\n+\n+// cases:\n+// BinOpKind::Ge\n+// x >= y + 1\n+// x - 1 >= y\n+//\n+// BinOpKind::Le\n+// x + 1 <= y\n+// x <= y - 1\n+\n+enum Side {\n+    LHS,\n+    RHS,\n+}\n+\n+impl IntPlusOne {\n+    #[allow(cast_sign_loss)]\n+    fn check_lit(&self, lit: &Lit, target_value: i128) -> bool {\n+        if let LitKind::Int(value, ..) = lit.node {\n+            return value == (target_value as u128)\n+        }\n+        false\n+    }\n+\n+    fn check_binop(&self, cx: &EarlyContext, binop: BinOpKind, lhs: &Expr, rhs: &Expr) -> Option<String> {\n+        match (binop, &lhs.node, &rhs.node) {\n+            // case where `x - 1 >= ...` or `-1 + x >= ...`\n+            (BinOpKind::Ge, &ExprKind::Binary(ref lhskind, ref lhslhs, ref lhsrhs), _) => {\n+                match (lhskind.node, &lhslhs.node, &lhsrhs.node) {\n+                    // `-1 + x`\n+                    (BinOpKind::Add, &ExprKind::Lit(ref lit), _) if self.check_lit(lit, -1) => self.generate_recommendation(cx, binop, lhsrhs, rhs, Side::LHS),\n+                    // `x - 1`\n+                    (BinOpKind::Sub, _, &ExprKind::Lit(ref lit)) if self.check_lit(lit, 1) => self.generate_recommendation(cx, binop, lhslhs, rhs, Side::LHS),\n+                    _ => None\n+                }\n+            },\n+            // case where `... >= y + 1` or `... >= 1 + y`\n+            (BinOpKind::Ge, _, &ExprKind::Binary(ref rhskind, ref rhslhs, ref rhsrhs)) if rhskind.node == BinOpKind::Add => {\n+                match (&rhslhs.node, &rhsrhs.node) {\n+                    // `y + 1` and `1 + y`\n+                    (&ExprKind::Lit(ref lit), _) if self.check_lit(lit, 1) => self.generate_recommendation(cx, binop, rhsrhs, lhs, Side::RHS),\n+                    (_, &ExprKind::Lit(ref lit)) if self.check_lit(lit, 1) => self.generate_recommendation(cx, binop, rhslhs, lhs, Side::RHS),\n+                    _ => None\n+                }\n+            },\n+            // case where `x + 1 <= ...` or `1 + x <= ...`\n+            (BinOpKind::Le, &ExprKind::Binary(ref lhskind, ref lhslhs, ref lhsrhs), _) if lhskind.node == BinOpKind::Add => {\n+                match (&lhslhs.node, &lhsrhs.node) {\n+                    // `1 + x` and `x + 1`\n+                    (&ExprKind::Lit(ref lit), _) if self.check_lit(lit, 1) => self.generate_recommendation(cx, binop, lhsrhs, rhs, Side::LHS),\n+                    (_, &ExprKind::Lit(ref lit)) if self.check_lit(lit, 1) => self.generate_recommendation(cx, binop, lhslhs, rhs, Side::LHS),\n+                    _ => None\n+                }\n+            },\n+            // case where `... >= y - 1` or `... >= -1 + y`\n+            (BinOpKind::Le, _, &ExprKind::Binary(ref rhskind, ref rhslhs, ref rhsrhs)) => {\n+                match (rhskind.node, &rhslhs.node, &rhsrhs.node) {\n+                    // `-1 + y`\n+                    (BinOpKind::Add, &ExprKind::Lit(ref lit), _) if self.check_lit(lit, -1) => self.generate_recommendation(cx, binop, rhsrhs, lhs, Side::RHS),\n+                    // `y - 1`\n+                    (BinOpKind::Sub, _, &ExprKind::Lit(ref lit)) if self.check_lit(lit, 1) => self.generate_recommendation(cx, binop, rhslhs, lhs, Side::RHS),\n+                    _ => None\n+                }\n+            },\n+            _ => None\n+        }\n+    }\n+\n+    fn generate_recommendation(&self, cx: &EarlyContext, binop: BinOpKind, node: &Expr, other_side: &Expr, side: Side) -> Option<String> {\n+        let binop_string = match binop {\n+            BinOpKind::Ge => \">\",\n+            BinOpKind::Le => \"<\",\n+            _ => return None\n+        };\n+        if let Some(snippet) = snippet_opt(cx, node.span) {\n+            if let Some(other_side_snippet) = snippet_opt(cx, other_side.span) {\n+                let rec = match side {\n+                    Side::LHS => Some(format!(\"{} {} {}\", snippet, binop_string, other_side_snippet)),\n+                    Side::RHS => Some(format!(\"{} {} {}\", other_side_snippet, binop_string, snippet)),\n+                };\n+                return rec;\n+            }\n+        }\n+        None\n+    }\n+\n+    fn emit_warning(&self, cx: &EarlyContext, block: &Expr, recommendation: String) {\n+        span_lint_and_then(cx,\n+                           INT_PLUS_ONE,\n+                           block.span,\n+                           \"Unnecessary `>= y + 1` or `x - 1 >=`\",\n+                           |db| {\n+            db.span_suggestion(block.span, \"change `>= y + 1` to `> y` as shown\", recommendation);\n+        });\n+    }\n+}\n+\n+impl EarlyLintPass for IntPlusOne {\n+    fn check_expr(&mut self, cx: &EarlyContext, item: &Expr) {\n+        if let ExprKind::Binary(ref kind, ref lhs, ref rhs) = item.node {\n+            if let Some(ref rec) = self.check_binop(cx, kind.node, lhs, rhs) {\n+                self.emit_warning(cx, item, rec.clone());\n+            }\n+        }\n+    }\n+}"}, {"sha": "f4c9aaf3b08596bf15ef866b34212e543c19132e", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4ab2223e5923f2fd1130624c13dde1659bbcc457/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ab2223e5923f2fd1130624c13dde1659bbcc457/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=4ab2223e5923f2fd1130624c13dde1659bbcc457", "patch": "@@ -96,6 +96,7 @@ pub mod identity_op;\n pub mod if_let_redundant_pattern_matching;\n pub mod if_not_else;\n pub mod infinite_iter;\n+pub mod int_plus_one;\n pub mod is_unit_expr;\n pub mod items_after_statements;\n pub mod large_enum_variant;\n@@ -299,6 +300,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     reg.register_early_lint_pass(box formatting::Formatting);\n     reg.register_late_lint_pass(box swap::Swap);\n     reg.register_early_lint_pass(box if_not_else::IfNotElse);\n+    reg.register_early_lint_pass(box int_plus_one::IntPlusOne);\n     reg.register_late_lint_pass(box overflow_check_conditional::OverflowCheckConditional);\n     reg.register_late_lint_pass(box unused_label::UnusedLabel);\n     reg.register_late_lint_pass(box new_without_default::NewWithoutDefault);\n@@ -341,6 +343,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         enum_variants::PUB_ENUM_VARIANT_NAMES,\n         enum_variants::STUTTER,\n         if_not_else::IF_NOT_ELSE,\n+        int_plus_one::INT_PLUS_ONE,\n         infinite_iter::MAYBE_INFINITE_ITER,\n         items_after_statements::ITEMS_AFTER_STATEMENTS,\n         matches::SINGLE_MATCH_ELSE,"}, {"sha": "90375dad555f1a5d5b23cb562ab2ba0901b0922a", "filename": "tests/ui/int_plus_one.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4ab2223e5923f2fd1130624c13dde1659bbcc457/tests%2Fui%2Fint_plus_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ab2223e5923f2fd1130624c13dde1659bbcc457/tests%2Fui%2Fint_plus_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fint_plus_one.rs?ref=4ab2223e5923f2fd1130624c13dde1659bbcc457", "patch": "@@ -0,0 +1,18 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#[allow(no_effect, unnecessary_operation)]\n+#[warn(int_plus_one)]\n+fn main() {\n+    let x = 1i32;\n+    let y = 0i32;\n+    \n+    x >= y + 1;\n+    y + 1 <= x;\n+\n+    x - 1 >= y;\n+    y <= x - 1;\n+\n+    x > y; // should be ok\n+    y < x; // should be ok\n+}"}, {"sha": "6f69ba9d7146e3a1ab560fb9a08a6da70b9c3d0b", "filename": "tests/ui/int_plus_one.stderr", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/4ab2223e5923f2fd1130624c13dde1659bbcc457/tests%2Fui%2Fint_plus_one.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ab2223e5923f2fd1130624c13dde1659bbcc457/tests%2Fui%2Fint_plus_one.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fint_plus_one.stderr?ref=4ab2223e5923f2fd1130624c13dde1659bbcc457", "patch": "@@ -0,0 +1,47 @@\n+error: Unnecessary `>= y + 1` or `x - 1 >=`\n+  --> $DIR/int_plus_one.rs:10:5\n+   |\n+10 |     x >= y + 1;\n+   |     ^^^^^^^^^^\n+   |\n+   = note: `-D int-plus-one` implied by `-D warnings`\n+help: change `>= y + 1` to `> y` as shown\n+   |\n+10 |     x > y;\n+   |     ^^^^^\n+\n+error: Unnecessary `>= y + 1` or `x - 1 >=`\n+  --> $DIR/int_plus_one.rs:11:5\n+   |\n+11 |     y + 1 <= x;\n+   |     ^^^^^^^^^^\n+   |\n+help: change `>= y + 1` to `> y` as shown\n+   |\n+11 |     y < x;\n+   |     ^^^^^\n+\n+error: Unnecessary `>= y + 1` or `x - 1 >=`\n+  --> $DIR/int_plus_one.rs:13:5\n+   |\n+13 |     x - 1 >= y;\n+   |     ^^^^^^^^^^\n+   |\n+help: change `>= y + 1` to `> y` as shown\n+   |\n+13 |     x > y;\n+   |     ^^^^^\n+\n+error: Unnecessary `>= y + 1` or `x - 1 >=`\n+  --> $DIR/int_plus_one.rs:14:5\n+   |\n+14 |     y <= x - 1;\n+   |     ^^^^^^^^^^\n+   |\n+help: change `>= y + 1` to `> y` as shown\n+   |\n+14 |     y < x;\n+   |     ^^^^^\n+\n+error: aborting due to 4 previous errors\n+"}]}