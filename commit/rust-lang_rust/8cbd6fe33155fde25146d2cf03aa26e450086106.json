{"sha": "8cbd6fe33155fde25146d2cf03aa26e450086106", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjYmQ2ZmUzMzE1NWZkZTI1MTQ2ZDJjZjAzYWEyNmU0NTAwODYxMDY=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-08-31T20:51:24Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-09-01T13:43:44Z"}, "message": "ICH: Share codemap cache between subsequent runs of the ICH visitor.", "tree": {"sha": "d81e3bafaa493ba3c73eaae301e08fab920414dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d81e3bafaa493ba3c73eaae301e08fab920414dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8cbd6fe33155fde25146d2cf03aa26e450086106", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8cbd6fe33155fde25146d2cf03aa26e450086106", "html_url": "https://github.com/rust-lang/rust/commit/8cbd6fe33155fde25146d2cf03aa26e450086106", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8cbd6fe33155fde25146d2cf03aa26e450086106/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2faca22bd31b0deeb38f35dc8d0916fb6ace95c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/2faca22bd31b0deeb38f35dc8d0916fb6ace95c2", "html_url": "https://github.com/rust-lang/rust/commit/2faca22bd31b0deeb38f35dc8d0916fb6ace95c2"}], "stats": {"total": 197, "additions": 111, "deletions": 86}, "files": [{"sha": "32aa5a4272871aa80477b0ede9d85c5f545624e6", "filename": "src/librustc_incremental/calculate_svh/caching_codemap_view.rs", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/8cbd6fe33155fde25146d2cf03aa26e450086106/src%2Flibrustc_incremental%2Fcalculate_svh%2Fcaching_codemap_view.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cbd6fe33155fde25146d2cf03aa26e450086106/src%2Flibrustc_incremental%2Fcalculate_svh%2Fcaching_codemap_view.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fcalculate_svh%2Fcaching_codemap_view.rs?ref=8cbd6fe33155fde25146d2cf03aa26e450086106", "patch": "@@ -0,0 +1,97 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use rustc::ty::TyCtxt;\n+use std::rc::Rc;\n+use syntax::codemap::CodeMap;\n+use syntax_pos::{BytePos, FileMap};\n+\n+#[derive(Clone)]\n+struct CacheEntry {\n+    time_stamp: usize,\n+    line_number: usize,\n+    line_start: BytePos,\n+    line_end: BytePos,\n+    file: Rc<FileMap>,\n+}\n+\n+pub struct CachingCodemapView<'tcx> {\n+    codemap: &'tcx CodeMap,\n+    line_cache: [CacheEntry; 3],\n+    time_stamp: usize,\n+}\n+\n+impl<'tcx> CachingCodemapView<'tcx> {\n+    pub fn new<'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> CachingCodemapView<'tcx> {\n+        let codemap = tcx.sess.codemap();\n+        let first_file = codemap.files.borrow()[0].clone();\n+        let entry = CacheEntry {\n+            time_stamp: 0,\n+            line_number: 0,\n+            line_start: BytePos(0),\n+            line_end: BytePos(0),\n+            file: first_file,\n+        };\n+\n+        CachingCodemapView {\n+            codemap: codemap,\n+            line_cache: [entry.clone(), entry.clone(), entry.clone()],\n+            time_stamp: 0,\n+        }\n+    }\n+\n+    pub fn codemap(&self) -> &'tcx CodeMap {\n+        self.codemap\n+    }\n+\n+    pub fn byte_pos_to_line_and_col(&mut self,\n+                                    pos: BytePos)\n+                                    -> (Rc<FileMap>, usize, BytePos) {\n+        self.time_stamp += 1;\n+\n+        // Check if the position is in one of the cached lines\n+        for cache_entry in self.line_cache.iter_mut() {\n+            if pos >= cache_entry.line_start && pos < cache_entry.line_end {\n+                cache_entry.time_stamp = self.time_stamp;\n+                return (cache_entry.file.clone(),\n+                        cache_entry.line_number,\n+                        pos - cache_entry.line_start);\n+            }\n+        }\n+\n+        // No cache hit ...\n+        let mut oldest = 0;\n+        for index in 1 .. self.line_cache.len() {\n+            if self.line_cache[index].time_stamp < self.line_cache[oldest].time_stamp {\n+                oldest = index;\n+            }\n+        }\n+\n+        let cache_entry = &mut self.line_cache[oldest];\n+\n+        // If the entry doesn't point to the correct file, fix it up\n+        if pos < cache_entry.file.start_pos || pos >= cache_entry.file.end_pos {\n+            let file_index = self.codemap.lookup_filemap_idx(pos);\n+            cache_entry.file = self.codemap.files.borrow()[file_index].clone();\n+        }\n+\n+        let line_index = cache_entry.file.lookup_line(pos).unwrap();\n+        let line_bounds = cache_entry.file.line_bounds(line_index);\n+\n+        cache_entry.line_number = line_index + 1;\n+        cache_entry.line_start = line_bounds.0;\n+        cache_entry.line_end = line_bounds.1;\n+        cache_entry.time_stamp = self.time_stamp;\n+\n+        return (cache_entry.file.clone(),\n+                cache_entry.line_number,\n+                pos - cache_entry.line_start);\n+    }\n+}"}, {"sha": "c54fe2114517e17d234ba9044a6c5acc886f5605", "filename": "src/librustc_incremental/calculate_svh/mod.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8cbd6fe33155fde25146d2cf03aa26e450086106/src%2Flibrustc_incremental%2Fcalculate_svh%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cbd6fe33155fde25146d2cf03aa26e450086106/src%2Flibrustc_incremental%2Fcalculate_svh%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fcalculate_svh%2Fmod.rs?ref=8cbd6fe33155fde25146d2cf03aa26e450086106", "patch": "@@ -40,9 +40,11 @@ use rustc::session::config::DebugInfoLevel::NoDebugInfo;\n \n use self::def_path_hash::DefPathHashes;\n use self::svh_visitor::StrictVersionHashVisitor;\n+use self::caching_codemap_view::CachingCodemapView;\n \n mod def_path_hash;\n mod svh_visitor;\n+mod caching_codemap_view;\n \n pub type IncrementalHashesMap = FnvHashMap<DepNode<DefId>, u64>;\n \n@@ -55,7 +57,8 @@ pub fn compute_incremental_hashes_map<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>)\n         tcx: tcx,\n         hashes: FnvHashMap(),\n         def_path_hashes: DefPathHashes::new(tcx),\n-        hash_spans: hash_spans\n+        codemap: CachingCodemapView::new(tcx),\n+        hash_spans: hash_spans,\n     };\n     record_time(&tcx.sess.perf_stats.incr_comp_hashes_time, || {\n         visitor.calculate_def_id(DefId::local(CRATE_DEF_INDEX),\n@@ -69,6 +72,7 @@ pub fn compute_incremental_hashes_map<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>)\n struct HashItemsVisitor<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     def_path_hashes: DefPathHashes<'a, 'tcx>,\n+    codemap: CachingCodemapView<'tcx>,\n     hashes: IncrementalHashesMap,\n     hash_spans: bool,\n }\n@@ -92,6 +96,7 @@ impl<'a, 'tcx> HashItemsVisitor<'a, 'tcx> {\n         walk_op(&mut StrictVersionHashVisitor::new(&mut state,\n                                                    self.tcx,\n                                                    &mut self.def_path_hashes,\n+                                                   &mut self.codemap,\n                                                    self.hash_spans));\n         let item_hash = state.finish();\n         self.hashes.insert(DepNode::Hir(def_id), item_hash);\n@@ -132,6 +137,7 @@ impl<'a, 'tcx> HashItemsVisitor<'a, 'tcx> {\n             let mut visitor = StrictVersionHashVisitor::new(&mut crate_state,\n                                                             self.tcx,\n                                                             &mut self.def_path_hashes,\n+                                                            &mut self.codemap,\n                                                             self.hash_spans);\n             visitor.hash_attributes(&krate.attrs);\n         }"}, {"sha": "417f09c1c9d55c8bf69839e3660cba5a9f7a24ee", "filename": "src/librustc_incremental/calculate_svh/svh_visitor.rs", "status": "modified", "additions": 7, "deletions": 85, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/8cbd6fe33155fde25146d2cf03aa26e450086106/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cbd6fe33155fde25146d2cf03aa26e450086106/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs?ref=8cbd6fe33155fde25146d2cf03aa26e450086106", "patch": "@@ -17,18 +17,17 @@ use self::SawExprComponent::*;\n use self::SawAbiComponent::*;\n use syntax::ast::{self, Name, NodeId, Attribute};\n use syntax::parse::token;\n-use syntax::codemap::CodeMap;\n-use syntax_pos::{Span, NO_EXPANSION, COMMAND_LINE_EXPN, BytePos, FileMap};\n+use syntax_pos::{Span, NO_EXPANSION, COMMAND_LINE_EXPN, BytePos};\n use rustc::hir;\n use rustc::hir::*;\n use rustc::hir::def::{Def, PathResolution};\n use rustc::hir::def_id::DefId;\n use rustc::hir::intravisit as visit;\n use rustc::ty::TyCtxt;\n-use std::rc::Rc;\n use std::hash::{Hash, SipHasher};\n \n use super::def_path_hash::DefPathHashes;\n+use super::caching_codemap_view::CachingCodemapView;\n \n const IGNORED_ATTRIBUTES: &'static [&'static str] = &[\"cfg\",\n                                                       \"rustc_clean\",\n@@ -40,100 +39,22 @@ pub struct StrictVersionHashVisitor<'a, 'hash: 'a, 'tcx: 'hash> {\n     // collect a deterministic hash of def-ids that we have seen\n     def_path_hashes: &'a mut DefPathHashes<'hash, 'tcx>,\n     hash_spans: bool,\n-    codemap: CachingCodemapView<'tcx>,\n-}\n-\n-#[derive(Clone)]\n-struct CacheEntry {\n-    time_stamp: usize,\n-    line_number: usize,\n-    line_start: BytePos,\n-    line_end: BytePos,\n-    file: Rc<FileMap>,\n-}\n-\n-struct CachingCodemapView<'tcx> {\n-    codemap: &'tcx CodeMap,\n-    line_cache: [CacheEntry; 3],\n-    time_stamp: usize,\n-}\n-\n-impl<'tcx> CachingCodemapView<'tcx> {\n-    fn new<'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> CachingCodemapView<'tcx> {\n-        let codemap = tcx.sess.codemap();\n-        let first_file = codemap.files.borrow()[0].clone();\n-        let entry = CacheEntry {\n-            time_stamp: 0,\n-            line_number: 0,\n-            line_start: BytePos(0),\n-            line_end: BytePos(0),\n-            file: first_file,\n-        };\n-\n-        CachingCodemapView {\n-            codemap: codemap,\n-            line_cache: [entry.clone(), entry.clone(), entry.clone()],\n-            time_stamp: 0,\n-        }\n-    }\n-\n-    fn byte_pos_to_line_and_col(&mut self,\n-                                pos: BytePos)\n-                                -> (Rc<FileMap>, usize, BytePos) {\n-        self.time_stamp += 1;\n-\n-        // Check if the position is in one of the cached lines\n-        for cache_entry in self.line_cache.iter_mut() {\n-            if pos >= cache_entry.line_start && pos < cache_entry.line_end {\n-                cache_entry.time_stamp = self.time_stamp;\n-                return (cache_entry.file.clone(),\n-                        cache_entry.line_number,\n-                        pos - cache_entry.line_start);\n-            }\n-        }\n-\n-        // No cache hit ...\n-        let mut oldest = 0;\n-        for index in 1 .. self.line_cache.len() {\n-            if self.line_cache[index].time_stamp < self.line_cache[oldest].time_stamp {\n-                oldest = index;\n-            }\n-        }\n-\n-        let cache_entry = &mut self.line_cache[oldest];\n-\n-        // If the entry doesn't point to the correct file, fix it up\n-        if pos < cache_entry.file.start_pos || pos >= cache_entry.file.end_pos {\n-            let file_index = self.codemap.lookup_filemap_idx(pos);\n-            cache_entry.file = self.codemap.files.borrow()[file_index].clone();\n-        }\n-\n-        let line_index = cache_entry.file.lookup_line(pos).unwrap();\n-        let line_bounds = cache_entry.file.line_bounds(line_index);\n-\n-        cache_entry.line_number = line_index + 1;\n-        cache_entry.line_start = line_bounds.0;\n-        cache_entry.line_end = line_bounds.1;\n-        cache_entry.time_stamp = self.time_stamp;\n-\n-        return (cache_entry.file.clone(),\n-                cache_entry.line_number,\n-                pos - cache_entry.line_start);\n-    }\n+    codemap: &'a mut CachingCodemapView<'tcx>,\n }\n \n impl<'a, 'hash, 'tcx> StrictVersionHashVisitor<'a, 'hash, 'tcx> {\n     pub fn new(st: &'a mut SipHasher,\n                tcx: TyCtxt<'hash, 'tcx, 'tcx>,\n                def_path_hashes: &'a mut DefPathHashes<'hash, 'tcx>,\n+               codemap: &'a mut CachingCodemapView<'tcx>,\n                hash_spans: bool)\n                -> Self {\n         StrictVersionHashVisitor {\n             st: st,\n             tcx: tcx,\n             def_path_hashes: def_path_hashes,\n             hash_spans: hash_spans,\n-            codemap: CachingCodemapView::new(tcx),\n+            codemap: codemap,\n         }\n     }\n \n@@ -178,7 +99,8 @@ impl<'a, 'hash, 'tcx> StrictVersionHashVisitor<'a, 'hash, 'tcx> {\n                 expansion_kind).hash(self.st);\n \n         if expansion_kind == SawSpanExpnKind::SomeExpansion {\n-            self.hash_span(self.codemap.codemap.source_callsite(span));\n+            let call_site = self.codemap.codemap().source_callsite(span);\n+            self.hash_span(call_site);\n         }\n     }\n "}]}