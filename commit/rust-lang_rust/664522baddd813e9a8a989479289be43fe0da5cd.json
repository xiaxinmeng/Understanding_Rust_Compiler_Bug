{"sha": "664522baddd813e9a8a989479289be43fe0da5cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2NDUyMmJhZGRkODEzZTlhOGE5ODk0NzkyODliZTQzZmUwZGE1Y2Q=", "commit": {"author": {"name": "James Wang", "email": "jameswang9909@hotmail.com", "date": "2019-10-03T19:09:32Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-10-15T07:58:11Z"}, "message": "Add a new lint for unused self", "tree": {"sha": "7a502d02a7d44e1f88fa9c592e58f0dd5f100cbb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a502d02a7d44e1f88fa9c592e58f0dd5f100cbb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/664522baddd813e9a8a989479289be43fe0da5cd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZxoS6lESXlRGMHWcaTCGhp1QZjcFAl2lfBMACgkQaTCGhp1Q\nZjclCBAArkgx6AYSCWSDqODJhVamgg8RM98LaR9SOqTtrz2wfJTOQkAM9S2H3Vk/\nzU619hsmttDmCA8jKbtr7Y3prIS7OAhMgcbtJFxhEqs+XTzOvc66rrYwb555bE/w\no2AiAJa3Ja59QwHeZKuXR72UYOBrtUW/wDStAGEXHnQ/kIPIeIQ8v5HmYr5oqDTD\nsr2e0Uf8kM92/AuMzukjY+3nOBbAZPHG8myk8YbkQKenMsH0CQY5cP/XmX3/kAyS\nDqCSKtqvtG58c2Hg8vbg6NpaHw3VnYfBAgBNHvAc4RH569UkB2N74csTk6h7Nnga\ntOR8bQqXOxIJSt33TLBHFCAoIvYWsL6nIIEz0wyeIz/MLDu+PHnVAc7albV8hZ1F\npvF8BoYYVqGf/QgHePoVlyVs9L3H1Ixk0fblExSNxVeIFpoIokgRcUhwQ1NkldZW\nFAyHyTJL3ZI5EUarThNT99Jaq93z75FBOiaP5FdLc9ndPjuOlYrEh9D8O+hLuW98\n+QRY/leO5r6Xtl1NaCUNBCiAw7xja52RCj0CbwfCEmZ0D5wNiDeQQozeWnEJN031\nuA/XL09krCfYjTQhWx/1CjSDoiNrQDyTWWLzPBt+erS3CuUnRcyy4OzOmEff4hnb\nJRXKa9cpZUTVyq6FIUyp2wGsY7s/sphVO8MslKD9xEjo2+zg62g=\n=kJMH\n-----END PGP SIGNATURE-----", "payload": "tree 7a502d02a7d44e1f88fa9c592e58f0dd5f100cbb\nparent 8fae2dd3c1bfed13bdd6c0cfd4170dd1363f25f7\nauthor James Wang <jameswang9909@hotmail.com> 1570129772 -0500\ncommitter flip1995 <hello@philkrones.com> 1571126291 +0200\n\nAdd a new lint for unused self\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/664522baddd813e9a8a989479289be43fe0da5cd", "html_url": "https://github.com/rust-lang/rust/commit/664522baddd813e9a8a989479289be43fe0da5cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/664522baddd813e9a8a989479289be43fe0da5cd/comments", "author": {"login": "james9909", "id": 9091144, "node_id": "MDQ6VXNlcjkwOTExNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/9091144?v=4", "gravatar_id": "", "url": "https://api.github.com/users/james9909", "html_url": "https://github.com/james9909", "followers_url": "https://api.github.com/users/james9909/followers", "following_url": "https://api.github.com/users/james9909/following{/other_user}", "gists_url": "https://api.github.com/users/james9909/gists{/gist_id}", "starred_url": "https://api.github.com/users/james9909/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/james9909/subscriptions", "organizations_url": "https://api.github.com/users/james9909/orgs", "repos_url": "https://api.github.com/users/james9909/repos", "events_url": "https://api.github.com/users/james9909/events{/privacy}", "received_events_url": "https://api.github.com/users/james9909/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8fae2dd3c1bfed13bdd6c0cfd4170dd1363f25f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fae2dd3c1bfed13bdd6c0cfd4170dd1363f25f7", "html_url": "https://github.com/rust-lang/rust/commit/8fae2dd3c1bfed13bdd6c0cfd4170dd1363f25f7"}], "stats": {"total": 711, "additions": 509, "deletions": 202}, "files": [{"sha": "9dd04af611f415014c795202819059dd1f041778", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/664522baddd813e9a8a989479289be43fe0da5cd/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/664522baddd813e9a8a989479289be43fe0da5cd/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=664522baddd813e9a8a989479289be43fe0da5cd", "patch": "@@ -1236,6 +1236,7 @@ Released 2018-09-13\n [`unused_collect`]: https://rust-lang.github.io/rust-clippy/master/index.html#unused_collect\n [`unused_io_amount`]: https://rust-lang.github.io/rust-clippy/master/index.html#unused_io_amount\n [`unused_label`]: https://rust-lang.github.io/rust-clippy/master/index.html#unused_label\n+[`unused_self`]: https://rust-lang.github.io/rust-clippy/master/index.html#unused_self\n [`unused_unit`]: https://rust-lang.github.io/rust-clippy/master/index.html#unused_unit\n [`use_debug`]: https://rust-lang.github.io/rust-clippy/master/index.html#use_debug\n [`use_self`]: https://rust-lang.github.io/rust-clippy/master/index.html#use_self"}, {"sha": "986d920ac9682cdbf084fa97fc53a9e77667ea01", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/664522baddd813e9a8a989479289be43fe0da5cd/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/664522baddd813e9a8a989479289be43fe0da5cd/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=664522baddd813e9a8a989479289be43fe0da5cd", "patch": "@@ -6,7 +6,7 @@\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 324 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n+[There are 325 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "a1e4be260b490f45865eee4d38ffd4b545d783e1", "filename": "clippy_lints/src/double_comparison.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/664522baddd813e9a8a989479289be43fe0da5cd/clippy_lints%2Fsrc%2Fdouble_comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664522baddd813e9a8a989479289be43fe0da5cd/clippy_lints%2Fsrc%2Fdouble_comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdouble_comparison.rs?ref=664522baddd813e9a8a989479289be43fe0da5cd", "patch": "@@ -39,7 +39,7 @@ declare_lint_pass!(DoubleComparisons => [DOUBLE_COMPARISONS]);\n \n impl<'a, 'tcx> DoubleComparisons {\n     #[allow(clippy::similar_names)]\n-    fn check_binop(self, cx: &LateContext<'a, 'tcx>, op: BinOpKind, lhs: &'tcx Expr, rhs: &'tcx Expr, span: Span) {\n+    fn check_binop(cx: &LateContext<'a, 'tcx>, op: BinOpKind, lhs: &'tcx Expr, rhs: &'tcx Expr, span: Span) {\n         let (lkind, llhs, lrhs, rkind, rlhs, rrhs) = match (&lhs.kind, &rhs.kind) {\n             (ExprKind::Binary(lb, llhs, lrhs), ExprKind::Binary(rb, rlhs, rrhs)) => {\n                 (lb.node, llhs, lrhs, rb.node, rlhs, rrhs)\n@@ -89,7 +89,7 @@ impl<'a, 'tcx> DoubleComparisons {\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for DoubleComparisons {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         if let ExprKind::Binary(ref kind, ref lhs, ref rhs) = expr.kind {\n-            self.check_binop(cx, kind.node, lhs, rhs, expr.span);\n+            Self::check_binop(cx, kind.node, lhs, rhs, expr.span);\n         }\n     }\n }"}, {"sha": "64f340dffa131de85a59afc42d2c1768ecfcaac2", "filename": "clippy_lints/src/enum_glob_use.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/664522baddd813e9a8a989479289be43fe0da5cd/clippy_lints%2Fsrc%2Fenum_glob_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664522baddd813e9a8a989479289be43fe0da5cd/clippy_lints%2Fsrc%2Fenum_glob_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_glob_use.rs?ref=664522baddd813e9a8a989479289be43fe0da5cd", "patch": "@@ -32,20 +32,18 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EnumGlobUse {\n         let map = cx.tcx.hir();\n         // only check top level `use` statements\n         for item in &m.item_ids {\n-            self.lint_item(cx, map.expect_item(item.id));\n+            lint_item(cx, map.expect_item(item.id));\n         }\n     }\n }\n \n-impl EnumGlobUse {\n-    fn lint_item(self, cx: &LateContext<'_, '_>, item: &Item) {\n-        if item.vis.node.is_pub() {\n-            return; // re-exports are fine\n-        }\n-        if let ItemKind::Use(ref path, UseKind::Glob) = item.kind {\n-            if let Res::Def(DefKind::Enum, _) = path.res {\n-                span_lint(cx, ENUM_GLOB_USE, item.span, \"don't use glob imports for enum variants\");\n-            }\n+fn lint_item(cx: &LateContext<'_, '_>, item: &Item) {\n+    if item.vis.node.is_pub() {\n+        return; // re-exports are fine\n+    }\n+    if let ItemKind::Use(ref path, UseKind::Glob) = item.kind {\n+        if let Res::Def(DefKind::Enum, _) = path.res {\n+            span_lint(cx, ENUM_GLOB_USE, item.span, \"don't use glob imports for enum variants\");\n         }\n     }\n }"}, {"sha": "fcc247974c5783068f73800a7248602025e1041a", "filename": "clippy_lints/src/excessive_precision.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/664522baddd813e9a8a989479289be43fe0da5cd/clippy_lints%2Fsrc%2Fexcessive_precision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664522baddd813e9a8a989479289be43fe0da5cd/clippy_lints%2Fsrc%2Fexcessive_precision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexcessive_precision.rs?ref=664522baddd813e9a8a989479289be43fe0da5cd", "patch": "@@ -44,7 +44,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ExcessivePrecision {\n             if let ty::Float(fty) = ty.kind;\n             if let hir::ExprKind::Lit(ref lit) = expr.kind;\n             if let LitKind::Float(sym, _) | LitKind::FloatUnsuffixed(sym) = lit.node;\n-            if let Some(sugg) = self.check(sym, fty);\n+            if let Some(sugg) = Self::check(sym, fty);\n             then {\n                 span_lint_and_sugg(\n                     cx,\n@@ -63,7 +63,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ExcessivePrecision {\n impl ExcessivePrecision {\n     // None if nothing to lint, Some(suggestion) if lint necessary\n     #[must_use]\n-    fn check(self, sym: Symbol, fty: FloatTy) -> Option<String> {\n+    fn check(sym: Symbol, fty: FloatTy) -> Option<String> {\n         let max = max_digits(fty);\n         let sym_str = sym.as_str();\n         if dot_zero_exclusion(&sym_str) {"}, {"sha": "5b2619aa9ba7a97f15930f26893c327969c96438", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/664522baddd813e9a8a989479289be43fe0da5cd/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664522baddd813e9a8a989479289be43fe0da5cd/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=664522baddd813e9a8a989479289be43fe0da5cd", "patch": "@@ -222,7 +222,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Functions {\n             }\n         }\n \n-        self.check_raw_ptr(cx, unsafety, decl, body, hir_id);\n+        Self::check_raw_ptr(cx, unsafety, decl, body, hir_id);\n         self.check_line_number(cx, span, body);\n     }\n \n@@ -282,7 +282,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Functions {\n             }\n             if let hir::TraitMethod::Provided(eid) = *eid {\n                 let body = cx.tcx.hir().body(eid);\n-                self.check_raw_ptr(cx, sig.header.unsafety, &sig.decl, body, item.hir_id);\n+                Self::check_raw_ptr(cx, sig.header.unsafety, &sig.decl, body, item.hir_id);\n \n                 if attr.is_none() && cx.access_levels.is_exported(item.hir_id) {\n                     check_must_use_candidate(\n@@ -368,7 +368,6 @@ impl<'a, 'tcx> Functions {\n     }\n \n     fn check_raw_ptr(\n-        self,\n         cx: &LateContext<'a, 'tcx>,\n         unsafety: hir::Unsafety,\n         decl: &'tcx hir::FnDecl,"}, {"sha": "93e09315f86c504b30bffd99f1d98a5b8426c8b7", "filename": "clippy_lints/src/int_plus_one.rs", "status": "modified", "additions": 21, "deletions": 22, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/664522baddd813e9a8a989479289be43fe0da5cd/clippy_lints%2Fsrc%2Fint_plus_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664522baddd813e9a8a989479289be43fe0da5cd/clippy_lints%2Fsrc%2Fint_plus_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fint_plus_one.rs?ref=664522baddd813e9a8a989479289be43fe0da5cd", "patch": "@@ -53,25 +53,25 @@ enum Side {\n \n impl IntPlusOne {\n     #[allow(clippy::cast_sign_loss)]\n-    fn check_lit(self, lit: &Lit, target_value: i128) -> bool {\n+    fn check_lit(lit: &Lit, target_value: i128) -> bool {\n         if let LitKind::Int(value, ..) = lit.kind {\n             return value == (target_value as u128);\n         }\n         false\n     }\n \n-    fn check_binop(self, cx: &EarlyContext<'_>, binop: BinOpKind, lhs: &Expr, rhs: &Expr) -> Option<String> {\n+    fn check_binop(cx: &EarlyContext<'_>, binop: BinOpKind, lhs: &Expr, rhs: &Expr) -> Option<String> {\n         match (binop, &lhs.kind, &rhs.kind) {\n             // case where `x - 1 >= ...` or `-1 + x >= ...`\n             (BinOpKind::Ge, &ExprKind::Binary(ref lhskind, ref lhslhs, ref lhsrhs), _) => {\n                 match (lhskind.node, &lhslhs.kind, &lhsrhs.kind) {\n                     // `-1 + x`\n-                    (BinOpKind::Add, &ExprKind::Lit(ref lit), _) if self.check_lit(lit, -1) => {\n-                        self.generate_recommendation(cx, binop, lhsrhs, rhs, Side::LHS)\n+                    (BinOpKind::Add, &ExprKind::Lit(ref lit), _) if Self::check_lit(lit, -1) => {\n+                        Self::generate_recommendation(cx, binop, lhsrhs, rhs, Side::LHS)\n                     },\n                     // `x - 1`\n-                    (BinOpKind::Sub, _, &ExprKind::Lit(ref lit)) if self.check_lit(lit, 1) => {\n-                        self.generate_recommendation(cx, binop, lhslhs, rhs, Side::LHS)\n+                    (BinOpKind::Sub, _, &ExprKind::Lit(ref lit)) if Self::check_lit(lit, 1) => {\n+                        Self::generate_recommendation(cx, binop, lhslhs, rhs, Side::LHS)\n                     },\n                     _ => None,\n                 }\n@@ -82,11 +82,11 @@ impl IntPlusOne {\n             {\n                 match (&rhslhs.kind, &rhsrhs.kind) {\n                     // `y + 1` and `1 + y`\n-                    (&ExprKind::Lit(ref lit), _) if self.check_lit(lit, 1) => {\n-                        self.generate_recommendation(cx, binop, rhsrhs, lhs, Side::RHS)\n+                    (&ExprKind::Lit(ref lit), _) if Self::check_lit(lit, 1) => {\n+                        Self::generate_recommendation(cx, binop, rhsrhs, lhs, Side::RHS)\n                     },\n-                    (_, &ExprKind::Lit(ref lit)) if self.check_lit(lit, 1) => {\n-                        self.generate_recommendation(cx, binop, rhslhs, lhs, Side::RHS)\n+                    (_, &ExprKind::Lit(ref lit)) if Self::check_lit(lit, 1) => {\n+                        Self::generate_recommendation(cx, binop, rhslhs, lhs, Side::RHS)\n                     },\n                     _ => None,\n                 }\n@@ -97,11 +97,11 @@ impl IntPlusOne {\n             {\n                 match (&lhslhs.kind, &lhsrhs.kind) {\n                     // `1 + x` and `x + 1`\n-                    (&ExprKind::Lit(ref lit), _) if self.check_lit(lit, 1) => {\n-                        self.generate_recommendation(cx, binop, lhsrhs, rhs, Side::LHS)\n+                    (&ExprKind::Lit(ref lit), _) if Self::check_lit(lit, 1) => {\n+                        Self::generate_recommendation(cx, binop, lhsrhs, rhs, Side::LHS)\n                     },\n-                    (_, &ExprKind::Lit(ref lit)) if self.check_lit(lit, 1) => {\n-                        self.generate_recommendation(cx, binop, lhslhs, rhs, Side::LHS)\n+                    (_, &ExprKind::Lit(ref lit)) if Self::check_lit(lit, 1) => {\n+                        Self::generate_recommendation(cx, binop, lhslhs, rhs, Side::LHS)\n                     },\n                     _ => None,\n                 }\n@@ -110,12 +110,12 @@ impl IntPlusOne {\n             (BinOpKind::Le, _, &ExprKind::Binary(ref rhskind, ref rhslhs, ref rhsrhs)) => {\n                 match (rhskind.node, &rhslhs.kind, &rhsrhs.kind) {\n                     // `-1 + y`\n-                    (BinOpKind::Add, &ExprKind::Lit(ref lit), _) if self.check_lit(lit, -1) => {\n-                        self.generate_recommendation(cx, binop, rhsrhs, lhs, Side::RHS)\n+                    (BinOpKind::Add, &ExprKind::Lit(ref lit), _) if Self::check_lit(lit, -1) => {\n+                        Self::generate_recommendation(cx, binop, rhsrhs, lhs, Side::RHS)\n                     },\n                     // `y - 1`\n-                    (BinOpKind::Sub, _, &ExprKind::Lit(ref lit)) if self.check_lit(lit, 1) => {\n-                        self.generate_recommendation(cx, binop, rhslhs, lhs, Side::RHS)\n+                    (BinOpKind::Sub, _, &ExprKind::Lit(ref lit)) if Self::check_lit(lit, 1) => {\n+                        Self::generate_recommendation(cx, binop, rhslhs, lhs, Side::RHS)\n                     },\n                     _ => None,\n                 }\n@@ -125,7 +125,6 @@ impl IntPlusOne {\n     }\n \n     fn generate_recommendation(\n-        self,\n         cx: &EarlyContext<'_>,\n         binop: BinOpKind,\n         node: &Expr,\n@@ -149,7 +148,7 @@ impl IntPlusOne {\n         None\n     }\n \n-    fn emit_warning(self, cx: &EarlyContext<'_>, block: &Expr, recommendation: String) {\n+    fn emit_warning(cx: &EarlyContext<'_>, block: &Expr, recommendation: String) {\n         span_lint_and_then(\n             cx,\n             INT_PLUS_ONE,\n@@ -170,8 +169,8 @@ impl IntPlusOne {\n impl EarlyLintPass for IntPlusOne {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, item: &Expr) {\n         if let ExprKind::Binary(ref kind, ref lhs, ref rhs) = item.kind {\n-            if let Some(ref rec) = self.check_binop(cx, kind.node, lhs, rhs) {\n-                self.emit_warning(cx, item, rec.clone());\n+            if let Some(ref rec) = Self::check_binop(cx, kind.node, lhs, rhs) {\n+                Self::emit_warning(cx, item, rec.clone());\n             }\n         }\n     }"}, {"sha": "09db4f6ca900060b7f8920ed463becf24dc10224", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/664522baddd813e9a8a989479289be43fe0da5cd/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664522baddd813e9a8a989479289be43fe0da5cd/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=664522baddd813e9a8a989479289be43fe0da5cd", "patch": "@@ -277,6 +277,7 @@ pub mod unicode;\n pub mod unsafe_removed_from_name;\n pub mod unused_io_amount;\n pub mod unused_label;\n+pub mod unused_self;\n pub mod unwrap;\n pub mod use_self;\n pub mod vec;\n@@ -606,6 +607,7 @@ pub fn register_plugins(reg: &mut rustc_driver::plugin::Registry<'_>, conf: &Con\n     reg.register_late_lint_pass(box trait_bounds::TraitBounds);\n     reg.register_late_lint_pass(box comparison_chain::ComparisonChain);\n     reg.register_late_lint_pass(box mul_add::MulAddCheck);\n+    reg.register_late_lint_pass(box unused_self::UnusedSelf);\n \n     reg.register_lint_group(\"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n         arithmetic::FLOAT_ARITHMETIC,\n@@ -926,6 +928,7 @@ pub fn register_plugins(reg: &mut rustc_driver::plugin::Registry<'_>, conf: &Con\n         unsafe_removed_from_name::UNSAFE_REMOVED_FROM_NAME,\n         unused_io_amount::UNUSED_IO_AMOUNT,\n         unused_label::UNUSED_LABEL,\n+        unused_self::UNUSED_SELF,\n         unwrap::PANICKING_UNWRAP,\n         unwrap::UNNECESSARY_UNWRAP,\n         vec::USELESS_VEC,\n@@ -1104,6 +1107,7 @@ pub fn register_plugins(reg: &mut rustc_driver::plugin::Registry<'_>, conf: &Con\n         types::UNNECESSARY_CAST,\n         types::VEC_BOX,\n         unused_label::UNUSED_LABEL,\n+        unused_self::UNUSED_SELF,\n         unwrap::UNNECESSARY_UNWRAP,\n         zero_div_zero::ZERO_DIVIDED_BY_ZERO,\n     ]);"}, {"sha": "badd2237073c57abc99029057a54ba3dc81355d0", "filename": "clippy_lints/src/literal_representation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/664522baddd813e9a8a989479289be43fe0da5cd/clippy_lints%2Fsrc%2Fliteral_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664522baddd813e9a8a989479289be43fe0da5cd/clippy_lints%2Fsrc%2Fliteral_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fliteral_representation.rs?ref=664522baddd813e9a8a989479289be43fe0da5cd", "patch": "@@ -350,13 +350,13 @@ impl EarlyLintPass for LiteralDigitGrouping {\n         }\n \n         if let ExprKind::Lit(ref lit) = expr.kind {\n-            self.check_lit(cx, lit)\n+            Self::check_lit(cx, lit)\n         }\n     }\n }\n \n impl LiteralDigitGrouping {\n-    fn check_lit(self, cx: &EarlyContext<'_>, lit: &Lit) {\n+    fn check_lit(cx: &EarlyContext<'_>, lit: &Lit) {\n         let in_macro = in_macro(lit.span);\n         match lit.kind {\n             LitKind::Int(..) => {"}, {"sha": "2f43daf4caf78259035919cf9c5877bed205a87c", "filename": "clippy_lints/src/misc_early.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/664522baddd813e9a8a989479289be43fe0da5cd/clippy_lints%2Fsrc%2Fmisc_early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664522baddd813e9a8a989479289be43fe0da5cd/clippy_lints%2Fsrc%2Fmisc_early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early.rs?ref=664522baddd813e9a8a989479289be43fe0da5cd", "patch": "@@ -437,7 +437,7 @@ impl EarlyLintPass for MiscEarlyLints {\n                     );\n                 }\n             },\n-            ExprKind::Lit(ref lit) => self.check_lit(cx, lit),\n+            ExprKind::Lit(ref lit) => Self::check_lit(cx, lit),\n             _ => (),\n         }\n     }\n@@ -469,7 +469,7 @@ impl EarlyLintPass for MiscEarlyLints {\n }\n \n impl MiscEarlyLints {\n-    fn check_lit(self, cx: &EarlyContext<'_>, lit: &Lit) {\n+    fn check_lit(cx: &EarlyContext<'_>, lit: &Lit) {\n         // We test if first character in snippet is a number, because the snippet could be an expansion\n         // from a built-in macro like `line!()` or a proc-macro like `#[wasm_bindgen]`.\n         // Note that this check also covers special case that `line!()` is eagerly expanded by compiler."}, {"sha": "5ed95a674b73fcd08cc77b7903bb01f505a0bb6a", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/664522baddd813e9a8a989479289be43fe0da5cd/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664522baddd813e9a8a989479289be43fe0da5cd/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=664522baddd813e9a8a989479289be43fe0da5cd", "patch": "@@ -117,7 +117,7 @@ impl Return {\n             ast::ExprKind::Ret(ref inner) => {\n                 // allow `#[cfg(a)] return a; #[cfg(b)] return b;`\n                 if !expr.attrs.iter().any(attr_is_cfg) {\n-                    self.emit_return_lint(\n+                    Self::emit_return_lint(\n                         cx,\n                         span.expect(\"`else return` is not possible\"),\n                         inner.as_ref().map(|i| i.span),\n@@ -146,13 +146,7 @@ impl Return {\n         }\n     }\n \n-    fn emit_return_lint(\n-        &mut self,\n-        cx: &EarlyContext<'_>,\n-        ret_span: Span,\n-        inner_span: Option<Span>,\n-        replacement: RetReplacement,\n-    ) {\n+    fn emit_return_lint(cx: &EarlyContext<'_>, ret_span: Span, inner_span: Option<Span>, replacement: RetReplacement) {\n         match inner_span {\n             Some(inner_span) => {\n                 if in_external_macro(cx.sess(), inner_span) || inner_span.from_expansion() {\n@@ -191,7 +185,7 @@ impl Return {\n     }\n \n     // Check for \"let x = EXPR; x\"\n-    fn check_let_return(&mut self, cx: &EarlyContext<'_>, block: &ast::Block) {\n+    fn check_let_return(cx: &EarlyContext<'_>, block: &ast::Block) {\n         let mut it = block.stmts.iter();\n \n         // we need both a let-binding stmt and an expr\n@@ -275,7 +269,7 @@ impl EarlyLintPass for Return {\n     }\n \n     fn check_block(&mut self, cx: &EarlyContext<'_>, block: &ast::Block) {\n-        self.check_let_return(cx, block);\n+        Self::check_let_return(cx, block);\n         if_chain! {\n             if let Some(ref stmt) = block.stmts.last();\n             if let ast::StmtKind::Expr(ref expr) = stmt.kind;"}, {"sha": "41d8980e7463178bbdd85136af09d570ade84dde", "filename": "clippy_lints/src/slow_vector_initialization.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/664522baddd813e9a8a989479289be43fe0da5cd/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664522baddd813e9a8a989479289be43fe0da5cd/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs?ref=664522baddd813e9a8a989479289be43fe0da5cd", "patch": "@@ -244,7 +244,7 @@ impl<'a, 'tcx> VectorInitializationVisitor<'a, 'tcx> {\n \n             // Check that take is applied to `repeat(0)`\n             if let Some(ref repeat_expr) = take_args.get(0);\n-            if self.is_repeat_zero(repeat_expr);\n+            if Self::is_repeat_zero(repeat_expr);\n \n             // Check that len expression is equals to `with_capacity` expression\n             if let Some(ref len_arg) = take_args.get(1);\n@@ -259,7 +259,7 @@ impl<'a, 'tcx> VectorInitializationVisitor<'a, 'tcx> {\n     }\n \n     /// Returns `true` if given expression is `repeat(0)`\n-    fn is_repeat_zero(&self, expr: &Expr) -> bool {\n+    fn is_repeat_zero(expr: &Expr) -> bool {\n         if_chain! {\n             if let ExprKind::Call(ref fn_expr, ref repeat_args) = expr.kind;\n             if let ExprKind::Path(ref qpath_repeat) = fn_expr.kind;"}, {"sha": "42644b88accfa60d550168ec2ae60a9d77d68665", "filename": "clippy_lints/src/unused_self.rs", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/664522baddd813e9a8a989479289be43fe0da5cd/clippy_lints%2Fsrc%2Funused_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664522baddd813e9a8a989479289be43fe0da5cd/clippy_lints%2Fsrc%2Funused_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_self.rs?ref=664522baddd813e9a8a989479289be43fe0da5cd", "patch": "@@ -0,0 +1,104 @@\n+use if_chain::if_chain;\n+use rustc::hir::def::Res;\n+use rustc::hir::intravisit::{walk_path, NestedVisitorMap, Visitor};\n+use rustc::hir::{AssocItemKind, HirId, ImplItemKind, ImplItemRef, Item, ItemKind, Path};\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n+\n+use crate::utils::span_help_and_lint;\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks methods that contain a `self` argument but don't use it\n+    ///\n+    /// **Why is this bad?** It may be clearer to define the method as a static function instead\n+    /// of an instance method if it doesn't require `self`.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    /// ```rust,ignore\n+    /// struct A;\n+    /// impl A {\n+    ///     fn method(&self) {}\n+    /// }\n+    /// ```\n+    ///\n+    /// Could be written:\n+    ///\n+    /// ```rust,ignore\n+    /// struct A;\n+    /// impl A {\n+    ///     fn method() {}\n+    /// }\n+    /// ```\n+    pub UNUSED_SELF,\n+    complexity,\n+    \"methods that contain a `self` argument but don't use it\"\n+}\n+\n+declare_lint_pass!(UnusedSelf => [UNUSED_SELF]);\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedSelf {\n+    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &Item) {\n+        if item.span.from_expansion() {\n+            return;\n+        }\n+        if let ItemKind::Impl(_, _, _, _, None, _, ref impl_item_refs) = item.kind {\n+            for impl_item_ref in impl_item_refs {\n+                if_chain! {\n+                    if let ImplItemRef {\n+                        kind: AssocItemKind::Method { has_self: true },\n+                        ..\n+                    } = impl_item_ref;\n+                    let impl_item = cx.tcx.hir().impl_item(impl_item_ref.id);\n+                    if let ImplItemKind::Method(_, body_id) = &impl_item.kind;\n+                    then {\n+                        // println!(\"Visiting method: {:?}\", impl_item);\n+                        let body = cx.tcx.hir().body(*body_id);\n+                        let self_param = &body.params[0];\n+                        let self_hir_id = self_param.pat.hir_id;\n+                        let visitor = &mut UnusedSelfVisitor {\n+                            cx,\n+                            uses_self: false,\n+                            self_hir_id: &self_hir_id,\n+                        };\n+                        visitor.visit_body(body);\n+                        if !visitor.uses_self {\n+                            // println!(\"LINTING SPAN: {:?}\", &self_param.span);\n+                            span_help_and_lint(\n+                                cx,\n+                                UNUSED_SELF,\n+                                self_param.span,\n+                                \"unused `self` argument\",\n+                                \"consider refactoring to a static method or function\",\n+                            )\n+                        }\n+                    }\n+                }\n+            }\n+        };\n+    }\n+}\n+\n+struct UnusedSelfVisitor<'a, 'tcx> {\n+    cx: &'a LateContext<'a, 'tcx>,\n+    uses_self: bool,\n+    self_hir_id: &'a HirId,\n+}\n+\n+impl<'a, 'tcx> Visitor<'tcx> for UnusedSelfVisitor<'a, 'tcx> {\n+    fn visit_path(&mut self, path: &'tcx Path, _id: HirId) {\n+        if self.uses_self {\n+            // This function already uses `self`\n+            return;\n+        }\n+        if let Res::Local(hir_id) = &path.res {\n+            self.uses_self = self.self_hir_id == hir_id\n+        }\n+        walk_path(self, path);\n+    }\n+\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+        NestedVisitorMap::All(&self.cx.tcx.hir())\n+    }\n+}"}, {"sha": "0e8fcf8fd0fcf6f4cf0c7deb827a50f2f5460e6d", "filename": "clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/664522baddd813e9a8a989479289be43fe0da5cd/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664522baddd813e9a8a989479289be43fe0da5cd/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=664522baddd813e9a8a989479289be43fe0da5cd", "patch": "@@ -169,13 +169,13 @@ impl<'a, 'tcx> SpanlessEq<'a, 'tcx> {\n \n     fn eq_generic_arg(&mut self, left: &GenericArg, right: &GenericArg) -> bool {\n         match (left, right) {\n-            (GenericArg::Lifetime(l_lt), GenericArg::Lifetime(r_lt)) => self.eq_lifetime(l_lt, r_lt),\n+            (GenericArg::Lifetime(l_lt), GenericArg::Lifetime(r_lt)) => Self::eq_lifetime(l_lt, r_lt),\n             (GenericArg::Type(l_ty), GenericArg::Type(r_ty)) => self.eq_ty(l_ty, r_ty),\n             _ => false,\n         }\n     }\n \n-    fn eq_lifetime(&mut self, left: &Lifetime, right: &Lifetime) -> bool {\n+    fn eq_lifetime(left: &Lifetime, right: &Lifetime) -> bool {\n         left.name == right.name\n     }\n "}, {"sha": "f52d3d8650ab4ef0b3c58c1f05fcb60518377464", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/664522baddd813e9a8a989479289be43fe0da5cd/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664522baddd813e9a8a989479289be43fe0da5cd/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=664522baddd813e9a8a989479289be43fe0da5cd", "patch": "@@ -6,7 +6,7 @@ pub use lint::Lint;\n pub use lint::LINT_LEVELS;\n \n // begin lint list, do not remove this comment, it\u2019s used in `update_lints`\n-pub const ALL_LINTS: [Lint; 324] = [\n+pub const ALL_LINTS: [Lint; 325] = [\n     Lint {\n         name: \"absurd_extreme_comparisons\",\n         group: \"correctness\",\n@@ -2086,6 +2086,13 @@ pub const ALL_LINTS: [Lint; 324] = [\n         deprecation: None,\n         module: \"unused_label\",\n     },\n+    Lint {\n+        name: \"unused_self\",\n+        group: \"complexity\",\n+        desc: \"methods that contain a `self` argument but don\\'t use it\",\n+        deprecation: None,\n+        module: \"unused_self\",\n+    },\n     Lint {\n         name: \"unused_unit\",\n         group: \"style\","}, {"sha": "a2d9860b6a499713f37da3a26cab4e91abf3f6c3", "filename": "tests/ui/booleans.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbooleans.rs?ref=664522baddd813e9a8a989479289be43fe0da5cd", "patch": "@@ -1,4 +1,5 @@\n #![warn(clippy::nonminimal_bool, clippy::logic_bug)]\n+#![allow(clippy::unused_self)]\n \n #[allow(unused, clippy::many_single_char_names)]\n fn main() {"}, {"sha": "f77d7cb7415d46071d9347c4b4a4e2d5e228c500", "filename": "tests/ui/booleans.stderr", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Fbooleans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Fbooleans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbooleans.stderr?ref=664522baddd813e9a8a989479289be43fe0da5cd", "patch": "@@ -1,74 +1,74 @@\n error: this boolean expression contains a logic bug\n-  --> $DIR/booleans.rs:10:13\n+  --> $DIR/booleans.rs:11:13\n    |\n LL |     let _ = a && b || a;\n    |             ^^^^^^^^^^^ help: it would look like the following: `a`\n    |\n    = note: `-D clippy::logic-bug` implied by `-D warnings`\n help: this expression can be optimized out by applying boolean operations to the outer expression\n-  --> $DIR/booleans.rs:10:18\n+  --> $DIR/booleans.rs:11:18\n    |\n LL |     let _ = a && b || a;\n    |                  ^\n \n error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:12:13\n+  --> $DIR/booleans.rs:13:13\n    |\n LL |     let _ = !true;\n    |             ^^^^^ help: try: `false`\n    |\n    = note: `-D clippy::nonminimal-bool` implied by `-D warnings`\n \n error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:13:13\n+  --> $DIR/booleans.rs:14:13\n    |\n LL |     let _ = !false;\n    |             ^^^^^^ help: try: `true`\n \n error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:14:13\n+  --> $DIR/booleans.rs:15:13\n    |\n LL |     let _ = !!a;\n    |             ^^^ help: try: `a`\n \n error: this boolean expression contains a logic bug\n-  --> $DIR/booleans.rs:15:13\n+  --> $DIR/booleans.rs:16:13\n    |\n LL |     let _ = false && a;\n    |             ^^^^^^^^^^ help: it would look like the following: `false`\n    |\n help: this expression can be optimized out by applying boolean operations to the outer expression\n-  --> $DIR/booleans.rs:15:22\n+  --> $DIR/booleans.rs:16:22\n    |\n LL |     let _ = false && a;\n    |                      ^\n \n error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:16:13\n+  --> $DIR/booleans.rs:17:13\n    |\n LL |     let _ = false || a;\n    |             ^^^^^^^^^^ help: try: `a`\n \n error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:21:13\n+  --> $DIR/booleans.rs:22:13\n    |\n LL |     let _ = !(!a && b);\n    |             ^^^^^^^^^^ help: try: `!b || a`\n \n error: this boolean expression contains a logic bug\n-  --> $DIR/booleans.rs:31:13\n+  --> $DIR/booleans.rs:32:13\n    |\n LL |     let _ = a == b && a != b;\n    |             ^^^^^^^^^^^^^^^^ help: it would look like the following: `false`\n    |\n help: this expression can be optimized out by applying boolean operations to the outer expression\n-  --> $DIR/booleans.rs:31:13\n+  --> $DIR/booleans.rs:32:13\n    |\n LL |     let _ = a == b && a != b;\n    |             ^^^^^^\n \n error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:32:13\n+  --> $DIR/booleans.rs:33:13\n    |\n LL |     let _ = a == b && c == 5 && a == b;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -80,7 +80,7 @@ LL |     let _ = !(c != 5 || a != b);\n    |             ^^^^^^^^^^^^^^^^^^^\n \n error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:33:13\n+  --> $DIR/booleans.rs:34:13\n    |\n LL |     let _ = a == b && c == 5 && b == a;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -92,31 +92,31 @@ LL |     let _ = !(c != 5 || a != b);\n    |             ^^^^^^^^^^^^^^^^^^^\n \n error: this boolean expression contains a logic bug\n-  --> $DIR/booleans.rs:34:13\n+  --> $DIR/booleans.rs:35:13\n    |\n LL |     let _ = a < b && a >= b;\n    |             ^^^^^^^^^^^^^^^ help: it would look like the following: `false`\n    |\n help: this expression can be optimized out by applying boolean operations to the outer expression\n-  --> $DIR/booleans.rs:34:13\n+  --> $DIR/booleans.rs:35:13\n    |\n LL |     let _ = a < b && a >= b;\n    |             ^^^^^\n \n error: this boolean expression contains a logic bug\n-  --> $DIR/booleans.rs:35:13\n+  --> $DIR/booleans.rs:36:13\n    |\n LL |     let _ = a > b && a <= b;\n    |             ^^^^^^^^^^^^^^^ help: it would look like the following: `false`\n    |\n help: this expression can be optimized out by applying boolean operations to the outer expression\n-  --> $DIR/booleans.rs:35:13\n+  --> $DIR/booleans.rs:36:13\n    |\n LL |     let _ = a > b && a <= b;\n    |             ^^^^^\n \n error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:37:13\n+  --> $DIR/booleans.rs:38:13\n    |\n LL |     let _ = a != b || !(a != b || c == d);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -128,73 +128,73 @@ LL |     let _ = !(a == b && c == d);\n    |             ^^^^^^^^^^^^^^^^^^^\n \n error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:45:13\n+  --> $DIR/booleans.rs:46:13\n    |\n LL |     let _ = !a.is_some();\n    |             ^^^^^^^^^^^^ help: try: `a.is_none()`\n \n error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:47:13\n+  --> $DIR/booleans.rs:48:13\n    |\n LL |     let _ = !a.is_none();\n    |             ^^^^^^^^^^^^ help: try: `a.is_some()`\n \n error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:49:13\n+  --> $DIR/booleans.rs:50:13\n    |\n LL |     let _ = !b.is_err();\n    |             ^^^^^^^^^^^ help: try: `b.is_ok()`\n \n error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:51:13\n+  --> $DIR/booleans.rs:52:13\n    |\n LL |     let _ = !b.is_ok();\n    |             ^^^^^^^^^^ help: try: `b.is_err()`\n \n error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:53:13\n+  --> $DIR/booleans.rs:54:13\n    |\n LL |     let _ = !(a.is_some() && !c);\n    |             ^^^^^^^^^^^^^^^^^^^^ help: try: `c || a.is_none()`\n \n error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:54:26\n+  --> $DIR/booleans.rs:55:26\n    |\n LL |     let _ = !(!c ^ c) || !a.is_some();\n    |                          ^^^^^^^^^^^^ help: try: `a.is_none()`\n \n error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:55:25\n+  --> $DIR/booleans.rs:56:25\n    |\n LL |     let _ = (!c ^ c) || !a.is_some();\n    |                         ^^^^^^^^^^^^ help: try: `a.is_none()`\n \n error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:56:23\n+  --> $DIR/booleans.rs:57:23\n    |\n LL |     let _ = !c ^ c || !a.is_some();\n    |                       ^^^^^^^^^^^^ help: try: `a.is_none()`\n \n error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:128:8\n+  --> $DIR/booleans.rs:129:8\n    |\n LL |     if !res.is_ok() {}\n    |        ^^^^^^^^^^^^ help: try: `res.is_err()`\n \n error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:129:8\n+  --> $DIR/booleans.rs:130:8\n    |\n LL |     if !res.is_err() {}\n    |        ^^^^^^^^^^^^^ help: try: `res.is_ok()`\n \n error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:132:8\n+  --> $DIR/booleans.rs:133:8\n    |\n LL |     if !res.is_some() {}\n    |        ^^^^^^^^^^^^^^ help: try: `res.is_none()`\n \n error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:133:8\n+  --> $DIR/booleans.rs:134:8\n    |\n LL |     if !res.is_none() {}\n    |        ^^^^^^^^^^^^^^ help: try: `res.is_some()`"}, {"sha": "343c12af6b4a184c4c1d3741e0f556d081af3ee8", "filename": "tests/ui/complex_types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Fcomplex_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Fcomplex_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcomplex_types.rs?ref=664522baddd813e9a8a989479289be43fe0da5cd", "patch": "@@ -1,5 +1,5 @@\n #![warn(clippy::all)]\n-#![allow(unused, clippy::needless_pass_by_value, clippy::vec_box)]\n+#![allow(unused, clippy::needless_pass_by_value, clippy::vec_box, clippy::unused_self)]\n #![feature(associated_type_defaults)]\n \n type Alias = Vec<Vec<Box<(u32, u32, u32, u32)>>>; // no warning here"}, {"sha": "d02518b47f0e23fcf60d5d13270a0c709a84072d", "filename": "tests/ui/def_id_nocore.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Fdef_id_nocore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Fdef_id_nocore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdef_id_nocore.rs?ref=664522baddd813e9a8a989479289be43fe0da5cd", "patch": "@@ -22,6 +22,7 @@ fn start(_argc: isize, _argv: *const *const u8) -> isize {\n \n pub struct A;\n \n+#[allow(clippy::unused_self)]\n impl A {\n     pub fn as_ref(self) -> &'static str {\n         \"A\""}, {"sha": "829462639218f8795f21127e2af20f31d1ca6096", "filename": "tests/ui/def_id_nocore.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Fdef_id_nocore.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Fdef_id_nocore.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdef_id_nocore.stderr?ref=664522baddd813e9a8a989479289be43fe0da5cd", "patch": "@@ -1,5 +1,5 @@\n error: methods called `as_*` usually take self by reference or self by mutable reference; consider choosing a less ambiguous name\n-  --> $DIR/def_id_nocore.rs:26:19\n+  --> $DIR/def_id_nocore.rs:27:19\n    |\n LL |     pub fn as_ref(self) -> &'static str {\n    |                   ^^^^"}, {"sha": "5b42738a6dd7d57df6726a3f2baed675c88b806b", "filename": "tests/ui/diverging_sub_expression.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Fdiverging_sub_expression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Fdiverging_sub_expression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdiverging_sub_expression.rs?ref=664522baddd813e9a8a989479289be43fe0da5cd", "patch": "@@ -1,6 +1,6 @@\n #![feature(never_type)]\n #![warn(clippy::diverging_sub_expression)]\n-#![allow(clippy::match_same_arms, clippy::logic_bug)]\n+#![allow(clippy::match_same_arms, clippy::logic_bug, clippy::unused_self)]\n \n #[allow(clippy::empty_loop)]\n fn diverge() -> ! {"}, {"sha": "e3b286e1445eac3c22dc1deaec5966c3d21ae8d7", "filename": "tests/ui/eta.fixed", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Feta.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Feta.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.fixed?ref=664522baddd813e9a8a989479289be43fe0da5cd", "patch": "@@ -7,7 +7,8 @@\n     clippy::many_single_char_names,\n     clippy::needless_pass_by_value,\n     clippy::option_map_unit_fn,\n-    clippy::trivially_copy_pass_by_ref\n+    clippy::trivially_copy_pass_by_ref,\n+    clippy::unused_self\n )]\n #![warn(\n     clippy::redundant_closure,"}, {"sha": "e3742259f9bbff884d6103c824c1a5518995cd92", "filename": "tests/ui/eta.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Feta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Feta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.rs?ref=664522baddd813e9a8a989479289be43fe0da5cd", "patch": "@@ -7,7 +7,8 @@\n     clippy::many_single_char_names,\n     clippy::needless_pass_by_value,\n     clippy::option_map_unit_fn,\n-    clippy::trivially_copy_pass_by_ref\n+    clippy::trivially_copy_pass_by_ref,\n+    clippy::unused_self\n )]\n #![warn(\n     clippy::redundant_closure,"}, {"sha": "1742239e87aac7a78cb21ad99b90fd58405039d3", "filename": "tests/ui/eta.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Feta.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Feta.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.stderr?ref=664522baddd813e9a8a989479289be43fe0da5cd", "patch": "@@ -1,77 +1,77 @@\n error: redundant closure found\n-  --> $DIR/eta.rs:21:27\n+  --> $DIR/eta.rs:22:27\n    |\n LL |     let a = Some(1u8).map(|a| foo(a));\n    |                           ^^^^^^^^^^ help: remove closure as shown: `foo`\n    |\n    = note: `-D clippy::redundant-closure` implied by `-D warnings`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:22:10\n+  --> $DIR/eta.rs:23:10\n    |\n LL |     meta(|a| foo(a));\n    |          ^^^^^^^^^^ help: remove closure as shown: `foo`\n \n error: this expression borrows a reference that is immediately dereferenced by the compiler\n-  --> $DIR/eta.rs:25:21\n+  --> $DIR/eta.rs:26:21\n    |\n LL |     all(&[1, 2, 3], &&2, |x, y| below(x, y)); //is adjusted\n    |                     ^^^ help: change this to: `&2`\n    |\n    = note: `-D clippy::needless-borrow` implied by `-D warnings`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:32:27\n+  --> $DIR/eta.rs:33:27\n    |\n LL |     let e = Some(1u8).map(|a| generic(a));\n    |                           ^^^^^^^^^^^^^^ help: remove closure as shown: `generic`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:75:51\n+  --> $DIR/eta.rs:76:51\n    |\n LL |     let e = Some(TestStruct { some_ref: &i }).map(|a| a.foo());\n    |                                                   ^^^^^^^^^^^ help: remove closure as shown: `TestStruct::foo`\n    |\n    = note: `-D clippy::redundant-closure-for-method-calls` implied by `-D warnings`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:77:51\n+  --> $DIR/eta.rs:78:51\n    |\n LL |     let e = Some(TestStruct { some_ref: &i }).map(|a| a.trait_foo());\n    |                                                   ^^^^^^^^^^^^^^^^^ help: remove closure as shown: `TestTrait::trait_foo`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:80:42\n+  --> $DIR/eta.rs:81:42\n    |\n LL |     let e = Some(&mut vec![1, 2, 3]).map(|v| v.clear());\n    |                                          ^^^^^^^^^^^^^ help: remove closure as shown: `std::vec::Vec::clear`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:85:29\n+  --> $DIR/eta.rs:86:29\n    |\n LL |     let e = Some(\"str\").map(|s| s.to_string());\n    |                             ^^^^^^^^^^^^^^^^^ help: remove closure as shown: `std::string::ToString::to_string`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:87:27\n+  --> $DIR/eta.rs:88:27\n    |\n LL |     let e = Some('a').map(|s| s.to_uppercase());\n    |                           ^^^^^^^^^^^^^^^^^^^^ help: remove closure as shown: `char::to_uppercase`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:90:65\n+  --> $DIR/eta.rs:91:65\n    |\n LL |     let e: std::vec::Vec<char> = vec!['a', 'b', 'c'].iter().map(|c| c.to_ascii_uppercase()).collect();\n    |                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove closure as shown: `char::to_ascii_uppercase`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:173:27\n+  --> $DIR/eta.rs:174:27\n    |\n LL |     let a = Some(1u8).map(|a| foo_ptr(a));\n    |                           ^^^^^^^^^^^^^^ help: remove closure as shown: `foo_ptr`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:178:27\n+  --> $DIR/eta.rs:179:27\n    |\n LL |     let a = Some(1u8).map(|a| closure(a));\n    |                           ^^^^^^^^^^^^^^ help: remove closure as shown: `closure`"}, {"sha": "59b9a19d70664a1ebda9de65a1ee14385270b6e8", "filename": "tests/ui/expect_fun_call.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Fexpect_fun_call.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Fexpect_fun_call.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexpect_fun_call.fixed?ref=664522baddd813e9a8a989479289be43fe0da5cd", "patch": "@@ -1,5 +1,6 @@\n // run-rustfix\n \n+#![allow(clippy::unused_self)]\n #![warn(clippy::expect_fun_call)]\n \n /// Checks implementation of the `EXPECT_FUN_CALL` lint"}, {"sha": "06d12fb5f49352f99caf0048737fdce488dac716", "filename": "tests/ui/expect_fun_call.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Fexpect_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Fexpect_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexpect_fun_call.rs?ref=664522baddd813e9a8a989479289be43fe0da5cd", "patch": "@@ -1,5 +1,6 @@\n // run-rustfix\n \n+#![allow(clippy::unused_self)]\n #![warn(clippy::expect_fun_call)]\n \n /// Checks implementation of the `EXPECT_FUN_CALL` lint"}, {"sha": "033698c786241ef253d34e7675f4daccba5cf210", "filename": "tests/ui/expect_fun_call.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Fexpect_fun_call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Fexpect_fun_call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexpect_fun_call.stderr?ref=664522baddd813e9a8a989479289be43fe0da5cd", "patch": "@@ -1,67 +1,67 @@\n error: use of `expect` followed by a function call\n-  --> $DIR/expect_fun_call.rs:28:26\n+  --> $DIR/expect_fun_call.rs:29:26\n    |\n LL |     with_none_and_format.expect(&format!(\"Error {}: fake error\", error_code));\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| panic!(\"Error {}: fake error\", error_code))`\n    |\n    = note: `-D clippy::expect-fun-call` implied by `-D warnings`\n \n error: use of `expect` followed by a function call\n-  --> $DIR/expect_fun_call.rs:31:26\n+  --> $DIR/expect_fun_call.rs:32:26\n    |\n LL |     with_none_and_as_str.expect(format!(\"Error {}: fake error\", error_code).as_str());\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| panic!(\"Error {}: fake error\", error_code))`\n \n error: use of `expect` followed by a function call\n-  --> $DIR/expect_fun_call.rs:41:25\n+  --> $DIR/expect_fun_call.rs:42:25\n    |\n LL |     with_err_and_format.expect(&format!(\"Error {}: fake error\", error_code));\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|_| panic!(\"Error {}: fake error\", error_code))`\n \n error: use of `expect` followed by a function call\n-  --> $DIR/expect_fun_call.rs:44:25\n+  --> $DIR/expect_fun_call.rs:45:25\n    |\n LL |     with_err_and_as_str.expect(format!(\"Error {}: fake error\", error_code).as_str());\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|_| panic!(\"Error {}: fake error\", error_code))`\n \n error: use of `expect` followed by a function call\n-  --> $DIR/expect_fun_call.rs:56:17\n+  --> $DIR/expect_fun_call.rs:57:17\n    |\n LL |     Some(\"foo\").expect(format!(\"{} {}\", 1, 2).as_ref());\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| panic!(\"{} {}\", 1, 2))`\n \n error: use of `expect` followed by a function call\n-  --> $DIR/expect_fun_call.rs:77:21\n+  --> $DIR/expect_fun_call.rs:78:21\n    |\n LL |         Some(\"foo\").expect(&get_string());\n    |                     ^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| { panic!(get_string()) })`\n \n error: use of `expect` followed by a function call\n-  --> $DIR/expect_fun_call.rs:78:21\n+  --> $DIR/expect_fun_call.rs:79:21\n    |\n LL |         Some(\"foo\").expect(get_string().as_ref());\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| { panic!(get_string()) })`\n \n error: use of `expect` followed by a function call\n-  --> $DIR/expect_fun_call.rs:79:21\n+  --> $DIR/expect_fun_call.rs:80:21\n    |\n LL |         Some(\"foo\").expect(get_string().as_str());\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| { panic!(get_string()) })`\n \n error: use of `expect` followed by a function call\n-  --> $DIR/expect_fun_call.rs:81:21\n+  --> $DIR/expect_fun_call.rs:82:21\n    |\n LL |         Some(\"foo\").expect(get_static_str());\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| { panic!(get_static_str()) })`\n \n error: use of `expect` followed by a function call\n-  --> $DIR/expect_fun_call.rs:82:21\n+  --> $DIR/expect_fun_call.rs:83:21\n    |\n LL |         Some(\"foo\").expect(get_non_static_str(&0));\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| { panic!(get_non_static_str(&0).to_string()) })`\n \n error: use of `expect` followed by a function call\n-  --> $DIR/expect_fun_call.rs:86:16\n+  --> $DIR/expect_fun_call.rs:87:16\n    |\n LL |     Some(true).expect(&format!(\"key {}, {}\", 1, 2));\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| panic!(\"key {}, {}\", 1, 2))`"}, {"sha": "09fb810d1ce505cf26fea7219e72a1c9195b6dea", "filename": "tests/ui/extra_unused_lifetimes.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Fextra_unused_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Fextra_unused_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fextra_unused_lifetimes.rs?ref=664522baddd813e9a8a989479289be43fe0da5cd", "patch": "@@ -3,7 +3,8 @@\n     dead_code,\n     clippy::needless_lifetimes,\n     clippy::needless_pass_by_value,\n-    clippy::trivially_copy_pass_by_ref\n+    clippy::trivially_copy_pass_by_ref,\n+    clippy::unused_self\n )]\n #![warn(clippy::extra_unused_lifetimes)]\n "}, {"sha": "173f79c97dcf5c02251060237ff20a7c6b67f2b2", "filename": "tests/ui/extra_unused_lifetimes.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Fextra_unused_lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Fextra_unused_lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fextra_unused_lifetimes.stderr?ref=664522baddd813e9a8a989479289be43fe0da5cd", "patch": "@@ -1,25 +1,25 @@\n error: this lifetime isn't used in the function definition\n-  --> $DIR/extra_unused_lifetimes.rs:14:14\n+  --> $DIR/extra_unused_lifetimes.rs:15:14\n    |\n LL | fn unused_lt<'a>(x: u8) {}\n    |              ^^\n    |\n    = note: `-D clippy::extra-unused-lifetimes` implied by `-D warnings`\n \n error: this lifetime isn't used in the function definition\n-  --> $DIR/extra_unused_lifetimes.rs:16:25\n+  --> $DIR/extra_unused_lifetimes.rs:17:25\n    |\n LL | fn unused_lt_transitive<'a, 'b: 'a>(x: &'b u8) {\n    |                         ^^\n \n error: this lifetime isn't used in the function definition\n-  --> $DIR/extra_unused_lifetimes.rs:41:10\n+  --> $DIR/extra_unused_lifetimes.rs:42:10\n    |\n LL |     fn x<'a>(&self) {}\n    |          ^^\n \n error: this lifetime isn't used in the function definition\n-  --> $DIR/extra_unused_lifetimes.rs:67:22\n+  --> $DIR/extra_unused_lifetimes.rs:68:22\n    |\n LL |         fn unused_lt<'a>(x: u8) {}\n    |                      ^^"}, {"sha": "c4d48974a3bda73831975eeca85448616441d3b4", "filename": "tests/ui/functions.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Ffunctions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Ffunctions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffunctions.stderr?ref=664522baddd813e9a8a989479289be43fe0da5cd", "patch": "@@ -1,13 +1,13 @@\n error: this function has too many arguments (8/7)\n-  --> $DIR/functions.rs:8:1\n+  --> $DIR/functions.rs:7:1\n    |\n LL | fn bad(_one: u32, _two: u32, _three: &str, _four: bool, _five: f32, _six: f32, _seven: bool, _eight: ()) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::too-many-arguments` implied by `-D warnings`\n \n error: this function has too many arguments (8/7)\n-  --> $DIR/functions.rs:11:1\n+  --> $DIR/functions.rs:10:1\n    |\n LL | / fn bad_multiline(\n LL | |     one: u32,\n@@ -19,69 +19,69 @@ LL | | ) {\n    | |__^\n \n error: this function has too many arguments (8/7)\n-  --> $DIR/functions.rs:45:5\n+  --> $DIR/functions.rs:44:5\n    |\n LL |     fn bad(_one: u32, _two: u32, _three: &str, _four: bool, _five: f32, _six: f32, _seven: bool, _eight: ());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: this function has too many arguments (8/7)\n-  --> $DIR/functions.rs:54:5\n+  --> $DIR/functions.rs:53:5\n    |\n LL |     fn bad_method(_one: u32, _two: u32, _three: &str, _four: bool, _five: f32, _six: f32, _seven: bool, _eight: ()) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: this public function dereferences a raw pointer but is not marked `unsafe`\n-  --> $DIR/functions.rs:63:34\n+  --> $DIR/functions.rs:62:34\n    |\n LL |         println!(\"{}\", unsafe { *p });\n    |                                  ^\n    |\n    = note: `-D clippy::not-unsafe-ptr-arg-deref` implied by `-D warnings`\n \n error: this public function dereferences a raw pointer but is not marked `unsafe`\n-  --> $DIR/functions.rs:64:35\n+  --> $DIR/functions.rs:63:35\n    |\n LL |         println!(\"{:?}\", unsafe { p.as_ref() });\n    |                                   ^\n \n error: this public function dereferences a raw pointer but is not marked `unsafe`\n-  --> $DIR/functions.rs:65:33\n+  --> $DIR/functions.rs:64:33\n    |\n LL |         unsafe { std::ptr::read(p) };\n    |                                 ^\n \n error: this public function dereferences a raw pointer but is not marked `unsafe`\n-  --> $DIR/functions.rs:76:30\n+  --> $DIR/functions.rs:75:30\n    |\n LL |     println!(\"{}\", unsafe { *p });\n    |                              ^\n \n error: this public function dereferences a raw pointer but is not marked `unsafe`\n-  --> $DIR/functions.rs:77:31\n+  --> $DIR/functions.rs:76:31\n    |\n LL |     println!(\"{:?}\", unsafe { p.as_ref() });\n    |                               ^\n \n error: this public function dereferences a raw pointer but is not marked `unsafe`\n-  --> $DIR/functions.rs:78:29\n+  --> $DIR/functions.rs:77:29\n    |\n LL |     unsafe { std::ptr::read(p) };\n    |                             ^\n \n error: this public function dereferences a raw pointer but is not marked `unsafe`\n-  --> $DIR/functions.rs:87:34\n+  --> $DIR/functions.rs:86:34\n    |\n LL |         println!(\"{}\", unsafe { *p });\n    |                                  ^\n \n error: this public function dereferences a raw pointer but is not marked `unsafe`\n-  --> $DIR/functions.rs:88:35\n+  --> $DIR/functions.rs:87:35\n    |\n LL |         println!(\"{:?}\", unsafe { p.as_ref() });\n    |                                   ^\n \n error: this public function dereferences a raw pointer but is not marked `unsafe`\n-  --> $DIR/functions.rs:89:33\n+  --> $DIR/functions.rs:88:33\n    |\n LL |         unsafe { std::ptr::read(p) };\n    |                                 ^"}, {"sha": "6e9feeeb02aa7019b98f7e2e48dba1b664c30587", "filename": "tests/ui/inherent_to_string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Finherent_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Finherent_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finherent_to_string.rs?ref=664522baddd813e9a8a989479289be43fe0da5cd", "patch": "@@ -1,6 +1,6 @@\n #![warn(clippy::inherent_to_string)]\n #![deny(clippy::inherent_to_string_shadow_display)]\n-#![allow(clippy::many_single_char_names)]\n+#![allow(clippy::many_single_char_names, clippy::unused_self)]\n \n use std::fmt;\n "}, {"sha": "fdc5342fcfd71efb1fc6d61de7559ec1d1d6fc5b", "filename": "tests/ui/iter_nth.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Fiter_nth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Fiter_nth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_nth.rs?ref=664522baddd813e9a8a989479289be43fe0da5cd", "patch": "@@ -1,5 +1,6 @@\n // aux-build:option_helpers.rs\n \n+#![allow(clippy::unused_self)]\n #![warn(clippy::iter_nth)]\n \n #[macro_use]"}, {"sha": "d1ae093e9e483bd5f706ccffbcf551fb7114fbf4", "filename": "tests/ui/iter_nth.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Fiter_nth.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Fiter_nth.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_nth.stderr?ref=664522baddd813e9a8a989479289be43fe0da5cd", "patch": "@@ -1,43 +1,43 @@\n error: called `.iter().nth()` on a Vec. Calling `.get()` is both faster and more readable\n-  --> $DIR/iter_nth.rs:33:23\n+  --> $DIR/iter_nth.rs:34:23\n    |\n LL |         let bad_vec = some_vec.iter().nth(3);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::iter-nth` implied by `-D warnings`\n \n error: called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable\n-  --> $DIR/iter_nth.rs:34:26\n+  --> $DIR/iter_nth.rs:35:26\n    |\n LL |         let bad_slice = &some_vec[..].iter().nth(3);\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable\n-  --> $DIR/iter_nth.rs:35:31\n+  --> $DIR/iter_nth.rs:36:31\n    |\n LL |         let bad_boxed_slice = boxed_slice.iter().nth(3);\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter().nth()` on a VecDeque. Calling `.get()` is both faster and more readable\n-  --> $DIR/iter_nth.rs:36:29\n+  --> $DIR/iter_nth.rs:37:29\n    |\n LL |         let bad_vec_deque = some_vec_deque.iter().nth(3);\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter_mut().nth()` on a Vec. Calling `.get_mut()` is both faster and more readable\n-  --> $DIR/iter_nth.rs:41:23\n+  --> $DIR/iter_nth.rs:42:23\n    |\n LL |         let bad_vec = some_vec.iter_mut().nth(3);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter_mut().nth()` on a slice. Calling `.get_mut()` is both faster and more readable\n-  --> $DIR/iter_nth.rs:44:26\n+  --> $DIR/iter_nth.rs:45:26\n    |\n LL |         let bad_slice = &some_vec[..].iter_mut().nth(3);\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter_mut().nth()` on a VecDeque. Calling `.get_mut()` is both faster and more readable\n-  --> $DIR/iter_nth.rs:47:29\n+  --> $DIR/iter_nth.rs:48:29\n    |\n LL |         let bad_vec_deque = some_vec_deque.iter_mut().nth(3);\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "91f60871151d40d5708f3048b59aedc462ad34d2", "filename": "tests/ui/len_without_is_empty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Flen_without_is_empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Flen_without_is_empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_without_is_empty.rs?ref=664522baddd813e9a8a989479289be43fe0da5cd", "patch": "@@ -1,5 +1,5 @@\n #![warn(clippy::len_without_is_empty)]\n-#![allow(dead_code, unused)]\n+#![allow(dead_code, unused, clippy::unused_self)]\n \n pub struct PubOne;\n "}, {"sha": "6ea4639769da8e42b57b837ddf9d64016ab76bfa", "filename": "tests/ui/len_zero.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Flen_zero.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Flen_zero.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_zero.fixed?ref=664522baddd813e9a8a989479289be43fe0da5cd", "patch": "@@ -1,7 +1,7 @@\n // run-rustfix\n \n #![warn(clippy::len_zero)]\n-#![allow(dead_code, unused, clippy::len_without_is_empty)]\n+#![allow(dead_code, unused, clippy::len_without_is_empty, clippy::unused_self)]\n \n pub struct One;\n struct Wither;"}, {"sha": "bfda052d7091fe536de3e5e513be6d08c15a3020", "filename": "tests/ui/len_zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_zero.rs?ref=664522baddd813e9a8a989479289be43fe0da5cd", "patch": "@@ -1,7 +1,7 @@\n // run-rustfix\n \n #![warn(clippy::len_zero)]\n-#![allow(dead_code, unused, clippy::len_without_is_empty)]\n+#![allow(dead_code, unused, clippy::len_without_is_empty, clippy::unused_self)]\n \n pub struct One;\n struct Wither;"}, {"sha": "a7ffe8a0c2da9be353eed2f3b4fdfefd21e44ef4", "filename": "tests/ui/map_unit_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Fmap_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Fmap_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_unit_fn.rs?ref=664522baddd813e9a8a989479289be43fe0da5cd", "patch": "@@ -1,4 +1,4 @@\n-#![allow(unused)]\n+#![allow(unused, clippy::unused_self)]\n struct Mappable {}\n \n impl Mappable {"}, {"sha": "36125620ad2b6775744c701d996f4b3885e4e7e3", "filename": "tests/ui/missing_const_for_fn/cant_be_const.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Fmissing_const_for_fn%2Fcant_be_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Fmissing_const_for_fn%2Fcant_be_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_const_for_fn%2Fcant_be_const.rs?ref=664522baddd813e9a8a989479289be43fe0da5cd", "patch": "@@ -2,6 +2,7 @@\n //! compilation error.\n //! The .stderr output of this test should be empty. Otherwise it's a bug somewhere.\n \n+#![allow(clippy::unused_self)]\n #![warn(clippy::missing_const_for_fn)]\n #![feature(start)]\n "}, {"sha": "24044bfbaff097a88f8535606087f51c29eefbda", "filename": "tests/ui/missing_const_for_fn/could_be_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.rs?ref=664522baddd813e9a8a989479289be43fe0da5cd", "patch": "@@ -1,5 +1,5 @@\n #![warn(clippy::missing_const_for_fn)]\n-#![allow(clippy::let_and_return)]\n+#![allow(clippy::let_and_return, clippy::unused_self)]\n \n use std::mem::transmute;\n "}, {"sha": "bef86daf506e3806307ed1a46488ae23cbd18b3a", "filename": "tests/ui/mut_from_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Fmut_from_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Fmut_from_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_from_ref.rs?ref=664522baddd813e9a8a989479289be43fe0da5cd", "patch": "@@ -1,4 +1,4 @@\n-#![allow(unused, clippy::trivially_copy_pass_by_ref)]\n+#![allow(unused, clippy::trivially_copy_pass_by_ref, clippy::unused_self)]\n #![warn(clippy::mut_from_ref)]\n \n struct Foo;"}, {"sha": "f25b7765945375f824827a334475d158e63b96b0", "filename": "tests/ui/mut_reference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Fmut_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Fmut_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_reference.rs?ref=664522baddd813e9a8a989479289be43fe0da5cd", "patch": "@@ -1,4 +1,4 @@\n-#![allow(unused_variables, clippy::trivially_copy_pass_by_ref)]\n+#![allow(unused_variables, clippy::trivially_copy_pass_by_ref, clippy::unused_self)]\n \n fn takes_an_immutable_reference(a: &i32) {}\n fn takes_a_mutable_reference(a: &mut i32) {}"}, {"sha": "b39a7949eef07dda2331270d5151833ac5e4f634", "filename": "tests/ui/needless_lifetimes.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Fneedless_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Fneedless_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_lifetimes.rs?ref=664522baddd813e9a8a989479289be43fe0da5cd", "patch": "@@ -1,5 +1,10 @@\n #![warn(clippy::needless_lifetimes)]\n-#![allow(dead_code, clippy::needless_pass_by_value, clippy::trivially_copy_pass_by_ref)]\n+#![allow(\n+    dead_code,\n+    clippy::needless_pass_by_value,\n+    clippy::trivially_copy_pass_by_ref,\n+    clippy::unused_self\n+)]\n \n fn distinct_lifetimes<'a, 'b>(_x: &'a u8, _y: &'b u8, _z: u8) {}\n "}, {"sha": "69ce6edfd4639e5eeb36c66d13b6b04f56bde2ae", "filename": "tests/ui/needless_lifetimes.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Fneedless_lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Fneedless_lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_lifetimes.stderr?ref=664522baddd813e9a8a989479289be43fe0da5cd", "patch": "@@ -1,35 +1,35 @@\n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:4:1\n+  --> $DIR/needless_lifetimes.rs:9:1\n    |\n LL | fn distinct_lifetimes<'a, 'b>(_x: &'a u8, _y: &'b u8, _z: u8) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::needless-lifetimes` implied by `-D warnings`\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:6:1\n+  --> $DIR/needless_lifetimes.rs:11:1\n    |\n LL | fn distinct_and_static<'a, 'b>(_x: &'a u8, _y: &'b u8, _z: &'static u8) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:16:1\n+  --> $DIR/needless_lifetimes.rs:21:1\n    |\n LL | / fn in_and_out<'a>(x: &'a u8, _y: u8) -> &'a u8 {\n LL | |     x\n LL | | }\n    | |_^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:45:1\n+  --> $DIR/needless_lifetimes.rs:50:1\n    |\n LL | / fn deep_reference_3<'a>(x: &'a u8, _y: u8) -> Result<&'a u8, ()> {\n LL | |     Ok(x)\n LL | | }\n    | |_^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:50:1\n+  --> $DIR/needless_lifetimes.rs:55:1\n    |\n LL | / fn where_clause_without_lt<'a, T>(x: &'a u8, _y: u8) -> Result<&'a u8, ()>\n LL | | where\n@@ -40,13 +40,13 @@ LL | | }\n    | |_^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:62:1\n+  --> $DIR/needless_lifetimes.rs:67:1\n    |\n LL | fn lifetime_param_2<'a, 'b>(_x: Ref<'a>, _y: &'b u8) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:86:1\n+  --> $DIR/needless_lifetimes.rs:91:1\n    |\n LL | / fn fn_bound_2<'a, F, I>(_m: Lt<'a, I>, _f: F) -> Lt<'a, I>\n LL | | where\n@@ -57,75 +57,75 @@ LL | | }\n    | |_^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:120:5\n+  --> $DIR/needless_lifetimes.rs:125:5\n    |\n LL | /     fn self_and_out<'s>(&'s self) -> &'s u8 {\n LL | |         &self.x\n LL | |     }\n    | |_____^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:129:5\n+  --> $DIR/needless_lifetimes.rs:134:5\n    |\n LL |     fn distinct_self_and_in<'s, 't>(&'s self, _x: &'t u8) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:148:1\n+  --> $DIR/needless_lifetimes.rs:153:1\n    |\n LL | / fn struct_with_lt<'a>(_foo: Foo<'a>) -> &'a str {\n LL | |     unimplemented!()\n LL | | }\n    | |_^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:178:1\n+  --> $DIR/needless_lifetimes.rs:183:1\n    |\n LL | / fn trait_obj_elided2<'a>(_arg: &'a dyn Drop) -> &'a str {\n LL | |     unimplemented!()\n LL | | }\n    | |_^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:184:1\n+  --> $DIR/needless_lifetimes.rs:189:1\n    |\n LL | / fn alias_with_lt<'a>(_foo: FooAlias<'a>) -> &'a str {\n LL | |     unimplemented!()\n LL | | }\n    | |_^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:203:1\n+  --> $DIR/needless_lifetimes.rs:208:1\n    |\n LL | / fn named_input_elided_output<'a>(_arg: &'a str) -> &str {\n LL | |     unimplemented!()\n LL | | }\n    | |_^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:211:1\n+  --> $DIR/needless_lifetimes.rs:216:1\n    |\n LL | / fn trait_bound_ok<'a, T: WithLifetime<'static>>(_: &'a u8, _: T) {\n LL | |     unimplemented!()\n LL | | }\n    | |_^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:247:1\n+  --> $DIR/needless_lifetimes.rs:252:1\n    |\n LL | / fn out_return_type_lts<'a>(e: &'a str) -> Cow<'a> {\n LL | |     unimplemented!()\n LL | | }\n    | |_^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:254:9\n+  --> $DIR/needless_lifetimes.rs:259:9\n    |\n LL |         fn needless_lt<'a>(x: &'a u8) {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:258:9\n+  --> $DIR/needless_lifetimes.rs:263:9\n    |\n LL |         fn needless_lt<'a>(_x: &'a u8) {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "3ee9e32cf43b25bd78980e4113f09f2abd1178e5", "filename": "tests/ui/option_map_unit_fn_fixable.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Foption_map_unit_fn_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Foption_map_unit_fn_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_map_unit_fn_fixable.fixed?ref=664522baddd813e9a8a989479289be43fe0da5cd", "patch": "@@ -1,7 +1,7 @@\n // run-rustfix\n \n #![warn(clippy::option_map_unit_fn)]\n-#![allow(unused)]\n+#![allow(unused, clippy::unused_self)]\n \n fn do_nothing<T>(_: T) {}\n "}, {"sha": "4e1ac8553b5927632b2aa3a2b11c6dfb8cc104ee", "filename": "tests/ui/option_map_unit_fn_fixable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Foption_map_unit_fn_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Foption_map_unit_fn_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_map_unit_fn_fixable.rs?ref=664522baddd813e9a8a989479289be43fe0da5cd", "patch": "@@ -1,7 +1,7 @@\n // run-rustfix\n \n #![warn(clippy::option_map_unit_fn)]\n-#![allow(unused)]\n+#![allow(unused, clippy::unused_self)]\n \n fn do_nothing<T>(_: T) {}\n "}, {"sha": "dec0e3067c3abea5da82acdc19f030639b4b7fed", "filename": "tests/ui/range.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange.rs?ref=664522baddd813e9a8a989479289be43fe0da5cd", "patch": "@@ -1,4 +1,6 @@\n struct NotARange;\n+\n+#[allow(clippy::unused_self)]\n impl NotARange {\n     fn step_by(&self, _: u32) {}\n }"}, {"sha": "0c11592a941f7b379a82488c4c7068dd5eeff39d", "filename": "tests/ui/range.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Frange.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Frange.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange.stderr?ref=664522baddd813e9a8a989479289be43fe0da5cd", "patch": "@@ -1,39 +1,39 @@\n error: Iterator::step_by(0) will panic at runtime\n-  --> $DIR/range.rs:8:13\n+  --> $DIR/range.rs:10:13\n    |\n LL |     let _ = (0..1).step_by(0);\n    |             ^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::iterator-step-by-zero` implied by `-D warnings`\n \n error: Iterator::step_by(0) will panic at runtime\n-  --> $DIR/range.rs:12:13\n+  --> $DIR/range.rs:14:13\n    |\n LL |     let _ = (1..).step_by(0);\n    |             ^^^^^^^^^^^^^^^^\n \n error: Iterator::step_by(0) will panic at runtime\n-  --> $DIR/range.rs:13:13\n+  --> $DIR/range.rs:15:13\n    |\n LL |     let _ = (1..=2).step_by(0);\n    |             ^^^^^^^^^^^^^^^^^^\n \n error: Iterator::step_by(0) will panic at runtime\n-  --> $DIR/range.rs:16:13\n+  --> $DIR/range.rs:18:13\n    |\n LL |     let _ = x.step_by(0);\n    |             ^^^^^^^^^^^^\n \n error: It is more idiomatic to use v1.iter().enumerate()\n-  --> $DIR/range.rs:24:14\n+  --> $DIR/range.rs:26:14\n    |\n LL |     let _x = v1.iter().zip(0..v1.len());\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::range-zip-with-len` implied by `-D warnings`\n \n error: Iterator::step_by(0) will panic at runtime\n-  --> $DIR/range.rs:28:13\n+  --> $DIR/range.rs:30:13\n    |\n LL |     let _ = v1.iter().step_by(2 / 3);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "1a5724d04e69debbd49955e33479170e63fc5f5e", "filename": "tests/ui/result_map_unit_fn_fixable.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Fresult_map_unit_fn_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Fresult_map_unit_fn_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresult_map_unit_fn_fixable.fixed?ref=664522baddd813e9a8a989479289be43fe0da5cd", "patch": "@@ -2,7 +2,7 @@\n \n #![feature(never_type)]\n #![warn(clippy::result_map_unit_fn)]\n-#![allow(unused)]\n+#![allow(unused, clippy::unused_self)]\n \n fn do_nothing<T>(_: T) {}\n "}, {"sha": "4a901fd4d144fabac5801b35aabaea229ef6279f", "filename": "tests/ui/result_map_unit_fn_fixable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Fresult_map_unit_fn_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Fresult_map_unit_fn_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresult_map_unit_fn_fixable.rs?ref=664522baddd813e9a8a989479289be43fe0da5cd", "patch": "@@ -2,7 +2,7 @@\n \n #![feature(never_type)]\n #![warn(clippy::result_map_unit_fn)]\n-#![allow(unused)]\n+#![allow(unused, clippy::unused_self)]\n \n fn do_nothing<T>(_: T) {}\n "}, {"sha": "3e0581ad8c1271bd1cfa23892d2d5a1ac741212e", "filename": "tests/ui/string_extend.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Fstring_extend.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Fstring_extend.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstring_extend.fixed?ref=664522baddd813e9a8a989479289be43fe0da5cd", "patch": "@@ -3,6 +3,7 @@\n #[derive(Copy, Clone)]\n struct HasChars;\n \n+#[allow(clippy::unused_self)]\n impl HasChars {\n     fn chars(self) -> std::str::Chars<'static> {\n         \"HasChars\".chars()"}, {"sha": "2994a86b05a73c8f0c8370d682d99c4f3cb249bc", "filename": "tests/ui/string_extend.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Fstring_extend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Fstring_extend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstring_extend.rs?ref=664522baddd813e9a8a989479289be43fe0da5cd", "patch": "@@ -3,6 +3,7 @@\n #[derive(Copy, Clone)]\n struct HasChars;\n \n+#[allow(clippy::unused_self)]\n impl HasChars {\n     fn chars(self) -> std::str::Chars<'static> {\n         \"HasChars\".chars()"}, {"sha": "669405735b36e93c94db924d7c3403e359757c80", "filename": "tests/ui/string_extend.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Fstring_extend.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Fstring_extend.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstring_extend.stderr?ref=664522baddd813e9a8a989479289be43fe0da5cd", "patch": "@@ -1,19 +1,19 @@\n error: calling `.extend(_.chars())`\n-  --> $DIR/string_extend.rs:18:5\n+  --> $DIR/string_extend.rs:19:5\n    |\n LL |     s.extend(abc.chars());\n    |     ^^^^^^^^^^^^^^^^^^^^^ help: try this: `s.push_str(abc)`\n    |\n    = note: `-D clippy::string-extend-chars` implied by `-D warnings`\n \n error: calling `.extend(_.chars())`\n-  --> $DIR/string_extend.rs:21:5\n+  --> $DIR/string_extend.rs:22:5\n    |\n LL |     s.extend(\"abc\".chars());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `s.push_str(\"abc\")`\n \n error: calling `.extend(_.chars())`\n-  --> $DIR/string_extend.rs:24:5\n+  --> $DIR/string_extend.rs:25:5\n    |\n LL |     s.extend(def.chars());\n    |     ^^^^^^^^^^^^^^^^^^^^^ help: try this: `s.push_str(&def)`"}, {"sha": "b0349ec025012575dc0ff697ee89522960f47889", "filename": "tests/ui/trivially_copy_pass_by_ref.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Ftrivially_copy_pass_by_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Ftrivially_copy_pass_by_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrivially_copy_pass_by_ref.rs?ref=664522baddd813e9a8a989479289be43fe0da5cd", "patch": "@@ -4,7 +4,8 @@\n #![allow(\n     clippy::many_single_char_names,\n     clippy::blacklisted_name,\n-    clippy::redundant_field_names\n+    clippy::redundant_field_names,\n+    clippy::unused_self\n )]\n \n #[derive(Copy, Clone)]"}, {"sha": "03ca7f496fa86e2c89c0eab542585aa3761ab19a", "filename": "tests/ui/trivially_copy_pass_by_ref.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Ftrivially_copy_pass_by_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Ftrivially_copy_pass_by_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrivially_copy_pass_by_ref.stderr?ref=664522baddd813e9a8a989479289be43fe0da5cd", "patch": "@@ -1,91 +1,91 @@\n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:50:11\n+  --> $DIR/trivially_copy_pass_by_ref.rs:51:11\n    |\n LL | fn bad(x: &u32, y: &Foo, z: &Baz) {}\n    |           ^^^^ help: consider passing by value instead: `u32`\n    |\n    = note: `-D clippy::trivially-copy-pass-by-ref` implied by `-D warnings`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:50:20\n+  --> $DIR/trivially_copy_pass_by_ref.rs:51:20\n    |\n LL | fn bad(x: &u32, y: &Foo, z: &Baz) {}\n    |                    ^^^^ help: consider passing by value instead: `Foo`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:50:29\n+  --> $DIR/trivially_copy_pass_by_ref.rs:51:29\n    |\n LL | fn bad(x: &u32, y: &Foo, z: &Baz) {}\n    |                             ^^^^ help: consider passing by value instead: `Baz`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:57:12\n+  --> $DIR/trivially_copy_pass_by_ref.rs:58:12\n    |\n LL |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {}\n    |            ^^^^^ help: consider passing by value instead: `self`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:57:22\n+  --> $DIR/trivially_copy_pass_by_ref.rs:58:22\n    |\n LL |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {}\n    |                      ^^^^ help: consider passing by value instead: `u32`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:57:31\n+  --> $DIR/trivially_copy_pass_by_ref.rs:58:31\n    |\n LL |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {}\n    |                               ^^^^ help: consider passing by value instead: `Foo`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:57:40\n+  --> $DIR/trivially_copy_pass_by_ref.rs:58:40\n    |\n LL |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {}\n    |                                        ^^^^ help: consider passing by value instead: `Baz`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:59:16\n+  --> $DIR/trivially_copy_pass_by_ref.rs:60:16\n    |\n LL |     fn bad2(x: &u32, y: &Foo, z: &Baz) {}\n    |                ^^^^ help: consider passing by value instead: `u32`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:59:25\n+  --> $DIR/trivially_copy_pass_by_ref.rs:60:25\n    |\n LL |     fn bad2(x: &u32, y: &Foo, z: &Baz) {}\n    |                         ^^^^ help: consider passing by value instead: `Foo`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:59:34\n+  --> $DIR/trivially_copy_pass_by_ref.rs:60:34\n    |\n LL |     fn bad2(x: &u32, y: &Foo, z: &Baz) {}\n    |                                  ^^^^ help: consider passing by value instead: `Baz`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:71:16\n+  --> $DIR/trivially_copy_pass_by_ref.rs:72:16\n    |\n LL |     fn bad2(x: &u32, y: &Foo, z: &Baz) {}\n    |                ^^^^ help: consider passing by value instead: `u32`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:71:25\n+  --> $DIR/trivially_copy_pass_by_ref.rs:72:25\n    |\n LL |     fn bad2(x: &u32, y: &Foo, z: &Baz) {}\n    |                         ^^^^ help: consider passing by value instead: `Foo`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:71:34\n+  --> $DIR/trivially_copy_pass_by_ref.rs:72:34\n    |\n LL |     fn bad2(x: &u32, y: &Foo, z: &Baz) {}\n    |                                  ^^^^ help: consider passing by value instead: `Baz`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:75:34\n+  --> $DIR/trivially_copy_pass_by_ref.rs:76:34\n    |\n LL |     fn trait_method(&self, _foo: &Foo);\n    |                                  ^^^^ help: consider passing by value instead: `Foo`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:79:37\n+  --> $DIR/trivially_copy_pass_by_ref.rs:80:37\n    |\n LL |     fn trait_method2(&self, _color: &Color);\n    |                                     ^^^^^^ help: consider passing by value instead: `Color`"}, {"sha": "08a60202988b8bfa419bb22ac8912e371291f68f", "filename": "tests/ui/unit_arg.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Funit_arg.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Funit_arg.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funit_arg.fixed?ref=664522baddd813e9a8a989479289be43fe0da5cd", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n #![warn(clippy::unit_arg)]\n-#![allow(clippy::no_effect, unused_must_use)]\n+#![allow(clippy::no_effect, clippy::unused_self, unused_must_use)]\n \n use std::fmt::Debug;\n "}, {"sha": "14e3531ed7985d662723e964f614c528d6760068", "filename": "tests/ui/unit_arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Funit_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Funit_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funit_arg.rs?ref=664522baddd813e9a8a989479289be43fe0da5cd", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n #![warn(clippy::unit_arg)]\n-#![allow(clippy::no_effect, unused_must_use)]\n+#![allow(clippy::no_effect, clippy::unused_self, unused_must_use)]\n \n use std::fmt::Debug;\n "}, {"sha": "33a7ccad4a150fe7abe223246b3538db170a8148", "filename": "tests/ui/unused_self.rs", "status": "added", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Funused_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Funused_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_self.rs?ref=664522baddd813e9a8a989479289be43fe0da5cd", "patch": "@@ -0,0 +1,107 @@\n+#![warn(clippy::unused_self)]\n+#![allow(clippy::boxed_local)]\n+\n+mod unused_self {\n+    use std::pin::Pin;\n+    use std::sync::{Arc, Mutex};\n+\n+    struct A {}\n+\n+    impl A {\n+        fn unused_self_move(self) {}\n+        fn unused_self_ref(&self) {}\n+        fn unused_self_mut_ref(&mut self) {}\n+        fn unused_self_pin_ref(self: Pin<&Self>) {}\n+        fn unused_self_pin_mut_ref(self: Pin<&mut Self>) {}\n+        fn unused_self_pin_nested(self: Pin<Arc<Self>>) {}\n+        fn unused_self_box(self: Box<Self>) {}\n+        fn unused_with_other_used_args(&self, x: u8, y: u8) -> u8 {\n+            x + y\n+        }\n+        fn unused_self_class_method(&self) {\n+            Self::static_method();\n+        }\n+\n+        fn static_method() {}\n+    }\n+}\n+\n+mod used_self {\n+    use std::pin::Pin;\n+\n+    struct A {\n+        x: u8,\n+    }\n+\n+    impl A {\n+        fn used_self_move(self) -> u8 {\n+            self.x\n+        }\n+        fn used_self_ref(&self) -> u8 {\n+            self.x\n+        }\n+        fn used_self_mut_ref(&mut self) {\n+            self.x += 1\n+        }\n+        fn used_self_pin_ref(self: Pin<&Self>) -> u8 {\n+            self.x\n+        }\n+        fn used_self_box(self: Box<Self>) -> u8 {\n+            self.x\n+        }\n+        fn used_self_with_other_unused_args(&self, x: u8, y: u8) -> u8 {\n+            self.x\n+        }\n+        fn used_in_nested_closure(&self) -> u8 {\n+            let mut a = || -> u8 { self.x };\n+            a()\n+        }\n+\n+        #[allow(clippy::collapsible_if)]\n+        fn used_self_method_nested_conditions(&self, a: bool, b: bool, c: bool, d: bool) {\n+            if a {\n+                if b {\n+                    if c {\n+                        if d {\n+                            self.used_self_ref();\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n+        fn foo(&self) -> u32 {\n+            let mut sum = 0u32;\n+            for i in 0..self.x {\n+                sum += i as u32;\n+            }\n+            sum\n+        }\n+\n+        fn bar(&mut self, x: u8) -> u32 {\n+            let mut y = 0u32;\n+            for i in 0..x {\n+                y += self.foo()\n+            }\n+            y\n+        }\n+    }\n+}\n+\n+mod not_applicable {\n+    use std::fmt;\n+\n+    struct A {}\n+\n+    impl fmt::Debug for A {\n+        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+            write!(f, \"A\")\n+        }\n+    }\n+\n+    impl A {\n+        fn method(x: u8, y: u8) {}\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "497adddb8bccddad3ff209456e64d463a355e9c3", "filename": "tests/ui/unused_self.stderr", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Funused_self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Funused_self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_self.stderr?ref=664522baddd813e9a8a989479289be43fe0da5cd", "patch": "@@ -0,0 +1,75 @@\n+error: unused `self` argument\n+  --> $DIR/unused_self.rs:11:29\n+   |\n+LL |         fn unused_self_move(self) {}\n+   |                             ^^^^\n+   |\n+   = note: `-D clippy::unused-self` implied by `-D warnings`\n+   = help: consider refactoring to a static method or function\n+\n+error: unused `self` argument\n+  --> $DIR/unused_self.rs:12:28\n+   |\n+LL |         fn unused_self_ref(&self) {}\n+   |                            ^^^^^\n+   |\n+   = help: consider refactoring to a static method or function\n+\n+error: unused `self` argument\n+  --> $DIR/unused_self.rs:13:32\n+   |\n+LL |         fn unused_self_mut_ref(&mut self) {}\n+   |                                ^^^^^^^^^\n+   |\n+   = help: consider refactoring to a static method or function\n+\n+error: unused `self` argument\n+  --> $DIR/unused_self.rs:14:32\n+   |\n+LL |         fn unused_self_pin_ref(self: Pin<&Self>) {}\n+   |                                ^^^^\n+   |\n+   = help: consider refactoring to a static method or function\n+\n+error: unused `self` argument\n+  --> $DIR/unused_self.rs:15:36\n+   |\n+LL |         fn unused_self_pin_mut_ref(self: Pin<&mut Self>) {}\n+   |                                    ^^^^\n+   |\n+   = help: consider refactoring to a static method or function\n+\n+error: unused `self` argument\n+  --> $DIR/unused_self.rs:16:35\n+   |\n+LL |         fn unused_self_pin_nested(self: Pin<Arc<Self>>) {}\n+   |                                   ^^^^\n+   |\n+   = help: consider refactoring to a static method or function\n+\n+error: unused `self` argument\n+  --> $DIR/unused_self.rs:17:28\n+   |\n+LL |         fn unused_self_box(self: Box<Self>) {}\n+   |                            ^^^^\n+   |\n+   = help: consider refactoring to a static method or function\n+\n+error: unused `self` argument\n+  --> $DIR/unused_self.rs:18:40\n+   |\n+LL |         fn unused_with_other_used_args(&self, x: u8, y: u8) -> u8 {\n+   |                                        ^^^^^\n+   |\n+   = help: consider refactoring to a static method or function\n+\n+error: unused `self` argument\n+  --> $DIR/unused_self.rs:21:37\n+   |\n+LL |         fn unused_self_class_method(&self) {\n+   |                                     ^^^^^\n+   |\n+   = help: consider refactoring to a static method or function\n+\n+error: aborting due to 9 previous errors\n+"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "tests/ui/unused_self.stdout", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Funused_self.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Funused_self.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_self.stdout?ref=664522baddd813e9a8a989479289be43fe0da5cd"}, {"sha": "20a63122d002cf186e818896a2a239707721a972", "filename": "tests/ui/unused_unit.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Funused_unit.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Funused_unit.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_unit.fixed?ref=664522baddd813e9a8a989479289be43fe0da5cd", "patch": "@@ -10,7 +10,7 @@\n #![rustfmt::skip]\n \n #![deny(clippy::unused_unit)]\n-#![allow(dead_code)]\n+#![allow(dead_code, clippy::unused_self)]\n \n struct Unitter;\n impl Unitter {"}, {"sha": "cc2f6587446312cc101bc7c07b4412dfb7763cc7", "filename": "tests/ui/unused_unit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Funused_unit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Funused_unit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_unit.rs?ref=664522baddd813e9a8a989479289be43fe0da5cd", "patch": "@@ -10,7 +10,7 @@\n #![rustfmt::skip]\n \n #![deny(clippy::unused_unit)]\n-#![allow(dead_code)]\n+#![allow(dead_code, clippy::unused_self)]\n \n struct Unitter;\n impl Unitter {"}, {"sha": "018fe80df3726d3a9ef68f9ac12f5ec2f7990ee2", "filename": "tests/ui/wrong_self_convention.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Fwrong_self_convention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664522baddd813e9a8a989479289be43fe0da5cd/tests%2Fui%2Fwrong_self_convention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrong_self_convention.rs?ref=664522baddd813e9a8a989479289be43fe0da5cd", "patch": "@@ -1,6 +1,6 @@\n #![warn(clippy::wrong_self_convention)]\n #![warn(clippy::wrong_pub_self_convention)]\n-#![allow(dead_code, clippy::trivially_copy_pass_by_ref)]\n+#![allow(dead_code, clippy::trivially_copy_pass_by_ref, clippy::unused_self)]\n \n fn main() {}\n "}]}