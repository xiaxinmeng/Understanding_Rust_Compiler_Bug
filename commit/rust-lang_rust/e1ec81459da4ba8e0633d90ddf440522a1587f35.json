{"sha": "e1ec81459da4ba8e0633d90ddf440522a1587f35", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxZWM4MTQ1OWRhNGJhOGUwNjMzZDkwZGRmNDQwNTIyYTE1ODdmMzU=", "commit": {"author": {"name": "Matthias Einwag", "email": "matthias.einwag@live.com", "date": "2019-02-05T09:14:09Z"}, "committer": {"name": "Matthias Einwag", "email": "matthias.einwag@live.com", "date": "2019-02-05T09:14:09Z"}, "message": "Apply more review suggestions", "tree": {"sha": "5a58aa3a9848468c5cb57ff184e17e5260acf071", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a58aa3a9848468c5cb57ff184e17e5260acf071"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1ec81459da4ba8e0633d90ddf440522a1587f35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1ec81459da4ba8e0633d90ddf440522a1587f35", "html_url": "https://github.com/rust-lang/rust/commit/e1ec81459da4ba8e0633d90ddf440522a1587f35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1ec81459da4ba8e0633d90ddf440522a1587f35/comments", "author": {"login": "Matthias247", "id": 6330334, "node_id": "MDQ6VXNlcjYzMzAzMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6330334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Matthias247", "html_url": "https://github.com/Matthias247", "followers_url": "https://api.github.com/users/Matthias247/followers", "following_url": "https://api.github.com/users/Matthias247/following{/other_user}", "gists_url": "https://api.github.com/users/Matthias247/gists{/gist_id}", "starred_url": "https://api.github.com/users/Matthias247/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Matthias247/subscriptions", "organizations_url": "https://api.github.com/users/Matthias247/orgs", "repos_url": "https://api.github.com/users/Matthias247/repos", "events_url": "https://api.github.com/users/Matthias247/events{/privacy}", "received_events_url": "https://api.github.com/users/Matthias247/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Matthias247", "id": 6330334, "node_id": "MDQ6VXNlcjYzMzAzMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6330334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Matthias247", "html_url": "https://github.com/Matthias247", "followers_url": "https://api.github.com/users/Matthias247/followers", "following_url": "https://api.github.com/users/Matthias247/following{/other_user}", "gists_url": "https://api.github.com/users/Matthias247/gists{/gist_id}", "starred_url": "https://api.github.com/users/Matthias247/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Matthias247/subscriptions", "organizations_url": "https://api.github.com/users/Matthias247/orgs", "repos_url": "https://api.github.com/users/Matthias247/repos", "events_url": "https://api.github.com/users/Matthias247/events{/privacy}", "received_events_url": "https://api.github.com/users/Matthias247/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f005e1c5d72c775bbb4370e9d8031fbc74efe4eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/f005e1c5d72c775bbb4370e9d8031fbc74efe4eb", "html_url": "https://github.com/rust-lang/rust/commit/f005e1c5d72c775bbb4370e9d8031fbc74efe4eb"}], "stats": {"total": 14, "additions": 11, "deletions": 3}, "files": [{"sha": "470143d797afcb978a90c22017b57d205ecbcbae", "filename": "src/libcore/future/future.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e1ec81459da4ba8e0633d90ddf440522a1587f35/src%2Flibcore%2Ffuture%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1ec81459da4ba8e0633d90ddf440522a1587f35/src%2Flibcore%2Ffuture%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffuture%2Ffuture.rs?ref=e1ec81459da4ba8e0633d90ddf440522a1587f35", "patch": "@@ -19,7 +19,8 @@ use task::{Poll, Waker};\n /// final value. This method does not block if the value is not ready. Instead,\n /// the current task is scheduled to be woken up when it's possible to make\n /// further progress by `poll`ing again. The wake up is performed using\n-/// `cx.waker()`, a handle for waking up the current task.\n+/// the `waker` argument of the `poll()` method, which is a handle for waking\n+/// up the current task.\n ///\n /// When using a future, you generally won't call `poll` directly, but instead\n /// `await!` the value.\n@@ -78,8 +79,9 @@ pub trait Future {\n     ///\n     /// Once a future has completed (returned `Ready` from `poll`),\n     /// then any future calls to `poll` may panic, block forever, or otherwise\n-    /// cause bad behavior. The `Future` trait itself provides no guarantees\n-    /// about the behavior of `poll` after a future has completed.\n+    /// cause any kind of bad behavior expect causing memory unsafety.\n+    /// The `Future` trait itself provides no guarantees about the behavior\n+    /// of `poll` after a future has completed.\n     ///\n     /// [`Poll::Pending`]: ../task/enum.Poll.html#variant.Pending\n     /// [`Poll::Ready(val)`]: ../task/enum.Poll.html#variant.Ready"}, {"sha": "1f42d3e2690f63da1a273592384cb3b5ab0bd3e5", "filename": "src/libcore/task/wake.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e1ec81459da4ba8e0633d90ddf440522a1587f35/src%2Flibcore%2Ftask%2Fwake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1ec81459da4ba8e0633d90ddf440522a1587f35/src%2Flibcore%2Ftask%2Fwake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fwake.rs?ref=e1ec81459da4ba8e0633d90ddf440522a1587f35", "patch": "@@ -42,6 +42,9 @@ pub struct RawWakerVTable {\n \n     /// This function will be called when `wake` is called on the [`Waker`].\n     /// It must wake up the task associated with this [`RawWaker`].\n+    ///\n+    /// The implemention of this function must not consume the provided data\n+    /// pointer.\n     pub wake: unsafe fn(*const ()),\n \n     /// This function gets called when a [`RawWaker`] gets dropped.\n@@ -125,7 +128,10 @@ impl Drop for Waker {\n \n impl fmt::Debug for Waker {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        let vtable_ptr = self.waker.vtable as *const RawWakerVTable;\n         f.debug_struct(\"Waker\")\n+            .field(\"data\", &self.waker.data)\n+            .field(\"vtable\", &vtable_ptr)\n             .finish()\n     }\n }"}]}