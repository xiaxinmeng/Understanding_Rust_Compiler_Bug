{"sha": "2d62bd00ff28302d323184e6e043511696c61fd9", "node_id": "C_kwDOAAsO6NoAKDJkNjJiZDAwZmYyODMwMmQzMjMxODRlNmUwNDM1MTE2OTZjNjFmZDk", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-04T17:42:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-04T17:42:18Z"}, "message": "Rollup merge of #93615 - Kobzol:stable-hash-opt-endianness, r=the8472\n\nFix `isize` optimization in `StableHasher` for big-endian architectures\n\nThis PR fixes a problem with the stable hash optimization introduced in https://github.com/rust-lang/rust/pull/93432. As `@michaelwoerister` has [found out](https://github.com/rust-lang/rust/pull/93432#issuecomment-1028756212), the original implementation wouldn't produce the same hash on little/big architectures.\n\nr? `@the8472`", "tree": {"sha": "60e43af955139d1141cedef278adae07aff32558", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60e43af955139d1141cedef278adae07aff32558"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d62bd00ff28302d323184e6e043511696c61fd9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh/WV7CRBK7hj4Ov3rIwAA0CcIAIT+Z4atLw5drjR4pOYmKBp8\n85uAnBYPx/QT7vJwfPlgJzhgV5zTei+xHQ3+my/eYRH5OL8J0ZQ3jd2w9+Ra6BqN\nIkiuwgMJDK6QvvMsj6LyRcsqVpclc/O4HkO3nX4+EdbjgtrSa7JifmrRv2LL1zpM\neJqcyTvgzrEdANUvCiTyequOOKI92350TzZJreTD78xcfVY8UQ+Xo0fTztr6sbjl\nP4Oe2b/P2hurw+S2o7Z69GGsspuU7exyd6dBCyFBuKeoYwoE9P+ZgChgToHqj7Wh\nG4c6P/VY3Jnnv/yzp8gTg/sodOH7tDrsdD7gF0EDGj4Il8w145LTd7+GFyUcH1g=\n=EhYp\n-----END PGP SIGNATURE-----\n", "payload": "tree 60e43af955139d1141cedef278adae07aff32558\nparent 9ba09f976c68344f316cadb8109c8b388e2b824b\nparent c21b8e12a4f1bf884a87a6fb945d7c4d338737cc\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1643996538 +0100\ncommitter GitHub <noreply@github.com> 1643996538 +0100\n\nRollup merge of #93615 - Kobzol:stable-hash-opt-endianness, r=the8472\n\nFix `isize` optimization in `StableHasher` for big-endian architectures\n\nThis PR fixes a problem with the stable hash optimization introduced in https://github.com/rust-lang/rust/pull/93432. As `@michaelwoerister` has [found out](https://github.com/rust-lang/rust/pull/93432#issuecomment-1028756212), the original implementation wouldn't produce the same hash on little/big architectures.\n\nr? `@the8472`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d62bd00ff28302d323184e6e043511696c61fd9", "html_url": "https://github.com/rust-lang/rust/commit/2d62bd00ff28302d323184e6e043511696c61fd9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d62bd00ff28302d323184e6e043511696c61fd9/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ba09f976c68344f316cadb8109c8b388e2b824b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ba09f976c68344f316cadb8109c8b388e2b824b", "html_url": "https://github.com/rust-lang/rust/commit/9ba09f976c68344f316cadb8109c8b388e2b824b"}, {"sha": "c21b8e12a4f1bf884a87a6fb945d7c4d338737cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/c21b8e12a4f1bf884a87a6fb945d7c4d338737cc", "html_url": "https://github.com/rust-lang/rust/commit/c21b8e12a4f1bf884a87a6fb945d7c4d338737cc"}], "stats": {"total": 11, "additions": 8, "deletions": 3}, "files": [{"sha": "a121bbcedc8f70080eb633d78d7eb7d2f8f74070", "filename": "compiler/rustc_data_structures/src/stable_hasher.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2d62bd00ff28302d323184e6e043511696c61fd9/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d62bd00ff28302d323184e6e043511696c61fd9/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs?ref=2d62bd00ff28302d323184e6e043511696c61fd9", "patch": "@@ -133,18 +133,18 @@ impl Hasher for StableHasher {\n \n     #[inline]\n     fn write_isize(&mut self, i: isize) {\n-        // Always treat isize as i64 so we get the same results on 32 and 64 bit\n+        // Always treat isize as a 64-bit number so we get the same results on 32 and 64 bit\n         // platforms. This is important for symbol hashes when cross compiling,\n         // for example. Sign extending here is preferable as it means that the\n         // same negative number hashes the same on both 32 and 64 bit platforms.\n-        let value = (i as i64).to_le() as u64;\n+        let value = i as u64;\n \n         // Cold path\n         #[cold]\n         #[inline(never)]\n         fn hash_value(state: &mut SipHasher128, value: u64) {\n             state.write_u8(0xFF);\n-            state.write_u64(value);\n+            state.write_u64(value.to_le());\n         }\n \n         // `isize` values often seem to have a small (positive) numeric value in practice.\n@@ -161,6 +161,10 @@ impl Hasher for StableHasher {\n         // 8 bytes. Since this prefix cannot occur when we hash a single byte, when we hash two\n         // `isize`s that fit within a different amount of bytes, they should always produce a different\n         // byte stream for the hasher.\n+        //\n+        // To ensure that this optimization hashes the exact same bytes on both little-endian and\n+        // big-endian architectures, we compare the value with 0xFF before we convert the number\n+        // into a unified representation (little-endian).\n         if value < 0xFF {\n             self.state.write_u8(value as u8);\n         } else {"}, {"sha": "b0d66c32a07adc3f737623ebcb4f78b9aed5e567", "filename": "compiler/rustc_data_structures/src/stable_hasher/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2d62bd00ff28302d323184e6e043511696c61fd9/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d62bd00ff28302d323184e6e043511696c61fd9/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher%2Ftests.rs?ref=2d62bd00ff28302d323184e6e043511696c61fd9", "patch": "@@ -159,4 +159,5 @@ fn test_isize_compression() {\n     check_hash(0xAAAA, 0xAAAAAA);\n     check_hash(0xAAAAAA, 0xAAAAAAAA);\n     check_hash(0xFF, 0xFFFFFFFFFFFFFFFF);\n+    check_hash(u64::MAX /* -1 */, 1);\n }"}]}