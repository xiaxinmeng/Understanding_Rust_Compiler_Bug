{"sha": "8b6987aced84dc72b7cbb03580f0bf647c4336fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiNjk4N2FjZWQ4NGRjNzJiN2NiYjAzNTgwZjBiZjY0N2M0MzM2ZmM=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-04-10T14:37:29Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-04-14T15:25:38Z"}, "message": "copyediting: structs", "tree": {"sha": "19829524e6dc72c425fa514272c149f739a4fe90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19829524e6dc72c425fa514272c149f739a4fe90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b6987aced84dc72b7cbb03580f0bf647c4336fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b6987aced84dc72b7cbb03580f0bf647c4336fc", "html_url": "https://github.com/rust-lang/rust/commit/8b6987aced84dc72b7cbb03580f0bf647c4336fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b6987aced84dc72b7cbb03580f0bf647c4336fc/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b38819b8409cbadc74260c3beb7559f6515155e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b38819b8409cbadc74260c3beb7559f6515155e", "html_url": "https://github.com/rust-lang/rust/commit/2b38819b8409cbadc74260c3beb7559f6515155e"}], "stats": {"total": 52, "additions": 46, "deletions": 6}, "files": [{"sha": "87af48532a050dd35a736ebe2fbfb8fc5cd754cf", "filename": "src/doc/trpl/functions.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b6987aced84dc72b7cbb03580f0bf647c4336fc/src%2Fdoc%2Ftrpl%2Ffunctions.md", "raw_url": "https://github.com/rust-lang/rust/raw/8b6987aced84dc72b7cbb03580f0bf647c4336fc/src%2Fdoc%2Ftrpl%2Ffunctions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Ffunctions.md?ref=8b6987aced84dc72b7cbb03580f0bf647c4336fc", "patch": "@@ -122,7 +122,7 @@ So what's the difference? Expressions return a value, and statements do not.\n That\u2019s why we end up with \u2018not all control paths return a value\u2019 here: the\n statement `x + 1;` doesn\u2019t return a value. There are two kinds of statements in\n Rust: \u2018declaration statements\u2019 and \u2018expression statements\u2019. Everything else is\n-an expression. Let\u2019s talk about expression statements first.\n+an expression. Let\u2019s talk about declaration statements first.\n \n In some languages, variable bindings can be written as expressions, not just\n statements. Like Ruby:"}, {"sha": "619c93852a4d080b799b5673e29de2112ffa9c77", "filename": "src/doc/trpl/structs.md", "status": "modified", "additions": 45, "deletions": 5, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/8b6987aced84dc72b7cbb03580f0bf647c4336fc/src%2Fdoc%2Ftrpl%2Fstructs.md", "raw_url": "https://github.com/rust-lang/rust/raw/8b6987aced84dc72b7cbb03580f0bf647c4336fc/src%2Fdoc%2Ftrpl%2Fstructs.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fstructs.md?ref=8b6987aced84dc72b7cbb03580f0bf647c4336fc", "patch": "@@ -1,8 +1,15 @@\n % Structs\n \n-A struct is another form of a *record type*, just like a tuple. There's a\n-difference: structs give each element that they contain a name, called a\n-*field* or a *member*. Check it out:\n+Structs are a way of creating more complex datatypes. For example, if we were\n+doing calculations involving coordinates in 2D space, we would need both an `x`\n+and a `y` value:\n+\n+```rust\n+let origin_x = 0;\n+let origin_y = 0;\n+```\n+\n+A struct lets us combine these two into a single, unified datatype:\n \n ```rust\n struct Point {\n@@ -17,7 +24,7 @@ fn main() {\n }\n ```\n \n-There's a lot going on here, so let's break it down. We declare a struct with\n+There\u2019s a lot going on here, so let\u2019s break it down. We declare a struct with\n the `struct` keyword, and then with a name. By convention, structs begin with a\n capital letter and are also camel cased: `PointInSpace`, not `Point_In_Space`.\n \n@@ -31,7 +38,7 @@ notation: `origin.x`.\n The values in structs are immutable by default, like other bindings in Rust.\n Use `mut` to make them mutable:\n \n-```{rust}\n+```rust\n struct Point {\n     x: i32,\n     y: i32,\n@@ -47,3 +54,36 @@ fn main() {\n ```\n \n This will print `The point is at (5, 0)`.\n+\n+Rust does not support mutability at the field level, so you cannot write\n+something like this:\n+\n+```rust,ignore\n+struct Point {\n+    mut x: i32,\n+    y: i32,\n+}\n+```\n+\n+Mutability is a property of the binding, not of the structure itself. If you\u2019re\n+used to field-level mutability, this may seem strange at first, but it\n+significantly simplifies things. It even lets you make things mutable for a short\n+time only:\n+\n+\n+```rust,ignore\n+struct Point {\n+    x: i32,\n+    y: i32,\n+}\n+\n+fn main() {\n+    let mut point = Point { x: 0, y: 0 };\n+\n+    point.x = 5;\n+\n+    let point = point; // this new binding is immutable\n+\n+    point.y = 6; // this causes an error, because `point` is immutable!\n+}\n+```"}]}