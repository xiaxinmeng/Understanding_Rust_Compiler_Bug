{"sha": "e28db444dfdc797002bd3561940cde2659b831de", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyOGRiNDQ0ZGZkYzc5NzAwMmJkMzU2MTk0MGNkZTI2NTliODMxZGU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-03-26T16:00:11Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-03-26T16:11:01Z"}, "message": "rename", "tree": {"sha": "1be9aba5d9d7f7ebf684208f4de702a44c54bae8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1be9aba5d9d7f7ebf684208f4de702a44c54bae8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e28db444dfdc797002bd3561940cde2659b831de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e28db444dfdc797002bd3561940cde2659b831de", "html_url": "https://github.com/rust-lang/rust/commit/e28db444dfdc797002bd3561940cde2659b831de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e28db444dfdc797002bd3561940cde2659b831de/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b17217b34afbdbdc6b1d8ec480fcf06ec4bd587e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b17217b34afbdbdc6b1d8ec480fcf06ec4bd587e", "html_url": "https://github.com/rust-lang/rust/commit/b17217b34afbdbdc6b1d8ec480fcf06ec4bd587e"}], "stats": {"total": 100, "additions": 44, "deletions": 56}, "files": [{"sha": "1470058480af8d950d6e139003fa93fb4ace5bd6", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e28db444dfdc797002bd3561940cde2659b831de/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e28db444dfdc797002bd3561940cde2659b831de/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=e28db444dfdc797002bd3561940cde2659b831de", "patch": "@@ -4,7 +4,7 @@ use ra_syntax::{SyntaxNode, TreeArc, SourceFile};\n use ra_db::{SourceDatabase, salsa};\n \n use crate::{\n-    HirFileId, MacroDefId, SourceFileItems, SourceItemId, Crate, Module, HirInterner,\n+    HirFileId, MacroDefId, AstIdMap, ErasedFileAstId, Crate, Module, HirInterner,\n     Function, FnSignature, ExprScopes, TypeAlias,\n     Struct, Enum, StructField,\n     Const, ConstSignature, Static,\n@@ -34,11 +34,11 @@ pub trait DefDatabase: SourceDatabase + AsRef<HirInterner> {\n     #[salsa::invoke(crate::traits::TraitData::trait_data_query)]\n     fn trait_data(&self, t: Trait) -> Arc<TraitData>;\n \n-    #[salsa::invoke(crate::source_id::SourceFileItems::file_items_query)]\n-    fn file_items(&self, file_id: HirFileId) -> Arc<SourceFileItems>;\n+    #[salsa::invoke(crate::source_id::AstIdMap::ast_id_map_query)]\n+    fn ast_id_map(&self, file_id: HirFileId) -> Arc<AstIdMap>;\n \n-    #[salsa::invoke(crate::source_id::SourceFileItems::file_item_query)]\n-    fn file_item(&self, source_item_id: SourceItemId) -> TreeArc<SyntaxNode>;\n+    #[salsa::invoke(crate::source_id::AstIdMap::file_item_query)]\n+    fn ast_id_to_node(&self, file_id: HirFileId, ast_id: ErasedFileAstId) -> TreeArc<SyntaxNode>;\n \n     #[salsa::invoke(RawItems::raw_items_query)]\n     fn raw_items(&self, file_id: HirFileId) -> Arc<RawItems>;"}, {"sha": "d8a25e2466f587e8e771bf2d454d976dc0b21e16", "filename": "crates/ra_hir/src/ids.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e28db444dfdc797002bd3561940cde2659b831de/crates%2Fra_hir%2Fsrc%2Fids.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e28db444dfdc797002bd3561940cde2659b831de/crates%2Fra_hir%2Fsrc%2Fids.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fids.rs?ref=e28db444dfdc797002bd3561940cde2659b831de", "patch": "@@ -207,7 +207,7 @@ impl<'a, DB: DefDatabase> LocationCtx<&'a DB> {\n pub(crate) trait AstItemDef<N: AstNode>: ArenaId + Clone {\n     fn interner(interner: &HirInterner) -> &LocationInterner<ItemLoc<N>, Self>;\n     fn from_ast(ctx: LocationCtx<&impl DefDatabase>, ast: &N) -> Self {\n-        let items = ctx.db.file_items(ctx.file_id);\n+        let items = ctx.db.ast_id_map(ctx.file_id);\n         let item_id = items.ast_id(ast);\n         Self::from_ast_id(ctx, item_id)\n     }"}, {"sha": "7c603bbd3e77a1ad70e14701ce7719fe8547c49e", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e28db444dfdc797002bd3561940cde2659b831de/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e28db444dfdc797002bd3561940cde2659b831de/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=e28db444dfdc797002bd3561940cde2659b831de", "patch": "@@ -54,7 +54,7 @@ use crate::{\n pub use self::{\n     path::{Path, PathKind},\n     name::Name,\n-    source_id::{SourceFileItems, SourceItemId},\n+    source_id::{AstIdMap, ErasedFileAstId},\n     ids::{HirFileId, MacroDefId, MacroCallId, MacroCallLoc, HirInterner},\n     nameres::{PerNs, Namespace},\n     ty::{Ty, ApplicationTy, TypeCtor, Substs, display::HirDisplay},"}, {"sha": "0936229acf4082eb90cffade53fb3612bd800654", "filename": "crates/ra_hir/src/nameres/raw.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e28db444dfdc797002bd3561940cde2659b831de/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e28db444dfdc797002bd3561940cde2659b831de/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs?ref=e28db444dfdc797002bd3561940cde2659b831de", "patch": "@@ -12,7 +12,7 @@ use ra_syntax::{\n \n use crate::{\n     DefDatabase, Name, AsName, Path, HirFileId, ModuleSource,\n-    SourceFileItems, FileAstId,\n+    AstIdMap, FileAstId,\n };\n \n /// `RawItems` is a set of top-level items in a file (except for impls).\n@@ -60,7 +60,7 @@ impl RawItems {\n     ) -> (Arc<RawItems>, Arc<ImportSourceMap>) {\n         let mut collector = RawItemsCollector {\n             raw_items: RawItems::default(),\n-            source_file_items: db.file_items(file_id.into()),\n+            source_ast_id_map: db.ast_id_map(file_id.into()),\n             source_map: ImportSourceMap::default(),\n         };\n         let source_file = db.hir_parse(file_id);\n@@ -167,7 +167,7 @@ pub(super) struct MacroData {\n \n struct RawItemsCollector {\n     raw_items: RawItems,\n-    source_file_items: Arc<SourceFileItems>,\n+    source_ast_id_map: Arc<AstIdMap>,\n     source_map: ImportSourceMap,\n }\n \n@@ -200,25 +200,25 @@ impl RawItemsCollector {\n                 return;\n             }\n             ast::ModuleItemKind::StructDef(it) => {\n-                (DefKind::Struct(self.source_file_items.ast_id(it)), it.name())\n+                (DefKind::Struct(self.source_ast_id_map.ast_id(it)), it.name())\n             }\n             ast::ModuleItemKind::EnumDef(it) => {\n-                (DefKind::Enum(self.source_file_items.ast_id(it)), it.name())\n+                (DefKind::Enum(self.source_ast_id_map.ast_id(it)), it.name())\n             }\n             ast::ModuleItemKind::FnDef(it) => {\n-                (DefKind::Function(self.source_file_items.ast_id(it)), it.name())\n+                (DefKind::Function(self.source_ast_id_map.ast_id(it)), it.name())\n             }\n             ast::ModuleItemKind::TraitDef(it) => {\n-                (DefKind::Trait(self.source_file_items.ast_id(it)), it.name())\n+                (DefKind::Trait(self.source_ast_id_map.ast_id(it)), it.name())\n             }\n             ast::ModuleItemKind::TypeAliasDef(it) => {\n-                (DefKind::TypeAlias(self.source_file_items.ast_id(it)), it.name())\n+                (DefKind::TypeAlias(self.source_ast_id_map.ast_id(it)), it.name())\n             }\n             ast::ModuleItemKind::ConstDef(it) => {\n-                (DefKind::Const(self.source_file_items.ast_id(it)), it.name())\n+                (DefKind::Const(self.source_ast_id_map.ast_id(it)), it.name())\n             }\n             ast::ModuleItemKind::StaticDef(it) => {\n-                (DefKind::Static(self.source_file_items.ast_id(it)), it.name())\n+                (DefKind::Static(self.source_ast_id_map.ast_id(it)), it.name())\n             }\n         };\n         if let Some(name) = name {\n@@ -233,7 +233,7 @@ impl RawItemsCollector {\n             Some(it) => it.as_name(),\n             None => return,\n         };\n-        let ast_id = self.source_file_items.ast_id(module);\n+        let ast_id = self.source_ast_id_map.ast_id(module);\n         if module.has_semi() {\n             let item = self.raw_items.modules.alloc(ModuleData::Declaration { name, ast_id });\n             self.push_item(current_module, RawItem::Module(item));\n@@ -297,7 +297,7 @@ impl RawItemsCollector {\n         };\n \n         let name = m.name().map(|it| it.as_name());\n-        let ast_id = self.source_file_items.ast_id(m);\n+        let ast_id = self.source_ast_id_map.ast_id(m);\n         let export = m.has_atom_attr(\"macro_export\");\n         let m = self.raw_items.macros.alloc(MacroData { ast_id, path, name, export });\n         self.push_item(current_module, RawItem::Macro(m));"}, {"sha": "9dae4c3d1de4d5684a3b6c9ce57581c36a099eec", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e28db444dfdc797002bd3561940cde2659b831de/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e28db444dfdc797002bd3561940cde2659b831de/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=e28db444dfdc797002bd3561940cde2659b831de", "patch": "@@ -54,8 +54,8 @@ fn module_from_inline(\n ) -> Option<Module> {\n     assert!(!module.has_semi());\n     let file_id = file_id.into();\n-    let file_items = db.file_items(file_id);\n-    let item_id = file_items.ast_id(module).with_file_id(file_id);\n+    let ast_id_map = db.ast_id_map(file_id);\n+    let item_id = ast_id_map.ast_id(module).with_file_id(file_id);\n     module_from_source(db, file_id, Some(item_id))\n }\n "}, {"sha": "0a8fb6d3285ad68d998664812a51f457df0fc9a2", "filename": "crates/ra_hir/src/source_id.rs", "status": "modified", "additions": 21, "deletions": 33, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/e28db444dfdc797002bd3561940cde2659b831de/crates%2Fra_hir%2Fsrc%2Fsource_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e28db444dfdc797002bd3561940cde2659b831de/crates%2Fra_hir%2Fsrc%2Fsource_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_id.rs?ref=e28db444dfdc797002bd3561940cde2659b831de", "patch": "@@ -5,7 +5,9 @@ use ra_syntax::{SyntaxNodePtr, TreeArc, SyntaxNode, SourceFile, AstNode, ast};\n \n use crate::{HirFileId, DefDatabase};\n \n-/// `AstId` points to an AST node in any file\n+/// `AstId` points to an AST node in any file.\n+///\n+/// It is stable across reparses, and can be used as salsa key/value.\n #[derive(Debug)]\n pub(crate) struct AstId<N: AstNode> {\n     file_id: HirFileId,\n@@ -37,17 +39,15 @@ impl<N: AstNode> AstId<N> {\n     }\n \n     pub(crate) fn to_node(&self, db: &impl DefDatabase) -> TreeArc<N> {\n-        let source_item_id =\n-            SourceItemId { file_id: self.file_id(), item_id: self.file_ast_id.raw };\n-        let syntax_node = db.file_item(source_item_id);\n+        let syntax_node = db.ast_id_to_node(self.file_id, self.file_ast_id.raw);\n         N::cast(&syntax_node).unwrap().to_owned()\n     }\n }\n \n /// `AstId` points to an AST node in a specific file.\n #[derive(Debug)]\n pub(crate) struct FileAstId<N: AstNode> {\n-    raw: SourceFileItemId,\n+    raw: ErasedFileAstId,\n     _ty: PhantomData<N>,\n }\n \n@@ -76,49 +76,37 @@ impl<N: AstNode> FileAstId<N> {\n     }\n }\n \n-/// Identifier of item within a specific file. This is stable over reparses, so\n-/// it's OK to use it as a salsa key/value.\n #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n-struct SourceFileItemId(RawId);\n-impl_arena_id!(SourceFileItemId);\n+pub struct ErasedFileAstId(RawId);\n+impl_arena_id!(ErasedFileAstId);\n \n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct SourceItemId {\n-    file_id: HirFileId,\n-    item_id: SourceFileItemId,\n-}\n-\n-/// Maps items' `SyntaxNode`s to `SourceFileItemId`s and back.\n+/// Maps items' `SyntaxNode`s to `ErasedFileAstId`s and back.\n #[derive(Debug, PartialEq, Eq)]\n-pub struct SourceFileItems {\n-    arena: Arena<SourceFileItemId, SyntaxNodePtr>,\n+pub struct AstIdMap {\n+    arena: Arena<ErasedFileAstId, SyntaxNodePtr>,\n }\n \n-impl SourceFileItems {\n-    pub(crate) fn file_items_query(\n-        db: &impl DefDatabase,\n-        file_id: HirFileId,\n-    ) -> Arc<SourceFileItems> {\n+impl AstIdMap {\n+    pub(crate) fn ast_id_map_query(db: &impl DefDatabase, file_id: HirFileId) -> Arc<AstIdMap> {\n         let source_file = db.hir_parse(file_id);\n-        Arc::new(SourceFileItems::from_source_file(&source_file))\n+        Arc::new(AstIdMap::from_source_file(&source_file))\n     }\n \n     pub(crate) fn file_item_query(\n         db: &impl DefDatabase,\n-        source_item_id: SourceItemId,\n+        file_id: HirFileId,\n+        ast_id: ErasedFileAstId,\n     ) -> TreeArc<SyntaxNode> {\n-        let source_file = db.hir_parse(source_item_id.file_id);\n-        db.file_items(source_item_id.file_id).arena[source_item_id.item_id]\n-            .to_node(&source_file)\n-            .to_owned()\n+        let source_file = db.hir_parse(file_id);\n+        db.ast_id_map(file_id).arena[ast_id].to_node(&source_file).to_owned()\n     }\n \n     pub(crate) fn ast_id<N: AstNode>(&self, item: &N) -> FileAstId<N> {\n         let ptr = SyntaxNodePtr::new(item.syntax());\n         let raw = match self.arena.iter().find(|(_id, i)| **i == ptr) {\n             Some((it, _)) => it,\n             None => panic!(\n-                \"Can't find {:?} in SourceFileItems:\\n{:?}\",\n+                \"Can't find {:?} in AstIdMap:\\n{:?}\",\n                 item.syntax(),\n                 self.arena.iter().map(|(_id, i)| i).collect::<Vec<_>>(),\n             ),\n@@ -127,8 +115,8 @@ impl SourceFileItems {\n         FileAstId { raw, _ty: PhantomData }\n     }\n \n-    fn from_source_file(source_file: &SourceFile) -> SourceFileItems {\n-        let mut res = SourceFileItems { arena: Arena::default() };\n+    fn from_source_file(source_file: &SourceFile) -> AstIdMap {\n+        let mut res = AstIdMap { arena: Arena::default() };\n         // By walking the tree in bread-first order we make sure that parents\n         // get lower ids then children. That is, adding a new child does not\n         // change parent's id. This means that, say, adding a new function to a\n@@ -143,7 +131,7 @@ impl SourceFileItems {\n         res\n     }\n \n-    fn alloc(&mut self, item: &SyntaxNode) -> SourceFileItemId {\n+    fn alloc(&mut self, item: &SyntaxNode) -> ErasedFileAstId {\n         self.arena.alloc(SyntaxNodePtr::new(item))\n     }\n }"}, {"sha": "a4a086931bc0c4ff6897f0320cd8cf54fdb3a7b3", "filename": "crates/ra_ide_api/src/change.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e28db444dfdc797002bd3561940cde2659b831de/crates%2Fra_ide_api%2Fsrc%2Fchange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e28db444dfdc797002bd3561940cde2659b831de/crates%2Fra_ide_api%2Fsrc%2Fchange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fchange.rs?ref=e28db444dfdc797002bd3561940cde2659b831de", "patch": "@@ -220,8 +220,8 @@ impl RootDatabase {\n         self.query(ra_db::ParseQuery).sweep(sweep);\n \n         self.query(hir::db::HirParseQuery).sweep(sweep);\n-        self.query(hir::db::FileItemsQuery).sweep(sweep);\n-        self.query(hir::db::FileItemQuery).sweep(sweep);\n+        self.query(hir::db::AstIdMapQuery).sweep(sweep);\n+        self.query(hir::db::AstIdToNodeQuery).sweep(sweep);\n \n         self.query(hir::db::RawItemsWithSourceMapQuery).sweep(sweep);\n         self.query(hir::db::BodyWithSourceMapQuery).sweep(sweep);"}]}