{"sha": "fb9ab95a15e3c44d342ee9ef103179fff06baa8f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiOWFiOTVhMTVlM2M0NGQzNDJlZTllZjEwMzE3OWZmZjA2YmFhOGY=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-09-08T01:16:08Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-09-08T08:24:25Z"}, "message": "rustc: When revoking a cleanup of a unique pointer, zero it out so that the GC won't try to visit it", "tree": {"sha": "c48469314b0a13e74b5fb5e3a8d36b9b0f8fb7de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c48469314b0a13e74b5fb5e3a8d36b9b0f8fb7de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb9ab95a15e3c44d342ee9ef103179fff06baa8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb9ab95a15e3c44d342ee9ef103179fff06baa8f", "html_url": "https://github.com/rust-lang/rust/commit/fb9ab95a15e3c44d342ee9ef103179fff06baa8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb9ab95a15e3c44d342ee9ef103179fff06baa8f/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a0c9759fe3526310d4c7f30caf30bec39589e26", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a0c9759fe3526310d4c7f30caf30bec39589e26", "html_url": "https://github.com/rust-lang/rust/commit/7a0c9759fe3526310d4c7f30caf30bec39589e26"}], "stats": {"total": 40, "additions": 25, "deletions": 15}, "files": [{"sha": "aae5faf50f0db4bb7b64f250b2cf66282ecf65b1", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/fb9ab95a15e3c44d342ee9ef103179fff06baa8f/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9ab95a15e3c44d342ee9ef103179fff06baa8f/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=fb9ab95a15e3c44d342ee9ef103179fff06baa8f", "patch": "@@ -2179,18 +2179,15 @@ fn move_val(cx: @block_ctxt, action: copy_action, dst: ValueRef,\n         if src.is_mem { ret zero_alloca(cx, src.res.val, t).bcx; }\n \n         // If we're here, it must be a temporary.\n-        revoke_clean(cx, src_val);\n-        ret cx;\n+        ret revoke_clean(cx, src_val, t);\n     } else if ty::type_is_unique(tcx, t) ||\n             type_is_structural_or_param(tcx, t) {\n         if action == DROP_EXISTING { cx = drop_ty(cx, dst, t); }\n         cx = memmove_ty(cx, dst, src_val, t).bcx;\n-        if src.is_mem {\n-            ret zero_alloca(cx, src_val, t).bcx;\n-        } else { // Temporary value\n-            revoke_clean(cx, src_val);\n-            ret cx;\n-        }\n+        if src.is_mem { ret zero_alloca(cx, src_val, t).bcx; }\n+\n+        // If we're here, it must be a temporary.\n+        ret revoke_clean(cx, src_val, t);\n     }\n     bcx_ccx(cx).sess.bug(\"unexpected type in trans::move_val: \" +\n                              ty_to_str(tcx, t));\n@@ -3620,7 +3617,8 @@ fn trans_bind_1(cx: &@block_ctxt, f: &@ast::expr, f_res: &lval_result,\n \n fn trans_arg_expr(cx: &@block_ctxt, arg: &ty::arg, lldestty0: TypeRef,\n                   to_zero: &mutable [{v: ValueRef, t: ty::t}],\n-                  to_revoke: &mutable [ValueRef], e: &@ast::expr) -> result {\n+                  to_revoke: &mutable [{v: ValueRef, t: ty::t}],\n+                  e: &@ast::expr) -> result {\n     let ccx = bcx_ccx(cx);\n     let e_ty = ty::expr_ty(ccx.tcx, e);\n     let is_bot = ty::type_is_bot(ccx.tcx, e_ty);\n@@ -3672,7 +3670,9 @@ fn trans_arg_expr(cx: &@block_ctxt, arg: &ty::arg, lldestty0: TypeRef,\n             // Use actual ty, not declared ty -- anything else doesn't make\n             // sense if declared ty is a ty param\n             to_zero += [{v: lv.res.val, t: e_ty}];\n-        } else { to_revoke += [lv.res.val]; }\n+        } else {\n+            to_revoke += [{v: lv.res.val, t: e_ty}];\n+        }\n     }\n     ret rslt(bcx, val);\n }\n@@ -3691,7 +3691,7 @@ fn trans_args(cx: &@block_ctxt, llenv: ValueRef,\n     args: [ValueRef],\n     retslot: ValueRef,\n     to_zero: [{v: ValueRef, t: ty::t}],\n-    to_revoke: [ValueRef]} {\n+    to_revoke: [{v: ValueRef, t: ty::t}]} {\n \n     let args: [ty::arg] = ty::ty_fn_args(bcx_tcx(cx), fn_ty);\n     let llargs: [ValueRef] = [];\n@@ -3869,9 +3869,11 @@ fn trans_call(in_cx: &@block_ctxt, f: &@ast::expr,\n \n         // Forget about anything we moved out.\n         for {v: v, t: t}: {v: ValueRef, t: ty::t} in args_res.to_zero {\n-            zero_alloca(bcx, v, t)\n+            bcx = zero_alloca(bcx, v, t).bcx;\n+        }\n+        for {v: v, t: t} in args_res.to_revoke {\n+            bcx = revoke_clean(bcx, v, t);\n         }\n-        for v: ValueRef in args_res.to_revoke { revoke_clean(bcx, v) }\n         bcx = trans_block_cleanups(bcx, cx);\n         let next_cx = new_sub_block_ctxt(in_cx, \"next\");\n         Br(bcx, next_cx.llbb);"}, {"sha": "6c3aa2f9a4ca9b02385d56c6a9faef27f86d9a6d", "filename": "src/comp/middle/trans_common.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fb9ab95a15e3c44d342ee9ef103179fff06baa8f/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9ab95a15e3c44d342ee9ef103179fff06baa8f/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_common.rs?ref=fb9ab95a15e3c44d342ee9ef103179fff06baa8f", "patch": "@@ -314,7 +314,13 @@ fn add_clean_temp(cx: &@block_ctxt, val: ValueRef, ty: ty::t) {\n // to a system where we can also cancel the cleanup on local variables, but\n // this will be more involved. For now, we simply zero out the local, and the\n // drop glue checks whether it is zero.\n-fn revoke_clean(cx: &@block_ctxt, val: ValueRef) {\n+fn revoke_clean(cx: &@block_ctxt, val: ValueRef, t: ty::t) -> @block_ctxt {\n+    if ty::type_is_unique(bcx_tcx(cx), t) {\n+        // Just zero out the allocation. This ensures that the GC won't try to\n+        // traverse dangling pointers.\n+        ret trans::zero_alloca(cx, val, t).bcx;\n+    }\n+\n     let sc_cx = find_scope_cx(cx);\n     let found = -1;\n     let i = 0;\n@@ -329,12 +335,14 @@ fn revoke_clean(cx: &@block_ctxt, val: ValueRef) {\n     }\n     // The value does not have a cleanup associated with it. Might be a\n     // constant or some immediate value.\n-    if found == -1 { ret; }\n+    if found == -1 { ret cx; }\n     // We found the cleanup and remove it\n     sc_cx.cleanups =\n         std::vec::slice(sc_cx.cleanups, 0u, found as uint) +\n             std::vec::slice(sc_cx.cleanups, (found as uint) + 1u,\n                             std::vec::len(sc_cx.cleanups));\n+\n+    ret cx;\n }\n \n fn get_res_dtor(ccx: &@crate_ctxt, sp: &span, did: &ast::def_id,"}]}