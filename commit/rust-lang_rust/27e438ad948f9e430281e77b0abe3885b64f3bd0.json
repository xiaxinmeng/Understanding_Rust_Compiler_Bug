{"sha": "27e438ad948f9e430281e77b0abe3885b64f3bd0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3ZTQzOGFkOTQ4ZjllNDMwMjgxZTc3YjBhYmUzODg1YjY0ZjNiZDA=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-02-16T13:51:53Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-02-16T13:54:48Z"}, "message": "Make `may_normalize` explicit in the type system", "tree": {"sha": "ce18c59cb3c7fabbf5452357735d9f304203667c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce18c59cb3c7fabbf5452357735d9f304203667c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27e438ad948f9e430281e77b0abe3885b64f3bd0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27e438ad948f9e430281e77b0abe3885b64f3bd0", "html_url": "https://github.com/rust-lang/rust/commit/27e438ad948f9e430281e77b0abe3885b64f3bd0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27e438ad948f9e430281e77b0abe3885b64f3bd0/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "525983a2a4ac3029dd9979d924ef444f48a4d7b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/525983a2a4ac3029dd9979d924ef444f48a4d7b3", "html_url": "https://github.com/rust-lang/rust/commit/525983a2a4ac3029dd9979d924ef444f48a4d7b3"}], "stats": {"total": 72, "additions": 38, "deletions": 34}, "files": [{"sha": "2f8e3189d12e969f5394031128f4a2def3fe2b90", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 38, "deletions": 34, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/27e438ad948f9e430281e77b0abe3885b64f3bd0/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27e438ad948f9e430281e77b0abe3885b64f3bd0/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=27e438ad948f9e430281e77b0abe3885b64f3bd0", "patch": "@@ -21,7 +21,7 @@ use syntax::ast::Mutability;\n use syntax::source_map::{Span, DUMMY_SP};\n \n use crate::interpret::{self,\n-    PlaceTy, MPlaceTy, MemPlace, OpTy, ImmTy, Operand, Immediate, Scalar, Pointer,\n+    PlaceTy, MPlaceTy, MemPlace, OpTy, ImmTy, Immediate, Scalar, Pointer,\n     RawConst, ConstValue,\n     EvalResult, EvalError, EvalErrorKind, GlobalId, EvalContext, StackPopCleanup,\n     Allocation, AllocId, MemoryKind,\n@@ -62,45 +62,46 @@ pub(crate) fn eval_promoted<'a, 'mir, 'tcx>(\n     eval_body_using_ecx(&mut ecx, cid, Some(mir), param_env)\n }\n \n-// FIXME: These two conversion functions are bad hacks.  We should just always use allocations.\n-pub fn op_to_const<'tcx>(\n+fn mplace_to_const<'tcx>(\n+    ecx: &CompileTimeEvalContext<'_, '_, 'tcx>,\n+    mplace: MPlaceTy<'tcx>,\n+) -> EvalResult<'tcx, ty::Const<'tcx>> {\n+    let MemPlace { ptr, align, meta } = *mplace;\n+    // extract alloc-offset pair\n+    assert!(meta.is_none());\n+    let ptr = ptr.to_ptr()?;\n+    let alloc = ecx.memory.get(ptr.alloc_id)?;\n+    assert!(alloc.align >= align);\n+    assert!(alloc.bytes.len() as u64 - ptr.offset.bytes() >= mplace.layout.size.bytes());\n+    let mut alloc = alloc.clone();\n+    alloc.align = align;\n+    // FIXME shouldn't it be the case that `mark_static_initialized` has already\n+    // interned this?  I thought that is the entire point of that `FinishStatic` stuff?\n+    let alloc = ecx.tcx.intern_const_alloc(alloc);\n+    let val = ConstValue::ByRef(ptr, alloc);\n+    Ok(ty::Const { val, ty: mplace.layout.ty })\n+}\n+\n+fn op_to_const<'tcx>(\n     ecx: &CompileTimeEvalContext<'_, '_, 'tcx>,\n     op: OpTy<'tcx>,\n-    may_normalize: bool,\n ) -> EvalResult<'tcx, ty::Const<'tcx>> {\n     // We do not normalize just any data.  Only scalar layout and slices.\n-    let normalize = may_normalize\n-        && match op.layout.abi {\n-            layout::Abi::Scalar(..) => true,\n-            layout::Abi::ScalarPair(..) => op.layout.ty.is_slice(),\n-            _ => false,\n-        };\n+    let normalize = match op.layout.abi {\n+        layout::Abi::Scalar(..) => true,\n+        layout::Abi::ScalarPair(..) => op.layout.ty.is_slice(),\n+        _ => false,\n+    };\n     let normalized_op = if normalize {\n-        Ok(*ecx.read_immediate(op).expect(\"normalization works on validated constants\"))\n+        Err(*ecx.read_immediate(op).expect(\"normalization works on validated constants\"))\n     } else {\n-        match *op {\n-            Operand::Indirect(mplace) => Err(mplace),\n-            Operand::Immediate(val) => Ok(val)\n-        }\n+        op.try_as_mplace()\n     };\n     let val = match normalized_op {\n-        Err(MemPlace { ptr, align, meta }) => {\n-            // extract alloc-offset pair\n-            assert!(meta.is_none());\n-            let ptr = ptr.to_ptr()?;\n-            let alloc = ecx.memory.get(ptr.alloc_id)?;\n-            assert!(alloc.align >= align);\n-            assert!(alloc.bytes.len() as u64 - ptr.offset.bytes() >= op.layout.size.bytes());\n-            let mut alloc = alloc.clone();\n-            alloc.align = align;\n-            // FIXME shouldn't it be the case that `mark_static_initialized` has already\n-            // interned this?  I thought that is the entire point of that `FinishStatic` stuff?\n-            let alloc = ecx.tcx.intern_const_alloc(alloc);\n-            ConstValue::ByRef(ptr, alloc)\n-        },\n-        Ok(Immediate::Scalar(x)) =>\n+        Ok(mplace) => return mplace_to_const(ecx, mplace),\n+        Err(Immediate::Scalar(x)) =>\n             ConstValue::Scalar(x.not_undef()?),\n-        Ok(Immediate::ScalarPair(a, b)) =>\n+        Err(Immediate::ScalarPair(a, b)) =>\n             ConstValue::Slice(a.not_undef()?, b.to_usize(ecx)?),\n     };\n     Ok(ty::Const { val, ty: op.layout.ty })\n@@ -486,7 +487,7 @@ pub fn const_field<'a, 'tcx>(\n         let field = ecx.operand_field(down, field.index() as u64)?;\n         // and finally move back to the const world, always normalizing because\n         // this is not called for statics.\n-        op_to_const(&ecx, field, true)\n+        op_to_const(&ecx, field)\n     })();\n     result.map_err(|error| {\n         let err = error_to_const_error(&ecx, error);\n@@ -535,8 +536,11 @@ fn validate_and_turn_into_const<'a, 'tcx>(\n         }\n         // Now that we validated, turn this into a proper constant.\n         let def_id = cid.instance.def.def_id();\n-        let normalize = tcx.is_static(def_id).is_none() && cid.promoted.is_none();\n-        op_to_const(&ecx, mplace.into(), normalize)\n+        if tcx.is_static(def_id).is_some() || cid.promoted.is_some() {\n+            mplace_to_const(&ecx, mplace)\n+        } else {\n+            op_to_const(&ecx, mplace.into())\n+        }\n     })();\n \n     val.map_err(|error| {"}]}