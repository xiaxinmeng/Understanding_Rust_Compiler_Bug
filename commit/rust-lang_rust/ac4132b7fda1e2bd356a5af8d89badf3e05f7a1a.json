{"sha": "ac4132b7fda1e2bd356a5af8d89badf3e05f7a1a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjNDEzMmI3ZmRhMWUyYmQzNTZhNWFmOGQ4OWJhZGYzZTA1ZjdhMWE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-08-12T23:36:07Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-08-12T23:36:07Z"}, "message": "std: Add tests for cell. Fix a logic error", "tree": {"sha": "b9f5f06695bc64badd558f48acebd96eb83d389c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9f5f06695bc64badd558f48acebd96eb83d389c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac4132b7fda1e2bd356a5af8d89badf3e05f7a1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac4132b7fda1e2bd356a5af8d89badf3e05f7a1a", "html_url": "https://github.com/rust-lang/rust/commit/ac4132b7fda1e2bd356a5af8d89badf3e05f7a1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac4132b7fda1e2bd356a5af8d89badf3e05f7a1a/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78d19d8f1bdb64317ebdb072c25ee1240a562095", "url": "https://api.github.com/repos/rust-lang/rust/commits/78d19d8f1bdb64317ebdb072c25ee1240a562095", "html_url": "https://github.com/rust-lang/rust/commit/78d19d8f1bdb64317ebdb072c25ee1240a562095"}], "stats": {"total": 36, "additions": 32, "deletions": 4}, "files": [{"sha": "02cae69eca515afcda7f4ee0fb327fc996ff7ea3", "filename": "src/libstd/cell.rs", "status": "modified", "additions": 32, "deletions": 4, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ac4132b7fda1e2bd356a5af8d89badf3e05f7a1a/src%2Flibstd%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac4132b7fda1e2bd356a5af8d89badf3e05f7a1a/src%2Flibstd%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcell.rs?ref=ac4132b7fda1e2bd356a5af8d89badf3e05f7a1a", "patch": "@@ -18,17 +18,18 @@ fn empty_cell<T>() -> Cell<T> {\n impl<T> Cell<T> {\n     /// Yields the value, failing if the cell is empty.\n     fn take() -> T {\n-        let mut value = none;\n-        value <-> self.value;\n-        if value.is_none() {\n+        if self.is_empty() {\n             fail ~\"attempt to take an empty cell\";\n         }\n+\n+        let mut value = none;\n+        value <-> self.value;\n         return option::unwrap(value);\n     }\n \n     /// Returns the value, failing if the cell is full.\n     fn put_back(+value: T) {\n-        if self.value.is_none() {\n+        if !self.is_empty() {\n             fail ~\"attempt to put a value back into a full cell\";\n         }\n         self.value = some(move value);\n@@ -39,3 +40,30 @@ impl<T> Cell<T> {\n         self.value.is_none()\n     }\n }\n+\n+#[test]\n+fn test_basic() {\n+    let value_cell = Cell(~10);\n+    assert !value_cell.is_empty();\n+    let value = value_cell.take();\n+    assert value == ~10;\n+    assert value_cell.is_empty();\n+    value_cell.put_back(value);\n+    assert !value_cell.is_empty();\n+}\n+\n+#[test]\n+#[should_fail]\n+#[ignore(cfg(windows))]\n+fn test_take_empty() {\n+    let value_cell = empty_cell::<~int>();\n+    value_cell.take();\n+}\n+\n+#[test]\n+#[should_fail]\n+#[ignore(cfg(windows))]\n+fn test_put_back_non_empty() {\n+    let value_cell = Cell(~10);\n+    value_cell.put_back(~20);\n+}\n\\ No newline at end of file"}]}