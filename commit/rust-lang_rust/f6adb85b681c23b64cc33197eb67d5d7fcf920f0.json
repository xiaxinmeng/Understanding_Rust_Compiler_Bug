{"sha": "f6adb85b681c23b64cc33197eb67d5d7fcf920f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2YWRiODViNjgxYzIzYjY0Y2MzMzE5N2ViNjdkNWQ3ZmNmOTIwZjA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-25T16:11:58Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-25T16:11:58Z"}, "message": "add gc request", "tree": {"sha": "ca0ee39e7f1305019954b3a413a06f9431cb6648", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca0ee39e7f1305019954b3a413a06f9431cb6648"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6adb85b681c23b64cc33197eb67d5d7fcf920f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6adb85b681c23b64cc33197eb67d5d7fcf920f0", "html_url": "https://github.com/rust-lang/rust/commit/f6adb85b681c23b64cc33197eb67d5d7fcf920f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6adb85b681c23b64cc33197eb67d5d7fcf920f0/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6df1f71b7d0db209978595dc9be496e7f2ef88ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/6df1f71b7d0db209978595dc9be496e7f2ef88ec", "html_url": "https://github.com/rust-lang/rust/commit/6df1f71b7d0db209978595dc9be496e7f2ef88ec"}], "stats": {"total": 55, "additions": 44, "deletions": 11}, "files": [{"sha": "961f7b230d78c6f95a33719d81570bc00f31ef13", "filename": "crates/ra_ide_api/src/imp.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f6adb85b681c23b64cc33197eb67d5d7fcf920f0/crates%2Fra_ide_api%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6adb85b681c23b64cc33197eb67d5d7fcf920f0/crates%2Fra_ide_api%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fimp.rs?ref=f6adb85b681c23b64cc33197eb67d5d7fcf920f0", "patch": "@@ -72,13 +72,14 @@ impl db::RootDatabase {\n         self.set_source_root(root_id, Arc::new(source_root));\n     }\n \n-    #[allow(unused)]\n     /// Ideally, we should call this function from time to time to collect heavy\n     /// syntax trees. However, if we actually do that, everything is recomputed\n     /// for some reason. Needs investigation.\n-    fn gc_syntax_trees(&mut self) {\n+    pub(crate) fn collect_garbage(&mut self) {\n         self.query(ra_db::SourceFileQuery)\n             .sweep(salsa::SweepStrategy::default().discard_values());\n+        self.query(hir::db::HirSourceFileQuery)\n+            .sweep(salsa::SweepStrategy::default().discard_values());\n         self.query(hir::db::FileItemsQuery)\n             .sweep(salsa::SweepStrategy::default().discard_values());\n         self.query(hir::db::FileItemQuery)"}, {"sha": "ffd026b045f6337be6538405b11e895d45ec9734", "filename": "crates/ra_ide_api/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f6adb85b681c23b64cc33197eb67d5d7fcf920f0/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6adb85b681c23b64cc33197eb67d5d7fcf920f0/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Flib.rs?ref=f6adb85b681c23b64cc33197eb67d5d7fcf920f0", "patch": "@@ -285,6 +285,10 @@ impl AnalysisHost {\n     pub fn apply_change(&mut self, change: AnalysisChange) {\n         self.db.apply_change(change)\n     }\n+\n+    pub fn collect_garbage(&mut self) {\n+        self.db.collect_garbage();\n+    }\n }\n \n /// Analysis is a snapshot of a world state at a moment in time. It is the main"}, {"sha": "ddd20a41fc68ca84690d0b6d8ab72caff341ce5e", "filename": "crates/ra_lsp_server/src/main_loop.rs", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f6adb85b681c23b64cc33197eb67d5d7fcf920f0/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6adb85b681c23b64cc33197eb67d5d7fcf920f0/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs?ref=f6adb85b681c23b64cc33197eb67d5d7fcf920f0", "patch": "@@ -205,17 +205,26 @@ fn main_loop_inner(\n                         Some(req) => req,\n                         None => return Ok(()),\n                     };\n-                    match on_request(state, pending_requests, pool, &task_sender, req)? {\n-                        None => (),\n-                        Some(req) => {\n-                            log::error!(\"unknown request: {:?}\", req);\n-                            let resp = RawResponse::err(\n-                                req.id,\n-                                ErrorCode::MethodNotFound as i32,\n-                                \"unknown request\".to_string(),\n-                            );\n+                    match req.cast::<req::CollectGarbage>() {\n+                        Ok((id, ())) => {\n+                            state.collect_garbadge();\n+                            let resp = RawResponse::ok::<req::CollectGarbage>(id, &());\n                             msg_sender.send(RawMessage::Response(resp)).unwrap()\n                         }\n+                        Err(req) => {\n+                            match on_request(state, pending_requests, pool, &task_sender, req)? {\n+                                None => (),\n+                                Some(req) => {\n+                                    log::error!(\"unknown request: {:?}\", req);\n+                                    let resp = RawResponse::err(\n+                                        req.id,\n+                                        ErrorCode::MethodNotFound as i32,\n+                                        \"unknown request\".to_string(),\n+                                    );\n+                                    msg_sender.send(RawMessage::Response(resp)).unwrap()\n+                                }\n+                            }\n+                        }\n                     }\n                 }\n                 RawMessage::Notification(not) => {"}, {"sha": "5968e592b1071550bf7a30a01075cbe0550dce3d", "filename": "crates/ra_lsp_server/src/req.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f6adb85b681c23b64cc33197eb67d5d7fcf920f0/crates%2Fra_lsp_server%2Fsrc%2Freq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6adb85b681c23b64cc33197eb67d5d7fcf920f0/crates%2Fra_lsp_server%2Fsrc%2Freq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Freq.rs?ref=f6adb85b681c23b64cc33197eb67d5d7fcf920f0", "patch": "@@ -19,6 +19,14 @@ impl Request for AnalyzerStatus {\n     const METHOD: &'static str = \"ra/analyzerStatus\";\n }\n \n+pub enum CollectGarbage {}\n+\n+impl Request for CollectGarbage {\n+    type Params = ();\n+    type Result = ();\n+    const METHOD: &'static str = \"ra/collectGarbage\";\n+}\n+\n pub enum SyntaxTree {}\n \n impl Request for SyntaxTree {"}, {"sha": "bf04f1125eedf294be09ae6c5e8d0e79c438fd8a", "filename": "crates/ra_lsp_server/src/server_world.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f6adb85b681c23b64cc33197eb67d5d7fcf920f0/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6adb85b681c23b64cc33197eb67d5d7fcf920f0/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs?ref=f6adb85b681c23b64cc33197eb67d5d7fcf920f0", "patch": "@@ -231,6 +231,10 @@ impl ServerWorldState {\n             vfs: Arc::clone(&self.vfs),\n         }\n     }\n+\n+    pub fn collect_garbadge(&mut self) {\n+        self.analysis_host.collect_garbage()\n+    }\n }\n \n impl ServerWorld {"}, {"sha": "86683eb73e8714f4d3124fb2d6b91244607f4252", "filename": "editors/code/package.json", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f6adb85b681c23b64cc33197eb67d5d7fcf920f0/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/f6adb85b681c23b64cc33197eb67d5d7fcf920f0/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=f6adb85b681c23b64cc33197eb67d5d7fcf920f0", "patch": "@@ -98,6 +98,10 @@\n             {\n                 \"command\": \"ra-lsp.analyzerStatus\",\n                 \"title\": \"Status of rust-analyzer (debug)\"\n+            },\n+            {\n+                \"command\": \"ra-lsp.collectGarbage\",\n+                \"title\": \"Run rust-analyzer's GC\"\n             }\n         ],\n         \"keybindings\": ["}, {"sha": "dc7b01403ea8e9b5fe0c8ed4346c6c12279c4a0d", "filename": "editors/code/src/extension.ts", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f6adb85b681c23b64cc33197eb67d5d7fcf920f0/editors%2Fcode%2Fsrc%2Fextension.ts", "raw_url": "https://github.com/rust-lang/rust/raw/f6adb85b681c23b64cc33197eb67d5d7fcf920f0/editors%2Fcode%2Fsrc%2Fextension.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fextension.ts?ref=f6adb85b681c23b64cc33197eb67d5d7fcf920f0", "patch": "@@ -49,6 +49,9 @@ export function activate(context: vscode.ExtensionContext) {\n         'ra-lsp.analyzerStatus',\n         commands.analyzerStatus.makeCommand(context)\n     );\n+    registerCommand('ra-lsp.collectGarbage', () =>\n+        Server.client.sendRequest<null>('ra/collectGarbage', null)\n+    );\n     registerCommand('ra-lsp.syntaxTree', commands.syntaxTree.handle);\n     registerCommand('ra-lsp.extendSelection', commands.extendSelection.handle);\n     registerCommand('ra-lsp.matchingBrace', commands.matchingBrace.handle);"}]}