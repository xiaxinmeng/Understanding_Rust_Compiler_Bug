{"sha": "a7a6dedfe661a6d9d181afeb0fbaa894fcb7362b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3YTZkZWRmZTY2MWE2ZDlkMTgxYWZlYjBmYmFhODk0ZmNiNzM2MmI=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2019-09-17T07:58:55Z"}, "committer": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2019-09-17T07:58:55Z"}, "message": "Revert \"Rollup merge of #64451 - RalfJung:miri-manifest, r=pietroalbini\"\n\nThis reverts commit 7975973e2b806a7ee8e54b40f9e774528a777e31, reversing\nchanges made to f0320e54c7c2c923e2e05996ac1d74f781115bbc.", "tree": {"sha": "55f0179ad6ec3cb32a95d8aa803e042f1f227b69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55f0179ad6ec3cb32a95d8aa803e042f1f227b69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7a6dedfe661a6d9d181afeb0fbaa894fcb7362b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE1JbYPtLJAsc22U9xPgar6Auq8ZwFAl2AkkIACgkQPgar6Auq\n8ZySxg//V93283v0at/hxcpGKAFi90cC306ZUKMMWulV4SAcTYBUcvs3O2xwhklZ\ndpcGXvr1zHubAIwI42kiy9Ay6kwcsKuFXVzgLX7zuHUQ8n4SCLm3nKK54q1A0D/a\nQBLVZUDLeaKItgTYg2WQiE9P2EUgth+0xc2fZ0KvlqnuC3RmdmrYj3whQTFa2YBv\nhs3RKj0/bNlbcgHk4GforGxX6WhHlWOzNfkfue5uIMLYm2spemLEd+qkr+rqkUyY\nydZFSFUry6Ej4bmfmBA+kfpPYvtjlMEaVscDPGHQYboYdYaJnZH6DqWF4Do6YRlL\naADI8DpHG6oFHXQ0CIIa23jQAVx2+0FhVZ72htLd7ioAzOQAAHOFRAFxuLAhYQL5\nqtfP7B3Tc91lJF0lw5mfWgKOuWOc3LEJvGf16nXuL+jzGjQC0kGc5ekooDpJohVr\ndOfMWnaCLaD2d4d4UHV3SXqWSAW5owaNBmhWLYRm1WdOzz8NPNWTgvjESXfS8AHg\nMVmpmnmZesIg9vBDgtevrf6b7SporsbAsIjRPx88rTOBWyz4kwSe+Gl2wj4cCKKD\nWjDFNPWI7C4JGk8tmW1/jY2wOa2g4XYGUQt+rQ8zEwGvWk4+DqH04e20eAeY2WAy\n4s52D84wbFOE4vIe+TYPAyItHI//it6kafovykeTmUf/FSVi4l0=\n=JlFR\n-----END PGP SIGNATURE-----", "payload": "tree 55f0179ad6ec3cb32a95d8aa803e042f1f227b69\nparent 5670d048c0f88af9976b5505c7853b23dd06770d\nauthor Pietro Albini <pietro@pietroalbini.org> 1568707135 +0200\ncommitter Pietro Albini <pietro@pietroalbini.org> 1568707135 +0200\n\nRevert \"Rollup merge of #64451 - RalfJung:miri-manifest, r=pietroalbini\"\n\nThis reverts commit 7975973e2b806a7ee8e54b40f9e774528a777e31, reversing\nchanges made to f0320e54c7c2c923e2e05996ac1d74f781115bbc.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7a6dedfe661a6d9d181afeb0fbaa894fcb7362b", "html_url": "https://github.com/rust-lang/rust/commit/a7a6dedfe661a6d9d181afeb0fbaa894fcb7362b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7a6dedfe661a6d9d181afeb0fbaa894fcb7362b/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5670d048c0f88af9976b5505c7853b23dd06770d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5670d048c0f88af9976b5505c7853b23dd06770d", "html_url": "https://github.com/rust-lang/rust/commit/5670d048c0f88af9976b5505c7853b23dd06770d"}], "stats": {"total": 72, "additions": 9, "deletions": 63}, "files": [{"sha": "326f3b10b41967b9cc4774060c01c325e0f9cb25", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7a6dedfe661a6d9d181afeb0fbaa894fcb7362b/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/a7a6dedfe661a6d9d181afeb0fbaa894fcb7362b/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=a7a6dedfe661a6d9d181afeb0fbaa894fcb7362b", "patch": "@@ -201,9 +201,7 @@ dependencies = [\n name = \"build-manifest\"\n version = \"0.1.0\"\n dependencies = [\n- \"reqwest\",\n  \"serde\",\n- \"serde_json\",\n  \"toml\",\n ]\n "}, {"sha": "500d5766a899e4945874793483f1630daf55a8b1", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a7a6dedfe661a6d9d181afeb0fbaa894fcb7362b/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7a6dedfe661a6d9d181afeb0fbaa894fcb7362b/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=a7a6dedfe661a6d9d181afeb0fbaa894fcb7362b", "patch": "@@ -2000,8 +2000,6 @@ impl Step for HashSign {\n     }\n \n     fn run(self, builder: &Builder<'_>) {\n-        // This gets called by `promote-release`\n-        // (https://github.com/rust-lang/rust-central-station/tree/master/promote-release).\n         let mut cmd = builder.tool_cmd(Tool::BuildManifest);\n         if builder.config.dry_run {\n             return;\n@@ -2012,14 +2010,10 @@ impl Step for HashSign {\n         let addr = builder.config.dist_upload_addr.as_ref().unwrap_or_else(|| {\n             panic!(\"\\n\\nfailed to specify `dist.upload-addr` in `config.toml`\\n\\n\")\n         });\n-        let pass = if env::var(\"BUILD_MANIFEST_DISABLE_SIGNING\").is_err() {\n-            let file = builder.config.dist_gpg_password_file.as_ref().unwrap_or_else(|| {\n-                panic!(\"\\n\\nfailed to specify `dist.gpg-password-file` in `config.toml`\\n\\n\")\n-            });\n-            t!(fs::read_to_string(&file))\n-        } else {\n-            String::new()\n-        };\n+        let file = builder.config.dist_gpg_password_file.as_ref().unwrap_or_else(|| {\n+            panic!(\"\\n\\nfailed to specify `dist.gpg-password-file` in `config.toml`\\n\\n\")\n+        });\n+        let pass = t!(fs::read_to_string(&file));\n \n         let today = output(Command::new(\"date\").arg(\"+%Y-%m-%d\"));\n "}, {"sha": "c364479d8db13251be3caf4bc2a249b8c84df98d", "filename": "src/tools/build-manifest/Cargo.toml", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7a6dedfe661a6d9d181afeb0fbaa894fcb7362b/src%2Ftools%2Fbuild-manifest%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a7a6dedfe661a6d9d181afeb0fbaa894fcb7362b/src%2Ftools%2Fbuild-manifest%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2FCargo.toml?ref=a7a6dedfe661a6d9d181afeb0fbaa894fcb7362b", "patch": "@@ -7,5 +7,3 @@ edition = \"2018\"\n [dependencies]\n toml = \"0.5\"\n serde = { version = \"1.0\", features = [\"derive\"] }\n-serde_json = \"1.0\"\n-reqwest = \"0.9\""}, {"sha": "9ffa9391c820bd6fcfacda2178c78016278cc779", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 5, "deletions": 49, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/a7a6dedfe661a6d9d181afeb0fbaa894fcb7362b/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7a6dedfe661a6d9d181afeb0fbaa894fcb7362b/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=a7a6dedfe661a6d9d181afeb0fbaa894fcb7362b", "patch": "@@ -1,19 +1,12 @@\n-//! Build a dist manifest, hash and sign everything.\n-//! This gets called by `promote-release`\n-//! (https://github.com/rust-lang/rust-central-station/tree/master/promote-release)\n-//! via `x.py dist hash-and-sign`; the cmdline arguments are set up\n-//! by rustbuild (in `src/bootstrap/dist.rs`).\n-\n use toml;\n use serde::Serialize;\n \n use std::collections::BTreeMap;\n use std::env;\n use std::fs;\n-use std::io::{self, Read, Write, BufRead, BufReader};\n+use std::io::{self, Read, Write};\n use std::path::{PathBuf, Path};\n use std::process::{Command, Stdio};\n-use std::collections::HashMap;\n \n static HOSTS: &[&str] = &[\n     \"aarch64-unknown-linux-gnu\",\n@@ -153,9 +146,6 @@ static MINGW: &[&str] = &[\n     \"x86_64-pc-windows-gnu\",\n ];\n \n-static TOOLSTATE: &str =\n-    \"https://raw.githubusercontent.com/rust-lang-nursery/rust-toolstate/master/history/linux.tsv\";\n-\n #[derive(Serialize)]\n #[serde(rename_all = \"kebab-case\")]\n struct Manifest {\n@@ -280,7 +270,6 @@ fn main() {\n     // Do not ask for a passphrase while manually testing\n     let mut passphrase = String::new();\n     if should_sign {\n-        // `x.py` passes the passphrase via stdin.\n         t!(io::stdin().read_to_string(&mut passphrase));\n     }\n \n@@ -364,7 +353,6 @@ impl Builder {\n         self.lldb_git_commit_hash = self.git_commit_hash(\"lldb\", \"x86_64-unknown-linux-gnu\");\n         self.miri_git_commit_hash = self.git_commit_hash(\"miri\", \"x86_64-unknown-linux-gnu\");\n \n-        self.check_toolstate();\n         self.digest_and_sign();\n         let manifest = self.build_manifest();\n         self.write_channel_files(&self.rust_release, &manifest);\n@@ -374,37 +362,6 @@ impl Builder {\n         }\n     }\n \n-    /// If a tool does not pass its tests, don't ship it.\n-    /// Right now, we do this only for Miri.\n-    fn check_toolstate(&mut self) {\n-        // Get the toolstate for this rust revision.\n-        let rev = self.rust_git_commit_hash.as_ref().expect(\"failed to determine rust git hash\");\n-        let toolstates = reqwest::get(TOOLSTATE).expect(\"failed to get toolstates\");\n-        let toolstates = BufReader::new(toolstates);\n-        let toolstate = toolstates.lines()\n-            .find_map(|line| {\n-                let line = line.expect(\"failed to read toolstate lines\");\n-                let mut pieces = line.splitn(2, '\\t');\n-                let commit = pieces.next().expect(\"malformed toolstate line\");\n-                if commit != rev {\n-                    // Not the right commit.\n-                    return None;\n-                }\n-                // Return the 2nd piece, the JSON.\n-                Some(pieces.next().expect(\"malformed toolstate line\").to_owned())\n-            })\n-            .expect(\"failed to find toolstate for rust commit\");\n-        let toolstate: HashMap<String, String> =\n-            serde_json::from_str(&toolstate).expect(\"toolstate is malformed JSON\");\n-        // Mark some tools as missing based on toolstate.\n-        if toolstate.get(\"miri\").map(|s| &*s as &str) != Some(\"test-pass\") {\n-            println!(\"Miri tests are not passing, removing component\");\n-            self.miri_version = None;\n-            self.miri_git_commit_hash = None;\n-        }\n-    }\n-\n-    /// Hash all files, compute their signatures, and collect the hashes in `self.digests`.\n     fn digest_and_sign(&mut self) {\n         for file in t!(self.input.read_dir()).map(|e| t!(e).path()) {\n             let filename = file.file_name().unwrap().to_str().unwrap();\n@@ -575,20 +532,19 @@ impl Builder {\n             .as_ref()\n             .cloned()\n             .map(|version| (version, true))\n-            .unwrap_or_default(); // `is_present` defaults to `false` here.\n+            .unwrap_or_default();\n \n-        // Miri is nightly-only; never ship it for other trains.\n+        // miri needs to build std with xargo, which doesn't allow stable/beta:\n+        // <https://github.com/japaric/xargo/pull/204#issuecomment-374888868>\n         if pkgname == \"miri-preview\" && self.rust_release != \"nightly\" {\n-            is_present = false; // Pretend the component is entirely missing.\n+            is_present = false; // ignore it\n         }\n \n         let targets = targets.iter().map(|name| {\n             if is_present {\n-                // The component generally exists, but it might still be missing for this target.\n                 let filename = self.filename(pkgname, name);\n                 let digest = match self.digests.remove(&filename) {\n                     Some(digest) => digest,\n-                    // This component does not exist for this target -- skip it.\n                     None => return (name.to_string(), Target::unavailable()),\n                 };\n                 let xz_filename = filename.replace(\".tar.gz\", \".tar.xz\");"}]}