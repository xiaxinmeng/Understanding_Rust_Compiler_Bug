{"sha": "8a7f0d920ee09a43309188d9ad79d57b2b93e2be", "node_id": "C_kwDOAAsO6NoAKDhhN2YwZDkyMGVlMDlhNDMzMDkxODhkOWFkNzlkNTdiMmI5M2UyYmU", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2022-01-17T15:52:53Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2022-01-17T15:52:53Z"}, "message": "Allow macros to expand to or-patterns", "tree": {"sha": "719600baa3f8ebac9742c40da0c713cd52127e88", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/719600baa3f8ebac9742c40da0c713cd52127e88"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a7f0d920ee09a43309188d9ad79d57b2b93e2be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a7f0d920ee09a43309188d9ad79d57b2b93e2be", "html_url": "https://github.com/rust-lang/rust/commit/8a7f0d920ee09a43309188d9ad79d57b2b93e2be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a7f0d920ee09a43309188d9ad79d57b2b93e2be/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9700addc82111200a2150b9a796f62dd8e600ddf", "url": "https://api.github.com/repos/rust-lang/rust/commits/9700addc82111200a2150b9a796f62dd8e600ddf", "html_url": "https://github.com/rust-lang/rust/commit/9700addc82111200a2150b9a796f62dd8e600ddf"}], "stats": {"total": 40, "additions": 33, "deletions": 7}, "files": [{"sha": "16b9a9ea45978a058f0bc13afbd83dc00f7ee795", "filename": "crates/hir/src/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a7f0d920ee09a43309188d9ad79d57b2b93e2be/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a7f0d920ee09a43309188d9ad79d57b2b93e2be/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdiagnostics.rs?ref=8a7f0d920ee09a43309188d9ad79d57b2b93e2be", "patch": "@@ -164,7 +164,6 @@ pub struct MissingOkOrSomeInTailExpr {\n pub struct MissingMatchArms {\n     pub file: HirFileId,\n     pub match_expr: AstPtr<ast::Expr>,\n-    pub arms: AstPtr<ast::MatchArmList>,\n }\n \n #[derive(Debug)]"}, {"sha": "d3577552361273f3e79bcadfdbc4d15176768824", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8a7f0d920ee09a43309188d9ad79d57b2b93e2be/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a7f0d920ee09a43309188d9ad79d57b2b93e2be/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=8a7f0d920ee09a43309188d9ad79d57b2b93e2be", "patch": "@@ -1266,17 +1266,14 @@ impl DefWithBody {\n                             if let ast::Expr::MatchExpr(match_expr) =\n                                 &source_ptr.value.to_node(&root)\n                             {\n-                                if let (Some(match_expr), Some(arms)) =\n-                                    (match_expr.expr(), match_expr.match_arm_list())\n-                                {\n+                                if let Some(match_expr) = match_expr.expr() {\n                                     acc.push(\n                                         MissingMatchArms {\n                                             file: source_ptr.file_id,\n                                             match_expr: AstPtr::new(&match_expr),\n-                                            arms: AstPtr::new(&arms),\n                                         }\n                                         .into(),\n-                                    )\n+                                    );\n                                 }\n                             }\n                         }"}, {"sha": "6bdcd41a790eb82d82347c0feb13607f349083e2", "filename": "crates/ide_diagnostics/src/handlers/missing_match_arms.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/8a7f0d920ee09a43309188d9ad79d57b2b93e2be/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmissing_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a7f0d920ee09a43309188d9ad79d57b2b93e2be/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmissing_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmissing_match_arms.rs?ref=8a7f0d920ee09a43309188d9ad79d57b2b93e2be", "patch": "@@ -900,6 +900,36 @@ fn foo() {\n         );\n     }\n \n+    #[test]\n+    fn macro_or_pat() {\n+        check_diagnostics_no_bails(\n+            r#\"\n+macro_rules! m {\n+    () => {\n+        Enum::Type1 | Enum::Type2\n+    };\n+}\n+\n+enum Enum {\n+    Type1,\n+    Type2,\n+    Type3,\n+}\n+\n+fn f(ty: Enum) {\n+    match ty {\n+        //^^ error: missing match arm\n+        m!() => (),\n+    }\n+\n+    match ty {\n+        m!() | Enum::Type3 => ()\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n     mod false_negatives {\n         //! The implementation of match checking here is a work in progress. As we roll this out, we\n         //! prefer false negatives to false positives (ideally there would be no false positives). This"}, {"sha": "4efbf9a606e1939bcdcd96398465e7cd1f201b5d", "filename": "crates/parser/src/grammar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a7f0d920ee09a43309188d9ad79d57b2b93e2be/crates%2Fparser%2Fsrc%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a7f0d920ee09a43309188d9ad79d57b2b93e2be/crates%2Fparser%2Fsrc%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar.rs?ref=8a7f0d920ee09a43309188d9ad79d57b2b93e2be", "patch": "@@ -112,7 +112,7 @@ pub(crate) mod entry {\n \n         pub(crate) fn pattern(p: &mut Parser) {\n             let m = p.start();\n-            patterns::pattern_single(p);\n+            patterns::pattern_top(p);\n             if p.at(EOF) {\n                 m.abandon(p);\n                 return;"}]}