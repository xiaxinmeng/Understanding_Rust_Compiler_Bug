{"sha": "048d0cda9708c122311ca9a48b352b5bb510d9fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0OGQwY2RhOTcwOGMxMjIzMTFjYTlhNDhiMzUyYjViYjUxMGQ5ZmU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-12-18T15:04:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-18T15:04:08Z"}, "message": "Merge #2587\n\n2587: Refactor goto tests to always specify texts r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "f448be34142365f77b62b6f90b2c2bbd85f1adb4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f448be34142365f77b62b6f90b2c2bbd85f1adb4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/048d0cda9708c122311ca9a48b352b5bb510d9fe", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd+j/pCRBK7hj4Ov3rIwAAdHIIAE/7/Ilds+IGVqVTT7ntcu5y\nQeCUHA9foacrtZ7LyIi2xy+QSxQ8woA2p/dODperPGI7ihb0mNE2CVHp5gddhCPk\nc3lsBuK/Qm58urc49zZ5KmyWYqQq70R1n9OW3+SkArZQ/WCL5tfp6lTXz9E58C+s\ni9xnBZ2k4HXvVHK7TQyzJVWLjGeirZLj52HlIjqMQQO+A+Jm26WaaS3eHCZSDGeB\nUO2mgyeRfuM8PnJ0MOC7dr4v6BQOTOgPq/gQ3FILoSYE96twwLI4u7Rd6jBOTrPP\n6wfNBNOd3YF0CKeZbM+2XWeXGNDg+OB15UHo9eXiGS3BT0ATL+Om7KKIKPzJPJY=\n=sdKn\n-----END PGP SIGNATURE-----\n", "payload": "tree f448be34142365f77b62b6f90b2c2bbd85f1adb4\nparent c651cf7cd11255b06d1be6cd0fb61b93461fabf4\nparent 46a299bceece6f8633d7c1518939efbb3a57fae3\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1576681448 +0000\ncommitter GitHub <noreply@github.com> 1576681448 +0000\n\nMerge #2587\n\n2587: Refactor goto tests to always specify texts r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/048d0cda9708c122311ca9a48b352b5bb510d9fe", "html_url": "https://github.com/rust-lang/rust/commit/048d0cda9708c122311ca9a48b352b5bb510d9fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/048d0cda9708c122311ca9a48b352b5bb510d9fe/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c651cf7cd11255b06d1be6cd0fb61b93461fabf4", "url": "https://api.github.com/repos/rust-lang/rust/commits/c651cf7cd11255b06d1be6cd0fb61b93461fabf4", "html_url": "https://github.com/rust-lang/rust/commit/c651cf7cd11255b06d1be6cd0fb61b93461fabf4"}, {"sha": "46a299bceece6f8633d7c1518939efbb3a57fae3", "url": "https://api.github.com/repos/rust-lang/rust/commits/46a299bceece6f8633d7c1518939efbb3a57fae3", "html_url": "https://github.com/rust-lang/rust/commit/46a299bceece6f8633d7c1518939efbb3a57fae3"}], "stats": {"total": 132, "additions": 80, "deletions": 52}, "files": [{"sha": "48757f17069c759e0407db2b78c8ab91addbe5aa", "filename": "crates/ra_ide/src/goto_definition.rs", "status": "modified", "additions": 78, "deletions": 50, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/048d0cda9708c122311ca9a48b352b5bb510d9fe/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/048d0cda9708c122311ca9a48b352b5bb510d9fe/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs?ref=048d0cda9708c122311ca9a48b352b5bb510d9fe", "patch": "@@ -225,30 +225,35 @@ mod tests {\n \n     use crate::mock_analysis::analysis_and_position;\n \n-    fn check_goto(fixture: &str, expected: &str) {\n+    fn check_goto(fixture: &str, expected: &str, expected_range: &str) {\n         let (analysis, pos) = analysis_and_position(fixture);\n \n         let mut navs = analysis.goto_definition(pos).unwrap().unwrap().info;\n         assert_eq!(navs.len(), 1);\n-        let nav = navs.pop().unwrap();\n-        nav.assert_match(expected);\n-    }\n \n-    fn check_goto_with_range_content(fixture: &str, expected: &str, expected_range: &str) {\n-        let (analysis, pos) = analysis_and_position(fixture);\n-\n-        let mut navs = analysis.goto_definition(pos).unwrap().unwrap().info;\n-        assert_eq!(navs.len(), 1);\n         let nav = navs.pop().unwrap();\n-        let file_text = analysis.file_text(pos.file_id).unwrap();\n+        let file_text = analysis.file_text(nav.file_id()).unwrap();\n \n-        let actual_full_range = &file_text[nav.full_range()];\n-        let actual_range = &file_text[nav.range()];\n+        let mut actual = file_text[nav.full_range()].to_string();\n+        if let Some(focus) = nav.focus_range() {\n+            actual += \"|\";\n+            actual += &file_text[focus];\n+        }\n+\n+        if !expected_range.contains(\"...\") {\n+            test_utils::assert_eq_text!(&actual, expected_range);\n+        } else {\n+            let mut parts = expected_range.split(\"...\");\n+            let prefix = parts.next().unwrap();\n+            let suffix = parts.next().unwrap();\n+            assert!(\n+                actual.starts_with(prefix) && actual.ends_with(suffix),\n+                \"\\nExpected: {}\\n Actual: {}\\n\",\n+                expected_range,\n+                actual\n+            );\n+        }\n \n-        test_utils::assert_eq_text!(\n-            &format!(\"{}|{}\", actual_full_range, actual_range),\n-            expected_range\n-        );\n         nav.assert_match(expected);\n     }\n \n@@ -261,6 +266,7 @@ mod tests {\n             enum E { X(Foo<|>) }\n             \",\n             \"Foo STRUCT_DEF FileId(1) [0; 11) [7; 10)\",\n+            \"struct Foo;|Foo\",\n         );\n     }\n \n@@ -273,6 +279,7 @@ mod tests {\n             enum E { X(<|>Foo) }\n             \",\n             \"Foo STRUCT_DEF FileId(1) [0; 11) [7; 10)\",\n+            \"struct Foo;|Foo\",\n         );\n     }\n \n@@ -285,12 +292,15 @@ mod tests {\n             mod a;\n             mod b;\n             enum E { X(Foo<|>) }\n+\n             //- /a.rs\n             struct Foo;\n+\n             //- /b.rs\n             struct Foo;\n             \",\n             \"Foo STRUCT_DEF FileId(2) [0; 11) [7; 10)\",\n+            \"struct Foo;|Foo\",\n         );\n     }\n \n@@ -300,20 +310,24 @@ mod tests {\n             \"\n             //- /lib.rs\n             mod <|>foo;\n+\n             //- /foo.rs\n             // empty\n             \",\n             \"foo SOURCE_FILE FileId(2) [0; 10)\",\n+            \"// empty\\n\\n\",\n         );\n \n         check_goto(\n             \"\n             //- /lib.rs\n             mod <|>foo;\n+\n             //- /foo/mod.rs\n             // empty\n             \",\n             \"foo SOURCE_FILE FileId(2) [0; 10)\",\n+            \"// empty\\n\\n\",\n         );\n     }\n \n@@ -323,17 +337,14 @@ mod tests {\n         check_goto(\n             \"\n             //- /lib.rs\n-            macro_rules! foo {\n-                () => {\n-                    {}\n-                };\n-            }\n+            macro_rules! foo { () => { () } }\n \n             fn bar() {\n                 <|>foo!();\n             }\n             \",\n-            \"foo MACRO_CALL FileId(1) [0; 50) [13; 16)\",\n+            \"foo MACRO_CALL FileId(1) [0; 33) [13; 16)\",\n+            \"macro_rules! foo { () => { () } }|foo\",\n         );\n     }\n \n@@ -350,13 +361,10 @@ mod tests {\n \n             //- /foo/lib.rs\n             #[macro_export]\n-            macro_rules! foo {\n-                () => {\n-                    {}\n-                };\n-            }\n+            macro_rules! foo { () => { () } }\n             \",\n-            \"foo MACRO_CALL FileId(2) [0; 66) [29; 32)\",\n+            \"foo MACRO_CALL FileId(2) [0; 49) [29; 32)\",\n+            \"#[macro_export]\\nmacro_rules! foo { () => { () } }|foo\",\n         );\n     }\n \n@@ -369,19 +377,16 @@ mod tests {\n \n             //- /foo/lib.rs\n             #[macro_export]\n-            macro_rules! foo {\n-                () => {\n-                    {}\n-                };\n-            }\n+            macro_rules! foo { () => { () } }\n             \",\n-            \"foo MACRO_CALL FileId(2) [0; 66) [29; 32)\",\n+            \"foo MACRO_CALL FileId(2) [0; 49) [29; 32)\",\n+            \"#[macro_export]\\nmacro_rules! foo { () => { () } }|foo\",\n         );\n     }\n \n     #[test]\n     fn goto_definition_works_for_macro_defined_fn_with_arg() {\n-        check_goto_with_range_content(\n+        check_goto(\n             \"\n             //- /lib.rs\n             macro_rules! define_fn {\n@@ -401,7 +406,7 @@ mod tests {\n \n     #[test]\n     fn goto_definition_works_for_macro_defined_fn_no_arg() {\n-        check_goto_with_range_content(\n+        check_goto(\n             \"\n             //- /lib.rs\n             macro_rules! define_fn {\n@@ -427,14 +432,15 @@ mod tests {\n             //- /lib.rs\n             struct Foo;\n             impl Foo {\n-                fn frobnicate(&self) {  }\n+                fn frobnicate(&self) { }\n             }\n \n             fn bar(foo: &Foo) {\n                 foo.frobnicate<|>();\n             }\n             \",\n-            \"frobnicate FN_DEF FileId(1) [27; 52) [30; 40)\",\n+            \"frobnicate FN_DEF FileId(1) [27; 51) [30; 40)\",\n+            \"fn frobnicate(&self) { }|frobnicate\",\n         );\n     }\n \n@@ -453,6 +459,7 @@ mod tests {\n             }\n             \",\n             \"spam RECORD_FIELD_DEF FileId(1) [17; 26) [17; 21)\",\n+            \"spam: u32|spam\",\n         );\n     }\n \n@@ -473,6 +480,7 @@ mod tests {\n             }\n             \",\n             \"spam RECORD_FIELD_DEF FileId(1) [17; 26) [17; 21)\",\n+            \"spam: u32|spam\",\n         );\n     }\n \n@@ -489,6 +497,7 @@ mod tests {\n             }\n             \",\n             \"TUPLE_FIELD_DEF FileId(1) [11; 14)\",\n+            \"u32\",\n         );\n     }\n \n@@ -499,14 +508,15 @@ mod tests {\n             //- /lib.rs\n             struct Foo;\n             impl Foo {\n-                fn frobnicate() {  }\n+                fn frobnicate() { }\n             }\n \n             fn bar(foo: &Foo) {\n                 Foo::frobnicate<|>();\n             }\n             \",\n-            \"frobnicate FN_DEF FileId(1) [27; 47) [30; 40)\",\n+            \"frobnicate FN_DEF FileId(1) [27; 46) [30; 40)\",\n+            \"fn frobnicate() { }|frobnicate\",\n         );\n     }\n \n@@ -524,6 +534,7 @@ mod tests {\n             }\n             \",\n             \"frobnicate FN_DEF FileId(1) [16; 32) [19; 29)\",\n+            \"fn frobnicate();|frobnicate\",\n         );\n     }\n \n@@ -543,6 +554,7 @@ mod tests {\n             }\n             \",\n             \"frobnicate FN_DEF FileId(1) [30; 46) [33; 43)\",\n+            \"fn frobnicate();|frobnicate\",\n         );\n     }\n \n@@ -559,6 +571,7 @@ mod tests {\n             }\n             \",\n             \"impl IMPL_BLOCK FileId(1) [12; 73)\",\n+            \"impl Foo {...}\",\n         );\n \n         check_goto(\n@@ -572,6 +585,7 @@ mod tests {\n             }\n             \",\n             \"impl IMPL_BLOCK FileId(1) [12; 73)\",\n+            \"impl Foo {...}\",\n         );\n \n         check_goto(\n@@ -585,6 +599,7 @@ mod tests {\n             }\n             \",\n             \"impl IMPL_BLOCK FileId(1) [15; 75)\",\n+            \"impl Foo {...}\",\n         );\n \n         check_goto(\n@@ -597,6 +612,7 @@ mod tests {\n             }\n             \",\n             \"impl IMPL_BLOCK FileId(1) [15; 62)\",\n+            \"impl Foo {...}\",\n         );\n     }\n \n@@ -616,6 +632,7 @@ mod tests {\n             }\n             \",\n             \"impl IMPL_BLOCK FileId(1) [49; 115)\",\n+            \"impl Make for Foo {...}\",\n         );\n \n         check_goto(\n@@ -632,6 +649,7 @@ mod tests {\n             }\n             \",\n             \"impl IMPL_BLOCK FileId(1) [49; 115)\",\n+            \"impl Make for Foo {...}\",\n         );\n     }\n \n@@ -643,6 +661,7 @@ mod tests {\n             struct Foo<|> { value: u32 }\n             \",\n             \"Foo STRUCT_DEF FileId(1) [0; 25) [7; 10)\",\n+            \"struct Foo { value: u32 }|Foo\",\n         );\n \n         check_goto(\n@@ -653,15 +672,16 @@ mod tests {\n             }\n             \"#,\n             \"field RECORD_FIELD_DEF FileId(1) [17; 30) [17; 22)\",\n+            \"field: string|field\",\n         );\n \n         check_goto(\n             \"\n             //- /lib.rs\n-            fn foo_test<|>() {\n-            }\n+            fn foo_test<|>() { }\n             \",\n             \"foo_test FN_DEF FileId(1) [0; 17) [3; 11)\",\n+            \"fn foo_test() { }|foo_test\",\n         );\n \n         check_goto(\n@@ -672,6 +692,7 @@ mod tests {\n             }\n             \",\n             \"Foo ENUM_DEF FileId(1) [0; 25) [5; 8)\",\n+            \"enum Foo {...}|Foo\",\n         );\n \n         check_goto(\n@@ -684,22 +705,25 @@ mod tests {\n             }\n             \",\n             \"Variant2 ENUM_VARIANT FileId(1) [29; 37) [29; 37)\",\n+            \"Variant2|Variant2\",\n         );\n \n         check_goto(\n             r#\"\n             //- /lib.rs\n-            static inner<|>: &str = \"\";\n+            static INNER<|>: &str = \"\";\n             \"#,\n-            \"inner STATIC_DEF FileId(1) [0; 24) [7; 12)\",\n+            \"INNER STATIC_DEF FileId(1) [0; 24) [7; 12)\",\n+            \"static INNER: &str = \\\"\\\";|INNER\",\n         );\n \n         check_goto(\n             r#\"\n             //- /lib.rs\n-            const inner<|>: &str = \"\";\n+            const INNER<|>: &str = \"\";\n             \"#,\n-            \"inner CONST_DEF FileId(1) [0; 23) [6; 11)\",\n+            \"INNER CONST_DEF FileId(1) [0; 23) [6; 11)\",\n+            \"const INNER: &str = \\\"\\\";|INNER\",\n         );\n \n         check_goto(\n@@ -708,24 +732,25 @@ mod tests {\n             type Thing<|> = Option<()>;\n             \"#,\n             \"Thing TYPE_ALIAS_DEF FileId(1) [0; 24) [5; 10)\",\n+            \"type Thing = Option<()>;|Thing\",\n         );\n \n         check_goto(\n             r#\"\n             //- /lib.rs\n-            trait Foo<|> {\n-            }\n+            trait Foo<|> { }\n             \"#,\n             \"Foo TRAIT_DEF FileId(1) [0; 13) [6; 9)\",\n+            \"trait Foo { }|Foo\",\n         );\n \n         check_goto(\n             r#\"\n             //- /lib.rs\n-            mod bar<|> {\n-            }\n+            mod bar<|> { }\n             \"#,\n             \"bar MODULE FileId(1) [0; 11) [4; 7)\",\n+            \"mod bar { }|bar\",\n         );\n     }\n \n@@ -746,6 +771,7 @@ mod tests {\n             mod confuse_index { fn foo(); }\n             \",\n             \"foo FN_DEF FileId(1) [52; 63) [55; 58)\",\n+            \"fn foo() {}|foo\",\n         );\n     }\n \n@@ -774,6 +800,7 @@ mod tests {\n             }\n             \",\n             \"foo FN_DEF FileId(1) [398; 415) [401; 404)\",\n+            \"fn foo() -> i8 {}|foo\",\n         );\n     }\n \n@@ -787,6 +814,7 @@ mod tests {\n             }\n             \",\n             \"T TYPE_PARAM FileId(1) [11; 12)\",\n+            \"T\",\n         );\n     }\n }"}, {"sha": "659f77b71a1cef23a47c8d896f2a44e71539a2ca", "filename": "crates/test_utils/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/048d0cda9708c122311ca9a48b352b5bb510d9fe/crates%2Ftest_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/048d0cda9708c122311ca9a48b352b5bb510d9fe/crates%2Ftest_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Flib.rs?ref=048d0cda9708c122311ca9a48b352b5bb510d9fe", "patch": "@@ -207,8 +207,8 @@ pub fn lines_match(expected: &str, actual: &str) -> bool {\n     // Let's not deal with / vs \\ (windows...)\n     // First replace backslash-escaped backslashes with forward slashes\n     // which can occur in, for example, JSON output\n-    let expected = expected.replace(\"\\\\\\\\\", \"/\").replace(\"\\\\\", \"/\");\n-    let mut actual: &str = &actual.replace(\"\\\\\\\\\", \"/\").replace(\"\\\\\", \"/\");\n+    let expected = expected.replace(r\"\\\\\", \"/\").replace(r\"\\\", \"/\");\n+    let mut actual: &str = &actual.replace(r\"\\\\\", \"/\").replace(r\"\\\", \"/\");\n     for (i, part) in expected.split(\"[..]\").enumerate() {\n         match actual.find(part) {\n             Some(j) => {"}]}