{"sha": "406852ae0d92e5dfda890fa75ac522963065f903", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwNjg1MmFlMGQ5MmU1ZGZkYTg5MGZhNzVhYzUyMjk2MzA2NWY5MDM=", "commit": {"author": {"name": "CAD97", "email": "cad97@cad97.com", "date": "2020-05-20T00:00:29Z"}, "committer": {"name": "CAD97", "email": "cad97@cad97.com", "date": "2020-05-20T02:31:31Z"}, "message": "Resolve overflow behavior for RangeFrom", "tree": {"sha": "5cabab00bbffa68a3f7c96f86e7d311116935591", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5cabab00bbffa68a3f7c96f86e7d311116935591"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/406852ae0d92e5dfda890fa75ac522963065f903", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/406852ae0d92e5dfda890fa75ac522963065f903", "html_url": "https://github.com/rust-lang/rust/commit/406852ae0d92e5dfda890fa75ac522963065f903", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/406852ae0d92e5dfda890fa75ac522963065f903/comments", "author": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a7dfda40a3e798bf086bd58cc7e5e09deb808b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a7dfda40a3e798bf086bd58cc7e5e09deb808b5", "html_url": "https://github.com/rust-lang/rust/commit/3a7dfda40a3e798bf086bd58cc7e5e09deb808b5"}], "stats": {"total": 24, "additions": 11, "deletions": 13}, "files": [{"sha": "75cbda34662106c149f01fadb2d823f20abf14f7", "filename": "src/libcore/iter/range.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/406852ae0d92e5dfda890fa75ac522963065f903/src%2Flibcore%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406852ae0d92e5dfda890fa75ac522963065f903/src%2Flibcore%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Frange.rs?ref=406852ae0d92e5dfda890fa75ac522963065f903", "patch": "@@ -551,15 +551,7 @@ impl<A: Step> Iterator for ops::RangeFrom<A> {\n \n     #[inline]\n     fn nth(&mut self, n: usize) -> Option<A> {\n-        // If we would jump over the maximum value, panic immediately.\n-        // This is consistent with behavior before the Step redesign,\n-        // even though it's inconsistent with n `next` calls.\n-        // To get consistent behavior, change it to use `forward` instead.\n-        // This change should go through FCP separately to the redesign, so is for now left as a\n-        // FIXME: make this consistent\n-        let plus_n =\n-            Step::forward_checked(self.start.clone(), n).expect(\"overflow in RangeFrom::nth\");\n-        // The final step should always be debug-checked.\n+        let plus_n = Step::forward(self.start.clone(), n);\n         self.start = Step::forward(plus_n.clone(), 1);\n         Some(plus_n)\n     }"}, {"sha": "d86f39c4550c843fc3aa8f5212ccc5c633710e46", "filename": "src/libcore/ops/range.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/406852ae0d92e5dfda890fa75ac522963065f903/src%2Flibcore%2Fops%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406852ae0d92e5dfda890fa75ac522963065f903/src%2Flibcore%2Fops%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Frange.rs?ref=406852ae0d92e5dfda890fa75ac522963065f903", "patch": "@@ -151,10 +151,16 @@ impl<Idx: PartialOrd<Idx>> Range<Idx> {\n ///\n /// The `RangeFrom` `start..` contains all values with `x >= start`.\n ///\n-/// *Note*: Currently, no overflow checking is done for the [`Iterator`]\n-/// implementation; if you use an integer range and the integer overflows, it\n-/// might panic in debug mode or create an endless loop in release mode. **This\n-/// overflow behavior might change in the future.**\n+/// *Note*: Overflow in the [`Iterator`] implementation (when the contained\n+/// data type reaches its numerical limit) is allowed to panic, wrap, or\n+/// saturate. This behavior is defined by the implementation of the [`Step`]\n+/// trait. For primitive integers, this follows the normal rules, and respects\n+/// the overflow checks profile (panic in debug, wrap in release). Note also\n+/// that overflow happens earlier than you might assume: the overflow happens\n+/// in the call to `next` that yields the maximum value, as the range must be\n+/// set to a state to yield the next value.\n+///\n+/// [`Step`]: crate::iter::Step\n ///\n /// # Examples\n ///"}]}