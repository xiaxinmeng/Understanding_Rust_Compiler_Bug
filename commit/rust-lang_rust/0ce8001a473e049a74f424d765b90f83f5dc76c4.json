{"sha": "0ce8001a473e049a74f424d765b90f83f5dc76c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjZTgwMDFhNDczZTA0OWE3NGY0MjRkNzY1YjkwZjgzZjVkYzc2YzQ=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2021-07-29T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2021-07-29T11:28:08Z"}, "message": "Flatten compression caches into symbol mangler\n\nThe compression caches currently don't have any dedicated functionality\nthat would benefit from being separated. Incorporating caches directly\ninto the symbol manger also avoids dynamic memory allocation.\n\nThe symbol mangler, which is often passed by value, is now slightly\nlarger. This aspect will be addressed by a follow-up commit.", "tree": {"sha": "765539957e384c3d86b1c0b766d4000056777f4c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/765539957e384c3d86b1c0b766d4000056777f4c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ce8001a473e049a74f424d765b90f83f5dc76c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ce8001a473e049a74f424d765b90f83f5dc76c4", "html_url": "https://github.com/rust-lang/rust/commit/0ce8001a473e049a74f424d765b90f83f5dc76c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ce8001a473e049a74f424d765b90f83f5dc76c4/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8307072edf74f68f89e736d242d32b17eeb385d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/8307072edf74f68f89e736d242d32b17eeb385d7", "html_url": "https://github.com/rust-lang/rust/commit/8307072edf74f68f89e736d242d32b17eeb385d7"}], "stats": {"total": 43, "additions": 18, "deletions": 25}, "files": [{"sha": "6a1360da4ee9ee4ce746588c8dec7e5eea747e61", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 18, "deletions": 25, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/0ce8001a473e049a74f424d765b90f83f5dc76c4/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ce8001a473e049a74f424d765b90f83f5dc76c4/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=0ce8001a473e049a74f424d765b90f83f5dc76c4", "patch": "@@ -25,13 +25,10 @@ pub(super) fn mangle(\n     let prefix = \"_R\";\n     let mut cx = SymbolMangler {\n         tcx,\n-        compress: Box::new(CompressionCaches {\n-            start_offset: prefix.len(),\n-\n-            paths: FxHashMap::default(),\n-            types: FxHashMap::default(),\n-            consts: FxHashMap::default(),\n-        }),\n+        start_offset: prefix.len(),\n+        paths: FxHashMap::default(),\n+        types: FxHashMap::default(),\n+        consts: FxHashMap::default(),\n         binders: vec![],\n         out: String::from(prefix),\n     };\n@@ -55,16 +52,6 @@ pub(super) fn mangle(\n     cx.out\n }\n \n-struct CompressionCaches<'tcx> {\n-    // The length of the prefix in `out` (e.g. 2 for `_R`).\n-    start_offset: usize,\n-\n-    // The values are start positions in `out`, in bytes.\n-    paths: FxHashMap<(DefId, &'tcx [GenericArg<'tcx>]), usize>,\n-    types: FxHashMap<Ty<'tcx>, usize>,\n-    consts: FxHashMap<&'tcx ty::Const<'tcx>, usize>,\n-}\n-\n struct BinderLevel {\n     /// The range of distances from the root of what's\n     /// being printed, to the lifetimes in a binder.\n@@ -81,9 +68,15 @@ struct BinderLevel {\n \n struct SymbolMangler<'tcx> {\n     tcx: TyCtxt<'tcx>,\n-    compress: Box<CompressionCaches<'tcx>>,\n     binders: Vec<BinderLevel>,\n     out: String,\n+\n+    /// The length of the prefix in `out` (e.g. 2 for `_R`).\n+    start_offset: usize,\n+    /// The values are start positions in `out`, in bytes.\n+    paths: FxHashMap<(DefId, &'tcx [GenericArg<'tcx>]), usize>,\n+    types: FxHashMap<Ty<'tcx>, usize>,\n+    consts: FxHashMap<&'tcx ty::Const<'tcx>, usize>,\n }\n \n impl SymbolMangler<'tcx> {\n@@ -177,7 +170,7 @@ impl SymbolMangler<'tcx> {\n \n     fn print_backref(mut self, i: usize) -> Result<Self, !> {\n         self.push(\"B\");\n-        self.push_integer_62((i - self.compress.start_offset) as u64);\n+        self.push_integer_62((i - self.start_offset) as u64);\n         Ok(self)\n     }\n \n@@ -236,7 +229,7 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n         def_id: DefId,\n         substs: &'tcx [GenericArg<'tcx>],\n     ) -> Result<Self::Path, Self::Error> {\n-        if let Some(&i) = self.compress.paths.get(&(def_id, substs)) {\n+        if let Some(&i) = self.paths.get(&(def_id, substs)) {\n             return self.print_backref(i);\n         }\n         let start = self.out.len();\n@@ -246,7 +239,7 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n         // Only cache paths that do not refer to an enclosing\n         // binder (which would change depending on context).\n         if !substs.iter().any(|k| k.has_escaping_bound_vars()) {\n-            self.compress.paths.insert((def_id, substs), start);\n+            self.paths.insert((def_id, substs), start);\n         }\n         Ok(self)\n     }\n@@ -365,7 +358,7 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n             return Ok(self);\n         }\n \n-        if let Some(&i) = self.compress.types.get(&ty) {\n+        if let Some(&i) = self.types.get(&ty) {\n             return self.print_backref(i);\n         }\n         let start = self.out.len();\n@@ -474,7 +467,7 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n         // Only cache types that do not refer to an enclosing\n         // binder (which would change depending on context).\n         if !ty.has_escaping_bound_vars() {\n-            self.compress.types.insert(ty, start);\n+            self.types.insert(ty, start);\n         }\n         Ok(self)\n     }\n@@ -541,7 +534,7 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n     }\n \n     fn print_const(mut self, ct: &'tcx ty::Const<'tcx>) -> Result<Self::Const, Self::Error> {\n-        if let Some(&i) = self.compress.consts.get(&ct) {\n+        if let Some(&i) = self.consts.get(&ct) {\n             return self.print_backref(i);\n         }\n         let start = self.out.len();\n@@ -579,7 +572,7 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n         // Only cache consts that do not refer to an enclosing\n         // binder (which would change depending on context).\n         if !ct.has_escaping_bound_vars() {\n-            self.compress.consts.insert(ct, start);\n+            self.consts.insert(ct, start);\n         }\n         Ok(self)\n     }"}]}