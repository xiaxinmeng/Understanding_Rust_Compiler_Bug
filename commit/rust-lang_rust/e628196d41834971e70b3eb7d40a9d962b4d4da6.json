{"sha": "e628196d41834971e70b3eb7d40a9d962b4d4da6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2MjgxOTZkNDE4MzQ5NzFlNzBiM2ViN2Q0MGE5ZDk2MmI0ZDRkYTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-06T10:30:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-06T10:30:05Z"}, "message": "Auto merge of #57291 - euclio:method-call-suggestion, r=estebank\n\nuse structured suggestion for method calls\n\nFurthermore, don't suggest calling the method if it is part of a place\nexpression, as this is invalid syntax.\n\nI'm thinking it might be worth putting a label on the method assignment span like \"this is a method\" and removing the span from the \"methods are immutable\" text so it isn't reported twice.\n\nThe suggestions in `src/test/ui/did_you_mean/issue-40396.stderr` are suboptimal. I could check if the containing expression is `BinOp`, but I'm not sure if that's general enough. Any ideas?\n\nr? @estebank", "tree": {"sha": "7e40bc09eed45db3c1accaa9ec3f00c90366a761", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e40bc09eed45db3c1accaa9ec3f00c90366a761"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e628196d41834971e70b3eb7d40a9d962b4d4da6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e628196d41834971e70b3eb7d40a9d962b4d4da6", "html_url": "https://github.com/rust-lang/rust/commit/e628196d41834971e70b3eb7d40a9d962b4d4da6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e628196d41834971e70b3eb7d40a9d962b4d4da6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af2c159cc38f251a8e7d43cf1f98806392fbddcf", "url": "https://api.github.com/repos/rust-lang/rust/commits/af2c159cc38f251a8e7d43cf1f98806392fbddcf", "html_url": "https://github.com/rust-lang/rust/commit/af2c159cc38f251a8e7d43cf1f98806392fbddcf"}, {"sha": "e3fe0ee97b95abd13e257fa92c70248c0746165c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3fe0ee97b95abd13e257fa92c70248c0746165c", "html_url": "https://github.com/rust-lang/rust/commit/e3fe0ee97b95abd13e257fa92c70248c0746165c"}], "stats": {"total": 155, "additions": 116, "deletions": 39}, "files": [{"sha": "02687df6a94fc7a070f925a6a0aa4e86cc5e28f1", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e628196d41834971e70b3eb7d40a9d962b4d4da6/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e628196d41834971e70b3eb7d40a9d962b4d4da6/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=e628196d41834971e70b3eb7d40a9d962b4d4da6", "patch": "@@ -11,6 +11,7 @@ pub use self::CandidateSource::*;\n pub use self::suggest::{SelfSource, TraitInfo};\n \n use check::FnCtxt;\n+use errors::{Applicability, DiagnosticBuilder};\n use namespace::Namespace;\n use rustc_data_structures::sync::Lrc;\n use rustc::hir;\n@@ -123,6 +124,42 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n+    /// Add a suggestion to call the given method to the provided diagnostic.\n+    crate fn suggest_method_call(\n+        &self,\n+        err: &mut DiagnosticBuilder<'a>,\n+        msg: &str,\n+        method_name: ast::Ident,\n+        self_ty: Ty<'tcx>,\n+        call_expr_id: ast::NodeId,\n+    ) {\n+        let has_params = self\n+            .probe_for_name(\n+                method_name.span,\n+                probe::Mode::MethodCall,\n+                method_name,\n+                IsSuggestion(false),\n+                self_ty,\n+                call_expr_id,\n+                ProbeScope::TraitsInScope,\n+            )\n+            .and_then(|pick| {\n+                let sig = self.tcx.fn_sig(pick.item.def_id);\n+                Ok(sig.inputs().skip_binder().len() > 1)\n+            });\n+\n+        let (suggestion, applicability) = if has_params.unwrap_or_default() {\n+            (\n+                format!(\"{}(...)\", method_name),\n+                Applicability::HasPlaceholders,\n+            )\n+        } else {\n+            (format!(\"{}()\", method_name), Applicability::MaybeIncorrect)\n+        };\n+\n+        err.span_suggestion_with_applicability(method_name.span, msg, suggestion, applicability);\n+    }\n+\n     /// Performs method lookup. If lookup is successful, it will return the callee\n     /// and store an appropriate adjustment for the self-expr. In some cases it may\n     /// report an error (e.g., invoking the `drop` method)."}, {"sha": "1a5d164873d32f94a060e4029f9cd5a929a3dd52", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 46, "deletions": 6, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/e628196d41834971e70b3eb7d40a9d962b4d4da6/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e628196d41834971e70b3eb7d40a9d962b4d4da6/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=e628196d41834971e70b3eb7d40a9d962b4d4da6", "patch": "@@ -3442,19 +3442,37 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                            \"field `{}` of struct `{}` is private\",\n                                            field, struct_path);\n             // Also check if an accessible method exists, which is often what is meant.\n-            if self.method_exists(field, expr_t, expr.id, false) {\n-                err.note(&format!(\"a method `{}` also exists, perhaps you wish to call it\", field));\n+            if self.method_exists(field, expr_t, expr.id, false) && !self.expr_in_place(expr.id) {\n+                self.suggest_method_call(\n+                    &mut err,\n+                    &format!(\"a method `{}` also exists, call it with parentheses\", field),\n+                    field,\n+                    expr_t,\n+                    expr.id,\n+                );\n             }\n             err.emit();\n             field_ty\n         } else if field.name == keywords::Invalid.name() {\n             self.tcx().types.err\n         } else if self.method_exists(field, expr_t, expr.id, true) {\n-            type_error_struct!(self.tcx().sess, field.span, expr_t, E0615,\n+            let mut err = type_error_struct!(self.tcx().sess, field.span, expr_t, E0615,\n                                \"attempted to take value of method `{}` on type `{}`\",\n-                               field, expr_t)\n-                .help(\"maybe a `()` to call it is missing?\")\n-                .emit();\n+                               field, expr_t);\n+\n+            if !self.expr_in_place(expr.id) {\n+                self.suggest_method_call(\n+                    &mut err,\n+                    \"use parentheses to call the method\",\n+                    field,\n+                    expr_t,\n+                    expr.id\n+                );\n+            } else {\n+                err.help(\"methods are immutable and cannot be assigned to\");\n+            }\n+\n+            err.emit();\n             self.tcx().types.err\n         } else {\n             if !expr_t.is_primitive_ty() {\n@@ -5507,6 +5525,28 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             original_values,\n             query_result)\n     }\n+\n+    /// Returns whether an expression is contained inside the LHS of an assignment expression.\n+    fn expr_in_place(&self, mut expr_id: ast::NodeId) -> bool {\n+        let mut contained_in_place = false;\n+\n+        while let hir::Node::Expr(parent_expr) =\n+            self.tcx.hir().get(self.tcx.hir().get_parent_node(expr_id))\n+        {\n+            match &parent_expr.node {\n+                hir::ExprKind::Assign(lhs, ..) | hir::ExprKind::AssignOp(_, lhs, ..) => {\n+                    if lhs.id == expr_id {\n+                        contained_in_place = true;\n+                        break;\n+                    }\n+                }\n+                _ => (),\n+            }\n+            expr_id = parent_expr.id;\n+        }\n+\n+        contained_in_place\n+    }\n }\n \n pub fn check_bounds_are_used<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,"}, {"sha": "95f066c382c8d8d00b5b084e4f286411c644a286", "filename": "src/test/ui/assign-to-method.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e628196d41834971e70b3eb7d40a9d962b4d4da6/src%2Ftest%2Fui%2Fassign-to-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e628196d41834971e70b3eb7d40a9d962b4d4da6/src%2Ftest%2Fui%2Fassign-to-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassign-to-method.rs?ref=e628196d41834971e70b3eb7d40a9d962b4d4da6", "patch": "@@ -18,4 +18,5 @@ fn cat(in_x : usize, in_y : isize) -> Cat {\n fn main() {\n   let nyan : Cat = cat(52, 99);\n   nyan.speak = || println!(\"meow\"); //~ ERROR attempted to take value of method\n+  nyan.speak += || println!(\"meow\"); //~ ERROR attempted to take value of method\n }"}, {"sha": "f79f0750d89045641e9ae1cc92a9f23bcd4920c7", "filename": "src/test/ui/assign-to-method.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e628196d41834971e70b3eb7d40a9d962b4d4da6/src%2Ftest%2Fui%2Fassign-to-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e628196d41834971e70b3eb7d40a9d962b4d4da6/src%2Ftest%2Fui%2Fassign-to-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassign-to-method.stderr?ref=e628196d41834971e70b3eb7d40a9d962b4d4da6", "patch": "@@ -4,8 +4,16 @@ error[E0615]: attempted to take value of method `speak` on type `Cat`\n LL |   nyan.speak = || println!(\"meow\"); //~ ERROR attempted to take value of method\n    |        ^^^^^\n    |\n-   = help: maybe a `()` to call it is missing?\n+   = help: methods are immutable and cannot be assigned to\n \n-error: aborting due to previous error\n+error[E0615]: attempted to take value of method `speak` on type `Cat`\n+  --> $DIR/assign-to-method.rs:21:8\n+   |\n+LL |   nyan.speak += || println!(\"meow\"); //~ ERROR attempted to take value of method\n+   |        ^^^^^\n+   |\n+   = help: methods are immutable and cannot be assigned to\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0615`."}, {"sha": "86bbf2bf27ae6bb2c2d604dcbe3a6d8d0ca0708c", "filename": "src/test/ui/did_you_mean/issue-40396.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e628196d41834971e70b3eb7d40a9d962b4d4da6/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40396.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e628196d41834971e70b3eb7d40a9d962b4d4da6/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40396.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40396.stderr?ref=e628196d41834971e70b3eb7d40a9d962b4d4da6", "patch": "@@ -80,17 +80,13 @@ error[E0615]: attempted to take value of method `collect` on type `std::ops::Ran\n   --> $DIR/issue-40396.rs:2:13\n    |\n LL |     (0..13).collect<Vec<i32>>();\n-   |             ^^^^^^^\n-   |\n-   = help: maybe a `()` to call it is missing?\n+   |             ^^^^^^^ help: use parentheses to call the method: `collect()`\n \n error[E0615]: attempted to take value of method `collect` on type `std::ops::Range<{integer}>`\n   --> $DIR/issue-40396.rs:18:13\n    |\n LL |     (0..13).collect<Vec<i32>();\n-   |             ^^^^^^^\n-   |\n-   = help: maybe a `()` to call it is missing?\n+   |             ^^^^^^^ help: use parentheses to call the method: `collect()`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-40396.rs:18:29"}, {"sha": "d86ee5b9b4b96228ed5644ce67d39e63ecb02815", "filename": "src/test/ui/error-codes/E0615.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e628196d41834971e70b3eb7d40a9d962b4d4da6/src%2Ftest%2Fui%2Ferror-codes%2FE0615.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e628196d41834971e70b3eb7d40a9d962b4d4da6/src%2Ftest%2Fui%2Ferror-codes%2FE0615.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0615.stderr?ref=e628196d41834971e70b3eb7d40a9d962b4d4da6", "patch": "@@ -2,9 +2,7 @@ error[E0615]: attempted to take value of method `method` on type `Foo`\n   --> $DIR/E0615.rs:11:7\n    |\n LL |     f.method; //~ ERROR E0615\n-   |       ^^^^^^\n-   |\n-   = help: maybe a `()` to call it is missing?\n+   |       ^^^^^^ help: use parentheses to call the method: `method()`\n \n error: aborting due to previous error\n "}, {"sha": "7c70709c6b9787cf23310102ea907ffb1d14dfd5", "filename": "src/test/ui/implicit-method-bind.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e628196d41834971e70b3eb7d40a9d962b4d4da6/src%2Ftest%2Fui%2Fimplicit-method-bind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e628196d41834971e70b3eb7d40a9d962b4d4da6/src%2Ftest%2Fui%2Fimplicit-method-bind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimplicit-method-bind.stderr?ref=e628196d41834971e70b3eb7d40a9d962b4d4da6", "patch": "@@ -2,9 +2,7 @@ error[E0615]: attempted to take value of method `abs` on type `i32`\n   --> $DIR/implicit-method-bind.rs:2:20\n    |\n LL |     let _f = 10i32.abs; //~ ERROR attempted to take value of method\n-   |                    ^^^\n-   |\n-   = help: maybe a `()` to call it is missing?\n+   |                    ^^^ help: use parentheses to call the method: `abs()`\n \n error: aborting due to previous error\n "}, {"sha": "3e711243b4e176552962b70c705b0805f1edc11f", "filename": "src/test/ui/issues/issue-13853-2.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e628196d41834971e70b3eb7d40a9d962b4d4da6/src%2Ftest%2Fui%2Fissues%2Fissue-13853-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e628196d41834971e70b3eb7d40a9d962b4d4da6/src%2Ftest%2Fui%2Fissues%2Fissue-13853-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13853-2.stderr?ref=e628196d41834971e70b3eb7d40a9d962b4d4da6", "patch": "@@ -2,9 +2,7 @@ error[E0615]: attempted to take value of method `get` on type `std::boxed::Box<(\n   --> $DIR/issue-13853-2.rs:5:39\n    |\n LL | fn foo(res : Box<ResponseHook>) { res.get } //~ ERROR attempted to take value of method\n-   |                                       ^^^\n-   |\n-   = help: maybe a `()` to call it is missing?\n+   |                                       ^^^ help: use parentheses to call the method: `get()`\n \n error: aborting due to previous error\n "}, {"sha": "4eb38d10a7044667b6fcdecaaae183707b5c929d", "filename": "src/test/ui/issues/issue-26472.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e628196d41834971e70b3eb7d40a9d962b4d4da6/src%2Ftest%2Fui%2Fissues%2Fissue-26472.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e628196d41834971e70b3eb7d40a9d962b4d4da6/src%2Ftest%2Fui%2Fissues%2Fissue-26472.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26472.rs?ref=e628196d41834971e70b3eb7d40a9d962b4d4da6", "patch": "@@ -8,6 +8,6 @@ mod sub {\n \n fn main() {\n     let s = sub::S::new();\n-    let v = s.len;\n-    //~^ ERROR field `len` of struct `sub::S` is private\n+    let v = s.len; //~ ERROR field `len` of struct `sub::S` is private\n+    s.len = v; //~ ERROR field `len` of struct `sub::S` is private\n }"}, {"sha": "8c261d2a3f3eb9f59ad788e844df2274884fb507", "filename": "src/test/ui/issues/issue-26472.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e628196d41834971e70b3eb7d40a9d962b4d4da6/src%2Ftest%2Fui%2Fissues%2Fissue-26472.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e628196d41834971e70b3eb7d40a9d962b4d4da6/src%2Ftest%2Fui%2Fissues%2Fissue-26472.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26472.stderr?ref=e628196d41834971e70b3eb7d40a9d962b4d4da6", "patch": "@@ -1,11 +1,17 @@\n error[E0616]: field `len` of struct `sub::S` is private\n   --> $DIR/issue-26472.rs:11:13\n    |\n-LL |     let v = s.len;\n-   |             ^^^^^\n+LL |     let v = s.len; //~ ERROR field `len` of struct `sub::S` is private\n+   |             ^^---\n+   |               |\n+   |               help: a method `len` also exists, call it with parentheses: `len()`\n+\n+error[E0616]: field `len` of struct `sub::S` is private\n+  --> $DIR/issue-26472.rs:12:5\n    |\n-   = note: a method `len` also exists, perhaps you wish to call it\n+LL |     s.len = v; //~ ERROR field `len` of struct `sub::S` is private\n+   |     ^^^^^\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0616`."}, {"sha": "886d92aa9253d1d649595993547ddb5c5733a603", "filename": "src/test/ui/methods/method-missing-call.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e628196d41834971e70b3eb7d40a9d962b4d4da6/src%2Ftest%2Fui%2Fmethods%2Fmethod-missing-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e628196d41834971e70b3eb7d40a9d962b4d4da6/src%2Ftest%2Fui%2Fmethods%2Fmethod-missing-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-missing-call.stderr?ref=e628196d41834971e70b3eb7d40a9d962b4d4da6", "patch": "@@ -2,17 +2,13 @@ error[E0615]: attempted to take value of method `get_x` on type `Point`\n   --> $DIR/method-missing-call.rs:22:26\n    |\n LL |                         .get_x;//~ ERROR attempted to take value of method `get_x` on type `Point`\n-   |                          ^^^^^\n-   |\n-   = help: maybe a `()` to call it is missing?\n+   |                          ^^^^^ help: use parentheses to call the method: `get_x()`\n \n error[E0615]: attempted to take value of method `filter_map` on type `std::iter::Filter<std::iter::Map<std::slice::Iter<'_, {integer}>, [closure@$DIR/method-missing-call.rs:27:20: 27:25]>, [closure@$DIR/method-missing-call.rs:28:23: 28:35]>`\n   --> $DIR/method-missing-call.rs:29:16\n    |\n LL |               .filter_map; //~ ERROR attempted to take value of method `filter_map` on type\n-   |                ^^^^^^^^^^\n-   |\n-   = help: maybe a `()` to call it is missing?\n+   |                ^^^^^^^^^^ help: use parentheses to call the method: `filter_map(...)`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d84a22cee5ab2833884d9f6519090ded39e0b099", "filename": "src/test/ui/union/union-suggest-field.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e628196d41834971e70b3eb7d40a9d962b4d4da6/src%2Ftest%2Fui%2Funion%2Funion-suggest-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e628196d41834971e70b3eb7d40a9d962b4d4da6/src%2Ftest%2Fui%2Funion%2Funion-suggest-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-suggest-field.rs?ref=e628196d41834971e70b3eb7d40a9d962b4d4da6", "patch": "@@ -16,5 +16,6 @@ fn main() {\n                           //~| SUGGESTION principal\n \n     let y = u.calculate; //~ ERROR attempted to take value of method `calculate` on type `U`\n-                         //~| HELP maybe a `()` to call it is missing\n+                         //~| HELP use parentheses to call the method\n+                         //~| SUGGESTION calculate()\n }"}, {"sha": "8ea07360d0f22fe15f9ef0e0f0421be1a6bbfd80", "filename": "src/test/ui/union/union-suggest-field.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e628196d41834971e70b3eb7d40a9d962b4d4da6/src%2Ftest%2Fui%2Funion%2Funion-suggest-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e628196d41834971e70b3eb7d40a9d962b4d4da6/src%2Ftest%2Fui%2Funion%2Funion-suggest-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-suggest-field.stderr?ref=e628196d41834971e70b3eb7d40a9d962b4d4da6", "patch": "@@ -14,9 +14,7 @@ error[E0615]: attempted to take value of method `calculate` on type `U`\n   --> $DIR/union-suggest-field.rs:18:15\n    |\n LL |     let y = u.calculate; //~ ERROR attempted to take value of method `calculate` on type `U`\n-   |               ^^^^^^^^^\n-   |\n-   = help: maybe a `()` to call it is missing?\n+   |               ^^^^^^^^^ help: use parentheses to call the method: `calculate()`\n \n error: aborting due to 3 previous errors\n "}]}