{"sha": "e4337a9defcad3f2a65da285ab78f8ede554f379", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0MzM3YTlkZWZjYWQzZjJhNjVkYTI4NWFiNzhmOGVkZTU1NGYzNzk=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-01-25T04:24:57Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-01-25T04:24:57Z"}, "message": "remove remaining is_not_empty functions/methods", "tree": {"sha": "21d2bff727548efa00e3cf7225ab9e43a9d5a2c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21d2bff727548efa00e3cf7225ab9e43a9d5a2c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4337a9defcad3f2a65da285ab78f8ede554f379", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4337a9defcad3f2a65da285ab78f8ede554f379", "html_url": "https://github.com/rust-lang/rust/commit/e4337a9defcad3f2a65da285ab78f8ede554f379", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4337a9defcad3f2a65da285ab78f8ede554f379/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec3f6e1932db297d2a575e591d4c508d785a0a52", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec3f6e1932db297d2a575e591d4c508d785a0a52", "html_url": "https://github.com/rust-lang/rust/commit/ec3f6e1932db297d2a575e591d4c508d785a0a52"}], "stats": {"total": 71, "additions": 17, "deletions": 54}, "files": [{"sha": "82949bf200cf2184e7c10415a323e6f29b79e72f", "filename": "src/compiletest/compiletest.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4337a9defcad3f2a65da285ab78f8ede554f379/src%2Fcompiletest%2Fcompiletest.rc", "raw_url": "https://github.com/rust-lang/rust/raw/e4337a9defcad3f2a65da285ab78f8ede554f379/src%2Fcompiletest%2Fcompiletest.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rc?ref=e4337a9defcad3f2a65da285ab78f8ede554f379", "patch": "@@ -70,7 +70,7 @@ fn parse_config(args: ~[~str]) -> config {\n           getopts::optopt(~\"logfile\"),\n           getopts::optflag(~\"jit\")];\n \n-    assert (vec::is_not_empty(args));\n+    assert !args.is_empty();\n     let args_ = vec::tail(args);\n     let matches =\n         &match getopts::getopts(args_, opts) {"}, {"sha": "bb41da432b58ebfa3cc2f158e879acfcb58e0b00", "filename": "src/libcore/dlist.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4337a9defcad3f2a65da285ab78f8ede554f379/src%2Flibcore%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4337a9defcad3f2a65da285ab78f8ede554f379/src%2Flibcore%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdlist.rs?ref=e4337a9defcad3f2a65da285ab78f8ede554f379", "patch": "@@ -208,8 +208,6 @@ impl<T> DList<T> {\n     pure fn len(@self) -> uint { self.size }\n     /// Returns true if the list is empty. O(1).\n     pure fn is_empty(@self) -> bool { self.len() == 0 }\n-    /// Returns true if the list is not empty. O(1).\n-    pure fn is_not_empty(@self) -> bool { self.len() != 0 }\n \n     /// Add data to the head of the list. O(1).\n     fn push_head(@self, data: T) {\n@@ -648,8 +646,6 @@ mod tests {\n         let full1 = from_vec(~[1,2,3]);\n         assert empty.is_empty();\n         assert !full1.is_empty();\n-        assert !empty.is_not_empty();\n-        assert full1.is_not_empty();\n     }\n     #[test]\n     fn test_dlist_head_tail() {"}, {"sha": "312bfab58c00d313791864fd268de89e7040b71b", "filename": "src/libcore/str.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e4337a9defcad3f2a65da285ab78f8ede554f379/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4337a9defcad3f2a65da285ab78f8ede554f379/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=e4337a9defcad3f2a65da285ab78f8ede554f379", "patch": "@@ -1419,9 +1419,6 @@ pub pure fn is_ascii(s: &str) -> bool {\n /// Returns true if the string has length 0\n pub pure fn is_empty(s: &str) -> bool { len(s) == 0u }\n \n-/// Returns true if the string has length greater than 0\n-pub pure fn is_not_empty(s: &str) -> bool { !is_empty(s) }\n-\n /**\n  * Returns true if the string contains only whitespace\n  *\n@@ -2167,7 +2164,6 @@ pub trait StrSlice {\n     pure fn each_chari(it: fn(uint, char) -> bool);\n     pure fn ends_with(needle: &str) -> bool;\n     pure fn is_empty() -> bool;\n-    pure fn is_not_empty() -> bool;\n     pure fn is_whitespace() -> bool;\n     pure fn is_alphanumeric() -> bool;\n     pure fn len() -> uint;\n@@ -2229,9 +2225,6 @@ impl &str: StrSlice {\n     /// Returns true if the string has length 0\n     #[inline]\n     pure fn is_empty() -> bool { is_empty(self) }\n-    /// Returns true if the string has length greater than 0\n-    #[inline]\n-    pure fn is_not_empty() -> bool { is_not_empty(self) }\n     /**\n      * Returns true if the string contains only whitespace\n      *\n@@ -2739,12 +2732,6 @@ mod tests {\n         assert (!is_empty(~\"a\"));\n     }\n \n-    #[test]\n-    fn test_is_not_empty() {\n-        assert (is_not_empty(~\"a\"));\n-        assert (!is_not_empty(~\"\"));\n-    }\n-\n     #[test]\n     fn test_replace() {\n         let a = ~\"a\";"}, {"sha": "0faa72364f22132cee018ec85663648c7eca6e6e", "filename": "src/libcore/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4337a9defcad3f2a65da285ab78f8ede554f379/src%2Flibcore%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4337a9defcad3f2a65da285ab78f8ede554f379/src%2Flibcore%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Futil.rs?ref=e4337a9defcad3f2a65da285ab78f8ede554f379", "patch": "@@ -84,7 +84,7 @@ terminate normally, but instead directly return from a function.\n \n ~~~\n fn choose_weighted_item(v: &[Item]) -> Item {\n-    assert v.is_not_empty();\n+    assert !v.is_empty();\n     let mut so_far = 0u;\n     for v.each |item| {\n         so_far += item.weight;"}, {"sha": "e9d60d0f26923589e97a03101f02285eeb050e73", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e4337a9defcad3f2a65da285ab78f8ede554f379/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4337a9defcad3f2a65da285ab78f8ede554f379/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=e4337a9defcad3f2a65da285ab78f8ede554f379", "patch": "@@ -49,11 +49,6 @@ pub pure fn is_empty<T>(v: &[const T]) -> bool {\n     as_const_buf(v, |_p, len| len == 0u)\n }\n \n-/// Returns true if a vector contains some elements\n-pub pure fn is_not_empty<T>(v: &[const T]) -> bool {\n-    as_const_buf(v, |_p, len| len > 0u)\n-}\n-\n /// Returns true if two vectors have the same length\n pub pure fn same_length<T, U>(xs: &[const T], ys: &[const U]) -> bool {\n     len(xs) == len(ys)\n@@ -2515,12 +2510,6 @@ mod tests {\n         assert (!is_empty(~[0]));\n     }\n \n-    #[test]\n-    fn test_is_not_empty() {\n-        assert (is_not_empty(~[0]));\n-        assert (!is_not_empty::<int>(~[]));\n-    }\n-\n     #[test]\n     fn test_len_divzero() {\n         type Z = [i8 * 0];"}, {"sha": "1896730285f531bb647d21fefdbc7906510f3025", "filename": "src/librustc/back/rpath.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4337a9defcad3f2a65da285ab78f8ede554f379/src%2Flibrustc%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4337a9defcad3f2a65da285ab78f8ede554f379/src%2Flibrustc%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Frpath.rs?ref=e4337a9defcad3f2a65da285ab78f8ede554f379", "patch": "@@ -167,7 +167,7 @@ fn get_relative_to(abs1: &Path, abs2: &Path) -> Path {\n \n     path.push_all(vec::view(split2, start_idx, len2 - 1));\n \n-    if vec::is_not_empty(path) {\n+    if !path.is_empty() {\n         return Path(\"\").push_many(path);\n     } else {\n         return Path(\".\");"}, {"sha": "79ce755137efcc30c223262d164e64cdc8f3c9a3", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4337a9defcad3f2a65da285ab78f8ede554f379/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4337a9defcad3f2a65da285ab78f8ede554f379/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=e4337a9defcad3f2a65da285ab78f8ede554f379", "patch": "@@ -1018,8 +1018,8 @@ fn synthesize_crate_attrs(ecx: @encode_ctxt, crate: &crate) -> ~[attribute] {\n     fn synthesize_link_attr(ecx: @encode_ctxt, +items: ~[@meta_item]) ->\n        attribute {\n \n-        assert ecx.link_meta.name.is_not_empty();\n-        assert ecx.link_meta.vers.is_not_empty();\n+        assert !ecx.link_meta.name.is_empty();\n+        assert !ecx.link_meta.vers.is_empty();\n \n         let name_item =\n             attr::mk_name_value_item_str(~\"name\","}, {"sha": "f15817551b684934da41b02893f0644698e88168", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4337a9defcad3f2a65da285ab78f8ede554f379/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4337a9defcad3f2a65da285ab78f8ede554f379/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=e4337a9defcad3f2a65da285ab78f8ede554f379", "patch": "@@ -179,7 +179,7 @@ fn crate_matches(crate_data: @~[u8], +metas: ~[@ast::meta_item],\n                  hash: ~str) -> bool {\n     let attrs = decoder::get_crate_attributes(crate_data);\n     let linkage_metas = attr::find_linkage_metas(attrs);\n-    if hash.is_not_empty() {\n+    if !hash.is_empty() {\n         let chash = decoder::get_crate_hash(crate_data);\n         if chash != hash { return false; }\n     }"}, {"sha": "515666445e3aac614186adbc967e8b1c623e27b3", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4337a9defcad3f2a65da285ab78f8ede554f379/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4337a9defcad3f2a65da285ab78f8ede554f379/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=e4337a9defcad3f2a65da285ab78f8ede554f379", "patch": "@@ -820,7 +820,7 @@ fn check_item_path_statement(cx: ty::ctxt, it: @ast::item) {\n fn check_item_non_camel_case_types(cx: ty::ctxt, it: @ast::item) {\n     fn is_camel_case(cx: ty::ctxt, ident: ast::ident) -> bool {\n         let ident = cx.sess.str_of(ident);\n-        assert ident.is_not_empty();\n+        assert !ident.is_empty();\n         let ident = ident_without_trailing_underscores(ident);\n         let ident = ident_without_leading_underscores(ident);\n         char::is_uppercase(str::char_at(ident, 0)) &&"}, {"sha": "311245ccc345d314db056e1d2f8cdc3d3c758b3d", "filename": "src/librustdoc/attr_parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4337a9defcad3f2a65da285ab78f8ede554f379/src%2Flibrustdoc%2Fattr_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4337a9defcad3f2a65da285ab78f8ede554f379/src%2Flibrustdoc%2Fattr_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fattr_parser.rs?ref=e4337a9defcad3f2a65da285ab78f8ede554f379", "patch": "@@ -127,7 +127,7 @@ pub fn parse_hidden(+attrs: ~[ast::attribute]) -> bool {\n         match attr::get_meta_item_list(*meta) {\n           Some(metas) => {\n             let hiddens = attr::find_meta_items_by_name(metas, ~\"hidden\");\n-            vec::is_not_empty(hiddens)\n+            !hiddens.is_empty()\n           }\n           None => false\n         }"}, {"sha": "f53e0058b63bed53eafccbbea8b4abab42a61357", "filename": "src/librustdoc/desc_to_brief_pass.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e4337a9defcad3f2a65da285ab78f8ede554f379/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4337a9defcad3f2a65da285ab78f8ede554f379/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs?ref=e4337a9defcad3f2a65da285ab78f8ede554f379", "patch": "@@ -143,7 +143,7 @@ fn parse_desc(desc: ~str) -> Option<~str> {\n \n fn first_sentence(s: ~str) -> Option<~str> {\n     let paras = paragraphs(s);\n-    if vec::is_not_empty(paras) {\n+    if !paras.is_empty() {\n         let first_para = vec::head(paras);\n         Some(str::replace(first_sentence_(first_para), ~\"\\n\", ~\" \"))\n     } else {\n@@ -193,7 +193,7 @@ fn paragraphs(s: ~str) -> ~[~str] {\n             whitespace_lines += 1;\n         } else {\n             if whitespace_lines > 0 {\n-                if str::is_not_empty(accum) {\n+                if !accum.is_empty() {\n                     res += ~[accum];\n                     accum = ~\"\";\n                 }\n@@ -211,7 +211,7 @@ fn paragraphs(s: ~str) -> ~[~str] {\n         res\n     };\n \n-    if str::is_not_empty(accum) {\n+    if !accum.is_empty() {\n         paras + ~[accum]\n     } else {\n         paras"}, {"sha": "d97dae1bbb6993f1836e0e34c09caf244103d6c2", "filename": "src/librustdoc/unindent_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4337a9defcad3f2a65da285ab78f8ede554f379/src%2Flibrustdoc%2Funindent_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4337a9defcad3f2a65da285ab78f8ede554f379/src%2Flibrustdoc%2Funindent_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Funindent_pass.rs?ref=e4337a9defcad3f2a65da285ab78f8ede554f379", "patch": "@@ -78,7 +78,7 @@ fn unindent(s: ~str) -> ~str {\n         }\n     };\n \n-    if vec::is_not_empty(lines) {\n+    if !lines.is_empty() {\n         let unindented = ~[str::trim(vec::head(lines))]\n             + do par::map(vec::tail(lines)) |line| {\n             if str::is_whitespace(*line) {"}, {"sha": "0aee29932c55cdd078dcf65e05c7f7ed39fa4de7", "filename": "src/libstd/list.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e4337a9defcad3f2a65da285ab78f8ede554f379/src%2Flibstd%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4337a9defcad3f2a65da285ab78f8ede554f379/src%2Flibstd%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flist.rs?ref=e4337a9defcad3f2a65da285ab78f8ede554f379", "patch": "@@ -83,11 +83,6 @@ pub pure fn is_empty<T: Copy>(ls: @List<T>) -> bool {\n     }\n }\n \n-/// Returns true if the list is not empty\n-pub pure fn is_not_empty<T: Copy>(ls: @List<T>) -> bool {\n-    return !is_empty(ls);\n-}\n-\n /// Returns the length of a list\n pub pure fn len<T>(ls: @List<T>) -> uint {\n     let mut count = 0u;\n@@ -177,10 +172,6 @@ mod tests {\n         assert is_empty(empty);\n         assert !is_empty(full1);\n         assert !is_empty(full2);\n-\n-        assert !is_not_empty(empty);\n-        assert is_not_empty(full1);\n-        assert is_not_empty(full2);\n     }\n \n     #[test]"}, {"sha": "ed52fbd0f5a260de925ff39531ceb67b013899d5", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4337a9defcad3f2a65da285ab78f8ede554f379/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4337a9defcad3f2a65da285ab78f8ede554f379/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=e4337a9defcad3f2a65da285ab78f8ede554f379", "patch": "@@ -245,7 +245,7 @@ fn contains_name(metas: &[@ast::meta_item], name: &str) -> bool {\n }\n \n fn attrs_contains_name(attrs: &[ast::attribute], name: &str) -> bool {\n-    vec::is_not_empty(find_attrs_by_name(attrs, name))\n+    !find_attrs_by_name(attrs, name).is_empty()\n }\n \n fn first_attr_value_str_by_name(attrs: ~[ast::attribute], name: ~str)"}, {"sha": "6112313cf480881d5a85e442de50ba1b705c862f", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4337a9defcad3f2a65da285ab78f8ede554f379/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4337a9defcad3f2a65da285ab78f8ede554f379/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=e4337a9defcad3f2a65da285ab78f8ede554f379", "patch": "@@ -192,7 +192,7 @@ fn diagnosticcolor(lvl: level) -> u8 {\n fn print_diagnostic(topic: ~str, lvl: level, msg: &str) {\n     let use_color = term::color_supported() &&\n         io::stderr().get_type() == io::Screen;\n-    if str::is_not_empty(topic) {\n+    if !topic.is_empty() {\n         io::stderr().write_str(fmt!(\"%s \", topic));\n     }\n     if use_color {"}, {"sha": "0bd08250617d94acc66f4a1afe130b8ca0fa0146", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4337a9defcad3f2a65da285ab78f8ede554f379/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4337a9defcad3f2a65da285ab78f8ede554f379/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=e4337a9defcad3f2a65da285ab78f8ede554f379", "patch": "@@ -2237,7 +2237,7 @@ impl Parser {\n \n         fn check_expected_item(p: Parser, current_attrs: ~[attribute]) {\n             // If we have attributes then we should have an item\n-            if vec::is_not_empty(current_attrs) {\n+            if !current_attrs.is_empty() {\n                 p.fatal(~\"expected item after attrs\");\n             }\n         }"}, {"sha": "ae0af82057f4c487d8ec3536702490084251f5b6", "filename": "src/test/run-pass/non-boolean-pure-fns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4337a9defcad3f2a65da285ab78f8ede554f379/src%2Ftest%2Frun-pass%2Fnon-boolean-pure-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4337a9defcad3f2a65da285ab78f8ede554f379/src%2Ftest%2Frun-pass%2Fnon-boolean-pure-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnon-boolean-pure-fns.rs?ref=e4337a9defcad3f2a65da285ab78f8ede554f379", "patch": "@@ -23,7 +23,7 @@ pure fn pure_length<T: Copy>(ls: @List<T>) -> uint { pure_length_go(ls, 0u) }\n pure fn nonempty_list<T: Copy>(ls: @List<T>) -> bool { pure_length(ls) > 0u }\n \n fn safe_head<T: Copy>(ls: @List<T>) -> T {\n-    assert is_not_empty(ls);\n+    assert !is_empty(ls);\n     return head(ls);\n }\n "}, {"sha": "62b6ebf20ae372f64fdd43f2f14162571db9e1f7", "filename": "src/test/run-pass/zip-same-length.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4337a9defcad3f2a65da285ab78f8ede554f379/src%2Ftest%2Frun-pass%2Fzip-same-length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4337a9defcad3f2a65da285ab78f8ede554f379/src%2Ftest%2Frun-pass%2Fzip-same-length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fzip-same-length.rs?ref=e4337a9defcad3f2a65da285ab78f8ede554f379", "patch": "@@ -10,7 +10,7 @@\n \n // In this case, the code should compile and should\n // succeed at runtime\n-use vec::{head, is_not_empty, last, same_length, zip};\n+use vec::{head, last, same_length, zip};\n \n fn enum_chars(start: u8, end: u8) -> ~[char] {\n     assert start < end;"}]}