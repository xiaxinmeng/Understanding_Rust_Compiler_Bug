{"sha": "fc60282daea83a5deff651e6c5a93dbad4437be7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjNjAyODJkYWVhODNhNWRlZmY2NTFlNmM1YTkzZGJhZDQ0MzdiZTc=", "commit": {"author": {"name": "Solomon Ucko", "email": "solly.ucko@gmail.com", "date": "2020-04-29T02:40:18Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2020-06-20T22:51:20Z"}, "message": "impl PartialEq<Vec<B>> for &[A], &mut [A]", "tree": {"sha": "8887d83309f9b5c956dbb6745de8406de647093f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8887d83309f9b5c956dbb6745de8406de647093f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc60282daea83a5deff651e6c5a93dbad4437be7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEERijF2Cz/ZdaBZKeK+boUO5X/bYIFAl7ukugACgkQ+boUO5X/\nbYIF4BAAk8GxX3a9ASy6Ku3wuA19chL74pC+yvoRg6MqaJ9+VeXkUOf+byOAxA+C\nuy459rsbsZd5CKn8yrBWl2wrj0zOoKUQ8EH7WnU67Un/XJSod9hskPqxCQo1INQo\nKswEaB21j11ZJeupTU0OXesPWjh8cXuW7ZHHxTLQUdVZi6UtjRhjosfQ7sCHZS/U\nhySxHT5TflSOnf+bMlJ5Y/utD8uHlhLwWkxLB/DcfTx2ZeqKvvuWjxD+q79VCRLK\n1Mo10+kTaISylzp494JxkLXbh+TQB0MTc7dsrvlD0xDgt37d67i6g3RCJEgilFKy\nAmNpRUsK7AJ2TG+Vu6X7m+FFVk4YYsb+DcOiGuLIOOfWKOL2nl15rrumeBdS+eUi\nUPTfl70EPvXw1ikL/+CKB7Q4gr5QvHmK7JwTsreGO+MVk6NtPHONCQxCT4IWsMbh\nMAHnTbZ4mxumhNQne7fCxOqNLjHLHq0HuCPO8nPSQwK4gYw4GHScyKtZEsnYb7uA\n7vw17NOVwUFTK584nkvIfxF8uBiozmQGuPsuis7pbTj2TdIJBM4CpPftT/RhZl6q\nouefpzKK+xbFJILj+FNYkomwYejPkA5lghR81PKcCKjWu3E5d537sbYDKGTy9gvJ\npTeT26nm8gbfqk0ZWVnknfGIf0eVWnv45egi8nEGtQ2efWEGEes=\n=hzbl\n-----END PGP SIGNATURE-----", "payload": "tree 8887d83309f9b5c956dbb6745de8406de647093f\nparent 63b441aafbf52d6ba789ecc478455800c1a48df9\nauthor Solomon Ucko <solly.ucko@gmail.com> 1588128018 -0400\ncommitter David Tolnay <dtolnay@gmail.com> 1592693480 -0700\n\nimpl PartialEq<Vec<B>> for &[A], &mut [A]\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc60282daea83a5deff651e6c5a93dbad4437be7", "html_url": "https://github.com/rust-lang/rust/commit/fc60282daea83a5deff651e6c5a93dbad4437be7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc60282daea83a5deff651e6c5a93dbad4437be7/comments", "author": {"login": "sollyucko", "id": 15565481, "node_id": "MDQ6VXNlcjE1NTY1NDgx", "avatar_url": "https://avatars.githubusercontent.com/u/15565481?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sollyucko", "html_url": "https://github.com/sollyucko", "followers_url": "https://api.github.com/users/sollyucko/followers", "following_url": "https://api.github.com/users/sollyucko/following{/other_user}", "gists_url": "https://api.github.com/users/sollyucko/gists{/gist_id}", "starred_url": "https://api.github.com/users/sollyucko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sollyucko/subscriptions", "organizations_url": "https://api.github.com/users/sollyucko/orgs", "repos_url": "https://api.github.com/users/sollyucko/repos", "events_url": "https://api.github.com/users/sollyucko/events{/privacy}", "received_events_url": "https://api.github.com/users/sollyucko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63b441aafbf52d6ba789ecc478455800c1a48df9", "url": "https://api.github.com/repos/rust-lang/rust/commits/63b441aafbf52d6ba789ecc478455800c1a48df9", "html_url": "https://github.com/rust-lang/rust/commit/63b441aafbf52d6ba789ecc478455800c1a48df9"}], "stats": {"total": 59, "additions": 59, "deletions": 0}, "files": [{"sha": "62a252c8be2e0f2e2a6db75a8bf92e8ec7bdd0a0", "filename": "src/liballoc/tests/vec.rs", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/fc60282daea83a5deff651e6c5a93dbad4437be7/src%2Fliballoc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc60282daea83a5deff651e6c5a93dbad4437be7/src%2Fliballoc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fvec.rs?ref=fc60282daea83a5deff651e6c5a93dbad4437be7", "patch": "@@ -1,5 +1,6 @@\n use std::borrow::Cow;\n use std::collections::TryReserveError::*;\n+use std::fmt::Debug;\n use std::mem::size_of;\n use std::panic::{catch_unwind, AssertUnwindSafe};\n use std::vec::{Drain, IntoIter};\n@@ -1588,3 +1589,56 @@ fn test_push_growth_strategy() {\n         }\n     }\n }\n+\n+macro_rules! generate_assert_eq_vec_and_prim {\n+    ($name:ident<$B:ident>($type:ty)) => {\n+        fn $name<A: PartialEq<$B> + Debug, $B: Debug>(a: Vec<A>, b: $type) {\n+            assert!(a == b);\n+            assert_eq!(a, b);\n+        }\n+    };\n+}\n+\n+generate_assert_eq_vec_and_prim! { assert_eq_vec_and_slice  <B>(&[B])   }\n+generate_assert_eq_vec_and_prim! { assert_eq_vec_and_array_3<B>([B; 3]) }\n+\n+#[test]\n+fn partialeq_vec_and_prim() {\n+    assert_eq_vec_and_slice(vec![1, 2, 3], &[1, 2, 3]);\n+    assert_eq_vec_and_array_3(vec![1, 2, 3], [1, 2, 3]);\n+}\n+\n+macro_rules! assert_partial_eq_valid {\n+    ($a2:ident, $a3:ident; $b2:ident, $b3: ident) => {\n+        assert!($a2 == $b2);\n+        assert!($a2 != $b3);\n+        assert!($a3 != $b2);\n+        assert!($a3 == $b3);\n+        assert_eq!($a2, $b2);\n+        assert_ne!($a2, $b3);\n+        assert_ne!($a3, $b2);\n+        assert_eq!($a3, $b3);\n+    };\n+}\n+\n+#[test]\n+fn partialeq_vec_full() {\n+    let vec2: Vec<_> = vec![1, 2];\n+    let vec3: Vec<_> = vec![1, 2, 3];\n+    let slice2: &[_] = &[1, 2];\n+    let slice3: &[_] = &[1, 2, 3];\n+    let slicemut2: &[_] = &mut [1, 2];\n+    let slicemut3: &[_] = &mut [1, 2, 3];\n+    let array2: [_; 2] = [1, 2];\n+    let array3: [_; 3] = [1, 2, 3];\n+    let arrayref2: &[_; 2] = &[1, 2];\n+    let arrayref3: &[_; 3] = &[1, 2, 3];\n+\n+    assert_partial_eq_valid!(vec2,vec3; vec2,vec3);\n+    assert_partial_eq_valid!(vec2,vec3; slice2,slice3);\n+    assert_partial_eq_valid!(vec2,vec3; slicemut2,slicemut3);\n+    assert_partial_eq_valid!(slice2,slice3; vec2,vec3);\n+    assert_partial_eq_valid!(slicemut2,slicemut3; vec2,vec3);\n+    assert_partial_eq_valid!(vec2,vec3; array2,array3);\n+    assert_partial_eq_valid!(vec2,vec3; arrayref2,arrayref3);\n+}"}, {"sha": "c886fa4092752d6ef1ab22eb3f06c2ab89c32a4f", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fc60282daea83a5deff651e6c5a93dbad4437be7/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc60282daea83a5deff651e6c5a93dbad4437be7/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=fc60282daea83a5deff651e6c5a93dbad4437be7", "patch": "@@ -2362,6 +2362,8 @@ macro_rules! __impl_slice_eq1 {\n __impl_slice_eq1! { [] Vec<A>, Vec<B>, }\n __impl_slice_eq1! { [] Vec<A>, &[B], }\n __impl_slice_eq1! { [] Vec<A>, &mut [B], }\n+__impl_slice_eq1! { [] &[A], Vec<B>, }\n+__impl_slice_eq1! { [] &mut [A], Vec<B>, }\n __impl_slice_eq1! { [] Cow<'_, [A]>, Vec<B>, A: Clone }\n __impl_slice_eq1! { [] Cow<'_, [A]>, &[B], A: Clone }\n __impl_slice_eq1! { [] Cow<'_, [A]>, &mut [B], A: Clone }\n@@ -2371,6 +2373,9 @@ __impl_slice_eq1! { [const N: usize] Vec<A>, &[B; N], [B; N]: LengthAtMost32 }\n // NOTE: some less important impls are omitted to reduce code bloat\n // FIXME(Centril): Reconsider this?\n //__impl_slice_eq1! { [const N: usize] Vec<A>, &mut [B; N], [B; N]: LengthAtMost32 }\n+//__impl_slice_eq1! { [const N: usize] [A; N], Vec<B>, [A; N]: LengthAtMost32 }\n+//__impl_slice_eq1! { [const N: usize] &[A; N], Vec<B>, [A; N]: LengthAtMost32 }\n+//__impl_slice_eq1! { [const N: usize] &mut [A; N], Vec<B>, [A; N]: LengthAtMost32 }\n //__impl_slice_eq1! { [const N: usize] Cow<'a, [A]>, [B; N], [B; N]: LengthAtMost32 }\n //__impl_slice_eq1! { [const N: usize] Cow<'a, [A]>, &[B; N], [B; N]: LengthAtMost32 }\n //__impl_slice_eq1! { [const N: usize] Cow<'a, [A]>, &mut [B; N], [B; N]: LengthAtMost32 }"}]}