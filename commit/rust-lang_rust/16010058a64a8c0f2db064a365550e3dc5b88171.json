{"sha": "16010058a64a8c0f2db064a365550e3dc5b88171", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2MDEwMDU4YTY0YThjMGYyZGIwNjRhMzY1NTUwZTNkYzViODgxNzE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-24T23:06:58Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-24T23:06:58Z"}, "message": "rustdoc: Add types for native functions", "tree": {"sha": "9c50cbef414464385437d095f170a8361c8eb781", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c50cbef414464385437d095f170a8361c8eb781"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16010058a64a8c0f2db064a365550e3dc5b88171", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16010058a64a8c0f2db064a365550e3dc5b88171", "html_url": "https://github.com/rust-lang/rust/commit/16010058a64a8c0f2db064a365550e3dc5b88171", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16010058a64a8c0f2db064a365550e3dc5b88171/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2576a3c2c9584365fa134bfc1755112855ddfcd2", "url": "https://api.github.com/repos/rust-lang/rust/commits/2576a3c2c9584365fa134bfc1755112855ddfcd2", "html_url": "https://github.com/rust-lang/rust/commit/2576a3c2c9584365fa134bfc1755112855ddfcd2"}], "stats": {"total": 30, "additions": 29, "deletions": 1}, "files": [{"sha": "9e82f8c8d2b1f6af051cbf785958a7f22afba971", "filename": "src/rustdoc/tystr_pass.rs", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/16010058a64a8c0f2db064a365550e3dc5b88171/src%2Frustdoc%2Ftystr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16010058a64a8c0f2db064a365550e3dc5b88171/src%2Frustdoc%2Ftystr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Ftystr_pass.rs?ref=16010058a64a8c0f2db064a365550e3dc5b88171", "patch": "@@ -48,7 +48,11 @@ fn get_fn_sig(srv: astsrv::srv, fn_id: doc::ast_id) -> option<str> {\n         alt check ctxt.ast_map.get(fn_id) {\n           ast_map::node_item(@{\n             ident: ident,\n-            node: ast::item_fn(decl, _, blk), _\n+            node: ast::item_fn(decl, _, _), _\n+          }, _) |\n+          ast_map::node_native_item(@{\n+            ident: ident,\n+            node: ast::native_item_fn(decl, _), _\n           }, _) {\n             some(pprust::fun_to_str(decl, ident, []))\n           }\n@@ -62,6 +66,12 @@ fn should_add_fn_sig() {\n     assert doc.topmod.fns()[0].sig == some(\"fn a() -> int\");\n }\n \n+#[test]\n+fn should_add_native_fn_sig() {\n+    let doc = test::mk_doc(\"native mod a { fn a() -> int; }\");\n+    assert doc.topmod.nmods()[0].fns[0].sig == some(\"fn a() -> int\");\n+}\n+\n fn merge_ret_ty(\n     srv: astsrv::srv,\n     fn_id: doc::ast_id,\n@@ -83,6 +93,9 @@ fn get_ret_ty(srv: astsrv::srv, fn_id: doc::ast_id) -> option<str> {\n         alt check ctxt.ast_map.get(fn_id) {\n           ast_map::node_item(@{\n             node: ast::item_fn(decl, _, _), _\n+          }, _) |\n+          ast_map::node_native_item(@{\n+            node: ast::native_item_fn(decl, _), _\n           }, _) {\n             ret_ty_to_str(decl)\n           }\n@@ -111,6 +124,12 @@ fn should_not_add_nil_ret_type() {\n     assert doc.topmod.fns()[0].return.ty == none;\n }\n \n+#[test]\n+fn should_add_native_fn_ret_types() {\n+    let doc = test::mk_doc(\"native mod a { fn a() -> int; }\");\n+    assert doc.topmod.nmods()[0].fns[0].return.ty == some(\"int\");\n+}\n+\n fn merge_arg_tys(\n     srv: astsrv::srv,\n     fn_id: doc::ast_id,\n@@ -135,6 +154,9 @@ fn get_arg_tys(srv: astsrv::srv, fn_id: doc::ast_id) -> [(str, str)] {\n           }, _) |\n           ast_map::node_item(@{\n             node: ast::item_res(decl, _, _, _, _), _\n+          }, _) |\n+          ast_map::node_native_item(@{\n+            node: ast::native_item_fn(decl, _), _\n           }, _) {\n             decl_arg_tys(decl)\n           }\n@@ -156,6 +178,12 @@ fn should_add_arg_types() {\n     assert fn_.args[1].ty == some(\"bool\");\n }\n \n+#[test]\n+fn should_add_native_fn_arg_types() {\n+    let doc = test::mk_doc(\"native mod a { fn a(b: int); }\");\n+    assert doc.topmod.nmods()[0].fns[0].args[0].ty == some(\"int\");\n+}\n+\n fn fold_const(\n     fold: fold::fold<astsrv::srv>,\n     doc: doc::constdoc"}]}