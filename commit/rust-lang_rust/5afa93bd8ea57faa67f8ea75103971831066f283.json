{"sha": "5afa93bd8ea57faa67f8ea75103971831066f283", "node_id": "C_kwDOAAsO6NoAKDVhZmE5M2JkOGVhNTdmYWE2N2Y4ZWE3NTEwMzk3MTgzMTA2NmYyODM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-16T10:18:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-16T10:18:19Z"}, "message": "Auto merge of #10481 - blyxyas:allow_attribute, r=xFrednet\n\nAdd `allow_attribute` lint\n\nFixes #10468\n\nchangelog: new lint: [`allow_attributes`]\n[#10481](https://github.com/rust-lang/rust-clippy/pull/10481)", "tree": {"sha": "12399ed3a004b1ea84a8a559286cd69cadc06868", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12399ed3a004b1ea84a8a559286cd69cadc06868"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5afa93bd8ea57faa67f8ea75103971831066f283", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5afa93bd8ea57faa67f8ea75103971831066f283", "html_url": "https://github.com/rust-lang/rust/commit/5afa93bd8ea57faa67f8ea75103971831066f283", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5afa93bd8ea57faa67f8ea75103971831066f283/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c465bf7f67ff12b9d7246a26ea83f66f0de228da", "url": "https://api.github.com/repos/rust-lang/rust/commits/c465bf7f67ff12b9d7246a26ea83f66f0de228da", "html_url": "https://github.com/rust-lang/rust/commit/c465bf7f67ff12b9d7246a26ea83f66f0de228da"}, {"sha": "1cab0cbaf0dddb4cd403c4a0c391315801a22835", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cab0cbaf0dddb4cd403c4a0c391315801a22835", "html_url": "https://github.com/rust-lang/rust/commit/1cab0cbaf0dddb4cd403c4a0c391315801a22835"}], "stats": {"total": 141, "additions": 141, "deletions": 0}, "files": [{"sha": "c090a844858b50fe9ab588a9c655cb66c427d459", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5afa93bd8ea57faa67f8ea75103971831066f283/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/5afa93bd8ea57faa67f8ea75103971831066f283/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=5afa93bd8ea57faa67f8ea75103971831066f283", "patch": "@@ -4382,6 +4382,7 @@ Released 2018-09-13\n <!-- begin autogenerated links to lint list -->\n [`absurd_extreme_comparisons`]: https://rust-lang.github.io/rust-clippy/master/index.html#absurd_extreme_comparisons\n [`alloc_instead_of_core`]: https://rust-lang.github.io/rust-clippy/master/index.html#alloc_instead_of_core\n+[`allow_attributes`]: https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes\n [`allow_attributes_without_reason`]: https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes_without_reason\n [`almost_complete_letter_range`]: https://rust-lang.github.io/rust-clippy/master/index.html#almost_complete_letter_range\n [`almost_complete_range`]: https://rust-lang.github.io/rust-clippy/master/index.html#almost_complete_range"}, {"sha": "15d46e954a9a59b6633d5411a584f79c7d08e950", "filename": "clippy_lints/src/allow_attributes.rs", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/5afa93bd8ea57faa67f8ea75103971831066f283/clippy_lints%2Fsrc%2Fallow_attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5afa93bd8ea57faa67f8ea75103971831066f283/clippy_lints%2Fsrc%2Fallow_attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fallow_attributes.rs?ref=5afa93bd8ea57faa67f8ea75103971831066f283", "patch": "@@ -0,0 +1,71 @@\n+use ast::AttrStyle;\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use rustc_ast as ast;\n+use rustc_errors::Applicability;\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+declare_clippy_lint! {\n+    /// Detects uses of the `#[allow]` attribute and suggests replacing it with\n+    /// the `#[expect]` (See [RFC 2383](https://rust-lang.github.io/rfcs/2383-lint-reasons.html))\n+    ///\n+    /// The expect attribute is still unstable and requires the `lint_reasons`\n+    /// on nightly. It can be enabled by adding `#![feature(lint_reasons)]` to\n+    /// the crate root.\n+    ///\n+    /// This lint only warns outer attributes (`#[allow]`), as inner attributes\n+    /// (`#![allow]`) are usually used to enable or disable lints on a global scale.\n+    ///\n+    /// ### Why is this bad?\n+    ///\n+    /// `#[expect]` attributes suppress the lint emission, but emit a warning, if\n+    /// the expectation is unfulfilled. This can be useful to be notified when the\n+    /// lint is no longer triggered.\n+    ///\n+    /// ### Example\n+    /// ```rust,ignore\n+    /// #[allow(unused_mut)]\n+    /// fn foo() -> usize {\n+    ///    let mut a = Vec::new();\n+    ///    a.len()\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust,ignore\n+    /// #![feature(lint_reasons)]\n+    /// #[expect(unused_mut)]\n+    /// fn foo() -> usize {\n+    ///     let mut a = Vec::new();\n+    ///     a.len()\n+    /// }\n+    /// ```\n+    #[clippy::version = \"1.69.0\"]\n+    pub ALLOW_ATTRIBUTES,\n+    restriction,\n+    \"`#[allow]` will not trigger if a warning isn't found. `#[expect]` triggers if there are no warnings.\"\n+}\n+\n+declare_lint_pass!(AllowAttribute => [ALLOW_ATTRIBUTES]);\n+\n+impl LateLintPass<'_> for AllowAttribute {\n+    // Separate each crate's features.\n+    fn check_attribute(&mut self, cx: &LateContext<'_>, attr: &ast::Attribute) {\n+        if_chain! {\n+            if cx.tcx.features().lint_reasons;\n+            if let AttrStyle::Outer = attr.style;\n+            if let Some(ident) = attr.ident();\n+            if ident.name == rustc_span::symbol::sym::allow;\n+            then {\n+                span_lint_and_sugg(\n+                    cx,\n+                    ALLOW_ATTRIBUTES,\n+                    ident.span,\n+                    \"#[allow] attribute found\",\n+                    \"replace it with\",\n+                    \"expect\".into(),\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n+        }\n+    }\n+}"}, {"sha": "25f159734903a8a7f8ba72c411f1d91756427e01", "filename": "clippy_lints/src/declared_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5afa93bd8ea57faa67f8ea75103971831066f283/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5afa93bd8ea57faa67f8ea75103971831066f283/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeclared_lints.rs?ref=5afa93bd8ea57faa67f8ea75103971831066f283", "patch": "@@ -35,6 +35,7 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::utils::internal_lints::produce_ice::PRODUCE_ICE_INFO,\n     #[cfg(feature = \"internal\")]\n     crate::utils::internal_lints::unnecessary_def_path::UNNECESSARY_DEF_PATH_INFO,\n+    crate::allow_attributes::ALLOW_ATTRIBUTES_INFO,\n     crate::almost_complete_range::ALMOST_COMPLETE_RANGE_INFO,\n     crate::approx_const::APPROX_CONSTANT_INFO,\n     crate::as_conversions::AS_CONVERSIONS_INFO,"}, {"sha": "4bb0e2ec96ca12df932ef250cdcc8d8d7e213df7", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5afa93bd8ea57faa67f8ea75103971831066f283/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5afa93bd8ea57faa67f8ea75103971831066f283/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=5afa93bd8ea57faa67f8ea75103971831066f283", "patch": "@@ -67,6 +67,7 @@ mod declared_lints;\n mod renamed_lints;\n \n // begin lints modules, do not remove this comment, it\u2019s used in `update_lints`\n+mod allow_attributes;\n mod almost_complete_range;\n mod approx_const;\n mod as_conversions;\n@@ -934,6 +935,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|_| Box::new(missing_assert_message::MissingAssertMessage));\n     store.register_early_pass(|| Box::new(redundant_async_block::RedundantAsyncBlock));\n     store.register_late_pass(|_| Box::new(let_with_type_underscore::UnderscoreTyped));\n+    store.register_late_pass(|_| Box::new(allow_attributes::AllowAttribute));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "b8dd0619e6d00f5f199d1acb0775165f7f0ce340", "filename": "tests/ui/allow_attributes.fixed", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5afa93bd8ea57faa67f8ea75103971831066f283/tests%2Fui%2Fallow_attributes.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5afa93bd8ea57faa67f8ea75103971831066f283/tests%2Fui%2Fallow_attributes.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fallow_attributes.fixed?ref=5afa93bd8ea57faa67f8ea75103971831066f283", "patch": "@@ -0,0 +1,25 @@\n+// run-rustfix\n+#![allow(unused)]\n+#![warn(clippy::allow_attributes)]\n+#![feature(lint_reasons)]\n+\n+fn main() {}\n+\n+// Using clippy::needless_borrow just as a placeholder, it isn't relevant.\n+\n+// Should lint\n+#[expect(dead_code)]\n+struct T1;\n+\n+struct T2; // Should not lint\n+#[deny(clippy::needless_borrow)] // Should not lint\n+struct T3;\n+#[warn(clippy::needless_borrow)] // Should not lint\n+struct T4;\n+// `panic = \"unwind\"` should always be true\n+#[cfg_attr(panic = \"unwind\", expect(dead_code))]\n+struct CfgT;\n+\n+fn ignore_inner_attr() {\n+    #![allow(unused)] // Should not lint\n+}"}, {"sha": "295f560906a7853d216172797cb3530111eb3aad", "filename": "tests/ui/allow_attributes.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5afa93bd8ea57faa67f8ea75103971831066f283/tests%2Fui%2Fallow_attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5afa93bd8ea57faa67f8ea75103971831066f283/tests%2Fui%2Fallow_attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fallow_attributes.rs?ref=5afa93bd8ea57faa67f8ea75103971831066f283", "patch": "@@ -0,0 +1,25 @@\n+// run-rustfix\n+#![allow(unused)]\n+#![warn(clippy::allow_attributes)]\n+#![feature(lint_reasons)]\n+\n+fn main() {}\n+\n+// Using clippy::needless_borrow just as a placeholder, it isn't relevant.\n+\n+// Should lint\n+#[allow(dead_code)]\n+struct T1;\n+\n+struct T2; // Should not lint\n+#[deny(clippy::needless_borrow)] // Should not lint\n+struct T3;\n+#[warn(clippy::needless_borrow)] // Should not lint\n+struct T4;\n+// `panic = \"unwind\"` should always be true\n+#[cfg_attr(panic = \"unwind\", allow(dead_code))]\n+struct CfgT;\n+\n+fn ignore_inner_attr() {\n+    #![allow(unused)] // Should not lint\n+}"}, {"sha": "681837e9ed770aea6f3ace0ee5e88c02b72e9f28", "filename": "tests/ui/allow_attributes.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5afa93bd8ea57faa67f8ea75103971831066f283/tests%2Fui%2Fallow_attributes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5afa93bd8ea57faa67f8ea75103971831066f283/tests%2Fui%2Fallow_attributes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fallow_attributes.stderr?ref=5afa93bd8ea57faa67f8ea75103971831066f283", "patch": "@@ -0,0 +1,16 @@\n+error: #[allow] attribute found\n+  --> $DIR/allow_attributes.rs:11:3\n+   |\n+LL | #[allow(dead_code)]\n+   |   ^^^^^ help: replace it with: `expect`\n+   |\n+   = note: `-D clippy::allow-attributes` implied by `-D warnings`\n+\n+error: #[allow] attribute found\n+  --> $DIR/allow_attributes.rs:20:30\n+   |\n+LL | #[cfg_attr(panic = \"unwind\", allow(dead_code))]\n+   |                              ^^^^^ help: replace it with: `expect`\n+\n+error: aborting due to 2 previous errors\n+"}]}