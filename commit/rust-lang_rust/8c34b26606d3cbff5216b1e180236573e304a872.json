{"sha": "8c34b26606d3cbff5216b1e180236573e304a872", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjMzRiMjY2MDZkM2NiZmY1MjE2YjFlMTgwMjM2NTczZTMwNGE4NzI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-18T10:40:38Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-18T14:09:14Z"}, "message": "Update docs by dropping suffixes except where they served to instruct.", "tree": {"sha": "23bcdc46a7817e682c2fa258230be7f0f152f795", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23bcdc46a7817e682c2fa258230be7f0f152f795"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c34b26606d3cbff5216b1e180236573e304a872", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c34b26606d3cbff5216b1e180236573e304a872", "html_url": "https://github.com/rust-lang/rust/commit/8c34b26606d3cbff5216b1e180236573e304a872", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c34b26606d3cbff5216b1e180236573e304a872/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f4ee20ddae447f155b0d2b25e630e9c4e0cc1aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f4ee20ddae447f155b0d2b25e630e9c4e0cc1aa", "html_url": "https://github.com/rust-lang/rust/commit/1f4ee20ddae447f155b0d2b25e630e9c4e0cc1aa"}], "stats": {"total": 28, "additions": 12, "deletions": 16}, "files": [{"sha": "d9bfe71e2e42827d3aaeaa43076a7ce34fab346b", "filename": "src/doc/intro.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8c34b26606d3cbff5216b1e180236573e304a872/src%2Fdoc%2Fintro.md", "raw_url": "https://github.com/rust-lang/rust/raw/8c34b26606d3cbff5216b1e180236573e304a872/src%2Fdoc%2Fintro.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fintro.md?ref=8c34b26606d3cbff5216b1e180236573e304a872", "patch": "@@ -480,7 +480,7 @@ use std::sync::{Arc,Mutex};\n fn main() {\n     let numbers = Arc::new(Mutex::new(vec![1, 2, 3]));\n \n-    for i in 0us..3 {\n+    for i in 0..3 {\n         let number = numbers.clone();\n         Thread::spawn(move || {\n             let mut array = number.lock().unwrap();\n@@ -541,7 +541,7 @@ use std::thread::Thread;\n fn main() {\n     let vec = vec![1, 2, 3];\n \n-    for i in 0us..3 {\n+    for i in 0..3 {\n         Thread::spawn(move || {\n             println!(\"{}\", vec[i]);\n         });"}, {"sha": "70baebf0d30acf33416294085fc6568f91a66122", "filename": "src/doc/reference.md", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8c34b26606d3cbff5216b1e180236573e304a872/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/8c34b26606d3cbff5216b1e180236573e304a872/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=8c34b26606d3cbff5216b1e180236573e304a872", "patch": "@@ -465,13 +465,9 @@ An _integer literal_ has one of four forms:\n \n Like any literal, an integer literal may be followed (immediately,\n without any spaces) by an _integer suffix_, which forcibly sets the\n-type of the literal. There are 10 valid values for an integer suffix:\n-\n-* Each of the signed and unsigned machine types `u8`, `i8`,\n-  `u16`, `i16`, `u32`, `i32`, `u64` and `i64`\n-  give the literal the corresponding machine type.\n-* The `is` and `us` suffixes give the literal type `isize` or `usize`,\n-  respectively.\n+type of the literal. The integer suffix must be the name of one of the\n+integral types: `u8`, `i8`, `u16`, `i16`, `u32`, `i32`, `u64`, `i64`,\n+`isize`, or `usize`.\n \n The type of an _unsuffixed_ integer literal is determined by type inference.\n If an integer type can be _uniquely_ determined from the surrounding program\n@@ -489,7 +485,7 @@ Examples of integer literals of various forms:\n 0xff_u8;                           // type u8\n 0o70_i16;                          // type i16\n 0b1111_1111_1001_0000_i32;         // type i32\n-0us;                               // type usize\n+0usize;                            // type usize\n ```\n \n ##### Floating-point literals\n@@ -1001,8 +997,8 @@ fn foo<T>(_: T){}\n fn bar(map1: HashMap<String, usize>, map2: hash_map::HashMap<String, usize>){}\n \n fn main() {\n-    // Equivalent to 'std::iter::range_step(0us, 10, 2);'\n-    range_step(0us, 10, 2);\n+    // Equivalent to 'std::iter::range_step(0, 10, 2);'\n+    range_step(0, 10, 2);\n \n     // Equivalent to 'foo(vec![std::option::Option::Some(1.0f64),\n     // std::option::Option::None]);'\n@@ -3126,7 +3122,7 @@ conditional expression evaluates to `false`, the `while` expression completes.\n An example:\n \n ```\n-let mut i = 0us;\n+let mut i = 0;\n \n while i < 10 {\n     println!(\"hello\");\n@@ -3206,7 +3202,7 @@ An example of a for loop over a series of integers:\n \n ```\n # fn bar(b:usize) { }\n-for i in 0us..256 {\n+for i in 0..256 {\n     bar(i);\n }\n ```"}, {"sha": "842957bd601c61cd59fc479fce93e4d17659dd1b", "filename": "src/doc/trpl/concurrency.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8c34b26606d3cbff5216b1e180236573e304a872/src%2Fdoc%2Ftrpl%2Fconcurrency.md", "raw_url": "https://github.com/rust-lang/rust/raw/8c34b26606d3cbff5216b1e180236573e304a872/src%2Fdoc%2Ftrpl%2Fconcurrency.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fconcurrency.md?ref=8c34b26606d3cbff5216b1e180236573e304a872", "patch": "@@ -244,7 +244,7 @@ use std::time::Duration;\n fn main() {\n     let data = Arc::new(Mutex::new(vec![1u32, 2, 3]));\n \n-    for i in 0us..2 {\n+    for i in 0..2 {\n         let data = data.clone();\n         thread::spawn(move || {\n             let mut data = data.lock().unwrap();\n@@ -267,7 +267,7 @@ thread more closely:\n # use std::time::Duration;\n # fn main() {\n #     let data = Arc::new(Mutex::new(vec![1u32, 2, 3]));\n-#     for i in 0us..2 {\n+#     for i in 0..2 {\n #         let data = data.clone();\n thread::spawn(move || {\n     let mut data = data.lock().unwrap();"}]}