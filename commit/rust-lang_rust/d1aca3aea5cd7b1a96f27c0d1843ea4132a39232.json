{"sha": "d1aca3aea5cd7b1a96f27c0d1843ea4132a39232", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxYWNhM2FlYTVjZDdiMWE5NmYyN2MwZDE4NDNlYTQxMzJhMzkyMzI=", "commit": {"author": {"name": "Brad Gibson", "email": "b2b@humanenginuity.com", "date": "2019-04-01T19:08:19Z"}, "committer": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2019-07-18T06:17:30Z"}, "message": "renamed `inner_deref` feature's `deref*()` methods `as_deref*()` as per discussion https://github.com/rust-lang/rust/issues/50264", "tree": {"sha": "24ee6129f2070e5920ae2a15f54c3aeb77673e19", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24ee6129f2070e5920ae2a15f54c3aeb77673e19"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1aca3aea5cd7b1a96f27c0d1843ea4132a39232", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1aca3aea5cd7b1a96f27c0d1843ea4132a39232", "html_url": "https://github.com/rust-lang/rust/commit/d1aca3aea5cd7b1a96f27c0d1843ea4132a39232", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1aca3aea5cd7b1a96f27c0d1843ea4132a39232/comments", "author": {"login": "Xandkeeper", "id": 124085026, "node_id": "U_kgDOB2VjIg", "avatar_url": "https://avatars.githubusercontent.com/u/124085026?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xandkeeper", "html_url": "https://github.com/Xandkeeper", "followers_url": "https://api.github.com/users/Xandkeeper/followers", "following_url": "https://api.github.com/users/Xandkeeper/following{/other_user}", "gists_url": "https://api.github.com/users/Xandkeeper/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xandkeeper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xandkeeper/subscriptions", "organizations_url": "https://api.github.com/users/Xandkeeper/orgs", "repos_url": "https://api.github.com/users/Xandkeeper/repos", "events_url": "https://api.github.com/users/Xandkeeper/events{/privacy}", "received_events_url": "https://api.github.com/users/Xandkeeper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efb74579150a6ea0ad99a8568aa02a1aa23f6dd5", "url": "https://api.github.com/repos/rust-lang/rust/commits/efb74579150a6ea0ad99a8568aa02a1aa23f6dd5", "html_url": "https://github.com/rust-lang/rust/commit/efb74579150a6ea0ad99a8568aa02a1aa23f6dd5"}], "stats": {"total": 509, "additions": 383, "deletions": 126}, "files": [{"sha": "afc64c54bba876494a66eee9f30026388175f6ef", "filename": "src/libcore/option.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d1aca3aea5cd7b1a96f27c0d1843ea4132a39232/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1aca3aea5cd7b1a96f27c0d1843ea4132a39232/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=d1aca3aea5cd7b1a96f27c0d1843ea4132a39232", "patch": "@@ -1104,17 +1104,28 @@ impl<T: Default> Option<T> {\n \n #[unstable(feature = \"inner_deref\", reason = \"newly added\", issue = \"50264\")]\n impl<T: Deref> Option<T> {\n-    /// Converts from `&Option<T>` to `Option<&T::Target>`.\n+    /// Converts from `Option<T>` (or `&Option<T>`) to `Option<&T::Target>`.\n     ///\n     /// Leaves the original Option in-place, creating a new one with a reference\n     /// to the original one, additionally coercing the contents via [`Deref`].\n     ///\n     /// [`Deref`]: ../../std/ops/trait.Deref.html\n-    pub fn deref(&self) -> Option<&T::Target> {\n+    pub fn as_deref(&self) -> Option<&T::Target> {\n         self.as_ref().map(|t| t.deref())\n     }\n }\n \n+#[unstable(feature = \"inner_deref\", reason = \"newly added\", issue = \"50264\")]\n+impl<T: DerefMut> Option<T> {\n+    /// Converts from `Option<T>` (or `&mut Option<T>`) to `Option<&mut T::Target>`.\n+    ///\n+    /// Leaves the original `Option` in-place, creating a new one containing a mutable reference to\n+    /// the inner type's `Deref::Target` type.\n+    pub fn as_deref_mut(&mut self) -> Option<&mut T::Target> {\n+        self.as_mut().map(|t| t.deref_mut())\n+    }\n+}\n+\n impl<T, E> Option<Result<T, E>> {\n     /// Transposes an `Option` of a [`Result`] into a [`Result`] of an `Option`.\n     ///"}, {"sha": "167e14eae43104b92413a13a12e03f890fd0377b", "filename": "src/libcore/result.rs", "status": "modified", "additions": 48, "deletions": 15, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/d1aca3aea5cd7b1a96f27c0d1843ea4132a39232/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1aca3aea5cd7b1a96f27c0d1843ea4132a39232/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=d1aca3aea5cd7b1a96f27c0d1843ea4132a39232", "patch": "@@ -981,42 +981,75 @@ impl<T: Default, E> Result<T, E> {\n \n #[unstable(feature = \"inner_deref\", reason = \"newly added\", issue = \"50264\")]\n impl<T: Deref, E> Result<T, E> {\n-    /// Converts from `&Result<T, E>` to `Result<&T::Target, &E>`.\n+    /// Converts from `Result<T, E>` (or `&Result<T, E>`) to `Result<&T::Target, &E>`.\n     ///\n-    /// Leaves the original Result in-place, creating a new one with a reference\n-    /// to the original one, additionally coercing the `Ok` arm of the Result via\n-    /// `Deref`.\n-    pub fn deref_ok(&self) -> Result<&T::Target, &E> {\n+    /// Leaves the original `Result` in-place, creating a new one containing a reference to the\n+    /// `Ok` type's `Deref::Target` type.\n+    pub fn as_deref_ok(&self) -> Result<&T::Target, &E> {\n         self.as_ref().map(|t| t.deref())\n     }\n }\n \n #[unstable(feature = \"inner_deref\", reason = \"newly added\", issue = \"50264\")]\n impl<T, E: Deref> Result<T, E> {\n-    /// Converts from `&Result<T, E>` to `Result<&T, &E::Target>`.\n+    /// Converts from `Result<T, E>` (or `&Result<T, E>`) to `Result<&T, &E::Target>`.\n     ///\n-    /// Leaves the original Result in-place, creating a new one with a reference\n-    /// to the original one, additionally coercing the `Err` arm of the Result via\n-    /// `Deref`.\n-    pub fn deref_err(&self) -> Result<&T, &E::Target>\n+    /// Leaves the original `Result` in-place, creating a new one containing a reference to the\n+    /// `Err` type's `Deref::Target` type.\n+    pub fn as_deref_err(&self) -> Result<&T, &E::Target>\n     {\n         self.as_ref().map_err(|e| e.deref())\n     }\n }\n \n #[unstable(feature = \"inner_deref\", reason = \"newly added\", issue = \"50264\")]\n impl<T: Deref, E: Deref> Result<T, E> {\n-    /// Converts from `&Result<T, E>` to `Result<&T::Target, &E::Target>`.\n+    /// Converts from `Result<T, E>` (or `&Result<T, E>`) to `Result<&T::Target, &E::Target>`.\n     ///\n-    /// Leaves the original Result in-place, creating a new one with a reference\n-    /// to the original one, additionally coercing both the `Ok` and `Err` arms\n-    /// of the Result via `Deref`.\n-    pub fn deref(&self) -> Result<&T::Target, &E::Target>\n+    /// Leaves the original `Result` in-place, creating a new one containing a reference to both\n+    /// the `Ok` and `Err` types' `Deref::Target` types.\n+    pub fn as_deref(&self) -> Result<&T::Target, &E::Target>\n     {\n         self.as_ref().map(|t| t.deref()).map_err(|e| e.deref())\n     }\n }\n \n+#[unstable(feature = \"inner_deref\", reason = \"newly added\", issue = \"50264\")]\n+impl<T: DerefMut, E> Result<T, E> {\n+    /// Converts from `Result<T, E>` (or `&mut Result<T, E>`) to `Result<&mut T::Target, &mut E>`.\n+    ///\n+    /// Leaves the original `Result` in-place, creating a new one containing a mutable reference to\n+    /// the `Ok` type's `Deref::Target` type.\n+    pub fn as_deref_mut_ok(&mut self) -> Result<&mut T::Target, &mut E> {\n+        self.as_mut().map(|t| t.deref_mut())\n+    }\n+}\n+\n+#[unstable(feature = \"inner_deref\", reason = \"newly added\", issue = \"50264\")]\n+impl<T, E: DerefMut> Result<T, E> {\n+    /// Converts from `Result<T, E>` (or `&mut Result<T, E>`) to `Result<&mut T, &mut E::Target>`.\n+    ///\n+    /// Leaves the original `Result` in-place, creating a new one containing a mutable reference to\n+    /// the `Err` type's `Deref::Target` type.\n+    pub fn as_deref_mut_err(&mut self) -> Result<&mut T, &mut E::Target>\n+    {\n+        self.as_mut().map_err(|e| e.deref_mut())\n+    }\n+}\n+\n+#[unstable(feature = \"inner_deref\", reason = \"newly added\", issue = \"50264\")]\n+impl<T: DerefMut, E: DerefMut> Result<T, E> {\n+    /// Converts from `Result<T, E>` (or `&mut Result<T, E>`) to\n+    /// `Result<&mut T::Target, &mut E::Target>`.\n+    ///\n+    /// Leaves the original `Result` in-place, creating a new one containing a mutable reference to\n+    /// both the `Ok` and `Err` types' `Deref::Target` types.\n+    pub fn as_deref_mut(&mut self) -> Result<&mut T::Target, &mut E::Target>\n+    {\n+        self.as_mut().map(|t| t.deref_mut()).map_err(|e| e.deref_mut())\n+    }\n+}\n+\n impl<T, E> Result<Option<T>, E> {\n     /// Transposes a `Result` of an `Option` into an `Option` of a `Result`.\n     ///"}, {"sha": "ff43fc49f71e39aeb2b866b74b77ab3b8c07853e", "filename": "src/libcore/tests/option.rs", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d1aca3aea5cd7b1a96f27c0d1843ea4132a39232/src%2Flibcore%2Ftests%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1aca3aea5cd7b1a96f27c0d1843ea4132a39232/src%2Flibcore%2Ftests%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Foption.rs?ref=d1aca3aea5cd7b1a96f27c0d1843ea4132a39232", "patch": "@@ -1,6 +1,8 @@\n use core::option::*;\n use core::mem;\n use core::clone::Clone;\n+use core::array::FixedSizeArray;\n+use core::ops::DerefMut;\n \n #[test]\n fn test_get_ptr() {\n@@ -310,20 +312,38 @@ fn test_try() {\n }\n \n #[test]\n-fn test_option_deref() {\n+fn test_option_as_deref() {\n     // Some: &Option<T: Deref>::Some(T) -> Option<&T::Deref::Target>::Some(&*T)\n     let ref_option = &Some(&42);\n-    assert_eq!(ref_option.deref(), Some(&42));\n+    assert_eq!(ref_option.as_deref(), Some(&42));\n \n     let ref_option = &Some(String::from(\"a result\"));\n-    assert_eq!(ref_option.deref(), Some(\"a result\"));\n+    assert_eq!(ref_option.as_deref(), Some(\"a result\"));\n \n     let ref_option = &Some(vec![1, 2, 3, 4, 5]);\n-    assert_eq!(ref_option.deref(), Some(&[1, 2, 3, 4, 5][..]));\n+    assert_eq!(ref_option.as_deref(), Some([1, 2, 3, 4, 5].as_slice()));\n \n     // None: &Option<T: Deref>>::None -> None\n     let ref_option: &Option<&i32> = &None;\n-    assert_eq!(ref_option.deref(), None);\n+    assert_eq!(ref_option.as_deref(), None);\n+}\n+\n+#[test]\n+fn test_option_as_deref_mut() {\n+    // Some: &mut Option<T: Deref>::Some(T) -> Option<&mut T::Deref::Target>::Some(&mut *T)\n+    let mut val = 42;\n+    let ref_option = &mut Some(&mut val);\n+    assert_eq!(ref_option.as_deref_mut(), Some(&mut 42));\n+\n+    let ref_option = &mut Some(String::from(\"a result\"));\n+    assert_eq!(ref_option.as_deref_mut(), Some(String::from(\"a result\").deref_mut()));\n+\n+    let ref_option = &mut Some(vec![1, 2, 3, 4, 5]);\n+    assert_eq!(ref_option.as_deref_mut(), Some([1, 2, 3, 4, 5].as_mut_slice()));\n+\n+    // None: &mut Option<T: Deref>>::None -> None\n+    let ref_option: &mut Option<&mut i32> = &mut None;\n+    assert_eq!(ref_option.as_deref_mut(), None);\n }\n \n #[test]"}, {"sha": "163f8d0ab3797e731d4b51ea58fc0cee4050fbcf", "filename": "src/libcore/tests/result.rs", "status": "modified", "additions": 153, "deletions": 32, "changes": 185, "blob_url": "https://github.com/rust-lang/rust/blob/d1aca3aea5cd7b1a96f27c0d1843ea4132a39232/src%2Flibcore%2Ftests%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1aca3aea5cd7b1a96f27c0d1843ea4132a39232/src%2Flibcore%2Ftests%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fresult.rs?ref=d1aca3aea5cd7b1a96f27c0d1843ea4132a39232", "patch": "@@ -1,4 +1,6 @@\n use core::option::*;\n+use core::array::FixedSizeArray;\n+use core::ops::DerefMut;\n \n fn op1() -> Result<isize, &'static str> { Ok(666) }\n fn op2() -> Result<isize, &'static str> { Err(\"sadface\") }\n@@ -225,94 +227,213 @@ fn test_try() {\n }\n \n #[test]\n-fn test_result_deref() {\n-    // &Result<T: Deref, E>::Ok(T).deref_ok() ->\n+fn test_result_as_deref() {\n+    // &Result<T: Deref, E>::Ok(T).as_deref_ok() ->\n     //      Result<&T::Deref::Target, &E>::Ok(&*T)\n     let ref_ok = &Result::Ok::<&i32, u8>(&42);\n     let expected_result = Result::Ok::<&i32, &u8>(&42);\n-    assert_eq!(ref_ok.deref_ok(), expected_result);\n+    assert_eq!(ref_ok.as_deref_ok(), expected_result);\n \n     let ref_ok = &Result::Ok::<String, u32>(String::from(\"a result\"));\n     let expected_result = Result::Ok::<&str, &u32>(\"a result\");\n-    assert_eq!(ref_ok.deref_ok(), expected_result);\n+    assert_eq!(ref_ok.as_deref_ok(), expected_result);\n \n     let ref_ok = &Result::Ok::<Vec<i32>, u32>(vec![1, 2, 3, 4, 5]);\n-    let expected_result = Result::Ok::<&[i32], &u32>(&[1, 2, 3, 4, 5][..]);\n-    assert_eq!(ref_ok.deref_ok(), expected_result);\n+    let expected_result = Result::Ok::<&[i32], &u32>([1, 2, 3, 4, 5].as_slice());\n+    assert_eq!(ref_ok.as_deref_ok(), expected_result);\n \n-    // &Result<T: Deref, E: Deref>::Ok(T).deref() ->\n+    // &Result<T: Deref, E: Deref>::Ok(T).as_deref() ->\n     //      Result<&T::Deref::Target, &E::Deref::Target>::Ok(&*T)\n     let ref_ok = &Result::Ok::<&i32, &u8>(&42);\n     let expected_result = Result::Ok::<&i32, &u8>(&42);\n-    assert_eq!(ref_ok.deref(), expected_result);\n+    assert_eq!(ref_ok.as_deref(), expected_result);\n \n     let ref_ok = &Result::Ok::<String, &u32>(String::from(\"a result\"));\n     let expected_result = Result::Ok::<&str, &u32>(\"a result\");\n-    assert_eq!(ref_ok.deref(), expected_result);\n+    assert_eq!(ref_ok.as_deref(), expected_result);\n \n     let ref_ok = &Result::Ok::<Vec<i32>, &u32>(vec![1, 2, 3, 4, 5]);\n-    let expected_result = Result::Ok::<&[i32], &u32>(&[1, 2, 3, 4, 5][..]);\n-    assert_eq!(ref_ok.deref(), expected_result);\n+    let expected_result = Result::Ok::<&[i32], &u32>([1, 2, 3, 4, 5].as_slice());\n+    assert_eq!(ref_ok.as_deref(), expected_result);\n \n-    // &Result<T, E: Deref>::Err(T).deref_err() ->\n+    // &Result<T, E: Deref>::Err(T).as_deref_err() ->\n     //      Result<&T, &E::Deref::Target>::Err(&*E)\n     let ref_err = &Result::Err::<u8, &i32>(&41);\n     let expected_result = Result::Err::<&u8, &i32>(&41);\n-    assert_eq!(ref_err.deref_err(), expected_result);\n+    assert_eq!(ref_err.as_deref_err(), expected_result);\n \n     let ref_err = &Result::Err::<u32, String>(String::from(\"an error\"));\n     let expected_result = Result::Err::<&u32, &str>(\"an error\");\n-    assert_eq!(ref_err.deref_err(), expected_result);\n+    assert_eq!(ref_err.as_deref_err(), expected_result);\n \n     let ref_err = &Result::Err::<u32, Vec<i32>>(vec![5, 4, 3, 2, 1]);\n-    let expected_result = Result::Err::<&u32, &[i32]>(&[5, 4, 3, 2, 1][..]);\n-    assert_eq!(ref_err.deref_err(), expected_result);\n+    let expected_result = Result::Err::<&u32, &[i32]>([5, 4, 3, 2, 1].as_slice());\n+    assert_eq!(ref_err.as_deref_err(), expected_result);\n \n-    // &Result<T: Deref, E: Deref>::Err(T).deref_err() ->\n+    // &Result<T: Deref, E: Deref>::Err(T).as_deref_err() ->\n     //      Result<&T, &E::Deref::Target>::Err(&*E)\n     let ref_err = &Result::Err::<&u8, &i32>(&41);\n     let expected_result = Result::Err::<&u8, &i32>(&41);\n-    assert_eq!(ref_err.deref(), expected_result);\n+    assert_eq!(ref_err.as_deref(), expected_result);\n \n     let ref_err = &Result::Err::<&u32, String>(String::from(\"an error\"));\n     let expected_result = Result::Err::<&u32, &str>(\"an error\");\n-    assert_eq!(ref_err.deref(), expected_result);\n+    assert_eq!(ref_err.as_deref(), expected_result);\n \n     let ref_err = &Result::Err::<&u32, Vec<i32>>(vec![5, 4, 3, 2, 1]);\n-    let expected_result = Result::Err::<&u32, &[i32]>(&[5, 4, 3, 2, 1][..]);\n-    assert_eq!(ref_err.deref(), expected_result);\n+    let expected_result = Result::Err::<&u32, &[i32]>([5, 4, 3, 2, 1].as_slice());\n+    assert_eq!(ref_err.as_deref(), expected_result);\n \n-    // The following cases test calling deref_* with the wrong variant (i.e.\n-    // `deref_ok()` with a `Result::Err()`, or `deref_err()` with a `Result::Ok()`.\n-    // While unusual, these cases are supported to ensure that an `inner_deref`\n+    // The following cases test calling `as_deref_*` with the wrong variant (i.e.\n+    // `as_deref_ok()` with a `Result::Err()`, or `as_deref_err()` with a `Result::Ok()`.\n+    // While uncommon, these cases are supported to ensure that an `as_deref_*`\n     // call can still be made even when one of the Result types does not implement\n     // `Deref` (for example, std::io::Error).\n \n-    // &Result<T, E: Deref>::Ok(T).deref_err() ->\n+    // &Result<T, E: Deref>::Ok(T).as_deref_err() ->\n     //      Result<&T, &E::Deref::Target>::Ok(&T)\n     let ref_ok = &Result::Ok::<i32, &u8>(42);\n     let expected_result = Result::Ok::<&i32, &u8>(&42);\n-    assert_eq!(ref_ok.deref_err(), expected_result);\n+    assert_eq!(ref_ok.as_deref_err(), expected_result);\n \n     let ref_ok = &Result::Ok::<&str, &u32>(\"a result\");\n     let expected_result = Result::Ok::<&&str, &u32>(&\"a result\");\n-    assert_eq!(ref_ok.deref_err(), expected_result);\n+    assert_eq!(ref_ok.as_deref_err(), expected_result);\n \n     let ref_ok = &Result::Ok::<[i32; 5], &u32>([1, 2, 3, 4, 5]);\n     let expected_result = Result::Ok::<&[i32; 5], &u32>(&[1, 2, 3, 4, 5]);\n-    assert_eq!(ref_ok.deref_err(), expected_result);\n+    assert_eq!(ref_ok.as_deref_err(), expected_result);\n \n-    // &Result<T: Deref, E>::Err(E).deref_ok() ->\n+    // &Result<T: Deref, E>::Err(E).as_deref_ok() ->\n     //      Result<&T::Deref::Target, &E>::Err(&E)\n     let ref_err = &Result::Err::<&u8, i32>(41);\n     let expected_result = Result::Err::<&u8, &i32>(&41);\n-    assert_eq!(ref_err.deref_ok(), expected_result);\n+    assert_eq!(ref_err.as_deref_ok(), expected_result);\n \n     let ref_err = &Result::Err::<&u32, &str>(\"an error\");\n     let expected_result = Result::Err::<&u32, &&str>(&\"an error\");\n-    assert_eq!(ref_err.deref_ok(), expected_result);\n+    assert_eq!(ref_err.as_deref_ok(), expected_result);\n \n     let ref_err = &Result::Err::<&u32, [i32; 5]>([5, 4, 3, 2, 1]);\n     let expected_result = Result::Err::<&u32, &[i32; 5]>(&[5, 4, 3, 2, 1]);\n-    assert_eq!(ref_err.deref_ok(), expected_result);\n+    assert_eq!(ref_err.as_deref_ok(), expected_result);\n+}\n+\n+#[test]\n+fn test_result_as_deref_mut() {\n+    // &mut Result<T: Deref, E>::Ok(T).as_deref_mut_ok() ->\n+    //      Result<&mut T::Deref::Target, &mut E>::Ok(&mut *T)\n+    let mut val = 42;\n+    let mut expected_val = 42;\n+    let mut_ok = &mut Result::Ok::<&mut i32, u8>(&mut val);\n+    let expected_result = Result::Ok::<&mut i32, &mut u8>(&mut expected_val);\n+    assert_eq!(mut_ok.as_deref_mut_ok(), expected_result);\n+\n+    let mut expected_string = String::from(\"a result\");\n+    let mut_ok = &mut Result::Ok::<String, u32>(expected_string.clone());\n+    let expected_result = Result::Ok::<&mut str, &mut u32>(expected_string.deref_mut());\n+    assert_eq!(mut_ok.as_deref_mut_ok(), expected_result);\n+\n+    let mut expected_vec = vec![1, 2, 3, 4, 5];\n+    let mut_ok = &mut Result::Ok::<Vec<i32>, u32>(expected_vec.clone());\n+    let expected_result = Result::Ok::<&mut [i32], &mut u32>(expected_vec.as_mut_slice());\n+    assert_eq!(mut_ok.as_deref_mut_ok(), expected_result);\n+\n+    // &mut Result<T: Deref, E: Deref>::Ok(T).as_deref_mut() ->\n+    //      Result<&mut T::Deref::Target, &mut E::Deref::Target>::Ok(&mut *T)\n+    let mut val = 42;\n+    let mut expected_val = 42;\n+    let mut_ok = &mut Result::Ok::<&mut i32, &mut u8>(&mut val);\n+    let expected_result = Result::Ok::<&mut i32, &mut u8>(&mut expected_val);\n+    assert_eq!(mut_ok.as_deref_mut(), expected_result);\n+\n+    let mut expected_string = String::from(\"a result\");\n+    let mut_ok = &mut Result::Ok::<String, &mut u32>(expected_string.clone());\n+    let expected_result = Result::Ok::<&mut str, &mut u32>(expected_string.deref_mut());\n+    assert_eq!(mut_ok.as_deref_mut(), expected_result);\n+\n+    let mut expected_vec = vec![1, 2, 3, 4, 5];\n+    let mut_ok = &mut Result::Ok::<Vec<i32>, &mut u32>(expected_vec.clone());\n+    let expected_result = Result::Ok::<&mut [i32], &mut u32>(expected_vec.as_mut_slice());\n+    assert_eq!(mut_ok.as_deref_mut(), expected_result);\n+\n+    // &mut Result<T, E: Deref>::Err(T).as_deref_mut_err() ->\n+    //      Result<&mut T, &mut E::Deref::Target>::Err(&mut *E)\n+    let mut val = 41;\n+    let mut expected_val = 41;\n+    let mut_err = &mut Result::Err::<u8, &mut i32>(&mut val);\n+    let expected_result = Result::Err::<&mut u8, &mut i32>(&mut expected_val);\n+    assert_eq!(mut_err.as_deref_mut_err(), expected_result);\n+\n+    let mut expected_string = String::from(\"an error\");\n+    let mut_err = &mut Result::Err::<u32, String>(expected_string.clone());\n+    let expected_result = Result::Err::<&mut u32, &mut str>(expected_string.deref_mut());\n+    assert_eq!(mut_err.as_deref_mut_err(), expected_result);\n+\n+    let mut expected_vec = vec![5, 4, 3, 2, 1];\n+    let mut_err = &mut Result::Err::<u32, Vec<i32>>(expected_vec.clone());\n+    let expected_result = Result::Err::<&mut u32, &mut [i32]>(expected_vec.as_mut_slice());\n+    assert_eq!(mut_err.as_deref_mut_err(), expected_result);\n+\n+    // &mut Result<T: Deref, E: Deref>::Err(T).as_deref_mut_err() ->\n+    //      Result<&mut T, &mut E::Deref::Target>::Err(&mut *E)\n+    let mut val = 41;\n+    let mut expected_val = 41;\n+    let mut_err = &mut Result::Err::<&mut u8, &mut i32>(&mut val);\n+    let expected_result = Result::Err::<&mut u8, &mut i32>(&mut expected_val);\n+    assert_eq!(mut_err.as_deref_mut(), expected_result);\n+\n+    let mut expected_string = String::from(\"an error\");\n+    let mut_err = &mut Result::Err::<&mut u32, String>(expected_string.clone());\n+    let expected_result = Result::Err::<&mut u32, &mut str>(expected_string.as_mut_str());\n+    assert_eq!(mut_err.as_deref_mut(), expected_result);\n+\n+    let mut expected_vec = vec![5, 4, 3, 2, 1];\n+    let mut_err = &mut Result::Err::<&mut u32, Vec<i32>>(expected_vec.clone());\n+    let expected_result = Result::Err::<&mut u32, &mut [i32]>(expected_vec.as_mut_slice());\n+    assert_eq!(mut_err.as_deref_mut(), expected_result);\n+\n+    // The following cases test calling `as_deref_mut_*` with the wrong variant (i.e.\n+    // `as_deref_mut_ok()` with a `Result::Err()`, or `as_deref_mut_err()` with a `Result::Ok()`.\n+    // While uncommon, these cases are supported to ensure that an `as_deref_mut_*`\n+    // call can still be made even when one of the Result types does not implement\n+    // `Deref` (for example, std::io::Error).\n+\n+    // &mut Result<T, E: Deref>::Ok(T).as_deref_mut_err() ->\n+    //      Result<&mut T, &mut E::Deref::Target>::Ok(&mut T)\n+    let mut expected_val = 42;\n+    let mut_ok = &mut Result::Ok::<i32, &mut u8>(expected_val.clone());\n+    let expected_result = Result::Ok::<&mut i32, &mut u8>(&mut expected_val);\n+    assert_eq!(mut_ok.as_deref_mut_err(), expected_result);\n+\n+    let string = String::from(\"a result\");\n+    let expected_string = string.clone();\n+    let mut ref_str = expected_string.as_ref();\n+    let mut_ok = &mut Result::Ok::<&str, &mut u32>(string.as_str());\n+    let expected_result = Result::Ok::<&mut &str, &mut u32>(&mut ref_str);\n+    assert_eq!(mut_ok.as_deref_mut_err(), expected_result);\n+\n+    let mut expected_arr = [1, 2, 3, 4, 5];\n+    let mut_ok = &mut Result::Ok::<[i32; 5], &mut u32>(expected_arr.clone());\n+    let expected_result = Result::Ok::<&mut [i32; 5], &mut u32>(&mut expected_arr);\n+    assert_eq!(mut_ok.as_deref_mut_err(), expected_result);\n+\n+    // &mut Result<T: Deref, E>::Err(E).as_deref_mut_ok() ->\n+    //      Result<&mut T::Deref::Target, &mut E>::Err(&mut E)\n+    let mut expected_val = 41;\n+    let mut_err = &mut Result::Err::<&mut u8, i32>(expected_val.clone());\n+    let expected_result = Result::Err::<&mut u8, &mut i32>(&mut expected_val);\n+    assert_eq!(mut_err.as_deref_mut_ok(), expected_result);\n+\n+    let string = String::from(\"an error\");\n+    let expected_string = string.clone();\n+    let mut ref_str = expected_string.as_ref();\n+    let mut_err = &mut Result::Err::<&mut u32, &str>(string.as_str());\n+    let expected_result = Result::Err::<&mut u32, &mut &str>(&mut ref_str);\n+    assert_eq!(mut_err.as_deref_mut_ok(), expected_result);\n+\n+    let mut expected_arr = [5, 4, 3, 2, 1];\n+    let mut_err = &mut Result::Err::<&mut u32, [i32; 5]>(expected_arr.clone());\n+    let expected_result = Result::Err::<&mut u32, &mut [i32; 5]>(&mut expected_arr);\n+    assert_eq!(mut_err.as_deref_mut_ok(), expected_result);\n }"}, {"sha": "67feb3ff6aec3a98457c1b87efba2fdfb27e706b", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/option-as_deref.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d1aca3aea5cd7b1a96f27c0d1843ea4132a39232/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1aca3aea5cd7b1a96f27c0d1843ea4132a39232/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref.rs?ref=d1aca3aea5cd7b1a96f27c0d1843ea4132a39232", "patch": "@@ -0,0 +1,6 @@\n+#![feature(inner_deref)]\n+\n+fn main() {\n+    let _result = &Some(42).as_deref();\n+//~^ ERROR no method named `as_deref` found for type `std::option::Option<{integer}>`\n+}"}, {"sha": "54efcfd045ae946720801a8a786c792b66368293", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/option-as_deref.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d1aca3aea5cd7b1a96f27c0d1843ea4132a39232/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1aca3aea5cd7b1a96f27c0d1843ea4132a39232/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref.stderr?ref=d1aca3aea5cd7b1a96f27c0d1843ea4132a39232", "patch": "@@ -0,0 +1,12 @@\n+error[E0599]: no method named `as_deref` found for type `std::option::Option<{integer}>` in the current scope\n+  --> $DIR/option-as_deref.rs:4:29\n+   |\n+LL |     let _result = &Some(42).as_deref();\n+   |                             ^^^^^^^^ help: did you mean: `as_ref`\n+   |\n+   = note: the method `as_deref` exists but the following trait bounds were not satisfied:\n+           `{integer} : std::ops::Deref`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0599`."}, {"sha": "56aead8d0e00d2bcda6c445dbad592e37645b6d2", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/option-as_deref_mut.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d1aca3aea5cd7b1a96f27c0d1843ea4132a39232/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1aca3aea5cd7b1a96f27c0d1843ea4132a39232/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref_mut.rs?ref=d1aca3aea5cd7b1a96f27c0d1843ea4132a39232", "patch": "@@ -0,0 +1,6 @@\n+#![feature(inner_deref)]\n+\n+fn main() {\n+    let _result = &mut Some(42).as_deref_mut();\n+//~^ ERROR no method named `as_deref_mut` found for type `std::option::Option<{integer}>`\n+}"}, {"sha": "2c3a18be67c8f5d51f722d6b0ce2326218e9587f", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/option-as_deref_mut.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d1aca3aea5cd7b1a96f27c0d1843ea4132a39232/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref_mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1aca3aea5cd7b1a96f27c0d1843ea4132a39232/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref_mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref_mut.stderr?ref=d1aca3aea5cd7b1a96f27c0d1843ea4132a39232", "patch": "@@ -0,0 +1,12 @@\n+error[E0599]: no method named `as_deref_mut` found for type `std::option::Option<{integer}>` in the current scope\n+  --> $DIR/option-as_deref_mut.rs:4:33\n+   |\n+LL |     let _result = &mut Some(42).as_deref_mut();\n+   |                                 ^^^^^^^^^^^^\n+   |\n+   = note: the method `as_deref_mut` exists but the following trait bounds were not satisfied:\n+           `{integer} : std::ops::DerefMut`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0599`."}, {"sha": "f82eafcaffa9a624687a7593e08d0e81d980866b", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/option-deref.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/efb74579150a6ea0ad99a8568aa02a1aa23f6dd5/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb74579150a6ea0ad99a8568aa02a1aa23f6dd5/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-deref.rs?ref=efb74579150a6ea0ad99a8568aa02a1aa23f6dd5", "patch": "@@ -1,6 +0,0 @@\n-#![feature(inner_deref)]\n-\n-fn main() {\n-    let _result = &Some(42).deref();\n-//~^ ERROR no method named `deref` found for type `std::option::Option<{integer}>`\n-}"}, {"sha": "e916b7d7d3447889f0e154fb2b40c15a2c0f59d7", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/option-deref.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/efb74579150a6ea0ad99a8568aa02a1aa23f6dd5/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efb74579150a6ea0ad99a8568aa02a1aa23f6dd5/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-deref.stderr?ref=efb74579150a6ea0ad99a8568aa02a1aa23f6dd5", "patch": "@@ -1,12 +0,0 @@\n-error[E0599]: no method named `deref` found for type `std::option::Option<{integer}>` in the current scope\n-  --> $DIR/option-deref.rs:4:29\n-   |\n-LL |     let _result = &Some(42).deref();\n-   |                             ^^^^^\n-   |\n-   = note: the method `deref` exists but the following trait bounds were not satisfied:\n-           `{integer} : std::ops::Deref`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0599`."}, {"sha": "1d5eabd6170b72ccb3509fd630f6f6a9cda19e82", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/result-as_deref.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d1aca3aea5cd7b1a96f27c0d1843ea4132a39232/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1aca3aea5cd7b1a96f27c0d1843ea4132a39232/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref.rs?ref=d1aca3aea5cd7b1a96f27c0d1843ea4132a39232", "patch": "@@ -0,0 +1,6 @@\n+#![feature(inner_deref)]\n+\n+fn main() {\n+    let _result = &Ok(42).as_deref();\n+//~^ ERROR no method named `as_deref` found\n+}"}, {"sha": "6007f29e566e50222acd18d9ed2d304ff0d88dea", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/result-as_deref.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d1aca3aea5cd7b1a96f27c0d1843ea4132a39232/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1aca3aea5cd7b1a96f27c0d1843ea4132a39232/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref.stderr?ref=d1aca3aea5cd7b1a96f27c0d1843ea4132a39232", "patch": "@@ -0,0 +1,12 @@\n+error[E0599]: no method named `as_deref` found for type `std::result::Result<{integer}, _>` in the current scope\n+  --> $DIR/result-as_deref.rs:4:27\n+   |\n+LL |     let _result = &Ok(42).as_deref();\n+   |                           ^^^^^^^^ help: did you mean: `as_ref`\n+   |\n+   = note: the method `as_deref` exists but the following trait bounds were not satisfied:\n+           `{integer} : std::ops::Deref`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0599`."}, {"sha": "104aa3bcadff2e5ea2678333119d5b3a54b98bd7", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/result-as_deref_err.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d1aca3aea5cd7b1a96f27c0d1843ea4132a39232/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1aca3aea5cd7b1a96f27c0d1843ea4132a39232/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_err.rs?ref=d1aca3aea5cd7b1a96f27c0d1843ea4132a39232", "patch": "@@ -0,0 +1,6 @@\n+#![feature(inner_deref)]\n+\n+fn main() {\n+    let _result = &Err(41).as_deref_err();\n+//~^ ERROR no method named `as_deref_err` found\n+}"}, {"sha": "2e918b6835b5af85bbc7107ed026a477c61e1581", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/result-as_deref_err.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d1aca3aea5cd7b1a96f27c0d1843ea4132a39232/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1aca3aea5cd7b1a96f27c0d1843ea4132a39232/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_err.stderr?ref=d1aca3aea5cd7b1a96f27c0d1843ea4132a39232", "patch": "@@ -0,0 +1,12 @@\n+error[E0599]: no method named `as_deref_err` found for type `std::result::Result<_, {integer}>` in the current scope\n+  --> $DIR/result-as_deref_err.rs:4:28\n+   |\n+LL |     let _result = &Err(41).as_deref_err();\n+   |                            ^^^^^^^^^^^^ help: did you mean: `as_deref_ok`\n+   |\n+   = note: the method `as_deref_err` exists but the following trait bounds were not satisfied:\n+           `{integer} : std::ops::Deref`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0599`."}, {"sha": "c897ab3531f0ef26ce0735d4b5bd58a783b1ccd5", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/result-as_deref_mut.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d1aca3aea5cd7b1a96f27c0d1843ea4132a39232/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1aca3aea5cd7b1a96f27c0d1843ea4132a39232/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut.rs?ref=d1aca3aea5cd7b1a96f27c0d1843ea4132a39232", "patch": "@@ -0,0 +1,6 @@\n+#![feature(inner_deref)]\n+\n+fn main() {\n+    let _result = &mut Ok(42).as_deref_mut();\n+//~^ ERROR no method named `as_deref_mut` found\n+}"}, {"sha": "3d10cad201ec4e26530a9e76b5178cef09b8d8f2", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/result-as_deref_mut.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d1aca3aea5cd7b1a96f27c0d1843ea4132a39232/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1aca3aea5cd7b1a96f27c0d1843ea4132a39232/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut.stderr?ref=d1aca3aea5cd7b1a96f27c0d1843ea4132a39232", "patch": "@@ -0,0 +1,12 @@\n+error[E0599]: no method named `as_deref_mut` found for type `std::result::Result<{integer}, _>` in the current scope\n+  --> $DIR/result-as_deref_mut.rs:4:31\n+   |\n+LL |     let _result = &mut Ok(42).as_deref_mut();\n+   |                               ^^^^^^^^^^^^ help: did you mean: `as_deref_err`\n+   |\n+   = note: the method `as_deref_mut` exists but the following trait bounds were not satisfied:\n+           `{integer} : std::ops::DerefMut`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0599`."}, {"sha": "b7849ecb6d2422e3355784baca290883c612252d", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/result-as_deref_mut_err.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d1aca3aea5cd7b1a96f27c0d1843ea4132a39232/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1aca3aea5cd7b1a96f27c0d1843ea4132a39232/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut_err.rs?ref=d1aca3aea5cd7b1a96f27c0d1843ea4132a39232", "patch": "@@ -0,0 +1,6 @@\n+#![feature(inner_deref)]\n+\n+fn main() {\n+    let _result = &mut Err(41).as_deref_mut_err();\n+//~^ ERROR no method named `as_deref_mut_err` found\n+}"}, {"sha": "99f941d1bedad56763f4278d5de48c84f58188ce", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/result-as_deref_mut_err.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d1aca3aea5cd7b1a96f27c0d1843ea4132a39232/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut_err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1aca3aea5cd7b1a96f27c0d1843ea4132a39232/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut_err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut_err.stderr?ref=d1aca3aea5cd7b1a96f27c0d1843ea4132a39232", "patch": "@@ -0,0 +1,12 @@\n+error[E0599]: no method named `as_deref_mut_err` found for type `std::result::Result<_, {integer}>` in the current scope\n+  --> $DIR/result-as_deref_mut_err.rs:4:32\n+   |\n+LL |     let _result = &mut Err(41).as_deref_mut_err();\n+   |                                ^^^^^^^^^^^^^^^^ help: did you mean: `as_deref_mut_ok`\n+   |\n+   = note: the method `as_deref_mut_err` exists but the following trait bounds were not satisfied:\n+           `{integer} : std::ops::DerefMut`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0599`."}, {"sha": "54b695a0865f120546bfc199edaf281dc8aa3281", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/result-as_deref_mut_ok.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d1aca3aea5cd7b1a96f27c0d1843ea4132a39232/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut_ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1aca3aea5cd7b1a96f27c0d1843ea4132a39232/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut_ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut_ok.rs?ref=d1aca3aea5cd7b1a96f27c0d1843ea4132a39232", "patch": "@@ -0,0 +1,6 @@\n+#![feature(inner_deref)]\n+\n+fn main() {\n+    let _result = &mut Ok(42).as_deref_mut_ok();\n+//~^ ERROR no method named `as_deref_mut_ok` found\n+}"}, {"sha": "6d2b019541ad09e1be4de8b66c7308db696fa426", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/result-as_deref_mut_ok.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d1aca3aea5cd7b1a96f27c0d1843ea4132a39232/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut_ok.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1aca3aea5cd7b1a96f27c0d1843ea4132a39232/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut_ok.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut_ok.stderr?ref=d1aca3aea5cd7b1a96f27c0d1843ea4132a39232", "patch": "@@ -0,0 +1,12 @@\n+error[E0599]: no method named `as_deref_mut_ok` found for type `std::result::Result<{integer}, _>` in the current scope\n+  --> $DIR/result-as_deref_mut_ok.rs:4:31\n+   |\n+LL |     let _result = &mut Ok(42).as_deref_mut_ok();\n+   |                               ^^^^^^^^^^^^^^^ help: did you mean: `as_deref_mut_err`\n+   |\n+   = note: the method `as_deref_mut_ok` exists but the following trait bounds were not satisfied:\n+           `{integer} : std::ops::DerefMut`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0599`."}, {"sha": "ebb0500e8190fdc9309291450952d3496a2dbb83", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/result-as_deref_ok.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d1aca3aea5cd7b1a96f27c0d1843ea4132a39232/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1aca3aea5cd7b1a96f27c0d1843ea4132a39232/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_ok.rs?ref=d1aca3aea5cd7b1a96f27c0d1843ea4132a39232", "patch": "@@ -0,0 +1,6 @@\n+#![feature(inner_deref)]\n+\n+fn main() {\n+    let _result = &Ok(42).as_deref_ok();\n+//~^ ERROR no method named `as_deref_ok` found\n+}"}, {"sha": "5800bd37f9f7f664bac676548280a63cfe6259db", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/result-as_deref_ok.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d1aca3aea5cd7b1a96f27c0d1843ea4132a39232/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_ok.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1aca3aea5cd7b1a96f27c0d1843ea4132a39232/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_ok.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_ok.stderr?ref=d1aca3aea5cd7b1a96f27c0d1843ea4132a39232", "patch": "@@ -0,0 +1,12 @@\n+error[E0599]: no method named `as_deref_ok` found for type `std::result::Result<{integer}, _>` in the current scope\n+  --> $DIR/result-as_deref_ok.rs:4:27\n+   |\n+LL |     let _result = &Ok(42).as_deref_ok();\n+   |                           ^^^^^^^^^^^ help: did you mean: `as_deref_err`\n+   |\n+   = note: the method `as_deref_ok` exists but the following trait bounds were not satisfied:\n+           `{integer} : std::ops::Deref`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0599`."}, {"sha": "4be2000f058a5d44ad5d604f76e6afb5c5d37ad8", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/result-deref-err.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/efb74579150a6ea0ad99a8568aa02a1aa23f6dd5/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-deref-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb74579150a6ea0ad99a8568aa02a1aa23f6dd5/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-deref-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-deref-err.rs?ref=efb74579150a6ea0ad99a8568aa02a1aa23f6dd5", "patch": "@@ -1,6 +0,0 @@\n-#![feature(inner_deref)]\n-\n-fn main() {\n-    let _result = &Err(41).deref_err();\n-//~^ ERROR no method named `deref_err` found\n-}"}, {"sha": "333036127eadbd0fe4d34e4b5402c04fda871067", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/result-deref-err.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/efb74579150a6ea0ad99a8568aa02a1aa23f6dd5/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-deref-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efb74579150a6ea0ad99a8568aa02a1aa23f6dd5/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-deref-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-deref-err.stderr?ref=efb74579150a6ea0ad99a8568aa02a1aa23f6dd5", "patch": "@@ -1,12 +0,0 @@\n-error[E0599]: no method named `deref_err` found for type `std::result::Result<_, {integer}>` in the current scope\n-  --> $DIR/result-deref-err.rs:4:28\n-   |\n-LL |     let _result = &Err(41).deref_err();\n-   |                            ^^^^^^^^^ help: there is a method with a similar name: `deref_ok`\n-   |\n-   = note: the method `deref_err` exists but the following trait bounds were not satisfied:\n-           `{integer} : std::ops::Deref`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0599`."}, {"sha": "a706cde734805f8e02d149ca9d0e7cb114023149", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/result-deref-ok.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/efb74579150a6ea0ad99a8568aa02a1aa23f6dd5/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-deref-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb74579150a6ea0ad99a8568aa02a1aa23f6dd5/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-deref-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-deref-ok.rs?ref=efb74579150a6ea0ad99a8568aa02a1aa23f6dd5", "patch": "@@ -1,6 +0,0 @@\n-#![feature(inner_deref)]\n-\n-fn main() {\n-    let _result = &Ok(42).deref_ok();\n-//~^ ERROR no method named `deref_ok` found\n-}"}, {"sha": "593705123540c44fbffea8ebd8a38de27911269d", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/result-deref-ok.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/efb74579150a6ea0ad99a8568aa02a1aa23f6dd5/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-deref-ok.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efb74579150a6ea0ad99a8568aa02a1aa23f6dd5/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-deref-ok.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-deref-ok.stderr?ref=efb74579150a6ea0ad99a8568aa02a1aa23f6dd5", "patch": "@@ -1,12 +0,0 @@\n-error[E0599]: no method named `deref_ok` found for type `std::result::Result<{integer}, _>` in the current scope\n-  --> $DIR/result-deref-ok.rs:4:27\n-   |\n-LL |     let _result = &Ok(42).deref_ok();\n-   |                           ^^^^^^^^\n-   |\n-   = note: the method `deref_ok` exists but the following trait bounds were not satisfied:\n-           `{integer} : std::ops::Deref`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0599`."}, {"sha": "43a68e37dd0c319cdd4dcbb25fd36d7e83f72dd3", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/result-deref.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/efb74579150a6ea0ad99a8568aa02a1aa23f6dd5/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb74579150a6ea0ad99a8568aa02a1aa23f6dd5/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-deref.rs?ref=efb74579150a6ea0ad99a8568aa02a1aa23f6dd5", "patch": "@@ -1,6 +0,0 @@\n-#![feature(inner_deref)]\n-\n-fn main() {\n-    let _result = &Ok(42).deref();\n-//~^ ERROR no method named `deref` found\n-}"}, {"sha": "05baa7907fae0723f195e534a2536c18a87bb4a1", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/result-deref.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/efb74579150a6ea0ad99a8568aa02a1aa23f6dd5/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efb74579150a6ea0ad99a8568aa02a1aa23f6dd5/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-deref.stderr?ref=efb74579150a6ea0ad99a8568aa02a1aa23f6dd5", "patch": "@@ -1,12 +0,0 @@\n-error[E0599]: no method named `deref` found for type `std::result::Result<{integer}, _>` in the current scope\n-  --> $DIR/result-deref.rs:4:27\n-   |\n-LL |     let _result = &Ok(42).deref();\n-   |                           ^^^^^\n-   |\n-   = note: the method `deref` exists but the following trait bounds were not satisfied:\n-           `{integer} : std::ops::Deref`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0599`."}]}