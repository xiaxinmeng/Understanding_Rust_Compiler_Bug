{"sha": "ef726591f81238f19bfd4cc3b48d812d20dbfcc2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmNzI2NTkxZjgxMjM4ZjE5YmZkNGNjM2I0OGQ4MTJkMjBkYmZjYzI=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-05T13:23:17Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-05T22:22:17Z"}, "message": "fix debuginfo tests", "tree": {"sha": "3e1b9cdc570a898724defa9909875dd49ecc59b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e1b9cdc570a898724defa9909875dd49ecc59b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef726591f81238f19bfd4cc3b48d812d20dbfcc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef726591f81238f19bfd4cc3b48d812d20dbfcc2", "html_url": "https://github.com/rust-lang/rust/commit/ef726591f81238f19bfd4cc3b48d812d20dbfcc2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef726591f81238f19bfd4cc3b48d812d20dbfcc2/comments", "author": null, "committer": null, "parents": [{"sha": "1bbeb375821fe197342f1e22ab53b796bb0f0c70", "url": "https://api.github.com/repos/rust-lang/rust/commits/1bbeb375821fe197342f1e22ab53b796bb0f0c70", "html_url": "https://github.com/rust-lang/rust/commit/1bbeb375821fe197342f1e22ab53b796bb0f0c70"}], "stats": {"total": 38, "additions": 18, "deletions": 20}, "files": [{"sha": "e3cb190c3f2c46162ab1a7bb85a848f6c65ae9c7", "filename": "src/test/debuginfo/closure-in-generic-function.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef726591f81238f19bfd4cc3b48d812d20dbfcc2/src%2Ftest%2Fdebuginfo%2Fclosure-in-generic-function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef726591f81238f19bfd4cc3b48d812d20dbfcc2/src%2Ftest%2Fdebuginfo%2Fclosure-in-generic-function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fclosure-in-generic-function.rs?ref=ef726591f81238f19bfd4cc3b48d812d20dbfcc2", "patch": "@@ -50,7 +50,7 @@\n \n fn some_generic_fun<T1, T2>(a: T1, b: T2) -> (T2, T1) {\n \n-    let closure = |x, y| {\n+    let closure = |&: x, y| {\n         zzz(); // #break\n         (y, x)\n     };"}, {"sha": "b2617c57742522c6788e0e32c0e80df6b86f62cc", "filename": "src/test/debuginfo/lexical-scope-in-parameterless-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef726591f81238f19bfd4cc3b48d812d20dbfcc2/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-parameterless-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef726591f81238f19bfd4cc3b48d812d20dbfcc2/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-parameterless-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-parameterless-closure.rs?ref=ef726591f81238f19bfd4cc3b48d812d20dbfcc2", "patch": "@@ -18,7 +18,7 @@\n \n // Nothing to do here really, just make sure it compiles. See issue #8513.\n fn main() {\n-    let _ = ||();\n+    let _ = |&:|();\n     let _ = range(1u,3).map(|_| 5i);\n }\n "}, {"sha": "f2d092216697ff25c543c4f380daff04703f4a23", "filename": "src/test/debuginfo/lexical-scope-in-stack-closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef726591f81238f19bfd4cc3b48d812d20dbfcc2/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-stack-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef726591f81238f19bfd4cc3b48d812d20dbfcc2/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-stack-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-stack-closure.rs?ref=ef726591f81238f19bfd4cc3b48d812d20dbfcc2", "patch": "@@ -79,7 +79,7 @@ fn main() {\n     zzz(); // #break\n     sentinel();\n \n-    let stack_closure: |int| = |x| {\n+    let closure = |&: x: int| {\n         zzz(); // #break\n         sentinel();\n \n@@ -97,7 +97,7 @@ fn main() {\n     zzz(); // #break\n     sentinel();\n \n-    stack_closure(1000);\n+    closure(1000);\n \n     zzz(); // #break\n     sentinel();"}, {"sha": "cb7e26327c3def2f52406095226ad97a03475a21", "filename": "src/test/debuginfo/multi-byte-chars.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef726591f81238f19bfd4cc3b48d812d20dbfcc2/src%2Ftest%2Fdebuginfo%2Fmulti-byte-chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef726591f81238f19bfd4cc3b48d812d20dbfcc2/src%2Ftest%2Fdebuginfo%2Fmulti-byte-chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmulti-byte-chars.rs?ref=ef726591f81238f19bfd4cc3b48d812d20dbfcc2", "patch": "@@ -24,5 +24,5 @@ struct C { \u03b8: u8 }\n \n fn main() {\n     let x =  C { \u03b8: 0 };\n-    (|c: C| c.\u03b8 )(x);\n+    (|&: c: C| c.\u03b8 )(x);\n }"}, {"sha": "73a68893e933cac81089fa72a0b11d63a88cd2bd", "filename": "src/test/debuginfo/recursive-enum.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef726591f81238f19bfd4cc3b48d812d20dbfcc2/src%2Ftest%2Fdebuginfo%2Frecursive-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef726591f81238f19bfd4cc3b48d812d20dbfcc2/src%2Ftest%2Fdebuginfo%2Frecursive-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Frecursive-enum.rs?ref=ef726591f81238f19bfd4cc3b48d812d20dbfcc2", "patch": "@@ -25,11 +25,9 @@ pub struct Window<'a> {\n }\n \n struct WindowCallbacks<'a> {\n-    pos_callback: Option<WindowPosCallback<'a>>,\n+    pos_callback: Option<Box<FnMut(&Window, i32, i32) + 'a>>,\n }\n \n-pub type WindowPosCallback<'a> = |&Window, i32, i32|: 'a;\n-\n fn main() {\n     let x = WindowCallbacks { pos_callback: None };\n }"}, {"sha": "aac5824af00507e6731cc860e5b2762f7e47c7f8", "filename": "src/test/debuginfo/type-names.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ef726591f81238f19bfd4cc3b48d812d20dbfcc2/src%2Ftest%2Fdebuginfo%2Ftype-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef726591f81238f19bfd4cc3b48d812d20dbfcc2/src%2Ftest%2Fdebuginfo%2Ftype-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ftype-names.rs?ref=ef726591f81238f19bfd4cc3b48d812d20dbfcc2", "patch": "@@ -167,11 +167,11 @@\n \n \n // CLOSURES\n-// gdb-command:whatis stack_closure1\n-// gdb-check:type = struct (&mut|int|, uint)\n+// gdb-command:whatis closure1\n+// gdb-check:type = struct (closure, uint)\n \n-// gdb-command:whatis stack_closure2\n-// gdb-check:type = struct (&mut|i8, f32| -> f32, uint)\n+// gdb-command:whatis closure2\n+// gdb-check:type = struct (closure, uint)\n \n #![omit_gdb_pretty_printer_section]\n \n@@ -321,8 +321,8 @@ fn main() {\n     // how that maps to rustc's internal representation of these forms.\n     // Once closures have reached their 1.0 form, the tests below should\n     // probably be expanded.\n-    let stack_closure1 = (|x:int| {}, 0u);\n-    let stack_closure2 = (|x:i8, y: f32| { (x as f32) + y }, 0u);\n+    let closure1 = (|&: x:int| {}, 0u);\n+    let closure2 = (|&: x:i8, y: f32| { (x as f32) + y }, 0u);\n \n     zzz(); // #break\n }"}, {"sha": "3a7fbb9a3a1324ad02b515c53c257f2c401e4f9e", "filename": "src/test/debuginfo/var-captured-in-nested-closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef726591f81238f19bfd4cc3b48d812d20dbfcc2/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-nested-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef726591f81238f19bfd4cc3b48d812d20dbfcc2/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-nested-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-nested-closure.rs?ref=ef726591f81238f19bfd4cc3b48d812d20dbfcc2", "patch": "@@ -100,10 +100,10 @@ fn main() {\n     let struct_ref = &a_struct;\n     let owned = box 6;\n \n-    let closure = || {\n+    let mut closure = |&mut:| {\n         let closure_local = 8;\n \n-        let nested_closure = || {\n+        let mut nested_closure = |&mut:| {\n             zzz(); // #break\n             variable = constant + a_struct.a + struct_ref.a + *owned + closure_local;\n         };"}, {"sha": "a743adae51e9c54e01989351a4fa4ead3e7d09ad", "filename": "src/test/debuginfo/var-captured-in-stack-closure.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ef726591f81238f19bfd4cc3b48d812d20dbfcc2/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-stack-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef726591f81238f19bfd4cc3b48d812d20dbfcc2/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-stack-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-stack-closure.rs?ref=ef726591f81238f19bfd4cc3b48d812d20dbfcc2", "patch": "@@ -94,20 +94,20 @@ fn main() {\n     let owned = box 6;\n \n     {\n-        let closure = || {\n+        let mut first_closure = |&mut:| {\n             zzz(); // #break\n             variable = constant + a_struct.a + struct_ref.a + *owned;\n         };\n \n-        closure();\n+        first_closure();\n     }\n \n     {\n-        let mut unboxed_closure = |&mut:| {\n+        let mut second_closure = |&mut:| {\n             zzz(); // #break\n             variable = constant + a_struct.a + struct_ref.a + *owned;\n         };\n-        unboxed_closure();\n+        second_closure();\n     }\n }\n "}]}