{"sha": "794923c99511398bc90400e380dd11770ec8e614", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5NDkyM2M5OTUxMTM5OGJjOTA0MDBlMzgwZGQxMTc3MGVjOGU2MTQ=", "commit": {"author": {"name": "Eric Reed", "email": "ereed@mozilla.com", "date": "2013-06-25T18:43:40Z"}, "committer": {"name": "Eric Reed", "email": "ereed@mozilla.com", "date": "2013-06-25T18:43:40Z"}, "message": "UDP networking with tests", "tree": {"sha": "63a4ca6385e7f6074b95de6d0ee391463b5bff75", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63a4ca6385e7f6074b95de6d0ee391463b5bff75"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/794923c99511398bc90400e380dd11770ec8e614", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/794923c99511398bc90400e380dd11770ec8e614", "html_url": "https://github.com/rust-lang/rust/commit/794923c99511398bc90400e380dd11770ec8e614", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/794923c99511398bc90400e380dd11770ec8e614/comments", "author": null, "committer": null, "parents": [{"sha": "55dda46cf676e5efd713a0c1c8c4c5a297a6db02", "url": "https://api.github.com/repos/rust-lang/rust/commits/55dda46cf676e5efd713a0c1c8c4c5a297a6db02", "html_url": "https://github.com/rust-lang/rust/commit/55dda46cf676e5efd713a0c1c8c4c5a297a6db02"}], "stats": {"total": 427, "additions": 366, "deletions": 61}, "files": [{"sha": "97c09525d35f11917be53909a783f421bf4bb825", "filename": "src/libstd/rt/io/net/udp.rs", "status": "modified", "additions": 99, "deletions": 4, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/794923c99511398bc90400e380dd11770ec8e614/src%2Flibstd%2Frt%2Fio%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/794923c99511398bc90400e380dd11770ec8e614/src%2Flibstd%2Frt%2Fio%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fnet%2Fudp.rs?ref=794923c99511398bc90400e380dd11770ec8e614", "patch": "@@ -44,7 +44,6 @@ impl UdpSocket {\n             Ok((nread, src)) => Some((nread, src)),\n             Err(ioerr) => {\n                 // EOF is indicated by returning None\n-                // XXX do we ever find EOF reading UDP packets?\n                 if ioerr.kind != EndOfFile {\n                     read_error::cond.raise(ioerr);\n                 }\n@@ -86,10 +85,12 @@ impl UdpStream {\n \n impl Reader for UdpStream {\n     fn read(&mut self, buf: &mut [u8]) -> Option<uint> { \n-        let conn = self.connectedTo;\n         do self.as_socket |sock| {\n-            sock.recvfrom(buf)\n-                .map_consume(|(nread,src)| if src == conn {nread} else {0})\n+            match sock.recvfrom(buf) {\n+                Some((_nread, src)) if src != self.connectedTo => Some(0),\n+                Some((nread, _src)) => Some(nread),\n+                None => None,\n+            }\n         }\n     }\n \n@@ -105,3 +106,97 @@ impl Writer for UdpStream {\n \n     fn flush(&mut self) { fail!() }\n }\n+\n+#[cfg(test)]\n+mod test {\n+    use super::*;\n+    use rt::test::*;\n+    use rt::io::net::ip::Ipv4;\n+    use rt::io::*;\n+    use option::{Some, None};\n+\n+    #[test]  #[ignore]\n+    fn bind_error() {\n+        do run_in_newsched_task {\n+            let mut called = false;\n+            do io_error::cond.trap(|e| {\n+                assert!(e.kind == PermissionDenied);\n+                called = true;\n+            }).in {\n+                let addr = Ipv4(0, 0, 0, 0, 1);\n+                let socket = UdpSocket::bind(addr);\n+                assert!(socket.is_none());\n+            }\n+            assert!(called);\n+        }\n+    }\n+\n+    #[test] \n+    fn socket_smoke_test() {\n+        do run_in_newsched_task {\n+            let server_ip = next_test_ip4();\n+            let client_ip = next_test_ip4();\n+\n+            do spawntask_immediately {\n+                match UdpSocket::bind(server_ip) {\n+                    Some(server) => {\n+                        let mut buf = [0];\n+                        match server.recvfrom(buf) {\n+                            Some((nread, src)) => {\n+                                assert_eq!(nread, 1);\n+                                assert_eq!(buf[0], 99);\n+                                assert_eq!(src, client_ip);\n+                            }\n+                            None => fail!()\n+                        }\n+                    }\n+                    None => fail!()\n+                }\n+            }\n+\n+            do spawntask_immediately {\n+                match UdpSocket::bind(client_ip) {\n+                    Some(client) => client.sendto([99], server_ip),\n+                    None => fail!()\n+                }\n+            }\n+        }\n+    }\n+\n+    #[test]\n+    fn stream_smoke_test() {\n+        do run_in_newsched_task {\n+            let server_ip = next_test_ip4();\n+            let client_ip = next_test_ip4();\n+\n+            do spawntask_immediately {\n+                match UdpSocket::bind(server_ip) {\n+                    Some(server) => {\n+                        let server = ~server;\n+                        let mut stream = server.connect(client_ip);\n+                        let mut buf = [0];\n+                        match stream.read(buf) {\n+                            Some(nread) => {\n+                                assert_eq!(nread, 1);\n+                                assert_eq!(buf[0], 99);\n+                            }\n+                            None => fail!()\n+                        }\n+                    }\n+                    None => fail!()\n+                }\n+            }\n+\n+            do spawntask_immediately {\n+                match UdpSocket::bind(client_ip) {\n+                    Some(client) => {\n+                        let client = ~client;\n+                        let mut stream = client.connect(server_ip);\n+                        stream.write([99]);\n+                    }\n+                    None => fail!()\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "e39a6384bc63b26a9a016a3c5a93b3e040bdaf47", "filename": "src/libstd/rt/uv/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/794923c99511398bc90400e380dd11770ec8e614/src%2Flibstd%2Frt%2Fuv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/794923c99511398bc90400e380dd11770ec8e614/src%2Flibstd%2Frt%2Fuv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fmod.rs?ref=794923c99511398bc90400e380dd11770ec8e614", "patch": "@@ -46,6 +46,7 @@ use libc::{c_void, c_int, size_t, malloc, free};\n use cast::transmute;\n use ptr::null;\n use unstable::finally::Finally;\n+use rt::io::net::ip::IpAddr;\n \n use rt::io::IoError;\n \n@@ -126,7 +127,7 @@ pub type ConnectionCallback = ~fn(StreamWatcher, Option<UvError>);\n pub type FsCallback = ~fn(FsRequest, Option<UvError>);\n pub type TimerCallback = ~fn(TimerWatcher, Option<UvError>);\n pub type AsyncCallback = ~fn(AsyncWatcher, Option<UvError>);\n-pub type UdpReceiveCallback = ~fn(UdpWatcher, int, Buf, Ipv4, uint, Option<UvError>);\n+pub type UdpReceiveCallback = ~fn(UdpWatcher, int, Buf, IpAddr, uint, Option<UvError>);\n pub type UdpSendCallback = ~fn(UdpWatcher, Option<UvError>);\n \n \n@@ -298,9 +299,6 @@ pub fn status_to_maybe_uv_error<T>(handle: *T, status: c_int) -> Option<UvError>\n /// The uv buffer type\n pub type Buf = uvll::uv_buf_t;\n \n-/// The uv IPv4 type\n-pub type Ipv4 = uvll::sockaddr_in;\n-\n /// Borrow a slice to a Buf\n pub fn slice_to_uv_buf(v: &[u8]) -> Buf {\n     let data = vec::raw::to_ptr(v);"}, {"sha": "6a0f6f156b7983e5aa7601ae1d5dd7476f0b3a08", "filename": "src/libstd/rt/uv/net.rs", "status": "modified", "additions": 114, "deletions": 32, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/794923c99511398bc90400e380dd11770ec8e614/src%2Flibstd%2Frt%2Fuv%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/794923c99511398bc90400e380dd11770ec8e614/src%2Flibstd%2Frt%2Fuv%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fnet.rs?ref=794923c99511398bc90400e380dd11770ec8e614", "patch": "@@ -18,8 +18,12 @@ use rt::uv::{Loop, Watcher, Request, UvError, Buf, NativeHandle, NullCallback,\n use rt::io::net::ip::{IpAddr, Ipv4, Ipv6};\n use rt::uv::last_uv_error;\n use vec;\n+use str;\n+use from_str::{FromStr};\n \n-fn ip4_as_uv_ip4<T>(addr: IpAddr, f: &fn(*sockaddr_in) -> T) -> T {\n+//#[cfg(test)] use rt::test::*;\n+\n+pub fn ip4_as_uv_ip4<T>(addr: IpAddr, f: &fn(*sockaddr_in) -> T) -> T {\n     match addr {\n         Ipv4(a, b, c, d, p) => {\n             unsafe {\n@@ -41,12 +45,21 @@ fn ip4_as_uv_ip4<T>(addr: IpAddr, f: &fn(*sockaddr_in) -> T) -> T {\n \n pub fn uv_ip4_to_ip4(addr: *sockaddr_in) -> IpAddr {\n     let ip4_size = 16;\n-    let buf = vec::from_elem(ip4_size, 0u8);\n-    unsafe { ip4_name(addr, &buf[0], ip4_size as u64) };\n+    let buf = vec::from_elem(ip4_size + 1 /*null terminated*/, 0u8);\n+    unsafe { ip4_name(addr, vec::raw::to_ptr(buf), ip4_size as u64) };\n     let port = unsafe { ip4_port(addr) };\n-    Ipv4(buf[0], buf[1], buf[2], buf[3], port as u16)\n+    let ip_str = str::from_bytes_slice(buf).trim_right_chars(&'\\x00');\n+    let ip: ~[u8] = ip_str.split_iter('.')\n+                          .transform(|s: &str| -> u8 { \n+                                        let x = FromStr::from_str(s); \n+                                        assert!(x.is_some());\n+                                        x.unwrap() })\n+                          .collect();\n+    assert!(ip.len() >= 4); \n+    Ipv4(ip[0], ip[1], ip[2], ip[3], port as u16)\n }\n \n+\n // uv_stream t is the parent class of uv_tcp_t, uv_pipe_t, uv_tty_t\n // and uv_file_t\n pub struct StreamWatcher(*uvll::uv_stream_t);\n@@ -266,7 +279,7 @@ pub struct UdpWatcher(*uvll::uv_udp_t);\n impl Watcher for UdpWatcher { }\n \n impl UdpWatcher {\n-    pub fn new(loop_: &mut Loop) -> UdpWatcher {\n+    pub fn new(loop_: &Loop) -> UdpWatcher {\n         unsafe {\n             let handle = malloc_handle(UV_UDP);\n             assert!(handle.is_not_null());\n@@ -277,7 +290,7 @@ impl UdpWatcher {\n         }\n     }\n \n-    pub fn bind(&mut self, address: IpAddr) -> Result<(), UvError> {\n+    pub fn bind(&self, address: IpAddr) -> Result<(), UvError> {\n         match address {\n             Ipv4(*) => {\n                 do ip4_as_uv_ip4(address) |addr| {\n@@ -295,58 +308,59 @@ impl UdpWatcher {\n         }\n     }\n \n-    pub fn recv_start(&mut self, alloc: AllocCallback, cb: UdpReceiveCallback) {\n+    pub fn recv_start(&self, alloc: AllocCallback, cb: UdpReceiveCallback) {\n         {\n-            let data = self.get_watcher_data();\n+            let mut this = *self;\n+            let data = this.get_watcher_data();\n             data.alloc_cb = Some(alloc);\n             data.udp_recv_cb = Some(cb);\n         }\n \n         let handle = self.native_handle();\n-        unsafe { uvll::read_start(handle, alloc_cb, recv_cb); }\n+        unsafe { uvll::udp_recv_start(handle, alloc_cb, recv_cb); }\n \n         extern fn alloc_cb(handle: *uvll::uv_udp_t, suggested_size: size_t) -> Buf {\n             let mut udp_watcher: UdpWatcher = NativeHandle::from_native_handle(handle);\n-            let data = udp_watcher.get_watcher_data();\n-            let alloc_cb = data.alloc_cb.get_ref();\n+            let alloc_cb = udp_watcher.get_watcher_data().alloc_cb.get_ref();\n             return (*alloc_cb)(suggested_size as uint);\n         }\n \n         /* TODO the socket address should actually be a pointer to either a sockaddr_in or sockaddr_in6.\n            In libuv, the udp_recv callback takes a struct *sockaddr */\n         extern fn recv_cb(handle: *uvll::uv_udp_t, nread: ssize_t, buf: Buf, \n-                          address: *uvll::sockaddr_in, flags: c_uint) {\n+                          addr: *uvll::sockaddr_in, flags: c_uint) {\n             rtdebug!(\"buf addr: %x\", buf.base as uint);\n             rtdebug!(\"buf len: %d\", buf.len as int);\n             let mut udp_watcher: UdpWatcher = NativeHandle::from_native_handle(handle);\n             let data = udp_watcher.get_watcher_data();\n             let cb = data.udp_recv_cb.get_ref();\n             let status = status_to_maybe_uv_error(handle, nread as c_int);\n-            unsafe { (*cb)(udp_watcher, nread as int, buf, *address, flags as uint, status) };\n+            let address = uv_ip4_to_ip4(addr);\n+            unsafe { (*cb)(udp_watcher, nread as int, buf, address, flags as uint, status) };\n         }\n     }\n \n-    pub fn recv_stop(&mut self) {\n+    pub fn recv_stop(&self) {\n         let handle = self.native_handle();\n         unsafe { uvll::udp_recv_stop(handle); }\n     }\n \n-    pub fn send(&mut self, buf: Buf, address: IpAddr, cb: UdpSendCallback) {\n+    pub fn send(&self, buf: Buf, address: IpAddr, cb: UdpSendCallback) {\n         {\n-            let data = self.get_watcher_data();\n+            let mut this = *self;\n+            let data = this.get_watcher_data();\n             assert!(data.udp_send_cb.is_none());\n             data.udp_send_cb = Some(cb);\n         }\n \n         let req = UdpSendRequest::new();\n-        let bufs = [buf];\n         match address {\n             Ipv4(*) => {\n                 do ip4_as_uv_ip4(address) |addr| {\n                     unsafe {\n                         assert!(0 == uvll::udp_send(req.native_handle(),\n                                                     self.native_handle(),\n-                                                    bufs, addr, send_cb));\n+                                                    [buf], addr, send_cb));\n                     }\n                 }\n             }\n@@ -357,11 +371,7 @@ impl UdpWatcher {\n             let send_request: UdpSendRequest = NativeHandle::from_native_handle(req);\n             let mut udp_watcher = send_request.handle();\n             send_request.delete();\n-            let cb = {\n-                let data = udp_watcher.get_watcher_data();\n-                let cb = data.udp_send_cb.swap_unwrap();\n-                cb\n-            };\n+            let cb = udp_watcher.get_watcher_data().udp_send_cb.swap_unwrap();\n             let status = status_to_maybe_uv_error(udp_watcher.native_handle(), status);\n             cb(udp_watcher, status);\n         }\n@@ -379,10 +389,7 @@ impl UdpWatcher {\n \n         extern fn close_cb(handle: *uvll::uv_udp_t) {\n             let mut udp_watcher: UdpWatcher = NativeHandle::from_native_handle(handle);\n-            {\n-                let data = udp_watcher.get_watcher_data();\n-                data.close_cb.swap_unwrap()();\n-            }\n+            udp_watcher.get_watcher_data().close_cb.swap_unwrap()();\n             udp_watcher.drop_watcher_data();\n             unsafe { free_handle(handle as *c_void) }\n         }\n@@ -475,18 +482,15 @@ impl Request for UdpSendRequest { }\n \n impl UdpSendRequest {\n     pub fn new() -> UdpSendRequest {\n-        let send_handle = unsafe {\n-            malloc_req(UV_UDP_SEND)\n-        };\n+        let send_handle = unsafe { malloc_req(UV_UDP_SEND) };\n         assert!(send_handle.is_not_null());\n         let send_handle = send_handle as *uvll::uv_udp_send_t;\n         UdpSendRequest(send_handle)\n     }\n \n     pub fn handle(&self) -> UdpWatcher {\n         unsafe {\n-            let udp_handle = uvll::get_udp_handle_from_send_req(self.native_handle());\n-            NativeHandle::from_native_handle(udp_handle)\n+            NativeHandle::from_native_handle(uvll::get_udp_handle_from_send_req(self.native_handle()))\n         }\n     }\n \n@@ -516,6 +520,12 @@ mod test {\n     use rt::uv::{Loop, AllocCallback};\n     use rt::uv::{vec_from_uv_buf, vec_to_uv_buf, slice_to_uv_buf};\n \n+    #[test]\n+    fn test_ip4_conversion() {\n+        let ip4 = next_test_ip4();\n+        assert_eq!(ip4, ip4_as_uv_ip4(ip4, uv_ip4_to_ip4));\n+    }\n+\n     #[test]\n     fn connect_close() {\n         do run_in_bare_thread() {\n@@ -534,6 +544,19 @@ mod test {\n         }\n     }\n \n+    #[test] \n+    fn udp_bind_close() {\n+        do run_in_bare_thread() {\n+            let mut loop_ = Loop::new();\n+            let udp_watcher = { UdpWatcher::new(&mut loop_) };\n+            let addr = next_test_ip4();\n+            udp_watcher.bind(addr);\n+            udp_watcher.close(||());\n+            loop_.run();\n+            loop_.close();\n+        }\n+    }\n+\n     #[test]\n     fn listen() {\n         do run_in_bare_thread() {\n@@ -609,4 +632,63 @@ mod test {\n             loop_.close();\n         }\n     }\n+\n+    #[test] \n+    fn udp_recv() {\n+        do run_in_bare_thread() {\n+            static MAX: int = 10;\n+            let mut loop_ = Loop::new();\n+            let server_addr = next_test_ip4();\n+            let client_addr = next_test_ip4();\n+\n+            let server = UdpWatcher::new(&loop_);\n+            assert!(server.bind(server_addr).is_ok());\n+\n+            rtdebug!(\"starting read\");\n+            let alloc: AllocCallback = |size| {\n+                vec_to_uv_buf(vec::from_elem(size, 0))\n+            };\n+\n+            do server.recv_start(alloc) |server, nread, buf, src, flags, status| {\n+                server.recv_stop();\n+                rtdebug!(\"i'm reading!\");\n+                assert!(status.is_none());\n+                assert_eq!(flags, 0);\n+                assert_eq!(src, client_addr);\n+\n+                let buf = vec_from_uv_buf(buf);\n+                let mut count = 0;\n+                rtdebug!(\"got %d bytes\", nread);\n+\n+                let buf = buf.unwrap();\n+                for buf.slice(0, nread as uint).iter().advance() |&byte| {\n+                    assert!(byte == count as u8);\n+                    rtdebug!(\"%u\", byte as uint);\n+                    count += 1;\n+                }\n+                assert_eq!(count, MAX);\n+\n+                server.close(||{});\n+            }\n+\n+            do Thread::start {\n+                let mut loop_ = Loop::new();\n+                let client = UdpWatcher::new(&loop_);\n+                assert!(client.bind(client_addr).is_ok());\n+                let msg = ~[0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n+                let buf = slice_to_uv_buf(msg);\n+                do client.send(buf, server_addr) |client, status| {\n+                    rtdebug!(\"writing\");\n+                    assert!(status.is_none());\n+                    client.close(||{});\n+                }\n+\n+                loop_.run();\n+                loop_.close();\n+            };\n+\n+            loop_.run();\n+            loop_.close();\n+        }\n+    }\n }"}, {"sha": "127fac6244e38379dd267a5a65a9720746e00a24", "filename": "src/libstd/rt/uv/uvio.rs", "status": "modified", "additions": 150, "deletions": 20, "changes": 170, "blob_url": "https://github.com/rust-lang/rust/blob/794923c99511398bc90400e380dd11770ec8e614/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/794923c99511398bc90400e380dd11770ec8e614/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs?ref=794923c99511398bc90400e380dd11770ec8e614", "patch": "@@ -25,7 +25,6 @@ use rt::io::{standard_error, OtherIoError};\n use rt::tube::Tube;\n use rt::local::Local;\n use unstable::sync::{Exclusive, exclusive};\n-use rt::uv::net::uv_ip4_to_ip4;\n \n #[cfg(test)] use container::Container;\n #[cfg(test)] use uint;\n@@ -263,7 +262,7 @@ impl IoFactory for UvIoFactory {\n     }\n \n     fn udp_bind(&mut self, addr: IpAddr) -> Result<~RtioUdpSocketObject, IoError> {\n-        let mut watcher = UdpWatcher::new(self.uv_loop());\n+        let /*mut*/ watcher = UdpWatcher::new(self.uv_loop());\n         match watcher.bind(addr) {\n             Ok(_) => Ok(~UvUdpSocket { watcher: watcher }),\n             Err(uverr) => {\n@@ -487,21 +486,19 @@ impl RtioUdpSocket for UvUdpSocket {\n         do scheduler.deschedule_running_task_and_then |sched, task| {\n             rtdebug!(\"recvfrom: entered scheduler context\");\n             assert!(!sched.in_task_context());\n-            let mut watcher = watcher;\n             let task_cell = Cell::new(task);\n             let alloc: AllocCallback = |_| unsafe { slice_to_uv_buf(*buf_ptr) };\n-            do watcher.recv_start(alloc) |watcher, nread, buf, addr, flags, status| {\n-                let _ = flags; // TODO \n-                let _ = buf; // TODO \n+            do watcher.recv_start(alloc) |watcher, nread, _buf, addr, flags, status| {\n+                let _ = flags; // TODO add handling for partials?\n \n-                let mut watcher = watcher;\n                 watcher.recv_stop();\n \n-                let result = if status.is_none() {\n-                    assert!(nread >= 0);\n-                    Ok((nread as uint, uv_ip4_to_ip4(&addr)))\n-                } else {\n-                    Err(uv_error_to_io_error(status.unwrap()))\n+                let result = match status {\n+                    None => {\n+                        assert!(nread >= 0);\n+                        Ok((nread as uint, addr))\n+                    }\n+                    Some(err) => Err(uv_error_to_io_error(err))\n                 };\n \n                 unsafe { (*result_cell_ptr).put_back(result); }\n@@ -513,8 +510,8 @@ impl RtioUdpSocket for UvUdpSocket {\n \n         assert!(!result_cell.is_empty());\n         return result_cell.take();\n-\n     }\n+\n     fn sendto(&self, buf: &[u8], dst: IpAddr) -> Result<(), IoError> {\n         let result_cell = Cell::new_empty();\n         let result_cell_ptr: *Cell<Result<(), IoError>> = &result_cell;\n@@ -523,16 +520,13 @@ impl RtioUdpSocket for UvUdpSocket {\n         let watcher = self.watcher();\n         let buf_ptr: *&[u8] = &buf;\n         do scheduler.deschedule_running_task_and_then |_, task| {\n-            let mut watcher = watcher;\n             let task_cell = Cell::new(task);\n             let buf = unsafe { slice_to_uv_buf(*buf_ptr) };\n-            do watcher.send(buf, dst) |watcher, status| {\n-                let _ = watcher; // TODO \n+            do watcher.send(buf, dst) |_watcher, status| {\n \n-                let result = if status.is_none() {\n-                    Ok(())\n-                } else {\n-                    Err(uv_error_to_io_error(status.unwrap()))\n+                let result = match status {\n+                    None => Ok(()),\n+                    Some(err) => Err(uv_error_to_io_error(err)),\n                 };\n \n                 unsafe { (*result_cell_ptr).put_back(result); }\n@@ -559,6 +553,18 @@ fn test_simple_io_no_connect() {\n     }\n }\n \n+#[test]\n+fn test_simple_udp_io_bind_only() {\n+    do run_in_newsched_task {\n+        unsafe {\n+            let io = Local::unsafe_borrow::<IoFactoryObject>();\n+            let addr = next_test_ip4();\n+            let maybe_socket = (*io).udp_bind(addr);\n+            assert!(maybe_socket.is_ok());\n+        }\n+    }\n+}\n+\n #[test]\n fn test_simple_tcp_server_and_client() {\n     do run_in_newsched_task {\n@@ -590,6 +596,37 @@ fn test_simple_tcp_server_and_client() {\n     }\n }\n \n+#[test] \n+fn test_simple_udp_server_and_client() {\n+    do run_in_newsched_task {\n+        let server_addr = next_test_ip4();\n+        let client_addr = next_test_ip4();\n+\n+        do spawntask_immediately {\n+            unsafe {\n+                let io = Local::unsafe_borrow::<IoFactoryObject>();\n+                let server_socket = (*io).udp_bind(server_addr).unwrap();\n+                let mut buf = [0, .. 2048];\n+                let (nread,src) = server_socket.recvfrom(buf).unwrap();\n+                assert_eq!(nread, 8);\n+                for uint::range(0, nread) |i| {\n+                    rtdebug!(\"%u\", buf[i] as uint);\n+                    assert_eq!(buf[i], i as u8);\n+                }\n+                assert_eq!(src, client_addr);\n+            }\n+        }\n+\n+        do spawntask_immediately {\n+            unsafe {\n+                let io = Local::unsafe_borrow::<IoFactoryObject>();\n+                let client_socket = (*io).udp_bind(client_addr).unwrap();\n+                client_socket.sendto([0, 1, 2, 3, 4, 5, 6, 7], server_addr);\n+            }\n+        }\n+    }\n+}\n+\n #[test] #[ignore(reason = \"busted\")]\n fn test_read_and_block() {\n     do run_in_newsched_task {\n@@ -681,3 +718,96 @@ fn test_read_read_read() {\n         }\n     }\n }\n+\n+#[test]\n+fn test_udp_twice() {\n+    do run_in_newsched_task {\n+        let server_addr = next_test_ip4();\n+        let client_addr = next_test_ip4();\n+\n+        do spawntask_immediately {\n+            unsafe {\n+                let io = Local::unsafe_borrow::<IoFactoryObject>();\n+                let client = (*io).udp_bind(client_addr).unwrap();\n+                assert!(client.sendto([1], server_addr).is_ok());\n+                assert!(client.sendto([2], server_addr).is_ok());\n+            }\n+        }\n+\n+        do spawntask_immediately {\n+            unsafe {\n+                let io = Local::unsafe_borrow::<IoFactoryObject>();\n+                let server = (*io).udp_bind(server_addr).unwrap();\n+                let mut buf1 = [0];\n+                let mut buf2 = [0];\n+                let (nread1, src1) = server.recvfrom(buf1).unwrap();\n+                let (nread2, src2) = server.recvfrom(buf2).unwrap();\n+                assert_eq!(nread1, 1);\n+                assert_eq!(nread2, 1);\n+                assert_eq!(src1, client_addr);\n+                assert_eq!(src2, client_addr);\n+                assert_eq!(buf1[0], 1);\n+                assert_eq!(buf2[0], 2);\n+            }\n+        }\n+    }\n+}\n+\n+#[test]\n+fn test_udp_many_read() {\n+    do run_in_newsched_task {\n+        let server_out_addr = next_test_ip4();\n+        let server_in_addr = next_test_ip4();\n+        let client_out_addr = next_test_ip4();\n+        let client_in_addr = next_test_ip4();\n+        static MAX: uint = 500_000;\n+\n+        do spawntask_immediately {\n+            unsafe {\n+                let io = Local::unsafe_borrow::<IoFactoryObject>();\n+                let server_out = (*io).udp_bind(server_out_addr).unwrap();\n+                let server_in = (*io).udp_bind(server_in_addr).unwrap();\n+                let msg = [1, .. 2048];\n+                let mut total_bytes_sent = 0;\n+                let mut buf = [1];\n+                while buf[0] == 1 {\n+                    // send more data\n+                    assert!(server_out.sendto(msg, client_in_addr).is_ok());\n+                    total_bytes_sent += msg.len();\n+                    // check if the client has received enough\n+                    let res = server_in.recvfrom(buf);\n+                    assert!(res.is_ok());\n+                    let (nread, src) = res.unwrap();\n+                    assert_eq!(nread, 1);\n+                    assert_eq!(src, client_out_addr);\n+                }\n+                assert!(total_bytes_sent >= MAX);\n+            }\n+        }\n+\n+        do spawntask_immediately {\n+            unsafe {\n+                let io = Local::unsafe_borrow::<IoFactoryObject>();\n+                let client_out = (*io).udp_bind(client_out_addr).unwrap();\n+                let client_in = (*io).udp_bind(client_in_addr).unwrap();\n+                let mut total_bytes_recv = 0;\n+                let mut buf = [0, .. 2048];\n+                while total_bytes_recv < MAX {\n+                    // ask for more\n+                    assert!(client_out.sendto([1], server_in_addr).is_ok());\n+                    // wait for data\n+                    let res = client_in.recvfrom(buf);\n+                    assert!(res.is_ok());\n+                    let (nread, src) = res.unwrap();\n+                    assert_eq!(src, server_out_addr);\n+                    total_bytes_recv += nread;\n+                    for uint::range(0, nread) |i| {\n+                        assert_eq!(buf[i], 1);\n+                    }\n+                }\n+                // tell the server we're done\n+                assert!(client_out.sendto([0], server_in_addr).is_ok());\n+            }\n+        }\n+    }\n+}"}, {"sha": "3bfc123dc85247ea5d20fb151494093d6888904d", "filename": "src/libstd/rt/uv/uvll.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/794923c99511398bc90400e380dd11770ec8e614/src%2Flibstd%2Frt%2Fuv%2Fuvll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/794923c99511398bc90400e380dd11770ec8e614/src%2Flibstd%2Frt%2Fuv%2Fuvll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fuvll.rs?ref=794923c99511398bc90400e380dd11770ec8e614", "patch": "@@ -215,7 +215,7 @@ pub unsafe fn udp_send6<T>(req: *uv_udp_send_t, handle: *T, buf_in: &[uv_buf_t],\n                           addr: *sockaddr_in6, cb: uv_udp_send_cb) -> c_int {\n     let buf_ptr = vec::raw::to_ptr(buf_in);\n     let buf_cnt = buf_in.len() as i32;\n-    return rust_uv_udp_send(req, handle as *c_void, buf_ptr, buf_cnt, addr, cb);\n+    return rust_uv_udp_send6(req, handle as *c_void, buf_ptr, buf_cnt, addr, cb);\n }\n \n pub unsafe fn udp_recv_start(server: *uv_udp_t, on_alloc: uv_alloc_cb, on_recv: uv_udp_recv_cb) -> c_int {"}]}