{"sha": "6819e6e6e1c049b5e70ebd4fde791623e7ed2aaa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4MTllNmU2ZTFjMDQ5YjVlNzBlYmQ0ZmRlNzkxNjIzZTdlZDJhYWE=", "commit": {"author": {"name": "Denis Merigoux", "email": "denis.merigoux@gmail.com", "date": "2018-09-26T15:00:01Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-11-16T12:38:15Z"}, "message": "Preparing the generalization of base:compile_coodegen_unit", "tree": {"sha": "7b221675cb6def4413ff1664d7ed70153c1d38e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b221675cb6def4413ff1664d7ed70153c1d38e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6819e6e6e1c049b5e70ebd4fde791623e7ed2aaa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6819e6e6e1c049b5e70ebd4fde791623e7ed2aaa", "html_url": "https://github.com/rust-lang/rust/commit/6819e6e6e1c049b5e70ebd4fde791623e7ed2aaa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6819e6e6e1c049b5e70ebd4fde791623e7ed2aaa/comments", "author": {"login": "denismerigoux", "id": 1766128, "node_id": "MDQ6VXNlcjE3NjYxMjg=", "avatar_url": "https://avatars.githubusercontent.com/u/1766128?v=4", "gravatar_id": "", "url": "https://api.github.com/users/denismerigoux", "html_url": "https://github.com/denismerigoux", "followers_url": "https://api.github.com/users/denismerigoux/followers", "following_url": "https://api.github.com/users/denismerigoux/following{/other_user}", "gists_url": "https://api.github.com/users/denismerigoux/gists{/gist_id}", "starred_url": "https://api.github.com/users/denismerigoux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/denismerigoux/subscriptions", "organizations_url": "https://api.github.com/users/denismerigoux/orgs", "repos_url": "https://api.github.com/users/denismerigoux/repos", "events_url": "https://api.github.com/users/denismerigoux/events{/privacy}", "received_events_url": "https://api.github.com/users/denismerigoux/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91a2a8069213aefb3e7aba8e5edd9e4df23364c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/91a2a8069213aefb3e7aba8e5edd9e4df23364c4", "html_url": "https://github.com/rust-lang/rust/commit/91a2a8069213aefb3e7aba8e5edd9e4df23364c4"}], "stats": {"total": 171, "additions": 114, "deletions": 57}, "files": [{"sha": "74432870705a0bd7e8b8c4ee8138e50031ef6dc7", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 16, "deletions": 35, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/6819e6e6e1c049b5e70ebd4fde791623e7ed2aaa/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6819e6e6e1c049b5e70ebd4fde791623e7ed2aaa/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=6819e6e6e1c049b5e70ebd4fde791623e7ed2aaa", "patch": "@@ -27,6 +27,7 @@ use super::ModuleLlvm;\n use super::ModuleCodegen;\n use super::ModuleKind;\n use super::CachedModuleCodegen;\n+use super::LlvmCodegenBackend;\n \n use abi;\n use back::write;\n@@ -53,8 +54,6 @@ use builder::{Builder, MemFlags};\n use callee;\n use rustc_mir::monomorphize::item::DefPathBasedNames;\n use common::{self, IntPredicate, RealPredicate, TypeKind};\n-use context::CodegenCx;\n-use debuginfo;\n use meth;\n use mir;\n use monomorphize::Instance;\n@@ -968,7 +967,7 @@ impl<B: BackendMethods> Drop for AbortCodegenOnDrop<B> {\n     }\n }\n \n-fn assert_and_save_dep_graph<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n+fn assert_and_save_dep_graph<'ll, 'tcx>(tcx: TyCtxt<'ll, 'tcx, 'tcx>) {\n     time(tcx.sess,\n          \"assert dep graph\",\n          || rustc_incremental::assert_dep_graph(tcx));\n@@ -1067,7 +1066,7 @@ impl CrateInfo {\n     }\n }\n \n-fn compile_codegen_unit<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+fn compile_codegen_unit<'ll, 'tcx>(tcx: TyCtxt<'ll, 'tcx, 'tcx>,\n                                   cgu_name: InternedString)\n                                   -> Stats {\n     let start_time = Instant::now();\n@@ -1089,67 +1088,49 @@ fn compile_codegen_unit<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                            cost);\n     return stats;\n \n-    fn module_codegen<'a, 'tcx>(\n-        tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    fn module_codegen<'ll, 'tcx>(\n+        tcx: TyCtxt<'ll, 'tcx, 'tcx>,\n         cgu_name: InternedString)\n         -> (Stats, ModuleCodegen<ModuleLlvm>)\n     {\n+        let backend = LlvmCodegenBackend(());\n         let cgu = tcx.codegen_unit(cgu_name);\n-\n         // Instantiate monomorphizations without filling out definitions yet...\n-        let llvm_module = ModuleLlvm::new(tcx.sess, &cgu_name.as_str());\n+        let llvm_module = backend.new_metadata(tcx.sess, &cgu_name.as_str());\n         let stats = {\n-            let cx = CodegenCx::new(tcx, cgu, &llvm_module);\n+            let cx = backend.new_codegen_context(tcx, cgu, &llvm_module);\n             let mono_items = cx.codegen_unit\n                                .items_in_deterministic_order(cx.tcx);\n             for &(mono_item, (linkage, visibility)) in &mono_items {\n-                mono_item.predefine(&cx, linkage, visibility);\n+                mono_item.predefine::<Builder<&Value>>(&cx, linkage, visibility);\n             }\n \n             // ... and now that we have everything pre-defined, fill out those definitions.\n             for &(mono_item, _) in &mono_items {\n-                mono_item.define(&cx);\n+                mono_item.define::<Builder<&Value>>(&cx);\n             }\n \n             // If this codegen unit contains the main function, also create the\n             // wrapper here\n             maybe_create_entry_wrapper::<Builder<&Value>>(&cx);\n \n             // Run replace-all-uses-with for statics that need it\n-            for &(old_g, new_g) in cx.statics_to_rauw.borrow().iter() {\n-                unsafe {\n-                    let bitcast = llvm::LLVMConstPointerCast(new_g, cx.val_ty(old_g));\n-                    llvm::LLVMReplaceAllUsesWith(old_g, bitcast);\n-                    llvm::LLVMDeleteGlobal(old_g);\n-                }\n+            for &(old_g, new_g) in cx.statics_to_rauw().borrow().iter() {\n+                cx.static_replace_all_uses(old_g, new_g)\n             }\n \n             // Create the llvm.used variable\n             // This variable has type [N x i8*] and is stored in the llvm.metadata section\n-            if !cx.used_statics.borrow().is_empty() {\n-                let name = const_cstr!(\"llvm.used\");\n-                let section = const_cstr!(\"llvm.metadata\");\n-                let array = cx.const_array(\n-                    &cx.type_ptr_to(cx.type_i8()),\n-                    &*cx.used_statics.borrow()\n-                );\n-\n-                unsafe {\n-                    let g = llvm::LLVMAddGlobal(cx.llmod,\n-                                                cx.val_ty(array),\n-                                                name.as_ptr());\n-                    llvm::LLVMSetInitializer(g, array);\n-                    llvm::LLVMRustSetLinkage(g, llvm::Linkage::AppendingLinkage);\n-                    llvm::LLVMSetSection(g, section.as_ptr());\n-                }\n+            if !cx.used_statics().borrow().is_empty() {\n+                cx.create_used_variable()\n             }\n \n             // Finalize debuginfo\n             if cx.sess().opts.debuginfo != DebugInfo::None {\n-                debuginfo::finalize(&cx);\n+                cx.debuginfo_finalize();\n             }\n \n-            cx.stats.into_inner()\n+            cx.consume_stats().into_inner()\n         };\n \n         (stats, ModuleCodegen {"}, {"sha": "cbbda28994b2f8fb1d650245e5840540ec8b6907", "filename": "src/librustc_codegen_llvm/consts.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6819e6e6e1c049b5e70ebd4fde791623e7ed2aaa/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6819e6e6e1c049b5e70ebd4fde791623e7ed2aaa/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fconsts.rs?ref=6819e6e6e1c049b5e70ebd4fde791623e7ed2aaa", "patch": "@@ -443,4 +443,11 @@ impl StaticMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n             }\n         }\n     }\n+    fn static_replace_all_uses(&self, old_g: &'ll Value, new_g: &'ll Value) {\n+        unsafe {\n+            let bitcast = llvm::LLVMConstPointerCast(new_g, self.val_ty(old_g));\n+            llvm::LLVMReplaceAllUsesWith(old_g, bitcast);\n+            llvm::LLVMDeleteGlobal(old_g);\n+        }\n+    }\n }"}, {"sha": "b0d153f8efc165c3caf799c75ef4d8ade39c96c3", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/6819e6e6e1c049b5e70ebd4fde791623e7ed2aaa/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6819e6e6e1c049b5e70ebd4fde791623e7ed2aaa/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=6819e6e6e1c049b5e70ebd4fde791623e7ed2aaa", "patch": "@@ -421,17 +421,48 @@ impl MiscMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         &self.stats\n     }\n \n+    fn consume_stats(self) -> RefCell<Stats> {\n+        self.stats\n+    }\n+\n     fn codegen_unit(&self) -> &Arc<CodegenUnit<'tcx>> {\n         &self.codegen_unit\n     }\n \n+    fn statics_to_rauw(&self) -> &RefCell<Vec<(&'ll Value, &'ll Value)>> {\n+        &self.statics_to_rauw\n+    }\n+\n+    fn used_statics(&self) -> &RefCell<Vec<&'ll Value>> {\n+        &self.used_statics\n+    }\n+\n     fn set_frame_pointer_elimination(&self, llfn: &'ll Value) {\n         attributes::set_frame_pointer_elimination(self, llfn)\n     }\n \n     fn apply_target_cpu_attr(&self, llfn: &'ll Value) {\n         attributes::apply_target_cpu_attr(self, llfn)\n     }\n+\n+\n+    fn create_used_variable(&self) {\n+        let name = const_cstr!(\"llvm.used\");\n+        let section = const_cstr!(\"llvm.metadata\");\n+        let array = self.const_array(\n+            &self.type_ptr_to(self.type_i8()),\n+            &*self.used_statics.borrow()\n+        );\n+\n+        unsafe {\n+            let g = llvm::LLVMAddGlobal(self.llmod,\n+                                        self.val_ty(array),\n+                                        name.as_ptr());\n+            llvm::LLVMSetInitializer(g, array);\n+            llvm::LLVMRustSetLinkage(g, llvm::Linkage::AppendingLinkage);\n+            llvm::LLVMSetSection(g, section.as_ptr());\n+        }\n+    }\n }\n \n impl IntrinsicDeclarationMethods<'tcx> for CodegenCx<'b, 'tcx> {"}, {"sha": "8ef7350747d4f183617189bf770e312278047a52", "filename": "src/librustc_codegen_llvm/debuginfo/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6819e6e6e1c049b5e70ebd4fde791623e7ed2aaa/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6819e6e6e1c049b5e70ebd4fde791623e7ed2aaa/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs?ref=6819e6e6e1c049b5e70ebd4fde791623e7ed2aaa", "patch": "@@ -585,4 +585,8 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n     ) -> &'ll DILexicalBlock {\n         metadata::extend_scope_to_file(&self, scope_metadata, file, defining_crate)\n     }\n+\n+    fn debuginfo_finalize(&self) {\n+        finalize(self)\n+    }\n }"}, {"sha": "b34bb00682f6b7c082afc92e2159e8f50f254b03", "filename": "src/librustc_codegen_llvm/interfaces/backend.rs", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6819e6e6e1c049b5e70ebd4fde791623e7ed2aaa/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6819e6e6e1c049b5e70ebd4fde791623e7ed2aaa/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fbackend.rs?ref=6819e6e6e1c049b5e70ebd4fde791623e7ed2aaa", "patch": "@@ -11,13 +11,15 @@\n use rustc::ty::layout::{HasTyCtxt, LayoutOf, TyLayout};\n use rustc::ty::Ty;\n \n-use super::CodegenObject;\n+use super::{CodegenMethods, CodegenObject};\n+use monomorphize::partitioning::CodegenUnit;\n use rustc::middle::allocator::AllocatorKind;\n use rustc::middle::cstore::EncodedMetadata;\n use rustc::session::Session;\n use rustc::ty::TyCtxt;\n use std::any::Any;\n use std::sync::mpsc::Receiver;\n+use std::sync::Arc;\n use time_graph::TimeGraph;\n use ModuleCodegen;\n \n@@ -40,16 +42,16 @@ impl<'tcx, T> Backend<'tcx> for T where\n {}\n \n pub trait BackendMethods {\n-    type Metadata;\n+    type Module;\n     type OngoingCodegen;\n \n-    fn new_metadata(&self, sess: &Session, mod_name: &str) -> Self::Metadata;\n-    fn write_metadata<'a, 'gcx>(\n+    fn new_metadata(&self, sess: &Session, mod_name: &str) -> Self::Module;\n+    fn write_metadata<'b, 'gcx>(\n         &self,\n-        tcx: TyCtxt<'a, 'gcx, 'gcx>,\n-        metadata: &Self::Metadata,\n+        tcx: TyCtxt<'b, 'gcx, 'gcx>,\n+        metadata: &Self::Module,\n     ) -> EncodedMetadata;\n-    fn codegen_allocator(&self, tcx: TyCtxt, mods: &Self::Metadata, kind: AllocatorKind);\n+    fn codegen_allocator(&self, tcx: TyCtxt, mods: &Self::Module, kind: AllocatorKind);\n \n     fn start_async_codegen(\n         &self,\n@@ -63,10 +65,21 @@ pub trait BackendMethods {\n         &self,\n         codegen: &Self::OngoingCodegen,\n         tcx: TyCtxt,\n-        module: ModuleCodegen<Self::Metadata>,\n+        module: ModuleCodegen<Self::Module>,\n     );\n     fn codegen_aborted(codegen: Self::OngoingCodegen);\n     fn codegen_finished(&self, codegen: &Self::OngoingCodegen, tcx: TyCtxt);\n     fn check_for_errors(&self, codegen: &Self::OngoingCodegen, sess: &Session);\n     fn wait_for_signal_to_codegen_item(&self, codegen: &Self::OngoingCodegen);\n }\n+\n+pub trait BackendCodegenCxMethods<'a, 'tcx: 'a>: BackendMethods {\n+    type CodegenCx: CodegenMethods<'tcx>;\n+\n+    fn new_codegen_context(\n+        &self,\n+        tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+        codegen_unit: Arc<CodegenUnit<'tcx>>,\n+        llvm_module: &'a Self::Module,\n+    ) -> Self::CodegenCx;\n+}"}, {"sha": "4e24e12bc6861e27eca89e0d8b574b6b25461716", "filename": "src/librustc_codegen_llvm/interfaces/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6819e6e6e1c049b5e70ebd4fde791623e7ed2aaa/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6819e6e6e1c049b5e70ebd4fde791623e7ed2aaa/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fdebuginfo.rs?ref=6819e6e6e1c049b5e70ebd4fde791623e7ed2aaa", "patch": "@@ -47,6 +47,7 @@ pub trait DebugInfoMethods<'tcx>: Backend<'tcx> {\n         file: &SourceFile,\n         defining_crate: CrateNum,\n     ) -> Self::DIScope;\n+    fn debuginfo_finalize(&self);\n }\n \n pub trait DebugInfoBuilderMethods<'tcx>: HasCodegen<'tcx> {"}, {"sha": "2557b51b76de294ee0bb6330cf43d478648329b9", "filename": "src/librustc_codegen_llvm/interfaces/misc.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6819e6e6e1c049b5e70ebd4fde791623e7ed2aaa/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6819e6e6e1c049b5e70ebd4fde791623e7ed2aaa/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fmisc.rs?ref=6819e6e6e1c049b5e70ebd4fde791623e7ed2aaa", "patch": "@@ -30,7 +30,11 @@ pub trait MiscMethods<'tcx>: Backend<'tcx> {\n     fn eh_unwind_resume(&self) -> Self::Value;\n     fn sess(&self) -> &Session;\n     fn stats(&self) -> &RefCell<Stats>;\n+    fn consume_stats(self) -> RefCell<Stats>;\n     fn codegen_unit(&self) -> &Arc<CodegenUnit<'tcx>>;\n+    fn statics_to_rauw(&self) -> &RefCell<Vec<(Self::Value, Self::Value)>>;\n+    fn used_statics(&self) -> &RefCell<Vec<Self::Value>>;\n     fn set_frame_pointer_elimination(&self, llfn: Self::Value);\n     fn apply_target_cpu_attr(&self, llfn: Self::Value);\n+    fn create_used_variable(&self);\n }"}, {"sha": "019c4410e67b36a42aef9fa964eb314d129434f3", "filename": "src/librustc_codegen_llvm/interfaces/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6819e6e6e1c049b5e70ebd4fde791623e7ed2aaa/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6819e6e6e1c049b5e70ebd4fde791623e7ed2aaa/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fmod.rs?ref=6819e6e6e1c049b5e70ebd4fde791623e7ed2aaa", "patch": "@@ -22,7 +22,7 @@ mod type_;\n \n pub use self::abi::{AbiBuilderMethods, AbiMethods};\n pub use self::asm::{AsmBuilderMethods, AsmMethods};\n-pub use self::backend::{Backend, BackendMethods, BackendTypes};\n+pub use self::backend::{Backend, BackendCodegenCxMethods, BackendMethods, BackendTypes};\n pub use self::builder::BuilderMethods;\n pub use self::consts::ConstMethods;\n pub use self::debuginfo::{DebugInfoBuilderMethods, DebugInfoMethods};"}, {"sha": "0feb9d5255f5ce748cf78eb7c5839b977969977d", "filename": "src/librustc_codegen_llvm/interfaces/statics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6819e6e6e1c049b5e70ebd4fde791623e7ed2aaa/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fstatics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6819e6e6e1c049b5e70ebd4fde791623e7ed2aaa/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fstatics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fstatics.rs?ref=6819e6e6e1c049b5e70ebd4fde791623e7ed2aaa", "patch": "@@ -19,4 +19,5 @@ pub trait StaticMethods<'tcx>: Backend<'tcx> {\n     fn static_addr_of(&self, cv: Self::Value, align: Align, kind: Option<&str>) -> Self::Value;\n     fn get_static(&self, def_id: DefId) -> Self::Value;\n     fn codegen_static(&self, def_id: DefId, is_mutable: bool);\n+    fn static_replace_all_uses(&self, old_g: Self::Value, new_g: Self::Value);\n }"}, {"sha": "8633722204ddbd752630d7cf05b6a2a763c70c52", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6819e6e6e1c049b5e70ebd4fde791623e7ed2aaa/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6819e6e6e1c049b5e70ebd4fde791623e7ed2aaa/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=6819e6e6e1c049b5e70ebd4fde791623e7ed2aaa", "patch": "@@ -72,9 +72,12 @@ use interfaces::*;\n use time_graph::TimeGraph;\n use std::sync::mpsc::Receiver;\n use back::write::{self, OngoingCodegen};\n+use context::CodegenCx;\n+use monomorphize::partitioning::CodegenUnit;\n \n pub use llvm_util::target_features;\n use std::any::Any;\n+use std::sync::Arc;\n use std::sync::mpsc;\n use rustc_data_structures::sync::Lrc;\n \n@@ -139,15 +142,15 @@ mod value;\n pub struct LlvmCodegenBackend(());\n \n impl BackendMethods for LlvmCodegenBackend {\n-    type Metadata = ModuleLlvm;\n+    type Module = ModuleLlvm;\n     type OngoingCodegen = OngoingCodegen;\n \n     fn new_metadata(&self, sess: &Session, mod_name: &str) -> ModuleLlvm {\n         ModuleLlvm::new(sess, mod_name)\n     }\n-    fn write_metadata<'a, 'gcx>(\n+    fn write_metadata<'b, 'gcx>(\n         &self,\n-        tcx: TyCtxt<'a, 'gcx, 'gcx>,\n+        tcx: TyCtxt<'b, 'gcx, 'gcx>,\n         metadata: &ModuleLlvm\n     ) -> EncodedMetadata {\n         base::write_metadata(tcx, metadata)\n@@ -187,6 +190,19 @@ impl BackendMethods for LlvmCodegenBackend {\n     }\n }\n \n+impl<'a, 'tcx: 'a> BackendCodegenCxMethods<'a, 'tcx> for LlvmCodegenBackend {\n+    type CodegenCx = CodegenCx<'a, 'tcx>;\n+\n+    fn new_codegen_context(\n+        &self,\n+        tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+        codegen_unit: Arc<CodegenUnit<'tcx>>,\n+        llvm_module: &'a ModuleLlvm\n+    ) -> CodegenCx<'a, 'tcx> {\n+        CodegenCx::new(tcx, codegen_unit, llvm_module)\n+    }\n+}\n+\n \n impl !Send for LlvmCodegenBackend {} // Llvm is on a per-thread basis\n impl !Sync for LlvmCodegenBackend {}"}, {"sha": "1defb2c16f8a7f23b85fe8103871796d52d66d9a", "filename": "src/librustc_codegen_llvm/mono_item.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6819e6e6e1c049b5e70ebd4fde791623e7ed2aaa/src%2Flibrustc_codegen_llvm%2Fmono_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6819e6e6e1c049b5e70ebd4fde791623e7ed2aaa/src%2Flibrustc_codegen_llvm%2Fmono_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmono_item.rs?ref=6819e6e6e1c049b5e70ebd4fde791623e7ed2aaa", "patch": "@@ -27,17 +27,14 @@ use rustc::mir::mono::{Linkage, Visibility};\n use rustc::ty::TypeFoldable;\n use rustc::ty::layout::{LayoutOf, HasTyCtxt};\n use std::fmt;\n-use builder::Builder;\n use interfaces::*;\n \n pub use rustc::mir::mono::MonoItem;\n \n pub use rustc_mir::monomorphize::item::MonoItemExt as BaseMonoItemExt;\n \n-pub trait MonoItemExt<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> :\n-    fmt::Debug + BaseMonoItemExt<'a, 'tcx>\n-{\n-    fn define(&self, cx: &'a Bx::CodegenCx) {\n+pub trait MonoItemExt<'a, 'tcx: 'a>: fmt::Debug + BaseMonoItemExt<'a, 'tcx> {\n+    fn define<Bx: BuilderMethods<'a, 'tcx>>(&self, cx: &'a Bx::CodegenCx) {\n         debug!(\"BEGIN IMPLEMENTING '{} ({})' in cgu {}\",\n                self.to_string(cx.tcx()),\n                self.to_raw_string(),\n@@ -76,10 +73,12 @@ pub trait MonoItemExt<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> :\n                cx.codegen_unit().name());\n     }\n \n-    fn predefine(&self,\n-                 cx: &'a Bx::CodegenCx,\n-                 linkage: Linkage,\n-                 visibility: Visibility) {\n+    fn predefine<Bx: BuilderMethods<'a, 'tcx>>(\n+        &self,\n+        cx: &'a Bx::CodegenCx,\n+        linkage: Linkage,\n+        visibility: Visibility\n+    ) {\n         debug!(\"BEGIN PREDEFINING '{} ({})' in cgu {}\",\n                self.to_string(cx.tcx()),\n                self.to_raw_string(),\n@@ -122,7 +121,7 @@ pub trait MonoItemExt<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> :\n     }\n }\n \n-impl MonoItemExt<'a, 'tcx, Builder<'a, 'll, 'tcx>> for MonoItem<'tcx> {}\n+impl<'a, 'tcx: 'a> MonoItemExt<'a, 'tcx> for MonoItem<'tcx> {}\n \n impl PreDefineMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n     fn predefine_static(&self,"}]}