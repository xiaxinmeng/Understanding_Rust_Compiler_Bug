{"sha": "9fb2284600f79314dbe6aa16cccd3e9076cb136c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmYjIyODQ2MDBmNzkzMTRkYmU2YWExNmNjY2QzZTkwNzZjYjEzNmM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-12-20T22:33:11Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-12-20T22:35:04Z"}, "message": "rustc: Add a type param ID -> type descriptor mapping to function contexts", "tree": {"sha": "11cae2ff4d9ff8b49d445367d6c67ac2b346ac3a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11cae2ff4d9ff8b49d445367d6c67ac2b346ac3a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9fb2284600f79314dbe6aa16cccd3e9076cb136c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9fb2284600f79314dbe6aa16cccd3e9076cb136c", "html_url": "https://github.com/rust-lang/rust/commit/9fb2284600f79314dbe6aa16cccd3e9076cb136c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9fb2284600f79314dbe6aa16cccd3e9076cb136c/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bd30f83e15658b3904f87bff0a38b517a85e593", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bd30f83e15658b3904f87bff0a38b517a85e593", "html_url": "https://github.com/rust-lang/rust/commit/7bd30f83e15658b3904f87bff0a38b517a85e593"}], "stats": {"total": 46, "additions": 30, "deletions": 16}, "files": [{"sha": "ac8d96aef7173cbbcd496481ae2488a1c8abb446", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 30, "deletions": 16, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/9fb2284600f79314dbe6aa16cccd3e9076cb136c/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb2284600f79314dbe6aa16cccd3e9076cb136c/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=9fb2284600f79314dbe6aa16cccd3e9076cb136c", "patch": "@@ -77,6 +77,7 @@ state type fn_ctxt = rec(ValueRef llfn,\n                          ValueRef lltaskptr,\n                          hashmap[ast.def_id, ValueRef] llargs,\n                          hashmap[ast.def_id, ValueRef] lllocals,\n+                         hashmap[ast.def_id, ValueRef] lltydescs,\n                          @crate_ctxt ccx);\n \n tag cleanup {\n@@ -2261,17 +2262,27 @@ fn new_fn_ctxt(@crate_ctxt cx,\n \n     let hashmap[ast.def_id, ValueRef] lllocals = new_def_hash[ValueRef]();\n     let hashmap[ast.def_id, ValueRef] llargs = new_def_hash[ValueRef]();\n+    let hashmap[ast.def_id, ValueRef] lltydescs = new_def_hash[ValueRef]();\n \n     ret @rec(llfn=llfndecl,\n              lltaskptr=lltaskptr,\n              llargs=llargs,\n              lllocals=lllocals,\n+             lltydescs=lltydescs,\n              ccx=cx);\n }\n \n \n-fn create_llargs_for_fn_args(@fn_ctxt cx, vec[ast.arg] args) {\n+fn create_llargs_for_fn_args(&@fn_ctxt cx, &vec[ast.arg] args,\n+                             &vec[ast.ty_param] ty_params) {\n     let uint arg_n = 1u;\n+    for (ast.ty_param tp in ty_params) {\n+        auto llarg = llvm.LLVMGetParam(cx.llfn, arg_n);\n+        check (llarg as int != 0);\n+        cx.lltydescs.insert(tp.id, llarg);\n+        arg_n += 1u;\n+    }\n+\n     for (ast.arg arg in args) {\n         auto llarg = llvm.LLVMGetParam(cx.llfn, arg_n);\n         check (llarg as int != 0);\n@@ -2328,13 +2339,13 @@ fn ret_ty_of_fn(ast.ann ann) -> @typeck.ty {\n }\n \n impure fn trans_fn(@crate_ctxt cx, &ast._fn f, ast.def_id fid,\n-                   &ast.ann ann) {\n+                   &vec[ast.ty_param] ty_params, &ast.ann ann) {\n \n     auto llfndecl = cx.item_ids.get(fid);\n     cx.item_names.insert(cx.path, llfndecl);\n \n     auto fcx = new_fn_ctxt(cx, cx.path, llfndecl);\n-    create_llargs_for_fn_args(fcx, f.inputs);\n+    create_llargs_for_fn_args(fcx, f.inputs, ty_params);\n \n     auto bcx = new_top_block_ctxt(fcx);\n \n@@ -2348,7 +2359,8 @@ impure fn trans_fn(@crate_ctxt cx, &ast._fn f, ast.def_id fid,\n     }\n }\n \n-impure fn trans_vtbl(@crate_ctxt cx, &ast._obj ob) -> ValueRef {\n+impure fn trans_vtbl(@crate_ctxt cx, &ast._obj ob,\n+                     &vec[ast.ty_param] ty_params) -> ValueRef {\n     let vec[ValueRef] methods = vec();\n     for (@ast.method m in ob.methods) {\n \n@@ -2357,7 +2369,7 @@ impure fn trans_vtbl(@crate_ctxt cx, &ast._obj ob) -> ValueRef {\n         let ValueRef llfn = decl_fastcall_fn(cx.llmod, s, llfnty);\n         cx.item_ids.insert(m.node.id, llfn);\n \n-        trans_fn(cx, m.node.meth, m.node.id, m.node.ann);\n+        trans_fn(cx, m.node.meth, m.node.id, ty_params, m.node.ann);\n         methods += llfn;\n     }\n     auto vtbl = C_struct(methods);\n@@ -2370,7 +2382,7 @@ impure fn trans_vtbl(@crate_ctxt cx, &ast._obj ob) -> ValueRef {\n }\n \n impure fn trans_obj(@crate_ctxt cx, &ast._obj ob, ast.def_id oid,\n-                    &ast.ann ann) {\n+                    &vec[ast.ty_param] ty_params, &ast.ann ann) {\n \n     auto llctor_decl = cx.item_ids.get(oid);\n     cx.item_names.insert(cx.path, llctor_decl);\n@@ -2385,14 +2397,14 @@ impure fn trans_obj(@crate_ctxt cx, &ast._obj ob, ast.def_id oid,\n     }\n \n     auto fcx = new_fn_ctxt(cx, cx.path, llctor_decl);\n-    create_llargs_for_fn_args(fcx, fn_args);\n+    create_llargs_for_fn_args(fcx, fn_args, ty_params);\n \n     auto bcx = new_top_block_ctxt(fcx);\n \n     copy_args_to_allocas(bcx, fn_args, arg_tys_of_fn(ann));\n \n     auto pair = bcx.build.Alloca(type_of(cx, ret_ty_of_fn(ann)));\n-    auto vtbl = trans_vtbl(cx, ob);\n+    auto vtbl = trans_vtbl(cx, ob, ty_params);\n     auto pair_vtbl = bcx.build.GEP(pair,\n                                    vec(C_int(0),\n                                        C_int(abi.obj_field_vtbl)));\n@@ -2401,7 +2413,8 @@ impure fn trans_obj(@crate_ctxt cx, &ast._obj ob, ast.def_id oid,\n }\n \n fn trans_tag_variant(@crate_ctxt cx, ast.def_id tag_id,\n-                     &ast.variant variant, int index) {\n+                     &ast.variant variant, int index,\n+                     &vec[ast.ty_param] ty_params) {\n     if (_vec.len[ast.variant_arg](variant.args) == 0u) {\n         ret;    // nullary constructors are just constants\n     }\n@@ -2427,7 +2440,7 @@ fn trans_tag_variant(@crate_ctxt cx, ast.def_id tag_id,\n     cx.item_names.insert(cx.path, llfndecl);\n \n     auto fcx = new_fn_ctxt(cx, cx.path, llfndecl);\n-    create_llargs_for_fn_args(fcx, fn_args);\n+    create_llargs_for_fn_args(fcx, fn_args, ty_params);\n \n     auto bcx = new_top_block_ctxt(fcx);\n \n@@ -2473,23 +2486,23 @@ fn trans_tag_variant(@crate_ctxt cx, ast.def_id tag_id,\n \n impure fn trans_item(@crate_ctxt cx, &ast.item item) {\n     alt (item.node) {\n-        case (ast.item_fn(?name, ?f, _, ?fid, ?ann)) {\n+        case (ast.item_fn(?name, ?f, ?tps, ?fid, ?ann)) {\n             auto sub_cx = @rec(path=cx.path + \".\" + name with *cx);\n-            trans_fn(sub_cx, f, fid, ann);\n+            trans_fn(sub_cx, f, fid, tps, ann);\n         }\n-        case (ast.item_obj(?name, ?ob, _, ?oid, ?ann)) {\n+        case (ast.item_obj(?name, ?ob, ?tps, ?oid, ?ann)) {\n             auto sub_cx = @rec(path=cx.path + \".\" + name with *cx);\n-            trans_obj(sub_cx, ob, oid, ann);\n+            trans_obj(sub_cx, ob, oid, tps, ann);\n         }\n         case (ast.item_mod(?name, ?m, _)) {\n             auto sub_cx = @rec(path=cx.path + \".\" + name with *cx);\n             trans_mod(sub_cx, m);\n         }\n-        case (ast.item_tag(?name, ?variants, _, ?tag_id)) {\n+        case (ast.item_tag(?name, ?variants, ?tps, ?tag_id)) {\n             auto sub_cx = @rec(path=cx.path + \".\" + name with *cx);\n             auto i = 0;\n             for (ast.variant variant in variants) {\n-                trans_tag_variant(sub_cx, tag_id, variant, i);\n+                trans_tag_variant(sub_cx, tag_id, variant, i, tps);\n                 i += 1;\n             }\n         }\n@@ -2694,6 +2707,7 @@ fn trans_exit_task_glue(@crate_ctxt cx) {\n                     lltaskptr=lltaskptr,\n                     llargs=new_def_hash[ValueRef](),\n                     lllocals=new_def_hash[ValueRef](),\n+                    lltydescs=new_def_hash[ValueRef](),\n                     ccx=cx);\n \n     auto bcx = new_top_block_ctxt(fcx);"}]}