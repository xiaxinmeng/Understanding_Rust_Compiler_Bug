{"sha": "71d41d9e9f020c9eb527a47e16e4041dfcdaef84", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxZDQxZDllOWYwMjBjOWViNTI3YTQ3ZTE2ZTQwNDFkZmNkYWVmODQ=", "commit": {"author": {"name": "Stefan Lankes", "email": "slankes@eonerc.rwth-aachen.de", "date": "2020-06-13T18:51:00Z"}, "committer": {"name": "Stefan Lankes", "email": "slankes@eonerc.rwth-aachen.de", "date": "2020-06-13T18:51:00Z"}, "message": "add TcpListener support for HermitCore\n\nAdd basic support of TcpListerner for HermitCore.\nIn addition, revise TcpStream to support peer_addr.", "tree": {"sha": "e8998ad3468ec7bac208245571e2542a420a9515", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8998ad3468ec7bac208245571e2542a420a9515"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71d41d9e9f020c9eb527a47e16e4041dfcdaef84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71d41d9e9f020c9eb527a47e16e4041dfcdaef84", "html_url": "https://github.com/rust-lang/rust/commit/71d41d9e9f020c9eb527a47e16e4041dfcdaef84", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71d41d9e9f020c9eb527a47e16e4041dfcdaef84/comments", "author": {"login": "stlankes", "id": 5888473, "node_id": "MDQ6VXNlcjU4ODg0NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/5888473?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stlankes", "html_url": "https://github.com/stlankes", "followers_url": "https://api.github.com/users/stlankes/followers", "following_url": "https://api.github.com/users/stlankes/following{/other_user}", "gists_url": "https://api.github.com/users/stlankes/gists{/gist_id}", "starred_url": "https://api.github.com/users/stlankes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stlankes/subscriptions", "organizations_url": "https://api.github.com/users/stlankes/orgs", "repos_url": "https://api.github.com/users/stlankes/repos", "events_url": "https://api.github.com/users/stlankes/events{/privacy}", "received_events_url": "https://api.github.com/users/stlankes/received_events", "type": "User", "site_admin": false}, "committer": {"login": "stlankes", "id": 5888473, "node_id": "MDQ6VXNlcjU4ODg0NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/5888473?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stlankes", "html_url": "https://github.com/stlankes", "followers_url": "https://api.github.com/users/stlankes/followers", "following_url": "https://api.github.com/users/stlankes/following{/other_user}", "gists_url": "https://api.github.com/users/stlankes/gists{/gist_id}", "starred_url": "https://api.github.com/users/stlankes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stlankes/subscriptions", "organizations_url": "https://api.github.com/users/stlankes/orgs", "repos_url": "https://api.github.com/users/stlankes/repos", "events_url": "https://api.github.com/users/stlankes/events{/privacy}", "received_events_url": "https://api.github.com/users/stlankes/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1fb612bd15bb3ef098fd24c20d0727de573b4410", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fb612bd15bb3ef098fd24c20d0727de573b4410", "html_url": "https://github.com/rust-lang/rust/commit/1fb612bd15bb3ef098fd24c20d0727de573b4410"}], "stats": {"total": 157, "additions": 111, "deletions": 46}, "files": [{"sha": "2fef8d381ca1ae270a571a4c8858a6bc0d4cedfd", "filename": "src/libstd/sys/hermit/net.rs", "status": "modified", "additions": 111, "deletions": 46, "changes": 157, "blob_url": "https://github.com/rust-lang/rust/blob/71d41d9e9f020c9eb527a47e16e4041dfcdaef84/src%2Flibstd%2Fsys%2Fhermit%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71d41d9e9f020c9eb527a47e16e4041dfcdaef84/src%2Flibstd%2Fsys%2Fhermit%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fhermit%2Fnet.rs?ref=71d41d9e9f020c9eb527a47e16e4041dfcdaef84", "patch": "@@ -1,10 +1,13 @@\n use crate::convert::TryFrom;\n use crate::fmt;\n use crate::io::{self, ErrorKind, IoSlice, IoSliceMut};\n-use crate::net::{Ipv4Addr, Ipv6Addr, Shutdown, SocketAddr};\n+use crate::net::{IpAddr, Ipv4Addr, Ipv6Addr, Shutdown, SocketAddr};\n use crate::str;\n+use crate::sync::Arc;\n use crate::sys::hermit::abi;\n+use crate::sys::hermit::abi::IpAddress::{Ipv4, Ipv6};\n use crate::sys::{unsupported, Void};\n+use crate::sys_common::AsInner;\n use crate::time::Duration;\n \n /// Checks whether the HermitCore's socket interface has been started already, and\n@@ -17,14 +20,37 @@ pub fn init() -> io::Result<()> {\n     Ok(())\n }\n \n-pub struct TcpStream(abi::Handle);\n+#[derive(Debug, Clone)]\n+pub struct Socket(abi::Handle);\n+\n+impl Socket {\n+    fn new(handle: abi::Handle) -> Socket {\n+        Socket(handle)\n+    }\n+}\n+\n+impl AsInner<abi::Handle> for Socket {\n+    fn as_inner(&self) -> &abi::Handle {\n+        &self.0\n+    }\n+}\n+\n+impl Drop for Socket {\n+    fn drop(&mut self) {\n+        let _ = abi::tcpstream::close(self.0);\n+    }\n+}\n+\n+\n+#[derive(Clone)]\n+pub struct TcpStream(Arc<Socket>);\n \n impl TcpStream {\n     pub fn connect(addr: io::Result<&SocketAddr>) -> io::Result<TcpStream> {\n         let addr = addr?;\n \n         match abi::tcpstream::connect(addr.ip().to_string().as_bytes(), addr.port(), None) {\n-            Ok(handle) => Ok(TcpStream(handle)),\n+            Ok(handle) => Ok(TcpStream(Arc::new(Socket(handle)))),\n             _ => {\n                 Err(io::Error::new(ErrorKind::Other, \"Unable to initiate a connection on a socket\"))\n             }\n@@ -37,39 +63,42 @@ impl TcpStream {\n             saddr.port(),\n             Some(duration.as_millis() as u64),\n         ) {\n-            Ok(handle) => Ok(TcpStream(handle)),\n+            Ok(handle) => Ok(TcpStream(Arc::new(Socket(handle)))),\n             _ => {\n                 Err(io::Error::new(ErrorKind::Other, \"Unable to initiate a connection on a socket\"))\n             }\n         }\n     }\n \n     pub fn set_read_timeout(&self, duration: Option<Duration>) -> io::Result<()> {\n-        abi::tcpstream::set_read_timeout(self.0, duration.map(|d| d.as_millis() as u64))\n+        abi::tcpstream::set_read_timeout(*self.0.as_inner(), duration.map(|d| d.as_millis() as u64))\n             .map_err(|_| io::Error::new(ErrorKind::Other, \"Unable to set timeout value\"))\n     }\n \n     pub fn set_write_timeout(&self, duration: Option<Duration>) -> io::Result<()> {\n-        abi::tcpstream::set_write_timeout(self.0, duration.map(|d| d.as_millis() as u64))\n-            .map_err(|_| io::Error::new(ErrorKind::Other, \"Unable to set timeout value\"))\n+        abi::tcpstream::set_write_timeout(\n+            *self.0.as_inner(),\n+            duration.map(|d| d.as_millis() as u64),\n+        )\n+        .map_err(|_| io::Error::new(ErrorKind::Other, \"Unable to set timeout value\"))\n     }\n \n     pub fn read_timeout(&self) -> io::Result<Option<Duration>> {\n-        let duration = abi::tcpstream::get_read_timeout(self.0)\n+        let duration = abi::tcpstream::get_read_timeout(*self.0.as_inner())\n             .map_err(|_| io::Error::new(ErrorKind::Other, \"Unable to determine timeout value\"))?;\n \n         Ok(duration.map(|d| Duration::from_millis(d)))\n     }\n \n     pub fn write_timeout(&self) -> io::Result<Option<Duration>> {\n-        let duration = abi::tcpstream::get_write_timeout(self.0)\n+        let duration = abi::tcpstream::get_write_timeout(*self.0.as_inner())\n             .map_err(|_| io::Error::new(ErrorKind::Other, \"Unable to determine timeout value\"))?;\n \n         Ok(duration.map(|d| Duration::from_millis(d)))\n     }\n \n     pub fn peek(&self, buf: &mut [u8]) -> io::Result<usize> {\n-        abi::tcpstream::peek(self.0, buf)\n+        abi::tcpstream::peek(*self.0.as_inner(), buf)\n             .map_err(|_| io::Error::new(ErrorKind::Other, \"set_nodelay failed\"))\n     }\n \n@@ -81,18 +110,11 @@ impl TcpStream {\n         let mut size: usize = 0;\n \n         for i in ioslice.iter_mut() {\n-            let mut pos: usize = 0;\n-\n-            while pos < i.len() {\n-                let ret = abi::tcpstream::read(self.0, &mut i[pos..])\n-                    .map_err(|_| io::Error::new(ErrorKind::Other, \"Unable to read on socket\"))?;\n-\n-                if ret == 0 {\n-                    return Ok(size);\n-                } else {\n-                    size += ret;\n-                    pos += ret;\n-                }\n+            let ret = abi::tcpstream::read(*self.0.as_inner(), &mut i[0..])\n+                .map_err(|_| io::Error::new(ErrorKind::Other, \"Unable to read on socket\"))?;\n+\n+            if ret != 0 {\n+                size += ret;\n             }\n         }\n \n@@ -112,7 +134,7 @@ impl TcpStream {\n         let mut size: usize = 0;\n \n         for i in ioslice.iter() {\n-            size += abi::tcpstream::write(self.0, i)\n+            size += abi::tcpstream::write(*self.0.as_inner(), i)\n                 .map_err(|_| io::Error::new(ErrorKind::Other, \"Unable to write on socket\"))?;\n         }\n \n@@ -125,42 +147,64 @@ impl TcpStream {\n     }\n \n     pub fn peer_addr(&self) -> io::Result<SocketAddr> {\n-        Err(io::Error::new(ErrorKind::Other, \"peer_addr isn't supported\"))\n+        let (ipaddr, port) = abi::tcpstream::peer_addr(*self.0.as_inner())\n+            .map_err(|_| io::Error::new(ErrorKind::Other, \"peer_addr failed\"))?;\n+\n+        let saddr = match ipaddr {\n+            Ipv4(ref addr) => SocketAddr::new(\n+                IpAddr::V4(Ipv4Addr::new(addr.0[0], addr.0[1], addr.0[2], addr.0[3])),\n+                port,\n+            ),\n+            Ipv6(ref addr) => SocketAddr::new(\n+                IpAddr::V6(Ipv6Addr::new(\n+                    ((addr.0[0] as u16) << 8) | addr.0[1] as u16,\n+                    ((addr.0[2] as u16) << 8) | addr.0[3] as u16,\n+                    ((addr.0[4] as u16) << 8) | addr.0[5] as u16,\n+                    ((addr.0[6] as u16) << 8) | addr.0[7] as u16,\n+                    ((addr.0[8] as u16) << 8) | addr.0[9] as u16,\n+                    ((addr.0[10] as u16) << 8) | addr.0[11] as u16,\n+                    ((addr.0[12] as u16) << 8) | addr.0[13] as u16,\n+                    ((addr.0[14] as u16) << 8) | addr.0[15] as u16)),\n+                port,\n+            ),\n+            _ => {\n+                return Err(io::Error::new(ErrorKind::Other, \"peer_addr failed\"));\n+            },\n+        };\n+\n+        Ok(saddr)\n     }\n \n     pub fn socket_addr(&self) -> io::Result<SocketAddr> {\n         Err(io::Error::new(ErrorKind::Other, \"socket_addr isn't supported\"))\n     }\n \n     pub fn shutdown(&self, how: Shutdown) -> io::Result<()> {\n-        abi::tcpstream::shutdown(self.0, how as i32)\n+        abi::tcpstream::shutdown(*self.0.as_inner(), how as i32)\n             .map_err(|_| io::Error::new(ErrorKind::Other, \"unable to shutdown socket\"))\n     }\n \n     pub fn duplicate(&self) -> io::Result<TcpStream> {\n-        let handle = abi::tcpstream::duplicate(self.0)\n-            .map_err(|_| io::Error::new(ErrorKind::Other, \"unable to duplicate stream\"))?;\n-\n-        Ok(TcpStream(handle))\n+        Ok(self.clone())\n     }\n \n     pub fn set_nodelay(&self, mode: bool) -> io::Result<()> {\n-        abi::tcpstream::set_nodelay(self.0, mode)\n+        abi::tcpstream::set_nodelay(*self.0.as_inner(), mode)\n             .map_err(|_| io::Error::new(ErrorKind::Other, \"set_nodelay failed\"))\n     }\n \n     pub fn nodelay(&self) -> io::Result<bool> {\n-        abi::tcpstream::nodelay(self.0)\n+        abi::tcpstream::nodelay(*self.0.as_inner())\n             .map_err(|_| io::Error::new(ErrorKind::Other, \"nodelay failed\"))\n     }\n \n     pub fn set_ttl(&self, tll: u32) -> io::Result<()> {\n-        abi::tcpstream::set_tll(self.0, tll)\n+        abi::tcpstream::set_tll(*self.0.as_inner(), tll)\n             .map_err(|_| io::Error::new(ErrorKind::Other, \"unable to set TTL\"))\n     }\n \n     pub fn ttl(&self) -> io::Result<u32> {\n-        abi::tcpstream::get_tll(self.0)\n+        abi::tcpstream::get_tll(*self.0.as_inner())\n             .map_err(|_| io::Error::new(ErrorKind::Other, \"unable to get TTL\"))\n     }\n \n@@ -169,40 +213,61 @@ impl TcpStream {\n     }\n \n     pub fn set_nonblocking(&self, mode: bool) -> io::Result<()> {\n-        abi::tcpstream::set_nonblocking(self.0, mode)\n+        abi::tcpstream::set_nonblocking(*self.0.as_inner(), mode)\n             .map_err(|_| io::Error::new(ErrorKind::Other, \"unable to set blocking mode\"))\n     }\n }\n \n-impl Drop for TcpStream {\n-    fn drop(&mut self) {\n-        let _ = abi::tcpstream::close(self.0);\n-    }\n-}\n-\n impl fmt::Debug for TcpStream {\n     fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         Ok(())\n     }\n }\n \n-pub struct TcpListener(abi::Handle);\n+#[derive(Clone)]\n+pub struct TcpListener(SocketAddr);\n \n impl TcpListener {\n-    pub fn bind(_: io::Result<&SocketAddr>) -> io::Result<TcpListener> {\n-        Err(io::Error::new(ErrorKind::Other, \"not supported\"))\n+    pub fn bind(addr: io::Result<&SocketAddr>) -> io::Result<TcpListener> {\n+        let addr = addr?;\n+\n+        Ok(TcpListener(*addr))\n     }\n \n     pub fn socket_addr(&self) -> io::Result<SocketAddr> {\n-        Err(io::Error::new(ErrorKind::Other, \"not supported\"))\n+        Ok(self.0)\n     }\n \n     pub fn accept(&self) -> io::Result<(TcpStream, SocketAddr)> {\n-        Err(io::Error::new(ErrorKind::Other, \"not supported\"))\n+        let (handle, ipaddr, port) = abi::tcplistener::accept(self.0.port())\n+            .map_err(|_| io::Error::new(ErrorKind::Other, \"accept failed\"))?;\n+        let saddr = match ipaddr {\n+            Ipv4(ref addr) => SocketAddr::new(\n+                IpAddr::V4(Ipv4Addr::new(addr.0[0], addr.0[1], addr.0[2], addr.0[3])),\n+                port,\n+            ),\n+            Ipv6(ref addr) => SocketAddr::new(\n+                IpAddr::V6(Ipv6Addr::new(\n+                    ((addr.0[0] as u16) << 8) | addr.0[1] as u16,\n+                    ((addr.0[2] as u16) << 8) | addr.0[3] as u16,\n+                    ((addr.0[4] as u16) << 8) | addr.0[5] as u16,\n+                    ((addr.0[6] as u16) << 8) | addr.0[7] as u16,\n+                    ((addr.0[8] as u16) << 8) | addr.0[9] as u16,\n+                    ((addr.0[10] as u16) << 8) | addr.0[11] as u16,\n+                    ((addr.0[12] as u16) << 8) | addr.0[13] as u16,\n+                    ((addr.0[14] as u16) << 8) | addr.0[15] as u16)),\n+                port,\n+            ),\n+            _ => {\n+                return Err(io::Error::new(ErrorKind::Other, \"accept failed\"));\n+            },\n+        };\n+\n+        Ok((TcpStream(Arc::new(Socket(handle))), saddr))\n     }\n \n     pub fn duplicate(&self) -> io::Result<TcpListener> {\n-        Err(io::Error::new(ErrorKind::Other, \"not supported\"))\n+        Ok(self.clone())\n     }\n \n     pub fn set_ttl(&self, _: u32) -> io::Result<()> {"}]}