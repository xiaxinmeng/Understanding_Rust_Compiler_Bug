{"sha": "c6f6e3e0e98dad9578df472a33a71d6bdf104666", "node_id": "C_kwDOAAsO6NoAKGM2ZjZlM2UwZTk4ZGFkOTU3OGRmNDcyYTMzYTcxZDZiZGYxMDQ2NjY", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-01-27T06:43:07Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-01-27T06:45:12Z"}, "message": "do not register infer var for GAT projection in opaque", "tree": {"sha": "822a92f63c258459758ccdd7c3027e77cf1c61d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/822a92f63c258459758ccdd7c3027e77cf1c61d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6f6e3e0e98dad9578df472a33a71d6bdf104666", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6f6e3e0e98dad9578df472a33a71d6bdf104666", "html_url": "https://github.com/rust-lang/rust/commit/c6f6e3e0e98dad9578df472a33a71d6bdf104666", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6f6e3e0e98dad9578df472a33a71d6bdf104666/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "563250a65c884c6767dc2ee2e2580360d33d561c", "url": "https://api.github.com/repos/rust-lang/rust/commits/563250a65c884c6767dc2ee2e2580360d33d561c", "html_url": "https://github.com/rust-lang/rust/commit/563250a65c884c6767dc2ee2e2580360d33d561c"}], "stats": {"total": 36, "additions": 29, "deletions": 7}, "files": [{"sha": "e7dca94806cb740243e7ab0af2c141a84635e2ce", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c6f6e3e0e98dad9578df472a33a71d6bdf104666/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6f6e3e0e98dad9578df472a33a71d6bdf104666/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=c6f6e3e0e98dad9578df472a33a71d6bdf104666", "patch": "@@ -569,13 +569,15 @@ impl<'a, 'tcx> Instantiator<'a, 'tcx> {\n             let predicate = predicate.fold_with(&mut BottomUpFolder {\n                 tcx,\n                 ty_op: |ty| match ty.kind() {\n-                    ty::Projection(projection_ty) => infcx.infer_projection(\n-                        self.param_env,\n-                        *projection_ty,\n-                        traits::ObligationCause::misc(self.value_span, self.body_id),\n-                        0,\n-                        &mut self.obligations,\n-                    ),\n+                    ty::Projection(projection_ty) if !projection_ty.has_escaping_bound_vars() => {\n+                        infcx.infer_projection(\n+                            self.param_env,\n+                            *projection_ty,\n+                            traits::ObligationCause::misc(self.value_span, self.body_id),\n+                            0,\n+                            &mut self.obligations,\n+                        )\n+                    }\n                     _ => ty,\n                 },\n                 lt_op: |lt| lt,"}, {"sha": "d065bde88c4141b810e33e48d61472b3328aa2c5", "filename": "src/test/ui/generic-associated-types/issue-93340.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c6f6e3e0e98dad9578df472a33a71d6bdf104666/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-93340.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6f6e3e0e98dad9578df472a33a71d6bdf104666/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-93340.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-93340.rs?ref=c6f6e3e0e98dad9578df472a33a71d6bdf104666", "patch": "@@ -0,0 +1,20 @@\n+// check-pass\n+\n+#![feature(generic_associated_types)]\n+\n+pub trait Scalar: 'static {\n+    type RefType<'a>: ScalarRef<'a>;\n+}\n+\n+pub trait ScalarRef<'a>: 'a {}\n+\n+fn cmp_eq<'a, 'b, A: Scalar, B: Scalar, O: Scalar>(a: A::RefType<'a>, b: B::RefType<'b>) -> O {\n+    todo!()\n+}\n+\n+fn build_expression<A: Scalar, B: Scalar, O: Scalar>(\n+) -> impl Fn(A::RefType<'_>, B::RefType<'_>) -> O {\n+    cmp_eq\n+}\n+\n+fn main() {}"}]}