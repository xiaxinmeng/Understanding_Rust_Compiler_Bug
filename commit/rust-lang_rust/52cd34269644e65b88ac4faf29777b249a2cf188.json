{"sha": "52cd34269644e65b88ac4faf29777b249a2cf188", "node_id": "C_kwDOAAsO6NoAKDUyY2QzNDI2OTY0NGU2NWI4OGFjNGZhZjI5Nzc3YjI0OWEyY2YxODg", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-25T17:28:50Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-28T17:35:39Z"}, "message": "FnCtxt normalization stuff", "tree": {"sha": "8a905b7aa7b3082cfe94d7199f735238500055c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a905b7aa7b3082cfe94d7199f735238500055c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/52cd34269644e65b88ac4faf29777b249a2cf188", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/52cd34269644e65b88ac4faf29777b249a2cf188", "html_url": "https://github.com/rust-lang/rust/commit/52cd34269644e65b88ac4faf29777b249a2cf188", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/52cd34269644e65b88ac4faf29777b249a2cf188/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc710832eadb31c747fb2997d882c5a08de2c10e", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc710832eadb31c747fb2997d882c5a08de2c10e", "html_url": "https://github.com/rust-lang/rust/commit/fc710832eadb31c747fb2997d882c5a08de2c10e"}], "stats": {"total": 108, "additions": 41, "deletions": 67}, "files": [{"sha": "22ea83a13f03a52631fc7988c95a0c12319c6e84", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/52cd34269644e65b88ac4faf29777b249a2cf188/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52cd34269644e65b88ac4faf29777b249a2cf188/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=52cd34269644e65b88ac4faf29777b249a2cf188", "patch": "@@ -109,6 +109,9 @@ pub trait AstConv<'tcx> {\n     ) -> Ty<'tcx>;\n \n     /// Normalize an associated type coming from the user.\n+    /// \n+    /// This should only be used by astconv. Use `FnCtxt::normalize`\n+    /// or `ObligationCtxt::normalize` in downstream crates.\n     fn normalize_ty(&self, span: Span, ty: Ty<'tcx>) -> Ty<'tcx>;\n \n     /// Invoked when we encounter an error from some prior pass"}, {"sha": "894c0ba34155aa50d2fac71afa3ec8224b3dbe65", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52cd34269644e65b88ac4faf29777b249a2cf188/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52cd34269644e65b88ac4faf29777b249a2cf188/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=52cd34269644e65b88ac4faf29777b249a2cf188", "patch": "@@ -53,6 +53,8 @@ impl<'tcx> WfCheckingCtxt<'_, 'tcx> {\n         self.ocx.infcx.tcx\n     }\n \n+    // Convenience function to normalize during wfcheck. This performs\n+    // `ObligationCtxt::normalize`, but provides a nice `ObligationCauseCode`.\n     fn normalize<T>(&self, span: Span, loc: Option<WellFormedLoc>, value: T) -> T\n     where\n         T: TypeFoldable<'tcx>,"}, {"sha": "b09ddf80e2a52577292e3d602fca7e3cff198dc2", "filename": "compiler/rustc_hir_typeck/src/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52cd34269644e65b88ac4faf29777b249a2cf188/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52cd34269644e65b88ac4faf29777b249a2cf188/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs?ref=52cd34269644e65b88ac4faf29777b249a2cf188", "patch": "@@ -448,7 +448,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // previously appeared within a `Binder<>` and hence would not\n         // have been normalized before.\n         let fn_sig = self.replace_bound_vars_with_fresh_vars(call_expr.span, infer::FnCall, fn_sig);\n-        let fn_sig = self.normalize_associated_types_in(call_expr.span, fn_sig);\n+        let fn_sig = self.normalize(call_expr.span, fn_sig);\n \n         // Call the generic checker.\n         let expected_arg_tys = self.expected_inputs_for_expected_output("}, {"sha": "2a9679eed04613facc5020f1acbbb1e6d6a6ed28", "filename": "compiler/rustc_hir_typeck/src/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52cd34269644e65b88ac4faf29777b249a2cf188/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52cd34269644e65b88ac4faf29777b249a2cf188/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs?ref=52cd34269644e65b88ac4faf29777b249a2cf188", "patch": "@@ -752,7 +752,7 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                 match *self.expr_ty.kind() {\n                     ty::FnDef(..) => {\n                         // Attempt a coercion to a fn pointer type.\n-                        let f = fcx.normalize_associated_types_in(\n+                        let f = fcx.normalize(\n                             self.expr_span,\n                             self.expr_ty.fn_sig(fcx.tcx),\n                         );"}, {"sha": "33c87768ec1a373890d8f193011d0f747040f738", "filename": "compiler/rustc_hir_typeck/src/closure.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/52cd34269644e65b88ac4faf29777b249a2cf188/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52cd34269644e65b88ac4faf29777b249a2cf188/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs?ref=52cd34269644e65b88ac4faf29777b249a2cf188", "patch": "@@ -214,7 +214,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             if expected_sig.is_none()\n                 && let ty::PredicateKind::Clause(ty::Clause::Projection(proj_predicate)) = bound_predicate.skip_binder()\n             {\n-                expected_sig = self.normalize_associated_types_in(\n+                expected_sig = self.normalize(\n                     obligation.cause.span,\n                     self.deduce_sig_from_projection(\n                     Some(obligation.cause.span),\n@@ -623,7 +623,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         );\n         // Astconv can't normalize inputs or outputs with escaping bound vars,\n         // so normalize them here, after we've wrapped them in a binder.\n-        let result = self.normalize_associated_types_in(self.tcx.hir().span(hir_id), result);\n+        let result = self.normalize(self.tcx.hir().span(hir_id), result);\n \n         let c_result = self.inh.infcx.canonicalize_response(result);\n         self.typeck_results.borrow_mut().user_provided_sigs.insert(expr_def_id, c_result);\n@@ -797,10 +797,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     ) -> ClosureSignatures<'tcx> {\n         let liberated_sig =\n             self.tcx().liberate_late_bound_regions(expr_def_id.to_def_id(), bound_sig);\n-        let liberated_sig = self.inh.normalize_associated_types_in(\n+        let liberated_sig = self.normalize(\n             body.value.span,\n-            self.tcx.hir().local_def_id_to_hir_id(expr_def_id),\n-            self.param_env,\n             liberated_sig,\n         );\n         ClosureSignatures { bound_sig, liberated_sig }"}, {"sha": "e93d95ee66d9b81f16ab3ac5ecfeccf8b58bde80", "filename": "compiler/rustc_hir_typeck/src/coercion.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/52cd34269644e65b88ac4faf29777b249a2cf188/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52cd34269644e65b88ac4faf29777b249a2cf188/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs?ref=52cd34269644e65b88ac4faf29777b249a2cf188", "patch": "@@ -1141,8 +1141,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 return Err(TypeError::IntrinsicCast);\n             }\n             // The signature must match.\n-            let a_sig = self.normalize_associated_types_in(new.span, a_sig);\n-            let b_sig = self.normalize_associated_types_in(new.span, b_sig);\n+            let (a_sig, b_sig) = self.normalize(new.span, (a_sig, b_sig));\n             let sig = self\n                 .at(cause, self.param_env)\n                 .trace(prev_ty, new_ty)"}, {"sha": "7b101fc5c66c819b65bb498a028c3c37b0d8f5bf", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52cd34269644e65b88ac4faf29777b249a2cf188/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52cd34269644e65b88ac4faf29777b249a2cf188/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=52cd34269644e65b88ac4faf29777b249a2cf188", "patch": "@@ -1664,7 +1664,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         .fields\n                         .iter()\n                         .map(|f| {\n-                            let fru_ty = self.normalize_associated_types_in(\n+                            let fru_ty = self.normalize(\n                                 expr_span,\n                                 self.field_ty(base_expr.span, f, fresh_substs),\n                             );\n@@ -1749,7 +1749,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         .fields\n                         .iter()\n                         .map(|f| {\n-                            self.normalize_associated_types_in(expr_span, f.ty(self.tcx, substs))\n+                            self.normalize(expr_span, f.ty(self.tcx, substs))\n                         })\n                         .collect(),\n                     _ => {"}, {"sha": "8ce9e40cfdbf88b6aa4bfdde2099140cae20d897", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/_impl.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/52cd34269644e65b88ac4faf29777b249a2cf188/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52cd34269644e65b88ac4faf29777b249a2cf188/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs?ref=52cd34269644e65b88ac4faf29777b249a2cf188", "patch": "@@ -344,7 +344,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     {\n         debug!(\"instantiate_type_scheme(value={:?}, substs={:?})\", value, substs);\n         let value = EarlyBinder(value).subst(self.tcx, substs);\n-        let result = self.normalize_associated_types_in(span, value);\n+        let result = self.normalize(span, value);\n         debug!(\"instantiate_type_scheme = {:?}\", result);\n         result\n     }\n@@ -360,19 +360,21 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let bounds = self.tcx.predicates_of(def_id);\n         let spans: Vec<Span> = bounds.predicates.iter().map(|(_, span)| *span).collect();\n         let result = bounds.instantiate(self.tcx, substs);\n-        let result = self.normalize_associated_types_in(span, result);\n+        let result = self.normalize(span, result);\n         debug!(\n             \"instantiate_bounds(bounds={:?}, substs={:?}) = {:?}, {:?}\",\n             bounds, substs, result, spans,\n         );\n         (result, spans)\n     }\n \n-    pub(in super::super) fn normalize_associated_types_in<T>(&self, span: Span, value: T) -> T\n+    pub(in super::super) fn normalize<T>(&self, span: Span, value: T) -> T\n     where\n         T: TypeFoldable<'tcx>,\n     {\n-        self.inh.normalize_associated_types_in(span, self.body_id, self.param_env, value)\n+        self.register_infer_ok_obligations(\n+            self.at(&self.misc(span), self.param_env).normalize(value),\n+        )\n     }\n \n     pub(in super::super) fn normalize_associated_types_in_as_infer_ok<T>(\n@@ -487,7 +489,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 let span = self.tcx.def_span(anon_const.def_id);\n                 let c = ty::Const::from_anon_const(self.tcx, anon_const.def_id);\n                 self.register_wf_obligation(c.into(), span, ObligationCauseCode::WellFormed(None));\n-                self.normalize_associated_types_in(span, c)\n+                self.normalize(span, c)\n             }\n         }\n     }\n@@ -580,7 +582,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         field: &'tcx ty::FieldDef,\n         substs: SubstsRef<'tcx>,\n     ) -> Ty<'tcx> {\n-        self.normalize_associated_types_in(span, field.ty(self.tcx, substs))\n+        self.normalize(span, field.ty(self.tcx, substs))\n     }\n \n     pub(in super::super) fn resolve_rvalue_scopes(&self, def_id: DefId) {\n@@ -1107,7 +1109,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         if let Res::Local(hid) = res {\n             let ty = self.local_ty(span, hid).decl_ty;\n-            let ty = self.normalize_associated_types_in(span, ty);\n+            let ty = self.normalize(span, ty);\n             self.write_ty(hir_id, ty);\n             return (ty, res);\n         }"}, {"sha": "ea141e815bf4a9c268d1f3652f20a795863c137b", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52cd34269644e65b88ac4faf29777b249a2cf188/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52cd34269644e65b88ac4faf29777b249a2cf188/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fmod.rs?ref=52cd34269644e65b88ac4faf29777b249a2cf188", "patch": "@@ -288,7 +288,7 @@ impl<'a, 'tcx> AstConv<'tcx> for FnCtxt<'a, 'tcx> {\n         if ty.has_escaping_bound_vars() {\n             ty // FIXME: normalization and escaping regions\n         } else {\n-            self.normalize_associated_types_in(span, ty)\n+            self.normalize(span, ty)\n         }\n     }\n "}, {"sha": "10cc4e818194485deb69515e91176f3d7072c48f", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52cd34269644e65b88ac4faf29777b249a2cf188/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52cd34269644e65b88ac4faf29777b249a2cf188/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=52cd34269644e65b88ac4faf29777b249a2cf188", "patch": "@@ -759,7 +759,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 debug!(\"suggest_missing_return_type: expected type {:?}\", ty);\n                 let bound_vars = self.tcx.late_bound_vars(fn_id);\n                 let ty = Binder::bind_with_vars(ty, bound_vars);\n-                let ty = self.normalize_associated_types_in(span, ty);\n+                let ty = self.normalize(span, ty);\n                 let ty = self.tcx.erase_late_bound_regions(ty);\n                 if self.can_coerce(expected, ty) {\n                     err.subdiagnostic(ExpectedReturnTypeLabel::Other { span, expected });\n@@ -920,7 +920,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             let ty = <dyn AstConv<'_>>::ast_ty_to_ty(self, ty);\n             let bound_vars = self.tcx.late_bound_vars(fn_id);\n             let ty = self.tcx.erase_late_bound_regions(Binder::bind_with_vars(ty, bound_vars));\n-            let ty = self.normalize_associated_types_in(expr.span, ty);\n+            let ty = self.normalize(expr.span, ty);\n             let ty = match self.tcx.asyncness(fn_id.owner) {\n                 hir::IsAsync::Async => {\n                     let infcx = self.tcx.infer_ctxt().build();"}, {"sha": "3b1518ff79b4e8e0859f8436615258b3587ea096", "filename": "compiler/rustc_hir_typeck/src/generator_interior/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52cd34269644e65b88ac4faf29777b249a2cf188/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52cd34269644e65b88ac4faf29777b249a2cf188/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs?ref=52cd34269644e65b88ac4faf29777b249a2cf188", "patch": "@@ -235,7 +235,7 @@ pub fn resolve_interior<'a, 'tcx>(\n                 counter += 1;\n                 ty::BoundRegion { var, kind }\n             };\n-            let ty = fcx.normalize_associated_types_in(cause.span, cause.ty);\n+            let ty = fcx.normalize(cause.span, cause.ty);\n             let ty = fcx.tcx.fold_regions(ty, |region, current_depth| {\n                 let br = match region.kind() {\n                     ty::ReVar(vid) => {"}, {"sha": "e8a9e4980f613df86f8ae3cfa1e6ca50b81564a2", "filename": "compiler/rustc_hir_typeck/src/inherited.rs", "status": "modified", "additions": 1, "deletions": 33, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/52cd34269644e65b88ac4faf29777b249a2cf188/compiler%2Frustc_hir_typeck%2Fsrc%2Finherited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52cd34269644e65b88ac4faf29777b249a2cf188/compiler%2Frustc_hir_typeck%2Fsrc%2Finherited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Finherited.rs?ref=52cd34269644e65b88ac4faf29777b249a2cf188", "patch": "@@ -7,13 +7,12 @@ use rustc_hir::def_id::LocalDefId;\n use rustc_hir::HirIdMap;\n use rustc_infer::infer;\n use rustc_infer::infer::{DefiningAnchor, InferCtxt, InferOk, TyCtxtInferExt};\n-use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::visit::TypeVisitable;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_span::def_id::LocalDefIdMap;\n use rustc_span::{self, Span};\n use rustc_trait_selection::traits::{\n-    self, NormalizeExt, ObligationCause, ObligationCtxt, TraitEngine, TraitEngineExt as _,\n+    self, ObligationCause, ObligationCtxt, TraitEngine, TraitEngineExt as _,\n };\n \n use std::cell::RefCell;\n@@ -178,35 +177,4 @@ impl<'tcx> Inherited<'tcx> {\n         self.register_predicates(infer_ok.obligations);\n         infer_ok.value\n     }\n-\n-    pub(super) fn normalize_associated_types_in<T>(\n-        &self,\n-        span: Span,\n-        body_id: hir::HirId,\n-        param_env: ty::ParamEnv<'tcx>,\n-        value: T,\n-    ) -> T\n-    where\n-        T: TypeFoldable<'tcx>,\n-    {\n-        self.normalize_associated_types_in_with_cause(\n-            ObligationCause::misc(span, body_id),\n-            param_env,\n-            value,\n-        )\n-    }\n-\n-    pub(super) fn normalize_associated_types_in_with_cause<T>(\n-        &self,\n-        cause: ObligationCause<'tcx>,\n-        param_env: ty::ParamEnv<'tcx>,\n-        value: T,\n-    ) -> T\n-    where\n-        T: TypeFoldable<'tcx>,\n-    {\n-        let ok = self.at(&cause, param_env).normalize(value);\n-        debug!(?ok);\n-        self.register_infer_ok_obligations(ok)\n-    }\n }"}, {"sha": "11c56b5fce61e4e0261f4b48eddcac33471e069a", "filename": "compiler/rustc_hir_typeck/src/lib.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/52cd34269644e65b88ac4faf29777b249a2cf188/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52cd34269644e65b88ac4faf29777b249a2cf188/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs?ref=52cd34269644e65b88ac4faf29777b249a2cf188", "patch": "@@ -48,6 +48,8 @@ pub use diverges::Diverges;\n pub use expectation::Expectation;\n pub use fn_ctxt::*;\n pub use inherited::{Inherited, InheritedBuilder};\n+use rustc_infer::traits::ObligationCause;\n+use rustc_trait_selection::traits::NormalizeExt;\n \n use crate::check::check_fn;\n use crate::coercion::DynamicCoerceMany;\n@@ -245,12 +247,13 @@ fn typeck_with_fallback<'tcx>(\n \n             // Compute the function signature from point of view of inside the fn.\n             let fn_sig = tcx.liberate_late_bound_regions(def_id.to_def_id(), fn_sig);\n-            let fn_sig = inh.normalize_associated_types_in(\n-                body.value.span,\n-                body_id.hir_id,\n-                param_env,\n-                fn_sig,\n-            );\n+            // FIXME(compiler-errors): Remove\n+            let fn_sig = inh\n+                .register_infer_ok_obligations(\n+                    inh.at(&ObligationCause::misc(body.value.span, body_id.hir_id),\n+                    param_env,\n+                )\n+                .normalize(fn_sig));\n             check_fn(&inh, param_env, fn_sig, decl, def_id, body, None).0\n         } else {\n             let fcx = FnCtxt::new(&inh, param_env, body.value.hir_id);\n@@ -304,7 +307,7 @@ fn typeck_with_fallback<'tcx>(\n                     _ => fallback(),\n                 });\n \n-            let expected_type = fcx.normalize_associated_types_in(body.value.span, expected_type);\n+            let expected_type = fcx.normalize(body.value.span, expected_type);\n             fcx.require_type_is_sized(expected_type, body.value.span, traits::ConstSized);\n \n             // Gather locals in statics (because of block expressions)."}, {"sha": "03d0e7926de1166fc5103cc7f0167ea4eb153048", "filename": "compiler/rustc_hir_typeck/src/method/confirm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52cd34269644e65b88ac4faf29777b249a2cf188/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52cd34269644e65b88ac4faf29777b249a2cf188/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fconfirm.rs?ref=52cd34269644e65b88ac4faf29777b249a2cf188", "patch": "@@ -106,15 +106,15 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n         // traits, no trait system method can be called before this point because they\n         // could alter our Self-type, except for normalizing the receiver from the\n         // signature (which is also done during probing).\n-        let method_sig_rcvr = self.normalize_associated_types_in(self.span, method_sig.inputs()[0]);\n+        let method_sig_rcvr = self.normalize(self.span, method_sig.inputs()[0]);\n         debug!(\n             \"confirm: self_ty={:?} method_sig_rcvr={:?} method_sig={:?} method_predicates={:?}\",\n             self_ty, method_sig_rcvr, method_sig, method_predicates\n         );\n         self.unify_receivers(self_ty, method_sig_rcvr, &pick, all_substs);\n \n         let (method_sig, method_predicates) =\n-            self.normalize_associated_types_in(self.span, (method_sig, method_predicates));\n+            self.normalize(self.span, (method_sig, method_predicates));\n         let method_sig = ty::Binder::dummy(method_sig);\n \n         // Make sure nobody calls `drop()` explicitly."}, {"sha": "2ceda3511fe44642b1a822dcddd5eb8857e8da2b", "filename": "src/tools/clippy/clippy_utils/src/ty.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/52cd34269644e65b88ac4faf29777b249a2cf188/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52cd34269644e65b88ac4faf29777b249a2cf188/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs?ref=52cd34269644e65b88ac4faf29777b249a2cf188", "patch": "@@ -22,8 +22,7 @@ use rustc_span::symbol::Ident;\n use rustc_span::{sym, Span, Symbol, DUMMY_SP};\n use rustc_target::abi::{Size, VariantIdx};\n use rustc_trait_selection::infer::InferCtxtExt;\n-use rustc_trait_selection::traits::NormalizeExt;\n-use rustc_trait_selection::traits::query::normalize::AtExt;\n+use rustc_trait_selection::traits::query::normalize::QueryNormalizeExt;\n use std::iter;\n \n use crate::{match_def_path, path_res, paths};\n@@ -284,7 +283,7 @@ fn is_normalizable_helper<'tcx>(\n     cache.insert(ty, false);\n     let infcx = cx.tcx.infer_ctxt().build();\n     let cause = rustc_middle::traits::ObligationCause::dummy();\n-    let result = if infcx.at(&cause, param_env).normalize(ty).is_ok() {\n+    let result = if infcx.at(&cause, param_env).query_normalize(ty).is_ok() {\n         match ty.kind() {\n             ty::Adt(def, substs) => def.variants().iter().all(|variant| {\n                 variant"}]}