{"sha": "d91657877a44ecc9450b6d996bef577a1d1ec647", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5MTY1Nzg3N2E0NGVjYzk0NTBiNmQ5OTZiZWY1NzdhMWQxZWM2NDc=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-02-24T19:10:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-24T19:10:12Z"}, "message": "Rollup merge of #69220 - wesleywiser:doc_self_profile_unstable_book, r=nikomatsakis\n\nAdd documentation for the `-Zself-profile` flag", "tree": {"sha": "846df3a405567e1208c013a3a25dd55d8dbe5c49", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/846df3a405567e1208c013a3a25dd55d8dbe5c49"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d91657877a44ecc9450b6d996bef577a1d1ec647", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeVB+UCRBK7hj4Ov3rIwAAdHIIAIJzrf7ojXlGqQR13tSQUHyO\n//jLgbtr/RU6AVky9bYwXpqteiB7+4z/Sd2YaEp1GYk53/OyTaSs91laJFkV3YiC\nrqDvnKHim2DKtdDYIlW32hcFF6xJnd71nGTvg+G3VEz45PDJ6nY8Csa2ggPumc8v\nVQnhT0sE40YdJgN/W/JQmU59SfWpbcDhgK9y6TV1Mn7DJc6tueBrm6H4yu/gIN+w\nP5im9yxXrle7+wC08+VweFQlqPP4MCbs0aPOoqlJJT0t/hQ0DMrmf6ZZbNd5iffD\nU3+T9cp0wcoIjJEe8vKg8M5AZrBr8tPi2XvBAJi5fhBLZOKtVRe24xAXfowlLGA=\n=7KnA\n-----END PGP SIGNATURE-----\n", "payload": "tree 846df3a405567e1208c013a3a25dd55d8dbe5c49\nparent 834bc5650acf7019a53b409db68986857822812c\nparent 5b7e6c0f3c71891a40a77493bb251fccd5944feb\nauthor Dylan DPC <dylan.dpc@gmail.com> 1582571412 +0100\ncommitter GitHub <noreply@github.com> 1582571412 +0100\n\nRollup merge of #69220 - wesleywiser:doc_self_profile_unstable_book, r=nikomatsakis\n\nAdd documentation for the `-Zself-profile` flag\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d91657877a44ecc9450b6d996bef577a1d1ec647", "html_url": "https://github.com/rust-lang/rust/commit/d91657877a44ecc9450b6d996bef577a1d1ec647", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d91657877a44ecc9450b6d996bef577a1d1ec647/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "834bc5650acf7019a53b409db68986857822812c", "url": "https://api.github.com/repos/rust-lang/rust/commits/834bc5650acf7019a53b409db68986857822812c", "html_url": "https://github.com/rust-lang/rust/commit/834bc5650acf7019a53b409db68986857822812c"}, {"sha": "5b7e6c0f3c71891a40a77493bb251fccd5944feb", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b7e6c0f3c71891a40a77493bb251fccd5944feb", "html_url": "https://github.com/rust-lang/rust/commit/5b7e6c0f3c71891a40a77493bb251fccd5944feb"}], "stats": {"total": 121, "additions": 121, "deletions": 0}, "files": [{"sha": "3ce18743be50801360ef737c510d6ebc0e86ba61", "filename": "src/doc/unstable-book/src/compiler-flags/self-profile-events.md", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/d91657877a44ecc9450b6d996bef577a1d1ec647/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fself-profile-events.md", "raw_url": "https://github.com/rust-lang/rust/raw/d91657877a44ecc9450b6d996bef577a1d1ec647/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fself-profile-events.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fself-profile-events.md?ref=d91657877a44ecc9450b6d996bef577a1d1ec647", "patch": "@@ -0,0 +1,74 @@\n+# `self-profile-events`\n+\n+---------------------\n+\n+The `-Zself-profile-events` compiler flag controls what events are recorded by the self-profiler when it is enabled via the `-Zself-profile` flag.\n+\n+This flag takes a comma delimited list of event types to record.\n+\n+For example:\n+\n+```console\n+$ rustc -Zself-profile -Zself-profile-events=default,args\n+```\n+\n+## Event types\n+\n+- `query-provider`\n+  - Traces each query used internally by the compiler.\n+\n+- `generic-activity`\n+  - Traces other parts of the compiler not covered by the query system.\n+\n+- `query-cache-hit`\n+  - Adds tracing information that records when the in-memory query cache is \"hit\" and does not need to re-execute a query which has been cached.\n+  - Disabled by default because this significantly increases the trace file size.\n+\n+- `query-blocked`\n+  - Tracks time that a query tries to run but is blocked waiting on another thread executing the same query to finish executing.\n+  - Query blocking only occurs when the compiler is built with parallel mode support.\n+\n+- `incr-cache-load`\n+  - Tracks time that is spent loading and deserializing query results from the incremental compilation on-disk cache.\n+\n+- `query-keys`\n+  - Adds a serialized representation of each query's query key to the tracing data.\n+  - Disabled by default because this significantly increases the trace file size.\n+\n+- `function-args`\n+  - Adds additional tracing data to some `generic-activity` events.\n+  - Disabled by default for parity with `query-keys`.\n+\n+- `llvm`\n+  - Adds tracing information about LLVM passes and codegeneration.\n+  - Disabled by default because this only works when `-Znew-llvm-pass-manager` is enabled.\n+\n+## Event synonyms\n+\n+- `none`\n+  - Disables all events.\n+  Equivalent to the self-profiler being disabled.\n+\n+- `default`\n+  - The default set of events which stikes a balance between providing detailed tracing data and adding additional overhead to the compilation.\n+\n+- `args`\n+  - Equivalent to `query-keys` and `function-args`.\n+\n+- `all`\n+  - Enables all events.\n+\n+## Examples\n+\n+Enable the profiler and capture the default set of events (both invocations are equivalent):\n+\n+```console\n+$ rustc -Zself-profile\n+$ rustc -Zself-profile -Zself-profile-events=default\n+```\n+\n+Enable the profiler and capture the default events and their arguments:\n+\n+```console\n+$ rustc -Zself-profile -Zself-profile-events=default,args\n+```"}, {"sha": "6de1c774f7cd7d19255cfa60042d838663efca4e", "filename": "src/doc/unstable-book/src/compiler-flags/self-profile.md", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/d91657877a44ecc9450b6d996bef577a1d1ec647/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fself-profile.md", "raw_url": "https://github.com/rust-lang/rust/raw/d91657877a44ecc9450b6d996bef577a1d1ec647/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fself-profile.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fself-profile.md?ref=d91657877a44ecc9450b6d996bef577a1d1ec647", "patch": "@@ -0,0 +1,47 @@\n+# `self-profile`\n+\n+--------------------\n+\n+The `-Zself-profile` compiler flag enables rustc's internal profiler.\n+When enabled, the compiler will output three binary files in the specified directory (or the current working directory if no directory is specified).\n+These files can be analyzed by using the tools in the [`measureme`] repository.\n+\n+To control the data recorded in the trace files, use the `-Zself-profile-events` flag.\n+\n+For example:\n+\n+First, run a compilation session and provide the `-Zself-profile` flag:\n+\n+```console\n+$ rustc --crate-name foo -Zself-profile`\n+```\n+\n+This will generate three files in the working directory such as:\n+\n+- `foo-1234.events`\n+- `foo-1234.string_data`\n+- `foo-1234.string_index`\n+\n+Where `foo` is the name of the crate and `1234` is the process id of the rustc process.\n+\n+To get a summary of where the compiler is spending its time:\n+\n+```console\n+$ ../measureme/target/release/summarize summarize foo-1234\n+```\n+\n+To generate a flamegraph of the same data:\n+\n+```console\n+$ ../measureme/target/release/inferno foo-1234\n+```\n+\n+To dump the event data in a Chromium-profiler compatible format:\n+\n+```console\n+$ ../measureme/target/release/crox foo-1234\n+```\n+\n+For more information, consult the [`measureme`] documentation.\n+\n+[`measureme`]: https://github.com/rust-lang/measureme.git"}]}