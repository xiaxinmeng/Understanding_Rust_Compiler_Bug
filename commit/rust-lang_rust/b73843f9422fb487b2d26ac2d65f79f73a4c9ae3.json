{"sha": "b73843f9422fb487b2d26ac2d65f79f73a4c9ae3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3Mzg0M2Y5NDIyZmI0ODdiMmQyNmFjMmQ2NWY3OWY3M2E0YzlhZTM=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2018-08-17T06:05:24Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2018-08-20T00:36:39Z"}, "message": "Force-inline `shallow_resolve` at its hottest call site.\n\nIt's a ~1% win on `keccak` and `inflate`.", "tree": {"sha": "6a606bc29aec8fce03ae8d2593cb10e208adc10d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a606bc29aec8fce03ae8d2593cb10e208adc10d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b73843f9422fb487b2d26ac2d65f79f73a4c9ae3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b73843f9422fb487b2d26ac2d65f79f73a4c9ae3", "html_url": "https://github.com/rust-lang/rust/commit/b73843f9422fb487b2d26ac2d65f79f73a4c9ae3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b73843f9422fb487b2d26ac2d65f79f73a4c9ae3/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ac79c718475fd29b8be34dde667b683390c2aee", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ac79c718475fd29b8be34dde667b683390c2aee", "html_url": "https://github.com/rust-lang/rust/commit/3ac79c718475fd29b8be34dde667b683390c2aee"}], "stats": {"total": 13, "additions": 11, "deletions": 2}, "files": [{"sha": "1cdbc80ccacf8c09c03d42e2936b17af9b68e8c1", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b73843f9422fb487b2d26ac2d65f79f73a4c9ae3/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b73843f9422fb487b2d26ac2d65f79f73a4c9ae3/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=b73843f9422fb487b2d26ac2d65f79f73a4c9ae3", "patch": "@@ -1116,7 +1116,11 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         self.resolve_type_vars_if_possible(t).to_string()\n     }\n \n-    pub fn shallow_resolve(&self, typ: Ty<'tcx>) -> Ty<'tcx> {\n+    // We have this force-inlined variant of shallow_resolve() for the one\n+    // callsite that is extremely hot. All other callsites use the normal\n+    // variant.\n+    #[inline(always)]\n+    pub fn inlined_shallow_resolve(&self, typ: Ty<'tcx>) -> Ty<'tcx> {\n         match typ.sty {\n             ty::TyInfer(ty::TyVar(v)) => {\n                 // Not entirely obvious: if `typ` is a type variable,\n@@ -1157,6 +1161,10 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n+    pub fn shallow_resolve(&self, typ: Ty<'tcx>) -> Ty<'tcx> {\n+        self.inlined_shallow_resolve(typ)\n+    }\n+\n     pub fn resolve_type_vars_if_possible<T>(&self, value: &T) -> T\n         where T: TypeFoldable<'tcx>\n     {"}, {"sha": "a3cc650511883e65d87274e053fef877c9963a16", "filename": "src/librustc/traits/fulfill.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b73843f9422fb487b2d26ac2d65f79f73a4c9ae3/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b73843f9422fb487b2d26ac2d65f79f73a4c9ae3/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ffulfill.rs?ref=b73843f9422fb487b2d26ac2d65f79f73a4c9ae3", "patch": "@@ -269,7 +269,8 @@ impl<'a, 'b, 'gcx, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'gcx,\n         // doing more work yet\n         if !pending_obligation.stalled_on.is_empty() {\n             if pending_obligation.stalled_on.iter().all(|&ty| {\n-                let resolved_ty = self.selcx.infcx().shallow_resolve(&ty);\n+                // Use the force-inlined variant of shallow_resolve() because this code is hot.\n+                let resolved_ty = self.selcx.infcx().inlined_shallow_resolve(&ty);\n                 resolved_ty == ty // nothing changed here\n             }) {\n                 debug!(\"process_predicate: pending obligation {:?} still stalled on {:?}\","}]}