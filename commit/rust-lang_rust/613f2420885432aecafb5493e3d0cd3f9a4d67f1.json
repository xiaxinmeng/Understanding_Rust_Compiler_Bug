{"sha": "613f2420885432aecafb5493e3d0cd3f9a4d67f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxM2YyNDIwODg1NDMyYWVjYWZiNTQ5M2UzZDBjZDNmOWE0ZDY3ZjE=", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2020-09-25T01:15:31Z"}, "committer": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2020-09-25T01:15:31Z"}, "message": "Add pointer vectors and implement a few more traits", "tree": {"sha": "233642e5657a9b738934f8144b4a9362ed2661e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/233642e5657a9b738934f8144b4a9362ed2661e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/613f2420885432aecafb5493e3d0cd3f9a4d67f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/613f2420885432aecafb5493e3d0cd3f9a4d67f1", "html_url": "https://github.com/rust-lang/rust/commit/613f2420885432aecafb5493e3d0cd3f9a4d67f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/613f2420885432aecafb5493e3d0cd3f9a4d67f1/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3df72fddc267144a2052167c012b654974d84bb8", "url": "https://api.github.com/repos/rust-lang/rust/commits/3df72fddc267144a2052167c012b654974d84bb8", "html_url": "https://github.com/rust-lang/rust/commit/3df72fddc267144a2052167c012b654974d84bb8"}], "stats": {"total": 220, "additions": 218, "deletions": 2}, "files": [{"sha": "34f2b90f7673ba8e423823f8e406bf970e5ad3d2", "filename": "crates/core_simd/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/613f2420885432aecafb5493e3d0cd3f9a4d67f1/crates%2Fcore_simd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/613f2420885432aecafb5493e3d0cd3f9a4d67f1/crates%2Fcore_simd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Flib.rs?ref=613f2420885432aecafb5493e3d0cd3f9a4d67f1", "patch": "@@ -9,6 +9,9 @@ mod macros;\n mod masks;\n pub use masks::*;\n \n+mod pointers;\n+pub use pointers::*;\n+\n mod vectors_u8;\n pub use vectors_u8::*;\n mod vectors_u16;"}, {"sha": "6b5599f0170d667afc43fec8bd960749418d1291", "filename": "crates/core_simd/src/macros.rs", "status": "modified", "additions": 53, "deletions": 2, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/613f2420885432aecafb5493e3d0cd3f9a4d67f1/crates%2Fcore_simd%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/613f2420885432aecafb5493e3d0cd3f9a4d67f1/crates%2Fcore_simd%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmacros.rs?ref=613f2420885432aecafb5493e3d0cd3f9a4d67f1", "patch": "@@ -96,7 +96,7 @@ macro_rules! call_counting_args {\n     { 2 => $mac:path => $($args:tt)* } => {\n         $mac! {\n             $($args)*\n-            v1 v2\n+            v0 v1\n         }\n     };\n     { 4 => $mac:path => $($args:tt)* } => {\n@@ -135,6 +135,57 @@ macro_rules! call_counting_args {\n     };\n }\n \n+/// Calls the macro `$mac` with the specified `$args` followed by counting values from 0 to the\n+/// specified value.\n+macro_rules! call_counting_values {\n+    { 1 => $mac:path => $($args:tt)* } => {\n+        $mac! {\n+            $($args)*\n+            0\n+        }\n+    };\n+    { 2 => $mac:path => $($args:tt)* } => {\n+        $mac! {\n+            $($args)*\n+            0 1\n+        }\n+    };\n+    { 4 => $mac:path => $($args:tt)* } => {\n+        $mac! {\n+            $($args)*\n+            0 1 2 3\n+        }\n+    };\n+    { 8 => $mac:path => $($args:tt)* } => {\n+        $mac! {\n+            $($args)*\n+            0 1 2 3 4 5 6 7\n+        }\n+    };\n+    { 16 => $mac:path => $($args:tt)* } => {\n+        $mac! {\n+            $($args)*\n+            0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\n+        }\n+    };\n+    { 32 => $mac:path => $($args:tt)* } => {\n+        $mac! {\n+            $($args)*\n+            0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15\n+            16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n+        }\n+    };\n+    { 64 => $mac:path => $($args:tt)* } => {\n+        $mac! {\n+            $($args)*\n+            0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15\n+            16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n+            32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47\n+            48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63\n+        }\n+    };\n+}\n+\n /// Implements common traits on the specified vector `$name`, holding multiple `$lanes` of `$type`.\n macro_rules! base_vector_traits {\n     { $name:path => [$type:ty; $lanes:literal] } => {\n@@ -233,7 +284,7 @@ macro_rules! define_mask_vector {\n     { def $(#[$attr:meta])* | $name:ident | $($itype:ty)* } => {\n         $(#[$attr])*\n         #[allow(non_camel_case_types)]\n-        #[derive(Copy, Clone, Debug, Default, PartialEq, PartialOrd)]\n+        #[derive(Copy, Clone, Debug, Default, PartialEq, PartialOrd, Eq, Ord)]\n         #[repr(simd)]\n         pub struct $name($($itype),*);\n     };"}, {"sha": "ecd78fb0cb177c0500bb43f59d28dcd467a2c41a", "filename": "crates/core_simd/src/pointers.rs", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/613f2420885432aecafb5493e3d0cd3f9a4d67f1/crates%2Fcore_simd%2Fsrc%2Fpointers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/613f2420885432aecafb5493e3d0cd3f9a4d67f1/crates%2Fcore_simd%2Fsrc%2Fpointers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fpointers.rs?ref=613f2420885432aecafb5493e3d0cd3f9a4d67f1", "patch": "@@ -0,0 +1,116 @@\n+use core::marker::PhantomData;\n+\n+use crate::vectors_isize::*;\n+\n+macro_rules! define_pointer_vector {\n+    { $(#[$attr:meta])* $name:ident => $underlying:ty => $lanes:tt, $mut:ident } => {\n+        $(#[$attr])*\n+        #[allow(non_camel_case_types)]\n+        #[repr(C)]\n+        pub struct $name<T>($underlying, PhantomData<T>);\n+\n+        impl<T> Copy for $name<T> {}\n+\n+        impl<T> Clone for $name<T> {\n+            #[inline]\n+            fn clone(&self) -> Self {\n+                *self\n+            }\n+        }\n+\n+        impl<T> core::cmp::PartialEq for $name<T> {\n+            #[inline]\n+            fn eq(&self, other: &Self) -> bool {\n+                self.0.eq(&other.0)\n+            }\n+        }\n+\n+        impl<T> core::cmp::Eq for $name<T> {}\n+\n+        impl<T> core::cmp::PartialOrd for $name<T> {\n+            #[inline]\n+            fn partial_cmp(&self, other: &Self) -> Option<core::cmp::Ordering> {\n+                self.0.partial_cmp(&other.0)\n+            }\n+        }\n+\n+        impl<T> core::cmp::Ord for $name<T> {\n+            fn cmp(&self, other: &Self) -> core::cmp::Ordering {\n+                self.0.cmp(&other.0)\n+            }\n+        }\n+\n+        call_counting_values! { $lanes => define_pointer_vector => debug $name | *$mut T | }\n+\n+        impl<T> $name<T> {\n+            /// Construct a vector by setting all lanes to the given value.\n+            #[inline]\n+            pub fn splat(value: *$mut T) -> Self {\n+                Self(<$underlying>::splat(value as isize), PhantomData)\n+            }\n+            call_counting_args! { $lanes => define_pointer_vector => new $underlying | *$mut T | }\n+        }\n+\n+        // array references\n+        impl<T> AsRef<[*$mut T; $lanes]> for $name<T> {\n+            #[inline]\n+            fn as_ref(&self) -> &[*$mut T; $lanes] {\n+                unsafe { &*(self as *const _ as *const _) }\n+            }\n+        }\n+\n+        impl<T> AsMut<[*$mut T; $lanes]> for $name<T> {\n+            #[inline]\n+            fn as_mut(&mut self) -> &mut [*$mut T; $lanes] {\n+                unsafe { &mut *(self as *mut _ as *mut _) }\n+            }\n+        }\n+\n+        // slice references\n+        impl<T> AsRef<[*$mut T]> for $name<T> {\n+            #[inline]\n+            fn as_ref(&self) -> &[*$mut T] {\n+                AsRef::<[*$mut T; $lanes]>::as_ref(self)\n+            }\n+        }\n+\n+        impl<T> AsMut<[*$mut T]> for $name<T> {\n+            #[inline]\n+            fn as_mut(&mut self) -> &mut [*$mut T] {\n+                AsMut::<[*$mut T; $lanes]>::as_mut(self)\n+            }\n+        }\n+\n+        // splat\n+        impl<T> From<*$mut T> for $name<T> {\n+            #[inline]\n+            fn from(value: *$mut T) -> Self {\n+                Self::splat(value)\n+            }\n+        }\n+    };\n+    { new $underlying:ty | $type:ty | $($var:ident)* } => {\n+        /// Construct a vector by setting each lane to the given values.\n+        #[allow(clippy::too_many_arguments)]\n+        #[inline]\n+        pub fn new($($var: $type),*) -> Self {\n+            Self(<$underlying>::new($($var as isize),*), PhantomData)\n+        }\n+    };\n+    { debug $name:ident | $type:ty | $($index:tt)* } => {\n+        impl<T> core::fmt::Debug for $name<T> {\n+            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {\n+                f.debug_tuple(stringify!($name))\n+                    $(.field(&(AsRef::<[isize]>::as_ref(&self.0)[$index] as $type)))*\n+                    .finish()\n+            }\n+        }\n+    }\n+}\n+\n+define_pointer_vector! { #[doc = \"Vector of two mutable pointers\"] mptrx2 => isizex2 => 2, mut }\n+define_pointer_vector! { #[doc = \"Vector of four mutable pointers\"] mptrx4 => isizex4 => 4, mut }\n+define_pointer_vector! { #[doc = \"Vector of eight mutable pointers\"] mptrx8 => isizex8 => 8, mut }\n+define_pointer_vector! { #[doc = \"Vector of two const pointers\"] cptrx2 => isizex2 => 2, const }\n+define_pointer_vector! { #[doc = \"Vector of four const pointers\"] cptrx4 => isizex4 => 4, const }\n+define_pointer_vector! { #[doc = \"Vector of eight const pointers\"] cptrx8 => isizex8 => 8, const }"}, {"sha": "9eb0a12b8032a8380c9d48342f2ce141b379eeb5", "filename": "crates/core_simd/src/vectors_i128.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/613f2420885432aecafb5493e3d0cd3f9a4d67f1/crates%2Fcore_simd%2Fsrc%2Fvectors_i128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/613f2420885432aecafb5493e3d0cd3f9a4d67f1/crates%2Fcore_simd%2Fsrc%2Fvectors_i128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_i128.rs?ref=613f2420885432aecafb5493e3d0cd3f9a4d67f1", "patch": "@@ -1,10 +1,12 @@\n define_vector! {\n     #[doc = \"Vector of two `i128` values\"]\n+    #[derive(Eq, Ord, Hash)]\n     struct i128x2([i128; 2]);\n }\n \n define_vector! {\n     #[doc = \"Vector of four `i128` values\"]\n+    #[derive(Eq, Ord, Hash)]\n     struct i128x4([i128; 4]);\n }\n "}, {"sha": "682ee214eb50cd1823a18d36236b5a5becbfce97", "filename": "crates/core_simd/src/vectors_i16.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/613f2420885432aecafb5493e3d0cd3f9a4d67f1/crates%2Fcore_simd%2Fsrc%2Fvectors_i16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/613f2420885432aecafb5493e3d0cd3f9a4d67f1/crates%2Fcore_simd%2Fsrc%2Fvectors_i16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_i16.rs?ref=613f2420885432aecafb5493e3d0cd3f9a4d67f1", "patch": "@@ -1,25 +1,30 @@\n define_vector! {\n     #[doc = \"Vector of two `i16` values\"]\n+    #[derive(Eq, Ord, Hash)]\n     struct i16x2([i16; 2]);\n }\n \n define_vector! {\n     #[doc = \"Vector of four `i16` values\"]\n+    #[derive(Eq, Ord, Hash)]\n     struct i16x4([i16; 4]);\n }\n \n define_vector! {\n     #[doc = \"Vector of eight `i16` values\"]\n+    #[derive(Eq, Ord, Hash)]\n     struct i16x8([i16; 8]);\n }\n \n define_vector! {\n     #[doc = \"Vector of 16 `i16` values\"]\n+    #[derive(Eq, Ord, Hash)]\n     struct i16x16([i16; 16]);\n }\n \n define_vector! {\n     #[doc = \"Vector of 32 `i16` values\"]\n+    #[derive(Eq, Ord, Hash)]\n     struct i16x32([i16; 32]);\n }\n "}, {"sha": "d528fdbc267074e1b9a788af49229a9b77f0d905", "filename": "crates/core_simd/src/vectors_i32.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/613f2420885432aecafb5493e3d0cd3f9a4d67f1/crates%2Fcore_simd%2Fsrc%2Fvectors_i32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/613f2420885432aecafb5493e3d0cd3f9a4d67f1/crates%2Fcore_simd%2Fsrc%2Fvectors_i32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_i32.rs?ref=613f2420885432aecafb5493e3d0cd3f9a4d67f1", "patch": "@@ -1,20 +1,24 @@\n define_vector! {\n     #[doc = \"Vector of two `i32` values\"]\n+    #[derive(Eq, Ord, Hash)]\n     struct i32x2([i32; 2]);\n }\n \n define_vector! {\n     #[doc = \"Vector of four `i32` values\"]\n+    #[derive(Eq, Ord, Hash)]\n     struct i32x4([i32; 4]);\n }\n \n define_vector! {\n     #[doc = \"Vector of eight `i32` values\"]\n+    #[derive(Eq, Ord, Hash)]\n     struct i32x8([i32; 8]);\n }\n \n define_vector! {\n     #[doc = \"Vector of 16 `i32` values\"]\n+    #[derive(Eq, Ord, Hash)]\n     struct i32x16([i32; 16]);\n }\n "}, {"sha": "09dd27d94e3462f203431b035c04389aa08fc085", "filename": "crates/core_simd/src/vectors_i64.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/613f2420885432aecafb5493e3d0cd3f9a4d67f1/crates%2Fcore_simd%2Fsrc%2Fvectors_i64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/613f2420885432aecafb5493e3d0cd3f9a4d67f1/crates%2Fcore_simd%2Fsrc%2Fvectors_i64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_i64.rs?ref=613f2420885432aecafb5493e3d0cd3f9a4d67f1", "patch": "@@ -1,15 +1,18 @@\n define_vector! {\n     #[doc = \"Vector of two `i64` values\"]\n+    #[derive(Eq, Ord, Hash)]\n     struct i64x2([i64; 2]);\n }\n \n define_vector! {\n     #[doc = \"Vector of four `i64` values\"]\n+    #[derive(Eq, Ord, Hash)]\n     struct i64x4([i64; 4]);\n }\n \n define_vector! {\n     #[doc = \"Vector of eight `i64` values\"]\n+    #[derive(Eq, Ord, Hash)]\n     struct i64x8([i64; 8]);\n }\n "}, {"sha": "8c9407c0c52c58c300af6ca1ecfec638167e1e64", "filename": "crates/core_simd/src/vectors_i8.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/613f2420885432aecafb5493e3d0cd3f9a4d67f1/crates%2Fcore_simd%2Fsrc%2Fvectors_i8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/613f2420885432aecafb5493e3d0cd3f9a4d67f1/crates%2Fcore_simd%2Fsrc%2Fvectors_i8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_i8.rs?ref=613f2420885432aecafb5493e3d0cd3f9a4d67f1", "patch": "@@ -1,30 +1,36 @@\n define_vector! {\n     #[doc = \"Vector of two `i8` values\"]\n+    #[derive(Eq, Ord, Hash)]\n     struct i8x2([i8; 2]);\n }\n \n define_vector! {\n     #[doc = \"Vector of four `i8` values\"]\n+    #[derive(Eq, Ord, Hash)]\n     struct i8x4([i8; 4]);\n }\n \n define_vector! {\n     #[doc = \"Vector of eight `i8` values\"]\n+    #[derive(Eq, Ord, Hash)]\n     struct i8x8([i8; 8]);\n }\n \n define_vector! {\n     #[doc = \"Vector of 16 `i8` values\"]\n+    #[derive(Eq, Ord, Hash)]\n     struct i8x16([i8; 16]);\n }\n \n define_vector! {\n     #[doc = \"Vector of 32 `i8` values\"]\n+    #[derive(Eq, Ord, Hash)]\n     struct i8x32([i8; 32]);\n }\n \n define_vector! {\n     #[doc = \"Vector of 64 `i8` values\"]\n+    #[derive(Eq, Ord, Hash)]\n     struct i8x64([i8; 64]);\n }\n "}, {"sha": "4512d943d43168759cb72959826bd3cf89f7be4c", "filename": "crates/core_simd/src/vectors_isize.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/613f2420885432aecafb5493e3d0cd3f9a4d67f1/crates%2Fcore_simd%2Fsrc%2Fvectors_isize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/613f2420885432aecafb5493e3d0cd3f9a4d67f1/crates%2Fcore_simd%2Fsrc%2Fvectors_isize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_isize.rs?ref=613f2420885432aecafb5493e3d0cd3f9a4d67f1", "patch": "@@ -1,15 +1,18 @@\n define_vector! {\n     #[doc = \"Vector of two `isize` values\"]\n+    #[derive(Eq, Ord, Hash)]\n     struct isizex2([isize; 2]);\n }\n \n define_vector! {\n     #[doc = \"Vector of four `isize` values\"]\n+    #[derive(Eq, Ord, Hash)]\n     struct isizex4([isize; 4]);\n }\n \n define_vector! {\n     #[doc = \"Vector of eight `isize` values\"]\n+    #[derive(Eq, Ord, Hash)]\n     struct isizex8([isize; 8]);\n }\n "}, {"sha": "8d7418abe4c37f7068e5769712b05080d5ac2c05", "filename": "crates/core_simd/src/vectors_u128.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/613f2420885432aecafb5493e3d0cd3f9a4d67f1/crates%2Fcore_simd%2Fsrc%2Fvectors_u128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/613f2420885432aecafb5493e3d0cd3f9a4d67f1/crates%2Fcore_simd%2Fsrc%2Fvectors_u128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_u128.rs?ref=613f2420885432aecafb5493e3d0cd3f9a4d67f1", "patch": "@@ -1,10 +1,12 @@\n define_vector! {\n     #[doc = \"Vector of two `u128` values\"]\n+    #[derive(Eq, Ord, Hash)]\n     struct u128x2([u128; 2]);\n }\n \n define_vector! {\n     #[doc = \"Vector of four `u128` values\"]\n+    #[derive(Eq, Ord, Hash)]\n     struct u128x4([u128; 4]);\n }\n "}, {"sha": "6b4f3c553924e6cec1d4bfb861d54b3f20c78100", "filename": "crates/core_simd/src/vectors_u16.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/613f2420885432aecafb5493e3d0cd3f9a4d67f1/crates%2Fcore_simd%2Fsrc%2Fvectors_u16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/613f2420885432aecafb5493e3d0cd3f9a4d67f1/crates%2Fcore_simd%2Fsrc%2Fvectors_u16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_u16.rs?ref=613f2420885432aecafb5493e3d0cd3f9a4d67f1", "patch": "@@ -1,25 +1,30 @@\n define_vector! {\n     #[doc = \"Vector of two `u16` values\"]\n+    #[derive(Eq, Ord, Hash)]\n     struct u16x2([u16; 2]);\n }\n \n define_vector! {\n     #[doc = \"Vector of four `u16` values\"]\n+    #[derive(Eq, Ord, Hash)]\n     struct u16x4([u16; 4]);\n }\n \n define_vector! {\n     #[doc = \"Vector of eight `u16` values\"]\n+    #[derive(Eq, Ord, Hash)]\n     struct u16x8([u16; 8]);\n }\n \n define_vector! {\n     #[doc = \"Vector of 16 `u16` values\"]\n+    #[derive(Eq, Ord, Hash)]\n     struct u16x16([u16; 16]);\n }\n \n define_vector! {\n     #[doc = \"Vector of 32 `u16` values\"]\n+    #[derive(Eq, Ord, Hash)]\n     struct u16x32([u16; 32]);\n }\n "}, {"sha": "09aed52e6bb552b4acd1bc325a7ceb1ad9af74ca", "filename": "crates/core_simd/src/vectors_u32.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/613f2420885432aecafb5493e3d0cd3f9a4d67f1/crates%2Fcore_simd%2Fsrc%2Fvectors_u32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/613f2420885432aecafb5493e3d0cd3f9a4d67f1/crates%2Fcore_simd%2Fsrc%2Fvectors_u32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_u32.rs?ref=613f2420885432aecafb5493e3d0cd3f9a4d67f1", "patch": "@@ -1,20 +1,24 @@\n define_vector! {\n     #[doc = \"Vector of two `u32` values\"]\n+    #[derive(Eq, Ord, Hash)]\n     struct u32x2([u32; 2]);\n }\n \n define_vector! {\n     #[doc = \"Vector of four `u32` values\"]\n+    #[derive(Eq, Ord, Hash)]\n     struct u32x4([u32; 4]);\n }\n \n define_vector! {\n     #[doc = \"Vector of eight `u32` values\"]\n+    #[derive(Eq, Ord, Hash)]\n     struct u32x8([u32; 8]);\n }\n \n define_vector! {\n     #[doc = \"Vector of 16 `u32` values\"]\n+    #[derive(Eq, Ord, Hash)]\n     struct u32x16([u32; 16]);\n }\n "}, {"sha": "b19739e6657d1f3605568700bfdf7c7eee618c03", "filename": "crates/core_simd/src/vectors_u64.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/613f2420885432aecafb5493e3d0cd3f9a4d67f1/crates%2Fcore_simd%2Fsrc%2Fvectors_u64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/613f2420885432aecafb5493e3d0cd3f9a4d67f1/crates%2Fcore_simd%2Fsrc%2Fvectors_u64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_u64.rs?ref=613f2420885432aecafb5493e3d0cd3f9a4d67f1", "patch": "@@ -1,15 +1,18 @@\n define_vector! {\n     #[doc = \"Vector of two `u64` values\"]\n+    #[derive(Eq, Ord, Hash)]\n     struct u64x2([u64; 2]);\n }\n \n define_vector! {\n     #[doc = \"Vector of four `u64` values\"]\n+    #[derive(Eq, Ord, Hash)]\n     struct u64x4([u64; 4]);\n }\n \n define_vector! {\n     #[doc = \"Vector of eight `u64` values\"]\n+    #[derive(Eq, Ord, Hash)]\n     struct u64x8([u64; 8]);\n }\n "}, {"sha": "1c31578d0a7ef61a3658c978131402890d8d8867", "filename": "crates/core_simd/src/vectors_u8.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/613f2420885432aecafb5493e3d0cd3f9a4d67f1/crates%2Fcore_simd%2Fsrc%2Fvectors_u8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/613f2420885432aecafb5493e3d0cd3f9a4d67f1/crates%2Fcore_simd%2Fsrc%2Fvectors_u8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_u8.rs?ref=613f2420885432aecafb5493e3d0cd3f9a4d67f1", "patch": "@@ -1,30 +1,36 @@\n define_vector! {\n     #[doc = \"Vector of two `u8` values\"]\n+    #[derive(Eq, Ord, Hash)]\n     struct u8x2([u8; 2]);\n }\n \n define_vector! {\n     #[doc = \"Vector of four `u8` values\"]\n+    #[derive(Eq, Ord, Hash)]\n     struct u8x4([u8; 4]);\n }\n \n define_vector! {\n     #[doc = \"Vector of eight `u8` values\"]\n+    #[derive(Eq, Ord, Hash)]\n     struct u8x8([u8; 8]);\n }\n \n define_vector! {\n     #[doc = \"Vector of 16 `u8` values\"]\n+    #[derive(Eq, Ord, Hash)]\n     struct u8x16([u8; 16]);\n }\n \n define_vector! {\n     #[doc = \"Vector of 32 `u8` values\"]\n+    #[derive(Eq, Ord, Hash)]\n     struct u8x32([u8; 32]);\n }\n \n define_vector! {\n     #[doc = \"Vector of 64 `u8` values\"]\n+    #[derive(Eq, Ord, Hash)]\n     struct u8x64([u8; 64]);\n }\n "}, {"sha": "30c4da8438b49bd4de27c9c3aa75c8892df2ab44", "filename": "crates/core_simd/src/vectors_usize.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/613f2420885432aecafb5493e3d0cd3f9a4d67f1/crates%2Fcore_simd%2Fsrc%2Fvectors_usize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/613f2420885432aecafb5493e3d0cd3f9a4d67f1/crates%2Fcore_simd%2Fsrc%2Fvectors_usize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_usize.rs?ref=613f2420885432aecafb5493e3d0cd3f9a4d67f1", "patch": "@@ -1,15 +1,18 @@\n define_vector! {\n     #[doc = \"Vector of two `usize` values\"]\n+    #[derive(Eq, Ord, Hash)]\n     struct usizex2([usize; 2]);\n }\n \n define_vector! {\n     #[doc = \"Vector of four `usize` values\"]\n+    #[derive(Eq, Ord, Hash)]\n     struct usizex4([usize; 4]);\n }\n \n define_vector! {\n     #[doc = \"Vector of eight `usize` values\"]\n+    #[derive(Eq, Ord, Hash)]\n     struct usizex8([usize; 8]);\n }\n "}]}