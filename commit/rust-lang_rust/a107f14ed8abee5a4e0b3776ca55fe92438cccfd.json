{"sha": "a107f14ed8abee5a4e0b3776ca55fe92438cccfd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExMDdmMTRlZDhhYmVlNWE0ZTBiMzc3NmNhNTVmZTkyNDM4Y2NjZmQ=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-11-21T12:32:40Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-11-21T12:32:40Z"}, "message": "Rustup after layout optimizations", "tree": {"sha": "0de8fdef79c7acfbaa05ab4107153d4564d4198f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0de8fdef79c7acfbaa05ab4107153d4564d4198f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a107f14ed8abee5a4e0b3776ca55fe92438cccfd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAloUHOgACgkQpp+NIls6\n19l3SRAAgJvk2qclJ5LTFlSXaUdzrs/ShJeKsTaVLuylEEr3p+ezn2Tc4UuKULUh\n2WGc0eQtOe0IIrSKcUGpJ0XVkmqusN42D6gAlCvYwa4bFvKiJOkkO6CT+Yezl7r9\nTr9t6oK5u0b9PptUv6o+PNqx/NdlTUl0OxFxQ+wbtI5Dw88vh8/Tsfc/T94WR5tm\nBqDgJQxxZlW3UMx+0YlOMThPsT0IMud77HiUpQ/RotVz6orlWXepSfrNORMFRHvy\nzISU8jbtm2m7Tmjn9adiNTlqve+Lr98Yt2XCjuwRoWzZqydlCOlT4dOlyzWgJXwH\nAG+jhS+rtTNkgt0R2iKmRM5iFMz+Ro2gmgVYdzbkANLcNvY/Hf1g3+JLnx9YzKV3\nytf7ACvbP69RL05nrfhtL/RckEp2FYTka1WLD/8xZd7gwOY/Rbjh9WSG14ymBdCy\nZ2sGuH6+89CXUeyVWozVNrH0+He2vXPdqkc5EeGgaXC3ZSbh+Ctll5Vr4E9Atj/8\nP4cV7cwX4MEEzfIzU+U0c7CeKWjdtd5ZLcl6cmgpFshb8v9aUfBE1c/RVaAtZiDh\n/gwyKwV0ZjLlXt8nyYbyzqwR3MzfHISyHHTX5p1To3q/D2r9Sk2WlkqNwndfH7PL\nYJLupCUvsWknfyoPHzGW8zLVR+fORgmWT4g1hN0XJudjEi9ZC5A=\n=3qP9\n-----END PGP SIGNATURE-----", "payload": "tree 0de8fdef79c7acfbaa05ab4107153d4564d4198f\nparent 6dbfe23c4d1af109c894ff9d7d5da97c025584e5\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1511267560 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1511267560 +0100\n\nRustup after layout optimizations\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a107f14ed8abee5a4e0b3776ca55fe92438cccfd", "html_url": "https://github.com/rust-lang/rust/commit/a107f14ed8abee5a4e0b3776ca55fe92438cccfd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a107f14ed8abee5a4e0b3776ca55fe92438cccfd/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6dbfe23c4d1af109c894ff9d7d5da97c025584e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/6dbfe23c4d1af109c894ff9d7d5da97c025584e5", "html_url": "https://github.com/rust-lang/rust/commit/6dbfe23c4d1af109c894ff9d7d5da97c025584e5"}], "stats": {"total": 122, "additions": 63, "deletions": 59}, "files": [{"sha": "4c17b4db33079f23f9033da8cbd35b4cb8790ffd", "filename": "miri/fn_call.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a107f14ed8abee5a4e0b3776ca55fe92438cccfd/miri%2Ffn_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a107f14ed8abee5a4e0b3776ca55fe92438cccfd/miri%2Ffn_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/miri%2Ffn_call.rs?ref=a107f14ed8abee5a4e0b3776ca55fe92438cccfd", "patch": "@@ -45,6 +45,8 @@ pub trait EvalContextExt<'tcx> {\n         span: Span,\n         sig: ty::FnSig<'tcx>,\n     ) -> EvalResult<'tcx, bool>;\n+\n+    fn write_null(&mut self, dest: Lvalue, dest_ty: Ty<'tcx>) -> EvalResult<'tcx>;\n }\n \n impl<'a, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'tcx, super::Evaluator> {\n@@ -416,10 +418,7 @@ impl<'a, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'tcx, super::Evaluator>\n                 // Figure out how large a pthread TLS key actually is. This is libc::pthread_key_t.\n                 let key_type = args[0].ty.builtin_deref(true, ty::LvaluePreference::NoPreference)\n                                    .ok_or(EvalErrorKind::AbiViolation(\"Wrong signature used for pthread_key_create: First argument must be a raw pointer.\".to_owned()))?.ty;\n-                let key_size = {\n-                    let layout = self.type_layout(key_type)?;\n-                    layout.size(&self.tcx.data_layout)\n-                };\n+                let key_size = self.type_layout(key_type)?.size;\n \n                 // Create key and write it into the memory where key_ptr wants it\n                 let key = self.memory.create_tls_key(dtor) as u128;\n@@ -655,4 +654,8 @@ impl<'a, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'tcx, super::Evaluator>\n         self.goto_block(dest_block);\n         return Ok(());\n     }\n+\n+    fn write_null(&mut self, dest: Lvalue, dest_ty: Ty<'tcx>) -> EvalResult<'tcx> {\n+        self.write_primval(dest, PrimVal::Bytes(0), dest_ty)\n+    }\n }"}, {"sha": "79dc3c7fe2abbf3b2851fa029f2efc62b677088a", "filename": "miri/intrinsic.rs", "status": "modified", "additions": 52, "deletions": 50, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/a107f14ed8abee5a4e0b3776ca55fe92438cccfd/miri%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a107f14ed8abee5a4e0b3776ca55fe92438cccfd/miri%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/miri%2Fintrinsic.rs?ref=a107f14ed8abee5a4e0b3776ca55fe92438cccfd", "patch": "@@ -1,7 +1,7 @@\n use rustc::mir;\n use rustc::traits::Reveal;\n-use rustc::ty::layout::Layout;\n-use rustc::ty::{self, Ty};\n+use rustc::ty::layout::TyLayout;\n+use rustc::ty;\n \n use rustc::mir::interpret::{EvalResult, Lvalue, LvalueExtra, PrimVal, PrimValKind, Value, Pointer,\n                             HasMemory, AccessKind, EvalContext, PtrAndAlign, ValTy};\n@@ -14,8 +14,7 @@ pub trait EvalContextExt<'tcx> {\n         instance: ty::Instance<'tcx>,\n         args: &[ValTy<'tcx>],\n         dest: Lvalue,\n-        dest_ty: Ty<'tcx>,\n-        dest_layout: &'tcx Layout,\n+        dest_layout: TyLayout<'tcx>,\n         target: mir::BasicBlock,\n     ) -> EvalResult<'tcx>;\n }\n@@ -26,8 +25,7 @@ impl<'a, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'tcx, super::Evaluator>\n         instance: ty::Instance<'tcx>,\n         args: &[ValTy<'tcx>],\n         dest: Lvalue,\n-        dest_ty: Ty<'tcx>,\n-        dest_layout: &'tcx Layout,\n+        dest_layout: TyLayout<'tcx>,\n         target: mir::BasicBlock,\n     ) -> EvalResult<'tcx> {\n         let substs = instance.substs;\n@@ -37,7 +35,7 @@ impl<'a, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'tcx, super::Evaluator>\n             \"align_offset\" => {\n                 // FIXME: return a real value in case the target allocation has an\n                 // alignment bigger than the one requested\n-                self.write_primval(dest, PrimVal::Bytes(u128::max_value()), dest_ty)?;\n+                self.write_primval(dest, PrimVal::Bytes(u128::max_value()), dest_layout.ty)?;\n             },\n \n             \"add_with_overflow\" => {\n@@ -46,7 +44,7 @@ impl<'a, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'tcx, super::Evaluator>\n                     args[0],\n                     args[1],\n                     dest,\n-                    dest_ty,\n+                    dest_layout.ty,\n                 )?\n             }\n \n@@ -56,7 +54,7 @@ impl<'a, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'tcx, super::Evaluator>\n                     args[0],\n                     args[1],\n                     dest,\n-                    dest_ty,\n+                    dest_layout.ty,\n                 )?\n             }\n \n@@ -66,15 +64,15 @@ impl<'a, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'tcx, super::Evaluator>\n                     args[0],\n                     args[1],\n                     dest,\n-                    dest_ty,\n+                    dest_layout.ty,\n                 )?\n             }\n \n             \"arith_offset\" => {\n                 let offset = self.value_to_primval(args[1])?.to_i128()? as i64;\n                 let ptr = args[0].into_ptr(&self.memory)?;\n                 let result_ptr = self.wrapping_pointer_offset(ptr, substs.type_at(0), offset)?;\n-                self.write_ptr(dest, result_ptr, dest_ty)?;\n+                self.write_ptr(dest, result_ptr, dest_layout.ty)?;\n             }\n \n             \"assume\" => {\n@@ -139,8 +137,11 @@ impl<'a, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'tcx, super::Evaluator>\n                     Value::ByValPair(..) => bug!(\"atomic_cxchg doesn't work with nonprimitives\"),\n                 };\n                 let (val, _) = self.binary_op(mir::BinOp::Eq, old, ty, expect_old, ty)?;\n-                let dest = self.force_allocation(dest)?.to_ptr()?;\n-                self.write_pair_to_ptr(old, val, dest, dest_ty)?;\n+                let valty = ValTy {\n+                    value: Value::ByValPair(old, val),\n+                    ty: dest_layout.ty,\n+                };\n+                self.write_value(valty, dest)?;\n                 self.write_primval(\n                     Lvalue::from_primval_ptr(ptr),\n                     change,\n@@ -238,9 +239,10 @@ impl<'a, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'tcx, super::Evaluator>\n \n             \"discriminant_value\" => {\n                 let ty = substs.type_at(0);\n-                let adt_ptr = args[0].into_ptr(&self.memory)?.to_ptr()?;\n-                let discr_val = self.read_discriminant_value(adt_ptr, ty)?;\n-                self.write_primval(dest, PrimVal::Bytes(discr_val), dest_ty)?;\n+                let adt_ptr = args[0].into_ptr(&self.memory)?;\n+                let lval = Lvalue::from_primval_ptr(adt_ptr);\n+                let discr_val = self.read_discriminant_value(lval, ty)?;\n+                self.write_primval(dest, PrimVal::Bytes(discr_val), dest_layout.ty)?;\n             }\n \n             \"sinf32\" | \"fabsf32\" | \"cosf32\" | \"sqrtf32\" | \"expf32\" | \"exp2f32\" | \"logf32\" |\n@@ -262,7 +264,7 @@ impl<'a, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'tcx, super::Evaluator>\n                     \"truncf32\" => f.trunc(),\n                     _ => bug!(),\n                 };\n-                self.write_primval(dest, PrimVal::Bytes(f.to_bits() as u128), dest_ty)?;\n+                self.write_primval(dest, PrimVal::Bytes(f.to_bits() as u128), dest_layout.ty)?;\n             }\n \n             \"sinf64\" | \"fabsf64\" | \"cosf64\" | \"sqrtf64\" | \"expf64\" | \"exp2f64\" | \"logf64\" |\n@@ -284,7 +286,7 @@ impl<'a, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'tcx, super::Evaluator>\n                     \"truncf64\" => f.trunc(),\n                     _ => bug!(),\n                 };\n-                self.write_primval(dest, PrimVal::Bytes(f.to_bits() as u128), dest_ty)?;\n+                self.write_primval(dest, PrimVal::Bytes(f.to_bits() as u128), dest_layout.ty)?;\n             }\n \n             \"fadd_fast\" | \"fsub_fast\" | \"fmul_fast\" | \"fdiv_fast\" | \"frem_fast\" => {\n@@ -300,13 +302,13 @@ impl<'a, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'tcx, super::Evaluator>\n                     _ => bug!(),\n                 };\n                 let result = self.binary_op(op, a, ty, b, ty)?;\n-                self.write_primval(dest, result.0, dest_ty)?;\n+                self.write_primval(dest, result.0, dest_layout.ty)?;\n             }\n \n             \"likely\" | \"unlikely\" | \"forget\" => {}\n \n             \"init\" => {\n-                let size = self.type_size(dest_ty)?.expect(\"cannot zero unsized value\");\n+                let size = self.type_size(dest_layout.ty)?.expect(\"cannot zero unsized value\");\n                 let init = |this: &mut Self, val: Value| {\n                     let zero_val = match val {\n                         Value::ByRef(PtrAndAlign { ptr, .. }) => {\n@@ -316,10 +318,10 @@ impl<'a, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'tcx, super::Evaluator>\n                         }\n                         // TODO(solson): Revisit this, it's fishy to check for Undef here.\n                         Value::ByVal(PrimVal::Undef) => {\n-                            match this.ty_to_primval_kind(dest_ty) {\n+                            match this.ty_to_primval_kind(dest_layout.ty) {\n                                 Ok(_) => Value::ByVal(PrimVal::Bytes(0)),\n                                 Err(_) => {\n-                                    let ptr = this.alloc_ptr_with_substs(dest_ty, substs)?;\n+                                    let ptr = this.alloc_ptr_with_substs(dest_layout.ty, substs)?;\n                                     let ptr = Pointer::from(PrimVal::Ptr(ptr));\n                                     this.memory.write_repeat(ptr, 0, size)?;\n                                     Value::by_ref(ptr)\n@@ -349,15 +351,15 @@ impl<'a, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'tcx, super::Evaluator>\n                 let elem_ty = substs.type_at(0);\n                 let elem_align = self.type_align(elem_ty)?;\n                 let align_val = PrimVal::from_u128(elem_align as u128);\n-                self.write_primval(dest, align_val, dest_ty)?;\n+                self.write_primval(dest, align_val, dest_layout.ty)?;\n             }\n \n             \"pref_align_of\" => {\n                 let ty = substs.type_at(0);\n                 let layout = self.type_layout(ty)?;\n-                let align = layout.align(&self.tcx.data_layout).pref();\n+                let align = layout.align.pref();\n                 let align_val = PrimVal::from_u128(align as u128);\n-                self.write_primval(dest, align_val, dest_ty)?;\n+                self.write_primval(dest, align_val, dest_layout.ty)?;\n             }\n \n             \"move_val_init\" => {\n@@ -373,15 +375,15 @@ impl<'a, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'tcx, super::Evaluator>\n                 self.write_primval(\n                     dest,\n                     PrimVal::from_bool(needs_drop),\n-                    dest_ty,\n+                    dest_layout.ty,\n                 )?;\n             }\n \n             \"offset\" => {\n                 let offset = self.value_to_primval(args[1])?.to_i128()? as i64;\n                 let ptr = args[0].into_ptr(&self.memory)?;\n                 let result_ptr = self.pointer_offset(ptr, substs.type_at(0), offset)?;\n-                self.write_ptr(dest, result_ptr, dest_ty)?;\n+                self.write_ptr(dest, result_ptr, dest_layout.ty)?;\n             }\n \n             \"overflowing_sub\" => {\n@@ -390,7 +392,7 @@ impl<'a, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'tcx, super::Evaluator>\n                     args[0],\n                     args[1],\n                     dest,\n-                    dest_ty,\n+                    dest_layout.ty,\n                 )?;\n             }\n \n@@ -400,7 +402,7 @@ impl<'a, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'tcx, super::Evaluator>\n                     args[0],\n                     args[1],\n                     dest,\n-                    dest_ty,\n+                    dest_layout.ty,\n                 )?;\n             }\n \n@@ -410,7 +412,7 @@ impl<'a, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'tcx, super::Evaluator>\n                     args[0],\n                     args[1],\n                     dest,\n-                    dest_ty,\n+                    dest_layout.ty,\n                 )?;\n             }\n \n@@ -422,7 +424,7 @@ impl<'a, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'tcx, super::Evaluator>\n                 self.write_primval(\n                     dest,\n                     PrimVal::Bytes(f.powf(f2).to_bits() as u128),\n-                    dest_ty,\n+                    dest_layout.ty,\n                 )?;\n             }\n \n@@ -434,7 +436,7 @@ impl<'a, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'tcx, super::Evaluator>\n                 self.write_primval(\n                     dest,\n                     PrimVal::Bytes(f.powf(f2).to_bits() as u128),\n-                    dest_ty,\n+                    dest_layout.ty,\n                 )?;\n             }\n \n@@ -448,7 +450,7 @@ impl<'a, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'tcx, super::Evaluator>\n                 self.write_primval(\n                     dest,\n                     PrimVal::Bytes((a * b + c).to_bits() as u128),\n-                    dest_ty,\n+                    dest_layout.ty,\n                 )?;\n             }\n \n@@ -462,7 +464,7 @@ impl<'a, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'tcx, super::Evaluator>\n                 self.write_primval(\n                     dest,\n                     PrimVal::Bytes((a * b + c).to_bits() as u128),\n-                    dest_ty,\n+                    dest_layout.ty,\n                 )?;\n             }\n \n@@ -473,7 +475,7 @@ impl<'a, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'tcx, super::Evaluator>\n                 self.write_primval(\n                     dest,\n                     PrimVal::Bytes(f.powi(i as i32).to_bits() as u128),\n-                    dest_ty,\n+                    dest_layout.ty,\n                 )?;\n             }\n \n@@ -484,7 +486,7 @@ impl<'a, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'tcx, super::Evaluator>\n                 self.write_primval(\n                     dest,\n                     PrimVal::Bytes(f.powi(i as i32).to_bits() as u128),\n-                    dest_ty,\n+                    dest_layout.ty,\n                 )?;\n             }\n \n@@ -493,16 +495,16 @@ impl<'a, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'tcx, super::Evaluator>\n                 let size = self.type_size(ty)?.expect(\n                     \"size_of intrinsic called on unsized value\",\n                 ) as u128;\n-                self.write_primval(dest, PrimVal::from_u128(size), dest_ty)?;\n+                self.write_primval(dest, PrimVal::from_u128(size), dest_layout.ty)?;\n             }\n \n             \"size_of_val\" => {\n                 let ty = substs.type_at(0);\n                 let (size, _) = self.size_and_align_of_dst(ty, args[0].value)?;\n                 self.write_primval(\n                     dest,\n-                    PrimVal::from_u128(size as u128),\n-                    dest_ty,\n+                    PrimVal::from_u128(size.bytes() as u128),\n+                    dest_layout.ty,\n                 )?;\n             }\n \n@@ -512,21 +514,21 @@ impl<'a, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'tcx, super::Evaluator>\n                 let (_, align) = self.size_and_align_of_dst(ty, args[0].value)?;\n                 self.write_primval(\n                     dest,\n-                    PrimVal::from_u128(align as u128),\n-                    dest_ty,\n+                    PrimVal::from_u128(align.pref() as u128),\n+                    dest_layout.ty,\n                 )?;\n             }\n \n             \"type_name\" => {\n                 let ty = substs.type_at(0);\n                 let ty_name = ty.to_string();\n                 let value = self.str_to_value(&ty_name)?;\n-                self.write_value(ValTy { value, ty: dest_ty }, dest)?;\n+                self.write_value(ValTy { value, ty: dest_layout.ty }, dest)?;\n             }\n             \"type_id\" => {\n                 let ty = substs.type_at(0);\n                 let n = self.tcx.type_id_hash(ty);\n-                self.write_primval(dest, PrimVal::Bytes(n as u128), dest_ty)?;\n+                self.write_primval(dest, PrimVal::Bytes(n as u128), dest_layout.ty)?;\n             }\n \n             \"transmute\" => {\n@@ -542,7 +544,7 @@ impl<'a, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'tcx, super::Evaluator>\n             }\n \n             \"unchecked_shl\" => {\n-                let bits = self.type_size(dest_ty)?.expect(\n+                let bits = self.type_size(dest_layout.ty)?.expect(\n                     \"intrinsic can't be called on unsized type\",\n                 ) as u128 * 8;\n                 let rhs = self.value_to_primval(args[1])?\n@@ -557,12 +559,12 @@ impl<'a, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'tcx, super::Evaluator>\n                     args[0],\n                     args[1],\n                     dest,\n-                    dest_ty,\n+                    dest_layout.ty,\n                 )?;\n             }\n \n             \"unchecked_shr\" => {\n-                let bits = self.type_size(dest_ty)?.expect(\n+                let bits = self.type_size(dest_layout.ty)?.expect(\n                     \"intrinsic can't be called on unsized type\",\n                 ) as u128 * 8;\n                 let rhs = self.value_to_primval(args[1])?\n@@ -577,7 +579,7 @@ impl<'a, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'tcx, super::Evaluator>\n                     args[0],\n                     args[1],\n                     dest,\n-                    dest_ty,\n+                    dest_layout.ty,\n                 )?;\n             }\n \n@@ -592,7 +594,7 @@ impl<'a, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'tcx, super::Evaluator>\n                     args[0],\n                     args[1],\n                     dest,\n-                    dest_ty,\n+                    dest_layout.ty,\n                 )?;\n             }\n \n@@ -607,12 +609,12 @@ impl<'a, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'tcx, super::Evaluator>\n                     args[0],\n                     args[1],\n                     dest,\n-                    dest_ty,\n+                    dest_layout.ty,\n                 )?;\n             }\n \n             \"uninit\" => {\n-                let size = dest_layout.size(&self.tcx.data_layout).bytes();\n+                let size = dest_layout.size.bytes();\n                 let uninit = |this: &mut Self, val: Value| match val {\n                     Value::ByRef(PtrAndAlign { ptr, .. }) => {\n                         this.memory.mark_definedness(ptr, size, false)?;"}, {"sha": "e5566bfe947192ee9bbd81f9579fadaba9d7b5a5", "filename": "miri/lib.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a107f14ed8abee5a4e0b3776ca55fe92438cccfd/miri%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a107f14ed8abee5a4e0b3776ca55fe92438cccfd/miri%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/miri%2Flib.rs?ref=a107f14ed8abee5a4e0b3776ca55fe92438cccfd", "patch": "@@ -11,7 +11,7 @@ extern crate rustc;\n extern crate syntax;\n \n use rustc::ty::{self, TyCtxt};\n-use rustc::ty::layout::Layout;\n+use rustc::ty::layout::TyLayout;\n use rustc::hir::def_id::DefId;\n use rustc::mir;\n use rustc::traits;\n@@ -50,7 +50,7 @@ pub fn eval_main<'a, 'tcx: 'a>(\n         let main_mir = ecx.load_mir(main_instance.def)?;\n         let mut cleanup_ptr = None; // Pointer to be deallocated when we are done\n \n-        if !main_mir.return_ty.is_nil() || main_mir.arg_count != 0 {\n+        if !main_mir.return_ty().is_nil() || main_mir.arg_count != 0 {\n             return err!(Unimplemented(\n                 \"miri does not support main functions without `fn()` type signatures\"\n                     .to_owned(),\n@@ -208,11 +208,10 @@ impl<'tcx> Machine<'tcx> for Evaluator {\n         instance: ty::Instance<'tcx>,\n         args: &[ValTy<'tcx>],\n         dest: Lvalue,\n-        dest_ty: ty::Ty<'tcx>,\n-        dest_layout: &'tcx Layout,\n+        dest_layout: TyLayout<'tcx>,\n         target: mir::BasicBlock,\n     ) -> EvalResult<'tcx> {\n-        ecx.call_intrinsic(instance, args, dest, dest_ty, dest_layout, target)\n+        ecx.call_intrinsic(instance, args, dest, dest_layout, target)\n     }\n \n     fn try_ptr_op<'a>("}]}