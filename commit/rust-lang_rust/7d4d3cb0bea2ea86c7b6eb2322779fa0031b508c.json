{"sha": "7d4d3cb0bea2ea86c7b6eb2322779fa0031b508c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkNGQzY2IwYmVhMmVhODZjN2I2ZWIyMzIyNzc5ZmEwMDMxYjUwOGM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-04-13T08:20:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-04-13T08:20:15Z"}, "message": "Auto merge of #32726 - asomers:master, r=alexcrichton\n\nFix stack overflow detection on FreeBSD", "tree": {"sha": "246d7795daa9a66f61eeae0c5469359a1dfadb6e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/246d7795daa9a66f61eeae0c5469359a1dfadb6e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d4d3cb0bea2ea86c7b6eb2322779fa0031b508c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d4d3cb0bea2ea86c7b6eb2322779fa0031b508c", "html_url": "https://github.com/rust-lang/rust/commit/7d4d3cb0bea2ea86c7b6eb2322779fa0031b508c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d4d3cb0bea2ea86c7b6eb2322779fa0031b508c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b71f8d1417423d933dfd4f74d5d4d167b85f77e", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b71f8d1417423d933dfd4f74d5d4d167b85f77e", "html_url": "https://github.com/rust-lang/rust/commit/4b71f8d1417423d933dfd4f74d5d4d167b85f77e"}, {"sha": "78ea972b9ff4a2c3eaa0328f6fa8e7038e8ca9d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/78ea972b9ff4a2c3eaa0328f6fa8e7038e8ca9d1", "html_url": "https://github.com/rust-lang/rust/commit/78ea972b9ff4a2c3eaa0328f6fa8e7038e8ca9d1"}], "stats": {"total": 32, "additions": 25, "deletions": 7}, "files": [{"sha": "22d47ba0f620d9c7349cdaa09e0f6f1e675c7cf9", "filename": "src/libstd/sys/unix/stack_overflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d4d3cb0bea2ea86c7b6eb2322779fa0031b508c/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d4d3cb0bea2ea86c7b6eb2322779fa0031b508c/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs?ref=7d4d3cb0bea2ea86c7b6eb2322779fa0031b508c", "patch": "@@ -64,7 +64,7 @@ mod imp {\n     unsafe fn siginfo_si_addr(info: *mut libc::siginfo_t) -> usize {\n         #[repr(C)]\n         struct siginfo_t {\n-            a: [libc::c_int; 3], // si_signo, si_code, si_errno,\n+            a: [libc::c_int; 3], // si_signo, si_errno, si_code\n             si_addr: *mut libc::c_void,\n         }\n "}, {"sha": "cb34d1a5fbcd113b42a82bb8552b71764ea22960", "filename": "src/libstd/sys/unix/thread.rs", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7d4d3cb0bea2ea86c7b6eb2322779fa0031b508c/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d4d3cb0bea2ea86c7b6eb2322779fa0031b508c/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread.rs?ref=7d4d3cb0bea2ea86c7b6eb2322779fa0031b508c", "patch": "@@ -164,6 +164,7 @@ impl Drop for Thread {\n }\n \n #[cfg(all(not(all(target_os = \"linux\", not(target_env = \"musl\"))),\n+          not(target_os = \"freebsd\"),\n           not(target_os = \"macos\"),\n           not(target_os = \"bitrig\"),\n           not(all(target_os = \"netbsd\", not(target_vendor = \"rumprun\"))),\n@@ -177,6 +178,7 @@ pub mod guard {\n \n \n #[cfg(any(all(target_os = \"linux\", not(target_env = \"musl\")),\n+          target_os = \"freebsd\",\n           target_os = \"macos\",\n           target_os = \"bitrig\",\n           all(target_os = \"netbsd\", not(target_vendor = \"rumprun\")),\n@@ -199,12 +201,17 @@ pub mod guard {\n         current().map(|s| s as *mut libc::c_void)\n     }\n \n-    #[cfg(any(target_os = \"linux\", target_os = \"android\", target_os = \"netbsd\"))]\n+    #[cfg(any(target_os = \"android\", target_os = \"freebsd\",\n+              target_os = \"linux\", target_os = \"netbsd\"))]\n     unsafe fn get_stack_start() -> Option<*mut libc::c_void> {\n         let mut ret = None;\n         let mut attr: libc::pthread_attr_t = ::mem::zeroed();\n         assert_eq!(libc::pthread_attr_init(&mut attr), 0);\n-        if libc::pthread_getattr_np(libc::pthread_self(), &mut attr) == 0 {\n+        #[cfg(target_os = \"freebsd\")]\n+            let e = libc::pthread_attr_get_np(libc::pthread_self(), &mut attr);\n+        #[cfg(not(target_os = \"freebsd\"))]\n+            let e = libc::pthread_getattr_np(libc::pthread_self(), &mut attr);\n+        if e == 0 {\n             let mut stackaddr = ::ptr::null_mut();\n             let mut stacksize = 0;\n             assert_eq!(libc::pthread_attr_getstack(&attr, &mut stackaddr,\n@@ -248,7 +255,11 @@ pub mod guard {\n             panic!(\"failed to allocate a guard page\");\n         }\n \n-        let offset = if cfg!(target_os = \"linux\") {2} else {1};\n+        let offset = if cfg!(any(target_os = \"linux\", target_os = \"freebsd\")) {\n+            2\n+        } else {\n+            1\n+        };\n \n         Some(stackaddr as usize + offset * psize)\n     }\n@@ -282,12 +293,17 @@ pub mod guard {\n         })\n     }\n \n-    #[cfg(any(target_os = \"linux\", target_os = \"android\", target_os = \"netbsd\"))]\n+    #[cfg(any(target_os = \"android\", target_os = \"freebsd\",\n+              target_os = \"linux\", target_os = \"netbsd\"))]\n     pub unsafe fn current() -> Option<usize> {\n         let mut ret = None;\n         let mut attr: libc::pthread_attr_t = ::mem::zeroed();\n         assert_eq!(libc::pthread_attr_init(&mut attr), 0);\n-        if libc::pthread_getattr_np(libc::pthread_self(), &mut attr) == 0 {\n+        #[cfg(target_os = \"freebsd\")]\n+            let e = libc::pthread_attr_get_np(libc::pthread_self(), &mut attr);\n+        #[cfg(not(target_os = \"freebsd\"))]\n+            let e = libc::pthread_getattr_np(libc::pthread_self(), &mut attr);\n+        if e == 0 {\n             let mut guardsize = 0;\n             assert_eq!(libc::pthread_attr_getguardsize(&attr, &mut guardsize), 0);\n             if guardsize == 0 {\n@@ -298,7 +314,9 @@ pub mod guard {\n             assert_eq!(libc::pthread_attr_getstack(&attr, &mut stackaddr,\n                                                    &mut size), 0);\n \n-            ret = if cfg!(target_os = \"netbsd\") {\n+            ret = if cfg!(target_os = \"freebsd\") {\n+                Some(stackaddr as usize - guardsize as usize)\n+            } else if cfg!(target_os = \"netbsd\") {\n                 Some(stackaddr as usize)\n             } else {\n                 Some(stackaddr as usize + guardsize as usize)"}]}