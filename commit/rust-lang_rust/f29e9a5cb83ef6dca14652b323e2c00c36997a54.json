{"sha": "f29e9a5cb83ef6dca14652b323e2c00c36997a54", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyOWU5YTVjYjgzZWY2ZGNhMTQ2NTJiMzIzZTJjMDBjMzY5OTdhNTQ=", "commit": {"author": {"name": "Alexey Shmalko", "email": "rasen.dubi@gmail.com", "date": "2019-04-24T22:44:28Z"}, "committer": {"name": "Alexey Shmalko", "email": "rasen.dubi@gmail.com", "date": "2019-04-24T23:06:38Z"}, "message": "Handle common assert! misuses", "tree": {"sha": "0457791806a52eb7f972a29572c639f265d16775", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0457791806a52eb7f972a29572c639f265d16775"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f29e9a5cb83ef6dca14652b323e2c00c36997a54", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEE3PPB2N619bhpsT2i3O97zOswZsMFAlzA7AIACgkQ3O97zOsw\nZsO1JQf9HzMIEsjr8Ef2jbr2k3RFEZ/ux7/X+/AQc9/tj5ayvIYakDyVBUiRc8BR\n0uyjhjRM+lN37ph0gO848/2WwX8Os+8wsvugICC3VHWOQLJ62aJR6xArERjzcX4b\nMSnGfZ+rxO76eIEem6hj5MOQu5rqGNXNpH1ydnH4dOGI1i385PXXDeAgolIxTwyG\nvI/PZoLTcTlBAzokwDDFc6Q0UWFjwgDPk1k/gwpzLq3l9AKfxqiAC20NqXhh2kdv\n5SjBK5tCZp2Ta3QKTNIBmfSqLb2l2MKl3lpepkJA1GydvdzEiJuIoUdX/yq5hqmO\ni6L7TY0vBSJhv4FG+Q8jQsC9OgUZ8w==\n=d6R6\n-----END PGP SIGNATURE-----", "payload": "tree 0457791806a52eb7f972a29572c639f265d16775\nparent dfc08610850bc05a3bc31699b592d789a3c71911\nauthor Alexey Shmalko <rasen.dubi@gmail.com> 1556145868 +0300\ncommitter Alexey Shmalko <rasen.dubi@gmail.com> 1556147198 +0300\n\nHandle common assert! misuses\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f29e9a5cb83ef6dca14652b323e2c00c36997a54", "html_url": "https://github.com/rust-lang/rust/commit/f29e9a5cb83ef6dca14652b323e2c00c36997a54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f29e9a5cb83ef6dca14652b323e2c00c36997a54/comments", "author": {"login": "rasendubi", "id": 1366419, "node_id": "MDQ6VXNlcjEzNjY0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1366419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rasendubi", "html_url": "https://github.com/rasendubi", "followers_url": "https://api.github.com/users/rasendubi/followers", "following_url": "https://api.github.com/users/rasendubi/following{/other_user}", "gists_url": "https://api.github.com/users/rasendubi/gists{/gist_id}", "starred_url": "https://api.github.com/users/rasendubi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rasendubi/subscriptions", "organizations_url": "https://api.github.com/users/rasendubi/orgs", "repos_url": "https://api.github.com/users/rasendubi/repos", "events_url": "https://api.github.com/users/rasendubi/events{/privacy}", "received_events_url": "https://api.github.com/users/rasendubi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rasendubi", "id": 1366419, "node_id": "MDQ6VXNlcjEzNjY0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1366419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rasendubi", "html_url": "https://github.com/rasendubi", "followers_url": "https://api.github.com/users/rasendubi/followers", "following_url": "https://api.github.com/users/rasendubi/following{/other_user}", "gists_url": "https://api.github.com/users/rasendubi/gists{/gist_id}", "starred_url": "https://api.github.com/users/rasendubi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rasendubi/subscriptions", "organizations_url": "https://api.github.com/users/rasendubi/orgs", "repos_url": "https://api.github.com/users/rasendubi/repos", "events_url": "https://api.github.com/users/rasendubi/events{/privacy}", "received_events_url": "https://api.github.com/users/rasendubi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfc08610850bc05a3bc31699b592d789a3c71911", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfc08610850bc05a3bc31699b592d789a3c71911", "html_url": "https://github.com/rust-lang/rust/commit/dfc08610850bc05a3bc31699b592d789a3c71911"}], "stats": {"total": 124, "additions": 109, "deletions": 15}, "files": [{"sha": "cd69733571d5af6a12f4d9b6c8f9ad161e337d44", "filename": "src/libsyntax_ext/assert.rs", "status": "modified", "additions": 60, "deletions": 14, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/f29e9a5cb83ef6dca14652b323e2c00c36997a54/src%2Flibsyntax_ext%2Fassert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f29e9a5cb83ef6dca14652b323e2c00c36997a54/src%2Flibsyntax_ext%2Fassert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fassert.rs?ref=f29e9a5cb83ef6dca14652b323e2c00c36997a54", "patch": "@@ -1,10 +1,11 @@\n-use errors::DiagnosticBuilder;\n+use errors::{Applicability, DiagnosticBuilder};\n \n use syntax::ast::{self, *};\n use syntax::source_map::Spanned;\n use syntax::ext::base::*;\n use syntax::ext::build::AstBuilder;\n use syntax::parse::token;\n+use syntax::parse::parser::Parser;\n use syntax::print::pprust;\n use syntax::ptr::P;\n use syntax::symbol::Symbol;\n@@ -74,24 +75,69 @@ fn parse_assert<'a>(\n         return Err(err);\n     }\n \n-    let assert = Assert {\n-        cond_expr: parser.parse_expr()?,\n-        custom_message: if parser.eat(&token::Comma) {\n-            let ts = parser.parse_tokens();\n-            if !ts.is_empty() {\n-                Some(ts)\n-            } else {\n-                None\n-            }\n-        } else {\n-            None\n-        },\n+    let cond_expr = parser.parse_expr()?;\n+\n+    // Some crates use the `assert!` macro in the following form (note extra semicolon):\n+    //\n+    // assert!(\n+    //     my_function();\n+    // );\n+    //\n+    // Warn about semicolon and suggest removing it. Eventually, this should be turned into an\n+    // error.\n+    if parser.token == token::Semi {\n+        let mut err = cx.struct_span_warn(sp, \"macro requires an expression as an argument\");\n+        err.span_suggestion(\n+            parser.span,\n+            \"try removing semicolon\",\n+            String::new(),\n+            Applicability::MaybeIncorrect\n+        );\n+        err.note(\"this is going to be an error in the future\");\n+        err.emit();\n+\n+        parser.bump();\n+    }\n+\n+    // Some crates use the `assert!` macro in the following form (note missing comma before\n+    // message):\n+    //\n+    // assert!(true \"error message\");\n+    //\n+    // Parse this as an actual message, and suggest inserting a comma. Eventually, this should be\n+    // turned into an error.\n+    let custom_message = if let token::Literal(token::Lit::Str_(_), _) = parser.token {\n+        let mut err = cx.struct_span_warn(parser.span, \"unexpected string literal\");\n+        let comma_span = cx.source_map().next_point(parser.prev_span);\n+        err.span_suggestion_short(\n+            comma_span,\n+            \"try adding a comma\",\n+            \", \".to_string(),\n+            Applicability::MaybeIncorrect\n+        );\n+        err.note(\"this is going to be an error in the future\");\n+        err.emit();\n+\n+        parse_custom_message(&mut parser)\n+    } else if parser.eat(&token::Comma) {\n+        parse_custom_message(&mut parser)\n+    } else {\n+        None\n     };\n \n     if parser.token != token::Eof {\n         parser.expect_one_of(&[], &[])?;\n         unreachable!();\n     }\n \n-    Ok(assert)\n+    Ok(Assert { cond_expr, custom_message })\n+}\n+\n+fn parse_custom_message<'a>(parser: &mut Parser<'a>) -> Option<TokenStream> {\n+    let ts = parser.parse_tokens();\n+    if !ts.is_empty() {\n+        Some(ts)\n+    } else {\n+        None\n+    }\n }"}, {"sha": "676ae05bf0fa67b4c1516408ca6a1636651338ec", "filename": "src/test/ui/macros/assert-trailing-junk.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f29e9a5cb83ef6dca14652b323e2c00c36997a54/src%2Ftest%2Fui%2Fmacros%2Fassert-trailing-junk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f29e9a5cb83ef6dca14652b323e2c00c36997a54/src%2Ftest%2Fui%2Fmacros%2Fassert-trailing-junk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fassert-trailing-junk.rs?ref=f29e9a5cb83ef6dca14652b323e2c00c36997a54", "patch": "@@ -11,4 +11,14 @@ fn main() {\n \n     assert!(true, \"whatever\" blah);\n     //~^ ERROR no rules expected\n+\n+    assert!(true \"whatever\" blah);\n+    //~^ WARN unexpected string literal\n+    //~^^ ERROR no rules expected\n+\n+    assert!(true;);\n+    //~^ WARN macro requires an expression\n+\n+    assert!(false || true \"error message\");\n+    //~^ WARN unexpected string literal\n }"}, {"sha": "6fc0a278461097b3c68b1cafe4abe9b59d3348cd", "filename": "src/test/ui/macros/assert-trailing-junk.stderr", "status": "modified", "additions": 39, "deletions": 1, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/f29e9a5cb83ef6dca14652b323e2c00c36997a54/src%2Ftest%2Fui%2Fmacros%2Fassert-trailing-junk.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f29e9a5cb83ef6dca14652b323e2c00c36997a54/src%2Ftest%2Fui%2Fmacros%2Fassert-trailing-junk.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fassert-trailing-junk.stderr?ref=f29e9a5cb83ef6dca14652b323e2c00c36997a54", "patch": "@@ -18,5 +18,43 @@ LL |     assert!(true, \"whatever\" blah);\n    |                             |\n    |                             help: missing comma here\n \n-error: aborting due to 3 previous errors\n+warning: unexpected string literal\n+  --> $DIR/assert-trailing-junk.rs:15:18\n+   |\n+LL |     assert!(true \"whatever\" blah);\n+   |                 -^^^^^^^^^^\n+   |                 |\n+   |                 help: try adding a comma\n+   |\n+   = note: this is going to be an error in the future\n+\n+error: no rules expected the token `blah`\n+  --> $DIR/assert-trailing-junk.rs:15:29\n+   |\n+LL |     assert!(true \"whatever\" blah);\n+   |                            -^^^^ no rules expected this token in macro call\n+   |                            |\n+   |                            help: missing comma here\n+\n+warning: macro requires an expression as an argument\n+  --> $DIR/assert-trailing-junk.rs:19:5\n+   |\n+LL |     assert!(true;);\n+   |     ^^^^^^^^^^^^-^^\n+   |                 |\n+   |                 help: try removing semicolon\n+   |\n+   = note: this is going to be an error in the future\n+\n+warning: unexpected string literal\n+  --> $DIR/assert-trailing-junk.rs:22:27\n+   |\n+LL |     assert!(false || true \"error message\");\n+   |                          -^^^^^^^^^^^^^^^\n+   |                          |\n+   |                          help: try adding a comma\n+   |\n+   = note: this is going to be an error in the future\n+\n+error: aborting due to 4 previous errors\n "}]}