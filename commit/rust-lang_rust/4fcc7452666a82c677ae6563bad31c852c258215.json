{"sha": "4fcc7452666a82c677ae6563bad31c852c258215", "node_id": "C_kwDOAAsO6NoAKDRmY2M3NDUyNjY2YTgyYzY3N2FlNjU2M2JhZDMxYzg1MmMyNTgyMTU", "commit": {"author": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-08-24T04:34:23Z"}, "committer": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-09-01T23:47:54Z"}, "message": "Simplify `try_load_from_on_disk_cache`", "tree": {"sha": "51f62a9094d58a4c6b457f81ee2edf3459d956d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51f62a9094d58a4c6b457f81ee2edf3459d956d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4fcc7452666a82c677ae6563bad31c852c258215", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4fcc7452666a82c677ae6563bad31c852c258215", "html_url": "https://github.com/rust-lang/rust/commit/4fcc7452666a82c677ae6563bad31c852c258215", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4fcc7452666a82c677ae6563bad31c852c258215/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83b6dc9588b6f970fd2a1c2da6373bebe406946f", "url": "https://api.github.com/repos/rust-lang/rust/commits/83b6dc9588b6f970fd2a1c2da6373bebe406946f", "html_url": "https://github.com/rust-lang/rust/commit/83b6dc9588b6f970fd2a1c2da6373bebe406946f"}], "stats": {"total": 17, "additions": 9, "deletions": 8}, "files": [{"sha": "cc7e07651710cee17429c3d56e5040c0dbb65b0a", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4fcc7452666a82c677ae6563bad31c852c258215/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fcc7452666a82c677ae6563bad31c852c258215/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=4fcc7452666a82c677ae6563bad31c852c258215", "patch": "@@ -301,18 +301,20 @@ pub(crate) fn create_query_frame<\n     QueryStackFrame::new(name, description, span, def_kind, hash)\n }\n \n-pub(crate) fn try_load_from_on_disk_cache<'tcx, K: DepNodeParams<TyCtxt<'tcx>>, V>(\n+pub(crate) fn try_load_from_on_disk_cache<'tcx, Q, V>(\n     tcx: TyCtxt<'tcx>,\n     dep_node: DepNode,\n-    cache_on_disk: fn(TyCtxt<'tcx>, &K) -> bool,\n-    cache_query_deps: fn(TyCtxt<'tcx>, K) -> V,\n-) {\n+    cache_query_deps: fn(TyCtxt<'tcx>, Q::Key) -> V,\n+) where\n+    Q: QueryDescription<QueryCtxt<'tcx>>,\n+    Q::Key: DepNodeParams<TyCtxt<'tcx>>,\n+{\n     debug_assert!(tcx.dep_graph.is_green(&dep_node));\n \n-    let key = K::recover(tcx, &dep_node).unwrap_or_else(|| {\n+    let key = Q::Key::recover(tcx, &dep_node).unwrap_or_else(|| {\n         panic!(\"Failed to recover key for {:?} with hash {}\", dep_node, dep_node.hash)\n     });\n-    if cache_on_disk(tcx, &key) {\n+    if Q::cache_on_disk(tcx, &key) {\n         let _ = cache_query_deps(tcx, key);\n     }\n }\n@@ -434,7 +436,6 @@ macro_rules! define_queries {\n         #[allow(nonstandard_style)]\n         mod query_callbacks {\n             use super::*;\n-            use rustc_query_system::query::QueryDescription;\n             use rustc_query_system::dep_graph::FingerprintStyle;\n \n             // We use this for most things when incr. comp. is turned off.\n@@ -495,7 +496,7 @@ macro_rules! define_queries {\n                 type Q<'tcx> = queries::$name<'tcx>;\n \n                 $crate::plumbing::query_callback::<Q<'_>>(\n-                    |tcx, key| $crate::plumbing::try_load_from_on_disk_cache::<<Q<'_> as QueryConfig>::Key, _>(tcx, key, <Q<'_>>::cache_on_disk, TyCtxt::$name),\n+                    |tcx, key| $crate::plumbing::try_load_from_on_disk_cache::<Q<'_>, _>(tcx, key, TyCtxt::$name),\n                     |tcx, key| $crate::plumbing::force_from_dep_node::<Q<'_>>(tcx, key),\n                     is_anon,\n                     is_eval_always"}]}