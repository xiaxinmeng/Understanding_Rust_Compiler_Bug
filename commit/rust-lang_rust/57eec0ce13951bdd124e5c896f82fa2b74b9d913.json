{"sha": "57eec0ce13951bdd124e5c896f82fa2b74b9d913", "node_id": "C_kwDOAAsO6NoAKDU3ZWVjMGNlMTM5NTFiZGQxMjRlNWM4OTZmODJmYTJiNzRiOWQ5MTM", "commit": {"author": {"name": "Pyry Kontio", "email": "pyry.kontio@drasa.eu", "date": "2022-03-31T08:59:36Z"}, "committer": {"name": "Pyry Kontio", "email": "pyry.kontio@drasa.eu", "date": "2022-03-31T08:59:36Z"}, "message": "Re-introduce \"propagating NaN\" to `maximum`/`minimum`, add \"ignoring NaN\" to `max`/`min`, add disclaimer about the \"propagation\".", "tree": {"sha": "6b22e529966afae5a0f7634077bef4887be8be14", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b22e529966afae5a0f7634077bef4887be8be14"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57eec0ce13951bdd124e5c896f82fa2b74b9d913", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57eec0ce13951bdd124e5c896f82fa2b74b9d913", "html_url": "https://github.com/rust-lang/rust/commit/57eec0ce13951bdd124e5c896f82fa2b74b9d913", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57eec0ce13951bdd124e5c896f82fa2b74b9d913/comments", "author": {"login": "golddranks", "id": 2675542, "node_id": "MDQ6VXNlcjI2NzU1NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/2675542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/golddranks", "html_url": "https://github.com/golddranks", "followers_url": "https://api.github.com/users/golddranks/followers", "following_url": "https://api.github.com/users/golddranks/following{/other_user}", "gists_url": "https://api.github.com/users/golddranks/gists{/gist_id}", "starred_url": "https://api.github.com/users/golddranks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/golddranks/subscriptions", "organizations_url": "https://api.github.com/users/golddranks/orgs", "repos_url": "https://api.github.com/users/golddranks/repos", "events_url": "https://api.github.com/users/golddranks/events{/privacy}", "received_events_url": "https://api.github.com/users/golddranks/received_events", "type": "User", "site_admin": false}, "committer": {"login": "golddranks", "id": 2675542, "node_id": "MDQ6VXNlcjI2NzU1NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/2675542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/golddranks", "html_url": "https://github.com/golddranks", "followers_url": "https://api.github.com/users/golddranks/followers", "following_url": "https://api.github.com/users/golddranks/following{/other_user}", "gists_url": "https://api.github.com/users/golddranks/gists{/gist_id}", "starred_url": "https://api.github.com/users/golddranks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/golddranks/subscriptions", "organizations_url": "https://api.github.com/users/golddranks/orgs", "repos_url": "https://api.github.com/users/golddranks/repos", "events_url": "https://api.github.com/users/golddranks/events{/privacy}", "received_events_url": "https://api.github.com/users/golddranks/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ee8b64a81b2e518d24f2e8acd2dfeebc686dd5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ee8b64a81b2e518d24f2e8acd2dfeebc686dd5d", "html_url": "https://github.com/rust-lang/rust/commit/4ee8b64a81b2e518d24f2e8acd2dfeebc686dd5d"}], "stats": {"total": 28, "additions": 20, "deletions": 8}, "files": [{"sha": "e3d40b58a38342a79db6bf82e45832c013413083", "filename": "library/core/src/num/f32.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/57eec0ce13951bdd124e5c896f82fa2b74b9d913/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57eec0ce13951bdd124e5c896f82fa2b74b9d913/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs?ref=57eec0ce13951bdd124e5c896f82fa2b74b9d913", "patch": "@@ -689,7 +689,7 @@ impl f32 {\n         self * (value / 180.0f32)\n     }\n \n-    /// Returns the maximum of the two numbers.\n+    /// Returns the maximum of the two numbers, ignoring NaN.\n     ///\n     /// If one of the arguments is NaN, then the other argument is returned.\n     /// This follows the IEEE-754 2008 semantics for maxNum, except for handling of signaling NaNs;\n@@ -709,7 +709,7 @@ impl f32 {\n         intrinsics::maxnumf32(self, other)\n     }\n \n-    /// Returns the minimum of the two numbers.\n+    /// Returns the minimum of the two numbers, ignoring NaN.\n     ///\n     /// If one of the arguments is NaN, then the other argument is returned.\n     /// This follows the IEEE-754 2008 semantics for minNum, except for handling of signaling NaNs;\n@@ -729,7 +729,7 @@ impl f32 {\n         intrinsics::minnumf32(self, other)\n     }\n \n-    /// Returns the maximum of the two numbers.\n+    /// Returns the maximum of the two numbers, propagating NaN.\n     ///\n     /// This returns NaN when *either* argument is NaN, as opposed to\n     /// [`f32::max`] which only returns NaN when *both* arguments are NaN.\n@@ -746,6 +746,9 @@ impl f32 {\n     /// If one of the arguments is NaN, then NaN is returned. Otherwise this returns the greater\n     /// of the two numbers. For this operation, -0.0 is considered to be less than +0.0.\n     /// Note that this follows the semantics specified in IEEE 754-2019.\n+    ///\n+    /// Also note that \"propagation\" of NaNs here doesn't mean that the bitpattern of a NaN operand\n+    /// is necessarily conserved; see [explanation of NaN as a special value](f32) for more info.\n     #[must_use = \"this returns the result of the comparison, without modifying either input\"]\n     #[unstable(feature = \"float_minimum_maximum\", issue = \"91079\")]\n     #[inline]\n@@ -761,7 +764,7 @@ impl f32 {\n         }\n     }\n \n-    /// Returns the minimum of the two numbers.\n+    /// Returns the minimum of the two numbers, propagating NaN.\n     ///\n     /// This returns NaN when *either* argument is NaN, as opposed to\n     /// [`f32::min`] which only returns NaN when *both* arguments are NaN.\n@@ -778,6 +781,9 @@ impl f32 {\n     /// If one of the arguments is NaN, then NaN is returned. Otherwise this returns the lesser\n     /// of the two numbers. For this operation, -0.0 is considered to be less than +0.0.\n     /// Note that this follows the semantics specified in IEEE 754-2019.\n+    ///\n+    /// Also note that \"propagation\" of NaNs here doesn't mean that the bitpattern of a NaN operand\n+    /// is necessarily conserved; see [explanation of NaN as a special value](f32) for more info.\n     #[must_use = \"this returns the result of the comparison, without modifying either input\"]\n     #[unstable(feature = \"float_minimum_maximum\", issue = \"91079\")]\n     #[inline]"}, {"sha": "51ccf7e855475bd1ce0d624cb22b665e215132c8", "filename": "library/core/src/num/f64.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/57eec0ce13951bdd124e5c896f82fa2b74b9d913/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57eec0ce13951bdd124e5c896f82fa2b74b9d913/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs?ref=57eec0ce13951bdd124e5c896f82fa2b74b9d913", "patch": "@@ -705,7 +705,7 @@ impl f64 {\n         self * (value / 180.0)\n     }\n \n-    /// Returns the maximum of the two numbers.\n+    /// Returns the maximum of the two numbers, ignoring NaN.\n     ///\n     /// If one of the arguments is NaN, then the other argument is returned.\n     /// This follows the IEEE-754 2008 semantics for maxNum, except for handling of signaling NaNs;\n@@ -725,7 +725,7 @@ impl f64 {\n         intrinsics::maxnumf64(self, other)\n     }\n \n-    /// Returns the minimum of the two numbers.\n+    /// Returns the minimum of the two numbers, ignoring NaN.\n     ///\n     /// If one of the arguments is NaN, then the other argument is returned.\n     /// This follows the IEEE-754 2008 semantics for minNum, except for handling of signaling NaNs;\n@@ -745,7 +745,7 @@ impl f64 {\n         intrinsics::minnumf64(self, other)\n     }\n \n-    /// Returns the maximum of the two numbers.\n+    /// Returns the maximum of the two numbers, propagating NaN.\n     ///\n     /// This returns NaN when *either* argument is NaN, as opposed to\n     /// [`f64::max`] which only returns NaN when *both* arguments are NaN.\n@@ -762,6 +762,9 @@ impl f64 {\n     /// If one of the arguments is NaN, then NaN is returned. Otherwise this returns the greater\n     /// of the two numbers. For this operation, -0.0 is considered to be less than +0.0.\n     /// Note that this follows the semantics specified in IEEE 754-2019.\n+    ///\n+    /// Also note that \"propagation\" of NaNs here doesn't mean that the bitpattern of a NaN operand\n+    /// is necessarily conserved; see [explanation of NaN as a special value](f32) for more info.\n     #[must_use = \"this returns the result of the comparison, without modifying either input\"]\n     #[unstable(feature = \"float_minimum_maximum\", issue = \"91079\")]\n     #[inline]\n@@ -777,7 +780,7 @@ impl f64 {\n         }\n     }\n \n-    /// Returns the minimum of the two numbers.\n+    /// Returns the minimum of the two numbers, propagating NaN.\n     ///\n     /// This returns NaN when *either* argument is NaN, as opposed to\n     /// [`f64::min`] which only returns NaN when *both* arguments are NaN.\n@@ -794,6 +797,9 @@ impl f64 {\n     /// If one of the arguments is NaN, then NaN is returned. Otherwise this returns the lesser\n     /// of the two numbers. For this operation, -0.0 is considered to be less than +0.0.\n     /// Note that this follows the semantics specified in IEEE 754-2019.\n+    ///\n+    /// Also note that \"propagation\" of NaNs here doesn't mean that the bitpattern of a NaN operand\n+    /// is necessarily conserved; see [explanation of NaN as a special value](f32) for more info.\n     #[must_use = \"this returns the result of the comparison, without modifying either input\"]\n     #[unstable(feature = \"float_minimum_maximum\", issue = \"91079\")]\n     #[inline]"}]}