{"sha": "3742b62f64c8b2a01457b70ee37d3dc167a86a07", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3NDJiNjJmNjRjOGIyYTAxNDU3YjcwZWUzN2QzZGMxNjdhODZhMDc=", "commit": {"author": {"name": "Jed Davis", "email": "jld@panix.com", "date": "2013-01-07T11:42:49Z"}, "committer": {"name": "Jed Davis", "email": "jld@panix.com", "date": "2013-02-10T06:28:43Z"}, "message": "Omit discriminant from nullary univariant enums.\n\nIf an enum is isomorphic to unit, there's no need to use any bits to\nrepresent it.  The only obvious reason this wasn't the case was because\nthe enum could be C-like and have a user-specified discriminant -- but\nthat value is constant, so it doesn't need to be stored.\n\nThis change means that all newtype-like enums have the same size (and\nlayout) as their underlying type, which might be a useful property to\nhave, at least in terms of making programs' low-level behavior less\nsurprising.", "tree": {"sha": "565502e6c3c58ac189e975f1a684d620bfe2f769", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/565502e6c3c58ac189e975f1a684d620bfe2f769"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3742b62f64c8b2a01457b70ee37d3dc167a86a07", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3742b62f64c8b2a01457b70ee37d3dc167a86a07", "html_url": "https://github.com/rust-lang/rust/commit/3742b62f64c8b2a01457b70ee37d3dc167a86a07", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3742b62f64c8b2a01457b70ee37d3dc167a86a07/comments", "author": {"login": "jld", "id": 254973, "node_id": "MDQ6VXNlcjI1NDk3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/254973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jld", "html_url": "https://github.com/jld", "followers_url": "https://api.github.com/users/jld/followers", "following_url": "https://api.github.com/users/jld/following{/other_user}", "gists_url": "https://api.github.com/users/jld/gists{/gist_id}", "starred_url": "https://api.github.com/users/jld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jld/subscriptions", "organizations_url": "https://api.github.com/users/jld/orgs", "repos_url": "https://api.github.com/users/jld/repos", "events_url": "https://api.github.com/users/jld/events{/privacy}", "received_events_url": "https://api.github.com/users/jld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jld", "id": 254973, "node_id": "MDQ6VXNlcjI1NDk3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/254973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jld", "html_url": "https://github.com/jld", "followers_url": "https://api.github.com/users/jld/followers", "following_url": "https://api.github.com/users/jld/following{/other_user}", "gists_url": "https://api.github.com/users/jld/gists{/gist_id}", "starred_url": "https://api.github.com/users/jld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jld/subscriptions", "organizations_url": "https://api.github.com/users/jld/orgs", "repos_url": "https://api.github.com/users/jld/repos", "events_url": "https://api.github.com/users/jld/events{/privacy}", "received_events_url": "https://api.github.com/users/jld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d7014e55c06a184b02ccf724497c4c72d4d2041", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d7014e55c06a184b02ccf724497c4c72d4d2041", "html_url": "https://github.com/rust-lang/rust/commit/9d7014e55c06a184b02ccf724497c4c72d4d2041"}], "stats": {"total": 43, "additions": 29, "deletions": 14}, "files": [{"sha": "d86d4c97c3bedcf01667617e289688ab9968186d", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3742b62f64c8b2a01457b70ee37d3dc167a86a07/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3742b62f64c8b2a01457b70ee37d3dc167a86a07/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=3742b62f64c8b2a01457b70ee37d3dc167a86a07", "patch": "@@ -407,6 +407,10 @@ pub fn const_expr(cx: @crate_ctxt, e: @ast::expr) -> ValueRef {\n                     // variant or we wouldn't have gotten here -- the constant\n                     // checker forbids paths that don't map to C-like enum\n                     // variants.\n+                    if ty::enum_is_univariant(cx.tcx, enum_did) {\n+                        // Univariants have no discriminant field.\n+                        C_struct(~[])\n+                    } else {\n                     let lldiscrim = base::get_discrim_val(cx, e.span,\n                                                           enum_did,\n                                                           variant_did);\n@@ -418,6 +422,7 @@ pub fn const_expr(cx: @crate_ctxt, e: @ast::expr) -> ValueRef {\n                     let padding = C_null(T_array(T_i8(), size));\n                     C_struct(~[lldiscrim, padding])\n                 }\n+                }\n                 Some(ast::def_struct(_)) => {\n                     let ety = ty::expr_ty(cx.tcx, e);\n                     let llty = type_of::type_of(cx, ety);\n@@ -442,14 +447,14 @@ pub fn const_expr(cx: @crate_ctxt, e: @ast::expr) -> ValueRef {\n                 }\n             Some(ast::def_variant(tid, vid)) => {\n                 let ety = ty::expr_ty(cx.tcx, e);\n-                let degen = ty::enum_is_univariant(cx.tcx, tid);\n+                let univar = ty::enum_is_univariant(cx.tcx, tid);\n                 let size = machine::static_size_of_enum(cx, ety);\n \n                 let discrim = base::get_discrim_val(cx, e.span, tid, vid);\n                 let c_args = C_struct(args.map(|a| const_expr(cx, *a)));\n \n                 // FIXME (#1645): enum body alignment is generaly wrong.\n-                if !degen {\n+                if !univar {\n                     // Pad out the data to the size of its type_of;\n                     // this is necessary if the enum is contained\n                     // within an aggregate (tuple, struct, vector) so\n@@ -464,8 +469,6 @@ pub fn const_expr(cx: @crate_ctxt, e: @ast::expr) -> ValueRef {\n                     // without affecting its internal alignment or\n                     // changing the alignment of the enum.\n                     C_struct(~[discrim, C_packed_struct(~[c_args]), padding])\n-                } else if size == 0 {\n-                    C_struct(~[discrim])\n                 } else {\n                     C_struct(~[c_args])\n                 }"}, {"sha": "30ba0e7feeec88208fc4710cc3877ce768dfaf83", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3742b62f64c8b2a01457b70ee37d3dc167a86a07/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3742b62f64c8b2a01457b70ee37d3dc167a86a07/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=3742b62f64c8b2a01457b70ee37d3dc167a86a07", "patch": "@@ -674,12 +674,15 @@ fn trans_def_dps_unadjusted(bcx: block, ref_expr: @ast::expr,\n                 // N-ary variant.\n                 let fn_data = callee::trans_fn_ref(bcx, vid, ref_expr.id);\n                 return fn_data_to_datum(bcx, vid, fn_data, lldest);\n-            } else {\n+            } else if !ty::enum_is_univariant(ccx.tcx, tid) {\n                 // Nullary variant.\n                 let lldiscrimptr = GEPi(bcx, lldest, [0u, 0u]);\n                 let lldiscrim = C_int(bcx.ccx(), variant_info.disr_val);\n                 Store(bcx, lldiscrim, lldiscrimptr);\n                 return bcx;\n+            } else {\n+                // Nullary univariant.\n+                return bcx;\n             }\n         }\n         ast::def_struct(*) => {\n@@ -1591,10 +1594,22 @@ fn trans_imm_cast(bcx: block, expr: @ast::expr,\n             {in: cast_enum, out: cast_integral} |\n             {in: cast_enum, out: cast_float} => {\n                 let bcx = bcx;\n-                let llenumty = T_opaque_enum_ptr(ccx);\n-                let av_enum = PointerCast(bcx, llexpr, llenumty);\n-                let lldiscrim_a_ptr = GEPi(bcx, av_enum, [0u, 0u]);\n-                let lldiscrim_a = Load(bcx, lldiscrim_a_ptr);\n+                let in_tid = match ty::get(t_in).sty {\n+                    ty::ty_enum(did, _) => did,\n+                    _ => ccx.sess.bug(~\"enum cast source is not enum\")\n+                };\n+                let variants = ty::enum_variants(ccx.tcx, in_tid);\n+                let lldiscrim_a = if variants.len() == 1 {\n+                    // Univariants don't have a discriminant field,\n+                    // because there's only one value it could have:\n+                    C_integral(T_enum_discrim(ccx),\n+                               variants[0].disr_val as u64, True)\n+                } else {\n+                    let llenumty = T_opaque_enum_ptr(ccx);\n+                    let av_enum = PointerCast(bcx, llexpr, llenumty);\n+                    let lldiscrim_a_ptr = GEPi(bcx, av_enum, [0u, 0u]);\n+                    Load(bcx, lldiscrim_a_ptr)\n+                };\n                 match k_out {\n                     cast_integral => int_cast(bcx, ll_t_out,\n                                               val_ty(lldiscrim_a),"}, {"sha": "972f702c18a81dc793d8566d28d289fecfe5f63b", "filename": "src/librustc/middle/trans/type_of.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3742b62f64c8b2a01457b70ee37d3dc167a86a07/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3742b62f64c8b2a01457b70ee37d3dc167a86a07/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs?ref=3742b62f64c8b2a01457b70ee37d3dc167a86a07", "patch": "@@ -242,14 +242,11 @@ pub fn fill_type_of_enum(cx: @crate_ctxt, did: ast::def_id, t: ty::t,\n     debug!(\"type_of_enum %?: %?\", t, ty::get(t));\n \n     let lltys = {\n-        let degen = ty::enum_is_univariant(cx.tcx, did);\n+        let univar = ty::enum_is_univariant(cx.tcx, did);\n         let size = machine::static_size_of_enum(cx, t);\n-        if !degen {\n+        if !univar {\n             ~[T_enum_discrim(cx), T_array(T_i8(), size)]\n         }\n-        else if size == 0u {\n-            ~[T_enum_discrim(cx)]\n-        }\n         else {\n             ~[T_array(T_i8(), size)]\n         }"}]}