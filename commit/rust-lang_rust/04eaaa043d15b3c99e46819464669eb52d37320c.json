{"sha": "04eaaa043d15b3c99e46819464669eb52d37320c", "node_id": "C_kwDOAAsO6NoAKDA0ZWFhYTA0M2QxNWIzYzk5ZTQ2ODE5NDY0NjY5ZWI1MmQzNzMyMGM", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-12-02T12:44:14Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-12-02T12:44:14Z"}, "message": "Fix crash with TAIT in the call codegen code\n\nThe new logic is closer to what cg_llvm does.\n\nFixes #1240", "tree": {"sha": "538f554928b1ee95a1023b8c9604e933934eedc2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/538f554928b1ee95a1023b8c9604e933934eedc2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04eaaa043d15b3c99e46819464669eb52d37320c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04eaaa043d15b3c99e46819464669eb52d37320c", "html_url": "https://github.com/rust-lang/rust/commit/04eaaa043d15b3c99e46819464669eb52d37320c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04eaaa043d15b3c99e46819464669eb52d37320c/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f73b0b1349cb5190f7b1e3e4378acc1a434e1687", "url": "https://api.github.com/repos/rust-lang/rust/commits/f73b0b1349cb5190f7b1e3e4378acc1a434e1687", "html_url": "https://github.com/rust-lang/rust/commit/f73b0b1349cb5190f7b1e3e4378acc1a434e1687"}], "stats": {"total": 58, "additions": 46, "deletions": 12}, "files": [{"sha": "99a8e5b3220702300fc938a756a99e778e9cc51e", "filename": "build_system/tests.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/04eaaa043d15b3c99e46819464669eb52d37320c/build_system%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04eaaa043d15b3c99e46819464669eb52d37320c/build_system%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Ftests.rs?ref=04eaaa043d15b3c99e46819464669eb52d37320c", "patch": "@@ -219,6 +219,16 @@ const BASE_SYSROOT_SUITE: &[TestCase] = &[\n         ]);\n         runner.run_out_command(\"mod_bench\", []);\n     }),\n+    TestCase::new(\"aot.issue-72793\", &|runner| {\n+        runner.run_rustc([\n+            \"example/issue-72793.rs\",\n+            \"--crate-type\",\n+            \"bin\",\n+            \"--target\",\n+            &runner.target_compiler.triple,\n+        ]);\n+        runner.run_out_command(\"issue-72793\", []);\n+    }),\n ];\n \n pub(crate) static RAND_REPO: GitRepo ="}, {"sha": "258b67e931476850a25cab17bbc2c3300a243821", "filename": "config.txt", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04eaaa043d15b3c99e46819464669eb52d37320c/config.txt", "raw_url": "https://github.com/rust-lang/rust/raw/04eaaa043d15b3c99e46819464669eb52d37320c/config.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.txt?ref=04eaaa043d15b3c99e46819464669eb52d37320c", "patch": "@@ -40,6 +40,7 @@ aot.subslice-patterns-const-eval\n aot.track-caller-attribute\n aot.float-minmax-pass\n aot.mod_bench\n+aot.issue-72793\n \n testsuite.extended_sysroot\n test.rust-random/rand"}, {"sha": "b1bb9b8e1e73034927ae8f094d1fd997baa80b3a", "filename": "example/issue-72793.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/04eaaa043d15b3c99e46819464669eb52d37320c/example%2Fissue-72793.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04eaaa043d15b3c99e46819464669eb52d37320c/example%2Fissue-72793.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fissue-72793.rs?ref=04eaaa043d15b3c99e46819464669eb52d37320c", "patch": "@@ -0,0 +1,24 @@\n+// Adapted from rustc ui test suite (ui/type-alias-impl-trait/issue-72793.rs)\n+\n+#![feature(type_alias_impl_trait)]\n+\n+trait T { type Item; }\n+\n+type Alias<'a> = impl T<Item = &'a ()>;\n+\n+struct S;\n+impl<'a> T for &'a S {\n+    type Item = &'a ();\n+}\n+\n+fn filter_positive<'a>() -> Alias<'a> {\n+    &S\n+}\n+\n+fn with_positive(fun: impl Fn(Alias<'_>)) {\n+    fun(filter_positive());\n+}\n+\n+fn main() {\n+    with_positive(|_| ());\n+}"}, {"sha": "d62966b162fa2fb743713a40870abae4ac07bc68", "filename": "src/abi/mod.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/04eaaa043d15b3c99e46819464669eb52d37320c/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04eaaa043d15b3c99e46819464669eb52d37320c/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=04eaaa043d15b3c99e46819464669eb52d37320c", "patch": "@@ -341,14 +341,13 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n     destination: Place<'tcx>,\n     target: Option<BasicBlock>,\n ) {\n-    let fn_ty = fx.monomorphize(func.ty(fx.mir, fx.tcx));\n-    let fn_sig =\n-        fx.tcx.normalize_erasing_late_bound_regions(ParamEnv::reveal_all(), fn_ty.fn_sig(fx.tcx));\n+    let func = codegen_operand(fx, func);\n+    let fn_sig = func.layout().ty.fn_sig(fx.tcx);\n \n     let ret_place = codegen_place(fx, destination);\n \n     // Handle special calls like intrinsics and empty drop glue.\n-    let instance = if let ty::FnDef(def_id, substs) = *fn_ty.kind() {\n+    let instance = if let ty::FnDef(def_id, substs) = *func.layout().ty.kind() {\n         let instance = ty::Instance::resolve(fx.tcx, ty::ParamEnv::reveal_all(), def_id, substs)\n             .unwrap()\n             .unwrap()\n@@ -391,17 +390,17 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n         None\n     };\n \n-    let extra_args = &args[fn_sig.inputs().len()..];\n+    let extra_args = &args[fn_sig.inputs().skip_binder().len()..];\n     let extra_args = fx\n         .tcx\n         .mk_type_list(extra_args.iter().map(|op_arg| fx.monomorphize(op_arg.ty(fx.mir, fx.tcx))));\n     let fn_abi = if let Some(instance) = instance {\n         RevealAllLayoutCx(fx.tcx).fn_abi_of_instance(instance, extra_args)\n     } else {\n-        RevealAllLayoutCx(fx.tcx).fn_abi_of_fn_ptr(fn_ty.fn_sig(fx.tcx), extra_args)\n+        RevealAllLayoutCx(fx.tcx).fn_abi_of_fn_ptr(fn_sig, extra_args)\n     };\n \n-    let is_cold = if fn_sig.abi == Abi::RustCold {\n+    let is_cold = if fn_sig.abi() == Abi::RustCold {\n         true\n     } else {\n         instance\n@@ -418,7 +417,7 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n     }\n \n     // Unpack arguments tuple for closures\n-    let mut args = if fn_sig.abi == Abi::RustCall {\n+    let mut args = if fn_sig.abi() == Abi::RustCall {\n         assert_eq!(args.len(), 2, \"rust-call abi requires two arguments\");\n         let self_arg = codegen_call_argument_operand(fx, &args[0]);\n         let pack_arg = codegen_call_argument_operand(fx, &args[1]);\n@@ -486,7 +485,7 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n                 fx.add_comment(nop_inst, \"indirect call\");\n             }\n \n-            let func = codegen_operand(fx, func).load_scalar(fx);\n+            let func = func.load_scalar(fx);\n             let sig = clif_sig_from_fn_abi(fx.tcx, fx.target_config.default_call_conv, &fn_abi);\n             let sig = fx.bcx.import_signature(sig);\n \n@@ -517,11 +516,11 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n         };\n \n         // FIXME find a cleaner way to support varargs\n-        if fn_sig.c_variadic {\n-            if !matches!(fn_sig.abi, Abi::C { .. }) {\n+        if fn_sig.c_variadic() {\n+            if !matches!(fn_sig.abi(), Abi::C { .. }) {\n                 fx.tcx.sess.span_fatal(\n                     source_info.span,\n-                    &format!(\"Variadic call for non-C abi {:?}\", fn_sig.abi),\n+                    &format!(\"Variadic call for non-C abi {:?}\", fn_sig.abi()),\n                 );\n             }\n             let sig_ref = fx.bcx.func.dfg.call_signature(call_inst).unwrap();"}]}