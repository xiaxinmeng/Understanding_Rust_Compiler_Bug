{"sha": "a7f35c42d474f893c56b6e0f7df3f8bb965f2650", "node_id": "C_kwDOAAsO6NoAKGE3ZjM1YzQyZDQ3NGY4OTNjNTZiNmUwZjdkZjNmOGJiOTY1ZjI2NTA", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-11-29T02:35:44Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-12-01T23:38:58Z"}, "message": "Add `StrStyle` to `ast::LitKind::ByteStr`.\n\nThis is required to distinguish between cooked and raw byte string\nliterals in an `ast::LitKind`, without referring to an adjacent\n`token::Lit`. It's a prerequisite for the next commit.", "tree": {"sha": "fd74e94ab25afc4fbffdf40ffb3836b6911606d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd74e94ab25afc4fbffdf40ffb3836b6911606d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7f35c42d474f893c56b6e0f7df3f8bb965f2650", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7f35c42d474f893c56b6e0f7df3f8bb965f2650", "html_url": "https://github.com/rust-lang/rust/commit/a7f35c42d474f893c56b6e0f7df3f8bb965f2650", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7f35c42d474f893c56b6e0f7df3f8bb965f2650/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e658144586e0fe4f77a7dadf7c80185fd0b71279", "url": "https://api.github.com/repos/rust-lang/rust/commits/e658144586e0fe4f77a7dadf7c80185fd0b71279", "html_url": "https://github.com/rust-lang/rust/commit/e658144586e0fe4f77a7dadf7c80185fd0b71279"}], "stats": {"total": 67, "additions": 39, "deletions": 28}, "files": [{"sha": "b869b2f8af99401bddfa3b196da9ba172fbbfcbf", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a7f35c42d474f893c56b6e0f7df3f8bb965f2650/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f35c42d474f893c56b6e0f7df3f8bb965f2650/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=a7f35c42d474f893c56b6e0f7df3f8bb965f2650", "patch": "@@ -1796,8 +1796,9 @@ pub enum LitKind {\n     /// A string literal (`\"foo\"`). The symbol is unescaped, and so may differ\n     /// from the original token's symbol.\n     Str(Symbol, StrStyle),\n-    /// A byte string (`b\"foo\"`).\n-    ByteStr(Lrc<[u8]>),\n+    /// A byte string (`b\"foo\"`). Not stored as a symbol because it might be\n+    /// non-utf8, and symbols only allow utf8 strings.\n+    ByteStr(Lrc<[u8]>, StrStyle),\n     /// A byte char (`b'f'`).\n     Byte(u8),\n     /// A character literal (`'a'`).\n@@ -1822,7 +1823,7 @@ impl LitKind {\n \n     /// Returns `true` if this literal is byte literal string.\n     pub fn is_bytestr(&self) -> bool {\n-        matches!(self, LitKind::ByteStr(_))\n+        matches!(self, LitKind::ByteStr(..))\n     }\n \n     /// Returns `true` if this is a numeric literal."}, {"sha": "9f6fdf44ac0b5d541387984904e5ccf2b642ef77", "filename": "compiler/rustc_ast/src/util/literal.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a7f35c42d474f893c56b6e0f7df3f8bb965f2650/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f35c42d474f893c56b6e0f7df3f8bb965f2650/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs?ref=a7f35c42d474f893c56b6e0f7df3f8bb965f2650", "patch": "@@ -1,11 +1,12 @@\n //! Code related to parsing literals.\n \n-use crate::ast::{self, LitKind, MetaItemLit};\n+use crate::ast::{self, LitKind, MetaItemLit, StrStyle};\n use crate::token::{self, Token};\n use rustc_lexer::unescape::{byte_from_char, unescape_byte, unescape_char, unescape_literal, Mode};\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::Span;\n use std::ascii;\n+use std::str;\n \n #[derive(Debug)]\n pub enum LitError {\n@@ -115,9 +116,9 @@ impl LitKind {\n                     }\n                 });\n                 error?;\n-                LitKind::ByteStr(buf.into())\n+                LitKind::ByteStr(buf.into(), StrStyle::Cooked)\n             }\n-            token::ByteStrRaw(_) => {\n+            token::ByteStrRaw(n) => {\n                 let s = symbol.as_str();\n                 let bytes = if s.contains('\\r') {\n                     let mut buf = Vec::with_capacity(s.len());\n@@ -136,7 +137,7 @@ impl LitKind {\n                     symbol.to_string().into_bytes()\n                 };\n \n-                LitKind::ByteStr(bytes.into())\n+                LitKind::ByteStr(bytes.into(), StrStyle::Raw(n))\n             }\n             token::Err => LitKind::Err,\n         })\n@@ -155,10 +156,15 @@ impl LitKind {\n                 (token::Str, symbol, None)\n             }\n             LitKind::Str(symbol, ast::StrStyle::Raw(n)) => (token::StrRaw(n), symbol, None),\n-            LitKind::ByteStr(ref bytes) => {\n+            LitKind::ByteStr(ref bytes, ast::StrStyle::Cooked) => {\n                 let string = bytes.escape_ascii().to_string();\n                 (token::ByteStr, Symbol::intern(&string), None)\n             }\n+            LitKind::ByteStr(ref bytes, ast::StrStyle::Raw(n)) => {\n+                // Unwrap because raw byte string literals can only contain ASCII.\n+                let string = str::from_utf8(bytes).unwrap();\n+                (token::ByteStrRaw(n), Symbol::intern(&string), None)\n+            }\n             LitKind::Byte(byte) => {\n                 let string: String = ascii::escape_default(byte).map(Into::<char>::into).collect();\n                 (token::Byte, Symbol::intern(&string), None)"}, {"sha": "e18bbcf65e719a6467bfd7385f701b0cc0008ad5", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7f35c42d474f893c56b6e0f7df3f8bb965f2650/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f35c42d474f893c56b6e0f7df3f8bb965f2650/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=a7f35c42d474f893c56b6e0f7df3f8bb965f2650", "patch": "@@ -97,7 +97,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 }\n                 ExprKind::IncludedBytes(bytes) => hir::ExprKind::Lit(respan(\n                     self.lower_span(e.span),\n-                    LitKind::ByteStr(bytes.clone()),\n+                    LitKind::ByteStr(bytes.clone(), StrStyle::Cooked),\n                 )),\n                 ExprKind::Cast(expr, ty) => {\n                     let expr = self.lower_expr(expr);"}, {"sha": "7306b10d60ffbd9fa57bd0f99c655bdeaa45920b", "filename": "compiler/rustc_ast_pretty/src/pprust/state/expr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a7f35c42d474f893c56b6e0f7df3f8bb965f2650/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f35c42d474f893c56b6e0f7df3f8bb965f2650/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs?ref=a7f35c42d474f893c56b6e0f7df3f8bb965f2650", "patch": "@@ -323,7 +323,8 @@ impl<'a> State<'a> {\n                 self.print_token_literal(*token_lit, expr.span);\n             }\n             ast::ExprKind::IncludedBytes(bytes) => {\n-                let lit = ast::LitKind::ByteStr(bytes.clone()).synthesize_token_lit();\n+                let lit = ast::LitKind::ByteStr(bytes.clone(), ast::StrStyle::Cooked)\n+                    .synthesize_token_lit();\n                 self.print_token_literal(lit, expr.span)\n             }\n             ast::ExprKind::Cast(expr, ty) => {"}, {"sha": "56b77fdf58050004dfe41d82d9ca5106b658fcf1", "filename": "compiler/rustc_builtin_macros/src/concat_bytes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a7f35c42d474f893c56b6e0f7df3f8bb965f2650/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f35c42d474f893c56b6e0f7df3f8bb965f2650/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat_bytes.rs?ref=a7f35c42d474f893c56b6e0f7df3f8bb965f2650", "patch": "@@ -69,7 +69,7 @@ fn invalid_type_err(\n         Ok(ast::LitKind::Int(_, _)) => {\n             cx.span_err(span, \"numeric literal is not a `u8`\");\n         }\n-        Ok(ast::LitKind::ByteStr(_) | ast::LitKind::Byte(_)) => unreachable!(),\n+        Ok(ast::LitKind::ByteStr(..) | ast::LitKind::Byte(_)) => unreachable!(),\n         Err(err) => {\n             report_lit_error(&cx.sess.parse_sess, err, token_lit, span);\n         }\n@@ -97,7 +97,7 @@ fn handle_array_element(\n             )) if val <= u8::MAX.into() => Some(val as u8),\n \n             Ok(ast::LitKind::Byte(val)) => Some(val),\n-            Ok(ast::LitKind::ByteStr(_)) => {\n+            Ok(ast::LitKind::ByteStr(..)) => {\n                 if !*has_errors {\n                     cx.struct_span_err(expr.span, \"cannot concatenate doubly nested array\")\n                         .note(\"byte strings are treated as arrays of bytes\")\n@@ -174,7 +174,7 @@ pub fn expand_concat_bytes(\n                 Ok(ast::LitKind::Byte(val)) => {\n                     accumulator.push(val);\n                 }\n-                Ok(ast::LitKind::ByteStr(ref bytes)) => {\n+                Ok(ast::LitKind::ByteStr(ref bytes, _)) => {\n                     accumulator.extend_from_slice(&bytes);\n                 }\n                 _ => {"}, {"sha": "d491e9e34a78471bb612e70b6d531171d61bd3ab", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7f35c42d474f893c56b6e0f7df3f8bb965f2650/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f35c42d474f893c56b6e0f7df3f8bb965f2650/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=a7f35c42d474f893c56b6e0f7df3f8bb965f2650", "patch": "@@ -1234,7 +1234,7 @@ pub fn expr_to_spanned_string<'a>(\n     Err(match expr.kind {\n         ast::ExprKind::Lit(token_lit) => match ast::LitKind::from_token_lit(token_lit) {\n             Ok(ast::LitKind::Str(s, style)) => return Ok((s, style, expr.span)),\n-            Ok(ast::LitKind::ByteStr(_)) => {\n+            Ok(ast::LitKind::ByteStr(..)) => {\n                 let mut err = cx.struct_span_err(expr.span, err_msg);\n                 let span = expr.span.shrink_to_lo();\n                 err.span_suggestion("}, {"sha": "d8245ff613a9d829b15c13e23cac5b1ba9a75e8c", "filename": "compiler/rustc_expand/src/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7f35c42d474f893c56b6e0f7df3f8bb965f2650/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f35c42d474f893c56b6e0f7df3f8bb965f2650/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs?ref=a7f35c42d474f893c56b6e0f7df3f8bb965f2650", "patch": "@@ -361,7 +361,7 @@ impl<'a> ExtCtxt<'a> {\n     }\n \n     pub fn expr_byte_str(&self, sp: Span, bytes: Vec<u8>) -> P<ast::Expr> {\n-        self.expr_lit(sp, ast::LitKind::ByteStr(Lrc::from(bytes)))\n+        self.expr_lit(sp, ast::LitKind::ByteStr(Lrc::from(bytes), ast::StrStyle::Cooked))\n     }\n \n     /// `[expr1, expr2, ...]`"}, {"sha": "255e5105ff4a97b1a3dd85f59b677cce70ba7aeb", "filename": "compiler/rustc_expand/src/proc_macro_server.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a7f35c42d474f893c56b6e0f7df3f8bb965f2650/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f35c42d474f893c56b6e0f7df3f8bb965f2650/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs?ref=a7f35c42d474f893c56b6e0f7df3f8bb965f2650", "patch": "@@ -526,7 +526,8 @@ impl server::TokenStream for Rustc<'_, '_> {\n                 Ok(tokenstream::TokenStream::token_alone(token::Literal(*token_lit), expr.span))\n             }\n             ast::ExprKind::IncludedBytes(bytes) => {\n-                let lit = ast::LitKind::ByteStr(bytes.clone()).synthesize_token_lit();\n+                let lit = ast::LitKind::ByteStr(bytes.clone(), ast::StrStyle::Cooked)\n+                    .synthesize_token_lit();\n                 Ok(tokenstream::TokenStream::token_alone(token::TokenKind::Literal(lit), expr.span))\n             }\n             ast::ExprKind::Unary(ast::UnOp::Neg, e) => match &e.kind {"}, {"sha": "0d6b0175406feaed7655e9f93b2e5b81a777638d", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/checks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7f35c42d474f893c56b6e0f7df3f8bb965f2650/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f35c42d474f893c56b6e0f7df3f8bb965f2650/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs?ref=a7f35c42d474f893c56b6e0f7df3f8bb965f2650", "patch": "@@ -1169,7 +1169,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         match lit.node {\n             ast::LitKind::Str(..) => tcx.mk_static_str(),\n-            ast::LitKind::ByteStr(ref v) => {\n+            ast::LitKind::ByteStr(ref v, _) => {\n                 tcx.mk_imm_ref(tcx.lifetimes.re_static, tcx.mk_array(tcx.types.u8, v.len() as u64))\n             }\n             ast::LitKind::Byte(_) => tcx.types.u8,"}, {"sha": "6810353f9e778bc992e43c6ee94111cdcca39aca", "filename": "compiler/rustc_hir_typeck/src/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7f35c42d474f893c56b6e0f7df3f8bb965f2650/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f35c42d474f893c56b6e0f7df3f8bb965f2650/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs?ref=a7f35c42d474f893c56b6e0f7df3f8bb965f2650", "patch": "@@ -386,7 +386,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // Byte string patterns behave the same way as array patterns\n         // They can denote both statically and dynamically-sized byte arrays.\n         let mut pat_ty = ty;\n-        if let hir::ExprKind::Lit(Spanned { node: ast::LitKind::ByteStr(_), .. }) = lt.kind {\n+        if let hir::ExprKind::Lit(Spanned { node: ast::LitKind::ByteStr(..), .. }) = lt.kind {\n             let expected = self.structurally_resolved_type(span, expected);\n             if let ty::Ref(_, inner_ty, _) = expected.kind()\n                 && matches!(inner_ty.kind(), ty::Slice(_))"}, {"sha": "3b7ed818dc9b7eb7cd88630d60e63e0fa86ad22d", "filename": "compiler/rustc_mir_build/src/build/expr/as_constant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7f35c42d474f893c56b6e0f7df3f8bb965f2650/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f35c42d474f893c56b6e0f7df3f8bb965f2650/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs?ref=a7f35c42d474f893c56b6e0f7df3f8bb965f2650", "patch": "@@ -135,14 +135,14 @@ pub(crate) fn lit_to_mir_constant<'tcx>(\n             let allocation = tcx.intern_const_alloc(allocation);\n             ConstValue::Slice { data: allocation, start: 0, end: s.len() }\n         }\n-        (ast::LitKind::ByteStr(data), ty::Ref(_, inner_ty, _))\n+        (ast::LitKind::ByteStr(data, _), ty::Ref(_, inner_ty, _))\n             if matches!(inner_ty.kind(), ty::Slice(_)) =>\n         {\n             let allocation = Allocation::from_bytes_byte_aligned_immutable(data as &[u8]);\n             let allocation = tcx.intern_const_alloc(allocation);\n             ConstValue::Slice { data: allocation, start: 0, end: data.len() }\n         }\n-        (ast::LitKind::ByteStr(data), ty::Ref(_, inner_ty, _)) if inner_ty.is_array() => {\n+        (ast::LitKind::ByteStr(data, _), ty::Ref(_, inner_ty, _)) if inner_ty.is_array() => {\n             let id = tcx.allocate_bytes(data);\n             ConstValue::Scalar(Scalar::from_pointer(id.into(), &tcx))\n         }"}, {"sha": "57ae6a3652df5293116b866a65b79b5d4c1153d8", "filename": "compiler/rustc_mir_build/src/thir/constant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7f35c42d474f893c56b6e0f7df3f8bb965f2650/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f35c42d474f893c56b6e0f7df3f8bb965f2650/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fconstant.rs?ref=a7f35c42d474f893c56b6e0f7df3f8bb965f2650", "patch": "@@ -33,13 +33,13 @@ pub(crate) fn lit_to_const<'tcx>(\n             let str_bytes = s.as_str().as_bytes();\n             ty::ValTree::from_raw_bytes(tcx, str_bytes)\n         }\n-        (ast::LitKind::ByteStr(data), ty::Ref(_, inner_ty, _))\n+        (ast::LitKind::ByteStr(data, _), ty::Ref(_, inner_ty, _))\n             if matches!(inner_ty.kind(), ty::Slice(_)) =>\n         {\n             let bytes = data as &[u8];\n             ty::ValTree::from_raw_bytes(tcx, bytes)\n         }\n-        (ast::LitKind::ByteStr(data), ty::Ref(_, inner_ty, _)) if inner_ty.is_array() => {\n+        (ast::LitKind::ByteStr(data, _), ty::Ref(_, inner_ty, _)) if inner_ty.is_array() => {\n             let bytes = data as &[u8];\n             ty::ValTree::from_raw_bytes(tcx, bytes)\n         }"}, {"sha": "6a4861747d267c83663ca3e405a8d61d13564c26", "filename": "src/tools/clippy/clippy_lints/src/invalid_utf8_in_unchecked.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7f35c42d474f893c56b6e0f7df3f8bb965f2650/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finvalid_utf8_in_unchecked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f35c42d474f893c56b6e0f7df3f8bb965f2650/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finvalid_utf8_in_unchecked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finvalid_utf8_in_unchecked.rs?ref=a7f35c42d474f893c56b6e0f7df3f8bb965f2650", "patch": "@@ -33,7 +33,7 @@ impl<'tcx> LateLintPass<'tcx> for InvalidUtf8InUnchecked {\n         if let Some([arg]) = match_function_call(cx, expr, &paths::STR_FROM_UTF8_UNCHECKED) {\n             match &arg.kind {\n                 ExprKind::Lit(Spanned { node: lit, .. }) => {\n-                    if let LitKind::ByteStr(bytes) = &lit\n+                    if let LitKind::ByteStr(bytes, _) = &lit\n                         && std::str::from_utf8(bytes).is_err()\n                     {\n                         lint(cx, expr.span);"}, {"sha": "424c0d9e798288257d0347c61c666a12574b5f23", "filename": "src/tools/clippy/clippy_lints/src/large_include_file.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7f35c42d474f893c56b6e0f7df3f8bb965f2650/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flarge_include_file.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f35c42d474f893c56b6e0f7df3f8bb965f2650/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flarge_include_file.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flarge_include_file.rs?ref=a7f35c42d474f893c56b6e0f7df3f8bb965f2650", "patch": "@@ -60,7 +60,7 @@ impl LateLintPass<'_> for LargeIncludeFile {\n             then {\n                 let len = match &lit.node {\n                     // include_bytes\n-                    LitKind::ByteStr(bstr) => bstr.len(),\n+                    LitKind::ByteStr(bstr, _) => bstr.len(),\n                     // include_str\n                     LitKind::Str(sym, _) => sym.as_str().len(),\n                     _ => return,"}, {"sha": "158e6caa4de5485ebcc7b30bd7eb806bc822f84b", "filename": "src/tools/clippy/clippy_lints/src/matches/match_same_arms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7f35c42d474f893c56b6e0f7df3f8bb965f2650/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmatch_same_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f35c42d474f893c56b6e0f7df3f8bb965f2650/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmatch_same_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmatch_same_arms.rs?ref=a7f35c42d474f893c56b6e0f7df3f8bb965f2650", "patch": "@@ -282,7 +282,7 @@ impl<'a> NormalizedPat<'a> {\n                 // TODO: Handle negative integers. They're currently treated as a wild match.\n                 ExprKind::Lit(lit) => match lit.node {\n                     LitKind::Str(sym, _) => Self::LitStr(sym),\n-                    LitKind::ByteStr(ref bytes) => Self::LitBytes(bytes),\n+                    LitKind::ByteStr(ref bytes, _) => Self::LitBytes(bytes),\n                     LitKind::Byte(val) => Self::LitInt(val.into()),\n                     LitKind::Char(val) => Self::LitInt(val.into()),\n                     LitKind::Int(val, _) => Self::LitInt(val),"}, {"sha": "bd7daf0773caf914b7d3bd4b34b9ba88e4f5cba6", "filename": "src/tools/clippy/clippy_lints/src/utils/author.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7f35c42d474f893c56b6e0f7df3f8bb965f2650/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f35c42d474f893c56b6e0f7df3f8bb965f2650/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=a7f35c42d474f893c56b6e0f7df3f8bb965f2650", "patch": "@@ -299,7 +299,7 @@ impl<'a, 'tcx> PrintVisitor<'a, 'tcx> {\n                 };\n                 kind!(\"Float(_, {float_ty})\");\n             },\n-            LitKind::ByteStr(ref vec) => {\n+            LitKind::ByteStr(ref vec, _) => {\n                 bind!(self, vec);\n                 kind!(\"ByteStr(ref {vec})\");\n                 chain!(self, \"let [{:?}] = **{vec}\", vec.value);"}, {"sha": "43f0df145f0ec606a4393b7ea73db736b376195d", "filename": "src/tools/clippy/clippy_utils/src/check_proc_macro.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7f35c42d474f893c56b6e0f7df3f8bb965f2650/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fcheck_proc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f35c42d474f893c56b6e0f7df3f8bb965f2650/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fcheck_proc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fcheck_proc_macro.rs?ref=a7f35c42d474f893c56b6e0f7df3f8bb965f2650", "patch": "@@ -69,7 +69,9 @@ fn lit_search_pat(lit: &LitKind) -> (Pat, Pat) {\n         LitKind::Str(_, StrStyle::Cooked) => (Pat::Str(\"\\\"\"), Pat::Str(\"\\\"\")),\n         LitKind::Str(_, StrStyle::Raw(0)) => (Pat::Str(\"r\"), Pat::Str(\"\\\"\")),\n         LitKind::Str(_, StrStyle::Raw(_)) => (Pat::Str(\"r#\"), Pat::Str(\"#\")),\n-        LitKind::ByteStr(_) => (Pat::Str(\"b\\\"\"), Pat::Str(\"\\\"\")),\n+        LitKind::ByteStr(_, StrStyle::Cooked) => (Pat::Str(\"b\\\"\"), Pat::Str(\"\\\"\")),\n+        LitKind::ByteStr(_, StrStyle::Raw(0)) => (Pat::Str(\"br\\\"\"), Pat::Str(\"\\\"\")),\n+        LitKind::ByteStr(_, StrStyle::Raw(_)) => (Pat::Str(\"br#\\\"\"), Pat::Str(\"#\")),\n         LitKind::Byte(_) => (Pat::Str(\"b'\"), Pat::Str(\"'\")),\n         LitKind::Char(_) => (Pat::Str(\"'\"), Pat::Str(\"'\")),\n         LitKind::Int(_, LitIntType::Signed(IntTy::Isize)) => (Pat::Num, Pat::Str(\"isize\")),"}, {"sha": "7a637d32babecab6656bd5705f5dbf1873449f60", "filename": "src/tools/clippy/clippy_utils/src/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7f35c42d474f893c56b6e0f7df3f8bb965f2650/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f35c42d474f893c56b6e0f7df3f8bb965f2650/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fconsts.rs?ref=a7f35c42d474f893c56b6e0f7df3f8bb965f2650", "patch": "@@ -210,7 +210,7 @@ pub fn lit_to_mir_constant(lit: &LitKind, ty: Option<Ty<'_>>) -> Constant {\n     match *lit {\n         LitKind::Str(ref is, _) => Constant::Str(is.to_string()),\n         LitKind::Byte(b) => Constant::Int(u128::from(b)),\n-        LitKind::ByteStr(ref s) => Constant::Binary(Lrc::clone(s)),\n+        LitKind::ByteStr(ref s, _) => Constant::Binary(Lrc::clone(s)),\n         LitKind::Char(c) => Constant::Char(c),\n         LitKind::Int(n, _) => Constant::Int(n),\n         LitKind::Float(ref is, LitFloatType::Suffixed(fty)) => match fty {"}]}