{"sha": "d45f87701ce9926ecd4f4e01c4a60443227de62d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0NWY4NzcwMWNlOTkyNmVjZDRmNGUwMWM0YTYwNDQzMjI3ZGU2MmQ=", "commit": {"author": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2018-09-22T21:19:39Z"}, "committer": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2018-09-27T23:53:59Z"}, "message": "Emit only necessary compilation options in save-analysis\n\nThis is `command`, `directory` and `output` file.", "tree": {"sha": "9434d7df599de9eb8d29c754927ca411d3c4b72b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9434d7df599de9eb8d29c754927ca411d3c4b72b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d45f87701ce9926ecd4f4e01c4a60443227de62d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d45f87701ce9926ecd4f4e01c4a60443227de62d", "html_url": "https://github.com/rust-lang/rust/commit/d45f87701ce9926ecd4f4e01c4a60443227de62d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d45f87701ce9926ecd4f4e01c4a60443227de62d/comments", "author": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cddd00a1e60924fd41e2b51cfd22b9756f6145e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/cddd00a1e60924fd41e2b51cfd22b9756f6145e8", "html_url": "https://github.com/rust-lang/rust/commit/cddd00a1e60924fd41e2b51cfd22b9756f6145e8"}], "stats": {"total": 81, "additions": 47, "deletions": 34}, "files": [{"sha": "5a44b696a03e16e22fd4dd7757d802ecf98d3603", "filename": "src/Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d45f87701ce9926ecd4f4e01c4a60443227de62d/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/d45f87701ce9926ecd4f4e01c4a60443227de62d/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=d45f87701ce9926ecd4f4e01c4a60443227de62d", "patch": "@@ -2373,6 +2373,7 @@ dependencies = [\n  \"rls-span 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc_codegen_utils 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_target 0.0.0\",\n  \"rustc_typeck 0.0.0\","}, {"sha": "e47f89c64ff075154e85bcf8a9a7c1dc8ac4c620", "filename": "src/librustc_save_analysis/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d45f87701ce9926ecd4f4e01c4a60443227de62d/src%2Flibrustc_save_analysis%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d45f87701ce9926ecd4f4e01c4a60443227de62d/src%2Flibrustc_save_analysis%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2FCargo.toml?ref=d45f87701ce9926ecd4f4e01c4a60443227de62d", "patch": "@@ -12,6 +12,7 @@ crate-type = [\"dylib\"]\n log = \"0.4\"\n rustc = { path = \"../librustc\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n+rustc_codegen_utils = { path = \"../librustc_codegen_utils\" }\n rustc_target = { path = \"../librustc_target\" }\n rustc_typeck = { path = \"../librustc_typeck\" }\n syntax = { path = \"../libsyntax\" }"}, {"sha": "c87f52f8bd158e202277e04a7325ab43ec404a20", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 19, "deletions": 22, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/d45f87701ce9926ecd4f4e01c4a60443227de62d/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45f87701ce9926ecd4f4e01c4a60443227de62d/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=d45f87701ce9926ecd4f4e01c4a60443227de62d", "patch": "@@ -28,8 +28,9 @@ use rustc::hir::def_id::DefId;\n use rustc::ty::{self, TyCtxt};\n use rustc_data_structures::fx::FxHashSet;\n \n-use std::path::{Path, PathBuf};\n+use std::path::Path;\n use std::env;\n+use std::fs;\n \n use syntax::ast::{self, Attribute, NodeId, PatKind, CRATE_NODE_ID};\n use syntax::parse::token;\n@@ -172,11 +173,20 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n         self.dumper.crate_prelude(data);\n     }\n \n-    pub fn dump_compilation_options(&mut self) {\n-        // Apply possible `remap-path-prefix` remapping to the raw invocation\n-        let invocation = {\n+    pub fn dump_compilation_options(&mut self, crate_name: &str) {\n+        // Apply possible `remap-path-prefix` remapping to the raw command\n+        let command = {\n+            let mapping = self.tcx.sess.source_map().path_mapping();\n+            let remap_arg = |x: &str| -> String {\n+                match fs::canonicalize(x) {\n+                    Ok(path) => mapping.map_prefix(path).0.to_str().unwrap().to_owned(),\n+                    Err(_) => x.to_owned(), // Probably not a path, ignore\n+                }\n+            };\n+\n             let remap_arg_indices = {\n                 let mut indices = FxHashSet();\n+                // rustc args are guaranteed to be valid UTF-8 (checked early)\n                 for (i, e) in env::args().enumerate() {\n                     if e.starts_with(\"--remap-path-prefix=\") {\n                         indices.insert(i);\n@@ -188,19 +198,10 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n                 indices\n             };\n \n-            let args_without_remap_args = env::args()\n+            let args = env::args()\n                 .enumerate()\n                 .filter(|(i, _)| !remap_arg_indices.contains(i))\n-                .map(|(_, e)| e);\n-\n-            let mapping = self.tcx.sess.source_map().path_mapping();\n-            let remap_arg = |x: &str| -> String {\n-                mapping.map_prefix(PathBuf::from(x)).0.to_str().unwrap().to_owned()\n-            };\n-\n-            // Naively attempt to remap every argument\n-            let args = args_without_remap_args\n-                .map(|elem| {\n+                .map(|(_, elem)| {\n                     let mut arg = elem.splitn(2, '=');\n                     match (arg.next(), arg.next()) {\n                         // Apart from `--remap...`, in `a=b` args usually only\n@@ -214,14 +215,10 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n             args.as_slice().join(\" \")\n         };\n \n-        let opts = &self.tcx.sess.opts;\n-\n         let data = CompilationOptions {\n-            invocation,\n-            crate_name: opts.crate_name.clone(),\n-            test: opts.test,\n-            sysroot: opts.maybe_sysroot.clone(),\n-            target_triple: opts.target_triple.to_string(),\n+            directory: self.tcx.sess.working_dir.0.clone(),\n+            command,\n+            output: self.save_ctxt.compilation_output(crate_name),\n         };\n \n         self.dumper.compilation_opts(data);"}, {"sha": "702edb70757139da0acb5b553718e6a292b1a05b", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 26, "deletions": 12, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/d45f87701ce9926ecd4f4e01c4a60443227de62d/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45f87701ce9926ecd4f4e01c4a60443227de62d/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=d45f87701ce9926ecd4f4e01c4a60443227de62d", "patch": "@@ -23,6 +23,7 @@ extern crate rustc;\n #[macro_use]\n extern crate log;\n extern crate rustc_data_structures;\n+extern crate rustc_codegen_utils;\n extern crate rustc_serialize;\n extern crate rustc_target;\n extern crate rustc_typeck;\n@@ -45,9 +46,10 @@ use rustc::hir::def::Def as HirDef;\n use rustc::hir::Node;\n use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::middle::cstore::ExternCrate;\n-use rustc::session::config::CrateType;\n+use rustc::session::config::{CrateType, OutputType};\n use rustc::ty::{self, TyCtxt};\n use rustc_typeck::hir_ty_to_ty;\n+use rustc_codegen_utils::link::{filename_for_metadata, out_filename};\n \n use std::cell::Cell;\n use std::default::Default;\n@@ -111,6 +113,24 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n         }\n     }\n \n+    // Returns path to the compilation output (e.g. libfoo-12345678.rmeta)\n+    pub fn compilation_output(&self, crate_name: &str) -> PathBuf {\n+        let sess = &self.tcx.sess;\n+        // Save-analysis is emitted per whole session, not per each crate type\n+        let crate_type = sess.crate_types.borrow()[0];\n+        let outputs = &*self.tcx.output_filenames(LOCAL_CRATE);\n+\n+        if outputs.outputs.contains_key(&OutputType::Metadata) {\n+            filename_for_metadata(sess, crate_name, outputs)\n+        } else if outputs.outputs.should_codegen() {\n+            out_filename(sess, crate_type, outputs, crate_name)\n+        } else {\n+            // Otherwise it's only a DepInfo, in which case we return early and\n+            // not even reach the analysis stage.\n+            unreachable!()\n+        }\n+    }\n+\n     // List external crates used by the current crate.\n     pub fn get_external_crates(&self) -> Vec<ExternalCrateData> {\n         let mut result = Vec::with_capacity(self.tcx.crates().len());\n@@ -139,15 +159,9 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     disambiguator: self.tcx.crate_disambiguator(n).to_fingerprint().as_value(),\n                 },\n                 source: CrateSource {\n-                    dylib: src.dylib.as_ref().map(|(ref path, _)|\n-                        map_prefix(path).display().to_string()\n-                    ),\n-                    rlib: src.rlib.as_ref().map(|(ref path, _)|\n-                        map_prefix(path).display().to_string()\n-                    ),\n-                    rmeta: src.rmeta.as_ref().map(|(ref path, _)|\n-                        map_prefix(path).display().to_string()\n-                    ),\n+                    dylib: src.dylib.as_ref().map(|(path, _)| map_prefix(path)),\n+                    rlib: src.rlib.as_ref().map(|(path, _)| map_prefix(path)),\n+                    rmeta: src.rmeta.as_ref().map(|(path, _)| map_prefix(path)),\n                 }\n             });\n         }\n@@ -1103,7 +1117,7 @@ impl<'a> SaveHandler for DumpHandler<'a> {\n         let mut visitor = DumpVisitor::new(save_ctxt, &mut dumper);\n \n         visitor.dump_crate_info(cratename, krate);\n-        visitor.dump_compilation_options();\n+        visitor.dump_compilation_options(cratename);\n         visit::walk_crate(&mut visitor, krate);\n     }\n }\n@@ -1129,7 +1143,7 @@ impl<'b> SaveHandler for CallbackHandler<'b> {\n         let mut visitor = DumpVisitor::new(save_ctxt, &mut dumper);\n \n         visitor.dump_crate_info(cratename, krate);\n-        visitor.dump_compilation_options();\n+        visitor.dump_compilation_options(cratename);\n         visit::walk_crate(&mut visitor, krate);\n     }\n }"}]}