{"sha": "65a6e22668c32c81dbe6a996a7012270c01eb114", "node_id": "C_kwDOAAsO6NoAKDY1YTZlMjI2NjhjMzJjODFkYmU2YTk5NmE3MDEyMjcwYzAxZWIxMTQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-24T23:45:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-24T23:45:32Z"}, "message": "Auto merge of #104845 - matthiaskrgr:rollup-tckj956, r=matthiaskrgr\n\nRollup of 11 pull requests\n\nSuccessful merges:\n\n - #104514 (Use node_ty_opt to avoid ICE in visit_ty)\n - #104704 (Allow power10-vector feature in PowerPC)\n - #104747 (resolve: Don't use constructor def ids in the map for field names)\n - #104773 (OpaqueCast projections are always overlapping, they can't possibly be disjoint)\n - #104774 (Document split{_ascii,}_whitespace() for empty strings)\n - #104780 (make `error_reported` check for delayed bugs)\n - #104782 (Bump the const eval step limit)\n - #104792 (rustdoc: simplify `.search-results-title` CSS)\n - #104796 (lint: do not warn unused parens around higher-ranked function pointers)\n - #104820 (Remove normalize_projection_type)\n - #104822 (with_query_mode -> new)\n\nFailed merges:\n\n - #104716 (move 2 candidates into builtin candidate)\n - #104841 (Assert that we don't capture escaping bound vars in `Fn` trait selection)\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "f8a95579cc7ceb79b7ee2b3a551505be1054cb1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8a95579cc7ceb79b7ee2b3a551505be1054cb1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65a6e22668c32c81dbe6a996a7012270c01eb114", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65a6e22668c32c81dbe6a996a7012270c01eb114", "html_url": "https://github.com/rust-lang/rust/commit/65a6e22668c32c81dbe6a996a7012270c01eb114", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65a6e22668c32c81dbe6a996a7012270c01eb114/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3bc6bf31265ac10946a0832092dbcedf9b26805", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3bc6bf31265ac10946a0832092dbcedf9b26805", "html_url": "https://github.com/rust-lang/rust/commit/b3bc6bf31265ac10946a0832092dbcedf9b26805"}, {"sha": "1048a85dbe5a5d5cc17a7142054165fc81dc3a88", "url": "https://api.github.com/repos/rust-lang/rust/commits/1048a85dbe5a5d5cc17a7142054165fc81dc3a88", "html_url": "https://github.com/rust-lang/rust/commit/1048a85dbe5a5d5cc17a7142054165fc81dc3a88"}], "stats": {"total": 276, "additions": 149, "deletions": 127}, "files": [{"sha": "89ac0dfa4d6f51c2e61225b7d27b8fda4895bb57", "filename": "compiler/rustc_borrowck/src/places_conflict.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/65a6e22668c32c81dbe6a996a7012270c01eb114/compiler%2Frustc_borrowck%2Fsrc%2Fplaces_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65a6e22668c32c81dbe6a996a7012270c01eb114/compiler%2Frustc_borrowck%2Fsrc%2Fplaces_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fplaces_conflict.rs?ref=65a6e22668c32c81dbe6a996a7012270c01eb114", "patch": "@@ -320,16 +320,10 @@ fn place_projection_conflict<'tcx>(\n             debug!(\"place_element_conflict: DISJOINT-OR-EQ-DEREF\");\n             Overlap::EqualOrDisjoint\n         }\n-        (ProjectionElem::OpaqueCast(v1), ProjectionElem::OpaqueCast(v2)) => {\n-            if v1 == v2 {\n-                // same type - recur.\n-                debug!(\"place_element_conflict: DISJOINT-OR-EQ-OPAQUE\");\n-                Overlap::EqualOrDisjoint\n-            } else {\n-                // Different types. Disjoint!\n-                debug!(\"place_element_conflict: DISJOINT-OPAQUE\");\n-                Overlap::Disjoint\n-            }\n+        (ProjectionElem::OpaqueCast(_), ProjectionElem::OpaqueCast(_)) => {\n+            // casts to other types may always conflict irrespective of the type being cast to.\n+            debug!(\"place_element_conflict: DISJOINT-OR-EQ-OPAQUE\");\n+            Overlap::EqualOrDisjoint\n         }\n         (ProjectionElem::Field(f1, _), ProjectionElem::Field(f2, _)) => {\n             if f1 == f2 {"}, {"sha": "301683e8e85449370652ce4825c666715b488e8d", "filename": "compiler/rustc_codegen_ssa/src/target_features.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65a6e22668c32c81dbe6a996a7012270c01eb114/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65a6e22668c32c81dbe6a996a7012270c01eb114/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs?ref=65a6e22668c32c81dbe6a996a7012270c01eb114", "patch": "@@ -215,6 +215,7 @@ const HEXAGON_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n const POWERPC_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n     // tidy-alphabetical-start\n     (\"altivec\", Some(sym::powerpc_target_feature)),\n+    (\"power10-vector\", Some(sym::powerpc_target_feature)),\n     (\"power8-altivec\", Some(sym::powerpc_target_feature)),\n     (\"power8-vector\", Some(sym::powerpc_target_feature)),\n     (\"power9-altivec\", Some(sym::powerpc_target_feature)),"}, {"sha": "2be36a6eeb4a25c55f32174be78fb93f47a90d50", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/65a6e22668c32c81dbe6a996a7012270c01eb114/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65a6e22668c32c81dbe6a996a7012270c01eb114/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=65a6e22668c32c81dbe6a996a7012270c01eb114", "patch": "@@ -1044,13 +1044,24 @@ impl Handler {\n     }\n     pub fn has_errors_or_lint_errors(&self) -> Option<ErrorGuaranteed> {\n         if self.inner.borrow().has_errors_or_lint_errors() {\n-            Some(ErrorGuaranteed(()))\n+            Some(ErrorGuaranteed::unchecked_claim_error_was_emitted())\n+        } else {\n+            None\n+        }\n+    }\n+    pub fn has_errors_or_delayed_span_bugs(&self) -> Option<ErrorGuaranteed> {\n+        if self.inner.borrow().has_errors_or_delayed_span_bugs() {\n+            Some(ErrorGuaranteed::unchecked_claim_error_was_emitted())\n         } else {\n             None\n         }\n     }\n-    pub fn has_errors_or_delayed_span_bugs(&self) -> bool {\n-        self.inner.borrow().has_errors_or_delayed_span_bugs()\n+    pub fn is_compilation_going_to_fail(&self) -> Option<ErrorGuaranteed> {\n+        if self.inner.borrow().is_compilation_going_to_fail() {\n+            Some(ErrorGuaranteed::unchecked_claim_error_was_emitted())\n+        } else {\n+            None\n+        }\n     }\n \n     pub fn print_error_count(&self, registry: &Registry) {\n@@ -1484,6 +1495,10 @@ impl HandlerInner {\n         self.err_count() > 0 || self.lint_err_count > 0 || self.warn_count > 0\n     }\n \n+    fn is_compilation_going_to_fail(&self) -> bool {\n+        self.has_errors() || self.lint_err_count > 0 || !self.delayed_span_bugs.is_empty()\n+    }\n+\n     fn abort_if_errors(&mut self) {\n         self.emit_stashed_diagnostics();\n "}, {"sha": "58ced6a1d3b4ffb90308cd91e64d1012b1c245df", "filename": "compiler/rustc_hir_typeck/src/writeback.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/65a6e22668c32c81dbe6a996a7012270c01eb114/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65a6e22668c32c81dbe6a996a7012270c01eb114/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs?ref=65a6e22668c32c81dbe6a996a7012270c01eb114", "patch": "@@ -361,9 +361,12 @@ impl<'cx, 'tcx> Visitor<'tcx> for WritebackCx<'cx, 'tcx> {\n \n     fn visit_ty(&mut self, hir_ty: &'tcx hir::Ty<'tcx>) {\n         intravisit::walk_ty(self, hir_ty);\n-        let ty = self.fcx.node_ty(hir_ty.hir_id);\n-        let ty = self.resolve(ty, &hir_ty.span);\n-        self.write_ty_to_typeck_results(hir_ty.hir_id, ty);\n+        // If there are type checking errors, Type privacy pass will stop,\n+        // so we may not get the type from hid_id, see #104513\n+        if let Some(ty) = self.fcx.node_ty_opt(hir_ty.hir_id) {\n+            let ty = self.resolve(ty, &hir_ty.span);\n+            self.write_ty_to_typeck_results(hir_ty.hir_id, ty);\n+        }\n     }\n \n     fn visit_infer(&mut self, inf: &'tcx hir::InferArg) {"}, {"sha": "58d6e6d7efd69c0d757ff903b4356a586904f7d9", "filename": "compiler/rustc_incremental/src/persist/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65a6e22668c32c81dbe6a996a7012270c01eb114/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65a6e22668c32c81dbe6a996a7012270c01eb114/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs?ref=65a6e22668c32c81dbe6a996a7012270c01eb114", "patch": "@@ -322,7 +322,7 @@ pub fn finalize_session_directory(sess: &Session, svh: Svh) {\n \n     let incr_comp_session_dir: PathBuf = sess.incr_comp_session_dir().clone();\n \n-    if sess.has_errors_or_delayed_span_bugs() {\n+    if let Some(_) = sess.has_errors_or_delayed_span_bugs() {\n         // If there have been any errors during compilation, we don't want to\n         // publish this session directory. Rather, we'll just delete it.\n "}, {"sha": "6e9dcdd981ec4d87b265686aec3789e2a3c23868", "filename": "compiler/rustc_incremental/src/persist/save.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65a6e22668c32c81dbe6a996a7012270c01eb114/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fsave.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65a6e22668c32c81dbe6a996a7012270c01eb114/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fsave.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fsave.rs?ref=65a6e22668c32c81dbe6a996a7012270c01eb114", "patch": "@@ -28,7 +28,7 @@ pub fn save_dep_graph(tcx: TyCtxt<'_>) {\n             return;\n         }\n         // This is going to be deleted in finalize_session_directory, so let's not create it\n-        if sess.has_errors_or_delayed_span_bugs() {\n+        if let Some(_) = sess.has_errors_or_delayed_span_bugs() {\n             return;\n         }\n \n@@ -89,7 +89,7 @@ pub fn save_work_product_index(\n         return;\n     }\n     // This is going to be deleted in finalize_session_directory, so let's not create it\n-    if sess.has_errors_or_delayed_span_bugs() {\n+    if let Some(_) = sess.has_errors_or_delayed_span_bugs() {\n         return;\n     }\n "}, {"sha": "d3519f4b37b8287b254efd802ae4edeaa3b174e5", "filename": "compiler/rustc_infer/src/traits/engine.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/65a6e22668c32c81dbe6a996a7012270c01eb114/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65a6e22668c32c81dbe6a996a7012270c01eb114/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs?ref=65a6e22668c32c81dbe6a996a7012270c01eb114", "patch": "@@ -8,14 +8,6 @@ use super::FulfillmentError;\n use super::{ObligationCause, PredicateObligation};\n \n pub trait TraitEngine<'tcx>: 'tcx {\n-    fn normalize_projection_type(\n-        &mut self,\n-        infcx: &InferCtxt<'tcx>,\n-        param_env: ty::ParamEnv<'tcx>,\n-        projection_ty: ty::ProjectionTy<'tcx>,\n-        cause: ObligationCause<'tcx>,\n-    ) -> Ty<'tcx>;\n-\n     /// Requires that `ty` must implement the trait with `def_id` in\n     /// the given environment. This trait must not have any type\n     /// parameters (except for `Self`)."}, {"sha": "5c9217db11844b735ab330af3d0a56435a72f58b", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65a6e22668c32c81dbe6a996a7012270c01eb114/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65a6e22668c32c81dbe6a996a7012270c01eb114/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=65a6e22668c32c81dbe6a996a7012270c01eb114", "patch": "@@ -1015,6 +1015,7 @@ impl EarlyLintPass for UnusedParens {\n         if let ast::TyKind::Paren(r) = &ty.kind {\n             match &r.kind {\n                 ast::TyKind::TraitObject(..) => {}\n+                ast::TyKind::BareFn(b) if b.generic_params.len() > 0 => {}\n                 ast::TyKind::ImplTrait(_, bounds) if bounds.len() > 1 => {}\n                 ast::TyKind::Array(_, len) => {\n                     self.check_unused_delims_expr("}, {"sha": "12aef66bcf947d21c4383a28dd9ad8f7a61fdcd8", "filename": "compiler/rustc_middle/src/middle/limits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65a6e22668c32c81dbe6a996a7012270c01eb114/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flimits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65a6e22668c32c81dbe6a996a7012270c01eb114/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flimits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flimits.rs?ref=65a6e22668c32c81dbe6a996a7012270c01eb114", "patch": "@@ -38,7 +38,7 @@ pub fn provide(providers: &mut ty::query::Providers) {\n             tcx.hir().krate_attrs(),\n             tcx.sess,\n             sym::const_eval_limit,\n-            1_000_000,\n+            2_000_000,\n         ),\n     }\n }"}, {"sha": "b04afe549ac551d4bc1e516dcc40cb39e378d38f", "filename": "compiler/rustc_middle/src/ty/visit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65a6e22668c32c81dbe6a996a7012270c01eb114/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65a6e22668c32c81dbe6a996a7012270c01eb114/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs?ref=65a6e22668c32c81dbe6a996a7012270c01eb114", "patch": "@@ -97,10 +97,10 @@ pub trait TypeVisitable<'tcx>: fmt::Debug + Clone {\n     }\n     fn error_reported(&self) -> Result<(), ErrorGuaranteed> {\n         if self.references_error() {\n-            if let Some(reported) = ty::tls::with(|tcx| tcx.sess.has_errors()) {\n+            if let Some(reported) = ty::tls::with(|tcx| tcx.sess.is_compilation_going_to_fail()) {\n                 Err(reported)\n             } else {\n-                bug!(\"expect tcx.sess.has_errors return true\");\n+                bug!(\"expect tcx.sess.is_compilation_going_to_fail return `Some`\");\n             }\n         } else {\n             Ok(())"}, {"sha": "e90afc591b53e0b9e5d057fc03faebb3116cfedd", "filename": "compiler/rustc_query_system/src/dep_graph/graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65a6e22668c32c81dbe6a996a7012270c01eb114/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65a6e22668c32c81dbe6a996a7012270c01eb114/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs?ref=65a6e22668c32c81dbe6a996a7012270c01eb114", "patch": "@@ -667,7 +667,7 @@ impl<K: DepKind> DepGraph<K> {\n             None => {}\n         }\n \n-        if !qcx.dep_context().sess().has_errors_or_delayed_span_bugs() {\n+        if let None = qcx.dep_context().sess().has_errors_or_delayed_span_bugs() {\n             panic!(\"try_mark_previous_green() - Forcing the DepNode should have set its color\")\n         }\n "}, {"sha": "fff3f0467dfc4ae72dd5560ae3a8065b1886f594", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 10, "deletions": 18, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/65a6e22668c32c81dbe6a996a7012270c01eb114/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65a6e22668c32c81dbe6a996a7012270c01eb114/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=65a6e22668c32c81dbe6a996a7012270c01eb114", "patch": "@@ -30,7 +30,7 @@ use rustc_middle::metadata::ModChild;\n use rustc_middle::ty::{self, DefIdTree};\n use rustc_session::cstore::CrateStore;\n use rustc_span::hygiene::{ExpnId, LocalExpnId, MacroKind};\n-use rustc_span::source_map::{respan, Spanned};\n+use rustc_span::source_map::respan;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::Span;\n \n@@ -329,10 +329,12 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n             .iter()\n             .map(|field| respan(field.span, field.ident.map_or(kw::Empty, |ident| ident.name)))\n             .collect();\n-        self.insert_field_names(def_id, field_names);\n+        self.r.field_names.insert(def_id, field_names);\n     }\n \n-    fn insert_field_names(&mut self, def_id: DefId, field_names: Vec<Spanned<Symbol>>) {\n+    fn insert_field_names_extern(&mut self, def_id: DefId) {\n+        let field_names =\n+            self.r.cstore().struct_field_names_untracked(def_id, self.r.session).collect();\n         self.r.field_names.insert(def_id, field_names);\n     }\n \n@@ -995,8 +997,6 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n         let cstore = self.r.cstore();\n         match res {\n             Res::Def(DefKind::Struct, def_id) => {\n-                let field_names =\n-                    cstore.struct_field_names_untracked(def_id, self.r.session).collect();\n                 if let Some((ctor_kind, ctor_def_id)) = cstore.ctor_untracked(def_id) {\n                     let ctor_res = Res::Def(DefKind::Ctor(CtorOf::Struct, ctor_kind), ctor_def_id);\n                     let ctor_vis = cstore.visibility_untracked(ctor_def_id);\n@@ -1006,13 +1006,9 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                         .struct_constructors\n                         .insert(def_id, (ctor_res, ctor_vis, field_visibilities));\n                 }\n-                self.insert_field_names(def_id, field_names);\n-            }\n-            Res::Def(DefKind::Union, def_id) => {\n-                let field_names =\n-                    cstore.struct_field_names_untracked(def_id, self.r.session).collect();\n-                self.insert_field_names(def_id, field_names);\n+                self.insert_field_names_extern(def_id)\n             }\n+            Res::Def(DefKind::Union, def_id) => self.insert_field_names_extern(def_id),\n             Res::Def(DefKind::AssocFn, def_id) => {\n                 if cstore.fn_has_self_parameter_untracked(def_id, self.r.session) {\n                     self.r.has_self.insert(def_id);\n@@ -1514,20 +1510,16 @@ impl<'a, 'b> Visitor<'b> for BuildReducedGraphVisitor<'a, 'b> {\n         };\n \n         // Define a constructor name in the value namespace.\n-        let fields_id = if let Some((ctor_kind, ctor_node_id)) = CtorKind::from_ast(&variant.data) {\n+        if let Some((ctor_kind, ctor_node_id)) = CtorKind::from_ast(&variant.data) {\n             let ctor_def_id = self.r.local_def_id(ctor_node_id);\n             let ctor_res =\n                 Res::Def(DefKind::Ctor(CtorOf::Variant, ctor_kind), ctor_def_id.to_def_id());\n             self.r.define(parent, ident, ValueNS, (ctor_res, ctor_vis, variant.span, expn_id));\n             self.r.visibilities.insert(ctor_def_id, ctor_vis);\n-            ctor_def_id\n-        } else {\n-            def_id\n-        };\n+        }\n \n         // Record field names for error reporting.\n-        // FIXME: Always use non-ctor id as the key.\n-        self.insert_field_names_local(fields_id.to_def_id(), &variant.data);\n+        self.insert_field_names_local(def_id.to_def_id(), &variant.data);\n \n         visit::walk_variant(self, variant);\n     }"}, {"sha": "9c95adc628bc6a588c1c2f4a94946f121f9a375c", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/65a6e22668c32c81dbe6a996a7012270c01eb114/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65a6e22668c32c81dbe6a996a7012270c01eb114/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=65a6e22668c32c81dbe6a996a7012270c01eb114", "patch": "@@ -21,6 +21,7 @@ use rustc_hir::def::Namespace::{self, *};\n use rustc_hir::def::{self, CtorKind, CtorOf, DefKind};\n use rustc_hir::def_id::{DefId, CRATE_DEF_ID, LOCAL_CRATE};\n use rustc_hir::PrimTy;\n+use rustc_middle::ty::DefIdTree;\n use rustc_session::lint;\n use rustc_session::parse::feature_err;\n use rustc_session::Session;\n@@ -1462,7 +1463,8 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                     _ => return false,\n                 }\n             }\n-            (Res::Def(DefKind::Ctor(_, CtorKind::Fn), def_id), _) if ns == ValueNS => {\n+            (Res::Def(DefKind::Ctor(_, CtorKind::Fn), ctor_def_id), _) if ns == ValueNS => {\n+                let def_id = self.r.parent(ctor_def_id);\n                 if let Some(span) = self.def_span(def_id) {\n                     err.span_label(span, &format!(\"`{}` defined here\", path_str));\n                 }\n@@ -1953,7 +1955,8 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                 ));\n             }\n         } else {\n-            let needs_placeholder = |def_id: DefId, kind: CtorKind| {\n+            let needs_placeholder = |ctor_def_id: DefId, kind: CtorKind| {\n+                let def_id = self.r.parent(ctor_def_id);\n                 let has_no_fields = self.r.field_names.get(&def_id).map_or(false, |f| f.is_empty());\n                 match kind {\n                     CtorKind::Const => false,"}, {"sha": "e99e460913ef0f8799cd5d9412b59e11b8619ff6", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/65a6e22668c32c81dbe6a996a7012270c01eb114/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65a6e22668c32c81dbe6a996a7012270c01eb114/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=65a6e22668c32c81dbe6a996a7012270c01eb114", "patch": "@@ -538,9 +538,12 @@ impl Session {\n     pub fn has_errors(&self) -> Option<ErrorGuaranteed> {\n         self.diagnostic().has_errors()\n     }\n-    pub fn has_errors_or_delayed_span_bugs(&self) -> bool {\n+    pub fn has_errors_or_delayed_span_bugs(&self) -> Option<ErrorGuaranteed> {\n         self.diagnostic().has_errors_or_delayed_span_bugs()\n     }\n+    pub fn is_compilation_going_to_fail(&self) -> Option<ErrorGuaranteed> {\n+        self.diagnostic().is_compilation_going_to_fail()\n+    }\n     pub fn abort_if_errors(&self) {\n         self.diagnostic().abort_if_errors();\n     }"}, {"sha": "1102f44a82efe2431b9af221cb36d5b3a0be2a29", "filename": "compiler/rustc_trait_selection/src/autoderef.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/65a6e22668c32c81dbe6a996a7012270c01eb114/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65a6e22668c32c81dbe6a996a7012270c01eb114/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs?ref=65a6e22668c32c81dbe6a996a7012270c01eb114", "patch": "@@ -1,4 +1,5 @@\n use crate::errors::AutoDerefReachedRecursionLimit;\n+use crate::infer::InferCtxtExt as _;\n use crate::traits::query::evaluate_obligation::InferCtxtExt;\n use crate::traits::{self, TraitEngine, TraitEngineExt};\n use rustc_hir as hir;\n@@ -137,16 +138,14 @@ impl<'a, 'tcx> Autoderef<'a, 'tcx> {\n             return None;\n         }\n \n-        let mut fulfillcx = <dyn TraitEngine<'tcx>>::new_in_snapshot(tcx);\n-        let normalized_ty = fulfillcx.normalize_projection_type(\n-            &self.infcx,\n-            self.param_env,\n-            ty::ProjectionTy {\n-                item_def_id: tcx.lang_items().deref_target()?,\n-                substs: trait_ref.substs,\n-            },\n+        let normalized_ty = self.infcx.partially_normalize_associated_types_in(\n             cause,\n+            self.param_env,\n+            tcx.mk_projection(tcx.lang_items().deref_target()?, trait_ref.substs),\n         );\n+        let mut fulfillcx = <dyn TraitEngine<'tcx>>::new_in_snapshot(tcx);\n+        let normalized_ty =\n+            normalized_ty.into_value_registering_obligations(self.infcx, &mut *fulfillcx);\n         let errors = fulfillcx.select_where_possible(&self.infcx);\n         if !errors.is_empty() {\n             // This shouldn't happen, except for evaluate/fulfill mismatches,"}, {"sha": "e88950523537f23ba2494ba122e1a9e10447c120", "filename": "compiler/rustc_trait_selection/src/traits/chalk_fulfill.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/65a6e22668c32c81dbe6a996a7012270c01eb114/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fchalk_fulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65a6e22668c32c81dbe6a996a7012270c01eb114/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fchalk_fulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fchalk_fulfill.rs?ref=65a6e22668c32c81dbe6a996a7012270c01eb114", "patch": "@@ -4,11 +4,11 @@ use crate::infer::canonical::OriginalQueryValues;\n use crate::infer::InferCtxt;\n use crate::traits::query::NoSolution;\n use crate::traits::{\n-    ChalkEnvironmentAndGoal, FulfillmentError, FulfillmentErrorCode, ObligationCause,\n-    PredicateObligation, SelectionError, TraitEngine,\n+    ChalkEnvironmentAndGoal, FulfillmentError, FulfillmentErrorCode, PredicateObligation,\n+    SelectionError, TraitEngine,\n };\n use rustc_data_structures::fx::{FxHashMap, FxIndexSet};\n-use rustc_middle::ty::{self, Ty, TypeVisitable};\n+use rustc_middle::ty::{self, TypeVisitable};\n \n pub struct FulfillmentContext<'tcx> {\n     obligations: FxIndexSet<PredicateObligation<'tcx>>,\n@@ -33,16 +33,6 @@ impl FulfillmentContext<'_> {\n }\n \n impl<'tcx> TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n-    fn normalize_projection_type(\n-        &mut self,\n-        infcx: &InferCtxt<'tcx>,\n-        _param_env: ty::ParamEnv<'tcx>,\n-        projection_ty: ty::ProjectionTy<'tcx>,\n-        _cause: ObligationCause<'tcx>,\n-    ) -> Ty<'tcx> {\n-        infcx.tcx.mk_ty(ty::Projection(projection_ty))\n-    }\n-\n     fn register_predicate_obligation(\n         &mut self,\n         infcx: &InferCtxt<'tcx>,"}, {"sha": "5cb0988919d261bf785f004a51a788d58b1431f6", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/65a6e22668c32c81dbe6a996a7012270c01eb114/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65a6e22668c32c81dbe6a996a7012270c01eb114/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=65a6e22668c32c81dbe6a996a7012270c01eb114", "patch": "@@ -2112,10 +2112,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 };\n \n                 let obligation = obligation.with(self.tcx, trait_ref.to_poly_trait_predicate());\n-                let mut selcx = SelectionContext::with_query_mode(\n-                    &self,\n-                    crate::traits::TraitQueryMode::Standard,\n-                );\n+                let mut selcx = SelectionContext::new(&self);\n                 match selcx.select_from_obligation(&obligation) {\n                     Ok(None) => {\n                         let impls = ambiguity::recompute_applicable_impls(self.infcx, &obligation);"}, {"sha": "e7513255dc40193e4e352aeef1066c68acd95950", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 3, "deletions": 39, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/65a6e22668c32c81dbe6a996a7012270c01eb114/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65a6e22668c32c81dbe6a996a7012270c01eb114/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=65a6e22668c32c81dbe6a996a7012270c01eb114", "patch": "@@ -4,12 +4,12 @@ use rustc_data_structures::obligation_forest::ProcessResult;\n use rustc_data_structures::obligation_forest::{Error, ForestObligation, Outcome};\n use rustc_data_structures::obligation_forest::{ObligationForest, ObligationProcessor};\n use rustc_infer::traits::ProjectionCacheKey;\n-use rustc_infer::traits::{SelectionError, TraitEngine, TraitEngineExt as _, TraitObligation};\n+use rustc_infer::traits::{SelectionError, TraitEngine, TraitObligation};\n use rustc_middle::mir::interpret::ErrorHandled;\n use rustc_middle::ty::abstract_const::NotConstEvaluatable;\n use rustc_middle::ty::error::{ExpectedFound, TypeError};\n use rustc_middle::ty::subst::SubstsRef;\n-use rustc_middle::ty::{self, Binder, Const, Ty, TypeVisitable};\n+use rustc_middle::ty::{self, Binder, Const, TypeVisitable};\n use std::marker::PhantomData;\n \n use super::const_evaluatable;\n@@ -20,9 +20,9 @@ use super::CodeAmbiguity;\n use super::CodeProjectionError;\n use super::CodeSelectionError;\n use super::EvaluationResult;\n+use super::PredicateObligation;\n use super::Unimplemented;\n use super::{FulfillmentError, FulfillmentErrorCode};\n-use super::{ObligationCause, PredicateObligation};\n \n use crate::traits::project::PolyProjectionObligation;\n use crate::traits::project::ProjectionCacheKeyExt as _;\n@@ -126,42 +126,6 @@ impl<'a, 'tcx> FulfillmentContext<'tcx> {\n }\n \n impl<'tcx> TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n-    /// \"Normalize\" a projection type `<SomeType as SomeTrait>::X` by\n-    /// creating a fresh type variable `$0` as well as a projection\n-    /// predicate `<SomeType as SomeTrait>::X == $0`. When the\n-    /// inference engine runs, it will attempt to find an impl of\n-    /// `SomeTrait` or a where-clause that lets us unify `$0` with\n-    /// something concrete. If this fails, we'll unify `$0` with\n-    /// `projection_ty` again.\n-    #[instrument(level = \"debug\", skip(self, infcx, param_env, cause))]\n-    fn normalize_projection_type(\n-        &mut self,\n-        infcx: &InferCtxt<'tcx>,\n-        param_env: ty::ParamEnv<'tcx>,\n-        projection_ty: ty::ProjectionTy<'tcx>,\n-        cause: ObligationCause<'tcx>,\n-    ) -> Ty<'tcx> {\n-        debug_assert!(!projection_ty.has_escaping_bound_vars());\n-\n-        // FIXME(#20304) -- cache\n-\n-        let mut selcx = SelectionContext::new(infcx);\n-        let mut obligations = vec![];\n-        let normalized_ty = project::normalize_projection_type(\n-            &mut selcx,\n-            param_env,\n-            projection_ty,\n-            cause,\n-            0,\n-            &mut obligations,\n-        );\n-        self.register_predicate_obligations(infcx, obligations);\n-\n-        debug!(?normalized_ty);\n-\n-        normalized_ty.ty().unwrap()\n-    }\n-\n     fn register_predicate_obligation(\n         &mut self,\n         infcx: &InferCtxt<'tcx>,"}, {"sha": "4a419fbe9528856bb2147ae2215588cdec0c2828", "filename": "compiler/rustc_trait_selection/src/traits/query/evaluate_obligation.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/65a6e22668c32c81dbe6a996a7012270c01eb114/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fevaluate_obligation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65a6e22668c32c81dbe6a996a7012270c01eb114/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fevaluate_obligation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fevaluate_obligation.rs?ref=65a6e22668c32c81dbe6a996a7012270c01eb114", "patch": "@@ -2,9 +2,7 @@ use rustc_middle::ty;\n \n use crate::infer::canonical::OriginalQueryValues;\n use crate::infer::InferCtxt;\n-use crate::traits::{\n-    EvaluationResult, OverflowError, PredicateObligation, SelectionContext, TraitQueryMode,\n-};\n+use crate::traits::{EvaluationResult, OverflowError, PredicateObligation, SelectionContext};\n \n pub trait InferCtxtExt<'tcx> {\n     fn predicate_may_hold(&self, obligation: &PredicateObligation<'tcx>) -> bool;\n@@ -97,7 +95,7 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n         match self.evaluate_obligation(obligation) {\n             Ok(result) => result,\n             Err(OverflowError::Canonical) => {\n-                let mut selcx = SelectionContext::with_query_mode(&self, TraitQueryMode::Standard);\n+                let mut selcx = SelectionContext::new(&self);\n                 selcx.evaluate_root_obligation(obligation).unwrap_or_else(|r| match r {\n                     OverflowError::Canonical => {\n                         span_bug!("}, {"sha": "c0167388713388d7f1e4adbd00c54962eb5a7958", "filename": "library/core/src/str/mod.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/65a6e22668c32c81dbe6a996a7012270c01eb114/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65a6e22668c32c81dbe6a996a7012270c01eb114/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs?ref=65a6e22668c32c81dbe6a996a7012270c01eb114", "patch": "@@ -902,6 +902,12 @@ impl str {\n     ///\n     /// assert_eq!(None, iter.next());\n     /// ```\n+    ///\n+    /// If the string is empty or all whitespace, the iterator yields no string slices:\n+    /// ```\n+    /// assert_eq!(\"\".split_whitespace().next(), None);\n+    /// assert_eq!(\"   \".split_whitespace().next(), None);\n+    /// ```\n     #[must_use = \"this returns the split string as an iterator, \\\n                   without modifying the original\"]\n     #[stable(feature = \"split_whitespace\", since = \"1.1.0\")]\n@@ -946,6 +952,12 @@ impl str {\n     ///\n     /// assert_eq!(None, iter.next());\n     /// ```\n+    ///\n+    /// If the string is empty or all ASCII whitespace, the iterator yields no string slices:\n+    /// ```\n+    /// assert_eq!(\"\".split_ascii_whitespace().next(), None);\n+    /// assert_eq!(\"   \".split_ascii_whitespace().next(), None);\n+    /// ```\n     #[must_use = \"this returns the split string as an iterator, \\\n                   without modifying the original\"]\n     #[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"}, {"sha": "9b07fc90f6f0526f5fa928dd2f219d0c2e2721b3", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/65a6e22668c32c81dbe6a996a7012270c01eb114/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/65a6e22668c32c81dbe6a996a7012270c01eb114/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=65a6e22668c32c81dbe6a996a7012270c01eb114", "patch": "@@ -784,8 +784,7 @@ table,\n \tmargin-top: 0;\n \twhite-space: nowrap;\n \t/* flex layout allows shrinking the <select> appropriately if it becomes too large */\n-\tdisplay: inline-flex;\n-\tmax-width: 100%;\n+\tdisplay: flex;\n \t/* make things look like in a line, despite the fact that we're using a layout\n \twith boxes (i.e. from the flex layout) */\n \talign-items: baseline;"}, {"sha": "13a5e4c717b65ca35bca87a7e4b699c9ac103308", "filename": "src/test/rustdoc-gui/search-result-display.goml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/65a6e22668c32c81dbe6a996a7012270c01eb114/src%2Ftest%2Frustdoc-gui%2Fsearch-result-display.goml", "raw_url": "https://github.com/rust-lang/rust/raw/65a6e22668c32c81dbe6a996a7012270c01eb114/src%2Ftest%2Frustdoc-gui%2Fsearch-result-display.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsearch-result-display.goml?ref=65a6e22668c32c81dbe6a996a7012270c01eb114", "patch": "@@ -22,7 +22,8 @@ size: (900, 900)\n \n // First we check the current width, height and position.\n assert-css: (\"#crate-search\", {\"width\": \"223px\"})\n-assert-css: (\".search-results-title\", {\"height\": \"44px\", \"width\": \"336px\"})\n+assert-css: (\".search-results-title\", {\"height\": \"44px\", \"width\": \"640px\"})\n+assert-css: (\"#search\", {\"width\": \"640px\"})\n \n // Then we update the text of one of the `<option>`.\n text: ("}, {"sha": "4babc9a2850eb3cecafe010d1862b076524a0796", "filename": "src/test/ui/consts/const-eval/infinite_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65a6e22668c32c81dbe6a996a7012270c01eb114/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65a6e22668c32c81dbe6a996a7012270c01eb114/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.rs?ref=65a6e22668c32c81dbe6a996a7012270c01eb114", "patch": "@@ -4,8 +4,8 @@ fn main() {\n     let _ = [(); {\n         let mut n = 113383; // #20 in https://oeis.org/A006884\n         while n != 0 {\n-            n = if n % 2 == 0 { n/2 } else { 3*n + 1 };\n             //~^ ERROR evaluation of constant value failed\n+            n = if n % 2 == 0 { n/2 } else { 3*n + 1 };\n         }\n         n\n     }];"}, {"sha": "8b58cb279f376a77ccb005913248ef46027a3144", "filename": "src/test/ui/consts/const-eval/infinite_loop.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/65a6e22668c32c81dbe6a996a7012270c01eb114/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65a6e22668c32c81dbe6a996a7012270c01eb114/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.stderr?ref=65a6e22668c32c81dbe6a996a7012270c01eb114", "patch": "@@ -1,8 +1,8 @@\n error[E0080]: evaluation of constant value failed\n-  --> $DIR/infinite_loop.rs:7:20\n+  --> $DIR/infinite_loop.rs:6:15\n    |\n-LL |             n = if n % 2 == 0 { n/2 } else { 3*n + 1 };\n-   |                    ^^^^^^^^^^ exceeded interpreter step limit (see `#[const_eval_limit]`)\n+LL |         while n != 0 {\n+   |               ^^^^^^ exceeded interpreter step limit (see `#[const_eval_limit]`)\n \n error: aborting due to previous error\n "}, {"sha": "3192daafa0b925b95ad19a37c54c9d715faf3c9b", "filename": "src/test/ui/consts/issue-104768.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65a6e22668c32c81dbe6a996a7012270c01eb114/src%2Ftest%2Fui%2Fconsts%2Fissue-104768.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65a6e22668c32c81dbe6a996a7012270c01eb114/src%2Ftest%2Fui%2Fconsts%2Fissue-104768.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-104768.rs?ref=65a6e22668c32c81dbe6a996a7012270c01eb114", "patch": "@@ -0,0 +1,4 @@\n+const A: &_ = 0_u32;\n+//~^ ERROR: the placeholder `_` is not allowed within types on item signatures for constants\n+\n+fn main() {}"}, {"sha": "55b2b6f04358f7367f79cde7727c74b8122d6731", "filename": "src/test/ui/consts/issue-104768.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/65a6e22668c32c81dbe6a996a7012270c01eb114/src%2Ftest%2Fui%2Fconsts%2Fissue-104768.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65a6e22668c32c81dbe6a996a7012270c01eb114/src%2Ftest%2Fui%2Fconsts%2Fissue-104768.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-104768.stderr?ref=65a6e22668c32c81dbe6a996a7012270c01eb114", "patch": "@@ -0,0 +1,12 @@\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for constants\n+  --> $DIR/issue-104768.rs:1:10\n+   |\n+LL | const A: &_ = 0_u32;\n+   |          ^^\n+   |          |\n+   |          not allowed in type signatures\n+   |          help: replace with the correct type: `u32`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0121`."}, {"sha": "94e15cd96bc37fc15fb23054a5d8c819a8a9f2c3", "filename": "src/test/ui/lint/unused/issue-104397.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/65a6e22668c32c81dbe6a996a7012270c01eb114/src%2Ftest%2Fui%2Flint%2Funused%2Fissue-104397.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65a6e22668c32c81dbe6a996a7012270c01eb114/src%2Ftest%2Fui%2Flint%2Funused%2Fissue-104397.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Fissue-104397.rs?ref=65a6e22668c32c81dbe6a996a7012270c01eb114", "patch": "@@ -0,0 +1,18 @@\n+// check-pass\n+\n+#![warn(unused)]\n+#![deny(warnings)]\n+\n+struct Inv<'a>(&'a mut &'a ());\n+\n+trait Trait {}\n+impl Trait for for<'a> fn(Inv<'a>) {}\n+\n+fn with_bound()\n+where\n+    (for<'a> fn(Inv<'a>)): Trait,\n+{}\n+\n+fn main() {\n+    with_bound();\n+}"}, {"sha": "bcac0fa1e70ea2e9facb0a42477785be689370d4", "filename": "src/test/ui/typeck/issue-104513-ice.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/65a6e22668c32c81dbe6a996a7012270c01eb114/src%2Ftest%2Fui%2Ftypeck%2Fissue-104513-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65a6e22668c32c81dbe6a996a7012270c01eb114/src%2Ftest%2Fui%2Ftypeck%2Fissue-104513-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-104513-ice.rs?ref=65a6e22668c32c81dbe6a996a7012270c01eb114", "patch": "@@ -0,0 +1,6 @@\n+struct S;\n+fn f() {\n+    let _: S<impl Oops> = S; //~ ERROR cannot find trait `Oops` in this scope\n+    //~^ ERROR `impl Trait` only allowed in function and inherent method return types\n+}\n+fn main() {}"}, {"sha": "2b3b1b9efdfae4349d45dcd240e2063df4d09cc5", "filename": "src/test/ui/typeck/issue-104513-ice.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/65a6e22668c32c81dbe6a996a7012270c01eb114/src%2Ftest%2Fui%2Ftypeck%2Fissue-104513-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65a6e22668c32c81dbe6a996a7012270c01eb114/src%2Ftest%2Fui%2Ftypeck%2Fissue-104513-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-104513-ice.stderr?ref=65a6e22668c32c81dbe6a996a7012270c01eb114", "patch": "@@ -0,0 +1,18 @@\n+error[E0405]: cannot find trait `Oops` in this scope\n+  --> $DIR/issue-104513-ice.rs:3:19\n+   |\n+LL | fn f() {\n+   |     - help: you might be missing a type parameter: `<Oops>`\n+LL |     let _: S<impl Oops> = S;\n+   |                   ^^^^ not found in this scope\n+\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable binding\n+  --> $DIR/issue-104513-ice.rs:3:14\n+   |\n+LL |     let _: S<impl Oops> = S;\n+   |              ^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0405, E0562.\n+For more information about an error, try `rustc --explain E0405`."}]}