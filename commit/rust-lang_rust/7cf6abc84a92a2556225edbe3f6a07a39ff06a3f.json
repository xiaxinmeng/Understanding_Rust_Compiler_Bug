{"sha": "7cf6abc84a92a2556225edbe3f6a07a39ff06a3f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjZjZhYmM4NGE5MmEyNTU2MjI1ZWRiZTNmNmEwN2EzOWZmMDZhM2Y=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-20T02:26:45Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T21:01:26Z"}, "message": "librustc: De-`@mut` the adjustments table in the type context", "tree": {"sha": "b2ecd3e9702c36622a590c1bc87c25d037f7ae1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2ecd3e9702c36622a590c1bc87c25d037f7ae1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7cf6abc84a92a2556225edbe3f6a07a39ff06a3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7cf6abc84a92a2556225edbe3f6a07a39ff06a3f", "html_url": "https://github.com/rust-lang/rust/commit/7cf6abc84a92a2556225edbe3f6a07a39ff06a3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7cf6abc84a92a2556225edbe3f6a07a39ff06a3f/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e9bcea018d179bf361cbaee04e2db506ffac4a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e9bcea018d179bf361cbaee04e2db506ffac4a9", "html_url": "https://github.com/rust-lang/rust/commit/3e9bcea018d179bf361cbaee04e2db506ffac4a9"}], "stats": {"total": 125, "additions": 87, "deletions": 38}, "files": [{"sha": "79b43a64f96bcede0215fd225aae48bc99613499", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7cf6abc84a92a2556225edbe3f6a07a39ff06a3f/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cf6abc84a92a2556225edbe3f6a07a39ff06a3f/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=7cf6abc84a92a2556225edbe3f6a07a39ff06a3f", "patch": "@@ -1002,7 +1002,8 @@ fn encode_side_tables_for_id(ecx: &e::EncodeContext,\n     }\n \n     {\n-        let r = tcx.adjustments.find(&id);\n+        let adjustments = tcx.adjustments.borrow();\n+        let r = adjustments.get().find(&id);\n         for adj in r.iter() {\n             ebml_w.tag(c::tag_table_adjustments, |ebml_w| {\n                 ebml_w.id(id);\n@@ -1268,7 +1269,10 @@ fn decode_side_tables(xcx: @ExtendedDecodeContext,\n                     c::tag_table_adjustments => {\n                         let adj: @ty::AutoAdjustment = @Decodable::decode(val_dsr);\n                         adj.tr(xcx);\n-                        dcx.tcx.adjustments.insert(id, adj);\n+                        let mut adjustments = dcx.tcx\n+                                                 .adjustments\n+                                                 .borrow_mut();\n+                        adjustments.get().insert(id, adj);\n                     }\n                     c::tag_table_capture_map => {\n                         let cvars ="}, {"sha": "96b2637da877224122c63b05550f3410f3f3e39e", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7cf6abc84a92a2556225edbe3f6a07a39ff06a3f/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cf6abc84a92a2556225edbe3f6a07a39ff06a3f/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=7cf6abc84a92a2556225edbe3f6a07a39ff06a3f", "patch": "@@ -296,9 +296,13 @@ impl<'a> CheckLoanCtxt<'a> {\n     pub fn check_assignment(&self, expr: @ast::Expr) {\n         // We don't use cat_expr() here because we don't want to treat\n         // auto-ref'd parameters in overloaded operators as rvalues.\n-        let cmt = match self.bccx.tcx.adjustments.find(&expr.id) {\n+        let adj = {\n+            let adjustments = self.bccx.tcx.adjustments.borrow();\n+            adjustments.get().find_copy(&expr.id)\n+        };\n+        let cmt = match adj {\n             None => self.bccx.cat_expr_unadjusted(expr),\n-            Some(&adj) => self.bccx.cat_expr_autoderefd(expr, adj)\n+            Some(adj) => self.bccx.cat_expr_autoderefd(expr, adj)\n         };\n \n         debug!(\"check_assignment(cmt={})\", cmt.repr(self.tcx()));"}, {"sha": "7a48fad4ce5951695e416f1c970fc890a3f30a3f", "filename": "src/librustc/middle/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7cf6abc84a92a2556225edbe3f6a07a39ff06a3f/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cf6abc84a92a2556225edbe3f6a07a39ff06a3f/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=7cf6abc84a92a2556225edbe3f6a07a39ff06a3f", "patch": "@@ -208,7 +208,8 @@ fn gather_loans_in_expr(this: &mut GatherLoanCtxt,\n \n     // If this expression is borrowed, have to ensure it remains valid:\n     {\n-        let r = tcx.adjustments.find(&ex.id);\n+        let adjustments = tcx.adjustments.borrow();\n+        let r = adjustments.get().find(&ex.id);\n         for &adjustments in r.iter() {\n             this.guarantee_adjustments(ex, *adjustments);\n         }"}, {"sha": "72140d333730fe6fadb9c87c25ae8da8d9791f65", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7cf6abc84a92a2556225edbe3f6a07a39ff06a3f/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cf6abc84a92a2556225edbe3f6a07a39ff06a3f/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=7cf6abc84a92a2556225edbe3f6a07a39ff06a3f", "patch": "@@ -1073,7 +1073,11 @@ fn check_unnecessary_allocation(cx: &Context, e: &ast::Expr) {\n         cx.span_lint(unnecessary_allocation, e.span, msg);\n     };\n \n-    match cx.tcx.adjustments.find_copy(&e.id) {\n+    let adjustment = {\n+        let adjustments = cx.tcx.adjustments.borrow();\n+        adjustments.get().find_copy(&e.id)\n+    };\n+    match adjustment {\n         Some(@ty::AutoDerefRef(ty::AutoDerefRef { autoref, .. })) => {\n             match (allocation, autoref) {\n                 (VectorAllocation, Some(ty::AutoBorrowVec(..))) => {"}, {"sha": "2d9fbed01542b739a0be9538b67a1d0123e21eab", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7cf6abc84a92a2556225edbe3f6a07a39ff06a3f/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cf6abc84a92a2556225edbe3f6a07a39ff06a3f/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=7cf6abc84a92a2556225edbe3f6a07a39ff06a3f", "patch": "@@ -340,7 +340,8 @@ impl mem_categorization_ctxt {\n     }\n \n     pub fn cat_expr(&self, expr: @ast::Expr) -> cmt {\n-        match self.tcx.adjustments.find(&expr.id) {\n+        let adjustments = self.tcx.adjustments.borrow();\n+        match adjustments.get().find(&expr.id) {\n             None => {\n                 // No adjustments.\n                 self.cat_expr_unadjusted(expr)"}, {"sha": "311e4400bb4ddddd733a15d674f02c7223ac929e", "filename": "src/librustc/middle/moves.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7cf6abc84a92a2556225edbe3f6a07a39ff06a3f/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cf6abc84a92a2556225edbe3f6a07a39ff06a3f/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmoves.rs?ref=7cf6abc84a92a2556225edbe3f6a07a39ff06a3f", "patch": "@@ -321,11 +321,14 @@ impl VisitContext {\n         // `expr_mode` refers to the post-adjustment value.  If one of\n         // those adjustments is to take a reference, then it's only\n         // reading the underlying expression, not moving it.\n-        let comp_mode = match self.tcx.adjustments.find(&expr.id) {\n-            Some(&@ty::AutoDerefRef(\n-                ty::AutoDerefRef {\n-                    autoref: Some(_), ..})) => Read,\n-            _ => expr_mode\n+        let comp_mode = {\n+            let adjustments = self.tcx.adjustments.borrow();\n+            match adjustments.get().find(&expr.id) {\n+                Some(&@ty::AutoDerefRef(\n+                    ty::AutoDerefRef {\n+                        autoref: Some(_), ..})) => Read,\n+                _ => expr_mode\n+            }\n         };\n \n         debug!(\"comp_mode = {:?}\", comp_mode);"}, {"sha": "6526842d7cb835a10eaa5a41050dae73726dc5fc", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7cf6abc84a92a2556225edbe3f6a07a39ff06a3f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cf6abc84a92a2556225edbe3f6a07a39ff06a3f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=7cf6abc84a92a2556225edbe3f6a07a39ff06a3f", "patch": "@@ -186,7 +186,10 @@ pub fn const_expr(cx: @CrateContext, e: &ast::Expr) -> (ValueRef, bool) {\n     let mut llconst = llconst;\n     let mut inlineable = inlineable;\n     let ety = ty::expr_ty(cx.tcx, e);\n-    let adjustment = cx.tcx.adjustments.find_copy(&e.id);\n+    let adjustment = {\n+        let adjustments = cx.tcx.adjustments.borrow();\n+        adjustments.get().find_copy(&e.id)\n+    };\n     match adjustment {\n         None => { }\n         Some(@ty::AutoAddEnv(ty::ReStatic, ast::BorrowedSigil)) => {"}, {"sha": "cf6fca23c96ba0a62206769625600386469b71db", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7cf6abc84a92a2556225edbe3f6a07a39ff06a3f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cf6abc84a92a2556225edbe3f6a07a39ff06a3f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=7cf6abc84a92a2556225edbe3f6a07a39ff06a3f", "patch": "@@ -180,9 +180,12 @@ pub fn trans_to_datum(bcx: @Block, expr: &ast::Expr) -> DatumBlock {\n \n     let mut bcx = bcx;\n     let mut datum = unpack_datum!(bcx, trans_to_datum_unadjusted(bcx, expr));\n-    let adjustment = match bcx.tcx().adjustments.find_copy(&expr.id) {\n-        None => { return DatumBlock {bcx: bcx, datum: datum}; }\n-        Some(adj) => { adj }\n+    let adjustment = {\n+        let adjustments = bcx.tcx().adjustments.borrow();\n+        match adjustments.get().find_copy(&expr.id) {\n+            None => { return DatumBlock {bcx: bcx, datum: datum}; }\n+            Some(adj) => { adj }\n+        }\n     };\n     debug!(\"unadjusted datum: {}\", datum.to_str(bcx.ccx()));\n     match *adjustment {\n@@ -415,7 +418,11 @@ pub fn trans_to_datum(bcx: @Block, expr: &ast::Expr) -> DatumBlock {\n }\n \n pub fn trans_into(bcx: @Block, expr: &ast::Expr, dest: Dest) -> @Block {\n-    if bcx.tcx().adjustments.contains_key(&expr.id) {\n+    let adjustment_found = {\n+        let adjustments = bcx.tcx().adjustments.borrow();\n+        adjustments.get().contains_key(&expr.id)\n+    };\n+    if adjustment_found {\n         // use trans_to_datum, which is mildly less efficient but\n         // which will perform the adjustments:\n         let datumblock = trans_to_datum(bcx, expr);\n@@ -480,15 +487,19 @@ fn trans_lvalue(bcx: @Block, expr: &ast::Expr) -> DatumBlock {\n      * instead, but sometimes we call trans_lvalue() directly as a\n      * means of asserting that a particular expression is an lvalue. */\n \n-    return match bcx.tcx().adjustments.find(&expr.id) {\n+    let adjustment_opt = {\n+        let adjustments = bcx.tcx().adjustments.borrow();\n+        adjustments.get().find_copy(&expr.id)\n+    };\n+    match adjustment_opt {\n         None => trans_lvalue_unadjusted(bcx, expr),\n         Some(_) => {\n             bcx.sess().span_bug(\n                 expr.span,\n                 format!(\"trans_lvalue() called on an expression \\\n                       with adjustments\"));\n         }\n-    };\n+    }\n }\n \n fn trans_to_datum_unadjusted(bcx: @Block, expr: &ast::Expr) -> DatumBlock {"}, {"sha": "117b4559c2c0290a257f36cf468994509ae5ac4c", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7cf6abc84a92a2556225edbe3f6a07a39ff06a3f/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cf6abc84a92a2556225edbe3f6a07a39ff06a3f/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=7cf6abc84a92a2556225edbe3f6a07a39ff06a3f", "patch": "@@ -312,7 +312,7 @@ struct ctxt_ {\n     ast_ty_to_ty_cache: RefCell<HashMap<NodeId, ast_ty_to_ty_cache_entry>>,\n     enum_var_cache: RefCell<HashMap<DefId, @~[@VariantInfo]>>,\n     ty_param_defs: RefCell<HashMap<ast::NodeId, TypeParameterDef>>,\n-    adjustments: @mut HashMap<ast::NodeId, @AutoAdjustment>,\n+    adjustments: RefCell<HashMap<ast::NodeId, @AutoAdjustment>>,\n     normalized_cache: @mut HashMap<t, t>,\n     lang_items: middle::lang_items::LanguageItems,\n     // A mapping of fake provided method def_ids to the default implementation\n@@ -1002,7 +1002,7 @@ pub fn mk_ctxt(s: session::Session,\n         trait_methods_cache: RefCell::new(HashMap::new()),\n         impl_trait_cache: RefCell::new(HashMap::new()),\n         ty_param_defs: RefCell::new(HashMap::new()),\n-        adjustments: @mut HashMap::new(),\n+        adjustments: RefCell::new(HashMap::new()),\n         normalized_cache: new_ty_hash(),\n         lang_items: lang_items,\n         provided_method_sources: @mut HashMap::new(),\n@@ -2876,14 +2876,18 @@ pub fn expr_ty_adjusted(cx: ctxt, expr: &ast::Expr) -> t {\n      */\n \n     let unadjusted_ty = expr_ty(cx, expr);\n-    adjust_ty(cx, expr.span, unadjusted_ty, cx.adjustments.find_copy(&expr.id))\n+    let adjustment = {\n+        let adjustments = cx.adjustments.borrow();\n+        adjustments.get().find_copy(&expr.id)\n+    };\n+    adjust_ty(cx, expr.span, unadjusted_ty, adjustment)\n }\n \n pub fn adjust_ty(cx: ctxt,\n                  span: Span,\n                  unadjusted_ty: ty::t,\n-                 adjustment: Option<@AutoAdjustment>) -> ty::t\n-{\n+                 adjustment: Option<@AutoAdjustment>)\n+                 -> ty::t {\n     /*! See `expr_ty_adjusted` */\n \n     return match adjustment {"}, {"sha": "1abdc43d3911cd3f288cf2683a76379842968666", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7cf6abc84a92a2556225edbe3f6a07a39ff06a3f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cf6abc84a92a2556225edbe3f6a07a39ff06a3f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=7cf6abc84a92a2556225edbe3f6a07a39ff06a3f", "patch": "@@ -164,7 +164,7 @@ pub struct Inherited {\n     // Temporary tables:\n     node_types: @mut HashMap<ast::NodeId, ty::t>,\n     node_type_substs: RefCell<HashMap<ast::NodeId, ty::substs>>,\n-    adjustments: @mut HashMap<ast::NodeId, @ty::AutoAdjustment>,\n+    adjustments: RefCell<HashMap<ast::NodeId, @ty::AutoAdjustment>>,\n     method_map: method_map,\n     vtable_map: vtable_map,\n }\n@@ -264,7 +264,7 @@ impl Inherited {\n             param_env: param_env,\n             node_types: @mut HashMap::new(),\n             node_type_substs: RefCell::new(HashMap::new()),\n-            adjustments: @mut HashMap::new(),\n+            adjustments: RefCell::new(HashMap::new()),\n             method_map: @mut HashMap::new(),\n             vtable_map: @mut HashMap::new(),\n         }\n@@ -1137,7 +1137,8 @@ impl FnCtxt {\n                             node_id: ast::NodeId,\n                             adj: @ty::AutoAdjustment) {\n         debug!(\"write_adjustment(node_id={:?}, adj={:?})\", node_id, adj);\n-        self.inh.adjustments.insert(node_id, adj);\n+        let mut adjustments = self.inh.adjustments.borrow_mut();\n+        adjustments.get().insert(node_id, adj);\n     }\n \n     pub fn write_nil(&self, node_id: ast::NodeId) {"}, {"sha": "7c74a7b73b45b44de56e1734ab30ca268b8e7ac9", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7cf6abc84a92a2556225edbe3f6a07a39ff06a3f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cf6abc84a92a2556225edbe3f6a07a39ff06a3f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=7cf6abc84a92a2556225edbe3f6a07a39ff06a3f", "patch": "@@ -134,9 +134,11 @@ impl Rcx {\n             ty_unadjusted\n         } else {\n             let tcx = self.fcx.tcx();\n-            let adjustments = self.fcx.inh.adjustments;\n-            ty::adjust_ty(tcx, expr.span, ty_unadjusted,\n-                          adjustments.find_copy(&expr.id))\n+            let adjustment = {\n+                let adjustments = self.fcx.inh.adjustments.borrow();\n+                adjustments.get().find_copy(&expr.id)\n+            };\n+            ty::adjust_ty(tcx, expr.span, ty_unadjusted, adjustment)\n         }\n     }\n }\n@@ -300,7 +302,8 @@ fn visit_expr(rcx: &mut Rcx, expr: @ast::Expr) {\n \n     // Check any autoderefs or autorefs that appear.\n     {\n-        let r = rcx.fcx.inh.adjustments.find(&expr.id);\n+        let adjustments = rcx.fcx.inh.adjustments.borrow();\n+        let r = adjustments.get().find(&expr.id);\n         for &adjustment in r.iter() {\n             debug!(\"adjustment={:?}\", adjustment);\n             match *adjustment {\n@@ -699,7 +702,10 @@ fn constrain_regions_in_type_of_node(\n     // is going to fail anyway, so just stop here and let typeck\n     // report errors later on in the writeback phase.\n     let ty0 = rcx.resolve_node_type(id);\n-    let adjustment = rcx.fcx.inh.adjustments.find_copy(&id);\n+    let adjustment = {\n+        let adjustments = rcx.fcx.inh.adjustments.borrow();\n+        adjustments.get().find_copy(&id)\n+    };\n     let ty = ty::adjust_ty(tcx, origin.span(), ty0, adjustment);\n     debug!(\"constrain_regions_in_type_of_node(\\\n             ty={}, ty0={}, id={}, minimum_lifetime={:?}, adjustment={:?})\",\n@@ -1055,7 +1061,8 @@ pub mod guarantor {\n         let mut expr_ct = categorize_unadjusted(rcx, expr);\n         debug!(\"before adjustments, cat={:?}\", expr_ct.cat);\n \n-        match rcx.fcx.inh.adjustments.find(&expr.id) {\n+        let adjustments = rcx.fcx.inh.adjustments.borrow();\n+        match adjustments.get().find(&expr.id) {\n             Some(&@ty::AutoAddEnv(..)) => {\n                 // This is basically an rvalue, not a pointer, no regions\n                 // involved."}, {"sha": "a04fe1c136444cec263eef91bd841b673156befa", "filename": "src/librustc/middle/typeck/check/writeback.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7cf6abc84a92a2556225edbe3f6a07a39ff06a3f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cf6abc84a92a2556225edbe3f6a07a39ff06a3f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs?ref=7cf6abc84a92a2556225edbe3f6a07a39ff06a3f", "patch": "@@ -120,10 +120,14 @@ fn resolve_type_vars_for_node(wbcx: &mut WbCtxt, sp: Span, id: ast::NodeId)\n     let tcx = fcx.ccx.tcx;\n \n     // Resolve any borrowings for the node with id `id`\n-    match fcx.inh.adjustments.find(&id) {\n+    let adjustment = {\n+        let adjustments = fcx.inh.adjustments.borrow();\n+        adjustments.get().find_copy(&id)\n+    };\n+    match adjustment {\n         None => (),\n \n-        Some(&@ty::AutoAddEnv(r, s)) => {\n+        Some(@ty::AutoAddEnv(r, s)) => {\n             match resolve_region(fcx.infcx(), r, resolve_all | force_all) {\n                 Err(e) => {\n                     // This should not, I think, happen:\n@@ -134,12 +138,13 @@ fn resolve_type_vars_for_node(wbcx: &mut WbCtxt, sp: Span, id: ast::NodeId)\n                 Ok(r1) => {\n                     let resolved_adj = @ty::AutoAddEnv(r1, s);\n                     debug!(\"Adjustments for node {}: {:?}\", id, resolved_adj);\n-                    fcx.tcx().adjustments.insert(id, resolved_adj);\n+                    let mut adjustments = fcx.tcx().adjustments.borrow_mut();\n+                    adjustments.get().insert(id, resolved_adj);\n                 }\n             }\n         }\n \n-        Some(&@ty::AutoDerefRef(adj)) => {\n+        Some(@ty::AutoDerefRef(adj)) => {\n             let fixup_region = |r| {\n                 match resolve_region(fcx.infcx(), r, resolve_all | force_all) {\n                     Ok(r1) => r1,\n@@ -163,7 +168,8 @@ fn resolve_type_vars_for_node(wbcx: &mut WbCtxt, sp: Span, id: ast::NodeId)\n                 autoref: resolved_autoref,\n             });\n             debug!(\"Adjustments for node {}: {:?}\", id, resolved_adj);\n-            fcx.tcx().adjustments.insert(id, resolved_adj);\n+            let mut adjustments = fcx.tcx().adjustments.borrow_mut();\n+            adjustments.get().insert(id, resolved_adj);\n         }\n     }\n "}]}