{"sha": "00a5ef64a20c0b188ac27b5ba935cb291ea3bf85", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwYTVlZjY0YTIwYzBiMTg4YWMyN2I1YmE5MzVjYjI5MWVhM2JmODU=", "commit": {"author": {"name": "pJunger", "email": "pJunger@users.noreply.github.com", "date": "2019-05-14T18:05:27Z"}, "committer": {"name": "pJunger", "email": "pJunger@users.noreply.github.com", "date": "2019-05-18T07:33:26Z"}, "message": "Added suggestion for conversion with is_ok.", "tree": {"sha": "f65648ccbdda6430466f828e8413476b85a214ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f65648ccbdda6430466f828e8413476b85a214ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00a5ef64a20c0b188ac27b5ba935cb291ea3bf85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00a5ef64a20c0b188ac27b5ba935cb291ea3bf85", "html_url": "https://github.com/rust-lang/rust/commit/00a5ef64a20c0b188ac27b5ba935cb291ea3bf85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00a5ef64a20c0b188ac27b5ba935cb291ea3bf85/comments", "author": {"login": "pJunger", "id": 16426009, "node_id": "MDQ6VXNlcjE2NDI2MDA5", "avatar_url": "https://avatars.githubusercontent.com/u/16426009?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pJunger", "html_url": "https://github.com/pJunger", "followers_url": "https://api.github.com/users/pJunger/followers", "following_url": "https://api.github.com/users/pJunger/following{/other_user}", "gists_url": "https://api.github.com/users/pJunger/gists{/gist_id}", "starred_url": "https://api.github.com/users/pJunger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pJunger/subscriptions", "organizations_url": "https://api.github.com/users/pJunger/orgs", "repos_url": "https://api.github.com/users/pJunger/repos", "events_url": "https://api.github.com/users/pJunger/events{/privacy}", "received_events_url": "https://api.github.com/users/pJunger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pJunger", "id": 16426009, "node_id": "MDQ6VXNlcjE2NDI2MDA5", "avatar_url": "https://avatars.githubusercontent.com/u/16426009?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pJunger", "html_url": "https://github.com/pJunger", "followers_url": "https://api.github.com/users/pJunger/followers", "following_url": "https://api.github.com/users/pJunger/following{/other_user}", "gists_url": "https://api.github.com/users/pJunger/gists{/gist_id}", "starred_url": "https://api.github.com/users/pJunger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pJunger/subscriptions", "organizations_url": "https://api.github.com/users/pJunger/orgs", "repos_url": "https://api.github.com/users/pJunger/repos", "events_url": "https://api.github.com/users/pJunger/events{/privacy}", "received_events_url": "https://api.github.com/users/pJunger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a43dcfd042dbc7a8bd30a17a5bcf53c80c497f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a43dcfd042dbc7a8bd30a17a5bcf53c80c497f9", "html_url": "https://github.com/rust-lang/rust/commit/0a43dcfd042dbc7a8bd30a17a5bcf53c80c497f9"}], "stats": {"total": 192, "additions": 156, "deletions": 36}, "files": [{"sha": "3001147f92f5b262a9791190ff98628b2cfc3751", "filename": "clippy_lints/src/checked_conversions.rs", "status": "modified", "additions": 22, "deletions": 12, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/00a5ef64a20c0b188ac27b5ba935cb291ea3bf85/clippy_lints%2Fsrc%2Fchecked_conversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00a5ef64a20c0b188ac27b5ba935cb291ea3bf85/clippy_lints%2Fsrc%2Fchecked_conversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fchecked_conversions.rs?ref=00a5ef64a20c0b188ac27b5ba935cb291ea3bf85", "patch": "@@ -4,9 +4,9 @@ use if_chain::if_chain;\n use rustc::hir::*;\n use rustc::lint::{in_external_macro, LateContext, LateLintPass, LintArray, LintContext, LintPass};\n use rustc::{declare_lint_pass, declare_tool_lint};\n+use rustc_errors::Applicability;\n use syntax::ast::LitKind;\n-\n-use crate::utils::{span_lint, SpanlessEq};\n+use crate::utils::{span_lint_and_sugg, snippet_with_applicability, SpanlessEq};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for explicit bounds checking when casting.\n@@ -54,16 +54,26 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CheckedConversions {\n             }\n         };\n \n-        if let Some(cv) = result {\n-            span_lint(\n-                cx,\n-                CHECKED_CONVERSIONS,\n-                item.span,\n-                &format!(\n-                    \"Checked cast can be simplified: `{}::try_from`\",\n-                    cv.to_type.unwrap_or_else(|| \"IntegerType\".to_string()),\n-                ),\n-            );\n+        if_chain! {\n+            if let Some(cv) = result;\n+            if let Some(to_type) = cv.to_type;\n+\n+            then {\n+                let mut applicability = Applicability::MachineApplicable;\n+                let snippet = snippet_with_applicability(cx, cv.expr_to_cast.span, \"_\", &mut\n+                                applicability);\n+                span_lint_and_sugg(\n+                    cx,\n+                    CHECKED_CONVERSIONS,\n+                    item.span,\n+                    \"Checked cast can be simplified.\",\n+                    \"try\",\n+                    format!(\"{}::try_from({}).is_ok()\",\n+                            to_type,\n+                            snippet),\n+                    applicability\n+                );\n+            }\n         }\n     }\n }"}, {"sha": "7febd6f376135884d31ee80143de3d8eec941ef1", "filename": "tests/ui/checked_conversions.fixed", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/00a5ef64a20c0b188ac27b5ba935cb291ea3bf85/tests%2Fui%2Fchecked_conversions.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/00a5ef64a20c0b188ac27b5ba935cb291ea3bf85/tests%2Fui%2Fchecked_conversions.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchecked_conversions.fixed?ref=00a5ef64a20c0b188ac27b5ba935cb291ea3bf85", "patch": "@@ -0,0 +1,106 @@\n+// run-rustfix\n+\n+#![warn(clippy::checked_conversions)]\n+#![allow(clippy::cast_lossless)]\n+#![allow(dead_code)]\n+use std::convert::TryFrom;\n+\n+// Positive tests\n+\n+// Signed to unsigned\n+\n+fn i64_to_u32(value: i64) -> Option<u32> {\n+    if u32::try_from(value).is_ok() {\n+        Some(value as u32)\n+    } else {\n+        None\n+    }\n+}\n+\n+fn i64_to_u16(value: i64) -> Option<u16> {\n+    if u16::try_from(value).is_ok() {\n+        Some(value as u16)\n+    } else {\n+        None\n+    }\n+}\n+\n+fn isize_to_u8(value: isize) -> Option<u8> {\n+    if u8::try_from(value).is_ok() {\n+        Some(value as u8)\n+    } else {\n+        None\n+    }\n+}\n+\n+// Signed to signed\n+\n+fn i64_to_i32(value: i64) -> Option<i32> {\n+    if i32::try_from(value).is_ok() {\n+        Some(value as i32)\n+    } else {\n+        None\n+    }\n+}\n+\n+fn i64_to_i16(value: i64) -> Option<i16> {\n+    if i16::try_from(value).is_ok() {\n+        Some(value as i16)\n+    } else {\n+        None\n+    }\n+}\n+\n+// Unsigned to X\n+\n+fn u32_to_i32(value: u32) -> Option<i32> {\n+    if i32::try_from(value).is_ok() {\n+        Some(value as i32)\n+    } else {\n+        None\n+    }\n+}\n+\n+fn usize_to_isize(value: usize) -> isize {\n+    if isize::try_from(value).is_ok() && value as i32 == 5 {\n+        5\n+    } else {\n+        1\n+    }\n+}\n+\n+fn u32_to_u16(value: u32) -> isize {\n+    if u16::try_from(value).is_ok() && value as i32 == 5 {\n+        5\n+    } else {\n+        1\n+    }\n+}\n+\n+// Negative tests\n+\n+fn no_i64_to_i32(value: i64) -> Option<i32> {\n+    if value <= (i32::max_value() as i64) && value >= 0 {\n+        Some(value as i32)\n+    } else {\n+        None\n+    }\n+}\n+\n+fn no_isize_to_u8(value: isize) -> Option<u8> {\n+    if value <= (u8::max_value() as isize) && value >= (u8::min_value() as isize) {\n+        Some(value as u8)\n+    } else {\n+        None\n+    }\n+}\n+\n+fn i8_to_u8(value: i8) -> Option<u8> {\n+    if value >= 0 {\n+        Some(value as u8)\n+    } else {\n+        None\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "a643354e2438f0ad71ffb2cf968c08da8e21dd10", "filename": "tests/ui/checked_conversions.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00a5ef64a20c0b188ac27b5ba935cb291ea3bf85/tests%2Fui%2Fchecked_conversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00a5ef64a20c0b188ac27b5ba935cb291ea3bf85/tests%2Fui%2Fchecked_conversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchecked_conversions.rs?ref=00a5ef64a20c0b188ac27b5ba935cb291ea3bf85", "patch": "@@ -1,5 +1,9 @@\n+// run-rustfix\n+\n #![warn(clippy::checked_conversions)]\n #![allow(clippy::cast_lossless)]\n+#![allow(dead_code)]\n+use std::convert::TryFrom;\n \n // Positive tests\n "}, {"sha": "f678f009621f8f3dd5a9036ceb376190fd828042", "filename": "tests/ui/checked_conversions.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/00a5ef64a20c0b188ac27b5ba935cb291ea3bf85/tests%2Fui%2Fchecked_conversions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/00a5ef64a20c0b188ac27b5ba935cb291ea3bf85/tests%2Fui%2Fchecked_conversions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchecked_conversions.stderr?ref=00a5ef64a20c0b188ac27b5ba935cb291ea3bf85", "patch": "@@ -1,52 +1,52 @@\n-error: Checked cast can be simplified: `u32::try_from`\n-  --> $DIR/checked_conversions.rs:9:8\n+error: Checked cast can be simplified.\n+  --> $DIR/checked_conversions.rs:13:8\n    |\n LL |     if value <= (u32::max_value() as i64) && value >= 0 {\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `u32::try_from(value).is_ok()`\n    |\n    = note: `-D clippy::checked-conversions` implied by `-D warnings`\n \n-error: Checked cast can be simplified: `u16::try_from`\n-  --> $DIR/checked_conversions.rs:17:8\n+error: Checked cast can be simplified.\n+  --> $DIR/checked_conversions.rs:21:8\n    |\n LL |     if value <= i64::from(u16::max_value()) && value >= 0 {\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `u16::try_from(value).is_ok()`\n \n-error: Checked cast can be simplified: `u8::try_from`\n-  --> $DIR/checked_conversions.rs:25:8\n+error: Checked cast can be simplified.\n+  --> $DIR/checked_conversions.rs:29:8\n    |\n LL |     if value <= (u8::max_value() as isize) && value >= 0 {\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `u8::try_from(value).is_ok()`\n \n-error: Checked cast can be simplified: `i32::try_from`\n-  --> $DIR/checked_conversions.rs:35:8\n+error: Checked cast can be simplified.\n+  --> $DIR/checked_conversions.rs:39:8\n    |\n LL |     if value <= (i32::max_value() as i64) && value >= (i32::min_value() as i64) {\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::try_from(value).is_ok()`\n \n-error: Checked cast can be simplified: `i16::try_from`\n-  --> $DIR/checked_conversions.rs:43:8\n+error: Checked cast can be simplified.\n+  --> $DIR/checked_conversions.rs:47:8\n    |\n LL |     if value <= i64::from(i16::max_value()) && value >= i64::from(i16::min_value()) {\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i16::try_from(value).is_ok()`\n \n-error: Checked cast can be simplified: `i32::try_from`\n-  --> $DIR/checked_conversions.rs:53:8\n+error: Checked cast can be simplified.\n+  --> $DIR/checked_conversions.rs:57:8\n    |\n LL |     if value <= i32::max_value() as u32 {\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::try_from(value).is_ok()`\n \n-error: Checked cast can be simplified: `isize::try_from`\n-  --> $DIR/checked_conversions.rs:61:8\n+error: Checked cast can be simplified.\n+  --> $DIR/checked_conversions.rs:65:8\n    |\n LL |     if value <= isize::max_value() as usize && value as i32 == 5 {\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `isize::try_from(value).is_ok()`\n \n-error: Checked cast can be simplified: `u16::try_from`\n-  --> $DIR/checked_conversions.rs:69:8\n+error: Checked cast can be simplified.\n+  --> $DIR/checked_conversions.rs:73:8\n    |\n LL |     if value <= u16::max_value() as u32 && value as i32 == 5 {\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `u16::try_from(value).is_ok()`\n \n error: aborting due to 8 previous errors\n "}]}