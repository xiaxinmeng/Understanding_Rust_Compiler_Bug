{"sha": "664b0ad3fcead4fe4d22c05065a82a338770c429", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2NGIwYWQzZmNlYWQ0ZmU0ZDIyYzA1MDY1YTgyYTMzODc3MGM0Mjk=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-19T05:16:54Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-19T17:16:38Z"}, "message": "Add some tests for expression corner cases, mostly involving ret and fail\n\nSome of these don't actually work.", "tree": {"sha": "88b06a8ffac1e4aa3af7ba3c7674ae3bf74b5dc7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88b06a8ffac1e4aa3af7ba3c7674ae3bf74b5dc7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/664b0ad3fcead4fe4d22c05065a82a338770c429", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/664b0ad3fcead4fe4d22c05065a82a338770c429", "html_url": "https://github.com/rust-lang/rust/commit/664b0ad3fcead4fe4d22c05065a82a338770c429", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/664b0ad3fcead4fe4d22c05065a82a338770c429/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d681f062c721a31574daaa15b81eba4be85cce2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d681f062c721a31574daaa15b81eba4be85cce2d", "html_url": "https://github.com/rust-lang/rust/commit/d681f062c721a31574daaa15b81eba4be85cce2d"}], "stats": {"total": 100, "additions": 100, "deletions": 0}, "files": [{"sha": "d78e29de7b43f3ccd8f0fe42219b70fe21b3e66a", "filename": "src/test/run-fail/fail-parens.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/664b0ad3fcead4fe4d22c05065a82a338770c429/src%2Ftest%2Frun-fail%2Ffail-parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664b0ad3fcead4fe4d22c05065a82a338770c429/src%2Ftest%2Frun-fail%2Ffail-parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ffail-parens.rs?ref=664b0ad3fcead4fe4d22c05065a82a338770c429", "patch": "@@ -0,0 +1,15 @@\n+// xfail-stage1\n+// xfail-stage2\n+// xfail-stage3\n+// Fail statements without arguments need to be disambiguated in\n+// certain positions\n+// error-pattern:explicit-failure\n+\n+fn bigfail() {\n+    do { while (fail) { if (fail) {\n+        alt (fail) { _ {\n+        }}\n+    }}} while fail;\n+}\n+\n+fn main() { bigfail(); }"}, {"sha": "4496d6f15560a7c7ad76c5ca1da97d3bf3674a2d", "filename": "src/test/run-pass/wierd-exprs.rs", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/664b0ad3fcead4fe4d22c05065a82a338770c429/src%2Ftest%2Frun-pass%2Fwierd-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664b0ad3fcead4fe4d22c05065a82a338770c429/src%2Ftest%2Frun-pass%2Fwierd-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwierd-exprs.rs?ref=664b0ad3fcead4fe4d22c05065a82a338770c429", "patch": "@@ -0,0 +1,85 @@\n+// xfail-pretty\n+// Just a grab bug of stuff that you wouldn't want to actualy write\n+\n+fn strange() -> bool {\n+    let _x = ret true;\n+}\n+\n+fn funny() {\n+    fn f(_x: ()) {}\n+    f(ret);\n+}\n+\n+fn odd() {\n+    // FIXME: This doesn't compile\n+    // log ret;\n+}\n+\n+fn what() {\n+    fn the(x: @mutable bool){\n+        ret while !*x { *x = true };\n+    }\n+    let i = @mutable false;\n+    let dont = bind the(i);\n+    dont();\n+    assert *i;\n+}\n+\n+fn zombiejesus() {\n+    do { while (ret) { if (ret) {\n+        alt (ret) { _ {\n+          ret ? ret : ret\n+        }}\n+    }}} while ret;\n+}\n+\n+fn notsure() {\n+    let _x;\n+    let _y = (_x = 0) == (_x = 0);\n+    let _z = (_x <- 0) < (_x = 0);\n+    let _a = (_x += 0) == (_x = 0);\n+    let _b = (_y <-> _z) == (_y <-> _z);\n+}\n+\n+fn hammertime() -> int {\n+    // FIXME: Doesn't compile\n+    //let _x = log true == (ret 0);\n+    ret 0;\n+}\n+\n+fn canttouchthis() -> uint {\n+    pred p() -> bool { true }\n+    let _a = (assert true) == (check p());\n+    let _c = (check p()) == ();\n+    let _b = (log 0) == (ret 0u);\n+}\n+\n+fn angrydome() {\n+    while true {\n+        if (break) { }\n+    }\n+    let i = 0;\n+    do {\n+        i += 1;\n+        if i == 1 {\n+            alt cont { _ { } }\n+        }\n+    } while false;\n+}\n+\n+fn evil_lincoln() {\n+    let evil <- log \"lincoln\";\n+}\n+\n+fn main() {\n+    strange();\n+    funny();\n+    odd();\n+    what();\n+    zombiejesus();\n+    notsure();\n+    hammertime();\n+    canttouchthis();\n+    angrydome();\n+    evil_lincoln();\n+}"}]}