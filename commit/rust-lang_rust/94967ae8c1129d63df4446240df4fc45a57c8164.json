{"sha": "94967ae8c1129d63df4446240df4fc45a57c8164", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0OTY3YWU4YzExMjlkNjNkZjQ0NDYyNDBkZjRmYzQ1YTU3YzgxNjQ=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2018-11-05T01:21:54Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2018-11-25T06:54:06Z"}, "message": "Remove `OpenSnapshot` and `CommittedSnapshot` markers from `RegionConstraintCollector`.\n\nThey're not strictly necessary, and they result in the `Vec` being\nallocated even for the trivial (and common) case where a\n`start_snapshot` is immediately followed by a `commit` or `rollback_to`.\n\nThe commit also removes a now-unnecessary argument of\n`pop_placeholders()`.", "tree": {"sha": "609501b5bbea42a983123adcc52cfacbb2348c2c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/609501b5bbea42a983123adcc52cfacbb2348c2c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94967ae8c1129d63df4446240df4fc45a57c8164", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94967ae8c1129d63df4446240df4fc45a57c8164", "html_url": "https://github.com/rust-lang/rust/commit/94967ae8c1129d63df4446240df4fc45a57c8164", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94967ae8c1129d63df4446240df4fc45a57c8164/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d68fa07bff2b417094024597790d30acd501ab3", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d68fa07bff2b417094024597790d30acd501ab3", "html_url": "https://github.com/rust-lang/rust/commit/2d68fa07bff2b417094024597790d30acd501ab3"}], "stats": {"total": 74, "additions": 32, "deletions": 42}, "files": [{"sha": "4e203b986dfb0b5c0b253c4a0f7c90db0d08adca", "filename": "src/librustc/infer/higher_ranked/mod.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/94967ae8c1129d63df4446240df4fc45a57c8164/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94967ae8c1129d63df4446240df4fc45a57c8164/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=94967ae8c1129d63df4446240df4fc45a57c8164", "patch": "@@ -543,11 +543,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     ) {\n         debug!(\"pop_placeholders({:?})\", placeholder_map);\n         let placeholder_regions: FxHashSet<_> = placeholder_map.values().cloned().collect();\n-        self.borrow_region_constraints()\n-            .pop_placeholders(\n-                &placeholder_regions,\n-                &snapshot.region_constraints_snapshot,\n-            );\n+        self.borrow_region_constraints().pop_placeholders(&placeholder_regions);\n         self.universe.set(snapshot.universe);\n         if !placeholder_map.is_empty() {\n             self.projection_cache.borrow_mut().rollback_placeholder("}, {"sha": "af1b6964b818967abf4933d2a40c6cc30a2b9b17", "filename": "src/librustc/infer/region_constraints/mod.rs", "status": "modified", "additions": 30, "deletions": 35, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/94967ae8c1129d63df4446240df4fc45a57c8164/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94967ae8c1129d63df4446240df4fc45a57c8164/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=94967ae8c1129d63df4446240df4fc45a57c8164", "patch": "@@ -52,15 +52,18 @@ pub struct RegionConstraintCollector<'tcx> {\n \n     /// The undo log records actions that might later be undone.\n     ///\n-    /// Note: when the undo_log is empty, we are not actively\n+    /// Note: `num_open_snapshots` is used to track if we are actively\n     /// snapshotting. When the `start_snapshot()` method is called, we\n-    /// push an OpenSnapshot entry onto the list to indicate that we\n-    /// are now actively snapshotting. The reason for this is that\n-    /// otherwise we end up adding entries for things like the lower\n-    /// bound on a variable and so forth, which can never be rolled\n-    /// back.\n+    /// increment `num_open_snapshots` to indicate that we are now actively\n+    /// snapshotting. The reason for this is that otherwise we end up adding\n+    /// entries for things like the lower bound on a variable and so forth,\n+    /// which can never be rolled back.\n     undo_log: Vec<UndoLog<'tcx>>,\n \n+    /// The number of open snapshots, i.e. those that haven't been committed or\n+    /// rolled back.\n+    num_open_snapshots: usize,\n+\n     /// When we add a R1 == R2 constriant, we currently add (a) edges\n     /// R1 <= R2 and R2 <= R1 and (b) we unify the two regions in this\n     /// table. You can then call `opportunistic_resolve_var` early\n@@ -255,14 +258,6 @@ struct TwoRegions<'tcx> {\n \n #[derive(Copy, Clone, PartialEq)]\n enum UndoLog<'tcx> {\n-    /// Pushed when we start a snapshot.\n-    OpenSnapshot,\n-\n-    /// Replaces an `OpenSnapshot` when a snapshot is committed, but\n-    /// that snapshot is not the root. If the root snapshot is\n-    /// unrolled, all nested snapshots must be committed.\n-    CommitedSnapshot,\n-\n     /// We added `RegionVid`\n     AddVar(RegionVid),\n \n@@ -387,6 +382,7 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n             glbs,\n             bound_count: _,\n             undo_log: _,\n+            num_open_snapshots: _,\n             unification_table,\n             any_unifications,\n         } = self;\n@@ -415,13 +411,13 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n     }\n \n     fn in_snapshot(&self) -> bool {\n-        !self.undo_log.is_empty()\n+        self.num_open_snapshots > 0\n     }\n \n     pub fn start_snapshot(&mut self) -> RegionSnapshot {\n         let length = self.undo_log.len();\n         debug!(\"RegionConstraintCollector: start_snapshot({})\", length);\n-        self.undo_log.push(OpenSnapshot);\n+        self.num_open_snapshots += 1;\n         RegionSnapshot {\n             length,\n             region_snapshot: self.unification_table.snapshot(),\n@@ -430,41 +426,45 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n     }\n \n     fn assert_open_snapshot(&self, snapshot: &RegionSnapshot) {\n-        assert!(self.undo_log.len() > snapshot.length);\n-        assert!(self.undo_log[snapshot.length] == OpenSnapshot);\n+        assert!(self.undo_log.len() >= snapshot.length);\n+        assert!(self.num_open_snapshots > 0);\n     }\n \n     pub fn commit(&mut self, snapshot: RegionSnapshot) {\n         debug!(\"RegionConstraintCollector: commit({})\", snapshot.length);\n         self.assert_open_snapshot(&snapshot);\n \n-        if snapshot.length == 0 {\n+        if self.num_open_snapshots == 1 {\n+            // The root snapshot. It's safe to clear the undo log because\n+            // there's no snapshot further out that we might need to roll back\n+            // to.\n+            assert!(snapshot.length == 0);\n             self.undo_log.clear();\n-        } else {\n-            (*self.undo_log)[snapshot.length] = CommitedSnapshot;\n         }\n+\n+        self.num_open_snapshots -= 1;\n+\n         self.unification_table.commit(snapshot.region_snapshot);\n     }\n \n     pub fn rollback_to(&mut self, snapshot: RegionSnapshot) {\n         debug!(\"RegionConstraintCollector: rollback_to({:?})\", snapshot);\n         self.assert_open_snapshot(&snapshot);\n-        while self.undo_log.len() > snapshot.length + 1 {\n+\n+        while self.undo_log.len() > snapshot.length {\n             let undo_entry = self.undo_log.pop().unwrap();\n             self.rollback_undo_entry(undo_entry);\n         }\n-        let c = self.undo_log.pop().unwrap();\n-        assert!(c == OpenSnapshot);\n+\n+        self.num_open_snapshots -= 1;\n+\n         self.unification_table.rollback_to(snapshot.region_snapshot);\n         self.any_unifications = snapshot.any_unifications;\n     }\n \n     fn rollback_undo_entry(&mut self, undo_entry: UndoLog<'tcx>) {\n         match undo_entry {\n-            OpenSnapshot => {\n-                panic!(\"Failure to observe stack discipline\");\n-            }\n-            Purged | CommitedSnapshot => {\n+            Purged => {\n                 // nothing to do here\n             }\n             AddVar(vid) => {\n@@ -524,15 +524,10 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n     /// in `skols`. This is used after a higher-ranked operation\n     /// completes to remove all trace of the placeholder regions\n     /// created in that time.\n-    pub fn pop_placeholders(\n-        &mut self,\n-        placeholders: &FxHashSet<ty::Region<'tcx>>,\n-        snapshot: &RegionSnapshot,\n-    ) {\n+    pub fn pop_placeholders(&mut self, placeholders: &FxHashSet<ty::Region<'tcx>>) {\n         debug!(\"pop_placeholders(placeholders={:?})\", placeholders);\n \n         assert!(self.in_snapshot());\n-        assert!(self.undo_log[snapshot.length] == OpenSnapshot);\n \n         let constraints_to_kill: Vec<usize> = self.undo_log\n             .iter()\n@@ -565,7 +560,7 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n                 &AddCombination(_, ref two_regions) => {\n                     placeholders.contains(&two_regions.a) || placeholders.contains(&two_regions.b)\n                 }\n-                &AddVar(..) | &OpenSnapshot | &Purged | &CommitedSnapshot => false,\n+                &AddVar(..) | &Purged => false,\n             }\n         }\n     }"}, {"sha": "27ce7f106030aebbd9ddc449a6dfeebceeb29a20", "filename": "src/librustc/infer/region_constraints/taint.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94967ae8c1129d63df4446240df4fc45a57c8164/src%2Flibrustc%2Finfer%2Fregion_constraints%2Ftaint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94967ae8c1129d63df4446240df4fc45a57c8164/src%2Flibrustc%2Finfer%2Fregion_constraints%2Ftaint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_constraints%2Ftaint.rs?ref=94967ae8c1129d63df4446240df4fc45a57c8164", "patch": "@@ -65,8 +65,7 @@ impl<'tcx> TaintSet<'tcx> {\n                             \"we never add verifications while doing higher-ranked things\",\n                         )\n                     }\n-                    &Purged | &AddCombination(..) | &AddVar(..) | &OpenSnapshot\n-                    | &CommitedSnapshot => {}\n+                    &Purged | &AddCombination(..) | &AddVar(..) => {}\n                 }\n             }\n         }"}]}