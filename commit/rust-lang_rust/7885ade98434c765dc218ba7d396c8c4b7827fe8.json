{"sha": "7885ade98434c765dc218ba7d396c8c4b7827fe8", "node_id": "C_kwDOAAsO6NoAKDc4ODVhZGU5ODQzNGM3NjVkYzIxOGJhN2QzOTZjOGM0Yjc4MjdmZTg", "commit": {"author": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-04-10T19:24:11Z"}, "committer": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-04-25T00:40:20Z"}, "message": "Use `build/tmp` instead of adding a dependency on `tempfile`.", "tree": {"sha": "8ad0c7b24883c4c0a95ea53b04c00600e4473656", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ad0c7b24883c4c0a95ea53b04c00600e4473656"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7885ade98434c765dc218ba7d396c8c4b7827fe8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7885ade98434c765dc218ba7d396c8c4b7827fe8", "html_url": "https://github.com/rust-lang/rust/commit/7885ade98434c765dc218ba7d396c8c4b7827fe8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7885ade98434c765dc218ba7d396c8c4b7827fe8/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12b132dd8335a67d4dc88dde8ff3b82daf755d05", "url": "https://api.github.com/repos/rust-lang/rust/commits/12b132dd8335a67d4dc88dde8ff3b82daf755d05", "html_url": "https://github.com/rust-lang/rust/commit/12b132dd8335a67d4dc88dde8ff3b82daf755d05"}], "stats": {"total": 52, "additions": 19, "deletions": 33}, "files": [{"sha": "cb92e50cdd39905ee9098f7361fc5b78576ef46c", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7885ade98434c765dc218ba7d396c8c4b7827fe8/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/7885ade98434c765dc218ba7d396c8c4b7827fe8/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=7885ade98434c765dc218ba7d396c8c4b7827fe8", "patch": "@@ -226,7 +226,6 @@ dependencies = [\n  \"serde\",\n  \"serde_json\",\n  \"tar\",\n- \"tempfile\",\n  \"toml\",\n  \"winapi\",\n  \"xz2\","}, {"sha": "dea8d998bdeda21ce50766a7e740a0c35868c35c", "filename": "src/bootstrap/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7885ade98434c765dc218ba7d396c8c4b7827fe8/src%2Fbootstrap%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7885ade98434c765dc218ba7d396c8c4b7827fe8/src%2Fbootstrap%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.toml?ref=7885ade98434c765dc218ba7d396c8c4b7827fe8", "patch": "@@ -43,7 +43,6 @@ libc = \"0.2\"\n serde = { version = \"1.0.8\", features = [\"derive\"] }\n serde_json = \"1.0.2\"\n tar = \"0.4\"\n-tempfile = \"3\"\n toml = \"0.5\"\n ignore = \"0.4.10\"\n opener = \"0.5\""}, {"sha": "b4b973b42479e942099f69a109786506371b737f", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7885ade98434c765dc218ba7d396c8c4b7827fe8/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7885ade98434c765dc218ba7d396c8c4b7827fe8/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=7885ade98434c765dc218ba7d396c8c4b7827fe8", "patch": "@@ -1391,21 +1391,14 @@ impl Build {\n         paths\n     }\n \n-    pub fn rename(&self, src: &Path, dst: &Path) {\n-        if self.config.dry_run {\n-            return;\n-        }\n-        self.verbose_than(1, &format!(\"Move {:?} to {:?}\", src, dst));\n-        if src == dst {\n-            return;\n-        }\n-        if let Err(e) = fs::rename(src, dst) {\n-            if e.raw_os_error() == Some(libc::EXDEV) {\n-                self.copy(src, dst);\n-                return;\n-            }\n-            panic!(\"failed to rename `{}` to `{}`: {}\", src.display(), dst.display(), e);\n-        }\n+    /// Create a temporary directory in `out` and return its path.\n+    ///\n+    /// NOTE: this temporary directory is shared between all steps;\n+    /// if you need an empty directory, create a new subdirectory inside it.\n+    fn tempdir(&self) -> PathBuf {\n+        let tmp = self.out.join(\"tmp\");\n+        t!(fs::create_dir_all(&tmp));\n+        tmp\n     }\n \n     /// Copies a file from `src` to `dst`"}, {"sha": "64e25f803b27f68141cda943297c4de7a7a67c49", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7885ade98434c765dc218ba7d396c8c4b7827fe8/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7885ade98434c765dc218ba7d396c8c4b7827fe8/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=7885ade98434c765dc218ba7d396c8c4b7827fe8", "patch": "@@ -297,16 +297,14 @@ fn fix_bin_or_dylib(builder: &Builder<'_>, fname: &Path) {\n \n fn download_component(builder: &Builder<'_>, base: &str, url: &str, dest_path: &Path) {\n     // Use a temporary file in case we crash while downloading, to avoid a corrupt download in cache/.\n-    let tempfile = t!(tempfile::NamedTempFile::new());\n-    let temppath = tempfile.path().to_owned();\n-    drop(tempfile);\n-    let tempfile_str = temppath.to_str().expect(\"tempdir must be valid unicode\");\n+    let tempfile = builder.tempdir().join(dest_path.file_name().unwrap());\n     // FIXME: support `do_verify` (only really needed for nightly rustfmt)\n-    download_with_retries(builder, tempfile_str, &format!(\"{}/{}\", base, url));\n-    builder.rename(&temppath, dest_path);\n+    // FIXME: support non-utf8 paths?\n+    download_with_retries(builder, tempfile.to_str().unwrap(), &format!(\"{}/{}\", base, url));\n+    t!(std::fs::rename(&tempfile, dest_path));\n }\n \n-fn download_with_retries(builder: &Builder<'_>, tempdir: &str, url: &str) {\n+fn download_with_retries(builder: &Builder<'_>, tempfile: &str, url: &str) {\n     println!(\"downloading {}\", url);\n \n     // FIXME: check if curl is installed instead of skipping straight to powershell\n@@ -318,7 +316,7 @@ fn download_with_retries(builder: &Builder<'_>, tempdir: &str, url: &str) {\n                 \"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;\",\n                 &format!(\n                     \"(New-Object System.Net.WebClient).DownloadFile('{}', '{}')\",\n-                    url, tempdir\n+                    url, tempfile\n                 ),\n             ])) {\n                 return;\n@@ -338,7 +336,7 @@ fn download_with_retries(builder: &Builder<'_>, tempdir: &str, url: &str) {\n             \"3\",\n             \"-Sf\",\n             \"-o\",\n-            tempdir,\n+            tempfile,\n             url,\n         ]));\n     }"}, {"sha": "98723a0bffd99ffaef2649abbd059b2a2d31f63f", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7885ade98434c765dc218ba7d396c8c4b7827fe8/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7885ade98434c765dc218ba7d396c8c4b7827fe8/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=7885ade98434c765dc218ba7d396c8c4b7827fe8", "patch": "@@ -1577,9 +1577,7 @@ note: if you're sure you want to do this, please open an issue as to why. In the\n             cmd.env(\"RUSTC_PROFILER_SUPPORT\", \"1\");\n         }\n \n-        let tmp = builder.out.join(\"tmp\");\n-        std::fs::create_dir_all(&tmp).unwrap();\n-        cmd.env(\"RUST_TEST_TMPDIR\", tmp);\n+        cmd.env(\"RUST_TEST_TMPDIR\", builder.tempdir());\n \n         cmd.arg(\"--adb-path\").arg(\"adb\");\n         cmd.arg(\"--adb-test-dir\").arg(ADB_TEST_DIR);\n@@ -2259,14 +2257,13 @@ impl Step for RemoteCopyLibs {\n         builder.ensure(compile::Std { compiler, target });\n \n         builder.info(&format!(\"REMOTE copy libs to emulator ({})\", target));\n-        t!(fs::create_dir_all(builder.out.join(\"tmp\")));\n \n         let server = builder.ensure(tool::RemoteTestServer { compiler, target });\n \n         // Spawn the emulator and wait for it to come online\n         let tool = builder.tool_exe(Tool::RemoteTestClient);\n         let mut cmd = Command::new(&tool);\n-        cmd.arg(\"spawn-emulator\").arg(target.triple).arg(&server).arg(builder.out.join(\"tmp\"));\n+        cmd.arg(\"spawn-emulator\").arg(target.triple).arg(&server).arg(builder.tempdir());\n         if let Some(rootfs) = builder.qemu_rootfs(target) {\n             cmd.arg(rootfs);\n         }\n@@ -2300,7 +2297,7 @@ impl Step for Distcheck {\n     /// Runs \"distcheck\", a 'make check' from a tarball\n     fn run(self, builder: &Builder<'_>) {\n         builder.info(\"Distcheck\");\n-        let dir = builder.out.join(\"tmp\").join(\"distcheck\");\n+        let dir = builder.tempdir().join(\"distcheck\");\n         let _ = fs::remove_dir_all(&dir);\n         t!(fs::create_dir_all(&dir));\n \n@@ -2326,7 +2323,7 @@ impl Step for Distcheck {\n \n         // Now make sure that rust-src has all of libstd's dependencies\n         builder.info(\"Distcheck rust-src\");\n-        let dir = builder.out.join(\"tmp\").join(\"distcheck-src\");\n+        let dir = builder.tempdir().join(\"distcheck-src\");\n         let _ = fs::remove_dir_all(&dir);\n         t!(fs::create_dir_all(&dir));\n "}]}