{"sha": "49502727e7db97055d04c7f06e04b73b05fdb7e2", "node_id": "C_kwDOAAsO6NoAKDQ5NTAyNzI3ZTdkYjk3MDU1ZDA0YzdmMDZlMDRiNzNiMDVmZGI3ZTI", "commit": {"author": {"name": "Marek Downar", "email": "marek.downar@evomedia.pl", "date": "2022-01-15T21:19:01Z"}, "committer": {"name": "Marek Downar", "email": "marek.downar@evomedia.pl", "date": "2022-01-15T21:19:01Z"}, "message": "issue #8239: fix to prev commit && 4 test cases", "tree": {"sha": "5b58a10df9e43ecd4ee219836e8e9d05237e9e86", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b58a10df9e43ecd4ee219836e8e9d05237e9e86"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49502727e7db97055d04c7f06e04b73b05fdb7e2", "comment_count": 0, "verification": {"verified": false, "reason": "bad_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQSzz0WgAyQDeHzM2Qxi1+PvccqFsgUCYeM6RQAKCRBi1+PvccqF\nsrVNAQCqWPHcQs89iS+ePV5jXIpbl4v/+umRVQctRZmVje6RVQD/T7XRv0rVqyBK\n6xMC55lwgz94+luOmoA5QMcQCt+y2Qo=\n=G1Pw\n-----END PGP SIGNATURE-----", "payload": "tree 5b58a10df9e43ecd4ee219836e8e9d05237e9e86\nparent ee84ac3396d9ea09c2160ff892cd297ef1b2ea70\nauthor Marek Downar <marek.downar@evomedia.pl> 1642281541 +0100\ncommitter Marek Downar <marek.downar@evomedia.pl> 1642281541 +0100\n\nissue #8239: fix to prev commit && 4 test cases\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49502727e7db97055d04c7f06e04b73b05fdb7e2", "html_url": "https://github.com/rust-lang/rust/commit/49502727e7db97055d04c7f06e04b73b05fdb7e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49502727e7db97055d04c7f06e04b73b05fdb7e2/comments", "author": {"login": "marekdownar", "id": 1872953, "node_id": "MDQ6VXNlcjE4NzI5NTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1872953?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marekdownar", "html_url": "https://github.com/marekdownar", "followers_url": "https://api.github.com/users/marekdownar/followers", "following_url": "https://api.github.com/users/marekdownar/following{/other_user}", "gists_url": "https://api.github.com/users/marekdownar/gists{/gist_id}", "starred_url": "https://api.github.com/users/marekdownar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marekdownar/subscriptions", "organizations_url": "https://api.github.com/users/marekdownar/orgs", "repos_url": "https://api.github.com/users/marekdownar/repos", "events_url": "https://api.github.com/users/marekdownar/events{/privacy}", "received_events_url": "https://api.github.com/users/marekdownar/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marekdownar", "id": 1872953, "node_id": "MDQ6VXNlcjE4NzI5NTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1872953?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marekdownar", "html_url": "https://github.com/marekdownar", "followers_url": "https://api.github.com/users/marekdownar/followers", "following_url": "https://api.github.com/users/marekdownar/following{/other_user}", "gists_url": "https://api.github.com/users/marekdownar/gists{/gist_id}", "starred_url": "https://api.github.com/users/marekdownar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marekdownar/subscriptions", "organizations_url": "https://api.github.com/users/marekdownar/orgs", "repos_url": "https://api.github.com/users/marekdownar/repos", "events_url": "https://api.github.com/users/marekdownar/events{/privacy}", "received_events_url": "https://api.github.com/users/marekdownar/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee84ac3396d9ea09c2160ff892cd297ef1b2ea70", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee84ac3396d9ea09c2160ff892cd297ef1b2ea70", "html_url": "https://github.com/rust-lang/rust/commit/ee84ac3396d9ea09c2160ff892cd297ef1b2ea70"}], "stats": {"total": 165, "additions": 160, "deletions": 5}, "files": [{"sha": "c35a2e57a66ba96217d391f76a6ea15714896ffc", "filename": "clippy_lints/src/methods/or_fun_call.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/49502727e7db97055d04c7f06e04b73b05fdb7e2/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49502727e7db97055d04c7f06e04b73b05fdb7e2/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs?ref=49502727e7db97055d04c7f06e04b73b05fdb7e2", "patch": "@@ -24,6 +24,7 @@ pub(super) fn check<'tcx>(\n     args: &'tcx [hir::Expr<'_>],\n ) {\n     /// Checks for `unwrap_or(T::new())` or `unwrap_or(T::default())`.\n+    #[allow(clippy::too_many_arguments)]\n     fn check_unwrap_or_default(\n         cx: &LateContext<'_>,\n         name: &str,\n@@ -32,6 +33,7 @@ pub(super) fn check<'tcx>(\n         arg: &hir::Expr<'_>,\n         or_has_args: bool,\n         span: Span,\n+        method_span: Span,\n     ) -> bool {\n         let is_default_default = || is_trait_item(cx, fun, sym::Default);\n \n@@ -53,21 +55,24 @@ pub(super) fn check<'tcx>(\n \n             then {\n                 let mut applicability = Applicability::MachineApplicable;\n-                let hint = \".unwrap_or_default()\";\n+                let hint = \"unwrap_or_default()\";\n+                let mut shrink = span;\n+\n                 let mut sugg: String = format!(\n-                    \"{}{}\",\n+                    \"{}.{}\",\n                     snippet_with_applicability(cx, self_expr.span, \"..\", &mut applicability),\n                     hint\n                 );\n \n                 if sugg.lines().count() > MAX_SUGGESTION_HIGHLIGHT_LINES {\n+                    shrink = method_span.with_hi(span.hi());\n                     sugg = hint.to_string();\n                 }\n \n                 span_lint_and_sugg(\n                     cx,\n                     OR_FUN_CALL,\n-                    span,\n+                    shrink,\n                     &format!(\"use of `{}` followed by a call to `{}`\", name, path),\n                     \"try this\",\n                     sugg,\n@@ -173,7 +178,7 @@ pub(super) fn check<'tcx>(\n         match inner_arg.kind {\n             hir::ExprKind::Call(fun, or_args) => {\n                 let or_has_args = !or_args.is_empty();\n-                if !check_unwrap_or_default(cx, name, fun, self_arg, arg, or_has_args, expr.span) {\n+                if !check_unwrap_or_default(cx, name, fun, self_arg, arg, or_has_args, expr.span, method_span) {\n                     let fun_span = if or_has_args { None } else { Some(fun.span) };\n                     check_general_case(cx, name, method_span, self_arg, arg, expr.span, fun_span);\n                 }"}, {"sha": "fe8f5c9fc6270f7a3a33cf861ec9b8bb5da51e0a", "filename": "tests/ui/or_fun_call.fixed", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/49502727e7db97055d04c7f06e04b73b05fdb7e2/tests%2Fui%2For_fun_call.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/49502727e7db97055d04c7f06e04b73b05fdb7e2/tests%2Fui%2For_fun_call.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.fixed?ref=49502727e7db97055d04c7f06e04b73b05fdb7e2", "patch": "@@ -176,4 +176,52 @@ mod issue6675 {\n     }\n }\n \n+mod issue8239 {\n+    unsafe fn more_than_max_suggestion_highest_lines_0() {\n+        let frames = Vec::new();\n+        frames\n+            .iter()\n+            .map(|f: &String| f.to_lowercase())\n+            .reduce(|mut acc, f| {\n+                acc.push_str(&f);\n+                acc\n+            })\n+            .unwrap_or_default();\n+    }\n+\n+    unsafe fn more_to_max_suggestion_highest_lines_1() {\n+        let frames = Vec::new();\n+        let iter = frames.iter();\n+        iter.map(|f: &String| f.to_lowercase())\n+            .reduce(|mut acc, f| {\n+                let _ = \"\";\n+                let _ = \"\";\n+                acc.push_str(&f);\n+                acc\n+            })\n+            .unwrap_or_default();\n+    }\n+\n+    unsafe fn equal_to_max_suggestion_highest_lines() {\n+        let frames = Vec::new();\n+        let iter = frames.iter();\n+        iter.map(|f: &String| f.to_lowercase())\n+            .reduce(|mut acc, f| {\n+                let _ = \"\";\n+                acc.push_str(&f);\n+                acc\n+            }).unwrap_or_default();\n+    }\n+\n+    unsafe fn less_than_max_suggestion_highest_lines() {\n+        let frames = Vec::new();\n+        let iter = frames.iter();\n+        let map = iter.map(|f: &String| f.to_lowercase());\n+        map.reduce(|mut acc, f| {\n+            acc.push_str(&f);\n+            acc\n+        }).unwrap_or_default();\n+    }\n+}\n+\n fn main() {}"}, {"sha": "a702d9dadd4f88c3f19d4bc87d385a1caf6d6354", "filename": "tests/ui/or_fun_call.rs", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/49502727e7db97055d04c7f06e04b73b05fdb7e2/tests%2Fui%2For_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49502727e7db97055d04c7f06e04b73b05fdb7e2/tests%2Fui%2For_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.rs?ref=49502727e7db97055d04c7f06e04b73b05fdb7e2", "patch": "@@ -176,4 +176,54 @@ mod issue6675 {\n     }\n }\n \n+mod issue8239 {\n+    unsafe fn more_than_max_suggestion_highest_lines_0() {\n+        let frames = Vec::new();\n+        frames\n+            .iter()\n+            .map(|f: &String| f.to_lowercase())\n+            .reduce(|mut acc, f| {\n+                acc.push_str(&f);\n+                acc\n+            })\n+            .unwrap_or(String::new());\n+    }\n+\n+    unsafe fn more_to_max_suggestion_highest_lines_1() {\n+        let frames = Vec::new();\n+        let iter = frames.iter();\n+        iter.map(|f: &String| f.to_lowercase())\n+            .reduce(|mut acc, f| {\n+                let _ = \"\";\n+                let _ = \"\";\n+                acc.push_str(&f);\n+                acc\n+            })\n+            .unwrap_or(String::new());\n+    }\n+\n+    unsafe fn equal_to_max_suggestion_highest_lines() {\n+        let frames = Vec::new();\n+        let iter = frames.iter();\n+        iter.map(|f: &String| f.to_lowercase())\n+            .reduce(|mut acc, f| {\n+                let _ = \"\";\n+                acc.push_str(&f);\n+                acc\n+            })\n+            .unwrap_or(String::new());\n+    }\n+\n+    unsafe fn less_than_max_suggestion_highest_lines() {\n+        let frames = Vec::new();\n+        let iter = frames.iter();\n+        let map = iter.map(|f: &String| f.to_lowercase());\n+        map.reduce(|mut acc, f| {\n+            acc.push_str(&f);\n+            acc\n+        })\n+        .unwrap_or(String::new());\n+    }\n+}\n+\n fn main() {}"}, {"sha": "549b00ae3c45980c75ac3b229d2139e7375e7ccb", "filename": "tests/ui/or_fun_call.stderr", "status": "modified", "additions": 53, "deletions": 1, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/49502727e7db97055d04c7f06e04b73b05fdb7e2/tests%2Fui%2For_fun_call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49502727e7db97055d04c7f06e04b73b05fdb7e2/tests%2Fui%2For_fun_call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.stderr?ref=49502727e7db97055d04c7f06e04b73b05fdb7e2", "patch": "@@ -108,5 +108,57 @@ error: use of `unwrap_or` followed by a function call\n LL |         None.unwrap_or( unsafe { ptr_to_ref(s) }    );\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| unsafe { ptr_to_ref(s) })`\n \n-error: aborting due to 18 previous errors\n+error: use of `unwrap_or` followed by a call to `new`\n+  --> $DIR/or_fun_call.rs:189:14\n+   |\n+LL |             .unwrap_or(String::new());\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_default()`\n+\n+error: use of `unwrap_or` followed by a call to `new`\n+  --> $DIR/or_fun_call.rs:202:14\n+   |\n+LL |             .unwrap_or(String::new());\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_default()`\n+\n+error: use of `unwrap_or` followed by a call to `new`\n+  --> $DIR/or_fun_call.rs:208:9\n+   |\n+LL | /         iter.map(|f: &String| f.to_lowercase())\n+LL | |             .reduce(|mut acc, f| {\n+LL | |                 let _ = \"\";\n+LL | |                 acc.push_str(&f);\n+LL | |                 acc\n+LL | |             })\n+LL | |             .unwrap_or(String::new());\n+   | |_____________________________________^\n+   |\n+help: try this\n+   |\n+LL ~         iter.map(|f: &String| f.to_lowercase())\n+LL +             .reduce(|mut acc, f| {\n+LL +                 let _ = \"\";\n+LL +                 acc.push_str(&f);\n+LL +                 acc\n+LL ~             }).unwrap_or_default();\n+   |\n+\n+error: use of `unwrap_or` followed by a call to `new`\n+  --> $DIR/or_fun_call.rs:221:9\n+   |\n+LL | /         map.reduce(|mut acc, f| {\n+LL | |             acc.push_str(&f);\n+LL | |             acc\n+LL | |         })\n+LL | |         .unwrap_or(String::new());\n+   | |_________________________________^\n+   |\n+help: try this\n+   |\n+LL ~         map.reduce(|mut acc, f| {\n+LL +             acc.push_str(&f);\n+LL +             acc\n+LL ~         }).unwrap_or_default();\n+   |\n+\n+error: aborting due to 22 previous errors\n "}]}