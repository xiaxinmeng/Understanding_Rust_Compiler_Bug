{"sha": "fb631a55c2acfae37e55e4c338dd3cc03da0fa7f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiNjMxYTU1YzJhY2ZhZTM3ZTU1ZTRjMzM4ZGQzY2MwM2RhMGZhN2Y=", "commit": {"author": {"name": "\u00d6mer Sinan A\u011facan", "email": "omeragacan@gmail.com", "date": "2021-02-27T05:01:32Z"}, "committer": {"name": "\u00d6mer Sinan A\u011facan", "email": "omeragacan@gmail.com", "date": "2021-02-27T10:46:49Z"}, "message": "Fix turbofish recovery with multiple generic args\n\ncheck_mistyped_turbofish_with_multiple_type_params was previously\nexpecting type arguments between angle brackets, which is not right, as\nwe can also see const expressions. We now use generic argument parser\ninstead of type parser.\n\nTest with one, two, and three generic arguments added to check\nconsistentcy between\n\n1. check_no_chained_comparison: Called after parsing a nested binop\n   application like `x < A > ...` where angle brackets are interpreted as\n   binary operators and `A` is an expression.\n\n2. check_mistyped_turbofish_with_multiple_type_params: called by\n   `parse_full_stmt` when we expect to see a semicolon after parsing an\n   expression but don't see it.\n\n   (In `T2<1, 2>::C;`, the expression is `T2 < 1`)", "tree": {"sha": "0c93da2d5d52369a8a4cf27132cff937bd838c83", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c93da2d5d52369a8a4cf27132cff937bd838c83"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb631a55c2acfae37e55e4c338dd3cc03da0fa7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb631a55c2acfae37e55e4c338dd3cc03da0fa7f", "html_url": "https://github.com/rust-lang/rust/commit/fb631a55c2acfae37e55e4c338dd3cc03da0fa7f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb631a55c2acfae37e55e4c338dd3cc03da0fa7f/comments", "author": {"login": "osa1", "id": 448274, "node_id": "MDQ6VXNlcjQ0ODI3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/448274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/osa1", "html_url": "https://github.com/osa1", "followers_url": "https://api.github.com/users/osa1/followers", "following_url": "https://api.github.com/users/osa1/following{/other_user}", "gists_url": "https://api.github.com/users/osa1/gists{/gist_id}", "starred_url": "https://api.github.com/users/osa1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/osa1/subscriptions", "organizations_url": "https://api.github.com/users/osa1/orgs", "repos_url": "https://api.github.com/users/osa1/repos", "events_url": "https://api.github.com/users/osa1/events{/privacy}", "received_events_url": "https://api.github.com/users/osa1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "osa1", "id": 448274, "node_id": "MDQ6VXNlcjQ0ODI3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/448274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/osa1", "html_url": "https://github.com/osa1", "followers_url": "https://api.github.com/users/osa1/followers", "following_url": "https://api.github.com/users/osa1/following{/other_user}", "gists_url": "https://api.github.com/users/osa1/gists{/gist_id}", "starred_url": "https://api.github.com/users/osa1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/osa1/subscriptions", "organizations_url": "https://api.github.com/users/osa1/orgs", "repos_url": "https://api.github.com/users/osa1/repos", "events_url": "https://api.github.com/users/osa1/events{/privacy}", "received_events_url": "https://api.github.com/users/osa1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3da2dd3eae7b7cbf16960ab993de666470e43991", "url": "https://api.github.com/repos/rust-lang/rust/commits/3da2dd3eae7b7cbf16960ab993de666470e43991", "html_url": "https://github.com/rust-lang/rust/commit/3da2dd3eae7b7cbf16960ab993de666470e43991"}], "stats": {"total": 60, "additions": 58, "deletions": 2}, "files": [{"sha": "f4ab3260d1a83e5603603e8ec4995ee7c1a337fd", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb631a55c2acfae37e55e4c338dd3cc03da0fa7f/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb631a55c2acfae37e55e4c338dd3cc03da0fa7f/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=fb631a55c2acfae37e55e4c338dd3cc03da0fa7f", "patch": "@@ -662,7 +662,7 @@ impl<'a> Parser<'a> {\n                     let x = self.parse_seq_to_before_end(\n                         &token::Gt,\n                         SeqSep::trailing_allowed(token::Comma),\n-                        |p| p.parse_ty(),\n+                        |p| p.parse_generic_arg(),\n                     );\n                     match x {\n                         Ok((_, _, false)) => {"}, {"sha": "9cc600d9ede02fb3d9aad3ce583479c067bbde46", "filename": "compiler/rustc_parse/src/parser/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb631a55c2acfae37e55e4c338dd3cc03da0fa7f/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb631a55c2acfae37e55e4c338dd3cc03da0fa7f/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs?ref=fb631a55c2acfae37e55e4c338dd3cc03da0fa7f", "patch": "@@ -545,7 +545,7 @@ impl<'a> Parser<'a> {\n \n     /// Parse a generic argument in a path segment.\n     /// This does not include constraints, e.g., `Item = u8`, which is handled in `parse_angle_arg`.\n-    fn parse_generic_arg(&mut self) -> PResult<'a, Option<GenericArg>> {\n+    pub(super) fn parse_generic_arg(&mut self) -> PResult<'a, Option<GenericArg>> {\n         let start = self.token.span;\n         let arg = if self.check_lifetime() && self.look_ahead(1, |t| !t.is_like_plus()) {\n             // Parse lifetime argument."}, {"sha": "95c31fbaa289ace51be419dcec281f4f5f0f8d77", "filename": "src/test/ui/suggestions/issue-82566.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/fb631a55c2acfae37e55e4c338dd3cc03da0fa7f/src%2Ftest%2Fui%2Fsuggestions%2Fissue-82566.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb631a55c2acfae37e55e4c338dd3cc03da0fa7f/src%2Ftest%2Fui%2Fsuggestions%2Fissue-82566.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-82566.rs?ref=fb631a55c2acfae37e55e4c338dd3cc03da0fa7f", "patch": "@@ -0,0 +1,21 @@\n+struct T1<const X1: usize>;\n+struct T2<const X1: usize, const X2: usize>;\n+struct T3<const X1: usize, const X2: usize, const X3: usize>;\n+\n+impl T1<1> {\n+    const C: () = ();\n+}\n+\n+impl T2<1, 2> {\n+    const C: () = ();\n+}\n+\n+impl T3<1, 2, 3> {\n+    const C: () = ();\n+}\n+\n+fn main() {\n+    T1<1>::C; //~ ERROR: comparison operators cannot be chained\n+    T2<1, 2>::C; //~ ERROR: expected one of `.`, `;`, `?`, `}`, or an operator, found `,`\n+    T3<1, 2, 3>::C; //~ ERROR: expected one of `.`, `;`, `?`, `}`, or an operator, found `,`\n+}"}, {"sha": "e13c097e4cc9db73d5f990f9ea99d9e8c5e2cf36", "filename": "src/test/ui/suggestions/issue-82566.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/fb631a55c2acfae37e55e4c338dd3cc03da0fa7f/src%2Ftest%2Fui%2Fsuggestions%2Fissue-82566.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb631a55c2acfae37e55e4c338dd3cc03da0fa7f/src%2Ftest%2Fui%2Fsuggestions%2Fissue-82566.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-82566.stderr?ref=fb631a55c2acfae37e55e4c338dd3cc03da0fa7f", "patch": "@@ -0,0 +1,35 @@\n+error: comparison operators cannot be chained\n+  --> $DIR/issue-82566.rs:18:7\n+   |\n+LL |     T1<1>::C;\n+   |       ^ ^\n+   |\n+help: use `::<...>` instead of `<...>` to specify type or const arguments\n+   |\n+LL |     T1::<1>::C;\n+   |       ^^\n+\n+error: expected one of `.`, `;`, `?`, `}`, or an operator, found `,`\n+  --> $DIR/issue-82566.rs:19:9\n+   |\n+LL |     T2<1, 2>::C;\n+   |         ^ expected one of `.`, `;`, `?`, `}`, or an operator\n+   |\n+help: use `::<...>` instead of `<...>` to specify type or const arguments\n+   |\n+LL |     T2::<1, 2>::C;\n+   |       ^^\n+\n+error: expected one of `.`, `;`, `?`, `}`, or an operator, found `,`\n+  --> $DIR/issue-82566.rs:20:9\n+   |\n+LL |     T3<1, 2, 3>::C;\n+   |         ^ expected one of `.`, `;`, `?`, `}`, or an operator\n+   |\n+help: use `::<...>` instead of `<...>` to specify type or const arguments\n+   |\n+LL |     T3::<1, 2, 3>::C;\n+   |       ^^\n+\n+error: aborting due to 3 previous errors\n+"}]}