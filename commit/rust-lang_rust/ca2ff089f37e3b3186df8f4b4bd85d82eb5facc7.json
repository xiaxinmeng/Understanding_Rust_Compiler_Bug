{"sha": "ca2ff089f37e3b3186df8f4b4bd85d82eb5facc7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhMmZmMDg5ZjM3ZTNiMzE4NmRmOGY0YjRiZDg1ZDgyZWI1ZmFjYzc=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-03-01T15:53:21Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-03-16T09:54:38Z"}, "message": "Remove MetadataOnlyCodegenBackend", "tree": {"sha": "8dede54a98ab2823ca0a4ec2ca18227825bff5f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8dede54a98ab2823ca0a4ec2ca18227825bff5f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca2ff089f37e3b3186df8f4b4bd85d82eb5facc7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca2ff089f37e3b3186df8f4b4bd85d82eb5facc7", "html_url": "https://github.com/rust-lang/rust/commit/ca2ff089f37e3b3186df8f4b4bd85d82eb5facc7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca2ff089f37e3b3186df8f4b4bd85d82eb5facc7/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52e885628e4317aa3f158622435927eb29b812e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/52e885628e4317aa3f158622435927eb29b812e9", "html_url": "https://github.com/rust-lang/rust/commit/52e885628e4317aa3f158622435927eb29b812e9"}], "stats": {"total": 152, "additions": 2, "deletions": 150}, "files": [{"sha": "4951ed51cf26579a3248dae25dfe4d36395d2c9b", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca2ff089f37e3b3186df8f4b4bd85d82eb5facc7/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/ca2ff089f37e3b3186df8f4b4bd85d82eb5facc7/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=ca2ff089f37e3b3186df8f4b4bd85d82eb5facc7", "patch": "@@ -2650,7 +2650,6 @@ dependencies = [\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n- \"rustc_incremental 0.0.0\",\n  \"rustc_metadata 0.0.0\",\n  \"rustc_mir 0.0.0\",\n  \"rustc_target 0.0.0\","}, {"sha": "c75208b9e06c13bb4a505954192133519c6ef131", "filename": "src/librustc_codegen_utils/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca2ff089f37e3b3186df8f4b4bd85d82eb5facc7/src%2Flibrustc_codegen_utils%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ca2ff089f37e3b3186df8f4b4bd85d82eb5facc7/src%2Flibrustc_codegen_utils%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2FCargo.toml?ref=ca2ff089f37e3b3186df8f4b4bd85d82eb5facc7", "patch": "@@ -21,4 +21,3 @@ rustc_target = { path = \"../librustc_target\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_metadata = { path = \"../librustc_metadata\" }\n rustc_mir = { path = \"../librustc_mir\" }\n-rustc_incremental = { path = \"../librustc_incremental\" }"}, {"sha": "56eaffb1ca31dcad88a669c06b42548367b98fbe", "filename": "src/librustc_codegen_utils/codegen_backend.rs", "status": "modified", "additions": 2, "deletions": 144, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/ca2ff089f37e3b3186df8f4b4bd85d82eb5facc7/src%2Flibrustc_codegen_utils%2Fcodegen_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2ff089f37e3b3186df8f4b4bd85d82eb5facc7/src%2Flibrustc_codegen_utils%2Fcodegen_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fcodegen_backend.rs?ref=ca2ff089f37e3b3186df8f4b4bd85d82eb5facc7", "patch": "@@ -10,27 +10,16 @@\n #![feature(box_syntax)]\n \n use std::any::Any;\n-use std::io::Write;\n-use std::fs;\n-use std::path::Path;\n-use std::sync::{mpsc, Arc};\n-\n-use rustc_data_structures::owning_ref::OwningRef;\n-use flate2::Compression;\n-use flate2::write::DeflateEncoder;\n+use std::sync::mpsc;\n \n use syntax::symbol::Symbol;\n-use rustc::hir::def_id::LOCAL_CRATE;\n use rustc::session::Session;\n use rustc::util::common::ErrorReported;\n-use rustc::session::config::{CrateType, OutputFilenames, PrintRequest};\n+use rustc::session::config::{OutputFilenames, PrintRequest};\n use rustc::ty::TyCtxt;\n use rustc::ty::query::Providers;\n-use rustc::middle::cstore::EncodedMetadata;\n use rustc::middle::cstore::MetadataLoader;\n use rustc::dep_graph::DepGraph;\n-use rustc_target::spec::Target;\n-use crate::link::out_filename;\n \n pub use rustc_data_structures::sync::MetadataRef;\n \n@@ -64,134 +53,3 @@ pub trait CodegenBackend {\n         outputs: &OutputFilenames,\n     ) -> Result<(), ErrorReported>;\n }\n-\n-pub struct NoLlvmMetadataLoader;\n-\n-impl MetadataLoader for NoLlvmMetadataLoader {\n-    fn get_rlib_metadata(&self, _: &Target, filename: &Path) -> Result<MetadataRef, String> {\n-        let buf = fs::read(filename).map_err(|e| format!(\"metadata file open err: {:?}\", e))?;\n-        let buf: OwningRef<Vec<u8>, [u8]> = OwningRef::new(buf);\n-        Ok(rustc_erase_owner!(buf.map_owner_box()))\n-    }\n-\n-    fn get_dylib_metadata(&self, target: &Target, filename: &Path) -> Result<MetadataRef, String> {\n-        self.get_rlib_metadata(target, filename)\n-    }\n-}\n-\n-pub struct MetadataOnlyCodegenBackend(());\n-pub struct OngoingCodegen {\n-    metadata: EncodedMetadata,\n-    metadata_version: Vec<u8>,\n-    crate_name: Symbol,\n-}\n-\n-impl MetadataOnlyCodegenBackend {\n-    pub fn boxed() -> Box<dyn CodegenBackend> {\n-        box MetadataOnlyCodegenBackend(())\n-    }\n-}\n-\n-impl CodegenBackend for MetadataOnlyCodegenBackend {\n-    fn init(&self, sess: &Session) {\n-        for cty in sess.opts.crate_types.iter() {\n-            match *cty {\n-                CrateType::Rlib | CrateType::Dylib | CrateType::Executable => {},\n-                _ => {\n-                    sess.diagnostic().warn(\n-                        &format!(\"LLVM unsupported, so output type {} is not supported\", cty)\n-                    );\n-                },\n-            }\n-        }\n-    }\n-\n-    fn metadata_loader(&self) -> Box<dyn MetadataLoader + Sync> {\n-        box NoLlvmMetadataLoader\n-    }\n-\n-    fn provide(&self, providers: &mut Providers<'_>) {\n-        crate::symbol_names::provide(providers);\n-\n-        providers.target_features_whitelist = |_tcx, _cnum| {\n-            Default::default() // Just a dummy\n-        };\n-        providers.is_reachable_non_generic = |_tcx, _defid| true;\n-        providers.exported_symbols = |_tcx, _crate| Arc::new(Vec::new());\n-    }\n-    fn provide_extern(&self, providers: &mut Providers<'_>) {\n-        providers.is_reachable_non_generic = |_tcx, _defid| true;\n-    }\n-\n-    fn codegen_crate<'a, 'tcx>(\n-        &self,\n-        tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-        _rx: mpsc::Receiver<Box<dyn Any + Send>>\n-    ) -> Box<dyn Any> {\n-        use rustc_mir::monomorphize::item::MonoItem;\n-\n-        crate::check_for_rustc_errors_attr(tcx);\n-        crate::symbol_names_test::report_symbol_names(tcx);\n-        rustc_incremental::assert_dep_graph(tcx);\n-        rustc_incremental::assert_module_sources::assert_module_sources(tcx);\n-        // FIXME: Fix this\n-        // rustc::middle::dependency_format::calculate(tcx);\n-        let _ = tcx.link_args(LOCAL_CRATE);\n-        let _ = tcx.native_libraries(LOCAL_CRATE);\n-        let (_, cgus) = tcx.collect_and_partition_mono_items(LOCAL_CRATE);\n-        for (mono_item, _) in cgus.iter().flat_map(|cgu| cgu.items().iter()) {\n-            if let MonoItem::Fn(inst) = mono_item {\n-                let def_id = inst.def_id();\n-                if def_id.is_local() {\n-                    let _ = tcx.codegen_fn_attrs(def_id);\n-                }\n-            }\n-        }\n-        tcx.sess.abort_if_errors();\n-\n-        let metadata = tcx.encode_metadata();\n-\n-        box OngoingCodegen {\n-            metadata,\n-            metadata_version: tcx.metadata_encoding_version().to_vec(),\n-            crate_name: tcx.crate_name(LOCAL_CRATE),\n-        }\n-    }\n-\n-    fn join_codegen_and_link(\n-        &self,\n-        ongoing_codegen: Box<dyn Any>,\n-        sess: &Session,\n-        _dep_graph: &DepGraph,\n-        outputs: &OutputFilenames,\n-    ) -> Result<(), ErrorReported> {\n-        let ongoing_codegen = ongoing_codegen.downcast::<OngoingCodegen>()\n-            .expect(\"Expected MetadataOnlyCodegenBackend's OngoingCodegen, found Box<dyn Any>\");\n-        for &crate_type in sess.opts.crate_types.iter() {\n-            if crate_type != CrateType::Rlib &&\n-               crate_type != CrateType::Dylib {\n-                continue;\n-            }\n-            let output_name =\n-                out_filename(sess, crate_type, &outputs, &ongoing_codegen.crate_name.as_str());\n-            let mut compressed = ongoing_codegen.metadata_version.clone();\n-            let metadata = if crate_type == CrateType::Dylib {\n-                DeflateEncoder::new(&mut compressed, Compression::fast())\n-                    .write_all(&ongoing_codegen.metadata.raw_data)\n-                    .unwrap();\n-                &compressed\n-            } else {\n-                &ongoing_codegen.metadata.raw_data\n-            };\n-            fs::write(&output_name, metadata).unwrap();\n-        }\n-\n-        sess.abort_if_errors();\n-        if !sess.opts.crate_types.contains(&CrateType::Rlib)\n-            && !sess.opts.crate_types.contains(&CrateType::Dylib)\n-        {\n-            sess.fatal(\"Executables are not supported by the metadata-only backend.\");\n-        }\n-        Ok(())\n-    }\n-}"}, {"sha": "1a3914e6ef44cc8f04784eafbf21d8c52db2b640", "filename": "src/librustc_codegen_utils/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca2ff089f37e3b3186df8f4b4bd85d82eb5facc7/src%2Flibrustc_codegen_utils%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2ff089f37e3b3186df8f4b4bd85d82eb5facc7/src%2Flibrustc_codegen_utils%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Flib.rs?ref=ca2ff089f37e3b3186df8f4b4bd85d82eb5facc7", "patch": "@@ -19,7 +19,6 @@\n \n #[macro_use]\n extern crate rustc;\n-#[macro_use] extern crate rustc_data_structures;\n \n use rustc::ty::TyCtxt;\n use rustc::hir::def_id::LOCAL_CRATE;"}, {"sha": "b1ef4e315d98da2370c745bd55a8103b65849098", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ca2ff089f37e3b3186df8f4b4bd85d82eb5facc7/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2ff089f37e3b3186df8f4b4bd85d82eb5facc7/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=ca2ff089f37e3b3186df8f4b4bd85d82eb5facc7", "patch": "@@ -266,9 +266,6 @@ pub fn get_codegen_backend(sess: &Session) -> Box<dyn CodegenBackend> {\n         let codegen_name = sess.opts.debugging_opts.codegen_backend.as_ref()\n             .unwrap_or(&sess.target.target.options.codegen_backend);\n         let backend = match &codegen_name[..] {\n-            \"metadata_only\" => {\n-                rustc_codegen_utils::codegen_backend::MetadataOnlyCodegenBackend::boxed\n-            }\n             filename if filename.contains(\".\") => {\n                 load_backend_from_dylib(filename.as_ref())\n             }"}]}