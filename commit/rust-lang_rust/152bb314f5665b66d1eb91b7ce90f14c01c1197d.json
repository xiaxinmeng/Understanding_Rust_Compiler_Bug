{"sha": "152bb314f5665b66d1eb91b7ce90f14c01c1197d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1MmJiMzE0ZjU2NjViNjZkMWViOTFiN2NlOTBmMTRjMDFjMTE5N2Q=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-11-23T20:01:15Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-11-29T20:51:08Z"}, "message": "fix bug in shape concerning size of tag variant", "tree": {"sha": "9f5423c5443345f6250400a2f2ae315f9401e0ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f5423c5443345f6250400a2f2ae315f9401e0ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/152bb314f5665b66d1eb91b7ce90f14c01c1197d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/152bb314f5665b66d1eb91b7ce90f14c01c1197d", "html_url": "https://github.com/rust-lang/rust/commit/152bb314f5665b66d1eb91b7ce90f14c01c1197d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/152bb314f5665b66d1eb91b7ce90f14c01c1197d/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8371beb5905158377689b9efb5cdb4a07ae17ada", "url": "https://api.github.com/repos/rust-lang/rust/commits/8371beb5905158377689b9efb5cdb4a07ae17ada", "html_url": "https://github.com/rust-lang/rust/commit/8371beb5905158377689b9efb5cdb4a07ae17ada"}], "stats": {"total": 54, "additions": 47, "deletions": 7}, "files": [{"sha": "f7c06d2a52c13c2432e0393bd558ec5083205060", "filename": "src/comp/middle/shape.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/152bb314f5665b66d1eb91b7ce90f14c01c1197d/src%2Fcomp%2Fmiddle%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/152bb314f5665b66d1eb91b7ce90f14c01c1197d/src%2Fcomp%2Fmiddle%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fshape.rs?ref=152bb314f5665b66d1eb91b7ce90f14c01c1197d", "patch": "@@ -6,7 +6,7 @@ import lib::llvm::llvm::{ModuleRef, TypeRef, ValueRef};\n import driver::session;\n import middle::{trans, trans_common};\n import middle::trans_common::{crate_ctxt, val_ty, C_bytes,\n-                              C_named_struct, C_struct};\n+                              C_named_struct, C_struct, T_tag_variant};\n import middle::ty;\n import middle::ty::field;\n import syntax::ast;\n@@ -213,7 +213,12 @@ fn compute_static_tag_size(ccx: @crate_ctxt, largest_variants: [uint],\n     // Add space for the tag if applicable.\n     // FIXME (issue #792): This is wrong. If the tag starts with an 8 byte\n     // aligned quantity, we don't align it.\n-    if vec::len(variants) > 1u { max_size += 4u16; max_align = 4u8; }\n+    if vec::len(variants) > 1u {\n+        let variant_t = T_tag_variant(ccx);\n+        max_size += trans::llsize_of_real(ccx, variant_t) as u16;\n+        let align = trans::llalign_of_real(ccx, variant_t) as u8;\n+        if max_align < align { max_align = align; }\n+    }\n \n     ret {size: max_size, align: max_align};\n }"}, {"sha": "2d8ad55b284454e735e43c61a63d0cb142101739", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/152bb314f5665b66d1eb91b7ce90f14c01c1197d/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/152bb314f5665b66d1eb91b7ce90f14c01c1197d/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=152bb314f5665b66d1eb91b7ce90f14c01c1197d", "patch": "@@ -220,11 +220,11 @@ fn type_of_tag(cx: @crate_ctxt, sp: span, did: ast::def_id, t: ty::t)\n     if check type_has_static_size(cx, t) {\n         let size = static_size_of_tag(cx, sp, t);\n         if !degen { T_tag(cx, size) }\n-        else if size == 0u { T_struct([cx.int_type]) }\n+        else if size == 0u { T_struct([T_tag_variant(cx)]) }\n         else { T_array(T_i8(), size) }\n     }\n     else {\n-        if degen { T_struct([cx.int_type]) }\n+        if degen { T_struct([T_tag_variant(cx)]) }\n         else { T_opaque_tag(cx) }\n     }\n }"}, {"sha": "334116b3feba846e96087c850fef9c2630ba3ef0", "filename": "src/comp/middle/trans_common.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/152bb314f5665b66d1eb91b7ce90f14c01c1197d/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/152bb314f5665b66d1eb91b7ce90f14c01c1197d/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_common.rs?ref=152bb314f5665b66d1eb91b7ce90f14c01c1197d", "patch": "@@ -676,21 +676,25 @@ fn T_opaque_closure_ptr(cx: @crate_ctxt) -> TypeRef {\n     ret t;\n }\n \n+fn T_tag_variant(cx: @crate_ctxt) -> TypeRef {\n+    ret cx.int_type;\n+}\n+\n fn T_tag(cx: @crate_ctxt, size: uint) -> TypeRef {\n     let s = \"tag_\" + uint::to_str(size, 10u);\n     if cx.tn.name_has_type(s) { ret cx.tn.get_type(s); }\n     let t =\n         if size == 0u {\n-            T_struct([cx.int_type])\n-        } else { T_struct([cx.int_type, T_array(T_i8(), size)]) };\n+            T_struct([T_tag_variant(cx)])\n+        } else { T_struct([T_tag_variant(cx), T_array(T_i8(), size)]) };\n     cx.tn.associate(s, t);\n     ret t;\n }\n \n fn T_opaque_tag(cx: @crate_ctxt) -> TypeRef {\n     let s = \"opaque_tag\";\n     if cx.tn.name_has_type(s) { ret cx.tn.get_type(s); }\n-    let t = T_struct([cx.int_type, T_i8()]);\n+    let t = T_struct([T_tag_variant(cx), T_i8()]);\n     cx.tn.associate(s, t);\n     ret t;\n }"}, {"sha": "858dd4074d4adca30003bdafa94eab211d5e5958", "filename": "src/test/run-pass/shape_intrinsic_tag_then_rec.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/152bb314f5665b66d1eb91b7ce90f14c01c1197d/src%2Ftest%2Frun-pass%2Fshape_intrinsic_tag_then_rec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/152bb314f5665b66d1eb91b7ce90f14c01c1197d/src%2Ftest%2Frun-pass%2Fshape_intrinsic_tag_then_rec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fshape_intrinsic_tag_then_rec.rs?ref=152bb314f5665b66d1eb91b7ce90f14c01c1197d", "patch": "@@ -0,0 +1,31 @@\n+// Exercises a bug in the shape code that was exposed\n+// on x86_64: when there is a tag embedded in an \n+// interior record which is then itself interior to\n+// something else, shape calculations were off.\n+use std;\n+import std::list;\n+import std::list::list;\n+import std::option;\n+\n+tag opt_span {\n+\n+    //hack (as opposed to option::t), to make `span` compile\n+    os_none;\n+    os_some(@span);\n+}\n+type span = {lo: uint, hi: uint, expanded_from: opt_span};\n+type spanned<T> = { data: T, span: span };\n+type ty_ = uint;\n+type path_ = { global: bool, idents: [str], types: [@ty] };\n+type path = spanned<path_>;\n+type ty = spanned<ty_>;\n+\n+fn main() {\n+    let sp: span = {lo: 57451u, hi: 57542u, expanded_from: os_none};\n+    let t: @ty = @{ data: 3u, span: sp };\n+    let p_: path_ = { global: true, idents: [\"hi\"], types: [t] };\n+    let p: path = { data: p_, span: sp };\n+    let x = { sp: sp, path: p };\n+    log_err x.path;\n+    log_err x;\n+}"}]}