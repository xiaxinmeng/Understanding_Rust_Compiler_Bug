{"sha": "4eb0bc7346ef38218e21268001a898f6892db2c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlYjBiYzczNDZlZjM4MjE4ZTIxMjY4MDAxYTg5OGY2ODkyZGIyYzE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-23T09:42:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-23T09:42:22Z"}, "message": "Auto merge of #83260 - durin42:llvm-update, r=nagisa\n\nrustc: changes to allow an llvm update\n\nThis lets LLVM be built using 2b5f3f446f36, which is only a few weeks old. The next change in LLVM (5de2d189e6ad) breaks rustc again by removing a function that's exposed into the Rust code, but I'll file a bug about that separately.\n\nPlease scrutinize the `thinLTOResolvePrevailingInIndex` call, as I'm not at all sure an empty config is right.\n\nI'm also suspicious that a specific alignment could be specified in the call to CreateAtomicCmpXchg, but I don't know enough to figure that out.\n\nThanks!", "tree": {"sha": "e34f0e2b13b19d90f6ad94031b40da01b766995d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e34f0e2b13b19d90f6ad94031b40da01b766995d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4eb0bc7346ef38218e21268001a898f6892db2c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4eb0bc7346ef38218e21268001a898f6892db2c1", "html_url": "https://github.com/rust-lang/rust/commit/4eb0bc7346ef38218e21268001a898f6892db2c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4eb0bc7346ef38218e21268001a898f6892db2c1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b6339e4b9747d473270baa42e77e1d2fff39bf4", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b6339e4b9747d473270baa42e77e1d2fff39bf4", "html_url": "https://github.com/rust-lang/rust/commit/9b6339e4b9747d473270baa42e77e1d2fff39bf4"}, {"sha": "9431e8577d44dcc463134275421a6da6d862c377", "url": "https://api.github.com/repos/rust-lang/rust/commits/9431e8577d44dcc463134275421a6da6d862c377", "html_url": "https://github.com/rust-lang/rust/commit/9431e8577d44dcc463134275421a6da6d862c377"}], "stats": {"total": 26, "additions": 25, "deletions": 1}, "files": [{"sha": "35cca04b20f758c737c11ecb1024703b365f7f27", "filename": "compiler/rustc_llvm/llvm-wrapper/CoverageMappingWrapper.cpp", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4eb0bc7346ef38218e21268001a898f6892db2c1/compiler%2Frustc_llvm%2Fllvm-wrapper%2FCoverageMappingWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/4eb0bc7346ef38218e21268001a898f6892db2c1/compiler%2Frustc_llvm%2Fllvm-wrapper%2FCoverageMappingWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FCoverageMappingWrapper.cpp?ref=4eb0bc7346ef38218e21268001a898f6892db2c1", "patch": "@@ -23,10 +23,17 @@ extern \"C\" void LLVMRustCoverageWriteFilenamesSectionToBuffer(\n     const char* const Filenames[],\n     size_t FilenamesLen,\n     RustStringRef BufferOut) {\n+#if LLVM_VERSION_GE(13,0)\n+  SmallVector<std::string,32> FilenameRefs;\n+  for (size_t i = 0; i < FilenamesLen; i++) {\n+    FilenameRefs.push_back(std::string(Filenames[i]));\n+  }\n+#else\n   SmallVector<StringRef,32> FilenameRefs;\n   for (size_t i = 0; i < FilenamesLen; i++) {\n     FilenameRefs.push_back(StringRef(Filenames[i]));\n   }\n+#endif\n   auto FilenamesWriter = coverage::CoverageFilenamesSectionWriter(\n     makeArrayRef(FilenameRefs));\n   RawRustStringOstream OS(BufferOut);"}, {"sha": "22ceb57762b922afa6311ad47200294a55d68bea", "filename": "compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4eb0bc7346ef38218e21268001a898f6892db2c1/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/4eb0bc7346ef38218e21268001a898f6892db2c1/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp?ref=4eb0bc7346ef38218e21268001a898f6892db2c1", "patch": "@@ -1437,9 +1437,17 @@ LLVMRustCreateThinLTOData(LLVMRustThinLTOModule *modules,\n     Ret->ResolvedODR[ModuleIdentifier][GUID] = NewLinkage;\n   };\n \n+#if LLVM_VERSION_GE(13,0)\n+  // Uses FromPrevailing visibility scheme which works for many binary\n+  // formats. We probably could and should use ELF visibility scheme for many of\n+  // our targets, however.\n+  lto::Config conf;\n+  thinLTOResolvePrevailingInIndex(conf, Ret->Index, isPrevailing, recordNewLinkage,\n+                                  Ret->GUIDPreservedSymbols);\n+#else\n   thinLTOResolvePrevailingInIndex(Ret->Index, isPrevailing, recordNewLinkage,\n                                   Ret->GUIDPreservedSymbols);\n-\n+#endif\n   // Here we calculate an `ExportedGUIDs` set for use in the `isExported`\n   // callback below. This callback below will dictate the linkage for all\n   // summaries in the index, and we basically just only want to ensure that dead"}, {"sha": "0391feaf499f3ebf06345825aec8eff1133d9f03", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4eb0bc7346ef38218e21268001a898f6892db2c1/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/4eb0bc7346ef38218e21268001a898f6892db2c1/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=4eb0bc7346ef38218e21268001a898f6892db2c1", "patch": "@@ -382,9 +382,18 @@ LLVMRustBuildAtomicCmpXchg(LLVMBuilderRef B, LLVMValueRef Target,\n                            LLVMValueRef Old, LLVMValueRef Source,\n                            LLVMAtomicOrdering Order,\n                            LLVMAtomicOrdering FailureOrder, LLVMBool Weak) {\n+#if LLVM_VERSION_GE(13,0)\n+  // Rust probably knows the alignment of the target value and should be able to\n+  // specify something more precise than MaybeAlign here. See also\n+  // https://reviews.llvm.org/D97224 which may be a useful reference.\n+  AtomicCmpXchgInst *ACXI = unwrap(B)->CreateAtomicCmpXchg(\n+      unwrap(Target), unwrap(Old), unwrap(Source), llvm::MaybeAlign(), fromRust(Order),\n+      fromRust(FailureOrder));\n+#else\n   AtomicCmpXchgInst *ACXI = unwrap(B)->CreateAtomicCmpXchg(\n       unwrap(Target), unwrap(Old), unwrap(Source), fromRust(Order),\n       fromRust(FailureOrder));\n+#endif\n   ACXI->setWeak(Weak);\n   return wrap(ACXI);\n }"}]}