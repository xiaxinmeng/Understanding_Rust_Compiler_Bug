{"sha": "c183d4a510a0007923354bec8ec2ea4d23d92f7d", "node_id": "C_kwDOAAsO6NoAKGMxODNkNGE1MTBhMDAwNzkyMzM1NGJlYzhlYzJlYTRkMjNkOTJmN2Q", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-03-18T20:50:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-18T20:50:44Z"}, "message": "Rollup merge of #94115 - scottmcm:iter-process-by-ref, r=yaahc\n\nLet `try_collect` take advantage of `try_fold` overrides\n\nNo public API changes.\n\nWith this change, `try_collect` (#94047) is no longer going through the `impl Iterator for &mut impl Iterator`, and thus will be able to use `try_fold` overrides instead of being forced through `next` for every element.\n\nHere's the test added, to see that it fails before this PR (once a new enough nightly is out): https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=462f2896f2fed2c238ee63ca1a7e7c56\n\nThis might as well go to the same person as my last `try_process` PR  (#93572), so\nr? ``@yaahc``", "tree": {"sha": "caf8fd406b4c808dc390c72bb803cc8a3cddf3e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/caf8fd406b4c808dc390c72bb803cc8a3cddf3e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c183d4a510a0007923354bec8ec2ea4d23d92f7d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiNPClCRBK7hj4Ov3rIwAAsnoIAAMC0kR8btZxQwJb35ms0ysT\nr0I4lgwAfVXEvnK8ZdET0nV2PvJMqGhHfCzykrXR1rJrFvSGhYV1E2a+OVSQ4m3L\nQQkzC8SjSGIebD+1f1MTNsbRH9smzxO7E6oKVFGSmXW6WZGFy1NdP5QSf+Aj6/5+\nTBrcX09sjhaa8sUy9aELZ8L9RTjTxp1mPeMetLyx9EVReia9JiG/11W6Kab0TL0h\nLUABgaJV6u7aiOrzyZL4iMpfQ7I9WUCnpC/+5Ep51VJ2CN+r4/94sCS3aWcM7MvS\nzsUJ8yFAKHKdPWkiAIFoq9l/smnAmCoSIUZDmx7Mz6o38F5x7HQOAoXG9860SRs=\n=JGse\n-----END PGP SIGNATURE-----\n", "payload": "tree caf8fd406b4c808dc390c72bb803cc8a3cddf3e2\nparent 1bfe40d11c3630254504fb73eeccfca28d50df52\nparent 7ef74bc8b97b9c129582a4d9c208fc615c5f6ba0\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1647636644 +0100\ncommitter GitHub <noreply@github.com> 1647636644 +0100\n\nRollup merge of #94115 - scottmcm:iter-process-by-ref, r=yaahc\n\nLet `try_collect` take advantage of `try_fold` overrides\n\nNo public API changes.\n\nWith this change, `try_collect` (#94047) is no longer going through the `impl Iterator for &mut impl Iterator`, and thus will be able to use `try_fold` overrides instead of being forced through `next` for every element.\n\nHere's the test added, to see that it fails before this PR (once a new enough nightly is out): https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=462f2896f2fed2c238ee63ca1a7e7c56\n\nThis might as well go to the same person as my last `try_process` PR  (#93572), so\nr? ``@yaahc``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c183d4a510a0007923354bec8ec2ea4d23d92f7d", "html_url": "https://github.com/rust-lang/rust/commit/c183d4a510a0007923354bec8ec2ea4d23d92f7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c183d4a510a0007923354bec8ec2ea4d23d92f7d/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1bfe40d11c3630254504fb73eeccfca28d50df52", "url": "https://api.github.com/repos/rust-lang/rust/commits/1bfe40d11c3630254504fb73eeccfca28d50df52", "html_url": "https://github.com/rust-lang/rust/commit/1bfe40d11c3630254504fb73eeccfca28d50df52"}, {"sha": "7ef74bc8b97b9c129582a4d9c208fc615c5f6ba0", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ef74bc8b97b9c129582a4d9c208fc615c5f6ba0", "html_url": "https://github.com/rust-lang/rust/commit/7ef74bc8b97b9c129582a4d9c208fc615c5f6ba0"}], "stats": {"total": 74, "additions": 72, "deletions": 2}, "files": [{"sha": "0b5e2a89ef3dedfe43fd6f6b95e638ba14ecb3cd", "filename": "library/core/src/iter/adapters/by_ref_sized.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/c183d4a510a0007923354bec8ec2ea4d23d92f7d/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fby_ref_sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c183d4a510a0007923354bec8ec2ea4d23d92f7d/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fby_ref_sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fby_ref_sized.rs?ref=c183d4a510a0007923354bec8ec2ea4d23d92f7d", "patch": "@@ -0,0 +1,42 @@\n+use crate::ops::Try;\n+\n+/// Like `Iterator::by_ref`, but requiring `Sized` so it can forward generics.\n+///\n+/// Ideally this will no longer be required, eventually, but as can be seen in\n+/// the benchmarks (as of Feb 2022 at least) `by_ref` can have performance cost.\n+pub(crate) struct ByRefSized<'a, I>(pub &'a mut I);\n+\n+impl<I: Iterator> Iterator for ByRefSized<'_, I> {\n+    type Item = I::Item;\n+\n+    fn next(&mut self) -> Option<Self::Item> {\n+        self.0.next()\n+    }\n+\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        self.0.size_hint()\n+    }\n+\n+    fn advance_by(&mut self, n: usize) -> Result<(), usize> {\n+        self.0.advance_by(n)\n+    }\n+\n+    fn nth(&mut self, n: usize) -> Option<Self::Item> {\n+        self.0.nth(n)\n+    }\n+\n+    fn fold<B, F>(self, init: B, f: F) -> B\n+    where\n+        F: FnMut(B, Self::Item) -> B,\n+    {\n+        self.0.fold(init, f)\n+    }\n+\n+    fn try_fold<B, F, R>(&mut self, init: B, f: F) -> R\n+    where\n+        F: FnMut(B, Self::Item) -> R,\n+        R: Try<Output = B>,\n+    {\n+        self.0.try_fold(init, f)\n+    }\n+}"}, {"sha": "d82fde4752020226796f4046a1e9a63d2280f952", "filename": "library/core/src/iter/adapters/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c183d4a510a0007923354bec8ec2ea4d23d92f7d/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c183d4a510a0007923354bec8ec2ea4d23d92f7d/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs?ref=c183d4a510a0007923354bec8ec2ea4d23d92f7d", "patch": "@@ -1,6 +1,7 @@\n use crate::iter::{InPlaceIterable, Iterator};\n use crate::ops::{ChangeOutputType, ControlFlow, FromResidual, NeverShortCircuit, Residual, Try};\n \n+mod by_ref_sized;\n mod chain;\n mod cloned;\n mod copied;\n@@ -31,6 +32,8 @@ pub use self::{\n     scan::Scan, skip::Skip, skip_while::SkipWhile, take::Take, take_while::TakeWhile, zip::Zip,\n };\n \n+pub(crate) use self::by_ref_sized::ByRefSized;\n+\n #[stable(feature = \"iter_cloned\", since = \"1.1.0\")]\n pub use self::cloned::Cloned;\n "}, {"sha": "145c5ee109d7f96fe9726485a5a4059667439323", "filename": "library/core/src/iter/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c183d4a510a0007923354bec8ec2ea4d23d92f7d/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c183d4a510a0007923354bec8ec2ea4d23d92f7d/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs?ref=c183d4a510a0007923354bec8ec2ea4d23d92f7d", "patch": "@@ -417,7 +417,7 @@ pub use self::adapters::{\n #[unstable(feature = \"iter_intersperse\", reason = \"recently added\", issue = \"79524\")]\n pub use self::adapters::{Intersperse, IntersperseWith};\n \n-pub(crate) use self::adapters::try_process;\n+pub(crate) use self::adapters::{try_process, ByRefSized};\n \n mod adapters;\n mod range;"}, {"sha": "b62e8dfe1d610f9694047c563fb127cd13013421", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c183d4a510a0007923354bec8ec2ea4d23d92f7d/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c183d4a510a0007923354bec8ec2ea4d23d92f7d/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=c183d4a510a0007923354bec8ec2ea4d23d92f7d", "patch": "@@ -2,6 +2,7 @@ use crate::cmp::{self, Ordering};\n use crate::ops::{ChangeOutputType, ControlFlow, FromResidual, Residual, Try};\n \n use super::super::try_process;\n+use super::super::ByRefSized;\n use super::super::TrustedRandomAccessNoCoerce;\n use super::super::{Chain, Cloned, Copied, Cycle, Enumerate, Filter, FilterMap, Fuse};\n use super::super::{FlatMap, Flatten};\n@@ -1861,7 +1862,7 @@ pub trait Iterator {\n         <<Self as Iterator>::Item as Try>::Residual: Residual<B>,\n         B: FromIterator<<Self::Item as Try>::Output>,\n     {\n-        try_process(self, |i| i.collect())\n+        try_process(ByRefSized(self), |i| i.collect())\n     }\n \n     /// Collects all the items from an iterator into a collection."}, {"sha": "731b1592d419382efa4c24e2428827e2d488bbe2", "filename": "library/core/tests/iter/traits/iterator.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c183d4a510a0007923354bec8ec2ea4d23d92f7d/library%2Fcore%2Ftests%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c183d4a510a0007923354bec8ec2ea4d23d92f7d/library%2Fcore%2Ftests%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Ftraits%2Fiterator.rs?ref=c183d4a510a0007923354bec8ec2ea4d23d92f7d", "patch": "@@ -551,6 +551,30 @@ fn test_collect_into() {\n     assert!(a == b);\n }\n \n+#[test]\n+fn iter_try_collect_uses_try_fold_not_next() {\n+    // This makes sure it picks up optimizations, and doesn't use the `&mut I` impl.\n+    struct PanicOnNext<I>(I);\n+    impl<I: Iterator> Iterator for PanicOnNext<I> {\n+        type Item = I::Item;\n+        fn next(&mut self) -> Option<Self::Item> {\n+            panic!(\"Iterator::next should not be called!\")\n+        }\n+        fn try_fold<B, F, R>(&mut self, init: B, f: F) -> R\n+        where\n+            Self: Sized,\n+            F: FnMut(B, Self::Item) -> R,\n+            R: std::ops::Try<Output = B>,\n+        {\n+            self.0.try_fold(init, f)\n+        }\n+    }\n+\n+    let it = (0..10).map(Some);\n+    let _ = PanicOnNext(it).try_collect::<Vec<_>>();\n+    // validation is just that it didn't panic.\n+}\n+\n // just tests by whether or not this compiles\n fn _empty_impl_all_auto_traits<T>() {\n     use std::panic::{RefUnwindSafe, UnwindSafe};"}]}