{"sha": "5d5e50d67edd071aa82035435d522577bd03b2d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkNWU1MGQ2N2VkZDA3MWFhODIwMzU0MzVkNTIyNTc3YmQwM2IyZDg=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-01-27T13:51:30Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-01-27T13:51:30Z"}, "message": "fixed suggestion for iter case", "tree": {"sha": "53101ef24243918d921ee4bc0f8e270b74661220", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53101ef24243918d921ee4bc0f8e270b74661220"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d5e50d67edd071aa82035435d522577bd03b2d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d5e50d67edd071aa82035435d522577bd03b2d8", "html_url": "https://github.com/rust-lang/rust/commit/5d5e50d67edd071aa82035435d522577bd03b2d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d5e50d67edd071aa82035435d522577bd03b2d8/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d152e5c683165b9ba43de1e65aadd08f137d999d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d152e5c683165b9ba43de1e65aadd08f137d999d", "html_url": "https://github.com/rust-lang/rust/commit/d152e5c683165b9ba43de1e65aadd08f137d999d"}], "stats": {"total": 37, "additions": 23, "deletions": 14}, "files": [{"sha": "a5f27440f9417f3a522e350f409fdf0775bf8728", "filename": "src/methods.rs", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/5d5e50d67edd071aa82035435d522577bd03b2d8/src%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d5e50d67edd071aa82035435d522577bd03b2d8/src%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmethods.rs?ref=5d5e50d67edd071aa82035435d522577bd03b2d8", "patch": "@@ -446,36 +446,44 @@ fn lint_extend(cx: &LateContext, expr: &Expr, args: &MethodArgs) {\n         return;\n     }\n     let arg_ty = cx.tcx.expr_ty(&args[1]);\n-    if derefs_to_slice(cx, &args[1], &arg_ty) {\n+    if let Some((span, r)) = derefs_to_slice(cx, &args[1], &arg_ty) {\n         span_lint(cx, EXTEND_FROM_SLICE, expr.span,\n                   &format!(\"use of `extend` to extend a Vec by a slice\"))\n             .span_suggestion(expr.span, \"try this\",\n-                             format!(\"{}.extend_from_slice({})\",\n+                             format!(\"{}.extend_from_slice({}{})\",\n                                      snippet(cx, args[0].span, \"_\"),\n-                                     snippet(cx, args[1].span, \"_\")));\n+                                     r, snippet(cx, span, \"_\")));\n     }\n }\n \n-fn derefs_to_slice(cx: &LateContext, expr: &Expr, ty: &ty::Ty) -> bool {\n-    fn may_slice(cx: &LateContext, expr: &Expr, ty: &ty::Ty) -> bool {\n+fn derefs_to_slice(cx: &LateContext, expr: &Expr, ty: &ty::Ty) \n+   -> Option<(Span, &'static str)> {\n+    fn may_slice(cx: &LateContext, ty: &ty::Ty) -> bool {\n         match ty.sty {\n             ty::TySlice(_) => true,            \n             ty::TyStruct(..) => match_type(cx, ty, &VEC_PATH),\n             ty::TyArray(_, size) => size < 32,\n             ty::TyRef(_, ty::TypeAndMut { ty: ref inner, .. }) |\n-            ty::TyBox(ref inner) => may_slice(cx, expr, inner),\n+            ty::TyBox(ref inner) => may_slice(cx, inner),\n             _ => false\n         }\n     }\n     if let ExprMethodCall(name, _, ref args) = expr.node {\n-        return &name.node.as_str() == &\"iter\" && \n-               may_slice(cx, &args[0], &cx.tcx.expr_ty(&args[0]))\n-    }\n-    match ty.sty {\n-        ty::TySlice(_) => true,\n-        ty::TyRef(_, ty::TypeAndMut { ty: ref inner, .. }) |\n-        ty::TyBox(ref inner) => may_slice(cx, expr, inner),\n-        _ => false\n+        if &name.node.as_str() == &\"iter\" && \n+               may_slice(cx, &cx.tcx.expr_ty(&args[0])) {\n+            Some((args[0].span, \"&\"))\n+        } else {\n+            None\n+        }\n+    } else {\n+        match ty.sty {\n+            ty::TySlice(_) => Some((expr.span, \"\")),\n+            ty::TyRef(_, ty::TypeAndMut { ty: ref inner, .. }) |\n+            ty::TyBox(ref inner) => if may_slice(cx, inner) { \n+                Some((expr.span, \"\"))\n+            } else { None },\n+            _ => None\n+        }\n     }\n }\n "}, {"sha": "5172aa9e9df17d9499332b6b421814ed7794e661", "filename": "tests/compile-fail/methods.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5d5e50d67edd071aa82035435d522577bd03b2d8/tests%2Fcompile-fail%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d5e50d67edd071aa82035435d522577bd03b2d8/tests%2Fcompile-fail%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmethods.rs?ref=5d5e50d67edd071aa82035435d522577bd03b2d8", "patch": "@@ -314,4 +314,5 @@ fn use_extend_from_slice() {\n     v.extend(o);\n     v.extend(Some(\"Bye\"));\n     v.extend(vec![\"Not\", \"like\", \"this\"]);\n+    v.extend([\"Nor\", \"this\"].iter());\n }"}]}