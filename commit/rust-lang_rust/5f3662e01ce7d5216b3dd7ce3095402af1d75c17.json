{"sha": "5f3662e01ce7d5216b3dd7ce3095402af1d75c17", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmMzY2MmUwMWNlN2Q1MjE2YjNkZDdjZTMwOTU0MDJhZjFkNzVjMTc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-08-02T12:27:47Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-08-02T12:28:39Z"}, "message": "minor: encode usage convention into API", "tree": {"sha": "9359849fd8e8968d769efba6550054272896dbe5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9359849fd8e8968d769efba6550054272896dbe5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f3662e01ce7d5216b3dd7ce3095402af1d75c17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f3662e01ce7d5216b3dd7ce3095402af1d75c17", "html_url": "https://github.com/rust-lang/rust/commit/5f3662e01ce7d5216b3dd7ce3095402af1d75c17", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f3662e01ce7d5216b3dd7ce3095402af1d75c17/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b6ea1545f7f9beeacdd915c5f647510ec9af3ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b6ea1545f7f9beeacdd915c5f647510ec9af3ec", "html_url": "https://github.com/rust-lang/rust/commit/8b6ea1545f7f9beeacdd915c5f647510ec9af3ec"}], "stats": {"total": 27, "additions": 16, "deletions": 11}, "files": [{"sha": "188e2aea9abcc5c6bfbab15198fd54b584a577b3", "filename": "crates/hir_def/src/resolver.rs", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5f3662e01ce7d5216b3dd7ce3095402af1d75c17/crates%2Fhir_def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3662e01ce7d5216b3dd7ce3095402af1d75c17/crates%2Fhir_def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fresolver.rs?ref=5f3662e01ce7d5216b3dd7ce3095402af1d75c17", "patch": "@@ -28,7 +28,10 @@ use crate::{\n \n #[derive(Debug, Clone, Default)]\n pub struct Resolver {\n-    // FIXME: all usages generally call `.rev`, so maybe reverse once in construction?\n+    /// The stack of scopes, where the inner-most scope is the last item.\n+    ///\n+    /// When using, you generally want to process the scopes in reverse order,\n+    /// there's `scopes` *method* for that.\n     scopes: Vec<Scope>,\n }\n \n@@ -123,6 +126,10 @@ impl Resolver {\n         }\n     }\n \n+    fn scopes(&self) -> impl Iterator<Item = &Scope> {\n+        self.scopes.iter().rev()\n+    }\n+\n     fn resolve_module_path(\n         &self,\n         db: &dyn DefDatabase,\n@@ -177,7 +184,7 @@ impl Resolver {\n     ) -> Option<(TypeNs, Option<usize>)> {\n         let first_name = path.segments().first()?;\n         let skip_to_mod = path.kind != PathKind::Plain;\n-        for scope in self.scopes.iter().rev() {\n+        for scope in self.scopes() {\n             match scope {\n                 Scope::ExprScope(_) => continue,\n                 Scope::GenericParams { .. } | Scope::ImplDefScope(_) if skip_to_mod => continue,\n@@ -251,7 +258,7 @@ impl Resolver {\n         let tmp = name![self];\n         let first_name = if path.is_self() { &tmp } else { path.segments().first()? };\n         let skip_to_mod = path.kind != PathKind::Plain && !path.is_self();\n-        for scope in self.scopes.iter().rev() {\n+        for scope in self.scopes() {\n             match scope {\n                 Scope::AdtScope(_)\n                 | Scope::ExprScope(_)\n@@ -342,14 +349,14 @@ impl Resolver {\n     }\n \n     pub fn process_all_names(&self, db: &dyn DefDatabase, f: &mut dyn FnMut(Name, ScopeDef)) {\n-        for scope in self.scopes.iter().rev() {\n+        for scope in self.scopes() {\n             scope.process_names(db, f);\n         }\n     }\n \n     pub fn traits_in_scope(&self, db: &dyn DefDatabase) -> FxHashSet<TraitId> {\n         let mut traits = FxHashSet::default();\n-        for scope in &self.scopes {\n+        for scope in self.scopes() {\n             match scope {\n                 Scope::ModuleScope(m) => {\n                     if let Some(prelude) = m.def_map.prelude() {\n@@ -384,7 +391,7 @@ impl Resolver {\n     }\n \n     fn module_scope(&self) -> Option<(&DefMap, LocalModuleId)> {\n-        self.scopes.iter().rev().find_map(|scope| match scope {\n+        self.scopes().find_map(|scope| match scope {\n             Scope::ModuleScope(m) => Some((&*m.def_map, m.module_id)),\n \n             _ => None,\n@@ -404,9 +411,7 @@ impl Resolver {\n     pub fn where_predicates_in_scope(\n         &self,\n     ) -> impl Iterator<Item = &crate::generics::WherePredicate> {\n-        self.scopes\n-            .iter()\n-            .rev()\n+        self.scopes()\n             .filter_map(|scope| match scope {\n                 Scope::GenericParams { params, .. } => Some(params),\n                 _ => None,\n@@ -415,14 +420,14 @@ impl Resolver {\n     }\n \n     pub fn generic_def(&self) -> Option<GenericDefId> {\n-        self.scopes.iter().rev().find_map(|scope| match scope {\n+        self.scopes().find_map(|scope| match scope {\n             Scope::GenericParams { def, .. } => Some(*def),\n             _ => None,\n         })\n     }\n \n     pub fn body_owner(&self) -> Option<DefWithBodyId> {\n-        self.scopes.iter().rev().find_map(|scope| match scope {\n+        self.scopes().find_map(|scope| match scope {\n             Scope::ExprScope(it) => Some(it.owner),\n             _ => None,\n         })"}]}