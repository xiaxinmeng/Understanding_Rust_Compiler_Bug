{"sha": "1f71f0f2b54981d4cc7a99201d180e787c13ca6d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmNzFmMGYyYjU0OTgxZDRjYzdhOTkyMDFkMTgwZTc4N2MxM2NhNmQ=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2020-08-08T03:42:29Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2020-08-09T19:25:21Z"}, "message": "rustc_codegen_llvm: use IndexSet in CoverageMapGenerator", "tree": {"sha": "7aaf7ada263d9c26c167b10b2c7e9494a691630b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7aaf7ada263d9c26c167b10b2c7e9494a691630b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f71f0f2b54981d4cc7a99201d180e787c13ca6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f71f0f2b54981d4cc7a99201d180e787c13ca6d", "html_url": "https://github.com/rust-lang/rust/commit/1f71f0f2b54981d4cc7a99201d180e787c13ca6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f71f0f2b54981d4cc7a99201d180e787c13ca6d/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "997a766b320e845fa8833c5dfe7d9a29c6970ccf", "url": "https://api.github.com/repos/rust-lang/rust/commits/997a766b320e845fa8833c5dfe7d9a29c6970ccf", "html_url": "https://github.com/rust-lang/rust/commit/997a766b320e845fa8833c5dfe7d9a29c6970ccf"}], "stats": {"total": 26, "additions": 10, "deletions": 16}, "files": [{"sha": "b50b3b6d975c5e3daf144ea8d719d580f98fdbee", "filename": "src/librustc_codegen_llvm/coverageinfo/mapgen.rs", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1f71f0f2b54981d4cc7a99201d180e787c13ca6d/src%2Flibrustc_codegen_llvm%2Fcoverageinfo%2Fmapgen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f71f0f2b54981d4cc7a99201d180e787c13ca6d/src%2Flibrustc_codegen_llvm%2Fcoverageinfo%2Fmapgen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcoverageinfo%2Fmapgen.rs?ref=1f71f0f2b54981d4cc7a99201d180e787c13ca6d", "patch": "@@ -6,7 +6,7 @@ use llvm::coverageinfo::CounterMappingRegion;\n use log::debug;\n use rustc_codegen_ssa::coverageinfo::map::{Counter, CounterExpression, Region};\n use rustc_codegen_ssa::traits::{BaseTypeMethods, ConstMethods};\n-use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::fx::FxIndexSet;\n use rustc_llvm::RustString;\n \n use std::ffi::CString;\n@@ -76,13 +76,12 @@ pub fn finalize<'ll, 'tcx>(cx: &CodegenCx<'ll, 'tcx>) {\n }\n \n struct CoverageMapGenerator {\n-    filenames: Vec<CString>,\n-    filename_to_index: FxHashMap<CString, u32>,\n+    filenames: FxIndexSet<CString>,\n }\n \n impl CoverageMapGenerator {\n     fn new() -> Self {\n-        Self { filenames: Vec::new(), filename_to_index: FxHashMap::default() }\n+        Self { filenames: FxIndexSet::default() }\n     }\n \n     /// Using the `expressions` and `counter_regions` collected for the current function, generate\n@@ -122,16 +121,8 @@ impl CoverageMapGenerator {\n                 let c_filename =\n                     CString::new(file_name).expect(\"null error converting filename to C string\");\n                 debug!(\"  file_id: {} = '{:?}'\", current_file_id, c_filename);\n-                let filenames_index = match self.filename_to_index.get(&c_filename) {\n-                    Some(index) => *index,\n-                    None => {\n-                        let index = self.filenames.len() as u32;\n-                        self.filenames.push(c_filename.clone());\n-                        self.filename_to_index.insert(c_filename.clone(), index);\n-                        index\n-                    }\n-                };\n-                virtual_file_mapping.push(filenames_index);\n+                let (filenames_index, _) = self.filenames.insert_full(c_filename);\n+                virtual_file_mapping.push(filenames_index as u32);\n             }\n             mapping_regions.push(CounterMappingRegion::code_region(\n                 counter,"}, {"sha": "90831f0bcfbeebe6ce2c4f15d549b6e57ae80985", "filename": "src/librustc_codegen_llvm/coverageinfo/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1f71f0f2b54981d4cc7a99201d180e787c13ca6d/src%2Flibrustc_codegen_llvm%2Fcoverageinfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f71f0f2b54981d4cc7a99201d180e787c13ca6d/src%2Flibrustc_codegen_llvm%2Fcoverageinfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcoverageinfo%2Fmod.rs?ref=1f71f0f2b54981d4cc7a99201d180e787c13ca6d", "patch": "@@ -97,8 +97,11 @@ impl CoverageInfoBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n     }\n }\n \n-pub(crate) fn write_filenames_section_to_buffer(filenames: &Vec<CString>, buffer: &RustString) {\n-    let c_str_vec = filenames.iter().map(|cstring| cstring.as_ptr()).collect::<Vec<_>>();\n+pub(crate) fn write_filenames_section_to_buffer<'a>(\n+    filenames: impl IntoIterator<Item = &'a CString>,\n+    buffer: &RustString,\n+) {\n+    let c_str_vec = filenames.into_iter().map(|cstring| cstring.as_ptr()).collect::<Vec<_>>();\n     unsafe {\n         llvm::LLVMRustCoverageWriteFilenamesSectionToBuffer(\n             c_str_vec.as_ptr(),"}]}