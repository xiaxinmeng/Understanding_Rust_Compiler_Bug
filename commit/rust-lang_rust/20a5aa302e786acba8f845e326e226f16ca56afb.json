{"sha": "20a5aa302e786acba8f845e326e226f16ca56afb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwYTVhYTMwMmU3ODZhY2JhOGY4NDVlMzI2ZTIyNmYxNmNhNTZhZmI=", "commit": {"author": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2019-04-18T01:17:12Z"}, "committer": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2019-05-06T20:20:18Z"}, "message": "set the default edition when pre-parsing a doctest", "tree": {"sha": "b625394784077c914f7e71ba320b7fdce76c37e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b625394784077c914f7e71ba320b7fdce76c37e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20a5aa302e786acba8f845e326e226f16ca56afb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20a5aa302e786acba8f845e326e226f16ca56afb", "html_url": "https://github.com/rust-lang/rust/commit/20a5aa302e786acba8f845e326e226f16ca56afb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20a5aa302e786acba8f845e326e226f16ca56afb/comments", "author": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a19cf18c7dbbcc46dddea81df3a4cee1735c2349", "url": "https://api.github.com/repos/rust-lang/rust/commits/a19cf18c7dbbcc46dddea81df3a4cee1735c2349", "html_url": "https://github.com/rust-lang/rust/commit/a19cf18c7dbbcc46dddea81df3a4cee1735c2349"}], "stats": {"total": 137, "additions": 84, "deletions": 53}, "files": [{"sha": "0a403f61e9c2302b60297b6fabb4a8ed30b0b741", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/20a5aa302e786acba8f845e326e226f16ca56afb/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20a5aa302e786acba8f845e326e226f16ca56afb/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=20a5aa302e786acba8f845e326e226f16ca56afb", "patch": "@@ -386,27 +386,28 @@ impl Options {\n             }\n         }\n \n+        let edition = matches.opt_str(\"edition\").unwrap_or(\"2015\".to_string());\n+        let edition = match edition.parse() {\n+            Ok(e) => e,\n+            Err(_) => {\n+                diag.struct_err(\"could not parse edition\").emit();\n+                return Err(1);\n+            }\n+        };\n+\n         let mut id_map = html::markdown::IdMap::new();\n         id_map.populate(html::render::initial_ids());\n         let external_html = match ExternalHtml::load(\n                 &matches.opt_strs(\"html-in-header\"),\n                 &matches.opt_strs(\"html-before-content\"),\n                 &matches.opt_strs(\"html-after-content\"),\n                 &matches.opt_strs(\"markdown-before-content\"),\n-                &matches.opt_strs(\"markdown-after-content\"), &diag, &mut id_map) {\n+                &matches.opt_strs(\"markdown-after-content\"),\n+                &diag, &mut id_map, edition) {\n             Some(eh) => eh,\n             None => return Err(3),\n         };\n \n-        let edition = matches.opt_str(\"edition\").unwrap_or(\"2015\".to_string());\n-        let edition = match edition.parse() {\n-            Ok(e) => e,\n-            Err(_) => {\n-                diag.struct_err(\"could not parse edition\").emit();\n-                return Err(1);\n-            }\n-        };\n-\n         match matches.opt_str(\"r\").as_ref().map(|s| &**s) {\n             Some(\"rust\") | None => {}\n             Some(s) => {"}, {"sha": "d604ba11d41860fd39f0b70d56dd6051a9bb9424", "filename": "src/librustdoc/externalfiles.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/20a5aa302e786acba8f845e326e226f16ca56afb/src%2Flibrustdoc%2Fexternalfiles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20a5aa302e786acba8f845e326e226f16ca56afb/src%2Flibrustdoc%2Fexternalfiles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fexternalfiles.rs?ref=20a5aa302e786acba8f845e326e226f16ca56afb", "patch": "@@ -3,6 +3,7 @@ use std::path::Path;\n use std::str;\n use errors;\n use crate::syntax::feature_gate::UnstableFeatures;\n+use crate::syntax::edition::Edition;\n use crate::html::markdown::{IdMap, ErrorCodes, Markdown};\n \n use std::cell::RefCell;\n@@ -23,7 +24,7 @@ pub struct ExternalHtml {\n impl ExternalHtml {\n     pub fn load(in_header: &[String], before_content: &[String], after_content: &[String],\n                 md_before_content: &[String], md_after_content: &[String], diag: &errors::Handler,\n-                id_map: &mut IdMap)\n+                id_map: &mut IdMap, edition: Edition)\n             -> Option<ExternalHtml> {\n         let codes = ErrorCodes::from(UnstableFeatures::from_environment().is_nightly_build());\n         load_external_files(in_header, diag)\n@@ -34,7 +35,8 @@ impl ExternalHtml {\n             .and_then(|(ih, bc)|\n                 load_external_files(md_before_content, diag)\n                     .map(|m_bc| (ih,\n-                            format!(\"{}{}\", bc, Markdown(&m_bc, &[], RefCell::new(id_map), codes))))\n+                            format!(\"{}{}\", bc, Markdown(&m_bc, &[], RefCell::new(id_map),\n+                                    codes, edition))))\n             )\n             .and_then(|(ih, bc)|\n                 load_external_files(after_content, diag)\n@@ -43,7 +45,8 @@ impl ExternalHtml {\n             .and_then(|(ih, bc, ac)|\n                 load_external_files(md_after_content, diag)\n                     .map(|m_ac| (ih, bc,\n-                            format!(\"{}{}\", ac, Markdown(&m_ac, &[], RefCell::new(id_map), codes))))\n+                            format!(\"{}{}\", ac, Markdown(&m_ac, &[], RefCell::new(id_map),\n+                                    codes, edition))))\n             )\n             .map(|(ih, bc, ac)|\n                 ExternalHtml {"}, {"sha": "5f450fcf6fca0eba4b1cb03f980a36c1fb41e5ba", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 29, "deletions": 25, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/20a5aa302e786acba8f845e326e226f16ca56afb/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20a5aa302e786acba8f845e326e226f16ca56afb/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=20a5aa302e786acba8f845e326e226f16ca56afb", "patch": "@@ -42,14 +42,21 @@ fn opts() -> Options {\n /// A unit struct which has the `fmt::Display` trait implemented. When\n /// formatted, this struct will emit the HTML corresponding to the rendered\n /// version of the contained markdown string.\n-/// The second parameter is a list of link replacements\n+///\n+/// The second parameter is a list of link replacements.\n+///\n+/// The third is the current list of used header IDs.\n+///\n+/// The fourth is whether to allow the use of explicit error codes in doctest lang strings.\n+///\n+/// The fifth is what default edition to use when parsing doctests (to add a `fn main`).\n pub struct Markdown<'a>(\n-    pub &'a str, pub &'a [(String, String)], pub RefCell<&'a mut IdMap>, pub ErrorCodes);\n+    pub &'a str, pub &'a [(String, String)], pub RefCell<&'a mut IdMap>, pub ErrorCodes, pub Edition);\n /// A unit struct like `Markdown`, that renders the markdown with a\n /// table of contents.\n-pub struct MarkdownWithToc<'a>(pub &'a str, pub RefCell<&'a mut IdMap>, pub ErrorCodes);\n+pub struct MarkdownWithToc<'a>(pub &'a str, pub RefCell<&'a mut IdMap>, pub ErrorCodes, pub Edition);\n /// A unit struct like `Markdown`, that renders the markdown escaping HTML tags.\n-pub struct MarkdownHtml<'a>(pub &'a str, pub RefCell<&'a mut IdMap>, pub ErrorCodes);\n+pub struct MarkdownHtml<'a>(pub &'a str, pub RefCell<&'a mut IdMap>, pub ErrorCodes, pub Edition);\n /// A unit struct like `Markdown`, that renders only the first paragraph.\n pub struct MarkdownSummaryLine<'a>(pub &'a str, pub &'a [(String, String)]);\n \n@@ -146,13 +153,15 @@ thread_local!(pub static PLAYGROUND: RefCell<Option<(Option<String>, String)>> =\n struct CodeBlocks<'a, I: Iterator<Item = Event<'a>>> {\n     inner: I,\n     check_error_codes: ErrorCodes,\n+    edition: Edition,\n }\n \n impl<'a, I: Iterator<Item = Event<'a>>> CodeBlocks<'a, I> {\n-    fn new(iter: I, error_codes: ErrorCodes) -> Self {\n+    fn new(iter: I, error_codes: ErrorCodes, edition: Edition) -> Self {\n         CodeBlocks {\n             inner: iter,\n             check_error_codes: error_codes,\n+            edition,\n         }\n     }\n }\n@@ -177,6 +186,9 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for CodeBlocks<'a, I> {\n             return event;\n         }\n \n+        let explicit_edition = edition.is_some();\n+        let edition = edition.unwrap_or(self.edition);\n+\n         let mut origtext = String::new();\n         for event in &mut self.inner {\n             match event {\n@@ -202,22 +214,14 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for CodeBlocks<'a, I> {\n                     .collect::<Vec<Cow<'_, str>>>().join(\"\\n\");\n                 let krate = krate.as_ref().map(|s| &**s);\n                 let (test, _) = test::make_test(&test, krate, false,\n-                                           &Default::default());\n+                                           &Default::default(), edition);\n                 let channel = if test.contains(\"#![feature(\") {\n                     \"&amp;version=nightly\"\n                 } else {\n                     \"\"\n                 };\n \n-                let edition_string = if let Some(e @ Edition::Edition2018) = edition {\n-                    format!(\"&amp;edition={}{}\", e,\n-                            if channel == \"&amp;version=nightly\" { \"\" }\n-                            else { \"&amp;version=nightly\" })\n-                } else if let Some(e) = edition {\n-                    format!(\"&amp;edition={}\", e)\n-                } else {\n-                    \"\".to_owned()\n-                };\n+                let edition_string = format!(\"&amp;edition={}\", edition);\n \n                 // These characters don't need to be escaped in a URI.\n                 // FIXME: use a library function for percent encoding.\n@@ -247,8 +251,8 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for CodeBlocks<'a, I> {\n                 Some((\"This example is not tested\".to_owned(), \"ignore\"))\n             } else if compile_fail {\n                 Some((\"This example deliberately fails to compile\".to_owned(), \"compile_fail\"))\n-            } else if let Some(e) = edition {\n-                Some((format!(\"This code runs with edition {}\", e), \"edition\"))\n+            } else if explicit_edition {\n+                Some((format!(\"This code runs with edition {}\", edition), \"edition\"))\n             } else {\n                 None\n             };\n@@ -259,7 +263,7 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for CodeBlocks<'a, I> {\n                     Some(&format!(\"rust-example-rendered{}\",\n                                   if ignore { \" ignore\" }\n                                   else if compile_fail { \" compile_fail\" }\n-                                  else if edition.is_some() { \" edition \" }\n+                                  else if explicit_edition { \" edition \" }\n                                   else { \"\" })),\n                     playground_button.as_ref().map(String::as_str),\n                     Some((s1.as_str(), s2))));\n@@ -270,7 +274,7 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for CodeBlocks<'a, I> {\n                     Some(&format!(\"rust-example-rendered{}\",\n                                   if ignore { \" ignore\" }\n                                   else if compile_fail { \" compile_fail\" }\n-                                  else if edition.is_some() { \" edition \" }\n+                                  else if explicit_edition { \" edition \" }\n                                   else { \"\" })),\n                     playground_button.as_ref().map(String::as_str),\n                     None));\n@@ -659,7 +663,7 @@ impl LangString {\n \n impl<'a> fmt::Display for Markdown<'a> {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        let Markdown(md, links, ref ids, codes) = *self;\n+        let Markdown(md, links, ref ids, codes, edition) = *self;\n         let mut ids = ids.borrow_mut();\n \n         // This is actually common enough to special-case\n@@ -678,7 +682,7 @@ impl<'a> fmt::Display for Markdown<'a> {\n \n         let p = HeadingLinks::new(p, None, &mut ids);\n         let p = LinkReplacer::new(p, links);\n-        let p = CodeBlocks::new(p, codes);\n+        let p = CodeBlocks::new(p, codes, edition);\n         let p = Footnotes::new(p);\n         html::push_html(&mut s, p);\n \n@@ -688,7 +692,7 @@ impl<'a> fmt::Display for Markdown<'a> {\n \n impl<'a> fmt::Display for MarkdownWithToc<'a> {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        let MarkdownWithToc(md, ref ids, codes) = *self;\n+        let MarkdownWithToc(md, ref ids, codes, edition) = *self;\n         let mut ids = ids.borrow_mut();\n \n         let p = Parser::new_ext(md, opts());\n@@ -699,7 +703,7 @@ impl<'a> fmt::Display for MarkdownWithToc<'a> {\n \n         {\n             let p = HeadingLinks::new(p, Some(&mut toc), &mut ids);\n-            let p = CodeBlocks::new(p, codes);\n+            let p = CodeBlocks::new(p, codes, edition);\n             let p = Footnotes::new(p);\n             html::push_html(&mut s, p);\n         }\n@@ -712,7 +716,7 @@ impl<'a> fmt::Display for MarkdownWithToc<'a> {\n \n impl<'a> fmt::Display for MarkdownHtml<'a> {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        let MarkdownHtml(md, ref ids, codes) = *self;\n+        let MarkdownHtml(md, ref ids, codes, edition) = *self;\n         let mut ids = ids.borrow_mut();\n \n         // This is actually common enough to special-case\n@@ -728,7 +732,7 @@ impl<'a> fmt::Display for MarkdownHtml<'a> {\n         let mut s = String::with_capacity(md.len() * 3 / 2);\n \n         let p = HeadingLinks::new(p, None, &mut ids);\n-        let p = CodeBlocks::new(p, codes);\n+        let p = CodeBlocks::new(p, codes, edition);\n         let p = Footnotes::new(p);\n         html::push_html(&mut s, p);\n "}, {"sha": "d92681c4f235058da56bcdea12e69b91d18d15aa", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/20a5aa302e786acba8f845e326e226f16ca56afb/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20a5aa302e786acba8f845e326e226f16ca56afb/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=20a5aa302e786acba8f845e326e226f16ca56afb", "patch": "@@ -47,6 +47,7 @@ use std::rc::Rc;\n use errors;\n use serialize::json::{ToJson, Json, as_json};\n use syntax::ast;\n+use syntax::edition::Edition;\n use syntax::ext::base::MacroKind;\n use syntax::source_map::FileName;\n use syntax::feature_gate::UnstableFeatures;\n@@ -107,6 +108,8 @@ struct Context {\n     /// publicly reused items to redirect to the right location.\n     pub render_redirect_pages: bool,\n     pub codes: ErrorCodes,\n+    /// The default edition used to parse doctests.\n+    pub edition: Edition,\n     /// The map used to ensure all generated 'id=' attributes are unique.\n     id_map: Rc<RefCell<IdMap>>,\n     pub shared: Arc<SharedContext>,\n@@ -513,7 +516,8 @@ pub fn run(mut krate: clean::Crate,\n            options: RenderOptions,\n            passes: FxHashSet<String>,\n            renderinfo: RenderInfo,\n-           diag: &errors::Handler) -> Result<(), Error> {\n+           diag: &errors::Handler,\n+           edition: Edition) -> Result<(), Error> {\n     // need to save a copy of the options for rendering the index page\n     let md_opts = options.clone();\n     let RenderOptions {\n@@ -603,6 +607,7 @@ pub fn run(mut krate: clean::Crate,\n         dst,\n         render_redirect_pages: false,\n         codes: ErrorCodes::from(UnstableFeatures::from_environment().is_nightly_build()),\n+        edition,\n         id_map: Rc::new(RefCell::new(id_map)),\n         shared: Arc::new(scx),\n     };\n@@ -1127,7 +1132,7 @@ themePicker.onblur = handleThemeButtonsBlur;\n             md_opts.output = cx.dst.clone();\n             md_opts.external_html = (*cx.shared).layout.external_html.clone();\n \n-            crate::markdown::render(index_page, md_opts, diag);\n+            crate::markdown::render(index_page, md_opts, diag, cx.edition);\n         } else {\n             let dst = cx.dst.join(\"index.html\");\n             let mut w = BufWriter::new(try_err!(File::create(&dst), &dst));\n@@ -2552,7 +2557,7 @@ fn render_markdown(w: &mut fmt::Formatter<'_>,\n            if is_hidden { \" hidden\" } else { \"\" },\n            prefix,\n            Markdown(md_text, &links, RefCell::new(&mut ids),\n-           cx.codes))\n+           cx.codes, cx.edition))\n }\n \n fn document_short(\n@@ -2917,7 +2922,7 @@ fn short_stability(item: &clean::Item, cx: &Context) -> Vec<String> {\n \n         if let Some(note) = note {\n             let mut ids = cx.id_map.borrow_mut();\n-            let html = MarkdownHtml(&note, RefCell::new(&mut ids), error_codes);\n+            let html = MarkdownHtml(&note, RefCell::new(&mut ids), error_codes, cx.edition);\n             message.push_str(&format!(\": {}\", html));\n         }\n         stability.push(format!(\"<div class='stab deprecated'>{}</div>\", message));\n@@ -2966,7 +2971,7 @@ fn short_stability(item: &clean::Item, cx: &Context) -> Vec<String> {\n             message = format!(\n                 \"<details><summary>{}</summary>{}</details>\",\n                 message,\n-                MarkdownHtml(&unstable_reason, RefCell::new(&mut ids), error_codes)\n+                MarkdownHtml(&unstable_reason, RefCell::new(&mut ids), error_codes, cx.edition)\n             );\n         }\n \n@@ -4179,7 +4184,8 @@ fn render_impl(w: &mut fmt::Formatter<'_>, cx: &Context, i: &Impl, link: AssocIt\n         if let Some(ref dox) = cx.shared.maybe_collapsed_doc_value(&i.impl_item) {\n             let mut ids = cx.id_map.borrow_mut();\n             write!(w, \"<div class='docblock'>{}</div>\",\n-                   Markdown(&*dox, &i.impl_item.links(), RefCell::new(&mut ids), cx.codes))?;\n+                   Markdown(&*dox, &i.impl_item.links(), RefCell::new(&mut ids),\n+                            cx.codes, cx.edition))?;\n         }\n     }\n "}, {"sha": "f5061b671828e04e704509fa535b531ba6cc941d", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/20a5aa302e786acba8f845e326e226f16ca56afb/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20a5aa302e786acba8f845e326e226f16ca56afb/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=20a5aa302e786acba8f845e326e226f16ca56afb", "patch": "@@ -391,15 +391,19 @@ fn main_args(args: &[String]) -> i32 {\n     match (options.should_test, options.markdown_input()) {\n         (true, true) => return markdown::test(options, &diag),\n         (true, false) => return test::run(options),\n-        (false, true) => return markdown::render(options.input, options.render_options, &diag),\n+        (false, true) => return markdown::render(options.input,\n+                                                 options.render_options,\n+                                                 &diag,\n+                                                 options.edition),\n         (false, false) => {}\n     }\n \n     // need to move these items separately because we lose them by the time the closure is called,\n     // but we can't crates the Handler ahead of time because it's not Send\n     let diag_opts = (options.error_format,\n                      options.debugging_options.treat_err_as_bug,\n-                     options.debugging_options.ui_testing);\n+                     options.debugging_options.ui_testing,\n+                     options.edition);\n     let show_coverage = options.show_coverage;\n     rust_input(options, move |out| {\n         if show_coverage {\n@@ -410,14 +414,15 @@ fn main_args(args: &[String]) -> i32 {\n \n         let Output { krate, passes, renderinfo, renderopts } = out;\n         info!(\"going to format\");\n-        let (error_format, treat_err_as_bug, ui_testing) = diag_opts;\n+        let (error_format, treat_err_as_bug, ui_testing, edition) = diag_opts;\n         let diag = core::new_handler(error_format, None, treat_err_as_bug, ui_testing);\n         match html::render::run(\n             krate,\n             renderopts,\n             passes.into_iter().collect(),\n             renderinfo,\n             &diag,\n+            edition,\n         ) {\n             Ok(_) => rustc_driver::EXIT_SUCCESS,\n             Err(e) => {"}, {"sha": "b0a37ea9c8081f50025fad2cfa5d50f5b0e80e1d", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/20a5aa302e786acba8f845e326e226f16ca56afb/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20a5aa302e786acba8f845e326e226f16ca56afb/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=20a5aa302e786acba8f845e326e226f16ca56afb", "patch": "@@ -5,6 +5,7 @@ use std::cell::RefCell;\n \n use errors;\n use testing;\n+use syntax::edition::Edition;\n use syntax::source_map::DUMMY_SP;\n use syntax::feature_gate::UnstableFeatures;\n \n@@ -36,7 +37,12 @@ fn extract_leading_metadata<'a>(s: &'a str) -> (Vec<&'a str>, &'a str) {\n \n /// Render `input` (e.g., \"foo.md\") into an HTML file in `output`\n /// (e.g., output = \"bar\" => \"bar/foo.html\").\n-pub fn render(input: PathBuf, options: RenderOptions, diag: &errors::Handler) -> i32 {\n+pub fn render(\n+    input: PathBuf,\n+    options: RenderOptions,\n+    diag: &errors::Handler,\n+    edition: Edition\n+) -> i32 {\n     let mut output = options.output;\n     output.push(input.file_stem().unwrap());\n     output.set_extension(\"html\");\n@@ -76,9 +82,9 @@ pub fn render(input: PathBuf, options: RenderOptions, diag: &errors::Handler) ->\n     let mut ids = IdMap::new();\n     let error_codes = ErrorCodes::from(UnstableFeatures::from_environment().is_nightly_build());\n     let text = if !options.markdown_no_toc {\n-        MarkdownWithToc(text, RefCell::new(&mut ids), error_codes).to_string()\n+        MarkdownWithToc(text, RefCell::new(&mut ids), error_codes, edition).to_string()\n     } else {\n-        Markdown(text, &[], RefCell::new(&mut ids), error_codes).to_string()\n+        Markdown(text, &[], RefCell::new(&mut ids), error_codes, edition).to_string()\n     };\n \n     let err = write!("}, {"sha": "7a9b82c7165307ffee95bb2435f1ae7e0c7a92c9", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/20a5aa302e786acba8f845e326e226f16ca56afb/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20a5aa302e786acba8f845e326e226f16ca56afb/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=20a5aa302e786acba8f845e326e226f16ca56afb", "patch": "@@ -167,7 +167,7 @@ fn run_test(test: &str, cratename: &str, filename: &FileName, line: usize,\n             maybe_sysroot: Option<PathBuf>, linker: Option<PathBuf>, edition: Edition,\n             persist_doctests: Option<PathBuf>) {\n     let (test, line_offset) = match panic::catch_unwind(|| {\n-        make_test(test, Some(cratename), as_test_harness, opts)\n+        make_test(test, Some(cratename), as_test_harness, opts, edition)\n     }) {\n         Ok((test, line_offset)) => (test, line_offset),\n         Err(cause) if cause.is::<errors::FatalErrorMarker>() => {\n@@ -356,7 +356,8 @@ fn run_test(test: &str, cratename: &str, filename: &FileName, line: usize,\n pub fn make_test(s: &str,\n                  cratename: Option<&str>,\n                  dont_insert_main: bool,\n-                 opts: &TestOptions)\n+                 opts: &TestOptions,\n+                 edition: Edition)\n                  -> (String, usize) {\n     let (crate_attrs, everything_else, crates) = partition_source(s);\n     let everything_else = everything_else.trim();\n@@ -390,13 +391,16 @@ pub fn make_test(s: &str,\n         use errors::emitter::EmitterWriter;\n         use errors::Handler;\n \n+        syntax::ext::hygiene::set_default_edition(edition);\n+\n         let filename = FileName::anon_source_code(s);\n         let source = crates + &everything_else;\n \n         // Any errors in parsing should also appear when the doctest is compiled for real, so just\n         // send all the errors that libsyntax emits directly into a `Sink` instead of stderr.\n         let cm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n         let emitter = EmitterWriter::new(box io::sink(), None, false, false, false);\n+        // FIXME(misdreavus): pass `-Z treat-err-as-bug` to the doctest parser\n         let handler = Handler::with_emitter(false, None, box emitter);\n         let sess = ParseSess::with_span_handler(handler, cm);\n "}, {"sha": "38bd3fc006dcca0ec84f395b5f1b382f3b574faf", "filename": "src/tools/error_index_generator/main.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20a5aa302e786acba8f845e326e226f16ca56afb/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20a5aa302e786acba8f845e326e226f16ca56afb/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ferror_index_generator%2Fmain.rs?ref=20a5aa302e786acba8f845e326e226f16ca56afb", "patch": "@@ -15,6 +15,7 @@ use std::path::Path;\n use std::path::PathBuf;\n use std::cell::RefCell;\n \n+use syntax::edition::DEFAULT_EDITION;\n use syntax::diagnostics::metadata::{get_metadata_dir, ErrorMetadataMap, ErrorMetadata};\n \n use rustdoc::html::markdown::{Markdown, IdMap, ErrorCodes, PLAYGROUND};\n@@ -97,7 +98,8 @@ impl Formatter for HTMLFormatter {\n             Some(ref desc) => {\n                 let mut id_map = self.0.borrow_mut();\n                 write!(output, \"{}\",\n-                    Markdown(desc, &[], RefCell::new(&mut id_map), ErrorCodes::Yes))?\n+                    Markdown(desc, &[], RefCell::new(&mut id_map),\n+                             ErrorCodes::Yes, DEFAULT_EDITION))?\n             },\n             None => write!(output, \"<p>No description.</p>\\n\")?,\n         }"}]}