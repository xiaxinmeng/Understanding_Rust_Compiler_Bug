{"sha": "fbd9f335f9fa53f50da89d63571117b5bfe8e65d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiZDlmMzM1ZjlmYTUzZjUwZGE4OWQ2MzU3MTExN2I1YmZlOGU2NWQ=", "commit": {"author": {"name": "rChaser53", "email": "tayoshizawa29@gmail.com", "date": "2019-05-29T22:31:48Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2019-05-29T22:31:48Z"}, "message": "fix Erasing inner attributes in struct (#3593)", "tree": {"sha": "f48a91d2ef9f5686654af1e395e24772fb15a695", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f48a91d2ef9f5686654af1e395e24772fb15a695"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fbd9f335f9fa53f50da89d63571117b5bfe8e65d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fbd9f335f9fa53f50da89d63571117b5bfe8e65d", "html_url": "https://github.com/rust-lang/rust/commit/fbd9f335f9fa53f50da89d63571117b5bfe8e65d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fbd9f335f9fa53f50da89d63571117b5bfe8e65d/comments", "author": {"login": "rchaser53", "id": 9676954, "node_id": "MDQ6VXNlcjk2NzY5NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/9676954?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rchaser53", "html_url": "https://github.com/rchaser53", "followers_url": "https://api.github.com/users/rchaser53/followers", "following_url": "https://api.github.com/users/rchaser53/following{/other_user}", "gists_url": "https://api.github.com/users/rchaser53/gists{/gist_id}", "starred_url": "https://api.github.com/users/rchaser53/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rchaser53/subscriptions", "organizations_url": "https://api.github.com/users/rchaser53/orgs", "repos_url": "https://api.github.com/users/rchaser53/repos", "events_url": "https://api.github.com/users/rchaser53/events{/privacy}", "received_events_url": "https://api.github.com/users/rchaser53/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c210eb3c673cea0479ec1307a91b4b36245dfa1", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c210eb3c673cea0479ec1307a91b4b36245dfa1", "html_url": "https://github.com/rust-lang/rust/commit/1c210eb3c673cea0479ec1307a91b4b36245dfa1"}], "stats": {"total": 55, "additions": 43, "deletions": 12}, "files": [{"sha": "23628d929e83a4b063037a3796818ae901ffd15d", "filename": "src/expr.rs", "status": "modified", "additions": 28, "deletions": 11, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/fbd9f335f9fa53f50da89d63571117b5bfe8e65d/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbd9f335f9fa53f50da89d63571117b5bfe8e65d/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=fbd9f335f9fa53f50da89d63571117b5bfe8e65d", "patch": "@@ -102,6 +102,7 @@ pub(crate) fn format_expr(\n             path,\n             fields,\n             base.as_ref().map(|e| &**e),\n+            &expr.attrs,\n             expr.span,\n             shape,\n         ),\n@@ -1570,6 +1571,7 @@ fn rewrite_struct_lit<'a>(\n     path: &ast::Path,\n     fields: &'a [ast::Field],\n     base: Option<&'a ast::Expr>,\n+    attrs: &[ast::Attribute],\n     span: Span,\n     shape: Shape,\n ) -> Option<String> {\n@@ -1664,7 +1666,8 @@ fn rewrite_struct_lit<'a>(\n         write_list(&item_vec, &fmt)?\n     };\n \n-    let fields_str = wrap_struct_field(context, &fields_str, shape, v_shape, one_line_width);\n+    let fields_str =\n+        wrap_struct_field(context, &attrs, &fields_str, shape, v_shape, one_line_width)?;\n     Some(format!(\"{} {{{}}}\", path_str, fields_str))\n \n     // FIXME if context.config.indent_style() == Visual, but we run out\n@@ -1673,25 +1676,39 @@ fn rewrite_struct_lit<'a>(\n \n pub(crate) fn wrap_struct_field(\n     context: &RewriteContext<'_>,\n+    attrs: &[ast::Attribute],\n     fields_str: &str,\n     shape: Shape,\n     nested_shape: Shape,\n     one_line_width: usize,\n-) -> String {\n-    if context.config.indent_style() == IndentStyle::Block\n+) -> Option<String> {\n+    let should_vertical = context.config.indent_style() == IndentStyle::Block\n         && (fields_str.contains('\\n')\n             || !context.config.struct_lit_single_line()\n-            || fields_str.len() > one_line_width)\n-    {\n-        format!(\n-            \"{}{}{}\",\n+            || fields_str.len() > one_line_width);\n+\n+    let inner_attrs = &inner_attributes(attrs);\n+    if inner_attrs.is_empty() {\n+        if should_vertical {\n+            Some(format!(\n+                \"{}{}{}\",\n+                nested_shape.indent.to_string_with_newline(context.config),\n+                fields_str,\n+                shape.indent.to_string_with_newline(context.config)\n+            ))\n+        } else {\n+            // One liner or visual indent.\n+            Some(format!(\" {} \", fields_str))\n+        }\n+    } else {\n+        Some(format!(\n+            \"{}{}{}{}{}\",\n+            nested_shape.indent.to_string_with_newline(context.config),\n+            inner_attrs.rewrite(context, shape)?,\n             nested_shape.indent.to_string_with_newline(context.config),\n             fields_str,\n             shape.indent.to_string_with_newline(context.config)\n-        )\n-    } else {\n-        // One liner or visual indent.\n-        format!(\" {} \", fields_str)\n+        ))\n     }\n }\n "}, {"sha": "c26451f6d69514412946cdc9f8002867d80e0485", "filename": "src/patterns.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fbd9f335f9fa53f50da89d63571117b5bfe8e65d/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbd9f335f9fa53f50da89d63571117b5bfe8e65d/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=fbd9f335f9fa53f50da89d63571117b5bfe8e65d", "patch": "@@ -226,7 +226,8 @@ fn rewrite_struct_pat(\n         }\n     }\n \n-    let fields_str = wrap_struct_field(context, &fields_str, shape, v_shape, one_line_width);\n+    // ast::Pat doesn't have attrs so use &[]\n+    let fields_str = wrap_struct_field(context, &[], &fields_str, shape, v_shape, one_line_width)?;\n     Some(format!(\"{} {{{}}}\", path_str, fields_str))\n }\n "}, {"sha": "3142268e081ea0ea995e0f5a3501a2ce1623b640", "filename": "tests/target/issue-3592.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fbd9f335f9fa53f50da89d63571117b5bfe8e65d/tests%2Ftarget%2Fissue-3592.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbd9f335f9fa53f50da89d63571117b5bfe8e65d/tests%2Ftarget%2Fissue-3592.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-3592.rs?ref=fbd9f335f9fa53f50da89d63571117b5bfe8e65d", "patch": "@@ -0,0 +1,13 @@\n+fn r() -> (Biz, ()) {\n+    (\n+        Biz {\n+            #![cfg(unix)]\n+            field: 9\n+        },\n+        Biz {\n+            #![cfg(not(unix))]\n+            field: 200\n+        },\n+        (),\n+    )\n+}"}]}