{"sha": "f934b836ce3768915388880696256dffad2f00ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5MzRiODM2Y2UzNzY4OTE1Mzg4ODgwNjk2MjU2ZGZmYWQyZjAwY2E=", "commit": {"author": {"name": "Lukas Kalbertodt", "email": "lukas.kalbertodt@gmail.com", "date": "2019-12-22T13:26:28Z"}, "committer": {"name": "Lukas Kalbertodt", "email": "lukas.kalbertodt@gmail.com", "date": "2019-12-24T17:30:04Z"}, "message": "Generalize `array_into_iter` lint to also lint for boxed arrays\n\n`Box` is special in that a method call on a box can move the value out\nof the box. Thus, the same backwards-compatibility problem can arise\nfor boxed arrays as for simple arrays.", "tree": {"sha": "5fa5f36758304b1bac4e72dcfe3f19a304124754", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5fa5f36758304b1bac4e72dcfe3f19a304124754"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f934b836ce3768915388880696256dffad2f00ca", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEENwctvZ5TgcKYXim8PLr0FT+BhicFAl4CSx4ACgkQPLr0FT+B\nhifMMBAAo7HgKb7EcFFir3NBnkBSqZ+ZLLze249kGNCI17FqnbvSDliHUqqkjlpW\nPaH4FFKnBwTAOKVcGP7qnCM1PStt7+BMpSGsdhajrkU3EzzuDvXAYomCbsVllX/h\nyhpjBtxVV7lAh9q97d+2G8vCCSCQ9dCWaLz1dyMuod5lRWpT+guWPSl1LGL/foJ3\n+B41/JjP7xx/1E2uSNXK/IJDdF7bgz7aqm7RsGkVsmGo7h1053z4vWb0D/Jf0Cpg\nQ8MkP372i1TJukwnzyYgcqwJjs26UFPMAjCd/vsKwFfL292Rv9Rww0JwhC+Hsa3q\nzzOMDIB5lHeOoAEA+BcEdmST1sO3zi/PeWeeBg3IJbx4/5O0eL8x3S2F/kWjcQTK\nxehethQokqUemw8uV298pgVEWx5BgTqZekKl6H1pocIqosgW2OAFQpeFWvtvOjdN\n7pR+7dcR/tguZeXVNXNYXw/BYZ27OfaEKus2n+XltMaaQAO7CII7EzMsdiM8zcAP\nxqQ4To6J5kNkKzRjQbhRooD+7JE+eYP6KxdMUQP+7V8JlaiUTORXqS/Ba29Da8GY\nJyG8RYNyboCJAQIUFgIiIqYQ/zZoUnceELbqD0Dnk5YFg1jCu5eZfw/01wdvvrga\njS4rEBoMqdK3heoEVb2E7x5OEksi+OzdrGUNIS+nENy+REHjOJQ=\n=2qmq\n-----END PGP SIGNATURE-----", "payload": "tree 5fa5f36758304b1bac4e72dcfe3f19a304124754\nparent 005cf38f7e66757b32b03ea35fedca372eb063e3\nauthor Lukas Kalbertodt <lukas.kalbertodt@gmail.com> 1577021188 +0100\ncommitter Lukas Kalbertodt <lukas.kalbertodt@gmail.com> 1577208604 +0100\n\nGeneralize `array_into_iter` lint to also lint for boxed arrays\n\n`Box` is special in that a method call on a box can move the value out\nof the box. Thus, the same backwards-compatibility problem can arise\nfor boxed arrays as for simple arrays.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f934b836ce3768915388880696256dffad2f00ca", "html_url": "https://github.com/rust-lang/rust/commit/f934b836ce3768915388880696256dffad2f00ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f934b836ce3768915388880696256dffad2f00ca/comments", "author": {"login": "LukasKalbertodt", "id": 7419664, "node_id": "MDQ6VXNlcjc0MTk2NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7419664?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LukasKalbertodt", "html_url": "https://github.com/LukasKalbertodt", "followers_url": "https://api.github.com/users/LukasKalbertodt/followers", "following_url": "https://api.github.com/users/LukasKalbertodt/following{/other_user}", "gists_url": "https://api.github.com/users/LukasKalbertodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/LukasKalbertodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LukasKalbertodt/subscriptions", "organizations_url": "https://api.github.com/users/LukasKalbertodt/orgs", "repos_url": "https://api.github.com/users/LukasKalbertodt/repos", "events_url": "https://api.github.com/users/LukasKalbertodt/events{/privacy}", "received_events_url": "https://api.github.com/users/LukasKalbertodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LukasKalbertodt", "id": 7419664, "node_id": "MDQ6VXNlcjc0MTk2NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7419664?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LukasKalbertodt", "html_url": "https://github.com/LukasKalbertodt", "followers_url": "https://api.github.com/users/LukasKalbertodt/followers", "following_url": "https://api.github.com/users/LukasKalbertodt/following{/other_user}", "gists_url": "https://api.github.com/users/LukasKalbertodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/LukasKalbertodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LukasKalbertodt/subscriptions", "organizations_url": "https://api.github.com/users/LukasKalbertodt/orgs", "repos_url": "https://api.github.com/users/LukasKalbertodt/repos", "events_url": "https://api.github.com/users/LukasKalbertodt/events{/privacy}", "received_events_url": "https://api.github.com/users/LukasKalbertodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "005cf38f7e66757b32b03ea35fedca372eb063e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/005cf38f7e66757b32b03ea35fedca372eb063e3", "html_url": "https://github.com/rust-lang/rust/commit/005cf38f7e66757b32b03ea35fedca372eb063e3"}], "stats": {"total": 146, "additions": 140, "deletions": 6}, "files": [{"sha": "2d716665fe9b520aa6aae25cceaefb32598b8f2f", "filename": "src/librustc_lint/array_into_iter.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f934b836ce3768915388880696256dffad2f00ca/src%2Flibrustc_lint%2Farray_into_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f934b836ce3768915388880696256dffad2f00ca/src%2Flibrustc_lint%2Farray_into_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Farray_into_iter.rs?ref=f934b836ce3768915388880696256dffad2f00ca", "patch": "@@ -48,14 +48,26 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ArrayIntoIter {\n             // argument.\n             let receiver_arg = &args[0];\n \n-            // Test if the original `self` type is an array type.\n-            match cx.tables.expr_ty(receiver_arg).kind {\n-                ty::Array(..) => {}\n-                _ => return,\n+            // Peel all `Box<_>` layers. We have to special case `Box` here as\n+            // `Box` is the only thing that values can be moved out of via\n+            // method call. `Box::new([1]).into_iter()` should trigger this\n+            // lint.\n+            let mut recv_ty = cx.tables.expr_ty(receiver_arg);\n+            let mut num_box_derefs = 0;\n+            while recv_ty.is_box() {\n+                num_box_derefs += 1;\n+                recv_ty = recv_ty.boxed_ty();\n+            }\n+\n+            // Make sure we found an array after peeling the boxes.\n+            if !matches!(recv_ty.kind, ty::Array(..)) {\n+                return;\n             }\n \n-            // Make sure that the first adjustment is an autoref coercion.\n-            match cx.tables.expr_adjustments(receiver_arg).get(0) {\n+            // Make sure that there is an autoref coercion at the expected\n+            // position. The first `num_box_derefs` adjustments are the derefs\n+            // of the box.\n+            match cx.tables.expr_adjustments(receiver_arg).get(num_box_derefs) {\n                 Some(Adjustment { kind: Adjust::Borrow(_), .. }) => {}\n                 _ => return,\n             }"}, {"sha": "c1aa3d70f77cc0381772ce6a6851ad9a02a58b52", "filename": "src/test/ui/iterators/into-iter-on-arrays-lint.fixed", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f934b836ce3768915388880696256dffad2f00ca/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f934b836ce3768915388880696256dffad2f00ca/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.fixed?ref=f934b836ce3768915388880696256dffad2f00ca", "patch": "@@ -19,6 +19,31 @@ fn main() {\n     //~^ WARNING this method call currently resolves to `<&[T] as IntoIterator>::into_iter`\n     //~| WARNING this was previously accepted by the compiler but is being phased out\n \n+    Box::new(small).iter();\n+    //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n+    //~| WARNING this was previously accepted by the compiler but is being phased out\n+    Box::new([1, 2]).iter();\n+    //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n+    //~| WARNING this was previously accepted by the compiler but is being phased out\n+    Box::new(big).iter();\n+    //~^ WARNING this method call currently resolves to `<&[T] as IntoIterator>::into_iter`\n+    //~| WARNING this was previously accepted by the compiler but is being phased out\n+    Box::new([0u8; 33]).iter();\n+    //~^ WARNING this method call currently resolves to `<&[T] as IntoIterator>::into_iter`\n+    //~| WARNING this was previously accepted by the compiler but is being phased out\n+\n+    Box::new(Box::new(small)).iter();\n+    //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n+    //~| WARNING this was previously accepted by the compiler but is being phased out\n+    Box::new(Box::new([1, 2])).iter();\n+    //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n+    //~| WARNING this was previously accepted by the compiler but is being phased out\n+    Box::new(Box::new(big)).iter();\n+    //~^ WARNING this method call currently resolves to `<&[T] as IntoIterator>::into_iter`\n+    //~| WARNING this was previously accepted by the compiler but is being phased out\n+    Box::new(Box::new([0u8; 33])).iter();\n+    //~^ WARNING this method call currently resolves to `<&[T] as IntoIterator>::into_iter`\n+    //~| WARNING this was previously accepted by the compiler but is being phased out\n \n     // Expressions that should not\n     (&[1, 2]).into_iter();"}, {"sha": "afdf6cb7f442020b2d2037c4f34d9e7970954c93", "filename": "src/test/ui/iterators/into-iter-on-arrays-lint.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f934b836ce3768915388880696256dffad2f00ca/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f934b836ce3768915388880696256dffad2f00ca/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.rs?ref=f934b836ce3768915388880696256dffad2f00ca", "patch": "@@ -19,6 +19,31 @@ fn main() {\n     //~^ WARNING this method call currently resolves to `<&[T] as IntoIterator>::into_iter`\n     //~| WARNING this was previously accepted by the compiler but is being phased out\n \n+    Box::new(small).into_iter();\n+    //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n+    //~| WARNING this was previously accepted by the compiler but is being phased out\n+    Box::new([1, 2]).into_iter();\n+    //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n+    //~| WARNING this was previously accepted by the compiler but is being phased out\n+    Box::new(big).into_iter();\n+    //~^ WARNING this method call currently resolves to `<&[T] as IntoIterator>::into_iter`\n+    //~| WARNING this was previously accepted by the compiler but is being phased out\n+    Box::new([0u8; 33]).into_iter();\n+    //~^ WARNING this method call currently resolves to `<&[T] as IntoIterator>::into_iter`\n+    //~| WARNING this was previously accepted by the compiler but is being phased out\n+\n+    Box::new(Box::new(small)).into_iter();\n+    //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n+    //~| WARNING this was previously accepted by the compiler but is being phased out\n+    Box::new(Box::new([1, 2])).into_iter();\n+    //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n+    //~| WARNING this was previously accepted by the compiler but is being phased out\n+    Box::new(Box::new(big)).into_iter();\n+    //~^ WARNING this method call currently resolves to `<&[T] as IntoIterator>::into_iter`\n+    //~| WARNING this was previously accepted by the compiler but is being phased out\n+    Box::new(Box::new([0u8; 33])).into_iter();\n+    //~^ WARNING this method call currently resolves to `<&[T] as IntoIterator>::into_iter`\n+    //~| WARNING this was previously accepted by the compiler but is being phased out\n \n     // Expressions that should not\n     (&[1, 2]).into_iter();"}, {"sha": "e9cc427f6d8b76fbdf0d9deae5ab831d3f985a72", "filename": "src/test/ui/iterators/into-iter-on-arrays-lint.stderr", "status": "modified", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/f934b836ce3768915388880696256dffad2f00ca/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f934b836ce3768915388880696256dffad2f00ca/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.stderr?ref=f934b836ce3768915388880696256dffad2f00ca", "patch": "@@ -35,3 +35,75 @@ LL |     [0u8; 33].into_iter();\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n \n+warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n+  --> $DIR/into-iter-on-arrays-lint.rs:22:21\n+   |\n+LL |     Box::new(small).into_iter();\n+   |                     ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n+\n+warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n+  --> $DIR/into-iter-on-arrays-lint.rs:25:22\n+   |\n+LL |     Box::new([1, 2]).into_iter();\n+   |                      ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n+\n+warning: this method call currently resolves to `<&[T] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n+  --> $DIR/into-iter-on-arrays-lint.rs:28:19\n+   |\n+LL |     Box::new(big).into_iter();\n+   |                   ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n+\n+warning: this method call currently resolves to `<&[T] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n+  --> $DIR/into-iter-on-arrays-lint.rs:31:25\n+   |\n+LL |     Box::new([0u8; 33]).into_iter();\n+   |                         ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n+\n+warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n+  --> $DIR/into-iter-on-arrays-lint.rs:35:31\n+   |\n+LL |     Box::new(Box::new(small)).into_iter();\n+   |                               ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n+\n+warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n+  --> $DIR/into-iter-on-arrays-lint.rs:38:32\n+   |\n+LL |     Box::new(Box::new([1, 2])).into_iter();\n+   |                                ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n+\n+warning: this method call currently resolves to `<&[T] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n+  --> $DIR/into-iter-on-arrays-lint.rs:41:29\n+   |\n+LL |     Box::new(Box::new(big)).into_iter();\n+   |                             ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n+\n+warning: this method call currently resolves to `<&[T] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n+  --> $DIR/into-iter-on-arrays-lint.rs:44:35\n+   |\n+LL |     Box::new(Box::new([0u8; 33])).into_iter();\n+   |                                   ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n+"}]}