{"sha": "253a1cefd8a9db926ca2d983dde5234504c86b4b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1M2ExY2VmZDhhOWRiOTI2Y2EyZDk4M2RkZTUyMzQ1MDRjODZiNGI=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-12-18T03:15:53Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-12-30T01:27:59Z"}, "message": "Structured diagnostics", "tree": {"sha": "9db2e18b8c6999e05b63dbfd04dfeb338eaab6ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9db2e18b8c6999e05b63dbfd04dfeb338eaab6ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/253a1cefd8a9db926ca2d983dde5234504c86b4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/253a1cefd8a9db926ca2d983dde5234504c86b4b", "html_url": "https://github.com/rust-lang/rust/commit/253a1cefd8a9db926ca2d983dde5234504c86b4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/253a1cefd8a9db926ca2d983dde5234504c86b4b/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1035b3522e251d7639e7052936aa634752c5500", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1035b3522e251d7639e7052936aa634752c5500", "html_url": "https://github.com/rust-lang/rust/commit/c1035b3522e251d7639e7052936aa634752c5500"}], "stats": {"total": 362, "additions": 303, "deletions": 59}, "files": [{"sha": "4fec05ed594b3d58bf3a6b3fdf8aad5ef45c2101", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 50, "deletions": 29, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/253a1cefd8a9db926ca2d983dde5234504c86b4b/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/253a1cefd8a9db926ca2d983dde5234504c86b4b/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=253a1cefd8a9db926ca2d983dde5234504c86b4b", "patch": "@@ -16,7 +16,7 @@ use util::nodemap::{NodeMap, FnvHashMap};\n \n use syntax::ast::{NodeId, NodeIdAssigner, Name};\n use syntax::codemap::Span;\n-use syntax::errors;\n+use syntax::errors::{self, DiagnosticBuilder};\n use syntax::errors::emitter::{Emitter, BasicEmitter};\n use syntax::diagnostics;\n use syntax::feature_gate;\n@@ -80,6 +80,55 @@ pub struct Session {\n }\n \n impl Session {\n+    pub fn struct_span_warn<'a, 'b>(&'a self,\n+                                    sp: Span,\n+                                    msg: &'b str)\n+                                    -> Box<DiagnosticBuilder<'a, 'b>> {\n+        self.diagnostic().struct_span_warn(sp, msg)\n+    }\n+    pub fn struct_span_warn_with_code<'a, 'b>(&'a self,\n+                                              sp: Span,\n+                                              msg: &'b str,\n+                                              code: &str)\n+                                              -> Box<DiagnosticBuilder<'a, 'b>> {\n+        self.diagnostic().struct_span_warn_with_code(sp, msg, code)\n+    }\n+    pub fn struct_warn<'a, 'b>(&'a self, msg: &'b str) -> Box<DiagnosticBuilder<'a, 'b>> {\n+        self.diagnostic().struct_warn(msg)\n+    }\n+    pub fn struct_span_err<'a, 'b>(&'a self,\n+                                   sp: Span,\n+                                   msg: &'b str)\n+                                   -> Box<DiagnosticBuilder<'a, 'b>> {\n+        self.diagnostic().struct_span_err(sp, msg)\n+    }\n+    pub fn struct_span_err_with_code<'a, 'b>(&'a self,\n+                                             sp: Span,\n+                                             msg: &'b str,\n+                                             code: &str)\n+                                             -> Box<DiagnosticBuilder<'a, 'b>> {\n+        self.diagnostic().struct_span_err_with_code(sp, msg, code)\n+    }\n+    pub fn struct_err<'a, 'b>(&'a self, msg: &'b str) -> Box<DiagnosticBuilder<'a, 'b>> {\n+        self.diagnostic().struct_err(msg)\n+    }\n+    pub fn struct_span_fatal<'a, 'b>(&'a self,\n+                                     sp: Span,\n+                                     msg: &'b str)\n+                                     -> Box<DiagnosticBuilder<'a, 'b>> {\n+        self.diagnostic().struct_span_fatal(sp, msg)\n+    }\n+    pub fn struct_span_fatal_with_code<'a, 'b>(&'a self,\n+                                               sp: Span,\n+                                               msg: &'b str,\n+                                               code: &str)\n+                                               -> Box<DiagnosticBuilder<'a, 'b>> {\n+        self.diagnostic().struct_span_fatal_with_code(sp, msg, code)\n+    }\n+    pub fn struct_fatal<'a, 'b>(&'a self, msg: &'b str) -> Box<DiagnosticBuilder<'a, 'b>> {\n+        self.diagnostic().struct_fatal(msg)\n+    }\n+\n     pub fn span_fatal(&self, sp: Span, msg: &str) -> ! {\n         panic!(self.diagnostic().span_fatal(sp, msg))\n     }\n@@ -144,34 +193,6 @@ impl Session {\n             None => self.warn(msg),\n         }\n     }\n-    pub fn span_note(&self, sp: Span, msg: &str) {\n-        self.diagnostic().span_note(sp, msg)\n-    }\n-    pub fn span_end_note(&self, sp: Span, msg: &str) {\n-        self.diagnostic().span_end_note(sp, msg)\n-    }\n-\n-    /// Prints out a message with a suggested edit of the code.\n-    ///\n-    /// See `errors::RenderSpan::Suggestion` for more information.\n-    pub fn span_suggestion(&self, sp: Span, msg: &str, suggestion: String) {\n-        self.diagnostic().span_suggestion(sp, msg, suggestion)\n-    }\n-    pub fn span_help(&self, sp: Span, msg: &str) {\n-        self.diagnostic().span_help(sp, msg)\n-    }\n-    pub fn fileline_note(&self, sp: Span, msg: &str) {\n-        self.diagnostic().fileline_note(sp, msg)\n-    }\n-    pub fn fileline_help(&self, sp: Span, msg: &str) {\n-        self.diagnostic().fileline_help(sp, msg)\n-    }\n-    pub fn note(&self, msg: &str) {\n-        self.diagnostic().note(msg)\n-    }\n-    pub fn help(&self, msg: &str) {\n-        self.diagnostic().help(msg)\n-    }\n     pub fn opt_span_bug(&self, opt_sp: Option<Span>, msg: &str) -> ! {\n         match opt_sp {\n             Some(sp) => self.span_bug(sp, msg),"}, {"sha": "990e4bb421d5749cf709c21fd130cd1e427c2d44", "filename": "src/libsyntax/errors/emitter.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/253a1cefd8a9db926ca2d983dde5234504c86b4b/src%2Flibsyntax%2Ferrors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/253a1cefd8a9db926ca2d983dde5234504c86b4b/src%2Flibsyntax%2Ferrors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ferrors%2Femitter.rs?ref=253a1cefd8a9db926ca2d983dde5234504c86b4b", "patch": "@@ -13,7 +13,7 @@ use self::Destination::*;\n use codemap::{self, COMMAND_LINE_SP, COMMAND_LINE_EXPN, Pos, Span};\n use diagnostics;\n \n-use errors::{Level, RenderSpan};\n+use errors::{Level, RenderSpan, DiagnosticBuilder};\n use errors::RenderSpan::*;\n use errors::Level::*;\n \n@@ -27,6 +27,17 @@ use term;\n pub trait Emitter {\n     fn emit(&mut self, span: Option<Span>, msg: &str, code: Option<&str>, lvl: Level);\n     fn custom_emit(&mut self, sp: RenderSpan, msg: &str, lvl: Level);\n+\n+    // Emit a structured diagnostic.\n+    fn emit_struct(&mut self, db: &DiagnosticBuilder) {\n+        self.emit(db.span, db.message, db.code.as_ref().map(|s| &**s), db.level);\n+        for child in &db.children {\n+            match child.render_span {\n+                Some(ref sp) => self.custom_emit(sp.clone(), &child.message, child.level),\n+                None => self.emit(child.span, &child.message, None, child.level),\n+            }\n+        }\n+    }\n }\n \n /// maximum number of lines we will print for each error; arbitrary.\n@@ -111,9 +122,8 @@ impl Emitter for EmitterWriter {\n                    sp: RenderSpan,\n                    msg: &str,\n                    lvl: Level) {\n-        match self.emit_(sp, msg, None, lvl) {\n-            Ok(()) => {}\n-            Err(e) => panic!(\"failed to print diagnostics: {:?}\", e),\n+        if let Err(e) = self.emit_(sp, msg, None, lvl) {\n+            panic!(\"failed to print diagnostics: {:?}\", e);\n         }\n     }\n }"}, {"sha": "3b75bf9a8bd40458835f6dc7f0988e09f452db83", "filename": "src/libsyntax/errors/mod.rs", "status": "modified", "additions": 239, "deletions": 26, "changes": 265, "blob_url": "https://github.com/rust-lang/rust/blob/253a1cefd8a9db926ca2d983dde5234504c86b4b/src%2Flibsyntax%2Ferrors%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/253a1cefd8a9db926ca2d983dde5234504c86b4b/src%2Flibsyntax%2Ferrors%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ferrors%2Fmod.rs?ref=253a1cefd8a9db926ca2d983dde5234504c86b4b", "patch": "@@ -98,6 +98,164 @@ impl error::Error for ExplicitBug {\n     }\n }\n \n+// Used for emitting structured error messages and other diagnostic information.\n+#[must_use]\n+pub struct DiagnosticBuilder<'a> {\n+    emitter: &'a RefCell<Box<Emitter>>,\n+    level: Level,\n+    message: String,\n+    code: Option<String>,\n+    span: Option<Span>,\n+    children: Vec<SubDiagnostic>,\n+    cancelled: bool,\n+}\n+\n+// For example a note attached to an error.\n+struct SubDiagnostic {\n+    level: Level,\n+    message: String,\n+    span: Option<Span>,\n+    render_span: Option<RenderSpan>,\n+}\n+\n+impl<'a> DiagnosticBuilder<'a> {\n+    // Emit the diagnostic.\n+    pub fn emit(&mut self) {\n+        if self.cancelled {\n+            return;\n+        }\n+\n+        self.cancel();\n+        self.emitter.borrow_mut().emit_struct(&self);\n+\n+        // if self.is_fatal() {\n+        //     panic!(FatalError);\n+        // }\n+    }\n+\n+    // Cancel the diagnostic (a structured diagnostic must either be emitted or\n+    // cancelled or it will panic when dropped).\n+    pub fn cancel(&mut self) {\n+        self.cancelled = true;\n+    }\n+\n+    pub fn is_fatal(&self) -> bool {\n+        self.level == Level::Fatal\n+    }\n+\n+    pub fn note(&mut self , msg: &str) -> &mut DiagnosticBuilder<'a>  {\n+        self.sub(Level::Note, msg, None, None);\n+        self\n+    }\n+    pub fn span_note(&mut self ,\n+                     sp: Span,\n+                     msg: &str)\n+                     -> &mut DiagnosticBuilder<'a> {\n+        self.sub(Level::Note, msg, Some(sp), None);\n+        self\n+    }\n+    pub fn note_rfc_1214(&mut self , span: Span) -> &mut DiagnosticBuilder<'a>  {\n+        self.span_note(span,\n+                       \"this warning results from recent bug fixes and clarifications; \\\n+                        it will become a HARD ERROR in the next release. \\\n+                        See RFC 1214 for details.\")\n+    }\n+    pub fn help(&mut self , msg: &str) -> &mut DiagnosticBuilder<'a>  {\n+        self.sub(Level::Help, msg, None, None);\n+        self\n+    }\n+    pub fn span_help(&mut self ,\n+                     sp: Span,\n+                     msg: &str)\n+                     -> &mut DiagnosticBuilder<'a>  {\n+        self.sub(Level::Help, msg, Some(sp), None);\n+        self\n+    }\n+    /// Prints out a message with a suggested edit of the code.\n+    ///\n+    /// See `diagnostic::RenderSpan::Suggestion` for more information.\n+    pub fn span_suggestion(&mut self ,\n+                           sp: Span,\n+                           msg: &str,\n+                           suggestion: String)\n+                           -> &mut DiagnosticBuilder<'a>  {\n+        self.sub(Level::Help, msg, Some(sp), Some(Suggestion(sp, suggestion)));\n+        self\n+    }\n+    pub fn span_end_note(&mut self ,\n+                         sp: Span,\n+                         msg: &str)\n+                         -> &mut DiagnosticBuilder<'a>  {\n+        self.sub(Level::Note, msg, Some(sp), Some(EndSpan(sp)));\n+        self\n+    }\n+    pub fn fileline_note(&mut self ,\n+                         sp: Span,\n+                         msg: &str)\n+                         -> &mut DiagnosticBuilder<'a>  {\n+        self.sub(Level::Note, msg, Some(sp), Some(FileLine(sp)));\n+        self\n+    }\n+    pub fn fileline_help(&mut self ,\n+                         sp: Span,\n+                         msg: &str)\n+                         -> &mut DiagnosticBuilder<'a>  {\n+        self.sub(Level::Help, msg, Some(sp), Some(FileLine(sp)));\n+        self\n+    }\n+\n+    // Convenience function for internal use, clients should use one of the\n+    // struct_* methods on Handler.\n+    fn new(emitter: &'a RefCell<Box<Emitter>>,\n+           level: Level,\n+           message: &str,\n+           code: Option<String>,\n+           span: Option<Span>) -> DiagnosticBuilder<'a>  {\n+        DiagnosticBuilder {\n+            emitter: emitter,\n+            level: level,\n+            message: message.to_owned(),\n+            code: code,\n+            span: span,\n+            children: vec![],\n+            cancelled: false,\n+        }\n+    }\n+\n+    // Convenience function for internal use, clients should use one of the\n+    // public methods above.\n+    fn sub(&mut self,\n+           level: Level,\n+           message: &str,\n+           span: Option<Span>,\n+           render_span: Option<RenderSpan>) {\n+        let sub = SubDiagnostic {\n+            level: level,\n+            message: message.to_owned(),\n+            span: span,\n+            render_span: render_span,\n+        };\n+        self.children.push(sub);\n+    }\n+}\n+\n+impl<'a> fmt::Debug for DiagnosticBuilder<'a> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        self.message.fmt(f)\n+    }\n+}\n+\n+// Destructor bomb - a DiagnosticBuilder must be either emitted or cancelled or\n+// we emit a bug.\n+impl<'a> Drop for DiagnosticBuilder<'a> {\n+    fn drop(&mut self) {\n+        if !self.cancelled {\n+            self.emitter.borrow_mut().emit(None, \"Error constructed but not emitted\", None, Bug);\n+            panic!();\n+        }\n+    }\n+}\n+\n /// A handler deals with errors; certain errors\n /// (fatal, bug, unimpl) may cause immediate exit,\n /// others log errors for later reporting.\n@@ -132,18 +290,93 @@ impl Handler {\n         }\n     }\n \n+    pub fn struct_span_warn<'a>(&'a self,\n+                                sp: Span,\n+                                msg: &str)\n+                                -> DiagnosticBuilder<'a>  {\n+        let mut result = DiagnosticBuilder::new(&self.emit, Level::Warning, msg, None, Some(sp));\n+        if !self.can_emit_warnings {\n+            result.cancel();\n+        }\n+        result\n+    }\n+    pub fn struct_span_warn_with_code<'a>(&'a self,\n+                                          sp: Span,\n+                                          msg: &str,\n+                                          code: &str)\n+                                          -> DiagnosticBuilder<'a>  {\n+        let mut result = DiagnosticBuilder::new(&self.emit,\n+                                                Level::Warning,\n+                                                msg,\n+                                                Some(code.to_owned()),\n+                                                Some(sp));\n+        if !self.can_emit_warnings {\n+            result.cancel();\n+        }\n+        result\n+    }\n+    pub fn struct_warn<'a>(&'a self, msg: &str) -> DiagnosticBuilder<'a>  {\n+        let mut result = DiagnosticBuilder::new(&self.emit, Level::Warning, msg, None, None);\n+        if !self.can_emit_warnings {\n+            result.cancel();\n+        }\n+        result\n+    }\n+    pub fn struct_span_err<'a>(&'a self,\n+                               sp: Span,\n+                               msg: &str)\n+                               -> DiagnosticBuilder<'a>  {\n+        self.bump_err_count();\n+        DiagnosticBuilder::new(&self.emit, Level::Error, msg, None, Some(sp))\n+    }\n+    pub fn struct_span_err_with_code<'a>(&'a self,\n+                                         sp: Span,\n+                                         msg: &str,\n+                                         code: &str)\n+                                         -> DiagnosticBuilder<'a>  {\n+        // FIXME (and below) this is potentially inaccurate, since the DiagnosticBuilder\n+        // might be cancelled.\n+        self.bump_err_count();\n+        DiagnosticBuilder::new(&self.emit, Level::Error, msg, Some(code.to_owned()), Some(sp))\n+    }\n+    pub fn struct_err<'a>(&'a self, msg: &str) -> DiagnosticBuilder<'a>  {\n+        self.bump_err_count();\n+        DiagnosticBuilder::new(&self.emit, Level::Error, msg, None, None)\n+    }\n+    pub fn struct_span_fatal<'a>(&'a self,\n+                                 sp: Span,\n+                                 msg: &str)\n+                                 -> DiagnosticBuilder<'a>  {\n+        self.bump_err_count();\n+        DiagnosticBuilder::new(&self.emit, Level::Fatal, msg, None, Some(sp))\n+    }\n+    pub fn struct_span_fatal_with_code<'a>(&'a self,\n+                                           sp: Span,\n+                                           msg: &str,\n+                                           code: &str)\n+                                           -> DiagnosticBuilder<'a>  {\n+        self.bump_err_count();\n+        DiagnosticBuilder::new(&self.emit, Level::Fatal, msg, Some(code.to_owned()), Some(sp))\n+    }\n+    pub fn struct_fatal<'a>(&'a self, msg: &str) -> DiagnosticBuilder<'a>  {\n+        self.bump_err_count();\n+        DiagnosticBuilder::new(&self.emit, Level::Fatal, msg, None, None)\n+    }\n+\n     pub fn span_fatal(&self, sp: Span, msg: &str) -> FatalError {\n         if self.treat_err_as_bug {\n             self.span_bug(sp, msg);\n         }\n         self.emit(Some(sp), msg, Fatal);\n+        self.bump_err_count();\n         return FatalError;\n     }\n     pub fn span_fatal_with_code(&self, sp: Span, msg: &str, code: &str) -> FatalError {\n         if self.treat_err_as_bug {\n             self.span_bug(sp, msg);\n         }\n         self.emit_with_code(Some(sp), msg, code, Fatal);\n+        self.bump_err_count();\n         return FatalError;\n     }\n     pub fn span_err(&self, sp: Span, msg: &str) {\n@@ -166,27 +399,6 @@ impl Handler {\n     pub fn span_warn_with_code(&self, sp: Span, msg: &str, code: &str) {\n         self.emit_with_code(Some(sp), msg, code, Warning);\n     }\n-    pub fn span_note(&self, sp: Span, msg: &str) {\n-        self.emit(Some(sp), msg, Note);\n-    }\n-    pub fn span_end_note(&self, sp: Span, msg: &str) {\n-        self.custom_emit(EndSpan(sp), msg, Note);\n-    }\n-    pub fn span_help(&self, sp: Span, msg: &str) {\n-        self.emit(Some(sp), msg, Help);\n-    }\n-    /// Prints out a message with a suggested edit of the code.\n-    ///\n-    /// See `diagnostic::RenderSpan::Suggestion` for more information.\n-    pub fn span_suggestion(&self, sp: Span, msg: &str, suggestion: String) {\n-        self.custom_emit(Suggestion(sp, suggestion), msg, Help);\n-    }\n-    pub fn fileline_note(&self, sp: Span, msg: &str) {\n-        self.custom_emit(FileLine(sp), msg, Note);\n-    }\n-    pub fn fileline_help(&self, sp: Span, msg: &str) {\n-        self.custom_emit(FileLine(sp), msg, Help);\n-    }\n     pub fn span_bug(&self, sp: Span, msg: &str) -> ! {\n         self.emit(Some(sp), msg, Bug);\n         panic!(ExplicitBug);\n@@ -199,6 +411,9 @@ impl Handler {\n         self.emit(Some(sp), msg, Bug);\n         self.bump_err_count();\n     }\n+    pub fn span_note_without_error(&self, sp: Span, msg: &str) {\n+        self.emit.borrow_mut().emit(Some(sp), msg, None, Note);\n+    }\n     pub fn span_unimpl(&self, sp: Span, msg: &str) -> ! {\n         self.span_bug(sp, &format!(\"unimplemented {}\", msg));\n     }\n@@ -207,6 +422,7 @@ impl Handler {\n             self.bug(msg);\n         }\n         self.emit.borrow_mut().emit(None, msg, None, Fatal);\n+        self.bump_err_count();\n         FatalError\n     }\n     pub fn err(&self, msg: &str) {\n@@ -219,12 +435,9 @@ impl Handler {\n     pub fn warn(&self, msg: &str) {\n         self.emit.borrow_mut().emit(None, msg, None, Warning);\n     }\n-    pub fn note(&self, msg: &str) {\n+    pub fn note_without_error(&self, msg: &str) {\n         self.emit.borrow_mut().emit(None, msg, None, Note);\n     }\n-    pub fn help(&self, msg: &str) {\n-        self.emit.borrow_mut().emit(None, msg, None, Help);\n-    }\n     pub fn bug(&self, msg: &str) -> ! {\n         self.emit.borrow_mut().emit(None, msg, None, Bug);\n         panic!(ExplicitBug);\n@@ -266,7 +479,7 @@ impl Handler {\n             }\n         }\n \n-        panic!(self.fatal(&s[..]));\n+        panic!(self.fatal(&s));\n     }\n \n     pub fn emit(&self,"}]}