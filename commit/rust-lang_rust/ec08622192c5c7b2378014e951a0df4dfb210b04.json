{"sha": "ec08622192c5c7b2378014e951a0df4dfb210b04", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjMDg2MjIxOTJjNWM3YjIzNzgwMTRlOTUxYTBkZjRkZmIyMTBiMDQ=", "commit": {"author": {"name": "Kyle Simpson", "email": "kyleandrew.simpson@gmail.com", "date": "2018-06-07T15:13:25Z"}, "committer": {"name": "Kyle Simpson", "email": "kyleandrew.simpson@gmail.com", "date": "2018-06-08T00:10:34Z"}, "message": "compiletest: autoremove duplicate .nll.* files (#51204)\n\nUI tests in bless mode should now check to see if `.nll.*` files have a\nmatching `.*` file. If a match is found, it will be deleted.\nThis should be extensible to other modes (i.e., Polonius).\nOn running with `--bless`, the two files removed in #51186 are, in turn,\nremoved automatically.", "tree": {"sha": "6b079cd6acc92936e2e67a4b90d2c6b21b61194c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b079cd6acc92936e2e67a4b90d2c6b21b61194c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec08622192c5c7b2378014e951a0df4dfb210b04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec08622192c5c7b2378014e951a0df4dfb210b04", "html_url": "https://github.com/rust-lang/rust/commit/ec08622192c5c7b2378014e951a0df4dfb210b04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec08622192c5c7b2378014e951a0df4dfb210b04/comments", "author": {"login": "FelixMcFelix", "id": 6815381, "node_id": "MDQ6VXNlcjY4MTUzODE=", "avatar_url": "https://avatars.githubusercontent.com/u/6815381?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FelixMcFelix", "html_url": "https://github.com/FelixMcFelix", "followers_url": "https://api.github.com/users/FelixMcFelix/followers", "following_url": "https://api.github.com/users/FelixMcFelix/following{/other_user}", "gists_url": "https://api.github.com/users/FelixMcFelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/FelixMcFelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FelixMcFelix/subscriptions", "organizations_url": "https://api.github.com/users/FelixMcFelix/orgs", "repos_url": "https://api.github.com/users/FelixMcFelix/repos", "events_url": "https://api.github.com/users/FelixMcFelix/events{/privacy}", "received_events_url": "https://api.github.com/users/FelixMcFelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "FelixMcFelix", "id": 6815381, "node_id": "MDQ6VXNlcjY4MTUzODE=", "avatar_url": "https://avatars.githubusercontent.com/u/6815381?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FelixMcFelix", "html_url": "https://github.com/FelixMcFelix", "followers_url": "https://api.github.com/users/FelixMcFelix/followers", "following_url": "https://api.github.com/users/FelixMcFelix/following{/other_user}", "gists_url": "https://api.github.com/users/FelixMcFelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/FelixMcFelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FelixMcFelix/subscriptions", "organizations_url": "https://api.github.com/users/FelixMcFelix/orgs", "repos_url": "https://api.github.com/users/FelixMcFelix/repos", "events_url": "https://api.github.com/users/FelixMcFelix/events{/privacy}", "received_events_url": "https://api.github.com/users/FelixMcFelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9157f5b869fdb14308eaf6778d01ee3d0e1268a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9157f5b869fdb14308eaf6778d01ee3d0e1268a", "html_url": "https://github.com/rust-lang/rust/commit/f9157f5b869fdb14308eaf6778d01ee3d0e1268a"}], "stats": {"total": 59, "additions": 51, "deletions": 8}, "files": [{"sha": "caf73f4f68b036d912a9933b5e651cb6c4d36764", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 51, "deletions": 8, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/ec08622192c5c7b2378014e951a0df4dfb210b04/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec08622192c5c7b2378014e951a0df4dfb210b04/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=ec08622192c5c7b2378014e951a0df4dfb210b04", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use common::CompareMode;\n-use common::{expected_output_path, UI_FIXED, UI_STDERR, UI_STDOUT};\n+use common::{expected_output_path, UI_EXTENSIONS, UI_FIXED, UI_STDERR, UI_STDOUT};\n use common::{output_base_dir, output_base_name, output_testname_unique};\n use common::{Codegen, CodegenUnits, DebugInfoGdb, DebugInfoLldb, Rustdoc};\n use common::{CompileFail, ParseFail, Pretty, RunFail, RunPass, RunPassValgrind};\n@@ -2609,6 +2609,9 @@ impl<'test> TestCx<'test> {\n         errors += self.compare_output(\"stdout\", &normalized_stdout, &expected_stdout);\n         errors += self.compare_output(\"stderr\", &normalized_stderr, &expected_stderr);\n \n+        let modes_to_prune = vec![CompareMode::Nll];\n+        self.prune_duplicate_outputs(&modes_to_prune);\n+\n         if self.config.compare_mode.is_some() {\n             // don't test rustfix with nll right now\n         } else if self.props.run_rustfix {\n@@ -2971,6 +2974,16 @@ impl<'test> TestCx<'test> {\n         }\n     }\n \n+    fn delete_file(&self, file: &PathBuf) {\n+        if let Err(e) = ::std::fs::remove_file(file) {\n+            self.fatal(&format!(\n+                \"failed to delete `{}`: {}\",\n+                file.display(),\n+                e,\n+            ));\n+        }\n+    }\n+\n     fn compare_output(&self, kind: &str, actual: &str, expected: &str) -> usize {\n         if actual == expected {\n             return 0;\n@@ -3023,13 +3036,7 @@ impl<'test> TestCx<'test> {\n \n         for output_file in &files {\n             if actual.is_empty() {\n-                if let Err(e) = ::std::fs::remove_file(output_file) {\n-                    self.fatal(&format!(\n-                        \"failed to delete `{}`: {}\",\n-                        output_file.display(),\n-                        e,\n-                    ));\n-                }\n+                self.delete_file(output_file);\n             } else {\n                 match File::create(&output_file).and_then(|mut f| f.write_all(actual.as_bytes())) {\n                     Ok(()) => {}\n@@ -3054,6 +3061,42 @@ impl<'test> TestCx<'test> {\n         }\n     }\n \n+    fn prune_duplicate_output(&self, mode: CompareMode, kind: &str, canon_content: &str) {\n+        let examined_path = expected_output_path(\n+            &self.testpaths,\n+            self.revision,\n+            &Some(mode),\n+            kind,\n+        );\n+\n+        let examined_content = self\n+            .load_expected_output_from_path(&examined_path)\n+            .unwrap_or_else(|_| String::new());\n+\n+        if examined_path.exists() && canon_content == &examined_content {\n+            self.delete_file(&examined_path);\n+        }\n+    }\n+\n+    fn prune_duplicate_outputs(&self, modes: &[CompareMode]) {\n+        if self.config.bless {\n+            for kind in UI_EXTENSIONS {\n+                let canon_comparison_path = expected_output_path(\n+                    &self.testpaths,\n+                    self.revision,\n+                    &None,\n+                    kind,\n+                );\n+\n+                if let Ok(canon) = self.load_expected_output_from_path(&canon_comparison_path) {\n+                    for mode in modes {\n+                        self.prune_duplicate_output(mode.clone(), kind, &canon);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n     fn create_stamp(&self) {\n         let mut f = File::create(::stamp(&self.config, self.testpaths, self.revision)).unwrap();\n         f.write_all(compute_stamp_hash(&self.config).as_bytes())"}]}