{"sha": "3bd158c665f7f464ed9e0d5b02a408eedbf4d610", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiZDE1OGM2NjVmN2Y0NjRlZDllMGQ1YjAyYTQwOGVlZGJmNGQ2MTA=", "commit": {"author": {"name": "nham", "email": "hamann.nick@gmail.com", "date": "2014-08-08T19:37:06Z"}, "committer": {"name": "nham", "email": "hamann.nick@gmail.com", "date": "2014-08-08T19:37:06Z"}, "message": "Add example of estimating pi using Monte Carlo simulation to std::rand", "tree": {"sha": "a42766c971afb02cf597422b7530feca7e0c7a70", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a42766c971afb02cf597422b7530feca7e0c7a70"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3bd158c665f7f464ed9e0d5b02a408eedbf4d610", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3bd158c665f7f464ed9e0d5b02a408eedbf4d610", "html_url": "https://github.com/rust-lang/rust/commit/3bd158c665f7f464ed9e0d5b02a408eedbf4d610", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3bd158c665f7f464ed9e0d5b02a408eedbf4d610/comments", "author": {"login": "nham", "id": 546409, "node_id": "MDQ6VXNlcjU0NjQwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/546409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nham", "html_url": "https://github.com/nham", "followers_url": "https://api.github.com/users/nham/followers", "following_url": "https://api.github.com/users/nham/following{/other_user}", "gists_url": "https://api.github.com/users/nham/gists{/gist_id}", "starred_url": "https://api.github.com/users/nham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nham/subscriptions", "organizations_url": "https://api.github.com/users/nham/orgs", "repos_url": "https://api.github.com/users/nham/repos", "events_url": "https://api.github.com/users/nham/events{/privacy}", "received_events_url": "https://api.github.com/users/nham/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nham", "id": 546409, "node_id": "MDQ6VXNlcjU0NjQwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/546409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nham", "html_url": "https://github.com/nham", "followers_url": "https://api.github.com/users/nham/followers", "following_url": "https://api.github.com/users/nham/following{/other_user}", "gists_url": "https://api.github.com/users/nham/gists{/gist_id}", "starred_url": "https://api.github.com/users/nham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nham/subscriptions", "organizations_url": "https://api.github.com/users/nham/orgs", "repos_url": "https://api.github.com/users/nham/repos", "events_url": "https://api.github.com/users/nham/events{/privacy}", "received_events_url": "https://api.github.com/users/nham/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca89cfb0e3ea96116c01ec4c11f36a0b504ccde1", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca89cfb0e3ea96116c01ec4c11f36a0b504ccde1", "html_url": "https://github.com/rust-lang/rust/commit/ca89cfb0e3ea96116c01ec4c11f36a0b504ccde1"}], "stats": {"total": 45, "additions": 45, "deletions": 0}, "files": [{"sha": "06b9b464ebdeeebc27525a69935b567f2500483b", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/3bd158c665f7f464ed9e0d5b02a408eedbf4d610/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bd158c665f7f464ed9e0d5b02a408eedbf4d610/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=3bd158c665f7f464ed9e0d5b02a408eedbf4d610", "patch": "@@ -70,6 +70,51 @@\n //! println!(\"{}\", tuple)\n //! ```\n //!\n+//! ## Monte Carlo estimation of pi\n+//!\n+//! For this example, imagine we have a square with sides of length 2 and a unit\n+//! circle, both centered at the origin. Since the area of a unit circle is pi,\n+//! the ratio\n+//!\n+//!     (area of unit circle) / (area of square)\n+//!\n+//! is equal to pi / 4. So if we sample many points randomly from the square,\n+//! roughly pi / 4 of them should be inside the circle.\n+//!\n+//! We can use the above fact to estimate the value of pi: pick many points in the\n+//! square at random, calculate the fraction that fall within the circle, and\n+//! multiply this fraction by 4.\n+//!\n+//! ```\n+//! use std::rand;\n+//! use std::rand::distributions::{IndependentSample, Range};\n+//!\n+//! fn dist(x: f64, y: f64) -> f64 {\n+//!    (x*x + y*y).sqrt()\n+//! }\n+//!\n+//! fn main() {\n+//!    let between = Range::new(-1f64, 1.);\n+//!    let mut rng = rand::task_rng();\n+//!\n+//!    let total = 1_000_000u;\n+//!    let mut in_circle = 0u;\n+//!\n+//!    for _ in range(0u, total) {\n+//!        let a = between.ind_sample(&mut rng);\n+//!        let b = between.ind_sample(&mut rng);\n+//!        if dist(a, b) <= 1. {\n+//!            in_circle += 1;\n+//!        }\n+//!    }\n+//!\n+//!    // prints something close to 3.14159...\n+//!    println!(\"{}\", 4. * (in_circle as f64) / (total as f64));\n+//! }\n+//! ```\n+//!\n+//! ## Monty Hall Problem\n+//!\n //! This is a simulation of the [Monty Hall Problem][]:\n //!\n //! > Suppose you're on a game show, and you're given the choice of three doors:"}]}