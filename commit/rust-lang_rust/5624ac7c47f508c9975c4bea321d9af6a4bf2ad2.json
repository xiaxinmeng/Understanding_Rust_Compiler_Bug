{"sha": "5624ac7c47f508c9975c4bea321d9af6a4bf2ad2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2MjRhYzdjNDdmNTA4Yzk5NzVjNGJlYTMyMWQ5YWY2YTRiZjJhZDI=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-01-06T01:13:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-01-06T01:13:33Z"}, "message": "Rollup merge of #47165 - mbrubeck:args, r=alexcrichton\n\n[unix] Don't clone command-line args on startup\n\nFixes part of #47164 and simplifies the `args` code on non-Apple Unix platforms.\n\nNote: This could change behavior for programs that use both `std::env::args` *and* unsafe code that mutates `argv` directly.  However, these programs already behave differently on different platforms.  The new behavior on non-Apple platforms is closer to the existing behavior on Apple platforms.", "tree": {"sha": "b1c9d50c565e97a207c7d3e4945d1ea9e55522e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1c9d50c565e97a207c7d3e4945d1ea9e55522e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5624ac7c47f508c9975c4bea321d9af6a4bf2ad2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5624ac7c47f508c9975c4bea321d9af6a4bf2ad2", "html_url": "https://github.com/rust-lang/rust/commit/5624ac7c47f508c9975c4bea321d9af6a4bf2ad2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5624ac7c47f508c9975c4bea321d9af6a4bf2ad2/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67e3a2bb2c71c2a59fa5c4bc08e71fe07f25c5c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/67e3a2bb2c71c2a59fa5c4bc08e71fe07f25c5c2", "html_url": "https://github.com/rust-lang/rust/commit/67e3a2bb2c71c2a59fa5c4bc08e71fe07f25c5c2"}, {"sha": "91c3eee1735ad72b579f99cbb6919c3471747d94", "url": "https://api.github.com/repos/rust-lang/rust/commits/91c3eee1735ad72b579f99cbb6919c3471747d94", "html_url": "https://github.com/rust-lang/rust/commit/91c3eee1735ad72b579f99cbb6919c3471747d94"}], "stats": {"total": 39, "additions": 16, "deletions": 23}, "files": [{"sha": "e1c7ffc19e51eb1bb911c8a2df98d05fecc3c181", "filename": "src/libstd/sys/unix/args.rs", "status": "modified", "additions": 16, "deletions": 23, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/5624ac7c47f508c9975c4bea321d9af6a4bf2ad2/src%2Flibstd%2Fsys%2Funix%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5624ac7c47f508c9975c4bea321d9af6a4bf2ad2/src%2Flibstd%2Fsys%2Funix%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fargs.rs?ref=5624ac7c47f508c9975c4bea321d9af6a4bf2ad2", "patch": "@@ -69,57 +69,50 @@ impl DoubleEndedIterator for Args {\n           target_os = \"fuchsia\"))]\n mod imp {\n     use os::unix::prelude::*;\n-    use mem;\n+    use ptr;\n     use ffi::{CStr, OsString};\n     use marker::PhantomData;\n     use libc;\n     use super::Args;\n \n     use sys_common::mutex::Mutex;\n \n-    static mut GLOBAL_ARGS_PTR: usize = 0;\n+    static mut ARGC: isize = 0;\n+    static mut ARGV: *const *const u8 = ptr::null();\n     static LOCK: Mutex = Mutex::new();\n \n     pub unsafe fn init(argc: isize, argv: *const *const u8) {\n-        let args = (0..argc).map(|i| {\n-            CStr::from_ptr(*argv.offset(i) as *const libc::c_char).to_bytes().to_vec()\n-        }).collect();\n-\n         LOCK.lock();\n-        let ptr = get_global_ptr();\n-        assert!((*ptr).is_none());\n-        (*ptr) = Some(box args);\n+        ARGC = argc;\n+        ARGV = argv;\n         LOCK.unlock();\n     }\n \n     pub unsafe fn cleanup() {\n         LOCK.lock();\n-        *get_global_ptr() = None;\n+        ARGC = 0;\n+        ARGV = ptr::null();\n         LOCK.unlock();\n     }\n \n     pub fn args() -> Args {\n-        let bytes = clone().unwrap_or(Vec::new());\n-        let v: Vec<OsString> = bytes.into_iter().map(|v| {\n-            OsStringExt::from_vec(v)\n-        }).collect();\n-        Args { iter: v.into_iter(), _dont_send_or_sync_me: PhantomData }\n+        Args {\n+            iter: clone().into_iter(),\n+            _dont_send_or_sync_me: PhantomData\n+        }\n     }\n \n-    fn clone() -> Option<Vec<Vec<u8>>> {\n+    fn clone() -> Vec<OsString> {\n         unsafe {\n             LOCK.lock();\n-            let ptr = get_global_ptr();\n-            let ret = (*ptr).as_ref().map(|s| (**s).clone());\n+            let ret = (0..ARGC).map(|i| {\n+                let cstr = CStr::from_ptr(*ARGV.offset(i) as *const libc::c_char);\n+                OsStringExt::from_vec(cstr.to_bytes().to_vec())\n+            }).collect();\n             LOCK.unlock();\n             return ret\n         }\n     }\n-\n-    fn get_global_ptr() -> *mut Option<Box<Vec<Vec<u8>>>> {\n-        unsafe { mem::transmute(&GLOBAL_ARGS_PTR) }\n-    }\n-\n }\n \n #[cfg(any(target_os = \"macos\","}]}