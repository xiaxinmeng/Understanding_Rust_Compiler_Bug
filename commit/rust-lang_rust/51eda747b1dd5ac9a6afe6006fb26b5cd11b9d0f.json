{"sha": "51eda747b1dd5ac9a6afe6006fb26b5cd11b9d0f", "node_id": "C_kwDOAAsO6NoAKDUxZWRhNzQ3YjFkZDVhYzlhNmFmZTYwMDZmYjI2YjVjZDExYjlkMGY", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-04-22T17:37:54Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-05-13T17:42:52Z"}, "message": "rustdoc: Remove `ResolutionFailure::NoParentItem`\n\nIt's a bug and not an error", "tree": {"sha": "b325e71b2a3387799c0eb558a8a66884c622aaeb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b325e71b2a3387799c0eb558a8a66884c622aaeb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51eda747b1dd5ac9a6afe6006fb26b5cd11b9d0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51eda747b1dd5ac9a6afe6006fb26b5cd11b9d0f", "html_url": "https://github.com/rust-lang/rust/commit/51eda747b1dd5ac9a6afe6006fb26b5cd11b9d0f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51eda747b1dd5ac9a6afe6006fb26b5cd11b9d0f/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7d6408b05912396618dfdcc9cc713d3ace2aa9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7d6408b05912396618dfdcc9cc713d3ace2aa9a", "html_url": "https://github.com/rust-lang/rust/commit/a7d6408b05912396618dfdcc9cc713d3ace2aa9a"}], "stats": {"total": 57, "additions": 8, "deletions": 49}, "files": [{"sha": "1c5477b8d0d8430aebef3f275dc482dea9a8ceae", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 8, "deletions": 49, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/51eda747b1dd5ac9a6afe6006fb26b5cd11b9d0f/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51eda747b1dd5ac9a6afe6006fb26b5cd11b9d0f/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=51eda747b1dd5ac9a6afe6006fb26b5cd11b9d0f", "patch": "@@ -16,7 +16,7 @@ use rustc_resolve::ParentScope;\n use rustc_session::lint::Lint;\n use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::{sym, Ident, Symbol};\n-use rustc_span::{BytePos, DUMMY_SP};\n+use rustc_span::BytePos;\n use smallvec::{smallvec, SmallVec};\n \n use std::borrow::Cow;\n@@ -97,14 +97,6 @@ impl Res {\n         }\n     }\n \n-    fn as_hir_res(self) -> Option<rustc_hir::def::Res> {\n-        match self {\n-            Res::Def(kind, id) => Some(rustc_hir::def::Res::Def(kind, id)),\n-            // FIXME: maybe this should handle the subset of PrimitiveType that fits into hir::PrimTy?\n-            Res::Primitive(_) => None,\n-        }\n-    }\n-\n     /// Used for error reporting.\n     fn disambiguator_suggestion(self) -> Suggestion {\n         let kind = match self {\n@@ -189,9 +181,6 @@ enum ResolutionFailure<'a> {\n         /// In `[std::io::Error::x]`, `x` would be unresolved.\n         unresolved: Cow<'a, str>,\n     },\n-    /// This happens when rustdoc can't determine the parent scope for an item.\n-    /// It is always a bug in rustdoc.\n-    NoParentItem,\n     /// This link has malformed generic parameters; e.g., the angle brackets are unbalanced.\n     MalformedGenerics(MalformedGenerics),\n     /// Used to communicate that this should be ignored, but shouldn't be reported to the user.\n@@ -616,8 +605,12 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                 // item a separate function.\n                 Res::Def(DefKind::AssocFn | DefKind::AssocConst, _) => assert_eq!(ns, ValueNS),\n                 Res::Def(DefKind::AssocTy, _) => assert_eq!(ns, TypeNS),\n-                Res::Def(DefKind::Variant, _) => {\n-                    return handle_variant(self.cx, res);\n+                Res::Def(DefKind::Variant, def_id) => {\n+                    let enum_def_id = self.cx.tcx.parent(def_id).expect(\"variant has no parent\");\n+                    return Ok((\n+                        Res::Def(DefKind::Enum, enum_def_id),\n+                        Some(ItemFragment(FragmentKind::Variant, def_id)),\n+                    ));\n                 }\n                 // Not a trait item; just return what we found.\n                 _ => return Ok((res, None)),\n@@ -1268,19 +1261,7 @@ impl LinkCollector<'_, '_> {\n         // parent_node first.\n         let base_node =\n             if item.is_mod() && inner_docs { self.mod_ids.last().copied() } else { parent_node };\n-\n-        let Some(module_id) = base_node else {\n-            // This is a bug.\n-            debug!(\"attempting to resolve item without parent module: {}\", path_str);\n-            resolution_failure(\n-                self,\n-                diag_info,\n-                path_str,\n-                disambiguator,\n-                smallvec![ResolutionFailure::NoParentItem],\n-            );\n-            return None;\n-        };\n+        let module_id = base_node.expect(\"doc link without parent module\");\n \n         let (mut res, fragment) = self.resolve_with_disambiguator_cached(\n             ResolutionInfo {\n@@ -2140,17 +2121,6 @@ fn resolution_failure(\n                             expected_ns.descr()\n                         )\n                     }\n-                    ResolutionFailure::NoParentItem => {\n-                        // FIXME(eddyb) this doesn't belong here, whatever made\n-                        // the `ResolutionFailure::NoParentItem` should emit an\n-                        // immediate or delayed `span_bug` about the issue.\n-                        tcx.sess.delay_span_bug(\n-                            sp.unwrap_or(DUMMY_SP),\n-                            \"intra-doc link missing parent item\",\n-                        );\n-\n-                        \"BUG: all intra-doc links should have a parent item\".to_owned()\n-                    }\n                     ResolutionFailure::MalformedGenerics(variant) => match variant {\n                         MalformedGenerics::UnbalancedAngleBrackets => {\n                             String::from(\"unbalanced angle brackets\")\n@@ -2331,17 +2301,6 @@ fn privacy_error(cx: &DocContext<'_>, diag_info: &DiagnosticInfo<'_>, path_str:\n     });\n }\n \n-/// Given an enum variant's res, return the res of its enum and the associated fragment.\n-fn handle_variant(\n-    cx: &DocContext<'_>,\n-    res: Res,\n-) -> Result<(Res, Option<ItemFragment>), ErrorKind<'static>> {\n-    let parent = cx.tcx.parent(res.def_id(cx.tcx));\n-    let parent_def = Res::Def(DefKind::Enum, parent);\n-    let variant = cx.tcx.expect_variant_res(res.as_hir_res().unwrap());\n-    Ok((parent_def, Some(ItemFragment(FragmentKind::Variant, variant.def_id))))\n-}\n-\n /// Resolve a primitive type or value.\n fn resolve_primitive(path_str: &str, ns: Namespace) -> Option<Res> {\n     if ns != TypeNS {"}]}