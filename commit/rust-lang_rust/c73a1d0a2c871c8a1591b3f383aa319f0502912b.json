{"sha": "c73a1d0a2c871c8a1591b3f383aa319f0502912b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3M2ExZDBhMmM4NzFjOGExNTkxYjNmMzgzYWEzMTlmMDUwMjkxMmI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-01-26T21:37:45Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-01-28T10:13:53Z"}, "message": "Change list of predicates in ParameterEnvironment to a `Vec`.", "tree": {"sha": "2333712ea3dd87491b28e3832d36d8649dae2204", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2333712ea3dd87491b28e3832d36d8649dae2204"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c73a1d0a2c871c8a1591b3f383aa319f0502912b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c73a1d0a2c871c8a1591b3f383aa319f0502912b", "html_url": "https://github.com/rust-lang/rust/commit/c73a1d0a2c871c8a1591b3f383aa319f0502912b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c73a1d0a2c871c8a1591b3f383aa319f0502912b/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a530cc9706324ad44dba464d541a807eb5afdb08", "url": "https://api.github.com/repos/rust-lang/rust/commits/a530cc9706324ad44dba464d541a807eb5afdb08", "html_url": "https://github.com/rust-lang/rust/commit/a530cc9706324ad44dba464d541a807eb5afdb08"}], "stats": {"total": 35, "additions": 17, "deletions": 18}, "files": [{"sha": "3c1c387ed264b60759b8fff0614659034610fa7c", "filename": "src/librustc/middle/traits/object_safety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c73a1d0a2c871c8a1591b3f383aa319f0502912b/src%2Flibrustc%2Fmiddle%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c73a1d0a2c871c8a1591b3f383aa319f0502912b/src%2Flibrustc%2Fmiddle%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fobject_safety.rs?ref=c73a1d0a2c871c8a1591b3f383aa319f0502912b", "patch": "@@ -126,7 +126,7 @@ fn trait_has_sized_self<'tcx>(tcx: &ty::ctxt<'tcx>,\n     let param_env = ty::construct_parameter_environment(tcx,\n                                                         &trait_def.generics,\n                                                         ast::DUMMY_NODE_ID);\n-    let predicates = param_env.caller_bounds.predicates.as_slice().to_vec();\n+    let predicates = param_env.caller_bounds.clone();\n     let sized_def_id = match tcx.lang_items.sized_trait() {\n         Some(def_id) => def_id,\n         None => { return false; /* No Sized trait, can't require it! */ }"}, {"sha": "4fd58a638976f1ce8f7b0c8138b67866857e7e62", "filename": "src/librustc/middle/traits/project.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c73a1d0a2c871c8a1591b3f383aa319f0502912b/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c73a1d0a2c871c8a1591b3f383aa319f0502912b/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs?ref=c73a1d0a2c871c8a1591b3f383aa319f0502912b", "patch": "@@ -440,8 +440,7 @@ fn assemble_candidates_from_param_env<'cx,'tcx>(\n     obligation_trait_ref: &Rc<ty::TraitRef<'tcx>>,\n     candidate_set: &mut ProjectionTyCandidateSet<'tcx>)\n {\n-    let env_predicates = selcx.param_env().caller_bounds.predicates.clone();\n-    let env_predicates = env_predicates.iter().cloned().collect();\n+    let env_predicates = selcx.param_env().caller_bounds.clone();\n     assemble_candidates_from_predicates(selcx, obligation, obligation_trait_ref,\n                                         candidate_set, env_predicates);\n }"}, {"sha": "272eaad09c9e0df154cc13eb15863e144a92e935", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c73a1d0a2c871c8a1591b3f383aa319f0502912b/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c73a1d0a2c871c8a1591b3f383aa319f0502912b/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=c73a1d0a2c871c8a1591b3f383aa319f0502912b", "patch": "@@ -951,7 +951,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                stack.obligation.repr(self.tcx()));\n \n         let caller_trait_refs: Vec<_> =\n-            self.param_env().caller_bounds.predicates.iter()\n+            self.param_env().caller_bounds.iter()\n             .filter_map(|o| o.to_opt_poly_trait_ref())\n             .collect();\n "}, {"sha": "fc7e13528e5f791265e3b2226a11e9f13e59eb4a", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c73a1d0a2c871c8a1591b3f383aa319f0502912b/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c73a1d0a2c871c8a1591b3f383aa319f0502912b/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=c73a1d0a2c871c8a1591b3f383aa319f0502912b", "patch": "@@ -2100,7 +2100,7 @@ pub struct ParameterEnvironment<'a, 'tcx:'a> {\n     /// Obligations that the caller must satisfy. This is basically\n     /// the set of bounds on the in-scope type parameters, translated\n     /// into Obligations.\n-    pub caller_bounds: ty::GenericBounds<'tcx>,\n+    pub caller_bounds: Vec<ty::Predicate<'tcx>>,\n \n     /// Caches the results of trait selection. This cache is used\n     /// for things that have to do with the parameters in scope.\n@@ -6258,7 +6258,7 @@ impl Variance {\n pub fn empty_parameter_environment<'a,'tcx>(cx: &'a ctxt<'tcx>) -> ParameterEnvironment<'a,'tcx> {\n     ty::ParameterEnvironment { tcx: cx,\n                                free_substs: Substs::empty(),\n-                               caller_bounds: GenericBounds::empty(),\n+                               caller_bounds: Vec::new(),\n                                implicit_region_bound: ty::ReEmpty,\n                                selection_cache: traits::SelectionCache::new(), }\n }\n@@ -6296,25 +6296,26 @@ pub fn construct_parameter_environment<'a,'tcx>(\n \n     let bounds = generics.to_bounds(tcx, &free_substs);\n     let bounds = liberate_late_bound_regions(tcx, free_id_scope, &ty::Binder(bounds));\n+    let predicates = bounds.predicates.into_vec();\n \n     //\n     // Compute region bounds. For now, these relations are stored in a\n     // global table on the tcx, so just enter them there. I'm not\n     // crazy about this scheme, but it's convenient, at least.\n     //\n \n-    record_region_bounds(tcx, &bounds);\n+    record_region_bounds(tcx, &*predicates);\n \n-    debug!(\"construct_parameter_environment: free_id={:?} free_subst={:?} bounds={:?}\",\n+    debug!(\"construct_parameter_environment: free_id={:?} free_subst={:?} predicates={:?}\",\n            free_id,\n            free_substs.repr(tcx),\n-           bounds.repr(tcx));\n+           predicates.repr(tcx));\n \n     return ty::ParameterEnvironment {\n         tcx: tcx,\n         free_substs: free_substs,\n         implicit_region_bound: ty::ReScope(free_id_scope),\n-        caller_bounds: bounds,\n+        caller_bounds: predicates,\n         selection_cache: traits::SelectionCache::new(),\n     };\n \n@@ -6338,10 +6339,10 @@ pub fn construct_parameter_environment<'a,'tcx>(\n        }\n     }\n \n-    fn record_region_bounds<'tcx>(tcx: &ty::ctxt<'tcx>, bounds: &GenericBounds<'tcx>) {\n-        debug!(\"record_region_bounds(bounds={:?})\", bounds.repr(tcx));\n+    fn record_region_bounds<'tcx>(tcx: &ty::ctxt<'tcx>, predicates: &[ty::Predicate<'tcx>]) {\n+        debug!(\"record_region_bounds(predicates={:?})\", predicates.repr(tcx));\n \n-        for predicate in bounds.predicates.iter() {\n+        for predicate in predicates.iter() {\n             match *predicate {\n                 Predicate::Projection(..) |\n                 Predicate::Trait(..) |"}, {"sha": "a119359be115e402d0ec3509998d81e4d1e0e150", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c73a1d0a2c871c8a1591b3f383aa319f0502912b/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c73a1d0a2c871c8a1591b3f383aa319f0502912b/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=c73a1d0a2c871c8a1591b3f383aa319f0502912b", "patch": "@@ -245,7 +245,7 @@ pub fn compare_impl_method<'tcx>(tcx: &ty::ctxt<'tcx>,\n     let mut trait_param_env = impl_param_env.clone();\n     // The key step here is to update the caller_bounds's predicates to be\n     // the new hybrid bounds we computed.\n-    trait_param_env.caller_bounds.predicates = hybrid_preds;\n+    trait_param_env.caller_bounds = hybrid_preds.into_vec();\n \n     debug!(\"compare_impl_method: trait_bounds={}\",\n         trait_param_env.caller_bounds.repr(tcx));"}, {"sha": "f58912944a088ca62308a0d08a150d6997988dd2", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c73a1d0a2c871c8a1591b3f383aa319f0502912b/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c73a1d0a2c871c8a1591b3f383aa319f0502912b/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=c73a1d0a2c871c8a1591b3f383aa319f0502912b", "patch": "@@ -343,7 +343,7 @@ impl<'a,'tcx> ProbeContext<'a,'tcx> {\n         // FIXME -- Do we want to commit to this behavior for param bounds?\n \n         let bounds: Vec<_> =\n-            self.fcx.inh.param_env.caller_bounds.predicates\n+            self.fcx.inh.param_env.caller_bounds\n             .iter()\n             .filter_map(|predicate| {\n                 match *predicate {\n@@ -697,8 +697,7 @@ impl<'a,'tcx> ProbeContext<'a,'tcx> {\n         debug!(\"assemble_where_clause_candidates(trait_def_id={})\",\n                trait_def_id.repr(self.tcx()));\n \n-        let caller_predicates =\n-            self.fcx.inh.param_env.caller_bounds.predicates.as_slice().to_vec();\n+        let caller_predicates = self.fcx.inh.param_env.caller_bounds.clone();\n         for poly_bound in traits::elaborate_predicates(self.tcx(), caller_predicates)\n                           .filter_map(|p| p.to_opt_poly_trait_ref())\n                           .filter(|b| b.def_id() == trait_def_id)"}, {"sha": "b039f3ab8e44de2b069a7a1fd08d2e0c2fb4ea0f", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c73a1d0a2c871c8a1591b3f383aa319f0502912b/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c73a1d0a2c871c8a1591b3f383aa319f0502912b/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=c73a1d0a2c871c8a1591b3f383aa319f0502912b", "patch": "@@ -1482,7 +1482,7 @@ fn generic_must_outlive<'a, 'tcx>(rcx: &Rcx<'a, 'tcx>,\n     let mut param_bounds =\n         ty::required_region_bounds(rcx.tcx(),\n                                    generic.to_ty(rcx.tcx()),\n-                                   param_env.caller_bounds.predicates.as_slice().to_vec());\n+                                   param_env.caller_bounds.clone());\n \n     // In the case of a projection T::Foo, we may be able to extract bounds from the trait def:\n     match *generic {"}]}