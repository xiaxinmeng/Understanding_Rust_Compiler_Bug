{"sha": "f3e42cb16090b1b04c10865be14b4533736e9596", "node_id": "C_kwDOAAsO6NoAKGYzZTQyY2IxNjA5MGIxYjA0YzEwODY1YmUxNGI0NTMzNzM2ZTk1OTY", "commit": {"author": {"name": "asquared31415", "email": "34665709+asquared31415@users.noreply.github.com", "date": "2021-10-17T07:30:24Z"}, "committer": {"name": "asquared31415", "email": "34665709+asquared31415@users.noreply.github.com", "date": "2021-11-10T06:06:03Z"}, "message": "Fix aarch tests", "tree": {"sha": "32be14b068dc3eb0c180d19093db677f31d1c672", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32be14b068dc3eb0c180d19093db677f31d1c672"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3e42cb16090b1b04c10865be14b4533736e9596", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3e42cb16090b1b04c10865be14b4533736e9596", "html_url": "https://github.com/rust-lang/rust/commit/f3e42cb16090b1b04c10865be14b4533736e9596", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3e42cb16090b1b04c10865be14b4533736e9596/comments", "author": {"login": "asquared31415", "id": 34665709, "node_id": "MDQ6VXNlcjM0NjY1NzA5", "avatar_url": "https://avatars.githubusercontent.com/u/34665709?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asquared31415", "html_url": "https://github.com/asquared31415", "followers_url": "https://api.github.com/users/asquared31415/followers", "following_url": "https://api.github.com/users/asquared31415/following{/other_user}", "gists_url": "https://api.github.com/users/asquared31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/asquared31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asquared31415/subscriptions", "organizations_url": "https://api.github.com/users/asquared31415/orgs", "repos_url": "https://api.github.com/users/asquared31415/repos", "events_url": "https://api.github.com/users/asquared31415/events{/privacy}", "received_events_url": "https://api.github.com/users/asquared31415/received_events", "type": "User", "site_admin": false}, "committer": {"login": "asquared31415", "id": 34665709, "node_id": "MDQ6VXNlcjM0NjY1NzA5", "avatar_url": "https://avatars.githubusercontent.com/u/34665709?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asquared31415", "html_url": "https://github.com/asquared31415", "followers_url": "https://api.github.com/users/asquared31415/followers", "following_url": "https://api.github.com/users/asquared31415/following{/other_user}", "gists_url": "https://api.github.com/users/asquared31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/asquared31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asquared31415/subscriptions", "organizations_url": "https://api.github.com/users/asquared31415/orgs", "repos_url": "https://api.github.com/users/asquared31415/repos", "events_url": "https://api.github.com/users/asquared31415/events{/privacy}", "received_events_url": "https://api.github.com/users/asquared31415/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b233d3b5da7b4b6ba2e016d2c2cfdb67fb984777", "url": "https://api.github.com/repos/rust-lang/rust/commits/b233d3b5da7b4b6ba2e016d2c2cfdb67fb984777", "html_url": "https://github.com/rust-lang/rust/commit/b233d3b5da7b4b6ba2e016d2c2cfdb67fb984777"}], "stats": {"total": 111, "additions": 51, "deletions": 60}, "files": [{"sha": "8795f0ebce746d610fd93ca468588291bc26dee2", "filename": "src/test/ui/asm/aarch64/parse-error.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f3e42cb16090b1b04c10865be14b4533736e9596/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fparse-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3e42cb16090b1b04c10865be14b4533736e9596/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fparse-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fparse-error.rs?ref=f3e42cb16090b1b04c10865be14b4533736e9596", "patch": "@@ -50,7 +50,6 @@ fn main() {\n         //~^ ERROR clobber_abi is not allowed after options\n         asm!(\"{}\", options(), clobber_abi(\"C\"), const foo);\n         //~^ ERROR clobber_abi is not allowed after options\n-        asm!(\"\", clobber_abi(\"C\"), clobber_abi(\"C\"));\n         asm!(\"{a}\", a = const foo, a = const bar);\n         //~^ ERROR duplicate argument named `a`\n         //~^^ ERROR argument never used\n@@ -119,8 +118,6 @@ global_asm!(\"\", options(), clobber_abi(\"C\"));\n //~^ ERROR clobber_abi is not allowed after options\n global_asm!(\"{}\", options(), clobber_abi(\"C\"), const FOO);\n //~^ ERROR clobber_abi is not allowed after options\n-global_asm!(\"\", clobber_abi(\"C\"), clobber_abi(\"C\"));\n-//~^ ERROR `clobber_abi` cannot be used with `global_asm!`\n global_asm!(\"{a}\", a = const FOO, a = const BAR);\n //~^ ERROR duplicate argument named `a`\n //~^^ ERROR argument never used"}, {"sha": "3d88cef5c7d71771c022f20c0b68a3915f354159", "filename": "src/test/ui/asm/aarch64/parse-error.stderr", "status": "modified", "additions": 51, "deletions": 57, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/f3e42cb16090b1b04c10865be14b4533736e9596/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fparse-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f3e42cb16090b1b04c10865be14b4533736e9596/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fparse-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fparse-error.stderr?ref=f3e42cb16090b1b04c10865be14b4533736e9596", "patch": "@@ -96,17 +96,17 @@ error: expected string literal\n LL |         asm!(\"\", clobber_abi(foo));\n    |                              ^^^ not a string literal\n \n-error: expected `)`, found `foo`\n+error: expected one of `)` or `,`, found `foo`\n   --> $DIR/parse-error.rs:42:34\n    |\n LL |         asm!(\"\", clobber_abi(\"C\" foo));\n-   |                                  ^^^ expected `)`\n+   |                                  ^^^ expected one of `)` or `,`\n \n-error: expected `)`, found `,`\n-  --> $DIR/parse-error.rs:44:33\n+error: expected string literal\n+  --> $DIR/parse-error.rs:44:35\n    |\n LL |         asm!(\"\", clobber_abi(\"C\", foo));\n-   |                                 ^ expected `)`\n+   |                                   ^^^ not a string literal\n \n error: arguments are not allowed after clobber_abi\n   --> $DIR/parse-error.rs:46:38\n@@ -133,251 +133,245 @@ LL |         asm!(\"{}\", options(), clobber_abi(\"C\"), const foo);\n    |                    options\n \n error: duplicate argument named `a`\n-  --> $DIR/parse-error.rs:54:36\n+  --> $DIR/parse-error.rs:53:36\n    |\n LL |         asm!(\"{a}\", a = const foo, a = const bar);\n    |                     -------------  ^^^^^^^^^^^^^ duplicate argument\n    |                     |\n    |                     previously here\n \n error: argument never used\n-  --> $DIR/parse-error.rs:54:36\n+  --> $DIR/parse-error.rs:53:36\n    |\n LL |         asm!(\"{a}\", a = const foo, a = const bar);\n    |                                    ^^^^^^^^^^^^^ argument never used\n    |\n    = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {1} */\"`\n \n error: explicit register arguments cannot have names\n-  --> $DIR/parse-error.rs:59:18\n+  --> $DIR/parse-error.rs:58:18\n    |\n LL |         asm!(\"\", a = in(\"x0\") foo);\n    |                  ^^^^^^^^^^^^^^^^\n \n error: named arguments cannot follow explicit register arguments\n-  --> $DIR/parse-error.rs:61:35\n+  --> $DIR/parse-error.rs:60:35\n    |\n LL |         asm!(\"{a}\", in(\"x0\") foo, a = const bar);\n    |                     ------------  ^^^^^^^^^^^^^ named argument\n    |                     |\n    |                     explicit register argument\n \n error: named arguments cannot follow explicit register arguments\n-  --> $DIR/parse-error.rs:64:35\n+  --> $DIR/parse-error.rs:63:35\n    |\n LL |         asm!(\"{a}\", in(\"x0\") foo, a = const bar);\n    |                     ------------  ^^^^^^^^^^^^^ named argument\n    |                     |\n    |                     explicit register argument\n \n error: positional arguments cannot follow named arguments or explicit register arguments\n-  --> $DIR/parse-error.rs:67:35\n+  --> $DIR/parse-error.rs:66:35\n    |\n LL |         asm!(\"{1}\", in(\"x0\") foo, const bar);\n    |                     ------------  ^^^^^^^^^ positional argument\n    |                     |\n    |                     explicit register argument\n \n error: expected one of `clobber_abi`, `const`, `in`, `inlateout`, `inout`, `lateout`, `options`, `out`, or `sym`, found `\"\"`\n-  --> $DIR/parse-error.rs:70:29\n+  --> $DIR/parse-error.rs:69:29\n    |\n LL |         asm!(\"\", options(), \"\");\n    |                             ^^ expected one of 9 possible tokens\n \n error: expected one of `clobber_abi`, `const`, `in`, `inlateout`, `inout`, `lateout`, `options`, `out`, or `sym`, found `\"{}\"`\n-  --> $DIR/parse-error.rs:72:33\n+  --> $DIR/parse-error.rs:71:33\n    |\n LL |         asm!(\"{}\", in(reg) foo, \"{}\", out(reg) foo);\n    |                                 ^^^^ expected one of 9 possible tokens\n \n error: asm template must be a string literal\n-  --> $DIR/parse-error.rs:74:14\n+  --> $DIR/parse-error.rs:73:14\n    |\n LL |         asm!(format!(\"{{{}}}\", 0), in(reg) foo);\n    |              ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: asm template must be a string literal\n-  --> $DIR/parse-error.rs:76:21\n+  --> $DIR/parse-error.rs:75:21\n    |\n LL |         asm!(\"{1}\", format!(\"{{{}}}\", 0), in(reg) foo, out(reg) bar);\n    |                     ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: _ cannot be used for input operands\n-  --> $DIR/parse-error.rs:78:28\n+  --> $DIR/parse-error.rs:77:28\n    |\n LL |         asm!(\"{}\", in(reg) _);\n    |                            ^\n \n error: _ cannot be used for input operands\n-  --> $DIR/parse-error.rs:80:31\n+  --> $DIR/parse-error.rs:79:31\n    |\n LL |         asm!(\"{}\", inout(reg) _);\n    |                               ^\n \n error: _ cannot be used for input operands\n-  --> $DIR/parse-error.rs:82:35\n+  --> $DIR/parse-error.rs:81:35\n    |\n LL |         asm!(\"{}\", inlateout(reg) _);\n    |                                   ^\n \n error: requires at least a template string argument\n-  --> $DIR/parse-error.rs:89:1\n+  --> $DIR/parse-error.rs:88:1\n    |\n LL | global_asm!();\n    | ^^^^^^^^^^^^^\n \n error: asm template must be a string literal\n-  --> $DIR/parse-error.rs:91:13\n+  --> $DIR/parse-error.rs:90:13\n    |\n LL | global_asm!(FOO);\n    |             ^^^\n \n error: expected token: `,`\n-  --> $DIR/parse-error.rs:93:18\n+  --> $DIR/parse-error.rs:92:18\n    |\n LL | global_asm!(\"{}\" FOO);\n    |                  ^^^ expected `,`\n \n error: expected operand, options, or additional template string\n-  --> $DIR/parse-error.rs:95:19\n+  --> $DIR/parse-error.rs:94:19\n    |\n LL | global_asm!(\"{}\", FOO);\n    |                   ^^^ expected operand, options, or additional template string\n \n error: expected expression, found end of macro arguments\n-  --> $DIR/parse-error.rs:97:24\n+  --> $DIR/parse-error.rs:96:24\n    |\n LL | global_asm!(\"{}\", const);\n    |                        ^ expected expression\n \n error: expected one of `,`, `.`, `?`, or an operator, found `FOO`\n-  --> $DIR/parse-error.rs:99:30\n+  --> $DIR/parse-error.rs:98:30\n    |\n LL | global_asm!(\"{}\", const(reg) FOO);\n    |                              ^^^ expected one of `,`, `.`, `?`, or an operator\n \n error: expected one of `)`, `att_syntax`, or `raw`, found `FOO`\n-  --> $DIR/parse-error.rs:101:25\n+  --> $DIR/parse-error.rs:100:25\n    |\n LL | global_asm!(\"\", options(FOO));\n    |                         ^^^ expected one of `)`, `att_syntax`, or `raw`\n \n error: expected one of `)`, `att_syntax`, or `raw`, found `nomem`\n-  --> $DIR/parse-error.rs:103:25\n+  --> $DIR/parse-error.rs:102:25\n    |\n LL | global_asm!(\"\", options(nomem FOO));\n    |                         ^^^^^ expected one of `)`, `att_syntax`, or `raw`\n \n error: expected one of `)`, `att_syntax`, or `raw`, found `nomem`\n-  --> $DIR/parse-error.rs:105:25\n+  --> $DIR/parse-error.rs:104:25\n    |\n LL | global_asm!(\"\", options(nomem, FOO));\n    |                         ^^^^^ expected one of `)`, `att_syntax`, or `raw`\n \n error: arguments are not allowed after options\n-  --> $DIR/parse-error.rs:107:30\n+  --> $DIR/parse-error.rs:106:30\n    |\n LL | global_asm!(\"{}\", options(), const FOO);\n    |                   ---------  ^^^^^^^^^ argument\n    |                   |\n    |                   previous options\n \n error: expected string literal\n-  --> $DIR/parse-error.rs:109:29\n+  --> $DIR/parse-error.rs:108:29\n    |\n LL | global_asm!(\"\", clobber_abi(FOO));\n    |                             ^^^ not a string literal\n \n-error: expected `)`, found `FOO`\n-  --> $DIR/parse-error.rs:111:33\n+error: expected one of `)` or `,`, found `FOO`\n+  --> $DIR/parse-error.rs:110:33\n    |\n LL | global_asm!(\"\", clobber_abi(\"C\" FOO));\n-   |                                 ^^^ expected `)`\n+   |                                 ^^^ expected one of `)` or `,`\n \n-error: expected `)`, found `,`\n-  --> $DIR/parse-error.rs:113:32\n+error: expected string literal\n+  --> $DIR/parse-error.rs:112:34\n    |\n LL | global_asm!(\"\", clobber_abi(\"C\", FOO));\n-   |                                ^ expected `)`\n+   |                                  ^^^ not a string literal\n \n error: arguments are not allowed after clobber_abi\n-  --> $DIR/parse-error.rs:115:37\n+  --> $DIR/parse-error.rs:114:37\n    |\n LL | global_asm!(\"{}\", clobber_abi(\"C\"), const FOO);\n    |                   ----------------  ^^^^^^^^^ argument\n    |                   |\n    |                   clobber_abi\n \n error: `clobber_abi` cannot be used with `global_asm!`\n-  --> $DIR/parse-error.rs:115:19\n+  --> $DIR/parse-error.rs:114:19\n    |\n LL | global_asm!(\"{}\", clobber_abi(\"C\"), const FOO);\n    |                   ^^^^^^^^^^^^^^^^\n \n error: clobber_abi is not allowed after options\n-  --> $DIR/parse-error.rs:118:28\n+  --> $DIR/parse-error.rs:117:28\n    |\n LL | global_asm!(\"\", options(), clobber_abi(\"C\"));\n    |                 ---------  ^^^^^^^^^^^^^^^^\n    |                 |\n    |                 options\n \n error: clobber_abi is not allowed after options\n-  --> $DIR/parse-error.rs:120:30\n+  --> $DIR/parse-error.rs:119:30\n    |\n LL | global_asm!(\"{}\", options(), clobber_abi(\"C\"), const FOO);\n    |                   ---------  ^^^^^^^^^^^^^^^^\n    |                   |\n    |                   options\n \n-error: `clobber_abi` cannot be used with `global_asm!`\n-  --> $DIR/parse-error.rs:122:35\n-   |\n-LL | global_asm!(\"\", clobber_abi(\"C\"), clobber_abi(\"C\"));\n-   |                 ^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^\n-\n error: duplicate argument named `a`\n-  --> $DIR/parse-error.rs:124:35\n+  --> $DIR/parse-error.rs:121:35\n    |\n LL | global_asm!(\"{a}\", a = const FOO, a = const BAR);\n    |                    -------------  ^^^^^^^^^^^^^ duplicate argument\n    |                    |\n    |                    previously here\n \n error: argument never used\n-  --> $DIR/parse-error.rs:124:35\n+  --> $DIR/parse-error.rs:121:35\n    |\n LL | global_asm!(\"{a}\", a = const FOO, a = const BAR);\n    |                                   ^^^^^^^^^^^^^ argument never used\n    |\n    = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {1} */\"`\n \n error: expected one of `clobber_abi`, `const`, or `options`, found `\"\"`\n-  --> $DIR/parse-error.rs:127:28\n+  --> $DIR/parse-error.rs:124:28\n    |\n LL | global_asm!(\"\", options(), \"\");\n    |                            ^^ expected one of `clobber_abi`, `const`, or `options`\n \n error: expected one of `clobber_abi`, `const`, or `options`, found `\"{}\"`\n-  --> $DIR/parse-error.rs:129:30\n+  --> $DIR/parse-error.rs:126:30\n    |\n LL | global_asm!(\"{}\", const FOO, \"{}\", const FOO);\n    |                              ^^^^ expected one of `clobber_abi`, `const`, or `options`\n \n error: asm template must be a string literal\n-  --> $DIR/parse-error.rs:131:13\n+  --> $DIR/parse-error.rs:128:13\n    |\n LL | global_asm!(format!(\"{{{}}}\", 0), const FOO);\n    |             ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: asm template must be a string literal\n-  --> $DIR/parse-error.rs:133:20\n+  --> $DIR/parse-error.rs:130:20\n    |\n LL | global_asm!(\"{1}\", format!(\"{{{}}}\", 0), const FOO, const BAR);\n    |                    ^^^^^^^^^^^^^^^^^^^^\n@@ -403,7 +397,7 @@ LL |         asm!(\"{}\", clobber_abi(\"C\"), const foo);\n    |                                            ^^^ non-constant value\n \n error[E0435]: attempt to use a non-constant value in a constant\n-  --> $DIR/parse-error.rs:54:31\n+  --> $DIR/parse-error.rs:53:31\n    |\n LL |     let mut foo = 0;\n    |      ---------- help: consider using `const` instead of `let`: `const foo`\n@@ -412,7 +406,7 @@ LL |         asm!(\"{a}\", a = const foo, a = const bar);\n    |                               ^^^ non-constant value\n \n error[E0435]: attempt to use a non-constant value in a constant\n-  --> $DIR/parse-error.rs:54:46\n+  --> $DIR/parse-error.rs:53:46\n    |\n LL |     let mut bar = 0;\n    |      ---------- help: consider using `const` instead of `let`: `const bar`\n@@ -421,7 +415,7 @@ LL |         asm!(\"{a}\", a = const foo, a = const bar);\n    |                                              ^^^ non-constant value\n \n error[E0435]: attempt to use a non-constant value in a constant\n-  --> $DIR/parse-error.rs:61:45\n+  --> $DIR/parse-error.rs:60:45\n    |\n LL |     let mut bar = 0;\n    |      ---------- help: consider using `const` instead of `let`: `const bar`\n@@ -430,7 +424,7 @@ LL |         asm!(\"{a}\", in(\"x0\") foo, a = const bar);\n    |                                             ^^^ non-constant value\n \n error[E0435]: attempt to use a non-constant value in a constant\n-  --> $DIR/parse-error.rs:64:45\n+  --> $DIR/parse-error.rs:63:45\n    |\n LL |     let mut bar = 0;\n    |      ---------- help: consider using `const` instead of `let`: `const bar`\n@@ -439,14 +433,14 @@ LL |         asm!(\"{a}\", in(\"x0\") foo, a = const bar);\n    |                                             ^^^ non-constant value\n \n error[E0435]: attempt to use a non-constant value in a constant\n-  --> $DIR/parse-error.rs:67:41\n+  --> $DIR/parse-error.rs:66:41\n    |\n LL |     let mut bar = 0;\n    |      ---------- help: consider using `const` instead of `let`: `const bar`\n ...\n LL |         asm!(\"{1}\", in(\"x0\") foo, const bar);\n    |                                         ^^^ non-constant value\n \n-error: aborting due to 65 previous errors\n+error: aborting due to 64 previous errors\n \n For more information about this error, try `rustc --explain E0435`."}]}