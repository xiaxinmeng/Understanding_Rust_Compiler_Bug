{"sha": "3574b1a69aebccbafc49096257317bb322c67025", "node_id": "C_kwDOAAsO6NoAKDM1NzRiMWE2OWFlYmNjYmFmYzQ5MDk2MjU3MzE3YmIzMjJjNjcwMjU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-10T15:22:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-10T15:22:51Z"}, "message": "Auto merge of #107889 - matthiaskrgr:rollup-c0d4al0, r=matthiaskrgr\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #107789 (Avoid exposing type parameters and implementation details sourced from macro expansions)\n - #107836 (Handle properly when there is no crate attrs)\n - #107839 (avoid duplicating the RUSTC_LOG env var name)\n - #107866 (Allow wasi-libc to initialize its environment variables lazily.)\n - #107876 (create symlink only for non-windows operating systems)\n - #107882 (Cleanup typos in en_US/borrowck.ftl)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "20698aeaed5fd97fee63afce1b52625d45b26463", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20698aeaed5fd97fee63afce1b52625d45b26463"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3574b1a69aebccbafc49096257317bb322c67025", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3574b1a69aebccbafc49096257317bb322c67025", "html_url": "https://github.com/rust-lang/rust/commit/3574b1a69aebccbafc49096257317bb322c67025", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3574b1a69aebccbafc49096257317bb322c67025/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1ac43a9b9a8250d858705b0796dfed6186e18db", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1ac43a9b9a8250d858705b0796dfed6186e18db", "html_url": "https://github.com/rust-lang/rust/commit/d1ac43a9b9a8250d858705b0796dfed6186e18db"}, {"sha": "1e106c1cf89d55f0d118fd92bbcf145eb7a85b49", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e106c1cf89d55f0d118fd92bbcf145eb7a85b49", "html_url": "https://github.com/rust-lang/rust/commit/1e106c1cf89d55f0d118fd92bbcf145eb7a85b49"}], "stats": {"total": 131, "additions": 88, "deletions": 43}, "files": [{"sha": "37967bfdff5de1612793b1764e49bd30dcd49e25", "filename": "compiler/rustc_driver_impl/src/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3574b1a69aebccbafc49096257317bb322c67025/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3574b1a69aebccbafc49096257317bb322c67025/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs?ref=3574b1a69aebccbafc49096257317bb322c67025", "patch": "@@ -624,7 +624,10 @@ fn print_crate_info(\n                 println!(\"{}\", serde_json::to_string_pretty(&sess.target.to_json()).unwrap());\n             }\n             FileNames | CrateName => {\n-                let attrs = attrs.as_ref().unwrap();\n+                let Some(attrs) = attrs.as_ref() else {\n+                    // no crate attributes, print out an error and exit\n+                    return Compilation::Continue;\n+                };\n                 let t_outputs = rustc_interface::util::build_output_filenames(attrs, sess);\n                 let id = rustc_session::output::find_crate_name(sess, attrs);\n                 if *req == PrintRequest::CrateName {"}, {"sha": "a3b6b5e8138b68ed2e84b37abad09be4ef2577ac", "filename": "compiler/rustc_error_messages/locales/en-US/borrowck.ftl", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3574b1a69aebccbafc49096257317bb322c67025/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fborrowck.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/3574b1a69aebccbafc49096257317bb322c67025/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fborrowck.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fborrowck.ftl?ref=3574b1a69aebccbafc49096257317bb322c67025", "patch": "@@ -18,7 +18,7 @@ borrowck_generic_does_not_live_long_enough =\n     `{$kind}` does not live long enough\n \n borrowck_move_borrowed =\n-    cannot move out of `{$desc}` beacause it is borrowed\n+    cannot move out of `{$desc}` because it is borrowed\n \n borrowck_var_does_not_need_mut =\n     variable does not need to be mutable\n@@ -87,10 +87,10 @@ borrowck_use_due_to_use_closure =\n     use occurs due to use in closure\n \n borrowck_assign_due_to_use_closure =\n-    assign occurs due to use in closure\n+    assignment occurs due to use in closure\n \n borrowck_assign_part_due_to_use_closure =\n-    assign to part occurs due to use in closure\n+    assignment to part occurs due to use in closure\n \n borrowck_capture_immute =\n     capture is immutable because of use here"}, {"sha": "c092efbb557cf76acbf6ec427ecacec9e8e036be", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3574b1a69aebccbafc49096257317bb322c67025/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3574b1a69aebccbafc49096257317bb322c67025/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=3574b1a69aebccbafc49096257317bb322c67025", "patch": "@@ -158,8 +158,12 @@ fn fmt_printer<'a, 'tcx>(infcx: &'a InferCtxt<'tcx>, ns: Namespace) -> FmtPrinte\n         if infcx.probe_ty_var(ty_vid).is_ok() {\n             warn!(\"resolved ty var in error message\");\n         }\n-        if let TypeVariableOriginKind::TypeParameterDefinition(name, _) =\n-            infcx.inner.borrow_mut().type_variables().var_origin(ty_vid).kind\n+\n+        let mut infcx_inner = infcx.inner.borrow_mut();\n+        let ty_vars = infcx_inner.type_variables();\n+        let var_origin = ty_vars.var_origin(ty_vid);\n+        if let TypeVariableOriginKind::TypeParameterDefinition(name, _) = var_origin.kind\n+            && !var_origin.span.from_expansion()\n         {\n             Some(name)\n         } else {\n@@ -254,7 +258,7 @@ impl<'tcx> InferCtxt<'tcx> {\n                     if let TypeVariableOriginKind::TypeParameterDefinition(name, def_id) =\n                         var_origin.kind\n                     {\n-                        if name != kw::SelfUpper {\n+                        if name != kw::SelfUpper && !var_origin.span.from_expansion() {\n                             return InferenceDiagnosticsData {\n                                 name: name.to_string(),\n                                 span: Some(var_origin.span),\n@@ -780,7 +784,7 @@ impl<'a, 'tcx> FindInferSourceVisitor<'a, 'tcx> {\n         // The sources are listed in order of preference here.\n         let tcx = self.infcx.tcx;\n         let ctx = CostCtxt { tcx };\n-        let base_cost = match source.kind {\n+        match source.kind {\n             InferSourceKind::LetBinding { ty, .. } => ctx.ty_cost(ty),\n             InferSourceKind::ClosureArg { ty, .. } => ctx.ty_cost(ty),\n             InferSourceKind::GenericArg { def_id, generic_args, .. } => {\n@@ -797,17 +801,17 @@ impl<'a, 'tcx> FindInferSourceVisitor<'a, 'tcx> {\n             InferSourceKind::ClosureReturn { ty, should_wrap_expr, .. } => {\n                 30 + ctx.ty_cost(ty) + if should_wrap_expr.is_some() { 10 } else { 0 }\n             }\n-        };\n-\n-        let suggestion_may_apply = if source.from_expansion() { 10000 } else { 0 };\n-\n-        base_cost + suggestion_may_apply\n+        }\n     }\n \n     /// Uses `fn source_cost` to determine whether this inference source is preferable to\n     /// previous sources. We generally prefer earlier sources.\n     #[instrument(level = \"debug\", skip(self))]\n     fn update_infer_source(&mut self, mut new_source: InferSource<'tcx>) {\n+        if new_source.from_expansion() {\n+            return;\n+        }\n+\n         let cost = self.source_cost(&new_source) + self.attempt;\n         debug!(?cost);\n         self.attempt += 1;\n@@ -819,6 +823,7 @@ impl<'a, 'tcx> FindInferSourceVisitor<'a, 'tcx> {\n             // `let x: _ = iter.collect();`, as this is a very common case.\n             *def_id = Some(did);\n         }\n+\n         if cost < self.infer_source_cost {\n             self.infer_source_cost = cost;\n             self.infer_source = Some(new_source);"}, {"sha": "de26fd61e4d60d3c36c674a89453e21c9f98671c", "filename": "compiler/rustc_log/src/lib.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3574b1a69aebccbafc49096257317bb322c67025/compiler%2Frustc_log%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3574b1a69aebccbafc49096257317bb322c67025/compiler%2Frustc_log%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_log%2Fsrc%2Flib.rs?ref=3574b1a69aebccbafc49096257317bb322c67025", "patch": "@@ -14,7 +14,7 @@\n //!\n //! ```\n //! fn main() {\n-//!     rustc_log::init_rustc_env_logger().unwrap();\n+//!     rustc_log::init_env_logger(\"LOG\").unwrap();\n //!\n //!     let edition = rustc_span::edition::Edition::Edition2021;\n //!     rustc_span::create_session_globals_then(edition, || {\n@@ -23,9 +23,9 @@\n //! }\n //! ```\n //!\n-//! Now `RUSTC_LOG=debug cargo run` will run your minimal main.rs and show\n+//! Now `LOG=debug cargo run` will run your minimal main.rs and show\n //! rustc's debug logging. In a workflow like this, one might also add\n-//! `std::env::set_var(\"RUSTC_LOG\", \"debug\")` to the top of main so that `cargo\n+//! `std::env::set_var(\"LOG\", \"debug\")` to the top of main so that `cargo\n //! run` by itself is sufficient to get logs.\n //!\n //! The reason rustc_log is a tiny separate crate, as opposed to exposing the\n@@ -53,12 +53,6 @@ use tracing_subscriber::fmt::{\n };\n use tracing_subscriber::layer::SubscriberExt;\n \n-pub fn init_rustc_env_logger() -> Result<(), Error> {\n-    init_env_logger(\"RUSTC_LOG\")\n-}\n-\n-/// In contrast to `init_rustc_env_logger` this allows you to choose an env var\n-/// other than `RUSTC_LOG`.\n pub fn init_env_logger(env: &str) -> Result<(), Error> {\n     let filter = match env::var(env) {\n         Ok(env) => EnvFilter::new(env),"}, {"sha": "9919dc7087ec19d515e221428ebbcbb6cbe07bee", "filename": "library/std/src/sys/wasi/os.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3574b1a69aebccbafc49096257317bb322c67025/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3574b1a69aebccbafc49096257317bb322c67025/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fos.rs?ref=3574b1a69aebccbafc49096257317bb322c67025", "patch": "@@ -21,6 +21,7 @@ mod libc {\n     extern \"C\" {\n         pub fn getcwd(buf: *mut c_char, size: size_t) -> *mut c_char;\n         pub fn chdir(dir: *const c_char) -> c_int;\n+        pub fn __wasilibc_get_environ() -> *mut *mut c_char;\n     }\n }\n \n@@ -161,7 +162,12 @@ impl Iterator for Env {\n pub fn env() -> Env {\n     unsafe {\n         let _guard = env_read_lock();\n-        let mut environ = libc::environ;\n+\n+        // Use `__wasilibc_get_environ` instead of `environ` here so that we\n+        // don't require wasi-libc to eagerly initialize the environment\n+        // variables.\n+        let mut environ = libc::__wasilibc_get_environ();\n+\n         let mut result = Vec::new();\n         if !environ.is_null() {\n             while !(*environ).is_null() {"}, {"sha": "6dcba117c24335cc5d59ffe1ac6a998a7d8e86c1", "filename": "src/bootstrap/download.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3574b1a69aebccbafc49096257317bb322c67025/src%2Fbootstrap%2Fdownload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3574b1a69aebccbafc49096257317bb322c67025/src%2Fbootstrap%2Fdownload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdownload.rs?ref=3574b1a69aebccbafc49096257317bb322c67025", "patch": "@@ -340,9 +340,12 @@ impl Config {\n         let rustfmt_path = bin_root.join(\"bin\").join(exe(\"rustfmt\", host));\n         let rustfmt_stamp = bin_root.join(\".rustfmt-stamp\");\n \n-        let legacy_rustfmt = self.initial_rustc.with_file_name(exe(\"rustfmt\", host));\n-        if !legacy_rustfmt.exists() {\n-            t!(self.symlink_file(&rustfmt_path, &legacy_rustfmt));\n+        #[cfg(not(windows))]\n+        {\n+            let legacy_rustfmt = self.initial_rustc.with_file_name(exe(\"rustfmt\", host));\n+            if !legacy_rustfmt.exists() {\n+                t!(self.symlink_file(&rustfmt_path, &legacy_rustfmt));\n+            }\n         }\n \n         if rustfmt_path.exists() && !program_out_of_date(&rustfmt_stamp, &channel) {"}, {"sha": "2f02159229d3cea987bd1f2be80a33914802e86e", "filename": "tests/run-make/no-input-file/Makefile", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3574b1a69aebccbafc49096257317bb322c67025/tests%2Frun-make%2Fno-input-file%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/3574b1a69aebccbafc49096257317bb322c67025/tests%2Frun-make%2Fno-input-file%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fno-input-file%2FMakefile?ref=3574b1a69aebccbafc49096257317bb322c67025", "patch": "@@ -0,0 +1,4 @@\n+include ../../run-make-fulldeps/tools.mk\n+\n+all:\n+\t$(RUSTC) --print crate-name 2>&1 | diff - no-input-file.stderr"}, {"sha": "b843eb524f3d270d6c86130127c1f5bb938cf205", "filename": "tests/run-make/no-input-file/no-input-file.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3574b1a69aebccbafc49096257317bb322c67025/tests%2Frun-make%2Fno-input-file%2Fno-input-file.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3574b1a69aebccbafc49096257317bb322c67025/tests%2Frun-make%2Fno-input-file%2Fno-input-file.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fno-input-file%2Fno-input-file.stderr?ref=3574b1a69aebccbafc49096257317bb322c67025", "patch": "@@ -0,0 +1,2 @@\n+error: no input filename given\n+"}, {"sha": "7f6758f47f8fe4cf1c89f6f27011af67b7d720b7", "filename": "tests/ui/inference/need_type_info/issue-107745-avoid-expr-from-macro-expansion.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3574b1a69aebccbafc49096257317bb322c67025/tests%2Fui%2Finference%2Fneed_type_info%2Fissue-107745-avoid-expr-from-macro-expansion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3574b1a69aebccbafc49096257317bb322c67025/tests%2Fui%2Finference%2Fneed_type_info%2Fissue-107745-avoid-expr-from-macro-expansion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finference%2Fneed_type_info%2Fissue-107745-avoid-expr-from-macro-expansion.rs?ref=3574b1a69aebccbafc49096257317bb322c67025", "patch": "@@ -0,0 +1,19 @@\n+// ignore-tidy-linelength\n+\n+// Regression test for #107745.\n+// Previously need_type_info::update_infer_source will consider expressions originating from\n+// macro expressions as candiate \"previous sources\". This unfortunately can mean that\n+// for macros expansions such as `format!()` internal implementation details can leak, such as:\n+//\n+// ```\n+// error[E0282]: type annotations needed\n+// --> src/main.rs:2:22\n+//  |\n+//2 |     println!(\"{:?}\", []);\n+//  |                      ^^ cannot infer type of the type parameter `T` declared on the associated function `new_debug`\n+// ```\n+\n+fn main() {\n+    println!(\"{:?}\", []);\n+    //~^ ERROR type annotations needed\n+}"}, {"sha": "464655bbcf4515b90d764cbea4ecb3565f316943", "filename": "tests/ui/inference/need_type_info/issue-107745-avoid-expr-from-macro-expansion.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3574b1a69aebccbafc49096257317bb322c67025/tests%2Fui%2Finference%2Fneed_type_info%2Fissue-107745-avoid-expr-from-macro-expansion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3574b1a69aebccbafc49096257317bb322c67025/tests%2Fui%2Finference%2Fneed_type_info%2Fissue-107745-avoid-expr-from-macro-expansion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finference%2Fneed_type_info%2Fissue-107745-avoid-expr-from-macro-expansion.stderr?ref=3574b1a69aebccbafc49096257317bb322c67025", "patch": "@@ -0,0 +1,11 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/issue-107745-avoid-expr-from-macro-expansion.rs:17:22\n+   |\n+LL |     println!(\"{:?}\", []);\n+   |                      ^^ cannot infer type\n+   |\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "8c92505b5eb281b5008b56d1b2aee1e2dd353746", "filename": "tests/ui/issues/issue-16966.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3574b1a69aebccbafc49096257317bb322c67025/tests%2Fui%2Fissues%2Fissue-16966.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3574b1a69aebccbafc49096257317bb322c67025/tests%2Fui%2Fissues%2Fissue-16966.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-16966.stderr?ref=3574b1a69aebccbafc49096257317bb322c67025", "patch": "@@ -1,10 +1,8 @@\n error[E0282]: type annotations needed\n-  --> $DIR/issue-16966.rs:2:5\n+  --> $DIR/issue-16966.rs:2:12\n    |\n LL |     panic!(std::default::Default::default());\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type of the type parameter `M` declared on the function `begin_panic`\n-   |\n-   = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type\n \n error: aborting due to previous error\n "}, {"sha": "a56cd17773dc4cd0577b5ae1711af2166bd04f4e", "filename": "tests/ui/parser/missing-closing-angle-bracket-eq-constraint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3574b1a69aebccbafc49096257317bb322c67025/tests%2Fui%2Fparser%2Fmissing-closing-angle-bracket-eq-constraint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3574b1a69aebccbafc49096257317bb322c67025/tests%2Fui%2Fparser%2Fmissing-closing-angle-bracket-eq-constraint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fmissing-closing-angle-bracket-eq-constraint.rs?ref=3574b1a69aebccbafc49096257317bb322c67025", "patch": "@@ -17,7 +17,7 @@ fn test2<T1, T2>(arg1 : T1, arg2 : T2) {\n fn test3<'a>(arg : &'a u32) {\n   let v : Vec<'a = vec![];\n     //~^ ERROR: expected one of\n-    //~| ERROR: type annotations needed for `Vec<T>`\n+    //~| ERROR: type annotations needed for `Vec<_>`\n }\n \n fn main() {}"}, {"sha": "b2448774ae9d35d8544969e33b59430086b0b4db", "filename": "tests/ui/parser/missing-closing-angle-bracket-eq-constraint.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3574b1a69aebccbafc49096257317bb322c67025/tests%2Fui%2Fparser%2Fmissing-closing-angle-bracket-eq-constraint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3574b1a69aebccbafc49096257317bb322c67025/tests%2Fui%2Fparser%2Fmissing-closing-angle-bracket-eq-constraint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fmissing-closing-angle-bracket-eq-constraint.stderr?ref=3574b1a69aebccbafc49096257317bb322c67025", "patch": "@@ -39,26 +39,26 @@ help: you might have meant to end the type parameters here\n LL |   let v : Vec<'a> = vec![];\n    |                 +\n \n-error[E0282]: type annotations needed for `Vec<T>`\n+error[E0282]: type annotations needed for `Vec<_>`\n   --> $DIR/missing-closing-angle-bracket-eq-constraint.rs:7:7\n    |\n LL |   let v : Vec<(u32,_) = vec![];\n    |       ^\n    |\n-help: consider giving `v` an explicit type, where the type for type parameter `T` is specified\n+help: consider giving `v` an explicit type, where the placeholders `_` are specified\n    |\n-LL |   let v: Vec<T> : Vec<(u32,_) = vec![];\n+LL |   let v: Vec<_> : Vec<(u32,_) = vec![];\n    |        ++++++++\n \n-error[E0282]: type annotations needed for `Vec<T>`\n+error[E0282]: type annotations needed for `Vec<_>`\n   --> $DIR/missing-closing-angle-bracket-eq-constraint.rs:18:7\n    |\n LL |   let v : Vec<'a = vec![];\n    |       ^\n    |\n-help: consider giving `v` an explicit type, where the type for type parameter `T` is specified\n+help: consider giving `v` an explicit type, where the placeholders `_` are specified\n    |\n-LL |   let v: Vec<T> : Vec<'a = vec![];\n+LL |   let v: Vec<_> : Vec<'a = vec![];\n    |        ++++++++\n \n error: aborting due to 5 previous errors"}, {"sha": "09c4b2053b27e6dc6e65fe3491700db3c0bb4dc0", "filename": "tests/ui/type/type-check/cannot_infer_local_or_vec.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3574b1a69aebccbafc49096257317bb322c67025/tests%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3574b1a69aebccbafc49096257317bb322c67025/tests%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_vec.stderr?ref=3574b1a69aebccbafc49096257317bb322c67025", "patch": "@@ -1,12 +1,12 @@\n-error[E0282]: type annotations needed for `Vec<T>`\n+error[E0282]: type annotations needed for `Vec<_>`\n   --> $DIR/cannot_infer_local_or_vec.rs:2:9\n    |\n LL |     let x = vec![];\n    |         ^\n    |\n-help: consider giving `x` an explicit type, where the type for type parameter `T` is specified\n+help: consider giving `x` an explicit type, where the placeholders `_` are specified\n    |\n-LL |     let x: Vec<T> = vec![];\n+LL |     let x: Vec<_> = vec![];\n    |          ++++++++\n \n error: aborting due to previous error"}, {"sha": "1fa253052e6495e76550acacb53b426d9fbc32e0", "filename": "tests/ui/type/type-check/cannot_infer_local_or_vec_in_tuples.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3574b1a69aebccbafc49096257317bb322c67025/tests%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_vec_in_tuples.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3574b1a69aebccbafc49096257317bb322c67025/tests%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_vec_in_tuples.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_vec_in_tuples.stderr?ref=3574b1a69aebccbafc49096257317bb322c67025", "patch": "@@ -1,12 +1,12 @@\n-error[E0282]: type annotations needed for `(Vec<T>,)`\n+error[E0282]: type annotations needed for `(Vec<_>,)`\n   --> $DIR/cannot_infer_local_or_vec_in_tuples.rs:2:9\n    |\n LL |     let (x, ) = (vec![], );\n    |         ^^^^^   ---------- type must be known at this point\n    |\n-help: consider giving this pattern a type, where the type for type parameter `T` is specified\n+help: consider giving this pattern a type, where the placeholders `_` are specified\n    |\n-LL |     let (x, ): (Vec<T>,) = (vec![], );\n+LL |     let (x, ): (Vec<_>,) = (vec![], );\n    |              +++++++++++\n \n error: aborting due to previous error"}]}