{"sha": "b259512c5783f1ebda367a3094aecc5f9b7da7fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyNTk1MTJjNTc4M2YxZWJkYTM2N2EzMDk0YWVjYzVmOWI3ZGE3ZmQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-17T15:36:07Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-17T15:36:07Z"}, "message": "bump for ENABLE_PTR_TRACKING_HOOKS, and remove some dead code", "tree": {"sha": "04e4192f34b9bc1463528c915243221db37e44cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04e4192f34b9bc1463528c915243221db37e44cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b259512c5783f1ebda367a3094aecc5f9b7da7fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b259512c5783f1ebda367a3094aecc5f9b7da7fd", "html_url": "https://github.com/rust-lang/rust/commit/b259512c5783f1ebda367a3094aecc5f9b7da7fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b259512c5783f1ebda367a3094aecc5f9b7da7fd/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1907782b64c36f41802a41f1f784f877870293ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/1907782b64c36f41802a41f1f784f877870293ff", "html_url": "https://github.com/rust-lang/rust/commit/1907782b64c36f41802a41f1f784f877870293ff"}], "stats": {"total": 44, "additions": 2, "deletions": 42}, "files": [{"sha": "1ff29828dab4958c1b099cc62e7bf2426394caa0", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b259512c5783f1ebda367a3094aecc5f9b7da7fd/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b259512c5783f1ebda367a3094aecc5f9b7da7fd/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=b259512c5783f1ebda367a3094aecc5f9b7da7fd", "patch": "@@ -264,8 +264,10 @@ type MiriEvalContext<'a, 'mir, 'tcx> = EvalContext<'a, 'mir, 'tcx, Evaluator<'tc\n \n impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for Evaluator<'tcx> {\n     type MemoryKinds = MiriMemoryKind;\n+\n     type AllocExtra = stacked_borrows::Stacks;\n     type PointerTag = Borrow;\n+    const ENABLE_PTR_TRACKING_HOOKS: bool = true;\n \n     type MemoryMap = MonoHashMap<AllocId, (MemoryKind<MiriMemoryKind>, Allocation<Borrow, Self::AllocExtra>)>;\n \n@@ -433,22 +435,6 @@ impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for Evaluator<'tcx> {\n         alloc.extra.memory_deallocated(ptr)\n     }\n \n-    /*/// Hook for when a reference is cast to a raw pointer\n-    #[inline(always)]\n-    fn ref_to_raw_cast(\n-        ecx: &mut EvalContext<'a, 'mir, 'tcx, Self>,\n-        ptr: Pointer<Borrow>,\n-        ptr_ty: Ty<'tcx>,\n-        size: Size,\n-    ) -> EvalResult<'tcx> {\n-        if !ecx.machine.validate {\n-            // No tracking.\n-            Ok(())\n-        } else {\n-            ecx.ref_to_raw_cast(ptr, ptr_ty, size)\n-        }\n-    }*/\n-\n     #[inline(always)]\n     fn tag_reference(\n         ecx: &mut EvalContext<'a, 'mir, 'tcx, Self>,"}, {"sha": "19d5c723d403bcf370d1e97aeb6185d4a12171b2", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b259512c5783f1ebda367a3094aecc5f9b7da7fd/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b259512c5783f1ebda367a3094aecc5f9b7da7fd/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=b259512c5783f1ebda367a3094aecc5f9b7da7fd", "patch": "@@ -253,13 +253,6 @@ pub trait EvalContextExt<'tcx> {\n         ptr: Pointer<Borrow>,\n         ptr_ty: Ty<'tcx>,\n     ) -> EvalResult<'tcx, Borrow>;\n-\n-    fn ref_to_raw_cast(\n-        &mut self,\n-        ptr: Pointer<Borrow>,\n-        ptr_ty: Ty<'tcx>,\n-        size: Size,\n-    ) -> EvalResult<'tcx>;\n }\n \n impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'a, 'mir, 'tcx> {\n@@ -311,23 +304,4 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'a, 'mir, '\n             ptr.tag\n         })\n     }\n-\n-    fn ref_to_raw_cast(\n-        &mut self,\n-        ptr: Pointer<Borrow>,\n-        _ptr_ty: Ty<'tcx>,\n-        size: Size,\n-    ) -> EvalResult<'tcx> {\n-        trace!(\"ref_to_raw_cast: Escaping {:?}\", ptr);\n-\n-        // Make sure this reference is not dangling or so\n-        self.memory.check_bounds(ptr, size, false)?;\n-\n-        // Update the stacks.  We cannot use `get_mut` becuse this might be immutable\n-        // memory.\n-        let alloc = self.memory.get(ptr.alloc_id).expect(\"We checked that the ptr is fine!\");\n-        alloc.extra.reborrow(ptr, size, Borrow::Mut(Mut::Raw))?;\n-\n-        Ok(())\n-    }\n }"}]}