{"sha": "746091c61068067695ba0f910651a4b4d97d10b7", "node_id": "C_kwDOAAsO6NoAKDc0NjA5MWM2MTA2ODA2NzY5NWJhMGY5MTA2NTFhNGI0ZDk3ZDEwYjc", "commit": {"author": {"name": "Jakob Degen", "email": "jakob@degen.com", "date": "2021-11-12T21:39:44Z"}, "committer": {"name": "Jakob Degen", "email": "jakob@degen.com", "date": "2021-11-13T19:47:17Z"}, "message": "Recurse through query system when checking ADT drop types, hopefully improving perf", "tree": {"sha": "cde983c7514d31a16858e78f5e5d7d4f126d6bce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cde983c7514d31a16858e78f5e5d7d4f126d6bce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/746091c61068067695ba0f910651a4b4d97d10b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/746091c61068067695ba0f910651a4b4d97d10b7", "html_url": "https://github.com/rust-lang/rust/commit/746091c61068067695ba0f910651a4b4d97d10b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/746091c61068067695ba0f910651a4b4d97d10b7/comments", "author": {"login": "JakobDegen", "id": 51179609, "node_id": "MDQ6VXNlcjUxMTc5NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/51179609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JakobDegen", "html_url": "https://github.com/JakobDegen", "followers_url": "https://api.github.com/users/JakobDegen/followers", "following_url": "https://api.github.com/users/JakobDegen/following{/other_user}", "gists_url": "https://api.github.com/users/JakobDegen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JakobDegen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JakobDegen/subscriptions", "organizations_url": "https://api.github.com/users/JakobDegen/orgs", "repos_url": "https://api.github.com/users/JakobDegen/repos", "events_url": "https://api.github.com/users/JakobDegen/events{/privacy}", "received_events_url": "https://api.github.com/users/JakobDegen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JakobDegen", "id": 51179609, "node_id": "MDQ6VXNlcjUxMTc5NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/51179609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JakobDegen", "html_url": "https://github.com/JakobDegen", "followers_url": "https://api.github.com/users/JakobDegen/followers", "following_url": "https://api.github.com/users/JakobDegen/following{/other_user}", "gists_url": "https://api.github.com/users/JakobDegen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JakobDegen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JakobDegen/subscriptions", "organizations_url": "https://api.github.com/users/JakobDegen/orgs", "repos_url": "https://api.github.com/users/JakobDegen/repos", "events_url": "https://api.github.com/users/JakobDegen/events{/privacy}", "received_events_url": "https://api.github.com/users/JakobDegen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d71ba74f0d51459ef10f2b73400c013c7a12d828", "url": "https://api.github.com/repos/rust-lang/rust/commits/d71ba74f0d51459ef10f2b73400c013c7a12d828", "html_url": "https://github.com/rust-lang/rust/commit/d71ba74f0d51459ef10f2b73400c013c7a12d828"}], "stats": {"total": 84, "additions": 61, "deletions": 23}, "files": [{"sha": "595b623b02078078f2348ecf5b8119b1c3080533", "filename": "compiler/rustc_ty_utils/src/needs_drop.rs", "status": "modified", "additions": 61, "deletions": 23, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/746091c61068067695ba0f910651a4b4d97d10b7/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/746091c61068067695ba0f910651a4b4d97d10b7/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs?ref=746091c61068067695ba0f910651a4b4d97d10b7", "patch": "@@ -17,7 +17,8 @@ fn needs_drop_raw<'tcx>(tcx: TyCtxt<'tcx>, query: ty::ParamEnvAnd<'tcx, Ty<'tcx>\n     // needs drop.\n     let adt_has_dtor =\n         |adt_def: &ty::AdtDef| adt_def.destructor(tcx).map(|_| DtorType::Significant);\n-    let res = drop_tys_helper(tcx, query.value, query.param_env, adt_has_dtor).next().is_some();\n+    let res =\n+        drop_tys_helper(tcx, query.value, query.param_env, adt_has_dtor, false).next().is_some();\n \n     debug!(\"needs_drop_raw({:?}) = {:?}\", query, res);\n     res\n@@ -27,10 +28,15 @@ fn has_significant_drop_raw<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     query: ty::ParamEnvAnd<'tcx, Ty<'tcx>>,\n ) -> bool {\n-    let res =\n-        drop_tys_helper(tcx, query.value, query.param_env, adt_consider_insignificant_dtor(tcx))\n-            .next()\n-            .is_some();\n+    let res = drop_tys_helper(\n+        tcx,\n+        query.value,\n+        query.param_env,\n+        adt_consider_insignificant_dtor(tcx),\n+        true,\n+    )\n+    .next()\n+    .is_some();\n     debug!(\"has_significant_drop_raw({:?}) = {:?}\", query, res);\n     res\n }\n@@ -141,9 +147,9 @@ where\n                             Ok(tys) => tys,\n                         };\n                         for required_ty in tys {\n-                            let subst_ty =\n+                            let required =\n                                 tcx.normalize_erasing_regions(self.param_env, required_ty);\n-                            queue_type(self, subst_ty);\n+                            queue_type(self, required);\n                         }\n                     }\n                     ty::Array(..) | ty::Opaque(..) | ty::Projection(..) | ty::Param(_) => {\n@@ -186,39 +192,67 @@ fn drop_tys_helper<'tcx>(\n     ty: Ty<'tcx>,\n     param_env: rustc_middle::ty::ParamEnv<'tcx>,\n     adt_has_dtor: impl Fn(&ty::AdtDef) -> Option<DtorType>,\n+    only_significant: bool,\n ) -> impl Iterator<Item = NeedsDropResult<Ty<'tcx>>> {\n+    fn with_query_cache<'tcx>(\n+        tcx: TyCtxt<'tcx>,\n+        iter: impl IntoIterator<Item = Ty<'tcx>>,\n+        only_significant: bool,\n+    ) -> NeedsDropResult<Vec<Ty<'tcx>>> {\n+        iter.into_iter().try_fold(Vec::new(), |mut vec, subty| {\n+            match subty.kind() {\n+                ty::Adt(adt_id, subst) => {\n+                    for subty in if only_significant {\n+                        tcx.adt_significant_drop_tys(adt_id.did)?\n+                    } else {\n+                        tcx.adt_drop_tys(adt_id.did)?\n+                    } {\n+                        vec.push(subty.subst(tcx, subst));\n+                    }\n+                }\n+                _ => vec.push(subty),\n+            };\n+            Ok(vec)\n+        })\n+    }\n+\n     let adt_components = move |adt_def: &ty::AdtDef, substs: SubstsRef<'tcx>| {\n         if adt_def.is_manually_drop() {\n             debug!(\"drop_tys_helper: `{:?}` is manually drop\", adt_def);\n-            return Ok(Vec::new().into_iter());\n+            Ok(Vec::new())\n         } else if let Some(dtor_info) = adt_has_dtor(adt_def) {\n             match dtor_info {\n                 DtorType::Significant => {\n                     debug!(\"drop_tys_helper: `{:?}` implements `Drop`\", adt_def);\n-                    return Err(AlwaysRequiresDrop);\n+                    Err(AlwaysRequiresDrop)\n                 }\n                 DtorType::Insignificant => {\n                     debug!(\"drop_tys_helper: `{:?}` drop is insignificant\", adt_def);\n \n                     // Since the destructor is insignificant, we just want to make sure all of\n                     // the passed in type parameters are also insignificant.\n                     // Eg: Vec<T> dtor is insignificant when T=i32 but significant when T=Mutex.\n-                    return Ok(substs.types().collect::<Vec<Ty<'_>>>().into_iter());\n+                    with_query_cache(tcx, substs.types(), only_significant)\n                 }\n             }\n         } else if adt_def.is_union() {\n             debug!(\"drop_tys_helper: `{:?}` is a union\", adt_def);\n-            return Ok(Vec::new().into_iter());\n+            Ok(Vec::new())\n+        } else {\n+            with_query_cache(\n+                tcx,\n+                adt_def.all_fields().map(|field| {\n+                    let r = tcx.type_of(field.did).subst(tcx, substs);\n+                    debug!(\n+                        \"drop_tys_helper: Subst into {:?} with {:?} gettng {:?}\",\n+                        field, substs, r\n+                    );\n+                    r\n+                }),\n+                only_significant,\n+            )\n         }\n-        Ok(adt_def\n-            .all_fields()\n-            .map(|field| {\n-                let r = tcx.type_of(field.did).subst(tcx, substs);\n-                debug!(\"drop_tys_helper: Subst into {:?} with {:?} gettng {:?}\", field, substs, r);\n-                r\n-            })\n-            .collect::<Vec<_>>()\n-            .into_iter())\n+        .map(|v| v.into_iter())\n     };\n \n     NeedsDropTypes::new(tcx, param_env, ty, adt_components)\n@@ -252,20 +286,24 @@ fn adt_drop_tys(tcx: TyCtxt<'_>, def_id: DefId) -> Result<&ty::List<Ty<'_>>, Alw\n     // significant.\n     let adt_has_dtor =\n         |adt_def: &ty::AdtDef| adt_def.destructor(tcx).map(|_| DtorType::Significant);\n-    drop_tys_helper(tcx, tcx.type_of(def_id), tcx.param_env(def_id), adt_has_dtor)\n+    // `tcx.type_of(def_id)` identical to `tcx.make_adt(def, identity_substs)`\n+    drop_tys_helper(tcx, tcx.type_of(def_id), tcx.param_env(def_id), adt_has_dtor, false)\n         .collect::<Result<Vec<_>, _>>()\n         .map(|components| tcx.intern_type_list(&components))\n }\n-\n+// If `def_id` refers to a generic ADT, the queries above and below act as if they had been handed\n+// a `tcx.make_ty(def, identity_substs)` and as such it is legal to substitue the generic parameters\n+// of the ADT into the outputted `ty`s.\n fn adt_significant_drop_tys(\n     tcx: TyCtxt<'_>,\n     def_id: DefId,\n ) -> Result<&ty::List<Ty<'_>>, AlwaysRequiresDrop> {\n     drop_tys_helper(\n         tcx,\n-        tcx.type_of(def_id),\n+        tcx.type_of(def_id), // identical to `tcx.make_adt(def, identity_substs)`\n         tcx.param_env(def_id),\n         adt_consider_insignificant_dtor(tcx),\n+        true,\n     )\n     .collect::<Result<Vec<_>, _>>()\n     .map(|components| tcx.intern_type_list(&components))"}]}