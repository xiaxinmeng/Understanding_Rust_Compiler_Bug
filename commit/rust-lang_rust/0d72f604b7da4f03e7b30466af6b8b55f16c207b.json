{"sha": "0d72f604b7da4f03e7b30466af6b8b55f16c207b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkNzJmNjA0YjdkYTRmMDNlN2IzMDQ2NmFmNmI4YjU1ZjE2YzIwN2I=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-08-17T22:41:53Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-08-21T02:05:03Z"}, "message": "iterator: add a `range_inclusive` function\n\nCloses #6242", "tree": {"sha": "fe7fa56b76da85f04b5e82956126352a074906a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe7fa56b76da85f04b5e82956126352a074906a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d72f604b7da4f03e7b30466af6b8b55f16c207b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d72f604b7da4f03e7b30466af6b8b55f16c207b", "html_url": "https://github.com/rust-lang/rust/commit/0d72f604b7da4f03e7b30466af6b8b55f16c207b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d72f604b7da4f03e7b30466af6b8b55f16c207b/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2bc999a63693e668b2d0da311bc5aa74cd73da3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bc999a63693e668b2d0da311bc5aa74cd73da3e", "html_url": "https://github.com/rust-lang/rust/commit/2bc999a63693e668b2d0da311bc5aa74cd73da3e"}], "stats": {"total": 52, "additions": 52, "deletions": 0}, "files": [{"sha": "554913ab5ec196d9fb6a7147daecb41a93ccda3a", "filename": "src/libstd/iterator.rs", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/0d72f604b7da4f03e7b30466af6b8b55f16c207b/src%2Flibstd%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d72f604b7da4f03e7b30466af6b8b55f16c207b/src%2Flibstd%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiterator.rs?ref=0d72f604b7da4f03e7b30466af6b8b55f16c207b", "patch": "@@ -1522,6 +1522,52 @@ impl<A: Sub<A, A> + Integer + Ord + Clone> DoubleEndedIterator<A> for Range<A> {\n     }\n }\n \n+/// A range of numbers from [0, N]\n+#[deriving(Clone, DeepClone)]\n+pub struct RangeInclusive<A> {\n+    priv range: Range<A>,\n+    priv done: bool\n+}\n+\n+/// Return an iterator over the range [start, stop]\n+#[inline]\n+pub fn range_inclusive<A: Add<A, A> + Ord + Clone + One>(start: A, stop: A) -> RangeInclusive<A> {\n+    RangeInclusive{range: range(start, stop), done: false}\n+}\n+\n+impl<A: Add<A, A> + Ord + Clone> Iterator<A> for RangeInclusive<A> {\n+    #[inline]\n+    fn next(&mut self) -> Option<A> {\n+        match self.range.next() {\n+            Some(x) => Some(x),\n+            None => {\n+                if self.done {\n+                    None\n+                } else {\n+                    self.done = true;\n+                    Some(self.range.stop.clone())\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+impl<A: Sub<A, A> + Integer + Ord + Clone> DoubleEndedIterator<A> for RangeInclusive<A> {\n+    #[inline]\n+    fn next_back(&mut self) -> Option<A> {\n+        if self.range.stop > self.range.state {\n+            let result = self.range.stop.clone();\n+            self.range.stop = self.range.stop - self.range.one;\n+            Some(result)\n+        } else if self.done {\n+            None\n+        } else {\n+            self.done = true;\n+            Some(self.range.stop.clone())\n+        }\n+    }\n+}\n+\n impl<A: Add<A, A> + Clone> Iterator<A> for Counter<A> {\n     #[inline]\n     fn next(&mut self) -> Option<A> {\n@@ -2286,4 +2332,10 @@ mod tests {\n             fail!(\"unreachable\");\n         }\n     }\n+\n+    #[test]\n+    fn test_range_inclusive() {\n+        assert_eq!(range_inclusive(0i, 5).collect::<~[int]>(), ~[0i, 1, 2, 3, 4, 5]);\n+        assert_eq!(range_inclusive(0i, 5).invert().collect::<~[int]>(), ~[5i, 4, 3, 2, 1, 0]);\n+    }\n }"}]}