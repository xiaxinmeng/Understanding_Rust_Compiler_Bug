{"sha": "d08600b189eeb2e61879b44a07f9fdc33fa82689", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwODYwMGIxODllZWIyZTYxODc5YjQ0YTA3ZjlmZGMzM2ZhODI2ODk=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-17T22:59:20Z"}, "committer": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-12-19T07:35:52Z"}, "message": "std: Move the panic flag to its own thread local\n\nThis flag is somewhat tied to the `unwind` module rather than the `thread_info`\nmodule, so this commit moves it into that module as well as allowing the same OS\nthread to call `unwind::try` multiple times. Previously once a thread panicked\nits panic flag was never reset, even after exiting the panic handler.", "tree": {"sha": "274743c02df19bff0de04f5c9098f8c280d29c23", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/274743c02df19bff0de04f5c9098f8c280d29c23"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d08600b189eeb2e61879b44a07f9fdc33fa82689", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d08600b189eeb2e61879b44a07f9fdc33fa82689", "html_url": "https://github.com/rust-lang/rust/commit/d08600b189eeb2e61879b44a07f9fdc33fa82689", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d08600b189eeb2e61879b44a07f9fdc33fa82689/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5759cff48e66bcf2bf2cf821211bdf683292d8f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/5759cff48e66bcf2bf2cf821211bdf683292d8f3", "html_url": "https://github.com/rust-lang/rust/commit/5759cff48e66bcf2bf2cf821211bdf683292d8f3"}], "stats": {"total": 48, "additions": 21, "deletions": 27}, "files": [{"sha": "8e1e3dc4af92231c86f5de7a3ce135ffe7876f9e", "filename": "src/libstd/failure.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d08600b189eeb2e61879b44a07f9fdc33fa82689/src%2Flibstd%2Ffailure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08600b189eeb2e61879b44a07f9fdc33fa82689/src%2Flibstd%2Ffailure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffailure.rs?ref=d08600b189eeb2e61879b44a07f9fdc33fa82689", "patch": "@@ -10,21 +10,15 @@\n \n #![experimental]\n \n-use alloc::boxed::Box;\n+use prelude::*;\n+\n use any::{Any, AnyRefExt};\n use cell::RefCell;\n use fmt;\n-use io::{Writer, IoResult};\n-use kinds::Send;\n-use option::Option;\n-use option::Option::{Some, None};\n-use result::Result::Ok;\n-use rt::backtrace;\n+use io::IoResult;\n+use rt::{backtrace, unwind};\n use rt::util::{Stderr, Stdio};\n-use str::Str;\n-use string::String;\n use thread::Thread;\n-use sys_common::thread_info;\n \n // Defined in this module instead of io::stdio so that the unwinding\n thread_local! {\n@@ -80,7 +74,7 @@ pub fn on_fail(obj: &(Any+Send), file: &'static str, line: uint) {\n \n     // If this is a double panic, make sure that we printed a backtrace\n     // for this panic.\n-    if thread_info::panicking() && !backtrace::log_enabled() {\n+    if unwind::panicking() && !backtrace::log_enabled() {\n         let _ = backtrace::write(&mut err);\n     }\n }"}, {"sha": "9f34a72f807793091caa08500d1b507babbbf7b5", "filename": "src/libstd/rt/unwind.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d08600b189eeb2e61879b44a07f9fdc33fa82689/src%2Flibstd%2Frt%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08600b189eeb2e61879b44a07f9fdc33fa82689/src%2Flibstd%2Frt%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Funwind.rs?ref=d08600b189eeb2e61879b44a07f9fdc33fa82689", "patch": "@@ -60,6 +60,7 @@\n use prelude::*;\n \n use any::Any;\n+use cell::Cell;\n use cmp;\n use failure;\n use fmt;\n@@ -69,7 +70,6 @@ use mem;\n use sync::atomic;\n use sync::{Once, ONCE_INIT};\n \n-use sys_common::thread_info;\n use rt::libunwind as uw;\n \n struct Exception {\n@@ -94,6 +94,8 @@ static CALLBACKS: [atomic::AtomicUint, ..MAX_CALLBACKS] =\n          atomic::INIT_ATOMIC_UINT, atomic::INIT_ATOMIC_UINT];\n static CALLBACK_CNT: atomic::AtomicUint = atomic::INIT_ATOMIC_UINT;\n \n+thread_local!(static PANICKING: Cell<bool> = Cell::new(false))\n+\n /// Invoke a closure, capturing the cause of panic if one occurs.\n ///\n /// This function will return `None` if the closure did not panic, and will\n@@ -116,7 +118,11 @@ static CALLBACK_CNT: atomic::AtomicUint = atomic::INIT_ATOMIC_UINT;\n ///   run.\n pub unsafe fn try<F: FnOnce()>(f: F) -> Result<(), Box<Any + Send>> {\n     let mut f = Some(f);\n+\n+    let prev = PANICKING.with(|s| s.get());\n+    PANICKING.with(|s| s.set(false));\n     let ep = rust_try(try_fn::<F>, &mut f as *mut _ as *mut c_void);\n+    PANICKING.with(|s| s.set(prev));\n     return if ep.is_null() {\n         Ok(())\n     } else {\n@@ -146,6 +152,11 @@ pub unsafe fn try<F: FnOnce()>(f: F) -> Result<(), Box<Any + Send>> {\n     }\n }\n \n+/// Test if the current thread is currently panicking.\n+pub fn panicking() -> bool {\n+    PANICKING.with(|s| s.get())\n+}\n+\n // An uninlined, unmangled function upon which to slap yer breakpoints\n #[inline(never)]\n #[no_mangle]\n@@ -561,15 +572,15 @@ fn begin_unwind_inner(msg: Box<Any + Send>, file_line: &(&'static str, uint)) ->\n \n     // Now that we've run all the necessary unwind callbacks, we actually\n     // perform the unwinding.\n-    if thread_info::panicking() {\n+    if panicking() {\n         // If a thread panics while it's already unwinding then we\n         // have limited options. Currently our preference is to\n         // just abort. In the future we may consider resuming\n         // unwinding or otherwise exiting the task cleanly.\n-        rterrln!(\"task failed during unwinding. aborting.\");\n+        rterrln!(\"thread panicked while panicking. aborting.\");\n         unsafe { intrinsics::abort() }\n     }\n-    thread_info::set_unwinding(true);\n+    PANICKING.with(|s| s.set(true));\n     rust_panic(msg);\n }\n "}, {"sha": "0519bc56f0a81a42d1a902c172f7e804816df916", "filename": "src/libstd/sys/common/thread_info.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d08600b189eeb2e61879b44a07f9fdc33fa82689/src%2Flibstd%2Fsys%2Fcommon%2Fthread_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08600b189eeb2e61879b44a07f9fdc33fa82689/src%2Flibstd%2Fsys%2Fcommon%2Fthread_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fthread_info.rs?ref=d08600b189eeb2e61879b44a07f9fdc33fa82689", "patch": "@@ -20,7 +20,6 @@ struct ThreadInfo {\n     // hence this is optional.\n     stack_bounds: (uint, uint),\n     stack_guard: uint,\n-    unwinding: bool,\n     thread: Thread,\n }\n \n@@ -38,7 +37,6 @@ impl ThreadInfo {\n                 *c.borrow_mut() = Some(ThreadInfo {\n                     stack_bounds: (0, 0),\n                     stack_guard: 0,\n-                    unwinding: false,\n                     thread: NewThread::new(None),\n                 })\n             }\n@@ -51,24 +49,15 @@ pub fn current_thread() -> Thread {\n     ThreadInfo::with(|info| info.thread.clone())\n }\n \n-pub fn panicking() -> bool {\n-    ThreadInfo::with(|info| info.unwinding)\n-}\n-\n pub fn stack_guard() -> uint {\n     ThreadInfo::with(|info| info.stack_guard)\n }\n \n-pub fn set_unwinding(unwinding: bool) {\n-    ThreadInfo::with(|info| info.unwinding = unwinding)\n-}\n-\n pub fn set(stack_bounds: (uint, uint), stack_guard: uint, thread: Thread) {\n     THREAD_INFO.with(|c| assert!(c.borrow().is_none()));\n     THREAD_INFO.with(move |c| *c.borrow_mut() = Some(ThreadInfo{\n         stack_bounds: stack_bounds,\n         stack_guard: stack_guard,\n-        unwinding: false,\n         thread: thread,\n     }));\n }"}, {"sha": "8ef53a22aeb04c765f2ae6ecd2165df40ae054eb", "filename": "src/libstd/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d08600b189eeb2e61879b44a07f9fdc33fa82689/src%2Flibstd%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08600b189eeb2e61879b44a07f9fdc33fa82689/src%2Flibstd%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread.rs?ref=d08600b189eeb2e61879b44a07f9fdc33fa82689", "patch": "@@ -327,7 +327,7 @@ impl Thread {\n \n     /// Determines whether the current thread is panicking.\n     pub fn panicking() -> bool {\n-        thread_info::panicking()\n+        unwind::panicking()\n     }\n \n     /// Block unless or until the current thread's token is made available (may wake spuriously)."}]}