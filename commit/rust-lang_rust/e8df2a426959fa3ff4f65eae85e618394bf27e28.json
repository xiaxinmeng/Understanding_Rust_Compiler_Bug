{"sha": "e8df2a426959fa3ff4f65eae85e618394bf27e28", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4ZGYyYTQyNjk1OWZhM2ZmNGY2NWVhZTg1ZTYxODM5NGJmMjdlMjg=", "commit": {"author": {"name": "Canop", "email": "cano.petrole@gmail.com", "date": "2020-10-01T11:24:33Z"}, "committer": {"name": "Canop", "email": "cano.petrole@gmail.com", "date": "2020-10-23T09:41:19Z"}, "message": "remove `option.insert_with`\n\n`option.insert` covers both needs anyway, `insert_with` is\nredundant.", "tree": {"sha": "2bba9cda614fb65a42054e315e2b92dedce7985f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2bba9cda614fb65a42054e315e2b92dedce7985f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8df2a426959fa3ff4f65eae85e618394bf27e28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8df2a426959fa3ff4f65eae85e618394bf27e28", "html_url": "https://github.com/rust-lang/rust/commit/e8df2a426959fa3ff4f65eae85e618394bf27e28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8df2a426959fa3ff4f65eae85e618394bf27e28/comments", "author": {"login": "Canop", "id": 617006, "node_id": "MDQ6VXNlcjYxNzAwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/617006?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Canop", "html_url": "https://github.com/Canop", "followers_url": "https://api.github.com/users/Canop/followers", "following_url": "https://api.github.com/users/Canop/following{/other_user}", "gists_url": "https://api.github.com/users/Canop/gists{/gist_id}", "starred_url": "https://api.github.com/users/Canop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Canop/subscriptions", "organizations_url": "https://api.github.com/users/Canop/orgs", "repos_url": "https://api.github.com/users/Canop/repos", "events_url": "https://api.github.com/users/Canop/events{/privacy}", "received_events_url": "https://api.github.com/users/Canop/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Canop", "id": 617006, "node_id": "MDQ6VXNlcjYxNzAwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/617006?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Canop", "html_url": "https://github.com/Canop", "followers_url": "https://api.github.com/users/Canop/followers", "following_url": "https://api.github.com/users/Canop/following{/other_user}", "gists_url": "https://api.github.com/users/Canop/gists{/gist_id}", "starred_url": "https://api.github.com/users/Canop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Canop/subscriptions", "organizations_url": "https://api.github.com/users/Canop/orgs", "repos_url": "https://api.github.com/users/Canop/repos", "events_url": "https://api.github.com/users/Canop/events{/privacy}", "received_events_url": "https://api.github.com/users/Canop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b90e1762e6cb21baa504a27530b9aa404fbe3ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b90e1762e6cb21baa504a27530b9aa404fbe3ac", "html_url": "https://github.com/rust-lang/rust/commit/9b90e1762e6cb21baa504a27530b9aa404fbe3ac"}], "stats": {"total": 20, "additions": 1, "deletions": 19}, "files": [{"sha": "64541da300e8689dc0478d5827b0163f5bc0be61", "filename": "library/core/src/option.rs", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e8df2a426959fa3ff4f65eae85e618394bf27e28/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8df2a426959fa3ff4f65eae85e618394bf27e28/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=e8df2a426959fa3ff4f65eae85e618394bf27e28", "patch": "@@ -581,25 +581,7 @@ impl<T> Option<T> {\n     #[inline]\n     #[unstable(feature = \"option_insert\", reason = \"new API\", issue = \"none\")]\n     pub fn insert(&mut self, v: T) -> &mut T {\n-        self.insert_with(|| v)\n-    }\n-\n-    /// Inserts a value computed from `f` into the option, then returns a\n-    /// mutable reference to the contained value.\n-    ///\n-    /// # Example\n-    ///\n-    /// ```\n-    /// #![feature(option_insert)]\n-    ///\n-    /// let mut o = None;\n-    /// let v = o.insert_with(|| 3);\n-    /// assert_eq!(*v, 3);\n-    /// ```\n-    #[inline]\n-    #[unstable(feature = \"option_insert\", reason = \"new API\", issue = \"none\")]\n-    pub fn insert_with<F: FnOnce() -> T>(&mut self, f: F) -> &mut T {\n-        *self = Some(f());\n+        *self = Some(v);\n \n         match *self {\n             Some(ref mut v) => v,"}]}