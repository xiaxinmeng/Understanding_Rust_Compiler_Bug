{"sha": "ca92b5a23a9bb30a0741e9969e73d838eeba1ad1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhOTJiNWEyM2E5YmIzMGEwNzQxZTk5NjllNzNkODM4ZWViYTFhZDE=", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2021-04-15T07:33:55Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2021-05-06T18:37:45Z"}, "message": "Actually implement the feature in the compiler\n\nIncluding all the bootstrapping tweaks in the library.", "tree": {"sha": "b80837ad2e533efc5b4e7b4ca689f164b4defa70", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b80837ad2e533efc5b4e7b4ca689f164b4defa70"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca92b5a23a9bb30a0741e9969e73d838eeba1ad1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca92b5a23a9bb30a0741e9969e73d838eeba1ad1", "html_url": "https://github.com/rust-lang/rust/commit/ca92b5a23a9bb30a0741e9969e73d838eeba1ad1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca92b5a23a9bb30a0741e9969e73d838eeba1ad1/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c10eec3a1ca0a328f406f6b752eb0fd3a90dca91", "url": "https://api.github.com/repos/rust-lang/rust/commits/c10eec3a1ca0a328f406f6b752eb0fd3a90dca91", "html_url": "https://github.com/rust-lang/rust/commit/c10eec3a1ca0a328f406f6b752eb0fd3a90dca91"}], "stats": {"total": 195, "additions": 144, "deletions": 51}, "files": [{"sha": "11de954a1f460ef63b40e6ff78a9c2b6955ce7f9", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 26, "deletions": 32, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/ca92b5a23a9bb30a0741e9969e73d838eeba1ad1/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca92b5a23a9bb30a0741e9969e73d838eeba1ad1/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=ca92b5a23a9bb30a0741e9969e73d838eeba1ad1", "patch": "@@ -562,8 +562,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         )\n     }\n \n-    /// Desugar `try { <stmts>; <expr> }` into `{ <stmts>; ::std::ops::Try::from_ok(<expr>) }`,\n-    /// `try { <stmts>; }` into `{ <stmts>; ::std::ops::Try::from_ok(()) }`\n+    /// Desugar `try { <stmts>; <expr> }` into `{ <stmts>; ::std::ops::Try::from_output(<expr>) }`,\n+    /// `try { <stmts>; }` into `{ <stmts>; ::std::ops::Try::from_output(()) }`\n     /// and save the block id to use it as a break target for desugaring of the `?` operator.\n     fn lower_expr_try_block(&mut self, body: &Block) -> hir::ExprKind<'hir> {\n         self.with_catch_scope(body.id, |this| {\n@@ -592,9 +592,9 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             let ok_wrapped_span =\n                 this.mark_span_with_reason(DesugaringKind::TryBlock, tail_expr.span, None);\n \n-            // `::std::ops::Try::from_ok($tail_expr)`\n+            // `::std::ops::Try::from_output($tail_expr)`\n             block.expr = Some(this.wrap_in_try_constructor(\n-                hir::LangItem::TryFromOk,\n+                hir::LangItem::TryTraitFromOutput,\n                 try_span,\n                 tail_expr,\n                 ok_wrapped_span,\n@@ -1896,14 +1896,14 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             self.allow_try_trait.clone(),\n         );\n \n-        // `Try::into_result(<expr>)`\n+        // `Try::branch(<expr>)`\n         let scrutinee = {\n             // expand <expr>\n             let sub_expr = self.lower_expr_mut(sub_expr);\n \n             self.expr_call_lang_item_fn(\n                 unstable_span,\n-                hir::LangItem::TryIntoResult,\n+                hir::LangItem::TryTraitBranch,\n                 arena_vec![self; sub_expr],\n             )\n         };\n@@ -1921,8 +1921,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         };\n         let attrs = vec![attr];\n \n-        // `Ok(val) => #[allow(unreachable_code)] val,`\n-        let ok_arm = {\n+        // `ControlFlow::Continue(val) => #[allow(unreachable_code)] val,`\n+        let continue_arm = {\n             let val_ident = Ident::with_dummy_span(sym::val);\n             let (val_pat, val_pat_nid) = self.pat_ident(span, val_ident);\n             let val_expr = self.arena.alloc(self.expr_ident_with_attrs(\n@@ -1931,27 +1931,21 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 val_pat_nid,\n                 ThinVec::from(attrs.clone()),\n             ));\n-            let ok_pat = self.pat_ok(span, val_pat);\n-            self.arm(ok_pat, val_expr)\n+            let continue_pat = self.pat_cf_continue(unstable_span, val_pat);\n+            self.arm(continue_pat, val_expr)\n         };\n \n-        // `Err(err) => #[allow(unreachable_code)]\n-        //              return Try::from_error(From::from(err)),`\n-        let err_arm = {\n-            let err_ident = Ident::with_dummy_span(sym::err);\n-            let (err_local, err_local_nid) = self.pat_ident(try_span, err_ident);\n-            let from_expr = {\n-                let err_expr = self.expr_ident_mut(try_span, err_ident, err_local_nid);\n-                self.expr_call_lang_item_fn(\n-                    try_span,\n-                    hir::LangItem::FromFrom,\n-                    arena_vec![self; err_expr],\n-                )\n-            };\n-            let from_err_expr = self.wrap_in_try_constructor(\n-                hir::LangItem::TryFromError,\n-                unstable_span,\n-                from_expr,\n+        // `ControlFlow::Break(residual) =>\n+        //     #[allow(unreachable_code)]\n+        //     return Try::from_residual(residual),`\n+        let break_arm = {\n+            let residual_ident = Ident::with_dummy_span(sym::residual);\n+            let (residual_local, residual_local_nid) = self.pat_ident(try_span, residual_ident);\n+            let residual_expr = self.expr_ident_mut(try_span, residual_ident, residual_local_nid);\n+            let from_residual_expr = self.wrap_in_try_constructor(\n+                hir::LangItem::TryTraitFromResidual,\n+                try_span,\n+                self.arena.alloc(residual_expr),\n                 unstable_span,\n             );\n             let thin_attrs = ThinVec::from(attrs);\n@@ -1962,25 +1956,25 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     try_span,\n                     hir::ExprKind::Break(\n                         hir::Destination { label: None, target_id },\n-                        Some(from_err_expr),\n+                        Some(from_residual_expr),\n                     ),\n                     thin_attrs,\n                 ))\n             } else {\n                 self.arena.alloc(self.expr(\n                     try_span,\n-                    hir::ExprKind::Ret(Some(from_err_expr)),\n+                    hir::ExprKind::Ret(Some(from_residual_expr)),\n                     thin_attrs,\n                 ))\n             };\n \n-            let err_pat = self.pat_err(try_span, err_local);\n-            self.arm(err_pat, ret_expr)\n+            let break_pat = self.pat_cf_break(try_span, residual_local);\n+            self.arm(break_pat, ret_expr)\n         };\n \n         hir::ExprKind::Match(\n             scrutinee,\n-            arena_vec![self; err_arm, ok_arm],\n+            arena_vec![self; break_arm, continue_arm],\n             hir::MatchSource::TryDesugar,\n         )\n     }"}, {"sha": "2e5e92bfcce44351f44f736d0bd201368a5b84f3", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ca92b5a23a9bb30a0741e9969e73d838eeba1ad1/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca92b5a23a9bb30a0741e9969e73d838eeba1ad1/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=ca92b5a23a9bb30a0741e9969e73d838eeba1ad1", "patch": "@@ -331,7 +331,7 @@ pub fn lower_crate<'a, 'hir>(\n         lifetimes_to_define: Vec::new(),\n         is_collecting_in_band_lifetimes: false,\n         in_scope_lifetimes: Vec::new(),\n-        allow_try_trait: Some([sym::try_trait][..].into()),\n+        allow_try_trait: Some([sym::control_flow_enum, sym::try_trait_v2][..].into()),\n         allow_gen_future: Some([sym::gen_future][..].into()),\n     }\n     .lower_crate(krate)\n@@ -2479,14 +2479,14 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         self.pat(span, hir::PatKind::Lit(expr))\n     }\n \n-    fn pat_ok(&mut self, span: Span, pat: &'hir hir::Pat<'hir>) -> &'hir hir::Pat<'hir> {\n+    fn pat_cf_continue(&mut self, span: Span, pat: &'hir hir::Pat<'hir>) -> &'hir hir::Pat<'hir> {\n         let field = self.single_pat_field(span, pat);\n-        self.pat_lang_item_variant(span, hir::LangItem::ResultOk, field)\n+        self.pat_lang_item_variant(span, hir::LangItem::ControlFlowContinue, field)\n     }\n \n-    fn pat_err(&mut self, span: Span, pat: &'hir hir::Pat<'hir>) -> &'hir hir::Pat<'hir> {\n+    fn pat_cf_break(&mut self, span: Span, pat: &'hir hir::Pat<'hir>) -> &'hir hir::Pat<'hir> {\n         let field = self.single_pat_field(span, pat);\n-        self.pat_lang_item_variant(span, hir::LangItem::ResultErr, field)\n+        self.pat_lang_item_variant(span, hir::LangItem::ControlFlowBreak, field)\n     }\n \n     fn pat_some(&mut self, span: Span, pat: &'hir hir::Pat<'hir>) -> &'hir hir::Pat<'hir> {"}, {"sha": "40fcb60a86b1eef66fab478cbae6c4d06bb209d7", "filename": "compiler/rustc_hir/src/lang_items.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ca92b5a23a9bb30a0741e9969e73d838eeba1ad1/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca92b5a23a9bb30a0741e9969e73d838eeba1ad1/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs?ref=ca92b5a23a9bb30a0741e9969e73d838eeba1ad1", "patch": "@@ -308,12 +308,12 @@ language_item_table! {\n \n     Termination,             sym::termination,         termination,                Target::Trait;\n \n-    Try,                     kw::Try,                  try_trait,                  Target::Trait;\n+    Try,                     sym::Try,                 try_trait,                  Target::Trait;\n \n     // Language items from AST lowering\n-    TryFromError,            sym::from_error,          from_error_fn,              Target::Method(MethodKind::Trait { body: false });\n-    TryFromOk,               sym::from_ok,             from_ok_fn,                 Target::Method(MethodKind::Trait { body: false });\n-    TryIntoResult,           sym::into_result,         into_result_fn,             Target::Method(MethodKind::Trait { body: false });\n+    TryTraitFromResidual,    sym::from_residual,       from_residual_fn,           Target::Method(MethodKind::Trait { body: false });\n+    TryTraitFromOutput,      sym::from_output,         from_output_fn,             Target::Method(MethodKind::Trait { body: false });\n+    TryTraitBranch,          sym::branch,              branch_fn,                  Target::Method(MethodKind::Trait { body: false });\n \n     PollReady,               sym::Ready,               poll_ready_variant,         Target::Variant;\n     PollPending,             sym::Pending,             poll_pending_variant,       Target::Variant;\n@@ -331,6 +331,9 @@ language_item_table! {\n     ResultOk,                sym::Ok,                  result_ok_variant,          Target::Variant;\n     ResultErr,               sym::Err,                 result_err_variant,         Target::Variant;\n \n+    ControlFlowContinue,     sym::Continue,            cf_continue_variant,        Target::Variant;\n+    ControlFlowBreak,        sym::Break,               cf_break_variant,           Target::Variant;\n+\n     IntoIterIntoIter,        sym::into_iter,           into_iter_fn,               Target::Method(MethodKind::Trait { body: false });\n     IteratorNext,            sym::next,                next_fn,                    Target::Method(MethodKind::Trait { body: false});\n "}, {"sha": "615e1052d1951eaad6c3682b49ec0f65b924c812", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ca92b5a23a9bb30a0741e9969e73d838eeba1ad1/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca92b5a23a9bb30a0741e9969e73d838eeba1ad1/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=ca92b5a23a9bb30a0741e9969e73d838eeba1ad1", "patch": "@@ -130,10 +130,12 @@ symbols! {\n         BTreeSet,\n         BinaryHeap,\n         Borrow,\n+        Break,\n         C,\n         CString,\n         Center,\n         Clone,\n+        Continue,\n         Copy,\n         Count,\n         Debug,\n@@ -326,6 +328,7 @@ symbols! {\n         box_patterns,\n         box_syntax,\n         braced_empty_structs,\n+        branch,\n         breakpoint,\n         bridge,\n         bswap,\n@@ -410,6 +413,7 @@ symbols! {\n         constructor,\n         contents,\n         context,\n+        control_flow_enum,\n         convert,\n         copy,\n         copy_closures,\n@@ -510,7 +514,6 @@ symbols! {\n         env,\n         eq,\n         ermsb_target_feature,\n-        err,\n         exact_div,\n         except,\n         exchange_malloc,\n@@ -580,10 +583,10 @@ symbols! {\n         frem_fast,\n         from,\n         from_desugaring,\n-        from_error,\n         from_generator,\n         from_method,\n-        from_ok,\n+        from_output,\n+        from_residual,\n         from_size_align_unchecked,\n         from_trait,\n         from_usize,\n@@ -652,7 +655,6 @@ symbols! {\n         instruction_set,\n         intel,\n         into_iter,\n-        into_result,\n         into_trait,\n         intra_doc_pointers,\n         intrinsics,\n@@ -962,6 +964,7 @@ symbols! {\n         repr_packed,\n         repr_simd,\n         repr_transparent,\n+        residual,\n         result,\n         result_type,\n         rhs,\n@@ -1227,7 +1230,7 @@ symbols! {\n         try_blocks,\n         try_from_trait,\n         try_into_trait,\n-        try_trait,\n+        try_trait_v2,\n         tt,\n         tuple,\n         tuple_from_req,"}, {"sha": "c9c9d952392146f5ae3ac0a6774f7a5a439faa2a", "filename": "library/core/src/iter/adapters/peekable.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ca92b5a23a9bb30a0741e9969e73d838eeba1ad1/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fpeekable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca92b5a23a9bb30a0741e9969e73d838eeba1ad1/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fpeekable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fpeekable.rs?ref=ca92b5a23a9bb30a0741e9969e73d838eeba1ad1", "patch": "@@ -1,5 +1,5 @@\n use crate::iter::{adapters::SourceIter, FusedIterator, InPlaceIterable, TrustedLen};\n-use crate::ops::TryWhereOutputEquals;\n+use crate::ops::{ControlFlow, TryWhereOutputEquals};\n \n /// An iterator with a `peek()` that returns an optional reference to the next\n /// element.\n@@ -130,12 +130,35 @@ where\n     }\n \n     #[inline]\n+    #[cfg(not(bootstrap))]\n     fn try_rfold<B, F, R>(&mut self, init: B, mut f: F) -> R\n     where\n         Self: Sized,\n         F: FnMut(B, Self::Item) -> R,\n         R: TryWhereOutputEquals<B>,\n     {\n+        match self.peeked.take() {\n+            Some(None) => try { init },\n+            Some(Some(v)) => match self.iter.try_rfold(init, &mut f).branch() {\n+                ControlFlow::Continue(acc) => f(acc, v),\n+                ControlFlow::Break(r) => {\n+                    self.peeked = Some(Some(v));\n+                    R::from_residual(r)\n+                }\n+            },\n+            None => self.iter.try_rfold(init, f),\n+        }\n+    }\n+\n+    #[inline]\n+    #[cfg(bootstrap)]\n+    fn try_rfold<B, F, R>(&mut self, init: B, mut f: F) -> R\n+    where\n+        Self: Sized,\n+        F: FnMut(B, Self::Item) -> R,\n+        R: TryWhereOutputEquals<B>,\n+    {\n+        let _use_the_import: ControlFlow<()>;\n         match self.peeked.take() {\n             Some(None) => try { init },\n             Some(Some(v)) => match self.iter.try_rfold(init, &mut f).into_result() {"}, {"sha": "04315003dd7b24eccf6a6062bac2b5bfb0e6b556", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ca92b5a23a9bb30a0741e9969e73d838eeba1ad1/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca92b5a23a9bb30a0741e9969e73d838eeba1ad1/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=ca92b5a23a9bb30a0741e9969e73d838eeba1ad1", "patch": "@@ -2412,6 +2412,36 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[unstable(feature = \"try_find\", reason = \"new API\", issue = \"63178\")]\n+    #[cfg(not(bootstrap))]\n+    fn try_find<F, R, E>(&mut self, f: F) -> Result<Option<Self::Item>, E>\n+    where\n+        Self: Sized,\n+        F: FnMut(&Self::Item) -> R,\n+        R: TryWhereOutputEquals<bool>,\n+        // FIXME: This is a weird bound; the API should change\n+        R: crate::ops::TryV2<Residual = Result<crate::convert::Infallible, E>>,\n+    {\n+        #[inline]\n+        fn check<F, T, R, E>(mut f: F) -> impl FnMut((), T) -> ControlFlow<Result<T, E>>\n+        where\n+            F: FnMut(&T) -> R,\n+            R: TryWhereOutputEquals<bool>,\n+            R: crate::ops::TryV2<Residual = Result<crate::convert::Infallible, E>>,\n+        {\n+            move |(), x| match f(&x).branch() {\n+                ControlFlow::Continue(false) => ControlFlow::CONTINUE,\n+                ControlFlow::Continue(true) => ControlFlow::Break(Ok(x)),\n+                ControlFlow::Break(Err(x)) => ControlFlow::Break(Err(x)),\n+            }\n+        }\n+\n+        self.try_fold((), check(f)).break_value().transpose()\n+    }\n+\n+    /// We're bootstrapping.\n+    #[inline]\n+    #[unstable(feature = \"try_find\", reason = \"new API\", issue = \"63178\")]\n+    #[cfg(bootstrap)]\n     fn try_find<F, R>(&mut self, f: F) -> Result<Option<Self::Item>, R::Error>\n     where\n         Self: Sized,"}, {"sha": "238fcd447bd1c58dcf6fb710c0eabf7bf106a59b", "filename": "library/core/src/ops/control_flow.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ca92b5a23a9bb30a0741e9969e73d838eeba1ad1/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca92b5a23a9bb30a0741e9969e73d838eeba1ad1/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs?ref=ca92b5a23a9bb30a0741e9969e73d838eeba1ad1", "patch": "@@ -52,8 +52,10 @@ use crate::{convert, ops};\n #[derive(Debug, Clone, Copy, PartialEq)]\n pub enum ControlFlow<B, C = ()> {\n     /// Move on to the next phase of the operation as normal.\n+    #[cfg_attr(not(bootstrap), lang = \"Continue\")]\n     Continue(C),\n     /// Exit the operation without running subsequent phases.\n+    #[cfg_attr(not(bootstrap), lang = \"Break\")]\n     Break(B),\n     // Yes, the order of the variants doesn't match the type parameters.\n     // They're in this order so that `ControlFlow<A, B>` <-> `Result<B, A>`\n@@ -181,6 +183,7 @@ impl<B, C> ControlFlow<B, C> {\n     }\n }\n \n+#[cfg(bootstrap)]\n impl<R: ops::TryV1> ControlFlow<R, R::Ok> {\n     /// Create a `ControlFlow` from any type implementing `Try`.\n     #[unstable(feature = \"control_flow_enum\", reason = \"new API\", issue = \"75744\")]\n@@ -203,6 +206,29 @@ impl<R: ops::TryV1> ControlFlow<R, R::Ok> {\n     }\n }\n \n+#[cfg(not(bootstrap))]\n+impl<R: ops::TryV2> ControlFlow<R, R::Output> {\n+    /// Create a `ControlFlow` from any type implementing `Try`.\n+    #[unstable(feature = \"control_flow_enum\", reason = \"new API\", issue = \"75744\")]\n+    #[inline]\n+    pub fn from_try(r: R) -> Self {\n+        match R::branch(r) {\n+            ControlFlow::Continue(v) => ControlFlow::Continue(v),\n+            ControlFlow::Break(v) => ControlFlow::Break(R::from_residual(v)),\n+        }\n+    }\n+\n+    /// Convert a `ControlFlow` into any type implementing `Try`;\n+    #[unstable(feature = \"control_flow_enum\", reason = \"new API\", issue = \"75744\")]\n+    #[inline]\n+    pub fn into_try(self) -> R {\n+        match self {\n+            ControlFlow::Continue(v) => R::from_output(v),\n+            ControlFlow::Break(v) => v,\n+        }\n+    }\n+}\n+\n impl<B> ControlFlow<B, ()> {\n     /// It's frequently the case that there's no value needed with `Continue`,\n     /// so this provides a way to avoid typing `(())`, if you prefer it."}, {"sha": "426b45a925eda1ee3f59fc4ae85eedb7db12609f", "filename": "library/core/src/ops/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ca92b5a23a9bb30a0741e9969e73d838eeba1ad1/library%2Fcore%2Fsrc%2Fops%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca92b5a23a9bb30a0741e9969e73d838eeba1ad1/library%2Fcore%2Fsrc%2Fops%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fmod.rs?ref=ca92b5a23a9bb30a0741e9969e73d838eeba1ad1", "patch": "@@ -183,6 +183,7 @@ pub use self::range::{Range, RangeFrom, RangeFull, RangeTo};\n pub use self::range::{Bound, RangeBounds, RangeInclusive, RangeToInclusive};\n \n #[unstable(feature = \"try_trait\", issue = \"42327\")]\n+#[cfg(bootstrap)]\n pub use self::r#try::Try;\n \n #[unstable(feature = \"try_trait_transition\", reason = \"for bootstrap\", issue = \"none\")]\n@@ -191,6 +192,10 @@ pub use self::r#try::Try as TryV1;\n #[unstable(feature = \"try_trait_v2\", issue = \"84277\")]\n pub use self::try_trait::FromResidual;\n \n+#[unstable(feature = \"try_trait_v2\", issue = \"84277\")]\n+#[cfg(not(bootstrap))]\n+pub use self::try_trait::Try;\n+\n #[unstable(feature = \"try_trait_transition\", reason = \"for bootstrap\", issue = \"none\")]\n pub use self::try_trait::Try as TryV2;\n \n@@ -220,4 +225,9 @@ pub use self::control_flow::ControlFlow;\n /// foo::<Option<i32>, i32>();\n /// ```\n #[unstable(feature = \"try_trait_transition\", reason = \"for bootstrap\", issue = \"none\")]\n+#[cfg(not(bootstrap))]\n+pub trait TryWhereOutputEquals<T> = TryV2<Output = T>;\n+\n+#[unstable(feature = \"try_trait_transition\", reason = \"for bootstrap\", issue = \"none\")]\n+#[cfg(bootstrap)]\n pub trait TryWhereOutputEquals<T> = TryV1<Ok = T>;"}, {"sha": "18e2f951ce5a9cc1f31fca4fc8cbc1ca283bdee2", "filename": "library/core/src/ops/try.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ca92b5a23a9bb30a0741e9969e73d838eeba1ad1/library%2Fcore%2Fsrc%2Fops%2Ftry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca92b5a23a9bb30a0741e9969e73d838eeba1ad1/library%2Fcore%2Fsrc%2Fops%2Ftry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Ftry.rs?ref=ca92b5a23a9bb30a0741e9969e73d838eeba1ad1", "patch": "@@ -25,7 +25,7 @@\n     )\n )]\n #[doc(alias = \"?\")]\n-#[lang = \"try\"]\n+#[cfg_attr(bootstrap, lang = \"try\")]\n pub trait Try {\n     /// The type of this value when viewed as successful.\n     #[unstable(feature = \"try_trait\", issue = \"42327\")]\n@@ -43,19 +43,19 @@ pub trait Try {\n     /// in the return type of the enclosing scope (which must itself implement\n     /// `Try`). Specifically, the value `X::from_error(From::from(e))`\n     /// is returned, where `X` is the return type of the enclosing function.\n-    #[lang = \"into_result\"]\n+    #[cfg_attr(bootstrap, lang = \"into_result\")]\n     #[unstable(feature = \"try_trait\", issue = \"42327\")]\n     fn into_result(self) -> Result<Self::Ok, Self::Error>;\n \n     /// Wrap an error value to construct the composite result. For example,\n     /// `Result::Err(x)` and `Result::from_error(x)` are equivalent.\n-    #[lang = \"from_error\"]\n+    #[cfg_attr(bootstrap, lang = \"from_error\")]\n     #[unstable(feature = \"try_trait\", issue = \"42327\")]\n     fn from_error(v: Self::Error) -> Self;\n \n     /// Wrap an OK value to construct the composite result. For example,\n     /// `Result::Ok(x)` and `Result::from_ok(x)` are equivalent.\n-    #[lang = \"from_ok\"]\n+    #[cfg_attr(bootstrap, lang = \"from_ok\")]\n     #[unstable(feature = \"try_trait\", issue = \"42327\")]\n     fn from_ok(v: Self::Ok) -> Self;\n }"}, {"sha": "52a7608194700844a16c599f9cae9486b9b0f243", "filename": "library/core/src/ops/try_trait.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca92b5a23a9bb30a0741e9969e73d838eeba1ad1/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca92b5a23a9bb30a0741e9969e73d838eeba1ad1/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs?ref=ca92b5a23a9bb30a0741e9969e73d838eeba1ad1", "patch": "@@ -119,6 +119,7 @@ use crate::ops::ControlFlow;\n /// }\n /// ```\n #[unstable(feature = \"try_trait_v2\", issue = \"84277\")]\n+#[cfg_attr(not(bootstrap), lang = \"Try\")]\n pub trait Try: FromResidual {\n     /// The type of the value produced by `?` when *not* short-circuiting.\n     #[unstable(feature = \"try_trait_v2\", issue = \"84277\")]\n@@ -178,6 +179,7 @@ pub trait Try: FromResidual {\n     /// let r = std::iter::empty().try_fold(4, |_, ()| -> Option<_> { unreachable!() });\n     /// assert_eq!(r, Some(4));\n     /// ```\n+    #[cfg_attr(not(bootstrap), lang = \"from_output\")]\n     #[unstable(feature = \"try_trait_v2\", issue = \"84277\")]\n     fn from_output(output: Self::Output) -> Self;\n \n@@ -206,6 +208,7 @@ pub trait Try: FromResidual {\n     ///     ControlFlow::Break(ControlFlow::Break(3)),\n     /// );\n     /// ```\n+    #[cfg_attr(not(bootstrap), lang = \"branch\")]\n     #[unstable(feature = \"try_trait_v2\", issue = \"84277\")]\n     fn branch(self) -> ControlFlow<Self::Residual, Self::Output>;\n }\n@@ -238,6 +241,7 @@ pub trait FromResidual<R = <Self as Try>::Residual> {\n     ///     ControlFlow::Break(5),\n     /// );\n     /// ```\n+    #[cfg_attr(not(bootstrap), lang = \"from_residual\")]\n     #[unstable(feature = \"try_trait_v2\", issue = \"84277\")]\n     fn from_residual(residual: R) -> Self;\n }"}]}