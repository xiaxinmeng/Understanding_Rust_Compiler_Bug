{"sha": "01ed700640c36fef719027d8baec9ddb5ef04df5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxZWQ3MDA2NDBjMzZmZWY3MTkwMjdkOGJhZWM5ZGRiNWVmMDRkZjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-05-13T02:52:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-05-13T02:52:51Z"}, "message": "Auto merge of #33450 - SiegeLord:dep_info_no_analysis, r=nrc\n\nMake --emit dep-info work correctly with -Z no-analysis again.\n\nPreviously, it would attempt to resolve some external crates that weren't necessary for dep-info output.\n\nFixes #33231.", "tree": {"sha": "3b85c963e88c632ff9fbc1dad711375d495dfd8d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b85c963e88c632ff9fbc1dad711375d495dfd8d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01ed700640c36fef719027d8baec9ddb5ef04df5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01ed700640c36fef719027d8baec9ddb5ef04df5", "html_url": "https://github.com/rust-lang/rust/commit/01ed700640c36fef719027d8baec9ddb5ef04df5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01ed700640c36fef719027d8baec9ddb5ef04df5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ec5ce5e44823c29d4f641f764e53d57e8b28a6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ec5ce5e44823c29d4f641f764e53d57e8b28a6a", "html_url": "https://github.com/rust-lang/rust/commit/4ec5ce5e44823c29d4f641f764e53d57e8b28a6a"}, {"sha": "215b2603f1a4a1f82e8a454addf36f104742b147", "url": "https://api.github.com/repos/rust-lang/rust/commits/215b2603f1a4a1f82e8a454addf36f104742b147", "html_url": "https://github.com/rust-lang/rust/commit/215b2603f1a4a1f82e8a454addf36f104742b147"}], "stats": {"total": 142, "additions": 97, "deletions": 45}, "files": [{"sha": "6837c23e41467c1651f3453589b3915addad5d52", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 50, "deletions": 21, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/01ed700640c36fef719027d8baec9ddb5ef04df5/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01ed700640c36fef719027d8baec9ddb5ef04df5/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=01ed700640c36fef719027d8baec9ddb5ef04df5", "patch": "@@ -138,6 +138,19 @@ pub fn compile_input(sess: &Session,\n                                                                  &id),\n                                 Ok(()));\n \n+        write_out_deps(sess, &outputs, &id);\n+\n+        controller_entry_point!(after_write_deps,\n+                                sess,\n+                                CompileState::state_after_write_deps(input,\n+                                                                     sess,\n+                                                                     outdir,\n+                                                                     output,\n+                                                                     &cstore,\n+                                                                     &expanded_crate,\n+                                                                     &id),\n+                                Ok(()));\n+\n         let expanded_crate = assign_node_ids(sess, expanded_crate);\n         let dep_graph = DepGraph::new(sess.opts.build_dep_graph());\n \n@@ -173,25 +186,22 @@ pub fn compile_input(sess: &Session,\n                            \"indexing hir\",\n                            move || hir_map::map_crate(hir_forest, defs));\n \n-\n-        write_out_deps(sess, &outputs, &id);\n-\n         {\n             let _ignore = hir_map.dep_graph.in_ignore();\n-            controller_entry_point!(after_write_deps,\n+            controller_entry_point!(after_hir_lowering,\n                                     sess,\n-                                    CompileState::state_after_write_deps(input,\n-                                                                         sess,\n-                                                                         outdir,\n-                                                                         output,\n-                                                                         &arenas,\n-                                                                         &cstore,\n-                                                                         &hir_map,\n-                                                                         &analysis,\n-                                                                         &resolutions,\n-                                                                         &expanded_crate,\n-                                                                         &hir_map.krate(),\n-                                                                         &id),\n+                                    CompileState::state_after_hir_lowering(input,\n+                                                                  sess,\n+                                                                  outdir,\n+                                                                  output,\n+                                                                  &arenas,\n+                                                                  &cstore,\n+                                                                  &hir_map,\n+                                                                  &analysis,\n+                                                                  &resolutions,\n+                                                                  &expanded_crate,\n+                                                                  &hir_map.krate(),\n+                                                                  &id),\n                                     Ok(()));\n         }\n \n@@ -311,6 +321,7 @@ pub struct CompileController<'a> {\n     pub after_parse: PhaseController<'a>,\n     pub after_expand: PhaseController<'a>,\n     pub after_write_deps: PhaseController<'a>,\n+    pub after_hir_lowering: PhaseController<'a>,\n     pub after_analysis: PhaseController<'a>,\n     pub after_llvm: PhaseController<'a>,\n \n@@ -323,6 +334,7 @@ impl<'a> CompileController<'a> {\n             after_parse: PhaseController::basic(),\n             after_expand: PhaseController::basic(),\n             after_write_deps: PhaseController::basic(),\n+            after_hir_lowering: PhaseController::basic(),\n             after_analysis: PhaseController::basic(),\n             after_llvm: PhaseController::basic(),\n             make_glob_map: resolve::MakeGlobMap::No,\n@@ -433,15 +445,32 @@ impl<'a, 'b, 'ast, 'tcx> CompileState<'a, 'b, 'ast, 'tcx> {\n                               session: &'ast Session,\n                               out_dir: &'a Option<PathBuf>,\n                               out_file: &'a Option<PathBuf>,\n-                              arenas: &'ast ty::CtxtArenas<'ast>,\n                               cstore: &'a CStore,\n-                              hir_map: &'a hir_map::Map<'ast>,\n-                              analysis: &'a ty::CrateAnalysis,\n-                              resolutions: &'a Resolutions,\n                               krate: &'a ast::Crate,\n-                              hir_crate: &'a hir::Crate,\n                               crate_name: &'a str)\n                               -> CompileState<'a, 'b, 'ast, 'tcx> {\n+        CompileState {\n+            crate_name: Some(crate_name),\n+            cstore: Some(cstore),\n+            expanded_crate: Some(krate),\n+            out_file: out_file.as_ref().map(|s| &**s),\n+            ..CompileState::empty(input, session, out_dir)\n+        }\n+    }\n+\n+    fn state_after_hir_lowering(input: &'a Input,\n+                                session: &'ast Session,\n+                                out_dir: &'a Option<PathBuf>,\n+                                out_file: &'a Option<PathBuf>,\n+                                arenas: &'ast ty::CtxtArenas<'ast>,\n+                                cstore: &'a CStore,\n+                                hir_map: &'a hir_map::Map<'ast>,\n+                                analysis: &'a ty::CrateAnalysis,\n+                                resolutions: &'a Resolutions,\n+                                krate: &'a ast::Crate,\n+                                hir_crate: &'a hir::Crate,\n+                                crate_name: &'a str)\n+                                -> CompileState<'a, 'b, 'ast, 'tcx> {\n         CompileState {\n             crate_name: Some(crate_name),\n             arenas: Some(arenas),"}, {"sha": "2a4b30e016f28225ea469e5a11a95fb49ff786a2", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/01ed700640c36fef719027d8baec9ddb5ef04df5/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01ed700640c36fef719027d8baec9ddb5ef04df5/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=01ed700640c36fef719027d8baec9ddb5ef04df5", "patch": "@@ -461,23 +461,23 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n \n         if let Some((ppm, opt_uii)) = parse_pretty(sess, matches) {\n             if ppm.needs_ast_map(&opt_uii) {\n-                control.after_write_deps.stop = Compilation::Stop;\n+                control.after_hir_lowering.stop = Compilation::Stop;\n \n                 control.after_parse.callback = box move |state| {\n                     state.krate = Some(pretty::fold_crate(state.krate.take().unwrap(), ppm));\n                 };\n-                control.after_write_deps.callback = box move |state| {\n-                    pretty::print_after_write_deps(state.session,\n-                                                   state.ast_map.unwrap(),\n-                                                   state.analysis.unwrap(),\n-                                                   state.resolutions.unwrap(),\n-                                                   state.input,\n-                                                   &state.expanded_crate.take().unwrap(),\n-                                                   state.crate_name.unwrap(),\n-                                                   ppm,\n-                                                   state.arenas.unwrap(),\n-                                                   opt_uii.clone(),\n-                                                   state.out_file);\n+                control.after_hir_lowering.callback = box move |state| {\n+                    pretty::print_after_hir_lowering(state.session,\n+                                                     state.ast_map.unwrap(),\n+                                                     state.analysis.unwrap(),\n+                                                     state.resolutions.unwrap(),\n+                                                     state.input,\n+                                                     &state.expanded_crate.take().unwrap(),\n+                                                     state.crate_name.unwrap(),\n+                                                     ppm,\n+                                                     state.arenas.unwrap(),\n+                                                     opt_uii.clone(),\n+                                                     state.out_file);\n                 };\n             } else {\n                 control.after_parse.stop = Compilation::Stop;"}, {"sha": "9aae9f04c92cbe264a70e2fcde19cee12bb36fca", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/01ed700640c36fef719027d8baec9ddb5ef04df5/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01ed700640c36fef719027d8baec9ddb5ef04df5/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=01ed700640c36fef719027d8baec9ddb5ef04df5", "patch": "@@ -812,17 +812,17 @@ pub fn print_after_parsing(sess: &Session,\n     write_output(out, ofile);\n }\n \n-pub fn print_after_write_deps<'tcx, 'a: 'tcx>(sess: &'a Session,\n-                                              ast_map: &hir_map::Map<'tcx>,\n-                                              analysis: &ty::CrateAnalysis,\n-                                              resolutions: &Resolutions,\n-                                              input: &Input,\n-                                              krate: &ast::Crate,\n-                                              crate_name: &str,\n-                                              ppm: PpMode,\n-                                              arenas: &'tcx ty::CtxtArenas<'tcx>,\n-                                              opt_uii: Option<UserIdentifiedItem>,\n-                                              ofile: Option<&Path>) {\n+pub fn print_after_hir_lowering<'tcx, 'a: 'tcx>(sess: &'a Session,\n+                                                ast_map: &hir_map::Map<'tcx>,\n+                                                analysis: &ty::CrateAnalysis,\n+                                                resolutions: &Resolutions,\n+                                                input: &Input,\n+                                                krate: &ast::Crate,\n+                                                crate_name: &str,\n+                                                ppm: PpMode,\n+                                                arenas: &'tcx ty::CtxtArenas<'tcx>,\n+                                                opt_uii: Option<UserIdentifiedItem>,\n+                                                ofile: Option<&Path>) {\n     let dep_graph = DepGraph::new(false);\n     let _ignore = dep_graph.in_ignore();\n "}, {"sha": "5d2cfadfd020a76d8da90ad2f79742ba8b5cb416", "filename": "src/test/run-make/dep-info-no-analysis/Makefile", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/01ed700640c36fef719027d8baec9ddb5ef04df5/src%2Ftest%2Frun-make%2Fdep-info-no-analysis%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/01ed700640c36fef719027d8baec9ddb5ef04df5/src%2Ftest%2Frun-make%2Fdep-info-no-analysis%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fdep-info-no-analysis%2FMakefile?ref=01ed700640c36fef719027d8baec9ddb5ef04df5", "patch": "@@ -0,0 +1,6 @@\n+-include ../tools.mk\n+\n+all:\n+\t$(RUSTC) -o $(TMPDIR)/input.dd -Z no-analysis --emit dep-info input.rs\n+\tsed -i'.bak' 's/^.*input.dd/input.dd/g' $(TMPDIR)/input.dd\n+\tdiff -u $(TMPDIR)/input.dd input.dd"}, {"sha": "f2c8676515b8ad2c73f634f5397b9c3fda24d3a0", "filename": "src/test/run-make/dep-info-no-analysis/input.dd", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/01ed700640c36fef719027d8baec9ddb5ef04df5/src%2Ftest%2Frun-make%2Fdep-info-no-analysis%2Finput.dd", "raw_url": "https://github.com/rust-lang/rust/raw/01ed700640c36fef719027d8baec9ddb5ef04df5/src%2Ftest%2Frun-make%2Fdep-info-no-analysis%2Finput.dd", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fdep-info-no-analysis%2Finput.dd?ref=01ed700640c36fef719027d8baec9ddb5ef04df5", "patch": "@@ -0,0 +1,3 @@\n+input.dd: input.rs\n+\n+input.rs:"}, {"sha": "523b0f0670ce4eadc19fe8d8800f7f46f495bcb5", "filename": "src/test/run-make/dep-info-no-analysis/input.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/01ed700640c36fef719027d8baec9ddb5ef04df5/src%2Ftest%2Frun-make%2Fdep-info-no-analysis%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01ed700640c36fef719027d8baec9ddb5ef04df5/src%2Ftest%2Frun-make%2Fdep-info-no-analysis%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fdep-info-no-analysis%2Finput.rs?ref=01ed700640c36fef719027d8baec9ddb5ef04df5", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Tests that dep info can be emitted without resolving external crates.\n+extern crate not_there;\n+\n+fn main() {}"}]}