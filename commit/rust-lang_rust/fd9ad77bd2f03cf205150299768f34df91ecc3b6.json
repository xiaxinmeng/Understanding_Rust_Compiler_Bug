{"sha": "fd9ad77bd2f03cf205150299768f34df91ecc3b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkOWFkNzdiZDJmMDNjZjIwNTE1MDI5OTc2OGYzNGRmOTFlY2MzYjY=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2014-07-30T01:27:28Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-07-31T14:30:50Z"}, "message": "Move SeekableMemWriter into librbml", "tree": {"sha": "96d5277062d6ef0b921dc8b358bed08af71495f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96d5277062d6ef0b921dc8b358bed08af71495f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd9ad77bd2f03cf205150299768f34df91ecc3b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd9ad77bd2f03cf205150299768f34df91ecc3b6", "html_url": "https://github.com/rust-lang/rust/commit/fd9ad77bd2f03cf205150299768f34df91ecc3b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd9ad77bd2f03cf205150299768f34df91ecc3b6/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1dcbefe52d4c5877602a17270cf5a1b6882c232", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1dcbefe52d4c5877602a17270cf5a1b6882c232", "html_url": "https://github.com/rust-lang/rust/commit/e1dcbefe52d4c5877602a17270cf5a1b6882c232"}], "stats": {"total": 246, "additions": 11, "deletions": 235}, "files": [{"sha": "9ab163c5f474055fdb80ecc54ff25205111e0c88", "filename": "src/librbml/io.rs", "status": "renamed", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fd9ad77bd2f03cf205150299768f34df91ecc3b6/src%2Flibrbml%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9ad77bd2f03cf205150299768f34df91ecc3b6/src%2Flibrbml%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrbml%2Fio.rs?ref=fd9ad77bd2f03cf205150299768f34df91ecc3b6", "patch": "@@ -39,7 +39,7 @@ fn combine(seek: SeekStyle, cur: uint, end: uint, offset: i64) -> IoResult<u64>\n ///\n /// ```rust\n /// # #![allow(unused_must_use)]\n-/// use std::io::SeekableMemWriter;\n+/// use rbml::io::SeekableMemWriter;\n ///\n /// let mut w = SeekableMemWriter::new();\n /// w.write([0, 1, 2]);\n@@ -128,6 +128,7 @@ impl Seek for SeekableMemWriter {\n \n #[cfg(test)]\n mod tests {\n+    extern crate test;\n     use super::SeekableMemWriter;\n     use std::io;\n     use test::Bencher;", "previous_filename": "src/librustc/util/io.rs"}, {"sha": "f77d36d1e0648fa6e7dde3d3cdb586e023ba4d1e", "filename": "src/librbml/lib.rs", "status": "modified", "additions": 4, "deletions": 116, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/fd9ad77bd2f03cf205150299768f34df91ecc3b6/src%2Flibrbml%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9ad77bd2f03cf205150299768f34df91ecc3b6/src%2Flibrbml%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrbml%2Flib.rs?ref=fd9ad77bd2f03cf205150299768f34df91ecc3b6", "patch": "@@ -32,9 +32,9 @@ extern crate serialize;\n #[phase(plugin, link)] extern crate log;\n #[cfg(test)] extern crate test;\n \n-use std::io;\n use std::str;\n \n+pub mod io;\n \n /// Common data structures\n #[deriving(Clone)]\n@@ -105,7 +105,7 @@ pub enum EbmlEncoderTag {\n pub enum Error {\n     IntTooBig(uint),\n     Expected(String),\n-    IoError(io::IoError)\n+    IoError(std::io::IoError)\n }\n // --------------------------------------\n \n@@ -1038,127 +1038,15 @@ pub mod writer {\n #[cfg(test)]\n mod tests {\n     use super::{Doc, reader, writer};\n+    use super::io::SeekableMemWriter;\n+\n     use serialize::{Encodable, Decodable};\n \n     use std::io::{IoError, IoResult, SeekStyle};\n     use std::io;\n     use std::option::{None, Option, Some};\n     use std::slice;\n \n-    static BUF_CAPACITY: uint = 128;\n-\n-    fn combine(seek: SeekStyle, cur: uint, end: uint, offset: i64) -> IoResult<u64> {\n-        // compute offset as signed and clamp to prevent overflow\n-        let pos = match seek {\n-            io::SeekSet => 0,\n-            io::SeekEnd => end,\n-            io::SeekCur => cur,\n-        } as i64;\n-\n-        if offset + pos < 0 {\n-            Err(IoError {\n-                kind: io::InvalidInput,\n-                desc: \"invalid seek to a negative offset\",\n-                detail: None\n-            })\n-        } else {\n-            Ok((offset + pos) as u64)\n-        }\n-    }\n-\n-    /// Writes to an owned, growable byte vector that supports seeking.\n-    ///\n-    /// # Example\n-    ///\n-    /// ```rust\n-    /// # #![allow(unused_must_use)]\n-    /// use std::io::SeekableMemWriter;\n-    ///\n-    /// let mut w = SeekableMemWriter::new();\n-    /// w.write([0, 1, 2]);\n-    ///\n-    /// assert_eq!(w.unwrap(), vec!(0, 1, 2));\n-    /// ```\n-    pub struct SeekableMemWriter {\n-        buf: Vec<u8>,\n-        pos: uint,\n-    }\n-\n-    impl SeekableMemWriter {\n-        /// Create a new `SeekableMemWriter`.\n-        #[inline]\n-        pub fn new() -> SeekableMemWriter {\n-            SeekableMemWriter::with_capacity(BUF_CAPACITY)\n-        }\n-        /// Create a new `SeekableMemWriter`, allocating at least `n` bytes for\n-        /// the internal buffer.\n-        #[inline]\n-        pub fn with_capacity(n: uint) -> SeekableMemWriter {\n-            SeekableMemWriter { buf: Vec::with_capacity(n), pos: 0 }\n-        }\n-\n-        /// Acquires an immutable reference to the underlying buffer of this\n-        /// `SeekableMemWriter`.\n-        ///\n-        /// No method is exposed for acquiring a mutable reference to the buffer\n-        /// because it could corrupt the state of this `MemWriter`.\n-        #[inline]\n-        pub fn get_ref<'a>(&'a self) -> &'a [u8] { self.buf.as_slice() }\n-\n-        /// Unwraps this `SeekableMemWriter`, returning the underlying buffer\n-        #[inline]\n-        pub fn unwrap(self) -> Vec<u8> { self.buf }\n-    }\n-\n-    impl Writer for SeekableMemWriter {\n-        #[inline]\n-        fn write(&mut self, buf: &[u8]) -> IoResult<()> {\n-            if self.pos == self.buf.len() {\n-                self.buf.push_all(buf)\n-            } else {\n-                // Make sure the internal buffer is as least as big as where we\n-                // currently are\n-                let difference = self.pos as i64 - self.buf.len() as i64;\n-                if difference > 0 {\n-                    self.buf.grow(difference as uint, &0);\n-                }\n-\n-                // Figure out what bytes will be used to overwrite what's currently\n-                // there (left), and what will be appended on the end (right)\n-                let cap = self.buf.len() - self.pos;\n-                let (left, right) = if cap <= buf.len() {\n-                    (buf.slice_to(cap), buf.slice_from(cap))\n-                } else {\n-                    (buf, &[])\n-                };\n-\n-                // Do the necessary writes\n-                if left.len() > 0 {\n-                    slice::bytes::copy_memory(self.buf.mut_slice_from(self.pos), left);\n-                }\n-                if right.len() > 0 {\n-                    self.buf.push_all(right);\n-                }\n-            }\n-\n-            // Bump us forward\n-            self.pos += buf.len();\n-            Ok(())\n-        }\n-    }\n-\n-    impl Seek for SeekableMemWriter {\n-        #[inline]\n-        fn tell(&self) -> IoResult<u64> { Ok(self.pos as u64) }\n-\n-        #[inline]\n-        fn seek(&mut self, pos: i64, style: SeekStyle) -> IoResult<()> {\n-            let new = try!(combine(style, self.pos, self.buf.len(), pos));\n-            self.pos = new as uint;\n-            Ok(())\n-        }\n-    }\n-\n     #[test]\n     fn test_vuint_at() {\n         let data = ["}, {"sha": "f9774e83e8a1c19c905db648c59db95d49374333", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd9ad77bd2f03cf205150299768f34df91ecc3b6/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9ad77bd2f03cf205150299768f34df91ecc3b6/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=fd9ad77bd2f03cf205150299768f34df91ecc3b6", "patch": "@@ -133,7 +133,6 @@ pub mod util {\n \n     pub mod common;\n     pub mod ppaux;\n-    pub mod io;\n     pub mod nodemap;\n }\n "}, {"sha": "f093f74396583e95af17b62232bdf1d4d071c508", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd9ad77bd2f03cf205150299768f34df91ecc3b6/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9ad77bd2f03cf205150299768f34df91ecc3b6/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=fd9ad77bd2f03cf205150299768f34df91ecc3b6", "patch": "@@ -26,7 +26,6 @@ use middle::ty;\n use middle::typeck;\n use middle::stability;\n use middle;\n-use util::io::SeekableMemWriter;\n use util::nodemap::{NodeMap, NodeSet};\n \n use serialize::Encodable;\n@@ -53,6 +52,7 @@ use syntax::visit::Visitor;\n use syntax::visit;\n use syntax;\n use rbml::writer;\n+use rbml::io::SeekableMemWriter;\n \n /// A borrowed version of ast::InlinedItem.\n pub enum InlinedItemRef<'a> {"}, {"sha": "f16a46ed72933e6ef8bf8b6373571618f678c57e", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd9ad77bd2f03cf205150299768f34df91ecc3b6/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9ad77bd2f03cf205150299768f34df91ecc3b6/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=fd9ad77bd2f03cf205150299768f34df91ecc3b6", "patch": "@@ -27,7 +27,7 @@ use syntax::ast::*;\n use syntax::diagnostic::SpanHandler;\n use syntax::parse::token;\n \n-use util::io::SeekableMemWriter;\n+use rbml::io::SeekableMemWriter;\n \n macro_rules! mywrite( ($($arg:tt)*) => ({ write!($($arg)*); }) )\n "}, {"sha": "f68501bbb9143e3acedfcc683f95073ee144ceae", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd9ad77bd2f03cf205150299768f34df91ecc3b6/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9ad77bd2f03cf205150299768f34df91ecc3b6/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=fd9ad77bd2f03cf205150299768f34df91ecc3b6", "patch": "@@ -28,7 +28,6 @@ use middle::subst;\n use middle::subst::VecPerParamSpace;\n use middle::typeck::{MethodCall, MethodCallee, MethodOrigin};\n use middle::{ty, typeck};\n-use util::io::SeekableMemWriter;\n use util::ppaux::ty_to_string;\n \n use syntax::{ast, ast_map, ast_util, codemap, fold};\n@@ -43,6 +42,7 @@ use std::io::Seek;\n use std::mem;\n use std::gc::GC;\n \n+use rbml::io::SeekableMemWriter;\n use rbml::{reader, writer};\n use rbml;\n use serialize;"}, {"sha": "28fc4ce192e187cc84d532b35b6a5f1df1342f99", "filename": "src/test/run-pass/issue-11881.rs", "status": "modified", "additions": 2, "deletions": 114, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/fd9ad77bd2f03cf205150299768f34df91ecc3b6/src%2Ftest%2Frun-pass%2Fissue-11881.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9ad77bd2f03cf205150299768f34df91ecc3b6/src%2Ftest%2Frun-pass%2Fissue-11881.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-11881.rs?ref=fd9ad77bd2f03cf205150299768f34df91ecc3b6", "patch": "@@ -17,121 +17,9 @@ use std::slice;\n \n use serialize::{Encodable, Encoder};\n use serialize::json;\n-use rbml::writer;\n-\n-static BUF_CAPACITY: uint = 128;\n-\n-fn combine(seek: SeekStyle, cur: uint, end: uint, offset: i64) -> IoResult<u64> {\n-    // compute offset as signed and clamp to prevent overflow\n-    let pos = match seek {\n-        io::SeekSet => 0,\n-        io::SeekEnd => end,\n-        io::SeekCur => cur,\n-    } as i64;\n-\n-    if offset + pos < 0 {\n-        Err(IoError {\n-            kind: io::InvalidInput,\n-            desc: \"invalid seek to a negative offset\",\n-            detail: None\n-        })\n-    } else {\n-        Ok((offset + pos) as u64)\n-    }\n-}\n-\n-/// Writes to an owned, growable byte vector that supports seeking.\n-///\n-/// # Example\n-///\n-/// ```rust\n-/// # #![allow(unused_must_use)]\n-/// use std::io::SeekableMemWriter;\n-///\n-/// let mut w = SeekableMemWriter::new();\n-/// w.write([0, 1, 2]);\n-///\n-/// assert_eq!(w.unwrap(), vec!(0, 1, 2));\n-/// ```\n-pub struct SeekableMemWriter {\n-    buf: Vec<u8>,\n-    pos: uint,\n-}\n-\n-impl SeekableMemWriter {\n-    /// Create a new `SeekableMemWriter`.\n-    #[inline]\n-    pub fn new() -> SeekableMemWriter {\n-        SeekableMemWriter::with_capacity(BUF_CAPACITY)\n-    }\n-    /// Create a new `SeekableMemWriter`, allocating at least `n` bytes for\n-    /// the internal buffer.\n-    #[inline]\n-    pub fn with_capacity(n: uint) -> SeekableMemWriter {\n-        SeekableMemWriter { buf: Vec::with_capacity(n), pos: 0 }\n-    }\n-\n-    /// Acquires an immutable reference to the underlying buffer of this\n-    /// `SeekableMemWriter`.\n-    ///\n-    /// No method is exposed for acquiring a mutable reference to the buffer\n-    /// because it could corrupt the state of this `MemWriter`.\n-    #[inline]\n-    pub fn get_ref<'a>(&'a self) -> &'a [u8] { self.buf.as_slice() }\n \n-    /// Unwraps this `SeekableMemWriter`, returning the underlying buffer\n-    #[inline]\n-    pub fn unwrap(self) -> Vec<u8> { self.buf }\n-}\n-\n-impl Writer for SeekableMemWriter {\n-    #[inline]\n-    fn write(&mut self, buf: &[u8]) -> IoResult<()> {\n-        if self.pos == self.buf.len() {\n-            self.buf.push_all(buf)\n-        } else {\n-            // Make sure the internal buffer is as least as big as where we\n-            // currently are\n-            let difference = self.pos as i64 - self.buf.len() as i64;\n-            if difference > 0 {\n-                self.buf.grow(difference as uint, &0);\n-            }\n-\n-            // Figure out what bytes will be used to overwrite what's currently\n-            // there (left), and what will be appended on the end (right)\n-            let cap = self.buf.len() - self.pos;\n-            let (left, right) = if cap <= buf.len() {\n-                (buf.slice_to(cap), buf.slice_from(cap))\n-            } else {\n-                (buf, &[])\n-            };\n-\n-            // Do the necessary writes\n-            if left.len() > 0 {\n-                slice::bytes::copy_memory(self.buf.mut_slice_from(self.pos), left);\n-            }\n-            if right.len() > 0 {\n-                self.buf.push_all(right);\n-            }\n-        }\n-\n-        // Bump us forward\n-        self.pos += buf.len();\n-        Ok(())\n-    }\n-}\n-\n-impl Seek for SeekableMemWriter {\n-    #[inline]\n-    fn tell(&self) -> IoResult<u64> { Ok(self.pos as u64) }\n-\n-    #[inline]\n-    fn seek(&mut self, pos: i64, style: SeekStyle) -> IoResult<()> {\n-        let new = try!(combine(style, self.pos, self.buf.len(), pos));\n-        self.pos = new as uint;\n-        Ok(())\n-    }\n-}\n+use rbml::writer;\n+use rbml::io::SeekableMemWriter;\n \n #[deriving(Encodable)]\n struct Foo {"}]}