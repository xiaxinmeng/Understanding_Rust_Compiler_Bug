{"sha": "d66452c3e5dfad901099493e8b86f5643d084a32", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2NjQ1MmMzZTVkZmFkOTAxMDk5NDkzZThiODZmNTY0M2QwODRhMzI=", "commit": {"author": {"name": "Jack Huey", "email": "jack.huey@umassmed.edu", "date": "2020-08-04T22:35:37Z"}, "committer": {"name": "Jack Huey", "email": "jack.huey@umassmed.edu", "date": "2020-09-04T23:12:54Z"}, "message": "Upgrade chalk to 0.21", "tree": {"sha": "0e1137fe6057548502a7deda4e80d8c08ae7be78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e1137fe6057548502a7deda4e80d8c08ae7be78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d66452c3e5dfad901099493e8b86f5643d084a32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d66452c3e5dfad901099493e8b86f5643d084a32", "html_url": "https://github.com/rust-lang/rust/commit/d66452c3e5dfad901099493e8b86f5643d084a32", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d66452c3e5dfad901099493e8b86f5643d084a32/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42d896afbd0314375a12465a14dc8d23b1b73a55", "url": "https://api.github.com/repos/rust-lang/rust/commits/42d896afbd0314375a12465a14dc8d23b1b73a55", "html_url": "https://github.com/rust-lang/rust/commit/42d896afbd0314375a12465a14dc8d23b1b73a55"}], "stats": {"total": 310, "additions": 190, "deletions": 120}, "files": [{"sha": "d4e718cb603e889517005972a01a7d07c8ccf304", "filename": "Cargo.lock", "status": "modified", "additions": 52, "deletions": 9, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/d66452c3e5dfad901099493e8b86f5643d084a32/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/d66452c3e5dfad901099493e8b86f5643d084a32/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=d66452c3e5dfad901099493e8b86f5643d084a32", "patch": "@@ -427,9 +427,9 @@ dependencies = [\n \n [[package]]\n name = \"chalk-derive\"\n-version = \"0.14.0\"\n+version = \"0.21.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"d463e01905d607e181de72e8608721d3269f29176c9a14ce037011316ae7131d\"\n+checksum = \"c1df0dbb57d74b4acd20f20fa66ab2acd09776b79eaeb9d8f947b2f3e01c40bf\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n@@ -439,40 +439,42 @@ dependencies = [\n \n [[package]]\n name = \"chalk-engine\"\n-version = \"0.14.0\"\n+version = \"0.21.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"efaf428f5398d36284f79690cf988762b7c091249f50a6c11db613a46c057000\"\n+checksum = \"fb7c65a13f32f02aba8f1d9a37f206af615f77ac564624b81a4c593c6c1735b9\"\n dependencies = [\n  \"chalk-derive\",\n  \"chalk-ir\",\n+ \"chalk-solve\",\n  \"rustc-hash\",\n  \"tracing\",\n ]\n \n [[package]]\n name = \"chalk-ir\"\n-version = \"0.14.0\"\n+version = \"0.21.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"fd3fdc1e9f68498ffe80f4a23b0b95f1ca6fb21d5a4c9b0c085fab3ca712bdbe\"\n+checksum = \"44361a25dbdb1dc428f56ad7a3c21ba9ca12f3225c26a47919ff6fcb10a583d4\"\n dependencies = [\n  \"chalk-derive\",\n  \"lazy_static\",\n ]\n \n [[package]]\n name = \"chalk-solve\"\n-version = \"0.14.0\"\n+version = \"0.21.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"5b9fd4102807b7ebe8fb034fa0f488c5656e1966d3261b558b81a08d519cdb29\"\n+checksum = \"a886da37a0dc457057d86f78f026f7a09c6d8088aa13f4f4127fdb8dc80119a3\"\n dependencies = [\n  \"chalk-derive\",\n- \"chalk-engine\",\n  \"chalk-ir\",\n  \"ena\",\n  \"itertools 0.9.0\",\n  \"petgraph\",\n  \"rustc-hash\",\n  \"tracing\",\n+ \"tracing-subscriber\",\n+ \"tracing-tree\",\n ]\n \n [[package]]\n@@ -4038,6 +4040,7 @@ dependencies = [\n name = \"rustc_traits\"\n version = \"0.0.0\"\n dependencies = [\n+ \"chalk-engine\",\n  \"chalk-ir\",\n  \"chalk-solve\",\n  \"rustc_ast\",\n@@ -4996,21 +4999,61 @@ dependencies = [\n  \"lazy_static\",\n ]\n \n+[[package]]\n+name = \"tracing-log\"\n+version = \"0.1.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"5e0f8c7178e13481ff6765bd169b33e8d554c5d2bbede5e32c356194be02b9b9\"\n+dependencies = [\n+ \"lazy_static\",\n+ \"log\",\n+ \"tracing-core\",\n+]\n+\n+[[package]]\n+name = \"tracing-serde\"\n+version = \"0.1.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"b6ccba2f8f16e0ed268fc765d9b7ff22e965e7185d32f8f1ec8294fe17d86e79\"\n+dependencies = [\n+ \"serde\",\n+ \"tracing-core\",\n+]\n+\n [[package]]\n name = \"tracing-subscriber\"\n version = \"0.2.11\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"abd165311cc4d7a555ad11cc77a37756df836182db0d81aac908c8184c584f40\"\n dependencies = [\n  \"ansi_term 0.12.1\",\n+ \"chrono\",\n  \"lazy_static\",\n  \"matchers\",\n  \"parking_lot 0.11.0\",\n  \"regex\",\n+ \"serde\",\n+ \"serde_json\",\n  \"sharded-slab\",\n  \"smallvec 1.4.2\",\n  \"thread_local\",\n  \"tracing-core\",\n+ \"tracing-log\",\n+ \"tracing-serde\",\n+]\n+\n+[[package]]\n+name = \"tracing-tree\"\n+version = \"0.1.5\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"e1a3dc4774db3a6b2d66a4f8d8de670e874ec3ed55615860c994927419b32c5f\"\n+dependencies = [\n+ \"ansi_term 0.12.1\",\n+ \"atty\",\n+ \"chrono\",\n+ \"termcolor\",\n+ \"tracing\",\n+ \"tracing-subscriber\",\n ]\n \n [[package]]"}, {"sha": "302a907538c84ea6f3f3beec6b233c68b4024917", "filename": "compiler/rustc_middle/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d66452c3e5dfad901099493e8b86f5643d084a32/compiler%2Frustc_middle%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d66452c3e5dfad901099493e8b86f5643d084a32/compiler%2Frustc_middle%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2FCargo.toml?ref=d66452c3e5dfad901099493e8b86f5643d084a32", "patch": "@@ -27,7 +27,7 @@ rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_ast = { path = \"../rustc_ast\" }\n rustc_span = { path = \"../rustc_span\" }\n byteorder = { version = \"1.3\" }\n-chalk-ir = \"0.14.0\"\n+chalk-ir = \"0.21.0\"\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n measureme = \"0.7.1\"\n rustc_session = { path = \"../rustc_session\" }"}, {"sha": "d03c32533f8317274ee1db67e64ac2756a752241", "filename": "compiler/rustc_middle/src/traits/chalk.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d66452c3e5dfad901099493e8b86f5643d084a32/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d66452c3e5dfad901099493e8b86f5643d084a32/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fchalk.rs?ref=d66452c3e5dfad901099493e8b86f5643d084a32", "patch": "@@ -75,6 +75,7 @@ impl<'tcx> chalk_ir::interner::Interner for RustInterner<'tcx> {\n     type InternedQuantifiedWhereClauses = Vec<chalk_ir::QuantifiedWhereClause<Self>>;\n     type InternedVariableKinds = Vec<chalk_ir::VariableKind<Self>>;\n     type InternedCanonicalVarKinds = Vec<chalk_ir::CanonicalVarKind<Self>>;\n+    type InternedConstraints = Vec<chalk_ir::InEnvironment<chalk_ir::Constraint<Self>>>;\n     type DefId = DefId;\n     type InternedAdtId = &'tcx AdtDef;\n     type Identifier = ();\n@@ -321,6 +322,20 @@ impl<'tcx> chalk_ir::interner::Interner for RustInterner<'tcx> {\n     ) -> &'a [chalk_ir::CanonicalVarKind<Self>] {\n         canonical_var_kinds\n     }\n+\n+    fn intern_constraints<E>(\n+        &self,\n+        data: impl IntoIterator<Item = Result<chalk_ir::InEnvironment<chalk_ir::Constraint<Self>>, E>>,\n+    ) -> Result<Self::InternedConstraints, E> {\n+        data.into_iter().collect::<Result<Vec<_>, _>>()\n+    }\n+\n+    fn constraints_data<'a>(\n+        &self,\n+        constraints: &'a Self::InternedConstraints,\n+    ) -> &'a [chalk_ir::InEnvironment<chalk_ir::Constraint<Self>>] {\n+        constraints\n+    }\n }\n \n impl<'tcx> chalk_ir::interner::HasInterner for RustInterner<'tcx> {"}, {"sha": "3571ff17f31be1abe06ce9f38472524959974df3", "filename": "compiler/rustc_traits/Cargo.toml", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d66452c3e5dfad901099493e8b86f5643d084a32/compiler%2Frustc_traits%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d66452c3e5dfad901099493e8b86f5643d084a32/compiler%2Frustc_traits%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2FCargo.toml?ref=d66452c3e5dfad901099493e8b86f5643d084a32", "patch": "@@ -12,8 +12,9 @@ rustc_hir = { path = \"../rustc_hir\" }\n rustc_index = { path = \"../rustc_index\" }\n rustc_ast = { path = \"../rustc_ast\" }\n rustc_span = { path = \"../rustc_span\" }\n-chalk-ir = \"0.14.0\"\n-chalk-solve = \"0.14.0\"\n+chalk-ir = \"0.21.0\"\n+chalk-solve = \"0.21.0\"\n+chalk-engine = \"0.21.0\"\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n rustc_infer = { path = \"../rustc_infer\" }\n rustc_trait_selection = { path = \"../rustc_trait_selection\" }"}, {"sha": "877886ad60132579bd24949cbc273cafc5fef9c9", "filename": "compiler/rustc_traits/src/chalk/db.rs", "status": "modified", "additions": 43, "deletions": 75, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/d66452c3e5dfad901099493e8b86f5643d084a32/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d66452c3e5dfad901099493e8b86f5643d084a32/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs?ref=d66452c3e5dfad901099493e8b86f5643d084a32", "patch": "@@ -11,6 +11,7 @@ use rustc_middle::ty::subst::{InternalSubsts, Subst, SubstsRef};\n use rustc_middle::ty::{self, AssocItemContainer, AssocKind, TyCtxt};\n \n use rustc_hir::def_id::DefId;\n+use rustc_hir::Unsafety;\n \n use rustc_span::symbol::sym;\n \n@@ -145,10 +146,11 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n             .map(|(wc, _)| wc.subst(self.tcx, bound_vars))\n             .filter_map(|wc| LowerInto::<Option<chalk_ir::QuantifiedWhereClause<RustInterner<'tcx>>>>::lower_into(wc, &self.interner))\n             .collect();\n-        let fields = match adt_def.adt_kind() {\n-            ty::AdtKind::Struct | ty::AdtKind::Union => {\n-                let variant = adt_def.non_enum_variant();\n-                variant\n+        let variants: Vec<_> = adt_def\n+            .variants\n+            .iter()\n+            .map(|variant| chalk_solve::rust_ir::AdtVariantDatum {\n+                fields: variant\n                     .fields\n                     .iter()\n                     .map(|field| {\n@@ -157,26 +159,40 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n                             .subst(self.tcx, bound_vars)\n                             .lower_into(&self.interner)\n                     })\n-                    .collect()\n-            }\n-            // FIXME(chalk): handle enums; force_impl_for requires this\n-            ty::AdtKind::Enum => vec![],\n-        };\n+                    .collect(),\n+            })\n+            .collect();\n         let struct_datum = Arc::new(chalk_solve::rust_ir::AdtDatum {\n             id: adt_id,\n             binders: chalk_ir::Binders::new(\n                 binders,\n-                chalk_solve::rust_ir::AdtDatumBound { fields, where_clauses },\n+                chalk_solve::rust_ir::AdtDatumBound { variants, where_clauses },\n             ),\n             flags: chalk_solve::rust_ir::AdtFlags {\n                 upstream: !adt_def.did.is_local(),\n                 fundamental: adt_def.is_fundamental(),\n                 phantom_data: adt_def.is_phantom_data(),\n             },\n+            kind: match adt_def.adt_kind() {\n+                ty::AdtKind::Struct => chalk_solve::rust_ir::AdtKind::Struct,\n+                ty::AdtKind::Union => chalk_solve::rust_ir::AdtKind::Union,\n+                ty::AdtKind::Enum => chalk_solve::rust_ir::AdtKind::Enum,\n+            },\n         });\n         struct_datum\n     }\n \n+    fn adt_repr(\n+        &self,\n+        adt_id: chalk_ir::AdtId<RustInterner<'tcx>>,\n+    ) -> chalk_solve::rust_ir::AdtRepr {\n+        let adt_def = adt_id.0;\n+        chalk_solve::rust_ir::AdtRepr {\n+            repr_c: adt_def.repr.c(),\n+            repr_packed: adt_def.repr.packed(),\n+        }\n+    }\n+\n     fn fn_def_datum(\n         &self,\n         fn_def_id: chalk_ir::FnDefId<RustInterner<'tcx>>,\n@@ -218,6 +234,11 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n         Arc::new(chalk_solve::rust_ir::FnDefDatum {\n             id: fn_def_id,\n             abi: sig.abi(),\n+            safety: match sig.unsafety() {\n+                Unsafety::Normal => chalk_ir::Safety::Safe,\n+                Unsafety::Unsafe => chalk_ir::Safety::Unsafe,\n+            },\n+            variadic: sig.c_variadic(),\n             binders: chalk_ir::Binders::new(binders, bound),\n         })\n     }\n@@ -256,6 +277,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n         &self,\n         trait_id: chalk_ir::TraitId<RustInterner<'tcx>>,\n         parameters: &[chalk_ir::GenericArg<RustInterner<'tcx>>],\n+        _binders: &chalk_ir::CanonicalVarKinds<RustInterner<'tcx>>,\n     ) -> Vec<chalk_ir::ImplId<RustInterner<'tcx>>> {\n         let def_id = trait_id.0;\n \n@@ -355,69 +377,15 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n             .filter_map(|wc| LowerInto::<Option<chalk_ir::QuantifiedWhereClause<RustInterner<'tcx>>>>::lower_into(wc, &self.interner)).collect();\n \n         let value = chalk_solve::rust_ir::OpaqueTyDatumBound {\n-            bounds: chalk_ir::Binders::new(binders, where_clauses),\n+            bounds: chalk_ir::Binders::new(binders.clone(), vec![]),\n+            where_clauses: chalk_ir::Binders::new(binders, where_clauses),\n         };\n         Arc::new(chalk_solve::rust_ir::OpaqueTyDatum {\n             opaque_ty_id,\n-            bound: chalk_ir::Binders::new(chalk_ir::VariableKinds::new(&self.interner), value),\n+            bound: chalk_ir::Binders::new(chalk_ir::VariableKinds::empty(&self.interner), value),\n         })\n     }\n \n-    /// Since Chalk can't handle all Rust types currently, we have to handle\n-    /// some specially for now. Over time, these `Some` returns will change to\n-    /// `None` and eventually this function will be removed.\n-    fn force_impl_for(\n-        &self,\n-        well_known: chalk_solve::rust_ir::WellKnownTrait,\n-        ty: &chalk_ir::TyData<RustInterner<'tcx>>,\n-    ) -> Option<bool> {\n-        use chalk_ir::TyData::*;\n-        match well_known {\n-            chalk_solve::rust_ir::WellKnownTrait::Sized => match ty {\n-                Apply(apply) => match apply.name {\n-                    chalk_ir::TypeName::Adt(chalk_ir::AdtId(adt_def)) => match adt_def.adt_kind() {\n-                        ty::AdtKind::Struct | ty::AdtKind::Union => None,\n-                        ty::AdtKind::Enum => {\n-                            let constraint = self.tcx.adt_sized_constraint(adt_def.did);\n-                            if !constraint.0.is_empty() { unimplemented!() } else { Some(true) }\n-                        }\n-                    },\n-                    _ => None,\n-                },\n-                Dyn(_)\n-                | Alias(_)\n-                | Placeholder(_)\n-                | Function(_)\n-                | InferenceVar(_, _)\n-                | BoundVar(_) => None,\n-            },\n-            chalk_solve::rust_ir::WellKnownTrait::Copy\n-            | chalk_solve::rust_ir::WellKnownTrait::Clone => match ty {\n-                Apply(apply) => match apply.name {\n-                    chalk_ir::TypeName::Adt(chalk_ir::AdtId(adt_def)) => match adt_def.adt_kind() {\n-                        ty::AdtKind::Struct | ty::AdtKind::Union => None,\n-                        ty::AdtKind::Enum => {\n-                            let constraint = self.tcx.adt_sized_constraint(adt_def.did);\n-                            if !constraint.0.is_empty() { unimplemented!() } else { Some(true) }\n-                        }\n-                    },\n-                    _ => None,\n-                },\n-                Dyn(_)\n-                | Alias(_)\n-                | Placeholder(_)\n-                | Function(_)\n-                | InferenceVar(_, _)\n-                | BoundVar(_) => None,\n-            },\n-            chalk_solve::rust_ir::WellKnownTrait::Drop => None,\n-            chalk_solve::rust_ir::WellKnownTrait::Fn => None,\n-            chalk_solve::rust_ir::WellKnownTrait::FnMut => None,\n-            chalk_solve::rust_ir::WellKnownTrait::FnOnce => None,\n-            chalk_solve::rust_ir::WellKnownTrait::Unsize => None,\n-        }\n-    }\n-\n     fn program_clauses_for_env(\n         &self,\n         environment: &chalk_ir::Environment<RustInterner<'tcx>>,\n@@ -460,7 +428,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n         _closure_id: chalk_ir::ClosureId<RustInterner<'tcx>>,\n         substs: &chalk_ir::Substitution<RustInterner<'tcx>>,\n     ) -> chalk_solve::rust_ir::ClosureKind {\n-        let kind = &substs.parameters(&self.interner)[substs.len(&self.interner) - 3];\n+        let kind = &substs.as_slice(&self.interner)[substs.len(&self.interner) - 3];\n         match kind.assert_ty_ref(&self.interner).data(&self.interner) {\n             chalk_ir::TyData::Apply(apply) => match apply.name {\n                 chalk_ir::TypeName::Scalar(scalar) => match scalar {\n@@ -484,10 +452,10 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n         substs: &chalk_ir::Substitution<RustInterner<'tcx>>,\n     ) -> chalk_ir::Binders<chalk_solve::rust_ir::FnDefInputsAndOutputDatum<RustInterner<'tcx>>>\n     {\n-        let sig = &substs.parameters(&self.interner)[substs.len(&self.interner) - 2];\n+        let sig = &substs.as_slice(&self.interner)[substs.len(&self.interner) - 2];\n         match sig.assert_ty_ref(&self.interner).data(&self.interner) {\n             chalk_ir::TyData::Function(f) => {\n-                let substitution = f.substitution.parameters(&self.interner);\n+                let substitution = f.substitution.as_slice(&self.interner);\n                 let return_type =\n                     substitution.last().unwrap().assert_ty_ref(&self.interner).clone();\n                 // Closure arguments are tupled\n@@ -506,7 +474,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n                 };\n \n                 chalk_ir::Binders::new(\n-                    chalk_ir::VariableKinds::from(\n+                    chalk_ir::VariableKinds::from_iter(\n                         &self.interner,\n                         (0..f.num_binders).map(|_| chalk_ir::VariableKind::Lifetime),\n                     ),\n@@ -523,7 +491,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n         substs: &chalk_ir::Substitution<RustInterner<'tcx>>,\n     ) -> chalk_ir::Binders<chalk_ir::Ty<RustInterner<'tcx>>> {\n         let inputs_and_output = self.closure_inputs_and_output(_closure_id, substs);\n-        let tuple = substs.parameters(&self.interner).last().unwrap().assert_ty_ref(&self.interner);\n+        let tuple = substs.as_slice(&self.interner).last().unwrap().assert_ty_ref(&self.interner);\n         inputs_and_output.map_ref(|_| tuple.clone())\n     }\n \n@@ -532,8 +500,8 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n         _closure_id: chalk_ir::ClosureId<RustInterner<'tcx>>,\n         substs: &chalk_ir::Substitution<RustInterner<'tcx>>,\n     ) -> chalk_ir::Substitution<RustInterner<'tcx>> {\n-        let substitution = &substs.parameters(&self.interner)[0..substs.len(&self.interner) - 3];\n-        chalk_ir::Substitution::from(&self.interner, substitution)\n+        let substitution = &substs.as_slice(&self.interner)[0..substs.len(&self.interner) - 3];\n+        chalk_ir::Substitution::from_iter(&self.interner, substitution)\n     }\n }\n \n@@ -573,7 +541,7 @@ fn binders_for<'tcx>(\n     interner: &RustInterner<'tcx>,\n     bound_vars: SubstsRef<'tcx>,\n ) -> chalk_ir::VariableKinds<RustInterner<'tcx>> {\n-    chalk_ir::VariableKinds::from(\n+    chalk_ir::VariableKinds::from_iter(\n         interner,\n         bound_vars.iter().map(|arg| match arg.unpack() {\n             ty::subst::GenericArgKind::Lifetime(_re) => chalk_ir::VariableKind::Lifetime,"}, {"sha": "b53323839887aee4ba1be36c54d12b3abd5bc7e5", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 57, "deletions": 21, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/d66452c3e5dfad901099493e8b86f5643d084a32/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d66452c3e5dfad901099493e8b86f5643d084a32/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=d66452c3e5dfad901099493e8b86f5643d084a32", "patch": "@@ -56,7 +56,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Substitution<RustInterner<'tcx>>> for Subst\n         self,\n         interner: &RustInterner<'tcx>,\n     ) -> chalk_ir::Substitution<RustInterner<'tcx>> {\n-        chalk_ir::Substitution::from(interner, self.iter().map(|s| s.lower_into(interner)))\n+        chalk_ir::Substitution::from_iter(interner, self.iter().map(|s| s.lower_into(interner)))\n     }\n }\n \n@@ -94,8 +94,9 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::InEnvironment<chalk_ir::Goal<RustInterner<'\n                                             predicate.trait_ref.lower_into(interner),\n                                         ),\n                                     ),\n-                                    conditions: chalk_ir::Goals::new(interner),\n+                                    conditions: chalk_ir::Goals::empty(interner),\n                                     priority: chalk_ir::ClausePriority::High,\n+                                    constraints: chalk_ir::Constraints::empty(interner),\n                                 },\n                             ))\n                             .intern(interner),\n@@ -118,15 +119,39 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::InEnvironment<chalk_ir::Goal<RustInterner<'\n                                             },\n                                         ),\n                                     ),\n-                                    conditions: chalk_ir::Goals::new(interner),\n+                                    conditions: chalk_ir::Goals::empty(interner),\n                                     priority: chalk_ir::ClausePriority::High,\n+                                    constraints: chalk_ir::Constraints::empty(interner),\n+                                },\n+                            ))\n+                            .intern(interner),\n+                        )\n+                    }\n+                    ty::PredicateAtom::TypeOutlives(predicate) => {\n+                        let predicate = ty::Binder::bind(predicate);\n+                        let (predicate, binders, _named_regions) =\n+                            collect_bound_vars(interner, interner.tcx, &predicate);\n+\n+                        Some(\n+                            chalk_ir::ProgramClauseData(chalk_ir::Binders::new(\n+                                binders,\n+                                chalk_ir::ProgramClauseImplication {\n+                                    consequence: chalk_ir::DomainGoal::Holds(\n+                                        chalk_ir::WhereClause::TypeOutlives(\n+                                            chalk_ir::TypeOutlives {\n+                                                ty: predicate.0.lower_into(interner),\n+                                                lifetime: predicate.1.lower_into(interner),\n+                                            },\n+                                        ),\n+                                    ),\n+                                    conditions: chalk_ir::Goals::empty(interner),\n+                                    priority: chalk_ir::ClausePriority::High,\n+                                    constraints: chalk_ir::Constraints::empty(interner),\n                                 },\n                             ))\n                             .intern(interner),\n                         )\n                     }\n-                    // FIXME(chalk): need to add TypeOutlives\n-                    ty::PredicateAtom::TypeOutlives(_) => None,\n                     ty::PredicateAtom::Projection(predicate) => {\n                         let predicate = ty::Binder::bind(predicate);\n                         let (predicate, binders, _named_regions) =\n@@ -141,8 +166,9 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::InEnvironment<chalk_ir::Goal<RustInterner<'\n                                             predicate.lower_into(interner),\n                                         ),\n                                     ),\n-                                    conditions: chalk_ir::Goals::new(interner),\n+                                    conditions: chalk_ir::Goals::empty(interner),\n                                     priority: chalk_ir::ClausePriority::High,\n+                                    constraints: chalk_ir::Constraints::empty(interner),\n                                 },\n                             ))\n                             .intern(interner),\n@@ -160,13 +186,14 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::InEnvironment<chalk_ir::Goal<RustInterner<'\n             }\n             ChalkEnvironmentClause::TypeFromEnv(ty) => Some(\n                 chalk_ir::ProgramClauseData(chalk_ir::Binders::new(\n-                    chalk_ir::VariableKinds::new(interner),\n+                    chalk_ir::VariableKinds::empty(interner),\n                     chalk_ir::ProgramClauseImplication {\n                         consequence: chalk_ir::DomainGoal::FromEnv(chalk_ir::FromEnv::Ty(\n                             ty.lower_into(interner).shifted_in(interner),\n                         )),\n-                        conditions: chalk_ir::Goals::new(interner),\n+                        conditions: chalk_ir::Goals::empty(interner),\n                         priority: chalk_ir::ClausePriority::High,\n+                        constraints: chalk_ir::Constraints::empty(interner),\n                     },\n                 ))\n                 .intern(interner),\n@@ -176,7 +203,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::InEnvironment<chalk_ir::Goal<RustInterner<'\n         let goal: chalk_ir::GoalData<RustInterner<'tcx>> = self.goal.lower_into(&interner);\n         chalk_ir::InEnvironment {\n             environment: chalk_ir::Environment {\n-                clauses: chalk_ir::ProgramClauses::from(&interner, clauses),\n+                clauses: chalk_ir::ProgramClauses::from_iter(&interner, clauses),\n             },\n             goal: goal.intern(&interner),\n         }\n@@ -211,7 +238,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::GoalData<RustInterner<'tcx>>> for ty::Predi\n             }\n             // FIXME(chalk): TypeOutlives\n             ty::PredicateAtom::TypeOutlives(_predicate) => {\n-                chalk_ir::GoalData::All(chalk_ir::Goals::new(interner))\n+                chalk_ir::GoalData::All(chalk_ir::Goals::empty(interner))\n             }\n             ty::PredicateAtom::Projection(predicate) => {\n                 ty::Binder::bind(predicate).lower_into(interner)\n@@ -221,7 +248,9 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::GoalData<RustInterner<'tcx>>> for ty::Predi\n                     // FIXME(chalk): In Chalk, a placeholder is WellFormed if it\n                     // `FromEnv`. However, when we \"lower\" Params, we don't update\n                     // the environment.\n-                    ty::Placeholder(..) => chalk_ir::GoalData::All(chalk_ir::Goals::new(interner)),\n+                    ty::Placeholder(..) => {\n+                        chalk_ir::GoalData::All(chalk_ir::Goals::empty(interner))\n+                    }\n \n                     _ => {\n                         let (ty, binders, _named_regions) =\n@@ -241,7 +270,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::GoalData<RustInterner<'tcx>>> for ty::Predi\n                 },\n                 // FIXME(chalk): handle well formed consts\n                 GenericArgKind::Const(..) => {\n-                    chalk_ir::GoalData::All(chalk_ir::Goals::new(interner))\n+                    chalk_ir::GoalData::All(chalk_ir::Goals::empty(interner))\n                 }\n                 GenericArgKind::Lifetime(lt) => bug!(\"unexpect well formed predicate: {:?}\", lt),\n             },\n@@ -258,7 +287,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::GoalData<RustInterner<'tcx>>> for ty::Predi\n             | ty::PredicateAtom::Subtype(..)\n             | ty::PredicateAtom::ConstEvaluatable(..)\n             | ty::PredicateAtom::ConstEquate(..) => {\n-                chalk_ir::GoalData::All(chalk_ir::Goals::new(interner))\n+                chalk_ir::GoalData::All(chalk_ir::Goals::empty(interner))\n             }\n         }\n     }\n@@ -381,7 +410,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Ty<RustInterner<'tcx>>> for Ty<'tcx> {\n                 };\n                 apply(\n                     chalk_ir::TypeName::Array,\n-                    chalk_ir::Substitution::from(\n+                    chalk_ir::Substitution::from_iter(\n                         interner,\n                         &[\n                             chalk_ir::GenericArgData::Ty(ty.lower_into(interner)).intern(interner),\n@@ -415,7 +444,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Ty<RustInterner<'tcx>>> for Ty<'tcx> {\n                 };\n                 apply(\n                     name,\n-                    chalk_ir::Substitution::from(\n+                    chalk_ir::Substitution::from_iter(\n                         interner,\n                         &[\n                             chalk_ir::GenericArgData::Lifetime(region.lower_into(interner))\n@@ -432,14 +461,20 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Ty<RustInterner<'tcx>>> for Ty<'tcx> {\n             FnPtr(sig) => {\n                 let (inputs_and_outputs, binders, _named_regions) =\n                     collect_bound_vars(interner, interner.tcx, &sig.inputs_and_output());\n-                TyData::Function(chalk_ir::Fn {\n+                TyData::Function(chalk_ir::FnPointer {\n                     num_binders: binders.len(interner),\n-                    substitution: chalk_ir::Substitution::from(\n+                    substitution: chalk_ir::Substitution::from_iter(\n                         interner,\n                         inputs_and_outputs.iter().map(|ty| {\n                             chalk_ir::GenericArgData::Ty(ty.lower_into(interner)).intern(interner)\n                         }),\n                     ),\n+                    abi: sig.abi(),\n+                    safety: match sig.unsafety() {\n+                        rustc_hir::Unsafety::Normal => chalk_ir::Safety::Safe,\n+                        rustc_hir::Unsafety::Unsafe => chalk_ir::Safety::Unsafe,\n+                    },\n+                    variadic: sig.c_variadic(),\n                 })\n                 .intern(interner)\n             }\n@@ -604,7 +639,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Binders<chalk_ir::QuantifiedWhereClauses<Ru\n         let where_clauses = predicates.into_iter().map(|predicate| match predicate {\n             ty::ExistentialPredicate::Trait(ty::ExistentialTraitRef { def_id, substs }) => {\n                 chalk_ir::Binders::new(\n-                    chalk_ir::VariableKinds::new(interner),\n+                    chalk_ir::VariableKinds::empty(interner),\n                     chalk_ir::WhereClause::Implemented(chalk_ir::TraitRef {\n                         trait_id: chalk_ir::TraitId(def_id),\n                         substitution: substs.lower_into(interner),\n@@ -613,14 +648,14 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Binders<chalk_ir::QuantifiedWhereClauses<Ru\n             }\n             ty::ExistentialPredicate::Projection(_predicate) => unimplemented!(),\n             ty::ExistentialPredicate::AutoTrait(def_id) => chalk_ir::Binders::new(\n-                chalk_ir::VariableKinds::new(interner),\n+                chalk_ir::VariableKinds::empty(interner),\n                 chalk_ir::WhereClause::Implemented(chalk_ir::TraitRef {\n                     trait_id: chalk_ir::TraitId(def_id),\n                     substitution: chalk_ir::Substitution::empty(interner),\n                 }),\n             ),\n         });\n-        let value = chalk_ir::QuantifiedWhereClauses::from(interner, where_clauses);\n+        let value = chalk_ir::QuantifiedWhereClauses::from_iter(interner, where_clauses);\n         chalk_ir::Binders::new(binders, value)\n     }\n }\n@@ -662,7 +697,8 @@ crate fn collect_bound_vars<'a, 'tcx, T: TypeFoldable<'tcx>>(\n             .or_else(|| bug!(\"Skipped bound var index: ty={:?}, parameters={:?}\", ty, parameters));\n     });\n \n-    let binders = chalk_ir::VariableKinds::from(interner, parameters.into_iter().map(|(_, v)| v));\n+    let binders =\n+        chalk_ir::VariableKinds::from_iter(interner, parameters.into_iter().map(|(_, v)| v));\n \n     (new_ty, binders, named_parameters)\n }"}, {"sha": "52648477f02187fa5f66dd9862887feedabaa8ca", "filename": "compiler/rustc_traits/src/chalk/mod.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d66452c3e5dfad901099493e8b86f5643d084a32/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d66452c3e5dfad901099493e8b86f5643d084a32/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fmod.rs?ref=d66452c3e5dfad901099493e8b86f5643d084a32", "patch": "@@ -49,7 +49,7 @@ crate fn evaluate_goal<'tcx>(\n         chalk_ir::InEnvironment<chalk_ir::Goal<ChalkRustInterner<'tcx>>>,\n     > = chalk_ir::UCanonical {\n         canonical: chalk_ir::Canonical {\n-            binders: chalk_ir::CanonicalVarKinds::from(\n+            binders: chalk_ir::CanonicalVarKinds::from_iter(\n                 &interner,\n                 obligation.variables.iter().map(|v| match v.kind {\n                     CanonicalVarKind::PlaceholderTy(_ty) => unimplemented!(),\n@@ -81,11 +81,10 @@ crate fn evaluate_goal<'tcx>(\n         universes: max_universe + 1,\n     };\n \n-    let solver_choice = chalk_solve::SolverChoice::SLG { max_size: 32, expected_answers: None };\n-    let mut solver = solver_choice.into_solver::<ChalkRustInterner<'tcx>>();\n-\n+    use chalk_solve::Solver;\n+    let mut solver = chalk_engine::solve::SLGSolver::new(32, None);\n     let db = ChalkRustIrDatabase { tcx, interner };\n-    let solution = solver.solve(&db, &_lowered_goal);\n+    let solution = chalk_solve::logging::with_tracing_logs(|| solver.solve(&db, &_lowered_goal));\n \n     // Ideally, the code to convert *back* to rustc types would live close to\n     // the code to convert *from* rustc types. Right now though, we don't\n@@ -94,7 +93,7 @@ crate fn evaluate_goal<'tcx>(\n     // `Ambig(Definite)`. This really isn't right.\n     let make_solution = |_subst: chalk_ir::Substitution<_>| {\n         let mut var_values: IndexVec<BoundVar, GenericArg<'tcx>> = IndexVec::new();\n-        _subst.parameters(&interner).iter().for_each(|p| {\n+        _subst.as_slice(&interner).iter().for_each(|p| {\n             // FIXME(chalk): we should move this elsewhere, since this is\n             // essentially inverse of lowering a `GenericArg`.\n             let _data = p.data(&interner);"}, {"sha": "369777a7904af85e2e74fbfdc3363fe113003173", "filename": "src/test/ui/chalkify/type_inference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d66452c3e5dfad901099493e8b86f5643d084a32/src%2Ftest%2Fui%2Fchalkify%2Ftype_inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d66452c3e5dfad901099493e8b86f5643d084a32/src%2Ftest%2Fui%2Fchalkify%2Ftype_inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Ftype_inference.rs?ref=d66452c3e5dfad901099493e8b86f5643d084a32", "patch": "@@ -24,5 +24,5 @@ fn main() {\n \n     // Here we have two solutions so we get back the behavior of the old-style\n     // trait solver.\n-    only_bar(x); //~ ERROR the trait bound `f64: Bar` is not satisfied\n+    only_bar(x); //~ ERROR the trait bound `{float}: Bar` is not satisfied\n }"}, {"sha": "fb8ccbfc660bf9c0929b26c45a9365c982ad5a99", "filename": "src/test/ui/chalkify/type_inference.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d66452c3e5dfad901099493e8b86f5643d084a32/src%2Ftest%2Fui%2Fchalkify%2Ftype_inference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d66452c3e5dfad901099493e8b86f5643d084a32/src%2Ftest%2Fui%2Fchalkify%2Ftype_inference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Ftype_inference.stderr?ref=d66452c3e5dfad901099493e8b86f5643d084a32", "patch": "@@ -1,11 +1,15 @@\n-error[E0277]: the trait bound `f64: Bar` is not satisfied\n+error[E0277]: the trait bound `{float}: Bar` is not satisfied\n   --> $DIR/type_inference.rs:27:5\n    |\n LL | fn only_bar<T: Bar>(_x: T) { }\n    |                --- required by this bound in `only_bar`\n ...\n LL |     only_bar(x);\n-   |     ^^^^^^^^ the trait `Bar` is not implemented for `f64`\n+   |     ^^^^^^^^ the trait `Bar` is not implemented for `{float}`\n+   |\n+   = help: the following implementations were found:\n+             <i32 as Bar>\n+             <u32 as Bar>\n \n error: aborting due to previous error\n "}, {"sha": "dd83a03fdf691cbcc9b7c623ba4864636848a6fa", "filename": "src/test/ui/chalkify/type_wf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d66452c3e5dfad901099493e8b86f5643d084a32/src%2Ftest%2Fui%2Fchalkify%2Ftype_wf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d66452c3e5dfad901099493e8b86f5643d084a32/src%2Ftest%2Fui%2Fchalkify%2Ftype_wf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Ftype_wf.rs?ref=d66452c3e5dfad901099493e8b86f5643d084a32", "patch": "@@ -15,7 +15,7 @@ fn main() {\n        x: 5,\n     };\n \n-    let s = S { //~ ERROR the trait bound `f64: Foo` is not satisfied\n+    let s = S { //~ ERROR the trait bound `{float}: Foo` is not satisfied\n         x: 5.0,\n     };\n "}, {"sha": "71009f1e97d039db64a05e9eeb62c9b636cae400", "filename": "src/test/ui/chalkify/type_wf.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d66452c3e5dfad901099493e8b86f5643d084a32/src%2Ftest%2Fui%2Fchalkify%2Ftype_wf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d66452c3e5dfad901099493e8b86f5643d084a32/src%2Ftest%2Fui%2Fchalkify%2Ftype_wf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Ftype_wf.stderr?ref=d66452c3e5dfad901099493e8b86f5643d084a32", "patch": "@@ -1,11 +1,15 @@\n-error[E0277]: the trait bound `f64: Foo` is not satisfied\n+error[E0277]: the trait bound `{float}: Foo` is not satisfied\n   --> $DIR/type_wf.rs:18:13\n    |\n LL | struct S<T: Foo> {\n    | ---------------- required by `S`\n ...\n LL |     let s = S {\n-   |             ^ the trait `Foo` is not implemented for `f64`\n+   |             ^ the trait `Foo` is not implemented for `{float}`\n+   |\n+   = help: the following implementations were found:\n+             <i32 as Foo>\n+             <std::option::Option<T> as Foo>\n \n error: aborting due to previous error\n "}]}