{"sha": "8d04b8fda74767c673c59ff78c1d874af0d16651", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkMDRiOGZkYTc0NzY3YzY3M2M1OWZmNzhjMWQ4NzRhZjBkMTY2NTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-02-03T12:02:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-02-03T12:02:33Z"}, "message": "Auto merge of #47962 - kennytm:rollup, r=kennytm\n\nRollup of 10 pull requests\n\n- Successful merges: #46156, #47829, #47842, #47898, #47914, #47916, #47919, #47942, #47951, #47973\n- Failed merges: #47753", "tree": {"sha": "595150f190314bf544726076fa8eca498d334a73", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/595150f190314bf544726076fa8eca498d334a73"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d04b8fda74767c673c59ff78c1d874af0d16651", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d04b8fda74767c673c59ff78c1d874af0d16651", "html_url": "https://github.com/rust-lang/rust/commit/8d04b8fda74767c673c59ff78c1d874af0d16651", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d04b8fda74767c673c59ff78c1d874af0d16651/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c15dffc43d86c316e3d6bf9f9ffd48d8b5f4a3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c15dffc43d86c316e3d6bf9f9ffd48d8b5f4a3e", "html_url": "https://github.com/rust-lang/rust/commit/6c15dffc43d86c316e3d6bf9f9ffd48d8b5f4a3e"}, {"sha": "3a0a423d6129d4f55405ed84828c7f24ff58820e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a0a423d6129d4f55405ed84828c7f24ff58820e", "html_url": "https://github.com/rust-lang/rust/commit/3a0a423d6129d4f55405ed84828c7f24ff58820e"}], "stats": {"total": 227, "additions": 157, "deletions": 70}, "files": [{"sha": "c51674186146be3bc1f076adf32f8bd4a8f1a717", "filename": "src/doc/unstable-book/src/language-features/lang-items.md", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8d04b8fda74767c673c59ff78c1d874af0d16651/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flang-items.md", "raw_url": "https://github.com/rust-lang/rust/raw/8d04b8fda74767c673c59ff78c1d874af0d16651/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flang-items.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flang-items.md?ref=8d04b8fda74767c673c59ff78c1d874af0d16651", "patch": "@@ -37,28 +37,23 @@ unsafe fn allocate(size: usize, _align: usize) -> *mut u8 {\n     p\n }\n \n-#[lang = \"exchange_free\"]\n-unsafe fn deallocate(ptr: *mut u8, _size: usize, _align: usize) {\n-    libc::free(ptr as *mut libc::c_void)\n-}\n-\n #[lang = \"box_free\"]\n unsafe fn box_free<T: ?Sized>(ptr: *mut T) {\n-    deallocate(ptr as *mut u8, ::core::mem::size_of_val(&*ptr), ::core::mem::align_of_val(&*ptr));\n+    libc::free(ptr as *mut libc::c_void)\n }\n \n #[start]\n-fn main(argc: isize, argv: *const *const u8) -> isize {\n-    let x = box 1;\n+fn main(_argc: isize, _argv: *const *const u8) -> isize {\n+    let _x = box 1;\n \n     0\n }\n \n #[lang = \"eh_personality\"] extern fn rust_eh_personality() {}\n #[lang = \"panic_fmt\"] extern fn rust_begin_panic() -> ! { unsafe { intrinsics::abort() } }\n-# #[lang = \"eh_unwind_resume\"] extern fn rust_eh_unwind_resume() {}\n-# #[no_mangle] pub extern fn rust_eh_register_frames () {}\n-# #[no_mangle] pub extern fn rust_eh_unregister_frames () {}\n+#[lang = \"eh_unwind_resume\"] extern fn rust_eh_unwind_resume() {}\n+#[no_mangle] pub extern fn rust_eh_register_frames () {}\n+#[no_mangle] pub extern fn rust_eh_unregister_frames () {}\n ```\n \n Note the use of `abort`: the `exchange_malloc` lang item is assumed to\n@@ -80,7 +75,7 @@ Other features provided by lang items include:\n \n Lang items are loaded lazily by the compiler; e.g. if one never uses\n `Box` then there is no need to define functions for `exchange_malloc`\n-and `exchange_free`. `rustc` will emit an error when an item is needed\n+and `box_free`. `rustc` will emit an error when an item is needed\n but not found in the current crate or any that it depends on.\n \n Most lang items are defined by `libcore`, but if you're trying to build\n@@ -318,4 +313,4 @@ the source code.\n   - `phantom_data`: `libcore/marker.rs`\n   - `freeze`: `libcore/marker.rs`\n   - `debug_trait`: `libcore/fmt/mod.rs`\n-  - `non_zero`: `libcore/nonzero.rs`\n\\ No newline at end of file\n+  - `non_zero`: `libcore/nonzero.rs`"}, {"sha": "a05d67a304fa02669a6cbc6cf3c09b291fd53b40", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d04b8fda74767c673c59ff78c1d874af0d16651/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d04b8fda74767c673c59ff78c1d874af0d16651/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=8d04b8fda74767c673c59ff78c1d874af0d16651", "patch": "@@ -992,7 +992,7 @@ extern \"rust-intrinsic\" {\n     ///         ptr::copy_nonoverlapping(y, x, 1);\n     ///         ptr::copy_nonoverlapping(&t, y, 1);\n     ///\n-    ///         // y and t now point to the same thing, but we need to completely forget `tmp`\n+    ///         // y and t now point to the same thing, but we need to completely forget `t`\n     ///         // because it's no longer relevant.\n     ///         mem::forget(t);\n     ///     }"}, {"sha": "21a0beccbf64d604e32dcfbfd86daa9da116197c", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8d04b8fda74767c673c59ff78c1d874af0d16651/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d04b8fda74767c673c59ff78c1d874af0d16651/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=8d04b8fda74767c673c59ff78c1d874af0d16651", "patch": "@@ -189,6 +189,7 @@ pub fn forget<T>(t: T) {\n /// Type | size_of::\\<Type>()\n /// ---- | ---------------\n /// () | 0\n+/// bool | 1\n /// u8 | 1\n /// u16 | 2\n /// u32 | 4"}, {"sha": "3586fa5442fb44a1712882cbc8864570fa5ea04a", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d04b8fda74767c673c59ff78c1d874af0d16651/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d04b8fda74767c673c59ff78c1d874af0d16651/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=8d04b8fda74767c673c59ff78c1d874af0d16651", "patch": "@@ -239,7 +239,9 @@ impl Float for f32 {\n     /// Converts to degrees, assuming the number is in radians.\n     #[inline]\n     fn to_degrees(self) -> f32 {\n-        self * (180.0f32 / consts::PI)\n+        // Use a constant for better precision.\n+        const PIS_IN_180: f32 = 57.2957795130823208767981548141051703_f32;\n+        self * PIS_IN_180\n     }\n \n     /// Converts to radians, assuming the number is in degrees."}, {"sha": "64c0d508b388cf6b41b8a3df3e0567af55092822", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d04b8fda74767c673c59ff78c1d874af0d16651/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d04b8fda74767c673c59ff78c1d874af0d16651/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=8d04b8fda74767c673c59ff78c1d874af0d16651", "patch": "@@ -237,6 +237,9 @@ impl Float for f64 {\n     /// Converts to degrees, assuming the number is in radians.\n     #[inline]\n     fn to_degrees(self) -> f64 {\n+        // The division here is correctly rounded with respect to the true\n+        // value of 180/\u03c0. (This differs from f32, where a constant must be\n+        // used to ensure a correctly rounded result.)\n         self * (180.0f64 / consts::PI)\n     }\n "}, {"sha": "7d416f13ffc8a0f77d5f951c1641c2e07534d0f2", "filename": "src/librustc_errors/snippet.rs", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8d04b8fda74767c673c59ff78c1d874af0d16651/src%2Flibrustc_errors%2Fsnippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d04b8fda74767c673c59ff78c1d874af0d16651/src%2Flibrustc_errors%2Fsnippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fsnippet.rs?ref=8d04b8fda74767c673c59ff78c1d874af0d16651", "patch": "@@ -10,32 +10,8 @@\n \n // Code for annotating snippets.\n \n-use syntax_pos::{Span, FileMap};\n-use CodeMapper;\n-use std::rc::Rc;\n use Level;\n \n-#[derive(Clone)]\n-pub struct SnippetData {\n-    codemap: Rc<CodeMapper>,\n-    files: Vec<FileInfo>,\n-}\n-\n-#[derive(Clone)]\n-pub struct FileInfo {\n-    file: Rc<FileMap>,\n-\n-    /// The \"primary file\", if any, gets a `-->` marker instead of\n-    /// `>>>`, and has a line-number/column printed and not just a\n-    /// filename (other files are not guaranteed to have line numbers\n-    /// or columns). It appears first in the listing. It is known to\n-    /// contain at least one primary span, though primary spans (which\n-    /// are designated with `^^^`) may also occur in other files.\n-    primary_span: Option<Span>,\n-\n-    lines: Vec<Line>,\n-}\n-\n #[derive(Clone, Debug, PartialOrd, Ord, PartialEq, Eq)]\n pub struct Line {\n     pub line_index: usize,"}, {"sha": "80990bcc080891ef93478a602019248137560710", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d04b8fda74767c673c59ff78c1d874af0d16651/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d04b8fda74767c673c59ff78c1d874af0d16651/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=8d04b8fda74767c673c59ff78c1d874af0d16651", "patch": "@@ -396,8 +396,7 @@ impl<'a, 'gcx, 'tcx> Borrows<'a, 'gcx, 'tcx> {\n                         // Issue #46746: Two-phase borrows handles\n                         // stmts of form `Tmp = &mut Borrow` ...\n                         match lhs {\n-                            Place::Local(..) => {} // okay\n-                            Place::Static(..) => unreachable!(), // (filtered by is_unsafe_place)\n+                            Place::Local(..) | Place::Static(..) => {} // okay\n                             Place::Projection(..) => {\n                                 // ... can assign into projections,\n                                 // e.g. `box (&mut _)`. Current"}, {"sha": "008c71cc9ce3d2129a892f08753ff1c4e2eb8faa", "filename": "src/librustc_passes/loops.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8d04b8fda74767c673c59ff78c1d874af0d16651/src%2Flibrustc_passes%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d04b8fda74767c673c59ff78c1d874af0d16651/src%2Flibrustc_passes%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Floops.rs?ref=8d04b8fda74767c673c59ff78c1d874af0d16651", "patch": "@@ -119,6 +119,11 @@ impl<'a, 'hir> Visitor<'hir> for CheckLoopVisitor<'a, 'hir> {\n                                              kind.name())\n                                 .span_label(e.span,\n                                             \"can only break with a value inside `loop`\")\n+                                .span_suggestion(e.span,\n+                                                 &format!(\"instead, use `break` on its own \\\n+                                                           without a value inside this `{}` loop\",\n+                                                          kind.name()),\n+                                                 \"break\".to_string())\n                                 .emit();\n                         }\n                     }"}, {"sha": "2b1f920bba0b3cc439a2cc171a3c168b9a48a7a1", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/8d04b8fda74767c673c59ff78c1d874af0d16651/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/8d04b8fda74767c673c59ff78c1d874af0d16651/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=8d04b8fda74767c673c59ff78c1d874af0d16651", "patch": "@@ -181,15 +181,19 @@ nav.sub {\n \toverflow: auto;\n }\n \n-.sidebar .current {\n+.sidebar .block > ul > li {\n \tmargin-right: -20px;\n }\n \n-.content, nav { max-width: 960px; }\n+.content, nav {\n+\tmax-width: 960px;\n+}\n \n /* Everything else */\n \n-.js-only, .hidden { display: none !important; }\n+.js-only, .hidden {\n+\tdisplay: none !important;\n+}\n \n .sidebar img {\n \tmargin: 20px auto;\n@@ -218,7 +222,9 @@ nav.sub {\n \tborder: none;\n }\n \n-.location a:first-child { font-weight: 500; }\n+.location a:first-child {\n+\tfont-weight: 500;\n+}\n \n .block {\n \tpadding: 0;\n@@ -299,7 +305,9 @@ nav.sub {\n \t-ms-user-select: none;\n \tuser-select: none;\n }\n-.line-numbers span { cursor: pointer; }\n+.line-numbers span {\n+\tcursor: pointer;\n+}\n \n .docblock-short p {\n \tdisplay: inline;\n@@ -317,7 +325,9 @@ nav.sub {\n \ttext-overflow: ellipsis;\n \tmargin: 0;\n }\n-.docblock-short code { white-space: nowrap; }\n+.docblock-short code {\n+\twhite-space: nowrap;\n+}\n \n .docblock h1, .docblock h2, .docblock h3, .docblock h4, .docblock h5 {\n \tborder-bottom: 1px solid;\n@@ -384,7 +394,9 @@ h4 > code, h3 > code, .invisible > code {\n \tdisplay: inline-block;\n }\n \n-#main { position: relative; }\n+#main {\n+\tposition: relative;\n+}\n #main > .since {\n \ttop: inherit;\n \tfont-family: \"Fira Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n@@ -428,7 +440,9 @@ h4 > code, h3 > code, .invisible > code {\n \tpadding: 0;\n }\n \n-.content .item-list li { margin-bottom: 1em; }\n+.content .item-list li {\n+\tmargin-bottom: 1em;\n+}\n \n .content .multi-column {\n \t-moz-column-count: 5;"}, {"sha": "ecf68f29d6f1f7c80c4324d1c71073b09a8a019c", "filename": "src/libstd/f32.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8d04b8fda74767c673c59ff78c1d874af0d16651/src%2Flibstd%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d04b8fda74767c673c59ff78c1d874af0d16651/src%2Flibstd%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff32.rs?ref=8d04b8fda74767c673c59ff78c1d874af0d16651", "patch": "@@ -1531,6 +1531,7 @@ mod tests {\n         assert!(nan.to_degrees().is_nan());\n         assert_eq!(inf.to_degrees(), inf);\n         assert_eq!(neg_inf.to_degrees(), neg_inf);\n+        assert_eq!(1_f32.to_degrees(), 57.2957795130823208767981548141051703);\n     }\n \n     #[test]"}, {"sha": "11ab84a572916e76edc6f7473f6e4cb17cf74787", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/8d04b8fda74767c673c59ff78c1d874af0d16651/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d04b8fda74767c673c59ff78c1d874af0d16651/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=8d04b8fda74767c673c59ff78c1d874af0d16651", "patch": "@@ -246,14 +246,27 @@ impl<'a> StringReader<'a> {\n         self.err_span(self.mk_sp(from_pos, to_pos), m)\n     }\n \n+    /// Pushes a character to a message string for error reporting\n+    fn push_escaped_char_for_msg(m: &mut String, c: char) {\n+        match c {\n+            '\\u{20}'...'\\u{7e}' => {\n+                // Don't escape \\, ' or \" for user-facing messages\n+                m.push(c);\n+            }\n+            _ => {\n+                for c in c.escape_default() {\n+                    m.push(c);\n+                }\n+            }\n+        }\n+    }\n+\n     /// Report a lexical error spanning [`from_pos`, `to_pos`), appending an\n     /// escaped character to the error message\n     fn fatal_span_char(&self, from_pos: BytePos, to_pos: BytePos, m: &str, c: char) -> FatalError {\n         let mut m = m.to_string();\n         m.push_str(\": \");\n-        for c in c.escape_default() {\n-            m.push(c)\n-        }\n+        Self::push_escaped_char_for_msg(&mut m, c);\n         self.fatal_span_(from_pos, to_pos, &m[..])\n     }\n     fn struct_fatal_span_char(&self,\n@@ -264,9 +277,7 @@ impl<'a> StringReader<'a> {\n                               -> DiagnosticBuilder<'a> {\n         let mut m = m.to_string();\n         m.push_str(\": \");\n-        for c in c.escape_default() {\n-            m.push(c)\n-        }\n+        Self::push_escaped_char_for_msg(&mut m, c);\n         self.sess.span_diagnostic.struct_span_fatal(self.mk_sp(from_pos, to_pos), &m[..])\n     }\n \n@@ -275,9 +286,7 @@ impl<'a> StringReader<'a> {\n     fn err_span_char(&self, from_pos: BytePos, to_pos: BytePos, m: &str, c: char) {\n         let mut m = m.to_string();\n         m.push_str(\": \");\n-        for c in c.escape_default() {\n-            m.push(c)\n-        }\n+        Self::push_escaped_char_for_msg(&mut m, c);\n         self.err_span_(from_pos, to_pos, &m[..]);\n     }\n     fn struct_err_span_char(&self,\n@@ -288,9 +297,7 @@ impl<'a> StringReader<'a> {\n                             -> DiagnosticBuilder<'a> {\n         let mut m = m.to_string();\n         m.push_str(\": \");\n-        for c in c.escape_default() {\n-            m.push(c)\n-        }\n+        Self::push_escaped_char_for_msg(&mut m, c);\n         self.sess.span_diagnostic.struct_span_err(self.mk_sp(from_pos, to_pos), &m[..])\n     }\n "}, {"sha": "294506625bc05bc1c07f9ae6f3b3816630821b66", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8d04b8fda74767c673c59ff78c1d874af0d16651/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d04b8fda74767c673c59ff78c1d874af0d16651/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=8d04b8fda74767c673c59ff78c1d874af0d16651", "patch": "@@ -347,13 +347,24 @@ impl Span {\n \n     /// Return a `Span` that would enclose both `self` and `end`.\n     pub fn to(self, end: Span) -> Span {\n-        let span = self.data();\n-        let end = end.data();\n+        let span_data = self.data();\n+        let end_data = end.data();\n+        // FIXME(jseyfried): self.ctxt should always equal end.ctxt here (c.f. issue #23480)\n+        // Return the macro span on its own to avoid weird diagnostic output. It is preferable to\n+        // have an incomplete span than a completely nonsensical one.\n+        if span_data.ctxt != end_data.ctxt {\n+            if span_data.ctxt == SyntaxContext::empty() {\n+                return end;\n+            } else if end_data.ctxt == SyntaxContext::empty() {\n+                return self;\n+            }\n+            // both span fall within a macro\n+            // FIXME(estebank) check if it is the *same* macro\n+        }\n         Span::new(\n-            cmp::min(span.lo, end.lo),\n-            cmp::max(span.hi, end.hi),\n-            // FIXME(jseyfried): self.ctxt should always equal end.ctxt here (c.f. issue #23480)\n-            if span.ctxt == SyntaxContext::empty() { end.ctxt } else { span.ctxt },\n+            cmp::min(span_data.lo, end_data.lo),\n+            cmp::max(span_data.hi, end_data.hi),\n+            if span_data.ctxt == SyntaxContext::empty() { end_data.ctxt } else { span_data.ctxt },\n         )\n     }\n "}, {"sha": "821015ece77124acff5bd042fc7e4d21960964a4", "filename": "src/test/parse-fail/bad-char-literals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d04b8fda74767c673c59ff78c1d874af0d16651/src%2Ftest%2Fparse-fail%2Fbad-char-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d04b8fda74767c673c59ff78c1d874af0d16651/src%2Ftest%2Fparse-fail%2Fbad-char-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fbad-char-literals.rs?ref=8d04b8fda74767c673c59ff78c1d874af0d16651", "patch": "@@ -15,7 +15,7 @@\n fn main() {\n     // these literals are just silly.\n     ''';\n-    //~^ ERROR: character constant must be escaped: \\'\n+    //~^ ERROR: character constant must be escaped: '\n \n     // note that this is a literal \"\\n\" byte\n     '"}, {"sha": "b6042bbdc1a2699c60729045a6763e295e0824a2", "filename": "src/test/parse-fail/lex-stray-backslash.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8d04b8fda74767c673c59ff78c1d874af0d16651/src%2Ftest%2Fparse-fail%2Flex-stray-backslash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d04b8fda74767c673c59ff78c1d874af0d16651/src%2Ftest%2Fparse-fail%2Flex-stray-backslash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Flex-stray-backslash.rs?ref=8d04b8fda74767c673c59ff78c1d874af0d16651", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z parse-only\n+\n+\\ //~ ERROR: unknown start of token: \\"}, {"sha": "3148939992caf49645dd8ea98518c336b91bb211", "filename": "src/test/run-pass/issue-47789.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8d04b8fda74767c673c59ff78c1d874af0d16651/src%2Ftest%2Frun-pass%2Fissue-47789.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d04b8fda74767c673c59ff78c1d874af0d16651/src%2Ftest%2Frun-pass%2Fissue-47789.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-47789.rs?ref=8d04b8fda74767c673c59ff78c1d874af0d16651", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+#![feature(nll)]\n+\n+static mut x: &'static u32 = &0;\n+\n+fn foo() {\n+    unsafe { x = &1; }\n+}\n+\n+fn main() { }"}, {"sha": "982de00b4fa7c37ea89f6f4a500d3eb176423b98", "filename": "src/test/ui/loop-break-value-no-repeat.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d04b8fda74767c673c59ff78c1d874af0d16651/src%2Ftest%2Fui%2Floop-break-value-no-repeat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d04b8fda74767c673c59ff78c1d874af0d16651/src%2Ftest%2Fui%2Floop-break-value-no-repeat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floop-break-value-no-repeat.stderr?ref=8d04b8fda74767c673c59ff78c1d874af0d16651", "patch": "@@ -3,6 +3,10 @@ error[E0571]: `break` with value from a `for` loop\n    |\n 22 |         break 22 //~ ERROR `break` with value from a `for` loop\n    |         ^^^^^^^^ can only break with a value inside `loop`\n+help: instead, use `break` on its own without a value inside this `for` loop\n+   |\n+22 |         break //~ ERROR `break` with value from a `for` loop\n+   |         ^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "bfc137fc7b26d3cccf9f18fa4b9cfbd9c6d693ef", "filename": "src/test/ui/macros/span-covering-argument-1.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8d04b8fda74767c673c59ff78c1d874af0d16651/src%2Ftest%2Fui%2Fmacros%2Fspan-covering-argument-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d04b8fda74767c673c59ff78c1d874af0d16651/src%2Ftest%2Fui%2Fmacros%2Fspan-covering-argument-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fspan-covering-argument-1.rs?ref=8d04b8fda74767c673c59ff78c1d874af0d16651", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+macro_rules! bad {\n+    ($s:ident whatever) => {\n+        {\n+            let $s = 0;\n+            *&mut $s = 0;\n+            //~^ ERROR cannot borrow immutable local variable `foo` as mutable [E0596]\n+        }\n+    }\n+}\n+\n+fn main() {\n+    bad!(foo whatever);\n+}"}, {"sha": "677d2f10fd6c9dfdcdca2330526be0a1514a6875", "filename": "src/test/ui/macros/span-covering-argument-1.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8d04b8fda74767c673c59ff78c1d874af0d16651/src%2Ftest%2Fui%2Fmacros%2Fspan-covering-argument-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d04b8fda74767c673c59ff78c1d874af0d16651/src%2Ftest%2Fui%2Fmacros%2Fspan-covering-argument-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fspan-covering-argument-1.stderr?ref=8d04b8fda74767c673c59ff78c1d874af0d16651", "patch": "@@ -0,0 +1,13 @@\n+error[E0596]: cannot borrow immutable local variable `foo` as mutable\n+  --> $DIR/span-covering-argument-1.rs:15:19\n+   |\n+14 |             let $s = 0;\n+   |                 -- consider changing this to `mut $s`\n+15 |             *&mut $s = 0;\n+   |                   ^^ cannot borrow mutably\n+...\n+22 |     bad!(foo whatever);\n+   |     ------------------- in this macro invocation\n+\n+error: aborting due to previous error\n+"}, {"sha": "728cd12e2c6855c8648e8592244db856a4ffc5f7", "filename": "src/test/ui/span/macro-span-replacement.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d04b8fda74767c673c59ff78c1d874af0d16651/src%2Ftest%2Fui%2Fspan%2Fmacro-span-replacement.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d04b8fda74767c673c59ff78c1d874af0d16651/src%2Ftest%2Fui%2Fspan%2Fmacro-span-replacement.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmacro-span-replacement.stderr?ref=8d04b8fda74767c673c59ff78c1d874af0d16651", "patch": "@@ -1,8 +1,8 @@\n warning: struct is never used: `S`\n-  --> $DIR/macro-span-replacement.rs:17:9\n+  --> $DIR/macro-span-replacement.rs:17:14\n    |\n 17 |         $b $a; //~ WARN struct is never used\n-   |         ^^^^^^\n+   |              ^\n ...\n 22 |     m!(S struct);\n    |     ------------- in this macro invocation"}]}