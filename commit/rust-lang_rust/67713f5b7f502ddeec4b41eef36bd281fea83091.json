{"sha": "67713f5b7f502ddeec4b41eef36bd281fea83091", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3NzEzZjViN2Y1MDJkZGVlYzRiNDFlZWYzNmJkMjgxZmVhODMwOTE=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-01-04T18:30:54Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-01-05T20:46:19Z"}, "message": "privacy: Fix regression in impl reachability", "tree": {"sha": "3ff5bf99f32a5a05dcf3816a0b3704e92404b017", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ff5bf99f32a5a05dcf3816a0b3704e92404b017"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67713f5b7f502ddeec4b41eef36bd281fea83091", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67713f5b7f502ddeec4b41eef36bd281fea83091", "html_url": "https://github.com/rust-lang/rust/commit/67713f5b7f502ddeec4b41eef36bd281fea83091", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67713f5b7f502ddeec4b41eef36bd281fea83091/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68fe5182c967259ef89dbe313e4bf80f45a53e7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/68fe5182c967259ef89dbe313e4bf80f45a53e7e", "html_url": "https://github.com/rust-lang/rust/commit/68fe5182c967259ef89dbe313e4bf80f45a53e7e"}], "stats": {"total": 33, "additions": 30, "deletions": 3}, "files": [{"sha": "2f0d53f1d81bd5146f037ee5018e97beb34a047a", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/67713f5b7f502ddeec4b41eef36bd281fea83091/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67713f5b7f502ddeec4b41eef36bd281fea83091/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=67713f5b7f502ddeec4b41eef36bd281fea83091", "patch": "@@ -51,6 +51,7 @@ mod diagnostics;\n /// in `impl Trait`, see individual commits in `DefIdVisitorSkeleton::visit_ty`.\n trait DefIdVisitor<'a, 'tcx: 'a> {\n     fn tcx(&self) -> TyCtxt<'a, 'tcx, 'tcx>;\n+    fn recurse(&self) -> bool { true }\n     fn recurse_into_assoc_tys(&self) -> bool { true }\n     fn visit_def_id(&mut self, def_id: DefId, kind: &str, descr: &dyn fmt::Display) -> bool;\n \n@@ -86,7 +87,8 @@ impl<'a, 'tcx, V> DefIdVisitorSkeleton<'_, 'a, 'tcx, V>\n {\n     fn visit_trait(&mut self, trait_ref: TraitRef<'tcx>) -> bool {\n         let TraitRef { def_id, substs } = trait_ref;\n-        self.def_id_visitor.visit_def_id(def_id, \"trait\", &trait_ref) || substs.visit_with(self)\n+        self.def_id_visitor.visit_def_id(def_id, \"trait\", &trait_ref) ||\n+        self.def_id_visitor.recurse() && substs.visit_with(self)\n     }\n \n     fn visit_predicates(&mut self, predicates: Lrc<ty::GenericPredicates<'tcx>>) -> bool {\n@@ -167,7 +169,7 @@ impl<'a, 'tcx, V> TypeVisitor<'tcx> for DefIdVisitorSkeleton<'_, 'a, 'tcx, V>\n                     // free type aliases, but this isn't done yet.\n                     return false;\n                 }\n-                // This will also visit substs, so we don't need to recurse.\n+                // This will also visit substs if necessary, so we don't need to recurse.\n                 return self.visit_trait(proj.trait_ref(tcx));\n             }\n             ty::Dynamic(predicates, ..) => {\n@@ -206,7 +208,7 @@ impl<'a, 'tcx, V> TypeVisitor<'tcx> for DefIdVisitorSkeleton<'_, 'a, 'tcx, V>\n                 bug!(\"unexpected type: {:?}\", ty),\n         }\n \n-        ty.super_visit_with(self)\n+        self.def_id_visitor.recurse() && ty.super_visit_with(self)\n     }\n }\n \n@@ -325,6 +327,7 @@ struct FindMin<'a, 'tcx, VL: VisibilityLike> {\n \n impl<'a, 'tcx, VL: VisibilityLike> DefIdVisitor<'a, 'tcx> for FindMin<'a, 'tcx, VL> {\n     fn tcx(&self) -> TyCtxt<'a, 'tcx, 'tcx> { self.tcx }\n+    fn recurse(&self) -> bool { VL::RECURSE }\n     fn recurse_into_assoc_tys(&self) -> bool { false }\n     fn visit_def_id(&mut self, def_id: DefId, _kind: &str, _descr: &dyn fmt::Display) -> bool {\n         self.min = VL::new_min(self, def_id);\n@@ -334,6 +337,7 @@ impl<'a, 'tcx, VL: VisibilityLike> DefIdVisitor<'a, 'tcx> for FindMin<'a, 'tcx,\n \n trait VisibilityLike: Sized {\n     const MAX: Self;\n+    const RECURSE: bool = true;\n     fn new_min<'a, 'tcx>(find: &FindMin<'a, 'tcx, Self>, def_id: DefId) -> Self;\n \n     // Returns an over-approximation (`recurse_into_assoc_tys` = false) of visibility due to\n@@ -357,6 +361,12 @@ impl VisibilityLike for ty::Visibility {\n }\n impl VisibilityLike for Option<AccessLevel> {\n     const MAX: Self = Some(AccessLevel::Public);\n+    // Type inference is very smart sometimes.\n+    // It can make an impl reachable even some components of its type or trait are unreachable.\n+    // E.g. methods of `impl ReachableTrait<UnreachableTy> for ReachableTy<UnreachableTy> { ... }`\n+    // can be usable from other crates (#57264). So we skip substs when calculating reachability\n+    // and consider an impl reachable if its \"primary\" type and trait are reachable.\n+    const RECURSE: bool = false;\n     fn new_min<'a, 'tcx>(find: &FindMin<'a, 'tcx, Self>, def_id: DefId) -> Self {\n         cmp::min(if let Some(node_id) = find.tcx.hir().as_local_node_id(def_id) {\n             find.access_levels.map.get(&node_id).cloned()"}, {"sha": "9302fa0d9e8d115bda78bd1d890e12444e2e2827", "filename": "src/test/ui/privacy/auxiliary/issue-57264.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/67713f5b7f502ddeec4b41eef36bd281fea83091/src%2Ftest%2Fui%2Fprivacy%2Fauxiliary%2Fissue-57264.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67713f5b7f502ddeec4b41eef36bd281fea83091/src%2Ftest%2Fui%2Fprivacy%2Fauxiliary%2Fissue-57264.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fauxiliary%2Fissue-57264.rs?ref=67713f5b7f502ddeec4b41eef36bd281fea83091", "patch": "@@ -0,0 +1,9 @@\n+mod inner {\n+    pub struct PubUnnameable;\n+}\n+\n+pub struct Pub<T>(T);\n+\n+impl Pub<inner::PubUnnameable> {\n+    pub fn pub_method() {}\n+}"}, {"sha": "57e9960a058fe65888493200271af83376aa213c", "filename": "src/test/ui/privacy/issue-57264.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/67713f5b7f502ddeec4b41eef36bd281fea83091/src%2Ftest%2Fui%2Fprivacy%2Fissue-57264.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67713f5b7f502ddeec4b41eef36bd281fea83091/src%2Ftest%2Fui%2Fprivacy%2Fissue-57264.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fissue-57264.rs?ref=67713f5b7f502ddeec4b41eef36bd281fea83091", "patch": "@@ -0,0 +1,8 @@\n+// compile-pass\n+// aux-build:issue-57264.rs\n+\n+extern crate issue_57264;\n+\n+fn main() {\n+    issue_57264::Pub::pub_method();\n+}"}]}