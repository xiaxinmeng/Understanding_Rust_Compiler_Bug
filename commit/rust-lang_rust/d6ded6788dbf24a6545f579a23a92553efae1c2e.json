{"sha": "d6ded6788dbf24a6545f579a23a92553efae1c2e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2ZGVkNjc4OGRiZjI0YTY1NDVmNTc5YTIzYTkyNTUzZWZhZTFjMmU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-18T22:26:05Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-18T22:26:05Z"}, "message": "core: vec::filter_map doesn't require a copyable T", "tree": {"sha": "d67c00557f5902249c8775f63dc7f8a25261b4ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d67c00557f5902249c8775f63dc7f8a25261b4ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6ded6788dbf24a6545f579a23a92553efae1c2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6ded6788dbf24a6545f579a23a92553efae1c2e", "html_url": "https://github.com/rust-lang/rust/commit/d6ded6788dbf24a6545f579a23a92553efae1c2e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6ded6788dbf24a6545f579a23a92553efae1c2e/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "132266b2cbb0f92608fb7f1fca90d2b743f7759d", "url": "https://api.github.com/repos/rust-lang/rust/commits/132266b2cbb0f92608fb7f1fca90d2b743f7759d", "html_url": "https://github.com/rust-lang/rust/commit/132266b2cbb0f92608fb7f1fca90d2b743f7759d"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "09292fc11612071b0b64f2a0a1199bf6166700fd", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6ded6788dbf24a6545f579a23a92553efae1c2e/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6ded6788dbf24a6545f579a23a92553efae1c2e/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=d6ded6788dbf24a6545f579a23a92553efae1c2e", "patch": "@@ -430,7 +430,7 @@ Apply a function to each element of a vector and return the results\n If function `f` returns `none` then that element is excluded from\n the resulting vector.\n \"]\n-fn filter_map<T: copy, U: copy>(v: [T], f: fn(T) -> option<U>)\n+fn filter_map<T, U: copy>(v: [T], f: fn(T) -> option<U>)\n     -> [U] {\n     let mut result = [];\n     for elem: T in v {"}]}