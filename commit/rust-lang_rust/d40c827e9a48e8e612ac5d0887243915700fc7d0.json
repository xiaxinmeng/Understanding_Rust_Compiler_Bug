{"sha": "d40c827e9a48e8e612ac5d0887243915700fc7d0", "node_id": "C_kwDOAAsO6NoAKGQ0MGM4MjdlOWE0OGU4ZTYxMmFjNWQwODg3MjQzOTE1NzAwZmM3ZDA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-04-12T20:04:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-12T20:04:32Z"}, "message": "Rollup merge of #110035 - Ezrashaw:improve-test-attr-expansion-code, r=davidtwco\n\nfix: ensure bad `#[test]` invocs retain correct AST\n\nFixes #109816\n\nEnsures that a `StmtKind::Item` doesn't get converted into a plain `Item` (causing the ICE from the linked issue) Also unifies the error path a bit.", "tree": {"sha": "16a4d3c476025b6f45f9c49c09c906d852cbd447", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16a4d3c476025b6f45f9c49c09c906d852cbd447"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d40c827e9a48e8e612ac5d0887243915700fc7d0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkNw7QCRBK7hj4Ov3rIwAAwFUIABGU0lN7MWychSIUL5PzrIMW\nYZtAHuGDM3bF4LEzevPnwkHoSJ0Ys9xoV9rqNG1EdMd/Y/CtY6cqb1xpsfA7dO25\nBrNuQk4xNHQ/PC8eBYx48ulU+oFVHCu9I4nWOlcwH+JUg2w/1aNkcK6Bmbz1BAp7\nM2aqe9Akb66C/5HIrm1RGshaJCYOGVaTrmEDGMaWnQMBKVR4CYIU1V1+K7zVTSFR\nfLIkOV9G8xzw6jR+D5cX/RcHnOncb5dkHH7zfyxKmB/A2dJj56+kpplgYVEGLlwH\nEO3gzTLl+uqpfW74rp0FRqddqQlWHky8RxIQWFbNm+ITqIJFU1z7qysBbDBDuko=\n=h96K\n-----END PGP SIGNATURE-----\n", "payload": "tree 16a4d3c476025b6f45f9c49c09c906d852cbd447\nparent 559b2ea531a695db2b23105bbdb767e0aac8b9f4\nparent 9e70541eacf60f8ed0b38d7b62315cd730a00821\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1681329872 +0200\ncommitter GitHub <noreply@github.com> 1681329872 +0200\n\nRollup merge of #110035 - Ezrashaw:improve-test-attr-expansion-code, r=davidtwco\n\nfix: ensure bad `#[test]` invocs retain correct AST\n\nFixes #109816\n\nEnsures that a `StmtKind::Item` doesn't get converted into a plain `Item` (causing the ICE from the linked issue) Also unifies the error path a bit.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d40c827e9a48e8e612ac5d0887243915700fc7d0", "html_url": "https://github.com/rust-lang/rust/commit/d40c827e9a48e8e612ac5d0887243915700fc7d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d40c827e9a48e8e612ac5d0887243915700fc7d0/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "559b2ea531a695db2b23105bbdb767e0aac8b9f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/559b2ea531a695db2b23105bbdb767e0aac8b9f4", "html_url": "https://github.com/rust-lang/rust/commit/559b2ea531a695db2b23105bbdb767e0aac8b9f4"}, {"sha": "9e70541eacf60f8ed0b38d7b62315cd730a00821", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e70541eacf60f8ed0b38d7b62315cd730a00821", "html_url": "https://github.com/rust-lang/rust/commit/9e70541eacf60f8ed0b38d7b62315cd730a00821"}], "stats": {"total": 151, "additions": 97, "deletions": 54}, "files": [{"sha": "79d8be2484b5978bf513e3037def717b70848d8d", "filename": "compiler/rustc_builtin_macros/src/test.rs", "status": "modified", "additions": 40, "deletions": 22, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/d40c827e9a48e8e612ac5d0887243915700fc7d0/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d40c827e9a48e8e612ac5d0887243915700fc7d0/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs?ref=d40c827e9a48e8e612ac5d0887243915700fc7d0", "patch": "@@ -118,34 +118,22 @@ pub fn expand_test_or_bench(\n             }\n         }\n         other => {\n-            cx.struct_span_err(\n-                other.span(),\n-                \"`#[test]` attribute is only allowed on non associated functions\",\n-            )\n-            .emit();\n+            not_testable_error(cx, attr_sp, None);\n             return vec![other];\n         }\n     };\n \n-    // Note: non-associated fn items are already handled by `expand_test_or_bench`\n     let ast::ItemKind::Fn(fn_) = &item.kind else {\n-        let diag = &cx.sess.parse_sess.span_diagnostic;\n-        let msg = \"the `#[test]` attribute may only be used on a non-associated function\";\n-        let mut err = match item.kind {\n-            // These were a warning before #92959 and need to continue being that to avoid breaking\n-            // stable user code (#94508).\n-            ast::ItemKind::MacCall(_) => diag.struct_span_warn(attr_sp, msg),\n-            // `.forget_guarantee()` needed to get these two arms to match types. Because of how\n-            // locally close the `.emit()` call is I'm comfortable with it, but if it can be\n-            // reworked in the future to not need it, it'd be nice.\n-            _ => diag.struct_span_err(attr_sp, msg).forget_guarantee(),\n+        not_testable_error(cx, attr_sp, Some(&item));\n+        return if is_stmt {\n+            vec![Annotatable::Stmt(P(ast::Stmt {\n+                id: ast::DUMMY_NODE_ID,\n+                span: item.span,\n+                kind: ast::StmtKind::Item(item),\n+            }))]\n+        } else {\n+            vec![Annotatable::Item(item)]\n         };\n-        err.span_label(attr_sp, \"the `#[test]` macro causes a function to be run on a test and has no effect on non-functions\")\n-            .span_label(item.span, format!(\"expected a non-associated function, found {} {}\", item.kind.article(), item.kind.descr()))\n-            .span_suggestion(attr_sp, \"replace with conditional compilation to make the item only exist when tests are being run\", \"#[cfg(test)]\", Applicability::MaybeIncorrect)\n-            .emit();\n-\n-        return vec![Annotatable::Item(item)];\n     };\n \n     // has_*_signature will report any errors in the type so compilation\n@@ -398,6 +386,36 @@ pub fn expand_test_or_bench(\n     }\n }\n \n+fn not_testable_error(cx: &ExtCtxt<'_>, attr_sp: Span, item: Option<&ast::Item>) {\n+    let diag = &cx.sess.parse_sess.span_diagnostic;\n+    let msg = \"the `#[test]` attribute may only be used on a non-associated function\";\n+    let mut err = match item.map(|i| &i.kind) {\n+        // These were a warning before #92959 and need to continue being that to avoid breaking\n+        // stable user code (#94508).\n+        Some(ast::ItemKind::MacCall(_)) => diag.struct_span_warn(attr_sp, msg),\n+        // `.forget_guarantee()` needed to get these two arms to match types. Because of how\n+        // locally close the `.emit()` call is I'm comfortable with it, but if it can be\n+        // reworked in the future to not need it, it'd be nice.\n+        _ => diag.struct_span_err(attr_sp, msg).forget_guarantee(),\n+    };\n+    if let Some(item) = item {\n+        err.span_label(\n+            item.span,\n+            format!(\n+                \"expected a non-associated function, found {} {}\",\n+                item.kind.article(),\n+                item.kind.descr()\n+            ),\n+        );\n+    }\n+    err.span_label(attr_sp, \"the `#[test]` macro causes a function to be run as a test and has no effect on non-functions\")\n+        .span_suggestion(attr_sp,\n+            \"replace with conditional compilation to make the item only exist when tests are being run\",\n+            \"#[cfg(test)]\",\n+            Applicability::MaybeIncorrect)\n+        .emit();\n+}\n+\n fn get_location_info(cx: &ExtCtxt<'_>, item: &ast::Item) -> (Symbol, usize, usize, usize, usize) {\n     let span = item.ident.span;\n     let (source_file, lo_line, lo_col, hi_line, hi_col) ="}, {"sha": "21fe5bc53b7578b2e0eb521b8b4201d5674c8402", "filename": "tests/ui/test-attrs/issue-109816.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d40c827e9a48e8e612ac5d0887243915700fc7d0/tests%2Fui%2Ftest-attrs%2Fissue-109816.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d40c827e9a48e8e612ac5d0887243915700fc7d0/tests%2Fui%2Ftest-attrs%2Fissue-109816.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftest-attrs%2Fissue-109816.rs?ref=d40c827e9a48e8e612ac5d0887243915700fc7d0", "patch": "@@ -0,0 +1,7 @@\n+// compile-flags: --test\n+\n+fn align_offset_weird_strides() {\n+    #[test]\n+    //~^ ERROR the `#[test]` attribute may only be used on a non-associated function\n+    struct A5(u32, u8);\n+}"}, {"sha": "e6993287555569645afacc17730e1e2322a6c6f4", "filename": "tests/ui/test-attrs/issue-109816.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d40c827e9a48e8e612ac5d0887243915700fc7d0/tests%2Fui%2Ftest-attrs%2Fissue-109816.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d40c827e9a48e8e612ac5d0887243915700fc7d0/tests%2Fui%2Ftest-attrs%2Fissue-109816.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftest-attrs%2Fissue-109816.stderr?ref=d40c827e9a48e8e612ac5d0887243915700fc7d0", "patch": "@@ -0,0 +1,16 @@\n+error: the `#[test]` attribute may only be used on a non-associated function\n+  --> $DIR/issue-109816.rs:4:5\n+   |\n+LL |     #[test]\n+   |     ^^^^^^^ the `#[test]` macro causes a function to be run as a test and has no effect on non-functions\n+LL |\n+LL |     struct A5(u32, u8);\n+   |     ------------------- expected a non-associated function, found a struct\n+   |\n+help: replace with conditional compilation to make the item only exist when tests are being run\n+   |\n+LL |     #[cfg(test)]\n+   |\n+\n+error: aborting due to previous error\n+"}, {"sha": "2481919b616eda82d7d29752a681b0b8f8d8f22e", "filename": "tests/ui/test-attrs/test-attr-non-associated-functions.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d40c827e9a48e8e612ac5d0887243915700fc7d0/tests%2Fui%2Ftest-attrs%2Ftest-attr-non-associated-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d40c827e9a48e8e612ac5d0887243915700fc7d0/tests%2Fui%2Ftest-attrs%2Ftest-attr-non-associated-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftest-attrs%2Ftest-attr-non-associated-functions.rs?ref=d40c827e9a48e8e612ac5d0887243915700fc7d0", "patch": "@@ -1,18 +1,16 @@\n-// #[test] attribute is not allowed on associated functions or methods\n-// reworded error message\n // compile-flags:--test\n \n struct A {}\n \n impl A {\n     #[test]\n+    //~^ ERROR the `#[test]` attribute may only be used on a non-associated function\n     fn new() -> A {\n-        //~^ ERROR `#[test]` attribute is only allowed on non associated functions\n         A {}\n     }\n     #[test]\n+    //~^ ERROR the `#[test]` attribute may only be used on a non-associated function\n     fn recovery_witness() -> A {\n-        //~^ ERROR `#[test]` attribute is only allowed on non associated functions\n         A {}\n     }\n }"}, {"sha": "3e3a951aff3e985575ffeb7f80ffad661086ee5c", "filename": "tests/ui/test-attrs/test-attr-non-associated-functions.stderr", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/d40c827e9a48e8e612ac5d0887243915700fc7d0/tests%2Fui%2Ftest-attrs%2Ftest-attr-non-associated-functions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d40c827e9a48e8e612ac5d0887243915700fc7d0/tests%2Fui%2Ftest-attrs%2Ftest-attr-non-associated-functions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftest-attrs%2Ftest-attr-non-associated-functions.stderr?ref=d40c827e9a48e8e612ac5d0887243915700fc7d0", "patch": "@@ -1,20 +1,24 @@\n-error: `#[test]` attribute is only allowed on non associated functions\n-  --> $DIR/test-attr-non-associated-functions.rs:9:5\n-   |\n-LL | /     fn new() -> A {\n-LL | |\n-LL | |         A {}\n-LL | |     }\n-   | |_____^\n+error: the `#[test]` attribute may only be used on a non-associated function\n+  --> $DIR/test-attr-non-associated-functions.rs:6:5\n+   |\n+LL |     #[test]\n+   |     ^^^^^^^ the `#[test]` macro causes a function to be run as a test and has no effect on non-functions\n+   |\n+help: replace with conditional compilation to make the item only exist when tests are being run\n+   |\n+LL |     #[cfg(test)]\n+   |\n \n-error: `#[test]` attribute is only allowed on non associated functions\n-  --> $DIR/test-attr-non-associated-functions.rs:14:5\n-   |\n-LL | /     fn recovery_witness() -> A {\n-LL | |\n-LL | |         A {}\n-LL | |     }\n-   | |_____^\n+error: the `#[test]` attribute may only be used on a non-associated function\n+  --> $DIR/test-attr-non-associated-functions.rs:11:5\n+   |\n+LL |     #[test]\n+   |     ^^^^^^^ the `#[test]` macro causes a function to be run as a test and has no effect on non-functions\n+   |\n+help: replace with conditional compilation to make the item only exist when tests are being run\n+   |\n+LL |     #[cfg(test)]\n+   |\n \n error: aborting due to 2 previous errors\n "}, {"sha": "7a9913fbcfa11ad46bcb8b923d6809a7b6191999", "filename": "tests/ui/test-attrs/test-on-not-fn.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d40c827e9a48e8e612ac5d0887243915700fc7d0/tests%2Fui%2Ftest-attrs%2Ftest-on-not-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d40c827e9a48e8e612ac5d0887243915700fc7d0/tests%2Fui%2Ftest-attrs%2Ftest-on-not-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftest-attrs%2Ftest-on-not-fn.stderr?ref=d40c827e9a48e8e612ac5d0887243915700fc7d0", "patch": "@@ -2,7 +2,7 @@ error: the `#[test]` attribute may only be used on a non-associated function\n   --> $DIR/test-on-not-fn.rs:3:1\n    |\n LL | #[test]\n-   | ^^^^^^^ the `#[test]` macro causes a function to be run on a test and has no effect on non-functions\n+   | ^^^^^^^ the `#[test]` macro causes a function to be run as a test and has no effect on non-functions\n LL | mod test {}\n    | ----------- expected a non-associated function, found a module\n    |\n@@ -15,7 +15,7 @@ error: the `#[test]` attribute may only be used on a non-associated function\n   --> $DIR/test-on-not-fn.rs:6:1\n    |\n LL |   #[test]\n-   |   ^^^^^^^ the `#[test]` macro causes a function to be run on a test and has no effect on non-functions\n+   |   ^^^^^^^ the `#[test]` macro causes a function to be run as a test and has no effect on non-functions\n LL | / mod loooooooooooooong_teeeeeeeeeest {\n LL | |     /*\n LL | |     this is a comment\n@@ -34,7 +34,7 @@ error: the `#[test]` attribute may only be used on a non-associated function\n   --> $DIR/test-on-not-fn.rs:20:1\n    |\n LL | #[test]\n-   | ^^^^^^^ the `#[test]` macro causes a function to be run on a test and has no effect on non-functions\n+   | ^^^^^^^ the `#[test]` macro causes a function to be run as a test and has no effect on non-functions\n LL | extern \"C\" {}\n    | ------------- expected a non-associated function, found an extern block\n    |\n@@ -47,7 +47,7 @@ error: the `#[test]` attribute may only be used on a non-associated function\n   --> $DIR/test-on-not-fn.rs:23:1\n    |\n LL | #[test]\n-   | ^^^^^^^ the `#[test]` macro causes a function to be run on a test and has no effect on non-functions\n+   | ^^^^^^^ the `#[test]` macro causes a function to be run as a test and has no effect on non-functions\n LL | trait Foo {}\n    | ------------ expected a non-associated function, found a trait\n    |\n@@ -60,7 +60,7 @@ error: the `#[test]` attribute may only be used on a non-associated function\n   --> $DIR/test-on-not-fn.rs:26:1\n    |\n LL | #[test]\n-   | ^^^^^^^ the `#[test]` macro causes a function to be run on a test and has no effect on non-functions\n+   | ^^^^^^^ the `#[test]` macro causes a function to be run as a test and has no effect on non-functions\n LL | impl Foo for i32 {}\n    | ------------------- expected a non-associated function, found an implementation\n    |\n@@ -73,7 +73,7 @@ error: the `#[test]` attribute may only be used on a non-associated function\n   --> $DIR/test-on-not-fn.rs:29:1\n    |\n LL | #[test]\n-   | ^^^^^^^ the `#[test]` macro causes a function to be run on a test and has no effect on non-functions\n+   | ^^^^^^^ the `#[test]` macro causes a function to be run as a test and has no effect on non-functions\n LL | const FOO: i32 = -1_i32;\n    | ------------------------ expected a non-associated function, found a constant item\n    |\n@@ -86,7 +86,7 @@ error: the `#[test]` attribute may only be used on a non-associated function\n   --> $DIR/test-on-not-fn.rs:32:1\n    |\n LL | #[test]\n-   | ^^^^^^^ the `#[test]` macro causes a function to be run on a test and has no effect on non-functions\n+   | ^^^^^^^ the `#[test]` macro causes a function to be run as a test and has no effect on non-functions\n LL | static BAR: u64 = 10_000_u64;\n    | ----------------------------- expected a non-associated function, found a static item\n    |\n@@ -99,7 +99,7 @@ error: the `#[test]` attribute may only be used on a non-associated function\n   --> $DIR/test-on-not-fn.rs:35:1\n    |\n LL |   #[test]\n-   |   ^^^^^^^ the `#[test]` macro causes a function to be run on a test and has no effect on non-functions\n+   |   ^^^^^^^ the `#[test]` macro causes a function to be run as a test and has no effect on non-functions\n LL | / enum MyUnit {\n LL | |     Unit,\n LL | | }\n@@ -114,7 +114,7 @@ error: the `#[test]` attribute may only be used on a non-associated function\n   --> $DIR/test-on-not-fn.rs:40:1\n    |\n LL | #[test]\n-   | ^^^^^^^ the `#[test]` macro causes a function to be run on a test and has no effect on non-functions\n+   | ^^^^^^^ the `#[test]` macro causes a function to be run as a test and has no effect on non-functions\n LL | struct NewI32(i32);\n    | ------------------- expected a non-associated function, found a struct\n    |\n@@ -127,7 +127,7 @@ error: the `#[test]` attribute may only be used on a non-associated function\n   --> $DIR/test-on-not-fn.rs:43:1\n    |\n LL |   #[test]\n-   |   ^^^^^^^ the `#[test]` macro causes a function to be run on a test and has no effect on non-functions\n+   |   ^^^^^^^ the `#[test]` macro causes a function to be run as a test and has no effect on non-functions\n LL | / union Spooky {\n LL | |     x: i32,\n LL | |     y: u32,\n@@ -143,7 +143,7 @@ error: the `#[test]` attribute may only be used on a non-associated function\n   --> $DIR/test-on-not-fn.rs:50:1\n    |\n LL |   #[test]\n-   |   ^^^^^^^ the `#[test]` macro causes a function to be run on a test and has no effect on non-functions\n+   |   ^^^^^^^ the `#[test]` macro causes a function to be run as a test and has no effect on non-functions\n LL |   #[derive(Copy, Clone, Debug)]\n LL | / struct MoreAttrs {\n LL | |     a: i32,\n@@ -160,7 +160,7 @@ warning: the `#[test]` attribute may only be used on a non-associated function\n   --> $DIR/test-on-not-fn.rs:61:1\n    |\n LL | #[test]\n-   | ^^^^^^^ the `#[test]` macro causes a function to be run on a test and has no effect on non-functions\n+   | ^^^^^^^ the `#[test]` macro causes a function to be run as a test and has no effect on non-functions\n LL | foo!();\n    | ------- expected a non-associated function, found an item macro invocation\n    |"}]}