{"sha": "f690978023d7465d05abe9a1288100f192e74193", "node_id": "C_kwDOAAsO6NoAKGY2OTA5NzgwMjNkNzQ2NWQwNWFiZTlhMTI4ODEwMGYxOTJlNzQxOTM", "commit": {"author": {"name": "dswij", "email": "dswijj@gmail.com", "date": "2022-01-06T10:43:44Z"}, "committer": {"name": "Dharma Saputra Wijaya", "email": "dswijj@gmail.com", "date": "2022-01-09T05:35:01Z"}, "message": "cover trait for `trait_duplication_in_bounds`", "tree": {"sha": "d60a52e4c6fb413f271f118460cfaee4e6d3eeab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d60a52e4c6fb413f271f118460cfaee4e6d3eeab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f690978023d7465d05abe9a1288100f192e74193", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f690978023d7465d05abe9a1288100f192e74193", "html_url": "https://github.com/rust-lang/rust/commit/f690978023d7465d05abe9a1288100f192e74193", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f690978023d7465d05abe9a1288100f192e74193/comments", "author": {"login": "dswij", "id": 44697459, "node_id": "MDQ6VXNlcjQ0Njk3NDU5", "avatar_url": "https://avatars.githubusercontent.com/u/44697459?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dswij", "html_url": "https://github.com/dswij", "followers_url": "https://api.github.com/users/dswij/followers", "following_url": "https://api.github.com/users/dswij/following{/other_user}", "gists_url": "https://api.github.com/users/dswij/gists{/gist_id}", "starred_url": "https://api.github.com/users/dswij/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dswij/subscriptions", "organizations_url": "https://api.github.com/users/dswij/orgs", "repos_url": "https://api.github.com/users/dswij/repos", "events_url": "https://api.github.com/users/dswij/events{/privacy}", "received_events_url": "https://api.github.com/users/dswij/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dswij", "id": 44697459, "node_id": "MDQ6VXNlcjQ0Njk3NDU5", "avatar_url": "https://avatars.githubusercontent.com/u/44697459?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dswij", "html_url": "https://github.com/dswij", "followers_url": "https://api.github.com/users/dswij/followers", "following_url": "https://api.github.com/users/dswij/following{/other_user}", "gists_url": "https://api.github.com/users/dswij/gists{/gist_id}", "starred_url": "https://api.github.com/users/dswij/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dswij/subscriptions", "organizations_url": "https://api.github.com/users/dswij/orgs", "repos_url": "https://api.github.com/users/dswij/repos", "events_url": "https://api.github.com/users/dswij/events{/privacy}", "received_events_url": "https://api.github.com/users/dswij/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83a9f68bd7c3dead2e8bd6a1de7e27c927375739", "url": "https://api.github.com/repos/rust-lang/rust/commits/83a9f68bd7c3dead2e8bd6a1de7e27c927375739", "html_url": "https://github.com/rust-lang/rust/commit/83a9f68bd7c3dead2e8bd6a1de7e27c927375739"}], "stats": {"total": 139, "additions": 128, "deletions": 11}, "files": [{"sha": "c91b24462c028f54f522abf4cab0f07723015b90", "filename": "clippy_lints/src/trait_bounds.rs", "status": "modified", "additions": 58, "deletions": 10, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/f690978023d7465d05abe9a1288100f192e74193/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f690978023d7465d05abe9a1288100f192e74193/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrait_bounds.rs?ref=f690978023d7465d05abe9a1288100f192e74193", "patch": "@@ -3,10 +3,14 @@ use clippy_utils::source::{snippet, snippet_with_applicability};\n use clippy_utils::{SpanlessEq, SpanlessHash};\n use core::hash::{Hash, Hasher};\n use if_chain::if_chain;\n-use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::unhash::UnhashMap;\n use rustc_errors::Applicability;\n-use rustc_hir::{def::Res, GenericBound, Generics, ParamName, Path, QPath, Ty, TyKind, WherePredicate};\n+use rustc_hir::def::Res;\n+use rustc_hir::{\n+    GenericBound, Generics, Item, ItemKind, Node, ParamName, Path, PathSegment, QPath, TraitItem, Ty, TyKind,\n+    WherePredicate,\n+};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::Span;\n@@ -84,6 +88,46 @@ impl<'tcx> LateLintPass<'tcx> for TraitBounds {\n         self.check_type_repetition(cx, gen);\n         check_trait_bound_duplication(cx, gen);\n     }\n+\n+    fn check_trait_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx TraitItem<'tcx>) {\n+        let Generics { where_clause, .. } = &item.generics;\n+        let mut self_bounds_set = FxHashSet::default();\n+\n+        for predicate in where_clause.predicates {\n+            if_chain! {\n+                if let WherePredicate::BoundPredicate(ref bound_predicate) = predicate;\n+                if !bound_predicate.span.from_expansion();\n+                if let TyKind::Path(QPath::Resolved(_, Path { segments, .. })) = bound_predicate.bounded_ty.kind;\n+                if let Some(PathSegment { res: Some(Res::SelfTy(Some(def_id), _)), .. }) = segments.first();\n+\n+                if let Some(\n+                    Node::Item(\n+                        Item {\n+                            kind: ItemKind::Trait(_, _, _, self_bounds, _),\n+                            .. }\n+                        )\n+                    ) = cx.tcx.hir().get_if_local(*def_id);\n+                then {\n+                    if self_bounds_set.is_empty() {\n+                        for bound in self_bounds.iter() {\n+                            let Some((self_res, _)) = get_trait_res_span_from_bound(bound) else { continue };\n+                            self_bounds_set.insert(self_res);\n+                        }\n+                    }\n+\n+                    bound_predicate\n+                        .bounds\n+                        .iter()\n+                        .filter_map(get_trait_res_span_from_bound)\n+                        .for_each(|(trait_item_res, span)| {\n+                            if self_bounds_set.get(&trait_item_res).is_some() {\n+                                emit_lint(cx, span);\n+                            }\n+                        });\n+                }\n+            }\n+        }\n+    }\n }\n \n fn get_trait_res_span_from_bound(bound: &GenericBound<'_>) -> Option<(Res, Span)> {\n@@ -198,17 +242,21 @@ fn check_trait_bound_duplication(cx: &LateContext<'_>, gen: &'_ Generics<'_>) {\n                     if let Some((_, span_direct)) = trait_resolutions_direct\n                                                 .iter()\n                                                 .find(|(res_direct, _)| *res_direct == res_where) {\n-                        span_lint_and_help(\n-                            cx,\n-                            TRAIT_DUPLICATION_IN_BOUNDS,\n-                            *span_direct,\n-                            \"this trait bound is already specified in the where clause\",\n-                            None,\n-                            \"consider removing this trait bound\",\n-                        );\n+                        emit_lint(cx, *span_direct);\n                     }\n                 }\n             }\n         }\n     }\n }\n+\n+fn emit_lint(cx: &LateContext<'_>, span: Span) {\n+    span_lint_and_help(\n+        cx,\n+        TRAIT_DUPLICATION_IN_BOUNDS,\n+        span,\n+        \"this trait bound is already specified in the where clause\",\n+        None,\n+        \"consider removing this trait bound\",\n+    );\n+}"}, {"sha": "3e49012627389ede800eb15298f4a9f42d948d35", "filename": "tests/ui/trait_duplication_in_bounds.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/f690978023d7465d05abe9a1288100f192e74193/tests%2Fui%2Ftrait_duplication_in_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f690978023d7465d05abe9a1288100f192e74193/tests%2Fui%2Ftrait_duplication_in_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrait_duplication_in_bounds.rs?ref=f690978023d7465d05abe9a1288100f192e74193", "patch": "@@ -28,4 +28,41 @@ where\n     unimplemented!();\n }\n \n+trait T: Default {\n+    fn f()\n+    where\n+        Self: Default;\n+}\n+\n+trait U: Default {\n+    fn f()\n+    where\n+        Self: Clone;\n+}\n+\n+trait ZZ: Default {\n+    fn f()\n+    where\n+        Self: Default + Clone;\n+}\n+\n+trait BadTrait: Default + Clone {\n+    fn f()\n+    where\n+        Self: Default + Clone;\n+}\n+\n+#[derive(Default, Clone)]\n+struct Life {}\n+\n+impl T for Life {\n+    // this should not warn\n+    fn f() {}\n+}\n+\n+impl U for Life {\n+    // this should not warn\n+    fn f() {}\n+}\n+\n fn main() {}"}, {"sha": "6326139c18743c226d243c85be305f73fd963bd0", "filename": "tests/ui/trait_duplication_in_bounds.stderr", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f690978023d7465d05abe9a1288100f192e74193/tests%2Fui%2Ftrait_duplication_in_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f690978023d7465d05abe9a1288100f192e74193/tests%2Fui%2Ftrait_duplication_in_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrait_duplication_in_bounds.stderr?ref=f690978023d7465d05abe9a1288100f192e74193", "patch": "@@ -19,5 +19,37 @@ LL | fn bad_foo<T: Clone + Default, Z: Copy>(arg0: T, arg1: Z)\n    |\n    = help: consider removing this trait bound\n \n-error: aborting due to 2 previous errors\n+error: this trait bound is already specified in the where clause\n+  --> $DIR/trait_duplication_in_bounds.rs:34:15\n+   |\n+LL |         Self: Default;\n+   |               ^^^^^^^\n+   |\n+   = help: consider removing this trait bound\n+\n+error: this trait bound is already specified in the where clause\n+  --> $DIR/trait_duplication_in_bounds.rs:46:15\n+   |\n+LL |         Self: Default + Clone;\n+   |               ^^^^^^^\n+   |\n+   = help: consider removing this trait bound\n+\n+error: this trait bound is already specified in the where clause\n+  --> $DIR/trait_duplication_in_bounds.rs:52:15\n+   |\n+LL |         Self: Default + Clone;\n+   |               ^^^^^^^\n+   |\n+   = help: consider removing this trait bound\n+\n+error: this trait bound is already specified in the where clause\n+  --> $DIR/trait_duplication_in_bounds.rs:52:25\n+   |\n+LL |         Self: Default + Clone;\n+   |                         ^^^^^\n+   |\n+   = help: consider removing this trait bound\n+\n+error: aborting due to 6 previous errors\n "}]}