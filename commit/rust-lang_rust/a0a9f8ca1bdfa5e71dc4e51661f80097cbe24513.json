{"sha": "a0a9f8ca1bdfa5e71dc4e51661f80097cbe24513", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwYTlmOGNhMWJkZmE1ZTcxZGM0ZTUxNjYxZjgwMDk3Y2JlMjQ1MTM=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-10-29T07:31:07Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-11-10T10:04:43Z"}, "message": "Fix fallout in `librustdoc`.", "tree": {"sha": "11ea41d4ed74e893db77b6d8d97bd4c8fb9d110f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11ea41d4ed74e893db77b6d8d97bd4c8fb9d110f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0a9f8ca1bdfa5e71dc4e51661f80097cbe24513", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0a9f8ca1bdfa5e71dc4e51661f80097cbe24513", "html_url": "https://github.com/rust-lang/rust/commit/a0a9f8ca1bdfa5e71dc4e51661f80097cbe24513", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0a9f8ca1bdfa5e71dc4e51661f80097cbe24513/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "872943c3172619afa275987c4ad3e2041ede9fa3", "url": "https://api.github.com/repos/rust-lang/rust/commits/872943c3172619afa275987c4ad3e2041ede9fa3", "html_url": "https://github.com/rust-lang/rust/commit/872943c3172619afa275987c4ad3e2041ede9fa3"}], "stats": {"total": 36, "additions": 31, "deletions": 5}, "files": [{"sha": "a25cb0bacc5cf785610a2bc634d8535868b80882", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a0a9f8ca1bdfa5e71dc4e51661f80097cbe24513/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0a9f8ca1bdfa5e71dc4e51661f80097cbe24513/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=a0a9f8ca1bdfa5e71dc4e51661f80097cbe24513", "patch": "@@ -14,7 +14,7 @@ use rustc_driver::{driver, target_features, abort_on_err};\n use rustc::dep_graph::DepGraph;\n use rustc::session::{self, config};\n use rustc::hir::def_id::DefId;\n-use rustc::hir::def::Def;\n+use rustc::hir::def::{Def, ExportMap};\n use rustc::middle::privacy::AccessLevels;\n use rustc::ty::{self, TyCtxt};\n use rustc::hir::map as hir_map;\n@@ -74,6 +74,7 @@ pub struct DocContext<'a, 'tcx: 'a> {\n     pub ty_substs: RefCell<FxHashMap<Def, clean::Type>>,\n     /// Table node id of lifetime parameter definition -> substituted lifetime\n     pub lt_substs: RefCell<FxHashMap<ast::NodeId, clean::Lifetime>>,\n+    pub export_map: ExportMap,\n }\n \n impl<'b, 'tcx> DocContext<'b, 'tcx> {\n@@ -196,7 +197,7 @@ pub fn run_core(search_paths: SearchPaths,\n             sess.fatal(\"Compilation failed, aborting rustdoc\");\n         }\n \n-        let ty::CrateAnalysis { access_levels, .. } = analysis;\n+        let ty::CrateAnalysis { access_levels, export_map, .. } = analysis;\n \n         // Convert from a NodeId set to a DefId set since we don't always have easy access\n         // to the map from defid -> nodeid\n@@ -218,6 +219,7 @@ pub fn run_core(search_paths: SearchPaths,\n             renderinfo: Default::default(),\n             ty_substs: Default::default(),\n             lt_substs: Default::default(),\n+            export_map: export_map,\n         };\n         debug!(\"crate: {:?}\", ctxt.map.krate());\n "}, {"sha": "12d33dcb207f7c78ab170e5cbb69439a8b27b098", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a0a9f8ca1bdfa5e71dc4e51661f80097cbe24513/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0a9f8ca1bdfa5e71dc4e51661f80097cbe24513/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=a0a9f8ca1bdfa5e71dc4e51661f80097cbe24513", "patch": "@@ -87,7 +87,7 @@ pub fn run(input: &str,\n         config::build_configuration(&sess, config::parse_cfgspecs(cfgs.clone()));\n \n     let krate = panictry!(driver::phase_1_parse_input(&sess, &input));\n-    let driver::ExpansionResult { defs, mut hir_forest, .. } = {\n+    let driver::ExpansionResult { defs, mut hir_forest, analysis, .. } = {\n         phase_2_configure_and_expand(\n             &sess, &cstore, krate, None, \"rustdoc-test\", None, MakeGlobMap::No, |_| Ok(())\n         ).expect(\"phase_2_configure_and_expand aborted in rustdoc!\")\n@@ -110,6 +110,7 @@ pub fn run(input: &str,\n         renderinfo: Default::default(),\n         ty_substs: Default::default(),\n         lt_substs: Default::default(),\n+        export_map: analysis.export_map,\n     };\n \n     let mut v = RustdocVisitor::new(&ctx);"}, {"sha": "b91d71198e8197e84e4e02a556091055ce192059", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a0a9f8ca1bdfa5e71dc4e51661f80097cbe24513/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0a9f8ca1bdfa5e71dc4e51661f80097cbe24513/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=a0a9f8ca1bdfa5e71dc4e51661f80097cbe24513", "patch": "@@ -85,8 +85,9 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                                               &krate.module,\n                                               None);\n         // attach the crate's exported macros to the top-level module:\n-        self.module.macros = krate.exported_macros.iter()\n-            .map(|def| self.visit_macro(def)).collect();\n+        let macro_exports: Vec<_> =\n+            krate.exported_macros.iter().map(|def| self.visit_macro(def)).collect();\n+        self.module.macros.extend(macro_exports);\n         self.module.is_crate = true;\n     }\n \n@@ -191,6 +192,28 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             let item = self.cx.map.expect_item(i.id);\n             self.visit_item(item, None, &mut om);\n         }\n+        if let Some(exports) = self.cx.export_map.get(&id) {\n+            for export in exports {\n+                if let Def::Macro(def_id) = export.def {\n+                    if def_id.krate == LOCAL_CRATE {\n+                        continue // These are `krate.exported_macros`, handled in `self.visit()`.\n+                    }\n+                    let def = self.cx.sess().cstore.load_macro(def_id, self.cx.sess());\n+                    // FIXME(jseyfried) merge with `self.visit_macro()`\n+                    let matchers = def.body.chunks(4).map(|arm| arm[0].get_span()).collect();\n+                    om.macros.push(Macro {\n+                        id: def.id,\n+                        attrs: def.attrs.clone().into(),\n+                        name: def.ident.name,\n+                        whence: def.span,\n+                        matchers: matchers,\n+                        stab: self.stability(def.id),\n+                        depr: self.deprecation(def.id),\n+                        imported_from: def.imported_from.map(|ident| ident.name),\n+                    })\n+                }\n+            }\n+        }\n         om\n     }\n "}]}