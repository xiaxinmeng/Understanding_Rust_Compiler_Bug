{"sha": "4e0d0d757e2f1b61ec809420b006545a9f8974c0", "node_id": "C_kwDOAAsO6NoAKDRlMGQwZDc1N2UyZjFiNjFlYzgwOTQyMGIwMDY1NDVhOWY4OTc0YzA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-23T10:01:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-23T10:01:48Z"}, "message": "Auto merge of #102750 - the8472:opt-field-order, r=wesleywiser\n\noptimize field ordering by grouping m*2^n-sized fields with equivalently aligned ones\n\n```rust\nuse std::ptr::addr_of;\nuse std::mem;\n\nstruct Foo {\n    word: u32,\n    byte: u8,\n    ary: [u8; 4]\n}\n\nfn main() {\n    let foo: Foo = unsafe { mem::zeroed() };\n\n    println!(\"base: {:p}\\nword: {:p}\\nbyte: {:p}\\nary:  {:p}\", &foo, addr_of!(foo.word), addr_of!(foo.byte), addr_of!(foo.ary));\n}\n```\n\nprints\n\n```\nbase: 0x7fffc1a8a668\nword: 0x7fffc1a8a668\nbyte: 0x7fffc1a8a66c\nary:  0x7fffc1a8a66d\n```\n\nI.e. the `u8` in the middle causes the array to sit at an odd offset, which might prevent optimizations, especially on architectures where unaligned loads are costly.\n\nNote that this will make field ordering niche-dependent, i.e. a `Bar<T>` with `T=char` and `T=u32` may result in different field order, this may break some code that makes invalid assumptions about `repr(Rust)` types.", "tree": {"sha": "2bc6f5a32e16c8b7dd42ba0b3f963da53fceed23", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2bc6f5a32e16c8b7dd42ba0b3f963da53fceed23"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e0d0d757e2f1b61ec809420b006545a9f8974c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e0d0d757e2f1b61ec809420b006545a9f8974c0", "html_url": "https://github.com/rust-lang/rust/commit/4e0d0d757e2f1b61ec809420b006545a9f8974c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e0d0d757e2f1b61ec809420b006545a9f8974c0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f2b2eee8f46f2252d2919d7a57bf3068d7df285", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f2b2eee8f46f2252d2919d7a57bf3068d7df285", "html_url": "https://github.com/rust-lang/rust/commit/3f2b2eee8f46f2252d2919d7a57bf3068d7df285"}, {"sha": "c1f392dbc09d9fef086f84bbcbecebc0cde8df81", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1f392dbc09d9fef086f84bbcbecebc0cde8df81", "html_url": "https://github.com/rust-lang/rust/commit/c1f392dbc09d9fef086f84bbcbecebc0cde8df81"}], "stats": {"total": 109, "additions": 78, "deletions": 31}, "files": [{"sha": "473a04f33a9adc0c73c5c5baab984fb07aecd930", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4e0d0d757e2f1b61ec809420b006545a9f8974c0/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e0d0d757e2f1b61ec809420b006545a9f8974c0/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=4e0d0d757e2f1b61ec809420b006545a9f8974c0", "patch": "@@ -3594,9 +3594,16 @@ mod size_asserts {\n     static_assert_size!(Res, 12);\n     static_assert_size!(Stmt<'_>, 32);\n     static_assert_size!(StmtKind<'_>, 16);\n+    // tidy-alphabetical-end\n+    // FIXME: move the tidy directive to the end after the next bootstrap bump\n+    #[cfg(bootstrap)]\n     static_assert_size!(TraitItem<'_>, 88);\n+    #[cfg(not(bootstrap))]\n+    static_assert_size!(TraitItem<'_>, 80);\n+    #[cfg(bootstrap)]\n     static_assert_size!(TraitItemKind<'_>, 48);\n+    #[cfg(not(bootstrap))]\n+    static_assert_size!(TraitItemKind<'_>, 40);\n     static_assert_size!(Ty<'_>, 48);\n     static_assert_size!(TyKind<'_>, 32);\n-    // tidy-alphabetical-end\n }"}, {"sha": "07af3dc5164786208a9e05784f5cdc169a4c8f47", "filename": "compiler/rustc_ty_utils/src/layout.rs", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4e0d0d757e2f1b61ec809420b006545a9f8974c0/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e0d0d757e2f1b61ec809420b006545a9f8974c0/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs?ref=4e0d0d757e2f1b61ec809420b006545a9f8974c0", "patch": "@@ -138,8 +138,18 @@ fn univariant_uninterned<'tcx>(\n     if optimize {\n         let end = if let StructKind::MaybeUnsized = kind { fields.len() - 1 } else { fields.len() };\n         let optimizing = &mut inverse_memory_index[..end];\n-        let field_align = |f: &TyAndLayout<'_>| {\n-            if let Some(pack) = pack { f.align.abi.min(pack) } else { f.align.abi }\n+        let effective_field_align = |f: &TyAndLayout<'_>| {\n+            if let Some(pack) = pack {\n+                // return the packed alignment in bytes\n+                f.align.abi.min(pack).bytes()\n+            } else {\n+                // returns log2(effective-align).\n+                // This is ok since `pack` applies to all fields equally.\n+                // The calculation assumes that size is an integer multiple of align, except for ZSTs.\n+                //\n+                // group [u8; 4] with align-4 or [u8; 6] with align-2 fields\n+                f.align.abi.bytes().max(f.size.bytes()).trailing_zeros() as u64\n+            }\n         };\n \n         // If `-Z randomize-layout` was enabled for the type definition we can shuffle\n@@ -160,15 +170,23 @@ fn univariant_uninterned<'tcx>(\n                     optimizing.sort_by_key(|&x| {\n                         // Place ZSTs first to avoid \"interesting offsets\",\n                         // especially with only one or two non-ZST fields.\n+                        // Then place largest alignments first, largest niches within an alignment group last\n                         let f = &fields[x as usize];\n-                        (!f.is_zst(), cmp::Reverse(field_align(f)))\n+                        let niche_size = f.largest_niche.map_or(0, |n| n.available(cx));\n+                        (!f.is_zst(), cmp::Reverse(effective_field_align(f)), niche_size)\n                     });\n                 }\n \n                 StructKind::Prefixed(..) => {\n                     // Sort in ascending alignment so that the layout stays optimal\n-                    // regardless of the prefix\n-                    optimizing.sort_by_key(|&x| field_align(&fields[x as usize]));\n+                    // regardless of the prefix.\n+                    // And put the largest niche in an alignment group at the end\n+                    // so it can be used as discriminant in jagged enums\n+                    optimizing.sort_by_key(|&x| {\n+                        let f = &fields[x as usize];\n+                        let niche_size = f.largest_niche.map_or(0, |n| n.available(cx));\n+                        (effective_field_align(f), niche_size)\n+                    });\n                 }\n             }\n "}, {"sha": "fe54375bbf6aa6d31e41a16400125f697d5b63f6", "filename": "src/test/codegen/issue-37945.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e0d0d757e2f1b61ec809420b006545a9f8974c0/src%2Ftest%2Fcodegen%2Fissue-37945.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e0d0d757e2f1b61ec809420b006545a9f8974c0/src%2Ftest%2Fcodegen%2Fissue-37945.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fissue-37945.rs?ref=4e0d0d757e2f1b61ec809420b006545a9f8974c0", "patch": "@@ -15,7 +15,7 @@ use std::slice::Iter;\n pub fn is_empty_1(xs: Iter<f32>) -> bool {\n // CHECK-LABEL: @is_empty_1(\n // CHECK-NEXT:  start:\n-// CHECK-NEXT:    [[A:%.*]] = icmp ne {{i32\\*|ptr}} %xs.1, null\n+// CHECK-NEXT:    [[A:%.*]] = icmp ne {{i32\\*|ptr}} {{%xs.0|%xs.1}}, null\n // CHECK-NEXT:    tail call void @llvm.assume(i1 [[A]])\n // The order between %xs.0 and %xs.1 on the next line doesn't matter\n // and different LLVM versions produce different order.\n@@ -28,7 +28,7 @@ pub fn is_empty_1(xs: Iter<f32>) -> bool {\n pub fn is_empty_2(xs: Iter<f32>) -> bool {\n // CHECK-LABEL: @is_empty_2\n // CHECK-NEXT:  start:\n-// CHECK-NEXT:    [[C:%.*]] = icmp ne {{i32\\*|ptr}} %xs.1, null\n+// CHECK-NEXT:    [[C:%.*]] = icmp ne {{i32\\*|ptr}} {{%xs.0|%xs.1}}, null\n // CHECK-NEXT:    tail call void @llvm.assume(i1 [[C]])\n // The order between %xs.0 and %xs.1 on the next line doesn't matter\n // and different LLVM versions produce different order."}, {"sha": "e8bbf0e1bbd61d0b9d12ef78a0ffe9dabe08d4b0", "filename": "src/test/codegen/mem-replace-direct-memcpy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e0d0d757e2f1b61ec809420b006545a9f8974c0/src%2Ftest%2Fcodegen%2Fmem-replace-direct-memcpy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e0d0d757e2f1b61ec809420b006545a9f8974c0/src%2Ftest%2Fcodegen%2Fmem-replace-direct-memcpy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fmem-replace-direct-memcpy.rs?ref=4e0d0d757e2f1b61ec809420b006545a9f8974c0", "patch": "@@ -18,7 +18,7 @@ pub fn replace_byte(dst: &mut u8, src: u8) -> u8 {\n // CHECK-NOT: call void @llvm.memcpy\n // CHECK: ; core::mem::replace\n // CHECK-NOT: call void @llvm.memcpy\n-// CHECK: call void @llvm.memcpy.{{.+}}({{i8\\*|ptr}} align 1 %{{.*}}, {{i8\\*|ptr}} align 1 %dest, i{{.*}} 1, i1 false)\n+// CHECK: call void @llvm.memcpy.{{.+}}({{i8\\*|ptr}} align 1 %{{.*}}, {{i8\\*|ptr}} align 1 %{{.*}}, i{{.*}} 1, i1 false)\n // CHECK-NOT: call void @llvm.memcpy\n-// CHECK: call void @llvm.memcpy.{{.+}}({{i8\\*|ptr}} align 1 %dest, {{i8\\*|ptr}} align 1 %src{{.*}}, i{{.*}} 1, i1 false)\n+// CHECK: call void @llvm.memcpy.{{.+}}({{i8\\*|ptr}} align 1 %{{.*}}, {{i8\\*|ptr}} align 1 %{{.*}}, i{{.*}} 1, i1 false)\n // CHECK-NOT: call void @llvm.memcpy"}, {"sha": "894b0ec3de4f3059c7d781addf7004bd829081f9", "filename": "src/test/codegen/slice-iter-len-eq-zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e0d0d757e2f1b61ec809420b006545a9f8974c0/src%2Ftest%2Fcodegen%2Fslice-iter-len-eq-zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e0d0d757e2f1b61ec809420b006545a9f8974c0/src%2Ftest%2Fcodegen%2Fslice-iter-len-eq-zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fslice-iter-len-eq-zero.rs?ref=4e0d0d757e2f1b61ec809420b006545a9f8974c0", "patch": "@@ -9,7 +9,7 @@ type Demo = [u8; 3];\n #[no_mangle]\n pub fn slice_iter_len_eq_zero(y: std::slice::Iter<'_, Demo>) -> bool {\n     // CHECK-NOT: sub\n-    // CHECK: %2 = icmp eq {{i8\\*|ptr}} %1, %0\n+    // CHECK: %2 = icmp eq {{i8\\*|ptr}} {{%1|%0}}, {{%1|%0}}\n     // CHECK: ret i1 %2\n     y.len() == 0\n }"}, {"sha": "20d4c418e879c4723c9c3a73bca852e022864fdd", "filename": "src/test/ui/layout/issue-96158-scalarpair-payload-might-be-uninit.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4e0d0d757e2f1b61ec809420b006545a9f8974c0/src%2Ftest%2Fui%2Flayout%2Fissue-96158-scalarpair-payload-might-be-uninit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e0d0d757e2f1b61ec809420b006545a9f8974c0/src%2Ftest%2Fui%2Flayout%2Fissue-96158-scalarpair-payload-might-be-uninit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fissue-96158-scalarpair-payload-might-be-uninit.stderr?ref=4e0d0d757e2f1b61ec809420b006545a9f8974c0", "patch": "@@ -370,31 +370,31 @@ error: layout_of(NicheFirst) = Layout {\n                pref: $PREF_ALIGN,\n            },\n            abi: ScalarPair(\n-               Initialized {\n+               Union {\n                    value: Int(\n                        I8,\n                        false,\n                    ),\n-                   valid_range: 0..=4,\n                },\n-               Union {\n+               Initialized {\n                    value: Int(\n                        I8,\n                        false,\n                    ),\n+                   valid_range: 0..=4,\n                },\n            ),\n            fields: Arbitrary {\n                offsets: [\n-                   Size(0 bytes),\n+                   Size(1 bytes),\n                ],\n                memory_index: [\n                    0,\n                ],\n            },\n            largest_niche: Some(\n                Niche {\n-                   offset: Size(0 bytes),\n+                   offset: Size(1 bytes),\n                    value: Int(\n                        I8,\n                        false,\n@@ -429,29 +429,29 @@ error: layout_of(NicheFirst) = Layout {\n                                    I8,\n                                    false,\n                                ),\n-                               valid_range: 0..=2,\n+                               valid_range: 0..=255,\n                            },\n                            Initialized {\n                                value: Int(\n                                    I8,\n                                    false,\n                                ),\n-                               valid_range: 0..=255,\n+                               valid_range: 0..=2,\n                            },\n                        ),\n                        fields: Arbitrary {\n                            offsets: [\n-                               Size(0 bytes),\n                                Size(1 bytes),\n+                               Size(0 bytes),\n                            ],\n                            memory_index: [\n-                               0,\n                                1,\n+                               0,\n                            ],\n                        },\n                        largest_niche: Some(\n                            Niche {\n-                               offset: Size(0 bytes),\n+                               offset: Size(1 bytes),\n                                value: Int(\n                                    I8,\n                                    false,"}, {"sha": "0b89d0b160b3db12e645fe0217b414c98acdb4db", "filename": "src/test/ui/stats/hir-stats.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4e0d0d757e2f1b61ec809420b006545a9f8974c0/src%2Ftest%2Fui%2Fstats%2Fhir-stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e0d0d757e2f1b61ec809420b006545a9f8974c0/src%2Ftest%2Fui%2Fstats%2Fhir-stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstats%2Fhir-stats.rs?ref=4e0d0d757e2f1b61ec809420b006545a9f8974c0", "patch": "@@ -1,6 +1,7 @@\n // check-pass\n // compile-flags: -Zhir-stats\n // only-x86_64\n+// ignore-stage1  FIXME: remove after next bootstrap bump\n \n // The aim here is to include at least one of every different type of top-level\n // AST/HIR node reported by `-Zhir-stats`."}, {"sha": "012bc848d4bcaa7d79794980020a034ce9780adc", "filename": "src/test/ui/stats/hir-stats.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4e0d0d757e2f1b61ec809420b006545a9f8974c0/src%2Ftest%2Fui%2Fstats%2Fhir-stats.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e0d0d757e2f1b61ec809420b006545a9f8974c0/src%2Ftest%2Fui%2Fstats%2Fhir-stats.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstats%2Fhir-stats.stderr?ref=4e0d0d757e2f1b61ec809420b006545a9f8974c0", "patch": "@@ -2,12 +2,12 @@ ast-stats-1 PRE EXPANSION AST STATS\n ast-stats-1 Name                Accumulated Size         Count     Item Size\n ast-stats-1 ----------------------------------------------------------------\n ast-stats-1 ExprField                 48 ( 0.6%)             1            48\n+ast-stats-1 GenericArgs               56 ( 0.8%)             1            56\n+ast-stats-1 - AngleBracketed            56 ( 0.8%)             1\n ast-stats-1 Crate                     56 ( 0.8%)             1            56\n ast-stats-1 Attribute                 64 ( 0.9%)             2            32\n ast-stats-1 - Normal                    32 ( 0.4%)             1\n ast-stats-1 - DocComment                32 ( 0.4%)             1\n-ast-stats-1 GenericArgs               64 ( 0.9%)             1            64\n-ast-stats-1 - AngleBracketed            64 ( 0.9%)             1\n ast-stats-1 Local                     72 ( 1.0%)             1            72\n ast-stats-1 WherePredicate            72 ( 1.0%)             1            72\n ast-stats-1 - BoundPredicate            72 ( 1.0%)             1\n@@ -53,15 +53,15 @@ ast-stats-1 - Impl                     184 ( 2.5%)             1\n ast-stats-1 - Fn                       368 ( 5.0%)             2\n ast-stats-1 - Use                      552 ( 7.4%)             3\n ast-stats-1 ----------------------------------------------------------------\n-ast-stats-1 Total                  7_424\n+ast-stats-1 Total                  7_416\n ast-stats-1\n ast-stats-2 POST EXPANSION AST STATS\n ast-stats-2 Name                Accumulated Size         Count     Item Size\n ast-stats-2 ----------------------------------------------------------------\n ast-stats-2 ExprField                 48 ( 0.6%)             1            48\n+ast-stats-2 GenericArgs               56 ( 0.7%)             1            56\n+ast-stats-2 - AngleBracketed            56 ( 0.7%)             1\n ast-stats-2 Crate                     56 ( 0.7%)             1            56\n-ast-stats-2 GenericArgs               64 ( 0.8%)             1            64\n-ast-stats-2 - AngleBracketed            64 ( 0.8%)             1\n ast-stats-2 Local                     72 ( 0.9%)             1            72\n ast-stats-2 WherePredicate            72 ( 0.9%)             1            72\n ast-stats-2 - BoundPredicate            72 ( 0.9%)             1\n@@ -80,9 +80,9 @@ ast-stats-2 - Expr                      96 ( 1.2%)             3\n ast-stats-2 Param                    160 ( 2.0%)             4            40\n ast-stats-2 FnDecl                   200 ( 2.5%)             5            40\n ast-stats-2 Variant                  240 ( 3.0%)             2           120\n-ast-stats-2 GenericBound             288 ( 3.5%)             4            72\n-ast-stats-2 - Trait                    288 ( 3.5%)             4\n-ast-stats-2 Block                    288 ( 3.5%)             6            48\n+ast-stats-2 GenericBound             288 ( 3.6%)             4            72\n+ast-stats-2 - Trait                    288 ( 3.6%)             4\n+ast-stats-2 Block                    288 ( 3.6%)             6            48\n ast-stats-2 AssocItem                416 ( 5.1%)             4           104\n ast-stats-2 - Type                     208 ( 2.6%)             2\n ast-stats-2 - Fn                       208 ( 2.6%)             2\n@@ -104,7 +104,7 @@ ast-stats-2 - Rptr                      64 ( 0.8%)             1\n ast-stats-2 - Ptr                       64 ( 0.8%)             1\n ast-stats-2 - ImplicitSelf             128 ( 1.6%)             2\n ast-stats-2 - Path                     640 ( 7.9%)            10\n-ast-stats-2 Item                   2_024 (24.9%)            11           184\n+ast-stats-2 Item                   2_024 (25.0%)            11           184\n ast-stats-2 - Trait                    184 ( 2.3%)             1\n ast-stats-2 - Enum                     184 ( 2.3%)             1\n ast-stats-2 - ExternCrate              184 ( 2.3%)             1\n@@ -113,7 +113,7 @@ ast-stats-2 - Impl                     184 ( 2.3%)             1\n ast-stats-2 - Fn                       368 ( 4.5%)             2\n ast-stats-2 - Use                      736 ( 9.1%)             4\n ast-stats-2 ----------------------------------------------------------------\n-ast-stats-2 Total                  8_120\n+ast-stats-2 Total                  8_112\n ast-stats-2\n hir-stats HIR STATS\n hir-stats Name                Accumulated Size         Count     Item Size"}, {"sha": "63e2f3150c01374ee13c5fe639c6833ff0cfd007", "filename": "src/test/ui/structs-enums/type-sizes.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4e0d0d757e2f1b61ec809420b006545a9f8974c0/src%2Ftest%2Fui%2Fstructs-enums%2Ftype-sizes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e0d0d757e2f1b61ec809420b006545a9f8974c0/src%2Ftest%2Fui%2Fstructs-enums%2Ftype-sizes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs-enums%2Ftype-sizes.rs?ref=4e0d0d757e2f1b61ec809420b006545a9f8974c0", "patch": "@@ -3,6 +3,7 @@\n #![allow(non_camel_case_types)]\n #![allow(dead_code)]\n #![feature(never_type)]\n+#![feature(pointer_is_aligned)]\n \n use std::mem::size_of;\n use std::num::NonZeroU8;\n@@ -168,6 +169,18 @@ pub enum EnumManyVariant<X> {\n     _F0, _F1, _F2, _F3, _F4, _F5, _F6, _F7, _F8, _F9, _FA, _FB, _FC, _FD, _FE, _FF,\n }\n \n+struct Reorder4 {\n+    a: u32,\n+    b: u8,\n+    ary: [u8; 4],\n+}\n+\n+struct Reorder2 {\n+    a: u16,\n+    b: u8,\n+    ary: [u8; 6],\n+}\n+\n pub fn main() {\n     assert_eq!(size_of::<u8>(), 1 as usize);\n     assert_eq!(size_of::<u32>(), 4 as usize);\n@@ -249,4 +262,12 @@ pub fn main() {\n     assert_eq!(size_of::<EnumManyVariant<Option<NicheU16>>>(), 4);\n     assert_eq!(size_of::<EnumManyVariant<Option2<NicheU16,u8>>>(), 6);\n     assert_eq!(size_of::<EnumManyVariant<Option<(NicheU16,u8)>>>(), 6);\n+\n+\n+    let v = Reorder4 {a: 0, b: 0, ary: [0; 4]};\n+    assert_eq!(size_of::<Reorder4>(), 12);\n+    assert!((&v.ary).as_ptr().is_aligned_to(4), \"[u8; 4] should group with align-4 fields\");\n+    let v = Reorder2 {a: 0, b: 0, ary: [0; 6]};\n+    assert_eq!(size_of::<Reorder2>(), 10);\n+    assert!((&v.ary).as_ptr().is_aligned_to(2), \"[u8; 6] should group with align-2 fields\");\n }"}]}