{"sha": "2606f99871511acaabd8aaec87913a5203beb39f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2MDZmOTk4NzE1MTFhY2FhYmQ4YWFlYzg3OTEzYTUyMDNiZWIzOWY=", "commit": {"author": {"name": "Jonathan Reem", "email": "jonathan.reem@gmail.com", "date": "2015-01-06T21:59:07Z"}, "committer": {"name": "Jonathan Reem", "email": "jonathan.reem@gmail.com", "date": "2015-01-07T23:49:19Z"}, "message": "Remove the unneeded Sized bound on TypeId creation\n\nThis bound is probably unintentional and is unnecessarily\nconstricting.\n\nTo facilitate this change, it was also necessary to modify\nresolve to recurse on and resolve type parameters in extern { }\nblocks. This fixes an ICE when using bounds on type parameters\nduring the declaration of intrinsics.\n\nThis also adds tests for TypeId on both Sized and Unsized\ntests as well as a test for using type parameters and bounds\nin extern { } blocks.", "tree": {"sha": "b4704c0bd41ef77d54a21179fee16786ab53b7ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4704c0bd41ef77d54a21179fee16786ab53b7ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2606f99871511acaabd8aaec87913a5203beb39f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2606f99871511acaabd8aaec87913a5203beb39f", "html_url": "https://github.com/rust-lang/rust/commit/2606f99871511acaabd8aaec87913a5203beb39f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2606f99871511acaabd8aaec87913a5203beb39f/comments", "author": {"login": "reem", "id": 4745181, "node_id": "MDQ6VXNlcjQ3NDUxODE=", "avatar_url": "https://avatars.githubusercontent.com/u/4745181?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reem", "html_url": "https://github.com/reem", "followers_url": "https://api.github.com/users/reem/followers", "following_url": "https://api.github.com/users/reem/following{/other_user}", "gists_url": "https://api.github.com/users/reem/gists{/gist_id}", "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reem/subscriptions", "organizations_url": "https://api.github.com/users/reem/orgs", "repos_url": "https://api.github.com/users/reem/repos", "events_url": "https://api.github.com/users/reem/events{/privacy}", "received_events_url": "https://api.github.com/users/reem/received_events", "type": "User", "site_admin": false}, "committer": {"login": "reem", "id": 4745181, "node_id": "MDQ6VXNlcjQ3NDUxODE=", "avatar_url": "https://avatars.githubusercontent.com/u/4745181?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reem", "html_url": "https://github.com/reem", "followers_url": "https://api.github.com/users/reem/followers", "following_url": "https://api.github.com/users/reem/following{/other_user}", "gists_url": "https://api.github.com/users/reem/gists{/gist_id}", "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reem/subscriptions", "organizations_url": "https://api.github.com/users/reem/orgs", "repos_url": "https://api.github.com/users/reem/repos", "events_url": "https://api.github.com/users/reem/events{/privacy}", "received_events_url": "https://api.github.com/users/reem/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfd557bd73a27966b242635b04f2a9fca6eadce8", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfd557bd73a27966b242635b04f2a9fca6eadce8", "html_url": "https://github.com/rust-lang/rust/commit/dfd557bd73a27966b242635b04f2a9fca6eadce8"}], "stats": {"total": 84, "additions": 82, "deletions": 2}, "files": [{"sha": "bb2bfa953722e34a5895185f834e8771f645e74d", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2606f99871511acaabd8aaec87913a5203beb39f/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2606f99871511acaabd8aaec87913a5203beb39f/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=2606f99871511acaabd8aaec87913a5203beb39f", "patch": "@@ -42,6 +42,8 @@\n #![experimental]\n #![allow(missing_docs)]\n \n+use marker::Sized;\n+\n pub type GlueFn = extern \"Rust\" fn(*const i8);\n \n #[lang=\"ty_desc\"]\n@@ -200,6 +202,10 @@ extern \"rust-intrinsic\" {\n     /// Gets an identifier which is globally unique to the specified type. This\n     /// function will return the same value for a type regardless of whichever\n     /// crate it is invoked in.\n+    #[cfg(not(stage0))]\n+    pub fn type_id<T: ?Sized + 'static>() -> TypeId;\n+\n+    #[cfg(stage0)]\n     pub fn type_id<T: 'static>() -> TypeId;\n \n     /// Create a value initialized to zero.\n@@ -551,8 +557,15 @@ pub struct TypeId {\n \n impl TypeId {\n     /// Returns the `TypeId` of the type this generic function has been instantiated with\n+    #[cfg(not(stage0))]\n+    pub fn of<T: ?Sized + 'static>() -> TypeId {\n+        unsafe { type_id::<T>() }\n+    }\n+\n+    #[cfg(stage0)]\n     pub fn of<T: 'static>() -> TypeId {\n         unsafe { type_id::<T>() }\n     }\n+\n     pub fn hash(&self) -> u64 { self.t }\n }"}, {"sha": "bcf8a6a433b94dd699807427720c0ef2b42b956a", "filename": "src/libcoretest/intrinsics.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/2606f99871511acaabd8aaec87913a5203beb39f/src%2Flibcoretest%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2606f99871511acaabd8aaec87913a5203beb39f/src%2Flibcoretest%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fintrinsics.rs?ref=2606f99871511acaabd8aaec87913a5203beb39f", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use core::intrinsics::TypeId;\n+\n+#[test]\n+fn test_typeid_sized_types() {\n+    struct X; struct Y(uint);\n+\n+    assert_eq!(TypeId::of::<X>(), TypeId::of::<X>());\n+    assert_eq!(TypeId::of::<Y>(), TypeId::of::<Y>());\n+    assert!(TypeId::of::<X>() != TypeId::of::<Y>());\n+}\n+\n+#[test]\n+fn test_typeid_unsized_types() {\n+    trait Z {}\n+    struct X(str); struct Y(Z + 'static);\n+\n+    assert_eq!(TypeId::of::<X>(), TypeId::of::<X>());\n+    assert_eq!(TypeId::of::<Y>(), TypeId::of::<Y>());\n+    assert!(TypeId::of::<X>() != TypeId::of::<Y>());\n+}\n+"}, {"sha": "cc52211de2081f6677cb53e0e9b7765eb98282b6", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2606f99871511acaabd8aaec87913a5203beb39f/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2606f99871511acaabd8aaec87913a5203beb39f/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=2606f99871511acaabd8aaec87913a5203beb39f", "patch": "@@ -2943,8 +2943,11 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                                     HasTypeParameters(\n                                         generics, FnSpace, foreign_item.id,\n                                         ItemRibKind),\n-                                    |this| visit::walk_foreign_item(this,\n-                                                                    &**foreign_item));\n+                                    |this| {\n+                                        this.resolve_type_parameters(&generics.ty_params);\n+                                        this.resolve_where_clause(&generics.where_clause);\n+                                        visit::walk_foreign_item(this, &**foreign_item)\n+                                    });\n                             }\n                             ForeignItemStatic(..) => {\n                                 visit::walk_foreign_item(this,"}, {"sha": "8c7d00a9a11d4fc2b9a1c89c4fb348013a620d8f", "filename": "src/test/compile-fail/extern-with-type-bounds.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/2606f99871511acaabd8aaec87913a5203beb39f/src%2Ftest%2Fcompile-fail%2Fextern-with-type-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2606f99871511acaabd8aaec87913a5203beb39f/src%2Ftest%2Fcompile-fail%2Fextern-with-type-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextern-with-type-bounds.rs?ref=2606f99871511acaabd8aaec87913a5203beb39f", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(intrinsics)]\n+\n+use std::intrinsics::TypeId;\n+\n+extern \"rust-intrinsic\" {\n+    // Real example from libcore\n+    fn type_id<T: ?Sized + 'static>() -> TypeId;\n+\n+    // Silent bounds made explicit to make sure they are actually\n+    // resolved.\n+    fn transmute<T: Sized, U: Sized>(val: T) -> U;\n+\n+    // Bounds aren't checked right now, so this should work\n+    // even though it's incorrect.\n+    fn size_of<T: Clone>() -> uint;\n+\n+    // Unresolved bounds should still error.\n+    fn align_of<T: NoSuchTrait>() -> uint;\n+    //~^ ERROR attempt to bound type parameter with a nonexistent trait `NoSuchTrait`\n+}\n+\n+fn main() {}\n+"}]}