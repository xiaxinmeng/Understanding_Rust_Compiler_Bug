{"sha": "ed039e8f8443a84dddfda8be7379ca7b4aaeccd9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkMDM5ZThmODQ0M2E4NGRkZGZkYThiZTczNzljYTdiNGFhZWNjZDk=", "commit": {"author": {"name": "Caleb Cartwright", "email": "caleb.cartwright@outlook.com", "date": "2020-01-11T19:19:57Z"}, "committer": {"name": "Caleb Cartwright", "email": "caleb.cartwright@outlook.com", "date": "2020-01-11T19:19:57Z"}, "message": "restore some rustc_parse visibilities", "tree": {"sha": "5b11e30072657d6688d02190d8516044078e2292", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b11e30072657d6688d02190d8516044078e2292"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed039e8f8443a84dddfda8be7379ca7b4aaeccd9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed039e8f8443a84dddfda8be7379ca7b4aaeccd9", "html_url": "https://github.com/rust-lang/rust/commit/ed039e8f8443a84dddfda8be7379ca7b4aaeccd9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed039e8f8443a84dddfda8be7379ca7b4aaeccd9/comments", "author": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1389494ac145a84dba025ff65969f7ab150c3f02", "url": "https://api.github.com/repos/rust-lang/rust/commits/1389494ac145a84dba025ff65969f7ab150c3f02", "html_url": "https://github.com/rust-lang/rust/commit/1389494ac145a84dba025ff65969f7ab150c3f02"}], "stats": {"total": 25, "additions": 17, "deletions": 8}, "files": [{"sha": "1368230168e07ef5a8f0faabdf7ca7f85e95c0ed", "filename": "src/librustc_parse/parser/mod.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ed039e8f8443a84dddfda8be7379ca7b4aaeccd9/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed039e8f8443a84dddfda8be7379ca7b4aaeccd9/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fmod.rs?ref=ed039e8f8443a84dddfda8be7379ca7b4aaeccd9", "patch": "@@ -2,6 +2,7 @@ pub mod attr;\n mod expr;\n mod item;\n mod module;\n+pub use module::{ModulePath, ModulePathSuccess};\n mod pat;\n mod path;\n mod ty;\n@@ -117,7 +118,8 @@ pub struct Parser<'a> {\n     /// Used to determine the path to externally loaded source files.\n     pub(super) directory: Directory<'a>,\n     /// `true` to parse sub-modules in other files.\n-    pub(super) recurse_into_file_modules: bool,\n+    // Public for rustfmt usage.\n+    pub recurse_into_file_modules: bool,\n     /// Name of the root module this parser originated from. If `None`, then the\n     /// name is not known. This does not change while the parser is descending\n     /// into modules, and sub-parsers have new values for this name.\n@@ -126,7 +128,8 @@ pub struct Parser<'a> {\n     token_cursor: TokenCursor,\n     desugar_doc_comments: bool,\n     /// `true` we should configure out of line modules as we parse.\n-    cfg_mods: bool,\n+    // Public for rustfmt usage.\n+    pub cfg_mods: bool,\n     /// This field is used to keep track of how many left angle brackets we have seen. This is\n     /// required in order to detect extra leading left angle brackets (`<` characters) and error\n     /// appropriately.\n@@ -483,7 +486,8 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n-    fn parse_ident(&mut self) -> PResult<'a, ast::Ident> {\n+    // Public for rustfmt usage.\n+    pub fn parse_ident(&mut self) -> PResult<'a, ast::Ident> {\n         self.parse_ident_common(true)\n     }\n \n@@ -540,7 +544,8 @@ impl<'a> Parser<'a> {\n \n     /// If the next token is the given keyword, eats it and returns `true`.\n     /// Otherwise, returns `false`. An expectation is also added for diagnostics purposes.\n-    fn eat_keyword(&mut self, kw: Symbol) -> bool {\n+    // Public for rustfmt usage.\n+    pub fn eat_keyword(&mut self, kw: Symbol) -> bool {\n         if self.check_keyword(kw) {\n             self.bump();\n             true"}, {"sha": "6ce94d3c6793ce2fc04989e05e94038d58961d50", "filename": "src/librustc_parse/parser/module.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ed039e8f8443a84dddfda8be7379ca7b4aaeccd9/src%2Flibrustc_parse%2Fparser%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed039e8f8443a84dddfda8be7379ca7b4aaeccd9/src%2Flibrustc_parse%2Fparser%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fmodule.rs?ref=ed039e8f8443a84dddfda8be7379ca7b4aaeccd9", "patch": "@@ -14,13 +14,15 @@ use syntax::token::{self, TokenKind};\n use std::path::{self, Path, PathBuf};\n \n /// Information about the path to a module.\n-pub(super) struct ModulePath {\n+// Public for rustfmt usage.\n+pub struct ModulePath {\n     name: String,\n     path_exists: bool,\n     pub result: Result<ModulePathSuccess, Error>,\n }\n \n-pub(super) struct ModulePathSuccess {\n+// Public for rustfmt usage.\n+pub struct ModulePathSuccess {\n     pub path: PathBuf,\n     pub directory_ownership: DirectoryOwnership,\n }\n@@ -177,7 +179,8 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n-    pub(super) fn submod_path_from_attr(attrs: &[Attribute], dir_path: &Path) -> Option<PathBuf> {\n+    // Public for rustfmt usage.\n+    pub fn submod_path_from_attr(attrs: &[Attribute], dir_path: &Path) -> Option<PathBuf> {\n         if let Some(s) = attr::first_attr_value_str_by_name(attrs, sym::path) {\n             let s = s.as_str();\n \n@@ -194,7 +197,8 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Returns a path to a module.\n-    pub(super) fn default_submod_path(\n+    // Public for rustfmt usage.\n+    pub fn default_submod_path(\n         id: ast::Ident,\n         relative: Option<ast::Ident>,\n         dir_path: &Path,"}]}