{"sha": "7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1NjVjY2MzMmNiZmFhMzgzNWFlNGMyN2I3ZmI3MWJjNjE5MjJiZmM=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-09-10T19:20:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-10T19:20:01Z"}, "message": "Rollup merge of #76514 - hameerabbasi:const-generics-revs, r=lcnr\n\nAdd revisions to const generic issue UI tests.\n\nFixes #75279.\n\nI have gotten into the flow, so I can do more of these if requested. I'm looking for feedback as to whether my work is on the right track so far.", "tree": {"sha": "4a32bd83851265d616844c5a093159b6f26301d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a32bd83851265d616844c5a093159b6f26301d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfWnxhCRBK7hj4Ov3rIwAAdHIIAHMXzXLy74NPte54DC8ql8mq\n+40EPY0/cS6/Z3irsKW4CKSjP94ymBesSNlAkCC1Aw16F2wl56tjf0Vy1gxqFINJ\n/tynCaAxHOlCAUiqWeTbrbwjAXoaxP8c49slqOiYWh61zrnXxjbvge596IZZkYlQ\nP3c2mm8TqI9iKBzPrQmfD3BN6QRycmY0RIsrQyp6/bmCiRcnnmbIqRTE8oe9G7Xy\nkN2BAnSM15DYjHTIYmzsYU8MckQ6aLSIr1eP6LLMY1bmCi6YiwI56mBQ+Wnwq2UP\nu3IqdMfPdrP3ce7FLk1uuXTKOT00C2Onm0B00U5VWjdKpha4DJ2aVDlxG+MVJZI=\n=nMHZ\n-----END PGP SIGNATURE-----\n", "payload": "tree 4a32bd83851265d616844c5a093159b6f26301d4\nparent 91c3ef8bef7fcc48cae3cc73bf831465bbedd4dc\nparent bec8e5fc145a2958c303fd276303f529e759b07c\nauthor Tyler Mandry <tmandry@gmail.com> 1599765601 -0700\ncommitter GitHub <noreply@github.com> 1599765601 -0700\n\nRollup merge of #76514 - hameerabbasi:const-generics-revs, r=lcnr\n\nAdd revisions to const generic issue UI tests.\n\nFixes #75279.\n\nI have gotten into the flow, so I can do more of these if requested. I'm looking for feedback as to whether my work is on the right track so far.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc", "html_url": "https://github.com/rust-lang/rust/commit/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91c3ef8bef7fcc48cae3cc73bf831465bbedd4dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/91c3ef8bef7fcc48cae3cc73bf831465bbedd4dc", "html_url": "https://github.com/rust-lang/rust/commit/91c3ef8bef7fcc48cae3cc73bf831465bbedd4dc"}, {"sha": "bec8e5fc145a2958c303fd276303f529e759b07c", "url": "https://api.github.com/repos/rust-lang/rust/commits/bec8e5fc145a2958c303fd276303f529e759b07c", "html_url": "https://github.com/rust-lang/rust/commit/bec8e5fc145a2958c303fd276303f529e759b07c"}], "stats": {"total": 661, "additions": 492, "deletions": 169}, "files": [{"sha": "899a5a1836c338d349c78d6537146a295d0fc345", "filename": "src/test/ui/const-generics/auxiliary/const_generic_lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fauxiliary%2Fconst_generic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fauxiliary%2Fconst_generic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fauxiliary%2Fconst_generic_lib.rs?ref=7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc", "patch": "@@ -1,4 +1,6 @@\n-#![feature(const_generics)]\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n pub struct Struct<const N: usize>(pub [u8; N]);\n "}, {"sha": "2e25dadf119c4b26b083e004d8f73014bf22daa3", "filename": "src/test/ui/const-generics/auxiliary/impl-const.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fauxiliary%2Fimpl-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fauxiliary%2Fimpl-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fauxiliary%2Fimpl-const.rs?ref=7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc", "patch": "@@ -1,4 +1,6 @@\n-#![feature(const_generics)]\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n pub struct Num<const N: usize>;\n "}, {"sha": "a35c3abc113b9dd6c572cf21490e16366b9eee4b", "filename": "src/test/ui/const-generics/const-argument-cross-crate-mismatch.full.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.full.stderr?ref=7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc", "patch": "@@ -1,11 +1,11 @@\n error[E0308]: mismatched types\n-  --> $DIR/const-argument-cross-crate-mismatch.rs:6:67\n+  --> $DIR/const-argument-cross-crate-mismatch.rs:7:67\n    |\n LL |     let _ = const_generic_lib::function(const_generic_lib::Struct([0u8, 1u8]));\n    |                                                                   ^^^^^^^^^^ expected an array with a fixed size of 3 elements, found one with 2 elements\n \n error[E0308]: mismatched types\n-  --> $DIR/const-argument-cross-crate-mismatch.rs:8:65\n+  --> $DIR/const-argument-cross-crate-mismatch.rs:9:65\n    |\n LL |     let _: const_generic_lib::Alias = const_generic_lib::Struct([0u8, 1u8, 2u8]);\n    |                                                                 ^^^^^^^^^^^^^^^ expected an array with a fixed size of 2 elements, found one with 3 elements", "previous_filename": "src/test/ui/const-generics/const-argument-cross-crate-mismatch.stderr"}, {"sha": "a35c3abc113b9dd6c572cf21490e16366b9eee4b", "filename": "src/test/ui/const-generics/const-argument-cross-crate-mismatch.min.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.min.stderr?ref=7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc", "patch": "@@ -0,0 +1,15 @@\n+error[E0308]: mismatched types\n+  --> $DIR/const-argument-cross-crate-mismatch.rs:7:67\n+   |\n+LL |     let _ = const_generic_lib::function(const_generic_lib::Struct([0u8, 1u8]));\n+   |                                                                   ^^^^^^^^^^ expected an array with a fixed size of 3 elements, found one with 2 elements\n+\n+error[E0308]: mismatched types\n+  --> $DIR/const-argument-cross-crate-mismatch.rs:9:65\n+   |\n+LL |     let _: const_generic_lib::Alias = const_generic_lib::Struct([0u8, 1u8, 2u8]);\n+   |                                                                 ^^^^^^^^^^^^^^^ expected an array with a fixed size of 2 elements, found one with 3 elements\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "9ae2ae50ba0ab503af9480da097841f2d9e4cc9e", "filename": "src/test/ui/const-generics/const-argument-cross-crate-mismatch.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.rs?ref=7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc", "patch": "@@ -1,4 +1,5 @@\n // aux-build:const_generic_lib.rs\n+// revisions: full min\n \n extern crate const_generic_lib;\n "}, {"sha": "fda3ec3eef7995bff4068af30e5cbd2dd2ef7847", "filename": "src/test/ui/const-generics/const-argument-cross-crate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate.rs?ref=7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+// revisions: full min\n // aux-build:const_generic_lib.rs\n \n extern crate const_generic_lib;"}, {"sha": "0574ddfb2557aff283ee95f3e09a67cf3cac3bb7", "filename": "src/test/ui/const-generics/defaults/complex-unord-param.min.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-unord-param.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-unord-param.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-unord-param.min.stderr?ref=7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc", "patch": "@@ -0,0 +1,8 @@\n+error: type parameters must be declared prior to const parameters\n+  --> $DIR/complex-unord-param.rs:9:41\n+   |\n+LL | struct NestedArrays<'a, const N: usize, A: 'a, const M: usize, T:'a =u32> {\n+   |                    ---------------------^----------------------^--------- help: reorder the parameters: lifetimes, then types, then consts: `<'a, A: 'a, T: 'a, const N: usize, const M: usize>`\n+\n+error: aborting due to previous error\n+"}, {"sha": "e83a96388c1909b60fef5e1e0ff58ee04a7e0cba", "filename": "src/test/ui/const-generics/defaults/complex-unord-param.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-unord-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-unord-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-unord-param.rs?ref=7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc", "patch": "@@ -1,11 +1,13 @@\n-// run-pass\n+// [full] run-pass\n+// revisions: full min\n // Checks a complicated usage of unordered params\n-\n-#![feature(const_generics)]\n-#![allow(incomplete_features)]\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n #![allow(dead_code)]\n \n struct NestedArrays<'a, const N: usize, A: 'a, const M: usize, T:'a =u32> {\n+  //[min]~^ ERROR type parameters must be declared prior to const parameters\n   args: &'a [&'a [T; M]; N],\n   specifier: A,\n }"}, {"sha": "9cc3e9c0da6658b6b166c6f6e07f5facbd5413a1", "filename": "src/test/ui/const-generics/defaults/intermixed-lifetime.full.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.full.stderr?ref=7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc", "patch": "@@ -1,11 +1,11 @@\n error: lifetime parameters must be declared prior to const parameters\n-  --> $DIR/intermixed-lifetime.rs:6:28\n+  --> $DIR/intermixed-lifetime.rs:7:28\n    |\n LL | struct Foo<const N: usize, 'a, T = u32>(&'a (), T);\n    |           -----------------^^---------- help: reorder the parameters: lifetimes, then consts and types: `<'a, const N: usize, T>`\n \n error: lifetime parameters must be declared prior to type parameters\n-  --> $DIR/intermixed-lifetime.rs:9:37\n+  --> $DIR/intermixed-lifetime.rs:11:37\n    |\n LL | struct Bar<const N: usize, T = u32, 'a>(&'a (), T);\n    |           --------------------------^^- help: reorder the parameters: lifetimes, then consts and types: `<'a, const N: usize, T>`", "previous_filename": "src/test/ui/const-generics/defaults/intermixed-lifetime.stderr"}, {"sha": "4d80fdb5bcbc2454634087fddfbce5b3620efaac", "filename": "src/test/ui/const-generics/defaults/intermixed-lifetime.min.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.min.stderr?ref=7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc", "patch": "@@ -0,0 +1,26 @@\n+error: lifetime parameters must be declared prior to const parameters\n+  --> $DIR/intermixed-lifetime.rs:7:28\n+   |\n+LL | struct Foo<const N: usize, 'a, T = u32>(&'a (), T);\n+   |           -----------------^^---------- help: reorder the parameters: lifetimes, then types, then consts: `<'a, T, const N: usize>`\n+\n+error: type parameters must be declared prior to const parameters\n+  --> $DIR/intermixed-lifetime.rs:7:32\n+   |\n+LL | struct Foo<const N: usize, 'a, T = u32>(&'a (), T);\n+   |           ---------------------^------- help: reorder the parameters: lifetimes, then types, then consts: `<'a, T, const N: usize>`\n+\n+error: lifetime parameters must be declared prior to const parameters\n+  --> $DIR/intermixed-lifetime.rs:11:37\n+   |\n+LL | struct Bar<const N: usize, T = u32, 'a>(&'a (), T);\n+   |           --------------------------^^- help: reorder the parameters: lifetimes, then types, then consts: `<'a, T, const N: usize>`\n+\n+error: type parameters must be declared prior to const parameters\n+  --> $DIR/intermixed-lifetime.rs:11:28\n+   |\n+LL | struct Bar<const N: usize, T = u32, 'a>(&'a (), T);\n+   |           -----------------^----------- help: reorder the parameters: lifetimes, then types, then consts: `<'a, T, const N: usize>`\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "cc0d1c6c0c97cbcd79d60f2c71a25e5c5113a2c2", "filename": "src/test/ui/const-generics/defaults/intermixed-lifetime.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.rs?ref=7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc", "patch": "@@ -1,12 +1,16 @@\n+// revisions: full min\n // Checks that lifetimes cannot be interspersed between consts and types.\n-\n-#![feature(const_generics)]\n-#![allow(incomplete_features)]\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n struct Foo<const N: usize, 'a, T = u32>(&'a (), T);\n //~^ Error lifetime parameters must be declared prior to const parameters\n+//[min]~^^ Error type parameters must be declared prior to const parameters\n \n struct Bar<const N: usize, T = u32, 'a>(&'a (), T);\n-//~^ Error lifetime parameters must be declared prior to type parameters\n+//[full]~^ Error lifetime parameters must be declared prior to type parameters\n+//[min]~^^ Error type parameters must be declared prior to const parameters\n+//[min]~| Error lifetime parameters must be declared prior to const parameters\n \n fn main() {}"}, {"sha": "59cc6f28af857ffb131fccabc99dba00ff6b788f", "filename": "src/test/ui/const-generics/defaults/simple-defaults.min.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fsimple-defaults.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fsimple-defaults.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fsimple-defaults.min.stderr?ref=7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc", "patch": "@@ -0,0 +1,8 @@\n+error: type parameters must be declared prior to const parameters\n+  --> $DIR/simple-defaults.rs:9:40\n+   |\n+LL | struct FixedOutput<'a, const N: usize, T=u32> {\n+   |                   ---------------------^----- help: reorder the parameters: lifetimes, then types, then consts: `<'a, T, const N: usize>`\n+\n+error: aborting due to previous error\n+"}, {"sha": "78abe3519985b49f95763a5b74dd0dcda767a43f", "filename": "src/test/ui/const-generics/defaults/simple-defaults.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fsimple-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fsimple-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fsimple-defaults.rs?ref=7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc", "patch": "@@ -1,10 +1,13 @@\n-// run-pass\n+// [full] run-pass\n+// revisions: min full\n // Checks some basic test cases for defaults.\n-#![feature(const_generics)]\n-#![allow(incomplete_features)]\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n #![allow(dead_code)]\n \n struct FixedOutput<'a, const N: usize, T=u32> {\n+  //[min]~^ ERROR type parameters must be declared prior to const parameters\n   out: &'a [T; N],\n }\n "}, {"sha": "7ea8d936d6141c1a5589017425a5904aa618d92f", "filename": "src/test/ui/const-generics/issues/auxiliary/const_generic_issues_lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fauxiliary%2Fconst_generic_issues_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fauxiliary%2Fconst_generic_issues_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fauxiliary%2Fconst_generic_issues_lib.rs?ref=7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc", "patch": "@@ -1,4 +1,6 @@\n-#![feature(const_generics)]\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n // All of these three items must be in `lib2` to reproduce the error\n "}, {"sha": "b805bc0db7e55fb758870abb2ddbc90440de60cf", "filename": "src/test/ui/const-generics/issues/issue-61935.full.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.full.stderr?ref=7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc", "patch": "@@ -0,0 +1,10 @@\n+error: constant expression depends on a generic parameter\n+  --> $DIR/issue-61935.rs:10:14\n+   |\n+LL |         Self:FooImpl<{N==0}>\n+   |              ^^^^^^^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: aborting due to previous error\n+"}, {"sha": "e5715ec658c5cb725874c8f99b6a35c9cb5e577f", "filename": "src/test/ui/const-generics/issues/issue-61935.min.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.min.stderr?ref=7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc", "patch": "@@ -0,0 +1,10 @@\n+error: generic parameters must not be used inside of non trivial constant values\n+  --> $DIR/issue-61935.rs:10:23\n+   |\n+LL |         Self:FooImpl<{N==0}>\n+   |                       ^ non-trivial anonymous constants must not depend on the parameter `N`\n+   |\n+   = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n+\n+error: aborting due to previous error\n+"}, {"sha": "64257da03094360d3056fbed616f9edebac783c0", "filename": "src/test/ui/const-generics/issues/issue-61935.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.rs?ref=7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc", "patch": "@@ -1,12 +1,15 @@\n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n trait Foo {}\n \n impl<const N: usize> Foo for [(); N]\n     where\n         Self:FooImpl<{N==0}>\n-//~^ERROR constant expression depends on a generic parameter\n+//[full]~^ERROR constant expression depends on a generic parameter\n+//[min]~^^ERROR generic parameters must not be used inside of non trivial constant values\n {}\n \n trait FooImpl<const IS_ZERO: bool>{}"}, {"sha": "a785af5f008ea739876541dea982df9a1336acd8", "filename": "src/test/ui/const-generics/issues/issue-61935.stderr", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/91c3ef8bef7fcc48cae3cc73bf831465bbedd4dc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91c3ef8bef7fcc48cae3cc73bf831465bbedd4dc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.stderr?ref=91c3ef8bef7fcc48cae3cc73bf831465bbedd4dc", "patch": "@@ -1,19 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-61935.rs:1:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-error: constant expression depends on a generic parameter\n-  --> $DIR/issue-61935.rs:8:14\n-   |\n-LL |         Self:FooImpl<{N==0}>\n-   |              ^^^^^^^^^^^^^^^\n-   |\n-   = note: this may fail depending on what value the parameter takes\n-\n-error: aborting due to previous error; 1 warning emitted\n-"}, {"sha": "a8fa37803566006057ea6f10573c1768fd3876b1", "filename": "src/test/ui/const-generics/issues/issue-62187-encountered-polymorphic-const.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62187-encountered-polymorphic-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62187-encountered-polymorphic-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62187-encountered-polymorphic-const.rs?ref=7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc", "patch": "@@ -1,7 +1,9 @@\n // run-pass\n \n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n pub trait BitLen: Sized {\n     const BIT_LEN: usize;\n@@ -12,5 +14,5 @@ impl<const L: usize> BitLen for [u8; L] {\n }\n \n fn main() {\n-    let foo = <[u8; 2]>::BIT_LEN; //~ WARN unused variable\n+    let _foo = <[u8; 2]>::BIT_LEN;\n }"}, {"sha": "a9abb877c094c81a488d10ff7278b3b52d72e2ad", "filename": "src/test/ui/const-generics/issues/issue-62187-encountered-polymorphic-const.stderr", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/91c3ef8bef7fcc48cae3cc73bf831465bbedd4dc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62187-encountered-polymorphic-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91c3ef8bef7fcc48cae3cc73bf831465bbedd4dc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62187-encountered-polymorphic-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62187-encountered-polymorphic-const.stderr?ref=91c3ef8bef7fcc48cae3cc73bf831465bbedd4dc", "patch": "@@ -1,19 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-62187-encountered-polymorphic-const.rs:3:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-warning: unused variable: `foo`\n-  --> $DIR/issue-62187-encountered-polymorphic-const.rs:15:9\n-   |\n-LL |     let foo = <[u8; 2]>::BIT_LEN;\n-   |         ^^^ help: if this is intentional, prefix it with an underscore: `_foo`\n-   |\n-   = note: `#[warn(unused_variables)]` on by default\n-\n-warning: 2 warnings emitted\n-"}, {"sha": "120aa8e4af5d2e0a8552e59775dcf24c3796b9b4", "filename": "src/test/ui/const-generics/issues/issue-62220.full.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.full.stderr?ref=7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc", "patch": "@@ -1,5 +1,5 @@\n error: constant expression depends on a generic parameter\n-  --> $DIR/issue-62220.rs:10:27\n+  --> $DIR/issue-62220.rs:13:27\n    |\n LL |     pub fn trunc(self) -> (TruncatedVector<T, { N }>, T) {\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/const-generics/issues/issue-62220.stderr"}, {"sha": "943b689bf61afe572e85b61cc5a2160061981f83", "filename": "src/test/ui/const-generics/issues/issue-62220.min.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.min.stderr?ref=7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc", "patch": "@@ -0,0 +1,10 @@\n+error: generic parameters must not be used inside of non trivial constant values\n+  --> $DIR/issue-62220.rs:8:59\n+   |\n+LL | pub type TruncatedVector<T, const N: usize> = Vector<T, { N - 1 }>;\n+   |                                                           ^ non-trivial anonymous constants must not depend on the parameter `N`\n+   |\n+   = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n+\n+error: aborting due to previous error\n+"}, {"sha": "acb13ad1170f2290a387a2eedbc5f4bbdee85829", "filename": "src/test/ui/const-generics/issues/issue-62220.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.rs?ref=7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc", "patch": "@@ -1,14 +1,17 @@\n-#![allow(incomplete_features)]\n-#![feature(const_generics)]\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n pub struct Vector<T, const N: usize>([T; N]);\n \n pub type TruncatedVector<T, const N: usize> = Vector<T, { N - 1 }>;\n+//[min]~^ ERROR generic parameters must not be used inside of non trivial constant values\n \n impl<T, const N: usize> Vector<T, { N }> {\n     /// Drop the last component and return the vector with one fewer dimension.\n     pub fn trunc(self) -> (TruncatedVector<T, { N }>, T) {\n-        //~^ ERROR constant expression depends on a generic parameter\n+        //[full]~^ ERROR constant expression depends on a generic parameter\n         unimplemented!()\n     }\n }"}, {"sha": "a8d44074db9d14b0fcf3e18641116a80aa0387d9", "filename": "src/test/ui/const-generics/issues/issue-62456.full.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.full.stderr?ref=7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc", "patch": "@@ -0,0 +1,10 @@\n+error: constant expression depends on a generic parameter\n+  --> $DIR/issue-62456.rs:7:20\n+   |\n+LL |     let _ = [0u64; N + 1];\n+   |                    ^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: aborting due to previous error\n+"}, {"sha": "335f0ead278719f249728599feb44d1123464775", "filename": "src/test/ui/const-generics/issues/issue-62456.min.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.min.stderr?ref=7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc", "patch": "@@ -0,0 +1,10 @@\n+error: generic parameters must not be used inside of non trivial constant values\n+  --> $DIR/issue-62456.rs:7:20\n+   |\n+LL |     let _ = [0u64; N + 1];\n+   |                    ^ non-trivial anonymous constants must not depend on the parameter `N`\n+   |\n+   = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n+\n+error: aborting due to previous error\n+"}, {"sha": "c96868c00a3d60f343fd29ccda817a0ddf98e69e", "filename": "src/test/ui/const-generics/issues/issue-62456.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.rs?ref=7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc", "patch": "@@ -1,9 +1,12 @@\n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n fn foo<const N: usize>() {\n     let _ = [0u64; N + 1];\n-    //~^ ERROR constant expression depends on a generic parameter\n+    //[full]~^ ERROR constant expression depends on a generic parameter\n+    //[min]~^^ ERROR generic parameters must not be used inside of non trivial constant values\n }\n \n fn main() {}"}, {"sha": "0454fed670598667acfb85290a9ef7275eeb1d4c", "filename": "src/test/ui/const-generics/issues/issue-62456.stderr", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/91c3ef8bef7fcc48cae3cc73bf831465bbedd4dc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91c3ef8bef7fcc48cae3cc73bf831465bbedd4dc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.stderr?ref=91c3ef8bef7fcc48cae3cc73bf831465bbedd4dc", "patch": "@@ -1,19 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-62456.rs:1:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-error: constant expression depends on a generic parameter\n-  --> $DIR/issue-62456.rs:5:20\n-   |\n-LL |     let _ = [0u64; N + 1];\n-   |                    ^^^^^\n-   |\n-   = note: this may fail depending on what value the parameter takes\n-\n-error: aborting due to previous error; 1 warning emitted\n-"}, {"sha": "9c84f06ce9f74987aea8f299bcb876e898cde91e", "filename": "src/test/ui/const-generics/issues/issue-62504.full.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.full.stderr?ref=7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc", "patch": "@@ -1,5 +1,5 @@\n error: constant expression depends on a generic parameter\n-  --> $DIR/issue-62504.rs:18:25\n+  --> $DIR/issue-62504.rs:19:25\n    |\n LL |         ArrayHolder([0; Self::SIZE])\n    |                         ^^^^^^^^^^", "previous_filename": "src/test/ui/const-generics/issues/issue-62504.stderr"}, {"sha": "752df17aad61490d22b1e7ef60ca9bf2f7134ce5", "filename": "src/test/ui/const-generics/issues/issue-62504.min.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.min.stderr?ref=7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc", "patch": "@@ -0,0 +1,10 @@\n+error: generic parameters must not be used inside of non trivial constant values\n+  --> $DIR/issue-62504.rs:19:25\n+   |\n+LL |         ArrayHolder([0; Self::SIZE])\n+   |                         ^^^^^^^^^^ non-trivial anonymous constants must not depend on the parameter `Self`\n+   |\n+   = help: it is currently only allowed to use either `Self` or `{ Self }` as generic constants\n+\n+error: aborting due to previous error\n+"}, {"sha": "b520dbe4e803bf2e6dd96776bddb944847fa17cd", "filename": "src/test/ui/const-generics/issues/issue-62504.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.rs?ref=7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc", "patch": "@@ -1,7 +1,8 @@\n-// Regression test for #62504\n-\n-#![feature(const_generics)]\n+// revisions: full min\n #![allow(incomplete_features)]\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n trait HasSize {\n     const SIZE: usize;\n@@ -16,7 +17,8 @@ struct ArrayHolder<const X: usize>([u32; X]);\n impl<const X: usize> ArrayHolder<X> {\n     pub const fn new() -> Self {\n         ArrayHolder([0; Self::SIZE])\n-        //~^ ERROR constant expression depends on a generic parameter\n+        //[full]~^ ERROR constant expression depends on a generic parameter\n+        //[min]~^^ ERROR generic parameters must not be used inside of non trivial constant values\n     }\n }\n "}, {"sha": "6903b20fad63c076690be4d6635c376a720183fb", "filename": "src/test/ui/const-generics/issues/issue-62579-no-match.min.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62579-no-match.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62579-no-match.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62579-no-match.min.stderr?ref=7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc", "patch": "@@ -0,0 +1,11 @@\n+error: `NoMatch` is forbidden as the type of a const generic parameter\n+  --> $DIR/issue-62579-no-match.rs:10:17\n+   |\n+LL | fn foo<const T: NoMatch>() -> bool {\n+   |                 ^^^^^^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error: aborting due to previous error\n+"}, {"sha": "c9853aa9162e10117028f104f2e95f695f3fa70b", "filename": "src/test/ui/const-generics/issues/issue-62579-no-match.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62579-no-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62579-no-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62579-no-match.rs?ref=7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc", "patch": "@@ -1,12 +1,14 @@\n-// run-pass\n-\n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+// [full] run-pass\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n #[derive(PartialEq, Eq)]\n struct NoMatch;\n \n fn foo<const T: NoMatch>() -> bool {\n+    //[min]~^ ERROR `NoMatch` is forbidden as the type of a const generic parameter\n     true\n }\n "}, {"sha": "9fb9b5b13d8d529eba87c07bf22697d94c1410db", "filename": "src/test/ui/const-generics/issues/issue-62579-no-match.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/91c3ef8bef7fcc48cae3cc73bf831465bbedd4dc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62579-no-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91c3ef8bef7fcc48cae3cc73bf831465bbedd4dc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62579-no-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62579-no-match.stderr?ref=91c3ef8bef7fcc48cae3cc73bf831465bbedd4dc", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-62579-no-match.rs:3:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "c8b9db89410987e77d0ead80de9d99fc64cf49ee", "filename": "src/test/ui/const-generics/issues/issue-62878.full.stderr", "status": "renamed", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.full.stderr?ref=7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc", "patch": "@@ -1,37 +1,28 @@\n error[E0770]: the type of const parameters must not depend on other generic parameters\n-  --> $DIR/issue-62878.rs:3:38\n+  --> $DIR/issue-62878.rs:6:38\n    |\n LL | fn foo<const N: usize, const A: [u8; N]>() {}\n    |                                      ^ the type must not depend on the parameter `N`\n \n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-62878.rs:1:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n error[E0107]: wrong number of const arguments: expected 2, found 1\n-  --> $DIR/issue-62878.rs:7:5\n+  --> $DIR/issue-62878.rs:11:5\n    |\n LL |     foo::<_, {[1]}>();\n    |     ^^^^^^^^^^^^^^^ expected 2 const arguments\n \n error[E0107]: wrong number of type arguments: expected 0, found 1\n-  --> $DIR/issue-62878.rs:7:11\n+  --> $DIR/issue-62878.rs:11:11\n    |\n LL |     foo::<_, {[1]}>();\n    |           ^ unexpected type argument\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-62878.rs:7:15\n+  --> $DIR/issue-62878.rs:11:15\n    |\n LL |     foo::<_, {[1]}>();\n    |               ^^^ expected `usize`, found array `[{integer}; 1]`\n \n-error: aborting due to 4 previous errors; 1 warning emitted\n+error: aborting due to 4 previous errors\n \n Some errors have detailed explanations: E0107, E0308, E0770.\n For more information about an error, try `rustc --explain E0107`.", "previous_filename": "src/test/ui/const-generics/issues/issue-62878.stderr"}, {"sha": "34edd09b5156535bbd8338f23d2f8698bd685d58", "filename": "src/test/ui/const-generics/issues/issue-62878.min.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.min.stderr?ref=7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc", "patch": "@@ -0,0 +1,18 @@\n+error[E0770]: the type of const parameters must not depend on other generic parameters\n+  --> $DIR/issue-62878.rs:6:38\n+   |\n+LL | fn foo<const N: usize, const A: [u8; N]>() {}\n+   |                                      ^ the type must not depend on the parameter `N`\n+\n+error: `[u8; _]` is forbidden as the type of a const generic parameter\n+  --> $DIR/issue-62878.rs:6:33\n+   |\n+LL | fn foo<const N: usize, const A: [u8; N]>() {}\n+   |                                 ^^^^^^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0770`."}, {"sha": "0487dda2fe81d87432d7e039cc5b1d8e6fdb24a5", "filename": "src/test/ui/const-generics/issues/issue-62878.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.rs?ref=7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc", "patch": "@@ -1,11 +1,15 @@\n-#![feature(const_generics)] //~ WARN the feature `const_generics` is incomplete\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n fn foo<const N: usize, const A: [u8; N]>() {}\n //~^ ERROR the type of const parameters must not\n+//[min]~| ERROR `[u8; _]` is forbidden as the type of a const generic parameter\n \n fn main() {\n     foo::<_, {[1]}>();\n-    //~^ ERROR wrong number of const arguments\n-    //~| ERROR wrong number of type arguments\n-    //~| ERROR mismatched types\n+    //[full]~^ ERROR wrong number of const arguments\n+    //[full]~| ERROR wrong number of type arguments\n+    //[full]~| ERROR mismatched types\n }"}, {"sha": "78c7ebff059855d658e38177173ffa9953c95327", "filename": "src/test/ui/const-generics/issues/issue-67185-2.full.stderr", "status": "renamed", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-2.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-2.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-2.full.stderr?ref=7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc", "patch": "@@ -1,14 +1,5 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-67185-2.rs:1:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n error[E0277]: the trait bound `[u16; 3]: Bar` is not satisfied\n-  --> $DIR/issue-67185-2.rs:15:1\n+  --> $DIR/issue-67185-2.rs:17:1\n    |\n LL | / trait Foo\n LL | |\n@@ -26,7 +17,7 @@ LL | | }\n    = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable\n \n error[E0277]: the trait bound `[[u16; 3]; 2]: Bar` is not satisfied\n-  --> $DIR/issue-67185-2.rs:15:1\n+  --> $DIR/issue-67185-2.rs:17:1\n    |\n LL | / trait Foo\n LL | |\n@@ -44,7 +35,7 @@ LL | | }\n    = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable\n \n error[E0277]: the trait bound `[u16; 3]: Bar` is not satisfied\n-  --> $DIR/issue-67185-2.rs:25:6\n+  --> $DIR/issue-67185-2.rs:27:6\n    |\n LL | trait Foo\n    |       --- required by a bound in this\n@@ -60,7 +51,7 @@ LL | impl Foo for FooImpl {}\n              <[u16; 4] as Bar>\n \n error[E0277]: the trait bound `[[u16; 3]; 2]: Bar` is not satisfied\n-  --> $DIR/issue-67185-2.rs:25:6\n+  --> $DIR/issue-67185-2.rs:27:6\n    |\n LL | trait Foo\n    |       --- required by a bound in this\n@@ -76,7 +67,7 @@ LL | impl Foo for FooImpl {}\n              <[u16; 4] as Bar>\n \n error[E0277]: the trait bound `[[u16; 3]; 2]: Bar` is not satisfied\n-  --> $DIR/issue-67185-2.rs:29:14\n+  --> $DIR/issue-67185-2.rs:31:14\n    |\n LL | trait Foo\n    |       --- required by a bound in this\n@@ -92,7 +83,7 @@ LL | fn f(_: impl Foo) {}\n              <[u16; 4] as Bar>\n \n error[E0277]: the trait bound `[u16; 3]: Bar` is not satisfied\n-  --> $DIR/issue-67185-2.rs:29:14\n+  --> $DIR/issue-67185-2.rs:31:14\n    |\n LL | trait Foo\n    |       --- required by a bound in this\n@@ -107,6 +98,6 @@ LL | fn f(_: impl Foo) {}\n              <[[u16; 3]; 3] as Bar>\n              <[u16; 4] as Bar>\n \n-error: aborting due to 6 previous errors; 1 warning emitted\n+error: aborting due to 6 previous errors\n \n For more information about this error, try `rustc --explain E0277`.", "previous_filename": "src/test/ui/const-generics/issues/issue-67185-2.stderr"}, {"sha": "78c7ebff059855d658e38177173ffa9953c95327", "filename": "src/test/ui/const-generics/issues/issue-67185-2.min.stderr", "status": "added", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-2.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-2.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-2.min.stderr?ref=7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc", "patch": "@@ -0,0 +1,103 @@\n+error[E0277]: the trait bound `[u16; 3]: Bar` is not satisfied\n+  --> $DIR/issue-67185-2.rs:17:1\n+   |\n+LL | / trait Foo\n+LL | |\n+LL | |     where\n+LL | |         [<u8 as Baz>::Quaks; 2]: Bar,\n+LL | |         <u8 as Baz>::Quaks: Bar,\n+LL | | {\n+LL | | }\n+   | |_^ the trait `Bar` is not implemented for `[u16; 3]`\n+   |\n+   = help: the following implementations were found:\n+             <[[u16; 3]; 3] as Bar>\n+             <[u16; 4] as Bar>\n+   = help: see issue #48214\n+   = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable\n+\n+error[E0277]: the trait bound `[[u16; 3]; 2]: Bar` is not satisfied\n+  --> $DIR/issue-67185-2.rs:17:1\n+   |\n+LL | / trait Foo\n+LL | |\n+LL | |     where\n+LL | |         [<u8 as Baz>::Quaks; 2]: Bar,\n+LL | |         <u8 as Baz>::Quaks: Bar,\n+LL | | {\n+LL | | }\n+   | |_^ the trait `Bar` is not implemented for `[[u16; 3]; 2]`\n+   |\n+   = help: the following implementations were found:\n+             <[[u16; 3]; 3] as Bar>\n+             <[u16; 4] as Bar>\n+   = help: see issue #48214\n+   = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable\n+\n+error[E0277]: the trait bound `[u16; 3]: Bar` is not satisfied\n+  --> $DIR/issue-67185-2.rs:27:6\n+   |\n+LL | trait Foo\n+   |       --- required by a bound in this\n+...\n+LL |         <u8 as Baz>::Quaks: Bar,\n+   |                             --- required by this bound in `Foo`\n+...\n+LL | impl Foo for FooImpl {}\n+   |      ^^^ the trait `Bar` is not implemented for `[u16; 3]`\n+   |\n+   = help: the following implementations were found:\n+             <[[u16; 3]; 3] as Bar>\n+             <[u16; 4] as Bar>\n+\n+error[E0277]: the trait bound `[[u16; 3]; 2]: Bar` is not satisfied\n+  --> $DIR/issue-67185-2.rs:27:6\n+   |\n+LL | trait Foo\n+   |       --- required by a bound in this\n+...\n+LL |         [<u8 as Baz>::Quaks; 2]: Bar,\n+   |                                  --- required by this bound in `Foo`\n+...\n+LL | impl Foo for FooImpl {}\n+   |      ^^^ the trait `Bar` is not implemented for `[[u16; 3]; 2]`\n+   |\n+   = help: the following implementations were found:\n+             <[[u16; 3]; 3] as Bar>\n+             <[u16; 4] as Bar>\n+\n+error[E0277]: the trait bound `[[u16; 3]; 2]: Bar` is not satisfied\n+  --> $DIR/issue-67185-2.rs:31:14\n+   |\n+LL | trait Foo\n+   |       --- required by a bound in this\n+...\n+LL |         [<u8 as Baz>::Quaks; 2]: Bar,\n+   |                                  --- required by this bound in `Foo`\n+...\n+LL | fn f(_: impl Foo) {}\n+   |              ^^^ the trait `Bar` is not implemented for `[[u16; 3]; 2]`\n+   |\n+   = help: the following implementations were found:\n+             <[[u16; 3]; 3] as Bar>\n+             <[u16; 4] as Bar>\n+\n+error[E0277]: the trait bound `[u16; 3]: Bar` is not satisfied\n+  --> $DIR/issue-67185-2.rs:31:14\n+   |\n+LL | trait Foo\n+   |       --- required by a bound in this\n+...\n+LL |         <u8 as Baz>::Quaks: Bar,\n+   |                             --- required by this bound in `Foo`\n+...\n+LL | fn f(_: impl Foo) {}\n+   |              ^^^ the trait `Bar` is not implemented for `[u16; 3]`\n+   |\n+   = help: the following implementations were found:\n+             <[[u16; 3]; 3] as Bar>\n+             <[u16; 4] as Bar>\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "1176d0c690403901d254de4caf0d356ee800f577", "filename": "src/test/ui/const-generics/issues/issue-67185-2.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-2.rs?ref=7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc", "patch": "@@ -1,5 +1,7 @@\n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n trait Baz {\n     type Quaks;"}, {"sha": "27a56b8eb02b2a0692f28bf6042155c77320600f", "filename": "src/test/ui/const-generics/issues/issue-67739.full.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.full.stderr?ref=7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc", "previous_filename": "src/test/ui/const-generics/issues/issue-67739.stderr"}, {"sha": "1254ee7239dc78877e4e205ad0a717ba89b0b270", "filename": "src/test/ui/const-generics/issues/issue-67739.min.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.min.stderr?ref=7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc", "patch": "@@ -0,0 +1,10 @@\n+error: generic parameters must not be used inside of non trivial constant values\n+  --> $DIR/issue-67739.rs:12:30\n+   |\n+LL |         [0u8; mem::size_of::<Self::Associated>()];\n+   |                              ^^^^^^^^^^^^^^^^ non-trivial anonymous constants must not depend on the parameter `Self`\n+   |\n+   = help: it is currently only allowed to use either `Self` or `{ Self }` as generic constants\n+\n+error: aborting due to previous error\n+"}, {"sha": "72bf3ee9602fc3ea451f5fce9e2bdb26284de90c", "filename": "src/test/ui/const-generics/issues/issue-67739.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.rs?ref=7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc", "patch": "@@ -1,7 +1,7 @@\n-// Regression test for #67739\n-\n-#![allow(incomplete_features)]\n-#![feature(const_generics)]\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n use std::mem;\n \n@@ -10,7 +10,8 @@ pub trait Trait {\n \n     fn associated_size(&self) -> usize {\n         [0u8; mem::size_of::<Self::Associated>()];\n-        //~^ ERROR constant expression depends on a generic parameter\n+        //[full]~^ ERROR constant expression depends on a generic parameter\n+        //[min]~^^ ERROR generic parameters must not be used inside of non trivial constant values\n         0\n     }\n }"}, {"sha": "ac774f50c74938b23855fcc90a4a188d39589df9", "filename": "src/test/ui/const-generics/issues/issue-68366.full.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.full.stderr?ref=7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc", "patch": "@@ -1,5 +1,5 @@\n error[E0207]: the const parameter `N` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/issue-68366.rs:10:13\n+  --> $DIR/issue-68366.rs:12:13\n    |\n LL | impl <const N: usize> Collatz<{Some(N)}> {}\n    |             ^ unconstrained const parameter\n@@ -8,7 +8,7 @@ LL | impl <const N: usize> Collatz<{Some(N)}> {}\n    = note: proving the result of expressions other than the parameter are unique is not supported\n \n error[E0207]: the const parameter `N` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/issue-68366.rs:15:12\n+  --> $DIR/issue-68366.rs:18:12\n    |\n LL | impl<const N: usize> Foo {}\n    |            ^ unconstrained const parameter", "previous_filename": "src/test/ui/const-generics/issues/issue-68366.stderr"}, {"sha": "8d34bdc6ea0c81b59bf1f13046c90c65aca7ebd3", "filename": "src/test/ui/const-generics/issues/issue-68366.min.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.min.stderr?ref=7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc", "patch": "@@ -0,0 +1,29 @@\n+error: generic parameters must not be used inside of non trivial constant values\n+  --> $DIR/issue-68366.rs:12:37\n+   |\n+LL | impl <const N: usize> Collatz<{Some(N)}> {}\n+   |                                     ^ non-trivial anonymous constants must not depend on the parameter `N`\n+   |\n+   = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n+\n+error[E0207]: the const parameter `N` is not constrained by the impl trait, self type, or predicates\n+  --> $DIR/issue-68366.rs:12:13\n+   |\n+LL | impl <const N: usize> Collatz<{Some(N)}> {}\n+   |             ^ unconstrained const parameter\n+   |\n+   = note: expressions using a const parameter must map each value to a distinct output value\n+   = note: proving the result of expressions other than the parameter are unique is not supported\n+\n+error[E0207]: the const parameter `N` is not constrained by the impl trait, self type, or predicates\n+  --> $DIR/issue-68366.rs:18:12\n+   |\n+LL | impl<const N: usize> Foo {}\n+   |            ^ unconstrained const parameter\n+   |\n+   = note: expressions using a const parameter must map each value to a distinct output value\n+   = note: proving the result of expressions other than the parameter are unique is not supported\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0207`."}, {"sha": "819fcaffea18cc5a601901ba2a8da515c856ae12", "filename": "src/test/ui/const-generics/issues/issue-68366.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.rs?ref=7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc", "patch": "@@ -2,13 +2,16 @@\n // The note should relate to the fact that it cannot be shown forall N that it maps 1-1 to a new\n // type.\n \n-#![feature(const_generics)]\n-#![allow(incomplete_features)]\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n struct Collatz<const N: Option<usize>>;\n \n impl <const N: usize> Collatz<{Some(N)}> {}\n //~^ ERROR the const parameter\n+//[min]~^^ generic parameters must not be used inside of non trivial constant values\n \n struct Foo;\n "}, {"sha": "b4c79d4171b7ac79281eb39d8428d309c9beee9b", "filename": "src/test/ui/const-generics/issues/issue-72787.full.stderr", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72787.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72787.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72787.full.stderr?ref=7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc", "patch": "@@ -1,37 +1,37 @@\n error: constant expression depends on a generic parameter\n-  --> $DIR/issue-72787.rs:9:32\n+  --> $DIR/issue-72787.rs:11:32\n    |\n LL |     Condition<{ LHS <= RHS }>: True\n    |                                ^^^^\n    |\n    = note: this may fail depending on what value the parameter takes\n \n error: constant expression depends on a generic parameter\n-  --> $DIR/issue-72787.rs:20:42\n+  --> $DIR/issue-72787.rs:26:42\n    |\n LL |     IsLessOrEqual<{ 8 - I }, { 8 - J }>: True,\n    |                                          ^^^^\n    |\n    = note: this may fail depending on what value the parameter takes\n \n error: constant expression depends on a generic parameter\n-  --> $DIR/issue-72787.rs:20:42\n+  --> $DIR/issue-72787.rs:26:42\n    |\n LL |     IsLessOrEqual<{ 8 - I }, { 8 - J }>: True,\n    |                                          ^^^^\n    |\n    = note: this may fail depending on what value the parameter takes\n \n error: constant expression depends on a generic parameter\n-  --> $DIR/issue-72787.rs:20:42\n+  --> $DIR/issue-72787.rs:26:42\n    |\n LL |     IsLessOrEqual<{ 8 - I }, { 8 - J }>: True,\n    |                                          ^^^^\n    |\n    = note: this may fail depending on what value the parameter takes\n \n error: constant expression depends on a generic parameter\n-  --> $DIR/issue-72787.rs:20:42\n+  --> $DIR/issue-72787.rs:26:42\n    |\n LL |     IsLessOrEqual<{ 8 - I }, { 8 - J }>: True,\n    |                                          ^^^^", "previous_filename": "src/test/ui/const-generics/issues/issue-72787.stderr"}, {"sha": "d3e9887fe209c9c48ddfff1d73f81ce774a0b3cf", "filename": "src/test/ui/const-generics/issues/issue-72787.min.stderr", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72787.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72787.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72787.min.stderr?ref=7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc", "patch": "@@ -0,0 +1,57 @@\n+error: generic parameters must not be used inside of non trivial constant values\n+  --> $DIR/issue-72787.rs:11:17\n+   |\n+LL |     Condition<{ LHS <= RHS }>: True\n+   |                 ^^^ non-trivial anonymous constants must not depend on the parameter `LHS`\n+   |\n+   = help: it is currently only allowed to use either `LHS` or `{ LHS }` as generic constants\n+\n+error: generic parameters must not be used inside of non trivial constant values\n+  --> $DIR/issue-72787.rs:11:24\n+   |\n+LL |     Condition<{ LHS <= RHS }>: True\n+   |                        ^^^ non-trivial anonymous constants must not depend on the parameter `RHS`\n+   |\n+   = help: it is currently only allowed to use either `RHS` or `{ RHS }` as generic constants\n+\n+error: generic parameters must not be used inside of non trivial constant values\n+  --> $DIR/issue-72787.rs:26:25\n+   |\n+LL |     IsLessOrEqual<{ 8 - I }, { 8 - J }>: True,\n+   |                         ^ non-trivial anonymous constants must not depend on the parameter `I`\n+   |\n+   = help: it is currently only allowed to use either `I` or `{ I }` as generic constants\n+\n+error: generic parameters must not be used inside of non trivial constant values\n+  --> $DIR/issue-72787.rs:26:36\n+   |\n+LL |     IsLessOrEqual<{ 8 - I }, { 8 - J }>: True,\n+   |                                    ^ non-trivial anonymous constants must not depend on the parameter `J`\n+   |\n+   = help: it is currently only allowed to use either `J` or `{ J }` as generic constants\n+\n+error[E0283]: type annotations needed\n+  --> $DIR/issue-72787.rs:22:26\n+   |\n+LL | pub trait True {}\n+   | -------------- required by this bound in `True`\n+...\n+LL |     IsLessOrEqual<I, 8>: True,\n+   |                          ^^^^ cannot infer type for struct `IsLessOrEqual<I, 8_u32>`\n+   |\n+   = note: cannot satisfy `IsLessOrEqual<I, 8_u32>: True`\n+\n+error[E0283]: type annotations needed\n+  --> $DIR/issue-72787.rs:22:26\n+   |\n+LL | pub trait True {}\n+   | -------------- required by this bound in `True`\n+...\n+LL |     IsLessOrEqual<I, 8>: True,\n+   |                          ^^^^ cannot infer type for struct `IsLessOrEqual<I, 8_u32>`\n+   |\n+   = note: cannot satisfy `IsLessOrEqual<I, 8_u32>: True`\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0283`."}, {"sha": "45c20191c88486fdc7e16329e403bc062c65a567", "filename": "src/test/ui/const-generics/issues/issue-72787.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72787.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72787.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72787.rs?ref=7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc", "patch": "@@ -1,13 +1,17 @@\n-#![feature(const_generics)]\n-#![allow(incomplete_features)]\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n pub struct IsLessOrEqual<const LHS: u32, const RHS: u32>;\n pub struct Condition<const CONDITION: bool>;\n pub trait True {}\n \n impl<const LHS: u32, const RHS: u32> True for IsLessOrEqual<LHS, RHS> where\n     Condition<{ LHS <= RHS }>: True\n-//~^ Error constant expression depends on a generic parameter\n+//[full]~^ Error constant expression depends on a generic parameter\n+//[min]~^^ Error generic parameters must not be used inside of non trivial constant values\n+//[min]~| Error generic parameters must not be used inside of non trivial constant values\n {\n }\n impl True for Condition<true> {}\n@@ -16,12 +20,16 @@ struct S<const I: u32, const J: u32>;\n impl<const I: u32, const J: u32> S<I, J>\n where\n     IsLessOrEqual<I, 8>: True,\n+//[min]~^ Error type annotations needed [E0283]\n+//[min]~| Error type annotations needed [E0283]\n     IsLessOrEqual<J, 8>: True,\n     IsLessOrEqual<{ 8 - I }, { 8 - J }>: True,\n-//~^ Error constant expression depends on a generic parameter\n-//~| Error constant expression depends on a generic parameter\n-//~| Error constant expression depends on a generic parameter\n-//~| Error constant expression depends on a generic parameter\n+//[full]~^ constant expression depends on a generic parameter\n+//[full]~| constant expression depends on a generic parameter\n+//[full]~| constant expression depends on a generic parameter\n+//[full]~| constant expression depends on a generic parameter\n+//[min]~^^^^^ Error generic parameters must not be used inside of non trivial constant values\n+//[min]~| Error generic parameters must not be used inside of non trivial constant values\n     // Condition<{ 8 - I <= 8 - J }>: True,\n {\n     fn print() {"}, {"sha": "e4105a3df1c88f26f1c19bf7933354060ad45fb2", "filename": "src/test/ui/const-generics/issues/issue-72819-generic-in-const-eval.full.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.full.stderr?ref=7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc", "patch": "@@ -1,5 +1,5 @@\n error: constant expression depends on a generic parameter\n-  --> $DIR/issue-72819-generic-in-const-eval.rs:7:47\n+  --> $DIR/issue-72819-generic-in-const-eval.rs:9:47\n    |\n LL | where Assert::<{N < usize::max_value() / 2}>: IsTrue,\n    |                                               ^^^^^^", "previous_filename": "src/test/ui/const-generics/issues/issue-72819-generic-in-const-eval.stderr"}, {"sha": "48a1f0bd19c0a8a124c63c9b9a21fc88d3fbcbca", "filename": "src/test/ui/const-generics/issues/issue-72819-generic-in-const-eval.min.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.min.stderr?ref=7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc", "patch": "@@ -0,0 +1,10 @@\n+error: generic parameters must not be used inside of non trivial constant values\n+  --> $DIR/issue-72819-generic-in-const-eval.rs:9:17\n+   |\n+LL | where Assert::<{N < usize::max_value() / 2}>: IsTrue,\n+   |                 ^ non-trivial anonymous constants must not depend on the parameter `N`\n+   |\n+   = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n+\n+error: aborting due to previous error\n+"}, {"sha": "b653b91d99d144afdbe7adc7e9bc468ef117620a", "filename": "src/test/ui/const-generics/issues/issue-72819-generic-in-const-eval.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.rs?ref=7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc", "patch": "@@ -1,11 +1,14 @@\n // Regression test for #72819: ICE due to failure in resolving the const generic in `Arr`'s type\n // bounds.\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n-#![feature(const_generics)]\n-#![allow(incomplete_features)]\n struct Arr<const N: usize>\n where Assert::<{N < usize::max_value() / 2}>: IsTrue,\n-//~^ ERROR constant expression depends on a generic parameter\n+//[full]~^ ERROR constant expression depends on a generic parameter\n+//[min]~^^ ERROR generic parameters must not be used inside of non trivial constant values\n {\n }\n "}, {"sha": "c153a93cdef4f002c065fd2f9d5320a56c3c0b1d", "filename": "src/test/ui/const-generics/issues/issue-73120.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73120.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73120.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73120.rs?ref=7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc", "patch": "@@ -1,3 +1,4 @@\n+// revisions: full min\n // check-pass\n // aux-build:const_generic_issues_lib.rs\n extern crate const_generic_issues_lib as lib2;"}]}