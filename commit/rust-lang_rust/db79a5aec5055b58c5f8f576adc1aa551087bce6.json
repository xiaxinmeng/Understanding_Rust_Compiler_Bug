{"sha": "db79a5aec5055b58c5f8f576adc1aa551087bce6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiNzlhNWFlYzUwNTViNThjNWY4ZjU3NmFkYzFhYTU1MTA4N2JjZTY=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2015-09-08T05:01:28Z"}, "committer": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2015-09-08T05:01:28Z"}, "message": "Merge pull request #260 from cburgdorf/struct_lit_force_multiline\n\nImplements struct_lit_force_multiline", "tree": {"sha": "e62f78aaf580576cdf258ca4669306ad5a7ecdab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e62f78aaf580576cdf258ca4669306ad5a7ecdab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db79a5aec5055b58c5f8f576adc1aa551087bce6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db79a5aec5055b58c5f8f576adc1aa551087bce6", "html_url": "https://github.com/rust-lang/rust/commit/db79a5aec5055b58c5f8f576adc1aa551087bce6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db79a5aec5055b58c5f8f576adc1aa551087bce6/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "156263a3c45eb9916f51a520ae304b9a08d10ea1", "url": "https://api.github.com/repos/rust-lang/rust/commits/156263a3c45eb9916f51a520ae304b9a08d10ea1", "html_url": "https://github.com/rust-lang/rust/commit/156263a3c45eb9916f51a520ae304b9a08d10ea1"}, {"sha": "33c5776d30723e68d40a84dca57f7895feadb1c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/33c5776d30723e68d40a84dca57f7895feadb1c4", "html_url": "https://github.com/rust-lang/rust/commit/33c5776d30723e68d40a84dca57f7895feadb1c4"}], "stats": {"total": 328, "additions": 320, "deletions": 8}, "files": [{"sha": "95994531950852c84739fd9623fc4689ae94b22c", "filename": "src/config.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/db79a5aec5055b58c5f8f576adc1aa551087bce6/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db79a5aec5055b58c5f8f576adc1aa551087bce6/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=db79a5aec5055b58c5f8f576adc1aa551087bce6", "patch": "@@ -45,6 +45,26 @@ impl Density {\n     }\n }\n \n+#[derive(Copy, Clone, Eq, PartialEq, Debug)]\n+pub enum MultilineStyle {\n+    // Use horizontal layout if it fits in one line, fall back to vertical\n+    PreferSingle,\n+    // Use vertical layout\n+    ForceMulti,\n+}\n+\n+\n+impl_enum_decodable!(MultilineStyle, PreferSingle, ForceMulti);\n+\n+impl MultilineStyle {\n+    pub fn to_list_tactic(self) -> ListTactic {\n+        match self {\n+            MultilineStyle::PreferSingle => ListTactic::HorizontalVertical,\n+            MultilineStyle::ForceMulti => ListTactic::Vertical,\n+        }\n+    }\n+}\n+\n macro_rules! create_config {\n     ($($i:ident: $ty:ty),+ $(,)*) => (\n         #[derive(RustcDecodable, Clone)]\n@@ -122,6 +142,7 @@ create_config! {\n     struct_trailing_comma: SeparatorTactic,\n     struct_lit_trailing_comma: SeparatorTactic,\n     struct_lit_style: StructLitStyle,\n+    struct_lit_multiline_style: MultilineStyle,\n     enum_trailing_comma: bool,\n     report_todo: ReportTactic,\n     report_fixme: ReportTactic,\n@@ -155,6 +176,7 @@ impl Default for Config {\n             struct_trailing_comma: SeparatorTactic::Vertical,\n             struct_lit_trailing_comma: SeparatorTactic::Vertical,\n             struct_lit_style: StructLitStyle::Block,\n+            struct_lit_multiline_style: MultilineStyle::PreferSingle,\n             enum_trailing_comma: true,\n             report_todo: ReportTactic::Always,\n             report_fixme: ReportTactic::Never,"}, {"sha": "2923aa45097d60256b5d7fb59878004fd1cef05d", "filename": "src/expr.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/db79a5aec5055b58c5f8f576adc1aa551087bce6/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db79a5aec5055b58c5f8f576adc1aa551087bce6/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=db79a5aec5055b58c5f8f576adc1aa551087bce6", "patch": "@@ -17,7 +17,7 @@ use StructLitStyle;\n use utils::{span_after, make_indent, extra_offset, first_line_width, last_line_width, wrap_str,\n             binary_search};\n use visitor::FmtVisitor;\n-use config::BlockIndentStyle;\n+use config::{BlockIndentStyle, MultilineStyle};\n use comment::{FindUncommented, rewrite_comment, contains_comment};\n use types::rewrite_path;\n use items::{span_lo_for_arg, span_hi_for_arg, rewrite_fn_input};\n@@ -1019,7 +1019,10 @@ fn rewrite_struct_lit<'a>(context: &RewriteContext,\n                              span.hi);\n \n     let fmt = ListFormatting {\n-        tactic: ListTactic::HorizontalVertical,\n+        tactic: match (context.config.struct_lit_style, fields.len()) {\n+            (StructLitStyle::Visual, 1) => ListTactic::HorizontalVertical,\n+            _ => context.config.struct_lit_multiline_style.to_list_tactic(),\n+        },\n         separator: \",\",\n         trailing_separator: if base.is_some() {\n             SeparatorTactic::Never\n@@ -1033,12 +1036,16 @@ fn rewrite_struct_lit<'a>(context: &RewriteContext,\n     };\n     let fields_str = try_opt!(write_list(&items.collect::<Vec<_>>(), &fmt));\n \n-    match context.config.struct_lit_style {\n-        StructLitStyle::Block if fields_str.contains('\\n') => {\n-            let inner_indent = make_indent(context.block_indent + context.config.tab_spaces);\n-            let outer_indent = make_indent(context.block_indent);\n-            Some(format!(\"{} {{\\n{}{}\\n{}}}\", path_str, inner_indent, fields_str, outer_indent))\n-        }\n+    let format_on_newline = || {\n+                                let inner_indent = make_indent(context.block_indent +\n+                                                               context.config.tab_spaces);\n+                                let outer_indent = make_indent(context.block_indent);\n+                                Some(format!(\"{} {{\\n{}{}\\n{}}}\", path_str, inner_indent, fields_str, outer_indent))\n+                            };\n+\n+    match (context.config.struct_lit_style, context.config.struct_lit_multiline_style) {\n+        (StructLitStyle::Block, _) if fields_str.contains('\\n') => format_on_newline(),\n+        (StructLitStyle::Block, MultilineStyle::ForceMulti) => format_on_newline(),\n         _ => Some(format!(\"{} {{ {} }}\", path_str, fields_str)),\n     }\n "}, {"sha": "d0cf7d4069f681266c2f19296da5fdac7754b0da", "filename": "tests/source/struct_lits_multiline.rs", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/db79a5aec5055b58c5f8f576adc1aa551087bce6/tests%2Fsource%2Fstruct_lits_multiline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db79a5aec5055b58c5f8f576adc1aa551087bce6/tests%2Fsource%2Fstruct_lits_multiline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fstruct_lits_multiline.rs?ref=db79a5aec5055b58c5f8f576adc1aa551087bce6", "patch": "@@ -0,0 +1,72 @@\n+// rustfmt-struct_lit_multiline_style: ForceMulti\n+\n+// Struct literal expressions.\n+\n+fn main() {\n+    let x = Bar;\n+\n+    // Comment\n+    let y = Foo {a: x };\n+\n+    Foo { a: foo() /* comment*/, /* comment*/ b: bar(), ..something };\n+\n+    Foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo { a: foo(), b: bar(), };\n+\n+    Foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo { a: foo(), b: bar(), };\n+\n+    Foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo {\n+        // Comment\n+        a: foo(), // Comment\n+        // Comment\n+        b: bar(), // Comment\n+    };\n+\n+    Foo { a:Bar,\n+          b:foo() };\n+\n+    Quux { x: if cond { bar(); }, y: baz() };\n+\n+    A {\n+    // Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec a diam lectus. Sed sit amet ipsum mauris. Maecenas congue ligula ac quam viverra nec consectetur ante hendrerit. Donec et mollis dolor.\n+    first: item(),\n+        // Praesent et diam eget libero egestas mattis sit amet vitae augue.\n+        // Nam tincidunt congue enim, ut porta lorem lacinia consectetur.\n+        second: Item\n+    };\n+\n+    Some(Data::MethodCallData(MethodCallData {\n+        span: sub_span.unwrap(),\n+        scope: self.enclosing_scope(id),\n+        ref_id: def_id,\n+        decl_id: Some(decl_id),\n+    }));\n+\n+    Diagram { /*                 o        This graph demonstrates how\n+               *                / \\       significant whitespace is\n+               *               o   o      preserved.\n+               *              /|\\   \\\n+               *             o o o   o */\n+              graph: G, }\n+}\n+\n+fn matcher() {\n+    TagTerminatedByteMatcher {\n+        matcher: ByteMatcher {\n+        pattern: b\"<HTML\",\n+        mask: b\"\\xFF\\xDF\\xDF\\xDF\\xDF\\xFF\",\n+    },\n+    };\n+}\n+\n+fn issue177() {\n+    struct Foo<T> { memb: T }\n+    let foo = Foo::<i64> { memb: 10 };\n+}\n+\n+fn issue201() {\n+    let s = S{a:0, ..  b};\n+}\n+\n+fn issue201_2() {\n+    let s = S{a: S2{    .. c}, ..  b};\n+}"}, {"sha": "192d88a39030ac133fb6d250fb87c5dde863d430", "filename": "tests/source/struct_lits_visual_multiline.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/db79a5aec5055b58c5f8f576adc1aa551087bce6/tests%2Fsource%2Fstruct_lits_visual_multiline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db79a5aec5055b58c5f8f576adc1aa551087bce6/tests%2Fsource%2Fstruct_lits_visual_multiline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fstruct_lits_visual_multiline.rs?ref=db79a5aec5055b58c5f8f576adc1aa551087bce6", "patch": "@@ -0,0 +1,42 @@\n+// rustfmt-struct_lit_style: Visual\n+// rustfmt-struct_lit_multiline_style: ForceMulti\n+\n+// Struct literal expressions.\n+\n+fn main() {\n+    let x = Bar;\n+\n+    // Comment\n+    let y = Foo {a: x };\n+\n+    Foo { a: foo() /* comment*/, /* comment*/ b: bar(), ..something };\n+\n+    Fooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo { a: foo(), b: bar(), };\n+\n+    Foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo {\n+        // Comment\n+        a: foo(), // Comment\n+        // Comment\n+        b: bar(), // Comment\n+    };\n+\n+    Foo { a:Bar,\n+          b:foo() };\n+\n+    Quux { x: if cond { bar(); }, y: baz() };\n+\n+    A {\n+    // Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec a diam lectus. Sed sit amet ipsum mauris. Maecenas congue ligula ac quam viverra nec consectetur ante hendrerit. Donec et mollis dolor.\n+    first: item(),\n+        // Praesent et diam eget libero egestas mattis sit amet vitae augue.\n+        // Nam tincidunt congue enim, ut porta lorem lacinia consectetur.\n+        second: Item\n+    };\n+\n+    Diagram { /*                 o        This graph demonstrates how\n+               *                / \\       significant whitespace is\n+               *               o   o      preserved.\n+               *              /|\\   \\\n+               *             o o o   o */\n+              graph: G, }\n+}"}, {"sha": "2670ef6de1df90ae3d07d84cd1a7b751ad8f9ee7", "filename": "tests/target/struct_lits_multiline.rs", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/db79a5aec5055b58c5f8f576adc1aa551087bce6/tests%2Ftarget%2Fstruct_lits_multiline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db79a5aec5055b58c5f8f576adc1aa551087bce6/tests%2Ftarget%2Fstruct_lits_multiline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fstruct_lits_multiline.rs?ref=db79a5aec5055b58c5f8f576adc1aa551087bce6", "patch": "@@ -0,0 +1,108 @@\n+// rustfmt-struct_lit_multiline_style: ForceMulti\n+\n+// Struct literal expressions.\n+\n+fn main() {\n+    let x = Bar;\n+\n+    // Comment\n+    let y = Foo {\n+        a: x,\n+    };\n+\n+    Foo {\n+        a: foo(), // comment\n+        // comment\n+        b: bar(),\n+        ..something\n+    };\n+\n+    Foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo {\n+        a: foo(),\n+        b: bar(),\n+    };\n+\n+    Foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo {\n+        a: foo(),\n+        b: bar(),\n+    };\n+\n+    Foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo {\n+        // Comment\n+        a: foo(), // Comment\n+        // Comment\n+        b: bar(), /* Comment */\n+    };\n+\n+    Foo {\n+        a: Bar,\n+        b: foo(),\n+    };\n+\n+    Quux {\n+        x: if cond {\n+            bar();\n+        },\n+        y: baz(),\n+    };\n+\n+    A {\n+        // Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec a diam lectus. Sed sit\n+        // amet ipsum mauris. Maecenas congue ligula ac quam viverra nec consectetur ante\n+        // hendrerit. Donec et mollis dolor.\n+        first: item(),\n+        // Praesent et diam eget libero egestas mattis sit amet vitae augue.\n+        // Nam tincidunt congue enim, ut porta lorem lacinia consectetur.\n+        second: Item,\n+    };\n+\n+    Some(Data::MethodCallData(MethodCallData {\n+        span: sub_span.unwrap(),\n+        scope: self.enclosing_scope(id),\n+        ref_id: def_id,\n+        decl_id: Some(decl_id),\n+    }));\n+\n+    Diagram {\n+        //                 o        This graph demonstrates how\n+        //                / \\       significant whitespace is\n+        //               o   o      preserved.\n+        //              /|\\   \\\n+        //             o o o   o\n+        graph: G,\n+    }\n+}\n+\n+fn matcher() {\n+    TagTerminatedByteMatcher {\n+        matcher: ByteMatcher {\n+            pattern: b\"<HTML\",\n+            mask: b\"\\xFF\\xDF\\xDF\\xDF\\xDF\\xFF\",\n+        },\n+    };\n+}\n+\n+fn issue177() {\n+    struct Foo<T> {\n+        memb: T,\n+    }\n+    let foo = Foo::<i64> {\n+        memb: 10,\n+    };\n+}\n+\n+fn issue201() {\n+    let s = S {\n+        a: 0,\n+        ..b\n+    };\n+}\n+\n+fn issue201_2() {\n+    let s = S {\n+        a: S2 {\n+            ..c\n+        },\n+        ..b\n+    };\n+}"}, {"sha": "94aa121b7a49a67fb3046de2124d317bc705eae0", "filename": "tests/target/struct_lits_visual_multiline.rs", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/db79a5aec5055b58c5f8f576adc1aa551087bce6/tests%2Ftarget%2Fstruct_lits_visual_multiline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db79a5aec5055b58c5f8f576adc1aa551087bce6/tests%2Ftarget%2Fstruct_lits_visual_multiline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fstruct_lits_visual_multiline.rs?ref=db79a5aec5055b58c5f8f576adc1aa551087bce6", "patch": "@@ -0,0 +1,61 @@\n+// rustfmt-struct_lit_style: Visual\n+// rustfmt-struct_lit_multiline_style: ForceMulti\n+\n+// Struct literal expressions.\n+\n+fn main() {\n+    let x = Bar;\n+\n+    // Comment\n+    let y = Foo { a: x };\n+\n+    Foo { a: foo(), // comment\n+          // comment\n+          b: bar(),\n+          ..something };\n+\n+    Fooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo { a: foo(),\n+                                                                               b: bar(), };\n+\n+    Foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo { // Commen\n+                                                                                        // t\n+                                                                                        a: foo(), /* C\n+                                                                                                   * o\n+                                                                                                   * m\n+                                                                                                   * m\n+                                                                                                   * e\n+                                                                                                   * n\n+                                                                                                   * t */\n+                                                                                        // Commen\n+                                                                                        // t\n+                                                                                        b: bar(), /* C\n+                                                                                                   * o\n+                                                                                                   * m\n+                                                                                                   * m\n+                                                                                                   * e\n+                                                                                                   * n\n+                                                                                                   * t */ };\n+\n+    Foo { a: Bar,\n+          b: foo(), };\n+\n+    Quux { x: if cond {\n+               bar();\n+           },\n+           y: baz(), };\n+\n+    A { // Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec a diam lectus. Sed sit\n+        // amet ipsum mauris. Maecenas congue ligula ac quam viverra nec consectetur ante\n+        // hendrerit. Donec et mollis dolor.\n+        first: item(),\n+        // Praesent et diam eget libero egestas mattis sit amet vitae augue.\n+        // Nam tincidunt congue enim, ut porta lorem lacinia consectetur.\n+        second: Item, };\n+\n+    Diagram { //                 o        This graph demonstrates how\n+              //                / \\       significant whitespace is\n+              //               o   o      preserved.\n+              //              /|\\   \\\n+              //             o o o   o\n+              graph: G, }\n+}"}]}