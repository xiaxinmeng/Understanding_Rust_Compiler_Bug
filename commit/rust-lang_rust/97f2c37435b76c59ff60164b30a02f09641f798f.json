{"sha": "97f2c37435b76c59ff60164b30a02f09641f798f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3ZjJjMzc0MzViNzZjNTlmZjYwMTY0YjMwYTAyZjA5NjQxZjc5OGY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-08-23T19:53:29Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-08-25T23:08:35Z"}, "message": "rustc: Change the return of a query's `try_get`\n\nThis alters the return value of the `try_get` function so the error contains a\ndiagnostic rather than a `CycleError`. This way consumers are forced to take\n*some* action (else they get a bug to an un-emitted diagnostic). This action\ncould be to emit the error itself, or in some cases delay the diagnostic as a\nbug and continue.", "tree": {"sha": "f7c3f44c48d2b1470b14bce97aab4f910a1c8cd9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7c3f44c48d2b1470b14bce97aab4f910a1c8cd9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97f2c37435b76c59ff60164b30a02f09641f798f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97f2c37435b76c59ff60164b30a02f09641f798f", "html_url": "https://github.com/rust-lang/rust/commit/97f2c37435b76c59ff60164b30a02f09641f798f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97f2c37435b76c59ff60164b30a02f09641f798f/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64b0b2bfebf857f25f826ca9ebb07630287bc4d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/64b0b2bfebf857f25f826ca9ebb07630287bc4d0", "html_url": "https://github.com/rust-lang/rust/commit/64b0b2bfebf857f25f826ca9ebb07630287bc4d0"}], "stats": {"total": 22, "additions": 14, "deletions": 8}, "files": [{"sha": "18202c96cf52b825dcfd51a799991c4ac1040872", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/97f2c37435b76c59ff60164b30a02f09641f798f/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97f2c37435b76c59ff60164b30a02f09641f798f/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=97f2c37435b76c59ff60164b30a02f09641f798f", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use errors::DiagnosticBuilder;\n use dep_graph::{DepConstructor, DepNode, DepNodeIndex};\n use errors::{Diagnostic, DiagnosticBuilder};\n use hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n@@ -218,7 +219,9 @@ pub struct CycleError<'a, 'tcx: 'a> {\n }\n \n impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n-    pub fn report_cycle(self, CycleError { span, cycle }: CycleError) {\n+    pub fn report_cycle(self, CycleError { span, cycle }: CycleError)\n+        -> DiagnosticBuilder<'a>\n+    {\n         // Subtle: release the refcell lock before invoking `describe()`\n         // below by dropping `cycle`.\n         let stack = cycle.to_vec();\n@@ -247,8 +250,8 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             err.note(&format!(\"...which then again requires {}, completing the cycle.\",\n                               stack[0].1.describe(self)));\n \n-            err.emit();\n-        });\n+            return err\n+        })\n     }\n \n     fn cycle_check<F, R>(self, span: Span, query: Query<'gcx>, compute: F)\n@@ -704,8 +707,11 @@ macro_rules! define_maps {\n             }\n \n             pub fn try_get(tcx: TyCtxt<'a, $tcx, 'lcx>, span: Span, key: $K)\n-                           -> Result<$V, CycleError<'a, $tcx>> {\n-                Self::try_get_with(tcx, span, key, Clone::clone)\n+                           -> Result<$V, DiagnosticBuilder<'a>> {\n+                match Self::try_get_with(tcx, span, key, Clone::clone) {\n+                    Ok(e) => Ok(e),\n+                    Err(e) => Err(tcx.report_cycle(e)),\n+                }\n             }\n \n             pub fn force(tcx: TyCtxt<'a, $tcx, 'lcx>, span: Span, key: $K) {\n@@ -714,7 +720,7 @@ macro_rules! define_maps {\n \n                 match Self::try_get_with(tcx, span, key, |_| ()) {\n                     Ok(()) => {}\n-                    Err(e) => tcx.report_cycle(e)\n+                    Err(e) => tcx.report_cycle(e).emit(),\n                 }\n             }\n         })*\n@@ -751,8 +757,8 @@ macro_rules! define_maps {\n         impl<'a, $tcx, 'lcx> TyCtxtAt<'a, $tcx, 'lcx> {\n             $($(#[$attr])*\n             pub fn $name(self, key: $K) -> $V {\n-                queries::$name::try_get(self.tcx, self.span, key).unwrap_or_else(|e| {\n-                    self.report_cycle(e);\n+                queries::$name::try_get(self.tcx, self.span, key).unwrap_or_else(|mut e| {\n+                    e.emit();\n                     Value::from_cycle_error(self.global_tcx())\n                 })\n             })*"}]}