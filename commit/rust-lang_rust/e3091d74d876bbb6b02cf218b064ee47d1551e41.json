{"sha": "e3091d74d876bbb6b02cf218b064ee47d1551e41", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzMDkxZDc0ZDg3NmJiYjZiMDJjZjIxOGIwNjRlZTQ3ZDE1NTFlNDE=", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2021-06-01T13:19:49Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2021-07-08T21:55:58Z"}, "message": "Use cranelift's `Type::int` instead of doing the match myself\n\n<https://docs.rs/cranelift-codegen/0.74.0/cranelift_codegen/ir/types/struct.Type.html#method.int>", "tree": {"sha": "8aa508fa2cebb705227262413ff946425875c808", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8aa508fa2cebb705227262413ff946425875c808"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3091d74d876bbb6b02cf218b064ee47d1551e41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3091d74d876bbb6b02cf218b064ee47d1551e41", "html_url": "https://github.com/rust-lang/rust/commit/e3091d74d876bbb6b02cf218b064ee47d1551e41", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3091d74d876bbb6b02cf218b064ee47d1551e41/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a0574d826d3bb03941b5cc80bfe99e8e5742aa0", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a0574d826d3bb03941b5cc80bfe99e8e5742aa0", "html_url": "https://github.com/rust-lang/rust/commit/7a0574d826d3bb03941b5cc80bfe99e8e5742aa0"}], "stats": {"total": 9, "additions": 1, "deletions": 8}, "files": [{"sha": "3979886e10cfc17997d1a30362860cdb85adf6c1", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e3091d74d876bbb6b02cf218b064ee47d1551e41/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3091d74d876bbb6b02cf218b064ee47d1551e41/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=e3091d74d876bbb6b02cf218b064ee47d1551e41", "patch": "@@ -1118,14 +1118,7 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n \n         raw_eq, <T>(v lhs_ref, v rhs_ref) {\n             fn type_by_size(size: Size) -> Option<Type> {\n-                Some(match size.bits() {\n-                    8 => types::I8,\n-                    16 => types::I16,\n-                    32 => types::I32,\n-                    64 => types::I64,\n-                    128 => types::I128,\n-                    _ => return None,\n-                })\n+                Type::int(size.bits().try_into().ok()?)\n             }\n \n             let size = fx.layout_of(T).layout.size;"}]}