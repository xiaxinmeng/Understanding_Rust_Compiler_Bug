{"sha": "5b2b13bff81d341f243a9a902d8779ef82e2d7fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViMmIxM2JmZjgxZDM0MWYyNDNhOWE5MDJkODc3OWVmODJlMmQ3ZmQ=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-12-28T16:28:36Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-12-28T16:28:36Z"}, "message": "test: option variants get imported by default", "tree": {"sha": "3e7e2a0300591b9720aa5dc164685de36960721d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e7e2a0300591b9720aa5dc164685de36960721d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b2b13bff81d341f243a9a902d8779ef82e2d7fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b2b13bff81d341f243a9a902d8779ef82e2d7fd", "html_url": "https://github.com/rust-lang/rust/commit/5b2b13bff81d341f243a9a902d8779ef82e2d7fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b2b13bff81d341f243a9a902d8779ef82e2d7fd/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa5ee934edecff9c3fa82ade705bd964dc734525", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa5ee934edecff9c3fa82ade705bd964dc734525", "html_url": "https://github.com/rust-lang/rust/commit/fa5ee934edecff9c3fa82ade705bd964dc734525"}], "stats": {"total": 52, "additions": 26, "deletions": 26}, "files": [{"sha": "f1b0745a196f530169638ab3ea73c98d16f64075", "filename": "src/compiletest/errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b2b13bff81d341f243a9a902d8779ef82e2d7fd/src%2Fcompiletest%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b2b13bff81d341f243a9a902d8779ef82e2d7fd/src%2Fcompiletest%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Ferrors.rs?ref=5b2b13bff81d341f243a9a902d8779ef82e2d7fd", "patch": "@@ -33,8 +33,8 @@ fn parse_expected(line_num: uint, line: ~str) -> ~[expected_error] unsafe {\n     let error_tag = ~\"//~\";\n     let mut idx;\n     match str::find_str(line, error_tag) {\n-      option::None => return ~[],\n-      option::Some(nn) => { idx = (nn as uint) + str::len(error_tag); }\n+      None => return ~[],\n+      Some(nn) => { idx = (nn as uint) + str::len(error_tag); }\n     }\n \n     // \"//~^^^ kind msg\" denotes a message expected"}, {"sha": "3e25c195021f66453183b2d4420b71c0dc019cd9", "filename": "src/compiletest/header.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5b2b13bff81d341f243a9a902d8779ef82e2d7fd/src%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b2b13bff81d341f243a9a902d8779ef82e2d7fd/src%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fheader.rs?ref=5b2b13bff81d341f243a9a902d8779ef82e2d7fd", "patch": "@@ -34,12 +34,12 @@ fn load_props(testfile: &Path) -> test_props {\n     let mut error_patterns = ~[];\n     let mut aux_builds = ~[];\n     let mut exec_env = ~[];\n-    let mut compile_flags = option::None;\n-    let mut pp_exact = option::None;\n+    let mut compile_flags = None;\n+    let mut pp_exact = None;\n     for iter_header(testfile) |ln| {\n         match parse_error_pattern(ln) {\n-          option::Some(ep) => error_patterns.push(ep),\n-          option::None => ()\n+          Some(ep) => error_patterns.push(ep),\n+          None => ()\n         };\n \n         if compile_flags.is_none() {\n@@ -124,12 +124,12 @@ fn parse_exec_env(line: ~str) -> Option<(~str, ~str)> {\n \n fn parse_pp_exact(line: ~str, testfile: &Path) -> Option<Path> {\n     match parse_name_value_directive(line, ~\"pp-exact\") {\n-      option::Some(s) => option::Some(Path(s)),\n-      option::None => {\n+      Some(s) => Some(Path(s)),\n+      None => {\n         if parse_name_directive(line, ~\"pp-exact\") {\n-            option::Some(testfile.file_path())\n+            Some(testfile.file_path())\n         } else {\n-            option::None\n+            None\n         }\n       }\n     }\n@@ -143,12 +143,12 @@ fn parse_name_value_directive(line: ~str,\n                               directive: ~str) -> Option<~str> unsafe {\n     let keycolon = directive + ~\":\";\n     match str::find_str(line, keycolon) {\n-        option::Some(colon) => {\n+        Some(colon) => {\n             let value = str::slice(line, colon + str::len(keycolon),\n                                    str::len(line));\n             debug!(\"%s: %s\", directive,  value);\n-            option::Some(value)\n+            Some(value)\n         }\n-        option::None => option::None\n+        None => None\n     }\n }"}, {"sha": "4cf36f06aac2f6f7e63f670dd55b39740a86dc63", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5b2b13bff81d341f243a9a902d8779ef82e2d7fd/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b2b13bff81d341f243a9a902d8779ef82e2d7fd/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=5b2b13bff81d341f243a9a902d8779ef82e2d7fd", "patch": "@@ -117,7 +117,7 @@ fn run_pretty_test(config: config, props: test_props, testfile: &Path) {\n     } else { logv(config, ~\"testing for converging pretty-printing\"); }\n \n     let rounds =\n-        match props.pp_exact { option::Some(_) => 1, option::None => 2 };\n+        match props.pp_exact { Some(_) => 1, None => 2 };\n \n     let mut srcs = ~[io::read_whole_file_str(testfile).get()];\n \n@@ -137,11 +137,11 @@ fn run_pretty_test(config: config, props: test_props, testfile: &Path) {\n \n     let mut expected =\n         match props.pp_exact {\n-          option::Some(file) => {\n+          Some(file) => {\n             let filepath = testfile.dir_path().push_rel(&file);\n             io::read_whole_file_str(&filepath).get()\n           }\n-          option::None => { srcs[vec::len(srcs) - 2u] }\n+          None => { srcs[vec::len(srcs) - 2u] }\n         };\n     let mut actual = srcs[vec::len(srcs) - 1u];\n \n@@ -165,7 +165,7 @@ fn run_pretty_test(config: config, props: test_props, testfile: &Path) {\n \n     fn print_source(config: config, testfile: &Path, src: ~str) -> procres {\n         compose_and_run(config, testfile, make_pp_args(config, testfile),\n-                        ~[], config.compile_lib_path, option::Some(src))\n+                        ~[], config.compile_lib_path, Some(src))\n     }\n \n     fn make_pp_args(config: config, _testfile: &Path) -> procargs {\n@@ -199,7 +199,7 @@ actual:\\n\\\n         compose_and_run_compiler(\n             config, props, testfile,\n             make_typecheck_args(config, testfile),\n-            option::Some(src))\n+            Some(src))\n     }\n \n     fn make_typecheck_args(config: config, testfile: &Path) -> procargs {\n@@ -418,7 +418,7 @@ fn exec_compiled_test(config: config, props: test_props,\n     compose_and_run(config, testfile,\n                     make_run_args(config, props, testfile),\n                     props.exec_env,\n-                    config.run_lib_path, option::None)\n+                    config.run_lib_path, None)\n }\n \n fn compose_and_run_compiler(\n@@ -441,7 +441,7 @@ fn compose_and_run_compiler(\n             make_compile_args(config, props, ~[~\"--lib\"] + extra_link_args,\n                               |a,b| make_lib_name(a, b, testfile), &abs_ab);\n         let auxres = compose_and_run(config, &abs_ab, aux_args, ~[],\n-                                     config.compile_lib_path, option::None);\n+                                     config.compile_lib_path, None);\n         if auxres.status != 0 {\n             fatal_procres(\n                 fmt!(\"auxiliary build of %s failed to compile: \",\n@@ -501,8 +501,8 @@ fn make_run_args(config: config, _props: test_props, testfile: &Path) ->\n             // then split apart its command\n             let runtool =\n                 match config.runtool {\n-                  option::Some(s) => option::Some(s),\n-                  option::None => option::None\n+                  Some(s) => Some(s),\n+                  None => None\n                 };\n             split_maybe_args(runtool)\n         };\n@@ -517,8 +517,8 @@ fn split_maybe_args(argstr: Option<~str>) -> ~[~str] {\n     }\n \n     match argstr {\n-      option::Some(s) => rm_whitespace(str::split_char(s, ' ')),\n-      option::None => ~[]\n+      Some(s) => rm_whitespace(str::split_char(s, ' ')),\n+      None => ~[]\n     }\n }\n "}, {"sha": "68ca1489e68b6626e7e4f63c9006140a99a05d0d", "filename": "src/compiletest/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b2b13bff81d341f243a9a902d8779ef82e2d7fd/src%2Fcompiletest%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b2b13bff81d341f243a9a902d8779ef82e2d7fd/src%2Fcompiletest%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Futil.rs?ref=5b2b13bff81d341f243a9a902d8779ef82e2d7fd", "patch": "@@ -17,10 +17,10 @@ fn make_new_path(path: ~str) -> ~str {\n     // Windows just uses PATH as the library search path, so we have to\n     // maintain the current value while adding our own\n     match getenv(lib_path_env_var()) {\n-      option::Some(curr) => {\n+      Some(curr) => {\n         fmt!(\"%s%s%s\", path, path_div(), curr)\n       }\n-      option::None => path\n+      None => path\n     }\n }\n "}]}