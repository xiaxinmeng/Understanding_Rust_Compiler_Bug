{"sha": "e82cc656c822af7f1905b757a27cac5823fbc301", "node_id": "C_kwDOAAsO6NoAKGU4MmNjNjU2YzgyMmFmN2YxOTA1Yjc1N2EyN2NhYzU4MjNmYmMzMDE", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-02-15T03:42:45Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-02-18T19:47:34Z"}, "message": "Make dyn* have the same scalar pair ABI as corresponding fat pointer", "tree": {"sha": "6126aa215982fa90c2540f4666818ea115a72ae3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6126aa215982fa90c2540f4666818ea115a72ae3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e82cc656c822af7f1905b757a27cac5823fbc301", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e82cc656c822af7f1905b757a27cac5823fbc301", "html_url": "https://github.com/rust-lang/rust/commit/e82cc656c822af7f1905b757a27cac5823fbc301", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e82cc656c822af7f1905b757a27cac5823fbc301/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f11d841b5748133c2d51da0001fc88bc6b51e78", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f11d841b5748133c2d51da0001fc88bc6b51e78", "html_url": "https://github.com/rust-lang/rust/commit/1f11d841b5748133c2d51da0001fc88bc6b51e78"}], "stats": {"total": 11, "additions": 9, "deletions": 2}, "files": [{"sha": "9cda24bab87d345820ee7ec1e62227062d180a87", "filename": "compiler/rustc_codegen_llvm/src/type_of.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e82cc656c822af7f1905b757a27cac5823fbc301/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82cc656c822af7f1905b757a27cac5823fbc301/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs?ref=e82cc656c822af7f1905b757a27cac5823fbc301", "patch": "@@ -329,7 +329,7 @@ impl<'tcx> LayoutLlvmExt<'tcx> for TyAndLayout<'tcx> {\n     ) -> &'a Type {\n         // HACK(eddyb) special-case fat pointers until LLVM removes\n         // pointee types, to avoid bitcasting every `OperandRef::deref`.\n-        match self.ty.kind() {\n+        match *self.ty.kind() {\n             ty::Ref(..) | ty::RawPtr(_) => {\n                 return self.field(cx, index).llvm_type(cx);\n             }\n@@ -339,6 +339,11 @@ impl<'tcx> LayoutLlvmExt<'tcx> for TyAndLayout<'tcx> {\n                 let ptr_ty = cx.tcx.mk_mut_ptr(self.ty.boxed_ty());\n                 return cx.layout_of(ptr_ty).scalar_pair_element_llvm_type(cx, index, immediate);\n             }\n+            // `dyn* Trait` has the same ABI as `*mut dyn Trait`\n+            ty::Dynamic(bounds, region, ty::DynStar) => {\n+                let ptr_ty = cx.tcx.mk_mut_ptr(cx.tcx.mk_dynamic(bounds, region, ty::Dyn));\n+                return cx.layout_of(ptr_ty).scalar_pair_element_llvm_type(cx, index, immediate);\n+            }\n             _ => {}\n         }\n "}, {"sha": "d6f019016a5a7a7959be2497395c47f3928aa3eb", "filename": "tests/codegen/function-arguments.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e82cc656c822af7f1905b757a27cac5823fbc301/tests%2Fcodegen%2Ffunction-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82cc656c822af7f1905b757a27cac5823fbc301/tests%2Fcodegen%2Ffunction-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Ffunction-arguments.rs?ref=e82cc656c822af7f1905b757a27cac5823fbc301", "patch": "@@ -281,7 +281,9 @@ pub fn enum_id_2(x: Option<u8>) -> Option<u8> {\n   x\n }\n \n-// CHECK: { {{i8\\*|ptr}}, {{i.*\\*|ptr}} } @dyn_star({{i8\\*|ptr}} noundef %x.0, {{i.*\\*|ptr}} noalias noundef readonly align {{.*}} dereferenceable({{.*}}) %x.1)\n+// CHECK: { {{\\{\\}\\*|ptr}}, {{.+}} } @dyn_star({{\\{\\}\\*|ptr}} noundef %x.0, {{.+}} noalias noundef readonly align {{.*}} dereferenceable({{.*}}) %x.1)\n+// Expect an ABI something like `{ {}*, [3 x i64]* }`, but that's hard to match on generically,\n+// so do like the `trait_box` test and just match on `{{.+}}` for the vtable.\n #[no_mangle]\n pub fn dyn_star(x: dyn* Drop) -> dyn* Drop {\n   x"}]}