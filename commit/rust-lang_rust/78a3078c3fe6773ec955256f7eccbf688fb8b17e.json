{"sha": "78a3078c3fe6773ec955256f7eccbf688fb8b17e", "node_id": "C_kwDOAAsO6NoAKDc4YTMwNzhjM2ZlNjc3M2VjOTU1MjU2ZjdlY2NiZjY4OGZiOGIxN2U", "commit": {"author": {"name": "David CARLIER", "email": "devnexen@gmail.com", "date": "2021-12-16T21:32:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-16T21:32:53Z"}, "message": "Revert \"socket ancillary data implementation for dragonflybsd.\"", "tree": {"sha": "b4803ff93f6341e35c2bb9d5afb6a6718ea3cc25", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4803ff93f6341e35c2bb9d5afb6a6718ea3cc25"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78a3078c3fe6773ec955256f7eccbf688fb8b17e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhu7CFCRBK7hj4Ov3rIwAALOoIAFydzKKodEodCf3lJjabKGfy\nWqrp31uHyXrRRcUNE+6GnYTao+Nsay+RyJMuc3HlBwM8qyaQ3n+Ar8kbEGLqrGVM\n6bRr4f2sbkH3mT5KqRZWBUz8OPvclIzgFEMhyuUJ+iXCS2sa4b3jp8kD9BHbqz3A\nJQEwnhx+ia2Urptig35aANJ24FzC1QskkZEtYxNY0Y2PLWywcQu6iKY4zZQ+1vwC\nfLcEW7RGhlRm1386mkzHZSnNLz7mNJj7lvaTFR75LjkVVZMX16c4oxFMaCzDkKnN\nfr7UjrTgJAYXNQOTt1++CVe3eHnDxBK6ZGLdhjFg5sY+1ve0O2XS2Eaw+eAcocQ=\n=dkNH\n-----END PGP SIGNATURE-----\n", "payload": "tree b4803ff93f6341e35c2bb9d5afb6a6718ea3cc25\nparent 1d01550f7ea9fce1cf625128fefc73b9da3c1508\nauthor David CARLIER <devnexen@gmail.com> 1639690373 +0000\ncommitter GitHub <noreply@github.com> 1639690373 +0000\n\nRevert \"socket ancillary data implementation for dragonflybsd.\"\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78a3078c3fe6773ec955256f7eccbf688fb8b17e", "html_url": "https://github.com/rust-lang/rust/commit/78a3078c3fe6773ec955256f7eccbf688fb8b17e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78a3078c3fe6773ec955256f7eccbf688fb8b17e/comments", "author": {"login": "devnexen", "id": 4922778, "node_id": "MDQ6VXNlcjQ5MjI3Nzg=", "avatar_url": "https://avatars.githubusercontent.com/u/4922778?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devnexen", "html_url": "https://github.com/devnexen", "followers_url": "https://api.github.com/users/devnexen/followers", "following_url": "https://api.github.com/users/devnexen/following{/other_user}", "gists_url": "https://api.github.com/users/devnexen/gists{/gist_id}", "starred_url": "https://api.github.com/users/devnexen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devnexen/subscriptions", "organizations_url": "https://api.github.com/users/devnexen/orgs", "repos_url": "https://api.github.com/users/devnexen/repos", "events_url": "https://api.github.com/users/devnexen/events{/privacy}", "received_events_url": "https://api.github.com/users/devnexen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d01550f7ea9fce1cf625128fefc73b9da3c1508", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d01550f7ea9fce1cf625128fefc73b9da3c1508", "html_url": "https://github.com/rust-lang/rust/commit/1d01550f7ea9fce1cf625128fefc73b9da3c1508"}], "stats": {"total": 100, "additions": 8, "deletions": 92}, "files": [{"sha": "6e6f5212b4651d934290ffbb4f07216b214be378", "filename": "library/std/src/os/unix/net/ancillary.rs", "status": "modified", "additions": 2, "deletions": 80, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/78a3078c3fe6773ec955256f7eccbf688fb8b17e/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fancillary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78a3078c3fe6773ec955256f7eccbf688fb8b17e/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fancillary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fancillary.rs?ref=78a3078c3fe6773ec955256f7eccbf688fb8b17e", "patch": "@@ -16,8 +16,6 @@ mod libc {\n     pub use libc::c_int;\n     pub struct ucred;\n     pub struct cmsghdr;\n-    #[cfg(target_os = \"dragonfly\")]\n-    pub struct cmsgcred;\n     pub type pid_t = i32;\n     pub type gid_t = u32;\n     pub type uid_t = u32;\n@@ -185,11 +183,6 @@ impl<'a, T> Iterator for AncillaryDataIter<'a, T> {\n #[derive(Clone)]\n pub struct SocketCred(libc::ucred);\n \n-#[cfg(target_os = \"dragonfly\")]\n-#[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n-#[derive(Clone)]\n-pub struct SocketCred(libc::cmsgcred);\n-\n #[cfg(any(doc, target_os = \"android\", target_os = \"linux\",))]\n impl SocketCred {\n     /// Create a Unix credential struct.\n@@ -241,57 +234,6 @@ impl SocketCred {\n     }\n }\n \n-#[cfg(target_os = \"dragonfly\")]\n-impl SocketCred {\n-    /// Create a Unix credential struct.\n-    ///\n-    /// PID, UID and GID is set to 0.\n-    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n-    #[must_use]\n-    pub fn new() -> SocketCred {\n-        SocketCred(libc::cmsgcred { cmsgcred_pid: 0, cmsgcred_uid: 0, cmsgcred_gid: 0 })\n-    }\n-\n-    /// Set the PID.\n-    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n-    pub fn set_pid(&mut self, pid: libc::pid_t) {\n-        self.0.cmsgcred_pid = pid;\n-    }\n-\n-    /// Get the current PID.\n-    #[must_use]\n-    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n-    pub fn get_pid(&self) -> libc::pid_t {\n-        self.0.cmsgcred_pid\n-    }\n-\n-    /// Set the UID.\n-    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n-    pub fn set_uid(&mut self, uid: libc::uid_t) {\n-        self.0.cmsgcred_uid = uid;\n-    }\n-\n-    /// Get the current UID.\n-    #[must_use]\n-    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n-    pub fn get_uid(&self) -> libc::uid_t {\n-        self.0.cmsgcred_uid\n-    }\n-\n-    /// Set the GID.\n-    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n-    pub fn set_gid(&mut self, gid: libc::gid_t) {\n-        self.0.cmsgcred_gid = gid;\n-    }\n-\n-    /// Get the current GID.\n-    #[must_use]\n-    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n-    pub fn get_gid(&self) -> libc::gid_t {\n-        self.0.cmsgcred_gid\n-    }\n-}\n-\n /// This control message contains file descriptors.\n ///\n /// The level is equal to `SOL_SOCKET` and the type is equal to `SCM_RIGHTS`.\n@@ -314,11 +256,7 @@ impl<'a> Iterator for ScmRights<'a> {\n #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n pub struct ScmCredentials<'a>(AncillaryDataIter<'a, libc::ucred>);\n \n-#[cfg(target_os = \"dragonfly\")]\n-#[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n-pub struct ScmCredentials<'a>(AncillaryDataIter<'a, libc::cmsgcred>);\n-\n-#[cfg(any(doc, target_os = \"android\", target_os = \"linux\", target_os = \"dragonfly\",))]\n+#[cfg(any(doc, target_os = \"android\", target_os = \"linux\",))]\n #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n impl<'a> Iterator for ScmCredentials<'a> {\n     type Item = SocketCred;\n@@ -362,7 +300,7 @@ impl<'a> AncillaryData<'a> {\n     /// # Safety\n     ///\n     /// `data` must contain a valid control message and the control message must be type of\n-    /// `SOL_SOCKET` and level of `SCM_CREDENTIALS` or `SCM_CREDS`.\n+    /// `SOL_SOCKET` and level of `SCM_CREDENTIALS` or `SCM_CREDENTIALS`.\n     #[cfg(any(doc, target_os = \"android\", target_os = \"linux\",))]\n     unsafe fn as_credentials(data: &'a [u8]) -> Self {\n         let ancillary_data_iter = AncillaryDataIter::new(data);\n@@ -382,9 +320,6 @@ impl<'a> AncillaryData<'a> {\n                     libc::SCM_RIGHTS => Ok(AncillaryData::as_rights(data)),\n                     #[cfg(any(target_os = \"android\", target_os = \"linux\",))]\n                     libc::SCM_CREDENTIALS => Ok(AncillaryData::as_credentials(data)),\n-                    #[cfg(target_os = \"dragonfly\")]\n-                    libc::SCM_CREDS => Ok(AncillaryData::as_credentials(data)),\n-\n                     cmsg_type => {\n                         Err(AncillaryError::Unknown { cmsg_level: libc::SOL_SOCKET, cmsg_type })\n                     }\n@@ -609,19 +544,6 @@ impl<'a> SocketAncillary<'a> {\n         )\n     }\n \n-    #[cfg(target_os = \"dragonfly\")]\n-    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n-    pub fn add_creds(&mut self, creds: &[SocketCred]) -> bool {\n-        self.truncated = false;\n-        add_to_ancillary_data(\n-            &mut self.buffer,\n-            &mut self.length,\n-            creds,\n-            libc::SOL_SOCKET,\n-            libc::SCM_CREDS,\n-        )\n-    }\n-\n     /// Clears the ancillary data, removing all values.\n     ///\n     /// # Example"}, {"sha": "a2caccc7849170f5ae3e8f68bea8ee2fb1b7ade3", "filename": "library/std/src/os/unix/net/datagram.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/78a3078c3fe6773ec955256f7eccbf688fb8b17e/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fdatagram.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78a3078c3fe6773ec955256f7eccbf688fb8b17e/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fdatagram.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fdatagram.rs?ref=78a3078c3fe6773ec955256f7eccbf688fb8b17e", "patch": "@@ -854,14 +854,8 @@ impl UnixDatagram {\n     ///\n     /// # Examples\n     ///\n-    #[cfg_attr(\n-        any(target_os = \"android\", target_os = \"linux\", target_os = \"dragonfly\"),\n-        doc = \"```no_run\"\n-    )]\n-    #[cfg_attr(\n-        not(any(target_os = \"android\", target_os = \"linux\", target_os = \"dragonfly\")),\n-        doc = \"```ignore\"\n-    )]\n+    #[cfg_attr(any(target_os = \"android\", target_os = \"linux\"), doc = \"```no_run\")]\n+    #[cfg_attr(not(any(target_os = \"android\", target_os = \"linux\")), doc = \"```ignore\")]\n     /// #![feature(unix_socket_ancillary_data)]\n     /// use std::os::unix::net::UnixDatagram;\n     ///\n@@ -871,7 +865,7 @@ impl UnixDatagram {\n     ///     Ok(())\n     /// }\n     /// ```\n-    #[cfg(any(doc, target_os = \"android\", target_os = \"linux\", target_os = \"dragonfly\",))]\n+    #[cfg(any(doc, target_os = \"android\", target_os = \"linux\",))]\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn set_passcred(&self, passcred: bool) -> io::Result<()> {\n         self.0.set_passcred(passcred)\n@@ -883,7 +877,7 @@ impl UnixDatagram {\n     /// Get the socket option `SO_PASSCRED`.\n     ///\n     /// [`set_passcred`]: UnixDatagram::set_passcred\n-    #[cfg(any(doc, target_os = \"android\", target_os = \"linux\", target_os = \"dragonfly\",))]\n+    #[cfg(any(doc, target_os = \"android\", target_os = \"linux\",))]\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn passcred(&self) -> io::Result<bool> {\n         self.0.passcred()"}, {"sha": "a82a0172126d4fa51066b4b5313712cb61ffe812", "filename": "library/std/src/sys/unix/net.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/78a3078c3fe6773ec955256f7eccbf688fb8b17e/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78a3078c3fe6773ec955256f7eccbf688fb8b17e/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fnet.rs?ref=78a3078c3fe6773ec955256f7eccbf688fb8b17e", "patch": "@@ -408,12 +408,12 @@ impl Socket {\n         Ok(raw != 0)\n     }\n \n-    #[cfg(any(target_os = \"android\", target_os = \"linux\", target_os = \"dragonfly\",))]\n+    #[cfg(any(target_os = \"android\", target_os = \"linux\",))]\n     pub fn set_passcred(&self, passcred: bool) -> io::Result<()> {\n         setsockopt(self, libc::SOL_SOCKET, libc::SO_PASSCRED, passcred as libc::c_int)\n     }\n \n-    #[cfg(any(target_os = \"android\", target_os = \"linux\", target_os = \"dragonfly\",))]\n+    #[cfg(any(target_os = \"android\", target_os = \"linux\",))]\n     pub fn passcred(&self) -> io::Result<bool> {\n         let passcred: libc::c_int = getsockopt(self, libc::SOL_SOCKET, libc::SO_PASSCRED)?;\n         Ok(passcred != 0)"}]}