{"sha": "1ded6d328aa0c1a93f81491ea7821e9b6a7e0d12", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkZWQ2ZDMyOGFhMGMxYTkzZjgxNDkxZWE3ODIxZTliNmE3ZTBkMTI=", "commit": {"author": {"name": "JCTyBlaidd", "email": "JCTyblaidd@users.noreply.github.com", "date": "2020-12-07T18:21:12Z"}, "committer": {"name": "JCTyblaidd", "email": "JCTyblaidd@users.noreply.github.com", "date": "2020-12-13T11:04:58Z"}, "message": "Remove old FIXME", "tree": {"sha": "04c091bac1f0fb8988255b6fb10b34072f25f2a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04c091bac1f0fb8988255b6fb10b34072f25f2a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ded6d328aa0c1a93f81491ea7821e9b6a7e0d12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ded6d328aa0c1a93f81491ea7821e9b6a7e0d12", "html_url": "https://github.com/rust-lang/rust/commit/1ded6d328aa0c1a93f81491ea7821e9b6a7e0d12", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ded6d328aa0c1a93f81491ea7821e9b6a7e0d12/comments", "author": {"login": "JCTyblaidd", "id": 8288600, "node_id": "MDQ6VXNlcjgyODg2MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8288600?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JCTyblaidd", "html_url": "https://github.com/JCTyblaidd", "followers_url": "https://api.github.com/users/JCTyblaidd/followers", "following_url": "https://api.github.com/users/JCTyblaidd/following{/other_user}", "gists_url": "https://api.github.com/users/JCTyblaidd/gists{/gist_id}", "starred_url": "https://api.github.com/users/JCTyblaidd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JCTyblaidd/subscriptions", "organizations_url": "https://api.github.com/users/JCTyblaidd/orgs", "repos_url": "https://api.github.com/users/JCTyblaidd/repos", "events_url": "https://api.github.com/users/JCTyblaidd/events{/privacy}", "received_events_url": "https://api.github.com/users/JCTyblaidd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JCTyblaidd", "id": 8288600, "node_id": "MDQ6VXNlcjgyODg2MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8288600?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JCTyblaidd", "html_url": "https://github.com/JCTyblaidd", "followers_url": "https://api.github.com/users/JCTyblaidd/followers", "following_url": "https://api.github.com/users/JCTyblaidd/following{/other_user}", "gists_url": "https://api.github.com/users/JCTyblaidd/gists{/gist_id}", "starred_url": "https://api.github.com/users/JCTyblaidd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JCTyblaidd/subscriptions", "organizations_url": "https://api.github.com/users/JCTyblaidd/orgs", "repos_url": "https://api.github.com/users/JCTyblaidd/repos", "events_url": "https://api.github.com/users/JCTyblaidd/events{/privacy}", "received_events_url": "https://api.github.com/users/JCTyblaidd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c45b1b16be9ce362f5e23bd5335cffac6679ea59", "url": "https://api.github.com/repos/rust-lang/rust/commits/c45b1b16be9ce362f5e23bd5335cffac6679ea59", "html_url": "https://github.com/rust-lang/rust/commit/c45b1b16be9ce362f5e23bd5335cffac6679ea59"}], "stats": {"total": 8, "additions": 3, "deletions": 5}, "files": [{"sha": "382a87e2f51518537219f5eb8b945f0d57e8e90f", "filename": "src/data_race.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1ded6d328aa0c1a93f81491ea7821e9b6a7e0d12/src%2Fdata_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ded6d328aa0c1a93f81491ea7821e9b6a7e0d12/src%2Fdata_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdata_race.rs?ref=1ded6d328aa0c1a93f81491ea7821e9b6a7e0d12", "patch": "@@ -679,14 +679,12 @@ impl VClockAlloc {\n \n     /// Create a new data-race detector for newly allocated memory.\n     pub fn new_allocation(global: &MemoryExtra, len: Size, track_alloc: bool) -> VClockAlloc {\n-        //FIXME: stack allocations are currently ignored due to the lazy nature of stack\n-        // allocation, this results in data-races being missed.\n-        let (alloc_timestamp, alloc_index) = if !track_alloc {\n-            (0, VectorIdx::MAX_INDEX)\n-        }else{\n+        let (alloc_timestamp, alloc_index) = if track_alloc {\n             let (alloc_index, clocks) = global.current_thread_state();\n             let alloc_timestamp = clocks.clock[alloc_index];\n             (alloc_timestamp, alloc_index)\n+        }else{\n+            (0, VectorIdx::MAX_INDEX)\n         };\n         VClockAlloc {\n             global: Rc::clone(global),"}]}