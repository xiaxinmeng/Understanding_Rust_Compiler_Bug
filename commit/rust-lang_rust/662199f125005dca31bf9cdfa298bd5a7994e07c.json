{"sha": "662199f125005dca31bf9cdfa298bd5a7994e07c", "node_id": "C_kwDOAAsO6NoAKDY2MjE5OWYxMjUwMDVkY2EzMWJmOWNkZmEyOThiZDVhNzk5NGUwN2M", "commit": {"author": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2022-12-12T02:07:33Z"}, "committer": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2023-01-15T21:51:42Z"}, "message": "InstCombine away intrinsic validity assertions", "tree": {"sha": "c57aec6ccd83239f3ba3b4d0a4f675cfba648cc2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c57aec6ccd83239f3ba3b4d0a4f675cfba648cc2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/662199f125005dca31bf9cdfa298bd5a7994e07c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/662199f125005dca31bf9cdfa298bd5a7994e07c", "html_url": "https://github.com/rust-lang/rust/commit/662199f125005dca31bf9cdfa298bd5a7994e07c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/662199f125005dca31bf9cdfa298bd5a7994e07c/comments", "author": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e", "html_url": "https://github.com/rust-lang/rust/commit/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e"}], "stats": {"total": 241, "additions": 239, "deletions": 2}, "files": [{"sha": "1b795479a928e8d17021455a0420f06bcd0adb67", "filename": "compiler/rustc_mir_transform/src/instcombine.rs", "status": "modified", "additions": 77, "deletions": 2, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/662199f125005dca31bf9cdfa298bd5a7994e07c/compiler%2Frustc_mir_transform%2Fsrc%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/662199f125005dca31bf9cdfa298bd5a7994e07c/compiler%2Frustc_mir_transform%2Fsrc%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finstcombine.rs?ref=662199f125005dca31bf9cdfa298bd5a7994e07c", "patch": "@@ -6,7 +6,8 @@ use rustc_middle::mir::{\n     BinOp, Body, Constant, ConstantKind, LocalDecls, Operand, Place, ProjectionElem, Rvalue,\n     SourceInfo, Statement, StatementKind, Terminator, TerminatorKind, UnOp,\n };\n-use rustc_middle::ty::{self, TyCtxt};\n+use rustc_middle::ty::{self, layout::TyAndLayout, ParamEnv, SubstsRef, Ty, TyCtxt};\n+use rustc_span::symbol::{sym, Symbol};\n \n pub struct InstCombine;\n \n@@ -16,7 +17,11 @@ impl<'tcx> MirPass<'tcx> for InstCombine {\n     }\n \n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-        let ctx = InstCombineContext { tcx, local_decls: &body.local_decls };\n+        let ctx = InstCombineContext {\n+            tcx,\n+            local_decls: &body.local_decls,\n+            param_env: tcx.param_env_reveal_all_normalized(body.source.def_id()),\n+        };\n         for block in body.basic_blocks.as_mut() {\n             for statement in block.statements.iter_mut() {\n                 match statement.kind {\n@@ -33,13 +38,18 @@ impl<'tcx> MirPass<'tcx> for InstCombine {\n                 &mut block.terminator.as_mut().unwrap(),\n                 &mut block.statements,\n             );\n+            ctx.combine_intrinsic_assert(\n+                &mut block.terminator.as_mut().unwrap(),\n+                &mut block.statements,\n+            );\n         }\n     }\n }\n \n struct InstCombineContext<'tcx, 'a> {\n     tcx: TyCtxt<'tcx>,\n     local_decls: &'a LocalDecls<'tcx>,\n+    param_env: ParamEnv<'tcx>,\n }\n \n impl<'tcx> InstCombineContext<'tcx, '_> {\n@@ -200,4 +210,69 @@ impl<'tcx> InstCombineContext<'tcx, '_> {\n         });\n         terminator.kind = TerminatorKind::Goto { target: destination_block };\n     }\n+\n+    fn combine_intrinsic_assert(\n+        &self,\n+        terminator: &mut Terminator<'tcx>,\n+        _statements: &mut Vec<Statement<'tcx>>,\n+    ) {\n+        let TerminatorKind::Call { func, target, .. } = &mut terminator.kind  else { return; };\n+        let Some(target_block) = target else { return; };\n+        let func_ty = func.ty(self.local_decls, self.tcx);\n+        let Some((intrinsic_name, substs)) = resolve_rust_intrinsic(self.tcx, func_ty) else {\n+            return;\n+        };\n+        // The intrinsics we are interested in have one generic parameter\n+        if substs.is_empty() {\n+            return;\n+        }\n+        let ty = substs.type_at(0);\n+\n+        // Check this is a foldable intrinsic before we query the layout of our generic parameter\n+        let Some(assert_panics) = intrinsic_assert_panics(intrinsic_name) else { return; };\n+        let Ok(layout) = self.tcx.layout_of(self.param_env.and(ty)) else { return; };\n+        if assert_panics(self.tcx, layout) {\n+            // If we know the assert panics, indicate to later opts that the call diverges\n+            *target = None;\n+        } else {\n+            // If we know the assert does not panic, turn the call into a Goto\n+            terminator.kind = TerminatorKind::Goto { target: *target_block };\n+        }\n+    }\n+}\n+\n+fn intrinsic_assert_panics<'tcx>(\n+    intrinsic_name: Symbol,\n+) -> Option<fn(TyCtxt<'tcx>, TyAndLayout<'tcx>) -> bool> {\n+    fn inhabited_predicate<'tcx>(_tcx: TyCtxt<'tcx>, layout: TyAndLayout<'tcx>) -> bool {\n+        layout.abi.is_uninhabited()\n+    }\n+    fn zero_valid_predicate<'tcx>(tcx: TyCtxt<'tcx>, layout: TyAndLayout<'tcx>) -> bool {\n+        !tcx.permits_zero_init(layout)\n+    }\n+    fn mem_uninitialized_valid_predicate<'tcx>(\n+        tcx: TyCtxt<'tcx>,\n+        layout: TyAndLayout<'tcx>,\n+    ) -> bool {\n+        !tcx.permits_uninit_init(layout)\n+    }\n+\n+    match intrinsic_name {\n+        sym::assert_inhabited => Some(inhabited_predicate),\n+        sym::assert_zero_valid => Some(zero_valid_predicate),\n+        sym::assert_mem_uninitialized_valid => Some(mem_uninitialized_valid_predicate),\n+        _ => None,\n+    }\n+}\n+\n+fn resolve_rust_intrinsic<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    func_ty: Ty<'tcx>,\n+) -> Option<(Symbol, SubstsRef<'tcx>)> {\n+    if let ty::FnDef(def_id, substs) = *func_ty.kind() {\n+        if tcx.is_intrinsic(def_id) {\n+            return Some((tcx.item_name(def_id), substs));\n+        }\n+    }\n+    None\n }"}, {"sha": "8ff64c1ea159c0d0ed3f7fe00d26f65f1bf99d82", "filename": "tests/mir-opt/intrinsic_asserts.generic.InstCombine.diff", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/662199f125005dca31bf9cdfa298bd5a7994e07c/tests%2Fmir-opt%2Fintrinsic_asserts.generic.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/662199f125005dca31bf9cdfa298bd5a7994e07c/tests%2Fmir-opt%2Fintrinsic_asserts.generic.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fintrinsic_asserts.generic.InstCombine.diff?ref=662199f125005dca31bf9cdfa298bd5a7994e07c", "patch": "@@ -0,0 +1,42 @@\n+- // MIR for `generic` before InstCombine\n++ // MIR for `generic` after InstCombine\n+  \n+  fn generic() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/intrinsic_asserts.rs:+0:21: +0:21\n+      let _1: ();                          // in scope 0 at $DIR/intrinsic_asserts.rs:+1:5: +1:46\n+      let _2: ();                          // in scope 0 at $DIR/intrinsic_asserts.rs:+2:5: +2:47\n+      let _3: ();                          // in scope 0 at $DIR/intrinsic_asserts.rs:+3:5: +3:60\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/intrinsic_asserts.rs:+1:5: +1:46\n+          _1 = assert_inhabited::<T>() -> bb1; // scope 0 at $DIR/intrinsic_asserts.rs:+1:5: +1:46\n+                                           // mir::Constant\n+                                           // + span: $DIR/intrinsic_asserts.rs:25:5: 25:44\n+                                           // + literal: Const { ty: extern \"rust-intrinsic\" fn() {assert_inhabited::<T>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+          StorageDead(_1);                 // scope 0 at $DIR/intrinsic_asserts.rs:+1:46: +1:47\n+          StorageLive(_2);                 // scope 0 at $DIR/intrinsic_asserts.rs:+2:5: +2:47\n+          _2 = assert_zero_valid::<T>() -> bb2; // scope 0 at $DIR/intrinsic_asserts.rs:+2:5: +2:47\n+                                           // mir::Constant\n+                                           // + span: $DIR/intrinsic_asserts.rs:26:5: 26:45\n+                                           // + literal: Const { ty: extern \"rust-intrinsic\" fn() {assert_zero_valid::<T>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb2: {\n+          StorageDead(_2);                 // scope 0 at $DIR/intrinsic_asserts.rs:+2:47: +2:48\n+          StorageLive(_3);                 // scope 0 at $DIR/intrinsic_asserts.rs:+3:5: +3:60\n+          _3 = assert_mem_uninitialized_valid::<T>() -> bb3; // scope 0 at $DIR/intrinsic_asserts.rs:+3:5: +3:60\n+                                           // mir::Constant\n+                                           // + span: $DIR/intrinsic_asserts.rs:27:5: 27:58\n+                                           // + literal: Const { ty: extern \"rust-intrinsic\" fn() {assert_mem_uninitialized_valid::<T>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb3: {\n+          StorageDead(_3);                 // scope 0 at $DIR/intrinsic_asserts.rs:+3:60: +3:61\n+          nop;                             // scope 0 at $DIR/intrinsic_asserts.rs:+0:21: +4:2\n+          return;                          // scope 0 at $DIR/intrinsic_asserts.rs:+4:2: +4:2\n+      }\n+  }\n+  "}, {"sha": "ddc01590315c55a37d9c07a43beeb5b4edacd62b", "filename": "tests/mir-opt/intrinsic_asserts.panics.InstCombine.diff", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/662199f125005dca31bf9cdfa298bd5a7994e07c/tests%2Fmir-opt%2Fintrinsic_asserts.panics.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/662199f125005dca31bf9cdfa298bd5a7994e07c/tests%2Fmir-opt%2Fintrinsic_asserts.panics.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fintrinsic_asserts.panics.InstCombine.diff?ref=662199f125005dca31bf9cdfa298bd5a7994e07c", "patch": "@@ -0,0 +1,47 @@\n+- // MIR for `panics` before InstCombine\n++ // MIR for `panics` after InstCombine\n+  \n+  fn panics() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/intrinsic_asserts.rs:+0:17: +0:17\n+      let _1: ();                          // in scope 0 at $DIR/intrinsic_asserts.rs:+1:5: +1:50\n+      let _2: ();                          // in scope 0 at $DIR/intrinsic_asserts.rs:+2:5: +2:49\n+      let _3: ();                          // in scope 0 at $DIR/intrinsic_asserts.rs:+3:5: +3:62\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/intrinsic_asserts.rs:+1:5: +1:50\n+-         _1 = assert_inhabited::<Never>() -> bb1; // scope 0 at $DIR/intrinsic_asserts.rs:+1:5: +1:50\n++         _1 = assert_inhabited::<Never>(); // scope 0 at $DIR/intrinsic_asserts.rs:+1:5: +1:50\n+                                           // mir::Constant\n+                                           // + span: $DIR/intrinsic_asserts.rs:17:5: 17:48\n+                                           // + literal: Const { ty: extern \"rust-intrinsic\" fn() {assert_inhabited::<Never>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+          StorageDead(_1);                 // scope 0 at $DIR/intrinsic_asserts.rs:+1:50: +1:51\n+          StorageLive(_2);                 // scope 0 at $DIR/intrinsic_asserts.rs:+2:5: +2:49\n+-         _2 = assert_zero_valid::<&u8>() -> bb2; // scope 0 at $DIR/intrinsic_asserts.rs:+2:5: +2:49\n++         _2 = assert_zero_valid::<&u8>(); // scope 0 at $DIR/intrinsic_asserts.rs:+2:5: +2:49\n+                                           // mir::Constant\n+                                           // + span: $DIR/intrinsic_asserts.rs:18:5: 18:47\n+                                           // + user_ty: UserType(0)\n+                                           // + literal: Const { ty: extern \"rust-intrinsic\" fn() {assert_zero_valid::<&u8>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb2: {\n+          StorageDead(_2);                 // scope 0 at $DIR/intrinsic_asserts.rs:+2:49: +2:50\n+          StorageLive(_3);                 // scope 0 at $DIR/intrinsic_asserts.rs:+3:5: +3:62\n+-         _3 = assert_mem_uninitialized_valid::<&u8>() -> bb3; // scope 0 at $DIR/intrinsic_asserts.rs:+3:5: +3:62\n++         _3 = assert_mem_uninitialized_valid::<&u8>(); // scope 0 at $DIR/intrinsic_asserts.rs:+3:5: +3:62\n+                                           // mir::Constant\n+                                           // + span: $DIR/intrinsic_asserts.rs:19:5: 19:60\n+                                           // + user_ty: UserType(1)\n+                                           // + literal: Const { ty: extern \"rust-intrinsic\" fn() {assert_mem_uninitialized_valid::<&u8>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb3: {\n+          StorageDead(_3);                 // scope 0 at $DIR/intrinsic_asserts.rs:+3:62: +3:63\n+          nop;                             // scope 0 at $DIR/intrinsic_asserts.rs:+0:17: +4:2\n+          return;                          // scope 0 at $DIR/intrinsic_asserts.rs:+4:2: +4:2\n+      }\n+  }\n+  "}, {"sha": "568fbf1a0d6591060937e16b79fa3e45f19a26a4", "filename": "tests/mir-opt/intrinsic_asserts.removable.InstCombine.diff", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/662199f125005dca31bf9cdfa298bd5a7994e07c/tests%2Fmir-opt%2Fintrinsic_asserts.removable.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/662199f125005dca31bf9cdfa298bd5a7994e07c/tests%2Fmir-opt%2Fintrinsic_asserts.removable.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fintrinsic_asserts.removable.InstCombine.diff?ref=662199f125005dca31bf9cdfa298bd5a7994e07c", "patch": "@@ -0,0 +1,45 @@\n+- // MIR for `removable` before InstCombine\n++ // MIR for `removable` after InstCombine\n+  \n+  fn removable() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/intrinsic_asserts.rs:+0:20: +0:20\n+      let _1: ();                          // in scope 0 at $DIR/intrinsic_asserts.rs:+1:5: +1:47\n+      let _2: ();                          // in scope 0 at $DIR/intrinsic_asserts.rs:+2:5: +2:48\n+      let _3: ();                          // in scope 0 at $DIR/intrinsic_asserts.rs:+3:5: +3:61\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/intrinsic_asserts.rs:+1:5: +1:47\n+-         _1 = assert_inhabited::<()>() -> bb1; // scope 0 at $DIR/intrinsic_asserts.rs:+1:5: +1:47\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/intrinsic_asserts.rs:7:5: 7:45\n+-                                          // + literal: Const { ty: extern \"rust-intrinsic\" fn() {assert_inhabited::<()>}, val: Value(<ZST>) }\n++         goto -> bb1;                     // scope 0 at $DIR/intrinsic_asserts.rs:+1:5: +1:47\n+      }\n+  \n+      bb1: {\n+          StorageDead(_1);                 // scope 0 at $DIR/intrinsic_asserts.rs:+1:47: +1:48\n+          StorageLive(_2);                 // scope 0 at $DIR/intrinsic_asserts.rs:+2:5: +2:48\n+-         _2 = assert_zero_valid::<u8>() -> bb2; // scope 0 at $DIR/intrinsic_asserts.rs:+2:5: +2:48\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/intrinsic_asserts.rs:8:5: 8:46\n+-                                          // + literal: Const { ty: extern \"rust-intrinsic\" fn() {assert_zero_valid::<u8>}, val: Value(<ZST>) }\n++         goto -> bb2;                     // scope 0 at $DIR/intrinsic_asserts.rs:+2:5: +2:48\n+      }\n+  \n+      bb2: {\n+          StorageDead(_2);                 // scope 0 at $DIR/intrinsic_asserts.rs:+2:48: +2:49\n+          StorageLive(_3);                 // scope 0 at $DIR/intrinsic_asserts.rs:+3:5: +3:61\n+-         _3 = assert_mem_uninitialized_valid::<u8>() -> bb3; // scope 0 at $DIR/intrinsic_asserts.rs:+3:5: +3:61\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/intrinsic_asserts.rs:9:5: 9:59\n+-                                          // + literal: Const { ty: extern \"rust-intrinsic\" fn() {assert_mem_uninitialized_valid::<u8>}, val: Value(<ZST>) }\n++         goto -> bb3;                     // scope 0 at $DIR/intrinsic_asserts.rs:+3:5: +3:61\n+      }\n+  \n+      bb3: {\n+          StorageDead(_3);                 // scope 0 at $DIR/intrinsic_asserts.rs:+3:61: +3:62\n+          nop;                             // scope 0 at $DIR/intrinsic_asserts.rs:+0:20: +4:2\n+          return;                          // scope 0 at $DIR/intrinsic_asserts.rs:+4:2: +4:2\n+      }\n+  }\n+  "}, {"sha": "8fb99cdf6e041168dcffe1e37bda6cff0bada48f", "filename": "tests/mir-opt/intrinsic_asserts.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/662199f125005dca31bf9cdfa298bd5a7994e07c/tests%2Fmir-opt%2Fintrinsic_asserts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/662199f125005dca31bf9cdfa298bd5a7994e07c/tests%2Fmir-opt%2Fintrinsic_asserts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fintrinsic_asserts.rs?ref=662199f125005dca31bf9cdfa298bd5a7994e07c", "patch": "@@ -0,0 +1,28 @@\n+#![crate_type = \"lib\"]\n+#![feature(core_intrinsics)]\n+\n+// All these assertions pass, so all the intrinsic calls should be deleted.\n+// EMIT_MIR intrinsic_asserts.removable.InstCombine.diff\n+pub fn removable() {\n+    core::intrinsics::assert_inhabited::<()>();\n+    core::intrinsics::assert_zero_valid::<u8>();\n+    core::intrinsics::assert_mem_uninitialized_valid::<u8>();\n+}\n+\n+enum Never {}\n+\n+// These assertions all diverge, so their target blocks should become None.\n+// EMIT_MIR intrinsic_asserts.panics.InstCombine.diff\n+pub fn panics() {\n+    core::intrinsics::assert_inhabited::<Never>();\n+    core::intrinsics::assert_zero_valid::<&u8>();\n+    core::intrinsics::assert_mem_uninitialized_valid::<&u8>();\n+}\n+\n+// Whether or not these asserts pass isn't known, so they shouldn't be modified.\n+// EMIT_MIR intrinsic_asserts.generic.InstCombine.diff\n+pub fn generic<T>() {\n+    core::intrinsics::assert_inhabited::<T>();\n+    core::intrinsics::assert_zero_valid::<T>();\n+    core::intrinsics::assert_mem_uninitialized_valid::<T>();\n+}"}]}