{"sha": "fa6c18e0149c9e31a69c9084c416ea5c7cd363dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhNmMxOGUwMTQ5YzllMzFhNjljOTA4NGM0MTZlYTVjN2NkMzYzZGQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-05-10T02:41:24Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-05-10T06:40:50Z"}, "message": "rustc: Refactor driver to better understand string sources", "tree": {"sha": "b17a81cb0c831776d0453425ca8ab47a84bb0649", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b17a81cb0c831776d0453425ca8ab47a84bb0649"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa6c18e0149c9e31a69c9084c416ea5c7cd363dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa6c18e0149c9e31a69c9084c416ea5c7cd363dd", "html_url": "https://github.com/rust-lang/rust/commit/fa6c18e0149c9e31a69c9084c416ea5c7cd363dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa6c18e0149c9e31a69c9084c416ea5c7cd363dd/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50a3dd40ae8ae6494e55d5cfc29eafdb4172af52", "url": "https://api.github.com/repos/rust-lang/rust/commits/50a3dd40ae8ae6494e55d5cfc29eafdb4172af52", "html_url": "https://github.com/rust-lang/rust/commit/50a3dd40ae8ae6494e55d5cfc29eafdb4172af52"}], "stats": {"total": 111, "additions": 79, "deletions": 32}, "files": [{"sha": "6fb525a13461b612f885f1cf37f32f34eada9d2b", "filename": "src/rustc/driver/driver.rs", "status": "modified", "additions": 51, "deletions": 22, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/fa6c18e0149c9e31a69c9084c416ea5c7cd363dd/src%2Frustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa6c18e0149c9e31a69c9084c416ea5c7cd363dd/src%2Frustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Fdriver.rs?ref=fa6c18e0149c9e31a69c9084c416ea5c7cd363dd", "patch": "@@ -18,7 +18,20 @@ import back::{x86, x86_64};\n enum pp_mode {ppm_normal, ppm_expanded, ppm_typed, ppm_identified,\n               ppm_expanded_identified }\n \n-fn default_configuration(sess: session, argv0: str, input: str) ->\n+#[doc = \"\n+The name used for source code that doesn't originate in a file\n+(e.g. source from stdin or a string)\n+\"]\n+fn anon_src() -> str { \"<anon>\" }\n+\n+fn source_name(input: input) -> str {\n+    alt input {\n+      file_input(ifile) { ifile }\n+      str_input(_) { anon_src() }\n+    }\n+}\n+\n+fn default_configuration(sess: session, argv0: str, input: input) ->\n    ast::crate_cfg {\n     let libc = alt sess.targ_cfg.os {\n       session::os_win32 { \"msvcrt.dll\" }\n@@ -42,10 +55,10 @@ fn default_configuration(sess: session, argv0: str, input: str) ->\n          mk(\"target_libc\", libc),\n          // Build bindings.\n          mk(\"build_compiler\", argv0),\n-         mk(\"build_input\", input)];\n+         mk(\"build_input\", source_name(input))];\n }\n \n-fn build_configuration(sess: session, argv0: str, input: str) ->\n+fn build_configuration(sess: session, argv0: str, input: input) ->\n    ast::crate_cfg {\n     // Combine the configuration requested by the session (command line) with\n     // some default and generated configuration items\n@@ -71,15 +84,24 @@ fn parse_cfgspecs(cfgspecs: [str]) -> ast::crate_cfg {\n     ret words;\n }\n \n-fn input_is_stdin(filename: str) -> bool { filename == \"-\" }\n+enum input {\n+    #[doc = \"Load source from file\"]\n+    file_input(str),\n+    #[doc = \"The string is the source\"]\n+    str_input(str)\n+}\n \n-fn parse_input(sess: session, cfg: ast::crate_cfg, input: str)\n+fn parse_input(sess: session, cfg: ast::crate_cfg, input: input)\n     -> @ast::crate {\n-    if !input_is_stdin(input) {\n-        parse::parse_crate_from_file(input, cfg, sess.parse_sess)\n-    } else {\n-        let src = @str::from_bytes(io::stdin().read_whole_stream());\n-        parse::parse_crate_from_source_str(input, src, cfg, sess.parse_sess)\n+    alt input {\n+      file_input(file) {\n+        parse::parse_crate_from_file(file, cfg, sess.parse_sess)\n+      }\n+      str_input(src) {\n+        // FIXME: Don't really want to box the source string\n+        parse::parse_crate_from_source_str(\n+            anon_src(), @src, cfg, sess.parse_sess)\n+      }\n     }\n }\n \n@@ -102,7 +124,7 @@ enum compile_upto {\n }\n \n fn compile_upto(sess: session, cfg: ast::crate_cfg,\n-                input: str, upto: compile_upto,\n+                input: input, upto: compile_upto,\n                 outputs: option<output_filenames>)\n     -> {crate: @ast::crate, tcx: option<ty::ctxt>} {\n     let time_passes = sess.opts.time_passes;\n@@ -208,7 +230,7 @@ fn compile_upto(sess: session, cfg: ast::crate_cfg,\n     ret {crate: crate, tcx: some(ty_cx)};\n }\n \n-fn compile_input(sess: session, cfg: ast::crate_cfg, input: str,\n+fn compile_input(sess: session, cfg: ast::crate_cfg, input: input,\n                  outdir: option<str>, output: option<str>) {\n \n     let upto = if sess.opts.parse_only { cu_parse }\n@@ -218,7 +240,7 @@ fn compile_input(sess: session, cfg: ast::crate_cfg, input: str,\n     compile_upto(sess, cfg, input, upto, some(outputs));\n }\n \n-fn pretty_print_input(sess: session, cfg: ast::crate_cfg, input: str,\n+fn pretty_print_input(sess: session, cfg: ast::crate_cfg, input: input,\n                       ppm: pp_mode) {\n     fn ann_paren_for_expr(node: pprust::ann_node) {\n         alt node { pprust::node_expr(s, expr) { pprust::popen(s); } _ { } }\n@@ -277,9 +299,10 @@ fn pretty_print_input(sess: session, cfg: ast::crate_cfg, input: str,\n       }\n       ppm_expanded | ppm_normal {}\n     }\n-    let src = codemap::get_filemap(sess.codemap, input).src;\n+    let src = codemap::get_filemap(sess.codemap, source_name(input)).src;\n     io::with_str_reader(*src) { |rdr|\n-        pprust::print_crate(sess.codemap, sess.span_diagnostic, crate, input,\n+        pprust::print_crate(sess.codemap, sess.span_diagnostic, crate,\n+                            source_name(input),\n                             rdr, io::stdout(), ann);\n     }\n }\n@@ -549,7 +572,7 @@ fn opts() -> [getopts::opt] {\n \n type output_filenames = @{out_filename: str, obj_filename:str};\n \n-fn build_output_filenames(ifile: str,\n+fn build_output_filenames(input: input,\n                           odir: option<str>,\n                           ofile: option<str>,\n                           sess: session)\n@@ -582,19 +605,25 @@ fn build_output_filenames(ifile: str,\n         let dirname = alt odir {\n           some(d) { d }\n           none {\n-            if input_is_stdin(ifile) {\n+            alt input {\n+              str_input(_) {\n                 os::getcwd()\n-            } else {\n+              }\n+              file_input(ifile) {\n                 path::dirname(ifile)\n+              }\n             }\n           }\n         };\n \n-        let base_filename = if !input_is_stdin(ifile) {\n+        let base_filename = alt input {\n+          file_input(ifile) {\n             let (path, _) = path::splitext(ifile);\n             path::basename(path)\n-        } else {\n+          }\n+          str_input(_) {\n             \"rust_out\"\n+          }\n         };\n         let base_path = path::connect(dirname, base_filename);\n \n@@ -659,7 +688,7 @@ mod test {\n             };\n         let sessopts = build_session_options(match, diagnostic::emit);\n         let sess = build_session(sessopts, diagnostic::emit);\n-        let cfg = build_configuration(sess, \"whatever\", \"whatever\");\n+        let cfg = build_configuration(sess, \"whatever\", str_input(\"\"));\n         assert (attr::contains_name(cfg, \"test\"));\n     }\n \n@@ -675,7 +704,7 @@ mod test {\n             };\n         let sessopts = build_session_options(match, diagnostic::emit);\n         let sess = build_session(sessopts, diagnostic::emit);\n-        let cfg = build_configuration(sess, \"whatever\", \"whatever\");\n+        let cfg = build_configuration(sess, \"whatever\", str_input(\"\"));\n         let test_items = attr::find_meta_items_by_name(cfg, \"test\");\n         assert (vec::len(test_items) == 1u);\n     }"}, {"sha": "7147486582773848f41c3236f3f8d4a5bbcd18fe", "filename": "src/rustc/driver/rustc.rs", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/fa6c18e0149c9e31a69c9084c416ea5c7cd363dd/src%2Frustc%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa6c18e0149c9e31a69c9084c416ea5c7cd363dd/src%2Frustc%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Frustc.rs?ref=fa6c18e0149c9e31a69c9084c416ea5c7cd363dd", "patch": "@@ -15,6 +15,7 @@ import rustc::driver::driver::*;\n import rustc::syntax::codemap;\n import rustc::driver::diagnostic;\n import rustc::middle::lint;\n+import io::reader_util;\n \n fn version(argv0: str) {\n     let mut vers = \"unknown version\";\n@@ -138,32 +139,47 @@ fn run_compiler(args: [str], demitter: diagnostic::emitter) {\n         version(binary);\n         ret;\n     }\n-    let ifile = alt vec::len(match.free) {\n+    let input = alt vec::len(match.free) {\n       0u { early_error(demitter, \"no input filename given\") }\n-      1u { match.free[0] }\n+      1u {\n+        let ifile = match.free[0];\n+        if ifile == \"-\" {\n+            let src = str::from_bytes(io::stdin().read_whole_stream());\n+            str_input(src)\n+        } else {\n+            file_input(ifile)\n+        }\n+      }\n       _ { early_error(demitter, \"multiple input filenames provided\") }\n     };\n \n     let sopts = build_session_options(match, demitter);\n     let sess = build_session(sopts, demitter);\n     let odir = getopts::opt_maybe_str(match, \"out-dir\");\n     let ofile = getopts::opt_maybe_str(match, \"o\");\n-    let cfg = build_configuration(sess, binary, ifile);\n+    let cfg = build_configuration(sess, binary, input);\n     let pretty =\n         option::map(getopts::opt_default(match, \"pretty\",\n                                          \"normal\"),\n                     bind parse_pretty(sess, _));\n     alt pretty {\n-      some::<pp_mode>(ppm) { pretty_print_input(sess, cfg, ifile, ppm); ret; }\n+      some::<pp_mode>(ppm) { pretty_print_input(sess, cfg, input, ppm); ret; }\n       none::<pp_mode> {/* continue */ }\n     }\n     let ls = opt_present(match, \"ls\");\n     if ls {\n-        list_metadata(sess, ifile, io::stdout());\n+        alt input {\n+          file_input(ifile) {\n+            list_metadata(sess, ifile, io::stdout());\n+          }\n+          str_input(_) {\n+            early_error(demitter, \"can not list metadata for stdin\");\n+          }\n+        }\n         ret;\n     }\n \n-    compile_input(sess, cfg, ifile, odir, ofile);\n+    compile_input(sess, cfg, input, odir, ofile);\n }\n \n /*"}, {"sha": "788d9b9e4fbd45d600b51f1eb2382bc638b6ab40", "filename": "src/rustdoc/parse.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fa6c18e0149c9e31a69c9084c416ea5c7cd363dd/src%2Frustdoc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa6c18e0149c9e31a69c9084c416ea5c7cd363dd/src%2Frustdoc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fparse.rs?ref=fa6c18e0149c9e31a69c9084c416ea5c7cd363dd", "patch": "@@ -1,6 +1,7 @@\n #[doc = \"AST-parsing helpers\"];\n \n import rustc::driver::driver;\n+import driver::{file_input, str_input};\n import rustc::driver::session;\n import rustc::driver::diagnostic;\n import rustc::syntax::ast;\n@@ -33,14 +34,15 @@ fn from_str(source: str) -> @ast::crate {\n }\n \n fn from_file_sess(sess: session::session, file: str) -> @ast::crate {\n-    parse::parse_crate_from_file(file, cfg(sess), sess.parse_sess)\n+    parse::parse_crate_from_file(\n+        file, cfg(sess, file_input(file)), sess.parse_sess)\n }\n \n fn from_str_sess(sess: session::session, source: str) -> @ast::crate {\n     parse::parse_crate_from_source_str(\n-        \"-\", @source, cfg(sess), sess.parse_sess)\n+        \"-\", @source, cfg(sess, str_input(source)), sess.parse_sess)\n }\n \n-fn cfg(sess: session::session) -> ast::crate_cfg {\n-    driver::default_configuration(sess, \"rustdoc\", \"<anon>\")\n+fn cfg(sess: session::session, input: driver::input) -> ast::crate_cfg {\n+    driver::default_configuration(sess, \"rustdoc\", input)\n }"}]}