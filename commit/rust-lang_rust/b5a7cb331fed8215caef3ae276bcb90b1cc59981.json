{"sha": "b5a7cb331fed8215caef3ae276bcb90b1cc59981", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1YTdjYjMzMWZlZDgyMTVjYWVmM2FlMjc2YmNiOTBiMWNjNTk5ODE=", "commit": {"author": {"name": "veetaha", "email": "veetaha2@gmail.com", "date": "2020-04-04T13:04:49Z"}, "committer": {"name": "veetaha", "email": "veetaha2@gmail.com", "date": "2020-04-04T13:04:49Z"}, "message": "Simplify config", "tree": {"sha": "56400f26945161ca870d5899b3940937646f0c56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56400f26945161ca870d5899b3940937646f0c56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5a7cb331fed8215caef3ae276bcb90b1cc59981", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5a7cb331fed8215caef3ae276bcb90b1cc59981", "html_url": "https://github.com/rust-lang/rust/commit/b5a7cb331fed8215caef3ae276bcb90b1cc59981", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5a7cb331fed8215caef3ae276bcb90b1cc59981/comments", "author": {"login": "Veetaha", "id": 36276403, "node_id": "MDQ6VXNlcjM2Mjc2NDAz", "avatar_url": "https://avatars.githubusercontent.com/u/36276403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veetaha", "html_url": "https://github.com/Veetaha", "followers_url": "https://api.github.com/users/Veetaha/followers", "following_url": "https://api.github.com/users/Veetaha/following{/other_user}", "gists_url": "https://api.github.com/users/Veetaha/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veetaha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veetaha/subscriptions", "organizations_url": "https://api.github.com/users/Veetaha/orgs", "repos_url": "https://api.github.com/users/Veetaha/repos", "events_url": "https://api.github.com/users/Veetaha/events{/privacy}", "received_events_url": "https://api.github.com/users/Veetaha/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veetaha", "id": 36276403, "node_id": "MDQ6VXNlcjM2Mjc2NDAz", "avatar_url": "https://avatars.githubusercontent.com/u/36276403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veetaha", "html_url": "https://github.com/Veetaha", "followers_url": "https://api.github.com/users/Veetaha/followers", "following_url": "https://api.github.com/users/Veetaha/following{/other_user}", "gists_url": "https://api.github.com/users/Veetaha/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veetaha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veetaha/subscriptions", "organizations_url": "https://api.github.com/users/Veetaha/orgs", "repos_url": "https://api.github.com/users/Veetaha/repos", "events_url": "https://api.github.com/users/Veetaha/events{/privacy}", "received_events_url": "https://api.github.com/users/Veetaha/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6207ac90da7e607218457bf872fa32df6b78f224", "url": "https://api.github.com/repos/rust-lang/rust/commits/6207ac90da7e607218457bf872fa32df6b78f224", "html_url": "https://github.com/rust-lang/rust/commit/6207ac90da7e607218457bf872fa32df6b78f224"}], "stats": {"total": 17, "additions": 8, "deletions": 9}, "files": [{"sha": "113aa77afbe19f7205b00f4320eeb726d5f87f31", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b5a7cb331fed8215caef3ae276bcb90b1cc59981/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5a7cb331fed8215caef3ae276bcb90b1cc59981/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=b5a7cb331fed8215caef3ae276bcb90b1cc59981", "patch": "@@ -120,12 +120,10 @@ impl Config {\n         set(value, \"/withSysroot\", &mut self.with_sysroot);\n         set(value, \"/featureFlags/lsp.diagnostics\", &mut self.publish_diagnostics);\n         set(value, \"/lruCapacity\", &mut self.lru_capacity);\n-        if let Some(watcher) =  get::<String>(value, \"/files/watcher\") {\n-            self.files.watcher = match watcher.as_str() {\n-                \"client\" => FilesWatcher::Client,\n-                \"notify\"| _ => FilesWatcher::Notify,\n-            }\n-        }\n+        self.files.watcher = match get::<&str>(value, \"/files/watcher\") {\n+            Some(\"client\") => FilesWatcher::Client,\n+            Some(\"notify\") | _ => FilesWatcher::Notify\n+        };\n         set(value, \"/notifications/workspaceLoaded\", &mut self.notifications.workspace_loaded);\n         set(value, \"/notifications/cargoTomlNotFound\", &mut self.notifications.cargo_toml_not_found);\n \n@@ -144,16 +142,17 @@ impl Config {\n         } else if let RustfmtConfig::Rustfmt { extra_args } = &mut self.rustfmt {\n             set(value, \"/rustfmt/extraArgs\", extra_args);\n         }\n+\n         if let Some(false) = get(value, \"/checkOnSave/enable\") {\n-            self.check = None\n+            self.check = None;\n         } else {\n             if let Some(mut args) = get::<Vec<String>>(value, \"/checkOnSave/overrideCommand\") {\n                 if !args.is_empty() {\n                     let command = args.remove(0);\n                     self.check = Some(FlycheckConfig::CustomCommand {\n                         command,\n                         args,\n-                    })\n+                    });\n                 }\n \n             } else if let Some(FlycheckConfig::CargoCommand { command, extra_args, all_targets }) = &mut self.check\n@@ -179,7 +178,7 @@ impl Config {\n             value.pointer(pointer).and_then(|it| T::deserialize(it).ok())\n         }\n \n-        fn set<'a, T: Deserialize<'a> + std::fmt::Debug>(value: &'a serde_json::Value, pointer: &str, slot: &mut T) {\n+        fn set<'a, T: Deserialize<'a>>(value: &'a serde_json::Value, pointer: &str, slot: &mut T) {\n             if let Some(new_value) = get(value, pointer) {\n                 *slot = new_value\n             }"}]}