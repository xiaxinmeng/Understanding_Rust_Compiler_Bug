{"sha": "e22fe4008ca9db3d2b183d8df95a800d830d1edb", "node_id": "C_kwDOAAsO6NoAKGUyMmZlNDAwOGNhOWRiM2QyYjE4M2Q4ZGY5NWE4MDBkODMwZDFlZGI", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-12-05T10:46:29Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-12-12T04:34:59Z"}, "message": "Revert \"Auto merge of #89450 - usbalbin:const_try_revert, r=oli-obk\"\n\nThis reverts commit a8387aef8c378a771686878062e544af4d5e2245, reversing\nchanges made to 6e1211081239be62a5d0bb3bbcb29a9f14621c81.", "tree": {"sha": "fb6704f490a55bd0d53aee5fa98c7da94ae9dccc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb6704f490a55bd0d53aee5fa98c7da94ae9dccc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e22fe4008ca9db3d2b183d8df95a800d830d1edb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE3RQPHNISvvEnSKtjbQF6ltjmwvkFAmG1e/MACgkQbQF6ltjm\nwvk4iA/+K6wkJpoq1jNwAFHbxqjY3V+bxoua8o/uBN67LMEyUH6ysH/qsBnkZs8n\naOuhbS+qcpJCFrjv3nRVrexpLpFmb7sCEPoN+p04kStD7ZRUKIXqMDNikQOW7MDR\nIjE/24kb7p0VMS/gHCbJiuAtfdPDPjLUcmLSZajeg2TGvf6t4DSIuWY73/8CT8n3\nj4EdJ9buG/VUisWB91Omn6mTtq94Jl49lOK/NeYfce/jjfvgF0J5hsgz5fLpk0U8\nyO3rFPF9jEGra6YTcVD6iJU9Cg/W/bUSgtGBFHgCC6MrrEeo8Y81Fp7voqBK0A7Q\nZeTpcb8ysn3DXZA+puTyRDMHaJ5eAHWBp+ZIRGtoxxQgZUocHli+NxObmTblAg9x\n0BFTekeJ2bU3x7Mq6jGZdnPNxxIR8YJ+6W8NeNikJoDRpgd+H4Kf2tQFHYN+HS5H\n2ro1WmHZR7aEP20SbliEOr05ws6krOIY0145wWc9kNoR9TvoUaKw0RCkmE7XlcF4\n35eyitNF91z3D9HKUgNlduNPiU7sN5JC7O4zzqheLlVCZe9RpNVOt9nLGfeHG6cs\nvAQBus2Mz1V/el13ewIIYGwC4Lw1EhOQ/ER8bBiPopIUPmPkx63b817gQ2V/x5qJ\nLnAfp+/uIkY3ShWt5/JpGag84zxqaXyAbM+smoXFJXpz92m+KJ8=\n=aU5X\n-----END PGP SIGNATURE-----", "payload": "tree fb6704f490a55bd0d53aee5fa98c7da94ae9dccc\nparent 84b1d859c8caa6049bfe728b219f679286151bb2\nauthor Deadbeef <ent3rm4n@gmail.com> 1638701189 +0800\ncommitter Deadbeef <ent3rm4n@gmail.com> 1639283699 +0800\n\nRevert \"Auto merge of #89450 - usbalbin:const_try_revert, r=oli-obk\"\n\nThis reverts commit a8387aef8c378a771686878062e544af4d5e2245, reversing\nchanges made to 6e1211081239be62a5d0bb3bbcb29a9f14621c81.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e22fe4008ca9db3d2b183d8df95a800d830d1edb", "html_url": "https://github.com/rust-lang/rust/commit/e22fe4008ca9db3d2b183d8df95a800d830d1edb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e22fe4008ca9db3d2b183d8df95a800d830d1edb/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84b1d859c8caa6049bfe728b219f679286151bb2", "url": "https://api.github.com/repos/rust-lang/rust/commits/84b1d859c8caa6049bfe728b219f679286151bb2", "html_url": "https://github.com/rust-lang/rust/commit/84b1d859c8caa6049bfe728b219f679286151bb2"}], "stats": {"total": 69, "additions": 54, "deletions": 15}, "files": [{"sha": "1c2e673d6049329cabc9dfb8a55d2372a891c4de", "filename": "library/core/src/convert/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e22fe4008ca9db3d2b183d8df95a800d830d1edb/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e22fe4008ca9db3d2b183d8df95a800d830d1edb/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs?ref=e22fe4008ca9db3d2b183d8df95a800d830d1edb", "patch": "@@ -534,9 +534,10 @@ where\n \n // From implies Into\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T, U> Into<U> for T\n+#[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n+impl<T, U> const Into<U> for T\n where\n-    U: From<T>,\n+    U: ~const From<T>,\n {\n     fn into(self) -> U {\n         U::from(self)"}, {"sha": "04996368064b4be0d2f613a1d43167ef72d2e388", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e22fe4008ca9db3d2b183d8df95a800d830d1edb/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e22fe4008ca9db3d2b183d8df95a800d830d1edb/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=e22fe4008ca9db3d2b183d8df95a800d830d1edb", "patch": "@@ -112,6 +112,7 @@\n #![feature(const_float_classify)]\n #![feature(const_fmt_arguments_new)]\n #![feature(const_heap)]\n+#![feature(const_convert)]\n #![feature(const_inherent_unchecked_arith)]\n #![feature(const_int_unchecked_arith)]\n #![feature(const_intrinsic_copy)]"}, {"sha": "381e2d6eed3f6503b5a82f54110c5f128f7bb0cf", "filename": "library/core/src/option.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e22fe4008ca9db3d2b183d8df95a800d830d1edb/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e22fe4008ca9db3d2b183d8df95a800d830d1edb/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=e22fe4008ca9db3d2b183d8df95a800d830d1edb", "patch": "@@ -2077,7 +2077,8 @@ impl<A, V: FromIterator<A>> FromIterator<Option<A>> for Option<V> {\n }\n \n #[unstable(feature = \"try_trait_v2\", issue = \"84277\")]\n-impl<T> ops::Try for Option<T> {\n+#[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n+impl<T> const ops::Try for Option<T> {\n     type Output = T;\n     type Residual = Option<convert::Infallible>;\n \n@@ -2096,6 +2097,7 @@ impl<T> ops::Try for Option<T> {\n }\n \n #[unstable(feature = \"try_trait_v2\", issue = \"84277\")]\n+#[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n impl<T> const ops::FromResidual for Option<T> {\n     #[inline]\n     fn from_residual(residual: Option<convert::Infallible>) -> Self {"}, {"sha": "8ef5ffb962b0a000e5ea78c14ab9cb0e9e5dca90", "filename": "library/core/src/result.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e22fe4008ca9db3d2b183d8df95a800d830d1edb/library%2Fcore%2Fsrc%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e22fe4008ca9db3d2b183d8df95a800d830d1edb/library%2Fcore%2Fsrc%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fresult.rs?ref=e22fe4008ca9db3d2b183d8df95a800d830d1edb", "patch": "@@ -1945,7 +1945,8 @@ impl<A, E, V: FromIterator<A>> FromIterator<Result<A, E>> for Result<V, E> {\n }\n \n #[unstable(feature = \"try_trait_v2\", issue = \"84277\")]\n-impl<T, E> ops::Try for Result<T, E> {\n+#[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n+impl<T, E> const ops::Try for Result<T, E> {\n     type Output = T;\n     type Residual = Result<convert::Infallible, E>;\n \n@@ -1964,7 +1965,10 @@ impl<T, E> ops::Try for Result<T, E> {\n }\n \n #[unstable(feature = \"try_trait_v2\", issue = \"84277\")]\n-impl<T, E, F: From<E>> ops::FromResidual<Result<convert::Infallible, E>> for Result<T, F> {\n+#[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n+impl<T, E, F: ~const From<E>> const ops::FromResidual<Result<convert::Infallible, E>>\n+    for Result<T, F>\n+{\n     #[inline]\n     fn from_residual(residual: Result<convert::Infallible, E>) -> Self {\n         match residual {"}, {"sha": "f1048f4cf09cb1750d01338132af025d885c3fad", "filename": "library/core/tests/convert.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e22fe4008ca9db3d2b183d8df95a800d830d1edb/library%2Fcore%2Ftests%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e22fe4008ca9db3d2b183d8df95a800d830d1edb/library%2Fcore%2Ftests%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fconvert.rs?ref=e22fe4008ca9db3d2b183d8df95a800d830d1edb", "patch": "@@ -0,0 +1,16 @@\n+#[test]\n+fn convert() {\n+    const fn from(x: i32) -> i32 {\n+        i32::from(x)\n+    }\n+\n+    const FOO: i32 = from(42);\n+    assert_eq!(FOO, 42);\n+\n+    const fn into(x: Vec<String>) -> Vec<String> {\n+        x.into()\n+    }\n+\n+    const BAR: Vec<String> = into(Vec::new());\n+    assert_eq!(BAR, Vec::<String>::new());\n+}"}, {"sha": "b41d3e09df8765bab78997e6848bd3064eca6d5f", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e22fe4008ca9db3d2b183d8df95a800d830d1edb/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e22fe4008ca9db3d2b183d8df95a800d830d1edb/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=e22fe4008ca9db3d2b183d8df95a800d830d1edb", "patch": "@@ -12,11 +12,11 @@\n #![feature(const_convert)]\n #![feature(const_maybe_uninit_as_mut_ptr)]\n #![feature(const_maybe_uninit_assume_init)]\n+#![feature(const_num_from_num)]\n #![feature(const_ptr_read)]\n #![feature(const_ptr_write)]\n #![feature(const_ptr_offset)]\n #![feature(const_trait_impl)]\n-#![feature(const_num_from_num)]\n #![feature(core_intrinsics)]\n #![feature(core_private_bignum)]\n #![feature(core_private_diy_float)]\n@@ -96,6 +96,7 @@ mod char;\n mod clone;\n mod cmp;\n mod const_ptr;\n+mod convert;\n mod fmt;\n mod future;\n mod hash;"}, {"sha": "fd2cfa442d3f68aebabded6ee8a71fa439255a79", "filename": "src/test/ui/consts/not_const_clusure_in_const.rs", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/84b1d859c8caa6049bfe728b219f679286151bb2/src%2Ftest%2Fui%2Fconsts%2Fnot_const_clusure_in_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b1d859c8caa6049bfe728b219f679286151bb2/src%2Ftest%2Fui%2Fconsts%2Fnot_const_clusure_in_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fnot_const_clusure_in_const.rs?ref=84b1d859c8caa6049bfe728b219f679286151bb2", "patch": "@@ -1,9 +0,0 @@\n-// run-pass\n-\n-const _FOO: fn() -> String = || \"foo\".into();\n-\n-pub fn bar() -> fn() -> String {\n-    || \"bar\".into()\n-}\n-\n-fn main(){}"}, {"sha": "fe43b132cbd7fb63e96a80b6c6b0464f16ca5a89", "filename": "src/test/ui/consts/try-operator.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e22fe4008ca9db3d2b183d8df95a800d830d1edb/src%2Ftest%2Fui%2Fconsts%2Ftry-operator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e22fe4008ca9db3d2b183d8df95a800d830d1edb/src%2Ftest%2Fui%2Fconsts%2Ftry-operator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Ftry-operator.rs?ref=e22fe4008ca9db3d2b183d8df95a800d830d1edb", "patch": "@@ -0,0 +1,23 @@\n+// run-pass\n+\n+#![feature(try_trait_v2)]\n+#![feature(const_trait_impl)]\n+#![feature(const_try)]\n+#![feature(const_convert)]\n+\n+fn main() {\n+    const fn result() -> Result<bool, ()> {\n+        Err(())?;\n+        Ok(true)\n+    }\n+\n+    const FOO: Result<bool, ()> = result();\n+    assert_eq!(Err(()), FOO);\n+\n+    const fn option() -> Option<()> {\n+        None?;\n+        Some(())\n+    }\n+    const BAR: Option<()> = option();\n+    assert_eq!(None, BAR);\n+}"}]}