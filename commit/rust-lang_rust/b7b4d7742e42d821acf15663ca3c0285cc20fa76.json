{"sha": "b7b4d7742e42d821acf15663ca3c0285cc20fa76", "node_id": "C_kwDOAAsO6NoAKGI3YjRkNzc0MmU0MmQ4MjFhY2YxNTY2M2NhM2MwMjg1Y2MyMGZhNzY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-10T21:40:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-10T21:40:32Z"}, "message": "Rollup merge of #91470 - wesleywiser:code_coverage_link_error, r=tmandry\n\ncode-cov: generate dead functions with private/default linkage\n\nAs discovered in #85461, the MSVC linker treats weak symbols slightly\ndifferently than unix-y linkers do. This causes link.exe to fail with\nLNK1227 \"conflicting weak extern definition\" where as other targets are\nable to link successfully.\n\nThis changes the dead functions from being generated as weak/hidden to\nprivate/default which, as the LLVM reference says:\n\n> Global values with \u201cprivate\u201d linkage are only directly accessible by\nobjects in the current module. In particular, linking code into a module\nwith a private global value may cause the private to be renamed as\nnecessary to avoid collisions. Because the symbol is private to the\nmodule, all references can be updated. This doesn\u2019t show up in any\nsymbol table in the object file.\n\nThis fixes the conflicting weak symbols but doesn't address the reason\n*why* we have conflicting symbols for these dead functions. The test\ncases added in this commit contain a minimal repro of the fundamental\nissue which is that the logic used to decide what dead code functions\nshould be codegen'd in the current CGU doesn't take into account that\nfunctions can be duplicated across multiple CGUs (for instance, in the\ncase of `#[inline(always)]` functions).\n\nFixing that is likely to be a more complex change (see\nhttps://github.com/rust-lang/rust/issues/85461#issuecomment-985005805).\n\nFixes #85461", "tree": {"sha": "a83f388b868cefeda28c2a1af9d3569aaf4041a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a83f388b868cefeda28c2a1af9d3569aaf4041a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7b4d7742e42d821acf15663ca3c0285cc20fa76", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhs8lRCRBK7hj4Ov3rIwAA8lAIAKZbNwjKOl9zm6pJbRyXKcRI\n07pP1IJi8PchVfTICamZJTxwSW8n367OIBh8HvbWkaaXxbe9rrnAIy0uhGG5g2e1\nVy2AIy6ID4IyfdorvcmdVzBBAnj2Fj7mt3Y0ai/GmQqCZnPYfh4nHPRe3A48q8Eh\ncDMg3Kj11zLlEdieGY6k7N4zAkhuhM7K01JXH0utAgpFIKYJHRq+b1q6maLiuT2X\nwG+y33lc5Q3R7EIVyHYZkGJ4cCrfrtManmk1CNPRhOehyaf6SZVkZYYV4axtKrJY\nBs1rx1/LFBwyY5vgN0n1mYHBzyYzGLPM2rgC/qPKZI6xE9vV7ViLW3hxwM/Lryo=\n=YAiN\n-----END PGP SIGNATURE-----\n", "payload": "tree a83f388b868cefeda28c2a1af9d3569aaf4041a8\nparent d317da48b1341eec28ed070002a7110b39b9ae15\nparent d5f6b9c8c228689026aedc7e6e2cc13294f1020f\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1639172432 +0100\ncommitter GitHub <noreply@github.com> 1639172432 +0100\n\nRollup merge of #91470 - wesleywiser:code_coverage_link_error, r=tmandry\n\ncode-cov: generate dead functions with private/default linkage\n\nAs discovered in #85461, the MSVC linker treats weak symbols slightly\ndifferently than unix-y linkers do. This causes link.exe to fail with\nLNK1227 \"conflicting weak extern definition\" where as other targets are\nable to link successfully.\n\nThis changes the dead functions from being generated as weak/hidden to\nprivate/default which, as the LLVM reference says:\n\n> Global values with \u201cprivate\u201d linkage are only directly accessible by\nobjects in the current module. In particular, linking code into a module\nwith a private global value may cause the private to be renamed as\nnecessary to avoid collisions. Because the symbol is private to the\nmodule, all references can be updated. This doesn\u2019t show up in any\nsymbol table in the object file.\n\nThis fixes the conflicting weak symbols but doesn't address the reason\n*why* we have conflicting symbols for these dead functions. The test\ncases added in this commit contain a minimal repro of the fundamental\nissue which is that the logic used to decide what dead code functions\nshould be codegen'd in the current CGU doesn't take into account that\nfunctions can be duplicated across multiple CGUs (for instance, in the\ncase of `#[inline(always)]` functions).\n\nFixing that is likely to be a more complex change (see\nhttps://github.com/rust-lang/rust/issues/85461#issuecomment-985005805).\n\nFixes #85461\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7b4d7742e42d821acf15663ca3c0285cc20fa76", "html_url": "https://github.com/rust-lang/rust/commit/b7b4d7742e42d821acf15663ca3c0285cc20fa76", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7b4d7742e42d821acf15663ca3c0285cc20fa76/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d317da48b1341eec28ed070002a7110b39b9ae15", "url": "https://api.github.com/repos/rust-lang/rust/commits/d317da48b1341eec28ed070002a7110b39b9ae15", "html_url": "https://github.com/rust-lang/rust/commit/d317da48b1341eec28ed070002a7110b39b9ae15"}, {"sha": "d5f6b9c8c228689026aedc7e6e2cc13294f1020f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5f6b9c8c228689026aedc7e6e2cc13294f1020f", "html_url": "https://github.com/rust-lang/rust/commit/d5f6b9c8c228689026aedc7e6e2cc13294f1020f"}], "stats": {"total": 99, "additions": 97, "deletions": 2}, "files": [{"sha": "96b278dbe326aff09bc3f6db0bceb4e161d5dd61", "filename": "compiler/rustc_codegen_llvm/src/coverageinfo/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7b4d7742e42d821acf15663ca3c0285cc20fa76/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7b4d7742e42d821acf15663ca3c0285cc20fa76/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmod.rs?ref=b7b4d7742e42d821acf15663ca3c0285cc20fa76", "patch": "@@ -212,8 +212,8 @@ fn declare_unused_fn(cx: &CodegenCx<'ll, 'tcx>, def_id: &DefId) -> Instance<'tcx\n         ),\n     );\n \n-    llvm::set_linkage(llfn, llvm::Linkage::WeakAnyLinkage);\n-    llvm::set_visibility(llfn, llvm::Visibility::Hidden);\n+    llvm::set_linkage(llfn, llvm::Linkage::PrivateLinkage);\n+    llvm::set_visibility(llfn, llvm::Visibility::Default);\n \n     assert!(cx.instances.borrow_mut().insert(instance, llfn).is_none());\n "}, {"sha": "2831e9b532aba6ac0d8f06ac9f204b9b0c163d98", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.issue-85461.txt", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/b7b4d7742e42d821acf15663ca3c0285cc20fa76/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.issue-85461.txt", "raw_url": "https://github.com/rust-lang/rust/raw/b7b4d7742e42d821acf15663ca3c0285cc20fa76/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.issue-85461.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.issue-85461.txt?ref=b7b4d7742e42d821acf15663ca3c0285cc20fa76", "patch": "@@ -0,0 +1,36 @@\n+../coverage/issue-85461.rs:\n+    1|       |// Regression test for #85461: MSVC sometimes fail to link with dead code and #[inline(always)]\n+    2|       |\n+    3|       |extern crate inline_always_with_dead_code;\n+    4|       |\n+    5|       |use inline_always_with_dead_code::{bar, baz};\n+    6|       |\n+    7|      1|fn main() {\n+    8|      1|    bar::call_me();\n+    9|      1|    baz::call_me();\n+   10|      1|}\n+\n+../coverage/lib/inline_always_with_dead_code.rs:\n+    1|       |// compile-flags: -Zinstrument-coverage -Ccodegen-units=4 -Copt-level=0\n+    2|       |\n+    3|       |#![allow(dead_code)]\n+    4|       |\n+    5|       |mod foo {\n+    6|       |    #[inline(always)]\n+    7|      2|    pub fn called() { }\n+    8|       |\n+    9|      0|    fn uncalled() { }\n+   10|       |}\n+   11|       |\n+   12|       |pub mod bar {\n+   13|      1|    pub fn call_me() {\n+   14|      1|        super::foo::called();\n+   15|      1|    }\n+   16|       |}\n+   17|       |\n+   18|       |pub mod baz {\n+   19|      1|    pub fn call_me() {\n+   20|      1|        super::foo::called();\n+   21|      1|    }\n+   22|       |}\n+"}, {"sha": "a1b9ebb1ed34876c72ca926b36eac46595244c81", "filename": "src/test/run-make-fulldeps/coverage/issue-85461.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b7b4d7742e42d821acf15663ca3c0285cc20fa76/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fissue-85461.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7b4d7742e42d821acf15663ca3c0285cc20fa76/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fissue-85461.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fissue-85461.rs?ref=b7b4d7742e42d821acf15663ca3c0285cc20fa76", "patch": "@@ -0,0 +1,10 @@\n+// Regression test for #85461: MSVC sometimes fail to link with dead code and #[inline(always)]\n+\n+extern crate inline_always_with_dead_code;\n+\n+use inline_always_with_dead_code::{bar, baz};\n+\n+fn main() {\n+    bar::call_me();\n+    baz::call_me();\n+}"}, {"sha": "b567916aea060a829470b1fea6fa8e9b39450eaf", "filename": "src/test/run-make-fulldeps/coverage/lib/inline_always_with_dead_code.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b7b4d7742e42d821acf15663ca3c0285cc20fa76/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Flib%2Finline_always_with_dead_code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7b4d7742e42d821acf15663ca3c0285cc20fa76/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Flib%2Finline_always_with_dead_code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Flib%2Finline_always_with_dead_code.rs?ref=b7b4d7742e42d821acf15663ca3c0285cc20fa76", "patch": "@@ -0,0 +1,22 @@\n+// compile-flags: -Zinstrument-coverage -Ccodegen-units=4 -Copt-level=0\n+\n+#![allow(dead_code)]\n+\n+mod foo {\n+    #[inline(always)]\n+    pub fn called() { }\n+\n+    fn uncalled() { }\n+}\n+\n+pub mod bar {\n+    pub fn call_me() {\n+        super::foo::called();\n+    }\n+}\n+\n+pub mod baz {\n+    pub fn call_me() {\n+        super::foo::called();\n+    }\n+}"}, {"sha": "4c6c83f2612f6bc5603d6eeead4d75b983af3729", "filename": "src/test/ui/issues/issue-85461.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b7b4d7742e42d821acf15663ca3c0285cc20fa76/src%2Ftest%2Fui%2Fissues%2Fissue-85461.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7b4d7742e42d821acf15663ca3c0285cc20fa76/src%2Ftest%2Fui%2Fissues%2Fissue-85461.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-85461.rs?ref=b7b4d7742e42d821acf15663ca3c0285cc20fa76", "patch": "@@ -0,0 +1,27 @@\n+// compile-flags: -Zinstrument-coverage -Ccodegen-units=4 --crate-type dylib -Copt-level=0\n+// build-pass\n+// needs-profiler-support\n+\n+// Regression test for #85461 where MSVC sometimes fails to link instrument-coverage binaries\n+// with dead code and #[inline(always)].\n+\n+#![allow(dead_code)]\n+\n+mod foo {\n+    #[inline(always)]\n+    pub fn called() { }\n+\n+    fn uncalled() { }\n+}\n+\n+pub mod bar {\n+    pub fn call_me() {\n+        super::foo::called();\n+    }\n+}\n+\n+pub mod baz {\n+    pub fn call_me() {\n+        super::foo::called();\n+    }\n+}"}]}