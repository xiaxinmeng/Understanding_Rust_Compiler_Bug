{"sha": "bd2cd6a15f5dfdea48194e6821ed41bb692bc1ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkMmNkNmExNWY1ZGZkZWE0ODE5NGU2ODIxZWQ0MWJiNjkyYmMxZWY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-09-19T11:51:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-19T11:51:38Z"}, "message": "Merge #10283\n\n10283: minor: simplify generics parsing r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "a2c73b290a5b597868104c31f873f10923b67238", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2c73b290a5b597868104c31f873f10923b67238"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd2cd6a15f5dfdea48194e6821ed41bb692bc1ef", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhRyRKCRBK7hj4Ov3rIwAAxwwIACwG8aM6AEaDfMLd2g0fZUDq\nKldket3GKPtYOs5SE558ABHzCMPxaUV7B/LElVgDeD464ohMT9lnPim5QQShHLb8\n2ZoW1xPWlKzWf9kCyKf6VackCNHtp/4zpYwZMMM42JGmJhcAcIiIqtUmXg4wWopS\nYnxOG83M9f04AWfKlAJc3d7636e0Pwe9PhiP2xnAq0crl6Q0+QnN8qtqhzHdIMuw\nizjskNAgfZiOdtZWh8pfYMyK7dmHoZH+ZCYGY/cmzMg9K09iwnaM7cT4S3y34rnj\nZiIWJFOqWg1pQY7YEXJ+Wbtq1isQPeh6BC9q/kx/Eoro8BzI7/mpI1HHXGztGeo=\n=wG8v\n-----END PGP SIGNATURE-----\n", "payload": "tree a2c73b290a5b597868104c31f873f10923b67238\nparent e458f66214c5adc3a8436e1d20f9517b5996f067\nparent 09531b703d0ac1d408945aaf7d402beecc05cbae\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1632052298 +0000\ncommitter GitHub <noreply@github.com> 1632052298 +0000\n\nMerge #10283\n\n10283: minor: simplify generics parsing r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd2cd6a15f5dfdea48194e6821ed41bb692bc1ef", "html_url": "https://github.com/rust-lang/rust/commit/bd2cd6a15f5dfdea48194e6821ed41bb692bc1ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd2cd6a15f5dfdea48194e6821ed41bb692bc1ef/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e458f66214c5adc3a8436e1d20f9517b5996f067", "url": "https://api.github.com/repos/rust-lang/rust/commits/e458f66214c5adc3a8436e1d20f9517b5996f067", "html_url": "https://github.com/rust-lang/rust/commit/e458f66214c5adc3a8436e1d20f9517b5996f067"}, {"sha": "09531b703d0ac1d408945aaf7d402beecc05cbae", "url": "https://api.github.com/repos/rust-lang/rust/commits/09531b703d0ac1d408945aaf7d402beecc05cbae", "html_url": "https://github.com/rust-lang/rust/commit/09531b703d0ac1d408945aaf7d402beecc05cbae"}], "stats": {"total": 37, "additions": 8, "deletions": 29}, "files": [{"sha": "d8ddf95f5991e5f2b81e66bfe767c216eacb0c2d", "filename": "crates/parser/src/grammar/generic_args.rs", "status": "modified", "additions": 4, "deletions": 25, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/bd2cd6a15f5dfdea48194e6821ed41bb692bc1ef/crates%2Fparser%2Fsrc%2Fgrammar%2Fgeneric_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd2cd6a15f5dfdea48194e6821ed41bb692bc1ef/crates%2Fparser%2Fsrc%2Fgrammar%2Fgeneric_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fgeneric_args.rs?ref=bd2cd6a15f5dfdea48194e6821ed41bb692bc1ef", "patch": "@@ -32,45 +32,24 @@ fn generic_arg(p: &mut Parser) {\n         // fn print_all<T: Iterator<Item, Item::Item, Item::<true>, Item: Display, Item<'a> = Item>>(printables: T) {}\n         IDENT if [T![<], T![=], T![:]].contains(&p.nth(1)) => {\n             let m = p.start();\n-            let path_ty = p.start();\n-            let path = p.start();\n-            let path_seg = p.start();\n             name_ref(p);\n             opt_generic_arg_list(p, false);\n             match p.current() {\n                 // NameRef<...> =\n                 T![=] => {\n                     p.bump_any();\n                     types::type_(p);\n-\n-                    path_seg.abandon(p);\n-                    path.abandon(p);\n-                    path_ty.abandon(p);\n                     m.complete(p, ASSOC_TYPE_ARG);\n                 }\n-                T![:] if p.at(T![::]) => {\n-                    // NameRef::, this is a path type\n-                    path_seg.complete(p, PATH_SEGMENT);\n-                    let qual = path.complete(p, PATH);\n-                    paths::type_path_for_qualifier(p, qual);\n-                    path_ty.complete(p, PATH_TYPE);\n-                    m.complete(p, TYPE_ARG);\n-                }\n                 // NameRef<...>:\n-                T![:] => {\n+                T![:] if !p.at(T![::]) => {\n                     generic_params::bounds(p);\n-\n-                    path_seg.abandon(p);\n-                    path.abandon(p);\n-                    path_ty.abandon(p);\n                     m.complete(p, ASSOC_TYPE_ARG);\n                 }\n-                // NameRef, this is a single segment path type\n                 _ => {\n-                    path_seg.complete(p, PATH_SEGMENT);\n-                    path.complete(p, PATH);\n-                    path_ty.complete(p, PATH_TYPE);\n-                    m.complete(p, TYPE_ARG);\n+                    let m = m.complete(p, PATH_SEGMENT).precede(p).complete(p, PATH);\n+                    let m = paths::type_path_for_qualifier(p, m);\n+                    m.precede(p).complete(p, PATH_TYPE).precede(p).complete(p, TYPE_ARG);\n                 }\n             }\n         }"}, {"sha": "05a52c984a37fee2d34746085dca54c3e7e43c29", "filename": "crates/parser/src/grammar/paths.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bd2cd6a15f5dfdea48194e6821ed41bb692bc1ef/crates%2Fparser%2Fsrc%2Fgrammar%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd2cd6a15f5dfdea48194e6821ed41bb692bc1ef/crates%2Fparser%2Fsrc%2Fgrammar%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fpaths.rs?ref=bd2cd6a15f5dfdea48194e6821ed41bb692bc1ef", "patch": "@@ -27,7 +27,7 @@ pub(super) fn expr_path(p: &mut Parser) {\n     path(p, Mode::Expr)\n }\n \n-pub(crate) fn type_path_for_qualifier(p: &mut Parser, qual: CompletedMarker) {\n+pub(crate) fn type_path_for_qualifier(p: &mut Parser, qual: CompletedMarker) -> CompletedMarker {\n     path_for_qualifier(p, Mode::Type, qual)\n }\n \n@@ -42,10 +42,10 @@ fn path(p: &mut Parser, mode: Mode) {\n     let path = p.start();\n     path_segment(p, mode, true);\n     let qual = path.complete(p, PATH);\n-    path_for_qualifier(p, mode, qual)\n+    path_for_qualifier(p, mode, qual);\n }\n \n-fn path_for_qualifier(p: &mut Parser, mode: Mode, mut qual: CompletedMarker) {\n+fn path_for_qualifier(p: &mut Parser, mode: Mode, mut qual: CompletedMarker) -> CompletedMarker {\n     loop {\n         let use_tree = matches!(p.nth(2), T![*] | T!['{']);\n         if p.at(T![::]) && !use_tree {\n@@ -55,7 +55,7 @@ fn path_for_qualifier(p: &mut Parser, mode: Mode, mut qual: CompletedMarker) {\n             let path = path.complete(p, PATH);\n             qual = path;\n         } else {\n-            break;\n+            return qual;\n         }\n     }\n }"}]}