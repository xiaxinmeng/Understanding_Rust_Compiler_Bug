{"sha": "a3a5ff98eba2f81ec76b18cce50f113f59181cce", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzYTVmZjk4ZWJhMmY4MWVjNzZiMThjY2U1MGYxMTNmNTkxODFjY2U=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-03-23T18:18:25Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-03-23T18:18:25Z"}, "message": "move `export_map` into the tcx", "tree": {"sha": "085521662b41e60a0bfa046a08e47c82bf5cd0d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/085521662b41e60a0bfa046a08e47c82bf5cd0d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3a5ff98eba2f81ec76b18cce50f113f59181cce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3a5ff98eba2f81ec76b18cce50f113f59181cce", "html_url": "https://github.com/rust-lang/rust/commit/a3a5ff98eba2f81ec76b18cce50f113f59181cce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3a5ff98eba2f81ec76b18cce50f113f59181cce/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5580374d7eb8795a8188be4650bd5079a25c6b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5580374d7eb8795a8188be4650bd5079a25c6b3", "html_url": "https://github.com/rust-lang/rust/commit/d5580374d7eb8795a8188be4650bd5079a25c6b3"}], "stats": {"total": 72, "additions": 26, "deletions": 46}, "files": [{"sha": "56bbc0480c30afb44237f67ad276edb96ce76630", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a3a5ff98eba2f81ec76b18cce50f113f59181cce/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3a5ff98eba2f81ec76b18cce50f113f59181cce/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=a3a5ff98eba2f81ec76b18cce50f113f59181cce", "patch": "@@ -255,8 +255,8 @@ pub trait CrateStore {\n     fn used_crates(&self, prefer: LinkagePreference) -> Vec<(CrateNum, LibSource)>;\n     fn used_crate_source(&self, cnum: CrateNum) -> CrateSource;\n     fn extern_mod_stmt_cnum(&self, emod_id: ast::NodeId) -> Option<CrateNum>;\n-    fn encode_metadata<'a, 'tcx>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                 reexports: &def::ExportMap,\n+    fn encode_metadata<'a, 'tcx>(&self,\n+                                 tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                  link_meta: &LinkMeta,\n                                  reachable: &NodeSet) -> Vec<u8>;\n     fn metadata_encoding_version(&self) -> &[u8];\n@@ -412,10 +412,10 @@ impl CrateStore for DummyCrateStore {\n         { vec![] }\n     fn used_crate_source(&self, cnum: CrateNum) -> CrateSource { bug!(\"used_crate_source\") }\n     fn extern_mod_stmt_cnum(&self, emod_id: ast::NodeId) -> Option<CrateNum> { None }\n-    fn encode_metadata<'a, 'tcx>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                           reexports: &def::ExportMap,\n-                           link_meta: &LinkMeta,\n-                           reachable: &NodeSet) -> Vec<u8> { vec![] }\n+    fn encode_metadata<'a, 'tcx>(&self,\n+                                 tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                                 link_meta: &LinkMeta,\n+                                 reachable: &NodeSet) -> Vec<u8> { vec![] }\n     fn metadata_encoding_version(&self) -> &[u8] { bug!(\"metadata_encoding_version\") }\n }\n "}, {"sha": "da56514ea82fbf9e485c3f1f761ff9253f9b54cc", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a3a5ff98eba2f81ec76b18cce50f113f59181cce/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3a5ff98eba2f81ec76b18cce50f113f59181cce/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=a3a5ff98eba2f81ec76b18cce50f113f59181cce", "patch": "@@ -15,7 +15,7 @@ use session::Session;\n use lint;\n use middle;\n use hir::TraitMap;\n-use hir::def::Def;\n+use hir::def::{Def, ExportMap};\n use hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use hir::map as hir_map;\n use hir::map::DisambiguatedDefPathData;\n@@ -416,6 +416,9 @@ pub struct GlobalCtxt<'tcx> {\n     /// is relevant; generated by resolve.\n     pub trait_map: TraitMap,\n \n+    /// Export map produced by name resolution.\n+    pub export_map: ExportMap,\n+\n     pub named_region_map: resolve_lifetime::NamedRegionMap,\n \n     pub region_maps: RegionMaps,\n@@ -698,6 +701,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             region_maps: region_maps,\n             variance_computed: Cell::new(false),\n             trait_map: resolutions.trait_map,\n+            export_map: resolutions.export_map,\n             fulfilled_predicates: RefCell::new(fulfilled_predicates),\n             hir: hir,\n             maps: maps::Maps::new(dep_graph, providers),"}, {"sha": "0bcfae1e54a69ea2ed6c02b2d62d2b9a305658c4", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3a5ff98eba2f81ec76b18cce50f113f59181cce/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3a5ff98eba2f81ec76b18cce50f113f59181cce/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=a3a5ff98eba2f81ec76b18cce50f113f59181cce", "patch": "@@ -110,7 +110,6 @@ mod sty;\n /// produced by the driver and fed to trans and later passes.\n #[derive(Clone)]\n pub struct CrateAnalysis {\n-    pub export_map: ExportMap,\n     pub access_levels: middle::privacy::AccessLevels,\n     pub reachable: NodeSet,\n     pub name: String,\n@@ -122,6 +121,7 @@ pub struct Resolutions {\n     pub freevars: FreevarMap,\n     pub trait_map: TraitMap,\n     pub maybe_unused_trait_imports: NodeSet,\n+    pub export_map: ExportMap,\n }\n \n #[derive(Clone, Copy, PartialEq, Eq, Debug)]"}, {"sha": "4947cafb52b3d5f73d3c4fe62308738c827b13a3", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a3a5ff98eba2f81ec76b18cce50f113f59181cce/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3a5ff98eba2f81ec76b18cce50f113f59181cce/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=a3a5ff98eba2f81ec76b18cce50f113f59181cce", "patch": "@@ -807,18 +807,18 @@ pub fn phase_2_configure_and_expand<F>(sess: &Session,\n         expanded_crate: krate,\n         defs: resolver.definitions,\n         analysis: ty::CrateAnalysis {\n-            export_map: resolver.export_map,\n             access_levels: AccessLevels::default(),\n             reachable: NodeSet(),\n             name: crate_name.to_string(),\n             glob_map: if resolver.make_glob_map { Some(resolver.glob_map) } else { None },\n         },\n         resolutions: Resolutions {\n             freevars: resolver.freevars,\n+            export_map: resolver.export_map,\n             trait_map: resolver.trait_map,\n             maybe_unused_trait_imports: resolver.maybe_unused_trait_imports,\n         },\n-        hir_forest: hir_forest\n+        hir_forest: hir_forest,\n     })\n }\n \n@@ -932,7 +932,7 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n \n         analysis.access_levels =\n             time(time_passes, \"privacy checking\", || {\n-                rustc_privacy::check_crate(tcx, &analysis.export_map)\n+                rustc_privacy::check_crate(tcx)\n             });\n \n         time(time_passes,"}, {"sha": "17484138ad3a0d26a847df11d15e809742bba62e", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a3a5ff98eba2f81ec76b18cce50f113f59181cce/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3a5ff98eba2f81ec76b18cce50f113f59181cce/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=a3a5ff98eba2f81ec76b18cce50f113f59181cce", "patch": "@@ -496,12 +496,12 @@ impl CrateStore for cstore::CStore {\n         self.do_extern_mod_stmt_cnum(emod_id)\n     }\n \n-    fn encode_metadata<'a, 'tcx>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                 reexports: &def::ExportMap,\n+    fn encode_metadata<'a, 'tcx>(&self,\n+                                 tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                  link_meta: &LinkMeta,\n                                  reachable: &NodeSet) -> Vec<u8>\n     {\n-        encoder::encode_metadata(tcx, self, reexports, link_meta, reachable)\n+        encoder::encode_metadata(tcx, self, link_meta, reachable)\n     }\n \n     fn metadata_encoding_version(&self) -> &[u8]"}, {"sha": "a324c166e738d4cea6a2d53aafabeb0bd34f318d", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a3a5ff98eba2f81ec76b18cce50f113f59181cce/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3a5ff98eba2f81ec76b18cce50f113f59181cce/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=a3a5ff98eba2f81ec76b18cce50f113f59181cce", "patch": "@@ -13,7 +13,6 @@ use index::Index;\n use schema::*;\n \n use rustc::middle::cstore::{LinkMeta, LinkagePreference, NativeLibrary};\n-use rustc::hir::def;\n use rustc::hir::def_id::{CrateNum, CRATE_DEF_INDEX, DefIndex, DefId};\n use rustc::hir::map::definitions::DefPathTable;\n use rustc::middle::dependency_format::Linkage;\n@@ -48,7 +47,6 @@ use super::index_builder::{FromId, IndexBuilder, Untracked};\n pub struct EncodeContext<'a, 'tcx: 'a> {\n     opaque: opaque::Encoder<'a>,\n     pub tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    reexports: &'a def::ExportMap,\n     link_meta: &'a LinkMeta,\n     cstore: &'a cstore::CStore,\n     exported_symbols: &'a NodeSet,\n@@ -306,7 +304,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         let def_id = tcx.hir.local_def_id(id);\n \n         let data = ModData {\n-            reexports: match self.reexports.get(&id) {\n+            reexports: match tcx.export_map.get(&id) {\n                 Some(exports) if *vis == hir::Public => self.lazy_seq_ref(exports),\n                 _ => LazySeq::empty(),\n             },\n@@ -1423,7 +1421,6 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n \n pub fn encode_metadata<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                  cstore: &cstore::CStore,\n-                                 reexports: &def::ExportMap,\n                                  link_meta: &LinkMeta,\n                                  exported_symbols: &NodeSet)\n                                  -> Vec<u8> {\n@@ -1437,7 +1434,6 @@ pub fn encode_metadata<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         let mut ecx = EncodeContext {\n             opaque: opaque::Encoder::new(&mut cursor),\n             tcx: tcx,\n-            reexports: reexports,\n             link_meta: link_meta,\n             cstore: cstore,\n             exported_symbols: exported_symbols,"}, {"sha": "6b33c7b7816f0c8c79befb258847811387505ae2", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a3a5ff98eba2f81ec76b18cce50f113f59181cce/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3a5ff98eba2f81ec76b18cce50f113f59181cce/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=a3a5ff98eba2f81ec76b18cce50f113f59181cce", "patch": "@@ -27,7 +27,7 @@ extern crate syntax_pos;\n \n use rustc::dep_graph::DepNode;\n use rustc::hir::{self, PatKind};\n-use rustc::hir::def::{self, Def};\n+use rustc::hir::def::Def;\n use rustc::hir::def_id::{CRATE_DEF_INDEX, DefId};\n use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n use rustc::hir::itemlikevisit::DeepVisitor;\n@@ -71,7 +71,6 @@ impl<'a, 'tcx> Visitor<'tcx> for PubRestrictedVisitor<'a, 'tcx> {\n \n struct EmbargoVisitor<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    export_map: &'a def::ExportMap,\n \n     // Accessibility levels for reachable nodes\n     access_levels: AccessLevels,\n@@ -324,7 +323,7 @@ impl<'a, 'tcx> Visitor<'tcx> for EmbargoVisitor<'a, 'tcx> {\n         // This code is here instead of in visit_item so that the\n         // crate module gets processed as well.\n         if self.prev_level.is_some() {\n-            if let Some(exports) = self.export_map.get(&id) {\n+            if let Some(exports) = self.tcx.export_map.get(&id) {\n                 for export in exports {\n                     if let Some(node_id) = self.tcx.hir.as_local_node_id(export.def.def_id()) {\n                         self.update(node_id, Some(AccessLevel::Exported));\n@@ -1204,9 +1203,7 @@ impl<'a, 'tcx> Visitor<'tcx> for PrivateItemsInPublicInterfacesVisitor<'a, 'tcx>\n     fn visit_pat(&mut self, _: &'tcx hir::Pat) {}\n }\n \n-pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                             export_map: &def::ExportMap)\n-                             -> AccessLevels {\n+pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> AccessLevels {\n     let _task = tcx.dep_graph.in_task(DepNode::Privacy);\n \n     let krate = tcx.hir.krate();\n@@ -1226,7 +1223,6 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // items which are reachable from external crates based on visibility.\n     let mut visitor = EmbargoVisitor {\n         tcx: tcx,\n-        export_map: export_map,\n         access_levels: Default::default(),\n         prev_level: Some(AccessLevel::Public),\n         changed: false,"}, {"sha": "f7ca468fddaef037cedac253beac73e9d8841145", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3a5ff98eba2f81ec76b18cce50f113f59181cce/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3a5ff98eba2f81ec76b18cce50f113f59181cce/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=a3a5ff98eba2f81ec76b18cce50f113f59181cce", "patch": "@@ -755,7 +755,6 @@ fn write_metadata(cx: &SharedCrateContext,\n \n     let cstore = &cx.tcx().sess.cstore;\n     let metadata = cstore.encode_metadata(cx.tcx(),\n-                                          cx.export_map(),\n                                           cx.link_meta(),\n                                           exported_symbols);\n     if kind == MetadataKind::Uncompressed {\n@@ -1056,15 +1055,14 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // particular items that will be processed.\n     let krate = tcx.hir.krate();\n \n-    let ty::CrateAnalysis { export_map, reachable, name, .. } = analysis;\n+    let ty::CrateAnalysis { reachable, name, .. } = analysis;\n     let exported_symbols = find_exported_symbols(tcx, reachable);\n \n     let check_overflow = tcx.sess.overflow_checks();\n \n     let link_meta = link::build_link_meta(incremental_hashes_map, &name);\n \n     let shared_ccx = SharedCrateContext::new(tcx,\n-                                             export_map,\n                                              link_meta.clone(),\n                                              exported_symbols,\n                                              check_overflow);"}, {"sha": "73602dc420b3f9999be6534e41e5df674004cc91", "filename": "src/librustc_trans/context.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a3a5ff98eba2f81ec76b18cce50f113f59181cce/src%2Flibrustc_trans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3a5ff98eba2f81ec76b18cce50f113f59181cce/src%2Flibrustc_trans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontext.rs?ref=a3a5ff98eba2f81ec76b18cce50f113f59181cce", "patch": "@@ -14,7 +14,6 @@ use rustc::dep_graph::{DepGraph, DepGraphSafe, DepNode, DepTrackingMap,\n                        DepTrackingMapConfig, WorkProduct};\n use middle::cstore::LinkMeta;\n use rustc::hir;\n-use rustc::hir::def::ExportMap;\n use rustc::hir::def_id::DefId;\n use rustc::traits;\n use debuginfo;\n@@ -68,7 +67,6 @@ pub struct SharedCrateContext<'a, 'tcx: 'a> {\n     metadata_llmod: ModuleRef,\n     metadata_llcx: ContextRef,\n \n-    export_map: ExportMap,\n     exported_symbols: NodeSet,\n     link_meta: LinkMeta,\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n@@ -402,7 +400,6 @@ unsafe fn create_context_and_module(sess: &Session, mod_name: &str) -> (ContextR\n \n impl<'b, 'tcx> SharedCrateContext<'b, 'tcx> {\n     pub fn new(tcx: TyCtxt<'b, 'tcx, 'tcx>,\n-               export_map: ExportMap,\n                link_meta: LinkMeta,\n                exported_symbols: NodeSet,\n                check_overflow: bool)\n@@ -459,7 +456,6 @@ impl<'b, 'tcx> SharedCrateContext<'b, 'tcx> {\n         SharedCrateContext {\n             metadata_llmod: metadata_llmod,\n             metadata_llcx: metadata_llcx,\n-            export_map: export_map,\n             exported_symbols: exported_symbols,\n             link_meta: link_meta,\n             empty_param_env: tcx.empty_parameter_environment(),\n@@ -499,10 +495,6 @@ impl<'b, 'tcx> SharedCrateContext<'b, 'tcx> {\n         self.metadata_llcx\n     }\n \n-    pub fn export_map<'a>(&'a self) -> &'a ExportMap {\n-        &self.export_map\n-    }\n-\n     pub fn exported_symbols<'a>(&'a self) -> &'a NodeSet {\n         &self.exported_symbols\n     }\n@@ -702,10 +694,6 @@ impl<'b, 'tcx> CrateContext<'b, 'tcx> {\n         unsafe { llvm::LLVMRustGetModuleDataLayout(self.llmod()) }\n     }\n \n-    pub fn export_map<'a>(&'a self) -> &'a ExportMap {\n-        &self.shared.export_map\n-    }\n-\n     pub fn exported_symbols<'a>(&'a self) -> &'a NodeSet {\n         &self.shared.exported_symbols\n     }"}, {"sha": "92aba1fc61de305521429858ccf8a8722c906d8c", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a3a5ff98eba2f81ec76b18cce50f113f59181cce/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3a5ff98eba2f81ec76b18cce50f113f59181cce/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=a3a5ff98eba2f81ec76b18cce50f113f59181cce", "patch": "@@ -13,7 +13,7 @@ use rustc_driver::{driver, target_features, abort_on_err};\n use rustc::dep_graph::DepGraph;\n use rustc::session::{self, config};\n use rustc::hir::def_id::DefId;\n-use rustc::hir::def::{Def, ExportMap};\n+use rustc::hir::def::Def;\n use rustc::middle::privacy::AccessLevels;\n use rustc::ty::{self, TyCtxt, GlobalArenas};\n use rustc::hir::map as hir_map;\n@@ -64,7 +64,6 @@ pub struct DocContext<'a, 'tcx: 'a> {\n     pub ty_substs: RefCell<FxHashMap<Def, clean::Type>>,\n     /// Table node id of lifetime parameter definition -> substituted lifetime\n     pub lt_substs: RefCell<FxHashMap<ast::NodeId, clean::Lifetime>>,\n-    pub export_map: ExportMap,\n }\n \n impl<'a, 'tcx> DocContext<'a, 'tcx> {\n@@ -180,7 +179,7 @@ pub fn run_core(search_paths: SearchPaths,\n             sess.fatal(\"Compilation failed, aborting rustdoc\");\n         }\n \n-        let ty::CrateAnalysis { access_levels, export_map, .. } = analysis;\n+        let ty::CrateAnalysis { access_levels, .. } = analysis;\n \n         // Convert from a NodeId set to a DefId set since we don't always have easy access\n         // to the map from defid -> nodeid\n@@ -198,7 +197,6 @@ pub fn run_core(search_paths: SearchPaths,\n             renderinfo: Default::default(),\n             ty_substs: Default::default(),\n             lt_substs: Default::default(),\n-            export_map: export_map,\n         };\n         debug!(\"crate: {:?}\", tcx.hir.krate());\n "}, {"sha": "2793307697852b8aa1b36a0e971e2bc115f549e4", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3a5ff98eba2f81ec76b18cce50f113f59181cce/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3a5ff98eba2f81ec76b18cce50f113f59181cce/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=a3a5ff98eba2f81ec76b18cce50f113f59181cce", "patch": "@@ -198,7 +198,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             self.visit_item(item, None, &mut om);\n         }\n         self.inside_public_path = orig_inside_public_path;\n-        if let Some(exports) = self.cx.export_map.get(&id) {\n+        if let Some(exports) = self.cx.tcx.export_map.get(&id) {\n             for export in exports {\n                 if let Def::Macro(def_id, ..) = export.def {\n                     if def_id.krate == LOCAL_CRATE {"}]}