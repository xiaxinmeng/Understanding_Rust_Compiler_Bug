{"sha": "6d64798a2300858c74b1cc0a22f6d3df578288b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkNjQ3OThhMjMwMDg1OGM3NGIxY2MwYTIyZjZkM2RmNTc4Mjg4YjM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-21T12:39:09Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-21T12:39:09Z"}, "message": "Move resolver to hir_def", "tree": {"sha": "cd22f6a6a743bf15dc671995c49904477b249604", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd22f6a6a743bf15dc671995c49904477b249604"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d64798a2300858c74b1cc0a22f6d3df578288b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d64798a2300858c74b1cc0a22f6d3df578288b3", "html_url": "https://github.com/rust-lang/rust/commit/6d64798a2300858c74b1cc0a22f6d3df578288b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d64798a2300858c74b1cc0a22f6d3df578288b3/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00684d708b64fe81a0264795f27594d450a8d08d", "url": "https://api.github.com/repos/rust-lang/rust/commits/00684d708b64fe81a0264795f27594d450a8d08d", "html_url": "https://github.com/rust-lang/rust/commit/00684d708b64fe81a0264795f27594d450a8d08d"}], "stats": {"total": 140, "additions": 63, "deletions": 77}, "files": [{"sha": "92860fb598db3ee057516c51c4998fc0edda5953", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d64798a2300858c74b1cc0a22f6d3df578288b3/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d64798a2300858c74b1cc0a22f6d3df578288b3/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=6d64798a2300858c74b1cc0a22f6d3df578288b3", "patch": "@@ -11,6 +11,7 @@ use hir_def::{\n     body::scope::ExprScopes,\n     builtin_type::BuiltinType,\n     nameres::per_ns::PerNs,\n+    resolver::{HasResolver, TypeNs},\n     traits::TraitData,\n     type_ref::{Mutability, TypeRef},\n     ContainerId, CrateModuleId, HasModule, ImplId, LocalEnumVariantId, LocalStructFieldId, Lookup,\n@@ -31,7 +32,6 @@ use crate::{\n         AstItemDef, ConstId, EnumId, FunctionId, MacroDefId, StaticId, StructId, TraitId,\n         TypeAliasId,\n     },\n-    resolve::{HasResolver, TypeNs},\n     ty::{InferenceResult, Namespace, TraitRef},\n     Either, HasSource, ImportId, Name, Source, Ty,\n };"}, {"sha": "6b703d8b4bed6ac1f7f85f8bcda1dc8f0bb872bb", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6d64798a2300858c74b1cc0a22f6d3df578288b3/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d64798a2300858c74b1cc0a22f6d3df578288b3/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=6d64798a2300858c74b1cc0a22f6d3df578288b3", "patch": "@@ -2,7 +2,7 @@\n \n use std::sync::Arc;\n \n-use hir_def::path::known;\n+use hir_def::{path::known, resolver::HasResolver};\n use hir_expand::diagnostics::DiagnosticSink;\n use ra_syntax::ast;\n use ra_syntax::AstPtr;\n@@ -11,7 +11,6 @@ use rustc_hash::FxHashSet;\n use crate::{\n     db::HirDatabase,\n     diagnostics::{MissingFields, MissingOkInTailExpr},\n-    resolve::HasResolver,\n     ty::{ApplicationTy, InferenceResult, Ty, TypeCtor},\n     Adt, Function, Name, Path,\n };"}, {"sha": "774fa1d96404a8e9d97e4a06c06b588584becdc2", "filename": "crates/ra_hir/src/impl_block.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6d64798a2300858c74b1cc0a22f6d3df578288b3/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d64798a2300858c74b1cc0a22f6d3df578288b3/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs?ref=6d64798a2300858c74b1cc0a22f6d3df578288b3", "patch": "@@ -1,11 +1,10 @@\n //! FIXME: write short doc here\n \n-use hir_def::{type_ref::TypeRef, AstItemDef};\n-use ra_syntax::ast::{self};\n+use hir_def::{resolver::HasResolver, type_ref::TypeRef, AstItemDef};\n+use ra_syntax::ast;\n \n use crate::{\n     db::{AstDatabase, DefDatabase, HirDatabase},\n-    resolve::HasResolver,\n     ty::Ty,\n     AssocItem, Crate, HasSource, ImplBlock, Module, Source, TraitRef,\n };"}, {"sha": "76c96bdcfb31a4679cec33f98151554b01b318be", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6d64798a2300858c74b1cc0a22f6d3df578288b3/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d64798a2300858c74b1cc0a22f6d3df578288b3/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=6d64798a2300858c74b1cc0a22f6d3df578288b3", "patch": "@@ -38,7 +38,6 @@ mod impl_block;\n mod expr;\n mod lang_item;\n pub mod generics;\n-mod resolve;\n pub mod diagnostics;\n mod util;\n \n@@ -52,8 +51,6 @@ mod test_db;\n #[cfg(test)]\n mod marks;\n \n-use crate::resolve::Resolver;\n-\n pub use crate::{\n     code_model::{\n         attrs::{AttrDef, Attrs},"}, {"sha": "c42ceabdfc3357aa0d244ba43a58924eaca4fd16", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6d64798a2300858c74b1cc0a22f6d3df578288b3/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d64798a2300858c74b1cc0a22f6d3df578288b3/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=6d64798a2300858c74b1cc0a22f6d3df578288b3", "patch": "@@ -10,6 +10,7 @@ use std::sync::Arc;\n use hir_def::{\n     expr::{ExprId, PatId},\n     path::known,\n+    resolver::{self, resolver_for_scope, HasResolver, Resolver, TypeNs, ValueNs},\n     DefWithBodyId,\n };\n use hir_expand::{name::AsName, AstId, MacroCallId, MacroCallLoc, MacroFileKind, Source};\n@@ -24,11 +25,10 @@ use crate::{\n     db::HirDatabase,\n     expr::{BodySourceMap, ExprScopes, ScopeId},\n     ids::LocationCtx,\n-    resolve::{self, resolver_for_scope, HasResolver, TypeNs, ValueNs},\n     ty::method_resolution::{self, implements_trait},\n     Adt, AssocItem, Const, DefWithBody, Either, Enum, EnumVariant, FromSource, Function,\n-    GenericParam, HasBody, HirFileId, Local, MacroDef, Module, Name, Path, Resolver, ScopeDef,\n-    Static, Struct, Trait, Ty, TypeAlias,\n+    GenericParam, HasBody, HirFileId, Local, MacroDef, Module, Name, Path, ScopeDef, Static,\n+    Struct, Trait, Ty, TypeAlias,\n };\n \n fn try_get_resolver_for_node(db: &impl HirDatabase, node: Source<&SyntaxNode>) -> Option<Resolver> {\n@@ -317,14 +317,14 @@ impl SourceAnalyzer {\n     pub fn process_all_names(&self, db: &impl HirDatabase, f: &mut dyn FnMut(Name, ScopeDef)) {\n         self.resolver.process_all_names(db, &mut |name, def| {\n             let def = match def {\n-                resolve::ScopeDef::PerNs(it) => it.into(),\n-                resolve::ScopeDef::ImplSelfType(it) => ScopeDef::ImplSelfType(it.into()),\n-                resolve::ScopeDef::AdtSelfType(it) => ScopeDef::AdtSelfType(it.into()),\n-                resolve::ScopeDef::GenericParam(idx) => {\n+                resolver::ScopeDef::PerNs(it) => it.into(),\n+                resolver::ScopeDef::ImplSelfType(it) => ScopeDef::ImplSelfType(it.into()),\n+                resolver::ScopeDef::AdtSelfType(it) => ScopeDef::AdtSelfType(it.into()),\n+                resolver::ScopeDef::GenericParam(idx) => {\n                     let parent = self.resolver.generic_def().unwrap().into();\n                     ScopeDef::GenericParam(GenericParam { parent, idx })\n                 }\n-                resolve::ScopeDef::Local(pat_id) => {\n+                resolver::ScopeDef::Local(pat_id) => {\n                     let parent = self.resolver.body_owner().unwrap().into();\n                     ScopeDef::Local(Local { parent, pat_id })\n                 }"}, {"sha": "5d8518041fde02f5bf32c37d74f7c057d2b5151d", "filename": "crates/ra_hir/src/ty/autoderef.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6d64798a2300858c74b1cc0a22f6d3df578288b3/crates%2Fra_hir%2Fsrc%2Fty%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d64798a2300858c74b1cc0a22f6d3df578288b3/crates%2Fra_hir%2Fsrc%2Fty%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fautoderef.rs?ref=6d64798a2300858c74b1cc0a22f6d3df578288b3", "patch": "@@ -5,11 +5,12 @@\n \n use std::iter::successors;\n \n+use hir_def::resolver::Resolver;\n use hir_expand::name;\n use log::{info, warn};\n \n use super::{traits::Solution, Canonical, Substs, Ty, TypeWalk};\n-use crate::{db::HirDatabase, generics::HasGenericParams, Resolver};\n+use crate::{db::HirDatabase, generics::HasGenericParams};\n \n const AUTODEREF_RECURSION_LIMIT: usize = 10;\n "}, {"sha": "69b13baefbace0f6b5ea5fbe92f1d11d403e6325", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d64798a2300858c74b1cc0a22f6d3df578288b3/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d64798a2300858c74b1cc0a22f6d3df578288b3/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=6d64798a2300858c74b1cc0a22f6d3df578288b3", "patch": "@@ -23,6 +23,7 @@ use rustc_hash::FxHashMap;\n \n use hir_def::{\n     path::known,\n+    resolver::{HasResolver, Resolver, TypeNs},\n     type_ref::{Mutability, TypeRef},\n     AdtId, DefWithBodyId,\n };\n@@ -41,7 +42,6 @@ use crate::{\n     code_model::TypeAlias,\n     db::HirDatabase,\n     expr::{BindingAnnotation, Body, ExprId, PatId},\n-    resolve::{HasResolver, Resolver, TypeNs},\n     ty::infer::diagnostics::InferenceDiagnostic,\n     Adt, AssocItem, ConstData, DefWithBody, FloatTy, FnData, Function, HasBody, IntTy, Path,\n     StructField, Trait, VariantDef,"}, {"sha": "0772b9df57a05a4445f21d11d52123465ece0801", "filename": "crates/ra_hir/src/ty/infer/coerce.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d64798a2300858c74b1cc0a22f6d3df578288b3/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fcoerce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d64798a2300858c74b1cc0a22f6d3df578288b3/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fcoerce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fcoerce.rs?ref=6d64798a2300858c74b1cc0a22f6d3df578288b3", "patch": "@@ -4,19 +4,19 @@\n //!\n //! See: https://doc.rust-lang.org/nomicon/coercions.html\n \n+use hir_def::resolver::Resolver;\n use rustc_hash::FxHashMap;\n-\n use test_utils::tested_by;\n \n-use super::{InferTy, InferenceContext, TypeVarValue};\n use crate::{\n     db::HirDatabase,\n     lang_item::LangItemTarget,\n-    resolve::Resolver,\n     ty::{autoderef, Substs, Ty, TypeCtor, TypeWalk},\n     Adt, Mutability,\n };\n \n+use super::{InferTy, InferenceContext, TypeVarValue};\n+\n impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n     /// Unify two types, but may coerce the first one to the second one\n     /// using \"implicit coercion rules\" if needed."}, {"sha": "ac570075f009318a625111b8ce2d5f6e748bfc14", "filename": "crates/ra_hir/src/ty/infer/expr.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6d64798a2300858c74b1cc0a22f6d3df578288b3/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d64798a2300858c74b1cc0a22f6d3df578288b3/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fexpr.rs?ref=6d64798a2300858c74b1cc0a22f6d3df578288b3", "patch": "@@ -6,15 +6,14 @@ use std::sync::Arc;\n use hir_def::{\n     builtin_type::Signedness,\n     path::{GenericArg, GenericArgs},\n+    resolver::resolver_for_expr,\n };\n use hir_expand::name;\n \n-use super::{BindingMode, Expectation, InferenceContext, InferenceDiagnostic, TypeMismatch};\n use crate::{\n     db::HirDatabase,\n     expr::{Array, BinaryOp, Expr, ExprId, Literal, Statement, UnaryOp},\n     generics::{GenericParams, HasGenericParams},\n-    resolve::resolver_for_expr,\n     ty::{\n         autoderef, method_resolution, op, CallableDef, InferTy, IntTy, Mutability, Namespace,\n         Obligation, ProjectionPredicate, ProjectionTy, Substs, TraitRef, Ty, TypeCtor, TypeWalk,\n@@ -23,6 +22,8 @@ use crate::{\n     Adt, Name,\n };\n \n+use super::{BindingMode, Expectation, InferenceContext, InferenceDiagnostic, TypeMismatch};\n+\n impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n     pub(super) fn infer_expr(&mut self, tgt_expr: ExprId, expected: &Expectation) -> Ty {\n         let ty = self.infer_expr_inner(tgt_expr, expected);"}, {"sha": "70136e514e277ecbe660c36bc599734e6494f66d", "filename": "crates/ra_hir/src/ty/infer/path.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6d64798a2300858c74b1cc0a22f6d3df578288b3/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d64798a2300858c74b1cc0a22f6d3df578288b3/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fpath.rs?ref=6d64798a2300858c74b1cc0a22f6d3df578288b3", "patch": "@@ -1,16 +1,19 @@\n //! Path expression resolution.\n \n-use hir_def::path::PathSegment;\n+use hir_def::{\n+    path::PathSegment,\n+    resolver::{ResolveValueResult, Resolver, TypeNs, ValueNs},\n+};\n \n-use super::{ExprOrPatId, InferenceContext, TraitRef};\n use crate::{\n     db::HirDatabase,\n     generics::HasGenericParams,\n-    resolve::{ResolveValueResult, Resolver, TypeNs, ValueNs},\n     ty::{method_resolution, Namespace, Substs, Ty, TypableDef, TypeWalk},\n     AssocItem, Container, Function, Name, Path,\n };\n \n+use super::{ExprOrPatId, InferenceContext, TraitRef};\n+\n impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n     pub(super) fn infer_path(\n         &mut self,"}, {"sha": "c6ad0811b96fbe96157fb7369a5d9ce3bf80d7cf", "filename": "crates/ra_hir/src/ty/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d64798a2300858c74b1cc0a22f6d3df578288b3/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d64798a2300858c74b1cc0a22f6d3df578288b3/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs?ref=6d64798a2300858c74b1cc0a22f6d3df578288b3", "patch": "@@ -11,6 +11,7 @@ use std::sync::Arc;\n use hir_def::{\n     builtin_type::{BuiltinFloat, BuiltinInt, BuiltinType},\n     path::{GenericArg, PathSegment},\n+    resolver::{HasResolver, Resolver, TypeNs},\n     type_ref::{TypeBound, TypeRef},\n     GenericDefId,\n };\n@@ -23,7 +24,6 @@ use crate::{\n     db::HirDatabase,\n     generics::HasGenericParams,\n     generics::{GenericDef, WherePredicate},\n-    resolve::{HasResolver, Resolver, TypeNs},\n     ty::{\n         primitive::{FloatTy, IntTy, Uncertain},\n         Adt,"}, {"sha": "64adb814d3f90b7e80c197c6a293df7dfd1f0664", "filename": "crates/ra_hir/src/ty/method_resolution.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d64798a2300858c74b1cc0a22f6d3df578288b3/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d64798a2300858c74b1cc0a22f6d3df578288b3/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs?ref=6d64798a2300858c74b1cc0a22f6d3df578288b3", "patch": "@@ -5,11 +5,11 @@\n use std::sync::Arc;\n \n use arrayvec::ArrayVec;\n+use hir_def::resolver::Resolver;\n use rustc_hash::FxHashMap;\n \n use crate::{\n     db::HirDatabase,\n-    resolve::Resolver,\n     ty::primitive::{FloatBitness, Uncertain},\n     ty::{Ty, TypeCtor},\n     AssocItem, Crate, Function, ImplBlock, Module, Mutability, Name, Trait,"}, {"sha": "d579f5c7ea5fa5e99b01fc476606eeaaffbc8c82", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d64798a2300858c74b1cc0a22f6d3df578288b3/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d64798a2300858c74b1cc0a22f6d3df578288b3/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=6d64798a2300858c74b1cc0a22f6d3df578288b3", "patch": "@@ -19,6 +19,7 @@ pub mod expr;\n pub mod body;\n pub mod generics;\n pub mod traits;\n+pub mod resolver;\n \n #[cfg(test)]\n mod test_db;"}, {"sha": "840785baa428883205737dfbe152c083c5677f2e", "filename": "crates/ra_hir_def/src/resolver.rs", "status": "renamed", "additions": 33, "deletions": 48, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/6d64798a2300858c74b1cc0a22f6d3df578288b3/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d64798a2300858c74b1cc0a22f6d3df578288b3/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs?ref=6d64798a2300858c74b1cc0a22f6d3df578288b3", "patch": "@@ -1,7 +1,14 @@\n-//! Name resolution.\n+//! Name resolution fa\u00e7ade.\n use std::sync::Arc;\n \n-use hir_def::{\n+use hir_expand::{\n+    name::{self, Name},\n+    MacroDefId,\n+};\n+use ra_db::CrateId;\n+use rustc_hash::FxHashSet;\n+\n+use crate::{\n     body::scope::{ExprScopes, ScopeId},\n     builtin_type::BuiltinType,\n     db::DefDatabase2,\n@@ -13,15 +20,9 @@ use hir_def::{\n     FunctionId, GenericDefId, ImplId, Lookup, ModuleDefId, ModuleId, StaticId, StructId, TraitId,\n     TypeAliasId, UnionId,\n };\n-use hir_expand::{\n-    name::{self, Name},\n-    MacroDefId,\n-};\n-use ra_db::CrateId;\n-use rustc_hash::FxHashSet;\n \n #[derive(Debug, Clone, Default)]\n-pub(crate) struct Resolver {\n+pub struct Resolver {\n     scopes: Vec<Scope>,\n }\n \n@@ -54,7 +55,7 @@ pub(crate) enum Scope {\n }\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub(crate) enum TypeNs {\n+pub enum TypeNs {\n     SelfType(ImplId),\n     GenericParam(u32),\n     AdtId(AdtId),\n@@ -69,13 +70,13 @@ pub(crate) enum TypeNs {\n }\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub(crate) enum ResolveValueResult {\n+pub enum ResolveValueResult {\n     ValueNs(ValueNs),\n     Partial(TypeNs, usize),\n }\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub(crate) enum ValueNs {\n+pub enum ValueNs {\n     LocalBinding(PatId),\n     FunctionId(FunctionId),\n     ConstId(ConstId),\n@@ -86,11 +87,7 @@ pub(crate) enum ValueNs {\n \n impl Resolver {\n     /// Resolve known trait from std, like `std::futures::Future`\n-    pub(crate) fn resolve_known_trait(\n-        &self,\n-        db: &impl DefDatabase2,\n-        path: &Path,\n-    ) -> Option<TraitId> {\n+    pub fn resolve_known_trait(&self, db: &impl DefDatabase2, path: &Path) -> Option<TraitId> {\n         let res = self.resolve_module_path(db, path).take_types()?;\n         match res {\n             ModuleDefId::TraitId(it) => Some(it),\n@@ -99,11 +96,7 @@ impl Resolver {\n     }\n \n     /// Resolve known struct from std, like `std::boxed::Box`\n-    pub(crate) fn resolve_known_struct(\n-        &self,\n-        db: &impl DefDatabase2,\n-        path: &Path,\n-    ) -> Option<StructId> {\n+    pub fn resolve_known_struct(&self, db: &impl DefDatabase2, path: &Path) -> Option<StructId> {\n         let res = self.resolve_module_path(db, path).take_types()?;\n         match res {\n             ModuleDefId::AdtId(AdtId::StructId(it)) => Some(it),\n@@ -112,7 +105,7 @@ impl Resolver {\n     }\n \n     /// Resolve known enum from std, like `std::result::Result`\n-    pub(crate) fn resolve_known_enum(&self, db: &impl DefDatabase2, path: &Path) -> Option<EnumId> {\n+    pub fn resolve_known_enum(&self, db: &impl DefDatabase2, path: &Path) -> Option<EnumId> {\n         let res = self.resolve_module_path(db, path).take_types()?;\n         match res {\n             ModuleDefId::AdtId(AdtId::EnumId(it)) => Some(it),\n@@ -121,7 +114,7 @@ impl Resolver {\n     }\n \n     /// pub only for source-binder\n-    pub(crate) fn resolve_module_path(&self, db: &impl DefDatabase2, path: &Path) -> PerNs {\n+    pub fn resolve_module_path(&self, db: &impl DefDatabase2, path: &Path) -> PerNs {\n         let (item_map, module) = match self.module() {\n             Some(it) => it,\n             None => return PerNs::none(),\n@@ -133,7 +126,7 @@ impl Resolver {\n         module_res\n     }\n \n-    pub(crate) fn resolve_path_in_type_ns(\n+    pub fn resolve_path_in_type_ns(\n         &self,\n         db: &impl DefDatabase2,\n         path: &Path,\n@@ -189,7 +182,7 @@ impl Resolver {\n         None\n     }\n \n-    pub(crate) fn resolve_path_in_type_ns_fully(\n+    pub fn resolve_path_in_type_ns_fully(\n         &self,\n         db: &impl DefDatabase2,\n         path: &Path,\n@@ -201,7 +194,7 @@ impl Resolver {\n         Some(res)\n     }\n \n-    pub(crate) fn resolve_path_in_value_ns<'p>(\n+    pub fn resolve_path_in_value_ns<'p>(\n         &self,\n         db: &impl DefDatabase2,\n         path: &'p Path,\n@@ -301,7 +294,7 @@ impl Resolver {\n         None\n     }\n \n-    pub(crate) fn resolve_path_in_value_ns_fully(\n+    pub fn resolve_path_in_value_ns_fully(\n         &self,\n         db: &impl DefDatabase2,\n         path: &Path,\n@@ -312,26 +305,18 @@ impl Resolver {\n         }\n     }\n \n-    pub(crate) fn resolve_path_as_macro(\n-        &self,\n-        db: &impl DefDatabase2,\n-        path: &Path,\n-    ) -> Option<MacroDefId> {\n+    pub fn resolve_path_as_macro(&self, db: &impl DefDatabase2, path: &Path) -> Option<MacroDefId> {\n         let (item_map, module) = self.module()?;\n         item_map.resolve_path(db, module, path).0.get_macros()\n     }\n \n-    pub(crate) fn process_all_names(\n-        &self,\n-        db: &impl DefDatabase2,\n-        f: &mut dyn FnMut(Name, ScopeDef),\n-    ) {\n+    pub fn process_all_names(&self, db: &impl DefDatabase2, f: &mut dyn FnMut(Name, ScopeDef)) {\n         for scope in self.scopes.iter().rev() {\n             scope.process_names(db, f);\n         }\n     }\n \n-    pub(crate) fn traits_in_scope(&self, db: &impl DefDatabase2) -> FxHashSet<TraitId> {\n+    pub fn traits_in_scope(&self, db: &impl DefDatabase2) -> FxHashSet<TraitId> {\n         let mut traits = FxHashSet::default();\n         for scope in &self.scopes {\n             if let Scope::ModuleScope(m) = scope {\n@@ -353,11 +338,11 @@ impl Resolver {\n         })\n     }\n \n-    pub(crate) fn krate(&self) -> Option<CrateId> {\n+    pub fn krate(&self) -> Option<CrateId> {\n         self.module().map(|t| t.0.krate())\n     }\n \n-    pub(crate) fn where_predicates_in_scope<'a>(\n+    pub fn where_predicates_in_scope<'a>(\n         &'a self,\n     ) -> impl Iterator<Item = &'a crate::generics::WherePredicate> + 'a {\n         self.scopes\n@@ -369,14 +354,14 @@ impl Resolver {\n             .flat_map(|params| params.where_predicates.iter())\n     }\n \n-    pub(crate) fn generic_def(&self) -> Option<GenericDefId> {\n+    pub fn generic_def(&self) -> Option<GenericDefId> {\n         self.scopes.iter().find_map(|scope| match scope {\n             Scope::GenericParams { def, .. } => Some(*def),\n             _ => None,\n         })\n     }\n \n-    pub(crate) fn body_owner(&self) -> Option<DefWithBodyId> {\n+    pub fn body_owner(&self) -> Option<DefWithBodyId> {\n         self.scopes.iter().find_map(|scope| match scope {\n             Scope::ExprScope(it) => Some(it.owner),\n             _ => None,\n@@ -425,7 +410,7 @@ impl Resolver {\n     }\n }\n \n-pub(crate) enum ScopeDef {\n+pub enum ScopeDef {\n     PerNs(PerNs),\n     ImplSelfType(ImplId),\n     AdtSelfType(AdtId),\n@@ -481,7 +466,7 @@ impl Scope {\n }\n \n // needs arbitrary_self_types to be a method... or maybe move to the def?\n-pub(crate) fn resolver_for_expr(\n+pub fn resolver_for_expr(\n     db: &impl DefDatabase2,\n     owner: DefWithBodyId,\n     expr_id: ExprId,\n@@ -490,7 +475,7 @@ pub(crate) fn resolver_for_expr(\n     resolver_for_scope(db, owner, scopes.scope_for(expr_id))\n }\n \n-pub(crate) fn resolver_for_scope(\n+pub fn resolver_for_scope(\n     db: &impl DefDatabase2,\n     owner: DefWithBodyId,\n     scope_id: Option<ScopeId>,\n@@ -504,7 +489,7 @@ pub(crate) fn resolver_for_scope(\n     r\n }\n \n-pub(crate) trait HasResolver {\n+pub trait HasResolver {\n     /// Builds a resolver for type references inside this def.\n     fn resolver(self, db: &impl DefDatabase2) -> Resolver;\n }\n@@ -600,7 +585,7 @@ impl HasResolver for ContainerId {\n }\n \n impl HasResolver for GenericDefId {\n-    fn resolver(self, db: &impl DefDatabase2) -> crate::Resolver {\n+    fn resolver(self, db: &impl DefDatabase2) -> Resolver {\n         match self {\n             GenericDefId::FunctionId(inner) => inner.resolver(db),\n             GenericDefId::AdtId(adt) => adt.resolver(db),", "previous_filename": "crates/ra_hir/src/resolve.rs"}]}