{"sha": "a48f95879d4a6a62176ad37910782ede9f24f30f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0OGY5NTg3OWQ0YTZhNjIxNzZhZDM3OTEwNzgyZWRlOWYyNGYzMGY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-02-25T06:11:01Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-02-25T06:11:01Z"}, "message": "Rollup merge of #31362 - jseyfried:fix_extern_crate_visibility, r=nikomatsakis\n\nThis PR changes the visibility of extern crate declarations to match that of items (fixes #26775).\nTo avoid breakage, the PR makes it a `public_in_private` lint to reexport a private extern crate, and it adds the lint `inaccessible_extern_crate` for uses of an inaccessible extern crate.\n\nThe lints can be avoided by making the appropriate `extern crate` declaration public.", "tree": {"sha": "cdb69410cf6c77f1e25f256c4bb98aa361f8d7ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cdb69410cf6c77f1e25f256c4bb98aa361f8d7ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a48f95879d4a6a62176ad37910782ede9f24f30f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a48f95879d4a6a62176ad37910782ede9f24f30f", "html_url": "https://github.com/rust-lang/rust/commit/a48f95879d4a6a62176ad37910782ede9f24f30f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a48f95879d4a6a62176ad37910782ede9f24f30f/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6f050d09003a4c7895f44fed3a7c6cdce8f2949", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6f050d09003a4c7895f44fed3a7c6cdce8f2949", "html_url": "https://github.com/rust-lang/rust/commit/f6f050d09003a4c7895f44fed3a7c6cdce8f2949"}, {"sha": "7ad7065c35e6ec0881f917e2fea3615f1dfeaed3", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ad7065c35e6ec0881f917e2fea3615f1dfeaed3", "html_url": "https://github.com/rust-lang/rust/commit/7ad7065c35e6ec0881f917e2fea3615f1dfeaed3"}], "stats": {"total": 212, "additions": 140, "deletions": 72}, "files": [{"sha": "bd256d19b6725653a302f979089fbc389c62d620", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a48f95879d4a6a62176ad37910782ede9f24f30f/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a48f95879d4a6a62176ad37910782ede9f24f30f/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=a48f95879d4a6a62176ad37910782ede9f24f30f", "patch": "@@ -51,7 +51,7 @@ extern crate getopts;\n extern crate graphviz;\n extern crate libc;\n extern crate rbml;\n-extern crate rustc_llvm;\n+pub extern crate rustc_llvm as llvm;\n extern crate rustc_back;\n extern crate rustc_front;\n extern crate rustc_data_structures;\n@@ -66,8 +66,6 @@ extern crate serialize as rustc_serialize; // used by deriving\n #[cfg(test)]\n extern crate test;\n \n-pub use rustc_llvm as llvm;\n-\n #[macro_use]\n mod macros;\n "}, {"sha": "4bb69a2688a41ded0c12a090929b61d422f093e5", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a48f95879d4a6a62176ad37910782ede9f24f30f/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a48f95879d4a6a62176ad37910782ede9f24f30f/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=a48f95879d4a6a62176ad37910782ede9f24f30f", "patch": "@@ -124,6 +124,12 @@ declare_lint! {\n     \"detect private items in public interfaces not caught by the old implementation\"\n }\n \n+declare_lint! {\n+    pub INACCESSIBLE_EXTERN_CRATE,\n+    Warn,\n+    \"use of inaccessible extern crate erroneously allowed\"\n+}\n+\n declare_lint! {\n     pub INVALID_TYPE_PARAM_DEFAULT,\n     Warn,\n@@ -167,6 +173,7 @@ impl LintPass for HardwiredLints {\n             TRIVIAL_CASTS,\n             TRIVIAL_NUMERIC_CASTS,\n             PRIVATE_IN_PUBLIC,\n+            INACCESSIBLE_EXTERN_CRATE,\n             INVALID_TYPE_PARAM_DEFAULT,\n             MATCH_OF_UNIT_VARIANT_VIA_PAREN_DOTDOT,\n             CONST_ERR,"}, {"sha": "1cf0339c086e5137269a141fe784d630e033f1b9", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a48f95879d4a6a62176ad37910782ede9f24f30f/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a48f95879d4a6a62176ad37910782ede9f24f30f/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=a48f95879d4a6a62176ad37910782ede9f24f30f", "patch": "@@ -158,6 +158,10 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n             id: LintId::of(PRIVATE_IN_PUBLIC),\n             reference: \"the explanation for E0446 (`--explain E0446`)\",\n         },\n+        FutureIncompatibleInfo {\n+            id: LintId::of(INACCESSIBLE_EXTERN_CRATE),\n+            reference: \"PR 31362 <https://github.com/rust-lang/rust/pull/31362>\",\n+        },\n         FutureIncompatibleInfo {\n             id: LintId::of(INVALID_TYPE_PARAM_DEFAULT),\n             reference: \"PR 30742 <https://github.com/rust-lang/rust/pull/30724>\","}, {"sha": "8908dac7a36dd72c9cd355cd6e94e3da09c9a13a", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a48f95879d4a6a62176ad37910782ede9f24f30f/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a48f95879d4a6a62176ad37910782ede9f24f30f/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=a48f95879d4a6a62176ad37910782ede9f24f30f", "patch": "@@ -743,6 +743,7 @@ impl<'a, 'tcx> PrivacyVisitor<'a, 'tcx> {\n                      source_did: Option<DefId>,\n                      msg: &str)\n                      -> CheckResult {\n+        use rustc_front::hir::Item_::ItemExternCrate;\n         debug!(\"ensure_public(span={:?}, to_check={:?}, source_did={:?}, msg={:?})\",\n                span, to_check, source_did, msg);\n         let def_privacy = self.def_privacy(to_check);\n@@ -763,6 +764,21 @@ impl<'a, 'tcx> PrivacyVisitor<'a, 'tcx> {\n         // be local.)\n         let def_id = source_did.unwrap_or(to_check);\n         let node_id = self.tcx.map.as_local_node_id(def_id);\n+\n+        // Warn when using a inaccessible extern crate.\n+        if let Some(node_id) = self.tcx.map.as_local_node_id(to_check) {\n+            match self.tcx.map.get(node_id) {\n+                ast_map::Node::NodeItem(&hir::Item { node: ItemExternCrate(_), name, .. }) => {\n+                    self.tcx.sess.add_lint(lint::builtin::INACCESSIBLE_EXTERN_CRATE,\n+                                           node_id,\n+                                           span,\n+                                           format!(\"extern crate `{}` is private\", name));\n+                    return None;\n+                }\n+                _ => {}\n+            }\n+        }\n+\n         let (err_span, err_msg) = if Some(id) == node_id {\n             return Some((span, format!(\"{} is private\", msg), None));\n         } else {"}, {"sha": "385fae46cbae8672a5dc3101736df813a50f88b6", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a48f95879d4a6a62176ad37910782ede9f24f30f/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a48f95879d4a6a62176ad37910782ede9f24f30f/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=a48f95879d4a6a62176ad37910782ede9f24f30f", "patch": "@@ -293,9 +293,19 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                     self.external_exports.insert(def_id);\n                     let parent_link = ModuleParentLink(parent, name);\n                     let def = Def::Mod(def_id);\n-                    let external_module = self.new_extern_crate_module(parent_link, def);\n+                    let local_def_id = self.ast_map.local_def_id(item.id);\n+                    let external_module =\n+                        self.new_extern_crate_module(parent_link, def, is_public, local_def_id);\n                     self.define(parent, name, TypeNS, (external_module, sp));\n \n+                    if is_public {\n+                        let export = Export { name: name, def_id: def_id };\n+                        if let Some(def_id) = parent.def_id() {\n+                            let node_id = self.resolver.ast_map.as_local_node_id(def_id).unwrap();\n+                            self.export_map.entry(node_id).or_insert(Vec::new()).push(export);\n+                        }\n+                    }\n+\n                     self.build_reduced_graph_for_external_crate(external_module);\n                 }\n                 parent"}, {"sha": "3e2837f023ddb1200ea4dd8c72ed0a5dc313b6d3", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 37, "deletions": 10, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/a48f95879d4a6a62176ad37910782ede9f24f30f/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a48f95879d4a6a62176ad37910782ede9f24f30f/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=a48f95879d4a6a62176ad37910782ede9f24f30f", "patch": "@@ -806,7 +806,10 @@ pub struct ModuleS<'a> {\n     parent_link: ParentLink<'a>,\n     def: Option<Def>,\n     is_public: bool,\n-    is_extern_crate: bool,\n+\n+    // If the module is an extern crate, `def` is root of the external crate and `extern_crate_did`\n+    // is the DefId of the local `extern crate` item (otherwise, `extern_crate_did` is None).\n+    extern_crate_did: Option<DefId>,\n \n     resolutions: RefCell<HashMap<(Name, Namespace), NameResolution<'a>>>,\n     unresolved_imports: RefCell<Vec<ImportDirective>>,\n@@ -853,7 +856,7 @@ impl<'a> ModuleS<'a> {\n             parent_link: parent_link,\n             def: def,\n             is_public: is_public,\n-            is_extern_crate: false,\n+            extern_crate_did: None,\n             resolutions: RefCell::new(HashMap::new()),\n             unresolved_imports: RefCell::new(Vec::new()),\n             module_children: RefCell::new(NodeMap()),\n@@ -917,6 +920,16 @@ impl<'a> ModuleS<'a> {\n         self.def.as_ref().map(Def::def_id)\n     }\n \n+    // This returns the DefId of the crate local item that controls this module's visibility.\n+    // It is only used to compute `LastPrivate` data, and it differs from `def_id` only for extern\n+    // crates, whose `def_id` is the external crate's root, not the local `extern crate` item.\n+    fn local_def_id(&self) -> Option<DefId> {\n+        match self.extern_crate_did {\n+            Some(def_id) => Some(def_id),\n+            None => self.def_id(),\n+        }\n+    }\n+\n     fn is_normal(&self) -> bool {\n         match self.def {\n             Some(Def::Mod(_)) | Some(Def::ForeignMod(_)) => true,\n@@ -1027,6 +1040,14 @@ impl<'a> NameBinding<'a> {\n         }\n     }\n \n+    fn local_def_id(&self) -> Option<DefId> {\n+        match self.kind {\n+            NameBindingKind::Def(def) => Some(def.def_id()),\n+            NameBindingKind::Module(ref module) => module.local_def_id(),\n+            NameBindingKind::Import { binding, .. } => binding.local_def_id(),\n+        }\n+    }\n+\n     fn defined_with(&self, modifiers: DefModifiers) -> bool {\n         self.modifiers.contains(modifiers)\n     }\n@@ -1038,11 +1059,12 @@ impl<'a> NameBinding<'a> {\n     fn def_and_lp(&self) -> (Def, LastPrivate) {\n         let def = self.def().unwrap();\n         if let Def::Err = def { return (def, LastMod(AllPublic)) }\n-        (def, LastMod(if self.is_public() { AllPublic } else { DependsOn(def.def_id()) }))\n+        let lp = if self.is_public() { AllPublic } else { DependsOn(self.local_def_id().unwrap()) };\n+        (def, LastMod(lp))\n     }\n \n     fn is_extern_crate(&self) -> bool {\n-        self.module().map(|module| module.is_extern_crate).unwrap_or(false)\n+        self.module().and_then(|module| module.extern_crate_did).is_some()\n     }\n \n     fn is_import(&self) -> bool {\n@@ -1236,9 +1258,14 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         self.arenas.name_bindings.alloc(name_binding)\n     }\n \n-    fn new_extern_crate_module(&self, parent_link: ParentLink<'a>, def: Def) -> Module<'a> {\n-        let mut module = ModuleS::new(parent_link, Some(def), false, true);\n-        module.is_extern_crate = true;\n+    fn new_extern_crate_module(&self,\n+                               parent_link: ParentLink<'a>,\n+                               def: Def,\n+                               is_public: bool,\n+                               local_def: DefId)\n+                               -> Module<'a> {\n+        let mut module = ModuleS::new(parent_link, Some(def), false, is_public);\n+        module.extern_crate_did = Some(local_def);\n         self.arenas.modules.alloc(module)\n     }\n \n@@ -1357,7 +1384,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                         // Keep track of the closest private module used\n                         // when resolving this import chain.\n                         if !binding.is_public() {\n-                            if let Some(did) = search_module.def_id() {\n+                            if let Some(did) = search_module.local_def_id() {\n                                 closest_private = LastMod(DependsOn(did));\n                             }\n                         }\n@@ -1462,7 +1489,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             Success(PrefixFound(ref containing_module, index)) => {\n                 search_module = containing_module;\n                 start_index = index;\n-                last_private = LastMod(DependsOn(containing_module.def_id()\n+                last_private = LastMod(DependsOn(containing_module.local_def_id()\n                                                                   .unwrap()));\n             }\n         }\n@@ -3571,7 +3598,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n \n                     if !in_module_is_extern || name_binding.is_public() {\n                         // add the module to the lookup\n-                        let is_extern = in_module_is_extern || module.is_extern_crate;\n+                        let is_extern = in_module_is_extern || name_binding.is_extern_crate();\n                         worklist.push((module, path_segments, is_extern));\n                     }\n                 }"}, {"sha": "c068ff258b0e7b9c783c253aee887bcce4f1d1b4", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a48f95879d4a6a62176ad37910782ede9f24f30f/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a48f95879d4a6a62176ad37910782ede9f24f30f/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=a48f95879d4a6a62176ad37910782ede9f24f30f", "patch": "@@ -394,7 +394,7 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n                                            directive.is_public &&\n                                            !name_binding.is_public() => {\n                 let msg = format!(\"`{}` is private, and cannot be reexported\", source);\n-                let note_msg = format!(\"Consider marking `{}` as `pub` in the imported module\",\n+                let note_msg = format!(\"consider marking `{}` as `pub` in the imported module\",\n                                         source);\n                 struct_span_err!(self.resolver.session, directive.span, E0364, \"{}\", &msg)\n                     .span_note(directive.span, &note_msg)\n@@ -403,12 +403,22 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n \n             (_, &Success(name_binding)) if !name_binding.is_import() && directive.is_public => {\n                 if !name_binding.is_public() {\n-                    let msg = format!(\"`{}` is private, and cannot be reexported\", source);\n-                    let note_msg =\n-                        format!(\"Consider declaring type or module `{}` with `pub`\", source);\n-                    struct_span_err!(self.resolver.session, directive.span, E0365, \"{}\", &msg)\n-                        .span_note(directive.span, &note_msg)\n-                        .emit();\n+                    if name_binding.is_extern_crate() {\n+                        let msg = format!(\"extern crate `{}` is private, and cannot be reexported \\\n+                                           (error E0364), consider declaring with `pub`\",\n+                                           source);\n+                        self.resolver.session.add_lint(lint::builtin::PRIVATE_IN_PUBLIC,\n+                                                       directive.id,\n+                                                       directive.span,\n+                                                       msg);\n+                    } else {\n+                        let msg = format!(\"`{}` is private, and cannot be reexported\", source);\n+                        let note_msg =\n+                            format!(\"consider declaring type or module `{}` with `pub`\", source);\n+                        struct_span_err!(self.resolver.session, directive.span, E0365, \"{}\", &msg)\n+                            .span_note(directive.span, &note_msg)\n+                            .emit();\n+                    }\n                 } else if name_binding.defined_with(DefModifiers::PRIVATE_VARIANT) {\n                     let msg = format!(\"variant `{}` is private, and cannot be reexported \\\n                                        (error E0364), consider declaring its enum as `pub`\",\n@@ -441,9 +451,9 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n         module_.decrement_outstanding_references_for(target, TypeNS);\n \n         let def_and_priv = |binding: &NameBinding| {\n-            let def = binding.def().unwrap();\n-            let last_private = if binding.is_public() { lp } else { DependsOn(def.def_id()) };\n-            (def, last_private)\n+            let last_private =\n+                if binding.is_public() { lp } else { DependsOn(binding.local_def_id().unwrap()) };\n+            (binding.def().unwrap(), last_private)\n         };\n         let value_def_and_priv = value_result.success().map(&def_and_priv);\n         let type_def_and_priv = type_result.success().map(&def_and_priv);\n@@ -493,7 +503,6 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n         build_reduced_graph::populate_module_if_necessary(self.resolver, target_module);\n         target_module.for_each_child(|name, ns, binding| {\n             if !binding.defined_with(DefModifiers::IMPORTABLE | DefModifiers::PUBLIC) { return }\n-            if binding.is_extern_crate() { return }\n             self.define(module_, name, ns, directive.import(binding));\n \n             if ns == TypeNS && directive.is_public &&"}, {"sha": "6f596b15b9214fd29b4832f76314021760aa6b54", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a48f95879d4a6a62176ad37910782ede9f24f30f/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a48f95879d4a6a62176ad37910782ede9f24f30f/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=a48f95879d4a6a62176ad37910782ede9f24f30f", "patch": "@@ -46,7 +46,7 @@ extern crate rustc;\n extern crate rustc_back;\n extern crate rustc_data_structures;\n extern crate rustc_front;\n-extern crate rustc_llvm as llvm;\n+pub extern crate rustc_llvm as llvm;\n extern crate rustc_mir;\n extern crate rustc_platform_intrinsics as intrinsics;\n extern crate serialize;"}, {"sha": "16c369674f0a2e2bf90f8f80952135480fff1328", "filename": "src/libstd/sys/unix/net.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a48f95879d4a6a62176ad37910782ede9f24f30f/src%2Flibstd%2Fsys%2Funix%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a48f95879d4a6a62176ad37910782ede9f24f30f/src%2Flibstd%2Fsys%2Funix%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fnet.rs?ref=a48f95879d4a6a62176ad37910782ede9f24f30f", "patch": "@@ -21,7 +21,7 @@ use sys_common::net::{getsockopt, setsockopt};\n use time::Duration;\n \n pub use sys::{cvt, cvt_r};\n-pub use libc as netc;\n+pub extern crate libc as netc;\n \n pub type wrlen_t = size_t;\n "}, {"sha": "b5d29a0d6dbaf11f3e335bd5f7d1f2e3f8baf574", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a48f95879d4a6a62176ad37910782ede9f24f30f/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a48f95879d4a6a62176ad37910782ede9f24f30f/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=a48f95879d4a6a62176ad37910782ede9f24f30f", "patch": "@@ -5487,13 +5487,6 @@ impl<'a> Parser<'a> {\n         try!(self.expect(&token::Semi));\n \n         let last_span = self.last_span;\n-\n-        if visibility == ast::Visibility::Public {\n-            self.span_warn(mk_sp(lo, last_span.hi),\n-                           \"`pub extern crate` does not work as expected and should not be used. \\\n-                            Likely to become an error. Prefer `extern crate` and `pub use`.\");\n-        }\n-\n         Ok(self.mk_item(lo,\n                         last_span.hi,\n                         ident,"}, {"sha": "fd97f210a551419d954808670eafc1509ed0a91e", "filename": "src/test/auxiliary/privacy_reexport.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a48f95879d4a6a62176ad37910782ede9f24f30f/src%2Ftest%2Fauxiliary%2Fprivacy_reexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a48f95879d4a6a62176ad37910782ede9f24f30f/src%2Ftest%2Fauxiliary%2Fprivacy_reexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fprivacy_reexport.rs?ref=a48f95879d4a6a62176ad37910782ede9f24f30f", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+pub extern crate core;\n pub use foo as bar;\n \n pub mod foo {"}, {"sha": "56a41a15ab3c0b63317895c62c3295fd3c884779", "filename": "src/test/compile-fail/extern-crate-visibility.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a48f95879d4a6a62176ad37910782ede9f24f30f/src%2Ftest%2Fcompile-fail%2Fextern-crate-visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a48f95879d4a6a62176ad37910782ede9f24f30f/src%2Ftest%2Fcompile-fail%2Fextern-crate-visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextern-crate-visibility.rs?ref=a48f95879d4a6a62176ad37910782ede9f24f30f", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(rustc_attrs)]\n+#![allow(dead_code)]\n+#![allow(unused_imports)]\n+\n+mod foo {\n+    extern crate core;\n+}\n+\n+// Check that private crates can be used from outside their modules, albeit with warnings\n+use foo::core; //~ WARN extern crate `core` is private\n+//~^ WARN this was previously accepted by the compiler but is being phased out\n+use foo::core::cell; //~ WARN extern crate `core` is private\n+//~^ WARN this was previously accepted by the compiler but is being phased out\n+\n+fn f() {\n+    foo::core::cell::Cell::new(0); //~ WARN extern crate `core` is private\n+    //~^ WARN this was previously accepted by the compiler but is being phased out\n+\n+    use foo::*;\n+    mod core {} // Check that private crates are not glob imported\n+}\n+\n+#[rustc_error]\n+fn main() {} //~ ERROR compilation successful"}, {"sha": "75882c5e9812911d0338cc1e2c7f5d3feaecb027", "filename": "src/test/compile-fail/no-extern-crate-in-glob-import.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f6f050d09003a4c7895f44fed3a7c6cdce8f2949/src%2Ftest%2Fcompile-fail%2Fno-extern-crate-in-glob-import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6f050d09003a4c7895f44fed3a7c6cdce8f2949/src%2Ftest%2Fcompile-fail%2Fno-extern-crate-in-glob-import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-extern-crate-in-glob-import.rs?ref=f6f050d09003a4c7895f44fed3a7c6cdce8f2949", "patch": "@@ -1,22 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Check that extern crate declarations are excluded from glob imports.\n-\n-#![feature(core)]\n-extern crate core;\n-\n-mod T {\n-    pub use super::*;\n-}\n-\n-fn main() {\n-    use T::core; //~ ERROR unresolved import `T::core`\n-}"}, {"sha": "5811d82681e6b80ee0ccb10a2d436931efb39634", "filename": "src/test/compile-fail/private-variant-and-crate-reexport.rs", "status": "renamed", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a48f95879d4a6a62176ad37910782ede9f24f30f/src%2Ftest%2Fcompile-fail%2Fprivate-variant-and-crate-reexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a48f95879d4a6a62176ad37910782ede9f24f30f/src%2Ftest%2Fcompile-fail%2Fprivate-variant-and-crate-reexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-variant-and-crate-reexport.rs?ref=a48f95879d4a6a62176ad37910782ede9f24f30f", "patch": "@@ -11,6 +11,10 @@\n #![feature(rustc_attrs)]\n #![allow(dead_code)]\n \n+extern crate core;\n+pub use core as reexported_core; //~ WARN extern crate `core` is private, and cannot be reexported\n+//~^ WARNING hard error\n+\n mod m1 {\n     pub use ::E::V; //~ WARN variant `V` is private, and cannot be reexported\n     //~^ WARNING hard error", "previous_filename": "src/test/compile-fail/private-variant-reexport.rs"}, {"sha": "de3cc27c49bd265f8eebfd1d2c060035ca0a6fca", "filename": "src/test/compile-fail/warn-pub-extern-crate.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f6f050d09003a4c7895f44fed3a7c6cdce8f2949/src%2Ftest%2Fcompile-fail%2Fwarn-pub-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6f050d09003a4c7895f44fed3a7c6cdce8f2949/src%2Ftest%2Fcompile-fail%2Fwarn-pub-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwarn-pub-extern-crate.rs?ref=f6f050d09003a4c7895f44fed3a7c6cdce8f2949", "patch": "@@ -1,16 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(rustc_attrs)]\n-\n-pub extern crate core; //~WARN `pub extern crate` does not work\n-\n-#[rustc_error]\n-fn main() {} //~ ERROR: compilation successful"}, {"sha": "15c977afe2a6c71d107a581d49a01dfd6bf19de1", "filename": "src/test/run-pass/privacy-reexport.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a48f95879d4a6a62176ad37910782ede9f24f30f/src%2Ftest%2Frun-pass%2Fprivacy-reexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a48f95879d4a6a62176ad37910782ede9f24f30f/src%2Ftest%2Frun-pass%2Fprivacy-reexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fprivacy-reexport.rs?ref=a48f95879d4a6a62176ad37910782ede9f24f30f", "patch": "@@ -15,5 +15,8 @@\n extern crate privacy_reexport;\n \n pub fn main() {\n+    // Check that public extern crates are visible to outside crates\n+    privacy_reexport::core::cell::Cell::new(0);\n+\n     privacy_reexport::bar::frob();\n }"}]}