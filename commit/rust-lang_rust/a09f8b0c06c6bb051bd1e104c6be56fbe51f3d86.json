{"sha": "a09f8b0c06c6bb051bd1e104c6be56fbe51f3d86", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwOWY4YjBjMDZjNmJiMDUxYmQxZTEwNGM2YmU1NmZiZTUxZjNkODY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-31T12:16:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-31T12:16:58Z"}, "message": "Auto merge of #1663 - RalfJung:rustup, r=RalfJung\n\ntest Weak into_raw/from_raw on dangling ptrs", "tree": {"sha": "5fb575c598592c31ca2d1e2efd42890522beac60", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5fb575c598592c31ca2d1e2efd42890522beac60"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a09f8b0c06c6bb051bd1e104c6be56fbe51f3d86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a09f8b0c06c6bb051bd1e104c6be56fbe51f3d86", "html_url": "https://github.com/rust-lang/rust/commit/a09f8b0c06c6bb051bd1e104c6be56fbe51f3d86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a09f8b0c06c6bb051bd1e104c6be56fbe51f3d86/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a723fa91d99ba963e39d234a1ddb03a2ac24b58", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a723fa91d99ba963e39d234a1ddb03a2ac24b58", "html_url": "https://github.com/rust-lang/rust/commit/0a723fa91d99ba963e39d234a1ddb03a2ac24b58"}, {"sha": "82c6c77b9a1288ecc955282c9e0de19b96db5203", "url": "https://api.github.com/repos/rust-lang/rust/commits/82c6c77b9a1288ecc955282c9e0de19b96db5203", "html_url": "https://github.com/rust-lang/rust/commit/82c6c77b9a1288ecc955282c9e0de19b96db5203"}], "stats": {"total": 16, "additions": 13, "deletions": 3}, "files": [{"sha": "1cdca76aa6cbe45f92fb33d490ed48c2ebf33e80", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a09f8b0c06c6bb051bd1e104c6be56fbe51f3d86/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/a09f8b0c06c6bb051bd1e104c6be56fbe51f3d86/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=a09f8b0c06c6bb051bd1e104c6be56fbe51f3d86", "patch": "@@ -1 +1 @@\n-507bff92fadf1f25a830da5065a5a87113345163\n+8b002d5c3489a21db2c16e5af63cf5d234f6972c"}, {"sha": "6885641c02ea0055aa3fc3bc7726ad8f7971187f", "filename": "tests/run-pass/intrinsics.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a09f8b0c06c6bb051bd1e104c6be56fbe51f3d86/tests%2Frun-pass%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09f8b0c06c6bb051bd1e104c6be56fbe51f3d86/tests%2Frun-pass%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fintrinsics.rs?ref=a09f8b0c06c6bb051bd1e104c6be56fbe51f3d86", "patch": "@@ -1,7 +1,8 @@\n #![feature(core_intrinsics, const_raw_ptr_comparison)]\n+#![feature(layout_for_ptr)]\n \n use std::intrinsics;\n-use std::mem::{size_of, size_of_val};\n+use std::mem::{size_of, size_of_val, size_of_val_raw};\n \n struct Bomb;\n \n@@ -19,6 +20,9 @@ fn main() {\n     assert_eq!(size_of_val(&[1, 2, 3] as &[i32]), 12);\n     assert_eq!(size_of_val(\"foobar\"), 6);\n \n+    unsafe { assert_eq!(size_of_val_raw(&[1] as &[i32] as *const [i32]), 4); }\n+    unsafe { assert_eq!(size_of_val_raw(0x100 as *const i32), 4); }\n+\n     assert_eq!(intrinsics::type_name::<Option<i32>>(), \"core::option::Option<i32>\");\n \n     assert_eq!(intrinsics::likely(false), false);"}, {"sha": "91de20ae2b7f3ebce1e14e777cab02da460b6595", "filename": "tests/run-pass/rc.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a09f8b0c06c6bb051bd1e104c6be56fbe51f3d86/tests%2Frun-pass%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09f8b0c06c6bb051bd1e104c6be56fbe51f3d86/tests%2Frun-pass%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Frc.rs?ref=a09f8b0c06c6bb051bd1e104c6be56fbe51f3d86", "patch": "@@ -4,7 +4,7 @@\n \n use std::cell::{Cell, RefCell};\n use std::rc::{Rc, Weak};\n-use std::sync::Arc;\n+use std::sync::{Arc, Weak as ArcWeak};\n use std::fmt::Debug;\n \n fn rc_refcell() {\n@@ -48,6 +48,9 @@ fn arc() {\n         a\n     }\n     assert_eq!(*test(), 42);\n+\n+    let raw = ArcWeak::into_raw(ArcWeak::<usize>::new());\n+    drop(unsafe { ArcWeak::from_raw(raw) });\n }\n \n // Make sure this Rc doesn't fall apart when touched\n@@ -84,6 +87,9 @@ fn weak_into_raw() {\n \n     drop(unsafe { Weak::from_raw(raw) });\n     assert_eq!(0, Rc::weak_count(&strong));\n+\n+    let raw = Weak::into_raw(Weak::<usize>::new());\n+    drop(unsafe { Weak::from_raw(raw) });\n }\n \n /// Taken from the `Weak::from_raw` doctest."}]}