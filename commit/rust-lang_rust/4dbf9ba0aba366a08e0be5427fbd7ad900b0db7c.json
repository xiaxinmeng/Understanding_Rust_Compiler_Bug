{"sha": "4dbf9ba0aba366a08e0be5427fbd7ad900b0db7c", "node_id": "C_kwDOAAsO6NoAKDRkYmY5YmEwYWJhMzY2YTA4ZTBiZTU0MjdmYmQ3YWQ5MDBiMGRiN2M", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-06-27T13:48:54Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-06-27T13:48:54Z"}, "message": "outside of borrowck, do not provide an implicit_region_bound\n\nsee comment added to the field in `VerifyBoundCx`.", "tree": {"sha": "ecfda9ece089fcaebbe470ccf385260671ac5189", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ecfda9ece089fcaebbe470ccf385260671ac5189"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4dbf9ba0aba366a08e0be5427fbd7ad900b0db7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4dbf9ba0aba366a08e0be5427fbd7ad900b0db7c", "html_url": "https://github.com/rust-lang/rust/commit/4dbf9ba0aba366a08e0be5427fbd7ad900b0db7c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4dbf9ba0aba366a08e0be5427fbd7ad900b0db7c/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9cf699d2ff4ff23a6d6862a35727f4d5d3567dae", "url": "https://api.github.com/repos/rust-lang/rust/commits/9cf699d2ff4ff23a6d6862a35727f4d5d3567dae", "html_url": "https://github.com/rust-lang/rust/commit/9cf699d2ff4ff23a6d6862a35727f4d5d3567dae"}], "stats": {"total": 51, "additions": 18, "deletions": 33}, "files": [{"sha": "6f7adc218b2e2e29b8129f13ea4265efd84c1a67", "filename": "compiler/rustc_borrowck/src/type_check/constraint_conversion.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4dbf9ba0aba366a08e0be5427fbd7ad900b0db7c/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fconstraint_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dbf9ba0aba366a08e0be5427fbd7ad900b0db7c/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fconstraint_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fconstraint_conversion.rs?ref=4dbf9ba0aba366a08e0be5427fbd7ad900b0db7c", "patch": "@@ -23,7 +23,7 @@ pub(crate) struct ConstraintConversion<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     universal_regions: &'a UniversalRegions<'tcx>,\n     region_bound_pairs: &'a RegionBoundPairs<'tcx>,\n-    implicit_region_bound: Option<ty::Region<'tcx>>,\n+    implicit_region_bound: ty::Region<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     locations: Locations,\n     span: Span,\n@@ -36,7 +36,7 @@ impl<'a, 'tcx> ConstraintConversion<'a, 'tcx> {\n         infcx: &'a InferCtxt<'a, 'tcx>,\n         universal_regions: &'a UniversalRegions<'tcx>,\n         region_bound_pairs: &'a RegionBoundPairs<'tcx>,\n-        implicit_region_bound: Option<ty::Region<'tcx>>,\n+        implicit_region_bound: ty::Region<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n         locations: Locations,\n         span: Span,\n@@ -120,7 +120,7 @@ impl<'a, 'tcx> ConstraintConversion<'a, 'tcx> {\n                     &mut *self,\n                     tcx,\n                     region_bound_pairs,\n-                    implicit_region_bound,\n+                    Some(implicit_region_bound),\n                     param_env,\n                 )\n                 .type_must_outlive(origin, t1, r2);"}, {"sha": "421ef5be8128705d6b6456240c90e0bbe0b3dfc7", "filename": "compiler/rustc_borrowck/src/type_check/free_region_relations.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4dbf9ba0aba366a08e0be5427fbd7ad900b0db7c/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dbf9ba0aba366a08e0be5427fbd7ad900b0db7c/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs?ref=4dbf9ba0aba366a08e0be5427fbd7ad900b0db7c", "patch": "@@ -61,7 +61,7 @@ pub(crate) struct CreateResult<'tcx> {\n pub(crate) fn create<'tcx>(\n     infcx: &InferCtxt<'_, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n-    implicit_region_bound: Option<ty::Region<'tcx>>,\n+    implicit_region_bound: ty::Region<'tcx>,\n     universal_regions: &Rc<UniversalRegions<'tcx>>,\n     constraints: &mut MirTypeckRegionConstraints<'tcx>,\n ) -> CreateResult<'tcx> {\n@@ -223,7 +223,7 @@ struct UniversalRegionRelationsBuilder<'this, 'tcx> {\n     infcx: &'this InferCtxt<'this, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     universal_regions: Rc<UniversalRegions<'tcx>>,\n-    implicit_region_bound: Option<ty::Region<'tcx>>,\n+    implicit_region_bound: ty::Region<'tcx>,\n     constraints: &'this mut MirTypeckRegionConstraints<'tcx>,\n \n     // outputs:"}, {"sha": "2a6ca5246daa9b57cf778d0afe603a6344bbb87c", "filename": "compiler/rustc_borrowck/src/type_check/input_output.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4dbf9ba0aba366a08e0be5427fbd7ad900b0db7c/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Finput_output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dbf9ba0aba366a08e0be5427fbd7ad900b0db7c/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Finput_output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Finput_output.rs?ref=4dbf9ba0aba366a08e0be5427fbd7ad900b0db7c", "patch": "@@ -230,7 +230,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 self.infcx,\n                 &self.borrowck_context.universal_regions,\n                 &self.region_bound_pairs,\n-                Some(self.implicit_region_bound),\n+                self.implicit_region_bound,\n                 self.param_env,\n                 Locations::All(DUMMY_SP),\n                 DUMMY_SP,"}, {"sha": "542fc6b0f485d439d99baaf6dcd8be4f0a865dbe", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4dbf9ba0aba366a08e0be5427fbd7ad900b0db7c/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dbf9ba0aba366a08e0be5427fbd7ad900b0db7c/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=4dbf9ba0aba366a08e0be5427fbd7ad900b0db7c", "patch": "@@ -157,7 +157,7 @@ pub(crate) fn type_check<'mir, 'tcx>(\n     } = free_region_relations::create(\n         infcx,\n         param_env,\n-        Some(implicit_region_bound),\n+        implicit_region_bound,\n         universal_regions,\n         &mut constraints,\n     );\n@@ -1142,7 +1142,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             self.infcx,\n             self.borrowck_context.universal_regions,\n             self.region_bound_pairs,\n-            Some(self.implicit_region_bound),\n+            self.implicit_region_bound,\n             self.param_env,\n             locations,\n             locations.span(self.body),"}, {"sha": "1c1906f3375af7d0c115b3f36546b31309a7a1b6", "filename": "compiler/rustc_infer/src/infer/outlives/obligations.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4dbf9ba0aba366a08e0be5427fbd7ad900b0db7c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dbf9ba0aba366a08e0be5427fbd7ad900b0db7c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs?ref=4dbf9ba0aba366a08e0be5427fbd7ad900b0db7c", "patch": "@@ -141,17 +141,13 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n     ///   `('a, K)` in this list tells us that the bounds in scope\n     ///   indicate that `K: 'a`, where `K` is either a generic\n     ///   parameter like `T` or a projection like `T::Item`.\n-    /// - `implicit_region_bound`: if some, this is a region bound\n-    ///   that is considered to hold for all type parameters (the\n-    ///   function body).\n     /// - `param_env` is the parameter environment for the enclosing function.\n     /// - `body_id` is the body-id whose region obligations are being\n     ///   processed.\n     #[instrument(level = \"debug\", skip(self, region_bound_pairs_map))]\n     pub fn process_registered_region_obligations(\n         &self,\n         region_bound_pairs_map: &FxHashMap<hir::HirId, RegionBoundPairs<'tcx>>,\n-        implicit_region_bound: Option<ty::Region<'tcx>>,\n         param_env: ty::ParamEnv<'tcx>,\n     ) {\n         assert!(\n@@ -170,13 +166,8 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n             let sup_type = self.resolve_vars_if_possible(sup_type);\n \n             if let Some(region_bound_pairs) = region_bound_pairs_map.get(&body_id) {\n-                let outlives = &mut TypeOutlives::new(\n-                    self,\n-                    self.tcx,\n-                    &region_bound_pairs,\n-                    implicit_region_bound,\n-                    param_env,\n-                );\n+                let outlives =\n+                    &mut TypeOutlives::new(self, self.tcx, &region_bound_pairs, None, param_env);\n                 outlives.type_must_outlive(origin, sup_type, sub_region);\n             } else {\n                 self.tcx.sess.delay_span_bug("}, {"sha": "1ffa070687f45cf7b930bcf79cfcbc570767c6b7", "filename": "compiler/rustc_infer/src/infer/outlives/verify.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4dbf9ba0aba366a08e0be5427fbd7ad900b0db7c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dbf9ba0aba366a08e0be5427fbd7ad900b0db7c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs?ref=4dbf9ba0aba366a08e0be5427fbd7ad900b0db7c", "patch": "@@ -16,6 +16,11 @@ use rustc_middle::ty::{self, EarlyBinder, Ty, TyCtxt};\n pub struct VerifyBoundCx<'cx, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     region_bound_pairs: &'cx RegionBoundPairs<'tcx>,\n+    /// During borrowck, if there are no outlives bounds on a generic\n+    /// parameter `T`, we assume that `T: 'in_fn_body` holds.\n+    ///\n+    /// Outside of borrowck the only way to prove `T: '?0` is by\n+    /// setting  `'?0` to `'empty`.\n     implicit_region_bound: Option<ty::Region<'tcx>>,\n     param_env: ty::ParamEnv<'tcx>,\n }"}, {"sha": "90ff07cba026a595b77a85e369204f95e875014d", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4dbf9ba0aba366a08e0be5427fbd7ad900b0db7c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dbf9ba0aba366a08e0be5427fbd7ad900b0db7c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=4dbf9ba0aba366a08e0be5427fbd7ad900b0db7c", "patch": "@@ -220,7 +220,7 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n                 .map(|&(id, _)| (id, vec![]))\n                 .collect();\n \n-            infcx.process_registered_region_obligations(&body_id_map, None, full_env);\n+            infcx.process_registered_region_obligations(&body_id_map, full_env);\n \n             let region_data = infcx\n                 .inner"}, {"sha": "2b26b916d32899b239496c2999e2c2b4ef679e6c", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4dbf9ba0aba366a08e0be5427fbd7ad900b0db7c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dbf9ba0aba366a08e0be5427fbd7ad900b0db7c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=4dbf9ba0aba366a08e0be5427fbd7ad900b0db7c", "patch": "@@ -407,11 +407,7 @@ fn resolve_negative_obligation<'cx, 'tcx>(\n     // function bodies with closures).\n     outlives_env.save_implied_bounds(CRATE_HIR_ID);\n \n-    infcx.process_registered_region_obligations(\n-        outlives_env.region_bound_pairs_map(),\n-        Some(tcx.lifetimes.re_root_empty),\n-        param_env,\n-    );\n+    infcx.process_registered_region_obligations(outlives_env.region_bound_pairs_map(), param_env);\n \n     let errors = infcx.resolve_regions(region_context, &outlives_env);\n "}, {"sha": "0ce63922098948e4ebc35c519cd216d3c0ef8b38", "filename": "compiler/rustc_typeck/src/check/regionck.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4dbf9ba0aba366a08e0be5427fbd7ad900b0db7c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dbf9ba0aba366a08e0be5427fbd7ad900b0db7c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs?ref=4dbf9ba0aba366a08e0be5427fbd7ad900b0db7c", "patch": "@@ -366,7 +366,6 @@ impl<'a, 'tcx> RegionCtxt<'a, 'tcx> {\n     fn resolve_regions_and_report_errors(&self) {\n         self.infcx.process_registered_region_obligations(\n             self.outlives_environment.region_bound_pairs_map(),\n-            Some(self.tcx.lifetimes.re_root_empty),\n             self.param_env,\n         );\n "}, {"sha": "ae478842c3ab1fb44cae46d3ceaa3f714cc99e31", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4dbf9ba0aba366a08e0be5427fbd7ad900b0db7c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dbf9ba0aba366a08e0be5427fbd7ad900b0db7c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=4dbf9ba0aba366a08e0be5427fbd7ad900b0db7c", "patch": "@@ -596,13 +596,7 @@ fn ty_known_to_outlive<'tcx>(\n ) -> bool {\n     resolve_regions_with_wf_tys(tcx, id, param_env, &wf_tys, |infcx, region_bound_pairs| {\n         let origin = infer::RelateParamBound(DUMMY_SP, ty, None);\n-        let outlives = &mut TypeOutlives::new(\n-            infcx,\n-            tcx,\n-            region_bound_pairs,\n-            Some(infcx.tcx.lifetimes.re_root_empty),\n-            param_env,\n-        );\n+        let outlives = &mut TypeOutlives::new(infcx, tcx, region_bound_pairs, None, param_env);\n         outlives.type_must_outlive(origin, ty, region);\n     })\n }"}]}