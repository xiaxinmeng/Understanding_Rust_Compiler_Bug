{"sha": "2e17933eed97f1b0183aa91dc3a960e2adaf99b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlMTc5MzNlZWQ5N2YxYjAxODNhYTkxZGMzYTk2MGUyYWRhZjk5YjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-24T16:22:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-24T16:22:21Z"}, "message": "Auto merge of #958 - christianpoveda:getcwd-shim, r=oli-obk\n\nAdd getcwd shim", "tree": {"sha": "03560d67bed1ed297c2d06517c662fce192a5524", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03560d67bed1ed297c2d06517c662fce192a5524"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e17933eed97f1b0183aa91dc3a960e2adaf99b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e17933eed97f1b0183aa91dc3a960e2adaf99b4", "html_url": "https://github.com/rust-lang/rust/commit/2e17933eed97f1b0183aa91dc3a960e2adaf99b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e17933eed97f1b0183aa91dc3a960e2adaf99b4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c77a1025b6401abddaacabb95bc5abfd4e6ab26", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c77a1025b6401abddaacabb95bc5abfd4e6ab26", "html_url": "https://github.com/rust-lang/rust/commit/0c77a1025b6401abddaacabb95bc5abfd4e6ab26"}, {"sha": "02261e4be2c5c8d569ac98f6d7c7623c6d26fe47", "url": "https://api.github.com/repos/rust-lang/rust/commits/02261e4be2c5c8d569ac98f6d7c7623c6d26fe47", "html_url": "https://github.com/rust-lang/rust/commit/02261e4be2c5c8d569ac98f6d7c7623c6d26fe47"}], "stats": {"total": 81, "additions": 66, "deletions": 15}, "files": [{"sha": "e2a9452045eafaa1a66b7fe72c1f7eb1ba553707", "filename": "src/shims/env.rs", "status": "modified", "additions": 55, "deletions": 15, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/2e17933eed97f1b0183aa91dc3a960e2adaf99b4/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e17933eed97f1b0183aa91dc3a960e2adaf99b4/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=2e17933eed97f1b0183aa91dc3a960e2adaf99b4", "patch": "@@ -1,9 +1,10 @@\n use std::collections::HashMap;\n+use std::env;\n \n-use rustc::ty::layout::{Size};\n-use rustc_mir::interpret::{Pointer, Memory};\n use crate::stacked_borrows::Tag;\n use crate::*;\n+use rustc::ty::layout::Size;\n+use rustc_mir::interpret::{Memory, Pointer};\n \n #[derive(Default)]\n pub struct EnvVars {\n@@ -21,9 +22,10 @@ impl EnvVars {\n         excluded_env_vars.push(\"TERM\".to_owned());\n \n         if ecx.machine.communicate {\n-            for (name, value) in std::env::vars() {\n+            for (name, value) in env::vars() {\n                 if !excluded_env_vars.contains(&name) {\n-                    let var_ptr = alloc_env_var(name.as_bytes(), value.as_bytes(), ecx.memory_mut());\n+                    let var_ptr =\n+                        alloc_env_var(name.as_bytes(), value.as_bytes(), ecx.memory_mut());\n                     ecx.machine.env_vars.map.insert(name.into_bytes(), var_ptr);\n                 }\n             }\n@@ -45,17 +47,16 @@ fn alloc_env_var<'mir, 'tcx>(\n \n impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n-    fn getenv(\n-        &mut self,\n-        name_op: OpTy<'tcx, Tag>,\n-    ) -> InterpResult<'tcx, Scalar<Tag>> {\n+    fn getenv(&mut self, name_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, Scalar<Tag>> {\n         let this = self.eval_context_mut();\n \n         let name_ptr = this.read_scalar(name_op)?.not_undef()?;\n         let name = this.memory().read_c_str(name_ptr)?;\n         Ok(match this.machine.env_vars.map.get(name) {\n             // The offset is used to strip the \"{name}=\" part of the string.\n-            Some(var_ptr) => Scalar::Ptr(var_ptr.offset(Size::from_bytes(name.len() as u64 + 1), this)?),\n+            Some(var_ptr) => {\n+                Scalar::Ptr(var_ptr.offset(Size::from_bytes(name.len() as u64 + 1), this)?)\n+            }\n             None => Scalar::ptr_null(&*this.tcx),\n         })\n     }\n@@ -80,18 +81,16 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         if let Some((name, value)) = new {\n             let var_ptr = alloc_env_var(&name, &value, this.memory_mut());\n             if let Some(var) = this.machine.env_vars.map.insert(name.to_owned(), var_ptr) {\n-                this.memory_mut().deallocate(var, None, MiriMemoryKind::Env.into())?;\n+                this.memory_mut()\n+                    .deallocate(var, None, MiriMemoryKind::Env.into())?;\n             }\n             Ok(0)\n         } else {\n             Ok(-1)\n         }\n     }\n \n-    fn unsetenv(\n-        &mut self,\n-        name_op: OpTy<'tcx, Tag>,\n-    ) -> InterpResult<'tcx, i32> {\n+    fn unsetenv(&mut self, name_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n         let name_ptr = this.read_scalar(name_op)?.not_undef()?;\n@@ -104,11 +103,52 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         }\n         if let Some(old) = success {\n             if let Some(var) = old {\n-                this.memory_mut().deallocate(var, None, MiriMemoryKind::Env.into())?;\n+                this.memory_mut()\n+                    .deallocate(var, None, MiriMemoryKind::Env.into())?;\n             }\n             Ok(0)\n         } else {\n             Ok(-1)\n         }\n     }\n+\n+    fn getcwd(\n+        &mut self,\n+        buf_op: OpTy<'tcx, Tag>,\n+        size_op: OpTy<'tcx, Tag>,\n+    ) -> InterpResult<'tcx, Scalar<Tag>> {\n+        let this = self.eval_context_mut();\n+\n+        if !this.machine.communicate {\n+            throw_unsup_format!(\"`getcwd` not available when isolation is enabled\")\n+        }\n+\n+        let tcx = &{ this.tcx.tcx };\n+\n+        let buf = this.force_ptr(this.read_scalar(buf_op)?.not_undef()?)?;\n+        let size = this.read_scalar(size_op)?.to_usize(&*this.tcx)?;\n+        // If we cannot get the current directory, we return null\n+        match env::current_dir() {\n+            Ok(cwd) => {\n+                // It is not clear what happens with non-utf8 paths here\n+                let mut bytes = cwd.display().to_string().into_bytes();\n+                // If the buffer is smaller or equal than the path, we return null.\n+                if (bytes.len() as u64) < size {\n+                    // We add a `/0` terminator\n+                    bytes.push(0);\n+                    // This is ok because the buffer is larger than the path with the null terminator.\n+                    this.memory_mut()\n+                        .get_mut(buf.alloc_id)?\n+                        .write_bytes(tcx, buf, &bytes)?;\n+                    return Ok(Scalar::Ptr(buf));\n+                }\n+                this.machine.last_error = this\n+                    .eval_path_scalar(&[\"libc\", \"ERANGE\"])?\n+                    .unwrap()\n+                    .to_u32()?;\n+            }\n+            Err(e) => this.machine.last_error = e.raw_os_error().unwrap() as u32,\n+        }\n+        Ok(Scalar::ptr_null(&*this.tcx))\n+    }\n }"}, {"sha": "45f167bea582dde2804401b1ea5db190eb7ea58e", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2e17933eed97f1b0183aa91dc3a960e2adaf99b4/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e17933eed97f1b0183aa91dc3a960e2adaf99b4/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=2e17933eed97f1b0183aa91dc3a960e2adaf99b4", "patch": "@@ -436,6 +436,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n             }\n \n+            \"getcwd\" => {\n+                let result = this.getcwd(args[0], args[1])?;\n+                this.write_scalar(result, dest)?;\n+            }\n+\n             \"write\" => {\n                 let fd = this.read_scalar(args[0])?.to_i32()?;\n                 let buf = this.read_scalar(args[1])?.not_undef()?;"}, {"sha": "45efd06d3f670000d4cd1a4607208cc7400c011d", "filename": "tests/run-pass/get_current_dir.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2e17933eed97f1b0183aa91dc3a960e2adaf99b4/tests%2Frun-pass%2Fget_current_dir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e17933eed97f1b0183aa91dc3a960e2adaf99b4/tests%2Frun-pass%2Fget_current_dir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fget_current_dir.rs?ref=2e17933eed97f1b0183aa91dc3a960e2adaf99b4", "patch": "@@ -0,0 +1,6 @@\n+// ignore-windows: TODO the windows hook is not done yet\n+// compile-flags: -Zmiri-disable-isolation\n+\n+fn main() {\n+    std::env::current_dir().unwrap();\n+}"}]}