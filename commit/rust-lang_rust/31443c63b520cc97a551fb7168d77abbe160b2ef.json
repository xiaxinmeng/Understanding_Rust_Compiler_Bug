{"sha": "31443c63b520cc97a551fb7168d77abbe160b2ef", "node_id": "C_kwDOAAsO6NoAKDMxNDQzYzYzYjUyMGNjOTdhNTUxZmI3MTY4ZDc3YWJiZTE2MGIyZWY", "commit": {"author": {"name": "Lukas Markeffsky", "email": "@", "date": "2023-01-15T16:49:34Z"}, "committer": {"name": "Lukas Markeffsky", "email": "@", "date": "2023-01-20T19:16:37Z"}, "message": "preserve delim spans during `macro_rules!` expansion if able", "tree": {"sha": "bef2e699e835f563d95c6d17b91cc0a5bac2812d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bef2e699e835f563d95c6d17b91cc0a5bac2812d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31443c63b520cc97a551fb7168d77abbe160b2ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31443c63b520cc97a551fb7168d77abbe160b2ef", "html_url": "https://github.com/rust-lang/rust/commit/31443c63b520cc97a551fb7168d77abbe160b2ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31443c63b520cc97a551fb7168d77abbe160b2ef/comments", "author": null, "committer": null, "parents": [{"sha": "b9e8286c85aa83fd7ff36603d394082024887dc9", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9e8286c85aa83fd7ff36603d394082024887dc9", "html_url": "https://github.com/rust-lang/rust/commit/b9e8286c85aa83fd7ff36603d394082024887dc9"}], "stats": {"total": 53, "additions": 30, "deletions": 23}, "files": [{"sha": "cd431f5701958e529531504fc9f9574915b7cf4b", "filename": "compiler/rustc_expand/src/mbe/macro_rules.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/31443c63b520cc97a551fb7168d77abbe160b2ef/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31443c63b520cc97a551fb7168d77abbe160b2ef/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs?ref=31443c63b520cc97a551fb7168d77abbe160b2ef", "patch": "@@ -10,7 +10,7 @@ use crate::mbe::transcribe::transcribe;\n \n use rustc_ast as ast;\n use rustc_ast::token::{self, Delimiter, NonterminalKind, Token, TokenKind, TokenKind::*};\n-use rustc_ast::tokenstream::{DelimSpan, TokenStream};\n+use rustc_ast::tokenstream::{DelimSpan, TokenStream, TokenTree};\n use rustc_ast::{NodeId, DUMMY_NODE_ID};\n use rustc_ast_pretty::pprust;\n use rustc_attr::{self as attr, TransparencyError};\n@@ -212,7 +212,6 @@ fn expand_macro<'cx>(\n             };\n             let arm_span = rhses[i].span();\n \n-            let rhs_spans = rhs.tts.iter().map(|t| t.span()).collect::<Vec<_>>();\n             // rhs has holes ( `$id` and `$(...)` that need filled)\n             let mut tts = match transcribe(cx, &named_matches, &rhs, rhs_span, transparency) {\n                 Ok(tts) => tts,\n@@ -224,12 +223,25 @@ fn expand_macro<'cx>(\n \n             // Replace all the tokens for the corresponding positions in the macro, to maintain\n             // proper positions in error reporting, while maintaining the macro_backtrace.\n-            if rhs_spans.len() == tts.len() {\n+            if tts.len() == rhs.tts.len() {\n                 tts = tts.map_enumerated(|i, tt| {\n                     let mut tt = tt.clone();\n-                    let mut sp = rhs_spans[i];\n-                    sp = sp.with_ctxt(tt.span().ctxt());\n-                    tt.set_span(sp);\n+                    let rhs_tt = &rhs.tts[i];\n+                    let ctxt = tt.span().ctxt();\n+                    match (&mut tt, rhs_tt) {\n+                        // preserve the delim spans if able\n+                        (\n+                            TokenTree::Delimited(target_sp, ..),\n+                            mbe::TokenTree::Delimited(source_sp, ..),\n+                        ) => {\n+                            target_sp.open = source_sp.open.with_ctxt(ctxt);\n+                            target_sp.close = source_sp.close.with_ctxt(ctxt);\n+                        }\n+                        _ => {\n+                            let sp = rhs_tt.span().with_ctxt(ctxt);\n+                            tt.set_span(sp);\n+                        }\n+                    }\n                     tt\n                 });\n             }"}, {"sha": "cc629fd920fab89d85bebac8a9b52cfff6afba05", "filename": "tests/ui/const-generics/min_const_generics/macro-fail.stderr", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/31443c63b520cc97a551fb7168d77abbe160b2ef/tests%2Fui%2Fconst-generics%2Fmin_const_generics%2Fmacro-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31443c63b520cc97a551fb7168d77abbe160b2ef/tests%2Fui%2Fconst-generics%2Fmin_const_generics%2Fmacro-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fmin_const_generics%2Fmacro-fail.stderr?ref=31443c63b520cc97a551fb7168d77abbe160b2ef", "patch": "@@ -8,7 +8,7 @@ LL | fn make_marker() -> impl Marker<gimme_a_const!(marker)> {\n    |                                 in this macro invocation\n ...\n LL |       ($rusty: ident) => {{ let $rusty = 3; *&$rusty }}\n-   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected type\n+   |                           ^ expected type\n    |\n    = note: this error originates in the macro `gimme_a_const` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n@@ -22,26 +22,21 @@ LL |   Example::<gimme_a_const!(marker)>\n    |             in this macro invocation\n ...\n LL |       ($rusty: ident) => {{ let $rusty = 3; *&$rusty }}\n-   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected type\n+   |                           ^ expected type\n    |\n    = note: this error originates in the macro `gimme_a_const` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: expected type, found `{`\n   --> $DIR/macro-fail.rs:4:10\n    |\n-LL |     () => {{\n-   |  __________^\n-LL | |\n-LL | |     const X: usize = 1337;\n-LL | |     X\n-LL | |   }}\n-   | |___^ expected type\n+LL |   () => {{\n+   |          ^ expected type\n ...\n-LL |     let _fail = Example::<external_macro!()>;\n-   |                           -----------------\n-   |                           |\n-   |                           this macro call doesn't expand to a type\n-   |                           in this macro invocation\n+LL |   let _fail = Example::<external_macro!()>;\n+   |                         -----------------\n+   |                         |\n+   |                         this macro call doesn't expand to a type\n+   |                         in this macro invocation\n    |\n    = note: this error originates in the macro `external_macro` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "a6a5b1393daecc8e0c7298541f5c5966bb181db8", "filename": "tests/ui/imports/import-prefix-macro-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31443c63b520cc97a551fb7168d77abbe160b2ef/tests%2Fui%2Fimports%2Fimport-prefix-macro-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31443c63b520cc97a551fb7168d77abbe160b2ef/tests%2Fui%2Fimports%2Fimport-prefix-macro-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimports%2Fimport-prefix-macro-1.stderr?ref=31443c63b520cc97a551fb7168d77abbe160b2ef", "patch": "@@ -2,7 +2,7 @@ error: expected one of `::`, `;`, or `as`, found `{`\n   --> $DIR/import-prefix-macro-1.rs:11:27\n    |\n LL |     ($p: path) => (use $p {S, Z});\n-   |                           ^^^^^^ expected one of `::`, `;`, or `as`\n+   |                           ^ expected one of `::`, `;`, or `as`\n ...\n LL | import! { a::b::c }\n    | ------------------- in this macro invocation"}, {"sha": "de02ea85b27b7c23337c3bad8fe2a3e44290ed5d", "filename": "tests/ui/parser/issues/issue-44406.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31443c63b520cc97a551fb7168d77abbe160b2ef/tests%2Fui%2Fparser%2Fissues%2Fissue-44406.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31443c63b520cc97a551fb7168d77abbe160b2ef/tests%2Fui%2Fparser%2Fissues%2Fissue-44406.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissues%2Fissue-44406.stderr?ref=31443c63b520cc97a551fb7168d77abbe160b2ef", "patch": "@@ -21,8 +21,8 @@ LL |     foo!(true);\n    = note: this error originates in the macro `foo` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: if `bar` is a struct, use braces as delimiters\n    |\n-LL |         bar {  }\n-   |             ~\n+LL |         bar { baz: $rest }\n+   |             ~            ~\n help: if `bar` is a function, use the arguments directly\n    |\n LL -         bar(baz: $rest)"}]}