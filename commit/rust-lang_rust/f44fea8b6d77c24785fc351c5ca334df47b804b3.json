{"sha": "f44fea8b6d77c24785fc351c5ca334df47b804b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0NGZlYThiNmQ3N2MyNDc4NWZjMzUxYzVjYTMzNGRmNDdiODA0YjM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-03T23:52:54Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-03T23:53:36Z"}, "message": "rustc: Teach trans_tag_variant() about generic tags", "tree": {"sha": "ab6222da4e24208c97a1dcf67760478c1b66cb88", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab6222da4e24208c97a1dcf67760478c1b66cb88"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f44fea8b6d77c24785fc351c5ca334df47b804b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f44fea8b6d77c24785fc351c5ca334df47b804b3", "html_url": "https://github.com/rust-lang/rust/commit/f44fea8b6d77c24785fc351c5ca334df47b804b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f44fea8b6d77c24785fc351c5ca334df47b804b3/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c7db0cde15adfda5b43112ee86d4bfe3bd9ee82", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c7db0cde15adfda5b43112ee86d4bfe3bd9ee82", "html_url": "https://github.com/rust-lang/rust/commit/5c7db0cde15adfda5b43112ee86d4bfe3bd9ee82"}], "stats": {"total": 46, "additions": 35, "deletions": 11}, "files": [{"sha": "e85bcbbc68e957740cbd38dc4c688fe795521ee8", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 35, "deletions": 11, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/f44fea8b6d77c24785fc351c5ca334df47b804b3/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f44fea8b6d77c24785fc351c5ca334df47b804b3/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=f44fea8b6d77c24785fc351c5ca334df47b804b3", "patch": "@@ -397,6 +397,16 @@ fn T_opaque_closure_ptr(type_names tn) -> TypeRef {\n     ret t;\n }\n \n+fn T_opaque_tag_ptr(type_names tn) -> TypeRef {\n+    auto s = \"*tag\";\n+    if (tn.name_has_type(s)) {\n+        ret tn.get_type(s);\n+    }\n+    auto t = T_ptr(T_struct(vec(T_int(), T_i8())));\n+    tn.associate(s, t);\n+    ret t;\n+}\n+\n fn T_captured_tydescs(type_names tn, uint n) -> TypeRef {\n     ret T_struct(_vec.init_elt[TypeRef](T_ptr(T_tydesc(tn)), n));\n }\n@@ -4576,27 +4586,41 @@ fn trans_tag_variant(@crate_ctxt cx, ast.def_id tag_id,\n     auto arg_tys = arg_tys_of_fn(variant.ann);\n     copy_args_to_allocas(bcx, none[TypeRef], fn_args, arg_tys);\n \n-    auto lldiscrimptr = bcx.build.GEP(fcx.llretptr,\n+    // Now synthesize a tuple type for the arguments, so that GEP_tup_like()\n+    // will know what the data part of the variant looks like.\n+    let vec[@ty.t] true_arg_tys = vec();\n+    for (ty.arg a in arg_tys) {\n+        true_arg_tys += vec(a.ty);\n+    }\n+    auto tup_ty = ty.plain_ty(ty.ty_tup(true_arg_tys));\n+\n+    // Cast the tag to a type we can GEP into.\n+    auto lltagptr = bcx.build.PointerCast(fcx.llretptr,\n+                                          T_opaque_tag_ptr(fcx.ccx.tn));\n+\n+    auto lldiscrimptr = bcx.build.GEP(lltagptr,\n                                       vec(C_int(0), C_int(0)));\n     bcx.build.Store(C_int(index), lldiscrimptr);\n \n-    auto llblobptr = bcx.build.GEP(fcx.llretptr,\n+    auto llblobptr = bcx.build.GEP(lltagptr,\n                                    vec(C_int(0), C_int(1)));\n \n-    // First, generate the union type.\n-    let vec[TypeRef] llargtys = vec();\n-    for (ty.arg arg in arg_tys) {\n-        llargtys += vec(type_of(cx, arg.ty));\n+    // Cast the blob pointer to the appropriate type, if we need to (i.e. if\n+    // the blob pointer isn't dynamically sized).\n+    let ValueRef llunionptr;\n+    if (!ty.type_has_dynamic_size(tup_ty)) {\n+        auto llty = type_of(cx, tup_ty);\n+        llunionptr = bcx.build.TruncOrBitCast(llblobptr, T_ptr(llty));\n+    } else {\n+        llunionptr = llblobptr;\n     }\n \n-    auto llunionty = T_struct(llargtys);\n-    auto llunionptr = bcx.build.TruncOrBitCast(llblobptr, T_ptr(llunionty));\n-\n     i = 0u;\n     for (ast.variant_arg va in variant.args) {\n         auto llargval = bcx.build.Load(fcx.llargs.get(va.id));\n-        auto lldestptr = bcx.build.GEP(llunionptr,\n-                                       vec(C_int(0), C_int(i as int)));\n+        auto rslt = GEP_tup_like(bcx, tup_ty, llunionptr, vec(0, i as int));\n+        bcx = rslt.bcx;\n+        auto lldestptr = rslt.val;\n \n         bcx.build.Store(llargval, lldestptr);\n         i += 1u;"}]}