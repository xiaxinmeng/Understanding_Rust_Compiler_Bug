{"sha": "f42697e54b9d0a040011cb04c266d51710e249f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0MjY5N2U1NGI5ZDBhMDQwMDExY2IwNGMyNjZkNTE3MTBlMjQ5ZjE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-20T11:29:25Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-20T11:29:25Z"}, "message": "Support for nested traits", "tree": {"sha": "d2016e6e3ce596e6a4b3e44f4894b5a411c62789", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2016e6e3ce596e6a4b3e44f4894b5a411c62789"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f42697e54b9d0a040011cb04c266d51710e249f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f42697e54b9d0a040011cb04c266d51710e249f1", "html_url": "https://github.com/rust-lang/rust/commit/f42697e54b9d0a040011cb04c266d51710e249f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f42697e54b9d0a040011cb04c266d51710e249f1/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe1b160dcfdeb3f582ccae1440c9580ade0beb39", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe1b160dcfdeb3f582ccae1440c9580ade0beb39", "html_url": "https://github.com/rust-lang/rust/commit/fe1b160dcfdeb3f582ccae1440c9580ade0beb39"}], "stats": {"total": 27, "additions": 18, "deletions": 9}, "files": [{"sha": "35e1f752be06d53312754e72d49be5789a345ea5", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f42697e54b9d0a040011cb04c266d51710e249f1/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f42697e54b9d0a040011cb04c266d51710e249f1/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=f42697e54b9d0a040011cb04c266d51710e249f1", "patch": "@@ -553,7 +553,7 @@ pub struct Trait {\n \n impl Trait {\n     pub fn module(self, db: &impl DefDatabase) -> Module {\n-        Module { id: self.id.lookup(db).container }\n+        Module { id: self.id.lookup(db).container.module(db) }\n     }\n \n     pub fn name(self, db: &impl DefDatabase) -> Name {"}, {"sha": "853e17bae7f6ade304692b872a495f7b146bc997", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f42697e54b9d0a040011cb04c266d51710e249f1/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f42697e54b9d0a040011cb04c266d51710e249f1/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=f42697e54b9d0a040011cb04c266d51710e249f1", "patch": "@@ -26,7 +26,7 @@ use crate::{\n     path::Path,\n     type_ref::{Mutability, TypeRef},\n     ConstLoc, ContainerId, DefWithBodyId, EnumLoc, FunctionLoc, Intern, ModuleDefId, StaticLoc,\n-    StructLoc, TypeAliasLoc, UnionLoc,\n+    StructLoc, TraitLoc, TypeAliasLoc, UnionLoc,\n };\n \n pub(super) fn lower(\n@@ -522,7 +522,14 @@ where\n                     let ast_id = self.expander.ast_id(&def);\n                     UnionLoc { container, ast_id }.intern(self.db).into()\n                 }\n-                _ => continue,\n+                ast::ModuleItem::TraitDef(def) => {\n+                    let ast_id = self.expander.ast_id(&def);\n+                    TraitLoc { container, ast_id }.intern(self.db).into()\n+                }\n+                ast::ModuleItem::ImplBlock(_)\n+                | ast::ModuleItem::UseItem(_)\n+                | ast::ModuleItem::ExternCrateItem(_)\n+                | ast::ModuleItem::Module(_) => continue,\n             };\n             self.body.defs.push(def)\n         }"}, {"sha": "140eccf267c83edb64303fe1fcc56e2fd9109166", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f42697e54b9d0a040011cb04c266d51710e249f1/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f42697e54b9d0a040011cb04c266d51710e249f1/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=f42697e54b9d0a040011cb04c266d51710e249f1", "patch": "@@ -235,7 +235,7 @@ impl_intern_key!(TraitId);\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct TraitLoc {\n-    pub container: ModuleId,\n+    pub container: ContainerId,\n     pub ast_id: AstId<ast::TraitDef>,\n }\n \n@@ -499,7 +499,7 @@ impl HasModule for AssocContainerId {\n         match *self {\n             AssocContainerId::ContainerId(it) => it.module(db),\n             AssocContainerId::ImplId(it) => it.lookup(db).container,\n-            AssocContainerId::TraitId(it) => it.lookup(db).container,\n+            AssocContainerId::TraitId(it) => it.lookup(db).container.module(db),\n         }\n     }\n }\n@@ -548,7 +548,7 @@ impl HasModule for GenericDefId {\n         match self {\n             GenericDefId::FunctionId(it) => it.lookup(db).module(db),\n             GenericDefId::AdtId(it) => it.module(db),\n-            GenericDefId::TraitId(it) => it.lookup(db).container,\n+            GenericDefId::TraitId(it) => it.lookup(db).container.module(db),\n             GenericDefId::TypeAliasId(it) => it.lookup(db).module(db),\n             GenericDefId::ImplId(it) => it.lookup(db).container,\n             GenericDefId::EnumVariantId(it) => it.parent.lookup(db).container.module(db),"}, {"sha": "a1ea130e0865ff6912568370b80c32d3fece3b79", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f42697e54b9d0a040011cb04c266d51710e249f1/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f42697e54b9d0a040011cb04c266d51710e249f1/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=f42697e54b9d0a040011cb04c266d51710e249f1", "patch": "@@ -802,7 +802,7 @@ where\n                 PerNs::values(def.into())\n             }\n             raw::DefKind::Trait(ast_id) => {\n-                let def = TraitLoc { container: module, ast_id: AstId::new(self.file_id, ast_id) }\n+                let def = TraitLoc { container, ast_id: AstId::new(self.file_id, ast_id) }\n                     .intern(self.def_collector.db);\n \n                 PerNs::types(def.into())"}, {"sha": "dd4fa9664a776b1c94939b40498d6b7f00e08a82", "filename": "crates/ra_hir_ty/src/traits/chalk.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f42697e54b9d0a040011cb04c266d51710e249f1/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f42697e54b9d0a040011cb04c266d51710e249f1/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs?ref=f42697e54b9d0a040011cb04c266d51710e249f1", "patch": "@@ -9,7 +9,9 @@ use chalk_ir::{\n };\n use chalk_rust_ir::{AssociatedTyDatum, AssociatedTyValue, ImplDatum, StructDatum, TraitDatum};\n \n-use hir_def::{AssocContainerId, AssocItemId, GenericDefId, ImplId, Lookup, TraitId, TypeAliasId};\n+use hir_def::{\n+    AssocContainerId, AssocItemId, GenericDefId, HasModule, ImplId, Lookup, TraitId, TypeAliasId,\n+};\n use ra_db::{\n     salsa::{InternId, InternKey},\n     CrateId,\n@@ -591,7 +593,7 @@ pub(crate) fn trait_datum_query(\n     let bound_vars = Substs::bound_vars(&generic_params);\n     let flags = chalk_rust_ir::TraitFlags {\n         auto: trait_data.auto,\n-        upstream: trait_.lookup(db).container.krate != krate,\n+        upstream: trait_.lookup(db).container.module(db).krate != krate,\n         non_enumerable: true,\n         coinductive: false, // only relevant for Chalk testing\n         // FIXME set these flags correctly"}]}