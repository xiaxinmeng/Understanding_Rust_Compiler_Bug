{"sha": "86ef38b3b7a24959ca11a29c79cf921ed5986bc9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2ZWYzOGIzYjdhMjQ5NTljYTExYTI5Yzc5Y2Y5MjFlZDU5ODZiYzk=", "commit": {"author": {"name": "Sebastian Geisler", "email": "sebastian@blockstream.io", "date": "2018-11-05T05:23:20Z"}, "committer": {"name": "Sebastian Geisler", "email": "sebastian@blockstream.io", "date": "2018-11-16T06:55:27Z"}, "message": "Rename checked_add_duration to checked_add and make it take the duration by value", "tree": {"sha": "ce43b3722272137604aace188db81bea3dc52eb3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce43b3722272137604aace188db81bea3dc52eb3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86ef38b3b7a24959ca11a29c79cf921ed5986bc9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86ef38b3b7a24959ca11a29c79cf921ed5986bc9", "html_url": "https://github.com/rust-lang/rust/commit/86ef38b3b7a24959ca11a29c79cf921ed5986bc9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86ef38b3b7a24959ca11a29c79cf921ed5986bc9/comments", "author": {"login": "sgeisler", "id": 1876998, "node_id": "MDQ6VXNlcjE4NzY5OTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1876998?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sgeisler", "html_url": "https://github.com/sgeisler", "followers_url": "https://api.github.com/users/sgeisler/followers", "following_url": "https://api.github.com/users/sgeisler/following{/other_user}", "gists_url": "https://api.github.com/users/sgeisler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sgeisler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sgeisler/subscriptions", "organizations_url": "https://api.github.com/users/sgeisler/orgs", "repos_url": "https://api.github.com/users/sgeisler/repos", "events_url": "https://api.github.com/users/sgeisler/events{/privacy}", "received_events_url": "https://api.github.com/users/sgeisler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sgeisler", "id": 1876998, "node_id": "MDQ6VXNlcjE4NzY5OTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1876998?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sgeisler", "html_url": "https://github.com/sgeisler", "followers_url": "https://api.github.com/users/sgeisler/followers", "following_url": "https://api.github.com/users/sgeisler/following{/other_user}", "gists_url": "https://api.github.com/users/sgeisler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sgeisler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sgeisler/subscriptions", "organizations_url": "https://api.github.com/users/sgeisler/orgs", "repos_url": "https://api.github.com/users/sgeisler/repos", "events_url": "https://api.github.com/users/sgeisler/events{/privacy}", "received_events_url": "https://api.github.com/users/sgeisler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d40b7232eaa00ab5c060582011f350725703a1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d40b7232eaa00ab5c060582011f350725703a1e", "html_url": "https://github.com/rust-lang/rust/commit/6d40b7232eaa00ab5c060582011f350725703a1e"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "c905af442de1a18075432281e26b87bbf90a334d", "filename": "src/libstd/time.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/86ef38b3b7a24959ca11a29c79cf921ed5986bc9/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86ef38b3b7a24959ca11a29c79cf921ed5986bc9/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=86ef38b3b7a24959ca11a29c79cf921ed5986bc9", "patch": "@@ -361,9 +361,9 @@ impl SystemTime {\n     /// Returns `Some(t)` where `t` is the time `self + duration` if `t` can be represented as\n     /// `SystemTime` (which means it's inside the bounds of the underlying data structure), `None`\n     /// otherwise.\n-    #[stable(feature = \"time_checked_add\", since = \"1.32.0\")]\n-    pub fn checked_add_duration(&self, duration: &Duration) -> Option<SystemTime> {\n-        self.0.checked_add_duration(duration).map(|t| SystemTime(t))\n+    #[unstable(feature = \"time_checked_add\", issue = \"55940\")]\n+    pub fn checked_add(&self, duration: Duration) -> Option<SystemTime> {\n+        self.0.checked_add_duration(&duration).map(|t| SystemTime(t))\n     }\n }\n \n@@ -571,13 +571,13 @@ mod tests {\n         let max_duration = Duration::from_secs(u64::max_value());\n         // in case `SystemTime` can store `>= UNIX_EPOCH + max_duration`.\n         for _ in 0..2 {\n-            maybe_t = maybe_t.and_then(|t| t.checked_add_duration(&max_duration));\n+            maybe_t = maybe_t.and_then(|t| t.checked_add(max_duration));\n         }\n         assert_eq!(maybe_t, None);\n \n         // checked_add_duration calculates the right time and will work for another year\n         let year = Duration::from_secs(60 * 60 * 24 * 365);\n-        assert_eq!(a + year, a.checked_add_duration(&year).unwrap());\n+        assert_eq!(a + year, a.checked_add(year).unwrap());\n     }\n \n     #[test]"}]}