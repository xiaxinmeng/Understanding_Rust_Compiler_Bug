{"sha": "d2c795932b58d910c179236d1070e04e8cb54faf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyYzc5NTkzMmI1OGQ5MTBjMTc5MjM2ZDEwNzBlMDRlOGNiNTRmYWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-08T15:51:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-08T15:51:49Z"}, "message": "Auto merge of #38837 - eddyb:issue-38074, r=nikomatsakis\n\nAllow projections to be promoted to constants in MIR.\n\nThis employs the `LvalueContext` additions by @pcwalton to properly extend the MIR promotion of temporaries to allow projections (field accesses, indexing and dereferences) on said temporaries.\n\nIt's needed both parity with the old constant qualification logic (for current borrowck) and it fixes #38074.\nThe former is *required for soundness* if we accept the RFC for promoting rvalues to `'static` constants.\nThat is, until we get MIR borrowck and the same source of truth will be used for both checks and codegen.", "tree": {"sha": "b6e09e957bea9b7fb87d1e467903f123e8542148", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6e09e957bea9b7fb87d1e467903f123e8542148"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2c795932b58d910c179236d1070e04e8cb54faf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2c795932b58d910c179236d1070e04e8cb54faf", "html_url": "https://github.com/rust-lang/rust/commit/d2c795932b58d910c179236d1070e04e8cb54faf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2c795932b58d910c179236d1070e04e8cb54faf/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e350c44e0c43d9c7981d502e27cf149287d924cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/e350c44e0c43d9c7981d502e27cf149287d924cb", "html_url": "https://github.com/rust-lang/rust/commit/e350c44e0c43d9c7981d502e27cf149287d924cb"}, {"sha": "8f84e955e006dd9e116f69eaba6efbbcd2e3ca8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f84e955e006dd9e116f69eaba6efbbcd2e3ca8a", "html_url": "https://github.com/rust-lang/rust/commit/8f84e955e006dd9e116f69eaba6efbbcd2e3ca8a"}], "stats": {"total": 53, "additions": 40, "deletions": 13}, "files": [{"sha": "ec678339066bc84d1ed2f3ec291eb8c6760ccd33", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d2c795932b58d910c179236d1070e04e8cb54faf/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2c795932b58d910c179236d1070e04e8cb54faf/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=d2c795932b58d910c179236d1070e04e8cb54faf", "patch": "@@ -97,11 +97,8 @@ impl<'tcx> Visitor<'tcx> for TempCollector<'tcx> {\n             // Ignore drops, if the temp gets promoted,\n             // then it's constant and thus drop is noop.\n             // Storage live ranges are also irrelevant.\n-            match context {\n-                LvalueContext::Drop |\n-                LvalueContext::StorageLive |\n-                LvalueContext::StorageDead => return,\n-                _ => {}\n+            if context.is_drop() || context.is_storage_marker() {\n+                return;\n             }\n \n             let temp = &mut self.temps[index];\n@@ -118,15 +115,17 @@ impl<'tcx> Visitor<'tcx> for TempCollector<'tcx> {\n                     _ => { /* mark as unpromotable below */ }\n                 }\n             } else if let TempState::Defined { ref mut uses, .. } = *temp {\n-                match context {\n-                    LvalueContext::Borrow {..} |\n-                    LvalueContext::Consume |\n-                    LvalueContext::Inspect => {\n-                        *uses += 1;\n-                        return;\n-                    }\n-                    _ => { /* mark as unpromotable below */ }\n+                // We always allow borrows, even mutable ones, as we need\n+                // to promote mutable borrows of some ZSTs e.g. `&mut []`.\n+                let allowed_use = match context {\n+                    LvalueContext::Borrow {..} => true,\n+                    _ => context.is_nonmutating_use()\n+                };\n+                if allowed_use {\n+                    *uses += 1;\n+                    return;\n                 }\n+                /* mark as unpromotable below */\n             }\n             *temp = TempState::Unpromotable;\n         }"}, {"sha": "ff8a14474e57d4246e79731f9f743a405b676b21", "filename": "src/librustc_trans/collector.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d2c795932b58d910c179236d1070e04e8cb54faf/src%2Flibrustc_trans%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2c795932b58d910c179236d1070e04e8cb54faf/src%2Flibrustc_trans%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcollector.rs?ref=d2c795932b58d910c179236d1070e04e8cb54faf", "patch": "@@ -1287,6 +1287,7 @@ fn collect_neighbours<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,\n \n     visitor.visit_mir(&mir);\n     for promoted in &mir.promoted {\n+        visitor.mir = promoted;\n         visitor.visit_mir(promoted);\n     }\n }"}, {"sha": "5c9a63b861663d0fd175703b06ee5cf971f9a177", "filename": "src/test/run-pass/issue-38074.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d2c795932b58d910c179236d1070e04e8cb54faf/src%2Ftest%2Frun-pass%2Fissue-38074.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2c795932b58d910c179236d1070e04e8cb54faf/src%2Ftest%2Frun-pass%2Fissue-38074.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-38074.rs?ref=d2c795932b58d910c179236d1070e04e8cb54faf", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(platform_intrinsics, repr_simd)]\n+\n+extern \"platform-intrinsic\" {\n+    fn simd_shuffle2<T, U>(x: T, y: T, idx: [u32; 2]) -> U;\n+}\n+\n+#[repr(simd)]\n+#[derive(Clone, Copy)]\n+#[allow(non_camel_case_types)]\n+struct u64x2(u64, u64);\n+\n+fn main() {\n+    let a = u64x2(1, 2);\n+    let r: u64x2 = unsafe { simd_shuffle2(a, a, [0-0, 0-0]) };\n+    assert_eq!(r.0, 1);\n+    assert_eq!(r.1, 1);\n+}"}]}