{"sha": "8f044fae36b73ec4593c127ec2a7c28716208591", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmMDQ0ZmFlMzZiNzNlYzQ1OTNjMTI3ZWMyYTdjMjg3MTYyMDg1OTE=", "commit": {"author": {"name": "Jonathan Turner", "email": "jturner@mozilla.com", "date": "2016-07-05T19:24:23Z"}, "committer": {"name": "Jonathan Turner", "email": "jturner@mozilla.com", "date": "2016-07-14T11:57:46Z"}, "message": "Remove BasicEmitter", "tree": {"sha": "926f262cc1c7f8e64d2f9fe858480ea21c7f28b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/926f262cc1c7f8e64d2f9fe858480ea21c7f28b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f044fae36b73ec4593c127ec2a7c28716208591", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f044fae36b73ec4593c127ec2a7c28716208591", "html_url": "https://github.com/rust-lang/rust/commit/8f044fae36b73ec4593c127ec2a7c28716208591", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f044fae36b73ec4593c127ec2a7c28716208591/comments", "author": null, "committer": null, "parents": [{"sha": "3c85f414e922b7bf427493211601c0c7bde3a286", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c85f414e922b7bf427493211601c0c7bde3a286", "html_url": "https://github.com/rust-lang/rust/commit/3c85f414e922b7bf427493211601c0c7bde3a286"}], "stats": {"total": 190, "additions": 101, "deletions": 89}, "files": [{"sha": "3939f5f5880a9e4435883c5ad42e2ccd4f12ea63", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8f044fae36b73ec4593c127ec2a7c28716208591/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f044fae36b73ec4593c127ec2a7c28716208591/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=8f044fae36b73ec4593c127ec2a7c28716208591", "patch": "@@ -22,7 +22,8 @@ use mir::transform as mir_pass;\n \n use syntax::ast::{NodeId, Name};\n use errors::{self, DiagnosticBuilder};\n-use errors::emitter::{Emitter, BasicEmitter, EmitterWriter};\n+use errors::emitter::{Emitter, EmitterWriter};\n+use errors::snippet::FormatMode;\n use syntax::json::JsonEmitter;\n use syntax::feature_gate;\n use syntax::parse;\n@@ -439,7 +440,7 @@ pub fn build_session_with_codemap(sopts: config::Options,\n         config::ErrorOutputType::HumanReadable(color_config) => {\n             Box::new(EmitterWriter::stderr(color_config,\n                                            Some(registry),\n-                                           codemap.clone(),\n+                                           Some(codemap.clone()),\n                                            errors::snippet::FormatMode::EnvironmentSelected))\n         }\n         config::ErrorOutputType::Json => {\n@@ -577,7 +578,10 @@ unsafe fn configure_llvm(sess: &Session) {\n pub fn early_error(output: config::ErrorOutputType, msg: &str) -> ! {\n     let mut emitter: Box<Emitter> = match output {\n         config::ErrorOutputType::HumanReadable(color_config) => {\n-            Box::new(BasicEmitter::stderr(color_config))\n+            Box::new(EmitterWriter::stderr(color_config,\n+                                           None,\n+                                           None,\n+                                           FormatMode::EnvironmentSelected))\n         }\n         config::ErrorOutputType::Json => Box::new(JsonEmitter::basic()),\n     };\n@@ -588,7 +592,10 @@ pub fn early_error(output: config::ErrorOutputType, msg: &str) -> ! {\n pub fn early_warn(output: config::ErrorOutputType, msg: &str) {\n     let mut emitter: Box<Emitter> = match output {\n         config::ErrorOutputType::HumanReadable(color_config) => {\n-            Box::new(BasicEmitter::stderr(color_config))\n+            Box::new(EmitterWriter::stderr(color_config,\n+                                           None,\n+                                           None,\n+                                           FormatMode::EnvironmentSelected))\n         }\n         config::ErrorOutputType::Json => Box::new(JsonEmitter::basic()),\n     };"}, {"sha": "695e9062db334df2fa08152d8348593712747fba", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8f044fae36b73ec4593c127ec2a7c28716208591/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f044fae36b73ec4593c127ec2a7c28716208591/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=8f044fae36b73ec4593c127ec2a7c28716208591", "patch": "@@ -100,6 +100,7 @@ use syntax::feature_gate::{GatedCfg, UnstableFeatures};\n use syntax::parse::{self, PResult};\n use syntax_pos::MultiSpan;\n use errors::emitter::Emitter;\n+use errors::snippet::FormatMode;\n \n #[cfg(test)]\n pub mod test;\n@@ -139,7 +140,10 @@ pub fn run(args: Vec<String>) -> isize {\n                     Some(sess) => sess.fatal(&abort_msg(err_count)),\n                     None => {\n                         let mut emitter =\n-                            errors::emitter::BasicEmitter::stderr(errors::ColorConfig::Auto);\n+                            errors::emitter::EmitterWriter::stderr(errors::ColorConfig::Auto,\n+                                                                   None,\n+                                                                   None,\n+                                                                   FormatMode::EnvironmentSelected);\n                         emitter.emit(&MultiSpan::new(), &abort_msg(err_count), None,\n                             errors::Level::Fatal);\n                         exit_on_err();\n@@ -375,7 +379,10 @@ fn check_cfg(sopts: &config::Options,\n              output: ErrorOutputType) {\n     let mut emitter: Box<Emitter> = match output {\n         config::ErrorOutputType::HumanReadable(color_config) => {\n-            Box::new(errors::emitter::BasicEmitter::stderr(color_config))\n+            Box::new(errors::emitter::EmitterWriter::stderr(color_config,\n+                                                            None,\n+                                                            None,\n+                                                            FormatMode::EnvironmentSelected))\n         }\n         config::ErrorOutputType::Json => Box::new(json::JsonEmitter::basic()),\n     };\n@@ -1046,7 +1053,11 @@ pub fn monitor<F: FnOnce() + Send + 'static>(f: F) {\n      if let Err(value) = thread.unwrap().join() {\n         // Thread panicked without emitting a fatal diagnostic\n         if !value.is::<errors::FatalError>() {\n-            let mut emitter = errors::emitter::BasicEmitter::stderr(errors::ColorConfig::Auto);\n+            let mut emitter =\n+                errors::emitter::EmitterWriter::stderr(errors::ColorConfig::Auto,\n+                                                       None,\n+                                                       None,\n+                                                       FormatMode::EnvironmentSelected);\n \n             // a .span_bug or .bug call has already printed what\n             // it wants to print."}, {"sha": "75c35869e9e9d1ea435610635d74ae0235daa177", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 63, "deletions": 73, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/8f044fae36b73ec4593c127ec2a7c28716208591/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f044fae36b73ec4593c127ec2a7c28716208591/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=8f044fae36b73ec4593c127ec2a7c28716208591", "patch": "@@ -117,42 +117,10 @@ impl ColorConfig {\n     }\n }\n \n-/// A basic emitter for when we don't have access to a codemap or registry. Used\n-/// for reporting very early errors, etc.\n-pub struct BasicEmitter {\n-    dst: Destination,\n-}\n-\n-impl CoreEmitter for BasicEmitter {\n-    fn emit_message(&mut self,\n-                    _rsp: &RenderSpan,\n-                    msg: &str,\n-                    code: Option<&str>,\n-                    lvl: Level,\n-                    _is_header: bool,\n-                    _show_snippet: bool) {\n-        // we ignore the span as we have no access to a codemap at this point\n-        if let Err(e) = print_diagnostic(&mut self.dst, \"\", lvl, msg, code) {\n-            panic!(\"failed to print diagnostics: {:?}\", e);\n-        }\n-    }\n-}\n-\n-impl BasicEmitter {\n-    pub fn stderr(color_config: ColorConfig) -> BasicEmitter {\n-        if color_config.use_color() {\n-            let dst = Destination::from_stderr();\n-            BasicEmitter { dst: dst }\n-        } else {\n-            BasicEmitter { dst: Raw(Box::new(io::stderr())) }\n-        }\n-    }\n-}\n-\n pub struct EmitterWriter {\n     dst: Destination,\n     registry: Option<registry::Registry>,\n-    cm: Rc<CodeMapper>,\n+    cm: Option<Rc<CodeMapper>>,\n \n     /// Is this the first error emitted thus far? If not, we emit a\n     /// `\\n` before the top-level errors.\n@@ -194,7 +162,7 @@ macro_rules! println_maybe_styled {\n impl EmitterWriter {\n     pub fn stderr(color_config: ColorConfig,\n                   registry: Option<registry::Registry>,\n-                  code_map: Rc<CodeMapper>,\n+                  code_map: Option<Rc<CodeMapper>>,\n                   format_mode: FormatMode)\n                   -> EmitterWriter {\n         if color_config.use_color() {\n@@ -215,7 +183,7 @@ impl EmitterWriter {\n \n     pub fn new(dst: Box<Write + Send>,\n                registry: Option<registry::Registry>,\n-               code_map: Rc<CodeMapper>,\n+               code_map: Option<Rc<CodeMapper>>,\n                format_mode: FormatMode)\n                -> EmitterWriter {\n         EmitterWriter { dst: Raw(dst),\n@@ -257,7 +225,11 @@ impl EmitterWriter {\n                 if old_school {\n                     let loc = match rsp.span().primary_span() {\n                         Some(COMMAND_LINE_SP) | Some(DUMMY_SP) => \"\".to_string(),\n-                        Some(ps) => self.cm.span_to_string(ps),\n+                        Some(ps) => if let Some(ref cm) = self.cm {\n+                            cm.span_to_string(ps)\n+                        } else {\n+                            \"\".to_string()\n+                        },\n                         None => \"\".to_string()\n                     };\n                     print_diagnostic(&mut self.dst, &loc, lvl, msg, Some(code))?\n@@ -270,7 +242,11 @@ impl EmitterWriter {\n                 if old_school {\n                     let loc = match rsp.span().primary_span() {\n                         Some(COMMAND_LINE_SP) | Some(DUMMY_SP) => \"\".to_string(),\n-                        Some(ps) => self.cm.span_to_string(ps),\n+                        Some(ps) => if let Some(ref cm) = self.cm {\n+                            cm.span_to_string(ps)\n+                        } else {\n+                            \"\".to_string()\n+                        },\n                         None => \"\".to_string()\n                     };\n                     print_diagnostic(&mut self.dst, &loc, lvl, msg, code)?\n@@ -316,7 +292,11 @@ impl EmitterWriter {\n                                         .is_some() => {\n                     let loc = match rsp.span().primary_span() {\n                         Some(COMMAND_LINE_SP) | Some(DUMMY_SP) => \"\".to_string(),\n-                        Some(ps) => self.cm.span_to_string(ps),\n+                        Some(ps) => if let Some(ref cm) = self.cm {\n+                            cm.span_to_string(ps)\n+                        } else {\n+                            \"\".to_string()\n+                        },\n                         None => \"\".to_string()\n                     };\n                     let msg = \"run `rustc --explain \".to_string() + &code.to_string() +\n@@ -335,32 +315,34 @@ impl EmitterWriter {\n         use std::borrow::Borrow;\n \n         let primary_span = suggestion.msp.primary_span().unwrap();\n-        let lines = self.cm.span_to_lines(primary_span).unwrap();\n-        assert!(!lines.lines.is_empty());\n-\n-        let complete = suggestion.splice_lines(self.cm.borrow());\n-        let line_count = cmp::min(lines.lines.len(), MAX_HIGHLIGHT_LINES);\n-        let display_lines = &lines.lines[..line_count];\n-\n-        let fm = &*lines.file;\n-        // Calculate the widest number to format evenly\n-        let max_digits = line_num_max_digits(display_lines.last().unwrap());\n-\n-        // print the suggestion without any line numbers, but leave\n-        // space for them. This helps with lining up with previous\n-        // snippets from the actual error being reported.\n-        let mut lines = complete.lines();\n-        for line in lines.by_ref().take(MAX_HIGHLIGHT_LINES) {\n-            write!(&mut self.dst, \"{0}:{1:2$} {3}\\n\",\n-                   fm.name, \"\", max_digits, line)?;\n-        }\n+        if let Some(ref cm) = self.cm {\n+            let lines = cm.span_to_lines(primary_span).unwrap();\n+\n+            assert!(!lines.lines.is_empty());\n+\n+            let complete = suggestion.splice_lines(cm.borrow());\n+            let line_count = cmp::min(lines.lines.len(), MAX_HIGHLIGHT_LINES);\n+            let display_lines = &lines.lines[..line_count];\n+\n+            let fm = &*lines.file;\n+            // Calculate the widest number to format evenly\n+            let max_digits = line_num_max_digits(display_lines.last().unwrap());\n+\n+            // print the suggestion without any line numbers, but leave\n+            // space for them. This helps with lining up with previous\n+            // snippets from the actual error being reported.\n+            let mut lines = complete.lines();\n+            for line in lines.by_ref().take(MAX_HIGHLIGHT_LINES) {\n+                write!(&mut self.dst, \"{0}:{1:2$} {3}\\n\",\n+                    fm.name, \"\", max_digits, line)?;\n+            }\n \n-        // if we elided some lines, add an ellipsis\n-        if let Some(_) = lines.next() {\n-            write!(&mut self.dst, \"{0:1$} {0:2$} ...\\n\",\n-                   \"\", fm.name.len(), max_digits)?;\n+            // if we elided some lines, add an ellipsis\n+            if let Some(_) = lines.next() {\n+                write!(&mut self.dst, \"{0:1$} {0:2$} ...\\n\",\n+                    \"\", fm.name.len(), max_digits)?;\n+            }\n         }\n-\n         Ok(())\n     }\n \n@@ -369,20 +351,26 @@ impl EmitterWriter {\n                        lvl: Level)\n                        -> io::Result<()>\n     {\n+        // Check to see if we have any lines to highlight, exit early if not\n+        match self.cm {\n+            None => return Ok(()),\n+            _ => ()\n+        }\n+\n         let old_school = match self.format_mode {\n             FormatMode::NewErrorFormat => false,\n             FormatMode::OriginalErrorFormat => true,\n             FormatMode::EnvironmentSelected => check_old_skool()\n         };\n \n-        let mut snippet_data = SnippetData::new(self.cm.clone(),\n+        let mut snippet_data = SnippetData::new(self.cm.as_ref().unwrap().clone(),\n                                                 msp.primary_span(),\n                                                 self.format_mode.clone());\n         if old_school {\n             let mut output_vec = vec![];\n \n             for span_label in msp.span_labels() {\n-                let mut snippet_data = SnippetData::new(self.cm.clone(),\n+                let mut snippet_data = SnippetData::new(self.cm.as_ref().unwrap().clone(),\n                                                         Some(span_label.span),\n                                                         self.format_mode.clone());\n \n@@ -431,16 +419,18 @@ impl EmitterWriter {\n     fn print_macro_backtrace(&mut self,\n                              sp: Span)\n                              -> io::Result<()> {\n-        for trace in self.cm.macro_backtrace(sp) {\n-            let mut diag_string =\n-                format!(\"in this expansion of {}\", trace.macro_decl_name);\n-            if let Some(def_site_span) = trace.def_site_span {\n-                diag_string.push_str(\n-                    &format!(\" (defined in {})\",\n-                        self.cm.span_to_filename(def_site_span)));\n+        if let Some(ref cm) = self.cm {\n+            for trace in cm.macro_backtrace(sp) {\n+                let mut diag_string =\n+                    format!(\"in this expansion of {}\", trace.macro_decl_name);\n+                if let Some(def_site_span) = trace.def_site_span {\n+                    diag_string.push_str(\n+                        &format!(\" (defined in {})\",\n+                            cm.span_to_filename(def_site_span)));\n+                }\n+                let snippet = cm.span_to_string(trace.call_site);\n+                print_diagnostic(&mut self.dst, &snippet, Note, &diag_string, None)?;\n             }\n-            let snippet = self.cm.span_to_string(trace.call_site);\n-            print_diagnostic(&mut self.dst, &snippet, Note, &diag_string, None)?;\n         }\n         Ok(())\n     }"}, {"sha": "100e79b1954d511c706b8ba1e3f243571e6abe87", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f044fae36b73ec4593c127ec2a7c28716208591/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f044fae36b73ec4593c127ec2a7c28716208591/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=8f044fae36b73ec4593c127ec2a7c28716208591", "patch": "@@ -423,7 +423,7 @@ impl Handler {\n                             registry: Option<registry::Registry>,\n                             can_emit_warnings: bool,\n                             treat_err_as_bug: bool,\n-                            cm: Rc<CodeMapper>)\n+                            cm: Option<Rc<CodeMapper>>)\n                             -> Handler {\n         let emitter = Box::new(EmitterWriter::stderr(color_config, registry, cm,\n                                snippet::FormatMode::EnvironmentSelected));"}, {"sha": "fc9ae73f5ce7e2ec96a4c584c4e8f652c9b38746", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f044fae36b73ec4593c127ec2a7c28716208591/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f044fae36b73ec4593c127ec2a7c28716208591/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=8f044fae36b73ec4593c127ec2a7c28716208591", "patch": "@@ -131,7 +131,7 @@ pub fn run_core(search_paths: SearchPaths,\n                                                                None,\n                                                                true,\n                                                                false,\n-                                                               codemap.clone());\n+                                                               Some(codemap.clone()));\n \n     let dep_graph = DepGraph::new(false);\n     let _ignore = dep_graph.in_ignore();"}, {"sha": "f9d0df9981a1d73bc9e796746aaca850cda0736d", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8f044fae36b73ec4593c127ec2a7c28716208591/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f044fae36b73ec4593c127ec2a7c28716208591/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=8f044fae36b73ec4593c127ec2a7c28716208591", "patch": "@@ -77,7 +77,7 @@ pub fn run(input: &str,\n                                                                None,\n                                                                true,\n                                                                false,\n-                                                               codemap.clone());\n+                                                               Some(codemap.clone()));\n \n     let dep_graph = DepGraph::new(false);\n     let _ignore = dep_graph.in_ignore();\n@@ -229,7 +229,7 @@ fn runtest(test: &str, cratename: &str, cfgs: Vec<String>, libs: SearchPaths,\n     let codemap = Rc::new(CodeMap::new());\n     let emitter = errors::emitter::EmitterWriter::new(box Sink(data.clone()),\n                                                 None,\n-                                                codemap.clone(),\n+                                                Some(codemap.clone()),\n                                                 errors::snippet::FormatMode::EnvironmentSelected);\n     let old = io::set_panic(box Sink(data.clone()));\n     let _bomb = Bomb(data.clone(), old.unwrap_or(box io::stdout()));"}, {"sha": "3b93dc0c4d37f104a9bbf928fb841c80dd5f8d9b", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8f044fae36b73ec4593c127ec2a7c28716208591/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f044fae36b73ec4593c127ec2a7c28716208591/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=8f044fae36b73ec4593c127ec2a7c28716208591", "patch": "@@ -1235,7 +1235,7 @@ r\"blork2.rs:2:1: 2:12\n         let cm = Rc::new(CodeMap::new());\n         let mut ew = EmitterWriter::new(Box::new(Sink(data.clone())),\n                                         None,\n-                                        cm.clone(),\n+                                        Some(cm.clone()),\n                                         FormatMode::NewErrorFormat);\n         let content = \"abcdefg\n         koksi\n@@ -1321,7 +1321,7 @@ r\"blork2.rs:2:1: 2:12\n         let cm = Rc::new(CodeMap::new());\n         let mut diag = EmitterWriter::new(Box::new(Sink(data.clone())),\n                                           None,\n-                                          cm.clone(),\n+                                          Some(cm.clone()),\n                                           FormatMode::NewErrorFormat);\n \n         let inp =       \"_____aaaaaa____bbbbbb__cccccdd_\";\n@@ -1377,7 +1377,7 @@ r\"blork2.rs:2:1: 2:12\n         let cm = Rc::new(CodeMap::new());\n         let mut diag = EmitterWriter::new(Box::new(Sink(data.clone())),\n                                           None,\n-                                          cm.clone(),\n+                                          Some(cm.clone()),\n                                           FormatMode::NewErrorFormat);\n \n         let inp = \"aaaaa\\n\\"}, {"sha": "5ea1d6be9fec9903b3155b7faf60cafe2efe240d", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f044fae36b73ec4593c127ec2a7c28716208591/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f044fae36b73ec4593c127ec2a7c28716208591/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=8f044fae36b73ec4593c127ec2a7c28716208591", "patch": "@@ -1686,7 +1686,7 @@ mod tests {\n         // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n         let emitter = errors::emitter::EmitterWriter::new(Box::new(io::sink()),\n                                                 None,\n-                                                cm,\n+                                                Some(cm),\n                                                 errors::snippet::FormatMode::EnvironmentSelected);\n         errors::Handler::with_emitter(true, false, Box::new(emitter))\n     }"}, {"sha": "6af4d95e888ac71006f7a72bf050da0ef5816c53", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8f044fae36b73ec4593c127ec2a7c28716208591/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f044fae36b73ec4593c127ec2a7c28716208591/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=8f044fae36b73ec4593c127ec2a7c28716208591", "patch": "@@ -50,7 +50,11 @@ pub struct ParseSess {\n impl ParseSess {\n     pub fn new() -> ParseSess {\n         let cm = Rc::new(CodeMap::new());\n-        let handler = Handler::with_tty_emitter(ColorConfig::Auto, None, true, false, cm.clone());\n+        let handler = Handler::with_tty_emitter(ColorConfig::Auto,\n+                                                None,\n+                                                true,\n+                                                false,\n+                                                Some(cm.clone()));\n         ParseSess::with_span_handler(handler, cm)\n     }\n "}]}