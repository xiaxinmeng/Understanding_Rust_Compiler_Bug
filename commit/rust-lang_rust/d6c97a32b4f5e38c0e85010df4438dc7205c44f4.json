{"sha": "d6c97a32b4f5e38c0e85010df4438dc7205c44f4", "node_id": "C_kwDOAAsO6NoAKGQ2Yzk3YTMyYjRmNWUzOGMwZTg1MDEwZGY0NDM4ZGM3MjA1YzQ0ZjQ", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-11-08T04:59:19Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-11-08T04:59:19Z"}, "message": "Simplify `unescape_{char,byte}`.\n\nThe `usize` isn't needed in the error case.", "tree": {"sha": "e9f0ea641df013347b43980828f86329b87eede1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9f0ea641df013347b43980828f86329b87eede1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6c97a32b4f5e38c0e85010df4438dc7205c44f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6c97a32b4f5e38c0e85010df4438dc7205c44f4", "html_url": "https://github.com/rust-lang/rust/commit/d6c97a32b4f5e38c0e85010df4438dc7205c44f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6c97a32b4f5e38c0e85010df4438dc7205c44f4/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43d21b535f003c81a55331c31e16313a90050b18", "url": "https://api.github.com/repos/rust-lang/rust/commits/43d21b535f003c81a55331c31e16313a90050b18", "html_url": "https://github.com/rust-lang/rust/commit/43d21b535f003c81a55331c31e16313a90050b18"}], "stats": {"total": 26, "additions": 9, "deletions": 17}, "files": [{"sha": "e405013dcabf83047cb34a88c635e6d4d7ec8a28", "filename": "compiler/rustc_lexer/src/unescape.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d6c97a32b4f5e38c0e85010df4438dc7205c44f4/compiler%2Frustc_lexer%2Fsrc%2Funescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c97a32b4f5e38c0e85010df4438dc7205c44f4/compiler%2Frustc_lexer%2Fsrc%2Funescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lexer%2Fsrc%2Funescape.rs?ref=d6c97a32b4f5e38c0e85010df4438dc7205c44f4", "patch": "@@ -94,19 +94,15 @@ where\n }\n \n /// Takes a contents of a char literal (without quotes), and returns an\n-/// unescaped char or an error\n-pub fn unescape_char(src: &str) -> Result<char, (usize, EscapeError)> {\n-    let mut chars = src.chars();\n-    unescape_char_or_byte(&mut chars, false).map_err(|err| (src.len() - chars.as_str().len(), err))\n+/// unescaped char or an error.\n+pub fn unescape_char(src: &str) -> Result<char, EscapeError> {\n+    unescape_char_or_byte(&mut src.chars(), false)\n }\n \n /// Takes a contents of a byte literal (without quotes), and returns an\n /// unescaped byte or an error.\n-pub fn unescape_byte(src: &str) -> Result<u8, (usize, EscapeError)> {\n-    let mut chars = src.chars();\n-    unescape_char_or_byte(&mut chars, true)\n-        .map(byte_from_char)\n-        .map_err(|err| (src.len() - chars.as_str().len(), err))\n+pub fn unescape_byte(src: &str) -> Result<u8, EscapeError> {\n+    unescape_char_or_byte(&mut src.chars(), true).map(byte_from_char)\n }\n \n /// What kind of literal do we parse."}, {"sha": "c7ca8fd16ae479cf7978913e8a0ea961cde2afc1", "filename": "compiler/rustc_lexer/src/unescape/tests.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d6c97a32b4f5e38c0e85010df4438dc7205c44f4/compiler%2Frustc_lexer%2Fsrc%2Funescape%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c97a32b4f5e38c0e85010df4438dc7205c44f4/compiler%2Frustc_lexer%2Fsrc%2Funescape%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lexer%2Fsrc%2Funescape%2Ftests.rs?ref=d6c97a32b4f5e38c0e85010df4438dc7205c44f4", "patch": "@@ -3,8 +3,7 @@ use super::*;\n #[test]\n fn test_unescape_char_bad() {\n     fn check(literal_text: &str, expected_error: EscapeError) {\n-        let actual_result = unescape_char(literal_text).map_err(|(_offset, err)| err);\n-        assert_eq!(actual_result, Err(expected_error));\n+        assert_eq!(unescape_char(literal_text), Err(expected_error));\n     }\n \n     check(\"\", EscapeError::ZeroChars);\n@@ -68,8 +67,7 @@ fn test_unescape_char_bad() {\n #[test]\n fn test_unescape_char_good() {\n     fn check(literal_text: &str, expected_char: char) {\n-        let actual_result = unescape_char(literal_text);\n-        assert_eq!(actual_result, Ok(expected_char));\n+        assert_eq!(unescape_char(literal_text), Ok(expected_char));\n     }\n \n     check(\"a\", 'a');\n@@ -149,8 +147,7 @@ fn test_unescape_str_good() {\n #[test]\n fn test_unescape_byte_bad() {\n     fn check(literal_text: &str, expected_error: EscapeError) {\n-        let actual_result = unescape_byte(literal_text).map_err(|(_offset, err)| err);\n-        assert_eq!(actual_result, Err(expected_error));\n+        assert_eq!(unescape_byte(literal_text), Err(expected_error));\n     }\n \n     check(\"\", EscapeError::ZeroChars);\n@@ -219,8 +216,7 @@ fn test_unescape_byte_bad() {\n #[test]\n fn test_unescape_byte_good() {\n     fn check(literal_text: &str, expected_byte: u8) {\n-        let actual_result = unescape_byte(literal_text);\n-        assert_eq!(actual_result, Ok(expected_byte));\n+        assert_eq!(unescape_byte(literal_text), Ok(expected_byte));\n     }\n \n     check(\"a\", b'a');"}]}