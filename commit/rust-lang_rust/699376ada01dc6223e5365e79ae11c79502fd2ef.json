{"sha": "699376ada01dc6223e5365e79ae11c79502fd2ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5OTM3NmFkYTAxZGM2MjIzZTUzNjVlNzlhZTExYzc5NTAyZmQyZWY=", "commit": {"author": {"name": "John Erickson", "email": "jerick@microsoft.com", "date": "2019-05-06T18:15:52Z"}, "committer": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2019-05-10T07:46:28Z"}, "message": "Add Azure Pipelines", "tree": {"sha": "38d41d3828333872a25cd310232ad327cebc9e00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38d41d3828333872a25cd310232ad327cebc9e00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/699376ada01dc6223e5365e79ae11c79502fd2ef", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE1JbYPtLJAsc22U9xPgar6Auq8ZwFAlzVLFQACgkQPgar6Auq\n8Zw6gA//ffGTiDcnQglhSP1t7m7exVYUGnceBm6uuwNCwS/QL01wsByaDyBVq6ao\ni5MTBAEvt1ys7/ox/W/f4VpXBmxOyWbYyZ7fJWFHZ7pcx7KrFKwT/h/HvS5Dk35+\n2tr0FSe9HGh2tm7DScuT7teooYWR8WR8oVWiTOxsJ1mYPEShJP36Y9dMlEKq4tAd\n9ThBpi967xD8dQqfPBrgnkaL/CgBVrqQ1+gNotvg4sBpzGqaDdys86nwdFQNnRYb\nfaN+cVy4sp/FfnYCV7Yy9vN2pvmlsu8EgzgO6L/AVvVNp8urFbEX75BKFfG8yk9A\npZiiyPlQzRLLVJkuAtrjS2eZNF3ptyuPRQxM2V6Q0Fv59OV5oGFJ2cIIOu/tQL3G\nz1e3Df4PfrdrFj/TvlEJAf5Wc/ACiBozAeLmohm2foJHDPokZwJe9HeH8+eOlnRU\nIXhEK8vzQb1xI4zuPK119elMbm3Kuigp+74BxafOs4ZZF6VTWjfKxb17MSLdj2dq\nkM1uzx59wmOS+MGGNKFfKRlNK9sez/exJnDLMrB16NKq+yKd5GlwRS/SKromH6QG\n0yUCgxO0bQ7HyiaXPo/BWXgeTFG2pBFYqRF4Gqz5IgvpeLNWEEeSwOI37rNq6HAy\nW4i5cSctbsffC9zs+UYhoDfZQJbm210HSYKYMsdeXbAVxuNqArQ=\n=69eT\n-----END PGP SIGNATURE-----", "payload": "tree 38d41d3828333872a25cd310232ad327cebc9e00\nparent 407536e38db4c7ebd33288db450703a7588e0a9d\nauthor John Erickson <jerick@microsoft.com> 1557166552 -0700\ncommitter Pietro Albini <pietro@pietroalbini.org> 1557474388 +0200\n\nAdd Azure Pipelines\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/699376ada01dc6223e5365e79ae11c79502fd2ef", "html_url": "https://github.com/rust-lang/rust/commit/699376ada01dc6223e5365e79ae11c79502fd2ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/699376ada01dc6223e5365e79ae11c79502fd2ef/comments", "author": {"login": "johnterickson", "id": 10488772, "node_id": "MDQ6VXNlcjEwNDg4Nzcy", "avatar_url": "https://avatars.githubusercontent.com/u/10488772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/johnterickson", "html_url": "https://github.com/johnterickson", "followers_url": "https://api.github.com/users/johnterickson/followers", "following_url": "https://api.github.com/users/johnterickson/following{/other_user}", "gists_url": "https://api.github.com/users/johnterickson/gists{/gist_id}", "starred_url": "https://api.github.com/users/johnterickson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/johnterickson/subscriptions", "organizations_url": "https://api.github.com/users/johnterickson/orgs", "repos_url": "https://api.github.com/users/johnterickson/repos", "events_url": "https://api.github.com/users/johnterickson/events{/privacy}", "received_events_url": "https://api.github.com/users/johnterickson/received_events", "type": "User", "site_admin": true}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "407536e38db4c7ebd33288db450703a7588e0a9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/407536e38db4c7ebd33288db450703a7588e0a9d", "html_url": "https://github.com/rust-lang/rust/commit/407536e38db4c7ebd33288db450703a7588e0a9d"}], "stats": {"total": 1617, "additions": 1568, "deletions": 49}, "files": [{"sha": "08cba3c47ca8a15479575619ab87c9c232fbd8bd", "filename": ".azure-pipelines/auto.fanout.yml", "status": "added", "additions": 521, "deletions": 0, "changes": 521, "blob_url": "https://github.com/rust-lang/rust/blob/699376ada01dc6223e5365e79ae11c79502fd2ef/.azure-pipelines%2Fauto.fanout.yml", "raw_url": "https://github.com/rust-lang/rust/raw/699376ada01dc6223e5365e79ae11c79502fd2ef/.azure-pipelines%2Fauto.fanout.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.azure-pipelines%2Fauto.fanout.yml?ref=699376ada01dc6223e5365e79ae11c79502fd2ef", "patch": "@@ -0,0 +1,521 @@\n+#\n+# Azure Pipelines \"auto\" branch build for Rust on Linux, macOS, and Windows.\n+# \n+# Notes:\n+# To get sccache working, I (John Erickson) had to build it with the Azure feature enabled\n+# and with openssl statically-linked for Linux.\n+# Here's the build (with a backpointer to source) of where the bits came from:\n+# https://dev.azure.com/johnterickson/rust-lang/_build/results?buildId=275\n+\n+name: fanout \n+pr: none\n+trigger:\n+- auto\n+\n+variables:\n+- group: caching\n+\n+jobs:\n+# WINDOWS JOBS\n+- job: Windows\n+  timeoutInMinutes: 600\n+  variables:\n+    TAR_COMMAND: tar\n+  pool:\n+    vmImage: 'vs2017-win2016'\n+  steps:\n+  - template: steps/windows.yml\n+  strategy:\n+    matrix:\n+      # 32/64 bit MSVC tests\n+      x86_64-msvc-1:\n+        MSYS_BITS: 64\n+        RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc --enable-profiler\n+        SCRIPT: make ci-subset-1\n+      x86_64-msvc-2:\n+        MSYS_BITS: 64\n+        RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc --enable-profiler\n+        SCRIPT: make ci-subset-2\n+\n+- job: Windows_build  \n+  timeoutInMinutes: 600\n+  variables:\n+    TAR_COMMAND: tar\n+  pool:\n+    vmImage: 'vs2017-win2016'\n+  steps:\n+  - template: steps/windows.yml\n+  - script: |\n+      echo on\n+      echo \"##vso[task.setvariable variable=TAR_PATH]%TEMP%\\drop.tar\"\n+  - bash: |\n+      set -x\n+      $TAR_COMMAND --dereference --exclude=.git --exclude=citools $SUBMODULES_EXCLUDES -cf $TEMP/drop.tar .\n+      $TAR_COMMAND --append --file=$TEMP/drop.tar citools\n+  - task: PublishPipelineArtifact@0\n+    inputs:\n+      artifactName: $(System.JobDisplayName)\n+      targetPath: $(TAR_PATH)\n+  strategy:\n+    matrix:\n+      # 32/64 bit MSVC tests\n+      x86_64-msvc-build:\n+        MSYS_BITS: 64\n+        RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc --enable-profiler\n+        SCRIPT: make ci-test-prepare\n+\n+- job: Windows_test\n+  dependsOn: Windows_build\n+  timeoutInMinutes: 600\n+  variables:\n+    TAR_COMMAND: tar\n+    SKIP_PREP: 1\n+    KEEP_STAGE: '--keep-stage 0 --keep-stage 1'\n+    SKIP_LLVM_BUILD: 1\n+  pool:\n+    vmImage: 'vs2017-win2016'\n+  steps:\n+  - checkout: self\n+    fetchDepth: 2\n+  - script: |\n+      set MSYS_PATH=%CD%\\citools\\msys64\n+      set PATH=%MSYS_PATH%\\usr\\bin;%PATH%\n+      where rev\n+      rev --help\n+      where make\n+      echo ##vso[task.prependpath]%MSYS_PATH%\\usr\\bin\n+    displayName: Install msys2\n+\n+  # # If we need to download a custom MinGW, do so here and set the path\n+  # # appropriately.\n+  # #\n+  # # Note that this *also* means that we're not using what is typically\n+  # # /mingw32/bin/python2.7.exe, which is a \"correct\" python interpreter where\n+  # # /usr/bin/python2.7.exe is not. To ensure we use the right interpreter we\n+  # # move `C:\\Python27` ahead in PATH and then also make sure the `python2.7.exe`\n+  # # file exists in there (which it doesn't by default).\n+  # - script: |\n+  #     powershell -Command \"iwr -outf %MINGW_ARCHIVE% %MINGW_URL%/%MINGW_ARCHIVE%\"\n+  #     7z x -y %MINGW_ARCHIVE% > nul\n+  #     echo ##vso[task.prependpath]%CD%\\%MINGW_DIR%\\bin\n+  #   condition: and(succeeded(), ne(variables['MINGW_URL'],''))\n+  #   displayName: Download custom MinGW\n+\n+  # If we're compiling for MSVC then we, like most other distribution builders,\n+  # switch to clang as the compiler. This'll allow us eventually to enable LTO\n+  # amongst LLVM and rustc. Note that we only do this on MSVC as I don't think\n+  # clang has an output mode compatible with MinGW that we need. If it does we\n+  # should switch to clang for MinGW as well!\n+  #\n+  # Note that the LLVM installer is an NSIS installer\n+  #\n+  # Original downloaded here came from\n+  # http://releases.llvm.org/7.0.0/LLVM-7.0.0-win64.exe\n+  - script: |\n+      # powershell -Command \"iwr -outf LLVM-7.0.0-win64.exe https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror/LLVM-7.0.0-win64.exe\"\n+      # .\\LLVM-7.0.0-win64.exe /S /NCRC /D=C:\\clang-rust\n+      set CLANG_DIR=%CD%\\citools\\clang-rust\n+      set RUST_CONFIGURE_ARGS=%RUST_CONFIGURE_ARGS% --set llvm.clang-cl=%CLANG_DIR%\\bin\\clang-cl.exe\n+      echo ##vso[task.setvariable variable=RUST_CONFIGURE_ARGS]%RUST_CONFIGURE_ARGS%\n+    condition: and(succeeded(), eq(variables['MINGW_URL'],''))\n+    displayName: Download clang\n+\n+  # # Here we do a pretty heinous thing which is to mangle the MinGW installation\n+  # # we just had above. Currently, as of this writing, we're using MinGW-w64\n+  # # builds of gcc, and that's currently at 6.3.0. We use 6.3.0 as it appears to\n+  # # be the first version which contains a fix for #40546, builds randomly\n+  # # failing during LLVM due to ar.exe/ranlib.exe failures.\n+  # #\n+  # # Unfortunately, though, 6.3.0 *also* is the first version of MinGW-w64 builds\n+  # # to contain a regression in gdb (#40184). As a result if we were to use the\n+  # # gdb provided (7.11.1) then we would fail all debuginfo tests.\n+  # #\n+  # # In order to fix spurious failures (pretty high priority) we use 6.3.0. To\n+  # # avoid disabling gdb tests we download an *old* version of gdb, specifically\n+  # # that found inside the 6.2.0 distribution. We then overwrite the 6.3.0 gdb\n+  # # with the 6.2.0 gdb to get tests passing.\n+  # #\n+  # # Note that we don't literally overwrite the gdb.exe binary because it appears\n+  # # to just use gdborig.exe, so that's the binary we deal with instead.\n+  # - script: |\n+  #     echo ON\n+  #     powershell -Command \"iwr -outf 2017-04-20-%MSYS_BITS%bit-gdborig.exe %MINGW_URL%/2017-04-20-%MSYS_BITS%bit-gdborig.exe\"\n+  #     mv 2017-04-20-%MSYS_BITS%bit-gdborig.exe %MINGW_DIR%\\bin\\gdborig.exe\n+  #   condition: and(succeeded(), ne(variables['MINGW_URL'],''))\n+  #   displayName: Override with 6.3.0 gdb with 6.2.0 gdb\n+\n+  # Otherwise pull in the MinGW installed on appveyor\n+  - script: |\n+      echo Find mingw\n+      set PATH | findstr /i msys\n+      set PATH | findstr /i mingw\n+      echo ##vso[task.prependpath]C:\\msys64\\mingw%MSYS_BITS%\\bin\n+    condition: and(succeeded(), eq(variables['MINGW_URL'],''))\n+    displayName: Add MinGW to path\n+\n+  - script: |\n+      copy C:\\Python27amd64\\python.exe C:\\Python27amd64\\python2.7.exe\n+      echo ##vso[task.prependpath]C:\\Python27amd64\n+    displayName: Prefer the \"native\" Python as LLVM has trouble building with MSYS sometimes\n+\n+  - script: |\n+      REM md sccache\n+      REM powershell -Command \"iwr -outf sccache\\sccache.exe https://rustlangtools.blob.core.windows.net/public/stable-x86_64-pc-windows-msvc.sccache.exe\"\n+      echo ##vso[task.prependpath]%CD%\\sccache\n+    displayName: Download and install sccache\n+\n+  # Note that this is originally from the github releases patch of Ninja\n+  - script: |\n+      REM md ninja\n+      REM powershell -Command \"iwr -outf 2017-03-15-ninja-win.zip https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror/2017-03-15-ninja-win.zip\"\n+      REM 7z x -oninja 2017-03-15-ninja-win.zip\n+      REM del 2017-03-15-ninja-win.zip\n+      set RUST_CONFIGURE_ARGS=%RUST_CONFIGURE_ARGS% --enable-ninja\n+      echo ##vso[task.setvariable variable=RUST_CONFIGURE_ARGS]%RUST_CONFIGURE_ARGS%\n+      echo ##vso[task.prependpath]%CD%\\ninja\n+    displayName: Download and install ninja\n+  \n+  - script: |\n+      IF NOT \"%DISABLE_DISK_SPACE_HACK%\"==\"1\" (\n+        IF NOT EXIST build (\n+          mkdir c:\\MORE_SPACE\n+          mklink /J build c:\\MORE_SPACE\n+        )\n+      )\n+  - script: |\n+      echo on\n+      echo ##vso[task.setvariable variable=TAR_FOLDER_PATH]%TEMP%\n+  - template: steps/show-environment-variables.yml\n+  - task: DownloadPipelineArtifact@1\n+    inputs:\n+      artifactName: $(ARTIFACT_NAME)\n+      downloadPath: $(TAR_FOLDER_PATH)\n+  # - task: DownloadPipelineArtifact@1\n+  #   inputs:\n+  #     artifactName: $(ARTIFACT_NAME)\n+  #     downloadPath: $(TAR_FOLDER_PATH)\n+  #     buildType: specific\n+  #     project: rust\n+  #     pipeline: 8\n+  #     buildVersionToDownload: specific\n+  #     buildId: 200\n+  #     # https://dev.azure.com/rust-lang-azure/rust/_build/results?buildId=145\n+\n+  # - template: steps/macos.yml \n+  - bash: $TAR_COMMAND -tvf $TEMP/drop.tar\n+  - bash: $TAR_COMMAND --touch -xf $TEMP/drop.tar\n+  - bash: rm $TEMP/drop.tar\n+  - script: |\n+      REM mkdir handle\n+      REM powershell -Command \"iwr -outf 2017-05-15-Handle.zip https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror/2017-05-15-Handle.zip\"\n+      REM 7z x -ohandle 2017-05-15-Handle.zip\n+      REM del 2017-05-15-Handle.zip\n+      set PATH=%PATH%;%CD%\\handle\n+      handle.exe -accepteula -help\n+      echo ##vso[task.setvariable variable=PATH]%PATH%\n+    displayName: Help debug handle issues\n+  - script: |\n+      REM echo force the specific VS version https://github.com/johnterickson/rust/issues/8\n+      IF \"%VCVARS_BAT%\" NEQ \"\" ( \n+        CALL \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Auxiliary\\Build\\%VCVARS_BAT%\"\n+      )\n+\n+      where sccache\n+      where rev\n+      set | findstr /v SCCACHE_AZURE_CONNECTION_STRING\n+\n+      if not exist D:\\cache\\rustsrc\\NUL mkdir D:\\cache\\rustsrc\n+      \n+      sh src/ci/run.sh\n+    env:      \n+      CI: true\n+      CI_JOB_NAME: $(System.JobDisplayName)\n+      SRC: .\n+      NO_CCACHE: 1\n+\n+      # explicitly decrypt secret variables\n+      # see https://docs.microsoft.com/en-us/azure/devops/pipelines/process/variables?view=azure-devops&tabs=yaml%2Cbatch\n+      SCCACHE_AZURE_CONNECTION_STRING: $(SCCACHE_AZURE_CONNECTION_STRING_SECRET)\n+      DOCKER_LAYER_CACHE_AZURE_STORAGE_ACCOUNT_KEY: $(DOCKER_LAYER_CACHE_AZURE_STORAGE_ACCOUNT_KEY_SECRET)\n+    displayName: Run script\n+  \n+  strategy:\n+    matrix:\n+      # 32/64 bit MSVC tests\n+      x86_64-msvc-A:\n+        MSYS_BITS: 64\n+        RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc --enable-profiler\n+        ARTIFACT_NAME: x86_64-msvc-build\n+        SCRIPT: make ci-resume-subset-A\n+      x86_64-msvc-B:\n+        MSYS_BITS: 64\n+        RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc --enable-profiler\n+        ARTIFACT_NAME: x86_64-msvc-build\n+        SCRIPT: make ci-resume-subset-B\n+      x86_64-msvc-C:\n+        MSYS_BITS: 64\n+        RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc --enable-profiler\n+        ARTIFACT_NAME: x86_64-msvc-build\n+        SCRIPT: make ci-resume-subset-C\n+      x86_64-msvc-D:\n+        MSYS_BITS: 64\n+        RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc --enable-profiler\n+        ARTIFACT_NAME: x86_64-msvc-build\n+        SCRIPT: make ci-resume-subset-D\n+      x86_64-msvc-E:\n+        MSYS_BITS: 64\n+        RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc --enable-profiler\n+        ARTIFACT_NAME: x86_64-msvc-build\n+        SCRIPT: make ci-resume-subset-E\n+      x86_64-msvc-F:\n+        MSYS_BITS: 64\n+        RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc --enable-profiler\n+        ARTIFACT_NAME: x86_64-msvc-build\n+        SCRIPT: make ci-resume-subset-F\n+      x86_64-msvc-G:\n+        MSYS_BITS: 64\n+        RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc --enable-profiler\n+        ARTIFACT_NAME: x86_64-msvc-build\n+        SCRIPT: make ci-resume-subset-G\n+      x86_64-msvc-H:\n+        MSYS_BITS: 64\n+        RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc --enable-profiler\n+        ARTIFACT_NAME: x86_64-msvc-build\n+        SCRIPT: make ci-resume-subset-H\n+\n+# macOS JOBS\n+- job: macOS\n+  timeoutInMinutes: 600\n+  variables:\n+    TAR_COMMAND: gtar\n+  pool:\n+    vmImage: macos-10.13\n+  steps:\n+  - checkout: self\n+    fetchDepth: 2\n+  - template: steps/macos.yml  \n+  strategy:\n+    matrix:\n+      x86_64-apple:\n+        RUST_CHECK_TARGET: check\n+        RUST_CONFIGURE_ARGS: --build=x86_64-apple-darwin --enable-sanitizers --enable-profiler --set rust.jemalloc\n+        RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n+        MACOSX_DEPLOYMENT_TARGET: 10.8\n+        MACOSX_STD_DEPLOYMENT_TARGET: 10.7\n+        NO_LLVM_ASSERTIONS: 1\n+        NO_DEBUG_ASSERTIONS: 1\n+\n+- job: macOS_build\n+  timeoutInMinutes: 600\n+  variables:\n+    TAR_COMMAND: gtar\n+  pool:\n+    vmImage: macos-10.13\n+  steps:\n+  - checkout: self\n+    fetchDepth: 2\n+  - template: steps/macos.yml\n+  - script: |\n+      set -x\n+\n+      git submodule\n+      export SUBMODULES_EXCLUDES=$(git submodule | grep -Eow 'src/[^ ]+' | sed 's/\\(.*\\)/--exclude=\\1\\/\\.git/')\n+      echo $SUBMODULES_EXCLUDES\n+\n+      $TAR_COMMAND --exclude=.git $SUBMODULES_EXCLUDES -cf /tmp/drop.tar .\n+  - task: PublishPipelineArtifact@0\n+    inputs:\n+      artifactName: $(System.JobDisplayName)\n+      targetPath: '/tmp/drop.tar'\n+\n+  strategy:\n+    matrix:\n+      # macOS builders. These are placed near the beginning because they are very\n+      # slow to run.\n+\n+      # OSX builders running tests, these run the full test suite.\n+      # NO_DEBUG_ASSERTIONS=1 to make them go faster, but also do have some\n+      # runners that run `//ignore-debug` tests.\n+      #\n+      # Note that the compiler is compiled to target 10.8 here because the Xcode\n+      # version that we're using, 8.2, cannot compile LLVM for OSX 10.7.\n+      x86_64-apple-build:\n+        RUST_CHECK_TARGET: check\n+        RUST_CONFIGURE_ARGS: --build=x86_64-apple-darwin --enable-sanitizers --enable-profiler --set rust.jemalloc\n+        RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n+        MACOSX_DEPLOYMENT_TARGET: 10.8\n+        MACOSX_STD_DEPLOYMENT_TARGET: 10.7\n+        NO_LLVM_ASSERTIONS: 1\n+        NO_DEBUG_ASSERTIONS: 1\n+        SCRIPT: make ci-test-prepare\n+\n+- job: macOS_test\n+  dependsOn: macOS_build\n+  timeoutInMinutes: 600\n+  variables:\n+    TAR_COMMAND: gtar\n+    SKIP_PREP: 1\n+    KEEP_STAGE: '--keep-stage 0 --keep-stage 1'\n+    SKIP_LLVM_BUILD: 1\n+  pool:\n+    vmImage: macos-10.13\n+  steps:\n+  - checkout: self\n+    fetchDepth: 2\n+  - bash: brew install gnu-tar\n+    displayName: install a tar that works well\n+\n+  - template: steps/show-disk-usage.yml\n+\n+  - task: DownloadPipelineArtifact@1\n+    inputs:\n+      artifactName: $(ARTIFACT_NAME)\n+      downloadPath: $(System.DefaultWorkingDirectory)\n+  # - task: DownloadPipelineArtifact@1\n+  #   inputs:\n+  #     artifactName: $(ARTIFACT_NAME)\n+  #     downloadPath: $(System.DefaultWorkingDirectory)\n+  #     buildType: specific\n+  #     project: rust\n+  #     pipeline: 8\n+  #     buildVersionToDownload: specific\n+  #     buildId: 200\n+\n+  # - template: steps/macos.yml \n+  - template: steps/show-disk-usage.yml\n+  - bash: $TAR_COMMAND -tvf ./drop.tar\n+  - bash: $TAR_COMMAND -xf ./drop.tar\n+  - bash: rm ./drop.tar\n+  - template: steps/show-disk-usage.yml\n+  - bash: |\n+      export PATH=$PATH:$HOME/.local/bin:$HOME/Library/Python/2.7/bin/\n+      mkdir -p $HOME/rustsrc    \n+      echo \"##vso[task.setvariable variable=PATH;]$PATH\"\n+\n+      curl -fo /usr/local/bin/sccache https://rustlangtools.blob.core.windows.net/public/stable-x86_64-apple-darwin.sccache\n+      chmod +x /usr/local/bin/sccache\n+\n+      curl -fo /usr/local/bin/stamp https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror/2017-03-17-stamp-x86_64-apple-darwin\n+      chmod +x /usr/local/bin/stamp\n+      \n+      export CC=`pwd`/clang+llvm-7.0.0-x86_64-apple-darwin/bin/clang\n+      echo \"##vso[task.setvariable variable=CC]$CC\"\n+      \n+      export CXX=`pwd`/clang+llvm-7.0.0-x86_64-apple-darwin/bin/clang++\n+      echo \"##vso[task.setvariable variable=CXX]$CXX\"\n+      \n+      echo \"##vso[task.setvariable variable=AR]ar\"\n+    displayName: Prep\n+\n+  - bash: brew install gnu-tar\n+    displayName: install a tar that works well\n+\n+  - bash: |\n+      brew update\n+      brew install xz\n+      brew install swig\n+    condition: and(succeeded(), eq(variables['RUST_CHECK_TARGET'],'dist'))\n+    displayName: Install xz and swigw\n+\n+  - bash: |\n+      export RUN_SCRIPT=\"src/ci/run.sh\"\n+      echo \"##vso[task.setvariable variable=RUN_SCRIPT]$RUN_SCRIPT\"\n+    displayName: Prepare run script (init and run)\n+\n+  - template: steps/show-environment-variables.yml\n+\n+  - template: steps/verify-publish-toolstate.yml\n+\n+  - template: steps/run-script.yml\n+\n+  strategy:\n+    matrix:\n+      # macOS builders. These are placed near the beginning because they are very\n+      # slow to run.\n+\n+      # OSX builders running tests, these run the full test suite.\n+      # NO_DEBUG_ASSERTIONS=1 to make them go faster, but also do have some\n+      # runners that run `//ignore-debug` tests.\n+      #\n+      # Note that the compiler is compiled to target 10.8 here because the Xcode\n+      # version that we're using, 8.2, cannot compile LLVM for OSX 10.7.\n+      x86_64-apple-A:\n+        RUST_CHECK_TARGET: check\n+        RUST_CONFIGURE_ARGS: --build=x86_64-apple-darwin --enable-sanitizers --enable-profiler --set rust.jemalloc\n+        RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n+        MACOSX_DEPLOYMENT_TARGET: 10.8\n+        MACOSX_STD_DEPLOYMENT_TARGET: 10.7\n+        NO_LLVM_ASSERTIONS: 1\n+        NO_DEBUG_ASSERTIONS: 1\n+        ARTIFACT_NAME: x86_64-apple-build\n+        SCRIPT: make ci-resume-subset-A\n+      x86_64-apple-B:\n+        RUST_CHECK_TARGET: check\n+        RUST_CONFIGURE_ARGS: --build=x86_64-apple-darwin --enable-sanitizers --enable-profiler --set rust.jemalloc\n+        RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n+        MACOSX_DEPLOYMENT_TARGET: 10.8\n+        MACOSX_STD_DEPLOYMENT_TARGET: 10.7\n+        NO_LLVM_ASSERTIONS: 1\n+        NO_DEBUG_ASSERTIONS: 1\n+        ARTIFACT_NAME: x86_64-apple-build\n+        SCRIPT: make ci-resume-subset-B\n+      x86_64-apple-C:\n+        RUST_CHECK_TARGET: check\n+        RUST_CONFIGURE_ARGS: --build=x86_64-apple-darwin --enable-sanitizers --enable-profiler --set rust.jemalloc\n+        RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n+        MACOSX_DEPLOYMENT_TARGET: 10.8\n+        MACOSX_STD_DEPLOYMENT_TARGET: 10.7\n+        NO_LLVM_ASSERTIONS: 1\n+        NO_DEBUG_ASSERTIONS: 1\n+        ARTIFACT_NAME: x86_64-apple-build\n+        SCRIPT: make ci-resume-subset-C\n+      x86_64-apple-D:\n+        RUST_CHECK_TARGET: check\n+        RUST_CONFIGURE_ARGS: --build=x86_64-apple-darwin --enable-sanitizers --enable-profiler --set rust.jemalloc\n+        RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n+        MACOSX_DEPLOYMENT_TARGET: 10.8\n+        MACOSX_STD_DEPLOYMENT_TARGET: 10.7\n+        NO_LLVM_ASSERTIONS: 1\n+        NO_DEBUG_ASSERTIONS: 1\n+        ARTIFACT_NAME: x86_64-apple-build\n+        SCRIPT: make ci-resume-subset-D\n+      x86_64-apple-E:\n+        RUST_CHECK_TARGET: check\n+        RUST_CONFIGURE_ARGS: --build=x86_64-apple-darwin --enable-sanitizers --enable-profiler --set rust.jemalloc\n+        RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n+        MACOSX_DEPLOYMENT_TARGET: 10.8\n+        MACOSX_STD_DEPLOYMENT_TARGET: 10.7\n+        NO_LLVM_ASSERTIONS: 1\n+        NO_DEBUG_ASSERTIONS: 1\n+        ARTIFACT_NAME: x86_64-apple-build\n+        SCRIPT: make ci-resume-subset-E\n+      x86_64-apple-F:\n+        RUST_CHECK_TARGET: check\n+        RUST_CONFIGURE_ARGS: --build=x86_64-apple-darwin --enable-sanitizers --enable-profiler --set rust.jemalloc\n+        RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n+        MACOSX_DEPLOYMENT_TARGET: 10.8\n+        MACOSX_STD_DEPLOYMENT_TARGET: 10.7\n+        NO_LLVM_ASSERTIONS: 1\n+        NO_DEBUG_ASSERTIONS: 1\n+        ARTIFACT_NAME: x86_64-apple-build\n+        SCRIPT: make ci-resume-subset-F\n+      x86_64-apple-G:\n+        RUST_CHECK_TARGET: check\n+        RUST_CONFIGURE_ARGS: --build=x86_64-apple-darwin --enable-sanitizers --enable-profiler --set rust.jemalloc\n+        RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n+        MACOSX_DEPLOYMENT_TARGET: 10.8\n+        MACOSX_STD_DEPLOYMENT_TARGET: 10.7\n+        NO_LLVM_ASSERTIONS: 1\n+        NO_DEBUG_ASSERTIONS: 1\n+        ARTIFACT_NAME: x86_64-apple-build\n+        SCRIPT: make ci-resume-subset-G\n+      x86_64-apple-H:\n+        RUST_CHECK_TARGET: check\n+        RUST_CONFIGURE_ARGS: --build=x86_64-apple-darwin --enable-sanitizers --enable-profiler --set rust.jemalloc\n+        RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n+        MACOSX_DEPLOYMENT_TARGET: 10.8\n+        MACOSX_STD_DEPLOYMENT_TARGET: 10.7\n+        NO_LLVM_ASSERTIONS: 1\n+        NO_DEBUG_ASSERTIONS: 1\n+        ARTIFACT_NAME: x86_64-apple-build\n+        SCRIPT: make ci-resume-subset-H"}, {"sha": "818b613740e6ef46de20dfe3c4d96d10e7902afa", "filename": ".azure-pipelines/auto.yml", "status": "added", "additions": 361, "deletions": 0, "changes": 361, "blob_url": "https://github.com/rust-lang/rust/blob/699376ada01dc6223e5365e79ae11c79502fd2ef/.azure-pipelines%2Fauto.yml", "raw_url": "https://github.com/rust-lang/rust/raw/699376ada01dc6223e5365e79ae11c79502fd2ef/.azure-pipelines%2Fauto.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.azure-pipelines%2Fauto.yml?ref=699376ada01dc6223e5365e79ae11c79502fd2ef", "patch": "@@ -0,0 +1,361 @@\n+#\n+# Azure Pipelines \"auto\" branch build for Rust on Linux, macOS, and Windows.\n+# \n+# Notes:\n+# To get sccache working, I (John Erickson) had to build it with the Azure feature enabled\n+# and with openssl statically-linked for Linux.\n+# Here's the build (with a backpointer to source) of where the bits came from:\n+# https://dev.azure.com/johnterickson/rust-lang/_build/results?buildId=275\n+\n+pr: none\n+# trigger:\n+# - auto\n+\n+variables:\n+- group: caching\n+\n+jobs:\n+- job: Linux\n+  timeoutInMinutes: 600\n+  pool:\n+    vmImage: ubuntu-16.04\n+  steps:\n+  - template: steps/linux.yml\n+  strategy:\n+    matrix:\n+      x86_64-gnu-llvm-6.0:\n+        IMAGE: x86_64-gnu-llvm-6.0\n+        RUST_BACKTRACE: 1\n+\n+      dist-x86_64-linux:\n+        IMAGE: dist-x86_64-linux\n+        DEPLOY: 1\n+\n+      # \"alternate\" deployments, these are \"nightlies\" but have LLVM assertions\n+      # turned on, they're deployed to a different location primarily for\n+      # additional testing.\n+      dist-x86_64-linux-alt:\n+        IMAGE: dist-x86_64-linux\n+        DEPLOY_ALT: 1\n+\n+      # Linux builders, remaining docker images        \n+      arm-android:\n+        IMAGE: arm-android\n+\n+      armhf-gnu:\n+        IMAGE: armhf-gnu\n+\n+      dist-various-1:\n+        IMAGE: dist-various-1\n+        DEPLOY: 1\n+\n+      dist-various-2:\n+        IMAGE: dist-various-2\n+        DEPLOY: 1\n+\n+      dist-aarch64-linux:\n+        IMAGE: dist-aarch64-linux\n+        DEPLOY: 1\n+\n+      dist-android:\n+        IMAGE: dist-android\n+        DEPLOY: 1\n+\n+      dist-arm-linux:\n+        IMAGE: dist-arm-linux\n+        DEPLOY: 1\n+\n+      dist-armhf-linux:\n+        IMAGE: dist-armhf-linux\n+        DEPLOY: 1\n+\n+      dist-armv7-linux:\n+        IMAGE: dist-armv7-linux\n+        DEPLOY: 1\n+\n+      dist-i586-gnu-i586-i686-musl:\n+        IMAGE: dist-i586-gnu-i586-i686-musl\n+        DEPLOY: 1\n+\n+      dist-i686-freebsd:\n+        IMAGE: dist-i686-freebsd\n+        DEPLOY: 1\n+\n+      dist-i686-linux:\n+        IMAGE: dist-i686-linux\n+        DEPLOY: 1\n+\n+      dist-mips-linux:\n+        IMAGE: dist-mips-linux\n+        DEPLOY: 1\n+\n+      dist-mips64-linux:\n+        IMAGE: dist-mips64-linux\n+        DEPLOY: 1\n+\n+      dist-mips64el-linux:\n+        IMAGE: dist-mips64el-linux\n+        DEPLOY: 1\n+\n+      dist-mipsel-linux:\n+        IMAGE: dist-mipsel-linux\n+        DEPLOY: 1\n+\n+      dist-powerpc-linux:\n+        IMAGE: dist-powerpc-linux\n+        DEPLOY: 1\n+\n+      dist-powerpc64-linux:\n+        IMAGE: dist-powerpc64-linux\n+        DEPLOY: 1\n+\n+      dist-powerpc64le-linux:\n+        IMAGE: dist-powerpc64le-linux\n+        DEPLOY: 1\n+\n+      dist-s390x-linux:\n+        IMAGE: dist-s390x-linux\n+        DEPLOY: 1\n+\n+      dist-x86_64-freebsd:\n+        IMAGE: dist-x86_64-freebsd\n+        DEPLOY: 1\n+\n+      dist-x86_64-musl:\n+        IMAGE: dist-x86_64-musl\n+        DEPLOY: 1\n+\n+      dist-x86_64-netbsd:\n+        IMAGE: dist-x86_64-netbsd\n+        DEPLOY: 1\n+\n+      asmjs:\n+        IMAGE: asmjs\n+      i686-gnu-1:\n+        IMAGE: i686-gnu-1\n+      i686-gnu-2:\n+        IMAGE: i686-gnu-2\n+      i686-gnu-nopt:\n+        IMAGE: i686-gnu-nopt\n+      test-various:\n+        IMAGE: test-various\n+      x86_64-gnu:\n+        IMAGE: x86_64-gnu\n+      x86_64-gnu-full-bootstrap:\n+        IMAGE: x86_64-gnu-full-bootstrap\n+      x86_64-gnu-aux:\n+        IMAGE: x86_64-gnu-aux\n+      x86_64-gnu-tools:\n+        IMAGE: x86_64-gnu-tools\n+      # FIXME if: branch = auto OR (type = pull_request AND commit_message =~ /(?i:^update.*\\b(rls|rustfmt|clippy|miri|cargo)\\b)/)\n+      x86_64-gnu-debug:\n+        IMAGE: x86_64-gnu-debug\n+      x86_64-gnu-nopt:\n+        IMAGE: x86_64-gnu-nopt\n+      x86_64-gnu-distcheck:\n+        IMAGE: x86_64-gnu-distcheck\n+      mingw-check:\n+        IMAGE: mingw-check\n+\n+- job: macOS\n+  timeoutInMinutes: 600\n+  pool:\n+    vmImage: macos-10.13\n+  steps:\n+  - checkout: self\n+    fetchDepth: 2\n+  - template: steps/macos.yml  \n+  strategy:\n+    matrix:\n+      dist-x86_64-apple-alt:\n+        RUST_CHECK_TARGET: dist\n+        RUST_CONFIGURE_ARGS: --enable-extended --enable-profiler --enable-lldb --set rust.jemalloc\n+        DEPLOY_ALT: 1\n+        RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n+        MACOSX_DEPLOYMENT_TARGET: 10.7\n+        NO_LLVM_ASSERTIONS: 1\n+        NO_DEBUG_ASSERTIONS: 1\n+\n+      # macOS builders. These are placed near the beginning because they are very\n+      # slow to run.\n+\n+      # OSX builders running tests, these run the full test suite.\n+      # NO_DEBUG_ASSERTIONS=1 to make them go faster, but also do have some\n+      # runners that run `//ignore-debug` tests.\n+      #\n+      # Note that the compiler is compiled to target 10.8 here because the Xcode\n+      # version that we're using, 8.2, cannot compile LLVM for OSX 10.7.\n+      x86_64-apple:\n+        RUST_CHECK_TARGET: check\n+        RUST_CONFIGURE_ARGS: --build=x86_64-apple-darwin --enable-sanitizers --enable-profiler --set rust.jemalloc\n+        RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n+        MACOSX_DEPLOYMENT_TARGET: 10.8\n+        MACOSX_STD_DEPLOYMENT_TARGET: 10.7\n+        NO_LLVM_ASSERTIONS: 1\n+        NO_DEBUG_ASSERTIONS: 1\n+\n+      i686-apple:\n+        RUST_CHECK_TARGET: check \n+        RUST_CONFIGURE_ARGS: --build=i686-apple-darwin --set rust.jemalloc\n+        RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n+        MACOSX_DEPLOYMENT_TARGET: 10.8\n+        MACOSX_STD_DEPLOYMENT_TARGET: 10.7\n+        NO_LLVM_ASSERTIONS: 1\n+        NO_DEBUG_ASSERTIONS: 1\n+\n+      dist-i686-apple:\n+        RUST_CHECK_TARGET: dist\n+        RUST_CONFIGURE_ARGS: --build=i686-apple-darwin --enable-full-tools --enable-profiler --enable-lldb --set rust.jemalloc\n+        DEPLOY: 1\n+        RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n+        MACOSX_DEPLOYMENT_TARGET: 10.7\n+        NO_LLVM_ASSERTIONS: 1\n+        NO_DEBUG_ASSERTIONS: 1\n+        DIST_REQUIRE_ALL_TOOLS: 1\n+\n+      dist-x86_64-apple:\n+        RUST_CHECK_TARGET: dist\n+        RUST_CONFIGURE_ARGS: --target=aarch64-apple-ios,armv7-apple-ios,armv7s-apple-ios,i386-apple-ios,x86_64-apple-ios --enable-full-tools --enable-sanitizers --enable-profiler --enable-lldb --set rust.jemalloc\n+        DEPLOY: 1\n+        RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n+        MACOSX_DEPLOYMENT_TARGET: 10.7\n+        NO_LLVM_ASSERTIONS: 1\n+        NO_DEBUG_ASSERTIONS: 1\n+        DIST_REQUIRE_ALL_TOOLS: 1\n+\n+- job: Windows\n+  timeoutInMinutes: 600\n+  pool:\n+    vmImage: 'vs2017-win2016'\n+  steps:\n+  - template: steps/windows.yml\n+  strategy:\n+    matrix:\n+      # 32/64 bit MSVC tests\n+      x86_64-msvc-1:\n+        MSYS_BITS: 64\n+        RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc --enable-profiler\n+        SCRIPT: make ci-subset-1\n+        # FIXME(#59637)\n+        NO_DEBUG_ASSERTIONS: 1\n+        NO_LLVM_ASSERTIONS: 1\n+      x86_64-msvc-2:\n+        MSYS_BITS: 64\n+        RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc --enable-profiler\n+        SCRIPT: make ci-subset-2\n+      i686-msvc-1:\n+        MSYS_BITS: 32\n+        RUST_CONFIGURE_ARGS: --build=i686-pc-windows-msvc\n+        SCRIPT: make ci-subset-1\n+      i686-msvc-2:\n+        MSYS_BITS: 32\n+        RUST_CONFIGURE_ARGS: --build=i686-pc-windows-msvc\n+        SCRIPT: make ci-subset-2\n+      # MSVC aux tests\n+      x86_64-msvc-aux:\n+        MSYS_BITS: 64\n+        RUST_CHECK_TARGET: check-aux EXCLUDE_CARGO=1\n+        RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc\n+      x86_64-msvc-cargo:\n+        MSYS_BITS: 64\n+        SCRIPT: python x.py test src/tools/cargotest src/tools/cargo\n+        RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc\n+        VCVARS_BAT: vcvars64.bat\n+      # MSVC tools tests\n+      x86_64-msvc-tools:\n+        MSYS_BITS: 64\n+        SCRIPT: src/ci/docker/x86_64-gnu-tools/checktools.sh x.py /tmp/toolstates.json windows\n+        RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc --save-toolstates=/tmp/toolstates.json --enable-test-miri\n+\n+      # 32/64-bit MinGW builds.\n+      #\n+      # We are using MinGW with posix threads since LLVM does not compile with\n+      # the win32 threads version due to missing support for C++'s std::thread.\n+      #\n+      # Instead of relying on the MinGW version installed on appveryor we download\n+      # and install one ourselves so we won't be surprised by changes to appveyor's\n+      # build image.\n+      #\n+      # Finally, note that the downloads below are all in the `rust-lang-ci` S3\n+      # bucket, but they cleraly didn't originate there! The downloads originally\n+      # came from the mingw-w64 SourceForge download site. Unfortunately\n+      # SourceForge is notoriously flaky, so we mirror it on our own infrastructure.\n+      i686-mingw-1:\n+        MSYS_BITS: 32\n+        RUST_CONFIGURE_ARGS: --build=i686-pc-windows-gnu\n+        SCRIPT: make ci-subset-1\n+        MINGW_URL: https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror\n+        MINGW_ARCHIVE: i686-6.3.0-release-posix-dwarf-rt_v5-rev2.7z\n+        MINGW_DIR: mingw32\n+        # FIXME(#59637)\n+        NO_DEBUG_ASSERTIONS: 1\n+        NO_LLVM_ASSERTIONS: 1\n+      i686-mingw-2:\n+        MSYS_BITS: 32\n+        RUST_CONFIGURE_ARGS: --build=i686-pc-windows-gnu\n+        SCRIPT: make ci-subset-2\n+        MINGW_URL: https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror\n+        MINGW_ARCHIVE: i686-6.3.0-release-posix-dwarf-rt_v5-rev2.7z\n+        MINGW_DIR: mingw32\n+      x86_64-mingw-1:\n+        MSYS_BITS: 64\n+        SCRIPT: make ci-subset-1\n+        RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-gnu\n+        MINGW_URL: https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror\n+        MINGW_ARCHIVE: x86_64-6.3.0-release-posix-seh-rt_v5-rev2.7z\n+        MINGW_DIR: mingw64\n+        # FIXME(#59637)\n+        NO_DEBUG_ASSERTIONS: 1\n+        NO_LLVM_ASSERTIONS: 1\n+      x86_64-mingw-2:\n+        MSYS_BITS: 64\n+        SCRIPT: make ci-subset-2\n+        RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-gnu\n+        MINGW_URL: https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror\n+        MINGW_ARCHIVE: x86_64-6.3.0-release-posix-seh-rt_v5-rev2.7z\n+        MINGW_DIR: mingw64\n+\n+      # 32/64 bit MSVC and GNU deployment\n+      dist-x86_64-msvc:\n+        RUST_CONFIGURE_ARGS: >\n+          --build=x86_64-pc-windows-msvc\n+          --target=x86_64-pc-windows-msvc,aarch64-pc-windows-msvc\n+          --enable-full-tools\n+          --enable-profiler\n+        SCRIPT: python x.py dist\n+        DIST_REQUIRE_ALL_TOOLS: 1\n+        DEPLOY: 1\n+      dist-i686-msvc:\n+        RUST_CONFIGURE_ARGS: >\n+          --build=i686-pc-windows-msvc\n+          --target=i586-pc-windows-msvc\n+          --enable-full-tools\n+          --enable-profiler\n+        SCRIPT: python x.py dist\n+        DIST_REQUIRE_ALL_TOOLS: 1\n+        DEPLOY: 1\n+      dist-i686-mingw:\n+        MSYS_BITS: 32\n+        RUST_CONFIGURE_ARGS: --build=i686-pc-windows-gnu --enable-full-tools\n+        SCRIPT: python x.py dist\n+        MINGW_URL: https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror\n+        MINGW_ARCHIVE: i686-6.3.0-release-posix-dwarf-rt_v5-rev2.7z\n+        MINGW_DIR: mingw32\n+        DIST_REQUIRE_ALL_TOOLS: 1\n+        DEPLOY: 1\n+      dist-x86_64-mingw:\n+        MSYS_BITS: 64\n+        SCRIPT: python x.py dist\n+        RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-gnu --enable-full-tools\n+        MINGW_URL: https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror\n+        MINGW_ARCHIVE: x86_64-6.3.0-release-posix-seh-rt_v5-rev2.7z\n+        MINGW_DIR: mingw64\n+        DIST_REQUIRE_ALL_TOOLS: 1\n+        DEPLOY: 1\n+\n+      # \"alternate\" deployment, see .travis.yml for more info\n+      dist-x86_64-msvc-alt:\n+        MSYS_BITS: 64\n+        RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc --enable-extended --enable-profiler\n+        SCRIPT: python x.py dist\n+        DEPLOY_ALT: 1"}, {"sha": "e30c73c5e924165f3539f9fd07d87fb65fe6d03a", "filename": ".azure-pipelines/master.yml", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/699376ada01dc6223e5365e79ae11c79502fd2ef/.azure-pipelines%2Fmaster.yml", "raw_url": "https://github.com/rust-lang/rust/raw/699376ada01dc6223e5365e79ae11c79502fd2ef/.azure-pipelines%2Fmaster.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.azure-pipelines%2Fmaster.yml?ref=699376ada01dc6223e5365e79ae11c79502fd2ef", "patch": "@@ -0,0 +1,22 @@\n+#\n+# Azure Pipelines job to publish toolstate. Only triggers on pushes to master.\n+#\n+\n+pr: none\n+trigger:\n+- master\n+\n+pool:\n+  vmImage: ubuntu-16.04\n+\n+steps: \n+- checkout: self\n+  fetchDepth: 2\n+\n+- script: |\n+    export MESSAGE_FILE=$(mktemp -t msg.XXXXXX)\n+    . src/ci/docker/x86_64-gnu-tools/repo.sh\n+    commit_toolstate_change \"$MESSAGE_FILE\" \"$BUILD_SOURCESDIRECTORY/src/tools/publish_toolstate.py\" \"$(git rev-parse HEAD)\" \"$(git log --format=%s -n1 HEAD)\" \"$MESSAGE_FILE\" \"$TOOLSTATE_REPO_ACCESS_TOKEN\"\n+  displayName: Publish toolstate  \n+  env:\n+    TOOLSTATE_REPO_ACCESS_TOKEN: $(TOOLSTATE_REPO_ACCESS_TOKEN_SECRET)"}, {"sha": "a2a4fc2516683dd3282fda676017d9cd00b237d6", "filename": ".azure-pipelines/pr.yml", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/699376ada01dc6223e5365e79ae11c79502fd2ef/.azure-pipelines%2Fpr.yml", "raw_url": "https://github.com/rust-lang/rust/raw/699376ada01dc6223e5365e79ae11c79502fd2ef/.azure-pipelines%2Fpr.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.azure-pipelines%2Fpr.yml?ref=699376ada01dc6223e5365e79ae11c79502fd2ef", "patch": "@@ -0,0 +1,26 @@\n+#\n+# Azure Pipelines pull request build for Rust\n+# \n+\n+trigger: none\n+pr:\n+- master # FIXME: really just want any branch, but want an explicit \"pr\" property set so it's clear\n+\n+variables:\n+- group: caching-pr\n+\n+jobs:\n+- job: Linux\n+  timeoutInMinutes: 600\n+  pool:\n+    vmImage: ubuntu-16.04\n+  steps:\n+    - template: steps/linux.yml\n+  strategy:\n+    matrix:\n+      x86_64-gnu-llvm-6.0:\n+        RUST_BACKTRACE: 1\n+      \n+      x86_64-gnu-tools: {}\n+      # if: branch = auto OR (type = pull_request AND commit_message =~ /(?i:^update.*\\b(rls|rustfmt|clippy|miri|cargo)\\b)/)\n+      mingw-check: {}"}, {"sha": "288c4c9854e5ab3e153b2434576836862a6cacbc", "filename": ".azure-pipelines/steps/linux.yml", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/699376ada01dc6223e5365e79ae11c79502fd2ef/.azure-pipelines%2Fsteps%2Flinux.yml", "raw_url": "https://github.com/rust-lang/rust/raw/699376ada01dc6223e5365e79ae11c79502fd2ef/.azure-pipelines%2Fsteps%2Flinux.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.azure-pipelines%2Fsteps%2Flinux.yml?ref=699376ada01dc6223e5365e79ae11c79502fd2ef", "patch": "@@ -0,0 +1,42 @@\n+steps:\n+- checkout: self\n+  fetchDepth: 2\n+\n+- template: show-environment-variables.yml\n+- template: show-disk-usage.yml\n+\n+- bash: |\n+    sudo apt install gdb\n+        \n+    curl -fo $HOME/stamp https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror/2017-03-17-stamp-x86_64-unknown-linux-musl\n+    chmod +x $HOME/stamp\n+    \n+    export PATH=$PATH:$HOME/.local/bin:$HOME/Library/Python/2.7/bin/:$HOME\n+    echo \"##vso[task.setvariable variable=PATH;]$PATH\"\n+\n+    mkdir -p $HOME/rustsrc\n+  displayName:  Prep\n+\n+# FIXME(#46924): these two commands are required to enable IPv6,\n+# they shouldn't exist, please revert once more official solutions appeared.\n+# see https://github.com/travis-ci/travis-ci/issues/8891#issuecomment-353403729\n+- bash: |\n+    echo '{\"ipv6\":true,\"fixed-cidr-v6\":\"fd9a:8454:6789:13f7::/64\"}' | sudo tee /etc/docker/daemon.json\n+    sudo service docker restart\n+  displayName: Enable IPv6  \n+\n+# FIXME: using the job display name feels brittle. Is there a better variable that represents the current matrix key?\n+- bash: |\n+    export RUN_SCRIPT=\"$BUILD_SOURCESDIRECTORY/src/ci/init_repo.sh . $HOME/rustsrc && src/ci/docker/run.sh $IMAGE\"\n+    echo \"##vso[task.setvariable variable=IMAGE]$IMAGE\"\n+    echo \"##vso[task.setvariable variable=RUN_SCRIPT]$RUN_SCRIPT\"\n+  displayName: Prepare run script\n+\n+- template: show-environment-variables.yml\n+\n+- bash: sudo sh -c 'echo \"/checkout/obj/cores/core.%p.%E\" > /proc/sys/kernel/core_pattern'\n+  displayName: Enable core dump\n+\n+- template: verify-publish-toolstate.yml\n+\n+- template: run-script.yml"}, {"sha": "a217df6f3081edeb69c9b819053216a975bad841", "filename": ".azure-pipelines/steps/macos.yml", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/699376ada01dc6223e5365e79ae11c79502fd2ef/.azure-pipelines%2Fsteps%2Fmacos.yml", "raw_url": "https://github.com/rust-lang/rust/raw/699376ada01dc6223e5365e79ae11c79502fd2ef/.azure-pipelines%2Fsteps%2Fmacos.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.azure-pipelines%2Fsteps%2Fmacos.yml?ref=699376ada01dc6223e5365e79ae11c79502fd2ef", "patch": "@@ -0,0 +1,47 @@\n+steps:\n+- template: show-disk-usage.yml\n+\n+- bash: |\n+    export PATH=$PATH:$HOME/.local/bin:$HOME/Library/Python/2.7/bin/\n+    mkdir -p $HOME/rustsrc    \n+    echo \"##vso[task.setvariable variable=PATH;]$PATH\"\n+\n+    curl -fo /usr/local/bin/sccache https://rustlangtools.blob.core.windows.net/public/stable-x86_64-apple-darwin.sccache\n+    chmod +x /usr/local/bin/sccache\n+\n+    curl -fo /usr/local/bin/stamp https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror/2017-03-17-stamp-x86_64-apple-darwin\n+    chmod +x /usr/local/bin/stamp\n+    \n+    export CC=`pwd`/clang+llvm-7.0.0-x86_64-apple-darwin/bin/clang\n+    echo \"##vso[task.setvariable variable=CC]$CC\"\n+    \n+    export CXX=`pwd`/clang+llvm-7.0.0-x86_64-apple-darwin/bin/clang++\n+    echo \"##vso[task.setvariable variable=CXX]$CXX\"\n+    \n+    echo \"##vso[task.setvariable variable=AR]ar\"\n+  displayName: Prep\n+\n+- bash: brew install gnu-tar\n+  displayName: install a tar that works well\n+\n+- bash: |\n+    curl -f http://releases.llvm.org/7.0.0/clang+llvm-7.0.0-x86_64-apple-darwin.tar.xz | tar xJf - \n+  displayName: Download clang\n+  \n+- bash: |\n+    brew update\n+    brew install xz\n+    brew install swig\n+  condition: and(succeeded(), eq(variables['RUST_CHECK_TARGET'],'dist'))\n+  displayName: Install xz and swigw\n+\n+- bash: |\n+    export RUN_SCRIPT=\"$BUILD_SOURCESDIRECTORY/src/ci/init_repo.sh . $HOME/rustsrc && src/ci/run.sh\"\n+    echo \"##vso[task.setvariable variable=RUN_SCRIPT]$RUN_SCRIPT\"\n+  displayName: Prepare run script (init and run)\n+\n+- template: show-environment-variables.yml\n+\n+- template: verify-publish-toolstate.yml\n+\n+- template: run-script.yml"}, {"sha": "4ab3e2e06d36ad4a52a233281b1fc826bd448bc1", "filename": ".azure-pipelines/steps/run-script.yml", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/699376ada01dc6223e5365e79ae11c79502fd2ef/.azure-pipelines%2Fsteps%2Frun-script.yml", "raw_url": "https://github.com/rust-lang/rust/raw/699376ada01dc6223e5365e79ae11c79502fd2ef/.azure-pipelines%2Fsteps%2Frun-script.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.azure-pipelines%2Fsteps%2Frun-script.yml?ref=699376ada01dc6223e5365e79ae11c79502fd2ef", "patch": "@@ -0,0 +1,24 @@\n+steps:\n+# Log time information from this machine and an external machine for insight into possible\n+# clock drift. Timezones don't matter since relative deltas give all the necessary info.\n+- bash: |\n+    date && (curl -fs --head https://google.com | grep ^Date: | sed 's/Date: //g' || true)\n+  displayName: Log time information (before)\n+\n+- bash: |    \n+    which sccache\n+    stamp sh -x -c \"$RUN_SCRIPT\"\n+  env:\n+    CI: true\n+    CI_JOB_NAME: $(IMAGE)\n+    SRC: .\n+\n+    # Explicitly decrypt secret variables\n+    # See https://docs.microsoft.com/azure/devops/pipelines/process/variables?view=azure-devops&tabs=yaml%2Cbatch#secret-variables\n+    SCCACHE_AZURE_CONNECTION_STRING: $(SCCACHE_AZURE_CONNECTION_STRING_SECRET)\n+    DOCKER_LAYER_CACHE_AZURE_STORAGE_ACCOUNT_KEY: $(DOCKER_LAYER_CACHE_AZURE_STORAGE_ACCOUNT_KEY_SECRET)\n+  displayName: Run script\n+\n+- bash: |\n+    date && (curl -fs --head https://google.com | grep ^Date: | sed 's/Date: //g' || true)\n+  displayName: Log time information (after)"}, {"sha": "902d8036471742a8e2a26efc9ccbeb36ec4b04d3", "filename": ".azure-pipelines/steps/show-disk-usage.yml", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/699376ada01dc6223e5365e79ae11c79502fd2ef/.azure-pipelines%2Fsteps%2Fshow-disk-usage.yml", "raw_url": "https://github.com/rust-lang/rust/raw/699376ada01dc6223e5365e79ae11c79502fd2ef/.azure-pipelines%2Fsteps%2Fshow-disk-usage.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.azure-pipelines%2Fsteps%2Fshow-disk-usage.yml?ref=699376ada01dc6223e5365e79ae11c79502fd2ef", "patch": "@@ -0,0 +1,5 @@\n+steps:\n+- bash: |\n+    df -h\n+    du . | sort -nr | head -n100\n+  displayName: Show disk usage"}, {"sha": "f6ed063ec6be5d872e6c0def8289bb8f34f35070", "filename": ".azure-pipelines/steps/show-environment-variables.yml", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/699376ada01dc6223e5365e79ae11c79502fd2ef/.azure-pipelines%2Fsteps%2Fshow-environment-variables.yml", "raw_url": "https://github.com/rust-lang/rust/raw/699376ada01dc6223e5365e79ae11c79502fd2ef/.azure-pipelines%2Fsteps%2Fshow-environment-variables.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.azure-pipelines%2Fsteps%2Fshow-environment-variables.yml?ref=699376ada01dc6223e5365e79ae11c79502fd2ef", "patch": "@@ -0,0 +1,3 @@\n+steps:\n+- bash: printenv | sort\n+  displayName: Show environment variables\n\\ No newline at end of file"}, {"sha": "5531c90e090a781ea99f66356f3d1e3507536e47", "filename": ".azure-pipelines/steps/verify-publish-toolstate.yml", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/699376ada01dc6223e5365e79ae11c79502fd2ef/.azure-pipelines%2Fsteps%2Fverify-publish-toolstate.yml", "raw_url": "https://github.com/rust-lang/rust/raw/699376ada01dc6223e5365e79ae11c79502fd2ef/.azure-pipelines%2Fsteps%2Fverify-publish-toolstate.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.azure-pipelines%2Fsteps%2Fverify-publish-toolstate.yml?ref=699376ada01dc6223e5365e79ae11c79502fd2ef", "patch": "@@ -0,0 +1,9 @@\n+steps:\n+- bash: |\n+    git clone --depth=1 https://github.com/rust-lang-nursery/rust-toolstate.git\n+    cd rust-toolstate\n+    python2.7 \"$BUILD_SOURCESDIRECTORY/src/tools/publish_toolstate.py\" \"$(git rev-parse HEAD)\" \"$(git log --format=%s -n1 HEAD)\" \"\" \"\"\n+    cd ..\n+    rm -rf rust-toolstate\n+  condition: and(succeeded(), eq(variables['IMAGE'], 'mingw-check'))\n+  displayName: Verify the publish_toolstate script works"}, {"sha": "5dcba664bee879ef5ad8783754c777b11d1aca84", "filename": ".azure-pipelines/steps/windows.yml", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/rust-lang/rust/blob/699376ada01dc6223e5365e79ae11c79502fd2ef/.azure-pipelines%2Fsteps%2Fwindows.yml", "raw_url": "https://github.com/rust-lang/rust/raw/699376ada01dc6223e5365e79ae11c79502fd2ef/.azure-pipelines%2Fsteps%2Fwindows.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.azure-pipelines%2Fsteps%2Fwindows.yml?ref=699376ada01dc6223e5365e79ae11c79502fd2ef", "patch": "@@ -0,0 +1,160 @@\n+steps:\n+- checkout: self\n+  fetchDepth: 2\n+\n+- bash: |\n+    set -x\n+    git submodule\n+    export SUBMODULES_EXCLUDES=$(git submodule | grep -Eow 'src/[^ ]+' | sed 's/\\(.*\\)/--exclude=\\1\\/\\.git/')\n+    echo \"##vso[task.setvariable variable=SUBMODULES_EXCLUDES;]$SUBMODULES_EXCLUDES\"\n+    \n+- script: |\n+    REM echo hack as drive D is too small\n+    IF NOT \"%DISABLE_DISK_SPACE_HACK%\"==\"1\" (\n+      mkdir c:\\MORE_SPACE\n+      mklink /J build c:\\MORE_SPACE\n+    )\n+\n+- script: |\n+    set MSYS_PATH=%CD%\\citools\\msys64\n+    choco install msys2 --params=\"/InstallDir:%MSYS_PATH% /NoPath\" -y\n+    set PATH=%MSYS_PATH%\\usr\\bin;%PATH%\n+    pacman -S --noconfirm --needed base-devel ca-certificates make diffutils tar \n+    IF \"%MINGW_URL%\"==\"\" (\n+      IF \"%MSYS_BITS%\"==\"32\" pacman -S --noconfirm --needed mingw-w64-i686-toolchain mingw-w64-i686-cmake mingw-w64-i686-gcc mingw-w64-i686-python2\n+      IF \"%MSYS_BITS%\"==\"64\" pacman -S --noconfirm --needed mingw-w64-x86_64-toolchain mingw-w64-x86_64-cmake mingw-w64-x86_64-gcc mingw-w64-x86_64-python2\n+    )\n+    where rev\n+    rev --help\n+    where make\n+\n+    echo ##vso[task.setvariable variable=MSYS_PATH]%MSYS_PATH%\n+    echo ##vso[task.prependpath]%MSYS_PATH%\\usr\\bin\n+  displayName: Install msys2\n+\n+# If we need to download a custom MinGW, do so here and set the path\n+# appropriately.\n+#\n+# Note that this *also* means that we're not using what is typically\n+# /mingw32/bin/python2.7.exe, which is a \"correct\" python interpreter where\n+# /usr/bin/python2.7.exe is not. To ensure we use the right interpreter we\n+# move `C:\\Python27` ahead in PATH and then also make sure the `python2.7.exe`\n+# file exists in there (which it doesn't by default).\n+- script: |\n+    powershell -Command \"iwr -outf %MINGW_ARCHIVE% %MINGW_URL%/%MINGW_ARCHIVE%\"\n+    7z x -y %MINGW_ARCHIVE% > nul\n+    echo ##vso[task.prependpath]%CD%\\%MINGW_DIR%\\bin\n+  condition: and(succeeded(), ne(variables['MINGW_URL'],''))\n+  displayName: Download custom MinGW\n+\n+# If we're compiling for MSVC then we, like most other distribution builders,\n+# switch to clang as the compiler. This'll allow us eventually to enable LTO\n+# amongst LLVM and rustc. Note that we only do this on MSVC as I don't think\n+# clang has an output mode compatible with MinGW that we need. If it does we\n+# should switch to clang for MinGW as well!\n+#\n+# Note that the LLVM installer is an NSIS installer\n+#\n+# Original downloaded here came from\n+# http://releases.llvm.org/7.0.0/LLVM-7.0.0-win64.exe\n+- script: |\n+    powershell -Command \"iwr -outf %TEMP%\\LLVM-7.0.0-win64.exe https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror/LLVM-7.0.0-win64.exe\"\n+    set CLANG_DIR=%CD%\\citools\\clang-rust\n+    %TEMP%\\LLVM-7.0.0-win64.exe /S /NCRC /D=%CLANG_DIR%\n+    set RUST_CONFIGURE_ARGS=%RUST_CONFIGURE_ARGS% --set llvm.clang-cl=%CLANG_DIR%\\bin\\clang-cl.exe\n+    echo ##vso[task.setvariable variable=RUST_CONFIGURE_ARGS]%RUST_CONFIGURE_ARGS%\n+  condition: and(succeeded(), eq(variables['MINGW_URL'],''))\n+  displayName: Download clang\n+\n+# Here we do a pretty heinous thing which is to mangle the MinGW installation\n+# we just had above. Currently, as of this writing, we're using MinGW-w64\n+# builds of gcc, and that's currently at 6.3.0. We use 6.3.0 as it appears to\n+# be the first version which contains a fix for #40546, builds randomly\n+# failing during LLVM due to ar.exe/ranlib.exe failures.\n+#\n+# Unfortunately, though, 6.3.0 *also* is the first version of MinGW-w64 builds\n+# to contain a regression in gdb (#40184). As a result if we were to use the\n+# gdb provided (7.11.1) then we would fail all debuginfo tests.\n+#\n+# In order to fix spurious failures (pretty high priority) we use 6.3.0. To\n+# avoid disabling gdb tests we download an *old* version of gdb, specifically\n+# that found inside the 6.2.0 distribution. We then overwrite the 6.3.0 gdb\n+# with the 6.2.0 gdb to get tests passing.\n+#\n+# Note that we don't literally overwrite the gdb.exe binary because it appears\n+# to just use gdborig.exe, so that's the binary we deal with instead.\n+- script: |\n+    echo ON\n+    powershell -Command \"iwr -outf 2017-04-20-%MSYS_BITS%bit-gdborig.exe %MINGW_URL%/2017-04-20-%MSYS_BITS%bit-gdborig.exe\"\n+    mv 2017-04-20-%MSYS_BITS%bit-gdborig.exe %MINGW_DIR%\\bin\\gdborig.exe\n+  condition: and(succeeded(), ne(variables['MINGW_URL'],''))\n+  displayName: Override with 6.3.0 gdb with 6.2.0 gdb\n+\n+# Otherwise pull in the MinGW installed on appveyor\n+- script: |\n+    echo Find mingw\n+    set PATH | findstr /i msys\n+    set PATH | findstr /i mingw\n+    echo ##vso[task.prependpath]%MSYS_PATH%\\mingw%MSYS_BITS%\\bin\n+  condition: and(succeeded(), eq(variables['MINGW_URL'],''))\n+  displayName: Add MinGW to path\n+\n+- script: |\n+    copy C:\\Python27amd64\\python.exe C:\\Python27amd64\\python2.7.exe\n+    echo ##vso[task.prependpath]C:\\Python27amd64\n+  displayName: Prefer the \"native\" Python as LLVM has trouble building with MSYS sometimes\n+\n+- script: |\n+    md sccache\n+    powershell -Command \"iwr -outf sccache\\sccache.exe https://rustlangtools.blob.core.windows.net/public/stable-x86_64-pc-windows-msvc.sccache.exe\"\n+    echo ##vso[task.prependpath]%CD%\\sccache\n+  displayName: Download and install sccache\n+\n+# Note that this is originally from the github releases patch of Ninja\n+- script: |\n+    md ninja\n+    powershell -Command \"iwr -outf 2017-03-15-ninja-win.zip https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror/2017-03-15-ninja-win.zip\"\n+    7z x -oninja 2017-03-15-ninja-win.zip\n+    del 2017-03-15-ninja-win.zip\n+    set RUST_CONFIGURE_ARGS=%RUST_CONFIGURE_ARGS% --enable-ninja\n+    echo ##vso[task.setvariable variable=RUST_CONFIGURE_ARGS]%RUST_CONFIGURE_ARGS%\n+    echo ##vso[task.prependpath]%CD%\\ninja\n+  displayName: Download and install ninja\n+\n+- script: |\n+    mkdir handle\n+    powershell -Command \"iwr -outf 2017-05-15-Handle.zip https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror/2017-05-15-Handle.zip\"\n+    7z x -ohandle 2017-05-15-Handle.zip\n+    del 2017-05-15-Handle.zip\n+    set PATH=%PATH%;%CD%\\handle\n+    handle.exe -accepteula -help\n+    echo ##vso[task.setvariable variable=PATH]%PATH%\n+  displayName: Help debug handle issues\n+\n+- template: show-environment-variables.yml\n+\n+- script: |\n+    REM echo force the specific VS version https://github.com/johnterickson/rust/issues/8\n+    IF \"%VCVARS_BAT%\" NEQ \"\" ( \n+      CALL \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Auxiliary\\Build\\%VCVARS_BAT%\"\n+    )\n+\n+    where sccache\n+    where rev\n+    set | findstr /v SCCACHE_AZURE_CONNECTION_STRING\n+\n+    if not exist D:\\cache\\rustsrc\\NUL mkdir D:\\cache\\rustsrc\n+    \n+    sh src/ci/init_repo.sh . /d/cache/rustsrc\n+    sh src/ci/run.sh\n+  env:      \n+    CI: true\n+    CI_JOB_NAME: $(System.JobDisplayName)\n+    SRC: .\n+    NO_CCACHE: 1\n+\n+    # explicitly decrypt secret variables\n+    # see https://docs.microsoft.com/en-us/azure/devops/pipelines/process/variables?view=azure-devops&tabs=yaml%2Cbatch\n+    SCCACHE_AZURE_CONNECTION_STRING: $(SCCACHE_AZURE_CONNECTION_STRING_SECRET)\n+    DOCKER_LAYER_CACHE_AZURE_STORAGE_ACCOUNT_KEY: $(DOCKER_LAYER_CACHE_AZURE_STORAGE_ACCOUNT_KEY_SECRET)\n+  displayName: Run script"}, {"sha": "c4004aa46a97a6648da02bf1946e4e2d0d3a35ff", "filename": ".azure-pipelines/test.yml", "status": "added", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/699376ada01dc6223e5365e79ae11c79502fd2ef/.azure-pipelines%2Ftest.yml", "raw_url": "https://github.com/rust-lang/rust/raw/699376ada01dc6223e5365e79ae11c79502fd2ef/.azure-pipelines%2Ftest.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.azure-pipelines%2Ftest.yml?ref=699376ada01dc6223e5365e79ae11c79502fd2ef", "patch": "@@ -0,0 +1,131 @@\n+#\n+# Azure Pipelines test build for Rust on Linux, macOS, and Windows.\n+# \n+\n+pr: none\n+trigger: none\n+\n+variables:\n+- group: caching\n+\n+jobs:\n+- job: Linux\n+  timeoutInMinutes: 600\n+  pool:\n+    vmImage: ubuntu-16.04\n+  steps:\n+  - template: steps/linux.yml\n+  strategy:\n+    matrix:\n+      x86_64-gnu-llvm-6.0:\n+        RUST_BACKTRACE: 1\n+\n+      dist-x86_64-linux:\n+        DEPLOY: 1\n+\n+      # \"alternate\" deployments, these are \"nightlies\" but have LLVM assertions\n+      # turned on, they're deployed to a different location primarily for\n+      # additional testing.\n+      dist-x86_64-linux-alt:\n+        IMAGE: dist-x86_64-linux\n+        DEPLOY_ALT: 1\n+\n+      dist-various-1:\n+        DEPLOY: 1\n+\n+      dist-android:\n+        DEPLOY: 1\n+\n+      dist-x86_64-freebsd:\n+        DEPLOY: 1\n+\n+      i686-gnu-nopt: {}\n+      test-various: {}      \n+      x86_64-gnu-tools: {}\n+      # FIXME if: branch = auto OR (type = pull_request AND commit_message =~ /(?i:^update.*\\b(rls|rustfmt|clippy|miri|cargo)\\b)/)\n+      x86_64-gnu-nopt: {}\n+      x86_64-gnu-distcheck: {}\n+      mingw-check: {}\n+\n+- job: macOS\n+  timeoutInMinutes: 600\n+  pool:\n+    vmImage: macos-10.13\n+  steps:\n+  - template: steps/macos.yml  \n+  strategy:\n+    matrix:\n+      dist-x86_64-apple-alt:\n+        RUST_CHECK_TARGET: dist\n+        RUST_CONFIGURE_ARGS: --enable-extended --enable-profiler --enable-lldb --set rust.jemalloc\n+        DEPLOY_ALT: 1\n+        RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n+        MACOSX_DEPLOYMENT_TARGET: 10.7\n+        NO_LLVM_ASSERTIONS: 1\n+        NO_DEBUG_ASSERTIONS: 1\n+\n+      # macOS builders. These are placed near the beginning because they are very\n+      # slow to run.\n+\n+      # OSX builders running tests, these run the full test suite.\n+      # NO_DEBUG_ASSERTIONS=1 to make them go faster, but also do have some\n+      # runners that run `//ignore-debug` tests.\n+      #\n+      # Note that the compiler is compiled to target 10.8 here because the Xcode\n+      # version that we're using, 8.2, cannot compile LLVM for OSX 10.7.\n+      x86_64-apple:\n+        RUST_CHECK_TARGET: check\n+        RUST_CONFIGURE_ARGS: --build=x86_64-apple-darwin --enable-sanitizers --enable-profiler --set rust.jemalloc\n+        RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n+        MACOSX_DEPLOYMENT_TARGET: 10.8\n+        MACOSX_STD_DEPLOYMENT_TARGET: 10.7\n+        NO_LLVM_ASSERTIONS: 1\n+        NO_DEBUG_ASSERTIONS: 1\n+\n+- job: Windows\n+  timeoutInMinutes: 600\n+  pool:\n+    vmImage: 'vs2017-win2016'\n+  steps:\n+  - template: steps/windows.yml\n+  strategy:\n+    matrix:\n+      x86_64-msvc-tools:\n+        MSYS_BITS: 64\n+        SCRIPT: src/ci/docker/x86_64-gnu-tools/checktools.sh x.py /tmp/toolstates.json windows\n+        RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc --save-toolstates=/tmp/toolstates.json --enable-test-miri\n+\n+      # 32/64-bit MinGW builds.\n+      #\n+      # We are using MinGW with posix threads since LLVM does not compile with\n+      # the win32 threads version due to missing support for C++'s std::thread.\n+      #\n+      # Instead of relying on the MinGW version installed on appveryor we download\n+      # and install one ourselves so we won't be surprised by changes to appveyor's\n+      # build image.\n+      #\n+      # Finally, note that the downloads below are all in the `rust-lang-ci` S3\n+      # bucket, but they cleraly didn't originate there! The downloads originally\n+      # came from the mingw-w64 SourceForge download site. Unfortunately\n+      # SourceForge is notoriously flaky, so we mirror it on our own infrastructure.\n+      i686-mingw-1:\n+        MSYS_BITS: 32\n+        RUST_CONFIGURE_ARGS: --build=i686-pc-windows-gnu\n+        SCRIPT: make ci-subset-1\n+        MINGW_URL: https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror\n+        MINGW_ARCHIVE: i686-6.3.0-release-posix-dwarf-rt_v5-rev2.7z\n+        MINGW_DIR: mingw32\n+      x86_64-mingw:\n+        MSYS_BITS: 64\n+        SCRIPT: python x.py test\n+        RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-gnu\n+        MINGW_URL: https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror\n+        MINGW_ARCHIVE: x86_64-6.3.0-release-posix-seh-rt_v5-rev2.7z\n+        MINGW_DIR: mingw64\n+\n+      # \"alternate\" deployment, see .travis.yml for more info\n+      dist-x86_64-msvc-alt:\n+        MSYS_BITS: 64\n+        RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc --enable-extended --enable-profiler\n+        SCRIPT: python x.py dist\n+        DEPLOY_ALT: 1"}, {"sha": "0b7233fb2e72c6928713e3b6ce41c48a8c31b7c9", "filename": ".azure-pipelines/try.yml", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/699376ada01dc6223e5365e79ae11c79502fd2ef/.azure-pipelines%2Ftry.yml", "raw_url": "https://github.com/rust-lang/rust/raw/699376ada01dc6223e5365e79ae11c79502fd2ef/.azure-pipelines%2Ftry.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.azure-pipelines%2Ftry.yml?ref=699376ada01dc6223e5365e79ae11c79502fd2ef", "patch": "@@ -0,0 +1,29 @@\n+#\n+# Azure Pipelines \"try\" branch build for Rust\n+# \n+\n+pr: none\n+trigger:\n+- try\n+\n+variables:\n+- group: caching\n+\n+jobs:\n+- job: Linux\n+  timeoutInMinutes: 300\n+  pool:\n+    vmImage: ubuntu-16.04\n+  strategy:\n+    matrix:\n+      dist-x86_64-linux:\n+        DEPLOY: 1\n+\n+      # \"alternate\" deployments, these are \"nightlies\" but have LLVM assertions\n+      # turned on, they're deployed to a different location primarily for\n+      # additional testing.\n+      dist-x86_64-linux-alt:\n+        IMAGE: dist-x86_64-linux\n+        DEPLOY_ALT: 1\n+  steps:\n+  - template: steps/linux.yml"}, {"sha": "8fa12a6571b8cb9c9954add1dafc4d10b4e69aba", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/699376ada01dc6223e5365e79ae11c79502fd2ef/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/699376ada01dc6223e5365e79ae11c79502fd2ef/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=699376ada01dc6223e5365e79ae11c79502fd2ef", "patch": "@@ -1,3 +1,5 @@\n+[![Build Status](https://dev.azure.com/rust-lang-azure/rust/_apis/build/status/johnterickson.rust?branchName=master)](https://dev.azure.com/rust-lang-azure/rust/_build/latest?definitionId=6&branchName=master)\n+\n # The Rust Programming Language\n \n This is the main source code repository for [Rust]. It contains the compiler,"}, {"sha": "c35da8927ce93520f4f94520660c5c0f9f470eee", "filename": "appveyor.yml", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/699376ada01dc6223e5365e79ae11c79502fd2ef/appveyor.yml", "raw_url": "https://github.com/rust-lang/rust/raw/699376ada01dc6223e5365e79ae11c79502fd2ef/appveyor.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/appveyor.yml?ref=699376ada01dc6223e5365e79ae11c79502fd2ef", "patch": "@@ -20,11 +20,11 @@ environment:\n   - CI_JOB_NAME: i686-msvc-1\n     MSYS_BITS: 32\n     RUST_CONFIGURE_ARGS: --build=i686-pc-windows-msvc\n-    SCRIPT: make appveyor-subset-1\n+    SCRIPT: make ci-subset-1\n   - CI_JOB_NAME: i686-msvc-2\n     MSYS_BITS: 32\n     RUST_CONFIGURE_ARGS: --build=i686-pc-windows-msvc\n-    SCRIPT: make appveyor-subset-2\n+    SCRIPT: make ci-subset-2\n \n   # MSVC aux tests\n   - CI_JOB_NAME: x86_64-msvc-aux\n@@ -58,7 +58,7 @@ environment:\n   - CI_JOB_NAME: i686-mingw-1\n     MSYS_BITS: 32\n     RUST_CONFIGURE_ARGS: --build=i686-pc-windows-gnu\n-    SCRIPT: make appveyor-subset-1\n+    SCRIPT: make ci-subset-1\n     MINGW_URL: https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror\n     MINGW_ARCHIVE: i686-6.3.0-release-posix-dwarf-rt_v5-rev2.7z\n     MINGW_DIR: mingw32\n@@ -68,7 +68,7 @@ environment:\n   - CI_JOB_NAME: i686-mingw-2\n     MSYS_BITS: 32\n     RUST_CONFIGURE_ARGS: --build=i686-pc-windows-gnu\n-    SCRIPT: make appveyor-subset-2\n+    SCRIPT: make ci-subset-2\n     MINGW_URL: https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror\n     MINGW_ARCHIVE: i686-6.3.0-release-posix-dwarf-rt_v5-rev2.7z\n     MINGW_DIR: mingw32"}, {"sha": "c47c0f765f0fed465b9c3dfde8c324688ea31847", "filename": "src/bootstrap/README.md", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/699376ada01dc6223e5365e79ae11c79502fd2ef/src%2Fbootstrap%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/699376ada01dc6223e5365e79ae11c79502fd2ef/src%2Fbootstrap%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FREADME.md?ref=699376ada01dc6223e5365e79ae11c79502fd2ef", "patch": "@@ -39,8 +39,7 @@ The script accepts commands, flags, and arguments to determine what to do:\n   ```\n \n   If files are dirty that would normally be rebuilt from stage 0, that can be\n-  overridden using `--keep-stage 0`. Using `--keep-stage n` will skip all steps\n-  that belong to stage n or earlier:\n+  overridden using `--keep-stage 0`.\n \n   ```\n   # keep old build products for stage 0 and build stage 1"}, {"sha": "29b0cdaef63fe00c983ee3d9b0b6681d05e5bc9c", "filename": "src/bootstrap/mk/Makefile.in", "status": "modified", "additions": 70, "deletions": 4, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/699376ada01dc6223e5365e79ae11c79502fd2ef/src%2Fbootstrap%2Fmk%2FMakefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/699376ada01dc6223e5365e79ae11c79502fd2ef/src%2Fbootstrap%2Fmk%2FMakefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fmk%2FMakefile.in?ref=699376ada01dc6223e5365e79ae11c79502fd2ef", "patch": "@@ -14,9 +14,10 @@ endif\n \n BOOTSTRAP := $(CFG_PYTHON) $(CFG_SRC_DIR)src/bootstrap/bootstrap.py\n \n-all:\n+build:\n \t$(Q)$(BOOTSTRAP) build $(BOOTSTRAP_ARGS)\n-\t$(Q)$(BOOTSTRAP) doc $(BOOTSTRAP_ARGS)\n+\n+all: build doc\n \n help:\n \t$(Q)echo 'Welcome to the rustbuild build system!'\n@@ -80,10 +81,75 @@ TESTS_IN_2 := \\\n \tsrc/test/run-pass-fulldeps \\\n \tsrc/tools/linkchecker\n \n-appveyor-subset-1:\n+MIN_TEST := \\\n+\tsrc/test/debuginfo\n+\n+ci-subset-1:\n \t$(Q)$(BOOTSTRAP) test $(TESTS_IN_2:%=--exclude %)\n-appveyor-subset-2:\n+ci-subset-2:\n \t$(Q)$(BOOTSTRAP) test $(TESTS_IN_2)\n \n+ci-test-prepare: \n+\t$(Q)$(BOOTSTRAP) test $(MIN_TEST)\n+\n+ci-resume-subset-1:\n+\t$(Q)$(BOOTSTRAP) test $(TESTS_IN_2:%=--exclude %)\n+ci-resume-subset-2:\n+\t$(Q)$(BOOTSTRAP) test $(TESTS_IN_2)\n+\n+TESTS_IN_B := \\\n+\tsrc/tools/linkchecker\n+\n+TESTS_IN_C := \\\n+\tsrc/test/run-pass \\\n+\tsrc/test/run-pass-fulldeps\n+\n+TESTS_IN_D := \\\n+\tsrc/test/compile-fail \\\n+\tsrc/test/rustdoc \\\n+\tsrc/test/pretty\n+\n+TESTS_IN_E := \\\n+\tsrc/test/ui \n+\n+TESTS_IN_F := \\\n+\tsrc/test/run-fail \\\n+\tsrc/liballoc \\\n+\tsrc/libcore\n+\n+TESTS_IN_G := \\\n+\tsrc/tools/rustdoc \\\n+\tsrc/test/rustdoc-js-std \\\n+\tsrc/test/run-make-fulldeps \\\n+\tsrc/libstd\n+\n+TESTS_IN_H := \\\n+\tsrc/librustc_driver\n+\n+ci-resume-subset-A:\n+\t$(Q)$(BOOTSTRAP) test \\\n+\t\t$(KEEP_STAGE) \\\n+\t\t$(TESTS_IN_B:%=--exclude %) \\\n+\t\t$(TESTS_IN_C:%=--exclude %) \\\n+\t\t$(TESTS_IN_D:%=--exclude %) \\\n+\t\t$(TESTS_IN_E:%=--exclude %) \\\n+\t\t$(TESTS_IN_F:%=--exclude %) \\\n+\t\t$(TESTS_IN_G:%=--exclude %) \\\n+\t\t$(TESTS_IN_H:%=--exclude %) \\\n+\t\t$(MIN_TEST:%=--exclude %) \n+ci-resume-subset-B:\n+\t$(Q)$(BOOTSTRAP) test $(KEEP_STAGE) $(TESTS_IN_B)\n+ci-resume-subset-C:\n+\t$(Q)$(BOOTSTRAP) test $(KEEP_STAGE) $(TESTS_IN_C)\n+ci-resume-subset-D:\n+\t$(Q)$(BOOTSTRAP) test $(KEEP_STAGE) $(TESTS_IN_D)\n+ci-resume-subset-E:\n+\t$(Q)$(BOOTSTRAP) test $(KEEP_STAGE) $(TESTS_IN_E)\n+ci-resume-subset-F:\n+\t$(Q)$(BOOTSTRAP) test $(KEEP_STAGE) $(TESTS_IN_F)\n+ci-resume-subset-G:\n+\t$(Q)$(BOOTSTRAP) test $(KEEP_STAGE) $(TESTS_IN_G)\n+ci-resume-subset-H:\n+\t$(Q)$(BOOTSTRAP) test $(KEEP_STAGE) $(TESTS_IN_H)\n \n .PHONY: dist"}, {"sha": "62a8b7aad031dd917297afe7187ee9273ba0942c", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/699376ada01dc6223e5365e79ae11c79502fd2ef/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/699376ada01dc6223e5365e79ae11c79502fd2ef/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=699376ada01dc6223e5365e79ae11c79502fd2ef", "patch": "@@ -81,15 +81,20 @@ impl Step for Llvm {\n             (info, \"src/llvm-project/llvm\", builder.llvm_out(target), dir.join(\"bin\"))\n         };\n \n+        let build_llvm_config = llvm_config_ret_dir\n+            .join(exe(\"llvm-config\", &*builder.config.build));\n+\n+        if env::var_os(\"SKIP_LLVM_BUILD\").is_some() {\n+            return build_llvm_config\n+        }\n+\n         if !llvm_info.is_git() {\n             println!(\n                 \"git could not determine the LLVM submodule commit hash. \\\n                 Assuming that an LLVM build is necessary.\",\n             );\n         }\n \n-        let build_llvm_config = llvm_config_ret_dir\n-            .join(exe(\"llvm-config\", &*builder.config.build));\n         let done_stamp = out_dir.join(\"llvm-finished-building\");\n \n         if let Some(llvm_commit) = llvm_info.sha() {"}, {"sha": "e79700d92d89c08f2c8faf8ca0dad097fb76993d", "filename": "src/bootstrap/util.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/699376ada01dc6223e5365e79ae11c79502fd2ef/src%2Fbootstrap%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/699376ada01dc6223e5365e79ae11c79502fd2ef/src%2Fbootstrap%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Futil.rs?ref=699376ada01dc6223e5365e79ae11c79502fd2ef", "patch": "@@ -326,6 +326,8 @@ pub enum CiEnv {\n     Travis,\n     /// The AppVeyor environment, for Windows builds.\n     AppVeyor,\n+    /// The Azure Pipelines environment, for Linux (including Docker), Window, and macOS builds.\n+    AzurePipelines,\n }\n \n impl CiEnv {\n@@ -335,6 +337,8 @@ impl CiEnv {\n             CiEnv::Travis\n         } else if env::var(\"APPVEYOR\").ok().map_or(false, |e| &*e == \"True\") {\n             CiEnv::AppVeyor\n+        } else if env::var(\"TF_BUILD\").ok().map_or(false, |e| &*e == \"True\") {\n+            CiEnv::AzurePipelines\n         } else {\n             CiEnv::None\n         }"}, {"sha": "1a04b8af4c17b612b6af6e8bae81d7ab9555588f", "filename": "src/ci/docker/i686-gnu-1/Dockerfile", "status": "renamed", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/699376ada01dc6223e5365e79ae11c79502fd2ef/src%2Fci%2Fdocker%2Fi686-gnu-1%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/699376ada01dc6223e5365e79ae11c79502fd2ef/src%2Fci%2Fdocker%2Fi686-gnu-1%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fi686-gnu-1%2FDockerfile?ref=699376ada01dc6223e5365e79ae11c79502fd2ef", "patch": "@@ -18,10 +18,5 @@ COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n ENV RUST_CONFIGURE_ARGS --build=i686-unknown-linux-gnu\n-# Exclude some tests that are unlikely to be platform specific, to speed up\n-# this slow job.\n-ENV SCRIPT python2.7 ../x.py test \\\n-  --exclude src/bootstrap \\\n-  --exclude src/test/rustdoc-js \\\n-  --exclude src/tools/error_index_generator \\\n-  --exclude src/tools/linkchecker\n+ENV SCRIPT make ci-subset-1\n+", "previous_filename": "src/ci/docker/i686-gnu/Dockerfile"}, {"sha": "b1a0ea6f0e99ebbb7f9856c14e94fecc3bd4495d", "filename": "src/ci/docker/i686-gnu-2/Dockerfile", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/699376ada01dc6223e5365e79ae11c79502fd2ef/src%2Fci%2Fdocker%2Fi686-gnu-2%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/699376ada01dc6223e5365e79ae11c79502fd2ef/src%2Fci%2Fdocker%2Fi686-gnu-2%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fi686-gnu-2%2FDockerfile?ref=699376ada01dc6223e5365e79ae11c79502fd2ef", "patch": "@@ -0,0 +1,21 @@\n+FROM ubuntu:16.04\n+\n+RUN apt-get update && apt-get install -y --no-install-recommends \\\n+  g++-multilib \\\n+  make \\\n+  file \\\n+  curl \\\n+  ca-certificates \\\n+  python2.7 \\\n+  git \\\n+  cmake \\\n+  sudo \\\n+  gdb \\\n+  xz-utils\n+\n+\n+COPY scripts/sccache.sh /scripts/\n+RUN sh /scripts/sccache.sh\n+\n+ENV RUST_CONFIGURE_ARGS --build=i686-unknown-linux-gnu\n+ENV SCRIPT make ci-subset-2"}, {"sha": "cd913e30d11293b43f4f128f2dcb6dc83257e06e", "filename": "src/ci/docker/run.sh", "status": "modified", "additions": 31, "deletions": 8, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/699376ada01dc6223e5365e79ae11c79502fd2ef/src%2Fci%2Fdocker%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/699376ada01dc6223e5365e79ae11c79502fd2ef/src%2Fci%2Fdocker%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Frun.sh?ref=699376ada01dc6223e5365e79ae11c79502fd2ef", "patch": "@@ -1,5 +1,7 @@\n #!/usr/bin/env bash\n \n+# ignore-tidy-linelength\n+\n set -e\n \n export MSYS_NO_PATHCONV=1\n@@ -40,9 +42,24 @@ if [ -f \"$docker_dir/$image/Dockerfile\" ]; then\n       docker --version >> $hash_key\n       cksum=$(sha512sum $hash_key | \\\n         awk '{print $1}')\n-      s3url=\"s3://$SCCACHE_BUCKET/docker/$cksum\"\n-      url=\"https://s3-us-west-1.amazonaws.com/$SCCACHE_BUCKET/docker/$cksum\"\n-      echo \"Attempting to download $s3url\"\n+\n+      if [ \"$DOCKER_LAYER_CACHE_AZURE_STORAGE_ACCOUNT\" != \"\" ]; then\n+        # install azcopy\n+        echo \"deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-ubuntu-xenial-prod/ xenial main\" > azure.list\n+        sudo cp ./azure.list /etc/apt/sources.list.d/\n+        sudo apt-key adv --keyserver packages.microsoft.com --recv-keys EB3E94ADBE1229CF\n+        sudo apt-get update\n+        sudo apt-get install azcopy\n+\n+        url=\"https://$DOCKER_LAYER_CACHE_AZURE_STORAGE_ACCOUNT.blob.core.windows.net/$DOCKER_LAYER_CACHE_AZURE_STORAGE_CONTAINER/$cksum\"\n+        upload=\"azcopy --quiet --destination $url --dest-key $DOCKER_LAYER_CACHE_AZURE_STORAGE_ACCOUNT_KEY\"\n+      else\n+        s3url=\"s3://$SCCACHE_BUCKET/docker/$cksum\"\n+        url=\"https://s3-us-west-1.amazonaws.com/$SCCACHE_BUCKET/docker/$cksum\"\n+        upload=\"aws s3 cp - $s3url\"\n+      fi\n+\n+      echo \"Attempting to download $url\"\n       rm -f /tmp/rustci_docker_cache\n       set +e\n       retry curl -y 30 -Y 10 --connect-timeout 30 -f -L -C - -o /tmp/rustci_docker_cache \"$url\"\n@@ -65,17 +82,17 @@ if [ -f \"$docker_dir/$image/Dockerfile\" ]; then\n       -f \"$dockerfile\" \\\n       \"$context\"\n \n-    if [ \"$s3url\" != \"\" ]; then\n+    if [ \"$upload\" != \"\" ]; then\n       digest=$(docker inspect rust-ci --format '{{.Id}}')\n       echo \"Built container $digest\"\n       if ! grep -q \"$digest\" <(echo \"$loaded_images\"); then\n-        echo \"Uploading finished image to $s3url\"\n+        echo \"Uploading finished image to $url\"\n         set +e\n         docker history -q rust-ci | \\\n           grep -v missing | \\\n           xargs docker save | \\\n           gzip | \\\n-          aws s3 cp - $s3url\n+          $upload\n         set -e\n       else\n         echo \"Looks like docker image is the same as before, not uploading\"\n@@ -87,8 +104,8 @@ if [ -f \"$docker_dir/$image/Dockerfile\" ]; then\n       echo \"$digest\" >>\"$info\"\n     fi\n elif [ -f \"$docker_dir/disabled/$image/Dockerfile\" ]; then\n-    if [ -n \"$TRAVIS_OS_NAME\" ]; then\n-        echo Cannot run disabled images on travis!\n+    if isCI; then\n+        echo Cannot run disabled images on CI!\n         exit 1\n     fi\n     # retry messes with the pipe from tar to docker. Not needed on non-travis\n@@ -117,6 +134,9 @@ if [ \"$SCCACHE_BUCKET\" != \"\" ]; then\n     args=\"$args --env SCCACHE_REGION\"\n     args=\"$args --env AWS_ACCESS_KEY_ID\"\n     args=\"$args --env AWS_SECRET_ACCESS_KEY\"\n+elif [ \"$SCCACHE_AZURE_CONNECTION_STRING\" != \"\" ]; then\n+    args=\"$args --env SCCACHE_AZURE_CONNECTION_STRING\"\n+    args=\"$args --env SCCACHE_AZURE_BLOB_CONTAINER\"\n else\n     mkdir -p $HOME/.cache/sccache\n     args=\"$args --env SCCACHE_DIR=/sccache --volume $HOME/.cache/sccache:/sccache\"\n@@ -140,8 +160,11 @@ exec docker \\\n   --env DEPLOY \\\n   --env DEPLOY_ALT \\\n   --env LOCAL_USER_ID=`id -u` \\\n+  --env CI \\\n   --env TRAVIS \\\n   --env TRAVIS_BRANCH \\\n+  --env TF_BUILD \\\n+  --env BUILD_SOURCEBRANCHNAME \\\n   --env TOOLSTATE_REPO_ACCESS_TOKEN \\\n   --env CI_JOB_NAME=\"${CI_JOB_NAME-$IMAGE}\" \\\n   --volume \"$HOME/.cargo:/cargo\" \\"}, {"sha": "d6f2f4fadb2c67465582ffbe7b7ca7d5661068dc", "filename": "src/ci/docker/scripts/sccache.sh", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/699376ada01dc6223e5365e79ae11c79502fd2ef/src%2Fci%2Fdocker%2Fscripts%2Fsccache.sh", "raw_url": "https://github.com/rust-lang/rust/raw/699376ada01dc6223e5365e79ae11c79502fd2ef/src%2Fci%2Fdocker%2Fscripts%2Fsccache.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Fsccache.sh?ref=699376ada01dc6223e5365e79ae11c79502fd2ef", "patch": "@@ -1,6 +1,7 @@\n set -ex\n \n+echo Use sccache built with Azure Storage support\n curl -fo /usr/local/bin/sccache \\\n-  https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror/2018-04-02-sccache-x86_64-unknown-linux-musl\n+  https://rustlangtools.blob.core.windows.net/public/stable-x86_64-unknown-linux-musl.sccache\n \n chmod +x /usr/local/bin/sccache"}, {"sha": "c7e64cd8c3e79780b101a35d90848ab228cf2d93", "filename": "src/ci/docker/x86_64-gnu-tools/checktools.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/699376ada01dc6223e5365e79ae11c79502fd2ef/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2Fchecktools.sh", "raw_url": "https://github.com/rust-lang/rust/raw/699376ada01dc6223e5365e79ae11c79502fd2ef/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2Fchecktools.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2Fchecktools.sh?ref=699376ada01dc6223e5365e79ae11c79502fd2ef", "patch": "@@ -6,7 +6,7 @@ X_PY=\"$1\"\n TOOLSTATE_FILE=\"$(realpath $2)\"\n OS=\"$3\"\n COMMIT=\"$(git rev-parse HEAD)\"\n-CHANGED_FILES=\"$(git diff --name-status HEAD HEAD^)\"\n+CHANGED_FILES=\"$(git diff --name-status HEAD HEAD^ || echo)\"\n SIX_WEEK_CYCLE=\"$(( ($(date +%s) / 86400 - 20) % 42 ))\"\n # ^ Number of days after the last promotion of beta.\n #   Its value is 41 on the Tuesday where \"Promote master to beta (T-2)\" happens."}, {"sha": "08ede122d65c022b0131a4ab5935ebf51831f873", "filename": "src/ci/run.sh", "status": "modified", "additions": 26, "deletions": 20, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/699376ada01dc6223e5365e79ae11c79502fd2ef/src%2Fci%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/699376ada01dc6223e5365e79ae11c79502fd2ef/src%2Fci%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Frun.sh?ref=699376ada01dc6223e5365e79ae11c79502fd2ef", "patch": "@@ -23,7 +23,9 @@ fi\n ci_dir=`cd $(dirname $0) && pwd`\n source \"$ci_dir/shared.sh\"\n \n-if [ \"$TRAVIS\" != \"true\" ] || [ \"$TRAVIS_BRANCH\" == \"auto\" ]; then\n+branch_name=$(getCIBranch)\n+\n+if [ ! isCI ] || [ \"$branch_name\" = \"auto\" ]; then\n     RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --set build.print-step-timings --enable-verbose-tests\"\n fi\n \n@@ -44,7 +46,7 @@ fi\n # FIXME: need a scheme for changing this `nightly` value to `beta` and `stable`\n #        either automatically or manually.\n export RUST_RELEASE_CHANNEL=nightly\n-if [ \"$DEPLOY$DEPLOY_ALT\" != \"\" ]; then\n+if [ \"$DEPLOY$DEPLOY_ALT\" = \"1\" ]; then\n   RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --release-channel=$RUST_RELEASE_CHANNEL\"\n   RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --enable-llvm-static-stdcpp\"\n   RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --set rust.remap-debuginfo\"\n@@ -88,28 +90,30 @@ if [ \"$RUN_CHECK_WITH_PARALLEL_QUERIES\" != \"\" ]; then\n   rm -rf build\n fi\n \n-travis_fold start configure\n-travis_time_start\n-$SRC/configure $RUST_CONFIGURE_ARGS\n-travis_fold end configure\n-travis_time_finish\n-\n-travis_fold start make-prepare\n-travis_time_start\n-retry make prepare\n-travis_fold end make-prepare\n-travis_time_finish\n-\n-travis_fold start check-bootstrap\n-travis_time_start\n-make check-bootstrap\n-travis_fold end check-bootstrap\n-travis_time_finish\n+if [ \"$SKIP_PREP\" != \"1\" ]; then\n+  travis_fold start configure\n+  travis_time_start\n+  $SRC/configure $RUST_CONFIGURE_ARGS\n+  travis_fold end configure\n+  travis_time_finish\n+\n+  travis_fold start make-prepare\n+  travis_time_start\n+  retry make prepare\n+  travis_fold end make-prepare\n+  travis_time_finish\n+\n+  travis_fold start check-bootstrap\n+  travis_time_start\n+  make check-bootstrap\n+  travis_fold end check-bootstrap\n+  travis_time_finish\n+fi\n \n # Display the CPU and memory information. This helps us know why the CI timing\n # is fluctuating.\n travis_fold start log-system-info\n-if [ \"$TRAVIS_OS_NAME\" = \"osx\" ]; then\n+if isOSX; then\n     system_profiler SPHardwareDataType || true\n     sysctl hw || true\n     ncpus=$(sysctl -n hw.ncpu)\n@@ -138,3 +142,5 @@ else\n   do_make all\n   do_make \"$RUST_CHECK_TARGET\"\n fi\n+\n+sccache --show-stats"}, {"sha": "1e667fca5875afd8b57213211c3cdb63bd1207af", "filename": "src/ci/shared.sh", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/699376ada01dc6223e5365e79ae11c79502fd2ef/src%2Fci%2Fshared.sh", "raw_url": "https://github.com/rust-lang/rust/raw/699376ada01dc6223e5365e79ae11c79502fd2ef/src%2Fci%2Fshared.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fshared.sh?ref=699376ada01dc6223e5365e79ae11c79502fd2ef", "patch": "@@ -24,6 +24,22 @@ function retry {\n   done\n }\n \n+function isCI {\n+  [ \"$CI\" = \"true\" ] || [ \"$TRAVIS\" = \"true\" ] || [ \"$TF_BUILD\" = \"True\" ]\n+}\n+\n+function isOSX {\n+  [ \"$TRAVIS_OS_NAME\" = \"osx\" ] || [ \"$AGENT_OS\" = \"Darwin\" ]\n+}\n+\n+function getCIBranch {\n+  if [ \"$TRAVIS\" = \"true\" ]; then\n+    echo \"$TRAVIS_BRANCH\"\n+  else\n+    echo \"$BUILD_SOURCEBRANCHNAME\"\n+  fi;\n+}\n+\n if ! declare -F travis_fold; then\n   if [ \"${TRAVIS-false}\" = 'true' ]; then\n     # This is a trimmed down copy of"}, {"sha": "bcfc3245db30ebadab0b4f7c16a7667d2a062c88", "filename": "src/test/run-pass/fds-are-cloexec.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/699376ada01dc6223e5365e79ae11c79502fd2ef/src%2Ftest%2Frun-pass%2Ffds-are-cloexec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/699376ada01dc6223e5365e79ae11c79502fd2ef/src%2Ftest%2Frun-pass%2Ffds-are-cloexec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffds-are-cloexec.rs?ref=699376ada01dc6223e5365e79ae11c79502fd2ef", "patch": "@@ -3,6 +3,7 @@\n // ignore-cloudabi no processes\n // ignore-emscripten no processes\n // ignore-haiku\n+// ignore-macos\n \n #![feature(rustc_private)]\n "}]}