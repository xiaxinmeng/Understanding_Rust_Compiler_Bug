{"sha": "dacab06b4a3b13ac6cd85796838cf1087638c36d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhY2FiMDZiNGEzYjEzYWM2Y2Q4NTc5NjgzOGNmMTA4NzYzOGMzNmQ=", "commit": {"author": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2015-11-09T17:09:25Z"}, "committer": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2015-11-09T17:09:25Z"}, "message": "Tag feature gates with issues\n\nThis commit adds issue numbers to the vast majority of active feature\ngates. The few that are left without issues are rustc/runtime-internal\nfeatures that are essentially private APIs.\n\nCloses #28244", "tree": {"sha": "663bb38db6e956d508b6ad7b845927cae449e92f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/663bb38db6e956d508b6ad7b845927cae449e92f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dacab06b4a3b13ac6cd85796838cf1087638c36d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dacab06b4a3b13ac6cd85796838cf1087638c36d", "html_url": "https://github.com/rust-lang/rust/commit/dacab06b4a3b13ac6cd85796838cf1087638c36d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dacab06b4a3b13ac6cd85796838cf1087638c36d/comments", "author": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "708e319f804b799291b2c89f50cf70c0532e1a7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/708e319f804b799291b2c89f50cf70c0532e1a7b", "html_url": "https://github.com/rust-lang/rust/commit/708e319f804b799291b2c89f50cf70c0532e1a7b"}], "stats": {"total": 104, "additions": 59, "deletions": 45}, "files": [{"sha": "645e30bdbb84c791d9c3cfaf3ebf3a3129ac37de", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 59, "deletions": 45, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/dacab06b4a3b13ac6cd85796838cf1087638c36d/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dacab06b4a3b13ac6cd85796838cf1087638c36d/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=dacab06b4a3b13ac6cd85796838cf1087638c36d", "patch": "@@ -51,53 +51,59 @@ const KNOWN_FEATURES: &'static [(&'static str, &'static str, Option<u32>, Status\n     (\"globs\", \"1.0.0\", None, Accepted),\n     (\"macro_rules\", \"1.0.0\", None, Accepted),\n     (\"struct_variant\", \"1.0.0\", None, Accepted),\n-    (\"asm\", \"1.0.0\", None, Active),\n+    (\"asm\", \"1.0.0\", Some(29722), Active),\n     (\"managed_boxes\", \"1.0.0\", None, Removed),\n-    (\"non_ascii_idents\", \"1.0.0\", None, Active),\n-    (\"thread_local\", \"1.0.0\", None, Active),\n-    (\"link_args\", \"1.0.0\", None, Active),\n-    (\"plugin_registrar\", \"1.0.0\", None, Active),\n-    (\"log_syntax\", \"1.0.0\", None, Active),\n-    (\"trace_macros\", \"1.0.0\", None, Active),\n-    (\"concat_idents\", \"1.0.0\", None, Active),\n+    (\"non_ascii_idents\", \"1.0.0\", Some(28979), Active),\n+    (\"thread_local\", \"1.0.0\", Some(29594), Active),\n+    (\"link_args\", \"1.0.0\", Some(29596), Active),\n+    (\"plugin_registrar\", \"1.0.0\", Some(29597), Active),\n+    (\"log_syntax\", \"1.0.0\", Some(29598), Active),\n+    (\"trace_macros\", \"1.0.0\", Some(29598), Active),\n+    (\"concat_idents\", \"1.0.0\", Some(29599), Active),\n+\n+    // rustc internal, for now:\n     (\"intrinsics\", \"1.0.0\", None, Active),\n     (\"lang_items\", \"1.0.0\", None, Active),\n \n     (\"simd\", \"1.0.0\", Some(27731), Active),\n     (\"default_type_params\", \"1.0.0\", None, Accepted),\n-    (\"quote\", \"1.0.0\", None, Active),\n-    (\"link_llvm_intrinsics\", \"1.0.0\", None, Active),\n-    (\"linkage\", \"1.0.0\", None, Active),\n+    (\"quote\", \"1.0.0\", Some(29601), Active),\n+    (\"link_llvm_intrinsics\", \"1.0.0\", Some(29602), Active),\n+    (\"linkage\", \"1.0.0\", Some(29603), Active),\n     (\"struct_inherit\", \"1.0.0\", None, Removed),\n \n     (\"quad_precision_float\", \"1.0.0\", None, Removed),\n \n+    // rustc internal\n     (\"rustc_diagnostic_macros\", \"1.0.0\", None, Active),\n-    (\"unboxed_closures\", \"1.0.0\", None, Active),\n-    (\"reflect\", \"1.0.0\", None, Active),\n+    (\"unboxed_closures\", \"1.0.0\", Some(29625), Active),\n+    (\"reflect\", \"1.0.0\", Some(27749), Active),\n     (\"import_shadowing\", \"1.0.0\", None, Removed),\n-    (\"advanced_slice_patterns\", \"1.0.0\", None, Active),\n+    (\"advanced_slice_patterns\", \"1.0.0\", Some(23121), Active),\n     (\"tuple_indexing\", \"1.0.0\", None, Accepted),\n     (\"associated_types\", \"1.0.0\", None, Accepted),\n-    (\"visible_private_types\", \"1.0.0\", None, Active),\n+    (\"visible_private_types\", \"1.0.0\", Some(29627), Active),\n     (\"slicing_syntax\", \"1.0.0\", None, Accepted),\n     (\"box_syntax\", \"1.0.0\", Some(27779), Active),\n     (\"placement_in_syntax\", \"1.0.0\", Some(27779), Active),\n+\n+    // rustc internal.\n     (\"pushpop_unsafe\", \"1.2.0\", None, Active),\n-    (\"on_unimplemented\", \"1.0.0\", None, Active),\n-    (\"simd_ffi\", \"1.0.0\", None, Active),\n-    (\"allocator\", \"1.0.0\", None, Active),\n-    (\"needs_allocator\", \"1.4.0\", None, Active),\n-    (\"linked_from\", \"1.3.0\", None, Active),\n+\n+    (\"on_unimplemented\", \"1.0.0\", Some(29628), Active),\n+    (\"simd_ffi\", \"1.0.0\", Some(27731), Active),\n+    (\"allocator\", \"1.0.0\", Some(27389), Active),\n+    (\"needs_allocator\", \"1.4.0\", Some(27389), Active),\n+    (\"linked_from\", \"1.3.0\", Some(29629), Active),\n \n     (\"if_let\", \"1.0.0\", None, Accepted),\n     (\"while_let\", \"1.0.0\", None, Accepted),\n \n-    (\"plugin\", \"1.0.0\", None, Active),\n-    (\"start\", \"1.0.0\", None, Active),\n-    (\"main\", \"1.0.0\", None, Active),\n+    (\"plugin\", \"1.0.0\", Some(29597), Active),\n+    (\"start\", \"1.0.0\", Some(29633), Active),\n+    (\"main\", \"1.0.0\", Some(29634), Active),\n \n-    (\"fundamental\", \"1.0.0\", None, Active),\n+    (\"fundamental\", \"1.0.0\", Some(29635), Active),\n \n     // A temporary feature gate used to enable parser extensions needed\n     // to bootstrap fix for #5723.\n@@ -107,30 +113,32 @@ const KNOWN_FEATURES: &'static [(&'static str, &'static str, Option<u32>, Status\n     (\"opt_out_copy\", \"1.0.0\", None, Removed),\n \n     // OIBIT specific features\n-    (\"optin_builtin_traits\", \"1.0.0\", None, Active),\n+    (\"optin_builtin_traits\", \"1.0.0\", Some(13231), Active),\n \n     // macro reexport needs more discussion and stabilization\n-    (\"macro_reexport\", \"1.0.0\", None, Active),\n+    (\"macro_reexport\", \"1.0.0\", Some(29638), Active),\n \n     // These are used to test this portion of the compiler, they don't actually\n     // mean anything\n     (\"test_accepted_feature\", \"1.0.0\", None, Accepted),\n     (\"test_removed_feature\", \"1.0.0\", None, Removed),\n \n     // Allows use of #[staged_api]\n+    // rustc internal\n     (\"staged_api\", \"1.0.0\", None, Active),\n \n     // Allows using items which are missing stability attributes\n+    // rustc internal\n     (\"unmarked_api\", \"1.0.0\", None, Active),\n \n     // Allows using #![no_std]\n-    (\"no_std\", \"1.0.0\", None, Active),\n+    (\"no_std\", \"1.0.0\", Some(27701), Active),\n \n     // Allows using #![no_core]\n-    (\"no_core\", \"1.3.0\", None, Active),\n+    (\"no_core\", \"1.3.0\", Some(29639), Active),\n \n     // Allows using `box` in patterns; RFC 469\n-    (\"box_patterns\", \"1.0.0\", None, Active),\n+    (\"box_patterns\", \"1.0.0\", Some(29641), Active),\n \n     // Allows using the unsafe_no_drop_flag attribute (unlikely to\n     // switch to Accepted; see RFC 320)\n@@ -141,75 +149,81 @@ const KNOWN_FEATURES: &'static [(&'static str, &'static str, Option<u32>, Status\n     (\"dropck_parametricity\", \"1.3.0\", Some(28498), Active),\n \n     // Allows the use of custom attributes; RFC 572\n-    (\"custom_attribute\", \"1.0.0\", None, Active),\n+    (\"custom_attribute\", \"1.0.0\", Some(29642), Active),\n \n     // Allows the use of #[derive(Anything)] as sugar for\n     // #[derive_Anything].\n-    (\"custom_derive\", \"1.0.0\", None, Active),\n+    (\"custom_derive\", \"1.0.0\", Some(29644), Active),\n \n     // Allows the use of rustc_* attributes; RFC 572\n-    (\"rustc_attrs\", \"1.0.0\", None, Active),\n+    (\"rustc_attrs\", \"1.0.0\", Some(29642), Active),\n \n     // Allows the use of #[allow_internal_unstable]. This is an\n     // attribute on macro_rules! and can't use the attribute handling\n     // below (it has to be checked before expansion possibly makes\n     // macros disappear).\n+    //\n+    // rustc internal\n     (\"allow_internal_unstable\", \"1.0.0\", None, Active),\n \n     // #23121. Array patterns have some hazards yet.\n-    (\"slice_patterns\", \"1.0.0\", None, Active),\n+    (\"slice_patterns\", \"1.0.0\", Some(23121), Active),\n \n     // Allows use of unary negate on unsigned integers, e.g. -e for e: u8\n-    (\"negate_unsigned\", \"1.0.0\", None, Active),\n+    (\"negate_unsigned\", \"1.0.0\", Some(29645), Active),\n \n     // Allows the definition of associated constants in `trait` or `impl`\n     // blocks.\n-    (\"associated_consts\", \"1.0.0\", None, Active),\n+    (\"associated_consts\", \"1.0.0\", Some(29646), Active),\n \n     // Allows the definition of `const fn` functions.\n-    (\"const_fn\", \"1.2.0\", None, Active),\n+    (\"const_fn\", \"1.2.0\", Some(24111), Active),\n \n     // Allows using #[prelude_import] on glob `use` items.\n+    //\n+    // rustc internal\n     (\"prelude_import\", \"1.2.0\", None, Active),\n \n     // Allows the definition recursive static items.\n-    (\"static_recursion\", \"1.3.0\", None, Active),\n+    (\"static_recursion\", \"1.3.0\", Some(29719), Active),\n \n     // Allows default type parameters to influence type inference.\n-    (\"default_type_parameter_fallback\", \"1.3.0\", None, Active),\n+    (\"default_type_parameter_fallback\", \"1.3.0\", Some(27336), Active),\n \n     // Allows associated type defaults\n-    (\"associated_type_defaults\", \"1.2.0\", None, Active),\n-    // Allows macros to appear in the type position.\n+    (\"associated_type_defaults\", \"1.2.0\", Some(29661), Active),\n \n+    // Allows macros to appear in the type position.\n     (\"type_macros\", \"1.3.0\", Some(27336), Active),\n \n     // allow `repr(simd)`, and importing the various simd intrinsics\n     (\"repr_simd\", \"1.4.0\", Some(27731), Active),\n \n     // Allows cfg(target_feature = \"...\").\n-    (\"cfg_target_feature\", \"1.4.0\", None, Active),\n+    (\"cfg_target_feature\", \"1.4.0\", Some(29717), Active),\n \n     // allow `extern \"platform-intrinsic\" { ... }`\n     (\"platform_intrinsics\", \"1.4.0\", Some(27731), Active),\n \n     // allow `#[unwind]`\n+    // rust runtime internal\n     (\"unwind_attributes\", \"1.4.0\", None, Active),\n \n     // allow empty structs and enum variants with braces\n-    (\"braced_empty_structs\", \"1.5.0\", None, Active),\n+    (\"braced_empty_structs\", \"1.5.0\", Some(29720), Active),\n \n     // allow overloading augmented assignment operations like `a += b`\n-    (\"augmented_assignments\", \"1.5.0\", None, Active),\n+    (\"augmented_assignments\", \"1.5.0\", Some(28235), Active),\n \n     // allow `#[no_debug]`\n-    (\"no_debug\", \"1.5.0\", None, Active),\n+    (\"no_debug\", \"1.5.0\", Some(29721), Active),\n \n     // allow `#[omit_gdb_pretty_printer_section]`\n+    // rustc internal.\n     (\"omit_gdb_pretty_printer_section\", \"1.5.0\", None, Active),\n \n     // Allows cfg(target_vendor = \"...\").\n-    (\"cfg_target_vendor\", \"1.5.0\", None, Active),\n+    (\"cfg_target_vendor\", \"1.5.0\", Some(29718), Active),\n ];\n // (changing above list without updating src/doc/reference.md makes @cmr sad)\n "}]}