{"sha": "265fef45f20e3b8ed9495201b5d02bab1210f0f9", "node_id": "C_kwDOAAsO6NoAKDI2NWZlZjQ1ZjIwZTNiOGVkOTQ5NTIwMWI1ZDAyYmFiMTIxMGYwZjk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-15T15:55:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-15T15:55:08Z"}, "message": "Auto merge of #89337 - mbrubeck:vec-leak, r=m-ou-se\n\nAvoid allocations and copying in Vec::leak\n\nThe [`Vec::leak`] method (#62195) is currently implemented by calling `Vec::into_boxed_slice` and `Box::leak`.  This shrinks the vector before leaking it, which potentially causes a reallocation and copies the vector's contents.\n\nBy avoiding the conversion to `Box`, we can instead leak the vector without any expensive operations, just by returning a slice reference and forgetting the `Vec`.  Users who *want* to shrink the vector first can still do so by calling `shrink_to_fit` explicitly.\n\n**Note:**  This could break code that uses `Box::from_raw` to \u201cun-leak\u201d the slice returned by `Vec::leak`.  However, the `Vec::leak` docs explicitly forbid this, so such code is already incorrect.\n\n[`Vec::leak`]: https://doc.rust-lang.org/stable/std/vec/struct.Vec.html#method.leak", "tree": {"sha": "fe4e428ff5bc108a76e956e6a17d526bec8f613c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe4e428ff5bc108a76e956e6a17d526bec8f613c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/265fef45f20e3b8ed9495201b5d02bab1210f0f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/265fef45f20e3b8ed9495201b5d02bab1210f0f9", "html_url": "https://github.com/rust-lang/rust/commit/265fef45f20e3b8ed9495201b5d02bab1210f0f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/265fef45f20e3b8ed9495201b5d02bab1210f0f9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af9b508e1d6c83a8f0e6f5c0b2b75598aa37ed27", "url": "https://api.github.com/repos/rust-lang/rust/commits/af9b508e1d6c83a8f0e6f5c0b2b75598aa37ed27", "html_url": "https://github.com/rust-lang/rust/commit/af9b508e1d6c83a8f0e6f5c0b2b75598aa37ed27"}, {"sha": "df15b289f39c497d16fac694c6982fbdfa2e6fe2", "url": "https://api.github.com/repos/rust-lang/rust/commits/df15b289f39c497d16fac694c6982fbdfa2e6fe2", "html_url": "https://github.com/rust-lang/rust/commit/df15b289f39c497d16fac694c6982fbdfa2e6fe2"}], "stats": {"total": 8, "additions": 5, "deletions": 3}, "files": [{"sha": "20a16869cb3f8bfd06966a9fc2053ca57daa43a6", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/265fef45f20e3b8ed9495201b5d02bab1210f0f9/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/265fef45f20e3b8ed9495201b5d02bab1210f0f9/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=265fef45f20e3b8ed9495201b5d02bab1210f0f9", "patch": "@@ -1973,8 +1973,9 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// `'a`. If the type has only static references, or none at all, then this\n     /// may be chosen to be `'static`.\n     ///\n-    /// This function is similar to the [`leak`][Box::leak] function on [`Box`]\n-    /// except that there is no way to recover the leaked memory.\n+    /// As of Rust 1.57, this method does not reallocate or shrink the `Vec`,\n+    /// so the leaked allocation may include unused capacity that is not part\n+    /// of the returned slice.\n     ///\n     /// This function is mainly useful for data that lives for the remainder of\n     /// the program's life. Dropping the returned reference will cause a memory\n@@ -1997,7 +1998,8 @@ impl<T, A: Allocator> Vec<T, A> {\n     where\n         A: 'a,\n     {\n-        Box::leak(self.into_boxed_slice())\n+        let mut me = ManuallyDrop::new(self);\n+        unsafe { slice::from_raw_parts_mut(me.as_mut_ptr(), me.len) }\n     }\n \n     /// Returns the remaining spare capacity of the vector as a slice of"}]}