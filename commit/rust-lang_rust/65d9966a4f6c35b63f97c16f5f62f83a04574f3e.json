{"sha": "65d9966a4f6c35b63f97c16f5f62f83a04574f3e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1ZDk5NjZhNGY2YzM1YjYzZjk3YzE2ZjVmNjJmODNhMDQ1NzRmM2U=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-09T14:12:53Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-09T14:12:53Z"}, "message": "Always put config first", "tree": {"sha": "2e4d75008c01531075bced1596ec65047d74ca91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e4d75008c01531075bced1596ec65047d74ca91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65d9966a4f6c35b63f97c16f5f62f83a04574f3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65d9966a4f6c35b63f97c16f5f62f83a04574f3e", "html_url": "https://github.com/rust-lang/rust/commit/65d9966a4f6c35b63f97c16f5f62f83a04574f3e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65d9966a4f6c35b63f97c16f5f62f83a04574f3e/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e075e6eef2c275d9b9b511b37dad478285aecb48", "url": "https://api.github.com/repos/rust-lang/rust/commits/e075e6eef2c275d9b9b511b37dad478285aecb48", "html_url": "https://github.com/rust-lang/rust/commit/e075e6eef2c275d9b9b511b37dad478285aecb48"}], "stats": {"total": 121, "additions": 60, "deletions": 61}, "files": [{"sha": "48afee5fb4a12f37de93656a8f0f8ab99f9d952c", "filename": "crates/ra_ide/src/completion/presentation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65d9966a4f6c35b63f97c16f5f62f83a04574f3e/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65d9966a4f6c35b63f97c16f5f62f83a04574f3e/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=65d9966a4f6c35b63f97c16f5f62f83a04574f3e", "patch": "@@ -491,7 +491,7 @@ mod tests {\n             }\n         }\n \n-        let mut completions = get_all_completion_items(ra_fixture, &CompletionConfig::default());\n+        let mut completions = get_all_completion_items(CompletionConfig::default(), ra_fixture);\n         completions.sort_by_key(|it| (Reverse(it.score()), it.label().to_string()));\n         let actual = completions\n             .into_iter()\n@@ -835,6 +835,7 @@ fn bar(s: &S) {\n     fn suppress_arg_snippets() {\n         mark::check!(suppress_arg_snippets);\n         check_edit_with_config(\n+            CompletionConfig { add_call_argument_snippets: false, ..CompletionConfig::default() },\n             \"with_args\",\n             r#\"\n fn with_args(x: i32, y: String) {}\n@@ -844,7 +845,6 @@ fn main() { with_<|> }\n fn with_args(x: i32, y: String) {}\n fn main() { with_args($0) }\n \"#,\n-            &CompletionConfig { add_call_argument_snippets: false, ..CompletionConfig::default() },\n         );\n     }\n "}, {"sha": "9191777455be079f7942b1a010c1c5cf81bae96f", "filename": "crates/ra_ide/src/completion/test_utils.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/65d9966a4f6c35b63f97c16f5f62f83a04574f3e/crates%2Fra_ide%2Fsrc%2Fcompletion%2Ftest_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65d9966a4f6c35b63f97c16f5f62f83a04574f3e/crates%2Fra_ide%2Fsrc%2Fcompletion%2Ftest_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Ftest_utils.rs?ref=65d9966a4f6c35b63f97c16f5f62f83a04574f3e", "patch": "@@ -13,15 +13,15 @@ use crate::{\n };\n \n pub(crate) fn do_completion(code: &str, kind: CompletionKind) -> Vec<CompletionItem> {\n-    do_completion_with_config(code, kind, &CompletionConfig::default())\n+    do_completion_with_config(CompletionConfig::default(), code, kind)\n }\n \n pub(crate) fn do_completion_with_config(\n+    config: CompletionConfig,\n     code: &str,\n     kind: CompletionKind,\n-    config: &CompletionConfig,\n ) -> Vec<CompletionItem> {\n-    let mut kind_completions: Vec<CompletionItem> = get_all_completion_items(code, config)\n+    let mut kind_completions: Vec<CompletionItem> = get_all_completion_items(config, code)\n         .into_iter()\n         .filter(|c| c.completion_kind == kind)\n         .collect();\n@@ -30,15 +30,15 @@ pub(crate) fn do_completion_with_config(\n }\n \n pub(crate) fn completion_list(code: &str, kind: CompletionKind) -> String {\n-    completion_list_with_config(code, kind, &CompletionConfig::default())\n+    completion_list_with_config(CompletionConfig::default(), code, kind)\n }\n \n pub(crate) fn completion_list_with_config(\n+    config: CompletionConfig,\n     code: &str,\n     kind: CompletionKind,\n-    config: &CompletionConfig,\n ) -> String {\n-    let mut kind_completions: Vec<CompletionItem> = get_all_completion_items(code, config)\n+    let mut kind_completions: Vec<CompletionItem> = get_all_completion_items(config, code)\n         .into_iter()\n         .filter(|c| c.completion_kind == kind)\n         .collect();\n@@ -70,19 +70,19 @@ fn monospace_width(s: &str) -> usize {\n }\n \n pub(crate) fn check_edit(what: &str, ra_fixture_before: &str, ra_fixture_after: &str) {\n-    check_edit_with_config(what, ra_fixture_before, ra_fixture_after, &CompletionConfig::default())\n+    check_edit_with_config(CompletionConfig::default(), what, ra_fixture_before, ra_fixture_after)\n }\n \n pub(crate) fn check_edit_with_config(\n+    config: CompletionConfig,\n     what: &str,\n     ra_fixture_before: &str,\n     ra_fixture_after: &str,\n-    config: &CompletionConfig,\n ) {\n     let ra_fixture_after = trim_indent(ra_fixture_after);\n     let (analysis, position) = analysis_and_position(ra_fixture_before);\n     let completions: Vec<CompletionItem> =\n-        analysis.completions(config, position).unwrap().unwrap().into();\n+        analysis.completions(&config, position).unwrap().unwrap().into();\n     let (completion,) = completions\n         .iter()\n         .filter(|it| it.lookup() == what)\n@@ -106,9 +106,9 @@ pub(crate) fn check_pattern_is_applicable(code: &str, check: fn(SyntaxElement) -\n }\n \n pub(crate) fn get_all_completion_items(\n+    config: CompletionConfig,\n     code: &str,\n-    options: &CompletionConfig,\n ) -> Vec<CompletionItem> {\n     let (analysis, position) = analysis_and_position(code);\n-    analysis.completions(options, position).unwrap().unwrap().into()\n+    analysis.completions(&config, position).unwrap().unwrap().into()\n }"}, {"sha": "35ab741d82cf4f894f0d1d3c00c4bc9212692c79", "filename": "crates/ra_ide/src/inlay_hints.rs", "status": "modified", "additions": 47, "deletions": 47, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/65d9966a4f6c35b63f97c16f5f62f83a04574f3e/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65d9966a4f6c35b63f97c16f5f62f83a04574f3e/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs?ref=65d9966a4f6c35b63f97c16f5f62f83a04574f3e", "patch": "@@ -351,10 +351,10 @@ mod tests {\n     use crate::{inlay_hints::InlayHintsConfig, mock_analysis::single_file};\n \n     fn check(ra_fixture: &str) {\n-        check_with_config(ra_fixture, InlayHintsConfig::default());\n+        check_with_config(InlayHintsConfig::default(), ra_fixture);\n     }\n \n-    fn check_with_config(ra_fixture: &str, config: InlayHintsConfig) {\n+    fn check_with_config(config: InlayHintsConfig, ra_fixture: &str) {\n         let (analysis, file_id) = single_file(ra_fixture);\n         let expected = extract_annotations(&*analysis.file_text(file_id).unwrap());\n         let inlay_hints = analysis.inlay_hints(file_id, &config).unwrap();\n@@ -363,7 +363,7 @@ mod tests {\n         assert_eq!(expected, actual);\n     }\n \n-    fn check_expect(ra_fixture: &str, config: InlayHintsConfig, expect: Expect) {\n+    fn check_expect(config: InlayHintsConfig, ra_fixture: &str, expect: Expect) {\n         let (analysis, file_id) = single_file(ra_fixture);\n         let inlay_hints = analysis.inlay_hints(file_id, &config).unwrap();\n         expect.assert_debug_eq(&inlay_hints)\n@@ -372,6 +372,12 @@ mod tests {\n     #[test]\n     fn param_hints_only() {\n         check_with_config(\n+            InlayHintsConfig {\n+                parameter_hints: true,\n+                type_hints: false,\n+                chaining_hints: false,\n+                max_length: None,\n+            },\n             r#\"\n fn foo(a: i32, b: i32) -> i32 { a + b }\n fn main() {\n@@ -382,47 +388,41 @@ fn main() {\n       //^ b\n     );\n }\"#,\n-            InlayHintsConfig {\n-                parameter_hints: true,\n-                type_hints: false,\n-                chaining_hints: false,\n-                max_length: None,\n-            },\n         );\n     }\n \n     #[test]\n     fn hints_disabled() {\n         check_with_config(\n-            r#\"\n-fn foo(a: i32, b: i32) -> i32 { a + b }\n-fn main() {\n-    let _x = foo(4, 4);\n-}\"#,\n             InlayHintsConfig {\n                 type_hints: false,\n                 parameter_hints: false,\n                 chaining_hints: false,\n                 max_length: None,\n             },\n+            r#\"\n+fn foo(a: i32, b: i32) -> i32 { a + b }\n+fn main() {\n+    let _x = foo(4, 4);\n+}\"#,\n         );\n     }\n \n     #[test]\n     fn type_hints_only() {\n         check_with_config(\n-            r#\"\n-fn foo(a: i32, b: i32) -> i32 { a + b }\n-fn main() {\n-    let _x = foo(4, 4);\n-      //^^ i32\n-}\"#,\n             InlayHintsConfig {\n                 type_hints: true,\n                 parameter_hints: false,\n                 chaining_hints: false,\n                 max_length: None,\n             },\n+            r#\"\n+fn foo(a: i32, b: i32) -> i32 { a + b }\n+fn main() {\n+    let _x = foo(4, 4);\n+      //^^ i32\n+}\"#,\n         );\n     }\n \n@@ -590,6 +590,7 @@ fn main() {\n     #[test]\n     fn hint_truncation() {\n         check_with_config(\n+            InlayHintsConfig { max_length: Some(8), ..Default::default() },\n             r#\"\n struct Smol<T>(T);\n \n@@ -603,7 +604,6 @@ fn main() {\n     let c = Smol(Smol(0u32))\n       //^ Smol<Smol<\u2026>>\n }\"#,\n-            InlayHintsConfig { max_length: Some(8), ..Default::default() },\n         );\n     }\n \n@@ -673,6 +673,7 @@ fn main() {\n     #[test]\n     fn omitted_parameters_hints_heuristics() {\n         check_with_config(\n+            InlayHintsConfig { max_length: Some(8), ..Default::default() },\n             r#\"\n fn map(f: i32) {}\n fn filter(predicate: i32) {}\n@@ -753,13 +754,13 @@ fn main() {\n     let _: f64 = a.div_euclid(b);\n     let _: f64 = a.abs_sub(b);\n }\"#,\n-            InlayHintsConfig { max_length: Some(8), ..Default::default() },\n         );\n     }\n \n     #[test]\n     fn unit_structs_have_no_type_hints() {\n         check_with_config(\n+            InlayHintsConfig { max_length: Some(8), ..Default::default() },\n             r#\"\n enum Result<T, E> { Ok(T), Err(E) }\n use Result::*;\n@@ -772,13 +773,18 @@ fn main() {\n         Err(SyntheticSyntax) => (),\n     }\n }\"#,\n-            InlayHintsConfig { max_length: Some(8), ..Default::default() },\n         );\n     }\n \n     #[test]\n     fn chaining_hints_ignore_comments() {\n         check_expect(\n+            InlayHintsConfig {\n+                parameter_hints: false,\n+                type_hints: false,\n+                chaining_hints: true,\n+                max_length: None,\n+            },\n             r#\"\n struct A(B);\n impl A { fn into_b(self) -> B { self.0 } }\n@@ -792,12 +798,6 @@ fn main() {\n         .into_c();\n }\n \"#,\n-            InlayHintsConfig {\n-                parameter_hints: false,\n-                type_hints: false,\n-                chaining_hints: true,\n-                max_length: None,\n-            },\n             expect![[r#\"\n                 [\n                     InlayHint {\n@@ -818,6 +818,12 @@ fn main() {\n     #[test]\n     fn chaining_hints_without_newlines() {\n         check_with_config(\n+            InlayHintsConfig {\n+                parameter_hints: false,\n+                type_hints: false,\n+                chaining_hints: true,\n+                max_length: None,\n+            },\n             r#\"\n struct A(B);\n impl A { fn into_b(self) -> B { self.0 } }\n@@ -828,18 +834,18 @@ struct C;\n fn main() {\n     let c = A(B(C)).into_b().into_c();\n }\"#,\n-            InlayHintsConfig {\n-                parameter_hints: false,\n-                type_hints: false,\n-                chaining_hints: true,\n-                max_length: None,\n-            },\n         );\n     }\n \n     #[test]\n     fn struct_access_chaining_hints() {\n         check_expect(\n+            InlayHintsConfig {\n+                parameter_hints: false,\n+                type_hints: false,\n+                chaining_hints: true,\n+                max_length: None,\n+            },\n             r#\"\n struct A { pub b: B }\n struct B { pub c: C }\n@@ -858,12 +864,6 @@ fn main() {\n     let x = D\n         .foo();\n }\"#,\n-            InlayHintsConfig {\n-                parameter_hints: false,\n-                type_hints: false,\n-                chaining_hints: true,\n-                max_length: None,\n-            },\n             expect![[r#\"\n                 [\n                     InlayHint {\n@@ -884,6 +884,12 @@ fn main() {\n     #[test]\n     fn generic_chaining_hints() {\n         check_expect(\n+            InlayHintsConfig {\n+                parameter_hints: false,\n+                type_hints: false,\n+                chaining_hints: true,\n+                max_length: None,\n+            },\n             r#\"\n struct A<T>(T);\n struct B<T>(T);\n@@ -903,12 +909,6 @@ fn main() {\n         .into_c();\n }\n \"#,\n-            InlayHintsConfig {\n-                parameter_hints: false,\n-                type_hints: false,\n-                chaining_hints: true,\n-                max_length: None,\n-            },\n             expect![[r#\"\n                 [\n                     InlayHint {"}, {"sha": "b1b222deb82809dcd402667fc406bf7872d5af83", "filename": "crates/rust-analyzer/src/diagnostics/to_proto.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65d9966a4f6c35b63f97c16f5f62f83a04574f3e/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65d9966a4f6c35b63f97c16f5f62f83a04574f3e/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs?ref=65d9966a4f6c35b63f97c16f5f62f83a04574f3e", "patch": "@@ -258,7 +258,6 @@ mod tests {\n \n     use expect::{expect_file, ExpectFile};\n \n-    // TODO: inlay hints config order\n     fn check(diagnostics_json: &str, expect: ExpectFile) {\n         check_with_config(DiagnosticsConfig::default(), diagnostics_json, expect)\n     }"}]}