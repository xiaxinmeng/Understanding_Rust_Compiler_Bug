{"sha": "b0e5c7d1fee37f1890455b977495bfe262716701", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwZTVjN2QxZmVlMzdmMTg5MDQ1NWI5Nzc0OTViZmUyNjI3MTY3MDE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-20T16:36:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-20T16:36:23Z"}, "message": "Auto merge of #74699 - notriddle:fd-non-negative, r=m-ou-se\n\nMark `-1` as an available niche for file descriptors\n\nBased on discussion from <https://internals.rust-lang.org/t/can-the-standard-library-shrink-option-file/12768>, the file descriptor `-1` is chosen based on the POSIX API designs that use it as a sentinel to report errors. A bigger niche could've been chosen, particularly on Linux, but would not necessarily be portable.\n\nThis PR also adds a test case to ensure that the -1 niche (which is kind of hacky and has no obvious test case) works correctly. It requires the \"upper\" bound, which is actually -1, to be expressed in two's complement.", "tree": {"sha": "c286f7b8a8386d4fbd14f7e8ef9c438a8990f797", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c286f7b8a8386d4fbd14f7e8ef9c438a8990f797"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0e5c7d1fee37f1890455b977495bfe262716701", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0e5c7d1fee37f1890455b977495bfe262716701", "html_url": "https://github.com/rust-lang/rust/commit/b0e5c7d1fee37f1890455b977495bfe262716701", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0e5c7d1fee37f1890455b977495bfe262716701/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ad5292aea6328113b55968b4322528d48261316", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ad5292aea6328113b55968b4322528d48261316", "html_url": "https://github.com/rust-lang/rust/commit/2ad5292aea6328113b55968b4322528d48261316"}, {"sha": "094b1da3a1beb23b47e58aabe8d2c8ce74bb4f7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/094b1da3a1beb23b47e58aabe8d2c8ce74bb4f7f", "html_url": "https://github.com/rust-lang/rust/commit/094b1da3a1beb23b47e58aabe8d2c8ce74bb4f7f"}], "stats": {"total": 33, "additions": 27, "deletions": 6}, "files": [{"sha": "821851a6c65b70be433262d9f783a6961284c291", "filename": "library/std/src/sys/unix/fd.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b0e5c7d1fee37f1890455b977495bfe262716701/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0e5c7d1fee37f1890455b977495bfe262716701/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffd.rs?ref=b0e5c7d1fee37f1890455b977495bfe262716701", "patch": "@@ -12,6 +12,11 @@ use crate::sys_common::AsInner;\n use libc::{c_int, c_void};\n \n #[derive(Debug)]\n+#[rustc_layout_scalar_valid_range_start(0)]\n+// libstd/os/raw/mod.rs assures me that every libstd-supported platform has a\n+// 32-bit c_int. Below is -2, in two's complement, but that only works out\n+// because c_int is 32 bits.\n+#[rustc_layout_scalar_valid_range_end(0xFF_FF_FF_FE)]\n pub struct FileDesc {\n     fd: c_int,\n }\n@@ -63,7 +68,9 @@ const fn max_iov() -> usize {\n \n impl FileDesc {\n     pub fn new(fd: c_int) -> FileDesc {\n-        FileDesc { fd }\n+        assert_ne!(fd, -1i32);\n+        // SAFETY: we just asserted that the value is in the valid range and isn't `-1` (the only value bigger than `0xFF_FF_FF_FE` unsigned)\n+        unsafe { FileDesc { fd } }\n     }\n \n     pub fn raw(&self) -> c_int {"}, {"sha": "c9520485c3c7cc0e7f896bd900bc95f7facff185", "filename": "library/std/src/sys/unix/fd/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0e5c7d1fee37f1890455b977495bfe262716701/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffd%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0e5c7d1fee37f1890455b977495bfe262716701/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffd%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffd%2Ftests.rs?ref=b0e5c7d1fee37f1890455b977495bfe262716701", "patch": "@@ -3,7 +3,7 @@ use core::mem::ManuallyDrop;\n \n #[test]\n fn limit_vector_count() {\n-    let stdout = ManuallyDrop::new(FileDesc { fd: 1 });\n+    let stdout = ManuallyDrop::new(unsafe { FileDesc { fd: 1 } });\n     let bufs = (0..1500).map(|_| IoSlice::new(&[])).collect::<Vec<_>>();\n     assert!(stdout.write_vectored(&bufs).is_ok());\n }"}, {"sha": "0716cee21c6626a71670081e752d2abdddc11775", "filename": "src/test/ui/print_type_sizes/niche-filling.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b0e5c7d1fee37f1890455b977495bfe262716701/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0e5c7d1fee37f1890455b977495bfe262716701/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.rs?ref=b0e5c7d1fee37f1890455b977495bfe262716701", "patch": "@@ -15,12 +15,19 @@\n // padding and overall computed sizes can be quite different.\n \n #![feature(start)]\n+#![feature(rustc_attrs)]\n #![allow(dead_code)]\n \n use std::num::NonZeroU32;\n \n pub enum MyOption<T> { None, Some(T) }\n \n+#[rustc_layout_scalar_valid_range_start(0)]\n+#[rustc_layout_scalar_valid_range_end(0xFF_FF_FF_FE)]\n+pub struct MyNotNegativeOne {\n+  _i: i32,\n+}\n+\n impl<T> Default for MyOption<T> {\n     fn default() -> Self { MyOption::None }\n }\n@@ -77,17 +84,18 @@ fn start(_: isize, _: *const *const u8) -> isize {\n     let _a: MyOption<bool> = Default::default();\n     let _b: MyOption<char> = Default::default();\n     let _c: MyOption<std::cmp::Ordering> = Default::default();\n-    let _b: MyOption<MyOption<u8>> = Default::default();\n+    let _d: MyOption<MyOption<u8>> = Default::default();\n     let _e: Enum4<(), char, (), ()> = Enum4::One(());\n     let _f: Enum4<(), (), bool, ()> = Enum4::One(());\n     let _g: Enum4<(), (), (), MyOption<u8>> = Enum4::One(());\n+    let _h: MyOption<MyNotNegativeOne> = Default::default();\n \n     // Unions do not currently participate in niche filling.\n-    let _h: MyOption<Union2<NonZeroU32, u32>> = Default::default();\n+    let _i: MyOption<Union2<NonZeroU32, u32>> = Default::default();\n \n     // ...even when theoretically possible.\n-    let _i: MyOption<Union1<NonZeroU32>> = Default::default();\n-    let _j: MyOption<Union2<NonZeroU32, NonZeroU32>> = Default::default();\n+    let _j: MyOption<Union1<NonZeroU32>> = Default::default();\n+    let _k: MyOption<Union2<NonZeroU32, NonZeroU32>> = Default::default();\n \n     0\n }"}, {"sha": "d1753c26ca83b5949d99b7fbc2318bd05648eec8", "filename": "src/test/ui/print_type_sizes/niche-filling.stdout", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b0e5c7d1fee37f1890455b977495bfe262716701/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/b0e5c7d1fee37f1890455b977495bfe262716701/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.stdout?ref=b0e5c7d1fee37f1890455b977495bfe262716701", "patch": "@@ -43,6 +43,12 @@ print-type-size     variant `Three`: 0 bytes\n print-type-size         field `.0`: 0 bytes\n print-type-size     variant `Four`: 0 bytes\n print-type-size         field `.0`: 0 bytes\n+print-type-size type: `MyNotNegativeOne`: 4 bytes, alignment: 4 bytes\n+print-type-size     field `._i`: 4 bytes\n+print-type-size type: `MyOption<MyNotNegativeOne>`: 4 bytes, alignment: 4 bytes\n+print-type-size     variant `Some`: 4 bytes\n+print-type-size         field `.0`: 4 bytes\n+print-type-size     variant `None`: 0 bytes\n print-type-size type: `MyOption<char>`: 4 bytes, alignment: 4 bytes\n print-type-size     variant `Some`: 4 bytes\n print-type-size         field `.0`: 4 bytes"}]}