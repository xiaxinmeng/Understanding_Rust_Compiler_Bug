{"sha": "e0b0c83138236ba1b2d532f79647ee45f7824741", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwYjBjODMxMzgyMzZiYTFiMmQ1MzJmNzk2NDdlZTQ1Zjc4MjQ3NDE=", "commit": {"author": {"name": "Alfie John", "email": "alfiej@fastmail.fm", "date": "2014-11-19T12:43:13Z"}, "committer": {"name": "Alfie John", "email": "alfiej@fastmail.fm", "date": "2014-11-19T12:43:13Z"}, "message": "doc: clarifying unsafe code vs undefined behavior", "tree": {"sha": "77eba8da9a733be93928691655406fcadab97f03", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77eba8da9a733be93928691655406fcadab97f03"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0b0c83138236ba1b2d532f79647ee45f7824741", "comment_count": 6, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0b0c83138236ba1b2d532f79647ee45f7824741", "html_url": "https://github.com/rust-lang/rust/commit/e0b0c83138236ba1b2d532f79647ee45f7824741", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0b0c83138236ba1b2d532f79647ee45f7824741/comments", "author": null, "committer": null, "parents": [{"sha": "cf7df1e6382e239619a8447719c3c19787d7b60d", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf7df1e6382e239619a8447719c3c19787d7b60d", "html_url": "https://github.com/rust-lang/rust/commit/cf7df1e6382e239619a8447719c3c19787d7b60d"}], "stats": {"total": 17, "additions": 8, "deletions": 9}, "files": [{"sha": "8f0516aca1826ffb47695f6cb228efc22694e28f", "filename": "src/doc/reference.md", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e0b0c83138236ba1b2d532f79647ee45f7824741/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/e0b0c83138236ba1b2d532f79647ee45f7824741/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=e0b0c83138236ba1b2d532f79647ee45f7824741", "patch": "@@ -1117,13 +1117,13 @@ Rust:\n ##### Unsafe functions\n \n Unsafe functions are functions that are not safe in all contexts and/or for all\n-possible inputs. Such a function must be prefixed with the keyword `unsafe`.\n+possible inputs. Such a function must be prefixed with the keyword `unsafe` and\n+can only be called from an `unsafe` block or another `unsafe` function.\n \n ##### Unsafe blocks\n \n-A block of code can also be prefixed with the `unsafe` keyword, to permit\n-calling `unsafe` functions or dereferencing raw pointers within a safe\n-function.\n+A block of code can be prefixed with the `unsafe` keyword, to permit calling\n+`unsafe` functions or dereferencing raw pointers within a safe function.\n \n When a programmer has sufficient conviction that a sequence of potentially\n unsafe operations is actually safe, they can encapsulate that sequence (taken\n@@ -1143,12 +1143,11 @@ represented with reference-counted pointers in safe code. By using `unsafe`\n blocks to represent the reverse links as raw pointers, it can be implemented\n with only boxes.\n \n-##### Behavior considered unsafe\n+##### Behavior considered undefined\n \n-This is a list of behavior which is forbidden in all Rust code. Type checking\n-provides the guarantee that these issues are never caused by safe code. An\n-`unsafe` block or function is responsible for never invoking this behaviour or\n-exposing an API making it possible for it to occur in safe code.\n+The following is a list of behavior which is forbidden in all Rust code,\n+including within `unsafe` blocks and `unsafe` functions. Type checking provides\n+the guarantee that these issues are never caused by safe code.\n \n * Data races\n * Dereferencing a null/dangling raw pointer"}]}