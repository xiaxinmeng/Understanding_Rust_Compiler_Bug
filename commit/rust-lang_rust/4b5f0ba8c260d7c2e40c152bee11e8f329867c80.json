{"sha": "4b5f0ba8c260d7c2e40c152bee11e8f329867c80", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiNWYwYmE4YzI2MGQ3YzJlNDBjMTUyYmVlMTFlOGYzMjk4NjdjODA=", "commit": {"author": {"name": "dylan_DPC", "email": "dylan.dpc@gmail.com", "date": "2018-07-13T11:10:24Z"}, "committer": {"name": "dylan_DPC", "email": "dylan.dpc@gmail.com", "date": "2018-07-19T17:45:25Z"}, "message": "generic shuffle continues", "tree": {"sha": "b8b7aed3ec4deb8bb85061060a9d286e474d8d5d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8b7aed3ec4deb8bb85061060a9d286e474d8d5d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b5f0ba8c260d7c2e40c152bee11e8f329867c80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b5f0ba8c260d7c2e40c152bee11e8f329867c80", "html_url": "https://github.com/rust-lang/rust/commit/4b5f0ba8c260d7c2e40c152bee11e8f329867c80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b5f0ba8c260d7c2e40c152bee11e8f329867c80/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d25231f84ad3d95d70d86a71739f309f299ec1e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/d25231f84ad3d95d70d86a71739f309f299ec1e3", "html_url": "https://github.com/rust-lang/rust/commit/d25231f84ad3d95d70d86a71739f309f299ec1e3"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "97f3b1a1c966ce1631877733ec5946246212bbb6", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4b5f0ba8c260d7c2e40c152bee11e8f329867c80/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b5f0ba8c260d7c2e40c152bee11e8f329867c80/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness.rs?ref=4b5f0ba8c260d7c2e40c152bee11e8f329867c80", "patch": "@@ -34,10 +34,10 @@ use super::TypeChecker;\n ///\n /// NB. This computation requires normalization; therefore, it must be\n /// performed before\n-pub(super) fn generate<'gcx, 'tcx, V: LiveVariableMap>(\n+pub(super) fn generate<'gcx, 'tcx>(\n     cx: &mut TypeChecker<'_, 'gcx, 'tcx>,\n     mir: &Mir<'tcx>,\n-    liveness: &LivenessResults<V>,\n+    liveness: &LivenessResults<Local>,\n     flow_inits: &mut FlowAtLocation<MaybeInitializedPlaces<'_, 'gcx, 'tcx>>,\n     move_data: &MoveData<'tcx>,\n ) {\n@@ -55,7 +55,7 @@ pub(super) fn generate<'gcx, 'tcx, V: LiveVariableMap>(\n     }\n }\n \n-struct TypeLivenessGenerator<'gen, 'typeck, 'flow, 'gcx, 'tcx, V: LiveVariableMap>\n+struct TypeLivenessGenerator<'gen, 'typeck, 'flow, 'gcx, 'tcx>\n where\n     'typeck: 'gen,\n     'flow: 'gen,\n@@ -65,7 +65,7 @@ where\n {\n     cx: &'gen mut TypeChecker<'typeck, 'gcx, 'tcx>,\n     mir: &'gen Mir<'tcx>,\n-    liveness: &'gen LivenessResults<V>,\n+    liveness: &'gen LivenessResults<Local>,\n     flow_inits: &'gen mut FlowAtLocation<MaybeInitializedPlaces<'flow, 'gcx, 'tcx>>,\n     move_data: &'gen MoveData<'tcx>,\n     drop_data: FxHashMap<Ty<'tcx>, DropData<'tcx>>,"}, {"sha": "4e78be76b6137a44fcb38142ba9b95b16b171a3a", "filename": "src/librustc_mir/util/liveness.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4b5f0ba8c260d7c2e40c152bee11e8f329867c80/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b5f0ba8c260d7c2e40c152bee11e8f329867c80/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fliveness.rs?ref=4b5f0ba8c260d7c2e40c152bee11e8f329867c80", "patch": "@@ -103,18 +103,18 @@ pub struct LivenessMode {\n }\n \n /// A combination of liveness results, used in NLL.\n-pub struct LivenessResults<V: LiveVariableMap> {\n+pub struct LivenessResults<V> {\n     /// Liveness results where a regular use makes a variable X live,\n     /// but not a drop.\n-    pub regular: LivenessResult<V::LiveVar>,\n+    pub regular: LivenessResult<V>,\n \n     /// Liveness results where a drop makes a variable X live,\n     /// but not a regular use.\n-    pub drop: LivenessResult<V::LiveVar>,\n+    pub drop: LivenessResult<V>,\n }\n \n-impl<V: LiveVariableMap> LivenessResults<V> {\n-    pub fn compute<'tcx>(mir: &Mir<'tcx>, map: &dyn LiveVariableMap<LiveVar = V>) -> LivenessResults<V::LiveVar> {\n+impl<V, M: LiveVariableMap<LiveVar = V>> LivenessResults<V> {\n+    pub fn compute<'tcx>(mir: &Mir<'tcx>, map: &M) -> LivenessResults<V> {\n         LivenessResults {\n             regular: liveness_of_locals(\n                 &mir,\n@@ -138,7 +138,7 @@ impl<V: LiveVariableMap> LivenessResults<V> {\n /// Compute which local variables are live within the given function\n /// `mir`. The liveness mode `mode` determines what sorts of uses are\n /// considered to make a variable live (e.g., do drops count?).\n-pub fn liveness_of_locals<'tcx, V: LiveVariableMap>(mir: &Mir<'tcx>, mode: LivenessMode) -> LivenessResult<V::LiveVar> {\n+pub fn liveness_of_locals<'tcx, V>(mir: &Mir<'tcx>, mode: LivenessMode) -> LivenessResult<V> {\n     let locals = mir.local_decls.len();\n     let def_use: IndexVec<_, _> = mir.basic_blocks()\n         .iter()"}]}