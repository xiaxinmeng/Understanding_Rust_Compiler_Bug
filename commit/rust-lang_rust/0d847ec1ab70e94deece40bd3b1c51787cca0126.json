{"sha": "0d847ec1ab70e94deece40bd3b1c51787cca0126", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkODQ3ZWMxYWI3MGU5NGRlZWNlNDBiZDNiMWM1MTc4N2NjYTAxMjY=", "commit": {"author": {"name": "dylan_DPC", "email": "dylan.dpc@gmail.com", "date": "2018-07-18T17:01:04Z"}, "committer": {"name": "dylan_DPC", "email": "dylan.dpc@gmail.com", "date": "2018-07-19T17:48:03Z"}, "message": "add LocalWithRegion NllLivenessMap", "tree": {"sha": "de64d31c7dfc9d4014498d638a015385d31f1485", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de64d31c7dfc9d4014498d638a015385d31f1485"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d847ec1ab70e94deece40bd3b1c51787cca0126", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d847ec1ab70e94deece40bd3b1c51787cca0126", "html_url": "https://github.com/rust-lang/rust/commit/0d847ec1ab70e94deece40bd3b1c51787cca0126", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d847ec1ab70e94deece40bd3b1c51787cca0126/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43b69c27771929e6dfa7bf1771bc8ee5ce7a99c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/43b69c27771929e6dfa7bf1771bc8ee5ce7a99c5", "html_url": "https://github.com/rust-lang/rust/commit/43b69c27771929e6dfa7bf1771bc8ee5ce7a99c5"}], "stats": {"total": 112, "additions": 76, "deletions": 36}, "files": [{"sha": "18b3cf991d8b36c32ed658ea560328edce085e31", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0d847ec1ab70e94deece40bd3b1c51787cca0126/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d847ec1ab70e94deece40bd3b1c51787cca0126/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=0d847ec1ab70e94deece40bd3b1c51787cca0126", "patch": "@@ -52,7 +52,7 @@ pub mod traversal;\n pub mod visit;\n \n /// Types for locals\n-type LocalDecls<'tcx> = IndexVec<Local, LocalDecl<'tcx>>;\n+type LocalDecls<'tcx> = IndexVec<LocalWithRegion, LocalDecl<'tcx>>;\n \n pub trait HasLocalDecls<'tcx> {\n     fn local_decls(&self) -> &LocalDecls<'tcx>;\n@@ -141,7 +141,7 @@ impl<'tcx> Mir<'tcx> {\n         source_scope_local_data: ClearCrossCrate<IndexVec<SourceScope, SourceScopeLocalData>>,\n         promoted: IndexVec<Promoted, Mir<'tcx>>,\n         yield_ty: Option<Ty<'tcx>>,\n-        local_decls: IndexVec<Local, LocalDecl<'tcx>>,\n+        local_decls: IndexVec<LocalWithRegion, LocalDecl<'tcx>>,\n         arg_count: usize,\n         upvar_decls: Vec<UpvarDecl>,\n         span: Span,\n@@ -209,7 +209,7 @@ impl<'tcx> Mir<'tcx> {\n     }\n \n     #[inline]\n-    pub fn local_kind(&self, local: Local) -> LocalKind {\n+    pub fn local_kind(&self, local: LocalWithRegion) -> LocalKind {\n         let index = local.0 as usize;\n         if index == 0 {\n             debug_assert!(\n@@ -234,9 +234,9 @@ impl<'tcx> Mir<'tcx> {\n \n     /// Returns an iterator over all temporaries.\n     #[inline]\n-    pub fn temps_iter<'a>(&'a self) -> impl Iterator<Item = Local> + 'a {\n+    pub fn temps_iter<'a>(&'a self) -> impl Iterator<Item = LocalWithRegion> + 'a {\n         (self.arg_count + 1..self.local_decls.len()).filter_map(move |index| {\n-            let local = Local::new(index);\n+            let local = LocalWithRegion::new(index);\n             if self.local_decls[local].is_user_variable.is_some() {\n                 None\n             } else {\n@@ -247,9 +247,9 @@ impl<'tcx> Mir<'tcx> {\n \n     /// Returns an iterator over all user-declared locals.\n     #[inline]\n-    pub fn vars_iter<'a>(&'a self) -> impl Iterator<Item = Local> + 'a {\n+    pub fn vars_iter<'a>(&'a self) -> impl Iterator<Item = LocalWithRegion> + 'a {\n         (self.arg_count + 1..self.local_decls.len()).filter_map(move |index| {\n-            let local = Local::new(index);\n+            let local = LocalWithRegion::new(index);\n             if self.local_decls[local].is_user_variable.is_some() {\n                 Some(local)\n             } else {\n@@ -260,9 +260,9 @@ impl<'tcx> Mir<'tcx> {\n \n     /// Returns an iterator over all user-declared mutable arguments and locals.\n     #[inline]\n-    pub fn mut_vars_and_args_iter<'a>(&'a self) -> impl Iterator<Item = Local> + 'a {\n+    pub fn mut_vars_and_args_iter<'a>(&'a self) -> impl Iterator<Item = LocalWithRegion> + 'a {\n         (1..self.local_decls.len()).filter_map(move |index| {\n-            let local = Local::new(index);\n+            let local = LocalWithRegion::new(index);\n             let decl = &self.local_decls[local];\n             if (decl.is_user_variable.is_some() || index < self.arg_count + 1)\n                 && decl.mutability == Mutability::Mut\n@@ -2932,3 +2932,5 @@ impl<'tcx> TypeFoldable<'tcx> for Literal<'tcx> {\n         }\n     }\n }\n+\n+newtype_index!(LocalWithRegion);\n\\ No newline at end of file"}, {"sha": "ced185d132a738fa0d5384bfce0abc8cf3263f18", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0d847ec1ab70e94deece40bd3b1c51787cca0126/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d847ec1ab70e94deece40bd3b1c51787cca0126/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=0d847ec1ab70e94deece40bd3b1c51787cca0126", "patch": "@@ -146,7 +146,7 @@ macro_rules! make_mir_visitor {\n \n             fn visit_user_assert_ty(&mut self,\n                                     c_ty: & $($mutability)* CanonicalTy<'tcx>,\n-                                    local: & $($mutability)* Local,\n+                                    local: & $($mutability)* LocalWithRegion,\n                                     location: Location) {\n                 self.super_user_assert_ty(c_ty, local, location);\n             }\n@@ -250,13 +250,13 @@ macro_rules! make_mir_visitor {\n             }\n \n             fn visit_local_decl(&mut self,\n-                                local: Local,\n+                                local: LocalWithRegion,\n                                 local_decl: & $($mutability)* LocalDecl<'tcx>) {\n                 self.super_local_decl(local, local_decl);\n             }\n \n             fn visit_local(&mut self,\n-                            _local: & $($mutability)* Local,\n+                            _local: & $($mutability)* LocalWithRegion,\n                             _context: PlaceContext<'tcx>,\n                             _location: Location) {\n             }\n@@ -632,7 +632,7 @@ macro_rules! make_mir_visitor {\n \n             fn super_user_assert_ty(&mut self,\n                                     _c_ty: & $($mutability)* CanonicalTy<'tcx>,\n-                                    local: & $($mutability)* Local,\n+                                    local: & $($mutability)* LocalWithRegion,\n                                     location: Location) {\n                 self.visit_local(local, PlaceContext::Validate, location);\n             }\n@@ -708,7 +708,7 @@ macro_rules! make_mir_visitor {\n             }\n \n             fn super_local_decl(&mut self,\n-                                local: Local,\n+                                local: LocalWithRegion,\n                                 local_decl: & $($mutability)* LocalDecl<'tcx>) {\n                 let LocalDecl {\n                     mutability: _,"}, {"sha": "ae539f43957c52799a33d061436135e064b5a1ed", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d847ec1ab70e94deece40bd3b1c51787cca0126/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d847ec1ab70e94deece40bd3b1c51787cca0126/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=0d847ec1ab70e94deece40bd3b1c51787cca0126", "patch": "@@ -278,7 +278,7 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n     // Note that this set is expected to be small - only upvars from closures\n     // would have a chance of erroneously adding non-user-defined mutable vars\n     // to the set.\n-    let temporary_used_locals: FxHashSet<Local> = mbcx\n+    let temporary_used_locals: FxHashSet<LocalWithRegion> = mbcx\n         .used_mut\n         .iter()\n         .filter(|&local| !mbcx.mir.local_decls[*local].is_user_variable.is_some())"}, {"sha": "2fcf2d80d2a908741f54ee22c8c2efb46eb166ae", "filename": "src/librustc_mir/borrow_check/nll/mod.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0d847ec1ab70e94deece40bd3b1c51787cca0126/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d847ec1ab70e94deece40bd3b1c51787cca0126/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs?ref=0d847ec1ab70e94deece40bd3b1c51787cca0126", "patch": "@@ -19,7 +19,7 @@ use dataflow::FlowAtLocation;\n use dataflow::MaybeInitializedPlaces;\n use rustc::hir::def_id::DefId;\n use rustc::infer::InferCtxt;\n-use rustc::mir::{ClosureOutlivesSubject, ClosureRegionRequirements, Mir, Local};\n+use rustc::mir::{ClosureOutlivesSubject, ClosureRegionRequirements, Mir, LocalWithRegion};\n use rustc::ty::{self, RegionKind, RegionVid};\n use rustc::util::nodemap::FxHashMap;\n use std::collections::BTreeSet;\n@@ -30,7 +30,7 @@ use std::path::PathBuf;\n use std::rc::Rc;\n use std::str::FromStr;\n use transform::MirSource;\n-use util::liveness::{IdentityMap, LivenessResults, LocalSet};\n+use util::liveness::{IdentityMap, LivenessResults, LocalSet, NllLivenessMap};\n \n use self::mir_util::PassWhere;\n use polonius_engine::{Algorithm, Output};\n@@ -103,7 +103,8 @@ pub(in borrow_check) fn compute_regions<'cx, 'gcx, 'tcx>(\n     let elements = &Rc::new(RegionValueElements::new(mir, universal_regions.len()));\n \n     // Run the MIR type-checker.\n-    let liveness = &LivenessResults::compute(mir, &IdentityMap::new(mir));\n+    let liveness_map = NllLivenessMap::compute(&mir);\n+    let liveness = LivenessResults::compute(mir, &liveness_map);\n     let constraint_sets = type_check::type_check(\n         infcx,\n         param_env,\n@@ -193,7 +194,7 @@ pub(in borrow_check) fn compute_regions<'cx, 'gcx, 'tcx>(\n     // write unit-tests, as well as helping with debugging.\n     dump_mir_results(\n         infcx,\n-        liveness,\n+        &liveness,\n         MirSource::item(def_id),\n         &mir,\n         &regioncx,\n@@ -209,7 +210,7 @@ pub(in borrow_check) fn compute_regions<'cx, 'gcx, 'tcx>(\n \n fn dump_mir_results<'a, 'gcx, 'tcx>(\n     infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n-    liveness: &LivenessResults<Local>,\n+    liveness: &LivenessResults<LocalWithRegion>,\n     source: MirSource,\n     mir: &Mir<'tcx>,\n     regioncx: &RegionInferenceContext,\n@@ -407,7 +408,7 @@ impl ToRegionVid for RegionVid {\n     }\n }\n \n-fn live_variable_set(regular: &LocalSet<Local>, drops: &LocalSet<Local>) -> String {\n+fn live_variable_set(regular: &LocalSet<LocalWithRegion>, drops: &LocalSet<LocalWithRegion>) -> String {\n     // sort and deduplicate:\n     let all_locals: BTreeSet<_> = regular.iter().chain(drops.iter()).collect();\n "}, {"sha": "17cc99c55226871e81498cc7fac0ea184d60a1d1", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0d847ec1ab70e94deece40bd3b1c51787cca0126/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d847ec1ab70e94deece40bd3b1c51787cca0126/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness.rs?ref=0d847ec1ab70e94deece40bd3b1c51787cca0126", "patch": "@@ -13,7 +13,7 @@ use dataflow::move_paths::{HasMoveData, MoveData};\n use dataflow::MaybeInitializedPlaces;\n use dataflow::{FlowAtLocation, FlowsAtLocation};\n use rustc::infer::canonical::QueryRegionConstraint;\n-use rustc::mir::Local;\n+use rustc::mir::{Local, LocalWithRegion};\n use rustc::mir::{BasicBlock, Location, Mir};\n use rustc::traits::query::dropck_outlives::DropckOutlivesResult;\n use rustc::traits::query::type_op::outlives::DropckOutlives;\n@@ -36,7 +36,7 @@ use super::TypeChecker;\n pub(super) fn generate<'gcx, 'tcx>(\n     cx: &mut TypeChecker<'_, 'gcx, 'tcx>,\n     mir: &Mir<'tcx>,\n-    liveness: &LivenessResults<Local>,\n+    liveness: &LivenessResults<LocalWithRegion>,\n     flow_inits: &mut FlowAtLocation<MaybeInitializedPlaces<'_, 'gcx, 'tcx>>,\n     move_data: &MoveData<'tcx>,\n ) {\n@@ -64,7 +64,7 @@ where\n {\n     cx: &'gen mut TypeChecker<'typeck, 'gcx, 'tcx>,\n     mir: &'gen Mir<'tcx>,\n-    liveness: &'gen LivenessResults<Local>,\n+    liveness: &'gen LivenessResults<LocalWithRegion>,\n     flow_inits: &'gen mut FlowAtLocation<MaybeInitializedPlaces<'flow, 'gcx, 'tcx>>,\n     move_data: &'gen MoveData<'tcx>,\n     drop_data: FxHashMap<Ty<'tcx>, DropData<'tcx>>,\n@@ -93,7 +93,7 @@ impl<'gen, 'typeck, 'flow, 'gcx, 'tcx> TypeLivenessGenerator<'gen, 'typeck, 'flo\n                 }\n             });\n \n-        let mut all_live_locals: Vec<(Location, Vec<Local>)> = vec![];\n+        let mut all_live_locals: Vec<(Location, Vec<LocalWithRegion>)> = vec![];\n         self.liveness\n             .drop\n             .simulate_block(self.mir, bb, self.map, |location, live_locals| {"}, {"sha": "6cf5ea576e2d6fc18398edac0640b92ea91f6e3c", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0d847ec1ab70e94deece40bd3b1c51787cca0126/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d847ec1ab70e94deece40bd3b1c51787cca0126/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=0d847ec1ab70e94deece40bd3b1c51787cca0126", "patch": "@@ -108,8 +108,7 @@ pub(crate) fn type_check<'gcx, 'tcx>(\n     mir_def_id: DefId,\n     universal_regions: &UniversalRegions<'tcx>,\n     location_table: &LocationTable,\n-    borrow_set: &BorrowSet<'tcx>,\n-    liveness: &LivenessResults,\n+    liveness: &LivenessResults<LocalWithRegion>,\n     all_facts: &mut Option<AllFacts>,\n     flow_inits: &mut FlowAtLocation<MaybeInitializedPlaces<'_, 'gcx, 'tcx>>,\n     move_data: &MoveData<'tcx>,"}, {"sha": "9cfddb5b32048140e86715e0548113f7071dcd56", "filename": "src/librustc_mir/dataflow/impls/borrowed_locals.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0d847ec1ab70e94deece40bd3b1c51787cca0126/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d847ec1ab70e94deece40bd3b1c51787cca0126/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs?ref=0d847ec1ab70e94deece40bd3b1c51787cca0126", "patch": "@@ -37,34 +37,34 @@ impl<'a, 'tcx: 'a> HaveBeenBorrowedLocals<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> BitDenotation for HaveBeenBorrowedLocals<'a, 'tcx> {\n-    type Idx = Local;\n+    type Idx = LocalWithRegion;\n     fn name() -> &'static str { \"has_been_borrowed_locals\" }\n     fn bits_per_block(&self) -> usize {\n         self.mir.local_decls.len()\n     }\n \n-    fn start_block_effect(&self, _sets: &mut IdxSet<Local>) {\n+    fn start_block_effect(&self, _sets: &mut IdxSet<LocalWithRegion>) {\n         // Nothing is borrowed on function entry\n     }\n \n     fn statement_effect(&self,\n-                        sets: &mut BlockSets<Local>,\n+                        sets: &mut BlockSets<LocalWithRegion>,\n                         loc: Location) {\n         BorrowedLocalsVisitor {\n             sets,\n         }.visit_statement(loc.block, &self.mir[loc.block].statements[loc.statement_index], loc);\n     }\n \n     fn terminator_effect(&self,\n-                         sets: &mut BlockSets<Local>,\n+                         sets: &mut BlockSets<LocalWithRegion>,\n                          loc: Location) {\n         BorrowedLocalsVisitor {\n             sets,\n         }.visit_terminator(loc.block, self.mir[loc.block].terminator(), loc);\n     }\n \n     fn propagate_call_return(&self,\n-                             _in_out: &mut IdxSet<Local>,\n+                             _in_out: &mut IdxSet<LocalWithRegion>,\n                              _call_bb: mir::BasicBlock,\n                              _dest_bb: mir::BasicBlock,\n                              _dest_place: &mir::Place) {\n@@ -87,10 +87,10 @@ impl<'a, 'tcx> InitialFlow for HaveBeenBorrowedLocals<'a, 'tcx> {\n }\n \n struct BorrowedLocalsVisitor<'b, 'c: 'b> {\n-    sets: &'b mut BlockSets<'c, Local>,\n+    sets: &'b mut BlockSets<'c, LocalWithRegion>,\n }\n \n-fn find_local<'tcx>(place: &Place<'tcx>) -> Option<Local> {\n+fn find_local<'tcx>(place: &Place<'tcx>) -> Option<LocalWithRegion> {\n     match *place {\n         Place::Local(l) => Some(l),\n         Place::Static(..) => None,"}, {"sha": "2d36e6105fe72e41effafd60319b946ebf2b6492", "filename": "src/librustc_mir/util/liveness.rs", "status": "modified", "additions": 40, "deletions": 2, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/0d847ec1ab70e94deece40bd3b1c51787cca0126/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d847ec1ab70e94deece40bd3b1c51787cca0126/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fliveness.rs?ref=0d847ec1ab70e94deece40bd3b1c51787cca0126", "patch": "@@ -37,8 +37,7 @@ use rustc::mir::visit::MirVisitable;\n use rustc::mir::visit::{PlaceContext, Visitor};\n use rustc::mir::Local;\n use rustc::mir::*;\n-use rustc::ty::item_path;\n-use rustc::ty::TyCtxt;\n+use rustc::ty::{item_path, TyCtxt, TypeFoldable};\n use rustc_data_structures::indexed_set::IdxSetBuf;\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n use rustc_data_structures::work_queue::WorkQueue;\n@@ -545,3 +544,42 @@ pub fn write_mir_fn<'a, 'tcx, V: Idx>(\n     writeln!(w, \"}}\")?;\n     Ok(())\n }\n+\n+crate struct NllLivenessMap {\n+    pub from_local: IndexVec<Local, Option<LocalWithRegion>>,\n+    pub to_local: IndexVec<LocalWithRegion, Local>,\n+\n+}\n+\n+impl LiveVariableMap for NllLivenessMap {\n+    type LiveVar = LocalWithRegion;\n+\n+    fn from_local(&self, local: Local) -> Option<Self::LiveVar> {\n+        self.from_local[local]\n+    }\n+\n+    fn from_live_var(&self, local: Self::LiveVar) -> Local {\n+        self.to_local[local]\n+    }\n+\n+    fn num_variables(&self) -> usize {\n+        self.to_local.len()\n+    }\n+}\n+\n+impl NllLivenessMap {\n+    pub fn compute(mir: &Mir) -> Self {\n+        let mut to_local = IndexVec::default();\n+        let from_local: IndexVec<_,_> = mir.local.decls.iter_enumerated.map(|local, local_decl| {\n+            if local_decl.ty.has_free_regions() {\n+                Some(to_local.push(local))\n+            }\n+            else {\n+                None\n+            }\n+            }).collect();\n+\n+        Self { from_local, to_local }\n+    }\n+}\n+"}]}