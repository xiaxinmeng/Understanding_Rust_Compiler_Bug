{"sha": "373b9d624341b431dd09be6c7742ef84b8e70a98", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3M2I5ZDYyNDM0MWI0MzFkZDA5YmU2Yzc3NDJlZjg0YjhlNzBhOTg=", "commit": {"author": {"name": "Pythoner6", "email": "pythoner6@gmail.com", "date": "2014-07-26T00:12:51Z"}, "committer": {"name": "Joseph Martin", "email": "pythoner6@gmail.com", "date": "2014-08-30T03:43:55Z"}, "message": "Add support for labeled while loops.", "tree": {"sha": "8e841749cb71c02d776d2a9ab1c0ad268d43d4b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e841749cb71c02d776d2a9ab1c0ad268d43d4b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/373b9d624341b431dd09be6c7742ef84b8e70a98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/373b9d624341b431dd09be6c7742ef84b8e70a98", "html_url": "https://github.com/rust-lang/rust/commit/373b9d624341b431dd09be6c7742ef84b8e70a98", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/373b9d624341b431dd09be6c7742ef84b8e70a98/comments", "author": {"login": "Pythoner6", "id": 7811682, "node_id": "MDQ6VXNlcjc4MTE2ODI=", "avatar_url": "https://avatars.githubusercontent.com/u/7811682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Pythoner6", "html_url": "https://github.com/Pythoner6", "followers_url": "https://api.github.com/users/Pythoner6/followers", "following_url": "https://api.github.com/users/Pythoner6/following{/other_user}", "gists_url": "https://api.github.com/users/Pythoner6/gists{/gist_id}", "starred_url": "https://api.github.com/users/Pythoner6/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Pythoner6/subscriptions", "organizations_url": "https://api.github.com/users/Pythoner6/orgs", "repos_url": "https://api.github.com/users/Pythoner6/repos", "events_url": "https://api.github.com/users/Pythoner6/events{/privacy}", "received_events_url": "https://api.github.com/users/Pythoner6/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Pythoner6", "id": 7811682, "node_id": "MDQ6VXNlcjc4MTE2ODI=", "avatar_url": "https://avatars.githubusercontent.com/u/7811682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Pythoner6", "html_url": "https://github.com/Pythoner6", "followers_url": "https://api.github.com/users/Pythoner6/followers", "following_url": "https://api.github.com/users/Pythoner6/following{/other_user}", "gists_url": "https://api.github.com/users/Pythoner6/gists{/gist_id}", "starred_url": "https://api.github.com/users/Pythoner6/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Pythoner6/subscriptions", "organizations_url": "https://api.github.com/users/Pythoner6/orgs", "repos_url": "https://api.github.com/users/Pythoner6/repos", "events_url": "https://api.github.com/users/Pythoner6/events{/privacy}", "received_events_url": "https://api.github.com/users/Pythoner6/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5419b2ca2c27b4745fa1f2773719350420542c76", "url": "https://api.github.com/repos/rust-lang/rust/commits/5419b2ca2c27b4745fa1f2773719350420542c76", "html_url": "https://github.com/rust-lang/rust/commit/5419b2ca2c27b4745fa1f2773719350420542c76"}], "stats": {"total": 121, "additions": 97, "deletions": 24}, "files": [{"sha": "4b43c685fa97bd4ca432d07f002d9b877b317224", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/373b9d624341b431dd09be6c7742ef84b8e70a98/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373b9d624341b431dd09be6c7742ef84b8e70a98/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=373b9d624341b431dd09be6c7742ef84b8e70a98", "patch": "@@ -58,7 +58,7 @@ impl LintPass for WhileTrue {\n \n     fn check_expr(&mut self, cx: &Context, e: &ast::Expr) {\n         match e.node {\n-            ast::ExprWhile(cond, _) => {\n+            ast::ExprWhile(cond, _, _) => {\n                 match cond.node {\n                     ast::ExprLit(lit) => {\n                         match lit.node {\n@@ -1073,7 +1073,7 @@ impl LintPass for UnnecessaryParens {\n     fn check_expr(&mut self, cx: &Context, e: &ast::Expr) {\n         let (value, msg, struct_lit_needs_parens) = match e.node {\n             ast::ExprIf(cond, _, _) => (cond, \"`if` condition\", true),\n-            ast::ExprWhile(cond, _) => (cond, \"`while` condition\", true),\n+            ast::ExprWhile(cond, _, _) => (cond, \"`while` condition\", true),\n             ast::ExprMatch(head, _) => (head, \"`match` head expression\", true),\n             ast::ExprRet(Some(value)) => (value, \"`return` value\", false),\n             ast::ExprAssign(_, value) => (value, \"assigned value\", false),"}, {"sha": "bbdfae0f91bc8ac40b21f3189476088d4a7e8a9e", "filename": "src/librustc/middle/cfg/construct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373b9d624341b431dd09be6c7742ef84b8e70a98/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373b9d624341b431dd09be6c7742ef84b8e70a98/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs?ref=373b9d624341b431dd09be6c7742ef84b8e70a98", "patch": "@@ -227,7 +227,7 @@ impl<'a> CFGBuilder<'a> {\n                 self.add_node(expr.id, [then_exit, else_exit])           // 4, 5\n             }\n \n-            ast::ExprWhile(ref cond, ref body) => {\n+            ast::ExprWhile(ref cond, ref body, _) => {\n                 //\n                 //         [pred]\n                 //           |"}, {"sha": "e030e4bbd4e9eefcc2fc98ec4454842bf7162c3c", "filename": "src/librustc/middle/check_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373b9d624341b431dd09be6c7742ef84b8e70a98/src%2Flibrustc%2Fmiddle%2Fcheck_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373b9d624341b431dd09be6c7742ef84b8e70a98/src%2Flibrustc%2Fmiddle%2Fcheck_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_loop.rs?ref=373b9d624341b431dd09be6c7742ef84b8e70a98", "patch": "@@ -35,7 +35,7 @@ impl<'a> Visitor<Context> for CheckLoopVisitor<'a> {\n \n     fn visit_expr(&mut self, e: &ast::Expr, cx:Context) {\n         match e.node {\n-            ast::ExprWhile(ref e, ref b) => {\n+            ast::ExprWhile(ref e, ref b, _) => {\n                 self.visit_expr(&**e, cx);\n                 self.visit_block(&**b, Loop);\n             }"}, {"sha": "6e522034147219c7c56a2f2629efb298c785c572", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373b9d624341b431dd09be6c7742ef84b8e70a98/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373b9d624341b431dd09be6c7742ef84b8e70a98/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=373b9d624341b431dd09be6c7742ef84b8e70a98", "patch": "@@ -410,7 +410,7 @@ impl<'d,'t,TYPER:mc::Typer> ExprUseVisitor<'d,'t,TYPER> {\n                 self.walk_block(&**blk);\n             }\n \n-            ast::ExprWhile(ref cond_expr, ref blk) => {\n+            ast::ExprWhile(ref cond_expr, ref blk, _) => {\n                 self.consume_expr(&**cond_expr);\n                 self.walk_block(&**blk);\n             }"}, {"sha": "6ff09916b35ae585f3c08428ba70abc4dfbcc031", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373b9d624341b431dd09be6c7742ef84b8e70a98/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373b9d624341b431dd09be6c7742ef84b8e70a98/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=373b9d624341b431dd09be6c7742ef84b8e70a98", "patch": "@@ -1017,7 +1017,7 @@ impl<'a> Liveness<'a> {\n             self.propagate_through_expr(&**cond, ln)\n           }\n \n-          ExprWhile(ref cond, ref blk) => {\n+          ExprWhile(ref cond, ref blk, _) => {\n             self.propagate_through_loop(expr,\n                                         WhileLoop(cond.clone()),\n                                         &**blk,"}, {"sha": "9366d722c5e10c2e5c208cdafc8200fb8d53700a", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373b9d624341b431dd09be6c7742ef84b8e70a98/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373b9d624341b431dd09be6c7742ef84b8e70a98/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=373b9d624341b431dd09be6c7742ef84b8e70a98", "patch": "@@ -496,7 +496,7 @@ fn resolve_expr(visitor: &mut RegionResolutionVisitor,\n             visitor.region_maps.mark_as_terminating_scope(body.id);\n         }\n \n-        ast::ExprWhile(expr, body) => {\n+        ast::ExprWhile(expr, body, _) => {\n             visitor.region_maps.mark_as_terminating_scope(expr.id);\n             visitor.region_maps.mark_as_terminating_scope(body.id);\n         }"}, {"sha": "f8952454b21572976be128578d16aaad8da63b19", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373b9d624341b431dd09be6c7742ef84b8e70a98/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373b9d624341b431dd09be6c7742ef84b8e70a98/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=373b9d624341b431dd09be6c7742ef84b8e70a98", "patch": "@@ -5622,7 +5622,7 @@ impl<'a> Resolver<'a> {\n                 visit::walk_expr(self, expr, ());\n             }\n \n-            ExprLoop(_, Some(label)) => {\n+            ExprLoop(_, Some(label)) | ExprWhile(_, _, Some(label)) => {\n                 self.with_label_rib(|this| {\n                     let def_like = DlDef(DefLabel(expr.id));\n "}, {"sha": "3a9ec40fdbbd381b8aa2030dc82f368e4746cabd", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373b9d624341b431dd09be6c7742ef84b8e70a98/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373b9d624341b431dd09be6c7742ef84b8e70a98/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=373b9d624341b431dd09be6c7742ef84b8e70a98", "patch": "@@ -3489,7 +3489,7 @@ fn populate_scope_map(cx: &CrateContext,\n                 }\n             }\n \n-            ast::ExprWhile(ref cond_exp, ref loop_body) => {\n+            ast::ExprWhile(ref cond_exp, ref loop_body, _) => {\n                 walk_expr(cx, &**cond_exp, scope_stack, scope_map);\n \n                 with_new_scope(cx,"}, {"sha": "72f99a3802dcbc2ff62015e24ac3ff0732dc411f", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373b9d624341b431dd09be6c7742ef84b8e70a98/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373b9d624341b431dd09be6c7742ef84b8e70a98/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=373b9d624341b431dd09be6c7742ef84b8e70a98", "patch": "@@ -900,7 +900,7 @@ fn trans_rvalue_stmt_unadjusted<'a>(bcx: &'a Block<'a>,\n         ast::ExprRet(ex) => {\n             controlflow::trans_ret(bcx, ex)\n         }\n-        ast::ExprWhile(ref cond, ref body) => {\n+        ast::ExprWhile(ref cond, ref body, _) => {\n             controlflow::trans_while(bcx, expr.id, &**cond, &**body)\n         }\n         ast::ExprForLoop(ref pat, ref head, ref body, _) => {"}, {"sha": "71075297b07ad30debe2b859954fe770db509cdb", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373b9d624341b431dd09be6c7742ef84b8e70a98/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373b9d624341b431dd09be6c7742ef84b8e70a98/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=373b9d624341b431dd09be6c7742ef84b8e70a98", "patch": "@@ -3757,7 +3757,7 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n         check_then_else(fcx, &**cond, &**then_blk, opt_else_expr.clone(),\n                         id, expr.span, expected);\n       }\n-      ast::ExprWhile(ref cond, ref body) => {\n+      ast::ExprWhile(ref cond, ref body, _) => {\n         check_expr_has_type(fcx, &**cond, ty::mk_bool());\n         check_block_no_value(fcx, &**body);\n         let cond_ty = fcx.expr_ty(&**cond);"}, {"sha": "39b1e764ebaeb3f0c22c192248e7809f35c880e9", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373b9d624341b431dd09be6c7742ef84b8e70a98/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373b9d624341b431dd09be6c7742ef84b8e70a98/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=373b9d624341b431dd09be6c7742ef84b8e70a98", "patch": "@@ -749,7 +749,7 @@ fn visit_expr(rcx: &mut Rcx, expr: &ast::Expr) {\n             rcx.set_repeating_scope(repeating_scope);\n         }\n \n-        ast::ExprWhile(ref cond, ref body) => {\n+        ast::ExprWhile(ref cond, ref body, _) => {\n             let repeating_scope = rcx.set_repeating_scope(cond.id);\n             rcx.visit_expr(&**cond, ());\n "}, {"sha": "68a1c521f1942e3be312a816969d38811a35c75b", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373b9d624341b431dd09be6c7742ef84b8e70a98/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373b9d624341b431dd09be6c7742ef84b8e70a98/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=373b9d624341b431dd09be6c7742ef84b8e70a98", "patch": "@@ -524,7 +524,8 @@ pub enum Expr_ {\n     ExprLit(Gc<Lit>),\n     ExprCast(Gc<Expr>, P<Ty>),\n     ExprIf(Gc<Expr>, P<Block>, Option<Gc<Expr>>),\n-    ExprWhile(Gc<Expr>, P<Block>),\n+    // FIXME #6993: change to Option<Name> ... or not, if these are hygienic.\n+    ExprWhile(Gc<Expr>, P<Block>, Option<Ident>),\n     // FIXME #6993: change to Option<Name> ... or not, if these are hygienic.\n     ExprForLoop(Gc<Pat>, Gc<Expr>, P<Block>, Option<Ident>),\n     // Conditionless loop (can be exited with break, cont, or ret)"}, {"sha": "d0f3cf6f9d7ad4a70c71bac1de7d5bdc8084a2d3", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/373b9d624341b431dd09be6c7742ef84b8e70a98/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373b9d624341b431dd09be6c7742ef84b8e70a98/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=373b9d624341b431dd09be6c7742ef84b8e70a98", "patch": "@@ -66,6 +66,12 @@ fn expand_expr(e: Gc<ast::Expr>, fld: &mut MacroExpander) -> Gc<ast::Expr> {\n             }\n         }\n \n+        ast::ExprWhile(cond, body, opt_ident) => {\n+            let cond = fld.fold_expr(cond);\n+            let (body, opt_ident) = expand_loop_block(body, opt_ident, fld);\n+            fld.cx.expr(e.span, ast::ExprWhile(cond, body, opt_ident))\n+        }\n+\n         ast::ExprLoop(loop_block, opt_ident) => {\n             let (loop_block, opt_ident) = expand_loop_block(loop_block, opt_ident, fld);\n             fld.cx.expr(e.span, ast::ExprLoop(loop_block, opt_ident))"}, {"sha": "946ff7ff3a4c713fbef542942009397a09694867", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/373b9d624341b431dd09be6c7742ef84b8e70a98/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373b9d624341b431dd09be6c7742ef84b8e70a98/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=373b9d624341b431dd09be6c7742ef84b8e70a98", "patch": "@@ -1132,18 +1132,20 @@ pub fn noop_fold_expr<T: Folder>(e: Gc<Expr>, folder: &mut T) -> Gc<Expr> {\n                    folder.fold_block(tr),\n                    fl.map(|x| folder.fold_expr(x)))\n         }\n-        ExprWhile(cond, body) => {\n-            ExprWhile(folder.fold_expr(cond), folder.fold_block(body))\n+        ExprWhile(cond, body, opt_ident) => {\n+            ExprWhile(folder.fold_expr(cond), \n+                      folder.fold_block(body), \n+                      opt_ident.map(|i| folder.fold_ident(i)))\n         }\n-        ExprForLoop(pat, iter, body, ref maybe_ident) => {\n+        ExprForLoop(pat, iter, body, ref opt_ident) => {\n             ExprForLoop(folder.fold_pat(pat),\n                         folder.fold_expr(iter),\n                         folder.fold_block(body),\n-                        maybe_ident.map(|i| folder.fold_ident(i)))\n+                        opt_ident.map(|i| folder.fold_ident(i)))\n         }\n         ExprLoop(body, opt_ident) => {\n             ExprLoop(folder.fold_block(body),\n-                     opt_ident.map(|x| folder.fold_ident(x)))\n+                     opt_ident.map(|i| folder.fold_ident(i)))\n         }\n         ExprMatch(expr, ref arms) => {\n             ExprMatch(folder.fold_expr(expr),"}, {"sha": "60f244011529012856cd3653ecdd3a537f22de1c", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/373b9d624341b431dd09be6c7742ef84b8e70a98/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373b9d624341b431dd09be6c7742ef84b8e70a98/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=373b9d624341b431dd09be6c7742ef84b8e70a98", "patch": "@@ -2094,19 +2094,22 @@ impl<'a> Parser<'a> {\n                     return self.parse_for_expr(None);\n                 }\n                 if self.eat_keyword(keywords::While) {\n-                    return self.parse_while_expr();\n+                    return self.parse_while_expr(None);\n                 }\n                 if Parser::token_is_lifetime(&self.token) {\n                     let lifetime = self.get_lifetime();\n                     self.bump();\n                     self.expect(&token::COLON);\n+                    if self.eat_keyword(keywords::While) {\n+                        return self.parse_while_expr(Some(lifetime))\n+                    }\n                     if self.eat_keyword(keywords::For) {\n                         return self.parse_for_expr(Some(lifetime))\n                     }\n                     if self.eat_keyword(keywords::Loop) {\n                         return self.parse_loop_expr(Some(lifetime))\n                     }\n-                    self.fatal(\"expected `for` or `loop` after a label\")\n+                    self.fatal(\"expected `while`, `for`, or `loop` after a label\")\n                 }\n                 if self.eat_keyword(keywords::Loop) {\n                     return self.parse_loop_expr(None);\n@@ -2762,12 +2765,12 @@ impl<'a> Parser<'a> {\n         self.mk_expr(lo, hi, ExprForLoop(pat, expr, loop_block, opt_ident))\n     }\n \n-    pub fn parse_while_expr(&mut self) -> Gc<Expr> {\n+    pub fn parse_while_expr(&mut self, opt_ident: Option<ast::Ident>) -> Gc<Expr> {\n         let lo = self.last_span.lo;\n         let cond = self.parse_expr_res(RESTRICT_NO_STRUCT_LITERAL);\n         let body = self.parse_block();\n         let hi = body.span.hi;\n-        return self.mk_expr(lo, hi, ExprWhile(cond, body));\n+        return self.mk_expr(lo, hi, ExprWhile(cond, body, opt_ident));\n     }\n \n     pub fn parse_loop_expr(&mut self, opt_ident: Option<ast::Ident>) -> Gc<Expr> {"}, {"sha": "c0483f16213d7ed29620e438852319a7688bf0f3", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/373b9d624341b431dd09be6c7742ef84b8e70a98/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373b9d624341b431dd09be6c7742ef84b8e70a98/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=373b9d624341b431dd09be6c7742ef84b8e70a98", "patch": "@@ -1438,7 +1438,11 @@ impl<'a> State<'a> {\n             ast::ExprIf(ref test, ref blk, elseopt) => {\n                 try!(self.print_if(&**test, &**blk, elseopt, false));\n             }\n-            ast::ExprWhile(ref test, ref blk) => {\n+            ast::ExprWhile(ref test, ref blk, opt_ident) => {\n+                for ident in opt_ident.iter() {\n+                    try!(self.print_ident(*ident));\n+                    try!(self.word_space(\":\"));\n+                }\n                 try!(self.head(\"while\"));\n                 try!(self.print_expr(&**test));\n                 try!(space(&mut self.s));"}, {"sha": "ffe8c0e6e015929b8acd20cb221557cb6adee306", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373b9d624341b431dd09be6c7742ef84b8e70a98/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373b9d624341b431dd09be6c7742ef84b8e70a98/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=373b9d624341b431dd09be6c7742ef84b8e70a98", "patch": "@@ -775,7 +775,7 @@ pub fn walk_expr<E: Clone, V: Visitor<E>>(visitor: &mut V, expression: &Expr, en\n             visitor.visit_block(&**if_block, env.clone());\n             walk_expr_opt(visitor, optional_else, env.clone())\n         }\n-        ExprWhile(ref subexpression, ref block) => {\n+        ExprWhile(ref subexpression, ref block, _) => {\n             visitor.visit_expr(&**subexpression, env.clone());\n             visitor.visit_block(&**block, env.clone())\n         }"}, {"sha": "397ce75b6b93e91b53ea5d33246d93928994b1f4", "filename": "src/test/run-pass/hygienic-labels-in-let.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/373b9d624341b431dd09be6c7742ef84b8e70a98/src%2Ftest%2Frun-pass%2Fhygienic-labels-in-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373b9d624341b431dd09be6c7742ef84b8e70a98/src%2Ftest%2Frun-pass%2Fhygienic-labels-in-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhygienic-labels-in-let.rs?ref=373b9d624341b431dd09be6c7742ef84b8e70a98", "patch": "@@ -19,6 +19,13 @@ macro_rules! loop_x {\n     }\n }\n \n+macro_rules! while_true {\n+    ($e: expr) => {\n+        // $e shouldn't be able to interact with this 'x\n+        'x: while 1i + 1 == 2 { $e }\n+    }\n+}\n+\n macro_rules! run_once {\n     ($e: expr) => {\n         // ditto\n@@ -49,6 +56,16 @@ pub fn main() {\n     };\n     assert_eq!(k, 1i);\n \n+    let l: int = {\n+        'x: for _ in range(0i, 1) {\n+            // ditto\n+            while_true!(break 'x);\n+            i += 1;\n+        }\n+        i + 1\n+    };\n+    assert_eq!(l, 1i);\n+\n     let n: int = {\n         'x: for _ in range(0i, 1) {\n             // ditto"}, {"sha": "abb0bdab71f8b72498993ebfd528fc940386b216", "filename": "src/test/run-pass/hygienic-labels.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/373b9d624341b431dd09be6c7742ef84b8e70a98/src%2Ftest%2Frun-pass%2Fhygienic-labels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373b9d624341b431dd09be6c7742ef84b8e70a98/src%2Ftest%2Frun-pass%2Fhygienic-labels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhygienic-labels.rs?ref=373b9d624341b431dd09be6c7742ef84b8e70a98", "patch": "@@ -24,6 +24,13 @@ macro_rules! run_once {\n     }\n }\n \n+macro_rules! while_x {\n+    ($e: expr) => {\n+        // ditto\n+        'x: while 1i + 1 == 2 { $e }\n+    }\n+}\n+\n pub fn main() {\n     'x: for _ in range(0i, 1) {\n         // this 'x should refer to the outer loop, lexically\n@@ -37,6 +44,11 @@ pub fn main() {\n         fail!(\"break doesn't act hygienically inside infinite loop\");\n     }\n \n+    'x: while 1i + 1 == 2 {\n+        while_x!(break 'x);\n+        fail!(\"break doesn't act hygienically inside infinite while loop\");\n+    }\n+\n     'x: for _ in range(0i, 1) {\n         // ditto\n         run_once!(continue 'x);"}, {"sha": "5e9bae0884b6f6563e4cc10dd71bb51a1a6f7003", "filename": "src/test/run-pass/labeled-break.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/373b9d624341b431dd09be6c7742ef84b8e70a98/src%2Ftest%2Frun-pass%2Flabeled-break.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373b9d624341b431dd09be6c7742ef84b8e70a98/src%2Ftest%2Frun-pass%2Flabeled-break.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flabeled-break.rs?ref=373b9d624341b431dd09be6c7742ef84b8e70a98", "patch": "@@ -20,4 +20,10 @@ pub fn main() {\n             break 'bar;\n         }\n     }\n+\n+    'foobar: while 1i + 1 == 2 {\n+        loop {\n+            break 'foobar;\n+        }\n+    }\n }"}, {"sha": "dd53ac889f5056b4ccd561037792ea3c56fccd6d", "filename": "src/test/run-pass/while-label.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/373b9d624341b431dd09be6c7742ef84b8e70a98/src%2Ftest%2Frun-pass%2Fwhile-label.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373b9d624341b431dd09be6c7742ef84b8e70a98/src%2Ftest%2Frun-pass%2Fwhile-label.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwhile-label.rs?ref=373b9d624341b431dd09be6c7742ef84b8e70a98", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+pub fn main() {\n+    let mut i = 100i;\n+    'w: while 1i + 1 == 2 {\n+        i -= 1;\n+        if i == 95 {\n+            break 'w;\n+            fail!(\"Should have broken out of loop\");\n+        }\n+    }\n+    assert_eq!(i, 95);\n+}"}]}