{"sha": "85a59d40f102015d3493e9af301e48a6f083ef48", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1YTU5ZDQwZjEwMjAxNWQzNDkzZTlhZjMwMWU0OGE2ZjA4M2VmNDg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-09-28T16:39:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-28T16:39:44Z"}, "message": "Rollup merge of #77170 - ecstatic-morse:const-fn-ptr, r=oli-obk\n\nRemove `#[rustc_allow_const_fn_ptr]` and add `#![feature(const_fn_fn_ptr_basics)]`\n\n`rustc_allow_const_fn_ptr` was a hack to work around the lack of an escape hatch for the \"min `const fn`\" checks in const-stable functions. Now that we have co-opted `allow_internal_unstable` for this purpose, we no longer need a bespoke attribute.\n\nNow this functionality is gated under `const_fn_fn_ptr_basics` (how concise!), and `#[allow_internal_unstable(const_fn_fn_ptr_basics)]` replaces `#[rustc_allow_const_fn_ptr]`. `const_fn_fn_ptr_basics` allows function pointer types to appear in the arguments and locals of a `const fn` as well as function pointer casts to be performed inside a `const fn`. Both of these were allowed in constants and statics already. Notably, this does **not** allow users to invoke function pointers in a const context. Presumably, we will use a nicer name for that (`const_fn_ptr`?).\n\nr? @oli-obk", "tree": {"sha": "a165b825dbac5fb58c20af7ff1b2f1124d917f34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a165b825dbac5fb58c20af7ff1b2f1124d917f34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85a59d40f102015d3493e9af301e48a6f083ef48", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfchHQCRBK7hj4Ov3rIwAAdHIIAJ/Tan4PhHELzgVM3Dlg4t2i\n7kqzPBdTDV8MzYA4RHN9Z5IAqfDoO8EgLZC2jBuBh1Va/+4wjq0ZouG4sr7iY9oP\n1hq/NgtXRXZyeQtRO0EWPnL2BICUC7AD62MJY6q6/3/K7gW03g+5RR+58X6xeARW\nT2ooh28hxZF9bCHnTuhQyoEkMgFilfCL4n5S3YVq+k3YHh9ai0oTwcGKoUuoE6xw\nbbx1p8XsonLQy0SWZUFL5reK03wXzbUY6OJDoVPjZbP/M0QMQ4bbIvaedJog3b7s\nrAdF9SwDDed54WvGzlRfmHySkdfG3usQ22d1cmXHAyiXnf+Dg5AGo2+r1X6y+5g=\n=RBbu\n-----END PGP SIGNATURE-----\n", "payload": "tree a165b825dbac5fb58c20af7ff1b2f1124d917f34\nparent 88ae20d8aa44f1f0fadddfa5c529784732d7b101\nparent 807260be9fae2612b66bffaadf6e7a7b0b216cdc\nauthor Ralf Jung <post@ralfj.de> 1601311184 +0200\ncommitter GitHub <noreply@github.com> 1601311184 +0200\n\nRollup merge of #77170 - ecstatic-morse:const-fn-ptr, r=oli-obk\n\nRemove `#[rustc_allow_const_fn_ptr]` and add `#![feature(const_fn_fn_ptr_basics)]`\n\n`rustc_allow_const_fn_ptr` was a hack to work around the lack of an escape hatch for the \"min `const fn`\" checks in const-stable functions. Now that we have co-opted `allow_internal_unstable` for this purpose, we no longer need a bespoke attribute.\n\nNow this functionality is gated under `const_fn_fn_ptr_basics` (how concise!), and `#[allow_internal_unstable(const_fn_fn_ptr_basics)]` replaces `#[rustc_allow_const_fn_ptr]`. `const_fn_fn_ptr_basics` allows function pointer types to appear in the arguments and locals of a `const fn` as well as function pointer casts to be performed inside a `const fn`. Both of these were allowed in constants and statics already. Notably, this does **not** allow users to invoke function pointers in a const context. Presumably, we will use a nicer name for that (`const_fn_ptr`?).\n\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85a59d40f102015d3493e9af301e48a6f083ef48", "html_url": "https://github.com/rust-lang/rust/commit/85a59d40f102015d3493e9af301e48a6f083ef48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85a59d40f102015d3493e9af301e48a6f083ef48/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88ae20d8aa44f1f0fadddfa5c529784732d7b101", "url": "https://api.github.com/repos/rust-lang/rust/commits/88ae20d8aa44f1f0fadddfa5c529784732d7b101", "html_url": "https://github.com/rust-lang/rust/commit/88ae20d8aa44f1f0fadddfa5c529784732d7b101"}, {"sha": "807260be9fae2612b66bffaadf6e7a7b0b216cdc", "url": "https://api.github.com/repos/rust-lang/rust/commits/807260be9fae2612b66bffaadf6e7a7b0b216cdc", "html_url": "https://github.com/rust-lang/rust/commit/807260be9fae2612b66bffaadf6e7a7b0b216cdc"}], "stats": {"total": 281, "additions": 146, "deletions": 135}, "files": [{"sha": "94e2a40e1fe368ca2da564cb0d568d6d711426e5", "filename": "compiler/rustc_attr/src/builtin.rs", "status": "modified", "additions": 7, "deletions": 24, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/85a59d40f102015d3493e9af301e48a6f083ef48/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a59d40f102015d3493e9af301e48a6f083ef48/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs?ref=85a59d40f102015d3493e9af301e48a6f083ef48", "patch": "@@ -145,8 +145,6 @@ pub struct ConstStability {\n     pub feature: Symbol,\n     /// whether the function has a `#[rustc_promotable]` attribute\n     pub promotable: bool,\n-    /// whether the function has a `#[rustc_allow_const_fn_ptr]` attribute\n-    pub allow_const_fn_ptr: bool,\n }\n \n /// The available stability levels.\n@@ -190,7 +188,6 @@ where\n     let mut stab: Option<Stability> = None;\n     let mut const_stab: Option<ConstStability> = None;\n     let mut promotable = false;\n-    let mut allow_const_fn_ptr = false;\n     let diagnostic = &sess.parse_sess.span_diagnostic;\n \n     'outer: for attr in attrs_iter {\n@@ -200,7 +197,6 @@ where\n             sym::unstable,\n             sym::stable,\n             sym::rustc_promotable,\n-            sym::rustc_allow_const_fn_ptr,\n         ]\n         .iter()\n         .any(|&s| attr.has_name(s))\n@@ -215,9 +211,6 @@ where\n         if attr.has_name(sym::rustc_promotable) {\n             promotable = true;\n         }\n-        if attr.has_name(sym::rustc_allow_const_fn_ptr) {\n-            allow_const_fn_ptr = true;\n-        }\n         // attributes with data\n         else if let Some(MetaItem { kind: MetaItemKind::List(ref metas), .. }) = meta {\n             let meta = meta.as_ref().unwrap();\n@@ -360,12 +353,8 @@ where\n                             if sym::unstable == meta_name {\n                                 stab = Some(Stability { level, feature });\n                             } else {\n-                                const_stab = Some(ConstStability {\n-                                    level,\n-                                    feature,\n-                                    promotable: false,\n-                                    allow_const_fn_ptr: false,\n-                                });\n+                                const_stab =\n+                                    Some(ConstStability { level, feature, promotable: false });\n                             }\n                         }\n                         (None, _, _) => {\n@@ -440,12 +429,8 @@ where\n                             if sym::stable == meta_name {\n                                 stab = Some(Stability { level, feature });\n                             } else {\n-                                const_stab = Some(ConstStability {\n-                                    level,\n-                                    feature,\n-                                    promotable: false,\n-                                    allow_const_fn_ptr: false,\n-                                });\n+                                const_stab =\n+                                    Some(ConstStability { level, feature, promotable: false });\n                             }\n                         }\n                         (None, _) => {\n@@ -464,18 +449,16 @@ where\n     }\n \n     // Merge the const-unstable info into the stability info\n-    if promotable || allow_const_fn_ptr {\n+    if promotable {\n         if let Some(ref mut stab) = const_stab {\n             stab.promotable = promotable;\n-            stab.allow_const_fn_ptr = allow_const_fn_ptr;\n         } else {\n             struct_span_err!(\n                 diagnostic,\n                 item_sp,\n                 E0717,\n-                \"rustc_promotable and rustc_allow_const_fn_ptr attributes \\\n-                      must be paired with either a rustc_const_unstable or a rustc_const_stable \\\n-                      attribute\"\n+                \"`rustc_promotable` attribute must be paired with either a `rustc_const_unstable` \\\n+                or a `rustc_const_stable` attribute\"\n             )\n             .emit();\n         }"}, {"sha": "7f5b19134804e3ac03acf62a1bb2c00d3751faf5", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/85a59d40f102015d3493e9af301e48a6f083ef48/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a59d40f102015d3493e9af301e48a6f083ef48/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=85a59d40f102015d3493e9af301e48a6f083ef48", "patch": "@@ -587,6 +587,9 @@ declare_features! (\n     /// Allows basic arithmetic on floating point types in a `const fn`.\n     (active, const_fn_floating_point_arithmetic, \"1.48.0\", Some(57241), None),\n \n+    /// Allows using and casting function pointers in a `const fn`.\n+    (active, const_fn_fn_ptr_basics, \"1.48.0\", Some(57563), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------"}, {"sha": "22c1ca2f289d3b23e33c25edf3e511bf612b2a37", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/85a59d40f102015d3493e9af301e48a6f083ef48/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a59d40f102015d3493e9af301e48a6f083ef48/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=85a59d40f102015d3493e9af301e48a6f083ef48", "patch": "@@ -464,7 +464,6 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     // ==========================================================================\n \n     rustc_attr!(rustc_promotable, AssumedUsed, template!(Word), IMPL_DETAIL),\n-    rustc_attr!(rustc_allow_const_fn_ptr, AssumedUsed, template!(Word), IMPL_DETAIL),\n     rustc_attr!(rustc_args_required_const, AssumedUsed, template!(List: \"N\"), INTERNAL_UNSTABLE),\n \n     // =========================================================================="}, {"sha": "d5b99ea4d288dc66a65bfe4b9fc304ade09eef5a", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85a59d40f102015d3493e9af301e48a6f083ef48/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a59d40f102015d3493e9af301e48a6f083ef48/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=85a59d40f102015d3493e9af301e48a6f083ef48", "patch": "@@ -457,10 +457,6 @@ rustc_queries! {\n             desc { |tcx| \"checking if item is promotable: `{}`\", tcx.def_path_str(key) }\n         }\n \n-        query const_fn_is_allowed_fn_ptr(key: DefId) -> bool {\n-            desc { |tcx| \"checking if const fn allows `fn()` types: `{}`\", tcx.def_path_str(key) }\n-        }\n-\n         /// Returns `true` if this is a foreign item (i.e., linked via `extern { ... }`).\n         query is_foreign_item(key: DefId) -> bool {\n             desc { |tcx| \"checking if `{}` is a foreign item\", tcx.def_path_str(key) }"}, {"sha": "aca822a05bde93c90148ebfa47a0bab489e5602b", "filename": "compiler/rustc_mir/src/const_eval/fn_queries.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85a59d40f102015d3493e9af301e48a6f083ef48/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Ffn_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a59d40f102015d3493e9af301e48a6f083ef48/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Ffn_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Ffn_queries.rs?ref=85a59d40f102015d3493e9af301e48a6f083ef48", "patch": "@@ -151,17 +151,11 @@ fn is_promotable_const_fn(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n         }\n }\n \n-fn const_fn_is_allowed_fn_ptr(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n-    is_const_fn(tcx, def_id)\n-        && tcx.lookup_const_stability(def_id).map(|stab| stab.allow_const_fn_ptr).unwrap_or(false)\n-}\n-\n pub fn provide(providers: &mut Providers) {\n     *providers = Providers {\n         is_const_fn_raw,\n         is_const_impl_raw: |tcx, def_id| is_const_impl_raw(tcx, def_id.expect_local()),\n         is_promotable_const_fn,\n-        const_fn_is_allowed_fn_ptr,\n         ..*providers\n     };\n }"}, {"sha": "3b8d8a5aa99dd12ce69630dff74619919de70543", "filename": "compiler/rustc_mir/src/transform/check_consts/ops.rs", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/85a59d40f102015d3493e9af301e48a6f083ef48/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a59d40f102015d3493e9af301e48a6f083ef48/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=85a59d40f102015d3493e9af301e48a6f083ef48", "patch": "@@ -213,11 +213,21 @@ impl NonConstOp for FnPtrCast {\n     const STOPS_CONST_CHECKING: bool = true;\n \n     fn status_in_item(&self, ccx: &ConstCx<'_, '_>) -> Status {\n-        mcf_status_in_item(ccx)\n+        if ccx.const_kind() != hir::ConstContext::ConstFn {\n+            Status::Allowed\n+        } else {\n+            Status::Unstable(sym::const_fn_fn_ptr_basics)\n+        }\n     }\n \n     fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n-        mcf_emit_error(ccx, span, \"function pointer casts are not allowed in const fn\");\n+        feature_err(\n+            &ccx.tcx.sess.parse_sess,\n+            sym::const_fn_fn_ptr_basics,\n+            span,\n+            &format!(\"function pointer casts are not allowed in {}s\", ccx.const_kind()),\n+        )\n+        .emit()\n     }\n }\n \n@@ -596,17 +606,21 @@ pub mod ty {\n         const STOPS_CONST_CHECKING: bool = true;\n \n         fn status_in_item(&self, ccx: &ConstCx<'_, '_>) -> Status {\n-            // FIXME: This attribute a hack to allow the specialization of the `futures` API. See\n-            // #59739. We should have a proper feature gate for this.\n-            if ccx.tcx.has_attr(ccx.def_id.to_def_id(), sym::rustc_allow_const_fn_ptr) {\n+            if ccx.const_kind() != hir::ConstContext::ConstFn {\n                 Status::Allowed\n             } else {\n-                mcf_status_in_item(ccx)\n+                Status::Unstable(sym::const_fn_fn_ptr_basics)\n             }\n         }\n \n         fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n-            mcf_emit_error(ccx, span, \"function pointers in const fn are unstable\");\n+            feature_err(\n+                &ccx.tcx.sess.parse_sess,\n+                sym::const_fn_fn_ptr_basics,\n+                span,\n+                &format!(\"function pointers cannot appear in {}s\", ccx.const_kind()),\n+            )\n+            .emit()\n         }\n     }\n "}, {"sha": "4234aef33590652b17bf282905a5e774eedc165a", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85a59d40f102015d3493e9af301e48a6f083ef48/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a59d40f102015d3493e9af301e48a6f083ef48/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=85a59d40f102015d3493e9af301e48a6f083ef48", "patch": "@@ -353,6 +353,7 @@ symbols! {\n         const_extern_fn,\n         const_fn,\n         const_fn_floating_point_arithmetic,\n+        const_fn_fn_ptr_basics,\n         const_fn_transmute,\n         const_fn_union,\n         const_generics,\n@@ -884,7 +885,6 @@ symbols! {\n         rustc,\n         rustc_allocator,\n         rustc_allocator_nounwind,\n-        rustc_allow_const_fn_ptr,\n         rustc_args_required_const,\n         rustc_attrs,\n         rustc_builtin_macro,"}, {"sha": "22bf2b15d6695651a91bd67ae29a4fd955bdef8a", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/85a59d40f102015d3493e9af301e48a6f083ef48/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a59d40f102015d3493e9af301e48a6f083ef48/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=85a59d40f102015d3493e9af301e48a6f083ef48", "patch": "@@ -83,6 +83,7 @@\n #![feature(const_fn_union)]\n #![feature(const_fn)]\n #![cfg_attr(not(bootstrap), feature(const_fn_floating_point_arithmetic))]\n+#![cfg_attr(not(bootstrap), feature(const_fn_fn_ptr_basics))]\n #![feature(const_generics)]\n #![feature(const_option)]\n #![feature(const_precise_live_drops)]"}, {"sha": "ba3fb35caaf9d2a3b8743cc6550b011f711b15bd", "filename": "library/core/src/task/wake.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/85a59d40f102015d3493e9af301e48a6f083ef48/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a59d40f102015d3493e9af301e48a6f083ef48/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs?ref=85a59d40f102015d3493e9af301e48a6f083ef48", "patch": "@@ -129,13 +129,9 @@ impl RawWakerVTable {\n     /// associated task.\n     #[rustc_promotable]\n     #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n-    // `rustc_allow_const_fn_ptr` is a hack that should not be used anywhere else\n-    // without first consulting with T-Lang.\n-    //\n-    // FIXME: remove whenever we have a stable way to accept fn pointers from const fn\n-    // (see https://github.com/rust-rfcs/const-eval/issues/19#issuecomment-472799062)\n-    #[rustc_allow_const_fn_ptr]\n     #[rustc_const_stable(feature = \"futures_api\", since = \"1.36.0\")]\n+    #[cfg_attr(not(bootstrap), allow_internal_unstable(const_fn_fn_ptr_basics))]\n+    #[cfg_attr(bootstrap, rustc_allow_const_fn_ptr)]\n     pub const fn new(\n         clone: unsafe fn(*const ()) -> RawWaker,\n         wake: unsafe fn(*const ()),"}, {"sha": "93fa1f4e585739971d68cd75e89273e9cb148df5", "filename": "library/proc_macro/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/85a59d40f102015d3493e9af301e48a6f083ef48/library%2Fproc_macro%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a59d40f102015d3493e9af301e48a6f083ef48/library%2Fproc_macro%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Flib.rs?ref=85a59d40f102015d3493e9af301e48a6f083ef48", "patch": "@@ -21,6 +21,7 @@\n #![feature(nll)]\n #![feature(staged_api)]\n #![feature(const_fn)]\n+#![cfg_attr(not(bootstrap), feature(const_fn_fn_ptr_basics))]\n #![feature(allow_internal_unstable)]\n #![feature(decl_macro)]\n #![feature(extern_types)]"}, {"sha": "e343eef91126edc0c2482771257e2e2049471276", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/85a59d40f102015d3493e9af301e48a6f083ef48/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a59d40f102015d3493e9af301e48a6f083ef48/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=85a59d40f102015d3493e9af301e48a6f083ef48", "patch": "@@ -239,6 +239,7 @@\n #![cfg_attr(not(bootstrap), feature(const_fn_floating_point_arithmetic))]\n #![feature(const_fn_transmute)]\n #![feature(const_fn)]\n+#![cfg_attr(not(bootstrap), feature(const_fn_fn_ptr_basics))]\n #![feature(const_ip)]\n #![feature(const_ipv6)]\n #![feature(const_raw_ptr_deref)]"}, {"sha": "bf0b01a2ecfe0d89ed0005dc4af6ccb963a7df1a", "filename": "src/test/ui/consts/auxiliary/const_fn_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85a59d40f102015d3493e9af301e48a6f083ef48/src%2Ftest%2Fui%2Fconsts%2Fauxiliary%2Fconst_fn_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a59d40f102015d3493e9af301e48a6f083ef48/src%2Ftest%2Fui%2Fconsts%2Fauxiliary%2Fconst_fn_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fauxiliary%2Fconst_fn_lib.rs?ref=85a59d40f102015d3493e9af301e48a6f083ef48", "patch": "@@ -1,6 +1,6 @@\n // Crate that exports a const fn. Used for testing cross-crate.\n \n-#![feature(const_fn)]\n+#![feature(const_fn_fn_ptr_basics)]\n #![crate_type=\"rlib\"]\n \n pub const fn foo() -> usize { 22 }"}, {"sha": "ab18020056b0aeb174310fee3e665fd3730d020f", "filename": "src/test/ui/consts/const-eval/const_fn_ptr.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/85a59d40f102015d3493e9af301e48a6f083ef48/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/85a59d40f102015d3493e9af301e48a6f083ef48/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr.stderr?ref=85a59d40f102015d3493e9af301e48a6f083ef48", "patch": "@@ -10,11 +10,23 @@ help: skipping check that does not even have a feature gate\n    |\n LL |     X_CONST(x)\n    |     ^^^^^^^^^^\n+help: skipping check for `const_fn_fn_ptr_basics` feature\n+  --> $DIR/const_fn_ptr.rs:19:14\n+   |\n+LL | const fn foo(x: fn(usize) -> usize, y: usize)  -> usize {\n+   |              ^\n+help: skipping check for `const_fn_fn_ptr_basics` feature\n+  --> $DIR/const_fn_ptr.rs:20:5\n+   |\n+LL |     x(y)\n+   |     ^\n help: skipping check that does not even have a feature gate\n   --> $DIR/const_fn_ptr.rs:20:5\n    |\n LL |     x(y)\n    |     ^^^^\n \n-warning: 1 warning emitted\n+error: `-Zunleash-the-miri-inside-of-you` may not be used to circumvent feature gates, except when testing error paths in the CTFE engine\n+\n+error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "822d4af83064ea8dbedcc2c18976632c002651fd", "filename": "src/test/ui/consts/const-eval/const_fn_ptr_fail2.stderr", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/85a59d40f102015d3493e9af301e48a6f083ef48/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/85a59d40f102015d3493e9af301e48a6f083ef48/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr?ref=85a59d40f102015d3493e9af301e48a6f083ef48", "patch": "@@ -20,6 +20,16 @@ LL |     assert_eq!(Z, 4);\n \n warning: skipping const checks\n    |\n+help: skipping check for `const_fn_fn_ptr_basics` feature\n+  --> $DIR/const_fn_ptr_fail2.rs:12:14\n+   |\n+LL | const fn bar(x: fn(usize) -> usize, y: usize) -> usize {\n+   |              ^\n+help: skipping check for `const_fn_fn_ptr_basics` feature\n+  --> $DIR/const_fn_ptr_fail2.rs:13:5\n+   |\n+LL |     x(y)\n+   |     ^\n help: skipping check that does not even have a feature gate\n   --> $DIR/const_fn_ptr_fail2.rs:13:5\n    |"}, {"sha": "bf8bae5ea2c73609d5359a9b35ac19220d15e296", "filename": "src/test/ui/consts/const-eval/issue-70804-fn-subtyping.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85a59d40f102015d3493e9af301e48a6f083ef48/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-70804-fn-subtyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a59d40f102015d3493e9af301e48a6f083ef48/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-70804-fn-subtyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-70804-fn-subtyping.rs?ref=85a59d40f102015d3493e9af301e48a6f083ef48", "patch": "@@ -1,5 +1,5 @@\n // check-pass\n-#![feature(const_fn)]\n+#![feature(const_fn_fn_ptr_basics)]\n \n const fn nested(x: (for<'a> fn(&'a ()), String)) -> (fn(&'static ()), String) {\n     x"}, {"sha": "8642954a75b45f7353ac0de043b36f476c8adf51", "filename": "src/test/ui/consts/const-extern-fn/const-extern-fn-min-const-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85a59d40f102015d3493e9af301e48a6f083ef48/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-min-const-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a59d40f102015d3493e9af301e48a6f083ef48/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-min-const-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-min-const-fn.rs?ref=85a59d40f102015d3493e9af301e48a6f083ef48", "patch": "@@ -2,7 +2,7 @@\n \n const extern fn unsize(x: &[u8; 3]) -> &[u8] { x }\n const unsafe extern \"C\" fn closure() -> fn() { || {} }\n-//~^ ERROR function pointers in const fn are unstable\n+//~^ ERROR function pointer\n const unsafe extern fn use_float() { 1.0 + 1.0; }\n //~^ ERROR floating point arithmetic\n const extern \"C\" fn ptr_cast(val: *const u8) { val as usize; }"}, {"sha": "455a822e2d0855e316b3b2f1c6b923a3e6df6b3c", "filename": "src/test/ui/consts/const-extern-fn/const-extern-fn-min-const-fn.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/85a59d40f102015d3493e9af301e48a6f083ef48/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-min-const-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/85a59d40f102015d3493e9af301e48a6f083ef48/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-min-const-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-min-const-fn.stderr?ref=85a59d40f102015d3493e9af301e48a6f083ef48", "patch": "@@ -1,11 +1,11 @@\n-error[E0723]: function pointers in const fn are unstable\n+error[E0658]: function pointers cannot appear in constant functions\n   --> $DIR/const-extern-fn-min-const-fn.rs:4:41\n    |\n LL | const unsafe extern \"C\" fn closure() -> fn() { || {} }\n    |                                         ^^^^\n    |\n    = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+   = help: add `#![feature(const_fn_fn_ptr_basics)]` to the crate attributes to enable\n \n error[E0658]: floating point arithmetic is not allowed in constant functions\n   --> $DIR/const-extern-fn-min-const-fn.rs:6:38\n@@ -27,5 +27,4 @@ LL | const extern \"C\" fn ptr_cast(val: *const u8) { val as usize; }\n \n error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0658, E0723.\n-For more information about an error, try `rustc --explain E0658`.\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "15877c53747ec0a3171a7ee2159d069ffcdfdf4c", "filename": "src/test/ui/consts/issue-37550.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85a59d40f102015d3493e9af301e48a6f083ef48/src%2Ftest%2Fui%2Fconsts%2Fissue-37550.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a59d40f102015d3493e9af301e48a6f083ef48/src%2Ftest%2Fui%2Fconsts%2Fissue-37550.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-37550.rs?ref=85a59d40f102015d3493e9af301e48a6f083ef48", "patch": "@@ -2,7 +2,7 @@\n #![allow(dead_code)]\n #![allow(unused_variables)]\n \n-#![feature(const_fn)]\n+#![feature(const_fn_fn_ptr_basics)]\n \n const fn x() {\n     let t = true;"}, {"sha": "90ea217698d6572f8040208d9f238c2e2d90d0d0", "filename": "src/test/ui/consts/issue-56164.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/85a59d40f102015d3493e9af301e48a6f083ef48/src%2Ftest%2Fui%2Fconsts%2Fissue-56164.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a59d40f102015d3493e9af301e48a6f083ef48/src%2Ftest%2Fui%2Fconsts%2Fissue-56164.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-56164.rs?ref=85a59d40f102015d3493e9af301e48a6f083ef48", "patch": "@@ -1,12 +1,11 @@\n-#![feature(const_fn)]\n+#![feature(const_fn_fn_ptr_basics)]\n \n const fn foo() { (||{})() }\n-//~^ ERROR calls in constant functions are limited to constant functions, tuple structs and tuple\n-// variants\n+//~^ ERROR calls in constant functions\n \n const fn bad(input: fn()) {\n     input()\n-    //~^ ERROR function pointers are not allowed in const fn\n+    //~^ ERROR function pointer\n }\n \n fn main() {"}, {"sha": "500af0a40069a2e0171a180e336e0e0442cdab29", "filename": "src/test/ui/consts/issue-56164.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85a59d40f102015d3493e9af301e48a6f083ef48/src%2Ftest%2Fui%2Fconsts%2Fissue-56164.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/85a59d40f102015d3493e9af301e48a6f083ef48/src%2Ftest%2Fui%2Fconsts%2Fissue-56164.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-56164.stderr?ref=85a59d40f102015d3493e9af301e48a6f083ef48", "patch": "@@ -5,7 +5,7 @@ LL | const fn foo() { (||{})() }\n    |                  ^^^^^^^^\n \n error: function pointers are not allowed in const fn\n-  --> $DIR/issue-56164.rs:8:5\n+  --> $DIR/issue-56164.rs:7:5\n    |\n LL |     input()\n    |     ^^^^^^^"}, {"sha": "dc10db177ed6970e920c7b775f3e83a4b1015d20", "filename": "src/test/ui/consts/min_const_fn/allow_const_fn_ptr.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/85a59d40f102015d3493e9af301e48a6f083ef48/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a59d40f102015d3493e9af301e48a6f083ef48/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr.rs?ref=85a59d40f102015d3493e9af301e48a6f083ef48", "patch": "@@ -1,12 +1,14 @@\n-#![feature(rustc_attrs, staged_api)]\n+#![feature(rustc_attrs, staged_api, allow_internal_unstable)]\n+#![feature(const_fn_fn_ptr_basics)]\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_stable(since=\"1.0.0\", feature = \"mep\")]\n-const fn error(_: fn()) {} //~ ERROR function pointers in const fn are unstable\n+const fn error(_: fn()) {}\n+//~^ ERROR const-stable function cannot use `#[feature(const_fn_fn_ptr_basics)]`\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_allow_const_fn_ptr]\n #[rustc_const_stable(since=\"1.0.0\", feature = \"mep\")]\n+#[allow_internal_unstable(const_fn_fn_ptr_basics)]\n const fn compiles(_: fn()) {}\n \n fn main() {}"}, {"sha": "94f6cda209749c199049bf3f7a2c12cce52d28d3", "filename": "src/test/ui/consts/min_const_fn/allow_const_fn_ptr.stderr", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/85a59d40f102015d3493e9af301e48a6f083ef48/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/85a59d40f102015d3493e9af301e48a6f083ef48/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr.stderr?ref=85a59d40f102015d3493e9af301e48a6f083ef48", "patch": "@@ -1,12 +1,14 @@\n-error[E0723]: function pointers in const fn are unstable\n-  --> $DIR/allow_const_fn_ptr.rs:5:16\n+error: const-stable function cannot use `#[feature(const_fn_fn_ptr_basics)]`\n+  --> $DIR/allow_const_fn_ptr.rs:6:16\n    |\n LL | const fn error(_: fn()) {}\n    |                ^\n    |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+   = note: otherwise `#[allow_internal_unstable]` can be used to bypass stability checks\n+help: if it is not part of the public API, make this function unstably const\n+   |\n+LL | #[rustc_const_unstable(feature = \"...\", issue = \"...\")]\n+   |\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0723`."}, {"sha": "0f9d37292958aa703dabcafad748323c8fe95a83", "filename": "src/test/ui/consts/min_const_fn/allow_const_fn_ptr_feature_gate.rs", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/88ae20d8aa44f1f0fadddfa5c529784732d7b101/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr_feature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88ae20d8aa44f1f0fadddfa5c529784732d7b101/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr_feature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr_feature_gate.rs?ref=88ae20d8aa44f1f0fadddfa5c529784732d7b101", "patch": "@@ -1,11 +0,0 @@\n-#![feature(staged_api)]\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-const fn error(_: fn()) {}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_allow_const_fn_ptr]\n-//~^ ERROR internal implementation detail\n-const fn compiles(_: fn()) {}\n-\n-fn main() {}"}, {"sha": "7794cc7583dfcefa8cdaf753b016e8276fa95a47", "filename": "src/test/ui/consts/min_const_fn/allow_const_fn_ptr_feature_gate.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/88ae20d8aa44f1f0fadddfa5c529784732d7b101/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr_feature_gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88ae20d8aa44f1f0fadddfa5c529784732d7b101/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr_feature_gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr_feature_gate.stderr?ref=88ae20d8aa44f1f0fadddfa5c529784732d7b101", "patch": "@@ -1,11 +0,0 @@\n-error[E0658]: internal implementation detail\n-  --> $DIR/allow_const_fn_ptr_feature_gate.rs:7:1\n-   |\n-LL | #[rustc_allow_const_fn_ptr]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add `#![feature(rustc_attrs)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "b4e836bbc95404ba13334bf9e537ff858663b6f9", "filename": "src/test/ui/consts/min_const_fn/allow_const_fn_ptr_run_pass.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85a59d40f102015d3493e9af301e48a6f083ef48/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr_run_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a59d40f102015d3493e9af301e48a6f083ef48/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr_run_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr_run_pass.rs?ref=85a59d40f102015d3493e9af301e48a6f083ef48", "patch": "@@ -1,11 +1,13 @@\n // run-pass\n+#![feature(allow_internal_unstable)]\n+#![feature(const_fn_fn_ptr_basics)]\n \n #![feature(rustc_attrs, staged_api)]\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_allow_const_fn_ptr]\n #[rustc_const_stable(since=\"1.0.0\", feature = \"mep\")]\n+#[allow_internal_unstable(const_fn_fn_ptr_basics)]\n const fn takes_fn_ptr(_: fn()) {}\n \n const FN: fn() = || ();"}, {"sha": "43ef8ea12eb1f764d47122bf009b0bcff7cc487a", "filename": "src/test/ui/consts/min_const_fn/cast_errors.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/85a59d40f102015d3493e9af301e48a6f083ef48/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcast_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a59d40f102015d3493e9af301e48a6f083ef48/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcast_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcast_errors.rs?ref=85a59d40f102015d3493e9af301e48a6f083ef48", "patch": "@@ -2,12 +2,12 @@ fn main() {}\n \n const fn unsize(x: &[u8; 3]) -> &[u8] { x }\n const fn closure() -> fn() { || {} }\n-//~^ ERROR function pointers in const fn are unstable\n+//~^ ERROR function pointer\n const fn closure2() {\n     (|| {}) as fn();\n-//~^ ERROR function pointers in const fn are unstable\n+//~^ ERROR function pointer\n }\n const fn reify(f: fn()) -> unsafe fn() { f }\n-//~^ ERROR function pointers in const fn are unstable\n+//~^ ERROR function pointer\n const fn reify2() { main as unsafe fn(); }\n-//~^ ERROR function pointers in const fn are unstable\n+//~^ ERROR function pointer"}, {"sha": "ac77c181afda8468c9a30f240fcdf17cc0e283c6", "filename": "src/test/ui/consts/min_const_fn/cast_errors.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/85a59d40f102015d3493e9af301e48a6f083ef48/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcast_errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/85a59d40f102015d3493e9af301e48a6f083ef48/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcast_errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcast_errors.stderr?ref=85a59d40f102015d3493e9af301e48a6f083ef48", "patch": "@@ -1,39 +1,39 @@\n-error[E0723]: function pointers in const fn are unstable\n+error[E0658]: function pointers cannot appear in constant functions\n   --> $DIR/cast_errors.rs:4:23\n    |\n LL | const fn closure() -> fn() { || {} }\n    |                       ^^^^\n    |\n    = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+   = help: add `#![feature(const_fn_fn_ptr_basics)]` to the crate attributes to enable\n \n-error[E0723]: function pointers in const fn are unstable\n+error[E0658]: function pointers cannot appear in constant functions\n   --> $DIR/cast_errors.rs:7:5\n    |\n LL |     (|| {}) as fn();\n    |     ^^^^^^^^^^^^^^^\n    |\n    = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+   = help: add `#![feature(const_fn_fn_ptr_basics)]` to the crate attributes to enable\n \n-error[E0723]: function pointers in const fn are unstable\n+error[E0658]: function pointers cannot appear in constant functions\n   --> $DIR/cast_errors.rs:10:28\n    |\n LL | const fn reify(f: fn()) -> unsafe fn() { f }\n    |                            ^^^^^^^^^^^\n    |\n    = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+   = help: add `#![feature(const_fn_fn_ptr_basics)]` to the crate attributes to enable\n \n-error[E0723]: function pointers in const fn are unstable\n+error[E0658]: function pointers cannot appear in constant functions\n   --> $DIR/cast_errors.rs:12:21\n    |\n LL | const fn reify2() { main as unsafe fn(); }\n    |                     ^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+   = help: add `#![feature(const_fn_fn_ptr_basics)]` to the crate attributes to enable\n \n error: aborting due to 4 previous errors\n \n-For more information about this error, try `rustc --explain E0723`.\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "4aaf7b86e45605dfb53c2b0981b693b10ff6764a", "filename": "src/test/ui/consts/min_const_fn/cmp_fn_pointers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85a59d40f102015d3493e9af301e48a6f083ef48/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcmp_fn_pointers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a59d40f102015d3493e9af301e48a6f083ef48/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcmp_fn_pointers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcmp_fn_pointers.rs?ref=85a59d40f102015d3493e9af301e48a6f083ef48", "patch": "@@ -1,4 +1,4 @@\n-const fn cmp(x: fn(), y: fn()) -> bool { //~ ERROR function pointers in const fn are unstable\n+const fn cmp(x: fn(), y: fn()) -> bool { //~ ERROR function pointer\n     unsafe { x == y }\n }\n "}, {"sha": "e913b187feeae55f610f41e2310b57d9b91a5854", "filename": "src/test/ui/consts/min_const_fn/cmp_fn_pointers.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85a59d40f102015d3493e9af301e48a6f083ef48/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcmp_fn_pointers.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/85a59d40f102015d3493e9af301e48a6f083ef48/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcmp_fn_pointers.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcmp_fn_pointers.stderr?ref=85a59d40f102015d3493e9af301e48a6f083ef48", "patch": "@@ -1,12 +1,12 @@\n-error[E0723]: function pointers in const fn are unstable\n+error[E0658]: function pointers cannot appear in constant functions\n   --> $DIR/cmp_fn_pointers.rs:1:14\n    |\n LL | const fn cmp(x: fn(), y: fn()) -> bool {\n    |              ^\n    |\n    = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+   = help: add `#![feature(const_fn_fn_ptr_basics)]` to the crate attributes to enable\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0723`.\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "06a44b271064c1dce2540a4b1d7a0b039e71aa02", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85a59d40f102015d3493e9af301e48a6f083ef48/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a59d40f102015d3493e9af301e48a6f083ef48/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs?ref=85a59d40f102015d3493e9af301e48a6f083ef48", "patch": "@@ -128,6 +128,6 @@ const fn really_no_traits_i_mean_it() { (&() as &dyn std::fmt::Debug, ()).1 }\n //~^ ERROR trait bounds other than `Sized`\n \n const fn no_fn_ptrs(_x: fn()) {}\n-//~^ ERROR function pointers in const fn are unstable\n+//~^ ERROR function pointer\n const fn no_fn_ptrs2() -> fn() { fn foo() {} foo }\n-//~^ ERROR function pointers in const fn are unstable\n+//~^ ERROR function pointer"}, {"sha": "5e6bf7ef890349fe31ec7c42f9601f538e76d0c0", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/85a59d40f102015d3493e9af301e48a6f083ef48/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/85a59d40f102015d3493e9af301e48a6f083ef48/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr?ref=85a59d40f102015d3493e9af301e48a6f083ef48", "patch": "@@ -209,23 +209,23 @@ LL | const fn really_no_traits_i_mean_it() { (&() as &dyn std::fmt::Debug, ()).1\n    = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n-error[E0723]: function pointers in const fn are unstable\n+error[E0658]: function pointers cannot appear in constant functions\n   --> $DIR/min_const_fn.rs:130:21\n    |\n LL | const fn no_fn_ptrs(_x: fn()) {}\n    |                     ^^\n    |\n    = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+   = help: add `#![feature(const_fn_fn_ptr_basics)]` to the crate attributes to enable\n \n-error[E0723]: function pointers in const fn are unstable\n+error[E0658]: function pointers cannot appear in constant functions\n   --> $DIR/min_const_fn.rs:132:27\n    |\n LL | const fn no_fn_ptrs2() -> fn() { fn foo() {} foo }\n    |                           ^^^^\n    |\n    = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+   = help: add `#![feature(const_fn_fn_ptr_basics)]` to the crate attributes to enable\n \n error: aborting due to 26 previous errors\n "}, {"sha": "bc6fe89222bbf4d061464415f185b0393cd8576a", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_fn_ptr.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85a59d40f102015d3493e9af301e48a6f083ef48/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a59d40f102015d3493e9af301e48a6f083ef48/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_fn_ptr.rs?ref=85a59d40f102015d3493e9af301e48a6f083ef48", "patch": "@@ -1,3 +1,5 @@\n+// gate-test-const_fn_fn_ptr_basics\n+\n struct HasPtr {\n     field: fn(),\n }\n@@ -9,9 +11,9 @@ fn field() {}\n const fn no_inner_dyn_trait(_x: Hide) {}\n const fn no_inner_dyn_trait2(x: Hide) {\n     x.0.field;\n-//~^ ERROR function pointers in const fn\n+//~^ ERROR function pointer\n }\n const fn no_inner_dyn_trait_ret() -> Hide { Hide(HasPtr { field }) }\n-//~^ ERROR function pointers in const fn\n+//~^ ERROR function pointer\n \n fn main() {}"}, {"sha": "8d60436ea39bbdb00d626849cdd1b20f6dac0bed", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_fn_ptr.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/85a59d40f102015d3493e9af301e48a6f083ef48/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_fn_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/85a59d40f102015d3493e9af301e48a6f083ef48/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_fn_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_fn_ptr.stderr?ref=85a59d40f102015d3493e9af301e48a6f083ef48", "patch": "@@ -1,21 +1,21 @@\n-error[E0723]: function pointers in const fn are unstable\n-  --> $DIR/min_const_fn_fn_ptr.rs:11:5\n+error[E0658]: function pointers cannot appear in constant functions\n+  --> $DIR/min_const_fn_fn_ptr.rs:13:5\n    |\n LL |     x.0.field;\n    |     ^^^^^^^^^\n    |\n    = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+   = help: add `#![feature(const_fn_fn_ptr_basics)]` to the crate attributes to enable\n \n-error[E0723]: function pointers in const fn are unstable\n-  --> $DIR/min_const_fn_fn_ptr.rs:14:59\n+error[E0658]: function pointers cannot appear in constant functions\n+  --> $DIR/min_const_fn_fn_ptr.rs:16:59\n    |\n LL | const fn no_inner_dyn_trait_ret() -> Hide { Hide(HasPtr { field }) }\n    |                                                           ^^^^^\n    |\n    = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+   = help: add `#![feature(const_fn_fn_ptr_basics)]` to the crate attributes to enable\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0723`.\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "8fd562c5dae84223391052dbd3e5570123f9a973", "filename": "src/test/ui/consts/miri_unleashed/abi-mismatch.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85a59d40f102015d3493e9af301e48a6f083ef48/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fabi-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/85a59d40f102015d3493e9af301e48a6f083ef48/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fabi-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fabi-mismatch.stderr?ref=85a59d40f102015d3493e9af301e48a6f083ef48", "patch": "@@ -12,12 +12,12 @@ LL | static VAL: () = call_rust_fn(unsafe { std::mem::transmute(c_fn as extern \"\n \n warning: skipping const checks\n    |\n-help: skipping check for `const_fn` feature\n+help: skipping check for `const_fn_fn_ptr_basics` feature\n   --> $DIR/abi-mismatch.rs:9:23\n    |\n LL | const fn call_rust_fn(my_fn: extern \"Rust\" fn()) {\n    |                       ^^^^^\n-help: skipping check for `const_fn` feature\n+help: skipping check for `const_fn_fn_ptr_basics` feature\n   --> $DIR/abi-mismatch.rs:10:5\n    |\n LL |     my_fn();"}, {"sha": "35b63bddca252937d815454a2a67733e42ea658b", "filename": "src/test/ui/issues/issue-37550.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85a59d40f102015d3493e9af301e48a6f083ef48/src%2Ftest%2Fui%2Fissues%2Fissue-37550.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a59d40f102015d3493e9af301e48a6f083ef48/src%2Ftest%2Fui%2Fissues%2Fissue-37550.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37550.rs?ref=85a59d40f102015d3493e9af301e48a6f083ef48", "patch": "@@ -1,6 +1,6 @@\n const fn x() {\n     let t = true;\n-    let x = || t; //~ ERROR function pointers in const fn are unstable\n+    let x = || t; //~ ERROR function pointer\n }\n \n fn main() {}"}, {"sha": "54b60df70fd2671982f5e116e5687a10c57ec1e9", "filename": "src/test/ui/issues/issue-37550.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85a59d40f102015d3493e9af301e48a6f083ef48/src%2Ftest%2Fui%2Fissues%2Fissue-37550.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/85a59d40f102015d3493e9af301e48a6f083ef48/src%2Ftest%2Fui%2Fissues%2Fissue-37550.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37550.stderr?ref=85a59d40f102015d3493e9af301e48a6f083ef48", "patch": "@@ -1,12 +1,12 @@\n-error[E0723]: function pointers in const fn are unstable\n+error[E0658]: function pointers cannot appear in constant functions\n   --> $DIR/issue-37550.rs:3:9\n    |\n LL |     let x = || t;\n    |         ^\n    |\n    = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+   = help: add `#![feature(const_fn_fn_ptr_basics)]` to the crate attributes to enable\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0723`.\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "0a1e835672de9db26f312254c9c7e608db2d126f", "filename": "src/test/ui/issues/issue-46553.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85a59d40f102015d3493e9af301e48a6f083ef48/src%2Ftest%2Fui%2Fissues%2Fissue-46553.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a59d40f102015d3493e9af301e48a6f083ef48/src%2Ftest%2Fui%2Fissues%2Fissue-46553.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46553.rs?ref=85a59d40f102015d3493e9af301e48a6f083ef48", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-#![feature(const_fn)]\n+#![feature(const_fn_fn_ptr_basics)]\n #![deny(const_err)]\n \n pub struct Data<T> {"}, {"sha": "0291a52633358eeef277f3d4b32e06adf875a758", "filename": "src/test/ui/rfc-2091-track-caller/caller-location-fnptr-rt-ctfe-equiv.stderr", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/85a59d40f102015d3493e9af301e48a6f083ef48/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fcaller-location-fnptr-rt-ctfe-equiv.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/85a59d40f102015d3493e9af301e48a6f083ef48/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fcaller-location-fnptr-rt-ctfe-equiv.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fcaller-location-fnptr-rt-ctfe-equiv.stderr?ref=85a59d40f102015d3493e9af301e48a6f083ef48", "patch": "@@ -1,10 +1,27 @@\n warning: skipping const checks\n    |\n+help: skipping check for `const_fn_fn_ptr_basics` feature\n+  --> $DIR/caller-location-fnptr-rt-ctfe-equiv.rs:20:9\n+   |\n+LL |     let ptr: fn() -> L = attributed;\n+   |         ^^^\n+help: skipping check for `const_fn_fn_ptr_basics` feature\n+  --> $DIR/caller-location-fnptr-rt-ctfe-equiv.rs:21:5\n+   |\n+LL |     ptr()\n+   |     ^^^\n+help: skipping check for `const_fn_fn_ptr_basics` feature\n+  --> $DIR/caller-location-fnptr-rt-ctfe-equiv.rs:20:26\n+   |\n+LL |     let ptr: fn() -> L = attributed;\n+   |                          ^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n   --> $DIR/caller-location-fnptr-rt-ctfe-equiv.rs:21:5\n    |\n LL |     ptr()\n    |     ^^^^^\n \n-warning: 1 warning emitted\n+error: `-Zunleash-the-miri-inside-of-you` may not be used to circumvent feature gates, except when testing error paths in the CTFE engine\n+\n+error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "bdf426bbd37882f3565322e9e8af92881878de38", "filename": "src/test/ui/type-alias-impl-trait/issue-53096.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85a59d40f102015d3493e9af301e48a6f083ef48/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a59d40f102015d3493e9af301e48a6f083ef48/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.rs?ref=85a59d40f102015d3493e9af301e48a6f083ef48", "patch": "@@ -1,5 +1,5 @@\n // check-pass\n-#![feature(const_fn)]\n+#![feature(const_fn, const_fn_fn_ptr_basics)]\n #![feature(type_alias_impl_trait)]\n \n type Foo = impl Fn() -> usize;"}]}