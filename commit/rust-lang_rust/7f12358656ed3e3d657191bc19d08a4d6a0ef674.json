{"sha": "7f12358656ed3e3d657191bc19d08a4d6a0ef674", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmMTIzNTg2NTZlZDNlM2Q2NTcxOTFiYzE5ZDA4YTRkNmEwZWY2NzQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-02-05T17:56:10Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-02-05T17:56:10Z"}, "message": "resolve some merge failures", "tree": {"sha": "8806ff2f416abcd48f4d748fb82edcd3a2e98c0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8806ff2f416abcd48f4d748fb82edcd3a2e98c0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f12358656ed3e3d657191bc19d08a4d6a0ef674", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f12358656ed3e3d657191bc19d08a4d6a0ef674", "html_url": "https://github.com/rust-lang/rust/commit/7f12358656ed3e3d657191bc19d08a4d6a0ef674", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f12358656ed3e3d657191bc19d08a4d6a0ef674/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77b06d24cd76bf808138f1f7df4dcff40260ff38", "url": "https://api.github.com/repos/rust-lang/rust/commits/77b06d24cd76bf808138f1f7df4dcff40260ff38", "html_url": "https://github.com/rust-lang/rust/commit/77b06d24cd76bf808138f1f7df4dcff40260ff38"}], "stats": {"total": 14, "additions": 5, "deletions": 9}, "files": [{"sha": "b0e7b1ff5476caeee1ba597d014dc947a489a833", "filename": "src/comp/middle/mut.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7f12358656ed3e3d657191bc19d08a4d6a0ef674/src%2Fcomp%2Fmiddle%2Fmut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f12358656ed3e3d657191bc19d08a4d6a0ef674/src%2Fcomp%2Fmiddle%2Fmut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fmut.rs?ref=7f12358656ed3e3d657191bc19d08a4d6a0ef674", "patch": "@@ -243,11 +243,12 @@ fn check_bind(cx: @ctx, f: @expr, args: [option<@expr>]) {\n     for arg in args {\n         alt arg {\n           some(expr) {\n-            alt (alt arg_ts[i].mode {\n+            let o_msg = alt ty::resolved_mode(cx.tcx, arg_ts[i].mode) {\n               by_mut_ref { some(\"by mutable reference\") }\n               by_move { some(\"by move\") }\n               _ { none }\n-            }) {\n+            };\n+            alt o_msg {\n               some(name) {\n                 cx.tcx.sess.span_err(\n                     expr.span, \"can not bind an argument passed \" + name);"}, {"sha": "f330c48d636a586361ac0ff2dafb532776978df6", "filename": "src/comp/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7f12358656ed3e3d657191bc19d08a4d6a0ef674/src%2Fcomp%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f12358656ed3e3d657191bc19d08a4d6a0ef674/src%2Fcomp%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans%2Fbase.rs?ref=7f12358656ed3e3d657191bc19d08a4d6a0ef674", "patch": "@@ -4422,8 +4422,7 @@ fn copy_args_to_allocas(fcx: @fn_ctxt, bcx: @block_ctxt, args: [ast::arg],\n     let epic_fail = fn@() -> ! {\n         tcx.sess.bug(\"Someone forgot\\\n                 to document an invariant in copy_args_to_allocas!\");\n-    }\n-    let epic_fail = bind epic_fail_(bcx);\n+    };\n     for arg in arg_tys {\n         let id = args[arg_n].id;\n         let argval = alt fcx.llargs.get(id) { local_mem(v) { v }"}, {"sha": "9a37ec4a01880845cd4e5d4a4ec9a7d3b07b0d51", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f12358656ed3e3d657191bc19d08a4d6a0ef674/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f12358656ed3e3d657191bc19d08a4d6a0ef674/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=7f12358656ed3e3d657191bc19d08a4d6a0ef674", "patch": "@@ -2045,11 +2045,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n         // Take the prototype from the expected type, but default to block:\n         let proto = alt ty::struct(tcx, expected) {\n           ty::ty_fn({proto, _}) { proto }\n-          _ {\n-            tcx.sess.span_warn(expr.span, \"unable to infer kind of closure, \\\n-                                           defaulting to block\");\n-            ast::proto_block\n-          }\n+          _ { ast::proto_box }\n         };\n         #debug(\"checking expr_fn_block %s expected=%s\",\n                expr_to_str(expr),"}]}