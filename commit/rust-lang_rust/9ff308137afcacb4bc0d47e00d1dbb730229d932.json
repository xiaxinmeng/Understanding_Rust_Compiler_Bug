{"sha": "9ff308137afcacb4bc0d47e00d1dbb730229d932", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmZjMwODEzN2FmY2FjYjRiYzBkNDdlMDBkMWRiYjczMDIyOWQ5MzI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-09-25T05:17:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-09-25T05:17:31Z"}, "message": "auto merge of #17428 : fhahn/rust/issue-16114-rename-begin-unwind-2, r=alexcrichton\n\nThis is a PR for #16114 and includes to following things:\r\n\r\n* Rename `begin_unwind` lang item to `fail_fmt`\r\n*  Rename `core::failure::begin_unwind` to `fail_impl`\r\n* Rename `fail_` lang item to `fail`", "tree": {"sha": "52985a732dcb1238b59d9e99a79e1d78c212172b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52985a732dcb1238b59d9e99a79e1d78c212172b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ff308137afcacb4bc0d47e00d1dbb730229d932", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ff308137afcacb4bc0d47e00d1dbb730229d932", "html_url": "https://github.com/rust-lang/rust/commit/9ff308137afcacb4bc0d47e00d1dbb730229d932", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ff308137afcacb4bc0d47e00d1dbb730229d932/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e13d3aa00e8cfdf1a64f58f6c649460400231c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e13d3aa00e8cfdf1a64f58f6c649460400231c0", "html_url": "https://github.com/rust-lang/rust/commit/5e13d3aa00e8cfdf1a64f58f6c649460400231c0"}, {"sha": "c8b767dd3d06fcabc2df753cbb9fd694ebc0eec6", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8b767dd3d06fcabc2df753cbb9fd694ebc0eec6", "html_url": "https://github.com/rust-lang/rust/commit/c8b767dd3d06fcabc2df753cbb9fd694ebc0eec6"}], "stats": {"total": 80, "additions": 56, "deletions": 24}, "files": [{"sha": "ba79e828150e597f3f0dfb41ca87c2556bb37647", "filename": "src/doc/guide-unsafe.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9ff308137afcacb4bc0d47e00d1dbb730229d932/src%2Fdoc%2Fguide-unsafe.md", "raw_url": "https://github.com/rust-lang/rust/raw/9ff308137afcacb4bc0d47e00d1dbb730229d932/src%2Fdoc%2Fguide-unsafe.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-unsafe.md?ref=9ff308137afcacb4bc0d47e00d1dbb730229d932", "patch": "@@ -573,8 +573,8 @@ pub extern fn dot_product(a: *const u32, a_len: u32,\n     return ret;\n }\n \n-#[lang = \"begin_unwind\"]\n-extern fn begin_unwind(args: &core::fmt::Arguments,\n+#[lang = \"fail_fmt\"]\n+extern fn fail_fmt(args: &core::fmt::Arguments,\n                        file: &str,\n                        line: uint) -> ! {\n     loop {}\n@@ -587,8 +587,8 @@ extern fn begin_unwind(args: &core::fmt::Arguments,\n ```\n \n Note that there is one extra lang item here which differs from the examples\n-above, `begin_unwind`. This must be defined by consumers of libcore because the\n-core library declares failure, but it does not define it. The `begin_unwind`\n+above, `fail_fmt`. This must be defined by consumers of libcore because the\n+core library declares failure, but it does not define it. The `fail_fmt`\n lang item is this crate's definition of failure, and it must be guaranteed to\n never return.\n \n@@ -706,7 +706,7 @@ Other features provided by lang items include:\n   `==`, `<`, dereferencing (`*`) and `+` (etc.) operators are all\n   marked with lang items; those specific four are `eq`, `ord`,\n   `deref`, and `add` respectively.\n-- stack unwinding and general failure; the `eh_personality`, `fail_`\n+- stack unwinding and general failure; the `eh_personality`, `fail`\n   and `fail_bounds_checks` lang items.\n - the traits in `std::kinds` used to indicate types that satisfy\n   various kinds; lang items `send`, `sync` and `copy`."}, {"sha": "f5f45b2f72e2a582f8efa46a1a8e375111e16fee", "filename": "src/libcore/failure.rs", "status": "modified", "additions": 32, "deletions": 9, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/9ff308137afcacb4bc0d47e00d1dbb730229d932/src%2Flibcore%2Ffailure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ff308137afcacb4bc0d47e00d1dbb730229d932/src%2Flibcore%2Ffailure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffailure.rs?ref=9ff308137afcacb4bc0d47e00d1dbb730229d932", "patch": "@@ -16,7 +16,7 @@\n //! interface for failure is:\n //!\n //! ```ignore\n-//! fn begin_unwind(fmt: &fmt::Arguments, &(&'static str, uint)) -> !;\n+//! fn fail_impl(fmt: &fmt::Arguments, &(&'static str, uint)) -> !;\n //! ```\n //!\n //! This definition allows for failing with any general message, but it does not\n@@ -33,13 +33,28 @@\n use fmt;\n use intrinsics;\n \n+// NOTE: remove after next snapshot\n+#[cfg(stage0)]\n #[cold] #[inline(never)] // this is the slow path, always\n #[lang=\"fail_\"]\n fn fail_(expr_file_line: &(&'static str, &'static str, uint)) -> ! {\n     let (expr, file, line) = *expr_file_line;\n     let ref file_line = (file, line);\n     format_args!(|args| -> () {\n-        begin_unwind(args, file_line);\n+        fail_fmt(args, file_line);\n+    }, \"{}\", expr);\n+\n+    unsafe { intrinsics::abort() }\n+}\n+\n+#[cfg(not(stage0))]\n+#[cold] #[inline(never)] // this is the slow path, always\n+#[lang=\"fail\"]\n+fn fail(expr_file_line: &(&'static str, &'static str, uint)) -> ! {\n+    let (expr, file, line) = *expr_file_line;\n+    let ref file_line = (file, line);\n+    format_args!(|args| -> () {\n+        fail_fmt(args, file_line);\n     }, \"{}\", expr);\n \n     unsafe { intrinsics::abort() }\n@@ -50,25 +65,33 @@ fn fail_(expr_file_line: &(&'static str, &'static str, uint)) -> ! {\n fn fail_bounds_check(file_line: &(&'static str, uint),\n                      index: uint, len: uint) -> ! {\n     format_args!(|args| -> () {\n-        begin_unwind(args, file_line);\n+        fail_fmt(args, file_line);\n     }, \"index out of bounds: the len is {} but the index is {}\", len, index);\n     unsafe { intrinsics::abort() }\n }\n \n #[cold] #[inline(never)]\n-pub fn begin_unwind_string(msg: &str, file: &(&'static str, uint)) -> ! {\n-    format_args!(|fmt| begin_unwind(fmt, file), \"{}\", msg)\n+pub fn fail_str(msg: &str, file: &(&'static str, uint)) -> ! {\n+    format_args!(|fmt| fail_fmt(fmt, file), \"{}\", msg)\n }\n \n #[cold] #[inline(never)]\n-pub fn begin_unwind(fmt: &fmt::Arguments, file_line: &(&'static str, uint)) -> ! {\n+pub fn fail_fmt(fmt: &fmt::Arguments, file_line: &(&'static str, uint)) -> ! {\n     #[allow(ctypes)]\n     extern {\n+\n+        // NOTE: remove after next snapshot\n+        #[cfg(stage0)]\n         #[lang = \"begin_unwind\"]\n-        fn begin_unwind(fmt: &fmt::Arguments, file: &'static str,\n+        fn fail_impl(fmt: &fmt::Arguments, file: &'static str,\n                         line: uint) -> !;\n+\n+        #[cfg(not(stage0))]\n+        #[lang = \"fail_fmt\"]\n+        fn fail_impl(fmt: &fmt::Arguments, file: &'static str,\n+                        line: uint) -> !;\n+\n     }\n     let (file, line) = *file_line;\n-    unsafe { begin_unwind(fmt, file, line) }\n+    unsafe { fail_impl(fmt, file, line) }\n }\n-"}, {"sha": "0f972a6702916f22d4aab0f4d100d3e122cb4855", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9ff308137afcacb4bc0d47e00d1dbb730229d932/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ff308137afcacb4bc0d47e00d1dbb730229d932/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=9ff308137afcacb4bc0d47e00d1dbb730229d932", "patch": "@@ -18,7 +18,7 @@ macro_rules! fail(\n     );\n     ($msg:expr) => ({\n         static _FILE_LINE: (&'static str, uint) = (file!(), line!());\n-        ::core::failure::begin_unwind_string($msg, &_FILE_LINE)\n+        ::core::failure::fail_str($msg, &_FILE_LINE)\n     });\n     ($fmt:expr, $($arg:tt)*) => ({\n         // a closure can't have return type !, so we need a full\n@@ -40,7 +40,7 @@ macro_rules! fail(\n         #[inline(always)]\n         fn _run_fmt(fmt: &::std::fmt::Arguments) -> ! {\n             static _FILE_LINE: (&'static str, uint) = (file!(), line!());\n-            ::core::failure::begin_unwind(fmt, &_FILE_LINE)\n+            ::core::failure::fail_fmt(fmt, &_FILE_LINE)\n         }\n         format_args!(_run_fmt, $fmt, $($arg)*)\n     });"}, {"sha": "50c92b45fdff42eb39898ab7e7bd14803199e688", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9ff308137afcacb4bc0d47e00d1dbb730229d932/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ff308137afcacb4bc0d47e00d1dbb730229d932/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=9ff308137afcacb4bc0d47e00d1dbb730229d932", "patch": "@@ -264,7 +264,7 @@ lets_do_this! {\n \n     StrEqFnLangItem,                 \"str_eq\",                  str_eq_fn;\n \n-    // A number of failure-related lang items. The `fail_` item corresponds to\n+    // A number of failure-related lang items. The `fail` item corresponds to\n     // divide-by-zero and various failure cases with `match`. The\n     // `fail_bounds_check` item is for indexing arrays.\n     //\n@@ -273,9 +273,9 @@ lets_do_this! {\n     // defined to use it, but a final product is required to define it\n     // somewhere. Additionally, there are restrictions on crates that use a weak\n     // lang item, but do not have it defined.\n-    FailFnLangItem,                  \"fail_\",                   fail_fn;\n+    FailFnLangItem,                  \"fail\",                    fail_fn;\n     FailBoundsCheckFnLangItem,       \"fail_bounds_check\",       fail_bounds_check_fn;\n-    BeginUnwindLangItem,             \"begin_unwind\",            begin_unwind;\n+    FailFmtLangItem,                 \"fail_fmt\",                fail_fmt;\n \n     ExchangeMallocFnLangItem,        \"exchange_malloc\",         exchange_malloc_fn;\n     ExchangeFreeFnLangItem,          \"exchange_free\",           exchange_free_fn;"}, {"sha": "79faf3aa147ed1b6a466bbdb5d85a0177be59937", "filename": "src/librustc/middle/weak_lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ff308137afcacb4bc0d47e00d1dbb730229d932/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ff308137afcacb4bc0d47e00d1dbb730229d932/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs?ref=9ff308137afcacb4bc0d47e00d1dbb730229d932", "patch": "@@ -118,7 +118,7 @@ impl<'a, 'v> Visitor<'v> for Context<'a> {\n ) )\n \n weak_lang_items!(\n-    begin_unwind,       BeginUnwindLangItem,        rust_begin_unwind;\n+    fail_fmt,           FailFmtLangItem,            rust_begin_unwind;\n     stack_exhausted,    StackExhaustedLangItem,     rust_stack_exhausted;\n     eh_personality,     EhPersonalityLangItem,      rust_eh_personality;\n )"}, {"sha": "034ed470c97520459cf198cdbc34da643f77d94b", "filename": "src/librustrt/unwind.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9ff308137afcacb4bc0d47e00d1dbb730229d932/src%2Flibrustrt%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ff308137afcacb4bc0d47e00d1dbb730229d932/src%2Flibrustrt%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Funwind.rs?ref=9ff308137afcacb4bc0d47e00d1dbb730229d932", "patch": "@@ -488,7 +488,16 @@ pub mod eabi {\n }\n \n // Entry point of failure from the libcore crate\n-#[cfg(not(test))]\n+#[cfg(not(test), not(stage0))]\n+#[lang = \"fail_fmt\"]\n+pub extern fn rust_begin_unwind(msg: &fmt::Arguments,\n+                                file: &'static str, line: uint) -> ! {\n+    begin_unwind_fmt(msg, &(file, line))\n+}\n+\n+//\n+// Entry point of failure from the libcore crate\n+#[cfg(stage0, not(test))]\n #[lang = \"begin_unwind\"]\n pub extern fn rust_begin_unwind(msg: &fmt::Arguments,\n                                 file: &'static str, line: uint) -> ! {"}, {"sha": "73bad011472405321259405da30bec1eb9013081", "filename": "src/test/auxiliary/lang-item-public.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ff308137afcacb4bc0d47e00d1dbb730229d932/src%2Ftest%2Fauxiliary%2Flang-item-public.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ff308137afcacb4bc0d47e00d1dbb730229d932/src%2Ftest%2Fauxiliary%2Flang-item-public.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Flang-item-public.rs?ref=9ff308137afcacb4bc0d47e00d1dbb730229d932", "patch": "@@ -11,7 +11,7 @@\n #![no_std]\n #![feature(lang_items)]\n \n-#[lang=\"fail_\"]\n+#[lang=\"fail\"]\n fn fail(_: &(&'static str, &'static str, uint)) -> ! { loop {} }\n \n #[lang = \"stack_exhausted\"]"}, {"sha": "b7feea775cb43d45080a9171763f36b180f065eb", "filename": "src/test/compile-fail/lint-dead-code-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ff308137afcacb4bc0d47e00d1dbb730229d932/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ff308137afcacb4bc0d47e00d1dbb730229d932/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs?ref=9ff308137afcacb4bc0d47e00d1dbb730229d932", "patch": "@@ -108,5 +108,5 @@ fn g() { h(); }\n fn h() {}\n \n // Similarly, lang items are live\n-#[lang=\"fail_\"]\n+#[lang=\"fail\"]\n fn fail(_: *const u8, _: *const u8, _: uint) -> ! { loop {} }"}, {"sha": "74ec56f7bd90a5193b0f6cb970dd24fe2cdc5d42", "filename": "src/test/compile-fail/weak-lang-item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ff308137afcacb4bc0d47e00d1dbb730229d932/src%2Ftest%2Fcompile-fail%2Fweak-lang-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ff308137afcacb4bc0d47e00d1dbb730229d932/src%2Ftest%2Fcompile-fail%2Fweak-lang-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fweak-lang-item.rs?ref=9ff308137afcacb4bc0d47e00d1dbb730229d932", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // aux-build:weak-lang-items.rs\n-// error-pattern: language item required, but not found: `begin_unwind`\n+// error-pattern: language item required, but not found: `fail_fmt`\n // error-pattern: language item required, but not found: `stack_exhausted`\n // error-pattern: language item required, but not found: `eh_personality`\n "}]}