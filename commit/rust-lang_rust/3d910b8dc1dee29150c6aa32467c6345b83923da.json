{"sha": "3d910b8dc1dee29150c6aa32467c6345b83923da", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkOTEwYjhkYzFkZWUyOTE1MGM2YWEzMjQ2N2M2MzQ1YjgzOTIzZGE=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-03-27T08:47:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-03-27T08:47:46Z"}, "message": "Rollup merge of #49223 - GuillaumeGomez:propose-variant-for-E0599, r=cramertj\n\nPropose a variant if it is an enum for E0599\n\nFixes #49192.", "tree": {"sha": "a615912a11e243ec876858c135530124d489aa39", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a615912a11e243ec876858c135530124d489aa39"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d910b8dc1dee29150c6aa32467c6345b83923da", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaugUyCRBK7hj4Ov3rIwAAdHIIAILRXnwqScZZPQysHksuE2DU\n3xdZihnubPVW7GTBaSGfLFs3vvI2Bal3MB6qeV2TcYMEE3AqsDmeK2g5zKJYU3bt\nYX4OLLUiG7y7ktgCOnGKtsKaiU5No+8GGp9tfeTh1EEnFdlWZobB6p8zyfIazjaz\nRdjHfFnxgz1zD3x43ccQM9LrUBFUVg/erQoXGoRHkFB/X2XNL5FPMUl3gY5h+6ZF\nF+j5mZ3sHwMlIe4Tl/wc8qzJQhumqawITA3bMrFPcWS21D3Z4OdI4jXj90wzpY3F\nUk/hyZJ4YmoDznchfhV56HxnnSZPY7Cy+7DbZ8TpDraVmNwYAZvj+6PwuzOERUQ=\n=4l8E\n-----END PGP SIGNATURE-----\n", "payload": "tree a615912a11e243ec876858c135530124d489aa39\nparent 42de36d4aa74f0be9856dbac0cacda97b865647c\nparent 1f51840db0d846c2370f7d726eb8e41424431850\nauthor kennytm <kennytm@gmail.com> 1522140466 +0200\ncommitter GitHub <noreply@github.com> 1522140466 +0200\n\nRollup merge of #49223 - GuillaumeGomez:propose-variant-for-E0599, r=cramertj\n\nPropose a variant if it is an enum for E0599\n\nFixes #49192.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d910b8dc1dee29150c6aa32467c6345b83923da", "html_url": "https://github.com/rust-lang/rust/commit/3d910b8dc1dee29150c6aa32467c6345b83923da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d910b8dc1dee29150c6aa32467c6345b83923da/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42de36d4aa74f0be9856dbac0cacda97b865647c", "url": "https://api.github.com/repos/rust-lang/rust/commits/42de36d4aa74f0be9856dbac0cacda97b865647c", "html_url": "https://github.com/rust-lang/rust/commit/42de36d4aa74f0be9856dbac0cacda97b865647c"}, {"sha": "1f51840db0d846c2370f7d726eb8e41424431850", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f51840db0d846c2370f7d726eb8e41424431850", "html_url": "https://github.com/rust-lang/rust/commit/1f51840db0d846c2370f7d726eb8e41424431850"}], "stats": {"total": 21, "additions": 19, "deletions": 2}, "files": [{"sha": "06bec8f6ff6597b3505f9ac7b726fa7ee591b2e3", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3d910b8dc1dee29150c6aa32467c6345b83923da/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d910b8dc1dee29150c6aa32467c6345b83923da/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=3d910b8dc1dee29150c6aa32467c6345b83923da", "patch": "@@ -22,12 +22,14 @@ use rustc::traits::{Obligation, SelectionContext};\n use util::nodemap::FxHashSet;\n \n use syntax::ast;\n+use syntax::util::lev_distance::find_best_match_for_name;\n use errors::DiagnosticBuilder;\n use syntax_pos::Span;\n \n use rustc::hir;\n use rustc::hir::print;\n use rustc::infer::type_variable::TypeVariableOrigin;\n+use rustc::ty::TyAdt;\n \n use std::cell;\n use std::cmp::Ordering;\n@@ -179,9 +181,16 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 let actual = self.resolve_type_vars_if_possible(&rcvr_ty);\n                 let ty_string = self.ty_to_string(actual);\n                 let is_method = mode == Mode::MethodCall;\n+                let mut suggestion = None;\n                 let type_str = if is_method {\n                     \"method\"\n                 } else if actual.is_enum() {\n+                    if let TyAdt(ref adt_def, _) = actual.sty {\n+                        let names = adt_def.variants.iter().map(|s| &s.name);\n+                        suggestion = find_best_match_for_name(names,\n+                                                              &item_name.as_str(),\n+                                                              None);\n+                    }\n                     \"variant\"\n                 } else {\n                     match (item_name.as_str().chars().next(), actual.is_fresh_ty()) {\n@@ -256,15 +265,19 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         err.emit();\n                         return;\n                     } else {\n-                        struct_span_err!(\n+                        let mut err = struct_span_err!(\n                             tcx.sess,\n                             span,\n                             E0599,\n                             \"no {} named `{}` found for type `{}` in the current scope\",\n                             type_str,\n                             item_name,\n                             ty_string\n-                        )\n+                        );\n+                        if let Some(suggestion) = suggestion {\n+                            err.note(&format!(\"did you mean `{}::{}`?\", type_str, suggestion));\n+                        }\n+                        err\n                     }\n                 } else {\n                     tcx.sess.diagnostic().struct_dummy()"}, {"sha": "d542a10e9b605ac9378a6f888d4b7643d824ef9a", "filename": "src/test/ui/issue-23217.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d910b8dc1dee29150c6aa32467c6345b83923da/src%2Ftest%2Fui%2Fissue-23217.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d910b8dc1dee29150c6aa32467c6345b83923da/src%2Ftest%2Fui%2Fissue-23217.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-23217.stderr?ref=3d910b8dc1dee29150c6aa32467c6345b83923da", "patch": "@@ -5,6 +5,8 @@ LL | pub enum SomeEnum {\n    | ----------------- variant `A` not found here\n LL |     B = SomeEnum::A,\n    |         ^^^^^^^^^^^ variant not found in `SomeEnum`\n+   |\n+   = note: did you mean `variant::B`?\n \n error: aborting due to previous error\n "}, {"sha": "df114351ff571213af5d2e96751a62c01628bdae", "filename": "src/test/ui/issue-28971.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d910b8dc1dee29150c6aa32467c6345b83923da/src%2Ftest%2Fui%2Fissue-28971.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d910b8dc1dee29150c6aa32467c6345b83923da/src%2Ftest%2Fui%2Fissue-28971.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-28971.stderr?ref=3d910b8dc1dee29150c6aa32467c6345b83923da", "patch": "@@ -6,6 +6,8 @@ LL | enum Foo {\n ...\n LL |             Foo::Baz(..) => (),\n    |             ^^^^^^^^^^^^ variant not found in `Foo`\n+   |\n+   = note: did you mean `variant::Bar`?\n \n error: aborting due to previous error\n "}]}