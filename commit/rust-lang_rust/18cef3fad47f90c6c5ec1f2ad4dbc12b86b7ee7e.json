{"sha": "18cef3fad47f90c6c5ec1f2ad4dbc12b86b7ee7e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4Y2VmM2ZhZDQ3ZjkwYzZjNWVjMWYyYWQ0ZGJjMTJiODZiN2VlN2U=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-10-31T22:29:15Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-01-04T21:17:31Z"}, "message": "Don't allow single-variant enums to be dereferenced. #6246\n\nI'm not sure if this was even intentional at this point.", "tree": {"sha": "c6499271b0f1f7a0a2d5f08e6ee46189234fd16b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6499271b0f1f7a0a2d5f08e6ee46189234fd16b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18cef3fad47f90c6c5ec1f2ad4dbc12b86b7ee7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18cef3fad47f90c6c5ec1f2ad4dbc12b86b7ee7e", "html_url": "https://github.com/rust-lang/rust/commit/18cef3fad47f90c6c5ec1f2ad4dbc12b86b7ee7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18cef3fad47f90c6c5ec1f2ad4dbc12b86b7ee7e/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89907089c2d47ba43257c2976fa335e1486caa22", "url": "https://api.github.com/repos/rust-lang/rust/commits/89907089c2d47ba43257c2976fa335e1486caa22", "html_url": "https://github.com/rust-lang/rust/commit/89907089c2d47ba43257c2976fa335e1486caa22"}], "stats": {"total": 100, "additions": 3, "deletions": 97}, "files": [{"sha": "0fdc071dfe30b828dac75ee2e10e0503afd17aa4", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/18cef3fad47f90c6c5ec1f2ad4dbc12b86b7ee7e/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18cef3fad47f90c6c5ec1f2ad4dbc12b86b7ee7e/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=18cef3fad47f90c6c5ec1f2ad4dbc12b86b7ee7e", "patch": "@@ -540,19 +540,6 @@ impl<'a> PrivacyVisitor<'a> {\n         return false;\n     }\n \n-    // Checks that a dereference of a univariant enum can occur.\n-    fn check_variant(&self, span: Span, enum_id: ast::DefId) {\n-        let variant_info = ty::enum_variants(self.tcx, enum_id)[0];\n-\n-        match self.def_privacy(variant_info.id) {\n-            Allowable => {}\n-            ExternallyDenied | DisallowedBy(..) => {\n-                self.tcx.sess.span_err(span, \"can only dereference enums \\\n-                                              with a single, public variant\");\n-            }\n-        }\n-    }\n-\n     // Checks that a field is in scope.\n     // FIXME #6993: change type (and name) from Ident to Name\n     fn check_field(&mut self, span: Span, id: ast::DefId, ident: ast::Ident) {\n@@ -713,18 +700,6 @@ impl<'a> Visitor<()> for PrivacyVisitor<'a> {\n                                                             struct type?!\"),\n                 }\n             }\n-            ast::ExprUnary(_, ast::UnDeref, operand) => {\n-                // In *e, we need to check that if e's type is an\n-                // enum type t, then t's first variant is public or\n-                // privileged. (We can assume it has only one variant\n-                // since typeck already happened.)\n-                match ty::get(ty::expr_ty(self.tcx, operand)).sty {\n-                    ty::ty_enum(id, _) => {\n-                        self.check_variant(expr.span, id);\n-                    }\n-                    _ => { /* No check needed */ }\n-                }\n-            }\n             _ => {}\n         }\n "}, {"sha": "f547e370bb139445b674e83a8b98103b45c7b728", "filename": "src/librustc/middle/trans/datum.rs", "status": "modified", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/18cef3fad47f90c6c5ec1f2ad4dbc12b86b7ee7e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18cef3fad47f90c6c5ec1f2ad4dbc12b86b7ee7e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs?ref=18cef3fad47f90c6c5ec1f2ad4dbc12b86b7ee7e", "patch": "@@ -628,37 +628,6 @@ impl Datum {\n             ty::ty_rptr(_, mt) => {\n                 return (Some(deref_ptr(bcx, self, mt.ty)), bcx);\n             }\n-            ty::ty_enum(did, ref substs) => {\n-                // Check whether this enum is a newtype enum:\n-                let variants = ty::enum_variants(ccx.tcx, did);\n-                if (*variants).len() != 1 || variants[0].args.len() != 1 {\n-                    return (None, bcx);\n-                }\n-\n-                let repr = adt::represent_type(ccx, self.ty);\n-                let ty = ty::subst(ccx.tcx, substs, variants[0].args[0]);\n-                return match self.mode {\n-                    ByRef(_) => {\n-                        // Recast lv.val as a pointer to the newtype\n-                        // rather than a ptr to the enum type.\n-                        (\n-                            Some(Datum {\n-                                val: adt::trans_field_ptr(bcx, repr, self.val,\n-                                                    0, 0),\n-                                ty: ty,\n-                                mode: ByRef(ZeroMem)\n-                            }),\n-                            bcx\n-                        )\n-                    }\n-                    ByValue => {\n-                        // Actually, this case cannot happen right\n-                        // now, because enums are never immediate.\n-                        assert!(type_is_immediate(bcx.ccx(), ty));\n-                        (Some(Datum {ty: ty, ..*self}), bcx)\n-                    }\n-                };\n-            }\n             ty::ty_struct(did, ref substs) => {\n                 // Check whether this struct is a newtype struct.\n                 let fields = ty::struct_fields(ccx.tcx, did, substs);"}, {"sha": "6a2fd3c7f5f94d84e71ff87bbc813da428c72cad", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/18cef3fad47f90c6c5ec1f2ad4dbc12b86b7ee7e/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18cef3fad47f90c6c5ec1f2ad4dbc12b86b7ee7e/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=18cef3fad47f90c6c5ec1f2ad4dbc12b86b7ee7e", "patch": "@@ -2631,16 +2631,6 @@ pub fn deref_sty(cx: ctxt, sty: &sty, explicit: bool) -> Option<mt> {\n         Some(mt)\n       }\n \n-      ty_enum(did, ref substs) => {\n-        let variants = enum_variants(cx, did);\n-        if (*variants).len() == 1u && variants[0].args.len() == 1u {\n-            let v_t = subst(cx, substs, variants[0].args[0]);\n-            Some(mt {ty: v_t, mutbl: ast::MutImmutable})\n-        } else {\n-            None\n-        }\n-      }\n-\n       ty_struct(did, ref substs) => {\n         let fields = struct_fields(cx, did, substs);\n         if fields.len() == 1 && fields[0].ident =="}, {"sha": "defd0893daafa1f12bb72195538fd55bf3280825", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/18cef3fad47f90c6c5ec1f2ad4dbc12b86b7ee7e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18cef3fad47f90c6c5ec1f2ad4dbc12b86b7ee7e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=18cef3fad47f90c6c5ec1f2ad4dbc12b86b7ee7e", "patch": "@@ -2765,12 +2765,6 @@ pub fn check_expr_with_unifier(fcx: @FnCtxt,\n                         }\n                         None => {\n                             match *sty {\n-                                ty::ty_enum(..) => {\n-                                    tcx.sess.span_err(\n-                                        expr.span,\n-                                        \"can only dereference enums with a single variant which \\\n-                                         has a single argument\");\n-                                }\n                                 ty::ty_struct(..) => {\n                                     tcx.sess.span_err(\n                                         expr.span,"}, {"sha": "df08652ea0ad8f6cf6ce1c2e786232df0292e2b2", "filename": "src/test/compile-fail/issue-818.rs", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/89907089c2d47ba43257c2976fa335e1486caa22/src%2Ftest%2Fcompile-fail%2Fissue-818.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89907089c2d47ba43257c2976fa335e1486caa22/src%2Ftest%2Fcompile-fail%2Fissue-818.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-818.rs?ref=89907089c2d47ba43257c2976fa335e1486caa22", "patch": "@@ -1,24 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-mod ctr {\n-\n-    pub enum ctr { priv mkCtr(int) }\n-\n-    pub fn new(i: int) -> ctr { mkCtr(i) }\n-    pub fn inc(c: ctr) -> ctr { mkCtr(*c + 1) }\n-}\n-\n-\n-fn main() {\n-    let c = ctr::new(42);\n-    let c2 = ctr::inc(c);\n-    assert!(*c2 == 5); //~ ERROR can only dereference enums with a single, public variant\n-}"}, {"sha": "fb533a3de585814d2feebd475560b8f505902e80", "filename": "src/test/run-pass/explicit-self-generic.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/18cef3fad47f90c6c5ec1f2ad4dbc12b86b7ee7e/src%2Ftest%2Frun-pass%2Fexplicit-self-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18cef3fad47f90c6c5ec1f2ad4dbc12b86b7ee7e/src%2Ftest%2Frun-pass%2Fexplicit-self-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-self-generic.rs?ref=18cef3fad47f90c6c5ec1f2ad4dbc12b86b7ee7e", "patch": "@@ -32,7 +32,9 @@ fn linear_map<K,V>() -> HashMap<K,V> {\n \n impl<K,V> HashMap<K,V> {\n     pub fn len(&mut self) -> uint {\n-        self.size\n+        match *self {\n+            HashMap_(l) => l.size\n+        }\n     }\n }\n "}]}