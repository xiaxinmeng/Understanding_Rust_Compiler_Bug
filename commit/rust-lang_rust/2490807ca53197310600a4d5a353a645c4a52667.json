{"sha": "2490807ca53197310600a4d5a353a645c4a52667", "node_id": "C_kwDOAAsO6NoAKDI0OTA4MDdjYTUzMTk3MzEwNjAwYTRkNWEzNTNhNjQ1YzRhNTI2Njc", "commit": {"author": {"name": "Anatol Ulrich", "email": "anatol.ulrich@ferrous-systems.com", "date": "2021-10-25T21:43:58Z"}, "committer": {"name": "Anatol Ulrich", "email": "anatol.ulrich@ferrous-systems.com", "date": "2021-10-25T21:43:58Z"}, "message": "fix: make `goto_type_definition` multi-token mapping aware", "tree": {"sha": "dd35d51259f7f2de675dbca306d5eaf5cb3297c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd35d51259f7f2de675dbca306d5eaf5cb3297c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2490807ca53197310600a4d5a353a645c4a52667", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2490807ca53197310600a4d5a353a645c4a52667", "html_url": "https://github.com/rust-lang/rust/commit/2490807ca53197310600a4d5a353a645c4a52667", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2490807ca53197310600a4d5a353a645c4a52667/comments", "author": null, "committer": null, "parents": [{"sha": "e4ca952be655b5b5c3426ac47d9f3cac66b0a642", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4ca952be655b5b5c3426ac47d9f3cac66b0a642", "html_url": "https://github.com/rust-lang/rust/commit/e4ca952be655b5b5c3426ac47d9f3cac66b0a642"}], "stats": {"total": 94, "additions": 54, "deletions": 40}, "files": [{"sha": "ce22ef049c7d5169fd7bd995f15c60868b1df471", "filename": "crates/ide/src/goto_type_definition.rs", "status": "modified", "additions": 54, "deletions": 40, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/2490807ca53197310600a4d5a353a645c4a52667/crates%2Fide%2Fsrc%2Fgoto_type_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2490807ca53197310600a4d5a353a645c4a52667/crates%2Fide%2Fsrc%2Fgoto_type_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_type_definition.rs?ref=2490807ca53197310600a4d5a353a645c4a52667", "patch": "@@ -1,5 +1,5 @@\n use ide_db::{base_db::Upcast, helpers::pick_best_token, RootDatabase};\n-use syntax::{ast, match_ast, AstNode, SyntaxKind::*, SyntaxToken, T};\n+use syntax::{ast, match_ast, AstNode, SyntaxKind::*, SyntaxToken, TextRange, T};\n \n use crate::{display::TryToNav, FilePosition, NavigationTarget, RangeInfo};\n \n@@ -27,32 +27,6 @@ pub(crate) fn goto_type_definition(\n             kind if kind.is_trivia() => 0,\n             _ => 1,\n         })?;\n-    let token: SyntaxToken = sema.descend_into_macros_single(token);\n-\n-    let (ty, node) = sema.token_ancestors_with_macros(token).find_map(|node| {\n-        let ty = match_ast! {\n-            match node {\n-                ast::Expr(it) => sema.type_of_expr(&it)?.original,\n-                ast::Pat(it) => sema.type_of_pat(&it)?.original,\n-                ast::SelfParam(it) => sema.type_of_self(&it)?,\n-                ast::Type(it) => sema.resolve_type(&it)?,\n-                ast::RecordField(it) => sema.to_def(&it).map(|d| d.ty(db.upcast()))?,\n-                // can't match on RecordExprField directly as `ast::Expr` will match an iteration too early otherwise\n-                ast::NameRef(it) => {\n-                    if let Some(record_field) = ast::RecordExprField::for_name_ref(&it) {\n-                        let (_, _, ty) = sema.resolve_record_field(&record_field)?;\n-                        ty\n-                    } else {\n-                        let record_field = ast::RecordPatField::for_field_name_ref(&it)?;\n-                        sema.resolve_record_pat_field(&record_field)?.ty(db)\n-                    }\n-                },\n-                _ => return None,\n-            }\n-        };\n-\n-        Some((ty, node))\n-    })?;\n \n     let mut res = Vec::new();\n     let mut push = |def: hir::ModuleDef| {\n@@ -63,20 +37,60 @@ pub(crate) fn goto_type_definition(\n         }\n     };\n \n-    let ty = ty.strip_references();\n-    ty.walk(db, |t| {\n-        if let Some(adt) = t.as_adt() {\n-            push(adt.into());\n-        } else if let Some(trait_) = t.as_dyn_trait() {\n-            push(trait_.into());\n-        } else if let Some(traits) = t.as_impl_traits(db) {\n-            traits.into_iter().for_each(|it| push(it.into()));\n-        } else if let Some(trait_) = t.as_associated_type_parent_trait(db) {\n-            push(trait_.into());\n-        }\n-    });\n+    // TODO this became pretty baroque after refactoring for `descend_into_macros(_many)`\n+    let range = sema\n+        .descend_into_macros(token)\n+        .iter()\n+        .filter_map(|token| {\n+            let ty_range = sema.token_ancestors_with_macros(token.clone()).find_map(|node| {\n+                let ty = match_ast! {\n+                    match node {\n+                        ast::Expr(it) => sema.type_of_expr(&it)?.original,\n+                        ast::Pat(it) => sema.type_of_pat(&it)?.original,\n+                        ast::SelfParam(it) => sema.type_of_self(&it)?,\n+                        ast::Type(it) => sema.resolve_type(&it)?,\n+                        ast::RecordField(it) => sema.to_def(&it).map(|d| d.ty(db.upcast()))?,\n+                        // can't match on RecordExprField directly as `ast::Expr` will match an iteration too early otherwise\n+                        ast::NameRef(it) => {\n+                            if let Some(record_field) = ast::RecordExprField::for_name_ref(&it) {\n+                                let (_, _, ty) = sema.resolve_record_field(&record_field)?;\n+                                ty\n+                            } else {\n+                                let record_field = ast::RecordPatField::for_field_name_ref(&it)?;\n+                                sema.resolve_record_pat_field(&record_field)?.ty(db)\n+                            }\n+                        },\n+                        _ => return None,\n+                    }\n+                };\n+\n+                let range = node.text_range();\n+                Some((ty, range.start(), range.end()))\n+            });\n+            ty_range\n+        })\n+        .inspect(|(ty, _range_start, _range_end)| {\n+            // collect from each `ty` into the `res` result vec\n+            let ty = ty.strip_references();\n+            ty.walk(db, |t| {\n+                if let Some(adt) = t.as_adt() {\n+                    push(adt.into());\n+                } else if let Some(trait_) = t.as_dyn_trait() {\n+                    push(trait_.into());\n+                } else if let Some(traits) = t.as_impl_traits(db) {\n+                    traits.into_iter().for_each(|it| push(it.into()));\n+                } else if let Some(trait_) = t.as_associated_type_parent_trait(db) {\n+                    push(trait_.into());\n+                }\n+            });\n+        }) // reduce all ranges into a single umbrella span (TODO fishy?)\n+        .map(|(_, range_start, range_end)| (range_start, range_end))\n+        .reduce(|(start_acc, end_acc), (start_cur, end_cur)| {\n+            (start_acc.min(start_cur), end_acc.max(end_cur))\n+        })\n+        .map(|(range_start, range_end)| TextRange::new(range_start, range_end))?; // TODO easy to miss `?` bail\n \n-    Some(RangeInfo::new(node.text_range(), res))\n+    Some(RangeInfo::new(range, res))\n }\n \n #[cfg(test)]"}]}