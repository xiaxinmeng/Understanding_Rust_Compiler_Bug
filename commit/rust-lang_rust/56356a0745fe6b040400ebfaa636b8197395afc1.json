{"sha": "56356a0745fe6b040400ebfaa636b8197395afc1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2MzU2YTA3NDVmZTZiMDQwNDAwZWJmYWE2MzZiODE5NzM5NWFmYzE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-11-29T10:29:30Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-12-02T07:55:42Z"}, "message": "Miri: add helper fn to allocate string; simplify alloc_caller_location", "tree": {"sha": "565eb26ea87208799c3f622dd0c225ac7cfb6f94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/565eb26ea87208799c3f622dd0c225ac7cfb6f94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56356a0745fe6b040400ebfaa636b8197395afc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56356a0745fe6b040400ebfaa636b8197395afc1", "html_url": "https://github.com/rust-lang/rust/commit/56356a0745fe6b040400ebfaa636b8197395afc1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56356a0745fe6b040400ebfaa636b8197395afc1/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cde17d915867d75169e8f7e8845ce705006c2ebb", "url": "https://api.github.com/repos/rust-lang/rust/commits/cde17d915867d75169e8f7e8845ce705006c2ebb", "html_url": "https://github.com/rust-lang/rust/commit/cde17d915867d75169e8f7e8845ce705006c2ebb"}], "stats": {"total": 69, "additions": 36, "deletions": 33}, "files": [{"sha": "010738c5a052e0918291d8bc24882873e421c5f8", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56356a0745fe6b040400ebfaa636b8197395afc1/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56356a0745fe6b040400ebfaa636b8197395afc1/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=56356a0745fe6b040400ebfaa636b8197395afc1", "patch": "@@ -552,7 +552,7 @@ pub fn const_caller_location<'tcx>(\n         tcx.type_of(tcx.require_lang_item(PanicLocationLangItem, None))\n             .subst(tcx, tcx.mk_substs([tcx.lifetimes.re_static.into()].iter())),\n     );\n-    let loc_place = ecx.alloc_caller_location(file, line, col).unwrap();\n+    let loc_place = ecx.alloc_caller_location(file, line, col);\n     intern_const_alloc_recursive(&mut ecx, None, loc_place).unwrap();\n     let loc_const = ty::Const {\n         ty: loc_ty,"}, {"sha": "118dfcb3d9a0125db87b29e4ba2183e71faa0f84", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56356a0745fe6b040400ebfaa636b8197395afc1/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56356a0745fe6b040400ebfaa636b8197395afc1/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=56356a0745fe6b040400ebfaa636b8197395afc1", "patch": "@@ -110,7 +110,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n         match intrinsic_name {\n             \"caller_location\" => {\n-                let location = self.alloc_caller_location_for_span(span)?;\n+                let location = self.alloc_caller_location_for_span(span);\n                 self.write_scalar(location.ptr, dest)?;\n             }\n "}, {"sha": "ecf4b7a39b7265edeffd5eaea711f101fdbff917", "filename": "src/librustc_mir/interpret/intrinsics/caller_location.rs", "status": "modified", "additions": 15, "deletions": 30, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/56356a0745fe6b040400ebfaa636b8197395afc1/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56356a0745fe6b040400ebfaa636b8197395afc1/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Fcaller_location.rs?ref=56356a0745fe6b040400ebfaa636b8197395afc1", "patch": "@@ -1,57 +1,42 @@\n use rustc::middle::lang_items::PanicLocationLangItem;\n-use rustc::mir::interpret::{Pointer, PointerArithmetic, Scalar};\n use rustc::ty::subst::Subst;\n-use rustc_target::abi::{LayoutOf, Size};\n+use rustc_target::abi::LayoutOf;\n use syntax_pos::{Symbol, Span};\n \n-use crate::interpret::{MemoryKind, MPlaceTy, intrinsics::{InterpCx, InterpResult, Machine}};\n+use crate::interpret::{Scalar, MemoryKind, MPlaceTy, intrinsics::{InterpCx, Machine}};\n \n impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     crate fn alloc_caller_location(\n         &mut self,\n         filename: Symbol,\n         line: u32,\n         col: u32,\n-    ) -> InterpResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {\n+    ) -> MPlaceTy<'tcx, M::PointerTag> {\n+        let file = self.allocate_str(&filename.as_str(), MemoryKind::CallerLocation);\n         let line = Scalar::from_u32(line);\n         let col = Scalar::from_u32(col);\n \n-        let ptr_size = self.pointer_size();\n-        let u32_size = Size::from_bits(32);\n-\n+        // Allocate memory for `CallerLocation` struct.\n         let loc_ty = self.tcx.type_of(self.tcx.require_lang_item(PanicLocationLangItem, None))\n             .subst(*self.tcx, self.tcx.mk_substs([self.tcx.lifetimes.re_static.into()].iter()));\n-        let loc_layout = self.layout_of(loc_ty)?;\n-\n-        let file_alloc = self.tcx.allocate_bytes(filename.as_str().as_bytes());\n-        let file_ptr = Pointer::new(file_alloc, Size::ZERO);\n-        let file = Scalar::Ptr(self.tag_static_base_pointer(file_ptr));\n-        let file_len = Scalar::from_uint(filename.as_str().len() as u128, ptr_size);\n-\n+        let loc_layout = self.layout_of(loc_ty).unwrap();\n         let location = self.allocate(loc_layout, MemoryKind::CallerLocation);\n \n-        let file_out = self.mplace_field(location, 0)?;\n-        let file_ptr_out = self.force_ptr(self.mplace_field(file_out, 0)?.ptr)?;\n-        let file_len_out = self.force_ptr(self.mplace_field(file_out, 1)?.ptr)?;\n-        let line_out = self.force_ptr(self.mplace_field(location, 1)?.ptr)?;\n-        let col_out = self.force_ptr(self.mplace_field(location, 2)?.ptr)?;\n-\n-        let layout = &self.tcx.data_layout;\n-        // We just allocated this, so we can skip the bounds checks.\n-        let alloc = self.memory.get_raw_mut(file_ptr_out.alloc_id)?;\n-\n-        alloc.write_scalar(layout, file_ptr_out, file.into(), ptr_size)?;\n-        alloc.write_scalar(layout, file_len_out, file_len.into(), ptr_size)?;\n-        alloc.write_scalar(layout, line_out, line.into(), u32_size)?;\n-        alloc.write_scalar(layout, col_out, col.into(), u32_size)?;\n+        // Initialize fields.\n+        self.write_immediate(file.to_ref(), self.mplace_field(location, 0).unwrap().into())\n+            .expect(\"writing to memory we just allocated cannot fail\");\n+        self.write_scalar(line, self.mplace_field(location, 1).unwrap().into())\n+            .expect(\"writing to memory we just allocated cannot fail\");\n+        self.write_scalar(col, self.mplace_field(location, 2).unwrap().into())\n+            .expect(\"writing to memory we just allocated cannot fail\");\n \n-        Ok(location)\n+        location\n     }\n \n     pub fn alloc_caller_location_for_span(\n         &mut self,\n         span: Span,\n-    ) -> InterpResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {\n+    ) -> MPlaceTy<'tcx, M::PointerTag> {\n         let topmost = span.ctxt().outer_expn().expansion_cause().unwrap_or(span);\n         let caller = self.tcx.sess.source_map().lookup_char_pos(topmost.lo());\n         self.alloc_caller_location("}, {"sha": "2ec1613bce27ae1d8331ede45289c3125f37a01b", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56356a0745fe6b040400ebfaa636b8197395afc1/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56356a0745fe6b040400ebfaa636b8197395afc1/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=56356a0745fe6b040400ebfaa636b8197395afc1", "patch": "@@ -331,7 +331,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         Ok(self.read_immediate(op)?.to_scalar_or_undef())\n     }\n \n-    // Turn the MPlace into a string (must already be dereferenced!)\n+    // Turn the fat MPlace into a string (must already be dereferenced!)\n     pub fn read_str(\n         &self,\n         mplace: MPlaceTy<'tcx, M::PointerTag>,"}, {"sha": "ea7b53b3dda2c024f6726d4312e206c7d8cb0450", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/56356a0745fe6b040400ebfaa636b8197395afc1/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56356a0745fe6b040400ebfaa636b8197395afc1/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=56356a0745fe6b040400ebfaa636b8197395afc1", "patch": "@@ -1034,6 +1034,24 @@ where\n         MPlaceTy::from_aligned_ptr(ptr, layout)\n     }\n \n+    /// Returns a fat MPlace.\n+    pub fn allocate_str(\n+        &mut self,\n+        str: &str,\n+        kind: MemoryKind<M::MemoryKinds>,\n+    ) -> MPlaceTy<'tcx, M::PointerTag> {\n+        let ptr = self.memory.allocate_static_bytes(str.as_bytes(), kind);\n+        let meta = Scalar::from_uint(str.len() as u128, self.pointer_size());\n+        let mplace = MemPlace {\n+            ptr: ptr.into(),\n+            align: Align::from_bytes(1).unwrap(),\n+            meta: Some(meta),\n+        };\n+\n+        let layout = self.layout_of(self.tcx.mk_static_str()).unwrap();\n+        MPlaceTy { mplace, layout }\n+    }\n+\n     pub fn write_discriminant_index(\n         &mut self,\n         variant_index: VariantIdx,"}]}