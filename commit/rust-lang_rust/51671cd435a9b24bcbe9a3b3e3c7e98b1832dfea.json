{"sha": "51671cd435a9b24bcbe9a3b3e3c7e98b1832dfea", "node_id": "C_kwDOAAsO6NoAKDUxNjcxY2Q0MzVhOWIyNGJjYmU5YTNiM2UzYzdlOThiMTgzMmRmZWE", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2023-02-14T09:53:25Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2023-02-14T11:18:33Z"}, "message": "add test for coinduction in new solver", "tree": {"sha": "41fd4d6d2553c694c439ac4caf39148b60dc736b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41fd4d6d2553c694c439ac4caf39148b60dc736b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51671cd435a9b24bcbe9a3b3e3c7e98b1832dfea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51671cd435a9b24bcbe9a3b3e3c7e98b1832dfea", "html_url": "https://github.com/rust-lang/rust/commit/51671cd435a9b24bcbe9a3b3e3c7e98b1832dfea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51671cd435a9b24bcbe9a3b3e3c7e98b1832dfea/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "646e6672000f17154f38f03b0a6948727510d663", "url": "https://api.github.com/repos/rust-lang/rust/commits/646e6672000f17154f38f03b0a6948727510d663", "html_url": "https://github.com/rust-lang/rust/commit/646e6672000f17154f38f03b0a6948727510d663"}], "stats": {"total": 82, "additions": 80, "deletions": 2}, "files": [{"sha": "38a86d55a2cc4706077d9f29afe4111589fa4d47", "filename": "compiler/rustc_trait_selection/src/solve/mod.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/51671cd435a9b24bcbe9a3b3e3c7e98b1832dfea/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51671cd435a9b24bcbe9a3b3e3c7e98b1832dfea/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs?ref=51671cd435a9b24bcbe9a3b3e3c7e98b1832dfea", "patch": "@@ -265,12 +265,18 @@ impl<'a, 'tcx> EvalCtxt<'a, 'tcx> {\n         // call `exists<U> <T as Trait>::Assoc == U` to enable better caching. This goal\n         // could constrain `U` to `u32` which would cause this check to result in a\n         // solver cycle.\n-        if cfg!(debug_assertions) && has_changed && !self.in_projection_eq_hack {\n+        if cfg!(debug_assertions)\n+            && has_changed\n+            && !self.in_projection_eq_hack\n+            && !self.search_graph.in_cycle()\n+        {\n             let mut orig_values = OriginalQueryValues::default();\n             let canonical_goal = self.infcx.canonicalize_query(goal, &mut orig_values);\n             let canonical_response =\n                 EvalCtxt::evaluate_canonical_goal(self.tcx(), self.search_graph, canonical_goal)?;\n-            assert!(canonical_response.value.var_values.is_identity());\n+            if !canonical_response.value.var_values.is_identity() {\n+                bug!(\"unstable result: {goal:?} {canonical_goal:?} {canonical_response:?}\");\n+            }\n             assert_eq!(certainty, canonical_response.value.certainty);\n         }\n "}, {"sha": "e989c9145d1e047af1ee8618b4196e45775d2237", "filename": "compiler/rustc_trait_selection/src/solve/search_graph/mod.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/51671cd435a9b24bcbe9a3b3e3c7e98b1832dfea/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51671cd435a9b24bcbe9a3b3e3c7e98b1832dfea/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Fmod.rs?ref=51671cd435a9b24bcbe9a3b3e3c7e98b1832dfea", "patch": "@@ -42,6 +42,24 @@ impl<'tcx> SearchGraph<'tcx> {\n             && !self.overflow_data.did_overflow()\n     }\n \n+    /// Whether we're currently in a cycle. This should only be used\n+    /// for debug assertions.\n+    pub(super) fn in_cycle(&self) -> bool {\n+        if let Some(stack_depth) = self.stack.last() {\n+            // Either the current goal on the stack is the root of a cycle...\n+            if self.stack[stack_depth].has_been_used {\n+                return true;\n+            }\n+\n+            // ...or it depends on a goal with a lower depth.\n+            let current_goal = self.stack[stack_depth].goal;\n+            let entry_index = self.provisional_cache.lookup_table[&current_goal];\n+            self.provisional_cache.entries[entry_index].depth != stack_depth\n+        } else {\n+            false\n+        }\n+    }\n+\n     /// Tries putting the new goal on the stack, returning an error if it is already cached.\n     ///\n     /// This correctly updates the provisional cache if there is a cycle."}, {"sha": "b10ba3a810fd974defec21b10ca3e3249693b83c", "filename": "tests/ui/coinduction/canonicalization-rerun.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/51671cd435a9b24bcbe9a3b3e3c7e98b1832dfea/tests%2Fui%2Fcoinduction%2Fcanonicalization-rerun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51671cd435a9b24bcbe9a3b3e3c7e98b1832dfea/tests%2Fui%2Fcoinduction%2Fcanonicalization-rerun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcoinduction%2Fcanonicalization-rerun.rs?ref=51671cd435a9b24bcbe9a3b3e3c7e98b1832dfea", "patch": "@@ -0,0 +1,54 @@\n+// check-pass\n+// revisions: old new\n+//[new] compile-flags: -Ztrait-solver=next\n+\n+// If we use canonical goals during trait solving we have to reevaluate\n+// the root goal of a cycle until we hit a fixpoint.\n+//\n+// Here `main` has a goal `(?0, ?1): Trait` which is canonicalized to\n+// `exists<^0, ^1> (^0, ^1): Trait`.\n+//\n+// - `exists<^0, ^1> (^0, ^1): Trait` -instantiate-> `(?0, ?1): Trait`\n+//   -`(?1, ?0): Trait` -canonicalize-> `exists<^0, ^1> (^0, ^1): Trait`\n+//     - COINDUCTIVE CYCLE OK (no constraints)\n+//   - `(): ConstrainToU32<?0>` -canonicalize-> `exists<^0> (): ConstrainToU32<^0>`\n+//     - OK (^0 = u32 -apply-> ?0 = u32)\n+//   - OK (?0 = u32 -canonicalize-> ^0 = u32)\n+//   - coinductive cycle with provisional result != final result, rerun\n+//\n+// - `exists<^0, ^1> (^0, ^1): Trait` -instantiate-> `(?0, ?1): Trait`\n+//   -`(?1, ?0): Trait` -canonicalize-> `exists<^0, ^1> (^0, ^1): Trait`\n+//     - COINDUCTIVE CYCLE OK (^0 = u32 -apply-> ?1 = u32)\n+//   - `(): ConstrainToU32<?0>` -canonicalize-> `exists<^0> (): ConstrainToU32<^0>`\n+//     - OK (^0 = u32 -apply-> ?1 = u32)\n+//   - OK (?0 = u32, ?1 = u32 -canonicalize-> ^0 = u32, ^1 = u32)\n+//   - coinductive cycle with provisional result != final result, rerun\n+//\n+// - `exists<^0, ^1> (^0, ^1): Trait` -instantiate-> `(?0, ?1): Trait`\n+//   -`(?1, ?0): Trait` -canonicalize-> `exists<^0, ^1> (^0, ^1): Trait`\n+//     - COINDUCTIVE CYCLE OK (^0 = u32, ^1 = u32 -apply-> ?1 = u32, ?0 = u32)\n+//   - `(): ConstrainToU32<?0>` -canonicalize-> `exists<^0> (): ConstrainToU32<^0>`\n+//     - OK (^0 = u32 -apply-> ?1 = u32)\n+//   - OK (?0 = u32, ?1 = u32 -canonicalize-> ^0 = u32, ^1 = u32)\n+//   - coinductive cycle with provisional result == final result, DONE\n+#![feature(rustc_attrs)]\n+#[rustc_coinductive]\n+trait Trait {}\n+\n+impl<T, U> Trait for (T, U)\n+where\n+    (U, T): Trait,\n+    (): ConstrainToU32<T>,\n+{}\n+\n+trait ConstrainToU32<T> {}\n+impl ConstrainToU32<u32> for () {}\n+\n+fn impls_trait<T, U>()\n+where\n+    (T, U): Trait,\n+{}\n+\n+fn main() {\n+    impls_trait::<_, _>();\n+}"}]}