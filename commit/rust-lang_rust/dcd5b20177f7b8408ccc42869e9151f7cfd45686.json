{"sha": "dcd5b20177f7b8408ccc42869e9151f7cfd45686", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjZDViMjAxNzdmN2I4NDA4Y2NjNDI4NjllOTE1MWY3Y2ZkNDU2ODY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-18T23:52:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-06-18T23:52:09Z"}, "message": "Rollup merge of #61896 - eddyb:correct-self-ctor, r=petrochenkov\n\nrustc_typeck: correctly compute `Substs` for `Res::SelfCtor`.\n\nFixes #61882.\n\nr? @petrochenkov cc @varkor", "tree": {"sha": "4239b39070ca468e87d536f580c822b77d00037b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4239b39070ca468e87d536f580c822b77d00037b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dcd5b20177f7b8408ccc42869e9151f7cfd45686", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdCXkpCRBK7hj4Ov3rIwAAdHIIAC3PZktmaSquNwjbOWRBt0r0\nc+q1FWh0486n+83vlK4N7FZFHBHtRcMZ8zBTWA3qm7J7SL0hiyp7BSbV/U+Yx9kb\nxBbqPaDWOsoYTR2xLGGamzK/GPwsAmjLKCzXjMAEX3vvjGuMY08RFOKyJJBbZu9m\nE8NXKaQsZFGbouEQ/hfAxFwz87CJGn7nnI0kN2Ik5XTOqvMa1NUSQCRyQyLJrDud\nNm46R/45P5N1fG7CRYT9YqTytT11udsHozqcyG3nseM0isUnw1PsREuDnROqacgJ\nJ5o5/hKffEev3oSKXCZ2t3wEwOxxdUtSMsLYr/4jHSEP3g8y78ORLd4+HgH7TBQ=\n=+B2m\n-----END PGP SIGNATURE-----\n", "payload": "tree 4239b39070ca468e87d536f580c822b77d00037b\nparent 4f2471574548c1cd0ef0f65c03eae525147fb1a8\nparent dedf2eda8f6d062da91c80a8980b3b794f5c876e\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1560901929 +0200\ncommitter GitHub <noreply@github.com> 1560901929 +0200\n\nRollup merge of #61896 - eddyb:correct-self-ctor, r=petrochenkov\n\nrustc_typeck: correctly compute `Substs` for `Res::SelfCtor`.\n\nFixes #61882.\n\nr? @petrochenkov cc @varkor\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dcd5b20177f7b8408ccc42869e9151f7cfd45686", "html_url": "https://github.com/rust-lang/rust/commit/dcd5b20177f7b8408ccc42869e9151f7cfd45686", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dcd5b20177f7b8408ccc42869e9151f7cfd45686/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f2471574548c1cd0ef0f65c03eae525147fb1a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f2471574548c1cd0ef0f65c03eae525147fb1a8", "html_url": "https://github.com/rust-lang/rust/commit/4f2471574548c1cd0ef0f65c03eae525147fb1a8"}, {"sha": "dedf2eda8f6d062da91c80a8980b3b794f5c876e", "url": "https://api.github.com/repos/rust-lang/rust/commits/dedf2eda8f6d062da91c80a8980b3b794f5c876e", "html_url": "https://github.com/rust-lang/rust/commit/dedf2eda8f6d062da91c80a8980b3b794f5c876e"}], "stats": {"total": 162, "additions": 109, "deletions": 53}, "files": [{"sha": "519081732033d809f9ec3695e44136c053891e67", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 43, "deletions": 53, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/dcd5b20177f7b8408ccc42869e9151f7cfd45686/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcd5b20177f7b8408ccc42869e9151f7cfd45686/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=dcd5b20177f7b8408ccc42869e9151f7cfd45686", "patch": "@@ -3957,52 +3957,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         Some(original_span.with_lo(original_span.hi() - BytePos(1)))\n     }\n \n-    // Rewrite `SelfCtor` to `Ctor`\n-    pub fn rewrite_self_ctor(\n-        &self,\n-        res: Res,\n-        span: Span,\n-    ) -> Result<Res, ErrorReported> {\n-        let tcx = self.tcx;\n-        if let Res::SelfCtor(impl_def_id) = res {\n-            let ty = self.impl_self_ty(span, impl_def_id).ty;\n-            let adt_def = ty.ty_adt_def();\n-\n-            match adt_def {\n-                Some(adt_def) if adt_def.has_ctor() => {\n-                    let variant = adt_def.non_enum_variant();\n-                    let ctor_def_id = variant.ctor_def_id.unwrap();\n-                    Ok(Res::Def(DefKind::Ctor(CtorOf::Struct, variant.ctor_kind), ctor_def_id))\n-                }\n-                _ => {\n-                    let mut err = tcx.sess.struct_span_err(span,\n-                        \"the `Self` constructor can only be used with tuple or unit structs\");\n-                    if let Some(adt_def) = adt_def {\n-                        match adt_def.adt_kind() {\n-                            AdtKind::Enum => {\n-                                err.help(\"did you mean to use one of the enum's variants?\");\n-                            },\n-                            AdtKind::Struct |\n-                            AdtKind::Union => {\n-                                err.span_suggestion(\n-                                    span,\n-                                    \"use curly brackets\",\n-                                    String::from(\"Self { /* fields */ }\"),\n-                                    Applicability::HasPlaceholders,\n-                                );\n-                            }\n-                        }\n-                    }\n-                    err.emit();\n-\n-                    Err(ErrorReported)\n-                }\n-            }\n-        } else {\n-            Ok(res)\n-        }\n-    }\n-\n     // Instantiates the given path, which must refer to an item with the given\n     // number of type parameters and type.\n     pub fn instantiate_value_path(&self,\n@@ -4022,12 +3976,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         let tcx = self.tcx;\n \n-        let res = match self.rewrite_self_ctor(res, span) {\n-            Ok(res) => res,\n-            Err(ErrorReported) => return (tcx.types.err, res),\n-        };\n         let path_segs = match res {\n-            Res::Local(_) => vec![],\n+            Res::Local(_) | Res::SelfCtor(_) => vec![],\n             Res::Def(kind, def_id) =>\n                 AstConv::def_ids_for_value_path_segments(self, segments, self_ty, kind, def_id),\n             _ => bug!(\"instantiate_value_path on {:?}\", res),\n@@ -4132,13 +4082,53 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             tcx.generics_of(*def_id).has_self\n         }).unwrap_or(false);\n \n+        let (res, self_ctor_substs) = if let Res::SelfCtor(impl_def_id) = res {\n+            let ty = self.impl_self_ty(span, impl_def_id).ty;\n+            let adt_def = ty.ty_adt_def();\n+\n+            match ty.sty {\n+                ty::Adt(adt_def, substs) if adt_def.has_ctor() => {\n+                    let variant = adt_def.non_enum_variant();\n+                    let ctor_def_id = variant.ctor_def_id.unwrap();\n+                    (\n+                        Res::Def(DefKind::Ctor(CtorOf::Struct, variant.ctor_kind), ctor_def_id),\n+                        Some(substs),\n+                    )\n+                }\n+                _ => {\n+                    let mut err = tcx.sess.struct_span_err(span,\n+                        \"the `Self` constructor can only be used with tuple or unit structs\");\n+                    if let Some(adt_def) = adt_def {\n+                        match adt_def.adt_kind() {\n+                            AdtKind::Enum => {\n+                                err.help(\"did you mean to use one of the enum's variants?\");\n+                            },\n+                            AdtKind::Struct |\n+                            AdtKind::Union => {\n+                                err.span_suggestion(\n+                                    span,\n+                                    \"use curly brackets\",\n+                                    String::from(\"Self { /* fields */ }\"),\n+                                    Applicability::HasPlaceholders,\n+                                );\n+                            }\n+                        }\n+                    }\n+                    err.emit();\n+\n+                    return (tcx.types.err, res)\n+                }\n+            }\n+        } else {\n+            (res, None)\n+        };\n         let def_id = res.def_id();\n \n         // The things we are substituting into the type should not contain\n         // escaping late-bound regions, and nor should the base type scheme.\n         let ty = tcx.type_of(def_id);\n \n-        let substs = AstConv::create_substs_for_generic_args(\n+        let substs = self_ctor_substs.unwrap_or_else(|| AstConv::create_substs_for_generic_args(\n             tcx,\n             def_id,\n             &[][..],\n@@ -4208,7 +4198,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     }\n                 }\n             },\n-        );\n+        ));\n         assert!(!substs.has_escaping_bound_vars());\n         assert!(!ty.has_escaping_bound_vars());\n "}, {"sha": "dc2942225e3de6205b0e6d1c723acbda0b768304", "filename": "src/test/ui/issues/issue-57924.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dcd5b20177f7b8408ccc42869e9151f7cfd45686/src%2Ftest%2Fui%2Fissues%2Fissue-57924.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcd5b20177f7b8408ccc42869e9151f7cfd45686/src%2Ftest%2Fui%2Fissues%2Fissue-57924.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57924.rs?ref=dcd5b20177f7b8408ccc42869e9151f7cfd45686", "patch": "@@ -3,6 +3,7 @@ pub struct Gcm<E>(E);\n impl<E> Gcm<E> {\n     pub fn crash(e: E) -> Self {\n         Self::<E>(e)\n+        //~^ ERROR type arguments are not allowed for this type\n     }\n }\n ", "previous_filename": "src/test/run-pass/issues/issue-57924.rs"}, {"sha": "2f184b1aae171847761d1aa750b09411866fa899", "filename": "src/test/ui/issues/issue-57924.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dcd5b20177f7b8408ccc42869e9151f7cfd45686/src%2Ftest%2Fui%2Fissues%2Fissue-57924.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dcd5b20177f7b8408ccc42869e9151f7cfd45686/src%2Ftest%2Fui%2Fissues%2Fissue-57924.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57924.stderr?ref=dcd5b20177f7b8408ccc42869e9151f7cfd45686", "patch": "@@ -0,0 +1,9 @@\n+error[E0109]: type arguments are not allowed for this type\n+  --> $DIR/issue-57924.rs:5:16\n+   |\n+LL |         Self::<E>(e)\n+   |                ^ type argument not allowed\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0109`."}, {"sha": "1209b54bc410e8b4bd93b05fc5a348d01e18d64f", "filename": "src/test/ui/issues/issue-61882-2.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/dcd5b20177f7b8408ccc42869e9151f7cfd45686/src%2Ftest%2Fui%2Fissues%2Fissue-61882-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcd5b20177f7b8408ccc42869e9151f7cfd45686/src%2Ftest%2Fui%2Fissues%2Fissue-61882-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-61882-2.rs?ref=dcd5b20177f7b8408ccc42869e9151f7cfd45686", "patch": "@@ -0,0 +1,11 @@\n+struct A<T>(T);\n+\n+impl A<&'static u8> {\n+    fn f() {\n+        let x = 0;\n+        Self(&x);\n+        //~^ ERROR `x` does not live long enough\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "03a65540ced04a549eba45fb8917f849868a3a53", "filename": "src/test/ui/issues/issue-61882-2.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/dcd5b20177f7b8408ccc42869e9151f7cfd45686/src%2Ftest%2Fui%2Fissues%2Fissue-61882-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dcd5b20177f7b8408ccc42869e9151f7cfd45686/src%2Ftest%2Fui%2Fissues%2Fissue-61882-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-61882-2.stderr?ref=dcd5b20177f7b8408ccc42869e9151f7cfd45686", "patch": "@@ -0,0 +1,15 @@\n+error[E0597]: `x` does not live long enough\n+  --> $DIR/issue-61882-2.rs:6:14\n+   |\n+LL |         Self(&x);\n+   |              ^^\n+   |              |\n+   |              borrowed value does not live long enough\n+   |              requires that `x` is borrowed for `'static`\n+LL |\n+LL |     }\n+   |     - `x` dropped here while still borrowed\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "013398b4598a8fc58905d13eb289cac3f390fdce", "filename": "src/test/ui/issues/issue-61882.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dcd5b20177f7b8408ccc42869e9151f7cfd45686/src%2Ftest%2Fui%2Fissues%2Fissue-61882.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcd5b20177f7b8408ccc42869e9151f7cfd45686/src%2Ftest%2Fui%2Fissues%2Fissue-61882.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-61882.rs?ref=dcd5b20177f7b8408ccc42869e9151f7cfd45686", "patch": "@@ -0,0 +1,9 @@\n+struct A<T>(T);\n+\n+impl A<bool> {\n+    const B: A<u8> = Self(0);\n+    //~^ ERROR mismatched types\n+    //~| ERROR mismatched types\n+}\n+\n+fn main() {}"}, {"sha": "a14e1a4dd4d44aea6de4edb1b4b9a0ccd6c2fcea", "filename": "src/test/ui/issues/issue-61882.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/dcd5b20177f7b8408ccc42869e9151f7cfd45686/src%2Ftest%2Fui%2Fissues%2Fissue-61882.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dcd5b20177f7b8408ccc42869e9151f7cfd45686/src%2Ftest%2Fui%2Fissues%2Fissue-61882.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-61882.stderr?ref=dcd5b20177f7b8408ccc42869e9151f7cfd45686", "patch": "@@ -0,0 +1,21 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-61882.rs:4:27\n+   |\n+LL |     const B: A<u8> = Self(0);\n+   |                           ^ expected bool, found integer\n+   |\n+   = note: expected type `bool`\n+              found type `{integer}`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-61882.rs:4:22\n+   |\n+LL |     const B: A<u8> = Self(0);\n+   |                      ^^^^^^^ expected u8, found bool\n+   |\n+   = note: expected type `A<u8>`\n+              found type `A<bool>`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}