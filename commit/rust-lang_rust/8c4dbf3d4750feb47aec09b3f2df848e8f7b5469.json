{"sha": "8c4dbf3d4750feb47aec09b3f2df848e8f7b5469", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjNGRiZjNkNDc1MGZlYjQ3YWVjMDliM2YyZGY4NDhlOGY3YjU0Njk=", "commit": {"author": {"name": "Cameron Zwarich", "email": "zwarich@mozilla.com", "date": "2014-07-30T20:36:21Z"}, "committer": {"name": "Cameron Zwarich", "email": "zwarich@mozilla.com", "date": "2014-07-30T20:36:21Z"}, "message": "Add two helper functions for dealing with OwnedPtr paths", "tree": {"sha": "f06bbdc1390983fe010e04940acff86f9a276d38", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f06bbdc1390983fe010e04940acff86f9a276d38"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c4dbf3d4750feb47aec09b3f2df848e8f7b5469", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c4dbf3d4750feb47aec09b3f2df848e8f7b5469", "html_url": "https://github.com/rust-lang/rust/commit/8c4dbf3d4750feb47aec09b3f2df848e8f7b5469", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c4dbf3d4750feb47aec09b3f2df848e8f7b5469/comments", "author": null, "committer": null, "parents": [{"sha": "8da03d9771bc827eae713d16bca7bec4c5fe6a10", "url": "https://api.github.com/repos/rust-lang/rust/commits/8da03d9771bc827eae713d16bca7bec4c5fe6a10", "html_url": "https://github.com/rust-lang/rust/commit/8da03d9771bc827eae713d16bca7bec4c5fe6a10"}], "stats": {"total": 51, "additions": 51, "deletions": 0}, "files": [{"sha": "fd867393469ae62c53f95634328f1e9c2c5c1cb5", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/8c4dbf3d4750feb47aec09b3f2df848e8f7b5469/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c4dbf3d4750feb47aec09b3f2df848e8f7b5469/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=8c4dbf3d4750feb47aec09b3f2df848e8f7b5469", "patch": "@@ -28,6 +28,57 @@ use util::ppaux::Repr;\n \n use std::rc::Rc;\n \n+// FIXME (#16118): These functions are intended to allow the borrow checker to\n+// be less precise in its handling of Box while still allowing moves out of a\n+// Box. They should be removed when OwnedPtr is removed from LoanPath.\n+\n+fn owned_ptr_base_path<'a>(loan_path: &'a LoanPath) -> &'a LoanPath {\n+    //! Returns the base of the leftmost dereference of an OwnedPtr in\n+    //! `loan_path`. If there is no dereference of an OwnedPtr in `loan_path`,\n+    //! then it just returns `loan_path` itself.\n+\n+    return match owned_ptr_base_path_helper(loan_path) {\n+        Some(new_loan_path) => new_loan_path,\n+        None => loan_path.clone()\n+    };\n+\n+    fn owned_ptr_base_path_helper<'a>(loan_path: &'a LoanPath) -> Option<&'a LoanPath> {\n+        match *loan_path {\n+            LpVar(_) | LpUpvar(_) => None,\n+            LpExtend(ref lp_base, _, LpDeref(mc::OwnedPtr)) => {\n+                match owned_ptr_base_path_helper(&**lp_base) {\n+                    v @ Some(_) => v,\n+                    None => Some(&**lp_base)\n+                }\n+            }\n+            LpExtend(ref lp_base, _, _) => owned_ptr_base_path_helper(&**lp_base)\n+        }\n+    }\n+}\n+\n+fn owned_ptr_base_path_rc(loan_path: &Rc<LoanPath>) -> Rc<LoanPath> {\n+    //! The equivalent of `owned_ptr_base_path` for an &Rc<LoanPath> rather than\n+    //! a &LoanPath.\n+\n+    return match owned_ptr_base_path_helper(loan_path) {\n+        Some(new_loan_path) => new_loan_path,\n+        None => loan_path.clone()\n+    };\n+\n+    fn owned_ptr_base_path_helper(loan_path: &Rc<LoanPath>) -> Option<Rc<LoanPath>> {\n+        match **loan_path {\n+            LpVar(_) | LpUpvar(_) => None,\n+            LpExtend(ref lp_base, _, LpDeref(mc::OwnedPtr)) => {\n+                match owned_ptr_base_path_helper(lp_base) {\n+                    v @ Some(_) => v,\n+                    None => Some(lp_base.clone())\n+                }\n+            }\n+            LpExtend(ref lp_base, _, _) => owned_ptr_base_path_helper(lp_base)\n+        }\n+    }\n+}\n+\n struct CheckLoanCtxt<'a> {\n     bccx: &'a BorrowckCtxt<'a>,\n     dfcx_loans: &'a LoanDataFlow<'a>,"}]}