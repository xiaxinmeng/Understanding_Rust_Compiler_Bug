{"sha": "9df11ae83f8bfc06bc9bd1dc2132e344bc1ed0c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkZjExYWU4M2Y4YmZjMDZiYzliZDFkYzIxMzJlMzQ0YmMxZWQwYzc=", "commit": {"author": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-02-13T18:45:30Z"}, "committer": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-02-13T18:49:36Z"}, "message": "retabbing", "tree": {"sha": "96322dd2945f7ef07fffc844463a0cf546e89d05", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96322dd2945f7ef07fffc844463a0cf546e89d05"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9df11ae83f8bfc06bc9bd1dc2132e344bc1ed0c7", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9df11ae83f8bfc06bc9bd1dc2132e344bc1ed0c7", "html_url": "https://github.com/rust-lang/rust/commit/9df11ae83f8bfc06bc9bd1dc2132e344bc1ed0c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9df11ae83f8bfc06bc9bd1dc2132e344bc1ed0c7/comments", "author": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46d2be1bd4fed62e7d1d48fdc223b948eafc2728", "url": "https://api.github.com/repos/rust-lang/rust/commits/46d2be1bd4fed62e7d1d48fdc223b948eafc2728", "html_url": "https://github.com/rust-lang/rust/commit/46d2be1bd4fed62e7d1d48fdc223b948eafc2728"}], "stats": {"total": 119, "additions": 60, "deletions": 59}, "files": [{"sha": "acbe4d7fa23ef2d5d80ae39ac9758804328e18af", "filename": "src/libsyntax/ext/auto_encode.rs", "status": "modified", "additions": 60, "deletions": 59, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/9df11ae83f8bfc06bc9bd1dc2132e344bc1ed0c7/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9df11ae83f8bfc06bc9bd1dc2132e344bc1ed0c7/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fauto_encode.rs?ref=9df11ae83f8bfc06bc9bd1dc2132e344bc1ed0c7", "patch": "@@ -1189,87 +1189,88 @@ mod test {\n             self.add_to_log (CallToOther)\n         }\n     }\n-    \n+\n     pub impl Encoder for TestEncoder {\n         fn emit_nil(&self) { self.add_to_log(CallToEmitNil) }\n-        \n+\n         fn emit_uint(&self, +v: uint) {self.add_to_log(CallToEmitUint(v)); }\n         fn emit_u64(&self, +_v: u64) { self.add_unknown_to_log(); }\n-    fn emit_u32(&self, +_v: u32) { self.add_unknown_to_log(); }\n-    fn emit_u16(&self, +_v: u16) { self.add_unknown_to_log(); }\n-    fn emit_u8(&self, +_v: u8)   { self.add_unknown_to_log(); }\n+        fn emit_u32(&self, +_v: u32) { self.add_unknown_to_log(); }\n+        fn emit_u16(&self, +_v: u16) { self.add_unknown_to_log(); }\n+        fn emit_u8(&self, +_v: u8)   { self.add_unknown_to_log(); }\n \n-    fn emit_int(&self, +_v: int) { self.add_unknown_to_log(); }\n-    fn emit_i64(&self, +_v: i64) { self.add_unknown_to_log(); }\n-    fn emit_i32(&self, +_v: i32) { self.add_unknown_to_log(); }\n-    fn emit_i16(&self, +_v: i16) { self.add_unknown_to_log(); }\n-    fn emit_i8(&self, +_v: i8)   { self.add_unknown_to_log(); }\n+        fn emit_int(&self, +_v: int) { self.add_unknown_to_log(); }\n+        fn emit_i64(&self, +_v: i64) { self.add_unknown_to_log(); }\n+        fn emit_i32(&self, +_v: i32) { self.add_unknown_to_log(); }\n+        fn emit_i16(&self, +_v: i16) { self.add_unknown_to_log(); }\n+        fn emit_i8(&self, +_v: i8)   { self.add_unknown_to_log(); }\n \n-    fn emit_bool(&self, +_v: bool) { self.add_unknown_to_log(); }\n+        fn emit_bool(&self, +_v: bool) { self.add_unknown_to_log(); }\n \n-    fn emit_f64(&self, +_v: f64) { self.add_unknown_to_log(); }\n-    fn emit_f32(&self, +_v: f32) { self.add_unknown_to_log(); }\n-    fn emit_float(&self, +_v: float) { self.add_unknown_to_log(); }\n+        fn emit_f64(&self, +_v: f64) { self.add_unknown_to_log(); }\n+        fn emit_f32(&self, +_v: f32) { self.add_unknown_to_log(); }\n+        fn emit_float(&self, +_v: float) { self.add_unknown_to_log(); }\n \n-    fn emit_char(&self, +_v: char) { self.add_unknown_to_log(); }\n+        fn emit_char(&self, +_v: char) { self.add_unknown_to_log(); }\n \n-    fn emit_borrowed_str(&self, +_v: &str) { self.add_unknown_to_log(); }\n-    fn emit_owned_str(&self, +_v: &str) { self.add_unknown_to_log(); }\n-    fn emit_managed_str(&self, +_v: &str) { self.add_unknown_to_log(); }\n+        fn emit_borrowed_str(&self, +_v: &str) { self.add_unknown_to_log(); }\n+        fn emit_owned_str(&self, +_v: &str) { self.add_unknown_to_log(); }\n+        fn emit_managed_str(&self, +_v: &str) { self.add_unknown_to_log(); }\n \n-    fn emit_borrowed(&self, f: fn()) { self.add_unknown_to_log(); f() }\n-    fn emit_owned(&self, f: fn()) { self.add_unknown_to_log(); f() }\n-    fn emit_managed(&self, f: fn()) { self.add_unknown_to_log(); f() }\n+        fn emit_borrowed(&self, f: fn()) { self.add_unknown_to_log(); f() }\n+        fn emit_owned(&self, f: fn()) { self.add_unknown_to_log(); f() }\n+        fn emit_managed(&self, f: fn()) { self.add_unknown_to_log(); f() }\n \n-    fn emit_enum(&self, name: &str, f: fn()) {\n-        self.add_to_log(CallToEmitEnum(name.to_str())); f(); }\n+        fn emit_enum(&self, name: &str, f: fn()) {\n+            self.add_to_log(CallToEmitEnum(name.to_str())); f(); }\n \n-    fn emit_enum_variant(&self, name: &str, +id: uint, +cnt: uint, f: fn()) {\n-        self.add_to_log(CallToEmitEnumVariant (name.to_str(),id,cnt)); f();\n-    }\n+        fn emit_enum_variant(&self, name: &str, +id: uint,\n+                             +cnt: uint, f: fn()) {\n+            self.add_to_log(CallToEmitEnumVariant (name.to_str(),id,cnt));\n+            f();\n+        }\n \n-    fn emit_enum_variant_arg(&self, +idx: uint, f: fn()) {\n-        self.add_to_log(CallToEmitEnumVariantArg (idx)); f();\n-    }\n+        fn emit_enum_variant_arg(&self, +idx: uint, f: fn()) {\n+            self.add_to_log(CallToEmitEnumVariantArg (idx)); f();\n+        }\n \n-    fn emit_borrowed_vec(&self, +_len: uint, f: fn()) {\n-        self.add_unknown_to_log(); f();\n-    }\n+        fn emit_borrowed_vec(&self, +_len: uint, f: fn()) {\n+            self.add_unknown_to_log(); f();\n+        }\n \n-    fn emit_owned_vec(&self, +_len: uint, f: fn()) {\n-        self.add_unknown_to_log(); f();\n-    }\n-    fn emit_managed_vec(&self, +_len: uint, f: fn()) {\n-        self.add_unknown_to_log(); f();\n-    }\n-    fn emit_vec_elt(&self, +_idx: uint, f: fn()) {\n-        self.add_unknown_to_log(); f();\n-    }\n+        fn emit_owned_vec(&self, +_len: uint, f: fn()) {\n+            self.add_unknown_to_log(); f();\n+        }\n+        fn emit_managed_vec(&self, +_len: uint, f: fn()) {\n+            self.add_unknown_to_log(); f();\n+        }\n+        fn emit_vec_elt(&self, +_idx: uint, f: fn()) {\n+            self.add_unknown_to_log(); f();\n+        }\n \n-    fn emit_rec(&self, f: fn()) {\n-        self.add_unknown_to_log(); f();\n-    }\n-    fn emit_struct(&self, _name: &str, +_len: uint, f: fn()) {\n-        self.add_unknown_to_log(); f();\n-    }\n-    fn emit_field(&self, _name: &str, +_idx: uint, f: fn()) {\n-        self.add_unknown_to_log(); f();\n-    }\n-        \n-    fn emit_tup(&self, +_len: uint, f: fn()) {\n-        self.add_unknown_to_log(); f();\n-    }\n-    fn emit_tup_elt(&self, +_idx: uint, f: fn()) {\n-        self.add_unknown_to_log(); f();\n+        fn emit_rec(&self, f: fn()) {\n+            self.add_unknown_to_log(); f();\n+        }\n+        fn emit_struct(&self, _name: &str, +_len: uint, f: fn()) {\n+            self.add_unknown_to_log(); f();\n+        }\n+        fn emit_field(&self, _name: &str, +_idx: uint, f: fn()) {\n+            self.add_unknown_to_log(); f();\n+        }\n+\n+        fn emit_tup(&self, +_len: uint, f: fn()) {\n+            self.add_unknown_to_log(); f();\n+        }\n+        fn emit_tup_elt(&self, +_idx: uint, f: fn()) {\n+            self.add_unknown_to_log(); f();\n+        }\n     }\n-}\n \n-    \n+\n     #[auto_decode]\n     #[auto_encode]\n     struct Node {id: uint}\n \n-    \n     fn to_call_log (val: Encodable<TestEncoder>) -> ~[call] {\n         let mut te = TestEncoder {call_log: ~[]};\n         val.encode(&te);"}]}