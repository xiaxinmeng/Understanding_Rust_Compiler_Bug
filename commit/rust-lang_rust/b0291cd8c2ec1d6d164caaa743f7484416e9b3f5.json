{"sha": "b0291cd8c2ec1d6d164caaa743f7484416e9b3f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwMjkxY2Q4YzJlYzFkNmQxNjRjYWFhNzQzZjc0ODQ0MTZlOWIzZjU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-05T15:07:06Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-05T15:07:06Z"}, "message": "Range expr", "tree": {"sha": "57a2b21085bf0996d37c3f8d757f0332c5055a5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57a2b21085bf0996d37c3f8d757f0332c5055a5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0291cd8c2ec1d6d164caaa743f7484416e9b3f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0291cd8c2ec1d6d164caaa743f7484416e9b3f5", "html_url": "https://github.com/rust-lang/rust/commit/b0291cd8c2ec1d6d164caaa743f7484416e9b3f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0291cd8c2ec1d6d164caaa743f7484416e9b3f5/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80fa861cd688c8e7c92e27feaf6623ecfaa4901e", "url": "https://api.github.com/repos/rust-lang/rust/commits/80fa861cd688c8e7c92e27feaf6623ecfaa4901e", "html_url": "https://github.com/rust-lang/rust/commit/80fa861cd688c8e7c92e27feaf6623ecfaa4901e"}], "stats": {"total": 148, "additions": 140, "deletions": 8}, "files": [{"sha": "9e122091bf620b5d45b11ae2ce9dd918d8a00988", "filename": "src/grammar.ron", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b0291cd8c2ec1d6d164caaa743f7484416e9b3f5/src%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/b0291cd8c2ec1d6d164caaa743f7484416e9b3f5/src%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar.ron?ref=b0291cd8c2ec1d6d164caaa743f7484416e9b3f5", "patch": "@@ -163,6 +163,7 @@ Grammar(\n         \"DEREF_EXPR\",\n         \"NOT_EXPR\",\n \n+        \"RANGE_EXPR\", // just weird\n         \"BIN_EXPR\",\n \n "}, {"sha": "0312a757ab5ac0337f8590ddf7b8cd050e3ccc2e", "filename": "src/grammar/expressions/mod.rs", "status": "modified", "additions": 29, "deletions": 8, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/b0291cd8c2ec1d6d164caaa743f7484416e9b3f5/src%2Fgrammar%2Fexpressions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0291cd8c2ec1d6d164caaa743f7484416e9b3f5/src%2Fgrammar%2Fexpressions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Fexpressions%2Fmod.rs?ref=b0291cd8c2ec1d6d164caaa743f7484416e9b3f5", "patch": "@@ -44,6 +44,13 @@ enum Op {\n //     *x = 1 + 1;\n // }\n \n+// test range_binding_power\n+// fn foo() {\n+//     .. 1 + 1;\n+//     .. z = 2;\n+//     x = false .. 1 == 1;\n+// }\n+\n // test compound_ops\n // fn foo() {\n //     x += 1;\n@@ -52,10 +59,10 @@ enum Op {\n // }\n fn current_op(p: &Parser) -> (u8, Op) {\n     if p.at_compound2(L_ANGLE, EQ) {\n-        return (2, Op::Composite(LTEQ, 2));\n+        return (3, Op::Composite(LTEQ, 2));\n     }\n     if p.at_compound2(R_ANGLE, EQ) {\n-        return (2, Op::Composite(GTEQ, 2));\n+        return (3, Op::Composite(GTEQ, 2));\n     }\n     if p.at_compound2(PLUS, EQ) {\n         return (1, Op::Composite(PLUSEQ, 2));\n@@ -66,17 +73,18 @@ fn current_op(p: &Parser) -> (u8, Op) {\n \n     let bp = match p.current() {\n         EQ => 1,\n-        EQEQ | NEQ => 2,\n-        MINUS | PLUS => 3,\n-        STAR | SLASH => 4,\n+        DOTDOT => 2,\n+        EQEQ | NEQ => 3,\n+        MINUS | PLUS => 4,\n+        STAR | SLASH => 5,\n         _ => 0,\n     };\n     (bp, Op::Simple)\n }\n \n // Parses expression with binding power of at least bp.\n fn expr_bp(p: &mut Parser, r: Restrictions, bp: u8) {\n-    let mut lhs = match unary_expr(p, r) {\n+    let mut lhs = match lhs(p, r) {\n         Some(lhs) => lhs,\n         None => return,\n     };\n@@ -102,7 +110,7 @@ const UNARY_EXPR_FIRST: TokenSet =\n         atom::ATOM_EXPR_FIRST,\n     ];\n \n-fn unary_expr(p: &mut Parser, r: Restrictions) -> Option<CompletedMarker> {\n+fn lhs(p: &mut Parser, r: Restrictions) -> Option<CompletedMarker> {\n     let m;\n     let kind = match p.current() {\n         // test ref_expr\n@@ -134,12 +142,18 @@ fn unary_expr(p: &mut Parser, r: Restrictions) -> Option<CompletedMarker> {\n             p.bump();\n             NOT_EXPR\n         }\n+        DOTDOT => {\n+            m = p.start();\n+            p.bump();\n+            expr_bp(p, r, 2);\n+            return Some(m.complete(p, RANGE_EXPR));\n+        }\n         _ => {\n             let lhs = atom::atom_expr(p, r)?;\n             return Some(postfix_expr(p, lhs));\n         }\n     };\n-    unary_expr(p, r);\n+    expr_bp(p, r, 255);\n     Some(m.complete(p, kind))\n }\n \n@@ -154,6 +168,13 @@ fn postfix_expr(p: &mut Parser, mut lhs: CompletedMarker) -> CompletedMarker {\n                 field_expr(p, lhs)\n             },\n             DOT if p.nth(1) == INT_NUMBER => field_expr(p, lhs),\n+            // test postfix_range\n+            // fn foo() { let x = 1..; }\n+            DOTDOT if !EXPR_FIRST.contains(p.nth(1)) => {\n+                let m = lhs.precede(p);\n+                p.bump();\n+                m.complete(p, RANGE_EXPR)\n+            }\n             QUESTION => try_expr(p, lhs),\n             _ => break,\n         }"}, {"sha": "8db006e5439ca55fe5b069fb1fe01f08fd1cc716", "filename": "src/syntax_kinds/generated.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0291cd8c2ec1d6d164caaa743f7484416e9b3f5/src%2Fsyntax_kinds%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0291cd8c2ec1d6d164caaa743f7484416e9b3f5/src%2Fsyntax_kinds%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsyntax_kinds%2Fgenerated.rs?ref=b0291cd8c2ec1d6d164caaa743f7484416e9b3f5", "patch": "@@ -148,6 +148,7 @@ pub enum SyntaxKind {\n     REF_EXPR,\n     DEREF_EXPR,\n     NOT_EXPR,\n+    RANGE_EXPR,\n     BIN_EXPR,\n     EXTERN_BLOCK_EXPR,\n     ENUM_VARIANT,\n@@ -375,6 +376,7 @@ impl SyntaxKind {\n             REF_EXPR => &SyntaxInfo { name: \"REF_EXPR\" },\n             DEREF_EXPR => &SyntaxInfo { name: \"DEREF_EXPR\" },\n             NOT_EXPR => &SyntaxInfo { name: \"NOT_EXPR\" },\n+            RANGE_EXPR => &SyntaxInfo { name: \"RANGE_EXPR\" },\n             BIN_EXPR => &SyntaxInfo { name: \"BIN_EXPR\" },\n             EXTERN_BLOCK_EXPR => &SyntaxInfo { name: \"EXTERN_BLOCK_EXPR\" },\n             ENUM_VARIANT => &SyntaxInfo { name: \"ENUM_VARIANT\" },"}, {"sha": "259ec31e273631d1d558b77b9972aa6ba67bee2d", "filename": "tests/data/parser/inline/0082_range_binding_power.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b0291cd8c2ec1d6d164caaa743f7484416e9b3f5/tests%2Fdata%2Fparser%2Finline%2F0082_range_binding_power.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0291cd8c2ec1d6d164caaa743f7484416e9b3f5/tests%2Fdata%2Fparser%2Finline%2F0082_range_binding_power.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0082_range_binding_power.rs?ref=b0291cd8c2ec1d6d164caaa743f7484416e9b3f5", "patch": "@@ -0,0 +1,5 @@\n+fn foo() {\n+    .. 1 + 1;\n+    .. z = 2;\n+    x = false .. 1 == 1;\n+}"}, {"sha": "0b7bfd56af3b498210616a25c24084beae8747cc", "filename": "tests/data/parser/inline/0082_range_binding_power.txt", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/b0291cd8c2ec1d6d164caaa743f7484416e9b3f5/tests%2Fdata%2Fparser%2Finline%2F0082_range_binding_power.txt", "raw_url": "https://github.com/rust-lang/rust/raw/b0291cd8c2ec1d6d164caaa743f7484416e9b3f5/tests%2Fdata%2Fparser%2Finline%2F0082_range_binding_power.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0082_range_binding_power.txt?ref=b0291cd8c2ec1d6d164caaa743f7484416e9b3f5", "patch": "@@ -0,0 +1,72 @@\n+FILE@[0; 66)\n+  FN_ITEM@[0; 66)\n+    FN_KW@[0; 2)\n+    NAME@[2; 6)\n+      WHITESPACE@[2; 3)\n+      IDENT@[3; 6) \"foo\"\n+    PARAM_LIST@[6; 9)\n+      L_PAREN@[6; 7)\n+      R_PAREN@[7; 8)\n+      WHITESPACE@[8; 9)\n+    BLOCK_EXPR@[9; 66)\n+      L_CURLY@[9; 10)\n+      EXPR_STMT@[10; 29)\n+        RANGE_EXPR@[10; 23)\n+          WHITESPACE@[10; 15)\n+          DOTDOT@[15; 17)\n+          BIN_EXPR@[17; 23)\n+            LITERAL@[17; 20)\n+              WHITESPACE@[17; 18)\n+              INT_NUMBER@[18; 19) \"1\"\n+              WHITESPACE@[19; 20)\n+            PLUS@[20; 21)\n+            LITERAL@[21; 23)\n+              WHITESPACE@[21; 22)\n+              INT_NUMBER@[22; 23) \"1\"\n+        SEMI@[23; 24)\n+        WHITESPACE@[24; 29)\n+      EXPR_STMT@[29; 43)\n+        BIN_EXPR@[29; 37)\n+          RANGE_EXPR@[29; 34)\n+            DOTDOT@[29; 31)\n+            PATH_EXPR@[31; 34)\n+              PATH@[31; 34)\n+                PATH_SEGMENT@[31; 34)\n+                  NAME_REF@[31; 34)\n+                    WHITESPACE@[31; 32)\n+                    IDENT@[32; 33) \"z\"\n+                    WHITESPACE@[33; 34)\n+          EQ@[34; 35)\n+          LITERAL@[35; 37)\n+            WHITESPACE@[35; 36)\n+            INT_NUMBER@[36; 37) \"2\"\n+        SEMI@[37; 38)\n+        WHITESPACE@[38; 43)\n+      EXPR_STMT@[43; 64)\n+        BIN_EXPR@[43; 62)\n+          PATH_EXPR@[43; 45)\n+            PATH@[43; 45)\n+              PATH_SEGMENT@[43; 45)\n+                NAME_REF@[43; 45)\n+                  IDENT@[43; 44) \"x\"\n+                  WHITESPACE@[44; 45)\n+          EQ@[45; 46)\n+          BIN_EXPR@[46; 62)\n+            LITERAL@[46; 53)\n+              WHITESPACE@[46; 47)\n+              FALSE_KW@[47; 52)\n+              WHITESPACE@[52; 53)\n+            DOTDOT@[53; 55)\n+            BIN_EXPR@[55; 62)\n+              LITERAL@[55; 58)\n+                WHITESPACE@[55; 56)\n+                INT_NUMBER@[56; 57) \"1\"\n+                WHITESPACE@[57; 58)\n+              EQEQ@[58; 60)\n+              LITERAL@[60; 62)\n+                WHITESPACE@[60; 61)\n+                INT_NUMBER@[61; 62) \"1\"\n+        SEMI@[62; 63)\n+        WHITESPACE@[63; 64)\n+      R_CURLY@[64; 65)\n+      WHITESPACE@[65; 66)"}, {"sha": "c39fe8e68732968d6755ef3bd4418106cc401f9e", "filename": "tests/data/parser/inline/0083_postfix_range.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b0291cd8c2ec1d6d164caaa743f7484416e9b3f5/tests%2Fdata%2Fparser%2Finline%2F0083_postfix_range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0291cd8c2ec1d6d164caaa743f7484416e9b3f5/tests%2Fdata%2Fparser%2Finline%2F0083_postfix_range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0083_postfix_range.rs?ref=b0291cd8c2ec1d6d164caaa743f7484416e9b3f5", "patch": "@@ -0,0 +1 @@\n+fn foo() { let x = 1..; }"}, {"sha": "6a77e3a71fe09f8db72d0fbc31ad4131ccb353d4", "filename": "tests/data/parser/inline/0083_postfix_range.txt", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b0291cd8c2ec1d6d164caaa743f7484416e9b3f5/tests%2Fdata%2Fparser%2Finline%2F0083_postfix_range.txt", "raw_url": "https://github.com/rust-lang/rust/raw/b0291cd8c2ec1d6d164caaa743f7484416e9b3f5/tests%2Fdata%2Fparser%2Finline%2F0083_postfix_range.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0083_postfix_range.txt?ref=b0291cd8c2ec1d6d164caaa743f7484416e9b3f5", "patch": "@@ -0,0 +1,30 @@\n+FILE@[0; 26)\n+  FN_ITEM@[0; 26)\n+    FN_KW@[0; 2)\n+    NAME@[2; 6)\n+      WHITESPACE@[2; 3)\n+      IDENT@[3; 6) \"foo\"\n+    PARAM_LIST@[6; 9)\n+      L_PAREN@[6; 7)\n+      R_PAREN@[7; 8)\n+      WHITESPACE@[8; 9)\n+    BLOCK_EXPR@[9; 26)\n+      L_CURLY@[9; 10)\n+      LET_STMT@[10; 24)\n+        WHITESPACE@[10; 11)\n+        LET_KW@[11; 14)\n+        BIND_PAT@[14; 17)\n+          NAME@[14; 17)\n+            WHITESPACE@[14; 15)\n+            IDENT@[15; 16) \"x\"\n+            WHITESPACE@[16; 17)\n+        EQ@[17; 18)\n+        RANGE_EXPR@[18; 22)\n+          LITERAL@[18; 20)\n+            WHITESPACE@[18; 19)\n+            INT_NUMBER@[19; 20) \"1\"\n+          DOTDOT@[20; 22)\n+        SEMI@[22; 23)\n+        WHITESPACE@[23; 24)\n+      R_CURLY@[24; 25)\n+      WHITESPACE@[25; 26)"}]}