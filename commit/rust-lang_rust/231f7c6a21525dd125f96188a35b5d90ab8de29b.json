{"sha": "231f7c6a21525dd125f96188a35b5d90ab8de29b", "node_id": "C_kwDOAAsO6NoAKDIzMWY3YzZhMjE1MjVkZDEyNWY5NjE4OGEzNWI1ZDkwYWI4ZGUyOWI", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-07-31T10:22:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-31T10:22:22Z"}, "message": "Merge pull request #1252 from afonso360/tests-rs\n\nMove test script to y.rs", "tree": {"sha": "e23aec138bec8656302e306ef8797c81410b8ebc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e23aec138bec8656302e306ef8797c81410b8ebc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/231f7c6a21525dd125f96188a35b5d90ab8de29b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi5lfeCRBK7hj4Ov3rIwAApXUIAEUKgyTO9s90/XgL2SFi/www\nmGLuk+LBb6+3oalhtdf2BLHLnS+yVhDgcKKSh7BCiO/g2iZiOlzNJVHs6ciDMzdf\n2KFHHIRMnBeljkZ8VTugXFi3svGaZXcbGBWI3TZ206YIW9qndmtdZtbAS0qT1SHQ\nIcXZ2DvXe4qBt+nPXCoK8OLSGx24/31reKVvIJJbLrJKXo+oYn2EDUWUbPfC01re\nrzx8xk4XsW2XbkXTOD11NbjYlWxN4mQpv+sSkYzl+tVTdlZh+JSRDLu7QJsg1DqT\nM1VB4lRzCiap3kTTD2VRvZN4mnf3hMR1vQYYJoTB5mQzx5ZroFRDs0fM2z1u624=\n=ERPc\n-----END PGP SIGNATURE-----\n", "payload": "tree e23aec138bec8656302e306ef8797c81410b8ebc\nparent 49e773183e504f4f73cfcb7dfd5a397b8c94be1e\nparent 0db9094231138fb29895fc181d534a2a547d168a\nauthor bjorn3 <17426603+bjorn3@users.noreply.github.com> 1659262942 +0200\ncommitter GitHub <noreply@github.com> 1659262942 +0200\n\nMerge pull request #1252 from afonso360/tests-rs\n\nMove test script to y.rs"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/231f7c6a21525dd125f96188a35b5d90ab8de29b", "html_url": "https://github.com/rust-lang/rust/commit/231f7c6a21525dd125f96188a35b5d90ab8de29b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/231f7c6a21525dd125f96188a35b5d90ab8de29b/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49e773183e504f4f73cfcb7dfd5a397b8c94be1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/49e773183e504f4f73cfcb7dfd5a397b8c94be1e", "html_url": "https://github.com/rust-lang/rust/commit/49e773183e504f4f73cfcb7dfd5a397b8c94be1e"}, {"sha": "0db9094231138fb29895fc181d534a2a547d168a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0db9094231138fb29895fc181d534a2a547d168a", "html_url": "https://github.com/rust-lang/rust/commit/0db9094231138fb29895fc181d534a2a547d168a"}], "stats": {"total": 968, "additions": 730, "deletions": 238}, "files": [{"sha": "732edd66196d7de4c3d8d18e0c944e05d279906c", "filename": ".cirrus.yml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/231f7c6a21525dd125f96188a35b5d90ab8de29b/.cirrus.yml", "raw_url": "https://github.com/rust-lang/rust/raw/231f7c6a21525dd125f96188a35b5d90ab8de29b/.cirrus.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.cirrus.yml?ref=231f7c6a21525dd125f96188a35b5d90ab8de29b", "patch": "@@ -22,4 +22,4 @@ task:\n     - # Reduce amount of benchmark runs as they are slow\n     - export COMPILE_RUNS=2\n     - export RUN_RUNS=2\n-    - ./test.sh\n+    - ./y.rs test"}, {"sha": "e8897e9ae81454a01145a9b4343f66cafdb00565", "filename": ".github/workflows/main.yml", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/231f7c6a21525dd125f96188a35b5d90ab8de29b/.github%2Fworkflows%2Fmain.yml", "raw_url": "https://github.com/rust-lang/rust/raw/231f7c6a21525dd125f96188a35b5d90ab8de29b/.github%2Fworkflows%2Fmain.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fmain.yml?ref=231f7c6a21525dd125f96188a35b5d90ab8de29b", "patch": "@@ -103,7 +103,7 @@ jobs:\n         # Enable extra checks\n         export CG_CLIF_ENABLE_VERIFIER=1\n \n-        ./test.sh\n+        ./y.rs test\n \n     - name: Package prebuilt cg_clif\n       run: tar cvfJ cg_clif.tar.xz build\n@@ -162,14 +162,14 @@ jobs:\n       #name: Test\n       run: |\n         # Enable backtraces for easier debugging\n-        #export RUST_BACKTRACE=1\n+        #$Env:RUST_BACKTRACE=1\n \n         # Reduce amount of benchmark runs as they are slow\n-        #export COMPILE_RUNS=2\n-        #export RUN_RUNS=2\n+        #$Env:COMPILE_RUNS=2\n+        #$Env:RUN_RUNS=2\n \n         # Enable extra checks\n-        #export CG_CLIF_ENABLE_VERIFIER=1\n+        #$Env:CG_CLIF_ENABLE_VERIFIER=1\n \n         ./y.exe build\n "}, {"sha": "38dd5b260638eea59d79f8c801e5f2e10a568a07", "filename": ".gitignore", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/231f7c6a21525dd125f96188a35b5d90ab8de29b/.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/231f7c6a21525dd125f96188a35b5d90ab8de29b/.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitignore?ref=231f7c6a21525dd125f96188a35b5d90ab8de29b", "patch": "@@ -8,6 +8,8 @@ perf.data.old\n *.string*\n /y.bin\n /y.bin.dSYM\n+/y.exe\n+/y.pdb\n /build\n /build_sysroot/sysroot_src\n /build_sysroot/compiler-builtins"}, {"sha": "7e205b0fd0b3b85dab07cb83a620a56fd256a233", "filename": "build_system/build_sysroot.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/231f7c6a21525dd125f96188a35b5d90ab8de29b/build_system%2Fbuild_sysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/231f7c6a21525dd125f96188a35b5d90ab8de29b/build_system%2Fbuild_sysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fbuild_sysroot.rs?ref=231f7c6a21525dd125f96188a35b5d90ab8de29b", "patch": "@@ -2,18 +2,20 @@ use std::fs;\n use std::path::{Path, PathBuf};\n use std::process::{self, Command};\n \n-use super::rustc_info::{get_file_name, get_rustc_version};\n+use super::rustc_info::{get_file_name, get_rustc_version, get_wrapper_file_name};\n use super::utils::{spawn_and_wait, try_hard_link};\n use super::SysrootKind;\n \n pub(crate) fn build_sysroot(\n     channel: &str,\n     sysroot_kind: SysrootKind,\n     target_dir: &Path,\n-    cg_clif_build_dir: PathBuf,\n+    cg_clif_build_dir: &Path,\n     host_triple: &str,\n     target_triple: &str,\n ) {\n+    eprintln!(\"[BUILD] sysroot {:?}\", sysroot_kind);\n+\n     if target_dir.exists() {\n         fs::remove_dir_all(target_dir).unwrap();\n     }\n@@ -35,11 +37,13 @@ pub(crate) fn build_sysroot(\n \n     // Build and copy rustc and cargo wrappers\n     for wrapper in [\"rustc-clif\", \"cargo-clif\"] {\n+        let wrapper_name = get_wrapper_file_name(wrapper, \"bin\");\n+\n         let mut build_cargo_wrapper_cmd = Command::new(\"rustc\");\n         build_cargo_wrapper_cmd\n             .arg(PathBuf::from(\"scripts\").join(format!(\"{wrapper}.rs\")))\n             .arg(\"-o\")\n-            .arg(target_dir.join(wrapper))\n+            .arg(target_dir.join(wrapper_name))\n             .arg(\"-g\");\n         spawn_and_wait(build_cargo_wrapper_cmd);\n     }"}, {"sha": "8c7d05993a51b9dd1d33a33e96c178efb4b02c60", "filename": "build_system/mod.rs", "status": "modified", "additions": 31, "deletions": 10, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/231f7c6a21525dd125f96188a35b5d90ab8de29b/build_system%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/231f7c6a21525dd125f96188a35b5d90ab8de29b/build_system%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fmod.rs?ref=231f7c6a21525dd125f96188a35b5d90ab8de29b", "patch": "@@ -7,6 +7,7 @@ mod build_sysroot;\n mod config;\n mod prepare;\n mod rustc_info;\n+mod tests;\n mod utils;\n \n fn usage() {\n@@ -15,6 +16,9 @@ fn usage() {\n     eprintln!(\n         \"  ./y.rs build [--debug] [--sysroot none|clif|llvm] [--target-dir DIR] [--no-unstable-features]\"\n     );\n+    eprintln!(\n+        \"  ./y.rs test [--debug] [--sysroot none|clif|llvm] [--target-dir DIR] [--no-unstable-features]\"\n+    );\n }\n \n macro_rules! arg_error {\n@@ -25,11 +29,13 @@ macro_rules! arg_error {\n     }};\n }\n \n+#[derive(PartialEq, Debug)]\n enum Command {\n     Build,\n+    Test,\n }\n \n-#[derive(Copy, Clone)]\n+#[derive(Copy, Clone, Debug)]\n pub(crate) enum SysrootKind {\n     None,\n     Clif,\n@@ -46,12 +52,13 @@ pub fn main() {\n     let command = match args.next().as_deref() {\n         Some(\"prepare\") => {\n             if args.next().is_some() {\n-                arg_error!(\"./x.rs prepare doesn't expect arguments\");\n+                arg_error!(\"./y.rs prepare doesn't expect arguments\");\n             }\n             prepare::prepare();\n             process::exit(0);\n         }\n         Some(\"build\") => Command::Build,\n+        Some(\"test\") => Command::Test,\n         Some(flag) if flag.starts_with('-') => arg_error!(\"Expected command found flag {}\", flag),\n         Some(command) => arg_error!(\"Unknown command {}\", command),\n         None => {\n@@ -117,12 +124,26 @@ pub fn main() {\n \n     let cg_clif_build_dir =\n         build_backend::build_backend(channel, &host_triple, use_unstable_features);\n-    build_sysroot::build_sysroot(\n-        channel,\n-        sysroot_kind,\n-        &target_dir,\n-        cg_clif_build_dir,\n-        &host_triple,\n-        &target_triple,\n-    );\n+    match command {\n+        Command::Test => {\n+            tests::run_tests(\n+                channel,\n+                sysroot_kind,\n+                &target_dir,\n+                &cg_clif_build_dir,\n+                &host_triple,\n+                &target_triple,\n+            );\n+        }\n+        Command::Build => {\n+            build_sysroot::build_sysroot(\n+                channel,\n+                sysroot_kind,\n+                &target_dir,\n+                &cg_clif_build_dir,\n+                &host_triple,\n+                &target_triple,\n+            );\n+        }\n+    }\n }"}, {"sha": "7e0fd182d984a9a1111c7a90a3caf0f8140980ae", "filename": "build_system/prepare.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/231f7c6a21525dd125f96188a35b5d90ab8de29b/build_system%2Fprepare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/231f7c6a21525dd125f96188a35b5d90ab8de29b/build_system%2Fprepare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fprepare.rs?ref=231f7c6a21525dd125f96188a35b5d90ab8de29b", "patch": "@@ -50,8 +50,7 @@ pub(crate) fn prepare() {\n     spawn_and_wait(build_cmd);\n     fs::copy(\n         Path::new(\"simple-raytracer/target/debug\").join(get_file_name(\"main\", \"bin\")),\n-        // FIXME use get_file_name here too once testing is migrated to rust\n-        \"simple-raytracer/raytracer_cg_llvm\",\n+        Path::new(\"simple-raytracer\").join(get_file_name(\"raytracer_cg_llvm\", \"bin\")),\n     )\n     .unwrap();\n }"}, {"sha": "913b589afcc87f658510195969fd03aef5d683e2", "filename": "build_system/rustc_info.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/231f7c6a21525dd125f96188a35b5d90ab8de29b/build_system%2Frustc_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/231f7c6a21525dd125f96188a35b5d90ab8de29b/build_system%2Frustc_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Frustc_info.rs?ref=231f7c6a21525dd125f96188a35b5d90ab8de29b", "patch": "@@ -63,3 +63,12 @@ pub(crate) fn get_file_name(crate_name: &str, crate_type: &str) -> String {\n     assert!(file_name.contains(crate_name));\n     file_name\n }\n+\n+/// Similar to `get_file_name`, but converts any dashes (`-`) in the `crate_name` to\n+/// underscores (`_`). This is specially made for the the rustc and cargo wrappers\n+/// which have a dash in the name, and that is not allowed in a crate name.\n+pub(crate) fn get_wrapper_file_name(crate_name: &str, crate_type: &str) -> String {\n+    let crate_name = crate_name.replace('-', \"_\");\n+    let wrapper_name = get_file_name(&crate_name, crate_type);\n+    wrapper_name.replace('_', \"-\")\n+}"}, {"sha": "3f225b4efa2b11a7121bf275c94cdda3b0c64121", "filename": "build_system/tests.rs", "status": "added", "additions": 618, "deletions": 0, "changes": 618, "blob_url": "https://github.com/rust-lang/rust/blob/231f7c6a21525dd125f96188a35b5d90ab8de29b/build_system%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/231f7c6a21525dd125f96188a35b5d90ab8de29b/build_system%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Ftests.rs?ref=231f7c6a21525dd125f96188a35b5d90ab8de29b", "patch": "@@ -0,0 +1,618 @@\n+use super::build_sysroot;\n+use super::config;\n+use super::rustc_info::get_wrapper_file_name;\n+use super::utils::{spawn_and_wait, spawn_and_wait_with_input};\n+use build_system::SysrootKind;\n+use std::env;\n+use std::ffi::OsStr;\n+use std::fs;\n+use std::path::{Path, PathBuf};\n+use std::process::Command;\n+\n+struct TestCase {\n+    config: &'static str,\n+    func: &'static dyn Fn(&TestRunner),\n+}\n+\n+impl TestCase {\n+    const fn new(config: &'static str, func: &'static dyn Fn(&TestRunner)) -> Self {\n+        Self { config, func }\n+    }\n+}\n+\n+const NO_SYSROOT_SUITE: &[TestCase] = &[\n+    TestCase::new(\"build.mini_core\", &|runner| {\n+        runner.run_rustc([\n+            \"example/mini_core.rs\",\n+            \"--crate-name\",\n+            \"mini_core\",\n+            \"--crate-type\",\n+            \"lib,dylib\",\n+            \"--target\",\n+            &runner.target_triple,\n+        ]);\n+    }),\n+    TestCase::new(\"build.example\", &|runner| {\n+        runner.run_rustc([\n+            \"example/example.rs\",\n+            \"--crate-type\",\n+            \"lib\",\n+            \"--target\",\n+            &runner.target_triple,\n+        ]);\n+    }),\n+    TestCase::new(\"jit.mini_core_hello_world\", &|runner| {\n+        let mut jit_cmd = runner.rustc_command([\n+            \"-Zunstable-options\",\n+            \"-Cllvm-args=mode=jit\",\n+            \"-Cprefer-dynamic\",\n+            \"example/mini_core_hello_world.rs\",\n+            \"--cfg\",\n+            \"jit\",\n+            \"--target\",\n+            &runner.host_triple,\n+        ]);\n+        jit_cmd.env(\"CG_CLIF_JIT_ARGS\", \"abc bcd\");\n+        spawn_and_wait(jit_cmd);\n+\n+        eprintln!(\"[JIT-lazy] mini_core_hello_world\");\n+        let mut jit_cmd = runner.rustc_command([\n+            \"-Zunstable-options\",\n+            \"-Cllvm-args=mode=jit-lazy\",\n+            \"-Cprefer-dynamic\",\n+            \"example/mini_core_hello_world.rs\",\n+            \"--cfg\",\n+            \"jit\",\n+            \"--target\",\n+            &runner.host_triple,\n+        ]);\n+        jit_cmd.env(\"CG_CLIF_JIT_ARGS\", \"abc bcd\");\n+        spawn_and_wait(jit_cmd);\n+    }),\n+    TestCase::new(\"aot.mini_core_hello_world\", &|runner| {\n+        runner.run_rustc([\n+            \"example/mini_core_hello_world.rs\",\n+            \"--crate-name\",\n+            \"mini_core_hello_world\",\n+            \"--crate-type\",\n+            \"bin\",\n+            \"-g\",\n+            \"--target\",\n+            &runner.target_triple,\n+        ]);\n+        runner.run_out_command(\"mini_core_hello_world\", [\"abc\", \"bcd\"]);\n+    }),\n+];\n+\n+const BASE_SYSROOT_SUITE: &[TestCase] = &[\n+    TestCase::new(\"aot.arbitrary_self_types_pointers_and_wrappers\", &|runner| {\n+        runner.run_rustc([\n+            \"example/arbitrary_self_types_pointers_and_wrappers.rs\",\n+            \"--crate-name\",\n+            \"arbitrary_self_types_pointers_and_wrappers\",\n+            \"--crate-type\",\n+            \"bin\",\n+            \"--target\",\n+            &runner.target_triple,\n+        ]);\n+        runner.run_out_command(\"arbitrary_self_types_pointers_and_wrappers\", []);\n+    }),\n+    TestCase::new(\"aot.issue_91827_extern_types\", &|runner| {\n+        runner.run_rustc([\n+            \"example/issue-91827-extern-types.rs\",\n+            \"--crate-name\",\n+            \"issue_91827_extern_types\",\n+            \"--crate-type\",\n+            \"bin\",\n+            \"--target\",\n+            &runner.target_triple,\n+        ]);\n+        runner.run_out_command(\"issue_91827_extern_types\", []);\n+    }),\n+    TestCase::new(\"build.alloc_system\", &|runner| {\n+        runner.run_rustc([\n+            \"example/alloc_system.rs\",\n+            \"--crate-type\",\n+            \"lib\",\n+            \"--target\",\n+            &runner.target_triple,\n+        ]);\n+    }),\n+    TestCase::new(\"aot.alloc_example\", &|runner| {\n+        runner.run_rustc([\n+            \"example/alloc_example.rs\",\n+            \"--crate-type\",\n+            \"bin\",\n+            \"--target\",\n+            &runner.target_triple,\n+        ]);\n+        runner.run_out_command(\"alloc_example\", []);\n+    }),\n+    TestCase::new(\"jit.std_example\", &|runner| {\n+        runner.run_rustc([\n+            \"-Zunstable-options\",\n+            \"-Cllvm-args=mode=jit\",\n+            \"-Cprefer-dynamic\",\n+            \"example/std_example.rs\",\n+            \"--target\",\n+            &runner.host_triple,\n+        ]);\n+\n+        eprintln!(\"[JIT-lazy] std_example\");\n+        runner.run_rustc([\n+            \"-Zunstable-options\",\n+            \"-Cllvm-args=mode=jit-lazy\",\n+            \"-Cprefer-dynamic\",\n+            \"example/std_example.rs\",\n+            \"--target\",\n+            &runner.host_triple,\n+        ]);\n+    }),\n+    TestCase::new(\"aot.std_example\", &|runner| {\n+        runner.run_rustc([\n+            \"example/std_example.rs\",\n+            \"--crate-type\",\n+            \"bin\",\n+            \"--target\",\n+            &runner.target_triple,\n+        ]);\n+        runner.run_out_command(\"std_example\", [\"arg\"]);\n+    }),\n+    TestCase::new(\"aot.dst_field_align\", &|runner| {\n+        runner.run_rustc([\n+            \"example/dst-field-align.rs\",\n+            \"--crate-name\",\n+            \"dst_field_align\",\n+            \"--crate-type\",\n+            \"bin\",\n+            \"--target\",\n+            &runner.target_triple,\n+        ]);\n+        runner.run_out_command(\"dst_field_align\", []);\n+    }),\n+    TestCase::new(\"aot.subslice-patterns-const-eval\", &|runner| {\n+        runner.run_rustc([\n+            \"example/subslice-patterns-const-eval.rs\",\n+            \"--crate-type\",\n+            \"bin\",\n+            \"-Cpanic=abort\",\n+            \"--target\",\n+            &runner.target_triple,\n+        ]);\n+        runner.run_out_command(\"subslice-patterns-const-eval\", []);\n+    }),\n+    TestCase::new(\"aot.track-caller-attribute\", &|runner| {\n+        runner.run_rustc([\n+            \"example/track-caller-attribute.rs\",\n+            \"--crate-type\",\n+            \"bin\",\n+            \"-Cpanic=abort\",\n+            \"--target\",\n+            &runner.target_triple,\n+        ]);\n+        runner.run_out_command(\"track-caller-attribute\", []);\n+    }),\n+    TestCase::new(\"aot.float-minmax-pass\", &|runner| {\n+        runner.run_rustc([\n+            \"example/float-minmax-pass.rs\",\n+            \"--crate-type\",\n+            \"bin\",\n+            \"-Cpanic=abort\",\n+            \"--target\",\n+            &runner.target_triple,\n+        ]);\n+        runner.run_out_command(\"float-minmax-pass\", []);\n+    }),\n+    TestCase::new(\"aot.mod_bench\", &|runner| {\n+        runner.run_rustc([\n+            \"example/mod_bench.rs\",\n+            \"--crate-type\",\n+            \"bin\",\n+            \"--target\",\n+            &runner.target_triple,\n+        ]);\n+        runner.run_out_command(\"mod_bench\", []);\n+    }),\n+];\n+\n+const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n+    TestCase::new(\"test.rust-random/rand\", &|runner| {\n+        runner.in_dir([\"rand\"], |runner| {\n+            runner.run_cargo([\"clean\"]);\n+\n+            if runner.host_triple == runner.target_triple {\n+                eprintln!(\"[TEST] rust-random/rand\");\n+                runner.run_cargo([\"test\", \"--workspace\"]);\n+            } else {\n+                eprintln!(\"[AOT] rust-random/rand\");\n+                runner.run_cargo([\n+                    \"build\",\n+                    \"--workspace\",\n+                    \"--target\",\n+                    &runner.target_triple,\n+                    \"--tests\",\n+                ]);\n+            }\n+        });\n+    }),\n+    TestCase::new(\"bench.simple-raytracer\", &|runner| {\n+        runner.in_dir([\"simple-raytracer\"], |runner| {\n+            let run_runs = env::var(\"RUN_RUNS\").unwrap_or(\"10\".to_string());\n+\n+            if runner.host_triple == runner.target_triple {\n+                eprintln!(\"[BENCH COMPILE] ebobby/simple-raytracer\");\n+                let mut bench_compile = Command::new(\"hyperfine\");\n+                bench_compile.arg(\"--runs\");\n+                bench_compile.arg(&run_runs);\n+                bench_compile.arg(\"--warmup\");\n+                bench_compile.arg(\"1\");\n+                bench_compile.arg(\"--prepare\");\n+                bench_compile.arg(format!(\"{:?}\", runner.cargo_command([\"clean\"])));\n+\n+                if cfg!(windows) {\n+                    bench_compile.arg(\"cmd /C \\\"set RUSTFLAGS= && cargo build\\\"\");\n+                } else {\n+                    bench_compile.arg(\"RUSTFLAGS='' cargo build\");\n+                }\n+\n+                bench_compile.arg(format!(\"{:?}\", runner.cargo_command([\"build\"])));\n+                spawn_and_wait(bench_compile);\n+\n+                eprintln!(\"[BENCH RUN] ebobby/simple-raytracer\");\n+                fs::copy(PathBuf::from(\"./target/debug/main\"), PathBuf::from(\"raytracer_cg_clif\"))\n+                    .unwrap();\n+\n+                let mut bench_run = Command::new(\"hyperfine\");\n+                bench_run.arg(\"--runs\");\n+                bench_run.arg(&run_runs);\n+                bench_run.arg(PathBuf::from(\"./raytracer_cg_llvm\"));\n+                bench_run.arg(PathBuf::from(\"./raytracer_cg_clif\"));\n+                spawn_and_wait(bench_run);\n+            } else {\n+                runner.run_cargo([\"clean\"]);\n+                eprintln!(\"[BENCH COMPILE] ebobby/simple-raytracer (skipped)\");\n+                eprintln!(\"[COMPILE] ebobby/simple-raytracer\");\n+                runner.run_cargo([\"build\", \"--target\", &runner.target_triple]);\n+                eprintln!(\"[BENCH RUN] ebobby/simple-raytracer (skipped)\");\n+            }\n+        });\n+    }),\n+    TestCase::new(\"test.libcore\", &|runner| {\n+        runner.in_dir([\"build_sysroot\", \"sysroot_src\", \"library\", \"core\", \"tests\"], |runner| {\n+            runner.run_cargo([\"clean\"]);\n+\n+            if runner.host_triple == runner.target_triple {\n+                runner.run_cargo([\"test\"]);\n+            } else {\n+                eprintln!(\"Cross-Compiling: Not running tests\");\n+                runner.run_cargo([\"build\", \"--target\", &runner.target_triple, \"--tests\"]);\n+            }\n+        });\n+    }),\n+    TestCase::new(\"test.regex-shootout-regex-dna\", &|runner| {\n+        runner.in_dir([\"regex\"], |runner| {\n+            runner.run_cargo([\"clean\"]);\n+\n+            // newer aho_corasick versions throw a deprecation warning\n+            let lint_rust_flags = format!(\"{} --cap-lints warn\", runner.rust_flags);\n+\n+            let mut build_cmd = runner.cargo_command([\n+                \"build\",\n+                \"--example\",\n+                \"shootout-regex-dna\",\n+                \"--target\",\n+                &runner.target_triple,\n+            ]);\n+            build_cmd.env(\"RUSTFLAGS\", lint_rust_flags.clone());\n+            spawn_and_wait(build_cmd);\n+\n+            if runner.host_triple == runner.target_triple {\n+                let mut run_cmd = runner.cargo_command([\n+                    \"run\",\n+                    \"--example\",\n+                    \"shootout-regex-dna\",\n+                    \"--target\",\n+                    &runner.target_triple,\n+                ]);\n+                run_cmd.env(\"RUSTFLAGS\", lint_rust_flags);\n+\n+                let input =\n+                    fs::read_to_string(PathBuf::from(\"examples/regexdna-input.txt\")).unwrap();\n+                let expected_path = PathBuf::from(\"examples/regexdna-output.txt\");\n+                let expected = fs::read_to_string(&expected_path).unwrap();\n+\n+                let output = spawn_and_wait_with_input(run_cmd, input);\n+                // Make sure `[codegen mono items] start` doesn't poison the diff\n+                let output = output\n+                    .lines()\n+                    .filter(|line| !line.contains(\"codegen mono items\"))\n+                    .chain(Some(\"\")) // This just adds the trailing newline\n+                    .collect::<Vec<&str>>()\n+                    .join(\"\\r\\n\");\n+\n+                let output_matches = expected.lines().eq(output.lines());\n+                if !output_matches {\n+                    let res_path = PathBuf::from(\"res.txt\");\n+                    fs::write(&res_path, &output).unwrap();\n+\n+                    if cfg!(windows) {\n+                        println!(\"Output files don't match!\");\n+                        println!(\"Expected Output:\\n{}\", expected);\n+                        println!(\"Actual Output:\\n{}\", output);\n+                    } else {\n+                        let mut diff = Command::new(\"diff\");\n+                        diff.arg(\"-u\");\n+                        diff.arg(res_path);\n+                        diff.arg(expected_path);\n+                        spawn_and_wait(diff);\n+                    }\n+\n+                    std::process::exit(1);\n+                }\n+            }\n+        });\n+    }),\n+    TestCase::new(\"test.regex\", &|runner| {\n+        runner.in_dir([\"regex\"], |runner| {\n+            runner.run_cargo([\"clean\"]);\n+\n+            // newer aho_corasick versions throw a deprecation warning\n+            let lint_rust_flags = format!(\"{} --cap-lints warn\", runner.rust_flags);\n+\n+            if runner.host_triple == runner.target_triple {\n+                let mut run_cmd = runner.cargo_command([\n+                    \"test\",\n+                    \"--tests\",\n+                    \"--\",\n+                    \"--exclude-should-panic\",\n+                    \"--test-threads\",\n+                    \"1\",\n+                    \"-Zunstable-options\",\n+                    \"-q\",\n+                ]);\n+                run_cmd.env(\"RUSTFLAGS\", lint_rust_flags);\n+                spawn_and_wait(run_cmd);\n+            } else {\n+                eprintln!(\"Cross-Compiling: Not running tests\");\n+                let mut build_cmd =\n+                    runner.cargo_command([\"build\", \"--tests\", \"--target\", &runner.target_triple]);\n+                build_cmd.env(\"RUSTFLAGS\", lint_rust_flags.clone());\n+                spawn_and_wait(build_cmd);\n+            }\n+        });\n+    }),\n+    TestCase::new(\"test.portable-simd\", &|runner| {\n+        runner.in_dir([\"portable-simd\"], |runner| {\n+            runner.run_cargo([\"clean\"]);\n+            runner.run_cargo([\"build\", \"--all-targets\", \"--target\", &runner.target_triple]);\n+\n+            if runner.host_triple == runner.target_triple {\n+                runner.run_cargo([\"test\", \"-q\"]);\n+            }\n+        });\n+    }),\n+];\n+\n+pub(crate) fn run_tests(\n+    channel: &str,\n+    sysroot_kind: SysrootKind,\n+    target_dir: &Path,\n+    cg_clif_build_dir: &Path,\n+    host_triple: &str,\n+    target_triple: &str,\n+) {\n+    let runner = TestRunner::new(host_triple.to_string(), target_triple.to_string());\n+\n+    if config::get_bool(\"testsuite.no_sysroot\") {\n+        build_sysroot::build_sysroot(\n+            channel,\n+            SysrootKind::None,\n+            &target_dir,\n+            cg_clif_build_dir,\n+            &host_triple,\n+            &target_triple,\n+        );\n+\n+        let _ = fs::remove_dir_all(Path::new(\"target\").join(\"out\"));\n+        runner.run_testsuite(NO_SYSROOT_SUITE);\n+    } else {\n+        eprintln!(\"[SKIP] no_sysroot tests\");\n+    }\n+\n+    let run_base_sysroot = config::get_bool(\"testsuite.base_sysroot\");\n+    let run_extended_sysroot = config::get_bool(\"testsuite.extended_sysroot\");\n+\n+    if run_base_sysroot || run_extended_sysroot {\n+        build_sysroot::build_sysroot(\n+            channel,\n+            sysroot_kind,\n+            &target_dir,\n+            cg_clif_build_dir,\n+            &host_triple,\n+            &target_triple,\n+        );\n+    }\n+\n+    if run_base_sysroot {\n+        runner.run_testsuite(BASE_SYSROOT_SUITE);\n+    } else {\n+        eprintln!(\"[SKIP] base_sysroot tests\");\n+    }\n+\n+    if run_extended_sysroot {\n+        runner.run_testsuite(EXTENDED_SYSROOT_SUITE);\n+    } else {\n+        eprintln!(\"[SKIP] extended_sysroot tests\");\n+    }\n+}\n+\n+struct TestRunner {\n+    root_dir: PathBuf,\n+    out_dir: PathBuf,\n+    jit_supported: bool,\n+    rust_flags: String,\n+    run_wrapper: Vec<String>,\n+    host_triple: String,\n+    target_triple: String,\n+}\n+\n+impl TestRunner {\n+    pub fn new(host_triple: String, target_triple: String) -> Self {\n+        let root_dir = env::current_dir().unwrap();\n+\n+        let mut out_dir = root_dir.clone();\n+        out_dir.push(\"target\");\n+        out_dir.push(\"out\");\n+\n+        let is_native = host_triple == target_triple;\n+        let jit_supported = target_triple.contains(\"x86_64\") && is_native;\n+\n+        let mut rust_flags = env::var(\"RUSTFLAGS\").ok().unwrap_or(\"\".to_string());\n+        let mut run_wrapper = Vec::new();\n+\n+        if !is_native {\n+            match target_triple.as_str() {\n+                \"aarch64-unknown-linux-gnu\" => {\n+                    // We are cross-compiling for aarch64. Use the correct linker and run tests in qemu.\n+                    rust_flags = format!(\"-Clinker=aarch64-linux-gnu-gcc{}\", rust_flags);\n+                    run_wrapper = vec![\"qemu-aarch64\", \"-L\", \"/usr/aarch64-linux-gnu\"];\n+                }\n+                \"x86_64-pc-windows-gnu\" => {\n+                    // We are cross-compiling for Windows. Run tests in wine.\n+                    run_wrapper = vec![\"wine\"];\n+                }\n+                _ => {\n+                    println!(\"Unknown non-native platform\");\n+                }\n+            }\n+        }\n+\n+        // FIXME fix `#[linkage = \"extern_weak\"]` without this\n+        if host_triple.contains(\"darwin\") {\n+            rust_flags = format!(\"{} -Clink-arg=-undefined -Clink-arg=dynamic_lookup\", rust_flags);\n+        }\n+\n+        Self {\n+            root_dir,\n+            out_dir,\n+            jit_supported,\n+            rust_flags,\n+            run_wrapper: run_wrapper.iter().map(|s| s.to_string()).collect(),\n+            host_triple,\n+            target_triple,\n+        }\n+    }\n+\n+    pub fn run_testsuite(&self, tests: &[TestCase]) {\n+        for &TestCase { config, func } in tests {\n+            let (tag, testname) = config.split_once('.').unwrap();\n+            let tag = tag.to_uppercase();\n+            let is_jit_test = tag == \"JIT\";\n+\n+            if !config::get_bool(config) || (is_jit_test && !self.jit_supported) {\n+                eprintln!(\"[{tag}] {testname} (skipped)\");\n+                continue;\n+            } else {\n+                eprintln!(\"[{tag}] {testname}\");\n+            }\n+\n+            func(self);\n+        }\n+    }\n+\n+    fn in_dir<'a, I, F>(&self, dir: I, callback: F)\n+    where\n+        I: IntoIterator<Item = &'a str>,\n+        F: FnOnce(&TestRunner),\n+    {\n+        let current = env::current_dir().unwrap();\n+        let mut new = current.clone();\n+        for d in dir {\n+            new.push(d);\n+        }\n+\n+        env::set_current_dir(new).unwrap();\n+        callback(self);\n+        env::set_current_dir(current).unwrap();\n+    }\n+\n+    fn rustc_command<I, S>(&self, args: I) -> Command\n+    where\n+        I: IntoIterator<Item = S>,\n+        S: AsRef<OsStr>,\n+    {\n+        let mut rustc_clif = self.root_dir.clone();\n+        rustc_clif.push(\"build\");\n+        rustc_clif.push(get_wrapper_file_name(\"rustc-clif\", \"bin\"));\n+\n+        let mut cmd = Command::new(rustc_clif);\n+        cmd.args(self.rust_flags.split_whitespace());\n+        cmd.arg(\"-L\");\n+        cmd.arg(format!(\"crate={}\", self.out_dir.display()));\n+        cmd.arg(\"--out-dir\");\n+        cmd.arg(format!(\"{}\", self.out_dir.display()));\n+        cmd.arg(\"-Cdebuginfo=2\");\n+        cmd.args(args);\n+        cmd\n+    }\n+\n+    fn run_rustc<I, S>(&self, args: I)\n+    where\n+        I: IntoIterator<Item = S>,\n+        S: AsRef<OsStr>,\n+    {\n+        spawn_and_wait(self.rustc_command(args));\n+    }\n+\n+    fn run_out_command<'a, I>(&self, name: &str, args: I)\n+    where\n+        I: IntoIterator<Item = &'a str>,\n+    {\n+        let mut full_cmd = vec![];\n+\n+        // Prepend the RUN_WRAPPER's\n+        if !self.run_wrapper.is_empty() {\n+            full_cmd.extend(self.run_wrapper.iter().cloned());\n+        }\n+\n+        full_cmd.push({\n+            let mut out_path = self.out_dir.clone();\n+            out_path.push(name);\n+            out_path.to_str().unwrap().to_string()\n+        });\n+\n+        for arg in args.into_iter() {\n+            full_cmd.push(arg.to_string());\n+        }\n+\n+        let mut cmd_iter = full_cmd.into_iter();\n+        let first = cmd_iter.next().unwrap();\n+\n+        let mut cmd = Command::new(first);\n+        cmd.args(cmd_iter);\n+\n+        spawn_and_wait(cmd);\n+    }\n+\n+    fn cargo_command<I, S>(&self, args: I) -> Command\n+    where\n+        I: IntoIterator<Item = S>,\n+        S: AsRef<OsStr>,\n+    {\n+        let mut cargo_clif = self.root_dir.clone();\n+        cargo_clif.push(\"build\");\n+        cargo_clif.push(get_wrapper_file_name(\"cargo-clif\", \"bin\"));\n+\n+        let mut cmd = Command::new(cargo_clif);\n+        cmd.args(args);\n+        cmd.env(\"RUSTFLAGS\", &self.rust_flags);\n+        cmd\n+    }\n+\n+    fn run_cargo<'a, I>(&self, args: I)\n+    where\n+        I: IntoIterator<Item = &'a str>,\n+    {\n+        spawn_and_wait(self.cargo_command(args));\n+    }\n+}"}, {"sha": "3282778e25486bb63a28841a2ff113b3ac80e11f", "filename": "build_system/utils.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/231f7c6a21525dd125f96188a35b5d90ab8de29b/build_system%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/231f7c6a21525dd125f96188a35b5d90ab8de29b/build_system%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Futils.rs?ref=231f7c6a21525dd125f96188a35b5d90ab8de29b", "patch": "@@ -1,6 +1,7 @@\n use std::fs;\n+use std::io::Write;\n use std::path::Path;\n-use std::process::{self, Command};\n+use std::process::{self, Command, Stdio};\n \n #[track_caller]\n pub(crate) fn try_hard_link(src: impl AsRef<Path>, dst: impl AsRef<Path>) {\n@@ -18,6 +19,27 @@ pub(crate) fn spawn_and_wait(mut cmd: Command) {\n     }\n }\n \n+#[track_caller]\n+pub(crate) fn spawn_and_wait_with_input(mut cmd: Command, input: String) -> String {\n+    let mut child = cmd\n+        .stdin(Stdio::piped())\n+        .stdout(Stdio::piped())\n+        .spawn()\n+        .expect(\"Failed to spawn child process\");\n+\n+    let mut stdin = child.stdin.take().expect(\"Failed to open stdin\");\n+    std::thread::spawn(move || {\n+        stdin.write_all(input.as_bytes()).expect(\"Failed to write to stdin\");\n+    });\n+\n+    let output = child.wait_with_output().expect(\"Failed to read stdout\");\n+    if !output.status.success() {\n+        process::exit(1);\n+    }\n+\n+    String::from_utf8(output.stdout).unwrap()\n+}\n+\n pub(crate) fn copy_dir_recursively(from: &Path, to: &Path) {\n     for entry in fs::read_dir(from).unwrap() {\n         let entry = entry.unwrap();"}, {"sha": "5e4d230776d5175bbbbdd7070dfbbbe56499792f", "filename": "config.txt", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/231f7c6a21525dd125f96188a35b5d90ab8de29b/config.txt", "raw_url": "https://github.com/rust-lang/rust/raw/231f7c6a21525dd125f96188a35b5d90ab8de29b/config.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.txt?ref=231f7c6a21525dd125f96188a35b5d90ab8de29b", "patch": "@@ -15,3 +15,36 @@\n # This option can be changed while the build system is already running for as long as sysroot\n # building hasn't started yet.\n #keep_sysroot\n+\n+\n+# Testsuite\n+#\n+# Each test suite item has a corresponding key here. The default is to run all tests.\n+# Comment any of these lines to skip individual tests.\n+\n+testsuite.no_sysroot\n+build.mini_core\n+build.example\n+jit.mini_core_hello_world\n+aot.mini_core_hello_world\n+\n+testsuite.base_sysroot\n+aot.arbitrary_self_types_pointers_and_wrappers\n+aot.issue_91827_extern_types\n+build.alloc_system\n+aot.alloc_example\n+jit.std_example\n+aot.std_example\n+aot.dst_field_align\n+aot.subslice-patterns-const-eval\n+aot.track-caller-attribute\n+aot.float-minmax-pass\n+aot.mod_bench\n+\n+testsuite.extended_sysroot\n+test.rust-random/rand\n+bench.simple-raytracer\n+test.libcore\n+test.regex-shootout-regex-dna\n+test.regex\n+test.portable-simd"}, {"sha": "9b5ffa4096049c04b9b2b509e9ec80107a7e1a92", "filename": "scripts/tests.sh", "status": "removed", "additions": 0, "deletions": 203, "changes": 203, "blob_url": "https://github.com/rust-lang/rust/blob/49e773183e504f4f73cfcb7dfd5a397b8c94be1e/scripts%2Ftests.sh", "raw_url": "https://github.com/rust-lang/rust/raw/49e773183e504f4f73cfcb7dfd5a397b8c94be1e/scripts%2Ftests.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Ftests.sh?ref=49e773183e504f4f73cfcb7dfd5a397b8c94be1e", "patch": "@@ -1,203 +0,0 @@\n-#!/usr/bin/env bash\n-\n-set -e\n-\n-export CG_CLIF_DISPLAY_CG_TIME=1\n-export CG_CLIF_DISABLE_INCR_CACHE=1\n-\n-export HOST_TRIPLE=$(rustc -vV | grep host | cut -d: -f2 | tr -d \" \")\n-export TARGET_TRIPLE=${TARGET_TRIPLE:-$HOST_TRIPLE}\n-\n-export RUN_WRAPPER=''\n-\n-case \"$TARGET_TRIPLE\" in\n-   x86_64*)\n-      export JIT_SUPPORTED=1\n-      ;;\n-   *)\n-      export JIT_SUPPORTED=0\n-      ;;\n-esac\n-\n-if [[ \"$HOST_TRIPLE\" != \"$TARGET_TRIPLE\" ]]; then\n-   export JIT_SUPPORTED=0\n-   if [[ \"$TARGET_TRIPLE\" == \"aarch64-unknown-linux-gnu\" ]]; then\n-      # We are cross-compiling for aarch64. Use the correct linker and run tests in qemu.\n-      export RUSTFLAGS='-Clinker=aarch64-linux-gnu-gcc '$RUSTFLAGS\n-      export RUN_WRAPPER='qemu-aarch64 -L /usr/aarch64-linux-gnu'\n-   elif [[ \"$TARGET_TRIPLE\" == \"x86_64-pc-windows-gnu\" ]]; then\n-      # We are cross-compiling for Windows. Run tests in wine.\n-      export RUN_WRAPPER='wine'\n-   else\n-      echo \"Unknown non-native platform\"\n-   fi\n-fi\n-\n-# FIXME fix `#[linkage = \"extern_weak\"]` without this\n-if [[ \"$(uname)\" == 'Darwin' ]]; then\n-   export RUSTFLAGS=\"$RUSTFLAGS -Clink-arg=-undefined -Clink-arg=dynamic_lookup\"\n-fi\n-\n-MY_RUSTC=\"$(pwd)/build/rustc-clif $RUSTFLAGS -L crate=target/out --out-dir target/out -Cdebuginfo=2\"\n-\n-function no_sysroot_tests() {\n-    echo \"[BUILD] mini_core\"\n-    $MY_RUSTC example/mini_core.rs --crate-name mini_core --crate-type lib,dylib --target \"$TARGET_TRIPLE\"\n-\n-    echo \"[BUILD] example\"\n-    $MY_RUSTC example/example.rs --crate-type lib --target \"$TARGET_TRIPLE\"\n-\n-    if [[ \"$JIT_SUPPORTED\" = \"1\" ]]; then\n-        echo \"[JIT] mini_core_hello_world\"\n-        CG_CLIF_JIT_ARGS=\"abc bcd\" $MY_RUSTC -Zunstable-options -Cllvm-args=mode=jit -Cprefer-dynamic example/mini_core_hello_world.rs --cfg jit --target \"$HOST_TRIPLE\"\n-\n-        echo \"[JIT-lazy] mini_core_hello_world\"\n-        CG_CLIF_JIT_ARGS=\"abc bcd\" $MY_RUSTC -Zunstable-options -Cllvm-args=mode=jit-lazy -Cprefer-dynamic example/mini_core_hello_world.rs --cfg jit --target \"$HOST_TRIPLE\"\n-    else\n-        echo \"[JIT] mini_core_hello_world (skipped)\"\n-    fi\n-\n-    echo \"[AOT] mini_core_hello_world\"\n-    $MY_RUSTC example/mini_core_hello_world.rs --crate-name mini_core_hello_world --crate-type bin -g --target \"$TARGET_TRIPLE\"\n-    $RUN_WRAPPER ./target/out/mini_core_hello_world abc bcd\n-    # (echo \"break set -n main\"; echo \"run\"; sleep 1; echo \"si -c 10\"; sleep 1; echo \"frame variable\") | lldb -- ./target/out/mini_core_hello_world abc bcd\n-}\n-\n-function base_sysroot_tests() {\n-    echo \"[AOT] arbitrary_self_types_pointers_and_wrappers\"\n-    $MY_RUSTC example/arbitrary_self_types_pointers_and_wrappers.rs --crate-name arbitrary_self_types_pointers_and_wrappers --crate-type bin --target \"$TARGET_TRIPLE\"\n-    $RUN_WRAPPER ./target/out/arbitrary_self_types_pointers_and_wrappers\n-\n-    echo \"[AOT] issue_91827_extern_types\"\n-    $MY_RUSTC example/issue-91827-extern-types.rs --crate-name issue_91827_extern_types --crate-type bin --target \"$TARGET_TRIPLE\"\n-    $RUN_WRAPPER ./target/out/issue_91827_extern_types\n-\n-    echo \"[BUILD] alloc_system\"\n-    $MY_RUSTC example/alloc_system.rs --crate-type lib --target \"$TARGET_TRIPLE\"\n-\n-    echo \"[AOT] alloc_example\"\n-    $MY_RUSTC example/alloc_example.rs --crate-type bin --target \"$TARGET_TRIPLE\"\n-    $RUN_WRAPPER ./target/out/alloc_example\n-\n-    if [[ \"$JIT_SUPPORTED\" = \"1\" ]]; then\n-        echo \"[JIT] std_example\"\n-        $MY_RUSTC -Zunstable-options -Cllvm-args=mode=jit -Cprefer-dynamic example/std_example.rs --target \"$HOST_TRIPLE\"\n-\n-        echo \"[JIT-lazy] std_example\"\n-        $MY_RUSTC -Zunstable-options -Cllvm-args=mode=jit-lazy -Cprefer-dynamic example/std_example.rs --target \"$HOST_TRIPLE\"\n-    else\n-        echo \"[JIT] std_example (skipped)\"\n-    fi\n-\n-    echo \"[AOT] std_example\"\n-    $MY_RUSTC example/std_example.rs --crate-type bin --target \"$TARGET_TRIPLE\"\n-    $RUN_WRAPPER ./target/out/std_example arg\n-\n-    echo \"[AOT] dst_field_align\"\n-    $MY_RUSTC example/dst-field-align.rs --crate-name dst_field_align --crate-type bin --target \"$TARGET_TRIPLE\"\n-    $RUN_WRAPPER ./target/out/dst_field_align\n-\n-    echo \"[AOT] subslice-patterns-const-eval\"\n-    $MY_RUSTC example/subslice-patterns-const-eval.rs --crate-type bin -Cpanic=abort --target \"$TARGET_TRIPLE\"\n-    $RUN_WRAPPER ./target/out/subslice-patterns-const-eval\n-\n-    echo \"[AOT] track-caller-attribute\"\n-    $MY_RUSTC example/track-caller-attribute.rs --crate-type bin -Cpanic=abort --target \"$TARGET_TRIPLE\"\n-    $RUN_WRAPPER ./target/out/track-caller-attribute\n-\n-    echo \"[AOT] float-minmax-pass\"\n-    $MY_RUSTC example/float-minmax-pass.rs --crate-type bin -Cpanic=abort --target \"$TARGET_TRIPLE\"\n-    $RUN_WRAPPER ./target/out/float-minmax-pass\n-\n-    echo \"[AOT] mod_bench\"\n-    $MY_RUSTC example/mod_bench.rs --crate-type bin --target \"$TARGET_TRIPLE\"\n-    $RUN_WRAPPER ./target/out/mod_bench\n-}\n-\n-function extended_sysroot_tests() {\n-    pushd rand\n-    ../build/cargo-clif clean\n-    if [[ \"$HOST_TRIPLE\" = \"$TARGET_TRIPLE\" ]]; then\n-        echo \"[TEST] rust-random/rand\"\n-        ../build/cargo-clif test --workspace\n-    else\n-        echo \"[AOT] rust-random/rand\"\n-        ../build/cargo-clif build --workspace --target $TARGET_TRIPLE --tests\n-    fi\n-    popd\n-\n-    pushd simple-raytracer\n-    if [[ \"$HOST_TRIPLE\" = \"$TARGET_TRIPLE\" ]]; then\n-        echo \"[BENCH COMPILE] ebobby/simple-raytracer\"\n-        hyperfine --runs \"${RUN_RUNS:-10}\" --warmup 1 --prepare \"../build/cargo-clif clean\" \\\n-        \"RUSTFLAGS='' cargo build\" \\\n-        \"../build/cargo-clif build\"\n-\n-        echo \"[BENCH RUN] ebobby/simple-raytracer\"\n-        cp ./target/debug/main ./raytracer_cg_clif\n-        hyperfine --runs \"${RUN_RUNS:-10}\" ./raytracer_cg_llvm ./raytracer_cg_clif\n-    else\n-        ../build/cargo-clif clean\n-        echo \"[BENCH COMPILE] ebobby/simple-raytracer (skipped)\"\n-        echo \"[COMPILE] ebobby/simple-raytracer\"\n-        ../build/cargo-clif build --target $TARGET_TRIPLE\n-        echo \"[BENCH RUN] ebobby/simple-raytracer (skipped)\"\n-    fi\n-    popd\n-\n-    pushd build_sysroot/sysroot_src/library/core/tests\n-    echo \"[TEST] libcore\"\n-    ../../../../../build/cargo-clif clean\n-    if [[ \"$HOST_TRIPLE\" = \"$TARGET_TRIPLE\" ]]; then\n-        ../../../../../build/cargo-clif test\n-    else\n-        ../../../../../build/cargo-clif build --target $TARGET_TRIPLE --tests\n-    fi\n-    popd\n-\n-    pushd regex\n-    echo \"[TEST] rust-lang/regex example shootout-regex-dna\"\n-    ../build/cargo-clif clean\n-    export RUSTFLAGS=\"$RUSTFLAGS --cap-lints warn\" # newer aho_corasick versions throw a deprecation warning\n-    # Make sure `[codegen mono items] start` doesn't poison the diff\n-    ../build/cargo-clif build --example shootout-regex-dna --target $TARGET_TRIPLE\n-    if [[ \"$HOST_TRIPLE\" = \"$TARGET_TRIPLE\" ]]; then\n-        cat examples/regexdna-input.txt \\\n-            | ../build/cargo-clif run --example shootout-regex-dna --target $TARGET_TRIPLE \\\n-            | grep -v \"Spawned thread\" > res.txt\n-        diff -u res.txt examples/regexdna-output.txt\n-    fi\n-\n-    if [[ \"$HOST_TRIPLE\" = \"$TARGET_TRIPLE\" ]]; then\n-        echo \"[TEST] rust-lang/regex tests\"\n-        ../build/cargo-clif test --tests -- --exclude-should-panic --test-threads 1 -Zunstable-options -q\n-    else\n-        echo \"[AOT] rust-lang/regex tests\"\n-        ../build/cargo-clif build --tests --target $TARGET_TRIPLE\n-    fi\n-    popd\n-\n-    pushd portable-simd\n-    echo \"[TEST] rust-lang/portable-simd\"\n-    ../build/cargo-clif clean\n-    ../build/cargo-clif build --all-targets --target $TARGET_TRIPLE\n-    if [[ \"$HOST_TRIPLE\" = \"$TARGET_TRIPLE\" ]]; then\n-        ../build/cargo-clif test -q\n-    fi\n-    popd\n-}\n-\n-case \"$1\" in\n-    \"no_sysroot\")\n-        no_sysroot_tests\n-        ;;\n-    \"base_sysroot\")\n-        base_sysroot_tests\n-        ;;\n-    \"extended_sysroot\")\n-        extended_sysroot_tests\n-        ;;\n-    *)\n-        echo \"unknown test suite\"\n-        ;;\n-esac"}, {"sha": "a10924628bb0eba9350b56f5603ead5b068b75f4", "filename": "test.sh", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/49e773183e504f4f73cfcb7dfd5a397b8c94be1e/test.sh", "raw_url": "https://github.com/rust-lang/rust/raw/49e773183e504f4f73cfcb7dfd5a397b8c94be1e/test.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test.sh?ref=49e773183e504f4f73cfcb7dfd5a397b8c94be1e", "patch": "@@ -1,13 +0,0 @@\n-#!/usr/bin/env bash\n-set -e\n-\n-./y.rs build --sysroot none \"$@\"\n-\n-rm -r target/out || true\n-\n-scripts/tests.sh no_sysroot\n-\n-./y.rs build \"$@\"\n-\n-scripts/tests.sh base_sysroot\n-scripts/tests.sh extended_sysroot"}]}