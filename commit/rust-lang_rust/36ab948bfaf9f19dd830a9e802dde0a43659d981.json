{"sha": "36ab948bfaf9f19dd830a9e802dde0a43659d981", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2YWI5NDhiZmFmOWYxOWRkODMwYTllODAyZGRlMGE0MzY1OWQ5ODE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-11-11T06:16:07Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-11-16T23:16:40Z"}, "message": "make it so that tests can be run on different target arch", "tree": {"sha": "8bfc1ed100fa9889460414ffddb0039ce55c192d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8bfc1ed100fa9889460414ffddb0039ce55c192d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36ab948bfaf9f19dd830a9e802dde0a43659d981", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36ab948bfaf9f19dd830a9e802dde0a43659d981", "html_url": "https://github.com/rust-lang/rust/commit/36ab948bfaf9f19dd830a9e802dde0a43659d981", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36ab948bfaf9f19dd830a9e802dde0a43659d981/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59e2a0a9c1434db65afc6c94752de3cf2ab761a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/59e2a0a9c1434db65afc6c94752de3cf2ab761a0", "html_url": "https://github.com/rust-lang/rust/commit/59e2a0a9c1434db65afc6c94752de3cf2ab761a0"}], "stats": {"total": 142, "additions": 75, "deletions": 67}, "files": [{"sha": "78b4cc7389392a62b9a281f141474cdfc712edc4", "filename": "mk/tests.mk", "status": "modified", "additions": 75, "deletions": 67, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/36ab948bfaf9f19dd830a9e802dde0a43659d981/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/36ab948bfaf9f19dd830a9e802dde0a43659d981/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=36ab948bfaf9f19dd830a9e802dde0a43659d981", "patch": "@@ -106,195 +106,203 @@ tidy:\n define TEST_STAGEN\n \n # All the per-stage build rules you might want to call from the\n-# command line\n+# command line.\n+#\n+# $(1) is the stage number\n+# $(2) is the target triple\n \n-check-stage$(1): tidy \\\n-\tcheck-stage$(1)-rustc \\\n-\tcheck-stage$(1)-std \\\n-\tcheck-stage$(1)-rpass \\\n-\tcheck-stage$(1)-rfail \\\n-\tcheck-stage$(1)-cfail \\\n-\tcheck-stage$(1)-bench \\\n-\tcheck-stage$(1)-pretty\n+check-stage$(1)-$(2): tidy \\\n+\tcheck-stage$(1)-$(2)-rustc \\\n+\tcheck-stage$(1)-$(2)-std \\\n+\tcheck-stage$(1)-$(2)-rpass \\\n+\tcheck-stage$(1)-$(2)-rfail \\\n+\tcheck-stage$(1)-$(2)-cfail \\\n+\tcheck-stage$(1)-$(2)-bench \\\n+\tcheck-stage$(1)-$(2)-pretty\n \n-check-stage$(1)-std: check-stage$(1)-std-dummy\n+check-stage$(1)-$(2)-std: check-stage$(1)-$(2)-std-dummy\n \n-check-stage$(1)-rustc: check-stage$(1)-rustc-dummy\n+check-stage$(1)-$(2)-rustc: check-stage$(1)-$(2)-rustc-dummy\n \n-check-stage$(1)-cfail: check-stage$(1)-cfail-dummy\n+check-stage$(1)-$(2)-cfail: check-stage$(1)-$(2)-cfail-dummy\n \n-check-stage$(1)-rfail: check-stage$(1)-rfail-dummy\n+check-stage$(1)-$(2)-rfail: check-stage$(1)-$(2)-rfail-dummy\n \n-check-stage$(1)-rpass: check-stage$(1)-rpass-dummy\n+check-stage$(1)-$(2)-rpass: check-stage$(1)-$(2)-rpass-dummy\n \n-check-stage$(1)-bench: check-stage$(1)-bench-dummy\n+check-stage$(1)-$(2)-bench: check-stage$(1)-$(2)-bench-dummy\n \n-check-stage$(1)-perf: check-stage$(1)-perf-dummy\n+check-stage$(1)-$(2)-perf: check-stage$(1)-$(2)-perf-dummy\n \n-check-stage$(1)-pretty: check-stage$(1)-pretty-rpass \\\n-                        check-stage$(1)-pretty-rfail \\\n-                        check-stage$(1)-pretty-bench \\\n-                        check-stage$(1)-pretty-pretty\n+check-stage$(1)-$(2)-pretty: check-stage$(1)-$(2)-pretty-rpass \\\n+                        check-stage$(1)-$(2)-pretty-rfail \\\n+                        check-stage$(1)-$(2)-pretty-bench \\\n+                        check-stage$(1)-$(2)-pretty-pretty\n \n-check-stage$(1)-pretty-rpass: check-stage$(1)-pretty-rpass-dummy\n+check-stage$(1)-$(2)-pretty-rpass: check-stage$(1)-$(2)-pretty-rpass-dummy\n \n-check-stage$(1)-pretty-rfail: check-stage$(1)-pretty-rfail-dummy\n+check-stage$(1)-$(2)-pretty-rfail: check-stage$(1)-$(2)-pretty-rfail-dummy\n \n-check-stage$(1)-pretty-bench: check-stage$(1)-pretty-bench-dummy\n+check-stage$(1)-$(2)-pretty-bench: check-stage$(1)-$(2)-pretty-bench-dummy\n \n-check-stage$(1)-pretty-pretty: check-stage$(1)-pretty-pretty-dummy\n+check-stage$(1)-$(2)-pretty-pretty: check-stage$(1)-$(2)-pretty-pretty-dummy\n \n \n # Rules for the standard library test runner\n \n-test/stdtest.stage$(1)$$(X): $$(STDTEST_CRATE) $$(STDTEST_INPUTS) \\\n+test/stdtest.stage$(1)-$(2)$$(X): $$(STDTEST_CRATE) $$(STDTEST_INPUTS) \\\n                              $$(SREQ$(1)$$(CFG_HOST_TRIPLE))\n \t@$$(call E, compile_and_link: $$@)\n-\t$$(STAGE$(1)_$$(CFG_HOST_TRIPLE)) -o $$@ $$< --test\n+\t$$(STAGE$(1)_$(2)) -o $$@ $$< --test\n \n-check-stage$(1)-std-dummy: test/stdtest.stage$(1)$$(X)\n+check-stage$(1)-$(2)-std-dummy: test/stdtest.stage$(1)-$(2)$$(X)\n \t@$$(call E, run: $$<)\n \t$$(Q)$$(call CFG_RUN_TEST,$$<) $$(TESTARGS)\n \n \n # Rules for the rustc test runner\n \n-test/rustctest.stage$(1)$$(X): \\\n+test/rustctest.stage$(1)-$(2)$$(X): \\\n \t$$(COMPILER_CRATE) $$(COMPILER_INPUTS) \\\n \t$$(TARGET_SREQ$(1)$$(CFG_HOST_TRIPLE)) \\\n-        $$(HOST_LIB$(1))/$$(CFG_RUSTLLVM) \\\n-\t$$(TARGET_LIB$(1)$$(CFG_HOST_TRIPLE))/$$(CFG_RUSTLLVM) \\\n-\t$$(TARGET_LIB$(1)$$(CFG_HOST_TRIPLE))/$$(CFG_STDLIB)\n+    $$(HOST_LIB$(1))/$$(CFG_RUSTLLVM) \\\n+\t$$(TARGET_LIB$(1)$(2))/$$(CFG_RUSTLLVM) \\\n+\t$$(TARGET_LIB$(1)$(2))/$$(CFG_STDLIB)\n \t@$$(call E, compile_and_link: $$@)\n-\t$$(STAGE$(1)_$$(CFG_HOST_TRIPLE)) -o $$@ $$< --test\n+\t$$(STAGE$(1)_$(2)) -o $$@ $$< --test\n \n-check-stage$(1)-rustc-dummy: test/rustctest.stage$(1)$$(X)\n+check-stage$(1)-$(2)-rustc-dummy: test/rustctest.stage$(1)-$(2)$$(X)\n \t@$$(call E, run: $$<)\n \t$$(Q)$$(call CFG_RUN_TEST,$$<) \\\n \t  $$(TESTARGS)\n \n \n # Rules for the cfail/rfail/rpass/bench/perf test runner\n \n-CTEST_COMMON_ARGS$(1) := --compile-lib-path $$(HOST_LIB$(1)) \\\n+CTEST_COMMON_ARGS$(1)-$(2) := --compile-lib-path $$(HOST_LIB$(1)) \\\n                          --run-lib-path $$(TARGET_LIB$(1)$$(CFG_HOST_TRIPLE)) \\\n                          --rustc-path $$(HOST_BIN$(1))/rustc$$(X) \\\n-                         --stage-id stage$(1) \\\n-                         --rustcflags \"$$(CFG_RUSTC_FLAGS)\" \\\n+                         --stage-id stage$(1)-$(2) \\\n+                         --rustcflags \"$$(CFG_RUSTC_FLAGS) --target=$(2)\" \\\n                          $$(CTEST_TESTARGS) \\\n \n-CFAIL_ARGS$(1) := $$(CTEST_COMMON_ARGS$(1)) \\\n+CFAIL_ARGS$(1)-$(2) := $$(CTEST_COMMON_ARGS$(1)-$(2)) \\\n                   --src-base $$(S)src/test/compile-fail/ \\\n                   --build-base test/compile-fail/ \\\n                   --mode compile-fail \\\n \n-RFAIL_ARGS$(1) := $$(CTEST_COMMON_ARGS$(1)) \\\n+RFAIL_ARGS$(1)-$(2) := $$(CTEST_COMMON_ARGS$(1)-$(2)) \\\n                   --src-base $$(S)src/test/run-fail/ \\\n                   --build-base test/run-fail/ \\\n                   --mode run-fail \\\n                   $$(CTEST_RUNTOOL) \\\n \n-RPASS_ARGS$(1) := $$(CTEST_COMMON_ARGS$(1)) \\\n+RPASS_ARGS$(1)-$(2) := $$(CTEST_COMMON_ARGS$(1)-$(2)) \\\n                   --src-base $$(S)src/test/run-pass/ \\\n                   --build-base test/run-pass/ \\\n                   --mode run-pass \\\n                   $$(CTEST_RUNTOOL) \\\n \n-BENCH_ARGS$(1) := $$(CTEST_COMMON_ARGS$(1)) \\\n+BENCH_ARGS$(1)-$(2) := $$(CTEST_COMMON_ARGS$(1)-$(2)) \\\n                   --src-base $$(S)src/test/bench/ \\\n                   --build-base test/bench/ \\\n                   --mode run-pass \\\n                   $$(CTEST_RUNTOOL) \\\n \n-PERF_ARGS$(1) := $$(CTEST_COMMON_ARGS$(1)) \\\n+PERF_ARGS$(1)-$(2) := $$(CTEST_COMMON_ARGS$(1)-$(2)) \\\n                   --src-base $$(S)src/test/bench/ \\\n                   --build-base test/perf/ \\\n                   --mode run-pass \\\n                   $$(CTEST_PERF_RUNTOOL) \\\n \n-PRETTY_RPASS_ARGS$(1) := $$(CTEST_COMMON_ARGS$(1)) \\\n+PRETTY_RPASS_ARGS$(1)-$(2) := $$(CTEST_COMMON_ARGS$(1)-$(2)) \\\n                          --src-base $$(S)src/test/run-pass/ \\\n                          --build-base test/run-pass/ \\\n                          --mode pretty \\\n \n-PRETTY_RFAIL_ARGS$(1) := $$(CTEST_COMMON_ARGS$(1)) \\\n+PRETTY_RFAIL_ARGS$(1)-$(2) := $$(CTEST_COMMON_ARGS$(1)-$(2)) \\\n                          --src-base $$(S)src/test/run-fail/ \\\n                          --build-base test/run-fail/ \\\n                          --mode pretty \\\n \n-PRETTY_BENCH_ARGS$(1) := $$(CTEST_COMMON_ARGS$(1)) \\\n+PRETTY_BENCH_ARGS$(1)-$(2) := $$(CTEST_COMMON_ARGS$(1)-$(2)) \\\n                          --src-base $$(S)src/test/bench/ \\\n                          --build-base test/bench/ \\\n                          --mode pretty \\\n \n-PRETTY_PRETTY_ARGS$(1) := $$(CTEST_COMMON_ARGS$(1)) \\\n+PRETTY_PRETTY_ARGS$(1)-$(2) := $$(CTEST_COMMON_ARGS$(1)-$(2)) \\\n                           --src-base $$(S)src/test/pretty/ \\\n                           --build-base test/pretty/ \\\n                           --mode pretty \\\n \n-check-stage$(1)-cfail-dummy: $$(HOST_BIN$(1))/compiletest$$(X) \\\n+check-stage$(1)-$(2)-cfail-dummy: $$(HOST_BIN$(1))/compiletest$$(X) \\\n                              $$(SREQ$(1)$$(CFG_HOST_TRIPLE)) \\\n                                    $$(CFAIL_TESTS)\n \t@$$(call E, run: $$<)\n-\t$$(Q)$$(call CFG_RUN_CTEST,$(1),$$<) $$(CFAIL_ARGS$(1))\n+\t$$(Q)$$(call CFG_RUN_CTEST,$(1),$$<) $$(CFAIL_ARGS$(1)-$(2))\n \n-check-stage$(1)-rfail-dummy: $$(HOST_BIN$(1))/compiletest$$(X) \\\n+check-stage$(1)-$(2)-rfail-dummy: $$(HOST_BIN$(1))/compiletest$$(X) \\\n                              $$(SREQ$(1)$$(CFG_HOST_TRIPLE)) \\\n                                $$(RFAIL_TESTS)\n \t@$$(call E, run: $$<)\n-\t$$(Q)$$(call CFG_RUN_CTEST,$(1),$$<) $$(RFAIL_ARGS$(1))\n+\t$$(Q)$$(call CFG_RUN_CTEST,$(1),$$<) $$(RFAIL_ARGS$(1)-$(2))\n \n-check-stage$(1)-rpass-dummy: $$(HOST_BIN$(1))/compiletest$$(X) \\\n+check-stage$(1)-$(2)-rpass-dummy: $$(HOST_BIN$(1))/compiletest$$(X) \\\n                              $$(SREQ$(1)$$(CFG_HOST_TRIPLE)) \\\n                                $$(RPASS_TESTS)\n \t@$$(call E, run: $$<)\n-\t$$(Q)$$(call CFG_RUN_CTEST,$(1),$$<) $$(RPASS_ARGS$(1))\n+\t$$(Q)$$(call CFG_RUN_CTEST,$(1),$$<) $$(RPASS_ARGS$(1)-$(2))\n \n-check-stage$(1)-bench-dummy: $$(HOST_BIN$(1))/compiletest$$(X) \\\n+check-stage$(1)-$(2)-bench-dummy: $$(HOST_BIN$(1))/compiletest$$(X) \\\n                              $$(SREQ$(1)$$(CFG_HOST_TRIPLE)) \\\n                             $$(BENCH_TESTS)\n \t@$$(call E, run: $$<)\n-\t$$(Q)$$(call CFG_RUN_CTEST,$(1),$$<) $$(BENCH_ARGS$(1))\n+\t$$(Q)$$(call CFG_RUN_CTEST,$(1),$$<) $$(BENCH_ARGS$(1)-$(2))\n \n-check-stage$(1)-perf-dummy: $$(HOST_BIN$(1))/compiletest$$(X) \\\n+check-stage$(1)-$(2)-perf-dummy: $$(HOST_BIN$(1))/compiletest$$(X) \\\n                              $$(SREQ$(1)$$(CFG_HOST_TRIPLE)) \\\n                             $$(BENCH_TESTS)\n \t@$$(call E, perf: $$<)\n-\t$$(Q)$$(call CFG_RUN_CTEST,$(1),$$<) $$(PERF_ARGS$(1))\n+\t$$(Q)$$(call CFG_RUN_CTEST,$(1),$$<) $$(PERF_ARGS$(1)-$(2))\n \n-check-stage$(1)-pretty-rpass-dummy: $$(HOST_BIN$(1))/compiletest$$(X) \\\n+check-stage$(1)-$(2)-pretty-rpass-dummy: $$(HOST_BIN$(1))/compiletest$$(X) \\\n                              $$(SREQ$(1)$$(CFG_HOST_TRIPLE)) \\\n                                      $$(RPASS_TESTS)\n \t@$$(call E, run: $$<)\n-\t$$(Q)$$(call CFG_RUN_CTEST,$(1),$$<) $$(PRETTY_RPASS_ARGS$(1))\n+\t$$(Q)$$(call CFG_RUN_CTEST,$(1),$$<) $$(PRETTY_RPASS_ARGS$(1)-$(2))\n \n-check-stage$(1)-pretty-rfail-dummy: $$(HOST_BIN$(1))/compiletest$$(X) \\\n+check-stage$(1)-$(2)-pretty-rfail-dummy: $$(HOST_BIN$(1))/compiletest$$(X) \\\n                              $$(SREQ$(1)$$(CFG_HOST_TRIPLE)) \\\n                                      $$(RFAIL_TESTS)\n \t@$$(call E, run: $$<)\n-\t$$(Q)$$(call CFG_RUN_CTEST,$(1),$$<) $$(PRETTY_RFAIL_ARGS$(1))\n+\t$$(Q)$$(call CFG_RUN_CTEST,$(1),$$<) $$(PRETTY_RFAIL_ARGS$(1)-$(2))\n \n-check-stage$(1)-pretty-bench-dummy: $$(HOST_BIN$(1))/compiletest$$(X) \\\n+check-stage$(1)-$(2)-pretty-bench-dummy: $$(HOST_BIN$(1))/compiletest$$(X) \\\n                              $$(SREQ$(1)$$(CFG_HOST_TRIPLE)) \\\n                                      $$(BENCH_TESTS)\n \t@$$(call E, run: $$<)\n-\t$$(Q)$$(call CFG_RUN_CTEST,$(1),$$<) $$(PRETTY_BENCH_ARGS$(1))\n+\t$$(Q)$$(call CFG_RUN_CTEST,$(1),$$<) $$(PRETTY_BENCH_ARGS$(1)-$(2))\n \n-check-stage$(1)-pretty-pretty-dummy: $$(HOST_BIN$(1))/compiletest$$(X) \\\n+check-stage$(1)-$(2)-pretty-pretty-dummy: $$(HOST_BIN$(1))/compiletest$$(X) \\\n                              $$(SREQ$(1)$$(CFG_HOST_TRIPLE)) \\\n                                      $$(PRETTY_TESTS)\n \t@$$(call E, run: $$<)\n-\t$$(Q)$$(call CFG_RUN_CTEST,$(1),$$<) $$(PRETTY_PRETTY_ARGS$(1))\n+\t$$(Q)$$(call CFG_RUN_CTEST,$(1),$$<) $$(PRETTY_PRETTY_ARGS$(1)-$(2))\n \n endef\n \n # Instantiate the template for stage 0, 1, 2, 3\n \n-$(eval $(call TEST_STAGEN,0))\n-$(eval $(call TEST_STAGEN,1))\n-$(eval $(call TEST_STAGEN,2))\n-$(eval $(call TEST_STAGEN,3))\n+$(foreach target,$(CFG_TARGET_TRIPLES), \\\n+ $(eval $(call TEST_STAGEN,0,$(target))) \\\n+ $(eval $(call TEST_STAGEN,1,$(target))) \\\n+ $(eval $(call TEST_STAGEN,2,$(target))) \\\n+ $(eval $(call TEST_STAGEN,3,$(target))))\n \n+check-stage0: check-stage0-$(CFG_HOST_TRIPLE)\n+check-stage1: check-stage1-$(CFG_HOST_TRIPLE)\n+check-stage2: check-stage2-$(CFG_HOST_TRIPLE)\n+check-stage3: check-stage3-$(CFG_HOST_TRIPLE)\n \n ######################################################################\n # Fast-test rules"}]}