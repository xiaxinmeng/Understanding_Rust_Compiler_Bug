{"sha": "ef1a40d5fec8678c4ae51cf2dcbed96934182b8c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmMWE0MGQ1ZmVjODY3OGM0YWU1MWNmMmRjYmVkOTY5MzQxODJiOGM=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2018-10-12T14:16:29Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2018-10-18T21:47:49Z"}, "message": "Propagate bounds from generators", "tree": {"sha": "cf7d06dc806b55fc3de3c9ffdeb47e0cd8c94ae1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf7d06dc806b55fc3de3c9ffdeb47e0cd8c94ae1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef1a40d5fec8678c4ae51cf2dcbed96934182b8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef1a40d5fec8678c4ae51cf2dcbed96934182b8c", "html_url": "https://github.com/rust-lang/rust/commit/ef1a40d5fec8678c4ae51cf2dcbed96934182b8c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef1a40d5fec8678c4ae51cf2dcbed96934182b8c/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "121320d5236b255049ef178669b5a279389cd1e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/121320d5236b255049ef178669b5a279389cd1e5", "html_url": "https://github.com/rust-lang/rust/commit/121320d5236b255049ef178669b5a279389cd1e5"}], "stats": {"total": 76, "additions": 57, "deletions": 19}, "files": [{"sha": "0fabcfe4564494e839a55d81ec78d72fb929d17f", "filename": "src/librustc_mir/borrow_check/nll/region_infer/mod.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ef1a40d5fec8678c4ae51cf2dcbed96934182b8c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef1a40d5fec8678c4ae51cf2dcbed96934182b8c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs?ref=ef1a40d5fec8678c4ae51cf2dcbed96934182b8c", "patch": "@@ -1268,7 +1268,7 @@ pub trait ClosureRegionRequirementsExt<'gcx, 'tcx> {\n         tcx: TyCtxt<'_, 'gcx, 'tcx>,\n         location: Location,\n         closure_def_id: DefId,\n-        closure_substs: ty::ClosureSubsts<'tcx>,\n+        closure_substs: &'tcx ty::subst::Substs<'tcx>,\n     ) -> Vec<QueryRegionConstraint<'tcx>>;\n \n     fn subst_closure_mapping<T>(\n@@ -1299,23 +1299,19 @@ impl<'gcx, 'tcx> ClosureRegionRequirementsExt<'gcx, 'tcx> for ClosureRegionRequi\n         tcx: TyCtxt<'_, 'gcx, 'tcx>,\n         location: Location,\n         closure_def_id: DefId,\n-        closure_substs: ty::ClosureSubsts<'tcx>,\n+        closure_substs: &'tcx ty::subst::Substs<'tcx>,\n     ) -> Vec<QueryRegionConstraint<'tcx>> {\n         debug!(\n             \"apply_requirements(location={:?}, closure_def_id={:?}, closure_substs={:?})\",\n             location, closure_def_id, closure_substs\n         );\n \n-        // Get Tu.\n-        let user_closure_ty = tcx.mk_closure(closure_def_id, closure_substs);\n-        debug!(\"apply_requirements: user_closure_ty={:?}\", user_closure_ty);\n-\n-        // Extract the values of the free regions in `user_closure_ty`\n+        // Extract the values of the free regions in `closure_substs`\n         // into a vector.  These are the regions that we will be\n         // relating to one another.\n         let closure_mapping = &UniversalRegions::closure_mapping(\n             tcx,\n-            user_closure_ty,\n+            closure_substs,\n             self.num_external_vids,\n             tcx.closure_base_def_id(closure_def_id),\n         );"}, {"sha": "c5758cde9494d92aeb7202f17c2ac039c5058bd6", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ef1a40d5fec8678c4ae51cf2dcbed96934182b8c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef1a40d5fec8678c4ae51cf2dcbed96934182b8c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=ef1a40d5fec8678c4ae51cf2dcbed96934182b8c", "patch": "@@ -42,7 +42,7 @@ use rustc::traits::query::type_op::custom::CustomTypeOp;\n use rustc::traits::query::{Fallible, NoSolution};\n use rustc::traits::{ObligationCause, PredicateObligations};\n use rustc::ty::fold::TypeFoldable;\n-use rustc::ty::subst::{Subst, UnpackedKind};\n+use rustc::ty::subst::{Subst, Substs, UnpackedKind};\n use rustc::ty::{self, RegionVid, ToPolyTraitRef, Ty, TyCtxt, TyKind};\n use std::rc::Rc;\n use std::{fmt, iter};\n@@ -2075,12 +2075,9 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n             // desugaring. A closure gets desugared to a struct, and\n             // these extra requirements are basically like where\n             // clauses on the struct.\n-            AggregateKind::Closure(def_id, substs) => {\n-                self.prove_closure_bounds(tcx, *def_id, *substs, location)\n-            }\n-\n-            AggregateKind::Generator(def_id, substs, _) => {\n-                tcx.predicates_of(*def_id).instantiate(tcx, substs.substs)\n+            AggregateKind::Closure(def_id, ty::ClosureSubsts { substs })\n+            | AggregateKind::Generator(def_id, ty::GeneratorSubsts { substs }, _) => {\n+                self.prove_closure_bounds(tcx, *def_id, substs, location)\n             }\n \n             AggregateKind::Array(_) | AggregateKind::Tuple => ty::InstantiatedPredicates::empty(),\n@@ -2096,7 +2093,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         &mut self,\n         tcx: TyCtxt<'a, 'gcx, 'tcx>,\n         def_id: DefId,\n-        substs: ty::ClosureSubsts<'tcx>,\n+        substs: &'tcx Substs<'tcx>,\n         location: Location,\n     ) -> ty::InstantiatedPredicates<'tcx> {\n         if let Some(closure_region_requirements) =\n@@ -2155,7 +2152,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n             );\n         }\n \n-        tcx.predicates_of(def_id).instantiate(tcx, substs.substs)\n+        tcx.predicates_of(def_id).instantiate(tcx, substs)\n     }\n \n     fn prove_trait_ref("}, {"sha": "c54a4f96b7dcf12cbe9aa702cce8d7a3f5cae4c8", "filename": "src/librustc_mir/borrow_check/nll/universal_regions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef1a40d5fec8678c4ae51cf2dcbed96934182b8c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef1a40d5fec8678c4ae51cf2dcbed96934182b8c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs?ref=ef1a40d5fec8678c4ae51cf2dcbed96934182b8c", "patch": "@@ -232,13 +232,13 @@ impl<'tcx> UniversalRegions<'tcx> {\n     /// `V[1]: V[2]`.\n     pub fn closure_mapping(\n         tcx: TyCtxt<'_, '_, 'tcx>,\n-        closure_ty: Ty<'tcx>,\n+        closure_substs: &'tcx Substs<'tcx>,\n         expected_num_vars: usize,\n         closure_base_def_id: DefId,\n     ) -> IndexVec<RegionVid, ty::Region<'tcx>> {\n         let mut region_mapping = IndexVec::with_capacity(expected_num_vars);\n         region_mapping.push(tcx.types.re_static);\n-        tcx.for_each_free_region(&closure_ty, |fr| {\n+        tcx.for_each_free_region(&closure_substs, |fr| {\n             region_mapping.push(fr);\n         });\n "}, {"sha": "6a423aea7eceb24e6046d4106e9b38d89eb4aa35", "filename": "src/test/ui/generator/generator-region-requirements.ast.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ef1a40d5fec8678c4ae51cf2dcbed96934182b8c/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef1a40d5fec8678c4ae51cf2dcbed96934182b8c/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.ast.stderr?ref=ef1a40d5fec8678c4ae51cf2dcbed96934182b8c", "patch": "@@ -0,0 +1,12 @@\n+error[E0621]: explicit lifetime required in the type of `x`\n+  --> $DIR/generator-region-requirements.rs:15:51\n+   |\n+LL | fn dangle(x: &mut i32) -> &'static mut i32 {\n+   |              -------- help: add explicit lifetime `'static` to the type of `x`: `&'static mut i32`\n+...\n+LL |             GeneratorState::Complete(c) => return c,\n+   |                                                   ^ lifetime `'static` required\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0621`."}, {"sha": "5d1050dc3526e490f52cb892a30541ee85ed4699", "filename": "src/test/ui/generator/generator-region-requirements.nll.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ef1a40d5fec8678c4ae51cf2dcbed96934182b8c/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef1a40d5fec8678c4ae51cf2dcbed96934182b8c/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.nll.stderr?ref=ef1a40d5fec8678c4ae51cf2dcbed96934182b8c", "patch": "@@ -0,0 +1,12 @@\n+error[E0621]: explicit lifetime required in the type of `x`\n+  --> $DIR/generator-region-requirements.rs:11:9\n+   |\n+LL | fn dangle(x: &mut i32) -> &'static mut i32 {\n+   |              -------- help: add explicit lifetime `'static` to the type of `x`: `&'static mut i32`\n+...\n+LL |         x\n+   |         ^ lifetime `'static` required\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0621`."}, {"sha": "59e7841309c57750ce5c18b036c743758ada5995", "filename": "src/test/ui/generator/generator-region-requirements.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ef1a40d5fec8678c4ae51cf2dcbed96934182b8c/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef1a40d5fec8678c4ae51cf2dcbed96934182b8c/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.rs?ref=ef1a40d5fec8678c4ae51cf2dcbed96934182b8c", "patch": "@@ -0,0 +1,21 @@\n+// revisions: ast nll\n+// ignore-compare-mode-nll\n+\n+#![feature(generators, generator_trait)]\n+#![cfg_attr(nll, feature(nll))]\n+use std::ops::{Generator, GeneratorState};\n+\n+fn dangle(x: &mut i32) -> &'static mut i32 {\n+    let mut g = || {\n+        yield;\n+        x\n+    };\n+    loop {\n+        match unsafe { g.resume() } {\n+            GeneratorState::Complete(c) => return c,\n+            GeneratorState::Yielded(_) => (),\n+        }\n+    }\n+}\n+\n+fn main() {}"}]}