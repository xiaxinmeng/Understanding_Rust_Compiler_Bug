{"sha": "fab74044dde091682869039c2bbbb764d4f70123", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhYjc0MDQ0ZGRlMDkxNjgyODY5MDM5YzJiYmJiNzY0ZDRmNzAxMjM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-19T05:10:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-19T05:10:07Z"}, "message": "Rollup merge of #65542 - estebank:kill-static-methods, r=Centril\n\nRefer to \"associated functions\" instead of \"static methods\"\n\nFix #59782.", "tree": {"sha": "3b0d004f2874d5b79e45e8e6db1bd07b8b0f577d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b0d004f2874d5b79e45e8e6db1bd07b8b0f577d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fab74044dde091682869039c2bbbb764d4f70123", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdqpqvCRBK7hj4Ov3rIwAAdHIIABr5MMI4G+kycGhZ0R4LI0hl\n9oxjwtYn0YBZOVFSWmWjfYyUjXcB+pSRqnUPtlSPRKHPBPU2GMXwycyKTaipcEzH\nL/1TeDZmE/TuAtr6ZTKi2BbpsjqPb5f5jUfmuGP/8YK5phT11eQ4F4zRExE3+17P\nJKEuvzZCs1/+xnUK9BiaBUihuTtu3Dussw3TmZD6WfqYQ5JN4HIbaG4Xripx/8eB\n4/x0MY0GMTD2UkrN5Y+vtIrTqYA2ROQ/hcMGA3P3zDj0BBadLy2qnE9UWlwXGc/h\nywSSmvj6jjPeU4ewKOvLyHUQ2UnwLdCD3seYzLfBUlB60wSYxfF30FteyOIsTZI=\n=gbQc\n-----END PGP SIGNATURE-----\n", "payload": "tree 3b0d004f2874d5b79e45e8e6db1bd07b8b0f577d\nparent 27f8c7990e26900e72184f0fbe55da110782be72\nparent 2b76c8b95ff866d8806fdc82fe270c4df02efc0b\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1571461807 +0200\ncommitter GitHub <noreply@github.com> 1571461807 +0200\n\nRollup merge of #65542 - estebank:kill-static-methods, r=Centril\n\nRefer to \"associated functions\" instead of \"static methods\"\n\nFix #59782.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fab74044dde091682869039c2bbbb764d4f70123", "html_url": "https://github.com/rust-lang/rust/commit/fab74044dde091682869039c2bbbb764d4f70123", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fab74044dde091682869039c2bbbb764d4f70123/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27f8c7990e26900e72184f0fbe55da110782be72", "url": "https://api.github.com/repos/rust-lang/rust/commits/27f8c7990e26900e72184f0fbe55da110782be72", "html_url": "https://github.com/rust-lang/rust/commit/27f8c7990e26900e72184f0fbe55da110782be72"}, {"sha": "2b76c8b95ff866d8806fdc82fe270c4df02efc0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b76c8b95ff866d8806fdc82fe270c4df02efc0b", "html_url": "https://github.com/rust-lang/rust/commit/2b76c8b95ff866d8806fdc82fe270c4df02efc0b"}], "stats": {"total": 118, "additions": 72, "deletions": 46}, "files": [{"sha": "cd6189c681da14db13693d9eb178bb0dcd6da050", "filename": "src/librustc_resolve/error_codes.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/fab74044dde091682869039c2bbbb764d4f70123/src%2Flibrustc_resolve%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fab74044dde091682869039c2bbbb764d4f70123/src%2Flibrustc_resolve%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Ferror_codes.rs?ref=fab74044dde091682869039c2bbbb764d4f70123", "patch": "@@ -1013,33 +1013,42 @@ fn h1() -> i32 {\n \"##,\n \n E0424: r##\"\n-The `self` keyword was used in a static method.\n+The `self` keyword was used inside of an associated function without a \"`self`\n+receiver\" parameter.\n \n Erroneous code example:\n \n ```compile_fail,E0424\n struct Foo;\n \n impl Foo {\n-    fn bar(self) {}\n+    // `bar` is a method, because it has a receiver parameter.\n+    fn bar(&self) {}\n \n+    // `foo` is not a method, because it has no receiver parameter.\n     fn foo() {\n-        self.bar(); // error: `self` is not available in a static method.\n+        self.bar(); // error: `self` value is a keyword only available in\n+                    //        methods with a `self` parameter\n     }\n }\n ```\n \n-Please check if the method's argument list should have contained `self`,\n-`&self`, or `&mut self` (in case you didn't want to create a static\n-method), and add it if so. Example:\n+The `self` keyword can only be used inside methods, which are associated\n+functions (functions defined inside of a `trait` or `impl` block) that have a\n+`self` receiver as its first parameter, like `self`, `&self`, `&mut self` or\n+`self: &mut Pin<Self>` (this last one is an example of an [\"abitrary `self`\n+type\"](https://github.com/rust-lang/rust/issues/44874)).\n+\n+Check if the associated function's parameter list should have contained a `self`\n+receiver for it to be a method, and add it if so. Example:\n \n ```\n struct Foo;\n \n impl Foo {\n-    fn bar(self) {}\n+    fn bar(&self) {}\n \n-    fn foo(self) {\n+    fn foo(self) { // `foo` is now a method.\n         self.bar(); // ok!\n     }\n }"}, {"sha": "73a282b1a0ec1e9e159133b675d85d3f2bdbcb66", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fab74044dde091682869039c2bbbb764d4f70123/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fab74044dde091682869039c2bbbb764d4f70123/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=fab74044dde091682869039c2bbbb764d4f70123", "patch": "@@ -345,6 +345,9 @@ struct LateResolutionVisitor<'a, 'b> {\n     /// The current self item if inside an ADT (used for better errors).\n     current_self_item: Option<NodeId>,\n \n+    /// The current enclosing funciton (used for better errors).\n+    current_function: Option<Span>,\n+\n     /// A list of labels as of yet unused. Labels will be removed from this map when\n     /// they are used (in a `break` or `continue` statement)\n     unused_labels: FxHashMap<NodeId, Span>,\n@@ -415,7 +418,8 @@ impl<'a, 'tcx> Visitor<'tcx> for LateResolutionVisitor<'a, '_> {\n             }\n         }\n     }\n-    fn visit_fn(&mut self, fn_kind: FnKind<'tcx>, declaration: &'tcx FnDecl, _: Span, _: NodeId) {\n+    fn visit_fn(&mut self, fn_kind: FnKind<'tcx>, declaration: &'tcx FnDecl, sp: Span, _: NodeId) {\n+        let previous_value = replace(&mut self.current_function, Some(sp));\n         debug!(\"(resolving function) entering function\");\n         let rib_kind = match fn_kind {\n             FnKind::ItemFn(..) => FnItemRibKind,\n@@ -441,6 +445,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LateResolutionVisitor<'a, '_> {\n                 debug!(\"(resolving function) leaving function\");\n             })\n         });\n+        self.current_function = previous_value;\n     }\n \n     fn visit_generics(&mut self, generics: &'tcx Generics) {\n@@ -546,6 +551,7 @@ impl<'a, 'b> LateResolutionVisitor<'a, '_> {\n             current_trait_assoc_types: Vec::new(),\n             current_self_type: None,\n             current_self_item: None,\n+            current_function: None,\n             unused_labels: Default::default(),\n             current_type_ascription: Vec::new(),\n         }"}, {"sha": "2721df4c687636d7b10924e0acae6e328a6664db", "filename": "src/librustc_resolve/late/diagnostics.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/fab74044dde091682869039c2bbbb764d4f70123/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fab74044dde091682869039c2bbbb764d4f70123/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs?ref=fab74044dde091682869039c2bbbb764d4f70123", "patch": "@@ -115,8 +115,10 @@ impl<'a> LateResolutionVisitor<'a, '_> {\n         if is_self_type(path, ns) {\n             syntax::diagnostic_used!(E0411);\n             err.code(DiagnosticId::Error(\"E0411\".into()));\n-            err.span_label(span, format!(\"`Self` is only available in impls, traits, \\\n-                                          and type definitions\"));\n+            err.span_label(\n+                span,\n+                format!(\"`Self` is only available in impls, traits, and type definitions\"),\n+            );\n             return (err, Vec::new());\n         }\n         if is_self_value(path, ns) {\n@@ -125,17 +127,16 @@ impl<'a> LateResolutionVisitor<'a, '_> {\n             syntax::diagnostic_used!(E0424);\n             err.code(DiagnosticId::Error(\"E0424\".into()));\n             err.span_label(span, match source {\n-                PathSource::Pat => {\n-                    format!(\"`self` value is a keyword \\\n-                             and may not be bound to \\\n-                             variables or shadowed\")\n-                }\n-                _ => {\n-                    format!(\"`self` value is a keyword \\\n-                             only available in methods \\\n-                             with `self` parameter\")\n-                }\n+                PathSource::Pat => format!(\n+                    \"`self` value is a keyword and may not be bound to variables or shadowed\",\n+                ),\n+                _ => format!(\n+                    \"`self` value is a keyword only available in methods with a `self` parameter\",\n+                ),\n             });\n+            if let Some(span) = &self.current_function {\n+                err.span_label(*span, \"this function doesn't have a `self` parameter\");\n+            }\n             return (err, Vec::new());\n         }\n "}, {"sha": "67ef69babdc0ac3ad99f155e9e14c3ce1c40acb9", "filename": "src/libsyntax_ext/deriving/clone.rs", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/fab74044dde091682869039c2bbbb764d4f70123/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fab74044dde091682869039c2bbbb764d4f70123/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs?ref=fab74044dde091682869039c2bbbb764d4f70123", "patch": "@@ -174,14 +174,12 @@ fn cs_clone(name: &str,\n             all_fields = af;\n             vdata = &variant.data;\n         }\n-        EnumNonMatchingCollapsed(..) => {\n-            cx.span_bug(trait_span,\n-                        &format!(\"non-matching enum variants in \\\n-                                 `derive({})`\",\n-                                 name))\n-        }\n+        EnumNonMatchingCollapsed(..) => cx.span_bug(trait_span, &format!(\n+            \"non-matching enum variants in `derive({})`\",\n+            name,\n+        )),\n         StaticEnum(..) | StaticStruct(..) => {\n-            cx.span_bug(trait_span, &format!(\"static method in `derive({})`\", name))\n+            cx.span_bug(trait_span, &format!(\"associated function in `derive({})`\", name))\n         }\n     }\n \n@@ -191,12 +189,10 @@ fn cs_clone(name: &str,\n                 .map(|field| {\n                     let ident = match field.name {\n                         Some(i) => i,\n-                        None => {\n-                            cx.span_bug(trait_span,\n-                                        &format!(\"unnamed field in normal struct in \\\n-                                                `derive({})`\",\n-                                                    name))\n-                        }\n+                        None => cx.span_bug(trait_span, &format!(\n+                            \"unnamed field in normal struct in `derive({})`\",\n+                            name,\n+                        )),\n                     };\n                     let call = subcall(cx, field);\n                     cx.field_imm(field.span, ident, call)"}, {"sha": "cfc0f3cd6cbf9afdfaccee628f9a0661b4e0bdf4", "filename": "src/libsyntax_ext/deriving/default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fab74044dde091682869039c2bbbb764d4f70123/src%2Flibsyntax_ext%2Fderiving%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fab74044dde091682869039c2bbbb764d4f70123/src%2Flibsyntax_ext%2Fderiving%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fdefault.rs?ref=fab74044dde091682869039c2bbbb764d4f70123", "patch": "@@ -75,6 +75,6 @@ fn default_substructure(cx: &mut ExtCtxt<'_>,\n             // let compilation continue\n             DummyResult::raw_expr(trait_span, true)\n         }\n-        _ => cx.span_bug(trait_span, \"Non-static method in `derive(Default)`\"),\n+        _ => cx.span_bug(trait_span, \"method in `derive(Default)`\"),\n     };\n }"}, {"sha": "216338c1a8861576790caf024eae8d72886ff7e8", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fab74044dde091682869039c2bbbb764d4f70123/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fab74044dde091682869039c2bbbb764d4f70123/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=fab74044dde091682869039c2bbbb764d4f70123", "patch": "@@ -1055,9 +1055,7 @@ impl<'a> MethodDef<'a> {\n                 })\n                 .collect()\n         } else {\n-            cx.span_bug(trait_.span,\n-                        \"no self arguments to non-static method in generic \\\n-                         `derive`\")\n+            cx.span_bug(trait_.span, \"no `self` parameter for method in generic `derive`\")\n         };\n \n         // body of the inner most destructuring match"}, {"sha": "567d1b3cc75f4c44447645e60e8c5fb3ee59240d", "filename": "src/test/ui/error-codes/E0424.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fab74044dde091682869039c2bbbb764d4f70123/src%2Ftest%2Fui%2Ferror-codes%2FE0424.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fab74044dde091682869039c2bbbb764d4f70123/src%2Ftest%2Fui%2Ferror-codes%2FE0424.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0424.stderr?ref=fab74044dde091682869039c2bbbb764d4f70123", "patch": "@@ -1,14 +1,20 @@\n error[E0424]: expected value, found module `self`\n   --> $DIR/E0424.rs:7:9\n    |\n-LL |         self.bar();\n-   |         ^^^^ `self` value is a keyword only available in methods with `self` parameter\n+LL | /     fn foo() {\n+LL | |         self.bar();\n+   | |         ^^^^ `self` value is a keyword only available in methods with a `self` parameter\n+LL | |     }\n+   | |_____- this function doesn't have a `self` parameter\n \n error[E0424]: expected unit struct/variant or constant, found module `self`\n   --> $DIR/E0424.rs:12:9\n    |\n-LL |     let self = \"self\";\n-   |         ^^^^ `self` value is a keyword and may not be bound to variables or shadowed\n+LL | / fn main () {\n+LL | |     let self = \"self\";\n+   | |         ^^^^ `self` value is a keyword and may not be bound to variables or shadowed\n+LL | | }\n+   | |_- this function doesn't have a `self` parameter\n \n error: aborting due to 2 previous errors\n "}, {"sha": "329543114a610af024f2e64af610188782df3b2b", "filename": "src/test/ui/resolve/issue-2356.stderr", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fab74044dde091682869039c2bbbb764d4f70123/src%2Ftest%2Fui%2Fresolve%2Fissue-2356.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fab74044dde091682869039c2bbbb764d4f70123/src%2Ftest%2Fui%2Fresolve%2Fissue-2356.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-2356.stderr?ref=fab74044dde091682869039c2bbbb764d4f70123", "patch": "@@ -61,8 +61,14 @@ LL |         purr();\n error[E0424]: expected value, found module `self`\n   --> $DIR/issue-2356.rs:65:8\n    |\n-LL |     if self.whiskers > 3 {\n-   |        ^^^^ `self` value is a keyword only available in methods with `self` parameter\n+LL | /   fn meow() {\n+LL | |     if self.whiskers > 3 {\n+   | |        ^^^^ `self` value is a keyword only available in methods with a `self` parameter\n+LL | |\n+LL | |         println!(\"MEOW\");\n+LL | |     }\n+LL | |   }\n+   | |___- this function doesn't have a `self` parameter\n \n error[E0425]: cannot find function `grow_older` in this scope\n   --> $DIR/issue-2356.rs:72:5\n@@ -97,8 +103,12 @@ LL |     purr_louder();\n error[E0424]: expected value, found module `self`\n   --> $DIR/issue-2356.rs:92:5\n    |\n-LL |     self += 1;\n-   |     ^^^^ `self` value is a keyword only available in methods with `self` parameter\n+LL | / fn main() {\n+LL | |     self += 1;\n+   | |     ^^^^ `self` value is a keyword only available in methods with a `self` parameter\n+LL | |\n+LL | | }\n+   | |_- this function doesn't have a `self` parameter\n \n error: aborting due to 17 previous errors\n "}]}