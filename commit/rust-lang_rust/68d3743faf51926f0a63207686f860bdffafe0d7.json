{"sha": "68d3743faf51926f0a63207686f860bdffafe0d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4ZDM3NDNmYWY1MTkyNmYwYTYzMjA3Njg2Zjg2MGJkZmZhZmUwZDc=", "commit": {"author": {"name": "adamrk", "email": "ark.email@gmail.com", "date": "2020-02-15T21:12:48Z"}, "committer": {"name": "adamrk", "email": "ark.email@gmail.com", "date": "2020-02-16T15:10:32Z"}, "message": "replace uses of VariantData::is_unit with VariantData::kind", "tree": {"sha": "86221c859db5f543f9e5c91b3176f2103a30d86a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86221c859db5f543f9e5c91b3176f2103a30d86a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68d3743faf51926f0a63207686f860bdffafe0d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68d3743faf51926f0a63207686f860bdffafe0d7", "html_url": "https://github.com/rust-lang/rust/commit/68d3743faf51926f0a63207686f860bdffafe0d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68d3743faf51926f0a63207686f860bdffafe0d7/comments", "author": {"login": "adamrk", "id": 16367467, "node_id": "MDQ6VXNlcjE2MzY3NDY3", "avatar_url": "https://avatars.githubusercontent.com/u/16367467?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamrk", "html_url": "https://github.com/adamrk", "followers_url": "https://api.github.com/users/adamrk/followers", "following_url": "https://api.github.com/users/adamrk/following{/other_user}", "gists_url": "https://api.github.com/users/adamrk/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamrk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamrk/subscriptions", "organizations_url": "https://api.github.com/users/adamrk/orgs", "repos_url": "https://api.github.com/users/adamrk/repos", "events_url": "https://api.github.com/users/adamrk/events{/privacy}", "received_events_url": "https://api.github.com/users/adamrk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "adamrk", "id": 16367467, "node_id": "MDQ6VXNlcjE2MzY3NDY3", "avatar_url": "https://avatars.githubusercontent.com/u/16367467?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamrk", "html_url": "https://github.com/adamrk", "followers_url": "https://api.github.com/users/adamrk/followers", "following_url": "https://api.github.com/users/adamrk/following{/other_user}", "gists_url": "https://api.github.com/users/adamrk/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamrk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamrk/subscriptions", "organizations_url": "https://api.github.com/users/adamrk/orgs", "repos_url": "https://api.github.com/users/adamrk/repos", "events_url": "https://api.github.com/users/adamrk/events{/privacy}", "received_events_url": "https://api.github.com/users/adamrk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04aff742b15ebab39f493ba480d20c61e1f3bdd5", "url": "https://api.github.com/repos/rust-lang/rust/commits/04aff742b15ebab39f493ba480d20c61e1f3bdd5", "html_url": "https://github.com/rust-lang/rust/commit/04aff742b15ebab39f493ba480d20c61e1f3bdd5"}], "stats": {"total": 17, "additions": 7, "deletions": 10}, "files": [{"sha": "985f409e873936f013f58702b26b40beb077a5aa", "filename": "crates/ra_hir_def/src/adt.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/68d3743faf51926f0a63207686f860bdffafe0d7/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68d3743faf51926f0a63207686f860bdffafe0d7/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fadt.rs?ref=68d3743faf51926f0a63207686f860bdffafe0d7", "patch": "@@ -147,12 +147,6 @@ impl VariantData {\n             VariantData::Unit => StructKind::Unit,\n         }\n     }\n-    pub fn is_unit(&self) -> bool {\n-        match self {\n-            VariantData::Unit => true,\n-            _ => false,\n-        }\n-    }\n }\n \n impl HasChildSource for VariantId {"}, {"sha": "a5b2734a051b7553501a444d6dc13bf741acd1e0", "filename": "crates/ra_hir_ty/src/lower.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/68d3743faf51926f0a63207686f860bdffafe0d7/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68d3743faf51926f0a63207686f860bdffafe0d7/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flower.rs?ref=68d3743faf51926f0a63207686f860bdffafe0d7", "patch": "@@ -9,6 +9,7 @@ use std::iter;\n use std::sync::Arc;\n \n use hir_def::{\n+    adt::StructKind,\n     builtin_type::BuiltinType,\n     generics::{TypeParamProvenance, WherePredicate, WherePredicateTarget},\n     path::{GenericArg, Path, PathSegment, PathSegments},\n@@ -805,8 +806,9 @@ fn fn_sig_for_struct_constructor(db: &impl HirDatabase, def: StructId) -> PolyFn\n /// Build the type of a tuple struct constructor.\n fn type_for_struct_constructor(db: &impl HirDatabase, def: StructId) -> Binders<Ty> {\n     let struct_data = db.struct_data(def.into());\n-    if struct_data.variant_data.is_unit() {\n-        return type_for_adt(db, def.into()); // Unit struct\n+    match struct_data.variant_data.kind() {\n+        StructKind::Unit => return type_for_adt(db, def.into()),\n+        StructKind::Tuple | StructKind::Record => (),\n     }\n     let generics = generics(db, def.into());\n     let substs = Substs::bound_vars(&generics);\n@@ -830,8 +832,9 @@ fn fn_sig_for_enum_variant_constructor(db: &impl HirDatabase, def: EnumVariantId\n fn type_for_enum_variant_constructor(db: &impl HirDatabase, def: EnumVariantId) -> Binders<Ty> {\n     let enum_data = db.enum_data(def.parent);\n     let var_data = &enum_data.variants[def.local_id].variant_data;\n-    if var_data.is_unit() {\n-        return type_for_adt(db, def.parent.into()); // Unit variant\n+    match var_data.kind() {\n+        StructKind::Unit => return type_for_adt(db, def.parent.into()),\n+        StructKind::Record | StructKind::Tuple => (),\n     }\n     let generics = generics(db, def.parent.into());\n     let substs = Substs::bound_vars(&generics);"}]}