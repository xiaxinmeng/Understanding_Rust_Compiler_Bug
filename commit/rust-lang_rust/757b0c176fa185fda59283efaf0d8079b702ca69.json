{"sha": "757b0c176fa185fda59283efaf0d8079b702ca69", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1N2IwYzE3NmZhMTg1ZmRhNTkyODNlZmFmMGQ4MDc5YjcwMmNhNjk=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2015-07-28T13:52:54Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2015-07-28T16:51:08Z"}, "message": "prohibit the lhs of an @-pattern being a constant\n\nas this breaks code that worked under some conditions, this is a\n[breaking-change]\n\nFixes #27033\nFixes #27077", "tree": {"sha": "4537c9102290e62de75a32cb1043b58ca46f2ff8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4537c9102290e62de75a32cb1043b58ca46f2ff8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/757b0c176fa185fda59283efaf0d8079b702ca69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/757b0c176fa185fda59283efaf0d8079b702ca69", "html_url": "https://github.com/rust-lang/rust/commit/757b0c176fa185fda59283efaf0d8079b702ca69", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/757b0c176fa185fda59283efaf0d8079b702ca69/comments", "author": null, "committer": null, "parents": [{"sha": "4c371bb6de7a1c21b7403b86a66a8ce3318ff003", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c371bb6de7a1c21b7403b86a66a8ce3318ff003", "html_url": "https://github.com/rust-lang/rust/commit/4c371bb6de7a1c21b7403b86a66a8ce3318ff003"}], "stats": {"total": 39, "additions": 30, "deletions": 9}, "files": [{"sha": "96d6269bfe17f2894cdeced35f9d4f917d9d9e17", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/757b0c176fa185fda59283efaf0d8079b702ca69/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/757b0c176fa185fda59283efaf0d8079b702ca69/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=757b0c176fa185fda59283efaf0d8079b702ca69", "patch": "@@ -2666,23 +2666,22 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         let pat_id = pattern.id;\n         walk_pat(pattern, |pattern| {\n             match pattern.node {\n-                PatIdent(binding_mode, ref path1, _) => {\n-\n-                    // The meaning of pat_ident with no type parameters\n+                PatIdent(binding_mode, ref path1, ref at_rhs) => {\n+                    // The meaning of PatIdent with no type parameters\n                     // depends on whether an enum variant or unit-like struct\n                     // with that name is in scope. The probing lookup has to\n                     // be careful not to emit spurious errors. Only matching\n                     // patterns (match) can match nullary variants or\n-                    // unit-like structs. For binding patterns (let), matching\n-                    // such a value is simply disallowed (since it's rarely\n-                    // what you want).\n+                    // unit-like structs. For binding patterns (let\n+                    // and the LHS of @-patterns), matching such a value is\n+                    // simply disallowed (since it's rarely what you want).\n+                    let const_ok = mode == RefutableMode && at_rhs.is_none();\n \n                     let ident = path1.node;\n                     let renamed = mtwt::resolve(ident);\n \n                     match self.resolve_bare_identifier_pattern(ident.name, pattern.span) {\n-                        FoundStructOrEnumVariant(def, lp)\n-                                if mode == RefutableMode => {\n+                        FoundStructOrEnumVariant(def, lp) if const_ok => {\n                             debug!(\"(resolving pattern) resolving `{}` to \\\n                                     struct or enum variant\",\n                                    renamed);\n@@ -2705,7 +2704,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                                     renamed)\n                             );\n                         }\n-                        FoundConst(def, lp) if mode == RefutableMode => {\n+                        FoundConst(def, lp) if const_ok => {\n                             debug!(\"(resolving pattern) resolving `{}` to \\\n                                     constant\",\n                                    renamed);"}, {"sha": "051edfe5f451be041cfbff8c9d513400573c9b4d", "filename": "src/test/compile-fail/issue-27033.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/757b0c176fa185fda59283efaf0d8079b702ca69/src%2Ftest%2Fcompile-fail%2Fissue-27033.rs", "raw_url": "https://github.com/rust-lang/rust/raw/757b0c176fa185fda59283efaf0d8079b702ca69/src%2Ftest%2Fcompile-fail%2Fissue-27033.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-27033.rs?ref=757b0c176fa185fda59283efaf0d8079b702ca69", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    match Some(1) {\n+        None @ _ => {} //~ ERROR declaration of `None` shadows an enum variant\n+    };\n+    const C: u8 = 1;\n+    match 1 {\n+        C @ 2 => { //~ ERROR only irrefutable patterns allowed here\n+            println!(\"{}\", C);\n+        }\n+        _ => {}\n+    };\n+}"}]}