{"sha": "3e8900bcfdb819a73618aab42a8d52defffecf36", "node_id": "C_kwDOAAsO6NoAKDNlODkwMGJjZmRiODE5YTczNjE4YWFiNDJhOGQ1MmRlZmZmZWNmMzY", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2023-04-26T07:51:54Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2023-04-26T07:51:54Z"}, "message": "Merge from rustc", "tree": {"sha": "c3f22485edb3b45fb205f63fbace322390ecc280", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3f22485edb3b45fb205f63fbace322390ecc280"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e8900bcfdb819a73618aab42a8d52defffecf36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e8900bcfdb819a73618aab42a8d52defffecf36", "html_url": "https://github.com/rust-lang/rust/commit/3e8900bcfdb819a73618aab42a8d52defffecf36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e8900bcfdb819a73618aab42a8d52defffecf36/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef404a86784885e6255bdee493f9d401473d0fe3", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef404a86784885e6255bdee493f9d401473d0fe3", "html_url": "https://github.com/rust-lang/rust/commit/ef404a86784885e6255bdee493f9d401473d0fe3"}, {"sha": "33871c97ab67d90cfca5c22183f3a4e200d6a976", "url": "https://api.github.com/repos/rust-lang/rust/commits/33871c97ab67d90cfca5c22183f3a4e200d6a976", "html_url": "https://github.com/rust-lang/rust/commit/33871c97ab67d90cfca5c22183f3a4e200d6a976"}], "stats": {"total": 48, "additions": 25, "deletions": 23}, "files": [{"sha": "13306b4809c33eca5183f69c4f8910df9706dd72", "filename": "src/tools/miri/src/concurrency/data_race.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e8900bcfdb819a73618aab42a8d52defffecf36/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fdata_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e8900bcfdb819a73618aab42a8d52defffecf36/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fdata_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fdata_race.rs?ref=3e8900bcfdb819a73618aab42a8d52defffecf36", "patch": "@@ -48,7 +48,7 @@ use std::{\n \n use rustc_ast::Mutability;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_index::vec::{Idx, IndexVec};\n+use rustc_index::{Idx, IndexVec};\n use rustc_middle::mir;\n use rustc_span::Span;\n use rustc_target::abi::{Align, Size};"}, {"sha": "1f57e8b2b0abd5b40dfc41e84acf73abcd8db7ff", "filename": "src/tools/miri/src/concurrency/init_once.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e8900bcfdb819a73618aab42a8d52defffecf36/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Finit_once.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e8900bcfdb819a73618aab42a8d52defffecf36/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Finit_once.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Finit_once.rs?ref=3e8900bcfdb819a73618aab42a8d52defffecf36", "patch": "@@ -1,7 +1,7 @@\n use std::collections::VecDeque;\n use std::num::NonZeroU32;\n \n-use rustc_index::vec::Idx;\n+use rustc_index::Idx;\n \n use super::sync::EvalContextExtPriv as _;\n use super::thread::MachineCallback;"}, {"sha": "f37a2fd2cd5b6d12638c730983de94de229f7eeb", "filename": "src/tools/miri/src/concurrency/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e8900bcfdb819a73618aab42a8d52defffecf36/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e8900bcfdb819a73618aab42a8d52defffecf36/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fsync.rs?ref=3e8900bcfdb819a73618aab42a8d52defffecf36", "patch": "@@ -5,7 +5,7 @@ use std::ops::Not;\n use log::trace;\n \n use rustc_data_structures::fx::FxHashMap;\n-use rustc_index::vec::{Idx, IndexVec};\n+use rustc_index::{Idx, IndexVec};\n \n use super::init_once::InitOnce;\n use super::vector_clock::VClock;"}, {"sha": "a8e4a5fa3dd3d94c25b486a482cb8400adbfc0ad", "filename": "src/tools/miri/src/concurrency/thread.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3e8900bcfdb819a73618aab42a8d52defffecf36/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e8900bcfdb819a73618aab42a8d52defffecf36/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fthread.rs?ref=3e8900bcfdb819a73618aab42a8d52defffecf36", "patch": "@@ -10,7 +10,7 @@ use log::trace;\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::def_id::DefId;\n-use rustc_index::vec::{Idx, IndexVec};\n+use rustc_index::{Idx, IndexVec};\n use rustc_middle::mir::Mutability;\n use rustc_middle::ty::layout::TyAndLayout;\n use rustc_span::Span;\n@@ -272,8 +272,9 @@ impl Time {\n     fn get_wait_time(&self, clock: &Clock) -> Duration {\n         match self {\n             Time::Monotonic(instant) => instant.duration_since(clock.now()),\n-            Time::RealTime(time) =>\n-                time.duration_since(SystemTime::now()).unwrap_or(Duration::new(0, 0)),\n+            Time::RealTime(time) => {\n+                time.duration_since(SystemTime::now()).unwrap_or(Duration::new(0, 0))\n+            }\n         }\n     }\n }\n@@ -603,10 +604,11 @@ impl<'mir, 'tcx: 'mir> ThreadManager<'mir, 'tcx> {\n         // this allows us to have a deterministic scheduler.\n         for thread in self.threads.indices() {\n             match self.timeout_callbacks.entry(thread) {\n-                Entry::Occupied(entry) =>\n+                Entry::Occupied(entry) => {\n                     if entry.get().call_time.get_wait_time(clock) == Duration::new(0, 0) {\n                         return Some((thread, entry.remove().callback));\n-                    },\n+                    }\n+                }\n                 Entry::Vacant(_) => {}\n             }\n         }"}, {"sha": "b36c6be5a7201720adbbc0e20dae33808fa8342c", "filename": "src/tools/miri/src/concurrency/vector_clock.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3e8900bcfdb819a73618aab42a8d52defffecf36/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fvector_clock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e8900bcfdb819a73618aab42a8d52defffecf36/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fvector_clock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fvector_clock.rs?ref=3e8900bcfdb819a73618aab42a8d52defffecf36", "patch": "@@ -1,4 +1,4 @@\n-use rustc_index::vec::Idx;\n+use rustc_index::Idx;\n use rustc_span::{Span, SpanData, DUMMY_SP};\n use smallvec::SmallVec;\n use std::{\n@@ -212,14 +212,16 @@ impl PartialOrd for VClock {\n         for (l, r) in iter {\n             match order {\n                 Ordering::Equal => order = l.cmp(r),\n-                Ordering::Less =>\n+                Ordering::Less => {\n                     if l > r {\n                         return None;\n-                    },\n-                Ordering::Greater =>\n+                    }\n+                }\n+                Ordering::Greater => {\n                     if l < r {\n                         return None;\n-                    },\n+                    }\n+                }\n             }\n         }\n \n@@ -234,18 +236,16 @@ impl PartialOrd for VClock {\n             Ordering::Equal => Some(order),\n             // Right has at least 1 element > than the implicit 0,\n             // so the only valid values are Ordering::Less or None.\n-            Ordering::Less =>\n-                match order {\n-                    Ordering::Less | Ordering::Equal => Some(Ordering::Less),\n-                    Ordering::Greater => None,\n-                },\n+            Ordering::Less => match order {\n+                Ordering::Less | Ordering::Equal => Some(Ordering::Less),\n+                Ordering::Greater => None,\n+            },\n             // Left has at least 1 element > than the implicit 0,\n             // so the only valid values are Ordering::Greater or None.\n-            Ordering::Greater =>\n-                match order {\n-                    Ordering::Greater | Ordering::Equal => Some(Ordering::Greater),\n-                    Ordering::Less => None,\n-                },\n+            Ordering::Greater => match order {\n+                Ordering::Greater | Ordering::Equal => Some(Ordering::Greater),\n+                Ordering::Less => None,\n+            },\n         }\n     }\n "}]}