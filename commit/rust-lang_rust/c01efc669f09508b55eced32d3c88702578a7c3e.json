{"sha": "c01efc669f09508b55eced32d3c88702578a7c3e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwMWVmYzY2OWYwOTUwOGI1NWVjZWQzMmQzYzg4NzAyNTc4YTdjM2U=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-06-16T21:30:45Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-06-16T21:30:45Z"}, "message": "Initial git commit.", "tree": {"sha": "08db2c334dc9be2ed6fff214be6a641f6c1b20b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08db2c334dc9be2ed6fff214be6a641f6c1b20b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c01efc669f09508b55eced32d3c88702578a7c3e", "comment_count": 26, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c01efc669f09508b55eced32d3c88702578a7c3e", "html_url": "https://github.com/rust-lang/rust/commit/c01efc669f09508b55eced32d3c88702578a7c3e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c01efc669f09508b55eced32d3c88702578a7c3e/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [], "stats": {"total": 886, "additions": 886, "deletions": 0}, "files": [{"sha": "850bcb6a92ca3874cfbbd62e60e6b8af48e65a49", "filename": ".gitignore", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c01efc669f09508b55eced32d3c88702578a7c3e/.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/c01efc669f09508b55eced32d3c88702578a7c3e/.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitignore?ref=c01efc669f09508b55eced32d3c88702578a7c3e", "patch": "@@ -0,0 +1,10 @@\n+*~\n+*.out\n+*.exe\n+*.orig\n+*.cmo\n+*.cmi\n+*.d\n+*.o\n+.hg/\n+.hgignore"}, {"sha": "1668602702209970b8c7fea622d1cf29cadec544", "filename": "AUTHORS.txt", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c01efc669f09508b55eced32d3c88702578a7c3e/AUTHORS.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c01efc669f09508b55eced32d3c88702578a7c3e/AUTHORS.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/AUTHORS.txt?ref=c01efc669f09508b55eced32d3c88702578a7c3e", "patch": "@@ -0,0 +1,7 @@\n+Rust authors:\n+\n+Graydon Hoare <graydon@mozilla.com>\n+Andreas Gal <gal@mozilla.com>\n+Dave Herman <dherman@mozilla.com>\n+Patrick Walton <pwalton@mozilla.com>\n+Brendan Eich <brendan@mozilla.com>"}, {"sha": "efe7e76ec64813f90703ce2c1d30f7b2a1c2d664", "filename": "LICENSE.txt", "status": "added", "additions": 177, "deletions": 0, "changes": 177, "blob_url": "https://github.com/rust-lang/rust/blob/c01efc669f09508b55eced32d3c88702578a7c3e/LICENSE.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c01efc669f09508b55eced32d3c88702578a7c3e/LICENSE.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/LICENSE.txt?ref=c01efc669f09508b55eced32d3c88702578a7c3e", "patch": "@@ -0,0 +1,177 @@\n+Short version for non-lawyers:\n+\n+This work licensed under BSD-like terms.\n+\n+\n+Long version follows:\n+\n+The collective work presented here includes packages written by third parties.\n+The following third party packages are included:\n+\n+\n+* The ISAAC pseudo random number generation package. Code for this package is\n+  found in the src/rt/isaac directory, within this distribution. This package\n+  is redistributed under the following terms, as noted in its source:\n+\n+    By Bob Jenkins, 1996, Public Domain\n+\n+\n+* The ACME large integer package. Code for this package is found in\n+  the src/rt/bigint directory, within this distribution. This package\n+  is redistributed under the following terms, as noted in its source:\n+\n+    Copyright \u00a9 2000 by Jef Poskanzer <jef@mail.acme.com>.\n+    All rights reserved.\n+\n+    Redistribution and use in source and binary forms, with or without\n+    modification, are permitted provided that the following conditions\n+    are met:\n+    1. Redistributions of source code must retain the above copyright\n+       notice, this list of conditions and the following disclaimer.\n+    2. Redistributions in binary form must reproduce the above copyright\n+       notice, this list of conditions and the following disclaimer in the\n+       documentation and/or other materials provided with the distribution.\n+\n+    THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND\n+    ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n+    ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE\n+    FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+    DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\n+    OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n+    HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n+    LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\n+    OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+    SUCH DAMAGE.\n+\n+\n+* The UTHASH hash table package. Code for this package is found in the\n+  src/rt/uthash directory within this distribution. This package is\n+  redistributed under the following terms, as noted in its source:\n+\n+    Copyright (c) 2003-2009, Troy D. Hanson     http://uthash.sourceforge.net\n+    All rights reserved.\n+\n+    Redistribution and use in source and binary forms, with or without\n+    modification, are permitted provided that the following conditions are met:\n+\n+        * Redistributions of source code must retain the above copyright\n+          notice, this list of conditions and the following disclaimer.\n+\n+    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS\n+    IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED\n+    TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\n+    PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER\n+    OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n+    EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n+    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n+    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n+    LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n+    NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+    SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+\n+\n+* Two header files that are part of the Valgrind package. These files are found\n+  at src/rt/valgrind.h and src/rt/memcheck.h, within this distribution. These\n+  files are redistributed under the following terms, as noted in them:\n+\n+  for src/rt/valgrind.h:\n+\n+    This file is part of Valgrind, a dynamic binary instrumentation\n+    framework.\n+\n+    Copyright (C) 2000-2008 Julian Seward.  All rights reserved.\n+\n+    Redistribution and use in source and binary forms, with or without\n+    modification, are permitted provided that the following conditions\n+    are met:\n+\n+    1. Redistributions of source code must retain the above copyright\n+       notice, this list of conditions and the following disclaimer.\n+\n+    2. The origin of this software must not be misrepresented; you must\n+       not claim that you wrote the original software.  If you use this\n+       software in a product, an acknowledgment in the product\n+       documentation would be appreciated but is not required.\n+\n+    3. Altered source versions must be plainly marked as such, and must\n+       not be misrepresented as being the original software.\n+\n+    4. The name of the author may not be used to endorse or promote\n+       products derived from this software without specific prior written\n+       permission.\n+\n+    THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS\n+    OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+    WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n+    ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY\n+    DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+    DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE\n+    GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n+    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+    WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n+    NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+    SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+\n+  for src/rt/memcheck.h:\n+\n+    This file is part of MemCheck, a heavyweight Valgrind tool for\n+    detecting memory errors.\n+\n+    Copyright (C) 2000-2009 Julian Seward.  All rights reserved.\n+\n+    Redistribution and use in source and binary forms, with or without\n+    modification, are permitted provided that the following conditions\n+    are met:\n+\n+    1. Redistributions of source code must retain the above copyright\n+       notice, this list of conditions and the following disclaimer.\n+\n+    2. The origin of this software must not be misrepresented; you must\n+       not claim that you wrote the original software.  If you use this\n+       software in a product, an acknowledgment in the product\n+       documentation would be appreciated but is not required.\n+\n+    3. Altered source versions must be plainly marked as such, and must\n+       not be misrepresented as being the original software.\n+\n+    4. The name of the author may not be used to endorse or promote\n+       products derived from this software without specific prior written\n+       permission.\n+\n+    THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS\n+    OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+    WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n+    ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY\n+    DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+    DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE\n+    GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n+    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+    WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n+    NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+    SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+\n+\n+The remaining code and documentation in the collective work presented here, as\n+well as the collective work itslf, is distributed under the following terms:\n+\n+    Copyright (c) 2006-2010 Graydon Hoare\n+    Copyright (c) 2009-2010 Mozilla Foundation\n+\n+    Permission is hereby granted, free of charge, to any person obtaining a copy\n+    of this software and associated documentation files (the \"Software\"), to deal\n+    in the Software without restriction, including without limitation the rights\n+    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+    copies of the Software, and to permit persons to whom the Software is\n+    furnished to do so, subject to the following conditions:\n+\n+    The above copyright notice and this permission notice shall be included in\n+    all copies or substantial portions of the Software.\n+\n+    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+    THE SOFTWARE."}, {"sha": "a2aaa235c40b746ccc940db7c2d04dbb0e652d86", "filename": "README", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c01efc669f09508b55eced32d3c88702578a7c3e/README", "raw_url": "https://github.com/rust-lang/rust/raw/c01efc669f09508b55eced32d3c88702578a7c3e/README", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README?ref=c01efc669f09508b55eced32d3c88702578a7c3e", "patch": "@@ -0,0 +1,4 @@\n+This is a compiler and suite of associated libraries and documentation for the\n+Rust programming language.\n+\n+See LICENSE.txt for terms of copyright and redistribution."}, {"sha": "4ac419c2e184747b5c394d2d0f594140b61f15cc", "filename": "doc/Makefile", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c01efc669f09508b55eced32d3c88702578a7c3e/doc%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c01efc669f09508b55eced32d3c88702578a7c3e/doc%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2FMakefile?ref=c01efc669f09508b55eced32d3c88702578a7c3e", "patch": "@@ -0,0 +1,11 @@\n+\n+all: rust.pdf rust.html\n+\n+%.pdf: %.texi\n+\ttexi2pdf $<\n+\n+%.html: %.texi\n+\tmakeinfo --html --force --no-split --output=$@ $<\n+\n+clean:\n+\trm -f rust.aux rust.cp rust.fn rust.ky rust.log rust.pdf rust.html rust.pg rust.toc rust.tp rust.vr\n\\ No newline at end of file"}, {"sha": "95d530dfa81edf4e4e796b8d8553e7a53260a334", "filename": "src/Makefile", "status": "added", "additions": 677, "deletions": 0, "changes": 677, "blob_url": "https://github.com/rust-lang/rust/blob/c01efc669f09508b55eced32d3c88702578a7c3e/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c01efc669f09508b55eced32d3c88702578a7c3e/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=c01efc669f09508b55eced32d3c88702578a7c3e", "patch": "@@ -0,0 +1,677 @@\n+######################################################################\n+# Auto-configuration\n+######################################################################\n+\n+ifdef VERBOSE\n+  CFG_QUIET :=\n+  CFG_ECHO =\n+else\n+  CFG_QUIET := @\n+  CFG_ECHO = echo $(1)\n+endif\n+\n+CFG_OSTYPE := $(shell uname -s)\n+CFG_CPUTYPE := $(shell uname -m)\n+\n+ifneq ($(MAKE_RESTARTS),)\n+CFG_INFO := $(info cfg: make restarts: $(MAKE_RESTARTS))\n+endif\n+\n+CFG_INFO := $(info cfg: building on $(CFG_OSTYPE) $(CFG_CPUTYPE))\n+\n+CFG_GCC_COMPILE_FLAGS :=\n+CFG_GCC_LINK_FLAGS :=\n+CFG_VALGRIND :=\n+\n+CFG_LLVM_CONFIG := llvm-config\n+CFG_BOOT_FLAGS :=\n+\n+ifeq ($(CFG_OSTYPE), Linux)\n+  CFG_RUNTIME := librustrt.so\n+  CFG_STDLIB := libstd.so\n+  CFG_GCC_COMPILE_FLAGS += -fPIC\n+  CFG_GCC_LINK_FLAGS += -shared -fPIC -ldl -lpthread\n+  ifeq ($(CFG_CPUTYPE), x86_64)\n+    CFG_GCC_COMPILE_FLAGS += -m32\n+    CFG_GCC_LINK_FLAGS += -m32\n+  endif\n+  CFG_NATIVE := 1\n+  CFG_UNIXY := 1\n+  CFG_VALGRIND := $(shell which valgrind)\n+  ifdef CFG_VALGRIND\n+    CFG_VALGRIND += --run-libc-freeres=no --leak-check=full --quiet --vex-iropt-level=0\n+  endif\n+endif\n+\n+ifeq ($(CFG_OSTYPE), Darwin)\n+  CFG_RUNTIME := librustrt.dylib\n+  CFG_STDLIB := libstd.dylib\n+  CFG_UNIXY := 1\n+  CFG_GCC_LINK_FLAGS += -dynamiclib -lpthread\n+  # Darwin has a very blurry notion of \"64 bit\", and claims it's running\n+  # \"on an i386\" when the whole userspace is 64-bit and the compiler\n+  # emits 64-bit binaries by default. So we just force -m32 here. Smarter\n+  # approaches welcome!\n+  CFG_GCC_COMPILE_FLAGS += -m32\n+  CFG_GCC_LINK_FLAGS += -m32\n+endif\n+\n+ifneq ($(findstring MINGW,$(CFG_OSTYPE)),)\n+  CFG_WINDOWSY := 1\n+endif\n+\n+ifdef CFG_WINDOWSY\n+  CFG_INFO := $(info cfg: windows-y environment)\n+  CFG_PATH_MUNGE := | sed -e 's/\\\\\\(.\\)/\\/\\1/g'\n+  CFG_FLEXLINK := $(shell which flexlink)\n+  ifdef CFG_FLEXLINK\n+    CFG_NATIVE := 1\n+  endif\n+  CFG_RUNTIME := rustrt.dll\n+  CFG_STDLIB := std.dll\n+  CFG_OBJ_SUFFIX := .o\n+  CFG_EXE_SUFFIX := .exe\n+  CFG_BOOT := ./rustboot.exe\n+  CFG_COMPILER := ./rustc.exe\n+  CFG_GCC_COMPILE_FLAGS += -march=i686\n+  CFG_GCC_LINK_FLAGS += -shared -fPIC\n+  CFG_RUN_TARG = $(1)\n+  # FIXME: support msvc at some point\n+  CFG_GCC := 1\n+endif\n+\n+ifdef CFG_UNIXY\n+  CFG_INFO := $(info cfg: unix-y environment)\n+  CFG_BOOT := ./rustboot\n+  CFG_COMPILER := ./rustc\n+  CFG_OBJ_SUFFIX := .o\n+  CFG_RUN_TARG = LD_LIBRARY_PATH=. $(CFG_VALGRIND) $(1)\n+  CFG_GCC := 1\n+  ifdef MINGW_CROSS\n+    CFG_INFO := $(info cfg: mingw-cross)\n+    CFG_GCC_CROSS := i586-mingw32msvc-\n+    CFG_BOOT_FLAGS += -t win32-x86-pe\n+    CFG_RUNTIME := rustrt.dll\n+    CFG_STDLIB := std.dll\n+    CFG_COMPILER := ./rustc.exe\n+    ifdef CFG_VALGRIND\n+      CFG_VALGRIND += wine\n+    endif\n+    CFG_OBJ_SUFFIX := .o\n+    CFG_EXE_SUFFIX := .exe\n+    CFG_GCC_COMPILE_FLAGS :=\n+    CFG_GCC_LINK_FLAGS := -shared\n+    ifeq ($(CFG_CPUTYPE), x86_64)\n+      CFG_GCC_COMPILE_FLAGS += -m32\n+      CFG_GCC_LINK_FLAGS += -m32\n+    endif\n+  endif\n+endif\n+\n+ifdef CFG_GCC\n+  CFG_INFO := $(info cfg: using gcc)\n+  CFG_GCC_COMPILE_FLAGS += -Wall -Werror -fno-rtti -fno-exceptions -g\n+  CFG_GCC_LINK_FLAGS += -g\n+  CFG_COMPILE_C = $(CFG_GCC_CROSS)g++ $(CFG_GCC_COMPILE_FLAGS) -c -o $(1) $(2)\n+  CFG_LINK_C = $(CFG_GCC_CROSS)g++ $(CFG_GCC_LINK_FLAGS) -o $(1)\n+  CFG_DEPEND_C = $(CFG_GCC_CROSS)g++ $(CFG_GCC_COMPILE_FLAGS) -MT \"$(1)\" -MM $(2)\n+else\n+  CFG_ERR := $(error please try on a system with gcc)\n+endif\n+\n+CFG_OCAMLC_OPT := $(shell which ocamlc.opt)\n+ifdef CFG_OCAMLC_OPT\n+  $(info cfg: using ocaml native compiler)\n+  OPT=.opt\n+else\n+  $(info cfg: using ocaml bytecode compiler)\n+endif\n+\n+ifdef PROFILE\n+  $(info cfg: building with profiling info (forcing native output))\n+  CFG_NATIVE := 1\n+  CFG_OCAMLOPT_PROFILE_FLAGS := -p\n+endif\n+\n+ifdef DEBUG\n+  $(info cfg: forcing bytecode output)\n+  CFG_NATIVE :=\n+endif\n+\n+ifdef CFG_NATIVE\n+  $(info cfg: building native compiler)\n+else\n+  $(info cfg: building bytecode compiler)\n+endif\n+\n+ifneq ($(CFG_LLVM_CONFIG),)\n+  CFG_LLVM_CONFIG := $(shell which $(CFG_LLVM_CONFIG))\n+endif\n+ifneq ($(CFG_LLVM_CONFIG),)\n+  CFG_LLVM_VERSION := $(shell $(CFG_LLVM_CONFIG) --version)\n+  ifeq ($(CFG_LLVM_VERSION),2.8svn)\n+    $(info cfg: using LLVM version 2.8svn)\n+  else\n+    CFG_LLVM_CONFIG :=\n+    $(info cfg: incompatible LLVM version $(CFG_LLVM_VERSION), expected 2.8svn)\n+  endif\n+endif\n+ifdef CFG_LLVM_CONFIG\n+  VARIANT=llvm\n+  WHERE := $(shell ocamlc -where)\n+  LLVM_LIBS := llvm.cma llvm_bitwriter.cma\n+  LLVM_NATIVE_LIBS := llvm.cmxa llvm_bitwiter.cmxa\n+  LLVM_CLIBS := $(shell for c in `$(CFG_LLVM_CONFIG) --ldflags --libs` -lllvm -lllvm_bitwriter; do echo -cclib && echo $$c; done | xargs echo)\n+  LLVM_INCS := -I boot/llvm -I $(WHERE)\n+  LLVM_MLS := $(addprefix boot/llvm/, llabi.ml llasm.ml llfinal.ml lltrans.ml \\\n+    llemit.ml)\n+  CFG_LLC_COMPILE_FLAGS := -march=x86\n+  $(info cfg: found llvm-config at $(CFG_LLVM_CONFIG))\n+else\n+  VARIANT=x86\n+  LLVM_CLIBS :=\n+  LLVM_INCS :=\n+  LLVM_MLS :=\n+  $(info cfg: disabling LLVM backend)\n+endif\n+\n+MKFILES := Makefile\n+\n+# add current directory to library search path of CFG_BOOT command line\n+\n+CFG_BOOT_FLAGS += -L .\n+\n+######################################################################\n+# Boot targets and rules\n+######################################################################\n+\n+ML_INCS := -I boot/fe -I boot/me -I boot/be -I boot/driver/$(VARIANT) \\\n+  -I boot/driver -I boot/util $(LLVM_INCS)\n+ML_LIBS := unix.cma nums.cma bigarray.cma\n+ML_NATIVE_LIBS := unix.cmxa nums.cmxa bigarray.cmxa\n+OCAMLC_FLAGS := -g $(ML_INCS) -w Ael -warn-error Ael\n+OCAMLOPT_FLAGS := $(ML_INCS) -w Ael -warn-error Ael $(CFG_OCAMLOPT_PROFILE_FLAGS)\n+\n+ifdef CFG_LLVM_CONFIG\n+  ML_LIBS += $(LLVM_LIBS) -custom -cclib -lstdc++ $(LLVM_CLIBS)\n+  ML_NATIVE_LIBS += $(LLVM_NATIVE_LIBS) -cclib -lstdc++ $(LLVM_CLIBS)\n+endif\n+\n+# List them in link order.\n+# Nobody calculates the link-order DAG automatically, sadly.\n+\n+UTIL_BOT_MLS := $(addprefix boot/util/, common.ml bits.ml)\n+DRIVER_BOT_MLS := $(addprefix boot/driver/, session.ml)\n+BE_MLS := $(addprefix boot/be/, x86.ml ra.ml pe.ml elf.ml \\\n+          macho.ml)\n+IL_MLS := $(addprefix boot/be/, asm.ml il.ml abi.ml)\n+ME_MLS := $(addprefix boot/me/, walk.ml semant.ml resolve.ml alias.ml type.ml dead.ml \\\n+          typestate.ml mode.ml mutable.ml gctype.ml loop.ml layout.ml transutil.ml \\\n+          trans.ml dwarf.ml)\n+FE_MLS := $(addprefix boot/fe/, ast.ml token.ml lexer.ml parser.ml pexp.ml item.ml cexp.ml)\n+DRIVER_TOP_MLS := $(addprefix boot/driver/, $(VARIANT)/glue.ml lib.ml main.ml)\n+\n+BOOT_MLS := $(UTIL_BOT_MLS) $(DRIVER_BOT_MLS) $(FE_MLS) $(IL_MLS) $(ME_MLS) \\\n+  $(BE_MLS) $(LLVM_MLS) $(DRIVER_TOP_MLS)\n+BOOT_CMOS := $(BOOT_MLS:.ml=.cmo)\n+BOOT_CMXS := $(BOOT_MLS:.ml=.cmx)\n+BOOT_OBJS := $(BOOT_MLS:.ml=.o)\n+BOOT_CMIS := $(BOOT_MLS:.ml=.cmi)\n+\n+RUNTIME_CS := rt/rust.cpp \\\n+              rt/rust_builtin.cpp \\\n+              rt/rust_crate.cpp \\\n+              rt/rust_crate_cache.cpp \\\n+              rt/rust_crate_reader.cpp \\\n+              rt/rust_comm.cpp \\\n+              rt/rust_dom.cpp \\\n+              rt/rust_task.cpp \\\n+              rt/rust_upcall.cpp \\\n+              rt/isaac/randport.cpp\n+RUNTIME_HDR := rt/rust.h \\\n+               rt/rust_dwarf.h \\\n+               rt/rust_internal.h \\\n+               rt/rust_util.h\n+\n+RUNTIME_INCS := -Irt/isaac -Irt/uthash\n+RUNTIME_OBJS := $(RUNTIME_CS:.cpp=$(CFG_OBJ_SUFFIX))\n+RUNTIME_LIBS := $(CFG_RUNTIME_LIBS)\n+\n+STDLIB_CRATE := lib/std.rc\n+STDLIB_INPUTS := $(wildcard lib/*.rc lib/*.rs lib/*/*.rs)\n+COMPILER_CRATE := comp/rustc.rc\n+COMPILER_INPUTS := $(wildcard comp/*.rc comp/*.rs comp/*/*.rs)\n+\n+all: $(CFG_COMPILER) $(MKFILES) boot/fe/lexer.ml\n+\n+loc:\n+\twc -l $(BOOT_MLS) $(RUNTIME_CS) $(RUNTIME_HDR)\n+\n+$(CFG_RUNTIME): $(RUNTIME_OBJS) $(MKFILES) $(RUNTIME_HDR)\n+\t@$(call CFG_ECHO, compile: $<)\n+\t$(CFG_QUIET)$(call CFG_LINK_C, $@) $(RUNTIME_OBJS)\n+\n+$(CFG_STDLIB): $(STDLIB_CRATE) $(CFG_BOOT) $(MKFILES)\n+\t@$(call CFG_ECHO, compile: $<)\n+\t$(CFG_QUIET)OCAMLRUNPARAM=\"b1\" $(CFG_BOOT) $(CFG_BOOT_FLAGS) -shared -o $@ $(STDLIB_CRATE)\n+\n+%$(CFG_OBJ_SUFFIX): %.cpp $(MKFILES)\n+\t@$(call CFG_ECHO, compile: $<)\n+\t$(CFG_QUIET)$(call CFG_COMPILE_C, $@, $(RUNTIME_INCS)) $<\n+\n+ifdef CFG_NATIVE\n+$(CFG_BOOT): $(BOOT_CMXS) $(MKFILES)\n+\t@$(call CFG_ECHO, compile: $<)\n+\t$(CFG_QUIET)ocamlopt$(OPT) -o $@ $(OCAMLOPT_FLAGS) $(ML_NATIVE_LIBS) $(BOOT_CMXS)\n+else\n+$(CFG_BOOT): $(BOOT_CMOS) $(MKFILES)\n+\t@$(call CFG_ECHO, compile: $<)\n+\t$(CFG_QUIET)ocamlc$(OPT) -o $@ $(OCAMLC_FLAGS) $(ML_LIBS) $(BOOT_CMOS)\n+endif\n+\n+%.cmo: %.ml $(MKFILES)\n+\t@$(call CFG_ECHO, compile: $<)\n+\t$(CFG_QUIET)ocamlc$(OPT) -c -o $@ $(OCAMLC_FLAGS) $<\n+\n+%.cmo: %.cmi $(MKFILES)\n+\n+%.cmx %.o: %.ml $(MKFILES)\n+\t@$(call CFG_ECHO, compile: $<)\n+\t$(CFG_QUIET)ocamlopt$(OPT) -c -o $@ $(OCAMLOPT_FLAGS) $<\n+\n+%.ml: %.mll $(MKFILES)\n+\t@$(call CFG_ECHO, lex-gen: $<)\n+\t$(CFG_QUIET)ocamllex$(OPT) -q -o $@ $<\n+\n+\n+######################################################################\n+# Main compiler targets and rules\n+######################################################################\n+\n+$(CFG_COMPILER): $(COMPILER_CRATE) $(CFG_BOOT) $(CFG_RUNTIME) $(CFG_STDLIB)\n+\t@$(call CFG_ECHO, compile: $<)\n+\t$(CFG_QUIET)OCAMLRUNPARAM=\"b1\" $(CFG_BOOT) $(CFG_BOOT_FLAGS) -o $@ $<\n+\t$(CFG_QUIET)chmod 0755 $@\n+\n+self: $(CFG_COMPILER)\n+\t@$(call CFG_ECHO, compile: $<)\n+\t$(CFG_QUIET)$(call CFG_RUN_TARG, $(CFG_COMPILER)) $(COMPILER_CRATE)\n+\n+\n+######################################################################\n+# Testing\n+######################################################################\n+\n+TEST_XFAILS_X86 :=  test/run-pass/mlist_cycle.rs \\\n+                    test/run-pass/clone-with-exterior.rs \\\n+                    test/run-pass/rec-auto.rs \\\n+                    test/run-pass/vec-slice.rs \\\n+                    test/run-pass/generic-fn-infer.rs \\\n+                    test/run-pass/generic-tag.rs \\\n+                    test/run-pass/bind-obj-ctor.rs \\\n+                    test/compile-fail/rec-missing-fields.rs \\\n+                    test/compile-fail/infinite-tag-type-recursion.rs \\\n+                    test/compile-fail/infinite-vec-type-recursion.rs\n+\n+TEST_XFAILS_LLVM := $(addprefix test/run-pass/, \\\n+                      acyclic-unwind.rs \\\n+                      alt-tag.rs \\\n+                      basic.rs \\\n+                      bind-obj-ctor.rs \\\n+                      bind-thunk.rs \\\n+                      bind-trivial.rs \\\n+                      cast.rs \\\n+                      char.rs \\\n+                      clone-with-exterior.rs \\\n+                      comm.rs \\\n+                      complex.rs \\\n+                      dead-code-one-arm-if.rs \\\n+                      deep.rs \\\n+                      div-mod.rs \\\n+                      drop-on-ret.rs \\\n+                      exterior.rs \\\n+                      foreach-simple.rs \\\n+                      foreach-simple-outer-slot.rs \\\n+                      foreach-put-structured.rs \\\n+                      vec-slice.rs \\\n+                      simple-obj.rs \\\n+                      import.rs \\\n+                      fun-call-variants.rs \\\n+                      fun-indirect-call.rs \\\n+                      generic-derived-type.rs \\\n+                      generic-drop-glue.rs \\\n+                      generic-fn.rs \\\n+                      generic-obj.rs \\\n+                      generic-obj-with-derived-type.rs \\\n+                      generic-tag.rs \\\n+                      generic-type.rs \\\n+                      generic-fn-infer.rs \\\n+                      vec-append.rs \\\n+                      vec-concat.rs \\\n+                      vec-drop.rs \\\n+                      mutable-vec-drop.rs \\\n+                      inner-module.rs \\\n+                      large-records.rs \\\n+                      lazychan.rs \\\n+                      linear-for-loop.rs \\\n+                      many.rs \\\n+                      mlist.rs \\\n+                      mlist_cycle.rs \\\n+                      mutual-recursion-group.rs \\\n+                      native.rc \\\n+                      command-line-args.rs \\\n+                      native_mod.rc \\\n+                      opeq.rs \\\n+                      pred.rs \\\n+                      readalias.rs \\\n+                      rec-auto.rs \\\n+                      rec-extend.rs \\\n+                      rec.rs \\\n+                      rec_tup.rs \\\n+                      return-nil.rs \\\n+                      i32-sub.rs \\\n+                      i8-incr.rs \\\n+                      spawn-fn.rs \\\n+                      spawn.rs \\\n+                      stateful-obj.rs \\\n+                      str-append.rs \\\n+                      str-concat.rs \\\n+                      str-idx.rs \\\n+                      syntax-extension.rs \\\n+                      tag.rs \\\n+                      tail-cps.rs \\\n+                      tail-direct.rs \\\n+                      threads.rs \\\n+                      tup.rs \\\n+                      u32-decr.rs \\\n+                      u8-incr-decr.rs \\\n+                      u8-incr.rs \\\n+                      unit.rs \\\n+                      user.rs \\\n+                      vec.rs \\\n+                      writealias.rs \\\n+                      yield.rs \\\n+                      yield2.rs \\\n+                      native-opaque-type.rs \\\n+                      type-sizes.rs \\\n+                      obj-drop.rs \\\n+                      obj-dtor.rs \\\n+                      obj-with-vec.rs \\\n+                      else-if.rs \\\n+                      lazy-and-or.rs \\\n+                     ) \\\n+                    $(addprefix test/run-fail/, \\\n+                      explicit-fail.rs \\\n+                      fail.rs \\\n+                      linked-failure.rs \\\n+                      pred.rs \\\n+                      vec_overrun.rs \\\n+                      str_overrun.rs \\\n+                      vec_underrun.rs \\\n+                     ) \\\n+                    $(addprefix test/compile-fail/, \\\n+                      rec-missing-fields.rs \\\n+                      infinite-tag-type-recursion.rs \\\n+                      infinite-vec-type-recursion.rs \\\n+                     )\n+\n+ifdef CFG_WINDOWSY\n+TEST_XFAILS_X86 += test/run-pass/native_mod.rc\n+TEST_XFAILS_LLVM += test/run-pass/native_mod.rc\n+endif\n+\n+TEST_RUN_PASS_CRATES_X86 := $(filter-out $(TEST_XFAILS_X86), $(wildcard test/run-pass/*.rc))\n+TEST_RUN_PASS_CRATES_LLVM := $(filter-out $(TEST_XFAILS_LLVM), $(wildcard test/run-pass/*.rc))\n+TEST_RUN_PASS_SOURCES_X86 := $(filter-out $(TEST_XFAILS_X86), $(wildcard test/run-pass/*.rs))\n+TEST_RUN_PASS_SOURCES_LLVM := $(filter-out $(TEST_XFAILS_LLVM), $(wildcard test/run-pass/*.rs))\n+TEST_RUN_PASS_EXTRAS := $(wildcard test/run-pass/*/*.rs)\n+TEST_RUN_PASS_EXES_X86 := \\\n+                      $(TEST_RUN_PASS_CRATES_X86:.rc=.x86$(CFG_EXE_SUFFIX)) \\\n+                      $(TEST_RUN_PASS_SOURCES_X86:.rs=.x86$(CFG_EXE_SUFFIX))\n+TEST_RUN_PASS_EXES_LLVM := \\\n+                      $(TEST_RUN_PASS_CRATES_LLVM:.rc=.llvm$(CFG_EXE_SUFFIX)) \\\n+                      $(TEST_RUN_PASS_SOURCES_LLVM:.rs=.llvm$(CFG_EXE_SUFFIX))\n+TEST_RUN_PASS_OUTS_X86  := \\\n+                    $(TEST_RUN_PASS_EXES_X86:.x86$(CFG_EXE_SUFFIX)=.x86.out)\n+TEST_RUN_PASS_OUTS_LLVM := \\\n+                    $(TEST_RUN_PASS_EXES_LLVM:.llvm$(CFG_EXE_SUFFIX)=.llvm.out)\n+\n+\n+TEST_RUN_FAIL_CRATES_X86 := $(filter-out $(TEST_XFAILS_X86), $(wildcard test/run-fail/*.rc))\n+TEST_RUN_FAIL_CRATES_LLVM := $(filter-out $(TEST_XFAILS_LLVM), $(wildcard test/run-fail/*.rc))\n+TEST_RUN_FAIL_SOURCES_X86 := $(filter-out $(TEST_XFAILS_X86), $(wildcard test/run-fail/*.rs))\n+TEST_RUN_FAIL_SOURCES_LLVM := $(filter-out $(TEST_XFAILS_LLVM), $(wildcard test/run-fail/*.rs))\n+TEST_RUN_FAIL_EXTRAS := $(wildcard test/run-fail/*/*.rs)\n+TEST_RUN_FAIL_EXES_X86 := \\\n+                      $(TEST_RUN_FAIL_CRATES_X86:.rc=.x86$(CFG_EXE_SUFFIX)) \\\n+                      $(TEST_RUN_FAIL_SOURCES_X86:.rs=.x86$(CFG_EXE_SUFFIX))\n+TEST_RUN_FAIL_EXES_LLVM := \\\n+                      $(TEST_RUN_FAIL_CRATES_LLVM:.rc=.llvm$(CFG_EXE_SUFFIX)) \\\n+                      $(TEST_RUN_FAIL_SOURCES_LLVM:.rs=.llvm$(CFG_EXE_SUFFIX))\n+TEST_RUN_FAIL_OUTS_X86  := \\\n+                    $(TEST_RUN_FAIL_EXES_X86:.x86$(CFG_EXE_SUFFIX)=.x86.out)\n+TEST_RUN_FAIL_OUTS_LLVM := \\\n+                    $(TEST_RUN_FAIL_EXES_LLVM:.llvm$(CFG_EXE_SUFFIX)=.llvm.out)\n+\n+\n+TEST_COMPILE_FAIL_CRATES_X86 := $(filter-out $(TEST_XFAILS_X86), $(wildcard test/compile-fail/*.rc))\n+TEST_COMPILE_FAIL_CRATES_LLVM := $(filter-out $(TEST_XFAILS_LLVM), $(wildcard test/compile-fail/*.rc))\n+TEST_COMPILE_FAIL_SOURCES_X86 := $(filter-out $(TEST_XFAILS_X86), $(wildcard test/compile-fail/*.rs))\n+TEST_COMPILE_FAIL_SOURCES_LLVM := $(filter-out $(TEST_XFAILS_LLVM), $(wildcard test/compile-fail/*.rs))\n+TEST_COMPILE_FAIL_EXTRAS := $(wildcard test/compile-fail/*/*.rs)\n+TEST_COMPILE_FAIL_EXES_X86 := \\\n+                  $(TEST_COMPILE_FAIL_CRATES_X86:.rc=.x86$(CFG_EXE_SUFFIX)) \\\n+                  $(TEST_COMPILE_FAIL_SOURCES_X86:.rs=.x86$(CFG_EXE_SUFFIX))\n+TEST_COMPILE_FAIL_EXES_LLVM := \\\n+                  $(TEST_COMPILE_FAIL_CRATES_LLVM:.rc=.llvm$(CFG_EXE_SUFFIX)) \\\n+                  $(TEST_COMPILE_FAIL_SOURCES_LLVM:.rs=.llvm$(CFG_EXE_SUFFIX))\n+TEST_COMPILE_FAIL_OUTS_X86 := \\\n+                $(TEST_COMPILE_FAIL_EXES_X86:.x86$(CFG_EXE_SUFFIX)=.x86.out)\n+TEST_COMPILE_FAIL_OUTS_LLVM := \\\n+                $(TEST_COMPILE_FAIL_EXES_LLVM:.llvm$(CFG_EXE_SUFFIX)=.llvm.out)\n+\n+ALL_TEST_CRATES := $(TEST_COMPILE_FAIL_CRATES_X86) \\\n+                   $(TEST_RUN_FAIL_CRATES_X86) \\\n+                   $(TEST_RUN_PASS_CRATES_X86)\n+\n+ALL_TEST_SOURCES := $(TEST_COMPILE_FAIL_SOURCES_X86) \\\n+                    $(TEST_RUN_FAIL_SOURCES_X86) \\\n+                    $(TEST_RUN_PASS_SOURCES_X86)\n+\n+ALL_TEST_INPUTS := $(wildcard test/*/*.rs test/*/*/*.rs test/*/*.rc)\n+\n+\n+check_nocompile: $(TEST_COMPILE_FAIL_OUTS_X86)\n+\n+check: $(TEST_RUN_PASS_EXES_X86) $(TEST_RUN_FAIL_EXES_X86) \\\n+       $(TEST_RUN_PASS_OUTS_X86) $(TEST_RUN_FAIL_OUTS_X86) \\\n+       $(TEST_COMPILE_FAIL_OUTS_X86)\n+\n+ifeq ($(VARIANT),llvm)\n+ALL_TEST_CRATES += $(TEST_COMPILE_FAIL_CRATES_LLVM) \\\n+                   $(TEST_RUN_FAIL_CRATES_LLVM) \\\n+                   $(TEST_RUN_PASS_CRATES_LLVM)\n+\n+ALL_TEST_SOURCES += $(TEST_COMPILE_FAIL_SOURCES_LLVM) \\\n+                    $(TEST_RUN_FAIL_SOURCES_LLVM) \\\n+                    $(TEST_RUN_PASS_SOURCES_LLVM)\n+\n+check_nocompile: $(TEST_COMPILE_FAIL_OUTS_LLVM)\n+\n+check:  $(TEST_RUN_PASS_EXES_LLVM) $(TEST_RUN_FAIL_EXES_LLVM) \\\n+        $(TEST_RUN_PASS_OUTS_LLVM) $(TEST_RUN_FAIL_OUTS_LLVM) \\\n+        $(TEST_COMPILE_FAIL_OUTS_LLVM)\n+endif\n+\n+test/run-pass/%.out: test/run-pass/%$(CFG_EXE_SUFFIX) $(CFG_RUNTIME)\n+\t@$(call CFG_ECHO, run: $<)\n+\t$(CFG_QUIET)$(call CFG_RUN_TARG, $<) > $@\n+\n+test/run-fail/%.out: test/run-fail/%$(CFG_EXE_SUFFIX) $(CFG_RUNTIME)\n+\t@$(call CFG_ECHO, run: $<)\n+\t$(CFG_QUIET)rm -f $@\n+\t$(CFG_QUIET)$(call CFG_RUN_TARG, $<) >$@ 2>&1 ; X=$$? ; if [ $$X -eq 0 ] ; then exit 1 ; else exit 0 ; fi\n+\t$(CFG_QUIET)grep --text --quiet \"`awk -F: '/error-pattern/ { print $$2 }' $(basename $(basename $@)).rs | tr -d '\\n\\r'`\" $@\n+\n+test/compile-fail/%.x86.out: test/compile-fail/%.rs $(CFG_BOOT) $(CFG_RUNTIME)\n+\t@$(call CFG_ECHO, compile [x86]: $<)\n+\t$(CFG_QUIET)rm -f $@\n+\t$(CFG_QUIET)OCAMLRUNPARAM=\"b1\" $(CFG_BOOT) -o $(@:.out=$(CFG_EXE_SUFFIX)) $< >$@ 2>&1 || true\n+\t$(CFG_QUIET)grep --text --quiet \"`awk -F: '/error-pattern/ { print $$2 }' $< | tr -d '\\n\\r'`\" $@\n+\n+test/compile-fail/%.llvm.out: test/compile-fail/%.rs $(CFG_BOOT) $(CFG_RUNTIME)\n+\t@$(call CFG_ECHO, compile [llvm]: $<)\n+\t$(CFG_QUIET)rm -f $@\n+\t$(CFG_QUIET)OCAMLRUNPARAM=\"b1\" $(CFG_BOOT) $(CFG_BOOT_FLAGS) -o $(@:.out=$(CFG_EXE_SUFFIX)) $< >$@ 2>&1 || true\n+\t$(CFG_QUIET)grep --text --quiet \"`awk -F: '/error-pattern/ { print $$2 }' $< | tr -d '\\n\\r'`\" $@\n+\n+test/run-pass/%.x86$(CFG_EXE_SUFFIX): test/run-pass/%.rc $(CFG_BOOT) $(CFG_RUNTIME) $(CFG_STDLIB)\n+\t@$(call CFG_ECHO, compile [x86]: $<)\n+\t$(CFG_QUIET)OCAMLRUNPARAM=\"b1\" $(CFG_BOOT) $(CFG_BOOT_FLAGS) -o $@ $<\n+\t$(CFG_QUIET)chmod 0755 $@\n+\n+%.s: %.bc\n+\t@$(call CFG_ECHO, compile [llvm]: $<)\n+\t$(CFG_QUIET)llc $(CFG_LLC_COMPILE_FLAGS) -o $@ $<\n+\n+%.llvm$(CFG_EXE_SUFFIX): %.s $(CFG_RUNTIME)\n+\t@$(call CFG_ECHO, compile [llvm]: $<)\n+\t$(CFG_QUIET)gcc $(CFG_GCC_COMPILE_FLAGS) -o $@ $< -L. -lrustrt\n+\n+test/run-pass/%.bc: test/run-pass/%.rc $(CFG_BOOT) $(CFG_STDLIB)\n+\t@$(call CFG_ECHO, compile [llvm]: $<)\n+\t$(CFG_QUIET)OCAMLRUNPARAM=\"b1\" $(CFG_BOOT) $(CFG_BOOT_FLAGS) -o $@ -llvm $<\n+\n+test/run-pass/%.x86$(CFG_EXE_SUFFIX): test/run-pass/%.rs $(CFG_BOOT) $(CFG_RUNTIME) $(CFG_STDLIB)\n+\t@$(call CFG_ECHO, compile [x86]: $<)\n+\t$(CFG_QUIET)OCAMLRUNPARAM=\"b1\" $(CFG_BOOT) $(CFG_BOOT_FLAGS) -o $@ $<\n+\t$(CFG_QUIET)chmod 0755 $@\n+\n+test/run-pass/%.bc: test/run-pass/%.rs $(CFG_BOOT) $(CFG_STDLIB)\n+\t@$(call CFG_ECHO, compile [llvm]: $<)\n+\t$(CFG_QUIET)OCAMLRUNPARAM=\"b1\" $(CFG_BOOT) $(CFG_BOOT_FLAGS) -o $@ -llvm $<\n+\n+test/run-fail/%.x86$(CFG_EXE_SUFFIX): test/run-fail/%.rs $(CFG_BOOT) $(CFG_RUNTIME) $(CFG_STDLIB)\n+\t@$(call CFG_ECHO, compile [x86]: $<)\n+\t$(CFG_QUIET)OCAMLRUNPARAM=\"b1\" $(CFG_BOOT) $(CFG_BOOT_FLAGS) -o $@ $<\n+\t$(CFG_QUIET)chmod 0755 $@\n+\n+test/run-fail/%.bc: test/run-fail/%.rs $(CFG_BOOT) $(CFG_STDLIB)\n+\t@$(call CFG_ECHO, compile [llvm]: $<)\n+\t$(CFG_QUIET)OCAMLRUNPARAM=\"b1\" $(CFG_BOOT) $(CFG_BOOT_FLAGS) -o $@ -llvm $<\n+\n+\n+######################################################################\n+# Auto-dependency\n+######################################################################\n+\n+ML_DEPFILES := $(BOOT_MLS:%.ml=%.d)\n+C_DEPFILES := $(RUNTIME_CS:%.cpp=%.d)\n+\n+%.d: %.cpp $(MKFILES)\n+\t@$(call CFG_ECHO, dep: $<)\n+\t$(CFG_QUIET)$(call CFG_DEPEND_C, $@ $(patsubst %.cpp, %$(CFG_OBJ_SUFFIX), $<), $(RUNTIME_INCS)) $< $(CFG_PATH_MUNGE) >$@\n+\n+%.d: %.ml $(MKFILES)\n+\t@$(call CFG_ECHO, dep: $<)\n+\t$(CFG_QUIET)ocamldep$(OPT) $(ML_INCS) $< $(CFG_PATH_MUNGE) >$@\n+\n+%.d: %.mli $(MKFILES)\n+\t@$(call CFG_ECHO, dep: $<)\n+\t$(CFG_QUIET)ocamldep$(OPT) $(ML_INCS) $< $(CFG_PATH_MUNGE) >$@\n+\n+ifneq ($(MAKECMDGOALS),clean)\n+-include $(ML_DEPFILES) $(C_DEPFILES)\n+endif\n+\n+RUSTBOOT_PROBE := $(wildcard $(CFG_BOOT))\n+\n+ifneq ($(RUSTBOOT_PROBE),)\n+CFG_INFO := $(info cfg: using built $(CFG_BOOT) for rust deps)\n+STDLIB_DEPFILE := $(CFG_STDLIB).d\n+CRATE_DEPFILES := $(ALL_TEST_CRATES:%.rc=%.d) $(STDLIB_DEPFILE)\n+\n+$(STDLIB_DEPFILE): $(STDLIB_CRATE) $(MKFILES) $(CFG_BOOT)\n+\t@$(call CFG_ECHO, dep: $<)\n+\t$(CFG_QUIET)$(CFG_BOOT) $(CFG_BOOT_FLAGS) -shared -rdeps $< $(CFG_PATH_MUNGE) >$@\n+\n+%.d: %.rc $(MKFILES) $(CFG_BOOT)\n+\t@$(call CFG_ECHO, dep: $<)\n+\t$(CFG_QUIET)$(CFG_BOOT) $(CFG_BOOT_FLAGS) -rdeps $< $(CFG_PATH_MUNGE) >$@\n+\n+%.d: %.rs $(MKFILES) $(CFG_BOOT)\n+\t@$(call CFG_ECHO, dep: $<)\n+\t$(CFG_QUIET)$(CFG_BOOT) $(CFG_BOOT_FLAGS) -rdeps $< $(CFG_PATH_MUNGE) >$@\n+\n+ifneq ($(MAKECMDGOALS),clean)\n+-include $(CRATE_DEPFILES)\n+endif\n+endif\n+\n+######################################################################\n+# Distribution\n+######################################################################\n+\n+PKG_NAME := rust\n+PKG_VER  := $(shell date +\"%Y-%m-%d\")-snap\n+PKG_DIR := $(PKG_NAME)-$(PKG_VER)\n+PKG_TAR := $(PKG_DIR).tar.gz\n+PKG_3RDPARTY := rt/valgrind.h rt/memcheck.h \\\n+                rt/isaac/rand.h rt/isaac/standard.h \\\n+                rt/uthash/uthash.h rt/uthash/utlist.h \\\n+                rt/bigint/bigint.h rt/bigint/bigint_int.cpp \\\n+                rt/bigint/bigint_ext.cpp rt/bigint/low_primes.h\n+PKG_FILES := README \\\n+             $(MKFILES) $(BOOT_MLS) boot/fe/lexer.mll \\\n+             $(COMPILER_CRATE) $(COMPILER_INPUTS) \\\n+             $(STDLIB_CRATE) $(STDLIB_INPUTS) \\\n+             $(RUNTIME_CS) $(RUNTIME_HDR) $(PKG_3RDPARTY) \\\n+             $(ALL_TEST_INPUTS)\n+\n+dist:\n+\t@$(call CFG_ECHO, making dist dir)\n+\t$(CFG_QUIET)mkdir -p dist/$(PKG_DIR)\n+\t$(CFG_QUIET)tar -c $(PKG_FILES) | tar -x -C dist/$(PKG_DIR)\n+\t$(CFG_QUIET)cp ../LICENSE.txt dist/$(PKG_DIR)\n+\t$(CFG_QUIET)tar -czf $(PKG_TAR) -C dist $(PKG_DIR)\n+\t$(CFG_QUIET)rm -Rf dist\n+\n+distcheck:\n+\t@$(call CFG_ECHO, making dist dir)\n+\t$(CFG_QUIET)rm -Rf $(PKG_NAME)-*.tar.gz dist\n+\t$(CFG_QUIET)mkdir -p dist/$(PKG_DIR)\n+\t$(CFG_QUIET)tar -c $(PKG_FILES) | tar -x -C dist/$(PKG_DIR)\n+\t@$(call CFG_ECHO, making 'check' in dist dir)\n+\t$(CFG_QUIET)make -C dist/$(PKG_DIR) check\n+\t$(CFG_QUIET)make -C dist/$(PKG_DIR) clean\n+\t@$(call CFG_ECHO, making tarball)\n+\t$(CFG_QUIET)cp ../LICENSE.txt dist/$(PKG_DIR)\n+\t$(CFG_QUIET)tar -czf $(PKG_TAR) -C dist $(PKG_DIR)\n+\t$(CFG_QUIET)rm -Rf dist\n+\t@echo\n+\t@echo -----------------------------------------------\n+\t@echo $(PKG_TAR) ready for distribution\n+\t@echo -----------------------------------------------\n+\n+\n+######################################################################\n+# Cleanup\n+######################################################################\n+\n+.PHONY: clean\n+\n+clean:\n+\t@$(call CFG_ECHO, cleaning)\n+\t$(CFG_QUIET)rm -f $(RUNTIME_OBJS) $(BOOT_CMOS) $(BOOT_CMIS) $(BOOT_CMXS) $(BOOT_OBJS)\n+\t$(CFG_QUIET)rm -f $(CFG_COMPILER)\n+\t$(CFG_QUIET)rm -f $(ML_DEPFILES) $(C_DEPFILES) $(CRATE_DEPFILES)\n+\t$(CFG_QUIET)rm -f boot/fe/lexer.ml\n+\t$(CFG_QUIET)rm -f $(CFG_BOOT) $(CFG_RUNTIME) $(CFG_STDLIB)\n+\t$(CFG_QUIET)rm -f $(TEST_RUN_PASS_EXES_X86) $(TEST_RUN_PASS_OUTS_X86)\n+\t$(CFG_QUIET)rm -f $(TEST_RUN_PASS_EXES_LLVM) $(TEST_RUN_PASS_OUTS_LLVM)\n+\t$(CFG_QUIET)rm -f $(TEST_RUN_FAIL_EXES_X86) $(TEST_RUN_FAIL_OUTS_X86)\n+\t$(CFG_QUIET)rm -f $(TEST_RUN_FAIL_EXES_LLVM) $(TEST_RUN_FAIL_OUTS_LLVM)\n+\t$(CFG_QUIET)rm -f $(TEST_COMPILE_FAIL_EXES_X86) $(TEST_COMPILE_FAIL_OUTS_X86)\n+\t$(CFG_QUIET)rm -f $(TEST_COMPILE_FAIL_EXES_LLVM) $(TEST_COMPILE_FAIL_OUTS_LLVM)\n+\t$(CFG_QUIET)rm -Rf $(PKG_NAME)-*.tar.gz dist\n+\t$(CFG_QUIET)rm -f $(foreach ext,cmx cmi cmo cma o a d exe,$(wildcard boot/*/*.$(ext) boot/*/*/*.$(ext)))"}]}