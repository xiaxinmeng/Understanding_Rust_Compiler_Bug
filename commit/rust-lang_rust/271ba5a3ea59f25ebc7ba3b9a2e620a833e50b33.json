{"sha": "271ba5a3ea59f25ebc7ba3b9a2e620a833e50b33", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3MWJhNWEzZWE1OWYyNWViYzdiYTNiOWEyZTYyMGE4MzNlNTBiMzM=", "commit": {"author": {"name": "Linus F\u00e4rnstrand", "email": "faern@faern.net", "date": "2020-02-04T17:01:11Z"}, "committer": {"name": "Linus F\u00e4rnstrand", "email": "faern@faern.net", "date": "2020-02-12T19:20:39Z"}, "message": "Stabilize assoc_int_consts", "tree": {"sha": "c9b8b4c2c5dee50b761a9f72be393185edd020c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9b8b4c2c5dee50b761a9f72be393185edd020c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/271ba5a3ea59f25ebc7ba3b9a2e620a833e50b33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/271ba5a3ea59f25ebc7ba3b9a2e620a833e50b33", "html_url": "https://github.com/rust-lang/rust/commit/271ba5a3ea59f25ebc7ba3b9a2e620a833e50b33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/271ba5a3ea59f25ebc7ba3b9a2e620a833e50b33/comments", "author": {"login": "faern", "id": 332294, "node_id": "MDQ6VXNlcjMzMjI5NA==", "avatar_url": "https://avatars.githubusercontent.com/u/332294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/faern", "html_url": "https://github.com/faern", "followers_url": "https://api.github.com/users/faern/followers", "following_url": "https://api.github.com/users/faern/following{/other_user}", "gists_url": "https://api.github.com/users/faern/gists{/gist_id}", "starred_url": "https://api.github.com/users/faern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/faern/subscriptions", "organizations_url": "https://api.github.com/users/faern/orgs", "repos_url": "https://api.github.com/users/faern/repos", "events_url": "https://api.github.com/users/faern/events{/privacy}", "received_events_url": "https://api.github.com/users/faern/received_events", "type": "User", "site_admin": false}, "committer": {"login": "faern", "id": 332294, "node_id": "MDQ6VXNlcjMzMjI5NA==", "avatar_url": "https://avatars.githubusercontent.com/u/332294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/faern", "html_url": "https://github.com/faern", "followers_url": "https://api.github.com/users/faern/followers", "following_url": "https://api.github.com/users/faern/following{/other_user}", "gists_url": "https://api.github.com/users/faern/gists{/gist_id}", "starred_url": "https://api.github.com/users/faern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/faern/subscriptions", "organizations_url": "https://api.github.com/users/faern/orgs", "repos_url": "https://api.github.com/users/faern/repos", "events_url": "https://api.github.com/users/faern/events{/privacy}", "received_events_url": "https://api.github.com/users/faern/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ed25f069768c046464e68fd382c867ddb04a1e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ed25f069768c046464e68fd382c867ddb04a1e3", "html_url": "https://github.com/rust-lang/rust/commit/2ed25f069768c046464e68fd382c867ddb04a1e3"}], "stats": {"total": 70, "additions": 32, "deletions": 38}, "files": [{"sha": "4c543f1173bb7493a72730a3342788f69ffc11a8", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/271ba5a3ea59f25ebc7ba3b9a2e620a833e50b33/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/271ba5a3ea59f25ebc7ba3b9a2e620a833e50b33/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=271ba5a3ea59f25ebc7ba3b9a2e620a833e50b33", "patch": "@@ -138,7 +138,6 @@\n #![feature(associated_type_bounds)]\n #![feature(const_type_id)]\n #![feature(const_caller_location)]\n-#![feature(assoc_int_consts)]\n #![cfg_attr(not(bootstrap), feature(no_niche))] // rust-lang/rust#68303\n \n #[prelude_import]"}, {"sha": "99df846c09528fb7f2eb8863e9521d1b4052a0c3", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/271ba5a3ea59f25ebc7ba3b9a2e620a833e50b33/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/271ba5a3ea59f25ebc7ba3b9a2e620a833e50b33/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=271ba5a3ea59f25ebc7ba3b9a2e620a833e50b33", "patch": "@@ -154,57 +154,57 @@ pub mod consts {\n #[cfg(not(test))]\n impl f32 {\n     /// The radix or base of the internal representation of `f32`.\n-    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n     pub const RADIX: u32 = 2;\n \n     /// Number of significant digits in base 2.\n-    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n     pub const MANTISSA_DIGITS: u32 = 24;\n \n     /// Approximate number of significant digits in base 10.\n-    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n     pub const DIGITS: u32 = 6;\n \n     /// [Machine epsilon] value for `f32`.\n     ///\n     /// This is the difference between `1.0` and the next larger representable number.\n     ///\n     /// [Machine epsilon]: https://en.wikipedia.org/wiki/Machine_epsilon\n-    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n     pub const EPSILON: f32 = 1.19209290e-07_f32;\n \n     /// Smallest finite `f32` value.\n-    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n     pub const MIN: f32 = -3.40282347e+38_f32;\n     /// Smallest positive normal `f32` value.\n-    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n     pub const MIN_POSITIVE: f32 = 1.17549435e-38_f32;\n     /// Largest finite `f32` value.\n-    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n     pub const MAX: f32 = 3.40282347e+38_f32;\n \n     /// One greater than the minimum possible normal power of 2 exponent.\n-    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n     pub const MIN_EXP: i32 = -125;\n     /// Maximum possible power of 2 exponent.\n-    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n     pub const MAX_EXP: i32 = 128;\n \n     /// Minimum possible normal power of 10 exponent.\n-    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n     pub const MIN_10_EXP: i32 = -37;\n     /// Maximum possible power of 10 exponent.\n-    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n     pub const MAX_10_EXP: i32 = 38;\n \n     /// Not a Number (NaN).\n-    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n     pub const NAN: f32 = 0.0_f32 / 0.0_f32;\n     /// Infinity (\u221e).\n-    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n     pub const INFINITY: f32 = 1.0_f32 / 0.0_f32;\n     /// Negative infinity (-\u221e).\n-    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n     pub const NEG_INFINITY: f32 = -1.0_f32 / 0.0_f32;\n \n     /// Returns `true` if this value is `NaN`."}, {"sha": "63caffc19c6f94100c0874b7cac9d70c4c4c8405", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/271ba5a3ea59f25ebc7ba3b9a2e620a833e50b33/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/271ba5a3ea59f25ebc7ba3b9a2e620a833e50b33/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=271ba5a3ea59f25ebc7ba3b9a2e620a833e50b33", "patch": "@@ -154,56 +154,56 @@ pub mod consts {\n #[cfg(not(test))]\n impl f64 {\n     /// The radix or base of the internal representation of `f64`.\n-    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n     pub const RADIX: u32 = 2;\n \n     /// Number of significant digits in base 2.\n-    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n     pub const MANTISSA_DIGITS: u32 = 53;\n     /// Approximate number of significant digits in base 10.\n-    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n     pub const DIGITS: u32 = 15;\n \n     /// [Machine epsilon] value for `f64`.\n     ///\n     /// This is the difference between `1.0` and the next larger representable number.\n     ///\n     /// [Machine epsilon]: https://en.wikipedia.org/wiki/Machine_epsilon\n-    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n     pub const EPSILON: f64 = 2.2204460492503131e-16_f64;\n \n     /// Smallest finite `f64` value.\n-    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n     pub const MIN: f64 = -1.7976931348623157e+308_f64;\n     /// Smallest positive normal `f64` value.\n-    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n     pub const MIN_POSITIVE: f64 = 2.2250738585072014e-308_f64;\n     /// Largest finite `f64` value.\n-    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n     pub const MAX: f64 = 1.7976931348623157e+308_f64;\n \n     /// One greater than the minimum possible normal power of 2 exponent.\n-    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n     pub const MIN_EXP: i32 = -1021;\n     /// Maximum possible power of 2 exponent.\n-    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n     pub const MAX_EXP: i32 = 1024;\n \n     /// Minimum possible normal power of 10 exponent.\n-    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n     pub const MIN_10_EXP: i32 = -307;\n     /// Maximum possible power of 10 exponent.\n-    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n     pub const MAX_10_EXP: i32 = 308;\n \n     /// Not a Number (NaN).\n-    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n     pub const NAN: f64 = 0.0_f64 / 0.0_f64;\n     /// Infinity (\u221e).\n-    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n     pub const INFINITY: f64 = 1.0_f64 / 0.0_f64;\n     /// Negative infinity (-\u221e).\n-    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n     pub const NEG_INFINITY: f64 = -1.0_f64 / 0.0_f64;\n \n     /// Returns `true` if this value is `NaN`."}, {"sha": "bcc38d0f0c85bc3ab30fd365e6b6dca7dce628ee", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/271ba5a3ea59f25ebc7ba3b9a2e620a833e50b33/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/271ba5a3ea59f25ebc7ba3b9a2e620a833e50b33/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=271ba5a3ea59f25ebc7ba3b9a2e620a833e50b33", "patch": "@@ -257,11 +257,10 @@ macro_rules! int_impl {\n Basic usage:\n \n ```\n-#![feature(assoc_int_consts)]\n \", $Feature, \"assert_eq!(\", stringify!($SelfT), \"::MIN, \", stringify!($Min), \");\",\n $EndFeature, \"\n ```\"),\n-            #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+            #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n             pub const MIN: Self = !0 ^ ((!0 as $UnsignedT) >> 1) as Self;\n         }\n \n@@ -273,11 +272,10 @@ $EndFeature, \"\n Basic usage:\n \n ```\n-#![feature(assoc_int_consts)]\n \", $Feature, \"assert_eq!(\", stringify!($SelfT), \"::MAX, \", stringify!($Max), \");\",\n $EndFeature, \"\n ```\"),\n-            #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+            #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n             pub const MAX: Self = !Self::MIN;\n         }\n \n@@ -2435,10 +2433,9 @@ macro_rules! uint_impl {\n Basic usage:\n \n ```\n-#![feature(assoc_int_consts)]\n \", $Feature, \"assert_eq!(\", stringify!($SelfT), \"::MIN, 0);\", $EndFeature, \"\n ```\"),\n-            #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+            #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n             pub const MIN: Self = 0;\n         }\n \n@@ -2450,11 +2447,10 @@ Basic usage:\n Basic usage:\n \n ```\n-#![feature(assoc_int_consts)]\n \", $Feature, \"assert_eq!(\", stringify!($SelfT), \"::MAX, \", stringify!($MaxV), \");\",\n $EndFeature, \"\n ```\"),\n-            #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+            #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n             pub const MAX: Self = !0;\n         }\n "}, {"sha": "50f05d0c7f9d7f373b12c395e751784635ad8ea5", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/271ba5a3ea59f25ebc7ba3b9a2e620a833e50b33/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/271ba5a3ea59f25ebc7ba3b9a2e620a833e50b33/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=271ba5a3ea59f25ebc7ba3b9a2e620a833e50b33", "patch": "@@ -237,7 +237,6 @@\n #![feature(arbitrary_self_types)]\n #![feature(array_error_internals)]\n #![feature(asm)]\n-#![feature(assoc_int_consts)]\n #![feature(associated_type_bounds)]\n #![feature(box_syntax)]\n #![feature(c_variadic)]"}]}