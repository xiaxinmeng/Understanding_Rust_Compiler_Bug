{"sha": "33ad67c124336e6393815973fc8c0a9dfe333d11", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzYWQ2N2MxMjQzMzZlNjM5MzgxNTk3M2ZjOGMwYTlkZmUzMzNkMTE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-01-09T16:43:10Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-01-09T16:43:10Z"}, "message": "Rustup to rustc 1.42.0-nightly (caa231d99 2020-01-08)", "tree": {"sha": "6c9e038258d57ba687f0edf1a390a0544d19ce9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c9e038258d57ba687f0edf1a390a0544d19ce9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33ad67c124336e6393815973fc8c0a9dfe333d11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33ad67c124336e6393815973fc8c0a9dfe333d11", "html_url": "https://github.com/rust-lang/rust/commit/33ad67c124336e6393815973fc8c0a9dfe333d11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33ad67c124336e6393815973fc8c0a9dfe333d11/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6652f466efc93a8706c07cda0502fd487ce8219d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6652f466efc93a8706c07cda0502fd487ce8219d", "html_url": "https://github.com/rust-lang/rust/commit/6652f466efc93a8706c07cda0502fd487ce8219d"}], "stats": {"total": 19, "additions": 10, "deletions": 9}, "files": [{"sha": "032d15162cf16078fa2e016297fc824ccb2bab81", "filename": "src/abi/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/33ad67c124336e6393815973fc8c0a9dfe333d11/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33ad67c124336e6393815973fc8c0a9dfe333d11/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=33ad67c124336e6393815973fc8c0a9dfe333d11", "patch": "@@ -14,7 +14,7 @@ pub use self::returning::{can_return_to_ssa_var, codegen_return};\n \n // Copied from https://github.com/rust-lang/rust/blob/c2f4c57296f0d929618baed0b0d6eb594abf01eb/src/librustc/ty/layout.rs#L2349\n pub fn fn_sig_for_fn_abi<'tcx>(tcx: TyCtxt<'tcx>, instance: Instance<'tcx>) -> ty::PolyFnSig<'tcx> {\n-    let ty = instance.ty(tcx);\n+    let ty = instance.monomorphic_ty(tcx);\n     match ty.kind {\n         ty::FnDef(..) |\n         // Shims currently have type FnPtr. Not sure this should remain.\n@@ -66,7 +66,7 @@ pub fn fn_sig_for_fn_abi<'tcx>(tcx: TyCtxt<'tcx>, instance: Instance<'tcx>) -> t\n                 tcx.mk_fn_sig(std::iter::once(env_ty),\n                     ret_ty,\n                     false,\n-                    rustc::hir::Unsafety::Normal,\n+                    rustc_hir::Unsafety::Normal,\n                     rustc_target::spec::abi::Abi::Rust\n                 )\n             })\n@@ -611,7 +611,7 @@ pub fn codegen_drop<'tcx>(fx: &mut FunctionCx<'_, 'tcx, impl Backend>, drop_plac\n     if let ty::InstanceDef::DropGlue(_, None) = drop_fn.def {\n         // we don't actually need to drop anything\n     } else {\n-        let drop_fn_ty = drop_fn.ty(fx.tcx);\n+        let drop_fn_ty = drop_fn.monomorphic_ty(fx.tcx);\n         match ty.kind {\n             ty::Dynamic(..) => {\n                 let (ptr, vtable) = drop_place.to_ptr_maybe_unsized(fx);\n@@ -636,7 +636,7 @@ pub fn codegen_drop<'tcx>(fx: &mut FunctionCx<'_, 'tcx, impl Backend>, drop_plac\n                         &ty::RegionKind::ReErased,\n                         TypeAndMut {\n                             ty,\n-                            mutbl: crate::rustc::hir::Mutability::Mut,\n+                            mutbl: crate::rustc_hir::Mutability::Mut,\n                         },\n                     ),\n                 );"}, {"sha": "7df6bb1ed5e04eb318c33259a0847bfc9af05c6d", "filename": "src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33ad67c124336e6393815973fc8c0a9dfe333d11/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33ad67c124336e6393815973fc8c0a9dfe333d11/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=33ad67c124336e6393815973fc8c0a9dfe333d11", "patch": "@@ -533,7 +533,7 @@ fn trans_stmt<'tcx>(\n                 outputs: _,\n                 inputs: _,\n             } = &**asm;\n-            let rustc::hir::InlineAsmInner {\n+            let rustc_hir::InlineAsmInner {\n                 asm: asm_code, // Name\n                 outputs,       // Vec<Name>\n                 inputs,        // Vec<Name>"}, {"sha": "cca6e9911aa35d68ef5e14da7c5165e0ea4ebffe", "filename": "src/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33ad67c124336e6393815973fc8c0a9dfe333d11/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33ad67c124336e6393815973fc8c0a9dfe333d11/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=33ad67c124336e6393815973fc8c0a9dfe333d11", "patch": "@@ -73,7 +73,7 @@ pub fn clif_type_from_ty<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> Option<types:\n \n /// Is a pointer to this type a fat ptr?\n pub fn has_ptr_meta<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> bool {\n-    let ptr_ty = tcx.mk_ptr(TypeAndMut { ty, mutbl: rustc::hir::Mutability::Not });\n+    let ptr_ty = tcx.mk_ptr(TypeAndMut { ty, mutbl: rustc_hir::Mutability::Not });\n     match &tcx.layout_of(ParamEnv::reveal_all().and(ptr_ty)).unwrap().abi {\n         Abi::Scalar(_) => false,\n         Abi::ScalarPair(_, _) => true,"}, {"sha": "fe3d8e63d42d02750008f7b2e29d396ea03fb15a", "filename": "src/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33ad67c124336e6393815973fc8c0a9dfe333d11/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33ad67c124336e6393815973fc8c0a9dfe333d11/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=33ad67c124336e6393815973fc8c0a9dfe333d11", "patch": "@@ -199,7 +199,7 @@ fn data_id_for_static(\n ) -> DataId {\n     let instance = Instance::mono(tcx, def_id);\n     let symbol_name = tcx.symbol_name(instance).name.as_str();\n-    let ty = instance.ty(tcx);\n+    let ty = instance.monomorphic_ty(tcx);\n     let is_mutable = if tcx.is_mutable_static(def_id) {\n         true\n     } else {"}, {"sha": "4fa3570d2fd7a00558720c7e59e66734587398fb", "filename": "src/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33ad67c124336e6393815973fc8c0a9dfe333d11/src%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33ad67c124336e6393815973fc8c0a9dfe333d11/src%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fmod.rs?ref=33ad67c124336e6393815973fc8c0a9dfe333d11", "patch": "@@ -138,7 +138,7 @@ impl<'tcx> DebugContext<'tcx> {\n \n                 let type_entry = self.dwarf.unit.get_mut(type_id);\n \n-                //type_entry.set(gimli::DW_AT_mutable, AttributeValue::Flag(mutbl == rustc::hir::Mutability::Mut));\n+                //type_entry.set(gimli::DW_AT_mutable, AttributeValue::Flag(mutbl == rustc_hir::Mutability::Mut));\n                 type_entry.set(gimli::DW_AT_type, AttributeValue::ThisUnitEntryRef(pointee));\n \n                 type_id"}, {"sha": "0c84f1d67045b8c13e43c08cccc5cff813baa84f", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/33ad67c124336e6393815973fc8c0a9dfe333d11/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33ad67c124336e6393815973fc8c0a9dfe333d11/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=33ad67c124336e6393815973fc8c0a9dfe333d11", "patch": "@@ -9,6 +9,7 @@ extern crate rustc_codegen_utils;\n extern crate rustc_data_structures;\n extern crate rustc_driver;\n extern crate rustc_fs_util;\n+extern crate rustc_hir;\n extern crate rustc_incremental;\n extern crate rustc_index;\n extern crate rustc_mir;\n@@ -68,7 +69,7 @@ mod prelude {\n     pub use rustc_span::{Pos, Span};\n \n     pub use rustc::bug;\n-    pub use rustc::hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n+    pub use rustc_hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n     pub use rustc::mir::{self, interpret::AllocId, mono::MonoItem, *};\n     pub use rustc::session::{\n         config::{CrateType, Lto},"}]}