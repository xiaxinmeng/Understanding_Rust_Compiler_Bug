{"sha": "b4038977a39f7c5bfa76cccf586930ec57befbad", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0MDM4OTc3YTM5ZjdjNWJmYTc2Y2NjZjU4NjkzMGVjNTdiZWZiYWQ=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2017-06-20T22:25:51Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2017-06-20T22:25:51Z"}, "message": "Add `Iterator::for_each`\n\nThis works like a `for` loop in functional style, applying a closure to\nevery item in the `Iterator`.  It doesn't allow `break`/`continue` like\na `for` loop, nor any other control flow outside the closure, but it may\nbe a more legible style for tying up the end of a long iterator chain.\n\nThis was tried before in #14911, but nobody made the case for using it\nwith longer iterators.  There was also `Iterator::advance` at that time\nwhich was more capable than `for_each`, but that no longer exists.\n\nThe `itertools` crate has `Itertools::foreach` with the same behavior,\nbut thankfully the names won't collide.  The `rayon` crate also has a\n`ParallelIterator::for_each` where simple `for` loops aren't possible.\n\n> I really wish we had `for_each` on seq iterators. Having to use a\n> dummy operation is annoying.  - [@nikomatsakis][1]\n\n[1]: https://github.com/nikomatsakis/rayon/pull/367#issuecomment-308455185", "tree": {"sha": "b93b87a762f7ea17657804ec3653b374bb0c7d64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b93b87a762f7ea17657804ec3653b374bb0c7d64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4038977a39f7c5bfa76cccf586930ec57befbad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4038977a39f7c5bfa76cccf586930ec57befbad", "html_url": "https://github.com/rust-lang/rust/commit/b4038977a39f7c5bfa76cccf586930ec57befbad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4038977a39f7c5bfa76cccf586930ec57befbad/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29bce6e220f6fd2292d13d65fe503af7bf4852b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/29bce6e220f6fd2292d13d65fe503af7bf4852b7", "html_url": "https://github.com/rust-lang/rust/commit/29bce6e220f6fd2292d13d65fe503af7bf4852b7"}], "stats": {"total": 63, "additions": 63, "deletions": 0}, "files": [{"sha": "72fdac5e40dfaa2a15d7655be5a22ceff35a3ea5", "filename": "src/doc/unstable-book/src/library-features/iterator-for-each.md", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b4038977a39f7c5bfa76cccf586930ec57befbad/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fiterator-for-each.md", "raw_url": "https://github.com/rust-lang/rust/raw/b4038977a39f7c5bfa76cccf586930ec57befbad/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fiterator-for-each.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fiterator-for-each.md?ref=b4038977a39f7c5bfa76cccf586930ec57befbad", "patch": "@@ -0,0 +1,17 @@\n+# `iterator_for_each`\n+\n+The tracking issue for this feature is: [#TBD]\n+\n+[#TBD]: https://github.com/rust-lang/rust/issues/TBD\n+\n+------------------------\n+\n+To call a closure on each element of an iterator, you can use `for_each`:\n+\n+```rust\n+#![feature(iterator_for_each)]\n+\n+fn main() {\n+    (0..10).for_each(|i| println!(\"{}\", i));\n+}\n+```"}, {"sha": "49c43d133e51360bc6b4dd8ef04134c0df555d44", "filename": "src/libcore/iter/iterator.rs", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/b4038977a39f7c5bfa76cccf586930ec57befbad/src%2Flibcore%2Fiter%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4038977a39f7c5bfa76cccf586930ec57befbad/src%2Flibcore%2Fiter%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fiterator.rs?ref=b4038977a39f7c5bfa76cccf586930ec57befbad", "patch": "@@ -482,6 +482,52 @@ pub trait Iterator {\n         Map{iter: self, f: f}\n     }\n \n+    /// Calls a closure on each element of an iterator.\n+    ///\n+    /// This is equivalent to using a [`for`] loop on the iterator, although\n+    /// `break` and `continue` are not possible from a closure.  It's generally\n+    /// more idiomatic to use a `for` loop, but `for_each` may be more legible\n+    /// when processing items at the end of longer iterator chains.\n+    ///\n+    /// [`for`]: ../../book/first-edition/loops.html#for\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// #![feature(iterator_for_each)]\n+    ///\n+    /// let mut v = vec![];\n+    /// (0..5).for_each(|x| v.push(x * 100));\n+    ///\n+    /// let mut v2 = vec![];\n+    /// for x in 0..5 { v2.push(x * 100); }\n+    ///\n+    /// assert_eq!(v, v2);\n+    /// ```\n+    ///\n+    /// For such a small example, the `for` loop is cleaner, but `for_each`\n+    /// might be preferable to keep a functional style with longer iterators:\n+    ///\n+    /// ```\n+    /// #![feature(iterator_for_each)]\n+    ///\n+    /// (0..5).flat_map(|x| x * 100 .. x * 110)\n+    ///       .enumerate()\n+    ///       .filter(|&(i, x)| (i + x) % 3 == 0)\n+    ///       .for_each(|(i, x)| println!(\"{}:{}\", i, x));\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"iterator_for_each\", issue = \"0\")]\n+    fn for_each<F>(self, mut f: F) where\n+        Self: Sized, F: FnMut(Self::Item),\n+    {\n+        for item in self {\n+            f(item);\n+        }\n+    }\n+\n     /// Creates an iterator which uses a closure to determine if an element\n     /// should be yielded.\n     ///"}]}