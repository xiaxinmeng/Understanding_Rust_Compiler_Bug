{"sha": "c7155f2a785294e6f1bbb92fb5dbc797620a5df9", "node_id": "C_kwDOAAsO6NoAKGM3MTU1ZjJhNzg1Mjk0ZTZmMWJiYjkyZmI1ZGJjNzk3NjIwYTVkZjk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-22T12:27:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-22T12:27:45Z"}, "message": "Auto merge of #109507 - Amanieu:panic-oom-payload, r=davidtwco\n\nReport allocation errors as panics\n\nOOM is now reported as a panic but with a custom payload type (`AllocErrorPanicPayload`) which holds the layout that was passed to `handle_alloc_error`.\n\nThis should be review one commit at a time:\n- The first commit adds `AllocErrorPanicPayload` and changes allocation errors to always be reported as panics.\n- The second commit removes `#[alloc_error_handler]` and the `alloc_error_hook` API.\n\nACP: https://github.com/rust-lang/libs-team/issues/192\n\nCloses #51540\nCloses #51245", "tree": {"sha": "70ce10f7b76ee7dca49ab72e7b536aa3188a887c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70ce10f7b76ee7dca49ab72e7b536aa3188a887c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7155f2a785294e6f1bbb92fb5dbc797620a5df9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7155f2a785294e6f1bbb92fb5dbc797620a5df9", "html_url": "https://github.com/rust-lang/rust/commit/c7155f2a785294e6f1bbb92fb5dbc797620a5df9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7155f2a785294e6f1bbb92fb5dbc797620a5df9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b80e9c0a6fec3080c82809c277b54cfa2334778", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b80e9c0a6fec3080c82809c277b54cfa2334778", "html_url": "https://github.com/rust-lang/rust/commit/6b80e9c0a6fec3080c82809c277b54cfa2334778"}, {"sha": "2ead2f56c0d5340bfa24261c0bd84e3d69f81138", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ead2f56c0d5340bfa24261c0bd84e3d69f81138", "html_url": "https://github.com/rust-lang/rust/commit/2ead2f56c0d5340bfa24261c0bd84e3d69f81138"}], "stats": {"total": 30, "additions": 2, "deletions": 28}, "files": [{"sha": "e39c3272958be449815977e48da43524f652f79d", "filename": "example/alloc_example.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c7155f2a785294e6f1bbb92fb5dbc797620a5df9/example%2Falloc_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7155f2a785294e6f1bbb92fb5dbc797620a5df9/example%2Falloc_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Falloc_example.rs?ref=c7155f2a785294e6f1bbb92fb5dbc797620a5df9", "patch": "@@ -1,4 +1,4 @@\n-#![feature(start, core_intrinsics, alloc_error_handler)]\n+#![feature(start, core_intrinsics)]\n #![no_std]\n \n extern crate alloc;\n@@ -22,11 +22,6 @@ fn panic_handler(_: &core::panic::PanicInfo) -> ! {\n     core::intrinsics::abort();\n }\n \n-#[alloc_error_handler]\n-fn alloc_error_handler(_: alloc::alloc::Layout) -> ! {\n-    core::intrinsics::abort();\n-}\n-\n #[start]\n fn main(_argc: isize, _argv: *const *const u8) -> isize {\n     let world: Box<&str> = Box::new(\"Hello World!\\0\");"}, {"sha": "9fb8079a21fc2a3929f16bba7bdc185889b3831e", "filename": "src/allocator.rs", "status": "modified", "additions": 1, "deletions": 22, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c7155f2a785294e6f1bbb92fb5dbc797620a5df9/src%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7155f2a785294e6f1bbb92fb5dbc797620a5df9/src%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fallocator.rs?ref=c7155f2a785294e6f1bbb92fb5dbc797620a5df9", "patch": "@@ -6,7 +6,6 @@ use crate::prelude::*;\n use rustc_ast::expand::allocator::{AllocatorKind, AllocatorTy, ALLOCATOR_METHODS};\n use rustc_codegen_ssa::base::allocator_kind_for_codegen;\n use rustc_session::config::OomStrategy;\n-use rustc_span::symbol::sym;\n \n /// Returns whether an allocator shim was created\n pub(crate) fn codegen(\n@@ -15,21 +14,14 @@ pub(crate) fn codegen(\n     unwind_context: &mut UnwindContext,\n ) -> bool {\n     let Some(kind) = allocator_kind_for_codegen(tcx) else { return false };\n-    codegen_inner(\n-        module,\n-        unwind_context,\n-        kind,\n-        tcx.alloc_error_handler_kind(()).unwrap(),\n-        tcx.sess.opts.unstable_opts.oom,\n-    );\n+    codegen_inner(module, unwind_context, kind, tcx.sess.opts.unstable_opts.oom);\n     true\n }\n \n fn codegen_inner(\n     module: &mut impl Module,\n     unwind_context: &mut UnwindContext,\n     kind: AllocatorKind,\n-    alloc_error_handler_kind: AllocatorKind,\n     oom_strategy: OomStrategy,\n ) {\n     let usize_ty = module.target_config().pointer_type();\n@@ -71,19 +63,6 @@ fn codegen_inner(\n         );\n     }\n \n-    let sig = Signature {\n-        call_conv: module.target_config().default_call_conv,\n-        params: vec![AbiParam::new(usize_ty), AbiParam::new(usize_ty)],\n-        returns: vec![],\n-    };\n-    crate::common::create_wrapper_function(\n-        module,\n-        unwind_context,\n-        sig,\n-        \"__rust_alloc_error_handler\",\n-        &alloc_error_handler_kind.fn_name(sym::oom),\n-    );\n-\n     let data_id = module.declare_data(OomStrategy::SYMBOL, Linkage::Export, false, false).unwrap();\n     let mut data_ctx = DataContext::new();\n     data_ctx.set_align(1);"}]}