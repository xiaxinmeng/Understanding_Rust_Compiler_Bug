{"sha": "a177d85681d0c8eeaf641f2b1b76c6f755971a72", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExNzdkODU2ODFkMGM4ZWVhZjY0MWYyYjFiNzZjNmY3NTU5NzFhNzI=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-10-18T15:29:01Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-10-18T15:29:01Z"}, "message": "rename inspection attribute to `clippy_dump`", "tree": {"sha": "1241cda0b2b2006a0d612bec14dec73ec224b662", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1241cda0b2b2006a0d612bec14dec73ec224b662"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a177d85681d0c8eeaf641f2b1b76c6f755971a72", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJYBj+9AAoJEFbW7qD8Z6xGRHwP/AxS84Uea2NkUyT1SHF+JPBq\n4eHYmXeX2K6UD9tu/ngrZWnFaFlp4tdXA0yQCWpEszkj/yIC4SNVkHEtjjN05xLA\n8z/zVK6cE6GlqQGLSNOtV92a6+g2XmPDqwvecRNa6/aF8nOh8kZIJTj3VDgKokao\nqXDe0XQANQL43BzfRUoHGUsSf1Uhs7ISGlvFxiQe4W9KUS8bAbnvpTfJMDm+Gnyj\nAZIC/GGS536mudxnh4fN5rf1hpT+2qr6UMY9Z1t26rtJ1sy0QKGkJCR28w0GMxRd\nKeHrEm31jDbPnu+w0/WpNrlftmb5kVsERnflItYCurmXccb/1BrM+5EHO0Dz7Lg8\nNyBGP2LfbcyWvnS/u+oTuzRHTME8gmvCkXZsnsmpcryAzg/cpFPrStJtQNmaS+7K\nHHQzy9P2kbrsCVoSy/gN3T1+3HDMQ3ovufYz+Crb+oWGDhSJY4KLGuBu/30qqQbO\nmNJP9vqFCVrxNMeCPnYE2CJNEXA4uFAwV4d10Y3n7iglI6ZqjzfPKy77B9fjZPa1\nwwobJel+ooF/FG0glZjhjttRhOE7bW6nWQydCWlIZPxfc3zT9G9W9xV7ILMxZjwr\nAzZx2YyRv/8opAAF0+cvPX/cnnOQ6bI15P/GvpPIexi9phVbe5QOTQpmljCFnA61\n/9KfhJH8kjSCmtts0EFX\n=TY+Q\n-----END PGP SIGNATURE-----", "payload": "tree 1241cda0b2b2006a0d612bec14dec73ec224b662\nparent ff3efc759ef08873ca3b2d5f1cf0f3b5b0b79020\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1476804541 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1476804541 +0200\n\nrename inspection attribute to `clippy_dump`"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a177d85681d0c8eeaf641f2b1b76c6f755971a72", "html_url": "https://github.com/rust-lang/rust/commit/a177d85681d0c8eeaf641f2b1b76c6f755971a72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a177d85681d0c8eeaf641f2b1b76c6f755971a72/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff3efc759ef08873ca3b2d5f1cf0f3b5b0b79020", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff3efc759ef08873ca3b2d5f1cf0f3b5b0b79020", "html_url": "https://github.com/rust-lang/rust/commit/ff3efc759ef08873ca3b2d5f1cf0f3b5b0b79020"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "4fc6a7958c2ee5a718dd0b9289bcf75a56315bf9", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a177d85681d0c8eeaf641f2b1b76c6f755971a72/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a177d85681d0c8eeaf641f2b1b76c6f755971a72/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=a177d85681d0c8eeaf641f2b1b76c6f755971a72", "patch": "@@ -4,7 +4,7 @@ use rustc::lint::*;\n use rustc::hir;\n use syntax::ast::{Attribute, MetaItemKind};\n \n-/// **What it does:** Dumps every ast/hir node which has the `#[inspect]` attribute\n+/// **What it does:** Dumps every ast/hir node which has the `#[clippy_dump]` attribute\n ///\n /// **Why is this bad?** \ud83d\ude08\n ///\n@@ -32,7 +32,7 @@ impl LintPass for Pass {\n #[allow(print_stdout, use_debug)]\n impl LateLintPass for Pass {\n     fn check_item(&mut self, cx: &LateContext, item: &hir::Item) {\n-        if !has_inspect_attr(&item.attrs) {\n+        if !has_attr(&item.attrs) {\n             return;\n         }\n         let did = cx.tcx.map.local_def_id(item.id);\n@@ -102,39 +102,39 @@ impl LateLintPass for Pass {\n \n /*\n     fn check_impl_item(&mut self, cx: &LateContext, item: &hir::ImplItem) {\n-        if !has_inspect_attr(&item.attrs) {\n+        if !has_attr(&item.attrs) {\n             return;\n         }\n     }\n \n     fn check_trait_item(&mut self, cx: &LateContext, item: &hir::TraitItem) {\n-        if !has_inspect_attr(&item.attrs) {\n+        if !has_attr(&item.attrs) {\n             return;\n         }\n     }\n \n     fn check_variant(&mut self, cx: &LateContext, var: &hir::Variant, _: &hir::Generics) {\n-        if !has_inspect_attr(&var.node.attrs) {\n+        if !has_attr(&var.node.attrs) {\n             return;\n         }\n     }\n \n     fn check_struct_field(&mut self, cx: &LateContext, field: &hir::StructField) {\n-        if !has_inspect_attr(&field.attrs) {\n+        if !has_attr(&field.attrs) {\n             return;\n         }\n     }\n */\n \n     fn check_expr(&mut self, cx: &LateContext, expr: &hir::Expr) {\n-        if !has_inspect_attr(&expr.attrs) {\n+        if !has_attr(&expr.attrs) {\n             return;\n         }\n         println!(\"expression type: {}\", cx.tcx.node_id_to_type(expr.id));\n     }\n \n     fn check_decl(&mut self, cx: &LateContext, decl: &hir::Decl) {\n-        if !has_inspect_attr(decl.node.attrs()) {\n+        if !has_attr(decl.node.attrs()) {\n             return;\n         }\n         match decl.node {\n@@ -146,34 +146,34 @@ impl LateLintPass for Pass {\n     }\n /*\n     fn check_arm(&mut self, cx: &LateContext, arm: &hir::Arm) {\n-        if !has_inspect_attr(&arm.attrs) {\n+        if !has_attr(&arm.attrs) {\n             return;\n         }\n     }\n \n     fn check_stmt(&mut self, cx: &LateContext, stmt: &hir::Stmt) {\n-        if !has_inspect_attr(stmt.node.attrs()) {\n+        if !has_attr(stmt.node.attrs()) {\n             return;\n         }\n     }\n \n     fn check_local(&mut self, cx: &LateContext, local: &hir::Local) {\n-        if !has_inspect_attr(&local.attrs) {\n+        if !has_attr(&local.attrs) {\n             return;\n         }\n     }\n \n     fn check_foreign_item(&mut self, cx: &LateContext, item: &hir::ForeignItem) {\n-        if !has_inspect_attr(&item.attrs) {\n+        if !has_attr(&item.attrs) {\n             return;\n         }\n     }\n */\n }\n \n-fn has_inspect_attr(attrs: &[Attribute]) -> bool {\n+fn has_attr(attrs: &[Attribute]) -> bool {\n     attrs.iter().any(|attr| match attr.node.value.node {\n-        MetaItemKind::Word(ref word) => word == \"inspect\",\n+        MetaItemKind::Word(ref word) => word == \"clippy_dump\",\n         _ => false,\n     })\n }"}]}