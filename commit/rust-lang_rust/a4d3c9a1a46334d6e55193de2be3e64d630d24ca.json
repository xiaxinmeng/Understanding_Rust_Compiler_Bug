{"sha": "a4d3c9a1a46334d6e55193de2be3e64d630d24ca", "node_id": "C_kwDOAAsO6NoAKGE0ZDNjOWExYTQ2MzM0ZDZlNTUxOTNkZTJiZTNlNjRkNjMwZDI0Y2E", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-02-13T04:37:44Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-02-14T22:02:44Z"}, "message": "Pre-intern some `ReVar`s and `ReLateBound`s.", "tree": {"sha": "deb45c4beced2192e6f70da11d03944da1e29502", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/deb45c4beced2192e6f70da11d03944da1e29502"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4d3c9a1a46334d6e55193de2be3e64d630d24ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4d3c9a1a46334d6e55193de2be3e64d630d24ca", "html_url": "https://github.com/rust-lang/rust/commit/a4d3c9a1a46334d6e55193de2be3e64d630d24ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4d3c9a1a46334d6e55193de2be3e64d630d24ca/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cef9004f5a2f8d48f6cae474a0c1e81f485f4df2", "url": "https://api.github.com/repos/rust-lang/rust/commits/cef9004f5a2f8d48f6cae474a0c1e81f485f4df2", "html_url": "https://github.com/rust-lang/rust/commit/cef9004f5a2f8d48f6cae474a0c1e81f485f4df2"}], "stats": {"total": 63, "additions": 59, "deletions": 4}, "files": [{"sha": "e7dd36d183aa98902f506b19a34009137aababf7", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 59, "deletions": 4, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/a4d3c9a1a46334d6e55193de2be3e64d630d24ca/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4d3c9a1a46334d6e55193de2be3e64d630d24ca/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=a4d3c9a1a46334d6e55193de2be3e64d630d24ca", "patch": "@@ -243,11 +243,20 @@ impl<'tcx> CtxtInterners<'tcx> {\n     }\n }\n \n+// For these preinterned values, an alternative would be to have\n+// variable-length vectors that grow as needed. But that turned out to be\n+// slightly more complex and no faster.\n+\n const NUM_PREINTERNED_TY_VARS: u32 = 100;\n const NUM_PREINTERNED_FRESH_TYS: u32 = 20;\n const NUM_PREINTERNED_FRESH_INT_TYS: u32 = 3;\n const NUM_PREINTERNED_FRESH_FLOAT_TYS: u32 = 3;\n \n+// This number may seem high, but it is reached in all but the smallest crates.\n+const NUM_PREINTERNED_RE_VARS: u32 = 500;\n+const NUM_PREINTERNED_RE_LATE_BOUNDS_I: u32 = 2;\n+const NUM_PREINTERNED_RE_LATE_BOUNDS_V: u32 = 20;\n+\n pub struct CommonTypes<'tcx> {\n     pub unit: Ty<'tcx>,\n     pub bool: Ty<'tcx>,\n@@ -295,6 +304,14 @@ pub struct CommonLifetimes<'tcx> {\n \n     /// Erased region, used outside of type inference.\n     pub re_erased: Region<'tcx>,\n+\n+    /// Pre-interned `ReVar(ty::RegionVar(n))` for small values of `n`.\n+    pub re_vars: Vec<Region<'tcx>>,\n+\n+    /// Pre-interned values of the form:\n+    /// `ReLateBound(DebruijnIndex(i), BoundRegion { var: v, kind: BrAnon(v, None) })\n+    /// for small values of `i` and `v`.\n+    pub re_late_bounds: Vec<Vec<Region<'tcx>>>,\n }\n \n pub struct CommonConsts<'tcx> {\n@@ -358,7 +375,31 @@ impl<'tcx> CommonLifetimes<'tcx> {\n             ))\n         };\n \n-        CommonLifetimes { re_static: mk(ty::ReStatic), re_erased: mk(ty::ReErased) }\n+        let re_vars =\n+            (0..NUM_PREINTERNED_RE_VARS).map(|n| mk(ty::ReVar(ty::RegionVid::from(n)))).collect();\n+\n+        let re_late_bounds = (0..NUM_PREINTERNED_RE_LATE_BOUNDS_I)\n+            .map(|i| {\n+                (0..NUM_PREINTERNED_RE_LATE_BOUNDS_V)\n+                    .map(|v| {\n+                        mk(ty::ReLateBound(\n+                            ty::DebruijnIndex::from(i),\n+                            ty::BoundRegion {\n+                                var: ty::BoundVar::from(v),\n+                                kind: ty::BrAnon(v, None),\n+                            },\n+                        ))\n+                    })\n+                    .collect()\n+            })\n+            .collect();\n+\n+        CommonLifetimes {\n+            re_static: mk(ty::ReStatic),\n+            re_erased: mk(ty::ReErased),\n+            re_vars,\n+            re_late_bounds,\n+        }\n     }\n }\n \n@@ -2002,7 +2043,16 @@ impl<'tcx> TyCtxt<'tcx> {\n         debruijn: ty::DebruijnIndex,\n         bound_region: ty::BoundRegion,\n     ) -> Region<'tcx> {\n-        self.intern_region(ty::ReLateBound(debruijn, bound_region))\n+        // Use a pre-interned one when possible.\n+        if let ty::BoundRegion { var, kind: ty::BrAnon(v, None) } = bound_region\n+            && var.as_u32() == v\n+            && let Some(inner) = self.lifetimes.re_late_bounds.get(debruijn.as_usize())\n+            && let Some(re) = inner.get(v as usize).copied()\n+        {\n+            re\n+        } else {\n+            self.intern_region(ty::ReLateBound(debruijn, bound_region))\n+        }\n     }\n \n     #[inline]\n@@ -2011,8 +2061,13 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     #[inline]\n-    pub fn mk_re_var(self, vid: ty::RegionVid) -> Region<'tcx> {\n-        self.intern_region(ty::ReVar(vid))\n+    pub fn mk_re_var(self, v: ty::RegionVid) -> Region<'tcx> {\n+        // Use a pre-interned one when possible.\n+        self.lifetimes\n+            .re_vars\n+            .get(v.as_usize())\n+            .copied()\n+            .unwrap_or_else(|| self.intern_region(ty::ReVar(v)))\n     }\n \n     #[inline]"}]}