{"sha": "2810ea9a687df32064dc3fa7db48f52e27d39ed5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4MTBlYTlhNjg3ZGYzMjA2NGRjM2ZhN2RiNDhmNTJlMjdkMzllZDU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-07T22:32:04Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-08T00:39:03Z"}, "message": "Convert 'again' to 'loop'. Remove 'again' keyword", "tree": {"sha": "4fb386e360cc050a7a05afe564cec58fe65a245a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4fb386e360cc050a7a05afe564cec58fe65a245a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2810ea9a687df32064dc3fa7db48f52e27d39ed5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2810ea9a687df32064dc3fa7db48f52e27d39ed5", "html_url": "https://github.com/rust-lang/rust/commit/2810ea9a687df32064dc3fa7db48f52e27d39ed5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2810ea9a687df32064dc3fa7db48f52e27d39ed5/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "073df63c72faed7a773cb9ad0ad5e27edcb4f9f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/073df63c72faed7a773cb9ad0ad5e27edcb4f9f1", "html_url": "https://github.com/rust-lang/rust/commit/073df63c72faed7a773cb9ad0ad5e27edcb4f9f1"}], "stats": {"total": 112, "additions": 56, "deletions": 56}, "files": [{"sha": "7657932412f868a0c6d7c59e37d8dcb6c152e5e6", "filename": "src/cargo/cargo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2810ea9a687df32064dc3fa7db48f52e27d39ed5/src%2Fcargo%2Fcargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2810ea9a687df32064dc3fa7db48f52e27d39ed5/src%2Fcargo%2Fcargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo%2Fcargo.rs?ref=2810ea9a687df32064dc3fa7db48f52e27d39ed5", "patch": "@@ -817,7 +817,7 @@ fn install_source(c: cargo, path: &Path) {\n \n     for cratefiles.each |cf| {\n         match load_crate(&cf) {\n-            None => again,\n+            None => loop,\n             Some(crate) => {\n               for crate.deps.each |query| {\n                     // FIXME (#1356): handle cyclic dependencies"}, {"sha": "0f9df3c98e491daec88b482bc4cb0cb656834050", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2810ea9a687df32064dc3fa7db48f52e27d39ed5/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2810ea9a687df32064dc3fa7db48f52e27d39ed5/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=2810ea9a687df32064dc3fa7db48f52e27d39ed5", "patch": "@@ -562,18 +562,18 @@ fn check_variants(files: &[Path], cx: context) {\n             file_might_not_converge(&file) {\n             error!(\"Skipping convergence test based on\\\n                     file_might_not_converge\");\n-            again;\n+            loop;\n         }\n \n         let s = @result::get(io::read_whole_file_str(&file));\n         if contains(*s, ~\"#\") {\n-            again; // Macros are confusing\n+            loop; // Macros are confusing\n         }\n         if cx.mode == tm_converge && content_might_not_converge(*s) {\n-            again;\n+            loop;\n         }\n         if cx.mode == tm_run && content_is_dangerous_to_compile(*s) {\n-            again;\n+            loop;\n         }\n \n         log(error, ~\"check_variants: \" + file.to_str());"}, {"sha": "402e786d842241c6fd9d8ef9454cc5a01ea447c8", "filename": "src/libcore/gc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2810ea9a687df32064dc3fa7db48f52e27d39ed5/src%2Flibcore%2Fgc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2810ea9a687df32064dc3fa7db48f52e27d39ed5/src%2Flibcore%2Fgc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fgc.rs?ref=2810ea9a687df32064dc3fa7db48f52e27d39ed5", "patch": "@@ -218,7 +218,7 @@ unsafe fn walk_gc_roots(mem: Memory, sentinel: **Word, visitor: Visitor) {\n             last_ret = *ptr::offset(frame.fp, ret_offset) as *Word;\n \n             if ptr::is_null(pc) {\n-                again;\n+                loop;\n             }\n \n             let mut delay_reached_sentinel = reached_sentinel;\n@@ -231,13 +231,13 @@ unsafe fn walk_gc_roots(mem: Memory, sentinel: **Word, visitor: Visitor) {\n                         if root == sentinel {\n                             delay_reached_sentinel = true;\n                         }\n-                        again;\n+                        loop;\n                     }\n \n                     // Skip null pointers, which can occur when a\n                     // unique pointer has already been freed.\n                     if ptr::is_null(*root) {\n-                        again;\n+                        loop;\n                     }\n \n                     if ptr::is_null(tydesc) {\n@@ -324,7 +324,7 @@ fn cleanup_stack_for_failure() {\n         for walk_gc_roots(need_cleanup, sentinel) |root, tydesc| {\n             // Track roots to avoid double frees.\n             if option::is_some(roots.find(&*root)) {\n-                again;\n+                loop;\n             }\n             roots.insert(*root, ());\n "}, {"sha": "898d36dab45b5f87e522727168443a9cecd5da52", "filename": "src/libcore/io.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2810ea9a687df32064dc3fa7db48f52e27d39ed5/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2810ea9a687df32064dc3fa7db48f52e27d39ed5/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=2810ea9a687df32064dc3fa7db48f52e27d39ed5", "patch": "@@ -84,7 +84,7 @@ impl Reader {\n                 assert (w > 0u);\n                 if w == 1u {\n                     vec::push(chars,  b0 as char );\n-                    again;\n+                    loop;\n                 }\n                 // can't satisfy this char with the existing data\n                 if end > vec::len(buf) {"}, {"sha": "00520c881b92f6e51dbeeb249d127bc2d60eee00", "filename": "src/libcore/path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2810ea9a687df32064dc3fa7db48f52e27d39ed5/src%2Flibcore%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2810ea9a687df32064dc3fa7db48f52e27d39ed5/src%2Flibcore%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpath.rs?ref=2810ea9a687df32064dc3fa7db48f52e27d39ed5", "patch": "@@ -419,10 +419,10 @@ pure fn normalize(components: &[~str]) -> ~[~str] {\n     unchecked {\n         for components.each |c| {\n             unchecked {\n-                if c == ~\".\" && components.len() > 1 { again; }\n+                if c == ~\".\" && components.len() > 1 { loop; }\n                 if c == ~\"..\" && cs.len() != 0 {\n                     vec::pop(cs);\n-                    again;\n+                    loop;\n                 }\n                 vec::push(cs, copy c);\n             }"}, {"sha": "a0eab69fb3569e8887d31e2532643cbcd66f133e", "filename": "src/libstd/net_url.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2810ea9a687df32064dc3fa7db48f52e27d39ed5/src%2Flibstd%2Fnet_url.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2810ea9a687df32064dc3fa7db48f52e27d39ed5/src%2Flibstd%2Fnet_url.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_url.rs?ref=2810ea9a687df32064dc3fa7db48f52e27d39ed5", "patch": "@@ -347,12 +347,12 @@ fn query_to_str(+query: Query) -> ~str {\n fn get_scheme(rawurl: &str) -> result::Result<(~str, ~str), @~str> {\n     for str::each_chari(rawurl) |i,c| {\n         match c {\n-          'A' .. 'Z' | 'a' .. 'z' => again,\n+          'A' .. 'Z' | 'a' .. 'z' => loop,\n           '0' .. '9' | '+' | '-' | '.' => {\n             if i == 0 {\n                 return result::Err(@~\"url: Scheme must begin with a letter.\");\n             }\n-            again;\n+            loop;\n           }\n           ':' => {\n             if i == 0 {\n@@ -419,7 +419,7 @@ fn get_authority(rawurl: &str) ->\n     let mut pos : uint = 0, begin : uint = 2, end : uint = len;\n \n     for str::each_chari(rawurl) |i,c| {\n-        if i < 2 { again; } // ignore the leading //\n+        if i < 2 { loop; } // ignore the leading //\n \n         // deal with input class first\n         match c {\n@@ -569,7 +569,7 @@ fn get_path(rawurl: &str, authority : bool) ->\n           'A' .. 'Z' | 'a' .. 'z' | '0' .. '9' | '&' |'\\'' | '(' | ')' | '.'\n           | '@' | ':' | '%' | '/' | '+' | '!' | '*' | ',' | ';' | '='\n           | '_' | '-' => {\n-            again;\n+            loop;\n           }\n           '?' | '#' => {\n             end = i;"}, {"sha": "213a6ec8865f9c4c500f1e14a5a6c63505f97326", "filename": "src/libstd/rope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2810ea9a687df32064dc3fa7db48f52e27d39ed5/src%2Flibstd%2Frope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2810ea9a687df32064dc3fa7db48f52e27d39ed5/src%2Flibstd%2Frope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frope.rs?ref=2810ea9a687df32064dc3fa7db48f52e27d39ed5", "patch": "@@ -1171,7 +1171,7 @@ mod node {\n                   option::Some(_) => {\n                     let next_char = get_next_char_in_leaf(it);\n                     match (next_char) {\n-                      option::None => again,\n+                      option::None => loop,\n                       option::Some(_) => return next_char\n                     }\n                   }"}, {"sha": "32db095a1df212fb1f560d7983938d96a1004e60", "filename": "src/libsyntax/ext/simplext.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2810ea9a687df32064dc3fa7db48f52e27d39ed5/src%2Flibsyntax%2Fext%2Fsimplext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2810ea9a687df32064dc3fa7db48f52e27d39ed5/src%2Flibsyntax%2Fext%2Fsimplext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsimplext.rs?ref=2810ea9a687df32064dc3fa7db48f52e27d39ed5", "patch": "@@ -719,7 +719,7 @@ fn add_new_extension(cx: ext_ctxt, sp: span, arg: ast::mac_arg,\n         for clauses.each |c| {\n             match use_selectors_to_bind(c.params, arg) {\n               Some(bindings) => return transcribe(cx, bindings, c.body),\n-              None => again\n+              None => loop\n             }\n         }\n         cx.span_fatal(sp, ~\"no clauses match macro invocation\");"}, {"sha": "b85262cb79d91480bd8759323aa13c109aaeba22", "filename": "src/libsyntax/parse/comments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2810ea9a687df32064dc3fa7db48f52e27d39ed5/src%2Flibsyntax%2Fparse%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2810ea9a687df32064dc3fa7db48f52e27d39ed5/src%2Flibsyntax%2Fparse%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcomments.rs?ref=2810ea9a687df32064dc3fa7db48f52e27d39ed5", "patch": "@@ -55,7 +55,7 @@ fn strip_doc_comment_decoration(comment: ~str) -> ~str {\n         let mut i = max.get_default(uint::max_value);\n         for lines.each |line| {\n             if line.trim().is_empty() {\n-                again;\n+                loop;\n             }\n             for line.each_chari |j, c| {\n                 if j >= i {"}, {"sha": "2103af39bae71f0778347c400aad27b8aae75f49", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2810ea9a687df32064dc3fa7db48f52e27d39ed5/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2810ea9a687df32064dc3fa7db48f52e27d39ed5/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=2810ea9a687df32064dc3fa7db48f52e27d39ed5", "patch": "@@ -306,7 +306,7 @@ fn scan_digits(rdr: string_reader, radix: uint) -> ~str {\n     let mut rslt = ~\"\";\n     loop {\n         let c = rdr.curr;\n-        if c == '_' { bump(rdr); again; }\n+        if c == '_' { bump(rdr); loop; }\n         match char::to_digit(c, radix) {\n           Some(_) => {\n             str::push_char(rslt, c);"}, {"sha": "03a4c016b50791108e4610c572310cedc1147a8d", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2810ea9a687df32064dc3fa7db48f52e27d39ed5/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2810ea9a687df32064dc3fa7db48f52e27d39ed5/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=2810ea9a687df32064dc3fa7db48f52e27d39ed5", "patch": "@@ -888,7 +888,7 @@ struct parser {\n             return pexpr(self.parse_sugary_call_expr(~\"do\", expr_do_body));\n         } else if self.eat_keyword(~\"while\") {\n             return pexpr(self.parse_while_expr());\n-        } else if self.eat_keyword(~\"again\") || self.eat_keyword(~\"loop\") {\n+        } else if self.eat_keyword(~\"loop\") {\n             return pexpr(self.parse_loop_expr());\n         } else if self.eat_keyword(~\"match\") {\n             return pexpr(self.parse_alt_expr());\n@@ -1138,7 +1138,7 @@ struct parser {\n                   }\n                   _ => self.unexpected()\n                 }\n-                again;\n+                loop;\n             }\n             if self.expr_is_complete(e) { break; }\n             match copy self.token {\n@@ -3096,7 +3096,7 @@ struct parser {\n                 }\n                 self.expect(token::LBRACE);\n                 common_fields = Some(self.parse_struct_def());\n-                again;\n+                loop;\n             }\n \n             let vis = self.parse_visibility();"}, {"sha": "c2099fa447f69e17221720ab4d5adb3333a33042", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2810ea9a687df32064dc3fa7db48f52e27d39ed5/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2810ea9a687df32064dc3fa7db48f52e27d39ed5/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=2810ea9a687df32064dc3fa7db48f52e27d39ed5", "patch": "@@ -412,7 +412,7 @@ fn contextual_keyword_table() -> hashmap<~str, ()> {\n fn restricted_keyword_table() -> hashmap<~str, ()> {\n     let words = str_hash();\n     let keys = ~[\n-        ~\"again\", ~\"assert\",\n+        ~\"assert\",\n         ~\"break\",\n         ~\"const\", ~\"copy\",\n         ~\"do\", ~\"drop\","}, {"sha": "3bf9598305361eaac9efbfd78ac37d663c226baa", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2810ea9a687df32064dc3fa7db48f52e27d39ed5/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2810ea9a687df32064dc3fa7db48f52e27d39ed5/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=2810ea9a687df32064dc3fa7db48f52e27d39ed5", "patch": "@@ -1323,7 +1323,7 @@ fn print_expr(s: ps, &&expr: @ast::expr) {\n         option::iter(opt_ident, |ident| {print_ident(s, ident); space(s.s)});\n       }\n       ast::expr_again(opt_ident) => {\n-        word(s.s, ~\"again\");\n+        word(s.s, ~\"loop\");\n         space(s.s);\n         option::iter(opt_ident, |ident| {print_ident(s, ident); space(s.s)});\n       }"}, {"sha": "5708cf2f785674dc6900945d37461e1c345c3863", "filename": "src/rustc/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2810ea9a687df32064dc3fa7db48f52e27d39ed5/src%2Frustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2810ea9a687df32064dc3fa7db48f52e27d39ed5/src%2Frustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fback%2Flink.rs?ref=2810ea9a687df32064dc3fa7db48f52e27d39ed5", "patch": "@@ -687,7 +687,7 @@ fn link_binary(sess: session,\n     for cstore::get_used_crate_files(cstore).each |cratepath| {\n         if cratepath.filetype() == Some(~\"rlib\") {\n             vec::push(cc_args, cratepath.to_str());\n-            again;\n+            loop;\n         }\n         let dir = cratepath.dirname();\n         if dir != ~\"\" { vec::push(cc_args, ~\"-L\" + dir); }"}, {"sha": "41db162b95430ea6b1cf49fa0d1d50ad0c5910e1", "filename": "src/rustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2810ea9a687df32064dc3fa7db48f52e27d39ed5/src%2Frustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2810ea9a687df32064dc3fa7db48f52e27d39ed5/src%2Frustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fencoder.rs?ref=2810ea9a687df32064dc3fa7db48f52e27d39ed5", "patch": "@@ -772,7 +772,7 @@ fn encode_info_for_item(ecx: @encode_ctxt, ebml_w: ebml::Writer, item: @item,\n         // maybe we should only ever handle the real type signatures.\n         for vec::each(ms) |m| {\n             let ty_m = ast_util::trait_method_to_ty_method(m);\n-            if ty_m.self_ty.node != ast::sty_static { again; }\n+            if ty_m.self_ty.node != ast::sty_static { loop; }\n \n             vec::push(*index, {val: ty_m.id, pos: ebml_w.writer.tell()});\n "}, {"sha": "c45e6d0354623284130b251e78ac41ea8015079f", "filename": "src/rustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2810ea9a687df32064dc3fa7db48f52e27d39ed5/src%2Frustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2810ea9a687df32064dc3fa7db48f52e27d39ed5/src%2Frustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=2810ea9a687df32064dc3fa7db48f52e27d39ed5", "patch": "@@ -266,7 +266,7 @@ impl check_loan_ctxt {\n         for self.walk_loans(par_scope_id) |old_loan| {\n             for (*new_loanss).each |new_loans| {\n                 for (*new_loans).each |new_loan| {\n-                    if old_loan.lp != new_loan.lp { again; }\n+                    if old_loan.lp != new_loan.lp { loop; }\n                     match (old_loan.mutbl, new_loan.mutbl) {\n                       (m_const, _) | (_, m_const) |\n                       (m_mutbl, m_mutbl) | (m_imm, m_imm) => {"}, {"sha": "6251b321b8e615eece559c8140655694dbd5786e", "filename": "src/rustc/middle/kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2810ea9a687df32064dc3fa7db48f52e27d39ed5/src%2Frustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2810ea9a687df32064dc3fa7db48f52e27d39ed5/src%2Frustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fkind.rs?ref=2810ea9a687df32064dc3fa7db48f52e27d39ed5", "patch": "@@ -199,7 +199,7 @@ fn check_fn(fk: visit::fn_kind, decl: fn_decl, body: blk, sp: span,\n             let id = ast_util::def_id_of_def(fv.def).node;\n \n             // skip over free variables that appear in the cap clause\n-            if captured_vars.contains(id) { again; }\n+            if captured_vars.contains(id) { loop; }\n \n             // if this is the last use of the variable, then it will be\n             // a move and not a copy"}, {"sha": "084c2e82b3df5dc2c92d9932d74fea554a6576d3", "filename": "src/rustc/middle/lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2810ea9a687df32064dc3fa7db48f52e27d39ed5/src%2Frustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2810ea9a687df32064dc3fa7db48f52e27d39ed5/src%2Frustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Flang_items.rs?ref=2810ea9a687df32064dc3fa7db48f52e27d39ed5", "patch": "@@ -193,7 +193,7 @@ struct LanguageItemCollector {\n                     }\n                     dl_def(_) | dl_impl(_) | dl_field => {\n                         // Skip this.\n-                        again;\n+                        loop;\n                     }\n                 }\n "}, {"sha": "6f78c884ef06bb0675047f1b2dbe6762c0bf9e6f", "filename": "src/rustc/middle/privacy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2810ea9a687df32064dc3fa7db48f52e27d39ed5/src%2Frustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2810ea9a687df32064dc3fa7db48f52e27d39ed5/src%2Frustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fprivacy.rs?ref=2810ea9a687df32064dc3fa7db48f52e27d39ed5", "patch": "@@ -36,7 +36,7 @@ fn check_crate(tcx: ty::ctxt, method_map: &method_map, crate: @ast::crate) {\n     let check_field = |span, id, ident| {\n         let fields = ty::lookup_class_fields(tcx, id);\n         for fields.each |field| {\n-            if field.ident != ident { again; }\n+            if field.ident != ident { loop; }\n             if field.vis == private {\n                 tcx.sess.span_err(span, fmt!(\"field `%s` is private\",\n                                              *tcx.sess.parse_sess.interner"}, {"sha": "18bbb432e39b1b984786d1cb3e433e959edbd78c", "filename": "src/rustc/middle/resolve.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2810ea9a687df32064dc3fa7db48f52e27d39ed5/src%2Frustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2810ea9a687df32064dc3fa7db48f52e27d39ed5/src%2Frustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve.rs?ref=2810ea9a687df32064dc3fa7db48f52e27d39ed5", "patch": "@@ -2156,7 +2156,7 @@ struct Resolver {\n             if !self.name_is_exported(containing_module, atom) {\n                 debug!(\"(resolving glob import) name `%s` is unexported\",\n                        self.session.str_of(atom));\n-                again;\n+                loop;\n             }\n \n             debug!(\"(resolving glob import) writing module resolution \\\n@@ -2220,7 +2220,7 @@ struct Resolver {\n             if !self.name_is_exported(containing_module, atom) {\n                 debug!(\"(resolving glob import) name `%s` is unexported\",\n                        self.session.str_of(atom));\n-                again;\n+                loop;\n             }\n \n             let mut dest_import_resolution;"}, {"sha": "0b7269e6fb8761a4679c2699ebe6ae7f49c2fb01", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2810ea9a687df32064dc3fa7db48f52e27d39ed5/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2810ea9a687df32064dc3fa7db48f52e27d39ed5/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=2810ea9a687df32064dc3fa7db48f52e27d39ed5", "patch": "@@ -2537,7 +2537,7 @@ fn crate_ctxt_to_encode_parms(cx: @crate_ctxt)\n         let mut reexports = ~[];\n         for cx.exp_map.each |exp_id, defs| {\n             for defs.each |def| {\n-                if !def.reexp { again; }\n+                if !def.reexp { loop; }\n                 let path = match cx.tcx.items.get(exp_id) {\n                   ast_map::node_export(_, path) => {\n                       ast_map::path_to_str(*path, cx.sess.parse_sess.interner)"}, {"sha": "24207d66245f9e7608348d953f9f9fda2dae5b6e", "filename": "src/rustc/middle/trans/foreign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2810ea9a687df32064dc3fa7db48f52e27d39ed5/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2810ea9a687df32064dc3fa7db48f52e27d39ed5/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=2810ea9a687df32064dc3fa7db48f52e27d39ed5", "patch": "@@ -305,7 +305,7 @@ fn llreg_ty(cls: ~[x86_64_reg_class]) -> TypeRef {\n                                                   vec_len as c_uint);\n                 vec::push(tys, vec_ty);\n                 i += vec_len;\n-                again;\n+                loop;\n             }\n             sse_fs_class => {\n                 vec::push(tys, T_f32());"}, {"sha": "5aec9bed4d38392540f92408bccaa88821b9900c", "filename": "src/rustc/middle/typeck/check/alt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2810ea9a687df32064dc3fa7db48f52e27d39ed5/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Falt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2810ea9a687df32064dc3fa7db48f52e27d39ed5/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Falt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Falt.rs?ref=2810ea9a687df32064dc3fa7db48f52e27d39ed5", "patch": "@@ -381,7 +381,7 @@ fn check_pat(pcx: pat_ctxt, pat: @ast::pat, expected: ty::t) {\n         if !etc {\n             for class_fields.eachi |i, field| {\n                 if found_fields.contains_key(i) {\n-                    again;\n+                    loop;\n                 }\n                 tcx.sess.span_err(pat.span,\n                                   fmt!(\"pattern does not mention field `%s`\","}, {"sha": "a1c5af226bf11c7e05c45a9e8cb4f1b9ca434d5c", "filename": "src/rustc/middle/typeck/check/method.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2810ea9a687df32064dc3fa7db48f52e27d39ed5/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2810ea9a687df32064dc3fa7db48f52e27d39ed5/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=2810ea9a687df32064dc3fa7db48f52e27d39ed5", "patch": "@@ -298,7 +298,7 @@ struct lookup {\n             let (trait_id, bound_substs) = match bound {\n               ty::bound_copy | ty::bound_send | ty::bound_const |\n               ty::bound_owned => {\n-                again; /* ok */\n+                loop; /* ok */\n               }\n               ty::bound_trait(bound_t) => {\n                 match ty::get(bound_t).struct {\n@@ -352,7 +352,7 @@ struct lookup {\n \n         let ms = *ty::trait_methods(self.tcx(), did);\n         for ms.eachi |i, m| {\n-            if m.ident != self.m_name { again; }\n+            if m.ident != self.m_name { loop; }\n \n             let m_fty = ty::mk_fn(self.tcx(), m.fty);\n \n@@ -391,7 +391,7 @@ struct lookup {\n         let ms = *ty::trait_methods(self.tcx(), did);\n \n         for ms.each |m| {\n-            if m.ident != self.m_name { again; }\n+            if m.ident != self.m_name { loop; }\n \n             if m.vis == ast::private && !self.include_private {\n                 self.tcx().sess.span_fatal("}, {"sha": "1a9925c3618598ad8005a3ab82616980c0d2a0c4", "filename": "src/rustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2810ea9a687df32064dc3fa7db48f52e27d39ed5/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2810ea9a687df32064dc3fa7db48f52e27d39ed5/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=2810ea9a687df32064dc3fa7db48f52e27d39ed5", "patch": "@@ -183,7 +183,7 @@ fn lookup_vtable(fcx: @fn_ctxt,\n \n                         // First, ensure we haven't processed this impl yet.\n                         if impls_seen.contains_key(im.did) {\n-                            again;\n+                            loop;\n                         }\n                         impls_seen.insert(im.did, ());\n \n@@ -208,7 +208,7 @@ fn lookup_vtable(fcx: @fn_ctxt,\n                             match ty::get(of_ty).struct {\n                                 ty::ty_trait(id, _, _) => {\n                                     // Not the trait we're looking for\n-                                    if id != trait_id { again; }\n+                                    if id != trait_id { loop; }\n                                 }\n                                 _ => { /* ok */ }\n                             }\n@@ -233,7 +233,7 @@ fn lookup_vtable(fcx: @fn_ctxt,\n                             let im_bs = ty::lookup_item_type(tcx,\n                                                              im.did).bounds;\n                             match fcx.mk_subty(false, expr.span, ty, for_ty) {\n-                                result::Err(_) => again,\n+                                result::Err(_) => loop,\n                                 result::Ok(()) => ()\n                             }\n "}, {"sha": "b6fcb0c385fc4a243250e85646d8b036faec3293", "filename": "src/rustc/middle/typeck/coherence.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2810ea9a687df32064dc3fa7db48f52e27d39ed5/src%2Frustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2810ea9a687df32064dc3fa7db48f52e27d39ed5/src%2Frustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=2810ea9a687df32064dc3fa7db48f52e27d39ed5", "patch": "@@ -659,7 +659,7 @@ struct CoherenceChecker {\n                 }\n                 Some(_) => {\n                     // Skip this one.\n-                    again;\n+                    loop;\n                 }\n             }\n \n@@ -741,7 +741,7 @@ struct CoherenceChecker {\n                     }\n                     dl_def(_) | dl_impl(_) | dl_field => {\n                         // Skip this.\n-                        again;\n+                        loop;\n                     }\n                 }\n "}, {"sha": "6d46d2b597eba077c1a0a3bb6cce0808c9f3b8dd", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2810ea9a687df32064dc3fa7db48f52e27d39ed5/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2810ea9a687df32064dc3fa7db48f52e27d39ed5/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=2810ea9a687df32064dc3fa7db48f52e27d39ed5", "patch": "@@ -166,7 +166,7 @@ fn main(args: ~[~str]) {\n    while !rdr.eof() {\n       let line: ~str = rdr.read_line();\n \n-      if str::len(line) == 0u { again; }\n+      if str::len(line) == 0u { loop; }\n \n       match (line[0], proc_mode) {\n "}, {"sha": "578e9c433f3288ca98eb1fde62d8aacd3f54d21b", "filename": "src/test/bench/shootout-k-nucleotide.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2810ea9a687df32064dc3fa7db48f52e27d39ed5/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2810ea9a687df32064dc3fa7db48f52e27d39ed5/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs?ref=2810ea9a687df32064dc3fa7db48f52e27d39ed5", "patch": "@@ -154,7 +154,7 @@ fn main(args: ~[~str]) {\n    while !rdr.eof() {\n       let line: ~str = rdr.read_line();\n \n-      if str::len(line) == 0u { again; }\n+      if str::len(line) == 0u { loop; }\n \n       match (line[0], proc_mode) {\n "}, {"sha": "1b7a3a246495bbdc0b36ebc3c044229ec21ad935", "filename": "src/test/run-pass/break.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2810ea9a687df32064dc3fa7db48f52e27d39ed5/src%2Ftest%2Frun-pass%2Fbreak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2810ea9a687df32064dc3fa7db48f52e27d39ed5/src%2Ftest%2Frun-pass%2Fbreak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbreak.rs?ref=2810ea9a687df32064dc3fa7db48f52e27d39ed5", "patch": "@@ -10,14 +10,14 @@ fn main() {\n         if x == 3 { break; } assert (x <= 3);\n     }\n     i = 0;\n-    while i < 10 { i += 1; if i % 2 == 0 { again; } assert (i % 2 != 0); }\n+    while i < 10 { i += 1; if i % 2 == 0 { loop; } assert (i % 2 != 0); }\n     i = 0;\n     loop { \n-        i += 1; if i % 2 == 0 { again; } assert (i % 2 != 0); \n+        i += 1; if i % 2 == 0 { loop; } assert (i % 2 != 0); \n         if i >= 10 { break; }\n     }\n     for vec::each(~[1, 2, 3, 4, 5, 6]) |x| {\n-        if x % 2 == 0 { again; }\n+        if x % 2 == 0 { loop; }\n         assert (x % 2 != 0);\n     }\n }"}, {"sha": "316d98cd84a6c58dbfb9745693e6e6fe8a739e3e", "filename": "src/test/run-pass/class-impl-very-parameterized-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2810ea9a687df32064dc3fa7db48f52e27d39ed5/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2810ea9a687df32064dc3fa7db48f52e27d39ed5/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs?ref=2810ea9a687df32064dc3fa7db48f52e27d39ed5", "patch": "@@ -81,10 +81,10 @@ struct cat<T: copy> : map<int, T> {\n   }\n \n   pure fn each_key(&&f: fn(+int) -> bool) {\n-    for self.each |k, _v| { if !f(k) { break; } again;};\n+    for self.each |k, _v| { if !f(k) { break; } loop;};\n   }\n   pure fn each_value(&&f: fn(+T) -> bool) {\n-    for self.each |_k, v| { if !f(v) { break; } again;};\n+    for self.each |_k, v| { if !f(v) { break; } loop;};\n   }\n \n   pure fn each_ref(f: fn(k: &int, v: &T) -> bool) {}"}, {"sha": "90eddb794f42947fb45152307e5f7c639325fe73", "filename": "src/test/run-pass/ret-break-cont-in-block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2810ea9a687df32064dc3fa7db48f52e27d39ed5/src%2Ftest%2Frun-pass%2Fret-break-cont-in-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2810ea9a687df32064dc3fa7db48f52e27d39ed5/src%2Ftest%2Frun-pass%2Fret-break-cont-in-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fret-break-cont-in-block.rs?ref=2810ea9a687df32064dc3fa7db48f52e27d39ed5", "patch": "@@ -42,7 +42,7 @@ fn main() {\n     for vec::all(~[1, 2, 3, 4, 5, 6, 7]) |e| {\n         last = e;\n         if e == 5 { break; }\n-        if e % 2 == 1 { again; }\n+        if e % 2 == 1 { loop; }\n         assert e % 2 == 0;\n     };\n     assert last == 5;"}, {"sha": "eb044e2a398f888e3df951280391ee59335609c0", "filename": "src/test/run-pass/terminate-in-initializer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2810ea9a687df32064dc3fa7db48f52e27d39ed5/src%2Ftest%2Frun-pass%2Fterminate-in-initializer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2810ea9a687df32064dc3fa7db48f52e27d39ed5/src%2Ftest%2Frun-pass%2Fterminate-in-initializer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fterminate-in-initializer.rs?ref=2810ea9a687df32064dc3fa7db48f52e27d39ed5", "patch": "@@ -6,7 +6,7 @@ use std;\n \n fn test_break() { loop { let x: @int = break; } }\n \n-fn test_cont() { let mut i = 0; while i < 1 { i += 1; let x: @int = again; } }\n+fn test_cont() { let mut i = 0; while i < 1 { i += 1; let x: @int = loop; } }\n \n fn test_ret() { let x: @int = return; }\n "}, {"sha": "d2b6b178407f583aa98bd02843738dd121862d4b", "filename": "src/test/run-pass/unreachable-code.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2810ea9a687df32064dc3fa7db48f52e27d39ed5/src%2Ftest%2Frun-pass%2Funreachable-code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2810ea9a687df32064dc3fa7db48f52e27d39ed5/src%2Ftest%2Frun-pass%2Funreachable-code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funreachable-code.rs?ref=2810ea9a687df32064dc3fa7db48f52e27d39ed5", "patch": "@@ -17,7 +17,7 @@ fn log_ret() { log(error, return); }\n \n fn log_break() { loop { log(error, break); } }\n \n-fn log_again() { loop { log(error, again); } }\n+fn log_again() { loop { log(error, loop); } }\n \n fn ret_ret() -> int { return (return 2) + 3; }\n "}, {"sha": "f339e82666605fa6c6f08f4576b6c253ce1e4550", "filename": "src/test/run-pass/weird-exprs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2810ea9a687df32064dc3fa7db48f52e27d39ed5/src%2Ftest%2Frun-pass%2Fweird-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2810ea9a687df32064dc3fa7db48f52e27d39ed5/src%2Ftest%2Frun-pass%2Fweird-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fweird-exprs.rs?ref=2810ea9a687df32064dc3fa7db48f52e27d39ed5", "patch": "@@ -59,7 +59,7 @@ fn canttouchthis() -> uint {\n fn angrydome() {\n     loop { if break { } }\n     let mut i = 0;\n-    loop { i += 1; if i == 1 { match (again) { 1 => { }, _ => fail ~\"wat\" } }\n+    loop { i += 1; if i == 1 { match (loop) { 1 => { }, _ => fail ~\"wat\" } }\n       break; }\n }\n "}, {"sha": "f0ab280dfc55a4a839614892ee48a06328b92e64", "filename": "src/test/run-pass/while-cont.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2810ea9a687df32064dc3fa7db48f52e27d39ed5/src%2Ftest%2Frun-pass%2Fwhile-cont.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2810ea9a687df32064dc3fa7db48f52e27d39ed5/src%2Ftest%2Frun-pass%2Fwhile-cont.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwhile-cont.rs?ref=2810ea9a687df32064dc3fa7db48f52e27d39ed5", "patch": "@@ -5,6 +5,6 @@ fn main() {\n         assert (i > 0);\n         log(debug, i);\n         i -= 1;\n-        again;\n+        loop;\n     }\n }"}]}