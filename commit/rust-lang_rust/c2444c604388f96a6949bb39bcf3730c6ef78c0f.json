{"sha": "c2444c604388f96a6949bb39bcf3730c6ef78c0f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyNDQ0YzYwNDM4OGY5NmE2OTQ5YmIzOWJjZjM3MzBjNmVmNzhjMGY=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-01-13T17:32:55Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-01-13T17:32:55Z"}, "message": "Lint about `else { if .. }` with useless braces", "tree": {"sha": "7e60a315e71bceab12a8bc8a3cf1325d36d3619b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e60a315e71bceab12a8bc8a3cf1325d36d3619b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2444c604388f96a6949bb39bcf3730c6ef78c0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2444c604388f96a6949bb39bcf3730c6ef78c0f", "html_url": "https://github.com/rust-lang/rust/commit/c2444c604388f96a6949bb39bcf3730c6ef78c0f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2444c604388f96a6949bb39bcf3730c6ef78c0f/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "375b8168e48f7af89c754a41581f3a7102fae066", "url": "https://api.github.com/repos/rust-lang/rust/commits/375b8168e48f7af89c754a41581f3a7102fae066", "html_url": "https://github.com/rust-lang/rust/commit/375b8168e48f7af89c754a41581f3a7102fae066"}], "stats": {"total": 97, "additions": 73, "deletions": 24}, "files": [{"sha": "33bca7f871ffb3e50c1eaf1b4030b89fc45405c5", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2444c604388f96a6949bb39bcf3730c6ef78c0f/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/c2444c604388f96a6949bb39bcf3730c6ef78c0f/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=c2444c604388f96a6949bb39bcf3730c6ef78c0f", "patch": "@@ -22,7 +22,7 @@ name\n [cast_sign_loss](https://github.com/Manishearth/rust-clippy/wiki#cast_sign_loss)                               | allow   | casts from signed types to unsigned types, e.g `x as u32` where `x: i32`\n [cmp_nan](https://github.com/Manishearth/rust-clippy/wiki#cmp_nan)                                             | deny    | comparisons to NAN (which will always return false, which is probably not intended)\n [cmp_owned](https://github.com/Manishearth/rust-clippy/wiki#cmp_owned)                                         | warn    | creating owned instances for comparing with others, e.g. `x == \"foo\".to_string()`\n-[collapsible_if](https://github.com/Manishearth/rust-clippy/wiki#collapsible_if)                               | warn    | two nested `if`-expressions can be collapsed into one, e.g. `if x { if y { foo() } }` can be written as `if x && y { foo() }`\n+[collapsible_if](https://github.com/Manishearth/rust-clippy/wiki#collapsible_if)                               | warn    | two nested `if`-expressions can be collapsed into one, e.g. `if x { if y { foo() } }` can be written as `if x && y { foo() }` and an `else { if .. } expression can be collapsed to `else if`\n [cyclomatic_complexity](https://github.com/Manishearth/rust-clippy/wiki#cyclomatic_complexity)                 | warn    | finds functions that should be split up into multiple functions\n [deprecated_semver](https://github.com/Manishearth/rust-clippy/wiki#deprecated_semver)                         | warn    | `Warn` on `#[deprecated(since = \"x\")]` where x is not semver\n [duplicate_underscore_argument](https://github.com/Manishearth/rust-clippy/wiki#duplicate_underscore_argument) | warn    | Function arguments having names which only differ by an underscore"}, {"sha": "fb1d7f696d16f9a275eb5482bc407d77a0e2820e", "filename": "src/collapsible_if.rs", "status": "modified", "additions": 48, "deletions": 23, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/c2444c604388f96a6949bb39bcf3730c6ef78c0f/src%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2444c604388f96a6949bb39bcf3730c6ef78c0f/src%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcollapsible_if.rs?ref=c2444c604388f96a6949bb39bcf3730c6ef78c0f", "patch": "@@ -16,9 +16,11 @@ use rustc::lint::*;\n use rustc_front::hir::*;\n use syntax::codemap::Spanned;\n \n-use utils::{in_macro, span_help_and_lint, snippet, snippet_block};\n+use utils::{in_macro, snippet, snippet_block, span_lint_and_then};\n \n-/// **What it does:** This lint checks for nested `if`-statements which can be collapsed by `&&`-combining their conditions. It is `Warn` by default.\n+/// **What it does:** This lint checks for nested `if`-statements which can be collapsed by\n+/// `&&`-combining their conditions and for `else { if .. } expressions that can be collapsed to\n+/// `else if ..`. It is `Warn` by default.\n ///\n /// **Why is this bad?** Each `if`-statement adds one level of nesting, which makes code look more complex than it really is.\n ///\n@@ -29,7 +31,8 @@ declare_lint! {\n     pub COLLAPSIBLE_IF,\n     Warn,\n     \"two nested `if`-expressions can be collapsed into one, e.g. `if x { if y { foo() } }` \\\n-     can be written as `if x && y { foo() }`\"\n+     can be written as `if x && y { foo() }` and an `else { if .. } expression can be collapsed to \\\n+     `else if`\"\n }\n \n #[derive(Copy,Clone)]\n@@ -50,20 +53,44 @@ impl LateLintPass for CollapsibleIf {\n }\n \n fn check_if(cx: &LateContext, e: &Expr) {\n-    if let ExprIf(ref check, ref then, None) = e.node {\n-        if let Some(&Expr{ node: ExprIf(ref check_inner, ref content, None), span: sp, ..}) =\n-               single_stmt_of_block(then) {\n-            if e.span.expn_id != sp.expn_id {\n-                return;\n+    if let ExprIf(ref check, ref then, ref else_) = e.node {\n+        match *else_ {\n+            Some(ref else_) => {\n+                if_let_chain! {[\n+                    let ExprBlock(ref block) = else_.node,\n+                    block.stmts.is_empty(),\n+                    block.rules == BlockCheckMode::DefaultBlock,\n+                    let Some(ref else_) = block.expr,\n+                    let ExprIf(_, _, _) = else_.node\n+                ], {\n+                    span_lint_and_then(cx,\n+                                       COLLAPSIBLE_IF,\n+                                       block.span,\n+                                       \"this `else { if .. }` block can be collapsed\", |db| {\n+                        db.span_suggestion(block.span, \"try\",\n+                                           format!(\"else {}\",\n+                                                   snippet_block(cx, else_.span, \"..\")));\n+                    });\n+                }}\n+            }\n+            None => {\n+                if let Some(&Expr{ node: ExprIf(ref check_inner, ref content, None), span: sp, ..}) =\n+                       single_stmt_of_block(then) {\n+                    if e.span.expn_id != sp.expn_id {\n+                        return;\n+                    }\n+                    span_lint_and_then(cx,\n+                                       COLLAPSIBLE_IF,\n+                                       e.span,\n+                                       \"this if statement can be collapsed\", |db| {\n+                        db.span_suggestion(e.span, \"try\",\n+                                           format!(\"if {} && {} {}\",\n+                                                   check_to_string(cx, check),\n+                                                   check_to_string(cx, check_inner),\n+                                                   snippet_block(cx, content.span, \"..\")));\n+                    });\n+                }\n             }\n-            span_help_and_lint(cx,\n-                               COLLAPSIBLE_IF,\n-                               e.span,\n-                               \"this if statement can be collapsed\",\n-                               &format!(\"try\\nif {} && {} {}\",\n-                                        check_to_string(cx, check),\n-                                        check_to_string(cx, check_inner),\n-                                        snippet_block(cx, content.span, \"..\")));\n         }\n     }\n }\n@@ -90,16 +117,14 @@ fn single_stmt_of_block(block: &Block) -> Option<&Expr> {\n         } else {\n             None\n         }\n-    } else {\n-        if block.stmts.is_empty() {\n-            if let Some(ref p) = block.expr {\n-                Some(p)\n-            } else {\n-                None\n-            }\n+    } else if block.stmts.is_empty() {\n+        if let Some(ref p) = block.expr {\n+            Some(p)\n         } else {\n             None\n         }\n+    } else {\n+        None\n     }\n }\n "}, {"sha": "85eac28dc3870ecb3425020cabe40744ad9444b4", "filename": "tests/compile-fail/collapsible_if.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c2444c604388f96a6949bb39bcf3730c6ef78c0f/tests%2Fcompile-fail%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2444c604388f96a6949bb39bcf3730c6ef78c0f/tests%2Fcompile-fail%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcollapsible_if.rs?ref=c2444c604388f96a6949bb39bcf3730c6ef78c0f", "patch": "@@ -17,6 +17,30 @@ fn main() {\n         }\n     }\n \n+    // Collaspe `else { if .. }` to `else if ..`\n+    if x == \"hello\" {\n+        print!(\"Hello \");\n+    } else { //~ERROR: this `else { if .. }`\n+             //~| HELP try\n+             //~| SUGGESTION else if y == \"world\"\n+        if y == \"world\" {\n+            println!(\"world!\")\n+        }\n+    }\n+\n+    if x == \"hello\" {\n+        print!(\"Hello \");\n+    } else { //~ERROR this `else { if .. }`\n+             //~| HELP try\n+             //~| SUGGESTION else if y == \"world\"\n+        if y == \"world\" {\n+            println!(\"world\")\n+        }\n+        else {\n+            println!(\"!\")\n+        }\n+    }\n+\n     // Works because any if with an else statement cannot be collapsed.\n     if x == \"hello\" {\n         if y == \"world\" {"}]}