{"sha": "df29c8730383b81ae1c1d24f71d684fc20ab5d16", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmMjljODczMDM4M2I4MWFlMWMxZDI0ZjcxZDY4NGZjMjBhYjVkMTY=", "commit": {"author": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2017-09-01T20:43:34Z"}, "committer": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2017-09-01T20:43:34Z"}, "message": "some small doc improvements", "tree": {"sha": "1d48e8ebd57786b80c05c44cc011665d0a8eb941", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d48e8ebd57786b80c05c44cc011665d0a8eb941"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df29c8730383b81ae1c1d24f71d684fc20ab5d16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df29c8730383b81ae1c1d24f71d684fc20ab5d16", "html_url": "https://github.com/rust-lang/rust/commit/df29c8730383b81ae1c1d24f71d684fc20ab5d16", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df29c8730383b81ae1c1d24f71d684fc20ab5d16/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d36bfafa372f41567bd8565bcacddabea25585c", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d36bfafa372f41567bd8565bcacddabea25585c", "html_url": "https://github.com/rust-lang/rust/commit/5d36bfafa372f41567bd8565bcacddabea25585c"}], "stats": {"total": 14, "additions": 8, "deletions": 6}, "files": [{"sha": "ee44cc70b4359d7e2e37e9c76d4a508322a1c9a8", "filename": "clippy_lints/src/overflow_check_conditional.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df29c8730383b81ae1c1d24f71d684fc20ab5d16/clippy_lints%2Fsrc%2Foverflow_check_conditional.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df29c8730383b81ae1c1d24f71d684fc20ab5d16/clippy_lints%2Fsrc%2Foverflow_check_conditional.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foverflow_check_conditional.rs?ref=df29c8730383b81ae1c1d24f71d684fc20ab5d16", "patch": "@@ -13,7 +13,6 @@ use utils::span_lint;\n /// ```rust\n /// a + b < a\n /// ```\n-\n declare_lint! {\n     pub OVERFLOW_CHECK_CONDITIONAL,\n     Warn,"}, {"sha": "6ee357fd81fad59d76a2342802752ae5dba36b70", "filename": "clippy_lints/src/regex.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/df29c8730383b81ae1c1d24f71d684fc20ab5d16/clippy_lints%2Fsrc%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df29c8730383b81ae1c1d24f71d684fc20ab5d16/clippy_lints%2Fsrc%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fregex.rs?ref=df29c8730383b81ae1c1d24f71d684fc20ab5d16", "patch": "@@ -11,10 +11,9 @@ use syntax::codemap::{Span, BytePos};\n use syntax::symbol::InternedString;\n use utils::{is_expn_of, match_def_path, match_type, paths, span_lint, span_help_and_lint};\n \n-/// **What it does:** Checks [regex] creation (with `Regex::new`,\n-/// `RegexBuilder::new` or `RegexSet::new`) for correct regex syntax.\n-///\n-/// [regex]: https://crates.io/crates/regex\n+/// **What it does:** Checks [regex](https://crates.io/crates/regex) creation\n+/// (with `Regex::new`,`RegexBuilder::new` or `RegexSet::new`) for correct\n+/// regex syntax.\n ///\n /// **Why is this bad?** This will lead to a runtime panic.\n ///"}, {"sha": "eaa01fb1d821d8f1938ea7f3e21800b1aec3758a", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/df29c8730383b81ae1c1d24f71d684fc20ab5d16/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df29c8730383b81ae1c1d24f71d684fc20ab5d16/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=df29c8730383b81ae1c1d24f71d684fc20ab5d16", "patch": "@@ -1008,7 +1008,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CharLitAsU8 {\n /// that is is possible for `x` to be less than the minimum. Expressions like\n /// `max < x` are probably mistakes.\n ///\n-/// **Known problems:** None.\n+/// **Known problems:** For `usize` the size of the current compile target will\n+/// be assumed (e.g. 64 bits on 64 bit systems). This means code that uses such\n+/// a comparison to detect target pointer width will trigger this lint. One can\n+/// use `mem::sizeof` and compare its value or conditional compilation attributes\n+/// like `#[cfg(target_pointer_width = \"64\")] ..` instead.\n ///\n /// **Example:**\n /// ```rust"}]}