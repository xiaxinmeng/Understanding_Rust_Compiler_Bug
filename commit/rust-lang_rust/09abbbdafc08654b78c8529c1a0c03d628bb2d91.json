{"sha": "09abbbdafc08654b78c8529c1a0c03d628bb2d91", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5YWJiYmRhZmMwODY1NGI3OGM4NTI5YzFhMGMwM2Q2MjhiYjJkOTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-09-11T00:05:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-09-11T00:05:41Z"}, "message": "auto merge of #16866 : P1start/rust/tuple-indexing, r=brson\n\nThis allows code to access the fields of tuples and tuple structs behind the feature gate `tuple_indexing`:\r\n\r\n```rust\r\n#![feature(tuple_indexing)]\r\n\r\nlet x = (1i, 2i);\r\nassert_eq!(x.1, 2);\r\n\r\nstruct Point(int, int);\r\nlet origin = Point(0, 0);\r\nassert_eq!(origin.0, 0);\r\nassert_eq!(origin.1, 0);\r\n```\r\n\r\nImplements [RFC 53](https://github.com/rust-lang/rfcs/blob/master/active/0053-tuple-accessors.md). Closes #16950.", "tree": {"sha": "aec288636a7bf0223e6965de20933b31fd661219", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aec288636a7bf0223e6965de20933b31fd661219"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09abbbdafc08654b78c8529c1a0c03d628bb2d91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09abbbdafc08654b78c8529c1a0c03d628bb2d91", "html_url": "https://github.com/rust-lang/rust/commit/09abbbdafc08654b78c8529c1a0c03d628bb2d91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09abbbdafc08654b78c8529c1a0c03d628bb2d91/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f6d27c39f48895577eff1b9b42ab0e1d8e2a4a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f6d27c39f48895577eff1b9b42ab0e1d8e2a4a8", "html_url": "https://github.com/rust-lang/rust/commit/9f6d27c39f48895577eff1b9b42ab0e1d8e2a4a8"}, {"sha": "bf274bc18bcbfea1377c5c64ae0cc099b03d9beb", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf274bc18bcbfea1377c5c64ae0cc099b03d9beb", "html_url": "https://github.com/rust-lang/rust/commit/bf274bc18bcbfea1377c5c64ae0cc099b03d9beb"}], "stats": {"total": 563, "additions": 549, "deletions": 14}, "files": [{"sha": "fb2407e5163818560aa1bb7d0afc0101da42ebf0", "filename": "src/doc/rust.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09abbbdafc08654b78c8529c1a0c03d628bb2d91/src%2Fdoc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/09abbbdafc08654b78c8529c1a0c03d628bb2d91/src%2Fdoc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.md?ref=09abbbdafc08654b78c8529c1a0c03d628bb2d91", "patch": "@@ -2555,6 +2555,8 @@ The currently implemented features of the reference compiler are:\n                         which is considered wildly unsafe and will be\n                         obsoleted by language improvements.\n \n+* `tuple_indexing` - Allows use of tuple indexing (expressions like `expr.0`)\n+\n If a feature is promoted to a language feature, then all existing programs will\n start to receive compilation warnings about #[feature] directives which enabled\n the new feature (because the directive is no longer necessary). However, if"}, {"sha": "225fc28cd6d9888b8a2ff022f6e4566a9b4509ee", "filename": "src/librustc/front/feature_gate.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/09abbbdafc08654b78c8529c1a0c03d628bb2d91/src%2Flibrustc%2Ffront%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09abbbdafc08654b78c8529c1a0c03d628bb2d91/src%2Flibrustc%2Ffront%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ffeature_gate.rs?ref=09abbbdafc08654b78c8529c1a0c03d628bb2d91", "patch": "@@ -70,6 +70,7 @@ static KNOWN_FEATURES: &'static [(&'static str, Status)] = &[\n     (\"unboxed_closures\", Active),\n     (\"import_shadowing\", Active),\n     (\"advanced_slice_patterns\", Active),\n+    (\"tuple_indexing\", Active),\n \n     // if you change this list without updating src/doc/rust.md, cmr will be sad\n \n@@ -338,6 +339,11 @@ impl<'a> Visitor<()> for Context<'a> {\n                                   \"unboxed closures are a work-in-progress \\\n                                    feature with known bugs\");\n             }\n+            ast::ExprTupField(..) => {\n+                self.gate_feature(\"tuple_indexing\",\n+                                  e.span,\n+                                  \"tuple indexing is experimental\");\n+            }\n             _ => {}\n         }\n         visit::walk_expr(self, e, ());"}, {"sha": "138947e8a873b5cdbf754e24d628f0e4bb711a30", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/09abbbdafc08654b78c8529c1a0c03d628bb2d91/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09abbbdafc08654b78c8529c1a0c03d628bb2d91/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=09abbbdafc08654b78c8529c1a0c03d628bb2d91", "patch": "@@ -1056,6 +1056,7 @@ impl UnnecessaryParens {\n                 ast::ExprUnary(_, ref x) |\n                 ast::ExprCast(ref x, _) |\n                 ast::ExprField(ref x, _, _) |\n+                ast::ExprTupField(ref x, _, _) |\n                 ast::ExprIndex(ref x, _) => {\n                     // &X { y: 1 }, X { y: 1 }.y\n                     contains_exterior_struct_lit(&**x)"}, {"sha": "5969e7e0c42d5a8a286035d370be9d324e5e04fa", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09abbbdafc08654b78c8529c1a0c03d628bb2d91/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09abbbdafc08654b78c8529c1a0c03d628bb2d91/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=09abbbdafc08654b78c8529c1a0c03d628bb2d91", "patch": "@@ -807,7 +807,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                         out.push_str(token::get_name(fname).get());\n                     }\n                     mc::PositionalField(idx) => {\n-                        out.push_char('#'); // invent a notation here\n+                        out.push_char('.');\n                         out.push_str(idx.to_string().as_slice());\n                     }\n                 }"}, {"sha": "6e9b27655af79a1b9e4c59f507872f593b1e7169", "filename": "src/librustc/middle/cfg/construct.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/09abbbdafc08654b78c8529c1a0c03d628bb2d91/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09abbbdafc08654b78c8529c1a0c03d628bb2d91/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs?ref=09abbbdafc08654b78c8529c1a0c03d628bb2d91", "patch": "@@ -467,7 +467,8 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n             ast::ExprCast(e, _) |\n             ast::ExprUnary(_, e) |\n             ast::ExprParen(e) |\n-            ast::ExprField(e, _, _) => {\n+            ast::ExprField(e, _, _) |\n+            ast::ExprTupField(e, _, _) => {\n                 self.straightline(expr, pred, [e])\n             }\n "}, {"sha": "a9a3d94ded897a0ce2bede4f0738b6260b582725", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/09abbbdafc08654b78c8529c1a0c03d628bb2d91/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09abbbdafc08654b78c8529c1a0c03d628bb2d91/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=09abbbdafc08654b78c8529c1a0c03d628bb2d91", "patch": "@@ -173,6 +173,7 @@ fn check_expr(v: &mut CheckCrateVisitor, e: &Expr, is_const: bool) {\n           ExprAddrOf(MutImmutable, _) |\n           ExprParen(..) |\n           ExprField(..) |\n+          ExprTupField(..) |\n           ExprIndex(..) |\n           ExprTup(..) |\n           ExprRepeat(..) |"}, {"sha": "ca58b4b6e60a40d8f498880c7b4c24d5d48b7e2a", "filename": "src/librustc/middle/check_static.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09abbbdafc08654b78c8529c1a0c03d628bb2d91/src%2Flibrustc%2Fmiddle%2Fcheck_static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09abbbdafc08654b78c8529c1a0c03d628bb2d91/src%2Flibrustc%2Fmiddle%2Fcheck_static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_static.rs?ref=09abbbdafc08654b78c8529c1a0c03d628bb2d91", "patch": "@@ -106,7 +106,7 @@ impl<'a, 'tcx> Visitor<bool> for CheckStaticVisitor<'a, 'tcx> {\n         }\n \n         match e.node {\n-            ast::ExprField(..) | ast::ExprVec(..) |\n+            ast::ExprField(..) | ast::ExprTupField(..) | ast::ExprVec(..) |\n             ast::ExprBlock(..) | ast::ExprTup(..)  => {\n                 visit::walk_expr(self, e, is_const);\n             }"}, {"sha": "2b4b6756f9f859ce046b06e4084a5461423f2f2f", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09abbbdafc08654b78c8529c1a0c03d628bb2d91/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09abbbdafc08654b78c8529c1a0c03d628bb2d91/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=09abbbdafc08654b78c8529c1a0c03d628bb2d91", "patch": "@@ -225,6 +225,8 @@ impl<'a, 'tcx> ConstEvalVisitor<'a, 'tcx> {\n \n             ast::ExprField(ref base, _, _) => self.classify(&**base),\n \n+            ast::ExprTupField(ref base, _, _) => self.classify(&**base),\n+\n             ast::ExprIndex(ref base, ref idx) =>\n                 join(self.classify(&**base), self.classify(&**idx)),\n "}, {"sha": "f275c818716599a9fee9ad6577c3ed8aea074299", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/09abbbdafc08654b78c8529c1a0c03d628bb2d91/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09abbbdafc08654b78c8529c1a0c03d628bb2d91/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=09abbbdafc08654b78c8529c1a0c03d628bb2d91", "patch": "@@ -145,6 +145,17 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n         }\n     }\n \n+    fn handle_tup_field_access(&mut self, lhs: &ast::Expr, idx: uint) {\n+        match ty::get(ty::expr_ty_adjusted(self.tcx, lhs)).sty {\n+            ty::ty_struct(id, _) => {\n+                let fields = ty::lookup_struct_fields(self.tcx, id);\n+                let field_id = fields[idx].id;\n+                self.live_symbols.insert(field_id.node);\n+            },\n+            _ => ()\n+        }\n+    }\n+\n     fn handle_field_pattern_match(&mut self, lhs: &ast::Pat, pats: &[ast::FieldPat]) {\n         let id = match self.tcx.def_map.borrow().get(&lhs.id) {\n             &def::DefVariant(_, id, _) => id,\n@@ -255,6 +266,9 @@ impl<'a, 'tcx> Visitor<MarkSymbolVisitorContext> for MarkSymbolVisitor<'a, 'tcx>\n             ast::ExprField(ref lhs, ref ident, _) => {\n                 self.handle_field_access(&**lhs, &ident.node);\n             }\n+            ast::ExprTupField(ref lhs, idx, _) => {\n+                self.handle_tup_field_access(&**lhs, idx.node);\n+            }\n             _ => ()\n         }\n "}, {"sha": "d2362b7e9429b3291801da7dc058878e8ce63275", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09abbbdafc08654b78c8529c1a0c03d628bb2d91/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09abbbdafc08654b78c8529c1a0c03d628bb2d91/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=09abbbdafc08654b78c8529c1a0c03d628bb2d91", "patch": "@@ -324,6 +324,10 @@ impl<'d,'t,'tcx,TYPER:mc::Typer<'tcx>> ExprUseVisitor<'d,'t,TYPER> {\n                 self.select_from_expr(&**base);\n             }\n \n+            ast::ExprTupField(ref base, _, _) => {         // base.<n>\n+                self.select_from_expr(&**base);\n+            }\n+\n             ast::ExprIndex(ref lhs, ref rhs) => {           // lhs[rhs]\n                 if !self.walk_overloaded_operator(expr, &**lhs, [rhs.clone()]) {\n                     self.select_from_expr(&**lhs);"}, {"sha": "84fc8ff2c38cae28d24d06b6887f1e6afd08c9f9", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/09abbbdafc08654b78c8529c1a0c03d628bb2d91/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09abbbdafc08654b78c8529c1a0c03d628bb2d91/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=09abbbdafc08654b78c8529c1a0c03d628bb2d91", "patch": "@@ -511,7 +511,7 @@ fn visit_expr(ir: &mut IrMaps, expr: &Expr) {\n       }\n \n       // otherwise, live nodes are not required:\n-      ExprIndex(..) | ExprField(..) | ExprVec(..) |\n+      ExprIndex(..) | ExprField(..) | ExprTupField(..) | ExprVec(..) |\n       ExprCall(..) | ExprMethodCall(..) | ExprTup(..) |\n       ExprBinary(..) | ExprAddrOf(..) |\n       ExprCast(..) | ExprUnary(..) | ExprBreak(_) |\n@@ -965,6 +965,10 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n               self.propagate_through_expr(&**e, succ)\n           }\n \n+          ExprTupField(ref e, _, _) => {\n+              self.propagate_through_expr(&**e, succ)\n+          }\n+\n           ExprFnBlock(_, _, ref blk) |\n           ExprProc(_, ref blk) |\n           ExprUnboxedFn(_, _, _, ref blk) => {\n@@ -1271,6 +1275,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n         match expr.node {\n             ExprPath(_) => succ,\n             ExprField(ref e, _, _) => self.propagate_through_expr(&**e, succ),\n+            ExprTupField(ref e, _, _) => self.propagate_through_expr(&**e, succ),\n             _ => self.propagate_through_expr(expr, succ)\n         }\n     }\n@@ -1445,7 +1450,7 @@ fn check_expr(this: &mut Liveness, expr: &Expr) {\n       // no correctness conditions related to liveness\n       ExprCall(..) | ExprMethodCall(..) | ExprIf(..) | ExprMatch(..) |\n       ExprWhile(..) | ExprLoop(..) | ExprIndex(..) | ExprField(..) |\n-      ExprVec(..) | ExprTup(..) | ExprBinary(..) |\n+      ExprTupField(..) | ExprVec(..) | ExprTup(..) | ExprBinary(..) |\n       ExprCast(..) | ExprUnary(..) | ExprRet(..) | ExprBreak(..) |\n       ExprAgain(..) | ExprLit(_) | ExprBlock(..) |\n       ExprMac(..) | ExprAddrOf(..) | ExprStruct(..) | ExprRepeat(..) |"}, {"sha": "0d3dd8f91d9672128e5f9dee0b4ec8a821dd6fdf", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/09abbbdafc08654b78c8529c1a0c03d628bb2d91/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09abbbdafc08654b78c8529c1a0c03d628bb2d91/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=09abbbdafc08654b78c8529c1a0c03d628bb2d91", "patch": "@@ -465,6 +465,11 @@ impl<'t,'tcx,TYPER:Typer<'tcx>> MemCategorizationContext<'t,TYPER> {\n             Ok(self.cat_field(expr, base_cmt, f_name.node, expr_ty))\n           }\n \n+          ast::ExprTupField(ref base, idx, _) => {\n+            let base_cmt = if_ok!(self.cat_expr(&**base));\n+            Ok(self.cat_tup_field(expr, base_cmt, idx.node, expr_ty))\n+          }\n+\n           ast::ExprIndex(ref base, _) => {\n             let method_call = typeck::MethodCall::expr(expr.id());\n             match self.typer.node_method_ty(method_call) {\n@@ -737,6 +742,21 @@ impl<'t,'tcx,TYPER:Typer<'tcx>> MemCategorizationContext<'t,TYPER> {\n         })\n     }\n \n+    pub fn cat_tup_field<N:ast_node>(&self,\n+                                     node: &N,\n+                                     base_cmt: cmt,\n+                                     f_idx: uint,\n+                                     f_ty: ty::t)\n+                                     -> cmt {\n+        Rc::new(cmt_ {\n+            id: node.id(),\n+            span: node.span(),\n+            mutbl: base_cmt.mutbl.inherit(),\n+            cat: cat_interior(base_cmt, InteriorField(PositionalField(f_idx))),\n+            ty: f_ty\n+        })\n+    }\n+\n     pub fn cat_deref_obj<N:ast_node>(&self, node: &N, base_cmt: cmt) -> cmt {\n         self.cat_deref_common(node, base_cmt, 0, ty::mk_nil(), false)\n     }"}, {"sha": "cdb7d114af90306c792fd289eea0574c2d46a1bf", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/09abbbdafc08654b78c8529c1a0c03d628bb2d91/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09abbbdafc08654b78c8529c1a0c03d628bb2d91/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=09abbbdafc08654b78c8529c1a0c03d628bb2d91", "patch": "@@ -819,6 +819,14 @@ impl<'a, 'tcx> Visitor<()> for PrivacyVisitor<'a, 'tcx> {\n                     _ => {}\n                 }\n             }\n+            ast::ExprTupField(ref base, idx, _) => {\n+                match ty::get(ty::expr_ty_adjusted(self.tcx, &**base)).sty {\n+                    ty::ty_struct(id, _) => {\n+                        self.check_field(expr.span, id, UnnamedField(idx.node));\n+                    }\n+                    _ => {}\n+                }\n+            }\n             ast::ExprMethodCall(ident, _, _) => {\n                 let method_call = MethodCall::expr(expr.id);\n                 match self.tcx.method_map.borrow().find(&method_call) {"}, {"sha": "0db3864a06bb8fefeb48ac74da23014b0670da5e", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/09abbbdafc08654b78c8529c1a0c03d628bb2d91/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09abbbdafc08654b78c8529c1a0c03d628bb2d91/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=09abbbdafc08654b78c8529c1a0c03d628bb2d91", "patch": "@@ -779,6 +779,7 @@ fn resolve_local(visitor: &mut RegionResolutionVisitor,\n                 ast::ExprAddrOf(_, ref subexpr) |\n                 ast::ExprUnary(ast::UnDeref, ref subexpr) |\n                 ast::ExprField(ref subexpr, _, _) |\n+                ast::ExprTupField(ref subexpr, _, _) |\n                 ast::ExprIndex(ref subexpr, _) |\n                 ast::ExprParen(ref subexpr) => {\n                     let subexpr: &'a Gc<Expr> = subexpr; // FIXME(#11586)"}, {"sha": "7350413643c8da460fb03b10e250c2b47f7fff9b", "filename": "src/librustc/middle/save/mod.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/09abbbdafc08654b78c8529c1a0c03d628bb2d91/src%2Flibrustc%2Fmiddle%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09abbbdafc08654b78c8529c1a0c03d628bb2d91/src%2Flibrustc%2Fmiddle%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fsave%2Fmod.rs?ref=09abbbdafc08654b78c8529c1a0c03d628bb2d91", "patch": "@@ -1314,6 +1314,34 @@ impl<'l, 'tcx> Visitor<DxrVisitorEnv> for DxrVisitor<'l, 'tcx> {\n                                             \"Expected struct type, but not ty_struct\"),\n                 }\n             },\n+            ast::ExprTupField(sub_ex, idx, _) => {\n+                if generated_code(sub_ex.span) {\n+                    return\n+                }\n+\n+                self.visit_expr(&*sub_ex, e);\n+\n+                let t = ty::expr_ty_adjusted(&self.analysis.ty_cx, &*sub_ex);\n+                let t_box = ty::get(t);\n+                match t_box.sty {\n+                    ty::ty_struct(def_id, _) => {\n+                        let fields = ty::lookup_struct_fields(&self.analysis.ty_cx, def_id);\n+                        for (i, f) in fields.iter().enumerate() {\n+                            if i == idx.node {\n+                                let sub_span = self.span.span_for_last_ident(ex.span);\n+                                self.fmt.ref_str(recorder::VarRef,\n+                                                 ex.span,\n+                                                 sub_span,\n+                                                 f.id,\n+                                                 e.cur_scope);\n+                                break;\n+                            }\n+                        }\n+                    },\n+                    _ => self.sess.span_bug(ex.span,\n+                                            \"Expected struct type, but not ty_struct\"),\n+                }\n+            },\n             ast::ExprFnBlock(_, decl, body) => {\n                 if generated_code(body.span) {\n                     return"}, {"sha": "8f6a3864b37ea12a1e9af93148faa35692877107", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/09abbbdafc08654b78c8529c1a0c03d628bb2d91/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09abbbdafc08654b78c8529c1a0c03d628bb2d91/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=09abbbdafc08654b78c8529c1a0c03d628bb2d91", "patch": "@@ -440,6 +440,13 @@ fn const_expr_unadjusted(cx: &CrateContext, e: &ast::Expr,\n                   (adt::const_get_field(cx, &*brepr, bv, discr, ix), inlineable)\n               })\n           }\n+          ast::ExprTupField(ref base, idx, _) => {\n+              let (bv, inlineable, bt) = const_expr(cx, &**base, is_local);\n+              let brepr = adt::represent_type(cx, bt);\n+              expr::with_field_tys(cx.tcx(), bt, None, |discr, _| {\n+                  (adt::const_get_field(cx, &*brepr, bv, discr, idx.node), inlineable)\n+              })\n+          }\n \n           ast::ExprIndex(ref base, ref index) => {\n               let (bv, inlineable, bt) = const_expr(cx, &**base, is_local);"}, {"sha": "e1c7ef4d50f0a45b4791f29cffcb03622664ada9", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/09abbbdafc08654b78c8529c1a0c03d628bb2d91/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09abbbdafc08654b78c8529c1a0c03d628bb2d91/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=09abbbdafc08654b78c8529c1a0c03d628bb2d91", "patch": "@@ -3457,6 +3457,7 @@ fn populate_scope_map(cx: &CrateContext,\n             ast::ExprCast(ref sub_exp, _)     |\n             ast::ExprAddrOf(_, ref sub_exp)  |\n             ast::ExprField(ref sub_exp, _, _) |\n+            ast::ExprTupField(ref sub_exp, _, _) |\n             ast::ExprParen(ref sub_exp) =>\n                 walk_expr(cx, &**sub_exp, scope_stack, scope_map),\n "}, {"sha": "67dee371083a7e45aebbe70ac8be245a943599ac", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 30, "deletions": 8, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/09abbbdafc08654b78c8529c1a0c03d628bb2d91/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09abbbdafc08654b78c8529c1a0c03d628bb2d91/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=09abbbdafc08654b78c8529c1a0c03d628bb2d91", "patch": "@@ -62,7 +62,7 @@ use middle::trans::meth;\n use middle::trans::inline;\n use middle::trans::tvec;\n use middle::trans::type_of;\n-use middle::ty::struct_fields;\n+use middle::ty::{struct_fields, tup_fields};\n use middle::ty::{AutoDerefRef, AutoAddEnv, AutoUnsafe};\n use middle::ty::{AutoPtr};\n use middle::ty;\n@@ -593,6 +593,9 @@ fn trans_datum_unadjusted<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         ast::ExprField(ref base, ident, _) => {\n             trans_rec_field(bcx, &**base, ident.node)\n         }\n+        ast::ExprTupField(ref base, idx, _) => {\n+            trans_rec_tup_field(bcx, &**base, idx.node)\n+        }\n         ast::ExprIndex(ref base, ref idx) => {\n             trans_index(bcx, expr, &**base, &**idx, MethodCall::expr(expr.id))\n         }\n@@ -666,20 +669,18 @@ fn trans_datum_unadjusted<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     }\n }\n \n-fn trans_rec_field<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n-                               base: &ast::Expr,\n-                               field: ast::Ident)\n-                               -> DatumBlock<'blk, 'tcx, Expr> {\n-    //! Translates `base.field`.\n-\n+fn trans_field<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n+                           base: &ast::Expr,\n+                           get_idx: |&'blk ty::ctxt<'tcx>, &[ty::field]| -> uint)\n+                           -> DatumBlock<'blk, 'tcx, Expr> {\n     let mut bcx = bcx;\n     let _icx = push_ctxt(\"trans_rec_field\");\n \n     let base_datum = unpack_datum!(bcx, trans_to_lvalue(bcx, base, \"field\"));\n     let bare_ty = ty::unopen_type(base_datum.ty);\n     let repr = adt::represent_type(bcx.ccx(), bare_ty);\n     with_field_tys(bcx.tcx(), bare_ty, None, |discr, field_tys| {\n-        let ix = ty::field_idx_strict(bcx.tcx(), field.name, field_tys);\n+        let ix = get_idx(bcx.tcx(), field_tys);\n         let d = base_datum.get_element(\n             bcx,\n             field_tys[ix].mt.ty,\n@@ -697,6 +698,23 @@ fn trans_rec_field<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n \n         }\n     })\n+\n+}\n+\n+/// Translates `base.field`.\n+fn trans_rec_field<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n+                               base: &ast::Expr,\n+                               field: ast::Ident)\n+                               -> DatumBlock<'blk, 'tcx, Expr> {\n+    trans_field(bcx, base, |tcx, field_tys| ty::field_idx_strict(tcx, field.name, field_tys))\n+}\n+\n+/// Translates `base.<idx>`.\n+fn trans_rec_tup_field<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n+                                   base: &ast::Expr,\n+                                   idx: uint)\n+                                   -> DatumBlock<'blk, 'tcx, Expr> {\n+    trans_field(bcx, base, |_, _| idx)\n }\n \n fn trans_index<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n@@ -1238,6 +1256,10 @@ pub fn with_field_tys<R>(tcx: &ty::ctxt,\n             op(0, struct_fields(tcx, did, substs).as_slice())\n         }\n \n+        ty::ty_tup(ref v) => {\n+            op(0, tup_fields(v.as_slice()).as_slice())\n+        }\n+\n         ty::ty_enum(_, ref substs) => {\n             // We want the *variant* ID here, not the enum ID.\n             match node_id_opt {"}, {"sha": "ee59de11fc3ff19dc9e11890f22e85700293a5e4", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/09abbbdafc08654b78c8529c1a0c03d628bb2d91/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09abbbdafc08654b78c8529c1a0c03d628bb2d91/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=09abbbdafc08654b78c8529c1a0c03d628bb2d91", "patch": "@@ -3599,6 +3599,7 @@ pub fn expr_kind(tcx: &ctxt, expr: &ast::Expr) -> ExprKind {\n \n         ast::ExprUnary(ast::UnDeref, _) |\n         ast::ExprField(..) |\n+        ast::ExprTupField(..) |\n         ast::ExprIndex(..) => {\n             LvalueExpr\n         }\n@@ -4527,6 +4528,11 @@ pub fn lookup_struct_fields(cx: &ctxt, did: ast::DefId) -> Vec<field_ty> {\n     }\n }\n \n+pub fn is_tuple_struct(cx: &ctxt, did: ast::DefId) -> bool {\n+    let fields = lookup_struct_fields(cx, did);\n+    !fields.is_empty() && fields.iter().all(|f| f.name == token::special_names::unnamed_field)\n+}\n+\n pub fn lookup_struct_field(cx: &ctxt,\n                            parent: ast::DefId,\n                            field_id: ast::DefId)\n@@ -4554,6 +4560,21 @@ pub fn struct_fields(cx: &ctxt, did: ast::DefId, substs: &Substs)\n     }).collect()\n }\n \n+// Returns a list of fields corresponding to the tuple's items. trans uses\n+// this.\n+pub fn tup_fields(v: &[t]) -> Vec<field> {\n+    v.iter().enumerate().map(|(i, &f)| {\n+       field {\n+            // FIXME #6993: change type of field to Name and get rid of new()\n+            ident: ast::Ident::new(token::intern(i.to_string().as_slice())),\n+            mt: mt {\n+                ty: f,\n+                mutbl: MutImmutable\n+            }\n+        }\n+    }).collect()\n+}\n+\n pub struct UnboxedClosureUpvar {\n     pub def: def::Def,\n     pub span: Span,"}, {"sha": "4f0f6121904a128e5d4011bbfc2f8fc655bb3247", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/09abbbdafc08654b78c8529c1a0c03d628bb2d91/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09abbbdafc08654b78c8529c1a0c03d628bb2d91/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=09abbbdafc08654b78c8529c1a0c03d628bb2d91", "patch": "@@ -2603,6 +2603,16 @@ pub fn lookup_field_ty(tcx: &ty::ctxt,\n     o_field.map(|f| ty::lookup_field_type(tcx, class_id, f.id, substs))\n }\n \n+pub fn lookup_tup_field_ty(tcx: &ty::ctxt,\n+                           class_id: ast::DefId,\n+                           items: &[ty::field_ty],\n+                           idx: uint,\n+                           substs: &subst::Substs) -> Option<ty::t> {\n+\n+    let o_field = if idx < items.len() { Some(&items[idx]) } else { None };\n+    o_field.map(|f| ty::lookup_field_type(tcx, class_id, f.id, substs))\n+}\n+\n // Controls whether the arguments are automatically referenced. This is useful\n // for overloaded binary and unary operators.\n pub enum DerefArgs {\n@@ -3286,6 +3296,68 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n         fcx.write_error(expr.id);\n     }\n \n+    // Check tuple index expressions\n+    fn check_tup_field(fcx: &FnCtxt,\n+                       expr: &ast::Expr,\n+                       lvalue_pref: LvaluePreference,\n+                       base: &ast::Expr,\n+                       idx: codemap::Spanned<uint>,\n+                       _tys: &[ast::P<ast::Ty>]) {\n+        let tcx = fcx.ccx.tcx;\n+        check_expr_with_lvalue_pref(fcx, base, lvalue_pref);\n+        let expr_t = structurally_resolved_type(fcx, expr.span,\n+                                                fcx.expr_ty(base));\n+        let mut tuple_like = false;\n+        // FIXME(eddyb) #12808 Integrate privacy into this auto-deref loop.\n+        let (_, autoderefs, field_ty) =\n+            autoderef(fcx, expr.span, expr_t, Some(base.id), lvalue_pref, |base_t, _| {\n+                match ty::get(base_t).sty {\n+                    ty::ty_struct(base_id, ref substs) => {\n+                        tuple_like = ty::is_tuple_struct(tcx, base_id);\n+                        if tuple_like {\n+                            debug!(\"tuple struct named {}\", ppaux::ty_to_string(tcx, base_t));\n+                            let fields = ty::lookup_struct_fields(tcx, base_id);\n+                            lookup_tup_field_ty(tcx, base_id, fields.as_slice(),\n+                                                idx.node, &(*substs))\n+                        } else {\n+                            None\n+                        }\n+                    }\n+                    ty::ty_tup(ref v) => {\n+                        tuple_like = true;\n+                        if idx.node < v.len() { Some(v[idx.node]) } else { None }\n+                    }\n+                    _ => None\n+                }\n+            });\n+        match field_ty {\n+            Some(field_ty) => {\n+                fcx.write_ty(expr.id, field_ty);\n+                fcx.write_autoderef_adjustment(base.id, autoderefs);\n+                return;\n+            }\n+            None => {}\n+        }\n+        fcx.type_error_message(\n+            expr.span,\n+            |actual| {\n+                if tuple_like {\n+                    format!(\"attempted out-of-bounds tuple index `{}` on \\\n+                                    type `{}`\",\n+                                   idx.node,\n+                                   actual)\n+                } else {\n+                    format!(\"attempted tuple index `{}` on type `{}`, but the \\\n+                                     type was not a tuple or tuple struct\",\n+                                    idx.node,\n+                                    actual)\n+                }\n+            },\n+            expr_t, None);\n+\n+        fcx.write_error(expr.id);\n+    }\n+\n     fn check_struct_or_variant_fields(fcx: &FnCtxt,\n                                       struct_ty: ty::t,\n                                       span: Span,\n@@ -4065,6 +4137,9 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n       ast::ExprField(ref base, ref field, ref tys) => {\n         check_field(fcx, expr, lvalue_pref, &**base, field, tys.as_slice());\n       }\n+      ast::ExprTupField(ref base, idx, ref tys) => {\n+        check_tup_field(fcx, expr, lvalue_pref, &**base, idx, tys.as_slice());\n+      }\n       ast::ExprIndex(ref base, ref idx) => {\n           check_expr_with_lvalue_pref(fcx, &**base, lvalue_pref);\n           check_expr(fcx, &**idx);"}, {"sha": "8e24fc1ad5bff80de9df5e5a5443f0ddd24bf2b4", "filename": "src/librustc_back/svh.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09abbbdafc08654b78c8529c1a0c03d628bb2d91/src%2Flibrustc_back%2Fsvh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09abbbdafc08654b78c8529c1a0c03d628bb2d91/src%2Flibrustc_back%2Fsvh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fsvh.rs?ref=09abbbdafc08654b78c8529c1a0c03d628bb2d91", "patch": "@@ -222,6 +222,7 @@ mod svh_visitor {\n \n         SawExprLoop(Option<token::InternedString>),\n         SawExprField(token::InternedString),\n+        SawExprTupField(uint),\n         SawExprBreak(Option<token::InternedString>),\n         SawExprAgain(Option<token::InternedString>),\n \n@@ -276,6 +277,7 @@ mod svh_visitor {\n             ExprAssign(..)           => SawExprAssign,\n             ExprAssignOp(op, _, _)   => SawExprAssignOp(op),\n             ExprField(_, id, _)      => SawExprField(content(id.node)),\n+            ExprTupField(_, id, _)   => SawExprTupField(id.node),\n             ExprIndex(..)            => SawExprIndex,\n             ExprPath(..)             => SawExprPath,\n             ExprAddrOf(m, _)         => SawExprAddrOf(m),"}, {"sha": "4e65082fe3ad23f83b61f47206c71867aff1392a", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/09abbbdafc08654b78c8529c1a0c03d628bb2d91/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09abbbdafc08654b78c8529c1a0c03d628bb2d91/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=09abbbdafc08654b78c8529c1a0c03d628bb2d91", "patch": "@@ -540,6 +540,7 @@ pub enum Expr_ {\n     ExprAssign(Gc<Expr>, Gc<Expr>),\n     ExprAssignOp(BinOp, Gc<Expr>, Gc<Expr>),\n     ExprField(Gc<Expr>, SpannedIdent, Vec<P<Ty>>),\n+    ExprTupField(Gc<Expr>, Spanned<uint>, Vec<P<Ty>>),\n     ExprIndex(Gc<Expr>, Gc<Expr>),\n \n     /// Variable reference, possibly containing `::` and/or"}, {"sha": "6bd1fba4b58a390997ce0a08b5ea9cd67bdbc6fe", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/09abbbdafc08654b78c8529c1a0c03d628bb2d91/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09abbbdafc08654b78c8529c1a0c03d628bb2d91/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=09abbbdafc08654b78c8529c1a0c03d628bb2d91", "patch": "@@ -120,6 +120,8 @@ pub trait AstBuilder {\n     fn expr_mut_addr_of(&self, sp: Span, e: Gc<ast::Expr>) -> Gc<ast::Expr>;\n     fn expr_field_access(&self, span: Span, expr: Gc<ast::Expr>,\n                          ident: ast::Ident) -> Gc<ast::Expr>;\n+    fn expr_tup_field_access(&self, sp: Span, expr: Gc<ast::Expr>,\n+                             idx: uint) -> Gc<ast::Expr>;\n     fn expr_call(&self, span: Span, expr: Gc<ast::Expr>,\n                  args: Vec<Gc<ast::Expr>>) -> Gc<ast::Expr>;\n     fn expr_call_ident(&self, span: Span, id: ast::Ident,\n@@ -605,6 +607,16 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         let id = Spanned { node: ident, span: field_span };\n         self.expr(sp, ast::ExprField(expr, id, Vec::new()))\n     }\n+    fn expr_tup_field_access(&self, sp: Span, expr: Gc<ast::Expr>, idx: uint) -> Gc<ast::Expr> {\n+        let field_span = Span {\n+            lo: sp.lo - Pos::from_uint(idx.to_string().len()),\n+            hi: sp.hi,\n+            expn_info: sp.expn_info,\n+        };\n+\n+        let id = Spanned { node: idx, span: field_span };\n+        self.expr(sp, ast::ExprTupField(expr, id, Vec::new()))\n+    }\n     fn expr_addr_of(&self, sp: Span, e: Gc<ast::Expr>) -> Gc<ast::Expr> {\n         self.expr(sp, ast::ExprAddrOf(ast::MutImmutable, e))\n     }"}, {"sha": "30b7317fa56f181df008ded97ff8f3e4540deeab", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/09abbbdafc08654b78c8529c1a0c03d628bb2d91/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09abbbdafc08654b78c8529c1a0c03d628bb2d91/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=09abbbdafc08654b78c8529c1a0c03d628bb2d91", "patch": "@@ -134,6 +134,10 @@ pub trait Folder {\n         noop_fold_ident(i, self)\n     }\n \n+    fn fold_uint(&mut self, i: uint) -> uint {\n+        noop_fold_uint(i, self)\n+    }\n+\n     fn fold_path(&mut self, p: &Path) -> Path {\n         noop_fold_path(p, self)\n     }\n@@ -466,6 +470,10 @@ pub fn noop_fold_ident<T: Folder>(i: Ident, _: &mut T) -> Ident {\n     i\n }\n \n+pub fn noop_fold_uint<T: Folder>(i: uint, _: &mut T) -> uint {\n+    i\n+}\n+\n pub fn noop_fold_path<T: Folder>(p: &Path, fld: &mut T) -> Path {\n     ast::Path {\n         span: fld.new_span(p.span),\n@@ -1180,6 +1188,11 @@ pub fn noop_fold_expr<T: Folder>(e: Gc<Expr>, folder: &mut T) -> Gc<Expr> {\n                       respan(id.span, folder.fold_ident(id.node)),\n                       tys.iter().map(|&x| folder.fold_ty(x)).collect())\n         }\n+        ExprTupField(el, id, ref tys) => {\n+            ExprTupField(folder.fold_expr(el),\n+                      respan(id.span, folder.fold_uint(id.node)),\n+                      tys.iter().map(|&x| folder.fold_ty(x)).collect())\n+        }\n         ExprIndex(el, er) => {\n             ExprIndex(folder.fold_expr(el), folder.fold_expr(er))\n         }"}, {"sha": "328bdf883356c9234c28d98f52e3791d7786be0b", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 41, "deletions": 1, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/09abbbdafc08654b78c8529c1a0c03d628bb2d91/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09abbbdafc08654b78c8529c1a0c03d628bb2d91/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=09abbbdafc08654b78c8529c1a0c03d628bb2d91", "patch": "@@ -23,7 +23,7 @@ use ast::{DeclLocal, DefaultBlock, UnDeref, BiDiv, EMPTY_CTXT, EnumDef, Explicit\n use ast::{Expr, Expr_, ExprAddrOf, ExprMatch, ExprAgain};\n use ast::{ExprAssign, ExprAssignOp, ExprBinary, ExprBlock, ExprBox};\n use ast::{ExprBreak, ExprCall, ExprCast};\n-use ast::{ExprField, ExprFnBlock, ExprIf, ExprIndex};\n+use ast::{ExprField, ExprTupField, ExprFnBlock, ExprIf, ExprIndex};\n use ast::{ExprLit, ExprLoop, ExprMac};\n use ast::{ExprMethodCall, ExprParen, ExprPath, ExprProc};\n use ast::{ExprRepeat, ExprRet, ExprStruct, ExprTup, ExprUnary, ExprUnboxedFn};\n@@ -1937,6 +1937,11 @@ impl<'a> Parser<'a> {\n         ExprField(expr, ident, tys)\n     }\n \n+    pub fn mk_tup_field(&mut self, expr: Gc<Expr>, idx: codemap::Spanned<uint>,\n+                    tys: Vec<P<Ty>>) -> ast::Expr_ {\n+        ExprTupField(expr, idx, tys)\n+    }\n+\n     pub fn mk_assign_op(&mut self, binop: ast::BinOp,\n                         lhs: Gc<Expr>, rhs: Gc<Expr>) -> ast::Expr_ {\n         ExprAssignOp(binop, lhs, rhs)\n@@ -2286,6 +2291,41 @@ impl<'a> Parser<'a> {\n                         }\n                     }\n                   }\n+                  token::LIT_INTEGER(n) => {\n+                    let index = n.as_str();\n+                    let dot = self.last_span.hi;\n+                    hi = self.span.hi;\n+                    self.bump();\n+                    let (_, tys) = if self.eat(&token::MOD_SEP) {\n+                        self.expect_lt();\n+                        self.parse_generic_values_after_lt()\n+                    } else {\n+                        (Vec::new(), Vec::new())\n+                    };\n+\n+                    let num = from_str::<uint>(index);\n+                    match num {\n+                        Some(n) => {\n+                            let id = spanned(dot, hi, n);\n+                            let field = self.mk_tup_field(e, id, tys);\n+                            e = self.mk_expr(lo, hi, field);\n+                        }\n+                        None => {\n+                            let last_span = self.last_span;\n+                            self.span_err(last_span, \"invalid tuple or tuple struct index\");\n+                        }\n+                    }\n+                  }\n+                  token::LIT_FLOAT(n) => {\n+                    self.bump();\n+                    let last_span = self.last_span;\n+                    self.span_err(last_span,\n+                                  format!(\"unexpected token: `{}`\", n.as_str()).as_slice());\n+                    self.span_note(last_span,\n+                                   \"try parenthesizing the first index; e.g., `(foo.0).1`\");\n+                    self.abort_if_errors();\n+\n+                  }\n                   _ => self.unexpected()\n                 }\n                 continue;"}, {"sha": "a4dff45ad359f96f31bf40b58c049e1f9e4e422d", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/09abbbdafc08654b78c8529c1a0c03d628bb2d91/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09abbbdafc08654b78c8529c1a0c03d628bb2d91/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=09abbbdafc08654b78c8529c1a0c03d628bb2d91", "patch": "@@ -1607,6 +1607,18 @@ impl<'a> State<'a> {\n                     try!(word(&mut self.s, \">\"));\n                 }\n             }\n+            ast::ExprTupField(ref expr, id, ref tys) => {\n+                try!(self.print_expr(&**expr));\n+                try!(word(&mut self.s, \".\"));\n+                try!(self.print_uint(id.node));\n+                if tys.len() > 0u {\n+                    try!(word(&mut self.s, \"::<\"));\n+                    try!(self.commasep(\n+                        Inconsistent, tys.as_slice(),\n+                        |s, ty| s.print_type_ref(ty)));\n+                    try!(word(&mut self.s, \">\"));\n+                }\n+            }\n             ast::ExprIndex(ref expr, ref index) => {\n                 try!(self.print_expr(&**expr));\n                 try!(word(&mut self.s, \"[\"));\n@@ -1738,6 +1750,10 @@ impl<'a> State<'a> {\n         self.ann.post(self, NodeIdent(&ident))\n     }\n \n+    pub fn print_uint(&mut self, i: uint) -> IoResult<()> {\n+        word(&mut self.s, i.to_string().as_slice())\n+    }\n+\n     pub fn print_name(&mut self, name: ast::Name) -> IoResult<()> {\n         try!(word(&mut self.s, token::get_name(name).get()));\n         self.ann.post(self, NodeName(&name))"}, {"sha": "50b42ea2c0fd90fcd8df36e514ca24318f8b96fe", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/09abbbdafc08654b78c8529c1a0c03d628bb2d91/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09abbbdafc08654b78c8529c1a0c03d628bb2d91/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=09abbbdafc08654b78c8529c1a0c03d628bb2d91", "patch": "@@ -830,6 +830,12 @@ pub fn walk_expr<E: Clone, V: Visitor<E>>(visitor: &mut V, expression: &Expr, en\n                 visitor.visit_ty(&**typ, env.clone())\n             }\n         }\n+        ExprTupField(ref subexpression, _, ref types) => {\n+            visitor.visit_expr(&**subexpression, env.clone());\n+            for typ in types.iter() {\n+                visitor.visit_ty(&**typ, env.clone())\n+            }\n+        }\n         ExprIndex(ref main_expression, ref index_expression) => {\n             visitor.visit_expr(&**main_expression, env.clone());\n             visitor.visit_expr(&**index_expression, env.clone())"}, {"sha": "519bad4e627b7a55fdf4520f967d76e8efb17262", "filename": "src/test/compile-fail/borrow-tuple-fields.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/09abbbdafc08654b78c8529c1a0c03d628bb2d91/src%2Ftest%2Fcompile-fail%2Fborrow-tuple-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09abbbdafc08654b78c8529c1a0c03d628bb2d91/src%2Ftest%2Fcompile-fail%2Fborrow-tuple-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrow-tuple-fields.rs?ref=09abbbdafc08654b78c8529c1a0c03d628bb2d91", "patch": "@@ -0,0 +1,42 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(tuple_indexing)]\n+\n+struct Foo(Box<int>, int);\n+\n+struct Bar(int, int);\n+\n+fn main() {\n+    let x = (box 1i, 2i);\n+    let r = &x.0;\n+    let y = x; //~ ERROR cannot move out of `x` because it is borrowed\n+\n+    let mut x = (1i, 2i);\n+    let a = &x.0;\n+    let b = &mut x.0; //~ ERROR cannot borrow `x.0` as mutable because it is also borrowed as\n+\n+    let mut x = (1i, 2i);\n+    let a = &mut x.0;\n+    let b = &mut x.0; //~ ERROR cannot borrow `x.0` as mutable more than once at a time\n+\n+\n+    let x = Foo(box 1i, 2i);\n+    let r = &x.0;\n+    let y = x; //~ ERROR cannot move out of `x` because it is borrowed\n+\n+    let mut x = Bar(1i, 2i);\n+    let a = &x.0;\n+    let b = &mut x.0; //~ ERROR cannot borrow `x.0` as mutable because it is also borrowed as\n+\n+    let mut x = Bar(1i, 2i);\n+    let a = &mut x.0;\n+    let b = &mut x.0; //~ ERROR cannot borrow `x.0` as mutable more than once at a time\n+}"}, {"sha": "7f55a78e8b784ec7733aaa2d4f55155356f78d8b", "filename": "src/test/compile-fail/move-out-of-tuple-field.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/09abbbdafc08654b78c8529c1a0c03d628bb2d91/src%2Ftest%2Fcompile-fail%2Fmove-out-of-tuple-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09abbbdafc08654b78c8529c1a0c03d628bb2d91/src%2Ftest%2Fcompile-fail%2Fmove-out-of-tuple-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmove-out-of-tuple-field.rs?ref=09abbbdafc08654b78c8529c1a0c03d628bb2d91", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(tuple_indexing)]\n+\n+struct Foo(Box<int>);\n+\n+fn main() {\n+    let x = (box 1i,);\n+    let y = x.0;\n+    let z = x.0; //~ ERROR use of moved value: `x.0`\n+\n+    let x = Foo(box 1i);\n+    let y = x.0;\n+    let z = x.0; //~ ERROR use of moved value: `x.0`\n+}"}, {"sha": "d4ef0e20b266d55212307d68bafd4acb5f92c105", "filename": "src/test/compile-fail/tuple-index-not-tuple.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/09abbbdafc08654b78c8529c1a0c03d628bb2d91/src%2Ftest%2Fcompile-fail%2Ftuple-index-not-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09abbbdafc08654b78c8529c1a0c03d628bb2d91/src%2Ftest%2Fcompile-fail%2Ftuple-index-not-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftuple-index-not-tuple.rs?ref=09abbbdafc08654b78c8529c1a0c03d628bb2d91", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(tuple_indexing)]\n+\n+struct Point { x: int, y: int }\n+struct Empty;\n+\n+fn main() {\n+    let origin = Point { x: 0, y: 0 };\n+    origin.0;\n+    //~^ ERROR attempted tuple index `0` on type `Point`, but the type was not\n+    Empty.0;\n+    //~^ ERROR attempted tuple index `0` on type `Empty`, but the type was not\n+}"}, {"sha": "d16f950a5d4bd2d7ac18101f8d1ec5ec8658e35f", "filename": "src/test/compile-fail/tuple-index-out-of-bounds.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/09abbbdafc08654b78c8529c1a0c03d628bb2d91/src%2Ftest%2Fcompile-fail%2Ftuple-index-out-of-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09abbbdafc08654b78c8529c1a0c03d628bb2d91/src%2Ftest%2Fcompile-fail%2Ftuple-index-out-of-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftuple-index-out-of-bounds.rs?ref=09abbbdafc08654b78c8529c1a0c03d628bb2d91", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(tuple_indexing)]\n+\n+struct Point(int, int);\n+\n+fn main() {\n+    let origin = Point(0, 0);\n+    origin.0;\n+    origin.1;\n+    origin.2;\n+    //~^ ERROR attempted out-of-bounds tuple index `2` on type `Point`\n+    let tuple = (0i, 0i);\n+    tuple.0;\n+    tuple.1;\n+    tuple.2;\n+    //~^ ERROR attempted out-of-bounds tuple index `2` on type `(int,int)`\n+}"}, {"sha": "046d76c4331dc36e357cc039aac8e8b075b88c03", "filename": "src/test/run-pass/borrow-tuple-fields.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/09abbbdafc08654b78c8529c1a0c03d628bb2d91/src%2Ftest%2Frun-pass%2Fborrow-tuple-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09abbbdafc08654b78c8529c1a0c03d628bb2d91/src%2Ftest%2Frun-pass%2Fborrow-tuple-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrow-tuple-fields.rs?ref=09abbbdafc08654b78c8529c1a0c03d628bb2d91", "patch": "@@ -0,0 +1,48 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(tuple_indexing)]\n+\n+struct Foo(int, int);\n+\n+fn main() {\n+    let x = (1i, 2i);\n+    let a = &x.0;\n+    let b = &x.0;\n+    assert_eq!(*a, 1);\n+    assert_eq!(*b, 1);\n+\n+    let mut x = (1i, 2i);\n+    {\n+        let a = &x.0;\n+        let b = &mut x.1;\n+        *b = 5;\n+        assert_eq!(*a, 1);\n+    }\n+    assert_eq!(x.0, 1);\n+    assert_eq!(x.1, 5);\n+\n+\n+    let x = Foo(1i, 2i);\n+    let a = &x.0;\n+    let b = &x.0;\n+    assert_eq!(*a, 1);\n+    assert_eq!(*b, 1);\n+\n+    let mut x = Foo(1i, 2i);\n+    {\n+        let a = &x.0;\n+        let b = &mut x.1;\n+        *b = 5;\n+        assert_eq!(*a, 1);\n+    }\n+    assert_eq!(x.0, 1);\n+    assert_eq!(x.1, 5);\n+}"}, {"sha": "fdee1d9f96c4d346f4737e9c340b627909171462", "filename": "src/test/run-pass/tuple-index-fat-types.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/09abbbdafc08654b78c8529c1a0c03d628bb2d91/src%2Ftest%2Frun-pass%2Ftuple-index-fat-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09abbbdafc08654b78c8529c1a0c03d628bb2d91/src%2Ftest%2Frun-pass%2Ftuple-index-fat-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftuple-index-fat-types.rs?ref=09abbbdafc08654b78c8529c1a0c03d628bb2d91", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(tuple_indexing)]\n+\n+struct Foo<'a>(&'a [int]);\n+\n+fn main() {\n+    let x: &[int] = &[1i, 2, 3];\n+    let y = (x,);\n+    assert_eq!(y.0, x);\n+\n+    let x: &[int] = &[1i, 2, 3];\n+    let y = Foo(x);\n+    assert_eq!(y.0, x);\n+}"}, {"sha": "107dc40e1867140ca335db60788f7389d54c41a8", "filename": "src/test/run-pass/tuple-index.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/09abbbdafc08654b78c8529c1a0c03d628bb2d91/src%2Ftest%2Frun-pass%2Ftuple-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09abbbdafc08654b78c8529c1a0c03d628bb2d91/src%2Ftest%2Frun-pass%2Ftuple-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftuple-index.rs?ref=09abbbdafc08654b78c8529c1a0c03d628bb2d91", "patch": "@@ -0,0 +1,42 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(tuple_indexing)]\n+\n+struct Point(int, int);\n+\n+fn main() {\n+    let mut x = Point(3, 2);\n+    assert_eq!(x.0, 3);\n+    assert_eq!(x.1, 2);\n+    x.0 += 5;\n+    assert_eq!(x.0, 8);\n+    {\n+        let ry = &mut x.1;\n+        *ry -= 2;\n+        x.0 += 3;\n+        assert_eq!(x.0, 11);\n+    }\n+    assert_eq!(x.1, 0);\n+\n+    let mut x = (3i, 2i);\n+    assert_eq!(x.0, 3);\n+    assert_eq!(x.1, 2);\n+    x.0 += 5;\n+    assert_eq!(x.0, 8);\n+    {\n+        let ry = &mut x.1;\n+        *ry -= 2;\n+        x.0 += 3;\n+        assert_eq!(x.0, 11);\n+    }\n+    assert_eq!(x.1, 0);\n+\n+}"}]}