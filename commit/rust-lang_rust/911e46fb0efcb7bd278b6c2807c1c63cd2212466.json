{"sha": "911e46fb0efcb7bd278b6c2807c1c63cd2212466", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxMWU0NmZiMGVmY2I3YmQyNzhiNmMyODA3YzFjNjNjZDIyMTI0NjY=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-10-04T02:45:50Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-10-04T02:45:50Z"}, "message": "Update for changes in rustc.", "tree": {"sha": "5f61661eb0d9c93afb6e98c54cfffc0d5c5efb20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f61661eb0d9c93afb6e98c54cfffc0d5c5efb20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/911e46fb0efcb7bd278b6c2807c1c63cd2212466", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/911e46fb0efcb7bd278b6c2807c1c63cd2212466", "html_url": "https://github.com/rust-lang/rust/commit/911e46fb0efcb7bd278b6c2807c1c63cd2212466", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/911e46fb0efcb7bd278b6c2807c1c63cd2212466/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a08f0615fc178fb0af53a83f08289284fdffa139", "url": "https://api.github.com/repos/rust-lang/rust/commits/a08f0615fc178fb0af53a83f08289284fdffa139", "html_url": "https://github.com/rust-lang/rust/commit/a08f0615fc178fb0af53a83f08289284fdffa139"}], "stats": {"total": 62, "additions": 20, "deletions": 42}, "files": [{"sha": "b5d339dd9a7d58b5dfcb7406a52bb98d3edfffc2", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 15, "deletions": 26, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/911e46fb0efcb7bd278b6c2807c1c63cd2212466/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/911e46fb0efcb7bd278b6c2807c1c63cd2212466/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=911e46fb0efcb7bd278b6c2807c1c63cd2212466", "patch": "@@ -387,7 +387,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         };\n \n         let overflowed = self.intrinsic_overflowing(op, left, right, dest)?;\n-        let offset = tup_layout.field_offset(1).bytes() as isize;\n+        let offset = tup_layout.offsets[1].bytes() as isize;\n         self.memory.write_bool(dest.offset(offset), overflowed)\n     }\n \n@@ -460,8 +460,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 use rustc::ty::layout::Layout::*;\n                 match *dest_layout {\n                     Univariant { ref variant, .. } => {\n-                        let offsets = iter::once(0)\n-                            .chain(variant.offset_after_field.iter().map(|s| s.bytes()));\n+                        let offsets = variant.offsets.iter().map(|s| s.bytes());\n                         self.assign_fields(dest, offsets, operands)?;\n                     }\n \n@@ -478,11 +477,14 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                         if let mir::AggregateKind::Adt(adt_def, variant, _, _) = *kind {\n                             let discr_val = adt_def.variants[variant].disr_val.to_u64_unchecked();\n                             let discr_size = discr.size().bytes() as usize;\n-                            self.memory.write_uint(dest, discr_val, discr_size)?;\n+                            let discr_offset = variants[variant].offsets[0].bytes() as isize;\n+                            let discr_dest = dest.offset(discr_offset);\n+                            self.memory.write_uint(discr_dest, discr_val, discr_size)?;\n \n-                            let offsets = variants[variant].offset_after_field.iter()\n+                            // Don't include the first offset; it's for the discriminant.\n+                            let field_offsets = variants[variant].offsets.iter().skip(1)\n                                 .map(|s| s.bytes());\n-                            self.assign_fields(dest, offsets, operands)?;\n+                            self.assign_fields(dest, field_offsets, operands)?;\n                         } else {\n                             bug!(\"tried to assign {:?} to Layout::General\", kind);\n                         }\n@@ -508,8 +510,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     StructWrappedNullablePointer { nndiscr, ref nonnull, ref discrfield } => {\n                         if let mir::AggregateKind::Adt(_, variant, _, _) = *kind {\n                             if nndiscr == variant as u64 {\n-                                let offsets = iter::once(0)\n-                                    .chain(nonnull.offset_after_field.iter().map(|s| s.bytes()));\n+                                let offsets = nonnull.offsets.iter().map(|s| s.bytes());\n                                 try!(self.assign_fields(dest, offsets, operands));\n                             } else {\n                                 for operand in operands {\n@@ -715,7 +716,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         use rustc::ty::layout::Layout::*;\n         match *layout {\n             Univariant { ref variant, .. } => {\n-                Ok(variant.field_offset(field_index))\n+                Ok(variant.offsets[field_index])\n             }\n             FatPointer { .. } => {\n                 let bytes = layout::FAT_PTR_ADDR * self.memory.pointer_size();\n@@ -801,11 +802,11 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                         use rustc::ty::layout::Layout::*;\n                         let field = field.index();\n                         let offset = match *base_layout {\n-                            Univariant { ref variant, .. } => variant.field_offset(field),\n+                            Univariant { ref variant, .. } => variant.offsets[field],\n                             General { ref variants, .. } => {\n                                 if let LvalueExtra::DowncastVariant(variant_idx) = base.extra {\n                                     // +1 for the discriminant, which is field 0\n-                                    variants[variant_idx].field_offset(field + 1)\n+                                    variants[variant_idx].offsets[field + 1]\n                                 } else {\n                                     bug!(\"field access on enum had no variant index\");\n                                 }\n@@ -814,7 +815,9 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                                 assert_eq!(field.index(), 0);\n                                 return Ok(base);\n                             }\n-                            StructWrappedNullablePointer { ref nonnull, .. } => nonnull.field_offset(field),\n+                            StructWrappedNullablePointer { ref nonnull, .. } => {\n+                                nonnull.offsets[field]\n+                            }\n                             _ => bug!(\"field access on non-product type: {:?}\", base_layout),\n                         };\n \n@@ -1289,17 +1292,3 @@ impl IntegerExt for layout::Integer {\n         }\n     }\n }\n-\n-trait StructExt {\n-    fn field_offset(&self, index: usize) -> Size;\n-}\n-\n-impl StructExt for layout::Struct {\n-    fn field_offset(&self, index: usize) -> Size {\n-        if index == 0 {\n-            Size::from_bytes(0)\n-        } else {\n-            self.offset_after_field[index - 1]\n-        }\n-    }\n-}"}, {"sha": "31e337924adaa8748da34e8d836bb1f4a3e96c09", "filename": "src/interpreter/terminator/intrinsics.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/911e46fb0efcb7bd278b6c2807c1c63cd2212466/src%2Finterpreter%2Fterminator%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/911e46fb0efcb7bd278b6c2807c1c63cd2212466/src%2Finterpreter%2Fterminator%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fterminator%2Fintrinsics.rs?ref=911e46fb0efcb7bd278b6c2807c1c63cd2212466", "patch": "@@ -246,20 +246,12 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     let layout = self.type_layout(ty);\n                     debug!(\"DST {} layout: {:?}\", ty, layout);\n \n-                    // Returns size in bytes of all fields except the last one\n-                    // (we will be recursing on the last one).\n-                    fn local_prefix_bytes(variant: &ty::layout::Struct) -> u64 {\n-                        let fields = variant.offset_after_field.len();\n-                        if fields > 1 {\n-                            variant.offset_after_field[fields - 2].bytes()\n-                        } else {\n-                            0\n-                        }\n-                    }\n-\n                     let (sized_size, sized_align) = match *layout {\n                         ty::layout::Layout::Univariant { ref variant, .. } => {\n-                            (local_prefix_bytes(variant), variant.align.abi())\n+                            // The offset of the start of the last field gives the size of the\n+                            // sized part of the type.\n+                            let size = variant.offsets.last().map_or(0, |f| f.bytes());\n+                            (size, variant.align.abi())\n                         }\n                         _ => {\n                             bug!(\"size_and_align_of_dst: expcted Univariant for `{}`, found {:#?}\","}, {"sha": "5c9123ba91e9c8a81aafb1bc33ac13b0841e6f11", "filename": "src/interpreter/terminator/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/911e46fb0efcb7bd278b6c2807c1c63cd2212466/src%2Finterpreter%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/911e46fb0efcb7bd278b6c2807c1c63cd2212466/src%2Finterpreter%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fterminator%2Fmod.rs?ref=911e46fb0efcb7bd278b6c2807c1c63cd2212466", "patch": "@@ -5,7 +5,6 @@ use rustc::ty::fold::TypeFoldable;\n use rustc::ty::layout::Layout;\n use rustc::ty::subst::Substs;\n use rustc::ty::{self, Ty, TyCtxt, BareFnTy};\n-use std::iter;\n use std::rc::Rc;\n use syntax::codemap::{DUMMY_SP, Span};\n use syntax::{ast, attr};\n@@ -343,9 +342,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             match (&last_ty.sty, last_layout) {\n                 (&ty::TyTuple(fields),\n                  &Layout::Univariant { ref variant, .. }) => {\n-                    let offsets = iter::once(0)\n-                        .chain(variant.offset_after_field.iter()\n-                            .map(|s| s.bytes()));\n+                    let offsets = variant.offsets.iter().map(|s| s.bytes());\n                     let last_ptr = match last {\n                         Value::ByRef(ptr) => ptr,\n                         _ => bug!(\"rust-call ABI tuple argument wasn't Value::ByRef\"),"}]}