{"sha": "680d579ff0e0c8e65e329d29b867600aa2aec478", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4MGQ1NzlmZjBlMGM4ZTY1ZTMyOWQyOWI4Njc2MDBhYTJhZWM0Nzg=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-10-28T11:24:25Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-11-06T03:01:29Z"}, "message": "Add blanket impls to allow the various `Fn` traits to be interconverted.\n\nFixes #18387.", "tree": {"sha": "8152b9f964f005c45fa5dbe220b4159e67824f05", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8152b9f964f005c45fa5dbe220b4159e67824f05"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/680d579ff0e0c8e65e329d29b867600aa2aec478", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/680d579ff0e0c8e65e329d29b867600aa2aec478", "html_url": "https://github.com/rust-lang/rust/commit/680d579ff0e0c8e65e329d29b867600aa2aec478", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/680d579ff0e0c8e65e329d29b867600aa2aec478/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63c4f22f2bf9f1c070311cdc08c6ceb279434733", "url": "https://api.github.com/repos/rust-lang/rust/commits/63c4f22f2bf9f1c070311cdc08c6ceb279434733", "html_url": "https://github.com/rust-lang/rust/commit/63c4f22f2bf9f1c070311cdc08c6ceb279434733"}], "stats": {"total": 247, "additions": 221, "deletions": 26}, "files": [{"sha": "ac735492be4a5408a2afdc3b79b56ca4c9737604", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 50, "deletions": 20, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/680d579ff0e0c8e65e329d29b867600aa2aec478/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/680d579ff0e0c8e65e329d29b867600aa2aec478/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=680d579ff0e0c8e65e329d29b867600aa2aec478", "patch": "@@ -866,34 +866,64 @@ pub trait FnOnce<Args,Result> {\n     extern \"rust-call\" fn call_once(self, args: Args) -> Result;\n }\n \n-macro_rules! def_fn_mut(\n+impl<F,A,R> FnMut<A,R> for F\n+    where F : Fn<A,R>\n+{\n+    extern \"rust-call\" fn call_mut(&mut self, args: A) -> R {\n+        self.call(args)\n+    }\n+}\n+\n+impl<F,A,R> FnOnce<A,R> for F\n+    where F : FnMut<A,R>\n+{\n+    extern \"rust-call\" fn call_once(mut self, args: A) -> R {\n+        self.call_mut(args)\n+    }\n+}\n+\n+\n+impl<Result> Fn<(),Result> for extern \"Rust\" fn() -> Result {\n+    #[allow(non_snake_case)]\n+    extern \"rust-call\" fn call(&self, _args: ()) -> Result {\n+        (*self)()\n+    }\n+}\n+\n+impl<Result,A0> Fn<(A0,),Result> for extern \"Rust\" fn(A0) -> Result {\n+    #[allow(non_snake_case)]\n+    extern \"rust-call\" fn call(&self, args: (A0,)) -> Result {\n+        let (a0,) = args;\n+        (*self)(a0)\n+    }\n+}\n+\n+macro_rules! def_fn(\n     ($($args:ident)*) => (\n         impl<Result$(,$args)*>\n-        FnMut<($($args,)*),Result>\n+        Fn<($($args,)*),Result>\n         for extern \"Rust\" fn($($args: $args,)*) -> Result {\n             #[allow(non_snake_case)]\n-            extern \"rust-call\" fn call_mut(&mut self, args: ($($args,)*)) -> Result {\n+            extern \"rust-call\" fn call(&self, args: ($($args,)*)) -> Result {\n                 let ($($args,)*) = args;\n                 (*self)($($args,)*)\n             }\n         }\n     )\n )\n \n-def_fn_mut!()\n-def_fn_mut!(A0)\n-def_fn_mut!(A0 A1)\n-def_fn_mut!(A0 A1 A2)\n-def_fn_mut!(A0 A1 A2 A3)\n-def_fn_mut!(A0 A1 A2 A3 A4)\n-def_fn_mut!(A0 A1 A2 A3 A4 A5)\n-def_fn_mut!(A0 A1 A2 A3 A4 A5 A6)\n-def_fn_mut!(A0 A1 A2 A3 A4 A5 A6 A7)\n-def_fn_mut!(A0 A1 A2 A3 A4 A5 A6 A7 A8)\n-def_fn_mut!(A0 A1 A2 A3 A4 A5 A6 A7 A8 A9)\n-def_fn_mut!(A0 A1 A2 A3 A4 A5 A6 A7 A8 A9 A10)\n-def_fn_mut!(A0 A1 A2 A3 A4 A5 A6 A7 A8 A9 A10 A11)\n-def_fn_mut!(A0 A1 A2 A3 A4 A5 A6 A7 A8 A9 A10 A11 A12)\n-def_fn_mut!(A0 A1 A2 A3 A4 A5 A6 A7 A8 A9 A10 A11 A12 A13)\n-def_fn_mut!(A0 A1 A2 A3 A4 A5 A6 A7 A8 A9 A10 A11 A12 A13 A14)\n-def_fn_mut!(A0 A1 A2 A3 A4 A5 A6 A7 A8 A9 A10 A11 A12 A13 A14 A15)\n+def_fn!(A0 A1)\n+def_fn!(A0 A1 A2)\n+def_fn!(A0 A1 A2 A3)\n+def_fn!(A0 A1 A2 A3 A4)\n+def_fn!(A0 A1 A2 A3 A4 A5)\n+def_fn!(A0 A1 A2 A3 A4 A5 A6)\n+def_fn!(A0 A1 A2 A3 A4 A5 A6 A7)\n+def_fn!(A0 A1 A2 A3 A4 A5 A6 A7 A8)\n+def_fn!(A0 A1 A2 A3 A4 A5 A6 A7 A8 A9)\n+def_fn!(A0 A1 A2 A3 A4 A5 A6 A7 A8 A9 A10)\n+def_fn!(A0 A1 A2 A3 A4 A5 A6 A7 A8 A9 A10 A11)\n+def_fn!(A0 A1 A2 A3 A4 A5 A6 A7 A8 A9 A10 A11 A12)\n+def_fn!(A0 A1 A2 A3 A4 A5 A6 A7 A8 A9 A10 A11 A12 A13)\n+def_fn!(A0 A1 A2 A3 A4 A5 A6 A7 A8 A9 A10 A11 A12 A13 A14)\n+def_fn!(A0 A1 A2 A3 A4 A5 A6 A7 A8 A9 A10 A11 A12 A13 A14 A15)"}, {"sha": "01e0ec78df75621703cc926df22699d4d15ad2c0", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/680d579ff0e0c8e65e329d29b867600aa2aec478/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/680d579ff0e0c8e65e329d29b867600aa2aec478/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=680d579ff0e0c8e65e329d29b867600aa2aec478", "patch": "@@ -804,12 +804,12 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                                                                           &candidates[i],\n                                                                           &candidates[j]));\n                 if is_dup {\n-                    debug!(\"Dropping candidate #{}/#{}: {}\",\n+                    debug!(\"Dropping candidate #{}/{}: {}\",\n                            i, candidates.len(), candidates[i].repr(self.tcx()));\n                     candidates.swap_remove(i);\n                 } else {\n-                    debug!(\"Retaining candidate #{}/#{}\",\n-                           i, candidates.len());\n+                    debug!(\"Retaining candidate #{}/{}: {}\",\n+                           i, candidates.len(), candidates[i].repr(self.tcx()));\n                     i += 1;\n                 }\n             }"}, {"sha": "88b191b9a823b320ccae0d130ed1d0a9506968d1", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/680d579ff0e0c8e65e329d29b867600aa2aec478/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/680d579ff0e0c8e65e329d29b867600aa2aec478/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=680d579ff0e0c8e65e329d29b867600aa2aec478", "patch": "@@ -3493,6 +3493,11 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n             ast::FnOnceUnboxedClosureKind => ty::FnOnceUnboxedClosureKind,\n         };\n \n+        debug!(\"unboxed_closure for {} --> sig={} kind={}\",\n+               local_def(expr.id).repr(fcx.tcx()),\n+               fn_ty.sig.repr(fcx.tcx()),\n+               kind);\n+\n         let unboxed_closure = ty::UnboxedClosure {\n             closure_type: fn_ty,\n             kind: kind,"}, {"sha": "20d7262432f0c82de9c1d7e811a8fe03e1bf12d0", "filename": "src/test/compile-fail/unboxed-closures-fnmut-as-fn.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/680d579ff0e0c8e65e329d29b867600aa2aec478/src%2Ftest%2Fcompile-fail%2Funboxed-closures-fnmut-as-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/680d579ff0e0c8e65e329d29b867600aa2aec478/src%2Ftest%2Fcompile-fail%2Funboxed-closures-fnmut-as-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-fnmut-as-fn.rs?ref=680d579ff0e0c8e65e329d29b867600aa2aec478", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Checks that the Fn trait hierarchy rules do not permit\n+// Fn to be used where FnMut is implemented.\n+\n+#![feature(unboxed_closure_sugar)]\n+#![feature(overloaded_calls)]\n+\n+use std::ops::{Fn,FnMut,FnOnce};\n+\n+struct S;\n+\n+impl FnMut<(int,),int> for S {\n+    extern \"rust-call\" fn call_mut(&mut self, (x,): (int,)) -> int {\n+        x * x\n+    }\n+}\n+\n+fn call_it<F:Fn(int)->int>(f: &F, x: int) -> int {\n+    f.call((x,))\n+}\n+\n+fn main() {\n+    let x = call_it(&S, 22); //~ ERROR not implemented\n+}\n+"}, {"sha": "f36594cb401450b683707ae717c752eafefe1499", "filename": "src/test/run-pass/issue-16668.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/680d579ff0e0c8e65e329d29b867600aa2aec478/src%2Ftest%2Frun-pass%2Fissue-16668.rs", "raw_url": "https://github.com/rust-lang/rust/raw/680d579ff0e0c8e65e329d29b867600aa2aec478/src%2Ftest%2Frun-pass%2Fissue-16668.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16668.rs?ref=680d579ff0e0c8e65e329d29b867600aa2aec478", "patch": "@@ -20,8 +20,8 @@ impl<'a, I, O: 'a> Parser<'a, I, O> {\n     fn compose<K: 'a>(mut self, mut rhs: Parser<'a, O, K>) -> Parser<'a, I, K> {\n         Parser {\n             parse: box move |&mut: x: I| {\n-                match self.parse.call_mut((x,)) {\n-                    Ok(r) => rhs.parse.call_mut((r,)),\n+                match (*self.parse).call_mut((x,)) {\n+                    Ok(r) => (*rhs.parse).call_mut((r,)),\n                     Err(e) => Err(e)\n                 }\n             }"}, {"sha": "82d51ba1f16456e5c120ea9efbba223e1220cd8a", "filename": "src/test/run-pass/unboxed-closures-extern-fn.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/680d579ff0e0c8e65e329d29b867600aa2aec478/src%2Ftest%2Frun-pass%2Funboxed-closures-extern-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/680d579ff0e0c8e65e329d29b867600aa2aec478/src%2Ftest%2Frun-pass%2Funboxed-closures-extern-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-extern-fn.rs?ref=680d579ff0e0c8e65e329d29b867600aa2aec478", "patch": "@@ -0,0 +1,40 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Checks that extern fn points implement the full range of Fn traits.\n+\n+#![feature(unboxed_closure_sugar)]\n+#![feature(overloaded_calls)]\n+\n+use std::ops::{Fn,FnMut,FnOnce};\n+\n+fn square(x: int) -> int { x * x }\n+\n+fn call_it<F:Fn(int)->int>(f: &F, x: int) -> int {\n+    f.call((x,))\n+}\n+\n+fn call_it_mut<F:FnMut(int)->int>(f: &mut F, x: int) -> int {\n+    f.call_mut((x,))\n+}\n+\n+fn call_it_once<F:FnOnce(int)->int>(f: F, x: int) -> int {\n+    f.call_once((x,))\n+}\n+\n+fn main() {\n+    let x = call_it(&square, 22);\n+    let y = call_it_mut(&mut square, 22);\n+    let z = call_it_once(square, 22);\n+    assert_eq!(x, square(22));\n+    assert_eq!(y, square(22));\n+    assert_eq!(z, square(22));\n+}\n+"}, {"sha": "90272636bc59db86ba0e96517980a8c8a481dc8e", "filename": "src/test/run-pass/unboxed-closures-fn-as-fnmut-and-fnonce.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/680d579ff0e0c8e65e329d29b867600aa2aec478/src%2Ftest%2Frun-pass%2Funboxed-closures-fn-as-fnmut-and-fnonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/680d579ff0e0c8e65e329d29b867600aa2aec478/src%2Ftest%2Frun-pass%2Funboxed-closures-fn-as-fnmut-and-fnonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-fn-as-fnmut-and-fnonce.rs?ref=680d579ff0e0c8e65e329d29b867600aa2aec478", "patch": "@@ -0,0 +1,46 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Checks that the Fn trait hierarchy rules permit\n+// any Fn trait to be used where Fn is implemented.\n+\n+#![feature(unboxed_closure_sugar)]\n+#![feature(overloaded_calls)]\n+\n+use std::ops::{Fn,FnMut,FnOnce};\n+\n+struct S;\n+\n+impl Fn<(int,),int> for S {\n+    extern \"rust-call\" fn call(&self, (x,): (int,)) -> int {\n+        x * x\n+    }\n+}\n+\n+fn call_it<F:Fn(int)->int>(f: &F, x: int) -> int {\n+    f.call((x,))\n+}\n+\n+fn call_it_mut<F:FnMut(int)->int>(f: &mut F, x: int) -> int {\n+    f.call_mut((x,))\n+}\n+\n+fn call_it_once<F:FnOnce(int)->int>(f: F, x: int) -> int {\n+    f.call_once((x,))\n+}\n+\n+fn main() {\n+    let x = call_it(&S, 22);\n+    let y = call_it_mut(&mut S, 22);\n+    let z = call_it_once(S, 22);\n+    assert_eq!(x, y);\n+    assert_eq!(y, z);\n+}\n+"}, {"sha": "bd01910a210ab5f3b123eaf3ba6171d1453a9cdd", "filename": "src/test/run-pass/unboxed-closures-fnmut-as-fnonce.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/680d579ff0e0c8e65e329d29b867600aa2aec478/src%2Ftest%2Frun-pass%2Funboxed-closures-fnmut-as-fnonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/680d579ff0e0c8e65e329d29b867600aa2aec478/src%2Ftest%2Frun-pass%2Funboxed-closures-fnmut-as-fnonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-fnmut-as-fnonce.rs?ref=680d579ff0e0c8e65e329d29b867600aa2aec478", "patch": "@@ -0,0 +1,40 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Checks that the Fn trait hierarchy rules permit\n+// FnMut or FnOnce to be used where FnMut is implemented.\n+\n+#![feature(unboxed_closure_sugar)]\n+#![feature(overloaded_calls)]\n+\n+use std::ops::{FnMut,FnOnce};\n+\n+struct S;\n+\n+impl FnMut<(int,),int> for S {\n+    extern \"rust-call\" fn call_mut(&mut self, (x,): (int,)) -> int {\n+        x * x\n+    }\n+}\n+\n+fn call_it_mut<F:FnMut(int)->int>(f: &mut F, x: int) -> int {\n+    f.call_mut((x,))\n+}\n+\n+fn call_it_once<F:FnOnce(int)->int>(f: F, x: int) -> int {\n+    f.call_once((x,))\n+}\n+\n+fn main() {\n+    let y = call_it_mut(&mut S, 22);\n+    let z = call_it_once(S, 22);\n+    assert_eq!(y, z);\n+}\n+"}, {"sha": "b0947f46a86ae9b6ef6842b0c03792aa352b0a3f", "filename": "src/test/run-pass/unboxed-closures-manual-impl.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/680d579ff0e0c8e65e329d29b867600aa2aec478/src%2Ftest%2Frun-pass%2Funboxed-closures-manual-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/680d579ff0e0c8e65e329d29b867600aa2aec478/src%2Ftest%2Frun-pass%2Funboxed-closures-manual-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-manual-impl.rs?ref=680d579ff0e0c8e65e329d29b867600aa2aec478", "previous_filename": "src/test/run-pass/fn-trait-sugar.rs"}, {"sha": "f2eddd84af83252009bc8e96f81fcaa1329e8f6a", "filename": "src/test/run-pass/unboxed-closures-zero-args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/680d579ff0e0c8e65e329d29b867600aa2aec478/src%2Ftest%2Frun-pass%2Funboxed-closures-zero-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/680d579ff0e0c8e65e329d29b867600aa2aec478/src%2Ftest%2Frun-pass%2Funboxed-closures-zero-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-zero-args.rs?ref=680d579ff0e0c8e65e329d29b867600aa2aec478", "patch": "@@ -12,6 +12,6 @@\n \n fn main() {\n     let mut zero = |&mut:| {};\n-    zero.call_mut(());\n+    let () = zero.call_mut(());\n }\n "}]}