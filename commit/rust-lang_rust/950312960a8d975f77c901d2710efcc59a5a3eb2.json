{"sha": "950312960a8d975f77c901d2710efcc59a5a3eb2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1MDMxMjk2MGE4ZDk3NWY3N2M5MDFkMjcxMGVmY2M1OWE1YTNlYjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-18T00:21:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-18T00:21:26Z"}, "message": "auto merge of #13572 : yuriks/rust/bitv-renames, r=alexcrichton\n\nRenamed the methods in Bitv that test all bits to have names that, ehm, \"roll off the tongue\" a bit more easily. :)\r\n\r\nAlso added tests for them while at it, since they seemed to be missing.", "tree": {"sha": "c1eef45b2a0f8cdcc7a8443b1446126ca2625186", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1eef45b2a0f8cdcc7a8443b1446126ca2625186"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/950312960a8d975f77c901d2710efcc59a5a3eb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/950312960a8d975f77c901d2710efcc59a5a3eb2", "html_url": "https://github.com/rust-lang/rust/commit/950312960a8d975f77c901d2710efcc59a5a3eb2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/950312960a8d975f77c901d2710efcc59a5a3eb2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c50cf38a079ec6ad26a931f30e86b38ee2ccafe", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c50cf38a079ec6ad26a931f30e86b38ee2ccafe", "html_url": "https://github.com/rust-lang/rust/commit/4c50cf38a079ec6ad26a931f30e86b38ee2ccafe"}, {"sha": "03c595585b8a2a1f3478450c55f2217a3434213c", "url": "https://api.github.com/repos/rust-lang/rust/commits/03c595585b8a2a1f3478450c55f2217a3434213c", "html_url": "https://github.com/rust-lang/rust/commit/03c595585b8a2a1f3478450c55f2217a3434213c"}], "stats": {"total": 73, "additions": 59, "deletions": 14}, "files": [{"sha": "1f53f5c33ff2b6aef453b330117874e52cad4af1", "filename": "src/libcollections/bitv.rs", "status": "modified", "additions": 59, "deletions": 14, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/950312960a8d975f77c901d2710efcc59a5a3eb2/src%2Flibcollections%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/950312960a8d975f77c901d2710efcc59a5a3eb2/src%2Flibcollections%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbitv.rs?ref=950312960a8d975f77c901d2710efcc59a5a3eb2", "patch": "@@ -97,12 +97,12 @@ impl SmallBitv {\n     pub fn set_all(&mut self) { self.bits = !0; }\n \n     #[inline]\n-    pub fn is_true(&self, nbits: uint) -> bool {\n+    pub fn all(&self, nbits: uint) -> bool {\n         small_mask(nbits) & !self.bits == 0\n     }\n \n     #[inline]\n-    pub fn is_false(&self, nbits: uint) -> bool {\n+    pub fn none(&self, nbits: uint) -> bool {\n         small_mask(nbits) & self.bits == 0\n     }\n \n@@ -412,13 +412,10 @@ impl Bitv {\n \n     /// Returns `true` if all bits are 1\n     #[inline]\n-    pub fn is_true(&self) -> bool {\n+    pub fn all(&self) -> bool {\n       match self.rep {\n-        Small(ref b) => b.is_true(self.nbits),\n-        _ => {\n-          for i in self.iter() { if !i { return false; } }\n-          true\n-        }\n+        Small(ref b) => b.all(self.nbits),\n+        _ => self.iter().all(|x| x)\n       }\n     }\n \n@@ -433,16 +430,19 @@ impl Bitv {\n     }\n \n     /// Returns `true` if all bits are 0\n-    pub fn is_false(&self) -> bool {\n+    pub fn none(&self) -> bool {\n       match self.rep {\n-        Small(ref b) => b.is_false(self.nbits),\n-        Big(_) => {\n-          for i in self.iter() { if i { return false; } }\n-          true\n-        }\n+        Small(ref b) => b.none(self.nbits),\n+        _ => self.iter().all(|x| !x)\n       }\n     }\n \n+    #[inline]\n+    /// Returns `true` if any bit is 1\n+    pub fn any(&self) -> bool {\n+        !self.none()\n+    }\n+\n     pub fn init_to_vec(&self, i: uint) -> uint {\n       return if self.get(i) { 1 } else { 0 };\n     }\n@@ -1551,6 +1551,51 @@ mod tests {\n         assert!(b.contains(&1000));\n     }\n \n+    #[test]\n+    fn test_small_bitv_tests() {\n+        let v = from_bytes([0]);\n+        assert!(!v.all());\n+        assert!(!v.any());\n+        assert!(v.none());\n+\n+        let v = from_bytes([0b00010100]);\n+        assert!(!v.all());\n+        assert!(v.any());\n+        assert!(!v.none());\n+\n+        let v = from_bytes([0xFF]);\n+        assert!(v.all());\n+        assert!(v.any());\n+        assert!(!v.none());\n+    }\n+\n+    #[test]\n+    fn test_big_bitv_tests() {\n+        let v = from_bytes([ // 88 bits\n+            0, 0, 0, 0,\n+            0, 0, 0, 0,\n+            0, 0, 0]);\n+        assert!(!v.all());\n+        assert!(!v.any());\n+        assert!(v.none());\n+\n+        let v = from_bytes([ // 88 bits\n+            0, 0, 0b00010100, 0,\n+            0, 0, 0, 0b00110100,\n+            0, 0, 0]);\n+        assert!(!v.all());\n+        assert!(v.any());\n+        assert!(!v.none());\n+\n+        let v = from_bytes([ // 88 bits\n+            0xFF, 0xFF, 0xFF, 0xFF,\n+            0xFF, 0xFF, 0xFF, 0xFF,\n+            0xFF, 0xFF, 0xFF]);\n+        assert!(v.all());\n+        assert!(v.any());\n+        assert!(!v.none());\n+    }\n+\n     fn rng() -> rand::IsaacRng {\n         let seed = &[1, 2, 3, 4, 5, 6, 7, 8, 9, 0];\n         rand::SeedableRng::from_seed(seed)"}]}