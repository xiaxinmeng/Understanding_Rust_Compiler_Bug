{"sha": "4a37b9cbffdc9ba66e9e4b7a17cb0de157a647f8", "node_id": "C_kwDOAAsO6NoAKDRhMzdiOWNiZmZkYzliYTY2ZTllNGI3YTE3Y2IwZGUxNTdhNjQ3Zjg", "commit": {"author": {"name": "Hans Kratz", "email": "hans@appfour.com", "date": "2021-10-18T11:15:45Z"}, "committer": {"name": "Hans Kratz", "email": "hans@appfour.com", "date": "2021-10-18T11:18:12Z"}, "message": "Avoid overflow in `VecDeque::with_capacity_in()`.", "tree": {"sha": "854546843a4f523229366baadd53a2aed0f111c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/854546843a4f523229366baadd53a2aed0f111c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a37b9cbffdc9ba66e9e4b7a17cb0de157a647f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a37b9cbffdc9ba66e9e4b7a17cb0de157a647f8", "html_url": "https://github.com/rust-lang/rust/commit/4a37b9cbffdc9ba66e9e4b7a17cb0de157a647f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a37b9cbffdc9ba66e9e4b7a17cb0de157a647f8/comments", "author": {"login": "hkratz", "id": 3736990, "node_id": "MDQ6VXNlcjM3MzY5OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/3736990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hkratz", "html_url": "https://github.com/hkratz", "followers_url": "https://api.github.com/users/hkratz/followers", "following_url": "https://api.github.com/users/hkratz/following{/other_user}", "gists_url": "https://api.github.com/users/hkratz/gists{/gist_id}", "starred_url": "https://api.github.com/users/hkratz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hkratz/subscriptions", "organizations_url": "https://api.github.com/users/hkratz/orgs", "repos_url": "https://api.github.com/users/hkratz/repos", "events_url": "https://api.github.com/users/hkratz/events{/privacy}", "received_events_url": "https://api.github.com/users/hkratz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hkratz", "id": 3736990, "node_id": "MDQ6VXNlcjM3MzY5OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/3736990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hkratz", "html_url": "https://github.com/hkratz", "followers_url": "https://api.github.com/users/hkratz/followers", "following_url": "https://api.github.com/users/hkratz/following{/other_user}", "gists_url": "https://api.github.com/users/hkratz/gists{/gist_id}", "starred_url": "https://api.github.com/users/hkratz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hkratz/subscriptions", "organizations_url": "https://api.github.com/users/hkratz/orgs", "repos_url": "https://api.github.com/users/hkratz/repos", "events_url": "https://api.github.com/users/hkratz/events{/privacy}", "received_events_url": "https://api.github.com/users/hkratz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e02151318ddd431aea6d58e23948246c1446044", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e02151318ddd431aea6d58e23948246c1446044", "html_url": "https://github.com/rust-lang/rust/commit/5e02151318ddd431aea6d58e23948246c1446044"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "de607c8fdab31dd098a5ee88c1f76dd81f41ac85", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a37b9cbffdc9ba66e9e4b7a17cb0de157a647f8/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a37b9cbffdc9ba66e9e4b7a17cb0de157a647f8/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=4a37b9cbffdc9ba66e9e4b7a17cb0de157a647f8", "patch": "@@ -543,9 +543,9 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     /// ```\n     #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n     pub fn with_capacity_in(capacity: usize, alloc: A) -> VecDeque<T, A> {\n+        assert!(capacity < 1_usize << usize::BITS - 1, \"capacity overflow\");\n         // +1 since the ringbuffer always leaves one space empty\n         let cap = cmp::max(capacity + 1, MINIMUM_CAPACITY + 1).next_power_of_two();\n-        assert!(cap > capacity, \"capacity overflow\");\n \n         VecDeque { tail: 0, head: 0, buf: RawVec::with_capacity_in(cap, alloc) }\n     }"}]}