{"sha": "832c7f5061b21657db38aa4537fb1864df2cd421", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzMmM3ZjUwNjFiMjE2NTdkYjM4YWE0NTM3ZmIxODY0ZGYyY2Q0MjE=", "commit": {"author": {"name": "Iago-lito", "email": "iago-lito@etak", "date": "2021-04-15T10:10:05Z"}, "committer": {"name": "Iago-lito", "email": "iago-lito@etak", "date": "2021-06-09T15:28:30Z"}, "message": "NonZero checked_add.", "tree": {"sha": "1a3e44eba8c6192d6edbaea73c16cdc013bb494e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a3e44eba8c6192d6edbaea73c16cdc013bb494e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/832c7f5061b21657db38aa4537fb1864df2cd421", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/832c7f5061b21657db38aa4537fb1864df2cd421", "html_url": "https://github.com/rust-lang/rust/commit/832c7f5061b21657db38aa4537fb1864df2cd421", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/832c7f5061b21657db38aa4537fb1864df2cd421/comments", "author": {"login": "iago-lito", "id": 10091387, "node_id": "MDQ6VXNlcjEwMDkxMzg3", "avatar_url": "https://avatars.githubusercontent.com/u/10091387?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iago-lito", "html_url": "https://github.com/iago-lito", "followers_url": "https://api.github.com/users/iago-lito/followers", "following_url": "https://api.github.com/users/iago-lito/following{/other_user}", "gists_url": "https://api.github.com/users/iago-lito/gists{/gist_id}", "starred_url": "https://api.github.com/users/iago-lito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iago-lito/subscriptions", "organizations_url": "https://api.github.com/users/iago-lito/orgs", "repos_url": "https://api.github.com/users/iago-lito/repos", "events_url": "https://api.github.com/users/iago-lito/events{/privacy}", "received_events_url": "https://api.github.com/users/iago-lito/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iago-lito", "id": 10091387, "node_id": "MDQ6VXNlcjEwMDkxMzg3", "avatar_url": "https://avatars.githubusercontent.com/u/10091387?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iago-lito", "html_url": "https://github.com/iago-lito", "followers_url": "https://api.github.com/users/iago-lito/followers", "following_url": "https://api.github.com/users/iago-lito/following{/other_user}", "gists_url": "https://api.github.com/users/iago-lito/gists{/gist_id}", "starred_url": "https://api.github.com/users/iago-lito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iago-lito/subscriptions", "organizations_url": "https://api.github.com/users/iago-lito/orgs", "repos_url": "https://api.github.com/users/iago-lito/repos", "events_url": "https://api.github.com/users/iago-lito/events{/privacy}", "received_events_url": "https://api.github.com/users/iago-lito/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38bc9b9933abee088d2416e28f0c2ef9a039e1b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/38bc9b9933abee088d2416e28f0c2ef9a039e1b9", "html_url": "https://github.com/rust-lang/rust/commit/38bc9b9933abee088d2416e28f0c2ef9a039e1b9"}], "stats": {"total": 51, "additions": 51, "deletions": 0}, "files": [{"sha": "e87049450e31c567dcab6a719afd9e2a7955b661", "filename": "library/core/src/num/nonzero.rs", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/832c7f5061b21657db38aa4537fb1864df2cd421/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/832c7f5061b21657db38aa4537fb1864df2cd421/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs?ref=832c7f5061b21657db38aa4537fb1864df2cd421", "patch": "@@ -285,6 +285,57 @@ nonzero_integers_div! {\n     NonZeroUsize(usize);\n }\n \n+// A bunch of methods for unsigned nonzero types only.\n+macro_rules! nonzero_unsigned_operations {\n+    ( $( $Ty: ident($Int: ty); )+ ) => {\n+        $(\n+            impl $Ty {\n+                /// Add an unsigned integer to a non-zero value.\n+                /// Return [`None`] on overflow.\n+                ///\n+                /// # Examples\n+                ///\n+                /// ```\n+                /// #![feature(nonzero_ops)]\n+                /// # #![feature(try_trait)]\n+                #[doc = concat!(\"# use std::num::\", stringify!($Ty), \";\")]\n+                ///\n+                /// # fn main() -> Result<(), std::option::NoneError> {\n+                #[doc = concat!(\"let one = \", stringify!($Ty), \"::new(1)?;\")]\n+                #[doc = concat!(\"let two = \", stringify!($Ty), \"::new(2)?;\")]\n+                #[doc = concat!(\"let max = \", stringify!($Ty), \"::new(\",\n+                                stringify!($Int), \"::MAX)?;\")]\n+                ///\n+                /// assert_eq!(Some(two), one.checked_add(1));\n+                /// assert_eq!(None, max.checked_add(1));\n+                /// # Ok(())\n+                /// # }\n+                /// ```\n+                #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n+                #[inline]\n+                pub const fn checked_add(self, other: $Int) -> Option<$Ty> {\n+                    if let Some(result) = self.get().checked_add(other) {\n+                        // SAFETY: $Int::checked_add returns None on overflow\n+                        // so the result cannot be zero.\n+                        Some(unsafe { $Ty::new_unchecked(result) })\n+                    } else {\n+                        None\n+                    }\n+                }\n+            }\n+        )+\n+    }\n+}\n+\n+nonzero_unsigned_operations! {\n+    NonZeroU8(u8);\n+    NonZeroU16(u16);\n+    NonZeroU32(u32);\n+    NonZeroU64(u64);\n+    NonZeroU128(u128);\n+    NonZeroUsize(usize);\n+}\n+\n macro_rules! nonzero_unsigned_is_power_of_two {\n     ( $( $Ty: ident )+ ) => {\n         $("}]}