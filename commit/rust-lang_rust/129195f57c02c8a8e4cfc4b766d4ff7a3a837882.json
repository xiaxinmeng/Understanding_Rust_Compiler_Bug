{"sha": "129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "node_id": "C_kwDOAAsO6NoAKDEyOTE5NWY1N2MwMmM4YThlNGNmYzRiNzY2ZDRmZjdhM2E4Mzc4ODI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-04T02:20:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-04T02:20:26Z"}, "message": "Auto merge of #111169 - Manishearth:rollup-55sfaad, r=Manishearth\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #97594 (Implement tuple<->array convertions via `From`)\n - #105452 (Add cross-language LLVM CFI support to the Rust compiler)\n - #105695 (Replace generic thread parker with explicit no-op parker)\n - #110371 (rustdoc: restructure type search engine to pick-and-use IDs)\n - #110928 (tests: Add tests for LoongArch64)\n - #110970 (tidy: remove ENTRY_LIMIT maximum checking and set it to 900)\n - #111104 (Update ICU4X to 1.2)\n - #111127 (Constify slice flatten method)\n - #111146 (rustc_middle: Fix `opt_item_ident` for non-local def ids)\n - #111154 (Use builtin FFX isolation for Fuchsia test runner)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "10c48209a95eaf3a2d6893898017b110108c26e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10c48209a95eaf3a2d6893898017b110108c26e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "html_url": "https://github.com/rust-lang/rust/commit/129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f557a4fd462a779c92e4e8bd004426cf329efb30", "url": "https://api.github.com/repos/rust-lang/rust/commits/f557a4fd462a779c92e4e8bd004426cf329efb30", "html_url": "https://github.com/rust-lang/rust/commit/f557a4fd462a779c92e4e8bd004426cf329efb30"}, {"sha": "31aeef28f8d858c8c7201fbdb2db1877cfb575e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/31aeef28f8d858c8c7201fbdb2db1877cfb575e7", "html_url": "https://github.com/rust-lang/rust/commit/31aeef28f8d858c8c7201fbdb2db1877cfb575e7"}], "stats": {"total": 5626, "additions": 2678, "deletions": 2948}, "files": [{"sha": "6519ffa7169edb65ff9c29d731d32f670695ae96", "filename": "Cargo.lock", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -1655,9 +1655,9 @@ dependencies = [\n \n [[package]]\n name = \"icu_list\"\n-version = \"1.1.0\"\n+version = \"1.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"01a65ff0cab77c33c7e165c858eaa6e84a09f1e485dd495d9d0ae61083c6f786\"\n+checksum = \"fd7ba7442d9235b689d4fdce17c452ea229934980fd81ba50cc28275752c9f90\"\n dependencies = [\n  \"displaydoc\",\n  \"icu_provider\",\n@@ -1667,9 +1667,9 @@ dependencies = [\n \n [[package]]\n name = \"icu_locid\"\n-version = \"1.1.0\"\n+version = \"1.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"71d7a98ecb812760b5f077e55a4763edeefa7ccc30d6eb5680a70841ede81928\"\n+checksum = \"3003f85dccfc0e238ff567693248c59153a46f4e6125ba4020b973cef4d1d335\"\n dependencies = [\n  \"displaydoc\",\n  \"litemap\",\n@@ -1680,9 +1680,9 @@ dependencies = [\n \n [[package]]\n name = \"icu_provider\"\n-version = \"1.1.0\"\n+version = \"1.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a86816c97bc4e613086497f9479f63e120315e056763e8c4435604f98d21d82d\"\n+checksum = \"8dc312a7b6148f7dfe098047ae2494d12d4034f48ade58d4f353000db376e305\"\n dependencies = [\n  \"displaydoc\",\n  \"icu_locid\",\n@@ -1696,9 +1696,9 @@ dependencies = [\n \n [[package]]\n name = \"icu_provider_adapters\"\n-version = \"1.1.0\"\n+version = \"1.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"8e89bf33962b24bb48a4a21330c20c9ff17949338ea376360dd9eda2c209dca1\"\n+checksum = \"f4ae1e2bd0c41728b77e7c46e9afdec5e2127d1eedacc684724667d50c126bd3\"\n dependencies = [\n  \"icu_locid\",\n  \"icu_provider\",\n@@ -1709,9 +1709,9 @@ dependencies = [\n \n [[package]]\n name = \"icu_provider_macros\"\n-version = \"1.1.0\"\n+version = \"1.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"9ddb07844c2ffc4c28840e799e9e54ff054393cf090740decf25624e9d94b93a\"\n+checksum = \"dd8b728b9421e93eff1d9f8681101b78fa745e0748c95c655c83f337044a7e10\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n@@ -2032,9 +2032,9 @@ checksum = \"36eb31c1778188ae1e64398743890d0877fef36d11521ac60406b42016e8c2cf\"\n \n [[package]]\n name = \"litemap\"\n-version = \"0.6.1\"\n+version = \"0.7.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"575d8a551c59104b4df91269921e5eab561aa1b77c618dac0414b5d44a4617de\"\n+checksum = \"3a04a5b2b6f54acba899926491d0a6c59d98012938ca2ab5befb281c034e8f94\"\n \n [[package]]\n name = \"lld-wrapper\"\n@@ -5698,9 +5698,9 @@ dependencies = [\n \n [[package]]\n name = \"yoke\"\n-version = \"0.7.0\"\n+version = \"0.7.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"222180af14a6b54ef2c33493c1eff77ae95a3687a21b243e752624006fb8f26e\"\n+checksum = \"1848075a23a28f9773498ee9a0f2cf58fcbad4f8c0ccf84a210ab33c6ae495de\"\n dependencies = [\n  \"serde\",\n  \"stable_deref_trait\",\n@@ -5743,9 +5743,9 @@ dependencies = [\n \n [[package]]\n name = \"zerovec\"\n-version = \"0.9.2\"\n+version = \"0.9.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"154df60c74c4a844bc04a53cef4fc18a909d3ea07e19f5225eaba86209da3aa6\"\n+checksum = \"198f54134cd865f437820aa3b43d0ad518af4e68ee161b444cdd15d8e567c8ea\"\n dependencies = [\n  \"yoke\",\n  \"zerofrom\","}, {"sha": "d3a307675ac4bcd1286d039da3be52de84ccf7c6", "filename": "compiler/rustc_baked_icu_data/Cargo.toml", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_baked_icu_data%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_baked_icu_data%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_baked_icu_data%2FCargo.toml?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -4,11 +4,11 @@ version = \"0.0.0\"\n edition = \"2021\"\n \n [dependencies]\n-icu_list = \"1.1.0\"\n-icu_locid = \"1.1.0\"\n-icu_provider = \"1.1.0\"\n-icu_provider_adapters = \"1.1.0\"\n-zerovec = \"0.9.2\"\n+icu_list = \"1.2\"\n+icu_locid = \"1.2\"\n+icu_provider = \"1.2\"\n+icu_provider_adapters = \"1.2\"\n+zerovec = \"0.9.4\"\n \n [features]\n rustc_use_parallel_compiler = ['icu_provider/sync']"}, {"sha": "e4aaf50f5d674f53f1bdd67b8f21708ffbd424aa", "filename": "compiler/rustc_baked_icu_data/src/data/fallback/likelysubtags_v1/und.rs.data", "status": "modified", "additions": 20, "deletions": 682, "changes": 702, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Ffallback%2Flikelysubtags_v1%2Fund.rs.data", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Ffallback%2Flikelysubtags_v1%2Fund.rs.data", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Ffallback%2Flikelysubtags_v1%2Fund.rs.data?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -3,725 +3,63 @@\n         #[allow(unused_unsafe)]\n         ::zerovec::ZeroMap::from_parts_unchecked(\n             unsafe {\n-                ::zerovec::ZeroVec::from_bytes_unchecked(&[\n-                    97u8, 98u8, 0u8, 97u8, 98u8, 113u8, 97u8, 100u8, 112u8, 97u8, 100u8, 121u8,\n-                    97u8, 101u8, 0u8, 97u8, 101u8, 98u8, 97u8, 104u8, 111u8, 97u8, 106u8,\n-                    116u8, 97u8, 107u8, 107u8, 97u8, 108u8, 116u8, 97u8, 109u8, 0u8, 97u8,\n-                    112u8, 99u8, 97u8, 112u8, 100u8, 97u8, 114u8, 0u8, 97u8, 114u8, 99u8, 97u8,\n-                    114u8, 113u8, 97u8, 114u8, 115u8, 97u8, 114u8, 121u8, 97u8, 114u8, 122u8,\n-                    97u8, 115u8, 0u8, 97u8, 115u8, 101u8, 97u8, 118u8, 0u8, 97u8, 118u8, 108u8,\n-                    97u8, 119u8, 97u8, 98u8, 97u8, 0u8, 98u8, 97u8, 108u8, 98u8, 97u8, 112u8,\n-                    98u8, 97u8, 120u8, 98u8, 99u8, 113u8, 98u8, 101u8, 0u8, 98u8, 101u8, 106u8,\n-                    98u8, 102u8, 113u8, 98u8, 102u8, 116u8, 98u8, 102u8, 121u8, 98u8, 103u8,\n-                    0u8, 98u8, 103u8, 99u8, 98u8, 103u8, 110u8, 98u8, 103u8, 120u8, 98u8,\n-                    104u8, 98u8, 98u8, 104u8, 105u8, 98u8, 104u8, 111u8, 98u8, 106u8, 105u8,\n-                    98u8, 106u8, 106u8, 98u8, 108u8, 116u8, 98u8, 110u8, 0u8, 98u8, 111u8, 0u8,\n-                    98u8, 112u8, 121u8, 98u8, 113u8, 105u8, 98u8, 114u8, 97u8, 98u8, 114u8,\n-                    104u8, 98u8, 114u8, 120u8, 98u8, 115u8, 113u8, 98u8, 115u8, 116u8, 98u8,\n-                    116u8, 118u8, 98u8, 117u8, 97u8, 98u8, 121u8, 110u8, 99u8, 99u8, 112u8,\n-                    99u8, 101u8, 0u8, 99u8, 104u8, 109u8, 99u8, 104u8, 114u8, 99u8, 106u8,\n-                    97u8, 99u8, 106u8, 109u8, 99u8, 107u8, 98u8, 99u8, 109u8, 103u8, 99u8,\n-                    111u8, 112u8, 99u8, 114u8, 0u8, 99u8, 114u8, 104u8, 99u8, 114u8, 107u8,\n-                    99u8, 114u8, 108u8, 99u8, 115u8, 119u8, 99u8, 116u8, 100u8, 99u8, 117u8,\n-                    0u8, 99u8, 118u8, 0u8, 100u8, 97u8, 114u8, 100u8, 99u8, 99u8, 100u8, 103u8,\n-                    108u8, 100u8, 109u8, 102u8, 100u8, 111u8, 105u8, 100u8, 114u8, 104u8,\n-                    100u8, 114u8, 115u8, 100u8, 116u8, 121u8, 100u8, 118u8, 0u8, 100u8, 122u8,\n-                    0u8, 101u8, 103u8, 121u8, 101u8, 107u8, 121u8, 101u8, 108u8, 0u8, 101u8,\n-                    115u8, 103u8, 101u8, 116u8, 116u8, 102u8, 97u8, 0u8, 102u8, 105u8, 97u8,\n-                    102u8, 117u8, 98u8, 103u8, 97u8, 110u8, 103u8, 98u8, 109u8, 103u8, 98u8,\n-                    122u8, 103u8, 101u8, 122u8, 103u8, 103u8, 110u8, 103u8, 106u8, 107u8,\n-                    103u8, 106u8, 117u8, 103u8, 108u8, 107u8, 103u8, 109u8, 118u8, 103u8,\n-                    111u8, 102u8, 103u8, 111u8, 109u8, 103u8, 111u8, 110u8, 103u8, 111u8,\n-                    116u8, 103u8, 114u8, 99u8, 103u8, 114u8, 116u8, 103u8, 117u8, 0u8, 103u8,\n-                    118u8, 114u8, 103u8, 119u8, 99u8, 103u8, 119u8, 116u8, 104u8, 97u8, 107u8,\n-                    104u8, 97u8, 122u8, 104u8, 100u8, 121u8, 104u8, 101u8, 0u8, 104u8, 105u8,\n-                    0u8, 104u8, 108u8, 117u8, 104u8, 109u8, 100u8, 104u8, 110u8, 100u8, 104u8,\n-                    110u8, 101u8, 104u8, 110u8, 106u8, 104u8, 110u8, 111u8, 104u8, 111u8, 99u8,\n-                    104u8, 111u8, 106u8, 104u8, 115u8, 110u8, 104u8, 121u8, 0u8, 105u8, 105u8,\n-                    0u8, 105u8, 110u8, 104u8, 105u8, 117u8, 0u8, 105u8, 119u8, 0u8, 106u8,\n-                    97u8, 0u8, 106u8, 105u8, 0u8, 106u8, 109u8, 108u8, 107u8, 97u8, 0u8, 107u8,\n-                    97u8, 97u8, 107u8, 97u8, 119u8, 107u8, 98u8, 100u8, 107u8, 98u8, 121u8,\n-                    107u8, 100u8, 116u8, 107u8, 102u8, 114u8, 107u8, 102u8, 121u8, 107u8,\n-                    104u8, 98u8, 107u8, 104u8, 110u8, 107u8, 104u8, 116u8, 107u8, 104u8, 119u8,\n-                    107u8, 106u8, 103u8, 107u8, 107u8, 0u8, 107u8, 109u8, 0u8, 107u8, 110u8,\n-                    0u8, 107u8, 111u8, 0u8, 107u8, 111u8, 105u8, 107u8, 111u8, 107u8, 107u8,\n-                    113u8, 121u8, 107u8, 114u8, 99u8, 107u8, 114u8, 117u8, 107u8, 115u8, 0u8,\n-                    107u8, 116u8, 98u8, 107u8, 117u8, 109u8, 107u8, 118u8, 0u8, 107u8, 118u8,\n-                    120u8, 107u8, 120u8, 99u8, 107u8, 120u8, 108u8, 107u8, 120u8, 109u8, 107u8,\n-                    120u8, 112u8, 107u8, 121u8, 0u8, 107u8, 122u8, 104u8, 108u8, 97u8, 98u8,\n-                    108u8, 97u8, 100u8, 108u8, 97u8, 104u8, 108u8, 98u8, 101u8, 108u8, 99u8,\n-                    112u8, 108u8, 101u8, 112u8, 108u8, 101u8, 122u8, 108u8, 105u8, 102u8,\n-                    108u8, 105u8, 115u8, 108u8, 107u8, 105u8, 108u8, 109u8, 110u8, 108u8,\n-                    111u8, 0u8, 108u8, 114u8, 99u8, 108u8, 117u8, 122u8, 108u8, 119u8, 108u8,\n-                    108u8, 122u8, 104u8, 109u8, 97u8, 103u8, 109u8, 97u8, 105u8, 109u8, 100u8,\n-                    101u8, 109u8, 100u8, 102u8, 109u8, 100u8, 120u8, 109u8, 102u8, 97u8, 109u8,\n-                    103u8, 112u8, 109u8, 107u8, 0u8, 109u8, 107u8, 105u8, 109u8, 108u8, 0u8,\n-                    109u8, 110u8, 0u8, 109u8, 110u8, 105u8, 109u8, 110u8, 119u8, 109u8, 114u8,\n-                    0u8, 109u8, 114u8, 100u8, 109u8, 114u8, 106u8, 109u8, 114u8, 111u8, 109u8,\n-                    116u8, 114u8, 109u8, 118u8, 121u8, 109u8, 119u8, 114u8, 109u8, 119u8,\n-                    119u8, 109u8, 121u8, 0u8, 109u8, 121u8, 109u8, 109u8, 121u8, 118u8, 109u8,\n-                    121u8, 122u8, 109u8, 122u8, 110u8, 110u8, 97u8, 110u8, 110u8, 101u8, 0u8,\n-                    110u8, 101u8, 119u8, 110u8, 110u8, 112u8, 110u8, 111u8, 100u8, 110u8,\n-                    111u8, 101u8, 110u8, 111u8, 110u8, 110u8, 113u8, 111u8, 110u8, 115u8,\n-                    107u8, 110u8, 115u8, 116u8, 111u8, 106u8, 0u8, 111u8, 106u8, 115u8, 111u8,\n-                    114u8, 0u8, 111u8, 114u8, 117u8, 111u8, 115u8, 0u8, 111u8, 115u8, 97u8,\n-                    111u8, 116u8, 97u8, 111u8, 116u8, 107u8, 111u8, 117u8, 105u8, 112u8, 97u8,\n-                    0u8, 112u8, 97u8, 108u8, 112u8, 101u8, 111u8, 112u8, 104u8, 108u8, 112u8,\n-                    104u8, 110u8, 112u8, 107u8, 97u8, 112u8, 110u8, 116u8, 112u8, 112u8, 97u8,\n-                    112u8, 114u8, 97u8, 112u8, 114u8, 100u8, 112u8, 115u8, 0u8, 114u8, 97u8,\n-                    106u8, 114u8, 104u8, 103u8, 114u8, 105u8, 102u8, 114u8, 106u8, 115u8,\n-                    114u8, 107u8, 116u8, 114u8, 109u8, 116u8, 114u8, 117u8, 0u8, 114u8, 117u8,\n-                    101u8, 114u8, 121u8, 117u8, 115u8, 97u8, 0u8, 115u8, 97u8, 104u8, 115u8,\n-                    97u8, 116u8, 115u8, 97u8, 122u8, 115u8, 99u8, 107u8, 115u8, 99u8, 108u8,\n-                    115u8, 100u8, 0u8, 115u8, 100u8, 104u8, 115u8, 103u8, 97u8, 115u8, 103u8,\n-                    119u8, 115u8, 104u8, 105u8, 115u8, 104u8, 110u8, 115u8, 104u8, 117u8,\n-                    115u8, 105u8, 0u8, 115u8, 107u8, 114u8, 115u8, 109u8, 112u8, 115u8, 111u8,\n-                    103u8, 115u8, 111u8, 117u8, 115u8, 114u8, 0u8, 115u8, 114u8, 98u8, 115u8,\n-                    114u8, 120u8, 115u8, 119u8, 98u8, 115u8, 119u8, 118u8, 115u8, 121u8, 108u8,\n-                    115u8, 121u8, 114u8, 116u8, 97u8, 0u8, 116u8, 97u8, 106u8, 116u8, 99u8,\n-                    121u8, 116u8, 100u8, 100u8, 116u8, 100u8, 103u8, 116u8, 100u8, 104u8,\n-                    116u8, 101u8, 0u8, 116u8, 103u8, 0u8, 116u8, 104u8, 0u8, 116u8, 104u8,\n-                    108u8, 116u8, 104u8, 113u8, 116u8, 104u8, 114u8, 116u8, 105u8, 0u8, 116u8,\n-                    105u8, 103u8, 116u8, 107u8, 116u8, 116u8, 114u8, 119u8, 116u8, 115u8,\n-                    100u8, 116u8, 115u8, 102u8, 116u8, 115u8, 106u8, 116u8, 116u8, 0u8, 116u8,\n-                    116u8, 115u8, 116u8, 120u8, 103u8, 116u8, 120u8, 111u8, 116u8, 121u8,\n-                    118u8, 117u8, 100u8, 105u8, 117u8, 100u8, 109u8, 117u8, 103u8, 0u8, 117u8,\n-                    103u8, 97u8, 117u8, 107u8, 0u8, 117u8, 110u8, 114u8, 117u8, 110u8, 120u8,\n-                    117u8, 114u8, 0u8, 118u8, 97u8, 105u8, 119u8, 97u8, 108u8, 119u8, 98u8,\n-                    113u8, 119u8, 98u8, 114u8, 119u8, 110u8, 105u8, 119u8, 115u8, 103u8, 119u8,\n-                    116u8, 109u8, 119u8, 117u8, 117u8, 120u8, 99u8, 111u8, 120u8, 99u8, 114u8,\n-                    120u8, 108u8, 99u8, 120u8, 108u8, 100u8, 120u8, 109u8, 102u8, 120u8, 109u8,\n-                    110u8, 120u8, 109u8, 114u8, 120u8, 110u8, 97u8, 120u8, 110u8, 114u8, 120u8,\n-                    112u8, 114u8, 120u8, 115u8, 97u8, 120u8, 115u8, 114u8, 121u8, 105u8, 0u8,\n-                    121u8, 117u8, 101u8, 122u8, 100u8, 106u8, 122u8, 103u8, 104u8, 122u8,\n-                    104u8, 0u8, 122u8, 104u8, 120u8, 122u8, 107u8, 116u8,\n-                ])\n+                :: zerovec :: ZeroVec :: from_bytes_unchecked (b\"am\\0ar\\0as\\0be\\0bg\\0bgcbhobn\\0brxchrcv\\0doiel\\0fa\\0gu\\0he\\0hi\\0hy\\0ja\\0ka\\0kk\\0km\\0kn\\0ko\\0kokks\\0ky\\0lo\\0maimk\\0ml\\0mn\\0mnimr\\0my\\0ne\\0or\\0pa\\0ps\\0rajru\\0sa\\0satsd\\0si\\0sr\\0ta\\0te\\0tg\\0th\\0ti\\0tt\\0uk\\0ur\\0yuezh\\0\")\n             },\n             unsafe {\n-                ::zerovec::ZeroVec::from_bytes_unchecked(&[\n-                    67u8, 121u8, 114u8, 108u8, 67u8, 121u8, 114u8, 108u8, 84u8, 105u8, 98u8,\n-                    116u8, 67u8, 121u8, 114u8, 108u8, 65u8, 118u8, 115u8, 116u8, 65u8, 114u8,\n-                    97u8, 98u8, 65u8, 104u8, 111u8, 109u8, 65u8, 114u8, 97u8, 98u8, 88u8,\n-                    115u8, 117u8, 120u8, 67u8, 121u8, 114u8, 108u8, 69u8, 116u8, 104u8, 105u8,\n-                    65u8, 114u8, 97u8, 98u8, 65u8, 114u8, 97u8, 98u8, 65u8, 114u8, 97u8, 98u8,\n-                    65u8, 114u8, 109u8, 105u8, 65u8, 114u8, 97u8, 98u8, 65u8, 114u8, 97u8,\n-                    98u8, 65u8, 114u8, 97u8, 98u8, 65u8, 114u8, 97u8, 98u8, 66u8, 101u8, 110u8,\n-                    103u8, 83u8, 103u8, 110u8, 119u8, 67u8, 121u8, 114u8, 108u8, 65u8, 114u8,\n-                    97u8, 98u8, 68u8, 101u8, 118u8, 97u8, 67u8, 121u8, 114u8, 108u8, 65u8,\n-                    114u8, 97u8, 98u8, 68u8, 101u8, 118u8, 97u8, 66u8, 97u8, 109u8, 117u8,\n-                    69u8, 116u8, 104u8, 105u8, 67u8, 121u8, 114u8, 108u8, 65u8, 114u8, 97u8,\n-                    98u8, 84u8, 97u8, 109u8, 108u8, 65u8, 114u8, 97u8, 98u8, 68u8, 101u8,\n-                    118u8, 97u8, 67u8, 121u8, 114u8, 108u8, 68u8, 101u8, 118u8, 97u8, 65u8,\n-                    114u8, 97u8, 98u8, 71u8, 114u8, 101u8, 107u8, 68u8, 101u8, 118u8, 97u8,\n-                    68u8, 101u8, 118u8, 97u8, 68u8, 101u8, 118u8, 97u8, 69u8, 116u8, 104u8,\n-                    105u8, 68u8, 101u8, 118u8, 97u8, 84u8, 97u8, 118u8, 116u8, 66u8, 101u8,\n-                    110u8, 103u8, 84u8, 105u8, 98u8, 116u8, 66u8, 101u8, 110u8, 103u8, 65u8,\n-                    114u8, 97u8, 98u8, 68u8, 101u8, 118u8, 97u8, 65u8, 114u8, 97u8, 98u8, 68u8,\n-                    101u8, 118u8, 97u8, 66u8, 97u8, 115u8, 115u8, 69u8, 116u8, 104u8, 105u8,\n-                    68u8, 101u8, 118u8, 97u8, 67u8, 121u8, 114u8, 108u8, 69u8, 116u8, 104u8,\n-                    105u8, 67u8, 97u8, 107u8, 109u8, 67u8, 121u8, 114u8, 108u8, 67u8, 121u8,\n-                    114u8, 108u8, 67u8, 104u8, 101u8, 114u8, 65u8, 114u8, 97u8, 98u8, 67u8,\n-                    104u8, 97u8, 109u8, 65u8, 114u8, 97u8, 98u8, 83u8, 111u8, 121u8, 111u8,\n-                    67u8, 111u8, 112u8, 116u8, 67u8, 97u8, 110u8, 115u8, 67u8, 121u8, 114u8,\n-                    108u8, 67u8, 97u8, 110u8, 115u8, 67u8, 97u8, 110u8, 115u8, 67u8, 97u8,\n-                    110u8, 115u8, 80u8, 97u8, 117u8, 99u8, 67u8, 121u8, 114u8, 108u8, 67u8,\n-                    121u8, 114u8, 108u8, 67u8, 121u8, 114u8, 108u8, 65u8, 114u8, 97u8, 98u8,\n-                    65u8, 114u8, 97u8, 98u8, 77u8, 101u8, 100u8, 102u8, 68u8, 101u8, 118u8,\n-                    97u8, 77u8, 111u8, 110u8, 103u8, 69u8, 116u8, 104u8, 105u8, 68u8, 101u8,\n-                    118u8, 97u8, 84u8, 104u8, 97u8, 97u8, 84u8, 105u8, 98u8, 116u8, 69u8,\n-                    103u8, 121u8, 112u8, 75u8, 97u8, 108u8, 105u8, 71u8, 114u8, 101u8, 107u8,\n-                    71u8, 111u8, 110u8, 109u8, 73u8, 116u8, 97u8, 108u8, 65u8, 114u8, 97u8,\n-                    98u8, 65u8, 114u8, 97u8, 98u8, 65u8, 114u8, 97u8, 98u8, 72u8, 97u8, 110u8,\n-                    115u8, 68u8, 101u8, 118u8, 97u8, 65u8, 114u8, 97u8, 98u8, 69u8, 116u8,\n-                    104u8, 105u8, 68u8, 101u8, 118u8, 97u8, 65u8, 114u8, 97u8, 98u8, 65u8,\n-                    114u8, 97u8, 98u8, 65u8, 114u8, 97u8, 98u8, 69u8, 116u8, 104u8, 105u8,\n-                    69u8, 116u8, 104u8, 105u8, 68u8, 101u8, 118u8, 97u8, 84u8, 101u8, 108u8,\n-                    117u8, 71u8, 111u8, 116u8, 104u8, 67u8, 112u8, 114u8, 116u8, 66u8, 101u8,\n-                    110u8, 103u8, 71u8, 117u8, 106u8, 114u8, 68u8, 101u8, 118u8, 97u8, 65u8,\n-                    114u8, 97u8, 98u8, 65u8, 114u8, 97u8, 98u8, 72u8, 97u8, 110u8, 115u8, 65u8,\n-                    114u8, 97u8, 98u8, 69u8, 116u8, 104u8, 105u8, 72u8, 101u8, 98u8, 114u8,\n-                    68u8, 101u8, 118u8, 97u8, 72u8, 108u8, 117u8, 119u8, 80u8, 108u8, 114u8,\n-                    100u8, 65u8, 114u8, 97u8, 98u8, 68u8, 101u8, 118u8, 97u8, 72u8, 109u8,\n-                    110u8, 112u8, 65u8, 114u8, 97u8, 98u8, 68u8, 101u8, 118u8, 97u8, 68u8,\n-                    101u8, 118u8, 97u8, 72u8, 97u8, 110u8, 115u8, 65u8, 114u8, 109u8, 110u8,\n-                    89u8, 105u8, 105u8, 105u8, 67u8, 121u8, 114u8, 108u8, 67u8, 97u8, 110u8,\n-                    115u8, 72u8, 101u8, 98u8, 114u8, 74u8, 112u8, 97u8, 110u8, 72u8, 101u8,\n-                    98u8, 114u8, 68u8, 101u8, 118u8, 97u8, 71u8, 101u8, 111u8, 114u8, 67u8,\n-                    121u8, 114u8, 108u8, 75u8, 97u8, 119u8, 105u8, 67u8, 121u8, 114u8, 108u8,\n-                    65u8, 114u8, 97u8, 98u8, 84u8, 104u8, 97u8, 105u8, 68u8, 101u8, 118u8,\n-                    97u8, 68u8, 101u8, 118u8, 97u8, 84u8, 97u8, 108u8, 117u8, 68u8, 101u8,\n-                    118u8, 97u8, 77u8, 121u8, 109u8, 114u8, 65u8, 114u8, 97u8, 98u8, 76u8,\n-                    97u8, 111u8, 111u8, 67u8, 121u8, 114u8, 108u8, 75u8, 104u8, 109u8, 114u8,\n-                    75u8, 110u8, 100u8, 97u8, 75u8, 111u8, 114u8, 101u8, 67u8, 121u8, 114u8,\n-                    108u8, 68u8, 101u8, 118u8, 97u8, 69u8, 116u8, 104u8, 105u8, 67u8, 121u8,\n-                    114u8, 108u8, 68u8, 101u8, 118u8, 97u8, 65u8, 114u8, 97u8, 98u8, 69u8,\n-                    116u8, 104u8, 105u8, 67u8, 121u8, 114u8, 108u8, 67u8, 121u8, 114u8, 108u8,\n-                    65u8, 114u8, 97u8, 98u8, 69u8, 116u8, 104u8, 105u8, 68u8, 101u8, 118u8,\n-                    97u8, 84u8, 104u8, 97u8, 105u8, 65u8, 114u8, 97u8, 98u8, 67u8, 121u8,\n-                    114u8, 108u8, 65u8, 114u8, 97u8, 98u8, 76u8, 105u8, 110u8, 97u8, 72u8,\n-                    101u8, 98u8, 114u8, 65u8, 114u8, 97u8, 98u8, 67u8, 121u8, 114u8, 108u8,\n-                    84u8, 104u8, 97u8, 105u8, 76u8, 101u8, 112u8, 99u8, 67u8, 121u8, 114u8,\n-                    108u8, 68u8, 101u8, 118u8, 97u8, 76u8, 105u8, 115u8, 117u8, 65u8, 114u8,\n-                    97u8, 98u8, 84u8, 101u8, 108u8, 117u8, 76u8, 97u8, 111u8, 111u8, 65u8,\n-                    114u8, 97u8, 98u8, 65u8, 114u8, 97u8, 98u8, 84u8, 104u8, 97u8, 105u8, 72u8,\n-                    97u8, 110u8, 115u8, 68u8, 101u8, 118u8, 97u8, 68u8, 101u8, 118u8, 97u8,\n-                    65u8, 114u8, 97u8, 98u8, 67u8, 121u8, 114u8, 108u8, 69u8, 116u8, 104u8,\n-                    105u8, 65u8, 114u8, 97u8, 98u8, 68u8, 101u8, 118u8, 97u8, 67u8, 121u8,\n-                    114u8, 108u8, 65u8, 114u8, 97u8, 98u8, 77u8, 108u8, 121u8, 109u8, 67u8,\n-                    121u8, 114u8, 108u8, 66u8, 101u8, 110u8, 103u8, 77u8, 121u8, 109u8, 114u8,\n-                    68u8, 101u8, 118u8, 97u8, 68u8, 101u8, 118u8, 97u8, 67u8, 121u8, 114u8,\n-                    108u8, 77u8, 114u8, 111u8, 111u8, 68u8, 101u8, 118u8, 97u8, 65u8, 114u8,\n-                    97u8, 98u8, 68u8, 101u8, 118u8, 97u8, 72u8, 109u8, 110u8, 112u8, 77u8,\n-                    121u8, 109u8, 114u8, 69u8, 116u8, 104u8, 105u8, 67u8, 121u8, 114u8, 108u8,\n-                    77u8, 97u8, 110u8, 100u8, 65u8, 114u8, 97u8, 98u8, 72u8, 97u8, 110u8,\n-                    115u8, 68u8, 101u8, 118u8, 97u8, 68u8, 101u8, 118u8, 97u8, 87u8, 99u8,\n-                    104u8, 111u8, 76u8, 97u8, 110u8, 97u8, 68u8, 101u8, 118u8, 97u8, 82u8,\n-                    117u8, 110u8, 114u8, 78u8, 107u8, 111u8, 111u8, 67u8, 97u8, 110u8, 115u8,\n-                    84u8, 110u8, 115u8, 97u8, 67u8, 97u8, 110u8, 115u8, 67u8, 97u8, 110u8,\n-                    115u8, 79u8, 114u8, 121u8, 97u8, 65u8, 114u8, 97u8, 98u8, 67u8, 121u8,\n-                    114u8, 108u8, 79u8, 115u8, 103u8, 101u8, 65u8, 114u8, 97u8, 98u8, 79u8,\n-                    114u8, 107u8, 104u8, 79u8, 117u8, 103u8, 114u8, 71u8, 117u8, 114u8, 117u8,\n-                    80u8, 104u8, 108u8, 105u8, 88u8, 112u8, 101u8, 111u8, 65u8, 114u8, 97u8,\n-                    98u8, 80u8, 104u8, 110u8, 120u8, 66u8, 114u8, 97u8, 104u8, 71u8, 114u8,\n-                    101u8, 107u8, 68u8, 101u8, 118u8, 97u8, 75u8, 104u8, 97u8, 114u8, 65u8,\n-                    114u8, 97u8, 98u8, 65u8, 114u8, 97u8, 98u8, 68u8, 101u8, 118u8, 97u8, 82u8,\n-                    111u8, 104u8, 103u8, 84u8, 102u8, 110u8, 103u8, 68u8, 101u8, 118u8, 97u8,\n-                    66u8, 101u8, 110u8, 103u8, 65u8, 114u8, 97u8, 98u8, 67u8, 121u8, 114u8,\n-                    108u8, 67u8, 121u8, 114u8, 108u8, 75u8, 97u8, 110u8, 97u8, 68u8, 101u8,\n-                    118u8, 97u8, 67u8, 121u8, 114u8, 108u8, 79u8, 108u8, 99u8, 107u8, 83u8,\n-                    97u8, 117u8, 114u8, 68u8, 101u8, 118u8, 97u8, 65u8, 114u8, 97u8, 98u8,\n-                    65u8, 114u8, 97u8, 98u8, 65u8, 114u8, 97u8, 98u8, 79u8, 103u8, 97u8, 109u8,\n-                    69u8, 116u8, 104u8, 105u8, 84u8, 102u8, 110u8, 103u8, 77u8, 121u8, 109u8,\n-                    114u8, 65u8, 114u8, 97u8, 98u8, 83u8, 105u8, 110u8, 104u8, 65u8, 114u8,\n-                    97u8, 98u8, 83u8, 97u8, 109u8, 114u8, 83u8, 111u8, 103u8, 100u8, 84u8,\n-                    104u8, 97u8, 105u8, 67u8, 121u8, 114u8, 108u8, 83u8, 111u8, 114u8, 97u8,\n-                    68u8, 101u8, 118u8, 97u8, 65u8, 114u8, 97u8, 98u8, 68u8, 101u8, 118u8,\n-                    97u8, 66u8, 101u8, 110u8, 103u8, 83u8, 121u8, 114u8, 99u8, 84u8, 97u8,\n-                    109u8, 108u8, 68u8, 101u8, 118u8, 97u8, 75u8, 110u8, 100u8, 97u8, 84u8,\n-                    97u8, 108u8, 101u8, 68u8, 101u8, 118u8, 97u8, 68u8, 101u8, 118u8, 97u8,\n-                    84u8, 101u8, 108u8, 117u8, 67u8, 121u8, 114u8, 108u8, 84u8, 104u8, 97u8,\n-                    105u8, 68u8, 101u8, 118u8, 97u8, 68u8, 101u8, 118u8, 97u8, 68u8, 101u8,\n-                    118u8, 97u8, 69u8, 116u8, 104u8, 105u8, 69u8, 116u8, 104u8, 105u8, 68u8,\n-                    101u8, 118u8, 97u8, 65u8, 114u8, 97u8, 98u8, 71u8, 114u8, 101u8, 107u8,\n-                    68u8, 101u8, 118u8, 97u8, 84u8, 105u8, 98u8, 116u8, 67u8, 121u8, 114u8,\n-                    108u8, 84u8, 104u8, 97u8, 105u8, 84u8, 97u8, 110u8, 103u8, 84u8, 111u8,\n-                    116u8, 111u8, 67u8, 121u8, 114u8, 108u8, 65u8, 103u8, 104u8, 98u8, 67u8,\n-                    121u8, 114u8, 108u8, 65u8, 114u8, 97u8, 98u8, 85u8, 103u8, 97u8, 114u8,\n-                    67u8, 121u8, 114u8, 108u8, 66u8, 101u8, 110u8, 103u8, 66u8, 101u8, 110u8,\n-                    103u8, 65u8, 114u8, 97u8, 98u8, 86u8, 97u8, 105u8, 105u8, 69u8, 116u8,\n-                    104u8, 105u8, 84u8, 101u8, 108u8, 117u8, 68u8, 101u8, 118u8, 97u8, 65u8,\n-                    114u8, 97u8, 98u8, 71u8, 111u8, 110u8, 103u8, 68u8, 101u8, 118u8, 97u8,\n-                    72u8, 97u8, 110u8, 115u8, 67u8, 104u8, 114u8, 115u8, 67u8, 97u8, 114u8,\n-                    105u8, 76u8, 121u8, 99u8, 105u8, 76u8, 121u8, 100u8, 105u8, 71u8, 101u8,\n-                    111u8, 114u8, 77u8, 97u8, 110u8, 105u8, 77u8, 101u8, 114u8, 99u8, 78u8,\n-                    97u8, 114u8, 98u8, 68u8, 101u8, 118u8, 97u8, 80u8, 114u8, 116u8, 105u8,\n-                    83u8, 97u8, 114u8, 98u8, 68u8, 101u8, 118u8, 97u8, 72u8, 101u8, 98u8,\n-                    114u8, 72u8, 97u8, 110u8, 116u8, 65u8, 114u8, 97u8, 98u8, 84u8, 102u8,\n-                    110u8, 103u8, 72u8, 97u8, 110u8, 115u8, 78u8, 115u8, 104u8, 117u8, 75u8,\n-                    105u8, 116u8, 115u8,\n-                ])\n+                :: zerovec :: ZeroVec :: from_bytes_unchecked (b\"EthiArabBengCyrlCyrlDevaDevaBengDevaCherCyrlDevaGrekArabGujrHebrDevaArmnJpanGeorCyrlKhmrKndaKoreDevaArabCyrlLaooDevaCyrlMlymCyrlBengDevaMymrDevaOryaGuruArabDevaCyrlDevaOlckArabSinhCyrlTamlTeluCyrlThaiEthiCyrlCyrlArabHantHans\")\n             },\n         )\n     },\n     lr2s: unsafe {\n         #[allow(unused_unsafe)]\n         ::zerovec::ZeroMap2d::from_parts_unchecked(\n             unsafe {\n-                ::zerovec::ZeroVec::from_bytes_unchecked(&[\n-                    97u8, 122u8, 0u8, 104u8, 97u8, 0u8, 107u8, 107u8, 0u8, 107u8, 117u8, 0u8,\n-                    107u8, 121u8, 0u8, 109u8, 97u8, 110u8, 109u8, 110u8, 0u8, 109u8, 115u8,\n-                    0u8, 112u8, 97u8, 0u8, 114u8, 105u8, 102u8, 115u8, 100u8, 0u8, 115u8,\n-                    114u8, 0u8, 116u8, 103u8, 0u8, 117u8, 103u8, 0u8, 117u8, 110u8, 114u8,\n-                    117u8, 122u8, 0u8, 121u8, 117u8, 101u8, 122u8, 104u8, 0u8,\n-                ])\n+                ::zerovec::ZeroVec::from_bytes_unchecked(\n+                    b\"az\\0ha\\0kk\\0ky\\0mn\\0ms\\0pa\\0sd\\0sr\\0tg\\0uz\\0yuezh\\0\",\n+                )\n             },\n             unsafe {\n-                ::zerovec::ZeroVec::from_bytes_unchecked(&[\n-                    3u8, 0u8, 0u8, 0u8, 5u8, 0u8, 0u8, 0u8, 9u8, 0u8, 0u8, 0u8, 10u8, 0u8, 0u8,\n-                    0u8, 12u8, 0u8, 0u8, 0u8, 13u8, 0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 15u8,\n-                    0u8, 0u8, 0u8, 16u8, 0u8, 0u8, 0u8, 17u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8,\n-                    0u8, 22u8, 0u8, 0u8, 0u8, 23u8, 0u8, 0u8, 0u8, 25u8, 0u8, 0u8, 0u8, 26u8,\n-                    0u8, 0u8, 0u8, 28u8, 0u8, 0u8, 0u8, 29u8, 0u8, 0u8, 0u8, 44u8, 0u8, 0u8,\n-                    0u8,\n-                ])\n+                :: zerovec :: ZeroVec :: from_bytes_unchecked (b\"\\x03\\0\\0\\0\\x05\\0\\0\\0\\t\\0\\0\\0\\x0B\\0\\0\\0\\x0C\\0\\0\\0\\r\\0\\0\\0\\x0E\\0\\0\\0\\x0F\\0\\0\\0\\x13\\0\\0\\0\\x14\\0\\0\\0\\x16\\0\\0\\0\\x17\\0\\0\\0&\\0\\0\\0\")\n             },\n             unsafe {\n-                ::zerovec::ZeroVec::from_bytes_unchecked(&[\n-                    73u8, 81u8, 0u8, 73u8, 82u8, 0u8, 82u8, 85u8, 0u8, 67u8, 77u8, 0u8, 83u8,\n-                    68u8, 0u8, 65u8, 70u8, 0u8, 67u8, 78u8, 0u8, 73u8, 82u8, 0u8, 77u8, 78u8,\n-                    0u8, 76u8, 66u8, 0u8, 67u8, 78u8, 0u8, 84u8, 82u8, 0u8, 71u8, 78u8, 0u8,\n-                    67u8, 78u8, 0u8, 67u8, 67u8, 0u8, 80u8, 75u8, 0u8, 78u8, 76u8, 0u8, 73u8,\n-                    78u8, 0u8, 77u8, 69u8, 0u8, 82u8, 79u8, 0u8, 82u8, 85u8, 0u8, 84u8, 82u8,\n-                    0u8, 80u8, 75u8, 0u8, 75u8, 90u8, 0u8, 77u8, 78u8, 0u8, 78u8, 80u8, 0u8,\n-                    65u8, 70u8, 0u8, 67u8, 78u8, 0u8, 67u8, 78u8, 0u8, 65u8, 85u8, 0u8, 66u8,\n-                    78u8, 0u8, 71u8, 66u8, 0u8, 71u8, 70u8, 0u8, 72u8, 75u8, 0u8, 73u8, 68u8,\n-                    0u8, 77u8, 79u8, 0u8, 80u8, 65u8, 0u8, 80u8, 70u8, 0u8, 80u8, 72u8, 0u8,\n-                    83u8, 82u8, 0u8, 84u8, 72u8, 0u8, 84u8, 87u8, 0u8, 85u8, 83u8, 0u8, 86u8,\n-                    78u8, 0u8,\n-                ])\n+                :: zerovec :: ZeroVec :: from_bytes_unchecked (b\"IQ\\0IR\\0RU\\0CM\\0SD\\0AF\\0CN\\0IR\\0MN\\0CN\\0TR\\0CN\\0CC\\0PK\\0IN\\0ME\\0RO\\0RU\\0TR\\0PK\\0AF\\0CN\\0CN\\0AU\\0BN\\0GB\\0GF\\0HK\\0ID\\0MO\\0PA\\0PF\\0PH\\0SR\\0TH\\0TW\\0US\\0VN\\0\")\n             },\n             unsafe {\n-                ::zerovec::ZeroVec::from_bytes_unchecked(&[\n-                    65u8, 114u8, 97u8, 98u8, 65u8, 114u8, 97u8, 98u8, 67u8, 121u8, 114u8,\n-                    108u8, 65u8, 114u8, 97u8, 98u8, 65u8, 114u8, 97u8, 98u8, 65u8, 114u8, 97u8,\n-                    98u8, 65u8, 114u8, 97u8, 98u8, 65u8, 114u8, 97u8, 98u8, 65u8, 114u8, 97u8,\n-                    98u8, 65u8, 114u8, 97u8, 98u8, 65u8, 114u8, 97u8, 98u8, 76u8, 97u8, 116u8,\n-                    110u8, 78u8, 107u8, 111u8, 111u8, 77u8, 111u8, 110u8, 103u8, 65u8, 114u8,\n-                    97u8, 98u8, 65u8, 114u8, 97u8, 98u8, 76u8, 97u8, 116u8, 110u8, 68u8, 101u8,\n-                    118u8, 97u8, 76u8, 97u8, 116u8, 110u8, 76u8, 97u8, 116u8, 110u8, 76u8,\n-                    97u8, 116u8, 110u8, 76u8, 97u8, 116u8, 110u8, 65u8, 114u8, 97u8, 98u8,\n-                    67u8, 121u8, 114u8, 108u8, 67u8, 121u8, 114u8, 108u8, 68u8, 101u8, 118u8,\n-                    97u8, 65u8, 114u8, 97u8, 98u8, 67u8, 121u8, 114u8, 108u8, 72u8, 97u8,\n-                    110u8, 115u8, 72u8, 97u8, 110u8, 116u8, 72u8, 97u8, 110u8, 116u8, 72u8,\n-                    97u8, 110u8, 116u8, 72u8, 97u8, 110u8, 116u8, 72u8, 97u8, 110u8, 116u8,\n-                    72u8, 97u8, 110u8, 116u8, 72u8, 97u8, 110u8, 116u8, 72u8, 97u8, 110u8,\n-                    116u8, 72u8, 97u8, 110u8, 116u8, 72u8, 97u8, 110u8, 116u8, 72u8, 97u8,\n-                    110u8, 116u8, 72u8, 97u8, 110u8, 116u8, 72u8, 97u8, 110u8, 116u8, 72u8,\n-                    97u8, 110u8, 116u8, 72u8, 97u8, 110u8, 116u8,\n-                ])\n+                :: zerovec :: ZeroVec :: from_bytes_unchecked (b\"ArabArabCyrlArabArabArabArabArabArabArabLatnMongArabArabDevaLatnLatnLatnLatnArabArabCyrlHansHantHantHantHantHantHantHantHantHantHantHantHantHantHantHant\")\n             },\n         )\n     },\n     l2r: unsafe {\n         #[allow(unused_unsafe)]\n         ::zerovec::ZeroMap::from_parts_unchecked(\n             unsafe {\n-                ::zerovec::ZeroVec::from_bytes_unchecked(&[\n-                    97u8, 97u8, 0u8, 97u8, 98u8, 0u8, 97u8, 98u8, 114u8, 97u8, 99u8, 101u8,\n-                    97u8, 99u8, 104u8, 97u8, 100u8, 97u8, 97u8, 100u8, 112u8, 97u8, 100u8,\n-                    121u8, 97u8, 101u8, 0u8, 97u8, 101u8, 98u8, 97u8, 102u8, 0u8, 97u8, 103u8,\n-                    113u8, 97u8, 104u8, 111u8, 97u8, 106u8, 116u8, 97u8, 107u8, 0u8, 97u8,\n-                    107u8, 107u8, 97u8, 108u8, 110u8, 97u8, 108u8, 116u8, 97u8, 109u8, 0u8,\n-                    97u8, 109u8, 111u8, 97u8, 110u8, 0u8, 97u8, 110u8, 110u8, 97u8, 111u8,\n-                    122u8, 97u8, 112u8, 100u8, 97u8, 114u8, 0u8, 97u8, 114u8, 99u8, 97u8,\n-                    114u8, 110u8, 97u8, 114u8, 111u8, 97u8, 114u8, 113u8, 97u8, 114u8, 115u8,\n-                    97u8, 114u8, 121u8, 97u8, 114u8, 122u8, 97u8, 115u8, 0u8, 97u8, 115u8,\n-                    97u8, 97u8, 115u8, 101u8, 97u8, 115u8, 116u8, 97u8, 116u8, 106u8, 97u8,\n-                    118u8, 0u8, 97u8, 119u8, 97u8, 97u8, 121u8, 0u8, 97u8, 122u8, 0u8, 98u8,\n-                    97u8, 0u8, 98u8, 97u8, 108u8, 98u8, 97u8, 110u8, 98u8, 97u8, 112u8, 98u8,\n-                    97u8, 114u8, 98u8, 97u8, 115u8, 98u8, 97u8, 120u8, 98u8, 98u8, 99u8, 98u8,\n-                    98u8, 106u8, 98u8, 99u8, 105u8, 98u8, 101u8, 0u8, 98u8, 101u8, 106u8, 98u8,\n-                    101u8, 109u8, 98u8, 101u8, 119u8, 98u8, 101u8, 122u8, 98u8, 102u8, 100u8,\n-                    98u8, 102u8, 113u8, 98u8, 102u8, 116u8, 98u8, 102u8, 121u8, 98u8, 103u8,\n-                    0u8, 98u8, 103u8, 99u8, 98u8, 103u8, 110u8, 98u8, 103u8, 120u8, 98u8,\n-                    104u8, 98u8, 98u8, 104u8, 105u8, 98u8, 104u8, 111u8, 98u8, 105u8, 0u8,\n-                    98u8, 105u8, 107u8, 98u8, 105u8, 110u8, 98u8, 106u8, 106u8, 98u8, 106u8,\n-                    110u8, 98u8, 106u8, 116u8, 98u8, 107u8, 109u8, 98u8, 107u8, 117u8, 98u8,\n-                    108u8, 97u8, 98u8, 108u8, 103u8, 98u8, 108u8, 116u8, 98u8, 109u8, 0u8,\n-                    98u8, 109u8, 113u8, 98u8, 110u8, 0u8, 98u8, 111u8, 0u8, 98u8, 112u8, 121u8,\n-                    98u8, 113u8, 105u8, 98u8, 113u8, 118u8, 98u8, 114u8, 0u8, 98u8, 114u8,\n-                    97u8, 98u8, 114u8, 104u8, 98u8, 114u8, 120u8, 98u8, 115u8, 0u8, 98u8,\n-                    115u8, 113u8, 98u8, 115u8, 115u8, 98u8, 116u8, 111u8, 98u8, 116u8, 118u8,\n-                    98u8, 117u8, 97u8, 98u8, 117u8, 99u8, 98u8, 117u8, 103u8, 98u8, 117u8,\n-                    109u8, 98u8, 118u8, 98u8, 98u8, 121u8, 110u8, 98u8, 121u8, 118u8, 98u8,\n-                    122u8, 101u8, 99u8, 97u8, 0u8, 99u8, 97u8, 100u8, 99u8, 99u8, 104u8, 99u8,\n-                    99u8, 112u8, 99u8, 101u8, 0u8, 99u8, 101u8, 98u8, 99u8, 103u8, 103u8, 99u8,\n-                    104u8, 0u8, 99u8, 104u8, 107u8, 99u8, 104u8, 109u8, 99u8, 104u8, 111u8,\n-                    99u8, 104u8, 112u8, 99u8, 104u8, 114u8, 99u8, 105u8, 99u8, 99u8, 106u8,\n-                    97u8, 99u8, 106u8, 109u8, 99u8, 107u8, 98u8, 99u8, 108u8, 99u8, 99u8,\n-                    109u8, 103u8, 99u8, 111u8, 0u8, 99u8, 111u8, 112u8, 99u8, 112u8, 115u8,\n-                    99u8, 114u8, 0u8, 99u8, 114u8, 103u8, 99u8, 114u8, 104u8, 99u8, 114u8,\n-                    107u8, 99u8, 114u8, 108u8, 99u8, 114u8, 115u8, 99u8, 115u8, 0u8, 99u8,\n-                    115u8, 98u8, 99u8, 115u8, 119u8, 99u8, 116u8, 100u8, 99u8, 117u8, 0u8,\n-                    99u8, 118u8, 0u8, 99u8, 121u8, 0u8, 100u8, 97u8, 0u8, 100u8, 97u8, 102u8,\n-                    100u8, 97u8, 107u8, 100u8, 97u8, 114u8, 100u8, 97u8, 118u8, 100u8, 99u8,\n-                    99u8, 100u8, 101u8, 0u8, 100u8, 101u8, 110u8, 100u8, 103u8, 114u8, 100u8,\n-                    106u8, 101u8, 100u8, 109u8, 102u8, 100u8, 110u8, 106u8, 100u8, 111u8,\n-                    105u8, 100u8, 114u8, 104u8, 100u8, 115u8, 98u8, 100u8, 116u8, 109u8, 100u8,\n-                    116u8, 112u8, 100u8, 116u8, 121u8, 100u8, 117u8, 97u8, 100u8, 118u8, 0u8,\n-                    100u8, 121u8, 111u8, 100u8, 121u8, 117u8, 100u8, 122u8, 0u8, 101u8, 98u8,\n-                    117u8, 101u8, 101u8, 0u8, 101u8, 102u8, 105u8, 101u8, 103u8, 108u8, 101u8,\n-                    103u8, 121u8, 101u8, 107u8, 121u8, 101u8, 108u8, 0u8, 101u8, 110u8, 0u8,\n-                    101u8, 111u8, 0u8, 101u8, 115u8, 0u8, 101u8, 115u8, 103u8, 101u8, 115u8,\n-                    117u8, 101u8, 116u8, 0u8, 101u8, 116u8, 116u8, 101u8, 117u8, 0u8, 101u8,\n-                    119u8, 111u8, 101u8, 120u8, 116u8, 102u8, 97u8, 0u8, 102u8, 97u8, 110u8,\n-                    102u8, 102u8, 0u8, 102u8, 102u8, 109u8, 102u8, 105u8, 0u8, 102u8, 105u8,\n-                    97u8, 102u8, 105u8, 108u8, 102u8, 105u8, 116u8, 102u8, 106u8, 0u8, 102u8,\n-                    111u8, 0u8, 102u8, 111u8, 110u8, 102u8, 114u8, 0u8, 102u8, 114u8, 99u8,\n-                    102u8, 114u8, 112u8, 102u8, 114u8, 114u8, 102u8, 114u8, 115u8, 102u8,\n-                    117u8, 98u8, 102u8, 117u8, 100u8, 102u8, 117u8, 102u8, 102u8, 117u8, 113u8,\n-                    102u8, 117u8, 114u8, 102u8, 117u8, 118u8, 102u8, 118u8, 114u8, 102u8,\n-                    121u8, 0u8, 103u8, 97u8, 0u8, 103u8, 97u8, 97u8, 103u8, 97u8, 103u8, 103u8,\n-                    97u8, 110u8, 103u8, 97u8, 121u8, 103u8, 98u8, 109u8, 103u8, 98u8, 122u8,\n-                    103u8, 99u8, 114u8, 103u8, 100u8, 0u8, 103u8, 101u8, 122u8, 103u8, 103u8,\n-                    110u8, 103u8, 105u8, 108u8, 103u8, 106u8, 107u8, 103u8, 106u8, 117u8,\n-                    103u8, 108u8, 0u8, 103u8, 108u8, 107u8, 103u8, 110u8, 0u8, 103u8, 111u8,\n-                    109u8, 103u8, 111u8, 110u8, 103u8, 111u8, 114u8, 103u8, 111u8, 115u8,\n-                    103u8, 111u8, 116u8, 103u8, 114u8, 99u8, 103u8, 114u8, 116u8, 103u8, 115u8,\n-                    119u8, 103u8, 117u8, 0u8, 103u8, 117u8, 98u8, 103u8, 117u8, 99u8, 103u8,\n-                    117u8, 114u8, 103u8, 117u8, 122u8, 103u8, 118u8, 0u8, 103u8, 118u8, 114u8,\n-                    103u8, 119u8, 105u8, 104u8, 97u8, 0u8, 104u8, 97u8, 107u8, 104u8, 97u8,\n-                    119u8, 104u8, 97u8, 122u8, 104u8, 101u8, 0u8, 104u8, 105u8, 0u8, 104u8,\n-                    105u8, 102u8, 104u8, 105u8, 108u8, 104u8, 108u8, 117u8, 104u8, 109u8,\n-                    100u8, 104u8, 110u8, 100u8, 104u8, 110u8, 101u8, 104u8, 110u8, 106u8,\n-                    104u8, 110u8, 110u8, 104u8, 110u8, 111u8, 104u8, 111u8, 0u8, 104u8, 111u8,\n-                    99u8, 104u8, 111u8, 106u8, 104u8, 114u8, 0u8, 104u8, 115u8, 98u8, 104u8,\n-                    115u8, 110u8, 104u8, 116u8, 0u8, 104u8, 117u8, 0u8, 104u8, 117u8, 114u8,\n-                    104u8, 121u8, 0u8, 104u8, 122u8, 0u8, 105u8, 97u8, 0u8, 105u8, 98u8, 97u8,\n-                    105u8, 98u8, 98u8, 105u8, 100u8, 0u8, 105u8, 102u8, 101u8, 105u8, 103u8,\n-                    0u8, 105u8, 105u8, 0u8, 105u8, 107u8, 0u8, 105u8, 108u8, 111u8, 105u8,\n-                    110u8, 0u8, 105u8, 110u8, 104u8, 105u8, 111u8, 0u8, 105u8, 115u8, 0u8,\n-                    105u8, 116u8, 0u8, 105u8, 117u8, 0u8, 105u8, 119u8, 0u8, 105u8, 122u8,\n-                    104u8, 106u8, 97u8, 0u8, 106u8, 97u8, 109u8, 106u8, 98u8, 111u8, 106u8,\n-                    103u8, 111u8, 106u8, 105u8, 0u8, 106u8, 109u8, 99u8, 106u8, 109u8, 108u8,\n-                    106u8, 117u8, 116u8, 106u8, 118u8, 0u8, 106u8, 119u8, 0u8, 107u8, 97u8,\n-                    0u8, 107u8, 97u8, 97u8, 107u8, 97u8, 98u8, 107u8, 97u8, 99u8, 107u8, 97u8,\n-                    106u8, 107u8, 97u8, 109u8, 107u8, 97u8, 111u8, 107u8, 97u8, 119u8, 107u8,\n-                    98u8, 100u8, 107u8, 98u8, 121u8, 107u8, 99u8, 103u8, 107u8, 99u8, 107u8,\n-                    107u8, 100u8, 101u8, 107u8, 100u8, 104u8, 107u8, 100u8, 116u8, 107u8,\n-                    101u8, 97u8, 107u8, 101u8, 110u8, 107u8, 102u8, 111u8, 107u8, 102u8, 114u8,\n-                    107u8, 102u8, 121u8, 107u8, 103u8, 0u8, 107u8, 103u8, 101u8, 107u8, 103u8,\n-                    112u8, 107u8, 104u8, 97u8, 107u8, 104u8, 98u8, 107u8, 104u8, 110u8, 107u8,\n-                    104u8, 113u8, 107u8, 104u8, 116u8, 107u8, 104u8, 119u8, 107u8, 105u8, 0u8,\n-                    107u8, 105u8, 117u8, 107u8, 106u8, 0u8, 107u8, 106u8, 103u8, 107u8, 107u8,\n-                    0u8, 107u8, 107u8, 106u8, 107u8, 108u8, 0u8, 107u8, 108u8, 110u8, 107u8,\n-                    109u8, 0u8, 107u8, 109u8, 98u8, 107u8, 110u8, 0u8, 107u8, 110u8, 102u8,\n-                    107u8, 111u8, 0u8, 107u8, 111u8, 105u8, 107u8, 111u8, 107u8, 107u8, 111u8,\n-                    115u8, 107u8, 112u8, 101u8, 107u8, 114u8, 99u8, 107u8, 114u8, 105u8, 107u8,\n-                    114u8, 106u8, 107u8, 114u8, 108u8, 107u8, 114u8, 117u8, 107u8, 115u8, 0u8,\n-                    107u8, 115u8, 98u8, 107u8, 115u8, 102u8, 107u8, 115u8, 104u8, 107u8, 116u8,\n-                    114u8, 107u8, 117u8, 0u8, 107u8, 117u8, 109u8, 107u8, 118u8, 0u8, 107u8,\n-                    118u8, 114u8, 107u8, 118u8, 120u8, 107u8, 119u8, 0u8, 107u8, 119u8, 107u8,\n-                    107u8, 120u8, 108u8, 107u8, 120u8, 109u8, 107u8, 120u8, 112u8, 107u8,\n-                    121u8, 0u8, 107u8, 122u8, 106u8, 107u8, 122u8, 116u8, 108u8, 97u8, 0u8,\n-                    108u8, 97u8, 98u8, 108u8, 97u8, 100u8, 108u8, 97u8, 103u8, 108u8, 97u8,\n-                    104u8, 108u8, 97u8, 106u8, 108u8, 98u8, 0u8, 108u8, 98u8, 101u8, 108u8,\n-                    98u8, 119u8, 108u8, 99u8, 112u8, 108u8, 101u8, 112u8, 108u8, 101u8, 122u8,\n-                    108u8, 103u8, 0u8, 108u8, 105u8, 0u8, 108u8, 105u8, 102u8, 108u8, 105u8,\n-                    106u8, 108u8, 105u8, 108u8, 108u8, 105u8, 115u8, 108u8, 106u8, 112u8,\n-                    108u8, 107u8, 105u8, 108u8, 107u8, 116u8, 108u8, 109u8, 110u8, 108u8,\n-                    109u8, 111u8, 108u8, 110u8, 0u8, 108u8, 111u8, 0u8, 108u8, 111u8, 108u8,\n-                    108u8, 111u8, 122u8, 108u8, 114u8, 99u8, 108u8, 116u8, 0u8, 108u8, 116u8,\n-                    103u8, 108u8, 117u8, 0u8, 108u8, 117u8, 97u8, 108u8, 117u8, 111u8, 108u8,\n-                    117u8, 121u8, 108u8, 117u8, 122u8, 108u8, 118u8, 0u8, 108u8, 119u8, 108u8,\n-                    108u8, 122u8, 104u8, 108u8, 122u8, 122u8, 109u8, 97u8, 100u8, 109u8, 97u8,\n-                    102u8, 109u8, 97u8, 103u8, 109u8, 97u8, 105u8, 109u8, 97u8, 107u8, 109u8,\n-                    97u8, 110u8, 109u8, 97u8, 115u8, 109u8, 97u8, 122u8, 109u8, 100u8, 102u8,\n-                    109u8, 100u8, 104u8, 109u8, 100u8, 114u8, 109u8, 101u8, 110u8, 109u8,\n-                    101u8, 114u8, 109u8, 102u8, 97u8, 109u8, 102u8, 101u8, 109u8, 103u8, 0u8,\n-                    109u8, 103u8, 104u8, 109u8, 103u8, 111u8, 109u8, 103u8, 112u8, 109u8,\n-                    103u8, 121u8, 109u8, 104u8, 0u8, 109u8, 105u8, 0u8, 109u8, 105u8, 99u8,\n-                    109u8, 105u8, 110u8, 109u8, 107u8, 0u8, 109u8, 108u8, 0u8, 109u8, 108u8,\n-                    115u8, 109u8, 110u8, 0u8, 109u8, 110u8, 105u8, 109u8, 110u8, 119u8, 109u8,\n-                    111u8, 0u8, 109u8, 111u8, 101u8, 109u8, 111u8, 104u8, 109u8, 111u8, 115u8,\n-                    109u8, 114u8, 0u8, 109u8, 114u8, 100u8, 109u8, 114u8, 106u8, 109u8, 114u8,\n-                    111u8, 109u8, 115u8, 0u8, 109u8, 116u8, 0u8, 109u8, 116u8, 114u8, 109u8,\n-                    117u8, 97u8, 109u8, 117u8, 115u8, 109u8, 118u8, 121u8, 109u8, 119u8, 107u8,\n-                    109u8, 119u8, 114u8, 109u8, 119u8, 118u8, 109u8, 119u8, 119u8, 109u8,\n-                    120u8, 99u8, 109u8, 121u8, 0u8, 109u8, 121u8, 118u8, 109u8, 121u8, 120u8,\n-                    109u8, 121u8, 122u8, 109u8, 122u8, 110u8, 110u8, 97u8, 0u8, 110u8, 97u8,\n-                    110u8, 110u8, 97u8, 112u8, 110u8, 97u8, 113u8, 110u8, 98u8, 0u8, 110u8,\n-                    99u8, 104u8, 110u8, 100u8, 0u8, 110u8, 100u8, 99u8, 110u8, 100u8, 115u8,\n-                    110u8, 101u8, 0u8, 110u8, 101u8, 119u8, 110u8, 103u8, 0u8, 110u8, 103u8,\n-                    108u8, 110u8, 104u8, 101u8, 110u8, 104u8, 119u8, 110u8, 105u8, 106u8,\n-                    110u8, 105u8, 117u8, 110u8, 106u8, 111u8, 110u8, 108u8, 0u8, 110u8, 109u8,\n-                    103u8, 110u8, 110u8, 0u8, 110u8, 110u8, 104u8, 110u8, 110u8, 112u8, 110u8,\n-                    111u8, 0u8, 110u8, 111u8, 100u8, 110u8, 111u8, 101u8, 110u8, 111u8, 110u8,\n-                    110u8, 113u8, 111u8, 110u8, 114u8, 0u8, 110u8, 115u8, 107u8, 110u8, 115u8,\n-                    111u8, 110u8, 115u8, 116u8, 110u8, 117u8, 115u8, 110u8, 118u8, 0u8, 110u8,\n-                    120u8, 113u8, 110u8, 121u8, 0u8, 110u8, 121u8, 109u8, 110u8, 121u8, 110u8,\n-                    110u8, 122u8, 105u8, 111u8, 99u8, 0u8, 111u8, 106u8, 0u8, 111u8, 106u8,\n-                    115u8, 111u8, 107u8, 97u8, 111u8, 109u8, 0u8, 111u8, 114u8, 0u8, 111u8,\n-                    115u8, 0u8, 111u8, 115u8, 97u8, 111u8, 116u8, 107u8, 111u8, 117u8, 105u8,\n-                    112u8, 97u8, 0u8, 112u8, 97u8, 103u8, 112u8, 97u8, 108u8, 112u8, 97u8,\n-                    109u8, 112u8, 97u8, 112u8, 112u8, 97u8, 117u8, 112u8, 99u8, 100u8, 112u8,\n-                    99u8, 109u8, 112u8, 100u8, 99u8, 112u8, 100u8, 116u8, 112u8, 101u8, 111u8,\n-                    112u8, 102u8, 108u8, 112u8, 104u8, 110u8, 112u8, 105u8, 115u8, 112u8,\n-                    107u8, 97u8, 112u8, 107u8, 111u8, 112u8, 108u8, 0u8, 112u8, 109u8, 115u8,\n-                    112u8, 110u8, 116u8, 112u8, 111u8, 110u8, 112u8, 112u8, 97u8, 112u8, 113u8,\n-                    109u8, 112u8, 114u8, 97u8, 112u8, 114u8, 100u8, 112u8, 114u8, 103u8, 112u8,\n-                    115u8, 0u8, 112u8, 116u8, 0u8, 112u8, 117u8, 117u8, 113u8, 117u8, 0u8,\n-                    113u8, 117u8, 99u8, 113u8, 117u8, 103u8, 114u8, 97u8, 106u8, 114u8, 99u8,\n-                    102u8, 114u8, 101u8, 106u8, 114u8, 103u8, 110u8, 114u8, 104u8, 103u8,\n-                    114u8, 105u8, 97u8, 114u8, 105u8, 102u8, 114u8, 106u8, 115u8, 114u8, 107u8,\n-                    116u8, 114u8, 109u8, 0u8, 114u8, 109u8, 102u8, 114u8, 109u8, 111u8, 114u8,\n-                    109u8, 116u8, 114u8, 109u8, 117u8, 114u8, 110u8, 0u8, 114u8, 110u8, 103u8,\n-                    114u8, 111u8, 0u8, 114u8, 111u8, 98u8, 114u8, 111u8, 102u8, 114u8, 116u8,\n-                    109u8, 114u8, 117u8, 0u8, 114u8, 117u8, 101u8, 114u8, 117u8, 103u8, 114u8,\n-                    119u8, 0u8, 114u8, 119u8, 107u8, 114u8, 121u8, 117u8, 115u8, 97u8, 0u8,\n-                    115u8, 97u8, 102u8, 115u8, 97u8, 104u8, 115u8, 97u8, 113u8, 115u8, 97u8,\n-                    115u8, 115u8, 97u8, 116u8, 115u8, 97u8, 118u8, 115u8, 97u8, 122u8, 115u8,\n-                    98u8, 112u8, 115u8, 99u8, 0u8, 115u8, 99u8, 107u8, 115u8, 99u8, 110u8,\n-                    115u8, 99u8, 111u8, 115u8, 100u8, 0u8, 115u8, 100u8, 99u8, 115u8, 100u8,\n-                    104u8, 115u8, 101u8, 0u8, 115u8, 101u8, 102u8, 115u8, 101u8, 104u8, 115u8,\n-                    101u8, 105u8, 115u8, 101u8, 115u8, 115u8, 103u8, 0u8, 115u8, 103u8, 97u8,\n-                    115u8, 103u8, 115u8, 115u8, 104u8, 105u8, 115u8, 104u8, 110u8, 115u8,\n-                    105u8, 0u8, 115u8, 105u8, 100u8, 115u8, 107u8, 0u8, 115u8, 107u8, 114u8,\n-                    115u8, 108u8, 0u8, 115u8, 108u8, 105u8, 115u8, 108u8, 121u8, 115u8, 109u8,\n-                    0u8, 115u8, 109u8, 97u8, 115u8, 109u8, 100u8, 115u8, 109u8, 106u8, 115u8,\n-                    109u8, 110u8, 115u8, 109u8, 112u8, 115u8, 109u8, 115u8, 115u8, 110u8, 0u8,\n-                    115u8, 110u8, 98u8, 115u8, 110u8, 107u8, 115u8, 111u8, 0u8, 115u8, 111u8,\n-                    103u8, 115u8, 111u8, 117u8, 115u8, 113u8, 0u8, 115u8, 114u8, 0u8, 115u8,\n-                    114u8, 98u8, 115u8, 114u8, 110u8, 115u8, 114u8, 114u8, 115u8, 114u8, 120u8,\n-                    115u8, 115u8, 0u8, 115u8, 115u8, 121u8, 115u8, 116u8, 0u8, 115u8, 116u8,\n-                    113u8, 115u8, 117u8, 0u8, 115u8, 117u8, 107u8, 115u8, 117u8, 115u8, 115u8,\n-                    118u8, 0u8, 115u8, 119u8, 0u8, 115u8, 119u8, 98u8, 115u8, 119u8, 99u8,\n-                    115u8, 119u8, 103u8, 115u8, 119u8, 118u8, 115u8, 120u8, 110u8, 115u8,\n-                    121u8, 108u8, 115u8, 121u8, 114u8, 115u8, 122u8, 108u8, 116u8, 97u8, 0u8,\n-                    116u8, 97u8, 106u8, 116u8, 98u8, 119u8, 116u8, 99u8, 121u8, 116u8, 100u8,\n-                    100u8, 116u8, 100u8, 103u8, 116u8, 100u8, 104u8, 116u8, 100u8, 117u8,\n-                    116u8, 101u8, 0u8, 116u8, 101u8, 109u8, 116u8, 101u8, 111u8, 116u8, 101u8,\n-                    116u8, 116u8, 103u8, 0u8, 116u8, 104u8, 0u8, 116u8, 104u8, 108u8, 116u8,\n-                    104u8, 113u8, 116u8, 104u8, 114u8, 116u8, 105u8, 0u8, 116u8, 105u8, 103u8,\n-                    116u8, 105u8, 118u8, 116u8, 107u8, 0u8, 116u8, 107u8, 108u8, 116u8, 107u8,\n-                    114u8, 116u8, 107u8, 116u8, 116u8, 108u8, 0u8, 116u8, 108u8, 121u8, 116u8,\n-                    109u8, 104u8, 116u8, 110u8, 0u8, 116u8, 111u8, 0u8, 116u8, 111u8, 103u8,\n-                    116u8, 111u8, 107u8, 116u8, 112u8, 105u8, 116u8, 114u8, 0u8, 116u8, 114u8,\n-                    117u8, 116u8, 114u8, 118u8, 116u8, 114u8, 119u8, 116u8, 115u8, 0u8, 116u8,\n-                    115u8, 100u8, 116u8, 115u8, 102u8, 116u8, 115u8, 103u8, 116u8, 115u8,\n-                    106u8, 116u8, 116u8, 0u8, 116u8, 116u8, 106u8, 116u8, 116u8, 115u8, 116u8,\n-                    116u8, 116u8, 116u8, 117u8, 109u8, 116u8, 118u8, 108u8, 116u8, 119u8,\n-                    113u8, 116u8, 120u8, 103u8, 116u8, 120u8, 111u8, 116u8, 121u8, 0u8, 116u8,\n-                    121u8, 118u8, 116u8, 122u8, 109u8, 117u8, 100u8, 105u8, 117u8, 100u8,\n-                    109u8, 117u8, 103u8, 0u8, 117u8, 103u8, 97u8, 117u8, 107u8, 0u8, 117u8,\n-                    108u8, 105u8, 117u8, 109u8, 98u8, 117u8, 110u8, 114u8, 117u8, 110u8, 120u8,\n-                    117u8, 114u8, 0u8, 117u8, 122u8, 0u8, 118u8, 97u8, 105u8, 118u8, 101u8,\n-                    0u8, 118u8, 101u8, 99u8, 118u8, 101u8, 112u8, 118u8, 105u8, 0u8, 118u8,\n-                    105u8, 99u8, 118u8, 108u8, 115u8, 118u8, 109u8, 102u8, 118u8, 109u8, 119u8,\n-                    118u8, 111u8, 0u8, 118u8, 111u8, 116u8, 118u8, 114u8, 111u8, 118u8, 117u8,\n-                    110u8, 119u8, 97u8, 0u8, 119u8, 97u8, 101u8, 119u8, 97u8, 108u8, 119u8,\n-                    97u8, 114u8, 119u8, 98u8, 112u8, 119u8, 98u8, 113u8, 119u8, 98u8, 114u8,\n-                    119u8, 108u8, 115u8, 119u8, 110u8, 105u8, 119u8, 111u8, 0u8, 119u8, 115u8,\n-                    103u8, 119u8, 116u8, 109u8, 119u8, 117u8, 117u8, 120u8, 97u8, 118u8, 120u8,\n-                    99u8, 111u8, 120u8, 99u8, 114u8, 120u8, 104u8, 0u8, 120u8, 108u8, 99u8,\n-                    120u8, 108u8, 100u8, 120u8, 109u8, 102u8, 120u8, 109u8, 110u8, 120u8,\n-                    109u8, 114u8, 120u8, 110u8, 97u8, 120u8, 110u8, 114u8, 120u8, 111u8, 103u8,\n-                    120u8, 112u8, 114u8, 120u8, 115u8, 97u8, 120u8, 115u8, 114u8, 121u8, 97u8,\n-                    111u8, 121u8, 97u8, 112u8, 121u8, 97u8, 118u8, 121u8, 98u8, 98u8, 121u8,\n-                    105u8, 0u8, 121u8, 111u8, 0u8, 121u8, 114u8, 108u8, 121u8, 117u8, 97u8,\n-                    121u8, 117u8, 101u8, 122u8, 97u8, 0u8, 122u8, 97u8, 103u8, 122u8, 100u8,\n-                    106u8, 122u8, 101u8, 97u8, 122u8, 103u8, 104u8, 122u8, 104u8, 0u8, 122u8,\n-                    104u8, 120u8, 122u8, 107u8, 116u8, 122u8, 108u8, 109u8, 122u8, 109u8,\n-                    105u8, 122u8, 117u8, 0u8, 122u8, 122u8, 97u8,\n-                ])\n+                :: zerovec :: ZeroVec :: from_bytes_unchecked (b\"af\\0am\\0ar\\0as\\0astaz\\0be\\0bg\\0bgcbhobn\\0br\\0brxbs\\0ca\\0cebchrcs\\0cv\\0cy\\0da\\0de\\0doidsbel\\0en\\0es\\0et\\0eu\\0fa\\0ff\\0fi\\0filfo\\0fr\\0ga\\0gd\\0gl\\0gu\\0ha\\0he\\0hi\\0hr\\0hsbhu\\0hy\\0ia\\0id\\0ig\\0is\\0it\\0ja\\0jv\\0ka\\0keakgpkk\\0km\\0kn\\0ko\\0kokks\\0ky\\0lo\\0lt\\0lv\\0maimi\\0mk\\0ml\\0mn\\0mnimr\\0ms\\0my\\0ne\\0nl\\0nn\\0no\\0or\\0pa\\0pcmpl\\0ps\\0pt\\0qu\\0rajrm\\0ro\\0ru\\0sa\\0satsc\\0sd\\0si\\0sk\\0sl\\0so\\0sq\\0sr\\0su\\0sv\\0sw\\0ta\\0te\\0tg\\0th\\0ti\\0tk\\0to\\0tr\\0tt\\0uk\\0ur\\0uz\\0vi\\0wo\\0xh\\0yo\\0yrlyuezh\\0zu\\0\")\n             },\n             unsafe {\n-                ::zerovec::ZeroVec::from_bytes_unchecked(&[\n-                    69u8, 84u8, 0u8, 71u8, 69u8, 0u8, 71u8, 72u8, 0u8, 73u8, 68u8, 0u8, 85u8,\n-                    71u8, 0u8, 71u8, 72u8, 0u8, 66u8, 84u8, 0u8, 82u8, 85u8, 0u8, 73u8, 82u8,\n-                    0u8, 84u8, 78u8, 0u8, 90u8, 65u8, 0u8, 67u8, 77u8, 0u8, 73u8, 78u8, 0u8,\n-                    84u8, 78u8, 0u8, 71u8, 72u8, 0u8, 73u8, 81u8, 0u8, 88u8, 75u8, 0u8, 82u8,\n-                    85u8, 0u8, 69u8, 84u8, 0u8, 78u8, 71u8, 0u8, 69u8, 83u8, 0u8, 78u8, 71u8,\n-                    0u8, 73u8, 68u8, 0u8, 84u8, 71u8, 0u8, 69u8, 71u8, 0u8, 73u8, 82u8, 0u8,\n-                    67u8, 76u8, 0u8, 66u8, 79u8, 0u8, 68u8, 90u8, 0u8, 83u8, 65u8, 0u8, 77u8,\n-                    65u8, 0u8, 69u8, 71u8, 0u8, 73u8, 78u8, 0u8, 84u8, 90u8, 0u8, 85u8, 83u8,\n-                    0u8, 69u8, 83u8, 0u8, 67u8, 65u8, 0u8, 82u8, 85u8, 0u8, 73u8, 78u8, 0u8,\n-                    66u8, 79u8, 0u8, 65u8, 90u8, 0u8, 82u8, 85u8, 0u8, 80u8, 75u8, 0u8, 73u8,\n-                    68u8, 0u8, 78u8, 80u8, 0u8, 65u8, 84u8, 0u8, 67u8, 77u8, 0u8, 67u8, 77u8,\n-                    0u8, 73u8, 68u8, 0u8, 67u8, 77u8, 0u8, 67u8, 73u8, 0u8, 66u8, 89u8, 0u8,\n-                    83u8, 68u8, 0u8, 90u8, 77u8, 0u8, 73u8, 68u8, 0u8, 84u8, 90u8, 0u8, 67u8,\n-                    77u8, 0u8, 73u8, 78u8, 0u8, 80u8, 75u8, 0u8, 73u8, 78u8, 0u8, 66u8, 71u8,\n-                    0u8, 73u8, 78u8, 0u8, 80u8, 75u8, 0u8, 84u8, 82u8, 0u8, 73u8, 78u8, 0u8,\n-                    73u8, 78u8, 0u8, 73u8, 78u8, 0u8, 86u8, 85u8, 0u8, 80u8, 72u8, 0u8, 78u8,\n-                    71u8, 0u8, 73u8, 78u8, 0u8, 73u8, 68u8, 0u8, 83u8, 78u8, 0u8, 67u8, 77u8,\n-                    0u8, 80u8, 72u8, 0u8, 67u8, 65u8, 0u8, 77u8, 89u8, 0u8, 86u8, 78u8, 0u8,\n-                    77u8, 76u8, 0u8, 77u8, 76u8, 0u8, 66u8, 68u8, 0u8, 67u8, 78u8, 0u8, 73u8,\n-                    78u8, 0u8, 73u8, 82u8, 0u8, 67u8, 73u8, 0u8, 70u8, 82u8, 0u8, 73u8, 78u8,\n-                    0u8, 80u8, 75u8, 0u8, 73u8, 78u8, 0u8, 66u8, 65u8, 0u8, 76u8, 82u8, 0u8,\n-                    67u8, 77u8, 0u8, 80u8, 72u8, 0u8, 80u8, 75u8, 0u8, 82u8, 85u8, 0u8, 89u8,\n-                    84u8, 0u8, 73u8, 68u8, 0u8, 67u8, 77u8, 0u8, 71u8, 81u8, 0u8, 69u8, 82u8,\n-                    0u8, 67u8, 77u8, 0u8, 77u8, 76u8, 0u8, 69u8, 83u8, 0u8, 85u8, 83u8, 0u8,\n-                    78u8, 71u8, 0u8, 66u8, 68u8, 0u8, 82u8, 85u8, 0u8, 80u8, 72u8, 0u8, 85u8,\n-                    71u8, 0u8, 71u8, 85u8, 0u8, 70u8, 77u8, 0u8, 82u8, 85u8, 0u8, 85u8, 83u8,\n-                    0u8, 67u8, 65u8, 0u8, 85u8, 83u8, 0u8, 85u8, 83u8, 0u8, 75u8, 72u8, 0u8,\n-                    86u8, 78u8, 0u8, 73u8, 81u8, 0u8, 67u8, 65u8, 0u8, 77u8, 78u8, 0u8, 70u8,\n-                    82u8, 0u8, 69u8, 71u8, 0u8, 80u8, 72u8, 0u8, 67u8, 65u8, 0u8, 67u8, 65u8,\n-                    0u8, 85u8, 65u8, 0u8, 67u8, 65u8, 0u8, 67u8, 65u8, 0u8, 83u8, 67u8, 0u8,\n-                    67u8, 90u8, 0u8, 80u8, 76u8, 0u8, 67u8, 65u8, 0u8, 77u8, 77u8, 0u8, 82u8,\n-                    85u8, 0u8, 82u8, 85u8, 0u8, 71u8, 66u8, 0u8, 68u8, 75u8, 0u8, 67u8, 73u8,\n-                    0u8, 85u8, 83u8, 0u8, 82u8, 85u8, 0u8, 75u8, 69u8, 0u8, 73u8, 78u8, 0u8,\n-                    68u8, 69u8, 0u8, 67u8, 65u8, 0u8, 67u8, 65u8, 0u8, 78u8, 69u8, 0u8, 78u8,\n-                    71u8, 0u8, 67u8, 73u8, 0u8, 73u8, 78u8, 0u8, 67u8, 78u8, 0u8, 68u8, 69u8,\n-                    0u8, 77u8, 76u8, 0u8, 77u8, 89u8, 0u8, 78u8, 80u8, 0u8, 67u8, 77u8, 0u8,\n-                    77u8, 86u8, 0u8, 83u8, 78u8, 0u8, 66u8, 70u8, 0u8, 66u8, 84u8, 0u8, 75u8,\n-                    69u8, 0u8, 71u8, 72u8, 0u8, 78u8, 71u8, 0u8, 73u8, 84u8, 0u8, 69u8, 71u8,\n-                    0u8, 77u8, 77u8, 0u8, 71u8, 82u8, 0u8, 85u8, 83u8, 0u8, 48u8, 48u8, 49u8,\n-                    69u8, 83u8, 0u8, 73u8, 78u8, 0u8, 85u8, 83u8, 0u8, 69u8, 69u8, 0u8, 73u8,\n-                    84u8, 0u8, 69u8, 83u8, 0u8, 67u8, 77u8, 0u8, 69u8, 83u8, 0u8, 73u8, 82u8,\n-                    0u8, 71u8, 81u8, 0u8, 83u8, 78u8, 0u8, 77u8, 76u8, 0u8, 70u8, 73u8, 0u8,\n-                    83u8, 68u8, 0u8, 80u8, 72u8, 0u8, 83u8, 69u8, 0u8, 70u8, 74u8, 0u8, 70u8,\n-                    79u8, 0u8, 66u8, 74u8, 0u8, 70u8, 82u8, 0u8, 85u8, 83u8, 0u8, 70u8, 82u8,\n-                    0u8, 68u8, 69u8, 0u8, 68u8, 69u8, 0u8, 67u8, 77u8, 0u8, 87u8, 70u8, 0u8,\n-                    71u8, 78u8, 0u8, 78u8, 69u8, 0u8, 73u8, 84u8, 0u8, 78u8, 71u8, 0u8, 83u8,\n-                    68u8, 0u8, 78u8, 76u8, 0u8, 73u8, 69u8, 0u8, 71u8, 72u8, 0u8, 77u8, 68u8,\n-                    0u8, 67u8, 78u8, 0u8, 73u8, 68u8, 0u8, 73u8, 78u8, 0u8, 73u8, 82u8, 0u8,\n-                    71u8, 70u8, 0u8, 71u8, 66u8, 0u8, 69u8, 84u8, 0u8, 78u8, 80u8, 0u8, 75u8,\n-                    73u8, 0u8, 80u8, 75u8, 0u8, 80u8, 75u8, 0u8, 69u8, 83u8, 0u8, 73u8, 82u8,\n-                    0u8, 80u8, 89u8, 0u8, 73u8, 78u8, 0u8, 73u8, 78u8, 0u8, 73u8, 68u8, 0u8,\n-                    78u8, 76u8, 0u8, 85u8, 65u8, 0u8, 67u8, 89u8, 0u8, 73u8, 78u8, 0u8, 67u8,\n-                    72u8, 0u8, 73u8, 78u8, 0u8, 66u8, 82u8, 0u8, 67u8, 79u8, 0u8, 71u8, 72u8,\n-                    0u8, 75u8, 69u8, 0u8, 73u8, 77u8, 0u8, 78u8, 80u8, 0u8, 67u8, 65u8, 0u8,\n-                    78u8, 71u8, 0u8, 67u8, 78u8, 0u8, 85u8, 83u8, 0u8, 65u8, 70u8, 0u8, 73u8,\n-                    76u8, 0u8, 73u8, 78u8, 0u8, 70u8, 74u8, 0u8, 80u8, 72u8, 0u8, 84u8, 82u8,\n-                    0u8, 67u8, 78u8, 0u8, 80u8, 75u8, 0u8, 73u8, 78u8, 0u8, 85u8, 83u8, 0u8,\n-                    80u8, 72u8, 0u8, 80u8, 75u8, 0u8, 80u8, 71u8, 0u8, 73u8, 78u8, 0u8, 73u8,\n-                    78u8, 0u8, 72u8, 82u8, 0u8, 68u8, 69u8, 0u8, 67u8, 78u8, 0u8, 72u8, 84u8,\n-                    0u8, 72u8, 85u8, 0u8, 67u8, 65u8, 0u8, 65u8, 77u8, 0u8, 78u8, 65u8, 0u8,\n-                    48u8, 48u8, 49u8, 77u8, 89u8, 0u8, 78u8, 71u8, 0u8, 73u8, 68u8, 0u8, 84u8,\n-                    71u8, 0u8, 78u8, 71u8, 0u8, 67u8, 78u8, 0u8, 85u8, 83u8, 0u8, 80u8, 72u8,\n-                    0u8, 73u8, 68u8, 0u8, 82u8, 85u8, 0u8, 48u8, 48u8, 49u8, 73u8, 83u8, 0u8,\n-                    73u8, 84u8, 0u8, 67u8, 65u8, 0u8, 73u8, 76u8, 0u8, 82u8, 85u8, 0u8, 74u8,\n-                    80u8, 0u8, 74u8, 77u8, 0u8, 48u8, 48u8, 49u8, 67u8, 77u8, 0u8, 85u8, 65u8,\n-                    0u8, 84u8, 90u8, 0u8, 78u8, 80u8, 0u8, 68u8, 75u8, 0u8, 73u8, 68u8, 0u8,\n-                    73u8, 68u8, 0u8, 71u8, 69u8, 0u8, 85u8, 90u8, 0u8, 68u8, 90u8, 0u8, 77u8,\n-                    77u8, 0u8, 78u8, 71u8, 0u8, 75u8, 69u8, 0u8, 77u8, 76u8, 0u8, 73u8, 68u8,\n-                    0u8, 82u8, 85u8, 0u8, 78u8, 69u8, 0u8, 78u8, 71u8, 0u8, 90u8, 87u8, 0u8,\n-                    84u8, 90u8, 0u8, 84u8, 71u8, 0u8, 84u8, 72u8, 0u8, 67u8, 86u8, 0u8, 67u8,\n-                    77u8, 0u8, 67u8, 73u8, 0u8, 73u8, 78u8, 0u8, 73u8, 78u8, 0u8, 67u8, 68u8,\n-                    0u8, 73u8, 68u8, 0u8, 66u8, 82u8, 0u8, 73u8, 78u8, 0u8, 67u8, 78u8, 0u8,\n-                    73u8, 78u8, 0u8, 77u8, 76u8, 0u8, 73u8, 78u8, 0u8, 80u8, 75u8, 0u8, 75u8,\n-                    69u8, 0u8, 84u8, 82u8, 0u8, 78u8, 65u8, 0u8, 76u8, 65u8, 0u8, 75u8, 90u8,\n-                    0u8, 67u8, 77u8, 0u8, 71u8, 76u8, 0u8, 75u8, 69u8, 0u8, 75u8, 72u8, 0u8,\n-                    65u8, 79u8, 0u8, 73u8, 78u8, 0u8, 71u8, 87u8, 0u8, 75u8, 82u8, 0u8, 82u8,\n-                    85u8, 0u8, 73u8, 78u8, 0u8, 70u8, 77u8, 0u8, 76u8, 82u8, 0u8, 82u8, 85u8,\n-                    0u8, 83u8, 76u8, 0u8, 80u8, 72u8, 0u8, 82u8, 85u8, 0u8, 73u8, 78u8, 0u8,\n-                    73u8, 78u8, 0u8, 84u8, 90u8, 0u8, 67u8, 77u8, 0u8, 68u8, 69u8, 0u8, 77u8,\n-                    89u8, 0u8, 84u8, 82u8, 0u8, 82u8, 85u8, 0u8, 82u8, 85u8, 0u8, 73u8, 68u8,\n-                    0u8, 80u8, 75u8, 0u8, 71u8, 66u8, 0u8, 67u8, 65u8, 0u8, 73u8, 78u8, 0u8,\n-                    84u8, 72u8, 0u8, 80u8, 75u8, 0u8, 75u8, 71u8, 0u8, 77u8, 89u8, 0u8, 77u8,\n-                    89u8, 0u8, 86u8, 65u8, 0u8, 71u8, 82u8, 0u8, 73u8, 76u8, 0u8, 84u8, 90u8,\n-                    0u8, 80u8, 75u8, 0u8, 85u8, 71u8, 0u8, 76u8, 85u8, 0u8, 82u8, 85u8, 0u8,\n-                    73u8, 68u8, 0u8, 67u8, 78u8, 0u8, 73u8, 78u8, 0u8, 82u8, 85u8, 0u8, 85u8,\n-                    71u8, 0u8, 78u8, 76u8, 0u8, 78u8, 80u8, 0u8, 73u8, 84u8, 0u8, 67u8, 65u8,\n-                    0u8, 67u8, 78u8, 0u8, 73u8, 68u8, 0u8, 73u8, 82u8, 0u8, 85u8, 83u8, 0u8,\n-                    73u8, 78u8, 0u8, 73u8, 84u8, 0u8, 67u8, 68u8, 0u8, 76u8, 65u8, 0u8, 67u8,\n-                    68u8, 0u8, 90u8, 77u8, 0u8, 73u8, 82u8, 0u8, 76u8, 84u8, 0u8, 76u8, 86u8,\n-                    0u8, 67u8, 68u8, 0u8, 67u8, 68u8, 0u8, 75u8, 69u8, 0u8, 75u8, 69u8, 0u8,\n-                    73u8, 82u8, 0u8, 76u8, 86u8, 0u8, 84u8, 72u8, 0u8, 67u8, 78u8, 0u8, 84u8,\n-                    82u8, 0u8, 73u8, 68u8, 0u8, 67u8, 77u8, 0u8, 73u8, 78u8, 0u8, 73u8, 78u8,\n-                    0u8, 73u8, 68u8, 0u8, 71u8, 77u8, 0u8, 75u8, 69u8, 0u8, 77u8, 88u8, 0u8,\n-                    82u8, 85u8, 0u8, 80u8, 72u8, 0u8, 73u8, 68u8, 0u8, 83u8, 76u8, 0u8, 75u8,\n-                    69u8, 0u8, 84u8, 72u8, 0u8, 77u8, 85u8, 0u8, 77u8, 71u8, 0u8, 77u8, 90u8,\n-                    0u8, 67u8, 77u8, 0u8, 78u8, 80u8, 0u8, 84u8, 90u8, 0u8, 77u8, 72u8, 0u8,\n-                    78u8, 90u8, 0u8, 67u8, 65u8, 0u8, 73u8, 68u8, 0u8, 77u8, 75u8, 0u8, 73u8,\n-                    78u8, 0u8, 83u8, 68u8, 0u8, 77u8, 78u8, 0u8, 73u8, 78u8, 0u8, 77u8, 77u8,\n-                    0u8, 82u8, 79u8, 0u8, 67u8, 65u8, 0u8, 67u8, 65u8, 0u8, 66u8, 70u8, 0u8,\n-                    73u8, 78u8, 0u8, 78u8, 80u8, 0u8, 82u8, 85u8, 0u8, 66u8, 68u8, 0u8, 77u8,\n-                    89u8, 0u8, 77u8, 84u8, 0u8, 73u8, 78u8, 0u8, 67u8, 77u8, 0u8, 85u8, 83u8,\n-                    0u8, 80u8, 75u8, 0u8, 77u8, 76u8, 0u8, 73u8, 78u8, 0u8, 73u8, 68u8, 0u8,\n-                    85u8, 83u8, 0u8, 90u8, 87u8, 0u8, 77u8, 77u8, 0u8, 82u8, 85u8, 0u8, 85u8,\n-                    71u8, 0u8, 73u8, 82u8, 0u8, 73u8, 82u8, 0u8, 78u8, 82u8, 0u8, 67u8, 78u8,\n-                    0u8, 73u8, 84u8, 0u8, 78u8, 65u8, 0u8, 78u8, 79u8, 0u8, 77u8, 88u8, 0u8,\n-                    90u8, 87u8, 0u8, 77u8, 90u8, 0u8, 68u8, 69u8, 0u8, 78u8, 80u8, 0u8, 78u8,\n-                    80u8, 0u8, 78u8, 65u8, 0u8, 77u8, 90u8, 0u8, 77u8, 88u8, 0u8, 77u8, 88u8,\n-                    0u8, 73u8, 68u8, 0u8, 78u8, 85u8, 0u8, 73u8, 78u8, 0u8, 78u8, 76u8, 0u8,\n-                    67u8, 77u8, 0u8, 78u8, 79u8, 0u8, 67u8, 77u8, 0u8, 73u8, 78u8, 0u8, 78u8,\n-                    79u8, 0u8, 84u8, 72u8, 0u8, 73u8, 78u8, 0u8, 83u8, 69u8, 0u8, 71u8, 78u8,\n-                    0u8, 90u8, 65u8, 0u8, 67u8, 65u8, 0u8, 90u8, 65u8, 0u8, 73u8, 78u8, 0u8,\n-                    83u8, 83u8, 0u8, 85u8, 83u8, 0u8, 67u8, 78u8, 0u8, 77u8, 87u8, 0u8, 84u8,\n-                    90u8, 0u8, 85u8, 71u8, 0u8, 71u8, 72u8, 0u8, 70u8, 82u8, 0u8, 67u8, 65u8,\n-                    0u8, 67u8, 65u8, 0u8, 67u8, 65u8, 0u8, 69u8, 84u8, 0u8, 73u8, 78u8, 0u8,\n-                    71u8, 69u8, 0u8, 85u8, 83u8, 0u8, 77u8, 78u8, 0u8, 49u8, 52u8, 51u8, 73u8,\n-                    78u8, 0u8, 80u8, 72u8, 0u8, 73u8, 82u8, 0u8, 80u8, 72u8, 0u8, 65u8, 87u8,\n-                    0u8, 80u8, 87u8, 0u8, 70u8, 82u8, 0u8, 78u8, 71u8, 0u8, 85u8, 83u8, 0u8,\n-                    67u8, 65u8, 0u8, 73u8, 82u8, 0u8, 68u8, 69u8, 0u8, 76u8, 66u8, 0u8, 83u8,\n-                    66u8, 0u8, 73u8, 78u8, 0u8, 75u8, 69u8, 0u8, 80u8, 76u8, 0u8, 73u8, 84u8,\n-                    0u8, 71u8, 82u8, 0u8, 70u8, 77u8, 0u8, 73u8, 78u8, 0u8, 67u8, 65u8, 0u8,\n-                    80u8, 75u8, 0u8, 73u8, 82u8, 0u8, 48u8, 48u8, 49u8, 65u8, 70u8, 0u8, 66u8,\n-                    82u8, 0u8, 71u8, 65u8, 0u8, 80u8, 69u8, 0u8, 71u8, 84u8, 0u8, 69u8, 67u8,\n-                    0u8, 73u8, 78u8, 0u8, 82u8, 69u8, 0u8, 73u8, 68u8, 0u8, 73u8, 84u8, 0u8,\n-                    77u8, 77u8, 0u8, 73u8, 78u8, 0u8, 77u8, 65u8, 0u8, 78u8, 80u8, 0u8, 66u8,\n-                    68u8, 0u8, 67u8, 72u8, 0u8, 70u8, 73u8, 0u8, 67u8, 72u8, 0u8, 73u8, 82u8,\n-                    0u8, 83u8, 69u8, 0u8, 66u8, 73u8, 0u8, 77u8, 90u8, 0u8, 82u8, 79u8, 0u8,\n-                    73u8, 68u8, 0u8, 84u8, 90u8, 0u8, 70u8, 74u8, 0u8, 82u8, 85u8, 0u8, 85u8,\n-                    65u8, 0u8, 83u8, 66u8, 0u8, 82u8, 87u8, 0u8, 84u8, 90u8, 0u8, 74u8, 80u8,\n-                    0u8, 73u8, 78u8, 0u8, 71u8, 72u8, 0u8, 82u8, 85u8, 0u8, 75u8, 69u8, 0u8,\n-                    73u8, 68u8, 0u8, 73u8, 78u8, 0u8, 83u8, 78u8, 0u8, 73u8, 78u8, 0u8, 84u8,\n-                    90u8, 0u8, 73u8, 84u8, 0u8, 73u8, 78u8, 0u8, 73u8, 84u8, 0u8, 71u8, 66u8,\n-                    0u8, 80u8, 75u8, 0u8, 73u8, 84u8, 0u8, 73u8, 82u8, 0u8, 78u8, 79u8, 0u8,\n-                    67u8, 73u8, 0u8, 77u8, 90u8, 0u8, 77u8, 88u8, 0u8, 77u8, 76u8, 0u8, 67u8,\n-                    70u8, 0u8, 73u8, 69u8, 0u8, 76u8, 84u8, 0u8, 77u8, 65u8, 0u8, 77u8, 77u8,\n-                    0u8, 76u8, 75u8, 0u8, 69u8, 84u8, 0u8, 83u8, 75u8, 0u8, 80u8, 75u8, 0u8,\n-                    83u8, 73u8, 0u8, 80u8, 76u8, 0u8, 73u8, 68u8, 0u8, 87u8, 83u8, 0u8, 83u8,\n-                    69u8, 0u8, 65u8, 79u8, 0u8, 83u8, 69u8, 0u8, 70u8, 73u8, 0u8, 73u8, 76u8,\n-                    0u8, 70u8, 73u8, 0u8, 90u8, 87u8, 0u8, 77u8, 89u8, 0u8, 77u8, 76u8, 0u8,\n-                    83u8, 79u8, 0u8, 85u8, 90u8, 0u8, 84u8, 72u8, 0u8, 65u8, 76u8, 0u8, 82u8,\n-                    83u8, 0u8, 73u8, 78u8, 0u8, 83u8, 82u8, 0u8, 83u8, 78u8, 0u8, 73u8, 78u8,\n-                    0u8, 90u8, 65u8, 0u8, 69u8, 82u8, 0u8, 90u8, 65u8, 0u8, 68u8, 69u8, 0u8,\n-                    73u8, 68u8, 0u8, 84u8, 90u8, 0u8, 71u8, 78u8, 0u8, 83u8, 69u8, 0u8, 84u8,\n-                    90u8, 0u8, 89u8, 84u8, 0u8, 67u8, 68u8, 0u8, 68u8, 69u8, 0u8, 73u8, 78u8,\n-                    0u8, 73u8, 68u8, 0u8, 66u8, 68u8, 0u8, 73u8, 81u8, 0u8, 80u8, 76u8, 0u8,\n-                    73u8, 78u8, 0u8, 78u8, 80u8, 0u8, 80u8, 72u8, 0u8, 73u8, 78u8, 0u8, 67u8,\n-                    78u8, 0u8, 78u8, 80u8, 0u8, 78u8, 80u8, 0u8, 77u8, 89u8, 0u8, 73u8, 78u8,\n-                    0u8, 83u8, 76u8, 0u8, 85u8, 71u8, 0u8, 84u8, 76u8, 0u8, 84u8, 74u8, 0u8,\n-                    84u8, 72u8, 0u8, 78u8, 80u8, 0u8, 78u8, 80u8, 0u8, 78u8, 80u8, 0u8, 69u8,\n-                    84u8, 0u8, 69u8, 82u8, 0u8, 78u8, 71u8, 0u8, 84u8, 77u8, 0u8, 84u8, 75u8,\n-                    0u8, 65u8, 90u8, 0u8, 78u8, 80u8, 0u8, 80u8, 72u8, 0u8, 65u8, 90u8, 0u8,\n-                    78u8, 69u8, 0u8, 90u8, 65u8, 0u8, 84u8, 79u8, 0u8, 77u8, 87u8, 0u8, 48u8,\n-                    48u8, 49u8, 80u8, 71u8, 0u8, 84u8, 82u8, 0u8, 84u8, 82u8, 0u8, 84u8, 87u8,\n-                    0u8, 80u8, 75u8, 0u8, 90u8, 65u8, 0u8, 71u8, 82u8, 0u8, 78u8, 80u8, 0u8,\n-                    80u8, 72u8, 0u8, 66u8, 84u8, 0u8, 82u8, 85u8, 0u8, 85u8, 71u8, 0u8, 84u8,\n-                    72u8, 0u8, 65u8, 90u8, 0u8, 77u8, 87u8, 0u8, 84u8, 86u8, 0u8, 78u8, 69u8,\n-                    0u8, 67u8, 78u8, 0u8, 73u8, 78u8, 0u8, 80u8, 70u8, 0u8, 82u8, 85u8, 0u8,\n-                    77u8, 65u8, 0u8, 82u8, 85u8, 0u8, 82u8, 85u8, 0u8, 67u8, 78u8, 0u8, 83u8,\n-                    89u8, 0u8, 85u8, 65u8, 0u8, 70u8, 77u8, 0u8, 65u8, 79u8, 0u8, 73u8, 78u8,\n-                    0u8, 73u8, 78u8, 0u8, 80u8, 75u8, 0u8, 85u8, 90u8, 0u8, 76u8, 82u8, 0u8,\n-                    90u8, 65u8, 0u8, 73u8, 84u8, 0u8, 82u8, 85u8, 0u8, 86u8, 78u8, 0u8, 83u8,\n-                    88u8, 0u8, 66u8, 69u8, 0u8, 68u8, 69u8, 0u8, 77u8, 90u8, 0u8, 48u8, 48u8,\n-                    49u8, 82u8, 85u8, 0u8, 69u8, 69u8, 0u8, 84u8, 90u8, 0u8, 66u8, 69u8, 0u8,\n-                    67u8, 72u8, 0u8, 69u8, 84u8, 0u8, 80u8, 72u8, 0u8, 65u8, 85u8, 0u8, 73u8,\n-                    78u8, 0u8, 73u8, 78u8, 0u8, 87u8, 70u8, 0u8, 75u8, 77u8, 0u8, 83u8, 78u8,\n-                    0u8, 73u8, 78u8, 0u8, 73u8, 78u8, 0u8, 67u8, 78u8, 0u8, 66u8, 82u8, 0u8,\n-                    85u8, 90u8, 0u8, 84u8, 82u8, 0u8, 90u8, 65u8, 0u8, 84u8, 82u8, 0u8, 84u8,\n-                    82u8, 0u8, 71u8, 69u8, 0u8, 67u8, 78u8, 0u8, 83u8, 68u8, 0u8, 83u8, 65u8,\n-                    0u8, 73u8, 78u8, 0u8, 85u8, 71u8, 0u8, 73u8, 82u8, 0u8, 89u8, 69u8, 0u8,\n-                    78u8, 80u8, 0u8, 77u8, 90u8, 0u8, 70u8, 77u8, 0u8, 67u8, 77u8, 0u8, 67u8,\n-                    77u8, 0u8, 48u8, 48u8, 49u8, 78u8, 71u8, 0u8, 66u8, 82u8, 0u8, 77u8, 88u8,\n-                    0u8, 72u8, 75u8, 0u8, 67u8, 78u8, 0u8, 83u8, 68u8, 0u8, 75u8, 77u8, 0u8,\n-                    78u8, 76u8, 0u8, 77u8, 65u8, 0u8, 67u8, 78u8, 0u8, 67u8, 78u8, 0u8, 67u8,\n-                    78u8, 0u8, 84u8, 71u8, 0u8, 77u8, 89u8, 0u8, 90u8, 65u8, 0u8, 84u8, 82u8,\n-                    0u8,\n-                ])\n+                :: zerovec :: ZeroVec :: from_bytes_unchecked (b\"ZA\\0ET\\0EG\\0IN\\0ES\\0AZ\\0BY\\0BG\\0IN\\0IN\\0BD\\0FR\\0IN\\0BA\\0ES\\0PH\\0US\\0CZ\\0RU\\0GB\\0DK\\0DE\\0IN\\0DE\\0GR\\0US\\0ES\\0EE\\0ES\\0IR\\0SN\\0FI\\0PH\\0FO\\0FR\\0IE\\0GB\\0ES\\0IN\\0NG\\0IL\\0IN\\0HR\\0DE\\0HU\\0AM\\x00001ID\\0NG\\0IS\\0IT\\0JP\\0ID\\0GE\\0CV\\0BR\\0KZ\\0KH\\0IN\\0KR\\0IN\\0IN\\0KG\\0LA\\0LT\\0LV\\0IN\\0NZ\\0MK\\0IN\\0MN\\0IN\\0IN\\0MY\\0MM\\0NP\\0NL\\0NO\\0NO\\0IN\\0IN\\0NG\\0PL\\0AF\\0BR\\0PE\\0IN\\0CH\\0RO\\0RU\\0IN\\0IN\\0IT\\0PK\\0LK\\0SK\\0SI\\0SO\\0AL\\0RS\\0ID\\0SE\\0TZ\\0IN\\0IN\\0TJ\\0TH\\0ET\\0TM\\0TO\\0TR\\0RU\\0UA\\0PK\\0UZ\\0VN\\0SN\\0ZA\\0NG\\0BR\\0HK\\0CN\\0ZA\\0\")\n             },\n         )\n     },\n     ls2r: unsafe {\n         #[allow(unused_unsafe)]\n         ::zerovec::ZeroMap2d::from_parts_unchecked(\n             unsafe {\n-                ::zerovec::ZeroVec::from_bytes_unchecked(&[\n-                    97u8, 114u8, 99u8, 97u8, 122u8, 0u8, 99u8, 117u8, 0u8, 101u8, 110u8, 0u8,\n-                    102u8, 102u8, 0u8, 103u8, 114u8, 99u8, 107u8, 107u8, 0u8, 107u8, 117u8,\n-                    0u8, 107u8, 121u8, 0u8, 108u8, 105u8, 102u8, 109u8, 97u8, 110u8, 109u8,\n-                    110u8, 0u8, 112u8, 97u8, 0u8, 112u8, 97u8, 108u8, 115u8, 100u8, 0u8, 116u8,\n-                    103u8, 0u8, 117u8, 103u8, 0u8, 117u8, 110u8, 114u8, 117u8, 122u8, 0u8,\n-                    121u8, 117u8, 101u8, 122u8, 104u8, 0u8,\n-                ])\n+                ::zerovec::ZeroVec::from_bytes_unchecked(\n+                    b\"az\\0en\\0ff\\0kk\\0ky\\0mn\\0pa\\0sd\\0tg\\0uz\\0yuezh\\0\",\n+                )\n             },\n             unsafe {\n-                ::zerovec::ZeroVec::from_bytes_unchecked(&[\n-                    2u8, 0u8, 0u8, 0u8, 3u8, 0u8, 0u8, 0u8, 4u8, 0u8, 0u8, 0u8, 5u8, 0u8, 0u8,\n-                    0u8, 6u8, 0u8, 0u8, 0u8, 7u8, 0u8, 0u8, 0u8, 8u8, 0u8, 0u8, 0u8, 10u8, 0u8,\n-                    0u8, 0u8, 12u8, 0u8, 0u8, 0u8, 13u8, 0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8,\n-                    15u8, 0u8, 0u8, 0u8, 16u8, 0u8, 0u8, 0u8, 17u8, 0u8, 0u8, 0u8, 20u8, 0u8,\n-                    0u8, 0u8, 21u8, 0u8, 0u8, 0u8, 22u8, 0u8, 0u8, 0u8, 23u8, 0u8, 0u8, 0u8,\n-                    24u8, 0u8, 0u8, 0u8, 25u8, 0u8, 0u8, 0u8, 28u8, 0u8, 0u8, 0u8,\n-                ])\n+                :: zerovec :: ZeroVec :: from_bytes_unchecked (b\"\\x01\\0\\0\\0\\x02\\0\\0\\0\\x03\\0\\0\\0\\x04\\0\\0\\0\\x06\\0\\0\\0\\x07\\0\\0\\0\\x08\\0\\0\\0\\x0B\\0\\0\\0\\x0C\\0\\0\\0\\r\\0\\0\\0\\x0E\\0\\0\\0\\x11\\0\\0\\0\")\n             },\n             unsafe {\n-                ::zerovec::ZeroVec::from_bytes_unchecked(&[\n-                    78u8, 98u8, 97u8, 116u8, 80u8, 97u8, 108u8, 109u8, 65u8, 114u8, 97u8, 98u8,\n-                    71u8, 108u8, 97u8, 103u8, 83u8, 104u8, 97u8, 119u8, 65u8, 100u8, 108u8,\n-                    109u8, 76u8, 105u8, 110u8, 98u8, 65u8, 114u8, 97u8, 98u8, 65u8, 114u8,\n-                    97u8, 98u8, 89u8, 101u8, 122u8, 105u8, 65u8, 114u8, 97u8, 98u8, 76u8, 97u8,\n-                    116u8, 110u8, 76u8, 105u8, 109u8, 98u8, 78u8, 107u8, 111u8, 111u8, 77u8,\n-                    111u8, 110u8, 103u8, 65u8, 114u8, 97u8, 98u8, 80u8, 104u8, 108u8, 112u8,\n-                    68u8, 101u8, 118u8, 97u8, 75u8, 104u8, 111u8, 106u8, 83u8, 105u8, 110u8,\n-                    100u8, 65u8, 114u8, 97u8, 98u8, 67u8, 121u8, 114u8, 108u8, 68u8, 101u8,\n-                    118u8, 97u8, 65u8, 114u8, 97u8, 98u8, 72u8, 97u8, 110u8, 115u8, 66u8,\n-                    111u8, 112u8, 111u8, 72u8, 97u8, 110u8, 98u8, 72u8, 97u8, 110u8, 116u8,\n-                ])\n+                ::zerovec::ZeroVec::from_bytes_unchecked(\n+                    b\"ArabShawAdlmArabArabLatnMongArabDevaKhojSindArabArabHansBopoHanbHant\",\n+                )\n             },\n             unsafe {\n-                ::zerovec::ZeroVec::from_bytes_unchecked(&[\n-                    74u8, 79u8, 0u8, 83u8, 89u8, 0u8, 73u8, 82u8, 0u8, 66u8, 71u8, 0u8, 71u8,\n-                    66u8, 0u8, 71u8, 78u8, 0u8, 71u8, 82u8, 0u8, 67u8, 78u8, 0u8, 73u8, 81u8,\n-                    0u8, 71u8, 69u8, 0u8, 67u8, 78u8, 0u8, 84u8, 82u8, 0u8, 73u8, 78u8, 0u8,\n-                    71u8, 78u8, 0u8, 67u8, 78u8, 0u8, 80u8, 75u8, 0u8, 67u8, 78u8, 0u8, 73u8,\n-                    78u8, 0u8, 73u8, 78u8, 0u8, 73u8, 78u8, 0u8, 80u8, 75u8, 0u8, 75u8, 90u8,\n-                    0u8, 78u8, 80u8, 0u8, 65u8, 70u8, 0u8, 67u8, 78u8, 0u8, 84u8, 87u8, 0u8,\n-                    84u8, 87u8, 0u8, 84u8, 87u8, 0u8,\n-                ])\n+                ::zerovec::ZeroVec::from_bytes_unchecked(\n+                    b\"IR\\0GB\\0GN\\0CN\\0CN\\0TR\\0CN\\0PK\\0IN\\0IN\\0IN\\0PK\\0AF\\0CN\\0TW\\0TW\\0TW\\0\",\n+                )\n             },\n         )\n     },"}, {"sha": "a13646a0b925e1c4b2750e515ef068ccaef14272", "filename": "compiler/rustc_baked_icu_data/src/data/fallback/parents_v1/und.rs.data", "status": "modified", "additions": 2, "deletions": 205, "changes": 207, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Ffallback%2Fparents_v1%2Fund.rs.data", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Ffallback%2Fparents_v1%2Fund.rs.data", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Ffallback%2Fparents_v1%2Fund.rs.data?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -3,213 +3,10 @@\n         #[allow(unused_unsafe)]\n         ::zerovec::ZeroMap::from_parts_unchecked(\n             unsafe {\n-                ::zerovec::VarZeroVec::from_bytes_unchecked(&[\n-                    131u8, 0u8, 0u8, 0u8, 0u8, 0u8, 6u8, 0u8, 11u8, 0u8, 16u8, 0u8, 21u8, 0u8,\n-                    26u8, 0u8, 31u8, 0u8, 36u8, 0u8, 41u8, 0u8, 46u8, 0u8, 51u8, 0u8, 56u8,\n-                    0u8, 61u8, 0u8, 66u8, 0u8, 71u8, 0u8, 76u8, 0u8, 81u8, 0u8, 86u8, 0u8,\n-                    91u8, 0u8, 96u8, 0u8, 101u8, 0u8, 106u8, 0u8, 111u8, 0u8, 116u8, 0u8,\n-                    121u8, 0u8, 126u8, 0u8, 131u8, 0u8, 136u8, 0u8, 141u8, 0u8, 146u8, 0u8,\n-                    151u8, 0u8, 156u8, 0u8, 161u8, 0u8, 166u8, 0u8, 171u8, 0u8, 176u8, 0u8,\n-                    181u8, 0u8, 186u8, 0u8, 191u8, 0u8, 196u8, 0u8, 201u8, 0u8, 206u8, 0u8,\n-                    211u8, 0u8, 216u8, 0u8, 221u8, 0u8, 226u8, 0u8, 231u8, 0u8, 236u8, 0u8,\n-                    241u8, 0u8, 246u8, 0u8, 251u8, 0u8, 0u8, 1u8, 5u8, 1u8, 10u8, 1u8, 15u8,\n-                    1u8, 20u8, 1u8, 25u8, 1u8, 30u8, 1u8, 35u8, 1u8, 40u8, 1u8, 45u8, 1u8,\n-                    50u8, 1u8, 55u8, 1u8, 60u8, 1u8, 65u8, 1u8, 70u8, 1u8, 75u8, 1u8, 80u8,\n-                    1u8, 85u8, 1u8, 90u8, 1u8, 95u8, 1u8, 100u8, 1u8, 105u8, 1u8, 110u8, 1u8,\n-                    115u8, 1u8, 120u8, 1u8, 125u8, 1u8, 130u8, 1u8, 135u8, 1u8, 140u8, 1u8,\n-                    145u8, 1u8, 150u8, 1u8, 155u8, 1u8, 160u8, 1u8, 165u8, 1u8, 170u8, 1u8,\n-                    175u8, 1u8, 180u8, 1u8, 185u8, 1u8, 190u8, 1u8, 195u8, 1u8, 200u8, 1u8,\n-                    205u8, 1u8, 210u8, 1u8, 215u8, 1u8, 220u8, 1u8, 225u8, 1u8, 230u8, 1u8,\n-                    235u8, 1u8, 240u8, 1u8, 245u8, 1u8, 250u8, 1u8, 255u8, 1u8, 4u8, 2u8, 9u8,\n-                    2u8, 14u8, 2u8, 19u8, 2u8, 24u8, 2u8, 29u8, 2u8, 34u8, 2u8, 39u8, 2u8,\n-                    44u8, 2u8, 49u8, 2u8, 54u8, 2u8, 59u8, 2u8, 64u8, 2u8, 71u8, 2u8, 73u8,\n-                    2u8, 75u8, 2u8, 77u8, 2u8, 82u8, 2u8, 87u8, 2u8, 92u8, 2u8, 97u8, 2u8,\n-                    102u8, 2u8, 107u8, 2u8, 112u8, 2u8, 117u8, 2u8, 122u8, 2u8, 127u8, 2u8,\n-                    132u8, 2u8, 101u8, 110u8, 45u8, 49u8, 53u8, 48u8, 101u8, 110u8, 45u8, 65u8,\n-                    71u8, 101u8, 110u8, 45u8, 65u8, 73u8, 101u8, 110u8, 45u8, 65u8, 84u8,\n-                    101u8, 110u8, 45u8, 65u8, 85u8, 101u8, 110u8, 45u8, 66u8, 66u8, 101u8,\n-                    110u8, 45u8, 66u8, 69u8, 101u8, 110u8, 45u8, 66u8, 77u8, 101u8, 110u8,\n-                    45u8, 66u8, 83u8, 101u8, 110u8, 45u8, 66u8, 87u8, 101u8, 110u8, 45u8, 66u8,\n-                    90u8, 101u8, 110u8, 45u8, 67u8, 67u8, 101u8, 110u8, 45u8, 67u8, 72u8,\n-                    101u8, 110u8, 45u8, 67u8, 75u8, 101u8, 110u8, 45u8, 67u8, 77u8, 101u8,\n-                    110u8, 45u8, 67u8, 88u8, 101u8, 110u8, 45u8, 67u8, 89u8, 101u8, 110u8,\n-                    45u8, 68u8, 69u8, 101u8, 110u8, 45u8, 68u8, 71u8, 101u8, 110u8, 45u8, 68u8,\n-                    75u8, 101u8, 110u8, 45u8, 68u8, 77u8, 101u8, 110u8, 45u8, 69u8, 82u8,\n-                    101u8, 110u8, 45u8, 70u8, 73u8, 101u8, 110u8, 45u8, 70u8, 74u8, 101u8,\n-                    110u8, 45u8, 70u8, 75u8, 101u8, 110u8, 45u8, 70u8, 77u8, 101u8, 110u8,\n-                    45u8, 71u8, 66u8, 101u8, 110u8, 45u8, 71u8, 68u8, 101u8, 110u8, 45u8, 71u8,\n-                    71u8, 101u8, 110u8, 45u8, 71u8, 72u8, 101u8, 110u8, 45u8, 71u8, 73u8,\n-                    101u8, 110u8, 45u8, 71u8, 77u8, 101u8, 110u8, 45u8, 71u8, 89u8, 101u8,\n-                    110u8, 45u8, 72u8, 75u8, 101u8, 110u8, 45u8, 73u8, 69u8, 101u8, 110u8,\n-                    45u8, 73u8, 76u8, 101u8, 110u8, 45u8, 73u8, 77u8, 101u8, 110u8, 45u8, 73u8,\n-                    78u8, 101u8, 110u8, 45u8, 73u8, 79u8, 101u8, 110u8, 45u8, 74u8, 69u8,\n-                    101u8, 110u8, 45u8, 74u8, 77u8, 101u8, 110u8, 45u8, 75u8, 69u8, 101u8,\n-                    110u8, 45u8, 75u8, 73u8, 101u8, 110u8, 45u8, 75u8, 78u8, 101u8, 110u8,\n-                    45u8, 75u8, 89u8, 101u8, 110u8, 45u8, 76u8, 67u8, 101u8, 110u8, 45u8, 76u8,\n-                    82u8, 101u8, 110u8, 45u8, 76u8, 83u8, 101u8, 110u8, 45u8, 77u8, 71u8,\n-                    101u8, 110u8, 45u8, 77u8, 79u8, 101u8, 110u8, 45u8, 77u8, 83u8, 101u8,\n-                    110u8, 45u8, 77u8, 84u8, 101u8, 110u8, 45u8, 77u8, 85u8, 101u8, 110u8,\n-                    45u8, 77u8, 86u8, 101u8, 110u8, 45u8, 77u8, 87u8, 101u8, 110u8, 45u8, 77u8,\n-                    89u8, 101u8, 110u8, 45u8, 78u8, 65u8, 101u8, 110u8, 45u8, 78u8, 70u8,\n-                    101u8, 110u8, 45u8, 78u8, 71u8, 101u8, 110u8, 45u8, 78u8, 76u8, 101u8,\n-                    110u8, 45u8, 78u8, 82u8, 101u8, 110u8, 45u8, 78u8, 85u8, 101u8, 110u8,\n-                    45u8, 78u8, 90u8, 101u8, 110u8, 45u8, 80u8, 71u8, 101u8, 110u8, 45u8, 80u8,\n-                    75u8, 101u8, 110u8, 45u8, 80u8, 78u8, 101u8, 110u8, 45u8, 80u8, 87u8,\n-                    101u8, 110u8, 45u8, 82u8, 87u8, 101u8, 110u8, 45u8, 83u8, 66u8, 101u8,\n-                    110u8, 45u8, 83u8, 67u8, 101u8, 110u8, 45u8, 83u8, 68u8, 101u8, 110u8,\n-                    45u8, 83u8, 69u8, 101u8, 110u8, 45u8, 83u8, 71u8, 101u8, 110u8, 45u8, 83u8,\n-                    72u8, 101u8, 110u8, 45u8, 83u8, 73u8, 101u8, 110u8, 45u8, 83u8, 76u8,\n-                    101u8, 110u8, 45u8, 83u8, 83u8, 101u8, 110u8, 45u8, 83u8, 88u8, 101u8,\n-                    110u8, 45u8, 83u8, 90u8, 101u8, 110u8, 45u8, 84u8, 67u8, 101u8, 110u8,\n-                    45u8, 84u8, 75u8, 101u8, 110u8, 45u8, 84u8, 79u8, 101u8, 110u8, 45u8, 84u8,\n-                    84u8, 101u8, 110u8, 45u8, 84u8, 86u8, 101u8, 110u8, 45u8, 84u8, 90u8,\n-                    101u8, 110u8, 45u8, 85u8, 71u8, 101u8, 110u8, 45u8, 86u8, 67u8, 101u8,\n-                    110u8, 45u8, 86u8, 71u8, 101u8, 110u8, 45u8, 86u8, 85u8, 101u8, 110u8,\n-                    45u8, 87u8, 83u8, 101u8, 110u8, 45u8, 90u8, 65u8, 101u8, 110u8, 45u8, 90u8,\n-                    77u8, 101u8, 110u8, 45u8, 90u8, 87u8, 101u8, 115u8, 45u8, 65u8, 82u8,\n-                    101u8, 115u8, 45u8, 66u8, 79u8, 101u8, 115u8, 45u8, 66u8, 82u8, 101u8,\n-                    115u8, 45u8, 66u8, 90u8, 101u8, 115u8, 45u8, 67u8, 76u8, 101u8, 115u8,\n-                    45u8, 67u8, 79u8, 101u8, 115u8, 45u8, 67u8, 82u8, 101u8, 115u8, 45u8, 67u8,\n-                    85u8, 101u8, 115u8, 45u8, 68u8, 79u8, 101u8, 115u8, 45u8, 69u8, 67u8,\n-                    101u8, 115u8, 45u8, 71u8, 84u8, 101u8, 115u8, 45u8, 72u8, 78u8, 101u8,\n-                    115u8, 45u8, 77u8, 88u8, 101u8, 115u8, 45u8, 78u8, 73u8, 101u8, 115u8,\n-                    45u8, 80u8, 65u8, 101u8, 115u8, 45u8, 80u8, 69u8, 101u8, 115u8, 45u8, 80u8,\n-                    82u8, 101u8, 115u8, 45u8, 80u8, 89u8, 101u8, 115u8, 45u8, 83u8, 86u8,\n-                    101u8, 115u8, 45u8, 85u8, 83u8, 101u8, 115u8, 45u8, 85u8, 89u8, 101u8,\n-                    115u8, 45u8, 86u8, 69u8, 104u8, 105u8, 45u8, 76u8, 97u8, 116u8, 110u8,\n-                    104u8, 116u8, 110u8, 98u8, 110u8, 110u8, 112u8, 116u8, 45u8, 65u8, 79u8,\n-                    112u8, 116u8, 45u8, 67u8, 72u8, 112u8, 116u8, 45u8, 67u8, 86u8, 112u8,\n-                    116u8, 45u8, 70u8, 82u8, 112u8, 116u8, 45u8, 71u8, 81u8, 112u8, 116u8,\n-                    45u8, 71u8, 87u8, 112u8, 116u8, 45u8, 76u8, 85u8, 112u8, 116u8, 45u8, 77u8,\n-                    79u8, 112u8, 116u8, 45u8, 77u8, 90u8, 112u8, 116u8, 45u8, 83u8, 84u8,\n-                    112u8, 116u8, 45u8, 84u8, 76u8, 122u8, 104u8, 45u8, 72u8, 97u8, 110u8,\n-                    116u8, 45u8, 77u8, 79u8,\n-                ])\n+                :: zerovec :: VarZeroVec :: from_bytes_unchecked (b\"\\x84\\0\\0\\0\\0\\0\\x06\\0\\x0B\\0\\x10\\0\\x15\\0\\x1A\\0\\x1F\\0$\\0)\\0.\\x003\\08\\0=\\0B\\0G\\0L\\0Q\\0V\\0[\\0`\\0e\\0j\\0o\\0t\\0y\\0~\\0\\x83\\0\\x88\\0\\x8D\\0\\x92\\0\\x97\\0\\x9C\\0\\xA1\\0\\xA6\\0\\xAB\\0\\xB0\\0\\xB5\\0\\xBA\\0\\xBF\\0\\xC4\\0\\xC9\\0\\xCE\\0\\xD3\\0\\xD8\\0\\xDD\\0\\xE2\\0\\xE7\\0\\xEC\\0\\xF1\\0\\xF6\\0\\xFB\\0\\0\\x01\\x05\\x01\\n\\x01\\x0F\\x01\\x14\\x01\\x19\\x01\\x1E\\x01#\\x01(\\x01-\\x012\\x017\\x01<\\x01A\\x01F\\x01K\\x01P\\x01U\\x01Z\\x01_\\x01d\\x01i\\x01n\\x01s\\x01x\\x01}\\x01\\x82\\x01\\x87\\x01\\x8C\\x01\\x91\\x01\\x96\\x01\\x9B\\x01\\xA0\\x01\\xA5\\x01\\xAA\\x01\\xAF\\x01\\xB4\\x01\\xB9\\x01\\xBE\\x01\\xC3\\x01\\xC8\\x01\\xCD\\x01\\xD2\\x01\\xD7\\x01\\xDC\\x01\\xE1\\x01\\xE6\\x01\\xEB\\x01\\xF0\\x01\\xF5\\x01\\xFA\\x01\\xFF\\x01\\x04\\x02\\t\\x02\\x0E\\x02\\x13\\x02\\x18\\x02\\x1D\\x02\\\"\\x02'\\x02,\\x021\\x026\\x02;\\x02@\\x02G\\x02I\\x02K\\x02M\\x02R\\x02W\\x02\\\\\\x02a\\x02f\\x02k\\x02p\\x02u\\x02z\\x02\\x7F\\x02\\x84\\x02\\x89\\x02en-150en-AGen-AIen-ATen-AUen-BBen-BEen-BMen-BSen-BWen-BZen-CCen-CHen-CKen-CMen-CXen-CYen-DEen-DGen-DKen-DMen-ERen-FIen-FJen-FKen-FMen-GBen-GDen-GGen-GHen-GIen-GMen-GYen-HKen-IEen-ILen-IMen-INen-IOen-JEen-JMen-KEen-KIen-KNen-KYen-LCen-LRen-LSen-MGen-MOen-MSen-MTen-MUen-MVen-MWen-MYen-NAen-NFen-NGen-NLen-NRen-NUen-NZen-PGen-PKen-PNen-PWen-RWen-SBen-SCen-SDen-SEen-SGen-SHen-SIen-SLen-SSen-SXen-SZen-TCen-TKen-TOen-TTen-TVen-TZen-UGen-VCen-VGen-VUen-WSen-ZAen-ZMen-ZWes-ARes-BOes-BRes-BZes-CLes-COes-CRes-CUes-DOes-ECes-GTes-HNes-MXes-NIes-PAes-PEes-PRes-PYes-SVes-USes-UYes-VEhi-Latnhtnbnnno-NOpt-AOpt-CHpt-CVpt-FRpt-GQpt-GWpt-LUpt-MOpt-MZpt-STpt-TLzh-Hant-MO\")\n             },\n             unsafe {\n-                ::zerovec::ZeroVec::from_bytes_unchecked(&[\n-                    101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8,\n-                    110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 49u8, 53u8, 48u8, 101u8, 110u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 1u8, 49u8, 53u8, 48u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8,\n-                    48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8,\n-                    48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8,\n-                    49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 49u8, 53u8, 48u8,\n-                    101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8,\n-                    110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 1u8, 49u8, 53u8, 48u8, 101u8, 110u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 1u8, 49u8, 53u8, 48u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8,\n-                    49u8, 53u8, 48u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8,\n-                    48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8,\n-                    49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8,\n-                    101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8,\n-                    110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8,\n-                    48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8,\n-                    48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8,\n-                    49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8,\n-                    101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8,\n-                    110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8,\n-                    48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8,\n-                    48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8,\n-                    49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8,\n-                    101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8,\n-                    110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 1u8, 49u8, 53u8, 48u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8,\n-                    48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8,\n-                    48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8,\n-                    49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8,\n-                    101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8,\n-                    110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 1u8, 49u8, 53u8, 48u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8,\n-                    49u8, 53u8, 48u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8,\n-                    48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8,\n-                    49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8,\n-                    101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8,\n-                    110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8,\n-                    48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8,\n-                    48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8,\n-                    49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8,\n-                    101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8,\n-                    110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 115u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 52u8, 49u8, 57u8, 101u8, 115u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 52u8, 49u8, 57u8, 101u8, 115u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 1u8, 52u8, 49u8, 57u8, 101u8, 115u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 1u8, 52u8, 49u8, 57u8, 101u8, 115u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 1u8, 52u8, 49u8, 57u8, 101u8, 115u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 1u8, 52u8, 49u8, 57u8, 101u8, 115u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    1u8, 52u8, 49u8, 57u8, 101u8, 115u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8,\n-                    52u8, 49u8, 57u8, 101u8, 115u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 52u8,\n-                    49u8, 57u8, 101u8, 115u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 52u8, 49u8,\n-                    57u8, 101u8, 115u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 52u8, 49u8, 57u8,\n-                    101u8, 115u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 52u8, 49u8, 57u8, 101u8,\n-                    115u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 52u8, 49u8, 57u8, 101u8, 115u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 52u8, 49u8, 57u8, 101u8, 115u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 52u8, 49u8, 57u8, 101u8, 115u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 1u8, 52u8, 49u8, 57u8, 101u8, 115u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 1u8, 52u8, 49u8, 57u8, 101u8, 115u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 1u8, 52u8, 49u8, 57u8, 101u8, 115u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 1u8, 52u8, 49u8, 57u8, 101u8, 115u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    1u8, 52u8, 49u8, 57u8, 101u8, 115u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8,\n-                    52u8, 49u8, 57u8, 101u8, 115u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 52u8,\n-                    49u8, 57u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 73u8, 78u8,\n-                    0u8, 102u8, 114u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 72u8, 84u8, 0u8,\n-                    110u8, 111u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 110u8,\n-                    111u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 112u8, 116u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 80u8, 84u8, 0u8, 112u8, 116u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 1u8, 80u8, 84u8, 0u8, 112u8, 116u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 1u8, 80u8, 84u8, 0u8, 112u8, 116u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8,\n-                    80u8, 84u8, 0u8, 112u8, 116u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 80u8,\n-                    84u8, 0u8, 112u8, 116u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 80u8, 84u8,\n-                    0u8, 112u8, 116u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 80u8, 84u8, 0u8,\n-                    112u8, 116u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 80u8, 84u8, 0u8, 112u8,\n-                    116u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 80u8, 84u8, 0u8, 112u8, 116u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 80u8, 84u8, 0u8, 112u8, 116u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 1u8, 80u8, 84u8, 0u8, 122u8, 104u8, 0u8, 1u8, 72u8,\n-                    97u8, 110u8, 116u8, 1u8, 72u8, 75u8, 0u8,\n-                ])\n+                :: zerovec :: ZeroVec :: from_bytes_unchecked (b\"en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01150en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01150en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01150en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01150en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01150en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01150en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01150en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01150en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01150en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001es\\0\\0\\0\\0\\0\\0\\x01419es\\0\\0\\0\\0\\0\\0\\x01419es\\0\\0\\0\\0\\0\\0\\x01419es\\0\\0\\0\\0\\0\\0\\x01419es\\0\\0\\0\\0\\0\\0\\x01419es\\0\\0\\0\\0\\0\\0\\x01419es\\0\\0\\0\\0\\0\\0\\x01419es\\0\\0\\0\\0\\0\\0\\x01419es\\0\\0\\0\\0\\0\\0\\x01419es\\0\\0\\0\\0\\0\\0\\x01419es\\0\\0\\0\\0\\0\\0\\x01419es\\0\\0\\0\\0\\0\\0\\x01419es\\0\\0\\0\\0\\0\\0\\x01419es\\0\\0\\0\\0\\0\\0\\x01419es\\0\\0\\0\\0\\0\\0\\x01419es\\0\\0\\0\\0\\0\\0\\x01419es\\0\\0\\0\\0\\0\\0\\x01419es\\0\\0\\0\\0\\0\\0\\x01419es\\0\\0\\0\\0\\0\\0\\x01419es\\0\\0\\0\\0\\0\\0\\x01419es\\0\\0\\0\\0\\0\\0\\x01419es\\0\\0\\0\\0\\0\\0\\x01419en\\0\\0\\0\\0\\0\\0\\x01IN\\0fr\\0\\0\\0\\0\\0\\0\\x01HT\\0no\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0no\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0no\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0pt\\0\\0\\0\\0\\0\\0\\x01PT\\0pt\\0\\0\\0\\0\\0\\0\\x01PT\\0pt\\0\\0\\0\\0\\0\\0\\x01PT\\0pt\\0\\0\\0\\0\\0\\0\\x01PT\\0pt\\0\\0\\0\\0\\0\\0\\x01PT\\0pt\\0\\0\\0\\0\\0\\0\\x01PT\\0pt\\0\\0\\0\\0\\0\\0\\x01PT\\0pt\\0\\0\\0\\0\\0\\0\\x01PT\\0pt\\0\\0\\0\\0\\0\\0\\x01PT\\0pt\\0\\0\\0\\0\\0\\0\\x01PT\\0pt\\0\\0\\0\\0\\0\\0\\x01PT\\0zh\\0\\x01Hant\\x01HK\\0\")\n             },\n         )\n     },"}, {"sha": "647f8f5160191bf585603c18aa4446736576c976", "filename": "compiler/rustc_baked_icu_data/src/data/fallback/supplement/co_v1/und.rs.data", "status": "modified", "additions": 6, "deletions": 20, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Ffallback%2Fsupplement%2Fco_v1%2Fund.rs.data", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Ffallback%2Fsupplement%2Fco_v1%2Fund.rs.data", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Ffallback%2Fsupplement%2Fco_v1%2Fund.rs.data?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -2,34 +2,20 @@\n     parents: unsafe {\n         #[allow(unused_unsafe)]\n         ::zerovec::ZeroMap::from_parts_unchecked(\n-            unsafe {\n-                ::zerovec::VarZeroVec::from_bytes_unchecked(&[\n-                    1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 121u8, 117u8, 101u8,\n-                ])\n-            },\n-            unsafe {\n-                ::zerovec::ZeroVec::from_bytes_unchecked(&[\n-                    122u8, 104u8, 0u8, 1u8, 72u8, 97u8, 110u8, 116u8, 0u8, 0u8, 0u8, 0u8,\n-                ])\n-            },\n+            unsafe { ::zerovec::VarZeroVec::from_bytes_unchecked(b\"\\x01\\0\\0\\0\\0\\0yue\") },\n+            unsafe { ::zerovec::ZeroVec::from_bytes_unchecked(b\"zh\\0\\x01Hant\\0\\0\\0\\0\") },\n         )\n     },\n     unicode_extension_defaults: unsafe {\n         #[allow(unused_unsafe)]\n         ::zerovec::ZeroMap2d::from_parts_unchecked(\n-            unsafe { ::zerovec::ZeroVec::from_bytes_unchecked(&[99u8, 111u8]) },\n-            unsafe { ::zerovec::ZeroVec::from_bytes_unchecked(&[2u8, 0u8, 0u8, 0u8]) },\n+            unsafe { ::zerovec::ZeroVec::from_bytes_unchecked(b\"co\") },\n+            unsafe { ::zerovec::ZeroVec::from_bytes_unchecked(b\"\\x02\\0\\0\\0\") },\n             unsafe {\n-                ::zerovec::VarZeroVec::from_bytes_unchecked(&[\n-                    2u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 122u8, 104u8, 122u8, 104u8, 45u8,\n-                    72u8, 97u8, 110u8, 116u8,\n-                ])\n+                ::zerovec::VarZeroVec::from_bytes_unchecked(b\"\\x02\\0\\0\\0\\0\\0\\x02\\0zhzh-Hant\")\n             },\n             unsafe {\n-                ::zerovec::VarZeroVec::from_bytes_unchecked(&[\n-                    2u8, 0u8, 0u8, 0u8, 0u8, 0u8, 6u8, 0u8, 112u8, 105u8, 110u8, 121u8, 105u8,\n-                    110u8, 115u8, 116u8, 114u8, 111u8, 107u8, 101u8,\n-                ])\n+                ::zerovec::VarZeroVec::from_bytes_unchecked(b\"\\x02\\0\\0\\0\\0\\0\\x06\\0pinyinstroke\")\n             },\n         )\n     },"}, {"sha": "4bf244019ff19fb5b345db6ff2a67b90d5f69808", "filename": "compiler/rustc_baked_icu_data/src/data/list/and_v1/en.rs.data", "status": "modified", "additions": 12, "deletions": 36, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fen.rs.data", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fen.rs.data", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fen.rs.data?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -1,74 +1,50 @@\n ::icu_list::provider::ListFormatterPatternsV1([\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", and \", 6u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", and \", 6u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" and \", 5u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\" and \", 5u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", & \", 4u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", & \", 4u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" & \", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\" & \", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n ])"}, {"sha": "84de7cd01a7e0b74d70f22cd1bb27d443cab5e32", "filename": "compiler/rustc_baked_icu_data/src/data/list/and_v1/es.rs.data", "status": "modified", "additions": 30, "deletions": 750, "changes": 780, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fes.rs.data", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fes.rs.data", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fes.rs.data?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -1,836 +1,116 @@\n ::icu_list::provider::ListFormatterPatternsV1([\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" y \", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\" y \", 3u8),\n         special_case: Some(::icu_list::provider::SpecialCasePattern {\n             condition: unsafe {\n                 ::icu_list::provider::SerdeDFA::from_dfa_bytes_unchecked(\n                     if cfg!(target_endian = \"little\") {\n-                        &[\n-                            114u8, 117u8, 115u8, 116u8, 45u8, 114u8, 101u8, 103u8, 101u8,\n-                            120u8, 45u8, 97u8, 117u8, 116u8, 111u8, 109u8, 97u8, 116u8, 97u8,\n-                            45u8, 100u8, 102u8, 97u8, 45u8, 115u8, 112u8, 97u8, 114u8, 115u8,\n-                            101u8, 0u8, 0u8, 255u8, 254u8, 0u8, 0u8, 2u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8,\n-                            2u8, 2u8, 3u8, 4u8, 4u8, 5u8, 6u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n-                            7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n-                            7u8, 7u8, 7u8, 7u8, 8u8, 9u8, 9u8, 9u8, 10u8, 11u8, 11u8, 12u8,\n-                            13u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n-                            14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n-                            14u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8,\n-                            15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n-                            16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n-                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n-                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n-                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 18u8,\n-                            18u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n-                            19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n-                            19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 20u8, 21u8,\n-                            21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8,\n-                            22u8, 23u8, 23u8, 24u8, 25u8, 25u8, 25u8, 26u8, 27u8, 27u8, 27u8,\n-                            27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 40u8, 1u8, 0u8,\n-                            0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 128u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 5u8, 0u8, 5u8,\n-                            5u8, 6u8, 6u8, 12u8, 12u8, 13u8, 13u8, 0u8, 0u8, 83u8, 0u8, 0u8,\n-                            0u8, 68u8, 0u8, 0u8, 0u8, 83u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 0u8, 27u8, 0u8, 0u8, 18u8, 0u8,\n-                            0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 0u8, 3u8, 0u8, 6u8, 6u8, 13u8, 13u8,\n-                            0u8, 0u8, 104u8, 0u8, 0u8, 0u8, 104u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 2u8, 2u8, 4u8, 7u8, 9u8, 9u8,\n-                            11u8, 14u8, 19u8, 19u8, 20u8, 20u8, 21u8, 21u8, 22u8, 22u8, 23u8,\n-                            23u8, 24u8, 24u8, 25u8, 25u8, 26u8, 26u8, 0u8, 0u8, 68u8, 0u8, 0u8,\n-                            0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n-                            68u8, 0u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 206u8, 0u8, 0u8, 0u8,\n-                            221u8, 0u8, 0u8, 0u8, 236u8, 0u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8,\n-                            251u8, 0u8, 0u8, 0u8, 10u8, 1u8, 0u8, 0u8, 25u8, 1u8, 0u8, 0u8,\n-                            18u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8, 68u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 17u8, 17u8, 0u8,\n-                            0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8,\n-                            17u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8,\n-                            0u8, 15u8, 16u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 2u8, 0u8, 16u8, 17u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8, 221u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 15u8, 0u8,\n-                            0u8, 221u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 4u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8,\n-                            35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 9u8,\n-                            0u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8,\n-                            0u8,\n-                        ]\n+                        b\"rust-regex-automata-dfa-sparse\\0\\0\\xFF\\xFE\\0\\0\\x02\\0\\0\\0\\0\\0\\0\\0\\x0E\\0\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\x01\\x02\\x02\\x02\\x03\\x04\\x04\\x05\\x06\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x08\\t\\t\\t\\n\\x0B\\x0B\\x0C\\r\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x12\\x12\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x14\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x16\\x17\\x17\\x18\\x19\\x19\\x19\\x1A\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B(\\x01\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\x01\\x80\\0\\0\\0\\0\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\x05\\0\\x05\\x05\\x06\\x06\\x0C\\x0C\\r\\r\\0\\0S\\0\\0\\0D\\0\\0\\0S\\0\\0\\0D\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\0\\x1B\\0\\0\\x12\\0\\0\\0\\x12\\0\\0\\0\\0\\x03\\0\\x06\\x06\\r\\r\\0\\0h\\0\\0\\0h\\0\\0\\0\\0\\0\\0\\0\\0\\x0E\\0\\0\\0\\x02\\x02\\x04\\x07\\t\\t\\x0B\\x0E\\x13\\x13\\x14\\x14\\x15\\x15\\x16\\x16\\x17\\x17\\x18\\x18\\x19\\x19\\x1A\\x1A\\0\\0D\\0\\0\\0D\\0\\0\\0D\\0\\0\\0D\\0\\0\\0D\\0\\0\\0\\xBF\\0\\0\\0\\xCE\\0\\0\\0\\xDD\\0\\0\\0\\xEC\\0\\0\\0\\xDD\\0\\0\\0\\xFB\\0\\0\\0\\n\\x01\\0\\0\\x19\\x01\\0\\0\\x12\\0\\0\\0\\0\\x02\\0\\x0F\\x11\\0\\0D\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x11\\x11\\0\\0\\xBF\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x11\\0\\0\\xBF\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x10\\0\\0\\xBF\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x10\\x11\\0\\0\\xDD\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x11\\0\\0\\xDD\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x0F\\0\\0\\xDD\\0\\0\\0\\0\\0\\0\\0\\0\\x04\\0\\0\\0\\0\\0\\0\\0#\\0\\0\\0#\\0\\0\\0#\\0\\0\\0#\\0\\0\\0#\\0\\0\\0\\t\\0\\0\\0\\x12\\0\\0\\0\\x12\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0#\\0\\0\\0#\\0\\0\\0\"\n                     } else {\n-                        &[\n-                            114u8, 117u8, 115u8, 116u8, 45u8, 114u8, 101u8, 103u8, 101u8,\n-                            120u8, 45u8, 97u8, 117u8, 116u8, 111u8, 109u8, 97u8, 116u8, 97u8,\n-                            45u8, 100u8, 102u8, 97u8, 45u8, 115u8, 112u8, 97u8, 114u8, 115u8,\n-                            101u8, 0u8, 0u8, 0u8, 0u8, 254u8, 255u8, 0u8, 0u8, 0u8, 2u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8,\n-                            2u8, 2u8, 3u8, 4u8, 4u8, 5u8, 6u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n-                            7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n-                            7u8, 7u8, 7u8, 7u8, 8u8, 9u8, 9u8, 9u8, 10u8, 11u8, 11u8, 12u8,\n-                            13u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n-                            14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n-                            14u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8,\n-                            15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n-                            16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n-                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n-                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n-                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 18u8,\n-                            18u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n-                            19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n-                            19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 20u8, 21u8,\n-                            21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8,\n-                            22u8, 23u8, 23u8, 24u8, 25u8, 25u8, 25u8, 26u8, 27u8, 27u8, 27u8,\n-                            27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 0u8, 0u8, 1u8,\n-                            40u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 128u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 5u8, 0u8, 5u8,\n-                            5u8, 6u8, 6u8, 12u8, 12u8, 13u8, 13u8, 0u8, 0u8, 83u8, 0u8, 0u8,\n-                            0u8, 68u8, 0u8, 0u8, 0u8, 83u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 0u8, 27u8, 0u8, 0u8, 18u8, 0u8,\n-                            0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 0u8, 3u8, 0u8, 6u8, 6u8, 13u8, 13u8,\n-                            0u8, 0u8, 104u8, 0u8, 0u8, 0u8, 104u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 2u8, 2u8, 4u8, 7u8, 9u8, 9u8,\n-                            11u8, 14u8, 19u8, 19u8, 20u8, 20u8, 21u8, 21u8, 22u8, 22u8, 23u8,\n-                            23u8, 24u8, 24u8, 25u8, 25u8, 26u8, 26u8, 0u8, 0u8, 68u8, 0u8, 0u8,\n-                            0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n-                            68u8, 0u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 206u8, 0u8, 0u8, 0u8,\n-                            221u8, 0u8, 0u8, 0u8, 236u8, 0u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8,\n-                            251u8, 0u8, 0u8, 0u8, 10u8, 1u8, 0u8, 0u8, 25u8, 1u8, 0u8, 0u8,\n-                            18u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8, 68u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 17u8, 17u8, 0u8,\n-                            0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8,\n-                            17u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8,\n-                            0u8, 15u8, 16u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 2u8, 0u8, 16u8, 17u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8, 221u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 15u8, 0u8,\n-                            0u8, 221u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            4u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8,\n-                            35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8,\n-                            0u8, 0u8, 9u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8,\n-                            35u8,\n-                        ]\n+                        b\"rust-regex-automata-dfa-sparse\\0\\0\\0\\0\\xFE\\xFF\\0\\0\\0\\x02\\0\\0\\0\\0\\0\\0\\0\\x0E\\0\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\x01\\x02\\x02\\x02\\x03\\x04\\x04\\x05\\x06\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x08\\t\\t\\t\\n\\x0B\\x0B\\x0C\\r\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x12\\x12\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x14\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x16\\x17\\x17\\x18\\x19\\x19\\x19\\x1A\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\0\\0\\x01(\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\x01\\x80\\0\\0\\0\\0\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\x05\\0\\x05\\x05\\x06\\x06\\x0C\\x0C\\r\\r\\0\\0S\\0\\0\\0D\\0\\0\\0S\\0\\0\\0D\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\0\\x1B\\0\\0\\x12\\0\\0\\0\\x12\\0\\0\\0\\0\\x03\\0\\x06\\x06\\r\\r\\0\\0h\\0\\0\\0h\\0\\0\\0\\0\\0\\0\\0\\0\\x0E\\0\\0\\0\\x02\\x02\\x04\\x07\\t\\t\\x0B\\x0E\\x13\\x13\\x14\\x14\\x15\\x15\\x16\\x16\\x17\\x17\\x18\\x18\\x19\\x19\\x1A\\x1A\\0\\0D\\0\\0\\0D\\0\\0\\0D\\0\\0\\0D\\0\\0\\0D\\0\\0\\0\\xBF\\0\\0\\0\\xCE\\0\\0\\0\\xDD\\0\\0\\0\\xEC\\0\\0\\0\\xDD\\0\\0\\0\\xFB\\0\\0\\0\\n\\x01\\0\\0\\x19\\x01\\0\\0\\x12\\0\\0\\0\\0\\x02\\0\\x0F\\x11\\0\\0D\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x11\\x11\\0\\0\\xBF\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x11\\0\\0\\xBF\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x10\\0\\0\\xBF\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x10\\x11\\0\\0\\xDD\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x11\\0\\0\\xDD\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x0F\\0\\0\\xDD\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\x04\\0\\0\\0\\0#\\0\\0\\0#\\0\\0\\0#\\0\\0\\0#\\0\\0\\0\\0\\0\\0#\\0\\0\\0\\t\\0\\0\\0\\x12\\0\\0\\0\\x12\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0#\\0\\0\\0#\"\n                     },\n                 )\n             },\n-            pattern: unsafe {\n-                ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n-            },\n+            pattern: ::icu_list::provider::ListJoinerPattern::from_parts(\" e \", 3u8),\n         }),\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" y \", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\" y \", 3u8),\n         special_case: Some(::icu_list::provider::SpecialCasePattern {\n             condition: unsafe {\n                 ::icu_list::provider::SerdeDFA::from_dfa_bytes_unchecked(\n                     if cfg!(target_endian = \"little\") {\n-                        &[\n-                            114u8, 117u8, 115u8, 116u8, 45u8, 114u8, 101u8, 103u8, 101u8,\n-                            120u8, 45u8, 97u8, 117u8, 116u8, 111u8, 109u8, 97u8, 116u8, 97u8,\n-                            45u8, 100u8, 102u8, 97u8, 45u8, 115u8, 112u8, 97u8, 114u8, 115u8,\n-                            101u8, 0u8, 0u8, 255u8, 254u8, 0u8, 0u8, 2u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8,\n-                            2u8, 2u8, 3u8, 4u8, 4u8, 5u8, 6u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n-                            7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n-                            7u8, 7u8, 7u8, 7u8, 8u8, 9u8, 9u8, 9u8, 10u8, 11u8, 11u8, 12u8,\n-                            13u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n-                            14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n-                            14u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8,\n-                            15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n-                            16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n-                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n-                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n-                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 18u8,\n-                            18u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n-                            19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n-                            19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 20u8, 21u8,\n-                            21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8,\n-                            22u8, 23u8, 23u8, 24u8, 25u8, 25u8, 25u8, 26u8, 27u8, 27u8, 27u8,\n-                            27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 40u8, 1u8, 0u8,\n-                            0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 128u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 5u8, 0u8, 5u8,\n-                            5u8, 6u8, 6u8, 12u8, 12u8, 13u8, 13u8, 0u8, 0u8, 83u8, 0u8, 0u8,\n-                            0u8, 68u8, 0u8, 0u8, 0u8, 83u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 0u8, 27u8, 0u8, 0u8, 18u8, 0u8,\n-                            0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 0u8, 3u8, 0u8, 6u8, 6u8, 13u8, 13u8,\n-                            0u8, 0u8, 104u8, 0u8, 0u8, 0u8, 104u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 2u8, 2u8, 4u8, 7u8, 9u8, 9u8,\n-                            11u8, 14u8, 19u8, 19u8, 20u8, 20u8, 21u8, 21u8, 22u8, 22u8, 23u8,\n-                            23u8, 24u8, 24u8, 25u8, 25u8, 26u8, 26u8, 0u8, 0u8, 68u8, 0u8, 0u8,\n-                            0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n-                            68u8, 0u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 206u8, 0u8, 0u8, 0u8,\n-                            221u8, 0u8, 0u8, 0u8, 236u8, 0u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8,\n-                            251u8, 0u8, 0u8, 0u8, 10u8, 1u8, 0u8, 0u8, 25u8, 1u8, 0u8, 0u8,\n-                            18u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8, 68u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 17u8, 17u8, 0u8,\n-                            0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8,\n-                            17u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8,\n-                            0u8, 15u8, 16u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 2u8, 0u8, 16u8, 17u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8, 221u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 15u8, 0u8,\n-                            0u8, 221u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 4u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8,\n-                            35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 9u8,\n-                            0u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8,\n-                            0u8,\n-                        ]\n+                        b\"rust-regex-automata-dfa-sparse\\0\\0\\xFF\\xFE\\0\\0\\x02\\0\\0\\0\\0\\0\\0\\0\\x0E\\0\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\x01\\x02\\x02\\x02\\x03\\x04\\x04\\x05\\x06\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x08\\t\\t\\t\\n\\x0B\\x0B\\x0C\\r\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x12\\x12\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x14\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x16\\x17\\x17\\x18\\x19\\x19\\x19\\x1A\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B(\\x01\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\x01\\x80\\0\\0\\0\\0\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\x05\\0\\x05\\x05\\x06\\x06\\x0C\\x0C\\r\\r\\0\\0S\\0\\0\\0D\\0\\0\\0S\\0\\0\\0D\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\0\\x1B\\0\\0\\x12\\0\\0\\0\\x12\\0\\0\\0\\0\\x03\\0\\x06\\x06\\r\\r\\0\\0h\\0\\0\\0h\\0\\0\\0\\0\\0\\0\\0\\0\\x0E\\0\\0\\0\\x02\\x02\\x04\\x07\\t\\t\\x0B\\x0E\\x13\\x13\\x14\\x14\\x15\\x15\\x16\\x16\\x17\\x17\\x18\\x18\\x19\\x19\\x1A\\x1A\\0\\0D\\0\\0\\0D\\0\\0\\0D\\0\\0\\0D\\0\\0\\0D\\0\\0\\0\\xBF\\0\\0\\0\\xCE\\0\\0\\0\\xDD\\0\\0\\0\\xEC\\0\\0\\0\\xDD\\0\\0\\0\\xFB\\0\\0\\0\\n\\x01\\0\\0\\x19\\x01\\0\\0\\x12\\0\\0\\0\\0\\x02\\0\\x0F\\x11\\0\\0D\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x11\\x11\\0\\0\\xBF\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x11\\0\\0\\xBF\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x10\\0\\0\\xBF\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x10\\x11\\0\\0\\xDD\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x11\\0\\0\\xDD\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x0F\\0\\0\\xDD\\0\\0\\0\\0\\0\\0\\0\\0\\x04\\0\\0\\0\\0\\0\\0\\0#\\0\\0\\0#\\0\\0\\0#\\0\\0\\0#\\0\\0\\0#\\0\\0\\0\\t\\0\\0\\0\\x12\\0\\0\\0\\x12\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0#\\0\\0\\0#\\0\\0\\0\"\n                     } else {\n-                        &[\n-                            114u8, 117u8, 115u8, 116u8, 45u8, 114u8, 101u8, 103u8, 101u8,\n-                            120u8, 45u8, 97u8, 117u8, 116u8, 111u8, 109u8, 97u8, 116u8, 97u8,\n-                            45u8, 100u8, 102u8, 97u8, 45u8, 115u8, 112u8, 97u8, 114u8, 115u8,\n-                            101u8, 0u8, 0u8, 0u8, 0u8, 254u8, 255u8, 0u8, 0u8, 0u8, 2u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8,\n-                            2u8, 2u8, 3u8, 4u8, 4u8, 5u8, 6u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n-                            7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n-                            7u8, 7u8, 7u8, 7u8, 8u8, 9u8, 9u8, 9u8, 10u8, 11u8, 11u8, 12u8,\n-                            13u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n-                            14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n-                            14u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8,\n-                            15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n-                            16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n-                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n-                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n-                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 18u8,\n-                            18u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n-                            19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n-                            19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 20u8, 21u8,\n-                            21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8,\n-                            22u8, 23u8, 23u8, 24u8, 25u8, 25u8, 25u8, 26u8, 27u8, 27u8, 27u8,\n-                            27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 0u8, 0u8, 1u8,\n-                            40u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 128u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 5u8, 0u8, 5u8,\n-                            5u8, 6u8, 6u8, 12u8, 12u8, 13u8, 13u8, 0u8, 0u8, 83u8, 0u8, 0u8,\n-                            0u8, 68u8, 0u8, 0u8, 0u8, 83u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 0u8, 27u8, 0u8, 0u8, 18u8, 0u8,\n-                            0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 0u8, 3u8, 0u8, 6u8, 6u8, 13u8, 13u8,\n-                            0u8, 0u8, 104u8, 0u8, 0u8, 0u8, 104u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 2u8, 2u8, 4u8, 7u8, 9u8, 9u8,\n-                            11u8, 14u8, 19u8, 19u8, 20u8, 20u8, 21u8, 21u8, 22u8, 22u8, 23u8,\n-                            23u8, 24u8, 24u8, 25u8, 25u8, 26u8, 26u8, 0u8, 0u8, 68u8, 0u8, 0u8,\n-                            0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n-                            68u8, 0u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 206u8, 0u8, 0u8, 0u8,\n-                            221u8, 0u8, 0u8, 0u8, 236u8, 0u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8,\n-                            251u8, 0u8, 0u8, 0u8, 10u8, 1u8, 0u8, 0u8, 25u8, 1u8, 0u8, 0u8,\n-                            18u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8, 68u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 17u8, 17u8, 0u8,\n-                            0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8,\n-                            17u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8,\n-                            0u8, 15u8, 16u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 2u8, 0u8, 16u8, 17u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8, 221u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 15u8, 0u8,\n-                            0u8, 221u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            4u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8,\n-                            35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8,\n-                            0u8, 0u8, 9u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8,\n-                            35u8,\n-                        ]\n+                        b\"rust-regex-automata-dfa-sparse\\0\\0\\0\\0\\xFE\\xFF\\0\\0\\0\\x02\\0\\0\\0\\0\\0\\0\\0\\x0E\\0\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\x01\\x02\\x02\\x02\\x03\\x04\\x04\\x05\\x06\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x08\\t\\t\\t\\n\\x0B\\x0B\\x0C\\r\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x12\\x12\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x14\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x16\\x17\\x17\\x18\\x19\\x19\\x19\\x1A\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\0\\0\\x01(\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\x01\\x80\\0\\0\\0\\0\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\x05\\0\\x05\\x05\\x06\\x06\\x0C\\x0C\\r\\r\\0\\0S\\0\\0\\0D\\0\\0\\0S\\0\\0\\0D\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\0\\x1B\\0\\0\\x12\\0\\0\\0\\x12\\0\\0\\0\\0\\x03\\0\\x06\\x06\\r\\r\\0\\0h\\0\\0\\0h\\0\\0\\0\\0\\0\\0\\0\\0\\x0E\\0\\0\\0\\x02\\x02\\x04\\x07\\t\\t\\x0B\\x0E\\x13\\x13\\x14\\x14\\x15\\x15\\x16\\x16\\x17\\x17\\x18\\x18\\x19\\x19\\x1A\\x1A\\0\\0D\\0\\0\\0D\\0\\0\\0D\\0\\0\\0D\\0\\0\\0D\\0\\0\\0\\xBF\\0\\0\\0\\xCE\\0\\0\\0\\xDD\\0\\0\\0\\xEC\\0\\0\\0\\xDD\\0\\0\\0\\xFB\\0\\0\\0\\n\\x01\\0\\0\\x19\\x01\\0\\0\\x12\\0\\0\\0\\0\\x02\\0\\x0F\\x11\\0\\0D\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x11\\x11\\0\\0\\xBF\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x11\\0\\0\\xBF\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x10\\0\\0\\xBF\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x10\\x11\\0\\0\\xDD\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x11\\0\\0\\xDD\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x0F\\0\\0\\xDD\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\x04\\0\\0\\0\\0#\\0\\0\\0#\\0\\0\\0#\\0\\0\\0#\\0\\0\\0\\0\\0\\0#\\0\\0\\0\\t\\0\\0\\0\\x12\\0\\0\\0\\x12\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0#\\0\\0\\0#\"\n                     },\n                 )\n             },\n-            pattern: unsafe {\n-                ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n-            },\n+            pattern: ::icu_list::provider::ListJoinerPattern::from_parts(\" e \", 3u8),\n         }),\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" y \", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\" y \", 3u8),\n         special_case: Some(::icu_list::provider::SpecialCasePattern {\n             condition: unsafe {\n                 ::icu_list::provider::SerdeDFA::from_dfa_bytes_unchecked(\n                     if cfg!(target_endian = \"little\") {\n-                        &[\n-                            114u8, 117u8, 115u8, 116u8, 45u8, 114u8, 101u8, 103u8, 101u8,\n-                            120u8, 45u8, 97u8, 117u8, 116u8, 111u8, 109u8, 97u8, 116u8, 97u8,\n-                            45u8, 100u8, 102u8, 97u8, 45u8, 115u8, 112u8, 97u8, 114u8, 115u8,\n-                            101u8, 0u8, 0u8, 255u8, 254u8, 0u8, 0u8, 2u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8,\n-                            2u8, 2u8, 3u8, 4u8, 4u8, 5u8, 6u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n-                            7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n-                            7u8, 7u8, 7u8, 7u8, 8u8, 9u8, 9u8, 9u8, 10u8, 11u8, 11u8, 12u8,\n-                            13u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n-                            14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n-                            14u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8,\n-                            15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n-                            16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n-                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n-                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n-                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 18u8,\n-                            18u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n-                            19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n-                            19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 20u8, 21u8,\n-                            21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8,\n-                            22u8, 23u8, 23u8, 24u8, 25u8, 25u8, 25u8, 26u8, 27u8, 27u8, 27u8,\n-                            27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 40u8, 1u8, 0u8,\n-                            0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 128u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 5u8, 0u8, 5u8,\n-                            5u8, 6u8, 6u8, 12u8, 12u8, 13u8, 13u8, 0u8, 0u8, 83u8, 0u8, 0u8,\n-                            0u8, 68u8, 0u8, 0u8, 0u8, 83u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 0u8, 27u8, 0u8, 0u8, 18u8, 0u8,\n-                            0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 0u8, 3u8, 0u8, 6u8, 6u8, 13u8, 13u8,\n-                            0u8, 0u8, 104u8, 0u8, 0u8, 0u8, 104u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 2u8, 2u8, 4u8, 7u8, 9u8, 9u8,\n-                            11u8, 14u8, 19u8, 19u8, 20u8, 20u8, 21u8, 21u8, 22u8, 22u8, 23u8,\n-                            23u8, 24u8, 24u8, 25u8, 25u8, 26u8, 26u8, 0u8, 0u8, 68u8, 0u8, 0u8,\n-                            0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n-                            68u8, 0u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 206u8, 0u8, 0u8, 0u8,\n-                            221u8, 0u8, 0u8, 0u8, 236u8, 0u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8,\n-                            251u8, 0u8, 0u8, 0u8, 10u8, 1u8, 0u8, 0u8, 25u8, 1u8, 0u8, 0u8,\n-                            18u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8, 68u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 17u8, 17u8, 0u8,\n-                            0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8,\n-                            17u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8,\n-                            0u8, 15u8, 16u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 2u8, 0u8, 16u8, 17u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8, 221u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 15u8, 0u8,\n-                            0u8, 221u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 4u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8,\n-                            35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 9u8,\n-                            0u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8,\n-                            0u8,\n-                        ]\n+                        b\"rust-regex-automata-dfa-sparse\\0\\0\\xFF\\xFE\\0\\0\\x02\\0\\0\\0\\0\\0\\0\\0\\x0E\\0\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\x01\\x02\\x02\\x02\\x03\\x04\\x04\\x05\\x06\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x08\\t\\t\\t\\n\\x0B\\x0B\\x0C\\r\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x12\\x12\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x14\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x16\\x17\\x17\\x18\\x19\\x19\\x19\\x1A\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B(\\x01\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\x01\\x80\\0\\0\\0\\0\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\x05\\0\\x05\\x05\\x06\\x06\\x0C\\x0C\\r\\r\\0\\0S\\0\\0\\0D\\0\\0\\0S\\0\\0\\0D\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\0\\x1B\\0\\0\\x12\\0\\0\\0\\x12\\0\\0\\0\\0\\x03\\0\\x06\\x06\\r\\r\\0\\0h\\0\\0\\0h\\0\\0\\0\\0\\0\\0\\0\\0\\x0E\\0\\0\\0\\x02\\x02\\x04\\x07\\t\\t\\x0B\\x0E\\x13\\x13\\x14\\x14\\x15\\x15\\x16\\x16\\x17\\x17\\x18\\x18\\x19\\x19\\x1A\\x1A\\0\\0D\\0\\0\\0D\\0\\0\\0D\\0\\0\\0D\\0\\0\\0D\\0\\0\\0\\xBF\\0\\0\\0\\xCE\\0\\0\\0\\xDD\\0\\0\\0\\xEC\\0\\0\\0\\xDD\\0\\0\\0\\xFB\\0\\0\\0\\n\\x01\\0\\0\\x19\\x01\\0\\0\\x12\\0\\0\\0\\0\\x02\\0\\x0F\\x11\\0\\0D\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x11\\x11\\0\\0\\xBF\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x11\\0\\0\\xBF\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x10\\0\\0\\xBF\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x10\\x11\\0\\0\\xDD\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x11\\0\\0\\xDD\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x0F\\0\\0\\xDD\\0\\0\\0\\0\\0\\0\\0\\0\\x04\\0\\0\\0\\0\\0\\0\\0#\\0\\0\\0#\\0\\0\\0#\\0\\0\\0#\\0\\0\\0#\\0\\0\\0\\t\\0\\0\\0\\x12\\0\\0\\0\\x12\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0#\\0\\0\\0#\\0\\0\\0\"\n                     } else {\n-                        &[\n-                            114u8, 117u8, 115u8, 116u8, 45u8, 114u8, 101u8, 103u8, 101u8,\n-                            120u8, 45u8, 97u8, 117u8, 116u8, 111u8, 109u8, 97u8, 116u8, 97u8,\n-                            45u8, 100u8, 102u8, 97u8, 45u8, 115u8, 112u8, 97u8, 114u8, 115u8,\n-                            101u8, 0u8, 0u8, 0u8, 0u8, 254u8, 255u8, 0u8, 0u8, 0u8, 2u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8,\n-                            2u8, 2u8, 3u8, 4u8, 4u8, 5u8, 6u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n-                            7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n-                            7u8, 7u8, 7u8, 7u8, 8u8, 9u8, 9u8, 9u8, 10u8, 11u8, 11u8, 12u8,\n-                            13u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n-                            14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n-                            14u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8,\n-                            15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n-                            16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n-                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n-                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n-                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 18u8,\n-                            18u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n-                            19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n-                            19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 20u8, 21u8,\n-                            21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8,\n-                            22u8, 23u8, 23u8, 24u8, 25u8, 25u8, 25u8, 26u8, 27u8, 27u8, 27u8,\n-                            27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 0u8, 0u8, 1u8,\n-                            40u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 128u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 5u8, 0u8, 5u8,\n-                            5u8, 6u8, 6u8, 12u8, 12u8, 13u8, 13u8, 0u8, 0u8, 83u8, 0u8, 0u8,\n-                            0u8, 68u8, 0u8, 0u8, 0u8, 83u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 0u8, 27u8, 0u8, 0u8, 18u8, 0u8,\n-                            0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 0u8, 3u8, 0u8, 6u8, 6u8, 13u8, 13u8,\n-                            0u8, 0u8, 104u8, 0u8, 0u8, 0u8, 104u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 2u8, 2u8, 4u8, 7u8, 9u8, 9u8,\n-                            11u8, 14u8, 19u8, 19u8, 20u8, 20u8, 21u8, 21u8, 22u8, 22u8, 23u8,\n-                            23u8, 24u8, 24u8, 25u8, 25u8, 26u8, 26u8, 0u8, 0u8, 68u8, 0u8, 0u8,\n-                            0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n-                            68u8, 0u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 206u8, 0u8, 0u8, 0u8,\n-                            221u8, 0u8, 0u8, 0u8, 236u8, 0u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8,\n-                            251u8, 0u8, 0u8, 0u8, 10u8, 1u8, 0u8, 0u8, 25u8, 1u8, 0u8, 0u8,\n-                            18u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8, 68u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 17u8, 17u8, 0u8,\n-                            0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8,\n-                            17u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8,\n-                            0u8, 15u8, 16u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 2u8, 0u8, 16u8, 17u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8, 221u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 15u8, 0u8,\n-                            0u8, 221u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            4u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8,\n-                            35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8,\n-                            0u8, 0u8, 9u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8,\n-                            35u8,\n-                        ]\n+                        b\"rust-regex-automata-dfa-sparse\\0\\0\\0\\0\\xFE\\xFF\\0\\0\\0\\x02\\0\\0\\0\\0\\0\\0\\0\\x0E\\0\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\x01\\x02\\x02\\x02\\x03\\x04\\x04\\x05\\x06\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x08\\t\\t\\t\\n\\x0B\\x0B\\x0C\\r\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x12\\x12\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x14\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x16\\x17\\x17\\x18\\x19\\x19\\x19\\x1A\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\0\\0\\x01(\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\x01\\x80\\0\\0\\0\\0\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\x05\\0\\x05\\x05\\x06\\x06\\x0C\\x0C\\r\\r\\0\\0S\\0\\0\\0D\\0\\0\\0S\\0\\0\\0D\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\0\\x1B\\0\\0\\x12\\0\\0\\0\\x12\\0\\0\\0\\0\\x03\\0\\x06\\x06\\r\\r\\0\\0h\\0\\0\\0h\\0\\0\\0\\0\\0\\0\\0\\0\\x0E\\0\\0\\0\\x02\\x02\\x04\\x07\\t\\t\\x0B\\x0E\\x13\\x13\\x14\\x14\\x15\\x15\\x16\\x16\\x17\\x17\\x18\\x18\\x19\\x19\\x1A\\x1A\\0\\0D\\0\\0\\0D\\0\\0\\0D\\0\\0\\0D\\0\\0\\0D\\0\\0\\0\\xBF\\0\\0\\0\\xCE\\0\\0\\0\\xDD\\0\\0\\0\\xEC\\0\\0\\0\\xDD\\0\\0\\0\\xFB\\0\\0\\0\\n\\x01\\0\\0\\x19\\x01\\0\\0\\x12\\0\\0\\0\\0\\x02\\0\\x0F\\x11\\0\\0D\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x11\\x11\\0\\0\\xBF\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x11\\0\\0\\xBF\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x10\\0\\0\\xBF\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x10\\x11\\0\\0\\xDD\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x11\\0\\0\\xDD\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x0F\\0\\0\\xDD\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\x04\\0\\0\\0\\0#\\0\\0\\0#\\0\\0\\0#\\0\\0\\0#\\0\\0\\0\\0\\0\\0#\\0\\0\\0\\t\\0\\0\\0\\x12\\0\\0\\0\\x12\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0#\\0\\0\\0#\"\n                     },\n                 )\n             },\n-            pattern: unsafe {\n-                ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n-            },\n+            pattern: ::icu_list::provider::ListJoinerPattern::from_parts(\" e \", 3u8),\n         }),\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" y \", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\" y \", 3u8),\n         special_case: Some(::icu_list::provider::SpecialCasePattern {\n             condition: unsafe {\n                 ::icu_list::provider::SerdeDFA::from_dfa_bytes_unchecked(\n                     if cfg!(target_endian = \"little\") {\n-                        &[\n-                            114u8, 117u8, 115u8, 116u8, 45u8, 114u8, 101u8, 103u8, 101u8,\n-                            120u8, 45u8, 97u8, 117u8, 116u8, 111u8, 109u8, 97u8, 116u8, 97u8,\n-                            45u8, 100u8, 102u8, 97u8, 45u8, 115u8, 112u8, 97u8, 114u8, 115u8,\n-                            101u8, 0u8, 0u8, 255u8, 254u8, 0u8, 0u8, 2u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8,\n-                            2u8, 2u8, 3u8, 4u8, 4u8, 5u8, 6u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n-                            7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n-                            7u8, 7u8, 7u8, 7u8, 8u8, 9u8, 9u8, 9u8, 10u8, 11u8, 11u8, 12u8,\n-                            13u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n-                            14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n-                            14u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8,\n-                            15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n-                            16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n-                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n-                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n-                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 18u8,\n-                            18u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n-                            19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n-                            19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 20u8, 21u8,\n-                            21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8,\n-                            22u8, 23u8, 23u8, 24u8, 25u8, 25u8, 25u8, 26u8, 27u8, 27u8, 27u8,\n-                            27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 40u8, 1u8, 0u8,\n-                            0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 128u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 5u8, 0u8, 5u8,\n-                            5u8, 6u8, 6u8, 12u8, 12u8, 13u8, 13u8, 0u8, 0u8, 83u8, 0u8, 0u8,\n-                            0u8, 68u8, 0u8, 0u8, 0u8, 83u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 0u8, 27u8, 0u8, 0u8, 18u8, 0u8,\n-                            0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 0u8, 3u8, 0u8, 6u8, 6u8, 13u8, 13u8,\n-                            0u8, 0u8, 104u8, 0u8, 0u8, 0u8, 104u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 2u8, 2u8, 4u8, 7u8, 9u8, 9u8,\n-                            11u8, 14u8, 19u8, 19u8, 20u8, 20u8, 21u8, 21u8, 22u8, 22u8, 23u8,\n-                            23u8, 24u8, 24u8, 25u8, 25u8, 26u8, 26u8, 0u8, 0u8, 68u8, 0u8, 0u8,\n-                            0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n-                            68u8, 0u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 206u8, 0u8, 0u8, 0u8,\n-                            221u8, 0u8, 0u8, 0u8, 236u8, 0u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8,\n-                            251u8, 0u8, 0u8, 0u8, 10u8, 1u8, 0u8, 0u8, 25u8, 1u8, 0u8, 0u8,\n-                            18u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8, 68u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 17u8, 17u8, 0u8,\n-                            0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8,\n-                            17u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8,\n-                            0u8, 15u8, 16u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 2u8, 0u8, 16u8, 17u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8, 221u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 15u8, 0u8,\n-                            0u8, 221u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 4u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8,\n-                            35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 9u8,\n-                            0u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8,\n-                            0u8,\n-                        ]\n+                        b\"rust-regex-automata-dfa-sparse\\0\\0\\xFF\\xFE\\0\\0\\x02\\0\\0\\0\\0\\0\\0\\0\\x0E\\0\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\x01\\x02\\x02\\x02\\x03\\x04\\x04\\x05\\x06\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x08\\t\\t\\t\\n\\x0B\\x0B\\x0C\\r\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x12\\x12\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x14\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x16\\x17\\x17\\x18\\x19\\x19\\x19\\x1A\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B(\\x01\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\x01\\x80\\0\\0\\0\\0\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\x05\\0\\x05\\x05\\x06\\x06\\x0C\\x0C\\r\\r\\0\\0S\\0\\0\\0D\\0\\0\\0S\\0\\0\\0D\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\0\\x1B\\0\\0\\x12\\0\\0\\0\\x12\\0\\0\\0\\0\\x03\\0\\x06\\x06\\r\\r\\0\\0h\\0\\0\\0h\\0\\0\\0\\0\\0\\0\\0\\0\\x0E\\0\\0\\0\\x02\\x02\\x04\\x07\\t\\t\\x0B\\x0E\\x13\\x13\\x14\\x14\\x15\\x15\\x16\\x16\\x17\\x17\\x18\\x18\\x19\\x19\\x1A\\x1A\\0\\0D\\0\\0\\0D\\0\\0\\0D\\0\\0\\0D\\0\\0\\0D\\0\\0\\0\\xBF\\0\\0\\0\\xCE\\0\\0\\0\\xDD\\0\\0\\0\\xEC\\0\\0\\0\\xDD\\0\\0\\0\\xFB\\0\\0\\0\\n\\x01\\0\\0\\x19\\x01\\0\\0\\x12\\0\\0\\0\\0\\x02\\0\\x0F\\x11\\0\\0D\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x11\\x11\\0\\0\\xBF\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x11\\0\\0\\xBF\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x10\\0\\0\\xBF\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x10\\x11\\0\\0\\xDD\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x11\\0\\0\\xDD\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x0F\\0\\0\\xDD\\0\\0\\0\\0\\0\\0\\0\\0\\x04\\0\\0\\0\\0\\0\\0\\0#\\0\\0\\0#\\0\\0\\0#\\0\\0\\0#\\0\\0\\0#\\0\\0\\0\\t\\0\\0\\0\\x12\\0\\0\\0\\x12\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0#\\0\\0\\0#\\0\\0\\0\"\n                     } else {\n-                        &[\n-                            114u8, 117u8, 115u8, 116u8, 45u8, 114u8, 101u8, 103u8, 101u8,\n-                            120u8, 45u8, 97u8, 117u8, 116u8, 111u8, 109u8, 97u8, 116u8, 97u8,\n-                            45u8, 100u8, 102u8, 97u8, 45u8, 115u8, 112u8, 97u8, 114u8, 115u8,\n-                            101u8, 0u8, 0u8, 0u8, 0u8, 254u8, 255u8, 0u8, 0u8, 0u8, 2u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8,\n-                            2u8, 2u8, 3u8, 4u8, 4u8, 5u8, 6u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n-                            7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n-                            7u8, 7u8, 7u8, 7u8, 8u8, 9u8, 9u8, 9u8, 10u8, 11u8, 11u8, 12u8,\n-                            13u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n-                            14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n-                            14u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8,\n-                            15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n-                            16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n-                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n-                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n-                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 18u8,\n-                            18u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n-                            19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n-                            19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 20u8, 21u8,\n-                            21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8,\n-                            22u8, 23u8, 23u8, 24u8, 25u8, 25u8, 25u8, 26u8, 27u8, 27u8, 27u8,\n-                            27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 0u8, 0u8, 1u8,\n-                            40u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 128u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 5u8, 0u8, 5u8,\n-                            5u8, 6u8, 6u8, 12u8, 12u8, 13u8, 13u8, 0u8, 0u8, 83u8, 0u8, 0u8,\n-                            0u8, 68u8, 0u8, 0u8, 0u8, 83u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 0u8, 27u8, 0u8, 0u8, 18u8, 0u8,\n-                            0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 0u8, 3u8, 0u8, 6u8, 6u8, 13u8, 13u8,\n-                            0u8, 0u8, 104u8, 0u8, 0u8, 0u8, 104u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 2u8, 2u8, 4u8, 7u8, 9u8, 9u8,\n-                            11u8, 14u8, 19u8, 19u8, 20u8, 20u8, 21u8, 21u8, 22u8, 22u8, 23u8,\n-                            23u8, 24u8, 24u8, 25u8, 25u8, 26u8, 26u8, 0u8, 0u8, 68u8, 0u8, 0u8,\n-                            0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n-                            68u8, 0u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 206u8, 0u8, 0u8, 0u8,\n-                            221u8, 0u8, 0u8, 0u8, 236u8, 0u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8,\n-                            251u8, 0u8, 0u8, 0u8, 10u8, 1u8, 0u8, 0u8, 25u8, 1u8, 0u8, 0u8,\n-                            18u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8, 68u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 17u8, 17u8, 0u8,\n-                            0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8,\n-                            17u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8,\n-                            0u8, 15u8, 16u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 2u8, 0u8, 16u8, 17u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8, 221u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 15u8, 0u8,\n-                            0u8, 221u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            4u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8,\n-                            35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8,\n-                            0u8, 0u8, 9u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8,\n-                            35u8,\n-                        ]\n+                        b\"rust-regex-automata-dfa-sparse\\0\\0\\0\\0\\xFE\\xFF\\0\\0\\0\\x02\\0\\0\\0\\0\\0\\0\\0\\x0E\\0\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\x01\\x02\\x02\\x02\\x03\\x04\\x04\\x05\\x06\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x08\\t\\t\\t\\n\\x0B\\x0B\\x0C\\r\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x12\\x12\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x14\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x16\\x17\\x17\\x18\\x19\\x19\\x19\\x1A\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\0\\0\\x01(\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\x01\\x80\\0\\0\\0\\0\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\x05\\0\\x05\\x05\\x06\\x06\\x0C\\x0C\\r\\r\\0\\0S\\0\\0\\0D\\0\\0\\0S\\0\\0\\0D\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\0\\x1B\\0\\0\\x12\\0\\0\\0\\x12\\0\\0\\0\\0\\x03\\0\\x06\\x06\\r\\r\\0\\0h\\0\\0\\0h\\0\\0\\0\\0\\0\\0\\0\\0\\x0E\\0\\0\\0\\x02\\x02\\x04\\x07\\t\\t\\x0B\\x0E\\x13\\x13\\x14\\x14\\x15\\x15\\x16\\x16\\x17\\x17\\x18\\x18\\x19\\x19\\x1A\\x1A\\0\\0D\\0\\0\\0D\\0\\0\\0D\\0\\0\\0D\\0\\0\\0D\\0\\0\\0\\xBF\\0\\0\\0\\xCE\\0\\0\\0\\xDD\\0\\0\\0\\xEC\\0\\0\\0\\xDD\\0\\0\\0\\xFB\\0\\0\\0\\n\\x01\\0\\0\\x19\\x01\\0\\0\\x12\\0\\0\\0\\0\\x02\\0\\x0F\\x11\\0\\0D\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x11\\x11\\0\\0\\xBF\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x11\\0\\0\\xBF\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x10\\0\\0\\xBF\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x10\\x11\\0\\0\\xDD\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x11\\0\\0\\xDD\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x0F\\0\\0\\xDD\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\x04\\0\\0\\0\\0#\\0\\0\\0#\\0\\0\\0#\\0\\0\\0#\\0\\0\\0\\0\\0\\0#\\0\\0\\0\\t\\0\\0\\0\\x12\\0\\0\\0\\x12\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0#\\0\\0\\0#\"\n                     },\n                 )\n             },\n-            pattern: unsafe {\n-                ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n-            },\n+            pattern: ::icu_list::provider::ListJoinerPattern::from_parts(\" e \", 3u8),\n         }),\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" y \", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\" y \", 3u8),\n         special_case: Some(::icu_list::provider::SpecialCasePattern {\n             condition: unsafe {\n                 ::icu_list::provider::SerdeDFA::from_dfa_bytes_unchecked(\n                     if cfg!(target_endian = \"little\") {\n-                        &[\n-                            114u8, 117u8, 115u8, 116u8, 45u8, 114u8, 101u8, 103u8, 101u8,\n-                            120u8, 45u8, 97u8, 117u8, 116u8, 111u8, 109u8, 97u8, 116u8, 97u8,\n-                            45u8, 100u8, 102u8, 97u8, 45u8, 115u8, 112u8, 97u8, 114u8, 115u8,\n-                            101u8, 0u8, 0u8, 255u8, 254u8, 0u8, 0u8, 2u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8,\n-                            2u8, 2u8, 3u8, 4u8, 4u8, 5u8, 6u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n-                            7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n-                            7u8, 7u8, 7u8, 7u8, 8u8, 9u8, 9u8, 9u8, 10u8, 11u8, 11u8, 12u8,\n-                            13u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n-                            14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n-                            14u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8,\n-                            15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n-                            16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n-                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n-                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n-                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 18u8,\n-                            18u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n-                            19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n-                            19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 20u8, 21u8,\n-                            21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8,\n-                            22u8, 23u8, 23u8, 24u8, 25u8, 25u8, 25u8, 26u8, 27u8, 27u8, 27u8,\n-                            27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 40u8, 1u8, 0u8,\n-                            0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 128u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 5u8, 0u8, 5u8,\n-                            5u8, 6u8, 6u8, 12u8, 12u8, 13u8, 13u8, 0u8, 0u8, 83u8, 0u8, 0u8,\n-                            0u8, 68u8, 0u8, 0u8, 0u8, 83u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 0u8, 27u8, 0u8, 0u8, 18u8, 0u8,\n-                            0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 0u8, 3u8, 0u8, 6u8, 6u8, 13u8, 13u8,\n-                            0u8, 0u8, 104u8, 0u8, 0u8, 0u8, 104u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 2u8, 2u8, 4u8, 7u8, 9u8, 9u8,\n-                            11u8, 14u8, 19u8, 19u8, 20u8, 20u8, 21u8, 21u8, 22u8, 22u8, 23u8,\n-                            23u8, 24u8, 24u8, 25u8, 25u8, 26u8, 26u8, 0u8, 0u8, 68u8, 0u8, 0u8,\n-                            0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n-                            68u8, 0u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 206u8, 0u8, 0u8, 0u8,\n-                            221u8, 0u8, 0u8, 0u8, 236u8, 0u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8,\n-                            251u8, 0u8, 0u8, 0u8, 10u8, 1u8, 0u8, 0u8, 25u8, 1u8, 0u8, 0u8,\n-                            18u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8, 68u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 17u8, 17u8, 0u8,\n-                            0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8,\n-                            17u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8,\n-                            0u8, 15u8, 16u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 2u8, 0u8, 16u8, 17u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8, 221u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 15u8, 0u8,\n-                            0u8, 221u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 4u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8,\n-                            35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 9u8,\n-                            0u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8,\n-                            0u8,\n-                        ]\n+                        b\"rust-regex-automata-dfa-sparse\\0\\0\\xFF\\xFE\\0\\0\\x02\\0\\0\\0\\0\\0\\0\\0\\x0E\\0\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\x01\\x02\\x02\\x02\\x03\\x04\\x04\\x05\\x06\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x08\\t\\t\\t\\n\\x0B\\x0B\\x0C\\r\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x12\\x12\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x14\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x16\\x17\\x17\\x18\\x19\\x19\\x19\\x1A\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B(\\x01\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\x01\\x80\\0\\0\\0\\0\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\x05\\0\\x05\\x05\\x06\\x06\\x0C\\x0C\\r\\r\\0\\0S\\0\\0\\0D\\0\\0\\0S\\0\\0\\0D\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\0\\x1B\\0\\0\\x12\\0\\0\\0\\x12\\0\\0\\0\\0\\x03\\0\\x06\\x06\\r\\r\\0\\0h\\0\\0\\0h\\0\\0\\0\\0\\0\\0\\0\\0\\x0E\\0\\0\\0\\x02\\x02\\x04\\x07\\t\\t\\x0B\\x0E\\x13\\x13\\x14\\x14\\x15\\x15\\x16\\x16\\x17\\x17\\x18\\x18\\x19\\x19\\x1A\\x1A\\0\\0D\\0\\0\\0D\\0\\0\\0D\\0\\0\\0D\\0\\0\\0D\\0\\0\\0\\xBF\\0\\0\\0\\xCE\\0\\0\\0\\xDD\\0\\0\\0\\xEC\\0\\0\\0\\xDD\\0\\0\\0\\xFB\\0\\0\\0\\n\\x01\\0\\0\\x19\\x01\\0\\0\\x12\\0\\0\\0\\0\\x02\\0\\x0F\\x11\\0\\0D\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x11\\x11\\0\\0\\xBF\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x11\\0\\0\\xBF\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x10\\0\\0\\xBF\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x10\\x11\\0\\0\\xDD\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x11\\0\\0\\xDD\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x0F\\0\\0\\xDD\\0\\0\\0\\0\\0\\0\\0\\0\\x04\\0\\0\\0\\0\\0\\0\\0#\\0\\0\\0#\\0\\0\\0#\\0\\0\\0#\\0\\0\\0#\\0\\0\\0\\t\\0\\0\\0\\x12\\0\\0\\0\\x12\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0#\\0\\0\\0#\\0\\0\\0\"\n                     } else {\n-                        &[\n-                            114u8, 117u8, 115u8, 116u8, 45u8, 114u8, 101u8, 103u8, 101u8,\n-                            120u8, 45u8, 97u8, 117u8, 116u8, 111u8, 109u8, 97u8, 116u8, 97u8,\n-                            45u8, 100u8, 102u8, 97u8, 45u8, 115u8, 112u8, 97u8, 114u8, 115u8,\n-                            101u8, 0u8, 0u8, 0u8, 0u8, 254u8, 255u8, 0u8, 0u8, 0u8, 2u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8,\n-                            2u8, 2u8, 3u8, 4u8, 4u8, 5u8, 6u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n-                            7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n-                            7u8, 7u8, 7u8, 7u8, 8u8, 9u8, 9u8, 9u8, 10u8, 11u8, 11u8, 12u8,\n-                            13u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n-                            14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n-                            14u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8,\n-                            15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n-                            16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n-                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n-                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n-                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 18u8,\n-                            18u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n-                            19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n-                            19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 20u8, 21u8,\n-                            21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8,\n-                            22u8, 23u8, 23u8, 24u8, 25u8, 25u8, 25u8, 26u8, 27u8, 27u8, 27u8,\n-                            27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 0u8, 0u8, 1u8,\n-                            40u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 128u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 5u8, 0u8, 5u8,\n-                            5u8, 6u8, 6u8, 12u8, 12u8, 13u8, 13u8, 0u8, 0u8, 83u8, 0u8, 0u8,\n-                            0u8, 68u8, 0u8, 0u8, 0u8, 83u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 0u8, 27u8, 0u8, 0u8, 18u8, 0u8,\n-                            0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 0u8, 3u8, 0u8, 6u8, 6u8, 13u8, 13u8,\n-                            0u8, 0u8, 104u8, 0u8, 0u8, 0u8, 104u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 2u8, 2u8, 4u8, 7u8, 9u8, 9u8,\n-                            11u8, 14u8, 19u8, 19u8, 20u8, 20u8, 21u8, 21u8, 22u8, 22u8, 23u8,\n-                            23u8, 24u8, 24u8, 25u8, 25u8, 26u8, 26u8, 0u8, 0u8, 68u8, 0u8, 0u8,\n-                            0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n-                            68u8, 0u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 206u8, 0u8, 0u8, 0u8,\n-                            221u8, 0u8, 0u8, 0u8, 236u8, 0u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8,\n-                            251u8, 0u8, 0u8, 0u8, 10u8, 1u8, 0u8, 0u8, 25u8, 1u8, 0u8, 0u8,\n-                            18u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8, 68u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 17u8, 17u8, 0u8,\n-                            0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8,\n-                            17u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8,\n-                            0u8, 15u8, 16u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 2u8, 0u8, 16u8, 17u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8, 221u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 15u8, 0u8,\n-                            0u8, 221u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            4u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8,\n-                            35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8,\n-                            0u8, 0u8, 9u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8,\n-                            35u8,\n-                        ]\n+                        b\"rust-regex-automata-dfa-sparse\\0\\0\\0\\0\\xFE\\xFF\\0\\0\\0\\x02\\0\\0\\0\\0\\0\\0\\0\\x0E\\0\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\x01\\x02\\x02\\x02\\x03\\x04\\x04\\x05\\x06\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x08\\t\\t\\t\\n\\x0B\\x0B\\x0C\\r\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x12\\x12\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x14\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x16\\x17\\x17\\x18\\x19\\x19\\x19\\x1A\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\0\\0\\x01(\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\x01\\x80\\0\\0\\0\\0\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\x05\\0\\x05\\x05\\x06\\x06\\x0C\\x0C\\r\\r\\0\\0S\\0\\0\\0D\\0\\0\\0S\\0\\0\\0D\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\0\\x1B\\0\\0\\x12\\0\\0\\0\\x12\\0\\0\\0\\0\\x03\\0\\x06\\x06\\r\\r\\0\\0h\\0\\0\\0h\\0\\0\\0\\0\\0\\0\\0\\0\\x0E\\0\\0\\0\\x02\\x02\\x04\\x07\\t\\t\\x0B\\x0E\\x13\\x13\\x14\\x14\\x15\\x15\\x16\\x16\\x17\\x17\\x18\\x18\\x19\\x19\\x1A\\x1A\\0\\0D\\0\\0\\0D\\0\\0\\0D\\0\\0\\0D\\0\\0\\0D\\0\\0\\0\\xBF\\0\\0\\0\\xCE\\0\\0\\0\\xDD\\0\\0\\0\\xEC\\0\\0\\0\\xDD\\0\\0\\0\\xFB\\0\\0\\0\\n\\x01\\0\\0\\x19\\x01\\0\\0\\x12\\0\\0\\0\\0\\x02\\0\\x0F\\x11\\0\\0D\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x11\\x11\\0\\0\\xBF\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x11\\0\\0\\xBF\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x10\\0\\0\\xBF\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x10\\x11\\0\\0\\xDD\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x11\\0\\0\\xDD\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x0F\\0\\0\\xDD\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\x04\\0\\0\\0\\0#\\0\\0\\0#\\0\\0\\0#\\0\\0\\0#\\0\\0\\0\\0\\0\\0#\\0\\0\\0\\t\\0\\0\\0\\x12\\0\\0\\0\\x12\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0#\\0\\0\\0#\"\n                     },\n                 )\n             },\n-            pattern: unsafe {\n-                ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n-            },\n+            pattern: ::icu_list::provider::ListJoinerPattern::from_parts(\" e \", 3u8),\n         }),\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" y \", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\" y \", 3u8),\n         special_case: Some(::icu_list::provider::SpecialCasePattern {\n             condition: unsafe {\n                 ::icu_list::provider::SerdeDFA::from_dfa_bytes_unchecked(\n                     if cfg!(target_endian = \"little\") {\n-                        &[\n-                            114u8, 117u8, 115u8, 116u8, 45u8, 114u8, 101u8, 103u8, 101u8,\n-                            120u8, 45u8, 97u8, 117u8, 116u8, 111u8, 109u8, 97u8, 116u8, 97u8,\n-                            45u8, 100u8, 102u8, 97u8, 45u8, 115u8, 112u8, 97u8, 114u8, 115u8,\n-                            101u8, 0u8, 0u8, 255u8, 254u8, 0u8, 0u8, 2u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8,\n-                            2u8, 2u8, 3u8, 4u8, 4u8, 5u8, 6u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n-                            7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n-                            7u8, 7u8, 7u8, 7u8, 8u8, 9u8, 9u8, 9u8, 10u8, 11u8, 11u8, 12u8,\n-                            13u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n-                            14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n-                            14u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8,\n-                            15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n-                            16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n-                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n-                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n-                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 18u8,\n-                            18u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n-                            19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n-                            19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 20u8, 21u8,\n-                            21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8,\n-                            22u8, 23u8, 23u8, 24u8, 25u8, 25u8, 25u8, 26u8, 27u8, 27u8, 27u8,\n-                            27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 40u8, 1u8, 0u8,\n-                            0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 128u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 5u8, 0u8, 5u8,\n-                            5u8, 6u8, 6u8, 12u8, 12u8, 13u8, 13u8, 0u8, 0u8, 83u8, 0u8, 0u8,\n-                            0u8, 68u8, 0u8, 0u8, 0u8, 83u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 0u8, 27u8, 0u8, 0u8, 18u8, 0u8,\n-                            0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 0u8, 3u8, 0u8, 6u8, 6u8, 13u8, 13u8,\n-                            0u8, 0u8, 104u8, 0u8, 0u8, 0u8, 104u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 2u8, 2u8, 4u8, 7u8, 9u8, 9u8,\n-                            11u8, 14u8, 19u8, 19u8, 20u8, 20u8, 21u8, 21u8, 22u8, 22u8, 23u8,\n-                            23u8, 24u8, 24u8, 25u8, 25u8, 26u8, 26u8, 0u8, 0u8, 68u8, 0u8, 0u8,\n-                            0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n-                            68u8, 0u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 206u8, 0u8, 0u8, 0u8,\n-                            221u8, 0u8, 0u8, 0u8, 236u8, 0u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8,\n-                            251u8, 0u8, 0u8, 0u8, 10u8, 1u8, 0u8, 0u8, 25u8, 1u8, 0u8, 0u8,\n-                            18u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8, 68u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 17u8, 17u8, 0u8,\n-                            0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8,\n-                            17u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8,\n-                            0u8, 15u8, 16u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 2u8, 0u8, 16u8, 17u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8, 221u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 15u8, 0u8,\n-                            0u8, 221u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 4u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8,\n-                            35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 9u8,\n-                            0u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8,\n-                            0u8,\n-                        ]\n+                        b\"rust-regex-automata-dfa-sparse\\0\\0\\xFF\\xFE\\0\\0\\x02\\0\\0\\0\\0\\0\\0\\0\\x0E\\0\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\x01\\x02\\x02\\x02\\x03\\x04\\x04\\x05\\x06\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x08\\t\\t\\t\\n\\x0B\\x0B\\x0C\\r\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x12\\x12\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x14\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x16\\x17\\x17\\x18\\x19\\x19\\x19\\x1A\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B(\\x01\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\x01\\x80\\0\\0\\0\\0\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\x05\\0\\x05\\x05\\x06\\x06\\x0C\\x0C\\r\\r\\0\\0S\\0\\0\\0D\\0\\0\\0S\\0\\0\\0D\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\0\\x1B\\0\\0\\x12\\0\\0\\0\\x12\\0\\0\\0\\0\\x03\\0\\x06\\x06\\r\\r\\0\\0h\\0\\0\\0h\\0\\0\\0\\0\\0\\0\\0\\0\\x0E\\0\\0\\0\\x02\\x02\\x04\\x07\\t\\t\\x0B\\x0E\\x13\\x13\\x14\\x14\\x15\\x15\\x16\\x16\\x17\\x17\\x18\\x18\\x19\\x19\\x1A\\x1A\\0\\0D\\0\\0\\0D\\0\\0\\0D\\0\\0\\0D\\0\\0\\0D\\0\\0\\0\\xBF\\0\\0\\0\\xCE\\0\\0\\0\\xDD\\0\\0\\0\\xEC\\0\\0\\0\\xDD\\0\\0\\0\\xFB\\0\\0\\0\\n\\x01\\0\\0\\x19\\x01\\0\\0\\x12\\0\\0\\0\\0\\x02\\0\\x0F\\x11\\0\\0D\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x11\\x11\\0\\0\\xBF\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x11\\0\\0\\xBF\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x10\\0\\0\\xBF\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x10\\x11\\0\\0\\xDD\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x11\\0\\0\\xDD\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x0F\\0\\0\\xDD\\0\\0\\0\\0\\0\\0\\0\\0\\x04\\0\\0\\0\\0\\0\\0\\0#\\0\\0\\0#\\0\\0\\0#\\0\\0\\0#\\0\\0\\0#\\0\\0\\0\\t\\0\\0\\0\\x12\\0\\0\\0\\x12\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0#\\0\\0\\0#\\0\\0\\0\"\n                     } else {\n-                        &[\n-                            114u8, 117u8, 115u8, 116u8, 45u8, 114u8, 101u8, 103u8, 101u8,\n-                            120u8, 45u8, 97u8, 117u8, 116u8, 111u8, 109u8, 97u8, 116u8, 97u8,\n-                            45u8, 100u8, 102u8, 97u8, 45u8, 115u8, 112u8, 97u8, 114u8, 115u8,\n-                            101u8, 0u8, 0u8, 0u8, 0u8, 254u8, 255u8, 0u8, 0u8, 0u8, 2u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8,\n-                            2u8, 2u8, 3u8, 4u8, 4u8, 5u8, 6u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n-                            7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n-                            7u8, 7u8, 7u8, 7u8, 8u8, 9u8, 9u8, 9u8, 10u8, 11u8, 11u8, 12u8,\n-                            13u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n-                            14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n-                            14u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8,\n-                            15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n-                            16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n-                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n-                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n-                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 18u8,\n-                            18u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n-                            19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n-                            19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 20u8, 21u8,\n-                            21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8,\n-                            22u8, 23u8, 23u8, 24u8, 25u8, 25u8, 25u8, 26u8, 27u8, 27u8, 27u8,\n-                            27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 0u8, 0u8, 1u8,\n-                            40u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 128u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 5u8, 0u8, 5u8,\n-                            5u8, 6u8, 6u8, 12u8, 12u8, 13u8, 13u8, 0u8, 0u8, 83u8, 0u8, 0u8,\n-                            0u8, 68u8, 0u8, 0u8, 0u8, 83u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 0u8, 27u8, 0u8, 0u8, 18u8, 0u8,\n-                            0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 0u8, 3u8, 0u8, 6u8, 6u8, 13u8, 13u8,\n-                            0u8, 0u8, 104u8, 0u8, 0u8, 0u8, 104u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 2u8, 2u8, 4u8, 7u8, 9u8, 9u8,\n-                            11u8, 14u8, 19u8, 19u8, 20u8, 20u8, 21u8, 21u8, 22u8, 22u8, 23u8,\n-                            23u8, 24u8, 24u8, 25u8, 25u8, 26u8, 26u8, 0u8, 0u8, 68u8, 0u8, 0u8,\n-                            0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n-                            68u8, 0u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 206u8, 0u8, 0u8, 0u8,\n-                            221u8, 0u8, 0u8, 0u8, 236u8, 0u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8,\n-                            251u8, 0u8, 0u8, 0u8, 10u8, 1u8, 0u8, 0u8, 25u8, 1u8, 0u8, 0u8,\n-                            18u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8, 68u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 17u8, 17u8, 0u8,\n-                            0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8,\n-                            17u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8,\n-                            0u8, 15u8, 16u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 2u8, 0u8, 16u8, 17u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8, 221u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 15u8, 0u8,\n-                            0u8, 221u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            4u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8,\n-                            35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8,\n-                            0u8, 0u8, 9u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8,\n-                            35u8,\n-                        ]\n+                        b\"rust-regex-automata-dfa-sparse\\0\\0\\0\\0\\xFE\\xFF\\0\\0\\0\\x02\\0\\0\\0\\0\\0\\0\\0\\x0E\\0\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\x01\\x02\\x02\\x02\\x03\\x04\\x04\\x05\\x06\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x08\\t\\t\\t\\n\\x0B\\x0B\\x0C\\r\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x12\\x12\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x14\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x16\\x17\\x17\\x18\\x19\\x19\\x19\\x1A\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\0\\0\\x01(\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\x01\\x80\\0\\0\\0\\0\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\x05\\0\\x05\\x05\\x06\\x06\\x0C\\x0C\\r\\r\\0\\0S\\0\\0\\0D\\0\\0\\0S\\0\\0\\0D\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\0\\x1B\\0\\0\\x12\\0\\0\\0\\x12\\0\\0\\0\\0\\x03\\0\\x06\\x06\\r\\r\\0\\0h\\0\\0\\0h\\0\\0\\0\\0\\0\\0\\0\\0\\x0E\\0\\0\\0\\x02\\x02\\x04\\x07\\t\\t\\x0B\\x0E\\x13\\x13\\x14\\x14\\x15\\x15\\x16\\x16\\x17\\x17\\x18\\x18\\x19\\x19\\x1A\\x1A\\0\\0D\\0\\0\\0D\\0\\0\\0D\\0\\0\\0D\\0\\0\\0D\\0\\0\\0\\xBF\\0\\0\\0\\xCE\\0\\0\\0\\xDD\\0\\0\\0\\xEC\\0\\0\\0\\xDD\\0\\0\\0\\xFB\\0\\0\\0\\n\\x01\\0\\0\\x19\\x01\\0\\0\\x12\\0\\0\\0\\0\\x02\\0\\x0F\\x11\\0\\0D\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x11\\x11\\0\\0\\xBF\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x11\\0\\0\\xBF\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x10\\0\\0\\xBF\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x10\\x11\\0\\0\\xDD\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x11\\0\\0\\xDD\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x0F\\0\\0\\xDD\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\x04\\0\\0\\0\\0#\\0\\0\\0#\\0\\0\\0#\\0\\0\\0#\\0\\0\\0\\0\\0\\0#\\0\\0\\0\\t\\0\\0\\0\\x12\\0\\0\\0\\x12\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0#\\0\\0\\0#\"\n                     },\n                 )\n             },\n-            pattern: unsafe {\n-                ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n-            },\n+            pattern: ::icu_list::provider::ListJoinerPattern::from_parts(\" e \", 3u8),\n         }),\n     },\n ])"}, {"sha": "79a97e50f5a8618384ac3e7889f045e96fdc6ad0", "filename": "compiler/rustc_baked_icu_data/src/data/list/and_v1/fr.rs.data", "status": "modified", "additions": 12, "deletions": 36, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Ffr.rs.data", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Ffr.rs.data", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Ffr.rs.data?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -1,74 +1,50 @@\n ::icu_list::provider::ListFormatterPatternsV1([\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" et \", 4u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\" et \", 4u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" et \", 4u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\" et \", 4u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" et \", 4u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\" et \", 4u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" et \", 4u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\" et \", 4u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n ])"}, {"sha": "b976b6cb65aaf53318e80394b1059ddd47bc5fd4", "filename": "compiler/rustc_baked_icu_data/src/data/list/and_v1/it.rs.data", "status": "modified", "additions": 12, "deletions": 36, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fit.rs.data", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fit.rs.data", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fit.rs.data?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -1,74 +1,50 @@\n ::icu_list::provider::ListFormatterPatternsV1([\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\" e \", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\" e \", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\" e \", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\" e \", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\" e \", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\" e \", 3u8),\n         special_case: None,\n     },\n ])"}, {"sha": "d76d567ebf875ec47f9b08d68948fbfbc64ccb1c", "filename": "compiler/rustc_baked_icu_data/src/data/list/and_v1/ja.rs.data", "status": "modified", "additions": 12, "deletions": 36, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fja.rs.data", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fja.rs.data", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fja.rs.data?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -1,74 +1,50 @@\n ::icu_list::provider::ListFormatterPatternsV1([\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\"\u3001\", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\"\u3001\", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\"\u3001\", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\"\u3001\", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\"\u3001\", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\"\u3001\", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\"\u3001\", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\"\u3001\", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\"\u3001\", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\"\u3001\", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\"\u3001\", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\"\u3001\", 3u8),\n         special_case: None,\n     },\n ])"}, {"sha": "3d8c89f9072fd75ee1649bb488e47f66e82bb4fd", "filename": "compiler/rustc_baked_icu_data/src/data/list/and_v1/pt.rs.data", "status": "modified", "additions": 12, "deletions": 36, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fpt.rs.data", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fpt.rs.data", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fpt.rs.data?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -1,74 +1,50 @@\n ::icu_list::provider::ListFormatterPatternsV1([\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\" e \", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\" e \", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\" e \", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\" e \", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n ])"}, {"sha": "653ce28d615add410a51221b31dec74a5f9dd452", "filename": "compiler/rustc_baked_icu_data/src/data/list/and_v1/ru.rs.data", "status": "modified", "additions": 12, "deletions": 36, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fru.rs.data", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fru.rs.data", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fru.rs.data?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -1,74 +1,50 @@\n ::icu_list::provider::ListFormatterPatternsV1([\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" \u0438 \", 4u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\" \u0438 \", 4u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" \u0438 \", 4u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\" \u0438 \", 4u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" \u0438 \", 4u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\" \u0438 \", 4u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" \u0438 \", 4u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\" \u0438 \", 4u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n ])"}, {"sha": "9fa6eb56ade201ad809ed20f3984e5d74c547066", "filename": "compiler/rustc_baked_icu_data/src/data/list/and_v1/tr.rs.data", "status": "modified", "additions": 12, "deletions": 36, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Ftr.rs.data", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Ftr.rs.data", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Ftr.rs.data?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -1,74 +1,50 @@\n ::icu_list::provider::ListFormatterPatternsV1([\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" ve \", 4u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\" ve \", 4u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" ve \", 4u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\" ve \", 4u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" ve \", 4u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\" ve \", 4u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" ve \", 4u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\" ve \", 4u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n ])"}, {"sha": "66b55c253688daada7e1cadcaa5bf3c453b68fd0", "filename": "compiler/rustc_baked_icu_data/src/data/list/and_v1/und.rs.data", "status": "modified", "additions": 12, "deletions": 36, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fund.rs.data", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fund.rs.data", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fund.rs.data?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -1,74 +1,50 @@\n ::icu_list::provider::ListFormatterPatternsV1([\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n ])"}, {"sha": "38da6ecf8152a3ae9bfa64404cb2ea9a1ab0349a", "filename": "compiler/rustc_baked_icu_data/src/data/list/and_v1/zh-Hant.rs.data", "status": "modified", "additions": 12, "deletions": 36, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fzh-Hant.rs.data", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fzh-Hant.rs.data", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fzh-Hant.rs.data?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -1,74 +1,50 @@\n ::icu_list::provider::ListFormatterPatternsV1([\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\"\u3001\", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\"\u3001\", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u548c\", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\"\u548c\", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u548c\", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\"\u548c\", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\"\u3001\", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\"\u3001\", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u548c\", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\"\u548c\", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u548c\", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\"\u548c\", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\"\u3001\", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\"\u3001\", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u548c\", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\"\u548c\", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u548c\", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\"\u548c\", 3u8),\n         special_case: None,\n     },\n ])"}, {"sha": "d4dac1c386eced9c1fc9fda4f2c1cc5637fb84f9", "filename": "compiler/rustc_baked_icu_data/src/data/list/and_v1/zh.rs.data", "status": "modified", "additions": 12, "deletions": 36, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fzh.rs.data", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fzh.rs.data", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fzh.rs.data?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -1,74 +1,50 @@\n ::icu_list::provider::ListFormatterPatternsV1([\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\"\u3001\", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\"\u3001\", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u548c\", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\"\u548c\", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u548c\", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\"\u548c\", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\"\u3001\", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\"\u3001\", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u548c\", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\"\u548c\", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u548c\", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\"\u548c\", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\"\u3001\", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\"\u3001\", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\"\u3001\", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\"\u3001\", 3u8),\n         special_case: None,\n     },\n ])"}, {"sha": "943187808b8180364264158675c7dcb33f082498", "filename": "compiler/rustc_baked_icu_data/src/data/mod.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Fmod.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -1,7 +1,10 @@\n // @generated\n+#[clippy::msrv = \"1.61\"]\n mod fallback;\n+#[clippy::msrv = \"1.61\"]\n mod list;\n-use ::icu_provider::prelude::*;\n+#[clippy::msrv = \"1.61\"]\n+use icu_provider::prelude::*;\n /// Implement [`DataProvider<M>`] on the given struct using the data\n /// hardcoded in this module. This allows the struct to be used with\n /// `icu`'s `_unstable` constructors.\n@@ -17,6 +20,7 @@ use ::icu_provider::prelude::*;\n #[allow(unused_macros)]\n macro_rules! impl_data_provider {\n     ($ provider : path) => {\n+        #[clippy::msrv = \"1.61\"]\n         impl DataProvider<::icu_list::provider::AndListV1Marker> for $provider {\n             fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_list::provider::AndListV1Marker>, DataError> {\n                 list::and_v1::lookup(&req.locale)\n@@ -26,6 +30,7 @@ macro_rules! impl_data_provider {\n                     .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_list::provider::AndListV1Marker::KEY, req))\n             }\n         }\n+        #[clippy::msrv = \"1.61\"]\n         impl DataProvider<::icu_provider_adapters::fallback::provider::CollationFallbackSupplementV1Marker> for $provider {\n             fn load(\n                 &self,\n@@ -41,6 +46,7 @@ macro_rules! impl_data_provider {\n                     })\n             }\n         }\n+        #[clippy::msrv = \"1.61\"]\n         impl DataProvider<::icu_provider_adapters::fallback::provider::LocaleFallbackLikelySubtagsV1Marker> for $provider {\n             fn load(\n                 &self,\n@@ -56,6 +62,7 @@ macro_rules! impl_data_provider {\n                     })\n             }\n         }\n+        #[clippy::msrv = \"1.61\"]\n         impl DataProvider<::icu_provider_adapters::fallback::provider::LocaleFallbackParentsV1Marker> for $provider {\n             fn load(\n                 &self,\n@@ -87,6 +94,7 @@ macro_rules! impl_data_provider {\n #[allow(unused_macros)]\n macro_rules! impl_any_provider {\n     ($ provider : path) => {\n+        #[clippy::msrv = \"1.61\"]\n         impl AnyProvider for $provider {\n             fn load_any(&self, key: DataKey, req: DataRequest) -> Result<AnyResponse, DataError> {\n                 const ANDLISTV1MARKER: ::icu_provider::DataKeyHash = ::icu_list::provider::AndListV1Marker::KEY.hashed();\n@@ -109,5 +117,6 @@ macro_rules! impl_any_provider {\n         }\n     };\n }\n+#[clippy::msrv = \"1.61\"]\n pub struct BakedDataProvider;\n impl_data_provider!(BakedDataProvider);"}, {"sha": "250aa79f8d6098895e0d8d3db6c5a786f7990174", "filename": "compiler/rustc_codegen_gcc/src/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_codegen_gcc%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_codegen_gcc%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fasm.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -501,7 +501,7 @@ impl<'a, 'gcc, 'tcx> AsmBuilderMethods<'tcx> for Builder<'a, 'gcc, 'tcx> {\n         if options.contains(InlineAsmOptions::NORETURN) {\n             let builtin_unreachable = self.context.get_builtin_function(\"__builtin_unreachable\");\n             let builtin_unreachable: RValue<'gcc> = unsafe { std::mem::transmute(builtin_unreachable) };\n-            self.call(self.type_void(), None, builtin_unreachable, &[], None);\n+            self.call(self.type_void(), None, None, builtin_unreachable, &[], None);\n         }\n \n         // Write results to outputs."}, {"sha": "a66ddb6a09f2b8a4d76264d2d1d55fb5c1eb56e3", "filename": "compiler/rustc_codegen_gcc/src/builder.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_codegen_gcc%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_codegen_gcc%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fbuilder.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -35,6 +35,7 @@ use rustc_codegen_ssa::traits::{\n };\n use rustc_data_structures::fx::FxHashSet;\n use rustc_middle::bug;\n+use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrs;\n use rustc_middle::ty::{ParamEnv, Ty, TyCtxt};\n use rustc_middle::ty::layout::{FnAbiError, FnAbiOfHelpers, FnAbiRequest, HasParamEnv, HasTyCtxt, LayoutError, LayoutOfHelpers, TyAndLayout};\n use rustc_span::Span;\n@@ -455,12 +456,12 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n     }\n \n     #[cfg(feature=\"master\")]\n-    fn invoke(&mut self, typ: Type<'gcc>, _fn_abi: Option<&FnAbi<'tcx, Ty<'tcx>>>, func: RValue<'gcc>, args: &[RValue<'gcc>], then: Block<'gcc>, catch: Block<'gcc>, _funclet: Option<&Funclet>) -> RValue<'gcc> {\n+    fn invoke(&mut self, typ: Type<'gcc>, fn_attrs: Option<&CodegenFnAttrs>, _fn_abi: Option<&FnAbi<'tcx, Ty<'tcx>>>, func: RValue<'gcc>, args: &[RValue<'gcc>], then: Block<'gcc>, catch: Block<'gcc>, _funclet: Option<&Funclet>) -> RValue<'gcc> {\n         let try_block = self.current_func().new_block(\"try\");\n \n         let current_block = self.block.clone();\n         self.block = try_block;\n-        let call = self.call(typ, None, func, args, None); // TODO(antoyo): use funclet here?\n+        let call = self.call(typ, fn_attrs, None, func, args, None); // TODO(antoyo): use funclet here?\n         self.block = current_block;\n \n         let return_value = self.current_func()\n@@ -483,8 +484,8 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n     }\n \n     #[cfg(not(feature=\"master\"))]\n-    fn invoke(&mut self, typ: Type<'gcc>, fn_abi: Option<&FnAbi<'tcx, Ty<'tcx>>>, func: RValue<'gcc>, args: &[RValue<'gcc>], then: Block<'gcc>, catch: Block<'gcc>, _funclet: Option<&Funclet>) -> RValue<'gcc> {\n-        let call_site = self.call(typ, None, func, args, None);\n+    fn invoke(&mut self, typ: Type<'gcc>, fn_attrs: &CodegenFnAttrs, fn_abi: Option<&FnAbi<'tcx, Ty<'tcx>>>, func: RValue<'gcc>, args: &[RValue<'gcc>], then: Block<'gcc>, catch: Block<'gcc>, _funclet: Option<&Funclet>) -> RValue<'gcc> {\n+        let call_site = self.call(typ, fn_attrs, None, func, args, None);\n         let condition = self.context.new_rvalue_from_int(self.bool_type, 1);\n         self.llbb().end_with_conditional(None, condition, then, catch);\n         if let Some(_fn_abi) = fn_abi {\n@@ -1351,6 +1352,7 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n     fn call(\n         &mut self,\n         _typ: Type<'gcc>,\n+        _fn_attrs: Option<&CodegenFnAttrs>,\n         fn_abi: Option<&FnAbi<'tcx, Ty<'tcx>>>,\n         func: RValue<'gcc>,\n         args: &[RValue<'gcc>],"}, {"sha": "60176874747263d06c0d7e3582811eec751ca72c", "filename": "compiler/rustc_codegen_gcc/src/intrinsic/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_codegen_gcc%2Fsrc%2Fintrinsic%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_codegen_gcc%2Fsrc%2Fintrinsic%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fintrinsic%2Fmod.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -113,7 +113,7 @@ impl<'a, 'gcc, 'tcx> IntrinsicCallMethods<'tcx> for Builder<'a, 'gcc, 'tcx> {\n                 _ if simple.is_some() => {\n                     // FIXME(antoyo): remove this cast when the API supports function.\n                     let func = unsafe { std::mem::transmute(simple.expect(\"simple\")) };\n-                    self.call(self.type_void(), None, func, &args.iter().map(|arg| arg.immediate()).collect::<Vec<_>>(), None)\n+                    self.call(self.type_void(), None, None, func, &args.iter().map(|arg| arg.immediate()).collect::<Vec<_>>(), None)\n                 },\n                 sym::likely => {\n                     self.expect(args[0].immediate(), true)\n@@ -326,7 +326,7 @@ impl<'a, 'gcc, 'tcx> IntrinsicCallMethods<'tcx> for Builder<'a, 'gcc, 'tcx> {\n                     let masked = self.and(addr, mask);\n                     self.bitcast(masked, void_ptr_type)\n                 },\n-                \n+\n                 _ if name_str.starts_with(\"simd_\") => {\n                     match generic_simd_intrinsic(self, name, callee_ty, args, ret_ty, llret_ty, span) {\n                         Ok(llval) => llval,\n@@ -354,7 +354,7 @@ impl<'a, 'gcc, 'tcx> IntrinsicCallMethods<'tcx> for Builder<'a, 'gcc, 'tcx> {\n     fn abort(&mut self) {\n         let func = self.context.get_builtin_function(\"abort\");\n         let func: RValue<'gcc> = unsafe { std::mem::transmute(func) };\n-        self.call(self.type_void(), None, func, &[], None);\n+        self.call(self.type_void(), None, None, func, &[], None);\n     }\n \n     fn assume(&mut self, value: Self::Value) {\n@@ -1135,7 +1135,7 @@ impl<'a, 'gcc, 'tcx> Builder<'a, 'gcc, 'tcx> {\n \n fn try_intrinsic<'a, 'b, 'gcc, 'tcx>(bx: &'b mut Builder<'a, 'gcc, 'tcx>, try_func: RValue<'gcc>, data: RValue<'gcc>, _catch_func: RValue<'gcc>, dest: RValue<'gcc>) {\n     if bx.sess().panic_strategy() == PanicStrategy::Abort {\n-        bx.call(bx.type_void(), None, try_func, &[data], None);\n+        bx.call(bx.type_void(), None, None, try_func, &[data], None);\n         // Return 0 unconditionally from the intrinsic call;\n         // we can never unwind.\n         let ret_align = bx.tcx.data_layout.i32_align.abi;\n@@ -1204,21 +1204,21 @@ fn codegen_gnu_try<'gcc>(bx: &mut Builder<'_, 'gcc, '_>, try_func: RValue<'gcc>,\n         let zero = bx.cx.context.new_rvalue_zero(bx.int_type);\n         let ptr = bx.cx.context.new_call(None, eh_pointer_builtin, &[zero]);\n         let catch_ty = bx.type_func(&[bx.type_i8p(), bx.type_i8p()], bx.type_void());\n-        bx.call(catch_ty, None, catch_func, &[data, ptr], None);\n+        bx.call(catch_ty, None, None, catch_func, &[data, ptr], None);\n         bx.ret(bx.const_i32(1));\n \n         // NOTE: the blocks must be filled before adding the try/catch, otherwise gcc will not\n         // generate a try/catch.\n         // FIXME(antoyo): add a check in the libgccjit API to prevent this.\n         bx.switch_to_block(current_block);\n-        bx.invoke(try_func_ty, None, try_func, &[data], then, catch, None);\n+        bx.invoke(try_func_ty, None, None, try_func, &[data], then, catch, None);\n     });\n \n     let func = unsafe { std::mem::transmute(func) };\n \n     // Note that no invoke is used here because by definition this function\n     // can't panic (that's what it's catching).\n-    let ret = bx.call(llty, None, func, &[try_func, data, catch_func], None);\n+    let ret = bx.call(llty, None, None, func, &[try_func, data, catch_func], None);\n     let i32_align = bx.tcx().data_layout.i32_align.abi;\n     bx.store(ret, dest, i32_align);\n }"}, {"sha": "521b64ad34d15845a49aba5a167f9eb1330e8767", "filename": "compiler/rustc_codegen_gcc/src/type_.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_codegen_gcc%2Fsrc%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_codegen_gcc%2Fsrc%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Ftype_.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -280,16 +280,4 @@ pub fn struct_fields<'gcc, 'tcx>(cx: &CodegenCx<'gcc, 'tcx>, layout: TyAndLayout\n }\n \n impl<'gcc, 'tcx> TypeMembershipMethods<'tcx> for CodegenCx<'gcc, 'tcx> {\n-    fn set_type_metadata(&self, _function: RValue<'gcc>, _typeid: String) {\n-        // Unsupported.\n-    }\n-\n-    fn typeid_metadata(&self, _typeid: String) -> RValue<'gcc> {\n-        // Unsupported.\n-        self.context.new_rvalue_from_int(self.int_type, 0)\n-    }\n-\n-    fn set_kcfi_type_metadata(&self, _function: RValue<'gcc>, _kcfi_typeid: u32) {\n-        // Unsupported.\n-    }\n }"}, {"sha": "f9af103c9ad834ef07f495a878be27cd6949cf81", "filename": "compiler/rustc_codegen_llvm/src/asm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -443,9 +443,9 @@ pub(crate) fn inline_asm_call<'ll>(\n             );\n \n             let call = if let Some((dest, catch, funclet)) = dest_catch_funclet {\n-                bx.invoke(fty, None, v, inputs, dest, catch, funclet)\n+                bx.invoke(fty, None, None, v, inputs, dest, catch, funclet)\n             } else {\n-                bx.call(fty, None, v, inputs, None)\n+                bx.call(fty, None, None, v, inputs, None)\n             };\n \n             // Store mark in a metadata node so we can map LLVM errors"}, {"sha": "2fd6db8cbfeab7fc24ce00379c76fc786ac16194", "filename": "compiler/rustc_codegen_llvm/src/builder.rs", "status": "modified", "additions": 88, "deletions": 30, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -15,14 +15,15 @@ use rustc_codegen_ssa::traits::*;\n use rustc_codegen_ssa::MemFlags;\n use rustc_data_structures::small_c_str::SmallCStr;\n use rustc_hir::def_id::DefId;\n+use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrs;\n use rustc_middle::ty::layout::{\n     FnAbiError, FnAbiOfHelpers, FnAbiRequest, LayoutError, LayoutOfHelpers, TyAndLayout,\n };\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_span::Span;\n-use rustc_symbol_mangling::typeid::kcfi_typeid_for_fnabi;\n+use rustc_symbol_mangling::typeid::{kcfi_typeid_for_fnabi, typeid_for_fnabi, TypeIdOptions};\n use rustc_target::abi::{self, call::FnAbi, Align, Size, WrappingRange};\n-use rustc_target::spec::{HasTargetSpec, Target};\n+use rustc_target::spec::{HasTargetSpec, SanitizerSet, Target};\n use std::borrow::Cow;\n use std::ffi::CStr;\n use std::iter;\n@@ -216,6 +217,7 @@ impl<'a, 'll, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n     fn invoke(\n         &mut self,\n         llty: &'ll Type,\n+        fn_attrs: Option<&CodegenFnAttrs>,\n         fn_abi: Option<&FnAbi<'tcx, Ty<'tcx>>>,\n         llfn: &'ll Value,\n         args: &[&'ll Value],\n@@ -230,19 +232,13 @@ impl<'a, 'll, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         let funclet_bundle = funclet_bundle.as_ref().map(|b| &*b.raw);\n         let mut bundles = vec![funclet_bundle];\n \n-        // Set KCFI operand bundle\n-        let is_indirect_call = unsafe { llvm::LLVMIsAFunction(llfn).is_none() };\n-        let kcfi_bundle =\n-            if self.tcx.sess.is_sanitizer_kcfi_enabled() && let Some(fn_abi) = fn_abi && is_indirect_call {\n-                let kcfi_typeid = kcfi_typeid_for_fnabi(self.tcx, fn_abi);\n-                Some(llvm::OperandBundleDef::new(\"kcfi\", &[self.const_u32(kcfi_typeid)]))\n-            } else {\n-                None\n-            };\n-        if kcfi_bundle.is_some() {\n-            let kcfi_bundle = kcfi_bundle.as_ref().map(|b| &*b.raw);\n-            bundles.push(kcfi_bundle);\n-        }\n+        // Emit CFI pointer type membership test\n+        self.cfi_type_test(fn_attrs, fn_abi, llfn);\n+\n+        // Emit KCFI operand bundle\n+        let kcfi_bundle = self.kcfi_operand_bundle(fn_attrs, fn_abi, llfn);\n+        let kcfi_bundle = kcfi_bundle.as_ref().map(|b| &*b.raw);\n+        bundles.push(kcfi_bundle);\n \n         bundles.retain(|bundle| bundle.is_some());\n         let invoke = unsafe {\n@@ -1183,6 +1179,7 @@ impl<'a, 'll, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n     fn call(\n         &mut self,\n         llty: &'ll Type,\n+        fn_attrs: Option<&CodegenFnAttrs>,\n         fn_abi: Option<&FnAbi<'tcx, Ty<'tcx>>>,\n         llfn: &'ll Value,\n         args: &[&'ll Value],\n@@ -1195,19 +1192,13 @@ impl<'a, 'll, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         let funclet_bundle = funclet_bundle.as_ref().map(|b| &*b.raw);\n         let mut bundles = vec![funclet_bundle];\n \n-        // Set KCFI operand bundle\n-        let is_indirect_call = unsafe { llvm::LLVMIsAFunction(llfn).is_none() };\n-        let kcfi_bundle =\n-            if let Some(fn_abi) = fn_abi && self.tcx.sess.is_sanitizer_kcfi_enabled() && is_indirect_call {\n-                let kcfi_typeid = kcfi_typeid_for_fnabi(self.tcx, fn_abi);\n-                Some(llvm::OperandBundleDef::new(\"kcfi\", &[self.const_u32(kcfi_typeid)]))\n-            } else {\n-                None\n-            };\n-        if kcfi_bundle.is_some() {\n-            let kcfi_bundle = kcfi_bundle.as_ref().map(|b| &*b.raw);\n-            bundles.push(kcfi_bundle);\n-        }\n+        // Emit CFI pointer type membership test\n+        self.cfi_type_test(fn_attrs, fn_abi, llfn);\n+\n+        // Emit KCFI operand bundle\n+        let kcfi_bundle = self.kcfi_operand_bundle(fn_attrs, fn_abi, llfn);\n+        let kcfi_bundle = kcfi_bundle.as_ref().map(|b| &*b.raw);\n+        bundles.push(kcfi_bundle);\n \n         bundles.retain(|bundle| bundle.is_some());\n         let call = unsafe {\n@@ -1456,7 +1447,7 @@ impl<'a, 'll, 'tcx> Builder<'a, 'll, 'tcx> {\n \n     pub(crate) fn call_intrinsic(&mut self, intrinsic: &str, args: &[&'ll Value]) -> &'ll Value {\n         let (ty, f) = self.cx.get_intrinsic(intrinsic);\n-        self.call(ty, None, f, args, None)\n+        self.call(ty, None, None, f, args, None)\n     }\n \n     fn call_lifetime_intrinsic(&mut self, intrinsic: &str, ptr: &'ll Value, size: Size) {\n@@ -1518,7 +1509,7 @@ impl<'a, 'll, 'tcx> Builder<'a, 'll, 'tcx> {\n             format!(\"llvm.{}.sat.i{}.f{}\", instr, int_width, float_width)\n         };\n         let f = self.declare_cfn(&name, llvm::UnnamedAddr::No, self.type_func(&[src_ty], dest_ty));\n-        self.call(self.type_func(&[src_ty], dest_ty), None, f, &[val], None)\n+        self.call(self.type_func(&[src_ty], dest_ty), None, None, f, &[val], None)\n     }\n \n     pub(crate) fn landing_pad(\n@@ -1535,4 +1526,71 @@ impl<'a, 'll, 'tcx> Builder<'a, 'll, 'tcx> {\n             llvm::LLVMBuildLandingPad(self.llbuilder, ty, None, num_clauses as c_uint, UNNAMED)\n         }\n     }\n+\n+    // Emits CFI pointer type membership tests.\n+    fn cfi_type_test(\n+        &mut self,\n+        fn_attrs: Option<&CodegenFnAttrs>,\n+        fn_abi: Option<&FnAbi<'tcx, Ty<'tcx>>>,\n+        llfn: &'ll Value,\n+    ) {\n+        let is_indirect_call = unsafe { llvm::LLVMIsAFunction(llfn).is_none() };\n+        if is_indirect_call && fn_abi.is_some() && self.tcx.sess.is_sanitizer_cfi_enabled() {\n+            if fn_attrs.is_some() && fn_attrs.unwrap().no_sanitize.contains(SanitizerSet::CFI) {\n+                return;\n+            }\n+\n+            let mut options = TypeIdOptions::empty();\n+            if self.tcx.sess.is_sanitizer_cfi_generalize_pointers_enabled() {\n+                options.insert(TypeIdOptions::GENERALIZE_POINTERS);\n+            }\n+            if self.tcx.sess.is_sanitizer_cfi_normalize_integers_enabled() {\n+                options.insert(TypeIdOptions::NORMALIZE_INTEGERS);\n+            }\n+\n+            let typeid = typeid_for_fnabi(self.tcx, fn_abi.unwrap(), options);\n+            let typeid_metadata = self.cx.typeid_metadata(typeid).unwrap();\n+\n+            // Test whether the function pointer is associated with the type identifier.\n+            let cond = self.type_test(llfn, typeid_metadata);\n+            let bb_pass = self.append_sibling_block(\"type_test.pass\");\n+            let bb_fail = self.append_sibling_block(\"type_test.fail\");\n+            self.cond_br(cond, bb_pass, bb_fail);\n+\n+            self.switch_to_block(bb_fail);\n+            self.abort();\n+            self.unreachable();\n+\n+            self.switch_to_block(bb_pass);\n+        }\n+    }\n+\n+    // Emits KCFI operand bundles.\n+    fn kcfi_operand_bundle(\n+        &mut self,\n+        fn_attrs: Option<&CodegenFnAttrs>,\n+        fn_abi: Option<&FnAbi<'tcx, Ty<'tcx>>>,\n+        llfn: &'ll Value,\n+    ) -> Option<llvm::OperandBundleDef<'ll>> {\n+        let is_indirect_call = unsafe { llvm::LLVMIsAFunction(llfn).is_none() };\n+        let kcfi_bundle = if is_indirect_call && self.tcx.sess.is_sanitizer_kcfi_enabled() {\n+            if fn_attrs.is_some() && fn_attrs.unwrap().no_sanitize.contains(SanitizerSet::KCFI) {\n+                return None;\n+            }\n+\n+            let mut options = TypeIdOptions::empty();\n+            if self.tcx.sess.is_sanitizer_cfi_generalize_pointers_enabled() {\n+                options.insert(TypeIdOptions::GENERALIZE_POINTERS);\n+            }\n+            if self.tcx.sess.is_sanitizer_cfi_normalize_integers_enabled() {\n+                options.insert(TypeIdOptions::NORMALIZE_INTEGERS);\n+            }\n+\n+            let kcfi_typeid = kcfi_typeid_for_fnabi(self.tcx, fn_abi.unwrap(), options);\n+            Some(llvm::OperandBundleDef::new(\"kcfi\", &[self.const_u32(kcfi_typeid)]))\n+        } else {\n+            None\n+        };\n+        kcfi_bundle\n+    }\n }"}, {"sha": "83101a85435a018609580559bedeaf768356dab7", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -228,18 +228,29 @@ pub unsafe fn create_module<'ll>(\n         llvm::LLVMRustAddModuleFlag(llmod, llvm::LLVMModFlagBehavior::Warning, avoid_plt, 1);\n     }\n \n-    if sess.is_sanitizer_cfi_enabled() {\n-        // FIXME(rcvalle): Add support for non canonical jump tables.\n+    // Enable canonical jump tables if CFI is enabled. (See https://reviews.llvm.org/D65629.)\n+    if sess.is_sanitizer_cfi_canonical_jump_tables_enabled() && sess.is_sanitizer_cfi_enabled() {\n         let canonical_jump_tables = \"CFI Canonical Jump Tables\\0\".as_ptr().cast();\n-        // FIXME(rcvalle): Add it with Override behavior flag.\n         llvm::LLVMRustAddModuleFlag(\n             llmod,\n-            llvm::LLVMModFlagBehavior::Warning,\n+            llvm::LLVMModFlagBehavior::Override,\n             canonical_jump_tables,\n             1,\n         );\n     }\n \n+    // Enable LTO unit splitting if specified or if CFI is enabled. (See https://reviews.llvm.org/D53891.)\n+    if sess.is_split_lto_unit_enabled() || sess.is_sanitizer_cfi_enabled() {\n+        let enable_split_lto_unit = \"EnableSplitLTOUnit\\0\".as_ptr().cast();\n+        llvm::LLVMRustAddModuleFlag(\n+            llmod,\n+            llvm::LLVMModFlagBehavior::Override,\n+            enable_split_lto_unit,\n+            1,\n+        );\n+    }\n+\n+    // Add \"kcfi\" module flag if KCFI is enabled. (See https://reviews.llvm.org/D119296.)\n     if sess.is_sanitizer_kcfi_enabled() {\n         let kcfi = \"kcfi\\0\".as_ptr().cast();\n         llvm::LLVMRustAddModuleFlag(llmod, llvm::LLVMModFlagBehavior::Override, kcfi, 1);"}, {"sha": "cc2a5d158be824f2cb33e4df48b66a8572d34a2b", "filename": "compiler/rustc_codegen_llvm/src/declare.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdeclare.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -20,7 +20,7 @@ use crate::type_::Type;\n use crate::value::Value;\n use rustc_codegen_ssa::traits::TypeMembershipMethods;\n use rustc_middle::ty::Ty;\n-use rustc_symbol_mangling::typeid::{kcfi_typeid_for_fnabi, typeid_for_fnabi};\n+use rustc_symbol_mangling::typeid::{kcfi_typeid_for_fnabi, typeid_for_fnabi, TypeIdOptions};\n use smallvec::SmallVec;\n \n /// Declare a function.\n@@ -132,12 +132,31 @@ impl<'ll, 'tcx> CodegenCx<'ll, 'tcx> {\n         fn_abi.apply_attrs_llfn(self, llfn);\n \n         if self.tcx.sess.is_sanitizer_cfi_enabled() {\n-            let typeid = typeid_for_fnabi(self.tcx, fn_abi);\n+            let typeid = typeid_for_fnabi(self.tcx, fn_abi, TypeIdOptions::empty());\n             self.set_type_metadata(llfn, typeid);\n+            let typeid = typeid_for_fnabi(self.tcx, fn_abi, TypeIdOptions::GENERALIZE_POINTERS);\n+            self.add_type_metadata(llfn, typeid);\n+            let typeid = typeid_for_fnabi(self.tcx, fn_abi, TypeIdOptions::NORMALIZE_INTEGERS);\n+            self.add_type_metadata(llfn, typeid);\n+            let typeid = typeid_for_fnabi(\n+                self.tcx,\n+                fn_abi,\n+                TypeIdOptions::GENERALIZE_POINTERS | TypeIdOptions::NORMALIZE_INTEGERS,\n+            );\n+            self.add_type_metadata(llfn, typeid);\n         }\n \n         if self.tcx.sess.is_sanitizer_kcfi_enabled() {\n-            let kcfi_typeid = kcfi_typeid_for_fnabi(self.tcx, fn_abi);\n+            // LLVM KCFI does not support multiple !kcfi_type attachments\n+            let mut options = TypeIdOptions::empty();\n+            if self.tcx.sess.is_sanitizer_cfi_generalize_pointers_enabled() {\n+                options.insert(TypeIdOptions::GENERALIZE_POINTERS);\n+            }\n+            if self.tcx.sess.is_sanitizer_cfi_normalize_integers_enabled() {\n+                options.insert(TypeIdOptions::NORMALIZE_INTEGERS);\n+            }\n+\n+            let kcfi_typeid = kcfi_typeid_for_fnabi(self.tcx, fn_abi, options);\n             self.set_kcfi_type_metadata(llfn, kcfi_typeid);\n         }\n "}, {"sha": "00d1796f210bb4d2ddbda845bf65962e89d95de8", "filename": "compiler/rustc_codegen_llvm/src/intrinsic.rs", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -110,6 +110,7 @@ impl<'ll, 'tcx> IntrinsicCallMethods<'tcx> for Builder<'_, 'll, 'tcx> {\n                 self.call(\n                     simple_ty,\n                     None,\n+                    None,\n                     simple_fn,\n                     &args.iter().map(|arg| arg.immediate()).collect::<Vec<_>>(),\n                     None,\n@@ -444,7 +445,7 @@ fn try_intrinsic<'ll>(\n ) {\n     if bx.sess().panic_strategy() == PanicStrategy::Abort {\n         let try_func_ty = bx.type_func(&[bx.type_i8p()], bx.type_void());\n-        bx.call(try_func_ty, None, try_func, &[data], None);\n+        bx.call(try_func_ty, None, None, try_func, &[data], None);\n         // Return 0 unconditionally from the intrinsic call;\n         // we can never unwind.\n         let ret_align = bx.tcx().data_layout.i32_align.abi;\n@@ -543,7 +544,7 @@ fn codegen_msvc_try<'ll>(\n         let ptr_align = bx.tcx().data_layout.pointer_align.abi;\n         let slot = bx.alloca(bx.type_i8p(), ptr_align);\n         let try_func_ty = bx.type_func(&[bx.type_i8p()], bx.type_void());\n-        bx.invoke(try_func_ty, None, try_func, &[data], normal, catchswitch, None);\n+        bx.invoke(try_func_ty, None, None, try_func, &[data], normal, catchswitch, None);\n \n         bx.switch_to_block(normal);\n         bx.ret(bx.const_i32(0));\n@@ -587,15 +588,15 @@ fn codegen_msvc_try<'ll>(\n         let funclet = bx.catch_pad(cs, &[tydesc, flags, slot]);\n         let ptr = bx.load(bx.type_i8p(), slot, ptr_align);\n         let catch_ty = bx.type_func(&[bx.type_i8p(), bx.type_i8p()], bx.type_void());\n-        bx.call(catch_ty, None, catch_func, &[data, ptr], Some(&funclet));\n+        bx.call(catch_ty, None, None, catch_func, &[data, ptr], Some(&funclet));\n         bx.catch_ret(&funclet, caught);\n \n         // The flag value of 64 indicates a \"catch-all\".\n         bx.switch_to_block(catchpad_foreign);\n         let flags = bx.const_i32(64);\n         let null = bx.const_null(bx.type_i8p());\n         let funclet = bx.catch_pad(cs, &[null, flags, null]);\n-        bx.call(catch_ty, None, catch_func, &[data, null], Some(&funclet));\n+        bx.call(catch_ty, None, None, catch_func, &[data, null], Some(&funclet));\n         bx.catch_ret(&funclet, caught);\n \n         bx.switch_to_block(caught);\n@@ -604,7 +605,7 @@ fn codegen_msvc_try<'ll>(\n \n     // Note that no invoke is used here because by definition this function\n     // can't panic (that's what it's catching).\n-    let ret = bx.call(llty, None, llfn, &[try_func, data, catch_func], None);\n+    let ret = bx.call(llty, None, None, llfn, &[try_func, data, catch_func], None);\n     let i32_align = bx.tcx().data_layout.i32_align.abi;\n     bx.store(ret, dest, i32_align);\n }\n@@ -647,7 +648,7 @@ fn codegen_gnu_try<'ll>(\n         let data = llvm::get_param(bx.llfn(), 1);\n         let catch_func = llvm::get_param(bx.llfn(), 2);\n         let try_func_ty = bx.type_func(&[bx.type_i8p()], bx.type_void());\n-        bx.invoke(try_func_ty, None, try_func, &[data], then, catch, None);\n+        bx.invoke(try_func_ty, None, None, try_func, &[data], then, catch, None);\n \n         bx.switch_to_block(then);\n         bx.ret(bx.const_i32(0));\n@@ -665,13 +666,13 @@ fn codegen_gnu_try<'ll>(\n         bx.add_clause(vals, tydesc);\n         let ptr = bx.extract_value(vals, 0);\n         let catch_ty = bx.type_func(&[bx.type_i8p(), bx.type_i8p()], bx.type_void());\n-        bx.call(catch_ty, None, catch_func, &[data, ptr], None);\n+        bx.call(catch_ty, None, None, catch_func, &[data, ptr], None);\n         bx.ret(bx.const_i32(1));\n     });\n \n     // Note that no invoke is used here because by definition this function\n     // can't panic (that's what it's catching).\n-    let ret = bx.call(llty, None, llfn, &[try_func, data, catch_func], None);\n+    let ret = bx.call(llty, None, None, llfn, &[try_func, data, catch_func], None);\n     let i32_align = bx.tcx().data_layout.i32_align.abi;\n     bx.store(ret, dest, i32_align);\n }\n@@ -711,7 +712,7 @@ fn codegen_emcc_try<'ll>(\n         let data = llvm::get_param(bx.llfn(), 1);\n         let catch_func = llvm::get_param(bx.llfn(), 2);\n         let try_func_ty = bx.type_func(&[bx.type_i8p()], bx.type_void());\n-        bx.invoke(try_func_ty, None, try_func, &[data], then, catch, None);\n+        bx.invoke(try_func_ty, None, None, try_func, &[data], then, catch, None);\n \n         bx.switch_to_block(then);\n         bx.ret(bx.const_i32(0));\n@@ -750,13 +751,13 @@ fn codegen_emcc_try<'ll>(\n         let catch_data = bx.bitcast(catch_data, bx.type_i8p());\n \n         let catch_ty = bx.type_func(&[bx.type_i8p(), bx.type_i8p()], bx.type_void());\n-        bx.call(catch_ty, None, catch_func, &[data, catch_data], None);\n+        bx.call(catch_ty, None, None, catch_func, &[data, catch_data], None);\n         bx.ret(bx.const_i32(1));\n     });\n \n     // Note that no invoke is used here because by definition this function\n     // can't panic (that's what it's catching).\n-    let ret = bx.call(llty, None, llfn, &[try_func, data, catch_func], None);\n+    let ret = bx.call(llty, None, None, llfn, &[try_func, data, catch_func], None);\n     let i32_align = bx.tcx().data_layout.i32_align.abi;\n     bx.store(ret, dest, i32_align);\n }\n@@ -1205,6 +1206,7 @@ fn generic_simd_intrinsic<'ll, 'tcx>(\n         let c = bx.call(\n             fn_ty,\n             None,\n+            None,\n             f,\n             &args.iter().map(|arg| arg.immediate()).collect::<Vec<_>>(),\n             None,\n@@ -1423,6 +1425,7 @@ fn generic_simd_intrinsic<'ll, 'tcx>(\n         let v = bx.call(\n             fn_ty,\n             None,\n+            None,\n             f,\n             &[args[1].immediate(), alignment, mask, args[0].immediate()],\n             None,\n@@ -1564,6 +1567,7 @@ fn generic_simd_intrinsic<'ll, 'tcx>(\n         let v = bx.call(\n             fn_ty,\n             None,\n+            None,\n             f,\n             &[args[0].immediate(), args[1].immediate(), alignment, mask],\n             None,\n@@ -2037,7 +2041,7 @@ fn generic_simd_intrinsic<'ll, 'tcx>(\n \n         let fn_ty = bx.type_func(&[vec_ty, vec_ty], vec_ty);\n         let f = bx.declare_cfn(llvm_intrinsic, llvm::UnnamedAddr::No, fn_ty);\n-        let v = bx.call(fn_ty, None, f, &[lhs, rhs], None);\n+        let v = bx.call(fn_ty, None, None, f, &[lhs, rhs], None);\n         return Ok(v);\n     }\n "}, {"sha": "d3fad5699c800a58bed2eedc06d169b699a245f6", "filename": "compiler/rustc_codegen_llvm/src/type_.rs", "status": "modified", "additions": 34, "deletions": 3, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -291,8 +291,24 @@ impl<'ll, 'tcx> LayoutTypeMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n }\n \n impl<'ll, 'tcx> TypeMembershipMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n+    fn add_type_metadata(&self, function: &'ll Value, typeid: String) {\n+        let typeid_metadata = self.typeid_metadata(typeid).unwrap();\n+        let v = [self.const_usize(0), typeid_metadata];\n+        unsafe {\n+            llvm::LLVMRustGlobalAddMetadata(\n+                function,\n+                llvm::MD_type as c_uint,\n+                llvm::LLVMValueAsMetadata(llvm::LLVMMDNodeInContext(\n+                    self.llcx,\n+                    v.as_ptr(),\n+                    v.len() as c_uint,\n+                )),\n+            )\n+        }\n+    }\n+\n     fn set_type_metadata(&self, function: &'ll Value, typeid: String) {\n-        let typeid_metadata = self.typeid_metadata(typeid);\n+        let typeid_metadata = self.typeid_metadata(typeid).unwrap();\n         let v = [self.const_usize(0), typeid_metadata];\n         unsafe {\n             llvm::LLVMGlobalSetMetadata(\n@@ -307,13 +323,28 @@ impl<'ll, 'tcx> TypeMembershipMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         }\n     }\n \n-    fn typeid_metadata(&self, typeid: String) -> &'ll Value {\n-        unsafe {\n+    fn typeid_metadata(&self, typeid: String) -> Option<&'ll Value> {\n+        Some(unsafe {\n             llvm::LLVMMDStringInContext(\n                 self.llcx,\n                 typeid.as_ptr() as *const c_char,\n                 typeid.len() as c_uint,\n             )\n+        })\n+    }\n+\n+    fn add_kcfi_type_metadata(&self, function: &'ll Value, kcfi_typeid: u32) {\n+        let kcfi_type_metadata = self.const_u32(kcfi_typeid);\n+        unsafe {\n+            llvm::LLVMRustGlobalAddMetadata(\n+                function,\n+                llvm::MD_kcfi_type as c_uint,\n+                llvm::LLVMMDNodeInContext2(\n+                    self.llcx,\n+                    &llvm::LLVMValueAsMetadata(kcfi_type_metadata),\n+                    1,\n+                ),\n+            )\n         }\n     }\n "}, {"sha": "ae45ae9d802c851ebe5253bda3e862ae71cb21f1", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -494,7 +494,7 @@ pub fn maybe_create_entry_wrapper<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n             (rust_main, start_ty, vec![arg_argc, arg_argv])\n         };\n \n-        let result = bx.call(start_ty, None, start_fn, &args, None);\n+        let result = bx.call(start_ty, None, None, start_fn, &args, None);\n         let cast = bx.intcast(result, cx.type_int(), true);\n         bx.ret(cast);\n "}, {"sha": "a8b935bd65ce175d283f15bbc182fd65a743f7dc", "filename": "compiler/rustc_codegen_ssa/src/meth.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmeth.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -28,8 +28,9 @@ impl<'a, 'tcx> VirtualIndex {\n         if bx.cx().sess().opts.unstable_opts.virtual_function_elimination\n             && bx.cx().sess().lto() == Lto::Fat\n         {\n-            let typeid =\n-                bx.typeid_metadata(typeid_for_trait_ref(bx.tcx(), expect_dyn_trait_in_self(ty)));\n+            let typeid = bx\n+                .typeid_metadata(typeid_for_trait_ref(bx.tcx(), expect_dyn_trait_in_self(ty)))\n+                .unwrap();\n             let vtable_byte_offset = self.0 * bx.data_layout().pointer_size.bytes();\n             let func = bx.type_checked_load(llvtable, vtable_byte_offset, typeid);\n             bx.pointercast(func, llty)"}, {"sha": "c1613a9640a8bdb93004125b536e321dc9a579b2", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 13, "deletions": 43, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -19,7 +19,6 @@ use rustc_middle::ty::{self, Instance, Ty};\n use rustc_session::config::OptLevel;\n use rustc_span::source_map::Span;\n use rustc_span::{sym, Symbol};\n-use rustc_symbol_mangling::typeid::typeid_for_fnabi;\n use rustc_target::abi::call::{ArgAbi, FnAbi, PassMode, Reg};\n use rustc_target::abi::{self, HasDataLayout, WrappingRange};\n use rustc_target::spec::abi::Abi;\n@@ -163,6 +162,12 @@ impl<'a, 'tcx> TerminatorCodegenHelper<'tcx> {\n         // do an invoke, otherwise do a call.\n         let fn_ty = bx.fn_decl_backend_type(&fn_abi);\n \n+        let fn_attrs = if bx.tcx().def_kind(fx.instance.def_id()).has_codegen_attrs() {\n+            Some(bx.tcx().codegen_fn_attrs(fx.instance.def_id()))\n+        } else {\n+            None\n+        };\n+\n         if !fn_abi.can_unwind {\n             unwind = mir::UnwindAction::Unreachable;\n         }\n@@ -190,6 +195,7 @@ impl<'a, 'tcx> TerminatorCodegenHelper<'tcx> {\n             };\n             let invokeret = bx.invoke(\n                 fn_ty,\n+                fn_attrs,\n                 Some(&fn_abi),\n                 fn_ptr,\n                 &llargs,\n@@ -211,7 +217,7 @@ impl<'a, 'tcx> TerminatorCodegenHelper<'tcx> {\n             }\n             MergingSucc::False\n         } else {\n-            let llret = bx.call(fn_ty, Some(&fn_abi), fn_ptr, &llargs, self.funclet(fx));\n+            let llret = bx.call(fn_ty, fn_attrs, Some(&fn_abi), fn_ptr, &llargs, self.funclet(fx));\n             if fx.mir[self.bb].is_cleanup {\n                 // Cleanup is always the cold path. Don't inline\n                 // drop glue. Also, when there is a deeply-nested\n@@ -1051,48 +1057,12 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             self.codegen_argument(bx, location, &mut llargs, last_arg);\n         }\n \n-        let (is_indirect_call, fn_ptr) = match (llfn, instance) {\n-            (Some(llfn), _) => (true, llfn),\n-            (None, Some(instance)) => (false, bx.get_fn_addr(instance)),\n-            _ => span_bug!(span, \"no llfn for call\"),\n+        let fn_ptr = match (instance, llfn) {\n+            (Some(instance), None) => bx.get_fn_addr(instance),\n+            (_, Some(llfn)) => llfn,\n+            _ => span_bug!(span, \"no instance or llfn for call\"),\n         };\n \n-        // For backends that support CFI using type membership (i.e., testing whether a given\n-        // pointer is associated with a type identifier).\n-        if bx.tcx().sess.is_sanitizer_cfi_enabled() && is_indirect_call {\n-            // Emit type metadata and checks.\n-            // FIXME(rcvalle): Add support for generalized identifiers.\n-            // FIXME(rcvalle): Create distinct unnamed MDNodes for internal identifiers.\n-            let typeid = typeid_for_fnabi(bx.tcx(), fn_abi);\n-            let typeid_metadata = self.cx.typeid_metadata(typeid);\n-\n-            // Test whether the function pointer is associated with the type identifier.\n-            let cond = bx.type_test(fn_ptr, typeid_metadata);\n-            let bb_pass = bx.append_sibling_block(\"type_test.pass\");\n-            let bb_fail = bx.append_sibling_block(\"type_test.fail\");\n-            bx.cond_br(cond, bb_pass, bb_fail);\n-\n-            bx.switch_to_block(bb_pass);\n-            let merging_succ = helper.do_call(\n-                self,\n-                bx,\n-                fn_abi,\n-                fn_ptr,\n-                &llargs,\n-                target.as_ref().map(|&target| (ret_dest, target)),\n-                unwind,\n-                &copied_constant_arguments,\n-                false,\n-            );\n-            assert_eq!(merging_succ, MergingSucc::False);\n-\n-            bx.switch_to_block(bb_fail);\n-            bx.abort();\n-            bx.unreachable();\n-\n-            return MergingSucc::False;\n-        }\n-\n         helper.do_call(\n             self,\n             bx,\n@@ -1640,7 +1610,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             let (fn_abi, fn_ptr) = common::build_langcall(&bx, None, LangItem::PanicCannotUnwind);\n             let fn_ty = bx.fn_decl_backend_type(&fn_abi);\n \n-            let llret = bx.call(fn_ty, Some(&fn_abi), fn_ptr, &[], funclet.as_ref());\n+            let llret = bx.call(fn_ty, None, Some(&fn_abi), fn_ptr, &[], funclet.as_ref());\n             bx.do_not_inline(llret);\n \n             bx.unreachable();"}, {"sha": "6e7065713b8175c850e2879e8b3dd6a98b91b167", "filename": "compiler/rustc_codegen_ssa/src/mir/rvalue.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -697,7 +697,12 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     let fn_ptr = bx.get_fn_addr(instance);\n                     let fn_abi = bx.fn_abi_of_instance(instance, ty::List::empty());\n                     let fn_ty = bx.fn_decl_backend_type(&fn_abi);\n-                    bx.call(fn_ty, Some(fn_abi), fn_ptr, &[], None)\n+                    let fn_attrs = if bx.tcx().def_kind(instance.def_id()).has_codegen_attrs() {\n+                        Some(bx.tcx().codegen_fn_attrs(instance.def_id()))\n+                    } else {\n+                        None\n+                    };\n+                    bx.call(fn_ty, fn_attrs, Some(fn_abi), fn_ptr, &[], None)\n                 } else {\n                     bx.get_static(def_id)\n                 };"}, {"sha": "57de7e9620e8764d165a15fd707a7d65a29cfbd2", "filename": "compiler/rustc_codegen_ssa/src/traits/builder.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbuilder.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -14,6 +14,7 @@ use crate::mir::operand::OperandRef;\n use crate::mir::place::PlaceRef;\n use crate::MemFlags;\n \n+use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrs;\n use rustc_middle::ty::layout::{HasParamEnv, TyAndLayout};\n use rustc_middle::ty::Ty;\n use rustc_span::Span;\n@@ -72,6 +73,7 @@ pub trait BuilderMethods<'a, 'tcx>:\n     fn invoke(\n         &mut self,\n         llty: Self::Type,\n+        fn_attrs: Option<&CodegenFnAttrs>,\n         fn_abi: Option<&FnAbi<'tcx, Ty<'tcx>>>,\n         llfn: Self::Value,\n         args: &[Self::Value],\n@@ -321,6 +323,7 @@ pub trait BuilderMethods<'a, 'tcx>:\n     fn call(\n         &mut self,\n         llty: Self::Type,\n+        fn_attrs: Option<&CodegenFnAttrs>,\n         fn_abi: Option<&FnAbi<'tcx, Ty<'tcx>>>,\n         llfn: Self::Value,\n         args: &[Self::Value],"}, {"sha": "36d9864221bcbac34933b57dc3896c9d2bdd8d13", "filename": "compiler/rustc_codegen_ssa/src/traits/type_.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Ftype_.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -128,12 +128,16 @@ pub trait LayoutTypeMethods<'tcx>: Backend<'tcx> {\n     ) -> Self::Type;\n }\n \n-// For backends that support CFI using type membership (i.e., testing whether a given  pointer is\n+// For backends that support CFI using type membership (i.e., testing whether a given pointer is\n // associated with a type identifier).\n pub trait TypeMembershipMethods<'tcx>: Backend<'tcx> {\n-    fn set_type_metadata(&self, function: Self::Function, typeid: String);\n-    fn typeid_metadata(&self, typeid: String) -> Self::Value;\n-    fn set_kcfi_type_metadata(&self, function: Self::Function, typeid: u32);\n+    fn add_type_metadata(&self, _function: Self::Function, _typeid: String) {}\n+    fn set_type_metadata(&self, _function: Self::Function, _typeid: String) {}\n+    fn typeid_metadata(&self, _typeid: String) -> Option<Self::Value> {\n+        None\n+    }\n+    fn add_kcfi_type_metadata(&self, _function: Self::Function, _typeid: u32) {}\n+    fn set_kcfi_type_metadata(&self, _function: Self::Function, _typeid: u32) {}\n }\n \n pub trait ArgAbiMethods<'tcx>: HasCodegen<'tcx> {"}, {"sha": "4df5a8d48fd1915636ebc5bf4b7fe113f9b46668", "filename": "compiler/rustc_error_messages/Cargo.toml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_error_messages%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_error_messages%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2FCargo.toml?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -17,9 +17,9 @@ rustc_span = { path = \"../rustc_span\" }\n rustc_macros = { path = \"../rustc_macros\" }\n tracing = \"0.1\"\n unic-langid = { version = \"0.9.0\", features = [\"macros\"] }\n-icu_list = \"1.1.0\"\n-icu_locid = \"1.1.0\"\n-icu_provider_adapters = \"1.1.0\"\n+icu_list = \"1.2\"\n+icu_locid = \"1.2\"\n+icu_provider_adapters = \"1.2\"\n \n [features]\n rustc_use_parallel_compiler = ['rustc_baked_icu_data/rustc_use_parallel_compiler']"}, {"sha": "dc5dc4608a07ff141142f92c785544fe7f6fd3ea", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -331,6 +331,8 @@ declare_features! (\n     (active, cfg_target_thread_local, \"1.7.0\", Some(29594), None),\n     /// Allow conditional compilation depending on rust version\n     (active, cfg_version, \"1.45.0\", Some(64796), None),\n+    /// Allows to use the `#[cfi_encoding = \"\"]` attribute.\n+    (active, cfi_encoding, \"1.69.0\", Some(89653), None),\n     /// Allows `for<...>` on closures and generators.\n     (active, closure_lifetime_binder, \"1.64.0\", Some(97362), None),\n     /// Allows `#[track_caller]` on closures and generators."}, {"sha": "fe05d4590e7a677f5c120f553b183b42a706da93", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -494,6 +494,12 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     // RFC 2397\n     gated!(do_not_recommend, Normal, template!(Word), WarnFollowing, experimental!(do_not_recommend)),\n \n+    // `#[cfi_encoding = \"\"]`\n+    gated!(\n+        cfi_encoding, Normal, template!(NameValueStr: \"encoding\"), ErrorPreceding,\n+        experimental!(cfi_encoding)\n+    ),\n+\n     // ==========================================================================\n     // Internal attributes: Stability, deprecation, and unsafe:\n     // =========================================================================="}, {"sha": "0a8bd1d612389d388b6f760c51f1bce50e2c1eae", "filename": "compiler/rustc_hir/src/lang_items.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -226,6 +226,7 @@ language_item_table! {\n \n     PartialEq,               sym::eq,                  eq_trait,                   Target::Trait,          GenericRequirement::Exact(1);\n     PartialOrd,              sym::partial_ord,         partial_ord_trait,          Target::Trait,          GenericRequirement::Exact(1);\n+    CVoid,                   sym::c_void,              c_void,                     Target::Enum,           GenericRequirement::None;\n \n     // A number of panic-related lang items. The `panic` item corresponds to divide-by-zero and\n     // various panic cases with `match`. The `panic_bounds_check` item is for indexing arrays."}, {"sha": "a0c576234f96b512f2fb00140236588188bc7b9c", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -795,12 +795,16 @@ fn test_unstable_options_tracking_hash() {\n     tracked!(remap_cwd_prefix, Some(PathBuf::from(\"abc\")));\n     tracked!(report_delayed_bugs, true);\n     tracked!(sanitizer, SanitizerSet::ADDRESS);\n+    tracked!(sanitizer_cfi_canonical_jump_tables, None);\n+    tracked!(sanitizer_cfi_generalize_pointers, Some(true));\n+    tracked!(sanitizer_cfi_normalize_integers, Some(true));\n     tracked!(sanitizer_memory_track_origins, 2);\n     tracked!(sanitizer_recover, SanitizerSet::ADDRESS);\n     tracked!(saturating_float_casts, Some(true));\n     tracked!(share_generics, Some(true));\n     tracked!(show_span, Some(String::from(\"abc\")));\n     tracked!(simulate_remapped_rust_src_base, Some(PathBuf::from(\"/rustc/abc\")));\n+    tracked!(split_lto_unit, Some(true));\n     tracked!(src_hash_algorithm, Some(SourceFileHashAlgorithm::Sha1));\n     tracked!(stack_protector, StackProtector::All);\n     tracked!(symbol_mangling_version, Some(SymbolManglingVersion::V0));"}, {"sha": "58e5c84fc815a067665684a1d4d53576f2040de5", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -2108,10 +2108,9 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// See [`item_name`][Self::item_name] for more information.\n     pub fn opt_item_ident(self, def_id: DefId) -> Option<Ident> {\n         let def = self.opt_item_name(def_id)?;\n-        let span = def_id\n-            .as_local()\n-            .and_then(|id| self.def_ident_span(id))\n-            .unwrap_or(rustc_span::DUMMY_SP);\n+        let span = self\n+            .def_ident_span(def_id)\n+            .unwrap_or_else(|| bug!(\"missing ident span for {def_id:?}\"));\n         Some(Ident::new(def, span))\n     }\n "}, {"sha": "f0d5f789e82834eab6fca50f572f56e5e11e55b2", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -2400,6 +2400,13 @@ impl<'tcx> Ty<'tcx> {\n             _ => None,\n         }\n     }\n+\n+    pub fn is_c_void(self, tcx: TyCtxt<'_>) -> bool {\n+        match self.kind() {\n+            ty::Adt(adt, _) => tcx.lang_items().get(LangItem::CVoid) == Some(adt.did()),\n+            _ => false,\n+        }\n+    }\n }\n \n /// Extra information about why we ended up with a particular variance."}, {"sha": "c897275bee2b7c8285017fb7e7f872a0034852d0", "filename": "compiler/rustc_session/messages.ftl", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_session%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_session%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fmessages.ftl?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -35,7 +35,15 @@ session_cannot_mix_and_match_sanitizers = `-Zsanitizer={$first}` is incompatible\n \n session_cannot_enable_crt_static_linux = sanitizer is incompatible with statically linked libc, disable it using `-C target-feature=-crt-static`\n \n-session_sanitizer_cfi_enabled = `-Zsanitizer=cfi` requires `-Clto`\n+session_sanitizer_cfi_requires_lto = `-Zsanitizer=cfi` requires `-Clto`, `-Clto=thin`, or `-Clinker-plugin-lto`\n+\n+session_sanitizer_cfi_canonical_jump_tables_requires_cfi = `-Zsanitizer-cfi-canonical-jump-tables` requires `-Zsanitizer=cfi`\n+\n+session_sanitizer_cfi_generalize_pointers_requires_cfi = `-Zsanitizer-cfi-generalize-pointers` requires `-Zsanitizer=cfi` or `-Zsanitizer=kcfi`\n+\n+session_sanitizer_cfi_normalize_integers_requires_cfi = `-Zsanitizer-cfi-normalize-integers` requires `-Zsanitizer=cfi` or `-Zsanitizer=kcfi`\n+\n+session_split_lto_unit_requires_lto = `-Zsplit-lto-unit` requires `-Clto`, `-Clto=thin`, or `-Clinker-plugin-lto`\n \n session_unstable_virtual_function_elimination = `-Zvirtual-function-elimination` requires `-Clto`\n "}, {"sha": "cfdba1120ec3831a77efae1a66f034adb00799d3", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -1036,6 +1036,14 @@ fn default_configuration(sess: &Session) -> CrateConfig {\n         ret.insert((sym::sanitize, Some(symbol)));\n     }\n \n+    if sess.is_sanitizer_cfi_generalize_pointers_enabled() {\n+        ret.insert((sym::sanitizer_cfi_generalize_pointers, None));\n+    }\n+\n+    if sess.is_sanitizer_cfi_normalize_integers_enabled() {\n+        ret.insert((sym::sanitizer_cfi_normalize_integers, None));\n+    }\n+\n     if sess.opts.debug_assertions {\n         ret.insert((sym::debug_assertions, None));\n     }"}, {"sha": "0df62c2064ee889d566fe874a7176a557e34b4a6", "filename": "compiler/rustc_session/src/errors.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_session%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_session%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Ferrors.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -111,8 +111,24 @@ pub struct CannotMixAndMatchSanitizers {\n pub struct CannotEnableCrtStaticLinux;\n \n #[derive(Diagnostic)]\n-#[diag(session_sanitizer_cfi_enabled)]\n-pub struct SanitizerCfiEnabled;\n+#[diag(session_sanitizer_cfi_requires_lto)]\n+pub struct SanitizerCfiRequiresLto;\n+\n+#[derive(Diagnostic)]\n+#[diag(session_sanitizer_cfi_canonical_jump_tables_requires_cfi)]\n+pub struct SanitizerCfiCanonicalJumpTablesRequiresCfi;\n+\n+#[derive(Diagnostic)]\n+#[diag(session_sanitizer_cfi_generalize_pointers_requires_cfi)]\n+pub struct SanitizerCfiGeneralizePointersRequiresCfi;\n+\n+#[derive(Diagnostic)]\n+#[diag(session_sanitizer_cfi_normalize_integers_requires_cfi)]\n+pub struct SanitizerCfiNormalizeIntegersRequiresCfi;\n+\n+#[derive(Diagnostic)]\n+#[diag(session_split_lto_unit_requires_lto)]\n+pub struct SplitLtoUnitRequiresLto;\n \n #[derive(Diagnostic)]\n #[diag(session_unstable_virtual_function_elimination)]"}, {"sha": "d9e191c00c9506c5494e65b340b7872e2ee5c6ab", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -1662,6 +1662,12 @@ options! {\n         \"immediately print bugs registered with `delay_span_bug` (default: no)\"),\n     sanitizer: SanitizerSet = (SanitizerSet::empty(), parse_sanitizers, [TRACKED],\n         \"use a sanitizer\"),\n+    sanitizer_cfi_canonical_jump_tables: Option<bool> = (Some(true), parse_opt_bool, [TRACKED],\n+        \"enable canonical jump tables (default: yes)\"),\n+    sanitizer_cfi_generalize_pointers: Option<bool> = (None, parse_opt_bool, [TRACKED],\n+        \"enable generalizing pointer types (default: no)\"),\n+    sanitizer_cfi_normalize_integers: Option<bool> = (None, parse_opt_bool, [TRACKED],\n+        \"enable normalizing integer types (default: no)\"),\n     sanitizer_memory_track_origins: usize = (0, parse_sanitizer_memory_track_origins, [TRACKED],\n         \"enable origins tracking in MemorySanitizer\"),\n     sanitizer_recover: SanitizerSet = (SanitizerSet::empty(), parse_sanitizers, [TRACKED],\n@@ -1707,6 +1713,8 @@ options! {\n                  file which is ignored by the linker\n         `single`: sections which do not require relocation are written into object file but ignored\n                   by the linker\"),\n+    split_lto_unit: Option<bool> = (None, parse_opt_bool, [TRACKED],\n+        \"enable LTO unit splitting (default: no)\"),\n     src_hash_algorithm: Option<SourceFileHashAlgorithm> = (None, parse_src_file_hash, [TRACKED],\n         \"hash algorithm of source files in debug info (`md5`, `sha1`, or `sha256`)\"),\n     #[rustc_lint_opt_deny_field_access(\"use `Session::stack_protector` instead of this field\")]"}, {"sha": "a988d7f28e6cbf315d0de41bbccee888dc7f3af7", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 65, "deletions": 9, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -766,10 +766,30 @@ impl Session {\n         self.opts.unstable_opts.sanitizer.contains(SanitizerSet::CFI)\n     }\n \n+    pub fn is_sanitizer_cfi_canonical_jump_tables_disabled(&self) -> bool {\n+        self.opts.unstable_opts.sanitizer_cfi_canonical_jump_tables == Some(false)\n+    }\n+\n+    pub fn is_sanitizer_cfi_canonical_jump_tables_enabled(&self) -> bool {\n+        self.opts.unstable_opts.sanitizer_cfi_canonical_jump_tables == Some(true)\n+    }\n+\n+    pub fn is_sanitizer_cfi_generalize_pointers_enabled(&self) -> bool {\n+        self.opts.unstable_opts.sanitizer_cfi_generalize_pointers == Some(true)\n+    }\n+\n+    pub fn is_sanitizer_cfi_normalize_integers_enabled(&self) -> bool {\n+        self.opts.unstable_opts.sanitizer_cfi_normalize_integers == Some(true)\n+    }\n+\n     pub fn is_sanitizer_kcfi_enabled(&self) -> bool {\n         self.opts.unstable_opts.sanitizer.contains(SanitizerSet::KCFI)\n     }\n \n+    pub fn is_split_lto_unit_enabled(&self) -> bool {\n+        self.opts.unstable_opts.split_lto_unit == Some(true)\n+    }\n+\n     /// Check whether this compile session and crate type use static crt.\n     pub fn crt_static(&self, crate_type: Option<CrateType>) -> bool {\n         if !self.target.crt_static_respected {\n@@ -1582,24 +1602,60 @@ fn validate_commandline_args_with_session_available(sess: &Session) {\n         sess.emit_err(errors::CannotEnableCrtStaticLinux);\n     }\n \n-    // LLVM CFI and VFE both require LTO.\n-    if sess.lto() != config::Lto::Fat {\n-        if sess.is_sanitizer_cfi_enabled() {\n-            sess.emit_err(errors::SanitizerCfiEnabled);\n-        }\n-        if sess.opts.unstable_opts.virtual_function_elimination {\n-            sess.emit_err(errors::UnstableVirtualFunctionElimination);\n-        }\n+    // LLVM CFI requires LTO.\n+    if sess.is_sanitizer_cfi_enabled()\n+        && !(sess.lto() == config::Lto::Fat\n+            || sess.lto() == config::Lto::Thin\n+            || sess.opts.cg.linker_plugin_lto.enabled())\n+    {\n+        sess.emit_err(errors::SanitizerCfiRequiresLto);\n     }\n \n-    // LLVM CFI and KCFI are mutually exclusive\n+    // LLVM CFI is incompatible with LLVM KCFI.\n     if sess.is_sanitizer_cfi_enabled() && sess.is_sanitizer_kcfi_enabled() {\n         sess.emit_err(errors::CannotMixAndMatchSanitizers {\n             first: \"cfi\".to_string(),\n             second: \"kcfi\".to_string(),\n         });\n     }\n \n+    // Canonical jump tables requires CFI.\n+    if sess.is_sanitizer_cfi_canonical_jump_tables_disabled() {\n+        if !sess.is_sanitizer_cfi_enabled() {\n+            sess.emit_err(errors::SanitizerCfiCanonicalJumpTablesRequiresCfi);\n+        }\n+    }\n+\n+    // LLVM CFI pointer generalization requires CFI or KCFI.\n+    if sess.is_sanitizer_cfi_generalize_pointers_enabled() {\n+        if !(sess.is_sanitizer_cfi_enabled() || sess.is_sanitizer_kcfi_enabled()) {\n+            sess.emit_err(errors::SanitizerCfiGeneralizePointersRequiresCfi);\n+        }\n+    }\n+\n+    // LLVM CFI integer normalization requires CFI or KCFI.\n+    if sess.is_sanitizer_cfi_normalize_integers_enabled() {\n+        if !(sess.is_sanitizer_cfi_enabled() || sess.is_sanitizer_kcfi_enabled()) {\n+            sess.emit_err(errors::SanitizerCfiNormalizeIntegersRequiresCfi);\n+        }\n+    }\n+\n+    // LTO unit splitting requires LTO.\n+    if sess.is_split_lto_unit_enabled()\n+        && !(sess.lto() == config::Lto::Fat\n+            || sess.lto() == config::Lto::Thin\n+            || sess.opts.cg.linker_plugin_lto.enabled())\n+    {\n+        sess.emit_err(errors::SplitLtoUnitRequiresLto);\n+    }\n+\n+    // VFE requires LTO.\n+    if sess.lto() != config::Lto::Fat {\n+        if sess.opts.unstable_opts.virtual_function_elimination {\n+            sess.emit_err(errors::UnstableVirtualFunctionElimination);\n+        }\n+    }\n+\n     if sess.opts.unstable_opts.stack_protector != StackProtector::None {\n         if !sess.target.options.supports_stack_protector {\n             sess.emit_warning(errors::StackProtectorNotSupportedForTarget {"}, {"sha": "1140a922f9fd14edf1668559ed21d065aa1feafe", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -443,6 +443,7 @@ symbols! {\n         c_str,\n         c_unwind,\n         c_variadic,\n+        c_void,\n         call,\n         call_mut,\n         call_once,\n@@ -470,6 +471,7 @@ symbols! {\n         cfg_target_vendor,\n         cfg_version,\n         cfi,\n+        cfi_encoding,\n         char,\n         client,\n         clippy,\n@@ -1323,6 +1325,8 @@ symbols! {\n         s,\n         safety,\n         sanitize,\n+        sanitizer_cfi_generalize_pointers,\n+        sanitizer_cfi_normalize_integers,\n         sanitizer_runtime,\n         saturating_add,\n         saturating_sub,"}, {"sha": "81dbff9ea4e40183f23a3cf1805d4df3232ad04a", "filename": "compiler/rustc_symbol_mangling/src/typeid.rs", "status": "modified", "additions": 45, "deletions": 22, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -1,42 +1,65 @@\n-// For more information about type metadata and type metadata identifiers for cross-language LLVM\n-// CFI support, see Type metadata in the design document in the tracking issue #89653.\n-\n+/// Type metadata identifiers for LLVM Control Flow Integrity (CFI) and cross-language LLVM CFI\n+/// support.\n+///\n+/// For more information about LLVM CFI and cross-language LLVM CFI support for the Rust compiler,\n+/// see design document in the tracking issue #89653.\n+use bitflags::bitflags;\n use rustc_middle::ty::{FnSig, Ty, TyCtxt};\n use rustc_target::abi::call::FnAbi;\n use std::hash::Hasher;\n use twox_hash::XxHash64;\n \n+bitflags! {\n+    /// Options for typeid_for_fnabi and typeid_for_fnsig.\n+    pub struct TypeIdOptions: u32 {\n+        const GENERALIZE_POINTERS = 1;\n+        const GENERALIZE_REPR_C = 2;\n+        const NORMALIZE_INTEGERS = 4;\n+    }\n+}\n+\n mod typeid_itanium_cxx_abi;\n-use typeid_itanium_cxx_abi::TypeIdOptions;\n \n /// Returns a type metadata identifier for the specified FnAbi.\n-pub fn typeid_for_fnabi<'tcx>(tcx: TyCtxt<'tcx>, fn_abi: &FnAbi<'tcx, Ty<'tcx>>) -> String {\n-    typeid_itanium_cxx_abi::typeid_for_fnabi(tcx, fn_abi, TypeIdOptions::NO_OPTIONS)\n+pub fn typeid_for_fnabi<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    fn_abi: &FnAbi<'tcx, Ty<'tcx>>,\n+    options: TypeIdOptions,\n+) -> String {\n+    typeid_itanium_cxx_abi::typeid_for_fnabi(tcx, fn_abi, options)\n }\n \n /// Returns a type metadata identifier for the specified FnSig.\n-pub fn typeid_for_fnsig<'tcx>(tcx: TyCtxt<'tcx>, fn_sig: &FnSig<'tcx>) -> String {\n-    typeid_itanium_cxx_abi::typeid_for_fnsig(tcx, fn_sig, TypeIdOptions::NO_OPTIONS)\n+pub fn typeid_for_fnsig<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    fn_sig: &FnSig<'tcx>,\n+    options: TypeIdOptions,\n+) -> String {\n+    typeid_itanium_cxx_abi::typeid_for_fnsig(tcx, fn_sig, options)\n }\n \n-/// Returns an LLVM KCFI type metadata identifier for the specified FnAbi.\n-pub fn kcfi_typeid_for_fnabi<'tcx>(tcx: TyCtxt<'tcx>, fn_abi: &FnAbi<'tcx, Ty<'tcx>>) -> u32 {\n-    // An LLVM KCFI type metadata identifier is a 32-bit constant produced by taking the lower half\n-    // of the xxHash64 of the type metadata identifier. (See llvm/llvm-project@cff5bef.)\n+/// Returns a KCFI type metadata identifier for the specified FnAbi.\n+pub fn kcfi_typeid_for_fnabi<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    fn_abi: &FnAbi<'tcx, Ty<'tcx>>,\n+    options: TypeIdOptions,\n+) -> u32 {\n+    // A KCFI type metadata identifier is a 32-bit constant produced by taking the lower half of the\n+    // xxHash64 of the type metadata identifier. (See llvm/llvm-project@cff5bef.)\n     let mut hash: XxHash64 = Default::default();\n-    hash.write(\n-        typeid_itanium_cxx_abi::typeid_for_fnabi(tcx, fn_abi, TypeIdOptions::NO_OPTIONS).as_bytes(),\n-    );\n+    hash.write(typeid_itanium_cxx_abi::typeid_for_fnabi(tcx, fn_abi, options).as_bytes());\n     hash.finish() as u32\n }\n \n-/// Returns an LLVM KCFI type metadata identifier for the specified FnSig.\n-pub fn kcfi_typeid_for_fnsig<'tcx>(tcx: TyCtxt<'tcx>, fn_sig: &FnSig<'tcx>) -> u32 {\n-    // An LLVM KCFI type metadata identifier is a 32-bit constant produced by taking the lower half\n-    // of the xxHash64 of the type metadata identifier. (See llvm/llvm-project@cff5bef.)\n+/// Returns a KCFI type metadata identifier for the specified FnSig.\n+pub fn kcfi_typeid_for_fnsig<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    fn_sig: &FnSig<'tcx>,\n+    options: TypeIdOptions,\n+) -> u32 {\n+    // A KCFI type metadata identifier is a 32-bit constant produced by taking the lower half of the\n+    // xxHash64 of the type metadata identifier. (See llvm/llvm-project@cff5bef.)\n     let mut hash: XxHash64 = Default::default();\n-    hash.write(\n-        typeid_itanium_cxx_abi::typeid_for_fnsig(tcx, fn_sig, TypeIdOptions::NO_OPTIONS).as_bytes(),\n-    );\n+    hash.write(typeid_itanium_cxx_abi::typeid_for_fnsig(tcx, fn_sig, options).as_bytes());\n     hash.finish() as u32\n }"}, {"sha": "5310ef26da768d890ac570e0172d4e693ebcccb2", "filename": "compiler/rustc_symbol_mangling/src/typeid/typeid_itanium_cxx_abi.rs", "status": "modified", "additions": 148, "deletions": 53, "changes": 201, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -1,26 +1,30 @@\n-// For more information about type metadata and type metadata identifiers for cross-language LLVM\n-// CFI support, see Type metadata in the design document in the tracking issue #89653.\n-\n-// FIXME(rcvalle): Identify C char and integer type uses and encode them with their respective\n-// builtin type encodings as specified by the Itanium C++ ABI for extern function types with the \"C\"\n-// calling convention to use this encoding for cross-language LLVM CFI.\n-\n-use bitflags::bitflags;\n+/// Type metadata identifiers (using Itanium C++ ABI mangling for encoding) for LLVM Control Flow\n+/// Integrity (CFI) and cross-language LLVM CFI support.\n+///\n+/// Encodes type metadata identifiers for LLVM CFI and cross-language LLVM CFI support using Itanium\n+/// C++ ABI mangling for encoding with vendor extended type qualifiers and types for Rust types that\n+/// are not used across the FFI boundary.\n+///\n+/// For more information about LLVM CFI and cross-language LLVM CFI support for the Rust compiler,\n+/// see design document in the tracking issue #89653.\n use core::fmt::Display;\n use rustc_data_structures::base_n;\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_errors::DiagnosticMessage;\n use rustc_hir as hir;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, SubstsRef};\n use rustc_middle::ty::{\n     self, Const, ExistentialPredicate, FloatTy, FnSig, IntTy, List, Region, RegionKind, TermKind,\n     Ty, TyCtxt, UintTy,\n };\n use rustc_span::def_id::DefId;\n-use rustc_span::symbol::sym;\n+use rustc_span::sym;\n use rustc_target::abi::call::{Conv, FnAbi};\n use rustc_target::spec::abi::Abi;\n use std::fmt::Write as _;\n \n+use crate::typeid::TypeIdOptions;\n+\n /// Type and extended type qualifiers.\n #[derive(Eq, Hash, PartialEq)]\n enum TyQ {\n@@ -38,15 +42,6 @@ enum DictKey<'tcx> {\n     Predicate(ExistentialPredicate<'tcx>),\n }\n \n-bitflags! {\n-    /// Options for typeid_for_fnabi and typeid_for_fnsig.\n-    pub struct TypeIdOptions: u32 {\n-        const NO_OPTIONS = 0;\n-        const GENERALIZE_POINTERS = 1;\n-        const GENERALIZE_REPR_C = 2;\n-    }\n-}\n-\n /// Options for encode_ty.\n type EncodeTyOptions = TypeIdOptions;\n \n@@ -91,21 +86,6 @@ fn compress<'tcx>(\n     }\n }\n \n-// FIXME(rcvalle): Move to compiler/rustc_middle/src/ty/sty.rs after C types work is done, possibly\n-// along with other is_c_type methods.\n-/// Returns whether a `ty::Ty` is `c_void`.\n-fn is_c_void_ty<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> bool {\n-    match ty.kind() {\n-        ty::Adt(adt_def, ..) => {\n-            let def_id = adt_def.0.did;\n-            let crate_name = tcx.crate_name(def_id.krate);\n-            tcx.item_name(def_id).as_str() == \"c_void\"\n-                && (crate_name == sym::core || crate_name == sym::std || crate_name == sym::libc)\n-        }\n-        _ => false,\n-    }\n-}\n-\n /// Encodes a const using the Itanium C++ ABI as a literal argument (see\n /// <https://itanium-cxx-abi.github.io/cxx-abi/abi.html#mangling.literal>).\n fn encode_const<'tcx>(\n@@ -448,6 +428,12 @@ fn encode_ty<'tcx>(\n \n     match ty.kind() {\n         // Primitive types\n+\n+        // Rust's bool has the same layout as C17's _Bool, that is, its size and alignment are\n+        // implementation-defined. Any bool can be cast into an integer, taking on the values 1\n+        // (true) or 0 (false).\n+        //\n+        // (See https://rust-lang.github.io/unsafe-code-guidelines/layout/scalars.html#bool.)\n         ty::Bool => {\n             typeid.push('b');\n         }\n@@ -535,9 +521,33 @@ fn encode_ty<'tcx>(\n         // User-defined types\n         ty::Adt(adt_def, substs) => {\n             let mut s = String::new();\n-            let def_id = adt_def.0.did;\n-            if options.contains(EncodeTyOptions::GENERALIZE_REPR_C) && adt_def.repr().c() {\n-                // For cross-language CFI support, the encoding must be compatible at the FFI\n+            let def_id = adt_def.did();\n+            if let Some(cfi_encoding) = tcx.get_attr(def_id, sym::cfi_encoding) {\n+                // Use user-defined CFI encoding for type\n+                if let Some(value_str) = cfi_encoding.value_str() {\n+                    if !value_str.to_string().trim().is_empty() {\n+                        s.push_str(&value_str.to_string().trim());\n+                    } else {\n+                        #[allow(\n+                            rustc::diagnostic_outside_of_impl,\n+                            rustc::untranslatable_diagnostic\n+                        )]\n+                        tcx.sess\n+                            .struct_span_err(\n+                                cfi_encoding.span,\n+                                DiagnosticMessage::Str(format!(\n+                                    \"invalid `cfi_encoding` for `{:?}`\",\n+                                    ty.kind()\n+                                )),\n+                            )\n+                            .emit();\n+                    }\n+                } else {\n+                    bug!(\"encode_ty: invalid `cfi_encoding` for `{:?}`\", ty.kind());\n+                }\n+                compress(dict, DictKey::Ty(ty, TyQ::None), &mut s);\n+            } else if options.contains(EncodeTyOptions::GENERALIZE_REPR_C) && adt_def.repr().c() {\n+                // For cross-language LLVM CFI support, the encoding must be compatible at the FFI\n                 // boundary. For instance:\n                 //\n                 //     struct type1 {};\n@@ -567,8 +577,33 @@ fn encode_ty<'tcx>(\n         ty::Foreign(def_id) => {\n             // <length><name>, where <name> is <unscoped-name>\n             let mut s = String::new();\n-            let name = tcx.item_name(*def_id).to_string();\n-            let _ = write!(s, \"{}{}\", name.len(), &name);\n+            if let Some(cfi_encoding) = tcx.get_attr(*def_id, sym::cfi_encoding) {\n+                // Use user-defined CFI encoding for type\n+                if let Some(value_str) = cfi_encoding.value_str() {\n+                    if !value_str.to_string().trim().is_empty() {\n+                        s.push_str(&value_str.to_string().trim());\n+                    } else {\n+                        #[allow(\n+                            rustc::diagnostic_outside_of_impl,\n+                            rustc::untranslatable_diagnostic\n+                        )]\n+                        tcx.sess\n+                            .struct_span_err(\n+                                cfi_encoding.span,\n+                                DiagnosticMessage::Str(format!(\n+                                    \"invalid `cfi_encoding` for `{:?}`\",\n+                                    ty.kind()\n+                                )),\n+                            )\n+                            .emit();\n+                    }\n+                } else {\n+                    bug!(\"encode_ty: invalid `cfi_encoding` for `{:?}`\", ty.kind());\n+                }\n+            } else {\n+                let name = tcx.item_name(*def_id).to_string();\n+                let _ = write!(s, \"{}{}\", name.len(), &name);\n+            }\n             compress(dict, DictKey::Ty(ty, TyQ::None), &mut s);\n             typeid.push_str(&s);\n         }\n@@ -618,7 +653,7 @@ fn encode_ty<'tcx>(\n         ty::FnPtr(fn_sig) => {\n             // PF<return-type><parameter-type1..parameter-typeN>E\n             let mut s = String::from(\"P\");\n-            s.push_str(&encode_fnsig(tcx, &fn_sig.skip_binder(), dict, TypeIdOptions::NO_OPTIONS));\n+            s.push_str(&encode_fnsig(tcx, &fn_sig.skip_binder(), dict, TypeIdOptions::empty()));\n             compress(dict, DictKey::Ty(ty, TyQ::None), &mut s);\n             typeid.push_str(&s);\n         }\n@@ -655,22 +690,59 @@ fn encode_ty<'tcx>(\n }\n \n // Transforms a ty:Ty for being encoded and used in the substitution dictionary. It transforms all\n-// c_void types into unit types unconditionally, and generalizes all pointers if\n-// TransformTyOptions::GENERALIZE_POINTERS option is set.\n-#[instrument(level = \"trace\", skip(tcx))]\n+// c_void types into unit types unconditionally, generalizes pointers if\n+// TransformTyOptions::GENERALIZE_POINTERS option is set, and normalizes integers if\n+// TransformTyOptions::NORMALIZE_INTEGERS option is set.\n fn transform_ty<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, options: TransformTyOptions) -> Ty<'tcx> {\n     let mut ty = ty;\n \n     match ty.kind() {\n-        ty::Bool\n-        | ty::Int(..)\n-        | ty::Uint(..)\n-        | ty::Float(..)\n-        | ty::Char\n-        | ty::Str\n-        | ty::Never\n-        | ty::Foreign(..)\n-        | ty::Dynamic(..) => {}\n+        ty::Float(..) | ty::Char | ty::Str | ty::Never | ty::Foreign(..) | ty::Dynamic(..) => {}\n+\n+        ty::Bool => {\n+            if options.contains(EncodeTyOptions::NORMALIZE_INTEGERS) {\n+                // Note: on all platforms that Rust's currently supports, its size and alignment are\n+                // 1, and its ABI class is INTEGER - see Rust Layout and ABIs.\n+                //\n+                // (See https://rust-lang.github.io/unsafe-code-guidelines/layout/scalars.html#bool.)\n+                //\n+                // Clang represents bool as an 8-bit unsigned integer.\n+                ty = tcx.types.u8;\n+            }\n+        }\n+\n+        ty::Int(..) | ty::Uint(..) => {\n+            if options.contains(EncodeTyOptions::NORMALIZE_INTEGERS) {\n+                // Note: C99 7.18.2.4 requires uintptr_t and intptr_t to be at least 16-bit wide.\n+                // All platforms we currently support have a C platform, and as a consequence,\n+                // isize/usize are at least 16-bit wide for all of them.\n+                //\n+                // (See https://rust-lang.github.io/unsafe-code-guidelines/layout/scalars.html#isize-and-usize.)\n+                match ty.kind() {\n+                    ty::Int(IntTy::Isize) => match tcx.sess.target.pointer_width {\n+                        16 => ty = tcx.types.i16,\n+                        32 => ty = tcx.types.i32,\n+                        64 => ty = tcx.types.i64,\n+                        128 => ty = tcx.types.i128,\n+                        _ => bug!(\n+                            \"transform_ty: unexpected pointer width `{}`\",\n+                            tcx.sess.target.pointer_width\n+                        ),\n+                    },\n+                    ty::Uint(UintTy::Usize) => match tcx.sess.target.pointer_width {\n+                        16 => ty = tcx.types.u16,\n+                        32 => ty = tcx.types.u32,\n+                        64 => ty = tcx.types.u64,\n+                        128 => ty = tcx.types.u128,\n+                        _ => bug!(\n+                            \"transform_ty: unexpected pointer width `{}`\",\n+                            tcx.sess.target.pointer_width\n+                        ),\n+                    },\n+                    _ => (),\n+                }\n+            }\n+        }\n \n         _ if ty.is_unit() => {}\n \n@@ -688,12 +760,17 @@ fn transform_ty<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, options: TransformTyOptio\n         }\n \n         ty::Adt(adt_def, substs) => {\n-            if is_c_void_ty(tcx, ty) {\n+            if ty.is_c_void(tcx) {\n                 ty = tcx.mk_unit();\n             } else if options.contains(TransformTyOptions::GENERALIZE_REPR_C) && adt_def.repr().c()\n             {\n                 ty = tcx.mk_adt(*adt_def, ty::List::empty());\n             } else if adt_def.repr().transparent() && adt_def.is_struct() {\n+                // Don't transform repr(transparent) types with an user-defined CFI encoding to\n+                // preserve the user-defined CFI encoding.\n+                if let Some(_) = tcx.get_attr(adt_def.did(), sym::cfi_encoding) {\n+                    return ty;\n+                }\n                 let variant = adt_def.non_enum_variant();\n                 let param_env = tcx.param_env(variant.def_id);\n                 let field = variant.fields.iter().find(|field| {\n@@ -815,7 +892,7 @@ fn transform_substs<'tcx>(\n     options: TransformTyOptions,\n ) -> SubstsRef<'tcx> {\n     let substs = substs.iter().map(|subst| match subst.unpack() {\n-        GenericArgKind::Type(ty) if is_c_void_ty(tcx, ty) => tcx.mk_unit().into(),\n+        GenericArgKind::Type(ty) if ty.is_c_void(tcx) => tcx.mk_unit().into(),\n         GenericArgKind::Type(ty) => transform_ty(tcx, ty, options).into(),\n         _ => subst,\n     });\n@@ -887,6 +964,15 @@ pub fn typeid_for_fnabi<'tcx>(\n     // Close the \"F..E\" pair\n     typeid.push('E');\n \n+    // Add encoding suffixes\n+    if options.contains(EncodeTyOptions::NORMALIZE_INTEGERS) {\n+        typeid.push_str(\".normalized\");\n+    }\n+\n+    if options.contains(EncodeTyOptions::GENERALIZE_POINTERS) {\n+        typeid.push_str(\".generalized\");\n+    }\n+\n     typeid\n }\n \n@@ -913,5 +999,14 @@ pub fn typeid_for_fnsig<'tcx>(\n     // Encode the function signature\n     typeid.push_str(&encode_fnsig(tcx, fn_sig, &mut dict, options));\n \n+    // Add encoding suffixes\n+    if options.contains(EncodeTyOptions::NORMALIZE_INTEGERS) {\n+        typeid.push_str(\".normalized\");\n+    }\n+\n+    if options.contains(EncodeTyOptions::GENERALIZE_POINTERS) {\n+        typeid.push_str(\".generalized\");\n+    }\n+\n     typeid\n }"}, {"sha": "b85894259f1f34e7654f8e1d4a28848269851356", "filename": "library/core/src/ffi/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/library%2Fcore%2Fsrc%2Fffi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/library%2Fcore%2Fsrc%2Fffi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fffi%2Fmod.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -202,6 +202,7 @@ mod c_long_definition {\n //     would be uninhabited and at least dereferencing such pointers would\n //     be UB.\n #[doc = include_str!(\"c_void.md\")]\n+#[cfg_attr(not(bootstrap), lang = \"c_void\")]\n #[repr(u8)]\n #[stable(feature = \"core_c_void\", since = \"1.30.0\")]\n pub enum c_void {"}, {"sha": "e06ccb5b2870ca3fa67ba0d1d95bc3b3c6cff26b", "filename": "library/core/src/primitive_docs.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/library%2Fcore%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/library%2Fcore%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fprimitive_docs.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -610,6 +610,9 @@ mod prim_pointer {}\n /// if the element type allows it. As a stopgap, trait implementations are\n /// statically generated up to size 32.\n ///\n+/// Arrays of sizes from 1 to 12 (inclusive) implement [`From<Tuple>`], where `Tuple`\n+/// is a homogenous [prim@tuple] of appropriate length.\n+///\n /// Arrays coerce to [slices (`[T]`)][slice], so a slice method may be called on\n /// an array. Indeed, this provides most of the API for working with arrays.\n ///\n@@ -672,6 +675,13 @@ mod prim_pointer {}\n /// move_away(roa);\n /// ```\n ///\n+/// Arrays can be created from homogenous tuples of appropriate length:\n+///\n+/// ```\n+/// let tuple: (u32, u32, u32) = (1, 2, 3);\n+/// let array: [u32; 3] = tuple.into();\n+/// ```\n+///\n /// # Editions\n ///\n /// Prior to Rust 1.53, arrays did not implement [`IntoIterator`] by value, so the method call\n@@ -774,6 +784,7 @@ mod prim_pointer {}\n /// [`Borrow`]: borrow::Borrow\n /// [`BorrowMut`]: borrow::BorrowMut\n /// [slice pattern]: ../reference/patterns.html#slice-patterns\n+/// [`From<Tuple>`]: convert::From\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_array {}\n \n@@ -1000,7 +1011,9 @@ mod prim_str {}\n /// * [`Debug`]\n /// * [`Default`]\n /// * [`Hash`]\n+/// * [`From<[T; N]>`][from]\n ///\n+/// [from]: convert::From\n /// [`Debug`]: fmt::Debug\n /// [`Hash`]: hash::Hash\n ///\n@@ -1051,6 +1064,13 @@ mod prim_str {}\n /// assert_eq!(y, 5);\n /// ```\n ///\n+/// Homogenous tuples can be created from arrays of appropriate length:\n+///\n+/// ```\n+/// let array: [u32; 3] = [1, 2, 3];\n+/// let tuple: (u32, u32, u32) = array.into();\n+/// ```\n+///\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_tuple {}\n "}, {"sha": "d4981af90d19e7946297fbf0b94dd4a910f2eed6", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -4257,7 +4257,7 @@ impl<T, const N: usize> [[T; N]] {\n     /// assert!(empty_slice_of_arrays.flatten().is_empty());\n     /// ```\n     #[unstable(feature = \"slice_flatten\", issue = \"95629\")]\n-    pub fn flatten(&self) -> &[T] {\n+    pub const fn flatten(&self) -> &[T] {\n         let len = if T::IS_ZST {\n             self.len().checked_mul(N).expect(\"slice len overflow\")\n         } else {"}, {"sha": "c46c49547f6d43e377cf243a069a34ac27e0aae6", "filename": "library/core/src/tuple.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/library%2Fcore%2Fsrc%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/library%2Fcore%2Fsrc%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftuple.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -100,6 +100,26 @@ macro_rules! tuple_impls {\n                 }\n             }\n         }\n+\n+        #[stable(feature = \"array_tuple_conv\", since = \"1.63.0\")]\n+        impl<T> From<[T; ${count(T)}]> for ($(${ignore(T)} T,)+) {\n+            #[inline]\n+            #[allow(non_snake_case)]\n+            fn from(array: [T; ${count(T)}]) -> Self {\n+                let [$($T,)+] = array;\n+                ($($T,)+)\n+            }\n+        }\n+\n+        #[stable(feature = \"array_tuple_conv\", since = \"1.63.0\")]\n+        impl<T> From<($(${ignore(T)} T,)+)> for [T; ${count(T)}] {\n+            #[inline]\n+            #[allow(non_snake_case)]\n+            fn from(tuple: ($(${ignore(T)} T,)+)) -> Self {\n+                let ($($T,)+) = tuple;\n+                [$($T,)+]\n+            }\n+        }\n     }\n }\n "}, {"sha": "e06ccb5b2870ca3fa67ba0d1d95bc3b3c6cff26b", "filename": "library/std/src/primitive_docs.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprimitive_docs.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -610,6 +610,9 @@ mod prim_pointer {}\n /// if the element type allows it. As a stopgap, trait implementations are\n /// statically generated up to size 32.\n ///\n+/// Arrays of sizes from 1 to 12 (inclusive) implement [`From<Tuple>`], where `Tuple`\n+/// is a homogenous [prim@tuple] of appropriate length.\n+///\n /// Arrays coerce to [slices (`[T]`)][slice], so a slice method may be called on\n /// an array. Indeed, this provides most of the API for working with arrays.\n ///\n@@ -672,6 +675,13 @@ mod prim_pointer {}\n /// move_away(roa);\n /// ```\n ///\n+/// Arrays can be created from homogenous tuples of appropriate length:\n+///\n+/// ```\n+/// let tuple: (u32, u32, u32) = (1, 2, 3);\n+/// let array: [u32; 3] = tuple.into();\n+/// ```\n+///\n /// # Editions\n ///\n /// Prior to Rust 1.53, arrays did not implement [`IntoIterator`] by value, so the method call\n@@ -774,6 +784,7 @@ mod prim_pointer {}\n /// [`Borrow`]: borrow::Borrow\n /// [`BorrowMut`]: borrow::BorrowMut\n /// [slice pattern]: ../reference/patterns.html#slice-patterns\n+/// [`From<Tuple>`]: convert::From\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_array {}\n \n@@ -1000,7 +1011,9 @@ mod prim_str {}\n /// * [`Debug`]\n /// * [`Default`]\n /// * [`Hash`]\n+/// * [`From<[T; N]>`][from]\n ///\n+/// [from]: convert::From\n /// [`Debug`]: fmt::Debug\n /// [`Hash`]: hash::Hash\n ///\n@@ -1051,6 +1064,13 @@ mod prim_str {}\n /// assert_eq!(y, 5);\n /// ```\n ///\n+/// Homogenous tuples can be created from arrays of appropriate length:\n+///\n+/// ```\n+/// let array: [u32; 3] = [1, 2, 3];\n+/// let tuple: (u32, u32, u32) = array.into();\n+/// ```\n+///\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_tuple {}\n "}, {"sha": "e1a38de64711697ae347d31bb2b1faa45cef5eca", "filename": "library/std/src/sys/unsupported/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fmod.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -22,6 +22,7 @@ pub mod thread;\n #[cfg(target_thread_local)]\n pub mod thread_local_dtor;\n pub mod thread_local_key;\n+pub mod thread_parking;\n pub mod time;\n \n mod common;"}, {"sha": "197078bb1867371a9b97a3c8d09de717ae163ee8", "filename": "library/std/src/sys/unsupported/thread_parking.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fthread_parking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fthread_parking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fthread_parking.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -0,0 +1,11 @@\n+use crate::pin::Pin;\n+use crate::time::Duration;\n+\n+pub struct Parker {}\n+\n+impl Parker {\n+    pub unsafe fn new_in_place(_parker: *mut Parker) {}\n+    pub unsafe fn park(self: Pin<&Self>) {}\n+    pub unsafe fn park_timeout(self: Pin<&Self>, _dur: Duration) {}\n+    pub fn unpark(self: Pin<&Self>) {}\n+}"}, {"sha": "a2223708024801102d47f45caa5586e8ce957135", "filename": "library/std/src/sys/wasi/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fmod.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -47,6 +47,8 @@ pub mod thread;\n pub mod thread_local_dtor;\n #[path = \"../unsupported/thread_local_key.rs\"]\n pub mod thread_local_key;\n+#[path = \"../unsupported/thread_parking.rs\"]\n+pub mod thread_parking;\n pub mod time;\n \n cfg_if::cfg_if! {"}, {"sha": "6c05b56e1bfc00189e0e712fc8a3f5b6fc606bb2", "filename": "library/std/src/sys/wasm/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fmod.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -70,6 +70,8 @@ cfg_if::cfg_if! {\n         pub mod once;\n         #[path = \"../unsupported/thread.rs\"]\n         pub mod thread;\n+        #[path = \"../unsupported/thread_parking.rs\"]\n+        pub mod thread_parking;\n     }\n }\n "}, {"sha": "3209bffe353ed81b775a8b7869789824d1a052b1", "filename": "library/std/src/sys_common/thread_parking/generic.rs", "status": "removed", "additions": 0, "deletions": 125, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/f557a4fd462a779c92e4e8bd004426cf329efb30/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parking%2Fgeneric.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f557a4fd462a779c92e4e8bd004426cf329efb30/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parking%2Fgeneric.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parking%2Fgeneric.rs?ref=f557a4fd462a779c92e4e8bd004426cf329efb30", "patch": "@@ -1,125 +0,0 @@\n-//! Parker implementation based on a Mutex and Condvar.\n-\n-use crate::pin::Pin;\n-use crate::sync::atomic::AtomicUsize;\n-use crate::sync::atomic::Ordering::SeqCst;\n-use crate::sync::{Condvar, Mutex};\n-use crate::time::Duration;\n-\n-const EMPTY: usize = 0;\n-const PARKED: usize = 1;\n-const NOTIFIED: usize = 2;\n-\n-pub struct Parker {\n-    state: AtomicUsize,\n-    lock: Mutex<()>,\n-    cvar: Condvar,\n-}\n-\n-impl Parker {\n-    /// Construct the generic parker. The UNIX parker implementation\n-    /// requires this to happen in-place.\n-    pub unsafe fn new_in_place(parker: *mut Parker) {\n-        parker.write(Parker {\n-            state: AtomicUsize::new(EMPTY),\n-            lock: Mutex::new(()),\n-            cvar: Condvar::new(),\n-        });\n-    }\n-\n-    // This implementation doesn't require `unsafe` and `Pin`, but other implementations do.\n-    pub unsafe fn park(self: Pin<&Self>) {\n-        // If we were previously notified then we consume this notification and\n-        // return quickly.\n-        if self.state.compare_exchange(NOTIFIED, EMPTY, SeqCst, SeqCst).is_ok() {\n-            return;\n-        }\n-\n-        // Otherwise we need to coordinate going to sleep\n-        let mut m = self.lock.lock().unwrap();\n-        match self.state.compare_exchange(EMPTY, PARKED, SeqCst, SeqCst) {\n-            Ok(_) => {}\n-            Err(NOTIFIED) => {\n-                // We must read here, even though we know it will be `NOTIFIED`.\n-                // This is because `unpark` may have been called again since we read\n-                // `NOTIFIED` in the `compare_exchange` above. We must perform an\n-                // acquire operation that synchronizes with that `unpark` to observe\n-                // any writes it made before the call to unpark. To do that we must\n-                // read from the write it made to `state`.\n-                let old = self.state.swap(EMPTY, SeqCst);\n-                assert_eq!(old, NOTIFIED, \"park state changed unexpectedly\");\n-                return;\n-            } // should consume this notification, so prohibit spurious wakeups in next park.\n-            Err(_) => panic!(\"inconsistent park state\"),\n-        }\n-        loop {\n-            m = self.cvar.wait(m).unwrap();\n-            match self.state.compare_exchange(NOTIFIED, EMPTY, SeqCst, SeqCst) {\n-                Ok(_) => return, // got a notification\n-                Err(_) => {}     // spurious wakeup, go back to sleep\n-            }\n-        }\n-    }\n-\n-    // This implementation doesn't require `unsafe` and `Pin`, but other implementations do.\n-    pub unsafe fn park_timeout(self: Pin<&Self>, dur: Duration) {\n-        // Like `park` above we have a fast path for an already-notified thread, and\n-        // afterwards we start coordinating for a sleep.\n-        // return quickly.\n-        if self.state.compare_exchange(NOTIFIED, EMPTY, SeqCst, SeqCst).is_ok() {\n-            return;\n-        }\n-        let m = self.lock.lock().unwrap();\n-        match self.state.compare_exchange(EMPTY, PARKED, SeqCst, SeqCst) {\n-            Ok(_) => {}\n-            Err(NOTIFIED) => {\n-                // We must read again here, see `park`.\n-                let old = self.state.swap(EMPTY, SeqCst);\n-                assert_eq!(old, NOTIFIED, \"park state changed unexpectedly\");\n-                return;\n-            } // should consume this notification, so prohibit spurious wakeups in next park.\n-            Err(_) => panic!(\"inconsistent park_timeout state\"),\n-        }\n-\n-        // Wait with a timeout, and if we spuriously wake up or otherwise wake up\n-        // from a notification we just want to unconditionally set the state back to\n-        // empty, either consuming a notification or un-flagging ourselves as\n-        // parked.\n-        let (_m, _result) = self.cvar.wait_timeout(m, dur).unwrap();\n-        match self.state.swap(EMPTY, SeqCst) {\n-            NOTIFIED => {} // got a notification, hurray!\n-            PARKED => {}   // no notification, alas\n-            n => panic!(\"inconsistent park_timeout state: {n}\"),\n-        }\n-    }\n-\n-    // This implementation doesn't require `Pin`, but other implementations do.\n-    pub fn unpark(self: Pin<&Self>) {\n-        // To ensure the unparked thread will observe any writes we made\n-        // before this call, we must perform a release operation that `park`\n-        // can synchronize with. To do that we must write `NOTIFIED` even if\n-        // `state` is already `NOTIFIED`. That is why this must be a swap\n-        // rather than a compare-and-swap that returns if it reads `NOTIFIED`\n-        // on failure.\n-        match self.state.swap(NOTIFIED, SeqCst) {\n-            EMPTY => return,    // no one was waiting\n-            NOTIFIED => return, // already unparked\n-            PARKED => {}        // gotta go wake someone up\n-            _ => panic!(\"inconsistent state in unpark\"),\n-        }\n-\n-        // There is a period between when the parked thread sets `state` to\n-        // `PARKED` (or last checked `state` in the case of a spurious wake\n-        // up) and when it actually waits on `cvar`. If we were to notify\n-        // during this period it would be ignored and then when the parked\n-        // thread went to sleep it would never wake up. Fortunately, it has\n-        // `lock` locked at this stage so we can acquire `lock` to wait until\n-        // it is ready to receive the notification.\n-        //\n-        // Releasing `lock` before the call to `notify_one` means that when the\n-        // parked thread wakes it doesn't get woken only to have to wait for us\n-        // to release `lock`.\n-        drop(self.lock.lock().unwrap());\n-        self.cvar.notify_one()\n-    }\n-}"}, {"sha": "c4d3f9ea2f4272a406dd24197b2145068b118f1c", "filename": "library/std/src/sys_common/thread_parking/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parking%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parking%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parking%2Fmod.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -18,10 +18,7 @@ cfg_if::cfg_if! {\n     ))] {\n         mod id;\n         pub use id::Parker;\n-    } else if #[cfg(any(windows, target_family = \"unix\"))] {\n-        pub use crate::sys::thread_parking::Parker;\n     } else {\n-        mod generic;\n-        pub use generic::Parker;\n+        pub use crate::sys::thread_parking::Parker;\n     }\n }"}, {"sha": "ecef56f56f1d5feb95f731c5c2d9da25f1867fb9", "filename": "src/ci/docker/scripts/fuchsia-test-runner.py", "status": "modified", "additions": 45, "deletions": 92, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/src%2Fci%2Fdocker%2Fscripts%2Ffuchsia-test-runner.py", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/src%2Fci%2Fdocker%2Fscripts%2Ffuchsia-test-runner.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Ffuchsia-test-runner.py?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -168,85 +168,17 @@ def ffx_daemon_log_path(self):\n     def ffx_isolate_dir(self):\n         return os.path.join(self.tmp_dir(), \"ffx_isolate\")\n \n-    def ffx_home_dir(self):\n-        return os.path.join(self.ffx_isolate_dir(), \"user-home\")\n+    def home_dir(self):\n+        return os.path.join(self.tmp_dir(), \"user-home\")\n \n-    def ffx_tmp_dir(self):\n-        return os.path.join(self.ffx_isolate_dir(), \"tmp\")\n-\n-    def ffx_log_dir(self):\n-        return os.path.join(self.ffx_isolate_dir(), \"log\")\n-\n-    def ffx_user_config_dir(self):\n-        return os.path.join(self.ffx_xdg_config_home(), \"Fuchsia\", \"ffx\", \"config\")\n-\n-    def ffx_user_config_path(self):\n-        return os.path.join(self.ffx_user_config_dir(), \"config.json\")\n-\n-    def ffx_xdg_config_home(self):\n-        if platform.system() == \"Darwin\":\n-            return os.path.join(self.ffx_home_dir(), \"Library\", \"Preferences\")\n-        return os.path.join(self.ffx_home_dir(), \".local\", \"share\")\n-\n-    def ffx_ascendd_path(self):\n-        return os.path.join(self.ffx_tmp_dir(), \"ascendd\")\n \n     def start_ffx_isolation(self):\n         # Most of this is translated directly from ffx's isolate library\n         os.mkdir(self.ffx_isolate_dir())\n-        os.mkdir(self.ffx_home_dir())\n-        os.mkdir(self.ffx_tmp_dir())\n-        os.mkdir(self.ffx_log_dir())\n-\n-        fuchsia_dir = os.path.join(self.ffx_home_dir(), \".fuchsia\")\n-        os.mkdir(fuchsia_dir)\n-\n-        fuchsia_debug_dir = os.path.join(fuchsia_dir, \"debug\")\n-        os.mkdir(fuchsia_debug_dir)\n-\n-        metrics_dir = os.path.join(fuchsia_dir, \"metrics\")\n-        os.mkdir(metrics_dir)\n+        os.mkdir(self.home_dir())\n \n-        analytics_path = os.path.join(metrics_dir, \"analytics-status\")\n-        with open(analytics_path, \"w\", encoding=\"utf-8\") as analytics_file:\n-            print(\"0\", file=analytics_file)\n-\n-        ffx_path = os.path.join(metrics_dir, \"ffx\")\n-        with open(ffx_path, \"w\", encoding=\"utf-8\") as ffx_file:\n-            print(\"1\", file=ffx_file)\n-\n-        os.makedirs(self.ffx_user_config_dir())\n-\n-        with open(\n-            self.ffx_user_config_path(), \"w\", encoding=\"utf-8\"\n-        ) as config_json_file:\n-            user_config_for_test = {\n-                \"log\": {\n-                    \"enabled\": True,\n-                    \"dir\": self.ffx_log_dir(),\n-                },\n-                \"overnet\": {\n-                    \"socket\": self.ffx_ascendd_path(),\n-                },\n-                \"ssh\": {\n-                    \"pub\": self.ssh_authfile_path(),\n-                    \"priv\": self.ssh_keyfile_path(),\n-                },\n-                \"test\": {\n-                    \"is_isolated\": True,\n-                    \"experimental_structured_output\": True,\n-                },\n-            }\n-            print(json.dumps(user_config_for_test), file=config_json_file)\n-\n-        ffx_env_path = os.path.join(self.ffx_user_config_dir(), \".ffx_env\")\n-        with open(ffx_env_path, \"w\", encoding=\"utf-8\") as ffx_env_file:\n-            ffx_env_config_for_test = {\n-                \"user\": self.ffx_user_config_path(),\n-                \"build\": None,\n-                \"global\": None,\n-            }\n-            print(json.dumps(ffx_env_config_for_test), file=ffx_env_file)\n+        ffx_path = self.tool_path(\"ffx\")\n+        ffx_env = self.ffx_cmd_env()\n \n         # Start ffx daemon\n         # We want this to be a long-running process that persists after the script finishes\n@@ -256,38 +188,65 @@ def start_ffx_isolation(self):\n         ) as ffx_daemon_log_file:\n             subprocess.Popen(\n                 [\n-                    self.tool_path(\"ffx\"),\n-                    \"--config\",\n-                    self.ffx_user_config_path(),\n+                    ffx_path,\n                     \"daemon\",\n                     \"start\",\n                 ],\n-                env=self.ffx_cmd_env(),\n+                env=ffx_env,\n                 stdout=ffx_daemon_log_file,\n                 stderr=ffx_daemon_log_file,\n             )\n \n+        # Disable analytics\n+        subprocess.check_call(\n+            [\n+                ffx_path,\n+                \"config\",\n+                \"analytics\",\n+                \"disable\",\n+            ],\n+            env=ffx_env,\n+            stdout=self.subprocess_output(),\n+            stderr=self.subprocess_output(),\n+        )\n+\n+        # Set configs\n+        configs = {\n+            \"log.enabled\": \"true\",\n+            \"ssh.pub\": self.ssh_authfile_path(),\n+            \"ssh.priv\": self.ssh_keyfile_path(),\n+            \"test.is_isolated\": \"true\",\n+            \"test.experimental_structured_output\": \"true\",\n+        }\n+        for key, value in configs.items():\n+            subprocess.check_call(\n+                [\n+                    self.tool_path(\"ffx\"),\n+                    \"config\",\n+                    \"set\",\n+                    key,\n+                    value,\n+                ],\n+                env=self.ffx_cmd_env(),\n+                stdout=self.subprocess_output(),\n+                stderr=self.subprocess_output(),\n+            )\n+\n     def ffx_cmd_env(self):\n-        result = {\n-            \"HOME\": self.ffx_home_dir(),\n-            \"XDG_CONFIG_HOME\": self.ffx_xdg_config_home(),\n-            \"ASCENDD\": self.ffx_ascendd_path(),\n-            \"FUCHSIA_SSH_KEY\": self.ssh_keyfile_path(),\n+        return {\n+            \"HOME\": self.home_dir(),\n+            \"FFX_ISOLATE_DIR\": self.ffx_isolate_dir(),\n             # We want to use our own specified temp directory\n             \"TMP\": self.tmp_dir(),\n             \"TEMP\": self.tmp_dir(),\n             \"TMPDIR\": self.tmp_dir(),\n             \"TEMPDIR\": self.tmp_dir(),\n         }\n \n-        return result\n-\n     def stop_ffx_isolation(self):\n         subprocess.check_call(\n             [\n                 self.tool_path(\"ffx\"),\n-                \"--config\",\n-                self.ffx_user_config_path(),\n                 \"daemon\",\n                 \"stop\",\n             ],\n@@ -709,8 +668,6 @@ def log(msg):\n             subprocess.run(\n                 [\n                     self.tool_path(\"ffx\"),\n-                    \"--config\",\n-                    self.ffx_user_config_path(),\n                     \"test\",\n                     \"run\",\n                     f\"fuchsia-pkg://{self.TEST_REPO_NAME}/{package_name}#meta/{package_name}.cm\",\n@@ -849,8 +806,6 @@ def delete_tmp(self):\n     def debug(self, args):\n         command = [\n             self.tool_path(\"ffx\"),\n-            \"--config\",\n-            self.ffx_user_config_path(),\n             \"debug\",\n             \"connect\",\n             \"--\",\n@@ -948,8 +903,6 @@ def syslog(self, args):\n         subprocess.run(\n             [\n                 self.tool_path(\"ffx\"),\n-                \"--config\",\n-                self.ffx_user_config_path(),\n                 \"log\",\n                 \"--since\",\n                 \"now\","}, {"sha": "aa776daf09db63251e86d09647aff20544a1f7b1", "filename": "src/doc/unstable-book/src/compiler-flags/sanitizer.md", "status": "modified", "additions": 101, "deletions": 17, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -196,18 +196,18 @@ Shadow byte legend (one shadow byte represents 8 application bytes):\n \n # ControlFlowIntegrity\n \n-The LLVM Control Flow Integrity (CFI) support in the Rust compiler initially\n-provides forward-edge control flow protection for Rust-compiled code only by\n-aggregating function pointers in groups identified by their return and parameter\n-types.\n-\n-Forward-edge control flow protection for C or C++ and Rust -compiled code \"mixed\n-binaries\" (i.e., for when C or C++ and Rust -compiled code share the same\n-virtual address space) will be provided in later work by defining and using\n-compatible type identifiers (see Type metadata in the design document in the\n-tracking issue [#89653](https://github.com/rust-lang/rust/issues/89653)).\n-\n-LLVM CFI can be enabled with -Zsanitizer=cfi and requires LTO (i.e., -Clto).\n+The LLVM Control Flow Integrity (CFI) support in the Rust compiler provides\n+forward-edge control flow protection for both Rust-compiled code only and for C\n+or C++ and Rust -compiled code mixed-language binaries, also known as \u201cmixed\n+binaries\u201d (i.e., for when C or C++ and Rust -compiled code share the same\n+virtual address space), by aggregating function pointers in groups identified by\n+their return and parameter types.\n+\n+LLVM CFI can be enabled with `-Zsanitizer=cfi` and requires LTO (i.e., `-Clto`).\n+Cross-language LLVM CFI can be enabled with `-Zsanitizer=cfi`, and requires the\n+`-Zsanitizer-cfi-normalize-integers` option to be used with Clang\n+`-fsanitize-cfi-icall-normalize-integers` for normalizing integer types, and\n+proper (i.e., non-rustc) LTO (i.e., `-Clinker-plugin-lto`).\n \n See the [Clang ControlFlowIntegrity documentation][clang-cfi] for more details.\n \n@@ -343,7 +343,7 @@ $\n Fig. 5.\u2003Build and execution of the modified example with LLVM CFI disabled.\n \n ```shell\n-$ RUSTFLAGS=\"-Zsanitizer=cfi -Cembed-bitcode=yes -Clto\" cargo run --release\n+$ RUSTFLAGS=\"-Cembed-bitcode=yes -Clto -Zsanitizer=cfi\" cargo run --release\n    Compiling rust-cfi-2 v0.1.0 (/home/rcvalle/rust-cfi-2)\n     Finished release [optimized] target(s) in 3.38s\n      Running `target/release/rust-cfi-2`\n@@ -392,7 +392,7 @@ Closures][rust-book-ch19-05] chapter of the [The Rust Programming\n Language][rust-book] book.\n \n ```shell\n- cargo run --release\n+$ cargo run --release\n    Compiling rust-cfi-3 v0.1.0 (/home/rcvalle/rust-cfi-3)\n     Finished release [optimized] target(s) in 0.74s\n      Running `target/release/rust-cfi-3`\n@@ -404,7 +404,7 @@ $\n Fig. 8.\u2003Build and execution of the modified example with LLVM CFI disabled.\n \n ```shell\n-$ RUSTFLAGS=\"-Zsanitizer=cfi -Cembed-bitcode=yes -Clto\" cargo run --release\n+$ RUSTFLAGS=\"-Cembed-bitcode=yes -Clto -Zsanitizer=cfi\" cargo run --release\n    Compiling rust-cfi-3 v0.1.0 (/home/rcvalle/rust-cfi-3)\n     Finished release [optimized] target(s) in 3.40s\n      Running `target/release/rust-cfi-3`\n@@ -420,8 +420,92 @@ flow using an indirect branch/call to a function with different return and\n parameter types than the return type expected and arguments intended/passed in\n the call/branch site, the execution is also terminated (see Fig. 9).\n \n-[rust-book-ch19-05]: ../../book/ch19-05-advanced-functions-and-closures.html\n-[rust-book]: ../../book/title-page.html\n+```ignore (cannot-test-this-because-uses-custom-build)\n+int\n+do_twice(int (*fn)(int), int arg) {\n+    return fn(arg) + fn(arg);\n+}\n+```\n+Fig. 10.\u2003Example C library.\n+\n+```ignore (cannot-test-this-because-uses-custom-build)\n+use std::mem;\n+\n+#[link(name = \"foo\")]\n+extern \"C\" {\n+    fn do_twice(f: unsafe extern \"C\" fn(i32) -> i32, arg: i32) -> i32;\n+}\n+\n+unsafe extern \"C\" fn add_one(x: i32) -> i32 {\n+    x + 1\n+}\n+\n+unsafe extern \"C\" fn add_two(x: i64) -> i64 {\n+    x + 2\n+}\n+\n+fn main() {\n+    let answer = unsafe { do_twice(add_one, 5) };\n+\n+    println!(\"The answer is: {}\", answer);\n+\n+    println!(\"With CFI enabled, you should not see the next answer\");\n+    let f: unsafe extern \"C\" fn(i32) -> i32 = unsafe {\n+        mem::transmute::<*const u8, unsafe extern \"C\" fn(i32) -> i32>(add_two as *const u8)\n+    };\n+    let next_answer = unsafe { do_twice(f, 5) };\n+\n+    println!(\"The next answer is: {}\", next_answer);\n+}\n+```\n+Fig. 11.\u2003Another modified example from the [Advanced Functions and\n+Closures][rust-book-ch19-05] chapter of the [The Rust Programming\n+Language][rust-book] book.\n+\n+```shell\n+$ make\n+mkdir -p target/debug\n+clang -I. -Isrc -Wall -flto -fvisibility=hidden -c -emit-llvm src/foo.c -o target/debug/libfoo.bc\n+llvm-ar rcs target/debug/libfoo.a target/debug/libfoo.bc\n+RUSTFLAGS=\"-L./target/debug -Clinker-plugin-lto -Clinker=clang -Clink-arg=-fuse-ld=lld\" cargo build\n+   Compiling main v0.1.0 (/home/rcvalle/rust-cross-cfi-1)\n+    Finished dev [unoptimized + debuginfo] target(s) in 0.45s\n+$ ./target/debug/main\n+The answer is: 12\n+With CFI enabled, you should not see the next answer\n+The next answer is: 14\n+$\n+```\n+Fig. 12.\u2003Build and execution of the modified example with LLVM CFI disabled.\n+\n+```shell\n+$ make\n+mkdir -p target/debug\n+clang -I. -Isrc -Wall -flto -fvisibility=hidden -fsanitize=cfi -fsanitize-cfi-icall-normalize-integers -c -emit-llvm src/foo.c -o target/debug/libfoo.bc\n+llvm-ar rcs target/debug/libfoo.a target/debug/libfoo.bc\n+RUSTFLAGS=\"-L./target/debug -Clinker-plugin-lto -Clinker=clang -Clink-arg=-fuse-ld=lld -Zsanitizer=cfi -Zsanitizer-cfi-normalize-integers\" cargo build\n+   Compiling main v0.1.0 (/home/rcvalle/rust-cross-cfi-1)\n+    Finished dev [unoptimized + debuginfo] target(s) in 0.45s\n+$ ./target/debug/main\n+The answer is: 12\n+With CFI enabled, you should not see the next answer\n+Illegal instruction\n+$\n+```\n+Fig. 13.\u2003Build and execution of the modified example with LLVM CFI enabled.\n+\n+When LLVM CFI is enabled, if there are any attempts to change/hijack control\n+flow using an indirect branch/call to a function with different return and\n+parameter types than the return type expected and arguments intended/passed in\n+the call/branch site, even across the FFI boundary and for extern \"C\" function\n+types indirectly called (i.e., callbacks/function pointers) across the FFI\n+boundary, in C or C++ and Rust -compiled code mixed-language binaries, also\n+known as \u201cmixed binaries\u201d (i.e., for when C or C++ and Rust -compiled code share\n+the same virtual address space), the execution is also terminated (see Fig. 13).\n+\n+\n+[rust-book-ch19-05]: https://doc.rust-lang.org/book/ch19-05-advanced-functions-and-closures.html\n+[rust-book]: https://doc.rust-lang.org/book/title-page.html\n \n # HWAddressSanitizer\n "}, {"sha": "f2f74cc17b3de1b680287ad85f20f8f501967f62", "filename": "src/doc/unstable-book/src/language-features/cfi-encoding.md", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcfi-encoding.md", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcfi-encoding.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcfi-encoding.md?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -0,0 +1,25 @@\n+# `cfi_encoding`\n+\n+The tracking issue for this feature is: [#89653]\n+\n+[#89653]: https://github.com/rust-lang/rust/issues/89653\n+\n+------------------------\n+\n+The `cfi_encoding` feature allows the user to define a CFI encoding for a type.\n+It allows the user to use a different names for types that otherwise would be\n+required to have the same name as used in externally defined C functions.\n+\n+## Examples\n+\n+```rust\n+#![feature(cfi_encoding, extern_types)]\n+\n+#[cfi_encoding = \"3Foo\"]\n+pub struct Type1(i32);\n+\n+extern {\n+    #[cfi_encoding = \"3Bar\"]\n+    type Type2;\n+}\n+```"}, {"sha": "a7d5f497756b58fda25ac01e058235f661f55408", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -1259,6 +1259,10 @@ a.tooltip:hover::after {\n \tbackground-color: var(--search-error-code-background-color);\n }\n \n+.search-corrections {\n+\tfont-weight: normal;\n+}\n+\n #src-sidebar-toggle {\n \tposition: sticky;\n \ttop: 0;"}, {"sha": "8b931f74e600a074b68621ba5291355236497839", "filename": "src/librustdoc/html/static/js/externs.js", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fexterns.js", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fexterns.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fexterns.js?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -9,6 +9,7 @@ function initSearch(searchIndex){}\n /**\n  * @typedef {{\n  *     name: string,\n+ *     id: integer,\n  *     fullPath: Array<string>,\n  *     pathWithoutLast: Array<string>,\n  *     pathLast: string,\n@@ -36,6 +37,8 @@ let ParserState;\n  *     args: Array<QueryElement>,\n  *     returned: Array<QueryElement>,\n  *     foundElems: number,\n+ *     literalSearch: boolean,\n+ *     corrections: Array<{from: string, to: integer}>,\n  * }}\n  */\n let ParsedQuery;\n@@ -139,7 +142,7 @@ let FunctionSearchType;\n \n /**\n  * @typedef {{\n- *     name: (null|string),\n+ *     id: (null|number),\n  *     ty: (null|number),\n  *     generics: Array<FunctionType>,\n  * }}"}, {"sha": "62afe40bb31553d94ec35d0ea5f8ee6c1dfa41eb", "filename": "src/librustdoc/html/static/js/search.js", "status": "modified", "additions": 224, "deletions": 196, "changes": 420, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -58,6 +58,7 @@ function printTab(nb) {\n         }\n         iter += 1;\n     });\n+    const isTypeSearch = (nb > 0 || iter === 1);\n     iter = 0;\n     onEachLazy(document.getElementById(\"results\").childNodes, elem => {\n         if (nb === iter) {\n@@ -70,6 +71,13 @@ function printTab(nb) {\n     });\n     if (foundCurrentTab && foundCurrentResultSet) {\n         searchState.currentTab = nb;\n+        // Corrections only kick in on type-based searches.\n+        const correctionsElem = document.getElementsByClassName(\"search-corrections\");\n+        if (isTypeSearch) {\n+            removeClass(correctionsElem[0], \"hidden\");\n+        } else {\n+            addClass(correctionsElem[0], \"hidden\");\n+        }\n     } else if (nb !== 0) {\n         printTab(0);\n     }\n@@ -191,6 +199,13 @@ function initSearch(rawSearchIndex) {\n      */\n     let searchIndex;\n     let currentResults;\n+    /**\n+     * Map from normalized type names to integers. Used to make type search\n+     * more efficient.\n+     *\n+     * @type {Map<string, integer>}\n+     */\n+    let typeNameIdMap;\n     const ALIASES = new Map();\n \n     function isWhitespace(c) {\n@@ -358,6 +373,7 @@ function initSearch(rawSearchIndex) {\n         parserState.typeFilter = null;\n         return {\n             name: name,\n+            id: -1,\n             fullPath: pathSegments,\n             pathWithoutLast: pathSegments.slice(0, pathSegments.length - 1),\n             pathLast: pathSegments[pathSegments.length - 1],\n@@ -718,6 +734,7 @@ function initSearch(rawSearchIndex) {\n             foundElems: 0,\n             literalSearch: false,\n             error: null,\n+            correction: null,\n         };\n     }\n \n@@ -873,7 +890,7 @@ function initSearch(rawSearchIndex) {\n      *\n      * @param {Array<Result>} results_in_args\n      * @param {Array<Result>} results_returned\n-     * @param {Array<Result>} results_in_args\n+     * @param {Array<Result>} results_others\n      * @param {ParsedQuery} parsedQuery\n      *\n      * @return {ResultsTable}\n@@ -1091,48 +1108,50 @@ function initSearch(rawSearchIndex) {\n          *\n          * @param {Row} row                 - The object to check.\n          * @param {QueryElement} elem       - The element from the parsed query.\n-         * @param {integer} defaultDistance - This is the value to return in case there are no\n-         *                                    generics.\n          *\n-         * @return {integer}           - Returns the best match (if any) or `maxEditDistance + 1`.\n+         * @return {boolean}           - Returns true if a match, false otherwise.\n          */\n-        function checkGenerics(row, elem, defaultDistance, maxEditDistance) {\n-            if (row.generics.length === 0) {\n-                return elem.generics.length === 0 ? defaultDistance : maxEditDistance + 1;\n-            } else if (row.generics.length > 0 && row.generics[0].name === null) {\n-                return checkGenerics(row.generics[0], elem, defaultDistance, maxEditDistance);\n-            }\n-            // The names match, but we need to be sure that all generics kinda\n-            // match as well.\n+        function checkGenerics(row, elem) {\n+            if (row.generics.length === 0 || elem.generics.length === 0) {\n+                return false;\n+            }\n+            // This function is called if the names match, but we need to make\n+            // sure that all generics match as well.\n+            //\n+            // This search engine implements order-agnostic unification. There\n+            // should be no missing duplicates (generics have \"bag semantics\"),\n+            // and the row is allowed to have extras.\n             if (elem.generics.length > 0 && row.generics.length >= elem.generics.length) {\n                 const elems = new Map();\n-                for (const entry of row.generics) {\n-                    if (entry.name === \"\") {\n+                const addEntryToElems = function addEntryToElems(entry) {\n+                    if (entry.id === -1) {\n                         // Pure generic, needs to check into it.\n-                        if (checkGenerics(entry, elem, maxEditDistance + 1, maxEditDistance)\n-                            !== 0) {\n-                            return maxEditDistance + 1;\n+                        for (const inner_entry of entry.generics) {\n+                            addEntryToElems(inner_entry);\n                         }\n-                        continue;\n+                        return;\n                     }\n                     let currentEntryElems;\n-                    if (elems.has(entry.name)) {\n-                        currentEntryElems = elems.get(entry.name);\n+                    if (elems.has(entry.id)) {\n+                        currentEntryElems = elems.get(entry.id);\n                     } else {\n                         currentEntryElems = [];\n-                        elems.set(entry.name, currentEntryElems);\n+                        elems.set(entry.id, currentEntryElems);\n                     }\n                     currentEntryElems.push(entry);\n+                };\n+                for (const entry of row.generics) {\n+                    addEntryToElems(entry);\n                 }\n                 // We need to find the type that matches the most to remove it in order\n                 // to move forward.\n                 const handleGeneric = generic => {\n-                    if (!elems.has(generic.name)) {\n+                    if (!elems.has(generic.id)) {\n                         return false;\n                     }\n-                    const matchElems = elems.get(generic.name);\n+                    const matchElems = elems.get(generic.id);\n                     const matchIdx = matchElems.findIndex(tmp_elem => {\n-                        if (checkGenerics(tmp_elem, generic, 0, maxEditDistance) !== 0) {\n+                        if (generic.generics.length > 0 && !checkGenerics(tmp_elem, generic)) {\n                             return false;\n                         }\n                         return typePassesFilter(generic.typeFilter, tmp_elem.ty);\n@@ -1142,7 +1161,7 @@ function initSearch(rawSearchIndex) {\n                     }\n                     matchElems.splice(matchIdx, 1);\n                     if (matchElems.length === 0) {\n-                        elems.delete(generic.name);\n+                        elems.delete(generic.id);\n                     }\n                     return true;\n                 };\n@@ -1152,17 +1171,17 @@ function initSearch(rawSearchIndex) {\n                 // own type.\n                 for (const generic of elem.generics) {\n                     if (generic.typeFilter !== -1 && !handleGeneric(generic)) {\n-                        return maxEditDistance + 1;\n+                        return false;\n                     }\n                 }\n                 for (const generic of elem.generics) {\n                     if (generic.typeFilter === -1 && !handleGeneric(generic)) {\n-                        return maxEditDistance + 1;\n+                        return false;\n                     }\n                 }\n-                return 0;\n+                return true;\n             }\n-            return maxEditDistance + 1;\n+            return false;\n         }\n \n         /**\n@@ -1172,17 +1191,15 @@ function initSearch(rawSearchIndex) {\n           * @param {Row} row\n           * @param {QueryElement} elem    - The element from the parsed query.\n           *\n-          * @return {integer} - Returns an edit distance to the best match.\n+          * @return {boolean} - Returns true if found, false otherwise.\n           */\n-        function checkIfInGenerics(row, elem, maxEditDistance) {\n-            let dist = maxEditDistance + 1;\n+        function checkIfInGenerics(row, elem) {\n             for (const entry of row.generics) {\n-                dist = Math.min(checkType(entry, elem, true, maxEditDistance), dist);\n-                if (dist === 0) {\n-                    break;\n+                if (checkType(entry, elem)) {\n+                    return true;\n                 }\n             }\n-            return dist;\n+            return false;\n         }\n \n         /**\n@@ -1191,162 +1208,78 @@ function initSearch(rawSearchIndex) {\n           *\n           * @param {Row} row\n           * @param {QueryElement} elem      - The element from the parsed query.\n-          * @param {boolean} literalSearch\n           *\n-          * @return {integer} - Returns an edit distance to the best match. If there is\n-          *                     no match, returns `maxEditDistance + 1`.\n+          * @return {boolean} - Returns true if the type matches, false otherwise.\n           */\n-        function checkType(row, elem, literalSearch, maxEditDistance) {\n-            if (row.name === null) {\n+        function checkType(row, elem) {\n+            if (row.id === -1) {\n                 // This is a pure \"generic\" search, no need to run other checks.\n-                if (row.generics.length > 0) {\n-                    return checkIfInGenerics(row, elem, maxEditDistance);\n-                }\n-                return maxEditDistance + 1;\n+                return row.generics.length > 0 ? checkIfInGenerics(row, elem) : false;\n             }\n \n-            let dist;\n-            if (typePassesFilter(elem.typeFilter, row.ty)) {\n-                dist = editDistance(row.name, elem.name, maxEditDistance);\n-            } else {\n-                dist = maxEditDistance + 1;\n-            }\n-            if (literalSearch) {\n-                if (dist !== 0) {\n-                    // The name didn't match, let's try to check if the generics do.\n-                    if (elem.generics.length === 0) {\n-                        const checkGeneric = row.generics.length > 0;\n-                        if (checkGeneric && row.generics\n-                            .findIndex(tmp_elem => tmp_elem.name === elem.name &&\n-                                typePassesFilter(elem.typeFilter, tmp_elem.ty)) !== -1) {\n-                            return 0;\n-                        }\n-                    }\n-                    return maxEditDistance + 1;\n-                } else if (elem.generics.length > 0) {\n-                    return checkGenerics(row, elem, maxEditDistance + 1, maxEditDistance);\n-                }\n-                return 0;\n-            } else if (row.generics.length > 0) {\n-                if (elem.generics.length === 0) {\n-                    if (dist === 0) {\n-                        return 0;\n-                    }\n-                    // The name didn't match so we now check if the type we're looking for is inside\n-                    // the generics!\n-                    dist = Math.min(dist, checkIfInGenerics(row, elem, maxEditDistance));\n-                    return dist;\n-                } else if (dist > maxEditDistance) {\n-                    // So our item's name doesn't match at all and has generics.\n-                    //\n-                    // Maybe it's present in a sub generic? For example \"f<A<B<C>>>()\", if we're\n-                    // looking for \"B<C>\", we'll need to go down.\n-                    return checkIfInGenerics(row, elem, maxEditDistance);\n-                } else {\n-                    // At this point, the name kinda match and we have generics to check, so\n-                    // let's go!\n-                    const tmp_dist = checkGenerics(row, elem, dist, maxEditDistance);\n-                    if (tmp_dist > maxEditDistance) {\n-                        return maxEditDistance + 1;\n-                    }\n-                    // We compute the median value of both checks and return it.\n-                    return (tmp_dist + dist) / 2;\n+            if (row.id === elem.id && typePassesFilter(elem.typeFilter, row.ty)) {\n+                if (elem.generics.length > 0) {\n+                    return checkGenerics(row, elem);\n                 }\n-            } else if (elem.generics.length > 0) {\n-                // In this case, we were expecting generics but there isn't so we simply reject this\n-                // one.\n-                return maxEditDistance + 1;\n+                return true;\n             }\n-            // No generics on our query or on the target type so we can return without doing\n-            // anything else.\n-            return dist;\n+\n+            // If the current item does not match, try [unboxing] the generic.\n+            // [unboxing]:\n+            //   https://ndmitchell.com/downloads/slides-hoogle_fast_type_searching-09_aug_2008.pdf\n+            return checkIfInGenerics(row, elem);\n         }\n \n         /**\n          * This function checks if the object (`row`) has an argument with the given type (`elem`).\n          *\n          * @param {Row} row\n          * @param {QueryElement} elem    - The element from the parsed query.\n-         * @param {integer} maxEditDistance\n          * @param {Array<integer>} skipPositions - Do not return one of these positions.\n          *\n-         * @return {dist: integer, position: integer} - Returns an edit distance to the best match.\n-         *                                              If there is no match, returns\n-         *                                              `maxEditDistance + 1` and position: -1.\n+         * @return {integer} - Returns the position of the match, or -1 if none.\n          */\n-        function findArg(row, elem, maxEditDistance, skipPositions) {\n-            let dist = maxEditDistance + 1;\n-            let position = -1;\n-\n+        function findArg(row, elem, skipPositions) {\n             if (row && row.type && row.type.inputs && row.type.inputs.length > 0) {\n                 let i = 0;\n                 for (const input of row.type.inputs) {\n                     if (skipPositions.indexOf(i) !== -1) {\n                         i += 1;\n                         continue;\n                     }\n-                    const typeDist = checkType(\n-                        input,\n-                        elem,\n-                        parsedQuery.literalSearch,\n-                        maxEditDistance\n-                    );\n-                    if (typeDist === 0) {\n-                        return {dist: 0, position: i};\n-                    }\n-                    if (typeDist < dist) {\n-                        dist = typeDist;\n-                        position = i;\n+                    if (checkType(input, elem)) {\n+                        return i;\n                     }\n                     i += 1;\n                 }\n             }\n-            dist = parsedQuery.literalSearch ? maxEditDistance + 1 : dist;\n-            return {dist, position};\n+            return -1;\n         }\n \n         /**\n          * This function checks if the object (`row`) returns the given type (`elem`).\n          *\n          * @param {Row} row\n          * @param {QueryElement} elem   - The element from the parsed query.\n-         * @param {integer} maxEditDistance\n          * @param {Array<integer>} skipPositions - Do not return one of these positions.\n          *\n-         * @return {dist: integer, position: integer} - Returns an edit distance to the best match.\n-         *                                              If there is no match, returns\n-         *                                              `maxEditDistance + 1` and position: -1.\n+         * @return {integer} - Returns the position of the matching item, or -1 if none.\n          */\n-        function checkReturned(row, elem, maxEditDistance, skipPositions) {\n-            let dist = maxEditDistance + 1;\n-            let position = -1;\n-\n+        function checkReturned(row, elem, skipPositions) {\n             if (row && row.type && row.type.output.length > 0) {\n-                const ret = row.type.output;\n                 let i = 0;\n-                for (const ret_ty of ret) {\n+                for (const ret_ty of row.type.output) {\n                     if (skipPositions.indexOf(i) !== -1) {\n                         i += 1;\n                         continue;\n                     }\n-                    const typeDist = checkType(\n-                        ret_ty,\n-                        elem,\n-                        parsedQuery.literalSearch,\n-                        maxEditDistance\n-                    );\n-                    if (typeDist === 0) {\n-                        return {dist: 0, position: i};\n-                    }\n-                    if (typeDist < dist) {\n-                        dist = typeDist;\n-                        position = i;\n+                    if (checkType(ret_ty, elem)) {\n+                        return i;\n                     }\n                     i += 1;\n                 }\n             }\n-            dist = parsedQuery.literalSearch ? maxEditDistance + 1 : dist;\n-            return {dist, position};\n+            return -1;\n         }\n \n         function checkPath(contains, ty, maxEditDistance) {\n@@ -1543,17 +1476,20 @@ function initSearch(rawSearchIndex) {\n             if (!row || (filterCrates !== null && row.crate !== filterCrates)) {\n                 return;\n             }\n-            let dist, index = -1, path_dist = 0;\n+            let index = -1, path_dist = 0;\n             const fullId = row.id;\n             const searchWord = searchWords[pos];\n \n-            const in_args = findArg(row, elem, maxEditDistance, []);\n-            const returned = checkReturned(row, elem, maxEditDistance, []);\n-\n-            // path_dist is 0 because no parent path information is currently stored\n-            // in the search index\n-            addIntoResults(results_in_args, fullId, pos, -1, in_args.dist, 0, maxEditDistance);\n-            addIntoResults(results_returned, fullId, pos, -1, returned.dist, 0, maxEditDistance);\n+            const in_args = findArg(row, elem, []);\n+            if (in_args !== -1) {\n+                // path_dist is 0 because no parent path information is currently stored\n+                // in the search index\n+                addIntoResults(results_in_args, fullId, pos, -1, 0, 0, maxEditDistance);\n+            }\n+            const returned = checkReturned(row, elem, []);\n+            if (returned !== -1) {\n+                addIntoResults(results_returned, fullId, pos, -1, 0, 0, maxEditDistance);\n+            }\n \n             if (!typePassesFilter(elem.typeFilter, row.ty)) {\n                 return;\n@@ -1574,16 +1510,6 @@ function initSearch(rawSearchIndex) {\n                 index = row_index;\n             }\n \n-            // No need to check anything else if it's a \"pure\" generics search.\n-            if (elem.name.length === 0) {\n-                if (row.type !== null) {\n-                    dist = checkGenerics(row.type, elem, maxEditDistance + 1, maxEditDistance);\n-                    // path_dist is 0 because we know it's empty\n-                    addIntoResults(results_others, fullId, pos, index, dist, 0, maxEditDistance);\n-                }\n-                return;\n-            }\n-\n             if (elem.fullPath.length > 1) {\n                 path_dist = checkPath(elem.pathWithoutLast, row, maxEditDistance);\n                 if (path_dist > maxEditDistance) {\n@@ -1598,7 +1524,7 @@ function initSearch(rawSearchIndex) {\n                 return;\n             }\n \n-            dist = editDistance(searchWord, elem.pathLast, maxEditDistance);\n+            const dist = editDistance(searchWord, elem.pathLast, maxEditDistance);\n \n             if (index === -1 && dist + path_dist > maxEditDistance) {\n                 return;\n@@ -1616,28 +1542,22 @@ function initSearch(rawSearchIndex) {\n          * @param {integer} pos      - Position in the `searchIndex`.\n          * @param {Object} results\n          */\n-        function handleArgs(row, pos, results, maxEditDistance) {\n+        function handleArgs(row, pos, results) {\n             if (!row || (filterCrates !== null && row.crate !== filterCrates)) {\n                 return;\n             }\n \n-            let totalDist = 0;\n-            let nbDist = 0;\n-\n             // If the result is too \"bad\", we return false and it ends this search.\n             function checkArgs(elems, callback) {\n                 const skipPositions = [];\n                 for (const elem of elems) {\n                     // There is more than one parameter to the query so all checks should be \"exact\"\n-                    const { dist, position } = callback(\n+                    const position = callback(\n                         row,\n                         elem,\n-                        maxEditDistance,\n                         skipPositions\n                     );\n-                    if (dist <= 1) {\n-                        nbDist += 1;\n-                        totalDist += dist;\n+                    if (position !== -1) {\n                         skipPositions.push(position);\n                     } else {\n                         return false;\n@@ -1652,11 +1572,7 @@ function initSearch(rawSearchIndex) {\n                 return;\n             }\n \n-            if (nbDist === 0) {\n-                return;\n-            }\n-            const dist = Math.round(totalDist / nbDist);\n-            addIntoResults(results, row.id, pos, 0, dist, 0, maxEditDistance);\n+            addIntoResults(results, row.id, pos, 0, 0, 0, Number.MAX_VALUE);\n         }\n \n         function innerRunQuery() {\n@@ -1671,6 +1587,53 @@ function initSearch(rawSearchIndex) {\n             }\n             const maxEditDistance = Math.floor(queryLen / 3);\n \n+            /**\n+             * Convert names to ids in parsed query elements.\n+             * This is not used for the \"In Names\" tab, but is used for the\n+             * \"In Params\", \"In Returns\", and \"In Function Signature\" tabs.\n+             *\n+             * If there is no matching item, but a close-enough match, this\n+             * function also that correction.\n+             *\n+             * See `buildTypeMapIndex` for more information.\n+             *\n+             * @param {QueryElement} elem\n+             */\n+            function convertNameToId(elem) {\n+                if (typeNameIdMap.has(elem.name)) {\n+                    elem.id = typeNameIdMap.get(elem.name);\n+                } else if (!parsedQuery.literalSearch) {\n+                    let match = -1;\n+                    let matchDist = maxEditDistance + 1;\n+                    let matchName = \"\";\n+                    for (const [name, id] of typeNameIdMap) {\n+                        const dist = editDistance(name, elem.name, maxEditDistance);\n+                        if (dist <= matchDist && dist <= maxEditDistance) {\n+                            if (dist === matchDist && matchName > name) {\n+                                continue;\n+                            }\n+                            match = id;\n+                            matchDist = dist;\n+                            matchName = name;\n+                        }\n+                    }\n+                    if (match !== -1) {\n+                        parsedQuery.correction = matchName;\n+                    }\n+                    elem.id = match;\n+                }\n+                for (const elem2 of elem.generics) {\n+                    convertNameToId(elem2);\n+                }\n+            }\n+\n+            for (const elem of parsedQuery.elems) {\n+                convertNameToId(elem);\n+            }\n+            for (const elem of parsedQuery.returned) {\n+                convertNameToId(elem);\n+            }\n+\n             if (parsedQuery.foundElems === 1) {\n                 if (parsedQuery.elems.length === 1) {\n                     elem = parsedQuery.elems[0];\n@@ -1695,22 +1658,23 @@ function initSearch(rawSearchIndex) {\n                         in_returned = checkReturned(\n                             row,\n                             elem,\n-                            maxEditDistance,\n                             []\n                         );\n-                        addIntoResults(\n-                            results_others,\n-                            row.id,\n-                            i,\n-                            -1,\n-                            in_returned.dist,\n-                            maxEditDistance\n-                        );\n+                        if (in_returned !== -1) {\n+                            addIntoResults(\n+                                results_others,\n+                                row.id,\n+                                i,\n+                                -1,\n+                                0,\n+                                Number.MAX_VALUE\n+                            );\n+                        }\n                     }\n                 }\n             } else if (parsedQuery.foundElems > 0) {\n                 for (i = 0, nSearchWords = searchWords.length; i < nSearchWords; ++i) {\n-                    handleArgs(searchIndex[i], i, results_others, maxEditDistance);\n+                    handleArgs(searchIndex[i], i, results_others);\n                 }\n             }\n         }\n@@ -2030,6 +1994,16 @@ function initSearch(rawSearchIndex) {\n             currentTab = 0;\n         }\n \n+        if (results.query.correction !== null) {\n+            const orig = results.query.returned.length > 0\n+                ? results.query.returned[0].name\n+                : results.query.elems[0].name;\n+            output += \"<h3 class=\\\"search-corrections\\\">\" +\n+                `Type \"${orig}\" not found. ` +\n+                \"Showing results for closest type name \" +\n+                `\"${results.query.correction}\" instead.</h3>`;\n+        }\n+\n         const resultsElem = document.createElement(\"div\");\n         resultsElem.id = \"results\";\n         resultsElem.appendChild(ret_others[0]);\n@@ -2108,6 +2082,34 @@ function initSearch(rawSearchIndex) {\n             filterCrates);\n     }\n \n+    /**\n+     * Add an item to the type Name->ID map, or, if one already exists, use it.\n+     * Returns the number. If name is \"\" or null, return -1 (pure generic).\n+     *\n+     * This is effectively string interning, so that function matching can be\n+     * done more quickly. Two types with the same name but different item kinds\n+     * get the same ID.\n+     *\n+     * @param {Map<string, integer>} typeNameIdMap\n+     * @param {string} name\n+     *\n+     * @returns {integer}\n+     */\n+    function buildTypeMapIndex(typeNameIdMap, name) {\n+\n+        if (name === \"\" || name === null) {\n+            return -1;\n+        }\n+\n+        if (typeNameIdMap.has(name)) {\n+            return typeNameIdMap.get(name);\n+        } else {\n+            const id = typeNameIdMap.size;\n+            typeNameIdMap.set(name, id);\n+            return id;\n+        }\n+    }\n+\n     /**\n      * Convert a list of RawFunctionType / ID to object-based FunctionType.\n      *\n@@ -2126,7 +2128,7 @@ function initSearch(rawSearchIndex) {\n      *\n      * @return {Array<FunctionSearchType>}\n      */\n-    function buildItemSearchTypeAll(types, lowercasePaths) {\n+    function buildItemSearchTypeAll(types, lowercasePaths, typeNameIdMap) {\n         const PATH_INDEX_DATA = 0;\n         const GENERICS_DATA = 1;\n         return types.map(type => {\n@@ -2136,11 +2138,17 @@ function initSearch(rawSearchIndex) {\n                 generics = [];\n             } else {\n                 pathIndex = type[PATH_INDEX_DATA];\n-                generics = buildItemSearchTypeAll(type[GENERICS_DATA], lowercasePaths);\n+                generics = buildItemSearchTypeAll(\n+                    type[GENERICS_DATA],\n+                    lowercasePaths,\n+                    typeNameIdMap\n+                );\n             }\n             return {\n                 // `0` is used as a sentinel because it's fewer bytes than `null`\n-                name: pathIndex === 0 ? null : lowercasePaths[pathIndex - 1].name,\n+                id: pathIndex === 0\n+                    ? -1\n+                    : buildTypeMapIndex(typeNameIdMap, lowercasePaths[pathIndex - 1].name),\n                 ty: pathIndex === 0 ? null : lowercasePaths[pathIndex - 1].ty,\n                 generics: generics,\n             };\n@@ -2159,10 +2167,11 @@ function initSearch(rawSearchIndex) {\n      *\n      * @param {RawFunctionSearchType} functionSearchType\n      * @param {Array<{name: string, ty: number}>} lowercasePaths\n+     * @param {Map<string, integer>}\n      *\n      * @return {null|FunctionSearchType}\n      */\n-    function buildFunctionSearchType(functionSearchType, lowercasePaths) {\n+    function buildFunctionSearchType(functionSearchType, lowercasePaths, typeNameIdMap) {\n         const INPUTS_DATA = 0;\n         const OUTPUT_DATA = 1;\n         // `0` is used as a sentinel because it's fewer bytes than `null`\n@@ -2173,23 +2182,35 @@ function initSearch(rawSearchIndex) {\n         if (typeof functionSearchType[INPUTS_DATA] === \"number\") {\n             const pathIndex = functionSearchType[INPUTS_DATA];\n             inputs = [{\n-                name: pathIndex === 0 ? null : lowercasePaths[pathIndex - 1].name,\n+                id: pathIndex === 0\n+                    ? -1\n+                    : buildTypeMapIndex(typeNameIdMap, lowercasePaths[pathIndex - 1].name),\n                 ty: pathIndex === 0 ? null : lowercasePaths[pathIndex - 1].ty,\n                 generics: [],\n             }];\n         } else {\n-            inputs = buildItemSearchTypeAll(functionSearchType[INPUTS_DATA], lowercasePaths);\n+            inputs = buildItemSearchTypeAll(\n+                functionSearchType[INPUTS_DATA],\n+                lowercasePaths,\n+                typeNameIdMap\n+            );\n         }\n         if (functionSearchType.length > 1) {\n             if (typeof functionSearchType[OUTPUT_DATA] === \"number\") {\n                 const pathIndex = functionSearchType[OUTPUT_DATA];\n                 output = [{\n-                    name: pathIndex === 0 ? null : lowercasePaths[pathIndex - 1].name,\n+                    id: pathIndex === 0\n+                        ? -1\n+                        : buildTypeMapIndex(typeNameIdMap, lowercasePaths[pathIndex - 1].name),\n                     ty: pathIndex === 0 ? null : lowercasePaths[pathIndex - 1].ty,\n                     generics: [],\n                 }];\n             } else {\n-                output = buildItemSearchTypeAll(functionSearchType[OUTPUT_DATA], lowercasePaths);\n+                output = buildItemSearchTypeAll(\n+                    functionSearchType[OUTPUT_DATA],\n+                    lowercasePaths,\n+                    typeNameIdMap\n+                );\n             }\n         } else {\n             output = [];\n@@ -2202,9 +2223,12 @@ function initSearch(rawSearchIndex) {\n     function buildIndex(rawSearchIndex) {\n         searchIndex = [];\n         /**\n+         * List of normalized search words (ASCII lowercased, and undescores removed).\n+         *\n          * @type {Array<string>}\n          */\n         const searchWords = [];\n+        typeNameIdMap = new Map();\n         const charA = \"A\".charCodeAt(0);\n         let currentIndex = 0;\n         let id = 0;\n@@ -2337,7 +2361,11 @@ function initSearch(rawSearchIndex) {\n                     path: itemPaths.has(i) ? itemPaths.get(i) : lastPath,\n                     desc: itemDescs[i],\n                     parent: itemParentIdxs[i] > 0 ? paths[itemParentIdxs[i] - 1] : undefined,\n-                    type: buildFunctionSearchType(itemFunctionSearchTypes[i], lowercasePaths),\n+                    type: buildFunctionSearchType(\n+                        itemFunctionSearchTypes[i],\n+                        lowercasePaths,\n+                        typeNameIdMap\n+                    ),\n                     id: id,\n                     normalizedName: word.indexOf(\"_\") === -1 ? word : word.replace(/_/g, \"\"),\n                     deprecated: deprecatedItems.has(i),"}, {"sha": "270704ebffde61aa858ec1a61c29fd7f5db5697d", "filename": "src/tools/rustdoc-js/tester.js", "status": "modified", "additions": 46, "deletions": 8, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/src%2Ftools%2Frustdoc-js%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/src%2Ftools%2Frustdoc-js%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-js%2Ftester.js?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -226,6 +226,24 @@ function runSearch(query, expected, doSearch, loadedFile, queryName) {\n     return error_text;\n }\n \n+function runCorrections(query, corrections, getCorrections, loadedFile) {\n+    const qc = getCorrections(query, loadedFile.FILTER_CRATE);\n+    const error_text = [];\n+\n+    if (corrections === null) {\n+        if (qc !== null) {\n+            error_text.push(`==> expected = null, found = ${qc}`);\n+        }\n+        return error_text;\n+    }\n+\n+    if (qc !== corrections.toLowerCase()) {\n+        error_text.push(`==> expected = ${corrections}, found = ${qc}`);\n+    }\n+\n+    return error_text;\n+}\n+\n function checkResult(error_text, loadedFile, displaySuccess) {\n     if (error_text.length === 0 && loadedFile.should_fail === true) {\n         console.log(\"FAILED\");\n@@ -272,9 +290,10 @@ function runCheck(loadedFile, key, callback) {\n     return 0;\n }\n \n-function runChecks(testFile, doSearch, parseQuery) {\n+function runChecks(testFile, doSearch, parseQuery, getCorrections) {\n     let checkExpected = false;\n     let checkParsed = false;\n+    let checkCorrections = false;\n     let testFileContent = readFile(testFile) + \"exports.QUERY = QUERY;\";\n \n     if (testFileContent.indexOf(\"FILTER_CRATE\") !== -1) {\n@@ -291,9 +310,13 @@ function runChecks(testFile, doSearch, parseQuery) {\n         testFileContent += \"exports.PARSED = PARSED;\";\n         checkParsed = true;\n     }\n-    if (!checkParsed && !checkExpected) {\n+    if (testFileContent.indexOf(\"\\nconst CORRECTIONS\") !== -1) {\n+        testFileContent += \"exports.CORRECTIONS = CORRECTIONS;\";\n+        checkCorrections = true;\n+    }\n+    if (!checkParsed && !checkExpected && !checkCorrections) {\n         console.log(\"FAILED\");\n-        console.log(\"==> At least `PARSED` or `EXPECTED` is needed!\");\n+        console.log(\"==> At least `PARSED`, `EXPECTED`, or `CORRECTIONS` is needed!\");\n         return 1;\n     }\n \n@@ -310,6 +333,11 @@ function runChecks(testFile, doSearch, parseQuery) {\n             return runParser(query, expected, parseQuery, text);\n         });\n     }\n+    if (checkCorrections) {\n+        res += runCheck(loadedFile, \"CORRECTIONS\", (query, expected) => {\n+            return runCorrections(query, expected, getCorrections, loadedFile);\n+        });\n+    }\n     return res;\n }\n \n@@ -318,9 +346,10 @@ function runChecks(testFile, doSearch, parseQuery) {\n  *\n  * @param {string} doc_folder      - Path to a folder generated by running rustdoc\n  * @param {string} resource_suffix - Version number between filename and .js, e.g. \"1.59.0\"\n- * @returns {Object}               - Object containing two keys: `doSearch`, which runs a search\n- *   with the loaded index and returns a table of results; and `parseQuery`, which is the\n- *   `parseQuery` function exported from the search module.\n+ * @returns {Object}               - Object containing keys: `doSearch`, which runs a search\n+ *   with the loaded index and returns a table of results; `parseQuery`, which is the\n+ *   `parseQuery` function exported from the search module; and `getCorrections`, which runs\n+ *   a search but returns type name corrections instead of results.\n  */\n function loadSearchJS(doc_folder, resource_suffix) {\n     const searchIndexJs = path.join(doc_folder, \"search-index\" + resource_suffix + \".js\");\n@@ -336,6 +365,12 @@ function loadSearchJS(doc_folder, resource_suffix) {\n             return searchModule.execQuery(searchModule.parseQuery(queryStr), searchWords,\n                 filterCrate, currentCrate);\n         },\n+        getCorrections: function(queryStr, filterCrate, currentCrate) {\n+            const parsedQuery = searchModule.parseQuery(queryStr);\n+            searchModule.execQuery(parsedQuery, searchWords,\n+                filterCrate, currentCrate);\n+            return parsedQuery.correction;\n+        },\n         parseQuery: searchModule.parseQuery,\n     };\n }\n@@ -417,11 +452,14 @@ function main(argv) {\n     const doSearch = function(queryStr, filterCrate) {\n         return parseAndSearch.doSearch(queryStr, filterCrate, opts[\"crate_name\"]);\n     };\n+    const getCorrections = function(queryStr, filterCrate) {\n+        return parseAndSearch.getCorrections(queryStr, filterCrate, opts[\"crate_name\"]);\n+    };\n \n     if (opts[\"test_file\"].length !== 0) {\n         opts[\"test_file\"].forEach(file => {\n             process.stdout.write(`Testing ${file} ... `);\n-            errors += runChecks(file, doSearch, parseAndSearch.parseQuery);\n+            errors += runChecks(file, doSearch, parseAndSearch.parseQuery, getCorrections);\n         });\n     } else if (opts[\"test_folder\"].length !== 0) {\n         fs.readdirSync(opts[\"test_folder\"]).forEach(file => {\n@@ -430,7 +468,7 @@ function main(argv) {\n             }\n             process.stdout.write(`Testing ${file} ... `);\n             errors += runChecks(path.join(opts[\"test_folder\"], file), doSearch,\n-                    parseAndSearch.parseQuery);\n+                    parseAndSearch.parseQuery, getCorrections);\n         });\n     }\n     return errors > 0 ? 1 : 0;"}, {"sha": "a2f7b8ba7be300ce075f3849338ccd2fe7bc423b", "filename": "src/tools/tidy/src/ui_tests.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -7,10 +7,10 @@ use std::collections::HashMap;\n use std::fs;\n use std::path::{Path, PathBuf};\n \n+const ENTRY_LIMIT: usize = 900;\n // FIXME: The following limits should be reduced eventually.\n-const ENTRY_LIMIT: usize = 885;\n-const ROOT_ENTRY_LIMIT: usize = 894;\n const ISSUES_ENTRY_LIMIT: usize = 1953;\n+const ROOT_ENTRY_LIMIT: usize = 894;\n \n fn check_entries(tests_path: &Path, bad: &mut bool) {\n     let mut directories: HashMap<PathBuf, usize> = HashMap::new();\n@@ -46,9 +46,6 @@ fn check_entries(tests_path: &Path, bad: &mut bool) {\n             );\n         }\n     }\n-    if ENTRY_LIMIT > max {\n-        tidy_error!(bad, \"`ENTRY_LIMIT` is too high (is {ENTRY_LIMIT}, should be {max})\");\n-    }\n     if ROOT_ENTRY_LIMIT > max_root {\n         tidy_error!(\n             bad,"}, {"sha": "353e7489b5528bc3fc5d56b0dffc606765612aa1", "filename": "tests/codegen/abi-main-signature-16bit-c-int.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fcodegen%2Fabi-main-signature-16bit-c-int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fcodegen%2Fabi-main-signature-16bit-c-int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fabi-main-signature-16bit-c-int.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -17,6 +17,7 @@\n // ignore-wasm32\n // ignore-x86\n // ignore-x86_64\n+// ignore-loongarch64\n \n fn main() {\n }"}, {"sha": "11f2917717c7fee97c77e3ee5ae67ee977ec61c0", "filename": "tests/codegen/call-llvm-intrinsics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fcodegen%2Fcall-llvm-intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fcodegen%2Fcall-llvm-intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fcall-llvm-intrinsics.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -1,6 +1,7 @@\n // compile-flags: -C no-prepopulate-passes -Copt-level=0\n \n // ignore-riscv64\n+// ignore-loongarch64\n \n #![feature(link_llvm_intrinsics)]\n #![crate_type = \"lib\"]"}, {"sha": "6b63b83ef459427737687fd439792db3308a4a54", "filename": "tests/codegen/catch-unwind.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fcodegen%2Fcatch-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fcodegen%2Fcatch-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fcatch-unwind.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -10,6 +10,8 @@\n // ignore-riscv64 FIXME\n // On s390x the closure is also in another function\n // ignore-s390x FIXME\n+// On loongarch64 the closure is also in another function\n+// ignore-loongarch64 FIXME\n \n #![crate_type = \"lib\"]\n #![feature(c_unwind)]"}, {"sha": "7daa05f69d19fab02a236183b76687ca88830498", "filename": "tests/codegen/enable-lto-unit-splitting.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fcodegen%2Fenable-lto-unit-splitting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fcodegen%2Fenable-lto-unit-splitting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fenable-lto-unit-splitting.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -0,0 +1,10 @@\n+// Verifies that \"EnableSplitLTOUnit\" module flag is added.\n+//\n+// compile-flags: -Clto -Ctarget-feature=-crt-static -Zsplit-lto-unit\n+\n+#![crate_type=\"lib\"]\n+\n+pub fn foo() {\n+}\n+\n+// CHECK: !{{[0-9]+}} = !{i32 4, !\"EnableSplitLTOUnit\", i32 1}"}, {"sha": "41a99530ad2a7f50bc975dbc52a64fc376824ecc", "filename": "tests/codegen/global_asm.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fcodegen%2Fglobal_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fcodegen%2Fglobal_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fglobal_asm.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -18,6 +18,7 @@\n // ignore-wasm32\n // ignore-wasm64\n // ignore-emscripten\n+// ignore-loongarch64\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]"}, {"sha": "e25c164f4075c50c8ce9dcf78017e63a11b6c4cb", "filename": "tests/codegen/global_asm_include.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fcodegen%2Fglobal_asm_include.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fcodegen%2Fglobal_asm_include.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fglobal_asm_include.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -18,6 +18,7 @@\n // ignore-wasm32\n // ignore-wasm64\n // ignore-emscripten\n+// ignore-loongarch64\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]"}, {"sha": "71ecef124f1f1a20335637812cd01a70b4bd8213", "filename": "tests/codegen/global_asm_x2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fcodegen%2Fglobal_asm_x2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fcodegen%2Fglobal_asm_x2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fglobal_asm_x2.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -18,6 +18,7 @@\n // ignore-wasm32\n // ignore-wasm64\n // ignore-emscripten\n+// ignore-loongarch64\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]"}, {"sha": "4b78f6e24f7bc5cbfaaf4d6105d5df3ba530c1b1", "filename": "tests/codegen/loongarch-abi/call-llvm-intrinsics.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fcodegen%2Floongarch-abi%2Fcall-llvm-intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fcodegen%2Floongarch-abi%2Fcall-llvm-intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Floongarch-abi%2Fcall-llvm-intrinsics.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -0,0 +1,31 @@\n+// compile-flags: -C no-prepopulate-passes\n+\n+// only-loongarch64\n+\n+#![feature(link_llvm_intrinsics)]\n+#![crate_type = \"lib\"]\n+\n+struct A;\n+\n+impl Drop for A {\n+    fn drop(&mut self) {\n+        println!(\"A\");\n+    }\n+}\n+\n+extern \"C\" {\n+    #[link_name = \"llvm.sqrt.f32\"]\n+    fn sqrt(x: f32) -> f32;\n+}\n+\n+pub fn do_call() {\n+    let _a = A;\n+\n+    unsafe {\n+        // Ensure that we `call` LLVM intrinsics instead of trying to `invoke` them\n+        // CHECK: store float 4.000000e+00, ptr %{{.}}, align 4\n+        // CHECK: load float, ptr %{{.}}, align 4\n+        // CHECK: call float @llvm.sqrt.f32(float %{{.}}\n+        sqrt(4.0);\n+    }\n+}"}, {"sha": "7555553c2c595da07b3a9d87058e018f466795c2", "filename": "tests/codegen/loongarch-abi/loongarch64-lp64d-abi.rs", "status": "added", "additions": 293, "deletions": 0, "changes": 293, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fcodegen%2Floongarch-abi%2Floongarch64-lp64d-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fcodegen%2Floongarch-abi%2Floongarch64-lp64d-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Floongarch-abi%2Floongarch64-lp64d-abi.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -0,0 +1,293 @@\n+// compile-flags: -C no-prepopulate-passes\n+// only-loongarch64\n+// only-linux\n+\n+#![crate_type = \"lib\"]\n+\n+// CHECK: define void @f_fpr_tracking(double %0, double %1, double %2, double %3, double %4, double %5, double %6, double %7, i8 noundef zeroext %i)\n+#[no_mangle]\n+pub extern \"C\" fn f_fpr_tracking(\n+    a: f64,\n+    b: f64,\n+    c: f64,\n+    d: f64,\n+    e: f64,\n+    f: f64,\n+    g: f64,\n+    h: f64,\n+    i: u8,\n+) {\n+}\n+\n+#[repr(C)]\n+pub struct Double {\n+    f: f64,\n+}\n+\n+#[repr(C)]\n+pub struct DoubleDouble {\n+    f: f64,\n+    g: f64,\n+}\n+\n+#[repr(C)]\n+pub struct DoubleFloat {\n+    f: f64,\n+    g: f32,\n+}\n+\n+// CHECK: define void @f_double_s_arg(double %0)\n+#[no_mangle]\n+pub extern \"C\" fn f_double_s_arg(a: Double) {}\n+\n+// CHECK: define double @f_ret_double_s()\n+#[no_mangle]\n+pub extern \"C\" fn f_ret_double_s() -> Double {\n+    Double { f: 1. }\n+}\n+\n+// CHECK: define void @f_double_double_s_arg({ double, double } %0)\n+#[no_mangle]\n+pub extern \"C\" fn f_double_double_s_arg(a: DoubleDouble) {}\n+\n+// CHECK: define { double, double } @f_ret_double_double_s()\n+#[no_mangle]\n+pub extern \"C\" fn f_ret_double_double_s() -> DoubleDouble {\n+    DoubleDouble { f: 1., g: 2. }\n+}\n+\n+// CHECK: define void @f_double_float_s_arg({ double, float } %0)\n+#[no_mangle]\n+pub extern \"C\" fn f_double_float_s_arg(a: DoubleFloat) {}\n+\n+// CHECK: define { double, float } @f_ret_double_float_s()\n+#[no_mangle]\n+pub extern \"C\" fn f_ret_double_float_s() -> DoubleFloat {\n+    DoubleFloat { f: 1., g: 2. }\n+}\n+\n+// CHECK: define void @f_double_double_s_arg_insufficient_fprs(double %0, double %1, double %2, double %3, double %4, double %5, double %6, [2 x i64] %7)\n+#[no_mangle]\n+pub extern \"C\" fn f_double_double_s_arg_insufficient_fprs(\n+    a: f64,\n+    b: f64,\n+    c: f64,\n+    d: f64,\n+    e: f64,\n+    f: f64,\n+    g: f64,\n+    h: DoubleDouble,\n+) {\n+}\n+\n+#[repr(C)]\n+pub struct DoubleInt8 {\n+    f: f64,\n+    i: i8,\n+}\n+\n+#[repr(C)]\n+pub struct DoubleUInt8 {\n+    f: f64,\n+    i: u8,\n+}\n+\n+#[repr(C)]\n+pub struct DoubleInt32 {\n+    f: f64,\n+    i: i32,\n+}\n+\n+#[repr(C)]\n+pub struct DoubleInt64 {\n+    f: f64,\n+    i: i64,\n+}\n+\n+// CHECK: define void @f_double_int8_s_arg({ double, i8 } %0)\n+#[no_mangle]\n+pub extern \"C\" fn f_double_int8_s_arg(a: DoubleInt8) {}\n+\n+// CHECK: define { double, i8 } @f_ret_double_int8_s()\n+#[no_mangle]\n+pub extern \"C\" fn f_ret_double_int8_s() -> DoubleInt8 {\n+    DoubleInt8 { f: 1., i: 2 }\n+}\n+\n+// CHECK: define void @f_double_int32_s_arg({ double, i32 } %0)\n+#[no_mangle]\n+pub extern \"C\" fn f_double_int32_s_arg(a: DoubleInt32) {}\n+\n+// CHECK: define { double, i32 } @f_ret_double_int32_s()\n+#[no_mangle]\n+pub extern \"C\" fn f_ret_double_int32_s() -> DoubleInt32 {\n+    DoubleInt32 { f: 1., i: 2 }\n+}\n+\n+// CHECK: define void @f_double_uint8_s_arg({ double, i8 } %0)\n+#[no_mangle]\n+pub extern \"C\" fn f_double_uint8_s_arg(a: DoubleUInt8) {}\n+\n+// CHECK: define { double, i8 } @f_ret_double_uint8_s()\n+#[no_mangle]\n+pub extern \"C\" fn f_ret_double_uint8_s() -> DoubleUInt8 {\n+    DoubleUInt8 { f: 1., i: 2 }\n+}\n+\n+// CHECK: define void @f_double_int64_s_arg({ double, i64 } %0)\n+#[no_mangle]\n+pub extern \"C\" fn f_double_int64_s_arg(a: DoubleInt64) {}\n+\n+// CHECK: define { double, i64 } @f_ret_double_int64_s()\n+#[no_mangle]\n+pub extern \"C\" fn f_ret_double_int64_s() -> DoubleInt64 {\n+    DoubleInt64 { f: 1., i: 2 }\n+}\n+\n+// CHECK: define void @f_double_int8_s_arg_insufficient_gprs(i32 noundef signext %a, i32 noundef signext %b, i32 noundef signext %c, i32 noundef signext %d, i32 noundef signext %e, i32 noundef signext %f, i32 noundef signext %g, i32 noundef signext %h, [2 x i64] %0)\n+#[no_mangle]\n+pub extern \"C\" fn f_double_int8_s_arg_insufficient_gprs(\n+    a: i32,\n+    b: i32,\n+    c: i32,\n+    d: i32,\n+    e: i32,\n+    f: i32,\n+    g: i32,\n+    h: i32,\n+    i: DoubleInt8,\n+) {\n+}\n+\n+// CHECK: define void @f_struct_double_int8_insufficient_fprs(float %0, double %1, double %2, double %3, double %4, double %5, double %6, double %7, [2 x i64] %8)\n+#[no_mangle]\n+pub extern \"C\" fn f_struct_double_int8_insufficient_fprs(\n+    a: f32,\n+    b: f64,\n+    c: f64,\n+    d: f64,\n+    e: f64,\n+    f: f64,\n+    g: f64,\n+    h: f64,\n+    i: DoubleInt8,\n+) {\n+}\n+\n+#[repr(C)]\n+pub struct DoubleArr1 {\n+    a: [f64; 1],\n+}\n+\n+// CHECK: define void @f_doublearr1_s_arg(double %0)\n+#[no_mangle]\n+pub extern \"C\" fn f_doublearr1_s_arg(a: DoubleArr1) {}\n+\n+// CHECK: define double @f_ret_doublearr1_s()\n+#[no_mangle]\n+pub extern \"C\" fn f_ret_doublearr1_s() -> DoubleArr1 {\n+    DoubleArr1 { a: [1.] }\n+}\n+\n+#[repr(C)]\n+pub struct DoubleArr2 {\n+    a: [f64; 2],\n+}\n+\n+// CHECK: define void @f_doublearr2_s_arg({ double, double } %0)\n+#[no_mangle]\n+pub extern \"C\" fn f_doublearr2_s_arg(a: DoubleArr2) {}\n+\n+// CHECK: define { double, double } @f_ret_doublearr2_s()\n+#[no_mangle]\n+pub extern \"C\" fn f_ret_doublearr2_s() -> DoubleArr2 {\n+    DoubleArr2 { a: [1., 2.] }\n+}\n+\n+#[repr(C)]\n+pub struct Tricky1 {\n+    f: [f64; 1],\n+}\n+\n+#[repr(C)]\n+pub struct DoubleArr2Tricky1 {\n+    g: [Tricky1; 2],\n+}\n+\n+// CHECK: define void @f_doublearr2_tricky1_s_arg({ double, double } %0)\n+#[no_mangle]\n+pub extern \"C\" fn f_doublearr2_tricky1_s_arg(a: DoubleArr2Tricky1) {}\n+\n+// CHECK: define { double, double } @f_ret_doublearr2_tricky1_s()\n+#[no_mangle]\n+pub extern \"C\" fn f_ret_doublearr2_tricky1_s() -> DoubleArr2Tricky1 {\n+    DoubleArr2Tricky1 { g: [Tricky1 { f: [1.] }, Tricky1 { f: [2.] }] }\n+}\n+\n+#[repr(C)]\n+pub struct EmptyStruct {}\n+\n+#[repr(C)]\n+pub struct DoubleArr2Tricky2 {\n+    s: EmptyStruct,\n+    g: [Tricky1; 2],\n+}\n+\n+// CHECK: define void @f_doublearr2_tricky2_s_arg({ double, double } %0)\n+#[no_mangle]\n+pub extern \"C\" fn f_doublearr2_tricky2_s_arg(a: DoubleArr2Tricky2) {}\n+\n+// CHECK: define { double, double } @f_ret_doublearr2_tricky2_s()\n+#[no_mangle]\n+pub extern \"C\" fn f_ret_doublearr2_tricky2_s() -> DoubleArr2Tricky2 {\n+    DoubleArr2Tricky2 { s: EmptyStruct {}, g: [Tricky1 { f: [1.] }, Tricky1 { f: [2.] }] }\n+}\n+\n+#[repr(C)]\n+pub struct IntDoubleInt {\n+    a: i32,\n+    b: f64,\n+    c: i32,\n+}\n+\n+// CHECK: define void @f_int_double_int_s_arg(ptr noalias nocapture noundef dereferenceable(24) %a)\n+#[no_mangle]\n+pub extern \"C\" fn f_int_double_int_s_arg(a: IntDoubleInt) {}\n+\n+// CHECK: define void @f_ret_int_double_int_s(ptr noalias nocapture noundef sret(%IntDoubleInt) dereferenceable(24) %0)\n+#[no_mangle]\n+pub extern \"C\" fn f_ret_int_double_int_s() -> IntDoubleInt {\n+    IntDoubleInt { a: 1, b: 2., c: 3 }\n+}\n+\n+#[repr(C)]\n+pub struct CharCharDouble {\n+    a: u8,\n+    b: u8,\n+    c: f64,\n+}\n+\n+// CHECK: define void @f_char_char_double_s_arg([2 x i64] %0)\n+#[no_mangle]\n+pub extern \"C\" fn f_char_char_double_s_arg(a: CharCharDouble) {}\n+\n+// CHECK: define [2 x i64] @f_ret_char_char_double_s()\n+#[no_mangle]\n+pub extern \"C\" fn f_ret_char_char_double_s() -> CharCharDouble {\n+    CharCharDouble { a: 1, b: 2, c: 3. }\n+}\n+\n+#[repr(C)]\n+pub union DoubleU {\n+    a: f64,\n+}\n+\n+// CHECK: define void @f_double_u_arg(i64 %0)\n+#[no_mangle]\n+pub extern \"C\" fn f_double_u_arg(a: DoubleU) {}\n+\n+// CHECK: define i64 @f_ret_double_u()\n+#[no_mangle]\n+pub extern \"C\" fn f_ret_double_u() -> DoubleU {\n+    unsafe { DoubleU { a: 1. } }\n+}"}, {"sha": "9c4b0e58e718713b7e9d881b73ca481289bb7a08", "filename": "tests/codegen/repr-transparent-aggregates-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fcodegen%2Frepr-transparent-aggregates-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fcodegen%2Frepr-transparent-aggregates-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Frepr-transparent-aggregates-1.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -10,6 +10,7 @@\n // ignore-riscv64 see codegen/riscv-abi\n // ignore-s390x\n // ignore-windows\n+// ignore-loongarch64\n // See repr-transparent.rs\n \n #![feature(transparent_unions)]"}, {"sha": "a7bde2d05c3c345ca9b1acf3ad84353b3d6d9990", "filename": "tests/codegen/repr-transparent-aggregates-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fcodegen%2Frepr-transparent-aggregates-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fcodegen%2Frepr-transparent-aggregates-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Frepr-transparent-aggregates-2.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -12,6 +12,7 @@\n // ignore-sparc64\n // ignore-x86\n // ignore-x86_64\n+// ignore-loongarch64\n // See repr-transparent.rs\n \n #![feature(transparent_unions)]"}, {"sha": "759ddea67a5b70bc2446fb8c90cabed30339a4c5", "filename": "tests/codegen/repr-transparent.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fcodegen%2Frepr-transparent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fcodegen%2Frepr-transparent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Frepr-transparent.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -3,6 +3,7 @@\n // ignore-riscv64 riscv64 has an i128 type used with test_Vector\n // see codegen/riscv-abi for riscv functiona call tests\n // ignore-s390x s390x with default march passes vector types per reference\n+// ignore-loongarch64 see codegen/loongarch-abi for loongarch function call tests\n \n #![crate_type=\"lib\"]\n #![feature(repr_simd, transparent_unions)]"}, {"sha": "1ee8bdfc3ab287a75505ac5372863ccb42a6ae12", "filename": "tests/codegen/sanitizer-cfi-add-canonical-jump-tables-flag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fcodegen%2Fsanitizer-cfi-add-canonical-jump-tables-flag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fcodegen%2Fsanitizer-cfi-add-canonical-jump-tables-flag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fsanitizer-cfi-add-canonical-jump-tables-flag.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -8,4 +8,4 @@\n pub fn foo() {\n }\n \n-// CHECK: !{{[0-9]+}} = !{i32 2, !\"CFI Canonical Jump Tables\", i32 1}\n+// CHECK: !{{[0-9]+}} = !{i32 4, !\"CFI Canonical Jump Tables\", i32 1}"}, {"sha": "68c91384b826b4d1771b1992cd6467e3e85ebc7d", "filename": "tests/codegen/sanitizer-cfi-add-enable-split-lto-unit-flag.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fcodegen%2Fsanitizer-cfi-add-enable-split-lto-unit-flag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fcodegen%2Fsanitizer-cfi-add-enable-split-lto-unit-flag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fsanitizer-cfi-add-enable-split-lto-unit-flag.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -0,0 +1,11 @@\n+// Verifies that \"EnableSplitLTOUnit\" module flag is added.\n+//\n+// needs-sanitizer-cfi\n+// compile-flags: -Clto -Ctarget-feature=-crt-static -Zsanitizer=cfi\n+\n+#![crate_type=\"lib\"]\n+\n+pub fn foo() {\n+}\n+\n+// CHECK: !{{[0-9]+}} = !{i32 4, !\"EnableSplitLTOUnit\", i32 1}"}, {"sha": "2b61c9078fd9cb379cfba31184c9570bc332f01a", "filename": "tests/codegen/sanitizer-cfi-emit-type-checks-attr-no-sanitize.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fcodegen%2Fsanitizer-cfi-emit-type-checks-attr-no-sanitize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fcodegen%2Fsanitizer-cfi-emit-type-checks-attr-no-sanitize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fsanitizer-cfi-emit-type-checks-attr-no-sanitize.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -0,0 +1,18 @@\n+// Verifies that pointer type membership tests for indirect calls are omitted.\n+//\n+// needs-sanitizer-cfi\n+// compile-flags: -Clto -Cno-prepopulate-passes -Ctarget-feature=-crt-static -Zsanitizer=cfi -Copt-level=0\n+\n+#![crate_type=\"lib\"]\n+#![feature(no_sanitize)]\n+\n+#[no_sanitize(cfi)]\n+pub fn foo(f: fn(i32) -> i32, arg: i32) -> i32 {\n+    // CHECK-LABEL: sanitizer_cfi_emit_type_checks_attr_no_sanitize::foo\n+    // CHECK:       Function Attrs: {{.*}}\n+    // CHECK-LABEL: define{{.*}}foo{{.*}}!type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n+    // CHECK:       start:\n+    // CHECK-NEXT:  {{%.+}} = call i32 %f(i32 %arg)\n+    // CHECK-NEXT:  ret i32 {{%.+}}\n+    f(arg)\n+}"}, {"sha": "cea6aac8b8ba4ca36e45200f00ea436e34b55bf5", "filename": "tests/codegen/sanitizer-cfi-emit-type-checks.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fcodegen%2Fsanitizer-cfi-emit-type-checks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fcodegen%2Fsanitizer-cfi-emit-type-checks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fsanitizer-cfi-emit-type-checks.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -6,13 +6,12 @@\n #![crate_type=\"lib\"]\n \n pub fn foo(f: fn(i32) -> i32, arg: i32) -> i32 {\n-    // CHECK-LABEL: define{{.*}}foo{{.*}}!type !{{[0-9]+}}\n+    // CHECK-LABEL: define{{.*}}foo{{.*}}!type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n     // CHECK:       start:\n     // CHECK:       [[TT:%.+]] = call i1 @llvm.type.test({{i8\\*|ptr}} {{%f|%0}}, metadata !\"{{[[:print:]]+}}\")\n     // CHECK-NEXT:  br i1 [[TT]], label %type_test.pass, label %type_test.fail\n     // CHECK:       type_test.pass:\n     // CHECK-NEXT:  {{%.+}} = call i32 %f(i32 %arg)\n-    // CHECK-NEXT:  br label %bb1\n     // CHECK:       type_test.fail:\n     // CHECK-NEXT:  call void @llvm.trap()\n     // CHECK-NEXT:  unreachable"}, {"sha": "084d8bf803c8987a5aec5dee43366586d6930ac6", "filename": "tests/codegen/sanitizer-cfi-emit-type-metadata-attr-cfi-encoding.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fcodegen%2Fsanitizer-cfi-emit-type-metadata-attr-cfi-encoding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fcodegen%2Fsanitizer-cfi-emit-type-metadata-attr-cfi-encoding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fsanitizer-cfi-emit-type-metadata-attr-cfi-encoding.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -0,0 +1,48 @@\n+// Verifies that user-defined CFI encoding for types are emitted.\n+//\n+// needs-sanitizer-cfi\n+// compile-flags: -Clto -Cno-prepopulate-passes -Ctarget-feature=-crt-static -Zsanitizer=cfi\n+\n+#![crate_type=\"lib\"]\n+#![feature(cfi_encoding, extern_types)]\n+\n+#[cfi_encoding = \"3Foo\"]\n+pub struct Type1(i32);\n+\n+extern {\n+    #[cfi_encoding = \"3Bar\"]\n+    type Type2;\n+}\n+\n+#[cfi_encoding = \"3Baz\"]\n+#[repr(transparent)]\n+pub struct Type3(i32);\n+\n+pub fn foo0(_: Type1) { }\n+// CHECK: define{{.*}}foo0{{.*}}!type ![[TYPE0:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n+pub fn foo1(_: Type1, _: Type1) { }\n+// CHECK: define{{.*}}foo1{{.*}}!type ![[TYPE1:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n+pub fn foo2(_: Type1, _: Type1, _: Type1) { }\n+// CHECK: define{{.*}}foo2{{.*}}!type ![[TYPE2:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n+pub fn foo3(_: *mut Type2) { }\n+// CHECK: define{{.*}}foo3{{.*}}!type ![[TYPE3:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n+pub fn foo4(_: *mut Type2, _: *mut Type2) { }\n+// CHECK: define{{.*}}foo4{{.*}}!type ![[TYPE4:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n+pub fn foo5(_: *mut Type2, _: *mut Type2, _: *mut Type2) { }\n+// CHECK: define{{.*}}foo5{{.*}}!type ![[TYPE5:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n+pub fn foo6(_: *mut Type3) { }\n+// CHECK: define{{.*}}foo6{{.*}}!type ![[TYPE6:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n+pub fn foo7(_: *mut Type3, _: *mut Type3) { }\n+// CHECK: define{{.*}}foo7{{.*}}!type ![[TYPE7:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n+pub fn foo8(_: *mut Type3, _: *mut Type3, _: *mut Type3) { }\n+// CHECK: define{{.*}}foo8{{.*}}!type ![[TYPE8:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n+\n+// CHECK: ![[TYPE0]] = !{i64 0, !\"_ZTSFv3FooE\"}\n+// CHECK: ![[TYPE1]] = !{i64 0, !\"_ZTSFv3FooS_E\"}\n+// CHECK: ![[TYPE2]] = !{i64 0, !\"_ZTSFv3FooS_S_E\"}\n+// CHECK: ![[TYPE3]] = !{i64 0, !\"_ZTSFvP3BarE\"}\n+// CHECK: ![[TYPE4]] = !{i64 0, !\"_ZTSFvP3BarS0_E\"}\n+// CHECK: ![[TYPE5]] = !{i64 0, !\"_ZTSFvP3BarS0_S0_E\"}\n+// CHECK: ![[TYPE6]] = !{i64 0, !\"_ZTSFvP3BazE\"}\n+// CHECK: ![[TYPE7]] = !{i64 0, !\"_ZTSFvP3BazS0_E\"}\n+// CHECK: ![[TYPE8]] = !{i64 0, !\"_ZTSFvP3BazS0_S0_E\"}"}, {"sha": "71e26e3fe8a65b5a4602a66ea86f2c4250f93cd9", "filename": "tests/codegen/sanitizer-cfi-emit-type-metadata-id-itanium-cxx-abi.rs", "status": "modified", "additions": 160, "deletions": 159, "changes": 319, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fcodegen%2Fsanitizer-cfi-emit-type-metadata-id-itanium-cxx-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fcodegen%2Fsanitizer-cfi-emit-type-metadata-id-itanium-cxx-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fsanitizer-cfi-emit-type-metadata-id-itanium-cxx-abi.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -10,7 +10,7 @@\n #![feature(adt_const_params, extern_types, inline_const, type_alias_impl_trait)]\n \n extern crate core;\n-use core::ffi::c_void;\n+use core::ffi::*;\n use std::marker::PhantomData;\n \n // User-defined type (structure)\n@@ -113,9 +113,10 @@ pub fn fn1<'a>() {\n     let _: Type11 = Quuux;\n }\n \n-// repr(transparent) user-defined type\n+// Helper type to make Type12 have an unique id\n struct Foo(i32);\n \n+// repr(transparent) user-defined type\n #[repr(transparent)]\n pub struct Type12 {\n     member1: (),\n@@ -131,313 +132,313 @@ pub struct Type13<'a> {\n     member3: &'a Type13<'a>,\n }\n \n-// Helper type to allow `Type14<Bar>` to be a unique ID\n+// Helper type to make Type14 have an unique id\n pub struct Bar;\n \n-// repr(transparent) parameterized type\n+// repr(transparent) user-defined generic type\n #[repr(transparent)]\n pub struct Type14<T>(T);\n \n pub fn foo0(_: ()) { }\n-// CHECK: define{{.*}}foo0{{.*}}!type ![[TYPE0:[0-9]+]]\n-pub fn foo1(_: c_void, _: ()) { }\n-// CHECK: define{{.*}}foo1{{.*}}!type ![[TYPE1:[0-9]+]]\n+// CHECK: define{{.*}}foo0{{.*}}!type ![[TYPE0:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n+pub fn foo1(_: (), _: c_void) { }\n+// CHECK: define{{.*}}foo1{{.*}}!type ![[TYPE1:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo2(_: (), _: c_void, _: c_void) { }\n-// CHECK: define{{.*}}foo2{{.*}}!type ![[TYPE2:[0-9]+]]\n-pub fn foo3(_: *mut c_void) { }\n-// CHECK: define{{.*}}foo3{{.*}}!type ![[TYPE3:[0-9]+]]\n-pub fn foo4(_: *mut c_void, _: *mut ()) { }\n-// CHECK: define{{.*}}foo4{{.*}}!type ![[TYPE4:[0-9]+]]\n+// CHECK: define{{.*}}foo2{{.*}}!type ![[TYPE2:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n+pub fn foo3(_: *mut ()) { }\n+// CHECK: define{{.*}}foo3{{.*}}!type ![[TYPE3:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n+pub fn foo4(_: *mut (), _: *mut c_void) { }\n+// CHECK: define{{.*}}foo4{{.*}}!type ![[TYPE4:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo5(_: *mut (), _: *mut c_void, _: *mut c_void) { }\n-// CHECK: define{{.*}}foo5{{.*}}!type ![[TYPE5:[0-9]+]]\n-pub fn foo6(_: *const c_void) { }\n-// CHECK: define{{.*}}foo6{{.*}}!type ![[TYPE6:[0-9]+]]\n-pub fn foo7(_: *const c_void, _: *const ()) { }\n-// CHECK: define{{.*}}foo7{{.*}}!type ![[TYPE7:[0-9]+]]\n+// CHECK: define{{.*}}foo5{{.*}}!type ![[TYPE5:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n+pub fn foo6(_: *const ()) { }\n+// CHECK: define{{.*}}foo6{{.*}}!type ![[TYPE6:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n+pub fn foo7(_: *const (), _: *const c_void) { }\n+// CHECK: define{{.*}}foo7{{.*}}!type ![[TYPE7:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo8(_: *const (), _: *const c_void, _: *const c_void) { }\n-// CHECK: define{{.*}}foo8{{.*}}!type ![[TYPE8:[0-9]+]]\n+// CHECK: define{{.*}}foo8{{.*}}!type ![[TYPE8:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo9(_: bool) { }\n-// CHECK: define{{.*}}foo9{{.*}}!type ![[TYPE9:[0-9]+]]\n+// CHECK: define{{.*}}foo9{{.*}}!type ![[TYPE9:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo10(_: bool, _: bool) { }\n-// CHECK: define{{.*}}foo10{{.*}}!type ![[TYPE10:[0-9]+]]\n+// CHECK: define{{.*}}foo10{{.*}}!type ![[TYPE10:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo11(_: bool, _: bool, _: bool) { }\n-// CHECK: define{{.*}}foo11{{.*}}!type ![[TYPE11:[0-9]+]]\n+// CHECK: define{{.*}}foo11{{.*}}!type ![[TYPE11:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo12(_: i8) { }\n-// CHECK: define{{.*}}foo12{{.*}}!type ![[TYPE12:[0-9]+]]\n+// CHECK: define{{.*}}foo12{{.*}}!type ![[TYPE12:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo13(_: i8, _: i8) { }\n-// CHECK: define{{.*}}foo13{{.*}}!type ![[TYPE13:[0-9]+]]\n+// CHECK: define{{.*}}foo13{{.*}}!type ![[TYPE13:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo14(_: i8, _: i8, _: i8) { }\n-// CHECK: define{{.*}}foo14{{.*}}!type ![[TYPE14:[0-9]+]]\n+// CHECK: define{{.*}}foo14{{.*}}!type ![[TYPE14:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo15(_: i16) { }\n-// CHECK: define{{.*}}foo15{{.*}}!type ![[TYPE15:[0-9]+]]\n+// CHECK: define{{.*}}foo15{{.*}}!type ![[TYPE15:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo16(_: i16, _: i16) { }\n-// CHECK: define{{.*}}foo16{{.*}}!type ![[TYPE16:[0-9]+]]\n+// CHECK: define{{.*}}foo16{{.*}}!type ![[TYPE16:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo17(_: i16, _: i16, _: i16) { }\n-// CHECK: define{{.*}}foo17{{.*}}!type ![[TYPE17:[0-9]+]]\n+// CHECK: define{{.*}}foo17{{.*}}!type ![[TYPE17:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo18(_: i32) { }\n-// CHECK: define{{.*}}foo18{{.*}}!type ![[TYPE18:[0-9]+]]\n+// CHECK: define{{.*}}foo18{{.*}}!type ![[TYPE18:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo19(_: i32, _: i32) { }\n-// CHECK: define{{.*}}foo19{{.*}}!type ![[TYPE19:[0-9]+]]\n+// CHECK: define{{.*}}foo19{{.*}}!type ![[TYPE19:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo20(_: i32, _: i32, _: i32) { }\n-// CHECK: define{{.*}}foo20{{.*}}!type ![[TYPE20:[0-9]+]]\n+// CHECK: define{{.*}}foo20{{.*}}!type ![[TYPE20:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo21(_: i64) { }\n-// CHECK: define{{.*}}foo21{{.*}}!type ![[TYPE21:[0-9]+]]\n+// CHECK: define{{.*}}foo21{{.*}}!type ![[TYPE21:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo22(_: i64, _: i64) { }\n-// CHECK: define{{.*}}foo22{{.*}}!type ![[TYPE22:[0-9]+]]\n+// CHECK: define{{.*}}foo22{{.*}}!type ![[TYPE22:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo23(_: i64, _: i64, _: i64) { }\n-// CHECK: define{{.*}}foo23{{.*}}!type ![[TYPE23:[0-9]+]]\n+// CHECK: define{{.*}}foo23{{.*}}!type ![[TYPE23:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo24(_: i128) { }\n-// CHECK: define{{.*}}foo24{{.*}}!type ![[TYPE24:[0-9]+]]\n+// CHECK: define{{.*}}foo24{{.*}}!type ![[TYPE24:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo25(_: i128, _: i128) { }\n-// CHECK: define{{.*}}foo25{{.*}}!type ![[TYPE25:[0-9]+]]\n+// CHECK: define{{.*}}foo25{{.*}}!type ![[TYPE25:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo26(_: i128, _: i128, _: i128) { }\n-// CHECK: define{{.*}}foo26{{.*}}!type ![[TYPE26:[0-9]+]]\n+// CHECK: define{{.*}}foo26{{.*}}!type ![[TYPE26:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo27(_: isize) { }\n-// CHECK: define{{.*}}foo27{{.*}}!type ![[TYPE27:[0-9]+]]\n+// CHECK: define{{.*}}foo27{{.*}}!type ![[TYPE27:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo28(_: isize, _: isize) { }\n-// CHECK: define{{.*}}foo28{{.*}}!type ![[TYPE28:[0-9]+]]\n+// CHECK: define{{.*}}foo28{{.*}}!type ![[TYPE28:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo29(_: isize, _: isize, _: isize) { }\n-// CHECK: define{{.*}}foo29{{.*}}!type ![[TYPE29:[0-9]+]]\n+// CHECK: define{{.*}}foo29{{.*}}!type ![[TYPE29:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo30(_: u8) { }\n-// CHECK: define{{.*}}foo30{{.*}}!type ![[TYPE30:[0-9]+]]\n+// CHECK: define{{.*}}foo30{{.*}}!type ![[TYPE30:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo31(_: u8, _: u8) { }\n-// CHECK: define{{.*}}foo31{{.*}}!type ![[TYPE31:[0-9]+]]\n+// CHECK: define{{.*}}foo31{{.*}}!type ![[TYPE31:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo32(_: u8, _: u8, _: u8) { }\n-// CHECK: define{{.*}}foo32{{.*}}!type ![[TYPE32:[0-9]+]]\n+// CHECK: define{{.*}}foo32{{.*}}!type ![[TYPE32:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo33(_: u16) { }\n-// CHECK: define{{.*}}foo33{{.*}}!type ![[TYPE33:[0-9]+]]\n+// CHECK: define{{.*}}foo33{{.*}}!type ![[TYPE33:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo34(_: u16, _: u16) { }\n-// CHECK: define{{.*}}foo34{{.*}}!type ![[TYPE34:[0-9]+]]\n+// CHECK: define{{.*}}foo34{{.*}}!type ![[TYPE34:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo35(_: u16, _: u16, _: u16) { }\n-// CHECK: define{{.*}}foo35{{.*}}!type ![[TYPE35:[0-9]+]]\n+// CHECK: define{{.*}}foo35{{.*}}!type ![[TYPE35:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo36(_: u32) { }\n-// CHECK: define{{.*}}foo36{{.*}}!type ![[TYPE36:[0-9]+]]\n+// CHECK: define{{.*}}foo36{{.*}}!type ![[TYPE36:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo37(_: u32, _: u32) { }\n-// CHECK: define{{.*}}foo37{{.*}}!type ![[TYPE37:[0-9]+]]\n+// CHECK: define{{.*}}foo37{{.*}}!type ![[TYPE37:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo38(_: u32, _: u32, _: u32) { }\n-// CHECK: define{{.*}}foo38{{.*}}!type ![[TYPE38:[0-9]+]]\n+// CHECK: define{{.*}}foo38{{.*}}!type ![[TYPE38:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo39(_: u64) { }\n-// CHECK: define{{.*}}foo39{{.*}}!type ![[TYPE39:[0-9]+]]\n+// CHECK: define{{.*}}foo39{{.*}}!type ![[TYPE39:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo40(_: u64, _: u64) { }\n-// CHECK: define{{.*}}foo40{{.*}}!type ![[TYPE40:[0-9]+]]\n+// CHECK: define{{.*}}foo40{{.*}}!type ![[TYPE40:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo41(_: u64, _: u64, _: u64) { }\n-// CHECK: define{{.*}}foo41{{.*}}!type ![[TYPE41:[0-9]+]]\n+// CHECK: define{{.*}}foo41{{.*}}!type ![[TYPE41:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo42(_: u128) { }\n-// CHECK: define{{.*}}foo42{{.*}}!type ![[TYPE42:[0-9]+]]\n+// CHECK: define{{.*}}foo42{{.*}}!type ![[TYPE42:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo43(_: u128, _: u128) { }\n-// CHECK: define{{.*}}foo43{{.*}}!type ![[TYPE43:[0-9]+]]\n+// CHECK: define{{.*}}foo43{{.*}}!type ![[TYPE43:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo44(_: u128, _: u128, _: u128) { }\n-// CHECK: define{{.*}}foo44{{.*}}!type ![[TYPE44:[0-9]+]]\n+// CHECK: define{{.*}}foo44{{.*}}!type ![[TYPE44:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo45(_: usize) { }\n-// CHECK: define{{.*}}foo45{{.*}}!type ![[TYPE45:[0-9]+]]\n+// CHECK: define{{.*}}foo45{{.*}}!type ![[TYPE45:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo46(_: usize, _: usize) { }\n-// CHECK: define{{.*}}foo46{{.*}}!type ![[TYPE46:[0-9]+]]\n+// CHECK: define{{.*}}foo46{{.*}}!type ![[TYPE46:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo47(_: usize, _: usize, _: usize) { }\n-// CHECK: define{{.*}}foo47{{.*}}!type ![[TYPE47:[0-9]+]]\n+// CHECK: define{{.*}}foo47{{.*}}!type ![[TYPE47:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo48(_: f32) { }\n-// CHECK: define{{.*}}foo48{{.*}}!type ![[TYPE48:[0-9]+]]\n+// CHECK: define{{.*}}foo48{{.*}}!type ![[TYPE48:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo49(_: f32, _: f32) { }\n-// CHECK: define{{.*}}foo49{{.*}}!type ![[TYPE49:[0-9]+]]\n+// CHECK: define{{.*}}foo49{{.*}}!type ![[TYPE49:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo50(_: f32, _: f32, _: f32) { }\n-// CHECK: define{{.*}}foo50{{.*}}!type ![[TYPE50:[0-9]+]]\n+// CHECK: define{{.*}}foo50{{.*}}!type ![[TYPE50:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo51(_: f64) { }\n-// CHECK: define{{.*}}foo51{{.*}}!type ![[TYPE51:[0-9]+]]\n+// CHECK: define{{.*}}foo51{{.*}}!type ![[TYPE51:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo52(_: f64, _: f64) { }\n-// CHECK: define{{.*}}foo52{{.*}}!type ![[TYPE52:[0-9]+]]\n+// CHECK: define{{.*}}foo52{{.*}}!type ![[TYPE52:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo53(_: f64, _: f64, _: f64) { }\n-// CHECK: define{{.*}}foo53{{.*}}!type ![[TYPE53:[0-9]+]]\n+// CHECK: define{{.*}}foo53{{.*}}!type ![[TYPE53:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo54(_: char) { }\n-// CHECK: define{{.*}}foo54{{.*}}!type ![[TYPE54:[0-9]+]]\n+// CHECK: define{{.*}}foo54{{.*}}!type ![[TYPE54:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo55(_: char, _: char) { }\n-// CHECK: define{{.*}}foo55{{.*}}!type ![[TYPE55:[0-9]+]]\n+// CHECK: define{{.*}}foo55{{.*}}!type ![[TYPE55:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo56(_: char, _: char, _: char) { }\n-// CHECK: define{{.*}}foo56{{.*}}!type ![[TYPE56:[0-9]+]]\n+// CHECK: define{{.*}}foo56{{.*}}!type ![[TYPE56:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo57(_: &str) { }\n-// CHECK: define{{.*}}foo57{{.*}}!type ![[TYPE57:[0-9]+]]\n+// CHECK: define{{.*}}foo57{{.*}}!type ![[TYPE57:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo58(_: &str, _: &str) { }\n-// CHECK: define{{.*}}foo58{{.*}}!type ![[TYPE58:[0-9]+]]\n+// CHECK: define{{.*}}foo58{{.*}}!type ![[TYPE58:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo59(_: &str, _: &str, _: &str) { }\n-// CHECK: define{{.*}}foo59{{.*}}!type ![[TYPE59:[0-9]+]]\n+// CHECK: define{{.*}}foo59{{.*}}!type ![[TYPE59:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo60(_: (i32, i32)) { }\n-// CHECK: define{{.*}}foo60{{.*}}!type ![[TYPE60:[0-9]+]]\n+// CHECK: define{{.*}}foo60{{.*}}!type ![[TYPE60:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo61(_: (i32, i32), _: (i32, i32)) { }\n-// CHECK: define{{.*}}foo61{{.*}}!type ![[TYPE61:[0-9]+]]\n+// CHECK: define{{.*}}foo61{{.*}}!type ![[TYPE61:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo62(_: (i32, i32), _: (i32, i32), _: (i32, i32)) { }\n-// CHECK: define{{.*}}foo62{{.*}}!type ![[TYPE62:[0-9]+]]\n+// CHECK: define{{.*}}foo62{{.*}}!type ![[TYPE62:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo63(_: [i32; 32]) { }\n-// CHECK: define{{.*}}foo63{{.*}}!type ![[TYPE63:[0-9]+]]\n+// CHECK: define{{.*}}foo63{{.*}}!type ![[TYPE63:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo64(_: [i32; 32], _: [i32; 32]) { }\n-// CHECK: define{{.*}}foo64{{.*}}!type ![[TYPE64:[0-9]+]]\n+// CHECK: define{{.*}}foo64{{.*}}!type ![[TYPE64:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo65(_: [i32; 32], _: [i32; 32], _: [i32; 32]) { }\n-// CHECK: define{{.*}}foo65{{.*}}!type ![[TYPE65:[0-9]+]]\n+// CHECK: define{{.*}}foo65{{.*}}!type ![[TYPE65:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo66(_: &[i32]) { }\n-// CHECK: define{{.*}}foo66{{.*}}!type ![[TYPE66:[0-9]+]]\n+// CHECK: define{{.*}}foo66{{.*}}!type ![[TYPE66:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo67(_: &[i32], _: &[i32]) { }\n-// CHECK: define{{.*}}foo67{{.*}}!type ![[TYPE67:[0-9]+]]\n+// CHECK: define{{.*}}foo67{{.*}}!type ![[TYPE67:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo68(_: &[i32], _: &[i32], _: &[i32]) { }\n-// CHECK: define{{.*}}foo68{{.*}}!type ![[TYPE68:[0-9]+]]\n+// CHECK: define{{.*}}foo68{{.*}}!type ![[TYPE68:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo69(_: &Struct1::<i32>) { }\n-// CHECK: define{{.*}}foo69{{.*}}!type ![[TYPE69:[0-9]+]]\n+// CHECK: define{{.*}}foo69{{.*}}!type ![[TYPE69:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo70(_: &Struct1::<i32>, _: &Struct1::<i32>) { }\n-// CHECK: define{{.*}}foo70{{.*}}!type ![[TYPE70:[0-9]+]]\n+// CHECK: define{{.*}}foo70{{.*}}!type ![[TYPE70:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo71(_: &Struct1::<i32>, _: &Struct1::<i32>, _: &Struct1::<i32>) { }\n-// CHECK: define{{.*}}foo71{{.*}}!type ![[TYPE71:[0-9]+]]\n+// CHECK: define{{.*}}foo71{{.*}}!type ![[TYPE71:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo72(_: &Enum1::<i32>) { }\n-// CHECK: define{{.*}}foo72{{.*}}!type ![[TYPE72:[0-9]+]]\n+// CHECK: define{{.*}}foo72{{.*}}!type ![[TYPE72:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo73(_: &Enum1::<i32>, _: &Enum1::<i32>) { }\n-// CHECK: define{{.*}}foo73{{.*}}!type ![[TYPE73:[0-9]+]]\n+// CHECK: define{{.*}}foo73{{.*}}!type ![[TYPE73:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo74(_: &Enum1::<i32>, _: &Enum1::<i32>, _: &Enum1::<i32>) { }\n-// CHECK: define{{.*}}foo74{{.*}}!type ![[TYPE74:[0-9]+]]\n+// CHECK: define{{.*}}foo74{{.*}}!type ![[TYPE74:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo75(_: &Union1::<i32>) { }\n-// CHECK: define{{.*}}foo75{{.*}}!type ![[TYPE75:[0-9]+]]\n+// CHECK: define{{.*}}foo75{{.*}}!type ![[TYPE75:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo76(_: &Union1::<i32>, _: &Union1::<i32>) { }\n-// CHECK: define{{.*}}foo76{{.*}}!type ![[TYPE76:[0-9]+]]\n+// CHECK: define{{.*}}foo76{{.*}}!type ![[TYPE76:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo77(_: &Union1::<i32>, _: &Union1::<i32>, _: &Union1::<i32>) { }\n-// CHECK: define{{.*}}foo77{{.*}}!type ![[TYPE77:[0-9]+]]\n+// CHECK: define{{.*}}foo77{{.*}}!type ![[TYPE77:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo78(_: *mut type1) { }\n-// CHECK: define{{.*}}foo78{{.*}}!type ![[TYPE78:[0-9]+]]\n+// CHECK: define{{.*}}foo78{{.*}}!type ![[TYPE78:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo79(_: *mut type1, _: *mut type1) { }\n-// CHECK: define{{.*}}foo79{{.*}}!type ![[TYPE79:[0-9]+]]\n+// CHECK: define{{.*}}foo79{{.*}}!type ![[TYPE79:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo80(_: *mut type1, _: *mut type1, _: *mut type1) { }\n-// CHECK: define{{.*}}foo80{{.*}}!type ![[TYPE80:[0-9]+]]\n+// CHECK: define{{.*}}foo80{{.*}}!type ![[TYPE80:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo81(_: &mut i32) { }\n-// CHECK: define{{.*}}foo81{{.*}}!type ![[TYPE81:[0-9]+]]\n+// CHECK: define{{.*}}foo81{{.*}}!type ![[TYPE81:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo82(_: &mut i32, _: &i32) { }\n-// CHECK: define{{.*}}foo82{{.*}}!type ![[TYPE82:[0-9]+]]\n+// CHECK: define{{.*}}foo82{{.*}}!type ![[TYPE82:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo83(_: &mut i32, _: &i32, _: &i32) { }\n-// CHECK: define{{.*}}foo83{{.*}}!type ![[TYPE83:[0-9]+]]\n+// CHECK: define{{.*}}foo83{{.*}}!type ![[TYPE83:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo84(_: &i32) { }\n-// CHECK: define{{.*}}foo84{{.*}}!type ![[TYPE84:[0-9]+]]\n+// CHECK: define{{.*}}foo84{{.*}}!type ![[TYPE84:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo85(_: &i32, _: &mut i32) { }\n-// CHECK: define{{.*}}foo85{{.*}}!type ![[TYPE85:[0-9]+]]\n+// CHECK: define{{.*}}foo85{{.*}}!type ![[TYPE85:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo86(_: &i32, _: &mut i32, _: &mut i32) { }\n-// CHECK: define{{.*}}foo86{{.*}}!type ![[TYPE86:[0-9]+]]\n+// CHECK: define{{.*}}foo86{{.*}}!type ![[TYPE86:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo87(_: *mut i32) { }\n-// CHECK: define{{.*}}foo87{{.*}}!type ![[TYPE87:[0-9]+]]\n+// CHECK: define{{.*}}foo87{{.*}}!type ![[TYPE87:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo88(_: *mut i32, _: *const i32) { }\n-// CHECK: define{{.*}}foo88{{.*}}!type ![[TYPE88:[0-9]+]]\n+// CHECK: define{{.*}}foo88{{.*}}!type ![[TYPE88:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo89(_: *mut i32, _: *const i32, _: *const i32) { }\n-// CHECK: define{{.*}}foo89{{.*}}!type ![[TYPE89:[0-9]+]]\n+// CHECK: define{{.*}}foo89{{.*}}!type ![[TYPE89:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo90(_: *const i32) { }\n-// CHECK: define{{.*}}foo90{{.*}}!type ![[TYPE90:[0-9]+]]\n+// CHECK: define{{.*}}foo90{{.*}}!type ![[TYPE90:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo91(_: *const i32, _: *mut i32) { }\n-// CHECK: define{{.*}}foo91{{.*}}!type ![[TYPE91:[0-9]+]]\n+// CHECK: define{{.*}}foo91{{.*}}!type ![[TYPE91:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo92(_: *const i32, _: *mut i32, _: *mut i32) { }\n-// CHECK: define{{.*}}foo92{{.*}}!type ![[TYPE92:[0-9]+]]\n+// CHECK: define{{.*}}foo92{{.*}}!type ![[TYPE92:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo93(_: fn(i32) -> i32) { }\n-// CHECK: define{{.*}}foo93{{.*}}!type ![[TYPE93:[0-9]+]]\n+// CHECK: define{{.*}}foo93{{.*}}!type ![[TYPE93:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo94(_: fn(i32) -> i32, _: fn(i32) -> i32) { }\n-// CHECK: define{{.*}}foo94{{.*}}!type ![[TYPE94:[0-9]+]]\n+// CHECK: define{{.*}}foo94{{.*}}!type ![[TYPE94:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo95(_: fn(i32) -> i32, _: fn(i32) -> i32, _: fn(i32) -> i32) { }\n-// CHECK: define{{.*}}foo95{{.*}}!type ![[TYPE95:[0-9]+]]\n+// CHECK: define{{.*}}foo95{{.*}}!type ![[TYPE95:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo96(_: &dyn Fn(i32) -> i32) { }\n-// CHECK: define{{.*}}foo96{{.*}}!type ![[TYPE96:[0-9]+]]\n+// CHECK: define{{.*}}foo96{{.*}}!type ![[TYPE96:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo97(_: &dyn Fn(i32) -> i32, _: &dyn Fn(i32) -> i32) { }\n-// CHECK: define{{.*}}foo97{{.*}}!type ![[TYPE97:[0-9]+]]\n+// CHECK: define{{.*}}foo97{{.*}}!type ![[TYPE97:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo98(_: &dyn Fn(i32) -> i32, _: &dyn Fn(i32) -> i32, _: &dyn Fn(i32) -> i32) { }\n-// CHECK: define{{.*}}foo98{{.*}}!type ![[TYPE98:[0-9]+]]\n+// CHECK: define{{.*}}foo98{{.*}}!type ![[TYPE98:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo99(_: &dyn FnMut(i32) -> i32) { }\n-// CHECK: define{{.*}}foo99{{.*}}!type ![[TYPE99:[0-9]+]]\n+// CHECK: define{{.*}}foo99{{.*}}!type ![[TYPE99:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo100(_: &dyn FnMut(i32) -> i32, _: &dyn FnMut(i32) -> i32) { }\n-// CHECK: define{{.*}}foo100{{.*}}!type ![[TYPE100:[0-9]+]]\n+// CHECK: define{{.*}}foo100{{.*}}!type ![[TYPE100:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo101(_: &dyn FnMut(i32) -> i32, _: &dyn FnMut(i32) -> i32, _: &dyn FnMut(i32) -> i32) { }\n-// CHECK: define{{.*}}foo101{{.*}}!type ![[TYPE101:[0-9]+]]\n+// CHECK: define{{.*}}foo101{{.*}}!type ![[TYPE101:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo102(_: &dyn FnOnce(i32) -> i32) { }\n-// CHECK: define{{.*}}foo102{{.*}}!type ![[TYPE102:[0-9]+]]\n+// CHECK: define{{.*}}foo102{{.*}}!type ![[TYPE102:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo103(_: &dyn FnOnce(i32) -> i32, _: &dyn FnOnce(i32) -> i32) { }\n-// CHECK: define{{.*}}foo103{{.*}}!type ![[TYPE103:[0-9]+]]\n+// CHECK: define{{.*}}foo103{{.*}}!type ![[TYPE103:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo104(_: &dyn FnOnce(i32) -> i32, _: &dyn FnOnce(i32) -> i32, _: &dyn FnOnce(i32) -> i32) {}\n-// CHECK: define{{.*}}foo104{{.*}}!type ![[TYPE104:[0-9]+]]\n+// CHECK: define{{.*}}foo104{{.*}}!type ![[TYPE104:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo105(_: &dyn Send) { }\n-// CHECK: define{{.*}}foo105{{.*}}!type ![[TYPE105:[0-9]+]]\n+// CHECK: define{{.*}}foo105{{.*}}!type ![[TYPE105:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo106(_: &dyn Send, _: &dyn Send) { }\n-// CHECK: define{{.*}}foo106{{.*}}!type ![[TYPE106:[0-9]+]]\n+// CHECK: define{{.*}}foo106{{.*}}!type ![[TYPE106:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo107(_: &dyn Send, _: &dyn Send, _: &dyn Send) { }\n-// CHECK: define{{.*}}foo107{{.*}}!type ![[TYPE107:[0-9]+]]\n+// CHECK: define{{.*}}foo107{{.*}}!type ![[TYPE107:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo108(_: Type1) { }\n-// CHECK: define{{.*}}foo108{{.*}}!type ![[TYPE108:[0-9]+]]\n+// CHECK: define{{.*}}foo108{{.*}}!type ![[TYPE108:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo109(_: Type1, _: Type1) { }\n-// CHECK: define{{.*}}foo109{{.*}}!type ![[TYPE109:[0-9]+]]\n+// CHECK: define{{.*}}foo109{{.*}}!type ![[TYPE109:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo110(_: Type1, _: Type1, _: Type1) { }\n-// CHECK: define{{.*}}foo110{{.*}}!type ![[TYPE110:[0-9]+]]\n+// CHECK: define{{.*}}foo110{{.*}}!type ![[TYPE110:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo111(_: Type2) { }\n-// CHECK: define{{.*}}foo111{{.*}}!type ![[TYPE111:[0-9]+]]\n+// CHECK: define{{.*}}foo111{{.*}}!type ![[TYPE111:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo112(_: Type2, _: Type2) { }\n-// CHECK: define{{.*}}foo112{{.*}}!type ![[TYPE112:[0-9]+]]\n+// CHECK: define{{.*}}foo112{{.*}}!type ![[TYPE112:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo113(_: Type2, _: Type2, _: Type2) { }\n-// CHECK: define{{.*}}foo113{{.*}}!type ![[TYPE113:[0-9]+]]\n+// CHECK: define{{.*}}foo113{{.*}}!type ![[TYPE113:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo114(_: Type3) { }\n-// CHECK: define{{.*}}foo114{{.*}}!type ![[TYPE114:[0-9]+]]\n+// CHECK: define{{.*}}foo114{{.*}}!type ![[TYPE114:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo115(_: Type3, _: Type3) { }\n-// CHECK: define{{.*}}foo115{{.*}}!type ![[TYPE115:[0-9]+]]\n+// CHECK: define{{.*}}foo115{{.*}}!type ![[TYPE115:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo116(_: Type3, _: Type3, _: Type3) { }\n-// CHECK: define{{.*}}foo116{{.*}}!type ![[TYPE116:[0-9]+]]\n+// CHECK: define{{.*}}foo116{{.*}}!type ![[TYPE116:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo117(_: Type4) { }\n-// CHECK: define{{.*}}foo117{{.*}}!type ![[TYPE117:[0-9]+]]\n+// CHECK: define{{.*}}foo117{{.*}}!type ![[TYPE117:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo118(_: Type4, _: Type4) { }\n-// CHECK: define{{.*}}foo118{{.*}}!type ![[TYPE118:[0-9]+]]\n+// CHECK: define{{.*}}foo118{{.*}}!type ![[TYPE118:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo119(_: Type4, _: Type4, _: Type4) { }\n-// CHECK: define{{.*}}foo119{{.*}}!type ![[TYPE119:[0-9]+]]\n+// CHECK: define{{.*}}foo119{{.*}}!type ![[TYPE119:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo120(_: Type5) { }\n-// CHECK: define{{.*}}foo120{{.*}}!type ![[TYPE120:[0-9]+]]\n+// CHECK: define{{.*}}foo120{{.*}}!type ![[TYPE120:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo121(_: Type5, _: Type5) { }\n-// CHECK: define{{.*}}foo121{{.*}}!type ![[TYPE121:[0-9]+]]\n+// CHECK: define{{.*}}foo121{{.*}}!type ![[TYPE121:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo122(_: Type5, _: Type5, _: Type5) { }\n-// CHECK: define{{.*}}foo122{{.*}}!type ![[TYPE122:[0-9]+]]\n+// CHECK: define{{.*}}foo122{{.*}}!type ![[TYPE122:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo123(_: Type6) { }\n-// CHECK: define{{.*}}foo123{{.*}}!type ![[TYPE123:[0-9]+]]\n+// CHECK: define{{.*}}foo123{{.*}}!type ![[TYPE123:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo124(_: Type6, _: Type6) { }\n-// CHECK: define{{.*}}foo124{{.*}}!type ![[TYPE124:[0-9]+]]\n+// CHECK: define{{.*}}foo124{{.*}}!type ![[TYPE124:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo125(_: Type6, _: Type6, _: Type6) { }\n-// CHECK: define{{.*}}foo125{{.*}}!type ![[TYPE125:[0-9]+]]\n+// CHECK: define{{.*}}foo125{{.*}}!type ![[TYPE125:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo126(_: Type7) { }\n-// CHECK: define{{.*}}foo126{{.*}}!type ![[TYPE126:[0-9]+]]\n+// CHECK: define{{.*}}foo126{{.*}}!type ![[TYPE126:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo127(_: Type7, _: Type7) { }\n-// CHECK: define{{.*}}foo127{{.*}}!type ![[TYPE127:[0-9]+]]\n+// CHECK: define{{.*}}foo127{{.*}}!type ![[TYPE127:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo128(_: Type7, _: Type7, _: Type7) { }\n-// CHECK: define{{.*}}foo128{{.*}}!type ![[TYPE128:[0-9]+]]\n+// CHECK: define{{.*}}foo128{{.*}}!type ![[TYPE128:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo129(_: Type8) { }\n-// CHECK: define{{.*}}foo129{{.*}}!type ![[TYPE129:[0-9]+]]\n+// CHECK: define{{.*}}foo129{{.*}}!type ![[TYPE129:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo130(_: Type8, _: Type8) { }\n-// CHECK: define{{.*}}foo130{{.*}}!type ![[TYPE130:[0-9]+]]\n+// CHECK: define{{.*}}foo130{{.*}}!type ![[TYPE130:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo131(_: Type8, _: Type8, _: Type8) { }\n-// CHECK: define{{.*}}foo131{{.*}}!type ![[TYPE131:[0-9]+]]\n+// CHECK: define{{.*}}foo131{{.*}}!type ![[TYPE131:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo132(_: Type9) { }\n-// CHECK: define{{.*}}foo132{{.*}}!type ![[TYPE132:[0-9]+]]\n+// CHECK: define{{.*}}foo132{{.*}}!type ![[TYPE132:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo133(_: Type9, _: Type9) { }\n-// CHECK: define{{.*}}foo133{{.*}}!type ![[TYPE133:[0-9]+]]\n+// CHECK: define{{.*}}foo133{{.*}}!type ![[TYPE133:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo134(_: Type9, _: Type9, _: Type9) { }\n-// CHECK: define{{.*}}foo134{{.*}}!type ![[TYPE134:[0-9]+]]\n+// CHECK: define{{.*}}foo134{{.*}}!type ![[TYPE134:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo135(_: Type10) { }\n-// CHECK: define{{.*}}foo135{{.*}}!type ![[TYPE135:[0-9]+]]\n+// CHECK: define{{.*}}foo135{{.*}}!type ![[TYPE135:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo136(_: Type10, _: Type10) { }\n-// CHECK: define{{.*}}foo136{{.*}}!type ![[TYPE136:[0-9]+]]\n+// CHECK: define{{.*}}foo136{{.*}}!type ![[TYPE136:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo137(_: Type10, _: Type10, _: Type10) { }\n-// CHECK: define{{.*}}foo137{{.*}}!type ![[TYPE137:[0-9]+]]\n+// CHECK: define{{.*}}foo137{{.*}}!type ![[TYPE137:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo138(_: Type11) { }\n-// CHECK: define{{.*}}foo138{{.*}}!type ![[TYPE138:[0-9]+]]\n+// CHECK: define{{.*}}foo138{{.*}}!type ![[TYPE138:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo139(_: Type11, _: Type11) { }\n-// CHECK: define{{.*}}foo139{{.*}}!type ![[TYPE139:[0-9]+]]\n+// CHECK: define{{.*}}foo139{{.*}}!type ![[TYPE139:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo140(_: Type11, _: Type11, _: Type11) { }\n-// CHECK: define{{.*}}foo140{{.*}}!type ![[TYPE140:[0-9]+]]\n+// CHECK: define{{.*}}foo140{{.*}}!type ![[TYPE140:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo141(_: Type12) { }\n-// CHECK: define{{.*}}foo141{{.*}}!type ![[TYPE141:[0-9]+]]\n+// CHECK: define{{.*}}foo141{{.*}}!type ![[TYPE141:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo142(_: Type12, _: Type12) { }\n-// CHECK: define{{.*}}foo142{{.*}}!type ![[TYPE142:[0-9]+]]\n+// CHECK: define{{.*}}foo142{{.*}}!type ![[TYPE142:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo143(_: Type12, _: Type12, _: Type12) { }\n-// CHECK: define{{.*}}foo143{{.*}}!type ![[TYPE143:[0-9]+]]\n+// CHECK: define{{.*}}foo143{{.*}}!type ![[TYPE143:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo144(_: Type13) { }\n-// CHECK: define{{.*}}foo144{{.*}}!type ![[TYPE144:[0-9]+]]\n+// CHECK: define{{.*}}foo144{{.*}}!type ![[TYPE144:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo145(_: Type13, _: Type13) { }\n-// CHECK: define{{.*}}foo145{{.*}}!type ![[TYPE145:[0-9]+]]\n+// CHECK: define{{.*}}foo145{{.*}}!type ![[TYPE145:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo146(_: Type13, _: Type13, _: Type13) { }\n-// CHECK: define{{.*}}foo146{{.*}}!type ![[TYPE146:[0-9]+]]\n+// CHECK: define{{.*}}foo146{{.*}}!type ![[TYPE146:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo147(_: Type14<Bar>) { }\n-// CHECK: define{{.*}}foo147{{.*}}!type ![[TYPE147:[0-9]+]]\n+// CHECK: define{{.*}}foo147{{.*}}!type ![[TYPE147:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo148(_: Type14<Bar>, _: Type14<Bar>) { }\n-// CHECK: define{{.*}}foo148{{.*}}!type ![[TYPE148:[0-9]+]]\n+// CHECK: define{{.*}}foo148{{.*}}!type ![[TYPE148:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo149(_: Type14<Bar>, _: Type14<Bar>, _: Type14<Bar>) { }\n-// CHECK: define{{.*}}foo149{{.*}}!type ![[TYPE149:[0-9]+]]\n+// CHECK: define{{.*}}foo149{{.*}}!type ![[TYPE149:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n \n // CHECK: ![[TYPE0]] = !{i64 0, !\"_ZTSFvvE\"}\n // CHECK: ![[TYPE1]] = !{i64 0, !\"_ZTSFvvvE\"}"}, {"sha": "78ef0c2c7d6bacf1d1337e2a61e1c7e8190a2f93", "filename": "tests/codegen/sanitizer-cfi-emit-type-metadata-itanium-cxx-abi-generalized.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fcodegen%2Fsanitizer-cfi-emit-type-metadata-itanium-cxx-abi-generalized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fcodegen%2Fsanitizer-cfi-emit-type-metadata-itanium-cxx-abi-generalized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fsanitizer-cfi-emit-type-metadata-itanium-cxx-abi-generalized.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -0,0 +1,31 @@\n+// Verifies that generalized type metadata for functions are emitted.\n+//\n+// needs-sanitizer-cfi\n+// compile-flags: -Clto -Cno-prepopulate-passes -Ctarget-feature=-crt-static -Zsanitizer=cfi -Zsanitizer-cfi-generalize-pointers\n+\n+#![crate_type=\"lib\"]\n+\n+pub fn foo(f: fn(i32) -> i32, arg: i32) -> i32 {\n+    // CHECK-LABEL: define{{.*}}foo\n+    // CHECK-SAME:  {{.*}}!type ![[TYPE1:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}}\n+    // CHECK:       call i1 @llvm.type.test({{i8\\*|ptr}} {{%f|%0}}, metadata !\"_ZTSFu3i32S_E.generalized\")\n+    f(arg)\n+}\n+\n+pub fn bar(f: fn(i32, i32) -> i32, arg1: i32, arg2: i32) -> i32 {\n+    // CHECK-LABEL: define{{.*}}bar\n+    // CHECK-SAME:  {{.*}}!type ![[TYPE2:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}}\n+    // CHECK:       call i1 @llvm.type.test({{i8\\*|ptr}} {{%f|%0}}, metadata !\"_ZTSFu3i32S_S_E.generalized\")\n+    f(arg1, arg2)\n+}\n+\n+pub fn baz(f: fn(i32, i32, i32) -> i32, arg1: i32, arg2: i32, arg3: i32) -> i32 {\n+    // CHECK-LABEL: define{{.*}}baz\n+    // CHECK-SAME:  {{.*}}!type ![[TYPE3:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}}\n+    // CHECK:       call i1 @llvm.type.test({{i8\\*|ptr}} {{%f|%0}}, metadata !\"_ZTSFu3i32S_S_S_E.generalized\")\n+    f(arg1, arg2, arg3)\n+}\n+\n+// CHECK: ![[TYPE1]] = !{i64 0, !\"_ZTSFu3i32PKvS_E.generalized\"}\n+// CHECK: ![[TYPE2]] = !{i64 0, !\"_ZTSFu3i32PKvS_S_E.generalized\"}\n+// CHECK: ![[TYPE3]] = !{i64 0, !\"_ZTSFu3i32PKvS_S_S_E.generalized\"}"}, {"sha": "3b72459c4b097684aa5410fd441c2d9776e690cd", "filename": "tests/codegen/sanitizer-cfi-emit-type-metadata-itanium-cxx-abi-normalized-generalized.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fcodegen%2Fsanitizer-cfi-emit-type-metadata-itanium-cxx-abi-normalized-generalized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fcodegen%2Fsanitizer-cfi-emit-type-metadata-itanium-cxx-abi-normalized-generalized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fsanitizer-cfi-emit-type-metadata-itanium-cxx-abi-normalized-generalized.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -0,0 +1,31 @@\n+// Verifies that normalized and generalized type metadata for functions are emitted.\n+//\n+// needs-sanitizer-cfi\n+// compile-flags: -Clto -Cno-prepopulate-passes -Ctarget-feature=-crt-static -Zsanitizer=cfi -Zsanitizer-cfi-normalize-integers -Zsanitizer-cfi-generalize-pointers\n+\n+#![crate_type=\"lib\"]\n+\n+pub fn foo(f: fn(i32) -> i32, arg: i32) -> i32 {\n+    // CHECK-LABEL: define{{.*}}foo\n+    // CHECK-SAME:  {{.*}}![[TYPE1:[0-9]+]]\n+    // CHECK:       call i1 @llvm.type.test({{i8\\*|ptr}} {{%f|%0}}, metadata !\"_ZTSFu3i32S_E.normalized.generalized\")\n+    f(arg)\n+}\n+\n+pub fn bar(f: fn(i32, i32) -> i32, arg1: i32, arg2: i32) -> i32 {\n+    // CHECK-LABEL: define{{.*}}bar\n+    // CHECK-SAME:  {{.*}}![[TYPE2:[0-9]+]]\n+    // CHECK:       call i1 @llvm.type.test({{i8\\*|ptr}} {{%f|%0}}, metadata !\"_ZTSFu3i32S_S_E.normalized.generalized\")\n+    f(arg1, arg2)\n+}\n+\n+pub fn baz(f: fn(i32, i32, i32) -> i32, arg1: i32, arg2: i32, arg3: i32) -> i32 {\n+    // CHECK-LABEL: define{{.*}}baz\n+    // CHECK-SAME:  {{.*}}![[TYPE3:[0-9]+]]\n+    // CHECK:       call i1 @llvm.type.test({{i8\\*|ptr}} {{%f|%0}}, metadata !\"_ZTSFu3i32S_S_S_E.normalized.generalized\")\n+    f(arg1, arg2, arg3)\n+}\n+\n+// CHECK: ![[TYPE1]] = !{i64 0, !\"_ZTSFu3i32PKvS_E.normalized.generalized\"}\n+// CHECK: ![[TYPE2]] = !{i64 0, !\"_ZTSFu3i32PKvS_S_E.normalized.generalized\"}\n+// CHECK: ![[TYPE3]] = !{i64 0, !\"_ZTSFu3i32PKvS_S_S_E.normalized.generalized\"}"}, {"sha": "9218e9947bfe3cae1a9faac4ac721d3a1759ac22", "filename": "tests/codegen/sanitizer-cfi-emit-type-metadata-itanium-cxx-abi-normalized.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fcodegen%2Fsanitizer-cfi-emit-type-metadata-itanium-cxx-abi-normalized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fcodegen%2Fsanitizer-cfi-emit-type-metadata-itanium-cxx-abi-normalized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fsanitizer-cfi-emit-type-metadata-itanium-cxx-abi-normalized.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -0,0 +1,31 @@\n+// Verifies that normalized type metadata for functions are emitted.\n+//\n+// needs-sanitizer-cfi\n+// compile-flags: -Clto -Cno-prepopulate-passes -Ctarget-feature=-crt-static -Zsanitizer=cfi -Zsanitizer-cfi-normalize-integers\n+\n+#![crate_type=\"lib\"]\n+\n+pub fn foo(f: fn(i32) -> i32, arg: i32) -> i32 {\n+    // CHECK-LABEL: define{{.*}}foo\n+    // CHECK-SAME:  {{.*}}!type ![[TYPE1:[0-9]+]] !type !{{[0-9]+}}\n+    // CHECK:       call i1 @llvm.type.test({{i8\\*|ptr}} {{%f|%0}}, metadata !\"_ZTSFu3i32S_E.normalized\")\n+    f(arg)\n+}\n+\n+pub fn bar(f: fn(i32, i32) -> i32, arg1: i32, arg2: i32) -> i32 {\n+    // CHECK-LABEL: define{{.*}}bar\n+    // CHECK-SAME:  {{.*}}!type ![[TYPE2:[0-9]+]] !type !{{[0-9]+}}\n+    // CHECK:       call i1 @llvm.type.test({{i8\\*|ptr}} {{%f|%0}}, metadata !\"_ZTSFu3i32S_S_E.normalized\")\n+    f(arg1, arg2)\n+}\n+\n+pub fn baz(f: fn(i32, i32, i32) -> i32, arg1: i32, arg2: i32, arg3: i32) -> i32 {\n+    // CHECK-LABEL: define{{.*}}baz\n+    // CHECK-SAME:  {{.*}}!type ![[TYPE3:[0-9]+]] !type !{{[0-9]+}}\n+    // CHECK:       call i1 @llvm.type.test({{i8\\*|ptr}} {{%f|%0}}, metadata !\"_ZTSFu3i32S_S_S_E.normalized\")\n+    f(arg1, arg2, arg3)\n+}\n+\n+// CHECK: ![[TYPE1]] = !{i64 0, !\"_ZTSFu3i32PFS_S_ES_E.normalized\"}\n+// CHECK: ![[TYPE2]] = !{i64 0, !\"_ZTSFu3i32PFS_S_S_ES_S_E.normalized\"}\n+// CHECK: ![[TYPE3]] = !{i64 0, !\"_ZTSFu3i32PFS_S_S_S_ES_S_S_E.normalized\"}"}, {"sha": "f9fd816dedb9d35ea09ddc6885bb8c516ba9c9d4", "filename": "tests/codegen/sanitizer-cfi-emit-type-metadata-itanium-cxx-abi.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fcodegen%2Fsanitizer-cfi-emit-type-metadata-itanium-cxx-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fcodegen%2Fsanitizer-cfi-emit-type-metadata-itanium-cxx-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fsanitizer-cfi-emit-type-metadata-itanium-cxx-abi.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -7,21 +7,21 @@\n \n pub fn foo(f: fn(i32) -> i32, arg: i32) -> i32 {\n     // CHECK-LABEL: define{{.*}}foo\n-    // CHECK-SAME: {{.*}}!type ![[TYPE1:[0-9]+]]\n+    // CHECK-SAME:  {{.*}}!type ![[TYPE1:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n     // CHECK:       call i1 @llvm.type.test({{i8\\*|ptr}} {{%f|%0}}, metadata !\"_ZTSFu3i32S_E\")\n     f(arg)\n }\n \n pub fn bar(f: fn(i32, i32) -> i32, arg1: i32, arg2: i32) -> i32 {\n     // CHECK-LABEL: define{{.*}}bar\n-    // CHECK-SAME: {{.*}}!type ![[TYPE2:[0-9]+]]\n+    // CHECK-SAME:  {{.*}}!type ![[TYPE2:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n     // CHECK:       call i1 @llvm.type.test({{i8\\*|ptr}} {{%f|%0}}, metadata !\"_ZTSFu3i32S_S_E\")\n     f(arg1, arg2)\n }\n \n pub fn baz(f: fn(i32, i32, i32) -> i32, arg1: i32, arg2: i32, arg3: i32) -> i32 {\n     // CHECK-LABEL: define{{.*}}baz\n-    // CHECK-SAME: {{.*}}!type ![[TYPE3:[0-9]+]]\n+    // CHECK-SAME:  {{.*}}!type ![[TYPE3:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n     // CHECK:       call i1 @llvm.type.test({{i8\\*|ptr}} {{%f|%0}}, metadata !\"_ZTSFu3i32S_S_S_E\")\n     f(arg1, arg2, arg3)\n }"}, {"sha": "677ebdb27ec5e7505530bc453c6a1edac2fde917", "filename": "tests/codegen/sanitizer-cfi-generalize-pointers.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fcodegen%2Fsanitizer-cfi-generalize-pointers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fcodegen%2Fsanitizer-cfi-generalize-pointers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fsanitizer-cfi-generalize-pointers.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -0,0 +1,46 @@\n+// Verifies that pointer types are generalized.\n+//\n+// needs-sanitizer-cfi\n+// compile-flags: -Clto -Cno-prepopulate-passes -Ctarget-feature=-crt-static -Zsanitizer=cfi -Zsanitizer-cfi-generalize-pointers\n+\n+#![crate_type=\"lib\"]\n+\n+extern crate core;\n+\n+pub fn foo0(_: &mut i32) { }\n+// CHECK: define{{.*}}foo0{{.*}}!type ![[TYPE0:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}}\n+pub fn foo1(_: &mut i32, _: &mut i32) { }\n+// CHECK: define{{.*}}foo1{{.*}}!type ![[TYPE1:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}}\n+pub fn foo2(_: &mut i32, _: &mut i32, _: &mut i32) { }\n+// CHECK: define{{.*}}foo2{{.*}}!type ![[TYPE2:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}}\n+pub fn foo3(_: &i32) { }\n+// CHECK: define{{.*}}foo3{{.*}}!type ![[TYPE3:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}}\n+pub fn foo4(_: &i32, _: &i32) { }\n+// CHECK: define{{.*}}foo4{{.*}}!type ![[TYPE4:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}}\n+pub fn foo5(_: &i32, _: &i32, _: &i32) { }\n+// CHECK: define{{.*}}foo5{{.*}}!type ![[TYPE5:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}}\n+pub fn foo6(_: *mut i32) { }\n+// CHECK: define{{.*}}foo6{{.*}}!type ![[TYPE6:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}}\n+pub fn foo7(_: *mut i32, _: *mut i32) { }\n+// CHECK: define{{.*}}foo7{{.*}}!type ![[TYPE7:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}}\n+pub fn foo8(_: *mut i32, _: *mut i32, _: *mut i32) { }\n+// CHECK: define{{.*}}foo8{{.*}}!type ![[TYPE8:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}}\n+pub fn foo9(_: *const i32) { }\n+// CHECK: define{{.*}}foo9{{.*}}!type ![[TYPE9:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}}\n+pub fn foo10(_: *const i32, _: *const i32) { }\n+// CHECK: define{{.*}}foo10{{.*}}!type ![[TYPE10:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}}\n+pub fn foo11(_: *const i32, _: *const i32, _: *const i32) { }\n+// CHECK: define{{.*}}foo11{{.*}}!type ![[TYPE11:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}}\n+\n+// CHECK: ![[TYPE0]] = !{i64 0, !\"_ZTSFvU3mutu3refIvEE.generalized\"}\n+// CHECK: ![[TYPE1]] = !{i64 0, !\"_ZTSFvU3mutu3refIvES0_E.generalized\"}\n+// CHECK: ![[TYPE2]] = !{i64 0, !\"_ZTSFvU3mutu3refIvES0_S0_E.generalized\"}\n+// CHECK: ![[TYPE3]] = !{i64 0, !\"_ZTSFvu3refIvEE.generalized\"}\n+// CHECK: ![[TYPE4]] = !{i64 0, !\"_ZTSFvu3refIvES_E.generalized\"}\n+// CHECK: ![[TYPE5]] = !{i64 0, !\"_ZTSFvu3refIvES_S_E.generalized\"}\n+// CHECK: ![[TYPE6]] = !{i64 0, !\"_ZTSFvPvE.generalized\"}\n+// CHECK: ![[TYPE7]] = !{i64 0, !\"_ZTSFvPvS_E.generalized\"}\n+// CHECK: ![[TYPE8]] = !{i64 0, !\"_ZTSFvPvS_S_E.generalized\"}\n+// CHECK: ![[TYPE9]] = !{i64 0, !\"_ZTSFvPKvE.generalized\"}\n+// CHECK: ![[TYPE10]] = !{i64 0, !\"_ZTSFvPKvS0_E.generalized\"}\n+// CHECK: ![[TYPE11]] = !{i64 0, !\"_ZTSFvPKvS0_S0_E.generalized\"}"}, {"sha": "aa3913cb8e7d27e551bc8a93c6a2deac151d8f35", "filename": "tests/codegen/sanitizer-cfi-normalize-integers.rs", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fcodegen%2Fsanitizer-cfi-normalize-integers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fcodegen%2Fsanitizer-cfi-normalize-integers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fsanitizer-cfi-normalize-integers.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -0,0 +1,83 @@\n+// Verifies that integer types are normalized.\n+//\n+// needs-sanitizer-cfi\n+// compile-flags: -Clto -Cno-prepopulate-passes -Ctarget-feature=-crt-static -Zsanitizer=cfi -Zsanitizer-cfi-normalize-integers\n+\n+#![crate_type=\"lib\"]\n+\n+extern crate core;\n+use core::ffi::*;\n+\n+pub fn foo0(_: bool) { }\n+// CHECK: define{{.*}}foo0{{.*}}!type ![[TYPE0:[0-9]+]] !type !{{[0-9]+}}\n+pub fn foo1(_: bool, _: c_uchar) { }\n+// CHECK: define{{.*}}foo1{{.*}}!type ![[TYPE1:[0-9]+]] !type !{{[0-9]+}}\n+pub fn foo2(_: bool, _: c_uchar, _: c_uchar) { }\n+// CHECK: define{{.*}}foo2{{.*}}!type ![[TYPE2:[0-9]+]] !type !{{[0-9]+}}\n+pub fn foo3(_: isize) { }\n+// CHECK: define{{.*}}foo3{{.*}}!type ![[TYPE3:[0-9]+]] !type !{{[0-9]+}}\n+pub fn foo4(_: isize, _: c_long) { }\n+// CHECK: define{{.*}}foo4{{.*}}!type ![[TYPE4:[0-9]+]] !type !{{[0-9]+}}\n+pub fn foo5(_: isize, _: c_long, _: c_longlong) { }\n+// CHECK: define{{.*}}foo5{{.*}}!type ![[TYPE5:[0-9]+]] !type !{{[0-9]+}}\n+pub fn foo6(_: usize) { }\n+// CHECK: define{{.*}}foo6{{.*}}!type ![[TYPE6:[0-9]+]] !type !{{[0-9]+}}\n+pub fn foo7(_: usize, _: c_ulong) { }\n+// CHECK: define{{.*}}foo7{{.*}}!type ![[TYPE7:[0-9]+]] !type !{{[0-9]+}}\n+pub fn foo8(_: usize, _: c_ulong, _: c_ulonglong) { }\n+// CHECK: define{{.*}}foo8{{.*}}!type ![[TYPE8:[0-9]+]] !type !{{[0-9]+}}\n+pub fn foo9(_: c_schar) { }\n+// CHECK: define{{.*}}foo9{{.*}}!type ![[TYPE9:[0-9]+]] !type !{{[0-9]+}}\n+pub fn foo10(_: c_char, _: c_schar) { }\n+// CHECK: define{{.*}}foo10{{.*}}!type ![[TYPE10:[0-9]+]] !type !{{[0-9]+}}\n+pub fn foo11(_: c_char, _: c_schar, _: c_schar) { }\n+// CHECK: define{{.*}}foo11{{.*}}!type ![[TYPE11:[0-9]+]] !type !{{[0-9]+}}\n+pub fn foo12(_: c_int) { }\n+// CHECK: define{{.*}}foo12{{.*}}!type ![[TYPE12:[0-9]+]] !type !{{[0-9]+}}\n+pub fn foo13(_: c_int, _: c_int) { }\n+// CHECK: define{{.*}}foo13{{.*}}!type ![[TYPE13:[0-9]+]] !type !{{[0-9]+}}\n+pub fn foo14(_: c_int, _: c_int, _: c_int) { }\n+// CHECK: define{{.*}}foo14{{.*}}!type ![[TYPE14:[0-9]+]] !type !{{[0-9]+}}\n+pub fn foo15(_: c_short) { }\n+// CHECK: define{{.*}}foo15{{.*}}!type ![[TYPE15:[0-9]+]] !type !{{[0-9]+}}\n+pub fn foo16(_: c_short, _: c_short) { }\n+// CHECK: define{{.*}}foo16{{.*}}!type ![[TYPE16:[0-9]+]] !type !{{[0-9]+}}\n+pub fn foo17(_: c_short, _: c_short, _: c_short) { }\n+// CHECK: define{{.*}}foo17{{.*}}!type ![[TYPE17:[0-9]+]] !type !{{[0-9]+}}\n+pub fn foo18(_: c_uint) { }\n+// CHECK: define{{.*}}foo18{{.*}}!type ![[TYPE18:[0-9]+]] !type !{{[0-9]+}}\n+pub fn foo19(_: c_uint, _: c_uint) { }\n+// CHECK: define{{.*}}foo19{{.*}}!type ![[TYPE19:[0-9]+]] !type !{{[0-9]+}}\n+pub fn foo20(_: c_uint, _: c_uint, _: c_uint) { }\n+// CHECK: define{{.*}}foo20{{.*}}!type ![[TYPE20:[0-9]+]] !type !{{[0-9]+}}\n+pub fn foo21(_: c_ushort) { }\n+// CHECK: define{{.*}}foo21{{.*}}!type ![[TYPE21:[0-9]+]] !type !{{[0-9]+}}\n+pub fn foo22(_: c_ushort, _: c_ushort) { }\n+// CHECK: define{{.*}}foo22{{.*}}!type ![[TYPE22:[0-9]+]] !type !{{[0-9]+}}\n+pub fn foo23(_: c_ushort, _: c_ushort, _: c_ushort) { }\n+// CHECK: define{{.*}}foo23{{.*}}!type ![[TYPE23:[0-9]+]] !type !{{[0-9]+}}\n+\n+// CHECK: ![[TYPE0]] = !{i64 0, !\"_ZTSFvu2u8E.normalized\"}\n+// CHECK: ![[TYPE1]] = !{i64 0, !\"_ZTSFvu2u8S_E.normalized\"}\n+// CHECK: ![[TYPE2]] = !{i64 0, !\"_ZTSFvu2u8S_S_E.normalized\"}\n+// CHECK: ![[TYPE3]] = !{i64 0, !\"_ZTSFv{{u3i16|u3i32|u3i64}}E.normalized\"}\n+// CHECK: ![[TYPE4]] = !{i64 0, !\"_ZTSFv{{u3i16|u3i32|u3i64}}{{u3i32|u3i64|S_}}E.normalized\"}\n+// CHECK: ![[TYPE5]] = !{i64 0, !\"_ZTSFv{{u3i16|u3i32|u3i64}}{{u3i32|u3i64|S_}}{{u3i64|S_|S0_}}E.normalized\"}\n+// CHECK: ![[TYPE6]] = !{i64 0, !\"_ZTSFv{{u3u16|u3u32|u3u64}}E.normalized\"}\n+// CHECK: ![[TYPE7]] = !{i64 0, !\"_ZTSFv{{u3u16|u3u32|u3u64}}{{u3u32|u3u64|S_}}E.normalized\"}\n+// CHECK: ![[TYPE8]] = !{i64 0, !\"_ZTSFv{{u3u16|u3u32|u3u64}}{{u3u32|u3u64|S_}}{{u3u64|S_|S0_}}E.normalized\"}\n+// CHECK: ![[TYPE9]] = !{i64 0, !\"_ZTSFvu2i8E.normalized\"}\n+// CHECK: ![[TYPE10]] = !{i64 0, !\"_ZTSFv{{u2i8S_|u2u8u2i8}}E.normalized\"}\n+// CHECK: ![[TYPE11]] = !{i64 0, !\"_ZTSFv{{u2i8S_S_|u2u8u2i8S0_}}E.normalized\"}\n+// CHECK: ![[TYPE12]] = !{i64 0, !\"_ZTSFv{{u3i16|u3i32|u3i64}}E.normalized\"}\n+// CHECK: ![[TYPE13]] = !{i64 0, !\"_ZTSFv{{u3i16|u3i32|u3i64}}S_E.normalized\"}\n+// CHECK: ![[TYPE14]] = !{i64 0, !\"_ZTSFv{{u3i16|u3i32|u3i64}}S_S_E.normalized\"}\n+// CHECK: ![[TYPE15]] = !{i64 0, !\"_ZTSFvu3i16E.normalized\"}\n+// CHECK: ![[TYPE16]] = !{i64 0, !\"_ZTSFvu3i16S_E.normalized\"}\n+// CHECK: ![[TYPE17]] = !{i64 0, !\"_ZTSFvu3i16S_S_E.normalized\"}\n+// CHECK: ![[TYPE18]] = !{i64 0, !\"_ZTSFv{{u3u16|u3u32|u3u64}}E.normalized\"}\n+// CHECK: ![[TYPE19]] = !{i64 0, !\"_ZTSFv{{u3u16|u3u32|u3u64}}S_E.normalized\"}\n+// CHECK: ![[TYPE20]] = !{i64 0, !\"_ZTSFv{{u3u16|u3u32|u3u64}}S_S_E.normalized\"}\n+// CHECK: ![[TYPE21]] = !{i64 0, !\"_ZTSFvu3u16E.normalized\"}\n+// CHECK: ![[TYPE22]] = !{i64 0, !\"_ZTSFvu3u16S_E.normalized\"}\n+// CHECK: ![[TYPE23]] = !{i64 0, !\"_ZTSFvu3u16S_S_E.normalized\"}"}, {"sha": "bb317e4a2fad384970de14762c0c7f2dcb79b5ad", "filename": "tests/codegen/sanitizer-kcfi-emit-kcfi-operand-bundle-attr-no-sanitize.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fcodegen%2Fsanitizer-kcfi-emit-kcfi-operand-bundle-attr-no-sanitize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fcodegen%2Fsanitizer-kcfi-emit-kcfi-operand-bundle-attr-no-sanitize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fsanitizer-kcfi-emit-kcfi-operand-bundle-attr-no-sanitize.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -0,0 +1,30 @@\n+// Verifies that KCFI operand bundles are omitted.\n+//\n+// revisions: aarch64 x86_64\n+// [aarch64] compile-flags: --target aarch64-unknown-none\n+// [aarch64] needs-llvm-components: aarch64\n+// [x86_64] compile-flags: --target x86_64-unknown-none\n+// [x86_64] needs-llvm-components:\n+// compile-flags: -Cno-prepopulate-passes -Zsanitizer=kcfi -Copt-level=0\n+\n+#![crate_type=\"lib\"]\n+#![feature(no_core, no_sanitize, lang_items)]\n+#![no_core]\n+\n+#[lang=\"sized\"]\n+trait Sized { }\n+#[lang=\"copy\"]\n+trait Copy { }\n+\n+impl Copy for i32 {}\n+\n+#[no_sanitize(kcfi)]\n+pub fn foo(f: fn(i32) -> i32, arg: i32) -> i32 {\n+    // CHECK-LABEL: sanitizer_kcfi_emit_kcfi_operand_bundle_attr_no_sanitize::foo\n+    // CHECK:       Function Attrs: {{.*}}\n+    // CHECK-LABEL: define{{.*}}foo{{.*}}!{{<unknown kind #36>|kcfi_type}} !{{[0-9]+}}\n+    // CHECK:       start:\n+    // CHECK-NOT:   {{%.+}} = call {{(noundef )*}}i32 %f(i32 {{(noundef )*}}%arg){{.*}}[ \"kcfi\"(i32 {{[-0-9]+}}) ]\n+    // CHECK:       ret i32 {{%.+}}\n+    f(arg)\n+}"}, {"sha": "29e4df3511fbbc9178a9d5b1ffac737e26d97345", "filename": "tests/codegen/sanitizer-kcfi-emit-kcfi-operand-bundle-itanium-cxx-abi-generalized.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fcodegen%2Fsanitizer-kcfi-emit-kcfi-operand-bundle-itanium-cxx-abi-generalized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fcodegen%2Fsanitizer-kcfi-emit-kcfi-operand-bundle-itanium-cxx-abi-generalized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fsanitizer-kcfi-emit-kcfi-operand-bundle-itanium-cxx-abi-generalized.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -0,0 +1,44 @@\n+// Verifies that generalized KCFI type metadata for functions are emitted.\n+//\n+// revisions: aarch64 x86_64\n+// [aarch64] compile-flags: --target aarch64-unknown-none\n+// [aarch64] needs-llvm-components: aarch64\n+// [x86_64] compile-flags: --target x86_64-unknown-none\n+// [x86_64] needs-llvm-components:\n+// compile-flags: -Cno-prepopulate-passes -Zsanitizer=kcfi -Zsanitizer-cfi-generalize-pointers\n+\n+#![crate_type=\"lib\"]\n+#![feature(no_core, lang_items)]\n+#![no_core]\n+\n+#[lang=\"sized\"]\n+trait Sized { }\n+#[lang=\"copy\"]\n+trait Copy { }\n+\n+impl Copy for i32 {}\n+\n+pub fn foo(f: fn(i32) -> i32, arg: i32) -> i32 {\n+    // CHECK-LABEL: define{{.*}}foo\n+    // CHECK-SAME:  {{.*}}!{{<unknown kind #36>|kcfi_type}} ![[TYPE1:[0-9]+]]\n+    // CHECK:       {{%.+}} = call {{(noundef )*}}i32 %f(i32 {{(noundef )*}}%arg){{.*}}[ \"kcfi\"(i32 233085384) ]\n+    f(arg)\n+}\n+\n+pub fn bar(f: fn(i32, i32) -> i32, arg1: i32, arg2: i32) -> i32 {\n+    // CHECK-LABEL: define{{.*}}bar\n+    // CHECK-SAME:  {{.*}}!{{<unknown kind #36>|kcfi_type}} ![[TYPE2:[0-9]+]]\n+    // CHECK:       {{%.+}} = call {{(noundef )*}}i32 %f(i32 {{(noundef )*}}%arg1, i32 {{(noundef )*}}%arg2){{.*}}[ \"kcfi\"(i32 435418021) ]\n+    f(arg1, arg2)\n+}\n+\n+pub fn baz(f: fn(i32, i32, i32) -> i32, arg1: i32, arg2: i32, arg3: i32) -> i32 {\n+    // CHECK-LABEL: define{{.*}}baz\n+    // CHECK-SAME:  {{.*}}!{{<unknown kind #36>|kcfi_type}} ![[TYPE3:[0-9]+]]\n+    // CHECK:       {{%.+}} = call {{(noundef )*}}i32 %f(i32 {{(noundef )*}}%arg1, i32 {{(noundef )*}}%arg2, i32 {{(noundef )*}}%arg3){{.*}}[ \"kcfi\"(i32 -1003721339) ]\n+    f(arg1, arg2, arg3)\n+}\n+\n+// CHECK: ![[TYPE1]] = !{i32 -1741689296}\n+// CHECK: ![[TYPE2]] = !{i32 489439372}\n+// CHECK: ![[TYPE3]] = !{i32 2026563871}"}, {"sha": "84d678a33ba906dc26d4444a53be32dc2c44c069", "filename": "tests/codegen/sanitizer-kcfi-emit-kcfi-operand-bundle-itanium-cxx-abi-normalized-generalized.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fcodegen%2Fsanitizer-kcfi-emit-kcfi-operand-bundle-itanium-cxx-abi-normalized-generalized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fcodegen%2Fsanitizer-kcfi-emit-kcfi-operand-bundle-itanium-cxx-abi-normalized-generalized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fsanitizer-kcfi-emit-kcfi-operand-bundle-itanium-cxx-abi-normalized-generalized.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -0,0 +1,44 @@\n+// Verifies that normalized and generalized KCFI type metadata for functions are emitted.\n+//\n+// revisions: aarch64 x86_64\n+// [aarch64] compile-flags: --target aarch64-unknown-none\n+// [aarch64] needs-llvm-components: aarch64\n+// [x86_64] compile-flags: --target x86_64-unknown-none\n+// [x86_64] needs-llvm-components:\n+// compile-flags: -Cno-prepopulate-passes -Zsanitizer=kcfi -Zsanitizer-cfi-normalize-integers -Zsanitizer-cfi-generalize-pointers\n+\n+#![crate_type=\"lib\"]\n+#![feature(no_core, lang_items)]\n+#![no_core]\n+\n+#[lang=\"sized\"]\n+trait Sized { }\n+#[lang=\"copy\"]\n+trait Copy { }\n+\n+impl Copy for i32 {}\n+\n+pub fn foo(f: fn(i32) -> i32, arg: i32) -> i32 {\n+    // CHECK-LABEL: define{{.*}}foo\n+    // CHECK-SAME:  {{.*}}!{{<unknown kind #36>|kcfi_type}} ![[TYPE1:[0-9]+]]\n+    // CHECK:       {{%.+}} = call {{(noundef )*}}i32 %f(i32 {{(noundef )*}}%arg){{.*}}[ \"kcfi\"(i32 -686570305) ]\n+    f(arg)\n+}\n+\n+pub fn bar(f: fn(i32, i32) -> i32, arg1: i32, arg2: i32) -> i32 {\n+    // CHECK-LABEL: define{{.*}}bar\n+    // CHECK-SAME:  {{.*}}!{{<unknown kind #36>|kcfi_type}} ![[TYPE2:[0-9]+]]\n+    // CHECK:       {{%.+}} = call {{(noundef )*}}i32 %f(i32 {{(noundef )*}}%arg1, i32 {{(noundef )*}}%arg2){{.*}}[ \"kcfi\"(i32 1281038450) ]\n+    f(arg1, arg2)\n+}\n+\n+pub fn baz(f: fn(i32, i32, i32) -> i32, arg1: i32, arg2: i32, arg3: i32) -> i32 {\n+    // CHECK-LABEL: define{{.*}}baz\n+    // CHECK-SAME:  {{.*}}!{{<unknown kind #36>|kcfi_type}} ![[TYPE3:[0-9]+]]\n+    // CHECK:       {{%.+}} = call {{(noundef )*}}i32 %f(i32 {{(noundef )*}}%arg1, i32 {{(noundef )*}}%arg2, i32 {{(noundef )*}}%arg3){{.*}}[ \"kcfi\"(i32 -1751512973) ]\n+    f(arg1, arg2, arg3)\n+}\n+\n+// CHECK: ![[TYPE1]] = !{i32 975484707}\n+// CHECK: ![[TYPE2]] = !{i32 1658833102}\n+// CHECK: ![[TYPE3]] = !{i32 230429758}"}, {"sha": "761c37a9e06a07c443f209c627083e1971f6ae7c", "filename": "tests/codegen/sanitizer-kcfi-emit-kcfi-operand-bundle-itanium-cxx-abi-normalized.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fcodegen%2Fsanitizer-kcfi-emit-kcfi-operand-bundle-itanium-cxx-abi-normalized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fcodegen%2Fsanitizer-kcfi-emit-kcfi-operand-bundle-itanium-cxx-abi-normalized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fsanitizer-kcfi-emit-kcfi-operand-bundle-itanium-cxx-abi-normalized.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -0,0 +1,44 @@\n+// Verifies that normalized KCFI type metadata for functions are emitted.\n+//\n+// revisions: aarch64 x86_64\n+// [aarch64] compile-flags: --target aarch64-unknown-none\n+// [aarch64] needs-llvm-components: aarch64\n+// [x86_64] compile-flags: --target x86_64-unknown-none\n+// [x86_64] needs-llvm-components:\n+// compile-flags: -Cno-prepopulate-passes -Zsanitizer=kcfi -Zsanitizer-cfi-normalize-integers\n+\n+#![crate_type=\"lib\"]\n+#![feature(no_core, lang_items)]\n+#![no_core]\n+\n+#[lang=\"sized\"]\n+trait Sized { }\n+#[lang=\"copy\"]\n+trait Copy { }\n+\n+impl Copy for i32 {}\n+\n+pub fn foo(f: fn(i32) -> i32, arg: i32) -> i32 {\n+    // CHECK-LABEL: define{{.*}}foo\n+    // CHECK-SAME:  {{.*}}!{{<unknown kind #36>|kcfi_type}} ![[TYPE1:[0-9]+]]\n+    // CHECK:       {{%.+}} = call {{(noundef )*}}i32 %f(i32 {{(noundef )*}}%arg){{.*}}[ \"kcfi\"(i32 -841055669) ]\n+    f(arg)\n+}\n+\n+pub fn bar(f: fn(i32, i32) -> i32, arg1: i32, arg2: i32) -> i32 {\n+    // CHECK-LABEL: define{{.*}}bar\n+    // CHECK-SAME:  {{.*}}!{{<unknown kind #36>|kcfi_type}} ![[TYPE2:[0-9]+]]\n+    // CHECK:       {{%.+}} = call {{(noundef )*}}i32 %f(i32 {{(noundef )*}}%arg1, i32 {{(noundef )*}}%arg2){{.*}}[ \"kcfi\"(i32 1390819368) ]\n+    f(arg1, arg2)\n+}\n+\n+pub fn baz(f: fn(i32, i32, i32) -> i32, arg1: i32, arg2: i32, arg3: i32) -> i32 {\n+    // CHECK-LABEL: define{{.*}}baz\n+    // CHECK-SAME:  {{.*}}!{{<unknown kind #36>|kcfi_type}} ![[TYPE3:[0-9]+]]\n+    // CHECK:       {{%.+}} = call {{(noundef )*}}i32 %f(i32 {{(noundef )*}}%arg1, i32 {{(noundef )*}}%arg2, i32 {{(noundef )*}}%arg3){{.*}}[ \"kcfi\"(i32 586925835) ]\n+    f(arg1, arg2, arg3)\n+}\n+\n+// CHECK: ![[TYPE1]] = !{i32 -458317079}\n+// CHECK: ![[TYPE2]] = !{i32 1737138182}\n+// CHECK: ![[TYPE3]] = !{i32 197182412}"}, {"sha": "83cda0ef136f88510202d705205e1949305595d8", "filename": "tests/codegen/sanitizer-kcfi-emit-kcfi-operand-bundle-itanium-cxx-abi.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fcodegen%2Fsanitizer-kcfi-emit-kcfi-operand-bundle-itanium-cxx-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fcodegen%2Fsanitizer-kcfi-emit-kcfi-operand-bundle-itanium-cxx-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fsanitizer-kcfi-emit-kcfi-operand-bundle-itanium-cxx-abi.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -20,22 +20,22 @@ impl Copy for i32 {}\n \n pub fn foo(f: fn(i32) -> i32, arg: i32) -> i32 {\n     // CHECK-LABEL: define{{.*}}foo\n-    // CHECK-SAME: {{.*}}!{{<unknown kind #36>|kcfi_type}} ![[TYPE1:[0-9]+]]\n-    // CHECK: call i32 %f(i32 %arg){{.*}}[ \"kcfi\"(i32 -1666898348) ]\n+    // CHECK-SAME:  {{.*}}!{{<unknown kind #36>|kcfi_type}} ![[TYPE1:[0-9]+]]\n+    // CHECK:       {{%.+}} = call {{(noundef )*}}i32 %f(i32 {{(noundef )*}}%arg){{.*}}[ \"kcfi\"(i32 -1666898348) ]\n     f(arg)\n }\n \n pub fn bar(f: fn(i32, i32) -> i32, arg1: i32, arg2: i32) -> i32 {\n     // CHECK-LABEL: define{{.*}}bar\n-    // CHECK-SAME: {{.*}}!{{<unknown kind #36>|kcfi_type}} ![[TYPE2:[0-9]+]]\n-    // CHECK: call i32 %f(i32 %arg1, i32 %arg2){{.*}}[ \"kcfi\"(i32 -1789026986) ]\n+    // CHECK-SAME:  {{.*}}!{{<unknown kind #36>|kcfi_type}} ![[TYPE2:[0-9]+]]\n+    // CHECK:       {{%.+}} = call {{(noundef )*}}i32 %f(i32 {{(noundef )*}}%arg1, i32 {{(noundef )*}}%arg2){{.*}}[ \"kcfi\"(i32 -1789026986) ]\n     f(arg1, arg2)\n }\n \n pub fn baz(f: fn(i32, i32, i32) -> i32, arg1: i32, arg2: i32, arg3: i32) -> i32 {\n     // CHECK-LABEL: define{{.*}}baz\n-    // CHECK-SAME: {{.*}}!{{<unknown kind #36>|kcfi_type}} ![[TYPE3:[0-9]+]]\n-    // CHECK: call i32 %f(i32 %arg1, i32 %arg2, i32 %arg3){{.*}}[ \"kcfi\"(i32 1248878270) ]\n+    // CHECK-SAME:  {{.*}}!{{<unknown kind #36>|kcfi_type}} ![[TYPE3:[0-9]+]]\n+    // CHECK:       {{%.+}} = call {{(noundef )*}}i32 %f(i32 {{(noundef )*}}%arg1, i32 {{(noundef )*}}%arg2, i32 {{(noundef )*}}%arg3){{.*}}[ \"kcfi\"(i32 1248878270) ]\n     f(arg1, arg2, arg3)\n }\n "}, {"sha": "e1d617b5ee18ec5dd7f5145b27008611d97d7d0b", "filename": "tests/codegen/sanitizer-kcfi-emit-kcfi-operand-bundle.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fcodegen%2Fsanitizer-kcfi-emit-kcfi-operand-bundle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fcodegen%2Fsanitizer-kcfi-emit-kcfi-operand-bundle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fsanitizer-kcfi-emit-kcfi-operand-bundle.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -0,0 +1,27 @@\n+// Verifies that KCFI operand bundles are emitted.\n+//\n+// revisions: aarch64 x86_64\n+// [aarch64] compile-flags: --target aarch64-unknown-none\n+// [aarch64] needs-llvm-components: aarch64\n+// [x86_64] compile-flags: --target x86_64-unknown-none\n+// [x86_64] needs-llvm-components:\n+// compile-flags: -Cno-prepopulate-passes -Zsanitizer=kcfi -Copt-level=0\n+\n+#![crate_type=\"lib\"]\n+#![feature(no_core, lang_items)]\n+#![no_core]\n+\n+#[lang=\"sized\"]\n+trait Sized { }\n+#[lang=\"copy\"]\n+trait Copy { }\n+\n+impl Copy for i32 {}\n+\n+pub fn foo(f: fn(i32) -> i32, arg: i32) -> i32 {\n+    // CHECK-LABEL: define{{.*}}foo{{.*}}!{{<unknown kind #36>|kcfi_type}} !{{[0-9]+}}\n+    // CHECK:       start:\n+    // CHECK-NEXT:  {{%.+}} = call {{(noundef )*}}i32 %f(i32 {{(noundef )*}}%arg){{.*}}[ \"kcfi\"(i32 {{[-0-9]+}}) ]\n+    // CHECK-NEXT:  ret i32 {{%.+}}\n+    f(arg)\n+}"}, {"sha": "dc6570be32b4873116be0500c03c0ba42b75a568", "filename": "tests/codegen/split-lto-unit.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fcodegen%2Fsplit-lto-unit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fcodegen%2Fsplit-lto-unit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fsplit-lto-unit.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -0,0 +1,11 @@\n+// Verifies that \"EnableSplitLTOUnit\" module flag is added.\n+//\n+// needs-sanitizer-cfi\n+// compile-flags: -Clto -Ctarget-feature=-crt-static -Zsplit-lto-unit\n+\n+#![crate_type=\"lib\"]\n+\n+pub fn foo() {\n+}\n+\n+// CHECK: !{{[0-9]+}} = !{i32 4, !\"EnableSplitLTOUnit\", i32 1}"}, {"sha": "5d1b83b35c5ee16b4cca2e2d43b3cf6e172677fe", "filename": "tests/rustdoc-gui/search-corrections.goml", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Frustdoc-gui%2Fsearch-corrections.goml", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Frustdoc-gui%2Fsearch-corrections.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Fsearch-corrections.goml?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -0,0 +1,56 @@\n+// ignore-tidy-linelength\n+\n+// Checks that the search tab result tell the user about corrections\n+// First, try a search-by-name\n+go-to: \"file://\" + |DOC_PATH| + \"/test_docs/index.html\"\n+// Intentionally wrong spelling of \"NotableStructWithLongName\"\n+write: (\".search-input\", \"NotableStructWithLongNamr\")\n+// To be SURE that the search will be run.\n+press-key: 'Enter'\n+// Waiting for the search results to appear...\n+wait-for: \"#search-tabs\"\n+\n+// Corrections aren't shown on the \"In Names\" tab.\n+assert: \"#search-tabs button.selected:first-child\"\n+assert-css: (\".search-corrections\", {\n+    \"display\": \"none\"\n+})\n+\n+// Corrections do get shown on the \"In Parameters\" tab.\n+click: \"#search-tabs button:nth-child(2)\"\n+assert: \"#search-tabs button.selected:nth-child(2)\"\n+assert-css: (\".search-corrections\", {\n+    \"display\": \"block\"\n+})\n+assert-text: (\n+    \".search-corrections\",\n+    \"Type \\\"notablestructwithlongnamr\\\" not found. Showing results for closest type name \\\"notablestructwithlongname\\\" instead.\"\n+)\n+\n+// Corrections do get shown on the \"In Return Type\" tab.\n+click: \"#search-tabs button:nth-child(3)\"\n+assert: \"#search-tabs button.selected:nth-child(3)\"\n+assert-css: (\".search-corrections\", {\n+    \"display\": \"block\"\n+})\n+assert-text: (\n+    \".search-corrections\",\n+    \"Type \\\"notablestructwithlongnamr\\\" not found. Showing results for closest type name \\\"notablestructwithlongname\\\" instead.\"\n+)\n+\n+// Now, explicit return values\n+go-to: \"file://\" + |DOC_PATH| + \"/test_docs/index.html\"\n+// Intentionally wrong spelling of \"NotableStructWithLongName\"\n+write: (\".search-input\", \"-> NotableStructWithLongNamr\")\n+// To be SURE that the search will be run.\n+press-key: 'Enter'\n+// Waiting for the search results to appear...\n+wait-for: \"#search-tabs\"\n+\n+assert-css: (\".search-corrections\", {\n+    \"display\": \"block\"\n+})\n+assert-text: (\n+    \".search-corrections\",\n+    \"Type \\\"notablestructwithlongnamr\\\" not found. Showing results for closest type name \\\"notablestructwithlongname\\\" instead.\"\n+)"}, {"sha": "0e84751603ed678700865f542cae255690b55162", "filename": "tests/rustdoc-js/generics-trait.js", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Frustdoc-js%2Fgenerics-trait.js", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Frustdoc-js%2Fgenerics-trait.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js%2Fgenerics-trait.js?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -1,9 +1,21 @@\n+// exact-check\n+\n const QUERY = [\n     'Result<SomeTrait>',\n+    'Result<SomeTraiz>',\n+    'OtherThingxxxxxxxx',\n+    'OtherThingxxxxxxxy',\n+];\n+\n+const CORRECTIONS = [\n+    null,\n+    null,\n+    null,\n     'OtherThingxxxxxxxx',\n ];\n \n const EXPECTED = [\n+    // Result<SomeTrait>\n     {\n         'in_args': [\n             { 'path': 'generics_trait', 'name': 'beta' },\n@@ -12,6 +24,21 @@ const EXPECTED = [\n             { 'path': 'generics_trait', 'name': 'bet' },\n         ],\n     },\n+    // Result<SomeTraiz>\n+    {\n+        'in_args': [],\n+        'returned': [],\n+    },\n+    // OtherThingxxxxxxxx\n+    {\n+        'in_args': [\n+            { 'path': 'generics_trait', 'name': 'alpha' },\n+        ],\n+        'returned': [\n+            { 'path': 'generics_trait', 'name': 'alef' },\n+        ],\n+    },\n+    // OtherThingxxxxxxxy\n     {\n         'in_args': [\n             { 'path': 'generics_trait', 'name': 'alpha' },"}, {"sha": "0dccb633df9837644be6cee697155eead81c7057", "filename": "tests/ui/abi/stack-probes-lto.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Fabi%2Fstack-probes-lto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Fabi%2Fstack-probes-lto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fabi%2Fstack-probes-lto.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -5,6 +5,7 @@\n // ignore-mips64\n // ignore-sparc\n // ignore-sparc64\n+// ignore-loongarch64\n // ignore-wasm\n // ignore-emscripten no processes\n // ignore-sgx no processes"}, {"sha": "8137c92304d83920b5eb147e1202b8b938ec8eea", "filename": "tests/ui/abi/stack-probes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Fabi%2Fstack-probes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Fabi%2Fstack-probes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fabi%2Fstack-probes.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -5,6 +5,7 @@\n // ignore-mips64\n // ignore-sparc\n // ignore-sparc64\n+// ignore-loongarch64\n // ignore-wasm\n // ignore-emscripten no processes\n // ignore-sgx no processes"}, {"sha": "e59e06f801b78fcd296d0a31cfe09947b20218c7", "filename": "tests/ui/cfg/conditional-compile-arch.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Fcfg%2Fconditional-compile-arch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Fcfg%2Fconditional-compile-arch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcfg%2Fconditional-compile-arch.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -39,3 +39,6 @@ pub fn main() { }\n \n #[cfg(target_arch = \"riscv64\")]\n pub fn main() { }\n+\n+#[cfg(target_arch = \"loongarch64\")]\n+pub fn main() { }"}, {"sha": "3a7f3cd0ba00cd757efae8da2c8415e0dfe3cb8a", "filename": "tests/ui/const-generics/generic_const_exprs/cross_crate_predicate.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fcross_crate_predicate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fcross_crate_predicate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fcross_crate_predicate.stderr?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -8,6 +8,9 @@ LL |     let _ = const_evaluatable_lib::test1::<T>();\n note: required by a bound in `test1`\n   --> $DIR/auxiliary/const_evaluatable_lib.rs:6:10\n    |\n+LL | pub fn test1<T>() -> [u8; std::mem::size_of::<T>() - 1]\n+   |        ----- required by a bound in this function\n+LL | where\n LL |     [u8; std::mem::size_of::<T>() - 1]: Sized,\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `test1`\n \n@@ -34,6 +37,9 @@ LL |     let _ = const_evaluatable_lib::test1::<T>();\n note: required by a bound in `test1`\n   --> $DIR/auxiliary/const_evaluatable_lib.rs:6:10\n    |\n+LL | pub fn test1<T>() -> [u8; std::mem::size_of::<T>() - 1]\n+   |        ----- required by a bound in this function\n+LL | where\n LL |     [u8; std::mem::size_of::<T>() - 1]: Sized,\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `test1`\n "}, {"sha": "440e43dff81885ddc571c66a29871066cc6e1db0", "filename": "tests/ui/error-codes/E0277.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Ferror-codes%2FE0277.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Ferror-codes%2FE0277.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferror-codes%2FE0277.stderr?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -5,7 +5,8 @@ LL | fn f(p: Path) { }\n    |      ^ doesn't have a size known at compile-time\n    |\n    = help: within `Path`, the trait `Sized` is not implemented for `[u8]`\n-   = note: required because it appears within the type `Path`\n+note: required because it appears within the type `Path`\n+  --> $SRC_DIR/std/src/path.rs:LL:COL\n    = help: unsized fn params are gated as an unstable feature\n help: function arguments must have a statically known size, borrowed types always have a known size\n    |"}, {"sha": "3cef8156014bfbde5018301417a44830758aff0e", "filename": "tests/ui/feature-gates/feature-gate-cfi_encoding.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Ffeature-gates%2Ffeature-gate-cfi_encoding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Ffeature-gates%2Ffeature-gate-cfi_encoding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-cfi_encoding.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -0,0 +1,4 @@\n+#![crate_type = \"lib\"]\n+\n+#[cfi_encoding = \"3Bar\"] //~ERROR 3:1: 3:25: the `#[cfi_encoding]` attribute is an experimental feature [E0658]\n+pub struct Foo(i32);"}, {"sha": "b10a15088818f285586e147bb430e3c3905a3b71", "filename": "tests/ui/feature-gates/feature-gate-cfi_encoding.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Ffeature-gates%2Ffeature-gate-cfi_encoding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Ffeature-gates%2Ffeature-gate-cfi_encoding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-cfi_encoding.stderr?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: the `#[cfi_encoding]` attribute is an experimental feature\n+  --> $DIR/feature-gate-cfi_encoding.rs:3:1\n+   |\n+LL | #[cfi_encoding = \"3Bar\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #89653 <https://github.com/rust-lang/rust/issues/89653> for more information\n+   = help: add `#![feature(cfi_encoding)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "e3ebe6cdcb81aaf71ebf87b0b9366e6dced9d4bb", "filename": "tests/ui/fmt/send-sync.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Ffmt%2Fsend-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Ffmt%2Fsend-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffmt%2Fsend-sync.stderr?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -8,10 +8,12 @@ LL |     send(format_args!(\"{:?}\", c));\n    |\n    = help: within `[core::fmt::rt::Argument<'_>]`, the trait `Sync` is not implemented for `core::fmt::rt::Opaque`\n    = note: required because it appears within the type `&core::fmt::rt::Opaque`\n-   = note: required because it appears within the type `Argument<'_>`\n+note: required because it appears within the type `Argument<'_>`\n+  --> $SRC_DIR/core/src/fmt/rt.rs:LL:COL\n    = note: required because it appears within the type `[Argument<'_>]`\n    = note: required for `&[core::fmt::rt::Argument<'_>]` to implement `Send`\n-   = note: required because it appears within the type `Arguments<'_>`\n+note: required because it appears within the type `Arguments<'_>`\n+  --> $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n note: required by a bound in `send`\n   --> $DIR/send-sync.rs:1:12\n    |\n@@ -28,10 +30,12 @@ LL |     sync(format_args!(\"{:?}\", c));\n    |\n    = help: within `Arguments<'_>`, the trait `Sync` is not implemented for `core::fmt::rt::Opaque`\n    = note: required because it appears within the type `&core::fmt::rt::Opaque`\n-   = note: required because it appears within the type `Argument<'_>`\n+note: required because it appears within the type `Argument<'_>`\n+  --> $SRC_DIR/core/src/fmt/rt.rs:LL:COL\n    = note: required because it appears within the type `[Argument<'_>]`\n    = note: required because it appears within the type `&[Argument<'_>]`\n-   = note: required because it appears within the type `Arguments<'_>`\n+note: required because it appears within the type `Arguments<'_>`\n+  --> $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n note: required by a bound in `sync`\n   --> $DIR/send-sync.rs:2:12\n    |"}, {"sha": "0c3be7ca60774acb4a8029acc818c492b1b76e8c", "filename": "tests/ui/interior-mutability/interior-mutability.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Finterior-mutability%2Finterior-mutability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Finterior-mutability%2Finterior-mutability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finterior-mutability%2Finterior-mutability.stderr?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -7,7 +7,8 @@ LL |     catch_unwind(|| { x.set(23); });\n    |     required by a bound introduced by this call\n    |\n    = help: within `Cell<i32>`, the trait `RefUnwindSafe` is not implemented for `UnsafeCell<i32>`\n-   = note: required because it appears within the type `Cell<i32>`\n+note: required because it appears within the type `Cell<i32>`\n+  --> $SRC_DIR/core/src/cell.rs:LL:COL\n    = note: required for `&Cell<i32>` to implement `UnwindSafe`\n note: required because it's used within this closure\n   --> $DIR/interior-mutability.rs:5:18"}, {"sha": "38103ff4f9c8549d10bb90cd68e186ccfabd9fa5", "filename": "tests/ui/issues/issue-21763.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Fissues%2Fissue-21763.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Fissues%2Fissue-21763.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-21763.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -1,5 +1,7 @@\n // Regression test for HashMap only impl'ing Send/Sync if its contents do\n \n+// normalize-stderr-test: \"\\S+hashbrown-\\S+\" -> \"$$HASHBROWN_SRC_LOCATION\"\n+\n use std::collections::HashMap;\n use std::rc::Rc;\n "}, {"sha": "df50118ac477467044c73041ef67abf633357e8f", "filename": "tests/ui/issues/issue-21763.stderr", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Fissues%2Fissue-21763.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Fissues%2Fissue-21763.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-21763.stderr?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -1,16 +1,21 @@\n error[E0277]: `Rc<()>` cannot be sent between threads safely\n-  --> $DIR/issue-21763.rs:9:11\n+  --> $DIR/issue-21763.rs:11:11\n    |\n LL |     foo::<HashMap<Rc<()>, Rc<()>>>();\n    |           ^^^^^^^^^^^^^^^^^^^^^^^ `Rc<()>` cannot be sent between threads safely\n    |\n    = help: within `(Rc<()>, Rc<()>)`, the trait `Send` is not implemented for `Rc<()>`\n    = note: required because it appears within the type `(Rc<()>, Rc<()>)`\n    = note: required for `hashbrown::raw::RawTable<(Rc<()>, Rc<()>)>` to implement `Send`\n-   = note: required because it appears within the type `HashMap<Rc<()>, Rc<()>, RandomState>`\n-   = note: required because it appears within the type `HashMap<Rc<()>, Rc<()>>`\n+note: required because it appears within the type `HashMap<Rc<()>, Rc<()>, RandomState>`\n+  --> $HASHBROWN_SRC_LOCATION\n+   |\n+LL | pub struct HashMap<K, V, S = DefaultHashBuilder, A: Allocator + Clone = Global> {\n+   |            ^^^^^^^\n+note: required because it appears within the type `HashMap<Rc<()>, Rc<()>>`\n+  --> $SRC_DIR/std/src/collections/hash/map.rs:LL:COL\n note: required by a bound in `foo`\n-  --> $DIR/issue-21763.rs:6:11\n+  --> $DIR/issue-21763.rs:8:11\n    |\n LL | fn foo<T: Send>() {}\n    |           ^^^^ required by this bound in `foo`"}, {"sha": "a4ba5da4d8724582dd2ae7cbfd0e6092881a9dd5", "filename": "tests/ui/issues/issue-32709.stderr", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Fissues%2Fissue-32709.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Fissues%2Fissue-32709.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-32709.stderr?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -7,9 +7,16 @@ LL |     Err(5)?;\n    |           ^ the trait `From<{integer}>` is not implemented for `()`\n    |\n    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\n-   = help: the following other types implement trait `FromResidual<R>`:\n-             <Result<T, F> as FromResidual<Result<Infallible, E>>>\n-             <Result<T, F> as FromResidual<Yeet<E>>>\n+   = help: the following other types implement trait `From<T>`:\n+             <(T, T) as From<[T; 2]>>\n+             <(T, T, T) as From<[T; 3]>>\n+             <(T, T, T, T) as From<[T; 4]>>\n+             <(T, T, T, T, T) as From<[T; 5]>>\n+             <(T, T, T, T, T, T) as From<[T; 6]>>\n+             <(T, T, T, T, T, T, T) as From<[T; 7]>>\n+             <(T, T, T, T, T, T, T, T) as From<[T; 8]>>\n+             <(T, T, T, T, T, T, T, T, T) as From<[T; 9]>>\n+           and 4 others\n    = note: required for `Result<i32, ()>` to implement `FromResidual<Result<Infallible, {integer}>>`\n \n error: aborting due to previous error"}, {"sha": "7449fe697ae9f3823cce5656ba7d4a0a6154ad24", "filename": "tests/ui/issues/issue-7364.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Fissues%2Fissue-7364.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Fissues%2Fissue-7364.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-7364.stderr?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -7,7 +7,8 @@ LL | static boxed: Box<RefCell<isize>> = Box::new(RefCell::new(0));\n    = help: the trait `Sync` is not implemented for `RefCell<isize>`\n    = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead\n    = note: required for `Unique<RefCell<isize>>` to implement `Sync`\n-   = note: required because it appears within the type `Box<RefCell<isize>>`\n+note: required because it appears within the type `Box<RefCell<isize>>`\n+  --> $SRC_DIR/alloc/src/boxed.rs:LL:COL\n    = note: shared static variables must have a type that implements `Sync`\n \n error: aborting due to previous error"}, {"sha": "284d5dcec310740b34a1757cbdf33afded12b09b", "filename": "tests/ui/kindck/kindck-send-object.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Fkindck%2Fkindck-send-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Fkindck%2Fkindck-send-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fkindck%2Fkindck-send-object.stderr?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -20,7 +20,8 @@ LL |     assert_send::<Box<dyn Dummy>>();\n    |\n    = help: the trait `Send` is not implemented for `dyn Dummy`\n    = note: required for `Unique<dyn Dummy>` to implement `Send`\n-   = note: required because it appears within the type `Box<dyn Dummy>`\n+note: required because it appears within the type `Box<dyn Dummy>`\n+  --> $SRC_DIR/alloc/src/boxed.rs:LL:COL\n note: required by a bound in `assert_send`\n   --> $DIR/kindck-send-object.rs:5:18\n    |"}, {"sha": "269193f73b4752f1ccf4091285bd425c71a1fb46", "filename": "tests/ui/kindck/kindck-send-object1.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Fkindck%2Fkindck-send-object1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Fkindck%2Fkindck-send-object1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fkindck%2Fkindck-send-object1.stderr?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -20,7 +20,8 @@ LL |     assert_send::<Box<dyn Dummy + 'a>>();\n    |\n    = help: the trait `Send` is not implemented for `(dyn Dummy + 'a)`\n    = note: required for `Unique<(dyn Dummy + 'a)>` to implement `Send`\n-   = note: required because it appears within the type `Box<dyn Dummy>`\n+note: required because it appears within the type `Box<dyn Dummy>`\n+  --> $SRC_DIR/alloc/src/boxed.rs:LL:COL\n note: required by a bound in `assert_send`\n   --> $DIR/kindck-send-object1.rs:5:18\n    |"}, {"sha": "6b8df60227f5526522795b051a1f4b588d33f57d", "filename": "tests/ui/kindck/kindck-send-object2.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Fkindck%2Fkindck-send-object2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Fkindck%2Fkindck-send-object2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fkindck%2Fkindck-send-object2.stderr?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -20,7 +20,8 @@ LL |     assert_send::<Box<dyn Dummy>>();\n    |\n    = help: the trait `Send` is not implemented for `dyn Dummy`\n    = note: required for `Unique<dyn Dummy>` to implement `Send`\n-   = note: required because it appears within the type `Box<dyn Dummy>`\n+note: required because it appears within the type `Box<dyn Dummy>`\n+  --> $SRC_DIR/alloc/src/boxed.rs:LL:COL\n note: required by a bound in `assert_send`\n   --> $DIR/kindck-send-object2.rs:3:18\n    |"}, {"sha": "dc1bb6206afcfab413dbdd2ade3c902f583181c6", "filename": "tests/ui/kindck/kindck-send-owned.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Fkindck%2Fkindck-send-owned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Fkindck%2Fkindck-send-owned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fkindck%2Fkindck-send-owned.stderr?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -6,7 +6,8 @@ LL |     assert_send::<Box<*mut u8>>();\n    |\n    = help: the trait `Send` is not implemented for `*mut u8`\n    = note: required for `Unique<*mut u8>` to implement `Send`\n-   = note: required because it appears within the type `Box<*mut u8>`\n+note: required because it appears within the type `Box<*mut u8>`\n+  --> $SRC_DIR/alloc/src/boxed.rs:LL:COL\n note: required by a bound in `assert_send`\n   --> $DIR/kindck-send-owned.rs:3:18\n    |"}, {"sha": "0c399f15a25bba46d78dbd2e8c8fcb6f2fcf231b", "filename": "tests/ui/not-panic/not-panic-safe-2.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Fnot-panic%2Fnot-panic-safe-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Fnot-panic%2Fnot-panic-safe-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnot-panic%2Fnot-panic-safe-2.stderr?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -5,7 +5,8 @@ LL |     assert::<Rc<RefCell<i32>>>();\n    |              ^^^^^^^^^^^^^^^^ `UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n    |\n    = help: within `RefCell<i32>`, the trait `RefUnwindSafe` is not implemented for `UnsafeCell<i32>`\n-   = note: required because it appears within the type `RefCell<i32>`\n+note: required because it appears within the type `RefCell<i32>`\n+  --> $SRC_DIR/core/src/cell.rs:LL:COL\n    = note: required for `Rc<RefCell<i32>>` to implement `UnwindSafe`\n note: required by a bound in `assert`\n   --> $DIR/not-panic-safe-2.rs:7:14\n@@ -20,8 +21,10 @@ LL |     assert::<Rc<RefCell<i32>>>();\n    |              ^^^^^^^^^^^^^^^^ `UnsafeCell<isize>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n    |\n    = help: within `RefCell<i32>`, the trait `RefUnwindSafe` is not implemented for `UnsafeCell<isize>`\n-   = note: required because it appears within the type `Cell<isize>`\n-   = note: required because it appears within the type `RefCell<i32>`\n+note: required because it appears within the type `Cell<isize>`\n+  --> $SRC_DIR/core/src/cell.rs:LL:COL\n+note: required because it appears within the type `RefCell<i32>`\n+  --> $SRC_DIR/core/src/cell.rs:LL:COL\n    = note: required for `Rc<RefCell<i32>>` to implement `UnwindSafe`\n note: required by a bound in `assert`\n   --> $DIR/not-panic-safe-2.rs:7:14"}, {"sha": "53028d6a3371a4d7d4aa87e52407609de910d536", "filename": "tests/ui/not-panic/not-panic-safe-3.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Fnot-panic%2Fnot-panic-safe-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Fnot-panic%2Fnot-panic-safe-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnot-panic%2Fnot-panic-safe-3.stderr?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -5,7 +5,8 @@ LL |     assert::<Arc<RefCell<i32>>>();\n    |              ^^^^^^^^^^^^^^^^^ `UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n    |\n    = help: within `RefCell<i32>`, the trait `RefUnwindSafe` is not implemented for `UnsafeCell<i32>`\n-   = note: required because it appears within the type `RefCell<i32>`\n+note: required because it appears within the type `RefCell<i32>`\n+  --> $SRC_DIR/core/src/cell.rs:LL:COL\n    = note: required for `Arc<RefCell<i32>>` to implement `UnwindSafe`\n note: required by a bound in `assert`\n   --> $DIR/not-panic-safe-3.rs:7:14\n@@ -20,8 +21,10 @@ LL |     assert::<Arc<RefCell<i32>>>();\n    |              ^^^^^^^^^^^^^^^^^ `UnsafeCell<isize>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n    |\n    = help: within `RefCell<i32>`, the trait `RefUnwindSafe` is not implemented for `UnsafeCell<isize>`\n-   = note: required because it appears within the type `Cell<isize>`\n-   = note: required because it appears within the type `RefCell<i32>`\n+note: required because it appears within the type `Cell<isize>`\n+  --> $SRC_DIR/core/src/cell.rs:LL:COL\n+note: required because it appears within the type `RefCell<i32>`\n+  --> $SRC_DIR/core/src/cell.rs:LL:COL\n    = note: required for `Arc<RefCell<i32>>` to implement `UnwindSafe`\n note: required by a bound in `assert`\n   --> $DIR/not-panic-safe-3.rs:7:14"}, {"sha": "b1361cfd87ef2ead6a11d1d5b541ad478f036900", "filename": "tests/ui/not-panic/not-panic-safe-4.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Fnot-panic%2Fnot-panic-safe-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Fnot-panic%2Fnot-panic-safe-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnot-panic%2Fnot-panic-safe-4.stderr?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -5,7 +5,8 @@ LL |     assert::<&RefCell<i32>>();\n    |              ^^^^^^^^^^^^^ `UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n    |\n    = help: within `RefCell<i32>`, the trait `RefUnwindSafe` is not implemented for `UnsafeCell<i32>`\n-   = note: required because it appears within the type `RefCell<i32>`\n+note: required because it appears within the type `RefCell<i32>`\n+  --> $SRC_DIR/core/src/cell.rs:LL:COL\n    = note: required for `&RefCell<i32>` to implement `UnwindSafe`\n note: required by a bound in `assert`\n   --> $DIR/not-panic-safe-4.rs:6:14\n@@ -25,8 +26,10 @@ LL |     assert::<&RefCell<i32>>();\n    |              ^^^^^^^^^^^^^ `UnsafeCell<isize>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n    |\n    = help: within `RefCell<i32>`, the trait `RefUnwindSafe` is not implemented for `UnsafeCell<isize>`\n-   = note: required because it appears within the type `Cell<isize>`\n-   = note: required because it appears within the type `RefCell<i32>`\n+note: required because it appears within the type `Cell<isize>`\n+  --> $SRC_DIR/core/src/cell.rs:LL:COL\n+note: required because it appears within the type `RefCell<i32>`\n+  --> $SRC_DIR/core/src/cell.rs:LL:COL\n    = note: required for `&RefCell<i32>` to implement `UnwindSafe`\n note: required by a bound in `assert`\n   --> $DIR/not-panic-safe-4.rs:6:14"}, {"sha": "47f28257409eb5e05a14b3a5d2fc91430c17c650", "filename": "tests/ui/not-panic/not-panic-safe-6.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Fnot-panic%2Fnot-panic-safe-6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Fnot-panic%2Fnot-panic-safe-6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnot-panic%2Fnot-panic-safe-6.stderr?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -5,7 +5,8 @@ LL |     assert::<*mut RefCell<i32>>();\n    |              ^^^^^^^^^^^^^^^^^ `UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n    |\n    = help: within `RefCell<i32>`, the trait `RefUnwindSafe` is not implemented for `UnsafeCell<i32>`\n-   = note: required because it appears within the type `RefCell<i32>`\n+note: required because it appears within the type `RefCell<i32>`\n+  --> $SRC_DIR/core/src/cell.rs:LL:COL\n    = note: required for `*mut RefCell<i32>` to implement `UnwindSafe`\n note: required by a bound in `assert`\n   --> $DIR/not-panic-safe-6.rs:6:14\n@@ -20,8 +21,10 @@ LL |     assert::<*mut RefCell<i32>>();\n    |              ^^^^^^^^^^^^^^^^^ `UnsafeCell<isize>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n    |\n    = help: within `RefCell<i32>`, the trait `RefUnwindSafe` is not implemented for `UnsafeCell<isize>`\n-   = note: required because it appears within the type `Cell<isize>`\n-   = note: required because it appears within the type `RefCell<i32>`\n+note: required because it appears within the type `Cell<isize>`\n+  --> $SRC_DIR/core/src/cell.rs:LL:COL\n+note: required because it appears within the type `RefCell<i32>`\n+  --> $SRC_DIR/core/src/cell.rs:LL:COL\n    = note: required for `*mut RefCell<i32>` to implement `UnwindSafe`\n note: required by a bound in `assert`\n   --> $DIR/not-panic-safe-6.rs:6:14"}, {"sha": "5af648f6a0cf131b5aebbbda6577ac249d5c41df", "filename": "tests/ui/phantom-auto-trait.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Fphantom-auto-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Fphantom-auto-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fphantom-auto-trait.stderr?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -11,7 +11,8 @@ note: required for `&T` to implement `Zen`\n    |\n LL | unsafe impl<'a, T: 'a> Zen for &'a T where T: Sync {}\n    |                        ^^^     ^^^^^          ---- unsatisfied trait bound introduced here\n-   = note: required because it appears within the type `PhantomData<&T>`\n+note: required because it appears within the type `PhantomData<&T>`\n+  --> $SRC_DIR/core/src/marker.rs:LL:COL\n note: required because it appears within the type `Guard<'_, T>`\n   --> $DIR/phantom-auto-trait.rs:12:8\n    |\n@@ -40,7 +41,8 @@ note: required for `&T` to implement `Zen`\n    |\n LL | unsafe impl<'a, T: 'a> Zen for &'a T where T: Sync {}\n    |                        ^^^     ^^^^^          ---- unsatisfied trait bound introduced here\n-   = note: required because it appears within the type `PhantomData<&T>`\n+note: required because it appears within the type `PhantomData<&T>`\n+  --> $SRC_DIR/core/src/marker.rs:LL:COL\n note: required because it appears within the type `Guard<'_, T>`\n   --> $DIR/phantom-auto-trait.rs:12:8\n    |"}, {"sha": "bb63f7cd0dce03d6d57088ee416cb16825969233", "filename": "tests/ui/recursion/recursive-requirements.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Frecursion%2Frecursive-requirements.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Frecursion%2Frecursive-requirements.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frecursion%2Frecursive-requirements.stderr?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -28,7 +28,8 @@ note: required because it appears within the type `Bar`\n    |\n LL | pub struct Bar {\n    |            ^^^\n-   = note: required because it appears within the type `PhantomData<Bar>`\n+note: required because it appears within the type `PhantomData<Bar>`\n+  --> $SRC_DIR/core/src/marker.rs:LL:COL\n note: required because it appears within the type `Foo`\n   --> $DIR/recursive-requirements.rs:5:12\n    |"}, {"sha": "c0f08a6d1e5475cc0cef6c159200f3cd635a814e", "filename": "tests/ui/sanitize/cfg.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Fsanitize%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Fsanitize%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsanitize%2Fcfg.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -3,12 +3,16 @@\n \n // needs-sanitizer-support\n // needs-sanitizer-address\n+// needs-sanitizer-cfi\n+// needs-sanitizer-kcfi\n // needs-sanitizer-leak\n // needs-sanitizer-memory\n // needs-sanitizer-thread\n // check-pass\n // revisions: address leak memory thread\n //[address]compile-flags: -Zsanitizer=address --cfg address\n+//[cfi]compile-flags:     -Zsanitizer=cfi     --cfg cfi\n+//[kcfi]compile-flags:    -Zsanitizer=kcfi    --cfg kcfi\n //[leak]compile-flags:    -Zsanitizer=leak    --cfg leak\n //[memory]compile-flags:  -Zsanitizer=memory  --cfg memory\n //[thread]compile-flags:  -Zsanitizer=thread  --cfg thread\n@@ -18,6 +22,12 @@\n #[cfg(all(sanitize = \"address\", address))]\n fn main() {}\n \n+#[cfg(all(sanitize = \"cfi\", cfi))]\n+fn main() {}\n+\n+#[cfg(all(sanitize = \"kcfi\", kcfi))]\n+fn main() {}\n+\n #[cfg(all(sanitize = \"leak\", leak))]\n fn main() {}\n "}, {"sha": "462a3f661efb5f36a2fb2f2c78f99d53e641e373", "filename": "tests/ui/sanitize/sanitizer-cfi-canonical-jump-tables-require-cfi.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Fsanitize%2Fsanitizer-cfi-canonical-jump-tables-require-cfi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Fsanitize%2Fsanitizer-cfi-canonical-jump-tables-require-cfi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsanitize%2Fsanitizer-cfi-canonical-jump-tables-require-cfi.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -0,0 +1,8 @@\n+// Verifies that `-Zsanitizer-cfi-canonical-jump-tables` requires `-Zsanitizer=cfi`.\n+//\n+// needs-sanitizer-cfi\n+// compile-flags: -Cno-prepopulate-passes -Ctarget-feature=-crt-static -Zsanitizer-cfi-canonical-jump-tables=false\n+\n+#![feature(no_core)]\n+#![no_core]\n+#![no_main]"}, {"sha": "3ee95634b16a171e0b611d82e9bf53baf4805de3", "filename": "tests/ui/sanitize/sanitizer-cfi-canonical-jump-tables-require-cfi.stderr", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Fsanitize%2Fsanitizer-cfi-canonical-jump-tables-require-cfi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Fsanitize%2Fsanitizer-cfi-canonical-jump-tables-require-cfi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsanitize%2Fsanitizer-cfi-canonical-jump-tables-require-cfi.stderr?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -0,0 +1,4 @@\n+error: `-Zsanitizer-cfi-canonical-jump-tables` requires `-Zsanitizer=cfi`\n+\n+error: aborting due to previous error\n+"}, {"sha": "3a0fc143da6fb33690a5b84b67b0c3eb336f0465", "filename": "tests/ui/sanitize/sanitizer-cfi-generalize-pointers-attr-cfg.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Fsanitize%2Fsanitizer-cfi-generalize-pointers-attr-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Fsanitize%2Fsanitizer-cfi-generalize-pointers-attr-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsanitize%2Fsanitizer-cfi-generalize-pointers-attr-cfg.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -0,0 +1,9 @@\n+// Verifies that when compiling with `-Zsanitizer-cfi-generalize-pointers` the\n+// `#[cfg(sanitizer_cfi_generalize_pointers)]` attribute is configured.\n+//\n+// needs-sanitizer-cfi\n+// check-pass\n+// compile-flags: -Clto -Cno-prepopulate-passes -Ctarget-feature=-crt-static -Zsanitizer=cfi -Zsanitizer-cfi-generalize-pointers\n+\n+#[cfg(sanitizer_cfi_generalize_pointers)]\n+fn main() {}"}, {"sha": "f31b8bde7aebf3377902df8db55cbc3ffa08c41f", "filename": "tests/ui/sanitize/sanitizer-cfi-generalize-pointers-require-cfi.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Fsanitize%2Fsanitizer-cfi-generalize-pointers-require-cfi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Fsanitize%2Fsanitizer-cfi-generalize-pointers-require-cfi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsanitize%2Fsanitizer-cfi-generalize-pointers-require-cfi.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -0,0 +1,9 @@\n+// Verifies that `-Zsanitizer-cfi-generalize-pointers` requires `-Zsanitizer=cfi` or\n+// `-Zsanitizer=kcfi`.\n+//\n+// needs-sanitizer-cfi\n+// compile-flags: -Clto -Cno-prepopulate-passes -Ctarget-feature=-crt-static -Zsanitizer-cfi-generalize-pointers\n+\n+#![feature(no_core)]\n+#![no_core]\n+#![no_main]"}, {"sha": "6eb09a53b48629e71241e3c4b3e29094fe8731fc", "filename": "tests/ui/sanitize/sanitizer-cfi-generalize-pointers-require-cfi.stderr", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Fsanitize%2Fsanitizer-cfi-generalize-pointers-require-cfi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Fsanitize%2Fsanitizer-cfi-generalize-pointers-require-cfi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsanitize%2Fsanitizer-cfi-generalize-pointers-require-cfi.stderr?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -0,0 +1,4 @@\n+error: `-Zsanitizer-cfi-generalize-pointers` requires `-Zsanitizer=cfi` or `-Zsanitizer=kcfi`\n+\n+error: aborting due to previous error\n+"}, {"sha": "fe044f50a2162d6048c004ecf34ee5d7e1840994", "filename": "tests/ui/sanitize/sanitizer-cfi-invalid-attr-cfi-encoding.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Fsanitize%2Fsanitizer-cfi-invalid-attr-cfi-encoding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Fsanitize%2Fsanitizer-cfi-invalid-attr-cfi-encoding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsanitize%2Fsanitizer-cfi-invalid-attr-cfi-encoding.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -0,0 +1,11 @@\n+// Verifies that invalid user-defined CFI encodings can't be used.\n+//\n+// needs-sanitizer-cfi\n+// compile-flags: -Clto -Cno-prepopulate-passes -Ctarget-feature=-crt-static -Zsanitizer=cfi\n+\n+#![feature(cfi_encoding, no_core)]\n+#![no_core]\n+#![no_main]\n+\n+#[cfi_encoding] //~ERROR 10:1: 10:16: malformed `cfi_encoding` attribute input\n+pub struct Type1(i32);"}, {"sha": "e23bafb18146850054fd30001cb7392fde257253", "filename": "tests/ui/sanitize/sanitizer-cfi-invalid-attr-cfi-encoding.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Fsanitize%2Fsanitizer-cfi-invalid-attr-cfi-encoding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Fsanitize%2Fsanitizer-cfi-invalid-attr-cfi-encoding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsanitize%2Fsanitizer-cfi-invalid-attr-cfi-encoding.stderr?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -0,0 +1,8 @@\n+error: malformed `cfi_encoding` attribute input\n+  --> $DIR/sanitizer-cfi-invalid-attr-cfi-encoding.rs:10:1\n+   |\n+LL | #[cfi_encoding]\n+   | ^^^^^^^^^^^^^^^ help: must be of the form: `#[cfi_encoding = \"encoding\"]`\n+\n+error: aborting due to previous error\n+"}, {"sha": "8328178e8d0ae68961ac87b0fd8fa749a1c764b0", "filename": "tests/ui/sanitize/sanitizer-cfi-is-incompatible-with-saniziter-kcfi.aarch64.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Fsanitize%2Fsanitizer-cfi-is-incompatible-with-saniziter-kcfi.aarch64.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Fsanitize%2Fsanitizer-cfi-is-incompatible-with-saniziter-kcfi.aarch64.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsanitize%2Fsanitizer-cfi-is-incompatible-with-saniziter-kcfi.aarch64.stderr?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -0,0 +1,8 @@\n+error: cfi sanitizer is not supported for this target\n+\n+error: `-Zsanitizer=cfi` is incompatible with `-Zsanitizer=kcfi`\n+\n+error: `-Zsanitizer=cfi` is incompatible with `-Zsanitizer=kcfi`\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "9a5b0f3899041c425fe688aee12925b6059a8df0", "filename": "tests/ui/sanitize/sanitizer-cfi-is-incompatible-with-saniziter-kcfi.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Fsanitize%2Fsanitizer-cfi-is-incompatible-with-saniziter-kcfi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Fsanitize%2Fsanitizer-cfi-is-incompatible-with-saniziter-kcfi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsanitize%2Fsanitizer-cfi-is-incompatible-with-saniziter-kcfi.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -0,0 +1,12 @@\n+// Verifies that `-Zsanitizer=cfi` is incompatible with `-Zsanitizer=kcfi`.\n+//\n+// revisions: aarch64 x86_64\n+// [aarch64] compile-flags: --target aarch64-unknown-none\n+// [aarch64] needs-llvm-components: aarch64\n+// [x86_64] compile-flags: --target x86_64-unknown-none\n+// [x86_64] needs-llvm-components: x86\n+// compile-flags: -Clto -Cno-prepopulate-passes -Ctarget-feature=-crt-static -Zsanitizer=cfi -Zsanitizer=kcfi\n+\n+#![feature(no_core)]\n+#![no_core]\n+#![no_main]"}, {"sha": "8328178e8d0ae68961ac87b0fd8fa749a1c764b0", "filename": "tests/ui/sanitize/sanitizer-cfi-is-incompatible-with-saniziter-kcfi.x86_64.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Fsanitize%2Fsanitizer-cfi-is-incompatible-with-saniziter-kcfi.x86_64.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Fsanitize%2Fsanitizer-cfi-is-incompatible-with-saniziter-kcfi.x86_64.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsanitize%2Fsanitizer-cfi-is-incompatible-with-saniziter-kcfi.x86_64.stderr?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -0,0 +1,8 @@\n+error: cfi sanitizer is not supported for this target\n+\n+error: `-Zsanitizer=cfi` is incompatible with `-Zsanitizer=kcfi`\n+\n+error: `-Zsanitizer=cfi` is incompatible with `-Zsanitizer=kcfi`\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "dafc20162abc12970a907c11809424b658a765f3", "filename": "tests/ui/sanitize/sanitizer-cfi-normalize-integers-attr-cfg.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Fsanitize%2Fsanitizer-cfi-normalize-integers-attr-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Fsanitize%2Fsanitizer-cfi-normalize-integers-attr-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsanitize%2Fsanitizer-cfi-normalize-integers-attr-cfg.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -0,0 +1,9 @@\n+// Verifies that when compiling with `-Zsanitizer-cfi-normalize-integers` the\n+// `#[cfg(sanitizer_cfi_normalize_integers)]` attribute is configured.\n+//\n+// needs-sanitizer-cfi\n+// check-pass\n+// compile-flags: -Clto -Cno-prepopulate-passes -Ctarget-feature=-crt-static -Zsanitizer=cfi -Zsanitizer-cfi-normalize-integers\n+\n+#[cfg(sanitizer_cfi_normalize_integers)]\n+fn main() {}"}, {"sha": "b25a60d3494b84c99f671be9e51fcd4a6e7c8dd6", "filename": "tests/ui/sanitize/sanitizer-cfi-normalize-integers-require-cfi.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Fsanitize%2Fsanitizer-cfi-normalize-integers-require-cfi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Fsanitize%2Fsanitizer-cfi-normalize-integers-require-cfi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsanitize%2Fsanitizer-cfi-normalize-integers-require-cfi.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -0,0 +1,9 @@\n+// Verifies that `-Zsanitizer-cfi-normalize-integers` requires `-Zsanitizer=cfi` or\n+// `-Zsanitizer=kcfi`\n+//\n+// needs-sanitizer-cfi\n+// compile-flags: -Clto -Cno-prepopulate-passes -Ctarget-feature=-crt-static -Zsanitizer-cfi-normalize-integers\n+\n+#![feature(no_core)]\n+#![no_core]\n+#![no_main]"}, {"sha": "e31642054343cef23657827d7ce920337739fdab", "filename": "tests/ui/sanitize/sanitizer-cfi-normalize-integers-require-cfi.stderr", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Fsanitize%2Fsanitizer-cfi-normalize-integers-require-cfi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Fsanitize%2Fsanitizer-cfi-normalize-integers-require-cfi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsanitize%2Fsanitizer-cfi-normalize-integers-require-cfi.stderr?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -0,0 +1,4 @@\n+error: `-Zsanitizer-cfi-normalize-integers` requires `-Zsanitizer=cfi` or `-Zsanitizer=kcfi`\n+\n+error: aborting due to previous error\n+"}, {"sha": "29e32889fcc77d098a9d3eaf3354b7c2d6c36cfe", "filename": "tests/ui/sanitize/sanitizer-cfi-requires-lto.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Fsanitize%2Fsanitizer-cfi-requires-lto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Fsanitize%2Fsanitizer-cfi-requires-lto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsanitize%2Fsanitizer-cfi-requires-lto.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -0,0 +1,8 @@\n+// Verifies that `-Zsanitizer=cfi` requires `-Clto`, `-Clto=thin`, or `-Clinker-plugin-lto`.\n+//\n+// needs-sanitizer-cfi\n+// compile-flags: -Cno-prepopulate-passes -Ctarget-feature=-crt-static -Zsanitizer=cfi\n+\n+#![feature(no_core)]\n+#![no_core]\n+#![no_main]"}, {"sha": "5e706b513b91422d6c6412fe1ba9735d9f0d2f32", "filename": "tests/ui/sanitize/sanitizer-cfi-requires-lto.stderr", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Fsanitize%2Fsanitizer-cfi-requires-lto.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Fsanitize%2Fsanitizer-cfi-requires-lto.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsanitize%2Fsanitizer-cfi-requires-lto.stderr?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -0,0 +1,4 @@\n+error: `-Zsanitizer=cfi` requires `-Clto`, `-Clto=thin`, or `-Clinker-plugin-lto`\n+\n+error: aborting due to previous error\n+"}, {"sha": "3c497260e85c685f0317b07ff421282bf05dfc8a", "filename": "tests/ui/sanitize/split-lto-unit-requires-lto.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Fsanitize%2Fsplit-lto-unit-requires-lto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Fsanitize%2Fsplit-lto-unit-requires-lto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsanitize%2Fsplit-lto-unit-requires-lto.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -0,0 +1,8 @@\n+// Verifies that `-Zsplit-lto-unit` requires `-Clto`, `-Clto=thin`, or `-Clinker-plugin-lto`.\n+//\n+// needs-sanitizer-cfi\n+// compile-flags: -Cno-prepopulate-passes -Ctarget-feature=-crt-static -Zsplit-lto-unit\n+\n+#![feature(no_core)]\n+#![no_core]\n+#![no_main]"}, {"sha": "ab8f4f4f351531e95332fc70a0b66d1370cbc521", "filename": "tests/ui/sanitize/split-lto-unit-requires-lto.stderr", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Fsanitize%2Fsplit-lto-unit-requires-lto.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Fsanitize%2Fsplit-lto-unit-requires-lto.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsanitize%2Fsplit-lto-unit-requires-lto.stderr?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -0,0 +1,4 @@\n+error: `-Zsplit-lto-unit` requires `-Clto`, `-Clto=thin`, or `-Clinker-plugin-lto`\n+\n+error: aborting due to previous error\n+"}, {"sha": "ea57992b48326232c6f431f48c073f0bbafefbaa", "filename": "tests/ui/suggestions/issue-71394-no-from-impl.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Fsuggestions%2Fissue-71394-no-from-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Fsuggestions%2Fissue-71394-no-from-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fissue-71394-no-from-impl.stderr?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -6,8 +6,14 @@ LL |     let _: &[i8] = data.into();\n    |\n    = help: the following other types implement trait `From<T>`:\n              <&'input [u8] as From<gimli::read::endian_slice::EndianSlice<'input, Endian>>>\n-             <[T; LANES] as From<Simd<T, LANES>>>\n-             <[bool; LANES] as From<Mask<T, LANES>>>\n+             <[T; 10] as From<(T, T, T, T, T, T, T, T, T, T)>>\n+             <[T; 11] as From<(T, T, T, T, T, T, T, T, T, T, T)>>\n+             <[T; 12] as From<(T, T, T, T, T, T, T, T, T, T, T, T)>>\n+             <[T; 1] as From<(T,)>>\n+             <[T; 2] as From<(T, T)>>\n+             <[T; 3] as From<(T, T, T)>>\n+             <[T; 4] as From<(T, T, T, T)>>\n+           and 7 others\n    = note: required for `&[u8]` to implement `Into<&[i8]>`\n \n error: aborting due to previous error"}, {"sha": "fd3646b8c3c6a46a2797ebfb86af8bf87b1d49e4", "filename": "tests/ui/suggestions/path-by-value.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Fsuggestions%2Fpath-by-value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Fsuggestions%2Fpath-by-value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fpath-by-value.stderr?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -5,7 +5,8 @@ LL | fn f(p: Path) { }\n    |      ^ doesn't have a size known at compile-time\n    |\n    = help: within `Path`, the trait `Sized` is not implemented for `[u8]`\n-   = note: required because it appears within the type `Path`\n+note: required because it appears within the type `Path`\n+  --> $SRC_DIR/std/src/path.rs:LL:COL\n    = help: unsized fn params are gated as an unstable feature\n help: function arguments must have a statically known size, borrowed types always have a known size\n    |"}, {"sha": "365c1016eb3dcb3ed5d28e541f70e06add3330e1", "filename": "tests/ui/suggestions/suggest-borrow-to-dyn-object.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Fsuggestions%2Fsuggest-borrow-to-dyn-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Fsuggestions%2Fsuggest-borrow-to-dyn-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fsuggest-borrow-to-dyn-object.stderr?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -5,7 +5,8 @@ LL |     check(s);\n    |           ^ doesn't have a size known at compile-time\n    |\n    = help: within `OsStr`, the trait `Sized` is not implemented for `[u8]`\n-   = note: required because it appears within the type `OsStr`\n+note: required because it appears within the type `OsStr`\n+  --> $SRC_DIR/std/src/ffi/os_str.rs:LL:COL\n    = note: required for the cast from `OsStr` to the object type `dyn AsRef<Path>`\n help: consider borrowing the value, since `&OsStr` can be coerced into `dyn AsRef<Path>`\n    |"}, {"sha": "8d1765eb8e9d967b75b752fd6e0ad16b1cf20da3", "filename": "tests/ui/target-feature/gate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Ftarget-feature%2Fgate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Ftarget-feature%2Fgate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftarget-feature%2Fgate.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -10,6 +10,7 @@\n // ignore-sparc\n // ignore-sparc64\n // ignore-s390x\n+// ignore-loongarch64\n // gate-test-sse4a_target_feature\n // gate-test-powerpc_target_feature\n // gate-test-avx512_target_feature"}, {"sha": "ee542b60a26344b7984ab4aa9d1938a4b48b10d6", "filename": "tests/ui/target-feature/gate.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Ftarget-feature%2Fgate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Ftarget-feature%2Fgate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftarget-feature%2Fgate.stderr?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: the target feature `avx512bw` is currently unstable\n-  --> $DIR/gate.rs:31:18\n+  --> $DIR/gate.rs:32:18\n    |\n LL | #[target_feature(enable = \"avx512bw\")]\n    |                  ^^^^^^^^^^^^^^^^^^^"}, {"sha": "77fd8b85f3f4d72ce71106028c0889706939f140", "filename": "tests/ui/target-feature/invalid-attribute.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Ftarget-feature%2Finvalid-attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Ftarget-feature%2Finvalid-attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftarget-feature%2Finvalid-attribute.rs?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -10,6 +10,7 @@\n // ignore-s390x\n // ignore-sparc\n // ignore-sparc64\n+// ignore-loongarch64\n \n #![warn(unused_attributes)]\n "}, {"sha": "6d37d0917bc6135f0e1de413e3e9b300e0399684", "filename": "tests/ui/target-feature/invalid-attribute.stderr", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Ftarget-feature%2Finvalid-attribute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Ftarget-feature%2Finvalid-attribute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftarget-feature%2Finvalid-attribute.stderr?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -1,11 +1,11 @@\n error: malformed `target_feature` attribute input\n-  --> $DIR/invalid-attribute.rs:31:1\n+  --> $DIR/invalid-attribute.rs:32:1\n    |\n LL | #[target_feature = \"+sse2\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: must be of the form: `#[target_feature(enable = \"name\")]`\n \n error: attribute should be applied to a function definition\n-  --> $DIR/invalid-attribute.rs:16:1\n+  --> $DIR/invalid-attribute.rs:17:1\n    |\n LL | #[target_feature(enable = \"sse2\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -14,7 +14,7 @@ LL | extern crate alloc;\n    | ------------------- not a function definition\n \n error: attribute should be applied to a function definition\n-  --> $DIR/invalid-attribute.rs:21:1\n+  --> $DIR/invalid-attribute.rs:22:1\n    |\n LL | #[target_feature(enable = \"sse2\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -23,7 +23,7 @@ LL | use alloc::alloc::alloc;\n    | ------------------------ not a function definition\n \n error: attribute should be applied to a function definition\n-  --> $DIR/invalid-attribute.rs:26:1\n+  --> $DIR/invalid-attribute.rs:27:1\n    |\n LL | #[target_feature(enable = \"sse2\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -32,7 +32,7 @@ LL | extern \"Rust\" {}\n    | ---------------- not a function definition\n \n error: attribute should be applied to a function definition\n-  --> $DIR/invalid-attribute.rs:48:1\n+  --> $DIR/invalid-attribute.rs:49:1\n    |\n LL | #[target_feature(enable = \"sse2\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -41,7 +41,7 @@ LL | mod another {}\n    | -------------- not a function definition\n \n error: attribute should be applied to a function definition\n-  --> $DIR/invalid-attribute.rs:53:1\n+  --> $DIR/invalid-attribute.rs:54:1\n    |\n LL | #[target_feature(enable = \"sse2\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -50,7 +50,7 @@ LL | const FOO: usize = 7;\n    | --------------------- not a function definition\n \n error: attribute should be applied to a function definition\n-  --> $DIR/invalid-attribute.rs:58:1\n+  --> $DIR/invalid-attribute.rs:59:1\n    |\n LL | #[target_feature(enable = \"sse2\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -59,7 +59,7 @@ LL | struct Foo;\n    | ----------- not a function definition\n \n error: attribute should be applied to a function definition\n-  --> $DIR/invalid-attribute.rs:63:1\n+  --> $DIR/invalid-attribute.rs:64:1\n    |\n LL | #[target_feature(enable = \"sse2\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -68,7 +68,7 @@ LL | enum Bar {}\n    | ----------- not a function definition\n \n error: attribute should be applied to a function definition\n-  --> $DIR/invalid-attribute.rs:68:1\n+  --> $DIR/invalid-attribute.rs:69:1\n    |\n LL |   #[target_feature(enable = \"sse2\")]\n    |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -81,7 +81,7 @@ LL | | }\n    | |_- not a function definition\n \n error: attribute should be applied to a function definition\n-  --> $DIR/invalid-attribute.rs:76:1\n+  --> $DIR/invalid-attribute.rs:77:1\n    |\n LL | #[target_feature(enable = \"sse2\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -90,7 +90,7 @@ LL | type Uwu = ();\n    | -------------- not a function definition\n \n error: attribute should be applied to a function definition\n-  --> $DIR/invalid-attribute.rs:81:1\n+  --> $DIR/invalid-attribute.rs:82:1\n    |\n LL | #[target_feature(enable = \"sse2\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -99,7 +99,7 @@ LL | trait Baz {}\n    | ------------ not a function definition\n \n error: attribute should be applied to a function definition\n-  --> $DIR/invalid-attribute.rs:91:1\n+  --> $DIR/invalid-attribute.rs:92:1\n    |\n LL | #[target_feature(enable = \"sse2\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -108,7 +108,7 @@ LL | static A: () = ();\n    | ------------------ not a function definition\n \n error: attribute should be applied to a function definition\n-  --> $DIR/invalid-attribute.rs:96:1\n+  --> $DIR/invalid-attribute.rs:97:1\n    |\n LL | #[target_feature(enable = \"sse2\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -117,7 +117,7 @@ LL | impl Quux for u8 {}\n    | ------------------- not a function definition\n \n error: attribute should be applied to a function definition\n-  --> $DIR/invalid-attribute.rs:101:1\n+  --> $DIR/invalid-attribute.rs:102:1\n    |\n LL | #[target_feature(enable = \"sse2\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -126,7 +126,7 @@ LL | impl Foo {}\n    | ----------- not a function definition\n \n error: attribute should be applied to a function definition\n-  --> $DIR/invalid-attribute.rs:119:5\n+  --> $DIR/invalid-attribute.rs:120:5\n    |\n LL |       #[target_feature(enable = \"sse2\")]\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -138,7 +138,7 @@ LL | |     }\n    | |_____- not a function definition\n \n error: attribute should be applied to a function definition\n-  --> $DIR/invalid-attribute.rs:127:5\n+  --> $DIR/invalid-attribute.rs:128:5\n    |\n LL |     #[target_feature(enable = \"sse2\")]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -147,25 +147,25 @@ LL |     || {};\n    |     ----- not a function definition\n \n error: the feature named `foo` is not valid for this target\n-  --> $DIR/invalid-attribute.rs:33:18\n+  --> $DIR/invalid-attribute.rs:34:18\n    |\n LL | #[target_feature(enable = \"foo\")]\n    |                  ^^^^^^^^^^^^^^ `foo` is not valid for this target\n \n error: malformed `target_feature` attribute input\n-  --> $DIR/invalid-attribute.rs:36:18\n+  --> $DIR/invalid-attribute.rs:37:18\n    |\n LL | #[target_feature(bar)]\n    |                  ^^^ help: must be of the form: `enable = \"..\"`\n \n error: malformed `target_feature` attribute input\n-  --> $DIR/invalid-attribute.rs:38:18\n+  --> $DIR/invalid-attribute.rs:39:18\n    |\n LL | #[target_feature(disable = \"baz\")]\n    |                  ^^^^^^^^^^^^^^^ help: must be of the form: `enable = \"..\"`\n \n error[E0658]: `#[target_feature(..)]` can only be applied to `unsafe` functions\n-  --> $DIR/invalid-attribute.rs:42:1\n+  --> $DIR/invalid-attribute.rs:43:1\n    |\n LL | #[target_feature(enable = \"sse2\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -177,13 +177,13 @@ LL | fn bar() {}\n    = help: add `#![feature(target_feature_11)]` to the crate attributes to enable\n \n error: cannot use `#[inline(always)]` with `#[target_feature]`\n-  --> $DIR/invalid-attribute.rs:86:1\n+  --> $DIR/invalid-attribute.rs:87:1\n    |\n LL | #[inline(always)]\n    | ^^^^^^^^^^^^^^^^^\n \n error[E0658]: `#[target_feature(..)]` can only be applied to `unsafe` functions\n-  --> $DIR/invalid-attribute.rs:111:5\n+  --> $DIR/invalid-attribute.rs:112:5\n    |\n LL |     #[target_feature(enable = \"sse2\")]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "9ac5c4725ab120b282cb9a7bbd94187a97e05fea", "filename": "tests/ui/traits/issue-7013.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Ftraits%2Fissue-7013.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Ftraits%2Fissue-7013.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fissue-7013.stderr?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -5,7 +5,8 @@ LL |     let a = A {v: Box::new(B{v: None}) as Box<dyn Foo + Send>};\n    |                   ^^^^^^^^^^^^^^^^^^^^ `Rc<RefCell<A>>` cannot be sent between threads safely\n    |\n    = help: within `B`, the trait `Send` is not implemented for `Rc<RefCell<A>>`\n-   = note: required because it appears within the type `Option<Rc<RefCell<A>>>`\n+note: required because it appears within the type `Option<Rc<RefCell<A>>>`\n+  --> $SRC_DIR/core/src/option.rs:LL:COL\n note: required because it appears within the type `B`\n   --> $DIR/issue-7013.rs:8:8\n    |"}, {"sha": "a53879657f5a4705d8ddbc46075f09a644d23bb5", "filename": "tests/ui/traits/negative-impls/negated-auto-traits-error.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-error.stderr?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -67,7 +67,8 @@ LL |     is_send(Box::new(TestType));\n    |\n    = note: the trait bound `Unique<dummy2::TestType>: Send` is not satisfied\n    = note: required for `Unique<dummy2::TestType>` to implement `Send`\n-   = note: required because it appears within the type `Box<TestType>`\n+note: required because it appears within the type `Box<TestType>`\n+  --> $SRC_DIR/alloc/src/boxed.rs:LL:COL\n note: required by a bound in `is_send`\n   --> $DIR/negated-auto-traits-error.rs:16:15\n    |\n@@ -93,7 +94,8 @@ note: required because it appears within the type `Outer2<TestType>`\n LL | struct Outer2<T>(T);\n    |        ^^^^^^\n    = note: required for `Unique<Outer2<dummy3::TestType>>` to implement `Send`\n-   = note: required because it appears within the type `Box<Outer2<TestType>>`\n+note: required because it appears within the type `Box<Outer2<TestType>>`\n+  --> $SRC_DIR/alloc/src/boxed.rs:LL:COL\n note: required by a bound in `is_send`\n   --> $DIR/negated-auto-traits-error.rs:16:15\n    |"}, {"sha": "bf1ff9c8bc154f300740d052edec4e9dc9efa862", "filename": "tests/ui/union/union-sized-field.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Funion%2Funion-sized-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/129195f57c02c8a8e4cfc4b766d4ff7a3a837882/tests%2Fui%2Funion%2Funion-sized-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funion%2Funion-sized-field.stderr?ref=129195f57c02c8a8e4cfc4b766d4ff7a3a837882", "patch": "@@ -6,7 +6,8 @@ LL | union Foo<T: ?Sized> {\n LL |     value: ManuallyDrop<T>,\n    |            ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n-   = note: required because it appears within the type `ManuallyDrop<T>`\n+note: required because it appears within the type `ManuallyDrop<T>`\n+  --> $SRC_DIR/core/src/mem/manually_drop.rs:LL:COL\n    = note: no field of a union may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n help: consider removing the `?Sized` bound to make the type parameter `Sized`\n@@ -31,7 +32,8 @@ LL | struct Foo2<T: ?Sized> {\n LL |     value: ManuallyDrop<T>,\n    |            ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n-   = note: required because it appears within the type `ManuallyDrop<T>`\n+note: required because it appears within the type `ManuallyDrop<T>`\n+  --> $SRC_DIR/core/src/mem/manually_drop.rs:LL:COL\n    = note: only the last field of a struct may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n help: consider removing the `?Sized` bound to make the type parameter `Sized`\n@@ -56,7 +58,8 @@ LL | enum Foo3<T: ?Sized> {\n LL |     Value(ManuallyDrop<T>),\n    |           ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n-   = note: required because it appears within the type `ManuallyDrop<T>`\n+note: required because it appears within the type `ManuallyDrop<T>`\n+  --> $SRC_DIR/core/src/mem/manually_drop.rs:LL:COL\n    = note: no field of an enum variant may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n help: consider removing the `?Sized` bound to make the type parameter `Sized`"}]}