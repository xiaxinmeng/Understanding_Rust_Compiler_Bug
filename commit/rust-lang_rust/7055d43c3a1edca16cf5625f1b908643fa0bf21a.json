{"sha": "7055d43c3a1edca16cf5625f1b908643fa0bf21a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwNTVkNDNjM2ExZWRjYTE2Y2Y1NjI1ZjFiOTA4NjQzZmEwYmYyMWE=", "commit": {"author": {"name": "DJMcNab", "email": "36049421+DJMcNab@users.noreply.github.com", "date": "2019-01-26T22:02:23Z"}, "committer": {"name": "DJMcNab", "email": "36049421+DJMcNab@users.noreply.github.com", "date": "2019-01-26T22:02:23Z"}, "message": "Make attrs be a child of the let statement", "tree": {"sha": "611d0fd1edff7e609b95bdceeeab5622be5eff2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/611d0fd1edff7e609b95bdceeeab5622be5eff2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7055d43c3a1edca16cf5625f1b908643fa0bf21a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7055d43c3a1edca16cf5625f1b908643fa0bf21a", "html_url": "https://github.com/rust-lang/rust/commit/7055d43c3a1edca16cf5625f1b908643fa0bf21a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7055d43c3a1edca16cf5625f1b908643fa0bf21a/comments", "author": {"login": "DJMcNab", "id": 36049421, "node_id": "MDQ6VXNlcjM2MDQ5NDIx", "avatar_url": "https://avatars.githubusercontent.com/u/36049421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DJMcNab", "html_url": "https://github.com/DJMcNab", "followers_url": "https://api.github.com/users/DJMcNab/followers", "following_url": "https://api.github.com/users/DJMcNab/following{/other_user}", "gists_url": "https://api.github.com/users/DJMcNab/gists{/gist_id}", "starred_url": "https://api.github.com/users/DJMcNab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DJMcNab/subscriptions", "organizations_url": "https://api.github.com/users/DJMcNab/orgs", "repos_url": "https://api.github.com/users/DJMcNab/repos", "events_url": "https://api.github.com/users/DJMcNab/events{/privacy}", "received_events_url": "https://api.github.com/users/DJMcNab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DJMcNab", "id": 36049421, "node_id": "MDQ6VXNlcjM2MDQ5NDIx", "avatar_url": "https://avatars.githubusercontent.com/u/36049421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DJMcNab", "html_url": "https://github.com/DJMcNab", "followers_url": "https://api.github.com/users/DJMcNab/followers", "following_url": "https://api.github.com/users/DJMcNab/following{/other_user}", "gists_url": "https://api.github.com/users/DJMcNab/gists{/gist_id}", "starred_url": "https://api.github.com/users/DJMcNab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DJMcNab/subscriptions", "organizations_url": "https://api.github.com/users/DJMcNab/orgs", "repos_url": "https://api.github.com/users/DJMcNab/repos", "events_url": "https://api.github.com/users/DJMcNab/events{/privacy}", "received_events_url": "https://api.github.com/users/DJMcNab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55a3e21ac4cd24dd7979a44c37cd1e7a3d1b85fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/55a3e21ac4cd24dd7979a44c37cd1e7a3d1b85fd", "html_url": "https://github.com/rust-lang/rust/commit/55a3e21ac4cd24dd7979a44c37cd1e7a3d1b85fd"}], "stats": {"total": 49, "additions": 26, "deletions": 23}, "files": [{"sha": "8dd9587d0135298ab96569a97c43e28c5bb579ca", "filename": "crates/ra_syntax/src/grammar/expressions.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7055d43c3a1edca16cf5625f1b908643fa0bf21a/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7055d43c3a1edca16cf5625f1b908643fa0bf21a/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fexpressions.rs?ref=7055d43c3a1edca16cf5625f1b908643fa0bf21a", "patch": "@@ -45,7 +45,10 @@ pub(crate) fn block(p: &mut Parser) {\n \n     while !p.at(EOF) && !p.at(R_CURLY) {\n         match p.current() {\n-            LET_KW => let_stmt(p),\n+            LET_KW => {\n+                let m = p.start();\n+                let_stmt(p, m)\n+            }\n             // test nocontentexpr\n             // fn foo(){\n             //     ;;;some_expr();;;;{;;;};;;;Ok(())\n@@ -54,8 +57,9 @@ pub(crate) fn block(p: &mut Parser) {\n             _ => {\n                 // test block_items\n                 // fn a() { fn b() {} }\n-                let has_attrs = p.at(POUND);\n                 let m = p.start();\n+                let has_attrs = p.at(POUND);\n+                attributes::outer_attributes(p);\n                 match items::maybe_item(p, items::ItemFlavor::Mod) {\n                     items::MaybeItem::Item(kind) => {\n                         m.complete(p, kind);\n@@ -68,10 +72,10 @@ pub(crate) fn block(p: &mut Parser) {\n                     // fn foo() { pub 92; } //FIXME\n                     items::MaybeItem::None => {\n                         if has_attrs {\n-                            m.abandon(p);\n                             if p.at(LET_KW) {\n-                                let_stmt(p);\n+                                let_stmt(p, m);\n                             } else {\n+                                m.abandon(p);\n                                 p.error(\"expected a let statement\");\n                             }\n                         } else {\n@@ -116,9 +120,8 @@ pub(crate) fn block(p: &mut Parser) {\n     //     let c = 92;\n     //     let d: i32 = 92;\n     // }\n-    fn let_stmt(p: &mut Parser) {\n+    fn let_stmt(p: &mut Parser, m: Marker) {\n         assert!(p.at(LET_KW));\n-        let m = p.start();\n         p.bump();\n         patterns::pattern(p);\n         if p.at(COLON) {"}, {"sha": "18039cd3f8daa3b22ac0efd53a38ba0eef9ee152", "filename": "crates/ra_syntax/src/grammar/items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7055d43c3a1edca16cf5625f1b908643fa0bf21a/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7055d43c3a1edca16cf5625f1b908643fa0bf21a/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fitems.rs?ref=7055d43c3a1edca16cf5625f1b908643fa0bf21a", "patch": "@@ -36,6 +36,7 @@ pub(super) const ITEM_RECOVERY_SET: TokenSet = token_set![\n \n pub(super) fn item_or_macro(p: &mut Parser, stop_on_r_curly: bool, flavor: ItemFlavor) {\n     let m = p.start();\n+    attributes::outer_attributes(p);\n     match maybe_item(p, flavor) {\n         MaybeItem::Item(kind) => {\n             m.complete(p, kind);\n@@ -79,7 +80,6 @@ pub(super) enum MaybeItem {\n }\n \n pub(super) fn maybe_item(p: &mut Parser, flavor: ItemFlavor) -> MaybeItem {\n-    attributes::outer_attributes(p);\n     opt_visibility(p);\n     if let Some(kind) = items_without_modifiers(p) {\n         return MaybeItem::Item(kind);"}, {"sha": "1f52f699b3fd84a0639c6026f5c121daf3e026a4", "filename": "crates/ra_syntax/tests/data/parser/ok/0044_let_attrs.txt", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7055d43c3a1edca16cf5625f1b908643fa0bf21a/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Fok%2F0044_let_attrs.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7055d43c3a1edca16cf5625f1b908643fa0bf21a/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Fok%2F0044_let_attrs.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Fok%2F0044_let_attrs.txt?ref=7055d43c3a1edca16cf5625f1b908643fa0bf21a", "patch": "@@ -13,22 +13,22 @@ SOURCE_FILE@[0; 166)\n     BLOCK@[71; 165)\n       L_CURLY@[71; 72)\n       WHITESPACE@[72; 77)\n-      ATTR@[77; 106)\n-        POUND@[77; 78)\n-        TOKEN_TREE@[78; 106)\n-          L_BRACK@[78; 79)\n-          IDENT@[79; 82) \"cfg\"\n-          TOKEN_TREE@[82; 105)\n-            L_PAREN@[82; 83)\n-            IDENT@[83; 90) \"feature\"\n-            WHITESPACE@[90; 91)\n-            EQ@[91; 92)\n-            WHITESPACE@[92; 93)\n-            STRING@[93; 104)\n-            R_PAREN@[104; 105)\n-          R_BRACK@[105; 106)\n-      WHITESPACE@[106; 111)\n-      LET_STMT@[111; 163)\n+      LET_STMT@[77; 163)\n+        ATTR@[77; 106)\n+          POUND@[77; 78)\n+          TOKEN_TREE@[78; 106)\n+            L_BRACK@[78; 79)\n+            IDENT@[79; 82) \"cfg\"\n+            TOKEN_TREE@[82; 105)\n+              L_PAREN@[82; 83)\n+              IDENT@[83; 90) \"feature\"\n+              WHITESPACE@[90; 91)\n+              EQ@[91; 92)\n+              WHITESPACE@[92; 93)\n+              STRING@[93; 104)\n+              R_PAREN@[104; 105)\n+            R_BRACK@[105; 106)\n+        WHITESPACE@[106; 111)\n         LET_KW@[111; 114)\n         WHITESPACE@[114; 115)\n         BIND_PAT@[115; 124)"}]}