{"sha": "9afcd7724694e2078ffc9b6c6b73b178ebf3e379", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhZmNkNzcyNDY5NGUyMDc4ZmZjOWI2YzZiNzNiMTc4ZWJmM2UzNzk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-08-14T22:10:13Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-08-17T14:38:49Z"}, "message": "don't pass extra state fo encode_struct_ctor", "tree": {"sha": "90e3413517c3b8f3be76112ccc1ec2cb52229613", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90e3413517c3b8f3be76112ccc1ec2cb52229613"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9afcd7724694e2078ffc9b6c6b73b178ebf3e379", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9afcd7724694e2078ffc9b6c6b73b178ebf3e379", "html_url": "https://github.com/rust-lang/rust/commit/9afcd7724694e2078ffc9b6c6b73b178ebf3e379", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9afcd7724694e2078ffc9b6c6b73b178ebf3e379/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c716ad8af5cb78595cc410536f0e03e03a216b2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c716ad8af5cb78595cc410536f0e03e03a216b2d", "html_url": "https://github.com/rust-lang/rust/commit/c716ad8af5cb78595cc410536f0e03e03a216b2d"}], "stats": {"total": 67, "additions": 33, "deletions": 34}, "files": [{"sha": "4848eb8fb4ce4afb603212cec435e73e0f6f784c", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 33, "deletions": 34, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/9afcd7724694e2078ffc9b6c6b73b178ebf3e379/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9afcd7724694e2078ffc9b6c6b73b178ebf3e379/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=9afcd7724694e2078ffc9b6c6b73b178ebf3e379", "patch": "@@ -452,38 +452,37 @@ impl<'a, 'tcx, 'encoder> ItemContentBuilder<'a, 'tcx, 'encoder> {\n     }\n }\n \n-impl<'a, 'tcx, 'encoder> IndexBuilder<'a, 'tcx, 'encoder> {\n-    fn encode_info_for_struct_ctor(&mut self,\n-                                   name: Name,\n-                                   ctor_id: ast::NodeId,\n-                                   variant: ty::VariantDef<'tcx>,\n-                                   struct_id: NodeId) {\n+impl<'a, 'tcx, 'encoder> ItemContentBuilder<'a, 'tcx, 'encoder> {\n+    fn encode_struct_ctor(&mut self,\n+                          struct_def_id: DefId,\n+                          struct_node_id: ast::NodeId,\n+                          ctor_node_id: ast::NodeId) {\n         let ecx = self.ecx();\n-        let ctor_def_id = ecx.tcx.map.local_def_id(ctor_id);\n-\n-        self.record(ctor_def_id, |this| {\n-            encode_def_id_and_key(ecx, this.rbml_w, ctor_def_id);\n-            encode_family(this.rbml_w, match variant.kind {\n-                ty::VariantKind::Struct => 'S',\n-                ty::VariantKind::Tuple => 's',\n-                ty::VariantKind::Unit => 'u',\n-            });\n-            this.encode_bounds_and_type_for_item(ctor_id);\n-            encode_name(this.rbml_w, name);\n-            this.encode_parent_item(ecx.tcx.map.local_def_id(struct_id));\n+        let def = ecx.tcx.lookup_adt_def(struct_def_id);\n+        let variant = def.struct_variant();\n+        let item = ecx.tcx.map.expect_item(struct_node_id);\n+        let ctor_def_id = ecx.tcx.map.local_def_id(ctor_node_id);\n+        encode_def_id_and_key(ecx, self.rbml_w, ctor_def_id);\n+        encode_family(self.rbml_w, match variant.kind {\n+            ty::VariantKind::Struct => 'S',\n+            ty::VariantKind::Tuple => 's',\n+            ty::VariantKind::Unit => 'u',\n+        });\n+        self.encode_bounds_and_type_for_item(ctor_node_id);\n+        encode_name(self.rbml_w, item.name);\n+        self.encode_parent_item(struct_def_id);\n \n-            let stab = ecx.tcx.lookup_stability(ecx.tcx.map.local_def_id(ctor_id));\n-            let depr = ecx.tcx.lookup_deprecation(ecx.tcx.map.local_def_id(ctor_id));\n-            encode_stability(this.rbml_w, stab);\n-            encode_deprecation(this.rbml_w, depr);\n+        let stab = ecx.tcx.lookup_stability(ctor_def_id);\n+        let depr = ecx.tcx.lookup_deprecation(ctor_def_id);\n+        encode_stability(self.rbml_w, stab);\n+        encode_deprecation(self.rbml_w, depr);\n \n-            // indicate that this is a tuple struct ctor, because\n-            // downstream users will normally want the tuple struct\n-            // definition, but without this there is no way for them\n-            // to tell that they actually have a ctor rather than a\n-            // normal function\n-            this.rbml_w.wr_tagged_bytes(tag_items_data_item_is_tuple_struct_ctor, &[]);\n-        });\n+        // indicate that this is a tuple struct ctor, because\n+        // downstream users will normally want the tuple struct\n+        // definition, but without this there is no way for them\n+        // to tell that they actually have a ctor rather than a\n+        // normal function\n+        self.rbml_w.wr_tagged_bytes(tag_items_data_item_is_tuple_struct_ctor, &[]);\n     }\n }\n \n@@ -1073,7 +1072,7 @@ impl<'a, 'tcx, 'encoder> IndexBuilder<'a, 'tcx, 'encoder> {\n \n     fn encode_addl_struct_info(&mut self,\n                                def_id: DefId,\n-                               struct_def_id: ast::NodeId,\n+                               struct_node_id: ast::NodeId,\n                                item: &hir::Item) {\n         let ecx = self.ecx;\n         let def = ecx.tcx.lookup_adt_def(def_id);\n@@ -1089,10 +1088,10 @@ impl<'a, 'tcx, 'encoder> IndexBuilder<'a, 'tcx, 'encoder> {\n             ty::VariantKind::Tuple | ty::VariantKind::Unit => {\n                 // there is a value for structs like `struct\n                 // Foo()` and `struct Foo`\n-                self.encode_info_for_struct_ctor(item.name,\n-                                                       struct_def_id,\n-                                                       variant,\n-                                                       item.id);\n+                let ctor_def_id = ecx.tcx.map.local_def_id(struct_node_id);\n+                self.record(ctor_def_id, |this| this.encode_struct_ctor(def_id,\n+                                                                        item.id,\n+                                                                        struct_node_id));\n             }\n         }\n     }"}]}