{"sha": "216371d42412192ebee5bb94106b40d5ad77fc70", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxNjM3MWQ0MjQxMjE5MmViZWU1YmI5NDEwNmI0MGQ1YWQ3N2ZjNzA=", "commit": {"author": {"name": "Jane Lusby", "email": "jlusby@yaah.dev", "date": "2020-04-15T16:06:57Z"}, "committer": {"name": "Jane Lusby", "email": "jlusby@yaah.dev", "date": "2020-04-15T16:06:57Z"}, "message": "split it up for testing but the merge broke tests", "tree": {"sha": "f3ad079a3a3d09de3230f8e6bc22bebb3badcdee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3ad079a3a3d09de3230f8e6bc22bebb3badcdee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/216371d42412192ebee5bb94106b40d5ad77fc70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/216371d42412192ebee5bb94106b40d5ad77fc70", "html_url": "https://github.com/rust-lang/rust/commit/216371d42412192ebee5bb94106b40d5ad77fc70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/216371d42412192ebee5bb94106b40d5ad77fc70/comments", "author": {"login": "yaahc", "id": 1993852, "node_id": "MDQ6VXNlcjE5OTM4NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1993852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaahc", "html_url": "https://github.com/yaahc", "followers_url": "https://api.github.com/users/yaahc/followers", "following_url": "https://api.github.com/users/yaahc/following{/other_user}", "gists_url": "https://api.github.com/users/yaahc/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaahc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaahc/subscriptions", "organizations_url": "https://api.github.com/users/yaahc/orgs", "repos_url": "https://api.github.com/users/yaahc/repos", "events_url": "https://api.github.com/users/yaahc/events{/privacy}", "received_events_url": "https://api.github.com/users/yaahc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yaahc", "id": 1993852, "node_id": "MDQ6VXNlcjE5OTM4NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1993852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaahc", "html_url": "https://github.com/yaahc", "followers_url": "https://api.github.com/users/yaahc/followers", "following_url": "https://api.github.com/users/yaahc/following{/other_user}", "gists_url": "https://api.github.com/users/yaahc/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaahc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaahc/subscriptions", "organizations_url": "https://api.github.com/users/yaahc/orgs", "repos_url": "https://api.github.com/users/yaahc/repos", "events_url": "https://api.github.com/users/yaahc/events{/privacy}", "received_events_url": "https://api.github.com/users/yaahc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0441525690640ff374313fa5651a97829b0ea85a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0441525690640ff374313fa5651a97829b0ea85a", "html_url": "https://github.com/rust-lang/rust/commit/0441525690640ff374313fa5651a97829b0ea85a"}], "stats": {"total": 176, "additions": 111, "deletions": 65}, "files": [{"sha": "e62ddf2c5f5e97d6789a693efa9ad29b52c6c9e5", "filename": "src/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/216371d42412192ebee5bb94106b40d5ad77fc70/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/216371d42412192ebee5bb94106b40d5ad77fc70/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=216371d42412192ebee5bb94106b40d5ad77fc70", "patch": "@@ -43,7 +43,7 @@ fn arg_value<'a, T: Deref<Target = str>>(\n \n         match arg.next().or_else(|| args.next()) {\n             Some(v) if pred(v) => return Some(v),\n-            _ => {},\n+            _ => {}\n         }\n     }\n     None"}, {"sha": "6a06ef7437c743dcb0ce3d3e61d2814a189f1aad", "filename": "src/main.rs", "status": "modified", "additions": 107, "deletions": 61, "changes": 168, "blob_url": "https://github.com/rust-lang/rust/blob/216371d42412192ebee5bb94106b40d5ad77fc70/src%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/216371d42412192ebee5bb94106b40d5ad77fc70/src%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain.rs?ref=216371d42412192ebee5bb94106b40d5ad77fc70", "patch": "@@ -1,6 +1,10 @@\n #![cfg_attr(feature = \"deny-warnings\", deny(warnings))]\n \n use rustc_tools_util::VersionInfo;\n+use std::env;\n+use std::path::PathBuf;\n+use std::process::{self, Command};\n+use std::ffi::OsString;\n \n const CARGO_CLIPPY_HELP: &str = r#\"Checks a package to catch common mistakes and improve your Rust code.\n \n@@ -37,93 +41,135 @@ fn show_version() {\n \n pub fn main() {\n     // Check for version and help flags even when invoked as 'cargo-clippy'\n-    if std::env::args().any(|a| a == \"--help\" || a == \"-h\") {\n+    if env::args().any(|a| a == \"--help\" || a == \"-h\") {\n         show_help();\n         return;\n     }\n \n-    if std::env::args().any(|a| a == \"--version\" || a == \"-V\") {\n+    if env::args().any(|a| a == \"--version\" || a == \"-V\") {\n         show_version();\n         return;\n     }\n \n-    if let Err(code) = process(std::env::args().skip(2)) {\n-        std::process::exit(code);\n+    if let Err(code) = process(env::args().skip(2)) {\n+        process::exit(code);\n     }\n }\n \n-fn process<I>(mut old_args: I) -> Result<(), i32>\n-where\n-    I: Iterator<Item = String>,\n+struct ClippyCmd {\n+    unstable_options: bool,\n+    cmd: &'static str,\n+    args: Vec<String>,\n+    clippy_args: String\n+}\n+\n+impl ClippyCmd\n {\n-    let mut args = vec![\"check\".to_owned()];\n-\n-    let mut fix = false;\n-    let mut unstable_options = false;\n-\n-    for arg in old_args.by_ref() {\n-        match arg.as_str() {\n-            \"--fix\" => {\n-                fix = true;\n-                continue;\n-            },\n-            \"--\" => break,\n-            // Cover -Zunstable-options and -Z unstable-options\n-            s if s.ends_with(\"unstable-options\") => unstable_options = true,\n-            _ => {},\n+    fn new<I>(mut old_args: I) -> Self\n+    where\n+        I: Iterator<Item = String>,\n+    {\n+        let mut cmd = \"check\";\n+        let mut unstable_options = false;\n+        let mut args = vec![];\n+\n+        for arg in old_args.by_ref() {\n+            match arg.as_str() {\n+                \"--fix\" => {\n+                    cmd = \"fix\";\n+                    continue;\n+                }\n+                \"--\" => break,\n+                // Cover -Zunstable-options and -Z unstable-options\n+                s if s.ends_with(\"unstable-options\") => unstable_options = true,\n+                _ => {}\n+            }\n+\n+            args.push(arg);\n+        }\n+\n+        if cmd == \"fix\" && !unstable_options {\n+            panic!(\"Usage of `--fix` requires `-Z unstable-options`\");\n         }\n \n-        args.push(arg);\n+        // Run the dogfood tests directly on nightly cargo. This is required due\n+        // to a bug in rustup.rs when running cargo on custom toolchains. See issue #3118.\n+        if env::var_os(\"CLIPPY_DOGFOOD\").is_some() && cfg!(windows) {\n+            args.insert(0, \"+nightly\".to_string());\n+        }\n+\n+        let clippy_args: String =\n+            old_args\n+            .map(|arg| format!(\"{}__CLIPPY_HACKERY__\", arg))\n+            .collect();\n+\n+        ClippyCmd {\n+            unstable_options,\n+            cmd,\n+            args,\n+            clippy_args,\n+        }\n     }\n \n-    if fix {\n-        if unstable_options {\n-            args[0] = \"fix\".to_owned();\n+    fn path_env(&self) -> &'static str {\n+        if self.unstable_options {\n+            \"RUSTC_WORKSPACE_WRAPPER\"\n         } else {\n-            panic!(\"Usage of `--fix` requires `-Z unstable-options`\");\n+            \"RUSTC_WRAPPER\"\n         }\n     }\n \n-    let path_env = if unstable_options {\n-        \"RUSTC_WORKSPACE_WRAPPER\"\n-    } else {\n-        \"RUSTC_WRAPPER\"\n-    };\n+    fn path(&self) -> PathBuf {\n+        let mut path = env::current_exe()\n+            .expect(\"current executable path invalid\")\n+            .with_file_name(\"clippy-driver\");\n \n-    let clippy_args: String = old_args.map(|arg| format!(\"{}__CLIPPY_HACKERY__\", arg)).collect();\n+        if cfg!(windows) {\n+            path.set_extension(\"exe\");\n+        }\n+\n+        path\n+    }\n \n-    let mut path = std::env::current_exe()\n-        .expect(\"current executable path invalid\")\n-        .with_file_name(\"clippy-driver\");\n-    if cfg!(windows) {\n-        path.set_extension(\"exe\");\n+    fn target_dir() -> Option<(&'static str, OsString)> {\n+        env::var_os(\"CLIPPY_DOGFOOD\")\n+            .map(|_| {\n+                env::var_os(\"CARGO_MANIFEST_DIR\").map_or_else(\n+                    || std::ffi::OsString::from(\"clippy_dogfood\"),\n+                    |d| {\n+                        std::path::PathBuf::from(d)\n+                            .join(\"target\")\n+                            .join(\"dogfood\")\n+                            .into_os_string()\n+                    },\n+                )\n+            })\n+            .map(|p| (\"CARGO_TARGET_DIR\", p))\n     }\n \n-    let target_dir = std::env::var_os(\"CLIPPY_DOGFOOD\")\n-        .map(|_| {\n-            std::env::var_os(\"CARGO_MANIFEST_DIR\").map_or_else(\n-                || std::ffi::OsString::from(\"clippy_dogfood\"),\n-                |d| {\n-                    std::path::PathBuf::from(d)\n-                        .join(\"target\")\n-                        .join(\"dogfood\")\n-                        .into_os_string()\n-                },\n-            )\n-        })\n-        .map(|p| (\"CARGO_TARGET_DIR\", p));\n-\n-    // Run the dogfood tests directly on nightly cargo. This is required due\n-    // to a bug in rustup.rs when running cargo on custom toolchains. See issue #3118.\n-    if std::env::var_os(\"CLIPPY_DOGFOOD\").is_some() && cfg!(windows) {\n-        args.insert(0, \"+nightly\".to_string());\n+    fn to_std_cmd(self) -> Command {\n+        let mut cmd = Command::new(\"cargo\");\n+\n+        cmd.env(self.path_env(), self.path())\n+            .envs(ClippyCmd::target_dir())\n+            .env(\"CLIPPY_ARGS\", self.clippy_args)\n+            .arg(self.cmd)\n+            .args(&self.args);\n+\n+        cmd\n     }\n+}\n+\n+\n+fn process<I>(old_args: I) -> Result<(), i32>\n+where\n+    I: Iterator<Item = String>,\n+{\n+    let cmd = ClippyCmd::new(old_args);\n+\n+    let mut cmd = cmd.to_std_cmd();\n \n-    let exit_status = std::process::Command::new(\"cargo\")\n-        .args(&args)\n-        .env(path_env, path)\n-        .env(\"CLIPPY_ARGS\", clippy_args)\n-        .envs(target_dir)\n+    let exit_status = cmd\n         .spawn()\n         .expect(\"could not run cargo\")\n         .wait()"}, {"sha": "1f737ee90ae396897e9aa6b37c3f75b8d5742e76", "filename": "tests/compile-test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/216371d42412192ebee5bb94106b40d5ad77fc70/tests%2Fcompile-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/216371d42412192ebee5bb94106b40d5ad77fc70/tests%2Fcompile-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-test.rs?ref=216371d42412192ebee5bb94106b40d5ad77fc70", "patch": "@@ -145,11 +145,11 @@ fn run_ui_toml(config: &mut compiletest::Config) {\n \n     let res = run_ui_toml_tests(&config, tests);\n     match res {\n-        Ok(true) => {},\n+        Ok(true) => {}\n         Ok(false) => panic!(\"Some tests failed\"),\n         Err(e) => {\n             println!(\"I/O failure during tests: {:?}\", e);\n-        },\n+        }\n     }\n }\n "}, {"sha": "a26f43d0eff9fdcd019ad62545175acb41c34f95", "filename": "tests/missing-test-files.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/216371d42412192ebee5bb94106b40d5ad77fc70/tests%2Fmissing-test-files.rs", "raw_url": "https://github.com/rust-lang/rust/raw/216371d42412192ebee5bb94106b40d5ad77fc70/tests%2Fmissing-test-files.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmissing-test-files.rs?ref=216371d42412192ebee5bb94106b40d5ad77fc70", "patch": "@@ -46,7 +46,7 @@ fn explore_directory(dir: &Path) -> Vec<String> {\n                         if file_stem != current_file {\n                             missing_files.push(path.to_str().unwrap().to_string());\n                         }\n-                    },\n+                    }\n                     _ => continue,\n                 };\n             }"}]}