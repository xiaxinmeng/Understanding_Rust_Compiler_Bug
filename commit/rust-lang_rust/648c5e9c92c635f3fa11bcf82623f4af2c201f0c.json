{"sha": "648c5e9c92c635f3fa11bcf82623f4af2c201f0c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0OGM1ZTljOTJjNjM1ZjNmYTExYmNmODI2MjNmNGFmMmMyMDFmMGM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-03T22:25:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-03T22:25:55Z"}, "message": "auto merge of #7534 : bblum/rust/soundness-messages, r=catamorphism", "tree": {"sha": "dd9f92b6dfdc1c61050bb5a96d5525b57a7549fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd9f92b6dfdc1c61050bb5a96d5525b57a7549fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/648c5e9c92c635f3fa11bcf82623f4af2c201f0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/648c5e9c92c635f3fa11bcf82623f4af2c201f0c", "html_url": "https://github.com/rust-lang/rust/commit/648c5e9c92c635f3fa11bcf82623f4af2c201f0c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/648c5e9c92c635f3fa11bcf82623f4af2c201f0c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c6fc46c030ab0515a052fa99c9e10c75cfc8184", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c6fc46c030ab0515a052fa99c9e10c75cfc8184", "html_url": "https://github.com/rust-lang/rust/commit/0c6fc46c030ab0515a052fa99c9e10c75cfc8184"}, {"sha": "54e01eb7e0ea74c01a797f56e2bf602c298a9769", "url": "https://api.github.com/repos/rust-lang/rust/commits/54e01eb7e0ea74c01a797f56e2bf602c298a9769", "html_url": "https://github.com/rust-lang/rust/commit/54e01eb7e0ea74c01a797f56e2bf602c298a9769"}], "stats": {"total": 62, "additions": 55, "deletions": 7}, "files": [{"sha": "2e3813f57e081ad315378a0821a8a3407ada64fc", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 24, "deletions": 7, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/648c5e9c92c635f3fa11bcf82623f4af2c201f0c/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/648c5e9c92c635f3fa11bcf82623f4af2c201f0c/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=648c5e9c92c635f3fa11bcf82623f4af2c201f0c", "patch": "@@ -538,12 +538,13 @@ impl BorrowckCtxt {\n \n             move_data::MoveExpr(expr) => {\n                 let expr_ty = ty::expr_ty_adjusted(self.tcx, expr);\n+                let suggestion = move_suggestion(self.tcx, expr_ty,\n+                        \"moved by default (use `copy` to override)\");\n                 self.tcx.sess.span_note(\n                     expr.span,\n-                    fmt!(\"`%s` moved here because it has type `%s`, \\\n-                          which is moved by default (use `copy` to override)\",\n+                    fmt!(\"`%s` moved here because it has type `%s`, which is %s\",\n                          self.loan_path_to_str(moved_lp),\n-                         expr_ty.user_string(self.tcx)));\n+                         expr_ty.user_string(self.tcx), suggestion));\n             }\n \n             move_data::MovePat(pat) => {\n@@ -557,12 +558,28 @@ impl BorrowckCtxt {\n             }\n \n             move_data::Captured(expr) => {\n+                let expr_ty = ty::expr_ty_adjusted(self.tcx, expr);\n+                let suggestion = move_suggestion(self.tcx, expr_ty,\n+                        \"moved by default (make a copy and \\\n+                         capture that instead to override)\");\n                 self.tcx.sess.span_note(\n                     expr.span,\n-                    fmt!(\"`%s` moved into closure environment here \\\n-                          because its type is moved by default \\\n-                          (make a copy and capture that instead to override)\",\n-                         self.loan_path_to_str(moved_lp)));\n+                    fmt!(\"`%s` moved into closure environment here because it \\\n+                          has type `%s`, which is %s\",\n+                         self.loan_path_to_str(moved_lp),\n+                         expr_ty.user_string(self.tcx), suggestion));\n+            }\n+        }\n+\n+        fn move_suggestion(tcx: ty::ctxt, ty: ty::t, default_msg: &'static str)\n+                          -> &'static str {\n+            match ty::get(ty).sty {\n+                ty::ty_closure(ref cty) if cty.sigil == ast::BorrowedSigil =>\n+                    \"a non-copyable stack closure (capture it in a new closure, \\\n+                     e.g. `|x| f(x)`, to override)\",\n+                _ if !ty::type_is_copyable(tcx, ty) =>\n+                    \"non-copyable (perhaps you meant to use clone()?)\",\n+                _ => default_msg,\n             }\n         }\n     }"}, {"sha": "bfb1e910495dedfa24e90c14fec9589b71131a56", "filename": "src/test/compile-fail/closure-bounds-cant-mutably-borrow-with-copy.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/648c5e9c92c635f3fa11bcf82623f4af2c201f0c/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-cant-mutably-borrow-with-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/648c5e9c92c635f3fa11bcf82623f4af2c201f0c/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-cant-mutably-borrow-with-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-cant-mutably-borrow-with-copy.rs?ref=648c5e9c92c635f3fa11bcf82623f4af2c201f0c", "previous_filename": "src/test/compile-fail/the-case-of-the-recurring-closure-2.rs"}, {"sha": "f05c30c3355e0830b57d1425204ad4fd22a1e4fd", "filename": "src/test/compile-fail/moves-based-on-type-no-recursive-stack-closure.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/648c5e9c92c635f3fa11bcf82623f4af2c201f0c/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-no-recursive-stack-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/648c5e9c92c635f3fa11bcf82623f4af2c201f0c/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-no-recursive-stack-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-no-recursive-stack-closure.rs?ref=648c5e9c92c635f3fa11bcf82623f4af2c201f0c", "previous_filename": "src/test/compile-fail/the-case-of-the-recurring-closure.rs"}, {"sha": "6d5bb638be69bd3bd885627cfc030b1cecc60de6", "filename": "src/test/compile-fail/moves-based-on-type-tuple.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/648c5e9c92c635f3fa11bcf82623f4af2c201f0c/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/648c5e9c92c635f3fa11bcf82623f4af2c201f0c/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-tuple.rs?ref=648c5e9c92c635f3fa11bcf82623f4af2c201f0c", "previous_filename": "src/test/compile-fail/move-based-on-type-tuple.rs"}, {"sha": "8bb57ebaaf58d3cf6d6ef3372846309c4a419f0c", "filename": "src/test/run-pass/closure-bounds-recursive-stack-closure.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/648c5e9c92c635f3fa11bcf82623f4af2c201f0c/src%2Ftest%2Frun-pass%2Fclosure-bounds-recursive-stack-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/648c5e9c92c635f3fa11bcf82623f4af2c201f0c/src%2Ftest%2Frun-pass%2Fclosure-bounds-recursive-stack-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclosure-bounds-recursive-stack-closure.rs?ref=648c5e9c92c635f3fa11bcf82623f4af2c201f0c", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Ensures that it's legal to create a recursive stack closure as long as\n+// its environment is copyable\n+\n+struct R<'self> {\n+    // This struct is needed to create the\n+    // otherwise infinite type of a fn that\n+    // accepts itself as argument:\n+    c: &'self fn:Copy(&R, uint) -> uint\n+}\n+\n+fn main() {\n+    // Stupid version of fibonacci.\n+    let fib: &fn:Copy(&R, uint) -> uint = |fib, x| {\n+        if x == 0 || x == 1 {\n+            x\n+        } else {\n+            (fib.c)(fib, x-1) + (fib.c)(fib, x-2)\n+        }\n+    };\n+    assert!(fib(&R { c: fib }, 7) == 13);\n+}"}]}