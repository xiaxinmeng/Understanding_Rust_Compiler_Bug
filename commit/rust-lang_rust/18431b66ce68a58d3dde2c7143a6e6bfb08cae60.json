{"sha": "18431b66ce68a58d3dde2c7143a6e6bfb08cae60", "node_id": "C_kwDOAAsO6NoAKDE4NDMxYjY2Y2U2OGE1OGQzZGRlMmM3MTQzYTZlNmJmYjA4Y2FlNjA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-10-18T19:18:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-18T19:18:46Z"}, "message": "Rollup merge of #102507 - scottmcm:more-binary-search-docs, r=m-ou-se\n\nMore slice::partition_point examples\n\nAfter seeing the discussion of `binary_search` vs `partition_point` in #101999, I thought some more example code could be helpful.", "tree": {"sha": "325967d83f6589806040ade7a5c755adf65852ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/325967d83f6589806040ade7a5c755adf65852ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18431b66ce68a58d3dde2c7143a6e6bfb08cae60", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjTvwWCRBK7hj4Ov3rIwAAw8AIABLvbh9GWFscpqVC2ejyA17L\nor3uCXIlU7jm9tQcD9USDYXKXzzAMRPwNBUa1mqGgsB2zPSaMZ+Vu2tjVxqWz1vz\nH/n7ZTKVivrAUCr6XQiVg24qUdsL2BqeVnjzeAKc2dWMEcF6iWUk0whoMHU7Omu2\nFLBCbG5zwkkFBHEaaZMRSnHDWTwJnFpyQsjEc83G/CjV+2nlP4WuFUIv6Yi2FIux\nHszbZlyOkt/Bbg6vyoh+CE048g56HvfYGsEMTFh53B4Tvk0c8U04ad07ultNz7eH\n6npF0UouCQyEZXhONj2uwBdnyxdvjxDjpovqy5AeMJ3cwHJ2nkxcIWKJ/2VxQTg=\n=/eeO\n-----END PGP SIGNATURE-----\n", "payload": "tree 325967d83f6589806040ade7a5c755adf65852ff\nparent d2644e538ccbf99e6aea79f60de3449e5c90c3d5\nparent 5b9a02a87d8f8b384ea45a0fd2a7bcc57b810986\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1666120726 +0200\ncommitter GitHub <noreply@github.com> 1666120726 +0200\n\nRollup merge of #102507 - scottmcm:more-binary-search-docs, r=m-ou-se\n\nMore slice::partition_point examples\n\nAfter seeing the discussion of `binary_search` vs `partition_point` in #101999, I thought some more example code could be helpful.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18431b66ce68a58d3dde2c7143a6e6bfb08cae60", "html_url": "https://github.com/rust-lang/rust/commit/18431b66ce68a58d3dde2c7143a6e6bfb08cae60", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18431b66ce68a58d3dde2c7143a6e6bfb08cae60/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2644e538ccbf99e6aea79f60de3449e5c90c3d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2644e538ccbf99e6aea79f60de3449e5c90c3d5", "html_url": "https://github.com/rust-lang/rust/commit/d2644e538ccbf99e6aea79f60de3449e5c90c3d5"}, {"sha": "5b9a02a87d8f8b384ea45a0fd2a7bcc57b810986", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b9a02a87d8f8b384ea45a0fd2a7bcc57b810986", "html_url": "https://github.com/rust-lang/rust/commit/5b9a02a87d8f8b384ea45a0fd2a7bcc57b810986"}], "stats": {"total": 32, "additions": 32, "deletions": 0}, "files": [{"sha": "5f1a05706f205a08a5628ea9ff7341a9b314d5e7", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/18431b66ce68a58d3dde2c7143a6e6bfb08cae60/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18431b66ce68a58d3dde2c7143a6e6bfb08cae60/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=18431b66ce68a58d3dde2c7143a6e6bfb08cae60", "patch": "@@ -2359,6 +2359,28 @@ impl<T> [T] {\n     /// assert!(match r { Ok(1..=4) => true, _ => false, });\n     /// ```\n     ///\n+    /// If you want to find that whole *range* of matching items, rather than\n+    /// an arbitrary matching one, that can be done using [`partition_point`]:\n+    /// ```\n+    /// let s = [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55];\n+    ///\n+    /// let low = s.partition_point(|x| x < &1);\n+    /// assert_eq!(low, 1);\n+    /// let high = s.partition_point(|x| x <= &1);\n+    /// assert_eq!(high, 5);\n+    /// let r = s.binary_search(&1);\n+    /// assert!((low..high).contains(&r.unwrap()));\n+    ///\n+    /// assert!(s[..low].iter().all(|&x| x < 1));\n+    /// assert!(s[low..high].iter().all(|&x| x == 1));\n+    /// assert!(s[high..].iter().all(|&x| x > 1));\n+    ///\n+    /// // For something not found, the \"range\" of equal items is empty\n+    /// assert_eq!(s.partition_point(|x| x < &11), 9);\n+    /// assert_eq!(s.partition_point(|x| x <= &11), 9);\n+    /// assert_eq!(s.binary_search(&11), Err(9));\n+    /// ```\n+    ///\n     /// If you want to insert an item to a sorted vector, while maintaining\n     /// sort order, consider using [`partition_point`]:\n     ///\n@@ -3787,6 +3809,16 @@ impl<T> [T] {\n     /// assert!(v[i..].iter().all(|&x| !(x < 5)));\n     /// ```\n     ///\n+    /// If all elements of the slice match the predicate, including if the slice\n+    /// is empty, then the length of the slice will be returned:\n+    ///\n+    /// ```\n+    /// let a = [2, 4, 8];\n+    /// assert_eq!(a.partition_point(|x| x < &100), a.len());\n+    /// let a: [i32; 0] = [];\n+    /// assert_eq!(a.partition_point(|x| x < &100), 0);\n+    /// ```\n+    ///\n     /// If you want to insert an item to a sorted vector, while maintaining\n     /// sort order:\n     ///"}]}