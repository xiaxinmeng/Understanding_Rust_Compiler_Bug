{"sha": "8623b331eebfa097bb33dff1df5efa324e6a780a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2MjNiMzMxZWViZmEwOTdiYjMzZGZmMWRmNWVmYTMyNGU2YTc4MGE=", "commit": {"author": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2021-03-02T15:55:19Z"}, "committer": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2021-03-11T10:37:16Z"}, "message": "move filetype_is_file to its own module", "tree": {"sha": "18fc7bda6efae70220cde61c5378cc71c28e5fd0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18fc7bda6efae70220cde61c5378cc71c28e5fd0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8623b331eebfa097bb33dff1df5efa324e6a780a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8623b331eebfa097bb33dff1df5efa324e6a780a", "html_url": "https://github.com/rust-lang/rust/commit/8623b331eebfa097bb33dff1df5efa324e6a780a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8623b331eebfa097bb33dff1df5efa324e6a780a/comments", "author": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60a053725e5c5c3a78e3d0918ca00e9e98324a95", "url": "https://api.github.com/repos/rust-lang/rust/commits/60a053725e5c5c3a78e3d0918ca00e9e98324a95", "html_url": "https://github.com/rust-lang/rust/commit/60a053725e5c5c3a78e3d0918ca00e9e98324a95"}], "stats": {"total": 74, "additions": 41, "deletions": 33}, "files": [{"sha": "b03835f97e634728bf554d2b415f04c17520ccc2", "filename": "clippy_lints/src/methods/filetype_is_file.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/8623b331eebfa097bb33dff1df5efa324e6a780a/clippy_lints%2Fsrc%2Fmethods%2Ffiletype_is_file.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8623b331eebfa097bb33dff1df5efa324e6a780a/clippy_lints%2Fsrc%2Fmethods%2Ffiletype_is_file.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Ffiletype_is_file.rs?ref=8623b331eebfa097bb33dff1df5efa324e6a780a", "patch": "@@ -0,0 +1,39 @@\n+use crate::utils::{get_parent_expr, match_type, paths, span_lint_and_help};\n+use if_chain::if_chain;\n+use rustc_hir as hir;\n+use rustc_lint::LateContext;\n+use rustc_span::source_map::Span;\n+\n+use super::FILETYPE_IS_FILE;\n+\n+pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, args: &[hir::Expr<'_>]) {\n+    let ty = cx.typeck_results().expr_ty(&args[0]);\n+\n+    if !match_type(cx, ty, &paths::FILE_TYPE) {\n+        return;\n+    }\n+\n+    let span: Span;\n+    let verb: &str;\n+    let lint_unary: &str;\n+    let help_unary: &str;\n+    if_chain! {\n+        if let Some(parent) = get_parent_expr(cx, expr);\n+        if let hir::ExprKind::Unary(op, _) = parent.kind;\n+        if op == hir::UnOp::Not;\n+        then {\n+            lint_unary = \"!\";\n+            verb = \"denies\";\n+            help_unary = \"\";\n+            span = parent.span;\n+        } else {\n+            lint_unary = \"\";\n+            verb = \"covers\";\n+            help_unary = \"!\";\n+            span = expr.span;\n+        }\n+    }\n+    let lint_msg = format!(\"`{}FileType::is_file()` only {} regular files\", lint_unary, verb);\n+    let help_msg = format!(\"use `{}FileType::is_dir()` instead\", help_unary);\n+    span_lint_and_help(cx, FILETYPE_IS_FILE, span, &lint_msg, None, &help_msg);\n+}"}, {"sha": "54a6a4cf93417be22f0318155317ab437f331b83", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 2, "deletions": 33, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/8623b331eebfa097bb33dff1df5efa324e6a780a/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8623b331eebfa097bb33dff1df5efa324e6a780a/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=8623b331eebfa097bb33dff1df5efa324e6a780a", "patch": "@@ -1,6 +1,7 @@\n mod bind_instead_of_map;\n mod bytes_nth;\n mod expect_used;\n+mod filetype_is_file;\n mod filter_map_identity;\n mod filter_next;\n mod get_unwrap;\n@@ -1725,7 +1726,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             [\"add\" | \"offset\" | \"sub\" | \"wrapping_offset\" | \"wrapping_add\" | \"wrapping_sub\"] => {\n                 check_pointer_offset(cx, expr, arg_lists[0])\n             },\n-            [\"is_file\", ..] => lint_filetype_is_file(cx, expr, arg_lists[0]),\n+            [\"is_file\", ..] => filetype_is_file::check(cx, expr, arg_lists[0]),\n             [\"map\", \"as_ref\"] => {\n                 option_as_ref_deref::check(cx, expr, arg_lists[1], arg_lists[0], false, self.msrv.as_ref())\n             },\n@@ -3859,38 +3860,6 @@ fn check_pointer_offset(cx: &LateContext<'_>, expr: &hir::Expr<'_>, args: &[hir:\n     }\n }\n \n-fn lint_filetype_is_file(cx: &LateContext<'_>, expr: &hir::Expr<'_>, args: &[hir::Expr<'_>]) {\n-    let ty = cx.typeck_results().expr_ty(&args[0]);\n-\n-    if !match_type(cx, ty, &paths::FILE_TYPE) {\n-        return;\n-    }\n-\n-    let span: Span;\n-    let verb: &str;\n-    let lint_unary: &str;\n-    let help_unary: &str;\n-    if_chain! {\n-        if let Some(parent) = get_parent_expr(cx, expr);\n-        if let hir::ExprKind::Unary(op, _) = parent.kind;\n-        if op == hir::UnOp::Not;\n-        then {\n-            lint_unary = \"!\";\n-            verb = \"denies\";\n-            help_unary = \"\";\n-            span = parent.span;\n-        } else {\n-            lint_unary = \"\";\n-            verb = \"covers\";\n-            help_unary = \"!\";\n-            span = expr.span;\n-        }\n-    }\n-    let lint_msg = format!(\"`{}FileType::is_file()` only {} regular files\", lint_unary, verb);\n-    let help_msg = format!(\"use `{}FileType::is_dir()` instead\", help_unary);\n-    span_lint_and_help(cx, FILETYPE_IS_FILE, span, &lint_msg, None, &help_msg);\n-}\n-\n fn lint_from_iter(cx: &LateContext<'_>, expr: &hir::Expr<'_>, args: &[hir::Expr<'_>]) {\n     let ty = cx.typeck_results().expr_ty(expr);\n     let arg_ty = cx.typeck_results().expr_ty(&args[0]);"}]}