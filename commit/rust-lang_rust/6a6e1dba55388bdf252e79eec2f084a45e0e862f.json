{"sha": "6a6e1dba55388bdf252e79eec2f084a45e0e862f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhNmUxZGJhNTUzODhiZGYyNTJlNzllZWMyZjA4NGE0NWUwZTg2MmY=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2015-11-18T01:22:32Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2015-11-18T01:22:32Z"}, "message": "Refactor away get_module_if_available and get_module and reformat one-liners", "tree": {"sha": "c0b9926c57e47dcdcba376d078d9cd0f4343313c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0b9926c57e47dcdcba376d078d9cd0f4343313c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a6e1dba55388bdf252e79eec2f084a45e0e862f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a6e1dba55388bdf252e79eec2f084a45e0e862f", "html_url": "https://github.com/rust-lang/rust/commit/6a6e1dba55388bdf252e79eec2f084a45e0e862f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a6e1dba55388bdf252e79eec2f084a45e0e862f/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "572c2f3e07fd0927d6c50a6604b9c3f2fa3ebb86", "url": "https://api.github.com/repos/rust-lang/rust/commits/572c2f3e07fd0927d6c50a6604b9c3f2fa3ebb86", "html_url": "https://github.com/rust-lang/rust/commit/572c2f3e07fd0927d6c50a6604b9c3f2fa3ebb86"}], "stats": {"total": 144, "additions": 56, "deletions": 88}, "files": [{"sha": "c669e847bf2ddefd19756c5fa5c11002bd846ee1", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 19, "deletions": 30, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/6a6e1dba55388bdf252e79eec2f084a45e0e862f/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a6e1dba55388bdf252e79eec2f084a45e0e862f/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=6a6e1dba55388bdf252e79eec2f084a45e0e862f", "patch": "@@ -86,10 +86,9 @@ impl<'a, 'b:'a, 'tcx:'b> DerefMut for GraphBuilder<'a, 'b, 'tcx> {\n impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n     /// Constructs the reduced graph for the entire crate.\n     fn build_reduced_graph(self, krate: &hir::Crate) {\n-        let parent = self.graph_root.get_module();\n         let mut visitor = BuildReducedGraphVisitor {\n+            parent: self.graph_root.clone(),\n             builder: self,\n-            parent: parent,\n         };\n         visit::walk_crate(&mut visitor, krate);\n     }\n@@ -318,10 +317,9 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                     };\n                     self.external_exports.insert(def_id);\n                     let parent_link = ModuleParentLink(Rc::downgrade(parent), name);\n-                    let external_module = Rc::new(Module::new(parent_link,\n-                                                              Some(DefMod(def_id)),\n-                                                              false,\n-                                                              true));\n+                    let def = DefMod(def_id);\n+                    let external_module = Module::new(parent_link, Some(def), false, true);\n+\n                     debug!(\"(build reduced graph for item) found extern `{}`\",\n                            module_to_string(&*external_module));\n                     self.check_for_conflicts_between_external_crates(&**parent, name, sp);\n@@ -338,9 +336,9 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n \n                 let parent_link = self.get_parent_link(parent, name);\n                 let def = DefMod(self.ast_map.local_def_id(item.id));\n-                name_bindings.define_module(parent_link, Some(def), false, is_public, sp);\n-\n-                name_bindings.get_module()\n+                let module = Module::new(parent_link, Some(def), false, is_public);\n+                name_bindings.define_module(module.clone(), sp);\n+                module\n             }\n \n             ItemForeignMod(..) => parent.clone(),\n@@ -377,7 +375,8 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n \n                 let parent_link = self.get_parent_link(parent, name);\n                 let def = DefTy(self.ast_map.local_def_id(item.id), false);\n-                name_bindings.define_module(parent_link, Some(def), false, is_public, sp);\n+                let module = Module::new(parent_link, Some(def), false, is_public);\n+                name_bindings.define_module(module, sp);\n                 parent.clone()\n             }\n \n@@ -389,9 +388,8 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n \n                 let parent_link = self.get_parent_link(parent, name);\n                 let def = DefTy(self.ast_map.local_def_id(item.id), true);\n-                name_bindings.define_module(parent_link, Some(def), false, is_public, sp);\n-\n-                let module = name_bindings.get_module();\n+                let module = Module::new(parent_link, Some(def), false, is_public);\n+                name_bindings.define_module(module.clone(), sp);\n \n                 for variant in &(*enum_definition).variants {\n                     let item_def_id = self.ast_map.local_def_id(item.id);\n@@ -454,8 +452,8 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                 // Add all the items within to a new module.\n                 let parent_link = self.get_parent_link(parent, name);\n                 let def = DefTrait(def_id);\n-                name_bindings.define_module(parent_link, Some(def), false, is_public, sp);\n-                let module_parent = name_bindings.get_module();\n+                let module_parent = Module::new(parent_link, Some(def), false, is_public);\n+                name_bindings.define_module(module_parent.clone(), sp);\n \n                 // Add the names of all the items to the trait info.\n                 for trait_item in items {\n@@ -555,10 +553,8 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                     {}\",\n                    block_id);\n \n-            let new_module = Rc::new(Module::new(BlockParentLink(Rc::downgrade(parent), block_id),\n-                                                 None,\n-                                                 false,\n-                                                 false));\n+            let parent_link = BlockParentLink(Rc::downgrade(parent), block_id);\n+            let new_module = Module::new(parent_link, None, false, false);\n             parent.anonymous_children.borrow_mut().insert(block_id, new_module.clone());\n             new_module\n         } else {\n@@ -604,12 +600,8 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                            final_ident,\n                            is_public);\n                     let parent_link = self.get_parent_link(new_parent, name);\n-\n-                    child_name_bindings.define_module(parent_link,\n-                                                      Some(def),\n-                                                      true,\n-                                                      is_public,\n-                                                      DUMMY_SP);\n+                    let module = Module::new(parent_link, Some(def), true, is_public);\n+                    child_name_bindings.define_module(module, DUMMY_SP);\n                 }\n             }\n             _ => {}\n@@ -681,11 +673,8 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n \n                 // Define a module if necessary.\n                 let parent_link = self.get_parent_link(new_parent, name);\n-                child_name_bindings.define_module(parent_link,\n-                                                  Some(def),\n-                                                  true,\n-                                                  is_public,\n-                                                  DUMMY_SP)\n+                let module = Module::new(parent_link, Some(def), true, is_public);\n+                child_name_bindings.define_module(module, DUMMY_SP);\n             }\n             DefTy(..) | DefAssociatedTy(..) => {\n                 debug!(\"(building reduced graph for external crate) building type {}\","}, {"sha": "e9d714c5524e0d7f7a7d96307d4142b47133a302", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 32, "deletions": 53, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/6a6e1dba55388bdf252e79eec2f084a45e0e862f/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a6e1dba55388bdf252e79eec2f084a45e0e862f/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=6a6e1dba55388bdf252e79eec2f084a45e0e862f", "patch": "@@ -813,8 +813,8 @@ impl Module {\n            def: Option<Def>,\n            external: bool,\n            is_public: bool)\n-           -> Module {\n-        Module {\n+           -> Rc<Module> {\n+        Rc::new(Module {\n             parent_link: parent_link,\n             def: Cell::new(def),\n             is_public: is_public,\n@@ -828,7 +828,7 @@ impl Module {\n             pub_glob_count: Cell::new(0),\n             resolved_import_count: Cell::new(0),\n             populated: Cell::new(!external),\n-        }\n+        })\n     }\n \n     fn def_id(&self) -> Option<DefId> {\n@@ -971,19 +971,27 @@ impl NameBinding {\n         }\n     }\n \n-    fn and_then<T, F: Fn(&NsDef) -> Option<T>>(&self, f: F) -> Option<T> {\n-        self.borrow().as_ref().and_then(f)\n+    fn borrow(&self) -> ::std::cell::Ref<Option<NsDef>> {\n+        self.0.borrow()\n     }\n \n-    fn borrow(&self) -> ::std::cell::Ref<Option<NsDef>> { self.0.borrow() }\n-\n     // Lifted versions of the NsDef methods and fields\n-    fn def(&self) -> Option<Def>           { self.and_then(NsDef::def) }\n-    fn module(&self) -> Option<Rc<Module>> { self.and_then(NsDef::module) }\n-    fn span(&self) -> Option<Span>         { self.and_then(|def| def.span) }\n-    fn modifiers(&self) -> Option<DefModifiers> { self.and_then(|def| Some(def.modifiers)) }\n+    fn def(&self) -> Option<Def> {\n+        self.borrow().as_ref().and_then(NsDef::def)\n+    }\n+    fn module(&self) -> Option<Rc<Module>> {\n+        self.borrow().as_ref().and_then(NsDef::module)\n+    }\n+    fn span(&self) -> Option<Span> {\n+        self.borrow().as_ref().and_then(|def| def.span)\n+    }\n+    fn modifiers(&self) -> Option<DefModifiers> {\n+        self.borrow().as_ref().and_then(|def| Some(def.modifiers))\n+    }\n \n-    fn defined(&self) -> bool { self.borrow().is_some() }\n+    fn defined(&self) -> bool {\n+        self.borrow().is_some()\n+    }\n \n     fn defined_with(&self, modifiers: DefModifiers) -> bool {\n         self.modifiers().map(|m| m.contains(modifiers)).unwrap_or(false)\n@@ -1030,14 +1038,8 @@ impl NameBindings {\n     }\n \n     /// Creates a new module in this set of name bindings.\n-    fn define_module(&self,\n-                     parent_link: ParentLink,\n-                     def: Option<Def>,\n-                     external: bool,\n-                     is_public: bool,\n-                     sp: Span) {\n-        let module = Module::new(parent_link, def, external, is_public);\n-        self.type_ns.set(NsDef::create_from_module(Rc::new(module), Some(sp)));\n+    fn define_module(&self, module: Rc<Module>, sp: Span) {\n+        self.type_ns.set(NsDef::create_from_module(module, Some(sp)));\n     }\n \n     /// Records a type definition.\n@@ -1051,20 +1053,6 @@ impl NameBindings {\n         debug!(\"defining value for def {:?} with modifiers {:?}\", def, modifiers);\n         self.value_ns.set(NsDef::create_from_def(def, modifiers, Some(sp)));\n     }\n-\n-    /// Returns the module node if applicable.\n-    fn get_module_if_available(&self) -> Option<Rc<Module>> { self.type_ns.module() }\n-\n-    /// Returns the module node. Panics if this node does not have a module\n-    /// definition.\n-    fn get_module(&self) -> Rc<Module> {\n-        match self.get_module_if_available() {\n-            None => {\n-                panic!(\"get_module called on a node with no module definition!\")\n-            }\n-            Some(module_def) => module_def,\n-        }\n-    }\n }\n \n /// Interns the names of the primitive types.\n@@ -1106,7 +1094,7 @@ pub struct Resolver<'a, 'tcx: 'a> {\n \n     ast_map: &'a hir_map::Map<'tcx>,\n \n-    graph_root: NameBindings,\n+    graph_root: Rc<Module>,\n \n     trait_item_map: FnvHashMap<(Name, DefId), DefId>,\n \n@@ -1173,19 +1161,10 @@ enum FallbackChecks {\n impl<'a, 'tcx> Resolver<'a, 'tcx> {\n     fn new(session: &'a Session,\n            ast_map: &'a hir_map::Map<'tcx>,\n-           crate_span: Span,\n            make_glob_map: MakeGlobMap)\n            -> Resolver<'a, 'tcx> {\n-        let graph_root = NameBindings::new();\n-\n         let root_def_id = ast_map.local_def_id(CRATE_NODE_ID);\n-        graph_root.define_module(NoParentLink,\n-                                 Some(DefMod(root_def_id)),\n-                                 false,\n-                                 true,\n-                                 crate_span);\n-\n-        let current_module = graph_root.get_module();\n+        let graph_root = Module::new(NoParentLink, Some(DefMod(root_def_id)), false, true);\n \n         Resolver {\n             session: session,\n@@ -1194,14 +1173,14 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n \n             // The outermost module has def ID 0; this is not reflected in the\n             // AST.\n-            graph_root: graph_root,\n+            graph_root: graph_root.clone(),\n \n             trait_item_map: FnvHashMap(),\n             structs: FnvHashMap(),\n \n             unresolved_imports: 0,\n \n-            current_module: current_module,\n+            current_module: graph_root,\n             value_ribs: Vec::new(),\n             type_ribs: Vec::new(),\n             label_ribs: Vec::new(),\n@@ -1441,7 +1420,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                     DontUseLexicalScope => {\n                         // This is a crate-relative path. We will start the\n                         // resolution process at index zero.\n-                        search_module = self.graph_root.get_module();\n+                        search_module = self.graph_root.clone();\n                         start_index = 0;\n                         last_private = LastMod(AllPublic);\n                     }\n@@ -1792,7 +1771,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         build_reduced_graph::populate_module_if_necessary(self, &module_);\n \n         for (_, child_node) in module_.children.borrow().iter() {\n-            match child_node.get_module_if_available() {\n+            match child_node.type_ns.module() {\n                 None => {\n                     // Continue.\n                 }\n@@ -1845,7 +1824,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                                module_to_string(&*orig_module));\n                     }\n                     Some(name_bindings) => {\n-                        match (*name_bindings).get_module_if_available() {\n+                        match name_bindings.type_ns.module() {\n                             None => {\n                                 debug!(\"!!! (with scope) didn't find module for `{}` in `{}`\",\n                                        name,\n@@ -3115,7 +3094,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                                   .map(|ps| ps.identifier.name)\n                                   .collect::<Vec<_>>();\n \n-        let root_module = self.graph_root.get_module();\n+        let root_module = self.graph_root.clone();\n \n         let containing_module;\n         let last_private;\n@@ -3278,7 +3257,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                     Some(_) => None,\n                     None => {\n                         match this.current_module.children.borrow().get(last_name) {\n-                            Some(child) => child.get_module_if_available(),\n+                            Some(child) => child.type_ns.module(),\n                             None => None,\n                         }\n                     }\n@@ -3883,7 +3862,7 @@ pub fn create_resolver<'a, 'tcx>(session: &'a Session,\n                                  make_glob_map: MakeGlobMap,\n                                  callback: Option<Box<Fn(hir_map::Node, &mut bool) -> bool>>)\n                                  -> Resolver<'a, 'tcx> {\n-    let mut resolver = Resolver::new(session, ast_map, krate.span, make_glob_map);\n+    let mut resolver = Resolver::new(session, ast_map, make_glob_map);\n \n     resolver.callback = callback;\n "}, {"sha": "3a6a5a031b6a1666aba2b809360fdf219e4b94a8", "filename": "src/librustc_resolve/record_exports.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a6e1dba55388bdf252e79eec2f084a45e0e862f/src%2Flibrustc_resolve%2Frecord_exports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a6e1dba55388bdf252e79eec2f084a45e0e862f/src%2Flibrustc_resolve%2Frecord_exports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Frecord_exports.rs?ref=6a6e1dba55388bdf252e79eec2f084a45e0e862f", "patch": "@@ -79,7 +79,7 @@ impl<'a, 'b, 'tcx> ExportRecorder<'a, 'b, 'tcx> {\n         build_reduced_graph::populate_module_if_necessary(self.resolver, &module_);\n \n         for (_, child_name_bindings) in module_.children.borrow().iter() {\n-            match child_name_bindings.get_module_if_available() {\n+            match child_name_bindings.type_ns.module() {\n                 None => {\n                     // Nothing to do.\n                 }\n@@ -149,6 +149,6 @@ impl<'a, 'b, 'tcx> ExportRecorder<'a, 'b, 'tcx> {\n \n pub fn record(resolver: &mut Resolver) {\n     let mut recorder = ExportRecorder { resolver: resolver };\n-    let root_module = recorder.graph_root.get_module();\n+    let root_module = recorder.graph_root.clone();\n     recorder.record_exports_for_module_subtree(root_module);\n }"}, {"sha": "4f67d6e2f7e799c9806f61025df120b66456253a", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a6e1dba55388bdf252e79eec2f084a45e0e862f/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a6e1dba55388bdf252e79eec2f084a45e0e862f/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=6a6e1dba55388bdf252e79eec2f084a45e0e862f", "patch": "@@ -209,7 +209,7 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n                    i,\n                    self.resolver.unresolved_imports);\n \n-            let module_root = self.resolver.graph_root.get_module();\n+            let module_root = self.resolver.graph_root.clone();\n             let errors = self.resolve_imports_for_module_subtree(module_root.clone());\n \n             if self.resolver.unresolved_imports == 0 {\n@@ -254,7 +254,7 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n \n         build_reduced_graph::populate_module_if_necessary(self.resolver, &module_);\n         for (_, child_node) in module_.children.borrow().iter() {\n-            match child_node.get_module_if_available() {\n+            match child_node.type_ns.module() {\n                 None => {\n                     // Nothing to do.\n                 }\n@@ -337,7 +337,7 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n         // First, resolve the module path for the directive, if necessary.\n         let container = if module_path.is_empty() {\n             // Use the crate root.\n-            Some((self.resolver.graph_root.get_module(), LastMod(AllPublic)))\n+            Some((self.resolver.graph_root.clone(), LastMod(AllPublic)))\n         } else {\n             match self.resolver.resolve_module_path(module_.clone(),\n                                                     &module_path[..],"}]}