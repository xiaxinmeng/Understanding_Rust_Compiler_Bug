{"sha": "20dd5e09fdeec25a7a6206e95ea8706e20ab8a01", "node_id": "C_kwDOAAsO6NoAKDIwZGQ1ZTA5ZmRlZWMyNWE3YTYyMDZlOTVlYTg3MDZlMjBhYjhhMDE", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-01-29T13:00:32Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-02-02T23:09:51Z"}, "message": "Codegen SetDiscriminant after field assignment.\n\nThis matches the order in which deaggregation was performed.", "tree": {"sha": "b3af14d5df2d01c39173386fd5873e8fdf33b0f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3af14d5df2d01c39173386fd5873e8fdf33b0f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20dd5e09fdeec25a7a6206e95ea8706e20ab8a01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20dd5e09fdeec25a7a6206e95ea8706e20ab8a01", "html_url": "https://github.com/rust-lang/rust/commit/20dd5e09fdeec25a7a6206e95ea8706e20ab8a01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20dd5e09fdeec25a7a6206e95ea8706e20ab8a01/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "feccf469fbeb96c97d3b6a5f3186867afe0571f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/feccf469fbeb96c97d3b6a5f3186867afe0571f5", "html_url": "https://github.com/rust-lang/rust/commit/feccf469fbeb96c97d3b6a5f3186867afe0571f5"}], "stats": {"total": 26, "additions": 11, "deletions": 15}, "files": [{"sha": "35948e50f48d0da28aa8e27f53936be7160df860", "filename": "compiler/rustc_codegen_ssa/src/mir/rvalue.rs", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/20dd5e09fdeec25a7a6206e95ea8706e20ab8a01/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20dd5e09fdeec25a7a6206e95ea8706e20ab8a01/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs?ref=20dd5e09fdeec25a7a6206e95ea8706e20ab8a01", "patch": "@@ -107,35 +107,31 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             }\n \n             mir::Rvalue::Aggregate(ref kind, ref operands) => {\n-                let (dest, active_field_index) = match **kind {\n-                    mir::AggregateKind::Adt(adt_did, variant_index, _, _, active_field_index) => {\n-                        dest.codegen_set_discr(bx, variant_index);\n-                        if bx.tcx().adt_def(adt_did).is_enum() {\n-                            (dest.project_downcast(bx, variant_index), active_field_index)\n-                        } else {\n-                            (dest, active_field_index)\n-                        }\n+                let (variant_index, variant_dest, active_field_index) = match **kind {\n+                    mir::AggregateKind::Adt(_, variant_index, _, _, active_field_index) => {\n+                        let variant_dest = dest.project_downcast(bx, variant_index);\n+                        (variant_index, variant_dest, active_field_index)\n                     }\n-                    mir::AggregateKind::Generator(..) => {\n-                        dest.codegen_set_discr(bx, VariantIdx::from_u32(0));\n-                        (dest, None)\n-                    }\n-                    _ => (dest, None),\n+                    _ => (VariantIdx::from_u32(0), dest, None),\n                 };\n+                if active_field_index.is_some() {\n+                    assert_eq!(operands.len(), 1);\n+                }\n                 for (i, operand) in operands.iter().enumerate() {\n                     let op = self.codegen_operand(bx, operand);\n                     // Do not generate stores and GEPis for zero-sized fields.\n                     if !op.layout.is_zst() {\n                         let field_index = active_field_index.unwrap_or(i);\n                         let field = if let mir::AggregateKind::Array(_) = **kind {\n                             let llindex = bx.cx().const_usize(field_index as u64);\n-                            dest.project_index(bx, llindex)\n+                            variant_dest.project_index(bx, llindex)\n                         } else {\n-                            dest.project_field(bx, field_index)\n+                            variant_dest.project_field(bx, field_index)\n                         };\n                         op.val.store(bx, field);\n                     }\n                 }\n+                dest.codegen_set_discr(bx, variant_index);\n             }\n \n             _ => {"}]}