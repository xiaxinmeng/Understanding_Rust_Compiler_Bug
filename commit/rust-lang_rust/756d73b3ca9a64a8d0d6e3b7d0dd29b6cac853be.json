{"sha": "756d73b3ca9a64a8d0d6e3b7d0dd29b6cac853be", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1NmQ3M2IzY2E5YTY0YThkMGQ2ZTNiN2QwZGQyOWI2Y2FjODUzYmU=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-07-01T03:30:03Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-07-01T03:30:03Z"}, "message": "Remove filling drop to prep for elaborated drops.", "tree": {"sha": "94d89b875a497add80738b667e75681dde8652e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94d89b875a497add80738b667e75681dde8652e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/756d73b3ca9a64a8d0d6e3b7d0dd29b6cac853be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/756d73b3ca9a64a8d0d6e3b7d0dd29b6cac853be", "html_url": "https://github.com/rust-lang/rust/commit/756d73b3ca9a64a8d0d6e3b7d0dd29b6cac853be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/756d73b3ca9a64a8d0d6e3b7d0dd29b6cac853be/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "339e703e0bbc55fe2ec4e1362a87a7e38cd54745", "url": "https://api.github.com/repos/rust-lang/rust/commits/339e703e0bbc55fe2ec4e1362a87a7e38cd54745", "html_url": "https://github.com/rust-lang/rust/commit/339e703e0bbc55fe2ec4e1362a87a7e38cd54745"}], "stats": {"total": 46, "additions": 8, "deletions": 38}, "files": [{"sha": "dd352cc241088191c550b1b46d39e8d4f57d8747", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/756d73b3ca9a64a8d0d6e3b7d0dd29b6cac853be/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/756d73b3ca9a64a8d0d6e3b7d0dd29b6cac853be/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=756d73b3ca9a64a8d0d6e3b7d0dd29b6cac853be", "patch": "@@ -820,9 +820,6 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n     fn move_(&mut self, src: Pointer, dest: Pointer, ty: Ty<'tcx>) -> EvalResult<'tcx, ()> {\n         let size = self.type_size(ty);\n         self.memory.copy(src, dest, size)?;\n-        if self.type_needs_drop(ty) {\n-            self.memory.drop_fill(src, size)?;\n-        }\n         Ok(())\n     }\n "}, {"sha": "a9bb1fa5317e8eb0c11d1b77a5f247dd9b737ba1", "filename": "src/interpreter/terminator.rs", "status": "modified", "additions": 7, "deletions": 29, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/756d73b3ca9a64a8d0d6e3b7d0dd29b6cac853be/src%2Finterpreter%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/756d73b3ca9a64a8d0d6e3b7d0dd29b6cac853be/src%2Finterpreter%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fterminator.rs?ref=756d73b3ca9a64a8d0d6e3b7d0dd29b6cac853be", "patch": "@@ -6,7 +6,7 @@ use rustc::ty::layout::Layout;\n use rustc::ty::subst::{self, Substs};\n use rustc::ty::{self, Ty, TyCtxt, BareFnTy};\n use std::rc::Rc;\n-use std::{iter, mem};\n+use std::iter;\n use syntax::{ast, attr};\n use syntax::codemap::{DUMMY_SP, Span};\n \n@@ -303,11 +303,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 self.memory.write_uint(dest, discr_val, 8)?;\n             }\n \n-            \"forget\" => {\n-                let arg_ty = *substs.types.get(subst::FnSpace, 0);\n-                let arg_size = self.type_size(arg_ty);\n-                self.memory.drop_fill(args_ptrs[0], arg_size)?;\n-            }\n+            \"forget\" => {}\n \n             \"init\" => self.memory.write_repeat(dest, 0, dest_layout.size(&self.tcx.data_layout).bytes() as usize)?,\n \n@@ -549,35 +545,17 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         // TODO(solson): Call user-defined Drop::drop impls.\n \n         match ty.sty {\n-            ty::TyBox(contents_ty) => {\n-                match self.memory.read_ptr(ptr) {\n-                    Ok(contents_ptr) => {\n-                        self.drop(contents_ptr, contents_ty)?;\n-                        trace!(\"-deallocating box\");\n-                        self.memory.deallocate(contents_ptr)?;\n-                    }\n-                    Err(EvalError::ReadBytesAsPointer) => {\n-                        let size = self.memory.pointer_size();\n-                        let possible_drop_fill = self.memory.read_bytes(ptr, size)?;\n-                        if possible_drop_fill.iter().all(|&b| b == mem::POST_DROP_U8) {\n-                            return Ok(());\n-                        } else {\n-                            return Err(EvalError::ReadBytesAsPointer);\n-                        }\n-                    }\n-                    Err(e) => return Err(e),\n-                }\n+            ty::TyBox(_contents_ty) => {\n+                let contents_ptr = self.memory.read_ptr(ptr)?;\n+                // self.drop(contents_ptr, contents_ty)?;\n+                trace!(\"-deallocating box\");\n+                self.memory.deallocate(contents_ptr)?;\n             }\n \n             // TODO(solson): Implement drop for other relevant types (e.g. aggregates).\n             _ => {}\n         }\n \n-        // Filling drop.\n-        // FIXME(solson): Trait objects (with no static size) probably get filled, too.\n-        let size = self.type_size(ty);\n-        self.memory.drop_fill(ptr, size)?;\n-\n         Ok(())\n     }\n }"}, {"sha": "83a1aeec68b1b77e54f344b40333efaeeccf06e8", "filename": "src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/756d73b3ca9a64a8d0d6e3b7d0dd29b6cac853be/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/756d73b3ca9a64a8d0d6e3b7d0dd29b6cac853be/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=756d73b3ca9a64a8d0d6e3b7d0dd29b6cac853be", "patch": "@@ -2,7 +2,6 @@\n     btree_range,\n     collections,\n     collections_bound,\n-    filling_drop,\n     question_mark,\n     rustc_private,\n     pub_restricted,"}, {"sha": "64c105a4e7f9634a23a87de26f5db0e219e65c3b", "filename": "src/memory.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/756d73b3ca9a64a8d0d6e3b7d0dd29b6cac853be/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/756d73b3ca9a64a8d0d6e3b7d0dd29b6cac853be/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=756d73b3ca9a64a8d0d6e3b7d0dd29b6cac853be", "patch": "@@ -1,7 +1,7 @@\n use byteorder::{ReadBytesExt, WriteBytesExt, LittleEndian, BigEndian, self};\n use std::collections::Bound::{Included, Excluded};\n use std::collections::{btree_map, BTreeMap, HashMap, HashSet, VecDeque};\n-use std::{fmt, iter, mem, ptr};\n+use std::{fmt, iter, ptr};\n \n use rustc::hir::def_id::DefId;\n use rustc::ty::BareFnTy;\n@@ -340,10 +340,6 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n         Ok(())\n     }\n \n-    pub fn drop_fill(&mut self, ptr: Pointer, size: usize) -> EvalResult<'tcx, ()> {\n-        self.write_repeat(ptr, mem::POST_DROP_U8, size)\n-    }\n-\n     pub fn read_ptr(&self, ptr: Pointer) -> EvalResult<'tcx, Pointer> {\n         let size = self.pointer_size();\n         self.check_defined(ptr, size)?;"}]}