{"sha": "b38b026a989aebbca3df2346f47f449c96eeda7a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzOGIwMjZhOTg5YWViYmNhM2RmMjM0NmY0N2Y0NDljOTZlZWRhN2E=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-23T06:16:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-23T06:16:37Z"}, "message": "Auto merge of #4823 - Areredify:must_use_res, r=flip1995\n\nAdd `let_underscore_must_use` lint\n\nchangelog: closes #4812 , added a new `let_underscore_must_use` lint, moved `is_must_use_ty` to utils, added `is_must_use_fn` util function", "tree": {"sha": "150b47e7ff01454d8c4a44318853e5f3d45cc9bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/150b47e7ff01454d8c4a44318853e5f3d45cc9bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b38b026a989aebbca3df2346f47f449c96eeda7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b38b026a989aebbca3df2346f47f449c96eeda7a", "html_url": "https://github.com/rust-lang/rust/commit/b38b026a989aebbca3df2346f47f449c96eeda7a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b38b026a989aebbca3df2346f47f449c96eeda7a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40881e771373677ffd85596526e8870ba59ad384", "url": "https://api.github.com/repos/rust-lang/rust/commits/40881e771373677ffd85596526e8870ba59ad384", "html_url": "https://github.com/rust-lang/rust/commit/40881e771373677ffd85596526e8870ba59ad384"}, {"sha": "a310cb2d0b708a46fda5c4b6f91a3221c25842c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/a310cb2d0b708a46fda5c4b6f91a3221c25842c6", "html_url": "https://github.com/rust-lang/rust/commit/a310cb2d0b708a46fda5c4b6f91a3221c25842c6"}], "stats": {"total": 380, "additions": 331, "deletions": 49}, "files": [{"sha": "e485c2c979e676d253c9a86359c085dbc26d1258", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b38b026a989aebbca3df2346f47f449c96eeda7a/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/b38b026a989aebbca3df2346f47f449c96eeda7a/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=b38b026a989aebbca3df2346f47f449c96eeda7a", "patch": "@@ -1064,6 +1064,7 @@ Released 2018-09-13\n [`len_without_is_empty`]: https://rust-lang.github.io/rust-clippy/master/index.html#len_without_is_empty\n [`len_zero`]: https://rust-lang.github.io/rust-clippy/master/index.html#len_zero\n [`let_and_return`]: https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return\n+[`let_underscore_must_use`]: https://rust-lang.github.io/rust-clippy/master/index.html#let_underscore_must_use\n [`let_unit_value`]: https://rust-lang.github.io/rust-clippy/master/index.html#let_unit_value\n [`linkedlist`]: https://rust-lang.github.io/rust-clippy/master/index.html#linkedlist\n [`logic_bug`]: https://rust-lang.github.io/rust-clippy/master/index.html#logic_bug"}, {"sha": "46fbc9dc9a4618bb1c031b04db8263012c3c765f", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b38b026a989aebbca3df2346f47f449c96eeda7a/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/b38b026a989aebbca3df2346f47f449c96eeda7a/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=b38b026a989aebbca3df2346f47f449c96eeda7a", "patch": "@@ -6,7 +6,7 @@\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 339 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n+[There are 340 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "de14f2327db72936b420f60498834cc3660b6f12", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 3, "deletions": 46, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/b38b026a989aebbca3df2346f47f449c96eeda7a/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b38b026a989aebbca3df2346f47f449c96eeda7a/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=b38b026a989aebbca3df2346f47f449c96eeda7a", "patch": "@@ -1,6 +1,7 @@\n use crate::utils::{\n-    attrs::is_proc_macro, iter_input_pats, match_def_path, qpath_res, return_ty, snippet, snippet_opt,\n-    span_help_and_lint, span_lint, span_lint_and_then, trait_ref_of_method, type_is_unsafe_function,\n+    attrs::is_proc_macro, is_must_use_ty, iter_input_pats, match_def_path, must_use_attr, qpath_res, return_ty,\n+    snippet, snippet_opt, span_help_and_lint, span_lint, span_lint_and_then, trait_ref_of_method,\n+    type_is_unsafe_function,\n };\n use matches::matches;\n use rustc::hir::{self, def::Res, def_id::DefId, intravisit};\n@@ -466,15 +467,6 @@ fn check_must_use_candidate<'a, 'tcx>(\n     });\n }\n \n-fn must_use_attr(attrs: &[Attribute]) -> Option<&Attribute> {\n-    attrs.iter().find(|attr| {\n-        attr.ident().map_or(false, |ident| {\n-            let ident: &str = &ident.as_str();\n-            \"must_use\" == ident\n-        })\n-    })\n-}\n-\n fn returns_unit(decl: &hir::FnDecl) -> bool {\n     match decl.output {\n         hir::FunctionRetTy::DefaultReturn(_) => true,\n@@ -486,41 +478,6 @@ fn returns_unit(decl: &hir::FnDecl) -> bool {\n     }\n }\n \n-fn is_must_use_ty<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: Ty<'tcx>) -> bool {\n-    use ty::TyKind::*;\n-    match ty.kind {\n-        Adt(ref adt, _) => must_use_attr(&cx.tcx.get_attrs(adt.did)).is_some(),\n-        Foreign(ref did) => must_use_attr(&cx.tcx.get_attrs(*did)).is_some(),\n-        Slice(ref ty) | Array(ref ty, _) | RawPtr(ty::TypeAndMut { ref ty, .. }) | Ref(_, ref ty, _) => {\n-            // for the Array case we don't need to care for the len == 0 case\n-            // because we don't want to lint functions returning empty arrays\n-            is_must_use_ty(cx, *ty)\n-        },\n-        Tuple(ref substs) => substs.types().any(|ty| is_must_use_ty(cx, ty)),\n-        Opaque(ref def_id, _) => {\n-            for (predicate, _) in cx.tcx.predicates_of(*def_id).predicates {\n-                if let ty::Predicate::Trait(ref poly_trait_predicate) = predicate {\n-                    if must_use_attr(&cx.tcx.get_attrs(poly_trait_predicate.skip_binder().trait_ref.def_id)).is_some() {\n-                        return true;\n-                    }\n-                }\n-            }\n-            false\n-        },\n-        Dynamic(binder, _) => {\n-            for predicate in binder.skip_binder().iter() {\n-                if let ty::ExistentialPredicate::Trait(ref trait_ref) = predicate {\n-                    if must_use_attr(&cx.tcx.get_attrs(trait_ref.def_id)).is_some() {\n-                        return true;\n-                    }\n-                }\n-            }\n-            false\n-        },\n-        _ => false,\n-    }\n-}\n-\n fn has_mutable_arg(cx: &LateContext<'_, '_>, body: &hir::Body<'_>) -> bool {\n     let mut tys = FxHashSet::default();\n     body.params.iter().any(|param| is_mutable_pat(cx, &param.pat, &mut tys))"}, {"sha": "2b59b7c6b4aa33c096ca39d5794e9de7ed9d52b4", "filename": "clippy_lints/src/let_underscore.rs", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/b38b026a989aebbca3df2346f47f449c96eeda7a/clippy_lints%2Fsrc%2Flet_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b38b026a989aebbca3df2346f47f449c96eeda7a/clippy_lints%2Fsrc%2Flet_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_underscore.rs?ref=b38b026a989aebbca3df2346f47f449c96eeda7a", "patch": "@@ -0,0 +1,62 @@\n+use if_chain::if_chain;\n+use rustc::declare_lint_pass;\n+use rustc::hir::*;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc_session::declare_tool_lint;\n+\n+use crate::utils::{is_must_use_func_call, is_must_use_ty, span_help_and_lint};\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for `let _ = <expr>`\n+    /// where expr is #[must_use]\n+    ///\n+    /// **Why is this bad?** It's better to explicitly\n+    /// handle the value of a #[must_use] expr\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    /// ```rust\n+    /// fn f() -> Result<u32, u32> {\n+    ///     Ok(0)\n+    /// }\n+    ///\n+    /// let _ = f();\n+    /// // is_ok() is marked #[must_use]\n+    /// let _ = f().is_ok();\n+    /// ```\n+    pub LET_UNDERSCORE_MUST_USE,\n+    restriction,\n+    \"non-binding let on a #[must_use] expression\"\n+}\n+\n+declare_lint_pass!(LetUnderscore => [LET_UNDERSCORE_MUST_USE]);\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LetUnderscore {\n+    fn check_stmt(&mut self, cx: &LateContext<'_, '_>, stmt: &Stmt) {\n+        if_chain! {\n+            if let StmtKind::Local(ref local) = stmt.kind;\n+            if let PatKind::Wild = local.pat.kind;\n+            if let Some(ref init) = local.init;\n+            then {\n+                if is_must_use_ty(cx, cx.tables.expr_ty(init)) {\n+                   span_help_and_lint(\n+                        cx,\n+                        LET_UNDERSCORE_MUST_USE,\n+                        stmt.span,\n+                        \"non-binding let on an expression with #[must_use] type\",\n+                        \"consider explicitly using expression value\"\n+                    )\n+                } else if is_must_use_func_call(cx, init) {\n+                    span_help_and_lint(\n+                        cx,\n+                        LET_UNDERSCORE_MUST_USE,\n+                        stmt.span,\n+                        \"non-binding let on a result of a #[must_use] function\",\n+                        \"consider explicitly using function result\"\n+                    )\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "2e5ce50bf34ac911da4c9197b7e52e2b13d3b2f9", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b38b026a989aebbca3df2346f47f449c96eeda7a/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b38b026a989aebbca3df2346f47f449c96eeda7a/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=b38b026a989aebbca3df2346f47f449c96eeda7a", "patch": "@@ -220,6 +220,7 @@ pub mod large_enum_variant;\n pub mod large_stack_arrays;\n pub mod len_zero;\n pub mod let_if_seq;\n+pub mod let_underscore;\n pub mod lifetimes;\n pub mod literal_representation;\n pub mod loops;\n@@ -555,6 +556,7 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n         &len_zero::LEN_WITHOUT_IS_EMPTY,\n         &len_zero::LEN_ZERO,\n         &let_if_seq::USELESS_LET_IF_SEQ,\n+        &let_underscore::LET_UNDERSCORE_MUST_USE,\n         &lifetimes::EXTRA_UNUSED_LIFETIMES,\n         &lifetimes::NEEDLESS_LIFETIMES,\n         &literal_representation::DECIMAL_LITERAL_REPRESENTATION,\n@@ -970,6 +972,7 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n     store.register_late_pass(move || box large_stack_arrays::LargeStackArrays::new(array_size_threshold));\n     store.register_early_pass(|| box as_conversions::AsConversions);\n     store.register_early_pass(|| box utils::internal_lints::ProduceIce);\n+    store.register_late_pass(|| box let_underscore::LetUnderscore);\n \n     store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n         LintId::of(&arithmetic::FLOAT_ARITHMETIC),\n@@ -982,6 +985,7 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n         LintId::of(&indexing_slicing::INDEXING_SLICING),\n         LintId::of(&inherent_impl::MULTIPLE_INHERENT_IMPL),\n         LintId::of(&integer_division::INTEGER_DIVISION),\n+        LintId::of(&let_underscore::LET_UNDERSCORE_MUST_USE),\n         LintId::of(&literal_representation::DECIMAL_LITERAL_REPRESENTATION),\n         LintId::of(&matches::WILDCARD_ENUM_MATCH_ARM),\n         LintId::of(&mem_forget::MEM_FORGET),"}, {"sha": "ba8ef2bb0f33673d83c1e531913e5de7602634f8", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 69, "deletions": 1, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/b38b026a989aebbca3df2346f47f449c96eeda7a/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b38b026a989aebbca3df2346f47f449c96eeda7a/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=b38b026a989aebbca3df2346f47f449c96eeda7a", "patch": "@@ -41,7 +41,7 @@ use rustc::ty::{\n };\n use rustc_errors::Applicability;\n use smallvec::SmallVec;\n-use syntax::ast::{self, LitKind};\n+use syntax::ast::{self, Attribute, LitKind};\n use syntax::attr;\n use syntax::source_map::{Span, DUMMY_SP};\n use syntax::symbol::{kw, Symbol};\n@@ -1233,3 +1233,71 @@ pub fn parent_node_is_if_expr<'a, 'b>(expr: &Expr, cx: &LateContext<'a, 'b>) ->\n         _ => false,\n     }\n }\n+\n+pub fn must_use_attr(attrs: &[Attribute]) -> Option<&Attribute> {\n+    attrs.iter().find(|attr| {\n+        attr.ident().map_or(false, |ident| {\n+            let ident: &str = &ident.as_str();\n+            \"must_use\" == ident\n+        })\n+    })\n+}\n+\n+// Returns whether the type has #[must_use] attribute\n+pub fn is_must_use_ty<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: Ty<'tcx>) -> bool {\n+    use ty::TyKind::*;\n+    match ty.kind {\n+        Adt(ref adt, _) => must_use_attr(&cx.tcx.get_attrs(adt.did)).is_some(),\n+        Foreign(ref did) => must_use_attr(&cx.tcx.get_attrs(*did)).is_some(),\n+        Slice(ref ty) | Array(ref ty, _) | RawPtr(ty::TypeAndMut { ref ty, .. }) | Ref(_, ref ty, _) => {\n+            // for the Array case we don't need to care for the len == 0 case\n+            // because we don't want to lint functions returning empty arrays\n+            is_must_use_ty(cx, *ty)\n+        },\n+        Tuple(ref substs) => substs.types().any(|ty| is_must_use_ty(cx, ty)),\n+        Opaque(ref def_id, _) => {\n+            for (predicate, _) in cx.tcx.predicates_of(*def_id).predicates {\n+                if let ty::Predicate::Trait(ref poly_trait_predicate) = predicate {\n+                    if must_use_attr(&cx.tcx.get_attrs(poly_trait_predicate.skip_binder().trait_ref.def_id)).is_some() {\n+                        return true;\n+                    }\n+                }\n+            }\n+            false\n+        },\n+        Dynamic(binder, _) => {\n+            for predicate in binder.skip_binder().iter() {\n+                if let ty::ExistentialPredicate::Trait(ref trait_ref) = predicate {\n+                    if must_use_attr(&cx.tcx.get_attrs(trait_ref.def_id)).is_some() {\n+                        return true;\n+                    }\n+                }\n+            }\n+            false\n+        },\n+        _ => false,\n+    }\n+}\n+\n+// check if expr is calling method or function with #[must_use] attribyte\n+pub fn is_must_use_func_call(cx: &LateContext<'_, '_>, expr: &Expr) -> bool {\n+    let did = match expr.kind {\n+        ExprKind::Call(ref path, _) => if_chain! {\n+            if let ExprKind::Path(ref qpath) = path.kind;\n+            if let def::Res::Def(_, did) = cx.tables.qpath_res(qpath, path.hir_id);\n+            then {\n+                Some(did)\n+            } else {\n+                None\n+            }\n+        },\n+        ExprKind::MethodCall(_, _, _) => cx.tables.type_dependent_def_id(expr.hir_id),\n+        _ => None,\n+    };\n+\n+    if let Some(did) = did {\n+        must_use_attr(&cx.tcx.get_attrs(did)).is_some()\n+    } else {\n+        false\n+    }\n+}"}, {"sha": "913e941660e33cf3d863b77bd61f95b09011dcf8", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b38b026a989aebbca3df2346f47f449c96eeda7a/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b38b026a989aebbca3df2346f47f449c96eeda7a/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=b38b026a989aebbca3df2346f47f449c96eeda7a", "patch": "@@ -6,7 +6,7 @@ pub use lint::Lint;\n pub use lint::LINT_LEVELS;\n \n // begin lint list, do not remove this comment, it\u2019s used in `update_lints`\n-pub const ALL_LINTS: [Lint; 339] = [\n+pub const ALL_LINTS: [Lint; 340] = [\n     Lint {\n         name: \"absurd_extreme_comparisons\",\n         group: \"correctness\",\n@@ -938,6 +938,13 @@ pub const ALL_LINTS: [Lint; 339] = [\n         deprecation: None,\n         module: \"returns\",\n     },\n+    Lint {\n+        name: \"let_underscore_must_use\",\n+        group: \"restriction\",\n+        desc: \"non-binding let on a #[must_use] expression\",\n+        deprecation: None,\n+        module: \"let_underscore\",\n+    },\n     Lint {\n         name: \"let_unit_value\",\n         group: \"style\","}, {"sha": "1f0dbcee42adba98f24656d7cf47b10f576a2394", "filename": "tests/ui/let_underscore.rs", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/b38b026a989aebbca3df2346f47f449c96eeda7a/tests%2Fui%2Flet_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b38b026a989aebbca3df2346f47f449c96eeda7a/tests%2Fui%2Flet_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_underscore.rs?ref=b38b026a989aebbca3df2346f47f449c96eeda7a", "patch": "@@ -0,0 +1,84 @@\n+#![warn(clippy::let_underscore_must_use)]\n+\n+#[must_use]\n+fn f() -> u32 {\n+    0\n+}\n+\n+fn g() -> Result<u32, u32> {\n+    Ok(0)\n+}\n+\n+#[must_use]\n+fn l<T>(x: T) -> T {\n+    x\n+}\n+\n+fn h() -> u32 {\n+    0\n+}\n+\n+struct S {}\n+\n+impl S {\n+    #[must_use]\n+    pub fn f(&self) -> u32 {\n+        0\n+    }\n+\n+    pub fn g(&self) -> Result<u32, u32> {\n+        Ok(0)\n+    }\n+\n+    fn k(&self) -> u32 {\n+        0\n+    }\n+\n+    #[must_use]\n+    fn h() -> u32 {\n+        0\n+    }\n+\n+    fn p() -> Result<u32, u32> {\n+        Ok(0)\n+    }\n+}\n+\n+trait Trait {\n+    #[must_use]\n+    fn a() -> u32;\n+}\n+\n+impl Trait for S {\n+    fn a() -> u32 {\n+        0\n+    }\n+}\n+\n+fn main() {\n+    let _ = f();\n+    let _ = g();\n+    let _ = h();\n+    let _ = l(0_u32);\n+\n+    let s = S {};\n+\n+    let _ = s.f();\n+    let _ = s.g();\n+    let _ = s.k();\n+\n+    let _ = S::h();\n+    let _ = S::p();\n+\n+    let _ = S::a();\n+\n+    let _ = if true { Ok(()) } else { Err(()) };\n+\n+    let a = Result::<(), ()>::Ok(());\n+\n+    let _ = a.is_ok();\n+\n+    let _ = a.map(|_| ());\n+\n+    let _ = a;\n+}"}, {"sha": "da007d3b08357830642fef985e8e98fbf2cd04e0", "filename": "tests/ui/let_underscore.stderr", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/b38b026a989aebbca3df2346f47f449c96eeda7a/tests%2Fui%2Flet_underscore.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b38b026a989aebbca3df2346f47f449c96eeda7a/tests%2Fui%2Flet_underscore.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_underscore.stderr?ref=b38b026a989aebbca3df2346f47f449c96eeda7a", "patch": "@@ -0,0 +1,99 @@\n+error: non-binding let on a result of a #[must_use] function\n+  --> $DIR/let_underscore.rs:59:5\n+   |\n+LL |     let _ = f();\n+   |     ^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::let-underscore-must-use` implied by `-D warnings`\n+   = help: consider explicitly using function result\n+\n+error: non-binding let on an expression with #[must_use] type\n+  --> $DIR/let_underscore.rs:60:5\n+   |\n+LL |     let _ = g();\n+   |     ^^^^^^^^^^^^\n+   |\n+   = help: consider explicitly using expression value\n+\n+error: non-binding let on a result of a #[must_use] function\n+  --> $DIR/let_underscore.rs:62:5\n+   |\n+LL |     let _ = l(0_u32);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider explicitly using function result\n+\n+error: non-binding let on a result of a #[must_use] function\n+  --> $DIR/let_underscore.rs:66:5\n+   |\n+LL |     let _ = s.f();\n+   |     ^^^^^^^^^^^^^^\n+   |\n+   = help: consider explicitly using function result\n+\n+error: non-binding let on an expression with #[must_use] type\n+  --> $DIR/let_underscore.rs:67:5\n+   |\n+LL |     let _ = s.g();\n+   |     ^^^^^^^^^^^^^^\n+   |\n+   = help: consider explicitly using expression value\n+\n+error: non-binding let on a result of a #[must_use] function\n+  --> $DIR/let_underscore.rs:70:5\n+   |\n+LL |     let _ = S::h();\n+   |     ^^^^^^^^^^^^^^^\n+   |\n+   = help: consider explicitly using function result\n+\n+error: non-binding let on an expression with #[must_use] type\n+  --> $DIR/let_underscore.rs:71:5\n+   |\n+LL |     let _ = S::p();\n+   |     ^^^^^^^^^^^^^^^\n+   |\n+   = help: consider explicitly using expression value\n+\n+error: non-binding let on a result of a #[must_use] function\n+  --> $DIR/let_underscore.rs:73:5\n+   |\n+LL |     let _ = S::a();\n+   |     ^^^^^^^^^^^^^^^\n+   |\n+   = help: consider explicitly using function result\n+\n+error: non-binding let on an expression with #[must_use] type\n+  --> $DIR/let_underscore.rs:75:5\n+   |\n+LL |     let _ = if true { Ok(()) } else { Err(()) };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider explicitly using expression value\n+\n+error: non-binding let on a result of a #[must_use] function\n+  --> $DIR/let_underscore.rs:79:5\n+   |\n+LL |     let _ = a.is_ok();\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider explicitly using function result\n+\n+error: non-binding let on an expression with #[must_use] type\n+  --> $DIR/let_underscore.rs:81:5\n+   |\n+LL |     let _ = a.map(|_| ());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider explicitly using expression value\n+\n+error: non-binding let on an expression with #[must_use] type\n+  --> $DIR/let_underscore.rs:83:5\n+   |\n+LL |     let _ = a;\n+   |     ^^^^^^^^^^\n+   |\n+   = help: consider explicitly using expression value\n+\n+error: aborting due to 12 previous errors\n+"}]}