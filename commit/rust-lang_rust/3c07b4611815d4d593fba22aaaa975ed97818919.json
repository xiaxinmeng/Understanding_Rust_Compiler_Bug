{"sha": "3c07b4611815d4d593fba22aaaa975ed97818919", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjMDdiNDYxMTgxNWQ0ZDU5M2ZiYTIyYWFhYTk3NWVkOTc4MTg5MTk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-10-21T21:20:00Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-11-03T09:34:59Z"}, "message": "Pass the mir map to trans", "tree": {"sha": "c985c6e2a124dabfec7bd1272092b217afa0a441", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c985c6e2a124dabfec7bd1272092b217afa0a441"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c07b4611815d4d593fba22aaaa975ed97818919", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c07b4611815d4d593fba22aaaa975ed97818919", "html_url": "https://github.com/rust-lang/rust/commit/3c07b4611815d4d593fba22aaaa975ed97818919", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c07b4611815d4d593fba22aaaa975ed97818919/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15c1da4e27587951a8806b6485a8051103019a02", "url": "https://api.github.com/repos/rust-lang/rust/commits/15c1da4e27587951a8806b6485a8051103019a02", "html_url": "https://github.com/rust-lang/rust/commit/15c1da4e27587951a8806b6485a8051103019a02"}], "stats": {"total": 56, "additions": 38, "deletions": 18}, "files": [{"sha": "2a627a6da2bd6257321214573b36bde19927cc4e", "filename": "mk/crates.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c07b4611815d4d593fba22aaaa975ed97818919/mk%2Fcrates.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3c07b4611815d4d593fba22aaaa975ed97818919/mk%2Fcrates.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcrates.mk?ref=3c07b4611815d4d593fba22aaaa975ed97818919", "patch": "@@ -103,7 +103,7 @@ DEPS_rustc_mir := rustc rustc_front syntax\n DEPS_rustc_resolve := rustc rustc_front log syntax\n DEPS_rustc_platform_intrinsics := rustc rustc_llvm\n DEPS_rustc_privacy := rustc rustc_front log syntax\n-DEPS_rustc_trans := arena flate getopts graphviz libc rustc rustc_back \\\n+DEPS_rustc_trans := arena flate getopts graphviz libc rustc rustc_back rustc_mir \\\n                     log syntax serialize rustc_llvm rustc_front rustc_platform_intrinsics\n DEPS_rustc_typeck := rustc syntax rustc_front rustc_platform_intrinsics\n "}, {"sha": "06708a5127f342ee642e9cbb660a3162b6c09c11", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3c07b4611815d4d593fba22aaaa975ed97818919/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c07b4611815d4d593fba22aaaa975ed97818919/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=3c07b4611815d4d593fba22aaaa975ed97818919", "patch": "@@ -11,6 +11,7 @@\n use rustc::front;\n use rustc::front::map as hir_map;\n use rustc_mir as mir;\n+use rustc_mir::mir_map::MirMap;\n use rustc::session::Session;\n use rustc::session::config::{self, Input, OutputFilenames, OutputType};\n use rustc::session::search_paths::PathKind;\n@@ -22,6 +23,7 @@ use rustc::middle::dependency_format;\n use rustc::middle;\n use rustc::plugin::registry::Registry;\n use rustc::plugin;\n+use rustc::util::nodemap::NodeMap;\n use rustc::util::common::time;\n use rustc_borrowck as borrowck;\n use rustc_resolve as resolve;\n@@ -146,7 +148,7 @@ pub fn compile_input(sess: Session,\n                                     &arenas,\n                                     &id,\n                                     control.make_glob_map,\n-                                    |tcx, analysis| {\n+                                    |tcx, mir_map, analysis| {\n \n             {\n                 let state = CompileState::state_after_analysis(input,\n@@ -170,7 +172,7 @@ pub fn compile_input(sess: Session,\n                 println!(\"Pre-trans\");\n                 tcx.print_debug_stats();\n             }\n-            let trans = phase_4_translate_to_llvm(tcx, analysis);\n+            let trans = phase_4_translate_to_llvm(tcx, &mir_map, analysis);\n \n             if log_enabled!(::log::INFO) {\n                 println!(\"Post-trans\");\n@@ -670,6 +672,7 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n                                                f: F)\n                                                -> R\n                                                where F: for<'a> FnOnce(&'a ty::ctxt<'tcx>,\n+                                                                       MirMap<'tcx>,\n                                                                        ty::CrateAnalysis) -> R\n {\n     let time_passes = sess.time_passes();\n@@ -751,18 +754,18 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n         time(time_passes, \"match checking\", ||\n             middle::check_match::check_crate(tcx));\n \n-        match tcx.sess.opts.unstable_features {\n+        let mir_map = match tcx.sess.opts.unstable_features {\n             UnstableFeatures::Disallow => {\n                 // use this as a shorthand for beta/stable, and skip\n                 // MIR construction there until known regressions are\n                 // addressed\n+                NodeMap()\n             }\n             UnstableFeatures::Allow | UnstableFeatures::Cheat => {\n-                let _mir_map =\n-                    time(time_passes, \"MIR dump\", ||\n-                            mir::mir_map::build_mir_for_crate(tcx));\n+                time(time_passes, \"MIR dump\", ||\n+                     mir::mir_map::build_mir_for_crate(tcx))\n             }\n-        }\n+        };\n \n         time(time_passes, \"liveness checking\", ||\n             middle::liveness::check_crate(tcx));\n@@ -804,7 +807,7 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n         // The above three passes generate errors w/o aborting\n         tcx.sess.abort_if_errors();\n \n-        f(tcx, ty::CrateAnalysis {\n+        f(tcx, mir_map, ty::CrateAnalysis {\n             export_map: export_map,\n             exported_items: exported_items,\n             public_items: public_items,\n@@ -817,16 +820,18 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n \n /// Run the translation phase to LLVM, after which the AST and analysis can\n /// be discarded.\n-pub fn phase_4_translate_to_llvm(tcx: &ty::ctxt, analysis: ty::CrateAnalysis)\n-                                 -> trans::CrateTranslation {\n+pub fn phase_4_translate_to_llvm<'tcx>(tcx: &ty::ctxt<'tcx>,\n+                                       mir_map: &MirMap<'tcx>,\n+                                       analysis: ty::CrateAnalysis)\n+                                       -> trans::CrateTranslation {\n     let time_passes = tcx.sess.time_passes();\n \n     time(time_passes, \"resolving dependency formats\", ||\n          dependency_format::calculate(&tcx.sess));\n \n     // Option dance to work around the lack of stack once closures.\n     time(time_passes, \"translation\", move ||\n-         trans::trans_crate(tcx, analysis))\n+         trans::trans_crate(tcx, mir_map, analysis))\n }\n \n /// Run LLVM itself, producing a bitcode file, assembly file or object file"}, {"sha": "f53822d2400b49eb4af34ba9f81993b08015e44e", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c07b4611815d4d593fba22aaaa975ed97818919/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c07b4611815d4d593fba22aaaa975ed97818919/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=3c07b4611815d4d593fba22aaaa975ed97818919", "patch": "@@ -182,7 +182,7 @@ impl PpSourceMode {\n                                                     arenas,\n                                                     id,\n                                                     resolve::MakeGlobMap::No,\n-                                                    |tcx, _| {\n+                                                    |tcx, _, _| {\n                     let annotation = TypedAnnotation { tcx: tcx };\n                     f(&annotation, payload, &ast_map.forest.krate)\n                 })\n@@ -782,7 +782,7 @@ pub fn pretty_print_input(sess: Session,\n                                                         &arenas,\n                                                         &id,\n                                                         resolve::MakeGlobMap::No,\n-                                                        |tcx, _| {\n+                                                        |tcx, _, _| {\n                         print_flowgraph(variants, tcx, code, mode, out)\n                     })\n                 }"}, {"sha": "bc5b6f6b9d7d989c99db9eafb556a6d3c28cb7da", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c07b4611815d4d593fba22aaaa975ed97818919/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c07b4611815d4d593fba22aaaa975ed97818919/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=3c07b4611815d4d593fba22aaaa975ed97818919", "patch": "@@ -37,6 +37,7 @@\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(rustc_private)]\n+#![feature(slice_patterns)]\n #![feature(staged_api)]\n #![feature(unicode)]\n #![feature(vec_push_all)]\n@@ -52,6 +53,7 @@ extern crate rustc;\n extern crate rustc_back;\n extern crate rustc_front;\n extern crate rustc_llvm as llvm;\n+extern crate rustc_mir;\n extern crate rustc_platform_intrinsics as intrinsics;\n extern crate serialize;\n "}, {"sha": "f28b7e8f52dc37cd7e47627efcfcbef9abe95cb5", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3c07b4611815d4d593fba22aaaa975ed97818919/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c07b4611815d4d593fba22aaaa975ed97818919/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=3c07b4611815d4d593fba22aaaa975ed97818919", "patch": "@@ -44,6 +44,7 @@ use middle::pat_util::simple_name;\n use middle::subst::Substs;\n use middle::ty::{self, Ty, HasTypeFlags};\n use rustc::front::map as hir_map;\n+use rustc_mir::mir_map::MirMap;\n use session::config::{self, NoDebugInfo, FullDebugInfo};\n use session::Session;\n use trans::_match;\n@@ -2737,7 +2738,10 @@ pub fn filter_reachable_ids(ccx: &SharedCrateContext) -> NodeSet {\n     }).collect()\n }\n \n-pub fn trans_crate(tcx: &ty::ctxt, analysis: ty::CrateAnalysis) -> CrateTranslation {\n+pub fn trans_crate<'tcx>(tcx: &ty::ctxt<'tcx>,\n+                         mir_map: &MirMap<'tcx>,\n+                         analysis: ty::CrateAnalysis)\n+                         -> CrateTranslation {\n     let ty::CrateAnalysis { export_map, reachable, name, .. } = analysis;\n     let krate = tcx.map.krate();\n \n@@ -2779,6 +2783,7 @@ pub fn trans_crate(tcx: &ty::ctxt, analysis: ty::CrateAnalysis) -> CrateTranslat\n     let shared_ccx = SharedCrateContext::new(&link_meta.crate_name,\n                                              codegen_units,\n                                              tcx,\n+                                             &mir_map,\n                                              export_map,\n                                              Sha256::new(),\n                                              link_meta.clone(),"}, {"sha": "1f1d43feeb38e70f372cb74b627fab46466cf309", "filename": "src/librustc_trans/trans/context.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3c07b4611815d4d593fba22aaaa975ed97818919/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c07b4611815d4d593fba22aaaa975ed97818919/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs?ref=3c07b4611815d4d593fba22aaaa975ed97818919", "patch": "@@ -14,6 +14,7 @@ use metadata::common::LinkMeta;\n use middle::def::ExportMap;\n use middle::def_id::DefId;\n use middle::traits;\n+use rustc_mir::mir_map::MirMap;\n use trans::adt;\n use trans::base;\n use trans::builder::Builder;\n@@ -70,6 +71,7 @@ pub struct SharedCrateContext<'a, 'tcx: 'a> {\n     stats: Stats,\n     check_overflow: bool,\n     check_drop_flag_for_sanity: bool,\n+    mir_map: &'a MirMap<'tcx>,\n \n     available_drop_glues: RefCell<FnvHashMap<DropGlueKind<'tcx>, String>>,\n     use_dll_storage_attrs: bool,\n@@ -251,6 +253,7 @@ impl<'b, 'tcx> SharedCrateContext<'b, 'tcx> {\n     pub fn new(crate_name: &str,\n                local_count: usize,\n                tcx: &'b ty::ctxt<'tcx>,\n+               mir_map: &'b MirMap<'tcx>,\n                export_map: ExportMap,\n                symbol_hasher: Sha256,\n                link_meta: LinkMeta,\n@@ -317,6 +320,7 @@ impl<'b, 'tcx> SharedCrateContext<'b, 'tcx> {\n             link_meta: link_meta,\n             symbol_hasher: RefCell::new(symbol_hasher),\n             tcx: tcx,\n+            mir_map: mir_map,\n             stats: Stats {\n                 n_glues_created: Cell::new(0),\n                 n_null_glues: Cell::new(0),\n@@ -803,6 +807,10 @@ impl<'b, 'tcx> CrateContext<'b, 'tcx> {\n     pub fn use_dll_storage_attrs(&self) -> bool {\n         self.shared.use_dll_storage_attrs()\n     }\n+\n+    pub fn mir_map(&self) -> &'b MirMap<'tcx> {\n+        self.shared.mir_map\n+    }\n }\n \n pub struct TypeOfDepthLock<'a, 'tcx: 'a>(&'a LocalCrateContext<'tcx>);"}, {"sha": "d07d44a2a94120524b9d3e6c4ee626ff29a5063e", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c07b4611815d4d593fba22aaaa975ed97818919/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c07b4611815d4d593fba22aaaa975ed97818919/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=3c07b4611815d4d593fba22aaaa975ed97818919", "patch": "@@ -145,7 +145,7 @@ pub fn run_core(search_paths: SearchPaths, cfgs: Vec<String>, externs: Externs,\n                                         &arenas,\n                                         &name,\n                                         resolve::MakeGlobMap::No,\n-                                        |tcx, analysis| {\n+                                        |tcx, _, analysis| {\n         let ty::CrateAnalysis { exported_items, public_items, .. } = analysis;\n \n         // Convert from a NodeId set to a DefId set since we don't always have easy access"}, {"sha": "f2dd155595ac46bb4bf7b5faa8741829458feadc", "filename": "src/test/run-make/execution-engine/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c07b4611815d4d593fba22aaaa975ed97818919/src%2Ftest%2Frun-make%2Fexecution-engine%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c07b4611815d4d593fba22aaaa975ed97818919/src%2Ftest%2Frun-make%2Fexecution-engine%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fexecution-engine%2Ftest.rs?ref=3c07b4611815d4d593fba22aaaa975ed97818919", "patch": "@@ -229,9 +229,9 @@ fn compile_program(input: &str, sysroot: PathBuf)\n         let ast_map = driver::make_map(&sess, &mut hir_forest);\n \n         driver::phase_3_run_analysis_passes(\n-            &sess, ast_map, &arenas, &id, MakeGlobMap::No, |tcx, analysis| {\n+            &sess, ast_map, &arenas, &id, MakeGlobMap::No, |tcx, mir_map, analysis| {\n \n-            let trans = driver::phase_4_translate_to_llvm(tcx, analysis);\n+            let trans = driver::phase_4_translate_to_llvm(tcx, &mir_map, analysis);\n \n             let crates = tcx.sess.cstore.get_used_crates(RequireDynamic);\n "}]}