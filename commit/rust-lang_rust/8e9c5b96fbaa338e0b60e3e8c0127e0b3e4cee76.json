{"sha": "8e9c5b96fbaa338e0b60e3e8c0127e0b3e4cee76", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlOWM1Yjk2ZmJhYTMzOGUwYjYwZTNlOGMwMTI3ZTBiM2U0Y2VlNzY=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-04-03T02:03:43Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-04-03T02:05:12Z"}, "message": "Change rust_vec to have a 16-byte header, to 16-byte-align vec-body data. Major perf win.", "tree": {"sha": "c893449b391e9aec1c6aa3299ab975b4cd053be0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c893449b391e9aec1c6aa3299ab975b4cd053be0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e9c5b96fbaa338e0b60e3e8c0127e0b3e4cee76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e9c5b96fbaa338e0b60e3e8c0127e0b3e4cee76", "html_url": "https://github.com/rust-lang/rust/commit/8e9c5b96fbaa338e0b60e3e8c0127e0b3e4cee76", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e9c5b96fbaa338e0b60e3e8c0127e0b3e4cee76/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6763efb02c09f8704690a577b177ac9bde12d63", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6763efb02c09f8704690a577b177ac9bde12d63", "html_url": "https://github.com/rust-lang/rust/commit/f6763efb02c09f8704690a577b177ac9bde12d63"}], "stats": {"total": 21, "additions": 14, "deletions": 7}, "files": [{"sha": "3ae3b84350a592039fa8e725b1bdc289fbfe641e", "filename": "src/boot/be/abi.ml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8e9c5b96fbaa338e0b60e3e8c0127e0b3e4cee76/src%2Fboot%2Fbe%2Fabi.ml", "raw_url": "https://github.com/rust-lang/rust/raw/8e9c5b96fbaa338e0b60e3e8c0127e0b3e4cee76/src%2Fboot%2Fbe%2Fabi.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fbe%2Fabi.ml?ref=8e9c5b96fbaa338e0b60e3e8c0127e0b3e4cee76", "patch": "@@ -93,7 +93,8 @@ let tydesc_field_stateflag = 11;;\n let vec_elt_rc = 0;;\n let vec_elt_alloc = 1;;\n let vec_elt_fill = 2;;\n-let vec_elt_data = 3;;\n+let vec_elt_pad = 3;;\n+let vec_elt_data = 4;;\n \n let calltup_elt_out_ptr = 0;;\n let calltup_elt_task_ptr = 1;;"}, {"sha": "6a7de3146df0211ac7033b77484faff2e5f1d513", "filename": "src/boot/me/semant.ml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8e9c5b96fbaa338e0b60e3e8c0127e0b3e4cee76/src%2Fboot%2Fme%2Fsemant.ml", "raw_url": "https://github.com/rust-lang/rust/raw/8e9c5b96fbaa338e0b60e3e8c0127e0b3e4cee76/src%2Fboot%2Fme%2Fsemant.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fsemant.ml?ref=8e9c5b96fbaa338e0b60e3e8c0127e0b3e4cee76", "patch": "@@ -2382,7 +2382,7 @@ and fn_rty (cx:ctxt) (opaque_box_body:bool) : Il.referent_ty =\n and vec_sty (word_bits:Il.bits) : Il.scalar_ty =\n   let word = word_rty word_bits in\n   let ptr = Il.ScalarTy (Il.AddrTy Il.OpaqueTy) in\n-    Il.AddrTy (Il.StructTy [| word; word; word; ptr |])\n+    Il.AddrTy (Il.StructTy [| word; word; word; word; ptr |])\n \n and referent_type\n     ?parent_tags:parent_tags\n@@ -2442,7 +2442,7 @@ and referent_type\n       | Ast.TY_mach (TY_i64)\n       | Ast.TY_mach (TY_f64) -> sv Il.Bits64\n \n-      | Ast.TY_str -> sp (Il.StructTy [| word; word; word; ptr |])\n+      | Ast.TY_str -> sp (Il.StructTy [| word; word; word; word; ptr |])\n       | Ast.TY_vec _ -> s (vec_sty word_bits)\n       | Ast.TY_tup tt -> tup tt\n       | Ast.TY_rec tr -> tup (Array.map snd tr)"}, {"sha": "bb74d721874ccd82c932e1d7e2e76cead606da60", "filename": "src/boot/me/trans.ml", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8e9c5b96fbaa338e0b60e3e8c0127e0b3e4cee76/src%2Fboot%2Fme%2Ftrans.ml", "raw_url": "https://github.com/rust-lang/rust/raw/8e9c5b96fbaa338e0b60e3e8c0127e0b3e4cee76/src%2Fboot%2Fme%2Ftrans.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftrans.ml?ref=8e9c5b96fbaa338e0b60e3e8c0127e0b3e4cee76", "patch": "@@ -1549,6 +1549,7 @@ let trans_visitor\n                              Asm.IMM Abi.const_refcount);\n                    Asm.WORD (word_ty_mach, Asm.IMM init_sz);\n                    Asm.WORD (word_ty_mach, Asm.IMM init_sz);\n+                   Asm.WORD (word_ty_mach, Asm.IMM 0L);\n                    Asm.ZSTRING s\n                  |]))\n           (referent_type cx Ast.TY_str)\n@@ -2850,15 +2851,16 @@ let trans_visitor\n \n   (*\n    * A vec is implicitly boxed: every slot vec[T] is 1 word and\n-   * points to a refcounted structure. That structure has 3 words with\n+   * points to a refcounted structure. That structure has 4 words with\n    * defined meaning at the beginning; data follows the header.\n    *\n    *   word 0: refcount or gc control word\n    *   word 1: allocated size of data\n    *   word 2: initialised size of data\n-   *   word 3...N: data\n+   *   word 3: padding word to hit even multiple of 16\n+   *   word 4...N: data\n    * \n-   * This 3-word prefix is shared with strings, we factor the common\n+   * This 4-word prefix is shared with strings, we factor the common\n    * part out for reuse in string code.\n    *)\n "}, {"sha": "42a87623cbcbec3ca1b6d3776f8691d8dbf246cb", "filename": "src/comp/back/abi.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8e9c5b96fbaa338e0b60e3e8c0127e0b3e4cee76/src%2Fcomp%2Fback%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e9c5b96fbaa338e0b60e3e8c0127e0b3e4cee76/src%2Fcomp%2Fback%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Fabi.rs?ref=8e9c5b96fbaa338e0b60e3e8c0127e0b3e4cee76", "patch": "@@ -26,7 +26,8 @@ const int general_code_alignment = 16;\n const int vec_elt_rc = 0;\n const int vec_elt_alloc = 1;\n const int vec_elt_fill = 2;\n-const int vec_elt_data = 3;\n+const int vec_elt_pad = 3;\n+const int vec_elt_data = 4;\n \n const int tydesc_field_first_param = 0;\n const int tydesc_field_size = 1;"}, {"sha": "ee3ea2cd1e2a8a242dfb86848d6546521764556c", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e9c5b96fbaa338e0b60e3e8c0127e0b3e4cee76/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e9c5b96fbaa338e0b60e3e8c0127e0b3e4cee76/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=8e9c5b96fbaa338e0b60e3e8c0127e0b3e4cee76", "patch": "@@ -372,6 +372,7 @@ fn T_vec(TypeRef t) -> TypeRef {\n     ret T_struct(vec(T_int(),       // Refcount\n                      T_int(),       // Alloc\n                      T_int(),       // Fill\n+                     T_int(),       // Pad\n                      T_array(t, 0u) // Body elements\n                      ));\n }\n@@ -870,6 +871,7 @@ fn C_str(@crate_ctxt cx, str s) -> ValueRef {\n     auto box = C_struct(vec(C_int(abi.const_refcount as int),\n                             C_int(len + 1u as int), // 'alloc'\n                             C_int(len + 1u as int), // 'fill'\n+                            C_int(0),               // 'pad'\n                             llvm.LLVMConstString(_str.buf(s),\n                                                  len, False)));\n     auto g = llvm.LLVMAddGlobal(cx.llmod, val_ty(box),"}, {"sha": "14a865bd3a474126a1fee098fe747cc4b297ad56", "filename": "src/rt/rust_util.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8e9c5b96fbaa338e0b60e3e8c0127e0b3e4cee76/src%2Frt%2Frust_util.h", "raw_url": "https://github.com/rust-lang/rust/raw/8e9c5b96fbaa338e0b60e3e8c0127e0b3e4cee76/src%2Frt%2Frust_util.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_util.h?ref=8e9c5b96fbaa338e0b60e3e8c0127e0b3e4cee76", "patch": "@@ -172,6 +172,7 @@ rust_vec : public rc_base<rust_vec>\n {\n     size_t alloc;\n     size_t fill;\n+    size_t pad; // Pad to align data[0] to 16 bytes.\n     uint8_t data[];\n     rust_vec(rust_dom *dom, size_t alloc, size_t fill, uint8_t const *d) :\n         alloc(alloc),"}]}