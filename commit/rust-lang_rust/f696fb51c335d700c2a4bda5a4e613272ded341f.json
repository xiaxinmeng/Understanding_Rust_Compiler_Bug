{"sha": "f696fb51c335d700c2a4bda5a4e613272ded341f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2OTZmYjUxYzMzNWQ3MDBjMmE0YmRhNWE0ZTYxMzI3MmRlZDM0MWY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-08-19T11:31:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-19T11:31:46Z"}, "message": "Merge #9950\n\n9950: Fix codegen for is_method documentation r=yoshuawuyts a=yoshuawuyts\n\nWhile authoring https://github.com/rust-lang/rust/pull/88154 I realized that the codegen for the `enum_generate_is_method` assist currently generates invalid paths, and used snake case instead of spaces for the docs description. This fixes both issues. Thanks!\n\nCo-authored-by: Yoshua Wuyts <yoshuawuyts@gmail.com>", "tree": {"sha": "e9489c082e39d94926b94978b19605a5cf3103e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9489c082e39d94926b94978b19605a5cf3103e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f696fb51c335d700c2a4bda5a4e613272ded341f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhHkEiCRBK7hj4Ov3rIwAAYqoIAEiU3q8vw9Zvv+wK7J5kDSsP\naGuHKaKqq272vMkjYyoGKGFfnS6Yq9iYDQuUPvof/9/ZB2Dl8DFW0rU/9s5PPktQ\nzY/J9wXzFbnXjHW5SWMJgwkjeVSBnO+Pd7ah4lB54hw1Mriyi99dM9D6y2hVQJXx\nvQ5AOoR8suGirLQlStVF6TE9XfpXLM63dqkNtra7ezCZmkZDOQWy+ejBQX0OkBhj\nMRC9VhYyURWXLtp5MmHQ8YeZfU47K8A0c42C6F8NQyfYEvBfZd+AI2V4AL/EadB9\nl1CvIRZYA0KPF8/AQSlUGXZC4vY7SjbpxBEbEOxtRz145rDl3dQaJe2xc1GH1hs=\n=7Lj1\n-----END PGP SIGNATURE-----\n", "payload": "tree e9489c082e39d94926b94978b19605a5cf3103e4\nparent ee4505f396249234bba05bfdbd14ae2a9d813004\nparent 586d6fca8cfc81f01ba8d4a2f1a204ff657f9a99\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1629372706 +0000\ncommitter GitHub <noreply@github.com> 1629372706 +0000\n\nMerge #9950\n\n9950: Fix codegen for is_method documentation r=yoshuawuyts a=yoshuawuyts\n\nWhile authoring https://github.com/rust-lang/rust/pull/88154 I realized that the codegen for the `enum_generate_is_method` assist currently generates invalid paths, and used snake case instead of spaces for the docs description. This fixes both issues. Thanks!\n\nCo-authored-by: Yoshua Wuyts <yoshuawuyts@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f696fb51c335d700c2a4bda5a4e613272ded341f", "html_url": "https://github.com/rust-lang/rust/commit/f696fb51c335d700c2a4bda5a4e613272ded341f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f696fb51c335d700c2a4bda5a4e613272ded341f/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee4505f396249234bba05bfdbd14ae2a9d813004", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee4505f396249234bba05bfdbd14ae2a9d813004", "html_url": "https://github.com/rust-lang/rust/commit/ee4505f396249234bba05bfdbd14ae2a9d813004"}, {"sha": "586d6fca8cfc81f01ba8d4a2f1a204ff657f9a99", "url": "https://api.github.com/repos/rust-lang/rust/commits/586d6fca8cfc81f01ba8d4a2f1a204ff657f9a99", "html_url": "https://github.com/rust-lang/rust/commit/586d6fca8cfc81f01ba8d4a2f1a204ff657f9a99"}], "stats": {"total": 63, "additions": 59, "deletions": 4}, "files": [{"sha": "94216f2dff91fdd52e689b90ec6b0b5736d6450b", "filename": "crates/ide_assists/src/handlers/generate_enum_is_method.rs", "status": "modified", "additions": 57, "deletions": 4, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/f696fb51c335d700c2a4bda5a4e613272ded341f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_enum_is_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f696fb51c335d700c2a4bda5a4e613272ded341f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_enum_is_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_enum_is_method.rs?ref=f696fb51c335d700c2a4bda5a4e613272ded341f", "patch": "@@ -28,6 +28,8 @@ use crate::{\n //\n // impl Version {\n //     /// Returns `true` if the version is [`Minor`].\n+//     ///\n+//     /// [`Minor`]: Version::Minor\n //     fn is_minor(&self) -> bool {\n //         matches!(self, Self::Minor)\n //     }\n@@ -43,7 +45,8 @@ pub(crate) fn generate_enum_is_method(acc: &mut Assists, ctx: &AssistContext) ->\n         ast::StructKind::Unit => \"\",\n     };\n \n-    let enum_lowercase_name = to_lower_snake_case(&parent_enum.name()?.to_string());\n+    let enum_name = parent_enum.name()?;\n+    let enum_lowercase_name = to_lower_snake_case(&enum_name.to_string()).replace('_', \" \");\n     let fn_name = format!(\"is_{}\", &to_lower_snake_case(&variant_name.text()));\n \n     // Return early if we've found an existing new fn\n@@ -57,11 +60,18 @@ pub(crate) fn generate_enum_is_method(acc: &mut Assists, ctx: &AssistContext) ->\n         |builder| {\n             let vis = parent_enum.visibility().map_or(String::new(), |v| format!(\"{} \", v));\n             let method = format!(\n-                \"    /// Returns `true` if the {} is [`{}`].\n+                \"    /// Returns `true` if the {} is [`{variant}`].\n+    ///\n+    /// [`{variant}`]: {}::{variant}\n     {}fn {}(&self) -> bool {{\n-        matches!(self, Self::{}{})\n+        matches!(self, Self::{variant}{})\n     }}\",\n-                enum_lowercase_name, variant_name, vis, fn_name, variant_name, pattern_suffix,\n+                enum_lowercase_name,\n+                enum_name,\n+                vis,\n+                fn_name,\n+                pattern_suffix,\n+                variant = variant_name\n             );\n \n             add_method_to_adt(builder, &parent_enum, impl_def, &method);\n@@ -93,6 +103,8 @@ enum Variant {\n \n impl Variant {\n     /// Returns `true` if the variant is [`Minor`].\n+    ///\n+    /// [`Minor`]: Variant::Minor\n     fn is_minor(&self) -> bool {\n         matches!(self, Self::Minor)\n     }\n@@ -137,6 +149,8 @@ enum Variant {\n \n impl Variant {\n     /// Returns `true` if the variant is [`Minor`].\n+    ///\n+    /// [`Minor`]: Variant::Minor\n     fn is_minor(&self) -> bool {\n         matches!(self, Self::Minor(..))\n     }\n@@ -162,6 +176,8 @@ enum Variant {\n \n impl Variant {\n     /// Returns `true` if the variant is [`Minor`].\n+    ///\n+    /// [`Minor`]: Variant::Minor\n     fn is_minor(&self) -> bool {\n         matches!(self, Self::Minor { .. })\n     }\n@@ -179,6 +195,8 @@ enum Variant { Undefined }\n \n impl Variant {\n     /// Returns `true` if the variant is [`Undefined`].\n+    ///\n+    /// [`Undefined`]: Variant::Undefined\n     fn is_undefined(&self) -> bool {\n         matches!(self, Self::Undefined)\n     }\n@@ -204,6 +222,8 @@ pub(crate) enum Variant {\n \n impl Variant {\n     /// Returns `true` if the variant is [`Minor`].\n+    ///\n+    /// [`Minor`]: Variant::Minor\n     pub(crate) fn is_minor(&self) -> bool {\n         matches!(self, Self::Minor)\n     }\n@@ -224,6 +244,8 @@ enum Variant {\n \n impl Variant {\n     /// Returns `true` if the variant is [`Minor`].\n+    ///\n+    /// [`Minor`]: Variant::Minor\n     fn is_minor(&self) -> bool {\n         matches!(self, Self::Minor)\n     }\n@@ -236,14 +258,45 @@ impl Variant {\n \n impl Variant {\n     /// Returns `true` if the variant is [`Minor`].\n+    ///\n+    /// [`Minor`]: Variant::Minor\n     fn is_minor(&self) -> bool {\n         matches!(self, Self::Minor)\n     }\n \n     /// Returns `true` if the variant is [`Major`].\n+    ///\n+    /// [`Major`]: Variant::Major\n     fn is_major(&self) -> bool {\n         matches!(self, Self::Major)\n     }\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_generate_enum_is_variant_names() {\n+        check_assist(\n+            generate_enum_is_method,\n+            r#\"\n+enum GeneratorState {\n+    Yielded,\n+    Complete$0,\n+    Major,\n+}\"#,\n+            r#\"enum GeneratorState {\n+    Yielded,\n+    Complete,\n+    Major,\n+}\n+\n+impl GeneratorState {\n+    /// Returns `true` if the generator state is [`Complete`].\n+    ///\n+    /// [`Complete`]: GeneratorState::Complete\n+    fn is_complete(&self) -> bool {\n+        matches!(self, Self::Complete)\n+    }\n }\"#,\n         );\n     }"}, {"sha": "20233f21736cb0a1b2ddd64c4499055ed3c13d37", "filename": "crates/ide_assists/src/tests/generated.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f696fb51c335d700c2a4bda5a4e613272ded341f/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f696fb51c335d700c2a4bda5a4e613272ded341f/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=f696fb51c335d700c2a4bda5a4e613272ded341f", "patch": "@@ -723,6 +723,8 @@ enum Version {\n \n impl Version {\n     /// Returns `true` if the version is [`Minor`].\n+    ///\n+    /// [`Minor`]: Version::Minor\n     fn is_minor(&self) -> bool {\n         matches!(self, Self::Minor)\n     }"}]}