{"sha": "c1898b9acb324990367bb6672145c30b51e0399f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxODk4YjlhY2IzMjQ5OTAzNjdiYjY2NzIxNDVjMzBiNTFlMDM5OWY=", "commit": {"author": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2014-06-13T05:20:47Z"}, "committer": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2014-06-24T18:36:27Z"}, "message": "Stop using Default for initializing builtin lints\n\nIt wasn't a very appropriate use of the trait. Instead, just enumerate\nunit structs and those with a `fn new()` separately.", "tree": {"sha": "a3d50c112e838a37de7e74cfd1e3a1f421cc98ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3d50c112e838a37de7e74cfd1e3a1f421cc98ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1898b9acb324990367bb6672145c30b51e0399f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1898b9acb324990367bb6672145c30b51e0399f", "html_url": "https://github.com/rust-lang/rust/commit/c1898b9acb324990367bb6672145c30b51e0399f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1898b9acb324990367bb6672145c30b51e0399f/comments", "author": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7af6060dd700c536d6f82d09d3e572f82512cb8", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7af6060dd700c536d6f82d09d3e572f82512cb8", "html_url": "https://github.com/rust-lang/rust/commit/c7af6060dd700c536d6f82d09d3e572f82512cb8"}], "stats": {"total": 70, "additions": 27, "deletions": 43}, "files": [{"sha": "f6172b8e7df72e0f61ed075aaf669ea1d378c841", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 9, "deletions": 31, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/c1898b9acb324990367bb6672145c30b51e0399f/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1898b9acb324990367bb6672145c30b51e0399f/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=c1898b9acb324990367bb6672145c30b51e0399f", "patch": "@@ -21,8 +21,9 @@\n //! as a `LintPass`.\n //!\n //! If you define a new `LintPass`, you will also need to add it to the\n-//! `add_builtin_lints!()` invocation in `context.rs`. That macro\n-//! requires a `Default` impl for your `LintPass` type.\n+//! `add_builtin!` or `add_builtin_with_new!` invocation in `context.rs`.\n+//! Use the former for unit-like structs and the latter for structs with\n+//! a `pub fn new()`.\n \n use metadata::csearch;\n use middle::def::*;\n@@ -45,7 +46,6 @@ use std::u16;\n use std::u32;\n use std::u64;\n use std::u8;\n-use std::default::Default;\n use syntax::abi;\n use syntax::ast_map;\n use syntax::attr::AttrMetaMethods;\n@@ -57,7 +57,6 @@ use syntax::{ast, ast_util, visit};\n declare_lint!(while_true, Warn,\n     \"suggest using `loop { }` instead of `while true { }`\")\n \n-#[deriving(Default)]\n pub struct WhileTrue;\n \n impl LintPass for WhileTrue {\n@@ -90,7 +89,6 @@ impl LintPass for WhileTrue {\n declare_lint!(unnecessary_typecast, Allow,\n     \"detects unnecessary type casts, that can be removed\")\n \n-#[deriving(Default)]\n pub struct UnusedCasts;\n \n impl LintPass for UnusedCasts {\n@@ -125,8 +123,8 @@ pub struct TypeLimits {\n     negated_expr_id: ast::NodeId,\n }\n \n-impl Default for TypeLimits {\n-    fn default() -> TypeLimits {\n+impl TypeLimits {\n+    pub fn new() -> TypeLimits {\n         TypeLimits {\n             negated_expr_id: -1,\n         }\n@@ -320,7 +318,6 @@ impl LintPass for TypeLimits {\n declare_lint!(ctypes, Warn,\n     \"proper use of libc types in foreign modules\")\n \n-#[deriving(Default)]\n pub struct CTypes;\n \n impl LintPass for CTypes {\n@@ -389,7 +386,6 @@ declare_lint!(owned_heap_memory, Allow,\n declare_lint!(heap_memory, Allow,\n     \"use of any (Box type or @ type) heap memory\")\n \n-#[deriving(Default)]\n pub struct HeapMemory;\n \n impl HeapMemory {\n@@ -492,8 +488,8 @@ pub struct RawPointerDeriving {\n     checked_raw_pointers: NodeSet,\n }\n \n-impl Default for RawPointerDeriving {\n-    fn default() -> RawPointerDeriving {\n+impl RawPointerDeriving {\n+    pub fn new() -> RawPointerDeriving {\n         RawPointerDeriving {\n             checked_raw_pointers: NodeSet::new(),\n         }\n@@ -538,7 +534,6 @@ impl LintPass for RawPointerDeriving {\n declare_lint!(unused_attribute, Warn,\n     \"detects attributes that were not used by the compiler\")\n \n-#[deriving(Default)]\n pub struct UnusedAttribute;\n \n impl LintPass for UnusedAttribute {\n@@ -620,7 +615,6 @@ impl LintPass for UnusedAttribute {\n declare_lint!(path_statement, Warn,\n     \"path statements with no effect\")\n \n-#[deriving(Default)]\n pub struct PathStatement;\n \n impl LintPass for PathStatement {\n@@ -648,7 +642,6 @@ declare_lint!(unused_must_use, Warn,\n declare_lint!(unused_result, Allow,\n     \"unused result of an expression in a statement\")\n \n-#[deriving(Default)]\n pub struct UnusedResult;\n \n impl LintPass for UnusedResult {\n@@ -709,7 +702,6 @@ impl LintPass for UnusedResult {\n declare_lint!(deprecated_owned_vector, Allow,\n     \"use of a `~[T]` vector\")\n \n-#[deriving(Default)]\n pub struct DeprecatedOwnedVector;\n \n impl LintPass for DeprecatedOwnedVector {\n@@ -735,7 +727,6 @@ impl LintPass for DeprecatedOwnedVector {\n declare_lint!(non_camel_case_types, Warn,\n     \"types, variants and traits should have camel case names\")\n \n-#[deriving(Default)]\n pub struct NonCamelCaseTypes;\n \n impl LintPass for NonCamelCaseTypes {\n@@ -821,7 +812,6 @@ fn method_context(cx: &Context, m: &ast::Method) -> MethodContext {\n declare_lint!(non_snake_case_functions, Warn,\n     \"methods and functions should have snake case names\")\n \n-#[deriving(Default)]\n pub struct NonSnakeCaseFunctions;\n \n impl NonSnakeCaseFunctions {\n@@ -899,7 +889,6 @@ impl LintPass for NonSnakeCaseFunctions {\n declare_lint!(non_uppercase_statics, Allow,\n     \"static constants should have uppercase identifiers\")\n \n-#[deriving(Default)]\n pub struct NonUppercaseStatics;\n \n impl LintPass for NonUppercaseStatics {\n@@ -931,7 +920,6 @@ impl LintPass for NonUppercaseStatics {\n declare_lint!(non_uppercase_pattern_statics, Warn,\n     \"static constants in match patterns should be all caps\")\n \n-#[deriving(Default)]\n pub struct NonUppercasePatternStatics;\n \n impl LintPass for NonUppercasePatternStatics {\n@@ -962,7 +950,6 @@ impl LintPass for NonUppercasePatternStatics {\n declare_lint!(uppercase_variables, Warn,\n     \"variable and structure field names should start with a lowercase character\")\n \n-#[deriving(Default)]\n pub struct UppercaseVariables;\n \n impl LintPass for UppercaseVariables {\n@@ -1011,7 +998,6 @@ impl LintPass for UppercaseVariables {\n declare_lint!(unnecessary_parens, Warn,\n     \"`if`, `match`, `while` and `return` do not need parentheses\")\n \n-#[deriving(Default)]\n pub struct UnnecessaryParens;\n \n impl UnnecessaryParens {\n@@ -1062,7 +1048,6 @@ impl LintPass for UnnecessaryParens {\n declare_lint!(unused_unsafe, Warn,\n     \"unnecessary use of an `unsafe` block\")\n \n-#[deriving(Default)]\n pub struct UnusedUnsafe;\n \n impl LintPass for UnusedUnsafe {\n@@ -1087,7 +1072,6 @@ impl LintPass for UnusedUnsafe {\n declare_lint!(unsafe_block, Allow,\n     \"usage of an `unsafe` block\")\n \n-#[deriving(Default)]\n pub struct UnsafeBlock;\n \n impl LintPass for UnsafeBlock {\n@@ -1109,7 +1093,6 @@ impl LintPass for UnsafeBlock {\n declare_lint!(unused_mut, Warn,\n     \"detect mut variables which don't need to be mutable\")\n \n-#[deriving(Default)]\n pub struct UnusedMut;\n \n impl UnusedMut {\n@@ -1195,7 +1178,6 @@ enum Allocation {\n declare_lint!(unnecessary_allocation, Warn,\n     \"detects unnecessary allocations that can be eliminated\")\n \n-#[deriving(Default)]\n pub struct UnnecessaryAllocation;\n \n impl LintPass for UnnecessaryAllocation {\n@@ -1267,17 +1249,15 @@ pub struct MissingDoc {\n     doc_hidden_stack: Vec<bool>,\n }\n \n-impl Default for MissingDoc {\n-    fn default() -> MissingDoc {\n+impl MissingDoc {\n+    pub fn new() -> MissingDoc {\n         MissingDoc {\n             exported_items: None,\n             struct_def_stack: vec!(),\n             doc_hidden_stack: vec!(false),\n         }\n     }\n-}\n \n-impl MissingDoc {\n     fn doc_hidden(&self) -> bool {\n         *self.doc_hidden_stack.last().expect(\"empty doc_hidden_stack\")\n     }\n@@ -1419,7 +1399,6 @@ declare_lint!(unstable, Allow,\n \n /// Checks for use of items with `#[deprecated]`, `#[experimental]` and\n /// `#[unstable]` attributes, or no stability attribute.\n-#[deriving(Default)]\n pub struct Stability;\n \n impl LintPass for Stability {\n@@ -1554,7 +1533,6 @@ declare_lint!(pub variant_size_difference, Allow,\n \n /// Does nothing as a lint pass, but registers some `Lint`s\n /// which are used by other parts of the compiler.\n-#[deriving(Default)]\n pub struct HardwiredLints;\n \n impl LintPass for HardwiredLints {"}, {"sha": "bcb0193f34446f39cb0d90a67b47ce4292658c73", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c1898b9acb324990367bb6672145c30b51e0399f/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1898b9acb324990367bb6672145c30b51e0399f/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=c1898b9acb324990367bb6672145c30b51e0399f", "patch": "@@ -37,7 +37,6 @@ use lint::builtin;\n use std::collections::HashMap;\n use std::rc::Rc;\n use std::cell::RefCell;\n-use std::default::Default;\n use std::tuple::Tuple2;\n use std::mem;\n use syntax::ast_util::IdVisitingOperation;\n@@ -122,23 +121,30 @@ impl LintStore {\n     }\n \n     pub fn register_builtin(&mut self, sess: Option<&Session>) {\n-        macro_rules! add_builtin_lints ( ( $sess:ident, $($name:ident),*, ) => (\n+        macro_rules! add_builtin ( ( $sess:ident, $($name:ident),*, ) => (\n             {$(\n-                {\n-                    let obj: builtin::$name = Default::default();\n-                    self.register_pass($sess, false, box obj as LintPassObject);\n-                };\n+                self.register_pass($sess, false, box builtin::$name as LintPassObject);\n             )*}\n         ))\n \n-        add_builtin_lints!(sess, HardwiredLints,\n-            WhileTrue, UnusedCasts, TypeLimits, CTypes, HeapMemory,\n-            RawPointerDeriving, UnusedAttribute, PathStatement,\n-            UnusedResult, DeprecatedOwnedVector, NonCamelCaseTypes,\n+        macro_rules! add_builtin_with_new ( ( $sess:ident, $($name:ident),*, ) => (\n+            {$(\n+                self.register_pass($sess, false, box builtin::$name::new() as LintPassObject);\n+            )*}\n+        ))\n+\n+        add_builtin!(sess, HardwiredLints,\n+            WhileTrue, UnusedCasts, CTypes, HeapMemory,\n+            UnusedAttribute, PathStatement, UnusedResult,\n+            DeprecatedOwnedVector, NonCamelCaseTypes,\n             NonSnakeCaseFunctions, NonUppercaseStatics,\n             NonUppercasePatternStatics, UppercaseVariables,\n-            UnnecessaryParens, UnusedUnsafe, UnsafeBlock, UnusedMut,\n-            UnnecessaryAllocation, MissingDoc, Stability,\n+            UnnecessaryParens, UnusedUnsafe, UnsafeBlock,\n+            UnusedMut, UnnecessaryAllocation, Stability,\n+        )\n+\n+        add_builtin_with_new!(sess,\n+            TypeLimits, RawPointerDeriving, MissingDoc,\n         )\n \n         // We have one lint pass defined in this module."}]}