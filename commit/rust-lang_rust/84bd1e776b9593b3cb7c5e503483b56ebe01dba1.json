{"sha": "84bd1e776b9593b3cb7c5e503483b56ebe01dba1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0YmQxZTc3NmI5NTkzYjNjYjdjNWU1MDM0ODNiNTZlYmUwMWRiYTE=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-06-23T07:34:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-23T07:34:05Z"}, "message": "Rollup merge of #73572 - JOE1994:patch-4, r=jonas-schievink\n\nFix typos in doc comments\n\nHello \ud83e\udd80 ,\n\nThis commit fixes typos in the doc comments of 'librustc_mir/monomorphize/collector.rs'\n\nThank you for reviewing this PR \ud83d\udc4d", "tree": {"sha": "c08aac18b0f6a1c15796a215935ee9923577455b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c08aac18b0f6a1c15796a215935ee9923577455b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84bd1e776b9593b3cb7c5e503483b56ebe01dba1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe8bBtCRBK7hj4Ov3rIwAAdHIIAJ3G4tJkfn2SJKiCp3f/kEfm\nOnSQqcI1RRCl8xTZ7+/KOWEsUCFHQxQTHB+Q+VzQF16zfvS4u3u8x4gzvoJ60jam\n9UQkEE44aul94aVr11FE6rqKS0ViYY5KqeO+UZ6XWo9qUR1UiT1jYPwt2ZH+RVLX\nQCOKc8H3FZkFffKrr5yeH0lWqJtr39/xzahxJT/14curk2m8Wdlm8pIEfpzjqCXr\nDSwyj26XARVNZoYdMymEYzfzFHujp+faHVsLgI7juiOoveCpL/WcB0MlUnKaR+07\nRiW75w0LMXf1AI5WENlBKJ5W8X8KJEy55cSistzpQ94LK2+UpT8mCdL7bucG8vY=\n=40cd\n-----END PGP SIGNATURE-----\n", "payload": "tree c08aac18b0f6a1c15796a215935ee9923577455b\nparent 05601515be9e101c5746b32caad873a43bb93e8b\nparent 893077ca76eeb1ad35608872d534478d68c953c9\nauthor Manish Goregaokar <manishsmail@gmail.com> 1592897645 -0700\ncommitter GitHub <noreply@github.com> 1592897645 -0700\n\nRollup merge of #73572 - JOE1994:patch-4, r=jonas-schievink\n\nFix typos in doc comments\n\nHello \ud83e\udd80 ,\n\nThis commit fixes typos in the doc comments of 'librustc_mir/monomorphize/collector.rs'\n\nThank you for reviewing this PR \ud83d\udc4d\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84bd1e776b9593b3cb7c5e503483b56ebe01dba1", "html_url": "https://github.com/rust-lang/rust/commit/84bd1e776b9593b3cb7c5e503483b56ebe01dba1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84bd1e776b9593b3cb7c5e503483b56ebe01dba1/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05601515be9e101c5746b32caad873a43bb93e8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/05601515be9e101c5746b32caad873a43bb93e8b", "html_url": "https://github.com/rust-lang/rust/commit/05601515be9e101c5746b32caad873a43bb93e8b"}, {"sha": "893077ca76eeb1ad35608872d534478d68c953c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/893077ca76eeb1ad35608872d534478d68c953c9", "html_url": "https://github.com/rust-lang/rust/commit/893077ca76eeb1ad35608872d534478d68c953c9"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "e51d9ba9c021ded81b5bc038034302922eff8571", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/84bd1e776b9593b3cb7c5e503483b56ebe01dba1/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84bd1e776b9593b3cb7c5e503483b56ebe01dba1/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=84bd1e776b9593b3cb7c5e503483b56ebe01dba1", "patch": "@@ -1,7 +1,7 @@\n //! Mono Item Collection\n //! ====================\n //!\n-//! This module is responsible for discovering all items that will contribute to\n+//! This module is responsible for discovering all items that will contribute\n //! to code generation of the crate. The important part here is that it not only\n //! needs to find syntax-level items (functions, structs, etc) but also all\n //! their monomorphized instantiations. Every non-generic, non-const function\n@@ -79,7 +79,7 @@\n //! function or method call (represented by a CALL terminator in MIR). But\n //! calls are not the only thing that might introduce a reference between two\n //! function mono items, and as we will see below, they are just a\n-//! specialized of the form described next, and consequently will don't get any\n+//! specialization of the form described next, and consequently will not get any\n //! special treatment in the algorithm.\n //!\n //! #### Taking a reference to a function or method\n@@ -158,7 +158,7 @@\n //! - Eager mode is meant to be used in conjunction with incremental compilation\n //!   where a stable set of mono items is more important than a minimal\n //!   one. Thus, eager mode will instantiate drop-glue for every drop-able type\n-//!   in the crate, even of no drop call for that type exists (yet). It will\n+//!   in the crate, even if no drop call for that type exists (yet). It will\n //!   also instantiate default implementations of trait methods, something that\n //!   otherwise is only done on demand.\n //!"}]}