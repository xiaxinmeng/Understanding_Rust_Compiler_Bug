{"sha": "7ca089c6d2e834ea007d7a62b8bbbe0c880de4a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjYTA4OWM2ZDJlODM0ZWEwMDdkN2E2MmI4YmJiZTBjODgwZGU0YTI=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-07-17T13:22:09Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-07-18T04:03:58Z"}, "message": "Only use `assign_id!` for ast nodes that support attributes", "tree": {"sha": "9979b2b2b07c2c5eccd6334b8054510746db2a40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9979b2b2b07c2c5eccd6334b8054510746db2a40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ca089c6d2e834ea007d7a62b8bbbe0c880de4a2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAmDzqC4ACgkQtAh+UQ6Y\nsWQJwA/9HSuBybpEfTiujpPMvkLyiLw8JW1b2/PEqZx42vOLZ2J5f6vLsJY9zpTG\nh90dg9L3X+KzCAA30hv+4mU522JI5tL5pSoKRPott29S9Qrc4gnXUQERQh1URr+l\nMD9HuW+rMaI4gwnEYWj0j8All6p+WfRgkqysEwHR73bJRZ3XGZ99bpl4Lp6eFRg0\nY9x7xIeHm/B/TuZ+MPwu+0khX3eRAO4cujc8R90stuxzCI9PWh4xLlwYFzp0POXQ\nHH5Dn+BxmqyuDQXO8wqXnoV9XozzbwqJLPw7JDSJZL3304G2tHuM5l1XLlXjROnc\nHMTV1eihQzPGp7QfdtBm4MA5pzR2bMzEOseUOS59Pbwh/bLF9ls+GejNjWPyH6I2\nt0OqquWWtFvZmY3Wle9SsfpiveVcCMUQVSpyDvHpwLw6FZ79qf2Yo2Sutz+4SgZP\nVAVXni2uPmoVWb4Diw0jTwRBenTqzrEjsStI0DPLeY5ZzFCrv3btgTIwvoOeGYIB\nn+NLXUR1W5fD0TactJTFgJrEGf4avEN1U77GOqOVlXGe+I5OLLVOiITB3mjwBz/L\non4Thfg+LiSHD+ScaWVMUqEGiErMq+81+VcsqI684DZCZMdHu9YLBpNxqnyIVbQ4\nL1kyOJX7+zC60w6cl8sgNpqv+GVYe0lv6l8ztTX0Lv1seoT9Efs=\n=6Oy3\n-----END PGP SIGNATURE-----", "payload": "tree 9979b2b2b07c2c5eccd6334b8054510746db2a40\nparent d6e3c111011f6a270d56fdaf5222b484c4f38d65\nauthor Aaron Hill <aa1ronham@gmail.com> 1626528129 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1626581038 -0500\n\nOnly use `assign_id!` for ast nodes that support attributes\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ca089c6d2e834ea007d7a62b8bbbe0c880de4a2", "html_url": "https://github.com/rust-lang/rust/commit/7ca089c6d2e834ea007d7a62b8bbbe0c880de4a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ca089c6d2e834ea007d7a62b8bbbe0c880de4a2/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6e3c111011f6a270d56fdaf5222b484c4f38d65", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6e3c111011f6a270d56fdaf5222b484c4f38d65", "html_url": "https://github.com/rust-lang/rust/commit/d6e3c111011f6a270d56fdaf5222b484c4f38d65"}], "stats": {"total": 13, "additions": 8, "deletions": 5}, "files": [{"sha": "8c6aef80635cf596c26137255496d728139ef303", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7ca089c6d2e834ea007d7a62b8bbbe0c880de4a2/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ca089c6d2e834ea007d7a62b8bbbe0c880de4a2/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=7ca089c6d2e834ea007d7a62b8bbbe0c880de4a2", "patch": "@@ -29,6 +29,9 @@ use std::rc::Rc;\n \n crate use rustc_span::hygiene::MacroKind;\n \n+// When adding new variants, make sure to\n+// adjust the `visit_*` / `flat_map_*` calls in `InvocationCollector`\n+// to use `assign_id!`\n #[derive(Debug, Clone)]\n pub enum Annotatable {\n     Item(P<ast::Item>),"}, {"sha": "dcd871c9d205056d64e0ec6af3d82005542a0d27", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7ca089c6d2e834ea007d7a62b8bbbe0c880de4a2/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ca089c6d2e834ea007d7a62b8bbbe0c880de4a2/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=7ca089c6d2e834ea007d7a62b8bbbe0c880de4a2", "patch": "@@ -1099,6 +1099,8 @@ impl<'a, 'b> InvocationCollector<'a, 'b> {\n }\n \n /// Wraps a call to `noop_visit_*` / `noop_flat_map_*`\n+/// for an AST node that supports attributes\n+/// (see the `Annotatable` enum)\n /// This method assigns a `NodeId`, and sets that `NodeId`\n /// as our current 'lint node id'. If a macro call is found\n /// inside this AST node, we will use this AST node's `NodeId`\n@@ -1269,9 +1271,7 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n     fn visit_pat(&mut self, pat: &mut P<ast::Pat>) {\n         match pat.kind {\n             PatKind::MacCall(_) => {}\n-            _ => {\n-                return assign_id!(self, &mut pat.id, || noop_visit_pat(pat, self));\n-            }\n+            _ => return noop_visit_pat(pat, self),\n         }\n \n         visit_clobber(pat, |mut pat| match mem::replace(&mut pat.kind, PatKind::Wild) {\n@@ -1326,7 +1326,7 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n             &mut self.cx.current_expansion.dir_ownership,\n             DirOwnership::UnownedViaBlock,\n         );\n-        assign_id!(self, &mut block.id, || noop_visit_block(block, self));\n+        noop_visit_block(block, self);\n         self.cx.current_expansion.dir_ownership = orig_dir_ownership;\n     }\n \n@@ -1498,7 +1498,7 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n     fn visit_ty(&mut self, ty: &mut P<ast::Ty>) {\n         match ty.kind {\n             ast::TyKind::MacCall(_) => {}\n-            _ => return assign_id!(self, &mut ty.id, || noop_visit_ty(ty, self)),\n+            _ => return noop_visit_ty(ty, self),\n         };\n \n         visit_clobber(ty, |mut ty| match mem::replace(&mut ty.kind, ast::TyKind::Err) {"}]}