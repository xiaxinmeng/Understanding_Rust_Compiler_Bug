{"sha": "f25095170251c102c32f6bb0705d1feabbd6fe04", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyNTA5NTE3MDI1MWMxMDJjMzJmNmJiMDcwNWQxZmVhYmJkNmZlMDQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-06-19T13:02:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-06-19T13:02:50Z"}, "message": "Apply suggestions from code review\n\nCo-Authored-By: Mazdak Farrokhzad <twingoow@gmail.com>", "tree": {"sha": "6e5e36388837a561940e22351416dd0e404d0c3a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e5e36388837a561940e22351416dd0e404d0c3a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f25095170251c102c32f6bb0705d1feabbd6fe04", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdCjJ6CRBK7hj4Ov3rIwAAdHIIALMa7odak8PNRsnbQo5Mwwiy\nOgWdE9mguPBF2kNMHkAHhe6zQHr1FNt8EcExfbKUTpVGziaLl3MrPHAIIgKt/3I/\nJzRkV1oMn/Ame7E+tItSD/rZ2vb27z/M+oO8mRUSmPxkoU6SHVVmJBv5CDGFISkZ\n880iTmzyCetmW890UoNMk+mT52vdoWpPPymaH0002GKM7Yv/D7rlgI6OWH1zZ6wq\n/br4kqHfUY5rPnu8iHW6ghN7N5y0dNoGWPdWMbkS6UjmJr3+bfRnxol4lMndTpnG\nNYkcvttqfxRedxZ76PfNEp1bDCCHjkJj72lWIWH66KJoUZ+ODwICdPd4tPg3UbQ=\n=IxT/\n-----END PGP SIGNATURE-----\n", "payload": "tree 6e5e36388837a561940e22351416dd0e404d0c3a\nparent 2eb074dff180743336b022144fae7e88ea849c4b\nauthor Ralf Jung <post@ralfj.de> 1560949370 +0200\ncommitter GitHub <noreply@github.com> 1560949370 +0200\n\nApply suggestions from code review\n\nCo-Authored-By: Mazdak Farrokhzad <twingoow@gmail.com>"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f25095170251c102c32f6bb0705d1feabbd6fe04", "html_url": "https://github.com/rust-lang/rust/commit/f25095170251c102c32f6bb0705d1feabbd6fe04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f25095170251c102c32f6bb0705d1feabbd6fe04/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2eb074dff180743336b022144fae7e88ea849c4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/2eb074dff180743336b022144fae7e88ea849c4b", "html_url": "https://github.com/rust-lang/rust/commit/2eb074dff180743336b022144fae7e88ea849c4b"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "15e28f4f9ae9431c8b99674e18fff3fe04a9fdc9", "filename": "src/libcore/pin.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f25095170251c102c32f6bb0705d1feabbd6fe04/src%2Flibcore%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f25095170251c102c32f6bb0705d1feabbd6fe04/src%2Flibcore%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpin.rs?ref=f25095170251c102c32f6bb0705d1feabbd6fe04", "patch": "@@ -182,7 +182,7 @@\n //!     }\n //! }\n //! ```\n-//! `inner_drop` has the type that `drop` *should* have, so this makes sure that\n+//! The function `inner_drop` has the type that `drop` *should* have, so this makes sure that\n //! you do not accidentally use `self`/`this` in a way that is in conflict with pinning.\n //!\n //! Moreover, if your type is `#[repr(packed)]`, the compiler will automatically\n@@ -196,7 +196,7 @@\n //! The usual approach is to write helper methods (so called *projections*)\n //! that turn `Pin<&mut Struct>` into a reference to the field, but what\n //! type should that reference have? Is it `Pin<&mut Field>` or `&mut Field`?\n-//! The same question arises with the fields of an enum, and also when considering\n+//! The same question arises with the fields of an `enum`, and also when considering\n //! container/wrapper types such as [`Vec<T>`], [`Box<T>`], or [`RefCell<T>`].\n //! (This question applies to both mutable and shared references, we just\n //! use the more common case of mutable references here for illustration.)\n@@ -209,7 +209,7 @@\n //! pinning removed as part of the projection. If both are done for the same field,\n //! that will likely be unsound!\n //!\n-//! Basically, as the author of a data structure you get to decide for each field whether pinning\n+//! As the author of a data structure you get to decide for each field whether pinning\n //! \"propagates\" to this field or not. Pinning that propagates is also called \"structural\",\n //! because it follows the structure of the type.\n //! In the following, we describe the considerations that have to be made for either choice.\n@@ -235,7 +235,7 @@\n //! ```\n //!\n //! You may also `impl Unpin for Struct` *even if* the type of `field`\n-//! is not `Unpin`.  What that type thinks about pinning is just not relevant\n+//! is not `Unpin`. What that type thinks about pinning is not relevant\n //! when no `Pin<&mut Field>` is ever created.\n //!\n //! ## Pinning *is* structural for `field`"}]}