{"sha": "f93a974558bf09bee475427158150ba6e008cdd8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5M2E5NzQ1NThiZjA5YmVlNDc1NDI3MTU4MTUwYmE2ZTAwOGNkZDg=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-06-13T13:16:30Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-06-14T01:12:06Z"}, "message": "syntax: correct the Rand::rand call to select enum variants in #[deriving(Rand)].\n\nPreviously, this was not a global call, and so when `#[deriving(Rand)]`\nwas in any module other than the top-level one, it failed (unless there\nwas a `use std;` in scope).\n\nAlso, fix a minor inconsistency between uints and u32s for this piece\nof code.", "tree": {"sha": "b33c58f8819e4a85af750404e40b453aac5f2b3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b33c58f8819e4a85af750404e40b453aac5f2b3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f93a974558bf09bee475427158150ba6e008cdd8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f93a974558bf09bee475427158150ba6e008cdd8", "html_url": "https://github.com/rust-lang/rust/commit/f93a974558bf09bee475427158150ba6e008cdd8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f93a974558bf09bee475427158150ba6e008cdd8/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b417bc8511a0a38e73312cee8086ed04eeb21b75", "url": "https://api.github.com/repos/rust-lang/rust/commits/b417bc8511a0a38e73312cee8086ed04eeb21b75", "html_url": "https://github.com/rust-lang/rust/commit/b417bc8511a0a38e73312cee8086ed04eeb21b75"}], "stats": {"total": 48, "additions": 44, "deletions": 4}, "files": [{"sha": "79aa3469f74bbc7ffdd0bda5f99df62f97f19f04", "filename": "src/libsyntax/ext/deriving/rand.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f93a974558bf09bee475427158150ba6e008cdd8/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f93a974558bf09bee475427158150ba6e008cdd8/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs?ref=f93a974558bf09bee475427158150ba6e008cdd8", "patch": "@@ -78,19 +78,20 @@ fn rand_substructure(cx: @ExtCtxt, span: span, substr: &Substructure) -> @expr {\n \n             let variant_count = cx.expr_uint(span, variants.len());\n \n-            // need to specify the uint-ness of the random number\n-            let u32_ty = cx.ty_ident(span, cx.ident_of(\"uint\"));\n+            // need to specify the u32-ness of the random number\n+            let u32_ty = cx.ty_ident(span, cx.ident_of(\"u32\"));\n             let r_ty = cx.ty_ident(span, cx.ident_of(\"R\"));\n-            let rand_name = cx.path_all(span, false, copy rand_ident, None, ~[ u32_ty, r_ty ]);\n+            let rand_name = cx.path_all(span, true, copy rand_ident, None, ~[ u32_ty, r_ty ]);\n             let rand_name = cx.expr_path(rand_name);\n \n+            // ::std::rand::Rand::rand::<u32>(rng)\n             let rv_call = cx.expr_call(span,\n                                        rand_name,\n                                        ~[ rng[0].duplicate(cx) ]);\n \n             // rand() % variants.len()\n             let rand_variant = cx.expr_binary(span, ast::rem,\n-                                                rv_call, variant_count);\n+                                              rv_call, variant_count);\n \n             let mut arms = do variants.mapi |i, id_sum| {\n                 let i_expr = cx.expr_uint(span, i);"}, {"sha": "fce6d17c5f0157803cbd595580463687b2e9ff87", "filename": "src/test/run-pass/deriving-global.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/f93a974558bf09bee475427158150ba6e008cdd8/src%2Ftest%2Frun-pass%2Fderiving-global.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f93a974558bf09bee475427158150ba6e008cdd8/src%2Ftest%2Frun-pass%2Fderiving-global.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-global.rs?ref=f93a974558bf09bee475427158150ba6e008cdd8", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern mod extra; // {En,De}codable\n+mod submod {\n+    // if any of these are implemented without global calls for any\n+    // function calls, then being in a submodule will (correctly)\n+    // cause errors about unrecognised module `std` (or `extra`)\n+    #[deriving(Eq, Ord, TotalEq, TotalOrd,\n+               IterBytes,\n+               Clone, DeepClone,\n+               ToStr, Rand,\n+               Encodable, Decodable)]\n+    enum A { A1(uint), A2(int) }\n+\n+    #[deriving(Eq, Ord, TotalEq, TotalOrd,\n+               IterBytes,\n+               Clone, DeepClone,\n+               ToStr, Rand,\n+               Encodable, Decodable)]\n+    struct B { x: uint, y: int }\n+\n+    #[deriving(Eq, Ord, TotalEq, TotalOrd,\n+               IterBytes,\n+               Clone, DeepClone,\n+               ToStr, Rand,\n+               Encodable, Decodable)]\n+    struct C(uint, int);\n+\n+}\n+\n+fn main() {}"}]}