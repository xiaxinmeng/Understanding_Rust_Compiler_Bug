{"sha": "48b312f04a89c72cf6db2cbb08bbc7fe6fce9bdb", "node_id": "C_kwDOAAsO6NoAKDQ4YjMxMmYwNGE4OWM3MmNmNmRiMmNiYjA4YmJjN2ZlNmZjZTliZGI", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-08-12T09:55:59Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-08-12T11:44:52Z"}, "message": "Don't take TyCtxt as argument for compile_global_asm\n\nThis allows it to be executed on a background thread.", "tree": {"sha": "dcde9f8910f5c9dfc2f0ad5a89266d5be2586802", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dcde9f8910f5c9dfc2f0ad5a89266d5be2586802"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48b312f04a89c72cf6db2cbb08bbc7fe6fce9bdb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48b312f04a89c72cf6db2cbb08bbc7fe6fce9bdb", "html_url": "https://github.com/rust-lang/rust/commit/48b312f04a89c72cf6db2cbb08bbc7fe6fce9bdb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48b312f04a89c72cf6db2cbb08bbc7fe6fce9bdb/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "066f844fff7b6bf227c375a293fe15af88cf85ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/066f844fff7b6bf227c375a293fe15af88cf85ac", "html_url": "https://github.com/rust-lang/rust/commit/066f844fff7b6bf227c375a293fe15af88cf85ac"}], "stats": {"total": 98, "additions": 61, "deletions": 37}, "files": [{"sha": "0ca634affb4b678ae17403d3c91a684a9d8b96c6", "filename": "src/driver/aot.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/48b312f04a89c72cf6db2cbb08bbc7fe6fce9bdb/src%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48b312f04a89c72cf6db2cbb08bbc7fe6fce9bdb/src%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Faot.rs?ref=48b312f04a89c72cf6db2cbb08bbc7fe6fce9bdb", "patch": "@@ -1,6 +1,8 @@\n //! The AOT driver uses [`cranelift_object`] to write object files suitable for linking into a\n //! standalone executable.\n \n+use std::sync::Arc;\n+\n use rustc_codegen_ssa::back::metadata::create_compressed_metadata_file;\n use rustc_codegen_ssa::{CodegenResults, CompiledModule, CrateInfo, ModuleKind};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n@@ -14,6 +16,7 @@ use rustc_session::Session;\n use cranelift_codegen::isa::TargetIsa;\n use cranelift_object::{ObjectBuilder, ObjectModule};\n \n+use crate::global_asm::GlobalAsmConfig;\n use crate::{prelude::*, BackendConfig};\n \n struct ModuleCodegenResult(CompiledModule, Option<(WorkProductId, WorkProduct)>);\n@@ -141,7 +144,11 @@ fn reuse_workproduct_for_cgu(tcx: TyCtxt<'_>, cgu: &CodegenUnit<'_>) -> ModuleCo\n \n fn module_codegen(\n     tcx: TyCtxt<'_>,\n-    (backend_config, cgu_name): (BackendConfig, rustc_span::Symbol),\n+    (backend_config, global_asm_config, cgu_name): (\n+        BackendConfig,\n+        Arc<GlobalAsmConfig>,\n+        rustc_span::Symbol,\n+    ),\n ) -> ModuleCodegenResult {\n     let cgu = tcx.codegen_unit(cgu_name);\n     let mono_items = cgu.items_in_deterministic_order(tcx);\n@@ -198,9 +205,13 @@ fn module_codegen(\n         )\n     });\n \n-    match crate::global_asm::compile_global_asm(tcx, cgu.name().as_str(), &cx.global_asm) {\n+    match crate::global_asm::compile_global_asm(\n+        &global_asm_config,\n+        cgu.name().as_str(),\n+        &cx.global_asm,\n+    ) {\n         Ok(()) => {}\n-        Err(err) => tcx.sess.fatal(&err.to_string()),\n+        Err(err) => tcx.sess.fatal(&err),\n     }\n \n     codegen_result\n@@ -226,6 +237,8 @@ pub(crate) fn run_aot(\n         }\n     }\n \n+    let global_asm_config = Arc::new(crate::global_asm::GlobalAsmConfig::new(tcx));\n+\n     let modules = super::time(tcx, backend_config.display_cg_time, \"codegen mono items\", || {\n         cgus.iter()\n             .map(|cgu| {\n@@ -243,7 +256,7 @@ pub(crate) fn run_aot(\n                             .with_task(\n                                 dep_node,\n                                 tcx,\n-                                (backend_config.clone(), cgu.name()),\n+                                (backend_config.clone(), global_asm_config.clone(), cgu.name()),\n                                 module_codegen,\n                                 Some(rustc_middle::dep_graph::hash_result),\n                             )"}, {"sha": "14288e99242ac6b4b5c84423a8ec30c69c21f736", "filename": "src/global_asm.rs", "status": "modified", "additions": 44, "deletions": 33, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/48b312f04a89c72cf6db2cbb08bbc7fe6fce9bdb/src%2Fglobal_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48b312f04a89c72cf6db2cbb08bbc7fe6fce9bdb/src%2Fglobal_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fglobal_asm.rs?ref=48b312f04a89c72cf6db2cbb08bbc7fe6fce9bdb", "patch": "@@ -1,13 +1,14 @@\n //! The AOT driver uses [`cranelift_object`] to write object files suitable for linking into a\n //! standalone executable.\n \n-use std::io::{self, Write};\n+use std::io::Write;\n use std::path::PathBuf;\n use std::process::{Command, Stdio};\n+use std::sync::Arc;\n \n use rustc_ast::{InlineAsmOptions, InlineAsmTemplatePiece};\n use rustc_hir::ItemId;\n-use rustc_session::config::OutputType;\n+use rustc_session::config::{OutputFilenames, OutputType};\n \n use crate::prelude::*;\n \n@@ -31,52 +32,68 @@ pub(crate) fn codegen_global_asm_item(tcx: TyCtxt<'_>, global_asm: &mut String,\n     }\n }\n \n+#[derive(Debug)]\n+pub(crate) struct GlobalAsmConfig {\n+    asm_enabled: bool,\n+    assembler: PathBuf,\n+    linker: PathBuf,\n+    output_filenames: Arc<OutputFilenames>,\n+}\n+\n+impl GlobalAsmConfig {\n+    pub(crate) fn new(tcx: TyCtxt<'_>) -> Self {\n+        let asm_enabled = cfg!(feature = \"inline_asm\")\n+            && !tcx.sess.target.is_like_osx\n+            && !tcx.sess.target.is_like_windows;\n+\n+        GlobalAsmConfig {\n+            asm_enabled,\n+            assembler: crate::toolchain::get_toolchain_binary(tcx.sess, \"as\"),\n+            linker: crate::toolchain::get_toolchain_binary(tcx.sess, \"ld\"),\n+            output_filenames: tcx.output_filenames(()).clone(),\n+        }\n+    }\n+}\n+\n pub(crate) fn compile_global_asm(\n-    tcx: TyCtxt<'_>,\n+    config: &GlobalAsmConfig,\n     cgu_name: &str,\n     global_asm: &str,\n-) -> io::Result<()> {\n+) -> Result<(), String> {\n     if global_asm.is_empty() {\n         return Ok(());\n     }\n \n-    if cfg!(not(feature = \"inline_asm\"))\n-        || tcx.sess.target.is_like_osx\n-        || tcx.sess.target.is_like_windows\n-    {\n+    if !config.asm_enabled {\n         if global_asm.contains(\"__rust_probestack\") {\n             return Ok(());\n         }\n \n         // FIXME fix linker error on macOS\n         if cfg!(not(feature = \"inline_asm\")) {\n-            return Err(io::Error::new(\n-                io::ErrorKind::Unsupported,\n-                \"asm! and global_asm! support is disabled while compiling rustc_codegen_cranelift\",\n-            ));\n+            return Err(\n+                \"asm! and global_asm! support is disabled while compiling rustc_codegen_cranelift\"\n+                    .to_owned(),\n+            );\n         } else {\n-            return Err(io::Error::new(\n-                io::ErrorKind::Unsupported,\n-                \"asm! and global_asm! are not yet supported on macOS and Windows\",\n-            ));\n+            return Err(\n+                \"asm! and global_asm! are not yet supported on macOS and Windows\".to_owned()\n+            );\n         }\n     }\n \n-    let assembler = crate::toolchain::get_toolchain_binary(tcx.sess, \"as\");\n-    let linker = crate::toolchain::get_toolchain_binary(tcx.sess, \"ld\");\n-\n     // Remove all LLVM style comments\n     let global_asm = global_asm\n         .lines()\n         .map(|line| if let Some(index) = line.find(\"//\") { &line[0..index] } else { line })\n         .collect::<Vec<_>>()\n         .join(\"\\n\");\n \n-    let output_object_file = tcx.output_filenames(()).temp_path(OutputType::Object, Some(cgu_name));\n+    let output_object_file = config.output_filenames.temp_path(OutputType::Object, Some(cgu_name));\n \n     // Assemble `global_asm`\n     let global_asm_object_file = add_file_stem_postfix(output_object_file.clone(), \".asm\");\n-    let mut child = Command::new(assembler)\n+    let mut child = Command::new(&config.assembler)\n         .arg(\"-o\")\n         .arg(&global_asm_object_file)\n         .stdin(Stdio::piped())\n@@ -85,16 +102,13 @@ pub(crate) fn compile_global_asm(\n     child.stdin.take().unwrap().write_all(global_asm.as_bytes()).unwrap();\n     let status = child.wait().expect(\"Failed to wait for `as`.\");\n     if !status.success() {\n-        return Err(io::Error::new(\n-            io::ErrorKind::Other,\n-            format!(\"Failed to assemble `{}`\", global_asm),\n-        ));\n+        return Err(format!(\"Failed to assemble `{}`\", global_asm));\n     }\n \n     // Link the global asm and main object file together\n     let main_object_file = add_file_stem_postfix(output_object_file.clone(), \".main\");\n     std::fs::rename(&output_object_file, &main_object_file).unwrap();\n-    let status = Command::new(linker)\n+    let status = Command::new(&config.linker)\n         .arg(\"-r\") // Create a new object file\n         .arg(\"-o\")\n         .arg(output_object_file)\n@@ -103,13 +117,10 @@ pub(crate) fn compile_global_asm(\n         .status()\n         .unwrap();\n     if !status.success() {\n-        return Err(io::Error::new(\n-            io::ErrorKind::Other,\n-            format!(\n-                \"Failed to link `{}` and `{}` together\",\n-                main_object_file.display(),\n-                global_asm_object_file.display(),\n-            ),\n+        return Err(format!(\n+            \"Failed to link `{}` and `{}` together\",\n+            main_object_file.display(),\n+            global_asm_object_file.display(),\n         ));\n     }\n "}]}