{"sha": "a4955d1b2cbddd8cc921422ba026a23fbd451f2f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0OTU1ZDFiMmNiZGRkOGNjOTIxNDIyYmEwMjZhMjNmYmQ0NTFmMmY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-09-17T20:25:26Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-09-26T13:38:26Z"}, "message": "refactor NLL relate_tys to use Region internally, not RegionVid\n\nNo functional change.", "tree": {"sha": "05fb2d070f5eb98242f87203a392c6f8ff5bf272", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05fb2d070f5eb98242f87203a392c6f8ff5bf272"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4955d1b2cbddd8cc921422ba026a23fbd451f2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4955d1b2cbddd8cc921422ba026a23fbd451f2f", "html_url": "https://github.com/rust-lang/rust/commit/a4955d1b2cbddd8cc921422ba026a23fbd451f2f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4955d1b2cbddd8cc921422ba026a23fbd451f2f/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "689b791422b7c429e4efcd224b7412c0e47e0638", "url": "https://api.github.com/repos/rust-lang/rust/commits/689b791422b7c429e4efcd224b7412c0e47e0638", "html_url": "https://github.com/rust-lang/rust/commit/689b791422b7c429e4efcd224b7412c0e47e0638"}], "stats": {"total": 101, "additions": 42, "deletions": 59}, "files": [{"sha": "d919c5c02c64527fd414b490b1a9cbca637bd0b9", "filename": "src/librustc_mir/borrow_check/nll/type_check/relate_tys.rs", "status": "modified", "additions": 42, "deletions": 59, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/a4955d1b2cbddd8cc921422ba026a23fbd451f2f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4955d1b2cbddd8cc921422ba026a23fbd451f2f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs?ref=a4955d1b2cbddd8cc921422ba026a23fbd451f2f", "patch": "@@ -10,15 +10,13 @@\n \n use borrow_check::nll::constraints::{ConstraintCategory, OutlivesConstraint};\n use borrow_check::nll::type_check::{BorrowCheckContext, Locations};\n-use borrow_check::nll::universal_regions::UniversalRegions;\n-use borrow_check::nll::ToRegionVid;\n use rustc::infer::canonical::{Canonical, CanonicalVarInfos};\n use rustc::infer::{InferCtxt, NLLRegionVariableOrigin};\n use rustc::traits::query::Fallible;\n use rustc::ty::fold::{TypeFoldable, TypeVisitor};\n use rustc::ty::relate::{self, Relate, RelateResult, TypeRelation};\n use rustc::ty::subst::Kind;\n-use rustc::ty::{self, CanonicalTy, CanonicalVar, RegionVid, Ty, TyCtxt};\n+use rustc::ty::{self, CanonicalTy, CanonicalVar, Ty, TyCtxt};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::indexed_vec::IndexVec;\n \n@@ -122,10 +120,10 @@ struct TypeRelating<'cx, 'bccx: 'cx, 'gcx: 'tcx, 'tcx: 'bccx> {\n     ///\n     /// This field stores the instantiations for late-bound regions in\n     /// the `a` type.\n-    a_scopes: Vec<BoundRegionScope>,\n+    a_scopes: Vec<BoundRegionScope<'tcx>>,\n \n     /// Same as `a_scopes`, but for the `b` type.\n-    b_scopes: Vec<BoundRegionScope>,\n+    b_scopes: Vec<BoundRegionScope<'tcx>>,\n \n     /// Where (and why) is this relation taking place?\n     locations: Locations,\n@@ -152,13 +150,13 @@ struct TypeRelating<'cx, 'bccx: 'cx, 'gcx: 'tcx, 'tcx: 'bccx> {\n \n #[derive(Clone, Debug)]\n struct ScopesAndKind<'tcx> {\n-    scopes: Vec<BoundRegionScope>,\n+    scopes: Vec<BoundRegionScope<'tcx>>,\n     kind: Kind<'tcx>,\n }\n \n #[derive(Clone, Debug, Default)]\n-struct BoundRegionScope {\n-    map: FxHashMap<ty::BoundRegion, RegionVid>,\n+struct BoundRegionScope<'tcx> {\n+    map: FxHashMap<ty::BoundRegion, ty::Region<'tcx>>,\n }\n \n #[derive(Copy, Clone)]\n@@ -204,7 +202,7 @@ impl<'cx, 'bccx, 'gcx, 'tcx> TypeRelating<'cx, 'bccx, 'gcx, 'tcx> {\n         &mut self,\n         value: &ty::Binder<impl TypeFoldable<'tcx>>,\n         universally_quantified: UniversallyQuantified,\n-    ) -> BoundRegionScope {\n+    ) -> BoundRegionScope<'tcx> {\n         let mut scope = BoundRegionScope::default();\n         value.skip_binder().visit_with(&mut ScopeInstantiator {\n             infcx: self.infcx,\n@@ -227,8 +225,8 @@ impl<'cx, 'bccx, 'gcx, 'tcx> TypeRelating<'cx, 'bccx, 'gcx, 'tcx> {\n         debruijn: ty::DebruijnIndex,\n         br: &ty::BoundRegion,\n         first_free_index: ty::DebruijnIndex,\n-        scopes: &[BoundRegionScope],\n-    ) -> RegionVid {\n+        scopes: &[BoundRegionScope<'tcx>],\n+    ) -> ty::Region<'tcx> {\n         // The debruijn index is a \"reverse index\" into the\n         // scopes listing. So when we have INNERMOST (0), we\n         // want the *last* scope pushed, and so forth.\n@@ -245,28 +243,25 @@ impl<'cx, 'bccx, 'gcx, 'tcx> TypeRelating<'cx, 'bccx, 'gcx, 'tcx> {\n     /// with. Otherwise just return `r`.\n     fn replace_bound_region(\n         &self,\n-        universal_regions: &UniversalRegions<'tcx>,\n         r: ty::Region<'tcx>,\n         first_free_index: ty::DebruijnIndex,\n-        scopes: &[BoundRegionScope],\n-    ) -> RegionVid {\n-        match r {\n-            ty::ReLateBound(debruijn, br) => {\n-                Self::lookup_bound_region(*debruijn, br, first_free_index, scopes)\n-            }\n-\n-            ty::ReVar(v) => *v,\n-\n-            _ => universal_regions.to_region_vid(r),\n+        scopes: &[BoundRegionScope<'tcx>],\n+    ) -> ty::Region<'tcx> {\n+        if let ty::ReLateBound(debruijn, br) = r {\n+            Self::lookup_bound_region(*debruijn, br, first_free_index, scopes)\n+        } else {\n+            r\n         }\n     }\n \n     /// Push a new outlives requirement into our output set of\n     /// constraints.\n-    fn push_outlives(&mut self, sup: RegionVid, sub: RegionVid) {\n+    fn push_outlives(&mut self, sup: ty::Region<'tcx>, sub: ty::Region<'tcx>) {\n         debug!(\"push_outlives({:?}: {:?})\", sup, sub);\n \n         if let Some(borrowck_context) = &mut self.borrowck_context {\n+            let sub = borrowck_context.universal_regions.to_region_vid(sub);\n+            let sup = borrowck_context.universal_regions.to_region_vid(sup);\n             borrowck_context\n                 .constraints\n                 .outlives_constraints\n@@ -316,10 +311,7 @@ impl<'cx, 'bccx, 'gcx, 'tcx> TypeRelating<'cx, 'bccx, 'gcx, 'tcx> {\n         return result;\n     }\n \n-    fn generalize_value(\n-        &self,\n-        kind: Kind<'tcx>,\n-    ) -> Kind<'tcx> {\n+    fn generalize_value(&self, kind: Kind<'tcx>) -> Kind<'tcx> {\n         TypeGeneralizer {\n             type_rel: self,\n             first_free_index: ty::INNERMOST,\n@@ -397,37 +389,30 @@ impl<'cx, 'bccx, 'gcx, 'tcx> TypeRelation<'cx, 'gcx, 'tcx>\n         a: ty::Region<'tcx>,\n         b: ty::Region<'tcx>,\n     ) -> RelateResult<'tcx, ty::Region<'tcx>> {\n-        if let Some(&mut BorrowCheckContext {\n-            universal_regions, ..\n-        }) = self.borrowck_context\n-        {\n-            if let ty::ReCanonical(var) = a {\n-                self.relate_var(*var, b.into())?;\n-                return Ok(a);\n-            }\n+        if let ty::ReCanonical(var) = a {\n+            self.relate_var(*var, b.into())?;\n+            return Ok(a);\n+        }\n \n-            debug!(\n-                \"regions(a={:?}, b={:?}, variance={:?})\",\n-                a, b, self.ambient_variance\n-            );\n+        debug!(\n+            \"regions(a={:?}, b={:?}, variance={:?})\",\n+            a, b, self.ambient_variance\n+        );\n \n-            let v_a =\n-                self.replace_bound_region(universal_regions, a, ty::INNERMOST, &self.a_scopes);\n-            let v_b =\n-                self.replace_bound_region(universal_regions, b, ty::INNERMOST, &self.b_scopes);\n+        let v_a = self.replace_bound_region(a, ty::INNERMOST, &self.a_scopes);\n+        let v_b = self.replace_bound_region(b, ty::INNERMOST, &self.b_scopes);\n \n-            debug!(\"regions: v_a = {:?}\", v_a);\n-            debug!(\"regions: v_b = {:?}\", v_b);\n+        debug!(\"regions: v_a = {:?}\", v_a);\n+        debug!(\"regions: v_b = {:?}\", v_b);\n \n-            if self.ambient_covariance() {\n-                // Covariance: a <= b. Hence, `b: a`.\n-                self.push_outlives(v_b, v_a);\n-            }\n+        if self.ambient_covariance() {\n+            // Covariance: a <= b. Hence, `b: a`.\n+            self.push_outlives(v_b, v_a);\n+        }\n \n-            if self.ambient_contravariance() {\n-                // Contravariant: b <= a. Hence, `a: b`.\n-                self.push_outlives(v_a, v_b);\n-            }\n+        if self.ambient_contravariance() {\n+            // Contravariant: b <= a. Hence, `a: b`.\n+            self.push_outlives(v_a, v_b);\n         }\n \n         Ok(a)\n@@ -527,10 +512,8 @@ impl<'cx, 'bccx, 'gcx, 'tcx> TypeRelation<'cx, 'gcx, 'tcx>\n \n             // Reset ambient variance to contravariance. See the\n             // covariant case above for an explanation.\n-            let variance = ::std::mem::replace(\n-                &mut self.ambient_variance,\n-                ty::Variance::Contravariant,\n-            );\n+            let variance =\n+                ::std::mem::replace(&mut self.ambient_variance, ty::Variance::Contravariant);\n \n             self.relate(a.skip_binder(), b.skip_binder())?;\n \n@@ -556,7 +539,7 @@ struct ScopeInstantiator<'cx, 'gcx: 'tcx, 'tcx: 'cx> {\n     // The debruijn index of the scope we are instantiating.\n     target_index: ty::DebruijnIndex,\n     universally_quantified: UniversallyQuantified,\n-    bound_region_scope: &'cx mut BoundRegionScope,\n+    bound_region_scope: &'cx mut BoundRegionScope<'tcx>,\n }\n \n impl<'cx, 'gcx, 'tcx> TypeVisitor<'tcx> for ScopeInstantiator<'cx, 'gcx, 'tcx> {\n@@ -583,7 +566,7 @@ impl<'cx, 'gcx, 'tcx> TypeVisitor<'tcx> for ScopeInstantiator<'cx, 'gcx, 'tcx> {\n                     } else {\n                         NLLRegionVariableOrigin::Existential\n                     };\n-                    infcx.next_nll_region_var(origin).to_region_vid()\n+                    infcx.next_nll_region_var(origin)\n                 });\n             }\n "}]}