{"sha": "bbf8ba7c2351caba1b585346e5709f8eb476f169", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiZjhiYTdjMjM1MWNhYmExYjU4NTM0NmU1NzA5ZjhlYjQ3NmYxNjk=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2015-05-24T08:38:59Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2015-05-24T08:38:59Z"}, "message": "Implement Eq for Cell and RefCell.\n\n`core::cell::Cell<T>` and `core::cell::RefCell<T>` currently implement\n`PartialEq` when `T` does, and just defer to comparing `T` values.\nThere is no reason the same shouldn\u2019t apply to `Eq`.\n\nThis enables `#[derive(Eq, PartialEq)]` on e.g.\nstructs that have a `RefCell` field.", "tree": {"sha": "86db90d256b1ecd5d413e71c7d658347318dc082", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86db90d256b1ecd5d413e71c7d658347318dc082"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bbf8ba7c2351caba1b585346e5709f8eb476f169", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bbf8ba7c2351caba1b585346e5709f8eb476f169", "html_url": "https://github.com/rust-lang/rust/commit/bbf8ba7c2351caba1b585346e5709f8eb476f169", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bbf8ba7c2351caba1b585346e5709f8eb476f169/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0fc0476e6ae2bcc5cce75d78548cf037b6692a97", "url": "https://api.github.com/repos/rust-lang/rust/commits/0fc0476e6ae2bcc5cce75d78548cf037b6692a97", "html_url": "https://github.com/rust-lang/rust/commit/0fc0476e6ae2bcc5cce75d78548cf037b6692a97"}], "stats": {"total": 10, "additions": 8, "deletions": 2}, "files": [{"sha": "8f531de261118b2751ea22bd07af188a52e14596", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bbf8ba7c2351caba1b585346e5709f8eb476f169/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf8ba7c2351caba1b585346e5709f8eb476f169/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=bbf8ba7c2351caba1b585346e5709f8eb476f169", "patch": "@@ -143,7 +143,7 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use clone::Clone;\n-use cmp::PartialEq;\n+use cmp::{PartialEq, Eq};\n use default::Default;\n use marker::{Copy, Send, Sync, Sized};\n use ops::{Deref, DerefMut, Drop};\n@@ -263,6 +263,9 @@ impl<T:PartialEq + Copy> PartialEq for Cell<T> {\n     }\n }\n \n+#[stable(feature = \"cell_eq\", since = \"1.2.0\")]\n+impl<T:Eq + Copy> Eq for Cell<T> {}\n+\n /// A mutable memory location with dynamically checked borrow rules\n ///\n /// See the [module-level documentation](index.html) for more.\n@@ -273,7 +276,7 @@ pub struct RefCell<T: ?Sized> {\n }\n \n /// An enumeration of values returned from the `state` method on a `RefCell<T>`.\n-#[derive(Copy, Clone, PartialEq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Eq, Debug)]\n #[unstable(feature = \"std_misc\")]\n pub enum BorrowState {\n     /// The cell is currently being read, there is at least one active `borrow`.\n@@ -479,6 +482,9 @@ impl<T: ?Sized + PartialEq> PartialEq for RefCell<T> {\n     }\n }\n \n+#[stable(feature = \"cell_eq\", since = \"1.2.0\")]\n+impl<T: ?Sized + Eq> Eq for RefCell<T> {}\n+\n struct BorrowRef<'b> {\n     _borrow: &'b Cell<BorrowFlag>,\n }"}]}