{"sha": "2daecf7c455a8ff0d2690b361441558a4212fd85", "node_id": "C_kwDOAAsO6NoAKDJkYWVjZjdjNDU1YThmZjBkMjY5MGIzNjE0NDE1NThhNDIxMmZkODU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-05-26T06:24:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-26T06:24:08Z"}, "message": "Rollup merge of #111940 - zirconium-n:io-read-doc-change, r=thomcc\n\nClarify safety concern of `io::Read::read` is only relevant in unsafe code\n\nWe have this clarification note in other similar place like [Iterator::size_hint](https://doc.rust-lang.org/stable/std/iter/trait.Iterator.html#method.size_hint).\n\nThe lack of clarification might lead to confusion to Rust beginners. [Relevant URLO post](https://users.rust-lang.org/t/can-read-overflow-a-buffer/94347).", "tree": {"sha": "021a707f707f0d8efe76d52c8d5993e334bd3352", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/021a707f707f0d8efe76d52c8d5993e334bd3352"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2daecf7c455a8ff0d2690b361441558a4212fd85", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkcFCICRBK7hj4Ov3rIwAA4ycIAF6uB45J5/XtbjQqHPPi/vYn\niPRCEdrkPrwVXtX3YKBQt8ZDD/j0zd6IUOgJbcWmOVveEc+bXvvUOoor3SG7+hXk\nSfBzqI/zITTJCT6Z8B4rAfInmH9draeWBolllKvchtBt3htycX1oWGc3q54PbGVk\nDbengjjdYc4l1qRRHhAmR1t6gLz1eNxWPfiE9UpHITIGo0x0TmjxzNuLPyOmMnr7\nlOw2hgB6ciFr7cnvyTgs9sYkco/8svQsjhBMkqrzj4wKAlvljiX3bffRPJeapLuS\nIfCSbyihfw3azch94gDFAbUzXBDBGunk8dBfJ+l7aPRGUTBuLtZNPFlfSUx99rE=\n=hLP5\n-----END PGP SIGNATURE-----\n", "payload": "tree 021a707f707f0d8efe76d52c8d5993e334bd3352\nparent 78cc117f7bb994f49c7f9b58dcf7807b18d69e28\nparent dd56f930cc6e174a24ddd1ea5f1bbf9af978abf9\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1685082248 +0200\ncommitter GitHub <noreply@github.com> 1685082248 +0200\n\nRollup merge of #111940 - zirconium-n:io-read-doc-change, r=thomcc\n\nClarify safety concern of `io::Read::read` is only relevant in unsafe code\n\nWe have this clarification note in other similar place like [Iterator::size_hint](https://doc.rust-lang.org/stable/std/iter/trait.Iterator.html#method.size_hint).\n\nThe lack of clarification might lead to confusion to Rust beginners. [Relevant URLO post](https://users.rust-lang.org/t/can-read-overflow-a-buffer/94347).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2daecf7c455a8ff0d2690b361441558a4212fd85", "html_url": "https://github.com/rust-lang/rust/commit/2daecf7c455a8ff0d2690b361441558a4212fd85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2daecf7c455a8ff0d2690b361441558a4212fd85/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78cc117f7bb994f49c7f9b58dcf7807b18d69e28", "url": "https://api.github.com/repos/rust-lang/rust/commits/78cc117f7bb994f49c7f9b58dcf7807b18d69e28", "html_url": "https://github.com/rust-lang/rust/commit/78cc117f7bb994f49c7f9b58dcf7807b18d69e28"}, {"sha": "dd56f930cc6e174a24ddd1ea5f1bbf9af978abf9", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd56f930cc6e174a24ddd1ea5f1bbf9af978abf9", "html_url": "https://github.com/rust-lang/rust/commit/dd56f930cc6e174a24ddd1ea5f1bbf9af978abf9"}], "stats": {"total": 7, "additions": 4, "deletions": 3}, "files": [{"sha": "8a007d095d5e3a8f42474c0c4530d06f451c04af", "filename": "library/std/src/io/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2daecf7c455a8ff0d2690b361441558a4212fd85/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2daecf7c455a8ff0d2690b361441558a4212fd85/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fmod.rs?ref=2daecf7c455a8ff0d2690b361441558a4212fd85", "patch": "@@ -593,7 +593,8 @@ pub trait Read {\n     /// This may happen for example because fewer bytes are actually available right now\n     /// (e. g. being close to end-of-file) or because read() was interrupted by a signal.\n     ///\n-    /// As this trait is safe to implement, callers cannot rely on `n <= buf.len()` for safety.\n+    /// As this trait is safe to implement, callers in unsafe code cannot rely on\n+    /// `n <= buf.len()` for safety.\n     /// Extra care needs to be taken when `unsafe` functions are used to access the read bytes.\n     /// Callers have to ensure that no unchecked out-of-bounds accesses are possible even if\n     /// `n > buf.len()`.\n@@ -603,8 +604,8 @@ pub trait Read {\n     /// contents of `buf` being true. It is recommended that *implementations*\n     /// only write data to `buf` instead of reading its contents.\n     ///\n-    /// Correspondingly, however, *callers* of this method must not assume any guarantees\n-    /// about how the implementation uses `buf`. The trait is safe to implement,\n+    /// Correspondingly, however, *callers* of this method in unsafe code must not assume\n+    /// any guarantees about how the implementation uses `buf`. The trait is safe to implement,\n     /// so it is possible that the code that's supposed to write to the buffer might also read\n     /// from it. It is your responsibility to make sure that `buf` is initialized\n     /// before calling `read`. Calling `read` with an uninitialized `buf` (of the kind one"}]}