{"sha": "2887426da0ec8b4f8fc97894a5a29026d5259293", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4ODc0MjZkYTBlYzhiNGY4ZmM5Nzg5NGE1YTI5MDI2ZDUyNTkyOTM=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-02-17T14:00:44Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-02-17T14:00:44Z"}, "message": "Revert \"Replace usage of ast::NameOrNameRef with ast::NameLike\"\n\nThis reverts commit e1dbf43cf85f84c3a7e40f9731fc1f7ac96f8979.", "tree": {"sha": "38415f704e55200924997b16bcf69f6acbb3d886", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38415f704e55200924997b16bcf69f6acbb3d886"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2887426da0ec8b4f8fc97894a5a29026d5259293", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2887426da0ec8b4f8fc97894a5a29026d5259293", "html_url": "https://github.com/rust-lang/rust/commit/2887426da0ec8b4f8fc97894a5a29026d5259293", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2887426da0ec8b4f8fc97894a5a29026d5259293/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4054525c418085db4ceb2df70475a1ac9c019aff", "url": "https://api.github.com/repos/rust-lang/rust/commits/4054525c418085db4ceb2df70475a1ac9c019aff", "html_url": "https://github.com/rust-lang/rust/commit/4054525c418085db4ceb2df70475a1ac9c019aff"}], "stats": {"total": 54, "additions": 26, "deletions": 28}, "files": [{"sha": "c7609e90d98016d75232a88a4e448a8c7f50dcd5", "filename": "crates/hir_expand/src/name.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2887426da0ec8b4f8fc97894a5a29026d5259293/crates%2Fhir_expand%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2887426da0ec8b4f8fc97894a5a29026d5259293/crates%2Fhir_expand%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fname.rs?ref=2887426da0ec8b4f8fc97894a5a29026d5259293", "patch": "@@ -87,18 +87,11 @@ impl AsName for ast::Name {\n     }\n }\n \n-impl AsName for ast::Lifetime {\n-    fn as_name(&self) -> Name {\n-        Name::resolve(self.text())\n-    }\n-}\n-\n-impl AsName for ast::NameLike {\n+impl AsName for ast::NameOrNameRef {\n     fn as_name(&self) -> Name {\n         match self {\n-            ast::NameLike::Name(it) => it.as_name(),\n-            ast::NameLike::NameRef(it) => it.as_name(),\n-            ast::NameLike::Lifetime(it) => it.as_name(),\n+            ast::NameOrNameRef::Name(it) => it.as_name(),\n+            ast::NameOrNameRef::NameRef(it) => it.as_name(),\n         }\n     }\n }"}, {"sha": "b3a24d39d8bae073065302b8e7d3ae0063d998f0", "filename": "crates/syntax/src/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2887426da0ec8b4f8fc97894a5a29026d5259293/crates%2Fsyntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2887426da0ec8b4f8fc97894a5a29026d5259293/crates%2Fsyntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast.rs?ref=2887426da0ec8b4f8fc97894a5a29026d5259293", "patch": "@@ -19,8 +19,8 @@ pub use self::{\n     expr_ext::{ArrayExprKind, BinOp, Effect, ElseBranch, LiteralKind, PrefixOp, RangeOp},\n     generated::{nodes::*, tokens::*},\n     node_ext::{\n-        AttrKind, FieldKind, Macro, NameLike, PathSegmentKind, SelfParamKind, SlicePatComponents,\n-        StructKind, TypeBoundKind, VisibilityKind,\n+        AttrKind, FieldKind, Macro, NameLike, NameOrNameRef, PathSegmentKind, SelfParamKind,\n+        SlicePatComponents, StructKind, TypeBoundKind, VisibilityKind,\n     },\n     token_ext::*,\n     traits::*,"}, {"sha": "2fa7b8c1e1b4c2d7bb8562e53cf4416e88220c82", "filename": "crates/syntax/src/ast/node_ext.rs", "status": "modified", "additions": 21, "deletions": 16, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/2887426da0ec8b4f8fc97894a5a29026d5259293/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2887426da0ec8b4f8fc97894a5a29026d5259293/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=2887426da0ec8b4f8fc97894a5a29026d5259293", "patch": "@@ -297,7 +297,7 @@ impl ast::RecordExprField {\n     }\n }\n \n-#[derive(Debug, Clone, PartialEq)]\n+#[derive(Debug, Clone)]\n pub enum NameLike {\n     NameRef(ast::NameRef),\n     Name(ast::Name),\n@@ -335,16 +335,6 @@ impl ast::AstNode for NameLike {\n     }\n }\n \n-impl fmt::Display for NameLike {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self {\n-            NameLike::Name(it) => fmt::Display::fmt(it, f),\n-            NameLike::NameRef(it) => fmt::Display::fmt(it, f),\n-            NameLike::Lifetime(it) => fmt::Display::fmt(it, f),\n-        }\n-    }\n-}\n-\n mod __ {\n     use super::{\n         ast::{Lifetime, Name, NameRef},\n@@ -353,11 +343,26 @@ mod __ {\n     stdx::impl_from!(NameRef, Name, Lifetime for NameLike);\n }\n \n+#[derive(Debug, Clone, PartialEq)]\n+pub enum NameOrNameRef {\n+    Name(ast::Name),\n+    NameRef(ast::NameRef),\n+}\n+\n+impl fmt::Display for NameOrNameRef {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match self {\n+            NameOrNameRef::Name(it) => fmt::Display::fmt(it, f),\n+            NameOrNameRef::NameRef(it) => fmt::Display::fmt(it, f),\n+        }\n+    }\n+}\n+\n impl ast::RecordPatField {\n     pub fn for_field_name_ref(field_name: &ast::NameRef) -> Option<ast::RecordPatField> {\n         let candidate = field_name.syntax().parent().and_then(ast::RecordPatField::cast)?;\n         match candidate.field_name()? {\n-            NameLike::NameRef(name_ref) if name_ref == *field_name => Some(candidate),\n+            NameOrNameRef::NameRef(name_ref) if name_ref == *field_name => Some(candidate),\n             _ => None,\n         }\n     }\n@@ -366,19 +371,19 @@ impl ast::RecordPatField {\n         let candidate =\n             field_name.syntax().ancestors().nth(2).and_then(ast::RecordPatField::cast)?;\n         match candidate.field_name()? {\n-            NameLike::Name(name) if name == *field_name => Some(candidate),\n+            NameOrNameRef::Name(name) if name == *field_name => Some(candidate),\n             _ => None,\n         }\n     }\n \n     /// Deals with field init shorthand\n-    pub fn field_name(&self) -> Option<NameLike> {\n+    pub fn field_name(&self) -> Option<NameOrNameRef> {\n         if let Some(name_ref) = self.name_ref() {\n-            return Some(NameLike::NameRef(name_ref));\n+            return Some(NameOrNameRef::NameRef(name_ref));\n         }\n         if let Some(ast::Pat::IdentPat(pat)) = self.pat() {\n             let name = pat.name()?;\n-            return Some(NameLike::Name(name));\n+            return Some(NameOrNameRef::Name(name));\n         }\n         None\n     }"}]}