{"sha": "5cbbc1282726102a796b1475490e884144bb7146", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjYmJjMTI4MjcyNjEwMmE3OTZiMTQ3NTQ5MGU4ODQxNDRiYjcxNDY=", "commit": {"author": {"name": "Alexis", "email": "a.beingessner@gmail.com", "date": "2015-02-05T00:36:02Z"}, "committer": {"name": "Alexis", "email": "a.beingessner@gmail.com", "date": "2015-02-05T00:42:58Z"}, "message": "stabilize core Entry API", "tree": {"sha": "0311c534e60a1171af54b9ba15000bddc92a7b49", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0311c534e60a1171af54b9ba15000bddc92a7b49"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5cbbc1282726102a796b1475490e884144bb7146", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5cbbc1282726102a796b1475490e884144bb7146", "html_url": "https://github.com/rust-lang/rust/commit/5cbbc1282726102a796b1475490e884144bb7146", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5cbbc1282726102a796b1475490e884144bb7146/comments", "author": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba2f13ef0667ce90f55ab0f1506bf5ee7b852d96", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba2f13ef0667ce90f55ab0f1506bf5ee7b852d96", "html_url": "https://github.com/rust-lang/rust/commit/ba2f13ef0667ce90f55ab0f1506bf5ee7b852d96"}], "stats": {"total": 65, "additions": 25, "deletions": 40}, "files": [{"sha": "d7f89b0cc72f13791811f2a61b3e2d3f8ab05b18", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 9, "deletions": 17, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5cbbc1282726102a796b1475490e884144bb7146/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cbbc1282726102a796b1475490e884144bb7146/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=5cbbc1282726102a796b1475490e884144bb7146", "patch": "@@ -15,7 +15,7 @@\n // writing (August 2014) freely licensed under the following Creative Commons Attribution\n // License: [CC BY 2.5 CA](http://creativecommons.org/licenses/by/2.5/ca/).\n \n-pub use self::Entry::*;\n+use self::Entry::*;\n \n use core::prelude::*;\n \n@@ -1137,47 +1137,41 @@ impl<'a, K: Ord, V> Entry<'a, K, V> {\n impl<'a, K: Ord, V> VacantEntry<'a, K, V> {\n     /// Sets the value of the entry with the VacantEntry's key,\n     /// and returns a mutable reference to it.\n-    #[unstable(feature = \"collections\",\n-               reason = \"matches collection reform v2 specification, waiting for dust to settle\")]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn insert(self, value: V) -> &'a mut V {\n         self.stack.insert(self.key, value)\n     }\n }\n \n impl<'a, K: Ord, V> OccupiedEntry<'a, K, V> {\n     /// Gets a reference to the value in the entry.\n-    #[unstable(feature = \"collections\",\n-               reason = \"matches collection reform v2 specification, waiting for dust to settle\")]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn get(&self) -> &V {\n         self.stack.peek()\n     }\n \n     /// Gets a mutable reference to the value in the entry.\n-    #[unstable(feature = \"collections\",\n-               reason = \"matches collection reform v2 specification, waiting for dust to settle\")]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn get_mut(&mut self) -> &mut V {\n         self.stack.peek_mut()\n     }\n \n     /// Converts the entry into a mutable reference to its value.\n-    #[unstable(feature = \"collections\",\n-               reason = \"matches collection reform v2 specification, waiting for dust to settle\")]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn into_mut(self) -> &'a mut V {\n         self.stack.into_top()\n     }\n \n     /// Sets the value of the entry with the OccupiedEntry's key,\n     /// and returns the entry's old value.\n-    #[unstable(feature = \"collections\",\n-               reason = \"matches collection reform v2 specification, waiting for dust to settle\")]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn insert(&mut self, mut value: V) -> V {\n         mem::swap(self.stack.peek_mut(), &mut value);\n         value\n     }\n \n     /// Takes the value of the entry out of the map, and returns it.\n-    #[unstable(feature = \"collections\",\n-               reason = \"matches collection reform v2 specification, waiting for dust to settle\")]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn remove(self) -> V {\n         self.stack.remove()\n     }\n@@ -1563,10 +1557,8 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     ///\n     /// assert_eq!(count[\"a\"], 3u);\n     /// ```\n-    /// The key must have the same ordering before or after `.to_owned()` is called.\n-    #[unstable(feature = \"collections\",\n-               reason = \"precise API still under development\")]\n-    pub fn entry<'a>(&'a mut self, mut key: K) -> Entry<'a, K, V> {\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    pub fn entry(&mut self, mut key: K) -> Entry<K, V> {\n         // same basic logic of `swap` and `pop`, blended together\n         let mut stack = stack::PartialSearchStack::new(self);\n         loop {"}, {"sha": "a907d6241697f866dce6492b75310eaee3ee2269", "filename": "src/libcollections/vec_map.rs", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5cbbc1282726102a796b1475490e884144bb7146/src%2Flibcollections%2Fvec_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cbbc1282726102a796b1475490e884144bb7146/src%2Flibcollections%2Fvec_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_map.rs?ref=5cbbc1282726102a796b1475490e884144bb7146", "patch": "@@ -13,7 +13,7 @@\n \n #![allow(missing_docs)]\n \n-pub use self::Entry::*;\n+use self::Entry::*;\n \n use core::prelude::*;\n \n@@ -539,8 +539,7 @@ impl<V> VecMap<V> {\n     ///\n     /// assert_eq!(count[1], 3);\n     /// ```\n-    #[unstable(feature = \"collections\",\n-               reason = \"precise API still under development\")]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn entry(&mut self, key: usize) -> Entry<V> {\n         // FIXME(Gankro): this is basically the dumbest implementation of\n         // entry possible, because weird non-lexical borrows issues make it\n@@ -576,8 +575,7 @@ impl<'a, V> Entry<'a, V> {\n impl<'a, V> VacantEntry<'a, V> {\n     /// Sets the value of the entry with the VacantEntry's key,\n     /// and returns a mutable reference to it.\n-    #[unstable(feature = \"collections\",\n-               reason = \"matches collection reform v2 specification, waiting for dust to settle\")]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn insert(self, value: V) -> &'a mut V {\n         let index = self.index;\n         self.map.insert(index, value);\n@@ -587,41 +585,36 @@ impl<'a, V> VacantEntry<'a, V> {\n \n impl<'a, V> OccupiedEntry<'a, V> {\n     /// Gets a reference to the value in the entry.\n-    #[unstable(feature = \"collections\",\n-               reason = \"matches collection reform v2 specification, waiting for dust to settle\")]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn get(&self) -> &V {\n         let index = self.index;\n         &self.map[index]\n     }\n \n     /// Gets a mutable reference to the value in the entry.\n-    #[unstable(feature = \"collections\",\n-               reason = \"matches collection reform v2 specification, waiting for dust to settle\")]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn get_mut(&mut self) -> &mut V {\n         let index = self.index;\n         &mut self.map[index]\n     }\n \n     /// Converts the entry into a mutable reference to its value.\n-    #[unstable(feature = \"collections\",\n-               reason = \"matches collection reform v2 specification, waiting for dust to settle\")]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn into_mut(self) -> &'a mut V {\n         let index = self.index;\n         &mut self.map[index]\n     }\n \n     /// Sets the value of the entry with the OccupiedEntry's key,\n     /// and returns the entry's old value.\n-    #[unstable(feature = \"collections\",\n-               reason = \"matches collection reform v2 specification, waiting for dust to settle\")]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn insert(&mut self, value: V) -> V {\n         let index = self.index;\n         self.map.insert(index, value).unwrap()\n     }\n \n     /// Takes the value of the entry out of the map, and returns it.\n-    #[unstable(feature = \"collections\",\n-               reason = \"matches collection reform v2 specification, waiting for dust to settle\")]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn remove(self) -> V {\n         let index = self.index;\n         self.map.remove(&index).unwrap()"}, {"sha": "d23d806ef59837ecb1922f10624d58bebb1b08c1", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5cbbc1282726102a796b1475490e884144bb7146/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cbbc1282726102a796b1475490e884144bb7146/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=5cbbc1282726102a796b1475490e884144bb7146", "patch": "@@ -929,10 +929,8 @@ impl<K, V, S, H> HashMap<K, V, S>\n     }\n \n     /// Gets the given key's corresponding entry in the map for in-place manipulation.\n-    #[unstable(feature = \"std_misc\",\n-               reason = \"precise API still being fleshed out\")]\n-    pub fn entry<'a>(&'a mut self, key: K) -> Entry<'a, K, V>\n-    {\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    pub fn entry(&mut self, key: K) -> Entry<K, V> {\n         // Gotta resize now.\n         self.reserve(1);\n \n@@ -1496,43 +1494,45 @@ impl<'a, K, V> Entry<'a, K, V> {\n     }\n }\n \n-#[unstable(feature = \"std_misc\",\n-           reason = \"matches collection reform v2 specification, waiting for dust to settle\")]\n impl<'a, K, V> OccupiedEntry<'a, K, V> {\n     /// Gets a reference to the value in the entry.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn get(&self) -> &V {\n         self.elem.read().1\n     }\n \n     /// Gets a mutable reference to the value in the entry.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn get_mut(&mut self) -> &mut V {\n         self.elem.read_mut().1\n     }\n \n     /// Converts the OccupiedEntry into a mutable reference to the value in the entry\n     /// with a lifetime bound to the map itself\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn into_mut(self) -> &'a mut V {\n         self.elem.into_mut_refs().1\n     }\n \n     /// Sets the value of the entry, and returns the entry's old value\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn insert(&mut self, mut value: V) -> V {\n         let old_value = self.get_mut();\n         mem::swap(&mut value, old_value);\n         value\n     }\n \n     /// Takes the value out of the entry, and returns it\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn remove(self) -> V {\n         pop_internal(self.elem).1\n     }\n }\n \n-#[unstable(feature = \"std_misc\",\n-           reason = \"matches collection reform v2 specification, waiting for dust to settle\")]\n impl<'a, K: 'a, V: 'a> VacantEntry<'a, K, V> {\n     /// Sets the value of the entry with the VacantEntry's key,\n     /// and returns a mutable reference to it\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn insert(self, value: V) -> &'a mut V {\n         match self.elem {\n             NeqElem(bucket, ib) => {"}]}