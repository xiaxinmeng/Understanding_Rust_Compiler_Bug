{"sha": "5c7bd52a7824fd1177e0b5c65ad063a23657d8b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjN2JkNTJhNzgyNGZkMTE3N2UwYjVjNjVhZDA2M2EyMzY1N2Q4YjQ=", "commit": {"author": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-11-28T16:56:45Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-12-02T16:03:00Z"}, "message": "Lint for redundant branches in or-patterns", "tree": {"sha": "6787c6db42c2842bf92c6092a401f52c344531e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6787c6db42c2842bf92c6092a401f52c344531e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c7bd52a7824fd1177e0b5c65ad063a23657d8b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c7bd52a7824fd1177e0b5c65ad063a23657d8b4", "html_url": "https://github.com/rust-lang/rust/commit/5c7bd52a7824fd1177e0b5c65ad063a23657d8b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c7bd52a7824fd1177e0b5c65ad063a23657d8b4/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00ccadf43f02c1991e352a1eb3e0880ada52cada", "url": "https://api.github.com/repos/rust-lang/rust/commits/00ccadf43f02c1991e352a1eb3e0880ada52cada", "html_url": "https://github.com/rust-lang/rust/commit/00ccadf43f02c1991e352a1eb3e0880ada52cada"}], "stats": {"total": 106, "additions": 87, "deletions": 19}, "files": [{"sha": "37a9381271a8cd6bcee2459257ed8fcc53252ad3", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 29, "deletions": 11, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/5c7bd52a7824fd1177e0b5c65ad063a23657d8b4/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c7bd52a7824fd1177e0b5c65ad063a23657d8b4/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=5c7bd52a7824fd1177e0b5c65ad063a23657d8b4", "patch": "@@ -455,6 +455,7 @@ impl<'p, 'tcx> FromIterator<&'p Pat<'tcx>> for PatStack<'p, 'tcx> {\n }\n \n /// A 2D matrix.\n+#[derive(Clone)]\n pub struct Matrix<'p, 'tcx>(Vec<PatStack<'p, 'tcx>>);\n \n impl<'p, 'tcx> Matrix<'p, 'tcx> {\n@@ -1025,17 +1026,19 @@ impl<'tcx> Constructor<'tcx> {\n }\n \n #[derive(Clone, Debug)]\n-pub enum Usefulness<'tcx> {\n-    Useful,\n+pub enum Usefulness<'tcx, 'p> {\n+    /// Carries a list of unreachable subpatterns. Used only in the presence of or-patterns.\n+    Useful(Vec<&'p Pat<'tcx>>),\n+    /// Carries a list of witnesses of non-exhaustiveness.\n     UsefulWithWitness(Vec<Witness<'tcx>>),\n     NotUseful,\n }\n \n-impl<'tcx> Usefulness<'tcx> {\n+impl<'tcx, 'p> Usefulness<'tcx, 'p> {\n     fn new_useful(preference: WitnessPreference) -> Self {\n         match preference {\n             ConstructWitness => UsefulWithWitness(vec![Witness(vec![])]),\n-            LeaveOutWitness => Useful,\n+            LeaveOutWitness => Useful(vec![]),\n         }\n     }\n \n@@ -1602,7 +1605,7 @@ pub fn is_useful<'p, 'tcx>(\n     v: &PatStack<'p, 'tcx>,\n     witness_preference: WitnessPreference,\n     hir_id: HirId,\n-) -> Usefulness<'tcx> {\n+) -> Usefulness<'tcx, 'p> {\n     let &Matrix(ref rows) = matrix;\n     debug!(\"is_useful({:#?}, {:#?})\", matrix, v);\n \n@@ -1623,11 +1626,26 @@ pub fn is_useful<'p, 'tcx>(\n \n     // If the first pattern is an or-pattern, expand it.\n     if let Some(vs) = v.expand_or_pat() {\n-        return vs\n-            .into_iter()\n-            .map(|v| is_useful(cx, matrix, &v, witness_preference, hir_id))\n-            .find(|result| result.is_useful())\n-            .unwrap_or(NotUseful);\n+        // We need to push the already-seen patterns into the matrix in order to detect redundant\n+        // branches like `Some(_) | Some(0)`. We also keep track of the unreachable subpatterns.\n+        let mut matrix = matrix.clone();\n+        let mut unreachable_pats = Vec::new();\n+        let mut any_is_useful = false;\n+        for v in vs {\n+            let res = is_useful(cx, &matrix, &v, witness_preference, hir_id);\n+            match res {\n+                Useful(pats) => {\n+                    any_is_useful = true;\n+                    unreachable_pats.extend(pats);\n+                }\n+                NotUseful => unreachable_pats.push(v.head()),\n+                UsefulWithWitness(_) => {\n+                    bug!(\"Encountered or-pat in `v` during exhaustiveness checking\")\n+                }\n+            }\n+            matrix.push(v);\n+        }\n+        return if any_is_useful { Useful(unreachable_pats) } else { NotUseful };\n     }\n \n     let (ty, span) = matrix\n@@ -1768,7 +1786,7 @@ fn is_useful_specialized<'p, 'tcx>(\n     lty: Ty<'tcx>,\n     witness_preference: WitnessPreference,\n     hir_id: HirId,\n-) -> Usefulness<'tcx> {\n+) -> Usefulness<'tcx, 'p> {\n     debug!(\"is_useful_specialized({:#?}, {:#?}, {:?})\", v, ctor, lty);\n \n     let ctor_wild_subpatterns ="}, {"sha": "a6a043c23dd06738bd35cc38e22a4967d4628cf8", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5c7bd52a7824fd1177e0b5c65ad063a23657d8b4/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c7bd52a7824fd1177e0b5c65ad063a23657d8b4/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=5c7bd52a7824fd1177e0b5c65ad063a23657d8b4", "patch": "@@ -468,7 +468,16 @@ fn check_arms<'p, 'tcx>(\n                         hir::MatchSource::AwaitDesugar | hir::MatchSource::TryDesugar => {}\n                     }\n                 }\n-                Useful => (),\n+                Useful(unreachable_subpatterns) => {\n+                    for pat in unreachable_subpatterns {\n+                        cx.tcx.lint_hir(\n+                            lint::builtin::UNREACHABLE_PATTERNS,\n+                            hir_pat.hir_id,\n+                            pat.span,\n+                            \"unreachable pattern\",\n+                        );\n+                    }\n+                }\n                 UsefulWithWitness(_) => bug!(),\n             }\n             if guard.is_none() {\n@@ -496,7 +505,7 @@ fn check_not_useful<'p, 'tcx>(\n         } else {\n             pats.into_iter().map(|w| w.single_pattern()).collect()\n         }),\n-        Useful => bug!(),\n+        Useful(_) => bug!(),\n     }\n }\n "}, {"sha": "5c4e239b5e39f98ecb07f965e7674a29545978cb", "filename": "src/test/ui/or-patterns/exhaustiveness-pass.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5c7bd52a7824fd1177e0b5c65ad063a23657d8b4/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c7bd52a7824fd1177e0b5c65ad063a23657d8b4/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-pass.rs?ref=5c7bd52a7824fd1177e0b5c65ad063a23657d8b4", "patch": "@@ -43,26 +43,31 @@ fn main() {\n         _ => {}\n     }\n \n-     // FIXME(or_patterns): Redundancies not detected for now.\n     match (0,) {\n-        (1 | 1,) => {}\n+        (1\n+         | 1,) => {} //~ ERROR unreachable\n         _ => {}\n     }\n     match [0; 2] {\n-        [0 | 0, 0 | 0] => {}\n+        [0\n+            | 0 //~ ERROR unreachable\n+        , 0\n+            | 0] => {} //~ ERROR unreachable\n         _ => {}\n     }\n     match &[][..] {\n         [0] => {}\n         [0, _] => {}\n         [0, _, _] => {}\n         [1, ..] => {}\n-        [1 | 2, ..] => {}\n+        [1 //~ ERROR unreachable\n+            | 2, ..] => {}\n         _ => {}\n     }\n     match Some(0) {\n         Some(0) => {}\n-        Some(0 | 1) => {}\n+        Some(0 //~ ERROR unreachable\n+             | 1) => {}\n         _ => {}\n     }\n }"}, {"sha": "7ca02862b4567affc33a298fb542ce51a6825ad3", "filename": "src/test/ui/or-patterns/exhaustiveness-pass.stderr", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/5c7bd52a7824fd1177e0b5c65ad063a23657d8b4/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-pass.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c7bd52a7824fd1177e0b5c65ad063a23657d8b4/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-pass.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-pass.stderr?ref=5c7bd52a7824fd1177e0b5c65ad063a23657d8b4", "patch": "@@ -1,8 +1,44 @@\n+error: unreachable pattern\n+  --> $DIR/exhaustiveness-pass.rs:48:12\n+   |\n+LL |          | 1,) => {}\n+   |            ^\n+   |\n+note: lint level defined here\n+  --> $DIR/exhaustiveness-pass.rs:4:9\n+   |\n+LL | #![deny(unreachable_patterns)]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+\n+error: unreachable pattern\n+  --> $DIR/exhaustiveness-pass.rs:55:15\n+   |\n+LL |             | 0] => {}\n+   |               ^\n+\n+error: unreachable pattern\n+  --> $DIR/exhaustiveness-pass.rs:53:15\n+   |\n+LL |             | 0\n+   |               ^\n+\n+error: unreachable pattern\n+  --> $DIR/exhaustiveness-pass.rs:63:10\n+   |\n+LL |         [1\n+   |          ^\n+\n+error: unreachable pattern\n+  --> $DIR/exhaustiveness-pass.rs:69:14\n+   |\n+LL |         Some(0\n+   |              ^\n+\n error: or-patterns are not fully implemented yet\n   --> $DIR/exhaustiveness-pass.rs:10:10\n    |\n LL |         (0 | _,) => {}\n    |          ^^^^^\n \n-error: aborting due to previous error\n+error: aborting due to 6 previous errors\n "}]}