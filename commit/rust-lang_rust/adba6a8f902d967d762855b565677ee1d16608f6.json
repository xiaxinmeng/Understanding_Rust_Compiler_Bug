{"sha": "adba6a8f902d967d762855b565677ee1d16608f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkYmE2YThmOTAyZDk2N2Q3NjI4NTViNTY1Njc3ZWUxZDE2NjA4ZjY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-06-17T13:26:48Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-07-02T16:25:21Z"}, "message": "address nits by mattewjasper", "tree": {"sha": "a58dec73b673a6bf4147cada191f01d2d94dab5d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a58dec73b673a6bf4147cada191f01d2d94dab5d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/adba6a8f902d967d762855b565677ee1d16608f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/adba6a8f902d967d762855b565677ee1d16608f6", "html_url": "https://github.com/rust-lang/rust/commit/adba6a8f902d967d762855b565677ee1d16608f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/adba6a8f902d967d762855b565677ee1d16608f6/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b15a66a806a8f46af6ae24f640814f3a69eddfb", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b15a66a806a8f46af6ae24f640814f3a69eddfb", "html_url": "https://github.com/rust-lang/rust/commit/0b15a66a806a8f46af6ae24f640814f3a69eddfb"}], "stats": {"total": 77, "additions": 13, "deletions": 64}, "files": [{"sha": "2779845a17aeb6c0555cca9d1e1cf13807e495c5", "filename": "src/librustc/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 8, "deletions": 24, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/adba6a8f902d967d762855b565677ee1d16608f6/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adba6a8f902d967d762855b565677ee1d16608f6/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=adba6a8f902d967d762855b565677ee1d16608f6", "patch": "@@ -197,26 +197,8 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n         }\n     }\n \n-    /// Enforce constraints of the form:\n-    ///\n-    /// ```\n-    /// 'r0 in ['o1...'oN]\n-    /// ```\n-    ///\n-    /// such a constraint simply means that `'r0` must be equal to one\n-    /// of the regions `'o1...'oN`. This is an annoying constraint to\n-    /// integrate into our inference, which generally works by\n-    /// iteratively growing regions until we find a match -- that's\n-    /// not an option here.\n-    ///\n-    /// What we currently do:\n-    ///\n-    /// - Search forward in the graph from `'r0` to find each region `'b`\n-    ///   where `'r0 <= 'b` must hold.\n-    ///   - Try to rule out some of the `'o1..'oN` options:\n-    ///     - if `'o[i] <= 'b` is false, then `'o[i]` is not an option\n-    ///\n-    /// Hopefully this narrows it down to just one option.\n+    /// Enforce all pick constraints and return true if anything\n+    /// changed. See `enforce_pick_constraint` for more details.\n     fn enforce_pick_constraints(\n         &self,\n         graph: &RegionGraph<'tcx>,\n@@ -237,15 +219,17 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n     /// pick 'r from ['o...]\n     /// ```\n     ///\n-    /// We look to see if there is a unique option `'o` from the list of options\n-    /// that:\n+    /// We look for all option regions from the list `'o...` that:\n     ///\n-    /// (a) is greater than the current value of `'r` (which is a lower bound)\n+    /// (a) are greater than the current value of `'r` (which is a lower bound)\n     ///\n     /// and\n     ///\n-    /// (b) is compatible with the upper bounds of `'r` that we can\n+    /// (b) are compatible with the upper bounds of `'r` that we can\n     /// find by traversing the graph.\n+    ///\n+    /// From that list, we look for a *minimal* option `'o_min`. If we\n+    /// find one, then we can enforce that `'r: 'o_min`.\n     fn enforce_pick_constraint(\n         &self,\n         graph: &RegionGraph<'tcx>,"}, {"sha": "95f224f546b379cda88db3b5f57d5b0e8a67f16b", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adba6a8f902d967d762855b565677ee1d16608f6/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adba6a8f902d967d762855b565677ee1d16608f6/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=adba6a8f902d967d762855b565677ee1d16608f6", "patch": "@@ -915,7 +915,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         region: ty::Region<'tcx>,\n         in_regions: &Rc<Vec<ty::Region<'tcx>>>,\n     ) {\n-        debug!(\"sub_regions({:?} <: {:?})\", region, in_regions);\n+        debug!(\"pick_constraint({:?} <: {:?})\", region, in_regions);\n         self.borrow_region_constraints()\n             .pick_constraint(opaque_type_def_id, definition_span, hidden_ty, region, in_regions);\n     }"}, {"sha": "8b5a0420f84b64bcfa89af944caa7d7e37e9461e", "filename": "src/librustc/infer/opaque_types/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/adba6a8f902d967d762855b565677ee1d16608f6/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adba6a8f902d967d762855b565677ee1d16608f6/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs?ref=adba6a8f902d967d762855b565677ee1d16608f6", "patch": "@@ -271,8 +271,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     /// is an inference variable). If we generated a constraint that\n     /// `Tc: 'a`, then this would incorrectly require that `T: 'a` --\n     /// but this is not necessary, because the existential type we\n-    /// create will be allowed to reference `T`. So instead we just\n-    /// generate a constraint that `'0: 'a`.\n+    /// create will be allowed to reference `T`. So we only generate a\n+    /// constraint that `'0: 'a`.\n     ///\n     /// # The `free_region_relations` parameter\n     ///\n@@ -563,8 +563,7 @@ pub fn unexpected_hidden_region_diagnostic(\n         // ```\n         //\n         // Here the captured lifetime is the intersection of `'a` and\n-        // `'b`, which we can't quite express. This prticulararticular\n-        // is kind of an unfortunate error anyway.\n+        // `'b`, which we can't quite express.\n \n         if let Some(region_scope_tree) = region_scope_tree {\n             // If the `region_scope_tree` is available, this is being"}, {"sha": "c425502f219488ac6ab3d66e52300455dee965cc", "filename": "src/librustc_data_structures/graph/vec_graph/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/adba6a8f902d967d762855b565677ee1d16608f6/src%2Flibrustc_data_structures%2Fgraph%2Fvec_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adba6a8f902d967d762855b565677ee1d16608f6/src%2Flibrustc_data_structures%2Fgraph%2Fvec_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fgraph%2Fvec_graph%2Fmod.rs?ref=adba6a8f902d967d762855b565677ee1d16608f6", "patch": "@@ -1,6 +1,7 @@\n use crate::indexed_vec::{Idx, IndexVec};\n use crate::graph::{DirectedGraph, WithNumNodes, WithNumEdges, WithSuccessors, GraphSuccessors};\n \n+#[cfg(test)]\n mod test;\n \n pub struct VecGraph<N: Idx> {"}, {"sha": "97a9bd2ad0b08c74fb5528ddcef46aab09669409", "filename": "src/librustc_data_structures/graph/vec_graph/test.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adba6a8f902d967d762855b565677ee1d16608f6/src%2Flibrustc_data_structures%2Fgraph%2Fvec_graph%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adba6a8f902d967d762855b565677ee1d16608f6/src%2Flibrustc_data_structures%2Fgraph%2Fvec_graph%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fgraph%2Fvec_graph%2Ftest.rs?ref=adba6a8f902d967d762855b565677ee1d16608f6", "patch": "@@ -1,5 +1,3 @@\n-#![cfg(test)]\n-\n use super::*;\n \n fn create_graph() -> VecGraph<usize> {"}, {"sha": "f55bba987ec3f72ab31075493c61e95984759392", "filename": "src/test/ui/impl-trait/multiple-lifetimes/ordinary-bounds-pick-original.stderr", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0b15a66a806a8f46af6ae24f640814f3a69eddfb/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-pick-original.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b15a66a806a8f46af6ae24f640814f3a69eddfb/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-pick-original.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-pick-original.stderr?ref=0b15a66a806a8f46af6ae24f640814f3a69eddfb", "patch": "@@ -1,22 +0,0 @@\n-warning[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ordinary-bounds-pick-original.rs:10:50\n-   |\n-LL | fn upper_bounds<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a, 'b> {\n-   |                                                  ^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: hidden type `(&u8, &u8)` captures lifetime '_#6r\n-   = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n-   = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n-   = note: for more information, try `rustc --explain E0729`\n-\n-warning[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ordinary-bounds-pick-original.rs:10:50\n-   |\n-LL | fn upper_bounds<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a, 'b> {\n-   |                                                  ^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: hidden type `(&u8, &u8)` captures lifetime '_#7r\n-   = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n-   = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n-   = note: for more information, try `rustc --explain E0729`\n-"}, {"sha": "a9b56210b0feab56b799608bdd051426b786257c", "filename": "src/test/ui/impl-trait/multiple-lifetimes/ordinary-bounds-pick-other.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0b15a66a806a8f46af6ae24f640814f3a69eddfb/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-pick-other.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b15a66a806a8f46af6ae24f640814f3a69eddfb/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-pick-other.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-pick-other.stderr?ref=0b15a66a806a8f46af6ae24f640814f3a69eddfb", "patch": "@@ -1,11 +0,0 @@\n-warning[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ordinary-bounds-pick-other.rs:17:74\n-   |\n-LL | fn upper_bounds<'a, 'b, 'c, 'd, 'e>(a: Ordinary<'a>, b: Ordinary<'b>) -> impl Trait<'d, 'e>\n-   |                                                                          ^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: hidden type `Ordinary<'_>` captures lifetime '_#8r\n-   = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n-   = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n-   = note: for more information, try `rustc --explain E0729`\n-"}]}