{"sha": "1f3195a5df18d8a7a886fca17371612f5f6847a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmMzE5NWE1ZGYxOGQ4YTdhODg2ZmNhMTczNzE2MTJmNWY2ODQ3YTM=", "commit": {"author": {"name": "LinkTed", "email": "LinkTed@users.noreply.github.com", "date": "2020-08-25T17:33:33Z"}, "committer": {"name": "LinkTed", "email": "LinkTed@users.noreply.github.com", "date": "2020-10-10T13:19:12Z"}, "message": "Remove inner function in `bind`, `connect` and `send_to`", "tree": {"sha": "55526cdc3344f75ea2721ec65e591f8adda344b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55526cdc3344f75ea2721ec65e591f8adda344b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f3195a5df18d8a7a886fca17371612f5f6847a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f3195a5df18d8a7a886fca17371612f5f6847a3", "html_url": "https://github.com/rust-lang/rust/commit/1f3195a5df18d8a7a886fca17371612f5f6847a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f3195a5df18d8a7a886fca17371612f5f6847a3/comments", "author": {"login": "LinkTed", "id": 6806266, "node_id": "MDQ6VXNlcjY4MDYyNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/6806266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LinkTed", "html_url": "https://github.com/LinkTed", "followers_url": "https://api.github.com/users/LinkTed/followers", "following_url": "https://api.github.com/users/LinkTed/following{/other_user}", "gists_url": "https://api.github.com/users/LinkTed/gists{/gist_id}", "starred_url": "https://api.github.com/users/LinkTed/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LinkTed/subscriptions", "organizations_url": "https://api.github.com/users/LinkTed/orgs", "repos_url": "https://api.github.com/users/LinkTed/repos", "events_url": "https://api.github.com/users/LinkTed/events{/privacy}", "received_events_url": "https://api.github.com/users/LinkTed/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LinkTed", "id": 6806266, "node_id": "MDQ6VXNlcjY4MDYyNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/6806266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LinkTed", "html_url": "https://github.com/LinkTed", "followers_url": "https://api.github.com/users/LinkTed/followers", "following_url": "https://api.github.com/users/LinkTed/following{/other_user}", "gists_url": "https://api.github.com/users/LinkTed/gists{/gist_id}", "starred_url": "https://api.github.com/users/LinkTed/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LinkTed/subscriptions", "organizations_url": "https://api.github.com/users/LinkTed/orgs", "repos_url": "https://api.github.com/users/LinkTed/repos", "events_url": "https://api.github.com/users/LinkTed/events{/privacy}", "received_events_url": "https://api.github.com/users/LinkTed/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c929a00ee6f4a8c4904f567d73e1cf6c333617c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c929a00ee6f4a8c4904f567d73e1cf6c333617c", "html_url": "https://github.com/rust-lang/rust/commit/4c929a00ee6f4a8c4904f567d73e1cf6c333617c"}], "stats": {"total": 82, "additions": 33, "deletions": 49}, "files": [{"sha": "7225b3e5f66d39f1494c8f76379e467d1c1f618c", "filename": "library/std/src/sys/unix/ext/net/datagram.rs", "status": "modified", "additions": 21, "deletions": 31, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/1f3195a5df18d8a7a886fca17371612f5f6847a3/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fdatagram.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3195a5df18d8a7a886fca17371612f5f6847a3/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fdatagram.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fdatagram.rs?ref=1f3195a5df18d8a7a886fca17371612f5f6847a3", "patch": "@@ -85,17 +85,14 @@ impl UnixDatagram {\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n     pub fn bind<P: AsRef<Path>>(path: P) -> io::Result<UnixDatagram> {\n-        fn inner(path: &Path) -> io::Result<UnixDatagram> {\n-            unsafe {\n-                let socket = UnixDatagram::unbound()?;\n-                let (addr, len) = sockaddr_un(path)?;\n+        unsafe {\n+            let socket = UnixDatagram::unbound()?;\n+            let (addr, len) = sockaddr_un(path.as_ref())?;\n \n-                cvt(libc::bind(*socket.0.as_inner(), &addr as *const _ as *const _, len as _))?;\n+            cvt(libc::bind(*socket.0.as_inner(), &addr as *const _ as *const _, len as _))?;\n \n-                Ok(socket)\n-            }\n+            Ok(socket)\n         }\n-        inner(path.as_ref())\n     }\n \n     /// Creates a Unix Datagram socket which is not bound to any address.\n@@ -170,16 +167,12 @@ impl UnixDatagram {\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n     pub fn connect<P: AsRef<Path>>(&self, path: P) -> io::Result<()> {\n-        fn inner(d: &UnixDatagram, path: &Path) -> io::Result<()> {\n-            unsafe {\n-                let (addr, len) = sockaddr_un(path)?;\n-\n-                cvt(libc::connect(*d.0.as_inner(), &addr as *const _ as *const _, len))?;\n+        unsafe {\n+            let (addr, len) = sockaddr_un(path.as_ref())?;\n \n-                Ok(())\n-            }\n+            cvt(libc::connect(*self.0.as_inner(), &addr as *const _ as *const _, len))?;\n         }\n-        inner(self, path.as_ref())\n+        Ok(())\n     }\n \n     /// Creates a new independently owned handle to the underlying socket.\n@@ -430,22 +423,19 @@ impl UnixDatagram {\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n     pub fn send_to<P: AsRef<Path>>(&self, buf: &[u8], path: P) -> io::Result<usize> {\n-        fn inner(d: &UnixDatagram, buf: &[u8], path: &Path) -> io::Result<usize> {\n-            unsafe {\n-                let (addr, len) = sockaddr_un(path)?;\n-\n-                let count = cvt(libc::sendto(\n-                    *d.0.as_inner(),\n-                    buf.as_ptr() as *const _,\n-                    buf.len(),\n-                    MSG_NOSIGNAL,\n-                    &addr as *const _ as *const _,\n-                    len,\n-                ))?;\n-                Ok(count as usize)\n-            }\n+        unsafe {\n+            let (addr, len) = sockaddr_un(path.as_ref())?;\n+\n+            let count = cvt(libc::sendto(\n+                *self.0.as_inner(),\n+                buf.as_ptr() as *const _,\n+                buf.len(),\n+                MSG_NOSIGNAL,\n+                &addr as *const _ as *const _,\n+                len,\n+            ))?;\n+            Ok(count as usize)\n         }\n-        inner(self, buf, path.as_ref())\n     }\n \n     /// Sends data on the socket to the socket's peer."}, {"sha": "2bedfb74dcb608c208f020930745d5e4f1ea3916", "filename": "library/std/src/sys/unix/ext/net/listener.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1f3195a5df18d8a7a886fca17371612f5f6847a3/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Flistener.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3195a5df18d8a7a886fca17371612f5f6847a3/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Flistener.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Flistener.rs?ref=1f3195a5df18d8a7a886fca17371612f5f6847a3", "patch": "@@ -71,18 +71,15 @@ impl UnixListener {\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n     pub fn bind<P: AsRef<Path>>(path: P) -> io::Result<UnixListener> {\n-        fn inner(path: &Path) -> io::Result<UnixListener> {\n-            unsafe {\n-                let inner = Socket::new_raw(libc::AF_UNIX, libc::SOCK_STREAM)?;\n-                let (addr, len) = sockaddr_un(path)?;\n+        unsafe {\n+            let inner = Socket::new_raw(libc::AF_UNIX, libc::SOCK_STREAM)?;\n+            let (addr, len) = sockaddr_un(path.as_ref())?;\n \n-                cvt(libc::bind(*inner.as_inner(), &addr as *const _ as *const _, len as _))?;\n-                cvt(libc::listen(*inner.as_inner(), 128))?;\n+            cvt(libc::bind(*inner.as_inner(), &addr as *const _ as *const _, len as _))?;\n+            cvt(libc::listen(*inner.as_inner(), 128))?;\n \n-                Ok(UnixListener(inner))\n-            }\n+            Ok(UnixListener(inner))\n         }\n-        inner(path.as_ref())\n     }\n \n     /// Accepts a new incoming connection to this listener."}, {"sha": "091026d6cfc77937bf00d4ea4c4f43bd3ed7bac0", "filename": "library/std/src/sys/unix/ext/net/stream.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1f3195a5df18d8a7a886fca17371612f5f6847a3/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3195a5df18d8a7a886fca17371612f5f6847a3/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fstream.rs?ref=1f3195a5df18d8a7a886fca17371612f5f6847a3", "patch": "@@ -87,16 +87,13 @@ impl UnixStream {\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n     pub fn connect<P: AsRef<Path>>(path: P) -> io::Result<UnixStream> {\n-        fn inner(path: &Path) -> io::Result<UnixStream> {\n-            unsafe {\n-                let inner = Socket::new_raw(libc::AF_UNIX, libc::SOCK_STREAM)?;\n-                let (addr, len) = sockaddr_un(path)?;\n-\n-                cvt(libc::connect(*inner.as_inner(), &addr as *const _ as *const _, len))?;\n-                Ok(UnixStream(inner))\n-            }\n+        unsafe {\n+            let inner = Socket::new_raw(libc::AF_UNIX, libc::SOCK_STREAM)?;\n+            let (addr, len) = sockaddr_un(path.as_ref())?;\n+\n+            cvt(libc::connect(*inner.as_inner(), &addr as *const _ as *const _, len))?;\n+            Ok(UnixStream(inner))\n         }\n-        inner(path.as_ref())\n     }\n \n     /// Creates an unnamed pair of connected sockets."}]}