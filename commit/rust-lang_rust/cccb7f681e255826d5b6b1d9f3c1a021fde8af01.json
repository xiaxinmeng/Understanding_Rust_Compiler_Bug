{"sha": "cccb7f681e255826d5b6b1d9f3c1a021fde8af01", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjY2I3ZjY4MWUyNTU4MjZkNWI2YjFkOWYzYzFhMDIxZmRlOGFmMDE=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-09-18T00:45:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-09-18T00:45:25Z"}, "message": "Merge pull request #1966 from topecongiro/string-to-cow\n\nRefactoring: use Cow and etc.", "tree": {"sha": "10f8941c5881cf7c35f52a499aca5cbb5e061ea7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10f8941c5881cf7c35f52a499aca5cbb5e061ea7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cccb7f681e255826d5b6b1d9f3c1a021fde8af01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cccb7f681e255826d5b6b1d9f3c1a021fde8af01", "html_url": "https://github.com/rust-lang/rust/commit/cccb7f681e255826d5b6b1d9f3c1a021fde8af01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cccb7f681e255826d5b6b1d9f3c1a021fde8af01/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "144da0dfddd2c5ba4ea9dbb33443319d2e88e8fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/144da0dfddd2c5ba4ea9dbb33443319d2e88e8fa", "html_url": "https://github.com/rust-lang/rust/commit/144da0dfddd2c5ba4ea9dbb33443319d2e88e8fa"}, {"sha": "f0580ae91abc4e76c9d8d202460a49da874b9ac3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0580ae91abc4e76c9d8d202460a49da874b9ac3", "html_url": "https://github.com/rust-lang/rust/commit/f0580ae91abc4e76c9d8d202460a49da874b9ac3"}], "stats": {"total": 139, "additions": 80, "deletions": 59}, "files": [{"sha": "706554577ab76b58baf6e742eb385d760373cd7b", "filename": "Cargo.lock", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/cccb7f681e255826d5b6b1d9f3c1a021fde8af01/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/cccb7f681e255826d5b6b1d9f3c1a021fde8af01/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=cccb7f681e255826d5b6b1d9f3c1a021fde8af01", "patch": "@@ -4,14 +4,14 @@ version = \"0.2.6\"\n dependencies = [\n  \"diff 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"env_logger 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"getopts 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"getopts 0.2.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_json 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"strings 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"term 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"toml 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -48,7 +48,7 @@ dependencies = [\n \n [[package]]\n name = \"getopts\"\n-version = \"0.2.14\"\n+version = \"0.2.15\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -117,22 +117,22 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"serde\"\n-version = \"1.0.11\"\n+version = \"1.0.14\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"serde_derive\"\n-version = \"1.0.11\"\n+version = \"1.0.14\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"quote 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive_internals 0.15.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive_internals 0.16.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"syn 0.11.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"serde_derive_internals\"\n-version = \"0.15.1\"\n+version = \"0.16.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"syn 0.11.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -141,13 +141,13 @@ dependencies = [\n \n [[package]]\n name = \"serde_json\"\n-version = \"1.0.2\"\n+version = \"1.0.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"dtoa 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"itoa 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num-traits 0.1.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -199,7 +199,7 @@ name = \"toml\"\n version = \"0.4.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"serde 1.0.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -245,7 +245,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum diff 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0a515461b6c8c08419850ced27bc29e86166dcdcde8fbe76f8b1f0589bb49472\"\n \"checksum dtoa 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"09c3753c3db574d215cba4ea76018483895d7bff25a31b49ba45db21c48e50ab\"\n \"checksum env_logger 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3ddf21e73e016298f5cb37d6ef8e8da8e39f91f9ec8b0df44b7deb16a9f8cd5b\"\n-\"checksum getopts 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d9047cfbd08a437050b363d35ef160452c5fe8ea5187ae0a624708c91581d685\"\n+\"checksum getopts 0.2.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"65922871abd2f101a2eb0eaebadc66668e54a87ad9c3dd82520b5f86ede5eff9\"\n \"checksum itoa 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ac17257442c2ed77dbc9fd555cf83c58b0c7f7d0e8f2ae08c0ac05c72842e1f6\"\n \"checksum kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7507624b29483431c0ba2d82aece8ca6cdba9382bff4ddd0f7490560c056098d\"\n \"checksum lazy_static 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3b37545ab726dd833ec6420aaba8231c5b320814b9029ad585555d2a03e94fbf\"\n@@ -256,10 +256,10 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum quote 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7a6e920b65c65f10b2ae65c831a81a073a89edd28c7cce89475bff467ab4167a\"\n \"checksum regex 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1731164734096285ec2a5ec7fea5248ae2f5485b3feeb0115af4fda2183b2d1b\"\n \"checksum regex-syntax 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ad890a5eef7953f55427c50575c680c42841653abd2b028b68cd223d157f62db\"\n-\"checksum serde 1.0.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f7726f29ddf9731b17ff113c461e362c381d9d69433f79de4f3dd572488823e9\"\n-\"checksum serde_derive 1.0.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cf823e706be268e73e7747b147aa31c8f633ab4ba31f115efb57e5047c3a76dd\"\n-\"checksum serde_derive_internals 0.15.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"37aee4e0da52d801acfbc0cc219eb1eda7142112339726e427926a6f6ee65d3a\"\n-\"checksum serde_json 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"48b04779552e92037212c3615370f6bd57a40ebba7f20e554ff9f55e41a69a7b\"\n+\"checksum serde 1.0.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bcb6a7637a47663ee073391a139ed07851f27ed2532c2abc88c6bf27a16cdf34\"\n+\"checksum serde_derive 1.0.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"812ff66056fd9a9a5b7c119714243b0862cf98340e7d4b5ee05a932c40d5ea6c\"\n+\"checksum serde_derive_internals 0.16.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bd381f6d01a6616cdba8530492d453b7761b456ba974e98768a18cad2cd76f58\"\n+\"checksum serde_json 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d243424e06f9f9c39e3cd36147470fd340db785825e367625f79298a6ac6b7ac\"\n \"checksum strings 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"da75d8bf2c4d210d63dd09581a041b036001f9f6e03d9b151dbff810fb7ba26a\"\n \"checksum syn 0.11.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d3b891b9015c88c576343b9b3e41c2c11a51c219ef067b264bd9c8aa9b441dad\"\n \"checksum synom 0.11.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a393066ed9010ebaed60b9eafa373d4b1baac186dd7e008555b0f702b51945b6\""}, {"sha": "ea06a31ae5f92c65fac62e038ebbb9a806dcf263", "filename": "src/expr.rs", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/cccb7f681e255826d5b6b1d9f3c1a021fde8af01/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cccb7f681e255826d5b6b1d9f3c1a021fde8af01/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=cccb7f681e255826d5b6b1d9f3c1a021fde8af01", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n use std::cmp::{min, Ordering};\n+use std::borrow::Cow;\n use std::fmt::Write;\n use std::iter::{repeat, ExactSizeIterator};\n \n@@ -327,7 +328,7 @@ pub fn format_expr(\n                 Some(format!(\n                     \"{}{}\",\n                     \"do catch \",\n-                    try_opt!(block.rewrite(&context, Shape::legacy(budget, shape.indent)))\n+                    try_opt!(block.rewrite(context, Shape::legacy(budget, shape.indent)))\n                 ))\n             }\n         }\n@@ -1416,10 +1417,10 @@ impl<'a> Rewrite for ControlFlow<'a> {\n     }\n }\n \n-fn rewrite_label(label: Option<ast::SpannedIdent>) -> String {\n+fn rewrite_label(label: Option<ast::SpannedIdent>) -> Cow<'static, str> {\n     match label {\n-        Some(ident) => format!(\"{}: \", ident.node),\n-        None => \"\".to_owned(),\n+        Some(ident) => Cow::from(format!(\"{}: \", ident.node)),\n+        None => Cow::from(\"\"),\n     }\n }\n \n@@ -1978,7 +1979,11 @@ fn rewrite_string_lit(context: &RewriteContext, span: Span, shape: Shape) -> Opt\n                 string_lit\n                     .lines()\n                     .map(|line| {\n-                        new_indent.to_string(context.config) + line.trim_left()\n+                        format!(\n+                            \"{}{}\",\n+                            new_indent.to_string(context.config),\n+                            line.trim_left()\n+                        )\n                     })\n                     .collect::<Vec<_>>()\n                     .join(\"\\n\")\n@@ -3056,17 +3061,17 @@ impl<'a> ToExpr for ast::StructField {\n \n impl<'a> ToExpr for MacroArg {\n     fn to_expr(&self) -> Option<&ast::Expr> {\n-        match self {\n-            &MacroArg::Expr(ref expr) => Some(expr),\n+        match *self {\n+            MacroArg::Expr(ref expr) => Some(expr),\n             _ => None,\n         }\n     }\n \n     fn can_be_overflowed(&self, context: &RewriteContext, len: usize) -> bool {\n-        match self {\n-            &MacroArg::Expr(ref expr) => can_be_overflowed_expr(context, expr, len),\n-            &MacroArg::Ty(ref ty) => can_be_overflowed_type(context, ty, len),\n-            &MacroArg::Pat(..) => false,\n+        match *self {\n+            MacroArg::Expr(ref expr) => can_be_overflowed_expr(context, expr, len),\n+            MacroArg::Ty(ref ty) => can_be_overflowed_type(context, ty, len),\n+            MacroArg::Pat(..) => false,\n         }\n     }\n }"}, {"sha": "344c7e57af1d78924a28ca55984ff77ba7e5470f", "filename": "src/items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cccb7f681e255826d5b6b1d9f3c1a021fde8af01/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cccb7f681e255826d5b6b1d9f3c1a021fde8af01/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=cccb7f681e255826d5b6b1d9f3c1a021fde8af01", "patch": "@@ -330,7 +330,7 @@ impl<'a> FmtVisitor<'a> {\n                                 \"\"\n                             };\n \n-                            format_expr(&e, ExprType::Statement, &self.get_context(), self.shape())\n+                            format_expr(e, ExprType::Statement, &self.get_context(), self.shape())\n                                 .map(|s| s + suffix)\n                                 .or_else(|| Some(self.snippet(e.span)))\n                         }"}, {"sha": "cb48b3c7fcd52befc908e929fcc179c3a1191615", "filename": "src/lib.rs", "status": "modified", "additions": 22, "deletions": 13, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/cccb7f681e255826d5b6b1d9f3c1a021fde8af01/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cccb7f681e255826d5b6b1d9f3c1a021fde8af01/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=cccb7f681e255826d5b6b1d9f3c1a021fde8af01", "patch": "@@ -24,6 +24,7 @@ extern crate syntax;\n extern crate term;\n extern crate unicode_segmentation;\n \n+use std::borrow::Cow;\n use std::collections::HashMap;\n use std::fmt;\n use std::io::{self, stdout, Write};\n@@ -247,6 +248,10 @@ pub struct Indent {\n     pub alignment: usize,\n }\n \n+// INDENT_BUFFER.len() == 60\n+const INDENT_BUFFER: &str = \"                                                            \";\n+const INDENT_BUFFER_LEN: usize = 60;\n+\n impl Indent {\n     pub fn new(block_indent: usize, alignment: usize) -> Indent {\n         Indent {\n@@ -294,21 +299,25 @@ impl Indent {\n         self.block_indent + self.alignment\n     }\n \n-    pub fn to_string(&self, config: &Config) -> String {\n+    pub fn to_string(&self, config: &Config) -> Cow<'static, str> {\n         let (num_tabs, num_spaces) = if config.hard_tabs() {\n             (self.block_indent / config.tab_spaces(), self.alignment)\n         } else {\n             (0, self.width())\n         };\n         let num_chars = num_tabs + num_spaces;\n-        let mut indent = String::with_capacity(num_chars);\n-        for _ in 0..num_tabs {\n-            indent.push('\\t')\n-        }\n-        for _ in 0..num_spaces {\n-            indent.push(' ')\n+        if num_tabs == 0 && num_chars <= INDENT_BUFFER_LEN {\n+            Cow::from(&INDENT_BUFFER[..num_chars])\n+        } else {\n+            let mut indent = String::with_capacity(num_chars);\n+            for _ in 0..num_tabs {\n+                indent.push('\\t')\n+            }\n+            for _ in 0..num_spaces {\n+                indent.push(' ')\n+            }\n+            Cow::from(indent)\n         }\n-        indent\n     }\n }\n \n@@ -524,13 +533,13 @@ impl FormattingError {\n         }\n     }\n \n-    fn msg_suffix(&self) -> String {\n+    fn msg_suffix(&self) -> &str {\n         match self.kind {\n-            ErrorKind::LineOverflow(..) if self.is_comment => String::from(\n+            ErrorKind::LineOverflow(..) if self.is_comment => {\n                 \"use `error_on_line_overflow_comments = false` to suppress \\\n-                 the warning against line comments\\n\",\n-            ),\n-            _ => String::from(\"\"),\n+                 the warning against line comments\\n\"\n+            }\n+            _ => \"\",\n         }\n     }\n "}, {"sha": "8fd21c7f73748a73bf482e9ba96baebc03ef1749", "filename": "src/lists.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cccb7f681e255826d5b6b1d9f3c1a021fde8af01/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cccb7f681e255826d5b6b1d9f3c1a021fde8af01/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=cccb7f681e255826d5b6b1d9f3c1a021fde8af01", "patch": "@@ -114,7 +114,7 @@ pub struct ListItem {\n \n impl ListItem {\n     pub fn inner_as_ref(&self) -> &str {\n-        self.item.as_ref().map_or(\"\", |s| &*s)\n+        self.item.as_ref().map_or(\"\", |s| s)\n     }\n \n     pub fn is_different_group(&self) -> bool {\n@@ -289,7 +289,7 @@ where\n             inner_item.as_ref()\n         };\n         let mut item_last_line_width = item_last_line.len() + item_sep_len;\n-        if item_last_line.starts_with(indent_str) {\n+        if item_last_line.starts_with(&**indent_str) {\n             item_last_line_width -= indent_str.len();\n         }\n "}, {"sha": "a1254b4541dc96bd0a71ac9d8c1351b7f365c8a8", "filename": "src/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cccb7f681e255826d5b6b1d9f3c1a021fde8af01/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cccb7f681e255826d5b6b1d9f3c1a021fde8af01/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=cccb7f681e255826d5b6b1d9f3c1a021fde8af01", "patch": "@@ -104,7 +104,7 @@ fn parse_macro_arg(parser: &mut Parser) -> Option<MacroArg> {\n     parse_macro_arg!(ty, Ty, parse_ty);\n     parse_macro_arg!(pat, Pat, parse_pat);\n \n-    return None;\n+    None\n }\n \n pub fn rewrite_macro(\n@@ -383,7 +383,7 @@ fn indent_macro_snippet(\n                                 .checked_sub(min_prefix_space_width)\n                                 .unwrap_or(0);\n                         let new_indent = Indent::from_width(context.config, new_indent_width);\n-                        new_indent.to_string(context.config) + line.trim()\n+                        format!(\"{}{}\", new_indent.to_string(context.config), line.trim())\n                     }\n                     None => String::new(),\n                 })"}, {"sha": "32e321dd2579982d86e262e387e60c451bb5b609", "filename": "src/missed_spans.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/cccb7f681e255826d5b6b1d9f3c1a021fde8af01/src%2Fmissed_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cccb7f681e255826d5b6b1d9f3c1a021fde8af01/src%2Fmissed_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmissed_spans.rs?ref=cccb7f681e255826d5b6b1d9f3c1a021fde8af01", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::borrow::Cow;\n+\n use {Indent, Shape};\n use comment::{rewrite_comment, CodeCharKind, CommentCodeSlices};\n use config::WriteMode;\n@@ -118,18 +120,23 @@ impl<'a> FmtVisitor<'a> {\n         let file_name = &char_pos.file.name;\n         let mut cur_line = char_pos.line;\n \n-        fn replace_chars(string: &str) -> String {\n-            string\n-                .chars()\n-                .map(|ch| if ch.is_whitespace() { ch } else { 'X' })\n-                .collect()\n+        fn replace_chars<'a>(string: &'a str) -> Cow<'a, str> {\n+            if string.contains(char::is_whitespace) {\n+                Cow::from(\n+                    string\n+                        .chars()\n+                        .map(|ch| if ch.is_whitespace() { ch } else { 'X' })\n+                        .collect::<String>(),\n+                )\n+            } else {\n+                Cow::from(string)\n+            }\n         }\n \n-        let replaced = match self.config.write_mode() {\n+        let snippet = &*match self.config.write_mode() {\n             WriteMode::Coverage => replace_chars(old_snippet),\n-            _ => old_snippet.to_owned(),\n+            _ => Cow::from(old_snippet),\n         };\n-        let snippet = &*replaced;\n \n         for (kind, offset, subslice) in CommentCodeSlices::new(snippet) {\n             debug!(\"{:?}: {:?}\", kind, subslice);"}, {"sha": "b793f0df4170a432160b4c882ddd071c31ad0088", "filename": "src/utils.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cccb7f681e255826d5b6b1d9f3c1a021fde8af01/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cccb7f681e255826d5b6b1d9f3c1a021fde8af01/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=cccb7f681e255826d5b6b1d9f3c1a021fde8af01", "patch": "@@ -89,11 +89,11 @@ pub fn format_mutability(mutability: ast::Mutability) -> &'static str {\n }\n \n #[inline]\n-pub fn format_abi(abi: abi::Abi, explicit_abi: bool) -> String {\n+pub fn format_abi(abi: abi::Abi, explicit_abi: bool) -> Cow<'static, str> {\n     if abi == abi::Abi::C && !explicit_abi {\n-        \"extern \".into()\n+        Cow::from(\"extern \")\n     } else {\n-        format!(\"extern {} \", abi)\n+        Cow::from(format!(\"extern {} \", abi))\n     }\n }\n "}, {"sha": "606f7cf1dcf46b0d720d980b16a29d40ab7bcabc", "filename": "src/visitor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cccb7f681e255826d5b6b1d9f3c1a021fde8af01/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cccb7f681e255826d5b6b1d9f3c1a021fde8af01/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=cccb7f681e255826d5b6b1d9f3c1a021fde8af01", "patch": "@@ -340,7 +340,7 @@ impl<'a> FmtVisitor<'a> {\n         }\n \n         match item.node {\n-            ast::ItemKind::Use(ref vp) => self.format_import(&item, vp),\n+            ast::ItemKind::Use(ref vp) => self.format_import(item, vp),\n             ast::ItemKind::Impl(..) => {\n                 let snippet = self.snippet(item.span);\n                 let where_span_end = snippet\n@@ -381,7 +381,7 @@ impl<'a> FmtVisitor<'a> {\n             }\n             ast::ItemKind::Mod(ref module) => {\n                 self.format_missing_with_indent(source!(self, item.span).lo());\n-                self.format_mod(module, &item.vis, item.span, item.ident, &attrs);\n+                self.format_mod(module, &item.vis, item.span, item.ident, attrs);\n             }\n             ast::ItemKind::Mac(ref mac) => {\n                 self.visit_mac(mac, Some(item.ident), MacroPosition::Item);"}]}