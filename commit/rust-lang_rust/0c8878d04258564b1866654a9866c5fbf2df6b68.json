{"sha": "0c8878d04258564b1866654a9866c5fbf2df6b68", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjODg3OGQwNDI1ODU2NGIxODY2NjU0YTk4NjZjNWZiZjJkZjZiNjg=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2014-09-23T06:18:30Z"}, "committer": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2014-09-26T16:11:53Z"}, "message": "Add Option::{ok_or, ok_or_else}\n\nThese are the inverses of `Result::ok` and help to bridge `Option` and\n`Result` based APIs.", "tree": {"sha": "5ca1c7a106bd224a6cd2a3dd26a0b7086b70e8d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ca1c7a106bd224a6cd2a3dd26a0b7086b70e8d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c8878d04258564b1866654a9866c5fbf2df6b68", "comment_count": 13, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c8878d04258564b1866654a9866c5fbf2df6b68", "html_url": "https://github.com/rust-lang/rust/commit/0c8878d04258564b1866654a9866c5fbf2df6b68", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c8878d04258564b1866654a9866c5fbf2df6b68/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f299ff19ddb3ee4752e6db120689189ab4c4231", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f299ff19ddb3ee4752e6db120689189ab4c4231", "html_url": "https://github.com/rust-lang/rust/commit/3f299ff19ddb3ee4752e6db120689189ab4c4231"}], "stats": {"total": 45, "additions": 44, "deletions": 1}, "files": [{"sha": "77fe55aadee480c67a317d6afc3dad9bea4c31f4", "filename": "src/libcore/option.rs", "status": "modified", "additions": 44, "deletions": 1, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/0c8878d04258564b1866654a9866c5fbf2df6b68/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c8878d04258564b1866654a9866c5fbf2df6b68/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=0c8878d04258564b1866654a9866c5fbf2df6b68", "patch": "@@ -145,10 +145,11 @@\n \n use cmp::{PartialEq, Eq, Ord};\n use default::Default;\n-use slice::Slice;\n use iter::{Iterator, DoubleEndedIterator, FromIterator, ExactSize};\n use mem;\n+use result::{Result, Ok, Err};\n use slice;\n+use slice::Slice;\n \n // Note that this is not a lang item per se, but it has a hidden dependency on\n // `Iterator`, which is one. The compiler assumes that the `next` method of\n@@ -439,6 +440,48 @@ impl<T> Option<T> {\n         match self { None => def(), Some(t) => f(t) }\n     }\n \n+    /// Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n+    /// `Ok(v)` and `None` to `Err(err)`.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// let x = Some(\"foo\");\n+    /// assert_eq!(x.ok_or(0i), Ok(\"foo\"));\n+    ///\n+    /// let x: Option<&str> = None;\n+    /// assert_eq!(x.ok_or(0i), Err(0i));\n+    /// ```\n+    #[inline]\n+    #[experimental]\n+    pub fn ok_or<E>(self, err: E) -> Result<T, E> {\n+        match self {\n+            Some(v) => Ok(v),\n+            None => Err(err),\n+        }\n+    }\n+\n+    /// Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n+    /// `Ok(v)` and `None` to `Err(err())`.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// let x = Some(\"foo\");\n+    /// assert_eq!(x.ok_or_else(|| 0i), Ok(\"foo\"));\n+    ///\n+    /// let x: Option<&str> = None;\n+    /// assert_eq!(x.ok_or_else(|| 0i), Err(0i));\n+    /// ```\n+    #[inline]\n+    #[experimental]\n+    pub fn ok_or_else<E>(self, err: || -> E) -> Result<T, E> {\n+        match self {\n+            Some(v) => Ok(v),\n+            None => Err(err()),\n+        }\n+    }\n+\n     /// Deprecated.\n     ///\n     /// Applies a function to the contained value or does nothing."}]}