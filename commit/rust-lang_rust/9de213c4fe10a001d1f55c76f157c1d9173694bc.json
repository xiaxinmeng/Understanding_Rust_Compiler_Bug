{"sha": "9de213c4fe10a001d1f55c76f157c1d9173694bc", "node_id": "C_kwDOAAsO6NoAKDlkZTIxM2M0ZmUxMGEwMDFkMWY1NWM3NmYxNTdjMWQ5MTczNjk0YmM", "commit": {"author": {"name": "Ariel Davis", "email": "ariel.z.davis@icloud.com", "date": "2023-05-06T07:56:30Z"}, "committer": {"name": "Ariel Davis", "email": "ariel.z.davis@icloud.com", "date": "2023-05-06T07:56:30Z"}, "message": "Swap, tweak comments", "tree": {"sha": "84e0a8eb9f7c1cea61bbd0fd421fc0eb54141bb1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84e0a8eb9f7c1cea61bbd0fd421fc0eb54141bb1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9de213c4fe10a001d1f55c76f157c1d9173694bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9de213c4fe10a001d1f55c76f157c1d9173694bc", "html_url": "https://github.com/rust-lang/rust/commit/9de213c4fe10a001d1f55c76f157c1d9173694bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9de213c4fe10a001d1f55c76f157c1d9173694bc/comments", "author": {"login": "azdavis", "id": 6496454, "node_id": "MDQ6VXNlcjY0OTY0NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6496454?v=4", "gravatar_id": "", "url": "https://api.github.com/users/azdavis", "html_url": "https://github.com/azdavis", "followers_url": "https://api.github.com/users/azdavis/followers", "following_url": "https://api.github.com/users/azdavis/following{/other_user}", "gists_url": "https://api.github.com/users/azdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/azdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/azdavis/subscriptions", "organizations_url": "https://api.github.com/users/azdavis/orgs", "repos_url": "https://api.github.com/users/azdavis/repos", "events_url": "https://api.github.com/users/azdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/azdavis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "azdavis", "id": 6496454, "node_id": "MDQ6VXNlcjY0OTY0NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6496454?v=4", "gravatar_id": "", "url": "https://api.github.com/users/azdavis", "html_url": "https://github.com/azdavis", "followers_url": "https://api.github.com/users/azdavis/followers", "following_url": "https://api.github.com/users/azdavis/following{/other_user}", "gists_url": "https://api.github.com/users/azdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/azdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/azdavis/subscriptions", "organizations_url": "https://api.github.com/users/azdavis/orgs", "repos_url": "https://api.github.com/users/azdavis/repos", "events_url": "https://api.github.com/users/azdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/azdavis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fcbe73ec1caad761eb6cf1a641fa667ac920076b", "url": "https://api.github.com/repos/rust-lang/rust/commits/fcbe73ec1caad761eb6cf1a641fa667ac920076b", "html_url": "https://github.com/rust-lang/rust/commit/fcbe73ec1caad761eb6cf1a641fa667ac920076b"}], "stats": {"total": 23, "additions": 14, "deletions": 9}, "files": [{"sha": "39ae99fbd69071ade15c92c1f5e861a71b7da02b", "filename": "lib/line-index/src/lib.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9de213c4fe10a001d1f55c76f157c1d9173694bc/lib%2Fline-index%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9de213c4fe10a001d1f55c76f157c1d9173694bc/lib%2Fline-index%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lib%2Fline-index%2Fsrc%2Flib.rs?ref=9de213c4fe10a001d1f55c76f157c1d9173694bc", "patch": "@@ -93,29 +93,30 @@ pub struct LineIndex {\n impl LineIndex {\n     /// Returns a `LineIndex` for the `text`.\n     pub fn new(text: &str) -> LineIndex {\n+        let mut newlines = Vec::with_capacity(16);\n         let mut line_wide_chars = IntMap::default();\n+\n         let mut wide_chars = Vec::new();\n+        let mut cur_row = TextSize::from(0);\n+        let mut cur_col = TextSize::from(0);\n+        let mut line = 0;\n \n-        let mut newlines = Vec::with_capacity(16);\n         newlines.push(TextSize::from(0));\n \n-        let mut cur_row = 0.into();\n-        let mut cur_col = 0.into();\n-        let mut line = 0;\n         for c in text.chars() {\n             let c_len = TextSize::of(c);\n             cur_row += c_len;\n             if c == '\\n' {\n                 newlines.push(cur_row);\n \n-                // Save any utf-16 characters seen in the previous line\n+                // Save any wide characters seen in the previous line\n                 if !wide_chars.is_empty() {\n-                    line_wide_chars\n-                        .insert(line, std::mem::take(&mut wide_chars).into_boxed_slice());\n+                    let cs = std::mem::take(&mut wide_chars).into_boxed_slice();\n+                    line_wide_chars.insert(line, cs);\n                 }\n \n                 // Prepare for processing the next line\n-                cur_col = 0.into();\n+                cur_col = TextSize::from(0);\n                 line += 1;\n                 continue;\n             }\n@@ -127,7 +128,7 @@ impl LineIndex {\n             cur_col += c_len;\n         }\n \n-        // Save any utf-16 characters seen in the last line\n+        // Save any wide characters seen in the last line\n         if !wide_chars.is_empty() {\n             line_wide_chars.insert(line, wide_chars.into_boxed_slice());\n         }\n@@ -136,6 +137,10 @@ impl LineIndex {\n     }\n \n     /// Transforms the `TextSize` into a `LineCol`.\n+    ///\n+    /// # Panics\n+    ///\n+    /// If the offset is invalid.\n     pub fn line_col(&self, offset: TextSize) -> LineCol {\n         let line = self.newlines.partition_point(|&it| it <= offset) - 1;\n         let line_start_offset = self.newlines[line];"}]}