{"sha": "14d155a3dc42b35856e45fd9f4212ac0c432cd10", "node_id": "C_kwDOAAsO6NoAKDE0ZDE1NWEzZGM0MmIzNTg1NmU0NWZkOWY0MjEyYWMwYzQzMmNkMTA", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2022-06-08T20:32:17Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2022-06-08T20:32:41Z"}, "message": "Rename `panic_strategy` query to `required_panic_strategy`", "tree": {"sha": "2842cb30254ee604f48321302f8a53ca81ea684e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2842cb30254ee604f48321302f8a53ca81ea684e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14d155a3dc42b35856e45fd9f4212ac0c432cd10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14d155a3dc42b35856e45fd9f4212ac0c432cd10", "html_url": "https://github.com/rust-lang/rust/commit/14d155a3dc42b35856e45fd9f4212ac0c432cd10", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14d155a3dc42b35856e45fd9f4212ac0c432cd10/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e6c044ee6860d8b97324c75cf3dfd6f47e2488e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e6c044ee6860d8b97324c75cf3dfd6f47e2488e", "html_url": "https://github.com/rust-lang/rust/commit/9e6c044ee6860d8b97324c75cf3dfd6f47e2488e"}], "stats": {"total": 27, "additions": 13, "deletions": 14}, "files": [{"sha": "907324f0e4fc4d703c7ea0cc07c56f5a764b1f07", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14d155a3dc42b35856e45fd9f4212ac0c432cd10/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14d155a3dc42b35856e45fd9f4212ac0c432cd10/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=14d155a3dc42b35856e45fd9f4212ac0c432cd10", "patch": "@@ -744,7 +744,7 @@ impl<'a> CrateLoader<'a> {\n         if !data.is_panic_runtime() {\n             self.sess.err(&format!(\"the crate `{}` is not a panic runtime\", name));\n         }\n-        if data.panic_strategy() != Some(desired_strategy) {\n+        if data.required_panic_strategy() != Some(desired_strategy) {\n             self.sess.err(&format!(\n                 \"the crate `{}` does not have the panic \\\n                                     strategy `{}`\","}, {"sha": "770d164894a7329fe0ba0027020295939eff639d", "filename": "compiler/rustc_metadata/src/dependency_format.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14d155a3dc42b35856e45fd9f4212ac0c432cd10/compiler%2Frustc_metadata%2Fsrc%2Fdependency_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14d155a3dc42b35856e45fd9f4212ac0c432cd10/compiler%2Frustc_metadata%2Fsrc%2Fdependency_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fdependency_format.rs?ref=14d155a3dc42b35856e45fd9f4212ac0c432cd10", "patch": "@@ -368,7 +368,7 @@ fn verify_ok(tcx: TyCtxt<'_>, list: &[Linkage]) {\n             }\n             panic_runtime = Some((\n                 cnum,\n-                tcx.panic_strategy(cnum).unwrap_or_else(|| {\n+                tcx.required_panic_strategy(cnum).unwrap_or_else(|| {\n                     bug!(\"cannot determine panic strategy of a panic runtime\");\n                 }),\n             ));\n@@ -406,7 +406,7 @@ fn verify_ok(tcx: TyCtxt<'_>, list: &[Linkage]) {\n                 continue;\n             }\n \n-            if let Some(found_strategy) = tcx.panic_strategy(cnum) && desired_strategy != found_strategy {\n+            if let Some(found_strategy) = tcx.required_panic_strategy(cnum) && desired_strategy != found_strategy {\n                 sess.err(&format!(\n                     \"the crate `{}` requires \\\n                                panic strategy `{}` which is \\"}, {"sha": "b8efca19fb28be7f8a48a71ec1a81ce6bf39af4a", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14d155a3dc42b35856e45fd9f4212ac0c432cd10/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14d155a3dc42b35856e45fd9f4212ac0c432cd10/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=14d155a3dc42b35856e45fd9f4212ac0c432cd10", "patch": "@@ -1759,8 +1759,8 @@ impl CrateMetadata {\n         self.dep_kind.with_lock(|dep_kind| *dep_kind = f(*dep_kind))\n     }\n \n-    pub(crate) fn panic_strategy(&self) -> Option<PanicStrategy> {\n-        self.root.panic_strategy\n+    pub(crate) fn required_panic_strategy(&self) -> Option<PanicStrategy> {\n+        self.root.required_panic_strategy\n     }\n \n     pub(crate) fn needs_panic_runtime(&self) -> bool {"}, {"sha": "1237ac4ec478000e331d2df9e6706bbb67589eef", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14d155a3dc42b35856e45fd9f4212ac0c432cd10/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14d155a3dc42b35856e45fd9f4212ac0c432cd10/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=14d155a3dc42b35856e45fd9f4212ac0c432cd10", "patch": "@@ -246,7 +246,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     has_global_allocator => { cdata.root.has_global_allocator }\n     has_panic_handler => { cdata.root.has_panic_handler }\n     is_profiler_runtime => { cdata.root.profiler_runtime }\n-    panic_strategy => { cdata.root.panic_strategy }\n+    required_panic_strategy => { cdata.root.required_panic_strategy }\n     panic_in_drop_strategy => { cdata.root.panic_in_drop_strategy }\n     extern_crate => {\n         let r = *cdata.extern_crate.lock();"}, {"sha": "12cc5a72aa736689e25949c5d3acd8c46521e65a", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14d155a3dc42b35856e45fd9f4212ac0c432cd10/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14d155a3dc42b35856e45fd9f4212ac0c432cd10/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=14d155a3dc42b35856e45fd9f4212ac0c432cd10", "patch": "@@ -665,7 +665,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             triple: tcx.sess.opts.target_triple.clone(),\n             hash: tcx.crate_hash(LOCAL_CRATE),\n             stable_crate_id: tcx.def_path_hash(LOCAL_CRATE.as_def_id()).stable_crate_id(),\n-            panic_strategy: tcx.required_panic_strategy(()),\n+            required_panic_strategy: tcx.required_panic_strategy(LOCAL_CRATE),\n             panic_in_drop_strategy: tcx.sess.opts.debugging_opts.panic_in_drop,\n             edition: tcx.sess.edition(),\n             has_global_allocator: tcx.has_global_allocator(LOCAL_CRATE),"}, {"sha": "900d9b9842631df308fbabe45c18b53edb8a0a80", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14d155a3dc42b35856e45fd9f4212ac0c432cd10/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14d155a3dc42b35856e45fd9f4212ac0c432cd10/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=14d155a3dc42b35856e45fd9f4212ac0c432cd10", "patch": "@@ -217,7 +217,7 @@ pub(crate) struct CrateRoot {\n     extra_filename: String,\n     hash: Svh,\n     stable_crate_id: StableCrateId,\n-    panic_strategy: Option<PanicStrategy>,\n+    required_panic_strategy: Option<PanicStrategy>,\n     panic_in_drop_strategy: PanicStrategy,\n     edition: Edition,\n     has_global_allocator: bool,"}, {"sha": "bcf7497b832b45a51527ea19c43c855747f53896", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/14d155a3dc42b35856e45fd9f4212ac0c432cd10/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14d155a3dc42b35856e45fd9f4212ac0c432cd10/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=14d155a3dc42b35856e45fd9f4212ac0c432cd10", "patch": "@@ -1369,10 +1369,7 @@ rustc_queries! {\n         desc { |tcx| \"check if `{}` contains FFI-unwind calls\", tcx.def_path_str(key.to_def_id()) }\n         cache_on_disk_if { true }\n     }\n-    query required_panic_strategy(_: ()) -> Option<PanicStrategy> {\n-        desc { \"compute the required panic strategy for the current crate\" }\n-    }\n-    query panic_strategy(_: CrateNum) -> Option<PanicStrategy> {\n+    query required_panic_strategy(_: CrateNum) -> Option<PanicStrategy> {\n         fatal_cycle\n         desc { \"query a crate's required panic strategy\" }\n         separate_provide_extern"}, {"sha": "d09d2a0b26346ad878b52dfb3864bbab75733910", "filename": "compiler/rustc_mir_transform/src/ffi_unwind_calls.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14d155a3dc42b35856e45fd9f4212ac0c432cd10/compiler%2Frustc_mir_transform%2Fsrc%2Fffi_unwind_calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14d155a3dc42b35856e45fd9f4212ac0c432cd10/compiler%2Frustc_mir_transform%2Fsrc%2Fffi_unwind_calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fffi_unwind_calls.rs?ref=14d155a3dc42b35856e45fd9f4212ac0c432cd10", "patch": "@@ -1,4 +1,4 @@\n-use rustc_hir::def_id::{LocalDefId, LOCAL_CRATE};\n+use rustc_hir::def_id::{CrateNum, LocalDefId, LOCAL_CRATE};\n use rustc_middle::mir::*;\n use rustc_middle::ty::layout;\n use rustc_middle::ty::query::Providers;\n@@ -123,7 +123,9 @@ fn has_ffi_unwind_calls(tcx: TyCtxt<'_>, local_def_id: LocalDefId) -> bool {\n     tainted\n }\n \n-fn required_panic_strategy(tcx: TyCtxt<'_>, (): ()) -> Option<PanicStrategy> {\n+fn required_panic_strategy(tcx: TyCtxt<'_>, cnum: CrateNum) -> Option<PanicStrategy> {\n+    assert_eq!(cnum, LOCAL_CRATE);\n+\n     if tcx.is_panic_runtime(LOCAL_CRATE) {\n         return Some(tcx.sess.panic_strategy());\n     }"}]}