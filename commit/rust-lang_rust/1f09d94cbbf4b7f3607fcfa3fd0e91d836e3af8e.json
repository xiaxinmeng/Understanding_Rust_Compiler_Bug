{"sha": "1f09d94cbbf4b7f3607fcfa3fd0e91d836e3af8e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmMDlkOTRjYmJmNGI3ZjM2MDdmY2ZhM2ZkMGU5MWQ4MzZlM2FmOGU=", "commit": {"author": {"name": "Ruben Schmidmeister", "email": "ruben.schmidmeister@icloud.com", "date": "2019-05-09T15:44:52Z"}, "committer": {"name": "Ruben Schmidmeister", "email": "ruben.schmidmeister@icloud.com", "date": "2019-05-09T15:44:52Z"}, "message": "Make sure windows newlines don't gain an extra carriage return", "tree": {"sha": "54833526688df92911c97dd00a0eb9cafd68278b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54833526688df92911c97dd00a0eb9cafd68278b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f09d94cbbf4b7f3607fcfa3fd0e91d836e3af8e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEEU0FXzFYkrmfOhhqxKTh7Wnqvhj8FAlzUSxUACgkQKTh7Wnqv\nhj8/Egf8CuGvhg6dd/EtFQSsTNDznJi9K7hPtRWz3h7zZaBHVi8hJLi03W3hOLAi\nrIZJRTto0l1YmuiLzzwseltJTW7tKLGTA82M3smuBcy58V1BAHr0LID85v5Dp1lo\nFOIS2T0oP28lEENHlw7VX1PRwF3Pu9R+tUwbnEyhYppRuFwS6y6KR/XiJuheZZCJ\nFlh2r+C0U65yNHoXfzgeHAfk6+EvszOiLQUSdtyLUx8cBivRR23+mve2K5cavR77\n0Dpj0Dv5m0GcxZ+Q8TVnR2Hczrzqf8n+mREAnvGlG80lzzn5vByzZ4lVFTOAdzvq\n847kXpF4wd4UJHeziaJxv+IwbQr7Kw==\n=ACI8\n-----END PGP SIGNATURE-----", "payload": "tree 54833526688df92911c97dd00a0eb9cafd68278b\nparent f54fc2f2fc7512292e00a7826ca5d144c359fbe4\nauthor Ruben Schmidmeister <ruben.schmidmeister@icloud.com> 1557416692 +0200\ncommitter Ruben Schmidmeister <ruben.schmidmeister@icloud.com> 1557416692 +0200\n\nMake sure windows newlines don't gain an extra carriage return\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f09d94cbbf4b7f3607fcfa3fd0e91d836e3af8e", "html_url": "https://github.com/rust-lang/rust/commit/1f09d94cbbf4b7f3607fcfa3fd0e91d836e3af8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f09d94cbbf4b7f3607fcfa3fd0e91d836e3af8e/comments", "author": {"login": "bash", "id": 4602612, "node_id": "MDQ6VXNlcjQ2MDI2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/4602612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bash", "html_url": "https://github.com/bash", "followers_url": "https://api.github.com/users/bash/followers", "following_url": "https://api.github.com/users/bash/following{/other_user}", "gists_url": "https://api.github.com/users/bash/gists{/gist_id}", "starred_url": "https://api.github.com/users/bash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bash/subscriptions", "organizations_url": "https://api.github.com/users/bash/orgs", "repos_url": "https://api.github.com/users/bash/repos", "events_url": "https://api.github.com/users/bash/events{/privacy}", "received_events_url": "https://api.github.com/users/bash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bash", "id": 4602612, "node_id": "MDQ6VXNlcjQ2MDI2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/4602612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bash", "html_url": "https://github.com/bash", "followers_url": "https://api.github.com/users/bash/followers", "following_url": "https://api.github.com/users/bash/following{/other_user}", "gists_url": "https://api.github.com/users/bash/gists{/gist_id}", "starred_url": "https://api.github.com/users/bash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bash/subscriptions", "organizations_url": "https://api.github.com/users/bash/orgs", "repos_url": "https://api.github.com/users/bash/repos", "events_url": "https://api.github.com/users/bash/events{/privacy}", "received_events_url": "https://api.github.com/users/bash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f54fc2f2fc7512292e00a7826ca5d144c359fbe4", "url": "https://api.github.com/repos/rust-lang/rust/commits/f54fc2f2fc7512292e00a7826ca5d144c359fbe4", "html_url": "https://github.com/rust-lang/rust/commit/f54fc2f2fc7512292e00a7826ca5d144c359fbe4"}], "stats": {"total": 74, "additions": 53, "deletions": 21}, "files": [{"sha": "d46aabe97615fa47042d92e345c95e7c3fa7cdf8", "filename": "src/formatting/newline_style.rs", "status": "modified", "additions": 53, "deletions": 21, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/1f09d94cbbf4b7f3607fcfa3fd0e91d836e3af8e/src%2Fformatting%2Fnewline_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f09d94cbbf4b7f3607fcfa3fd0e91d836e3af8e/src%2Fformatting%2Fnewline_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformatting%2Fnewline_style.rs?ref=1f09d94cbbf4b7f3607fcfa3fd0e91d836e3af8e", "patch": "@@ -65,10 +65,13 @@ fn native_newline_style() -> EffectiveNewlineStyle {\n \n fn convert_to_windows_newlines(formatted_text: &String) -> String {\n     let mut transformed = String::with_capacity(2 * formatted_text.capacity());\n-    for c in formatted_text.chars() {\n-        match c {\n+    let mut chars = formatted_text.chars().peekable();\n+    while let Some(current_char) = chars.next() {\n+        let next_char = chars.peek();\n+        match current_char {\n             LINE_FEED => transformed.push_str(WINDOWS_NEWLINE),\n-            c => transformed.push(c),\n+            CARRIAGE_RETURN if next_char == Some(&LINE_FEED) => {}\n+            current_char => transformed.push(current_char),\n         }\n     }\n     transformed\n@@ -162,34 +165,63 @@ mod tests {\n \n     #[test]\n     fn applies_unix_newlines() {\n-        let formatted_text = \"One\\r\\nTwo\\nThree\";\n-        let raw_input_text = formatted_text;\n+        test_newlines_are_applied_correctly(\n+            \"One\\r\\nTwo\\nThree\",\n+            \"One\\nTwo\\nThree\",\n+            NewlineStyle::Unix,\n+        );\n+    }\n \n-        let mut out = String::from(formatted_text);\n-        apply_newline_style(NewlineStyle::Unix, &mut out, raw_input_text);\n+    #[test]\n+    fn applying_windows_newlines_changes_nothing_for_windows_newlines() {\n+        let formatted_text = \"One\\r\\nTwo\\r\\nThree\";\n \n-        assert_eq!(\"One\\nTwo\\nThree\", &out);\n+        test_newlines_are_applied_correctly(formatted_text, formatted_text, NewlineStyle::Windows);\n     }\n \n     #[test]\n-    fn preserves_standalone_carriage_returns_when_applying_windows_newlines() {\n-        let formatted_text = \"One\\nTwo\\nThree\\rDrei\";\n-        let raw_input_text = \"One\\nTwo\\nThree\\rDrei\";\n-\n-        let mut out = String::from(formatted_text);\n-        apply_newline_style(NewlineStyle::Windows, &mut out, raw_input_text);\n+    fn keeps_carriage_returns_when_applying_windows_newlines_to_str_with_unix_newlines() {\n+        test_newlines_are_applied_correctly(\n+            \"One\\nTwo\\nThree\\rDrei\",\n+            \"One\\r\\nTwo\\r\\nThree\\rDrei\",\n+            NewlineStyle::Windows,\n+        );\n+    }\n \n-        assert_eq!(\"One\\r\\nTwo\\r\\nThree\\rDrei\", &out);\n+    #[test]\n+    fn keeps_carriage_returns_when_applying_unix_newlines_to_str_with_unix_newlines() {\n+        test_newlines_are_applied_correctly(\n+            \"One\\nTwo\\nThree\\rDrei\",\n+            \"One\\nTwo\\nThree\\rDrei\",\n+            NewlineStyle::Unix,\n+        );\n     }\n \n     #[test]\n-    fn preserves_standalone_carriage_returns_when_applying_unix_newlines() {\n-        let formatted_text = \"One\\nTwo\\nThree\\rDrei\";\n-        let raw_input_text = \"One\\nTwo\\nThree\\rDrei\";\n+    fn keeps_carriage_returns_when_applying_windows_newlines_to_str_with_windows_newlines() {\n+        test_newlines_are_applied_correctly(\n+            \"One\\r\\nTwo\\r\\nThree\\rDrei\",\n+            \"One\\r\\nTwo\\r\\nThree\\rDrei\",\n+            NewlineStyle::Windows,\n+        );\n+    }\n \n-        let mut out = String::from(formatted_text);\n-        apply_newline_style(NewlineStyle::Unix, &mut out, raw_input_text);\n+    #[test]\n+    fn keeps_carriage_returns_when_applying_unix_newlines_to_str_with_windows_newlines() {\n+        test_newlines_are_applied_correctly(\n+            \"One\\r\\nTwo\\r\\nThree\\rDrei\",\n+            \"One\\nTwo\\nThree\\rDrei\",\n+            NewlineStyle::Unix,\n+        );\n+    }\n \n-        assert_eq!(\"One\\nTwo\\nThree\\rDrei\", &out);\n+    fn test_newlines_are_applied_correctly(\n+        input: &str,\n+        expected: &str,\n+        newline_style: NewlineStyle,\n+    ) {\n+        let mut out = String::from(input);\n+        apply_newline_style(newline_style, &mut out, input);\n+        assert_eq!(expected, &out);\n     }\n }"}]}