{"sha": "c652a4fb566ac4bec1d62c66769dd055ad239df6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2NTJhNGZiNTY2YWM0YmVjMWQ2MmM2Njc2OWRkMDU1YWQyMzlkZjY=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-03-03T14:18:44Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-03-04T18:38:26Z"}, "message": "Do not purge LLVM build directory on rebuild\n\nAdd some comments", "tree": {"sha": "2a25dab2e25fd59a3a86fecaf8da8f41dc5c1c0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a25dab2e25fd59a3a86fecaf8da8f41dc5c1c0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c652a4fb566ac4bec1d62c66769dd055ad239df6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c652a4fb566ac4bec1d62c66769dd055ad239df6", "html_url": "https://github.com/rust-lang/rust/commit/c652a4fb566ac4bec1d62c66769dd055ad239df6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c652a4fb566ac4bec1d62c66769dd055ad239df6/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2f6185294e5e2c3412776a33ab977af20d4cdb4", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2f6185294e5e2c3412776a33ab977af20d4cdb4", "html_url": "https://github.com/rust-lang/rust/commit/e2f6185294e5e2c3412776a33ab977af20d4cdb4"}], "stats": {"total": 36, "additions": 21, "deletions": 15}, "files": [{"sha": "483f45fdd621877a2e6772277111f13d3c47280d", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c652a4fb566ac4bec1d62c66769dd055ad239df6/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c652a4fb566ac4bec1d62c66769dd055ad239df6/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=c652a4fb566ac4bec1d62c66769dd055ad239df6", "patch": "@@ -41,28 +41,32 @@ pub fn llvm(build: &Build, target: &str) {\n         }\n     }\n \n-    // If the cleaning trigger is newer than our built artifacts (or if the\n-    // artifacts are missing) then we keep going, otherwise we bail out.\n-    let dst = build.llvm_out(target);\n-    let stamp = build.src.join(\"src/rustllvm/llvm-auto-clean-trigger\");\n-    let mut stamp_contents = String::new();\n-    t!(t!(File::open(&stamp)).read_to_string(&mut stamp_contents));\n-    let done_stamp = dst.join(\"llvm-finished-building\");\n+    let clean_trigger = build.src.join(\"src/rustllvm/llvm-auto-clean-trigger\");\n+    let mut clean_trigger_contents = String::new();\n+    t!(t!(File::open(&clean_trigger)).read_to_string(&mut clean_trigger_contents));\n+\n+    let out_dir = build.llvm_out(target);\n+    let done_stamp = out_dir.join(\"llvm-finished-building\");\n     if done_stamp.exists() {\n         let mut done_contents = String::new();\n         t!(t!(File::open(&done_stamp)).read_to_string(&mut done_contents));\n-        if done_contents == stamp_contents {\n+\n+        // LLVM was already built previously.\n+        // We don't track changes in LLVM sources, so we need to choose between reusing\n+        // what was built previously, or cleaning the directory and doing a fresh build.\n+        // The choice depends on contents of the clean-trigger file.\n+        // If the contents are the same as during the previous build, then no action is required.\n+        // If the contents differ from the previous build, then cleaning is triggered.\n+        if done_contents == clean_trigger_contents {\n             return\n+        } else {\n+            t!(fs::remove_dir_all(&out_dir));\n         }\n     }\n-    drop(fs::remove_dir_all(&dst));\n \n     println!(\"Building LLVM for {}\", target);\n-\n     let _time = util::timeit();\n-    let _ = fs::remove_dir_all(&dst.join(\"build\"));\n-    t!(fs::create_dir_all(&dst.join(\"build\")));\n-    let assertions = if build.config.llvm_assertions {\"ON\"} else {\"OFF\"};\n+    t!(fs::create_dir_all(&out_dir));\n \n     // http://llvm.org/docs/CMake.html\n     let mut cfg = cmake::Config::new(build.src.join(\"src/llvm\"));\n@@ -82,9 +86,11 @@ pub fn llvm(build: &Build, target: &str) {\n         None => \"X86;ARM;AArch64;Mips;PowerPC;SystemZ;JSBackend;MSP430;Sparc;NVPTX\",\n     };\n \n+    let assertions = if build.config.llvm_assertions {\"ON\"} else {\"OFF\"};\n+\n     cfg.target(target)\n        .host(&build.config.build)\n-       .out_dir(&dst)\n+       .out_dir(&out_dir)\n        .profile(profile)\n        .define(\"LLVM_ENABLE_ASSERTIONS\", assertions)\n        .define(\"LLVM_TARGETS_TO_BUILD\", llvm_targets)\n@@ -142,7 +148,7 @@ pub fn llvm(build: &Build, target: &str) {\n     //        tools and libs on all platforms.\n     cfg.build();\n \n-    t!(t!(File::create(&done_stamp)).write_all(stamp_contents.as_bytes()));\n+    t!(t!(File::create(&done_stamp)).write_all(clean_trigger_contents.as_bytes()));\n }\n \n fn check_llvm_version(build: &Build, llvm_config: &Path) {"}]}