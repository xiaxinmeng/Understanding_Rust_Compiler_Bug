{"sha": "770378a313a573776b16237a46b75bafa49072c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3MDM3OGEzMTNhNTczNzc2YjE2MjM3YTQ2Yjc1YmFmYTQ5MDcyYzE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-20T23:02:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-20T23:02:01Z"}, "message": "auto merge of #18773 : subhashb/rust/convert_remaining_failures_to_panic, r=steveklabnik\n\nI have also renamed `fail` to `panic` in some non-documentation comments, where I thought it mattered.\r\nFixes #18677 \r\n\r\ncc @steveklabnik", "tree": {"sha": "bc86d4c35a881325d9b70edfdfe36f6f42bcf47b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc86d4c35a881325d9b70edfdfe36f6f42bcf47b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/770378a313a573776b16237a46b75bafa49072c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/770378a313a573776b16237a46b75bafa49072c1", "html_url": "https://github.com/rust-lang/rust/commit/770378a313a573776b16237a46b75bafa49072c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/770378a313a573776b16237a46b75bafa49072c1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d13aff12246ab3c72b0c5f186400a21f825c0a6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d13aff12246ab3c72b0c5f186400a21f825c0a6c", "html_url": "https://github.com/rust-lang/rust/commit/d13aff12246ab3c72b0c5f186400a21f825c0a6c"}, {"sha": "bc9de771d5f2ab71a0e3b0eb27a92c65e8ddd4b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc9de771d5f2ab71a0e3b0eb27a92c65e8ddd4b9", "html_url": "https://github.com/rust-lang/rust/commit/bc9de771d5f2ab71a0e3b0eb27a92c65e8ddd4b9"}], "stats": {"total": 98, "additions": 57, "deletions": 41}, "files": [{"sha": "4a54b361001ceba9a07914676bdccf0b2cce7a61", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/770378a313a573776b16237a46b75bafa49072c1/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770378a313a573776b16237a46b75bafa49072c1/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=770378a313a573776b16237a46b75bafa49072c1", "patch": "@@ -424,7 +424,7 @@ fn merge_sort<T>(v: &mut [T], compare: |&T, &T| -> Ordering) {\n     // allocate some memory to use as scratch memory, we keep the\n     // length 0 so we can keep shallow copies of the contents of `v`\n     // without risking the dtors running on an object twice if\n-    // `compare` fails.\n+    // `compare` panics.\n     let mut working_space = Vec::with_capacity(2 * len);\n     // these both are buffers of length `len`.\n     let mut buf_dat = working_space.as_mut_ptr();"}, {"sha": "fcf2dab6908900b0f426ce74c0fa87052e2d1d8d", "filename": "src/libcore/option.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/770378a313a573776b16237a46b75bafa49072c1/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770378a313a573776b16237a46b75bafa49072c1/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=770378a313a573776b16237a46b75bafa49072c1", "patch": "@@ -303,7 +303,7 @@ impl<T> Option<T> {\n     ///\n     /// # Panics\n     ///\n-    /// Fails if the value is a `None` with a custom panic message provided by\n+    /// Panics if the value is a `None` with a custom panic message provided by\n     /// `msg`.\n     ///\n     /// # Example\n@@ -315,7 +315,7 @@ impl<T> Option<T> {\n     ///\n     /// ```{.should_fail}\n     /// let x: Option<&str> = None;\n-    /// x.expect(\"the world is ending\"); // fails with `world is ending`\n+    /// x.expect(\"the world is ending\"); // panics with `world is ending`\n     /// ```\n     #[inline]\n     #[unstable = \"waiting for conventions\"]"}, {"sha": "c4d712cb673620f24a64eeecbf6e41a1db9b3801", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/770378a313a573776b16237a46b75bafa49072c1/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770378a313a573776b16237a46b75bafa49072c1/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=770378a313a573776b16237a46b75bafa49072c1", "patch": "@@ -569,7 +569,7 @@ impl fmt::Show for Fail_ {\n ///\n /// On success returns `Ok(Matches)`. Use methods such as `opt_present`\n /// `opt_str`, etc. to interrogate results.\n-/// # Errors\n+/// # Panics\n ///\n /// Returns `Err(Fail_)` on failure: use the `Show` implementation of `Fail_` to display\n /// information about it.\n@@ -860,9 +860,9 @@ enum LengthLimit {\n /// Note: Function was moved here from `std::str` because this module is the only place that\n /// uses it, and because it was too specific for a general string function.\n ///\n-/// #Failure:\n+/// # Panics\n ///\n-/// Fails during iteration if the string contains a non-whitespace\n+/// Panics during iteration if the string contains a non-whitespace\n /// sequence longer than the limit.\n fn each_split_within<'a>(ss: &'a str, lim: uint, it: |&'a str| -> bool)\n                      -> bool {"}, {"sha": "81e6152b3d7c3802499a7f9c11e8e8849b0af6f7", "filename": "src/libgreen/stack.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/770378a313a573776b16237a46b75bafa49072c1/src%2Flibgreen%2Fstack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770378a313a573776b16237a46b75bafa49072c1/src%2Flibgreen%2Fstack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fstack.rs?ref=770378a313a573776b16237a46b75bafa49072c1", "patch": "@@ -42,7 +42,7 @@ impl Stack {\n     pub fn new(size: uint) -> Stack {\n         // Map in a stack. Eventually we might be able to handle stack\n         // allocation failure, which would fail to spawn the task. But there's\n-        // not many sensible things to do on OOM.  Failure seems fine (and is\n+        // not many sensible things to do on OOM. Panic seems fine (and is\n         // what the old stack allocation did).\n         let stack = match MemoryMap::new(size, &[MapReadable, MapWritable,\n                                                  MapNonStandardFlags(STACK_FLAGS)]) {"}, {"sha": "d874f1deed3c2194917becf96f942162121f6e16", "filename": "src/librand/distributions/exponential.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/770378a313a573776b16237a46b75bafa49072c1/src%2Flibrand%2Fdistributions%2Fexponential.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770378a313a573776b16237a46b75bafa49072c1/src%2Flibrand%2Fdistributions%2Fexponential.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fexponential.rs?ref=770378a313a573776b16237a46b75bafa49072c1", "patch": "@@ -73,7 +73,7 @@ pub struct Exp {\n \n impl Exp {\n     /// Construct a new `Exp` with the given shape parameter\n-    /// `lambda`. Fails if `lambda <= 0`.\n+    /// `lambda`. Panics if `lambda <= 0`.\n     pub fn new(lambda: f64) -> Exp {\n         assert!(lambda > 0.0, \"Exp::new called with `lambda` <= 0\");\n         Exp { lambda_inverse: 1.0 / lambda }"}, {"sha": "d33d838766f220da9cda5952f77e8fd7308b1c60", "filename": "src/librand/distributions/gamma.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/770378a313a573776b16237a46b75bafa49072c1/src%2Flibrand%2Fdistributions%2Fgamma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770378a313a573776b16237a46b75bafa49072c1/src%2Flibrand%2Fdistributions%2Fgamma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fgamma.rs?ref=770378a313a573776b16237a46b75bafa49072c1", "patch": "@@ -95,7 +95,7 @@ impl Gamma {\n     /// Construct an object representing the `Gamma(shape, scale)`\n     /// distribution.\n     ///\n-    /// Fails if `shape <= 0` or `scale <= 0`.\n+    /// Panics if `shape <= 0` or `scale <= 0`.\n     pub fn new(shape: f64, scale: f64) -> Gamma {\n         assert!(shape > 0.0, \"Gamma::new called with shape <= 0\");\n         assert!(scale > 0.0, \"Gamma::new called with scale <= 0\");\n@@ -208,7 +208,7 @@ enum ChiSquaredRepr {\n \n impl ChiSquared {\n     /// Create a new chi-squared distribution with degrees-of-freedom\n-    /// `k`. Fails if `k < 0`.\n+    /// `k`. Panics if `k < 0`.\n     pub fn new(k: f64) -> ChiSquared {\n         let repr = if k == 1.0 {\n             DoFExactlyOne\n@@ -261,7 +261,7 @@ pub struct FisherF {\n \n impl FisherF {\n     /// Create a new `FisherF` distribution, with the given\n-    /// parameter. Fails if either `m` or `n` are not positive.\n+    /// parameter. Panics if either `m` or `n` are not positive.\n     pub fn new(m: f64, n: f64) -> FisherF {\n         assert!(m > 0.0, \"FisherF::new called with `m < 0`\");\n         assert!(n > 0.0, \"FisherF::new called with `n < 0`\");\n@@ -302,7 +302,7 @@ pub struct StudentT {\n \n impl StudentT {\n     /// Create a new Student t distribution with `n` degrees of\n-    /// freedom. Fails if `n <= 0`.\n+    /// freedom. Panics if `n <= 0`.\n     pub fn new(n: f64) -> StudentT {\n         assert!(n > 0.0, \"StudentT::new called with `n <= 0`\");\n         StudentT {"}, {"sha": "5bbddcb7c1652892d1594d3d59df2f652f18cb65", "filename": "src/librand/distributions/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/770378a313a573776b16237a46b75bafa49072c1/src%2Flibrand%2Fdistributions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770378a313a573776b16237a46b75bafa49072c1/src%2Flibrand%2Fdistributions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fmod.rs?ref=770378a313a573776b16237a46b75bafa49072c1", "patch": "@@ -113,7 +113,7 @@ pub struct WeightedChoice<'a, T:'a> {\n impl<'a, T: Clone> WeightedChoice<'a, T> {\n     /// Create a new `WeightedChoice`.\n     ///\n-    /// Fails if:\n+    /// Panics if:\n     /// - `v` is empty\n     /// - the total weight is 0\n     /// - the total weight is larger than a `uint` can contain."}, {"sha": "b3dc20819bc85a56463688579fdbb331c985086c", "filename": "src/librand/distributions/normal.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/770378a313a573776b16237a46b75bafa49072c1/src%2Flibrand%2Fdistributions%2Fnormal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770378a313a573776b16237a46b75bafa49072c1/src%2Flibrand%2Fdistributions%2Fnormal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fnormal.rs?ref=770378a313a573776b16237a46b75bafa49072c1", "patch": "@@ -90,7 +90,11 @@ pub struct Normal {\n \n impl Normal {\n     /// Construct a new `Normal` distribution with the given mean and\n-    /// standard deviation. Fails if `std_dev < 0`.\n+    /// standard deviation.\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics if `std_dev < 0`.\n     pub fn new(mean: f64, std_dev: f64) -> Normal {\n         assert!(std_dev >= 0.0, \"Normal::new called with `std_dev` < 0\");\n         Normal {\n@@ -132,7 +136,11 @@ pub struct LogNormal {\n \n impl LogNormal {\n     /// Construct a new `LogNormal` distribution with the given mean\n-    /// and standard deviation. Fails if `std_dev < 0`.\n+    /// and standard deviation.\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics if `std_dev < 0`.\n     pub fn new(mean: f64, std_dev: f64) -> LogNormal {\n         assert!(std_dev >= 0.0, \"LogNormal::new called with `std_dev` < 0\");\n         LogNormal { norm: Normal::new(mean, std_dev) }"}, {"sha": "6301623bbdc184ba429a2296a30432a62c32adac", "filename": "src/librand/distributions/range.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/770378a313a573776b16237a46b75bafa49072c1/src%2Flibrand%2Fdistributions%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770378a313a573776b16237a46b75bafa49072c1/src%2Flibrand%2Fdistributions%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Frange.rs?ref=770378a313a573776b16237a46b75bafa49072c1", "patch": "@@ -55,7 +55,7 @@ pub struct Range<X> {\n \n impl<X: SampleRange + PartialOrd> Range<X> {\n     /// Create a new `Range` instance that samples uniformly from\n-    /// `[low, high)`. Fails if `low >= high`.\n+    /// `[low, high)`. Panics if `low >= high`.\n     pub fn new(low: X, high: X) -> Range<X> {\n         assert!(low < high, \"Range::new called with `low >= high`\");\n         SampleRange::construct_range(low, high)"}, {"sha": "b7b5b09cfe4a00df82a07118abfc0aa438ca8320", "filename": "src/librand/lib.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/770378a313a573776b16237a46b75bafa49072c1/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770378a313a573776b16237a46b75bafa49072c1/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=770378a313a573776b16237a46b75bafa49072c1", "patch": "@@ -204,15 +204,18 @@ pub trait Rng {\n         Generator { rng: self }\n     }\n \n-    /// Generate a random value in the range [`low`, `high`). Fails if\n-    /// `low >= high`.\n+    /// Generate a random value in the range [`low`, `high`).\n     ///\n     /// This is a convenience wrapper around\n     /// `distributions::Range`. If this function will be called\n     /// repeatedly with the same arguments, one should use `Range`, as\n     /// that will amortize the computations that allow for perfect\n     /// uniformity, as they only happen on initialization.\n     ///\n+    /// # Panics\n+    ///\n+    /// Panics if `low >= high`.\n+    ///\n     /// # Example\n     ///\n     /// ```rust"}, {"sha": "3f3f3179d27b8c4177c14675b826e90104ea9906", "filename": "src/librbml/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/770378a313a573776b16237a46b75bafa49072c1/src%2Flibrbml%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770378a313a573776b16237a46b75bafa49072c1/src%2Flibrbml%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrbml%2Flib.rs?ref=770378a313a573776b16237a46b75bafa49072c1", "patch": "@@ -841,7 +841,7 @@ pub mod writer {\n             // the encoded EBML (normally).  This is just for\n             // efficiency.  When debugging, though, we can emit such\n             // labels and then they will be checked by decoder to\n-            // try and check failures more quickly.\n+            // try and check panics more quickly.\n             if DEBUG { self.wr_tagged_str(EsLabel as uint, label) }\n             else { Ok(()) }\n         }"}, {"sha": "c361a25bf52eb6c9af82b72e8fa013b0662d6421", "filename": "src/libregex/compile.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/770378a313a573776b16237a46b75bafa49072c1/src%2Flibregex%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770378a313a573776b16237a46b75bafa49072c1/src%2Flibregex%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Fcompile.rs?ref=770378a313a573776b16237a46b75bafa49072c1", "patch": "@@ -66,7 +66,7 @@ pub enum Inst {\n     Jump(InstIdx),\n \n     // Jumps to the instruction at the first index given. If that leads to\n-    // a failing state, then the instruction at the second index given is\n+    // a panic state, then the instruction at the second index given is\n     // tried.\n     Split(InstIdx, InstIdx),\n }"}, {"sha": "6ad3d67af0acd2cf79547ff035d28cf5f19cc66c", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/770378a313a573776b16237a46b75bafa49072c1/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770378a313a573776b16237a46b75bafa49072c1/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=770378a313a573776b16237a46b75bafa49072c1", "patch": "@@ -766,7 +766,7 @@ impl NameBindings {\n     }\n \n     /**\n-     * Returns the module node. Fails if this node does not have a module\n+     * Returns the module node. Panics if this node does not have a module\n      * definition.\n      */\n     fn get_module(&self) -> Rc<Module> {\n@@ -1109,8 +1109,10 @@ impl<'a> Resolver<'a> {\n      * corresponding to the innermost block ID and returns the name bindings\n      * as well as the newly-created parent.\n      *\n-     * If this node does not have a module definition and we are not inside\n-     * a block, fails.\n+     * # Panics\n+     *\n+     * Panics if this node does not have a module definition and we are not inside\n+     * a block.\n      */\n     fn add_child(&self,\n                  name: Name,\n@@ -2795,7 +2797,7 @@ impl<'a> Resolver<'a> {\n         return Success(());\n     }\n \n-    // Resolves a glob import. Note that this function cannot fail; it either\n+    // Resolves a glob import. Note that this function cannot panic; it either\n     // succeeds or bails out (as importing * from an empty module or a module\n     // that exports nothing is valid).\n     fn resolve_glob_import(&mut self,"}, {"sha": "e9319e29555d5fce48ba87446abe7ae7f1e2a66e", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/770378a313a573776b16237a46b75bafa49072c1/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770378a313a573776b16237a46b75bafa49072c1/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=770378a313a573776b16237a46b75bafa49072c1", "patch": "@@ -3348,7 +3348,7 @@ pub fn lltype_is_sized<'tcx>(cx: &ctxt<'tcx>, ty: Ty<'tcx>) -> bool {\n     }\n }\n \n-// Return the smallest part of ty which is unsized. Fails if ty is sized.\n+// Return the smallest part of `ty` which is unsized. Fails if `ty` is sized.\n // 'Smallest' here means component of the static representation of the type; not\n // the size of an object at runtime.\n pub fn unsized_part_of_type<'tcx>(cx: &ctxt<'tcx>, ty: Ty<'tcx>) -> Ty<'tcx> {\n@@ -4916,7 +4916,7 @@ pub fn lookup_field_type<'tcx>(tcx: &ctxt<'tcx>,\n }\n \n // Look up the list of field names and IDs for a given struct.\n-// Fails if the id is not bound to a struct.\n+// Panics if the id is not bound to a struct.\n pub fn lookup_struct_fields(cx: &ctxt, did: ast::DefId) -> Vec<field_ty> {\n     if did.krate == ast::LOCAL_CRATE {\n         let struct_fields = cx.struct_fields.borrow();"}, {"sha": "70235a7c2fde57d30463dd639afc9998285c17a5", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/770378a313a573776b16237a46b75bafa49072c1/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770378a313a573776b16237a46b75bafa49072c1/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=770378a313a573776b16237a46b75bafa49072c1", "patch": "@@ -2606,7 +2606,7 @@ fn try_index_step<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n }\n \n /// Given the head of a `for` expression, looks up the `next` method in the\n-/// `Iterator` trait. Fails if the expression does not implement `next`.\n+/// `Iterator` trait. Panics if the expression does not implement `next`.\n ///\n /// The return type of this function represents the concrete element type\n /// `A` in the type `Iterator<A>` that the method returns."}, {"sha": "af5983244dfdd55b7539195539983a3b0f071b73", "filename": "src/librustc_trans/driver/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/770378a313a573776b16237a46b75bafa49072c1/src%2Flibrustc_trans%2Fdriver%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770378a313a573776b16237a46b75bafa49072c1/src%2Flibrustc_trans%2Fdriver%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdriver%2Fmod.rs?ref=770378a313a573776b16237a46b75bafa49072c1", "patch": "@@ -143,7 +143,7 @@ pub fn commit_date_str() -> Option<&'static str> {\n }\n \n /// Prints version information and returns None on success or an error\n-/// message on failure.\n+/// message on panic.\n pub fn version(binary: &str, matches: &getopts::Matches) -> Option<String> {\n     let verbose = match matches.opt_str(\"version\").as_ref().map(|s| s.as_slice()) {\n         None => false,\n@@ -425,7 +425,7 @@ pub fn list_metadata(sess: &Session, path: &Path,\n     metadata::loader::list_file_metadata(sess.target.target.options.is_like_osx, path, out)\n }\n \n-/// Run a procedure which will detect failures in the compiler and print nicer\n+/// Run a procedure which will detect panics in the compiler and print nicer\n /// error messages rather than just failing the test.\n ///\n /// The diagnostic emitter yielded to the procedure should be used for reporting\n@@ -492,7 +492,7 @@ pub fn monitor(f: proc():Send) {\n             }\n \n             // Panic so the process returns a failure code, but don't pollute the\n-            // output with some unnecessary failure messages, we've already\n+            // output with some unnecessary panic messages, we've already\n             // printed everything that we needed to.\n             io::stdio::set_stderr(box io::util::NullWriter);\n             panic!();"}, {"sha": "933794cb5a4861129334b0a225f2ee22b831f88f", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/770378a313a573776b16237a46b75bafa49072c1/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770378a313a573776b16237a46b75bafa49072c1/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=770378a313a573776b16237a46b75bafa49072c1", "patch": "@@ -216,7 +216,10 @@ pub trait OwnedAsciiCast {\n     /// Check if convertible to ascii\n     fn is_ascii(&self) -> bool;\n \n-    /// Take ownership and cast to an ascii vector. Fail on non-ASCII input.\n+    /// Take ownership and cast to an ascii vector.\n+    /// # Panics\n+    ///\n+    /// Panic on non-ASCII input.\n     #[inline]\n     fn into_ascii(self) -> Vec<Ascii> {\n         assert!(self.is_ascii());"}, {"sha": "1267d7411cc2e986566a9adf90c04f8c2758404f", "filename": "src/libstd/c_vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/770378a313a573776b16237a46b75bafa49072c1/src%2Flibstd%2Fc_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770378a313a573776b16237a46b75bafa49072c1/src%2Flibstd%2Fc_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_vec.rs?ref=770378a313a573776b16237a46b75bafa49072c1", "patch": "@@ -64,7 +64,7 @@ impl<T> Drop for CVec<T> {\n impl<T> CVec<T> {\n     /// Create a `CVec` from a raw pointer to a buffer with a given length.\n     ///\n-    /// Fails if the given pointer is null. The returned vector will not attempt\n+    /// Panics if the given pointer is null. The returned vector will not attempt\n     /// to deallocate the vector when dropped.\n     ///\n     /// # Arguments\n@@ -83,7 +83,7 @@ impl<T> CVec<T> {\n     /// Create a `CVec` from a foreign buffer, with a given length,\n     /// and a function to run upon destruction.\n     ///\n-    /// Fails if the given pointer is null.\n+    /// Panics if the given pointer is null.\n     ///\n     /// # Arguments\n     ///"}, {"sha": "0e7b06cbb94785822c7d652038e880930f22174c", "filename": "src/libstd/sys/windows/tty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/770378a313a573776b16237a46b75bafa49072c1/src%2Flibstd%2Fsys%2Fwindows%2Ftty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770378a313a573776b16237a46b75bafa49072c1/src%2Flibstd%2Fsys%2Fwindows%2Ftty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ftty.rs?ref=770378a313a573776b16237a46b75bafa49072c1", "patch": "@@ -14,8 +14,8 @@\n //!\n //! This module contains the implementation of a Windows specific console TTY.\n //! Also converts between UTF-16 and UTF-8. Windows has very poor support for\n-//! UTF-8 and some functions will fail. In particular ReadFile and ReadConsole\n-//! will fail when the codepage is set to UTF-8 and a Unicode character is\n+//! UTF-8 and some functions will panic. In particular ReadFile and ReadConsole\n+//! will panic when the codepage is set to UTF-8 and a Unicode character is\n //! entered.\n //!\n //! FIXME\n@@ -48,7 +48,7 @@ fn invalid_encoding() -> IoError {\n \n pub fn is_tty(fd: c_int) -> bool {\n     let mut out: DWORD = 0;\n-    // If this function doesn't fail then fd is a TTY\n+    // If this function doesn't panic then fd is a TTY\n     match unsafe { GetConsoleMode(get_osfhandle(fd) as HANDLE,\n                                   &mut out as LPDWORD) } {\n         0 => false,"}, {"sha": "ec2d62ff85cb183df7c1c6173646e6e2f71df698", "filename": "src/libstd/time/duration.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/770378a313a573776b16237a46b75bafa49072c1/src%2Flibstd%2Ftime%2Fduration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770378a313a573776b16237a46b75bafa49072c1/src%2Flibstd%2Ftime%2Fduration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime%2Fduration.rs?ref=770378a313a573776b16237a46b75bafa49072c1", "patch": "@@ -65,7 +65,7 @@ pub const MAX: Duration = Duration {\n impl Duration {\n     /// Makes a new `Duration` with given number of weeks.\n     /// Equivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60), with overflow checks.\n-    /// Fails when the duration is out of bounds.\n+    /// Panics when the duration is out of bounds.\n     #[inline]\n     pub fn weeks(weeks: i64) -> Duration {\n         let secs = weeks.checked_mul(SECS_PER_WEEK).expect(\"Duration::weeks out of bounds\");\n@@ -74,7 +74,7 @@ impl Duration {\n \n     /// Makes a new `Duration` with given number of days.\n     /// Equivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks.\n-    /// Fails when the duration is out of bounds.\n+    /// Panics when the duration is out of bounds.\n     #[inline]\n     pub fn days(days: i64) -> Duration {\n         let secs = days.checked_mul(SECS_PER_DAY).expect(\"Duration::days out of bounds\");\n@@ -83,7 +83,7 @@ impl Duration {\n \n     /// Makes a new `Duration` with given number of hours.\n     /// Equivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks.\n-    /// Fails when the duration is out of bounds.\n+    /// Panics when the duration is out of bounds.\n     #[inline]\n     pub fn hours(hours: i64) -> Duration {\n         let secs = hours.checked_mul(SECS_PER_HOUR).expect(\"Duration::hours ouf of bounds\");\n@@ -92,15 +92,15 @@ impl Duration {\n \n     /// Makes a new `Duration` with given number of minutes.\n     /// Equivalent to `Duration::seconds(minutes * 60)` with overflow checks.\n-    /// Fails when the duration is out of bounds.\n+    /// Panics when the duration is out of bounds.\n     #[inline]\n     pub fn minutes(minutes: i64) -> Duration {\n         let secs = minutes.checked_mul(SECS_PER_MINUTE).expect(\"Duration::minutes out of bounds\");\n         Duration::seconds(secs)\n     }\n \n     /// Makes a new `Duration` with given number of seconds.\n-    /// Fails when the duration is more than `i64::MAX` milliseconds\n+    /// Panics when the duration is more than `i64::MAX` milliseconds\n     /// or less than `i64::MIN` milliseconds.\n     #[inline]\n     pub fn seconds(seconds: i64) -> Duration {"}]}