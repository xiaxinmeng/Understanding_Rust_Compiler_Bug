{"sha": "273c6c3913e4d32c3321a3c92fb2ce32c1db9cb8", "node_id": "C_kwDOAAsO6NoAKDI3M2M2YzM5MTNlNGQzMmMzMzIxYTNjOTJmYjJjZTMyYzFkYjljYjg", "commit": {"author": {"name": "Markus Everling", "email": "markuseverling@gmail.com", "date": "2023-01-17T18:38:37Z"}, "committer": {"name": "Markus Everling", "email": "markuseverling@gmail.com", "date": "2023-01-17T18:38:37Z"}, "message": "Add heapsort fallback in `select_nth_unstable`", "tree": {"sha": "d52baca32729bb1ce44871d9f8cb98fabf1b6350", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d52baca32729bb1ce44871d9f8cb98fabf1b6350"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/273c6c3913e4d32c3321a3c92fb2ce32c1db9cb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/273c6c3913e4d32c3321a3c92fb2ce32c1db9cb8", "html_url": "https://github.com/rust-lang/rust/commit/273c6c3913e4d32c3321a3c92fb2ce32c1db9cb8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/273c6c3913e4d32c3321a3c92fb2ce32c1db9cb8/comments", "author": {"login": "Sp00ph", "id": 61327188, "node_id": "MDQ6VXNlcjYxMzI3MTg4", "avatar_url": "https://avatars.githubusercontent.com/u/61327188?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Sp00ph", "html_url": "https://github.com/Sp00ph", "followers_url": "https://api.github.com/users/Sp00ph/followers", "following_url": "https://api.github.com/users/Sp00ph/following{/other_user}", "gists_url": "https://api.github.com/users/Sp00ph/gists{/gist_id}", "starred_url": "https://api.github.com/users/Sp00ph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Sp00ph/subscriptions", "organizations_url": "https://api.github.com/users/Sp00ph/orgs", "repos_url": "https://api.github.com/users/Sp00ph/repos", "events_url": "https://api.github.com/users/Sp00ph/events{/privacy}", "received_events_url": "https://api.github.com/users/Sp00ph/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Sp00ph", "id": 61327188, "node_id": "MDQ6VXNlcjYxMzI3MTg4", "avatar_url": "https://avatars.githubusercontent.com/u/61327188?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Sp00ph", "html_url": "https://github.com/Sp00ph", "followers_url": "https://api.github.com/users/Sp00ph/followers", "following_url": "https://api.github.com/users/Sp00ph/following{/other_user}", "gists_url": "https://api.github.com/users/Sp00ph/gists{/gist_id}", "starred_url": "https://api.github.com/users/Sp00ph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Sp00ph/subscriptions", "organizations_url": "https://api.github.com/users/Sp00ph/orgs", "repos_url": "https://api.github.com/users/Sp00ph/repos", "events_url": "https://api.github.com/users/Sp00ph/events{/privacy}", "received_events_url": "https://api.github.com/users/Sp00ph/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d", "html_url": "https://github.com/rust-lang/rust/commit/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d"}], "stats": {"total": 22, "additions": 22, "deletions": 0}, "files": [{"sha": "3ac01d1727513ec99ae350740263314bd0442dd9", "filename": "library/core/src/slice/sort.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/273c6c3913e4d32c3321a3c92fb2ce32c1db9cb8/library%2Fcore%2Fsrc%2Fslice%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/273c6c3913e4d32c3321a3c92fb2ce32c1db9cb8/library%2Fcore%2Fsrc%2Fslice%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fsort.rs?ref=273c6c3913e4d32c3321a3c92fb2ce32c1db9cb8", "patch": "@@ -831,6 +831,15 @@ fn partition_at_index_loop<'a, T, F>(\n ) where\n     F: FnMut(&T, &T) -> bool,\n {\n+    // Limit the amount of iterations and fall back to heapsort, similarly to `slice::sort_unstable`.\n+    // This lowers the worst case running time from O(n^2) to O(n log n).\n+    // FIXME: Investigate whether it would be better to use something like Median of Medians\n+    // or Fast Deterministic Selection to guarantee O(n) worst case.\n+    let mut limit = usize::BITS - v.len().leading_zeros();\n+\n+    // True if the last partitioning was reasonably balanced.\n+    let mut was_balanced = true;\n+\n     loop {\n         // For slices of up to this length it's probably faster to simply sort them.\n         const MAX_INSERTION: usize = 10;\n@@ -839,6 +848,18 @@ fn partition_at_index_loop<'a, T, F>(\n             return;\n         }\n \n+        if limit == 0 {\n+            heapsort(v, is_less);\n+            return;\n+        }\n+\n+        // If the last partitioning was imbalanced, try breaking patterns in the slice by shuffling\n+        // some elements around. Hopefully we'll choose a better pivot this time.\n+        if !was_balanced {\n+            break_patterns(v);\n+            limit -= 1;\n+        }\n+\n         // Choose a pivot\n         let (pivot, _) = choose_pivot(v, is_less);\n \n@@ -863,6 +884,7 @@ fn partition_at_index_loop<'a, T, F>(\n         }\n \n         let (mid, _) = partition(v, pivot, is_less);\n+        was_balanced = cmp::min(mid, v.len() - mid) >= v.len() / 8;\n \n         // Split the slice into `left`, `pivot`, and `right`.\n         let (left, right) = v.split_at_mut(mid);"}]}