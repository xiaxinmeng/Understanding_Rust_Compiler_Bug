{"sha": "a417f963fe58e2f6ba5e93be7fa960afa238720c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0MTdmOTYzZmU1OGUyZjZiYTVlOTNiZTdmYTk2MGFmYTIzODcyMGM=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-04-15T23:23:29Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-04-20T19:18:20Z"}, "message": "Remove null places", "tree": {"sha": "c967d8e152f3d98fbfc3084704cf8ed338c917ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c967d8e152f3d98fbfc3084704cf8ed338c917ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a417f963fe58e2f6ba5e93be7fa960afa238720c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a417f963fe58e2f6ba5e93be7fa960afa238720c", "html_url": "https://github.com/rust-lang/rust/commit/a417f963fe58e2f6ba5e93be7fa960afa238720c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a417f963fe58e2f6ba5e93be7fa960afa238720c/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4eaf535d2b4f8c5937f2c24ac8e99b02f893460b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4eaf535d2b4f8c5937f2c24ac8e99b02f893460b", "html_url": "https://github.com/rust-lang/rust/commit/4eaf535d2b4f8c5937f2c24ac8e99b02f893460b"}], "stats": {"total": 21, "additions": 0, "deletions": 21}, "files": [{"sha": "25fa3e5e8e0e350453ae068900801d3cab23047e", "filename": "src/librustc_middle/mir/interpret/value.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a417f963fe58e2f6ba5e93be7fa960afa238720c/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a417f963fe58e2f6ba5e93be7fa960afa238720c/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fvalue.rs?ref=a417f963fe58e2f6ba5e93be7fa960afa238720c", "patch": "@@ -188,11 +188,6 @@ impl<'tcx, Tag> Scalar<Tag> {\n         }\n     }\n \n-    #[inline]\n-    pub fn null_ptr(cx: &impl HasDataLayout) -> Self {\n-        Scalar::Raw { data: 0, size: cx.data_layout().pointer_size.bytes() as u8 }\n-    }\n-\n     #[inline]\n     pub fn zst() -> Self {\n         Scalar::Raw { data: 0, size: 0 }"}, {"sha": "e961d4fce04c4bd436d06331a4ec1d4c6ae32e44", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a417f963fe58e2f6ba5e93be7fa960afa238720c/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a417f963fe58e2f6ba5e93be7fa960afa238720c/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=a417f963fe58e2f6ba5e93be7fa960afa238720c", "patch": "@@ -135,12 +135,6 @@ impl<Tag> MemPlace<Tag> {\n         MemPlace { ptr, align, meta: MemPlaceMeta::None }\n     }\n \n-    /// Produces a Place that will error if attempted to be read from or written to\n-    #[inline(always)]\n-    fn null(cx: &impl HasDataLayout) -> Self {\n-        Self::from_scalar_ptr(Scalar::null_ptr(cx), Align::from_bytes(1).unwrap())\n-    }\n-\n     #[inline(always)]\n     pub fn from_ptr(ptr: Pointer<Tag>, align: Align) -> Self {\n         Self::from_scalar_ptr(ptr.into(), align)\n@@ -260,12 +254,6 @@ impl<'tcx, Tag: ::std::fmt::Debug + Copy> OpTy<'tcx, Tag> {\n }\n \n impl<Tag: ::std::fmt::Debug> Place<Tag> {\n-    /// Produces a Place that will error if attempted to be read from or written to\n-    #[inline(always)]\n-    fn null(cx: &impl HasDataLayout) -> Self {\n-        Place::Ptr(MemPlace::null(cx))\n-    }\n-\n     #[inline]\n     pub fn assert_mem_place(self) -> MemPlace<Tag> {\n         match self {\n@@ -276,10 +264,6 @@ impl<Tag: ::std::fmt::Debug> Place<Tag> {\n }\n \n impl<'tcx, Tag: ::std::fmt::Debug> PlaceTy<'tcx, Tag> {\n-    pub fn null(cx: &impl HasDataLayout, layout: TyAndLayout<'tcx>) -> Self {\n-        Self { place: Place::null(cx), layout }\n-    }\n-\n     #[inline]\n     pub fn assert_mem_place(self) -> MPlaceTy<'tcx, Tag> {\n         MPlaceTy { mplace: self.place.assert_mem_place(), layout: self.layout }"}]}