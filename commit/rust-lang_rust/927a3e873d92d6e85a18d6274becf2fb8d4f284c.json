{"sha": "927a3e873d92d6e85a18d6274becf2fb8d4f284c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyN2EzZTg3M2Q5MmQ2ZTg1YTE4ZDYyNzRiZWNmMmZiOGQ0ZjI4NGM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-07T04:42:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-07T04:42:58Z"}, "message": "Auto merge of #62458 - Centril:rollup-j6o2sqj, r=Centril\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #61990 (First question mark in doctest)\n - #62379 (Add missing links in Option documentation)\n - #62438 (rustbuild: Cleanup global lint settings)\n - #62455 (name the trait in ambiguous-associated-items fully qualified suggestion)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "762ea874f8031397e78295c8115450be23273300", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/762ea874f8031397e78295c8115450be23273300"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/927a3e873d92d6e85a18d6274becf2fb8d4f284c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/927a3e873d92d6e85a18d6274becf2fb8d4f284c", "html_url": "https://github.com/rust-lang/rust/commit/927a3e873d92d6e85a18d6274becf2fb8d4f284c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/927a3e873d92d6e85a18d6274becf2fb8d4f284c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4393768faa104b9879c601feee71eb0207dc4fe1", "url": "https://api.github.com/repos/rust-lang/rust/commits/4393768faa104b9879c601feee71eb0207dc4fe1", "html_url": "https://github.com/rust-lang/rust/commit/4393768faa104b9879c601feee71eb0207dc4fe1"}, {"sha": "fb0117000a89053ab8e964eb5fee1d73a5d019c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb0117000a89053ab8e964eb5fee1d73a5d019c1", "html_url": "https://github.com/rust-lang/rust/commit/fb0117000a89053ab8e964eb5fee1d73a5d019c1"}], "stats": {"total": 117, "additions": 63, "deletions": 54}, "files": [{"sha": "a9225f2870f55aa0639e9622eb6805fbcce4c72c", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 31, "deletions": 37, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/927a3e873d92d6e85a18d6274becf2fb8d4f284c/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/927a3e873d92d6e85a18d6274becf2fb8d4f284c/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=927a3e873d92d6e85a18d6274becf2fb8d4f284c", "patch": "@@ -91,17 +91,16 @@ fn main() {\n     cmd.args(&args)\n         .env(bootstrap::util::dylib_path_var(),\n              env::join_paths(&dylib_path).unwrap());\n-    let mut maybe_crate = None;\n \n     // Get the name of the crate we're compiling, if any.\n-    let maybe_crate_name = args.windows(2)\n-        .find(|a| &*a[0] == \"--crate-name\")\n-        .map(|crate_name| &*crate_name[1]);\n+    let crate_name = args.windows(2)\n+        .find(|args| args[0] == \"--crate-name\")\n+        .and_then(|args| args[1].to_str());\n \n-    if let Some(current_crate) = maybe_crate_name {\n+    if let Some(crate_name) = crate_name {\n         if let Some(target) = env::var_os(\"RUSTC_TIME\") {\n             if target == \"all\" ||\n-               target.into_string().unwrap().split(\",\").any(|c| c.trim() == current_crate)\n+               target.into_string().unwrap().split(\",\").any(|c| c.trim() == crate_name)\n             {\n                 cmd.arg(\"-Ztime\");\n             }\n@@ -125,6 +124,19 @@ fn main() {\n         cmd.arg(format!(\"-Cdebuginfo={}\", debuginfo_level));\n     }\n \n+    if env::var_os(\"RUSTC_DENY_WARNINGS\").is_some() &&\n+       env::var_os(\"RUSTC_EXTERNAL_TOOL\").is_none() {\n+        cmd.arg(\"-Dwarnings\");\n+        cmd.arg(\"-Drust_2018_idioms\");\n+        // cfg(not(bootstrap)): Remove this during the next stage 0 compiler update.\n+        // `-Drustc::internal` is a new feature and `rustc_version` mis-reports the `stage`.\n+        let cfg_not_bootstrap = stage != \"0\" && crate_name != Some(\"rustc_version\");\n+        if cfg_not_bootstrap && use_internal_lints(crate_name) {\n+            cmd.arg(\"-Zunstable-options\");\n+            cmd.arg(\"-Drustc::internal\");\n+        }\n+    }\n+\n     if let Some(target) = target {\n         // The stage0 compiler has a special sysroot distinct from what we\n         // actually downloaded, so we just always pass the `--sysroot` option.\n@@ -167,9 +179,6 @@ fn main() {\n             cmd.arg(format!(\"-Clinker={}\", target_linker));\n         }\n \n-        let crate_name = maybe_crate_name.unwrap();\n-        maybe_crate = Some(crate_name);\n-\n         // If we're compiling specifically the `panic_abort` crate then we pass\n         // the `-C panic=abort` option. Note that we do not do this for any\n         // other crate intentionally as this is the only crate for now that we\n@@ -182,8 +191,8 @@ fn main() {\n         // `compiler_builtins` are unconditionally compiled with panic=abort to\n         // workaround undefined references to `rust_eh_unwind_resume` generated\n         // otherwise, see issue https://github.com/rust-lang/rust/issues/43095.\n-        if crate_name == \"panic_abort\" ||\n-           crate_name == \"compiler_builtins\" && stage != \"0\" {\n+        if crate_name == Some(\"panic_abort\") ||\n+           crate_name == Some(\"compiler_builtins\") && stage != \"0\" {\n             cmd.arg(\"-C\").arg(\"panic=abort\");\n         }\n \n@@ -196,7 +205,7 @@ fn main() {\n \n         // The compiler builtins are pretty sensitive to symbols referenced in\n         // libcore and such, so we never compile them with debug assertions.\n-        if crate_name == \"compiler_builtins\" {\n+        if crate_name == Some(\"compiler_builtins\") {\n             cmd.arg(\"-C\").arg(\"debug-assertions=no\");\n         } else {\n             cmd.arg(\"-C\").arg(format!(\"debug-assertions={}\", debug_assertions));\n@@ -305,22 +314,6 @@ fn main() {\n         }\n     }\n \n-    // This is required for internal lints.\n-    if let Some(crate_name) = args.windows(2).find(|a| &*a[0] == \"--crate-name\") {\n-        let crate_name = crate_name[1].to_string_lossy();\n-        if crate_name != \"rustc_version\"\n-            && (crate_name.starts_with(\"rustc\")\n-                || crate_name.starts_with(\"syntax\")\n-                || crate_name == \"arena\"\n-                || crate_name == \"fmt_macros\")\n-        {\n-            cmd.arg(\"-Zunstable-options\");\n-            if stage != \"0\" {\n-                cmd.arg(\"-Wrustc::internal\");\n-            }\n-        }\n-    }\n-\n     // Force all crates compiled by this compiler to (a) be unstable and (b)\n     // allow the `rustc_private` feature to link to other unstable crates\n     // also in the sysroot. We also do this for host crates, since those\n@@ -333,13 +326,6 @@ fn main() {\n         cmd.arg(\"--cfg\").arg(\"parallel_compiler\");\n     }\n \n-    if env::var_os(\"RUSTC_DENY_WARNINGS\").is_some() && env::var_os(\"RUSTC_EXTERNAL_TOOL\").is_none()\n-    {\n-        cmd.arg(\"-Dwarnings\");\n-        cmd.arg(\"-Dbare_trait_objects\");\n-        cmd.arg(\"-Drust_2018_idioms\");\n-    }\n-\n     if verbose > 1 {\n         eprintln!(\n             \"rustc command: {:?}={:?} {:?}\",\n@@ -362,7 +348,7 @@ fn main() {\n     }\n \n     if env::var_os(\"RUSTC_PRINT_STEP_TIMINGS\").is_some() {\n-        if let Some(krate) = maybe_crate {\n+        if let Some(crate_name) = crate_name {\n             let start = Instant::now();\n             let status = cmd\n                 .status()\n@@ -371,7 +357,7 @@ fn main() {\n \n             let is_test = args.iter().any(|a| a == \"--test\");\n             eprintln!(\"[RUSTC-TIMING] {} test:{} {}.{:03}\",\n-                      krate.to_string_lossy(),\n+                      crate_name,\n                       is_test,\n                       dur.as_secs(),\n                       dur.subsec_nanos() / 1_000_000);\n@@ -390,6 +376,14 @@ fn main() {\n     std::process::exit(code);\n }\n \n+// Rustc crates for which internal lints are in effect.\n+fn use_internal_lints(crate_name: Option<&str>) -> bool {\n+    crate_name.map_or(false, |crate_name| {\n+        crate_name.starts_with(\"rustc\") || crate_name.starts_with(\"syntax\") ||\n+        [\"arena\", \"fmt_macros\"].contains(&crate_name)\n+    })\n+}\n+\n #[cfg(unix)]\n fn exec_cmd(cmd: &mut Command) -> io::Result<i32> {\n     use std::os::unix::process::CommandExt;"}, {"sha": "58ea0207c56098ab57be2193e7d935b6be2ff573", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/927a3e873d92d6e85a18d6274becf2fb8d4f284c/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/927a3e873d92d6e85a18d6274becf2fb8d4f284c/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=927a3e873d92d6e85a18d6274becf2fb8d4f284c", "patch": "@@ -335,11 +335,14 @@ macro_rules! r#try {\n /// ```\n /// use std::io::Write;\n ///\n-/// let mut w = Vec::new();\n-/// write!(&mut w, \"test\").unwrap();\n-/// write!(&mut w, \"formatted {}\", \"arguments\").unwrap();\n+/// fn main() -> std::io::Result<()> {\n+///     let mut w = Vec::new();\n+///     write!(&mut w, \"test\")?;\n+///     write!(&mut w, \"formatted {}\", \"arguments\")?;\n ///\n-/// assert_eq!(w, b\"testformatted arguments\");\n+///     assert_eq!(w, b\"testformatted arguments\");\n+///     Ok(())\n+/// }\n /// ```\n ///\n /// A module can import both `std::fmt::Write` and `std::io::Write` and call `write!` on objects"}, {"sha": "a6bdd5a9063061d4c5281534d8fd74b9d47003c3", "filename": "src/libcore/option.rs", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/927a3e873d92d6e85a18d6274becf2fb8d4f284c/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/927a3e873d92d6e85a18d6274becf2fb8d4f284c/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=927a3e873d92d6e85a18d6274becf2fb8d4f284c", "patch": "@@ -263,7 +263,7 @@ impl<T> Option<T> {\n     }\n \n \n-    /// Converts from `Pin<&Option<T>>` to `Option<Pin<&T>>`\n+    /// Converts from [`Pin`]`<&Option<T>>` to `Option<`[`Pin`]`<&T>>`.\n     #[inline]\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n     pub fn as_pin_ref<'a>(self: Pin<&'a Option<T>>) -> Option<Pin<&'a T>> {\n@@ -272,7 +272,7 @@ impl<T> Option<T> {\n         }\n     }\n \n-    /// Converts from `Pin<&mut Option<T>>` to `Option<Pin<&mut T>>`\n+    /// Converts from [`Pin`]`<&mut Option<T>>` to `Option<`[`Pin`]`<&mut T>>`.\n     #[inline]\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n     pub fn as_pin_mut<'a>(self: Pin<&'a mut Option<T>>) -> Option<Pin<&'a mut T>> {\n@@ -626,14 +626,14 @@ impl<T> Option<T> {\n         }\n     }\n \n-    /// Returns `None` if the option is `None`, otherwise calls `predicate`\n+    /// Returns [`None`] if the option is [`None`], otherwise calls `predicate`\n     /// with the wrapped value and returns:\n     ///\n-    /// - `Some(t)` if `predicate` returns `true` (where `t` is the wrapped\n+    /// - [`Some(t)`] if `predicate` returns `true` (where `t` is the wrapped\n     ///   value), and\n-    /// - `None` if `predicate` returns `false`.\n+    /// - [`None`] if `predicate` returns `false`.\n     ///\n-    /// This function works similar to `Iterator::filter()`. You can imagine\n+    /// This function works similar to [`Iterator::filter()`]. You can imagine\n     /// the `Option<T>` being an iterator over one or zero elements. `filter()`\n     /// lets you decide which elements to keep.\n     ///\n@@ -648,6 +648,10 @@ impl<T> Option<T> {\n     /// assert_eq!(Some(3).filter(is_even), None);\n     /// assert_eq!(Some(4).filter(is_even), Some(4));\n     /// ```\n+    ///\n+    /// [`None`]: #variant.None\n+    /// [`Some(t)`]: #variant.Some\n+    /// [`Iterator::filter()`]: ../../std/iter/trait.Iterator.html#method.filter\n     #[inline]\n     #[stable(feature = \"option_filter\", since = \"1.27.0\")]\n     pub fn filter<P: FnOnce(&T) -> bool>(self, predicate: P) -> Self {\n@@ -986,17 +990,25 @@ impl<T: Deref> Option<T> {\n     /// Converts from `&Option<T>` to `Option<&T::Target>`.\n     ///\n     /// Leaves the original Option in-place, creating a new one with a reference\n-    /// to the original one, additionally coercing the contents via `Deref`.\n+    /// to the original one, additionally coercing the contents via [`Deref`].\n+    ///\n+    /// [`Deref`]: ../../std/ops/trait.Deref.html\n     pub fn deref(&self) -> Option<&T::Target> {\n         self.as_ref().map(|t| t.deref())\n     }\n }\n \n impl<T, E> Option<Result<T, E>> {\n-    /// Transposes an `Option` of a `Result` into a `Result` of an `Option`.\n+    /// Transposes an `Option` of a [`Result`] into a [`Result`] of an `Option`.\n     ///\n-    /// `None` will be mapped to `Ok(None)`.\n-    /// `Some(Ok(_))` and `Some(Err(_))` will be mapped to `Ok(Some(_))` and `Err(_)`.\n+    /// [`None`] will be mapped to [`Ok`]`(`[`None`]`)`.\n+    /// [`Some`]`(`[`Ok`]`(_))` and [`Some`]`(`[`Err`]`(_))` will be mapped to\n+    /// [`Ok`]`(`[`Some`]`(_))` and [`Err`]`(_)`.\n+    ///\n+    /// [`None`]: #variant.None\n+    /// [`Ok`]: ../../std/result/enum.Result.html#variant.Ok\n+    /// [`Some`]: #variant.Some\n+    /// [`Err`]: ../../std/result/enum.Result.html#variant.Err\n     ///\n     /// # Examples\n     ///"}, {"sha": "d314228a232c963aa45e57d5502c40bd85e1241a", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/927a3e873d92d6e85a18d6274becf2fb8d4f284c/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/927a3e873d92d6e85a18d6274becf2fb8d4f284c/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=927a3e873d92d6e85a18d6274becf2fb8d4f284c", "patch": "@@ -1709,8 +1709,8 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             err.span_suggestion(\n                 span,\n                 \"use fully-qualified syntax\",\n-                format!(\"<{} as {}>::{}\", qself_ty, \"Trait\", assoc_ident),\n-                Applicability::HasPlaceholders,\n+                format!(\"<{} as {}>::{}\", qself_ty, tcx.item_name(trait_did), assoc_ident),\n+                Applicability::MachineApplicable,\n             ).emit();\n         }\n "}, {"sha": "ef025e0e1467f91269c037bfb3adf6f9d3901325", "filename": "src/test/ui/type-alias-enum-variants/enum-variant-priority-lint-ambiguous_associated_items.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/927a3e873d92d6e85a18d6274becf2fb8d4f284c/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-priority-lint-ambiguous_associated_items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/927a3e873d92d6e85a18d6274becf2fb8d4f284c/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-priority-lint-ambiguous_associated_items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-priority-lint-ambiguous_associated_items.stderr?ref=927a3e873d92d6e85a18d6274becf2fb8d4f284c", "patch": "@@ -2,7 +2,7 @@ error: ambiguous associated item\n   --> $DIR/enum-variant-priority-lint-ambiguous_associated_items.rs:32:15\n    |\n LL |     fn f() -> Self::V { 0 }\n-   |               ^^^^^^^ help: use fully-qualified syntax: `<E as Trait>::V`\n+   |               ^^^^^^^ help: use fully-qualified syntax: `<E as Tr>::V`\n    |\n    = note: #[deny(ambiguous_associated_items)] on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!"}]}