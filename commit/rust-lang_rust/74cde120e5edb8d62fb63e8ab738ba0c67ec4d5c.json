{"sha": "74cde120e5edb8d62fb63e8ab738ba0c67ec4d5c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0Y2RlMTIwZTVlZGI4ZDYyZmI2M2U4YWI3MzhiYTBjNjdlYzRkNWM=", "commit": {"author": {"name": "Ulrik Sverdrup", "email": "bluss@users.noreply.github.com", "date": "2016-11-22T22:31:31Z"}, "committer": {"name": "Ulrik Sverdrup", "email": "bluss@users.noreply.github.com", "date": "2016-11-23T01:31:41Z"}, "message": "core, collections: Implement better .is_empty() for slice and vec iterators\n\nThese iterators can use a pointer comparison instead of computing the length.", "tree": {"sha": "9917a6fe6390c3c68aceac5f9f8ffbff245c53ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9917a6fe6390c3c68aceac5f9f8ffbff245c53ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74cde120e5edb8d62fb63e8ab738ba0c67ec4d5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74cde120e5edb8d62fb63e8ab738ba0c67ec4d5c", "html_url": "https://github.com/rust-lang/rust/commit/74cde120e5edb8d62fb63e8ab738ba0c67ec4d5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74cde120e5edb8d62fb63e8ab738ba0c67ec4d5c/comments", "author": {"login": "bluss", "id": 3209739, "node_id": "MDQ6VXNlcjMyMDk3Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3209739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluss", "html_url": "https://github.com/bluss", "followers_url": "https://api.github.com/users/bluss/followers", "following_url": "https://api.github.com/users/bluss/following{/other_user}", "gists_url": "https://api.github.com/users/bluss/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluss/subscriptions", "organizations_url": "https://api.github.com/users/bluss/orgs", "repos_url": "https://api.github.com/users/bluss/repos", "events_url": "https://api.github.com/users/bluss/events{/privacy}", "received_events_url": "https://api.github.com/users/bluss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bluss", "id": 3209739, "node_id": "MDQ6VXNlcjMyMDk3Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3209739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluss", "html_url": "https://github.com/bluss", "followers_url": "https://api.github.com/users/bluss/followers", "following_url": "https://api.github.com/users/bluss/following{/other_user}", "gists_url": "https://api.github.com/users/bluss/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluss/subscriptions", "organizations_url": "https://api.github.com/users/bluss/orgs", "repos_url": "https://api.github.com/users/bluss/repos", "events_url": "https://api.github.com/users/bluss/events{/privacy}", "received_events_url": "https://api.github.com/users/bluss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a3aa2f73cbb08c6e41418c5378791fa24a66146", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a3aa2f73cbb08c6e41418c5378791fa24a66146", "html_url": "https://github.com/rust-lang/rust/commit/5a3aa2f73cbb08c6e41418c5378791fa24a66146"}], "stats": {"total": 36, "additions": 32, "deletions": 4}, "files": [{"sha": "f6d83b25b0d89c598468015b5fdfdb04dfd6f19e", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74cde120e5edb8d62fb63e8ab738ba0c67ec4d5c/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74cde120e5edb8d62fb63e8ab738ba0c67ec4d5c/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=74cde120e5edb8d62fb63e8ab738ba0c67ec4d5c", "patch": "@@ -36,6 +36,7 @@\n #![cfg_attr(not(test), feature(char_escape_debug))]\n #![feature(core_intrinsics)]\n #![feature(dropck_parametricity)]\n+#![feature(exact_size_is_empty)]\n #![feature(fmt_internals)]\n #![feature(fused)]\n #![feature(heap_api)]"}, {"sha": "f26324127003b32b12ecc7570b93ff627c19f8e6", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/74cde120e5edb8d62fb63e8ab738ba0c67ec4d5c/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74cde120e5edb8d62fb63e8ab738ba0c67ec4d5c/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=74cde120e5edb8d62fb63e8ab738ba0c67ec4d5c", "patch": "@@ -1988,7 +1988,11 @@ impl<T> DoubleEndedIterator for IntoIter<T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T> ExactSizeIterator for IntoIter<T> {}\n+impl<T> ExactSizeIterator for IntoIter<T> {\n+    fn is_empty(&self) -> bool {\n+        self.ptr == self.end\n+    }\n+}\n \n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<T> FusedIterator for IntoIter<T> {}\n@@ -2082,7 +2086,11 @@ impl<'a, T> Drop for Drain<'a, T> {\n \n \n #[stable(feature = \"drain\", since = \"1.6.0\")]\n-impl<'a, T> ExactSizeIterator for Drain<'a, T> {}\n+impl<'a, T> ExactSizeIterator for Drain<'a, T> {\n+    fn is_empty(&self) -> bool {\n+        self.iter.is_empty()\n+    }\n+}\n \n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<'a, T> FusedIterator for Drain<'a, T> {}"}, {"sha": "1e08074b14db8bf5d634544cdf1742df809ba7eb", "filename": "src/libcollectionstest/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74cde120e5edb8d62fb63e8ab738ba0c67ec4d5c/src%2Flibcollectionstest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74cde120e5edb8d62fb63e8ab738ba0c67ec4d5c/src%2Flibcollectionstest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Flib.rs?ref=74cde120e5edb8d62fb63e8ab738ba0c67ec4d5c", "patch": "@@ -18,6 +18,7 @@\n #![feature(const_fn)]\n #![feature(dedup_by)]\n #![feature(enumset)]\n+#![feature(exact_size_is_empty)]\n #![feature(pattern)]\n #![feature(rand)]\n #![feature(repeat_str)]"}, {"sha": "0e63e8d4a1ec8ad6a5ec32202b7841e8d2810b8e", "filename": "src/libcollectionstest/slice.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/74cde120e5edb8d62fb63e8ab738ba0c67ec4d5c/src%2Flibcollectionstest%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74cde120e5edb8d62fb63e8ab738ba0c67ec4d5c/src%2Flibcollectionstest%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fslice.rs?ref=74cde120e5edb8d62fb63e8ab738ba0c67ec4d5c", "patch": "@@ -633,6 +633,16 @@ fn test_iter_clone() {\n     assert_eq!(it.next(), jt.next());\n }\n \n+#[test]\n+fn test_iter_is_empty() {\n+    let xs = [1, 2, 5, 10, 11];\n+    for i in 0..xs.len() {\n+        for j in i..xs.len() {\n+            assert_eq!(xs[i..j].iter().is_empty(), xs[i..j].is_empty());\n+        }\n+    }\n+}\n+\n #[test]\n fn test_mut_iterator() {\n     let mut xs = [1, 2, 3, 4, 5];"}, {"sha": "ede45111ebbc587371980cd02e27129f2022d6ef", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/74cde120e5edb8d62fb63e8ab738ba0c67ec4d5c/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74cde120e5edb8d62fb63e8ab738ba0c67ec4d5c/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=74cde120e5edb8d62fb63e8ab738ba0c67ec4d5c", "patch": "@@ -983,7 +983,11 @@ impl<'a, T> Iter<'a, T> {\n iterator!{struct Iter -> *const T, &'a T}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T> ExactSizeIterator for Iter<'a, T> {}\n+impl<'a, T> ExactSizeIterator for Iter<'a, T> {\n+    fn is_empty(&self) -> bool {\n+        self.ptr == self.end\n+    }\n+}\n \n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<'a, T> FusedIterator for Iter<'a, T> {}\n@@ -1107,7 +1111,11 @@ impl<'a, T> IterMut<'a, T> {\n iterator!{struct IterMut -> *mut T, &'a mut T}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T> ExactSizeIterator for IterMut<'a, T> {}\n+impl<'a, T> ExactSizeIterator for IterMut<'a, T> {\n+    fn is_empty(&self) -> bool {\n+        self.ptr == self.end\n+    }\n+}\n \n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<'a, T> FusedIterator for IterMut<'a, T> {}"}]}