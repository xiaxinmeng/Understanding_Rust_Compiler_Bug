{"sha": "aef1e35edc11b3e0ecf7f77bc70c197062023476", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlZjFlMzVlZGMxMWIzZTBlY2Y3Zjc3YmM3MGMxOTcwNjIwMjM0NzY=", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2020-06-30T16:58:15Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2021-03-08T07:17:48Z"}, "message": "Emit unused externs", "tree": {"sha": "1cfe7f18b527bf750afb53f2cf3e0a45b12a430d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1cfe7f18b527bf750afb53f2cf3e0a45b12a430d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aef1e35edc11b3e0ecf7f77bc70c197062023476", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aef1e35edc11b3e0ecf7f77bc70c197062023476", "html_url": "https://github.com/rust-lang/rust/commit/aef1e35edc11b3e0ecf7f77bc70c197062023476", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aef1e35edc11b3e0ecf7f77bc70c197062023476/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76c500ec6c36fa8287317d6dc342a64c079301de", "url": "https://api.github.com/repos/rust-lang/rust/commits/76c500ec6c36fa8287317d6dc342a64c079301de", "html_url": "https://github.com/rust-lang/rust/commit/76c500ec6c36fa8287317d6dc342a64c079301de"}], "stats": {"total": 34, "additions": 34, "deletions": 0}, "files": [{"sha": "dbb71d52e499ecf92504554c04dd9a3ba0ff5677", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aef1e35edc11b3e0ecf7f77bc70c197062023476/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aef1e35edc11b3e0ecf7f77bc70c197062023476/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=aef1e35edc11b3e0ecf7f77bc70c197062023476", "patch": "@@ -195,6 +195,9 @@ pub trait Emitter {\n \n     fn emit_future_breakage_report(&mut self, _diags: Vec<(FutureBreakage, Diagnostic)>) {}\n \n+    /// Emit list of unused externs\n+    fn emit_unused_externs(&mut self, _unused_externs: &[&str]) {}\n+\n     /// Checks if should show explanations about \"rustc --explain\"\n     fn should_show_explain(&self) -> bool {\n         true"}, {"sha": "a1ab98f766efd091c9aa61608b6659db5b55b924", "filename": "compiler/rustc_errors/src/json.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/aef1e35edc11b3e0ecf7f77bc70c197062023476/compiler%2Frustc_errors%2Fsrc%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aef1e35edc11b3e0ecf7f77bc70c197062023476/compiler%2Frustc_errors%2Fsrc%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fjson.rs?ref=aef1e35edc11b3e0ecf7f77bc70c197062023476", "patch": "@@ -159,6 +159,19 @@ impl Emitter for JsonEmitter {\n         }\n     }\n \n+    fn emit_unused_externs(&mut self, unused_externs: &[&str]) {\n+        let data = UnusedExterns { unused_extern_names: unused_externs };\n+        let result = if self.pretty {\n+            writeln!(&mut self.dst, \"{}\", as_pretty_json(&data))\n+        } else {\n+            writeln!(&mut self.dst, \"{}\", as_json(&data))\n+        }\n+        .and_then(|_| self.dst.flush());\n+        if let Err(e) = result {\n+            panic!(\"failed to print unused externs: {:?}\", e);\n+        }\n+    }\n+\n     fn source_map(&self) -> Option<&Lrc<SourceMap>> {\n         Some(&self.sm)\n     }\n@@ -322,6 +335,12 @@ struct FutureIncompatReport {\n     future_incompat_report: Vec<FutureBreakageItem>,\n }\n \n+#[derive(Encodable)]\n+struct UnusedExterns<'a, 'b> {\n+    /// List of unused externs by their names.\n+    unused_extern_names: &'a [&'b str],\n+}\n+\n impl Diagnostic {\n     fn from_errors_diagnostic(diag: &crate::Diagnostic, je: &JsonEmitter) -> Diagnostic {\n         let sugg = diag.suggestions.iter().map(|sugg| Diagnostic {"}, {"sha": "5720e98abc8c223c6c13073f734678e7620a2792", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aef1e35edc11b3e0ecf7f77bc70c197062023476/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aef1e35edc11b3e0ecf7f77bc70c197062023476/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=aef1e35edc11b3e0ecf7f77bc70c197062023476", "patch": "@@ -767,6 +767,10 @@ impl Handler {\n         self.inner.borrow_mut().emitter.emit_future_breakage_report(diags)\n     }\n \n+    pub fn emit_unused_externs(&self, unused_externs: &[&str]) {\n+        self.inner.borrow_mut().emit_unused_externs(unused_externs)\n+    }\n+\n     pub fn delay_as_bug(&self, diagnostic: Diagnostic) {\n         self.inner.borrow_mut().delay_as_bug(diagnostic)\n     }\n@@ -841,6 +845,10 @@ impl HandlerInner {\n         self.emitter.emit_artifact_notification(path, artifact_type);\n     }\n \n+    fn emit_unused_externs(&mut self, unused_externs: &[&str]) {\n+        self.emitter.emit_unused_externs(unused_externs);\n+    }\n+\n     fn treat_err_as_bug(&self) -> bool {\n         self.flags.treat_err_as_bug.map_or(false, |c| self.err_count() >= c.get())\n     }"}, {"sha": "3f2d312e61b7a77c0ab4c30912006a0eb98fa422", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aef1e35edc11b3e0ecf7f77bc70c197062023476/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aef1e35edc11b3e0ecf7f77bc70c197062023476/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=aef1e35edc11b3e0ecf7f77bc70c197062023476", "patch": "@@ -893,6 +893,7 @@ impl<'a> CrateLoader<'a> {\n     fn report_unused_deps(&mut self, krate: &ast::Crate) {\n         // Make a point span rather than covering the whole file\n         let span = krate.span.shrink_to_lo();\n+        let mut unused_externs = Vec::new();\n         // Complain about anything left over\n         for (name, entry) in self.sess.opts.externs.iter() {\n             if let ExternLocation::FoundInLibrarySearchDirectories = entry.location {\n@@ -917,6 +918,7 @@ impl<'a> CrateLoader<'a> {\n                     )\n                 }\n             };\n+            unused_externs.push(name as &str);\n             self.sess.parse_sess.buffer_lint_with_diagnostic(\n                     lint::builtin::UNUSED_CRATE_DEPENDENCIES,\n                     span,\n@@ -929,6 +931,8 @@ impl<'a> CrateLoader<'a> {\n                     diag,\n                 );\n         }\n+        // FIXME: add gating\n+        self.sess.parse_sess.span_diagnostic.emit_unused_externs(&unused_externs);\n     }\n \n     pub fn postprocess(&mut self, krate: &ast::Crate) {"}]}