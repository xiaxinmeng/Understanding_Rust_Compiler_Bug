{"sha": "818ae6feceb4282193800c7e3668d3dfd2912378", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxOGFlNmZlY2ViNDI4MjE5MzgwMGM3ZTM2NjhkM2RmZDI5MTIzNzg=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-04-07T12:20:24Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-04-15T11:06:30Z"}, "message": "don't expose the `borrows` field", "tree": {"sha": "8eab5a3187372abb5f9ea2187ad639ca68a569c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8eab5a3187372abb5f9ea2187ad639ca68a569c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/818ae6feceb4282193800c7e3668d3dfd2912378", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/818ae6feceb4282193800c7e3668d3dfd2912378", "html_url": "https://github.com/rust-lang/rust/commit/818ae6feceb4282193800c7e3668d3dfd2912378", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/818ae6feceb4282193800c7e3668d3dfd2912378/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "033c4f2e3c43999e47f543f569dad181ec590b22", "url": "https://api.github.com/repos/rust-lang/rust/commits/033c4f2e3c43999e47f543f569dad181ec590b22", "html_url": "https://github.com/rust-lang/rust/commit/033c4f2e3c43999e47f543f569dad181ec590b22"}], "stats": {"total": 29, "additions": 19, "deletions": 10}, "files": [{"sha": "070dc1d09bf6bd855bc45cf58affb4f3cc39832d", "filename": "src/librustc_mir/borrow_check/flows.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/818ae6feceb4282193800c7e3668d3dfd2912378/src%2Flibrustc_mir%2Fborrow_check%2Fflows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/818ae6feceb4282193800c7e3668d3dfd2912378/src%2Flibrustc_mir%2Fborrow_check%2Fflows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fflows.rs?ref=818ae6feceb4282193800c7e3668d3dfd2912378", "patch": "@@ -14,25 +14,27 @@\n //! but is not as ugly as it is right now.\n \n use rustc::mir::{BasicBlock, Location};\n+use rustc_data_structures::indexed_set::Iter;\n \n use dataflow::{MaybeInitializedPlaces, MaybeUninitializedPlaces};\n use dataflow::{EverInitializedPlaces, MovingOutStatements};\n use dataflow::{Borrows};\n use dataflow::{FlowAtLocation, FlowsAtLocation};\n use dataflow::move_paths::HasMoveData;\n+use dataflow::move_paths::indexes::BorrowIndex;\n use std::fmt;\n \n // (forced to be `pub` due to its use as an associated type below.)\n-pub(crate) struct Flows<'b, 'gcx: 'tcx, 'tcx: 'b> {\n-    pub borrows: FlowAtLocation<Borrows<'b, 'gcx, 'tcx>>,\n+crate struct Flows<'b, 'gcx: 'tcx, 'tcx: 'b> {\n+    borrows: FlowAtLocation<Borrows<'b, 'gcx, 'tcx>>,\n     pub inits: FlowAtLocation<MaybeInitializedPlaces<'b, 'gcx, 'tcx>>,\n     pub uninits: FlowAtLocation<MaybeUninitializedPlaces<'b, 'gcx, 'tcx>>,\n     pub move_outs: FlowAtLocation<MovingOutStatements<'b, 'gcx, 'tcx>>,\n     pub ever_inits: FlowAtLocation<EverInitializedPlaces<'b, 'gcx, 'tcx>>,\n }\n \n impl<'b, 'gcx, 'tcx> Flows<'b, 'gcx, 'tcx> {\n-    pub fn new(\n+    crate fn new(\n         borrows: FlowAtLocation<Borrows<'b, 'gcx, 'tcx>>,\n         inits: FlowAtLocation<MaybeInitializedPlaces<'b, 'gcx, 'tcx>>,\n         uninits: FlowAtLocation<MaybeUninitializedPlaces<'b, 'gcx, 'tcx>>,\n@@ -47,6 +49,14 @@ impl<'b, 'gcx, 'tcx> Flows<'b, 'gcx, 'tcx> {\n             ever_inits,\n         }\n     }\n+\n+    crate fn borrows_in_scope(&self) -> impl Iterator<Item = BorrowIndex> + '_ {\n+        self.borrows.iter_incoming()\n+    }\n+\n+    crate fn with_outgoing_borrows(&self, op: impl FnOnce(Iter<BorrowIndex>)) {\n+        self.borrows.with_iter_outgoing(op)\n+    }\n }\n \n macro_rules! each_flow {"}, {"sha": "5b4c66bd65c176a10ed276fd4e9bc82e49531cb8", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/818ae6feceb4282193800c7e3668d3dfd2912378/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/818ae6feceb4282193800c7e3668d3dfd2912378/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=818ae6feceb4282193800c7e3668d3dfd2912378", "patch": "@@ -550,7 +550,7 @@ impl<'cx, 'gcx, 'tcx> DataflowResultsConsumer<'cx, 'tcx> for MirBorrowckCtxt<'cx\n                 if self.movable_generator {\n                     // Look for any active borrows to locals\n                     let borrow_set = self.borrow_set.clone();\n-                    flow_state.borrows.with_iter_outgoing(|borrows| {\n+                    flow_state.with_outgoing_borrows(|borrows| {\n                         for i in borrows {\n                             let borrow = &borrow_set[i];\n                             self.check_for_local_borrow(borrow, span);\n@@ -565,7 +565,7 @@ impl<'cx, 'gcx, 'tcx> DataflowResultsConsumer<'cx, 'tcx> for MirBorrowckCtxt<'cx\n                 // StorageDead, but we don't always emit those (notably on unwind paths),\n                 // so this \"extra check\" serves as a kind of backup.\n                 let borrow_set = self.borrow_set.clone();\n-                flow_state.borrows.with_iter_outgoing(|borrows| {\n+                flow_state.with_outgoing_borrows(|borrows| {\n                     for i in borrows {\n                         let borrow = &borrow_set[i];\n                         let context = ContextKind::StorageDead.new(loc);\n@@ -2224,10 +2224,9 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         unreachable!(\"iter::repeat returned None\")\n     }\n \n-    /// This function iterates over all of the current borrows\n-    /// (represented by 1-bits in `flow_state.borrows`) that conflict\n-    /// with an access to a place, invoking the `op` callback for each\n-    /// one.\n+    /// This function iterates over all of the in-scope borrows that\n+    /// conflict with an access to a place, invoking the `op` callback\n+    /// for each one.\n     ///\n     /// \"Current borrow\" here means a borrow that reaches the point in\n     /// the control-flow where the access occurs.\n@@ -2251,7 +2250,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         // check for loan restricting path P being used. Accounts for\n         // borrows of P, P.a.b, etc.\n         let borrow_set = self.borrow_set.clone();\n-        for i in flow_state.borrows.iter_incoming() {\n+        for i in flow_state.borrows_in_scope() {\n             let borrowed = &borrow_set[i];\n \n             if self.places_conflict(&borrowed.borrowed_place, place, access) {"}]}