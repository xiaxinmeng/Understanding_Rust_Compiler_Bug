{"sha": "91d3c364303c3a057feadd40adef0880531e08cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxZDNjMzY0MzAzYzNhMDU3ZmVhZGQ0MGFkZWYwODgwNTMxZTA4Y2M=", "commit": {"author": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-06-25T18:43:52Z"}, "committer": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-09-06T20:35:08Z"}, "message": "adding test case to check marking/unmarking", "tree": {"sha": "75426f5dd94c6bace0bd4c7cd52168b48ef5abb7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75426f5dd94c6bace0bd4c7cd52168b48ef5abb7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91d3c364303c3a057feadd40adef0880531e08cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91d3c364303c3a057feadd40adef0880531e08cc", "html_url": "https://github.com/rust-lang/rust/commit/91d3c364303c3a057feadd40adef0880531e08cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91d3c364303c3a057feadd40adef0880531e08cc/comments", "author": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7c0512b27d287cf0657ae4b195d1ca41623c944", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7c0512b27d287cf0657ae4b195d1ca41623c944", "html_url": "https://github.com/rust-lang/rust/commit/b7c0512b27d287cf0657ae4b195d1ca41623c944"}], "stats": {"total": 37, "additions": 25, "deletions": 12}, "files": [{"sha": "25edcf63faacff6644cfd55ac4667a67efb7b0be", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/91d3c364303c3a057feadd40adef0880531e08cc/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91d3c364303c3a057feadd40adef0880531e08cc/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=91d3c364303c3a057feadd40adef0880531e08cc", "patch": "@@ -23,7 +23,7 @@ use opt_vec;\n use parse;\n use parse::{parse_item_from_source_str};\n use parse::token;\n-use parse::token::{fresh_name, ident_to_str, intern};\n+use parse::token::{fresh_mark, fresh_name, ident_to_str, intern};\n use visit;\n use visit::Visitor;\n \n@@ -67,7 +67,9 @@ pub fn expand_expr(extsbox: @mut SyntaxEnv,\n                                 },\n                             });\n \n-                            let expanded = match expandfun(cx, mac.span, *tts) {\n+                            let fm = fresh_mark();\n+                            let marked_tts = mark_tts(*tts,fm);\n+                            let expanded = match expandfun(cx, mac.span, marked_tts) {\n                                 MRExpr(e) => e,\n                                 MRAny(expr_maker,_,_) => expr_maker(),\n                                 _ => {\n@@ -259,6 +261,12 @@ pub fn expand_expr(extsbox: @mut SyntaxEnv,\n     }\n }\n \n+// apply a fresh mark to the given token trees. Used prior to expansion of a macro.\n+fn mark_tts(tts : &[token_tree], m : Mrk) -> ~[token_tree] {\n+    fold_tts(tts,new_ident_marker(m))\n+}\n+\n+\n // This is a secondary mechanism for invoking syntax extensions on items:\n // \"decorator\" attributes, such as #[auto_encode]. These are invoked by an\n // attribute prefixing an item, and are interpreted by feeding the item\n@@ -1285,7 +1293,7 @@ pub fn new_ident_renamer(from: ast::Ident,\n \n \n // update the ctxts in a path to get a mark node\n-pub fn new_ident_marker(mark: uint) ->\n+pub fn new_ident_marker(mark: Mrk) ->\n     @fn(ast::Ident)->ast::Ident {\n     |id : ast::Ident|\n     ast::Ident{\n@@ -1461,18 +1469,18 @@ mod test {\n \n     #[test]\n     fn automatic_renaming () {\n-        // \"fn a() -> int { let b = 13; let c = b; b+c }\"\n-        //    --> b & c should get new names, in the expr too.\n-        // \"macro_rules! f (($x:ident) => ($x + b)) fn a() -> int { let b = 13; f!(b)}\"\n-        //    --> one should be renamed, one should not.\n-\n         let teststrs =\n             ~[// b & c should get new names throughout, in the expr too:\n                 @\"fn a() -> int { let b = 13; let c = b; b+c }\",\n                 // the use of b before the + should be renamed, the other one not:\n                 @\"macro_rules! f (($x:ident) => ($x + b)) fn a() -> int { let b = 13; f!(b)}\",\n                 // the b before the plus should not be renamed (requires marks)\n-                @\"macro_rules! f (($x:ident) => ({let b=9; ($x + b)})) fn a() -> int { f!(b)}\"];\n+                @\"macro_rules! f (($x:ident) => ({let b=9; ($x + b)})) fn a() -> int { f!(b)}\",\n+                // the z flows into and out of two macros (g & f) along one path, and one (just g) along the\n+                // other, so the result of the whole thing should be \"let z_123 = 3; z_123\"\n+                @\"macro_rules! g (($x:ident) => ({macro_rules! f(($y:ident)=>({let $y=3;$x}));f!($x)}))\n+                   fn a(){g!(z)}\"\n+            ];\n         for s in teststrs.iter() {\n             // we need regexps to test these!\n             std::io::println(expand_and_resolve_and_pretty_print(*s));"}, {"sha": "52c148e7ba28ccc300c233bbd81af32fc4118f4e", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91d3c364303c3a057feadd40adef0880531e08cc/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91d3c364303c3a057feadd40adef0880531e08cc/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=91d3c364303c3a057feadd40adef0880531e08cc", "patch": "@@ -126,7 +126,7 @@ fn fold_mac_(m: &mac, fld: @ast_fold) -> mac {\n \n // build a new vector of tts by appling the given function to\n // all of the identifiers in the token trees.\n-pub fn fold_tts(tts : &[token_tree], f: @fn(ident)->ident) -> ~[token_tree] {\n+pub fn fold_tts(tts : &[token_tree], f: @fn(Ident)->Ident) -> ~[token_tree] {\n     do tts.map |tt| {\n         match *tt {\n             tt_tok(span, ref tok) =>\n@@ -145,7 +145,7 @@ pub fn fold_tts(tts : &[token_tree], f: @fn(ident)->ident) -> ~[token_tree] {\n }\n \n // apply ident folder if it's an ident, otherwise leave it alone\n-fn maybe_fold_ident(t : &token::Token, f: @fn(ident)->ident) -> token::Token {\n+fn maybe_fold_ident(t : &token::Token, f: @fn(Ident)->Ident) -> token::Token {\n     match *t {\n         token::IDENT(id,followed_by_colons) =>\n         token::IDENT(f(id),followed_by_colons),"}, {"sha": "66f121727afd4686eedd1fe20de083842b788fbc", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/91d3c364303c3a057feadd40adef0880531e08cc/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91d3c364303c3a057feadd40adef0880531e08cc/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=91d3c364303c3a057feadd40adef0880531e08cc", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use ast;\n-use ast::Name;\n+use ast::{Name, Mrk};\n use ast_util;\n use parse::token;\n use util::interner::StrInterner;\n@@ -557,6 +557,11 @@ pub fn fresh_name(src_name : &ast::Ident) -> Name {\n     gensym(fmt!(\"%s_%u\",ident_to_str(src_name),num))\n }\n \n+// create a fresh mark.\n+pub fn fresh_mark() -> Mrk {\n+    gensym(\"mark\")\n+}\n+\n /**\n  * All the valid words that have meaning in the Rust language.\n  *"}]}