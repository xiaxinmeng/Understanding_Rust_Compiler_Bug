{"sha": "f74cf39a7434c73424b9e5fddaf78996bd2b06c1", "node_id": "C_kwDOAAsO6NoAKGY3NGNmMzlhNzQzNGM3MzQyNGI5ZTVmZGRhZjc4OTk2YmQyYjA2YzE", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-12-15T15:53:35Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-12-15T15:53:35Z"}, "message": "Fix crash when struct argument size is not a multiple of the pointer size\n\nFixes #1200", "tree": {"sha": "b2a720dfa691b24978984aa6d78e62fac989b4ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2a720dfa691b24978984aa6d78e62fac989b4ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f74cf39a7434c73424b9e5fddaf78996bd2b06c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f74cf39a7434c73424b9e5fddaf78996bd2b06c1", "html_url": "https://github.com/rust-lang/rust/commit/f74cf39a7434c73424b9e5fddaf78996bd2b06c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f74cf39a7434c73424b9e5fddaf78996bd2b06c1/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "057635b9da3ba96bcaed96d7f882e171811dc4d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/057635b9da3ba96bcaed96d7f882e171811dc4d6", "html_url": "https://github.com/rust-lang/rust/commit/057635b9da3ba96bcaed96d7f882e171811dc4d6"}], "stats": {"total": 4, "additions": 3, "deletions": 1}, "files": [{"sha": "9f0bd31e95fcc47a162066fd13c4127f61137305", "filename": "src/abi/pass_mode.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f74cf39a7434c73424b9e5fddaf78996bd2b06c1/src%2Fabi%2Fpass_mode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f74cf39a7434c73424b9e5fddaf78996bd2b06c1/src%2Fabi%2Fpass_mode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fpass_mode.rs?ref=f74cf39a7434c73424b9e5fddaf78996bd2b06c1", "patch": "@@ -117,7 +117,9 @@ impl<'tcx> ArgAbiExt<'tcx> for ArgAbi<'tcx, Ty<'tcx>> {\n             PassMode::Cast(cast) => cast_target_to_abi_params(cast),\n             PassMode::Indirect { attrs, extra_attrs: None, on_stack } => {\n                 if on_stack {\n-                    let size = u32::try_from(self.layout.size.bytes()).unwrap();\n+                    // Abi requires aligning struct size to pointer size\n+                    let size = self.layout.size.align_to(tcx.data_layout.pointer_align.abi);\n+                    let size = u32::try_from(size.bytes()).unwrap();\n                     smallvec![apply_arg_attrs_to_abi_param(\n                         AbiParam::special(pointer_ty(tcx), ArgumentPurpose::StructArgument(size),),\n                         attrs"}]}