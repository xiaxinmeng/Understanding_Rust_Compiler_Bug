{"sha": "e1403e1d8337cc1636471f79da4536409e2a0c2b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxNDAzZTFkODMzN2NjMTYzNjQ3MWY3OWRhNDUzNjQwOWUyYTBjMmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-18T21:41:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-18T21:41:35Z"}, "message": "auto merge of #14000 : pnkfelix/rust/fsk-fix-issue13732, r=alexcrichton\n\nFix #13732.\r\n\r\nThis is a revised, much less hacky form of PR #13753\r\n\r\nThe changes here:\r\n\r\n * add instrumentation to aid debugging of linkage errors,\r\n * fine tune some things in the Makefile where we are telling binaries to use a host-oriented path for finding dynamic libraries, when it should be feeding the binaries a target-oriented path for dynamic libraries.\r\n * pass along the current stage number to run-make tests, and\r\n * skip certain tests when running atop stage1.\r\n\r\nFix #13746 as well.", "tree": {"sha": "a043c3677af6799fa8e4006530940eeb3b18e29c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a043c3677af6799fa8e4006530940eeb3b18e29c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1403e1d8337cc1636471f79da4536409e2a0c2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1403e1d8337cc1636471f79da4536409e2a0c2b", "html_url": "https://github.com/rust-lang/rust/commit/e1403e1d8337cc1636471f79da4536409e2a0c2b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1403e1d8337cc1636471f79da4536409e2a0c2b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea87f126bdf8de4acc4f74c14ac0ae10d95a2472", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea87f126bdf8de4acc4f74c14ac0ae10d95a2472", "html_url": "https://github.com/rust-lang/rust/commit/ea87f126bdf8de4acc4f74c14ac0ae10d95a2472"}, {"sha": "8cbda5da939e97d5dafde4a2a20927fb539bf80c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8cbda5da939e97d5dafde4a2a20927fb539bf80c", "html_url": "https://github.com/rust-lang/rust/commit/8cbda5da939e97d5dafde4a2a20927fb539bf80c"}], "stats": {"total": 397, "additions": 278, "deletions": 119}, "files": [{"sha": "d652fac12f895f48f2ded97c10727c392dd99404", "filename": "mk/main.mk", "status": "modified", "additions": 33, "deletions": 12, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/e1403e1d8337cc1636471f79da4536409e2a0c2b/mk%2Fmain.mk", "raw_url": "https://github.com/rust-lang/rust/raw/e1403e1d8337cc1636471f79da4536409e2a0c2b/mk%2Fmain.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fmain.mk?ref=e1403e1d8337cc1636471f79da4536409e2a0c2b", "patch": "@@ -349,18 +349,45 @@ CFGFLAG$(1)_T_$(2)_H_$(3) = stage$(1)\n endef\n \n # Same macro/variables as above, but defined in a separate loop so it can use\n-# all the varibles above for all archs. The RPATH_VAR setup sometimes needs to\n+# all the variables above for all archs. The RPATH_VAR setup sometimes needs to\n # reach across triples to get things in order.\n+#\n+# Defines (with the standard $(1)_T_$(2)_H_$(3) suffix):\n+# * `LD_LIBRARY_PATH_ENV_NAME`: the name for the key to use in the OS\n+#   environment to access or extend the lookup path for dynamic\n+#   libraries.  Note on Windows, that key is `$PATH`, and thus not\n+#   only conflates programs with dynamic libraries, but also often\n+#   contains spaces which confuse make.\n+# * `LD_LIBRARY_PATH_ENV_HOSTDIR`: the entry to add to lookup path for the host\n+# * `LD_LIBRARY_PATH_ENV_TARGETDIR`: the entry to add to lookup path for target\n+# \n+# Below that, HOST_RPATH_VAR and TARGET_RPATH_VAR are defined in terms of the\n+# above settings.\n+# \n define SREQ_CMDS\n \n ifeq ($$(OSTYPE_$(3)),apple-darwin)\n-  RPATH_VAR$(1)_T_$(2)_H_$(3) := \\\n-      DYLD_LIBRARY_PATH=\"$$$$DYLD_LIBRARY_PATH:$$(CURDIR)/$$(HLIB$(1)_H_$(3))\"\n+  LD_LIBRARY_PATH_ENV_NAME$(1)_T_$(2)_H_$(3) := DYLD_LIBRARY_PATH\n+else\n+ifeq ($$(CFG_WINDOWSY_$(2)),1)\n+  LD_LIBRARY_PATH_ENV_NAME$(1)_T_$(2)_H_$(3) := PATH\n else\n-  RPATH_VAR$(1)_T_$(2)_H_$(3) := \\\n-      LD_LIBRARY_PATH=\"$$$$LD_LIBRARY_PATH:$$(CURDIR)/$$(HLIB$(1)_H_$(3))\"\n+  LD_LIBRARY_PATH_ENV_NAME$(1)_T_$(2)_H_$(3) := LD_LIBRARY_PATH\n+endif\n endif\n \n+LD_LIBRARY_PATH_ENV_HOSTDIR$(1)_T_$(2)_H_$(3) := \\\n+    $$(CURDIR)/$$(HLIB$(1)_H_$(3))\n+LD_LIBRARY_PATH_ENV_TARGETDIR$(1)_T_$(2)_H_$(3) := \\\n+    $$(CURDIR)/$$(TLIB1_T_$(2)_H_$(CFG_BUILD))\n+\n+HOST_RPATH_VAR$(1)_T_$(2)_H_$(3) := \\\n+  $$(LD_LIBRARY_PATH_ENV_NAME$(1)_T_$(2)_H_$(3))=$$$$$$(LD_LIBRARY_PATH_ENV_NAME$(1)_T_$(2)_H_$(3)):$$(LD_LIBRARY_PATH_ENV_HOSTDIR$(1)_T_$(2)_H_$(3))\n+TARGET_RPATH_VAR$(1)_T_$(2)_H_$(3) := \\\n+  $$(LD_LIBRARY_PATH_ENV_NAME$(1)_T_$(2)_H_$(3))=$$$$$$(LD_LIBRARY_PATH_ENV_NAME$(1)_T_$(2)_H_$(3)):$$(LD_LIBRARY_PATH_ENV_TARGETDIR$(1)_T_$(2)_H_$(3))\n+\n+RPATH_VAR$(1)_T_$(2)_H_$(3) := $$(HOST_RPATH_VAR$(1)_T_$(2)_H_$(3))\n+\n # Pass --cfg stage0 only for the build->host part of stage0;\n # if you're building a cross config, the host->* parts are\n # effectively stage1, since it uses the just-built stage0.\n@@ -376,13 +403,7 @@ ifeq ($(1),0)\n ifneq ($(strip $(CFG_BUILD)),$(strip $(3)))\n CFGFLAG$(1)_T_$(2)_H_$(3) = stage1\n \n-ifeq ($$(OSTYPE_$(3)),apple-darwin)\n-  RPATH_VAR$(1)_T_$(2)_H_$(3) := \\\n-      DYLD_LIBRARY_PATH=\"$$$$DYLD_LIBRARY_PATH:$$(CURDIR)/$$(TLIB1_T_$(2)_H_$(CFG_BUILD))\"\n-else\n-  RPATH_VAR$(1)_T_$(2)_H_$(3) := \\\n-      LD_LIBRARY_PATH=\"$$$$LD_LIBRARY_PATH:$$(CURDIR)/$$(TLIB1_T_$(2)_H_$(CFG_BUILD))\"\n-endif\n+RPATH_VAR$(1)_T_$(2)_H_$(3) := $$(TARGET_RPATH_VAR$(1)_T_$(2)_H_$(3))\n endif\n endif\n "}, {"sha": "25f03751074fb9f3a6f9973a159abb3e6c25bdf5", "filename": "mk/tests.mk", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e1403e1d8337cc1636471f79da4536409e2a0c2b/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/e1403e1d8337cc1636471f79da4536409e2a0c2b/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=e1403e1d8337cc1636471f79da4536409e2a0c2b", "patch": "@@ -793,8 +793,27 @@ else\n CRATEDOCTESTDEP_$(1)_$(2)_$(3)_$(4) = $$(RSINPUTS_$(4))\n endif\n \n+# (Issues #13732, #13983, #14000) The doc for the regex crate includes\n+# uses of the `regex!` macro from the regex_macros crate.  There is\n+# normally a dependence injected that makes the target's regex depend\n+# upon the host's regex_macros (see #13845), but that dependency\n+# injection is currently skipped for stage1 as a special case.\n+#\n+# Therefore, as a further special case, this conditional skips\n+# attempting to run the doc tests for the regex crate atop stage1,\n+# (since there is no regex_macros crate for the stage1 rustc to load).\n+#\n+# (Another approach for solving this would be to inject the desired\n+# dependence for stage1 as well, by setting things up to generate a\n+# regex_macros crate that was compatible with the stage1 rustc and\n+# thus re-enable our ability to run this test.)\n+ifeq (stage$(1)-crate-$(4),stage1-crate-regex)\n+check-stage$(1)-T-$(2)-H-$(3)-doc-crate-$(4)-exec:\n+\t@$$(call E, skipping doc-crate-$(4) as it uses macros and cannot run at stage$(1))\n+else\n check-stage$(1)-T-$(2)-H-$(3)-doc-crate-$(4)-exec: \\\n \t$$(call TEST_OK_FILE,$(1),$(2),$(3),doc-crate-$(4))\n+endif\n \n ifeq ($(2),$$(CFG_BUILD))\n $$(call TEST_OK_FILE,$(1),$(2),$(3),doc-crate-$(4)): $$(CRATEDOCTESTDEP_$(1)_$(2)_$(3)_$(4))\n@@ -951,7 +970,10 @@ $(3)/test/run-make/%-$(1)-T-$(2)-H-$(3).ok: \\\n \t    \"$$(CC_$(3)) $$(CFG_GCCISH_CFLAGS_$(3))\" \\\n \t    $$(HBIN$(1)_H_$(3))/rustdoc$$(X_$(3)) \\\n \t    \"$$(TESTNAME)\" \\\n-\t    \"$$(RPATH_VAR$(1)_T_$(2)_H_$(3))\"\n+\t    $$(LD_LIBRARY_PATH_ENV_NAME$(1)_T_$(2)_H_$(3)) \\\n+\t    \"$$(LD_LIBRARY_PATH_ENV_HOSTDIR$(1)_T_$(2)_H_$(3))\" \\\n+\t    \"$$(LD_LIBRARY_PATH_ENV_TARGETDIR$(1)_T_$(2)_H_$(3))\" \\\n+\t    $(1)\n \t@touch $$@\n else\n # FIXME #11094 - The above rule doesn't work right for multiple targets"}, {"sha": "6b273c2d4634593845753be052c9e03a06b09e07", "filename": "src/compiletest/procsrv.rs", "status": "modified", "additions": 19, "deletions": 42, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/e1403e1d8337cc1636471f79da4536409e2a0c2b/src%2Fcompiletest%2Fprocsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1403e1d8337cc1636471f79da4536409e2a0c2b/src%2Fcompiletest%2Fprocsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fprocsrv.rs?ref=e1403e1d8337cc1636471f79da4536409e2a0c2b", "patch": "@@ -11,54 +11,31 @@\n use std::os;\n use std::str;\n use std::io::process::{ProcessExit, Command, Process, ProcessOutput};\n+use std::unstable::dynamic_lib::DynamicLibrary;\n \n-#[cfg(target_os = \"win32\")]\n fn target_env(lib_path: &str, prog: &str) -> Vec<(StrBuf, StrBuf)> {\n-    let env = os::env();\n+    let prog = if cfg!(windows) {prog.slice_to(prog.len() - 4)} else {prog};\n+    let aux_path = prog + \".libaux\";\n \n-    // Make sure we include the aux directory in the path\n-    assert!(prog.ends_with(\".exe\"));\n-    let aux_path = prog.slice(0u, prog.len() - 4u).to_owned() + \".libaux\";\n+    // Need to be sure to put both the lib_path and the aux path in the dylib\n+    // search path for the child.\n+    let mut path = DynamicLibrary::search_path();\n+    path.insert(0, Path::new(aux_path));\n+    path.insert(0, Path::new(lib_path));\n \n-    let mut new_env: Vec<_> = env.move_iter().map(|(k, v)| {\n-        let new_v = if \"PATH\" == k {\n-            format_strbuf!(\"{};{};{}\", v, lib_path, aux_path)\n-        } else {\n-            v.to_strbuf()\n-        };\n-        (k.to_strbuf(), new_v)\n-    }).collect();\n-    if prog.ends_with(\"rustc.exe\") {\n-        new_env.push((\"RUST_THREADS\".to_strbuf(), \"1\".to_strbuf()));\n+    // Remove the previous dylib search path var\n+    let var = DynamicLibrary::envvar();\n+    let mut env: Vec<(StrBuf,StrBuf)> =\n+        os::env().move_iter().map(|(a,b)|(a.to_strbuf(), b.to_strbuf())).collect();\n+    match env.iter().position(|&(ref k, _)| k.as_slice() == var) {\n+        Some(i) => { env.remove(i); }\n+        None => {}\n     }\n-    return new_env;\n-}\n \n-#[cfg(target_os = \"linux\")]\n-#[cfg(target_os = \"macos\")]\n-#[cfg(target_os = \"freebsd\")]\n-fn target_env(lib_path: &str, prog: &str) -> Vec<(StrBuf,StrBuf)> {\n-    // Make sure we include the aux directory in the path\n-    let aux_path = prog + \".libaux\";\n-\n-    let mut env: Vec<(StrBuf,StrBuf)> =\n-        os::env().move_iter()\n-                 .map(|(ref k, ref v)| (k.to_strbuf(), v.to_strbuf()))\n-                 .collect();\n-    let var = if cfg!(target_os = \"macos\") {\n-        \"DYLD_LIBRARY_PATH\"\n-    } else {\n-        \"LD_LIBRARY_PATH\"\n-    };\n-    let prev = match env.iter().position(|&(ref k, _)| k.as_slice() == var) {\n-        Some(i) => env.remove(i).unwrap().val1(),\n-        None => \"\".to_strbuf(),\n-    };\n-    env.push((var.to_strbuf(), if prev.is_empty() {\n-        format_strbuf!(\"{}:{}\", lib_path, aux_path)\n-    } else {\n-        format_strbuf!(\"{}:{}:{}\", lib_path, aux_path, prev)\n-    }));\n+    // Add the new dylib search path var\n+    let newpath = DynamicLibrary::create_path(path.as_slice());\n+    env.push((var.to_strbuf(),\n+              str::from_utf8(newpath.as_slice()).unwrap().to_strbuf()));\n     return env;\n }\n "}, {"sha": "0e2c1e77ab4c5624312d8746613a765478a5aa85", "filename": "src/etc/maketest.py", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e1403e1d8337cc1636471f79da4536409e2a0c2b/src%2Fetc%2Fmaketest.py", "raw_url": "https://github.com/rust-lang/rust/raw/e1403e1d8337cc1636471f79da4536409e2a0c2b/src%2Fetc%2Fmaketest.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fmaketest.py?ref=e1403e1d8337cc1636471f79da4536409e2a0c2b", "patch": "@@ -30,20 +30,21 @@ def putenv(name, value):\n         value = normalize_path(value)\n     os.putenv(name, value)\n \n+def convert_path_spec(name, value):\n+    if os.name == 'nt' and name != 'PATH':\n+        value = \":\".join(normalize_path(v) for v in value.split(\";\"))\n+    return value\n \n make = sys.argv[2]\n putenv('RUSTC', os.path.abspath(sys.argv[3]))\n putenv('TMPDIR', os.path.abspath(sys.argv[4]))\n putenv('CC', sys.argv[5])\n putenv('RUSTDOC', os.path.abspath(sys.argv[6]))\n filt = sys.argv[7]\n-ldpath = sys.argv[8]\n-if ldpath != '':\n-    name = ldpath.split('=')[0]\n-    value = ldpath.split('=')[1]\n-    if os.name == 'nt' and name != 'PATH':\n-        value = \":\".join(normalize_path(v) for v in value.split(\";\"))\n-    os.putenv(name, value)\n+putenv('LD_LIB_PATH_ENVVAR', sys.argv[8]);\n+putenv('HOST_RPATH_DIR', os.path.abspath(sys.argv[9]));\n+putenv('TARGET_RPATH_DIR', os.path.abspath(sys.argv[10]));\n+putenv('RUST_BUILD_STAGE', sys.argv[11])\n \n if not filt in sys.argv[1]:\n     sys.exit(0)"}, {"sha": "5ed8da8a82b04970602ac1c238fc4fa5183b8079", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e1403e1d8337cc1636471f79da4536409e2a0c2b/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1403e1d8337cc1636471f79da4536409e2a0c2b/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=e1403e1d8337cc1636471f79da4536409e2a0c2b", "patch": "@@ -17,7 +17,7 @@ use back::svh::Svh;\n use driver::session::Session;\n use driver::{driver, config};\n use metadata::cstore;\n-use metadata::cstore::CStore;\n+use metadata::cstore::{CStore, CrateSource};\n use metadata::decoder;\n use metadata::loader;\n use metadata::loader::CratePaths;\n@@ -68,10 +68,15 @@ impl<'a> visit::Visitor<()> for Env<'a> {\n \n fn dump_crates(cstore: &CStore) {\n     debug!(\"resolved crates:\");\n-    cstore.iter_crate_data(|_, data| {\n+    cstore.iter_crate_data_origins(|_, data, opt_source| {\n         debug!(\"crate_id: {}\", data.crate_id());\n         debug!(\"  cnum: {}\", data.cnum);\n         debug!(\"  hash: {}\", data.hash());\n+        opt_source.map(|cs| {\n+            let CrateSource { dylib, rlib, cnum: _ } = cs;\n+            dylib.map(|dl| debug!(\"  dylib: {}\", dl.display()));\n+            rlib.map(|rl|  debug!(\"   rlib: {}\", rl.display()));\n+        });\n     })\n }\n "}, {"sha": "cbf8944f0399d078caf572ea53c05391f1cc3f5b", "filename": "src/librustc/metadata/cstore.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e1403e1d8337cc1636471f79da4536409e2a0c2b/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1403e1d8337cc1636471f79da4536409e2a0c2b/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcstore.rs?ref=e1403e1d8337cc1636471f79da4536409e2a0c2b", "patch": "@@ -114,6 +114,17 @@ impl CStore {\n         }\n     }\n \n+    /// Like `iter_crate_data`, but passes source paths (if available) as well.\n+    pub fn iter_crate_data_origins(&self, i: |ast::CrateNum,\n+                                              &crate_metadata,\n+                                              Option<CrateSource>|) {\n+        for (&k, v) in self.metas.borrow().iter() {\n+            let origin = self.get_used_crate_source(k);\n+            origin.as_ref().map(|cs| { assert!(k == cs.cnum); });\n+            i(k, &**v, origin);\n+        }\n+    }\n+\n     pub fn add_used_crate_source(&self, src: CrateSource) {\n         let mut used_crate_sources = self.used_crate_sources.borrow_mut();\n         if !used_crate_sources.contains(&src) {"}, {"sha": "238b23d6c5a13cff8a9b4e33d0c40cdecd68dab3", "filename": "src/librustc/metadata/filesearch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1403e1d8337cc1636471f79da4536409e2a0c2b/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1403e1d8337cc1636471f79da4536409e2a0c2b/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs?ref=e1403e1d8337cc1636471f79da4536409e2a0c2b", "patch": "@@ -136,7 +136,7 @@ impl<'a> FileSearch<'a> {\n \n     pub fn add_dylib_search_paths(&self) {\n         self.for_each_lib_search_path(|lib_search_path| {\n-            DynamicLibrary::add_search_path(lib_search_path);\n+            DynamicLibrary::prepend_search_path(lib_search_path);\n             FileDoesntMatch\n         })\n     }"}, {"sha": "48db910fc3908eddf5121f6870c6fff9aa8708ef", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1403e1d8337cc1636471f79da4536409e2a0c2b/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1403e1d8337cc1636471f79da4536409e2a0c2b/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=e1403e1d8337cc1636471f79da4536409e2a0c2b", "patch": "@@ -284,7 +284,7 @@ fn rust_input(cratefile: &str, matches: &getopts::Matches) -> Output {\n         core::run_core(libs.move_iter().map(|x| x.clone()).collect(),\n                        cfgs.move_iter().map(|x| x.to_strbuf()).collect(),\n                        &cr)\n-    }).unwrap();\n+    }).map_err(|boxed_any|format!(\"{:?}\", boxed_any)).unwrap();\n     info!(\"finished with rustc\");\n     analysiskey.replace(Some(analysis));\n "}, {"sha": "6a07b7a906e3dd483f7fef8bde7234f4b386dd4f", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e1403e1d8337cc1636471f79da4536409e2a0c2b/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1403e1d8337cc1636471f79da4536409e2a0c2b/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=e1403e1d8337cc1636471f79da4536409e2a0c2b", "patch": "@@ -15,6 +15,7 @@ use std::io::{Command, TempDir};\n use std::os;\n use std::str;\n use std::strbuf::StrBuf;\n+use std::unstable::dynamic_lib::DynamicLibrary;\n \n use collections::{HashSet, HashMap};\n use testing;\n@@ -150,12 +151,37 @@ fn runtest(test: &str, cratename: &str, libs: HashSet<Path>, should_fail: bool,\n     let outdir = TempDir::new(\"rustdoctest\").expect(\"rustdoc needs a tempdir\");\n     let out = Some(outdir.path().clone());\n     let cfg = config::build_configuration(&sess);\n+    let libdir = sess.target_filesearch().get_lib_path();\n     driver::compile_input(sess, cfg, &input, &out, &None);\n \n     if no_run { return }\n \n     // Run the code!\n-    match Command::new(outdir.path().join(\"rust_out\")).output() {\n+    //\n+    // We're careful to prepend the *target* dylib search path to the child's\n+    // environment to ensure that the target loads the right libraries at\n+    // runtime. It would be a sad day if the *host* libraries were loaded as a\n+    // mistake.\n+    let exe = outdir.path().join(\"rust_out\");\n+    let env = {\n+        let mut path = DynamicLibrary::search_path();\n+        path.insert(0, libdir.clone());\n+\n+        // Remove the previous dylib search path var\n+        let var = DynamicLibrary::envvar();\n+        let mut env: Vec<(~str,~str)> = os::env().move_iter().collect();\n+        match env.iter().position(|&(ref k, _)| k.as_slice() == var) {\n+            Some(i) => { env.remove(i); }\n+            None => {}\n+        };\n+\n+        // Add the new dylib search path var\n+        let newpath = DynamicLibrary::create_path(path.as_slice());\n+        env.push((var.to_owned(),\n+                  str::from_utf8(newpath.as_slice()).unwrap().to_owned()));\n+        env\n+    };\n+    match Command::new(exe).env(env.as_slice()).output() {\n         Err(e) => fail!(\"couldn't run the test: {}{}\", e,\n                         if e.kind == io::PermissionDenied {\n                             \" - maybe your tempdir is mounted with noexec?\""}, {"sha": "d50c63c583247f1d82ae2523d7a37ab8778ad356", "filename": "src/libstd/unstable/dynamic_lib.rs", "status": "modified", "additions": 51, "deletions": 17, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/e1403e1d8337cc1636471f79da4536409e2a0c2b/src%2Flibstd%2Funstable%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1403e1d8337cc1636471f79da4536409e2a0c2b/src%2Flibstd%2Funstable%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fdynamic_lib.rs?ref=e1403e1d8337cc1636471f79da4536409e2a0c2b", "patch": "@@ -16,16 +16,16 @@ A simple wrapper over the platform's dynamic library facilities\n \n */\n \n-\n+use clone::Clone;\n use c_str::ToCStr;\n+use iter::Iterator;\n use mem;\n use ops::*;\n use option::*;\n use os;\n-use path::GenericPath;\n-use path;\n+use path::{Path,GenericPath};\n use result::*;\n-use slice::Vector;\n+use slice::{Vector,ImmutableVector};\n use str;\n use vec::Vec;\n \n@@ -76,22 +76,55 @@ impl DynamicLibrary {\n         }\n     }\n \n-    /// Appends a path to the system search path for dynamic libraries\n-    pub fn add_search_path(path: &path::Path) {\n-        let (envvar, sep) = if cfg!(windows) {\n-            (\"PATH\", ';' as u8)\n+    /// Prepends a path to this process's search path for dynamic libraries\n+    pub fn prepend_search_path(path: &Path) {\n+        let mut search_path = DynamicLibrary::search_path();\n+        search_path.insert(0, path.clone());\n+        let newval = DynamicLibrary::create_path(search_path.as_slice());\n+        os::setenv(DynamicLibrary::envvar(),\n+                   str::from_utf8(newval.as_slice()).unwrap());\n+    }\n+\n+    /// From a slice of paths, create a new vector which is suitable to be an\n+    /// environment variable for this platforms dylib search path.\n+    pub fn create_path(path: &[Path]) -> Vec<u8> {\n+        let mut newvar = Vec::new();\n+        for (i, path) in path.iter().enumerate() {\n+            if i > 0 { newvar.push(DynamicLibrary::separator()); }\n+            newvar.push_all(path.as_vec());\n+        }\n+        return newvar;\n+    }\n+\n+    /// Returns the environment variable for this process's dynamic library\n+    /// search path\n+    pub fn envvar() -> &'static str {\n+        if cfg!(windows) {\n+            \"PATH\"\n         } else if cfg!(target_os = \"macos\") {\n-            (\"DYLD_LIBRARY_PATH\", ':' as u8)\n+            \"DYLD_LIBRARY_PATH\"\n         } else {\n-            (\"LD_LIBRARY_PATH\", ':' as u8)\n-        };\n-        let mut newenv = Vec::from_slice(path.as_vec());\n-        newenv.push(sep);\n-        match os::getenv_as_bytes(envvar) {\n-            Some(bytes) => newenv.push_all(bytes),\n+            \"LD_LIBRARY_PATH\"\n+        }\n+    }\n+\n+    fn separator() -> u8 {\n+        if cfg!(windows) {';' as u8} else {':' as u8}\n+    }\n+\n+    /// Returns the current search path for dynamic libraries being used by this\n+    /// process\n+    pub fn search_path() -> Vec<Path> {\n+        let mut ret = Vec::new();\n+        match os::getenv_as_bytes(DynamicLibrary::envvar()) {\n+            Some(env) => {\n+                for portion in env.split(|a| *a == DynamicLibrary::separator()) {\n+                    ret.push(Path::new(portion));\n+                }\n+            }\n             None => {}\n         }\n-        os::setenv(envvar, str::from_utf8(newenv.as_slice()).unwrap());\n+        return ret;\n     }\n \n     /// Access the value at the symbol of the dynamic library\n@@ -168,11 +201,12 @@ mod test {\n #[cfg(target_os = \"macos\")]\n #[cfg(target_os = \"freebsd\")]\n pub mod dl {\n+    use prelude::*;\n+\n     use c_str::ToCStr;\n     use libc;\n     use ptr;\n     use str;\n-    use result::*;\n \n     pub unsafe fn open_external<T: ToCStr>(filename: T) -> *u8 {\n         filename.with_c_str(|raw_name| {"}, {"sha": "e3b1037ccc06e4e6ac4700fb84d5912e17d5c951", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e1403e1d8337cc1636471f79da4536409e2a0c2b/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1403e1d8337cc1636471f79da4536409e2a0c2b/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=e1403e1d8337cc1636471f79da4536409e2a0c2b", "patch": "@@ -524,6 +524,9 @@ fn load_extern_macros(krate: &ast::ViewItem, fld: &mut MacroExpander) {\n         None => return\n     };\n \n+    debug!(\"load_extern_macros: mapped crate {} to path {} and registrar {:s}\",\n+           crate_name, path.display(), registrar);\n+\n     let lib = match DynamicLibrary::open(Some(&path)) {\n         Ok(lib) => lib,\n         // this is fatal: there are almost certainly macros we need"}, {"sha": "3b28af9b0e83f09c4db60be429cc14b171290f2d", "filename": "src/test/run-make/bootstrap-from-c-with-green/Makefile", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e1403e1d8337cc1636471f79da4536409e2a0c2b/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-green%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/e1403e1d8337cc1636471f79da4536409e2a0c2b/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-green%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-green%2FMakefile?ref=e1403e1d8337cc1636471f79da4536409e2a0c2b", "patch": "@@ -1,9 +1,13 @@\n -include ../tools.mk\n \n+HOST_LIB_DIR=$(TMPDIR)/../../../stage$(RUST_BUILD_STAGE)/lib\n+# This overrides the LD_LIBRARY_PATH for RUN\n+TARGET_RPATH_DIR:=$(TARGET_RPATH_DIR):$(TMPDIR)\n+\n all:\n \t$(RUSTC) lib.rs\n \tln -nsf $(call DYLIB,boot-*) $(call DYLIB,boot)\n-\t$(CC) main.c -o $(call RUN,main) -lboot\n+\t$(CC) main.c -o $(call RUN_BINFILE,main) $(call RPATH_LINK_SEARCH,$(HOST_LIB_DIR)) -lboot\n \t$(call RUN,main)\n-\trm $(call DYLIB,boot)\n+\t$(call REMOVE_DYLIBS,boot)\n \t$(call FAIL,main)"}, {"sha": "3b28af9b0e83f09c4db60be429cc14b171290f2d", "filename": "src/test/run-make/bootstrap-from-c-with-native/Makefile", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e1403e1d8337cc1636471f79da4536409e2a0c2b/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-native%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/e1403e1d8337cc1636471f79da4536409e2a0c2b/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-native%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-native%2FMakefile?ref=e1403e1d8337cc1636471f79da4536409e2a0c2b", "patch": "@@ -1,9 +1,13 @@\n -include ../tools.mk\n \n+HOST_LIB_DIR=$(TMPDIR)/../../../stage$(RUST_BUILD_STAGE)/lib\n+# This overrides the LD_LIBRARY_PATH for RUN\n+TARGET_RPATH_DIR:=$(TARGET_RPATH_DIR):$(TMPDIR)\n+\n all:\n \t$(RUSTC) lib.rs\n \tln -nsf $(call DYLIB,boot-*) $(call DYLIB,boot)\n-\t$(CC) main.c -o $(call RUN,main) -lboot\n+\t$(CC) main.c -o $(call RUN_BINFILE,main) $(call RPATH_LINK_SEARCH,$(HOST_LIB_DIR)) -lboot\n \t$(call RUN,main)\n-\trm $(call DYLIB,boot)\n+\t$(call REMOVE_DYLIBS,boot)\n \t$(call FAIL,main)"}, {"sha": "c4720c418a77a2adaa937eb43f54dd40488b0a08", "filename": "src/test/run-make/c-dynamic-dylib/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1403e1d8337cc1636471f79da4536409e2a0c2b/src%2Ftest%2Frun-make%2Fc-dynamic-dylib%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/e1403e1d8337cc1636471f79da4536409e2a0c2b/src%2Ftest%2Frun-make%2Fc-dynamic-dylib%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fc-dynamic-dylib%2FMakefile?ref=e1403e1d8337cc1636471f79da4536409e2a0c2b", "patch": "@@ -9,6 +9,6 @@ all: $(call DYLIB,cfoo)\n \t$(RUSTC) foo.rs\n \t$(RUSTC) bar.rs\n \t$(call RUN,bar)\n-\trm $(TMPDIR)/$(call DYLIB_GLOB,cfoo)\n+\t$(call REMOVE_DYLIBS,cfoo)\n \t$(call FAIL,bar)\n endif"}, {"sha": "e15cfd34d6c36f3e394635003b8644f6c56a931f", "filename": "src/test/run-make/c-dynamic-rlib/Makefile", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1403e1d8337cc1636471f79da4536409e2a0c2b/src%2Ftest%2Frun-make%2Fc-dynamic-rlib%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/e1403e1d8337cc1636471f79da4536409e2a0c2b/src%2Ftest%2Frun-make%2Fc-dynamic-rlib%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fc-dynamic-rlib%2FMakefile?ref=e1403e1d8337cc1636471f79da4536409e2a0c2b", "patch": "@@ -1,5 +1,8 @@\n -include ../tools.mk\n \n+# This overrides the LD_LIBRARY_PATH for RUN\n+TARGET_RPATH_DIR:=$(TARGET_RPATH_DIR):$(TMPDIR)\n+\n # This hits an assertion in the linker on older versions of osx apparently\n ifeq ($(shell uname),Darwin)\n all:\n@@ -8,7 +11,7 @@ else\n all: $(call DYLIB,cfoo)\n \t$(RUSTC) foo.rs\n \t$(RUSTC) bar.rs\n-\tLD_LIBRARY_PATH=$(TMPDIR) $(call RUN,bar)\n-\trm $(TMPDIR)/$(call DYLIB_GLOB,cfoo)\n+\t$(call RUN,bar)\n+\t$(call REMOVE_DYLIBS,cfoo)\n \t$(call FAIL,bar)\n endif"}, {"sha": "e743004a9cbc6caf86e4a8ba6395674954f9fc2d", "filename": "src/test/run-make/c-link-to-rust-dylib/Makefile", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e1403e1d8337cc1636471f79da4536409e2a0c2b/src%2Ftest%2Frun-make%2Fc-link-to-rust-dylib%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/e1403e1d8337cc1636471f79da4536409e2a0c2b/src%2Ftest%2Frun-make%2Fc-link-to-rust-dylib%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fc-link-to-rust-dylib%2FMakefile?ref=e1403e1d8337cc1636471f79da4536409e2a0c2b", "patch": "@@ -1,9 +1,11 @@\n -include ../tools.mk\n \n+HOST_LIB_DIR=$(TMPDIR)/../../../stage$(RUST_BUILD_STAGE)/lib\n+\n all:\n \t$(RUSTC) foo.rs\n \tln -s $(call DYLIB,foo-*) $(call DYLIB,foo)\n-\t$(CC) bar.c -lfoo -o $(call RUN,bar) -Wl,-rpath,$(TMPDIR)\n+\t$(CC) bar.c -lfoo -o $(call RUN_BINFILE,bar) $(call RPATH_LINK_SEARCH,$(HOST_LIB_DIR)) -Wl,-rpath,$(TMPDIR)\n \t$(call RUN,bar)\n-\trm $(call DYLIB,foo)\n+\t$(call REMOVE_DYLIBS,foo)\n \t$(call FAIL,bar)"}, {"sha": "40b6feac678233f1154f768c1112215bae4a4f94", "filename": "src/test/run-make/c-link-to-rust-staticlib/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1403e1d8337cc1636471f79da4536409e2a0c2b/src%2Ftest%2Frun-make%2Fc-link-to-rust-staticlib%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/e1403e1d8337cc1636471f79da4536409e2a0c2b/src%2Ftest%2Frun-make%2Fc-link-to-rust-staticlib%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fc-link-to-rust-staticlib%2FMakefile?ref=e1403e1d8337cc1636471f79da4536409e2a0c2b", "patch": "@@ -11,7 +11,7 @@ ifneq ($(shell uname),FreeBSD)\n all:\n \t$(RUSTC) foo.rs\n \tln -s $(call STATICLIB,foo-*) $(call STATICLIB,foo)\n-\t$(CC) bar.c -lfoo -o $(call RUN,bar) $(EXTRAFLAGS) -lstdc++\n+\t$(CC) bar.c -lfoo -o $(call RUN_BINFILE,bar) $(EXTRAFLAGS) -lstdc++\n \t$(call RUN,bar)\n \trm $(call STATICLIB,foo*)\n \t$(call RUN,bar)"}, {"sha": "6b047846cfdeb1f5a9e7b11ef3799de4cc99b112", "filename": "src/test/run-make/c-static-dylib/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1403e1d8337cc1636471f79da4536409e2a0c2b/src%2Ftest%2Frun-make%2Fc-static-dylib%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/e1403e1d8337cc1636471f79da4536409e2a0c2b/src%2Ftest%2Frun-make%2Fc-static-dylib%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fc-static-dylib%2FMakefile?ref=e1403e1d8337cc1636471f79da4536409e2a0c2b", "patch": "@@ -5,5 +5,5 @@ all: $(call STATICLIB,cfoo)\n \t$(RUSTC) bar.rs\n \trm $(TMPDIR)/$(call STATICLIB_GLOB,cfoo)\n \t$(call RUN,bar)\n-\trm $(TMPDIR)/$(call DYLIB_GLOB,foo)\n+\t$(call REMOVE_DYLIBS,foo)\n \t$(call FAIL,bar)"}, {"sha": "02b24ef9846dd48cc9048b5f6b6463e35c3f6a69", "filename": "src/test/run-make/c-static-rlib/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1403e1d8337cc1636471f79da4536409e2a0c2b/src%2Ftest%2Frun-make%2Fc-static-rlib%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/e1403e1d8337cc1636471f79da4536409e2a0c2b/src%2Ftest%2Frun-make%2Fc-static-rlib%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fc-static-rlib%2FMakefile?ref=e1403e1d8337cc1636471f79da4536409e2a0c2b", "patch": "@@ -3,6 +3,6 @@\n all: $(call STATICLIB,cfoo)\n \t$(RUSTC) foo.rs\n \t$(RUSTC) bar.rs\n-\trm $(TMPDIR)/$(call RLIB_GLOB,foo)\n+\t$(call REMOVE_RLIBS,foo)\n \trm $(TMPDIR)/$(call STATICLIB_GLOB,cfoo)\n \t$(call RUN,bar)"}, {"sha": "2149f2451470e2e41f283fb95327a9fa55b5aa8b", "filename": "src/test/run-make/dylib-chain/Makefile", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e1403e1d8337cc1636471f79da4536409e2a0c2b/src%2Ftest%2Frun-make%2Fdylib-chain%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/e1403e1d8337cc1636471f79da4536409e2a0c2b/src%2Ftest%2Frun-make%2Fdylib-chain%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fdylib-chain%2FMakefile?ref=e1403e1d8337cc1636471f79da4536409e2a0c2b", "patch": "@@ -6,7 +6,7 @@ all:\n \t$(RUSTC) m3.rs\n \t$(RUSTC) m4.rs\n \t$(call RUN,m4)\n-\trm $(TMPDIR)/$(call DYLIB_GLOB,m1)\n-\trm $(TMPDIR)/$(call DYLIB_GLOB,m2)\n-\trm $(TMPDIR)/$(call DYLIB_GLOB,m3)\n+\t$(call REMOVE_DYLIBS,m1)\n+\t$(call REMOVE_DYLIBS,m2)\n+\t$(call REMOVE_DYLIBS,m3)\n \t$(call FAIL,m4)"}, {"sha": "56748b1eb9b007dc75f4bd08a6fdb86b4ec01581", "filename": "src/test/run-make/extern-fn-reachable/Makefile", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e1403e1d8337cc1636471f79da4536409e2a0c2b/src%2Ftest%2Frun-make%2Fextern-fn-reachable%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/e1403e1d8337cc1636471f79da4536409e2a0c2b/src%2Ftest%2Frun-make%2Fextern-fn-reachable%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fextern-fn-reachable%2FMakefile?ref=e1403e1d8337cc1636471f79da4536409e2a0c2b", "patch": "@@ -1,5 +1,8 @@\n -include ../tools.mk\n \n+# This overrides the LD_LIBRARY_PATH for RUN\n+TARGET_RPATH_DIR:=$(TARGET_RPATH_DIR):$(TMPDIR)\n+\n all:\n \t$(RUSTC) dylib.rs -o $(TMPDIR)/libdylib.so\n \t$(RUSTC) main.rs"}, {"sha": "49a04ce42a0ae7f16a5fc60ba46c9fb6406a406d", "filename": "src/test/run-make/lto-smoke-c/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1403e1d8337cc1636471f79da4536409e2a0c2b/src%2Ftest%2Frun-make%2Flto-smoke-c%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/e1403e1d8337cc1636471f79da4536409e2a0c2b/src%2Ftest%2Frun-make%2Flto-smoke-c%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Flto-smoke-c%2FMakefile?ref=e1403e1d8337cc1636471f79da4536409e2a0c2b", "patch": "@@ -19,5 +19,5 @@ CC := $(CC:-g=)\n all:\n \t$(RUSTC) foo.rs -Z lto\n \tln -s $(call STATICLIB,foo-*) $(call STATICLIB,foo)\n-\t$(CC) bar.c -lfoo -o $(call RUN,bar) $(EXTRAFLAGS) -lstdc++\n+\t$(CC) bar.c -lfoo -o $(call RUN_BINFILE,bar) $(EXTRAFLAGS) -lstdc++\n \t$(call RUN,bar)"}, {"sha": "c522f30e2df13875396aff26f637be0af23df43c", "filename": "src/test/run-make/lto-syntax-extension/Makefile", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e1403e1d8337cc1636471f79da4536409e2a0c2b/src%2Ftest%2Frun-make%2Flto-syntax-extension%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/e1403e1d8337cc1636471f79da4536409e2a0c2b/src%2Ftest%2Frun-make%2Flto-syntax-extension%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Flto-syntax-extension%2FMakefile?ref=e1403e1d8337cc1636471f79da4536409e2a0c2b", "patch": "@@ -1,6 +1,18 @@\n -include ../tools.mk\n \n-all:\n+# This test attempts to use syntax extensions, which are known to be\n+# incompatible with stage1 at the moment.\n+\n+ifeq ($(RUST_BUILD_STAGE),1)\n+DOTEST=\n+else\n+DOTEST=dotest\n+endif\n+\n+all: $(DOTEST)\n+\n+dotest:\n+\tenv\n \t$(RUSTC) lib.rs\n \t$(RUSTC) main.rs -Z lto\n \t$(call RUN,main)"}, {"sha": "3f8b97f2566520a3c28d0e41b67e0e2d82151095", "filename": "src/test/run-make/missing-crate-dependency/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1403e1d8337cc1636471f79da4536409e2a0c2b/src%2Ftest%2Frun-make%2Fmissing-crate-dependency%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/e1403e1d8337cc1636471f79da4536409e2a0c2b/src%2Ftest%2Frun-make%2Fmissing-crate-dependency%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fmissing-crate-dependency%2FMakefile?ref=e1403e1d8337cc1636471f79da4536409e2a0c2b", "patch": "@@ -3,7 +3,7 @@\n all: \n \t$(RUSTC) --crate-type=rlib crateA.rs\n \t$(RUSTC) --crate-type=rlib crateB.rs\n-\trm $(TMPDIR)/$(call RLIB_GLOB,crateA)\n+\t$(call REMOVE_RLIBS,crateA)\n \t# Ensure crateC fails to compile since dependency crateA is missing\n \t$(RUSTC) crateC.rs 2>&1 | \\\n \t\tgrep \"error: can't find crate for \\`crateA\\` which \\`crateB\\` depends on\""}, {"sha": "babeeef164dd4c9ac824a1ff55a202606e6270ae", "filename": "src/test/run-make/mixing-libs/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1403e1d8337cc1636471f79da4536409e2a0c2b/src%2Ftest%2Frun-make%2Fmixing-libs%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/e1403e1d8337cc1636471f79da4536409e2a0c2b/src%2Ftest%2Frun-make%2Fmixing-libs%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fmixing-libs%2FMakefile?ref=e1403e1d8337cc1636471f79da4536409e2a0c2b", "patch": "@@ -5,5 +5,5 @@ all:\n \t$(RUSTC) dylib.rs\n \t$(RUSTC) rlib.rs --crate-type=dylib\n \t$(RUSTC) dylib.rs\n-\trm $(call DYLIB,rlib-*)\n+\t$(call REMOVE_DYLIBS,rlib)\n \t$(RUSTC) prog.rs && exit 1 || exit 0"}, {"sha": "903349152dfd2efef824e551cdf1050ef37adc8c", "filename": "src/test/run-make/obey-crate-type-flag/Makefile", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e1403e1d8337cc1636471f79da4536409e2a0c2b/src%2Ftest%2Frun-make%2Fobey-crate-type-flag%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/e1403e1d8337cc1636471f79da4536409e2a0c2b/src%2Ftest%2Frun-make%2Fobey-crate-type-flag%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fobey-crate-type-flag%2FMakefile?ref=e1403e1d8337cc1636471f79da4536409e2a0c2b", "patch": "@@ -7,7 +7,7 @@\n # fail if an rlib was built\n all:\n \t$(RUSTC) test.rs\n-\trm $(TMPDIR)/$(call RLIB_GLOB,test)\n-\trm $(TMPDIR)/$(call DYLIB_GLOB,test)\n+\t$(call REMOVE_RLIBS,test)\n+\t$(call REMOVE_DYLIBS,test)\n \t$(RUSTC) --crate-type dylib test.rs\n-\trm $(TMPDIR)/$(call RLIB_GLOB,test) && exit 1 || exit 0\n+\t$(call REMOVE_RLIBS,test) && exit 1 || exit 0"}, {"sha": "c163a5bec086f7a5e0dafa95b2fcdde4e8d82e45", "filename": "src/test/run-make/output-type-permutations/Makefile", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e1403e1d8337cc1636471f79da4536409e2a0c2b/src%2Ftest%2Frun-make%2Foutput-type-permutations%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/e1403e1d8337cc1636471f79da4536409e2a0c2b/src%2Ftest%2Frun-make%2Foutput-type-permutations%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Foutput-type-permutations%2FMakefile?ref=e1403e1d8337cc1636471f79da4536409e2a0c2b", "patch": "@@ -2,8 +2,8 @@\n \n all:\n \t$(RUSTC) foo.rs --crate-type=rlib,dylib,staticlib\n-\trm $(TMPDIR)/$(call RLIB_GLOB,bar)\n-\trm $(TMPDIR)/$(call DYLIB_GLOB,bar)\n+\t$(call REMOVE_RLIBS,bar)\n+\t$(call REMOVE_DYLIBS,bar)\n \trm $(TMPDIR)/$(call STATICLIB_GLOB,bar)\n \t$(RUSTC) foo.rs --crate-type=bin\n \trm $(TMPDIR)/$(call BIN,bar)\n@@ -41,4 +41,4 @@ all:\n \tcmp $(TMPDIR)/foo.bc $(TMPDIR)/bar.bc\n \trm $(TMPDIR)/bar.bc\n \trm $(TMPDIR)/foo.bc\n-\trm $(TMPDIR)/$(call RLIB_GLOB,bar)\n+\t$(call REMOVE_RLIBS,bar)"}, {"sha": "fe9bbb95095baee57f2375f7c74228336e743f44", "filename": "src/test/run-make/prefer-dylib/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1403e1d8337cc1636471f79da4536409e2a0c2b/src%2Ftest%2Frun-make%2Fprefer-dylib%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/e1403e1d8337cc1636471f79da4536409e2a0c2b/src%2Ftest%2Frun-make%2Fprefer-dylib%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fprefer-dylib%2FMakefile?ref=e1403e1d8337cc1636471f79da4536409e2a0c2b", "patch": "@@ -5,4 +5,4 @@ all:\n \t$(RUSTC) foo.rs -C prefer-dynamic\n \t$(call RUN,foo)\n \trm $(TMPDIR)/*bar*\n-\t$(call FAILS,foo)\n+\t$(call FAIL,foo)"}, {"sha": "dedd739052ca0f5fd7d0fb0a1ce32b10ac394c1c", "filename": "src/test/run-make/tools.mk", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e1403e1d8337cc1636471f79da4536409e2a0c2b/src%2Ftest%2Frun-make%2Ftools.mk", "raw_url": "https://github.com/rust-lang/rust/raw/e1403e1d8337cc1636471f79da4536409e2a0c2b/src%2Ftest%2Frun-make%2Ftools.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftools.mk?ref=e1403e1d8337cc1636471f79da4536409e2a0c2b", "patch": "@@ -4,8 +4,20 @@ export DYLD_LIBRARY_PATH:=$(TMPDIR):$(DYLD_LIBRARY_PATH)\n RUSTC := $(RUSTC) --out-dir $(TMPDIR) -L $(TMPDIR)\n CC := $(CC) -L $(TMPDIR)\n \n-RUN = $(TMPDIR)/$(1)\n-FAILS = $(TMPDIR)/$(1) && exit 1 || exit 0\n+# These deliberately use `=` and not `:=` so that client makefiles can\n+# augment HOST_RPATH_DIR / TARGET_RPATH_DIR.\n+HOST_RPATH_ENV = \\\n+    $(LD_LIB_PATH_ENVVAR)=$$$(LD_LIB_PATH_ENVVAR):$(HOST_RPATH_DIR)\n+TARGET_RPATH_ENV = \\\n+    $(LD_LIB_PATH_ENVVAR)=$$$(LD_LIB_PATH_ENVVAR):$(TARGET_RPATH_DIR)\n+\n+# This is the name of the binary we will generate and run; use this\n+# e.g. for `$(CC) -o $(RUN_BINFILE)`.\n+RUN_BINFILE = $(TMPDIR)/$(1)\n+\n+# RUN and FAIL are basic way we will invoke the generated binary.  On\n+# non-windows platforms, they set the LD_LIBRARY_PATH environment\n+# variable before running the binary.\n \n RLIB_GLOB = lib$(1)*.rlib\n STATICLIB = $(TMPDIR)/lib$(1).a\n@@ -18,20 +30,32 @@ IS_WINDOWS=1\n endif\n \n ifeq ($(UNAME),Darwin)\n+RUN = $(TARGET_RPATH_ENV) $(RUN_BINFILE)\n+FAIL = $(TARGET_RPATH_ENV) $(RUN_BINFILE) && exit 1 || exit 0\n DYLIB_GLOB = lib$(1)*.dylib\n DYLIB = $(TMPDIR)/lib$(1).dylib\n+RPATH_LINK_SEARCH =\n else\n ifdef IS_WINDOWS\n+RUN = PATH=\"$(PATH):$(TARGET_RPATH_DIR)\" $(RUN_BINFILE)\n+FAIL = PATH=\"$(PATH):$(TARGET_RPATH_DIR)\" $(RUN_BINFILE) && exit 1 || exit 0\n DYLIB_GLOB = $(1)*.dll\n DYLIB = $(TMPDIR)/$(1).dll\n BIN = $(1).exe\n-export PATH := $(PATH):$(LD_LIBRARY_PATH)\n+RPATH_LINK_SEARCH =\n+RUSTC := PATH=\"$(PATH):$(LD_LIBRARY_PATH)\" $(RUSTC)\n else\n+RUN = $(TARGET_RPATH_ENV) $(RUN_BINFILE)\n+FAIL = $(TARGET_RPATH_ENV) $(RUN_BINFILE) && exit 1 || exit 0\n DYLIB_GLOB = lib$(1)*.so\n DYLIB = $(TMPDIR)/lib$(1).so\n+RPATH_LINK_SEARCH = -Wl,-rpath-link=$(1)\n endif\n endif\n \n+REMOVE_DYLIBS     = rm $(TMPDIR)/$(call DYLIB_GLOB,$(1))\n+REMOVE_RLIBS      = rm $(TMPDIR)/$(call RLIB_GLOB,$(1))\n+\n %.a: %.o\n \tar crus $@ $<\n %.dylib: %.o"}, {"sha": "f834a85cdcc741c0cc496fa1d55bffd7a3f79974", "filename": "src/test/run-make/unicode-input/Makefile", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e1403e1d8337cc1636471f79da4536409e2a0c2b/src%2Ftest%2Frun-make%2Funicode-input%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/e1403e1d8337cc1636471f79da4536409e2a0c2b/src%2Ftest%2Frun-make%2Funicode-input%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Funicode-input%2FMakefile?ref=e1403e1d8337cc1636471f79da4536409e2a0c2b", "patch": "@@ -1,9 +1,21 @@\n -include ../tools.mk\n \n+# This test attempts to run rustc itself from the compiled binary; but\n+# that means that you need to set the LD_LIBRARY_PATH for rustc itself\n+# while running multiple_files, and that won't work for stage1.\n+\n # FIXME ignore windows\n ifndef IS_WINDOWS\n+ifeq ($(RUST_BUILD_STAGE),1)\n+DOTEST=\n+else\n+DOTEST=dotest\n+endif\n+endif\n+\n+all: $(DOTEST)\n \n-all:\n+dotest:\n \t# check that we don't ICE on unicode input, issue #11178\n \t$(RUSTC) multiple_files.rs\n \t$(call RUN,multiple_files)  \"$(RUSTC)\" \"$(TMPDIR)\"\n@@ -12,8 +24,3 @@ all:\n \t# correct length. issue #8706\n \t$(RUSTC) span_length.rs\n \t$(call RUN,span_length) \"$(RUSTC)\" \"$(TMPDIR)\"\n-\n-else\n-all:\n-\n-endif"}]}