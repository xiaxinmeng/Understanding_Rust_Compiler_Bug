{"sha": "978e7abeceed3c4d0d6c729c9e492890f478e8e1", "node_id": "C_kwDOAAsO6NoAKDk3OGU3YWJlY2VlZDNjNGQwZDZjNzI5YzllNDkyODkwZjQ3OGU4ZTE", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-11-11T15:21:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-11T15:21:38Z"}, "message": "Rollup merge of #100633 - estebank:must_use_async_fn_return, r=tmandry\n\nConsider `#[must_use]` annotation on `async fn` as also affecting the `Future::Output`\n\nNo longer lint against `#[must_use] async fn foo()`.\n\nWhen encountering a statement that awaits on a `Future`, check if the\n`Future`'s parent item is annotated with `#[must_use]` and emit a lint\nif so. This effectively makes `must_use` an annotation on the\n`Future::Output` instead of only the `Future` itself.\n\nFix #78149.", "tree": {"sha": "de39779098fb1c53124eee718c9698289882a9e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de39779098fb1c53124eee718c9698289882a9e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/978e7abeceed3c4d0d6c729c9e492890f478e8e1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjbmiCCRBK7hj4Ov3rIwAAvv4IAF2hHzbs/etLZ5NWhiPy/gnd\n+ylJJpkct/hkpdG7gxD0bxSvCzuaWLV4MNlVeK6JbL0iSh244Bg7DvuuuYux/lLi\njyEzDTZxm4a13zL/a/CHLo/ggkStsPkkmBEzbaLaKRTTgAbLEGKYZ5RtmKGq1xYP\nd/d33L+VzA5p1a5ZZ5RgW53VXJEsVoKDLpumuSHMslEs0g8mMtBsQPgFKEHP+hQT\nN88sr8nI/B2EFDelblcgFy1kGXqzGgo3OYR517ucx73abK6bKgeMdqIQadvfKwbj\nv7LQZGR6G+FNFp2Jr2eKNUY/cCP8DQhzgpA4T4VBkzIoOMJC3MFn/RYSta+qnhI=\n=61l2\n-----END PGP SIGNATURE-----\n", "payload": "tree de39779098fb1c53124eee718c9698289882a9e8\nparent b7b7f2716ee1655a696d3d64c3e12638d0dd19c0\nparent f57713b010775afd4061a7bd03c8be3c90465e15\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1668180098 +0530\ncommitter GitHub <noreply@github.com> 1668180098 +0530\n\nRollup merge of #100633 - estebank:must_use_async_fn_return, r=tmandry\n\nConsider `#[must_use]` annotation on `async fn` as also affecting the `Future::Output`\n\nNo longer lint against `#[must_use] async fn foo()`.\n\nWhen encountering a statement that awaits on a `Future`, check if the\n`Future`'s parent item is annotated with `#[must_use]` and emit a lint\nif so. This effectively makes `must_use` an annotation on the\n`Future::Output` instead of only the `Future` itself.\n\nFix #78149.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/978e7abeceed3c4d0d6c729c9e492890f478e8e1", "html_url": "https://github.com/rust-lang/rust/commit/978e7abeceed3c4d0d6c729c9e492890f478e8e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/978e7abeceed3c4d0d6c729c9e492890f478e8e1/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7b7f2716ee1655a696d3d64c3e12638d0dd19c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7b7f2716ee1655a696d3d64c3e12638d0dd19c0", "html_url": "https://github.com/rust-lang/rust/commit/b7b7f2716ee1655a696d3d64c3e12638d0dd19c0"}, {"sha": "f57713b010775afd4061a7bd03c8be3c90465e15", "url": "https://api.github.com/repos/rust-lang/rust/commits/f57713b010775afd4061a7bd03c8be3c90465e15", "html_url": "https://github.com/rust-lang/rust/commit/f57713b010775afd4061a7bd03c8be3c90465e15"}], "stats": {"total": 264, "additions": 159, "deletions": 105}, "files": [{"sha": "045d76cac62b8701af2e2b65aa7bcd2daf6d4353", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/978e7abeceed3c4d0d6c729c9e492890f478e8e1/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/978e7abeceed3c4d0d6c729c9e492890f478e8e1/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=978e7abeceed3c4d0d6c729c9e492890f478e8e1", "patch": "@@ -9,7 +9,7 @@ use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::DefId;\n use rustc_infer::traits::util::elaborate_predicates_with_span;\n use rustc_middle::ty::adjustment;\n-use rustc_middle::ty::{self, Ty};\n+use rustc_middle::ty::{self, DefIdTree, Ty};\n use rustc_span::symbol::Symbol;\n use rustc_span::symbol::{kw, sym};\n use rustc_span::{BytePos, Span};\n@@ -87,17 +87,33 @@ declare_lint_pass!(UnusedResults => [UNUSED_MUST_USE, UNUSED_RESULTS]);\n \n impl<'tcx> LateLintPass<'tcx> for UnusedResults {\n     fn check_stmt(&mut self, cx: &LateContext<'_>, s: &hir::Stmt<'_>) {\n-        let expr = match s.kind {\n-            hir::StmtKind::Semi(ref expr) => &**expr,\n-            _ => return,\n-        };\n+        let hir::StmtKind::Semi(expr) = s.kind else { return; };\n \n         if let hir::ExprKind::Ret(..) = expr.kind {\n             return;\n         }\n \n+        if let hir::ExprKind::Match(await_expr, _arms, hir::MatchSource::AwaitDesugar) = expr.kind\n+            && let ty = cx.typeck_results().expr_ty(&await_expr)\n+            && let ty::Opaque(future_def_id, _) = ty.kind()\n+            && cx.tcx.ty_is_opaque_future(ty)\n+            // FIXME: This also includes non-async fns that return `impl Future`.\n+            && let async_fn_def_id = cx.tcx.parent(*future_def_id)\n+            && check_must_use_def(\n+                cx,\n+                async_fn_def_id,\n+                expr.span,\n+                \"output of future returned by \",\n+                \"\",\n+            )\n+        {\n+            // We have a bare `foo().await;` on an opaque type from an async function that was\n+            // annotated with `#[must_use]`.\n+            return;\n+        }\n+\n         let ty = cx.typeck_results().expr_ty(&expr);\n-        let type_permits_lack_of_use = check_must_use_ty(cx, ty, &expr, s.span, \"\", \"\", 1);\n+        let type_permits_lack_of_use = check_must_use_ty(cx, ty, &expr, expr.span, \"\", \"\", 1);\n \n         let mut fn_warned = false;\n         let mut op_warned = false;\n@@ -119,7 +135,7 @@ impl<'tcx> LateLintPass<'tcx> for UnusedResults {\n             _ => None,\n         };\n         if let Some(def_id) = maybe_def_id {\n-            fn_warned = check_must_use_def(cx, def_id, s.span, \"return value of \", \"\");\n+            fn_warned = check_must_use_def(cx, def_id, expr.span, \"return value of \", \"\");\n         } else if type_permits_lack_of_use {\n             // We don't warn about unused unit or uninhabited types.\n             // (See https://github.com/rust-lang/rust/issues/43806 for details.)"}, {"sha": "e0da0096c4e1e181625f7c846671c0c3b4333ed4", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/978e7abeceed3c4d0d6c729c9e492890f478e8e1/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/978e7abeceed3c4d0d6c729c9e492890f478e8e1/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=978e7abeceed3c4d0d6c729c9e492890f478e8e1", "patch": "@@ -139,7 +139,7 @@ impl CheckAttrVisitor<'_> {\n                 sym::collapse_debuginfo => self.check_collapse_debuginfo(attr, span, target),\n                 sym::const_trait => self.check_const_trait(attr, span, target),\n                 sym::must_not_suspend => self.check_must_not_suspend(&attr, span, target),\n-                sym::must_use => self.check_must_use(hir_id, &attr, span, target),\n+                sym::must_use => self.check_must_use(hir_id, &attr, target),\n                 sym::rustc_pass_by_value => self.check_pass_by_value(&attr, span, target),\n                 sym::rustc_allow_incoherent_impl => {\n                     self.check_allow_incoherent_impl(&attr, span, target)\n@@ -1163,17 +1163,7 @@ impl CheckAttrVisitor<'_> {\n     }\n \n     /// Warns against some misuses of `#[must_use]`\n-    fn check_must_use(&self, hir_id: HirId, attr: &Attribute, span: Span, target: Target) -> bool {\n-        let node = self.tcx.hir().get(hir_id);\n-        if let Some(kind) = node.fn_kind() && let rustc_hir::IsAsync::Async = kind.asyncness() {\n-            self.tcx.emit_spanned_lint(\n-                UNUSED_ATTRIBUTES,\n-                hir_id,\n-                attr.span,\n-                errors::MustUseAsync { span }\n-            );\n-        }\n-\n+    fn check_must_use(&self, hir_id: HirId, attr: &Attribute, target: Target) -> bool {\n         if !matches!(\n             target,\n             Target::Fn"}, {"sha": "39ec71ba22a185214dfc679c2de5ff1c82e1aede", "filename": "src/test/ui/closures/2229_closure_analysis/match/issue-87097.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/978e7abeceed3c4d0d6c729c9e492890f478e8e1/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fissue-87097.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/978e7abeceed3c4d0d6c729c9e492890f478e8e1/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fissue-87097.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fissue-87097.stderr?ref=978e7abeceed3c4d0d6c729c9e492890f478e8e1", "patch": "@@ -16,7 +16,7 @@ LL | /     || match out_ref {\n LL | |         Variant::A => (),\n LL | |         Variant::B => (),\n LL | |     };\n-   | |______^\n+   | |_____^\n    |\n    = note: closures are lazy and do nothing unless called\n    = note: `#[warn(unused_must_use)]` on by default\n@@ -28,7 +28,7 @@ LL | /     || match here.field {\n LL | |         Variant::A => (),\n LL | |         Variant::B => (),\n LL | |     };\n-   | |______^\n+   | |_____^\n    |\n    = note: closures are lazy and do nothing unless called\n "}, {"sha": "fbfcd45652f19a091b178673f0ab5359ae58a3d4", "filename": "src/test/ui/conditional-compilation/cfg-attr-multi-true.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/978e7abeceed3c4d0d6c729c9e492890f478e8e1/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-true.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/978e7abeceed3c4d0d6c729c9e492890f478e8e1/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-true.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-true.stderr?ref=978e7abeceed3c4d0d6c729c9e492890f478e8e1", "patch": "@@ -28,7 +28,7 @@ warning: unused `MustUseDeprecated` that must be used\n   --> $DIR/cfg-attr-multi-true.rs:19:5\n    |\n LL |     MustUseDeprecated::new();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: the lint level is defined here\n   --> $DIR/cfg-attr-multi-true.rs:7:9"}, {"sha": "539343275df6021c64923f51493b339a2ed05135", "filename": "src/test/ui/generator/issue-52398.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/978e7abeceed3c4d0d6c729c9e492890f478e8e1/src%2Ftest%2Fui%2Fgenerator%2Fissue-52398.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/978e7abeceed3c4d0d6c729c9e492890f478e8e1/src%2Ftest%2Fui%2Fgenerator%2Fissue-52398.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-52398.stderr?ref=978e7abeceed3c4d0d6c729c9e492890f478e8e1", "patch": "@@ -4,7 +4,7 @@ warning: unused generator that must be used\n LL | /     move || {\n LL | |         A.test(yield);\n LL | |     };\n-   | |______^\n+   | |_____^\n    |\n    = note: generators are lazy and do nothing unless resumed\n    = note: `#[warn(unused_must_use)]` on by default\n@@ -16,7 +16,7 @@ LL | /     static move || {\n LL | |         yield *y.borrow();\n LL | |         return \"Done\";\n LL | |     };\n-   | |______^\n+   | |_____^\n    |\n    = note: generators are lazy and do nothing unless resumed\n "}, {"sha": "8f1fc5e803194d15774a89812e6e1f0582b2dace", "filename": "src/test/ui/generator/issue-57084.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/978e7abeceed3c4d0d6c729c9e492890f478e8e1/src%2Ftest%2Fui%2Fgenerator%2Fissue-57084.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/978e7abeceed3c4d0d6c729c9e492890f478e8e1/src%2Ftest%2Fui%2Fgenerator%2Fissue-57084.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-57084.stderr?ref=978e7abeceed3c4d0d6c729c9e492890f478e8e1", "patch": "@@ -7,7 +7,7 @@ LL | |         loop {\n LL | |             yield\n LL | |         }\n LL | |     };\n-   | |______^\n+   | |_____^\n    |\n    = note: generators are lazy and do nothing unless resumed\n    = note: `#[warn(unused_must_use)]` on by default"}, {"sha": "3dd2d595445aa39fd7a4a5854acda265af6b3f9d", "filename": "src/test/ui/generator/match-bindings.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/978e7abeceed3c4d0d6c729c9e492890f478e8e1/src%2Ftest%2Fui%2Fgenerator%2Fmatch-bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/978e7abeceed3c4d0d6c729c9e492890f478e8e1/src%2Ftest%2Fui%2Fgenerator%2Fmatch-bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fmatch-bindings.stderr?ref=978e7abeceed3c4d0d6c729c9e492890f478e8e1", "patch": "@@ -8,7 +8,7 @@ LL | |                 match Enum::A(String::new()) {\n ...  |\n LL | |         }\n LL | |     };\n-   | |______^\n+   | |_____^\n    |\n    = note: generators are lazy and do nothing unless resumed\n    = note: `#[warn(unused_must_use)]` on by default"}, {"sha": "2e1fec35eaf52a29e798bda28b70c8697d2809cd", "filename": "src/test/ui/generator/reborrow-mut-upvar.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/978e7abeceed3c4d0d6c729c9e492890f478e8e1/src%2Ftest%2Fui%2Fgenerator%2Freborrow-mut-upvar.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/978e7abeceed3c4d0d6c729c9e492890f478e8e1/src%2Ftest%2Fui%2Fgenerator%2Freborrow-mut-upvar.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Freborrow-mut-upvar.stderr?ref=978e7abeceed3c4d0d6c729c9e492890f478e8e1", "patch": "@@ -8,7 +8,7 @@ LL | |             yield;\n ...  |\n LL | |         *bar = 2;\n LL | |     };\n-   | |______^\n+   | |_____^\n    |\n    = note: generators are lazy and do nothing unless resumed\n    = note: `#[warn(unused_must_use)]` on by default"}, {"sha": "e262f213f63d2314d8dcb79f313395614d98d940", "filename": "src/test/ui/generator/too-live-local-in-immovable-gen.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/978e7abeceed3c4d0d6c729c9e492890f478e8e1/src%2Ftest%2Fui%2Fgenerator%2Ftoo-live-local-in-immovable-gen.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/978e7abeceed3c4d0d6c729c9e492890f478e8e1/src%2Ftest%2Fui%2Fgenerator%2Ftoo-live-local-in-immovable-gen.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Ftoo-live-local-in-immovable-gen.stderr?ref=978e7abeceed3c4d0d6c729c9e492890f478e8e1", "patch": "@@ -8,7 +8,7 @@ LL | |             // and it should also find out that `a` is not live.\n ...  |\n LL | |             let _ = &a;\n LL | |         };\n-   | |__________^\n+   | |_________^\n    |\n    = note: generators are lazy and do nothing unless resumed\n    = note: `#[warn(unused_must_use)]` on by default"}, {"sha": "a87248f66210039f3b1d92257e5f672a5e1fa81b", "filename": "src/test/ui/generator/yield-in-args-rev.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/978e7abeceed3c4d0d6c729c9e492890f478e8e1/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-args-rev.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/978e7abeceed3c4d0d6c729c9e492890f478e8e1/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-args-rev.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-args-rev.stderr?ref=978e7abeceed3c4d0d6c729c9e492890f478e8e1", "patch": "@@ -5,7 +5,7 @@ LL | /     || {\n LL | |         let b = true;\n LL | |         foo(yield, &b);\n LL | |     };\n-   | |______^\n+   | |_____^\n    |\n    = note: generators are lazy and do nothing unless resumed\n    = note: `#[warn(unused_must_use)]` on by default"}, {"sha": "9d03ee00800c8f489b7b4ca96952df1d847a7577", "filename": "src/test/ui/generator/yield-in-box.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/978e7abeceed3c4d0d6c729c9e492890f478e8e1/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/978e7abeceed3c4d0d6c729c9e492890f478e8e1/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-box.stderr?ref=978e7abeceed3c4d0d6c729c9e492890f478e8e1", "patch": "@@ -8,7 +8,7 @@ LL | |             let _t = box (&x, yield 0, &y);\n ...  |\n LL | |         }\n LL | |     };\n-   | |______^\n+   | |_____^\n    |\n    = note: generators are lazy and do nothing unless resumed\n    = note: `#[warn(unused_must_use)]` on by default"}, {"sha": "ed14a2e3273af7dde00d731f6148263a19cf9d15", "filename": "src/test/ui/generator/yield-in-initializer.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/978e7abeceed3c4d0d6c729c9e492890f478e8e1/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-initializer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/978e7abeceed3c4d0d6c729c9e492890f478e8e1/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-initializer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-initializer.stderr?ref=978e7abeceed3c4d0d6c729c9e492890f478e8e1", "patch": "@@ -8,7 +8,7 @@ LL | |             // See https://github.com/rust-lang/rust/issues/52792\n ...  |\n LL | |         }\n LL | |     };\n-   | |______^\n+   | |_____^\n    |\n    = note: generators are lazy and do nothing unless resumed\n    = note: `#[warn(unused_must_use)]` on by default"}, {"sha": "97862e91cd4a0409222621933663630df6b811bc", "filename": "src/test/ui/generator/yield-subtype.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/978e7abeceed3c4d0d6c729c9e492890f478e8e1/src%2Ftest%2Fui%2Fgenerator%2Fyield-subtype.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/978e7abeceed3c4d0d6c729c9e492890f478e8e1/src%2Ftest%2Fui%2Fgenerator%2Fyield-subtype.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-subtype.stderr?ref=978e7abeceed3c4d0d6c729c9e492890f478e8e1", "patch": "@@ -5,7 +5,7 @@ LL | /     || {\n LL | |         yield a;\n LL | |         yield b;\n LL | |     };\n-   | |______^\n+   | |_____^\n    |\n    = note: generators are lazy and do nothing unless resumed\n    = note: `#[warn(unused_must_use)]` on by default"}, {"sha": "eb7661fad56db57b7c2bd7cad4053a005f8d6e09", "filename": "src/test/ui/issues/issue-1460.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/978e7abeceed3c4d0d6c729c9e492890f478e8e1/src%2Ftest%2Fui%2Fissues%2Fissue-1460.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/978e7abeceed3c4d0d6c729c9e492890f478e8e1/src%2Ftest%2Fui%2Fissues%2Fissue-1460.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-1460.stderr?ref=978e7abeceed3c4d0d6c729c9e492890f478e8e1", "patch": "@@ -2,7 +2,7 @@ warning: unused closure that must be used\n   --> $DIR/issue-1460.rs:6:5\n    |\n LL |     {|i: u32| if 1 == i { }};\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: closures are lazy and do nothing unless called\n    = note: `#[warn(unused_must_use)]` on by default"}, {"sha": "d920530b57c6940efc1e22d617f0cbc902355ac9", "filename": "src/test/ui/issues/issue-16256.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/978e7abeceed3c4d0d6c729c9e492890f478e8e1/src%2Ftest%2Fui%2Fissues%2Fissue-16256.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/978e7abeceed3c4d0d6c729c9e492890f478e8e1/src%2Ftest%2Fui%2Fissues%2Fissue-16256.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16256.stderr?ref=978e7abeceed3c4d0d6c729c9e492890f478e8e1", "patch": "@@ -2,7 +2,7 @@ warning: unused closure that must be used\n   --> $DIR/issue-16256.rs:6:5\n    |\n LL |     |c: u8| buf.push(c);\n-   |     ^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^\n    |\n    = note: closures are lazy and do nothing unless called\n    = note: `#[warn(unused_must_use)]` on by default"}, {"sha": "657f23c60856fa04d3d4613da7bc2685b47ae671", "filename": "src/test/ui/lint/fn_must_use.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/978e7abeceed3c4d0d6c729c9e492890f478e8e1/src%2Ftest%2Fui%2Flint%2Ffn_must_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/978e7abeceed3c4d0d6c729c9e492890f478e8e1/src%2Ftest%2Fui%2Flint%2Ffn_must_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Ffn_must_use.stderr?ref=978e7abeceed3c4d0d6c729c9e492890f478e8e1", "patch": "@@ -2,7 +2,7 @@ warning: unused return value of `need_to_use_this_value` that must be used\n   --> $DIR/fn_must_use.rs:55:5\n    |\n LL |     need_to_use_this_value();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: it's important\n note: the lint level is defined here\n@@ -15,33 +15,33 @@ warning: unused return value of `MyStruct::need_to_use_this_method_value` that m\n   --> $DIR/fn_must_use.rs:60:5\n    |\n LL |     m.need_to_use_this_method_value();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused return value of `EvenNature::is_even` that must be used\n   --> $DIR/fn_must_use.rs:61:5\n    |\n LL |     m.is_even(); // trait method!\n-   |     ^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^\n    |\n    = note: no side effects\n \n warning: unused return value of `MyStruct::need_to_use_this_associated_function_value` that must be used\n   --> $DIR/fn_must_use.rs:64:5\n    |\n LL |     MyStruct::need_to_use_this_associated_function_value();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused return value of `std::cmp::PartialEq::eq` that must be used\n   --> $DIR/fn_must_use.rs:70:5\n    |\n LL |     2.eq(&3);\n-   |     ^^^^^^^^^\n+   |     ^^^^^^^^\n \n warning: unused return value of `std::cmp::PartialEq::eq` that must be used\n   --> $DIR/fn_must_use.rs:71:5\n    |\n LL |     m.eq(&n);\n-   |     ^^^^^^^^^\n+   |     ^^^^^^^^\n \n warning: unused comparison that must be used\n   --> $DIR/fn_must_use.rs:74:5"}, {"sha": "72118275774d14b4d82747c4cb03297c3e89d54c", "filename": "src/test/ui/lint/unused/must-use-box-from-raw.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/978e7abeceed3c4d0d6c729c9e492890f478e8e1/src%2Ftest%2Fui%2Flint%2Funused%2Fmust-use-box-from-raw.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/978e7abeceed3c4d0d6c729c9e492890f478e8e1/src%2Ftest%2Fui%2Flint%2Funused%2Fmust-use-box-from-raw.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Fmust-use-box-from-raw.stderr?ref=978e7abeceed3c4d0d6c729c9e492890f478e8e1", "patch": "@@ -2,7 +2,7 @@ warning: unused return value of `Box::<T>::from_raw` that must be used\n   --> $DIR/must-use-box-from-raw.rs:8:5\n    |\n LL |     Box::from_raw(ptr);\n-   |     ^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^\n    |\n    = note: call `drop(from_raw(ptr))` if you intend to drop the `Box`\n note: the lint level is defined here"}, {"sha": "bba2b1ba078c694191d9734e10e2474e45de022c", "filename": "src/test/ui/lint/unused/must_use-array.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/978e7abeceed3c4d0d6c729c9e492890f478e8e1/src%2Ftest%2Fui%2Flint%2Funused%2Fmust_use-array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/978e7abeceed3c4d0d6c729c9e492890f478e8e1/src%2Ftest%2Fui%2Flint%2Funused%2Fmust_use-array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Fmust_use-array.stderr?ref=978e7abeceed3c4d0d6c729c9e492890f478e8e1", "patch": "@@ -2,7 +2,7 @@ error: unused array of `S` that must be used\n   --> $DIR/must_use-array.rs:39:5\n    |\n LL |     singleton();\n-   |     ^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^\n    |\n note: the lint level is defined here\n   --> $DIR/must_use-array.rs:1:9\n@@ -14,7 +14,7 @@ error: unused array of `S` that must be used\n   --> $DIR/must_use-array.rs:40:5\n    |\n LL |     many();\n-   |     ^^^^^^^\n+   |     ^^^^^^\n \n error: unused array of `S` in tuple element 0 that must be used\n   --> $DIR/must_use-array.rs:41:6\n@@ -26,7 +26,7 @@ error: unused array of implementers of `T` that must be used\n   --> $DIR/must_use-array.rs:42:5\n    |\n LL |     array_of_impl_trait();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n \n error: unused array of boxed `T` trait objects in tuple element 1 that must be used\n   --> $DIR/must_use-array.rs:43:5\n@@ -38,7 +38,7 @@ error: unused array of arrays of arrays of `S` that must be used\n   --> $DIR/must_use-array.rs:45:5\n    |\n LL |     array_of_arrays_of_arrays();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 6 previous errors\n "}, {"sha": "ef738708d5f4e56e1f54e85c57e979d6ff685e14", "filename": "src/test/ui/lint/unused/must_use-in-stdlib-traits.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/978e7abeceed3c4d0d6c729c9e492890f478e8e1/src%2Ftest%2Fui%2Flint%2Funused%2Fmust_use-in-stdlib-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/978e7abeceed3c4d0d6c729c9e492890f478e8e1/src%2Ftest%2Fui%2Flint%2Funused%2Fmust_use-in-stdlib-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Fmust_use-in-stdlib-traits.stderr?ref=978e7abeceed3c4d0d6c729c9e492890f478e8e1", "patch": "@@ -2,7 +2,7 @@ error: unused implementer of `Iterator` that must be used\n   --> $DIR/must_use-in-stdlib-traits.rs:42:4\n    |\n LL |    iterator();\n-   |    ^^^^^^^^^^^\n+   |    ^^^^^^^^^^\n    |\n    = note: iterators are lazy and do nothing unless consumed\n note: the lint level is defined here\n@@ -15,31 +15,31 @@ error: unused implementer of `Future` that must be used\n   --> $DIR/must_use-in-stdlib-traits.rs:43:4\n    |\n LL |    future();\n-   |    ^^^^^^^^^\n+   |    ^^^^^^^^\n    |\n    = note: futures do nothing unless you `.await` or poll them\n \n error: unused implementer of `FnOnce` that must be used\n   --> $DIR/must_use-in-stdlib-traits.rs:44:4\n    |\n LL |    square_fn_once();\n-   |    ^^^^^^^^^^^^^^^^^\n+   |    ^^^^^^^^^^^^^^^^\n    |\n    = note: closures are lazy and do nothing unless called\n \n error: unused implementer of `FnMut` that must be used\n   --> $DIR/must_use-in-stdlib-traits.rs:45:4\n    |\n LL |    square_fn_mut();\n-   |    ^^^^^^^^^^^^^^^^\n+   |    ^^^^^^^^^^^^^^^\n    |\n    = note: closures are lazy and do nothing unless called\n \n error: unused implementer of `Fn` that must be used\n   --> $DIR/must_use-in-stdlib-traits.rs:46:4\n    |\n LL |    square_fn();\n-   |    ^^^^^^^^^^^^\n+   |    ^^^^^^^^^^^\n    |\n    = note: closures are lazy and do nothing unless called\n "}, {"sha": "2f54964848359a9d5e5327533fc0dee558420ed5", "filename": "src/test/ui/lint/unused/must_use-trait.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/978e7abeceed3c4d0d6c729c9e492890f478e8e1/src%2Ftest%2Fui%2Flint%2Funused%2Fmust_use-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/978e7abeceed3c4d0d6c729c9e492890f478e8e1/src%2Ftest%2Fui%2Flint%2Funused%2Fmust_use-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Fmust_use-trait.stderr?ref=978e7abeceed3c4d0d6c729c9e492890f478e8e1", "patch": "@@ -2,7 +2,7 @@ error: unused implementer of `Critical` that must be used\n   --> $DIR/must_use-trait.rs:33:5\n    |\n LL |     get_critical();\n-   |     ^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^\n    |\n note: the lint level is defined here\n   --> $DIR/must_use-trait.rs:1:9\n@@ -14,13 +14,13 @@ error: unused boxed `Critical` trait object that must be used\n   --> $DIR/must_use-trait.rs:34:5\n    |\n LL |     get_boxed_critical();\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^\n \n error: unused boxed boxed `Critical` trait object that must be used\n   --> $DIR/must_use-trait.rs:35:5\n    |\n LL |     get_nested_boxed_critical();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: unused boxed `Critical` trait object in tuple element 1 that must be used\n   --> $DIR/must_use-trait.rs:37:5"}, {"sha": "9fcbc5074ea800ae4d1209e430afb2fe772dc1f5", "filename": "src/test/ui/lint/unused/must_use-unit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/978e7abeceed3c4d0d6c729c9e492890f478e8e1/src%2Ftest%2Fui%2Flint%2Funused%2Fmust_use-unit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/978e7abeceed3c4d0d6c729c9e492890f478e8e1/src%2Ftest%2Fui%2Flint%2Funused%2Fmust_use-unit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Fmust_use-unit.stderr?ref=978e7abeceed3c4d0d6c729c9e492890f478e8e1", "patch": "@@ -2,7 +2,7 @@ error: unused return value of `foo` that must be used\n   --> $DIR/must_use-unit.rs:13:5\n    |\n LL |     foo();\n-   |     ^^^^^^\n+   |     ^^^^^\n    |\n note: the lint level is defined here\n   --> $DIR/must_use-unit.rs:2:9\n@@ -14,7 +14,7 @@ error: unused return value of `bar` that must be used\n   --> $DIR/must_use-unit.rs:15:5\n    |\n LL |     bar();\n-   |     ^^^^^^\n+   |     ^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "4be93aa155ad9097f0e35326ae0b2dd013caae87", "filename": "src/test/ui/lint/unused/unused-async.rs", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/978e7abeceed3c4d0d6c729c9e492890f478e8e1/src%2Ftest%2Fui%2Flint%2Funused%2Funused-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/978e7abeceed3c4d0d6c729c9e492890f478e8e1/src%2Ftest%2Fui%2Flint%2Funused%2Funused-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Funused-async.rs?ref=978e7abeceed3c4d0d6c729c9e492890f478e8e1", "patch": "@@ -1,24 +1,43 @@\n // edition:2018\n-// run-pass\n-#![allow(dead_code)]\n+#![deny(unused_must_use)]\n+\n \n #[must_use]\n-//~^ WARNING `must_use`\n-async fn test() -> i32 {\n+async fn foo() -> i32 {\n     1\n }\n \n+#[must_use]\n+fn bar() -> impl std::future::Future<Output=i32> {\n+    async {\n+        42\n+    }\n+}\n+\n+async fn baz() -> i32 {\n+    0\n+}\n \n struct Wowee {}\n \n impl Wowee {\n     #[must_use]\n-    //~^ WARNING `must_use`\n     async fn test_method() -> i32 {\n         1\n     }\n }\n \n+async fn test() {\n+    foo(); //~ ERROR unused return value of `foo` that must be used\n+    //~^ ERROR unused implementer of `Future` that must be used\n+    foo().await; //~ ERROR unused output of future returned by `foo` that must be used\n+    bar(); //~ ERROR unused return value of `bar` that must be used\n+    //~^ ERROR unused implementer of `Future` that must be used\n+    bar().await; //~ ERROR unused output of future returned by `bar` that must be used\n+    baz(); //~ ERROR unused implementer of `Future` that must be used\n+    baz().await; // ok\n+}\n+\n /* FIXME(guswynn) update this test when async-fn-in-traits works\n trait Doer {\n     #[must_use]"}, {"sha": "4bcb26dc16586a38f3898fa8df4032af493b0271", "filename": "src/test/ui/lint/unused/unused-async.stderr", "status": "modified", "additions": 54, "deletions": 25, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/978e7abeceed3c4d0d6c729c9e492890f478e8e1/src%2Ftest%2Fui%2Flint%2Funused%2Funused-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/978e7abeceed3c4d0d6c729c9e492890f478e8e1/src%2Ftest%2Fui%2Flint%2Funused%2Funused-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Funused-async.stderr?ref=978e7abeceed3c4d0d6c729c9e492890f478e8e1", "patch": "@@ -1,26 +1,55 @@\n-warning: `must_use` attribute on `async` functions applies to the anonymous `Future` returned by the function, not the value within\n-  --> $DIR/unused-async.rs:5:1\n-   |\n-LL |   #[must_use]\n-   |   ^^^^^^^^^^^\n-LL |\n-LL | / async fn test() -> i32 {\n-LL | |     1\n-LL | | }\n-   | |_- this attribute does nothing, the `Future`s returned by async functions are already `must_use`\n-   |\n-   = note: `#[warn(unused_attributes)]` on by default\n-\n-warning: `must_use` attribute on `async` functions applies to the anonymous `Future` returned by the function, not the value within\n-  --> $DIR/unused-async.rs:15:5\n-   |\n-LL |       #[must_use]\n-   |       ^^^^^^^^^^^\n-LL |\n-LL | /     async fn test_method() -> i32 {\n-LL | |         1\n-LL | |     }\n-   | |_____- this attribute does nothing, the `Future`s returned by async functions are already `must_use`\n-\n-warning: 2 warnings emitted\n+error: unused implementer of `Future` that must be used\n+  --> $DIR/unused-async.rs:31:5\n+   |\n+LL |     foo();\n+   |     ^^^^^\n+   |\n+   = note: futures do nothing unless you `.await` or poll them\n+note: the lint level is defined here\n+  --> $DIR/unused-async.rs:2:9\n+   |\n+LL | #![deny(unused_must_use)]\n+   |         ^^^^^^^^^^^^^^^\n+\n+error: unused return value of `foo` that must be used\n+  --> $DIR/unused-async.rs:31:5\n+   |\n+LL |     foo();\n+   |     ^^^^^\n+\n+error: unused output of future returned by `foo` that must be used\n+  --> $DIR/unused-async.rs:33:5\n+   |\n+LL |     foo().await;\n+   |     ^^^^^^^^^^^\n+\n+error: unused implementer of `Future` that must be used\n+  --> $DIR/unused-async.rs:34:5\n+   |\n+LL |     bar();\n+   |     ^^^^^\n+   |\n+   = note: futures do nothing unless you `.await` or poll them\n+\n+error: unused return value of `bar` that must be used\n+  --> $DIR/unused-async.rs:34:5\n+   |\n+LL |     bar();\n+   |     ^^^^^\n+\n+error: unused output of future returned by `bar` that must be used\n+  --> $DIR/unused-async.rs:36:5\n+   |\n+LL |     bar().await;\n+   |     ^^^^^^^^^^^\n+\n+error: unused implementer of `Future` that must be used\n+  --> $DIR/unused-async.rs:37:5\n+   |\n+LL |     baz();\n+   |     ^^^^^\n+   |\n+   = note: futures do nothing unless you `.await` or poll them\n+\n+error: aborting due to 7 previous errors\n "}, {"sha": "c3a82402e0a2e516fcce7811186e438a16b58104", "filename": "src/test/ui/lint/unused/unused-closure.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/978e7abeceed3c4d0d6c729c9e492890f478e8e1/src%2Ftest%2Fui%2Flint%2Funused%2Funused-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/978e7abeceed3c4d0d6c729c9e492890f478e8e1/src%2Ftest%2Fui%2Flint%2Funused%2Funused-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Funused-closure.stderr?ref=978e7abeceed3c4d0d6c729c9e492890f478e8e1", "patch": "@@ -4,7 +4,7 @@ error: unused closure that must be used\n LL | /     || {\n LL | |         println!(\"Hello!\");\n LL | |     };\n-   | |______^\n+   | |_____^\n    |\n    = note: closures are lazy and do nothing unless called\n note: the lint level is defined here\n@@ -17,47 +17,47 @@ error: unused implementer of `Future` that must be used\n   --> $DIR/unused-closure.rs:13:5\n    |\n LL |     async {};\n-   |     ^^^^^^^^^\n+   |     ^^^^^^^^\n    |\n    = note: futures do nothing unless you `.await` or poll them\n \n error: unused closure that must be used\n   --> $DIR/unused-closure.rs:14:5\n    |\n LL |     || async {};\n-   |     ^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^\n    |\n    = note: closures are lazy and do nothing unless called\n \n error: unused closure that must be used\n   --> $DIR/unused-closure.rs:15:5\n    |\n LL |     async || {};\n-   |     ^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^\n    |\n    = note: closures are lazy and do nothing unless called\n \n error: unused array of boxed arrays of closures that must be used\n   --> $DIR/unused-closure.rs:18:5\n    |\n LL |     [Box::new([|| {}; 10]); 1];\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: closures are lazy and do nothing unless called\n \n error: unused closure that must be used\n   --> $DIR/unused-closure.rs:20:5\n    |\n LL |     vec![|| \"a\"].pop().unwrap();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: closures are lazy and do nothing unless called\n \n error: unused closure that must be used\n   --> $DIR/unused-closure.rs:23:9\n    |\n LL |         || true;\n-   |         ^^^^^^^^\n+   |         ^^^^^^^\n    |\n    = note: closures are lazy and do nothing unless called\n "}, {"sha": "4e1ba1fd9595fd5bdb37fe40edae1005ee2fb7ea", "filename": "src/test/ui/lint/unused/unused-result.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/978e7abeceed3c4d0d6c729c9e492890f478e8e1/src%2Ftest%2Fui%2Flint%2Funused%2Funused-result.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/978e7abeceed3c4d0d6c729c9e492890f478e8e1/src%2Ftest%2Fui%2Flint%2Funused%2Funused-result.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Funused-result.stderr?ref=978e7abeceed3c4d0d6c729c9e492890f478e8e1", "patch": "@@ -2,7 +2,7 @@ error: unused `MustUse` that must be used\n   --> $DIR/unused-result.rs:21:5\n    |\n LL |     foo::<MustUse>();\n-   |     ^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^\n    |\n note: the lint level is defined here\n   --> $DIR/unused-result.rs:2:25\n@@ -14,7 +14,7 @@ error: unused `MustUseMsg` that must be used\n   --> $DIR/unused-result.rs:22:5\n    |\n LL |     foo::<MustUseMsg>();\n-   |     ^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^\n    |\n    = note: some message\n \n@@ -34,13 +34,13 @@ error: unused `MustUse` that must be used\n   --> $DIR/unused-result.rs:35:5\n    |\n LL |     foo::<MustUse>();\n-   |     ^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^\n \n error: unused `MustUseMsg` that must be used\n   --> $DIR/unused-result.rs:36:5\n    |\n LL |     foo::<MustUseMsg>();\n-   |     ^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^\n    |\n    = note: some message\n "}, {"sha": "cb45add9c2b1ba13886f43ecdbe3c790f8fc6df5", "filename": "src/test/ui/lint/unused/unused-supertrait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/978e7abeceed3c4d0d6c729c9e492890f478e8e1/src%2Ftest%2Fui%2Flint%2Funused%2Funused-supertrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/978e7abeceed3c4d0d6c729c9e492890f478e8e1/src%2Ftest%2Fui%2Flint%2Funused%2Funused-supertrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Funused-supertrait.stderr?ref=978e7abeceed3c4d0d6c729c9e492890f478e8e1", "patch": "@@ -2,7 +2,7 @@ error: unused implementer of `Iterator` that must be used\n   --> $DIR/unused-supertrait.rs:9:5\n    |\n LL |     it();\n-   |     ^^^^^\n+   |     ^^^^\n    |\n    = note: iterators are lazy and do nothing unless consumed\n note: the lint level is defined here"}, {"sha": "0f699429e02437fd2c0dbf4cc2be76bb59bf2699", "filename": "src/test/ui/lint/unused/unused_attributes-must_use.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/978e7abeceed3c4d0d6c729c9e492890f478e8e1/src%2Ftest%2Fui%2Flint%2Funused%2Funused_attributes-must_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/978e7abeceed3c4d0d6c729c9e492890f478e8e1/src%2Ftest%2Fui%2Flint%2Funused%2Funused_attributes-must_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Funused_attributes-must_use.stderr?ref=978e7abeceed3c4d0d6c729c9e492890f478e8e1", "patch": "@@ -139,7 +139,7 @@ error: unused `X` that must be used\n   --> $DIR/unused_attributes-must_use.rs:103:5\n    |\n LL |     X;\n-   |     ^^\n+   |     ^\n    |\n note: the lint level is defined here\n   --> $DIR/unused_attributes-must_use.rs:2:28\n@@ -151,37 +151,37 @@ error: unused `Y` that must be used\n   --> $DIR/unused_attributes-must_use.rs:104:5\n    |\n LL |     Y::Z;\n-   |     ^^^^^\n+   |     ^^^^\n \n error: unused `U` that must be used\n   --> $DIR/unused_attributes-must_use.rs:105:5\n    |\n LL |     U { unit: () };\n-   |     ^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^\n \n error: unused return value of `U::method` that must be used\n   --> $DIR/unused_attributes-must_use.rs:106:5\n    |\n LL |     U::method();\n-   |     ^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^\n \n error: unused return value of `foo` that must be used\n   --> $DIR/unused_attributes-must_use.rs:107:5\n    |\n LL |     foo();\n-   |     ^^^^^^\n+   |     ^^^^^\n \n error: unused return value of `foreign_foo` that must be used\n   --> $DIR/unused_attributes-must_use.rs:110:9\n    |\n LL |         foreign_foo();\n-   |         ^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^\n \n error: unused return value of `Use::get_four` that must be used\n   --> $DIR/unused_attributes-must_use.rs:118:5\n    |\n LL |     ().get_four();\n-   |     ^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^\n \n error: aborting due to 28 previous errors\n "}, {"sha": "bfdfca2100406ccd6c76a4b30f8377f1f676bb5c", "filename": "src/test/ui/nll/issue-48623-generator.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/978e7abeceed3c4d0d6c729c9e492890f478e8e1/src%2Ftest%2Fui%2Fnll%2Fissue-48623-generator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/978e7abeceed3c4d0d6c729c9e492890f478e8e1/src%2Ftest%2Fui%2Fnll%2Fissue-48623-generator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-48623-generator.stderr?ref=978e7abeceed3c4d0d6c729c9e492890f478e8e1", "patch": "@@ -2,7 +2,7 @@ warning: unused generator that must be used\n   --> $DIR/issue-48623-generator.rs:15:5\n    |\n LL |     move || { d; yield; &mut *r };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: generators are lazy and do nothing unless resumed\n    = note: `#[warn(unused_must_use)]` on by default"}]}