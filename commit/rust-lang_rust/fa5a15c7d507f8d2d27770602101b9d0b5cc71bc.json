{"sha": "fa5a15c7d507f8d2d27770602101b9d0b5cc71bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhNWExNWM3ZDUwN2Y4ZDJkMjc3NzA2MDIxMDFiOWQwYjVjYzcxYmM=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-03-14T14:53:00Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-03-23T12:14:38Z"}, "message": "Document most methods on `ty::Const`", "tree": {"sha": "797ba892b7f8c456e674994e6700a402887bb1b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/797ba892b7f8c456e674994e6700a402887bb1b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa5a15c7d507f8d2d27770602101b9d0b5cc71bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa5a15c7d507f8d2d27770602101b9d0b5cc71bc", "html_url": "https://github.com/rust-lang/rust/commit/fa5a15c7d507f8d2d27770602101b9d0b5cc71bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa5a15c7d507f8d2d27770602101b9d0b5cc71bc/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "799b15ed96942aec81aecab4b2ae2f9243b632fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/799b15ed96942aec81aecab4b2ae2f9243b632fa", "html_url": "https://github.com/rust-lang/rust/commit/799b15ed96942aec81aecab4b2ae2f9243b632fa"}], "stats": {"total": 15, "additions": 15, "deletions": 0}, "files": [{"sha": "7200ebef9405f31f8ab9db4a3109c1ac8dd475ca", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fa5a15c7d507f8d2d27770602101b9d0b5cc71bc/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa5a15c7d507f8d2d27770602101b9d0b5cc71bc/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=fa5a15c7d507f8d2d27770602101b9d0b5cc71bc", "patch": "@@ -2422,6 +2422,8 @@ fn const_param_def_id(expr: &hir::Expr<'_>) -> Option<DefId> {\n }\n \n impl<'tcx> Const<'tcx> {\n+    /// Literals and const generic parameters are eagerly converted to a constant, everything else\n+    /// becomes `Unevaluated`.\n     pub fn from_hir_anon_const(\n         tcx: TyCtxt<'tcx>,\n         ast_const: &hir::AnonConst,\n@@ -2471,16 +2473,19 @@ impl<'tcx> Const<'tcx> {\n     }\n \n     #[inline]\n+    /// Interns the given value as a constant.\n     pub fn from_value(tcx: TyCtxt<'tcx>, val: ConstValue<'tcx>, ty: Ty<'tcx>) -> &'tcx Self {\n         tcx.mk_const(Self { val: ConstKind::Value(val), ty })\n     }\n \n     #[inline]\n+    /// Interns the given scalar as a constant.\n     pub fn from_scalar(tcx: TyCtxt<'tcx>, val: Scalar, ty: Ty<'tcx>) -> &'tcx Self {\n         Self::from_value(tcx, ConstValue::Scalar(val), ty)\n     }\n \n     #[inline]\n+    /// Creates a constant with the given integer value and interns it.\n     pub fn from_bits(tcx: TyCtxt<'tcx>, bits: u128, ty: ParamEnvAnd<'tcx, Ty<'tcx>>) -> &'tcx Self {\n         let size = tcx\n             .layout_of(ty)\n@@ -2490,21 +2495,27 @@ impl<'tcx> Const<'tcx> {\n     }\n \n     #[inline]\n+    /// Creates an interned zst constant.\n     pub fn zero_sized(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> &'tcx Self {\n         Self::from_scalar(tcx, Scalar::zst(), ty)\n     }\n \n     #[inline]\n+    /// Creates an interned bool constant.\n     pub fn from_bool(tcx: TyCtxt<'tcx>, v: bool) -> &'tcx Self {\n         Self::from_bits(tcx, v as u128, ParamEnv::empty().and(tcx.types.bool))\n     }\n \n     #[inline]\n+    /// Creates an interned usize constant.\n     pub fn from_usize(tcx: TyCtxt<'tcx>, n: u64) -> &'tcx Self {\n         Self::from_bits(tcx, n as u128, ParamEnv::empty().and(tcx.types.usize))\n     }\n \n     #[inline]\n+    /// Attempts to evaluate the given constant to bits. Can fail to evaluate in the presence of\n+    /// generics (or erroneous code) or if the value can't be represented as bits (e.g. because it\n+    /// contains const generic parameters or pointers).\n     pub fn try_eval_bits(\n         &self,\n         tcx: TyCtxt<'tcx>,\n@@ -2518,6 +2529,8 @@ impl<'tcx> Const<'tcx> {\n     }\n \n     #[inline]\n+    /// Tries to evaluate the constant if it is `Unevaluated`. If that doesn't succeed, return the\n+    /// unevaluated constant.\n     pub fn eval(&self, tcx: TyCtxt<'tcx>, param_env: ParamEnv<'tcx>) -> &Const<'tcx> {\n         let try_const_eval = |did, param_env: ParamEnv<'tcx>, substs, promoted| {\n             let param_env_and_substs = param_env.with_reveal_all().and(substs);\n@@ -2574,12 +2587,14 @@ impl<'tcx> Const<'tcx> {\n     }\n \n     #[inline]\n+    /// Panics if the value cannot be evaluated or doesn't contain a valid integer of the given type.\n     pub fn eval_bits(&self, tcx: TyCtxt<'tcx>, param_env: ParamEnv<'tcx>, ty: Ty<'tcx>) -> u128 {\n         self.try_eval_bits(tcx, param_env, ty)\n             .unwrap_or_else(|| bug!(\"expected bits of {:#?}, got {:#?}\", ty, self))\n     }\n \n     #[inline]\n+    /// Panics if the value cannot be evaluated or doesn't contain a valid `usize`.\n     pub fn eval_usize(&self, tcx: TyCtxt<'tcx>, param_env: ParamEnv<'tcx>) -> u64 {\n         self.eval_bits(tcx, param_env, tcx.types.usize) as u64\n     }"}]}