{"sha": "ec8bfdd63c18cc986cedf8b891773e844a438586", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjOGJmZGQ2M2MxOGNjOTg2Y2VkZjhiODkxNzczZTg0NGE0Mzg1ODY=", "commit": {"author": {"name": "Jesse Jones", "email": "jesse9jones@gmail.com", "date": "2012-11-17T16:41:47Z"}, "committer": {"name": "Jesse Jones", "email": "jesse9jones@gmail.com", "date": "2012-11-17T16:41:47Z"}, "message": "Made Map.contains_key, contains_key_ref, and get pure.", "tree": {"sha": "122e7a0f9b447e8e292e7ab64dd83a372f3d8dcc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/122e7a0f9b447e8e292e7ab64dd83a372f3d8dcc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec8bfdd63c18cc986cedf8b891773e844a438586", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec8bfdd63c18cc986cedf8b891773e844a438586", "html_url": "https://github.com/rust-lang/rust/commit/ec8bfdd63c18cc986cedf8b891773e844a438586", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec8bfdd63c18cc986cedf8b891773e844a438586/comments", "author": {"login": "jesse99", "id": 425055, "node_id": "MDQ6VXNlcjQyNTA1NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/425055?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jesse99", "html_url": "https://github.com/jesse99", "followers_url": "https://api.github.com/users/jesse99/followers", "following_url": "https://api.github.com/users/jesse99/following{/other_user}", "gists_url": "https://api.github.com/users/jesse99/gists{/gist_id}", "starred_url": "https://api.github.com/users/jesse99/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jesse99/subscriptions", "organizations_url": "https://api.github.com/users/jesse99/orgs", "repos_url": "https://api.github.com/users/jesse99/repos", "events_url": "https://api.github.com/users/jesse99/events{/privacy}", "received_events_url": "https://api.github.com/users/jesse99/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jesse99", "id": 425055, "node_id": "MDQ6VXNlcjQyNTA1NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/425055?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jesse99", "html_url": "https://github.com/jesse99", "followers_url": "https://api.github.com/users/jesse99/followers", "following_url": "https://api.github.com/users/jesse99/following{/other_user}", "gists_url": "https://api.github.com/users/jesse99/gists{/gist_id}", "starred_url": "https://api.github.com/users/jesse99/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jesse99/subscriptions", "organizations_url": "https://api.github.com/users/jesse99/orgs", "repos_url": "https://api.github.com/users/jesse99/repos", "events_url": "https://api.github.com/users/jesse99/events{/privacy}", "received_events_url": "https://api.github.com/users/jesse99/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5005be67cc4efb54adf6f68dbaa86d7f2ca14391", "url": "https://api.github.com/repos/rust-lang/rust/commits/5005be67cc4efb54adf6f68dbaa86d7f2ca14391", "html_url": "https://github.com/rust-lang/rust/commit/5005be67cc4efb54adf6f68dbaa86d7f2ca14391"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "eafdf58e67e9ab137eba3ff60fa227645e9f4cad", "filename": "src/libcore/mutable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec8bfdd63c18cc986cedf8b891773e844a438586/src%2Flibcore%2Fmutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec8bfdd63c18cc986cedf8b891773e844a438586/src%2Flibcore%2Fmutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmutable.rs?ref=ec8bfdd63c18cc986cedf8b891773e844a438586", "patch": "@@ -48,7 +48,7 @@ impl<T> Data<T> {\n         }\n     }\n \n-    fn borrow_const<R>(op: &fn(t: &const T) -> R) -> R {\n+    pure fn borrow_const<R>(op: &fn(t: &const T) -> R) -> R {\n         op(&const self.value)\n     }\n "}, {"sha": "915202143a1ea17aa31a19501f7c4215efb8fbd6", "filename": "src/libstd/map.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ec8bfdd63c18cc986cedf8b891773e844a438586/src%2Flibstd%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec8bfdd63c18cc986cedf8b891773e844a438586/src%2Flibstd%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmap.rs?ref=ec8bfdd63c18cc986cedf8b891773e844a438586", "patch": "@@ -30,17 +30,17 @@ pub trait Map<K:Eq IterBytes Hash Copy, V: Copy> {\n     fn insert(v: K, v: V) -> bool;\n \n     /// Returns true if the map contains a value for the specified key\n-    fn contains_key(key: K) -> bool;\n+    pure fn contains_key(key: K) -> bool;\n \n     /// Returns true if the map contains a value for the specified\n     /// key, taking the key by reference.\n-    fn contains_key_ref(key: &K) -> bool;\n+    pure fn contains_key_ref(key: &K) -> bool;\n \n     /**\n      * Get the value for the specified key. Fails if the key does not exist in\n      * the map.\n      */\n-    fn get(key: K) -> V;\n+    pure fn get(key: K) -> V;\n \n     /**\n      * Get the value for the specified key. If the key does not exist in\n@@ -200,11 +200,11 @@ pub mod chained {\n     impl<K:Eq IterBytes Hash Copy, V: Copy> T<K, V>: Map<K, V> {\n         pure fn size() -> uint { self.count }\n \n-        fn contains_key(k: K) -> bool {\n+        pure fn contains_key(k: K) -> bool {\n             self.contains_key_ref(&k)\n         }\n \n-        fn contains_key_ref(k: &K) -> bool {\n+        pure fn contains_key_ref(k: &K) -> bool {\n             let hash = k.hash_keyed(0,0) as uint;\n             match self.search_tbl(k, hash) {\n               NotFound => false,\n@@ -264,7 +264,7 @@ pub mod chained {\n             }\n         }\n \n-        fn get(k: K) -> V {\n+        pure fn get(k: K) -> V {\n             let opt_v = self.find(k);\n             if opt_v.is_none() {\n                 fail fmt!(\"Key not found in table: %?\", k);\n@@ -421,19 +421,19 @@ impl<K: Eq IterBytes Hash Copy, V: Copy> @Mut<LinearMap<K, V>>:\n         }\n     }\n \n-    fn contains_key(key: K) -> bool {\n+    pure fn contains_key(key: K) -> bool {\n         do self.borrow_const |p| {\n             p.contains_key(&key)\n         }\n     }\n \n-    fn contains_key_ref(key: &K) -> bool {\n+    pure fn contains_key_ref(key: &K) -> bool {\n         do self.borrow_const |p| {\n             p.contains_key(key)\n         }\n     }\n \n-    fn get(key: K) -> V {\n+    pure fn get(key: K) -> V {\n         do self.borrow_const |p| {\n             p.get(&key)\n         }"}, {"sha": "9dc216a21557a002899e5a22409225dd857d46a5", "filename": "src/libstd/smallintmap.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ec8bfdd63c18cc986cedf8b891773e844a438586/src%2Flibstd%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec8bfdd63c18cc986cedf8b891773e844a438586/src%2Flibstd%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsmallintmap.rs?ref=ec8bfdd63c18cc986cedf8b891773e844a438586", "patch": "@@ -60,7 +60,7 @@ pub pure fn get<T: Copy>(self: SmallIntMap<T>, key: uint) -> T {\n }\n \n /// Returns true if the map contains a value for the specified key\n-pub fn contains_key<T: Copy>(self: SmallIntMap<T>, key: uint) -> bool {\n+pub pure fn contains_key<T: Copy>(self: SmallIntMap<T>, key: uint) -> bool {\n     return !find(self, key).is_none();\n }\n \n@@ -93,13 +93,13 @@ impl<V: Copy> SmallIntMap<V>: map::Map<uint, V> {\n     fn clear() {\n         self.v.set(~[]);\n     }\n-    fn contains_key(key: uint) -> bool {\n+    pure fn contains_key(key: uint) -> bool {\n         contains_key(self, key)\n     }\n-    fn contains_key_ref(key: &uint) -> bool {\n+    pure fn contains_key_ref(key: &uint) -> bool {\n         contains_key(self, *key)\n     }\n-    fn get(key: uint) -> V { get(self, key) }\n+    pure fn get(key: uint) -> V { get(self, key) }\n     pure fn find(key: uint) -> Option<V> { find(self, key) }\n     fn rehash() { fail }\n "}, {"sha": "4cfcbf67cc9aa3f5ac5d669a6adf9f26b861b6bd", "filename": "src/test/run-pass/class-impl-very-parameterized-trait.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ec8bfdd63c18cc986cedf8b891773e844a438586/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec8bfdd63c18cc986cedf8b891773e844a438586/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs?ref=ec8bfdd63c18cc986cedf8b891773e844a438586", "patch": "@@ -47,10 +47,10 @@ impl<T: Copy> cat<T> : Map<int, T> {\n     self.meows += k;\n     true\n   }\n-  fn contains_key(+k: int) -> bool { k <= self.meows }\n-  fn contains_key_ref(k: &int) -> bool { self.contains_key(*k) }\n+  pure fn contains_key(+k: int) -> bool { k <= self.meows }\n+  pure fn contains_key_ref(k: &int) -> bool { self.contains_key(*k) }\n \n-  fn get(+k:int) -> T { match self.find(k) {\n+  pure fn get(+k:int) -> T { match self.find(k) {\n       Some(v) => { v }\n       None    => { fail ~\"epic fail\"; }\n     }"}]}