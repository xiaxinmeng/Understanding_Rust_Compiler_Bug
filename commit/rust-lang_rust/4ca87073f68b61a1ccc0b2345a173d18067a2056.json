{"sha": "4ca87073f68b61a1ccc0b2345a173d18067a2056", "node_id": "C_kwDOAAsO6NoAKDRjYTg3MDczZjY4YjYxYTFjY2MwYjIzNDVhMTczZDE4MDY3YTIwNTY", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-05-25T13:15:41Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-05-31T14:07:15Z"}, "message": "Remove `lit_to_mir_constant` query", "tree": {"sha": "2a43f05ee49997a2929083a30ca152216e3920a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a43f05ee49997a2929083a30ca152216e3920a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ca87073f68b61a1ccc0b2345a173d18067a2056", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ca87073f68b61a1ccc0b2345a173d18067a2056", "html_url": "https://github.com/rust-lang/rust/commit/4ca87073f68b61a1ccc0b2345a173d18067a2056", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ca87073f68b61a1ccc0b2345a173d18067a2056/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa3a1862bac8b110a254501e2863801e24171813", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa3a1862bac8b110a254501e2863801e24171813", "html_url": "https://github.com/rust-lang/rust/commit/aa3a1862bac8b110a254501e2863801e24171813"}], "stats": {"total": 27, "additions": 11, "deletions": 16}, "files": [{"sha": "0b31c9bbf8149f799efdb3514aa8f948bd997e45", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ca87073f68b61a1ccc0b2345a173d18067a2056/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ca87073f68b61a1ccc0b2345a173d18067a2056/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=4ca87073f68b61a1ccc0b2345a173d18067a2056", "patch": "@@ -1092,10 +1092,6 @@ rustc_queries! {\n         desc { \"converting literal to const\" }\n     }\n \n-    query lit_to_mir_constant(key: LitToConstInput<'tcx>) -> Result<mir::ConstantKind<'tcx>, LitToConstError> {\n-        desc { \"converting literal to mir constant\" }\n-    }\n-\n     query check_match(key: LocalDefId) -> Result<(), rustc_errors::ErrorGuaranteed> {\n         desc { |tcx| \"match-checking `{}`\", tcx.def_path_str(key) }\n         cache_on_disk_if { true }"}, {"sha": "73d5eb62750828bc23df6cfd8da9f316bdcdb6be", "filename": "compiler/rustc_mir_build/src/build/expr/as_constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ca87073f68b61a1ccc0b2345a173d18067a2056/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ca87073f68b61a1ccc0b2345a173d18067a2056/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs?ref=4ca87073f68b61a1ccc0b2345a173d18067a2056", "patch": "@@ -106,7 +106,7 @@ pub fn as_constant_inner<'tcx>(\n }\n \n #[instrument(skip(tcx, lit_input))]\n-pub(crate) fn lit_to_mir_constant<'tcx>(\n+fn lit_to_mir_constant<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     lit_input: LitToConstInput<'tcx>,\n ) -> Result<ConstantKind<'tcx>, LitToConstError> {"}, {"sha": "8f6a069a7db54e365c4f9d6f82ba9d16f6a92877", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ca87073f68b61a1ccc0b2345a173d18067a2056/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ca87073f68b61a1ccc0b2345a173d18067a2056/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=4ca87073f68b61a1ccc0b2345a173d18067a2056", "patch": "@@ -1,4 +1,3 @@\n-pub(crate) use crate::build::expr::as_constant::lit_to_mir_constant;\n use crate::build::expr::as_place::PlaceBuilder;\n use crate::build::scope::DropKind;\n use rustc_apfloat::ieee::{Double, Single};"}, {"sha": "0eaab9b57036cfee0b507b46378bd3b584593b18", "filename": "compiler/rustc_mir_build/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ca87073f68b61a1ccc0b2345a173d18067a2056/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ca87073f68b61a1ccc0b2345a173d18067a2056/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs?ref=4ca87073f68b61a1ccc0b2345a173d18067a2056", "patch": "@@ -32,7 +32,6 @@ fluent_messages! { \"../messages.ftl\" }\n pub fn provide(providers: &mut Providers) {\n     providers.check_match = thir::pattern::check_match;\n     providers.lit_to_const = thir::constant::lit_to_const;\n-    providers.lit_to_mir_constant = build::lit_to_mir_constant;\n     providers.mir_built = build::mir_built;\n     providers.thir_check_unsafety = check_unsafety::thir_check_unsafety;\n     providers.thir_body = thir::cx::thir_body;"}, {"sha": "a7be8e3c9033b06aaccf20adbee7c1700fe6bd25", "filename": "compiler/rustc_mir_build/src/thir/constant.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4ca87073f68b61a1ccc0b2345a173d18067a2056/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ca87073f68b61a1ccc0b2345a173d18067a2056/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fconstant.rs?ref=4ca87073f68b61a1ccc0b2345a173d18067a2056", "patch": "@@ -48,6 +48,11 @@ pub(crate) fn lit_to_const<'tcx>(\n         (ast::LitKind::Byte(n), ty::Uint(ty::UintTy::U8)) => {\n             ty::ValTree::from_scalar_int((*n).into())\n         }\n+        (ast::LitKind::CStr(data, _), ty::Ref(_, inner_ty, _)) if matches!(inner_ty.kind(), ty::Adt(def, _) if Some(def.did()) == tcx.lang_items().c_str()) =>\n+        {\n+            let bytes = data as &[u8];\n+            ty::ValTree::from_raw_bytes(tcx, bytes)\n+        }\n         (ast::LitKind::Int(n, _), ty::Uint(_)) | (ast::LitKind::Int(n, _), ty::Int(_)) => {\n             let scalar_int =\n                 trunc(if neg { (*n as i128).overflowing_neg().0 as u128 } else { *n })?;"}, {"sha": "f1519fffd9c15384792bda33a109e3f5068f08d6", "filename": "compiler/rustc_mir_build/src/thir/pattern/mod.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4ca87073f68b61a1ccc0b2345a173d18067a2056/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ca87073f68b61a1ccc0b2345a173d18067a2056/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs?ref=4ca87073f68b61a1ccc0b2345a173d18067a2056", "patch": "@@ -20,7 +20,7 @@ use rustc_index::Idx;\n use rustc_middle::mir::interpret::{\n     ConstValue, ErrorHandled, GlobalId, LitToConstError, LitToConstInput, Scalar,\n };\n-use rustc_middle::mir::{self, UserTypeProjection};\n+use rustc_middle::mir::{self, ConstantKind, UserTypeProjection};\n use rustc_middle::mir::{BorrowKind, Mutability};\n use rustc_middle::thir::{Ascription, BindingMode, FieldPat, LocalVarId, Pat, PatKind, PatRange};\n use rustc_middle::ty::subst::{GenericArg, SubstsRef};\n@@ -646,14 +646,10 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n \n         let lit_input =\n             LitToConstInput { lit: &lit.node, ty: self.typeck_results.expr_ty(expr), neg };\n-        match self\n-            .tcx\n-            .at(expr.span)\n-            .lit_to_const(lit_input)\n-            .map(mir::ConstantKind::Ty)\n-            .or_else(|_| self.tcx.at(expr.span).lit_to_mir_constant(lit_input))\n-        {\n-            Ok(constant) => self.const_to_pat(constant, expr.hir_id, lit.span, None).kind,\n+        match self.tcx.at(expr.span).lit_to_const(lit_input) {\n+            Ok(constant) => {\n+                self.const_to_pat(ConstantKind::Ty(constant), expr.hir_id, lit.span, None).kind\n+            }\n             Err(LitToConstError::Reported(_)) => PatKind::Wild,\n             Err(LitToConstError::TypeError) => bug!(\"lower_lit: had type error\"),\n         }"}]}