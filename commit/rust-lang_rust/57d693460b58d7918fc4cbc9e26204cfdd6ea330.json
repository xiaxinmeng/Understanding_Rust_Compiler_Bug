{"sha": "57d693460b58d7918fc4cbc9e26204cfdd6ea330", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3ZDY5MzQ2MGI1OGQ3OTE4ZmM0Y2JjOWUyNjIwNGNmZGQ2ZWEzMzA=", "commit": {"author": {"name": "Guillaume Pinot", "email": "texitoi@texitoi.eu", "date": "2014-04-19T23:32:54Z"}, "committer": {"name": "Guillaume Pinot", "email": "texitoi@texitoi.eu", "date": "2014-04-20T01:16:58Z"}, "message": "shootout-fannkuch-redux rewrite\n\nLess bound checking and parallelisation.  Brute speed improvement\nis about 15% faster.", "tree": {"sha": "40f1a527a930e37acb867ba5b525cc2b42673b19", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40f1a527a930e37acb867ba5b525cc2b42673b19"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57d693460b58d7918fc4cbc9e26204cfdd6ea330", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57d693460b58d7918fc4cbc9e26204cfdd6ea330", "html_url": "https://github.com/rust-lang/rust/commit/57d693460b58d7918fc4cbc9e26204cfdd6ea330", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57d693460b58d7918fc4cbc9e26204cfdd6ea330/comments", "author": {"login": "TeXitoi", "id": 5787066, "node_id": "MDQ6VXNlcjU3ODcwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5787066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TeXitoi", "html_url": "https://github.com/TeXitoi", "followers_url": "https://api.github.com/users/TeXitoi/followers", "following_url": "https://api.github.com/users/TeXitoi/following{/other_user}", "gists_url": "https://api.github.com/users/TeXitoi/gists{/gist_id}", "starred_url": "https://api.github.com/users/TeXitoi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TeXitoi/subscriptions", "organizations_url": "https://api.github.com/users/TeXitoi/orgs", "repos_url": "https://api.github.com/users/TeXitoi/repos", "events_url": "https://api.github.com/users/TeXitoi/events{/privacy}", "received_events_url": "https://api.github.com/users/TeXitoi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TeXitoi", "id": 5787066, "node_id": "MDQ6VXNlcjU3ODcwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5787066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TeXitoi", "html_url": "https://github.com/TeXitoi", "followers_url": "https://api.github.com/users/TeXitoi/followers", "following_url": "https://api.github.com/users/TeXitoi/following{/other_user}", "gists_url": "https://api.github.com/users/TeXitoi/gists{/gist_id}", "starred_url": "https://api.github.com/users/TeXitoi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TeXitoi/subscriptions", "organizations_url": "https://api.github.com/users/TeXitoi/orgs", "repos_url": "https://api.github.com/users/TeXitoi/repos", "events_url": "https://api.github.com/users/TeXitoi/events{/privacy}", "received_events_url": "https://api.github.com/users/TeXitoi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1d8497e53af86687e701eea0fe2a41b0c4313eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1d8497e53af86687e701eea0fe2a41b0c4313eb", "html_url": "https://github.com/rust-lang/rust/commit/d1d8497e53af86687e701eea0fe2a41b0c4313eb"}], "stats": {"total": 121, "additions": 46, "deletions": 75}, "files": [{"sha": "4bea355472de17838940fe727bf6c56614d3fcbe", "filename": "src/test/bench/shootout-fannkuch-redux.rs", "status": "modified", "additions": 46, "deletions": 75, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/57d693460b58d7918fc4cbc9e26204cfdd6ea330/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57d693460b58d7918fc4cbc9e26204cfdd6ea330/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs?ref=57d693460b58d7918fc4cbc9e26204cfdd6ea330", "patch": "@@ -8,94 +8,65 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::os;\n+use std::cmp::max;\n \n-fn max(a: i32, b: i32) -> i32 {\n-    if a > b {\n-        a\n-    } else {\n-        b\n-    }\n+fn fact(n: uint) -> uint {\n+    range(1, n + 1).fold(1, |accu, i| accu * i)\n }\n \n-fn fannkuch_redux(n: i32) -> i32 {\n-    let mut perm = Vec::from_elem(n as uint, 0i32);\n-    let mut perm1 = Vec::from_fn(n as uint, |i| i as i32);\n-    let mut count = Vec::from_elem(n as uint, 0i32);\n-    let mut max_flips_count = 0i32;\n-    let mut perm_count = 0i32;\n-    let mut checksum = 0i32;\n-\n-    let perm = perm.as_mut_slice();\n-    let perm1 = perm1.as_mut_slice();\n-    let count = count.as_mut_slice();\n-\n-    let mut r = n;\n-    loop {\n-        while r != 1 {\n-            count[r as uint - 1] = r;\n-            r -= 1;\n-        }\n-\n-        for (perm_i, perm1_i) in perm.mut_iter().zip(perm1.iter()) {\n-            *perm_i = *perm1_i;\n-        }\n+fn fannkuch(n: uint, i: uint) -> (int, int) {\n+    let mut perm = Vec::from_fn(n, |e| ((n + e - i) % n + 1) as i32);\n+    let mut tperm = perm.clone();\n+    let mut count = Vec::from_elem(n, 0u);\n+    let mut perm_count = 0;\n+    let mut checksum = 0;\n \n-        let mut flips_count: i32 = 0;\n-        let mut k: i32;\n-        loop {\n-            k = perm[0];\n-            if k == 0 {\n-                break;\n+    for countdown in range(1, fact(n - 1) + 1).rev() {\n+        for i in range(1, n) {\n+            let perm0 = *perm.get(0);\n+            for j in range(0, i) {\n+                *perm.get_mut(j) = *perm.get(j + 1);\n             }\n+            *perm.get_mut(i) = perm0;\n \n-            let k2 = (k+1) >> 1;\n-            for i in range(0i32, k2) {\n-                perm.swap(i as uint, (k - i) as uint);\n+            let count_i = count.get_mut(i);\n+            if *count_i >= i {\n+                *count_i = 0;\n+            } else {\n+                *count_i += 1;\n+                break;\n             }\n-            flips_count += 1;\n         }\n \n-        max_flips_count = max(max_flips_count, flips_count);\n-        checksum += if perm_count % 2 == 0 {\n-            flips_count\n-        } else {\n-            -flips_count\n-        };\n-\n-        // Use incremental change to generate another permutation.\n+        tperm.clone_from(&perm);\n+        let mut flips_count = 0;\n         loop {\n-            if r == n {\n-                println!(\"{}\", checksum);\n-                return max_flips_count;\n-            }\n-\n-            let perm0 = perm1[0];\n-            let mut i: i32 = 0;\n-            while i < r {\n-                let j = i + 1;\n-                perm1[i as uint] = perm1[j as uint];\n-                i = j;\n-            }\n-            perm1[r as uint] = perm0;\n-\n-            count[r as uint] -= 1;\n-            if count[r as uint] > 0 {\n-                break;\n-            }\n-            r += 1;\n+            let k = *tperm.get(0);\n+            if k == 1 { break; }\n+            tperm.mut_slice_to(k as uint).reverse();\n+            flips_count += 1;\n         }\n-\n-        perm_count += 1;\n+        perm_count = max(perm_count, flips_count);\n+        checksum += if countdown & 1 == 1 {flips_count} else {-flips_count}\n     }\n+    (checksum, perm_count)\n }\n \n fn main() {\n-    let args = os::args();\n-    let n = if args.len() > 1 {\n-        from_str::<i32>(args[1]).unwrap()\n-    } else {\n-        2\n-    };\n-    println!(\"Pfannkuchen({}) = {}\", n as int, fannkuch_redux(n) as int);\n+    let n = std::os::args().get(1).and_then(|arg| from_str(*arg)).unwrap_or(2u);\n+\n+    let (tx, rx) = channel();\n+    for i in range(0, n) {\n+        let tx = tx.clone();\n+        spawn(proc() tx.send(fannkuch(n, i)));\n+    }\n+    drop(tx);\n+\n+    let mut checksum = 0;\n+    let mut perm = 0;\n+    for (cur_cks, cur_perm) in rx.iter() {\n+        checksum += cur_cks;\n+        perm = max(perm, cur_perm);\n+    }\n+    println!(\"{}\\nPfannkuchen({}) = {}\", checksum, n, perm);\n }"}]}