{"sha": "e86588e2286ac2c0fb4763bf2d8c3046d0abcc22", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4NjU4OGUyMjg2YWMyYzBmYjQ3NjNiZjJkOGMzMDQ2ZDBhYmNjMjI=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2017-05-18T23:11:22Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2017-05-18T23:11:22Z"}, "message": "Give a nicer error for non-Unicode arguments to rustc and rustdoc\n\nPreviously, any non-Unicode argument would panic rustc:\n\n```\n$ rustc $'foo\\x80bar'\nerror: internal compiler error: unexpected panic\n\nnote: the compiler unexpectedly panicked. this is a bug.\n\nnote: we would appreciate a bug report:\nhttps://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#bug-reports\n\nthread 'rustc' panicked at 'called `Result::unwrap()` on an `Err` value:\n\"foo\ufffdbar\"', /checkout/src/libcore/result.rs:859 note: Run with\n`RUST_BACKTRACE=1` for a backtrace.\n```\n\nNow it gives a clean error:\n\n```\n$ rustc $'foo\\x80bar'\nerror: Argument 1 is not valid Unicode: \"foo\ufffdbar\"\n```\n\nMaybe fixes #15890, although we still can't *compile* arbitrary file names.", "tree": {"sha": "3c690d41d83eca466d9d0faba0f46badd72b5c70", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c690d41d83eca466d9d0faba0f46badd72b5c70"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e86588e2286ac2c0fb4763bf2d8c3046d0abcc22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e86588e2286ac2c0fb4763bf2d8c3046d0abcc22", "html_url": "https://github.com/rust-lang/rust/commit/e86588e2286ac2c0fb4763bf2d8c3046d0abcc22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e86588e2286ac2c0fb4763bf2d8c3046d0abcc22/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ed1ec9f9eb8174273867343d01177b5ac13ff4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ed1ec9f9eb8174273867343d01177b5ac13ff4c", "html_url": "https://github.com/rust-lang/rust/commit/0ed1ec9f9eb8174273867343d01177b5ac13ff4c"}], "stats": {"total": 22, "additions": 19, "deletions": 3}, "files": [{"sha": "18a57f78a503719e7bcc48fb26362977f8a79bcd", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e86588e2286ac2c0fb4763bf2d8c3046d0abcc22/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e86588e2286ac2c0fb4763bf2d8c3046d0abcc22/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=e86588e2286ac2c0fb4763bf2d8c3046d0abcc22", "patch": "@@ -1148,9 +1148,18 @@ pub fn diagnostics_registry() -> errors::registry::Registry {\n     Registry::new(&all_errors)\n }\n \n+fn get_args() -> Vec<String> {\n+    env::args_os().enumerate()\n+        .map(|(i, arg)| arg.into_string().unwrap_or_else(|arg| {\n+             early_error(ErrorOutputType::default(),\n+                         &format!(\"Argument {} is not valid Unicode: {:?}\", i, arg))\n+         }))\n+        .collect()\n+}\n+\n pub fn main() {\n     env_logger::init().unwrap();\n-    let result = run(|| run_compiler(&env::args().collect::<Vec<_>>(),\n+    let result = run(|| run_compiler(&get_args(),\n                                      &mut RustcDefaultCalls,\n                                      None,\n                                      None));"}, {"sha": "f682f6aa763c5cd43e94f38f35724eeadd668256", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e86588e2286ac2c0fb4763bf2d8c3046d0abcc22/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e86588e2286ac2c0fb4763bf2d8c3046d0abcc22/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=e86588e2286ac2c0fb4763bf2d8c3046d0abcc22", "patch": "@@ -107,12 +107,19 @@ pub fn main() {\n     const STACK_SIZE: usize = 32_000_000; // 32MB\n     env_logger::init().unwrap();\n     let res = std::thread::Builder::new().stack_size(STACK_SIZE).spawn(move || {\n-        let s = env::args().collect::<Vec<_>>();\n-        main_args(&s)\n+        get_args().map(|args| main_args(&args)).unwrap_or(1)\n     }).unwrap().join().unwrap_or(101);\n     process::exit(res as i32);\n }\n \n+fn get_args() -> Option<Vec<String>> {\n+    env::args_os().enumerate()\n+        .map(|(i, arg)| arg.into_string().map_err(|arg| {\n+             print_error(format!(\"Argument {} is not valid Unicode: {:?}\", i, arg));\n+        }).ok())\n+        .collect()\n+}\n+\n fn stable(g: getopts::OptGroup) -> RustcOptGroup { RustcOptGroup::stable(g) }\n fn unstable(g: getopts::OptGroup) -> RustcOptGroup { RustcOptGroup::unstable(g) }\n "}]}