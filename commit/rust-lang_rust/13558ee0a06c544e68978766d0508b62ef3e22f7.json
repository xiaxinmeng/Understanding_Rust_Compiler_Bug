{"sha": "13558ee0a06c544e68978766d0508b62ef3e22f7", "node_id": "C_kwDOAAsO6NoAKDEzNTU4ZWUwYTA2YzU0NGU2ODk3ODc2NmQwNTA4YjYyZWYzZTIyZjc", "commit": {"author": {"name": "Mukund Lakshman", "email": "yaymukund@gmail.com", "date": "2021-10-05T01:28:26Z"}, "committer": {"name": "Mukund Lakshman", "email": "yaymukund@gmail.com", "date": "2021-10-05T02:28:04Z"}, "message": "No need to default offset since we always override it.", "tree": {"sha": "135279ede7679347f2631800d2dc1c9612b017e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/135279ede7679347f2631800d2dc1c9612b017e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13558ee0a06c544e68978766d0508b62ef3e22f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13558ee0a06c544e68978766d0508b62ef3e22f7", "html_url": "https://github.com/rust-lang/rust/commit/13558ee0a06c544e68978766d0508b62ef3e22f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13558ee0a06c544e68978766d0508b62ef3e22f7/comments", "author": null, "committer": null, "parents": [{"sha": "6518a0a8b9570b6d347a3c7b2c9b95e66cbbd013", "url": "https://api.github.com/repos/rust-lang/rust/commits/6518a0a8b9570b6d347a3c7b2c9b95e66cbbd013", "html_url": "https://github.com/rust-lang/rust/commit/6518a0a8b9570b6d347a3c7b2c9b95e66cbbd013"}], "stats": {"total": 76, "additions": 36, "deletions": 40}, "files": [{"sha": "cb5c9edcde570a570f7140335f271404c0c59f31", "filename": "src/librustdoc/externalfiles.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13558ee0a06c544e68978766d0508b62ef3e22f7/src%2Flibrustdoc%2Fexternalfiles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13558ee0a06c544e68978766d0508b62ef3e22f7/src%2Flibrustdoc%2Fexternalfiles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fexternalfiles.rs?ref=13558ee0a06c544e68978766d0508b62ef3e22f7", "patch": "@@ -46,7 +46,7 @@ impl ExternalHtml {\n                 error_codes: codes,\n                 edition,\n                 playground,\n-                heading_level: 0\n+                heading_level: 1\n             }\n             .into_string()\n         );\n@@ -62,7 +62,7 @@ impl ExternalHtml {\n                 error_codes: codes,\n                 edition,\n                 playground,\n-                heading_level: 0\n+                heading_level: 1\n             }\n             .into_string()\n         );"}, {"sha": "ef2f2f90301fbc9ae6e5ad06bab5d725af92e4bd", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13558ee0a06c544e68978766d0508b62ef3e22f7/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13558ee0a06c544e68978766d0508b62ef3e22f7/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=13558ee0a06c544e68978766d0508b62ef3e22f7", "patch": "@@ -19,7 +19,7 @@\n //!     error_codes: ErrorCodes::Yes,\n //!     edition: Edition::Edition2015,\n //!     playground: &None,\n-//!     heading_level: 0\n+//!     heading_level: 1\n //! };\n //! let html = md.into_string();\n //! // ... something using html\n@@ -544,7 +544,7 @@ impl<'a, 'b, 'ids, I: Iterator<Item = SpannedEvent<'a>>> Iterator\n                 self.buf.push_front((Event::Html(format!(\"{} \", sec).into()), 0..0));\n             }\n \n-            let level = std::cmp::min(level + self.level + 1, MAX_HEADER_LEVEL);\n+            let level = std::cmp::min(level + self.level, MAX_HEADER_LEVEL);\n             self.buf.push_back((Event::Html(format!(\"</a></h{}>\", level).into()), 0..0));\n \n             let start_tags = format!("}, {"sha": "ee6a19978969e5c2f6ab85fcc1d324d7312eb2ff", "filename": "src/librustdoc/html/markdown/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13558ee0a06c544e68978766d0508b62ef3e22f7/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13558ee0a06c544e68978766d0508b62ef3e22f7/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs?ref=13558ee0a06c544e68978766d0508b62ef3e22f7", "patch": "@@ -154,7 +154,7 @@ fn test_header() {\n             error_codes: ErrorCodes::Yes,\n             edition: DEFAULT_EDITION,\n             playground: &None,\n-            heading_level: 0,\n+            heading_level: 1,\n         }\n         .into_string();\n         assert_eq!(output, expect, \"original: {}\", input);\n@@ -196,7 +196,7 @@ fn test_header_ids_multiple_blocks() {\n             error_codes: ErrorCodes::Yes,\n             edition: DEFAULT_EDITION,\n             playground: &None,\n-            heading_level: 0,\n+            heading_level: 1,\n         }\n         .into_string();\n         assert_eq!(output, expect, \"original: {}\", input);"}, {"sha": "8cf11e526fe38b4de28ddf631331f4e8ff3afe68", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/13558ee0a06c544e68978766d0508b62ef3e22f7/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13558ee0a06c544e68978766d0508b62ef3e22f7/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=13558ee0a06c544e68978766d0508b62ef3e22f7", "patch": "@@ -470,11 +470,7 @@ fn settings(root_path: &str, suffix: &str, themes: &[StylePath]) -> Result<Strin\n     ))\n }\n \n-fn document(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item, parent: Option<&clean::Item>) {\n-    document_at_level(w, cx, item, parent, 0)\n-}\n-\n-fn document_at_level(\n+fn document(\n     w: &mut Buffer,\n     cx: &Context<'_>,\n     item: &clean::Item,\n@@ -1344,7 +1340,7 @@ fn render_impl(\n                         // because impls can't have a stability.\n                         if item.doc_value().is_some() {\n                             document_item_info(&mut info_buffer, cx, it, Some(parent));\n-                            document_full(&mut doc_buffer, item, cx, 3);\n+                            document_full(&mut doc_buffer, item, cx, 4);\n                             short_documented = false;\n                         } else {\n                             // In case the item isn't documented,\n@@ -1362,7 +1358,7 @@ fn render_impl(\n                 } else {\n                     document_item_info(&mut info_buffer, cx, item, Some(parent));\n                     if rendering_params.show_def_docs {\n-                        document_full(&mut doc_buffer, item, cx, 3);\n+                        document_full(&mut doc_buffer, item, cx, 4);\n                         short_documented = false;\n                     }\n                 }\n@@ -1603,7 +1599,7 @@ fn render_impl(\n                     error_codes: cx.shared.codes,\n                     edition: cx.shared.edition(),\n                     playground: &cx.shared.playground,\n-                    heading_level: 0\n+                    heading_level: 1\n                 }\n                 .into_string()\n             );"}, {"sha": "f26ee84569b49a9b915e8c502389301a40f26ae6", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/13558ee0a06c544e68978766d0508b62ef3e22f7/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13558ee0a06c544e68978766d0508b62ef3e22f7/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=13558ee0a06c544e68978766d0508b62ef3e22f7", "patch": "@@ -16,10 +16,10 @@ use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_target::abi::{Layout, Primitive, TagEncoding, Variants};\n \n use super::{\n-    collect_paths_for_type, document, document_at_level, ensure_trailing_slash, item_ty_to_strs,\n-    notable_traits_decl, render_assoc_item, render_assoc_items, render_attributes_in_code,\n-    render_attributes_in_pre, render_impl, render_stability_since_raw, write_srclink,\n-    AssocItemLink, Context, ImplRenderingParameters,\n+    collect_paths_for_type, document, ensure_trailing_slash, item_ty_to_strs, notable_traits_decl,\n+    render_assoc_item, render_assoc_items, render_attributes_in_code, render_attributes_in_pre,\n+    render_impl, render_stability_since_raw, write_srclink, AssocItemLink, Context,\n+    ImplRenderingParameters,\n };\n use crate::clean::{self, GetDefId};\n use crate::formats::item_type::ItemType;\n@@ -173,7 +173,7 @@ fn toggle_close(w: &mut Buffer) {\n }\n \n fn item_module(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item, items: &[clean::Item]) {\n-    document(w, cx, item, None);\n+    document(w, cx, item, None, 1);\n \n     let mut indices = (0..items.len()).filter(|i| !items[*i].is_stripped()).collect::<Vec<usize>>();\n \n@@ -485,7 +485,7 @@ fn item_function(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, f: &clean::\n             notable_traits = notable_traits_decl(&f.decl, cx),\n         );\n     });\n-    document(w, cx, it, None)\n+    document(w, cx, it, None, 1)\n }\n \n fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Trait) {\n@@ -608,7 +608,7 @@ fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Tra\n     });\n \n     // Trait documentation\n-    document(w, cx, it, None);\n+    document(w, cx, it, None, 1);\n \n     fn write_small_section_header(w: &mut Buffer, id: &str, title: &str, extra_content: &str) {\n         write!(\n@@ -626,7 +626,7 @@ fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Tra\n         let item_type = m.type_();\n         let id = cx.derive_id(format!(\"{}.{}\", item_type, name));\n         let mut content = Buffer::empty_from(w);\n-        document_at_level(&mut content, cx, m, Some(t), 3);\n+        document(&mut content, cx, m, Some(t), 4);\n         let toggled = !content.is_empty();\n         if toggled {\n             write!(w, \"<details class=\\\"rustdoc-toggle\\\" open><summary>\");\n@@ -840,7 +840,7 @@ fn item_trait_alias(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clea\n         );\n     });\n \n-    document(w, cx, it, None);\n+    document(w, cx, it, None, 1);\n \n     // Render any items associated directly to this alias, as otherwise they\n     // won't be visible anywhere in the docs. It would be nice to also show\n@@ -862,7 +862,7 @@ fn item_opaque_ty(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean:\n         );\n     });\n \n-    document(w, cx, it, None);\n+    document(w, cx, it, None, 1);\n \n     // Render any items associated directly to this alias, as otherwise they\n     // won't be visible anywhere in the docs. It would be nice to also show\n@@ -893,7 +893,7 @@ fn item_typedef(\n         );\n     });\n \n-    document(w, cx, it, None);\n+    document(w, cx, it, None, 1);\n \n     let def_id = it.def_id.expect_def_id();\n     // Render any items associated directly to this alias, as otherwise they\n@@ -911,7 +911,7 @@ fn item_union(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::Uni\n         });\n     });\n \n-    document(w, cx, it, None);\n+    document(w, cx, it, None, 1);\n \n     let mut fields = s\n         .fields\n@@ -944,7 +944,7 @@ fn item_union(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::Uni\n             if let Some(stability_class) = field.stability_class(cx.tcx()) {\n                 write!(w, \"<span class=\\\"stab {stab}\\\"></span>\", stab = stability_class);\n             }\n-            document(w, cx, field, Some(it));\n+            document(w, cx, field, Some(it), 1);\n         }\n     }\n     let def_id = it.def_id.expect_def_id();\n@@ -1026,7 +1026,7 @@ fn item_enum(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, e: &clean::Enum\n         });\n     });\n \n-    document(w, cx, it, None);\n+    document(w, cx, it, None, 1);\n \n     if !e.variants.is_empty() {\n         write!(\n@@ -1055,7 +1055,7 @@ fn item_enum(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, e: &clean::Enum\n             w.write_str(\"</code>\");\n             render_stability_since(w, variant, it, cx.tcx());\n             w.write_str(\"</div>\");\n-            document(w, cx, variant, Some(it));\n+            document(w, cx, variant, Some(it), 1);\n             document_non_exhaustive(w, variant);\n \n             use crate::clean::Variant;\n@@ -1095,7 +1095,7 @@ fn item_enum(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, e: &clean::Enum\n                                 f = field.name.as_ref().unwrap(),\n                                 t = ty.print(cx)\n                             );\n-                            document(w, cx, field, Some(variant));\n+                            document(w, cx, field, Some(variant), 1);\n                         }\n                         _ => unreachable!(),\n                     }\n@@ -1122,7 +1122,7 @@ fn item_macro(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Mac\n             None,\n         );\n     });\n-    document(w, cx, it, None)\n+    document(w, cx, it, None, 1)\n }\n \n fn item_proc_macro(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, m: &clean::ProcMacro) {\n@@ -1152,11 +1152,11 @@ fn item_proc_macro(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, m: &clean\n             });\n         }\n     }\n-    document(w, cx, it, None)\n+    document(w, cx, it, None, 1)\n }\n \n fn item_primitive(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item) {\n-    document(w, cx, it, None);\n+    document(w, cx, it, None, 1);\n     render_assoc_items(w, cx, it, it.def_id.expect_def_id(), AssocItemRender::All)\n }\n \n@@ -1195,7 +1195,7 @@ fn item_constant(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, c: &clean::\n         }\n     });\n \n-    document(w, cx, it, None)\n+    document(w, cx, it, None, 1)\n }\n \n fn item_struct(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::Struct) {\n@@ -1206,7 +1206,7 @@ fn item_struct(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::St\n         });\n     });\n \n-    document(w, cx, it, None);\n+    document(w, cx, it, None, 1);\n \n     let mut fields = s\n         .fields\n@@ -1242,7 +1242,7 @@ fn item_struct(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::St\n                     name = field_name,\n                     ty = ty.print(cx)\n                 );\n-                document(w, cx, field, Some(it));\n+                document(w, cx, field, Some(it), 1);\n             }\n         }\n     }\n@@ -1263,7 +1263,7 @@ fn item_static(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::St\n             typ = s.type_.print(cx)\n         );\n     });\n-    document(w, cx, it, None)\n+    document(w, cx, it, None, 1)\n }\n \n fn item_foreign_type(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item) {\n@@ -1278,13 +1278,13 @@ fn item_foreign_type(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item) {\n         );\n     });\n \n-    document(w, cx, it, None);\n+    document(w, cx, it, None, 1);\n \n     render_assoc_items(w, cx, it, it.def_id.expect_def_id(), AssocItemRender::All)\n }\n \n fn item_keyword(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item) {\n-    document(w, cx, it, None)\n+    document(w, cx, it, None, 1)\n }\n \n /// Compare two strings treating multi-digit numbers as single units (i.e. natural sort order)."}, {"sha": "f89f28242a2281ff52fb0614619af7fdb3326348", "filename": "src/tools/error_index_generator/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13558ee0a06c544e68978766d0508b62ef3e22f7/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13558ee0a06c544e68978766d0508b62ef3e22f7/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ferror_index_generator%2Fmain.rs?ref=13558ee0a06c544e68978766d0508b62ef3e22f7", "patch": "@@ -126,7 +126,7 @@ impl Formatter for HTMLFormatter {\n                         error_codes: ErrorCodes::Yes,\n                         edition: DEFAULT_EDITION,\n                         playground: &Some(playground),\n-                        heading_level: 0\n+                        heading_level: 1\n                     }\n                     .into_string()\n                 )?"}]}