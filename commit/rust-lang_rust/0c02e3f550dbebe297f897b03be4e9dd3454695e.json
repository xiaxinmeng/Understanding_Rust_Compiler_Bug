{"sha": "0c02e3f550dbebe297f897b03be4e9dd3454695e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjMDJlM2Y1NTBkYmViZTI5N2Y4OTdiMDNiZTRlOWRkMzQ1NDY5NWU=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "eddyb@lyken.rs", "date": "2021-08-26T16:47:07Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "eddyb@lyken.rs", "date": "2021-09-17T22:42:44Z"}, "message": "ty::context: move interning `Allocation`s and `Layout`s to `direct_interners!`.", "tree": {"sha": "8615c18b259e98644a22caadc2bed84d3a01bcfe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8615c18b259e98644a22caadc2bed84d3a01bcfe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c02e3f550dbebe297f897b03be4e9dd3454695e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c02e3f550dbebe297f897b03be4e9dd3454695e", "html_url": "https://github.com/rust-lang/rust/commit/0c02e3f550dbebe297f897b03be4e9dd3454695e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c02e3f550dbebe297f897b03be4e9dd3454695e/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f2f927eb81c75fd0f8e5900588eb962be0a4be9", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f2f927eb81c75fd0f8e5900588eb962be0a4be9", "html_url": "https://github.com/rust-lang/rust/commit/7f2f927eb81c75fd0f8e5900588eb962be0a4be9"}], "stats": {"total": 81, "additions": 26, "deletions": 55}, "files": [{"sha": "7cd5584c3589b78c86c1eabccf000e0012d6a963", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 26, "deletions": 55, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/0c02e3f550dbebe297f897b03be4e9dd3454695e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c02e3f550dbebe297f897b03be4e9dd3454695e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=0c02e3f550dbebe297f897b03be4e9dd3454695e", "patch": "@@ -118,8 +118,8 @@ pub struct CtxtInterners<'tcx> {\n     /// The arena that types, regions, etc. are allocated from.\n     arena: &'tcx WorkerLocal<Arena<'tcx>>,\n \n-    /// Specifically use a speedy hash algorithm for these hash sets, since\n-    /// they're accessed quite often.\n+    // Specifically use a speedy hash algorithm for these hash sets, since\n+    // they're accessed quite often.\n     type_: InternedSet<'tcx, TyS<'tcx>>,\n     type_list: InternedSet<'tcx, List<Ty<'tcx>>>,\n     substs: InternedSet<'tcx, InternalSubsts<'tcx>>,\n@@ -132,9 +132,9 @@ pub struct CtxtInterners<'tcx> {\n     projs: InternedSet<'tcx, List<ProjectionKind>>,\n     place_elems: InternedSet<'tcx, List<PlaceElem<'tcx>>>,\n     const_: InternedSet<'tcx, Const<'tcx>>,\n-    /// Const allocations.\n-    allocation: InternedSet<'tcx, Allocation>,\n+    const_allocation: InternedSet<'tcx, Allocation>,\n     bound_variable_kinds: InternedSet<'tcx, List<ty::BoundVariableKind>>,\n+    layout: InternedSet<'tcx, Layout>,\n }\n \n impl<'tcx> CtxtInterners<'tcx> {\n@@ -152,8 +152,9 @@ impl<'tcx> CtxtInterners<'tcx> {\n             projs: Default::default(),\n             place_elems: Default::default(),\n             const_: Default::default(),\n-            allocation: Default::default(),\n+            const_allocation: Default::default(),\n             bound_variable_kinds: Default::default(),\n+            layout: Default::default(),\n         }\n     }\n \n@@ -1062,10 +1063,9 @@ pub struct GlobalCtxt<'tcx> {\n     /// Stores memory for globals (statics/consts).\n     pub(crate) alloc_map: Lock<interpret::AllocMap<'tcx>>,\n \n-    layout_interner: ShardedHashMap<&'tcx Layout, ()>,\n-\n     output_filenames: Arc<OutputFilenames>,\n \n+    // FIXME(eddyb) this doesn't belong here and should be using a query.\n     pub(super) vtables_cache:\n         Lock<FxHashMap<(Ty<'tcx>, Option<ty::PolyExistentialTraitRef<'tcx>>), AllocId>>,\n }\n@@ -1107,13 +1107,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.arena.alloc(ty::AdtDef::new(self, did, kind, variants, repr))\n     }\n \n-    pub fn intern_const_alloc(self, alloc: Allocation) -> &'tcx Allocation {\n-        self.interners\n-            .allocation\n-            .intern(alloc, |alloc| Interned(self.interners.arena.alloc(alloc)))\n-            .0\n-    }\n-\n     /// Allocates a read-only byte or string literal for `mir::interpret`.\n     pub fn allocate_bytes(self, bytes: &[u8]) -> interpret::AllocId {\n         // Create an allocation that just contains these bytes.\n@@ -1122,20 +1115,19 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.create_memory_alloc(alloc)\n     }\n \n+    // FIXME(eddyb) move to `direct_interners!`.\n     pub fn intern_stability(self, stab: attr::Stability) -> &'tcx attr::Stability {\n         self.stability_interner.intern(stab, |stab| self.arena.alloc(stab))\n     }\n \n+    // FIXME(eddyb) move to `direct_interners!`.\n     pub fn intern_const_stability(self, stab: attr::ConstStability) -> &'tcx attr::ConstStability {\n         self.const_stability_interner.intern(stab, |stab| self.arena.alloc(stab))\n     }\n \n-    pub fn intern_layout(self, layout: Layout) -> &'tcx Layout {\n-        self.layout_interner.intern(layout, |layout| self.arena.alloc(layout))\n-    }\n-\n     /// Returns a range of the start/end indices specified with the\n     /// `rustc_layout_scalar_valid_range` attribute.\n+    // FIXME(eddyb) this is an awkward spot for this method, maybe move it?\n     pub fn layout_scalar_valid_range(self, def_id: DefId) -> (Bound<u128>, Bound<u128>) {\n         let attrs = self.get_attrs(def_id);\n         let get = |name| {\n@@ -1210,7 +1202,6 @@ impl<'tcx> TyCtxt<'tcx> {\n             evaluation_cache: Default::default(),\n             crate_name: Symbol::intern(crate_name),\n             data_layout,\n-            layout_interner: Default::default(),\n             stability_interner: Default::default(),\n             const_stability_interner: Default::default(),\n             alloc_map: Lock::new(interpret::AllocMap::new()),\n@@ -1670,7 +1661,7 @@ macro_rules! nop_list_lift {\n nop_lift! {type_; Ty<'a> => Ty<'tcx>}\n nop_lift! {region; Region<'a> => Region<'tcx>}\n nop_lift! {const_; &'a Const<'a> => &'tcx Const<'tcx>}\n-nop_lift! {allocation; &'a Allocation => &'tcx Allocation}\n+nop_lift! {const_allocation; &'a Allocation => &'tcx Allocation}\n nop_lift! {predicate; &'a PredicateInner<'a> => &'tcx PredicateInner<'tcx>}\n \n nop_list_lift! {type_list; Ty<'a> => Ty<'tcx>}\n@@ -1962,8 +1953,12 @@ impl<'tcx> TyCtxt<'tcx> {\n                     \"Const Stability interner: #{}\",\n                     self.0.const_stability_interner.len()\n                 )?;\n-                writeln!(fmt, \"Allocation interner: #{}\", self.0.interners.allocation.len())?;\n-                writeln!(fmt, \"Layout interner: #{}\", self.0.layout_interner.len())?;\n+                writeln!(\n+                    fmt,\n+                    \"Const Allocation interner: #{}\",\n+                    self.0.interners.const_allocation.len()\n+                )?;\n+                writeln!(fmt, \"Layout interner: #{}\", self.0.interners.layout.len())?;\n \n                 Ok(())\n             }\n@@ -2051,38 +2046,6 @@ impl<'tcx, T> Borrow<[T]> for Interned<'tcx, List<T>> {\n     }\n }\n \n-impl<'tcx> Borrow<RegionKind> for Interned<'tcx, RegionKind> {\n-    fn borrow(&self) -> &RegionKind {\n-        &self.0\n-    }\n-}\n-\n-impl<'tcx> Borrow<Const<'tcx>> for Interned<'tcx, Const<'tcx>> {\n-    fn borrow<'a>(&'a self) -> &'a Const<'tcx> {\n-        &self.0\n-    }\n-}\n-\n-impl<'tcx> Borrow<Allocation> for Interned<'tcx, Allocation> {\n-    fn borrow<'a>(&'a self) -> &'a Allocation {\n-        &self.0\n-    }\n-}\n-\n-impl<'tcx> PartialEq for Interned<'tcx, Allocation> {\n-    fn eq(&self, other: &Self) -> bool {\n-        self.0 == other.0\n-    }\n-}\n-\n-impl<'tcx> Eq for Interned<'tcx, Allocation> {}\n-\n-impl<'tcx> Hash for Interned<'tcx, Allocation> {\n-    fn hash<H: Hasher>(&self, s: &mut H) {\n-        self.0.hash(s)\n-    }\n-}\n-\n macro_rules! direct_interners {\n     ($($name:ident: $method:ident($ty:ty),)+) => {\n         $(impl<'tcx> PartialEq for Interned<'tcx, $ty> {\n@@ -2099,9 +2062,15 @@ macro_rules! direct_interners {\n             }\n         }\n \n+        impl<'tcx> Borrow<$ty> for Interned<'tcx, $ty> {\n+            fn borrow<'a>(&'a self) -> &'a $ty {\n+                &self.0\n+            }\n+        }\n+\n         impl<'tcx> TyCtxt<'tcx> {\n             pub fn $method(self, v: $ty) -> &'tcx $ty {\n-                self.interners.$name.intern_ref(&v, || {\n+                self.interners.$name.intern(v, |v| {\n                     Interned(self.interners.arena.alloc(v))\n                 }).0\n             }\n@@ -2112,6 +2081,8 @@ macro_rules! direct_interners {\n direct_interners! {\n     region: mk_region(RegionKind),\n     const_: mk_const(Const<'tcx>),\n+    const_allocation: intern_const_alloc(Allocation),\n+    layout: intern_layout(Layout),\n }\n \n macro_rules! slice_interners {"}]}