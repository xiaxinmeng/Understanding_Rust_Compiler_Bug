{"sha": "e42b21b522033dfd3a2807e20e789a94830ec346", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0MmIyMWI1MjIwMzNkZmQzYTI4MDdlMjBlNzg5YTk0ODMwZWMzNDY=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-12-28T11:55:26Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-01-01T19:05:48Z"}, "message": "Properly lift `Allocations`", "tree": {"sha": "cde141d796a00f1ee26f0cc0f414f9cda8ef73ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cde141d796a00f1ee26f0cc0f414f9cda8ef73ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e42b21b522033dfd3a2807e20e789a94830ec346", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e42b21b522033dfd3a2807e20e789a94830ec346", "html_url": "https://github.com/rust-lang/rust/commit/e42b21b522033dfd3a2807e20e789a94830ec346", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e42b21b522033dfd3a2807e20e789a94830ec346/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48aa81911ceafbddfe1db90ec287aafa31047576", "url": "https://api.github.com/repos/rust-lang/rust/commits/48aa81911ceafbddfe1db90ec287aafa31047576", "html_url": "https://github.com/rust-lang/rust/commit/48aa81911ceafbddfe1db90ec287aafa31047576"}], "stats": {"total": 11, "additions": 2, "deletions": 9}, "files": [{"sha": "8ecaa42a2e91d3c49c36ecff508af7310432d5ea", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e42b21b522033dfd3a2807e20e789a94830ec346/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e42b21b522033dfd3a2807e20e789a94830ec346/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=e42b21b522033dfd3a2807e20e789a94830ec346", "patch": "@@ -1811,15 +1811,8 @@ impl<'a, 'tcx> Lift<'tcx> for &'a LazyConst<'a> {\n impl<'a, 'tcx> Lift<'tcx> for &'a mir::interpret::Allocation {\n     type Lifted = &'tcx mir::interpret::Allocation;\n     fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n-        if tcx.interners.arena.in_arena(*self as *const _) {\n-            return Some(unsafe { mem::transmute(*self) });\n-        }\n-        // Also try in the global tcx if we're not that.\n-        if !tcx.is_global() {\n-            self.lift_to_tcx(tcx.global_tcx())\n-        } else {\n-            None\n-        }\n+        assert!(tcx.global_interners.arena.in_arena(*self as *const _));\n+        Some(unsafe { mem::transmute(*self) })\n     }\n }\n "}]}