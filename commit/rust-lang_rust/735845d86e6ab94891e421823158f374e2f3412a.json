{"sha": "735845d86e6ab94891e421823158f374e2f3412a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczNTg0NWQ4NmU2YWI5NDg5MWU0MjE4MjMxNThmMzc0ZTJmMzQxMmE=", "commit": {"author": {"name": "Geobert Quach", "email": "geobert@protonmail.com", "date": "2019-09-10T10:31:40Z"}, "committer": {"name": "Geobert Quach", "email": "geobert@protonmail.com", "date": "2019-09-10T10:31:40Z"}, "message": "refactor(args): Switch to pico-args", "tree": {"sha": "f6675c54761e9aeb2367764d2746c80bc290741f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6675c54761e9aeb2367764d2746c80bc290741f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/735845d86e6ab94891e421823158f374e2f3412a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/735845d86e6ab94891e421823158f374e2f3412a", "html_url": "https://github.com/rust-lang/rust/commit/735845d86e6ab94891e421823158f374e2f3412a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/735845d86e6ab94891e421823158f374e2f3412a/comments", "author": {"login": "Geobert", "id": 72570, "node_id": "MDQ6VXNlcjcyNTcw", "avatar_url": "https://avatars.githubusercontent.com/u/72570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Geobert", "html_url": "https://github.com/Geobert", "followers_url": "https://api.github.com/users/Geobert/followers", "following_url": "https://api.github.com/users/Geobert/following{/other_user}", "gists_url": "https://api.github.com/users/Geobert/gists{/gist_id}", "starred_url": "https://api.github.com/users/Geobert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Geobert/subscriptions", "organizations_url": "https://api.github.com/users/Geobert/orgs", "repos_url": "https://api.github.com/users/Geobert/repos", "events_url": "https://api.github.com/users/Geobert/events{/privacy}", "received_events_url": "https://api.github.com/users/Geobert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Geobert", "id": 72570, "node_id": "MDQ6VXNlcjcyNTcw", "avatar_url": "https://avatars.githubusercontent.com/u/72570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Geobert", "html_url": "https://github.com/Geobert", "followers_url": "https://api.github.com/users/Geobert/followers", "following_url": "https://api.github.com/users/Geobert/following{/other_user}", "gists_url": "https://api.github.com/users/Geobert/gists{/gist_id}", "starred_url": "https://api.github.com/users/Geobert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Geobert/subscriptions", "organizations_url": "https://api.github.com/users/Geobert/orgs", "repos_url": "https://api.github.com/users/Geobert/repos", "events_url": "https://api.github.com/users/Geobert/events{/privacy}", "received_events_url": "https://api.github.com/users/Geobert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2ebb467bdf3ebb7d29260adb95c56594c6db282", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2ebb467bdf3ebb7d29260adb95c56594c6db282", "html_url": "https://github.com/rust-lang/rust/commit/e2ebb467bdf3ebb7d29260adb95c56594c6db282"}], "stats": {"total": 292, "additions": 213, "deletions": 79}, "files": [{"sha": "f4b5d12a35fc53977022f9202d3f3c2ddc3c50e8", "filename": "Cargo.lock", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/735845d86e6ab94891e421823158f374e2f3412a/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/735845d86e6ab94891e421823158f374e2f3412a/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=735845d86e6ab94891e421823158f374e2f3412a", "patch": "@@ -837,6 +837,11 @@ dependencies = [\n  \"ordermap 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"pico-args\"\n+version = \"0.2.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"ppv-lite86\"\n version = \"0.2.5\"\n@@ -930,9 +935,9 @@ dependencies = [\n name = \"ra_cli\"\n version = \"0.1.0\"\n dependencies = [\n- \"clap 2.33.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"flexi_logger 0.14.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"indicatif 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"pico-args 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ra_batch 0.1.0\",\n  \"ra_db 0.1.0\",\n  \"ra_hir 0.1.0\",\n@@ -1873,6 +1878,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum paste-impl 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4214c9e912ef61bf42b81ba9a47e8aad1b2ffaf739ab162bf96d1e011f54e6c5\"\n \"checksum percent-encoding 2.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d4fd5641d01c8f18a23da7b6fe29298ff4b55afcccdf78973b24cf3175fee32e\"\n \"checksum petgraph 0.4.13 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9c3659d1ee90221741f65dd128d9998311b0e40c5d3c23a62445938214abce4f\"\n+\"checksum pico-args 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2fce25154205cf4360b456fd7d48994afe20663b77e3bd3d0a353a2fccf7f22c\"\n \"checksum ppv-lite86 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e3cbf9f658cdb5000fcf6f362b8ea2ba154b9f146a61c7a20d647034c6b6561b\"\n \"checksum proc-macro-hack 0.5.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e688f31d92ffd7c1ddc57a1b4e6d773c0f2a14ee437a4b0a4f5a69c80eb221c8\"\n \"checksum proc-macro2 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"175a40b9cf564ce9bf050654633dbf339978706b8ead1a907bb970b63185dd95\""}, {"sha": "d42ac3ad4ff0613eb33175673f5f5cb6404cdd54", "filename": "crates/ra_cli/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/735845d86e6ab94891e421823158f374e2f3412a/crates%2Fra_cli%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/735845d86e6ab94891e421823158f374e2f3412a/crates%2Fra_cli%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2FCargo.toml?ref=735845d86e6ab94891e421823158f374e2f3412a", "patch": "@@ -6,7 +6,7 @@ authors = [\"rust-analyzer developers\"]\n publish = false\n \n [dependencies]\n-clap = { version = \"2.32.0\", default-features = false }\n+pico-args = \"0.2.0\"\n flexi_logger = \"0.14.0\"\n indicatif = \"0.11.0\"\n "}, {"sha": "bf31472acc06fa0bf558b217353864dc3ac0e5ff", "filename": "crates/ra_cli/src/help.rs", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/735845d86e6ab94891e421823158f374e2f3412a/crates%2Fra_cli%2Fsrc%2Fhelp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735845d86e6ab94891e421823158f374e2f3412a/crates%2Fra_cli%2Fsrc%2Fhelp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fhelp.rs?ref=735845d86e6ab94891e421823158f374e2f3412a", "patch": "@@ -0,0 +1,96 @@\n+pub fn print_global_help() {\r\n+    println!(\r\n+        \"ra-cli\r\n+\r\n+USAGE:\r\n+    ra_cli <SUBCOMMAND>\r\n+\r\n+FLAGS:\r\n+    -h, --help        Prints help information\r\n+\r\n+SUBCOMMANDS:\r\n+    analysis-bench\r\n+    analysis-stats\r\n+    highlight\r\n+    parse\r\n+    symbols\"\r\n+    )\r\n+}\r\n+\r\n+pub fn print_analysis_bench_help() {\r\n+    println!(\r\n+        \"ra_cli-analysis-bench\r\n+\r\n+USAGE:\r\n+    ra_cli analysis-bench [FLAGS] [OPTIONS] [PATH]\r\n+\r\n+FLAGS:\r\n+    -h, --help        Prints help information\r\n+    -v, --verbose\r\n+    \r\n+OPTIONS:\r\n+    --complete <PATH:LINE:COLUMN>    Compute completions at this location\r\n+    --highlight <PATH>               Hightlight this file\r\n+    \r\n+ARGS:\r\n+    <PATH>    Project to analyse\"\r\n+    )\r\n+}\r\n+\r\n+pub fn print_analysis_stats_help() {\r\n+    println!(\r\n+        \"ra-cli-analysis-stats\r\n+\r\n+USAGE:\r\n+    ra_cli analysis-stats [FLAGS] [OPTIONS] [PATH]\r\n+    \r\n+FLAGS:\r\n+    -h, --help            Prints help information\r\n+        --memory-usage\r\n+    -v, --verbose\r\n+    \r\n+OPTIONS:\r\n+    -o <ONLY>\r\n+    \r\n+ARGS:\r\n+    <PATH>\"\r\n+    )\r\n+}\r\n+\r\n+pub fn print_highlight_help() {\r\n+    println!(\r\n+        \"ra-cli-highlight\r\n+    \r\n+USAGE:\r\n+    ra_cli highlight [FLAGS]\r\n+    \r\n+FLAGS:\r\n+    -h, --help       Prints help information\r\n+    -r, --rainbow\"\r\n+    )\r\n+}\r\n+\r\n+pub fn print_symbols_help() {\r\n+    println!(\r\n+        \"ra-cli-symbols\r\n+    \r\n+USAGE:\r\n+    ra_cli highlight [FLAGS]\r\n+    \r\n+FLAGS:\r\n+    -h, --help    Prints help inforamtion\"\r\n+    )\r\n+}\r\n+\r\n+pub fn print_parse_help() {\r\n+    println!(\r\n+        \"ra-cli-parse\r\n+    \r\n+USAGE:\r\n+    ra_cli parse [FLAGS]\r\n+    \r\n+FLAGS:\r\n+    -h, --help       Prints help inforamtion\r\n+        --no-dump\"\r\n+    )\r\n+}\r"}, {"sha": "9e6f869c128e25146f0c34b7659f0f7a66a4d50b", "filename": "crates/ra_cli/src/main.rs", "status": "modified", "additions": 109, "deletions": 77, "changes": 186, "blob_url": "https://github.com/rust-lang/rust/blob/735845d86e6ab94891e421823158f374e2f3412a/crates%2Fra_cli%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735845d86e6ab94891e421823158f374e2f3412a/crates%2Fra_cli%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fmain.rs?ref=735845d86e6ab94891e421823158f374e2f3412a", "patch": "@@ -1,10 +1,11 @@\n mod analysis_stats;\n mod analysis_bench;\n+mod help;\n \n-use std::{error::Error, io::Read};\n+use std::{error::Error, fmt::Write, io::Read};\n \n-use clap::{App, Arg, SubCommand};\n use flexi_logger::Logger;\n+use pico_args::Arguments;\n use ra_ide_api::{file_structure, Analysis};\n use ra_prof::profile;\n use ra_syntax::{AstNode, SourceFile};\n@@ -13,93 +14,124 @@ type Result<T> = std::result::Result<T, Box<dyn Error + Send + Sync>>;\n \n fn main() -> Result<()> {\n     Logger::with_env().start()?;\n-    let matches = App::new(\"ra-cli\")\n-        .setting(clap::AppSettings::SubcommandRequiredElseHelp)\n-        .subcommand(SubCommand::with_name(\"parse\").arg(Arg::with_name(\"no-dump\").long(\"--no-dump\")))\n-        .subcommand(SubCommand::with_name(\"symbols\"))\n-        .subcommand(\n-            SubCommand::with_name(\"highlight\")\n-                .arg(Arg::with_name(\"rainbow\").short(\"r\").long(\"rainbow\")),\n-        )\n-        .subcommand(\n-            SubCommand::with_name(\"analysis-stats\")\n-                .arg(Arg::with_name(\"verbose\").short(\"v\").long(\"verbose\"))\n-                .arg(Arg::with_name(\"memory-usage\").long(\"memory-usage\"))\n-                .arg(Arg::with_name(\"only\").short(\"o\").takes_value(true))\n-                .arg(Arg::with_name(\"path\")),\n-        )\n-        .subcommand(\n-            SubCommand::with_name(\"analysis-bench\")\n-                .arg(Arg::with_name(\"verbose\").short(\"v\").long(\"verbose\"))\n-                .arg(\n-                    Arg::with_name(\"highlight\")\n-                        .long(\"highlight\")\n-                        .takes_value(true)\n-                        .conflicts_with(\"complete\")\n-                        .value_name(\"PATH\")\n-                        .help(\"highlight this file\"),\n-                )\n-                .arg(\n-                    Arg::with_name(\"complete\")\n-                        .long(\"complete\")\n-                        .takes_value(true)\n-                        .conflicts_with(\"highlight\")\n-                        .value_name(\"PATH:LINE:COLUMN\")\n-                        .help(\"compute completions at this location\"),\n-                )\n-                .arg(Arg::with_name(\"path\").value_name(\"PATH\").help(\"project to analyze\")),\n-        )\n-        .get_matches();\n-    match matches.subcommand() {\n-        (\"parse\", Some(matches)) => {\n-            let _p = profile(\"parsing\");\n-            let file = file()?;\n-            if !matches.is_present(\"no-dump\") {\n-                println!(\"{:#?}\", file.syntax());\n+\n+    let subcommand = std::env::args_os().nth(1);\n+    if subcommand.is_none() {\n+        help::print_global_help();\n+        return Ok(());\n+    }\n+    let subcommand = subcommand.unwrap();\n+    let mut args: Vec<_> = std::env::args_os().collect();\n+    let mut matches = Arguments::from_vec(args.drain(2..).collect());\n+\n+    match &*subcommand.to_string_lossy() {\n+        \"parse\" => {\n+            if matches.contains([\"-h\", \"--help\"]) {\n+                help::print_parse_help();\n+                return Ok(());\n+            } else {\n+                let no_dump = matches.contains(\"--no-dump\");\n+                matches.finish().or_else(handle_extra_flags)?;\n+\n+                let _p = profile(\"parsing\");\n+                let file = file()?;\n+                if !no_dump {\n+                    println!(\"{:#?}\", file.syntax());\n+                }\n+                std::mem::forget(file);\n             }\n-            std::mem::forget(file);\n         }\n-        (\"symbols\", _) => {\n-            let file = file()?;\n-            for s in file_structure(&file) {\n-                println!(\"{:?}\", s);\n+        \"symbols\" => {\n+            if matches.contains([\"-h\", \"--help\"]) {\n+                help::print_symbols_help();\n+                return Ok(());\n+            } else {\n+                matches.finish().or_else(handle_extra_flags)?;\n+                let file = file()?;\n+                for s in file_structure(&file) {\n+                    println!(\"{:?}\", s);\n+                }\n             }\n         }\n-        (\"highlight\", Some(matches)) => {\n-            let (analysis, file_id) = Analysis::from_single_file(read_stdin()?);\n-            let html = analysis.highlight_as_html(file_id, matches.is_present(\"rainbow\")).unwrap();\n-            println!(\"{}\", html);\n+        \"highlight\" => {\n+            if matches.contains([\"-h\", \"--help\"]) {\n+                help::print_highlight_help();\n+                return Ok(());\n+            } else {\n+                let rainbow_opt = matches.contains([\"-r\", \"--rainbow\"]);\n+                matches.finish().or_else(handle_extra_flags)?;\n+                let (analysis, file_id) = Analysis::from_single_file(read_stdin()?);\n+                let html = analysis.highlight_as_html(file_id, rainbow_opt).unwrap();\n+                println!(\"{}\", html);\n+            }\n         }\n-        (\"analysis-stats\", Some(matches)) => {\n-            let verbose = matches.is_present(\"verbose\");\n-            let memory_usage = matches.is_present(\"memory-usage\");\n-            let path = matches.value_of(\"path\").unwrap_or(\"\");\n-            let only = matches.value_of(\"only\");\n-            analysis_stats::run(verbose, memory_usage, path.as_ref(), only)?;\n+        \"analysis-stats\" => {\n+            if matches.contains([\"-h\", \"--help\"]) {\n+                help::print_analysis_stats_help();\n+                return Ok(());\n+            } else {\n+                let verbose = matches.contains([\"-v\", \"--verbose\"]);\n+                let memory_usage = matches.contains(\"--memory-usage\");\n+                let path = matches.value_from_str(\"--path\")?.unwrap_or(\"\".to_string());\n+                let only = matches.value_from_str([\"-o\", \"--only\"])?.map(|v: String| v.to_owned());\n+                matches.finish().or_else(handle_extra_flags)?;\n+                analysis_stats::run(\n+                    verbose,\n+                    memory_usage,\n+                    path.as_ref(),\n+                    only.as_ref().map(String::as_ref),\n+                )?;\n+            }\n         }\n-        (\"analysis-bench\", Some(matches)) => {\n-            let verbose = matches.is_present(\"verbose\");\n-            let path = matches.value_of(\"path\").unwrap_or(\"\");\n-            let op = if let Some(path) = matches.value_of(\"highlight\") {\n-                analysis_bench::Op::Highlight { path: path.into() }\n-            } else if let Some(path_line_col) = matches.value_of(\"complete\") {\n-                let (path_line, column) = rsplit_at_char(path_line_col, ':')?;\n-                let (path, line) = rsplit_at_char(path_line, ':')?;\n-                analysis_bench::Op::Complete {\n-                    path: path.into(),\n-                    line: line.parse()?,\n-                    column: column.parse()?,\n-                }\n+        \"analysis-bench\" => {\n+            if matches.contains([\"-h\", \"--help\"]) {\n+                help::print_analysis_bench_help();\n+                return Ok(());\n             } else {\n-                panic!(\"either --highlight or --complete must be set\")\n-            };\n-            analysis_bench::run(verbose, path.as_ref(), op)?;\n+                let verbose = matches.contains([\"-v\", \"--verbose\"]);\n+                let path = matches.value_from_str(\"--path\")?.unwrap_or(\"\".to_string());\n+                let highlight_path = matches.value_from_str(\"--highlight\")?;\n+                let complete_path = matches.value_from_str(\"--complete\")?;\n+                if highlight_path.is_some() && complete_path.is_some() {\n+                    panic!(\"either --highlight or --complete must be set, not both\")\n+                }\n+                let op = if let Some(path) = highlight_path {\n+                    let path: String = path;\n+                    analysis_bench::Op::Highlight { path: path.into() }\n+                } else if let Some(path_line_col) = complete_path {\n+                    let path_line_col: String = path_line_col;\n+                    let (path_line, column) = rsplit_at_char(path_line_col.as_str(), ':')?;\n+                    let (path, line) = rsplit_at_char(path_line, ':')?;\n+                    analysis_bench::Op::Complete {\n+                        path: path.into(),\n+                        line: line.parse()?,\n+                        column: column.parse()?,\n+                    }\n+                } else {\n+                    panic!(\"either --highlight or --complete must be set\")\n+                };\n+                matches.finish().or_else(handle_extra_flags)?;\n+                analysis_bench::run(verbose, path.as_ref(), op)?;\n+            }\n         }\n-        _ => unreachable!(),\n+        _ => help::print_global_help(),\n     }\n     Ok(())\n }\n \n+fn handle_extra_flags(e: pico_args::Error) -> Result<()> {\n+    if let pico_args::Error::UnusedArgsLeft(flags) = e {\n+        let mut invalid_flags = String::new();\n+        for flag in flags {\n+            write!(&mut invalid_flags, \"{}, \", flag).expect(\"Error on write\");\n+        }\n+        let (invalid_flags, _) = invalid_flags.split_at(invalid_flags.len() - 2);\n+        Err(format!(\"Invalid flags: {}\", invalid_flags).into())\n+    } else {\n+        Err(e.to_string().into())\n+    }\n+}\n+\n fn file() -> Result<SourceFile> {\n     let text = read_stdin()?;\n     Ok(SourceFile::parse(&text).tree())"}]}