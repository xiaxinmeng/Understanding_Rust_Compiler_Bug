{"sha": "211c6d522b727f0e29994d84a7d53bb7b0d68bcd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxMWM2ZDUyMmI3MjdmMGUyOTk5NGQ4NGE3ZDUzYmI3YjBkNjhiY2Q=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-22T02:26:16Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T23:54:34Z"}, "message": "librustc: Extract `loan_path` from move data into an accessor", "tree": {"sha": "f17d014a676076637317296104b3cc3e9d24b420", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f17d014a676076637317296104b3cc3e9d24b420"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/211c6d522b727f0e29994d84a7d53bb7b0d68bcd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/211c6d522b727f0e29994d84a7d53bb7b0d68bcd", "html_url": "https://github.com/rust-lang/rust/commit/211c6d522b727f0e29994d84a7d53bb7b0d68bcd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/211c6d522b727f0e29994d84a7d53bb7b0d68bcd/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ba1b0bc0682235293c963d5638a8306acdfa097", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ba1b0bc0682235293c963d5638a8306acdfa097", "html_url": "https://github.com/rust-lang/rust/commit/2ba1b0bc0682235293c963d5638a8306acdfa097"}], "stats": {"total": 13, "additions": 8, "deletions": 5}, "files": [{"sha": "8a0bbb9a98017540f8d28952284b987f39e9bf25", "filename": "src/librustc/middle/borrowck/move_data.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/211c6d522b727f0e29994d84a7d53bb7b0d68bcd/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211c6d522b727f0e29994d84a7d53bb7b0d68bcd/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs?ref=211c6d522b727f0e29994d84a7d53bb7b0d68bcd", "patch": "@@ -15,7 +15,6 @@ comments in the section \"Moves and initialization\" and in `doc.rs`.\n \n */\n \n-\n use std::hashmap::{HashMap, HashSet};\n use std::uint;\n use middle::borrowck::*;\n@@ -174,6 +173,10 @@ impl MoveData {\n         }\n     }\n \n+    fn path_loan_path(&self, index: MovePathIndex) -> @LoanPath {\n+        self.paths[*index].loan_path\n+    }\n+\n     fn path<'a>(&'a self, index: MovePathIndex) -> &'a MovePath {\n         //! Type safe indexing operator\n         &self.paths[*index]\n@@ -400,7 +403,7 @@ impl MoveData {\n \n         // Kill all assignments when the variable goes out of scope:\n         for (assignment_index, assignment) in self.var_assignments.iter().enumerate() {\n-            match *self.path(assignment.path).loan_path {\n+            match *self.path_loan_path(assignment.path) {\n                 LpVar(id) => {\n                     let kill_id = tcx.region_maps.encl_scope(id);\n                     dfcx_assign.add_kill(kill_id, assignment_index);\n@@ -514,7 +517,7 @@ impl FlowedMoveData {\n         self.dfcx_moves.each_gen_bit_frozen(id, |index| {\n             let move = &self.move_data.moves[index];\n             let moved_path = move.path;\n-            f(move, self.move_data.path(moved_path).loan_path)\n+            f(move, self.move_data.path_loan_path(moved_path))\n         })\n     }\n \n@@ -555,7 +558,7 @@ impl FlowedMoveData {\n             if base_indices.iter().any(|x| x == &moved_path) {\n                 // Scenario 1 or 2: `loan_path` or some base path of\n                 // `loan_path` was moved.\n-                if !f(move, self.move_data.path(moved_path).loan_path) {\n+                if !f(move, self.move_data.path_loan_path(moved_path)) {\n                     ret = false;\n                 }\n             } else {\n@@ -564,7 +567,7 @@ impl FlowedMoveData {\n                         if p == loan_path_index {\n                             // Scenario 3: some extension of `loan_path`\n                             // was moved\n-                            f(move, self.move_data.path(moved_path).loan_path)\n+                            f(move, self.move_data.path_loan_path(moved_path))\n                         } else {\n                             true\n                         }"}]}