{"sha": "959f764f8b320299e3e1cf8d542346d681b85175", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1OWY3NjRmOGIzMjAyOTllM2UxY2Y4ZDU0MjM0NmQ2ODFiODUxNzU=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-09-15T12:46:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-09-15T12:46:21Z"}, "message": "Rollup merge of #36459 - nikomatsakis:issue-35546, r=eddyb\n\ninvoke drop glue with a ptr to (data, meta)\n\nThis is done by creating a little space on the stack. Hokey, but it's the simplest fix I can see, and I am in \"kill regressions\" mode right now.\n\nFixes #35546\n\nr? @eddyb", "tree": {"sha": "918537140b514d1732323c2776759c4d2d4b6023", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/918537140b514d1732323c2776759c4d2d4b6023"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/959f764f8b320299e3e1cf8d542346d681b85175", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/959f764f8b320299e3e1cf8d542346d681b85175", "html_url": "https://github.com/rust-lang/rust/commit/959f764f8b320299e3e1cf8d542346d681b85175", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/959f764f8b320299e3e1cf8d542346d681b85175/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69a7f92a7f27632dbe26b91afe95525222cd6349", "url": "https://api.github.com/repos/rust-lang/rust/commits/69a7f92a7f27632dbe26b91afe95525222cd6349", "html_url": "https://github.com/rust-lang/rust/commit/69a7f92a7f27632dbe26b91afe95525222cd6349"}, {"sha": "693676da4f65a14fbae2c44cd4e2a94ba0ccf6d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/693676da4f65a14fbae2c44cd4e2a94ba0ccf6d5", "html_url": "https://github.com/rust-lang/rust/commit/693676da4f65a14fbae2c44cd4e2a94ba0ccf6d5"}], "stats": {"total": 62, "additions": 58, "deletions": 4}, "files": [{"sha": "3073b1dbfaeebcd09d90d2daff23dd6816149a95", "filename": "src/librustc_trans/glue.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/959f764f8b320299e3e1cf8d542346d681b85175/src%2Flibrustc_trans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/959f764f8b320299e3e1cf8d542346d681b85175/src%2Flibrustc_trans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fglue.rs?ref=959f764f8b320299e3e1cf8d542346d681b85175", "patch": "@@ -296,6 +296,7 @@ fn trans_custom_dtor<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         sized_args = [v0];\n         &sized_args\n     } else {\n+        // FIXME(#36457) -- we should pass unsized values to drop glue as two arguments\n         unsized_args = [\n             Load(bcx, get_dataptr(bcx, v0)),\n             Load(bcx, get_meta(bcx, v0))\n@@ -440,7 +441,9 @@ pub fn size_and_align_of_dst<'blk, 'tcx>(bcx: &BlockAndBuilder<'blk, 'tcx>,\n     }\n }\n \n-fn make_drop_glue<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, v0: ValueRef, g: DropGlueKind<'tcx>)\n+fn make_drop_glue<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n+                              v0: ValueRef,\n+                              g: DropGlueKind<'tcx>)\n                               -> Block<'blk, 'tcx> {\n     let t = g.ty();\n \n@@ -463,6 +466,7 @@ fn make_drop_glue<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, v0: ValueRef, g: DropGlueK\n                 let llval = get_dataptr(bcx, v0);\n                 let llbox = Load(bcx, llval);\n                 let bcx = drop_ty(bcx, v0, content_ty, DebugLoc::None);\n+                // FIXME(#36457) -- we should pass unsized values to drop glue as two arguments\n                 let info = get_meta(bcx, v0);\n                 let info = Load(bcx, info);\n                 let (llsize, llalign) =\n@@ -488,6 +492,7 @@ fn make_drop_glue<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, v0: ValueRef, g: DropGlueK\n             // No support in vtable for distinguishing destroying with\n             // versus without calling Drop::drop. Assert caller is\n             // okay with always calling the Drop impl, if any.\n+            // FIXME(#36457) -- we should pass unsized values to drop glue as two arguments\n             assert!(!skip_dtor);\n             let data_ptr = get_dataptr(bcx, v0);\n             let vtable_ptr = Load(bcx, get_meta(bcx, v0));\n@@ -543,6 +548,7 @@ fn drop_structural_ty<'blk, 'tcx>(cx: Block<'blk, 'tcx>,\n     let value = if type_is_sized(cx.tcx(), t) {\n         adt::MaybeSizedValue::sized(av)\n     } else {\n+        // FIXME(#36457) -- we should pass unsized values as two arguments\n         let data = Load(cx, get_dataptr(cx, av));\n         let info = Load(cx, get_meta(cx, av));\n         adt::MaybeSizedValue::unsized_(data, info)\n@@ -586,6 +592,7 @@ fn drop_structural_ty<'blk, 'tcx>(cx: Block<'blk, 'tcx>,\n                     let val = if type_is_sized(cx.tcx(), field_ty) {\n                         llfld_a\n                     } else {\n+                        // FIXME(#36457) -- we should pass unsized values as two arguments\n                         let scratch = alloc_ty(cx, field_ty, \"__fat_ptr_iter\");\n                         Store(cx, llfld_a, get_dataptr(cx, scratch));\n                         Store(cx, value.meta, get_meta(cx, scratch));"}, {"sha": "0d919cb77570170687c1398852a38c410a26bd0f", "filename": "src/librustc_trans/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/959f764f8b320299e3e1cf8d542346d681b85175/src%2Flibrustc_trans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/959f764f8b320299e3e1cf8d542346d681b85175/src%2Flibrustc_trans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fintrinsic.rs?ref=959f764f8b320299e3e1cf8d542346d681b85175", "patch": "@@ -194,6 +194,7 @@ pub fn trans_intrinsic_call<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n             let ptr = if is_sized {\n                 llargs[0]\n             } else {\n+                // FIXME(#36457) -- we should pass unsized values as two arguments\n                 let scratch = alloc_ty(bcx, tp_ty, \"drop\");\n                 call_lifetime_start(bcx, scratch);\n                 Store(bcx, llargs[0], get_dataptr(bcx, scratch));"}, {"sha": "baeafbe3e346f221462bac0a0bea64538fa06f5a", "filename": "src/librustc_trans/mir/block.rs", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/959f764f8b320299e3e1cf8d542346d681b85175/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/959f764f8b320299e3e1cf8d542346d681b85175/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fblock.rs?ref=959f764f8b320299e3e1cf8d542346d681b85175", "patch": "@@ -242,10 +242,28 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                 let lvalue = self.trans_lvalue(&bcx, location);\n                 let drop_fn = glue::get_drop_glue(bcx.ccx(), ty);\n                 let drop_ty = glue::get_drop_glue_type(bcx.tcx(), ty);\n-                let llvalue = if drop_ty != ty {\n-                    bcx.pointercast(lvalue.llval, type_of::type_of(bcx.ccx(), drop_ty).ptr_to())\n+                let is_sized = common::type_is_sized(bcx.tcx(), ty);\n+                let llvalue = if is_sized {\n+                    if drop_ty != ty {\n+                        bcx.pointercast(lvalue.llval, type_of::type_of(bcx.ccx(), drop_ty).ptr_to())\n+                    } else {\n+                        lvalue.llval\n+                    }\n                 } else {\n-                    lvalue.llval\n+                    // FIXME(#36457) Currently drop glue takes sized\n+                    // values as a `*(data, meta)`, but elsewhere in\n+                    // MIR we pass `(data, meta)` as two separate\n+                    // arguments. It would be better to fix drop glue,\n+                    // but I am shooting for a quick fix to #35546\n+                    // here that can be cleanly backported to beta, so\n+                    // I want to avoid touching all of trans.\n+                    bcx.with_block(|bcx| {\n+                        let scratch = base::alloc_ty(bcx, ty, \"drop\");\n+                        base::call_lifetime_start(bcx, scratch);\n+                        build::Store(bcx, lvalue.llval, base::get_dataptr(bcx, scratch));\n+                        build::Store(bcx, lvalue.llextra, base::get_meta(bcx, scratch));\n+                        scratch\n+                    })\n                 };\n                 if let Some(unwind) = unwind {\n                     bcx.invoke(drop_fn,"}, {"sha": "e8d14f1d421460fd093fbd82fcbef027137a7a7a", "filename": "src/test/run-pass/issue-35546.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/959f764f8b320299e3e1cf8d542346d681b85175/src%2Ftest%2Frun-pass%2Fissue-35546.rs", "raw_url": "https://github.com/rust-lang/rust/raw/959f764f8b320299e3e1cf8d542346d681b85175/src%2Ftest%2Frun-pass%2Fissue-35546.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-35546.rs?ref=959f764f8b320299e3e1cf8d542346d681b85175", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Regression test for #35546. Check that we are able to codegen\n+// this. Before we had problems because of the drop glue signature\n+// around dropping a trait object (specifically, when dropping the\n+// `value` field of `Node<Send>`).\n+\n+struct Node<T: ?Sized + Send> {\n+    next: Option<Box<Node<Send>>>,\n+    value: T,\n+}\n+\n+fn clear(head: &mut Option<Box<Node<Send>>>) {\n+    match head.take() {\n+        Some(node) => *head = node.next,\n+        None => (),\n+    }\n+}\n+\n+fn main() {}"}]}