{"sha": "fe2ac4480bd71c9cf25d2c21bda82b33558d27a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlMmFjNDQ4MGJkNzFjOWNmMjVkMmMyMWJkYTgyYjMzNTU4ZDI3YTQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-11-28T13:56:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-28T13:56:28Z"}, "message": "Merge #6656\n\n6656: Coalesce flycheck events r=matklad a=jonas-schievink\n\n\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "1d5898fdd15406761c92e62e394f7602bead8321", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d5898fdd15406761c92e62e394f7602bead8321"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe2ac4480bd71c9cf25d2c21bda82b33558d27a4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfwlcMCRBK7hj4Ov3rIwAAdHIIAKDXekbTQVBHQlY4e3C59ANS\nCvn6UtC+FVMzHVyooYhbwNW2Mp1zwBBUucUZqzkfkPtLbz81LX0KrEcjn0blZRev\nGg5w6lNdebCIkwpM/+z7z3arAPQV1e+RKtTHnY++gOjy+yxdOVljKGdjRkVfRPst\nzI5Lcycum9YSA45bD2wMFv1xp9nvToqxysWLlzIc0CWyd3Mxb+f9TuDSrjGtgPxS\nwKiJXNH2sVNcR6CbALcxSJCxhZ3gv9s6JLpROzTwlOSDVnExVWl19CmCmQ7tVjTm\nIu0QKq7Svo54ixw9hYgQAmYc3wEMnXxsskpJZTzN0ySYCuGXLeKeY29D6WvpZtU=\n=w7Hg\n-----END PGP SIGNATURE-----\n", "payload": "tree 1d5898fdd15406761c92e62e394f7602bead8321\nparent 59c4975b54066417d22ab4ae028f53e1ee1e847d\nparent f52abbe62d7912bf04d305022e0ced41311a0435\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1606571788 +0000\ncommitter GitHub <noreply@github.com> 1606571788 +0000\n\nMerge #6656\n\n6656: Coalesce flycheck events r=matklad a=jonas-schievink\n\n\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe2ac4480bd71c9cf25d2c21bda82b33558d27a4", "html_url": "https://github.com/rust-lang/rust/commit/fe2ac4480bd71c9cf25d2c21bda82b33558d27a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe2ac4480bd71c9cf25d2c21bda82b33558d27a4/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59c4975b54066417d22ab4ae028f53e1ee1e847d", "url": "https://api.github.com/repos/rust-lang/rust/commits/59c4975b54066417d22ab4ae028f53e1ee1e847d", "html_url": "https://github.com/rust-lang/rust/commit/59c4975b54066417d22ab4ae028f53e1ee1e847d"}, {"sha": "f52abbe62d7912bf04d305022e0ced41311a0435", "url": "https://api.github.com/repos/rust-lang/rust/commits/f52abbe62d7912bf04d305022e0ced41311a0435", "html_url": "https://github.com/rust-lang/rust/commit/f52abbe62d7912bf04d305022e0ced41311a0435"}], "stats": {"total": 104, "additions": 59, "deletions": 45}, "files": [{"sha": "f349b081034fd46239e2c34a08d2616d5f954063", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 59, "deletions": 45, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/fe2ac4480bd71c9cf25d2c21bda82b33558d27a4/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe2ac4480bd71c9cf25d2c21bda82b33558d27a4/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=fe2ac4480bd71c9cf25d2c21bda82b33558d27a4", "patch": "@@ -289,55 +289,69 @@ impl GlobalState {\n                     }\n                 }\n             }\n-            Event::Flycheck(task) => match task {\n-                flycheck::Message::AddDiagnostic { workspace_root, diagnostic } => {\n-                    let diagnostics = crate::diagnostics::to_proto::map_rust_diagnostic_to_lsp(\n-                        &self.config.diagnostics_map,\n-                        &diagnostic,\n-                        &workspace_root,\n-                    );\n-                    for diag in diagnostics {\n-                        match url_to_file_id(&self.vfs.read().0, &diag.url) {\n-                            Ok(file_id) => self.diagnostics.add_check_diagnostic(\n-                                file_id,\n-                                diag.diagnostic,\n-                                diag.fixes,\n-                            ),\n-                            Err(err) => {\n-                                log::error!(\"File with cargo diagnostic not found in VFS: {}\", err);\n-                            }\n-                        };\n-                    }\n-                }\n-\n-                flycheck::Message::Progress { id, progress } => {\n-                    let (state, message) = match progress {\n-                        flycheck::Progress::DidStart => {\n-                            self.diagnostics.clear_check();\n-                            (Progress::Begin, None)\n-                        }\n-                        flycheck::Progress::DidCheckCrate(target) => {\n-                            (Progress::Report, Some(target))\n-                        }\n-                        flycheck::Progress::DidCancel => (Progress::End, None),\n-                        flycheck::Progress::DidFinish(result) => {\n-                            if let Err(err) = result {\n-                                log::error!(\"cargo check failed: {}\", err)\n+            Event::Flycheck(mut task) => {\n+                let _p = profile::span(\"GlobalState::handle_event/flycheck\");\n+                loop {\n+                    match task {\n+                        flycheck::Message::AddDiagnostic { workspace_root, diagnostic } => {\n+                            let diagnostics =\n+                                crate::diagnostics::to_proto::map_rust_diagnostic_to_lsp(\n+                                    &self.config.diagnostics_map,\n+                                    &diagnostic,\n+                                    &workspace_root,\n+                                );\n+                            for diag in diagnostics {\n+                                match url_to_file_id(&self.vfs.read().0, &diag.url) {\n+                                    Ok(file_id) => self.diagnostics.add_check_diagnostic(\n+                                        file_id,\n+                                        diag.diagnostic,\n+                                        diag.fixes,\n+                                    ),\n+                                    Err(err) => {\n+                                        log::error!(\n+                                            \"File with cargo diagnostic not found in VFS: {}\",\n+                                            err\n+                                        );\n+                                    }\n+                                };\n                             }\n-                            (Progress::End, None)\n                         }\n-                    };\n \n-                    // When we're running multiple flychecks, we have to include a disambiguator in\n-                    // the title, or the editor complains. Note that this is a user-facing string.\n-                    let title = if self.flycheck.len() == 1 {\n-                        \"cargo check\".to_string()\n-                    } else {\n-                        format!(\"cargo check (#{})\", id + 1)\n-                    };\n-                    self.report_progress(&title, state, message, None);\n+                        flycheck::Message::Progress { id, progress } => {\n+                            let (state, message) = match progress {\n+                                flycheck::Progress::DidStart => {\n+                                    self.diagnostics.clear_check();\n+                                    (Progress::Begin, None)\n+                                }\n+                                flycheck::Progress::DidCheckCrate(target) => {\n+                                    (Progress::Report, Some(target))\n+                                }\n+                                flycheck::Progress::DidCancel => (Progress::End, None),\n+                                flycheck::Progress::DidFinish(result) => {\n+                                    if let Err(err) = result {\n+                                        log::error!(\"cargo check failed: {}\", err)\n+                                    }\n+                                    (Progress::End, None)\n+                                }\n+                            };\n+\n+                            // When we're running multiple flychecks, we have to include a disambiguator in\n+                            // the title, or the editor complains. Note that this is a user-facing string.\n+                            let title = if self.flycheck.len() == 1 {\n+                                \"cargo check\".to_string()\n+                            } else {\n+                                format!(\"cargo check (#{})\", id + 1)\n+                            };\n+                            self.report_progress(&title, state, message, None);\n+                        }\n+                    }\n+                    // Coalesce many flycheck updates into a single loop turn\n+                    task = match self.flycheck_receiver.try_recv() {\n+                        Ok(task) => task,\n+                        Err(_) => break,\n+                    }\n                 }\n-            },\n+            }\n         }\n \n         let state_changed = self.process_changes();"}]}